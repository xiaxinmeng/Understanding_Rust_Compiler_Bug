{"sha": "fa07f9da8b72e4a11c96200734383b4eed5b12c3", "node_id": "C_kwDOANBUbNoAKGZhMDdmOWRhOGI3MmU0YTExYzk2MjAwNzM0MzgzYjRlZWQ1YjEyYzM", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-06T12:45:33Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T05:58:04Z"}, "message": "RISC-V: Add vmulh.vx C API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/vmulh_vx_m_rv32-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_m_rv32-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_m_rv32-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_m_rv64-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_m_rv64-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_m_rv64-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_mu_rv32-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_mu_rv32-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_mu_rv32-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_mu_rv64-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_mu_rv64-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_mu_rv64-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_rv32-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_rv32-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_rv32-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_rv64-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_rv64-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_rv64-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_tu_rv32-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_tu_rv32-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_tu_rv32-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_tu_rv64-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_tu_rv64-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_tu_rv64-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_tum_rv32-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_tum_rv32-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_tum_rv32-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_tum_rv64-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_tum_rv64-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_tum_rv64-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_tumu_rv32-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_tumu_rv32-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_tumu_rv32-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_tumu_rv64-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_tumu_rv64-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmulh_vx_tumu_rv64-3.c: New test.", "tree": {"sha": "84482a8a2255e31dd2ab1bd367136dfb02b4d0d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84482a8a2255e31dd2ab1bd367136dfb02b4d0d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa07f9da8b72e4a11c96200734383b4eed5b12c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa07f9da8b72e4a11c96200734383b4eed5b12c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa07f9da8b72e4a11c96200734383b4eed5b12c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa07f9da8b72e4a11c96200734383b4eed5b12c3/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "956c0c8c7dc47a6c6a1b4cd6429f746d6b3277c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/956c0c8c7dc47a6c6a1b4cd6429f746d6b3277c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/956c0c8c7dc47a6c6a1b4cd6429f746d6b3277c3"}], "stats": {"total": 5706, "additions": 5706, "deletions": 0}, "files": [{"sha": "eda59bd9e22f36e4f0640fa2580ea1ed6de0dde3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_m_rv32-1.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_m_rv32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_m_rv32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_m_rv32-1.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_m(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_m(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_m(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_m(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_m(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_m(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_m(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_m(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_m(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_m(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_m(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_m(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_m(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_m(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_m(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_m(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_m(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_m(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_m(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_m(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_m(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_m(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_m(mask,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vmulh\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 4 } } */"}, {"sha": "912b45abefcf38132f351251d9ac3bf214347db7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_m_rv32-2.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_m_rv32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_m_rv32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_m_rv32-2.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_m(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_m(mask,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_m(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_m(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_m(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_m(mask,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_m(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_m(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_m(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_m(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_m(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_m(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_m(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_m(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_m(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_m(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_m(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_m(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_m(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_m(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_m(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_m(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_m(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_m(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_m(mask,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vmulh\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 4 } } */"}, {"sha": "397d1c1031af5663c556c7c3d4c9378e3f182472", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_m_rv32-3.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_m_rv32-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_m_rv32-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_m_rv32-3.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_m(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_m(mask,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_m(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_m(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_m(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_m(mask,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_m(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_m(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_m(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_m(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_m(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_m(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_m(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_m(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_m(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_m(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_m(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_m(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_m(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_m(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_m(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_m(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_m(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_m(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_m(mask,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vmulh\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 4 } } */"}, {"sha": "d4b329cf72b8fe727b28fdde2d4710c41dcfed45", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_m_rv64-1.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_m_rv64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_m_rv64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_m_rv64-1.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_m(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_m(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_m(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_m(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_m(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_m(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_m(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_m(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_m(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_m(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_m(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_m(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_m(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_m(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_m(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_m(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_m(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_m(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_m(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_m(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_m(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_m(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_m(mask,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "1217b1f7c1311a6902a6f963da37d3aec5a1b775", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_m_rv64-2.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_m_rv64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_m_rv64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_m_rv64-2.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_m(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_m(mask,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_m(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_m(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_m(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_m(mask,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_m(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_m(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_m(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_m(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_m(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_m(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_m(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_m(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_m(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_m(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_m(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_m(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_m(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_m(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_m(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_m(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_m(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_m(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_m(mask,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "3f5bc41375c7c43e834c4471e56e42f1d452ed1a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_m_rv64-3.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_m_rv64-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_m_rv64-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_m_rv64-3.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_m(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_m(mask,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_m(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_m(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_m(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_m(mask,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_m(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_m(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_m(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_m(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_m(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_m(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_m(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_m(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_m(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_m(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_m(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_m(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_m(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_m(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_m(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_m(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_m(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_m(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_m(mask,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "545dbeebb8b4f5ae54285721918a52a7fa307748", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_mu_rv32-1.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_mu_rv32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_mu_rv32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_mu_rv32-1.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vmulh\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 4 } } */"}, {"sha": "82c4b0092e6b1eb9608de251c7008ac497b70a99", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_mu_rv32-2.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_mu_rv32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_mu_rv32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_mu_rv32-2.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vmulh\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 4 } } */"}, {"sha": "2f2bc0279f7017669e4140db2501cf8139f85d0f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_mu_rv32-3.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_mu_rv32-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_mu_rv32-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_mu_rv32-3.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vmulh\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 4 } } */"}, {"sha": "afb8d6f67982e558c7a48b8a920932554d4f7fa9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_mu_rv64-1.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_mu_rv64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_mu_rv64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_mu_rv64-1.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "ad7db139e5aa2ec04357fa2f4f0fc13fdb486690", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_mu_rv64-2.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_mu_rv64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_mu_rv64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_mu_rv64-2.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "95ee6ec7bd4f744bf033b177905a55b41626ca2f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_mu_rv64-3.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_mu_rv64-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_mu_rv64-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_mu_rv64-3.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "a2c0d0a1d593b123c0b7480f8ef0bf1ab6ba9309", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_rv32-1.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_rv32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_rv32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_rv32-1.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8(op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4(op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2(op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1(op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2(op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4(op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8(op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4(op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2(op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1(op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2(op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4(op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8(op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2(op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1(op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2(op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4(op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8(op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1(op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2(op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4(op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8(op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vmulh\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 4 } } */"}, {"sha": "746f6e7a6bba8a1f67284282889aff74d79ac15e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_rv32-2.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_rv32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_rv32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_rv32-2.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8(op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4(op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2(op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1(op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2(op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4(op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8(op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4(op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2(op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1(op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2(op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4(op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8(op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2(op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1(op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2(op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4(op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8(op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1(op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2(op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4(op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8(op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vmulh\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 4 } } */"}, {"sha": "21ec4683981dbb67942264a164ea45612cae6550", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_rv32-3.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_rv32-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_rv32-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_rv32-3.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8(op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4(op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2(op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1(op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2(op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4(op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8(op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4(op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2(op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1(op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2(op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4(op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8(op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2(op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1(op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2(op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4(op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8(op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1(op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2(op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4(op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8(op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vmulh\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 4 } } */"}, {"sha": "43bb22588be4deccf9ea1353a03732365b208cfd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_rv64-1.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_rv64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_rv64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_rv64-1.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8(op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4(op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2(op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1(op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2(op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4(op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8(op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4(op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2(op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1(op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2(op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4(op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8(op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2(op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1(op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2(op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4(op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8(op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1(op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2(op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4(op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8(op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "e4ae37f2a69c3b62ba72c1f0fe2f30b6704c1e3d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_rv64-2.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_rv64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_rv64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_rv64-2.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8(op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4(op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2(op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1(op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2(op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4(op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8(op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4(op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2(op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1(op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2(op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4(op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8(op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2(op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1(op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2(op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4(op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8(op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1(op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2(op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4(op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8(op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "6b9c201194a02ea32daf78352e4990357fac680c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_rv64-3.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_rv64-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_rv64-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_rv64-3.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8(op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4(op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2(op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1(op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2(op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4(op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8(op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4(op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2(op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1(op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2(op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4(op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8(op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2(op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1(op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2(op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4(op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8(op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1(op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2(op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4(op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8(op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "d7d306cfe03dd7d723202ba373348938a4302ec6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_tu_rv32-1.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tu_rv32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tu_rv32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tu_rv32-1.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vmulh\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 4 } } */"}, {"sha": "ed730e273e3fe3e09931647f9e6578704df8f9ee", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_tu_rv32-2.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tu_rv32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tu_rv32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tu_rv32-2.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_tu(merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vmulh\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 4 } } */"}, {"sha": "b110f9bd9729a16229eaca868e09bf69a2a32f01", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_tu_rv32-3.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tu_rv32-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tu_rv32-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tu_rv32-3.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_tu(merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vmulh\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 4 } } */"}, {"sha": "4de7481fdb2796b750b2a7b60dd7cb8341cc4c46", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_tu_rv64-1.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tu_rv64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tu_rv64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tu_rv64-1.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "c7bb846e692697e1c4cbf18471b358e81f2637f4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_tu_rv64-2.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tu_rv64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tu_rv64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tu_rv64-2.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_tu(merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "691c1345e0f8254de845322d31471468684d07e3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_tu_rv64-3.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tu_rv64-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tu_rv64-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tu_rv64-3.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_tu(merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "1463fd76c7598bd9a5871279b9af3a51b8d38f35", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_tum_rv32-1.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tum_rv32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tum_rv32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tum_rv32-1.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vmulh\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 4 } } */"}, {"sha": "a755e9b1321b3ceb77a388039232d8cfc434e61c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_tum_rv32-2.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tum_rv32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tum_rv32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tum_rv32-2.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vmulh\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 4 } } */"}, {"sha": "600b5d3a3e19693e5e9200f86204f66870857e3b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_tum_rv32-3.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tum_rv32-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tum_rv32-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tum_rv32-3.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vmulh\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 4 } } */"}, {"sha": "718ee74f49ea03e402cdfc9903631d0c06c5b9b5", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_tum_rv64-1.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tum_rv64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tum_rv64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tum_rv64-1.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "1ce5c543ce07390cbec33a92af8bc6e9f8011a4b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_tum_rv64-2.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tum_rv64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tum_rv64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tum_rv64-2.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "46659a4b62c6d6cc5963e6c65e2a4859e3fddf70", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_tum_rv64-3.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tum_rv64-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tum_rv64-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tum_rv64-3.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "87e256bd45dd9074ce9c3760b4a1d27f949525f8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_tumu_rv32-1.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tumu_rv32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tumu_rv32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tumu_rv32-1.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vmulh\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 4 } } */"}, {"sha": "33bc13fcd3323996eac12229e35d3be65baef0e3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_tumu_rv32-2.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tumu_rv32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tumu_rv32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tumu_rv32-2.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vmulh\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 4 } } */"}, {"sha": "360580108bb21a8fa117245a2da051153e3f8aea", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_tumu_rv32-3.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tumu_rv32-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tumu_rv32-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tumu_rv32-3.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vmulh\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 4 } } */"}, {"sha": "b4cf7d558bc9d0f370cae460167448fc0ff6b17a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_tumu_rv64-1.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tumu_rv64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tumu_rv64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tumu_rv64-1.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "8e885b87cfb5dbcb1bfc545e16ae64a94c229f70", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_tumu_rv64-2.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tumu_rv64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tumu_rv64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tumu_rv64-2.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "b2d14555d71162b35df36291002e5026af66395b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmulh_vx_tumu_rv64-3.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tumu_rv64-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa07f9da8b72e4a11c96200734383b4eed5b12c3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tumu_rv64-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmulh_vx_tumu_rv64-3.c?ref=fa07f9da8b72e4a11c96200734383b4eed5b12c3", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmulh_vx_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmulh_vx_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmulh_vx_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8mf2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmulh_vx_i8m1_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m1_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmulh_vx_i8m2_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmulh_vx_i8m4_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmulh_vx_i8m8_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i8m8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmulh_vx_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmulh_vx_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16mf2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmulh_vx_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m1_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmulh_vx_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmulh_vx_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmulh_vx_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i16m8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmulh_vx_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32mf2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmulh_vx_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m1_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmulh_vx_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmulh_vx_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmulh_vx_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i32m8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmulh_vx_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m1_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmulh_vx_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmulh_vx_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmulh_vx_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmulh_vx_i64m8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}]}