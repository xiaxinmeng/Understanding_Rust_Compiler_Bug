{"sha": "833f1e66e3a8efdbb941a44ac9e74101d771e0d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMzZjFlNjZlM2E4ZWZkYmI5NDFhNDRhYzllNzQxMDFkNzcxZTBkNQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-30T20:23:40Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-03T19:31:15Z"}, "message": "analyzer: avoid use of fold_build2\n\nVarious places in the analyzer use fold_build2, test the result, then\ndiscard it.  It's more efficient to use fold_binary, which avoids\nbuilding and GC-ing a redundant tree for the cases where folding fails.\n\ngcc/analyzer/ChangeLog:\n\t* constraint-manager.cc (range::constrained_to_single_element):\n\tReplace fold_build2 with fold_binary.  Remove unnecessary newline.\n\t(constraint_manager::get_or_add_equiv_class): Replace fold_build2\n\twith fold_binary in two places, and remove out-of-date comment.\n\t(constraint_manager::eval_condition): Replace fold_build2 with\n\tfold_binary.\n\t* region-model.cc (constant_svalue::eval_condition): Likewise.\n\t(region_model::on_assignment): Likewise.", "tree": {"sha": "040579e351f6bb29bcfd37aa73ec740e94d52d34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/040579e351f6bb29bcfd37aa73ec740e94d52d34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/833f1e66e3a8efdbb941a44ac9e74101d771e0d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833f1e66e3a8efdbb941a44ac9e74101d771e0d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/833f1e66e3a8efdbb941a44ac9e74101d771e0d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833f1e66e3a8efdbb941a44ac9e74101d771e0d5/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8525d1f5f57b11fe04a97674cc2fc2b7727621d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8525d1f5f57b11fe04a97674cc2fc2b7727621d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8525d1f5f57b11fe04a97674cc2fc2b7727621d0"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "4f0d0142fdc6b59e777e8657090cea137f855183", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833f1e66e3a8efdbb941a44ac9e74101d771e0d5/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833f1e66e3a8efdbb941a44ac9e74101d771e0d5/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=833f1e66e3a8efdbb941a44ac9e74101d771e0d5", "patch": "@@ -1,3 +1,14 @@\n+2020-02-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* constraint-manager.cc (range::constrained_to_single_element):\n+\tReplace fold_build2 with fold_binary.  Remove unnecessary newline.\n+\t(constraint_manager::get_or_add_equiv_class): Replace fold_build2\n+\twith fold_binary in two places, and remove out-of-date comment.\n+\t(constraint_manager::eval_condition): Replace fold_build2 with\n+\tfold_binary.\n+\t* region-model.cc (constant_svalue::eval_condition): Likewise.\n+\t(region_model::on_assignment): Likewise.\n+\n 2020-02-03  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93544"}, {"sha": "d5a6939e7144eeb30092988647ceabcff13fe5e0", "filename": "gcc/analyzer/constraint-manager.cc", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833f1e66e3a8efdbb941a44ac9e74101d771e0d5/gcc%2Fanalyzer%2Fconstraint-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833f1e66e3a8efdbb941a44ac9e74101d771e0d5/gcc%2Fanalyzer%2Fconstraint-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fconstraint-manager.cc?ref=833f1e66e3a8efdbb941a44ac9e74101d771e0d5", "patch": "@@ -145,10 +145,9 @@ range::constrained_to_single_element (tree *out)\n   m_upper_bound.ensure_closed (true);\n \n   // Are they equal?\n-  tree comparison\n-    = fold_build2 (EQ_EXPR, boolean_type_node,\n-\t\t   m_lower_bound.m_constant,\n-\t\t   m_upper_bound.m_constant);\n+  tree comparison = fold_binary (EQ_EXPR, boolean_type_node,\n+\t\t\t\t m_lower_bound.m_constant,\n+\t\t\t\t m_upper_bound.m_constant);\n   if (comparison == boolean_true_node)\n     {\n       *out = m_lower_bound.m_constant;\n@@ -932,7 +931,7 @@ constraint_manager::get_or_add_equiv_class (svalue_id sid)\n \t    && types_compatible_p (TREE_TYPE (cst),\n \t\t\t\t   TREE_TYPE (ec->m_constant)))\n \t  {\n-\t    tree eq = fold_build2 (EQ_EXPR, boolean_type_node,\n+\t    tree eq = fold_binary (EQ_EXPR, boolean_type_node,\n \t\t\t\t   cst, ec->m_constant);\n \t    if (eq == boolean_true_node)\n \t      {\n@@ -969,10 +968,8 @@ constraint_manager::get_or_add_equiv_class (svalue_id sid)\n \t\t Determine the direction of the inequality, and record that\n \t\t fact.  */\n \t      tree lt\n-\t\t= fold_build2 (LT_EXPR, boolean_type_node,\n+\t\t= fold_binary (LT_EXPR, boolean_type_node,\n \t\t\t       new_ec->m_constant, other_ec.m_constant);\n-\t      //gcc_assert (lt == boolean_true_node || lt == boolean_false_node);\n-\t      // not true for int vs float comparisons\n \t      if (lt == boolean_true_node)\n \t\tadd_constraint_internal (new_id, CONSTRAINT_LT, other_id);\n \t      else if (lt == boolean_false_node)\n@@ -1018,7 +1015,7 @@ constraint_manager::eval_condition (equiv_class_id lhs_ec,\n   if (lhs_const && rhs_const)\n     {\n       tree comparison\n-\t= fold_build2 (op, boolean_type_node, lhs_const, rhs_const);\n+\t= fold_binary (op, boolean_type_node, lhs_const, rhs_const);\n       if (comparison == boolean_true_node)\n \treturn tristate (tristate::TS_TRUE);\n       if (comparison == boolean_false_node)"}, {"sha": "c837ec6ed3b8858fd1869bea98d3b7a40a88d837", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833f1e66e3a8efdbb941a44ac9e74101d771e0d5/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833f1e66e3a8efdbb941a44ac9e74101d771e0d5/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=833f1e66e3a8efdbb941a44ac9e74101d771e0d5", "patch": "@@ -670,7 +670,7 @@ constant_svalue::eval_condition (constant_svalue *lhs,\n   if (types_compatible_p (TREE_TYPE (lhs_const), TREE_TYPE (rhs_const)))\n     {\n       tree comparison\n-\t= fold_build2 (op, boolean_type_node, lhs_const, rhs_const);\n+\t= fold_binary (op, boolean_type_node, lhs_const, rhs_const);\n       if (comparison == boolean_true_node)\n \treturn tristate (tristate::TS_TRUE);\n       if (comparison == boolean_false_node)\n@@ -4088,9 +4088,9 @@ region_model::on_assignment (const gassign *assign, region_model_context *ctxt)\n \tif (tree rhs1_cst = maybe_get_constant (rhs1_sid))\n \t  if (tree rhs2_cst = maybe_get_constant (rhs2_sid))\n \t    {\n-\t      tree result = fold_build2 (op, TREE_TYPE (lhs),\n+\t      tree result = fold_binary (op, TREE_TYPE (lhs),\n \t\t\t\t\t rhs1_cst, rhs2_cst);\n-\t      if (CONSTANT_CLASS_P (result))\n+\t      if (result && CONSTANT_CLASS_P (result))\n \t\t{\n \t\t  svalue_id result_sid\n \t\t    = get_or_create_constant_svalue (result);"}]}