{"sha": "4a121cc34cd8153380aee3246979b8fb35e2a88f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGExMjFjYzM0Y2Q4MTUzMzgwYWVlMzI0Njk3OWI4ZmIzNWUyYTg4Zg==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2001-07-26T13:59:22Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2001-07-26T13:59:22Z"}, "message": "params.def (PARAM_MAX_PENDING_LIST_LENGTH): Add parameter to limit length of dependancy flush list.\n\n\n2001-07-26  Andrew MacLeod  <amacleod@redhat.com>\n\n\t* params.def (PARAM_MAX_PENDING_LIST_LENGTH): Add parameter to\n\tlimit length of dependancy flush list.\n\t* params.h (MAX_PENDING_LIST_LENGTH): Define.\n\t* sched-int.h  (struct deps): Add pending_flush_length field.\n\t* sched-deps.c (flush_pending_lists): Last_pending_memory_flush now\n\thas 1 element in it.\n\t(sched_analyze_1): Use MAX_PENDING_LIST_LENGTH.\n\t(sched_analyze): After a jump, if the pending memory flush list is too\n\tlarge, flush the pending lists.\n\t(init_deps): Initialize pending_flush_length to 0.\n\t* doc/invoke.texi (max_pending_list_length): Document parameter.\n\nFrom-SVN: r44398", "tree": {"sha": "d529585912a27f24d918c1691b52427ec3a93d8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d529585912a27f24d918c1691b52427ec3a93d8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a121cc34cd8153380aee3246979b8fb35e2a88f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a121cc34cd8153380aee3246979b8fb35e2a88f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a121cc34cd8153380aee3246979b8fb35e2a88f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a121cc34cd8153380aee3246979b8fb35e2a88f/comments", "author": null, "committer": null, "parents": [{"sha": "db3ef87b8a1858f77998a9e8a5275cc5755350d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db3ef87b8a1858f77998a9e8a5275cc5755350d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db3ef87b8a1858f77998a9e8a5275cc5755350d7"}], "stats": {"total": 56, "additions": 50, "deletions": 6}, "files": [{"sha": "8bc87889e78ca5b0fbd3147df3f3a523d7352035", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a121cc34cd8153380aee3246979b8fb35e2a88f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a121cc34cd8153380aee3246979b8fb35e2a88f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a121cc34cd8153380aee3246979b8fb35e2a88f", "patch": "@@ -1,3 +1,17 @@\n+2001-07-26  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* params.def (PARAM_MAX_PENDING_LIST_LENGTH): Add parameter to \n+\tlimit length of dependancy flush list.\n+\t* params.h (MAX_PENDING_LIST_LENGTH): Define.\n+\t* sched-int.h  (struct deps): Add pending_flush_length field.\n+\t* sched-deps.c (flush_pending_lists): Last_pending_memory_flush now\n+\thas 1 element in it.\n+\t(sched_analyze_1): Use MAX_PENDING_LIST_LENGTH.\n+\t(sched_analyze): After a jump, if the pending memory flush list is too\n+\tlarge, flush the pending lists.\n+\t(init_deps): Initialize pending_flush_length to 0.\n+\t* doc/invoke.texi (max_pending_list_length): Document parameter.\n+\n 2001-07-26  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* toplev.c, varasm.c, final.c: Include xcoffout.h if appropriate."}, {"sha": "f3b3e8e26f02d348c39d65d2280f4377bafc6517", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a121cc34cd8153380aee3246979b8fb35e2a88f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a121cc34cd8153380aee3246979b8fb35e2a88f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=4a121cc34cd8153380aee3246979b8fb35e2a88f", "patch": "@@ -3808,6 +3808,12 @@ optimization will not be done.\n @item max-gcse-passes\n The maximum number of passes of GCSE to run.\n \n+@item max-pending-list-length\n+The maximum number of pending dependancies scheduling will allow\n+before flushing the current state and starting over.  Large functions\n+with few branches or calls can create excessively large lists which\n+needlessly consume memory and resources.\n+\n @item max-inline-insns\n If an function contains more than this many instructions, it\n will not be inlined.  This option is precisely equivalent to"}, {"sha": "ca952c1b35661458a9e9a5a7f88dbd478d553025", "filename": "gcc/params.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a121cc34cd8153380aee3246979b8fb35e2a88f/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a121cc34cd8153380aee3246979b8fb35e2a88f/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=4a121cc34cd8153380aee3246979b8fb35e2a88f", "patch": "@@ -68,6 +68,16 @@ DEFPARAM(PARAM_MAX_DELAY_SLOT_LIVE_SEARCH,\n \t \"The maximum number of instructions to consider to find accurate live register information\",\n \t 333)\n \n+/* This parameter limits the number of branch elements that the \n+   scheduler will track anti-dependancies through without resetting\n+   the tracking mechanism.  Large functions with few calls or barriers \n+   can generate lists containing many 1000's of dependancies.  Generally \n+   the compiler either uses all available memory, or runs for far too long.  */\n+DEFPARAM(PARAM_MAX_PENDING_LIST_LENGTH,\n+\t \"max-pending-list-length\",\n+\t \"The maximum length of scheduling's pending operations list\",\n+\t 32)\n+\n /* The GCSE optimization will be disabled if it would require\n    significantly more memory than this value.  */\n DEFPARAM(PARAM_MAX_GCSE_MEMORY,"}, {"sha": "e8eb285275ca1577da6c511b177b2cedd3f767b0", "filename": "gcc/params.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a121cc34cd8153380aee3246979b8fb35e2a88f/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a121cc34cd8153380aee3246979b8fb35e2a88f/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=4a121cc34cd8153380aee3246979b8fb35e2a88f", "patch": "@@ -90,6 +90,8 @@ typedef enum compiler_param\n   PARAM_VALUE (PARAM_MAX_DELAY_SLOT_INSN_SEARCH)\n #define MAX_DELAY_SLOT_LIVE_SEARCH \\\n   PARAM_VALUE (PARAM_MAX_DELAY_SLOT_LIVE_SEARCH)\n+#define MAX_PENDING_LIST_LENGTH \\\n+  PARAM_VALUE (PARAM_MAX_PENDING_LIST_LENGTH)\n #define MAX_GCSE_MEMORY \\\n   ((size_t) PARAM_VALUE (PARAM_MAX_GCSE_MEMORY))\n #define MAX_GCSE_PASSES \\"}, {"sha": "3f4b1290d7c9a490084a83539047738d4556e2d8", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a121cc34cd8153380aee3246979b8fb35e2a88f/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a121cc34cd8153380aee3246979b8fb35e2a88f/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=4a121cc34cd8153380aee3246979b8fb35e2a88f", "patch": "@@ -38,6 +38,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"toplev.h\"\n #include \"recog.h\"\n #include \"sched-int.h\"\n+#include \"params.h\"\n \n extern char *reg_known_equiv_p;\n extern rtx *reg_known_value;\n@@ -534,6 +535,7 @@ flush_pending_lists (deps, insn, only_write)\n \n   free_INSN_LIST_list (&deps->last_pending_memory_flush);\n   deps->last_pending_memory_flush = alloc_INSN_LIST (insn, NULL_RTX);\n+  deps->pending_flush_length = 1;\n }\n \f\n /* Analyze a single SET, CLOBBER, PRE_DEC, POST_DEC, PRE_INC or POST_INC\n@@ -675,14 +677,13 @@ sched_analyze_1 (deps, x, insn)\n     {\n       /* Writing memory.  */\n \n-      if (deps->pending_lists_length > 32)\n+      if (deps->pending_lists_length > MAX_PENDING_LIST_LENGTH)\n \t{\n \t  /* Flush all pending reads and writes to prevent the pending lists\n \t     from getting any larger.  Insn scheduling runs too slowly when\n-\t     these lists get long.  The number 32 was chosen because it\n-\t     seems like a reasonable number.  When compiling GCC with itself,\n+\t     these lists get long.  When compiling GCC with itself,\n \t     this flush occurs 8 times for sparc, and 10 times for m88k using\n-\t     the number 32.  */\n+\t     the default value of 32.  */\n \t  flush_pending_lists (deps, insn, 0);\n \t}\n       else\n@@ -1246,8 +1247,14 @@ sched_analyze (deps, head, tail)\n \t  /* Make each JUMP_INSN a scheduling barrier for memory\n              references.  */\n \t  if (GET_CODE (insn) == JUMP_INSN)\n-\t    deps->last_pending_memory_flush\n-\t      = alloc_INSN_LIST (insn, deps->last_pending_memory_flush);\n+\t    {\n+\t      /* Keep the list a reasonable size.  */\n+\t      if (deps->pending_flush_length++ > MAX_PENDING_LIST_LENGTH)\n+\t\tflush_pending_lists (deps, insn, 0);\n+\t      else\n+\t\tdeps->last_pending_memory_flush\n+\t\t  = alloc_INSN_LIST (insn, deps->last_pending_memory_flush);\n+\t    }\n \t  sched_analyze_insn (deps, PATTERN (insn), insn, loop_notes);\n \t  loop_notes = 0;\n \t}\n@@ -1473,6 +1480,7 @@ init_deps (deps)\n   deps->pending_write_insns = 0;\n   deps->pending_write_mems = 0;\n   deps->pending_lists_length = 0;\n+  deps->pending_flush_length = 0;\n   deps->last_pending_memory_flush = 0;\n   deps->last_function_call = 0;\n   deps->in_post_call_group_p = 0;"}, {"sha": "0b7ebab08d76b5dcbc292577aacd2b693fd55690", "filename": "gcc/sched-int.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a121cc34cd8153380aee3246979b8fb35e2a88f/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a121cc34cd8153380aee3246979b8fb35e2a88f/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=4a121cc34cd8153380aee3246979b8fb35e2a88f", "patch": "@@ -53,6 +53,10 @@ struct deps\n      a function of the length of these pending lists.  */\n   int pending_lists_length;\n \n+  /* Length of the pending memory flush list. Large functions with no\n+     calls may build up extremely large lists.  */\n+  int pending_flush_length;\n+\n   /* The last insn upon which all memory references must depend.\n      This is an insn which flushed the pending lists, creating a dependency\n      between it and all previously pending memory references.  This creates"}]}