{"sha": "f221dc810d12ca6005ecee515f786eef31f81960", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIyMWRjODEwZDEyY2E2MDA1ZWNlZTUxNWY3ODZlZWYzMWY4MTk2MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-01-31T03:47:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-01-31T03:47:22Z"}, "message": "re PR c++/57899 (bind/function with data member: infinite recursion)\n\n\tPR c++/57899\n\t* cp-tree.h (struct saved_scope): Add x_local_specializations.\n\t(local_specializations): New macro.\n\t* pt.c (local_specializations): Remove variable.\n\nFrom-SVN: r207332", "tree": {"sha": "abea7991ad3abebb58a9902efc8bf9ff97aa298b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abea7991ad3abebb58a9902efc8bf9ff97aa298b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f221dc810d12ca6005ecee515f786eef31f81960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f221dc810d12ca6005ecee515f786eef31f81960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f221dc810d12ca6005ecee515f786eef31f81960", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f221dc810d12ca6005ecee515f786eef31f81960/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "56e13ae00611a97d28f5284513c45f829a9810c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56e13ae00611a97d28f5284513c45f829a9810c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56e13ae00611a97d28f5284513c45f829a9810c9"}], "stats": {"total": 68, "additions": 63, "deletions": 5}, "files": [{"sha": "223e1f3f6612b1a67c947b823974921131f98bf4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f221dc810d12ca6005ecee515f786eef31f81960/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f221dc810d12ca6005ecee515f786eef31f81960/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f221dc810d12ca6005ecee515f786eef31f81960", "patch": "@@ -1,3 +1,10 @@\n+2014-01-30  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/57899\n+\t* cp-tree.h (struct saved_scope): Add x_local_specializations.\n+\t(local_specializations): New macro.\n+\t* pt.c (local_specializations): Remove variable.\n+\n 2014-01-30  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tPR c++/58708"}, {"sha": "7681b27ca4db02bcc6abb1ebc60e3babce9a9d1b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f221dc810d12ca6005ecee515f786eef31f81960/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f221dc810d12ca6005ecee515f786eef31f81960/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f221dc810d12ca6005ecee515f786eef31f81960", "patch": "@@ -1049,6 +1049,8 @@ struct GTY(()) saved_scope {\n   cp_binding_level *class_bindings;\n   cp_binding_level *bindings;\n \n+  struct pointer_map_t *x_local_specializations;\n+\n   struct saved_scope *prev;\n };\n \n@@ -1098,6 +1100,12 @@ struct GTY(()) saved_scope {\n \n #define previous_class_level scope_chain->x_previous_class_level\n \n+/* A map from local variable declarations in the body of the template\n+   presently being instantiated to the corresponding instantiated\n+   local variables.  */\n+\n+#define local_specializations scope_chain->x_local_specializations\n+\n /* A list of private types mentioned, for deferred access checking.  */\n \n extern GTY(()) struct saved_scope *scope_chain;"}, {"sha": "981e2e0b2ed62c3159ae7202e04e757d0fd33369", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f221dc810d12ca6005ecee515f786eef31f81960/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f221dc810d12ca6005ecee515f786eef31f81960/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f221dc810d12ca6005ecee515f786eef31f81960", "patch": "@@ -78,11 +78,6 @@ static GTY(()) tree saved_access_scope;\n    to the EXPR_STMT that is its result.  */\n static tree cur_stmt_expr;\n \n-/* A map from local variable declarations in the body of the template\n-   presently being instantiated to the corresponding instantiated\n-   local variables.  */\n-static struct pointer_map_t *local_specializations;\n-\n /* True if we've recursed into fn_type_unification too many times.  */\n static bool excessive_deduction_depth;\n "}, {"sha": "d46d53e83fa5087bd27117bb200fde77593cbd8d", "filename": "libstdc++-v3/testsuite/20_util/bind/57899.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f221dc810d12ca6005ecee515f786eef31f81960/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2F57899.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f221dc810d12ca6005ecee515f786eef31f81960/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2F57899.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2F57899.cc?ref=f221dc810d12ca6005ecee515f786eef31f81960", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2010-2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.7.11 Function template bind\n+\n+// PR c++/57899\n+// { dg-do compile }\n+// { dg-options -std=c++11 }\n+\n+#include <functional>\n+using std::bind;\n+using std::placeholders::_1;\n+\n+struct S { int i; };\n+\n+struct P { S s; };\n+\n+struct get_s\n+{\n+  const S& operator()(const P& p) const { return p.s; }\n+} gs;\n+\n+int gi(const S& s) { return s.i; }\n+\n+bool cmp(int, int) { return true; }\n+\n+int main()\n+{\n+  P p{};\n+  auto f1 = bind(gs, _1);\n+  auto f2 = bind(gi, f1);\n+  auto f3 = bind(cmp, f2, 5);\n+  f3(p);\n+}"}]}