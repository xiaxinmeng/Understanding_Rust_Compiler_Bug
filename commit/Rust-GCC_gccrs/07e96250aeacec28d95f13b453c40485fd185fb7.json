{"sha": "07e96250aeacec28d95f13b453c40485fd185fb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdlOTYyNTBhZWFjZWMyOGQ5NWYxM2I0NTNjNDA0ODVmZDE4NWZiNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-07-20T21:59:44Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-07-20T21:59:44Z"}, "message": "hwint.h (HOST_WIDE_INT_0): New define.\n\n\t* hwint.h (HOST_WIDE_INT_0): New define.\n\t(HOST_WIDE_INT_0U): Ditto.\n\t* double-int.c: Use HOST_WIDE_INT_0 instead of (HOST_WIDE_INT) 0.\n\t* dse.c: Use HOST_WIDE_INT_0U instead of (unsigned HOST_WIDE_INT) 0.\n\t* simplify-rtx.c: Ditto.\n\t* tree-object-size.c: Ditto.\n\nFrom-SVN: r238545", "tree": {"sha": "0336234738e4dd2c11c850544cfdd4cacde88e84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0336234738e4dd2c11c850544cfdd4cacde88e84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07e96250aeacec28d95f13b453c40485fd185fb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07e96250aeacec28d95f13b453c40485fd185fb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07e96250aeacec28d95f13b453c40485fd185fb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07e96250aeacec28d95f13b453c40485fd185fb7/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "52ed68f71a750260fd926479e41e3f7ad7cd9aa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52ed68f71a750260fd926479e41e3f7ad7cd9aa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52ed68f71a750260fd926479e41e3f7ad7cd9aa2"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "676268c3347082add8725ce17bd84a32dac82f52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07e96250aeacec28d95f13b453c40485fd185fb7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07e96250aeacec28d95f13b453c40485fd185fb7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07e96250aeacec28d95f13b453c40485fd185fb7", "patch": "@@ -1,3 +1,12 @@\n+2016-07-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* hwint.h (HOST_WIDE_INT_0): New define.\n+\t(HOST_WIDE_INT_0U): Ditto.\n+\t* double-int.c: Use HOST_WIDE_INT_0 instead of (HOST_WIDE_INT) 0.\n+\t* dse.c: Use HOST_WIDE_INT_0U instead of (unsigned HOST_WIDE_INT) 0.\n+\t* simplify-rtx.c: Ditto.\n+\t* tree-object-size.c: Ditto.\n+\n 2016-07-20  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/s390.c (s390_encode_section_info): Remove mode size"}, {"sha": "2d692f94b6a522d17a3290d5ce70dfdbbcf455b7", "filename": "gcc/double-int.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07e96250aeacec28d95f13b453c40485fd185fb7/gcc%2Fdouble-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07e96250aeacec28d95f13b453c40485fd185fb7/gcc%2Fdouble-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.c?ref=07e96250aeacec28d95f13b453c40485fd185fb7", "patch": "@@ -557,7 +557,7 @@ div_and_round_double (unsigned code, int uns,\n     case CEIL_MOD_EXPR:\t\t/* round toward positive infinity */\n       if (!quo_neg && (*lrem != 0 || *hrem != 0))  /* ratio > 0 && rem != 0 */\n \t{\n-\t  add_double (*lquo, *hquo, HOST_WIDE_INT_1, (HOST_WIDE_INT) 0,\n+\t  add_double (*lquo, *hquo, HOST_WIDE_INT_1, HOST_WIDE_INT_0,\n \t\t      lquo, hquo);\n \t}\n       else\n@@ -593,7 +593,7 @@ div_and_round_double (unsigned code, int uns,\n \t\t\t  HOST_WIDE_INT_M1, HOST_WIDE_INT_M1, lquo, hquo);\n \t    else\n \t      /* quo = quo + 1; */\n-\t      add_double (*lquo, *hquo, HOST_WIDE_INT_1, (HOST_WIDE_INT) 0,\n+\t      add_double (*lquo, *hquo, HOST_WIDE_INT_1, HOST_WIDE_INT_0,\n \t\t\t  lquo, hquo);\n \t  }\n \telse"}, {"sha": "05a288643afebf1de441627f2ac84e25138f4e2a", "filename": "gcc/dse.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07e96250aeacec28d95f13b453c40485fd185fb7/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07e96250aeacec28d95f13b453c40485fd185fb7/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=07e96250aeacec28d95f13b453c40485fd185fb7", "patch": "@@ -1217,7 +1217,7 @@ set_all_positions_unneeded (store_info *s_info)\n       s_info->positions_needed.large.count = end;\n     }\n   else\n-    s_info->positions_needed.small_bitmask = (unsigned HOST_WIDE_INT) 0;\n+    s_info->positions_needed.small_bitmask = HOST_WIDE_INT_0U;\n }\n \n /* Return TRUE if any bytes from S_INFO store are needed.  */\n@@ -1229,8 +1229,7 @@ any_positions_needed_p (store_info *s_info)\n     return (s_info->positions_needed.large.count\n \t    < s_info->end - s_info->begin);\n   else\n-    return (s_info->positions_needed.small_bitmask\n-\t    != (unsigned HOST_WIDE_INT) 0);\n+    return (s_info->positions_needed.small_bitmask != HOST_WIDE_INT_0U);\n }\n \n /* Return TRUE if all bytes START through START+WIDTH-1 from S_INFO"}, {"sha": "6b4d53737a2db3271196906d536269020f21c335", "filename": "gcc/hwint.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07e96250aeacec28d95f13b453c40485fd185fb7/gcc%2Fhwint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07e96250aeacec28d95f13b453c40485fd185fb7/gcc%2Fhwint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.h?ref=07e96250aeacec28d95f13b453c40485fd185fb7", "patch": "@@ -63,6 +63,8 @@ extern char sizeof_long_long_must_be_8[sizeof (long long) == 8 ? 1 : -1];\n #endif\n \n #define HOST_WIDE_INT_UC(X) HOST_WIDE_INT_C (X ## U)\n+#define HOST_WIDE_INT_0 HOST_WIDE_INT_C (0)\n+#define HOST_WIDE_INT_0U HOST_WIDE_INT_UC (0)\n #define HOST_WIDE_INT_1 HOST_WIDE_INT_C (1)\n #define HOST_WIDE_INT_1U HOST_WIDE_INT_UC (1)\n #define HOST_WIDE_INT_M1 HOST_WIDE_INT_C (-1)"}, {"sha": "c34f2f5562324c6191a6ab21dcb6d52e996ada4c", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07e96250aeacec28d95f13b453c40485fd185fb7/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07e96250aeacec28d95f13b453c40485fd185fb7/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=07e96250aeacec28d95f13b453c40485fd185fb7", "patch": "@@ -40,7 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n    occasionally need to sign extend from low to high as if low were a\n    signed wide int.  */\n #define HWI_SIGN_EXTEND(low) \\\n- ((((HOST_WIDE_INT) low) < 0) ? HOST_WIDE_INT_M1 : ((HOST_WIDE_INT) 0))\n+  ((((HOST_WIDE_INT) low) < 0) ? HOST_WIDE_INT_M1 : HOST_WIDE_INT_0)\n \n static rtx neg_const_int (machine_mode, const_rtx);\n static bool plus_minus_operand_p (const_rtx);"}, {"sha": "5e8ced63a2e326bfe7ff61c929c25c91bcedfba5", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07e96250aeacec28d95f13b453c40485fd185fb7/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07e96250aeacec28d95f13b453c40485fd185fb7/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=07e96250aeacec28d95f13b453c40485fd185fb7", "patch": "@@ -738,7 +738,7 @@ merge_object_sizes (struct object_size_info *osi, tree dest, tree orig,\n   orig_bytes = object_sizes[object_size_type][SSA_NAME_VERSION (orig)];\n   if (orig_bytes != unknown[object_size_type])\n     orig_bytes = (offset > orig_bytes)\n-\t\t ? (unsigned HOST_WIDE_INT) 0 : orig_bytes - offset;\n+\t\t ? HOST_WIDE_INT_0U : orig_bytes - offset;\n \n   if ((object_size_type & 2) == 0)\n     {"}]}