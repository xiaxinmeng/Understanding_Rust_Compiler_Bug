{"sha": "1ecba59dce5a2fa45bf77a8b2370536e313b5e1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVjYmE1OWRjZTVhMmZhNDViZjc3YThiMjM3MDUzNmUzMTNiNWUxYQ==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1994-06-15T02:35:23Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1994-06-15T02:35:23Z"}, "message": "Trivial simplification of many patterns.\n\n(subsi3): Don't handle CONST_INT for operand 2.\n(ashiftrt, op2 > 8): New pattern.\n(lshiftrt, op2 > 8): New pattern.\n\nFrom-SVN: r7479", "tree": {"sha": "31f5bebae6406f671daab8dc7b10d78dfadc8a16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31f5bebae6406f671daab8dc7b10d78dfadc8a16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ecba59dce5a2fa45bf77a8b2370536e313b5e1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ecba59dce5a2fa45bf77a8b2370536e313b5e1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ecba59dce5a2fa45bf77a8b2370536e313b5e1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ecba59dce5a2fa45bf77a8b2370536e313b5e1a/comments", "author": null, "committer": null, "parents": [{"sha": "6918e4ae2714836a17d0bb60c245cf4c2ad3d38f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6918e4ae2714836a17d0bb60c245cf4c2ad3d38f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6918e4ae2714836a17d0bb60c245cf4c2ad3d38f"}], "stats": {"total": 209, "additions": 75, "deletions": 134}, "files": [{"sha": "c082d988d02a2dd75b4648a1464cf3b6b961defa", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 75, "deletions": 134, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecba59dce5a2fa45bf77a8b2370536e313b5e1a/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecba59dce5a2fa45bf77a8b2370536e313b5e1a/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=1ecba59dce5a2fa45bf77a8b2370536e313b5e1a", "patch": "@@ -598,7 +598,7 @@\n \t\t\t    (const_int 1)\n \t\t\t    (minus:SI (const_int 7)\n \t\t\t\t      (and:SI\n-\t\t\t\t       (match_operand:SI 1 \"general_operand\" \"d\")\n+\t\t\t\t       (match_operand:SI 1 \"register_operand\" \"d\")\n \t\t\t\t       (const_int 7)))))]\n   \"\"\n   \"* { return output_btst (operands, operands[1], operands[0], insn, 7); }\")\n@@ -608,7 +608,7 @@\n \t\t\t    (const_int 1)\n \t\t\t    (minus:SI (const_int 31)\n \t\t\t\t      (and:SI\n-\t\t\t\t       (match_operand:SI 1 \"general_operand\" \"d\")\n+\t\t\t\t       (match_operand:SI 1 \"register_operand\" \"d\")\n \t\t\t\t       (const_int 31)))))]\n   \"\"\n   \"* { return output_btst (operands, operands[1], operands[0], insn, 31); }\")\n@@ -618,9 +618,8 @@\n (define_insn \"\"\n   [(set (cc0) (zero_extract (match_operand:QI 0 \"nonimmediate_operand\" \"md\")\n \t\t\t    (const_int 1)\n-\t\t\t    (match_operand:SI 1 \"general_operand\" \"i\")))]\n-  \"GET_CODE (operands[1]) == CONST_INT\n-   && (unsigned) INTVAL (operands[1]) < 8\"\n+\t\t\t    (match_operand:SI 1 \"const_int_operand\" \"n\")))]\n+  \"(unsigned) INTVAL (operands[1]) < 8\"\n   \"*\n {\n   operands[1] = gen_rtx (CONST_INT, VOIDmode, 7 - INTVAL (operands[1]));\n@@ -630,8 +629,8 @@\n (define_insn \"\"\n   [(set (cc0) (zero_extract (match_operand:SI 0 \"nonimmediate_operand\" \"do\")\n \t\t\t    (const_int 1)\n-\t\t\t    (match_operand:SI 1 \"general_operand\" \"i\")))]\n-  \"GET_CODE (operands[1]) == CONST_INT\"\n+\t\t\t    (match_operand:SI 1 \"const_int_operand\" \"n\")))]\n+  \"\"\n   \"*\n {\n   if (GET_CODE (operands[0]) == MEM)\n@@ -654,10 +653,8 @@\n ;; to reload the constant into a data register.\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"push_operand\" \"=m\")\n-\t(match_operand:SI 1 \"general_operand\" \"J\"))]\n-  \"GET_CODE (operands[1]) == CONST_INT\n-   && INTVAL (operands[1]) >= -0x8000\n-   && INTVAL (operands[1]) < 0x8000\"\n+\t(match_operand:SI 1 \"const_int_operand\" \"J\"))]\n+  \"INTVAL (operands[1]) >= -0x8000 && INTVAL (operands[1]) < 0x8000\"\n   \"*\n {\n   if (operands[1] == const0_rtx)\n@@ -2257,65 +2254,11 @@\n ;; subtract instructions\n \n (define_insn \"subsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=m,r,!a,?d\")\n-\t(minus:SI (match_operand:SI 1 \"general_operand\" \"0,0,a,mrIKs\")\n-\t\t  (match_operand:SI 2 \"general_operand\" \"dIKs,mrIKs,J,0\")))]\n+  [(set (match_operand:SI 0 \"general_operand\" \"=m,r\")\n+\t(minus:SI (match_operand:SI 1 \"general_operand\" \"0,0\")\n+\t\t  (match_operand:SI 2 \"general_operand\" \"ds,mrs\")))]\n   \"\"\n-  \"*\n-{\n-  if (! operands_match_p (operands[0], operands[1]))\n-    {\n-      if (operands_match_p (operands[0], operands[2]))\n-\t{\n-#ifndef NO_ADDSUB_Q\n-\t  if (GET_CODE (operands[1]) == CONST_INT)\n-\t    {\n-\t      if (INTVAL (operands[1]) > 0\n-\t\t  && INTVAL (operands[1]) <= 8)\n-\t\treturn \\\"subq%.l %1,%0\\;neg%.l %0\\\";\n-\t    }\n-#endif\n-\t  return \\\"sub%.l %1,%0\\;neg%.l %0\\\";\n-\t}\n-      /* This case is matched by J, but negating -0x8000\n-         in an lea would give an invalid displacement.\n-\t So do this specially.  */\n-      if (INTVAL (operands[2]) == -0x8000)\n-\treturn \\\"move%.l %1,%0\\;sub%.l %2,%0\\\";\n-#ifdef SGS\n-      return \\\"lea %n2(%1),%0\\\";\n-#else\n-#ifdef MOTOROLA\n-      return \\\"lea (%n2,%1),%0\\\";\n-#else /* not MOTOROLA (MIT syntax) */\n-      return \\\"lea %1@(%n2),%0\\\";\n-#endif /* not MOTOROLA */\n-#endif /* not SGS */\n-    }\n-  if (GET_CODE (operands[2]) == CONST_INT)\n-    {\n-#ifndef NO_ADDSUB_Q\n-      if (INTVAL (operands[2]) > 0\n-\t  && INTVAL (operands[2]) <= 8)\n-\treturn \\\"subq%.l %2,%0\\\";\n-      /* Using two subqw for 8 < N <= 16 being subtracted from an\n-\t address register is faster on all but 68000 */\n-      if (INTVAL (operands[2]) > 8\n-\t  && INTVAL (operands[2]) <= 16\n-\t  && ADDRESS_REG_P (operands[0])\n-\t  && TARGET_68020)\n-\t{\n-\t  operands[2] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[2]) - 8);\n-\t  return \\\"subq%.w %#8,%0\\;subq%.w %2,%0\\\";\n-\t}\n-#endif\n-      if (ADDRESS_REG_P (operands[0])\n-\t  && INTVAL (operands[2]) >= -0x8000\n-\t  && INTVAL (operands[2]) < 0x8000)\n-\treturn \\\"sub%.w %2,%0\\\";\n-    }\n-  return \\\"sub%.l %2,%0\\\";\n-}\")\n+  \"sub%.l %2,%0\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=a\")\n@@ -3029,7 +2972,8 @@\n         }\n       else\n         {\n-          operands[0] = adj_offsettable_operand (operands[0], 3 - (logval / 8));          operands[1] = gen_rtx (CONST_INT, VOIDmode, logval % 8);\n+\t  operands[0] = adj_offsettable_operand (operands[0], 3 - (logval / 8));\n+\t  operands[1] = gen_rtx (CONST_INT, VOIDmode, logval % 8);\n         }\n       /* This does not set condition codes in a standard way.  */\n       CC_STATUS_INIT;\n@@ -3418,8 +3362,8 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(ashift:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t   (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n-  \"(GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) == 16)\"\n+\t\t   (const_int 16)))]\n+  \"\"\n   \"*\n {\n   CC_STATUS_INIT;\n@@ -3431,8 +3375,8 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(ashift:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t   (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n-  \"(! TARGET_68020 && GET_CODE (operands[2]) == CONST_INT\n+\t\t   (match_operand:SI 2 \"const_int_operand\" \"n\")))]\n+  \"(! TARGET_68020\n     && INTVAL (operands[2]) > 16 && INTVAL (operands[2]) <= 24)\"\n   \"*\n {\n@@ -3487,33 +3431,41 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t     (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n-  \"(GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) == 16)\" \n+\t\t     (const_int 16)))]\n+  \"\"\n   \"swap %0\\;ext%.l %0\")\n \n ;; On the 68000, this makes faster code in a special case.\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t     (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n-  \"(! TARGET_68020 && GET_CODE (operands[2]) == CONST_INT\n+\t\t     (match_operand:SI 2 \"const_int_operand\" \"n\")))]\n+  \"(! TARGET_68020\n     && INTVAL (operands[2]) > 16 && INTVAL (operands[2]) <= 24)\"\n   \"*\n {\n   operands[2] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[2]) - 16);\n   return \\\"swap %0\\;asr%.w %2,%0\\;ext%.l %0\\\";\n }\")\n \n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"d\")\n+\t\t     (match_operand:SI 2 \"const_int_operand\" \"M\")))]\n+  \"TARGET_68020 && operands[0] != operands[1] && INTVAL (operands[2]) > 8\"\n+  \"*\n+{\n+  operands[2] = GEN_INT (32 - INTVAL (operands[2]));\n+  return \\\"bfexts %1{%#0:%b2},%0\\\";\n+}\")\n+\n (define_insn \"ashrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:SI 2 \"general_operand\" \"dI\")))]\n   \"\"\n-  \"*\n-{\n-  return \\\"asr%.l %2,%0\\\";\n-}\")\n+  \"asr%.l %2,%0\")\n \n (define_insn \"ashrhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n@@ -3545,13 +3497,14 @@\n \f\n ;; logical shift instructions\n \n+\n ;; On all 68k models, this makes faster code in a special case.\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t     (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n-  \"(GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) == 16)\" \n+\t\t     (const_int 16)))]\n+  \"\"\n   \"*\n {\n   CC_STATUS_INIT;\n@@ -3563,8 +3516,8 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t     (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n-  \"(! TARGET_68020 && GET_CODE (operands[2]) == CONST_INT\n+\t\t     (match_operand:SI 2 \"const_int_operand\" \"n\")))]\n+  \"(! TARGET_68020\n     && INTVAL (operands[2]) > 16 && INTVAL (operands[2]) <= 24)\"\n   \"*\n {\n@@ -3573,15 +3526,23 @@\n   return \\\"clr%.w %0\\;swap %0\\;lsr%.w %2,%0\\\";\n }\")\n \n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"d\")\n+\t\t     (match_operand:SI 2 \"const_int_operand\" \"M\")))]\n+  \"TARGET_68020 && operands[0] != operands[1] && INTVAL (operands[2]) > 8\"\n+  \"*\n+{\n+  operands[2] = GEN_INT (32 - INTVAL (operands[2]));\n+  return \\\"bfextu %1{%#0:%b2},%0\\\";\n+}\")\n+\n (define_insn \"lshrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:SI 2 \"general_operand\" \"dI\")))]\n   \"\"\n-  \"*\n-{\n-  return \\\"lsr%.l %2,%0\\\";\n-}\")\n+  \"lsr%.l %2,%0\")\n \n (define_insn \"lshrhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n@@ -3698,13 +3659,10 @@\n ;\n (define_insn \"\"\n   [(set (zero_extract:SI (match_operand:QI 0 \"nonimmediate_operand\" \"+o\")\n-\t\t\t (match_operand:SI 1 \"immediate_operand\" \"i\")\n-\t\t\t (match_operand:SI 2 \"immediate_operand\" \"i\"))\n+\t\t\t (const_int 32)\n+\t\t\t (match_operand:SI 2 \"const_int_operand\" \"n\"))\n \t(match_operand:SI 3 \"general_operand\" \"rmi\"))]\n   \"TARGET_68020 && TARGET_BITFIELD\n-   && GET_CODE (operands[1]) == CONST_INT\n-   && (INTVAL (operands[1]) == 32)\n-   && GET_CODE (operands[2]) == CONST_INT\n    && (INTVAL (operands[2]) % 8) == 0\n    && ! mode_dependent_address_p (XEXP (operands[0], 0))\"\n   \"*\n@@ -3717,13 +3675,11 @@\n \n (define_insn \"\"\n   [(set (zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"+do\")\n-\t\t\t (match_operand:SI 1 \"immediate_operand\" \"i\")\n-\t\t\t (match_operand:SI 2 \"immediate_operand\" \"i\"))\n-\t(match_operand:SI 3 \"general_operand\" \"d\"))]\n+\t\t\t (match_operand:SI 1 \"const_int_operand\" \"n\")\n+\t\t\t (match_operand:SI 2 \"const_int_operand\" \"n\"))\n+\t(match_operand:SI 3 \"register_operand\" \"d\"))]\n   \"TARGET_68020 && TARGET_BITFIELD\n-   && GET_CODE (operands[1]) == CONST_INT\n    && (INTVAL (operands[1]) == 8 || INTVAL (operands[1]) == 16)\n-   && GET_CODE (operands[2]) == CONST_INT\n    && INTVAL (operands[2]) % INTVAL (operands[1]) == 0\n    && (GET_CODE (operands[0]) == REG\n        || ! mode_dependent_address_p (XEXP (operands[0], 0)))\"\n@@ -3757,12 +3713,9 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n \t(zero_extract:SI (match_operand:QI 1 \"nonimmediate_operand\" \"o\")\n-\t\t\t (match_operand:SI 2 \"immediate_operand\" \"i\")\n-\t\t\t (match_operand:SI 3 \"immediate_operand\" \"i\")))]\n+\t\t\t (const_int 32)\n+\t\t\t (match_operand:SI 3 \"const_int_operand\" \"n\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\n-   && GET_CODE (operands[2]) == CONST_INT\n-   && (INTVAL (operands[2]) == 32)\n-   && GET_CODE (operands[3]) == CONST_INT\n    && (INTVAL (operands[3]) % 8) == 0\n    && ! mode_dependent_address_p (XEXP (operands[1], 0))\"\n   \"*\n@@ -3776,12 +3729,9 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=&d\")\n \t(zero_extract:SI (match_operand:SI 1 \"nonimmediate_operand\" \"do\")\n-\t\t\t (match_operand:SI 2 \"immediate_operand\" \"i\")\n-\t\t\t (match_operand:SI 3 \"immediate_operand\" \"i\")))]\n+\t\t\t (match_operand:SI 2 \"const_int_operand\" \"n\")\n+\t\t\t (match_operand:SI 3 \"const_int_operand\" \"n\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\n-   && GET_CODE (operands[2]) == CONST_INT\n-   && (INTVAL (operands[2]) == 8 || INTVAL (operands[2]) == 16)\n-   && GET_CODE (operands[3]) == CONST_INT\n    && INTVAL (operands[3]) % INTVAL (operands[2]) == 0\n    && (GET_CODE (operands[1]) == REG\n        || ! mode_dependent_address_p (XEXP (operands[1], 0)))\"\n@@ -3816,12 +3766,9 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n \t(sign_extract:SI (match_operand:QI 1 \"nonimmediate_operand\" \"o\")\n-\t\t\t (match_operand:SI 2 \"immediate_operand\" \"i\")\n-\t\t\t (match_operand:SI 3 \"immediate_operand\" \"i\")))]\n+\t\t\t (const_int 32)\n+\t\t\t (match_operand:SI 3 \"const_int_operand\" \"n\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\n-   && GET_CODE (operands[2]) == CONST_INT\n-   && (INTVAL (operands[2]) == 32)\n-   && GET_CODE (operands[3]) == CONST_INT\n    && (INTVAL (operands[3]) % 8) == 0\n    && ! mode_dependent_address_p (XEXP (operands[1], 0))\"\n   \"*\n@@ -3835,12 +3782,9 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=d\")\n \t(sign_extract:SI (match_operand:SI 1 \"nonimmediate_operand\" \"do\")\n-\t\t\t (match_operand:SI 2 \"immediate_operand\" \"i\")\n-\t\t\t (match_operand:SI 3 \"immediate_operand\" \"i\")))]\n+\t\t\t (match_operand:SI 2 \"const_int_operand\" \"n\")\n+\t\t\t (match_operand:SI 3 \"const_int_operand\" \"n\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\n-   && GET_CODE (operands[2]) == CONST_INT\n-   && (INTVAL (operands[2]) == 8 || INTVAL (operands[2]) == 16)\n-   && GET_CODE (operands[3]) == CONST_INT\n    && INTVAL (operands[3]) % INTVAL (operands[2]) == 0\n    && (GET_CODE (operands[1]) == REG\n        || ! mode_dependent_address_p (XEXP (operands[1], 0)))\"\n@@ -3897,9 +3841,8 @@\n \t\t\t (match_operand:SI 1 \"general_operand\" \"di,di\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"di,di\"))\n         (xor:SI (zero_extract:SI (match_dup 0) (match_dup 1) (match_dup 2))\n-\t\t(match_operand 3 \"immediate_operand\" \"i,i\")))]\n+\t\t(match_operand 3 \"const_int_operand\" \"n,n\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\n-   && GET_CODE (operands[3]) == CONST_INT\n    && (INTVAL (operands[3]) == -1\n        || (GET_CODE (operands[1]) == CONST_INT\n            && (~ INTVAL (operands[3]) & ((1 << INTVAL (operands[1]))- 1)) == 0))\"\n@@ -3937,7 +3880,7 @@\n   [(set (zero_extract:SI (match_operand:QI 0 \"nonimmediate_operand\" \"+o,d\")\n \t\t\t (match_operand:SI 1 \"general_operand\" \"di,di\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"di,di\"))\n-\t(match_operand:SI 3 \"general_operand\" \"d,d\"))]\n+\t(match_operand:SI 3 \"register_operand\" \"d,d\"))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n   \"bfins %3,%0{%b2:%b1}\")\n \n@@ -4000,7 +3943,7 @@\n   [(set (zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"+d\")\n \t\t\t (match_operand:SI 1 \"general_operand\" \"di\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"di\"))\n-\t(match_operand:SI 3 \"general_operand\" \"d\"))]\n+\t(match_operand:SI 3 \"register_operand\" \"d\"))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n   \"*\n {\n@@ -4021,10 +3964,9 @@\n (define_insn \"\"\n   [(set (cc0)\n \t(zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"o\")\n-\t\t\t (match_operand:SI 1 \"general_operand\" \"di\")\n+\t\t\t (match_operand:SI 1 \"const_int_operand\" \"n\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"di\")))]\n-  \"TARGET_68020 && TARGET_BITFIELD\n-   && GET_CODE (operands[1]) == CONST_INT\"\n+  \"TARGET_68020 && TARGET_BITFIELD\"\n   \"*\n {\n   if (operands[1] == const1_rtx\n@@ -4050,10 +3992,9 @@\n (define_insn \"\"\n   [(set (cc0)\n \t(zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"d\")\n-\t\t\t (match_operand:SI 1 \"general_operand\" \"di\")\n+\t\t\t (match_operand:SI 1 \"const_int_operand\" \"n\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"di\")))]\n-  \"TARGET_68020 && TARGET_BITFIELD\n-   && GET_CODE (operands[1]) == CONST_INT\"\n+  \"TARGET_68020 && TARGET_BITFIELD\"\n   \"*\n {\n   if (operands[1] == const1_rtx\n@@ -5004,10 +4945,10 @@\n \n (define_peephole\n   [(set (reg:SI 15) (plus:SI (reg:SI 15)\n-\t\t\t     (match_operand:SI 0 \"immediate_operand\" \"n\")))\n+\t\t\t     (match_operand:SI 0 \"const_int_operand\" \"n\")))\n    (set (match_operand:SF 1 \"push_operand\" \"=m\")\n \t(match_operand:SF 2 \"general_operand\" \"rmfF\"))]\n-  \"GET_CODE (operands[0]) == CONST_INT && INTVAL (operands[0]) >= 4\n+  \"INTVAL (operands[0]) >= 4\n    && ! reg_mentioned_p (stack_pointer_rtx, operands[2])\"\n   \"*\n {\n@@ -5041,10 +4982,10 @@\n \n (define_peephole\n   [(set (reg:SI 15) (plus:SI (reg:SI 15)\n-\t\t\t     (match_operand:SI 0 \"immediate_operand\" \"n\")))\n+\t\t\t     (match_operand:SI 0 \"const_int_operand\" \"n\")))\n    (set (match_operand:SI 1 \"push_operand\" \"=m\")\n \t(match_operand:SI 2 \"general_operand\" \"g\"))]\n-  \"GET_CODE (operands[0]) == CONST_INT && INTVAL (operands[0]) >= 4\n+  \"INTVAL (operands[0]) >= 4\n    && ! reg_mentioned_p (stack_pointer_rtx, operands[2])\"\n   \"*\n {"}]}