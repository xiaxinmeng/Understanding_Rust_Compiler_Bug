{"sha": "6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVhMmI3MGQ5Y2NhYmM2ZjFkODZlNzlmM2Y0ZDNhNTUzYTE1NTA4MA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-07-28T14:51:40Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-07-28T14:51:40Z"}, "message": "calls.c (special_function_p, [...]): Constify.\n\n\t* calls.c (special_function_p, setjmp_call_p, alloca_call_p,\n\tflags_from_decl_or_type): Constify.\n\t* gcc.c (do_spec_1): Likewise.\n\t* print-tree.c (dump_addr, print_node_brief): Likewise.\n\t* tree-cfg.c (stmt_starts_bb_p, is_ctrl_stmt, computed_goto_p,\n\tsimple_goto_p, tree_can_make_abnormal_goto, stmt_starts_bb_p,\n\ttree_purge_all_dead_eh_edges): Likewise.\n\t* tree-flow.h (is_ctrl_stmt, computed_goto_p, simple_goto_p,\n\ttree_can_make_abnormal_goto, tree_purge_all_dead_eh_edges):\n\tLikewise. \n\t* tree.c (expr_location, expr_has_location, expr_locus,\n\texpr_filename, expr_lineno, get_inner_array_type,\n\tfields_compatible_p): Likewise.\n\t* tree.h (get_inner_array_type, fields_compatible_p,\n\texpr_location, expr_has_location, expr_locus, expr_filename,\n\texpr_lineno, dump_addr, print_node_brief, flags_from_decl_or_type,\n\tsetjmp_call_p, alloca_call_p): Likewise.\n\nFrom-SVN: r127017", "tree": {"sha": "751c4ed52a0b21297b2b1b2581722756a0e9540e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/751c4ed52a0b21297b2b1b2581722756a0e9540e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080/comments", "author": null, "committer": null, "parents": [{"sha": "d4d8c232ede446f4b50d8c9c15a84941aabc6b18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4d8c232ede446f4b50d8c9c15a84941aabc6b18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4d8c232ede446f4b50d8c9c15a84941aabc6b18"}], "stats": {"total": 110, "additions": 66, "deletions": 44}, "files": [{"sha": "13df4ae9ead43582fce1240ec695881b307c24e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080", "patch": "@@ -1,3 +1,23 @@\n+2007-07-28  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* calls.c (special_function_p, setjmp_call_p, alloca_call_p,\n+\tflags_from_decl_or_type): Constify.\n+\t* gcc.c (do_spec_1): Likewise.\n+\t* print-tree.c (dump_addr, print_node_brief): Likewise.\n+\t* tree-cfg.c (stmt_starts_bb_p, is_ctrl_stmt, computed_goto_p,\n+\tsimple_goto_p, tree_can_make_abnormal_goto, stmt_starts_bb_p,\n+\ttree_purge_all_dead_eh_edges): Likewise.\n+\t* tree-flow.h (is_ctrl_stmt, computed_goto_p, simple_goto_p,\n+\ttree_can_make_abnormal_goto, tree_purge_all_dead_eh_edges):\n+\tLikewise. \n+\t* tree.c (expr_location, expr_has_location, expr_locus,\n+\texpr_filename, expr_lineno, get_inner_array_type,\n+\tfields_compatible_p): Likewise.\n+\t* tree.h (get_inner_array_type, fields_compatible_p,\n+\texpr_location, expr_has_location, expr_locus, expr_filename,\n+\texpr_lineno, dump_addr, print_node_brief, flags_from_decl_or_type,\n+\tsetjmp_call_p, alloca_call_p): Likewise.\n+\n 2007-07-28  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* timevar.def: Add TV_CALL_CLOBBER, TV_FLOW_SENSITIVE,"}, {"sha": "8863faaf09226af8bdbc9b8018398948f0a7bc45", "filename": "gcc/calls.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080", "patch": "@@ -143,7 +143,7 @@ static void load_register_parameters (struct arg_data *, int, rtx *, int,\n \t\t\t\t      int, int *);\n static rtx emit_library_call_value_1 (int, rtx, rtx, enum libcall_type,\n \t\t\t\t      enum machine_mode, int, va_list);\n-static int special_function_p (tree, int);\n+static int special_function_p (const_tree, int);\n static int check_sibcall_argument_overlap_1 (rtx);\n static int check_sibcall_argument_overlap (rtx, struct arg_data *, int);\n \n@@ -469,7 +469,7 @@ emit_call_1 (rtx funexp, tree fntree, tree fndecl ATTRIBUTE_UNUSED,\n    space from the stack such as alloca.  */\n \n static int\n-special_function_p (tree fndecl, int flags)\n+special_function_p (const_tree fndecl, int flags)\n {\n   if (fndecl && DECL_NAME (fndecl)\n       && IDENTIFIER_LENGTH (DECL_NAME (fndecl)) <= 17\n@@ -543,14 +543,14 @@ special_function_p (tree fndecl, int flags)\n /* Return nonzero when FNDECL represents a call to setjmp.  */\n \n int\n-setjmp_call_p (tree fndecl)\n+setjmp_call_p (const_tree fndecl)\n {\n   return special_function_p (fndecl, 0) & ECF_RETURNS_TWICE;\n }\n \n /* Return true when exp contains alloca call.  */\n bool\n-alloca_call_p (tree exp)\n+alloca_call_p (const_tree exp)\n {\n   if (TREE_CODE (exp) == CALL_EXPR\n       && TREE_CODE (CALL_EXPR_FN (exp)) == ADDR_EXPR\n@@ -564,10 +564,10 @@ alloca_call_p (tree exp)\n /* Detect flags (function attributes) from the function decl or type node.  */\n \n int\n-flags_from_decl_or_type (tree exp)\n+flags_from_decl_or_type (const_tree exp)\n {\n   int flags = 0;\n-  tree type = exp;\n+  const_tree type = exp;\n \n   if (DECL_P (exp))\n     {"}, {"sha": "db064919d995c8ee85700c52348bf09c2524de11", "filename": "gcc/gcc.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080", "patch": "@@ -4847,12 +4847,14 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \n \t\tif (save_temps_flag)\n \t\t  {\n+\t\t    char *tmp;\n+\t\t    \n \t\t    temp_filename_length = basename_length + suffix_length;\n-\t\t    temp_filename = alloca (temp_filename_length + 1);\n-\t\t    strncpy ((char *) temp_filename, input_basename, basename_length);\n-\t\t    strncpy ((char *) temp_filename + basename_length, suffix,\n-\t\t\t     suffix_length);\n-\t\t    *((char *) temp_filename + temp_filename_length) = '\\0';\n+\t\t    tmp = alloca (temp_filename_length + 1);\n+\t\t    strncpy (tmp, input_basename, basename_length);\n+\t\t    strncpy (tmp + basename_length, suffix, suffix_length);\n+\t\t    tmp[temp_filename_length] = '\\0';\n+\t\t    temp_filename = tmp;\n \t\t    if (strcmp (temp_filename, input_filename) != 0)\n \t\t      {\n #ifndef HOST_LACKS_INODE_NUMBERS"}, {"sha": "297f62fc599434cf092a28c331a4a6c2d6e901ea", "filename": "gcc/print-tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080", "patch": "@@ -58,7 +58,7 @@ debug_tree (tree node)\n \n /* Print PREFIX and ADDR to FILE.  */\n void\n-dump_addr (FILE *file, const char *prefix, void *addr)\n+dump_addr (FILE *file, const char *prefix, const void *addr)\n {\n   if (flag_dump_noaddr || flag_dump_unnumbered)\n     fprintf (file, \"%s#\", prefix);\n@@ -69,7 +69,7 @@ dump_addr (FILE *file, const char *prefix, void *addr)\n /* Print a node in brief fashion, with just the code, address and name.  */\n \n void\n-print_node_brief (FILE *file, const char *prefix, tree node, int indent)\n+print_node_brief (FILE *file, const char *prefix, const_tree node, int indent)\n {\n   enum tree_code_class class;\n "}, {"sha": "d0c8fe9b0d2ab517724cf3f2a37ffa83af8dc066", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080", "patch": "@@ -96,7 +96,7 @@ static edge tree_try_redirect_by_replacing_jump (edge, basic_block);\n static unsigned int split_critical_edges (void);\n \n /* Various helpers.  */\n-static inline bool stmt_starts_bb_p (tree, tree);\n+static inline bool stmt_starts_bb_p (const_tree, const_tree);\n static int tree_verify_flow_info (void);\n static void tree_make_forwarder_block (edge);\n static void tree_cfg2vcg (FILE *);\n@@ -2421,7 +2421,7 @@ tree_cfg2vcg (FILE *file)\n /* Return true if T represents a stmt that always transfers control.  */\n \n bool\n-is_ctrl_stmt (tree t)\n+is_ctrl_stmt (const_tree t)\n {\n   return (TREE_CODE (t) == COND_EXPR\n \t  || TREE_CODE (t) == SWITCH_EXPR\n@@ -2465,7 +2465,7 @@ is_ctrl_altering_stmt (tree t)\n /* Return true if T is a computed goto.  */\n \n bool\n-computed_goto_p (tree t)\n+computed_goto_p (const_tree t)\n {\n   return (TREE_CODE (t) == GOTO_EXPR\n \t  && TREE_CODE (GOTO_DESTINATION (t)) != LABEL_DECL);\n@@ -2475,7 +2475,7 @@ computed_goto_p (tree t)\n /* Return true if T is a simple local goto.  */\n \n bool\n-simple_goto_p (tree t)\n+simple_goto_p (const_tree t)\n {\n   return (TREE_CODE (t) == GOTO_EXPR\n \t  && TREE_CODE (GOTO_DESTINATION (t)) == LABEL_DECL);\n@@ -2486,7 +2486,7 @@ simple_goto_p (tree t)\n    Transfers of control flow associated with EH are excluded.  */\n \n bool\n-tree_can_make_abnormal_goto (tree t)\n+tree_can_make_abnormal_goto (const_tree t)\n {\n   if (computed_goto_p (t))\n     return true;\n@@ -2507,7 +2507,7 @@ tree_can_make_abnormal_goto (tree t)\n    unnecessary basic blocks that only contain a single label.  */\n \n static inline bool\n-stmt_starts_bb_p (tree t, tree prev_t)\n+stmt_starts_bb_p (const_tree t, const_tree prev_t)\n {\n   if (t == NULL_TREE)\n     return false;\n@@ -6242,7 +6242,7 @@ tree_purge_dead_eh_edges (basic_block bb)\n }\n \n bool\n-tree_purge_all_dead_eh_edges (bitmap blocks)\n+tree_purge_all_dead_eh_edges (const_bitmap blocks)\n {\n   bool changed = false;\n   unsigned i;"}, {"sha": "e3895d19fbf20f6f3c9c2ac93022555434981945", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080", "patch": "@@ -722,11 +722,11 @@ extern void free_omp_regions (void);\n \n extern void delete_tree_cfg_annotations (void);\n extern bool stmt_ends_bb_p (tree);\n-extern bool is_ctrl_stmt (tree);\n+extern bool is_ctrl_stmt (const_tree);\n extern bool is_ctrl_altering_stmt (tree);\n-extern bool computed_goto_p (tree);\n-extern bool simple_goto_p (tree);\n-extern bool tree_can_make_abnormal_goto (tree);\n+extern bool computed_goto_p (const_tree);\n+extern bool simple_goto_p (const_tree);\n+extern bool tree_can_make_abnormal_goto (const_tree);\n extern basic_block single_noncomplex_succ (basic_block bb);\n extern void tree_dump_bb (basic_block, FILE *, int);\n extern void debug_tree_bb (basic_block);\n@@ -762,7 +762,7 @@ extern void add_phi_args_after_copy_bb (basic_block);\n extern void add_phi_args_after_copy (basic_block *, unsigned);\n extern bool tree_purge_dead_abnormal_call_edges (basic_block);\n extern bool tree_purge_dead_eh_edges (basic_block);\n-extern bool tree_purge_all_dead_eh_edges (bitmap);\n+extern bool tree_purge_all_dead_eh_edges (const_bitmap);\n extern tree gimplify_val (block_stmt_iterator *, tree, tree);\n extern tree gimplify_build1 (block_stmt_iterator *, enum tree_code,\n \t\t\t     tree, tree);"}, {"sha": "cd6bf36dae8577a4987f9115790429d8b37ab40d", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080", "patch": "@@ -3429,7 +3429,7 @@ annotate_with_locus (tree node, location_t locus)\n    decls and constants can be shared among multiple locations, so\n    return nothing.  */\n location_t\n-expr_location (tree node)\n+expr_location (const_tree node)\n {\n #ifdef USE_MAPPED_LOCATION\n   if (GIMPLE_STMT_P (node))\n@@ -3457,7 +3457,7 @@ set_expr_location (tree node, location_t locus)\n }\n \n bool\n-expr_has_location (tree node)\n+expr_has_location (const_tree node)\n {\n #ifdef USE_MAPPED_LOCATION\n   return expr_location (node) != UNKNOWN_LOCATION;\n@@ -3471,7 +3471,7 @@ source_location *\n #else\n source_locus\n #endif\n-expr_locus (tree node)\n+expr_locus (const_tree node)\n {\n #ifdef USE_MAPPED_LOCATION\n   if (GIMPLE_STMT_P (node))\n@@ -3519,7 +3519,7 @@ set_expr_locus (tree node,\n }\n \n const char **\n-expr_filename (tree node)\n+expr_filename (const_tree node)\n {\n #ifdef USE_MAPPED_LOCATION\n   if (GIMPLE_STMT_P (node))\n@@ -3533,7 +3533,7 @@ expr_filename (tree node)\n }\n \n int *\n-expr_lineno (tree node)\n+expr_lineno (const_tree node)\n {\n #ifdef USE_MAPPED_LOCATION\n   if (GIMPLE_STMT_P (node))\n@@ -5637,7 +5637,7 @@ build_array_type (tree elt_type, tree index_type)\n    the innermost dimension of ARRAY.  */\n \n tree\n-get_inner_array_type (tree array)\n+get_inner_array_type (const_tree array)\n {\n   tree type = TREE_TYPE (array);\n \n@@ -7803,7 +7803,7 @@ needs_to_live_in_memory (tree t)\n    are compatible.  It is assumed that the parent records are compatible.  */\n \n bool\n-fields_compatible_p (tree f1, tree f2)\n+fields_compatible_p (const_tree f1, const_tree f2)\n {\n   if (!operand_equal_p (DECL_FIELD_BIT_OFFSET (f1),\n \t\t\tDECL_FIELD_BIT_OFFSET (f2), OEP_ONLY_CONST))"}, {"sha": "790a115c7b717f525a30b0ad3d6f96ee5cf5f6d6", "filename": "gcc/tree.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6ea2b70d9ccabc6f1d86e79f3f4d3a553a155080", "patch": "@@ -3830,7 +3830,7 @@ extern int tree_int_cst_sign_bit (tree);\n extern bool tree_expr_nonnegative_p (tree);\n extern bool tree_expr_nonnegative_warnv_p (tree, bool *);\n extern bool may_negate_without_overflow_p (tree);\n-extern tree get_inner_array_type (tree);\n+extern tree get_inner_array_type (const_tree);\n \n /* From expmed.c.  Since rtl.h is included after tree.h, we can't\n    put the prototype here.  Rtl.h does declare the prototype if\n@@ -4597,28 +4597,28 @@ extern tree build_range_type (tree, tree, tree);\n extern HOST_WIDE_INT int_cst_value (const_tree);\n extern tree build_addr (tree, tree);\n \n-extern bool fields_compatible_p (tree, tree);\n+extern bool fields_compatible_p (const_tree, const_tree);\n extern tree find_compatible_field (tree, tree);\n \n-extern location_t expr_location (tree);\n+extern location_t expr_location (const_tree);\n extern void set_expr_location (tree, location_t);\n-extern bool expr_has_location (tree);\n+extern bool expr_has_location (const_tree);\n extern\n #ifdef USE_MAPPED_LOCATION\n source_location *\n #else\n source_locus\n #endif\n-expr_locus (tree);\n+expr_locus (const_tree);\n extern void set_expr_locus (tree,\n #ifdef USE_MAPPED_LOCATION\n                             source_location *loc\n #else\n \t\t            source_locus loc\n #endif\n \t\t\t   );\n-extern const char **expr_filename (tree);\n-extern int *expr_lineno (tree);\n+extern const char **expr_filename (const_tree);\n+extern int *expr_lineno (const_tree);\n extern tree *tree_block (tree);\n extern tree *generic_tree_operand (tree, int);\n extern tree *generic_tree_type (tree);\n@@ -4652,9 +4652,9 @@ extern void print_rtl (FILE *, const_rtx);\n /* In print-tree.c */\n extern void debug_tree (tree);\n #ifdef BUFSIZ\n-extern void dump_addr (FILE*, const char *, void *);\n+extern void dump_addr (FILE*, const char *, const void *);\n extern void print_node (FILE *, const char *, tree, int);\n-extern void print_node_brief (FILE *, const char *, tree, int);\n+extern void print_node_brief (FILE *, const char *, const_tree, int);\n extern void indent_to (FILE *, int);\n #endif\n \n@@ -4695,11 +4695,11 @@ extern tree build_duplicate_type (tree);\n    it does not necessarily fit ECF_CONST).  */\n #define ECF_NOVOPS\t\t1024\n \n-extern int flags_from_decl_or_type (tree);\n+extern int flags_from_decl_or_type (const_tree);\n extern int call_expr_flags (tree);\n \n-extern int setjmp_call_p (tree);\n-extern bool alloca_call_p (tree);\n+extern int setjmp_call_p (const_tree);\n+extern bool alloca_call_p (const_tree);\n extern bool must_pass_in_stack_var_size (enum machine_mode, tree);\n extern bool must_pass_in_stack_var_size_or_pad (enum machine_mode, tree);\n "}]}