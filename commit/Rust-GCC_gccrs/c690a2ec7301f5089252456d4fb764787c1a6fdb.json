{"sha": "c690a2ec7301f5089252456d4fb764787c1a6fdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY5MGEyZWM3MzAxZjUwODkyNTI0NTZkNGZiNzY0Nzg3YzFhNmZkYg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2007-08-14T08:39:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T08:39:55Z"}, "message": "opt.ads: Warning for non-local exception propagation now off by default New switch...\n\n2007-08-14  Robert Dewar  <dewar@adacore.com>\n\t    Ed Schonberg  <schonberg@adacore.com>\n\n\t* opt.ads: Warning for non-local exception propagation now off by\n\tdefault\n\tNew switch -gnatI to disable representation clauses\n\tImplement new pragma Implicit_Packing\n\n\t* usage.adb: \n\tWarning for non-local exception propagation now off by default\n\tAdd warning for unchecked conversion of pointers wi different\n\tconventions.\n\tNew switch -gnatI to disable representation clauses\n\n\t* usage.adb: new switch -gnatyS\n\n\t* gnat_ugn.texi: For the gnatcheck Non_Qualified_Aggregates rule add a\n\tnote that aggregates of anonymous array types are not flagged.\n\t-gnatwc now includes membership tests optimized away\n\t-gnatw.x warnings are now off by default\n\tAdded conditional compilation Appendix\n\tAdd documentation of -gnatI\n\tAdd documentation for new -gnatyS style check\n\tUpdate documentation about SAL and auto-init on Windows.\n\n\t* gnat_rm.texi: \n\tAdd documentation for pragma Check_Name and 'Enabled attribute\n\tDocument that Eliminate on dispatching operation is ignored\n\tDocument IDE attributes VCS_Repository_Root and VCS_Patch_Root.\n\tDocument pragma Main\n\tDocument pragma Implicit_Packing\n\n\t* sem_ch13.adb: Add warning for unchecked conversion of pointers wi\n\tdifferent conventions\n\tNew switch -gnatI to disable representation clauses\n\n\t* switch-c.adb (Scan_Front_End_Switches): When a -gnat switch is not\n\trecognized, report the invalid characters including \"-gnat\" instead of\n\tjust the first character in the switch.\n\tNew switch -gnatI to disable representation clauses\n\tSet Warn_On_Object_Renames_Function true for -gnatg\n\n\t* vms_data.ads: Add doc for /IGNORE_REP_CLAUSES\n\tAdd STATEMENTS_AFTER_THEN_ELSE as synonym for -gnatyS\n\tAdd qualifier /ADD_PROJECT_SEARCH_DIR= for different tools, equivalent\n\tto switch -aP (add directory to project search dir).\n\n\t* par-prag.adb: Implement new pragma Implicit_Packing\n\n\t* sem_prag.adb (Analyze_Pragma, case Complex_Representation): Mark the\n\ttype as having a non-standard representation, to force expansion on\n\tconversion to related types.\n\t(Analyze_Pragma): Warn on misspelled pragma\n\t(Analyze_Pragma, case Convention_Identifier): Fix checking of second arg\n\tEnsure consistent use of # in error messages\n\tImplement pragma Implicit_Packing\n\nFrom-SVN: r127421", "tree": {"sha": "7e41dee7f76f1b53282f8674e6481a3eda46f35d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e41dee7f76f1b53282f8674e6481a3eda46f35d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c690a2ec7301f5089252456d4fb764787c1a6fdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c690a2ec7301f5089252456d4fb764787c1a6fdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c690a2ec7301f5089252456d4fb764787c1a6fdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c690a2ec7301f5089252456d4fb764787c1a6fdb/comments", "author": null, "committer": null, "parents": [{"sha": "ede007da18026bf6153ce5d86de81e147760b763", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ede007da18026bf6153ce5d86de81e147760b763", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ede007da18026bf6153ce5d86de81e147760b763"}], "stats": {"total": 2262, "additions": 1619, "deletions": 643}, "files": [{"sha": "ce2daf3a030e7264baa6de0c403a29b4d8f1f374", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 147, "deletions": 8, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c690a2ec7301f5089252456d4fb764787c1a6fdb/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c690a2ec7301f5089252456d4fb764787c1a6fdb/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=c690a2ec7301f5089252456d4fb764787c1a6fdb", "patch": "@@ -108,6 +108,7 @@ Implementation Defined Pragmas\n * Pragma Assert::\n * Pragma Ast_Entry::\n * Pragma C_Pass_By_Copy::\n+* Pragma Check_Name::\n * Pragma Comment::\n * Pragma Common_Object::\n * Pragma Compile_Time_Error::\n@@ -137,6 +138,7 @@ Implementation Defined Pragmas\n * Pragma Finalize_Storage_Only::\n * Pragma Float_Representation::\n * Pragma Ident::\n+* Pragma Implicit_Packing::\n * Pragma Import_Exception::\n * Pragma Import_Function::\n * Pragma Import_Object::\n@@ -158,6 +160,7 @@ Implementation Defined Pragmas\n * Pragma Linker_Section::\n * Pragma Long_Float::\n * Pragma Machine_Attribute::\n+* Pragma Main::\n * Pragma Main_Storage::\n * Pragma No_Body::\n * Pragma No_Return::\n@@ -217,6 +220,7 @@ Implementation Defined Attributes\n * Elab_Body::\n * Elab_Spec::\n * Emax::\n+* Enabled::\n * Enum_Rep::\n * Epsilon::\n * Fixed_Value::\n@@ -673,6 +677,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Assert::\n * Pragma Ast_Entry::\n * Pragma C_Pass_By_Copy::\n+* Pragma Check_Name::\n * Pragma Comment::\n * Pragma Common_Object::\n * Pragma Compile_Time_Error::\n@@ -702,6 +707,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Finalize_Storage_Only::\n * Pragma Float_Representation::\n * Pragma Ident::\n+* Pragma Implicit_Packing::\n * Pragma Import_Exception::\n * Pragma Import_Function::\n * Pragma Import_Object::\n@@ -723,6 +729,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Linker_Section::\n * Pragma Long_Float::\n * Pragma Machine_Attribute::\n+* Pragma Main::\n * Pragma Main_Storage::\n * Pragma No_Body::\n * Pragma No_Return::\n@@ -1012,6 +1019,36 @@ You can also pass records by copy by specifying the convention\n @code{Import} and @code{Export} pragmas, which allow specification of\n passing mechanisms on a parameter by parameter basis.\n \n+@node Pragma Check_Name\n+@unnumberedsec Pragma Check_Name\n+@cindex Defining check names\n+@cindex Check names, defining\n+@findex Check_Name\n+@noindent\n+Syntax:\n+@smallexample @c ada\n+pragma Check_Name (check_name_IDENTIFIER);\n+@end smallexample\n+\n+@noindent\n+This is a configuration pragma which defines a new implementation\n+defined check name (unless IDENTIFIER matches one of the predefined\n+check names, in which case the pragma has no effect). Check names\n+are global to a partition, so if two more more configuration pragmas\n+are present in a partition mentioning the same name, only one new\n+check name is introduced.\n+\n+An implementation defined check name introduced with this pragma may\n+be used in only three contexts: @code{pragma Suppress},\n+@code{pragma Unsuppress},\n+and as the prefix of a @code{Check_Name'Enabled} attribute reference. For\n+any of these three cases, the check name must be visible. A check\n+name is visible if it is in the configuration pragmas applying to\n+the current unit, or if it appears at the start of any unit that\n+is part of the dependency set of the current unit (e.g. units that\n+are mentioned in @code{with} clauses.\n+\n+Normally the default mechanism for passing C convention records to C\n @node Pragma Comment\n @unnumberedsec Pragma Comment\n @findex Comment\n@@ -1550,7 +1587,7 @@ always given as strings. At the moment, this form of distinguishing\n overloaded subprograms is implemented only partially, so we do not recommend\n using it for practical subprogram elimination.\n \n-Note, that in case of a parameterless procedure its profile is represented\n+Note that in case of a parameterless procedure its profile is represented\n as @code{Parameter_Types => (\"\")}\n \n Alternatively, the @code{Source_Location} parameter is used to specify\n@@ -1602,6 +1639,11 @@ Note that any change in the source files that includes removing, splitting of\n adding lines may make the set of Eliminate pragmas using SOURCE_LOCATION\n parameter illegal.\n \n+It is legal to use pragma Eliminate where the referenced entity is a\n+dispatching operation, but it is not clear what this would mean, since\n+in general the call does not know which entity is actually being called.\n+Consequently, a pragma Eliminate for a dispatching operation is ignored.\n+\n @node Pragma Export_Exception\n @unnumberedsec Pragma Export_Exception\n @cindex OpenVMS\n@@ -2117,6 +2159,41 @@ maximum allowed length is 31 characters, so if it is important to\n maintain compatibility with this compiler, you should obey this length\n limit.\n \n+@node Pragma Implicit_Packing\n+@unnumberedsec Pragma Implicit_Packing\n+@findex Implicit_Packing\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Implicit_Packing;\n+@end smallexample\n+\n+@noindent\n+This is a configuration pragma that requests implicit packing for packed\n+arrays for which a size clause is given but no explicit pragma Pack or\n+specification of Component_Size is present. Consider this example:\n+\n+@smallexample @c ada\n+type R is array (0 .. 7) of Boolean;\n+for R'Size use 8;\n+@end smallexample\n+\n+@noindent\n+In accordance with the recommendation in the RM (RM 13.3(53)), a Size clause\n+does not change the layout of a composite object. So the Size clause in the\n+above example is normally rejected, since the default layout of the array uses\n+8-bit components, and thus the array requires a minimum of 64 bits.\n+\n+If this declaration is compiled in a region of code covered by an occurrence\n+of the configuration pragma Implicit_Packing, then the Size clause in this\n+and similar examples will cause implicit packing and thus be accepted. For\n+this implicit packing to occur, the type in question must be an array of small\n+components whose size is known at compile time, and the Size clause must\n+specify the exact size that corresponds to the length of the array multiplied\n+by the size in bits of the component type.\n+@cindex Array packing\n+\n @node Pragma Import_Exception\n @unnumberedsec Pragma Import_Exception\n @cindex OpenVMS\n@@ -2916,6 +2993,27 @@ defined for each machine.  See the GCC manual for further information.\n It is not possible to specify attributes defined by other languages,\n only attributes defined by the machine the code is intended to run on.\n \n+@node Pragma Main\n+@unnumberedsec Pragma Main\n+@cindex OpenVMS\n+@findex Main\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Main\n+ (MAIN_OPTION [, MAIN_OPTION]);\n+\n+MAIN_OPTION ::=\n+  [STACK_SIZE              =>] static_integer_EXPRESSION\n+| [TASK_STACK_SIZE_DEFAULT =>] static_integer_EXPRESSION\n+| [TIME_SLICING_ENABLED    =>] static_boolean_EXPRESSION\n+@end smallexample\n+\n+@noindent\n+This pragma is provided for compatibility with OpenVMS VAX Systems.  It has\n+no effect in GNAT, other than being syntax checked.\n+\n @node Pragma Main_Storage\n @unnumberedsec Pragma Main_Storage\n @cindex OpenVMS\n@@ -2930,7 +3028,6 @@ pragma Main_Storage\n MAIN_STORAGE_OPTION ::=\n   [WORKING_STORAGE =>] static_SIMPLE_EXPRESSION\n | [TOP_GUARD       =>] static_SIMPLE_EXPRESSION\n-\n @end smallexample\n \n @noindent\n@@ -3181,7 +3278,7 @@ enumeration literal case).\n Syntax:\n \n @smallexample @c ada\n-pragma Passive ([Semaphore | No]);\n+pragma Passive [(Semaphore | No)];\n @end smallexample\n \n @noindent\n@@ -3202,7 +3299,7 @@ optimized.  GNAT does not attempt to optimize any tasks in this manner\n Syntax:\n \n @smallexample @c ada\n-pragma Persistent_BSS [local_NAME]\n+pragma Persistent_BSS [(local_NAME)]\n @end smallexample\n \n @noindent\n@@ -4567,6 +4664,7 @@ consideration, you should minimize the use of these attributes.\n * Elab_Body::\n * Elab_Spec::\n * Emax::\n+* Enabled::\n * Enum_Rep::\n * Epsilon::\n * Fixed_Value::\n@@ -4806,6 +4904,27 @@ The @code{Emax} attribute is provided for compatibility with Ada 83.  See\n the Ada 83 reference manual for an exact description of the semantics of\n this attribute.\n \n+@node Enabled\n+@unnumberedsec Enabled\n+@findex Enabled\n+@noindent\n+The @code{Enabled} attribute allows an application program to check at compile\n+time to see if the designated check is currently enabled. The prefix is a\n+simple identifier, referencing any predefined check name (other than\n+@code{All_Checks}) or a check name introduced by pragma Check_Name. If\n+no argument is given for the attribute, the check is for the general state\n+of the check, if an argument is given, then it is an entity name, and the\n+check indicates whether an @code{Suppress} or @code{Unsuppress} has been\n+given naming the entity (if not, then the argument is ignored).\n+\n+Note that instantiations inherit the check status at the point of the\n+instantiation, so a useful idiom is to have a library package that\n+introduces a check name with @code{pragma Check_Name}, and then contains\n+generic packages or subprograms which use the @code{Enabled} attribute\n+to see if the check is enabled. A user of this package can then issue\n+a @code{pragma Suppress} or @code{pragma Unsuppress} before instantiating\n+the package or subprogram, controlling whether the check will be present.\n+\n @node Enum_Rep\n @unnumberedsec Enum_Rep\n @cindex Representation of enums\n@@ -5847,7 +5966,8 @@ Followed.\n @code{Size} clause on a composite subtype should not affect the\n internal layout of components.\n @end cartouche\n-Followed.\n+Followed. But note that this can be overridden by use of the implementation\n+pragma Implicit_Packing in the case of packed arrays.\n \n @sp 1\n @cartouche\n@@ -7322,7 +7442,12 @@ the last line is a single @code{LF} character (@code{16#0A#}).\n @strong{42}.  Implementation-defined check names.  See 11.5(27).\n @end cartouche\n @noindent\n-No implementation-defined check names are supported.\n+The implementation defined check name Alignment_Check controls checking of\n+address clause values for proper alignment (that is, the address supplied\n+must be consistent with the alignment of the type).\n+\n+In addition, a user program can add implementation-defined check names\n+by means of the pragma Check_Name.\n \n @sp 1\n @cartouche\n@@ -7667,7 +7792,11 @@ This restriction ensures that the generated code does not contain any\n implicit @code{for} loops, either by modifying\n the generated code where possible,\n or by rejecting any construct that would otherwise generate an implicit\n-@code{for} loop.\n+@code{for} loop. If this restriction is active, it is possible to build\n+large array aggregates with all static components without generating an\n+intermediate temporary, and without generating a loop to initialize individual\n+components..Otherwise, a loop is created for arrays larger than about 5000\n+scalar components.\n \n @item No_Initialize_Scalars\n @findex No_Initialize_Scalars\n@@ -7773,7 +7902,7 @@ throughout a partition.\n \n In the case of aggregates with others, if the aggregate has a dynamic\n size, there is no way to eliminate the elaboration code (such dynamic\n-bounds would be incompatible with @code{Preelaborate} in any case. If\n+bounds would be incompatible with @code{Preelaborate} in any case). If\n the bounds are static, then use of this restriction actually modifies\n the code choice of the compiler to avoid generating a loop, and instead\n generate the aggregate statically if possible, no matter how many times\n@@ -15638,6 +15767,16 @@ doing the check-in.\n This is a simple attribute. Its value is a string that specifies\n the command used by the VCS to check the validity of a log file.\n \n+@item VCS_Repository_Root\n+The VCS repository root path. This is used to create tags or branches\n+of the repository. For subversion the value should be the @code{URL}\n+as specified to check-out the working copy of the repository.\n+\n+@item VCS_Patch_Root\n+The local root directory to use for building patch file. All patch chunks\n+will be relative to this path. The root project directory is used if\n+this value is not defined.\n+\n @end table\n \n @node Package Renamings"}, {"sha": "ec77d30a6d5bad1f3fd7204bb25eae34798f26a8", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 558, "deletions": 32, "changes": 590, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c690a2ec7301f5089252456d4fb764787c1a6fdb/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c690a2ec7301f5089252456d4fb764787c1a6fdb/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=c690a2ec7301f5089252456d4fb764787c1a6fdb", "patch": "@@ -205,6 +205,7 @@ AdaCore@*\n * Platform-Specific Information for the Run-Time Libraries::\n * Example of Binder Output File::\n * Elaboration Order Handling in GNAT::\n+* Conditional Compilation::\n * Inline Assembler::\n * Compatibility and Porting Guide::\n @ifset unw\n@@ -418,7 +419,6 @@ File Name Krunching Using gnatkr\n * Examples of gnatkr Usage::\n \n Preprocessing Using gnatprep\n-\n * Using gnatprep::\n * Switches for gnatprep::\n * Form of Definitions File::\n@@ -610,6 +610,13 @@ Elaboration Order Handling in GNAT\n * Summary of Procedures for Elaboration Control::\n * Other Elaboration Order Considerations::\n \n+Conditional Compilation\n+* Use of Boolean Constants::\n+* Debugging - A Special Case::\n+* Conditionalizing Declarations::\n+* Use of Alternative Implementations::\n+* Preprocessing::\n+\n Inline Assembler\n \n * Basic Assembler Syntax::\n@@ -784,7 +791,7 @@ file names on operating systems with a limit on the length of names.\n @item\n @ref{Preprocessing Using gnatprep}, describes @code{gnatprep}, a\n preprocessor utility that allows a single source file to be used to\n-generate multiple or parameterized source files, by means of macro\n+generate multiple or parameterized source files by means of macro\n substitution.\n \n @ifset vms\n@@ -869,6 +876,10 @@ output file for a sample program.\n @ref{Elaboration Order Handling in GNAT}, describes how GNAT helps\n you deal with elaboration order issues.\n \n+@item\n+@ref{Conditional Compilation}, describes how to model conditional compilation,\n+both with Ada in general and with GNAT facilities in particular.\n+\n @item\n @ref{Inline Assembler}, shows how to use the inline assembly facility\n in an Ada program.\n@@ -3893,10 +3904,16 @@ Identifier character set\n @ifclear vms\n (@var{c}=1/2/3/4/8/9/p/f/n/w).\n @end ifclear\n-@ifset vms\n For details of the possible selections for @var{c},\n see @ref{Character Set Control}.\n-@end ifset\n+\n+@item ^-gnatI^IGNORE_REP_CLAUSES^\n+@cindex @option{^-gnatI^IGNORE_REP_CLAUSES^} (@command{gcc})\n+Ignore representation clauses. When this switch is used, all\n+representation clauses are treated as comments. This is useful\n+when initially porting code where you want to ignore rep clause\n+problems, and also for compiling foreign code (particularly\n+for use with ASIS).\n \n @item -gnatjnn\n @cindex @option{-gnatjnn} (@command{gcc})\n@@ -4757,6 +4774,12 @@ then it will warn that the ``>'' or ``<'' part of the test\n is useless and that the operator could be replaced by ``=''.\n An example would be comparing a @code{Natural} variable <= 0.\n \n+This warning option also generates warnings if\n+one or both tests is optimized away in a membership test for integer\n+values if the result can be determined at compile time. Range tests on\n+enumeration types are not included, since it is common for such tests\n+to include an end point.\n+\n This warning can also be turned on using @option{-gnatwa}.\n \n @item -gnatwC\n@@ -5195,7 +5218,7 @@ This switch activates warnings for exception usage when pragma Restrictions\n (No_Exception_Propagation) is in effect. Warnings are given for implicit or\n explicit exception raises which are not covered by a local handler, and for\n exception handlers which do not cover a local raise. The default is that these\n-warnings are given.\n+warnings are not given.\n \n @item -gnatw.X\n @emph{Disable warnings for No_Exception_Propagation mode.}\n@@ -5867,6 +5890,14 @@ corresponding declaration. No specific casing style is imposed on\n identifiers. The only requirement is for consistency of references\n with declarations.\n \n+@item ^S^STATEMENTS_AFTER_THEN_ELSE^\n+@emph{Check no statements after THEN/ELSE.}\n+If the ^letter S^word STATEMENTS_AFTER_THEN_ELSE^ appears in the\n+string after @option{-gnaty} then it is not permitted to write any\n+statements on the same line as a THEN OR ELSE keyword following the\n+keyword in an IF statement. OR ELSE and AND THEN are not affected,\n+and a special exception allows a pragma to appear after ELSE.\n+\n @item ^s^SPECS^\n @emph{Check separate specs.}\n If the ^letter s^word SPECS^ appears in the string after @option{-gnaty} then\n@@ -6644,6 +6675,7 @@ the @option{-gnatR} switch). For @option{-gnatR1} (which is the default,\n so @option{-gnatR} with no parameter has the same effect), size and alignment\n information is listed for declared array and record types. For\n @option{-gnatR2}, size and alignment information is listed for all\n+declared types and objects. Finally @code{-gnatR3} includes symbolic\n expressions for values that are computed at run time for\n variant records. These symbolic expressions have a mostly obvious\n format with #n being used to represent the value of the n'th\n@@ -7406,7 +7438,7 @@ and the actual size needed for the current allocation request).\n \n For certain targets, notably VxWorks 653,\n the secondary stack is allocated by carving off a fixed ratio chunk of the\n-primary task stack. The -D option is used to defined the\n+primary task stack. The -D option is used to define the\n size of the environment task's secondary stack.\n \n @item ^-e^/ELABORATION_DEPENDENCIES^\n@@ -15362,6 +15394,11 @@ GNAT-style comment beginning\n @item ^-c4^/COMMENTS_LAYOUT=REFORMAT^\n Reformat comment blocks\n \n+@item ^-c5^/COMMENTS_LAYOUT=KEEP_SPECIAL^\n+Keep unchanged special form comments\n+\n+Reformat comment blocks\n+\n @cindex @option{^-l@var{n}^/CONSTRUCT_LAYOUT^} (@command{gnatpp})\n @item ^-l1^/CONSTRUCT_LAYOUT=GNAT^\n GNAT-style layout (this is the default)\n@@ -15383,6 +15420,11 @@ stops.\n Do not place the keyword @code{is} on a separate line in a subprogram body in\n case if the specification occupies more then one line.\n \n+@cindex @option{^--separate-loop-then^/SEPARATE_LOOP_THEN^} (@command{gnatpp})\n+@item ^--separate-loop-then^/SEPARATE_LOOP_THEN^\n+Place the keyword @code{loop} in FOR and WHILE loop statements and the\n+keywird @code{then} in IF statements on a separate line.\n+\n @end table\n \n @ifclear vms\n@@ -15814,6 +15856,14 @@ comments may be reformatted in typical\n word processor style (that is, moving words between lines and putting as\n many words in a line as possible).\n \n+@noindent\n+The @option{^-c5^/COMMENTS_LAYOUT=KEEP_SPECIAL^} switch specifies, that comments\n+that has a special format (that is, a character that is neither a letter nor digit\n+not white space nor line break immediatelly following the leading @code{--} of\n+the comment) should be without any change moved from the argument source\n+into reformatted source. This switch allows to preserve comments that are used\n+as a special marks in the code (e.g. SPARK annotation).\n+\n @node Construct Layout\n @subsection Construct Layout\n \n@@ -16867,10 +16917,12 @@ $ gnatkr very_long_unit_name.ads/count=0 --> very_long_unit_name.ads\n @findex gnatprep\n \n @noindent\n-The @code{gnatprep} utility provides\n-a simple preprocessing capability for Ada programs.\n-It is designed for use with GNAT, but is not dependent on any special\n-features of GNAT.\n+This chapter discusses how to use GNAT's @code{gnatprep} utility for simple\n+preprocessing.\n+Although designed for use with GNAT, @code{gnatprep} does not depend on any\n+special GNAT features.\n+For further discussion of conditional compilation in general, see\n+@ref{Conditional Compilation}.\n \n @menu\n * Using gnatprep::\n@@ -16879,6 +16931,7 @@ features of GNAT.\n * Form of Input Text for gnatprep::\n @end menu\n \n+\n @node Using gnatprep\n @section Using @code{gnatprep}\n \n@@ -19781,7 +19834,7 @@ This rule has no parameters.\n \n @noindent\n Flag each call to a predefined relational operator (``<'', ``>'', ``<='',\n-``>='', ``='' and ``/='') for the predefined @code{Boolean} type.\n+``>='', ``='' and ``/='') for the predefined Boolean type.\n (This rule is useful in enforcing the SPARK language restrictions.)\n \n Calls to predefined relational operators of any type derived from\n@@ -20364,6 +20417,7 @@ A non-qualified aggregate is an\n aggregate that is not the expression of a qualified expression. A\n string literal is not considered an aggregate, but an array\n aggregate of a string type is considered as a normal aggregate.\n+Aggregates of anonymous array types are not flagged.\n \n This rule has no parameters.\n \n@@ -23309,7 +23363,7 @@ from HP Ada 83.\n \n @item  @code{PASSIVE}\n \n-@item  @code{PSET_OBJECT}\n+@item  @code{PSECT_OBJECT}\n \n @item  @code{SHARE_GENERIC}\n \n@@ -25510,9 +25564,9 @@ and in fact there is no correct order.\n \n If one of the two expressions is true, and the other is false, then one\n of the above orders is correct, and the other is incorrect. For example,\n-if @code{expression_1} = 1 and @code{expression_2} /= 2,\n-then the call to @code{Func_2}\n-will occur, but not the call to @code{Func_1.}\n+if @code{expression_1} /= 1 and @code{expression_2} = 2,\n+then the call to @code{Func_1}\n+will occur, but not the call to @code{Func_2.}\n This means that it is essential\n to elaborate the body of @code{Unit_1} before\n the body of @code{Unit_2}, so the first\n@@ -25801,7 +25855,7 @@ this case, an Ada compiler must diagnose the situation at bind\n time, and refuse to build an executable program.\n \n @item One or more orders exist, all incorrect\n-One or more acceptable elaboration orders exists, and all of them\n+One or more acceptable elaboration orders exist, and all of them\n generate an elaboration order problem. In this case, the binder\n can build an executable program, but @code{Program_Error} will be raised\n when the program is run.\n@@ -26976,8 +27030,8 @@ of errors. One switch that is useful in this testing is the\n @option{^-p (pessimistic elaboration order)^/PESSIMISTIC_ELABORATION_ORDER^}\n switch for\n @code{gnatbind}.\n-Normally the binder tries to find an order that has the best chance of\n-of avoiding elaboration problems. With this switch, the binder\n+Normally the binder tries to find an order that has the best chance\n+of avoiding elaboration problems. However, if this switch is used, the binder\n plays a devil's advocate role, and tries to choose the order that\n has the best chance of failing. If your program works even with this\n switch, then it has a better chance of being error free, but this is still\n@@ -27205,8 +27259,472 @@ difference, by looking at the two elaboration orders that are chosen,\n and figuring out which is correct, and then adding the necessary\n @code{Elaborate} or @code{Elaborate_All} pragmas to ensure the desired order.\n \n+\n+\n+@c *******************************\n+@node Conditional Compilation\n+@appendix Conditional Compilation\n+@c *******************************\n+@cindex Conditional compilation\n+\n+@noindent\n+It is often necessary to arrange for a single source program\n+to serve multiple purposes, where it is compiled in different\n+ways to achieve these different goals. Some examples of the\n+need for this feature are\n+\n+@itemize @bullet\n+@item  Adapting a program to a different hardware environment\n+@item  Adapting a program to a different target architecture\n+@item  Turning debugging features on and off\n+@item  Arranging for a program to compile with different compilers\n+@end itemize\n+\n+@noindent\n+In C, or C++, the typical approach would be to use the preprocessor\n+that is defined as part of the language. The Ada language does not\n+contain such a feature. This is not an oversight, but rather a very\n+deliberate design decision, based on the experience that overuse of\n+the preprocessing features in C and C++ can result in programs that\n+are extremely difficult to maintain. For example, if we have ten\n+switches that can be on or off, this means that there are a thousand\n+separate programs, any one of which might not even be syntactically\n+correct, and even if syntactically correct, the resulting program\n+might not work correctly. Testing all combinations can quickly become\n+impossible.\n+\n+Nevertheless, the need to tailor programs certainly exists, and in\n+this Appendix we will discuss how this can\n+be achieved using Ada in general, and GNAT in particular.\n+\n+@menu\n+* Use of Boolean Constants::\n+* Debugging - A Special Case::\n+* Conditionalizing Declarations::\n+* Use of Alternative Implementations::\n+* Preprocessing::\n+@end menu\n+\n+@node Use of Boolean Constants\n+@section Use of Boolean Constants\n+\n+@noindent\n+In the case where the difference is simply which code\n+sequence is executed, the cleanest solution is to use Boolean\n+constants to control which code is executed.\n+\n+@smallexample @c ada\n+@group\n+FP_Initialize_Required : constant Boolean := True;\n+...\n+if FP_Initialize_Required then\n+...\n+end if;\n+@end group\n+@end smallexample\n+\n+@noindent\n+Not only will the code inside the @code{if} statement not be executed if\n+the constant Boolean is @code{False}, but it will also be completely\n+deleted from the program.\n+However, the code is only deleted after the @code{if} statement\n+has been checked for syntactic and semantic correctness.\n+(In contrast, with preprocessors the code is deleted before the\n+compiler ever gets to see it, so it is not checked until the switch\n+is turned on.)\n+@cindex Preprocessors (contrasted with conditional compilation)\n+\n+Typically the Boolean constants will be in a separate package,\n+something like:\n+\n+@smallexample @c ada\n+@group\n+package Config is\n+   FP_Initialize_Required : constant Boolean := True;\n+   Reset_Available        : constant Boolean := False;\n+   ...\n+end Config;\n+@end group\n+@end smallexample\n+\n+@noindent\n+The @code{Config} package exists in multiple forms for the various targets,\n+with an appropriate script selecting the version of @code{Config} needed.\n+Then any other unit requiring conditional compilation can do a @code{with}\n+of @code{Config} to make the constants visible.\n+\n+\n+@node Debugging - A Special Case\n+@section Debugging - A Special Case\n+\n+@noindent\n+A common use of conditional code is to execute statements (for example\n+dynamic checks, or output of intermediate results) under control of a\n+debug switch, so that the debugging behavior can be turned on and off.\n+This can be done using a Boolean constant to control whether the code\n+is active:\n+\n+@smallexample @c ada\n+@group\n+if Debugging then\n+   Put_Line (\"got to the first stage!\");\n+end if;\n+@end group\n+@end smallexample\n+\n+@noindent\n+or\n+\n+@smallexample @c ada\n+@group\n+if Debugging and then Temperature > 999.0 then\n+   raise Temperature_Crazy;\n+end if;\n+@end group\n+@end smallexample\n+\n+@noindent\n+Since this is a common case, there are special features to deal with\n+this in a convenient manner. For the case of tests, Ada 2005 has added\n+a pragma @code{Assert} that can be used for such tests. This pragma is modeled\n+@cindex pragma @code{Assert}\n+on the @code{Assert} pragma that has always been available in GNAT, so this\n+feature may be used with GNAT even if you are not using Ada 2005 features.\n+The use of pragma @code{Assert} is described in the\n+@cite{GNAT Reference Manual}, but as an example, the last test could be written:\n+\n+@smallexample @c ada\n+pragma Assert (Temperature <= 999.0, \"Temperature Crazy\");\n+@end smallexample\n+\n+@noindent\n+or simply\n+\n+@smallexample @c ada\n+pragma Assert (Temperature <= 999.0);\n+@end smallexample\n+\n+@noindent\n+In both cases, if assertions are active and the temperature is excessive,\n+the exception @code{Assert_Failure} will be raised, with the given string in\n+the first case or a string indicating the location of the pragma in the second\n+case used as the exception message.\n+\n+You can turn assertions on and off by using the @code{Assertion_Policy}\n+pragma.\n+@cindex pragma @code{Assertion_Policy}\n+This is an Ada 2005 pragma which is implemented in all modes by\n+GNAT, but only in the latest versions of GNAT which include Ada 2005\n+capability. Alternatively, you can use the @option{-gnata} switch\n+@cindex @option{-gnata} switch\n+to enable assertions from the command line (this is recognized by all versions\n+of GNAT).\n+\n+For the example above with the @code{Put_Line}, the GNAT-specific pragma\n+@code{Debug} can be used:\n+@cindex pragma @code{Debug}\n+\n+@smallexample @c ada\n+pragma Debug (Put_Line (\"got to the first stage!\"));\n+@end smallexample\n+\n+@noindent\n+If debug pragmas are enabled, the argument, which must be of the form of\n+a procedure call, is executed (in this case, @code{Put_Line} will be called).\n+Only one call can be present, but of course a special debugging procedure\n+containing any code you like can be included in the program and then\n+called in a pragma @code{Debug} argument as needed.\n+\n+One advantage of pragma @code{Debug} over the @code{if Debugging then}\n+construct is that pragma @code{Debug} can appear in declarative contexts,\n+such as at the very beginning of a procedure, before local declarations have\n+been elaborated.\n+\n+Debug pragmas are enabled using either the @option{-gnata} switch that also\n+controls assertions, or with a separate Debug_Policy pragma.\n+@cindex pragma @code{Debug_Policy}\n+The latter pragma is new in the Ada 2005 versions of GNAT (but it can be used\n+in Ada 95 and Ada 83 programs as well), and is analogous to\n+pragma @code{Assertion_Policy} to control assertions.\n+\n+@code{Assertion_Policy} and @code{Debug_Policy} are configuration pragmas,\n+and thus they can appear in @file{gnat.adc} if you are not using a\n+project file, or in the file designated to contain configuration pragmas\n+in a project file.\n+They then apply to all subsequent compilations. In practice the use of\n+the @option{-gnata} switch is often the most convenient method of controlling\n+the status of these pragmas.\n+\n+Note that a pragma is not a statement, so in contexts where a statement\n+sequence is required, you can't just write a pragma on its own. You have\n+to add a @code{null} statement.\n+\n+@smallexample @c ada\n+@group\n+if ... then\n+   ... -- some statements\n+else\n+   pragma Assert (Num_Cases < 10);\n+   null;\n+end if;\n+@end group\n+@end smallexample\n+\n+\n+@node Conditionalizing Declarations\n+@section Conditionalizing Declarations\n+\n+@noindent\n+In some cases, it may be necessary to conditionalize declarations to meet\n+different requirements. For example we might want a bit string whose length\n+is set to meet some hardware message requirement.\n+\n+In some cases, it may be possible to do this using declare blocks controlled\n+by conditional constants:\n+\n+@smallexample @c ada\n+@group\n+if Small_Machine then\n+   declare\n+      X : Bit_String (1 .. 10);\n+   begin\n+      ...\n+   end;\n+else\n+   declare\n+      X : Large_Bit_String (1 .. 1000);\n+   begin\n+      ...\n+   end;\n+end if;\n+@end group\n+@end smallexample\n+\n+@noindent\n+Note that in this approach, both declarations are analyzed by the\n+compiler so this can only be used where both declarations are legal,\n+even though one of them will not be used.\n+\n+Another approach is to define integer constants, e.g. @code{Bits_Per_Word}, or\n+Boolean constants, e.g. @code{Little_Endian}, and then write declarations\n+that are parameterized by these constants. For example\n+\n+@smallexample @c ada\n+@group\n+for Rec use\n+  Field1 at 0 range Boolean'Pos (Little_Endian) * 10 .. Bits_Per_Word;\n+end record;\n+@end group\n+@end smallexample\n+\n+@noindent\n+If @code{Bits_Per_Word} is set to 32, this generates either\n+\n+@smallexample @c ada\n+@group\n+for Rec use\n+  Field1 at 0 range 0 .. 32;\n+end record;\n+@end group\n+@end smallexample\n+\n+@noindent\n+for the big endian case, or\n+\n+@smallexample @c ada\n+@group\n+for Rec use record\n+  Field1 at 0 range 10 .. 32;\n+end record;\n+@end group\n+@end smallexample\n+\n+@noindent\n+for the little endian case. Since a powerful subset of Ada expression\n+notation is usable for creating static constants, clever use of this\n+feature can often solve quite difficult problems in conditionalizing\n+compilation (note incidentally that in Ada 95, the little endian\n+constant was introduced as @code{System.Default_Bit_Order}, so you do not\n+need to define this one yourself).\n+\n+\n+@node Use of Alternative Implementations\n+@section Use of Alternative Implementations\n+\n+@noindent\n+In some cases, none of the approaches described above are adequate. This\n+can occur for example if the set of declarations required is radically\n+different for two different configurations.\n+\n+In this situation, the official Ada way of dealing with conditionalizing\n+such code is to write separate units for the different cases. As long as\n+this does not result in excessive duplication of code, this can be done\n+without creating maintenance problems. The approach is to share common\n+code as far as possible, and then isolate the code and declarations\n+that are different. Subunits are often a convenient method for breaking\n+out a piece of a unit that is to be conditionalized, with separate files\n+for different versions of the subunit for different targets, where the\n+build script selects the right one to give to the compiler.\n+@cindex Subunits (and conditional compilation)\n+\n+As an example, consider a situation where a new feature in Ada 2005\n+allows something to be done in a really nice way. But your code must be able\n+to compile with an Ada 95 compiler. Conceptually you want to say:\n+\n+@smallexample @c ada\n+@group\n+if Ada_2005 then\n+   ... neat Ada 2005 code\n+else\n+   ... not quite as neat Ada 95 code\n+end if;\n+@end group\n+@end smallexample\n+\n+@noindent\n+where @code{Ada_2005} is a Boolean constant.\n+\n+But this won't work when @code{Ada_2005} is set to @code{False},\n+since the @code{then} clause will be illegal for an Ada 95 compiler.\n+(Recall that although such unreachable code would eventually be deleted\n+by the compiler, it still needs to be legal.  If it uses features\n+introduced in Ada 2005, it will be illegal in Ada 95.)\n+\n+So instead we write\n+\n+@smallexample @c ada\n+procedure Insert is separate;\n+@end smallexample\n+\n+@noindent\n+Then we have two files for the subunit @code{Insert}, with the two sets of\n+code.\n+If the package containing this is called @code{File_Queries}, then we might\n+have two files\n+\n+@itemize @bullet\n+@item    @file{file_queries-insert-2005.adb}\n+@item    @file{file_queries-insert-95.adb}\n+@end itemize\n+\n+@noindent\n+and the build script renames the appropriate file to\n+\n+@smallexample\n+file_queries-insert.adb\n+@end smallexample\n+\n+@noindent\n+and then carries out the compilation.\n+\n+This can also be done with project files' naming schemes. For example:\n+\n+@smallexample @c project\n+For Body (\"File_Queries.Insert\") use \"file_queries-insert-2005.ada\";\n+@end smallexample\n+\n+@noindent\n+Note also that with project files it is desirable to use a different extension\n+than @file{ads} / @file{adb} for alternativee versions. Otherwise a naming\n+conflict may arise through another commonly used feature: to declare as part\n+of the project a set of directories containing all the sources obeying the\n+default naming scheme.\n+\n+The use of alternative units is certainly feasible in all situations,\n+and for example the Ada part of the GNAT run-time is conditionalized\n+based on the target architecture using this approach. As a specific example,\n+consider the implementation of the AST feature in VMS. There is one\n+spec:\n+\n+@smallexample\n+s-asthan.ads\n+@end smallexample\n+\n+@noindent\n+which is the same for all architectures, and three bodies:\n+\n+@table @file\n+@item    s-asthan.adb\n+used for all non-VMS operating systems\n+@item    s-asthan-vms-alpha.adb\n+used for VMS on the Alpha\n+@item    s-asthan-vms-ia64.adb\n+used for VMS on the ia64\n+@end table\n+\n+@noindent\n+The dummy version @file{s-asthan.adb} simply raises exceptions noting that\n+this operating system feature is not available, and the two remaining\n+versions interface with the corresponding versions of VMS to provide\n+VMS-compatible AST handling. The GNAT build script knows the architecture\n+and operating system, and automatically selects the right version,\n+renaming it if necessary to @file{s-asthan.adb} before the run-time build.\n+\n+Another style for arranging alternative implementations is through Ada's\n+access-to-subprogram facility.\n+In case some functionality is to be conditionally included,\n+you can declare an access-to-procedure variable @code{Ref} that is initialized\n+to designate a ``do nothing'' procedure, and then invoke @code{Ref.all}\n+when appropriate.\n+In some library package, set @code{Ref} to @code{Proc'Access} for some\n+procedure @code{Proc} that performs the relevant processing.\n+The initialization only occurs if the library package is included in the\n+program.\n+The same idea can also be implemented using tagged types and dispatching\n+calls.\n+\n+\n+@node Preprocessing\n+@section Preprocessing\n+@cindex Preprocessing\n+\n+@noindent\n+Although it is quite possible to conditionalize code without the use of\n+C-style preprocessing, as described earlier in this section, it is\n+nevertheless convenient in some cases to use the C approach. Moreover,\n+older Ada compilers have often provided some preprocessing capability,\n+so legacy code may depend on this approach, even though it is not\n+standard.\n+\n+To accommodate such use, GNAT provides a preprocessor (modeled to a large\n+extent on the various preprocessors that have been used\n+with legacy code on other compilers, to enable easier transition).\n+\n+The preprocessor may be used in two separate modes. It can be used quite\n+separately from the compiler, to generate a separate output source file\n+that is then fed to the compiler as a separate step. This is the\n+@code{gnatprep} utility, whose use is fully described in\n+@ref{Preprocessing Using gnatprep}.\n+@cindex @code{gnatprep}\n+\n+The preprocessing language allows such constructs as\n+\n+@smallexample\n+@group\n+#if DEBUG or PRIORITY > 4 then\n+   bunch of declarations\n+#else\n+   completely different bunch of declarations\n+#end if;\n+@end group\n+@end smallexample\n+\n+@noindent\n+The values of the symbols @code{DEBUG} and @code{PRIORITY} can be\n+defined either on the command line or in a separate file.\n+\n+The other way of running the preprocessor is even closer to the C style and\n+often more convenient. In this approach the preprocessing is integrated into\n+the compilation process. The compiler is fed the preprocessor input which\n+includes @code{#if} lines etc, and then the compiler carries out the\n+preprocessing internally and processes the resulting output.\n+For more details on this approach, see @ref{Integrated Preprocessing}.\n+\n+\n+@c *******************************\n @node Inline Assembler\n @appendix Inline Assembler\n+@c *******************************\n \n @noindent\n If you need to write low-level software that interacts directly\n@@ -29346,8 +29864,8 @@ provided by @file{API.dll} you must statically link against the DLL or\n an import library which contains a jump table with an entry for each\n routine and variable exported by the DLL. In the Microsoft world this\n import library is called @file{API.lib}. When using GNAT this import\n-library is called either @file{libAPI.a} or @file{libapi.a} (names are\n-case insensitive).\n+library is called either @file{libAPI.dll.a}, @file{libapi.dll.a},\n+@file{libAPI.a} or @file{libapi.a} (names are case insensitive).\n \n After you have linked your application with the DLL or the import library\n and you run your application, here is what happens:\n@@ -29377,7 +29895,7 @@ routines and routines in the application using the DLL.\n @end itemize\n \n @item\n-The entries in the jump table (from the import library @file{libAPI.a}\n+The entries in the jump table (from the import library @file{libAPI.dll.a}\n or @file{API.lib} or automatically created when linking against a DLL)\n which is part of your application are initialized with the addresses\n of the routines and variables in @file{API.dll}.\n@@ -29427,7 +29945,7 @@ The Ada spec for the routines and/or variables you want to access in\n header files provided with the DLL.\n \n @item\n-The import library (@file{libAPI.a} or @file{API.lib}). As previously\n+The import library (@file{libAPI.dll.a} or @file{API.lib}). As previously\n mentioned an import library is a statically linked library containing the\n import table which will be filled at load time to point to the actual\n @file{API.dll} routines. Sometimes you don't have an import library for the\n@@ -29450,7 +29968,8 @@ $ gnatmake my_ada_app -largs -lAPI\n @noindent\n The argument @option{-largs -lAPI} at the end of the @command{gnatmake} command\n tells the GNAT linker to look first for a library named @file{API.lib}\n-(Microsoft-style name) and if not found for a library named @file{libAPI.a}\n+(Microsoft-style name) and if not found for a libraries named\n+@file{libAPI.dll.a}, @file{API.dll.a} or @file{libAPI.a}.\n (GNAT-style name). Note that if the Ada package spec for @file{API.dll}\n contains the following pragma\n \n@@ -29526,10 +30045,11 @@ can have @code{C} or @code{Stdcall} convention.\n \n @noindent\n If a Microsoft-style import library @file{API.lib} or a GNAT-style\n-import library @file{libAPI.a} is available with @file{API.dll} you\n-can skip this section. You can also skip this section if\n-@file{API.dll} is built with GNU tools as in this case it is possible\n-to link directly against the DLL. Otherwise read on.\n+import library @file{libAPI.dll.a} or @file{libAPI.a} is available\n+with @file{API.dll} you can skip this section. You can also skip this\n+section if @file{API.dll} or @file{libAPI.dll} is built with GNU tools\n+as in this case it is possible to link directly against the\n+DLL. Otherwise read on.\n \n @node The Definition File\n @subsubsection The Definition File\n@@ -29633,7 +30153,7 @@ definition file and add the right suffix.\n @end enumerate\n \n @item\n-Build the import library @code{libAPI.a}, using @code{gnatdll}\n+Build the import library @code{libAPI.dll.a}, using @code{gnatdll}\n (@pxref{Using gnatdll}) as follows:\n \n @smallexample\n@@ -29757,7 +30277,13 @@ $ gnatmake main -Iapilib -bargs -shared -largs -Lapilib -lAPI\n @cindex DLLs, building\n \n @noindent\n-There is nothing specific to Windows in this area. @pxref{Library Projects}.\n+There is nothing specific to Windows in the build process.\n+@pxref{Library Projects}.\n+\n+@noindent\n+Due to a system limitation, it is not possible under Windows to create threads\n+when inside the @code{DllMain} routine which is used for auto-initialization\n+of shared libraries, so it is not possible to have library level tasks in SALs.\n \n @node Building DLLs with gnatdll\n @section Building DLLs with gnatdll\n@@ -30155,7 +30681,7 @@ Binder options. Pass @var{opts} to the binder.\n @code{gnatdll} to do anything. The name of the generated import library is\n obtained algorithmically from @var{dllfile} as shown in the following\n example: if @var{dllfile} is @code{xyz.dll}, the import library name is\n-@code{libxyz.a}. The name of the definition file to use (if not specified\n+@code{libxyz.dll.a}. The name of the definition file to use (if not specified\n by option @option{-e}) is obtained algorithmically from @var{dllfile}\n as shown in the following example:\n if @var{dllfile} is @code{xyz.dll}, the definition\n@@ -30227,7 +30753,7 @@ $ gnatdll -d api.dll api.ali\n @end smallexample\n \n @noindent\n-The above command creates two files: @file{libapi.a} (the import\n+The above command creates two files: @file{libapi.dll.a} (the import\n library) and @file{api.dll} (the actual DLL). If you want to create\n only the DLL, just type:\n \n@@ -30305,7 +30831,7 @@ $ gnatlink api -o api.jnk api.exp -mdll\n \n @item\n @code{gnatdll} builds the new export table using the new base file and\n-generates the DLL import library @file{libAPI.a}.\n+generates the DLL import library @file{libAPI.dll.a}.\n \n @smallexample\n @group"}, {"sha": "69676a935631c5fcf90aa3bc607ffe22f53b59db", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 43, "deletions": 28, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c690a2ec7301f5089252456d4fb764787c1a6fdb/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c690a2ec7301f5089252456d4fb764787c1a6fdb/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=c690a2ec7301f5089252456d4fb764787c1a6fdb", "patch": "@@ -386,11 +386,6 @@ package Opt is\n    --  Set to True if -gnato (enable overflow checks) switch is set,\n    --  but not -gnatp.\n \n-   Overflow_Checks_Unsuppressed : Boolean := False;\n-   --  GNAT\n-   --  Set to True if at least one pragma Unsuppress\n-   --  (All_Checks|Overflow_Checks) has been processed.\n-\n    Error_Msg_Line_Length : Nat := 0;\n    --  GNAT\n    --  Records the error message line length limit. If this is set to zero,\n@@ -533,11 +528,6 @@ package Opt is\n    --  GNAT\n    --  True if High Level Optimizer is activated (-gnatH switch)\n \n-   Implementation_Unit_Warnings : Boolean := True;\n-   --  GNAT\n-   --  Set True to active warnings for use of implementation internal units.\n-   --  Can be controlled by use of -gnatwi/-gnatwI.\n-\n    Identifier_Character_Set : Character;\n    --  GNAT\n    --  This variable indicates the character set to be used for identifiers.\n@@ -561,6 +551,23 @@ package Opt is\n    --  default value appropriate to the system (in Osint.Initialize), and then\n    --  reset if a command line switch is used to change the setting.\n \n+   Ignore_Rep_Clauses : Boolean := False;\n+   --  GNAT\n+   --  Set True to ignore all representation clauses. Useful when compiling\n+   --  code from foreign compilers for checking or ASIS purposes. Can be\n+   --  set True by use of -gnatI.\n+\n+   Implementation_Unit_Warnings : Boolean := True;\n+   --  GNAT\n+   --  Set True to active warnings for use of implementation internal units.\n+   --  Can be controlled by use of -gnatwi/-gnatwI.\n+\n+   Implicit_Packing : Boolean := False;\n+   --  GNAT\n+   --  If set True, then a Size attribute clause on an array is allowed to\n+   --  cause implicit packing instead of generating an error message. Set by\n+   --  use of pragma Implicit_Packing.\n+\n    Ineffective_Inline_Warnings : Boolean := False;\n    --  GNAT\n    --  Set True to activate warnings if front-end inlining (-gnatN) is not\n@@ -842,6 +849,11 @@ package Opt is\n    --  GNATBIND\n    --  True if output of list of objects is requested (-O switch set)\n \n+   Overflow_Checks_Unsuppressed : Boolean := False;\n+   --  GNAT\n+   --  Set to True if at least one pragma Unsuppress\n+   --  (All_Checks|Overflow_Checks) has been processed.\n+\n    Persistent_BSS_Mode : Boolean := False;\n    --  GNAT\n    --  True if a Persistent_BSS configuration pragma is in effect, causing\n@@ -1178,12 +1190,12 @@ package Opt is\n    --  variable that is at least partially uninitialized. Set to false to\n    --  suppress such warnings. The default is that such warnings are enabled.\n \n-   Warn_On_Non_Local_Exception : Boolean := True;\n+   Warn_On_Non_Local_Exception : Boolean := False;\n    --  GNAT\n    --  Set to True to generate warnings for non-local exception raises and also\n    --  handlers that can never handle a local raise. This warning is only ever\n    --  generated if pragma Restrictions (No_Exception_Propagation) is set. The\n-   --  default is to generate the warnings if the restriction is set.\n+   --  default is not to generate the warnings even if the restriction is set.\n \n    Warn_On_Obsolescent_Feature : Boolean := False;\n    --  GNAT\n@@ -1375,9 +1387,9 @@ package Opt is\n    --  parameter Internal_Unit is True for an internal or predefined unit, and\n    --  affects the way the switches are set (see above). Main_Unit is true if\n    --  switches are being set for the main unit (this affects setting of the\n-   --  assert/debug pragm switches, which are normally set false by default for\n-   --  an internal unit, except when the internal unit is the main unit, in\n-   --  which case we use the command line settings).\n+   --  assert/debug pragma switches, which are normally set false by default\n+   --  for an internal unit, except when the internal unit is the main unit,\n+   --  in which case we use the command line settings).\n \n    procedure Restore_Opt_Config_Switches (Save : Config_Switches_Type);\n    --  This procedure restores a set of switch values previously saved by a\n@@ -1392,15 +1404,6 @@ package Opt is\n    -- Other Global Flags --\n    ------------------------\n \n-   Static_Dispatch_Tables : constant Boolean;\n-   --  This flag indicates if the backend supports generation of statically\n-   --  allocated dispatch tables. If it is True, then the front end will\n-   --  generate static aggregates for dispatch tables that contain forward\n-   --  references to addresses of subprograms not seen yet, and the back end\n-   --  must be prepared to handle this case. If it is False, then the front\n-   --  end generates assignments to initialize the dispatch table, and there\n-   --  are no such forward references.\n-\n    Expander_Active : Boolean := False;\n    --  A flag that indicates if expansion is active (True) or deactivated\n    --  (False). When expansion is deactivated all calls to expander routines\n@@ -1411,6 +1414,18 @@ package Opt is\n    --  be in the spec of Expander, but it is referenced by Errout, and it\n    --  really seems wrong for Errout to depend on Expander.\n \n+   Static_Dispatch_Tables : Boolean := True;\n+   --  This flag indicates if the backend supports generation of statically\n+   --  allocated dispatch tables. If it is True, then the front end will\n+   --  generate static aggregates for dispatch tables that contain forward\n+   --  references to addresses of subprograms not seen yet, and the back end\n+   --  must be prepared to handle this case. If it is False, then the front\n+   --  end generates assignments to initialize the dispatch table, and there\n+   --  are no such forward references. By default we build statically allocated\n+   --  dispatch tables for all library level tagged types in all platforms.This\n+   --  behavior can be disabled using switch -gnatd.t which will set this flag\n+   --  to False and revert to the previous dynamic behavior.\n+\n    -----------------------\n    -- Tree I/O Routines --\n    -----------------------\n@@ -1474,6 +1489,10 @@ private\n    --  not let client code in the compiler test GCC_Version directly, but\n    --  instead use deferred constants for relevant feature tags.\n \n+   --  Note: there currently are no such constants defined in this section,\n+   --  since the compiler front end is currently entirely independent of the\n+   --  GCC version, which is a desirable state of affairs.\n+\n    function get_gcc_version return Int;\n    pragma Import (C, get_gcc_version, \"get_gcc_version\");\n \n@@ -1482,8 +1501,4 @@ private\n    --  Indicates which version of gcc is in use (3 = 3.x, 4 = 4.x). Note that\n    --  gcc 2.8.1 (which used to be a value of 2) is no longer supported.\n \n-   Static_Dispatch_Tables : constant Boolean := GCC_Version >= 4;\n-   --  GCC version 4 can handle the static dispatch tables, but not version 3.\n-   --  Also we need -funit-at-a-time, which should also be tested here ???\n-\n end Opt;"}, {"sha": "1001f642e5feb062db9056361b288421d0dd1509", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c690a2ec7301f5089252456d4fb764787c1a6fdb/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c690a2ec7301f5089252456d4fb764787c1a6fdb/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=c690a2ec7301f5089252456d4fb764787c1a6fdb", "patch": "@@ -1054,6 +1054,7 @@ begin\n            Pragma_Atomic                        |\n            Pragma_Atomic_Components             |\n            Pragma_Attach_Handler                |\n+           Pragma_Check_Name                    |\n            Pragma_CIL_Constructor               |\n            Pragma_Compile_Time_Error            |\n            Pragma_Compile_Time_Warning          |\n@@ -1091,6 +1092,7 @@ begin\n            Pragma_Finalize_Storage_Only         |\n            Pragma_Float_Representation          |\n            Pragma_Ident                         |\n+           Pragma_Implicit_Packing              |\n            Pragma_Import                        |\n            Pragma_Import_Exception              |\n            Pragma_Import_Function               |"}, {"sha": "53d9bf248b8f76153a18aee499c635122e7fa45e", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 70, "deletions": 37, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c690a2ec7301f5089252456d4fb764787c1a6fdb/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c690a2ec7301f5089252456d4fb764787c1a6fdb/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=c690a2ec7301f5089252456d4fb764787c1a6fdb", "patch": "@@ -458,7 +458,7 @@ package body Sem_Ch13 is\n \n       if Warn_On_Obsolescent_Feature then\n          Error_Msg_N\n-           (\"at clause is an obsolescent feature ('R'M 'J.7(2))?\", N);\n+           (\"at clause is an obsolescent feature (RM J.7(2))?\", N);\n          Error_Msg_N\n            (\"\\use address attribute definition clause instead?\", N);\n       end if;\n@@ -634,6 +634,11 @@ package body Sem_Ch13 is\n    --  Start of processing for Analyze_Attribute_Definition_Clause\n \n    begin\n+      if Ignore_Rep_Clauses then\n+         Rewrite (N, Make_Null_Statement (Sloc (N)));\n+         return;\n+      end if;\n+\n       Analyze (Nam);\n       Ent := Entity (Nam);\n \n@@ -752,7 +757,7 @@ package body Sem_Ch13 is\n                if Warn_On_Obsolescent_Feature then\n                   Error_Msg_N\n                     (\"attaching interrupt to task entry is an \" &\n-                     \"obsolescent feature ('R'M 'J.7.1)?\", N);\n+                     \"obsolescent feature (RM J.7.1)?\", N);\n                   Error_Msg_N\n                     (\"\\use interrupt procedure instead?\", N);\n                end if;\n@@ -810,7 +815,7 @@ package body Sem_Ch13 is\n                   elsif Present (Renamed_Object (U_Ent)) then\n                      Error_Msg_N\n                        (\"address clause not allowed\"\n-                          & \" for a renaming declaration ('R'M 13.1(6))\", Nam);\n+                          & \" for a renaming declaration (RM 13.1(6))\", Nam);\n \n                   --  Imported variables can have an address clause, but then\n                   --  the import is pretty meaningless except to suppress\n@@ -1060,6 +1065,15 @@ package body Sem_Ch13 is\n                Error_Msg_N\n                  (\"% attribute unsupported in this configuration\", Nam);\n             end if;\n+\n+            if not Is_Library_Level_Entity (U_Ent) then\n+               Error_Msg_NE\n+                 (\"?non-unique external tag supplied for &\", N, U_Ent);\n+               Error_Msg_N\n+                 (\"?\\same external tag applies to all subprogram calls\", N);\n+               Error_Msg_N\n+                 (\"?\\corresponding internal tag cannot be obtained\", N);\n+            end if;\n          end External_Tag;\n \n          -----------\n@@ -1452,7 +1466,7 @@ package body Sem_Ch13 is\n                if Warn_On_Obsolescent_Feature then\n                   Error_Msg_N\n                     (\"storage size clause for task is an \" &\n-                     \"obsolescent feature ('R'M 'J.9)?\", N);\n+                     \"obsolescent feature (RM J.9)?\", N);\n                   Error_Msg_N\n                     (\"\\use Storage_Size pragma instead?\", N);\n                end if;\n@@ -1721,6 +1735,10 @@ package body Sem_Ch13 is\n       Max : Uint;\n \n    begin\n+      if Ignore_Rep_Clauses then\n+         return;\n+      end if;\n+\n       --  First some basic error checks\n \n       Find_Type (Ident);\n@@ -2022,6 +2040,10 @@ package body Sem_Ch13 is\n       --  Points to N_Pragma node if Complete_Representation pragma present\n \n    begin\n+      if Ignore_Rep_Clauses then\n+         return;\n+      end if;\n+\n       Find_Type (Ident);\n       Rectype := Entity (Ident);\n \n@@ -2075,7 +2097,7 @@ package body Sem_Ch13 is\n \n             if Warn_On_Obsolescent_Feature then\n                Error_Msg_N\n-                 (\"mod clause is an obsolescent feature ('R'M 'J.8)?\", N);\n+                 (\"mod clause is an obsolescent feature (RM J.8)?\", N);\n                Error_Msg_N\n                  (\"\\use alignment attribute definition clause instead?\", N);\n             end if;\n@@ -2084,10 +2106,10 @@ package body Sem_Ch13 is\n                Analyze_List (P);\n             end if;\n \n-            --  In ASIS_Mode mode, expansion is disabled, but we must\n-            --  convert the Mod clause into an alignment clause anyway, so\n-            --  that the back-end can compute and back-annotate properly the\n-            --  size and alignment of types that may include this record.\n+            --  In ASIS_Mode mode, expansion is disabled, but we must convert\n+            --  the Mod clause into an alignment clause anyway, so that the\n+            --  back-end can compute and back-annotate properly the size and\n+            --  alignment of types that may include this record.\n \n             --  This seems dubious, this destroys the source tree in a manner\n             --  not detectable by ASIS ???\n@@ -2115,8 +2137,8 @@ package body Sem_Ch13 is\n          end;\n       end if;\n \n-      --  Clear any existing component clauses for the type (this happens\n-      --  with derived types, where we are now overriding the original)\n+      --  Clear any existing component clauses for the type (this happens with\n+      --  derived types, where we are now overriding the original)\n \n       Comp := First_Component_Or_Discriminant (Rectype);\n       while Present (Comp) loop\n@@ -2587,7 +2609,7 @@ package body Sem_Ch13 is\n             Next_Component_Or_Discriminant (Comp);\n          end loop;\n \n-         --  If no Complete_Representation pragma, warn if missing components\n+      --  If no Complete_Representation pragma, warn if missing components\n \n       elsif Warn_On_Unrepped_Components\n         and then not Warnings_Off (Rectype)\n@@ -2713,7 +2735,7 @@ package body Sem_Ch13 is\n                            Nod, U_Ent);\n                Error_Msg_NE\n                  (\"address for& cannot\" &\n-                    \" depend on another address clause! ('R'M 13.1(22))!\",\n+                    \" depend on another address clause! (RM 13.1(22))!\",\n                   Nod, U_Ent);\n \n             elsif In_Same_Source_Unit (Entity (Nod), U_Ent)\n@@ -2725,7 +2747,7 @@ package body Sem_Ch13 is\n                Error_Msg_Name_1 := Chars (Entity (Nod));\n                Error_Msg_Name_2 := Chars (U_Ent);\n                Error_Msg_N\n-                 (\"\\% must be defined before % ('R'M 13.1(22))!\",\n+                 (\"\\% must be defined before % (RM 13.1(22))!\",\n                   Nod);\n             end if;\n \n@@ -2746,7 +2768,7 @@ package body Sem_Ch13 is\n                      Nod, U_Ent);\n                   Error_Msg_N\n                     (\"\\address cannot depend on component\" &\n-                     \" of discriminated record ('R'M 13.1(22))!\",\n+                     \" of discriminated record (RM 13.1(22))!\",\n                      Nod);\n                else\n                   Check_At_Constant_Address (Prefix (Nod));\n@@ -2859,7 +2881,7 @@ package body Sem_Ch13 is\n                      Error_Msg_Name_1 := Chars (Ent);\n                      Error_Msg_Name_2 := Chars (U_Ent);\n                      Error_Msg_N\n-                       (\"\\% must be defined before % ('R'M 13.1(22))!\",\n+                       (\"\\% must be defined before % (RM 13.1(22))!\",\n                         Nod);\n                   end if;\n \n@@ -2875,11 +2897,11 @@ package body Sem_Ch13 is\n                      Error_Msg_Name_1 := Chars (Ent);\n                      Error_Msg_N\n                        (\"\\reference to variable% not allowed\"\n-                          & \" ('R'M 13.1(22))!\", Nod);\n+                          & \" (RM 13.1(22))!\", Nod);\n                   else\n                      Error_Msg_N\n                        (\"non-static expression not allowed\"\n-                          & \" ('R'M 13.1(22))!\", Nod);\n+                          & \" (RM 13.1(22))!\", Nod);\n                   end if;\n                end if;\n \n@@ -2987,7 +3009,7 @@ package body Sem_Ch13 is\n                      Nod, U_Ent);\n \n                   Error_Msg_NE\n-                    (\"\\function & is not pure ('R'M 13.1(22))!\",\n+                    (\"\\function & is not pure (RM 13.1(22))!\",\n                      Nod, Entity (Name (Nod)));\n \n                else\n@@ -3002,7 +3024,7 @@ package body Sem_Ch13 is\n                  (\"invalid address clause for initialized object &!\",\n                   Nod, U_Ent);\n                Error_Msg_NE\n-                 (\"\\must be constant defined before& ('R'M 13.1(22))!\",\n+                 (\"\\must be constant defined before& (RM 13.1(22))!\",\n                   Nod, U_Ent);\n          end case;\n       end Check_Expr_Constants;\n@@ -4005,6 +4027,17 @@ package body Sem_Ch13 is\n          return;\n       end if;\n \n+      --  Warn if conversion between two different convention pointers\n+\n+      if Is_Access_Type (Target)\n+        and then Is_Access_Type (Source)\n+        and then Convention (Target) /= Convention (Source)\n+        and then Warn_On_Unchecked_Conversion\n+      then\n+         Error_Msg_N\n+           (\"?conversion between pointers with different conventions!\", N);\n+      end if;\n+\n       --  Make entry in unchecked conversion table for later processing\n       --  by Validate_Unchecked_Conversions, which will check sizes and\n       --  alignments (using values set by the back-end where possible).\n@@ -4093,7 +4126,7 @@ package body Sem_Ch13 is\n \n                if Source_Siz /= Target_Siz then\n                   Error_Msg_N\n-                    (\"types for unchecked conversion have different sizes?\",\n+                    (\"?types for unchecked conversion have different sizes!\",\n                      Enode);\n \n                   if All_Errors_Mode then\n@@ -4111,44 +4144,44 @@ package body Sem_Ch13 is\n                      then\n                         if Source_Siz > Target_Siz then\n                            Error_Msg_N\n-                             (\"\\^ high order bits of source will be ignored?\",\n+                             (\"\\?^ high order bits of source will be ignored!\",\n                               Enode);\n \n                         elsif Is_Unsigned_Type (Source) then\n                            Error_Msg_N\n-                             (\"\\source will be extended with ^ high order \" &\n-                              \"zero bits?\", Enode);\n+                             (\"\\?source will be extended with ^ high order \" &\n+                              \"zero bits?!\", Enode);\n \n                         else\n                            Error_Msg_N\n-                             (\"\\source will be extended with ^ high order \" &\n-                              \"sign bits?\",\n+                             (\"\\?source will be extended with ^ high order \" &\n+                              \"sign bits!\",\n                               Enode);\n                         end if;\n \n                      elsif Source_Siz < Target_Siz then\n                         if Is_Discrete_Type (Target) then\n                            if Bytes_Big_Endian then\n                               Error_Msg_N\n-                                (\"\\target value will include ^ undefined \" &\n-                                 \"low order bits?\",\n+                                (\"\\?target value will include ^ undefined \" &\n+                                 \"low order bits!\",\n                                  Enode);\n                            else\n                               Error_Msg_N\n-                                (\"\\target value will include ^ undefined \" &\n-                                 \"high order bits?\",\n+                                (\"\\?target value will include ^ undefined \" &\n+                                 \"high order bits!\",\n                                  Enode);\n                            end if;\n \n                         else\n                            Error_Msg_N\n-                             (\"\\^ trailing bits of target value will be \" &\n-                              \"undefined?\", Enode);\n+                             (\"\\?^ trailing bits of target value will be \" &\n+                              \"undefined!\", Enode);\n                         end if;\n \n                      else pragma Assert (Source_Siz > Target_Siz);\n                         Error_Msg_N\n-                          (\"\\^ trailing bits of source will be ignored?\",\n+                          (\"\\?^ trailing bits of source will be ignored!\",\n                            Enode);\n                      end if;\n                   end if;\n@@ -4185,13 +4218,13 @@ package body Sem_Ch13 is\n                            Error_Msg_Uint_2 := Source_Align;\n                            Error_Msg_Node_2 := D_Source;\n                            Error_Msg_NE\n-                             (\"alignment of & (^) is stricter than \" &\n-                              \"alignment of & (^)?\", Enode, D_Target);\n+                             (\"?alignment of & (^) is stricter than \" &\n+                              \"alignment of & (^)!\", Enode, D_Target);\n \n                            if All_Errors_Mode then\n                               Error_Msg_N\n-                                (\"\\resulting access value may have invalid \" &\n-                                 \"alignment?\", Enode);\n+                                (\"\\?resulting access value may have invalid \" &\n+                                 \"alignment!\", Enode);\n                            end if;\n                         end if;\n                      end;"}, {"sha": "e58cfc34808e5e8d853f99c346086ed431148432", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 252, "deletions": 126, "changes": 378, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c690a2ec7301f5089252456d4fb764787c1a6fdb/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c690a2ec7301f5089252456d4fb764787c1a6fdb/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=c690a2ec7301f5089252456d4fb764787c1a6fdb", "patch": "@@ -32,6 +32,7 @@\n \n with Atree;    use Atree;\n with Casing;   use Casing;\n+with Checks;   use Checks;\n with Csets;    use Csets;\n with Debug;    use Debug;\n with Einfo;    use Einfo;\n@@ -2106,9 +2107,9 @@ package body Sem_Prag is\n          begin\n             --  Ada 2005 (AI-430): Check invalid attempt to change convention\n             --  for an overridden dispatching operation. Technically this is\n-            --  an amendment and should only be done in Ada 2005 mode.\n-            --  However, this is clearly a mistake, since the problem that is\n-            --  addressed by this AI is that there is a clear gap in the RM!\n+            --  an amendment and should only be done in Ada 2005 mode. However,\n+            --  this is clearly a mistake, since the problem that is addressed\n+            --  by this AI is that there is a clear gap in the RM!\n \n             if Is_Dispatching_Operation (E)\n               and then Present (Overridden_Operation (E))\n@@ -2138,10 +2139,10 @@ package body Sem_Prag is\n                Set_Convention (Class_Wide_Type (E), C);\n             end if;\n \n-            --  If the entity is a record type, then check for special case\n-            --  of C_Pass_By_Copy, which is treated the same as C except that\n-            --  the special record flag is set. This convention is also only\n-            --  permitted on record types (see AI95-00131).\n+            --  If the entity is a record type, then check for special case of\n+            --  C_Pass_By_Copy, which is treated the same as C except that the\n+            --  special record flag is set. This convention is only permitted\n+            --  on record types (see AI95-00131).\n \n             if Cname = Name_C_Pass_By_Copy then\n                if Is_Record_Type (E) then\n@@ -2193,11 +2194,11 @@ package body Sem_Prag is\n          elsif Is_Convention_Name (Cname) then\n             C := Get_Convention_Id (Chars (Expression (Arg1)));\n \n-         --  In DEC VMS, it seems that there is an undocumented feature\n-         --  that any unrecognized convention is treated as the default,\n-         --  which for us is convention C. It does not seem so terrible\n-         --  to do this unconditionally, silently in the VMS case, and\n-         --  with a warning in the non-VMS case.\n+         --  In DEC VMS, it seems that there is an undocumented feature that\n+         --  any unrecognized convention is treated as the default, which for\n+         --  us is convention C. It does not seem so terrible to do this\n+         --  unconditionally, silently in the VMS case, and with a warning\n+         --  in the non-VMS case.\n \n          else\n             if Warn_On_Export_Import and not OpenVMS_On_Target then\n@@ -2225,9 +2226,9 @@ package body Sem_Prag is\n \n          E := Entity (Id);\n \n-         --  Go to renamed subprogram if present, since convention applies\n-         --  to the actual renamed entity, not to the renaming entity.\n-         --  If subprogram is inherited, go to parent subprogram.\n+         --  Go to renamed subprogram if present, since convention applies to\n+         --  the actual renamed entity, not to the renaming entity. If the\n+         --  subprogram is inherited, go to parent subprogram.\n \n          if Is_Subprogram (E)\n            and then Present (Alias (E))\n@@ -2581,9 +2582,8 @@ package body Sem_Prag is\n             then\n                Error_Msg_Sloc := Sloc (Def_Id);\n                Error_Pragma_Arg\n-                 (\"no initialization allowed for declaration of& #\",\n-                  \"\\imported entities cannot be initialized ('R'M' 'B.1(24))\",\n-                  Arg1);\n+                 (\"imported entities cannot be initialized (RM B.1(24))\",\n+                  \"\\no initialization allowed for & declared#\", Arg1);\n             else\n                Set_Imported (Def_Id);\n                Note_Possible_Modification (Arg_Internal);\n@@ -2847,9 +2847,9 @@ package body Sem_Prag is\n \n          --  Here we have the Export case which can set the entity as exported\n \n-         --  But does not do so if the specified external name is null,\n-         --  since that is taken as a signal in DEC Ada 83 (with which\n-         --  we want to be compatible) to request no external name.\n+         --  But does not do so if the specified external name is null, since\n+         --  that is taken as a signal in DEC Ada 83 (with which we want to be\n+         --  compatible) to request no external name.\n \n          elsif Nkind (Arg_External) = N_String_Literal\n            and then String_Length (Strval (Arg_External)) = 0\n@@ -2942,7 +2942,6 @@ package body Sem_Prag is\n \n                   if Present (Expressions (Arg_Mechanism)) then\n                      Mname := First (Expressions (Arg_Mechanism));\n-\n                      while Present (Mname) loop\n                         if No (Formal) then\n                            Error_Pragma_Arg\n@@ -2959,7 +2958,6 @@ package body Sem_Prag is\n \n                   if Present (Component_Associations (Arg_Mechanism)) then\n                      Massoc := First (Component_Associations (Arg_Mechanism));\n-\n                      while Present (Massoc) loop\n                         Choice := First (Choices (Massoc));\n \n@@ -3121,7 +3119,7 @@ package body Sem_Prag is\n                Error_Msg_Sloc := Sloc (Def_Id);\n                Error_Pragma_Arg\n                  (\"no initialization allowed for declaration of& #\",\n-                  \"\\imported entities cannot be initialized ('R'M' 'B.1(24))\",\n+                  \"\\imported entities cannot be initialized (RM B.1(24))\",\n                   Arg2);\n \n             else\n@@ -3243,9 +3241,9 @@ package body Sem_Prag is\n                                              N_Subprogram_Renaming_Declaration\n                      then\n                         Error_Msg_Sloc := Sloc (Def_Id);\n-                        Error_Msg_NE (\"cannot import&#,\" &\n-                           \" already completed by a renaming\",\n-                           N, Def_Id);\n+                        Error_Msg_NE\n+                          (\"cannot import&, renaming already provided for \" &\n+                           \"declaration #\", N, Def_Id);\n                      end if;\n                   end;\n \n@@ -3698,7 +3696,6 @@ package body Sem_Prag is\n                     and then Ekind (Scope (E)) = E_Package\n                   then\n                      Par := Parent (E);\n-\n                      while Present (Par) loop\n                         if Nkind (Par) = N_Package_Body then\n                            Error_Msg_Sloc  := Sloc (E);\n@@ -3974,18 +3971,20 @@ package body Sem_Prag is\n          --------------------------------\n \n          procedure Suppress_Unsuppress_Echeck (E : Entity_Id; C : Check_Id) is\n-            ESR : constant Entity_Check_Suppress_Record :=\n-                    (Entity   => E,\n-                     Check    => C,\n-                     Suppress => Suppress_Case);\n-\n          begin\n             Set_Checks_May_Be_Suppressed (E);\n \n             if In_Package_Spec then\n-               Global_Entity_Suppress.Append (ESR);\n+               Push_Global_Suppress_Stack_Entry\n+                 (Entity   => E,\n+                  Check    => C,\n+                  Suppress => Suppress_Case);\n+\n             else\n-               Local_Entity_Suppress.Append (ESR);\n+               Push_Local_Suppress_Stack_Entry\n+                 (Entity   => E,\n+                  Check    => C,\n+                  Suppress => Suppress_Case);\n             end if;\n \n             --  If this is a first subtype, and the base type is distinct,\n@@ -4013,11 +4012,11 @@ package body Sem_Prag is\n          Check_No_Identifier (Arg1);\n          Check_Arg_Is_Identifier (Arg1);\n \n-         if not Is_Check_Name (Chars (Expression (Arg1))) then\n+         C := Get_Check_Id (Chars (Expression (Arg1)));\n+\n+         if C = No_Check_Id then\n             Error_Pragma_Arg\n               (\"argument of pragma% is not valid check name\", Arg1);\n-         else\n-            C := Get_Check_Id (Chars (Expression (Arg1)));\n          end if;\n \n          if not Suppress_Case\n@@ -4034,35 +4033,34 @@ package body Sem_Prag is\n \n             if C = All_Checks then\n \n-               --  For All_Checks, we set all specific checks with the\n-               --  exception of Elaboration_Check, which is handled specially\n-               --  because of not wanting All_Checks to have the effect of\n-               --  deactivating static elaboration order processing.\n+               --  For All_Checks, we set all specific predefined checks with\n+               --  the exception of Elaboration_Check, which is handled\n+               --  specially because of not wanting All_Checks to have the\n+               --  effect of deactivating static elaboration order processing.\n \n                for J in Scope_Suppress'Range loop\n                   if J /= Elaboration_Check then\n                      Scope_Suppress (J) := Suppress_Case;\n                   end if;\n                end loop;\n \n-            --  If not All_Checks, just set appropriate entry. Note that we\n-            --  will set Elaboration_Check if this is explicitly specified.\n+            --  If not All_Checks, and predefined check, then set appropriate\n+            --  scope entry. Note that we will set Elaboration_Check if this\n+            --  is explicitly specified.\n \n-            else\n+            elsif C in Predefined_Check_Id then\n                Scope_Suppress (C) := Suppress_Case;\n             end if;\n \n-            --  Also make an entry in the Local_Entity_Suppress table. See\n-            --  extended description in the package spec of Sem for details.\n+            --  Also make an entry in the Local_Entity_Suppress table\n \n-            Local_Entity_Suppress.Append\n-              ((Entity   => Empty,\n-                Check    => C,\n-                Suppress => Suppress_Case));\n+            Push_Local_Suppress_Stack_Entry\n+              (Entity   => Empty,\n+               Check    => C,\n+               Suppress => Suppress_Case);\n \n-         --  Case of two arguments present, where the check is\n-         --  suppressed for a specified entity (given as the second\n-         --  argument of the pragma)\n+         --  Case of two arguments present, where the check is suppressed for\n+         --  a specified entity (given as the second argument of the pragma)\n \n          else\n             Check_Optional_Identifier (Arg2, Name_On);\n@@ -4091,7 +4089,7 @@ package body Sem_Prag is\n               and then Scope (E) /= Current_Scope\n             then\n                Error_Pragma_Arg\n-                 (\"entity in pragma% is not in package spec ('R'M 11.5(7))\",\n+                 (\"entity in pragma% is not in package spec (RM 11.5(7))\",\n                   Arg2);\n             end if;\n \n@@ -4277,18 +4275,23 @@ package body Sem_Prag is\n \n       procedure Set_Imported (E : Entity_Id) is\n       begin\n-         Error_Msg_Sloc  := Sloc (E);\n+         --  Error message if already imported or exported\n \n          if Is_Exported (E) or else Is_Imported (E) then\n-            Error_Msg_NE (\"import of& declared# not allowed\", N, E);\n-\n             if Is_Exported (E) then\n-               Error_Msg_N (\"\\entity was previously exported\", N);\n+               Error_Msg_NE (\"entity& was previously exported\", N, E);\n             else\n-               Error_Msg_N (\"\\entity was previously imported\", N);\n+               Error_Msg_NE (\"entity& was previously imported\", N, E);\n             end if;\n \n-            Error_Pragma (\"\\(pragma% applies to all previous entities)\");\n+            Error_Msg_Name_1 := Chars (N);\n+            Error_Msg_N\n+              (\"\\(pragma% applies to all previous entities)\", N);\n+\n+            Error_Msg_Sloc  := Sloc (E);\n+            Error_Msg_NE (\"\\import not allowed for& declared#\", N, E);\n+\n+         --  Here if not previously imported or exported, OK to import\n \n          else\n             Set_Is_Imported (E);\n@@ -4515,16 +4518,32 @@ package body Sem_Prag is\n    --  Start of processing for Analyze_Pragma\n \n    begin\n+      --  Deal with unrecognized pragma\n+\n       if not Is_Pragma_Name (Chars (N)) then\n          if Warn_On_Unrecognized_Pragma then\n-            Error_Pragma (\"unrecognized pragma%?\");\n-         else\n-            return;\n+            Error_Msg_Name_1 := Chars (N);\n+            Error_Msg_N (\"?unrecognized pragma%!\", N);\n+\n+            for PN in First_Pragma_Name .. Last_Pragma_Name loop\n+               if Is_Bad_Spelling_Of\n+                 (Get_Name_String (Chars (N)),\n+                  Get_Name_String (PN))\n+               then\n+                  Error_Msg_Name_1 := PN;\n+                  Error_Msg_N (\"\\?possible misspelling of %!\", N);\n+                  exit;\n+               end if;\n+            end loop;\n          end if;\n-      else\n-         Prag_Id := Get_Pragma_Id (Chars (N));\n+\n+         return;\n       end if;\n \n+      --  Here to start processing for recognized pragma\n+\n+      Prag_Id := Get_Pragma_Id (Chars (N));\n+\n       --  Preset arguments\n \n       Arg1 := Empty;\n@@ -4598,9 +4617,25 @@ package body Sem_Prag is\n \n          when Pragma_Ada_83 =>\n             GNAT_Pragma;\n+            Check_Arg_Count (0);\n+\n+            --  We really should check unconditionally for proper configuration\n+            --  pragma placement, since we really don't want mixed Ada modes\n+            --  within a single unit, and the GNAT reference manual has always\n+            --  said this was a configuration pragma, but we did not check and\n+            --  are hesitant to add the check now.\n+\n+            --  However, we really cannot tolerate mixing Ada 2005 with Ada 83\n+            --  or Ada 95, so we must check if we are in Ada 2005 mode.\n+\n+            if Ada_Version >= Ada_05 then\n+               Check_Valid_Configuration_Pragma;\n+            end if;\n+\n+            --  Now set Ada 83 mode\n+\n             Ada_Version := Ada_83;\n             Ada_Version_Explicit := Ada_Version;\n-            Check_Arg_Count (0);\n \n          ------------\n          -- Ada_95 --\n@@ -4613,9 +4648,25 @@ package body Sem_Prag is\n \n          when Pragma_Ada_95 =>\n             GNAT_Pragma;\n+            Check_Arg_Count (0);\n+\n+            --  We really should check unconditionally for proper configuration\n+            --  pragma placement, since we really don't want mixed Ada modes\n+            --  within a single unit, and the GNAT reference manual has always\n+            --  said this was a configuration pragma, but we did not check and\n+            --  are hesitant to add the check now.\n+\n+            --  However, we really cannot tolerate mixing Ada 2005 with Ada 83\n+            --  or Ada 95, so we must check if we are in Ada 2005 mode.\n+\n+            if Ada_Version >= Ada_05 then\n+               Check_Valid_Configuration_Pragma;\n+            end if;\n+\n+            --  Now set Ada 95 mode\n+\n             Ada_Version := Ada_95;\n             Ada_Version_Explicit := Ada_Version;\n-            Check_Arg_Count (0);\n \n          ---------------------\n          -- Ada_05/Ada_2005 --\n@@ -4648,6 +4699,17 @@ package body Sem_Prag is\n \n             else\n                Check_Arg_Count (0);\n+\n+               --  For Ada_2005 we unconditionally enforce the documented\n+               --  configuration pragma placement, since we do not want to\n+               --  tolerate mixed modes in a unit involving Ada 2005. That\n+               --  would cause real difficulties for those cases where there\n+               --  are incompatibilities between Ada 95 and Ada 2005.\n+\n+               Check_Valid_Configuration_Pragma;\n+\n+               --  Now set Ada 2005 mode\n+\n                Ada_Version := Ada_05;\n                Ada_Version_Explicit := Ada_05;\n             end if;\n@@ -4702,10 +4764,11 @@ package body Sem_Prag is\n             Check_Arg_Is_Identifier (Arg1);\n \n             declare\n-               Arg : Node_Id := Arg2;\n+               Arg : Node_Id;\n                Exp : Node_Id;\n \n             begin\n+               Arg := Arg2;\n                while Present (Arg) loop\n                   Exp := Expression (Arg);\n                   Analyze (Exp);\n@@ -5174,6 +5237,40 @@ package body Sem_Prag is\n             end if;\n          end C_Pass_By_Copy;\n \n+         ----------------\n+         -- Check_Name --\n+         ----------------\n+\n+         --  pragma Check_Name (check_IDENTIFIER);\n+\n+         when Pragma_Check_Name =>\n+            Check_No_Identifiers;\n+            GNAT_Pragma;\n+            Check_Valid_Configuration_Pragma;\n+            Check_Arg_Count (1);\n+            Check_Arg_Is_Identifier (Arg1);\n+\n+            declare\n+               Nam : constant Name_Id := Chars (Expression (Arg1));\n+\n+            begin\n+               for J in Check_Names.First .. Check_Names.Last loop\n+                  if Check_Names.Table (J) = Nam then\n+                     return;\n+                  end if;\n+               end loop;\n+\n+               Check_Names.Append (Nam);\n+            end;\n+\n+         ---------------------\n+         -- CIL_Constructor --\n+         ---------------------\n+\n+         --  pragma CIL_Constructor ([Entity =>] LOCAL_NAME);\n+\n+         --  Processing for this pragma is shared with Java_Constructor\n+\n          -------------\n          -- Comment --\n          -------------\n@@ -5275,6 +5372,13 @@ package body Sem_Prag is\n \n             else\n                Set_Has_Complex_Representation (Base_Type (E));\n+\n+               --  We need to treat the type has having a non-standard\n+               --  representation, for back-end purposes, even though in\n+               --  general a complex will have the default representation\n+               --  of a record with two real components.\n+\n+               Set_Has_Non_Standard_Rep (Base_Type (E));\n             end if;\n          end Complex_Representation;\n \n@@ -5435,7 +5539,7 @@ package body Sem_Prag is\n             Check_Optional_Identifier (Arg1, Name_Name);\n             Check_Optional_Identifier (Arg2, Name_Convention);\n             Check_Arg_Is_Identifier (Arg1);\n-            Check_Arg_Is_Identifier (Arg1);\n+            Check_Arg_Is_Identifier (Arg2);\n             Idnam := Chars (Expression (Arg1));\n             Cname := Chars (Expression (Arg2));\n \n@@ -5850,7 +5954,6 @@ package body Sem_Prag is\n             Arg := Arg1;\n             Outr : while Present (Arg) loop\n                Citem := First (List_Containing (N));\n-\n                Innr : while Citem /= N loop\n                   if Nkind (Citem) = N_With_Clause\n                     and then Same_Name (Name (Citem), Expression (Arg))\n@@ -6388,7 +6491,7 @@ package body Sem_Prag is\n                      null;\n                   else\n                      Error_Msg_Sloc := Sloc (System_Extend_Pragma_Arg);\n-                     Error_Pragma (\"pragma% conflicts with that at#\");\n+                     Error_Pragma (\"pragma% conflicts with that #\");\n                   end if;\n \n                else\n@@ -6747,6 +6850,17 @@ package body Sem_Prag is\n             end;\n          end Ident;\n \n+         -----------------------\n+         -- Implicit_Packing --\n+         -----------------------\n+\n+         --  pragma Implicit_Packing;\n+\n+         when Pragma_Implicit_Packing =>\n+            GNAT_Pragma;\n+            Check_Arg_Count (0);\n+            Implicit_Packing := True;\n+\n          ------------\n          -- Import --\n          ------------\n@@ -7435,6 +7549,8 @@ package body Sem_Prag is\n \n          --  pragma Java_Constructor ([Entity =>] LOCAL_NAME);\n \n+         --  Also handles pragma CIL_Constructor\n+\n          when Pragma_CIL_Constructor | Pragma_Java_Constructor =>\n          Java_Constructor : declare\n             Id         : Entity_Id;\n@@ -7660,7 +7776,7 @@ package body Sem_Prag is\n                   --  differences in processing between Link_With\n                   --  and Linker_Options).\n \n-                  declare\n+                  Arg_Store : declare\n                      C : constant Char_Code := Get_Char_Code (' ');\n                      S : constant String_Id :=\n                            Strval (Expr_Value_S (Expression (Arg)));\n@@ -7670,13 +7786,19 @@ package body Sem_Prag is\n                      procedure Skip_Spaces;\n                      --  Advance F past any spaces\n \n+                     -----------------\n+                     -- Skip_Spaces --\n+                     -----------------\n+\n                      procedure Skip_Spaces is\n                      begin\n                         while F <= L and then Get_String_Char (S, F) = C loop\n                            F := F + 1;\n                         end loop;\n                      end Skip_Spaces;\n \n+                  --  Start of processing for Arg_Store\n+\n                   begin\n                      Skip_Spaces; -- skip leading spaces\n \n@@ -7695,7 +7817,7 @@ package body Sem_Prag is\n                            F := F + 1;\n                         end if;\n                      end loop;\n-                  end;\n+                  end Arg_Store;\n \n                   Arg := Next (Arg);\n \n@@ -7986,12 +8108,13 @@ package body Sem_Prag is\n          -- Main --\n          ----------\n \n-         --  pragma Main_Storage\n-         --   (MAIN_STORAGE_OPTION [, MAIN_STORAGE_OPTION]);\n+         --  pragma Main\n+         --   (MAIN_OPTION [, MAIN_OPTION]);\n \n-         --  MAIN_STORAGE_OPTION ::=\n-         --    [WORKING_STORAGE =>] static_SIMPLE_EXPRESSION\n-         --  | [TOP_GUARD =>] static_SIMPLE_EXPRESSION\n+         --  MAIN_OPTION ::=\n+         --    [STACK_SIZE              =>] static_integer_EXPRESSION\n+         --  | [TASK_STACK_SIZE_DEFAULT =>] static_integer_EXPRESSION\n+         --  | [TIME_SLICING_ENABLED    =>] static_boolean_EXPRESSION\n \n          when Pragma_Main => Main : declare\n             Args  : Args_List (1 .. 3);\n@@ -8507,7 +8630,7 @@ package body Sem_Prag is\n                  or else Is_Atomic (Component_Type (Typ))\n                then\n                   Error_Pragma\n-                       (\"?pragma% ignored, cannot pack atomic components\");\n+                    (\"?pragma% ignored, cannot pack atomic components\");\n                end if;\n \n                --  If we had an explicit component size given, then we do not\n@@ -8615,6 +8738,14 @@ package body Sem_Prag is\n             end if;\n \n             Set_Known_To_Have_Preelab_Init (Ent);\n+\n+            if Has_Pragma_Preelab_Init (Ent)\n+              and then Warn_On_Redundant_Constructs\n+            then\n+               Error_Pragma (\"?duplicate pragma%!\");\n+            else\n+               Set_Has_Pragma_Preelab_Init (Ent);\n+            end if;\n          end Preelab_Init;\n \n          -------------\n@@ -8956,8 +9087,9 @@ package body Sem_Prag is\n                   then\n                      Error_Msg_Sloc :=\n                        Specific_Dispatching.Table (J).Pragma_Loc;\n-                     Error_Pragma (\"priority range overlaps with\" &\n-                                   \" Priority_Specific_Dispatching#\");\n+                        Error_Pragma\n+                          (\"priority range overlaps with \"\n+                           & \"Priority_Specific_Dispatching#\");\n                   end if;\n                end loop;\n \n@@ -8966,17 +9098,19 @@ package body Sem_Prag is\n \n                if Task_Dispatching_Policy /= ' ' then\n                   Error_Msg_Sloc := Task_Dispatching_Policy_Sloc;\n-                  Error_Pragma (\"Priority_Specific_Dispatching incompatible\" &\n-                                \" with Task_Dispatching_Policy#\");\n+                     Error_Pragma\n+                       (\"Priority_Specific_Dispatching incompatible \"\n+                        & \"with Task_Dispatching_Policy#\");\n                end if;\n \n                --  The use of Priority_Specific_Dispatching forces ceiling\n                --  locking policy.\n \n                if Locking_Policy /= ' ' and then Locking_Policy /= 'C' then\n                   Error_Msg_Sloc := Locking_Policy_Sloc;\n-                  Error_Pragma (\"Priority_Specific_Dispatching incompatible\" &\n-                                \" with Locking_Policy#\");\n+                     Error_Pragma\n+                       (\"Priority_Specific_Dispatching incompatible \"\n+                        & \"with Locking_Policy#\");\n \n                --  Set the Ceiling_Locking policy, but preserve System_Location\n                --  since we like the error message with the run time name.\n@@ -9663,12 +9797,11 @@ package body Sem_Prag is\n          -- Static_Elaboration_Desired --\n          --------------------------------\n \n-         --  Syntax ???\n+         --  pragma Static_Elaboration_Desired (DIRECT_NAME);\n \n          when Pragma_Static_Elaboration_Desired =>\n-\n-            --  GNAT_Pragma???\n-            --  Check number of arguments ???\n+            GNAT_Pragma;\n+            Check_At_Most_N_Arguments (1);\n \n             if Is_Compilation_Unit (Current_Scope)\n               and then Ekind (Current_Scope) = E_Package\n@@ -10362,7 +10495,6 @@ package body Sem_Prag is\n                end if;\n \n                Discr := First_Discriminant (Typ);\n-\n                while Present (Discr) loop\n                   if No (Discriminant_Default_Value (Discr)) then\n                      Error_Msg_N\n@@ -10377,10 +10509,8 @@ package body Sem_Prag is\n \n                Comp := First (Component_Items (Clist));\n                while Present (Comp) loop\n-\n                   Check_Component (Comp);\n                   Next (Comp);\n-\n                end loop;\n \n                if No (Clist) or else No (Variant_Part (Clist)) then\n@@ -10514,9 +10644,10 @@ package body Sem_Prag is\n \n             if Is_In_Context_Clause then\n \n-               --  The arguments must all be units mentioned in a with\n-               --  clause in the same context clause. Note we already checked\n-               --  (in Par.Prag) that the arguments are either identifiers or\n+               --  The arguments must all be units mentioned in a with clause\n+               --  in the same context clause. Note we already checked (in\n+               --  Par.Prag) that the arguments are either identifiers or\n+               --  selected components.\n \n                Arg_Node := Arg1;\n                while Present (Arg_Node) loop\n@@ -10881,36 +11012,29 @@ package body Sem_Prag is\n                         String_To_Name_Buffer\n                           (Strval (Expr_Value_S (Expression (Arg2))));\n \n-                        --  Configuration pragma case\n-\n-                        if Is_Configuration_Pragma then\n-                           if Chars (Argx) = Name_On then\n-                              Error_Pragma\n-                                (\"pragma Warnings (On, string) cannot be \" &\n-                                 \"used as configuration pragma\");\n-\n-                           else\n-                              Set_Specific_Warning_Off\n-                                (No_Location, Name_Buffer (1 .. Name_Len));\n-                           end if;\n-\n-                        --  Normal (non-configuration pragma) case\n-\n-                        else\n-                           if Chars (Argx) = Name_Off then\n-                              Set_Specific_Warning_Off\n-                                (Loc, Name_Buffer (1 .. Name_Len));\n-\n-                           elsif Chars (Argx) = Name_On then\n-                              Set_Specific_Warning_On\n-                                (Loc, Name_Buffer (1 .. Name_Len), Err);\n-\n-                              if Err then\n-                                 Error_Msg\n-                                   (\"?pragma Warnings On with no \" &\n-                                    \"matching Warnings Off\",\n-                                    Loc);\n-                              end if;\n+                        --  Note on configuration pragma case: If this is a\n+                        --  configuration pragma, then for an OFF pragma, we\n+                        --  just set Config True in the call, which is all\n+                        --  that needs to be done. For the case of ON, this\n+                        --  is normally an error, unless it is canceling the\n+                        --  effect of a previous OFF pragma in the same file.\n+                        --  In any other case, an error will be signalled (ON\n+                        --  with no matching OFF).\n+\n+                        if Chars (Argx) = Name_Off then\n+                           Set_Specific_Warning_Off\n+                             (Loc, Name_Buffer (1 .. Name_Len),\n+                              Config => Is_Configuration_Pragma);\n+\n+                        elsif Chars (Argx) = Name_On then\n+                           Set_Specific_Warning_On\n+                             (Loc, Name_Buffer (1 .. Name_Len), Err);\n+\n+                           if Err then\n+                              Error_Msg\n+                                (\"?pragma Warnings On with no \" &\n+                                 \"matching Warnings Off\",\n+                                 Loc);\n                            end if;\n                         end if;\n                      end if;\n@@ -11104,6 +11228,7 @@ package body Sem_Prag is\n       Pragma_Atomic                        =>  0,\n       Pragma_Atomic_Components             =>  0,\n       Pragma_Attach_Handler                => -1,\n+      Pragma_Check_Name                    =>  0,\n       Pragma_CIL_Constructor               => -1,\n       Pragma_CPP_Class                     =>  0,\n       Pragma_CPP_Constructor               =>  0,\n@@ -11143,6 +11268,7 @@ package body Sem_Prag is\n       Pragma_Finalize_Storage_Only         =>  0,\n       Pragma_Float_Representation          =>  0,\n       Pragma_Ident                         => -1,\n+      Pragma_Implicit_Packing              =>  0,\n       Pragma_Import                        => +2,\n       Pragma_Import_Exception              =>  0,\n       Pragma_Import_Function               =>  0,"}, {"sha": "1a6a28d501804438fcf0194fdb715f8231333871", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 52, "deletions": 43, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c690a2ec7301f5089252456d4fb764787c1a6fdb/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c690a2ec7301f5089252456d4fb764787c1a6fdb/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=c690a2ec7301f5089252456d4fb764787c1a6fdb", "patch": "@@ -178,7 +178,7 @@ package body Switch.C is\n             --  There are no other switches not starting with -gnat\n \n          else\n-            Bad_Switch (C);\n+            Bad_Switch (Switch_Chars);\n          end if;\n \n       --  Case of switch starting with -gnat\n@@ -260,8 +260,10 @@ package body Switch.C is\n                   elsif C = '.' then\n                      Dot := True;\n \n+                  elsif Dot then\n+                     Bad_Switch (\"-gnatd.\" & Switch_Chars (Ptr .. Max));\n                   else\n-                     Bad_Switch (C);\n+                     Bad_Switch (\"-gnatd\" & Switch_Chars (Ptr .. Max));\n                   end if;\n                end loop;\n \n@@ -289,7 +291,7 @@ package body Switch.C is\n                --  so we must always have a character after the e.\n \n                if Ptr > Max then\n-                  Bad_Switch (C);\n+                  Bad_Switch (\"-gnate\");\n                end if;\n \n                case Switch_Chars (Ptr) is\n@@ -308,7 +310,7 @@ package body Switch.C is\n                      end if;\n \n                      if Ptr > Max then\n-                        Bad_Switch (C);\n+                        Bad_Switch (\"-gnatec\");\n                      end if;\n \n                      declare\n@@ -351,7 +353,7 @@ package body Switch.C is\n                      Ptr := Ptr + 1;\n \n                      if Ptr > Max then\n-                        Bad_Switch (C);\n+                        Bad_Switch (\"-gnateD\");\n                      end if;\n \n                      Add_Symbol_Definition (Switch_Chars (Ptr .. Max));\n@@ -390,7 +392,7 @@ package body Switch.C is\n                      end if;\n \n                      if Ptr > Max then\n-                        Bad_Switch (C);\n+                        Bad_Switch (\"-gnatem\");\n                      end if;\n \n                      Mapping_File_Name :=\n@@ -411,7 +413,7 @@ package body Switch.C is\n                      end if;\n \n                      if Ptr > Max then\n-                        Bad_Switch (C);\n+                        Bad_Switch (\"-gnatep\");\n                      end if;\n \n                      Preprocessing_Data_File :=\n@@ -432,7 +434,7 @@ package body Switch.C is\n                   --  All other -gnate? switches are unassigned\n \n                   when others =>\n-                     Bad_Switch (C);\n+                     Bad_Switch (\"-gnate\" & Switch_Chars (Ptr .. Max));\n                end case;\n \n             --  -gnatE (dynamic elaboration checks)\n@@ -472,23 +474,24 @@ package body Switch.C is\n \n                --  Set default warnings for -gnatg\n \n-               Check_Unreferenced           := True;\n-               Check_Unreferenced_Formals   := True;\n-               Check_Withs                  := True;\n-               Constant_Condition_Warnings  := True;\n-               Implementation_Unit_Warnings := True;\n-               Ineffective_Inline_Warnings  := True;\n-               Warn_On_Assumed_Low_Bound    := True;\n-               Warn_On_Bad_Fixed_Value      := True;\n-               Warn_On_Constant             := True;\n-               Warn_On_Export_Import        := True;\n-               Warn_On_Modified_Unread      := True;\n-               Warn_On_No_Value_Assigned    := True;\n-               Warn_On_Non_Local_Exception  := False;\n-               Warn_On_Obsolescent_Feature  := True;\n-               Warn_On_Redundant_Constructs := True;\n-               Warn_On_Unchecked_Conversion := True;\n-               Warn_On_Unrecognized_Pragma  := True;\n+               Check_Unreferenced              := True;\n+               Check_Unreferenced_Formals      := True;\n+               Check_Withs                     := True;\n+               Constant_Condition_Warnings     := True;\n+               Implementation_Unit_Warnings    := True;\n+               Ineffective_Inline_Warnings     := True;\n+               Warn_On_Assumed_Low_Bound       := True;\n+               Warn_On_Bad_Fixed_Value         := True;\n+               Warn_On_Constant                := True;\n+               Warn_On_Export_Import           := True;\n+               Warn_On_Modified_Unread         := True;\n+               Warn_On_No_Value_Assigned       := True;\n+               Warn_On_Non_Local_Exception     := False;\n+               Warn_On_Obsolescent_Feature     := True;\n+               Warn_On_Redundant_Constructs    := True;\n+               Warn_On_Object_Renames_Function := True;\n+               Warn_On_Unchecked_Conversion    := True;\n+               Warn_On_Unrecognized_Pragma     := True;\n \n                Set_GNAT_Style_Check_Options;\n \n@@ -514,7 +517,7 @@ package body Switch.C is\n \n             when 'i' =>\n                if Ptr = Max then\n-                  Bad_Switch (C);\n+                  Bad_Switch (\"-gnati\");\n                end if;\n \n                Ptr := Ptr + 1;\n@@ -532,9 +535,15 @@ package body Switch.C is\n                   Ptr := Ptr + 1;\n \n                else\n-                  Bad_Switch (C);\n+                  Bad_Switch (\"-gnati\" & Switch_Chars (Ptr .. Max));\n                end if;\n \n+            --  Processing for I switch\n+\n+            when 'I' =>\n+               Ptr := Ptr + 1;\n+               Ignore_Rep_Clauses := True;\n+\n             --  Processing for j switch\n \n             when 'j' =>\n@@ -679,7 +688,7 @@ package body Switch.C is\n                      List_Representation_Info_Mechanisms := True;\n \n                   else\n-                     Bad_Switch (C);\n+                     Bad_Switch (\"-gnatR\" & Switch_Chars (Ptr .. Max));\n                   end if;\n \n                   Ptr := Ptr + 1;\n@@ -745,7 +754,7 @@ package body Switch.C is\n                Ptr := Ptr + 1;\n \n                if Ptr > Max then\n-                  Bad_Switch (C);\n+                  Bad_Switch (\"-gnatV\");\n \n                else\n                   declare\n@@ -756,7 +765,7 @@ package body Switch.C is\n                        (Switch_Chars (Ptr .. Max), OK, Ptr);\n \n                      if not OK then\n-                        Bad_Switch (C);\n+                        Bad_Switch (\"-gnatV\" & Switch_Chars (Ptr .. Max));\n                      end if;\n \n                      for Index in First_Char + 1 .. Max loop\n@@ -775,7 +784,7 @@ package body Switch.C is\n                Ptr := Ptr + 1;\n \n                if Ptr > Max then\n-                  Bad_Switch (C);\n+                  Bad_Switch (\"-gnatw\");\n                end if;\n \n                while Ptr <= Max loop\n@@ -790,7 +799,7 @@ package body Switch.C is\n                      if Set_Dot_Warning_Switch (C) then\n                         Store_Compilation_Switch (\"-gnatw.\" & C);\n                      else\n-                        Bad_Switch (C);\n+                        Bad_Switch (\"-gnatw.\" & Switch_Chars (Ptr .. Max));\n                      end if;\n \n                      --  Normal case, no dot\n@@ -799,7 +808,7 @@ package body Switch.C is\n                      if Set_Warning_Switch (C) then\n                         Store_Compilation_Switch (\"-gnatw\" & C);\n                      else\n-                        Bad_Switch (C);\n+                        Bad_Switch (\"-gnatw\" & Switch_Chars (Ptr .. Max));\n                      end if;\n                   end if;\n \n@@ -814,15 +823,15 @@ package body Switch.C is\n                Ptr := Ptr + 1;\n \n                if Ptr > Max then\n-                  Bad_Switch (C);\n+                  Bad_Switch (\"-gnatW\");\n                end if;\n \n                begin\n                   Wide_Character_Encoding_Method :=\n                     Get_WC_Encoding_Method (Switch_Chars (Ptr));\n                exception\n                   when Constraint_Error =>\n-                     Bad_Switch (C);\n+                     Bad_Switch (\"-gnatW\" & Switch_Chars (Ptr .. Max));\n                end;\n \n                Upper_Half_Encoding :=\n@@ -906,7 +915,7 @@ package body Switch.C is\n                         Distribution_Stub_Mode := Generate_Caller_Stub_Body;\n \n                      when others =>\n-                        Bad_Switch (C);\n+                        Bad_Switch (\"-gnatz\" & Switch_Chars (Ptr .. Max));\n                   end case;\n \n                   Ptr := Ptr + 1;\n@@ -923,13 +932,13 @@ package body Switch.C is\n \n             when '8' =>\n                if Ptr = Max then\n-                  Bad_Switch (C);\n+                  Bad_Switch (\"-gnat8\");\n                end if;\n \n                Ptr := Ptr + 1;\n \n                if Switch_Chars (Ptr) /= '3' then\n-                  Bad_Switch (C);\n+                  Bad_Switch (\"-gnat8\" & Switch_Chars (Ptr .. Max));\n                else\n                   Ptr := Ptr + 1;\n                   Ada_Version := Ada_83;\n@@ -940,13 +949,13 @@ package body Switch.C is\n \n             when '9' =>\n                if Ptr = Max then\n-                  Bad_Switch (C);\n+                  Bad_Switch (\"-gnat9\");\n                end if;\n \n                Ptr := Ptr + 1;\n \n                if Switch_Chars (Ptr) /= '5' then\n-                  Bad_Switch (C);\n+                  Bad_Switch (\"-gnat9\" & Switch_Chars (Ptr .. Max));\n                else\n                   Ptr := Ptr + 1;\n                   Ada_Version := Ada_95;\n@@ -957,13 +966,13 @@ package body Switch.C is\n \n             when '0' =>\n                if Ptr = Max then\n-                  Bad_Switch (C);\n+                  Bad_Switch (\"-gnat0\");\n                end if;\n \n                Ptr := Ptr + 1;\n \n                if Switch_Chars (Ptr) /= '5' then\n-                  Bad_Switch (C);\n+                  Bad_Switch (\"-gnat0\" & Switch_Chars (Ptr .. Max));\n                else\n                   Ptr := Ptr + 1;\n                   Ada_Version := Ada_05;\n@@ -978,7 +987,7 @@ package body Switch.C is\n             --  Anything else is an error (illegal switch character)\n \n             when others =>\n-               Bad_Switch (C);\n+               Bad_Switch (\"-gnat\" & Switch_Chars (Ptr .. Max));\n             end case;\n \n             if Store_Switch then"}, {"sha": "1b4729ee355a5317cdec0860f727c8316b7ea673", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c690a2ec7301f5089252456d4fb764787c1a6fdb/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c690a2ec7301f5089252456d4fb764787c1a6fdb/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=c690a2ec7301f5089252456d4fb764787c1a6fdb", "patch": "@@ -215,6 +215,11 @@ begin\n    Write_Switch_Char (\"i?\");\n    Write_Line (\"Identifier char set (?=1/2/3/4/5/8/9/p/f/n/w)\");\n \n+   --  Line for -gnatI switch\n+\n+   Write_Switch_Char (\"I\");\n+   Write_Line (\"Ignore all representation clauses\");\n+\n    --  Line for -gnatj switch\n \n    Write_Switch_Char (\"jnn\");\n@@ -420,13 +425,13 @@ begin\n                                                   \"assumption\");\n    Write_Line (\"        x*   turn on warnings for export/import\");\n    Write_Line (\"        X    turn off warnings for export/import\");\n-   Write_Line (\"        .x*  turn on warnings for non-local exceptions\");\n-   Write_Line (\"        .X   turn off warnings for non-local exceptions\");\n+   Write_Line (\"        .x   turn on warnings for non-local exceptions\");\n+   Write_Line (\"        .X*  turn off warnings for non-local exceptions\");\n    Write_Line (\"        y*   turn on warnings for Ada 2005 incompatibility\");\n    Write_Line (\"        Y    turn off warnings for Ada 2005 incompatibility\");\n-   Write_Line (\"        z*   turn on size/align warnings for \" &\n+   Write_Line (\"        z*   turn on convention/size/align warnings for \" &\n                                                   \"unchecked conversion\");\n-   Write_Line (\"        Z    turn off size/align warnings for \" &\n+   Write_Line (\"        Z    turn off convention/size/align warnings for \" &\n                                                   \"unchecked conversion\");\n    Write_Line (\"        *    indicates default in above list\");\n \n@@ -480,11 +485,12 @@ begin\n    Write_Line (\"        Lnn  check max nest level < nn \");\n    Write_Line (\"        m    check line length <= 79 characters\");\n    Write_Line (\"        n    check casing of package Standard identifiers\");\n-   Write_Line (\"        Mnn  check line length <= nn  characters\");\n+   Write_Line (\"        Mnn  check line length <= nn characters\");\n    Write_Line (\"        o    check subprogram bodies in alphabetical order\");\n    Write_Line (\"        p    check pragma casing\");\n    Write_Line (\"        r    check casing for identifier references\");\n    Write_Line (\"        s    check separate subprogram specs present\");\n+   Write_Line (\"        S    check separate lines after THEN or ELSE\");\n    Write_Line (\"        t    check token separation rules\");\n    Write_Line (\"        u    check no unnecessary blank lines\");\n    Write_Line (\"        x    check extra parentheses around conditionals\");"}, {"sha": "f6565b5f376c89629eec67729ae8b6dc608c5a6b", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 484, "deletions": 364, "changes": 848, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c690a2ec7301f5089252456d4fb764787c1a6fdb/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c690a2ec7301f5089252456d4fb764787c1a6fdb/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=c690a2ec7301f5089252456d4fb764787c1a6fdb", "patch": "@@ -191,6 +191,12 @@ package VMS_Data is\n    -- Switches for GNAT BIND --\n    ----------------------------\n \n+   S_Bind_Add     : aliased constant S := \"/ADD_PROJECT_SEARCH_DIR=*\"       &\n+                                            \"-aP*\";\n+   --        /ADD_PROJECT_SEARCH_PATH==(directory[,...])\n+   --\n+   --   Add directories to the project search path.\n+\n    S_Bind_Bind    : aliased constant S := \"/BIND_FILE=\"                    &\n                                             \"ADA \"                         &\n                                                \"-A \"                       &\n@@ -621,54 +627,61 @@ package VMS_Data is\n    --   consists of elaboration of these units in an appropriate order.\n \n    Bind_Switches : aliased constant Switches :=\n-     (S_Bind_Bind    'Access,\n-      S_Bind_Build   'Access,\n-      S_Bind_Current 'Access,\n-      S_Bind_Debug   'Access,\n-      S_Bind_DebugX  'Access,\n-      S_Bind_Elab    'Access,\n-      S_Bind_Error   'Access,\n-      S_Bind_Ext     'Access,\n-      S_Bind_Force   'Access,\n-      S_Bind_Help    'Access,\n-      S_Bind_Init    'Access,\n-      S_Bind_Library 'Access,\n-      S_Bind_Linker  'Access,\n-      S_Bind_Main    'Access,\n-      S_Bind_Mess    'Access,\n-      S_Bind_Nostinc 'Access,\n-      S_Bind_Nostlib 'Access,\n-      S_Bind_No_Time 'Access,\n-      S_Bind_Object  'Access,\n-      S_Bind_Order   'Access,\n-      S_Bind_Output  'Access,\n-      S_Bind_OutputX 'Access,\n-      S_Bind_Pess    'Access,\n-      S_Bind_Project 'Access,\n-      S_Bind_Read    'Access,\n-      S_Bind_ReadX   'Access,\n-      S_Bind_Rename  'Access,\n-      S_Bind_Report  'Access,\n-      S_Bind_ReportX 'Access,\n-      S_Bind_Restr   'Access,\n-      S_Bind_Return  'Access,\n-      S_Bind_RTS     'Access,\n-      S_Bind_Search  'Access,\n-      S_Bind_Shared  'Access,\n-      S_Bind_Slice   'Access,\n-      S_Bind_Source  'Access,\n-      S_Bind_Static  'Access,\n-      S_Bind_Store   'Access,\n-      S_Bind_Time    'Access,\n-      S_Bind_Verbose 'Access,\n-      S_Bind_Warn    'Access,\n-      S_Bind_WarnX   'Access,\n-      S_Bind_Zero    'Access);\n+                     (S_Bind_Add     'Access,\n+                      S_Bind_Bind    'Access,\n+                      S_Bind_Build   'Access,\n+                      S_Bind_Current 'Access,\n+                      S_Bind_Debug   'Access,\n+                      S_Bind_DebugX  'Access,\n+                      S_Bind_Elab    'Access,\n+                      S_Bind_Error   'Access,\n+                      S_Bind_Ext     'Access,\n+                      S_Bind_Force   'Access,\n+                      S_Bind_Help    'Access,\n+                      S_Bind_Init    'Access,\n+                      S_Bind_Library 'Access,\n+                      S_Bind_Linker  'Access,\n+                      S_Bind_Main    'Access,\n+                      S_Bind_Mess    'Access,\n+                      S_Bind_Nostinc 'Access,\n+                      S_Bind_Nostlib 'Access,\n+                      S_Bind_No_Time 'Access,\n+                      S_Bind_Object  'Access,\n+                      S_Bind_Order   'Access,\n+                      S_Bind_Output  'Access,\n+                      S_Bind_OutputX 'Access,\n+                      S_Bind_Pess    'Access,\n+                      S_Bind_Project 'Access,\n+                      S_Bind_Read    'Access,\n+                      S_Bind_ReadX   'Access,\n+                      S_Bind_Rename  'Access,\n+                      S_Bind_Report  'Access,\n+                      S_Bind_ReportX 'Access,\n+                      S_Bind_Restr   'Access,\n+                      S_Bind_Return  'Access,\n+                      S_Bind_RTS     'Access,\n+                      S_Bind_Search  'Access,\n+                      S_Bind_Shared  'Access,\n+                      S_Bind_Slice   'Access,\n+                      S_Bind_Source  'Access,\n+                      S_Bind_Static  'Access,\n+                      S_Bind_Store   'Access,\n+                      S_Bind_Time    'Access,\n+                      S_Bind_Verbose 'Access,\n+                      S_Bind_Warn    'Access,\n+                      S_Bind_WarnX   'Access,\n+                      S_Bind_Zero    'Access);\n \n    -----------------------------\n    -- Switches for GNAT CHECK --\n    -----------------------------\n \n+   S_Check_Add    : aliased constant S := \"/ADD_PROJECT_SEARCH_DIR=*\"      &\n+                                            \"-aP*\";\n+   --        /ADD_PROJECT_SEARCH_PATH==(directory[,...])\n+   --\n+   --   Add directories to the project search path.\n+\n    S_Check_All    : aliased constant S := \"/ALL \"                         &\n                                             \"-a\";\n    --        /NOALL (D)\n@@ -792,7 +805,8 @@ package VMS_Data is\n    --   information.\n \n    Check_Switches : aliased constant Switches :=\n-                      (S_Check_All      'Access,\n+                      (S_Check_Add      'Access,\n+                       S_Check_All      'Access,\n                        S_Check_Ext      'Access,\n                        S_Check_Files    'Access,\n                        S_Check_Help     'Access,\n@@ -887,19 +901,25 @@ package VMS_Data is\n    --   information.\n \n    Chop_Switches : aliased constant Switches :=\n-     (S_Chop_Comp   'Access,\n-      S_Chop_File   'Access,\n-      S_Chop_Help   'Access,\n-      S_Chop_Over   'Access,\n-      S_Chop_Pres   'Access,\n-      S_Chop_Quiet  'Access,\n-      S_Chop_Ref    'Access,\n-      S_Chop_Verb   'Access);\n+                     (S_Chop_Comp   'Access,\n+                      S_Chop_File   'Access,\n+                      S_Chop_Help   'Access,\n+                      S_Chop_Over   'Access,\n+                      S_Chop_Pres   'Access,\n+                      S_Chop_Quiet  'Access,\n+                      S_Chop_Ref    'Access,\n+                      S_Chop_Verb   'Access);\n \n    -----------------------------\n    -- Switches for GNAT CLEAN --\n    -----------------------------\n \n+   S_Clean_Add    : aliased constant S := \"/ADD_PROJECT_SEARCH_DIR=*\"      &\n+                                            \"-aP*\";\n+   --        /ADD_PROJECT_SEARCH_PATH==(directory[,...])\n+   --\n+   --   Add directories to the project search path.\n+\n    S_Clean_Compil  : aliased constant S := \"/COMPILER_FILES_ONLY \"         &\n                                              \"-c\";\n    --        /NOCOMPILER_FILES_ONLY (D)\n@@ -1044,21 +1064,22 @@ package VMS_Data is\n    --   Verbose mode.\n \n    Clean_Switches : aliased constant Switches :=\n-     (S_Clean_Compil 'Access,\n-      S_Clean_Current'Access,\n-      S_Clean_Delete 'Access,\n-      S_Clean_Dirobj 'Access,\n-      S_Clean_Ext    'Access,\n-      S_Clean_Full   'Access,\n-      S_Clean_Help   'Access,\n-      S_Clean_Index  'Access,\n-      S_Clean_Mess   'Access,\n-      S_Clean_Object 'Access,\n-      S_Clean_Project'Access,\n-      S_Clean_Quiet  'Access,\n-      S_Clean_Recurs 'Access,\n-      S_Clean_Search 'Access,\n-      S_Clean_Verbose'Access);\n+                      (S_Clean_Add    'Access,\n+                       S_Clean_Compil 'Access,\n+                       S_Clean_Current'Access,\n+                       S_Clean_Delete 'Access,\n+                       S_Clean_Dirobj 'Access,\n+                       S_Clean_Ext    'Access,\n+                       S_Clean_Full   'Access,\n+                       S_Clean_Help   'Access,\n+                       S_Clean_Index  'Access,\n+                       S_Clean_Mess   'Access,\n+                       S_Clean_Object 'Access,\n+                       S_Clean_Project'Access,\n+                       S_Clean_Quiet  'Access,\n+                       S_Clean_Recurs 'Access,\n+                       S_Clean_Search 'Access,\n+                       S_Clean_Verbose'Access);\n \n    -------------------------------\n    -- Switches for GNAT COMPILE --\n@@ -1101,6 +1122,12 @@ package VMS_Data is\n    --   Allows GNAT to recognize all implemented proposed Ada 2005\n    --   extensions. See features file for list of implemented features.\n \n+   S_GCC_Add     : aliased constant S := \"/ADD_PROJECT_SEARCH_DIR=*\"       &\n+                                            \"-aP*\";\n+   --        /ADD_PROJECT_SEARCH_PATH==(directory[,...])\n+   --\n+   --   Add directories to the project search path.\n+\n    S_GCC_Asm     : aliased constant S := \"/ASM \"                           &\n                                              \"-S,!-c\";\n    --        /NOASM (D)\n@@ -1521,7 +1548,15 @@ package VMS_Data is\n                                              \"-gnati1\";\n    --  NODOC (see /IDENTIFIER_CHARACTER_SET)\n \n-   S_GCC_Immed   : aliased constant S := \"/IMMEDIATE_ERRORS \"    &\n+   S_GCC_Ignore  : aliased constant S := \"/IGNORE_REP_CLAUSES \"            &\n+                                             \"-gnatI\";\n+   --        /IGNORE_REP_CLAUSES\n+   --\n+   --   Causes all representation clauses to be ignored and treated as\n+   --   comments. Useful when compiling foreign code (for example when ASIS\n+   --   is used to analyze such code).\n+\n+   S_GCC_Immed   : aliased constant S := \"/IMMEDIATE_ERRORS \"              &\n                                              \"-gnatdO\";\n    --        /NOIMMEDIATE_ERRORS (D)\n    --        /IMMEDIATE_ERRORS\n@@ -2016,6 +2051,8 @@ package VMS_Data is\n                                                \"-gnatyr \"                  &\n                                             \"SPECS \"                       &\n                                                \"-gnatys \"                  &\n+                                            \"STATEMENTS_AFTER_THEN_ELSE \"  &\n+                                               \"-gnatyS \"                  &\n                                             \"TOKEN \"                       &\n                                                \"-gnatyt \"                  &\n                                             \"UNNECESSARY_BLANK_LINES \"     &\n@@ -3059,85 +3096,93 @@ package VMS_Data is\n    --                                tools cannot be used.\n \n    GCC_Switches : aliased constant Switches :=\n-     (S_GCC_Ada_83  'Access,\n-      S_GCC_Ada_95  'Access,\n-      S_GCC_Ada_05  'Access,\n-      S_GCC_Asm     'Access,\n-      S_GCC_Checks  'Access,\n-      S_GCC_ChecksX 'Access,\n-      S_GCC_Compres 'Access,\n-      S_GCC_Config  'Access,\n-      S_GCC_Current 'Access,\n-      S_GCC_Debug   'Access,\n-      S_GCC_DebugX  'Access,\n-      S_GCC_Data    'Access,\n-      S_GCC_Dist    'Access,\n-      S_GCC_DistX   'Access,\n-      S_GCC_Error   'Access,\n-      S_GCC_ErrorX  'Access,\n-      S_GCC_Expand  'Access,\n-      S_GCC_Extend  'Access,\n-      S_GCC_Ext     'Access,\n-      S_GCC_File    'Access,\n-      S_GCC_Force   'Access,\n-      S_GCC_Full    'Access,\n-      S_GCC_GNAT    'Access,\n-      S_GCC_Help    'Access,\n-      S_GCC_Ident   'Access,\n-      S_GCC_IdentX  'Access,\n-      S_GCC_Immed   'Access,\n-      S_GCC_Inline  'Access,\n-      S_GCC_InlineX 'Access,\n-      S_GCC_Intsrc  'Access,\n-      S_GCC_Just    'Access,\n-      S_GCC_JustX   'Access,\n-      S_GCC_Length  'Access,\n-      S_GCC_List    'Access,\n-      S_GCC_Output  'Access,\n-      S_GCC_Mapping 'Access,\n-      S_GCC_Mess    'Access,\n-      S_GCC_Nesting 'Access,\n-      S_GCC_Noadc   'Access,\n-      S_GCC_Noload  'Access,\n-      S_GCC_Nostinc 'Access,\n-      S_GCC_Nostlib 'Access,\n-      S_GCC_Opt     'Access,\n-      S_GCC_OptX    'Access,\n-      S_GCC_Polling 'Access,\n-      S_GCC_Project 'Access,\n-      S_GCC_Psta    'Access,\n-      S_GCC_Report  'Access,\n-      S_GCC_ReportX 'Access,\n-      S_GCC_Repinfo 'Access,\n-      S_GCC_RepinfX 'Access,\n-      S_GCC_RTS     'Access,\n-      S_GCC_Search  'Access,\n-      S_GCC_Style   'Access,\n-      S_GCC_StyleX  'Access,\n-      S_GCC_Symbol  'Access,\n-      S_GCC_Syntax  'Access,\n-      S_GCC_Table   'Access,\n-      S_GCC_Trace   'Access,\n-      S_GCC_Tree    'Access,\n-      S_GCC_Trys    'Access,\n-      S_GCC_Units   'Access,\n-      S_GCC_Unique  'Access,\n-      S_GCC_Upcase  'Access,\n-      S_GCC_Valid   'Access,\n-      S_GCC_Verbose 'Access,\n-      S_GCC_Verb_Asm'Access,\n-      S_GCC_Warn    'Access,\n-      S_GCC_WarnX   'Access,\n-      S_GCC_Wide    'Access,\n-      S_GCC_WideX   'Access,\n-      S_GCC_No_Back 'Access,\n-      S_GCC_Xdebug  'Access,\n-      S_GCC_Xref    'Access);\n+                    (S_GCC_Ada_83  'Access,\n+                     S_GCC_Ada_95  'Access,\n+                     S_GCC_Ada_05  'Access,\n+                     S_GCC_Add     'Access,\n+                     S_GCC_Asm     'Access,\n+                     S_GCC_Checks  'Access,\n+                     S_GCC_ChecksX 'Access,\n+                     S_GCC_Compres 'Access,\n+                     S_GCC_Config  'Access,\n+                     S_GCC_Current 'Access,\n+                     S_GCC_Debug   'Access,\n+                     S_GCC_DebugX  'Access,\n+                     S_GCC_Data    'Access,\n+                     S_GCC_Dist    'Access,\n+                     S_GCC_DistX   'Access,\n+                     S_GCC_Error   'Access,\n+                     S_GCC_ErrorX  'Access,\n+                     S_GCC_Expand  'Access,\n+                     S_GCC_Extend  'Access,\n+                     S_GCC_Ext     'Access,\n+                     S_GCC_File    'Access,\n+                     S_GCC_Force   'Access,\n+                     S_GCC_Full    'Access,\n+                     S_GCC_GNAT    'Access,\n+                     S_GCC_Help    'Access,\n+                     S_GCC_Ident   'Access,\n+                     S_GCC_IdentX  'Access,\n+                     S_GCC_Ignore  'Access,\n+                     S_GCC_Immed   'Access,\n+                     S_GCC_Inline  'Access,\n+                     S_GCC_InlineX 'Access,\n+                     S_GCC_Intsrc  'Access,\n+                     S_GCC_Just    'Access,\n+                     S_GCC_JustX   'Access,\n+                     S_GCC_Length  'Access,\n+                     S_GCC_List    'Access,\n+                     S_GCC_Output  'Access,\n+                     S_GCC_Mapping 'Access,\n+                     S_GCC_Mess    'Access,\n+                     S_GCC_Nesting 'Access,\n+                     S_GCC_Noadc   'Access,\n+                     S_GCC_Noload  'Access,\n+                     S_GCC_Nostinc 'Access,\n+                     S_GCC_Nostlib 'Access,\n+                     S_GCC_Opt     'Access,\n+                     S_GCC_OptX    'Access,\n+                     S_GCC_Polling 'Access,\n+                     S_GCC_Project 'Access,\n+                     S_GCC_Psta    'Access,\n+                     S_GCC_Report  'Access,\n+                     S_GCC_ReportX 'Access,\n+                     S_GCC_Repinfo 'Access,\n+                     S_GCC_RepinfX 'Access,\n+                     S_GCC_RTS     'Access,\n+                     S_GCC_Search  'Access,\n+                     S_GCC_Style   'Access,\n+                     S_GCC_StyleX  'Access,\n+                     S_GCC_Symbol  'Access,\n+                     S_GCC_Syntax  'Access,\n+                     S_GCC_Table   'Access,\n+                     S_GCC_Trace   'Access,\n+                     S_GCC_Tree    'Access,\n+                     S_GCC_Trys    'Access,\n+                     S_GCC_Units   'Access,\n+                     S_GCC_Unique  'Access,\n+                     S_GCC_Upcase  'Access,\n+                     S_GCC_Valid   'Access,\n+                     S_GCC_Verbose 'Access,\n+                     S_GCC_Verb_Asm'Access,\n+                     S_GCC_Warn    'Access,\n+                     S_GCC_WarnX   'Access,\n+                     S_GCC_Wide    'Access,\n+                     S_GCC_WideX   'Access,\n+                     S_GCC_No_Back 'Access,\n+                     S_GCC_Xdebug  'Access,\n+                     S_GCC_Xref    'Access);\n \n    ----------------------------\n    -- Switches for GNAT ELIM --\n    ----------------------------\n \n+   S_Elim_Add    : aliased constant S := \"/ADD_PROJECT_SEARCH_DIR=*\"       &\n+                                           \"-aP*\";\n+   --        /ADD_PROJECT_SEARCH_PATH==(directory[,...])\n+   --\n+   --   Add directories to the project search path.\n+\n    S_Elim_All    : aliased constant S := \"/ALL \"                           &\n                                             \"-a\";\n    --        /NOALL (D)\n@@ -3248,7 +3293,8 @@ package VMS_Data is\n    --   being processed.\n \n    Elim_Switches : aliased constant Switches :=\n-                     (S_Elim_All     'Access,\n+                     (S_Elim_Add     'Access,\n+                      S_Elim_All     'Access,\n                       S_Elim_Bind    'Access,\n                       S_Elim_Comp    'Access,\n                       S_Elim_Config  'Access,\n@@ -3265,6 +3311,12 @@ package VMS_Data is\n    -- Switches for GNAT FIND --\n    ----------------------------\n \n+   S_Find_Add     : aliased constant S := \"/ADD_PROJECT_SEARCH_DIR=*\"       &\n+                                            \"-aP*\";\n+   --        /ADD_PROJECT_SEARCH_PATH==(directory[,...])\n+   --\n+   --   Add directories to the project search path.\n+\n    S_Find_All     : aliased constant S := \"/ALL_FILES \"                    &\n                                             \"-a\";\n    --        /NOALL_FILES (D)\n@@ -3428,23 +3480,24 @@ package VMS_Data is\n    --   specify more than one file.\n \n    Find_Switches : aliased constant Switches :=\n-     (S_Find_All     'Access,\n-      S_Find_Deriv   'Access,\n-      S_Find_Expr    'Access,\n-      S_Find_Ext     'Access,\n-      S_Find_Full    'Access,\n-      S_Find_Ignore  'Access,\n-      S_Find_Mess    'Access,\n-      S_Find_Nostinc 'Access,\n-      S_Find_Nostlib 'Access,\n-      S_Find_Object  'Access,\n-      S_Find_Print   'Access,\n-      S_Find_Project 'Access,\n-      S_Find_Prj     'Access,\n-      S_Find_Ref     'Access,\n-      S_Find_Search  'Access,\n-      S_Find_Source  'Access,\n-      S_Find_Types   'Access);\n+                     (S_Find_Add     'Access,\n+                      S_Find_All     'Access,\n+                      S_Find_Deriv   'Access,\n+                      S_Find_Expr    'Access,\n+                      S_Find_Ext     'Access,\n+                      S_Find_Full    'Access,\n+                      S_Find_Ignore  'Access,\n+                      S_Find_Mess    'Access,\n+                      S_Find_Nostinc 'Access,\n+                      S_Find_Nostlib 'Access,\n+                      S_Find_Object  'Access,\n+                      S_Find_Print   'Access,\n+                      S_Find_Project 'Access,\n+                      S_Find_Prj     'Access,\n+                      S_Find_Ref     'Access,\n+                      S_Find_Search  'Access,\n+                      S_Find_Source  'Access,\n+                      S_Find_Types   'Access);\n \n    ------------------------------\n    -- Switches for GNAT KRUNCH --\n@@ -3462,12 +3515,18 @@ package VMS_Data is\n    --   be specified.\n \n    Krunch_Switches : aliased constant Switches  :=\n-     (1 .. 1 => S_Krunch_Count  'Access);\n+                       (1 .. 1 => S_Krunch_Count  'Access);\n \n    ----------------------------\n    -- Switches for GNAT LINK --\n    ----------------------------\n \n+   S_Link_Add     : aliased constant S := \"/ADD_PROJECT_SEARCH_DIR=*\"       &\n+                                            \"-aP*\";\n+   --        /ADD_PROJECT_SEARCH_PATH==(directory[,...])\n+   --\n+   --   Add directories to the project search path.\n+\n    S_Link_Bind    : aliased constant S := \"/BIND_FILE=\"                    &\n                                             \"ADA \"                         &\n                                                \"-A \"                       &\n@@ -3653,30 +3712,37 @@ package VMS_Data is\n    --   Any other switch that will be transmited to the underlying linker.\n \n    Link_Switches : aliased constant Switches :=\n-     (S_Link_Bind    'Access,\n-      S_Link_Debug   'Access,\n-      S_Link_Nodebug 'Access,\n-      S_Link_Execut  'Access,\n-      S_Link_Ext     'Access,\n-      S_Link_Forlink 'Access,\n-      S_Link_Force   'Access,\n-      S_Link_Ident   'Access,\n-      S_Link_Libdir  'Access,\n-      S_Link_Library 'Access,\n-      S_Link_Mess    'Access,\n-      S_Link_Nocomp  'Access,\n-      S_Link_Nofiles 'Access,\n-      S_Link_Noinhib 'Access,\n-      S_Link_Project 'Access,\n-      S_Link_Return  'Access,\n-      S_Link_Static  'Access,\n-      S_Link_Verb    'Access,\n-      S_Link_ZZZZZ   'Access);\n+                     (S_Link_Add     'Access,\n+                      S_Link_Bind    'Access,\n+                      S_Link_Debug   'Access,\n+                      S_Link_Nodebug 'Access,\n+                      S_Link_Execut  'Access,\n+                      S_Link_Ext     'Access,\n+                      S_Link_Forlink 'Access,\n+                      S_Link_Force   'Access,\n+                      S_Link_Ident   'Access,\n+                      S_Link_Libdir  'Access,\n+                      S_Link_Library 'Access,\n+                      S_Link_Mess    'Access,\n+                      S_Link_Nocomp  'Access,\n+                      S_Link_Nofiles 'Access,\n+                      S_Link_Noinhib 'Access,\n+                      S_Link_Project 'Access,\n+                      S_Link_Return  'Access,\n+                      S_Link_Static  'Access,\n+                      S_Link_Verb    'Access,\n+                      S_Link_ZZZZZ   'Access);\n \n    ----------------------------\n    -- Switches for GNAT LIST --\n    ----------------------------\n \n+   S_List_Add     : aliased constant S := \"/ADD_PROJECT_SEARCH_DIR=*\"       &\n+                                            \"-aP*\";\n+   --        /ADD_PROJECT_SEARCH_PATH==(directory[,...])\n+   --\n+   --   Add directories to the project search path.\n+\n    S_List_All     : aliased constant S := \"/ALL_UNITS \"                    &\n                                             \"-a\";\n    --        /NOALL_UNITS (D)\n@@ -3809,19 +3875,20 @@ package VMS_Data is\n    --   When looking for source files also look in the specified directories.\n \n    List_Switches : aliased constant Switches :=\n-     (S_List_All     'Access,\n-      S_List_Allproj 'Access,\n-      S_List_Current 'Access,\n-      S_List_Depend  'Access,\n-      S_List_Ext     'Access,\n-      S_List_Files   'Access,\n-      S_List_Mess    'Access,\n-      S_List_Nostinc 'Access,\n-      S_List_Object  'Access,\n-      S_List_Output  'Access,\n-      S_List_Project 'Access,\n-      S_List_Search  'Access,\n-      S_List_Source  'Access);\n+                     (S_List_Add     'Access,\n+                      S_List_All     'Access,\n+                      S_List_Allproj 'Access,\n+                      S_List_Current 'Access,\n+                      S_List_Depend  'Access,\n+                      S_List_Ext     'Access,\n+                      S_List_Files   'Access,\n+                      S_List_Mess    'Access,\n+                      S_List_Nostinc 'Access,\n+                      S_List_Object  'Access,\n+                      S_List_Output  'Access,\n+                      S_List_Project 'Access,\n+                      S_List_Search  'Access,\n+                      S_List_Source  'Access);\n \n    ----------------------------\n    -- Switches for GNAT MAKE --\n@@ -3871,6 +3938,12 @@ package VMS_Data is\n    --                   have been previously compiled and must be up to date,\n    --                   and the main program need to have been bound.\n \n+   S_Make_Add     : aliased constant S := \"/ADD_PROJECT_SEARCH_DIR=*\"       &\n+                                            \"-aP*\";\n+   --        /ADD_PROJECT_SEARCH_PATH==(directory[,...])\n+   --\n+   --   Add directories to the project search path.\n+\n    S_Make_All     : aliased constant S := \"/ALL_FILES \"                    &\n                                             \"-a\";\n    --        /NOALL_FILES (D)\n@@ -4311,58 +4384,65 @@ package VMS_Data is\n    --   necessary.\n \n    Make_Switches : aliased constant Switches :=\n-     (S_Make_Actions 'Access,\n-      S_Make_All     'Access,\n-      S_Make_Allproj 'Access,\n-      S_Make_Bind    'Access,\n-      S_Make_Comp    'Access,\n-      S_Make_Cond    'Access,\n-      S_Make_Cont    'Access,\n-      S_Make_Current 'Access,\n-      S_Make_Dep     'Access,\n-      S_Make_Dirobj  'Access,\n-      S_Make_Doobj   'Access,\n-      S_Make_Execut  'Access,\n-      S_Make_Ext     'Access,\n-      S_Make_Force   'Access,\n-      S_Make_Full    'Access,\n-      S_Make_Hi_Verb 'Access,\n-      S_Make_Inplace 'Access,\n-      S_Make_Index   'Access,\n-      S_Make_Library 'Access,\n-      S_Make_Link    'Access,\n-      S_Make_Low_Verb'Access,\n-      S_Make_Make    'Access,\n-      S_Make_Mapping 'Access,\n-      S_Make_Med_Verb'Access,\n-      S_Make_Mess    'Access,\n-      S_Make_Minimal 'Access,\n-      S_Make_Missing 'Access,\n-      S_Make_Nolink  'Access,\n-      S_Make_Nomain  'Access,\n-      S_Make_Nonpro  'Access,\n-      S_Make_Nostinc 'Access,\n-      S_Make_Nostlib 'Access,\n-      S_Make_Object  'Access,\n-      S_Make_Proc    'Access,\n-      S_Make_Nojobs  'Access,\n-      S_Make_Project 'Access,\n-      S_Make_Quiet   'Access,\n-      S_Make_Reason  'Access,\n-      S_Make_RTS     'Access,\n-      S_Make_Search  'Access,\n-      S_Make_Skip    'Access,\n-      S_Make_Source  'Access,\n-      S_Make_Stand   'Access,\n-      S_Make_Switch  'Access,\n-      S_Make_Unique  'Access,\n-      S_Make_Use_Map 'Access,\n-      S_Make_Verbose 'Access);\n+                     (S_Make_Add     'Access,\n+                      S_Make_Actions 'Access,\n+                      S_Make_All     'Access,\n+                      S_Make_Allproj 'Access,\n+                      S_Make_Bind    'Access,\n+                      S_Make_Comp    'Access,\n+                      S_Make_Cond    'Access,\n+                      S_Make_Cont    'Access,\n+                      S_Make_Current 'Access,\n+                      S_Make_Dep     'Access,\n+                      S_Make_Dirobj  'Access,\n+                      S_Make_Doobj   'Access,\n+                      S_Make_Execut  'Access,\n+                      S_Make_Ext     'Access,\n+                      S_Make_Force   'Access,\n+                      S_Make_Full    'Access,\n+                      S_Make_Hi_Verb 'Access,\n+                      S_Make_Inplace 'Access,\n+                      S_Make_Index   'Access,\n+                      S_Make_Library 'Access,\n+                      S_Make_Link    'Access,\n+                      S_Make_Low_Verb'Access,\n+                      S_Make_Make    'Access,\n+                      S_Make_Mapping 'Access,\n+                      S_Make_Med_Verb'Access,\n+                      S_Make_Mess    'Access,\n+                      S_Make_Minimal 'Access,\n+                      S_Make_Missing 'Access,\n+                      S_Make_Nolink  'Access,\n+                      S_Make_Nomain  'Access,\n+                      S_Make_Nonpro  'Access,\n+                      S_Make_Nostinc 'Access,\n+                      S_Make_Nostlib 'Access,\n+                      S_Make_Object  'Access,\n+                      S_Make_Proc    'Access,\n+                      S_Make_Nojobs  'Access,\n+                      S_Make_Project 'Access,\n+                      S_Make_Quiet   'Access,\n+                      S_Make_Reason  'Access,\n+                      S_Make_RTS     'Access,\n+                      S_Make_Search  'Access,\n+                      S_Make_Skip    'Access,\n+                      S_Make_Source  'Access,\n+                      S_Make_Stand   'Access,\n+                      S_Make_Switch  'Access,\n+                      S_Make_Unique  'Access,\n+                      S_Make_Use_Map 'Access,\n+                      S_Make_Verbose 'Access);\n \n    ------------------------------\n    -- Switches for GNAT METRIC --\n    ------------------------------\n \n+   S_Metric_Add     : aliased constant S := \"/ADD_PROJECT_SEARCH_DIR=*\"     &\n+                                              \"-aP*\";\n+   --        /ADD_PROJECT_SEARCH_PATH==(directory[,...])\n+   --\n+   --   Add directories to the project search path.\n+\n    S_Metric_All_Prjs : aliased constant S := \"/ALL_PROJECTS \"              &\n                                                \"-U\";\n    --        /NOALL_PROJECTS (D)\n@@ -4591,22 +4671,23 @@ package VMS_Data is\n    --   Place the XML output into the specified file\n \n    Metric_Switches : aliased constant Switches :=\n-     (S_Metric_All_Prjs 'Access,\n-      S_Metric_Debug    'Access,\n-      S_Metric_Direct   'Access,\n-      S_Metric_Element  'Access,\n-      S_Metric_Ext      'Access,\n-      S_Metric_Files    'Access,\n-      S_Metric_Format   'Access,\n-      S_Metric_Globout  'Access,\n-      S_Metric_Line     'Access,\n-      S_Metric_Mess     'Access,\n-      S_Metric_Project  'Access,\n-      S_Metric_Quiet    'Access,\n-      S_Metric_Suffix   'Access,\n-      S_Metric_Suppress 'Access,\n-      S_Metric_Verbose  'Access,\n-      S_Metric_XMLout   'Access);\n+                       (S_Metric_Add      'Access,\n+                        S_Metric_All_Prjs 'Access,\n+                        S_Metric_Debug    'Access,\n+                        S_Metric_Direct   'Access,\n+                        S_Metric_Element  'Access,\n+                        S_Metric_Ext      'Access,\n+                        S_Metric_Files    'Access,\n+                        S_Metric_Format   'Access,\n+                        S_Metric_Globout  'Access,\n+                        S_Metric_Line     'Access,\n+                        S_Metric_Mess     'Access,\n+                        S_Metric_Project  'Access,\n+                        S_Metric_Quiet    'Access,\n+                        S_Metric_Suffix   'Access,\n+                        S_Metric_Suppress 'Access,\n+                        S_Metric_Verbose  'Access,\n+                        S_Metric_XMLout   'Access);\n \n    ----------------------------\n    -- Switches for GNAT NAME --\n@@ -4704,14 +4785,14 @@ package VMS_Data is\n    --   those whose names end with '_NT.ADA'.\n \n    Name_Switches : aliased constant Switches :=\n-     (S_Name_Conf         'Access,\n-      S_Name_Dirs         'Access,\n-      S_Name_Dfile        'Access,\n-      S_Name_Frng         'Access,\n-      S_Name_Help         'Access,\n-      S_Name_Proj         'Access,\n-      S_Name_Verbose      'Access,\n-      S_Name_Excl         'Access);\n+                     (S_Name_Conf         'Access,\n+                      S_Name_Dirs         'Access,\n+                      S_Name_Dfile        'Access,\n+                      S_Name_Frng         'Access,\n+                      S_Name_Help         'Access,\n+                      S_Name_Proj         'Access,\n+                      S_Name_Verbose      'Access,\n+                      S_Name_Excl         'Access);\n \n    ----------------------------------\n    -- Switches for GNAT PREPROCESS --\n@@ -4788,19 +4869,25 @@ package VMS_Data is\n    --        /UNDEFINED\n \n    Prep_Switches : aliased constant Switches :=\n-     (S_Prep_Assoc   'Access,\n-      S_Prep_Blank   'Access,\n-      S_Prep_Com     'Access,\n-      S_Prep_Ref     'Access,\n-      S_Prep_Remove  'Access,\n-      S_Prep_Replace 'Access,\n-      S_Prep_Symbols 'Access,\n-      S_Prep_Undef   'Access);\n+                     (S_Prep_Assoc   'Access,\n+                      S_Prep_Blank   'Access,\n+                      S_Prep_Com     'Access,\n+                      S_Prep_Ref     'Access,\n+                      S_Prep_Remove  'Access,\n+                      S_Prep_Replace 'Access,\n+                      S_Prep_Symbols 'Access,\n+                      S_Prep_Undef   'Access);\n \n    ------------------------------\n    -- Switches for GNAT PRETTY --\n    ------------------------------\n \n+   S_Pretty_Add    : aliased constant S := \"/ADD_PROJECT_SEARCH_DIR=*\"      &\n+                                             \"-aP*\";\n+   --        /ADD_PROJECT_SEARCH_PATH==(directory[,...])\n+   --\n+   --   Add directories to the project search path.\n+\n    S_Pretty_Align  : aliased constant S := \"/ALIGN=\"                       &\n                                            \"DEFAULT \"                      &\n                                                \"-A12345 \"                  &\n@@ -4871,7 +4958,9 @@ package VMS_Data is\n                                               \"GNAT_BEGINNING \"            &\n                                                  \"-c3 \"                    &\n                                               \"REFORMAT \"                  &\n-                                                 \"-c4\";\n+                                                 \"-c4 \"                    &\n+                                              \"KEEP_SPECIAL \"              &\n+                                                 \"-c5\";\n    --        /COMMENTS_LAYOUT[=layout-option, layout-option, ...]\n    --\n    --   Set the comment layout. By default, comments use the GNAT style\n@@ -4884,6 +4973,7 @@ package VMS_Data is\n    --     STANDARD_INDENT     Standard comment line indentation\n    --     GNAT_BEGINNING      GNAT style comment beginning\n    --     REFORMAT            Reformat comment blocks\n+   --     KEEP_SPECIAL        Keep unchanged special form comments\n    --\n    --     All combinations of layout options are allowed, except for DEFAULT\n    --     and STANDARD_INDENT which are mutually exclusive, and also if\n@@ -4992,6 +5082,13 @@ package VMS_Data is\n    --   Do not place the IS keyword on a separate line in a subprogram body in\n    --   case if the specification occupies more then one line.\n \n+   S_Pretty_Sep_Loop_Then : aliased constant S := \"/SEPARATE_LOOP_THEN \"   &\n+                                                    \"--separate-loop-then\";\n+   --        /SEPARATE_LOOP_THEN\n+   --\n+   --   Place the THEN keyword in IF statement and the LOOP keyword in for-\n+   --   and while-loops on a separate line.\n+\n    S_Pretty_Eol       : aliased constant S := \"/END_OF_LINE=\"              &\n                                                 \"DOS \"                     &\n                                                    \"--eol=dos \"            &\n@@ -5299,42 +5396,44 @@ package VMS_Data is\n    --   By default such warnings are not activated.\n \n    Pretty_Switches : aliased constant Switches :=\n-     (S_Pretty_Align     'Access,\n-      S_Pretty_All_Prjs  'Access,\n-      S_Pretty_Attrib    'Access,\n-      S_Pretty_Comments  'Access,\n-      S_Pretty_Compact_Is'Access,\n-      S_Pretty_Config    'Access,\n-      S_Pretty_Constr    'Access,\n-      S_Pretty_Comind    'Access,\n-      S_Pretty_Current   'Access,\n-      S_Pretty_Dico      'Access,\n-      S_Pretty_Eol       'Access,\n-      S_Pretty_Ext       'Access,\n-      S_Pretty_Encoding  'Access,\n-      S_Pretty_Files     'Access,\n-      S_Pretty_Forced    'Access,\n-      S_Pretty_Formfeed  'Access,\n-      S_Pretty_Indent    'Access,\n-      S_Pretty_Keyword   'Access,\n-      S_Pretty_Maxlen    'Access,\n-      S_Pretty_Maxind    'Access,\n-      S_Pretty_Mess      'Access,\n-      S_Pretty_Names     'Access,\n-      S_Pretty_No_Backup 'Access,\n-      S_Pretty_No_Labels 'Access,\n-      S_Pretty_Notabs    'Access,\n-      S_Pretty_Output    'Access,\n-      S_Pretty_Override  'Access,\n-      S_Pretty_Pragma    'Access,\n-      S_Pretty_Replace   'Access,\n-      S_Pretty_Project   'Access,\n-      S_Pretty_RTS       'Access,\n-      S_Pretty_Search    'Access,\n-      S_Pretty_Specific  'Access,\n-      S_Pretty_Standard  'Access,\n-      S_Pretty_Verbose   'Access,\n-      S_Pretty_Warnings  'Access);\n+                       (S_Pretty_Add           'Access,\n+                        S_Pretty_Align         'Access,\n+                        S_Pretty_All_Prjs      'Access,\n+                        S_Pretty_Attrib        'Access,\n+                        S_Pretty_Comments      'Access,\n+                        S_Pretty_Compact_Is    'Access,\n+                        S_Pretty_Config        'Access,\n+                        S_Pretty_Constr        'Access,\n+                        S_Pretty_Comind        'Access,\n+                        S_Pretty_Current       'Access,\n+                        S_Pretty_Dico          'Access,\n+                        S_Pretty_Eol           'Access,\n+                        S_Pretty_Ext           'Access,\n+                        S_Pretty_Encoding      'Access,\n+                        S_Pretty_Files         'Access,\n+                        S_Pretty_Forced        'Access,\n+                        S_Pretty_Formfeed      'Access,\n+                        S_Pretty_Indent        'Access,\n+                        S_Pretty_Keyword       'Access,\n+                        S_Pretty_Maxlen        'Access,\n+                        S_Pretty_Maxind        'Access,\n+                        S_Pretty_Mess          'Access,\n+                        S_Pretty_Names         'Access,\n+                        S_Pretty_No_Backup     'Access,\n+                        S_Pretty_No_Labels     'Access,\n+                        S_Pretty_Notabs        'Access,\n+                        S_Pretty_Output        'Access,\n+                        S_Pretty_Override      'Access,\n+                        S_Pretty_Pragma        'Access,\n+                        S_Pretty_Replace       'Access,\n+                        S_Pretty_Project       'Access,\n+                        S_Pretty_RTS           'Access,\n+                        S_Pretty_Search        'Access,\n+                        S_Pretty_Sep_Loop_Then 'Access,\n+                        S_Pretty_Specific      'Access,\n+                        S_Pretty_Standard      'Access,\n+                        S_Pretty_Verbose       'Access,\n+                        S_Pretty_Warnings      'Access);\n \n    ------------------------------\n    -- Switches for GNAT SHARED --\n@@ -5406,18 +5505,24 @@ package VMS_Data is\n    --   Any other switch transmitted to the underlying linker.\n \n    Shared_Switches : aliased constant Switches :=\n-     (S_Shared_Debug   'Access,\n-      S_Shared_Image   'Access,\n-      S_Shared_Ident   'Access,\n-      S_Shared_Nofiles 'Access,\n-      S_Shared_Noinhib 'Access,\n-      S_Shared_Verb    'Access,\n-      S_Shared_ZZZZZ   'Access);\n+                       (S_Shared_Debug   'Access,\n+                        S_Shared_Image   'Access,\n+                        S_Shared_Ident   'Access,\n+                        S_Shared_Nofiles 'Access,\n+                        S_Shared_Noinhib 'Access,\n+                        S_Shared_Verb    'Access,\n+                        S_Shared_ZZZZZ   'Access);\n \n    -----------------------------\n    -- Switches for GNAT STACK --\n    -----------------------------\n \n+   S_Stack_Add        : aliased constant S := \"/ADD_PROJECT_SEARCH_DIR=*\"   &\n+                                                \"-aP*\";\n+   --        /ADD_PROJECT_SEARCH_PATH==(directory[,...])\n+   --\n+   --   Add directories to the project search path.\n+\n    S_Stack_All        : aliased constant S := \"/ALL_SUBPROGRAMS \"          &\n                                                 \"-a\";\n    --        /NOALL_SUBPROGRAMS (D)\n@@ -5574,29 +5679,36 @@ package VMS_Data is\n    --        INDIRECT   Turn on warnings for indirect calls\n \n    Stack_Switches : aliased constant Switches :=\n-     (S_Stack_All        'Access,\n-      S_Stack_All_Cycles 'Access,\n-      S_Stack_All_Prjs   'Access,\n-      S_Stack_Debug      'Access,\n-      S_Stack_Directory  'Access,\n-      S_Stack_Entries    'Access,\n-      S_Stack_Files      'Access,\n-      S_Stack_Help       'Access,\n-      S_Stack_List       'Access,\n-      S_Stack_Order      'Access,\n-      S_Stack_Path       'Access,\n-      S_Stack_Project    'Access,\n-      S_Stack_Output     'Access,\n-      S_Stack_Regexp     'Access,\n-      S_Stack_Unbounded  'Access,\n-      S_Stack_Unknown    'Access,\n-      S_Stack_Verbose    'Access,\n-      S_Stack_Warnings   'Access);\n+                      (S_Stack_Add        'Access,\n+                       S_Stack_All        'Access,\n+                       S_Stack_All_Cycles 'Access,\n+                       S_Stack_All_Prjs   'Access,\n+                       S_Stack_Debug      'Access,\n+                       S_Stack_Directory  'Access,\n+                       S_Stack_Entries    'Access,\n+                       S_Stack_Files      'Access,\n+                       S_Stack_Help       'Access,\n+                       S_Stack_List       'Access,\n+                       S_Stack_Order      'Access,\n+                       S_Stack_Path       'Access,\n+                       S_Stack_Project    'Access,\n+                       S_Stack_Output     'Access,\n+                       S_Stack_Regexp     'Access,\n+                       S_Stack_Unbounded  'Access,\n+                       S_Stack_Unknown    'Access,\n+                       S_Stack_Verbose    'Access,\n+                       S_Stack_Warnings   'Access);\n \n    ----------------------------\n    -- Switches for GNAT STUB --\n    ----------------------------\n \n+   S_Stub_Add     : aliased constant S := \"/ADD_PROJECT_SEARCH_DIR=*\"       &\n+                                            \"-aP*\";\n+   --        /ADD_PROJECT_SEARCH_PATH==(directory[,...])\n+   --\n+   --   Add directories to the project search path.\n+\n    S_Stub_Config  : aliased constant S := \"/CONFIGURATION_PRAGMAS_FILE=<\"  &\n                                             \"-gnatec>\";\n    --        /CONFIGURATION_PRAGMAS_FILE=filespec\n@@ -5765,26 +5877,33 @@ package VMS_Data is\n    --   Verbose mode: generate version information.\n \n    Stub_Switches : aliased constant Switches :=\n-     (S_Stub_Config  'Access,\n-      S_Stub_Current 'Access,\n-      S_Stub_Ext     'Access,\n-      S_Stub_Full    'Access,\n-      S_Stub_Header  'Access,\n-      S_Stub_Indent  'Access,\n-      S_Stub_Keep    'Access,\n-      S_Stub_Length  'Access,\n-      S_Stub_Mess    'Access,\n-      S_Stub_Output  'Access,\n-      S_Stub_Project 'Access,\n-      S_Stub_Quiet   'Access,\n-      S_Stub_Search  'Access,\n-      S_Stub_Tree    'Access,\n-      S_Stub_Verbose 'Access);\n+                     (S_Stub_Add     'Access,\n+                      S_Stub_Config  'Access,\n+                      S_Stub_Current 'Access,\n+                      S_Stub_Ext     'Access,\n+                      S_Stub_Full    'Access,\n+                      S_Stub_Header  'Access,\n+                      S_Stub_Indent  'Access,\n+                      S_Stub_Keep    'Access,\n+                      S_Stub_Length  'Access,\n+                      S_Stub_Mess    'Access,\n+                      S_Stub_Output  'Access,\n+                      S_Stub_Project 'Access,\n+                      S_Stub_Quiet   'Access,\n+                      S_Stub_Search  'Access,\n+                      S_Stub_Tree    'Access,\n+                      S_Stub_Verbose 'Access);\n \n    ----------------------------\n    -- Switches for GNAT XREF --\n    ----------------------------\n \n+   S_Xref_Add     : aliased constant S := \"/ADD_PROJECT_SEARCH_DIR=*\"       &\n+                                            \"-aP*\";\n+   --        /ADD_PROJECT_SEARCH_PATH==(directory[,...])\n+   --\n+   --   Add directories to the project search path.\n+\n    S_Xref_All     : aliased constant S := \"/ALL_FILES \"                    &\n                                             \"-a\";\n    --        /NOALL_FILES (D)\n@@ -5923,20 +6042,21 @@ package VMS_Data is\n    --   Print a 'tags' file for vi.\n \n    Xref_Switches : aliased constant Switches :=\n-     (S_Xref_All     'Access,\n-      S_Xref_Deriv   'Access,\n-      S_Xref_Ext     'Access,\n-      S_Xref_Full    'Access,\n-      S_Xref_Global  'Access,\n-      S_Xref_Mess    'Access,\n-      S_Xref_Nostinc 'Access,\n-      S_Xref_Nostlib 'Access,\n-      S_Xref_Object  'Access,\n-      S_Xref_Project 'Access,\n-      S_Xref_Prj     'Access,\n-      S_Xref_Search  'Access,\n-      S_Xref_Source  'Access,\n-      S_Xref_Output  'Access,\n-      S_Xref_Tags    'Access);\n+                     (S_Xref_Add     'Access,\n+                      S_Xref_All     'Access,\n+                      S_Xref_Deriv   'Access,\n+                      S_Xref_Ext     'Access,\n+                      S_Xref_Full    'Access,\n+                      S_Xref_Global  'Access,\n+                      S_Xref_Mess    'Access,\n+                      S_Xref_Nostinc 'Access,\n+                      S_Xref_Nostlib 'Access,\n+                      S_Xref_Object  'Access,\n+                      S_Xref_Project 'Access,\n+                      S_Xref_Prj     'Access,\n+                      S_Xref_Search  'Access,\n+                      S_Xref_Source  'Access,\n+                      S_Xref_Output  'Access,\n+                      S_Xref_Tags    'Access);\n \n end VMS_Data;"}]}