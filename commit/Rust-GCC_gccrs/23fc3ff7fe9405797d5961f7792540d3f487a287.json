{"sha": "23fc3ff7fe9405797d5961f7792540d3f487a287", "node_id": "C_kwDOANBUbNoAKDIzZmMzZmY3ZmU5NDA1Nzk3ZDU5NjFmNzc5MjU0MGQzZjQ4N2EyODc", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-07T09:48:22Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-12T12:26:23Z"}, "message": "privacy: ctx: Add proper implementations for insert_reachability() and\nlookup_reachability()\n\nInserting reach levels in the reachability_map should only be done if\nthe existing reach level is lower than the provided one. If the node is\nnot yet present in the reachability map, insert it no matter what", "tree": {"sha": "e74d64a9f7829347a178380c15ae92a0712a35cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e74d64a9f7829347a178380c15ae92a0712a35cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23fc3ff7fe9405797d5961f7792540d3f487a287", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23fc3ff7fe9405797d5961f7792540d3f487a287", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23fc3ff7fe9405797d5961f7792540d3f487a287", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23fc3ff7fe9405797d5961f7792540d3f487a287/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfb5f548cee6874be343d3a337e9779ac30a5eb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb5f548cee6874be343d3a337e9779ac30a5eb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfb5f548cee6874be343d3a337e9779ac30a5eb5"}], "stats": {"total": 99, "additions": 88, "deletions": 11}, "files": [{"sha": "3a44ce0cc0ef9c650c3918f9f4975a77ca36e1d0", "filename": "gcc/rust/privacy/rust-privacy-ctx.cc", "status": "modified", "additions": 61, "deletions": 5, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fc3ff7fe9405797d5961f7792540d3f487a287/gcc%2Frust%2Fprivacy%2Frust-privacy-ctx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fc3ff7fe9405797d5961f7792540d3f487a287/gcc%2Frust%2Fprivacy%2Frust-privacy-ctx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-privacy-ctx.cc?ref=23fc3ff7fe9405797d5961f7792540d3f487a287", "patch": "@@ -17,19 +17,75 @@\n // <http://www.gnu.org/licenses/>.\n \n #include \"rust-privacy-ctx.h\"\n+#include \"selftest.h\"\n \n namespace Rust {\n namespace Privacy {\n-void\n-PrivacyContext::insert_reachability (const Analysis::NodeMapping &mapping,\n+static ReachLevel\n+insert_if_higher (ReachLevel new_level,\n+\t\t  std::unordered_map<HirId, ReachLevel>::iterator &existing)\n+{\n+  if (new_level > existing->second)\n+    existing->second = new_level;\n+\n+  return existing->second;\n+}\n+\n+ReachLevel\n+PrivacyContext::update_reachability (const Analysis::NodeMapping &mapping,\n \t\t\t\t     ReachLevel reach)\n-{}\n+{\n+  auto existing_reach = reachability_map.find (mapping.get_hirid ());\n+  if (existing_reach != reachability_map.end ())\n+    return insert_if_higher (reach, existing_reach);\n+\n+  reachability_map.insert ({mapping.get_hirid (), reach});\n+  return reach;\n+}\n \n const ReachLevel *\n PrivacyContext::lookup_reachability (const Analysis::NodeMapping &mapping)\n {\n-  return nullptr;\n-}\n+  auto existing_reach = reachability_map.find (mapping.get_hirid ());\n+  if (existing_reach == reachability_map.end ())\n+    return nullptr;\n \n+  return &existing_reach->second;\n+}\n } // namespace Privacy\n } // namespace Rust\n+\n+#if CHECKING_P\n+namespace selftest {\n+static void\n+update_reachability_test (void)\n+{\n+  auto ctx = Rust::Privacy::PrivacyContext ();\n+  // Bogus values for the mappings\n+  auto mapping = Rust::Analysis::NodeMapping (15, 15, 15, 15);\n+\n+  auto new_level\n+    = ctx.update_reachability (mapping, Rust::Privacy::ReachLevel::Unreachable);\n+\n+  ASSERT_EQ (new_level, Rust::Privacy::ReachLevel::Unreachable);\n+\n+  ASSERT_TRUE (ctx.lookup_reachability (mapping));\n+  ASSERT_EQ (*ctx.lookup_reachability (mapping),\n+\t     Rust::Privacy::ReachLevel::Unreachable);\n+\n+  new_level\n+    = ctx.update_reachability (mapping, Rust::Privacy::ReachLevel::Reachable);\n+\n+  ASSERT_EQ (new_level, Rust::Privacy::ReachLevel::Reachable);\n+  ASSERT_TRUE (ctx.lookup_reachability (mapping));\n+  ASSERT_EQ (*ctx.lookup_reachability (mapping),\n+\t     Rust::Privacy::ReachLevel::Reachable);\n+}\n+\n+void\n+rust_privacy_ctx_test (void)\n+{\n+  update_reachability_test ();\n+}\n+} // namespace selftest\n+#endif // !CHECKING_P"}, {"sha": "7626df300e7b2f6714160e2163d26d4789e39443", "filename": "gcc/rust/privacy/rust-privacy-ctx.h", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fc3ff7fe9405797d5961f7792540d3f487a287/gcc%2Frust%2Fprivacy%2Frust-privacy-ctx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fc3ff7fe9405797d5961f7792540d3f487a287/gcc%2Frust%2Fprivacy%2Frust-privacy-ctx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-privacy-ctx.h?ref=23fc3ff7fe9405797d5961f7792540d3f487a287", "patch": "@@ -16,6 +16,9 @@\n // along with GCC; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+#ifndef RUST_PRIVACY_CTX_H\n+#define RUST_PRIVACY_CTX_H\n+\n #include \"rust-hir-map.h\"\n #include \"rust-privacy-check.h\"\n \n@@ -36,13 +39,19 @@ class PrivacyContext\n {\n public:\n   /**\n-   * Insert a new resolved visibility for a given node\n+   * Insert a new resolved visibility for a given node. If the node is already\n+   * present in the reachability map, then its visibility will only be updated\n+   * if the given visibility is higher.\n    *\n    * @param mappings Mappings of the node to store the reach level for\n    * @param reach Level of reachability for the given node\n+   *\n+   * @return The new reachability level for this node. If this was the first\n+   * time inserting this node, then return `reach`. Otherwise, return `reach` or\n+   * the existing reach level if it was higher.\n    */\n-  void insert_reachability (const Analysis::NodeMapping &mapping,\n-\t\t\t    ReachLevel reach);\n+  ReachLevel update_reachability (const Analysis::NodeMapping &mapping,\n+\t\t\t\t  ReachLevel reach);\n \n   /**\n    * Lookup the visibility of an already declared Node\n@@ -59,3 +68,12 @@ class PrivacyContext\n };\n } // namespace Privacy\n } // namespace Rust\n+\n+#if CHECKING_P\n+namespace selftest {\n+void\n+rust_privacy_ctx_test (void);\n+}\n+#endif // !CHECKING_P\n+\n+#endif // !RUST_PRIVACY_CTX_H"}, {"sha": "1876222e1b4567d16f08214a4d77c1a31d29ac9e", "filename": "gcc/rust/privacy/rust-reachability.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fc3ff7fe9405797d5961f7792540d3f487a287/gcc%2Frust%2Fprivacy%2Frust-reachability.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fc3ff7fe9405797d5961f7792540d3f487a287/gcc%2Frust%2Fprivacy%2Frust-reachability.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-reachability.cc?ref=23fc3ff7fe9405797d5961f7792540d3f487a287", "patch": "@@ -63,14 +63,14 @@ ReachabilityVisitor::visit (HIR::StructStruct &struct_item)\n   if (struct_item.get_visibility ().get_vis_type () == HIR::Visibility::NONE)\n     struct_reach = ReachLevel::Reachable;\n \n-  // FIXME: Here we want to update only if the visibility is higher\n-  ctx.insert_reachability (struct_item.get_mappings (), struct_reach);\n+  struct_reach\n+    = ctx.update_reachability (struct_item.get_mappings (), struct_reach);\n \n   // FIXME: We need to also visit the fields as they might have their own set\n   // of reachability levels\n \n   for (auto &field : struct_item.get_fields ())\n-    ctx.insert_reachability (field.get_mappings (), struct_reach);\n+    ctx.update_reachability (field.get_mappings (), struct_reach);\n \n   // FIXME: How do we get the constructor from `struct_item`? We need to update\n   // its visibility as well. Probably by keeping a reference to the TypeCtx?"}, {"sha": "c7469412392460682af6eedc86d7e711d5a86055", "filename": "gcc/rust/rust-lang.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fc3ff7fe9405797d5961f7792540d3f487a287/gcc%2Frust%2Frust-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fc3ff7fe9405797d5961f7792540d3f487a287/gcc%2Frust%2Frust-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-lang.cc?ref=23fc3ff7fe9405797d5961f7792540d3f487a287", "patch": "@@ -32,8 +32,10 @@\n #include \"convert.h\"\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n+\n #include \"selftest.h\"\n #include \"rust-cfg-parser.h\"\n+#include \"rust-privacy-ctx.h\"\n \n #include <mpfr.h>\n // note: header files must be in this order or else forward declarations don't\n@@ -455,6 +457,7 @@ run_rust_tests ()\n   // Call tests for the rust frontend here\n   simple_assert ();\n   rust_cfg_parser_test ();\n+  rust_privacy_ctx_test ();\n }\n } // namespace selftest\n "}]}