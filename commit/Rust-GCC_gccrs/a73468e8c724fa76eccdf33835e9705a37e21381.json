{"sha": "a73468e8c724fa76eccdf33835e9705a37e21381", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTczNDY4ZThjNzI0ZmE3NmVjY2RmMzM4MzVlOTcwNWEzN2UyMTM4MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-04-09T10:26:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-04-09T10:26:13Z"}, "message": "re PR middle-end/89998 (ICE: verify_gimple failed in printf-return-value)\n\n\tPR tree-optimization/89998\n\t* gimple-ssa-sprintf.c (try_substitute_return_value): Use lhs type\n\tinstead of integer_type_node if possible, don't add ranges if return\n\ttype is not compatible with int.\n\t* gimple-fold.c (gimple_fold_builtin_sprintf,\n\tgimple_fold_builtin_snprintf): Use lhs type instead of hardcoded\n\tinteger_type_node.\n\n\t* gcc.c-torture/compile/pr89998-1.c: New test.\n\t* gcc.c-torture/compile/pr89998-2.c: New test.\n\nFrom-SVN: r270224", "tree": {"sha": "c3c993e2eb3474b5c54bb81a3cc2a3e1f059865d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3c993e2eb3474b5c54bb81a3cc2a3e1f059865d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a73468e8c724fa76eccdf33835e9705a37e21381", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73468e8c724fa76eccdf33835e9705a37e21381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a73468e8c724fa76eccdf33835e9705a37e21381", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73468e8c724fa76eccdf33835e9705a37e21381/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c67e69c0dea67fab1ef32e8b78bf24cc1b3f06a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c67e69c0dea67fab1ef32e8b78bf24cc1b3f06a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c67e69c0dea67fab1ef32e8b78bf24cc1b3f06a"}], "stats": {"total": 97, "additions": 78, "deletions": 19}, "files": [{"sha": "d0d6abc7c58c779c6a025026b3f0d07ada357e46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73468e8c724fa76eccdf33835e9705a37e21381/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73468e8c724fa76eccdf33835e9705a37e21381/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a73468e8c724fa76eccdf33835e9705a37e21381", "patch": "@@ -1,3 +1,13 @@\n+2019-04-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/89998\n+\t* gimple-ssa-sprintf.c (try_substitute_return_value): Use lhs type\n+\tinstead of integer_type_node if possible, don't add ranges if return\n+\ttype is not compatible with int.\n+\t* gimple-fold.c (gimple_fold_builtin_sprintf,\n+\tgimple_fold_builtin_snprintf): Use lhs type instead of hardcoded\n+\tinteger_type_node.\n+\n 2019-04-09  Martin Liska  <mliska@suse.cz>\n \n \t* Makefile.in: Use GENERATOR_CFLAGS for all generators."}, {"sha": "a9afc4b392f52e179c005cf99bb8d09e1619016c", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73468e8c724fa76eccdf33835e9705a37e21381/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73468e8c724fa76eccdf33835e9705a37e21381/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=a73468e8c724fa76eccdf33835e9705a37e21381", "patch": "@@ -3231,11 +3231,10 @@ gimple_fold_builtin_sprintf (gimple_stmt_iterator *gsi)\n \tgimple_set_no_warning (repl, true);\n \n       gimple_seq_add_stmt_without_update (&stmts, repl);\n-      if (gimple_call_lhs (stmt))\n+      if (tree lhs = gimple_call_lhs (stmt))\n \t{\n-\t  repl = gimple_build_assign (gimple_call_lhs (stmt),\n-\t\t\t\t      build_int_cst (integer_type_node,\n-\t\t\t\t\t\t     strlen (fmt_str)));\n+\t  repl = gimple_build_assign (lhs, build_int_cst (TREE_TYPE (lhs),\n+\t\t\t\t\t\t\t  strlen (fmt_str)));\n \t  gimple_seq_add_stmt_without_update (&stmts, repl);\n \t  gsi_replace_with_seq_vops (gsi, stmts);\n \t  /* gsi now points at the assignment to the lhs, get a\n@@ -3285,12 +3284,12 @@ gimple_fold_builtin_sprintf (gimple_stmt_iterator *gsi)\n \tgimple_set_no_warning (repl, true);\n \n       gimple_seq_add_stmt_without_update (&stmts, repl);\n-      if (gimple_call_lhs (stmt))\n+      if (tree lhs = gimple_call_lhs (stmt))\n \t{\n-\t  if (!useless_type_conversion_p (integer_type_node,\n+\t  if (!useless_type_conversion_p (TREE_TYPE (lhs),\n \t\t\t\t\t  TREE_TYPE (orig_len)))\n-\t    orig_len = fold_convert (integer_type_node, orig_len);\n-\t  repl = gimple_build_assign (gimple_call_lhs (stmt), orig_len);\n+\t    orig_len = fold_convert (TREE_TYPE (lhs), orig_len);\n+\t  repl = gimple_build_assign (lhs, orig_len);\n \t  gimple_seq_add_stmt_without_update (&stmts, repl);\n \t  gsi_replace_with_seq_vops (gsi, stmts);\n \t  /* gsi now points at the assignment to the lhs, get a\n@@ -3370,10 +3369,10 @@ gimple_fold_builtin_snprintf (gimple_stmt_iterator *gsi)\n       gimple_seq stmts = NULL;\n       gimple *repl = gimple_build_call (fn, 2, dest, fmt);\n       gimple_seq_add_stmt_without_update (&stmts, repl);\n-      if (gimple_call_lhs (stmt))\n+      if (tree lhs = gimple_call_lhs (stmt))\n \t{\n-\t  repl = gimple_build_assign (gimple_call_lhs (stmt),\n-\t\t\t\t      build_int_cst (integer_type_node, len));\n+\t  repl = gimple_build_assign (lhs,\n+\t\t\t\t      build_int_cst (TREE_TYPE (lhs), len));\n \t  gimple_seq_add_stmt_without_update (&stmts, repl);\n \t  gsi_replace_with_seq_vops (gsi, stmts);\n \t  /* gsi now points at the assignment to the lhs, get a\n@@ -3422,12 +3421,12 @@ gimple_fold_builtin_snprintf (gimple_stmt_iterator *gsi)\n       gimple_seq stmts = NULL;\n       gimple *repl = gimple_build_call (fn, 2, dest, orig);\n       gimple_seq_add_stmt_without_update (&stmts, repl);\n-      if (gimple_call_lhs (stmt))\n+      if (tree lhs = gimple_call_lhs (stmt))\n \t{\n-\t  if (!useless_type_conversion_p (integer_type_node,\n+\t  if (!useless_type_conversion_p (TREE_TYPE (lhs),\n \t\t\t\t\t  TREE_TYPE (orig_len)))\n-\t    orig_len = fold_convert (integer_type_node, orig_len);\n-\t  repl = gimple_build_assign (gimple_call_lhs (stmt), orig_len);\n+\t    orig_len = fold_convert (TREE_TYPE (lhs), orig_len);\n+\t  repl = gimple_build_assign (lhs, orig_len);\n \t  gimple_seq_add_stmt_without_update (&stmts, repl);\n \t  gsi_replace_with_seq_vops (gsi, stmts);\n \t  /* gsi now points at the assignment to the lhs, get a"}, {"sha": "de60241379ad2cc0642d24b1a9649bb6a16fde0b", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73468e8c724fa76eccdf33835e9705a37e21381/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73468e8c724fa76eccdf33835e9705a37e21381/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=a73468e8c724fa76eccdf33835e9705a37e21381", "patch": "@@ -3692,10 +3692,10 @@ try_substitute_return_value (gimple_stmt_iterator *gsi,\n \t are badly declared.  */\n       && !stmt_ends_bb_p (info.callstmt))\n     {\n-      tree cst = build_int_cst (integer_type_node, retval[0]);\n+      tree cst = build_int_cst (lhs ? TREE_TYPE (lhs) : integer_type_node,\n+\t\t\t\tretval[0]);\n \n-      if (lhs == NULL_TREE\n-\t  && info.nowrite)\n+      if (lhs == NULL_TREE && info.nowrite)\n \t{\n \t  /* Remove the call to the bounded function with a zero size\n \t     (e.g., snprintf(0, 0, \"%i\", 123)) if there is no lhs.  */\n@@ -3736,7 +3736,7 @@ try_substitute_return_value (gimple_stmt_iterator *gsi,\n \t    }\n \t}\n     }\n-  else if (lhs)\n+  else if (lhs && types_compatible_p (TREE_TYPE (lhs), integer_type_node))\n     {\n       bool setrange = false;\n "}, {"sha": "29d1a81c8d8260fa810579a34f5acd5663156478", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73468e8c724fa76eccdf33835e9705a37e21381/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73468e8c724fa76eccdf33835e9705a37e21381/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a73468e8c724fa76eccdf33835e9705a37e21381", "patch": "@@ -1,5 +1,9 @@\n 2019-04-09  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/89998\n+\t* gcc.c-torture/compile/pr89998-1.c: New test.\n+\t* gcc.c-torture/compile/pr89998-2.c: New test.\n+\n \tPR target/90015\n \t* gcc.target/riscv/interrupt-conflict-mode.c (foo): Adjust expected\n \tdiagnostics."}, {"sha": "87be00ce3ce85b4e4c4c849da57622e5084797bd", "filename": "gcc/testsuite/gcc.c-torture/compile/pr89998-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73468e8c724fa76eccdf33835e9705a37e21381/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr89998-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73468e8c724fa76eccdf33835e9705a37e21381/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr89998-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr89998-1.c?ref=a73468e8c724fa76eccdf33835e9705a37e21381", "patch": "@@ -0,0 +1,42 @@\n+/* PR tree-optimization/89998 */\n+\n+unsigned int sprintf (char *str, const char *fmt, ...);\n+unsigned int snprintf (char *str, __SIZE_TYPE__ len, const char *fmt, ...);\n+\n+int\n+f1 (char *s)\n+{\n+  return sprintf (s, \"foo\");\n+}\n+\n+int\n+f2 (char *s)\n+{\n+  return sprintf (s, \"%d\", 123);\n+}\n+\n+int\n+f3 (int *p, char *s)\n+{\n+  const char *t = \"bar\";\n+  return sprintf (s, \"%s\", t);\n+}\n+\n+int\n+f4 (char *s)\n+{\n+  return snprintf (s, 8, \"foo\");\n+}\n+\n+int\n+f5 (char *s)\n+{\n+  return snprintf (s, 8, \"%d\", 123);\n+}\n+\n+int\n+f6 (int *p, char *s)\n+{\n+  const char *t = \"bar\";\n+  return snprintf (s, 8, \"%s\", t);\n+}"}, {"sha": "19e318b890591b1f93ae11ea01106d837d5d099c", "filename": "gcc/testsuite/gcc.c-torture/compile/pr89998-2.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73468e8c724fa76eccdf33835e9705a37e21381/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr89998-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73468e8c724fa76eccdf33835e9705a37e21381/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr89998-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr89998-2.c?ref=a73468e8c724fa76eccdf33835e9705a37e21381", "patch": "@@ -0,0 +1,4 @@\n+/* PR tree-optimization/89998 */\n+/* { dg-additional-options \"-fno-printf-return-value\" } */\n+\n+#include \"pr89998-1.c\""}]}