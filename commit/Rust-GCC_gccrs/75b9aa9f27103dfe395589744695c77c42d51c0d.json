{"sha": "75b9aa9f27103dfe395589744695c77c42d51c0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzViOWFhOWYyNzEwM2RmZTM5NTU4OTc0NDY5NWM3N2M0MmQ1MWMwZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-01-15T09:46:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-01-15T09:46:10Z"}, "message": "re PR tree-optimization/19060 (Miscompiling of if and \"long long\")\n\n\tPR tree-optimization/19060\n\t* tree-ssa-dom.c (extract_range_from_cond) <case LT_EXPR, GT_EXPR>:\n\tReturn 0 if op1 <= TYPE_MIN_VALUE () resp. op1 >= TYPE_MAX_VALUE ().\n\t(simplify_cond_and_lookup_avail_expr): Add assert for dummy == 0\n\tand handle extract_range_from_cond returning false.\n\t* fold-const.c (fold): Optimize comparisons with min/max even for\n\twidth > HOST_BITS_PER_WIDE_INT.\n\n\t* gcc.c-torture/execute/20050104-1.c: New test.\n\nFrom-SVN: r93692", "tree": {"sha": "eee50ef2164840adf38bebf57be5788622dbb666", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eee50ef2164840adf38bebf57be5788622dbb666"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75b9aa9f27103dfe395589744695c77c42d51c0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75b9aa9f27103dfe395589744695c77c42d51c0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75b9aa9f27103dfe395589744695c77c42d51c0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75b9aa9f27103dfe395589744695c77c42d51c0d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ba9f2a1e4ff069b076c47ec74e84d4a15380f3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ba9f2a1e4ff069b076c47ec74e84d4a15380f3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ba9f2a1e4ff069b076c47ec74e84d4a15380f3a"}], "stats": {"total": 136, "additions": 109, "deletions": 27}, "files": [{"sha": "8aec528dbe91e03f06ab6b0b8ed82ea730d19bbd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75b9aa9f27103dfe395589744695c77c42d51c0d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75b9aa9f27103dfe395589744695c77c42d51c0d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75b9aa9f27103dfe395589744695c77c42d51c0d", "patch": "@@ -1,3 +1,13 @@\n+2005-01-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/19060\n+\t* tree-ssa-dom.c (extract_range_from_cond) <case LT_EXPR, GT_EXPR>:\n+\tReturn 0 if op1 <= TYPE_MIN_VALUE () resp. op1 >= TYPE_MAX_VALUE ().\n+\t(simplify_cond_and_lookup_avail_expr): Add assert for dummy == 0\n+\tand handle extract_range_from_cond returning false.\n+\t* fold-const.c (fold): Optimize comparisons with min/max even for\n+\twidth > HOST_BITS_PER_WIDE_INT.\n+\n 2005-01-15  Ralf Corsepius  <ralf.corsepius@rtems.org>\n \n \t* config/mips/rtems.h (MIPS_DEFAULT_GVALUE): Set to 0."}, {"sha": "24bd28bb6b9674f7e7d8f7212d20bffe9c634c42", "filename": "gcc/fold-const.c", "status": "modified", "additions": 52, "deletions": 20, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75b9aa9f27103dfe395589744695c77c42d51c0d/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75b9aa9f27103dfe395589744695c77c42d51c0d/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=75b9aa9f27103dfe395589744695c77c42d51c0d", "patch": "@@ -8439,28 +8439,57 @@ fold (tree expr)\n \n \tif (TREE_CODE (arg1) == INTEGER_CST\n \t    && ! TREE_CONSTANT_OVERFLOW (arg1)\n-\t    && width <= HOST_BITS_PER_WIDE_INT\n+\t    && width <= 2 * HOST_BITS_PER_WIDE_INT\n \t    && (INTEGRAL_TYPE_P (TREE_TYPE (arg1))\n \t\t|| POINTER_TYPE_P (TREE_TYPE (arg1))))\n \t  {\n-\t    unsigned HOST_WIDE_INT signed_max;\n-\t    unsigned HOST_WIDE_INT max, min;\n+\t    HOST_WIDE_INT signed_max_hi;\n+\t    unsigned HOST_WIDE_INT signed_max_lo;\n+\t    unsigned HOST_WIDE_INT max_hi, max_lo, min_hi, min_lo;\n \n-\t    signed_max = ((unsigned HOST_WIDE_INT) 1 << (width - 1)) - 1;\n-\n-\t    if (TYPE_UNSIGNED (TREE_TYPE (arg1)))\n+\t    if (width <= HOST_BITS_PER_WIDE_INT)\n \t      {\n-\t        max = ((unsigned HOST_WIDE_INT) 2 << (width - 1)) - 1;\n-\t\tmin = 0;\n+\t\tsigned_max_lo = ((unsigned HOST_WIDE_INT) 1 << (width - 1))\n+\t\t\t\t- 1;\n+\t\tsigned_max_hi = 0;\n+\t\tmax_hi = 0;\n+\n+\t\tif (TYPE_UNSIGNED (TREE_TYPE (arg1)))\n+\t\t  {\n+\t\t    max_lo = ((unsigned HOST_WIDE_INT) 2 << (width - 1)) - 1;\n+\t\t    min_lo = 0;\n+\t\t    min_hi = 0;\n+\t\t  }\n+\t\telse\n+\t\t  {\n+\t\t    max_lo = signed_max_lo;\n+\t\t    min_lo = ((unsigned HOST_WIDE_INT) -1 << (width - 1));\n+\t\t    min_hi = -1;\n+\t\t  }\n \t      }\n \t    else\n \t      {\n-\t        max = signed_max;\n-\t\tmin = ((unsigned HOST_WIDE_INT) -1 << (width - 1));\n+\t\twidth -= HOST_BITS_PER_WIDE_INT;\n+\t\tsigned_max_lo = -1;\n+\t\tsigned_max_hi = ((unsigned HOST_WIDE_INT) 1 << (width - 1))\n+\t\t\t\t- 1;\n+\t\tmax_lo = -1;\n+\t\tmin_lo = 0;\n+\n+\t\tif (TYPE_UNSIGNED (TREE_TYPE (arg1)))\n+\t\t  {\n+\t\t    max_hi = ((unsigned HOST_WIDE_INT) 2 << (width - 1)) - 1;\n+\t\t    min_hi = 0;\n+\t\t  }\n+\t\telse\n+\t\t  {\n+\t\t    max_hi = signed_max_hi;\n+\t\t    min_hi = ((unsigned HOST_WIDE_INT) -1 << (width - 1));\n+\t\t  }\n \t      }\n \n-\t    if (TREE_INT_CST_HIGH (arg1) == 0\n-\t\t&& TREE_INT_CST_LOW (arg1) == max)\n+\t    if ((unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (arg1) == max_hi\n+\t\t&& TREE_INT_CST_LOW (arg1) == max_lo)\n \t      switch (code)\n \t\t{\n \t\tcase GT_EXPR:\n@@ -8481,8 +8510,9 @@ fold (tree expr)\n \t\tdefault:\n \t\t  break;\n \t\t}\n-\t    else if (TREE_INT_CST_HIGH (arg1) == 0\n-\t\t     && TREE_INT_CST_LOW (arg1) == max - 1)\n+\t    else if ((unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (arg1)\n+\t\t     == max_hi\n+\t\t     && TREE_INT_CST_LOW (arg1) == max_lo - 1)\n \t      switch (code)\n \t\t{\n \t\tcase GT_EXPR:\n@@ -8494,8 +8524,9 @@ fold (tree expr)\n \t\tdefault:\n \t\t  break;\n \t\t}\n-\t    else if (TREE_INT_CST_HIGH (arg1) == (min ? -1 : 0)\n-\t\t     && TREE_INT_CST_LOW (arg1) == min)\n+\t    else if ((unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (arg1)\n+\t\t     == min_hi\n+\t\t     && TREE_INT_CST_LOW (arg1) == min_lo)\n \t      switch (code)\n \t\t{\n \t\tcase LT_EXPR:\n@@ -8513,8 +8544,9 @@ fold (tree expr)\n \t\tdefault:\n \t\t  break;\n \t\t}\n-\t    else if (TREE_INT_CST_HIGH (arg1) == (min ? -1 : 0)\n-\t\t     && TREE_INT_CST_LOW (arg1) == min + 1)\n+\t    else if ((unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (arg1)\n+\t\t     == min_hi\n+\t\t     && TREE_INT_CST_LOW (arg1) == min_lo + 1)\n \t      switch (code)\n \t\t{\n \t\tcase GE_EXPR:\n@@ -8528,8 +8560,8 @@ fold (tree expr)\n \t\t}\n \n \t    else if (!in_gimple_form\n-\t\t     && TREE_INT_CST_HIGH (arg1) == 0\n-\t\t     && TREE_INT_CST_LOW (arg1) == signed_max\n+\t\t     && TREE_INT_CST_HIGH (arg1) == signed_max_hi\n+\t\t     && TREE_INT_CST_LOW (arg1) == signed_max_lo\n \t\t     && TYPE_UNSIGNED (TREE_TYPE (arg1))\n \t\t     /* signed_type does not work on pointer types.  */\n \t\t     && INTEGRAL_TYPE_P (TREE_TYPE (arg1)))"}, {"sha": "0e05c9e83e2acea8cb484401eda74b5edfa38edf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75b9aa9f27103dfe395589744695c77c42d51c0d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75b9aa9f27103dfe395589744695c77c42d51c0d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=75b9aa9f27103dfe395589744695c77c42d51c0d", "patch": "@@ -1,3 +1,8 @@\n+2005-01-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/19060\n+\t* gcc.c-torture/execute/20050104-1.c: New test.\n+\n 2005-01-15  Bud Davis  <bdavis9659@comcast.net>\n \n \tPR fortran/18983"}, {"sha": "6083e9c0686f006e4e0572df3e6e155573dced28", "filename": "gcc/testsuite/gcc.c-torture/execute/20050104-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75b9aa9f27103dfe395589744695c77c42d51c0d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050104-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75b9aa9f27103dfe395589744695c77c42d51c0d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050104-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050104-1.c?ref=75b9aa9f27103dfe395589744695c77c42d51c0d", "patch": "@@ -0,0 +1,23 @@\n+/* PR tree-optimization/19060 */\n+\n+void abort (void);\n+\n+static\n+long long min ()\n+{\n+  return -__LONG_LONG_MAX__ - 1;\n+}\n+\n+void\n+foo (long long j)\n+{\n+  if (j > 10 || j < min ())\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  foo (10);\n+  return 0;\n+}"}, {"sha": "36cac29b3dedd0b552afde8d2bd3705115da5cb6", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75b9aa9f27103dfe395589744695c77c42d51c0d/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75b9aa9f27103dfe395589744695c77c42d51c0d/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=75b9aa9f27103dfe395589744695c77c42d51c0d", "patch": "@@ -1,5 +1,5 @@\n /* SSA Dominator optimizations for trees\n-   Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n    Contributed by Diego Novillo <dnovillo@redhat.com>\n \n This file is part of GCC.\n@@ -2088,10 +2088,18 @@ simplify_cond_and_lookup_avail_expr (tree stmt,\n \t      tree tmp_high, tmp_low;\n \t      int dummy;\n \n-\t      /* The last element has not been processed.  Process it now.  */\n-\t      extract_range_from_cond (element->cond, &tmp_high,\n-\t\t\t\t       &tmp_low, &dummy);\n-\t  \n+\t      /* The last element has not been processed.  Process it now.\n+\t\t record_range should ensure for cond inverted is not set.\n+\t\t This call can only fail if cond is x < min or x > max,\n+\t\t which fold should have optimized into false.\n+\t\t If that doesn't happen, just pretend all values are\n+\t\t in the range.  */\n+\t      if (! extract_range_from_cond (element->cond, &tmp_high,\n+\t\t\t\t\t     &tmp_low, &dummy))\n+\t\tgcc_unreachable ();\n+\t      else\n+\t\tgcc_assert (dummy == 0);\n+\n \t      /* If this is the only element, then no merging is necessary, \n \t\t the high/low values from extract_range_from_cond are all\n \t\t we need.  */\n@@ -3204,8 +3212,10 @@ extract_range_from_cond (tree cond, tree *hi_p, tree *lo_p, int *inverted_p)\n       break;\n \n     case GT_EXPR:\n-      low = int_const_binop (PLUS_EXPR, op1, integer_one_node, 1);\n       high = TYPE_MAX_VALUE (type);\n+      if (!tree_int_cst_lt (op1, high))\n+\treturn 0;\n+      low = int_const_binop (PLUS_EXPR, op1, integer_one_node, 1);\n       inverted = 0;\n       break;\n \n@@ -3216,8 +3226,10 @@ extract_range_from_cond (tree cond, tree *hi_p, tree *lo_p, int *inverted_p)\n       break;\n \n     case LT_EXPR:\n-      high = int_const_binop (MINUS_EXPR, op1, integer_one_node, 1);\n       low = TYPE_MIN_VALUE (type);\n+      if (!tree_int_cst_equal (low, op1))\n+\treturn 0;\n+      high = int_const_binop (MINUS_EXPR, op1, integer_one_node, 1);\n       inverted = 0;\n       break;\n "}]}