{"sha": "aa7349ebe29b32bc77bdbe2d029a88b618b54757", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE3MzQ5ZWJlMjliMzJiYzc3YmRiZTJkMDI5YTg4YjYxOGI1NDc1Nw==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2006-01-18T00:15:37Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2006-01-18T00:15:37Z"}, "message": "call.c (convert_like_real): When issuing conversion warnings, depend on OPT_Wconversion.\n\n2006-01-17  Eric Christopher  <echristo@apple.com>\n\n        * call.c (convert_like_real): When issuing conversion\n        warnings, depend on OPT_Wconversion.\n        * cvt.c (build_expr_type_conversion): Ditto.\n\n2006-01-17  Eric Christopher  <echristo@apple.com>\n\n        * g++.old-deja/g++.warn/impint.C: Add -Wconversion.\n        * g++.old-deja/g++.warn/impint2.C: Ditto.\n        * g++.old-deja/g++.other/null1.C: Ditto.\n        * g++.dg/warn/conv2.C: Ditto.\n        * g++.dg/warn/conv4.C: New file.\n\nFrom-SVN: r109847", "tree": {"sha": "d1f62655e00731adbd8cc30bad4105c83a48ba6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1f62655e00731adbd8cc30bad4105c83a48ba6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa7349ebe29b32bc77bdbe2d029a88b618b54757", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa7349ebe29b32bc77bdbe2d029a88b618b54757", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa7349ebe29b32bc77bdbe2d029a88b618b54757", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa7349ebe29b32bc77bdbe2d029a88b618b54757/comments", "author": null, "committer": null, "parents": [{"sha": "ef7befe0d055b477863ac067e332d2e0333d3913", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef7befe0d055b477863ac067e332d2e0333d3913", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef7befe0d055b477863ac067e332d2e0333d3913"}], "stats": {"total": 191, "additions": 114, "deletions": 77}, "files": [{"sha": "da860eb6b389f97f95435cceafd944641d43772d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 50, "deletions": 45, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7349ebe29b32bc77bdbe2d029a88b618b54757/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7349ebe29b32bc77bdbe2d029a88b618b54757/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aa7349ebe29b32bc77bdbe2d029a88b618b54757", "patch": "@@ -1,3 +1,9 @@\n+2006-01-17  Eric Christopher  <echristo@apple.com>\n+\n+\t* call.c (convert_like_real): When issuing conversion\n+\twarnings, depend on OPT_Wconversion.\n+\t* cvt.c (build_expr_type_conversion): Ditto.\n+\n 2006-01-17  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* name-lookup.c (lookup_namespace_name): Remove.\n@@ -90,7 +96,7 @@\n \tc_lex_return_raw_strings.\n \t(cp_lexer_get_preprocessor_token): Always initialize keyword\n \tand pragma_kind fields.  Handle CPP_PRAGMA.\n-\t(cp_lexer_consume_token): Don't allow CPP_PRAGMA_EOL when \n+\t(cp_lexer_consume_token): Don't allow CPP_PRAGMA_EOL when\n \tin_pragma is set.\n \t(cp_lexer_handle_pragma): Remove.  Update callers to cp_parser_pragma.\n \t(cp_lexer_print_token) <CPP_PRAGMA>: Don't print as a string.\n@@ -125,7 +131,7 @@\n \tPR c++/25492\n \t* name-lookup.c (push_class_level_binding): When a derived class\n \tprovides a type binding, eliminate any type binding from a base\n-\tclass. \n+\tclass.\n \n \tPR c++/25625\n \t* repo.c (repo_emit_p): Always instantiate static data members\n@@ -178,9 +184,9 @@\n \t* cxx-pretty-print.c (pp_cxx_constant): New.  Print\n \tstring-literal in parens if input program says so.\n \t(pp_cxx_primary_expression): Hand off constant printing to\n-\tpp_cxx_constant. \n+\tpp_cxx_constant.\n \t(pp_cxx_pretty_printer_init): Set pp->c_base.constant.\n-\t(pp_cxx_expression): Use pp_cxx_constant for literals. \n+\t(pp_cxx_expression): Use pp_cxx_constant for literals.\n \t* error.c (dump_expr): Use pp_constant for literals.\n \n 2005-12-29  Nathan Sidwell  <nathan@codesourcery.com>\n@@ -194,7 +200,7 @@\n \tPR c++/25439\n \t* decl.c (grokdeclarator): Remove dead code.\n \t* ptree.c (cxx_print_xnode): Handle BASELINK.\n-\t* parser.c (make_id_declarator): Add sfk parameter.  \n+\t* parser.c (make_id_declarator): Add sfk parameter.\n \t(cp_parser_direct_declarator): Do not pass TYPE_DECLs to\n \tmake_id_declarator.\n \t(cp_parser_declarator_id): Simplify BASELINKs here.\n@@ -259,7 +265,7 @@\n \t* decl.c (use_eh_spec_block): New function.\n \t(store_parm_decls): Use it.\n \t(finish_function): Likewise.\n-\t\n+\n 2005-12-19  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/24278\n@@ -269,7 +275,7 @@\n \tPR c++/24915\n \t* class.c (add_method): Do not treat templates as identical unless\n \ttheir return types are the same.\n-\t\n+\n 2005-12-12  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/25300\n@@ -278,7 +284,7 @@\n \n 2005-12-10  Mark Mitchell  <mark@codesourcery.com>\n \n-\tPR c++/25337 \n+\tPR c++/25337\n \t* pt.c (tsubst_copy_and_build): Permit dependent types for the\n \tobject in a class member access expression.\n \n@@ -289,9 +295,9 @@\n \tmethods of Java classes\n \n 2005-12-08  Th\ufffdodore Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>\n-\t\n+\n \t* call.c (build_conditional_expr): Print types in error messages.\n-\t\n+\n 2005-12-07  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \t* expr.c (cxx_expand_expr): Call gcc_unreachable instead of abort.\n@@ -344,9 +350,9 @@\n 2005-12-02  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* parser.c (cp_lexer_new_main): Usr GGC_RESIZEVEC instead of\n-\tggc_realloc. \n+\tggc_realloc.\n \t(cp_parser_template_argument_list): Use XRESIZEVEC instead of\n-\txrealloc. \n+\txrealloc.\n \t* class.c (pushclass): Likewise.\n \n 2005-12-02  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n@@ -364,7 +370,7 @@\n \t(cp_parser_template_argument_list): Use XNEWVEC, nto xmalloc.\n \t(cp_parser_sizeof_operand): Likewise.\n \t* repo.c (open_repo_file, open_repo_file): Likewise.\n-\t\n+\n 2005-12-01  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* parser.c (cp_parser_make_typename_type): Call make_typename_type\n@@ -384,7 +390,7 @@\n 2005-11-30  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/21123\n-\t* cp-gimplify.c (cp_genericize_r): Don't dereference invisible reference \n+\t* cp-gimplify.c (cp_genericize_r): Don't dereference invisible reference\n \tparms in a thunk.\n \n 2005-11-30  Ben Elliston  <bje@au.ibm.com>\n@@ -449,7 +455,7 @@\n \n \tPR c++/21667\n \t* typeck.c (build_array_ref): Avoid code duplicate.  Use common\n-\tC/C++ diagnostic function warn_array_subscript_with_type_char. \n+\tC/C++ diagnostic function warn_array_subscript_with_type_char.\n \n 2005-11-21  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n@@ -475,7 +481,7 @@\n \tPR c++/8355\n \t* decl.c (grokfndecl): Set up DECL_TEMPLATE_INFO before calling\n \tset_decl_namespace.\n-\t* name-lookup.c (set_decl_namespace): \n+\t* name-lookup.c (set_decl_namespace):\n \n 2005-11-18  Mike Stump  <mrs@apple.com>\n \n@@ -543,7 +549,7 @@\n \t* parser.c (cp_token): Add ambiguous_p.\n \t(cp_lexer_get_preprocessor_token): Set it.\n \t(cp_parser_diagnose_invalid_type_name): Avoid duplicate messages\n-\twhen a qualified name uses an invalid scope. \n+\twhen a qualified name uses an invalid scope.\n \t(cp_parser_primary_expression): Print ambiguous candidates.\n \t(cp_parser_type_parameter): Adjust comment to reflect new\n \tparameter name for cp_parser_lookup_name.\n@@ -556,7 +562,7 @@\n \twhen a lookup is ambiguous.\n \t(cp_parser_lookup_name_simple): Adjust comment to reflect new\n \tparameter name for cp_parser_lookup_name.\n-\t\n+\n 2005-11-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/24780\n@@ -578,7 +584,7 @@\n 2005-11-08  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/21123\n-\t* method.c (use_thunk): Use build_cplus_new instead of \n+\t* method.c (use_thunk): Use build_cplus_new instead of\n \tforce_target_expr.\n \n 2005-11-06  Jason Merrill  <jason@redhat.com>\n@@ -606,7 +612,7 @@\n \t(build_base_field): Adjust call.\n \t(layout_class_type): Likewise.  Maintain\n \tsizeof_biggest_empty_class.\n-\t\n+\n 2005-11-05  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* decl2.c, init.c, typeck.c: Fix comment typos.\n@@ -667,7 +673,7 @@\n \n \tPR c++/24569\n \t* pt.c (instantiate_decl): Use cp_finish_decl, not\n-\tfinish_static_data_member_decl. \n+\tfinish_static_data_member_decl.\n \n 2005-10-28  Andrew Pinski  <pinskia@physics.uc.edu>\n \n@@ -694,13 +700,13 @@\n \t* decl.c (start_decl): Check that the decl is an\n \terror_mark_node before getting the type.\n \tRemove the check for the decl's type being an\n-\terror_mark_node.  \n+\terror_mark_node.\n \n 2005-10-21  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/24260\n \t* parser.c (cp_parser_init_declarator): Pass attributes to\n-\tgrokfield. \n+\tgrokfield.\n \n 2005-10-20  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -780,7 +786,7 @@\n \n \tPR c++/22173\n \t* typeck.c (check_template_keyword): Fix thinko.\n-\t\t\n+\n 2005-10-16  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c++/23959\n@@ -803,7 +809,7 @@\n \tbuild_qualified_name.\n \t(cp_parser_id_expression): Default *template_p to\n \ttemplate_keyword_p.  Check for invalid uses of the template\n-\tkeyword.  \n+\tkeyword.\n \t(cp_parser_postfix_expression): Eliminate special handling for\n \tqualified names.  Adjust call to cp_parser_primary_expression.\n \t(cp_parser_postfix_dot_deref_expression): Adjust call to\n@@ -812,21 +818,21 @@\n \t(cp_parser_template_argument): Adjust use of\n \tcp_parser_primary_expression.  Remove call to\n \tfinish_qualified_id_expr.\n-\t(cp_parser_lookup_name): Use build_qualified_name. \n+\t(cp_parser_lookup_name): Use build_qualified_name.\n \t* pt.c (tsubst): Use build_qualified_name.\n \t(tsubst_qualified_id): Likewise.  Adjust call to\n \tfinish_qualified_id_expr.\n \t(tsubst_copy): Use build_qualified_name.\n \t(tsubst_copy_and_build): Adjusts call to finish_id_expression and\n-\tfinish_class_member_access_expr. \n+\tfinish_class_member_access_expr.\n \t* semantics.c (finish_non_static_data_member): Use\n \tbuild_qualified_name.\n \t(finish_qualified_id_expr): Add template_p and template_arg_p\n-\tparameters. \n+\tparameters.\n \t(finish_id_expression): Remove qualifiying_class parameter.  Add\n \ttemplate_p, done, address_p, and template_arg_p.  Use\n \tbuild_qualified_name.  Adjust calls to\n-\tfinish_class_member_acess_expr.  \n+\tfinish_class_member_acess_expr.\n \t* tree.c (build_qualified_name): New function.\n \t* typeck.c (check_template_keyword): New function.\n \t(finish_class_member_access_expr): Add template_p argument.  Check\n@@ -874,7 +880,7 @@\n \t* call.c (build_new_method_call): Correct pretty-printing of\n \tdestructor names.\n \t* pt.c (tsubst_qualified_id): Recognize invalid uses of \"~T\" as an\n-\tidentifier. \n+\tidentifier.\n \n \tPR c++/23694\n \t* decl.c (start_method): Return error_mark_node for errors.\n@@ -938,7 +944,7 @@\n \n \tPR c++/24052\n \t* error.c (dump_expr): Pass LABEL_DECL to dump_decl.  Print\n-\tan ADDR_EXPR of a LABEL_DECL as &&. \n+\tan ADDR_EXPR of a LABEL_DECL as &&.\n \n 2005-10-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n@@ -1060,7 +1066,7 @@\n \ttreat forward declarations of classes as templates just because\n \twe're processing_template_decl.\n \t* pt.c (tsubst_decl): Clear DECL_TEMPLATE_INFO for friend\n-\tfunctions. \n+\tfunctions.\n \n 2005-09-26  Jason Merrill  <jason@redhat.com>\n \n@@ -1159,7 +1165,7 @@\n \tPR c++/16171\n \t* mangle.c (find_substitution): Do not use special substitutions\n \tfor identifiers not in std::.\n-\t\n+\n 2005-09-13  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/23839\n@@ -1170,7 +1176,7 @@\n \n \tPR c++/23842\n \t* pt.c (tsubst_default_argument): Do treat default argument\n-\texpressions as occurring in the context of the function called. \n+\texpressions as occurring in the context of the function called.\n \n 2005-09-12  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -1496,7 +1502,7 @@\n \tPR c++/8271\n         * pt.c (unify) <METHOD_TYPE>: Check this-pointer cv-qualifiers\n \texplicitly.\n-\t\n+\n 2005-08-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/21799\n@@ -1584,7 +1590,7 @@\n 2005-07-27  Devang Patel  <dpatel@apple.com>\n \n \t* name-lookup.c (pushtag): Do no set DECL_IGNORED_P bit.\n-\t\n+\n 2005-07-25  Ian Lance Taylor  <ian@airs.com>\n \n \t* ptree.c (cxx_print_identifier): Print a leading space if the\n@@ -1622,7 +1628,7 @@\n \t* semantics.c (perform_koenig_lookup): For dependent calls, just\n \treturn the set of functions we've found so far. Later, it will be\n \taugmented by those found through argument-dependent lookup.\n-\t* name-lookup.c (lookup_arg_dependent): Implement DR 164 by removing \n+\t* name-lookup.c (lookup_arg_dependent): Implement DR 164 by removing\n \tthe optimization that skips namespaces where the functions were\n \toriginally found.\n \n@@ -1729,7 +1735,7 @@\n \t* cp-tree.h (comp_ptr_ttypes_const): Declare.\n \t* typeck.c (comp_ptr_ttypes_const): Give it external linkage.\n \tReturn bool.\n-\t\n+\n 2005-07-12  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \t    Nathan Sidwell  <nathan@codesourcery.com>\n \n@@ -1757,9 +1763,9 @@\n \t* cp-tree (init_shadowed_var_for_decl): Add prototype.\n \n 2005-07-08  Daniel Berlin  <dberlin@dberlin.org>\n-\t\n+\n \t* Make-lang.in: Add gt-cp-lang.h.\n-\t(cp-lang.o): Ditto.\t\n+\t(cp-lang.o): Ditto.\n \t* class.c (create_vtable_ptr): Stop setting DECL_ASSEMBLER_NAME on\n \tthe field.\n \t* config-lang.in: Add cp-lang.c to gtfiles.\n@@ -1778,7 +1784,7 @@\n \t* decl.c (duplicate_decls): Update for new/updated structures.\n \t(poplevel): Use SET_DECL_SHADOWED_FOR_VAR.\n \t* decl2.c (start_static_initialization_or_destruction): Deal with\n-\tpriority. \n+\tpriority.\n \t* pt.c (tsubst_decl): Check TS_DECL_WRTL before doing\n \tSET_DECL_RTL.\n \t* tree.c (handle_init_priority_attribute): Handle priority.\n@@ -1803,7 +1809,7 @@\n \t* Makefile.in (class.o, decl2.o): Adjust dependencies.\n \t* class.c: Include tree-dump.h.\n \t* decl2.c: Include tree-dump.h.\n-\t\n+\n 2005-07-02  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* dump.c: Use dump_string_field.\n@@ -1834,8 +1840,8 @@\n \ttypeck2.c: Use '+' flag instead of %J, cp_error_at, cp_warning_at\n \tor cp_pedwarn_at.  Mark up some diagnostic strings with N_.\n \n-2005-06-30  Daniel Berlin  <dberlin@dberlin.org> \n-\t\n+2005-06-30  Daniel Berlin  <dberlin@dberlin.org>\n+\n \t* decl.c (require_complete_types_for_parms): Call relayout_decl\n \tinstead of layout_decl.\n \n@@ -3694,4 +3700,3 @@\n \tPR middle-end/17544\n \t* decl.c (finish_function): Fix comment.  Annotate the compiler\n \tgenerated return with the current file name and line 0.\n-"}, {"sha": "67d368cd8015a34ed6e7b578c54db158f717a51b", "filename": "gcc/cp/call.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7349ebe29b32bc77bdbe2d029a88b618b54757/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7349ebe29b32bc77bdbe2d029a88b618b54757/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=aa7349ebe29b32bc77bdbe2d029a88b618b54757", "patch": "@@ -1204,7 +1204,7 @@ reference_binding (tree rto, tree rfrom, tree expr, int flags)\n   if (related_p && !at_least_as_qualified_p (to, from))\n     return NULL;\n \n-  conv = implicit_conversion (to, from, expr, /*c_cast_p=*/false, \n+  conv = implicit_conversion (to, from, expr, /*c_cast_p=*/false,\n \t\t\t      flags);\n   if (!conv)\n     return NULL;\n@@ -1393,7 +1393,7 @@ add_function_candidate (struct z_candidate **candidates,\n \t      parmtype = build_pointer_type (parmtype);\n \t    }\n \n-\t  t = implicit_conversion (parmtype, argtype, arg, \n+\t  t = implicit_conversion (parmtype, argtype, arg,\n \t\t\t\t   /*c_cast_p=*/false, flags);\n \t}\n       else\n@@ -1472,7 +1472,7 @@ add_conv_candidate (struct z_candidate **candidates, tree fn, tree obj,\n       else if (parmnode == void_list_node)\n \tbreak;\n       else if (parmnode)\n-\tt = implicit_conversion (TREE_VALUE (parmnode), argtype, arg, \n+\tt = implicit_conversion (TREE_VALUE (parmnode), argtype, arg,\n \t\t\t\t /*c_cast_p=*/false, flags);\n       else\n \t{\n@@ -1527,7 +1527,7 @@ build_builtin_candidate (struct z_candidate **candidates, tree fnname,\n       if (! args[i])\n \tbreak;\n \n-      t = implicit_conversion (types[i], argtypes[i], args[i], \n+      t = implicit_conversion (types[i], argtypes[i], args[i],\n \t\t\t       /*c_cast_p=*/false, flags);\n       if (! t)\n \t{\n@@ -1545,7 +1545,7 @@ build_builtin_candidate (struct z_candidate **candidates, tree fnname,\n     {\n       convs[2] = convs[1];\n       convs[1] = convs[0];\n-      t = implicit_conversion (boolean_type_node, argtypes[2], args[2], \n+      t = implicit_conversion (boolean_type_node, argtypes[2], args[2],\n \t\t\t       /*c_cast_p=*/false, flags);\n       if (t)\n \tconvs[0] = t;\n@@ -2605,7 +2605,7 @@ build_user_type_conversion_1 (tree totype, tree expr, int flags)\n \t      conversion *ics\n \t\t= implicit_conversion (totype,\n \t\t\t\t       TREE_TYPE (TREE_TYPE (cand->fn)),\n-\t\t\t\t       0, \n+\t\t\t\t       0,\n \t\t\t\t       /*c_cast_p=*/false, convflags);\n \n \t      cand->second_conv = ics;\n@@ -4201,21 +4201,21 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n       if (ARITHMETIC_TYPE_P (t) && expr == null_node)\n \t{\n \t  if (fn)\n-\t    warning (0, \"passing NULL to non-pointer argument %P of %qD\",\n+\t    warning (OPT_Wconversion, \"passing NULL to non-pointer argument %P of %qD\",\n \t\t     argnum, fn);\n \t  else\n-\t    warning (0, \"converting to non-pointer type %qT from NULL\", t);\n+\t    warning (OPT_Wconversion, \"converting to non-pointer type %qT from NULL\", t);\n \t}\n \n       /* Warn about assigning a floating-point type to an integer type.  */\n       if (TREE_CODE (TREE_TYPE (expr)) == REAL_TYPE\n \t  && TREE_CODE (t) == INTEGER_TYPE)\n \t{\n \t  if (fn)\n-\t    warning (0, \"passing %qT for argument %P to %qD\",\n+\t    warning (OPT_Wconversion, \"passing %qT for argument %P to %qD\",\n \t\t     TREE_TYPE (expr), argnum, fn);\n \t  else\n-\t    warning (0, \"converting to %qT from %qT\", t, TREE_TYPE (expr));\n+\t    warning (OPT_Wconversion, \"converting to %qT from %qT\", t, TREE_TYPE (expr));\n \t}\n     }\n \n@@ -5273,7 +5273,7 @@ build_new_method_call (tree instance, tree fns, tree args,\n   orig_fns = fns;\n   orig_args = args;\n \n-  /* Dismantle the baselink to collect all the information we need.  */  \n+  /* Dismantle the baselink to collect all the information we need.  */\n   if (!conversion_path)\n     conversion_path = BASELINK_BINFO (fns);\n   access_binfo = BASELINK_ACCESS_BINFO (fns);\n@@ -6302,7 +6302,7 @@ can_convert_arg (tree to, tree from, tree arg, int flags)\n   /* Get the high-water mark for the CONVERSION_OBSTACK.  */\n   p = conversion_obstack_alloc (0);\n \n-  t  = implicit_conversion (to, from, arg, /*c_cast_p=*/false, \n+  t  = implicit_conversion (to, from, arg, /*c_cast_p=*/false,\n \t\t\t    flags);\n   ok_p = (t && !t->bad_p);\n "}, {"sha": "119ba18d070ba486bcb06251491f7d6a05108cfa", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7349ebe29b32bc77bdbe2d029a88b618b54757/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7349ebe29b32bc77bdbe2d029a88b618b54757/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=aa7349ebe29b32bc77bdbe2d029a88b618b54757", "patch": "@@ -1058,7 +1058,7 @@ build_expr_type_conversion (int desires, tree expr, bool complain)\n   if (expr == null_node\n       && (desires & WANT_INT)\n       && !(desires & WANT_NULL))\n-    warning (0, \"converting NULL to non-pointer type\");\n+    warning (OPT_Wconversion, \"converting NULL to non-pointer type\");\n \n   basetype = TREE_TYPE (expr);\n "}, {"sha": "150f899b19343367e06c73f4195b3abaeb3a18fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7349ebe29b32bc77bdbe2d029a88b618b54757/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7349ebe29b32bc77bdbe2d029a88b618b54757/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aa7349ebe29b32bc77bdbe2d029a88b618b54757", "patch": "@@ -1,3 +1,11 @@\n+2006-01-17  Eric Christopher  <echristo@apple.com>\n+\n+\t* g++.old-deja/g++.warn/impint.C: Add -Wconversion.\n+\t* g++.old-deja/g++.warn/impint2.C: Ditto.\n+\t* g++.old-deja/g++.other/null1.C: Ditto.\n+\t* g++.dg/warn/conv2.C: Ditto.\n+\t* g++.dg/warn/conv4.C: New file.\n+\n 2006-01-17  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* g++.dg/abi/mangle25.C: Fix dg-do line, add a closing brace.\n@@ -90,7 +98,7 @@\n \n 2006-01-16  Ben Elliston  <bje@au.ibm.com>\n \n-\t* gcc.dg/dfp/dfp.exp: Correct FSF address. \n+\t* gcc.dg/dfp/dfp.exp: Correct FSF address.\n \t* gcc.misc-tests/dectest.exp: Ditto.\n \n 2006-01-15  Ian Lance Taylor  <ian@airs.com>\n@@ -250,7 +258,7 @@\n \tgcc.dg/dfp/operator-unary.c, gcc.dg/dfp/altivec-types.c,\n \tgcc.dg/dfp/cast.c, gcc.dg/dfp/typespec.c,\n \tgcc.dg/dfp/wtr-conversion-1.c: New tests.\n-\t\n+\n 2006-01-11  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/25734\n@@ -275,7 +283,7 @@\n \t* gcc.dg/torture/pr25706-1.c: New test.\n \n 2006-01-11  Paolo Bonzini  <bonzini@gnu.org>\n-        \n+\n         PR tree-optimization/23109\n         PR tree-optimization/23948\n         PR tree-optimization/24123\n@@ -630,7 +638,7 @@\n 2005-12-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* g++.dg/rtti/tinfo1.C: Scan for \".global\" also.\n-\t\n+\n \tPR testsuite/25442\n \t* gcc.dg/ipa/ipa-1.c, gcc.dg/ipa/ipa-2.c, gcc.dg/ipa/ipa-3.c,\n \tgcc.dg/ipa/ipa-4.c, gcc.dg/ipa/ipa-5.c: Skip if -fpic/-fPIC."}, {"sha": "4dfeb86283af08a12c1ba566d6f00d4ae162ee95", "filename": "gcc/testsuite/g++.dg/warn/conv2.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7349ebe29b32bc77bdbe2d029a88b618b54757/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fconv2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7349ebe29b32bc77bdbe2d029a88b618b54757/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fconv2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fconv2.C?ref=aa7349ebe29b32bc77bdbe2d029a88b618b54757", "patch": "@@ -1,3 +1,4 @@\n // PR c++/13932\n+// { dg-options \"-Wconversion\" }\n \n int i = 1.; // { dg-warning \"converting\" }"}, {"sha": "a15ef8bf1905920c00e783819de8b59db1d5c82f", "filename": "gcc/testsuite/g++.dg/warn/conv4.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7349ebe29b32bc77bdbe2d029a88b618b54757/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fconv4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7349ebe29b32bc77bdbe2d029a88b618b54757/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fconv4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fconv4.C?ref=aa7349ebe29b32bc77bdbe2d029a88b618b54757", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do compile }\n+\n+// This file should compile cleanly by default and not warn on the conversions.\n+int func1(int i)\n+{\n+  return i;\n+}\n+\n+int main()\n+{\n+  float f;\n+  long l;\n+  unsigned long ul;\n+\n+  f = 1.5f;\n+\n+  l = f;\n+  ul = -1;\n+  func1(f);\n+\n+  return 0;\n+}"}, {"sha": "536f759e6a197fed3107d37be47f97659f50510f", "filename": "gcc/testsuite/g++.old-deja/g++.other/null1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7349ebe29b32bc77bdbe2d029a88b618b54757/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnull1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7349ebe29b32bc77bdbe2d029a88b618b54757/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnull1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnull1.C?ref=aa7349ebe29b32bc77bdbe2d029a88b618b54757", "patch": "@@ -1,4 +1,5 @@\n // { dg-do link  }\n+// { dg-options \"-Wconversion\" }\n \n #include <cstddef>\n "}, {"sha": "1c7f0eb66b17c2bd6af3f97ca3affac0d3f3733a", "filename": "gcc/testsuite/g++.old-deja/g++.warn/impint.C", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7349ebe29b32bc77bdbe2d029a88b618b54757/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.warn%2Fimpint.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7349ebe29b32bc77bdbe2d029a88b618b54757/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.warn%2Fimpint.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.warn%2Fimpint.C?ref=aa7349ebe29b32bc77bdbe2d029a88b618b54757", "patch": "@@ -1,5 +1,5 @@\n // { dg-do assemble  }\n-\n+// { dg-options \"-Wconversion\" }\n // Copyright (C) 2000 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 24 Feb 2000 <nathan@codesourcery.com>\n \n@@ -37,21 +37,20 @@ void fn ()\n \n   int k1 = 3.5;     // { dg-warning \"\" } double to int\n   int k2 = 3.5f;    // { dg-warning \"\" } float to int\n-  \n+\n   j1 = 3.5;         // { dg-warning \"\" } double to int\n   j2 = 3.5f;        // { dg-warning \"\" } float to int\n-  \n+\n   foo (3.5);        // { dg-warning \"\" } double to int\n   foo (3.5f);       // { dg-warning \"\" } float to int\n-  \n+\n   wibble (3.5);     // { dg-warning \"\" } double to int\n   wibble (3.5f);    // { dg-warning \"\" } float to int\n   wibble (1, 3.5);  // { dg-warning \"\" } double to int\n   wibble (1, 3.5f); // { dg-warning \"\" } float to int\n   wibble (3.5, 1);  // { dg-warning \"\" } double to int\n   wibble (3.5f, 1); // { dg-warning \"\" } float to int\n-  \n+\n   punk ();          // { dg-warning \"\" } double to int\n   rock (1);         // { dg-warning \"\" } double to int\n }\n-"}, {"sha": "d5fbc55541fb94719293f685a868624b8d2461e8", "filename": "gcc/testsuite/g++.old-deja/g++.warn/impint2.C", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7349ebe29b32bc77bdbe2d029a88b618b54757/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.warn%2Fimpint2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7349ebe29b32bc77bdbe2d029a88b618b54757/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.warn%2Fimpint2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.warn%2Fimpint2.C?ref=aa7349ebe29b32bc77bdbe2d029a88b618b54757", "patch": "@@ -1,4 +1,5 @@\n // { dg-do assemble  }\n+// { dg-options \"-Wconversion\" }\n \n // Copyright (C) 2000 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 6 Mar 2000 <nathan@codesourcery.com>\n@@ -31,15 +32,15 @@ void fn ()\n   int j2 (3.5f);    // { dg-warning \"\" } float to int\n \n   int k2 = 3.5f;    // { dg-warning \"\" } float to int\n-  \n+\n   j2 = 3.5f;        // { dg-warning \"\" } float to int\n-  \n+\n   foo (3.5f);       // { dg-warning \"\" } float to int\n-  \n+\n   wibble (3.5f);    // { dg-warning \"\" } float to int\n   wibble (1, 3.5f); // { dg-warning \"\" } float to int\n   wibble (3.5f, 1); // { dg-warning \"\" } float to int\n-  \n+\n   punk ();          // { dg-warning \"\" } float to int\n   rock (1);         // { dg-warning \"\" } float to int\n }\n@@ -56,13 +57,13 @@ void foo ()\n   int j2 (-1);\n \n   int k2 = -1;\n-  \n+\n   j2 = -1;\n-  \n+\n   foo (-1);\n-  \n-  wibble (-1);   \n+\n+  wibble (-1);\n   wibble (1, -1);\n   wibble (-1, 1);\n-  \n+\n }"}]}