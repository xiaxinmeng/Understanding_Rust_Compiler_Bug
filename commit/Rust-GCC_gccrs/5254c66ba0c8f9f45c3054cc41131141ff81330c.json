{"sha": "5254c66ba0c8f9f45c3054cc41131141ff81330c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI1NGM2NmJhMGM4ZjlmNDVjMzA1NGNjNDExMzExNDFmZjgxMzMwYw==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-10-13T08:16:42Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-10-13T08:16:42Z"}, "message": "In libobjc/: 2010-10-13 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2010-10-13  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        PR libobjc/23214\n        * init.c (objc_init_statics): Do not skip the initialization of a\n        statics list if the first object has already been initialized; in\n        the case of Protocols, while the first one may have been\n        initialized, some others may not have been initialized yet.\n\nIn gcc/testsuite/:\n2010-10-13  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        PR libobjc/23214\n        * objc.dg/pr23214.m: New.\n\nFrom-SVN: r165414", "tree": {"sha": "90a905402a30b7ee4f28d659a1e3f13ab50b2d19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90a905402a30b7ee4f28d659a1e3f13ab50b2d19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5254c66ba0c8f9f45c3054cc41131141ff81330c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5254c66ba0c8f9f45c3054cc41131141ff81330c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5254c66ba0c8f9f45c3054cc41131141ff81330c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5254c66ba0c8f9f45c3054cc41131141ff81330c/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b4ca4f9e328cbce0f3aa9b13931900b2e5bd752e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4ca4f9e328cbce0f3aa9b13931900b2e5bd752e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4ca4f9e328cbce0f3aa9b13931900b2e5bd752e"}], "stats": {"total": 76, "additions": 58, "deletions": 18}, "files": [{"sha": "0c0803ee0e511a7810eb5e5cfe6f6638fdc7527b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5254c66ba0c8f9f45c3054cc41131141ff81330c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5254c66ba0c8f9f45c3054cc41131141ff81330c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5254c66ba0c8f9f45c3054cc41131141ff81330c", "patch": "@@ -1,3 +1,8 @@\n+2010-10-13  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR libobjc/23214\n+\t* objc.dg/pr23214.m: New.\n+\n 2010-10-12  Michael Eager  <eager@eagercon.com>\n \n \tPR testsuite/45856"}, {"sha": "946dbebd9424e6dbb380c56067c0164850b93770", "filename": "gcc/testsuite/objc.dg/pr23214.m", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5254c66ba0c8f9f45c3054cc41131141ff81330c/gcc%2Ftestsuite%2Fobjc.dg%2Fpr23214.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5254c66ba0c8f9f45c3054cc41131141ff81330c/gcc%2Ftestsuite%2Fobjc.dg%2Fpr23214.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fpr23214.m?ref=5254c66ba0c8f9f45c3054cc41131141ff81330c", "patch": "@@ -0,0 +1,27 @@\n+/* Test that there is no problem initializing multiple static\n+   Protocol instances.  */\n+\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+#include <objc/Protocol.h>\n+\n+@protocol A\n+@end\n+\n+@protocol B \n+@end\n+\n+@interface Dummy : Object <B>\n+@end\n+\n+int main ()\n+{\n+  [@protocol(A) class];\n+  [@protocol(B) class];\n+\n+  return 0;\n+}\n+\n+@implementation Dummy\n+@end"}, {"sha": "29edebd4ca172e3ed0968e101b7fa5da47312065", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5254c66ba0c8f9f45c3054cc41131141ff81330c/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5254c66ba0c8f9f45c3054cc41131141ff81330c/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=5254c66ba0c8f9f45c3054cc41131141ff81330c", "patch": "@@ -1,3 +1,11 @@\n+2010-10-13  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR libobjc/23214\n+\t* init.c (objc_init_statics): Do not skip the initialization of a\n+\tstatics list if the first object has already been initialized; in\n+\tthe case of Protocols, while the first one may have been\n+\tinitialized, some others may not have been initialized yet.\n+\n 2010-10-13  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* Makefile.in (OBJC_DEPRECATED_H): Added"}, {"sha": "87122577829b3ac63e919fd8cd5043c31846b0d5", "filename": "libobjc/init.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5254c66ba0c8f9f45c3054cc41131141ff81330c/libobjc%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5254c66ba0c8f9f45c3054cc41131141ff81330c/libobjc%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Finit.c?ref=5254c66ba0c8f9f45c3054cc41131141ff81330c", "patch": "@@ -473,28 +473,28 @@ objc_init_statics (void)\n \t  Class class = objc_lookup_class (statics->class_name);\n \n \t  if (! class)\n-\t    module_initialized = 0;\n-\t  /* Actually, the static's class_pointer will be NULL when we\n-             haven't been here before.  However, the comparison is to be\n-             reminded of taking into account class posing and to think about\n-             possible semantics...  */\n-\t  else if (class != statics->instances[0]->class_pointer)\n \t    {\n+\t      /* It is unfortunate that this will cause all the\n+\t\t statics initialization to be done again (eg, if we\n+\t\t already initialized constant strings, and are now\n+\t\t initializing protocols, setting module_initialized to\n+\t\t 0 would cause constant strings to be initialized\n+\t\t again).  It would be good to be able to track if we\n+\t\t have already initialized some of them.  */\n+\t      module_initialized = 0;\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Note that if this is a list of Protocol objects, some\n+\t\t of them may have been initialized already (because\n+\t\t they were attached to classes or categories, and the\n+\t\t class/category loading code automatically fixes them\n+\t\t up), and some of them may not.  We really need to go\n+\t\t through the whole list to be sure!  */\n \t      id *inst;\n \n \t      for (inst = &statics->instances[0]; *inst; inst++)\n-\t\t{\n-\t\t  (*inst)->class_pointer = class;\n-\n-\t\t  /* ??? Make sure the object will not be freed.  With\n-                     refcounting, invoke `-retain'.  Without refcounting, do\n-                     nothing and hope that `-free' will never be invoked.  */\n-\n-\t\t  /* ??? Send the object an `-initStatic' or something to\n-                     that effect now or later on?  What are the semantics of\n-                     statically allocated instances, besides the trivial\n-                     NXConstantString, anyway?  */\n-\t\t}\n+\t\t(*inst)->class_pointer = class;\n \t    }\n \t}\n       if (module_initialized)"}]}