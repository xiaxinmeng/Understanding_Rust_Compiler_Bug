{"sha": "0382aaa033235ef268e234700355434690993c29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM4MmFhYTAzMzIzNWVmMjY4ZTIzNDcwMDM1NTQzNDY5MDk5M2MyOQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-10-07T17:49:46Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-10-07T17:49:46Z"}, "message": "re PR c/59717 (better warning when using functions without including appropriate header files)\n\n\tPR c/59717\n\t* c-decl.c (header_for_builtin_fn): New function.\n\t(implicitly_declare): Suggest which header to include.\n\n\t* gcc.dg/pr59717.c: New test.\n\nFrom-SVN: r215979", "tree": {"sha": "a5528e44707789ed3bf72d85c52e62098a85d987", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5528e44707789ed3bf72d85c52e62098a85d987"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0382aaa033235ef268e234700355434690993c29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0382aaa033235ef268e234700355434690993c29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0382aaa033235ef268e234700355434690993c29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0382aaa033235ef268e234700355434690993c29/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "12e99c38381472257cf47427a777db397c9ed14e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12e99c38381472257cf47427a777db397c9ed14e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12e99c38381472257cf47427a777db397c9ed14e"}], "stats": {"total": 485, "additions": 482, "deletions": 3}, "files": [{"sha": "3a09125b15d157a8e100b47c65a0f912e4e245d5", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0382aaa033235ef268e234700355434690993c29/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0382aaa033235ef268e234700355434690993c29/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=0382aaa033235ef268e234700355434690993c29", "patch": "@@ -1,3 +1,9 @@\n+2014-10-07  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/59717\n+\t* c-decl.c (header_for_builtin_fn): New function.\n+\t(implicitly_declare): Suggest which header to include.\n+\n 2014-10-07  Marek Polacek  <polacek@redhat.com>\n \n \t* c-convert.c (convert): Use error_operand_p."}, {"sha": "e23284a6cf073d62b0d61cbe0adb76ad9af6e2f5", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 194, "deletions": 3, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0382aaa033235ef268e234700355434690993c29/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0382aaa033235ef268e234700355434690993c29/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=0382aaa033235ef268e234700355434690993c29", "patch": "@@ -2968,6 +2968,189 @@ implicit_decl_warning (location_t loc, tree id, tree olddecl)\n     }\n }\n \n+/* This function represents mapping of a function code FCODE\n+   to its respective header.  */\n+\n+static const char *\n+header_for_builtin_fn (enum built_in_function fcode)\n+{\n+  switch (fcode)\n+    {\n+    CASE_FLT_FN (BUILT_IN_ACOS):\n+    CASE_FLT_FN (BUILT_IN_ACOSH):\n+    CASE_FLT_FN (BUILT_IN_ASIN):\n+    CASE_FLT_FN (BUILT_IN_ASINH):\n+    CASE_FLT_FN (BUILT_IN_ATAN):\n+    CASE_FLT_FN (BUILT_IN_ATANH):\n+    CASE_FLT_FN (BUILT_IN_ATAN2):\n+    CASE_FLT_FN (BUILT_IN_CBRT):\n+    CASE_FLT_FN (BUILT_IN_CEIL):\n+    CASE_FLT_FN (BUILT_IN_COPYSIGN):\n+    CASE_FLT_FN (BUILT_IN_COS):\n+    CASE_FLT_FN (BUILT_IN_COSH):\n+    CASE_FLT_FN (BUILT_IN_ERF):\n+    CASE_FLT_FN (BUILT_IN_ERFC):\n+    CASE_FLT_FN (BUILT_IN_EXP):\n+    CASE_FLT_FN (BUILT_IN_EXP2):\n+    CASE_FLT_FN (BUILT_IN_EXPM1):\n+    CASE_FLT_FN (BUILT_IN_FABS):\n+    CASE_FLT_FN (BUILT_IN_FDIM):\n+    CASE_FLT_FN (BUILT_IN_FLOOR):\n+    CASE_FLT_FN (BUILT_IN_FMA):\n+    CASE_FLT_FN (BUILT_IN_FMAX):\n+    CASE_FLT_FN (BUILT_IN_FMIN):\n+    CASE_FLT_FN (BUILT_IN_FMOD):\n+    CASE_FLT_FN (BUILT_IN_FREXP):\n+    CASE_FLT_FN (BUILT_IN_HYPOT):\n+    CASE_FLT_FN (BUILT_IN_ILOGB):\n+    CASE_FLT_FN (BUILT_IN_LDEXP):\n+    CASE_FLT_FN (BUILT_IN_LGAMMA):\n+    CASE_FLT_FN (BUILT_IN_LLRINT):\n+    CASE_FLT_FN (BUILT_IN_LLROUND):\n+    CASE_FLT_FN (BUILT_IN_LOG):\n+    CASE_FLT_FN (BUILT_IN_LOG10):\n+    CASE_FLT_FN (BUILT_IN_LOG1P):\n+    CASE_FLT_FN (BUILT_IN_LOG2):\n+    CASE_FLT_FN (BUILT_IN_LOGB):\n+    CASE_FLT_FN (BUILT_IN_LRINT):\n+    CASE_FLT_FN (BUILT_IN_LROUND):\n+    CASE_FLT_FN (BUILT_IN_MODF):\n+    CASE_FLT_FN (BUILT_IN_NAN):\n+    CASE_FLT_FN (BUILT_IN_NEARBYINT):\n+    CASE_FLT_FN (BUILT_IN_NEXTAFTER):\n+    CASE_FLT_FN (BUILT_IN_NEXTTOWARD):\n+    CASE_FLT_FN (BUILT_IN_POW):\n+    CASE_FLT_FN (BUILT_IN_REMAINDER):\n+    CASE_FLT_FN (BUILT_IN_REMQUO):\n+    CASE_FLT_FN (BUILT_IN_RINT):\n+    CASE_FLT_FN (BUILT_IN_ROUND):\n+    CASE_FLT_FN (BUILT_IN_SCALBLN):\n+    CASE_FLT_FN (BUILT_IN_SCALBN):\n+    CASE_FLT_FN (BUILT_IN_SIN):\n+    CASE_FLT_FN (BUILT_IN_SINH):\n+    CASE_FLT_FN (BUILT_IN_SINCOS):\n+    CASE_FLT_FN (BUILT_IN_SQRT):\n+    CASE_FLT_FN (BUILT_IN_TAN):\n+    CASE_FLT_FN (BUILT_IN_TANH):\n+    CASE_FLT_FN (BUILT_IN_TGAMMA):\n+    CASE_FLT_FN (BUILT_IN_TRUNC):\n+    case BUILT_IN_ISINF:\n+    case BUILT_IN_ISNAN:\n+      return \"<math.h>\";\n+    CASE_FLT_FN (BUILT_IN_CABS):\n+    CASE_FLT_FN (BUILT_IN_CACOS):\n+    CASE_FLT_FN (BUILT_IN_CACOSH):\n+    CASE_FLT_FN (BUILT_IN_CARG):\n+    CASE_FLT_FN (BUILT_IN_CASIN):\n+    CASE_FLT_FN (BUILT_IN_CASINH):\n+    CASE_FLT_FN (BUILT_IN_CATAN):\n+    CASE_FLT_FN (BUILT_IN_CATANH):\n+    CASE_FLT_FN (BUILT_IN_CCOS):\n+    CASE_FLT_FN (BUILT_IN_CCOSH):\n+    CASE_FLT_FN (BUILT_IN_CEXP):\n+    CASE_FLT_FN (BUILT_IN_CIMAG):\n+    CASE_FLT_FN (BUILT_IN_CLOG):\n+    CASE_FLT_FN (BUILT_IN_CONJ):\n+    CASE_FLT_FN (BUILT_IN_CPOW):\n+    CASE_FLT_FN (BUILT_IN_CPROJ):\n+    CASE_FLT_FN (BUILT_IN_CREAL):\n+    CASE_FLT_FN (BUILT_IN_CSIN):\n+    CASE_FLT_FN (BUILT_IN_CSINH):\n+    CASE_FLT_FN (BUILT_IN_CSQRT):\n+    CASE_FLT_FN (BUILT_IN_CTAN):\n+    CASE_FLT_FN (BUILT_IN_CTANH):\n+      return \"<complex.h>\";\n+    case BUILT_IN_MEMCHR:\n+    case BUILT_IN_MEMCMP:\n+    case BUILT_IN_MEMCPY:\n+    case BUILT_IN_MEMMOVE:\n+    case BUILT_IN_MEMSET:\n+    case BUILT_IN_STRCAT:\n+    case BUILT_IN_STRCHR:\n+    case BUILT_IN_STRCMP:\n+    case BUILT_IN_STRCPY:\n+    case BUILT_IN_STRCSPN:\n+    case BUILT_IN_STRLEN:\n+    case BUILT_IN_STRNCAT:\n+    case BUILT_IN_STRNCMP:\n+    case BUILT_IN_STRNCPY:\n+    case BUILT_IN_STRPBRK:\n+    case BUILT_IN_STRRCHR:\n+    case BUILT_IN_STRSPN:\n+    case BUILT_IN_STRSTR:\n+      return \"<string.h>\";\n+    case BUILT_IN_FPRINTF:\n+    case BUILT_IN_PUTC:\n+    case BUILT_IN_FPUTC:\n+    case BUILT_IN_FPUTS:\n+    case BUILT_IN_FSCANF:\n+    case BUILT_IN_FWRITE:\n+    case BUILT_IN_PRINTF:\n+    case BUILT_IN_PUTCHAR:\n+    case BUILT_IN_PUTS:\n+    case BUILT_IN_SCANF:\n+    case BUILT_IN_SNPRINTF:\n+    case BUILT_IN_SPRINTF:\n+    case BUILT_IN_SSCANF:\n+    case BUILT_IN_VFPRINTF:\n+    case BUILT_IN_VFSCANF:\n+    case BUILT_IN_VPRINTF:\n+    case BUILT_IN_VSCANF:\n+    case BUILT_IN_VSNPRINTF:\n+    case BUILT_IN_VSPRINTF:\n+    case BUILT_IN_VSSCANF:\n+      return \"<stdio.h>\";\n+    case BUILT_IN_ISALNUM:\n+    case BUILT_IN_ISALPHA:\n+    case BUILT_IN_ISBLANK:\n+    case BUILT_IN_ISCNTRL:\n+    case BUILT_IN_ISDIGIT:\n+    case BUILT_IN_ISGRAPH:\n+    case BUILT_IN_ISLOWER:\n+    case BUILT_IN_ISPRINT:\n+    case BUILT_IN_ISPUNCT:\n+    case BUILT_IN_ISSPACE:\n+    case BUILT_IN_ISUPPER:\n+    case BUILT_IN_ISXDIGIT:\n+    case BUILT_IN_TOLOWER:\n+    case BUILT_IN_TOUPPER:\n+      return \"<ctype.h>\";\n+    case BUILT_IN_ISWALNUM:\n+    case BUILT_IN_ISWALPHA:\n+    case BUILT_IN_ISWBLANK:\n+    case BUILT_IN_ISWCNTRL:\n+    case BUILT_IN_ISWDIGIT:\n+    case BUILT_IN_ISWGRAPH:\n+    case BUILT_IN_ISWLOWER:\n+    case BUILT_IN_ISWPRINT:\n+    case BUILT_IN_ISWPUNCT:\n+    case BUILT_IN_ISWSPACE:\n+    case BUILT_IN_ISWUPPER:\n+    case BUILT_IN_ISWXDIGIT:\n+    case BUILT_IN_TOWLOWER:\n+    case BUILT_IN_TOWUPPER:\n+      return \"<wctype.h>\";\n+    case BUILT_IN_ABORT:\n+    case BUILT_IN_ABS:\n+    case BUILT_IN_CALLOC:\n+    case BUILT_IN_EXIT:\n+    case BUILT_IN_FREE:\n+    case BUILT_IN_LABS:\n+    case BUILT_IN_LLABS:\n+    case BUILT_IN_MALLOC:\n+    case BUILT_IN_REALLOC:\n+    case BUILT_IN__EXIT2:\n+    case BUILT_IN_ALIGNED_ALLOC:\n+      return \"<stdlib.h>\";\n+    case BUILT_IN_IMAXABS:\n+      return \"<inttypes.h>\";\n+    case BUILT_IN_STRFTIME:\n+      return \"<time.h>\";\n+    default:\n+      return NULL;\n+    }\n+}\n+\n /* Generate an implicit declaration for identifier FUNCTIONID at LOC as a\n    function of type int ().  */\n \n@@ -3025,16 +3208,24 @@ implicitly_declare (location_t loc, tree functionid)\n \t\t\t\t\t\t      (TREE_TYPE (decl)));\n \t      if (!comptypes (newtype, TREE_TYPE (decl)))\n \t\t{\n-\t\t  warning_at (loc, 0, \"incompatible implicit declaration of \"\n-\t\t\t      \"built-in function %qD\", decl);\n+\t\t  bool warned = warning_at (loc, 0, \"incompatible implicit \"\n+\t\t\t\t\t    \"declaration of built-in \"\n+\t\t\t\t\t    \"function %qD\", decl);\n+\t\t  /* See if we can hint which header to include.  */\n+\t\t  const char *header\n+\t\t    = header_for_builtin_fn (DECL_FUNCTION_CODE (decl));\n+\t\t  if (header != NULL && warned)\n+\t\t    inform (loc, \"include %qs or provide a declaration of %qD\",\n+\t\t\t    header, decl);\n \t\t  newtype = TREE_TYPE (decl);\n \t\t}\n \t    }\n \t  else\n \t    {\n \t      if (!comptypes (newtype, TREE_TYPE (decl)))\n \t\t{\n-\t\t  error_at (loc, \"incompatible implicit declaration of function %qD\", decl);\n+\t\t  error_at (loc, \"incompatible implicit declaration of \"\n+\t\t\t    \"function %qD\", decl);\n \t\t  locate_old_decl (decl);\n \t\t}\n \t    }"}, {"sha": "dfc9a8bf7cd1f67ed4baf458f1a325019347aaa0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0382aaa033235ef268e234700355434690993c29/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0382aaa033235ef268e234700355434690993c29/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0382aaa033235ef268e234700355434690993c29", "patch": "@@ -1,3 +1,8 @@\n+2014-10-07  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/59717\n+\t* gcc.dg/pr59717.c: New test.\n+\n 2014-10-07  Marek Polacek  <polacek@redhat.com>\n \n \t* gcc.dg/guality/pr41616-1.c: Use -fgnu89-inline."}, {"sha": "948180c004a1a593ae6e545a3ca2fc665fc17fd8", "filename": "gcc/testsuite/gcc.dg/pr59717.c", "status": "added", "additions": 277, "deletions": 0, "changes": 277, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0382aaa033235ef268e234700355434690993c29/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59717.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0382aaa033235ef268e234700355434690993c29/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59717.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59717.c?ref=0382aaa033235ef268e234700355434690993c29", "patch": "@@ -0,0 +1,277 @@\n+/* PR c/59717 */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu11 -Wno-implicit-function-declaration\" } */\n+\n+void\n+math (double d, int *ex, double *dp)\n+{\n+  acos (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 8 } */\n+  acosh (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 10 } */\n+  asin (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 12 } */\n+  asinh (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 14 } */\n+  atan (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 16 } */\n+  atanh (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 18 } */\n+  atan2 (d, d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 20 } */\n+  cbrt (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 22 } */\n+  ceil (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 24 } */\n+  copysign (d, d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 26 } */\n+  cos (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 28 } */\n+  cosh (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 30 } */\n+  erf (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 32 } */\n+  erfc (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 34 } */\n+  exp (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 36 } */\n+  exp2 (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 38 } */\n+  expm1 (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 40 } */\n+  fabs (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 42 } */\n+  fdim (d, d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 44 } */\n+  floor (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 46 } */\n+  fma (d, d, d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 48 } */\n+  fmax (d, d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 50 } */\n+  fmin (d, d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 52 } */\n+  fmod (d, d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 54 } */\n+  frexp (d, ex); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 56 } */\n+  hypot (d, d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 58 } */\n+  /* We don't generate the warning for ilogb.  */\n+  ilogb (d);\n+  ldexp (d, *ex); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 62 } */\n+  lgamma (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 64 } */\n+  llrint (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 66 } */\n+  llround (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 68 } */\n+  log (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 70 } */\n+  log10 (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 72 } */\n+  log1p (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 74 } */\n+  log2 (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 76 } */\n+  logb (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 78 } */\n+  lrint (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 80 } */\n+  lround (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 82 } */\n+  modf (d, dp); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 84 } */\n+  nan (\"\"); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 86 } */\n+  nearbyint (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 88 } */\n+  nextafter (d, d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 90 } */\n+  nexttoward (d, 20.0L); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 92 } */\n+  pow (d, d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 94 } */\n+  remainder (d, d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 96 } */\n+  remquo (d, d, ex); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 98 } */\n+  rint (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 100 } */\n+  round (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 102 } */\n+  scalbln (d, 100L); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 104 } */\n+  scalbn (d, 100); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 106 } */\n+  sin (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 108 } */\n+  sinh (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 110 } */\n+  sincos (d, dp, dp); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 112 } */\n+  sqrt (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 114 } */\n+  tan (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 116 } */\n+  tanh (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 118 } */\n+  tgamma (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 120 } */\n+  trunc (d); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..math.h..\" \"\" { target *-*-* } 122 } */\n+}\n+\n+void\n+cmplx (double _Complex z)\n+{\n+  cabs (z); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..complex.h..\" \"\" { target *-*-* } 129 } */\n+  cacos (z); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..complex.h..\" \"\" { target *-*-* } 131 } */\n+  cacosh (z); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..complex.h..\" \"\" { target *-*-* } 133 } */\n+  carg (z); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..complex.h..\" \"\" { target *-*-* } 135 } */\n+  casin (z); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..complex.h..\" \"\" { target *-*-* } 137 } */\n+  casinh (z); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..complex.h..\" \"\" { target *-*-* } 139 } */\n+  catan (z); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..complex.h..\" \"\" { target *-*-* } 141 } */\n+  catanh (z); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..complex.h..\" \"\" { target *-*-* } 143 } */\n+  ccos (z); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..complex.h..\" \"\" { target *-*-* } 145 } */\n+  ccosh (z); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..complex.h..\" \"\" { target *-*-* } 147 } */\n+  cexp (z); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..complex.h..\" \"\" { target *-*-* } 149 } */\n+  cimag (z); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..complex.h..\" \"\" { target *-*-* } 151 } */\n+  clog (z); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..complex.h..\" \"\" { target *-*-* } 153 } */\n+  conj (z); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..complex.h..\" \"\" { target *-*-* } 155 } */\n+  cpow (z, z); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..complex.h..\" \"\" { target *-*-* } 157 } */\n+  cproj (z); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..complex.h..\" \"\" { target *-*-* } 159 } */\n+  creal (z); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..complex.h..\" \"\" { target *-*-* } 161 } */\n+  csin (z); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..complex.h..\" \"\" { target *-*-* } 163 } */\n+  csinh (z); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..complex.h..\" \"\" { target *-*-* } 165 } */\n+  csqrt (z); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..complex.h..\" \"\" { target *-*-* } 167 } */\n+  ctan (z); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..complex.h..\" \"\" { target *-*-* } 169 } */\n+  ctanh (z); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..complex.h..\" \"\" { target *-*-* } 171 } */\n+}\n+\n+void\n+string (void *p, void *q, __SIZE_TYPE__ sz)\n+{\n+  memchr (p, 2, sz); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..string.h..\" \"\" { target *-*-* } 178 } */\n+  /* We don't generate the warning for memcmp.  */\n+  memcmp (p, q, sz);\n+  memcpy (p, q, sz); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..string.h..\" \"\" { target *-*-* } 182 } */\n+  memmove (p, q, sz); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..string.h..\" \"\" { target *-*-* } 184 } */\n+  memset (p, 0, sz); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..string.h..\" \"\" { target *-*-* } 186 } */\n+  strcat (p, q); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..string.h..\" \"\" { target *-*-* } 188 } */\n+  strchr (p, 'a'); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..string.h..\" \"\" { target *-*-* } 190 } */\n+  /* We don't generate the warning for strcmp.  */\n+  strcmp (p, q);\n+  strcpy (p, q); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..string.h..\" \"\" { target *-*-* } 194 } */\n+  strcspn (p, q); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..string.h..\" \"\" { target *-*-* } 196 } */\n+  strlen (p); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..string.h..\" \"\" { target *-*-* } 198 } */\n+  strncat (p, q, sz); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..string.h..\" \"\" { target *-*-* } 200 } */\n+  /* We don't generate the warning for strncmp.  */\n+  strncmp (p, q, sz);\n+  strncpy (p, q, sz); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..string.h..\" \"\" { target *-*-* } 204 } */\n+  strpbrk (p, q); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..string.h..\" \"\" { target *-*-* } 206 } */\n+  strrchr (p, 'q'); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..string.h..\" \"\" { target *-*-* } 208 } */\n+  strspn (p, q); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..string.h..\" \"\" { target *-*-* } 210 } */\n+  strstr (p, q); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..string.h..\" \"\" { target *-*-* } 212 } */\n+}\n+\n+/* Fake FILE.  */\n+typedef struct { int i; } FILE;\n+\n+void\n+stdio (FILE *fp, void *p, __SIZE_TYPE__ sz)\n+{\n+  fprintf (fp, \"\"); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..stdio.h..\" \"\" { target *-*-* } 222 } */\n+  fscanf (fp, \"\"); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..stdio.h..\" \"\" { target *-*-* } 224 } */\n+  fwrite (p, sz, sz, fp); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..stdio.h..\" \"\" { target *-*-* } 226 } */\n+  printf (\"\"); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..stdio.h..\" \"\" { target *-*-* } 228 } */\n+  scanf (\"\"); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..stdio.h..\" \"\" { target *-*-* } 230 } */\n+  snprintf (\"\", sz, \"\"); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..stdio.h..\" \"\" { target *-*-* } 232 } */\n+  sprintf (\"\", \"\"); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..stdio.h..\" \"\" { target *-*-* } 234 } */\n+  sscanf (\"\", \"\"); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..stdio.h..\" \"\" { target *-*-* } 236 } */\n+}\n+\n+void\n+stdlib (void *p, void *q, __SIZE_TYPE__ sz)\n+{\n+  abort (); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..stdlib.h..\" \"\" { target *-*-* } 243 } */\n+  calloc (sz, 1); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..stdlib.h..\" \"\" { target *-*-* } 245 } */\n+  exit (1); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..stdlib.h..\" \"\" { target *-*-* } 247 } */\n+  free (p); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..stdlib.h..\" \"\" { target *-*-* } 249 } */\n+  labs (1L); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..stdlib.h..\" \"\" { target *-*-* } 251 } */\n+  llabs (1LL); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..stdlib.h..\" \"\" { target *-*-* } 253 } */\n+  malloc (sz); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..stdlib.h..\" \"\" { target *-*-* } 255 } */\n+  realloc (p, sz); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..stdlib.h..\" \"\" { target *-*-* } 257 } */\n+  aligned_alloc (sz, sz); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..stdlib.h..\" \"\" { target *-*-* } 259 } */\n+}\n+\n+void\n+inttypes (__INTMAX_TYPE__ j)\n+{\n+  imaxabs (j); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..inttypes.h..\" \"\" { target *-*-* } 266 } */\n+}\n+\n+struct tm;\n+\n+void\n+timeh (char *s, __SIZE_TYPE__ sz, struct tm *tm)\n+{\n+  strftime (s, sz, \"\", tm); /* { dg-warning \"incompatible implicit\" } */\n+  /* { dg-message \"include ..time.h..\" \"\" { target *-*-* } 275 } */\n+}"}]}