{"sha": "bd602b7fcb5fdd849e1054cb5a49c47e7dd382ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ2MDJiN2ZjYjVmZGQ4NDllMTA1NGNiNWE0OWM0N2U3ZGQzODJlZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2015-12-23T16:55:31Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-12-23T16:55:31Z"}, "message": "* config/nvptx/nvptx-protos.h\n\t(nvptx_maybe_convert_symbolic_operand): Delete prototype.\n\t* config/nvptx/nvptx.c (nvptx_maybe_convert_symbolic_operand): Delete.\n\t(nvptx_output_mov_insn): Record fnsym here.\n\t(nvptx_wpropagate): Don't create UNSPEC_TO_GENERIC unspec.\n\t* config/nvptx/nvptx.md (UNSPEC_TO_GENERIC): Delete.\n\t(symbolic_operand): Delete predicate.\n\t(nvptx_nonimmediate_operand): Delete predicate.\n\t(mov<mode>): Hard regs are perfectly ok here.\n\t(convaddr_<mode>): Delete.\n\nFrom-SVN: r231930", "tree": {"sha": "c60fae122dd9efb7d91034d5bfe778c6d1635f69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c60fae122dd9efb7d91034d5bfe778c6d1635f69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd602b7fcb5fdd849e1054cb5a49c47e7dd382ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd602b7fcb5fdd849e1054cb5a49c47e7dd382ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd602b7fcb5fdd849e1054cb5a49c47e7dd382ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd602b7fcb5fdd849e1054cb5a49c47e7dd382ee/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44a55c645fdcfce7fd0cd387f9a4e1b2dc34d699", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44a55c645fdcfce7fd0cd387f9a4e1b2dc34d699", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44a55c645fdcfce7fd0cd387f9a4e1b2dc34d699"}], "stats": {"total": 88, "additions": 24, "deletions": 64}, "files": [{"sha": "9992840cf82aa70b6cebeb6bf6403089ba46d40d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd602b7fcb5fdd849e1054cb5a49c47e7dd382ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd602b7fcb5fdd849e1054cb5a49c47e7dd382ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd602b7fcb5fdd849e1054cb5a49c47e7dd382ee", "patch": "@@ -1,3 +1,16 @@\n+2015-12-23  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* config/nvptx/nvptx-protos.h\n+\t(nvptx_maybe_convert_symbolic_operand): Delete prototype.\n+\t* config/nvptx/nvptx.c (nvptx_maybe_convert_symbolic_operand): Delete.\n+\t(nvptx_output_mov_insn): Record fnsym here.\n+\t(nvptx_wpropagate): Don't create UNSPEC_TO_GENERIC unspec.\n+\t* config/nvptx/nvptx.md (UNSPEC_TO_GENERIC): Delete.\n+\t(symbolic_operand): Delete predicate.\n+\t(nvptx_nonimmediate_operand): Delete predicate.\n+\t(mov<mode>): Hard regs are perfectly ok here.\n+\t(convaddr_<mode>): Delete.\n+\n 2015-12-23  Nathan Sidwell  <nathan@acm.org>\n \n \t* alias.c (compare_base_decls): Simplify in-symtab check."}, {"sha": "d39987778e5a8d591bd99b279a7e139b8be36313", "filename": "gcc/config/nvptx/nvptx-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd602b7fcb5fdd849e1054cb5a49c47e7dd382ee/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd602b7fcb5fdd849e1054cb5a49c47e7dd382ee/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h?ref=bd602b7fcb5fdd849e1054cb5a49c47e7dd382ee", "patch": "@@ -41,6 +41,5 @@ extern const char *nvptx_ptx_type_from_mode (machine_mode, bool);\n extern const char *nvptx_output_mov_insn (rtx, rtx);\n extern const char *nvptx_output_call_insn (rtx_insn *, rtx, rtx);\n extern const char *nvptx_output_return (void);\n-extern rtx nvptx_maybe_convert_symbolic_operand (rtx);\n #endif\n #endif"}, {"sha": "432e2460a221359f3304a1e6809273cf9de157bf", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 7, "deletions": 31, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd602b7fcb5fdd849e1054cb5a49c47e7dd382ee/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd602b7fcb5fdd849e1054cb5a49c47e7dd382ee/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=bd602b7fcb5fdd849e1054cb5a49c47e7dd382ee", "patch": "@@ -1413,31 +1413,6 @@ nvptx_gen_wcast (rtx reg, propagate_mask pm, unsigned rep, wcast_data_t *data)\n     }\n   return res;\n }\n-\n-/* When loading an operand ORIG_OP, verify whether an address space\n-   conversion to generic is required, and if so, perform it.  Check\n-   for SYMBOL_REFs and record them if needed.  Return either the\n-   original operand, or the converted one.  */\n-\n-rtx\n-nvptx_maybe_convert_symbolic_operand (rtx op)\n-{\n-  if (GET_MODE (op) != Pmode)\n-    return op;\n-\n-  rtx sym = op;\n-  if (GET_CODE (sym) == CONST)\n-    sym = XEXP (sym, 0);\n-  if (GET_CODE (sym) == PLUS)\n-    sym = XEXP (sym, 0);\n-\n-  if (GET_CODE (sym) != SYMBOL_REF)\n-    return op;\n-\n-  nvptx_maybe_record_fnsym (sym);\n-\n-  return op;\n-}\n \f\n /* Returns true if X is a valid address for use in a memory reference.  */\n \n@@ -1767,9 +1742,12 @@ nvptx_output_mov_insn (rtx dst, rtx src)\n   rtx sym = src;\n   if (GET_CODE (sym) == CONST)\n     sym = XEXP (XEXP (sym, 0), 0);\n-  if (SYMBOL_REF_P (sym)\n-      && SYMBOL_DATA_AREA (sym) != DATA_AREA_GENERIC)\n-    return \"%.\\tcvta%D1%t0\\t%0, %1;\";\n+  if (SYMBOL_REF_P (sym))\n+    {\n+      if (SYMBOL_DATA_AREA (sym) != DATA_AREA_GENERIC)\n+\treturn \"%.\\tcvta%D1%t0\\t%0, %1;\";\n+      nvptx_maybe_record_fnsym (sym);\n+    }\n \n   if (src_inner == dst_inner)\n     return \"%.\\tmov%t0\\t%0, %1;\";\n@@ -3359,9 +3337,7 @@ nvptx_wpropagate (bool pre_p, basic_block block, rtx_insn *insn)\n   if (data.offset)\n     {\n       /* Stuff was emitted, initialize the base pointer now.  */\n-      rtx init = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, worker_bcast_sym),\n-\t\t\t\t UNSPEC_TO_GENERIC);\n-      init = gen_rtx_SET (data.base, init);\n+      rtx init = gen_rtx_SET (data.base, worker_bcast_sym);\n       emit_insn_after (init, insn);\n \n       if (worker_bcast_size < data.offset)"}, {"sha": "182371c46ae1a18e0d7c71ea6292eb63adfa9e09", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 4, "deletions": 32, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd602b7fcb5fdd849e1054cb5a49c47e7dd382ee/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd602b7fcb5fdd849e1054cb5a49c47e7dd382ee/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=bd602b7fcb5fdd849e1054cb5a49c47e7dd382ee", "patch": "@@ -20,7 +20,6 @@\n \n (define_c_enum \"unspec\" [\n    UNSPEC_ARG_REG\n-   UNSPEC_TO_GENERIC\n \n    UNSPEC_COPYSIGN\n    UNSPEC_LOG2\n@@ -61,6 +60,9 @@\n (define_attr \"subregs_ok\" \"false,true\"\n   (const_string \"false\"))\n \n+;; The nvptx operand predicates, in general, don't permit subregs and\n+;; only literal constants, which differ from the generic ones, which\n+;; permit subregs and symbolc constants (as appropriate)\n (define_predicate \"nvptx_register_operand\"\n   (match_code \"reg\")\n {\n@@ -74,29 +76,13 @@\n           : memory_operand (op, mode));\n })\n \n-;; Allow symbolic constants.\n-(define_predicate \"symbolic_operand\"\n-  (match_code \"symbol_ref,const\"))\n-\n-;; Registers or constants for normal instructions.  Does not allow symbolic\n-;; constants.\n (define_predicate \"nvptx_nonmemory_operand\"\n   (match_code \"reg,const_int,const_double\")\n {\n   return (REG_P (op) ? register_operand (op, mode)\n           : immediate_operand (op, mode));\n })\n \n-(define_predicate \"nvptx_nonimmediate_operand\"\n-  (match_code \"reg,subreg,mem\")\n-{\n-  if (REG_P (op))\n-    return (op != frame_pointer_rtx\n-\t    && op != arg_pointer_rtx\n-\t    && op != stack_pointer_rtx);\n-  return nonimmediate_operand (op, mode);\n-})\n-\n (define_predicate \"const0_operand\"\n   (and (match_code \"const_int\")\n        (match_test \"op == const0_rtx\")))\n@@ -240,13 +226,7 @@\n \t(match_operand:QHSDISDFM 1 \"general_operand\" \"\"))]\n   \"\"\n {\n-  operands[1] = nvptx_maybe_convert_symbolic_operand (operands[1]);\n-\n-  /* Hard registers are often actually symbolic operands on this target.\n-     Don't allow them when storing to memory.  */\n-  if (MEM_P (operands[0])\n-      && (!REG_P (operands[1])\n-\t  || REGNO (operands[1]) <= LAST_VIRTUAL_REGISTER))\n+  if (MEM_P (operands[0]) && !REG_P (operands[1]))\n     {\n       rtx tmp = gen_reg_rtx (<MODE>mode);\n       emit_move_insn (tmp, operands[1]);\n@@ -327,14 +307,6 @@\n    %.\\\\tst%A0.u%T0\\\\t%0, %1;\"\n   [(set_attr \"subregs_ok\" \"true\")])\n \n-;; Pointer address space conversion\n-(define_insn \"convaddr_<mode>\"\n-  [(set (match_operand:P 0 \"nvptx_register_operand\" \"=R\")\n-\t(unspec:P [(match_operand:P 1 \"symbolic_operand\" \"s\")]\n-                  UNSPEC_TO_GENERIC))]\n-  \"\"\n-  \"%.\\\\tcvta%D1%t0\\\\t%0, %1;\")\n-\n ;; Integer arithmetic\n \n (define_insn \"add<mode>3\""}]}