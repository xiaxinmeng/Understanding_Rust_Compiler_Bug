{"sha": "edebf865cf4fd067a88729e26dc83470221fc9ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRlYmY4NjVjZjRmZDA2N2E4ODcyOWUyNmRjODM0NzAyMjFmYzlhYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-10-08T22:52:14Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-10-08T22:52:14Z"}, "message": "re PR c++/7754 (ICE SIGSEGV on union with template parameter)\n\n\tPR c++/7754\n\t* decl2.c (finish_anon_union): Do not expand anonymous unions when\n\tprocesing template functions.\n\t* pt.c (tsubst_decl, case VAR_DECL): Try to complete the variable\n\ttype. Call layout_decl.\n\t(tsubst_expr, case DECL_STMT): Handle anonymous unions.\n\nFrom-SVN: r57961", "tree": {"sha": "932d6c0647fd6654e71d64076f075d0a22735d76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/932d6c0647fd6654e71d64076f075d0a22735d76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edebf865cf4fd067a88729e26dc83470221fc9ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edebf865cf4fd067a88729e26dc83470221fc9ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edebf865cf4fd067a88729e26dc83470221fc9ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edebf865cf4fd067a88729e26dc83470221fc9ac/comments", "author": null, "committer": null, "parents": [{"sha": "87ec8de9e77db04c5f5abde6cdbabb0337816142", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87ec8de9e77db04c5f5abde6cdbabb0337816142", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87ec8de9e77db04c5f5abde6cdbabb0337816142"}], "stats": {"total": 84, "additions": 53, "deletions": 31}, "files": [{"sha": "c03b7b7506cc31a4f883afc6e474e01b862cf43e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edebf865cf4fd067a88729e26dc83470221fc9ac/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edebf865cf4fd067a88729e26dc83470221fc9ac/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=edebf865cf4fd067a88729e26dc83470221fc9ac", "patch": "@@ -1,3 +1,12 @@\n+2002-10-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/7754\n+\t* decl2.c (finish_anon_union): Do not expand anonymous unions when\n+\tprocesing template functions.\n+\t* pt.c (tsubst_decl, case VAR_DECL): Try to complete the variable\n+\ttype. Call layout_decl.\n+\t(tsubst_expr, case DECL_STMT): Handle anonymous unions.\n+\n 2002-10-07  Richard Henderson  <rth@redhat.com>\n \n \t* decl2.c, pt.c: Revert c++/7754 fix."}, {"sha": "c738b37896db3a714a7d61b3754172875b2ddfab", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edebf865cf4fd067a88729e26dc83470221fc9ac/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edebf865cf4fd067a88729e26dc83470221fc9ac/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=edebf865cf4fd067a88729e26dc83470221fc9ac", "patch": "@@ -1382,26 +1382,31 @@ finish_anon_union (anon_union_decl)\n       return;\n     }\n \n-  main_decl = build_anon_union_vars (anon_union_decl,\n-\t\t\t\t     &DECL_ANON_UNION_ELEMS (anon_union_decl),\n-\t\t\t\t     static_p, external_p);\n-\n-  if (main_decl == NULL_TREE)\n+  if (!processing_template_decl)\n     {\n-      warning (\"anonymous aggregate with no members\");\n-      return;\n-    }\n+      main_decl \n+\t= build_anon_union_vars (anon_union_decl,\n+\t\t\t\t &DECL_ANON_UNION_ELEMS (anon_union_decl),\n+\t\t\t\t static_p, external_p);\n+      \n+      if (main_decl == NULL_TREE)\n+\t{\n+\t  warning (\"anonymous aggregate with no members\");\n+\t  return;\n+\t}\n \n-  if (static_p)\n-    {\n-      make_decl_rtl (main_decl, 0);\n-      COPY_DECL_RTL (main_decl, anon_union_decl);\n-      expand_anon_union_decl (anon_union_decl, \n-\t\t\t      NULL_TREE,\n-\t\t\t      DECL_ANON_UNION_ELEMS (anon_union_decl));\n+      if (static_p)\n+\t{\n+\t  make_decl_rtl (main_decl, 0);\n+\t  COPY_DECL_RTL (main_decl, anon_union_decl);\n+\t  expand_anon_union_decl (anon_union_decl, \n+\t\t\t\t  NULL_TREE,\n+\t\t\t\t  DECL_ANON_UNION_ELEMS (anon_union_decl));\n+\t  return;\n+\t}\n     }\n-  else\n-    add_decl_stmt (anon_union_decl);\n+\n+  add_decl_stmt (anon_union_decl);\n }\n \n /* Finish processing a builtin type TYPE.  It's name is NAME,"}, {"sha": "46d91abd301e5f321442e0162b044ad6f20509ca", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edebf865cf4fd067a88729e26dc83470221fc9ac/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edebf865cf4fd067a88729e26dc83470221fc9ac/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=edebf865cf4fd067a88729e26dc83470221fc9ac", "patch": "@@ -6134,6 +6134,8 @@ tsubst_decl (t, args, type, complain)\n \t  }\n \n \tr = copy_decl (t);\n+\tif (TREE_CODE (r) == VAR_DECL)\n+\t  type = complete_type (type);\n \tTREE_TYPE (r) = type;\n \tc_apply_type_quals_to_decl (cp_type_quals (type), r);\n \tDECL_CONTEXT (r) = ctx;\n@@ -6173,6 +6175,8 @@ tsubst_decl (t, args, type, complain)\n \tTREE_CHAIN (r) = NULL_TREE;\n \tif (TREE_CODE (r) == VAR_DECL && VOID_TYPE_P (type))\n \t  cp_error_at (\"instantiation of `%D' as type `%T'\", r, type);\n+\t/* Compute the size, alignment, etc. of R.  */\n+\tlayout_decl (r, 0);\n       }\n       break;\n \n@@ -7424,9 +7428,6 @@ tsubst_expr (t, args, complain, in_decl)\n \t    decl = tsubst (decl, args, complain, in_decl);\n \t    if (decl != error_mark_node)\n \t      {\n-                if (TREE_CODE (decl) != TYPE_DECL)\n-                  /* Make sure the type is instantiated now.  */\n-                  complete_type (TREE_TYPE (decl));\n \t        if (init)\n \t          DECL_INITIAL (decl) = error_mark_node;\n \t        /* By marking the declaration as instantiated, we avoid\n@@ -7436,19 +7437,26 @@ tsubst_expr (t, args, complain, in_decl)\n \t           do.  */\n \t        if (TREE_CODE (decl) == VAR_DECL)\n \t          DECL_TEMPLATE_INSTANTIATED (decl) = 1;\n-\t        maybe_push_decl (decl);\n-\t\tif (DECL_PRETTY_FUNCTION_P (decl))\n+\t\tif (TREE_CODE (decl) == VAR_DECL\n+\t\t    && ANON_AGGR_TYPE_P (TREE_TYPE (decl)))\n+\t\t  /* Anonymous aggregates are a special case.  */\n+\t\t  finish_anon_union (decl);\n+\t\telse \n \t\t  {\n-\t\t    /* For __PRETTY_FUNCTION__ we have to adjust the\n-\t\t       initializer.  */\n-\t\t    const char *const name\n-\t\t      = cxx_printable_name (current_function_decl, 2);\n-\t\t    init = cp_fname_init (name);\n-\t\t    TREE_TYPE (decl) = TREE_TYPE (init);\n+\t\t    maybe_push_decl (decl);\n+\t\t    if (DECL_PRETTY_FUNCTION_P (decl))\n+\t\t      {\n+\t\t\t/* For __PRETTY_FUNCTION__ we have to adjust the\n+\t\t\t   initializer.  */\n+\t\t\tconst char *const name\n+\t\t\t  = cxx_printable_name (current_function_decl, 2);\n+\t\t\tinit = cp_fname_init (name);\n+\t\t\tTREE_TYPE (decl) = TREE_TYPE (init);\n+\t\t      }\n+\t\t    else\n+\t\t      init = tsubst_expr (init, args, complain, in_decl);\n+\t\t    cp_finish_decl (decl, init, NULL_TREE, 0);\n \t\t  }\n-\t\telse\n-\t\t  init = tsubst_expr (init, args, complain, in_decl);\n-\t        cp_finish_decl (decl, init, NULL_TREE, 0);\n \t      }\n \t  }\n "}]}