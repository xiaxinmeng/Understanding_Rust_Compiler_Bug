{"sha": "bc04d1ff62db94aea033829249c8b09f4b7abff1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMwNGQxZmY2MmRiOTRhZWEwMzM4MjkyNDljOGIwOWY0YjdhYmZmMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-06-14T19:05:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-06-14T19:05:13Z"}, "message": "P0624R2 - Default constructible and assignable stateless lambdas\n\n\tP0624R2 - Default constructible and assignable stateless lambdas\n\t* method.c (synthesized_method_walk): For C++2a don't mark\n\tsfk_constructor or sfk_copy_assignment as deleted if lambda has\n\tno lambda-captures.\n\n\t* g++.dg/cpp2a/lambda1.C: New test.\n\t* g++.dg/cpp0x/lambda/lambda-ice2.C: Adjust expected diagnostics\n\tfor -std=c++2a.\n\nFrom-SVN: r261605", "tree": {"sha": "4b7a6b953f09d9e68ba6520ded1c9d913441db6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b7a6b953f09d9e68ba6520ded1c9d913441db6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc04d1ff62db94aea033829249c8b09f4b7abff1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc04d1ff62db94aea033829249c8b09f4b7abff1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc04d1ff62db94aea033829249c8b09f4b7abff1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc04d1ff62db94aea033829249c8b09f4b7abff1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d26d4ce69d8510e32a5a4b9653de9dee0109f04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d26d4ce69d8510e32a5a4b9653de9dee0109f04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d26d4ce69d8510e32a5a4b9653de9dee0109f04"}], "stats": {"total": 93, "additions": 85, "deletions": 8}, "files": [{"sha": "dd9b7dba10217f323ef09f7693d3421ec85ba15d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc04d1ff62db94aea033829249c8b09f4b7abff1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc04d1ff62db94aea033829249c8b09f4b7abff1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bc04d1ff62db94aea033829249c8b09f4b7abff1", "patch": "@@ -1,3 +1,10 @@\n+2018-06-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tP0624R2 - Default constructible and assignable stateless lambdas\n+\t* method.c (synthesized_method_walk): For C++2a don't mark\n+\tsfk_constructor or sfk_copy_assignment as deleted if lambda has\n+\tno lambda-captures.\n+\n 2018-06-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* decl.c (duplicate_decls): Use DECL_SOURCE_LOCATION in"}, {"sha": "858655b4a79141d279f1aff6e03400aec8cdc59b", "filename": "gcc/cp/method.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc04d1ff62db94aea033829249c8b09f4b7abff1/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc04d1ff62db94aea033829249c8b09f4b7abff1/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=bc04d1ff62db94aea033829249c8b09f4b7abff1", "patch": "@@ -1539,10 +1539,15 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n     {\n       /* \"The closure type associated with a lambda-expression has a deleted\n \t default constructor and a deleted copy assignment operator.\"\n-         This is diagnosed in maybe_explain_implicit_delete.  */\n+\t This is diagnosed in maybe_explain_implicit_delete.\n+\t In C++2a, only lambda-expressions with lambda-captures have those\n+\t deleted.  */\n       if (LAMBDA_TYPE_P (ctype)\n-\t  && (sfk == sfk_constructor\n-\t      || sfk == sfk_copy_assignment))\n+\t  && (sfk == sfk_constructor || sfk == sfk_copy_assignment)\n+\t  && (cxx_dialect < cxx2a\n+\t      || LAMBDA_EXPR_CAPTURE_LIST (CLASSTYPE_LAMBDA_EXPR (ctype))\n+\t      || LAMBDA_EXPR_DEFAULT_CAPTURE_MODE\n+\t\t\t\t(CLASSTYPE_LAMBDA_EXPR (ctype)) != CPLD_NONE))\n \t{\n \t  *deleted_p = true;\n \t  return;"}, {"sha": "92bc519e5583b5c426e7a0cadca2e4544a794da8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc04d1ff62db94aea033829249c8b09f4b7abff1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc04d1ff62db94aea033829249c8b09f4b7abff1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bc04d1ff62db94aea033829249c8b09f4b7abff1", "patch": "@@ -1,3 +1,10 @@\n+2018-06-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tP0624R2 - Default constructible and assignable stateless lambdas\n+\t* g++.dg/cpp2a/lambda1.C: New test.\n+\t* g++.dg/cpp0x/lambda/lambda-ice2.C: Adjust expected diagnostics\n+\tfor -std=c++2a.\n+\n 2018-06-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/other/static3.C: New."}, {"sha": "a78688a4b1e1d2cc6ff824eba525e64abab244c8", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-ice2.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc04d1ff62db94aea033829249c8b09f4b7abff1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc04d1ff62db94aea033829249c8b09f4b7abff1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice2.C?ref=bc04d1ff62db94aea033829249c8b09f4b7abff1", "patch": "@@ -2,15 +2,15 @@\n // { dg-do compile { target c++11 } }\n \n template<typename F>\n-decltype(F()) run(F f) // { dg-message \"note\" }\n+decltype(F()) run(F f) // { dg-message \"note\" \"\" { target c++17_down } }\n {\n-  return f();\n+  return f();\t// { dg-error \"could not convert\" \"\" { target c++2a } }\n }\n \n int main()\n {\n-  auto l = []() { return 5; }; // { dg-message \"lambda closure type\" }\n+  auto l = []() { return 5; }; // { dg-message \"lambda closure type\" \"\" { target c++17_down } }\n \n-  run(l); // { dg-error \"no match\" }\n-  // { dg-error \"use of deleted function\" \"candidate explanation\" { target *-*-* } 5 }\n+  run(l); // { dg-error \"no match\" \"\" { target c++17_down } }\n+  // { dg-error \"use of deleted function\" \"candidate explanation\" { target c++17_down } 5 }\n }"}, {"sha": "245b10c6cf820b5c53876b3482b2d4950bae1eda", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda1.C", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc04d1ff62db94aea033829249c8b09f4b7abff1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc04d1ff62db94aea033829249c8b09f4b7abff1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda1.C?ref=bc04d1ff62db94aea033829249c8b09f4b7abff1", "patch": "@@ -0,0 +1,58 @@\n+// P0624R2\n+// { dg-do compile { target c++11 } }\n+\n+#if __cplusplus >= 201402L\n+#define A auto\n+#else\n+#define A int\n+#endif\n+\n+void\n+f1 ()\n+{\n+  auto greater = [](A x, A y) { return x > y; };\t// { dg-message \"a lambda closure type has a deleted (default constructor|copy assignment operator)\" \"\" { target c++17_down } }\n+  decltype (greater) gt;\t// { dg-error \"use of deleted function\" \"\" { target c++17_down } }\n+  gt = greater;\t\t\t// { dg-error \"use of deleted function\" \"\" { target c++17_down } }\n+}\n+\n+void\n+f2 ()\n+{\n+  auto greater = [&](A x, A y) { return x > y; };\t// { dg-message \"a lambda closure type has a deleted (default constructor|copy assignment operator)\" }\n+  decltype (greater) gt;\t// { dg-error \"use of deleted function\" }\n+  gt = greater;\t\t\t// { dg-error \"use of deleted function\" }\n+}\n+\n+void\n+f3 ()\n+{\n+  auto greater = [=](A x, A y) { return x > y; };\t// { dg-message \"a lambda closure type has a deleted (default constructor|copy assignment operator)\" }\n+  decltype (greater) gt;\t// { dg-error \"use of deleted function\" }\n+  gt = greater;\t\t\t// { dg-error \"use of deleted function\" }\n+}\n+\n+void\n+f4 (int i)\n+{\n+  auto greater = [i](A x, A y) { return x > y; };\t// { dg-message \"a lambda closure type has a deleted (default constructor|copy assignment operator)\" }\n+  decltype (greater) gt;\t// { dg-error \"use of deleted function\" }\n+  gt = greater;\t\t\t// { dg-error \"use of deleted function\" }\n+}\n+\n+#if __cplusplus > 201703L\n+void\n+f5 ()\n+{\n+  auto greater = [](auto x, auto y) constexpr { return x > y; };\n+  decltype (greater) gt;\n+  static_assert (!gt (1, 2));\n+  static_assert (gt (4, 3));\n+  static_assert (!gt (3.5, 3.75));\n+  static_assert (gt (3.5, 3.25));\n+  gt = greater;\n+  static_assert (!gt (1, 2));\n+  static_assert (gt (4, 3));\n+  static_assert (!gt (3.5, 3.75));\n+  static_assert (gt (3.5, 3.25));\n+}\n+#endif"}]}