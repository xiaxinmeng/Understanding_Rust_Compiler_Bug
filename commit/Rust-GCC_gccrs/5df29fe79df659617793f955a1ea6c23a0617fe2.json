{"sha": "5df29fe79df659617793f955a1ea6c23a0617fe2", "node_id": "C_kwDOANBUbNoAKDVkZjI5ZmU3OWRmNjU5NjE3NzkzZjk1NWExZWE2YzIzYTA2MTdmZTI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-06T14:47:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-06T14:47:47Z"}, "message": "gimple.cc: Follow-up to adjust gimple_call_builtin_p and gimple_call_combined_fn [PR105150]\n\nOn Wed, Apr 06, 2022 at 09:41:44AM +0100, Richard Sandiford wrote:\n> But it seems like the magic incantation to detect \u201creal\u201d built-in\n> function calls is getting longer and longer.  Can we not abstract this\n> in a single place rather than have to repeat the same long sequence in\n> multiple places?\n\nI've already committed it, so it can be only dealt with an incremental\npatch.\nHere is a patch that adjusts instead gimple_builtin_call_types_compatible_p,\nafter the assert:\n  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n    if (tree decl = builtin_decl_explicit (DECL_FUNCTION_CODE (fndecl)))\n      fndecl = decl;\nbut we then lose the theoretical possibility of comparing against the\nactual user declaration.  Though I guess in the\ngimple-fold.cc\ngimple-low.cc\ngimple-match-head.cc\ncalls to that function we also want this rather than what they do currently.\n\n2022-04-06  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/105150\n\t* gimple.cc (gimple_builtin_call_types_compatible_p): Use\n\tbuiltin_decl_explicit here...\n\t(gimple_call_builtin_p, gimple_call_combined_fn): ... rather than\n\there.", "tree": {"sha": "bfcac03d6d880fe0614717d5b940742f77ac6afa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfcac03d6d880fe0614717d5b940742f77ac6afa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5df29fe79df659617793f955a1ea6c23a0617fe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5df29fe79df659617793f955a1ea6c23a0617fe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5df29fe79df659617793f955a1ea6c23a0617fe2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5df29fe79df659617793f955a1ea6c23a0617fe2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd0024e48e94008915a6b18112efbbd8abc81ed8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd0024e48e94008915a6b18112efbbd8abc81ed8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd0024e48e94008915a6b18112efbbd8abc81ed8"}], "stats": {"total": 36, "additions": 11, "deletions": 25}, "files": [{"sha": "9e62da4265b2a8a02121d574ddfad2095d8048ad", "filename": "gcc/gimple.cc", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5df29fe79df659617793f955a1ea6c23a0617fe2/gcc%2Fgimple.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5df29fe79df659617793f955a1ea6c23a0617fe2/gcc%2Fgimple.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.cc?ref=5df29fe79df659617793f955a1ea6c23a0617fe2", "patch": "@@ -2788,6 +2788,10 @@ gimple_builtin_call_types_compatible_p (const gimple *stmt, tree fndecl)\n {\n   gcc_checking_assert (DECL_BUILT_IN_CLASS (fndecl) != NOT_BUILT_IN);\n \n+  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+    if (tree decl = builtin_decl_explicit (DECL_FUNCTION_CODE (fndecl)))\n+      fndecl = decl;\n+\n   tree ret = gimple_call_lhs (stmt);\n   if (ret\n       && !useless_type_conversion_p (TREE_TYPE (ret),\n@@ -2841,12 +2845,7 @@ gimple_call_builtin_p (const gimple *stmt)\n   if (is_gimple_call (stmt)\n       && (fndecl = gimple_call_fndecl (stmt)) != NULL_TREE\n       && DECL_BUILT_IN_CLASS (fndecl) != NOT_BUILT_IN)\n-    {\n-      if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n-\tif (tree decl = builtin_decl_explicit (DECL_FUNCTION_CODE (fndecl)))\n-\t  fndecl = decl;\n-      return gimple_builtin_call_types_compatible_p (stmt, fndecl);\n-    }\n+    return gimple_builtin_call_types_compatible_p (stmt, fndecl);\n   return false;\n }\n \n@@ -2859,12 +2858,7 @@ gimple_call_builtin_p (const gimple *stmt, enum built_in_class klass)\n   if (is_gimple_call (stmt)\n       && (fndecl = gimple_call_fndecl (stmt)) != NULL_TREE\n       && DECL_BUILT_IN_CLASS (fndecl) == klass)\n-    {\n-      if (klass == BUILT_IN_NORMAL)\n-\tif (tree decl = builtin_decl_explicit (DECL_FUNCTION_CODE (fndecl)))\n-\t  fndecl = decl;\n-      return gimple_builtin_call_types_compatible_p (stmt, fndecl);\n-    }\n+    return gimple_builtin_call_types_compatible_p (stmt, fndecl);\n   return false;\n }\n \n@@ -2877,11 +2871,7 @@ gimple_call_builtin_p (const gimple *stmt, enum built_in_function code)\n   if (is_gimple_call (stmt)\n       && (fndecl = gimple_call_fndecl (stmt)) != NULL_TREE\n       && fndecl_built_in_p (fndecl, code))\n-    {\n-      if (tree decl = builtin_decl_explicit (DECL_FUNCTION_CODE (fndecl)))\n-\tfndecl = decl;\n-      return gimple_builtin_call_types_compatible_p (stmt, fndecl);\n-    }\n+    return gimple_builtin_call_types_compatible_p (stmt, fndecl);\n   return false;\n }\n \n@@ -2898,14 +2888,10 @@ gimple_call_combined_fn (const gimple *stmt)\n \treturn as_combined_fn (gimple_call_internal_fn (call));\n \n       tree fndecl = gimple_call_fndecl (stmt);\n-      if (fndecl && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL))\n-\t{\n-\t  tree decl = builtin_decl_explicit (DECL_FUNCTION_CODE (fndecl));\n-\t  if (!decl)\n-\t    decl = fndecl;\n-\t  if (gimple_builtin_call_types_compatible_p (stmt, decl))\n-\t    return as_combined_fn (DECL_FUNCTION_CODE (fndecl));\n-\t}\n+      if (fndecl\n+\t  && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL)\n+\t  && gimple_builtin_call_types_compatible_p (stmt, fndecl))\n+\treturn as_combined_fn (DECL_FUNCTION_CODE (fndecl));\n     }\n   return CFN_LAST;\n }"}]}