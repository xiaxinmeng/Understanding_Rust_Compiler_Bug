{"sha": "de46b2fe0dc554f71b61f0bcc8d6afdde2292a6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU0NmIyZmUwZGM1NTRmNzFiNjFmMGJjYzhkNmFmZGRlMjI5MmE2Yw==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@apple.com", "date": "2004-06-23T20:53:17Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-06-23T20:53:17Z"}, "message": "c-typeck.c (composite_type, [...]): Abort if we have type qualifiers at all.\n\n2004-06-23  Andrew Pinski  <apinski@apple.com>\n\n        * c-typeck.c (composite_type, <case ARRAY_TYPE>): Abort if we have\n        type qualifiers at all.\n        If both of the type domains are null and the new element type is\n        the same as one of the, return the one which the element type.\n        matches.\n        Do not call qualify_type on the new type.\n\n2004-06-23  Andrew Pinski  <apinski@apple.com>\n\n        * gcc.dg/c90-array-quals-2.c: New test.\n\nFrom-SVN: r83567", "tree": {"sha": "046d79935a5305e2ca08168568b559af903e3f1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/046d79935a5305e2ca08168568b559af903e3f1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de46b2fe0dc554f71b61f0bcc8d6afdde2292a6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de46b2fe0dc554f71b61f0bcc8d6afdde2292a6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de46b2fe0dc554f71b61f0bcc8d6afdde2292a6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de46b2fe0dc554f71b61f0bcc8d6afdde2292a6c/comments", "author": null, "committer": null, "parents": [{"sha": "07f266aecd773341be6f62935bcf8a6e935d5528", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07f266aecd773341be6f62935bcf8a6e935d5528", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07f266aecd773341be6f62935bcf8a6e935d5528"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "d1e5799f3317abcd5b08418c59fec3a42b2be6fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de46b2fe0dc554f71b61f0bcc8d6afdde2292a6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de46b2fe0dc554f71b61f0bcc8d6afdde2292a6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de46b2fe0dc554f71b61f0bcc8d6afdde2292a6c", "patch": "@@ -1,3 +1,12 @@\n+2004-06-23  Andrew Pinski  <apinski@apple.com>\n+\n+\t* c-typeck.c (composite_type, <case ARRAY_TYPE>): Abort if we have\n+\ttype qualifiers at all.\n+\tIf both of the type domains are null and the new element type is\n+\tthe same as one of the, return the one which the element type.\n+\tmatches.\n+\tDo not call qualify_type on the new type.\n+\n 2004-06-23  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.h (DEFAULT_MAIN_RETURN): Remove."}, {"sha": "ad6a90a2cbbe5b76bee802ecef673e356d469c99", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de46b2fe0dc554f71b61f0bcc8d6afdde2292a6c/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de46b2fe0dc554f71b61f0bcc8d6afdde2292a6c/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=de46b2fe0dc554f71b61f0bcc8d6afdde2292a6c", "patch": "@@ -260,15 +260,25 @@ composite_type (tree t1, tree t2)\n     case ARRAY_TYPE:\n       {\n \ttree elt = composite_type (TREE_TYPE (t1), TREE_TYPE (t2));\n+\t\n+\t/* We should not have any type quals on arrays at all.  */\n+\tif (TYPE_QUALS (t1) || TYPE_QUALS (t2))\n+\t  abort ();\n+\t\n \t/* Save space: see if the result is identical to one of the args.  */\n \tif (elt == TREE_TYPE (t1) && TYPE_DOMAIN (t1))\n \t  return build_type_attribute_variant (t1, attributes);\n \tif (elt == TREE_TYPE (t2) && TYPE_DOMAIN (t2))\n \t  return build_type_attribute_variant (t2, attributes);\n+\t\n+\tif (elt == TREE_TYPE (t1) && !TYPE_DOMAIN (t2) && !TYPE_DOMAIN (t1))\n+\t  return build_type_attribute_variant (t1, attributes);\n+\tif (elt == TREE_TYPE (t2) && !TYPE_DOMAIN (t2) && !TYPE_DOMAIN (t1))\n+\t  return build_type_attribute_variant (t2, attributes);\n+\t\n \t/* Merge the element types, and have a size if either arg has one.  */\n \tt1 = build_array_type (elt, TYPE_DOMAIN (TYPE_DOMAIN (t1) ? t1 : t2));\n-\tt1 = build_type_attribute_variant (t1, attributes);\n-\treturn qualify_type (t1, t2);\n+\treturn build_type_attribute_variant (t1, attributes);\n       }\n \n     case FUNCTION_TYPE:"}, {"sha": "facc58b22eb322a6daba1a5f75999549cbdcc04a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de46b2fe0dc554f71b61f0bcc8d6afdde2292a6c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de46b2fe0dc554f71b61f0bcc8d6afdde2292a6c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de46b2fe0dc554f71b61f0bcc8d6afdde2292a6c", "patch": "@@ -1,3 +1,7 @@\n+2004-06-23  Andrew Pinski  <apinski@apple.com>\n+\n+\t* gcc.dg/c90-array-quals-2.c: New test.\n+\n 2006-06-23  Nitin Yewale <NitinY@KPITCummins.com>\n \n \t* gcc.dg/kpice1.c: New test."}, {"sha": "7cb68c8468389748ec2bb30f44357fd5ed668e91", "filename": "gcc/testsuite/gcc.dg/c90-array-quals-2.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de46b2fe0dc554f71b61f0bcc8d6afdde2292a6c/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-array-quals-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de46b2fe0dc554f71b61f0bcc8d6afdde2292a6c/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-array-quals-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-array-quals-2.c?ref=de46b2fe0dc554f71b61f0bcc8d6afdde2292a6c", "patch": "@@ -0,0 +1,3 @@\n+extern const char *const a[];\n+extern const char *const a[];\n+extern const char *const a[];"}]}