{"sha": "ec946d1845c7ed1cb2955a9065c7edd9402882a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM5NDZkMTg0NWM3ZWQxY2IyOTU1YTkwNjVjN2VkZDk0MDI4ODJhNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-10-31T17:45:11Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-10-31T17:45:11Z"}, "message": "s-osinte-posix.adb, [...] (To_Target_Priority): New function maps from System.Any_Priority to a POSIX priority on the target.\n\n2006-10-31  Arnaud Charlet  <charlet@adacore.com>\n\t    Jose Ruiz  <ruiz@adacore.com>\n\n\t* s-osinte-posix.adb, s-osinte-linux.ads, s-osinte-freebsd.adb, \n\ts-osinte-freebsd.ads, s-osinte-solaris-posix.ads, s-osinte-hpux.ads, \n\ts-osinte-darwin.adb, s-osinte-darwin.ads, s-osinte-lynxos-3.ads,\n\ts-osinte-lynxos-3.adb (To_Target_Priority): New function maps from\n\tSystem.Any_Priority to a POSIX priority on the target.\n\n\t* system-linux-ia64.ads: \n\tExtend range of Priority types on Linux to use the whole range made\n\tavailable by the system.\n\n\t* s-osinte-aix.adb, s-osinte-aix.ads (To_Target_Priority): New\n\tfunction maps from System.Any_Priority to a POSIX priority on the\n\ttarget.\n\t(PTHREAD_PRIO_PROTECT): Set real value.\n\t(PTHREAD_PRIO_INHERIT): Now a function.\n\t(SIGCPUFAIL): New signal.\n\t(Reserved): Add SIGALRM1, SIGWAITING, SIGCPUFAIL, since these signals\n\tare documented as reserved by the OS.\n\n\t* system-aix.ads: Use the full range of priorities provided by the\n\tsystem on AIX.\n\n\t* s-taprop-posix.adb: Call new function To_Target_Priority.\n\t(Set_Priority): Take into account Task_Dispatching_Policy and\n\tPriority_Specific_Dispatching pragmas when determining if Round Robin\n\tmust be used for scheduling the task.\n\n\t* system-linux-x86_64.ads, system-linux-x86.ads, \n\tsystem-linux-ppc.ads: Extend range of Priority types on Linux to use\n\tthe whole range made available by the system.\n\n\t* s-taprop-vms.adb, s-taprop-mingw.adb, s-taprop-irix.adb, \n\ts-taprop-tru64.adb, s-taprop-linux.adb, s-taprop-hpux-dce.adb, \n\ts-taprop-lynxos.adb (Finalize_TCB): invalidate the stack-check cache\n\twhen deallocating the TCB in order to avoid potential references to\n\tdeallocated data.\n\t(Set_Priority): Take into account Task_Dispatching_Policy and\n\tPriority_Specific_Dispatching pragmas when determining if Round Robin\n\tor FIFO within priorities must be used for scheduling the task.\n\n\t* s-taprop-vxworks.adb (Enter_Task): Store the user-level task id in\n\tthe Thread field (to be used internally by the run-time system) and the\n\tkernel-level task id in the LWP field (to be used by the debugger).\n\t(Create_Task): Reorganize to unify the calls to taskSpawn into a single\n\tinstance, and propagate the current task options to the spawned task.\n\t(Set_Priority): Take into account Priority_Specific_Dispatching pragmas.\n\t(Initialize): Set Round Robin dispatching when the corresponding pragma\n\tis in effect.\n\nFrom-SVN: r118235", "tree": {"sha": "2abe81e1eeecf6b4534b5efbc0cf38263b6afcac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2abe81e1eeecf6b4534b5efbc0cf38263b6afcac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec946d1845c7ed1cb2955a9065c7edd9402882a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec946d1845c7ed1cb2955a9065c7edd9402882a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec946d1845c7ed1cb2955a9065c7edd9402882a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec946d1845c7ed1cb2955a9065c7edd9402882a7/comments", "author": null, "committer": null, "parents": [{"sha": "6e451134f0ac90864186b1a1595a86ee393cf41a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e451134f0ac90864186b1a1595a86ee393cf41a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e451134f0ac90864186b1a1595a86ee393cf41a"}], "stats": {"total": 720, "additions": 538, "deletions": 182}, "files": [{"sha": "b56282b251b54e2d0e6c29b04a6fbff19b21b9b0", "filename": "gcc/ada/s-osinte-aix.adb", "status": "modified", "additions": 82, "deletions": 3, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-osinte-aix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-osinte-aix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-aix.adb?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -55,6 +55,20 @@ package body System.OS_Interface is\n       return Duration (TV.tv_sec) + Duration (TV.tv_usec) / 10#1#E6;\n    end To_Duration;\n \n+   ------------------------\n+   -- To_Target_Priority --\n+   ------------------------\n+\n+   function To_Target_Priority\n+     (Prio : System.Any_Priority) return Interfaces.C.int\n+   is\n+   begin\n+      --  Priorities on AIX are defined in the range 1 .. 127, so we\n+      --  map 0 .. 126 to 1 .. 127.\n+\n+      return Interfaces.C.int (Prio) + 1;\n+   end To_Target_Priority;\n+\n    -----------------\n    -- To_Timespec --\n    -----------------\n@@ -138,20 +152,85 @@ package body System.OS_Interface is\n    --  AIX Thread does not have sched_yield;\n \n    function sched_yield return int is\n-\n       procedure pthread_yield;\n       pragma Import (C, pthread_yield, \"sched_yield\");\n-\n    begin\n       pthread_yield;\n       return 0;\n    end sched_yield;\n \n+   --------------------\n+   -- Get_Stack_Base --\n+   --------------------\n+\n    function Get_Stack_Base (thread : pthread_t) return Address is\n       pragma Warnings (Off, thread);\n-\n    begin\n       return Null_Address;\n    end Get_Stack_Base;\n \n+   --------------------------\n+   -- PTHREAD_PRIO_INHERIT --\n+   --------------------------\n+\n+   AIX_Version : Integer := 0;\n+   --  AIX version in the form xy for AIX version x.y (0 means not set)\n+\n+   SYS_NMLN : constant := 32;\n+   --  AIX system constant used to define utsname, see sys/utsname.h\n+\n+   subtype String_NMLN is String (1 .. SYS_NMLN);\n+\n+   type utsname is record\n+      sysname    : String_NMLN;\n+      nodename   : String_NMLN;\n+      release    : String_NMLN;\n+      version    : String_NMLN;\n+      machine    : String_NMLN;\n+      procserial : String_NMLN;\n+   end record;\n+   pragma Convention (C, utsname);\n+\n+   procedure uname (name : out utsname);\n+   pragma Import (C, uname);\n+\n+   function PTHREAD_PRIO_INHERIT return int is\n+      name : utsname;\n+\n+      function Val (C : Character) return Integer;\n+      --  Transform a numeric character ('0' .. '9') to an integer\n+\n+      ---------\n+      -- Val --\n+      ---------\n+\n+      function Val (C : Character) return Integer is\n+      begin\n+         return Character'Pos (C) - Character'Pos ('0');\n+      end Val;\n+\n+   --  Start of processing for PTHREAD_PRIO_INHERIT\n+\n+   begin\n+      if AIX_Version = 0 then\n+\n+         --  Set AIX_Version\n+\n+         uname (name);\n+         AIX_Version := Val (name.version (1)) * 10 + Val (name.release (1));\n+      end if;\n+\n+      if AIX_Version < 53 then\n+\n+         --  Under AIX < 5.3, PTHREAD_PRIO_INHERIT is defined as 0 in pthread.h\n+\n+         return 0;\n+\n+      else\n+         --  Under AIX >= 5.3, PTHREAD_PRIO_INHERIT is defined as 3\n+\n+         return 3;\n+      end if;\n+   end PTHREAD_PRIO_INHERIT;\n+\n end System.OS_Interface;"}, {"sha": "f242e73de38a386db552d0c60ab1ca6f09cc64a6", "filename": "gcc/ada/s-osinte-aix.ads", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-osinte-aix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-osinte-aix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-aix.ads?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---             Copyright (C) 1995-2006, Free Software Foundation, Inc.      --\n+--          Copyright (C) 1995-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -116,13 +116,15 @@ package System.OS_Interface is\n    SIGXFSZ     : constant := 25; --  filesize limit exceeded\n    SIGWAITING  : constant := 39; --  m:n scheduling\n \n-   --  the following signals are AIX specific\n+   --  The following signals are AIX specific\n+\n    SIGMSG      : constant := 27; -- input data is in the ring buffer\n    SIGDANGER   : constant := 33; -- system crash imminent\n    SIGMIGRATE  : constant := 35; -- migrate process\n    SIGPRE      : constant := 36; -- programming exception\n    SIGVIRT     : constant := 37; -- AIX virtual time alarm\n    SIGALRM1    : constant := 38; -- m:n condition variables\n+   SIGCPUFAIL  : constant := 59; -- Predictive De-configuration of Processors\n    SIGKAP      : constant := 60; -- keep alive poll from native keyboard\n    SIGGRANT    : constant := SIGKAP; -- monitor mode granted\n    SIGRETRACT  : constant := 61; -- monitor mode should be relinguished\n@@ -137,7 +139,8 @@ package System.OS_Interface is\n \n    Unmasked    : constant Signal_Set :=\n      (SIGTRAP, SIGTTIN, SIGTTOU, SIGTSTP, SIGPROF);\n-   Reserved    : constant Signal_Set := (SIGABRT, SIGKILL, SIGSTOP);\n+   Reserved    : constant Signal_Set :=\n+     (SIGABRT, SIGKILL, SIGSTOP, SIGALRM1, SIGWAITING, SIGCPUFAIL);\n \n    type sigset_t is private;\n \n@@ -229,6 +232,10 @@ package System.OS_Interface is\n    SCHED_RR    : constant := 2;\n    SCHED_OTHER : constant := 0;\n \n+   function To_Target_Priority\n+     (Prio : System.Any_Priority) return Interfaces.C.int;\n+   --  Maps System.Any_Priority to a POSIX priority.\n+\n    -------------\n    -- Process --\n    -------------\n@@ -393,9 +400,11 @@ package System.OS_Interface is\n    -- POSIX.1c  Section 13 --\n    --------------------------\n \n-   PTHREAD_PRIO_NONE    : constant := 0;\n-   PTHREAD_PRIO_PROTECT : constant := 0;\n-   PTHREAD_PRIO_INHERIT : constant := 0;\n+   PTHREAD_PRIO_PROTECT : constant := 2;\n+\n+   function PTHREAD_PRIO_INHERIT return int;\n+   --  Return value of C macro PTHREAD_PRIO_INHERIT. This function is needed\n+   --  since the value is different between AIX versions.\n \n    function pthread_mutexattr_setprotocol\n      (attr     : access pthread_mutexattr_t;"}, {"sha": "c06228e2ca23bb4087779d597096639ee69355ae", "filename": "gcc/ada/s-osinte-darwin.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-osinte-darwin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-osinte-darwin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-darwin.adb?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -55,6 +55,17 @@ package body System.OS_Interface is\n       return Duration (TV.tv_sec) + Duration (TV.tv_usec) / 10#1#E6;\n    end To_Duration;\n \n+   ------------------------\n+   -- To_Target_Priority --\n+   ------------------------\n+\n+   function To_Target_Priority\n+     (Prio : System.Any_Priority) return Interfaces.C.int\n+   is\n+   begin\n+      return Interfaces.C.int (Prio);\n+   end To_Target_Priority;\n+\n    -----------------\n    -- To_Timespec --\n    -----------------"}, {"sha": "db2a74bb1984b70d0bfad4634f2e0efa8becaa79", "filename": "gcc/ada/s-osinte-darwin.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-osinte-darwin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-osinte-darwin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-darwin.ads?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -208,6 +208,10 @@ package System.OS_Interface is\n    SCHED_RR    : constant := 2;\n    SCHED_FIFO  : constant := 4;\n \n+   function To_Target_Priority\n+     (Prio : System.Any_Priority) return Interfaces.C.int;\n+   --  Maps System.Any_Priority to a POSIX priority.\n+\n    -------------\n    -- Process --\n    -------------"}, {"sha": "9035ff2ae047042f8fdff70341c05ba2376ae522", "filename": "gcc/ada/s-osinte-freebsd.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-osinte-freebsd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-osinte-freebsd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-freebsd.adb?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                   B o d y                                --\n --                                                                          --\n---          Copyright (C) 1991-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1991-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -67,6 +67,17 @@ package body System.OS_Interface is\n       return Duration (TS.ts_sec) + Duration (TS.ts_nsec) / 10#1#E9;\n    end To_Duration;\n \n+   ------------------------\n+   -- To_Target_Priority --\n+   ------------------------\n+\n+   function To_Target_Priority\n+     (Prio : System.Any_Priority) return Interfaces.C.int\n+   is\n+   begin\n+      return Interfaces.C.int (Prio);\n+   end To_Target_Priority;\n+\n    -----------------\n    -- To_Timespec --\n    -----------------"}, {"sha": "646a5783a0ca25b17cc3720c46bbd042c48a593b", "filename": "gcc/ada/s-osinte-freebsd.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-osinte-freebsd.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-osinte-freebsd.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-freebsd.ads?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -247,6 +247,10 @@ package System.OS_Interface is\n    SCHED_OTHER : constant := 2;\n    SCHED_RR    : constant := 3;\n \n+   function To_Target_Priority\n+     (Prio : System.Any_Priority) return Interfaces.C.int;\n+   --  Maps System.Any_Priority to a POSIX priority.\n+\n    -------------\n    -- Process --\n    -------------"}, {"sha": "7407b8bc08c7cc259b727c65a6b2295f08235b40", "filename": "gcc/ada/s-osinte-hpux.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-osinte-hpux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-osinte-hpux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-hpux.ads?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -227,6 +227,10 @@ package System.OS_Interface is\n    SCHED_RR    : constant := 1;\n    SCHED_OTHER : constant := 2;\n \n+   function To_Target_Priority\n+     (Prio : System.Any_Priority) return Interfaces.C.int;\n+   --  Maps System.Any_Priority to a POSIX priority.\n+\n    -------------\n    -- Process --\n    -------------"}, {"sha": "ea9b1c73fa12a8e0f0ba9ab8f3d6bfa6e905da70", "filename": "gcc/ada/s-osinte-linux.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-osinte-linux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-osinte-linux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-linux.ads?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---             Copyright (C) 1995-2006, Free Software Foundation, Inc.      --\n+--          Copyright (C) 1995-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -251,6 +251,10 @@ package System.OS_Interface is\n    SCHED_FIFO  : constant := 1;\n    SCHED_RR    : constant := 2;\n \n+   function To_Target_Priority\n+     (Prio : System.Any_Priority) return Interfaces.C.int;\n+   --  Maps System.Any_Priority to a POSIX priority.\n+\n    -------------\n    -- Process --\n    -------------"}, {"sha": "7c89e9ef4e01558731c90791dce4183e5004a97c", "filename": "gcc/ada/s-osinte-lynxos-3.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-osinte-lynxos-3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-osinte-lynxos-3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-lynxos-3.adb?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---           Copyright (C) 1999-2006 Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -78,6 +78,17 @@ package body System.OS_Interface is\n       return Duration (TV.tv_sec) + Duration (TV.tv_usec) / 10#1#E6;\n    end To_Duration;\n \n+   ------------------------\n+   -- To_Target_Priority --\n+   ------------------------\n+\n+   function To_Target_Priority\n+     (Prio : System.Any_Priority) return Interfaces.C.int\n+   is\n+   begin\n+      return Interfaces.C.int (Prio);\n+   end To_Target_Priority;\n+\n    -----------------\n    -- To_Timespec --\n    -----------------"}, {"sha": "cfc734865be08af59eee2939c89462e4c43c033f", "filename": "gcc/ada/s-osinte-lynxos-3.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-osinte-lynxos-3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-osinte-lynxos-3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-lynxos-3.ads?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---             Copyright (C) 1995-2006, Free Software Foundation, Inc.      --\n+--          Copyright (C) 1995-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -219,6 +219,10 @@ package System.OS_Interface is\n    SCHED_RR    : constant := 16#00100000#;\n    SCHED_OTHER : constant := 16#00400000#;\n \n+   function To_Target_Priority\n+     (Prio : System.Any_Priority) return Interfaces.C.int;\n+   --  Maps System.Any_Priority to a POSIX priority.\n+\n    -------------\n    -- Process --\n    -------------"}, {"sha": "c6460c2d241efce1480fe3f6a468d962f523cf49", "filename": "gcc/ada/s-osinte-posix.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-osinte-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-osinte-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-posix.adb?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -7,7 +7,7 @@\n --                                   B o d y                                --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2005, AdaCore                     --\n+--                     Copyright (C) 1995-2006, AdaCore                     --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -79,6 +79,17 @@ package body System.OS_Interface is\n       return Duration (TV.tv_sec) + Duration (TV.tv_usec) / 10#1#E6;\n    end To_Duration;\n \n+   ------------------------\n+   -- To_Target_Priority --\n+   ------------------------\n+\n+   function To_Target_Priority\n+     (Prio : System.Any_Priority) return Interfaces.C.int\n+   is\n+   begin\n+      return Interfaces.C.int (Prio);\n+   end To_Target_Priority;\n+\n    -----------------\n    -- To_Timespec --\n    -----------------"}, {"sha": "ce4f7524b925caab5d30944b0a7c9f8e2770a38a", "filename": "gcc/ada/s-osinte-solaris-posix.ads", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-osinte-solaris-posix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-osinte-solaris-posix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-solaris-posix.ads?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---             Copyright (C) 1995-2006, Free Software Foundation, Inc.      --\n+--          Copyright (C) 1995-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -49,6 +49,10 @@ package System.OS_Interface is\n    pragma Linker_Options (\"-lposix4\");\n    pragma Linker_Options (\"-lpthread\");\n \n+   --  The following is needed to allow --enable-threads=solaris\n+\n+   pragma Linker_Options (\"-lthread\");\n+\n    subtype int            is Interfaces.C.int;\n    subtype short          is Interfaces.C.short;\n    subtype long           is Interfaces.C.long;\n@@ -214,6 +218,10 @@ package System.OS_Interface is\n    SCHED_RR    : constant := 2;\n    SCHED_OTHER : constant := 0;\n \n+   function To_Target_Priority\n+     (Prio : System.Any_Priority) return Interfaces.C.int;\n+   --  Maps System.Any_Priority to a POSIX priority.\n+\n    -------------\n    -- Process --\n    -------------\n@@ -260,7 +268,7 @@ package System.OS_Interface is\n    -----------\n \n    Stack_Base_Available : constant Boolean := False;\n-   --  Indicates wether the stack base is available on this target.\n+   --  Indicates whether the stack base is available on this target.\n \n    function Get_Stack_Base (thread : pthread_t) return Address;\n    pragma Inline (Get_Stack_Base);"}, {"sha": "f463d8f90d6f5ac1816c4d72b1ad2009530500f8", "filename": "gcc/ada/s-taprop-hpux-dce.adb", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-hpux-dce.adb?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -479,14 +479,16 @@ package body System.Task_Primitives.Operations is\n    -----------------\n \n    procedure Timed_Delay\n-     (Self_ID  : Task_Id;\n-      Time     : Duration;\n-      Mode     : ST.Delay_Modes)\n+     (Self_ID : Task_Id;\n+      Time    : Duration;\n+      Mode    : ST.Delay_Modes)\n    is\n       Check_Time : constant Duration := Monotonic_Clock;\n       Abs_Time   : Duration;\n       Request    : aliased timespec;\n-      Result     : Interfaces.C.int;\n+\n+      Result : Interfaces.C.int;\n+      pragma Warnings (Off, Result);\n \n    begin\n       if Single_Lock then\n@@ -515,11 +517,15 @@ package body System.Task_Primitives.Operations is\n             exit when Self_ID.Pending_ATC_Level < Self_ID.ATC_Nesting_Level;\n \n             if Single_Lock then\n-               Result := pthread_cond_timedwait (Self_ID.Common.LL.CV'Access,\n-                 Single_RTS_Lock'Access, Request'Access);\n+               Result := pthread_cond_timedwait\n+                           (Self_ID.Common.LL.CV'Access,\n+                            Single_RTS_Lock'Access,\n+                            Request'Access);\n             else\n-               Result := pthread_cond_timedwait (Self_ID.Common.LL.CV'Access,\n-                 Self_ID.Common.LL.L'Access, Request'Access);\n+               Result := pthread_cond_timedwait\n+                          (Self_ID.Common.LL.CV'Access,\n+                           Self_ID.Common.LL.L'Access,\n+                           Request'Access);\n             end if;\n \n             exit when Abs_Time <= Monotonic_Clock;\n@@ -613,14 +619,28 @@ package body System.Task_Primitives.Operations is\n       Array_Item : Integer;\n       Param      : aliased struct_sched_param;\n \n+      function Get_Policy (Prio : System.Any_Priority) return Character;\n+      pragma Import (C, Get_Policy, \"__gnat_get_specific_dispatching\");\n+      --  Get priority specific dispatching policy\n+\n+      Priority_Specific_Policy : constant Character := Get_Policy (Prio);\n+      --  Upper case first character of the policy name corresponding to the\n+      --  task as set by a Priority_Specific_Dispatching pragma.\n+\n    begin\n       Param.sched_priority  := Interfaces.C.int (Underlying_Priorities (Prio));\n \n-      if Time_Slice_Val > 0 then\n+      if Dispatching_Policy = 'R'\n+        or else Priority_Specific_Policy = 'R'\n+        or else Time_Slice_Val > 0\n+      then\n          Result := pthread_setschedparam\n            (T.Common.LL.Thread, SCHED_RR, Param'Access);\n \n-      elsif Dispatching_Policy = 'F' or else Time_Slice_Val = 0 then\n+      elsif Dispatching_Policy = 'F'\n+        or else Priority_Specific_Policy = 'F'\n+        or else Time_Slice_Val = 0\n+      then\n          Result := pthread_setschedparam\n            (T.Common.LL.Thread, SCHED_FIFO, Param'Access);\n \n@@ -631,7 +651,7 @@ package body System.Task_Primitives.Operations is\n \n       pragma Assert (Result = 0);\n \n-      if Dispatching_Policy = 'F' then\n+      if Dispatching_Policy = 'F' or else Priority_Specific_Policy = 'F' then\n \n          --  Annex D requirement [RM D.2.2 par. 9]:\n          --    If the task drops its priority due to the loss of inherited"}, {"sha": "a1bc9f09478aedb1bea9c8d6ff5a2f276dbe0310", "filename": "gcc/ada/s-taprop-irix.adb", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-taprop-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-taprop-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-irix.adb?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -103,6 +103,12 @@ package body System.Task_Primitives.Operations is\n    Locking_Policy : Character;\n    pragma Import (C, Locking_Policy, \"__gl_locking_policy\");\n \n+   Time_Slice_Val : Integer;\n+   pragma Import (C, Time_Slice_Val, \"__gl_time_slice_val\");\n+\n+   Dispatching_Policy : Character;\n+   pragma Import (C, Dispatching_Policy, \"__gl_task_dispatching_policy\");\n+\n    Real_Time_Clock_Id : constant clockid_t := CLOCK_REALTIME;\n \n    Unblocked_Signal_Mask : aliased sigset_t;\n@@ -301,6 +307,7 @@ package body System.Task_Primitives.Operations is\n       end if;\n \n       Result := pthread_mutexattr_destroy (Attributes'Access);\n+      pragma Assert (Result = 0);\n    end Initialize_Lock;\n \n    -------------------\n@@ -620,12 +627,27 @@ package body System.Task_Primitives.Operations is\n       function To_Int is new Unchecked_Conversion\n         (System.Task_Info.Thread_Scheduling_Policy, Interfaces.C.int);\n \n+      function Get_Policy (Prio : System.Any_Priority) return Character;\n+      pragma Import (C, Get_Policy, \"__gnat_get_specific_dispatching\");\n+      --  Get priority specific dispatching policy\n+\n+      Priority_Specific_Policy : constant Character := Get_Policy (Prio);\n+      --  Upper case first character of the policy name corresponding to the\n+      --  task as set by a Priority_Specific_Dispatching pragma.\n+\n    begin\n       T.Common.Current_Priority := Prio;\n       Param.sched_priority := Interfaces.C.int (Prio);\n \n       if T.Common.Task_Info /= null then\n          Sched_Policy := To_Int (T.Common.Task_Info.Policy);\n+\n+      elsif Dispatching_Policy = 'R'\n+        or else Priority_Specific_Policy = 'R'\n+        or else Time_Slice_Val > 0\n+      then\n+         Sched_Policy := SCHED_RR;\n+\n       else\n          Sched_Policy := SCHED_FIFO;\n       end if;\n@@ -1222,7 +1244,7 @@ package body System.Task_Primitives.Operations is\n \n       Interrupt_Management.Initialize;\n \n-      --  Initialize the lock used to synchronize chain of all ATCBs.\n+      --  Initialize the lock used to synchronize chain of all ATCBs\n \n       Initialize_Lock (Single_RTS_Lock'Access, RTS_Lock_Level);\n "}, {"sha": "a41eb3f55704c3b8d576ca3fb21f7fcd12a0bb53", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -63,6 +63,9 @@ with System.Soft_Links;\n --  For example when using the restricted run time, it is replaced by\n --  System.Tasking.Restricted.Stages.\n \n+with System.Stack_Checking.Operations;\n+--  Used for Invalidate_Stack_Cache;\n+\n with Ada.Exceptions;\n --  used for Raise_Exception\n --           Raise_From_Signal_Handler\n@@ -74,6 +77,7 @@ with Unchecked_Deallocation;\n package body System.Task_Primitives.Operations is\n \n    package SSL renames System.Soft_Links;\n+   package SC renames System.Stack_Checking.Operations;\n \n    use System.Tasking.Debug;\n    use System.Tasking;\n@@ -144,7 +148,7 @@ package body System.Task_Primitives.Operations is\n \n       function Self return Task_Id;\n       pragma Inline (Self);\n-      --  Return a pointer to the Ada Task Control Block of the calling task.\n+      --  Return a pointer to the Ada Task Control Block of the calling task\n \n    end Specific;\n \n@@ -487,14 +491,16 @@ package body System.Task_Primitives.Operations is\n    --  no locks.\n \n    procedure Timed_Delay\n-     (Self_ID  : Task_Id;\n-      Time     : Duration;\n-      Mode     : ST.Delay_Modes)\n+     (Self_ID : Task_Id;\n+      Time    : Duration;\n+      Mode    : ST.Delay_Modes)\n    is\n       Check_Time : constant Duration := Monotonic_Clock;\n       Abs_Time   : Duration;\n       Request    : aliased timespec;\n-      Result     : Interfaces.C.int;\n+\n+      Result : Interfaces.C.int;\n+      pragma Warnings (Off, Result);\n \n    begin\n       if Single_Lock then\n@@ -523,11 +529,15 @@ package body System.Task_Primitives.Operations is\n             exit when Self_ID.Pending_ATC_Level < Self_ID.ATC_Nesting_Level;\n \n             if Single_Lock then\n-               Result := pthread_cond_timedwait (Self_ID.Common.LL.CV'Access,\n-                 Single_RTS_Lock'Access, Request'Access);\n+               Result := pthread_cond_timedwait\n+                           (Self_ID.Common.LL.CV'Access,\n+                            Single_RTS_Lock'Access,\n+                            Request'Access);\n             else\n-               Result := pthread_cond_timedwait (Self_ID.Common.LL.CV'Access,\n-                 Self_ID.Common.LL.L'Access, Request'Access);\n+               Result := pthread_cond_timedwait\n+                           (Self_ID.Common.LL.CV'Access,\n+                            Self_ID.Common.LL.L'Access,\n+                            Request'Access);\n             end if;\n \n             exit when Abs_Time <= Monotonic_Clock;\n@@ -610,19 +620,33 @@ package body System.Task_Primitives.Operations is\n       Result : Interfaces.C.int;\n       Param  : aliased struct_sched_param;\n \n+      function Get_Policy (Prio : System.Any_Priority) return Character;\n+      pragma Import (C, Get_Policy, \"__gnat_get_specific_dispatching\");\n+      --  Get priority specific dispatching policy\n+\n+      Priority_Specific_Policy : constant Character := Get_Policy (Prio);\n+      --  Upper case first character of the policy name corresponding to the\n+      --  task as set by a Priority_Specific_Dispatching pragma.\n+\n    begin\n       T.Common.Current_Priority := Prio;\n \n       --  Priorities are in range 1 .. 99 on GNU/Linux, so we map\n-      --  map 0 .. 31 to 1 .. 32\n+      --  map 0 .. 98 to 1 .. 99\n \n       Param.sched_priority := Interfaces.C.int (Prio) + 1;\n \n-      if Time_Slice_Val > 0 then\n+      if Dispatching_Policy = 'R'\n+        or else Priority_Specific_Policy = 'R'\n+        or else Time_Slice_Val > 0\n+      then\n          Result := pthread_setschedparam\n            (T.Common.LL.Thread, SCHED_RR, Param'Access);\n \n-      elsif Dispatching_Policy = 'F' or else Time_Slice_Val = 0 then\n+      elsif Dispatching_Policy = 'F'\n+        or else Priority_Specific_Policy = 'F'\n+        or else Time_Slice_Val = 0\n+      then\n          Result := pthread_setschedparam\n            (T.Common.LL.Thread, SCHED_FIFO, Param'Access);\n \n@@ -815,7 +839,7 @@ package body System.Task_Primitives.Operations is\n       if T.Known_Tasks_Index /= -1 then\n          Known_Tasks (T.Known_Tasks_Index) := null;\n       end if;\n-\n+      SC.Invalidate_Stack_Cache (T.Common.Compiler_Data.Pri_Stack_Info'Access);\n       Free (Tmp);\n \n       if Is_Self then"}, {"sha": "881a0cea4ef9f0f9c5c8d9b7b5832ead7fce4647", "filename": "gcc/ada/s-taprop-lynxos.adb", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-taprop-lynxos.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-taprop-lynxos.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-lynxos.adb?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -539,15 +539,17 @@ package body System.Task_Primitives.Operations is\n    --  the caller is abort-deferred but is holding no locks.\n \n    procedure Timed_Delay\n-     (Self_ID  : Task_Id;\n-      Time     : Duration;\n-      Mode     : ST.Delay_Modes)\n+     (Self_ID : Task_Id;\n+      Time    : Duration;\n+      Mode    : ST.Delay_Modes)\n    is\n       Check_Time : constant Duration := Monotonic_Clock;\n       Abs_Time   : Duration;\n       Rel_Time   : Duration;\n       Request    : aliased timespec;\n-      Result     : Interfaces.C.int;\n+\n+      Result : Interfaces.C.int;\n+      pragma Warnings (Off, Result);\n \n    begin\n       if Single_Lock then\n@@ -592,11 +594,15 @@ package body System.Task_Primitives.Operations is\n             exit when Self_ID.Pending_ATC_Level < Self_ID.ATC_Nesting_Level;\n \n             if Single_Lock then\n-               Result := pthread_cond_timedwait (Self_ID.Common.LL.CV'Access,\n-                 Single_RTS_Lock'Access, Request'Access);\n+               Result := pthread_cond_timedwait\n+                           (Self_ID.Common.LL.CV'Access,\n+                            Single_RTS_Lock'Access,\n+                            Request'Access);\n             else\n-               Result := pthread_cond_timedwait (Self_ID.Common.LL.CV'Access,\n-                 Self_ID.Common.LL.L'Access, Request'Access);\n+               Result := pthread_cond_timedwait\n+                           (Self_ID.Common.LL.CV'Access,\n+                            Self_ID.Common.LL.L'Access,\n+                            Request'Access);\n             end if;\n \n             exit when Abs_Time <= Monotonic_Clock;\n@@ -679,14 +685,29 @@ package body System.Task_Primitives.Operations is\n       Result : Interfaces.C.int;\n       Param  : aliased struct_sched_param;\n \n+      function Get_Policy (Prio : System.Any_Priority) return Character;\n+      pragma Import (C, Get_Policy, \"__gnat_get_specific_dispatching\");\n+      --  Get priority specific dispatching policy\n+\n+      Priority_Specific_Policy : constant Character := Get_Policy (Prio);\n+      --  Upper case first character of the policy name corresponding to the\n+      --  task as set by a Priority_Specific_Dispatching pragma.\n+\n    begin\n       Param.sched_priority := Interfaces.C.int (Prio);\n \n-      if Time_Slice_Supported and then Time_Slice_Val > 0 then\n+      if Time_Slice_Supported\n+        and then (Dispatching_Policy = 'R'\n+                  or else Priority_Specific_Policy = 'R'\n+                  or else Time_Slice_Val > 0)\n+      then\n          Result := pthread_setschedparam\n            (T.Common.LL.Thread, SCHED_RR, Param'Access);\n \n-      elsif Dispatching_Policy = 'F' or else Time_Slice_Val = 0 then\n+      elsif Dispatching_Policy = 'F'\n+        or else Priority_Specific_Policy = 'F'\n+        or else Time_Slice_Val = 0\n+      then\n          Result := pthread_setschedparam\n            (T.Common.LL.Thread, SCHED_FIFO, Param'Access);\n "}, {"sha": "6a6cd17a75ec572593db5a20ebb47443deb09249", "filename": "gcc/ada/s-taprop-mingw.adb", "status": "modified", "additions": 36, "deletions": 26, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-taprop-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-taprop-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-mingw.adb?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -106,6 +106,10 @@ package body System.Task_Primitives.Operations is\n    Dispatching_Policy : Character;\n    pragma Import (C, Dispatching_Policy, \"__gl_task_dispatching_policy\");\n \n+   function Get_Policy (Prio : System.Any_Priority) return Character;\n+   pragma Import (C, Get_Policy, \"__gnat_get_specific_dispatching\");\n+   --  Get priority specific dispatching policy\n+\n    Foreign_Task_Elaborated : aliased Boolean := True;\n    --  Used to identified fake tasks (i.e., non-Ada Threads)\n \n@@ -130,7 +134,7 @@ package body System.Task_Primitives.Operations is\n \n       procedure Set (Self_Id : Task_Id);\n       pragma Inline (Set);\n-      --  Set the self id for the current task.\n+      --  Set the self id for the current task\n \n    end Specific;\n \n@@ -155,7 +159,7 @@ package body System.Task_Primitives.Operations is\n    ---------------------------------\n \n    function Register_Foreign_Thread (Thread : Thread_Id) return Task_Id;\n-   --  Allocate and Initialize a new ATCB for the current Thread.\n+   --  Allocate and Initialize a new ATCB for the current Thread\n \n    function Register_Foreign_Thread\n      (Thread : Thread_Id) return Task_Id is separate;\n@@ -168,7 +172,7 @@ package body System.Task_Primitives.Operations is\n    --  Initialize given condition variable Cond\n \n    procedure Finalize_Cond (Cond : access Condition_Variable);\n-   --  Finalize given condition variable Cond.\n+   --  Finalize given condition variable Cond\n \n    procedure Cond_Signal (Cond : access Condition_Variable);\n    --  Signal condition variable Cond\n@@ -246,7 +250,7 @@ package body System.Task_Primitives.Operations is\n       Result_Bool : BOOL;\n \n    begin\n-      --  Must reset Cond BEFORE L is unlocked.\n+      --  Must reset Cond BEFORE L is unlocked\n \n       Result_Bool := ResetEvent (HANDLE (Cond.all));\n       pragma Assert (Result_Bool = True);\n@@ -287,7 +291,7 @@ package body System.Task_Primitives.Operations is\n       Wait_Result  : DWORD;\n \n    begin\n-      --  Must reset Cond BEFORE L is unlocked.\n+      --  Must reset Cond BEFORE L is unlocked\n \n       Result := ResetEvent (HANDLE (Cond.all));\n       pragma Assert (Result = True);\n@@ -575,16 +579,18 @@ package body System.Task_Primitives.Operations is\n    -----------------\n \n    procedure Timed_Delay\n-     (Self_ID  : Task_Id;\n-      Time     : Duration;\n-      Mode     : ST.Delay_Modes)\n+     (Self_ID : Task_Id;\n+      Time    : Duration;\n+      Mode    : ST.Delay_Modes)\n    is\n       Check_Time : Duration := Monotonic_Clock;\n       Rel_Time   : Duration;\n       Abs_Time   : Duration;\n-      Result     : Integer;\n       Timedout   : Boolean;\n \n+      Result : Integer;\n+      pragma Warnings (Off, Integer);\n+\n    begin\n       if Single_Lock then\n          Lock_RTS;\n@@ -614,10 +620,12 @@ package body System.Task_Primitives.Operations is\n \n             if Single_Lock then\n                Cond_Timed_Wait (Self_ID.Common.LL.CV'Access,\n-                 Single_RTS_Lock'Access, Rel_Time, Timedout, Result);\n+                                Single_RTS_Lock'Access,\n+                                Rel_Time, Timedout, Result);\n             else\n                Cond_Timed_Wait (Self_ID.Common.LL.CV'Access,\n-                 Self_ID.Common.LL.L'Access, Rel_Time, Timedout, Result);\n+                                Self_ID.Common.LL.L'Access,\n+                                Rel_Time, Timedout, Result);\n             end if;\n \n             Check_Time := Monotonic_Clock;\n@@ -686,7 +694,7 @@ package body System.Task_Primitives.Operations is\n         (T.Common.LL.Thread, Interfaces.C.int (Underlying_Priorities (Prio)));\n       pragma Assert (Res = True);\n \n-      if Dispatching_Policy = 'F' then\n+      if Dispatching_Policy = 'F' or else Get_Policy (Prio) = 'F' then\n \n          --  Annex D requirement [RM D.2.2 par. 9]:\n          --    If the task drops its priority due to the loss of inherited\n@@ -734,20 +742,19 @@ package body System.Task_Primitives.Operations is\n    --  There were two paths were we needed to call Enter_Task :\n    --  1) from System.Task_Primitives.Operations.Initialize\n    --  2) from System.Tasking.Stages.Task_Wrapper\n-   --\n+\n    --  The thread initialisation has to be done only for the first case.\n-   --\n-   --  This is because the GetCurrentThread NT call does not return the\n-   --  real thread handler but only a \"pseudo\" one. It is not possible to\n-   --  release the thread handle and free the system ressources from this\n-   --  \"pseudo\" handle. So we really want to keep the real thread handle\n-   --  set in System.Task_Primitives.Operations.Create_Task during the\n-   --  thread creation.\n+\n+   --  This is because the GetCurrentThread NT call does not return the real\n+   --  thread handler but only a \"pseudo\" one. It is not possible to release\n+   --  the thread handle and free the system ressources from this \"pseudo\"\n+   --  handle. So we really want to keep the real thread handle set in\n+   --  System.Task_Primitives.Operations.Create_Task during thread creation.\n \n    procedure Enter_Task (Self_ID : Task_Id) is\n       procedure Init_Float;\n       pragma Import (C, Init_Float, \"__gnat_init_float\");\n-      --  Properly initializes the FPU for x86 systems.\n+      --  Properly initializes the FPU for x86 systems\n \n    begin\n       Specific.Set (Self_ID);\n@@ -881,8 +888,11 @@ package body System.Task_Primitives.Operations is\n \n       Set_Priority (T, Priority);\n \n-      if Time_Slice_Val = 0 or else Dispatching_Policy = 'F' then\n-         --  Here we need Annex E semantics so we disable the NT priority\n+      if Time_Slice_Val = 0\n+        or else Dispatching_Policy = 'F'\n+        or else Get_Policy (Priority) = 'F'\n+      then\n+         --  Here we need Annex D semantics so we disable the NT priority\n          --  boost. A priority boost is temporarily given by the system to a\n          --  thread when it is taken out of a wait state.\n \n@@ -1008,15 +1018,15 @@ package body System.Task_Primitives.Operations is\n              (GetCurrentProcess, High_Priority_Class);\n \n          --  ??? In theory it should be possible to use the priority class\n-         --  Realtime_Prioriry_Class but we suspect a bug in the NT scheduler\n+         --  Realtime_Priority_Class but we suspect a bug in the NT scheduler\n          --  which prevents (in some obscure cases) a thread to get on top of\n          --  the running queue by another thread of lower priority. For\n          --  example cxd8002 ACATS test freeze.\n       end if;\n \n       TlsIndex := TlsAlloc;\n \n-      --  Initialize the lock used to synchronize chain of all ATCBs.\n+      --  Initialize the lock used to synchronize chain of all ATCBs\n \n       Initialize_Lock (Single_RTS_Lock'Access, RTS_Lock_Level);\n \n@@ -1175,7 +1185,7 @@ package body System.Task_Primitives.Operations is\n          else\n             S.Waiting := True;\n \n-            --  Must reset CV BEFORE L is unlocked.\n+            --  Must reset CV BEFORE L is unlocked\n \n             Result_Bool := ResetEvent (S.CV);\n             pragma Assert (Result_Bool = True);"}, {"sha": "f8d1f0db90d23f4f9261583807095c3a418544c7", "filename": "gcc/ada/s-taprop-posix.adb", "status": "modified", "additions": 46, "deletions": 26, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-taprop-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-taprop-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-posix.adb?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2006, Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -102,7 +102,7 @@ package body System.Task_Primitives.Operations is\n    --  Key used to find the Ada Task_Id associated with a thread\n \n    Environment_Task_Id : Task_Id;\n-   --  A variable to hold Task_Id for the environment task.\n+   --  A variable to hold Task_Id for the environment task\n \n    Locking_Policy : Character;\n    pragma Import (C, Locking_Policy, \"__gl_locking_policy\");\n@@ -114,7 +114,7 @@ package body System.Task_Primitives.Operations is\n    Unblocked_Signal_Mask : aliased sigset_t;\n    --  The set of signals that should unblocked in all tasks\n \n-   --  The followings are internal configuration constants needed.\n+   --  The followings are internal configuration constants needed\n \n    Next_Serial_Number : Task_Serial_Number := 100;\n    --  We start at 100, to reserve some special values for\n@@ -127,7 +127,7 @@ package body System.Task_Primitives.Operations is\n    pragma Import (C, Dispatching_Policy, \"__gl_task_dispatching_policy\");\n \n    Foreign_Task_Elaborated : aliased Boolean := True;\n-   --  Used to identified fake tasks (i.e., non-Ada Threads).\n+   --  Used to identified fake tasks (i.e., non-Ada Threads)\n \n    --------------------\n    -- Local Packages --\n@@ -137,31 +137,31 @@ package body System.Task_Primitives.Operations is\n \n       procedure Initialize (Environment_Task : Task_Id);\n       pragma Inline (Initialize);\n-      --  Initialize various data needed by this package.\n+      --  Initialize various data needed by this package\n \n       function Is_Valid_Task return Boolean;\n       pragma Inline (Is_Valid_Task);\n       --  Does executing thread have a TCB?\n \n       procedure Set (Self_Id : Task_Id);\n       pragma Inline (Set);\n-      --  Set the self id for the current task.\n+      --  Set the self id for the current task\n \n       function Self return Task_Id;\n       pragma Inline (Self);\n-      --  Return a pointer to the Ada Task Control Block of the calling task.\n+      --  Return a pointer to the Ada Task Control Block of the calling task\n \n    end Specific;\n \n    package body Specific is separate;\n-   --  The body of this package is target specific.\n+   --  The body of this package is target specific\n \n    ---------------------------------\n    -- Support for foreign threads --\n    ---------------------------------\n \n    function Register_Foreign_Thread (Thread : Thread_Id) return Task_Id;\n-   --  Allocate and Initialize a new ATCB for the current Thread.\n+   --  Allocate and Initialize a new ATCB for the current Thread\n \n    function Register_Foreign_Thread\n      (Thread : Thread_Id) return Task_Id is separate;\n@@ -489,7 +489,7 @@ package body System.Task_Primitives.Operations is\n            (Self_ID.Common.LL.CV'Access, Self_ID.Common.LL.L'Access);\n       end if;\n \n-      --  EINTR is not considered a failure.\n+      --  EINTR is not considered a failure\n \n       pragma Assert (Result = 0 or else Result = EINTR);\n    end Sleep;\n@@ -578,20 +578,21 @@ package body System.Task_Primitives.Operations is\n    -- Timed_Delay --\n    -----------------\n \n-   --  This is for use in implementing delay statements, so\n-   --  we assume the caller is abort-deferred but is holding\n-   --  no locks.\n+   --  This is for use in implementing delay statements, so we assume the\n+   --  caller is abort-deferred but is holding no locks.\n \n    procedure Timed_Delay\n-     (Self_ID  : Task_Id;\n-      Time     : Duration;\n-      Mode     : ST.Delay_Modes)\n+     (Self_ID : Task_Id;\n+      Time    : Duration;\n+      Mode    : ST.Delay_Modes)\n    is\n       Check_Time : constant Duration := Monotonic_Clock;\n       Abs_Time   : Duration;\n       Rel_Time   : Duration;\n       Request    : aliased timespec;\n-      Result     : Interfaces.C.int;\n+\n+      Result : Interfaces.C.int;\n+      pragma Warnings (Off, Result);\n \n    begin\n       if Single_Lock then\n@@ -634,11 +635,15 @@ package body System.Task_Primitives.Operations is\n             exit when Self_ID.Pending_ATC_Level < Self_ID.ATC_Nesting_Level;\n \n             if Single_Lock then\n-               Result := pthread_cond_timedwait (Self_ID.Common.LL.CV'Access,\n-                 Single_RTS_Lock'Access, Request'Access);\n+               Result := pthread_cond_timedwait\n+                           (Self_ID.Common.LL.CV'Access,\n+                            Single_RTS_Lock'Access,\n+                            Request'Access);\n             else\n-               Result := pthread_cond_timedwait (Self_ID.Common.LL.CV'Access,\n-                 Self_ID.Common.LL.L'Access, Request'Access);\n+               Result := pthread_cond_timedwait\n+                           (Self_ID.Common.LL.CV'Access,\n+                            Self_ID.Common.LL.L'Access,\n+                            Request'Access);\n             end if;\n \n             exit when Abs_Time <= Monotonic_Clock;\n@@ -722,15 +727,30 @@ package body System.Task_Primitives.Operations is\n       Result : Interfaces.C.int;\n       Param  : aliased struct_sched_param;\n \n+      function Get_Policy (Prio : System.Any_Priority) return Character;\n+      pragma Import (C, Get_Policy, \"__gnat_get_specific_dispatching\");\n+      --  Get priority specific dispatching policy\n+\n+      Priority_Specific_Policy : constant Character := Get_Policy (Prio);\n+      --  Upper case first character of the policy name corresponding to the\n+      --  task as set by a Priority_Specific_Dispatching pragma.\n+\n    begin\n       T.Common.Current_Priority := Prio;\n-      Param.sched_priority := Interfaces.C.int (Prio);\n+      Param.sched_priority := To_Target_Priority (Prio);\n \n-      if Time_Slice_Supported and then Time_Slice_Val > 0 then\n+      if Time_Slice_Supported\n+        and then (Dispatching_Policy = 'R'\n+                  or else Priority_Specific_Policy = 'R'\n+                  or else Time_Slice_Val > 0)\n+      then\n          Result := pthread_setschedparam\n            (T.Common.LL.Thread, SCHED_RR, Param'Access);\n \n-      elsif Dispatching_Policy = 'F' or else Time_Slice_Val = 0 then\n+      elsif Dispatching_Policy = 'F'\n+        or else Priority_Specific_Policy = 'F'\n+        or else Time_Slice_Val = 0\n+      then\n          Result := pthread_setschedparam\n            (T.Common.LL.Thread, SCHED_FIFO, Param'Access);\n \n@@ -813,7 +833,7 @@ package body System.Task_Primitives.Operations is\n       Cond_Attr  : aliased pthread_condattr_t;\n \n    begin\n-      --  Give the task a unique serial number.\n+      --  Give the task a unique serial number\n \n       Self_ID.Serial_Number := Next_Serial_Number;\n       Next_Serial_Number := Next_Serial_Number + 1;\n@@ -1327,7 +1347,7 @@ package body System.Task_Primitives.Operations is\n          end if;\n       end loop;\n \n-      --  Initialize the lock used to synchronize chain of all ATCBs.\n+      --  Initialize the lock used to synchronize chain of all ATCBs\n \n       Initialize_Lock (Single_RTS_Lock'Access, RTS_Lock_Level);\n "}, {"sha": "28e1a4a30c1a0d6eec09a8baa34fb57349c792f6", "filename": "gcc/ada/s-taprop-tru64.adb", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-taprop-tru64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-taprop-tru64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-tru64.adb?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -161,6 +161,10 @@ package body System.Task_Primitives.Operations is\n    procedure Abort_Handler (Sig : Signal);\n    --  Signal handler used to implement asynchronous abort\n \n+   function Get_Policy (Prio : System.Any_Priority) return Character;\n+   pragma Import (C, Get_Policy, \"__gnat_get_specific_dispatching\");\n+   --  Get priority specific dispatching policy\n+\n    -------------------\n    -- Abort_Handler --\n    -------------------\n@@ -635,15 +639,25 @@ package body System.Task_Primitives.Operations is\n       Result : Interfaces.C.int;\n       Param  : aliased struct_sched_param;\n \n+      Priority_Specific_Policy : constant Character := Get_Policy (Prio);\n+      --  Upper case first character of the policy name corresponding to the\n+      --  task as set by a Priority_Specific_Dispatching pragma.\n+\n    begin\n       T.Common.Current_Priority := Prio;\n       Param.sched_priority  := Interfaces.C.int (Underlying_Priorities (Prio));\n \n-      if Time_Slice_Val > 0 then\n+      if Dispatching_Policy = 'R'\n+        or else Priority_Specific_Policy = 'R'\n+        or else Time_Slice_Val > 0\n+      then\n          Result := pthread_setschedparam\n                      (T.Common.LL.Thread, SCHED_RR, Param'Access);\n \n-      elsif Dispatching_Policy = 'F' or else Time_Slice_Val = 0 then\n+      elsif Dispatching_Policy = 'F'\n+        or else Priority_Specific_Policy = 'F'\n+        or else Time_Slice_Val = 0\n+      then\n          Result := pthread_setschedparam\n                      (T.Common.LL.Thread, SCHED_FIFO, Param'Access);\n \n@@ -784,6 +798,10 @@ package body System.Task_Primitives.Operations is\n       Result              : Interfaces.C.int;\n       Param               : aliased System.OS_Interface.struct_sched_param;\n \n+      Priority_Specific_Policy : constant Character := Get_Policy (Priority);\n+      --  Upper case first character of the policy name corresponding to the\n+      --  task as set by a Priority_Specific_Dispatching pragma.\n+\n       use System.Task_Info;\n \n    begin\n@@ -815,11 +833,17 @@ package body System.Task_Primitives.Operations is\n                   (Attributes'Access, Param'Access);\n       pragma Assert (Result = 0);\n \n-      if Time_Slice_Val > 0 then\n+      if Dispatching_Policy = 'R'\n+        or else Priority_Specific_Policy = 'R'\n+        or else Time_Slice_Val > 0\n+      then\n          Result := pthread_attr_setschedpolicy\n                      (Attributes'Access, System.OS_Interface.SCHED_RR);\n \n-      elsif Dispatching_Policy = 'F' or else Time_Slice_Val = 0 then\n+      elsif Dispatching_Policy = 'F'\n+        or else Priority_Specific_Policy = 'F'\n+        or else Time_Slice_Val = 0\n+      then\n          Result := pthread_attr_setschedpolicy\n                      (Attributes'Access, System.OS_Interface.SCHED_FIFO);\n "}, {"sha": "7509236e1e1691374883b89d36fac7ef766463de", "filename": "gcc/ada/s-taprop-vms.adb", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-taprop-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-taprop-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vms.adb?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -602,15 +602,29 @@ package body System.Task_Primitives.Operations is\n       Result : Interfaces.C.int;\n       Param  : aliased struct_sched_param;\n \n+      function Get_Policy (Prio : System.Any_Priority) return Character;\n+      pragma Import (C, Get_Policy, \"__gnat_get_specific_dispatching\");\n+      --  Get priority specific dispatching policy\n+\n+      Priority_Specific_Policy : constant Character := Get_Policy (Prio);\n+      --  Upper case first character of the policy name corresponding to the\n+      --  task as set by a Priority_Specific_Dispatching pragma.\n+\n    begin\n       T.Common.Current_Priority := Prio;\n       Param.sched_priority := Interfaces.C.int (Underlying_Priorities (Prio));\n \n-      if Time_Slice_Val > 0 then\n+      if Dispatching_Policy = 'R'\n+        or else Priority_Specific_Policy = 'R'\n+        or else Time_Slice_Val > 0\n+      then\n          Result := pthread_setschedparam\n            (T.Common.LL.Thread, SCHED_RR, Param'Access);\n \n-      elsif Dispatching_Policy = 'F' or else Time_Slice_Val = 0 then\n+      elsif Dispatching_Policy = 'F'\n+        or else Priority_Specific_Policy = 'F'\n+        or else Time_Slice_Val = 0\n+      then\n          Result := pthread_setschedparam\n            (T.Common.LL.Thread, SCHED_FIFO, Param'Access);\n "}, {"sha": "6874fd53c515b1cae3c430c16f8670e1fb0f1e5d", "filename": "gcc/ada/s-taprop-vxworks.adb", "status": "modified", "additions": 77, "deletions": 40, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-taprop-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fs-taprop-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vxworks.adb?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -105,6 +105,10 @@ package body System.Task_Primitives.Operations is\n    Dispatching_Policy : Character;\n    pragma Import (C, Dispatching_Policy, \"__gl_task_dispatching_policy\");\n \n+   function Get_Policy (Prio : System.Any_Priority) return Character;\n+   pragma Import (C, Get_Policy, \"__gnat_get_specific_dispatching\");\n+   --  Get priority specific dispatching policy\n+\n    Mutex_Protocol : Priority_Type;\n \n    Foreign_Task_Elaborated : aliased Boolean := True;\n@@ -553,9 +557,11 @@ package body System.Task_Primitives.Operations is\n       Absolute : Duration;\n       Ticks    : int;\n       Timedout : Boolean;\n-      Result   : int;\n       Aborted  : Boolean := False;\n \n+      Result : int;\n+      pragma Warnings (Off, Result);\n+\n    begin\n       if Mode = Relative then\n          Absolute := Orig + Time;\n@@ -727,34 +733,32 @@ package body System.Task_Primitives.Operations is\n           (T.Common.LL.Thread, To_VxWorks_Priority (int (Prio)));\n       pragma Assert (Result = 0);\n \n-      if Dispatching_Policy = 'F' then\n-\n+      if (Dispatching_Policy = 'F' or else Get_Policy (Prio) = 'F')\n+        and then Loss_Of_Inheritance\n+        and then Prio < T.Common.Current_Priority\n+      then\n          --  Annex D requirement [RM D.2.2 par. 9]:\n \n          --    If the task drops its priority due to the loss of inherited\n          --    priority, it is added at the head of the ready queue for its\n          --    new active priority.\n \n-         if Loss_Of_Inheritance\n-           and then Prio < T.Common.Current_Priority\n-         then\n-            Array_Item := Prio_Array (T.Common.Base_Priority) + 1;\n-            Prio_Array (T.Common.Base_Priority) := Array_Item;\n+         Array_Item := Prio_Array (T.Common.Base_Priority) + 1;\n+         Prio_Array (T.Common.Base_Priority) := Array_Item;\n \n-            loop\n-               --  Give some processes a chance to arrive\n+         loop\n+            --  Give some processes a chance to arrive\n \n-               taskDelay (0);\n+            taskDelay (0);\n \n-               --  Then wait for our turn to proceed\n+            --  Then wait for our turn to proceed\n \n-               exit when Array_Item = Prio_Array (T.Common.Base_Priority)\n-                 or else Prio_Array (T.Common.Base_Priority) = 1;\n-            end loop;\n+            exit when Array_Item = Prio_Array (T.Common.Base_Priority)\n+              or else Prio_Array (T.Common.Base_Priority) = 1;\n+         end loop;\n \n-            Prio_Array (T.Common.Base_Priority) :=\n-              Prio_Array (T.Common.Base_Priority) - 1;\n-         end if;\n+         Prio_Array (T.Common.Base_Priority) :=\n+           Prio_Array (T.Common.Base_Priority) - 1;\n       end if;\n \n       T.Common.Current_Priority := Prio;\n@@ -779,7 +783,13 @@ package body System.Task_Primitives.Operations is\n       --  Properly initializes the FPU for PPC/MIPS systems\n \n    begin\n+      --  Store the user-level task id in the Thread field (to be used\n+      --  internally by the run-time system) and the kernel-level task id in\n+      --  the LWP field (to be used by the debugger).\n+\n       Self_ID.Common.LL.Thread := taskIdSelf;\n+      Self_ID.Common.LL.LWP := getpid;\n+\n       Specific.Set (Self_ID);\n \n       Init_Float;\n@@ -886,32 +896,55 @@ package body System.Task_Primitives.Operations is\n       --  not need to manipulate caller's signal mask at this point. All tasks\n       --  in RTS will have All_Tasks_Mask initially.\n \n-      if T.Common.Task_Image_Len = 0 then\n-         T.Common.LL.Thread := taskSpawn\n-           (System.Null_Address,\n-            To_VxWorks_Priority (int (Priority)),\n-            VX_FP_TASK,\n-            Adjusted_Stack_Size,\n-            Wrapper,\n-            To_Address (T));\n-      else\n-         declare\n-            Name : aliased String (1 .. T.Common.Task_Image_Len + 1);\n+      --  We now compute the VxWorks task name and options, then spawn ...\n+\n+      declare\n+         Name         : aliased String (1 .. T.Common.Task_Image_Len + 1);\n+         Name_Address : System.Address;\n+         --  Task name we are going to hand down to VxWorks\n \n-         begin\n+         Task_Options : aliased int;\n+         --  VxWorks options we are going to set for the created task,\n+         --  a combination of VX_optname_TASK attributes.\n+\n+         function To_int  is new Unchecked_Conversion (unsigned_int, int);\n+         function To_uint is new Unchecked_Conversion (int, unsigned_int);\n+\n+      begin\n+         --  If there is no Ada task name handy, let VxWorks choose one.\n+         --  Otherwise, tell VxWorks what the Ada task name is.\n+\n+         if T.Common.Task_Image_Len = 0 then\n+            Name_Address := System.Null_Address;\n+         else\n             Name (1 .. Name'Last - 1) :=\n               T.Common.Task_Image (1 .. T.Common.Task_Image_Len);\n             Name (Name'Last) := ASCII.NUL;\n+            Name_Address := Name'Address;\n+         end if;\n \n-            T.Common.LL.Thread := taskSpawn\n-              (Name'Address,\n-               To_VxWorks_Priority (int (Priority)),\n-               VX_FP_TASK,\n-               Adjusted_Stack_Size,\n-               Wrapper,\n-               To_Address (T));\n-         end;\n-      end if;\n+         --  For task options, we fetch the options assigned to the current\n+         --  task, so offering some user level control over the options for a\n+         --  task hierarchy, and force VX_FP_TASK because it is almost always\n+         --  required.\n+\n+         if taskOptionsGet (taskIdSelf, Task_Options'Access) /= OK then\n+            Task_Options := 0;\n+         end if;\n+\n+         Task_Options :=\n+           To_int (To_uint (Task_Options) or To_uint (VX_FP_TASK));\n+\n+         --  Now spawn the VxWorks task for real\n+\n+         T.Common.LL.Thread := taskSpawn\n+           (Name_Address,\n+            To_VxWorks_Priority (int (Priority)),\n+            Task_Options,\n+            Adjusted_Stack_Size,\n+            Wrapper,\n+            To_Address (T));\n+      end;\n \n       if T.Common.LL.Thread = -1 then\n          Succeeded := False;\n@@ -1244,7 +1277,11 @@ package body System.Task_Primitives.Operations is\n       if Time_Slice_Val > 0 then\n          Result := Set_Time_Slice\n            (To_Clock_Ticks\n-             (Duration (Time_Slice_Val) / Duration (1_000_000.0)));\n+              (Duration (Time_Slice_Val) / Duration (1_000_000.0)));\n+\n+      elsif Dispatching_Policy = 'R' then\n+         Result := Set_Time_Slice (To_Clock_Ticks (0.01));\n+\n       end if;\n \n       Result := sigemptyset (Unblocked_Signal_Mask'Access);"}, {"sha": "ba90858e77fbf272f448367713575769db9c2e7b", "filename": "gcc/ada/system-aix.ads", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fsystem-aix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fsystem-aix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-aix.ads?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                            (AIX/PPC Version)                             --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -88,17 +88,18 @@ package System is\n \n    type Bit_Order is (High_Order_First, Low_Order_First);\n    Default_Bit_Order : constant Bit_Order := High_Order_First;\n+   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n \n    --  Priority-related Declarations (RM D.1)\n \n-   Max_Priority           : constant Positive := 30;\n-   Max_Interrupt_Priority : constant Positive := 31;\n+   Max_Priority           : constant Positive := 125;\n+   Max_Interrupt_Priority : constant Positive := 126;\n \n-   subtype Any_Priority       is Integer      range  0 .. 31;\n-   subtype Priority           is Any_Priority range  0 .. 30;\n-   subtype Interrupt_Priority is Any_Priority range 31 .. 31;\n+   subtype Any_Priority       is Integer      range   0 .. 126;\n+   subtype Priority           is Any_Priority range   0 .. 125;\n+   subtype Interrupt_Priority is Any_Priority range 126 .. 126;\n \n-   Default_Priority : constant Priority := 15;\n+   Default_Priority : constant Priority := 62;\n \n private\n \n@@ -133,7 +134,7 @@ private\n    Preallocated_Stacks       : constant Boolean := False;\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n-   Stack_Check_Probes        : constant Boolean := False;\n+   Stack_Check_Probes        : constant Boolean := True;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;"}, {"sha": "105264eb6e2a401282133a6a42fe8f60f488f641", "filename": "gcc/ada/system-linux-ia64.ads", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fsystem-linux-ia64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fsystem-linux-ia64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-linux-ia64.ads?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -5,9 +5,9 @@\n --                               S Y S T E M                                --\n --                                                                          --\n --                                 S p e c                                  --\n---                         (GNU-Linux/ia64 Version)                         --\n+--                        (GNU-Linux/ia64 Version)                          --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -88,17 +88,18 @@ package System is\n \n    type Bit_Order is (High_Order_First, Low_Order_First);\n    Default_Bit_Order : constant Bit_Order := Low_Order_First;\n+   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n \n    --  Priority-related Declarations (RM D.1)\n \n-   Max_Priority           : constant Positive := 30;\n-   Max_Interrupt_Priority : constant Positive := 31;\n+   Max_Priority           : constant Positive := 97;\n+   Max_Interrupt_Priority : constant Positive := 98;\n \n-   subtype Any_Priority       is Integer      range  0 .. 31;\n-   subtype Priority           is Any_Priority range  0 .. 30;\n-   subtype Interrupt_Priority is Any_Priority range 31 .. 31;\n+   subtype Any_Priority       is Integer      range  0 .. 98;\n+   subtype Priority           is Any_Priority range  0 .. 97;\n+   subtype Interrupt_Priority is Any_Priority range 98 .. 98;\n \n-   Default_Priority : constant Priority := 15;\n+   Default_Priority : constant Priority := 48;\n \n private\n \n@@ -133,7 +134,7 @@ private\n    Preallocated_Stacks       : constant Boolean := False;\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n-   Stack_Check_Probes        : constant Boolean := False;\n+   Stack_Check_Probes        : constant Boolean := True;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;"}, {"sha": "62b5441140f69e4cc785b7d63781d919d3737aa2", "filename": "gcc/ada/system-linux-x86.ads", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fsystem-linux-x86.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fsystem-linux-x86.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-linux-x86.ads?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -5,9 +5,9 @@\n --                               S Y S T E M                                --\n --                                                                          --\n --                                 S p e c                                  --\n---                          (GNU-Linux/x86 Version)                         --\n+--                         (GNU-Linux/x86 Version)                          --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -88,17 +88,18 @@ package System is\n \n    type Bit_Order is (High_Order_First, Low_Order_First);\n    Default_Bit_Order : constant Bit_Order := Low_Order_First;\n+   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n \n    --  Priority-related Declarations (RM D.1)\n \n-   Max_Priority           : constant Positive := 30;\n-   Max_Interrupt_Priority : constant Positive := 31;\n+   Max_Priority           : constant Positive := 97;\n+   Max_Interrupt_Priority : constant Positive := 98;\n \n-   subtype Any_Priority       is Integer      range  0 .. 31;\n-   subtype Priority           is Any_Priority range  0 .. 30;\n-   subtype Interrupt_Priority is Any_Priority range 31 .. 31;\n+   subtype Any_Priority       is Integer      range  0 .. 98;\n+   subtype Priority           is Any_Priority range  0 .. 97;\n+   subtype Interrupt_Priority is Any_Priority range 98 .. 98;\n \n-   Default_Priority : constant Priority := 15;\n+   Default_Priority : constant Priority := 48;\n \n private\n "}, {"sha": "c4916eeaf182674fed51992904bdadc159ce84b9", "filename": "gcc/ada/system-linux-x86_64.ads", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fsystem-linux-x86_64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec946d1845c7ed1cb2955a9065c7edd9402882a7/gcc%2Fada%2Fsystem-linux-x86_64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-linux-x86_64.ads?ref=ec946d1845c7ed1cb2955a9065c7edd9402882a7", "patch": "@@ -5,9 +5,9 @@\n --                               S Y S T E M                                --\n --                                                                          --\n --                                 S p e c                                  --\n---                          (GNU-Linux/x86-64 Version)                      --\n+--                       (GNU-Linux/x86-64 Version)                         --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -88,17 +88,18 @@ package System is\n \n    type Bit_Order is (High_Order_First, Low_Order_First);\n    Default_Bit_Order : constant Bit_Order := Low_Order_First;\n+   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n \n    --  Priority-related Declarations (RM D.1)\n \n-   Max_Priority           : constant Positive := 30;\n-   Max_Interrupt_Priority : constant Positive := 31;\n+   Max_Priority           : constant Positive := 97;\n+   Max_Interrupt_Priority : constant Positive := 98;\n \n-   subtype Any_Priority       is Integer      range  0 .. 31;\n-   subtype Priority           is Any_Priority range  0 .. 30;\n-   subtype Interrupt_Priority is Any_Priority range 31 .. 31;\n+   subtype Any_Priority       is Integer      range  0 .. 98;\n+   subtype Priority           is Any_Priority range  0 .. 97;\n+   subtype Interrupt_Priority is Any_Priority range 98 .. 98;\n \n-   Default_Priority : constant Priority := 15;\n+   Default_Priority : constant Priority := 48;\n \n private\n "}]}