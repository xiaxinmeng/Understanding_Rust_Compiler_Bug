{"sha": "88a19424c64b30a89f5c5ee2769cc3b3964d48a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhhMTk0MjRjNjRiMzBhODlmNWM1ZWUyNzY5Y2MzYjM5NjRkNDhhOA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-06-05T16:59:43Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-06-05T16:59:43Z"}, "message": "objc-act.c (generate_method_descriptors): Register objc_method_prototype_template as a GC root.\n\n\t* objc/objc-act.c (generate_method_descriptors): Register\n\tobjc_method_prototype_template as a GC root.\n\t(comp_method_with_proto): Register function_type as a GC root.\n\t(comp_proto_with_proto): Replace function_type1 and\n\tfunction_type2 with a two-element array; register it as a GC root.\n\n\t(generate_protocols, build_protocol_initializer,\n\tgenerate_protocol_list, build_category_initializer,\n\tbuild_shared_structure_initializer): Do not cache cast_type\n\tand/or cast_type2.\n\nFrom-SVN: r34405", "tree": {"sha": "650c51edc0d1d0ae5612cfe3c9b722ef07737051", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/650c51edc0d1d0ae5612cfe3c9b722ef07737051"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88a19424c64b30a89f5c5ee2769cc3b3964d48a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a19424c64b30a89f5c5ee2769cc3b3964d48a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88a19424c64b30a89f5c5ee2769cc3b3964d48a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a19424c64b30a89f5c5ee2769cc3b3964d48a8/comments", "author": null, "committer": null, "parents": [{"sha": "a696c1d662f45421f7185f0fd31c010e86bd227a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a696c1d662f45421f7185f0fd31c010e86bd227a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a696c1d662f45421f7185f0fd31c010e86bd227a"}], "stats": {"total": 122, "additions": 65, "deletions": 57}, "files": [{"sha": "eb06dc2eb9d850a3032f33ac9002b714becb5220", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a19424c64b30a89f5c5ee2769cc3b3964d48a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a19424c64b30a89f5c5ee2769cc3b3964d48a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88a19424c64b30a89f5c5ee2769cc3b3964d48a8", "patch": "@@ -1,3 +1,16 @@\n+2000-06-05  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* objc/objc-act.c (generate_method_descriptors): Register\n+\tobjc_method_prototype_template as a GC root.\n+\t(comp_method_with_proto): Register function_type as a GC root.\n+\t(comp_proto_with_proto): Replace function_type1 and\n+\tfunction_type2 with a two-element array; register it as a GC root.\n+\n+\t(generate_protocols, build_protocol_initializer,\n+\tgenerate_protocol_list, build_category_initializer,\n+\tbuild_shared_structure_initializer): Do not cache cast_type\n+\tand/or cast_type2.\n+\n 2000-06-05  J. David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* function.c (assign_parms): Add missing argument to set_mem_attributes"}, {"sha": "7dc4b115d52615f94247994328cf77f5eda34ddd", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 52, "deletions": 57, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a19424c64b30a89f5c5ee2769cc3b3964d48a8/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a19424c64b30a89f5c5ee2769cc3b3964d48a8/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=88a19424c64b30a89f5c5ee2769cc3b3964d48a8", "patch": "@@ -3017,7 +3017,10 @@ generate_method_descriptors (protocol)\t/* generate_dispatch_tables */\n   int size;\n \n   if (!objc_method_prototype_template)\n-    objc_method_prototype_template = build_method_prototype_template ();\n+    {\n+      objc_method_prototype_template = build_method_prototype_template ();\n+      ggc_add_tree_root (&objc_method_prototype_template, 1);\n+    }\n \n   cast = build_tree_list (build_tree_list (NULL_TREE, xref_tag (RECORD_TYPE,\n \t\t\t\tget_identifier (UTAG_METHOD_PROTOTYPE_LIST))),\n@@ -3178,7 +3181,7 @@ generate_protocols ()\n   tree p, tmp_decl, encoding;\n   tree sc_spec, decl_specs, decl;\n   tree initlist, protocol_name_expr, refs_decl, refs_expr;\n-  tree cast_type2 = 0;\n+  tree cast_type2;\n \n   tmp_decl = build_tmp_function_decl ();\n \n@@ -3244,9 +3247,8 @@ generate_protocols ()\n \n       if (refs_decl)\n \t{\n-\t  if (!cast_type2)\n-\t    cast_type2\n-\t      = groktypename\n+\t  cast_type2\n+\t    = groktypename\n \t\t(build_tree_list (build_tree_list (NULL_TREE,\n \t\t\t\t\t\t   objc_protocol_template),\n \t\t\t\t  build1 (INDIRECT_REF, NULL_TREE,\n@@ -3282,16 +3284,14 @@ build_protocol_initializer (type, protocol_name, protocol_list,\n      tree class_methods;\n {\n   tree initlist = NULL_TREE, expr;\n-  static tree cast_type = 0;\n+  tree cast_type;\n \n-  if (!cast_type)\n-    cast_type\n-      = groktypename\n-\t(build_tree_list\n-\t (build_tree_list (NULL_TREE,\n-\t\t\t   xref_tag (RECORD_TYPE,\n-\t\t\t\t     get_identifier (UTAG_CLASS))),\n-\t  build1 (INDIRECT_REF, NULL_TREE, NULL_TREE)));\n+  cast_type = groktypename\n+    (build_tree_list\n+     (build_tree_list (NULL_TREE,\n+\t\t       xref_tag (RECORD_TYPE,\n+\t\t\t\t get_identifier (UTAG_CLASS))),\n+      build1 (INDIRECT_REF, NULL_TREE, NULL_TREE)));\n \n   /* Filling the \"isa\" in with one allows the runtime system to\n      detect that the version change...should remove before final release.  */\n@@ -4202,9 +4202,9 @@ static tree\n generate_protocol_list (i_or_p)\n      tree i_or_p;\n {\n-  static tree cast_type = 0;\n   tree initlist, decl_specs, sc_spec;\n   tree refs_decl, expr_decl, lproto, e, plist;\n+  tree cast_type;\n   int size = 0;\n \n   if (TREE_CODE (i_or_p) == CLASS_INTERFACE_TYPE\n@@ -4215,14 +4215,12 @@ generate_protocol_list (i_or_p)\n   else\n     abort ();\n \n-  if (!cast_type)\n-    cast_type\n-      = groktypename\n-\t(build_tree_list\n-\t (build_tree_list (NULL_TREE,\n-\t\t\t   xref_tag (RECORD_TYPE,\n-\t\t\t\t     get_identifier (UTAG_PROTOCOL))),\n-\t  build1 (INDIRECT_REF, NULL_TREE, NULL_TREE)));\n+  cast_type = groktypename\n+    (build_tree_list\n+     (build_tree_list (NULL_TREE,\n+\t\t       xref_tag (RECORD_TYPE,\n+\t\t\t\t get_identifier (UTAG_PROTOCOL))),\n+      build1 (INDIRECT_REF, NULL_TREE, NULL_TREE)));\n \n   /* Compute size.  */\n   for (lproto = plist; lproto; lproto = TREE_CHAIN (lproto))\n@@ -4321,17 +4319,13 @@ build_category_initializer (type, cat_name, class_name,\n      initlist = tree_cons (NULL_TREE, build_int_2 (0, 0), initlist);\n   else\n      {\n-\tstatic tree cast_type2;\n-\n-\tif (!cast_type2)\n-\t  cast_type2\n-\t    = groktypename\n-\t      (build_tree_list\n-\t       (build_tree_list (NULL_TREE,\n-\t\t\t\t xref_tag (RECORD_TYPE,\n-\t\t\t\t\t   get_identifier (UTAG_PROTOCOL))),\n-\t\tbuild1 (INDIRECT_REF, NULL_TREE,\n-\t\t\tbuild1 (INDIRECT_REF, NULL_TREE, NULL_TREE))));\n+       tree cast_type2 = groktypename\n+\t (build_tree_list\n+\t  (build_tree_list (NULL_TREE,\n+\t\t\t    xref_tag (RECORD_TYPE,\n+\t\t\t\t      get_identifier (UTAG_PROTOCOL))),\n+\t   build1 (INDIRECT_REF, NULL_TREE,\n+\t\t   build1 (INDIRECT_REF, NULL_TREE, NULL_TREE))));\n \n \texpr = build_unary_op (ADDR_EXPR, protocol_list, 0);\n \tTREE_TYPE (expr) = cast_type2;\n@@ -4432,17 +4426,14 @@ build_shared_structure_initializer (type, isa, super, name, size, status,\n     initlist = tree_cons (NULL_TREE, build_int_2 (0, 0), initlist);\n   else\n      {\n-     static tree cast_type2;\n-\n-     if (!cast_type2)\n-        cast_type2\n-\t  = groktypename\n-\t    (build_tree_list\n-\t     (build_tree_list (NULL_TREE,\n-\t\t\t       xref_tag (RECORD_TYPE,\n-\t\t\t\t\t get_identifier (UTAG_PROTOCOL))),\n-\t      build1 (INDIRECT_REF, NULL_TREE,\n-\t\t      build1 (INDIRECT_REF, NULL_TREE, NULL_TREE))));\n+       tree cast_type2\n+\t = groktypename\n+\t (build_tree_list\n+\t  (build_tree_list (NULL_TREE,\n+\t\t\t    xref_tag (RECORD_TYPE,\n+\t\t\t\t      get_identifier (UTAG_PROTOCOL))),\n+\t   build1 (INDIRECT_REF, NULL_TREE,\n+\t\t   build1 (INDIRECT_REF, NULL_TREE, NULL_TREE))));\n \n      expr = build_unary_op (ADDR_EXPR, protocol_list, 0);\n      TREE_TYPE (expr) = cast_type2;\n@@ -7116,7 +7107,10 @@ comp_method_with_proto (method, proto)\n \n   /* Create a function_type node once.  */\n   if (!function_type)\n-    function_type = make_node (FUNCTION_TYPE);\n+    {\n+      function_type = make_node (FUNCTION_TYPE);\n+      ggc_add_tree_root (&function_type, 1);\n+    }\n \n   /* Install argument types - normally set by build_function_type.  */\n   TYPE_ARG_TYPES (function_type) = get_arg_type_list (proto, METHOD_DEF, 0);\n@@ -7130,27 +7124,28 @@ comp_method_with_proto (method, proto)\n /* Return 1 if PROTO1 is consistent with PROTO2.  */\n \n static int\n-comp_proto_with_proto (proto1, proto2)\n-     tree proto1, proto2;\n+comp_proto_with_proto (proto0, proto1)\n+     tree proto0, proto1;\n {\n-  static tree function_type1 = 0, function_type2 = 0;\n+  static tree function_type[2];\n \n   /* Create a couple function_type node's once.  */\n-  if (!function_type1)\n+  if (!function_type[0])\n     {\n-      function_type1 = make_node (FUNCTION_TYPE);\n-      function_type2 = make_node (FUNCTION_TYPE);\n+      function_type[0] = make_node (FUNCTION_TYPE);\n+      function_type[1] = make_node (FUNCTION_TYPE);\n+      ggc_add_tree_root (function_type, 2);\n     }\n \n   /* Install argument types; normally set by build_function_type.  */\n-  TYPE_ARG_TYPES (function_type1) = get_arg_type_list (proto1, METHOD_REF, 0);\n-  TYPE_ARG_TYPES (function_type2) = get_arg_type_list (proto2, METHOD_REF, 0);\n+  TYPE_ARG_TYPES (function_type[0]) = get_arg_type_list (proto0, METHOD_REF, 0);\n+  TYPE_ARG_TYPES (function_type[1]) = get_arg_type_list (proto1, METHOD_REF, 0);\n \n   /* Install return type.  */\n-  TREE_TYPE (function_type1) = groktypename (TREE_TYPE (proto1));\n-  TREE_TYPE (function_type2) = groktypename (TREE_TYPE (proto2));\n+  TREE_TYPE (function_type[0]) = groktypename (TREE_TYPE (proto0));\n+  TREE_TYPE (function_type[1]) = groktypename (TREE_TYPE (proto1));\n \n-  return comptypes (function_type1, function_type2);\n+  return comptypes (function_type[0], function_type[1]);\n }\n \n /* - Generate an identifier for the function. the format is \"_n_cls\","}]}