{"sha": "7edd9b154d9f03c1006722aff36caa0955198c31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VkZDliMTU0ZDlmMDNjMTAwNjcyMmFmZjM2Y2FhMDk1NTE5OGMzMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-06-25T17:06:52Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-06-25T17:06:52Z"}, "message": "cgraph.h (asmname_hasher): Inherit from ggc_ptr_hash.\n\ngcc/\n\t* cgraph.h (asmname_hasher): Inherit from ggc_ptr_hash.  Remove\n\tredundant typedefs and members.\n\t* coverage.c (counts_entry): Inherit from pointer_hash.  Remove\n\tredundant typedefs.\n\t* dwarf2out.c (cu_hash_table_entry_hasher): Likewise.\n\t* ipa-devirt.c (odr_name_hasher): Likewise.\n\t(polymorphic_call_target_hasher): Likewise.\n\t* ira-costs.c (cost_classes_hasher): Likewise.\n\t* statistics.c (stats_counter_hasher): Likewise.\n\t* trans-mem.c (log_entry_hasher): Likewise.\n\t* tree-ssa-dom.c (expr_elt_hasher): Likewise.\n\t* tree-ssa-sccvn.c (vn_phi_hasher, vn_reference_hasher): Likewise.\n\t* tree-ssa-tail-merge.c (same_succ_def): Likewise.\n\t* var-tracking.c (variable_hasher): Likewise.\n\t* valtrack.h (dead_debug_hash_descr): Inherit from free_ptr_hash.\n\tRemove redundant typedefs and members.\n\nFrom-SVN: r224961", "tree": {"sha": "afd045214ddfed54f05d40c03903e01c1702cef3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afd045214ddfed54f05d40c03903e01c1702cef3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7edd9b154d9f03c1006722aff36caa0955198c31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7edd9b154d9f03c1006722aff36caa0955198c31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7edd9b154d9f03c1006722aff36caa0955198c31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7edd9b154d9f03c1006722aff36caa0955198c31/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6c907cff668b1c4bf305b1988d99acbf841f6f52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c907cff668b1c4bf305b1988d99acbf841f6f52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c907cff668b1c4bf305b1988d99acbf841f6f52"}], "stats": {"total": 108, "additions": 34, "deletions": 74}, "files": [{"sha": "27bbec5ab068b008327f8a9b6c64f11e9f7dc9a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7edd9b154d9f03c1006722aff36caa0955198c31", "patch": "@@ -1,3 +1,22 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* cgraph.h (asmname_hasher): Inherit from ggc_ptr_hash.  Remove\n+\tredundant typedefs and members.\n+\t* coverage.c (counts_entry): Inherit from pointer_hash.  Remove\n+\tredundant typedefs.\n+\t* dwarf2out.c (cu_hash_table_entry_hasher): Likewise.\n+\t* ipa-devirt.c (odr_name_hasher): Likewise.\n+\t(polymorphic_call_target_hasher): Likewise.\n+\t* ira-costs.c (cost_classes_hasher): Likewise.\n+\t* statistics.c (stats_counter_hasher): Likewise.\n+\t* trans-mem.c (log_entry_hasher): Likewise.\n+\t* tree-ssa-dom.c (expr_elt_hasher): Likewise.\n+\t* tree-ssa-sccvn.c (vn_phi_hasher, vn_reference_hasher): Likewise.\n+\t* tree-ssa-tail-merge.c (same_succ_def): Likewise.\n+\t* var-tracking.c (variable_hasher): Likewise.\n+\t* valtrack.h (dead_debug_hash_descr): Inherit from free_ptr_hash.\n+\tRemove redundant typedefs and members.\n+\n 2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* hash-traits.h (ggc_cache_hasher): Rename to..."}, {"sha": "affed3a30bc626a0791d7025887a207ff3bbda69", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=7edd9b154d9f03c1006722aff36caa0955198c31", "patch": "@@ -1854,17 +1854,12 @@ enum symtab_state\n   FINISHED\n };\n \n-struct asmname_hasher\n+struct asmname_hasher : ggc_ptr_hash <symtab_node>\n {\n-  typedef symtab_node *value_type;\n   typedef const_tree compare_type;\n \n   static hashval_t hash (symtab_node *n);\n   static bool equal (symtab_node *n, const_tree t);\n-  static void ggc_mx (symtab_node *n);\n-  static void pch_nx (symtab_node *&);\n-  static void pch_nx (symtab_node *&, gt_pointer_operator, void *);\n-  static void remove (symtab_node *) {}\n };\n \n class GTY((tag (\"SYMTAB\"))) symbol_table\n@@ -2174,28 +2169,6 @@ asmname_hasher::equal (symtab_node *n, const_tree t)\n   return symbol_table::decl_assembler_name_equal (n->decl, t);\n }\n \n-extern void gt_ggc_mx (symtab_node *&);\n-\n-inline void\n-asmname_hasher::ggc_mx (symtab_node *n)\n-{\n-  gt_ggc_mx (n);\n-}\n-\n-extern void gt_pch_nx (symtab_node *&);\n-\n-inline void\n-asmname_hasher::pch_nx (symtab_node *&n)\n-{\n-  gt_pch_nx (n);\n-}\n-\n-inline void\n-asmname_hasher::pch_nx (symtab_node *&n, gt_pointer_operator op, void *cookie)\n-{\n-  op (&n, cookie);\n-}\n-\n /* In cgraph.c  */\n void cgraph_c_finalize (void);\n void release_function_body (tree);"}, {"sha": "a9c5e86b331aa1b9aff88a969ef7ddabcfb6400d", "filename": "gcc/coverage.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=7edd9b154d9f03c1006722aff36caa0955198c31", "patch": "@@ -86,7 +86,7 @@ struct GTY((chain_next (\"%h.next\"))) coverage_data\n };\n \n /* Counts information for a function.  */\n-typedef struct counts_entry\n+typedef struct counts_entry : pointer_hash <counts_entry>\n {\n   /* We hash by  */\n   unsigned ident;\n@@ -99,8 +99,6 @@ typedef struct counts_entry\n   struct gcov_ctr_summary summary;\n \n   /* hash_table support.  */\n-  typedef counts_entry *value_type;\n-  typedef counts_entry *compare_type;\n   static inline hashval_t hash (const counts_entry *);\n   static int equal (const counts_entry *, const counts_entry *);\n   static void remove (counts_entry *);"}, {"sha": "11d11271c676ead6d9ca9d440c74807936af9d38", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=7edd9b154d9f03c1006722aff36caa0955198c31", "patch": "@@ -6957,9 +6957,8 @@ struct cu_hash_table_entry\n \n /* Helpers to manipulate hash table of CUs.  */\n \n-struct cu_hash_table_entry_hasher\n+struct cu_hash_table_entry_hasher : pointer_hash <cu_hash_table_entry>\n {\n-  typedef cu_hash_table_entry *value_type;\n   typedef die_struct *compare_type;\n   static inline hashval_t hash (const cu_hash_table_entry *);\n   static inline bool equal (const cu_hash_table_entry *, const die_struct *);"}, {"sha": "b735f64784aac1c438c40291654b83e2daf6e50e", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=7edd9b154d9f03c1006722aff36caa0955198c31", "patch": "@@ -383,9 +383,8 @@ type_possibly_instantiated_p (tree t)\n /* Hash used to unify ODR types based on their mangled name and for anonymous\n    namespace types.  */\n \n-struct odr_name_hasher\n+struct odr_name_hasher : pointer_hash <odr_type_d>\n {\n-  typedef odr_type_d *value_type;\n   typedef union tree_node *compare_type;\n   static inline hashval_t hash (const odr_type_d *);\n   static inline bool equal (const odr_type_d *, const tree_node *);\n@@ -2724,10 +2723,9 @@ struct polymorphic_call_target_d\n \n /* Polymorphic call target cache helpers.  */\n \n-struct polymorphic_call_target_hasher \n+struct polymorphic_call_target_hasher\n+  : pointer_hash <polymorphic_call_target_d>\n {\n-  typedef polymorphic_call_target_d *value_type;\n-  typedef polymorphic_call_target_d *compare_type;\n   static inline hashval_t hash (const polymorphic_call_target_d *);\n   static inline bool equal (const polymorphic_call_target_d *,\n \t\t\t    const polymorphic_call_target_d *);"}, {"sha": "0d39215b0479f086a813299ed4b173a5dc26f8d8", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=7edd9b154d9f03c1006722aff36caa0955198c31", "patch": "@@ -147,10 +147,8 @@ static cost_classes_t *regno_cost_classes;\n \n /* Helper for cost_classes hashing.  */\n \n-struct cost_classes_hasher\n+struct cost_classes_hasher : pointer_hash <cost_classes>\n {\n-  typedef cost_classes *value_type;\n-  typedef cost_classes *compare_type;\n   static inline hashval_t hash (const cost_classes *);\n   static inline bool equal (const cost_classes *, const cost_classes *);\n   static inline void remove (cost_classes *);"}, {"sha": "97884faf81eb5e66ad780e3648d9d9fb9ddd9edc", "filename": "gcc/statistics.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2Fstatistics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2Fstatistics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstatistics.c?ref=7edd9b154d9f03c1006722aff36caa0955198c31", "patch": "@@ -46,10 +46,8 @@ typedef struct statistics_counter_s {\n \n /* Hashtable helpers.  */\n \n-struct stats_counter_hasher\n+struct stats_counter_hasher : pointer_hash <statistics_counter_t>\n {\n-  typedef statistics_counter_t *value_type;\n-  typedef statistics_counter_t *compare_type;\n   static inline hashval_t hash (const statistics_counter_t *);\n   static inline bool equal (const statistics_counter_t *,\n \t\t\t    const statistics_counter_t *);"}, {"sha": "0b7c2da9d362b1c436c3804ef2931efab66eb00b", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=7edd9b154d9f03c1006722aff36caa0955198c31", "patch": "@@ -955,10 +955,8 @@ typedef struct tm_log_entry\n \n /* Log entry hashtable helpers.  */\n \n-struct log_entry_hasher\n+struct log_entry_hasher : pointer_hash <tm_log_entry>\n {\n-  typedef tm_log_entry *value_type;\n-  typedef tm_log_entry *compare_type;\n   static inline hashval_t hash (const tm_log_entry *);\n   static inline bool equal (const tm_log_entry *, const tm_log_entry *);\n   static inline void remove (tm_log_entry *);"}, {"sha": "e45b78c411aa9f9c8f486763ec6a6a3748a5be4d", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=7edd9b154d9f03c1006722aff36caa0955198c31", "patch": "@@ -166,10 +166,8 @@ static bool hashable_expr_equal_p (const struct hashable_expr *,\n \t\t\t\t   const struct hashable_expr *);\n static void free_expr_hash_elt (void *);\n \n-struct expr_elt_hasher\n+struct expr_elt_hasher : pointer_hash <expr_hash_elt>\n {\n-  typedef expr_hash_elt *value_type;\n-  typedef expr_hash_elt *compare_type;\n   static inline hashval_t hash (const value_type &);\n   static inline bool equal (const value_type &, const compare_type &);\n   static inline void remove (value_type &);"}, {"sha": "15b8b85d70a0a17f572c245ceeadce2424376c5b", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=7edd9b154d9f03c1006722aff36caa0955198c31", "patch": "@@ -170,10 +170,8 @@ typedef vn_nary_op_table_type::iterator vn_nary_op_iterator_type;\n static int\n vn_phi_eq (const_vn_phi_t const vp1, const_vn_phi_t const vp2);\n \n-struct vn_phi_hasher\n+struct vn_phi_hasher : pointer_hash <vn_phi_s>\n { \n-  typedef vn_phi_s *value_type;\n-  typedef vn_phi_s *compare_type;\n   static inline hashval_t hash (const vn_phi_s *);\n   static inline bool equal (const vn_phi_s *, const vn_phi_s *);\n   static inline void remove (vn_phi_s *);\n@@ -238,10 +236,8 @@ free_reference (vn_reference_s *vr)\n \n /* vn_reference hashtable helpers.  */\n \n-struct vn_reference_hasher\n+struct vn_reference_hasher : pointer_hash <vn_reference_s>\n {\n-  typedef vn_reference_s *value_type;\n-  typedef vn_reference_s *compare_type;\n   static inline hashval_t hash (const vn_reference_s *);\n   static inline bool equal (const vn_reference_s *, const vn_reference_s *);\n   static inline void remove (vn_reference_s *);"}, {"sha": "3c660f9f0bd02e1effd81a02976a3e82fdb5f2e7", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=7edd9b154d9f03c1006722aff36caa0955198c31", "patch": "@@ -231,7 +231,7 @@ along with GCC; see the file COPYING3.  If not see\n    Additionally, the hash value for the struct is cached in hashval, and\n    in_worklist indicates whether it's currently part of worklist.  */\n \n-struct same_succ_def\n+struct same_succ_def : pointer_hash <same_succ_def>\n {\n   /* The bbs that have the same successor bbs.  */\n   bitmap bbs;\n@@ -248,8 +248,6 @@ struct same_succ_def\n   hashval_t hashval;\n \n   /* hash_table support.  */\n-  typedef same_succ_def *value_type;\n-  typedef same_succ_def *compare_type;\n   static inline hashval_t hash (const same_succ_def *);\n   static int equal (const same_succ_def *, const same_succ_def *);\n   static void remove (same_succ_def *);"}, {"sha": "7223a4319894288ac94f16ed4ff95e747937dd9a", "filename": "gcc/valtrack.h", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2Fvaltrack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2Fvaltrack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvaltrack.h?ref=7edd9b154d9f03c1006722aff36caa0955198c31", "patch": "@@ -41,18 +41,13 @@ struct dead_debug_global_entry\n /* Descriptor for hash_table to hash by dead_debug_global_entry's REG\n    and map to DTEMP.  */\n \n-struct dead_debug_hash_descr\n+struct dead_debug_hash_descr : free_ptr_hash <dead_debug_global_entry>\n {\n-  /* The hash table contains pointers to entries of this type.  */\n-  typedef struct dead_debug_global_entry *value_type;\n-  typedef struct dead_debug_global_entry *compare_type;\n   /* Hash on the pseudo number.  */\n   static inline hashval_t hash (const dead_debug_global_entry *my);\n   /* Entries are identical if they refer to the same pseudo.  */\n   static inline bool equal (const dead_debug_global_entry *my,\n \t\t\t    const dead_debug_global_entry *other);\n-  /* Release entries when they're removed.  */\n-  static inline void remove (dead_debug_global_entry *p);\n };\n \n /* Hash on the pseudo number.  */\n@@ -70,13 +65,6 @@ dead_debug_hash_descr::equal (const dead_debug_global_entry *my,\n   return my->reg == other->reg;\n }\n \n-/* Release entries when they're removed.  */\n-inline void\n-dead_debug_hash_descr::remove (dead_debug_global_entry *p)\n-{\n-  XDELETE (p);\n-}\n-\n /* Maintain a global table of pseudos used in debug insns after their\n    deaths in other blocks, and debug temps their deathpoint values are\n    to be bound to.  */"}, {"sha": "ebd0cfa7a7c2f7e6117d5640917cf30f5453aa39", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edd9b154d9f03c1006722aff36caa0955198c31/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=7edd9b154d9f03c1006722aff36caa0955198c31", "patch": "@@ -524,9 +524,8 @@ static void variable_htab_free (void *);\n \n /* Variable hashtable helpers.  */\n \n-struct variable_hasher\n+struct variable_hasher : pointer_hash <variable_def>\n {\n-  typedef variable_def *value_type;\n   typedef void *compare_type;\n   static inline hashval_t hash (const variable_def *);\n   static inline bool equal (const variable_def *, const void *);"}]}