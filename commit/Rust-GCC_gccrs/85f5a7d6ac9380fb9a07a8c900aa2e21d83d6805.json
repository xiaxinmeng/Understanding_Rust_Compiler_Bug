{"sha": "85f5a7d6ac9380fb9a07a8c900aa2e21d83d6805", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVmNWE3ZDZhYzkzODBmYjlhMDdhOGM5MDBhYTJlMjFkODNkNjgwNQ==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:24Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:24Z"}, "message": "VAX: Define LEGITIMATE_PIC_OPERAND_P\n\nThe VAX ELF psABI does not permit the use of all hardware operand modes\nfor PIC symbol references due to the need to use PC-relative addressing\nfor symbols that end up local and the need to make references indirect\nsymbols that end up global.\n\nTherefore symbols referred as immediates may only be used with the move\nand push address (MOVA and PUSHA) instructions and their PC-relative\ndisplacement address mode, as there is no genuine PC-relative immediate\navailable that all the other instructions would have to use.\n\nFurthermore global symbol references must not have an offset applied,\nwhich has to be added with a separate instruction, because there is no\nsupport now for GOT entries for external `symbol+offset' references, so\nany indirect GOT references made by the static linker from the original\ndirect symbol references must not have an addend applied.  Consequently\nno addend is allowed even if a given external symbol turns out local,\nfor whatever reason, at the static link time.\n\nDefine the LEGITIMATE_PIC_OPERAND_P macro then, a corresponding function\nand predicate to exclude the relevant expressions as required, and then\na constraint so that reloads are produced where needed, and use the new\nfacilities in the machine description, folding corresponding duplicated\npatterns for local and external symbols together.  Rewrite predicates to\nmake use of the new function, rename them to match their sense and also\nremove ones no longer used.\n\nAll this fixing an ICE like this:\n\nduring RTL pass: postreload\n.../gcc/testsuite/gcc.c-torture/execute/20040709-2.c: In function 'testE':\n.../gcc/testsuite/gcc.c-torture/execute/20040709-2.c:89:1: internal compiler error: in reload_combine_note_use, at postreload.c:1559\n.../gcc/testsuite/gcc.c-torture/execute/20040709-2.c:96:65: note: in expansion of macro 'T'\n0x10fe84cb reload_combine_note_use\n\t.../gcc/postreload.c:1559\n0x10fe8857 reload_combine_note_use\n\t.../gcc/postreload.c:1621\n0x10fe8303 reload_combine_note_use\n\t.../gcc/postreload.c:1517\n0x10fe7c7b reload_combine\n\t.../gcc/postreload.c:1408\n0x10fe3417 reload_cse_regs\n\t.../gcc/postreload.c:67\n0x10feaf9f execute\n\t.../gcc/postreload.c:2358\n\ndue to the presence of a pseudo register post-reload:\n\n(insn 435 228 229 13 (set (reg:SI 1 %r1)\n        (mem/c:SI (reg/f:SI 341) [25 sE+12 S4 A8])) \".../gcc/testsuite/gcc.c-torture/execute/20040709-2.c\":96:65 12 {movsi_2}\n     (nil))\n\n(due to the use of an offset `sE+12' symbol reference) and removing\nthese regressions:\n\nFAIL: gcc.c-torture/execute/20040709-2.c   -O2  (internal compiler error)\nFAIL: gcc.c-torture/execute/20040709-2.c   -O2  (test for excess errors)\nFAIL: gcc.c-torture/execute/20040709-2.c   -O3 -fomit-frame-pointer -funroll-loops -fpeel-loops -ftracer -finline-functions  (internal compiler error)\nFAIL: gcc.c-torture/execute/20040709-2.c   -O3 -fomit-frame-pointer -funroll-loops -fpeel-loops -ftracer -finline-functions  (test for excess errors)\nFAIL: gcc.c-torture/execute/20040709-2.c   -O3 -g  (internal compiler error)\nFAIL: gcc.c-torture/execute/20040709-2.c   -O3 -g  (test for excess errors)\nFAIL: gcc.c-torture/execute/20040709-2.c   -Os  (internal compiler error)\nFAIL: gcc.c-torture/execute/20040709-2.c   -Os  (test for excess errors)\nFAIL: gcc.c-torture/execute/20040709-2.c   -O2 -flto -fno-use-linker-plugin -flto-partition=none  (internal compiler error)\nFAIL: gcc.c-torture/execute/20040709-2.c   -O2 -flto -fno-use-linker-plugin -flto-partition=none  (test for excess errors)\nFAIL: gcc.c-torture/execute/20040709-3.c   -O2  (internal compiler error)\nFAIL: gcc.c-torture/execute/20040709-3.c   -O2  (test for excess errors)\nFAIL: gcc.c-torture/execute/20040709-3.c   -O3 -g  (internal compiler error)\nFAIL: gcc.c-torture/execute/20040709-3.c   -O3 -g  (test for excess errors)\nFAIL: gcc.c-torture/execute/20040709-3.c   -Os  (internal compiler error)\nFAIL: gcc.c-torture/execute/20040709-3.c   -Os  (test for excess errors)\nFAIL: gcc.c-torture/execute/20040709-3.c   -O2 -flto -fno-use-linker-plugin -flto-partition=none  (internal compiler error)\nFAIL: gcc.c-torture/execute/20040709-3.c   -O2 -flto -fno-use-linker-plugin -flto-partition=none  (test for excess errors)\nFAIL: gcc.dg/torture/pr52028.c   -O2 -flto -fuse-linker-plugin -fno-fat-lto-objects  (internal compiler error)\nFAIL: gcc.dg/torture/pr52028.c   -O2 -flto -fuse-linker-plugin -fno-fat-lto-objects  (test for excess errors)\n\n\tgcc/\n\t* config/vax/constraints.md (A): New constraint.\n\t* config/vax/predicates.md (external_symbolic_operand)\n\t(external_const_operand): Remove predicates.\n\t(local_symbolic_operand): Rename to...\n\t(pic_symbolic_operand): ... this, and rework.\n\t(external_memory_operand): Rename to...\n\t(non_pic_external_memory_operand): ... this, and rework.\n\t(illegal_blk_memory_operand, illegal_addsub_di_memory_operand):\n\tUpdate accordingly.\n\t* config/vax/vax-protos.h (vax_acceptable_pic_operand_p): New\n\tprototype.\n\t* config/vax/vax.c (vax_acceptable_pic_operand_p): New function.\n\t(vax_output_int_add): Update according to predicate rework.\n\t* config/vax/vax.h (LEGITIMATE_PIC_OPERAND_P): New macro.\n\t* config/vax/vax.md (pushlclsymreg, pushextsymreg): Fold\n\ttogether, and rename to...\n\t(*pushsymreg): ... this.  Use the `pic_symbolic_operand'\n\tpredicate and the `A' constraint for the displacement operand.\n\t(movlclsymreg, movextsymreg): Fold together, and rename to...\n\t(*movsymreg): ... this.  Use the `pic_symbolic_operand'\n\tpredicate and the `A' constraint for the displacement operand.\n\t(pushextsym, pushlclsym): Fold together, and rename to...\n\t(*pushsym): ... this.  Use the `pic_symbolic_operand' predicate\n\tand the `A' constraint for the displacement operand.\n\t(movextsym, movlclsym): Fold together, and rename to...\n\t(*movsym): ... this.  Use the `pic_symbolic_operand' predicate\n\tand the `A' constraint for the displacement operand.", "tree": {"sha": "1d2585d0b8eedc774686f63f414b4deb9cb91432", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d2585d0b8eedc774686f63f414b4deb9cb91432"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85f5a7d6ac9380fb9a07a8c900aa2e21d83d6805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85f5a7d6ac9380fb9a07a8c900aa2e21d83d6805", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85f5a7d6ac9380fb9a07a8c900aa2e21d83d6805", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85f5a7d6ac9380fb9a07a8c900aa2e21d83d6805/comments", "author": null, "committer": null, "parents": [{"sha": "91ae8fbc5aa02bd889492d3c04a7fcb95026a77e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91ae8fbc5aa02bd889492d3c04a7fcb95026a77e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91ae8fbc5aa02bd889492d3c04a7fcb95026a77e"}], "stats": {"total": 137, "additions": 70, "deletions": 67}, "files": [{"sha": "d4eddb82a666b31f55f8939a429dc52cd9c4c8e5", "filename": "gcc/config/vax/constraints.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85f5a7d6ac9380fb9a07a8c900aa2e21d83d6805/gcc%2Fconfig%2Fvax%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85f5a7d6ac9380fb9a07a8c900aa2e21d83d6805/gcc%2Fconfig%2Fvax%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fconstraints.md?ref=85f5a7d6ac9380fb9a07a8c900aa2e21d83d6805", "patch": "@@ -112,6 +112,10 @@\n     (and (match_operand:DI 0 \"memory_operand\")\n \t (not (match_operand:DI 0 \"illegal_addsub_di_memory_operand\" \"\"))))\n \n+(define_constraint \"A\"\n+    \"@internal An integer constant suitable for address load operations.\"\n+  (match_test (\"CONSTANT_P (op) && pic_symbolic_operand (op, mode)\")))\n+\n (define_constraint \"T\"\n     \"@internal satisfies CONSTANT_P and, if pic is enabled, is not a SYMBOL_REF, LABEL_REF, or CONST.\"\n   (and (match_test (\"CONSTANT_P (op)\"))"}, {"sha": "93e91e499a6755c82b07646073642090c0bff821", "filename": "gcc/config/vax/predicates.md", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85f5a7d6ac9380fb9a07a8c900aa2e21d83d6805/gcc%2Fconfig%2Fvax%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85f5a7d6ac9380fb9a07a8c900aa2e21d83d6805/gcc%2Fconfig%2Fvax%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fpredicates.md?ref=85f5a7d6ac9380fb9a07a8c900aa2e21d83d6805", "patch": "@@ -23,33 +23,17 @@\n (define_predicate \"symbolic_operand\"\n   (match_code \"const,symbol_ref,label_ref\"))\n \n-(define_predicate \"local_symbolic_operand\"\n-  (match_code \"const,symbol_ref,label_ref\")\n-{\n-  if (GET_CODE (op) == LABEL_REF)\n-    return 1;\n-  if (GET_CODE (op) == SYMBOL_REF)\n-    return !flag_pic || SYMBOL_REF_LOCAL_P (op);\n-  if (GET_CODE (XEXP (XEXP (op, 0), 0)) == LABEL_REF)\n-    return 1;\n-  return !flag_pic || SYMBOL_REF_LOCAL_P (XEXP (XEXP (op, 0), 0));\n-})\n-\n-(define_predicate \"external_symbolic_operand\"\n-  (and (match_code \"symbol_ref\")\n-       (not (match_operand 0 \"local_symbolic_operand\" \"\"))))\n-\n-(define_predicate \"external_const_operand\"\n-  (and (match_code \"const\")\n-       (match_test \"GET_CODE (XEXP (XEXP (op, 0), 0)) == SYMBOL_REF\n-\t\t    && !SYMBOL_REF_LOCAL_P (XEXP (XEXP (op, 0), 0))\")))\n+(define_predicate \"pic_symbolic_operand\"\n+  (and (match_code \"const,symbol_ref,label_ref\")\n+       (match_test \"!flag_pic\n+\t\t    || vax_acceptable_pic_operand_p (op, false, true)\")))\n \n (define_predicate \"nonsymbolic_operand\"\n   (and (ior (match_test \"!flag_pic\")\n \t    (not (match_operand 0 \"symbolic_operand\")))\n        (match_operand 0 \"general_operand\" \"\")))\n \n-(define_predicate \"external_memory_operand\"\n+(define_predicate \"non_pic_external_memory_operand\"\n    (match_code \"mem\")\n {\n   rtx addr = XEXP (op, 0);\n@@ -61,8 +45,8 @@\n     addr = XEXP (addr, 0);\n   if (GET_CODE (addr) == PLUS)\n     addr = XEXP (addr, 1);\n-  return external_symbolic_operand (addr, SImode)\n-\t || external_const_operand (addr, SImode);\n+  return (symbolic_operand (addr, SImode)\n+\t  && !vax_acceptable_pic_operand_p (addr, true, true));\n })\n \n (define_predicate \"indirect_memory_operand\"\n@@ -87,15 +71,15 @@\n (define_predicate \"illegal_blk_memory_operand\"\n    (and (match_code \"mem\")\n \t(ior (and (match_test \"flag_pic\")\n-\t\t  (match_operand 0 \"external_memory_operand\" \"\"))\n+\t\t  (match_operand 0 \"non_pic_external_memory_operand\" \"\"))\n \t     (ior (match_operand 0 \"indexed_memory_operand\" \"\")\n \t\t  (ior (match_operand 0 \"indirect_memory_operand\" \"\")\n \t\t       (match_test \"GET_CODE (XEXP (op, 0)) == PRE_DEC\"))))))\n \n (define_predicate \"illegal_addsub_di_memory_operand\"\n    (and (match_code \"mem\")\n \t(ior (and (match_test \"flag_pic\")\n-\t\t  (match_operand 0 \"external_memory_operand\" \"\"))\n+\t\t  (match_operand 0 \"non_pic_external_memory_operand\" \"\"))\n \t     (ior (match_operand 0 \"indexed_memory_operand\" \"\")\n \t\t  (ior (match_operand 0 \"indirect_memory_operand\" \"\")\n \t\t       (match_test \"GET_CODE (XEXP (op, 0)) == PRE_DEC\"))))))"}, {"sha": "454d35e3383a6a6095b52ad851c6a5df9072e466", "filename": "gcc/config/vax/vax-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85f5a7d6ac9380fb9a07a8c900aa2e21d83d6805/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85f5a7d6ac9380fb9a07a8c900aa2e21d83d6805/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax-protos.h?ref=85f5a7d6ac9380fb9a07a8c900aa2e21d83d6805", "patch": "@@ -21,6 +21,7 @@ extern bool legitimate_constant_address_p (rtx);\n extern void vax_expand_prologue (void);\n \n #ifdef RTX_CODE\n+extern bool vax_acceptable_pic_operand_p (rtx, bool, bool);\n extern const char *cond_name (rtx);\n extern bool adjacent_operands_p (rtx, rtx, machine_mode);\n extern const char *rev_cond_name (rtx);"}, {"sha": "37f5dadc74cadf0d6d586ae9d55023ec139217e1", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85f5a7d6ac9380fb9a07a8c900aa2e21d83d6805/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85f5a7d6ac9380fb9a07a8c900aa2e21d83d6805/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=85f5a7d6ac9380fb9a07a8c900aa2e21d83d6805", "patch": "@@ -1033,6 +1033,39 @@ vax_rtx_costs (rtx x, machine_mode mode, int outer_code,\n   return true;\n }\n \f\n+/* With ELF we do not support GOT entries for external `symbol+offset'\n+   references, so do not accept external symbol references if an offset\n+   is to be added.  Do not accept external symbol references at all if\n+   LOCAL_P is set.  This is for cases where making a reference indirect\n+   would make it invalid.  Do not accept any kind of symbols if SYMBOL_P\n+   is clear.  This is for situations where the a reference is used as an\n+   immediate value for operations other than address loads (MOVA/PUSHA),\n+   as those operations do not support PC-relative immediates.  */\n+\n+bool\n+vax_acceptable_pic_operand_p (rtx x ATTRIBUTE_UNUSED,\n+\t\t\t      bool local_p ATTRIBUTE_UNUSED,\n+\t\t\t      bool symbol_p ATTRIBUTE_UNUSED)\n+{\n+#ifdef NO_EXTERNAL_INDIRECT_ADDRESS\n+  if (GET_CODE (x) == CONST && GET_CODE (XEXP (x, 0)) == PLUS)\n+    {\n+      x = XEXP (XEXP (x, 0), 0);\n+      local_p = true;\n+    }\n+  switch (GET_CODE (x))\n+    {\n+    case SYMBOL_REF:\n+      return symbol_p && !(local_p && !SYMBOL_REF_LOCAL_P (x));\n+    case LABEL_REF:\n+      return symbol_p && !(local_p && LABEL_REF_NONLOCAL_P (x));\n+    default:\n+      break;\n+    }\n+#endif\n+  return true;\n+}\n+\f\n /* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n    Used for C++ multiple inheritance.\n \t.mask\t^m<r2,r3,r4,r5,r6,r7,r8,r9,r10,r11>  #conservative entry mask\n@@ -1370,8 +1403,10 @@ vax_output_int_add (rtx_insn *insn, rtx *operands, machine_mode mode)\n \t  {\n \t    gcc_assert (rtx_equal_p (operands[0], operands[1]));\n #ifdef NO_EXTERNAL_INDIRECT_ADDRESS\n-\t    gcc_assert (!flag_pic || !external_memory_operand (low[2], SImode));\n-\t    gcc_assert (!flag_pic || !external_memory_operand (low[0], SImode));\n+\t    gcc_assert (!flag_pic\n+\t\t\t|| !non_pic_external_memory_operand (low[2], SImode));\n+\t    gcc_assert (!flag_pic\n+\t\t\t|| !non_pic_external_memory_operand (low[0], SImode));\n #endif\n \n \t    /* No reason to add a 0 to the low part and thus no carry, so just"}, {"sha": "146b0a6e2b2db935b15c5015e69b0bb70603a5ce", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85f5a7d6ac9380fb9a07a8c900aa2e21d83d6805/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85f5a7d6ac9380fb9a07a8c900aa2e21d83d6805/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=85f5a7d6ac9380fb9a07a8c900aa2e21d83d6805", "patch": "@@ -442,6 +442,11 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n    of a shift count.  */\n /* #define SHIFT_COUNT_TRUNCATED */\n \n+/* We need to reject symbol references in PIC code except for address\n+   loads, handled elsewhere.  */\n+#define LEGITIMATE_PIC_OPERAND_P(x)\t\\\n+  vax_acceptable_pic_operand_p ((x), false, false)\n+\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */"}, {"sha": "e6b217fd0d73f685518e5cee027df186468e9d4b", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 14, "deletions": 40, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85f5a7d6ac9380fb9a07a8c900aa2e21d83d6805/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85f5a7d6ac9380fb9a07a8c900aa2e21d83d6805/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=85f5a7d6ac9380fb9a07a8c900aa2e21d83d6805", "patch": "@@ -338,34 +338,6 @@\n    add<VAXfp:fsfx>2 %1,%0\n    add<VAXfp:fsfx>3 %1,%2,%0\")\n \n-(define_insn \"pushlclsymreg\"\n-  [(set (match_operand:SI 0 \"push_operand\" \"=g\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n-\t\t (match_operand:SI 2 \"local_symbolic_operand\" \"i\")))]\n-  \"flag_pic\"\n-  \"pushab %a2[%1]\")\n-\n-(define_insn \"pushextsymreg\"\n-  [(set (match_operand:SI 0 \"push_operand\" \"=g\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n-\t\t (match_operand:SI 2 \"external_symbolic_operand\" \"i\")))]\n-  \"flag_pic\"\n-  \"pushab %a2[%1]\")\n-\n-(define_insn \"movlclsymreg\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=g\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n-\t\t (match_operand:SI 2 \"local_symbolic_operand\" \"i\")))]\n-  \"flag_pic\"\n-  \"movab %a2[%1],%0\")\n-\n-(define_insn \"movextsymreg\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=g\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n-\t\t (match_operand:SI 2 \"external_symbolic_operand\" \"i\")))]\n-  \"flag_pic\"\n-  \"movab %a2[%1],%0\")\n-\n (define_insn \"add<mode>3\"\n   [(set (match_operand:VAXint 0 \"nonimmediate_operand\" \"=g\")\n \t(plus:VAXint (match_operand:VAXint 1 \"general_operand\" \"nrmT\")\n@@ -1525,29 +1497,31 @@\n   \"\"\n   \"casel %0,$0,%1\")\n \f\n-(define_insn \"pushextsym\"\n+(define_insn \"*pushsym\"\n   [(set (match_operand:SI 0 \"push_operand\" \"=g\")\n-\t(match_operand:SI 1 \"external_symbolic_operand\" \"i\"))]\n+\t(match_operand:SI 1 \"pic_symbolic_operand\" \"A\"))]\n   \"\"\n   \"pushab %a1\")\n \n-(define_insn \"movextsym\"\n+(define_insn \"*movsym\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=g\")\n-\t(match_operand:SI 1 \"external_symbolic_operand\" \"i\"))]\n+\t(match_operand:SI 1 \"pic_symbolic_operand\" \"A\"))]\n   \"\"\n   \"movab %a1,%0\")\n \n-(define_insn \"pushlclsym\"\n+(define_insn \"*pushsymreg\"\n   [(set (match_operand:SI 0 \"push_operand\" \"=g\")\n-\t(match_operand:SI 1 \"local_symbolic_operand\" \"i\"))]\n-  \"\"\n-  \"pushab %a1\")\n+\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n+\t\t (match_operand:SI 2 \"pic_symbolic_operand\" \"A\")))]\n+  \"flag_pic\"\n+  \"pushab %a2[%1]\")\n \n-(define_insn \"movlclsym\"\n+(define_insn \"*movsymreg\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=g\")\n-\t(match_operand:SI 1 \"local_symbolic_operand\" \"i\"))]\n-  \"\"\n-  \"movab %a1,%0\")\n+\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n+\t\t (match_operand:SI 2 \"pic_symbolic_operand\" \"A\")))]\n+  \"flag_pic\"\n+  \"movab %a2[%1],%0\")\n \f\n ;;- load or push effective address\n ;; These come after the move and add/sub patterns"}]}