{"sha": "d469a71e5a0eb512b522248841c56496abca8cd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ2OWE3MWU1YTBlYjUxMmI1MjIyNDg4NDFjNTY0OTZhYmNhOGNkNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-09-23T10:21:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-09-23T10:21:45Z"}, "message": "tree-vect-loop.c (get_initial_def_for_reduction): Simplify, avoid adjusting by + 0 or * 1.\n\n2019-09-23  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-loop.c (get_initial_def_for_reduction): Simplify,\n\tavoid adjusting by + 0 or * 1.\n\t(vect_create_epilog_for_reduction): Get reduction code only\n\twhen necessary.  Deal with adjustment_def only when necessary.\n\nFrom-SVN: r276054", "tree": {"sha": "16869f55cd3ef8853276869ac5e93dd398f5efa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16869f55cd3ef8853276869ac5e93dd398f5efa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d469a71e5a0eb512b522248841c56496abca8cd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d469a71e5a0eb512b522248841c56496abca8cd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d469a71e5a0eb512b522248841c56496abca8cd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d469a71e5a0eb512b522248841c56496abca8cd6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4d411f1ff79a4cf60f4700ea0f1fec104687f20e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d411f1ff79a4cf60f4700ea0f1fec104687f20e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d411f1ff79a4cf60f4700ea0f1fec104687f20e"}], "stats": {"total": 67, "additions": 32, "deletions": 35}, "files": [{"sha": "9392b8f086f50d8545fc1d102bf86f10b91e13cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d469a71e5a0eb512b522248841c56496abca8cd6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d469a71e5a0eb512b522248841c56496abca8cd6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d469a71e5a0eb512b522248841c56496abca8cd6", "patch": "@@ -1,3 +1,10 @@\n+2019-09-23  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.c (get_initial_def_for_reduction): Simplify,\n+\tavoid adjusting by + 0 or * 1.\n+\t(vect_create_epilog_for_reduction): Get reduction code only\n+\twhen necessary.  Deal with adjustment_def only when necessary.\n+\n 2019-09-23  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/atomics.md (aarch64_store_exclusive_pair): Fix"}, {"sha": "9e399cdacee76c2c0aef815dcd226123ba550d78", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 25, "deletions": 35, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d469a71e5a0eb512b522248841c56496abca8cd6/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d469a71e5a0eb512b522248841c56496abca8cd6/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=d469a71e5a0eb512b522248841c56496abca8cd6", "patch": "@@ -4003,8 +4003,10 @@ get_initial_def_for_reduction (stmt_vec_info stmt_vinfo, tree init_val,\n   gcc_assert (nested_in_vect_loop_p (loop, stmt_vinfo)\n \t      || loop == (gimple_bb (stmt_vinfo->stmt))->loop_father);\n \n-  vect_reduction_type reduction_type\n-    = STMT_VINFO_VEC_REDUCTION_TYPE (stmt_vinfo);\n+  /* ADJUSTMENT_DEF is NULL when called from\n+     vect_create_epilog_for_reduction to vectorize double reduction.  */\n+  if (adjustment_def)\n+    *adjustment_def = NULL;\n \n   switch (code)\n     {\n@@ -4018,11 +4020,6 @@ get_initial_def_for_reduction (stmt_vec_info stmt_vinfo, tree init_val,\n     case MULT_EXPR:\n     case BIT_AND_EXPR:\n       {\n-        /* ADJUSTMENT_DEF is NULL when called from\n-           vect_create_epilog_for_reduction to vectorize double reduction.  */\n-        if (adjustment_def)\n-\t  *adjustment_def = init_val;\n-\n         if (code == MULT_EXPR)\n           {\n             real_init_val = dconst1;\n@@ -4037,10 +4034,14 @@ get_initial_def_for_reduction (stmt_vec_info stmt_vinfo, tree init_val,\n         else\n           def_for_init = build_int_cst (scalar_type, int_init_val);\n \n-\tif (adjustment_def)\n-\t  /* Option1: the first element is '0' or '1' as well.  */\n-\t  init_def = gimple_build_vector_from_val (&stmts, vectype,\n-\t\t\t\t\t\t   def_for_init);\n+\tif (adjustment_def || operand_equal_p (def_for_init, init_val, 0))\n+\t  {\n+\t    /* Option1: the first element is '0' or '1' as well.  */\n+\t    if (!operand_equal_p (def_for_init, init_val, 0))\n+\t      *adjustment_def = init_val;\n+\t    init_def = gimple_build_vector_from_val (&stmts, vectype,\n+\t\t\t\t\t\t     def_for_init);\n+\t  }\n \telse if (!TYPE_VECTOR_SUBPARTS (vectype).is_constant ())\n \t  {\n \t    /* Option2 (variable length): the first element is INIT_VAL.  */\n@@ -4064,16 +4065,6 @@ get_initial_def_for_reduction (stmt_vec_info stmt_vinfo, tree init_val,\n     case MAX_EXPR:\n     case COND_EXPR:\n       {\n-\tif (adjustment_def)\n-          {\n-\t    *adjustment_def = NULL_TREE;\n-\t    if (reduction_type != COND_REDUCTION\n-\t\t&& reduction_type != EXTRACT_LAST_REDUCTION)\n-\t      {\n-\t\tinit_def = vect_get_vec_def_for_operand (init_val, stmt_vinfo);\n-\t\tbreak;\n-\t      }\n-\t  }\n \tinit_val = gimple_convert (&stmts, TREE_TYPE (vectype), init_val);\n \tinit_def = gimple_build_vector_from_val (&stmts, vectype, init_val);\n       }\n@@ -4304,7 +4295,6 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs,\n   tree vec_dest;\n   tree new_temp = NULL_TREE, new_dest, new_name, new_scalar_dest;\n   gimple *epilog_stmt = NULL;\n-  enum tree_code code = gimple_assign_rhs_code (stmt_info->stmt);\n   gimple *exit_phi;\n   tree bitsize;\n   tree adjustment_def = NULL;\n@@ -4645,12 +4635,6 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs,\n       gcc_assert (STMT_VINFO_IN_PATTERN_P (orig_stmt_info));\n       gcc_assert (STMT_VINFO_RELATED_STMT (orig_stmt_info) == stmt_info);\n     }\n-\n-  code = gimple_assign_rhs_code (orig_stmt_info->stmt);\n-  /* For MINUS_EXPR the initial vector is [init_val,0,...,0], therefore,\n-     partial results are added and not subtracted.  */\n-  if (code == MINUS_EXPR) \n-    code = PLUS_EXPR;\n   \n   scalar_dest = gimple_assign_lhs (orig_stmt_info->stmt);\n   scalar_type = TREE_TYPE (scalar_dest);\n@@ -4665,7 +4649,14 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs,\n      in the vectorized outer-loop, or reduced to a scalar result at the end of\n      the outer-loop.  */\n   if (nested_in_vect_loop && !double_reduc)\n-    goto vect_finalize_reduction;\n+    ;\n+  else\n+    {\n+  enum tree_code code = gimple_assign_rhs_code (orig_stmt_info->stmt);\n+  /* For MINUS_EXPR the initial vector is [init_val,0,...,0], therefore,\n+     partial results are added and not subtracted.  */\n+  if (code == MINUS_EXPR) \n+    code = PLUS_EXPR;\n \n   /* SLP reduction without reduction chain, e.g.,\n      # a1 = phi <a2, a0>\n@@ -5352,12 +5343,7 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs,\n \t  scalar_results[0] = tmp;\n \t}\n     }\n-  \n-vect_finalize_reduction:\n-\n-  if (double_reduc)\n-    loop = loop->inner;\n-\n+ \n   /* 2.5 Adjust the final result by the initial value of the reduction\n \t variable. (When such adjustment is not needed, then\n \t 'adjustment_def' is zero).  For example, if code is PLUS we create:\n@@ -5401,6 +5387,10 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs,\n \n       new_phis[0] = epilog_stmt;\n     }\n+    }\n+\n+  if (double_reduc)\n+    loop = loop->inner;\n \n   /* 2.6  Handle the loop-exit phis.  Replace the uses of scalar loop-exit\n           phis with new adjusted scalar results, i.e., replace use <s_out0>"}]}