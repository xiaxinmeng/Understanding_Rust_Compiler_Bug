{"sha": "b1241d573822afcc591ba7a84b8866a440f24073", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEyNDFkNTczODIyYWZjYzU5MWJhN2E4NGI4ODY2YTQ0MGYyNDA3Mw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-05-10T21:27:23Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-05-10T21:27:23Z"}, "message": "Do not use pragma Provide_Shift_Operators in Atree package\n\nThis pragma is relatively recent and may be problematic for the bootstrap.\n\ngcc/ada/\n\t* atree.ads (Slot): Remove pragma Provide_Shift_Operators.\n\t(Shift_Left): New intrinsic function.\n\t(Shift_Right): Likewise.\n\t* atree.adb (Get_1_Bit_Val): Use Natural instead of Integer.\n\t(Get_2_Bit_Val): Likewise.\n\t(Get_4_Bit_Val): Likewise.\n\t(Get_8_Bit_Val): Likewise.\n\t(Set_1_Bit_Val): Likewise.\n\t(Set_2_Bit_Val): Likewise.\n\t(Set_4_Bit_Val): Likewise.\n\t(Set_8_Bit_Val): Likewise.", "tree": {"sha": "bbbe850229403dd418cb4b3cfaf1f18e7bb88882", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbbe850229403dd418cb4b3cfaf1f18e7bb88882"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1241d573822afcc591ba7a84b8866a440f24073", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1241d573822afcc591ba7a84b8866a440f24073", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1241d573822afcc591ba7a84b8866a440f24073", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1241d573822afcc591ba7a84b8866a440f24073/comments", "author": null, "committer": null, "parents": [{"sha": "a1b10eec36aa7aa32757fcdde3b53865d383399c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b10eec36aa7aa32757fcdde3b53865d383399c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1b10eec36aa7aa32757fcdde3b53865d383399c"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "4d4dc43c548ad211b21e950778bcd4b0eb71ed77", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1241d573822afcc591ba7a84b8866a440f24073/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1241d573822afcc591ba7a84b8866a440f24073/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=b1241d573822afcc591ba7a84b8866a440f24073", "patch": "@@ -564,7 +564,7 @@ package body Atree is\n          pragma Debug (Validate_Node_And_Offset (N, Offset / L));\n \n          S : Slot renames Slots.Table (Node_Offsets.Table (N) + Offset / L);\n-         V : constant Integer := Integer ((Offset mod L) * (Slot_Size / L));\n+         V : constant Natural := Natural ((Offset mod L) * (Slot_Size / L));\n       begin\n          return Field_1_Bit (Shift_Right (S, V) and 1);\n       end Get_1_Bit_Val;\n@@ -577,7 +577,7 @@ package body Atree is\n          pragma Debug (Validate_Node_And_Offset (N, Offset / L));\n \n          S : Slot renames Slots.Table (Node_Offsets.Table (N) + Offset / L);\n-         V : constant Integer := Integer ((Offset mod L) * (Slot_Size / L));\n+         V : constant Natural := Natural ((Offset mod L) * (Slot_Size / L));\n       begin\n          return Field_2_Bit (Shift_Right (S, V) and 3);\n       end Get_2_Bit_Val;\n@@ -590,7 +590,7 @@ package body Atree is\n          pragma Debug (Validate_Node_And_Offset (N, Offset / L));\n \n          S : Slot renames Slots.Table (Node_Offsets.Table (N) + Offset / L);\n-         V : constant Integer := Integer ((Offset mod L) * (Slot_Size / L));\n+         V : constant Natural := Natural ((Offset mod L) * (Slot_Size / L));\n       begin\n          return Field_4_Bit (Shift_Right (S, V) and 15);\n       end Get_4_Bit_Val;\n@@ -603,7 +603,7 @@ package body Atree is\n          pragma Debug (Validate_Node_And_Offset (N, Offset / L));\n \n          S : Slot renames Slots.Table (Node_Offsets.Table (N) + Offset / L);\n-         V : constant Integer := Integer ((Offset mod L) * (Slot_Size / L));\n+         V : constant Natural := Natural ((Offset mod L) * (Slot_Size / L));\n       begin\n          return Field_8_Bit (Shift_Right (S, V) and 255);\n       end Get_8_Bit_Val;\n@@ -626,7 +626,7 @@ package body Atree is\n          pragma Debug (Validate_Node_And_Offset_Write (N, Offset / L));\n \n          S : Slot renames Slots.Table (Node_Offsets.Table (N) + Offset / L);\n-         V : constant Integer := Integer ((Offset mod L) * (Slot_Size / L));\n+         V : constant Natural := Natural ((Offset mod L) * (Slot_Size / L));\n       begin\n          S := (S and not Shift_Left (1, V)) or Shift_Left (Slot (Val), V);\n       end Set_1_Bit_Val;\n@@ -639,7 +639,7 @@ package body Atree is\n          pragma Debug (Validate_Node_And_Offset_Write (N, Offset / L));\n \n          S : Slot renames Slots.Table (Node_Offsets.Table (N) + Offset / L);\n-         V : constant Integer := Integer ((Offset mod L) * (Slot_Size / L));\n+         V : constant Natural := Natural ((Offset mod L) * (Slot_Size / L));\n       begin\n          S := (S and not Shift_Left (3, V)) or Shift_Left (Slot (Val), V);\n       end Set_2_Bit_Val;\n@@ -652,7 +652,7 @@ package body Atree is\n          pragma Debug (Validate_Node_And_Offset_Write (N, Offset / L));\n \n          S : Slot renames Slots.Table (Node_Offsets.Table (N) + Offset / L);\n-         V : constant Integer := Integer ((Offset mod L) * (Slot_Size / L));\n+         V : constant Natural := Natural ((Offset mod L) * (Slot_Size / L));\n       begin\n          S := (S and not Shift_Left (15, V)) or Shift_Left (Slot (Val), V);\n       end Set_4_Bit_Val;\n@@ -665,7 +665,7 @@ package body Atree is\n          pragma Debug (Validate_Node_And_Offset_Write (N, Offset / L));\n \n          S : Slot renames Slots.Table (Node_Offsets.Table (N) + Offset / L);\n-         V : constant Integer := Integer ((Offset mod L) * (Slot_Size / L));\n+         V : constant Natural := Natural ((Offset mod L) * (Slot_Size / L));\n       begin\n          S := (S and not Shift_Left (255, V)) or Shift_Left (Slot (Val), V);\n       end Set_8_Bit_Val;"}, {"sha": "efb8ca2fc591f11d7ac69e5f17bad055d06dbde1", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1241d573822afcc591ba7a84b8866a440f24073/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1241d573822afcc591ba7a84b8866a440f24073/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=b1241d573822afcc591ba7a84b8866a440f24073", "patch": "@@ -653,7 +653,12 @@ package Atree is\n       Slot_Size : constant := 32;\n       type Slot is mod 2**Slot_Size;\n       for Slot'Size use Slot_Size;\n-      pragma Provide_Shift_Operators (Slot);\n+\n+      function Shift_Left (S : Slot; V : Natural) return Slot;\n+      pragma Import (Intrinsic, Shift_Left);\n+\n+      function Shift_Right (S : Slot; V : Natural) return Slot;\n+      pragma Import (Intrinsic, Shift_Right);\n \n       type Field_1_Bit  is mod 2**1;\n       type Field_2_Bit  is mod 2**2;"}]}