{"sha": "69c7a374a106057e7c9f219e349178b709bbf370", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjljN2EzNzRhMTA2MDU3ZTdjOWYyMTllMzQ5MTc4YjcwOWJiZjM3MA==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2014-05-28T00:37:00Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2014-05-28T00:37:00Z"}, "message": "rx.c (add_vector_labels): New.\n\n* config/rx/rx.c (add_vector_labels): New.\n(rx_output_function_prologue): Call it.\n(rx_handle_func_attribute): Don't require empty arguments.\n(rx_handle_vector_attribute): New.\n(rx_attribute_table): Add \"vector\" attribute.\n* doc/extend.texi (interrupt, vector): Document new/changed\nRX-specific attributes.\n\n* config/rx/rx.c (rx_adjust_insn_length): Skip for non-insns.\n\nFrom-SVN: r210995", "tree": {"sha": "dcc15801eba9b4952ada8924df55cf3a4599f6fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcc15801eba9b4952ada8924df55cf3a4599f6fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69c7a374a106057e7c9f219e349178b709bbf370", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69c7a374a106057e7c9f219e349178b709bbf370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69c7a374a106057e7c9f219e349178b709bbf370", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69c7a374a106057e7c9f219e349178b709bbf370/comments", "author": null, "committer": null, "parents": [{"sha": "fa07538edf51a3399507370ae41a00b473667f52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa07538edf51a3399507370ae41a00b473667f52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa07538edf51a3399507370ae41a00b473667f52"}], "stats": {"total": 130, "additions": 128, "deletions": 2}, "files": [{"sha": "fd26409c0a874a2c31fea4cd8eb10ee0d7972181", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69c7a374a106057e7c9f219e349178b709bbf370/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69c7a374a106057e7c9f219e349178b709bbf370/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69c7a374a106057e7c9f219e349178b709bbf370", "patch": "@@ -1,3 +1,15 @@\n+2014-05-27  DJ Delorie  <dj@redhat.com>\n+\n+\t* config/rx/rx.c (add_vector_labels): New.\n+\t(rx_output_function_prologue): Call it.\n+\t(rx_handle_func_attribute): Don't require empty arguments.\n+\t(rx_handle_vector_attribute): New.\n+\t(rx_attribute_table): Add \"vector\" attribute.\n+\t* doc/extend.texi (interrupt, vector): Document new/changed\n+\tRX-specific attributes.\n+\n+\t* config/rx/rx.c (rx_adjust_insn_length): Skip for non-insns.\n+\n 2014-05-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* double-int.c (div_and_round_double) <ROUND_DIV_EXPR>: Use the proper"}, {"sha": "c81b2d4a410f9bc432c332e37c9c71d3360c0c6a", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 87, "deletions": 2, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69c7a374a106057e7c9f219e349178b709bbf370/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69c7a374a106057e7c9f219e349178b709bbf370/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=69c7a374a106057e7c9f219e349178b709bbf370", "patch": "@@ -1809,10 +1809,69 @@ rx_expand_prologue (void)\n     }\n }\n \n+static void\n+add_vector_labels (FILE *file, const char *aname)\n+{\n+  tree vec_attr;\n+  tree val_attr;\n+  const char *vname = \"vect\";\n+  const char *s;\n+  int vnum;\n+\n+  /* This node is for the vector/interrupt tag itself */\n+  vec_attr = lookup_attribute (aname, DECL_ATTRIBUTES (current_function_decl));\n+  if (!vec_attr)\n+    return;\n+\n+  /* Now point it at the first argument */\n+  vec_attr = TREE_VALUE (vec_attr);\n+\n+  /* Iterate through the arguments.  */\n+  while (vec_attr)\n+    {\n+      val_attr = TREE_VALUE (vec_attr);\n+      switch (TREE_CODE (val_attr))\n+\t{\n+\tcase STRING_CST:\n+\t  s = TREE_STRING_POINTER (val_attr);\n+\t  goto string_id_common;\n+\n+\tcase IDENTIFIER_NODE:\n+\t  s = IDENTIFIER_POINTER (val_attr);\n+\n+\tstring_id_common:\n+\t  if (strcmp (s, \"$default\") == 0)\n+\t    {\n+\t      fprintf (file, \"\\t.global\\t$tableentry$default$%s\\n\", vname);\n+\t      fprintf (file, \"$tableentry$default$%s:\\n\", vname);\n+\t    }\n+\t  else\n+\t    vname = s;\n+\t  break;\n+\n+\tcase INTEGER_CST:\n+\t  vnum = TREE_INT_CST_LOW (val_attr);\n+\n+\t  fprintf (file, \"\\t.global\\t$tableentry$%d$%s\\n\", vnum, vname);\n+\t  fprintf (file, \"$tableentry$%d$%s:\\n\", vnum, vname);\n+\t  break;\n+\n+\tdefault:\n+\t  ;\n+\t}\n+\n+      vec_attr = TREE_CHAIN (vec_attr);\n+    }\n+\n+}\n+\n static void\n rx_output_function_prologue (FILE * file,\n \t\t\t     HOST_WIDE_INT frame_size ATTRIBUTE_UNUSED)\n {\n+  add_vector_labels (file, \"interrupt\");\n+  add_vector_labels (file, \"vector\");\n+\n   if (is_fast_interrupt_func (NULL_TREE))\n     asm_fprintf (file, \"\\t; Note: Fast Interrupt Handler\\n\");\n \n@@ -2602,7 +2661,6 @@ rx_handle_func_attribute (tree * node,\n \t\t\t  bool * no_add_attrs)\n {\n   gcc_assert (DECL_P (* node));\n-  gcc_assert (args == NULL_TREE);\n \n   if (TREE_CODE (* node) != FUNCTION_DECL)\n     {\n@@ -2618,17 +2676,41 @@ rx_handle_func_attribute (tree * node,\n   return NULL_TREE;\n }\n \n+/* Check \"vector\" attribute.  */\n+\n+static tree\n+rx_handle_vector_attribute (tree * node,\n+\t\t\t    tree   name,\n+\t\t\t    tree   args,\n+\t\t\t    int    flags ATTRIBUTE_UNUSED,\n+\t\t\t    bool * no_add_attrs)\n+{\n+  gcc_assert (DECL_P (* node));\n+  gcc_assert (args != NULL_TREE);\n+\n+  if (TREE_CODE (* node) != FUNCTION_DECL)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t       name);\n+      * no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Table of RX specific attributes.  */\n const struct attribute_spec rx_attribute_table[] =\n {\n   /* Name, min_len, max_len, decl_req, type_req, fn_type_req, handler,\n      affects_type_identity.  */\n   { \"fast_interrupt\", 0, 0, true, false, false, rx_handle_func_attribute,\n     false },\n-  { \"interrupt\",      0, 0, true, false, false, rx_handle_func_attribute,\n+  { \"interrupt\",      0, -1, true, false, false, rx_handle_func_attribute,\n     false },\n   { \"naked\",          0, 0, true, false, false, rx_handle_func_attribute,\n     false },\n+  { \"vector\",         1, -1, true, false, false, rx_handle_vector_attribute,\n+    false },\n   { NULL,             0, 0, false, false, false, NULL, false }\n };\n \n@@ -3155,6 +3237,9 @@ rx_adjust_insn_length (rtx insn, int current_length)\n   bool zero;\n   int factor;\n \n+  if (!INSN_P (insn))\n+    return current_length;\n+\n   switch (INSN_CODE (insn))\n     {\n     default:"}, {"sha": "4e1a6b3809fc74ef94feaae2b722ea6adfc1166c", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69c7a374a106057e7c9f219e349178b709bbf370/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69c7a374a106057e7c9f219e349178b709bbf370/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=69c7a374a106057e7c9f219e349178b709bbf370", "patch": "@@ -3089,6 +3089,28 @@ On RL78, use @code{brk_interrupt} instead of @code{interrupt} for\n handlers intended to be used with the @code{BRK} opcode (i.e.@: those\n that must end with @code{RETB} instead of @code{RETI}).\n \n+On RX targets, you may specify one or more vector numbers as arguments\n+to the attribute, as well as naming an alternate table name.\n+Parameters are handled sequentially, so one handler can be assigned to\n+multiple entries in multiple tables.  One may also pass the magic\n+string @code{\"$default\"} which causes the function to be used for any\n+unfilled slots in the current table.\n+\n+This example shows a simple assignment of a function to one vector in\n+the default table (note that preprocessor macros may be used for\n+chip-specific symbolic vector names):\n+@smallexample\n+void __attribute__ ((interrupt (5))) txd1_handler ();\n+@end smallexample\n+\n+This example assigns a function to two slots in the default table\n+(using preprocessor macros defined elsewhere) and makes it the default\n+for the @code{dct} table:\n+@smallexample\n+void __attribute__ ((interrupt (RXD1_VECT,RXD2_VECT,\"dct\",\"$default\")))\n+\ttxd1_handler ();\n+@end smallexample\n+\n @item interrupt_handler\n @cindex interrupt handler functions on the Blackfin, m68k, H8/300 and SH processors\n Use this attribute on the Blackfin, m68k, H8/300, H8/300H, H8S, and SH to\n@@ -4291,6 +4313,13 @@ When applied to a member function of a C++ class template, the\n attribute also means that the function is instantiated if the\n class itself is instantiated.\n \n+@item vector\n+@cindex @code{vector} attibute\n+This RX attribute is similar to the @code{attribute}, including its\n+parameters, but does not make the function an interrupt-handler type\n+function (i.e. it retains the normal C function calling ABI).  See the\n+@code{interrupt} attribute for a description of its arguments.\n+\n @item version_id\n @cindex @code{version_id} attribute\n This IA-64 HP-UX attribute, attached to a global variable or function, renames a"}]}