{"sha": "bf667275670a58261be7e15e9e9807cb60750e85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY2NjcyNzU2NzBhNTgyNjFiZTdlMTVlOWU5ODA3Y2I2MDc1MGU4NQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2005-04-05T14:50:35Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-04-05T14:50:35Z"}, "message": "combine.c (RTL_HOOKS_GEN_LOWPART_NO_EMIT): Use gen_lowpart_for_combine.\n\n2004-04-05  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* combine.c (RTL_HOOKS_GEN_LOWPART_NO_EMIT): Use\n\tgen_lowpart_for_combine.\n\t* cse.c (gen_lowpart_if_possible): Move...\n\t* rtlhooks.c (gen_lowpart_if_possible): ... here.  Also try\n\tgen_lowpart_SUBREG.\n\t(gen_lowpart_no_emit_general): Use it.\n\nFrom-SVN: r97633", "tree": {"sha": "9063690ca6fe6c4afac8a638d99c0df2385390f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9063690ca6fe6c4afac8a638d99c0df2385390f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf667275670a58261be7e15e9e9807cb60750e85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf667275670a58261be7e15e9e9807cb60750e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf667275670a58261be7e15e9e9807cb60750e85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf667275670a58261be7e15e9e9807cb60750e85/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c81739f769ffb7f7d7bc417bc21444e298c2392e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c81739f769ffb7f7d7bc417bc21444e298c2392e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c81739f769ffb7f7d7bc417bc21444e298c2392e"}], "stats": {"total": 106, "additions": 61, "deletions": 45}, "files": [{"sha": "14ab0a31c915950c3c6dfa957ff5d6eb9850a1b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf667275670a58261be7e15e9e9807cb60750e85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf667275670a58261be7e15e9e9807cb60750e85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf667275670a58261be7e15e9e9807cb60750e85", "patch": "@@ -1,3 +1,12 @@\n+2004-04-05  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* combine.c (RTL_HOOKS_GEN_LOWPART_NO_EMIT): Use\n+\tgen_lowpart_for_combine.\n+\t* cse.c (gen_lowpart_if_possible): Move...\n+\t* rtlhooks.c (gen_lowpart_if_possible): ... here.  Also try\n+\tgen_lowpart_SUBREG.\n+\t(gen_lowpart_no_emit_general): Use it.\n+\n 2005-04-05  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sparc/sparc.c (TARGET_ASM_FILE_END): Undefine before"}, {"sha": "313a3d90d235ea441db112fa4c9b932306670fe5", "filename": "gcc/combine.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf667275670a58261be7e15e9e9807cb60750e85/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf667275670a58261be7e15e9e9807cb60750e85/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=bf667275670a58261be7e15e9e9807cb60750e85", "patch": "@@ -422,6 +422,10 @@ static bool unmentioned_reg_p (rtx, rtx);\n #undef RTL_HOOKS_GEN_LOWPART\n #define RTL_HOOKS_GEN_LOWPART              gen_lowpart_for_combine\n \n+/* Our implementation of gen_lowpart never emits a new pseudo.  */\n+#undef RTL_HOOKS_GEN_LOWPART_NO_EMIT\n+#define RTL_HOOKS_GEN_LOWPART_NO_EMIT      gen_lowpart_for_combine\n+\n #undef RTL_HOOKS_REG_NONZERO_REG_BITS\n #define RTL_HOOKS_REG_NONZERO_REG_BITS     reg_nonzero_bits_for_combine\n "}, {"sha": "5431da77160c8dffdfe80c1d6af12c4ff778be83", "filename": "gcc/cse.c", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf667275670a58261be7e15e9e9807cb60750e85/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf667275670a58261be7e15e9e9807cb60750e85/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=bf667275670a58261be7e15e9e9807cb60750e85", "patch": "@@ -4361,47 +4361,6 @@ equiv_constant (rtx x)\n   return 0;\n }\n \f\n-/* Assuming that X is an rtx (e.g., MEM, REG or SUBREG) for a fixed-point\n-   number, return an rtx (MEM, SUBREG, or CONST_INT) that refers to the\n-   least-significant part of X.\n-   MODE specifies how big a part of X to return.\n-\n-   If the requested operation cannot be done, 0 is returned.\n-\n-   This is similar to gen_lowpart_general in emit-rtl.c.  */\n-\n-rtx\n-gen_lowpart_if_possible (enum machine_mode mode, rtx x)\n-{\n-  rtx result = gen_lowpart_common (mode, x);\n-\n-  if (result)\n-    return result;\n-  else if (MEM_P (x))\n-    {\n-      /* This is the only other case we handle.  */\n-      int offset = 0;\n-      rtx new;\n-\n-      if (WORDS_BIG_ENDIAN)\n-\toffset = (MAX (GET_MODE_SIZE (GET_MODE (x)), UNITS_PER_WORD)\n-\t\t  - MAX (GET_MODE_SIZE (mode), UNITS_PER_WORD));\n-      if (BYTES_BIG_ENDIAN)\n-\t/* Adjust the address so that the address-after-the-data is\n-\t   unchanged.  */\n-\toffset -= (MIN (UNITS_PER_WORD, GET_MODE_SIZE (mode))\n-\t\t   - MIN (UNITS_PER_WORD, GET_MODE_SIZE (GET_MODE (x))));\n-\n-      new = adjust_address_nv (x, mode, offset);\n-      if (! memory_address_p (mode, XEXP (new, 0)))\n-\treturn 0;\n-\n-      return new;\n-    }\n-  else\n-    return 0;\n-}\n-\f\n /* Given INSN, a jump insn, PATH_TAKEN indicates if we are following the \"taken\"\n    branch.  It will be zero if not.\n "}, {"sha": "9d5dafdff44cba8cd83c42e785b428b32ca072fc", "filename": "gcc/rtlhooks.c", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf667275670a58261be7e15e9e9807cb60750e85/gcc%2Frtlhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf667275670a58261be7e15e9e9807cb60750e85/gcc%2Frtlhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlhooks.c?ref=bf667275670a58261be7e15e9e9807cb60750e85", "patch": "@@ -25,6 +25,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"rtl.h\"\n #include \"rtlhooks-def.h\"\n #include \"expr.h\"\n+#include \"recog.h\"\n \f\n \n /* For speed, we will copy the RTX hooks struct member-by-member\n@@ -84,12 +85,11 @@ gen_lowpart_general (enum machine_mode mode, rtx x)\n rtx\n gen_lowpart_no_emit_general (enum machine_mode mode, rtx x)\n {\n-  rtx result = gen_lowpart_common (mode, x);\n+  rtx result = gen_lowpart_if_possible (mode, x);\n   if (result)\n     return result;\n-  if (mode != GET_MODE (x) && GET_MODE (x) != VOIDmode)\n-    return gen_lowpart_SUBREG (mode, x);\n-  return x;\n+  else\n+    return x;\n }\n \n rtx\n@@ -113,3 +113,47 @@ reg_nonzero_bits_general (rtx x ATTRIBUTE_UNUSED,\n {\n   return NULL;\n }\n+\n+/* Assuming that X is an rtx (e.g., MEM, REG or SUBREG) for a fixed-point\n+   number, return an rtx (MEM, SUBREG, or CONST_INT) that refers to the\n+   least-significant part of X.\n+   MODE specifies how big a part of X to return.\n+\n+   If the requested operation cannot be done, 0 is returned.\n+\n+   This is similar to gen_lowpart_general.  */\n+\n+rtx\n+gen_lowpart_if_possible (enum machine_mode mode, rtx x)\n+{\n+  rtx result = gen_lowpart_common (mode, x);\n+\n+  if (result)\n+    return result;\n+  else if (MEM_P (x))\n+    {\n+      /* This is the only other case we handle.  */\n+      int offset = 0;\n+      rtx new;\n+\n+      if (WORDS_BIG_ENDIAN)\n+\toffset = (MAX (GET_MODE_SIZE (GET_MODE (x)), UNITS_PER_WORD)\n+\t\t  - MAX (GET_MODE_SIZE (mode), UNITS_PER_WORD));\n+      if (BYTES_BIG_ENDIAN)\n+\t/* Adjust the address so that the address-after-the-data is\n+\t   unchanged.  */\n+\toffset -= (MIN (UNITS_PER_WORD, GET_MODE_SIZE (mode))\n+\t\t   - MIN (UNITS_PER_WORD, GET_MODE_SIZE (GET_MODE (x))));\n+\n+      new = adjust_address_nv (x, mode, offset);\n+      if (! memory_address_p (mode, XEXP (new, 0)))\n+\treturn 0;\n+\n+      return new;\n+    }\n+  else if (mode != GET_MODE (x) && GET_MODE (x) != VOIDmode)\n+    return gen_lowpart_SUBREG (mode, x);\n+  else\n+    return 0;\n+}\n+\f"}]}