{"sha": "7ac7b28f2e8891ab210369c1f2cefed50f6e9416", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FjN2IyOGYyZTg4OTFhYjIxMDM2OWMxZjJjZWZlZDUwZjZlOTQxNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-04-10T10:51:09Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-04-10T10:51:09Z"}, "message": "error.c (dump_type_real): If a typename is a template-id, put out the template arguments.\n\n\t* error.c (dump_type_real): If a typename is a template-id, put\n\tout the template arguments.\n\t(dump_expr): Handle TEMPLATE_ID_EXPR.\n\t* pt.c (lookup_template_class): Now that full arguments are\n\tavailable everywhere, remove code that tried to guess them.\n\nFrom-SVN: r26335", "tree": {"sha": "40d42e8cdf16609c879bd94a10ba65ae98811a9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40d42e8cdf16609c879bd94a10ba65ae98811a9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ac7b28f2e8891ab210369c1f2cefed50f6e9416", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ac7b28f2e8891ab210369c1f2cefed50f6e9416", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ac7b28f2e8891ab210369c1f2cefed50f6e9416", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ac7b28f2e8891ab210369c1f2cefed50f6e9416/comments", "author": null, "committer": null, "parents": [{"sha": "fe0ce42629c3f2d99a4591e596840b2933dd3c1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe0ce42629c3f2d99a4591e596840b2933dd3c1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe0ce42629c3f2d99a4591e596840b2933dd3c1f"}], "stats": {"total": 74, "additions": 44, "deletions": 30}, "files": [{"sha": "4d1db9c800ed4c73ee1d3f752319aa5f2c4c5300", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac7b28f2e8891ab210369c1f2cefed50f6e9416/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac7b28f2e8891ab210369c1f2cefed50f6e9416/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7ac7b28f2e8891ab210369c1f2cefed50f6e9416", "patch": "@@ -1,3 +1,11 @@\n+1999-04-10  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* error.c (dump_type_real): If a typename is a template-id, put\n+\tout the template arguments.\n+\t(dump_expr): Handle TEMPLATE_ID_EXPR.\n+\t* pt.c (lookup_template_class): Now that full arguments are\n+\tavailable everywhere, remove code that tried to guess them.\n+\n 1999-04-09  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (make_typename_type): Complain if we don't find a type"}, {"sha": "025e9329797014d85e5ca406c8436cc5c80cff7b", "filename": "gcc/cp/error.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac7b28f2e8891ab210369c1f2cefed50f6e9416/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac7b28f2e8891ab210369c1f2cefed50f6e9416/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=7ac7b28f2e8891ab210369c1f2cefed50f6e9416", "patch": "@@ -321,7 +321,7 @@ dump_type_real (t, v, canonical_name)\n       OB_PUTS (\"typename \");\n       dump_type_real (TYPE_CONTEXT (t), 0, canonical_name);\n       OB_PUTS (\"::\");\n-      OB_PUTID (TYPE_IDENTIFIER (t));\n+      dump_decl (TYPENAME_TYPE_FULLNAME (t), v);\n       break;\n \n     case TYPEOF_TYPE:\n@@ -1766,6 +1766,10 @@ dump_expr (t, nop)\n       dump_expr (TREE_OPERAND (t, 0), nop);\n       break;\n \n+    case TEMPLATE_ID_EXPR:\n+      dump_decl (t, 0);\n+      break;\n+\n     case TREE_LIST:\n       if (TREE_VALUE (t) && TREE_CODE (TREE_VALUE (t)) == FUNCTION_DECL)\n \t{"}, {"sha": "154ee1bf3de85062e2d610b68b76d53dd623ca68", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 29, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac7b28f2e8891ab210369c1f2cefed50f6e9416/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac7b28f2e8891ab210369c1f2cefed50f6e9416/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7ac7b28f2e8891ab210369c1f2cefed50f6e9416", "patch": "@@ -3568,9 +3568,9 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope)\n \t  if (context)\n \t    push_decl_namespace (context);\n \t  if (current_class_type != NULL_TREE)\n-\t    template = \n+\t    template =\n \t      maybe_get_template_decl_from_type_decl\n-\t      (IDENTIFIER_CLASS_VALUE (d1));\n+\t      (IDENTIFIER_CLASS_VALUE (d1)));\n \t  if (template == NULL_TREE)\n \t    template = lookup_name_nonclass (d1);\n \t  if (context)\n@@ -3650,14 +3650,15 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope)\n   else \n     {\n       tree template_type = TREE_TYPE (template);\n+      tree gen_tmpl;\n       tree type_decl;\n       tree found = NULL_TREE;\n       int arg_depth;\n       int parm_depth;\n       int is_partial_instantiation;\n \n-      template = most_general_template (template);\n-      parmlist = DECL_TEMPLATE_PARMS (template);\n+      gen_tmpl = most_general_template (template);\n+      parmlist = DECL_TEMPLATE_PARMS (gen_tmpl);\n       parm_depth = TMPL_PARMS_DEPTH (parmlist);\n       arg_depth = TMPL_ARGS_DEPTH (arglist);\n \n@@ -3679,36 +3680,19 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope)\n \t     TEMPLATE will be `template <class T> template\n \t     <class U> struct S1<T>::S2'.  We must fill in the missing\n \t     arguments.  */\n-\t  my_friendly_assert (context != NULL_TREE, 0);\n-\t  while (!IS_AGGR_TYPE_CODE (TREE_CODE (context))\n-\t\t && context != global_namespace)\n-\t    context = DECL_REAL_CONTEXT (context);\n-\n-\t  if (context == global_namespace)\n-\t    /* This is bad.  We cannot get enough arguments, even from\n-\t       the surrounding context, to resolve this class.  One\n-\t       case where this might happen is (illegal) code like:\n-\n-\t           template <class U> \n-\t\t   template <class T>\n-\t\t   struct S { \n-\t\t     A(const A<T>& a) {}\n-\t\t   };  \n-\t    \n-\t       We should catch this error sooner (at the opening curly\n-\t       for `S', but it is better to be safe than sorry here.  */\n-\t    {\n-\t      cp_error (\"invalid use of `%D'\", template);\n-\t      return error_mark_node;\n-\t    }\n-\n-\t  arglist = add_to_template_args (TYPE_TI_ARGS (context),\n-\t\t\t\t\t  arglist);\n+\t  arglist \n+\t    = add_outermost_template_args (TYPE_TI_ARGS (TREE_TYPE (template)),\n+\t\t\t\t\t   arglist);\n \t  arg_depth = TMPL_ARGS_DEPTH (arglist);\n \t}\n \n+      /* Now we should enough arguments.  */\n       my_friendly_assert (parm_depth == arg_depth, 0);\n       \n+      /* From here on, we're only interested in the most general\n+\t template.  */\n+      template = gen_tmpl;\n+\n       /* Calculate the BOUND_ARGS.  These will be the args that are\n \t actually tsubst'd into the definition to create the\n \t instantiation.  */"}, {"sha": "c57c27dfe098ec1842c2cdad82c2bddebd553ce1", "filename": "gcc/testsuite/g++.old-deja/g++.pt/memclass20.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac7b28f2e8891ab210369c1f2cefed50f6e9416/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemclass20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac7b28f2e8891ab210369c1f2cefed50f6e9416/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemclass20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemclass20.C?ref=7ac7b28f2e8891ab210369c1f2cefed50f6e9416", "patch": "@@ -0,0 +1,18 @@\n+// Build don't link:\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+\n+template <class X, class Y>\n+struct S{};\n+\n+template <class X> \n+struct S<int, X> {\n+  template <class W>\n+  struct I {};\n+};\n+\n+template <class T>\n+void f() {\n+  typename S<T, T>::I<T> si;\n+}\n+\n+template void f<int>();"}]}