{"sha": "2b204accd07a3185b58b1edc6e9b019472857a5d", "node_id": "C_kwDOANBUbNoAKDJiMjA0YWNjZDA3YTMxODViNThiMWVkYzZlOWIwMTk0NzI4NTdhNWQ", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-03-14T20:44:32Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-03-14T20:44:32Z"}, "message": "libstdc++: Implement P2520R0 changes to move_iterator's iterator_concept\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_iterator.h (move_iterator::_S_iter_concept):\n\tDefine.\n\t(__cpp_lib_move_iterator_concept): Define for C++20.\n\t(move_iterator::iterator_concept): Strengthen as per P2520R0.\n\t* include/std/version (__cpp_lib_move_iterator_concept): Define\n\tfor C++20.\n\t* testsuite/24_iterators/move_iterator/p2520r0.cc: New test.", "tree": {"sha": "b96a290c4ea02a0282008a7c278edd3ebda064dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b96a290c4ea02a0282008a7c278edd3ebda064dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b204accd07a3185b58b1edc6e9b019472857a5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b204accd07a3185b58b1edc6e9b019472857a5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b204accd07a3185b58b1edc6e9b019472857a5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b204accd07a3185b58b1edc6e9b019472857a5d/comments", "author": null, "committer": null, "parents": [{"sha": "f2e7dd8b023b8de30af608afd68e0ecefa5c1de6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2e7dd8b023b8de30af608afd68e0ecefa5c1de6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2e7dd8b023b8de30af608afd68e0ecefa5c1de6"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "a6a09dbac16e8e2f1b97ad0d6fdaf18ffd9a9c4c", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b204accd07a3185b58b1edc6e9b019472857a5d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b204accd07a3185b58b1edc6e9b019472857a5d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=2b204accd07a3185b58b1edc6e9b019472857a5d", "patch": "@@ -1465,11 +1465,29 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    && convertible_to<const _Iter2&, _Iterator>;\n #endif\n \n+#if __cplusplus > 201703L && __cpp_lib_concepts\n+      static auto\n+      _S_iter_concept()\n+      {\n+\tif constexpr (random_access_iterator<_Iterator>)\n+\t  return random_access_iterator_tag{};\n+\telse if constexpr (bidirectional_iterator<_Iterator>)\n+\t  return bidirectional_iterator_tag{};\n+\telse if constexpr (forward_iterator<_Iterator>)\n+\t  return forward_iterator_tag{};\n+\telse\n+\t  return input_iterator_tag{};\n+      }\n+#endif\n+\n     public:\n       using iterator_type = _Iterator;\n \n #if __cplusplus > 201703L && __cpp_lib_concepts\n-      using iterator_concept = input_iterator_tag;\n+      // This is P2520R0, a C++23 change, but we treat it as a DR against C++20.\n+# define __cpp_lib_move_iterator_concept 202207L\n+      using iterator_concept = decltype(_S_iter_concept());\n+\n       // iterator_category defined in __move_iter_cat\n       using value_type = iter_value_t<_Iterator>;\n       using difference_type = iter_difference_t<_Iterator>;"}, {"sha": "25ebfc3e51227d204aaa58f12fb81ecb5879985b", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b204accd07a3185b58b1edc6e9b019472857a5d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b204accd07a3185b58b1edc6e9b019472857a5d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=2b204accd07a3185b58b1edc6e9b019472857a5d", "patch": "@@ -289,6 +289,7 @@\n #define __cpp_lib_polymorphic_allocator 201902L\n #if __cpp_lib_concepts\n # define __cpp_lib_ranges 202110L\n+# define __cpp_lib_move_iterator_concept 202207L\n #endif\n #if __cpp_lib_atomic_wait || _GLIBCXX_HAVE_POSIX_SEMAPHORE\n # define __cpp_lib_semaphore 201907L"}, {"sha": "883d6cc09e00f96f0df523febdc5d33459180a8b", "filename": "libstdc++-v3/testsuite/24_iterators/move_iterator/p2520r0.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b204accd07a3185b58b1edc6e9b019472857a5d/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fp2520r0.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b204accd07a3185b58b1edc6e9b019472857a5d/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fp2520r0.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fp2520r0.cc?ref=2b204accd07a3185b58b1edc6e9b019472857a5d", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+\n+// Verify P2520R0 changes to move_iterator's iterator_concept, which we treat\n+// as a DR against C++20.\n+\n+#include <iterator>\n+#if __cpp_lib_move_iterator_concept != 202207L\n+# error \"Feature-test macro __cpp_lib_move_iterator_concept has wrong value in <iterator>\"\n+#endif\n+\n+#undef __cpp_lib_move_iterator_concept\n+#include <version>\n+#if __cpp_lib_move_iterator_concept != 202207L\n+# error \"Feature-test macro __cpp_lib_move_iterator_concept has wrong value in <version>\"\n+#endif\n+\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_input_range;\n+using __gnu_test::test_forward_range;\n+using __gnu_test::test_bidirectional_range;\n+using __gnu_test::test_random_access_range;\n+\n+using ty1 = std::move_iterator<decltype(std::declval<test_input_range<int>&>().begin())>;\n+static_assert(std::same_as<ty1::iterator_concept, std::input_iterator_tag>);\n+\n+using ty2 = std::move_iterator<decltype(std::declval<test_forward_range<int>&>().begin())>;\n+static_assert(std::same_as<ty2::iterator_concept, std::forward_iterator_tag>);\n+\n+using ty3 = std::move_iterator<decltype(std::declval<test_bidirectional_range<int>&>().begin())>;\n+static_assert(std::same_as<ty3::iterator_concept, std::bidirectional_iterator_tag>);\n+\n+using ty4 = std::move_iterator<decltype(std::declval<test_random_access_range<int>&>().begin())>;\n+static_assert(std::same_as<ty4::iterator_concept, std::random_access_iterator_tag>);\n+\n+static_assert(std::random_access_iterator<std::move_iterator<int*>>);"}]}