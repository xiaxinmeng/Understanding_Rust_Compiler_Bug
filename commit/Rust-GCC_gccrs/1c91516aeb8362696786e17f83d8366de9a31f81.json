{"sha": "1c91516aeb8362696786e17f83d8366de9a31f81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM5MTUxNmFlYjgzNjI2OTY3ODZlMTdmODNkODM2NmRlOWEzMWY4MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-11-11T13:39:32Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-11-11T13:39:32Z"}, "message": "Fix internal error on chain of constants with -gnatc\n\ngcc/ada/ChangeLog:\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Constant>: In case\n\tthe constant is not being defined, get the expression in type\n\tannotation mode only if its type is elementary.", "tree": {"sha": "43452252ea167c6da351f0798b0b5909dac0d568", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43452252ea167c6da351f0798b0b5909dac0d568"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c91516aeb8362696786e17f83d8366de9a31f81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c91516aeb8362696786e17f83d8366de9a31f81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c91516aeb8362696786e17f83d8366de9a31f81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c91516aeb8362696786e17f83d8366de9a31f81/comments", "author": null, "committer": null, "parents": [{"sha": "1f8fc1f458c4a66618c35d8e292fff6e9dce9f12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f8fc1f458c4a66618c35d8e292fff6e9dce9f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f8fc1f458c4a66618c35d8e292fff6e9dce9f12"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "baae58a025f6b5ead5c1dca8a4c1860dce4ff739", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c91516aeb8362696786e17f83d8366de9a31f81/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c91516aeb8362696786e17f83d8366de9a31f81/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=1c91516aeb8362696786e17f83d8366de9a31f81", "patch": "@@ -667,21 +667,24 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \n       /* If we have a constant that we are not defining, get the expression it\n \t was defined to represent.  This is necessary to avoid generating dumb\n-\t elaboration code in simple cases, but we may throw it away later if it\n+\t elaboration code in simple cases, and we may throw it away later if it\n \t is not a constant.  But do not do it for dispatch tables because they\n \t are only referenced indirectly and we need to have a consistent view\n \t of the exported and of the imported declarations of the tables from\n \t external units for them to be properly merged in LTO mode.  Moreover\n-\t simply do not retrieve the expression it if it is an allocator since\n+\t simply do not retrieve the expression if it is an allocator because\n \t the designated type might still be dummy at this point.  Note that we\n \t invoke gnat_to_gnu_external and not gnat_to_gnu because the expression\n \t may contain N_Expression_With_Actions nodes and thus declarations of\n-\t objects from other units that we need to discard.  */\n+\t objects from other units that we need to discard.  Note also that we\n+\t need to do it even if we are only annotating types, so as to be able\n+\t to validate representation clauses using constants.  */\n       if (!definition\n \t  && !No_Initialization (gnat_decl)\n \t  && !Is_Dispatch_Table_Entity (gnat_entity)\n \t  && Present (gnat_temp = Expression (gnat_decl))\n-\t  && Nkind (gnat_temp) != N_Allocator)\n+\t  && Nkind (gnat_temp) != N_Allocator\n+\t  && (Is_Elementary_Type (Etype (gnat_entity)) || !type_annotate_only))\n \tgnu_expr = gnat_to_gnu_external (gnat_temp);\n \n       /* ... fall through ... */"}]}