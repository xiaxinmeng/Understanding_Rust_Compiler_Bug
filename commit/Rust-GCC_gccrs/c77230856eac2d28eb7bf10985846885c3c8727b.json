{"sha": "c77230856eac2d28eb7bf10985846885c3c8727b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc3MjMwODU2ZWFjMmQyOGViN2JmMTA5ODU4NDY4ODVjM2M4NzI3Yg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-07-02T22:13:29Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-07-02T22:43:57Z"}, "message": "d: RHS value lost when a target_expr modifies LHS in a cond_expr\n\nTo prevent the RHS of an assignment modifying the LHS before the\nassignment proper, a target_expr is forced so that function calls that\nreturn with slot optimization modify the temporary instead.  This did\nnot work for conditional expressions however, to give one example.  So\nnow the RHS is always forced to a temporary.\n\n\tPR d/101282\n\ngcc/d/ChangeLog:\n\n\t* d-codegen.cc (build_assign): Force target_expr on RHS for non-POD\n\tassignment expressions.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/torture/pr101282.d: New test.", "tree": {"sha": "d77253582b8c4ac0a89be0a27b423ce53150e283", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d77253582b8c4ac0a89be0a27b423ce53150e283"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c77230856eac2d28eb7bf10985846885c3c8727b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77230856eac2d28eb7bf10985846885c3c8727b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c77230856eac2d28eb7bf10985846885c3c8727b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77230856eac2d28eb7bf10985846885c3c8727b/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6feb628a706e86eb3f303aff388c74bdb29e7381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6feb628a706e86eb3f303aff388c74bdb29e7381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6feb628a706e86eb3f303aff388c74bdb29e7381"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "ce7c17baaaf00b5e1f462da84884395ddcebcc66", "filename": "gcc/d/d-codegen.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77230856eac2d28eb7bf10985846885c3c8727b/gcc%2Fd%2Fd-codegen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77230856eac2d28eb7bf10985846885c3c8727b/gcc%2Fd%2Fd-codegen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-codegen.cc?ref=c77230856eac2d28eb7bf10985846885c3c8727b", "patch": "@@ -1344,6 +1344,13 @@ build_assign (tree_code code, tree lhs, tree rhs)\n       d_mark_addressable (lhs);\n       CALL_EXPR_RETURN_SLOT_OPT (rhs) = true;\n     }\n+  /* If modifying an LHS whose type is marked TREE_ADDRESSABLE.  */\n+  else if (code == MODIFY_EXPR && TREE_ADDRESSABLE (TREE_TYPE (lhs))\n+\t   && TREE_SIDE_EFFECTS (rhs) && TREE_CODE (rhs) != TARGET_EXPR)\n+    {\n+      /* LHS may be referenced by the RHS expression, so force a temporary.  */\n+      rhs = force_target_expr (rhs);\n+    }\n \n   /* The LHS assignment replaces the temporary in TARGET_EXPR_SLOT.  */\n   if (TREE_CODE (rhs) == TARGET_EXPR)"}, {"sha": "b75d5fc678f15102384fa3a766da994f3fa044d7", "filename": "gcc/testsuite/gdc.dg/torture/pr101282.d", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77230856eac2d28eb7bf10985846885c3c8727b/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fpr101282.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77230856eac2d28eb7bf10985846885c3c8727b/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fpr101282.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fpr101282.d?ref=c77230856eac2d28eb7bf10985846885c3c8727b", "patch": "@@ -0,0 +1,23 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101282\n+// { dg-do run }\n+\n+void main()\n+{\n+    struct S101282\n+    {\n+        int impl;\n+        S101282 opUnary(string op : \"-\")()\n+        {\n+            return S101282(-impl);\n+        }\n+        int opCmp(int i)\n+        {\n+            return (impl < i) ? -1 : (impl > i) ? 1 : 0;\n+        }\n+    }\n+    auto a = S101282(120);\n+    a = -a;\n+    assert(a.impl == -120);\n+    a = a >= 0 ? a : -a;\n+    assert(a.impl == 120);\n+}"}]}