{"sha": "1edc26adde4c280f42605745d3575a9e8c5ba9d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVkYzI2YWRkZTRjMjgwZjQyNjA1NzQ1ZDM1NzVhOWU4YzViYTlkMQ==", "commit": {"author": {"name": "Kirill Yukhin", "email": "kirill.yukhin@intel.com", "date": "2015-10-02T14:36:41Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2015-10-02T14:36:41Z"}, "message": "Update extract_even_odd w/ AVX-512BW insns.\n\ngcc/\n\t* config/i386/i386.c (expand_vec_perm_even_odd_trunc): New.\n\t(expand_vec_perm_even_odd_1): Handle V64QImode.\n\t(ix86_expand_vec_perm_const_1): Try expansion with\n\texpand_vec_perm_even_odd_trunc as well.\n\t* config/i386/sse.md (VI124_AVX512F): Rename to ...\n\t(define_mode_iterator VI124_AVX2_24_AVX512F_1_AVX512BW): This. Extend\n\tto V54QI.\n\t(define_mode_iterator VI248_AVX2_8_AVX512F): Rename to ...\n\t(define_mode_iterator VI248_AVX2_8_AVX512F_24_AVX512BW): This. Extend\n\tto V32HI and V16SI.\n\t(define_insn \"avx512bw_<code>v32hiv32qi2\"): Unhide pattern name.\n\t(define_expand \"vec_pack_trunc_<mode>\"): Update iterator name.\n\t(define_expand \"vec_unpacks_lo_<mode>\"): Ditto.\n\t(define_expand \"vec_unpacks_hi_<mode>\"): Ditto.\n\t(define_expand \"vec_unpacku_lo_<mode>\"): Ditto.\n\t(define_expand \"vec_unpacku_hi_<mode>\"): Ditto.\n\ngcc/testsuite/\n\t* gcc.target/i386/vect-pack-trunc-1.c: New test.\n\t* gcc.target/i386/vect-pack-trunc-2.c: Ditto.\n\t* gcc.target/i386/vect-perm-even-1.c: Ditto.\n\t* gcc.target/i386/vect-perm-odd-1.c: Ditto.\n\t* gcc.target/i386/vect-unpack-1.c: Ditto.\n\t* gcc.target/i386/vect-unpack-2.c: Ditto.\n\nFrom-SVN: r228394", "tree": {"sha": "898925099dd89d15bbea12571dbdd71caf97f402", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/898925099dd89d15bbea12571dbdd71caf97f402"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1edc26adde4c280f42605745d3575a9e8c5ba9d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1edc26adde4c280f42605745d3575a9e8c5ba9d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1edc26adde4c280f42605745d3575a9e8c5ba9d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1edc26adde4c280f42605745d3575a9e8c5ba9d1/comments", "author": null, "committer": null, "parents": [{"sha": "bea9065228d855cc5d0aed44e77f506fd4e67e2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea9065228d855cc5d0aed44e77f506fd4e67e2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bea9065228d855cc5d0aed44e77f506fd4e67e2b"}], "stats": {"total": 300, "additions": 288, "deletions": 12}, "files": [{"sha": "152872207da37186f9d83f6ca8748aa917329432", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edc26adde4c280f42605745d3575a9e8c5ba9d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edc26adde4c280f42605745d3575a9e8c5ba9d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1edc26adde4c280f42605745d3575a9e8c5ba9d1", "patch": "@@ -1,3 +1,22 @@\n+2015-10-02  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* config/i386/i386.c (expand_vec_perm_even_odd_trunc): New.\n+\t(expand_vec_perm_even_odd_1): Handle V64QImode.\n+\t(ix86_expand_vec_perm_const_1): Try expansion with\n+\texpand_vec_perm_even_odd_trunc as well.\n+\t* config/i386/sse.md (VI124_AVX512F): Rename to ...\n+\t(define_mode_iterator VI124_AVX2_24_AVX512F_1_AVX512BW): This. Extend\n+\tto V54QI.\n+\t(define_mode_iterator VI248_AVX2_8_AVX512F): Rename to ...\n+\t(define_mode_iterator VI248_AVX2_8_AVX512F_24_AVX512BW): This. Extend\n+\tto V32HI and V16SI.\n+\t(define_insn \"avx512bw_<code>v32hiv32qi2\"): Unhide pattern name.\n+\t(define_expand \"vec_pack_trunc_<mode>\"): Update iterator name.\n+\t(define_expand \"vec_unpacks_lo_<mode>\"): Ditto.\n+\t(define_expand \"vec_unpacks_hi_<mode>\"): Ditto.\n+\t(define_expand \"vec_unpacku_lo_<mode>\"): Ditto.\n+\t(define_expand \"vec_unpacku_hi_<mode>\"): Ditto.\n+\n 2015-10-02  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* doc/invoke.texi: Mention -mavx512vl, -mavx512bw, -mavx512dq,"}, {"sha": "1ccc33e525c51e370fd47e8aba0655a0931f42aa", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edc26adde4c280f42605745d3575a9e8c5ba9d1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edc26adde4c280f42605745d3575a9e8c5ba9d1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1edc26adde4c280f42605745d3575a9e8c5ba9d1", "patch": "@@ -50171,6 +50171,62 @@ expand_vec_perm_even_odd_pack (struct expand_vec_perm_d *d)\n   return true;\n }\n \n+/* A subroutine of expand_vec_perm_even_odd_1.  Implement extract-even\n+   and extract-odd permutations of two V64QI operands\n+   with two \"shifts\", two \"truncs\" and one \"concat\" insns for \"odd\"\n+   and two \"truncs\" and one concat insn for \"even.\"\n+   Have already failed all two instruction sequences.  */\n+\n+static bool\n+expand_vec_perm_even_odd_trunc (struct expand_vec_perm_d *d)\n+{\n+  rtx t1, t2, t3, t4;\n+  unsigned i, odd, nelt = d->nelt;\n+\n+  if (!TARGET_AVX512BW\n+      || d->one_operand_p\n+      || d->vmode != V64QImode)\n+    return false;\n+\n+  /* Check that permutation is even or odd.  */\n+  odd = d->perm[0];\n+  if (odd > 1)\n+    return false;\n+\n+  for (i = 1; i < nelt; ++i)\n+    if (d->perm[i] != 2 * i + odd)\n+      return false;\n+\n+  if (d->testing_p)\n+    return true;\n+\n+\n+  if (odd)\n+    {\n+      t1 = gen_reg_rtx (V32HImode);\n+      t2 = gen_reg_rtx (V32HImode);\n+      emit_insn (gen_lshrv32hi3 (t1,\n+\t\t\t\t gen_lowpart (V32HImode, d->op0),\n+\t\t\t\t GEN_INT (8)));\n+      emit_insn (gen_lshrv32hi3 (t2,\n+\t\t\t\t gen_lowpart (V32HImode, d->op1),\n+\t\t\t\t GEN_INT (8)));\n+    }\n+  else\n+    {\n+      t1 = gen_lowpart (V32HImode, d->op0);\n+      t2 = gen_lowpart (V32HImode, d->op1);\n+    }\n+\n+  t3 = gen_reg_rtx (V32QImode);\n+  t4 = gen_reg_rtx (V32QImode);\n+  emit_insn (gen_avx512bw_truncatev32hiv32qi2 (t3, t1));\n+  emit_insn (gen_avx512bw_truncatev32hiv32qi2 (t4, t2));\n+  emit_insn (gen_avx_vec_concatv64qi (d->target, t3, t4));\n+\n+  return true;\n+}\n+\n /* A subroutine of ix86_expand_vec_perm_builtin_1.  Implement extract-even\n    and extract-odd permutations.  */\n \n@@ -50273,6 +50329,9 @@ expand_vec_perm_even_odd_1 (struct expand_vec_perm_d *d, unsigned odd)\n     case V32QImode:\n       return expand_vec_perm_even_odd_pack (d);\n \n+    case V64QImode:\n+      return expand_vec_perm_even_odd_trunc (d);\n+\n     case V4DImode:\n       if (!TARGET_AVX2)\n \t{\n@@ -50734,6 +50793,8 @@ ix86_expand_vec_perm_const_1 (struct expand_vec_perm_d *d)\n \n   /* Try sequences of four instructions.  */\n \n+  if (expand_vec_perm_even_odd_trunc (d))\n+    return true;\n   if (expand_vec_perm_vpshufb2_vpermq (d))\n     return true;\n "}, {"sha": "013681ca91818ff5c67da7b173994e4203001c42", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edc26adde4c280f42605745d3575a9e8c5ba9d1/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edc26adde4c280f42605745d3575a9e8c5ba9d1/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=1edc26adde4c280f42605745d3575a9e8c5ba9d1", "patch": "@@ -381,8 +381,8 @@\n   [(V16HI \"TARGET_AVX2\") V8HI\n    (V8SI \"TARGET_AVX2\") V4SI])\n \n-(define_mode_iterator VI124_AVX512F\n-  [(V32QI \"TARGET_AVX2\") V16QI\n+(define_mode_iterator VI124_AVX2_24_AVX512F_1_AVX512BW\n+  [(V64QI \"TARGET_AVX512BW\") (V32QI \"TARGET_AVX2\") V16QI\n    (V32HI \"TARGET_AVX512F\") (V16HI \"TARGET_AVX2\") V8HI\n    (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX2\") V4SI])\n \n@@ -398,9 +398,9 @@\n   [(V8SI \"TARGET_AVX2\") V4SI\n    (V4DI \"TARGET_AVX2\") V2DI])\n \n-(define_mode_iterator VI248_AVX2_8_AVX512F\n-  [(V16HI \"TARGET_AVX2\") V8HI\n-   (V8SI \"TARGET_AVX2\") V4SI\n+(define_mode_iterator VI248_AVX2_8_AVX512F_24_AVX512BW\n+  [(V32HI \"TARGET_AVX512BW\") (V16HI \"TARGET_AVX2\") V8HI\n+   (V16SI \"TARGET_AVX512BW\") (V8SI \"TARGET_AVX2\") V4SI\n    (V8DI \"TARGET_AVX512F\") (V4DI \"TARGET_AVX2\") V2DI])\n \n (define_mode_iterator VI248_AVX512BW_AVX512VL\n@@ -8749,7 +8749,7 @@\n       (match_operand:<avx512fmaskmode> 2 \"register_operand\")))]\n   \"TARGET_AVX512F\")\n \n-(define_insn \"*avx512bw_<code>v32hiv32qi2\"\n+(define_insn \"avx512bw_<code>v32hiv32qi2\"\n   [(set (match_operand:V32QI 0 \"nonimmediate_operand\" \"=v,m\")\n \t(any_truncate:V32QI\n \t    (match_operand:V32HI 1 \"register_operand\" \"v,v\")))]\n@@ -11331,8 +11331,8 @@\n \n (define_expand \"vec_pack_trunc_<mode>\"\n   [(match_operand:<ssepackmode> 0 \"register_operand\")\n-   (match_operand:VI248_AVX2_8_AVX512F 1 \"register_operand\")\n-   (match_operand:VI248_AVX2_8_AVX512F 2 \"register_operand\")]\n+   (match_operand:VI248_AVX2_8_AVX512F_24_AVX512BW 1 \"register_operand\")\n+   (match_operand:VI248_AVX2_8_AVX512F_24_AVX512BW 2 \"register_operand\")]\n   \"TARGET_SSE2\"\n {\n   rtx op1 = gen_lowpart (<ssepackmode>mode, operands[1]);\n@@ -13221,25 +13221,25 @@\n \n (define_expand \"vec_unpacks_lo_<mode>\"\n   [(match_operand:<sseunpackmode> 0 \"register_operand\")\n-   (match_operand:VI124_AVX512F 1 \"register_operand\")]\n+   (match_operand:VI124_AVX2_24_AVX512F_1_AVX512BW 1 \"register_operand\")]\n   \"TARGET_SSE2\"\n   \"ix86_expand_sse_unpack (operands[0], operands[1], false, false); DONE;\")\n \n (define_expand \"vec_unpacks_hi_<mode>\"\n   [(match_operand:<sseunpackmode> 0 \"register_operand\")\n-   (match_operand:VI124_AVX512F 1 \"register_operand\")]\n+   (match_operand:VI124_AVX2_24_AVX512F_1_AVX512BW 1 \"register_operand\")]\n   \"TARGET_SSE2\"\n   \"ix86_expand_sse_unpack (operands[0], operands[1], false, true); DONE;\")\n \n (define_expand \"vec_unpacku_lo_<mode>\"\n   [(match_operand:<sseunpackmode> 0 \"register_operand\")\n-   (match_operand:VI124_AVX512F 1 \"register_operand\")]\n+   (match_operand:VI124_AVX2_24_AVX512F_1_AVX512BW 1 \"register_operand\")]\n   \"TARGET_SSE2\"\n   \"ix86_expand_sse_unpack (operands[0], operands[1], true, false); DONE;\")\n \n (define_expand \"vec_unpacku_hi_<mode>\"\n   [(match_operand:<sseunpackmode> 0 \"register_operand\")\n-   (match_operand:VI124_AVX512F 1 \"register_operand\")]\n+   (match_operand:VI124_AVX2_24_AVX512F_1_AVX512BW 1 \"register_operand\")]\n   \"TARGET_SSE2\"\n   \"ix86_expand_sse_unpack (operands[0], operands[1], true, true); DONE;\")\n "}, {"sha": "efea8e42a49ca05b498bc6694fe631247a66bd4e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edc26adde4c280f42605745d3575a9e8c5ba9d1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edc26adde4c280f42605745d3575a9e8c5ba9d1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1edc26adde4c280f42605745d3575a9e8c5ba9d1", "patch": "@@ -1,3 +1,12 @@\n+2015-10-02  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* gcc.target/i386/vect-pack-trunc-1.c: New test.\n+\t* gcc.target/i386/vect-pack-trunc-2.c: Ditto.\n+\t* gcc.target/i386/vect-perm-even-1.c: Ditto.\n+\t* gcc.target/i386/vect-perm-odd-1.c: Ditto.\n+\t* gcc.target/i386/vect-unpack-1.c: Ditto.\n+\t* gcc.target/i386/vect-unpack-2.c: Ditto.\n+\n 2015-10-02  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/64249"}, {"sha": "774d4bd055aa3daddf443e511c696c9ec2d40c6c", "filename": "gcc/testsuite/gcc.target/i386/vect-pack-trunc-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edc26adde4c280f42605745d3575a9e8c5ba9d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-pack-trunc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edc26adde4c280f42605745d3575a9e8c5ba9d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-pack-trunc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-pack-trunc-1.c?ref=1edc26adde4c280f42605745d3575a9e8c5ba9d1", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math -mavx512bw -save-temps\" } */\n+\n+#include \"avx512bw-check.h\"\n+\n+#define N 400\n+unsigned char yy[10000];\n+\n+void\n+__attribute__ ((noinline)) foo (unsigned short s)\n+{\n+   unsigned short i;\n+   for (i = 0; i < s; i++)\n+     yy[i] = (unsigned char) i;\n+}\n+\n+void\n+avx512bw_test ()\n+{\n+  unsigned short i;\n+  foo (N);\n+\n+  for (i = 0; i < N; i++)\n+    if ( (unsigned char)i != yy [i] )\n+      abort ();\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpmovwb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\" 2 } } */"}, {"sha": "a1a075f41a7d554ccaf9fab40e894d36e327ff34", "filename": "gcc/testsuite/gcc.target/i386/vect-pack-trunc-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edc26adde4c280f42605745d3575a9e8c5ba9d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-pack-trunc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edc26adde4c280f42605745d3575a9e8c5ba9d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-pack-trunc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-pack-trunc-2.c?ref=1edc26adde4c280f42605745d3575a9e8c5ba9d1", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math -mavx512bw -save-temps\" } */\n+\n+#include \"avx512bw-check.h\"\n+\n+#define N 400\n+unsigned short yy[10000];\n+\n+void\n+__attribute__ ((noinline)) foo (unsigned int s)\n+{\n+   unsigned int i;\n+   for (i = 0; i < s; i++)\n+     yy[i] = (unsigned short) i;\n+}\n+\n+void\n+avx512bw_test ()\n+{\n+  unsigned int i;\n+  foo (N);\n+  for (i = 0; i < N; i++)\n+    if ( (unsigned short)i != yy [i] )\n+      abort ();\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpermi2w\\[ \\\\t\\]+\\[^\\n\\]*%zmm\" 1 } } */"}, {"sha": "a2ff73d23828b159ee73c73c1e97ff16087d8753", "filename": "gcc/testsuite/gcc.target/i386/vect-perm-even-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edc26adde4c280f42605745d3575a9e8c5ba9d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-perm-even-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edc26adde4c280f42605745d3575a9e8c5ba9d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-perm-even-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-perm-even-1.c?ref=1edc26adde4c280f42605745d3575a9e8c5ba9d1", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math -mavx512bw -save-temps\" } */\n+\n+#include \"avx512bw-check.h\"\n+\n+#define N 400\n+unsigned char yy[10000];\n+unsigned char xx[10000];\n+\n+void\n+__attribute__ ((noinline)) foo (unsigned short s)\n+{\n+   unsigned short i;\n+   for (i = 0; i < s; i++)\n+     yy[i] = xx [i*2 + 1];\n+}\n+\n+void\n+avx512bw_test ()\n+{\n+  unsigned short i;\n+  unsigned char j = 0;\n+  for (i = 0; i < 2 * N + 1; i++, j++)\n+    xx [i] = j;\n+\n+  foo (N);\n+\n+  for (i = 0; i < N; i++)\n+    if ( (unsigned char)(2*i+1) != yy [i] )\n+      abort ();\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpmovwb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\" 2 } } */"}, {"sha": "65f1a80c04b433e1cc6f22fb6584bbb4e833e194", "filename": "gcc/testsuite/gcc.target/i386/vect-perm-odd-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edc26adde4c280f42605745d3575a9e8c5ba9d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-perm-odd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edc26adde4c280f42605745d3575a9e8c5ba9d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-perm-odd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-perm-odd-1.c?ref=1edc26adde4c280f42605745d3575a9e8c5ba9d1", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math -mavx512bw -save-temps\" } */\n+\n+#include \"avx512bw-check.h\"\n+\n+#define N 400\n+\n+typedef struct\n+{\n+  unsigned char real;\n+  unsigned char imag;\n+} complex8_t;\n+\n+void\n+__attribute__ ((noinline)) foo (unsigned char *a,\n+\t\t\t\tcomplex8_t *x, unsigned len)\n+{\n+  unsigned i;\n+  for (i = 0; i < len; i++)\n+    a[i] = x[i].imag + x[i].real;\n+}\n+\n+void\n+avx512bw_test ()\n+{\n+  unsigned short i;\n+  unsigned char j = 0;\n+  complex8_t x [N];\n+  unsigned char a [N];\n+\n+  for (i = 0; i < N; i++, j++)\n+    {\n+      x [i].real = j;\n+      x [i].imag = j;\n+    }\n+\n+  foo (a, x, N);\n+\n+  j = 0;\n+  for (i = 0; i < N; i++, j++)\n+    if ( a[i] != (unsigned char)(j+j) )\n+      abort ();\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpmovwb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\" 4 } } */"}, {"sha": "eedca475d023b07bd1804d6e45df80811cc602e5", "filename": "gcc/testsuite/gcc.target/i386/vect-unpack-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edc26adde4c280f42605745d3575a9e8c5ba9d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-unpack-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edc26adde4c280f42605745d3575a9e8c5ba9d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-unpack-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-unpack-1.c?ref=1edc26adde4c280f42605745d3575a9e8c5ba9d1", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math -mavx512bw -save-temps\" } */\n+\n+#include \"avx512bw-check.h\"\n+\n+#define N 255\n+unsigned int yy[10000];\n+\n+void\n+__attribute__ ((noinline)) foo (unsigned char s)\n+{\n+   unsigned char i;\n+   for (i = 0; i < s; i++)\n+     yy[i] = (unsigned int) i;\n+}\n+\n+void\n+avx512bw_test ()\n+{\n+  unsigned char i;\n+  foo (N);\n+  for (i = 0; i < N; i++)\n+    if ( (unsigned int)i != yy [i] )\n+      abort ();\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpmovzxbw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\" 2 } } */"}, {"sha": "b825f0c02eed61b0aab0ca7f612e3209fc16c726", "filename": "gcc/testsuite/gcc.target/i386/vect-unpack-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edc26adde4c280f42605745d3575a9e8c5ba9d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-unpack-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edc26adde4c280f42605745d3575a9e8c5ba9d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-unpack-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-unpack-2.c?ref=1edc26adde4c280f42605745d3575a9e8c5ba9d1", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math -mavx512bw -save-temps\" } */\n+\n+#include \"avx512bw-check.h\"\n+\n+#define N 120\n+signed int yy[10000];\n+\n+void\n+__attribute__ ((noinline)) foo (signed char s)\n+{\n+   signed char i;\n+   for (i = 0; i < s; i++)\n+     yy[i] = (signed int) i;\n+}\n+\n+void\n+avx512bw_test ()\n+{\n+  signed char i;\n+  foo (N);\n+  for (i = 0; i < N; i++)\n+    if ( (signed int)i != yy [i] )\n+      abort ();\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpmovsxbw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\" 2 } } */"}]}