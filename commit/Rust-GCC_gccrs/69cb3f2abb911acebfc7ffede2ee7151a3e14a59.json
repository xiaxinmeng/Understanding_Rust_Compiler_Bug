{"sha": "69cb3f2abb911acebfc7ffede2ee7151a3e14a59", "node_id": "C_kwDOANBUbNoAKDY5Y2IzZjJhYmI5MTFhY2ViZmM3ZmZlZGUyZWU3MTUxYTNlMTRhNTk", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-02-15T13:36:26Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-02-19T19:05:56Z"}, "message": "[nvptx] Use _ as destination operand of atom.exch\n\nWe currently generate this code for an atomic store:\n...\n.reg.u32 %r21;\natom.exch.b32 %r21,[%r22],%r23;\n...\nwhere %r21 is set but unused.\n\nUse the ptx bit bucket operand '_' instead, such that we have:\n...\natom.exch.b32 _,[%r22],%r23;\n...\n\n[ Note that the same problem still occurs for this code:\n...\nvoid atomic_store (int *ptr, int val) {\n  __atomic_exchange_n (ptr, val, MEMMODEL_RELAXED);\n}\n... ]\n\nTested on nvptx.\n\ngcc/ChangeLog:\n\n2022-02-19  Tom de Vries  <tdevries@suse.de>\n\n\t* config/nvptx/nvptx.cc (nvptx_reorg_uniform_simt): Handle SET insn.\n\t* config/nvptx/nvptx.md\n\t(define_insn \"nvptx_atomic_store<mode>\"): Rename to ...\n\t(define_insn \"nvptx_atomic_store_sm70<mode>\"): This.\n\t(define_insn \"nvptx_atomic_store<mode>\"): New define_insn.\n\t(define_expand \"atomic_store<mode>\"): Handle rename.  Use\n\tnvptx_atomic_store instead of atomic_exchange.\n\ngcc/testsuite/ChangeLog:\n\n2022-02-19  Tom de Vries  <tdevries@suse.de>\n\n\t* gcc.target/nvptx/atomic-store-1.c: Update.", "tree": {"sha": "64d86cc4c708f0aed54b4b2187aca75bc3ec572a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64d86cc4c708f0aed54b4b2187aca75bc3ec572a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69cb3f2abb911acebfc7ffede2ee7151a3e14a59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69cb3f2abb911acebfc7ffede2ee7151a3e14a59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69cb3f2abb911acebfc7ffede2ee7151a3e14a59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69cb3f2abb911acebfc7ffede2ee7151a3e14a59/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ed52438b8ca99a0dffe74da96c2281cbc9cbb4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ed52438b8ca99a0dffe74da96c2281cbc9cbb4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ed52438b8ca99a0dffe74da96c2281cbc9cbb4b"}], "stats": {"total": 47, "additions": 35, "deletions": 12}, "files": [{"sha": "ed347cab70ea7d71c23916aa1661044baa3086f2", "filename": "gcc/config/nvptx/nvptx.cc", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69cb3f2abb911acebfc7ffede2ee7151a3e14a59/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69cb3f2abb911acebfc7ffede2ee7151a3e14a59/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc?ref=69cb3f2abb911acebfc7ffede2ee7151a3e14a59", "patch": "@@ -3291,12 +3291,22 @@ nvptx_reorg_uniform_simt ()\n \tcontinue;\n \n       rtx pat = PATTERN (insn);\n-      gcc_assert (GET_CODE (pat) == PARALLEL);\n       rtx master = nvptx_get_unisimt_master ();\n       bool shuffle_p = false;\n-      for (int i = 0; i < XVECLEN (pat, 0); i++)\n-\tshuffle_p\n-\t  |= nvptx_unisimt_handle_set (XVECEXP (pat, 0, i), insn, master);\n+      switch (GET_CODE (pat))\n+       {\n+       case PARALLEL:\n+\t for (int i = 0; i < XVECLEN (pat, 0); i++)\n+\t   shuffle_p\n+\t     |= nvptx_unisimt_handle_set (XVECEXP (pat, 0, i), insn, master);\n+\t break;\n+       case SET:\n+\t shuffle_p |= nvptx_unisimt_handle_set (pat, insn, master);\n+\t break;\n+       default:\n+\t gcc_unreachable ();\n+       }\n+\n       if (shuffle_p && TARGET_PTX_6_0)\n \t{\n \t  /* The shuffle is a sync, so uniformity is guaranteed.  */"}, {"sha": "f6dc817632ca565937853ec101e3ad8a49581021", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69cb3f2abb911acebfc7ffede2ee7151a3e14a59/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69cb3f2abb911acebfc7ffede2ee7151a3e14a59/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=69cb3f2abb911acebfc7ffede2ee7151a3e14a59", "patch": "@@ -2069,8 +2069,8 @@\n \n   if (TARGET_SM70)\n     {\n-       emit_insn (gen_nvptx_atomic_store<mode> (operands[0], operands[1],\n-\t\t\t\t\t\toperands[2]));\n+       emit_insn (gen_nvptx_atomic_store_sm70<mode> (operands[0], operands[1],\n+\t\t\t\t\t\t     operands[2]));\n        DONE;\n     }\n \n@@ -2079,13 +2079,12 @@\n     /* Fall back to expand_atomic_store.  */\n     FAIL;\n \n-  rtx tmpreg = gen_reg_rtx (<MODE>mode);\n-  emit_insn (gen_atomic_exchange<mode> (tmpreg, operands[0], operands[1],\n-\t\t\t\t\toperands[2]));\n+  emit_insn (gen_nvptx_atomic_store<mode> (operands[0], operands[1],\n+\t\t\t\t\t   operands[2]));\n   DONE;\n })\n \n-(define_insn \"nvptx_atomic_store<mode>\"\n+(define_insn \"nvptx_atomic_store_sm70<mode>\"\n   [(set (match_operand:SDIM 0 \"memory_operand\" \"+m\")\t      ;; memory\n        (unspec_volatile:SDIM\n \t [(match_operand:SDIM 1 \"nvptx_nonmemory_operand\" \"Ri\") ;; input\n@@ -2099,6 +2098,20 @@\n   }\n   [(set_attr \"atomic\" \"false\")]) ;; Note: st is not an atomic insn.\n \n+(define_insn \"nvptx_atomic_store<mode>\"\n+  [(set (match_operand:SDIM 0 \"memory_operand\" \"+m\")\t      ;; memory\n+       (unspec_volatile:SDIM\n+\t [(match_operand:SDIM 1 \"nvptx_nonmemory_operand\" \"Ri\") ;; input\n+\t  (match_operand:SI 2 \"const_int_operand\")]\t\t;; model\n+\t       UNSPECV_ST))]\n+  \"!TARGET_SM70\"\n+  {\n+    const char *t\n+      = \"%.\\tatom%A0.exch.b%T0\\t_, %0, %1;\";\n+    return nvptx_output_atomic_insn (t, operands, 0, 2);\n+  }\n+  [(set_attr \"atomic\" \"true\")])\n+\n (define_insn \"atomic_fetch_add<mode>\"\n   [(set (match_operand:SDIM 1 \"memory_operand\" \"+m\")\n \t(unspec_volatile:SDIM"}, {"sha": "d611f2d410f6f46df7a5c29847ef07bcae19c426", "filename": "gcc/testsuite/gcc.target/nvptx/atomic-store-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69cb3f2abb911acebfc7ffede2ee7151a3e14a59/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-store-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69cb3f2abb911acebfc7ffede2ee7151a3e14a59/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-store-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-store-1.c?ref=69cb3f2abb911acebfc7ffede2ee7151a3e14a59", "patch": "@@ -21,6 +21,6 @@ main()\n   return 0;\n }\n \n-/* { dg-final { scan-assembler-times \"atom.shared.exch.b32\" 1 } } */\n-/* { dg-final { scan-assembler-times \"atom.shared.exch.b64\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.shared.exch.b32\\[\\t \\]+_,\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.shared.exch.b64\\[\\t \\]+_,\" 1 } } */\n /* { dg-final { scan-assembler-times \"membar.cta\" 4 } } */"}]}