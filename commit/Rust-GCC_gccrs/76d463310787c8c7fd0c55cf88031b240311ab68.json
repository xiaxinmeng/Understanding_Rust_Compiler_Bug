{"sha": "76d463310787c8c7fd0c55cf88031b240311ab68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZkNDYzMzEwNzg3YzhjN2ZkMGM1NWNmODgwMzFiMjQwMzExYWI2OA==", "commit": {"author": {"name": "Kwok Cheung Yeung", "email": "kcy@codesourcery.com", "date": "2019-06-25T11:41:29Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2019-06-25T11:41:29Z"}, "message": "Create GCN-specific gthreads\n\n2019-06-25  Kwok Cheung Yeung  <kcy@codesourcery.com>\n            Andrew Stubbs  <ams@codesourcery.com>\n\n        gcc/\n\t* config.gcc (thread_file): Set to gcn for AMD GCN.\n\t* config/gcn/gcn.c (gcn_emutls_var_init): New function.\n\t(TARGET_EMUTLS_VAR_INIT): New hook.\n\n\tconfig/\n\t* gthr.m4 (GCC_AC_THREAD_HEADER): Add case for gcn.\n\n\tlibgcc/\n\t* configure: Regenerate.\n\t* config/gcn/gthr-gcn.h: New.\n\nCo-Authored-By: Andrew Stubbs <ams@codesourcery.com>\n\nFrom-SVN: r272647", "tree": {"sha": "ea65a788c13aa021cc2d12ac76da8ce9baa14334", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea65a788c13aa021cc2d12ac76da8ce9baa14334"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76d463310787c8c7fd0c55cf88031b240311ab68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d463310787c8c7fd0c55cf88031b240311ab68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76d463310787c8c7fd0c55cf88031b240311ab68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d463310787c8c7fd0c55cf88031b240311ab68/comments", "author": {"login": "k-yeung", "id": 16960193, "node_id": "MDQ6VXNlcjE2OTYwMTkz", "avatar_url": "https://avatars.githubusercontent.com/u/16960193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k-yeung", "html_url": "https://github.com/k-yeung", "followers_url": "https://api.github.com/users/k-yeung/followers", "following_url": "https://api.github.com/users/k-yeung/following{/other_user}", "gists_url": "https://api.github.com/users/k-yeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/k-yeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k-yeung/subscriptions", "organizations_url": "https://api.github.com/users/k-yeung/orgs", "repos_url": "https://api.github.com/users/k-yeung/repos", "events_url": "https://api.github.com/users/k-yeung/events{/privacy}", "received_events_url": "https://api.github.com/users/k-yeung/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c3d876014207c013566132a93cb9d29f0c96a7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c3d876014207c013566132a93cb9d29f0c96a7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c3d876014207c013566132a93cb9d29f0c96a7b"}], "stats": {"total": 196, "additions": 196, "deletions": 0}, "files": [{"sha": "63f4325314f2d9467bdf2da019ec42a44136126d", "filename": "config/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d463310787c8c7fd0c55cf88031b240311ab68/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d463310787c8c7fd0c55cf88031b240311ab68/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=76d463310787c8c7fd0c55cf88031b240311ab68", "patch": "@@ -1,3 +1,8 @@\n+2019-06-25  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+            Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* gthr.m4 (GCC_AC_THREAD_HEADER): Add case for gcn.\n+\n 2019-05-30  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* ax_count_cpus.m4: New file."}, {"sha": "4b937306ad0802c013aa4862eafeefaa597bd590", "filename": "config/gthr.m4", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d463310787c8c7fd0c55cf88031b240311ab68/config%2Fgthr.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d463310787c8c7fd0c55cf88031b240311ab68/config%2Fgthr.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fgthr.m4?ref=76d463310787c8c7fd0c55cf88031b240311ab68", "patch": "@@ -13,6 +13,7 @@ AC_DEFUN([GCC_AC_THREAD_HEADER],\n case $1 in\n     aix)\tthread_header=config/rs6000/gthr-aix.h ;;\n     dce)\tthread_header=config/pa/gthr-dce.h ;;\n+    gcn)\tthread_header=config/gcn/gthr-gcn.h ;;\n     lynx)\tthread_header=config/gthr-lynx.h ;;\n     mipssde)\tthread_header=config/mips/gthr-mipssde.h ;;\n     posix)\tthread_header=gthr-posix.h ;;"}, {"sha": "94b5c49caabd8cd96e77b6bd2a7b507ccf3c9351", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d463310787c8c7fd0c55cf88031b240311ab68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d463310787c8c7fd0c55cf88031b240311ab68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76d463310787c8c7fd0c55cf88031b240311ab68", "patch": "@@ -1,3 +1,10 @@\n+2019-06-25  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+            Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config.gcc (thread_file): Set to gcn for AMD GCN.\n+\t* config/gcn/gcn.c (gcn_emutls_var_init): New function.\n+\t(TARGET_EMUTLS_VAR_INIT): New hook.\n+\n 2019-06-25  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/90939"}, {"sha": "bfe27ad14d8ab50554a2c9a1a202cd6fb959286f", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d463310787c8c7fd0c55cf88031b240311ab68/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d463310787c8c7fd0c55cf88031b240311ab68/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=76d463310787c8c7fd0c55cf88031b240311ab68", "patch": "@@ -1462,6 +1462,7 @@ amdgcn-*-amdhsa)\n \tfi\n \t# Force .init_array support.\n \tgcc_cv_initfini_array=yes\n+\tthread_file=gcn\n \t;;\n moxie-*-elf)\n \tgas=yes"}, {"sha": "e528b649cce53e827dd59c41dd44871393b1672d", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d463310787c8c7fd0c55cf88031b240311ab68/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d463310787c8c7fd0c55cf88031b240311ab68/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=76d463310787c8c7fd0c55cf88031b240311ab68", "patch": "@@ -3163,6 +3163,16 @@ gcn_valid_cvt_p (machine_mode from, machine_mode to, enum gcn_cvt_t op)\n \t  || (to == DFmode && (from == SImode || from == SFmode)));\n }\n \n+/* Implement TARGET_EMUTLS_VAR_INIT.\n+\n+   Disable emutls (gthr-gcn.h does not support it, yet).  */\n+\n+tree\n+gcn_emutls_var_init (tree, tree decl, tree)\n+{\n+  sorry_at (DECL_SOURCE_LOCATION (decl), \"TLS is not implemented for GCN.\");\n+}\n+\n /* }}}  */\n /* {{{ Costs.  */\n \n@@ -6007,6 +6017,8 @@ print_operand (FILE *file, rtx x, int code)\n #define TARGET_CONSTANT_ALIGNMENT gcn_constant_alignment\n #undef  TARGET_DEBUG_UNWIND_INFO\n #define TARGET_DEBUG_UNWIND_INFO gcn_debug_unwind_info\n+#undef  TARGET_EMUTLS_VAR_INIT\n+#define TARGET_EMUTLS_VAR_INIT gcn_emutls_var_init\n #undef  TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN gcn_expand_builtin\n #undef  TARGET_FUNCTION_ARG"}, {"sha": "c6c1b1ffb8f4895836b275384087f39588e604e5", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d463310787c8c7fd0c55cf88031b240311ab68/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d463310787c8c7fd0c55cf88031b240311ab68/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=76d463310787c8c7fd0c55cf88031b240311ab68", "patch": "@@ -1,3 +1,9 @@\n+2019-06-25  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+            Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* configure: Regenerate.\n+\t* config/gcn/gthr-gcn.h: New.\n+\n 2019-06-18  Tom de Vries  <tdevries@suse.de>\n \n \t* config/nvptx/crt0.c (__main): Declare."}, {"sha": "4227b515f01f1f4095776479a89f9c60d6346cf9", "filename": "libgcc/config/gcn/gthr-gcn.h", "status": "added", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d463310787c8c7fd0c55cf88031b240311ab68/libgcc%2Fconfig%2Fgcn%2Fgthr-gcn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d463310787c8c7fd0c55cf88031b240311ab68/libgcc%2Fconfig%2Fgcn%2Fgthr-gcn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fgcn%2Fgthr-gcn.h?ref=76d463310787c8c7fd0c55cf88031b240311ab68", "patch": "@@ -0,0 +1,163 @@\n+/* Threads compatibility routines for libgcc2 and libobjc.  */\n+/* Compile this one with gcc.  */\n+/* Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* AMD GCN does not support dynamic creation of threads.  There may be many\n+   hardware threads, but they're all created simultaneously at launch time.\n+\n+   This implementation is intended to provide mutexes for libgfortran, etc.\n+   It is not intended to provide a TLS implementation at this time,\n+   although that may be added later if needed.\n+\n+   __gthread_active_p returns \"1\" to ensure that mutexes are used, and that\n+   programs attempting to use emutls will fail with the appropriate abort.\n+   It is expected that the TLS tests will fail.  */\n+\n+#ifndef GCC_GTHR_GCN_H\n+#define GCC_GTHR_GCN_H\n+\n+#define __GTHREADS 1\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+#ifdef _LIBOBJC\n+#error \"Objective C is not supported on AMD GCN\"\n+#else\n+\n+static inline int\n+__gthread_active_p (void)\n+{\n+  return 1;\n+}\n+\n+typedef int __gthread_key_t;\n+typedef int __gthread_once_t;\n+typedef int __gthread_mutex_t;\n+typedef int __gthread_recursive_mutex_t;\n+\n+#define __GTHREAD_ONCE_INIT 0\n+#define __GTHREAD_MUTEX_INIT 0\n+#define __GTHREAD_RECURSIVE_MUTEX_INIT 0\n+\n+static inline int\n+__gthread_once (__gthread_once_t *__once __attribute__((unused)),\n+\t\tvoid (*__func) (void) __attribute__((unused)))\n+{\n+  return 0;\n+}\n+\n+static inline int\n+__gthread_key_create (__gthread_key_t *__key __attribute__((unused)),\n+\t\t      void (*__dtor) (void *) __attribute__((unused)))\n+{\n+  /* Operation is not supported.  */\n+  return -1;\n+}\n+\n+static inline int\n+__gthread_key_delete (__gthread_key_t __key __attribute__ ((__unused__)))\n+{\n+  /* Operation is not supported.  */\n+  return -1;\n+}\n+\n+static inline void *\n+__gthread_getspecific (__gthread_key_t __key __attribute__((unused)))\n+{\n+  return NULL;\n+}\n+\n+static inline int\n+__gthread_setspecific (__gthread_key_t __key __attribute__((unused)),\n+\t\t       const void *__ptr __attribute__((unused)))\n+{\n+  /* Operation is not supported.  */\n+  return -1;\n+}\n+\n+static inline int\n+__gthread_mutex_destroy (__gthread_mutex_t *__mutex __attribute__((unused)))\n+{\n+  return 0;\n+}\n+\n+static inline int\n+__gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *__mutex __attribute__((unused)))\n+{\n+  return 0;\n+}\n+\n+\n+static inline int\n+__gthread_mutex_lock (__gthread_mutex_t *__mutex)\n+{\n+  while (__sync_lock_test_and_set (__mutex, 1))\n+    asm volatile (\"s_sleep\\t1\" ::: \"memory\");\n+\n+  return 0;\n+}\n+\n+static inline int\n+__gthread_mutex_trylock (__gthread_mutex_t *__mutex)\n+{\n+  return __sync_lock_test_and_set (__mutex, 1);\n+}\n+\n+static inline int\n+__gthread_mutex_unlock (__gthread_mutex_t *__mutex)\n+{\n+  __sync_lock_release (__mutex);\n+\n+  return 0;\n+}\n+\n+static inline int\n+__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex __attribute__((unused)))\n+{\n+  /* Operation is not supported.  */\n+  return -1;\n+}\n+\n+static inline int\n+__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex __attribute__((unused)))\n+{\n+  /* Operation is not supported.  */\n+  return -1;\n+}\n+\n+static inline int\n+__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex __attribute__((unused)))\n+{\n+  /* Operation is not supported.  */\n+  return -1;\n+}\n+#endif /* _LIBOBJC */\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif /* ! GCC_GTHR_GCN_H */"}, {"sha": "af910b62931c85c5018ce24100822bee3b0c3952", "filename": "libgcc/configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d463310787c8c7fd0c55cf88031b240311ab68/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d463310787c8c7fd0c55cf88031b240311ab68/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=76d463310787c8c7fd0c55cf88031b240311ab68", "patch": "@@ -5542,6 +5542,7 @@ tm_file=\"${tm_file_}\"\n case $target_thread_file in\n     aix)\tthread_header=config/rs6000/gthr-aix.h ;;\n     dce)\tthread_header=config/pa/gthr-dce.h ;;\n+    gcn)\tthread_header=config/gcn/gthr-gcn.h ;;\n     lynx)\tthread_header=config/gthr-lynx.h ;;\n     mipssde)\tthread_header=config/mips/gthr-mipssde.h ;;\n     posix)\tthread_header=gthr-posix.h ;;"}]}