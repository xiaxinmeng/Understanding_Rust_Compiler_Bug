{"sha": "7d776ee2520ce781f671150d8fcd2f6085362b2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q3NzZlZTI1MjBjZTc4MWY2NzExNTBkOGZjZDJmNjA4NTM2MmIyYw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-03-28T12:14:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-03-28T12:14:26Z"}, "message": "loop-init.c (loop_optimizer_init): If loops are preserved perform incremental initialization of required loop features.\n\n2012-03-28  Richard Guenther  <rguenther@suse.de>\n\n\t* loop-init.c (loop_optimizer_init): If loops are preserved\n\tperform incremental initialization of required loop features.\n\t(loop_optimizer_finalize): If loops are to be preserved only\n\tclean up optional loop features.\n\t(rtl_loop_done): Forcefully free loops here.\n\t* cgraph.c (cgraph_release_function_body): Forcefully free\n\tloops.\n\t* cfgexpand.c (expand_gimple_cond): Properly add new basic-blocks\n\tto existing loops.\n\t(construct_init_block): Likewise.\n\t(construct_exit_block): Likewise.\n\t(gimple_expand_cfg): Clear LOOP_CLOSED_SSA loop state.  Cleanup\n\tthe CFG after expanding.\n\t* cfgloop.c (verify_loop_structure): Calculate or verify\n\tdominators.  If we needed to calculate them, free them afterwards.\n\t* tree-pass.h (PROP_loops): New define.\n\t* tree-ssa-loop.c (pass_tree_loop_init): Provide PROP_loops.\n\t* basic-block.h (CLEANUP_CFG_CHANGED): New.\n\t* cfgcleanup.c (merge_blocks_move): Protect loop latches.\n\t(cleanup_cfg): If we did something and have loops around, fix\n\tthem up.\n\t* cse.c (rest_of_handle_cse_after_global_opts): Call cleanup_cfg\n\twith CLEANUP_CFG_CHANGED.\n\t* cfghooks.c (merge_blocks): If we merge a loop header into\n\tits predecessor, update the loop structure.\n\t(duplicate_block): If we copy a loop latch, adjust loop state\n\tto note we may have multiple latches.\n\t(delete_basic_block): Mark loops for fixup if we remove a loop.\n\t* cfganal.c (forwarder_block_p): Protect loop latches, headers\n\tand preheaders.\n\t* cfgrtl.c (rtl_can_merge_blocks): Protect loop latches.\n\t(cfg_layout_can_merge_blocks_p): Likewise.\n\t* cprop.c (bypass_block): If we create a loop with multiple\n\tentries, mark it for removal.\n\t* except.c (emit_to_new_bb_before): Add the new basic-block\n\tto existing loops.\n\t* tree-eh.c (lower_resx): Likewise.\n\t* omp-low.c (finalize_task_copyfn): Do not copy PROP_loops.\n\t(expand_omp_taskreg): Likewise.\n\t* tree-inline.c (initialize_cfun): Likewise.\n\t* tree-mudflap.c (add_bb_to_loop): Prototype.\n\t(mf_build_check_statement_for): Properly add new basic-blocks\n\tto existing loops.\n\t* tree-ssa-threadupdate.c (thread_block): Mark loops for fixup\n\tif we remove a loop.\n\t(thread_through_loop_header): Likewise.\n\t* trans-mem.c (tm_log_emit_save_or_restores): Properly add\n\tnew basic-blocks to existing loops.\n\t(expand_transaction): Likewise.\n\t* Makefile.in (except.o): Add $(CFGLOOP_H).\n\t(expr.o): Likewise.\n\t(cgraph.o): Likewise.\n\t(cprop.o): Likewise.\n\t(cfgexpand.o): Likewise.\n\t(cfganal.o): Likewise.\n\t(trans-mem.o): Likewise.\n\t(tree-eh.o): Likewise.\n\nFrom-SVN: r185913", "tree": {"sha": "a016e8f205f21bb435691b9d07878f5480b9aee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a016e8f205f21bb435691b9d07878f5480b9aee9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d776ee2520ce781f671150d8fcd2f6085362b2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d776ee2520ce781f671150d8fcd2f6085362b2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d776ee2520ce781f671150d8fcd2f6085362b2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d776ee2520ce781f671150d8fcd2f6085362b2c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "911ba855542ada6e9d1843fe0f0a60097f9ea12e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/911ba855542ada6e9d1843fe0f0a60097f9ea12e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/911ba855542ada6e9d1843fe0f0a60097f9ea12e"}], "stats": {"total": 282, "additions": 252, "deletions": 30}, "files": [{"sha": "3509bda22595133523742ccceff7da95a8ffe9c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d776ee2520ce781f671150d8fcd2f6085362b2c", "patch": "@@ -1,3 +1,63 @@\n+2012-03-28  Richard Guenther  <rguenther@suse.de>\n+\n+\t* loop-init.c (loop_optimizer_init): If loops are preserved\n+\tperform incremental initialization of required loop features.\n+\t(loop_optimizer_finalize): If loops are to be preserved only\n+\tclean up optional loop features.\n+\t(rtl_loop_done): Forcefully free loops here.\n+\t* cgraph.c (cgraph_release_function_body): Forcefully free\n+\tloops.\n+\t* cfgexpand.c (expand_gimple_cond): Properly add new basic-blocks\n+\tto existing loops.\n+\t(construct_init_block): Likewise.\n+\t(construct_exit_block): Likewise.\n+\t(gimple_expand_cfg): Clear LOOP_CLOSED_SSA loop state.  Cleanup\n+\tthe CFG after expanding.\n+\t* cfgloop.c (verify_loop_structure): Calculate or verify\n+\tdominators.  If we needed to calculate them, free them afterwards.\n+\t* tree-pass.h (PROP_loops): New define.\n+\t* tree-ssa-loop.c (pass_tree_loop_init): Provide PROP_loops.\n+\t* basic-block.h (CLEANUP_CFG_CHANGED): New.\n+\t* cfgcleanup.c (merge_blocks_move): Protect loop latches.\n+\t(cleanup_cfg): If we did something and have loops around, fix\n+\tthem up.\n+\t* cse.c (rest_of_handle_cse_after_global_opts): Call cleanup_cfg\n+\twith CLEANUP_CFG_CHANGED.\n+\t* cfghooks.c (merge_blocks): If we merge a loop header into\n+\tits predecessor, update the loop structure.\n+\t(duplicate_block): If we copy a loop latch, adjust loop state\n+\tto note we may have multiple latches.\n+\t(delete_basic_block): Mark loops for fixup if we remove a loop.\n+\t* cfganal.c (forwarder_block_p): Protect loop latches, headers\n+\tand preheaders.\n+\t* cfgrtl.c (rtl_can_merge_blocks): Protect loop latches.\n+\t(cfg_layout_can_merge_blocks_p): Likewise.\n+\t* cprop.c (bypass_block): If we create a loop with multiple\n+\tentries, mark it for removal.\n+\t* except.c (emit_to_new_bb_before): Add the new basic-block\n+\tto existing loops.\n+\t* tree-eh.c (lower_resx): Likewise.\n+\t* omp-low.c (finalize_task_copyfn): Do not copy PROP_loops.\n+\t(expand_omp_taskreg): Likewise.\n+\t* tree-inline.c (initialize_cfun): Likewise.\n+\t* tree-mudflap.c (add_bb_to_loop): Prototype.\n+\t(mf_build_check_statement_for): Properly add new basic-blocks\n+\tto existing loops.\n+\t* tree-ssa-threadupdate.c (thread_block): Mark loops for fixup\n+\tif we remove a loop.\n+\t(thread_through_loop_header): Likewise.\n+\t* trans-mem.c (tm_log_emit_save_or_restores): Properly add\n+\tnew basic-blocks to existing loops.\n+\t(expand_transaction): Likewise.\n+\t* Makefile.in (except.o): Add $(CFGLOOP_H).\n+\t(expr.o): Likewise.\n+\t(cgraph.o): Likewise.\n+\t(cprop.o): Likewise.\n+\t(cfgexpand.o): Likewise.\n+\t(cfganal.o): Likewise.\n+\t(trans-mem.o): Likewise.\n+\t(tree-eh.o): Likewise.\n+\n 2012-03-28  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/52692"}, {"sha": "d50faccca52acc155982470f5912389112d5c8f3", "filename": "gcc/Makefile.in", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7d776ee2520ce781f671150d8fcd2f6085362b2c", "patch": "@@ -2159,7 +2159,7 @@ trans-mem.o : trans-mem.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(TREE_H) $(GIMPLE_H) $(TREE_FLOW_H) $(TREE_PASS_H) $(TREE_INLINE_H) \\\n \t$(DIAGNOSTIC_CORE_H) $(DEMANGLE_H) output.h $(TRANS_MEM_H) \\\n \t$(PARAMS_H) $(TARGET_H) langhooks.h \\\n-\ttree-pretty-print.h gimple-pretty-print.h\n+\ttree-pretty-print.h gimple-pretty-print.h $(CFGLOOP_H)\n \n ggc-common.o: ggc-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\t\\\n \t$(GGC_H) $(HASHTAB_H) $(DIAGNOSTIC_CORE_H) $(PARAMS_H) hosthooks.h\t\\\n@@ -2468,7 +2468,8 @@ tree-ssa-operands.o : tree-ssa-operands.c $(TREE_FLOW_H) $(CONFIG_H) \\\n tree-eh.o : tree-eh.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(TM_H) $(FLAGS_H) $(FUNCTION_H) $(EXCEPT_H) langhooks.h \\\n    $(GGC_H) $(TREE_PASS_H) coretypes.h $(TIMEVAR_H) pointer-set.h \\\n-   $(TREE_DUMP_H) $(TREE_INLINE_H) tree-iterator.h toplev.h $(DIAGNOSTIC_CORE_H)\n+   $(TREE_DUMP_H) $(TREE_INLINE_H) tree-iterator.h toplev.h \\\n+   $(DIAGNOSTIC_CORE_H) $(CFGLOOP_H)\n tree-ssa-loop.o : tree-ssa-loop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(TM_P_H) $(BASIC_BLOCK_H) output.h \\\n    $(DIAGNOSTIC_H) $(TREE_FLOW_H) $(TREE_DUMP_H) $(TREE_PASS_H) $(TIMEVAR_H) \\\n@@ -2814,7 +2815,7 @@ except.o : except.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    dwarf2asm.h dwarf2out.h toplev.h $(DIAGNOSTIC_CORE_H) $(HASHTAB_H) intl.h $(GGC_H) \\\n    gt-except.h $(CGRAPH_H) $(INTEGRATE_H) $(DIAGNOSTIC_H) $(DWARF2_H) \\\n    $(TARGET_H) $(TM_P_H) $(TREE_PASS_H) $(TIMEVAR_H) $(TREE_FLOW_H) \\\n-   tree-pretty-print.h sbitmap.h $(COMMON_TARGET_H)\n+   tree-pretty-print.h sbitmap.h $(COMMON_TARGET_H) $(CFGLOOP_H)\n expr.o : expr.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(FUNCTION_H) $(REGS_H) $(EXPR_H) $(OPTABS_H) \\\n    $(LIBFUNCS_H) $(INSN_ATTR_H) insn-config.h $(RECOG_H) output.h \\\n@@ -2912,7 +2913,7 @@ cgraph.o : cgraph.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    gt-cgraph.h output.h intl.h $(BASIC_BLOCK_H) debug.h $(HASHTAB_H) \\\n    $(TREE_INLINE_H) $(TREE_DUMP_H) $(TREE_FLOW_H) cif-code.def \\\n    value-prof.h $(EXCEPT_H) $(IPA_UTILS_H) $(DIAGNOSTIC_CORE_H) \\\n-   ipa-inline.h $(LTO_STREAMER_H)\n+   ipa-inline.h $(LTO_STREAMER_H) $(CFGLOOP_H)\n cgraphunit.o : cgraphunit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(TREE_INLINE_H) toplev.h $(DIAGNOSTIC_CORE_H) $(FLAGS_H) $(GGC_H) \\\n    $(TARGET_H) $(CGRAPH_H) intl.h pointer-set.h $(FUNCTION_H) $(GIMPLE_H) \\\n@@ -3029,7 +3030,7 @@ cprop.o : cprop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(RECOG_H) $(EXPR_H) $(BASIC_BLOCK_H) $(FUNCTION_H) output.h toplev.h $(DIAGNOSTIC_CORE_H) \\\n    $(TM_P_H) $(PARAMS_H) cselib.h $(EXCEPT_H) $(TREE_H) $(TIMEVAR_H) \\\n    intl.h $(OBSTACK_H) $(TREE_PASS_H) $(DF_H) $(DBGCNT_H) $(TARGET_H) \\\n-   $(DF_H)\n+   $(DF_H) $(CFGLOOP_H)\n gcse.o : gcse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h $(GGC_H) \\\n    $(RECOG_H) $(EXPR_H) $(BASIC_BLOCK_H) $(FUNCTION_H) output.h toplev.h $(DIAGNOSTIC_CORE_H) \\\n@@ -3149,7 +3150,7 @@ cfgexpand.o : cfgexpand.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(DIAGNOSTIC_H) toplev.h $(DIAGNOSTIC_CORE_H) $(BASIC_BLOCK_H) $(FLAGS_H) debug.h $(PARAMS_H) \\\n    value-prof.h $(TREE_INLINE_H) $(TARGET_H) $(SSAEXPAND_H) $(REGS_H) \\\n    tree-pretty-print.h gimple-pretty-print.h $(BITMAP_H) sbitmap.h \\\n-   $(INSN_ATTR_H) $(INTEGRATE_H)\n+   $(INSN_ATTR_H) $(INTEGRATE_H) $(CFGLOOP_H)\n cfgrtl.o : cfgrtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_ERROR_H) \\\n    $(FLAGS_H) insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h \\\n    output.h  $(FUNCTION_H) $(EXCEPT_H) $(TM_P_H) $(INSN_ATTR_H) \\\n@@ -3158,7 +3159,8 @@ cfgrtl.o : cfgrtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_ERROR_H) \\\n    $(TREE_PASS_H) $(DF_H) $(GGC_H) $(COMMON_TARGET_H)\n cfganal.o : cfganal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h insn-config.h $(RECOG_H) $(TM_P_H) \\\n-   $(TIMEVAR_H) $(OBSTACK_H) $(DIAGNOSTIC_CORE_H) vecprim.h sbitmap.h $(BITMAP_H)\n+   $(TIMEVAR_H) $(OBSTACK_H) $(DIAGNOSTIC_CORE_H) vecprim.h sbitmap.h \\\n+   $(BITMAP_H) $(CFGLOOP_H)\n cfgbuild.o : cfgbuild.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h $(DIAGNOSTIC_CORE_H) \\\n    $(FUNCTION_H) $(EXCEPT_H) $(TIMEVAR_H) $(TREE_H) $(EXPR_H) sbitmap.h"}, {"sha": "fb17bad9d0548924607fb6333a338cf1ae8e9eb2", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=7d776ee2520ce781f671150d8fcd2f6085362b2c", "patch": "@@ -741,6 +741,7 @@ edge find_edge (basic_block, basic_block);\n #define CLEANUP_NO_INSN_DEL\t16\t/* Do not try to delete trivially dead\n \t\t\t\t\t   insns.  */\n #define CLEANUP_CFGLAYOUT\t32\t/* Do cleanup in cfglayout mode.  */\n+#define CLEANUP_CFG_CHANGED\t64      /* The caller changed the CFG.  */\n \n /* In lcm.c */\n extern struct edge_list *pre_edge_lcm (int, sbitmap *, sbitmap *,"}, {"sha": "d361ff08f98d3a27066a50e319615a8b7498c1f5", "filename": "gcc/cfganal.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=7d776ee2520ce781f671150d8fcd2f6085362b2c", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"bitmap.h\"\n #include \"sbitmap.h\"\n #include \"timevar.h\"\n+#include \"cfgloop.h\"\n \n /* Store the data structures necessary for depth-first search.  */\n struct depth_first_search_dsS {\n@@ -94,6 +95,17 @@ forwarder_block_p (const_basic_block bb)\n       || !single_succ_p (bb))\n     return false;\n \n+  /* Protect loop latches, headers and preheaders.  */\n+  if (current_loops)\n+    {\n+      basic_block dest;\n+      if (bb->loop_father->header == bb)\n+\treturn false;\n+      dest = EDGE_SUCC (bb, 0)->dest;\n+      if (dest->loop_father->header == dest)\n+\treturn false;\n+    }\n+\n   for (insn = BB_HEAD (bb); insn != BB_END (bb); insn = NEXT_INSN (insn))\n     if (INSN_P (insn) && flow_active_insn_p (insn))\n       return false;"}, {"sha": "3824797485dca9d3bf072db0a5b7ba340a276958", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=7d776ee2520ce781f671150d8fcd2f6085362b2c", "patch": "@@ -779,6 +779,11 @@ merge_blocks_move (edge e, basic_block b, basic_block c, int mode)\n   if (e->flags & EDGE_FALLTHRU)\n     {\n       int b_index = b->index, c_index = c->index;\n+\n+      /* Protect the loop latches.  */\n+      if (current_loops && c->loop_father->latch == c)\n+\treturn NULL;\n+\n       merge_blocks (b, c);\n       update_forwarder_flag (b);\n \n@@ -2976,6 +2981,23 @@ cleanup_cfg (int mode)\n   if (!(mode & CLEANUP_CFGLAYOUT))\n     delete_dead_jumptables ();\n \n+  /* ???  We probably do this way too often.  */\n+  if (current_loops\n+      && (changed\n+\t  || (mode & CLEANUP_CFG_CHANGED)))\n+    {\n+      bitmap changed_bbs;\n+      timevar_push (TV_REPAIR_LOOPS);\n+      /* The above doesn't preserve dominance info if available.  */\n+      gcc_assert (!dom_info_available_p (CDI_DOMINATORS));\n+      calculate_dominance_info (CDI_DOMINATORS);\n+      changed_bbs = BITMAP_ALLOC (NULL);\n+      fix_loop_structure (changed_bbs);\n+      BITMAP_FREE (changed_bbs);\n+      free_dominance_info (CDI_DOMINATORS);\n+      timevar_pop (TV_REPAIR_LOOPS);\n+    }\n+\n   timevar_pop (TV_CLEANUP_CFG);\n \n   return changed;"}, {"sha": "d148853143b3b3ac8964c3c4453a75608b3cd406", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=7d776ee2520ce781f671150d8fcd2f6085362b2c", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ssaexpand.h\"\n #include \"bitmap.h\"\n #include \"sbitmap.h\"\n+#include \"cfgloop.h\"\n #include \"regs.h\" /* For reg_renumber.  */\n #include \"integrate.h\" /* For emit_initial_value_sets.  */\n #include \"insn-attr.h\" /* For INSN_SCHEDULING.  */\n@@ -1940,6 +1941,8 @@ expand_gimple_cond (basic_block bb, gimple stmt)\n   false_edge->flags |= EDGE_FALLTHRU;\n   new_bb->count = false_edge->count;\n   new_bb->frequency = EDGE_FREQUENCY (false_edge);\n+  if (current_loops && bb->loop_father)\n+    add_bb_to_loop (new_bb, bb->loop_father);\n   new_edge = make_edge (new_bb, dest, 0);\n   new_edge->probability = REG_BR_PROB_BASE;\n   new_edge->count = new_bb->count;\n@@ -4118,6 +4121,8 @@ construct_init_block (void)\n \t\t\t\t   ENTRY_BLOCK_PTR);\n   init_block->frequency = ENTRY_BLOCK_PTR->frequency;\n   init_block->count = ENTRY_BLOCK_PTR->count;\n+  if (current_loops && ENTRY_BLOCK_PTR->loop_father)\n+    add_bb_to_loop (init_block, ENTRY_BLOCK_PTR->loop_father);\n   if (e)\n     {\n       first_block = e->dest;\n@@ -4185,6 +4190,8 @@ construct_exit_block (void)\n \t\t\t\t   EXIT_BLOCK_PTR->prev_bb);\n   exit_block->frequency = EXIT_BLOCK_PTR->frequency;\n   exit_block->count = EXIT_BLOCK_PTR->count;\n+  if (current_loops && EXIT_BLOCK_PTR->loop_father)\n+    add_bb_to_loop (exit_block, EXIT_BLOCK_PTR->loop_father);\n \n   ix = 0;\n   while (ix < EDGE_COUNT (EXIT_BLOCK_PTR->preds))\n@@ -4556,6 +4563,8 @@ gimple_expand_cfg (void)\n   timevar_push (TV_POST_EXPAND);\n   /* We are no longer in SSA form.  */\n   cfun->gimple_df->in_ssa_p = false;\n+  if (current_loops)\n+    loops_state_clear (LOOP_CLOSED_SSA);\n \n   /* Expansion is used by optimization passes too, set maybe_hot_insn_p\n      conservatively to true until they are all profile aware.  */"}, {"sha": "1dca79a70cf2952d04eb4ab737846ae64e745b21", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=7d776ee2520ce781f671150d8fcd2f6085362b2c", "patch": "@@ -508,6 +508,7 @@ delete_basic_block (basic_block bb)\n \t{\n \t  loop->header = NULL;\n \t  loop->latch = NULL;\n+\t  loops_state_set (LOOPS_NEED_FIXUP);\n \t}\n \n       remove_bb_from_loops (bb);\n@@ -682,8 +683,18 @@ merge_blocks (basic_block a, basic_block b)\n \n   cfg_hooks->merge_blocks (a, b);\n \n+  /* If we merge a loop header into its predecessor, update the loop\n+     structure.  */\n   if (current_loops != NULL)\n-    remove_bb_from_loops (b);\n+    {\n+      if (b->loop_father->header == b)\n+\t{\n+\t  remove_bb_from_loops (a);\n+\t  add_bb_to_loop  (a, b->loop_father);\n+\t  a->loop_father->header = a;\n+\t}\n+      remove_bb_from_loops (b);\n+    }\n \n   /* Normally there should only be one successor of A and that is B, but\n      partway though the merge of blocks for conditional_execution we'll\n@@ -999,6 +1010,18 @@ duplicate_block (basic_block bb, edge e, basic_block after)\n       struct loop *cloop = bb->loop_father;\n       struct loop *copy = get_loop_copy (cloop);\n       add_bb_to_loop (new_bb, copy ? copy : cloop);\n+      /* If we copied the loop latch block but not the loop, adjust\n+\t loop state.\n+\t ???  If we copied the loop header block but not the loop\n+\t we might either have created a loop copy or a loop with\n+\t multiple entries.  In both cases we probably have to\n+\t ditch the loops and arrange for a fixup.  */\n+      if (!copy\n+\t  && cloop->latch == bb)\n+\t{\n+\t  cloop->latch = NULL;\n+\t  loops_state_set (LOOPS_MAY_HAVE_MULTIPLE_LATCHES);\n+\t}\n     }\n \n   return new_bb;"}, {"sha": "94ba874b1010da58ebaf7d94369b8fc550acb0c5", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=7d776ee2520ce781f671150d8fcd2f6085362b2c", "patch": "@@ -1317,9 +1317,13 @@ verify_loop_structure (void)\n   unsigned num = number_of_loops ();\n   loop_iterator li;\n   struct loop_exit *exit, *mexit;\n+  bool dom_available = dom_info_available_p (CDI_DOMINATORS);\n \n-  /* We need up-to-date dominators, verify them.  */\n-  verify_dominators (CDI_DOMINATORS);\n+  /* We need up-to-date dominators, compute or verify them.  */\n+  if (!dom_available)\n+    calculate_dominance_info (CDI_DOMINATORS);\n+  else\n+    verify_dominators (CDI_DOMINATORS);\n \n   /* Check sizes.  */\n   sizes = XCNEWVEC (unsigned, num);\n@@ -1563,6 +1567,8 @@ verify_loop_structure (void)\n   gcc_assert (!err);\n \n   free (sizes);\n+  if (!dom_available)\n+    free_dominance_info (CDI_DOMINATORS);\n }\n \n /* Returns latch edge of LOOP.  */"}, {"sha": "5292ae536b568139d9f8171e4aab92487363b227", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=7d776ee2520ce781f671150d8fcd2f6085362b2c", "patch": "@@ -1728,6 +1728,8 @@ fix_loop_structure (bitmap changed_bbs)\n   if (record_exits)\n     record_loop_exits ();\n \n+  loops_state_clear (LOOPS_NEED_FIXUP);\n+\n #ifdef ENABLE_CHECKING\n   verify_loop_structure ();\n #endif"}, {"sha": "ea293933704656a55ff34ab07135e9b55c4dae6f", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=7d776ee2520ce781f671150d8fcd2f6085362b2c", "patch": "@@ -727,6 +727,10 @@ rtl_can_merge_blocks (basic_block a, basic_block b)\n   if (BB_PARTITION (a) != BB_PARTITION (b))\n     return false;\n \n+  /* Protect the loop latches.  */\n+  if (current_loops && b->loop_father->latch == b)\n+    return false;\n+\n   /* There must be exactly one edge in between the blocks.  */\n   return (single_succ_p (a)\n \t  && single_succ (a) == b\n@@ -2786,6 +2790,10 @@ cfg_layout_can_merge_blocks_p (basic_block a, basic_block b)\n   if (BB_PARTITION (a) != BB_PARTITION (b))\n     return false;\n \n+  /* Protect the loop latches.  */\n+  if (current_loops && b->loop_father->latch == b)\n+    return false;\n+\n   /* If we would end up moving B's instructions, make sure it doesn't fall\n      through into the exit block, since we cannot recover from a fallthrough\n      edge into the exit block occurring in the middle of a function.  */"}, {"sha": "e429a91d82e4cec158d5190d0f2ab77af785d11b", "filename": "gcc/cgraph.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=7d776ee2520ce781f671150d8fcd2f6085362b2c", "patch": "@@ -99,6 +99,7 @@ The callgraph:\n #include \"ipa-utils.h\"\n #include \"lto-streamer.h\"\n #include \"ipa-inline.h\"\n+#include \"cfgloop.h\"\n \n const char * const ld_plugin_symbol_resolution_names[]=\n {\n@@ -1363,6 +1364,12 @@ cgraph_release_function_body (struct cgraph_node *node)\n     {\n       tree old_decl = current_function_decl;\n       push_cfun (DECL_STRUCT_FUNCTION (node->decl));\n+      if (cfun->cfg\n+\t  && current_loops)\n+\t{\n+\t  cfun->curr_properties &= ~PROP_loops;\n+\t  loop_optimizer_finalize ();\n+\t}\n       if (cfun->gimple_df)\n \t{\n \t  current_function_decl = node->decl;\n@@ -1379,7 +1386,6 @@ cgraph_release_function_body (struct cgraph_node *node)\n \t}\n       if (cfun->value_histograms)\n \tfree_histograms ();\n-      gcc_assert (!current_loops);\n       pop_cfun();\n       gimple_set_body (node->decl, NULL);\n       VEC_free (ipa_opt_pass, heap,"}, {"sha": "024dd207655b5648154e40b4331122af434173a9", "filename": "gcc/cprop.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcprop.c?ref=7d776ee2520ce781f671150d8fcd2f6085362b2c", "patch": "@@ -48,6 +48,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"df.h\"\n #include \"dbgcnt.h\"\n #include \"target.h\"\n+#include \"cfgloop.h\"\n \n \f\n /* An obstack for our working variables.  */\n@@ -1610,6 +1611,17 @@ bypass_block (basic_block bb, rtx setcc, rtx jump)\n \t      && dest != old_dest\n \t      && dest != EXIT_BLOCK_PTR)\n             {\n+\t      if (current_loops != NULL\n+\t\t  && e->src->loop_father->latch == e->src)\n+\t\t{\n+\t\t  /* ???  Now we are creating (or may create) a loop\n+\t\t     with multiple entries.  Simply mark it for\n+\t\t     removal.  Alternatively we could not do this\n+\t\t     threading.  */\n+\t\t  e->src->loop_father->header = NULL;\n+\t\t  e->src->loop_father->latch = NULL;\n+\t\t}\n+\n \t      redirect_edge_and_branch_force (e, dest);\n \n \t      /* Copy the register setter to the redirected edge."}, {"sha": "d8f07e95eac0ec3598627742a6046f5a0a4e7bd3", "filename": "gcc/cse.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=7d776ee2520ce781f671150d8fcd2f6085362b2c", "patch": "@@ -7451,7 +7451,7 @@ rest_of_handle_cse (void)\n     {\n       timevar_push (TV_JUMP);\n       rebuild_jump_labels (get_insns ());\n-      cleanup_cfg (0);\n+      cleanup_cfg (CLEANUP_CFG_CHANGED);\n       timevar_pop (TV_JUMP);\n     }\n   else if (tem == 1 || optimize > 1)\n@@ -7511,7 +7511,7 @@ rest_of_handle_cse2 (void)\n     {\n       timevar_push (TV_JUMP);\n       rebuild_jump_labels (get_insns ());\n-      cleanup_cfg (0);\n+      cleanup_cfg (CLEANUP_CFG_CHANGED);\n       timevar_pop (TV_JUMP);\n     }\n   else if (tem == 1)\n@@ -7572,7 +7572,7 @@ rest_of_handle_cse_after_global_opts (void)\n     {\n       timevar_push (TV_JUMP);\n       rebuild_jump_labels (get_insns ());\n-      cleanup_cfg (0);\n+      cleanup_cfg (CLEANUP_CFG_CHANGED);\n       timevar_pop (TV_JUMP);\n     }\n   else if (tem == 1)"}, {"sha": "ddc865217bd467c82110d655145cb9d25a809faa", "filename": "gcc/except.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=7d776ee2520ce781f671150d8fcd2f6085362b2c", "patch": "@@ -144,6 +144,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"timevar.h\"\n #include \"tree-flow.h\"\n+#include \"cfgloop.h\"\n \n /* Provide defaults for stuff that may not be defined when using\n    sjlj exceptions.  */\n@@ -898,7 +899,7 @@ static basic_block\n emit_to_new_bb_before (rtx seq, rtx insn)\n {\n   rtx last;\n-  basic_block bb;\n+  basic_block bb, prev_bb;\n   edge e;\n   edge_iterator ei;\n \n@@ -913,9 +914,16 @@ emit_to_new_bb_before (rtx seq, rtx insn)\n   last = emit_insn_before (seq, insn);\n   if (BARRIER_P (last))\n     last = PREV_INSN (last);\n-  bb = create_basic_block (seq, last, BLOCK_FOR_INSN (insn)->prev_bb);\n+  prev_bb = BLOCK_FOR_INSN (insn)->prev_bb;\n+  bb = create_basic_block (seq, last, prev_bb);\n   update_bb_for_insn (bb);\n   bb->flags |= BB_SUPERBLOCK;\n+  if (current_loops)\n+    {\n+      add_bb_to_loop (bb, prev_bb->loop_father);\n+      if (prev_bb->loop_father->header == prev_bb)\n+\tprev_bb->loop_father->header = bb;\n+    }\n   return bb;\n }\n \f"}, {"sha": "b8d7b7ee7ce9b3801a6c0fa202634f362d296be1", "filename": "gcc/loop-init.c", "status": "modified", "additions": 38, "deletions": 9, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=7d776ee2520ce781f671150d8fcd2f6085362b2c", "patch": "@@ -42,15 +42,28 @@ along with GCC; see the file COPYING3.  If not see\n void\n loop_optimizer_init (unsigned flags)\n {\n-  struct loops *loops;\n+  if (!current_loops)\n+    {\n+      struct loops *loops = ggc_alloc_cleared_loops ();\n+\n+      gcc_assert (!(cfun->curr_properties & PROP_loops));\n \n-  gcc_assert (!current_loops);\n-  loops = ggc_alloc_cleared_loops ();\n+      /* Find the loops.  */\n \n-  /* Find the loops.  */\n+      flow_loops_find (loops);\n+      current_loops = loops;\n+    }\n+  else\n+    {\n+      gcc_assert (cfun->curr_properties & PROP_loops);\n \n-  flow_loops_find (loops);\n-  current_loops = loops;\n+      /* Ensure that the dominators are computed, like flow_loops_find does.  */\n+      calculate_dominance_info (CDI_DOMINATORS);\n+\n+#ifdef ENABLE_CHECKING\n+      verify_loop_structure ();\n+#endif\n+    }\n \n   if (flags & LOOPS_MAY_HAVE_MULTIPLE_LATCHES)\n     {\n@@ -104,6 +117,22 @@ loop_optimizer_finalize (void)\n   struct loop *loop;\n   basic_block bb;\n \n+  if (loops_state_satisfies_p (LOOPS_HAVE_RECORDED_EXITS))\n+    release_recorded_exits ();\n+\n+  /* If we should preserve loop structure, do not free it but clear\n+     flags that advanced properties are there as we are not preserving\n+     that in full.  */\n+  if (cfun->curr_properties & PROP_loops)\n+    {\n+      loops_state_clear (LOOP_CLOSED_SSA\n+\t\t\t | LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS\n+\t\t\t | LOOPS_HAVE_PREHEADERS\n+\t\t\t | LOOPS_HAVE_SIMPLE_LATCHES\n+\t\t\t | LOOPS_HAVE_FALLTHRU_PREHEADERS);\n+      return;\n+    }\n+\n   gcc_assert (current_loops != NULL);\n \n   FOR_EACH_LOOP (li, loop, 0)\n@@ -112,8 +141,6 @@ loop_optimizer_finalize (void)\n     }\n \n   /* Clean up.  */\n-  if (loops_state_satisfies_p (LOOPS_HAVE_RECORDED_EXITS))\n-    release_recorded_exits ();\n   flow_loops_free (current_loops);\n   ggc_free (current_loops);\n   current_loops = NULL;\n@@ -200,6 +227,8 @@ struct rtl_opt_pass pass_rtl_loop_init =\n static unsigned int\n rtl_loop_done (void)\n {\n+  /* No longer preserve loops, remove them now.  */\n+  cfun->curr_properties &= ~PROP_loops;\n   loop_optimizer_finalize ();\n   free_dominance_info (CDI_DOMINATORS);\n \n@@ -223,7 +252,7 @@ struct rtl_opt_pass pass_rtl_loop_done =\n   TV_LOOP,                              /* tv_id */\n   0,                                    /* properties_required */\n   0,                                    /* properties_provided */\n-  0,                                    /* properties_destroyed */\n+  PROP_loops,                           /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_verify_flow\n     | TODO_verify_rtl_sharing           /* todo_flags_finish */"}, {"sha": "ec1a5522d7f8ebcbe830a038beef6fef28fcaf09", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=7d776ee2520ce781f671150d8fcd2f6085362b2c", "patch": "@@ -1242,7 +1242,7 @@ finalize_task_copyfn (gimple task_stmt)\n \n   /* Inform the callgraph about the new function.  */\n   DECL_STRUCT_FUNCTION (child_fn)->curr_properties\n-    = cfun->curr_properties;\n+    = cfun->curr_properties & ~PROP_loops;\n \n   old_fn = current_function_decl;\n   push_cfun (child_cfun);\n@@ -3562,7 +3562,7 @@ expand_omp_taskreg (struct omp_region *region)\n \n       /* Inform the callgraph about the new function.  */\n       DECL_STRUCT_FUNCTION (child_fn)->curr_properties\n-\t= cfun->curr_properties;\n+\t= cfun->curr_properties & ~PROP_loops;\n       cgraph_add_new_function (child_fn, true);\n \n       /* Fix the callgraph edges for child_cfun.  Those for cfun will be"}, {"sha": "65f40e69c1bfa461963a4de569fa3dc6dd505cab", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=7d776ee2520ce781f671150d8fcd2f6085362b2c", "patch": "@@ -34,6 +34,7 @@\n #include \"langhooks.h\"\n #include \"tree-pretty-print.h\"\n #include \"gimple-pretty-print.h\"\n+#include \"cfgloop.h\"\n \n \n #define PROB_VERY_UNLIKELY\t(REG_BR_PROB_BASE / 2000 - 1)\n@@ -1270,6 +1271,12 @@ tm_log_emit_save_or_restores (basic_block entry_block,\n   cond_bb = create_empty_bb (before_bb);\n   code_bb = create_empty_bb (cond_bb);\n   *end_bb = create_empty_bb (code_bb);\n+  if (current_loops && before_bb->loop_father)\n+    {\n+      add_bb_to_loop (cond_bb, before_bb->loop_father);\n+      add_bb_to_loop (code_bb, before_bb->loop_father);\n+      add_bb_to_loop (*end_bb, before_bb->loop_father);\n+    }\n   redirect_edge_pred (fallthru_edge, *end_bb);\n   fallthru_edge->flags = EDGE_FALLTHRU;\n   make_edge (before_bb, cond_bb, old_flags);\n@@ -2682,6 +2689,8 @@ expand_transaction (struct tm_region *region)\n       basic_block test_bb;\n \n       test_bb = create_empty_bb (slice_bb);\n+      if (current_loops && slice_bb->loop_father)\n+\tadd_bb_to_loop (test_bb, slice_bb->loop_father);\n       if (VEC_empty (tree, tm_log_save_addresses))\n \tregion->entry_block = test_bb;\n       gsi = gsi_last_bb (test_bb);\n@@ -2719,6 +2728,8 @@ expand_transaction (struct tm_region *region)\n       basic_block empty_bb;\n \n       region->entry_block = empty_bb = create_empty_bb (atomic_bb);\n+      if (current_loops && atomic_bb->loop_father)\n+\tadd_bb_to_loop (empty_bb, atomic_bb->loop_father);\n \n       e = FALLTHRU_EDGE (atomic_bb);\n       redirect_edge_pred (e, empty_bb);"}, {"sha": "d28783b6b98c7d43c8d67ee74cf55af15b967527", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=7d776ee2520ce781f671150d8fcd2f6085362b2c", "patch": "@@ -793,7 +793,6 @@ repair_loop_structures (void)\n #endif\n   scev_reset ();\n \n-  loops_state_clear (LOOPS_NEED_FIXUP);\n   timevar_pop (TV_REPAIR_LOOPS);\n }\n "}, {"sha": "f19dc2cdffb582f0f055825af5bff1e0126d3993", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=7d776ee2520ce781f671150d8fcd2f6085362b2c", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic-core.h\"\n #include \"gimple.h\"\n #include \"target.h\"\n+#include \"cfgloop.h\"\n \n /* In some instances a tree and a gimple need to be stored in a same table,\n    i.e. in hash tables. This is a structure to do this. */\n@@ -3041,6 +3042,8 @@ lower_resx (basic_block bb, gimple stmt, struct pointer_map_t *mnt_map)\n \t      gimple_stmt_iterator gsi2;\n \n \t      new_bb = create_empty_bb (bb);\n+\t      if (current_loops)\n+\t\tadd_bb_to_loop (new_bb, bb->loop_father);\n \t      lab = gimple_block_label (new_bb);\n \t      gsi2 = gsi_start_bb (new_bb);\n "}, {"sha": "d61b6b6a023d3704a9457682d344b3ea881c33c4", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=7d776ee2520ce781f671150d8fcd2f6085362b2c", "patch": "@@ -2093,7 +2093,7 @@ initialize_cfun (tree new_fndecl, tree callee_fndecl, gcov_type count)\n   cfun->static_chain_decl = src_cfun->static_chain_decl;\n   cfun->nonlocal_goto_save_area = src_cfun->nonlocal_goto_save_area;\n   cfun->function_end_locus = src_cfun->function_end_locus;\n-  cfun->curr_properties = src_cfun->curr_properties;\n+  cfun->curr_properties = src_cfun->curr_properties & ~PROP_loops;\n   cfun->last_verified = src_cfun->last_verified;\n   cfun->va_list_gpr_size = src_cfun->va_list_gpr_size;\n   cfun->va_list_fpr_size = src_cfun->va_list_fpr_size;"}, {"sha": "cc8b98d1ea40c59b1b05dfd82644b8a78b3b1015", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=7d776ee2520ce781f671150d8fcd2f6085362b2c", "patch": "@@ -45,6 +45,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"gimple.h\"\n \n+extern void add_bb_to_loop (basic_block, struct loop *);\n+\n /* Internal function decls */\n \n \n@@ -560,6 +562,10 @@ mf_build_check_statement_for (tree base, tree limit,\n       set_immediate_dominator (CDI_DOMINATORS, join_bb, cond_bb);\n     }\n \n+  /* Update loop info.  */\n+  if (current_loops)\n+    add_bb_to_loop (then_bb, cond_bb->loop_father);\n+\n   /* Build our local variables.  */\n   mf_elem = make_rename_temp (mf_cache_structptr_type, \"__mf_elem\");\n   mf_base = make_rename_temp (mf_uintptr_type, \"__mf_base\");"}, {"sha": "f849a54246571b307f0a84a044708de62a16582c", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=7d776ee2520ce781f671150d8fcd2f6085362b2c", "patch": "@@ -239,6 +239,7 @@ struct dump_file_info\n #define PROP_gimple_lomp\t(1 << 8)\t/* lowered OpenMP directives */\n #define PROP_cfglayout\t \t(1 << 9)\t/* cfglayout mode on RTL */\n #define PROP_gimple_lcx\t\t(1 << 10)       /* lowered complex */\n+#define PROP_loops\t\t(1 << 11)\t/* preserve loop structures */\n \n #define PROP_trees \\\n   (PROP_gimple_any | PROP_gimple_lcf | PROP_gimple_leh | PROP_gimple_lomp)"}, {"sha": "a91bf3919add63eb47c6acddf31b5e8682ba31c4", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=7d776ee2520ce781f671150d8fcd2f6085362b2c", "patch": "@@ -92,7 +92,7 @@ struct gimple_opt_pass pass_tree_loop_init =\n   0,\t\t\t\t\t/* static_pass_number */\n   TV_TREE_LOOP_INIT,\t\t\t/* tv_id */\n   PROP_cfg,\t\t\t\t/* properties_required */\n-  0,\t\t\t\t\t/* properties_provided */\n+  PROP_loops,\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   0             \t\t\t/* todo_flags_finish */"}, {"sha": "4532886ca965d4baa8fad1641e17af23a82e3715", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d776ee2520ce781f671150d8fcd2f6085362b2c/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=7d776ee2520ce781f671150d8fcd2f6085362b2c", "patch": "@@ -624,6 +624,7 @@ thread_block (basic_block bb, bool noloop_only)\n \t{\n \t  loop->header = NULL;\n \t  loop->latch = NULL;\n+\t  loops_state_set (LOOPS_NEED_FIXUP);\n \t}\n     }\n \n@@ -969,6 +970,7 @@ thread_through_loop_header (struct loop *loop, bool may_peel_loop_headers)\n \t original header.  */\n       loop->header = NULL;\n       loop->latch = NULL;\n+      loops_state_set (LOOPS_NEED_FIXUP);\n       return thread_block (header, false);\n     }\n "}]}