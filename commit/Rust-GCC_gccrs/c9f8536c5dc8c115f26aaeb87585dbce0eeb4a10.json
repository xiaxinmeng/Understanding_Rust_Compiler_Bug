{"sha": "c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlmODUzNmM1ZGM4YzExNWYyNmFhZWI4NzU4NWRiY2UwZWViNGExMA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-12-01T17:51:51Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-12-01T17:51:51Z"}, "message": "re PR c++/8332 (strlen/template interaction causes ICE)\n\n\tPR c++/8332\n\tPR c++/8493\n\t* decl.c (cxx_init_decl_processing): Use size_type_node, not\n\tc_size_type_node.\n\t* decl2.c (coerce_new_type): Likewise.\n\t* except.c (do_allocate_exception): Likewise.\n\n\t* builtin-types.def (BT_SIZE): Use size_type_node.\n\t* builtins.c (fold_builtin): Make the builtin strlen returns a\n\tsize_t, not a sizetype.\n\t* c-common.c (c_sizeof_or_alignof_type): Use size_type_node, not\n\tc_size_type_node.\n\t(c_alignof_expr): Likewise.\n\t(c_common_nodes_and_builtins): Likewise.\n\t* c-common.h (CTI_C_SIZE_TYPE): Remove.\n\t(c_size_type_node): Likewise.\n\t* c-format.c (T_ST): Use size_type_node, not c_size_type_node.\n\t* tree.h (TI_SIZE_TYPE): New enumeral.\n\t(size_type_node): Likewise.\n\n\tPR c++/8332\n\tPR c++/8493\n\t* g++.dg/template/strlen1.C: New test.\n\nFrom-SVN: r59689", "tree": {"sha": "58fa62032c3e44c9d8f282780afee759f3d7edba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58fa62032c3e44c9d8f282780afee759f3d7edba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/comments", "author": null, "committer": null, "parents": [{"sha": "335c9de73baef4d5c67c1b00dd52caff22d92f21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/335c9de73baef4d5c67c1b00dd52caff22d92f21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/335c9de73baef4d5c67c1b00dd52caff22d92f21"}], "stats": {"total": 80, "additions": 60, "deletions": 20}, "files": [{"sha": "5717dea4ee3f076ff37f97a76f8c695156d90948", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10", "patch": "@@ -1,3 +1,18 @@\n+2002-12-01  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* builtin-types.def (BT_SIZE): Use size_type_node.\n+\t* builtins.c (fold_builtin): Make the builtin strlen returns a\n+\tsize_t, not a sizetype.\n+\t* c-common.c (c_sizeof_or_alignof_type): Use size_type_node, not\n+\tc_size_type_node.\n+\t(c_alignof_expr): Likewise.\n+\t(c_common_nodes_and_builtins): Likewise.\n+\t* c-common.h (CTI_C_SIZE_TYPE): Remove.\n+\t(c_size_type_node): Likewise.\n+\t* c-format.c (T_ST): Use size_type_node, not c_size_type_node.\n+\t* tree.h (TI_SIZE_TYPE): New enumeral.\n+\t(size_type_node): Likewise.\n+\t\n 2002-11-30  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* cfg.c (dump_flow_info): Use max_reg_num () to determine the largest"}, {"sha": "23b4336c2b32c1e4ca285bf8bf61632599d4afbe", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2001 Free Software Foundation, Inc.\n+/* Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -74,7 +74,7 @@ DEF_PRIMITIVE_TYPE (BT_COMPLEX_LONG_DOUBLE, complex_long_double_type_node)\n DEF_PRIMITIVE_TYPE (BT_PTR, ptr_type_node)\n DEF_PRIMITIVE_TYPE (BT_CONST_PTR, const_ptr_type_node)\n DEF_PRIMITIVE_TYPE (BT_PTRMODE, (*lang_hooks.types.type_for_mode)(ptr_mode, 0))\n-DEF_PRIMITIVE_TYPE (BT_SIZE, c_size_type_node)\n+DEF_PRIMITIVE_TYPE (BT_SIZE, size_type_node)\n DEF_PRIMITIVE_TYPE (BT_STRING, string_type_node)\n DEF_PRIMITIVE_TYPE (BT_CONST_STRING, const_string_type_node)\n "}, {"sha": "aa0cfaf8dd19819d877483a5b24b777d032aa5e9", "filename": "gcc/builtins.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10", "patch": "@@ -4198,8 +4198,13 @@ fold_builtin (exp)\n       if (validate_arglist (arglist, POINTER_TYPE, VOID_TYPE))\n \t{\n \t  tree len = c_strlen (TREE_VALUE (arglist));\n-\t  if (len != 0)\n-\t    return len;\n+\t  if (len)\n+\t    {\n+\t      /* Convert from the internal \"sizetype\" type to \"size_t\".  */\n+\t      if (size_type_node)\n+\t\tlen = convert (size_type_node, len);\n+\t      return len;\n+\t    }\n \t}\n       break;\n "}, {"sha": "35adf760020e316b442f9d189e1f3886dd34062f", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10", "patch": "@@ -3090,7 +3090,7 @@ c_sizeof_or_alignof_type (type, op, complain)\n      TYPE_IS_SIZETYPE means that certain things (like overflow) will\n      never happen.  However, this node should really have type\n      `size_t', which is just a typedef for an ordinary integer type.  */\n-  value = fold (build1 (NOP_EXPR, c_size_type_node, value));\n+  value = fold (build1 (NOP_EXPR, size_type_node, value));\n   my_friendly_assert (!TYPE_IS_SIZETYPE (TREE_TYPE (value)), 20001021);\n   \n   return value;\n@@ -3141,7 +3141,7 @@ c_alignof_expr (expr)\n   else\n     return c_alignof (TREE_TYPE (expr));\n \n-  return fold (build1 (NOP_EXPR, c_size_type_node, t));\n+  return fold (build1 (NOP_EXPR, size_type_node, t));\n }\n \f\n /* Handle C and C++ default attributes.  */\n@@ -3284,10 +3284,10 @@ c_common_nodes_and_builtins ()\n   /* `unsigned long' is the standard type for sizeof.\n      Note that stddef.h uses `unsigned long',\n      and this must agree, even if long and int are the same size.  */\n-  c_size_type_node =\n+  size_type_node =\n     TREE_TYPE (identifier_global_value (get_identifier (SIZE_TYPE)));\n-  signed_size_type_node = c_common_signed_type (c_size_type_node);\n-  set_sizetype (c_size_type_node);\n+  signed_size_type_node = c_common_signed_type (size_type_node);\n+  set_sizetype (size_type_node);\n \n   build_common_tree_nodes_2 (flag_short_double);\n "}, {"sha": "1f59ebd7d8292df0d20af7f11ef65babc7fc6e6e", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10", "patch": "@@ -131,10 +131,6 @@ enum c_tree_index\n     CTI_SIGNED_WCHAR_TYPE,\n     CTI_UNSIGNED_WCHAR_TYPE,\n     CTI_WINT_TYPE,\n-    CTI_C_SIZE_TYPE, /* The type used for the size_t typedef and the\n-\t\t\tresult type of sizeof (an ordinary type without\n-\t\t\tTYPE_IS_SIZETYPE set, unlike the internal\n-\t\t\tsizetype).  */\n     CTI_SIGNED_SIZE_TYPE, /* For format checking only.  */\n     CTI_UNSIGNED_PTRDIFF_TYPE, /* For format checking only.  */\n     CTI_INTMAX_TYPE,\n@@ -188,7 +184,6 @@ struct c_common_identifier GTY(())\n #define signed_wchar_type_node\t\tc_global_trees[CTI_SIGNED_WCHAR_TYPE]\n #define unsigned_wchar_type_node\tc_global_trees[CTI_UNSIGNED_WCHAR_TYPE]\n #define wint_type_node\t\t\tc_global_trees[CTI_WINT_TYPE]\n-#define c_size_type_node\t\tc_global_trees[CTI_C_SIZE_TYPE]\n #define signed_size_type_node\t\tc_global_trees[CTI_SIGNED_SIZE_TYPE]\n #define unsigned_ptrdiff_type_node\tc_global_trees[CTI_UNSIGNED_PTRDIFF_TYPE]\n #define intmax_type_node\t\tc_global_trees[CTI_INTMAX_TYPE]"}, {"sha": "083e91278f86cd871f79393fd3e63da6ce4b83e0", "filename": "gcc/c-format.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10", "patch": "@@ -729,7 +729,7 @@ static const format_flag_pair strfmon_flag_pairs[] =\n #define T_WI\t&wint_type_node\n #define T94_WI\t{ STD_C94, \"wint_t\", T_WI }\n #define TEX_WI\t{ STD_EXT, \"wint_t\", T_WI }\n-#define T_ST    &c_size_type_node\n+#define T_ST    &size_type_node\n #define T99_ST\t{ STD_C99, \"size_t\", T_ST }\n #define T_SST   &signed_size_type_node\n #define T99_SST\t{ STD_C99, \"signed size_t\", T_SST }"}, {"sha": "f00d0fb0ff8ff9d6d2223d91b2e048657702ef56", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10", "patch": "@@ -1,3 +1,12 @@\n+2002-12-01  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/8332\n+\tPR c++/8493\n+\t* decl.c (cxx_init_decl_processing): Use size_type_node, not\n+\tc_size_type_node.\n+\t* decl2.c (coerce_new_type): Likewise.\n+\t* except.c (do_allocate_exception): Likewise.\n+\n 2002-11-30  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/8227"}, {"sha": "f3ffbf10712a228dd13b22e9e56672005ae0b77e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10", "patch": "@@ -6656,7 +6656,7 @@ cxx_init_decl_processing ()\n     ptr_ftype_sizetype \n       = build_function_type (ptr_type_node,\n \t\t\t     tree_cons (NULL_TREE,\n-\t\t\t\t\tc_size_type_node,\n+\t\t\t\t\tsize_type_node,\n \t\t\t\t\tvoid_list_node));\n     newtype = build_exception_variant\n       (ptr_ftype_sizetype, add_exception_specifier"}, {"sha": "61efb5832ffc2e25baeac530d4ea22e9a2acfc29", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10", "patch": "@@ -1468,17 +1468,17 @@ coerce_new_type (type)\n     e = 1, error (\"`operator new' must return type `%T'\", ptr_type_node);\n \n   if (!args || args == void_list_node\n-      || !same_type_p (TREE_VALUE (args), c_size_type_node))\n+      || !same_type_p (TREE_VALUE (args), size_type_node))\n     {\n       e = 2;\n       if (args && args != void_list_node)\n         args = TREE_CHAIN (args);\n-      pedwarn (\"`operator new' takes type `size_t' (`%T') as first parameter\", c_size_type_node);\n+      pedwarn (\"`operator new' takes type `size_t' (`%T') as first parameter\", size_type_node);\n     }\n   switch (e)\n   {\n     case 2:\n-      args = tree_cons (NULL_TREE, c_size_type_node, args);\n+      args = tree_cons (NULL_TREE, size_type_node, args);\n       /* FALLTHROUGH */\n     case 1:\n       type = build_exception_variant"}, {"sha": "848ef512f7693124d61d109bbdcff9115efb18e6", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10", "patch": "@@ -503,7 +503,7 @@ do_allocate_exception (type)\n   else\n     {\n       /* Declare void *__cxa_allocate_exception(size_t).  */\n-      tree tmp = tree_cons (NULL_TREE, c_size_type_node, void_list_node);\n+      tree tmp = tree_cons (NULL_TREE, size_type_node, void_list_node);\n       fn = push_library_fn (fn, build_function_type (ptr_type_node, tmp));\n     }\n   "}, {"sha": "bad7921ffba2d075994d0d9dd2e5a1985a58134e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10", "patch": "@@ -1,5 +1,9 @@\n 2002-11-30  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/8332\n+\tPR c++/8493\n+\t* g++.dg/template/strlen1.C: New test.\n+\n \tPR c++/8227\n \t* g++.dg/template/ctor2.C: New test.\n "}, {"sha": "ddec51d7b1e4f844fde9589ac7741406b29000a8", "filename": "gcc/testsuite/g++.dg/template/strlen1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstrlen1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstrlen1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstrlen1.C?ref=c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10", "patch": "@@ -0,0 +1,9 @@\n+template <typename A1>\n+void monk2 (A1) {}\n+\n+unsigned int strlen (const char*);\n+\n+void monk ()\n+{\n+  monk2 (strlen (\"\"));\n+}"}, {"sha": "a675851003bf1aee8647d88c9fcbf3d46a5004f8", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=c9f8536c5dc8c115f26aaeb87585dbce0eeb4a10", "patch": "@@ -1971,6 +1971,7 @@ enum tree_index\n   TI_VOID_TYPE,\n   TI_PTR_TYPE,\n   TI_CONST_PTR_TYPE,\n+  TI_SIZE_TYPE,\n   TI_PTRDIFF_TYPE,\n   TI_VA_LIST_TYPE,\n \n@@ -2048,6 +2049,8 @@ extern GTY(()) tree global_trees[TI_MAX];\n #define ptr_type_node\t\t\tglobal_trees[TI_PTR_TYPE]\n /* The C type `const void *'.  */\n #define const_ptr_type_node\t\tglobal_trees[TI_CONST_PTR_TYPE]\n+/* The C type `size_t'.  */\n+#define size_type_node                  global_trees[TI_SIZE_TYPE]\n #define ptrdiff_type_node\t\tglobal_trees[TI_PTRDIFF_TYPE]\n #define va_list_type_node\t\tglobal_trees[TI_VA_LIST_TYPE]\n "}]}