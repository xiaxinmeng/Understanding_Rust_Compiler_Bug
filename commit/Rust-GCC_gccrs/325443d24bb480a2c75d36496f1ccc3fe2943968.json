{"sha": "325443d24bb480a2c75d36496f1ccc3fe2943968", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI1NDQzZDI0YmI0ODBhMmM3NWQzNjQ5NmYxY2NjM2ZlMjk0Mzk2OA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2021-06-25T13:54:17Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-09-20T12:31:32Z"}, "message": "[Ada] Spurious link error with child unit and different Assertion modes.\n\ngcc/ada/\n\n\t* exp_util.ads (Force_Evaluation): Add formal parameter\n\tDiscr_Number, to indicate discriminant expression for which an\n\texternal name must be created.\n\t(Remove_Side_Effects): Ditto.\n\t* exp_util.adb (Force_Evaluation): Call Remove_Side_Effects with\n\tadded parameter.\n\t(Remove_Side_Effects, Build_Temporary): If Discr_Number is\n\tpositive, create an external name with suffix DISCR and the\n\tgiven discriminant number, analogous to what is done for\n\ttemporaries for array type bounds.\n\t* sem_ch3.adb (Process_Discriminant_Expressions): If the\n\tconstraint is for an object or component declaration and the\n\tcorresponding entity may be visible in another unit, invoke\n\tForce_Evaluation with the new parameter.", "tree": {"sha": "6a6dcbc0402bd4488f5132788adf75eeeacd4cba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a6dcbc0402bd4488f5132788adf75eeeacd4cba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/325443d24bb480a2c75d36496f1ccc3fe2943968", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/325443d24bb480a2c75d36496f1ccc3fe2943968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/325443d24bb480a2c75d36496f1ccc3fe2943968", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/325443d24bb480a2c75d36496f1ccc3fe2943968/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "535a706f7e6ee32aab2b6c667d4d1b807d7ef1e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/535a706f7e6ee32aab2b6c667d4d1b807d7ef1e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/535a706f7e6ee32aab2b6c667d4d1b807d7ef1e6"}], "stats": {"total": 54, "additions": 51, "deletions": 3}, "files": [{"sha": "4b7615aab87e661316d34a3567c3ad66ef02c259", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/325443d24bb480a2c75d36496f1ccc3fe2943968/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/325443d24bb480a2c75d36496f1ccc3fe2943968/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=325443d24bb480a2c75d36496f1ccc3fe2943968", "patch": "@@ -6589,6 +6589,7 @@ package body Exp_Util is\n       Related_Id    : Entity_Id := Empty;\n       Is_Low_Bound  : Boolean   := False;\n       Is_High_Bound : Boolean   := False;\n+      Discr_Number  : Int       := 0;\n       Mode          : Force_Evaluation_Mode := Relaxed)\n    is\n    begin\n@@ -6600,6 +6601,7 @@ package body Exp_Util is\n          Related_Id         => Related_Id,\n          Is_Low_Bound       => Is_Low_Bound,\n          Is_High_Bound      => Is_High_Bound,\n+         Discr_Number       => Discr_Number,\n          Check_Side_Effects =>\n            Is_Static_Expression (Exp)\n              or else Mode = Relaxed);\n@@ -11623,6 +11625,7 @@ package body Exp_Util is\n       Related_Id         : Entity_Id := Empty;\n       Is_Low_Bound       : Boolean   := False;\n       Is_High_Bound      : Boolean   := False;\n+      Discr_Number       : Int       := 0;\n       Check_Side_Effects : Boolean   := True)\n    is\n       function Build_Temporary\n@@ -11653,13 +11656,28 @@ package body Exp_Util is\n          Temp_Nam : Name_Id;\n \n       begin\n-         --  The context requires an external symbol\n+         --  The context requires an external symbol : expression is\n+         --  the bound of an array, or a discriminant value. We create\n+         --  a unique string using the related entity and an appropriate\n+         --  suffix, rather than a numeric serial number (used for internal\n+         --  entities) that may vary depending on compilation options, in\n+         --  particular on the Assertions_Enabled mode. This avoids spurious\n+         --  link errors.\n \n          if Present (Related_Id) then\n             if Is_Low_Bound then\n                Temp_Nam := New_External_Name (Chars (Related_Id), \"_FIRST\");\n-            else pragma Assert (Is_High_Bound);\n+\n+            elsif Is_High_Bound then\n                Temp_Nam := New_External_Name (Chars (Related_Id), \"_LAST\");\n+\n+            else\n+               pragma Assert (Discr_Number > 0);\n+               --  Use fully qualified name to avoid ambiguities.\n+\n+               Temp_Nam :=\n+                  New_External_Name\n+                   (Get_Qualified_Name (Related_Id), \"_DISCR\", Discr_Number);\n             end if;\n \n             Temp_Id := Make_Defining_Identifier (Loc, Temp_Nam);"}, {"sha": "56ff61f489b66baad3a550f69410e965c17e7d5d", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/325443d24bb480a2c75d36496f1ccc3fe2943968/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/325443d24bb480a2c75d36496f1ccc3fe2943968/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=325443d24bb480a2c75d36496f1ccc3fe2943968", "patch": "@@ -668,6 +668,7 @@ package Exp_Util is\n       Related_Id    : Entity_Id := Empty;\n       Is_Low_Bound  : Boolean   := False;\n       Is_High_Bound : Boolean   := False;\n+      Discr_Number  : Int       := 0;\n       Mode          : Force_Evaluation_Mode := Relaxed);\n    --  Force the evaluation of the expression right away. Similar behavior\n    --  to Remove_Side_Effects when Variable_Ref is set to TRUE. That is to\n@@ -688,6 +689,12 @@ package Exp_Util is\n    --  of the Is_xxx_Bound flags must be set. For use of these parameters see\n    --  the warning in the body of Sem_Ch3.Process_Range_Expr_In_Decl.\n \n+   --  Discr_Number is positive when the expression is a discriminant value\n+   --  in an object or component declaration. In that case Discr_Number is\n+   --  the position of the corresponding discriminant in the corresponding\n+   --  type declaration, and the name for the evaluated expression is built\n+   --  out of the Related_Id and the Discr_Number.\n+\n    function Fully_Qualified_Name_String\n      (E          : Entity_Id;\n       Append_NUL : Boolean := True) return String_Id;\n@@ -1004,6 +1011,7 @@ package Exp_Util is\n       Related_Id         : Entity_Id := Empty;\n       Is_Low_Bound       : Boolean   := False;\n       Is_High_Bound      : Boolean   := False;\n+      Discr_Number       : Int       := 0;\n       Check_Side_Effects : Boolean   := True);\n    --  Given the node for a subexpression, this function replaces the node if\n    --  necessary by an equivalent subexpression that is guaranteed to be side\n@@ -1028,6 +1036,9 @@ package Exp_Util is\n    --  of the Is_xxx_Bound flags must be set. For use of these parameters see\n    --  the warning in the body of Sem_Ch3.Process_Range_Expr_In_Decl.\n    --\n+   --  If Discr_Number is positive, the expression denotes a discrimant value\n+   --  in a constraint, the suffix DISCR is used to create the external name.\n+\n    --  The side effects are captured using one of the following methods:\n    --\n    --    1) a constant initialized with the value of the subexpression"}, {"sha": "7ab72aff06dfc848c1a0d3f63a1abc9a58224bdd", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/325443d24bb480a2c75d36496f1ccc3fe2943968/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/325443d24bb480a2c75d36496f1ccc3fe2943968/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=325443d24bb480a2c75d36496f1ccc3fe2943968", "patch": "@@ -10492,7 +10492,26 @@ package body Sem_Ch3 is\n                   Apply_Range_Check (Discr_Expr (J), Etype (Discr));\n                end if;\n \n-               Force_Evaluation (Discr_Expr (J));\n+               --  If the value of the discriminant may be visible in\n+               --  another unit or child unit, create an external name\n+               --  for it. We use the name of the object or component\n+               --  that carries the discriminated subtype. The code\n+               --  below may generate external symbols for the discriminant\n+               --  expression when not strictly needed, which is harmless.\n+\n+               if Expander_Active\n+                 and then Comes_From_Source (Def)\n+                 and then not Is_Subprogram (Current_Scope)\n+                 and then Nkind (Parent (Def)) in\n+                   N_Object_Declaration | N_Component_Declaration\n+               then\n+                  Force_Evaluation (\n+                    Discr_Expr (J),\n+                    Related_Id => Defining_Identifier (Parent (Def)),\n+                    Discr_Number => J);\n+               else\n+                  Force_Evaluation (Discr_Expr (J));\n+               end if;\n             end if;\n \n             --  Check that the designated type of an access discriminant's"}]}