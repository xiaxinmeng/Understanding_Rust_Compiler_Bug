{"sha": "a7a813f79fc27645df138a85effb09bcddcfbb3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdhODEzZjc5ZmMyNzY0NWRmMTM4YTg1ZWZmYjA5YmNkZGNmYmIzYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-30T23:22:07Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-30T23:22:07Z"}, "message": "(lwa_operand): New predicate.\n\nFrom-SVN: r8588", "tree": {"sha": "32429f276536eeb70ceccba99d1d2a694c674b59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32429f276536eeb70ceccba99d1d2a694c674b59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7a813f79fc27645df138a85effb09bcddcfbb3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a813f79fc27645df138a85effb09bcddcfbb3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7a813f79fc27645df138a85effb09bcddcfbb3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a813f79fc27645df138a85effb09bcddcfbb3a/comments", "author": null, "committer": null, "parents": [{"sha": "287f13ffddd880630093402bb388011df5a9acb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/287f13ffddd880630093402bb388011df5a9acb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/287f13ffddd880630093402bb388011df5a9acb6"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "d02a475187952cdeca75a7d589dc3b71c76c7f00", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a813f79fc27645df138a85effb09bcddcfbb3a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a813f79fc27645df138a85effb09bcddcfbb3a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a7a813f79fc27645df138a85effb09bcddcfbb3a", "patch": "@@ -468,6 +468,26 @@ reg_or_mem_operand (op, mode)\n   return gpc_reg_operand (op, mode) || memory_operand (op, mode);\n }\n \n+/* Return 1 if the operand is a general register or memory operand without\n+   pre-inc or pre_dec which produces invalid form of PowerPC lwa\n+   instruction.  */\n+\n+int\n+lwa_operand (op, mode)\n+     register rtx op;\n+     register enum machine_mode mode;\n+{\n+  rtx inner = op;\n+\n+  if (reload_completed && GET_CODE (inner) == SUBREG)\n+    inner = SUBREG_REG (inner);\n+    \n+  return gpc_reg_operand (inner, mode)\n+    || (memory_operand (inner, mode)\n+\t&& GET_CODE (XEXP (inner, 0)) != PRE_INC\n+\t&& GET_CODE (XEXP (inner, 0)) != PRE_DEC);\n+}\n+\n /* Return 1 if the operand, used inside a MEM, is a valid first argument\n    to CALL.  This is a SYMBOL_REF or a pseudo-register, which will be\n    forced to lr.  */"}]}