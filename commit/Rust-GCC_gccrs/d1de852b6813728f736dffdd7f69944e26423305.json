{"sha": "d1de852b6813728f736dffdd7f69944e26423305", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFkZTg1MmI2ODEzNzI4ZjczNmRmZmRkN2Y2OTk0NGUyNjQyMzMwNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-05-27T12:44:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-05-27T12:44:29Z"}, "message": "revert: re PR rtl-optimization/57381 (array of volatile pointers hangs gcc)\n\n2013-05-27  Richard Biener  <rguenther@suse.de>\n\n\tRevert\n\tPR middle-end/57381\n\t* fold-const.c (operand_equal_p): Compare FIELD_DECLs with\n\tOEP_CONSTANT_ADDRESS_OF retained.\n\n\tPR tree-optimization/57417\n\t* tree-ssa-sccvn.c (vn_reference_fold_indirect): Fix test\n\tfor unchanged base.\n\t(set_ssa_val_to): Compare addresses using\n\tget_addr_base_and_unit_offset.\n\n\t* gcc.dg/torture/pr57417.c: New testcase.\n\nFrom-SVN: r199356", "tree": {"sha": "3a567ce3376b229dfef2230953fb3bef521c5ba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a567ce3376b229dfef2230953fb3bef521c5ba0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1de852b6813728f736dffdd7f69944e26423305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1de852b6813728f736dffdd7f69944e26423305", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1de852b6813728f736dffdd7f69944e26423305", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1de852b6813728f736dffdd7f69944e26423305/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9606f3c9b1ba304999a045d8024fb04ab2207418", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9606f3c9b1ba304999a045d8024fb04ab2207418", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9606f3c9b1ba304999a045d8024fb04ab2207418"}], "stats": {"total": 49, "additions": 45, "deletions": 4}, "files": [{"sha": "8b7bed89d4b05ca2c8565a1429e0ba457847c594", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1de852b6813728f736dffdd7f69944e26423305/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1de852b6813728f736dffdd7f69944e26423305/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1de852b6813728f736dffdd7f69944e26423305", "patch": "@@ -1,3 +1,16 @@\n+2013-05-27  Richard Biener  <rguenther@suse.de>\n+\n+\tRevert\n+\tPR middle-end/57381\n+\t* fold-const.c (operand_equal_p): Compare FIELD_DECLs with\n+\tOEP_CONSTANT_ADDRESS_OF retained.\n+\n+\tPR tree-optimization/57417\n+\t* tree-ssa-sccvn.c (vn_reference_fold_indirect): Fix test\n+\tfor unchanged base.\n+\t(set_ssa_val_to): Compare addresses using\n+\tget_addr_base_and_unit_offset.\n+\n 2013-05-27  Joern Rennecke <joern.rennecke@embecosm.com>\n \n \tPR rtl-optimization/56833"}, {"sha": "a2b7ac183126ec6d28afcef4ecea6ca5068809a0", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1de852b6813728f736dffdd7f69944e26423305/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1de852b6813728f736dffdd7f69944e26423305/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=d1de852b6813728f736dffdd7f69944e26423305", "patch": "@@ -2664,10 +2664,10 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \tcase COMPONENT_REF:\n \t  /* Handle operand 2 the same as for ARRAY_REF.  Operand 0\n \t     may be NULL when we're called to compare MEM_EXPRs.  */\n-\t  if (!OP_SAME_WITH_NULL (0) || !OP_SAME (1))\n+\t  if (!OP_SAME_WITH_NULL (0))\n \t    return 0;\n \t  flags &= ~OEP_CONSTANT_ADDRESS_OF;\n-\t  return OP_SAME_WITH_NULL (2);\n+\t  return OP_SAME (1) && OP_SAME_WITH_NULL (2);\n \n \tcase BIT_FIELD_REF:\n \t  if (!OP_SAME (0))"}, {"sha": "7cf47c4f51410ba07dd1a3234d75fa08df68c2d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1de852b6813728f736dffdd7f69944e26423305/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1de852b6813728f736dffdd7f69944e26423305/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d1de852b6813728f736dffdd7f69944e26423305", "patch": "@@ -1,3 +1,8 @@\n+2013-05-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/57417\n+\t* gcc.dg/torture/pr57417.c: New testcase.\n+\n 2013-05-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/57396"}, {"sha": "6eac6f932b81066c3c0cbdc2e1eed5f9d7834e72", "filename": "gcc/testsuite/gcc.dg/torture/pr57417.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1de852b6813728f736dffdd7f69944e26423305/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57417.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1de852b6813728f736dffdd7f69944e26423305/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57417.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57417.c?ref=d1de852b6813728f736dffdd7f69944e26423305", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+\n+int a, b;\n+volatile int *c;\n+\n+void foo ()\n+{\n+  volatile int d[1];\n+  b = 0;\n+  for (;; a--)\n+    c = &d[b];\n+}"}, {"sha": "6886efbe3eb1f1f341e796c5c85abc58e870cec7", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1de852b6813728f736dffdd7f69944e26423305/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1de852b6813728f736dffdd7f69944e26423305/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=d1de852b6813728f736dffdd7f69944e26423305", "patch": "@@ -1145,7 +1145,7 @@ vn_reference_fold_indirect (vec<vn_reference_op_s> *ops,\n   addr_base = get_addr_base_and_unit_offset (TREE_OPERAND (op->op0, 0),\n \t\t\t\t\t     &addr_offset);\n   gcc_checking_assert (addr_base && TREE_CODE (addr_base) != MEM_REF);\n-  if (addr_base != op->op0)\n+  if (addr_base != TREE_OPERAND (op->op0, 0))\n     {\n       double_int off = tree_to_double_int (mem_op->op0);\n       off = off.sext (TYPE_PRECISION (TREE_TYPE (mem_op->op0)));\n@@ -2608,6 +2608,7 @@ static inline bool\n set_ssa_val_to (tree from, tree to)\n {\n   tree currval = SSA_VAL (from);\n+  HOST_WIDE_INT toff, coff;\n \n   if (from != to)\n     {\n@@ -2643,7 +2644,17 @@ set_ssa_val_to (tree from, tree to)\n       print_generic_expr (dump_file, to, 0);\n     }\n \n-  if (currval != to  && !operand_equal_p (currval, to, OEP_PURE_SAME))\n+  if (currval != to\n+      && !operand_equal_p (currval, to, 0)\n+      /* ???  For addresses involving volatile objects or types operand_equal_p\n+         does not reliably detect ADDR_EXPRs as equal.  We know we are only\n+\t getting invariant gimple addresses here, so can use\n+\t get_addr_base_and_unit_offset to do this comparison.  */\n+      && !(TREE_CODE (currval) == ADDR_EXPR\n+\t   && TREE_CODE (to) == ADDR_EXPR\n+\t   && (get_addr_base_and_unit_offset (TREE_OPERAND (currval, 0), &coff)\n+\t       == get_addr_base_and_unit_offset (TREE_OPERAND (to, 0), &toff))\n+\t   && coff == toff))\n     {\n       VN_INFO (from)->valnum = to;\n       if (dump_file && (dump_flags & TDF_DETAILS))"}]}