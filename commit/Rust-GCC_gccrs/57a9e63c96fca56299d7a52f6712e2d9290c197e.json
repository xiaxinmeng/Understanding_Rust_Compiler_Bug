{"sha": "57a9e63c96fca56299d7a52f6712e2d9290c197e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdhOWU2M2M5NmZjYTU2Mjk5ZDdhNTJmNjcxMmUyZDkyOTBjMTk3ZQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-08-23T13:18:37Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-08-23T13:29:49Z"}, "message": "Fortran/OpenMP: Improve duplicate errors\n\ngcc/fortran/ChangeLog:\n\n\t* openmp.c (gfc_match_dupl_check, gfc_match_dupl_memorder,\n\tgfc_match_dupl_atomic): New.\n\t(gfc_match_omp_clauses): Use them; remove duplicate\n\t'release'/'relaxed' clause matching; improve error dignostic\n\tfor 'default'.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/goacc/asyncwait-1.f95: Update dg-error.\n\t* gfortran.dg/goacc/default-2.f: Update dg-error.\n\t* gfortran.dg/goacc/enter-exit-data.f95: Update dg-error.\n\t* gfortran.dg/goacc/if.f95: Update dg-error.\n\t* gfortran.dg/goacc/parallel-kernels-clauses.f95: Update dg-error.\n\t* gfortran.dg/goacc/routine-6.f90: Update dg-error.\n\t* gfortran.dg/goacc/sie.f95: Update dg-error.\n\t* gfortran.dg/goacc/update-if_present-2.f90: Update dg-error.\n\t* gfortran.dg/gomp/cancel-2.f90: Update dg-error.\n\t* gfortran.dg/gomp/declare-simd-1.f90: Update dg-error.\n\t* gfortran.dg/gomp/error-3.f90: Update dg-error.\n\t* gfortran.dg/gomp/loop-2.f90: Update dg-error.\n\t* gfortran.dg/gomp/masked-2.f90: Update dg-error.", "tree": {"sha": "d9b0762fcf800567baa0cce7cfebc57ef8ea30e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9b0762fcf800567baa0cce7cfebc57ef8ea30e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57a9e63c96fca56299d7a52f6712e2d9290c197e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a9e63c96fca56299d7a52f6712e2d9290c197e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57a9e63c96fca56299d7a52f6712e2d9290c197e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a9e63c96fca56299d7a52f6712e2d9290c197e/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4de7e32eff0a6363defa50b052d7a30548b6552", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4de7e32eff0a6363defa50b052d7a30548b6552", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4de7e32eff0a6363defa50b052d7a30548b6552"}], "stats": {"total": 753, "additions": 466, "deletions": 287}, "files": [{"sha": "715fd32151202c893915e40dc616e1165c852d8b", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 403, "deletions": 224, "changes": 627, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=57a9e63c96fca56299d7a52f6712e2d9290c197e", "patch": "@@ -1289,6 +1289,64 @@ gfc_match_omp_clause_reduction (char pc, gfc_omp_clauses *c, bool openacc,\n   return MATCH_YES;\n }\n \n+\n+/* Match with duplicate check. Matches 'name'. If expr != NULL, it\n+   then matches '(expr)', otherwise, if open_parens is true,\n+   it matches a ' ( ' after 'name'.\n+   dupl_message requires '%qs %L' - and is used by\n+   gfc_match_dupl_memorder and gfc_match_dupl_atomic.  */\n+\n+static match\n+gfc_match_dupl_check (bool not_dupl, const char *name, bool open_parens = false,\n+\t\t      gfc_expr **expr = NULL, const char *dupl_msg = NULL)\n+{\n+  match m;\n+  locus old_loc = gfc_current_locus;\n+  if ((m = gfc_match (name)) != MATCH_YES)\n+    return m;\n+  if (!not_dupl)\n+    {\n+      if (dupl_msg)\n+\tgfc_error (dupl_msg, name, &old_loc);\n+      else\n+\tgfc_error (\"Duplicated %qs clause at %L\", name, &old_loc);\n+      return MATCH_ERROR;\n+    }\n+  if (open_parens || expr)\n+    {\n+      if (gfc_match (\" ( \") != MATCH_YES)\n+\t{\n+\t  gfc_error (\"Expected %<(%> after %qs at %C\", name);\n+\t  return MATCH_ERROR;\n+\t}\n+      if (expr)\n+\t{\n+\t  if (gfc_match (\"%e )\", expr) != MATCH_YES)\n+\t    {\n+\t      gfc_error (\"Invalid expression after %<%s(%> at %C\", name);\n+\t      return MATCH_ERROR;\n+\t    }\n+\t}\n+    }\n+  return MATCH_YES;\n+}\n+\n+static match\n+gfc_match_dupl_memorder (bool not_dupl, const char *name)\n+{\n+  return gfc_match_dupl_check (not_dupl, name, false, NULL,\n+\t\t\t       \"Duplicated memory-order clause: unexpected %s \"\n+\t\t\t       \"clause at %L\");\n+}\n+\n+static match\n+gfc_match_dupl_atomic (bool not_dupl, const char *name)\n+{\n+  return gfc_match_dupl_check (not_dupl, name, false, NULL,\n+\t\t\t       \"Duplicated atomic clause: unexpected %s \"\n+\t\t\t       \"clause at %L\");\n+}\n+\n /* Match OpenMP and OpenACC directive clauses. MASK is a bitmask of\n    clauses that are allowed for a particular directive.  */\n \n@@ -1323,6 +1381,7 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n       gfc_omp_namelist **head;\n       old_loc = gfc_current_locus;\n       char pc = gfc_peek_ascii_char ();\n+      match m;\n       switch (pc)\n \t{\n \tcase 'a':\n@@ -1352,17 +1411,23 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_MEMORDER)\n-\t      && c->memorder == OMP_MEMORDER_UNSET\n-\t      && gfc_match (\"acq_rel\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_memorder ((c->memorder\n+\t\t\t\t\t\t== OMP_MEMORDER_UNSET),\n+\t\t\t\t\t       \"acq_rel\")) != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->memorder = OMP_MEMORDER_ACQ_REL;\n \t      needs_space = true;\n \t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_MEMORDER)\n-\t      && c->memorder == OMP_MEMORDER_UNSET\n-\t      && gfc_match (\"acquire\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_memorder ((c->memorder\n+\t\t\t\t\t\t== OMP_MEMORDER_UNSET),\n+\t\t\t\t\t       \"acquire\")) != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->memorder = OMP_MEMORDER_ACQUIRE;\n \t      needs_space = true;\n \t      continue;\n@@ -1371,7 +1436,7 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t      && gfc_match (\"affinity ( \") == MATCH_YES)\n \t    {\n \t      gfc_namespace *ns_iter = NULL, *ns_curr = gfc_current_ns;\n-\t      match m = gfc_match_iterator (&ns_iter, true);\n+\t      m = gfc_match_iterator (&ns_iter, true);\n \t      if (m == MATCH_ERROR)\n \t\tbreak;\n \t      if (m == MATCH_YES && gfc_match (\" : \") != MATCH_YES)\n@@ -1398,9 +1463,11 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_AT)\n-\t      && c->at == OMP_AT_UNSET\n-\t      && gfc_match (\"at ( \") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (c->at == OMP_AT_UNSET, \"at\", true))\n+\t\t != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      if (gfc_match (\"compilation )\") == MATCH_YES)\n \t\tc->at = OMP_AT_COMPILATION;\n \t      else if (gfc_match (\"execution )\") == MATCH_YES)\n@@ -1414,11 +1481,12 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_ASYNC)\n-\t      && !c->async\n-\t      && gfc_match (\"async\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (!c->async, \"async\")) != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->async = true;\n-\t      match m = gfc_match (\" ( %e )\", &c->async_expr);\n+\t      m = gfc_match (\" ( %e )\", &c->async_expr);\n \t      if (m == MATCH_ERROR)\n \t\t{\n \t\t  gfc_current_locus = old_loc;\n@@ -1436,9 +1504,11 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_AUTO)\n-\t      && !c->par_auto\n-\t      && gfc_match (\"auto\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (!c->par_auto, \"auto\"))\n+\t\t != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->par_auto = true;\n \t      needs_space = true;\n \t      continue;\n@@ -1452,9 +1522,11 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t  break;\n \tcase 'b':\n \t  if ((mask & OMP_CLAUSE_BIND)\n-\t      && c->bind == OMP_BIND_UNSET\n-\t      && gfc_match (\"bind ( \") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (c->bind == OMP_BIND_UNSET, \"bind\",\n+\t\t\t\t\t    true)) != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      if (gfc_match (\"teams )\") == MATCH_YES)\n \t\tc->bind = OMP_BIND_TEAMS;\n \t      else if (gfc_match (\"parallel )\") == MATCH_YES)\n@@ -1472,34 +1544,36 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t  break;\n \tcase 'c':\n \t  if ((mask & OMP_CLAUSE_CAPTURE)\n-\t      && !c->capture\n-\t      && gfc_match (\"capture\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (!c->capture, \"capture\"))\n+\t\t != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->capture = true;\n \t      needs_space = true;\n \t      continue;\n \t    }\n-\t  if ((mask & OMP_CLAUSE_COLLAPSE)\n-\t      && !c->collapse)\n+\t  if (mask & OMP_CLAUSE_COLLAPSE)\n \t    {\n \t      gfc_expr *cexpr = NULL;\n-\t      match m = gfc_match (\"collapse ( %e )\", &cexpr);\n-\n-\t      if (m == MATCH_YES)\n-\t\t{\n-\t\t  int collapse;\n-\t\t  if (gfc_extract_int (cexpr, &collapse, -1))\n+\t      if ((m = gfc_match_dupl_check (!c->collapse, \"collapse\", true,\n+\t\t\t\t\t     &cexpr)) != MATCH_NO)\n+\t      {\n+\t\tint collapse;\n+\t\tif (m == MATCH_ERROR)\n+\t\t  goto error;\n+\t\tif (gfc_extract_int (cexpr, &collapse, -1))\n+\t\t  collapse = 1;\n+\t\telse if (collapse <= 0)\n+\t\t  {\n+\t\t    gfc_error_now (\"COLLAPSE clause argument not constant \"\n+\t\t\t\t   \"positive integer at %C\");\n \t\t    collapse = 1;\n-\t\t  else if (collapse <= 0)\n-\t\t    {\n-\t\t      gfc_error_now (\"COLLAPSE clause argument not\"\n-\t\t\t\t     \" constant positive integer at %C\");\n-\t\t      collapse = 1;\n-\t\t    }\n-\t\t  c->collapse = collapse;\n-\t\t  gfc_free_expr (cexpr);\n-\t\t  continue;\n-\t\t}\n+\t\t  }\n+\t\tgfc_free_expr (cexpr);\n+\t\tc->collapse = collapse;\n+\t\tcontinue;\n+\t      }\n \t    }\n \t  if ((mask & OMP_CLAUSE_COPY)\n \t      && gfc_match (\"copy ( \") == MATCH_YES\n@@ -1539,28 +1613,6 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t    continue;\n \t  break;\n \tcase 'd':\n-\t  if ((mask & OMP_CLAUSE_DEFAULT)\n-\t      && c->default_sharing == OMP_DEFAULT_UNKNOWN)\n-\t    {\n-\t      if (gfc_match (\"default ( none )\") == MATCH_YES)\n-\t\tc->default_sharing = OMP_DEFAULT_NONE;\n-\t      else if (openacc)\n-\t\t{\n-\t\t  if (gfc_match (\"default ( present )\") == MATCH_YES)\n-\t\t    c->default_sharing = OMP_DEFAULT_PRESENT;\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  if (gfc_match (\"default ( firstprivate )\") == MATCH_YES)\n-\t\t    c->default_sharing = OMP_DEFAULT_FIRSTPRIVATE;\n-\t\t  else if (gfc_match (\"default ( private )\") == MATCH_YES)\n-\t\t    c->default_sharing = OMP_DEFAULT_PRIVATE;\n-\t\t  else if (gfc_match (\"default ( shared )\") == MATCH_YES)\n-\t\t    c->default_sharing = OMP_DEFAULT_SHARED;\n-\t\t}\n-\t      if (c->default_sharing != OMP_DEFAULT_UNKNOWN)\n-\t\tcontinue;\n-\t    }\n \t  if ((mask & OMP_CLAUSE_DEFAULTMAP)\n \t      && gfc_match (\"defaultmap ( \") == MATCH_YES)\n \t    {\n@@ -1645,6 +1697,43 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\tbreak;\n \t      continue;\n \t    }\n+\t  if ((mask & OMP_CLAUSE_DEFAULT)\n+\t      && (m = gfc_match_dupl_check (c->default_sharing\n+\t\t\t\t\t    == OMP_DEFAULT_UNKNOWN, \"default\",\n+\t\t\t\t\t    true)) != MATCH_NO)\n+\t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n+\t      if (gfc_match (\"none\") == MATCH_YES)\n+\t\tc->default_sharing = OMP_DEFAULT_NONE;\n+\t      else if (openacc)\n+\t\t{\n+\t\t  if (gfc_match (\"present\") == MATCH_YES)\n+\t\t    c->default_sharing = OMP_DEFAULT_PRESENT;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  if (gfc_match (\"firstprivate\") == MATCH_YES)\n+\t\t    c->default_sharing = OMP_DEFAULT_FIRSTPRIVATE;\n+\t\t  else if (gfc_match (\"private\") == MATCH_YES)\n+\t\t    c->default_sharing = OMP_DEFAULT_PRIVATE;\n+\t\t  else if (gfc_match (\"shared\") == MATCH_YES)\n+\t\t    c->default_sharing = OMP_DEFAULT_SHARED;\n+\t\t}\n+\t      if (c->default_sharing == OMP_DEFAULT_UNKNOWN)\n+\t\t{\n+\t\t  if (openacc)\n+\t\t    gfc_error (\"Expected NONE or PRESENT in DEFAULT clause \"\n+\t\t\t       \"at %C\");\n+\t\t  else\n+\t\t    gfc_error (\"Expected NONE, FIRSTPRIVATE, PRIVATE or SHARED \"\n+\t\t\t       \"in DEFAULT clause at %C\");\n+\t\t  goto error;\n+\t\t}\n+\t      if (gfc_match (\" )\") != MATCH_YES)\n+\t\tgoto error;\n+\t      continue;\n+\t    }\n \t  if ((mask & OMP_CLAUSE_DELETE)\n \t      && gfc_match (\"delete ( \") == MATCH_YES\n \t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n@@ -1660,7 +1749,7 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\tbreak;\n \t      if (m_it == MATCH_YES && gfc_match (\" , \") != MATCH_YES)\n \t\tbreak;\n-\t      match m = MATCH_YES;\n+\t      m = MATCH_YES;\n \t      gfc_omp_depend_op depend_op = OMP_DEPEND_OUT;\n \t      if (gfc_match (\"inout\") == MATCH_YES)\n \t\tdepend_op = OMP_DEPEND_INOUT;\n@@ -1736,9 +1825,13 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_DEVICE)\n \t      && !openacc\n-\t      && c->device == NULL\n-\t      && gfc_match (\"device ( %e )\", &c->device) == MATCH_YES)\n-\t    continue;\n+\t      && (m = gfc_match_dupl_check (!c->device, \"device\", true,\n+\t\t\t\t\t    &c->device)) != MATCH_NO)\n+\t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n+\t      continue;\n+\t    }\n \t  if ((mask & OMP_CLAUSE_DEVICE)\n \t      && openacc\n \t      && gfc_match (\"device ( \") == MATCH_YES\n@@ -1779,7 +1872,7 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t      && c->dist_sched_kind == OMP_SCHED_NONE\n \t      && gfc_match (\"dist_schedule ( static\") == MATCH_YES)\n \t    {\n-\t      match m = MATCH_NO;\n+\t      m = MATCH_NO;\n \t      c->dist_sched_kind = OMP_SCHED_STATIC;\n \t      m = gfc_match (\" , %e )\", &c->dist_chunk_size);\n \t      if (m != MATCH_YES)\n@@ -1795,17 +1888,27 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t  break;\n \tcase 'f':\n \t  if ((mask & OMP_CLAUSE_FILTER)\n-\t      && c->filter == NULL\n-\t      && gfc_match (\"filter ( %e )\", &c->filter) == MATCH_YES)\n-\t    continue;\n+\t      && (m = gfc_match_dupl_check (!c->filter, \"filter\", true,\n+\t\t\t\t\t    &c->filter)) != MATCH_NO)\n+\t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n+\t      continue;\n+\t    }\n \t  if ((mask & OMP_CLAUSE_FINAL)\n-\t      && c->final_expr == NULL\n-\t      && gfc_match (\"final ( %e )\", &c->final_expr) == MATCH_YES)\n-\t    continue;\n+\t      && (m = gfc_match_dupl_check (!c->final_expr, \"final\", true,\n+\t\t\t\t\t    &c->final_expr)) != MATCH_NO)\n+\t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n+\t      continue;\n+\t    }\n \t  if ((mask & OMP_CLAUSE_FINALIZE)\n-\t      && !c->finalize\n-\t      && gfc_match (\"finalize\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (!c->finalize, \"finalize\"))\n+\t\t != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->finalize = true;\n \t      needs_space = true;\n \t      continue;\n@@ -1823,11 +1926,12 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t  break;\n \tcase 'g':\n \t  if ((mask & OMP_CLAUSE_GANG)\n-\t      && !c->gang\n-\t      && gfc_match (\"gang\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (!c->gang, \"gang\")) != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->gang = true;\n-\t      match m = match_oacc_clause_gwv (c, GOMP_DIM_GANG);\n+\t      m = match_oacc_clause_gwv (c, GOMP_DIM_GANG);\n \t      if (m == MATCH_ERROR)\n \t\t{\n \t\t  gfc_current_locus = old_loc;\n@@ -1838,9 +1942,11 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_GRAINSIZE)\n-\t      && c->grainsize == NULL\n-\t      && gfc_match (\"grainsize ( \") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (!c->grainsize, \"grainsize\", true))\n+\t\t != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      if (gfc_match (\"strict : \") == MATCH_YES)\n \t\tc->grainsize_strict = true;\n \t      if (gfc_match (\" %e )\", &c->grainsize) != MATCH_YES)\n@@ -1850,9 +1956,13 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t  break;\n \tcase 'h':\n \t  if ((mask & OMP_CLAUSE_HINT)\n-\t      && c->hint == NULL\n-\t      && gfc_match (\"hint ( %e )\", &c->hint) == MATCH_YES)\n-\t    continue;\n+\t      && (m = gfc_match_dupl_check (!c->hint, \"hint\", true, &c->hint))\n+\t\t != MATCH_NO)\n+\t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n+\t      continue;\n+\t    }\n \t  if ((mask & OMP_CLAUSE_HOST_SELF)\n \t      && gfc_match (\"host ( \") == MATCH_YES\n \t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n@@ -1861,24 +1971,36 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t    continue;\n \t  break;\n \tcase 'i':\n+\t  if ((mask & OMP_CLAUSE_IF_PRESENT)\n+\t      && (m = gfc_match_dupl_check (!c->if_present, \"if_present\"))\n+\t\t != MATCH_NO)\n+\t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n+\t      c->if_present = true;\n+\t      needs_space = true;\n+\t      continue;\n+\t    }\n \t  if ((mask & OMP_CLAUSE_IF)\n-\t      && c->if_expr == NULL\n-\t      && gfc_match (\"if ( \") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (!c->if_expr, \"if\", true))\n+\t\t != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      if (!openacc)\n \t\t{\n \t\t  /* This should match the enum gfc_omp_if_kind order.  */\n \t\t  static const char *ifs[OMP_IF_LAST] = {\n-\t\t    \" cancel : %e )\",\n-\t\t    \" parallel : %e )\",\n-\t\t    \" simd : %e )\",\n-\t\t    \" task : %e )\",\n-\t\t    \" taskloop : %e )\",\n-\t\t    \" target : %e )\",\n-\t\t    \" target data : %e )\",\n-\t\t    \" target update : %e )\",\n-\t\t    \" target enter data : %e )\",\n-\t\t    \" target exit data : %e )\" };\n+\t\t    \"cancel : %e )\",\n+\t\t    \"parallel : %e )\",\n+\t\t    \"simd : %e )\",\n+\t\t    \"task : %e )\",\n+\t\t    \"taskloop : %e )\",\n+\t\t    \"target : %e )\",\n+\t\t    \"target data : %e )\",\n+\t\t    \"target update : %e )\",\n+\t\t    \"target enter data : %e )\",\n+\t\t    \"target exit data : %e )\" };\n \t\t  int i;\n \t\t  for (i = 0; i < OMP_IF_LAST; i++)\n \t\t    if (c->if_exprs[i] == NULL\n@@ -1887,34 +2009,29 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\t  if (i < OMP_IF_LAST)\n \t\t    continue;\n \t\t}\n-\t      if (gfc_match (\"%e )\", &c->if_expr) == MATCH_YES)\n+\t      if (gfc_match (\" %e )\", &c->if_expr) == MATCH_YES)\n \t\tcontinue;\n-\t      gfc_current_locus = old_loc;\n-\t    }\n-\t  if ((mask & OMP_CLAUSE_IF_PRESENT)\n-\t      && !c->if_present\n-\t      && gfc_match (\"if_present\") == MATCH_YES)\n-\t    {\n-\t      c->if_present = true;\n-\t      needs_space = true;\n-\t      continue;\n+\t      goto error;\n \t    }\n \t  if ((mask & OMP_CLAUSE_IN_REDUCTION)\n \t      && gfc_match_omp_clause_reduction (pc, c, openacc,\n \t\t\t\t\t\t allow_derived) == MATCH_YES)\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_INBRANCH)\n-\t      && !c->inbranch\n-\t      && !c->notinbranch\n-\t      && gfc_match (\"inbranch\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (!c->inbranch && !c->notinbranch,\n+\t\t\t\t\t    \"inbranch\")) != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->inbranch = needs_space = true;\n \t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_INDEPENDENT)\n-\t      && !c->independent\n-\t      && gfc_match (\"independent\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (!c->independent, \"independent\"))\n+\t\t != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->independent = true;\n \t      needs_space = true;\n \t      continue;\n@@ -2095,16 +2212,23 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t      gfc_current_locus = old_loc;\n \t      break;\n \t    }\n-\t  if ((mask & OMP_CLAUSE_MERGEABLE) && !c->mergeable\n-\t      && gfc_match (\"mergeable\") == MATCH_YES)\n+\t  if ((mask & OMP_CLAUSE_MERGEABLE)\n+\t      && (m = gfc_match_dupl_check (!c->mergeable, \"mergeable\"))\n+\t\t != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->mergeable = needs_space = true;\n \t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_MESSAGE)\n-\t      && !c->message\n-\t      && gfc_match (\"message ( %e )\", &c->message) == MATCH_YES)\n-\t    continue;\n+\t      && (m = gfc_match_dupl_check (!c->message, \"message\", true,\n+\t\t &c->message)) != MATCH_NO)\n+\t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n+\t      continue;\n+\t    }\n \t  break;\n \tcase 'n':\n \t  if ((mask & OMP_CLAUSE_NO_CREATE)\n@@ -2114,16 +2238,19 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\t\t\t\t   allow_derived))\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_NOGROUP)\n-\t      && !c->nogroup\n-\t      && gfc_match (\"nogroup\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (!c->nogroup, \"nogroup\"))\n+\t\t != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->nogroup = needs_space = true;\n \t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_NOHOST)\n-\t      && !c->nohost\n-\t      && gfc_match (\"nohost\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (!c->nohost, \"nohost\")) != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->nohost = needs_space = true;\n \t      continue;\n \t    }\n@@ -2133,49 +2260,69 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\t\t\t\t      true) == MATCH_YES)\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_NOTINBRANCH)\n-\t      && !c->notinbranch\n-\t      && !c->inbranch\n-\t      && gfc_match (\"notinbranch\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (!c->notinbranch && !c->inbranch,\n+\t\t\t\t\t    \"notinbranch\")) != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->notinbranch = needs_space = true;\n \t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_NOWAIT)\n-\t      && !c->nowait\n-\t      && gfc_match (\"nowait\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (!c->nowait, \"nowait\")) != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->nowait = needs_space = true;\n \t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_NUM_GANGS)\n-\t      && c->num_gangs_expr == NULL\n-\t      && gfc_match (\"num_gangs ( %e )\",\n-\t\t\t    &c->num_gangs_expr) == MATCH_YES)\n-\t    continue;\n+\t      && (m = gfc_match_dupl_check (!c->num_gangs_expr, \"num_gangs\",\n+\t\t\t\t\t    true)) != MATCH_NO)\n+\t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n+\t      if (gfc_match (\" %e )\", &c->num_gangs_expr) != MATCH_YES)\n+\t\tgoto error;\n+\t      continue;\n+\t    }\n \t  if ((mask & OMP_CLAUSE_NUM_TASKS)\n-\t      && c->num_tasks == NULL\n-\t      && gfc_match (\"num_tasks ( \") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (!c->num_tasks, \"num_tasks\", true))\n+\t\t != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      if (gfc_match (\"strict : \") == MATCH_YES)\n \t\tc->num_tasks_strict = true;\n \t      if (gfc_match (\" %e )\", &c->num_tasks) != MATCH_YES)\n \t\tgoto error;\n \t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_NUM_TEAMS)\n-\t      && c->num_teams == NULL\n-\t      && gfc_match (\"num_teams ( %e )\", &c->num_teams) == MATCH_YES)\n-\t    continue;\n+\t      && (m = gfc_match_dupl_check (!c->num_teams, \"num_teams\", true,\n+\t\t\t\t\t    &c->num_teams)) != MATCH_NO)\n+\t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n+\t      continue;\n+\t    }\n \t  if ((mask & OMP_CLAUSE_NUM_THREADS)\n-\t      && c->num_threads == NULL\n-\t      && (gfc_match (\"num_threads ( %e )\", &c->num_threads)\n-\t\t  == MATCH_YES))\n-\t    continue;\n+\t      && (m = gfc_match_dupl_check (!c->num_threads, \"num_threads\", true,\n+\t\t\t\t\t    &c->num_threads)) != MATCH_NO)\n+\t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n+\t      continue;\n+\t    }\n \t  if ((mask & OMP_CLAUSE_NUM_WORKERS)\n-\t      && c->num_workers_expr == NULL\n-\t      && gfc_match (\"num_workers ( %e )\",\n-\t\t\t    &c->num_workers_expr) == MATCH_YES)\n-\t    continue;\n+\t      && (m = gfc_match_dupl_check (!c->num_workers_expr, \"num_workers\",\n+\t\t\t\t\t    true, &c->num_workers_expr))\n+\t\t != MATCH_NO)\n+\t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n+\t      continue;\n+\t    }\n \t  break;\n \tcase 'o':\n \t  if ((mask & OMP_CLAUSE_ORDER)\n@@ -2186,11 +2333,13 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_ORDERED)\n-\t      && !c->ordered\n-\t      && gfc_match (\"ordered\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (!c->ordered, \"ordered\"))\n+\t\t != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      gfc_expr *cexpr = NULL;\n-\t      match m = gfc_match (\" ( %e )\", &cexpr);\n+\t      m = gfc_match (\" ( %e )\", &cexpr);\n \n \t      c->ordered = true;\n \t      if (m == MATCH_YES)\n@@ -2262,35 +2411,46 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\t\t\t\t   OMP_MAP_ALLOC, true, allow_derived))\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_PRIORITY)\n-\t      && c->priority == NULL\n-\t      && gfc_match (\"priority ( %e )\", &c->priority) == MATCH_YES)\n-\t    continue;\n+\t      && (m = gfc_match_dupl_check (!c->priority, \"priority\", true,\n+\t\t\t\t\t    &c->priority)) != MATCH_NO)\n+\t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n+\t      continue;\n+\t    }\n \t  if ((mask & OMP_CLAUSE_PRIVATE)\n \t      && gfc_match_omp_variable_list (\"private (\",\n \t\t\t\t\t      &c->lists[OMP_LIST_PRIVATE],\n \t\t\t\t\t      true) == MATCH_YES)\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_PROC_BIND)\n-\t      && c->proc_bind == OMP_PROC_BIND_UNKNOWN)\n+\t      && (m = gfc_match_dupl_check ((c->proc_bind\n+\t\t\t\t\t     == OMP_PROC_BIND_UNKNOWN),\n+\t\t\t\t\t    \"proc_bind\", true)) != MATCH_NO)\n \t    {\n-\t      /* Primary is new and master is deprecated in OpenMP 5.1.  */\n-\t      if (gfc_match (\"proc_bind ( primary )\") == MATCH_YES)\n-\t\tc->proc_bind = OMP_PROC_BIND_MASTER;\n-\t      else if (gfc_match (\"proc_bind ( master )\") == MATCH_YES)\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n+\t      if (gfc_match (\"primary )\") == MATCH_YES)\n+\t\tc->proc_bind = OMP_PROC_BIND_PRIMARY;\n+\t      else if (gfc_match (\"master )\") == MATCH_YES)\n \t\tc->proc_bind = OMP_PROC_BIND_MASTER;\n-\t      else if (gfc_match (\"proc_bind ( spread )\") == MATCH_YES)\n+\t      else if (gfc_match (\"spread )\") == MATCH_YES)\n \t\tc->proc_bind = OMP_PROC_BIND_SPREAD;\n-\t      else if (gfc_match (\"proc_bind ( close )\") == MATCH_YES)\n+\t      else if (gfc_match (\"close )\") == MATCH_YES)\n \t\tc->proc_bind = OMP_PROC_BIND_CLOSE;\n-\t      if (c->proc_bind != OMP_PROC_BIND_UNKNOWN)\n-\t\tcontinue;\n+\t      else\n+\t\tgoto error;\n+\t      continue;\n \t    }\n \t  break;\n \tcase 'r':\n \t  if ((mask & OMP_CLAUSE_ATOMIC)\n-\t      && c->atomic_op == GFC_OMP_ATOMIC_UNSET\n-\t      && gfc_match (\"read\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_atomic ((c->atomic_op\n+\t\t\t\t\t      == GFC_OMP_ATOMIC_UNSET),\n+\t\t\t\t\t     \"read\")) != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->atomic_op = GFC_OMP_ATOMIC_READ;\n \t      needs_space = true;\n \t      continue;\n@@ -2300,47 +2460,44 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\t\t\t\t\t allow_derived) == MATCH_YES)\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_MEMORDER)\n-\t      && c->memorder == OMP_MEMORDER_UNSET\n-\t      && gfc_match (\"relaxed\") == MATCH_YES)\n-\t    {\n-\t      c->memorder = OMP_MEMORDER_RELAXED;\n-\t      needs_space = true;\n-\t      continue;\n-\t    }\n-\t  if ((mask & OMP_CLAUSE_MEMORDER)\n-\t      && c->memorder == OMP_MEMORDER_UNSET\n-\t      && gfc_match (\"release\") == MATCH_YES)\n-\t    {\n-\t      c->memorder = OMP_MEMORDER_RELEASE;\n-\t      needs_space = true;\n-\t      continue;\n-\t    }\n-\t  if ((mask & OMP_CLAUSE_MEMORDER)\n-\t      && c->memorder == OMP_MEMORDER_UNSET\n-\t      && gfc_match (\"relaxed\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_memorder ((c->memorder\n+\t\t\t\t\t\t== OMP_MEMORDER_UNSET),\n+\t\t\t\t\t       \"relaxed\")) != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->memorder = OMP_MEMORDER_RELAXED;\n \t      needs_space = true;\n \t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_MEMORDER)\n-\t      && c->memorder == OMP_MEMORDER_UNSET\n-\t      && gfc_match (\"release\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_memorder ((c->memorder\n+\t\t\t\t\t\t== OMP_MEMORDER_UNSET),\n+\t\t\t\t\t       \"release\")) != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->memorder = OMP_MEMORDER_RELEASE;\n \t      needs_space = true;\n \t      continue;\n \t    }\n \t  break;\n \tcase 's':\n \t  if ((mask & OMP_CLAUSE_SAFELEN)\n-\t      && c->safelen_expr == NULL\n-\t      && gfc_match (\"safelen ( %e )\", &c->safelen_expr) == MATCH_YES)\n-\t    continue;\n+\t      && (m = gfc_match_dupl_check (!c->safelen_expr, \"safelen\",\n+\t\t\t\t\t    true, &c->safelen_expr))\n+\t\t != MATCH_NO)\n+\t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n+\t      continue;\n+\t    }\n \t  if ((mask & OMP_CLAUSE_SCHEDULE)\n-\t      && c->sched_kind == OMP_SCHED_NONE\n-\t      && gfc_match (\"schedule ( \") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (c->sched_kind == OMP_SCHED_NONE,\n+\t\t\t\t\t    \"schedule\", true)) != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      int nmodifiers = 0;\n \t      locus old_loc2 = gfc_current_locus;\n \t      do\n@@ -2387,7 +2544,7 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\tc->sched_kind = OMP_SCHED_AUTO;\n \t      if (c->sched_kind != OMP_SCHED_NONE)\n \t\t{\n-\t\t  match m = MATCH_NO;\n+\t\t  m = MATCH_NO;\n \t\t  if (c->sched_kind != OMP_SCHED_RUNTIME\n \t\t      && c->sched_kind != OMP_SCHED_AUTO)\n \t\t    m = gfc_match (\" , %e )\", &c->chunk_size);\n@@ -2408,17 +2565,21 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\t\t\t\t   allow_derived))\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_SEQ)\n-\t      && !c->seq\n-\t      && gfc_match (\"seq\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (!c->seq, \"seq\")) != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->seq = true;\n \t      needs_space = true;\n \t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_MEMORDER)\n-\t      && c->memorder == OMP_MEMORDER_UNSET\n-\t      && gfc_match (\"seq_cst\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_memorder ((c->memorder\n+\t\t\t\t\t\t== OMP_MEMORDER_UNSET),\n+\t\t\t\t\t       \"seq_cst\")) != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->memorder = OMP_MEMORDER_SEQ_CST;\n \t      needs_space = true;\n \t      continue;\n@@ -2429,20 +2590,27 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\t\t\t\t      true) == MATCH_YES)\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_SIMDLEN)\n-\t      && c->simdlen_expr == NULL\n-\t      && gfc_match (\"simdlen ( %e )\", &c->simdlen_expr) == MATCH_YES)\n-\t    continue;\n+\t      && (m = gfc_match_dupl_check (!c->simdlen_expr, \"simdlen\", true,\n+\t\t\t\t\t    &c->simdlen_expr)) != MATCH_NO)\n+\t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n+\t      continue;\n+\t    }\n \t  if ((mask & OMP_CLAUSE_SIMD)\n-\t      && !c->simd\n-\t      && gfc_match (\"simd\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (!c->simd, \"simd\")) != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->simd = needs_space = true;\n \t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_SEVERITY)\n-\t      && c->severity == OMP_SEVERITY_UNSET\n-\t      && gfc_match (\"severity ( \") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (!c->severity, \"severity\", true))\n+\t\t != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      if (gfc_match (\"fatal )\") == MATCH_YES)\n \t\tc->severity = OMP_SEVERITY_FATAL;\n \t      else if (gfc_match (\"warning )\") == MATCH_YES)\n@@ -2462,14 +2630,20 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\t\t\t\t\t allow_derived) == MATCH_YES)\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_THREAD_LIMIT)\n-\t      && c->thread_limit == NULL\n-\t      && gfc_match (\"thread_limit ( %e )\",\n-\t\t\t    &c->thread_limit) == MATCH_YES)\n-\t    continue;\n+\t      && (m = gfc_match_dupl_check (!c->thread_limit, \"thread_limit\",\n+\t\t\t\t\t    true, &c->thread_limit))\n+\t\t != MATCH_NO)\n+\t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n+\t      continue;\n+\t    }\n \t  if ((mask & OMP_CLAUSE_THREADS)\n-\t      && !c->threads\n-\t      && gfc_match (\"threads\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (!c->threads, \"threads\"))\n+\t\t != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->threads = needs_space = true;\n \t      continue;\n \t    }\n@@ -2497,16 +2671,20 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\t\t\t\t      false) == MATCH_YES)\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_UNTIED)\n-\t      && !c->untied\n-\t      && gfc_match (\"untied\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (!c->untied, \"untied\")) != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->untied = needs_space = true;\n \t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_ATOMIC)\n-\t      && c->atomic_op == GFC_OMP_ATOMIC_UNSET\n-\t      && gfc_match (\"update\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_atomic ((c->atomic_op\n+\t\t\t\t\t      == GFC_OMP_ATOMIC_UNSET),\n+\t\t\t\t\t     \"update\")) != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->atomic_op = GFC_OMP_ATOMIC_UPDATE;\n \t      needs_space = true;\n \t      continue;\n@@ -2531,21 +2709,24 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t  /* VECTOR_LENGTH must be matched before VECTOR, because the latter\n \t     doesn't unconditionally match '('.  */\n \t  if ((mask & OMP_CLAUSE_VECTOR_LENGTH)\n-\t      && c->vector_length_expr == NULL\n-\t      && (gfc_match (\"vector_length ( %e )\", &c->vector_length_expr)\n-\t\t  == MATCH_YES))\n-\t    continue;\n+\t      && (m = gfc_match_dupl_check (!c->vector_length_expr,\n+\t\t\t\t\t    \"vector_length\", true,\n+\t\t\t\t\t    &c->vector_length_expr))\n+\t\t != MATCH_NO)\n+\t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n+\t      continue;\n+\t    }\n \t  if ((mask & OMP_CLAUSE_VECTOR)\n-\t      && !c->vector\n-\t      && gfc_match (\"vector\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (!c->vector, \"vector\")) != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->vector = true;\n-\t      match m = match_oacc_clause_gwv (c, GOMP_DIM_VECTOR);\n+\t      m = match_oacc_clause_gwv (c, GOMP_DIM_VECTOR);\n \t      if (m == MATCH_ERROR)\n-\t\t{\n-\t\t  gfc_current_locus = old_loc;\n-\t\t  break;\n-\t\t}\n+\t\tgoto error;\n \t      if (m == MATCH_NO)\n \t\tneeds_space = true;\n \t      continue;\n@@ -2555,12 +2736,9 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t  if ((mask & OMP_CLAUSE_WAIT)\n \t      && gfc_match (\"wait\") == MATCH_YES)\n \t    {\n-\t      match m = match_oacc_expr_list (\" (\", &c->wait_list, false);\n+\t      m = match_oacc_expr_list (\" (\", &c->wait_list, false);\n \t      if (m == MATCH_ERROR)\n-\t\t{\n-\t\t  gfc_current_locus = old_loc;\n-\t\t  break;\n-\t\t}\n+\t\tgoto error;\n \t      else if (m == MATCH_NO)\n \t\t{\n \t\t  gfc_expr *expr\n@@ -2578,24 +2756,25 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_WORKER)\n-\t      && !c->worker\n-\t      && gfc_match (\"worker\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_check (!c->worker, \"worker\")) != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->worker = true;\n-\t      match m = match_oacc_clause_gwv (c, GOMP_DIM_WORKER);\n+\t      m = match_oacc_clause_gwv (c, GOMP_DIM_WORKER);\n \t      if (m == MATCH_ERROR)\n-\t\t{\n-\t\t  gfc_current_locus = old_loc;\n-\t\t  break;\n-\t\t}\n+\t\tgoto error;\n \t      else if (m == MATCH_NO)\n \t\tneeds_space = true;\n \t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_ATOMIC)\n-\t      && c->atomic_op == GFC_OMP_ATOMIC_UNSET\n-\t      && gfc_match (\"write\") == MATCH_YES)\n+\t      && (m = gfc_match_dupl_atomic ((c->atomic_op\n+\t\t\t\t\t      == GFC_OMP_ATOMIC_UNSET),\n+\t\t\t\t\t     \"write\")) != MATCH_NO)\n \t    {\n+\t      if (m == MATCH_ERROR)\n+\t\tgoto error;\n \t      c->atomic_op = GFC_OMP_ATOMIC_WRITE;\n \t      needs_space = true;\n \t      continue;"}, {"sha": "f67dd9cb4e375c839733195c6b3a4494d79de4dd", "filename": "gcc/testsuite/gfortran.dg/goacc/asyncwait-1.f95", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fasyncwait-1.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fasyncwait-1.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fasyncwait-1.f95?ref=57a9e63c96fca56299d7a52f6712e2d9290c197e", "patch": "@@ -53,7 +53,7 @@ program asyncwait\n   end do\n   !$acc end parallel ! { dg-error \"Unexpected \\\\\\!\\\\\\$ACC END PARALLEL\" }\n \n-  !$acc parallel copyin (a(1:N)) copy (b(1:N)) async (*) ! { dg-error \"Invalid character in name at\" }\n+  !$acc parallel copyin (a(1:N)) copy (b(1:N)) async (*) ! { dg-error \"Invalid character in name\" }\n   do i = 1, N\n      b(i) = a(i)\n   end do"}, {"sha": "963d9780c65bef52b90d332a73d8cdf62150ff74", "filename": "gcc/testsuite/gfortran.dg/goacc/default-2.f", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fdefault-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fdefault-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fdefault-2.f?ref=57a9e63c96fca56299d7a52f6712e2d9290c197e", "patch": "@@ -3,44 +3,44 @@\n       SUBROUTINE F1\n       IMPLICIT NONE\n \n-!$ACC KERNELS DEFAULT ! { dg-error \"Failed to match clause\" }\n+!$ACC KERNELS DEFAULT ! { dg-error \"Expected '\\\\(' after 'default\" }\n !$ACC END KERNELS ! { dg-error \"Unexpected\" }\n-!$ACC PARALLEL DEFAULT ! { dg-error \"Failed to match clause\" }\n+!$ACC PARALLEL DEFAULT ! { dg-error \"Expected '\\\\(' after 'default\" }\n !$ACC END PARALLEL ! { dg-error \"Unexpected\" }\n \n-!$ACC KERNELS DEFAULT ( ! { dg-error \"Failed to match clause\" }\n+!$ACC KERNELS DEFAULT ( ! { dg-error \"Expected NONE or PRESENT in DEFAULT clause\" }\n !$ACC END KERNELS ! { dg-error \"Unexpected\" }\n-!$ACC PARALLEL DEFAULT ( ! { dg-error \"Failed to match clause\" }\n+!$ACC PARALLEL DEFAULT ( ! { dg-error \"Expected NONE or PRESENT in DEFAULT clause\" }\n !$ACC END PARALLEL ! { dg-error \"Unexpected\" }\n \n-!$ACC KERNELS DEFAULT (, ! { dg-error \"Failed to match clause\" }\n+!$ACC KERNELS DEFAULT (, ! { dg-error \"Expected NONE or PRESENT in DEFAULT clause\" }\n !$ACC END KERNELS ! { dg-error \"Unexpected\" }\n-!$ACC PARALLEL DEFAULT (, ! { dg-error \"Failed to match clause\" }\n+!$ACC PARALLEL DEFAULT (, ! { dg-error \"Expected NONE or PRESENT in DEFAULT clause\" }\n !$ACC END PARALLEL ! { dg-error \"Unexpected\" }\n \n-!$ACC KERNELS DEFAULT () ! { dg-error \"Failed to match clause\" }\n+!$ACC KERNELS DEFAULT () ! { dg-error \"Expected NONE or PRESENT in DEFAULT clause\" }\n !$ACC END KERNELS ! { dg-error \"Unexpected\" }\n-!$ACC PARALLEL DEFAULT () ! { dg-error \"Failed to match clause\" }\n+!$ACC PARALLEL DEFAULT () ! { dg-error \"Expected NONE or PRESENT in DEFAULT clause\" }\n !$ACC END PARALLEL ! { dg-error \"Unexpected\" }\n \n-!$ACC KERNELS DEFAULT (,) ! { dg-error \"Failed to match clause\" }\n+!$ACC KERNELS DEFAULT (,) ! { dg-error \"Expected NONE or PRESENT in DEFAULT clause\" }\n !$ACC END KERNELS ! { dg-error \"Unexpected\" }\n-!$ACC PARALLEL DEFAULT (,) ! { dg-error \"Failed to match clause\" }\n+!$ACC PARALLEL DEFAULT (,) ! { dg-error \"Expected NONE or PRESENT in DEFAULT clause\" }\n !$ACC END PARALLEL ! { dg-error \"Unexpected\" }\n \n-!$ACC KERNELS DEFAULT (FIRSTPRIVATE) ! { dg-error \"Failed to match clause\" }\n+!$ACC KERNELS DEFAULT (FIRSTPRIVATE) ! { dg-error \"Expected NONE or PRESENT in DEFAULT clause\" }\n !$ACC END KERNELS ! { dg-error \"Unexpected\" }\n-!$ACC PARALLEL DEFAULT (FIRSTPRIVATE) ! { dg-error \"Failed to match clause\" }\n+!$ACC PARALLEL DEFAULT (FIRSTPRIVATE) ! { dg-error \"Expected NONE or PRESENT in DEFAULT clause\" }\n !$ACC END PARALLEL ! { dg-error \"Unexpected\" }\n \n-!$ACC KERNELS DEFAULT (PRIVATE) ! { dg-error \"Failed to match clause\" }\n+!$ACC KERNELS DEFAULT (PRIVATE) ! { dg-error \"Expected NONE or PRESENT in DEFAULT clause\" }\n !$ACC END KERNELS ! { dg-error \"Unexpected\" }\n-!$ACC PARALLEL DEFAULT (PRIVATE) ! { dg-error \"Failed to match clause\" }\n+!$ACC PARALLEL DEFAULT (PRIVATE) ! { dg-error \"Expected NONE or PRESENT in DEFAULT clause\" }\n !$ACC END PARALLEL ! { dg-error \"Unexpected\" }\n \n-!$ACC KERNELS DEFAULT (SHARED) ! { dg-error \"Failed to match clause\" }\n+!$ACC KERNELS DEFAULT (SHARED) ! { dg-error \"Expected NONE or PRESENT in DEFAULT clause\" }\n !$ACC END KERNELS ! { dg-error \"Unexpected\" }\n-!$ACC PARALLEL DEFAULT (SHARED) ! { dg-error \"Failed to match clause\" }\n+!$ACC PARALLEL DEFAULT (SHARED) ! { dg-error \"Expected NONE or PRESENT in DEFAULT clause\" }\n !$ACC END PARALLEL ! { dg-error \"Unexpected\" }\n \n !$ACC KERNELS DEFAULT (NONE ! { dg-error \"Failed to match clause\" }"}, {"sha": "e71077aec01e80bdb825b60e9025727c9a8afb27", "filename": "gcc/testsuite/gfortran.dg/goacc/enter-exit-data.f95", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fenter-exit-data.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fenter-exit-data.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fenter-exit-data.f95?ref=57a9e63c96fca56299d7a52f6712e2d9290c197e", "patch": "@@ -28,7 +28,7 @@ subroutine foo (vi)\n   !$acc enter data\n   !$acc enter data if (.false.)\n   !$acc enter data if (l)\n-  !$acc enter data if (.false.) if (l) ! { dg-error \"Failed to match clause\" }\n+  !$acc enter data if (.false.) if (l) ! { dg-error \"Duplicated 'if' clause\" }\n   !$acc enter data if (i) ! { dg-error \"LOGICAL\" }\n   !$acc enter data if (1) ! { dg-error \"LOGICAL\" }\n   !$acc enter data if (a) ! { dg-error \"LOGICAL\" }\n@@ -63,7 +63,7 @@ subroutine foo (vi)\n   !$acc exit data\n   !$acc exit data if (.false.)\n   !$acc exit data if (l)\n-  !$acc exit data if (.false.) if (l) ! { dg-error \"Failed to match clause\" }\n+  !$acc exit data if (.false.) if (l) ! { dg-error \"Duplicated 'if' clause\" }\n   !$acc exit data if (i) ! { dg-error \"LOGICAL\" }\n   !$acc exit data if (1) ! { dg-error \"LOGICAL\" }\n   !$acc exit data if (a) ! { dg-error \"LOGICAL\" }"}, {"sha": "56f3711f32047e8e0fd7893c9fcfb2e39c493d04", "filename": "gcc/testsuite/gfortran.dg/goacc/if.f95", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fif.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fif.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fif.f95?ref=57a9e63c96fca56299d7a52f6712e2d9290c197e", "patch": "@@ -6,29 +6,29 @@ program test\n   logical :: x\n   integer :: i\n \n-  !$acc parallel if ! { dg-error \"Failed to match clause\" }\n+  !$acc parallel if ! { dg-error \"Expected '\\\\(' after 'if'\" }\n   !$acc parallel if () ! { dg-error \"Invalid character\" }\n   !$acc parallel if (i) ! { dg-error \"scalar LOGICAL expression\" }\n   !$acc end parallel \n   !$acc parallel if (1) ! { dg-error \"scalar LOGICAL expression\" }\n   !$acc end parallel \n   !$acc kernels if (i) ! { dg-error \"scalar LOGICAL expression\" }\n   !$acc end kernels \n-  !$acc kernels if ! { dg-error \"Failed to match clause\" }\n+  !$acc kernels if ! { dg-error \"Expected '\\\\(' after 'if'\" }\n   !$acc kernels if () ! { dg-error \"Invalid character\" }\n   !$acc kernels if (1) ! { dg-error \"scalar LOGICAL expression\" }\n   !$acc end kernels\n-  !$acc data if ! { dg-error \"Failed to match clause\" }\n+  !$acc data if ! { dg-error \"Expected '\\\\(' after 'if'\" }\n   !$acc data if () ! { dg-error \"Invalid character\" }\n   !$acc data if (i) ! { dg-error \"scalar LOGICAL expression\" }\n   !$acc end data \n   !$acc data if (1) ! { dg-error \"scalar LOGICAL expression\" }\n   !$acc end data \n \n   ! at most one if clause may appear\n-  !$acc parallel if (.false.) if (.false.) { dg-error \"Failed to match clause\" }\n-  !$acc kernels if (.false.) if (.false.) { dg-error \"Failed to match clause\" }\n-  !$acc data if (.false.) if (.false.) { dg-error \"Failed to match clause\" }\n+  !$acc parallel if (.false.) if (.false.) { dg-error \"Duplicated 'if' clause\" }\n+  !$acc kernels if (.false.) if (.false.) { dg-error \"Duplicated 'if' clause\" }\n+  !$acc data if (.false.) if (.false.) { dg-error \"Duplicated 'if' clause\" }\n \n   !$acc parallel if (x)\n   !$acc end parallel"}, {"sha": "70b84f115496dbb7198d9584482905db79dae93c", "filename": "gcc/testsuite/gfortran.dg/goacc/parallel-kernels-clauses.f95", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparallel-kernels-clauses.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparallel-kernels-clauses.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparallel-kernels-clauses.f95?ref=57a9e63c96fca56299d7a52f6712e2d9290c197e", "patch": "@@ -59,17 +59,17 @@ program test\n   !$acc parallel default ( none )\n   !$acc end parallel\n \n-  !$acc kernels default { dg-error \"Failed to match clause\" }\n-  !$acc parallel default { dg-error \"Failed to match clause\" }\n+  !$acc kernels default { dg-error \"Expected '\\\\(' after 'default'\" }\n+  !$acc parallel default { dg-error \"Expected '\\\\(' after 'default'\" }\n \n-  !$acc kernels default() { dg-error \"Failed to match clause\" }\n-  !$acc parallel default() { dg-error \"Failed to match clause\" }\n+  !$acc kernels default() { dg-error \"Expected NONE or PRESENT in DEFAULT clause\" }\n+  !$acc parallel default() { dg-error \"Expected NONE or PRESENT in DEFAULT clause\" }\n \n-  !$acc kernels default(i) { dg-error \"Failed to match clause\" }\n-  !$acc parallel default(i) { dg-error \"Failed to match clause\" }\n+  !$acc kernels default(i) { dg-error \"Expected NONE or PRESENT in DEFAULT clause\" }\n+  !$acc parallel default(i) { dg-error \"Expected NONE or PRESENT in DEFAULT clause\" }\n \n-  !$acc kernels default(1) { dg-error \"Failed to match clause\" }\n-  !$acc parallel default(1) { dg-error \"Failed to match clause\" }\n+  !$acc kernels default(1) { dg-error \"Expected NONE or PRESENT in DEFAULT clause\" }\n+  !$acc parallel default(1) { dg-error \"Expected NONE or PRESENT in DEFAULT clause\" }\n \n   ! Wait\n   !$acc kernels wait (l) ! { dg-error \"INTEGER\" }"}, {"sha": "2b22b1c0fbee2a76953fe31f2187aecb0c66f289", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-6.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-6.f90?ref=57a9e63c96fca56299d7a52f6712e2d9290c197e", "patch": "@@ -118,7 +118,7 @@ subroutine subr10 (x)\n end subroutine subr10\n \n subroutine subr20 (x)\n-  !$acc routine (subr20) nohost nohost ! { dg-error \"Failed to match clause\" }\n+  !$acc routine (subr20) nohost nohost ! { dg-error \"Duplicated 'nohost' clause\" }\n   integer, intent(inout) :: x\n   if (x < 1) then\n      x = 1"}, {"sha": "5982d5d229faccfc3927fc457bc63d737932ae24", "filename": "gcc/testsuite/gfortran.dg/goacc/sie.f95", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fsie.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fsie.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fsie.f95?ref=57a9e63c96fca56299d7a52f6712e2d9290c197e", "patch": "@@ -67,7 +67,7 @@ program test\n   !$acc end kernels\n \n \n-  !$acc parallel num_gangs ! { dg-error \"Failed to match clause\" }\n+  !$acc parallel num_gangs ! { dg-error \"Expected '\\\\(' after 'num_gangs'\" }\n \n   !$acc parallel num_gangs(3)\n   !$acc end parallel\n@@ -95,7 +95,7 @@ program test\n   !$acc parallel num_gangs(\"1\") ! { dg-error \"scalar INTEGER expression\" }\n   !$acc end parallel\n \n-  !$acc kernels num_gangs ! { dg-error \"Failed to match clause\" }\n+  !$acc kernels num_gangs ! { dg-error \"Expected '\\\\(' after 'num_gangs'\" }\n \n   !$acc kernels num_gangs(3)\n   !$acc end kernels\n@@ -124,7 +124,7 @@ program test\n   !$acc end kernels\n \n \n-  !$acc parallel num_workers ! { dg-error \"Failed to match clause\" }\n+  !$acc parallel num_workers ! { dg-error \"Expected '\\\\(' after 'num_workers'\" }\n \n   !$acc parallel num_workers(3)\n   !$acc end parallel\n@@ -141,7 +141,7 @@ program test\n   !$acc parallel num_workers(0) ! { dg-warning \"must be positive\" }\n   !$acc end parallel\n \n-  !$acc parallel num_workers() ! { dg-error \"Invalid character in name\" }\n+  !$acc parallel num_workers() ! { dg-error \"Invalid expression after 'num_workers\\\\('\" }\n \n   !$acc parallel num_workers(1.5) ! { dg-error \"scalar INTEGER expression\" }\n   !$acc end parallel\n@@ -152,7 +152,7 @@ program test\n   !$acc parallel num_workers(\"1\") ! { dg-error \"scalar INTEGER expression\" }\n   !$acc end parallel\n \n-  !$acc kernels num_workers ! { dg-error \"Failed to match clause\" }\n+  !$acc kernels num_workers ! { dg-error \"Expected '\\\\(' after 'num_workers'\" }\n \n   !$acc kernels num_workers(3)\n   !$acc end kernels\n@@ -169,7 +169,7 @@ program test\n   !$acc kernels num_workers(0) ! { dg-warning \"must be positive\" }\n   !$acc end kernels\n \n-  !$acc kernels num_workers() ! { dg-error \"Invalid character in name\" }\n+  !$acc kernels num_workers() ! { dg-error \"Invalid expression after 'num_workers\\\\('\" }\n \n   !$acc kernels num_workers(1.5) ! { dg-error \"scalar INTEGER expression\" }\n   !$acc end kernels\n@@ -181,7 +181,7 @@ program test\n   !$acc end kernels\n \n \n-  !$acc parallel vector_length ! { dg-error \"Failed to match clause\" }\n+  !$acc parallel vector_length ! { dg-error \"Expected '\\\\(' after 'vector_length'\" }\n \n   !$acc parallel vector_length(3)\n   !$acc end parallel\n@@ -198,7 +198,7 @@ program test\n   !$acc parallel vector_length(0) ! { dg-warning \"must be positive\" }\n   !$acc end parallel\n \n-  !$acc parallel vector_length() ! { dg-error \"Invalid character in name\" }\n+  !$acc parallel vector_length() ! { dg-error \"Invalid expression after 'vector_length\\\\('\" }\n \n   !$acc parallel vector_length(1.5) ! { dg-error \"scalar INTEGER expression\" }\n   !$acc end parallel\n@@ -209,7 +209,7 @@ program test\n   !$acc parallel vector_length(\"1\") ! { dg-error \"scalar INTEGER expression\" }\n   !$acc end parallel\n \n-  !$acc kernels vector_length ! { dg-error \"Failed to match clause\" }\n+  !$acc kernels vector_length ! { dg-error \"Expected '\\\\(' after 'vector_length'\" }\n \n   !$acc kernels vector_length(3)\n   !$acc end kernels\n@@ -226,7 +226,7 @@ program test\n   !$acc kernels vector_length(0) ! { dg-warning \"must be positive\" }\n   !$acc end kernels\n \n-  !$acc kernels vector_length() ! { dg-error \"Invalid character in name\" }\n+  !$acc kernels vector_length() ! { dg-error \"Invalid expression after 'vector_length\\\\('\" }\n \n   !$acc kernels vector_length(1.5) ! { dg-error \"scalar INTEGER expression\" }\n   !$acc end kernels"}, {"sha": "368e9370c60b327d970fc4234544b9f22c11178f", "filename": "gcc/testsuite/gfortran.dg/goacc/update-if_present-2.f90", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fupdate-if_present-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fupdate-if_present-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fupdate-if_present-2.f90?ref=57a9e63c96fca56299d7a52f6712e2d9290c197e", "patch": "@@ -12,10 +12,10 @@ subroutine t1\n \n   allocate (x, y, z(100))\n \n-  !$acc enter data copyin(a) if_present ! { dg-error \"Failed to match clause\" }\n-  !$acc exit data copyout(a) if_present ! { dg-error \"Failed to match clause\" }\n+  !$acc enter data copyin(a) if_present ! { dg-error \"Expected '\\\\(' after 'if'\" }\n+  !$acc exit data copyout(a) if_present ! { dg-error \"Expected '\\\\(' after 'if'\" }\n \n-  !$acc data copy(a) if_present ! { dg-error \"Failed to match clause\" }\n+  !$acc data copy(a) if_present ! { dg-error \"Expected '\\\\(' after 'if'\" }\n   !$acc end data ! { dg-error \"Unexpected ..ACC END DATA statement\" }\n \n   !$acc declare link(a) if_present ! { dg-error \"Unexpected junk after\" }\n@@ -40,12 +40,12 @@ subroutine t2\n   end do\n   !$acc end parallel\n \n-  !$acc kernels loop if_present ! { dg-error \"Failed to match clause\" }\n+  !$acc kernels loop if_present ! { dg-error \"Expected '\\\\(' after 'if'\" }\n   do b = 1, 10\n   end do\n   !$acc end kernels loop ! { dg-error \"Unexpected ..ACC END KERNELS LOOP statement\" }\n \n-  !$acc parallel loop if_present ! { dg-error \"Failed to match clause\" }\n+  !$acc parallel loop if_present ! { dg-error \"Expected '\\\\(' after 'if'\" }\n   do b = 1, 10\n   end do\n   !$acc end parallel loop   ! { dg-error \"Unexpected ..ACC END PARALLEL LOOP statement\" }"}, {"sha": "4ffbb2f209cf0294b8e651833d36699ef2e7bac3", "filename": "gcc/testsuite/gfortran.dg/gomp/cancel-2.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fcancel-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fcancel-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fcancel-2.f90?ref=57a9e63c96fca56299d7a52f6712e2d9290c197e", "patch": "@@ -5,11 +5,11 @@ subroutine foo ()\n     !$omp cancel parallel if (.true.)\n     !$omp cancel parallel if (cancel: .true.)\n \n-    !$omp cancel parallel if (.true.) if (.true.)                   ! { dg-error \"Failed to match clause\" }\n+    !$omp cancel parallel if (.true.) if (.true.)                   ! { dg-error \"Duplicated 'if' clause\" }\n     !$omp cancel parallel if (cancel: .true.) if (cancel: .true.)   ! { dg-error \"Failed to match clause\" }\n     !$omp cancel parallel if (cancel: .true.) if (.true.)           ! { dg-error \"IF clause without modifier at .1. used together with IF clauses with modifiers\" }\n     !$omp cancel parallel if (cancel: .true.) if (parallel: .true.) ! { dg-error \"IF clause modifier PARALLEL at .1. not appropriate for the current OpenMP construct\" }\n-    !$omp cancel parallel if (.true.) if (cancel: .true.)           ! { dg-error \"Failed to match clause at\" }\n+    !$omp cancel parallel if (.true.) if (cancel: .true.)           ! { dg-error \"Duplicated 'if' clause\" }\n     !$omp cancel parallel if (parallel: .true.) if (cancel: .true.) ! { dg-error \"IF clause modifier PARALLEL at .1. not appropriate for the current OpenMP construct\" }\n   !$omp end parallel\n end subroutine"}, {"sha": "04abd5128f5dcaf66888887d6b0e9d87804480bf", "filename": "gcc/testsuite/gfortran.dg/gomp/declare-simd-1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdeclare-simd-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdeclare-simd-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdeclare-simd-1.f90?ref=57a9e63c96fca56299d7a52f6712e2d9290c197e", "patch": "@@ -2,7 +2,7 @@\n \n subroutine fn1 (x)\n   integer :: x\n-!$omp declare simd (fn1) inbranch notinbranch uniform (x) ! { dg-error \"Failed to match clause\" }\n+!$omp declare simd (fn1) inbranch notinbranch uniform (x) ! { dg-error \"Duplicated 'notinbranch' clause\" }\n end subroutine fn1\n subroutine fn2 (x)\n !$omp declare simd (fn100)\t! { dg-error \"should refer to containing procedure\" }"}, {"sha": "b4d8b77a7fde53649642496ed164f879f0ee7efe", "filename": "gcc/testsuite/gfortran.dg/gomp/error-3.f90", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Ferror-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Ferror-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Ferror-3.f90?ref=57a9e63c96fca56299d7a52f6712e2d9290c197e", "patch": "@@ -1,23 +1,23 @@\n module m\n !$omp error asdf\t\t\t! { dg-error \"Failed to match clause\" }\n-!$omp error at\t\t\t\t! { dg-error \"Failed to match clause\" }\n+!$omp error at\t\t\t\t! { dg-error \"Expected '\\\\(' after 'at'\" }\n !$omp error at(\t\t\t\t! { dg-error \"Expected COMPILATION or EXECUTION in AT clause at\" }\n !$omp error at(runtime)\t\t\t! { dg-error \"Expected COMPILATION or EXECUTION in AT clause at\" }\n !$omp error at(+\t\t\t! { dg-error \"Expected COMPILATION or EXECUTION in AT clause at\" }\n !$omp error at(compilation\t\t! { dg-error \"Expected COMPILATION or EXECUTION in AT clause at\" }\n-!$omp error severity\t\t\t! { dg-error \"Failed to match clause\" }\n+!$omp error severity\t\t\t! { dg-error \"Expected '\\\\(' after 'severity'\" }\n !$omp error severity(\t\t\t! { dg-error \"Expected FATAL or WARNING in SEVERITY clause at\" }\n !$omp error severity(error)\t\t! { dg-error \"Expected FATAL or WARNING in SEVERITY clause at\" }\n !$omp error severity(-\t\t\t! { dg-error \"Expected FATAL or WARNING in SEVERITY clause at\" }\n !$omp error severity(fatal\t\t! { dg-error \"Expected FATAL or WARNING in SEVERITY clause at\" }\n-!$omp error message\t\t\t! { dg-error \"Failed to match clause\" }\n-!$omp error message(\t\t\t! { dg-error \"Invalid character in name\" }\n-!$omp error message(0\t\t\t! { dg-error \"Failed to match clause\" }\n-!$omp error message(\"foo\"\t\t! { dg-error \"Failed to match clause\" }\n+!$omp error message\t\t\t! { dg-error \"Expected '\\\\(' after 'message'\" }\n+!$omp error message(\t\t\t! { dg-error \"Invalid expression after 'message\\\\('\" }\n+!$omp error message(0\t\t\t! { dg-error \"Invalid expression after 'message\\\\('\" }\n+!$omp error message(\"foo\"\t\t! { dg-error \"Invalid expression after 'message\\\\('\" }\n \n-!$omp error at(compilation) at(compilation)\t! { dg-error \"Failed to match clause at\" }\n-!$omp error severity(fatal) severity(warning)\t! { dg-error \"Failed to match clause at\" }\n-!$omp error message(\"foo\") message(\"foo\")\t! { dg-error \"Failed to match clause at\" }\n+!$omp error at(compilation) at(compilation)\t! { dg-error \"Duplicated 'at' clause at\" }\n+!$omp error severity(fatal) severity(warning)\t! { dg-error \"Duplicated 'severity' clause at\" }\n+!$omp error message(\"foo\") message(\"foo\")\t! { dg-error \"Duplicated 'message' clause at\" }\n !$omp error message(\"foo\"),at(compilation),severity(fatal),asdf\t! { dg-error \"Failed to match clause\" }\n \n !$omp error at(execution)\t\t\t! { dg-error \"Unexpected !.OMP ERROR statement in MODULE\" }"}, {"sha": "4962683f2b0607668181b81f62ad67b1e14c69e0", "filename": "gcc/testsuite/gfortran.dg/gomp/loop-2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Floop-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Floop-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Floop-2.f90?ref=57a9e63c96fca56299d7a52f6712e2d9290c197e", "patch": "@@ -37,7 +37,7 @@ subroutine foo()\n do i = 1, 64\n end do\n \n-!$omp loop bind(teams) bind(teams)  ! { dg-error \"24: Failed to match clause\" }\n+!$omp loop bind(teams) bind(teams)  ! { dg-error \"Duplicated 'bind' clause\" }\n do i = 1, 64\n end do\n "}, {"sha": "b6eb8619a817a68481aeb227d298addb971ae0ea", "filename": "gcc/testsuite/gfortran.dg/gomp/masked-2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmasked-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a9e63c96fca56299d7a52f6712e2d9290c197e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmasked-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmasked-2.f90?ref=57a9e63c96fca56299d7a52f6712e2d9290c197e", "patch": "@@ -41,6 +41,6 @@ subroutine foo (x, y, z, a)\n end module\n \n subroutine bar\n-  !$omp masked filter (0) filter (0)  ! { dg-error \"27: Failed to match clause\" }\n+  !$omp masked filter (0) filter (0)  ! { dg-error \"Duplicated 'filter' clause\" }\n     call foobar\n end"}]}