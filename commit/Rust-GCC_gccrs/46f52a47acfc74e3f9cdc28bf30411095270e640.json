{"sha": "46f52a47acfc74e3f9cdc28bf30411095270e640", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZmNTJhNDdhY2ZjNzRlM2Y5Y2RjMjhiZjMwNDExMDk1MjcwZTY0MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-10T10:01:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-10T10:01:57Z"}, "message": "[multiple changes]\n\n2010-09-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Derive_Subprograms): An interface primitive operation\n\tthat is a renaming must be derived like any other primitive operation,\n\tthe renamed operation is not relevant to the derivation.\n\n2010-09-10  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_aux.ads: Add comment for Is_Inherently_Limited_Type.\n\t* checks.adb: Minor reformatting.\n\nFrom-SVN: r164155", "tree": {"sha": "6719a6bc87fb9426192a2ee4239fcbe3d1a71fde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6719a6bc87fb9426192a2ee4239fcbe3d1a71fde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46f52a47acfc74e3f9cdc28bf30411095270e640", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46f52a47acfc74e3f9cdc28bf30411095270e640", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46f52a47acfc74e3f9cdc28bf30411095270e640", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46f52a47acfc74e3f9cdc28bf30411095270e640/comments", "author": null, "committer": null, "parents": [{"sha": "46256d9dd0d03ebd269643039e986c54c6b1e910", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46256d9dd0d03ebd269643039e986c54c6b1e910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46256d9dd0d03ebd269643039e986c54c6b1e910"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "d6a96deac3ab3963fb35e6551bae3f5e7ee1ce2b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f52a47acfc74e3f9cdc28bf30411095270e640/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f52a47acfc74e3f9cdc28bf30411095270e640/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=46f52a47acfc74e3f9cdc28bf30411095270e640", "patch": "@@ -1,3 +1,14 @@\n+2010-09-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Derive_Subprograms): An interface primitive operation\n+\tthat is a renaming must be derived like any other primitive operation,\n+\tthe renamed operation is not relevant to the derivation.\n+\n+2010-09-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_aux.ads: Add comment for Is_Inherently_Limited_Type.\n+\t* checks.adb: Minor reformatting.\n+\n 2010-09-10  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat_ugn.texi: Add section on intent of style checking options."}, {"sha": "7448168566cb7dcc4efbad67967d106995ca446f", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f52a47acfc74e3f9cdc28bf30411095270e640/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f52a47acfc74e3f9cdc28bf30411095270e640/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=46f52a47acfc74e3f9cdc28bf30411095270e640", "patch": "@@ -4108,9 +4108,9 @@ package body Checks is\n          end if;\n       end if;\n \n-      --  If this is a boolean expression, only its elementary consituents\n-      --  need checking: if they are valid, a boolean or short-circuit\n-      --  operation with them will be valid as well.\n+      --  If this is a boolean expression, only its elementary consituents need\n+      --  checking: if they are valid, a boolean or short-circuit operation\n+      --  with them will be valid as well.\n \n       if Base_Type (Typ) = Standard_Boolean\n         and then"}, {"sha": "490f8e3d5d45cab86d81b5051f787d46f3c12ce8", "filename": "gcc/ada/sem_aux.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f52a47acfc74e3f9cdc28bf30411095270e640/gcc%2Fada%2Fsem_aux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f52a47acfc74e3f9cdc28bf30411095270e640/gcc%2Fada%2Fsem_aux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.ads?ref=46f52a47acfc74e3f9cdc28bf30411095270e640", "patch": "@@ -172,7 +172,8 @@ package Sem_Aux is\n    --  These are the types that are defined as return-by-reference types in Ada\n    --  95 (see RM95-6.5(11-16)). In Ada 2005, these are the types that require\n    --  build-in-place for function calls. Note that build-in-place is allowed\n-   --  for other types, too.\n+   --  for other types, too. This is also used for idenfitying pure procedures\n+   --  whose calls should not be eliminated (RM 10.2.1(18/2)).\n \n    function Is_Limited_Type (Ent : Entity_Id) return Boolean;\n    --  Ent is any entity. Returns true if Ent is a limited type (limited"}, {"sha": "709ad218b631680b811ec5c3fe609427234ceeb2", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f52a47acfc74e3f9cdc28bf30411095270e640/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f52a47acfc74e3f9cdc28bf30411095270e640/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=46f52a47acfc74e3f9cdc28bf30411095270e640", "patch": "@@ -12966,8 +12966,16 @@ package body Sem_Ch3 is\n             --  were not covered by the parent type. We exclude here null\n             --  interface primitives because they do not need special\n             --  management.\n+            --  We also exclude interface operations that are renamings.\n+            --  If the subprogram is an explicit renaming of an interface\n+            --  primitive, it is a regular primitive operation, and the\n+            --  presence of its alias is not relevant: it has to be derived\n+            --  like any other primitive.\n \n             elsif Present (Alias (Subp))\n+              and then\n+                Nkind (Unit_Declaration_Node (Subp))\n+                  /= N_Subprogram_Renaming_Declaration\n               and then Is_Interface (Find_Dispatching_Type (Alias_Subp))\n               and then not\n                 (Nkind (Parent (Alias_Subp)) = N_Procedure_Specification"}]}