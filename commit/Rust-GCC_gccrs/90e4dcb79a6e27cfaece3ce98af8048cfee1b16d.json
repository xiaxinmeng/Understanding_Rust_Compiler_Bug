{"sha": "90e4dcb79a6e27cfaece3ce98af8048cfee1b16d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBlNGRjYjc5YTZlMjdjZmFlY2UzY2U5OGFmODA0OGNmZWUxYjE2ZA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-09-17T15:07:09Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-09-17T15:07:09Z"}, "message": "Document -Wuninitialized for allocated objects.\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi (-Wuninitialized): Document -Wuninitialized for\n\tallocated objects.\n\t (-Wmaybe-uninitialized): Same.", "tree": {"sha": "094332dd7bfbb5c2d5f78dc1480ef293770de241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/094332dd7bfbb5c2d5f78dc1480ef293770de241"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90e4dcb79a6e27cfaece3ce98af8048cfee1b16d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90e4dcb79a6e27cfaece3ce98af8048cfee1b16d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90e4dcb79a6e27cfaece3ce98af8048cfee1b16d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90e4dcb79a6e27cfaece3ce98af8048cfee1b16d/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21fdebc519578aad72c8550b05c05813c5b28c21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21fdebc519578aad72c8550b05c05813c5b28c21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21fdebc519578aad72c8550b05c05813c5b28c21"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "8086e27aefb7008cf66f8da41661b47a37d8d4c4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e4dcb79a6e27cfaece3ce98af8048cfee1b16d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e4dcb79a6e27cfaece3ce98af8048cfee1b16d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=90e4dcb79a6e27cfaece3ce98af8048cfee1b16d", "patch": "@@ -6513,9 +6513,15 @@ either specify @option{-Wextra -Wunused} (note that @option{-Wall} implies\n @item -Wuninitialized\n @opindex Wuninitialized\n @opindex Wno-uninitialized\n-Warn if an automatic variable is used without first being initialized.\n-In C++, warn if a non-static reference or non-static @code{const}\n-member appears in a class without constructors.\n+Warn if an object with automatic or allocated storage duration is used\n+without having been initialized.  In C++, also warn if a non-static\n+reference or non-static @code{const} member appears in a class without\n+constructors.\n+\n+In addition, passing a pointer (or in C++, a reference) to an uninitialized\n+object to a @code{const}-qualified argument of a built-in function known to\n+read the object is also diagnosed by this warning.\n+(@option{-Wmaybe-uninitialized} is issued for ordinary functions.)\n \n If you want to warn about code that uses the uninitialized value of the\n variable in its own initializer, use the @option{-Winit-self} option.\n@@ -6557,11 +6563,18 @@ void store (int *i)\n @item -Wmaybe-uninitialized\n @opindex Wmaybe-uninitialized\n @opindex Wno-maybe-uninitialized\n-For an automatic (i.e.@: local) variable, if there exists a path from the\n-function entry to a use of the variable that is initialized, but there exist\n-some other paths for which the variable is not initialized, the compiler\n-emits a warning if it cannot prove the uninitialized paths are not\n-executed at run time.\n+For an object with automatic or allocated storage duration, if there exists\n+a path from the function entry to a use of the object that is initialized,\n+but there exist some other paths for which the object is not initialized,\n+the compiler emits a warning if it cannot prove the uninitialized paths\n+are not executed at run time.\n+\n+In addition, passing a pointer (or in C++, a reference) to an uninitialized\n+object to a @code{const}-qualified function argument is also diagnosed by\n+this warning.  (@option{-Wuninitialized} is issued for built-in functions\n+known to read the object.)  Annotating the function with attribute\n+@code{access (none)} indicates that the argument isn't used to access\n+the object and avoids the warning (@pxref{Common Function Attributes}).\n \n These warnings are only possible in optimizing compilation, because otherwise\n GCC does not keep track of the state of variables."}]}