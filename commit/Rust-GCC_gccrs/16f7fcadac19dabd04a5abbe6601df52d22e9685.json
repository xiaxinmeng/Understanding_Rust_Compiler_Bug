{"sha": "16f7fcadac19dabd04a5abbe6601df52d22e9685", "node_id": "C_kwDOANBUbNoAKDE2ZjdmY2FkYWMxOWRhYmQwNGE1YWJiZTY2MDFkZjUyZDIyZTk2ODU", "commit": {"author": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-04-01T12:42:58Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-05-13T20:21:43Z"}, "message": "RISC-V: Implement C[LT]Z_DEFINED_VALUE_AT_ZERO\n\nThe Zbb support has introduced ctz and clz to the backend, but some\ntransformations in GCC need to know what the value of c[lt]z at zero\nis. This affects how the optab is generated and may suppress use of\nCLZ/CTZ in tree passes.\n\nAmong other things, this is needed for the transformation of\ntable-based ctz-implementations, such as in deepsjeng, to work\n(see https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90838).\n\nPrior to this change, the test case from PR90838 would compile to\non RISC-V targets with Zbb:\n  myctz:\n\tlui\ta4,%hi(.LC0)\n\tld\ta4,%lo(.LC0)(a4)\n\tneg\ta5,a0\n\tand\ta5,a5,a0\n\tmul\ta5,a5,a4\n\tlui\ta4,%hi(.LANCHOR0)\n\taddi\ta4,a4,%lo(.LANCHOR0)\n\tsrli\ta5,a5,58\n\tsh2add\ta5,a5,a4\n\tlw\ta0,0(a5)\n\tret\n\nAfter this change, we get:\n  myctz:\n\tctz\ta0,a0\n\tandi\ta0,a0,63\n\tret\n\nTesting this with deepsjeng_r (from SPEC 2017) against QEMU, this\nshows a clear reduction in dynamic instruction count:\n - before  1961888067076\n - after   1907928279874 (2.75% reduction)\n\nThis also merges the various target-specific test-cases (for x86-64,\naarch64 and riscv) within gcc.dg/pr90838.c.\n\nThis extends the macros (i.e., effective-target keywords) used in\ntesting (lib/target-supports.exp) to reliably distinguish between RV32\nand RV64 via __riscv_xlen (i.e., the integer register bitwidth) :\ntesting for ILP32 could be misleading (as ILP32 is a valid memory\nmodel for 64bit systems).\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv.h (CLZ_DEFINED_VALUE_AT_ZERO): Implement.\n\t(CTZ_DEFINED_VALUE_AT_ZERO): Same.\n\t* doc/sourcebuild.texi: add documentation for RISC-V specific\n\ttest target keywords\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/pr90838.c: Add additional flags (dg-additional-options)\n\t  when compiling for riscv64 and subsume gcc.target/aarch64/pr90838.c\n\t  and gcc.target/i386/pr95863-2.c.\n\t* gcc.target/aarch64/pr90838.c: Removed.\n\t* gcc.target/i386/pr95863-2.c: Removed.\n\t* lib/target-supports.exp: Recognize RV32 or RV64 via XLEN\n\nSigned-off-by: Philipp Tomsich <philipp.tomsich@vrull.eu>\nSigned-off-by: Manolis Tsamis <manolis.tsamis@vrull.eu>\nCo-authored-by: Manolis Tsamis <manolis.tsamis@vrull.eu>", "tree": {"sha": "4293994520f3d0eca4f4f8d018dc25f85735250f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4293994520f3d0eca4f4f8d018dc25f85735250f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16f7fcadac19dabd04a5abbe6601df52d22e9685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16f7fcadac19dabd04a5abbe6601df52d22e9685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16f7fcadac19dabd04a5abbe6601df52d22e9685", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16f7fcadac19dabd04a5abbe6601df52d22e9685/comments", "author": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f40ac326a1f347a826636bc392a4db185b78b95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f40ac326a1f347a826636bc392a4db185b78b95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f40ac326a1f347a826636bc392a4db185b78b95"}], "stats": {"total": 163, "additions": 72, "deletions": 91}, "files": [{"sha": "b191606edb4bc467e1e94e2ba1cdf506ba670886", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f7fcadac19dabd04a5abbe6601df52d22e9685/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f7fcadac19dabd04a5abbe6601df52d22e9685/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=16f7fcadac19dabd04a5abbe6601df52d22e9685", "patch": "@@ -1004,4 +1004,9 @@ extern void riscv_remove_unneeded_save_restore_calls (void);\n \n #define HARD_REGNO_RENAME_OK(FROM, TO) riscv_hard_regno_rename_ok (FROM, TO)\n \n+#define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) \\\n+  ((VALUE) = GET_MODE_UNIT_BITSIZE (MODE), 2)\n+#define CTZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) \\\n+  ((VALUE) = GET_MODE_UNIT_BITSIZE (MODE), 2)\n+\n #endif /* ! GCC_RISCV_H */"}, {"sha": "71c04841df2b176d0fa85d6301c5bb3ae5c0bb4e", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f7fcadac19dabd04a5abbe6601df52d22e9685/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f7fcadac19dabd04a5abbe6601df52d22e9685/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=16f7fcadac19dabd04a5abbe6601df52d22e9685", "patch": "@@ -2420,6 +2420,18 @@ PowerPC target pre-defines macro _ARCH_PWR9 which means the @code{-mcpu}\n setting is Power9 or later.\n @end table\n \n+@subsection RISC-V specific attributes\n+\n+@table @code\n+\n+@item rv32\n+Test system has an integer register width of 32 bits.\n+\n+@item rv64\n+Test system has an integer register width of 64 bits.\n+\n+@end table\n+\n @subsubsection Other hardware attributes\n \n @c Please keep this table sorted alphabetically."}, {"sha": "7502b846346f1eb95d64dce8a2852edf0d528924", "filename": "gcc/testsuite/gcc.dg/pr90838.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f7fcadac19dabd04a5abbe6601df52d22e9685/gcc%2Ftestsuite%2Fgcc.dg%2Fpr90838.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f7fcadac19dabd04a5abbe6601df52d22e9685/gcc%2Ftestsuite%2Fgcc.dg%2Fpr90838.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr90838.c?ref=16f7fcadac19dabd04a5abbe6601df52d22e9685", "patch": "@@ -1,5 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fdump-tree-forwprop2-details\" } */\n+/* { dg-additional-options \"-mbmi\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } */\n+/* { dg-additional-options \"-march=rv64gc_zbb\" { target { rv64 } } } */\n+/* { dg-additional-options \"-march=rv32gc_zbb\" { target { rv32 } } } */\n \n int ctz1 (unsigned x)\n {\n@@ -56,4 +59,26 @@ int ctz4 (unsigned long x)\n   return table[(lsb * magic) >> 58];\n }\n \n+/* { dg-final { scan-tree-dump-times {= \\.CTZ} 4 \"forwprop2\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-assembler-times \"tzcntq\\t\" 1 { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-assembler-times \"tzcntl\\t\" 3 { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-assembler-times \"andl\\t\" 2 { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-assembler-not \"negq\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-assembler-not \"imulq\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-assembler-not \"shrq\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+\n /* { dg-final { scan-tree-dump-times {= \\.CTZ} 4 \"forwprop2\" { target aarch64*-*-* } } } */\n+/* { dg-final { scan-assembler-times \"clz\\t\" 4 { target aarch64*-*-* } } } */\n+/* { dg-final { scan-assembler-times \"and\\t\" 2 { target aarch64*-*-* } } } */\n+/* { dg-final { scan-assembler-not \"cmp\\t.*0\" { target aarch64*-*-* } } } */\n+\n+/* { dg-final { scan-tree-dump-times {= \\.CTZ} 4 \"forwprop2\" { target { rv64 } } } } */\n+/* { dg-final { scan-assembler-times \"ctz\\t\"  1 { target { rv64 } } } } */\n+/* { dg-final { scan-assembler-times \"ctzw\\t\" 3 { target { rv64 } } } } */\n+/* { dg-final { scan-assembler-times \"andi\\t\" 2 { target { rv64 } } } } */\n+/* { dg-final { scan-assembler-not \"mul\" { target { rv64 } } } } */\n+\n+/* { dg-final { scan-tree-dump-times {= \\.CTZ} 3 \"forwprop2\" { target { rv32 } } } } */\n+/* { dg-final { scan-assembler-times \"ctz\\t\" 3 { target { rv32 } } } } */\n+/* { dg-final { scan-assembler-times \"andi\\t\" 1 { target { rv32 } } } } */\n+/* { dg-final { scan-assembler-times \"mul\\t\" 1 { target { rv32 } } } } */"}, {"sha": "e1e19ac6a618dc35e8c1bc2d7ae25f5ed24b9845", "filename": "gcc/testsuite/gcc.target/aarch64/pr90838.c", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f40ac326a1f347a826636bc392a4db185b78b95/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr90838.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f40ac326a1f347a826636bc392a4db185b78b95/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr90838.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr90838.c?ref=7f40ac326a1f347a826636bc392a4db185b78b95", "patch": "@@ -1,64 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2\" } */\n-\n-int ctz1 (unsigned x)\n-{\n-  static const char table[32] =\n-    {\n-      0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8,\n-      31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9\n-    };\n-\n-  return table[((unsigned)((x & -x) * 0x077CB531U)) >> 27];\n-}\n-\n-int ctz2 (unsigned x)\n-{\n-#define u 0\n-  static short table[64] =\n-    {\n-      32, 0, 1,12, 2, 6, u,13, 3, u, 7, u, u, u, u,14,\n-      10, 4, u, u, 8, u, u,25, u, u, u, u, u,21,27,15,\n-      31,11, 5, u, u, u, u, u, 9, u, u,24, u, u,20,26,\n-      30, u, u, u, u,23, u,19,29, u,22,18,28,17,16, u\n-    };\n-\n-  x = (x & -x) * 0x0450FBAF;\n-  return table[x >> 26];\n-}\n-\n-int ctz3 (unsigned x)\n-{\n-  static int table[32] =\n-    {\n-      0, 1, 2,24, 3,19, 6,25, 22, 4,20,10,16, 7,12,26,\n-      31,23,18, 5,21, 9,15,11,30,17, 8,14,29,13,28,27\n-    };\n-\n-  if (x == 0) return 32;\n-  x = (x & -x) * 0x04D7651F;\n-  return table[x >> 27];\n-}\n-\n-static const unsigned long long magic = 0x03f08c5392f756cdULL;\n-\n-static const char table[64] = {\n-     0,  1, 12,  2, 13, 22, 17,  3,\n-    14, 33, 23, 36, 18, 58, 28,  4,\n-    62, 15, 34, 26, 24, 48, 50, 37,\n-    19, 55, 59, 52, 29, 44, 39,  5,\n-    63, 11, 21, 16, 32, 35, 57, 27,\n-    61, 25, 47, 49, 54, 51, 43, 38,\n-    10, 20, 31, 56, 60, 46, 53, 42,\n-     9, 30, 45, 41,  8, 40,  7,  6,\n-};\n-\n-int ctz4 (unsigned long x)\n-{\n-  unsigned long lsb = x & -x;\n-  return table[(lsb * magic) >> 58];\n-}\n-\n-/* { dg-final { scan-assembler-times \"clz\\t\" 4 } } */\n-/* { dg-final { scan-assembler-times \"and\\t\" 2 } } */\n-/* { dg-final { scan-assembler-not \"cmp\\t.*0\" } } */"}, {"sha": "cb56dfc6d9489dbff2492afa6dd23b70f5d7d2e7", "filename": "gcc/testsuite/gcc.target/i386/pr95863-2.c", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f40ac326a1f347a826636bc392a4db185b78b95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95863-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f40ac326a1f347a826636bc392a4db185b78b95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95863-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95863-2.c?ref=7f40ac326a1f347a826636bc392a4db185b78b95", "patch": "@@ -1,27 +0,0 @@\n-/* { dg-do compile { target { ! ia32 } } } */\n-/* { dg-options \"-O -mbmi\" } */\n-\n-static const unsigned long long magic = 0x03f08c5392f756cdULL;\n-\n-static const char table[64] = {\n-     0,  1, 12,  2, 13, 22, 17,  3,\n-    14, 33, 23, 36, 18, 58, 28,  4,\n-    62, 15, 34, 26, 24, 48, 50, 37,\n-    19, 55, 59, 52, 29, 44, 39,  5,\n-    63, 11, 21, 16, 32, 35, 57, 27,\n-    61, 25, 47, 49, 54, 51, 43, 38,\n-    10, 20, 31, 56, 60, 46, 53, 42,\n-     9, 30, 45, 41,  8, 40,  7,  6,\n-};\n-\n-int ctz4 (unsigned long long x)\n-{\n-  unsigned long long lsb = x & -x;\n-  return table[(lsb * magic) >> 58];\n-}\n-\n-/* { dg-final { scan-assembler-times \"tzcntq\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"andl\\t\" 1 } } */\n-/* { dg-final { scan-assembler-not \"negq\" } } */\n-/* { dg-final { scan-assembler-not \"imulq\" } } */\n-/* { dg-final { scan-assembler-not \"shrq\" } } */"}, {"sha": "244fe2306f457f46f860a1e919dbbddeea8d6757", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f7fcadac19dabd04a5abbe6601df52d22e9685/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f7fcadac19dabd04a5abbe6601df52d22e9685/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=16f7fcadac19dabd04a5abbe6601df52d22e9685", "patch": "@@ -1689,6 +1689,36 @@ proc check_linker_plugin_available { } {\n   } \"-flto -fuse-linker-plugin\"]\n }\n \n+# Return 1 if the target is RV32, 0 otherwise.  Cache the result.\n+\n+proc check_effective_target_rv32 { } {\n+    # Check that we are compiling for RV32 by checking the xlen size.\n+    return [check_no_compiler_messages riscv_rv32 assembly {\n+       #if !defined(__riscv_xlen)\n+       #error \"__riscv_xlen not defined!\"\n+       #else\n+       #if __riscv_xlen != 32\n+       #error \"Not RV32\"\n+       #endif\n+       #endif\n+    }]\n+}\n+\n+# Return 1 if the target is RV64, 0 otherwise.  Cache the result.\n+\n+proc check_effective_target_rv64 { } {\n+    # Check that we are compiling for RV64 by checking the xlen size.\n+    return [check_no_compiler_messages riscv_rv64 assembly {\n+       #if !defined(__riscv_xlen)\n+       #error \"__riscv_xlen not defined!\"\n+       #else\n+       #if __riscv_xlen != 64\n+       #error \"Not RV64\"\n+       #endif\n+       #endif\n+    }]\n+}\n+\n # Return 1 if the target OS supports running SSE executables, 0\n # otherwise.  Cache the result.\n "}]}