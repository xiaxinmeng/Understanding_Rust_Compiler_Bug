{"sha": "6372b05e5b14f27ddce11c28654956c1ad715dac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM3MmIwNWU1YjE0ZjI3ZGRjZTExYzI4NjU0OTU2YzFhZDcxNWRhYw==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-02-10T11:39:39Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-04-28T20:11:58Z"}, "message": "aarch64: Use RTL builtins for polynomial vsli[q]_n intrinsics\n\nRewrite vsli[q]_n_p* Neon intrinsics to use RTL builtins rather than\ninline assembly code, allowing for better scheduling and\noptimization.\n\ngcc/ChangeLog:\n\n2021-02-10  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Use VALLP mode\n\titerator for polynomial ssli_n builtin generator macro.\n\t* config/aarch64/arm_neon.h (vsli_n_p8): Use RTL builtin\n\tinstead of inline asm.\n\t(vsli_n_p16): Likewise.\n\t(vsliq_n_p8): Likewise.\n\t(vsliq_n_p16): Likewise.\n\t* config/aarch64/iterators.md: Define VALLP mode iterator.", "tree": {"sha": "d7df4b289a8c77d137f3162c1ee4a9258a6ac6b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7df4b289a8c77d137f3162c1ee4a9258a6ac6b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6372b05e5b14f27ddce11c28654956c1ad715dac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6372b05e5b14f27ddce11c28654956c1ad715dac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6372b05e5b14f27ddce11c28654956c1ad715dac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6372b05e5b14f27ddce11c28654956c1ad715dac/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e7f6e03955244827a513777e4845c98e130319d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e7f6e03955244827a513777e4845c98e130319d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e7f6e03955244827a513777e4845c98e130319d"}], "stats": {"total": 77, "additions": 28, "deletions": 49}, "files": [{"sha": "534979133f449bd8c5ceba3ae2f06287ee4cf572", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6372b05e5b14f27ddce11c28654956c1ad715dac/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6372b05e5b14f27ddce11c28654956c1ad715dac/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=6372b05e5b14f27ddce11c28654956c1ad715dac", "patch": "@@ -436,7 +436,7 @@\n   BUILTIN_VSDQ_I_DI (SHIFTINSERT, ssri_n, 0, NONE)\n   BUILTIN_VSDQ_I_DI (USHIFTACC, usri_n, 0, NONE)\n   BUILTIN_VSDQ_I_DI (SHIFTINSERT, ssli_n, 0, NONE)\n-  VAR2 (SHIFTINSERTP, ssli_n, 0, NONE, di, v2di)\n+  BUILTIN_VALLP (SHIFTINSERTP, ssli_n, 0, NONE)\n   BUILTIN_VSDQ_I_DI (USHIFTACC, usli_n, 0, NONE)\n   /* Implemented by aarch64_<sur>qshl<u>_n<mode>.  */\n   BUILTIN_VSDQ_I (SHIFTIMM_USS, sqshlu_n, 0, NONE)"}, {"sha": "38a3a3ff01e1567d9a7726c6fe4ed856299bbce4", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 24, "deletions": 48, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6372b05e5b14f27ddce11c28654956c1ad715dac/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6372b05e5b14f27ddce11c28654956c1ad715dac/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=6372b05e5b14f27ddce11c28654956c1ad715dac", "patch": "@@ -9050,57 +9050,33 @@ vshrn_high_n_u64 (uint32x2_t __a, uint64x2_t __b, const int __c)\n     __builtin_aarch64_shrn2v2di ((int32x2_t) __a, (int64x2_t) __b, __c);\n }\n \n-#define vsli_n_p8(a, b, c)                                              \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       poly8x8_t b_ = (b);                                              \\\n-       poly8x8_t a_ = (a);                                              \\\n-       poly8x8_t result;                                                \\\n-       __asm__ (\"sli %0.8b,%2.8b,%3\"                                    \\\n-                : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline poly8x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsli_n_p8 (poly8x8_t __a, poly8x8_t __b, const int __c)\n+{\n+  return __builtin_aarch64_ssli_nv8qi_ppps (__a, __b, __c);\n+}\n \n-#define vsli_n_p16(a, b, c)                                             \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       poly16x4_t b_ = (b);                                             \\\n-       poly16x4_t a_ = (a);                                             \\\n-       poly16x4_t result;                                               \\\n-       __asm__ (\"sli %0.4h,%2.4h,%3\"                                    \\\n-                : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline poly16x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsli_n_p16 (poly16x4_t __a, poly16x4_t __b, const int __c)\n+{\n+  return __builtin_aarch64_ssli_nv4hi_ppps (__a, __b, __c);\n+}\n \n-#define vsliq_n_p8(a, b, c)                                             \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       poly8x16_t b_ = (b);                                             \\\n-       poly8x16_t a_ = (a);                                             \\\n-       poly8x16_t result;                                               \\\n-       __asm__ (\"sli %0.16b,%2.16b,%3\"                                  \\\n-                : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline poly8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsliq_n_p8 (poly8x16_t __a, poly8x16_t __b, const int __c)\n+{\n+  return __builtin_aarch64_ssli_nv16qi_ppps (__a, __b, __c);\n+}\n \n-#define vsliq_n_p16(a, b, c)                                            \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       poly16x8_t b_ = (b);                                             \\\n-       poly16x8_t a_ = (a);                                             \\\n-       poly16x8_t result;                                               \\\n-       __asm__ (\"sli %0.8h,%2.8h,%3\"                                    \\\n-                : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline poly16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsliq_n_p16 (poly16x8_t __a, poly16x8_t __b, const int __c)\n+{\n+  return __builtin_aarch64_ssli_nv8hi_ppps (__a, __b, __c);\n+}\n \n #define vsri_n_p8(a, b, c)                                              \\\n   __extension__                                                         \\"}, {"sha": "fe2c51cebf13d6bff96d3a41e7b331560068f64d", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6372b05e5b14f27ddce11c28654956c1ad715dac/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6372b05e5b14f27ddce11c28654956c1ad715dac/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=6372b05e5b14f27ddce11c28654956c1ad715dac", "patch": "@@ -203,6 +203,9 @@\n (define_mode_iterator VALLDIF [V8QI V16QI V4HI V8HI V2SI V4SI V4BF V8BF\n \t\t\t       V2DI V4HF V8HF V2SF V4SF V2DF DI DF])\n \n+;; All Advanced SIMD polynomial modes and DI.\n+(define_mode_iterator VALLP [V8QI V16QI V4HI V8HI V2DI DI])\n+\n ;; Advanced SIMD modes for Integer reduction across lanes.\n (define_mode_iterator VDQV [V8QI V16QI V4HI V8HI V4SI V2DI])\n "}]}