{"sha": "17df585a3a6a852c71883cc2ff40e111a6875149", "node_id": "C_kwDOANBUbNoAKDE3ZGY1ODVhM2E2YTg1MmM3MTg4M2NjMmZmNDBlMTExYTY4NzUxNDk", "commit": {"author": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2022-01-14T03:26:15Z"}, "committer": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2022-01-14T06:21:44Z"}, "message": "tree-optimization/104009: Conservative underflow estimate in object size\n\nRestrict negative offset computation only to dynamic object sizes, where\nsize expressions are accurate and not a maximum/minimum estimate and in\ncases where negative offsets definitely mean an underflow, e.g. in\nMEM_REF of the whole object with negative ofset in addr_object_size.\n\nThis ends up missing some cases where __builtin_object_size could have\ncome up with more precise results, so tests have been adjusted to\nreflect that.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/104009\n\t* tree-object-size.c (compute_builtin_object_size): Bail out on\n\tnegative offset.\n\t(plus_stmt_object_size): Return maximum of wholesize and minimum\n\tof 0 for negative offset.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/104009\n\t* gcc.dg/builtin-object-size-1.c (test10): New test.\n\t* gcc.dg/builtin-object-size-3.c (test10): Likewise.\n\t(test9): Expect zero size for negative offsets.\n\t* gcc.dg/builtin-object-size-4.c (test8): Likewise.\n\t* gcc.dg/builtin-object-size-5.c (test7): Drop test for\n\t__builtin_object_size.\n\nSigned-off-by: Siddhesh Poyarekar <siddhesh@gotplt.org>", "tree": {"sha": "99894075fe2ee96d9f4bc047c4f994bdfd859a86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99894075fe2ee96d9f4bc047c4f994bdfd859a86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17df585a3a6a852c71883cc2ff40e111a6875149", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17df585a3a6a852c71883cc2ff40e111a6875149", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17df585a3a6a852c71883cc2ff40e111a6875149", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17df585a3a6a852c71883cc2ff40e111a6875149/comments", "author": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b77e3b4e4589e56c01511fabdbaadb029cd47f5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b77e3b4e4589e56c01511fabdbaadb029cd47f5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b77e3b4e4589e56c01511fabdbaadb029cd47f5c"}], "stats": {"total": 84, "additions": 75, "deletions": 9}, "files": [{"sha": "b772e2da9b94924cf162363bb9aa190a05ee3652", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-1.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17df585a3a6a852c71883cc2ff40e111a6875149/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17df585a3a6a852c71883cc2ff40e111a6875149/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-1.c?ref=17df585a3a6a852c71883cc2ff40e111a6875149", "patch": "@@ -603,6 +603,32 @@ test9 (unsigned cond)\n #endif\n }\n \n+void\n+__attribute__ ((noinline))\n+test10 (void)\n+{\n+  static char buf[255];\n+  unsigned int i, len = sizeof (buf);\n+  char *p = buf;\n+\n+  for (i = 0 ; i < sizeof (buf) ; i++)\n+    {\n+      if (len < 2)\n+\t{\n+#ifdef __builtin_object_size\n+\t  if (__builtin_object_size (p - 3, 0) != sizeof (buf) - i + 3)\n+\t    abort ();\n+#else\n+\t  if (__builtin_object_size (p - 3, 0) != sizeof (buf))\n+\t    abort ();\n+#endif\n+\t  break;\n+\t}\n+      p++;\n+      len--;\n+    }\n+}\n+\n int\n main (void)\n {\n@@ -617,5 +643,6 @@ main (void)\n   test7 ();\n   test8 ();\n   test9 (1);\n+  test10 ();\n   exit (0);\n }"}, {"sha": "44a99189776a5ca2d55ca6e7eb19ddd5d4574817", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-3.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17df585a3a6a852c71883cc2ff40e111a6875149/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17df585a3a6a852c71883cc2ff40e111a6875149/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-3.c?ref=17df585a3a6a852c71883cc2ff40e111a6875149", "patch": "@@ -581,7 +581,7 @@ test9 (unsigned cond)\n   if (__builtin_object_size (&p[-4], 2) != (cond ? 6 : 10))\n     abort ();\n #else\n-  if (__builtin_object_size (&p[-4], 2) != 6)\n+  if (__builtin_object_size (&p[-4], 2) != 0)\n     abort ();\n #endif\n \n@@ -592,7 +592,7 @@ test9 (unsigned cond)\n   if (__builtin_object_size (p, 2) != ((cond ? 2 : 6) + cond))\n     abort ();\n #else\n-  if (__builtin_object_size (p, 2) != 2)\n+  if (__builtin_object_size (p, 2) != 0)\n     abort ();\n #endif\n \n@@ -605,12 +605,37 @@ test9 (unsigned cond)\n       != sizeof (y) - __builtin_offsetof (struct A, c) - 8 + cond)\n     abort ();\n #else\n-  if (__builtin_object_size (p, 2)\n-      != sizeof (y) - __builtin_offsetof (struct A, c) - 8)\n+  if (__builtin_object_size (p, 2) != 0)\n     abort ();\n #endif\n }\n \n+void\n+__attribute__ ((noinline))\n+test10 (void)\n+{\n+  static char buf[255];\n+  unsigned int i, len = sizeof (buf);\n+  char *p = buf;\n+\n+  for (i = 0 ; i < sizeof (buf) ; i++)\n+    {\n+      if (len < 2)\n+\t{\n+#ifdef __builtin_object_size\n+\t  if (__builtin_object_size (p - 3, 2) != sizeof (buf) - i + 3)\n+\t    abort ();\n+#else\n+\t  if (__builtin_object_size (p - 3, 2) != 0)\n+\t    abort ();\n+#endif\n+\t  break;\n+\t}\n+      p++;\n+      len--;\n+    }\n+}\n+\n int\n main (void)\n {\n@@ -625,5 +650,6 @@ main (void)\n   test7 ();\n   test8 ();\n   test9 (1);\n+  test10 ();\n   exit (0);\n }"}, {"sha": "b9fddfed036180bd48485a85aa131ca2d7fb8a92", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17df585a3a6a852c71883cc2ff40e111a6875149/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17df585a3a6a852c71883cc2ff40e111a6875149/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-4.c?ref=17df585a3a6a852c71883cc2ff40e111a6875149", "patch": "@@ -489,7 +489,7 @@ test8 (unsigned cond)\n   if (__builtin_object_size (&p[-4], 3) != (cond ? 6 : 10))\n     abort ();\n #else\n-  if (__builtin_object_size (&p[-4], 3) != 6)\n+  if (__builtin_object_size (&p[-4], 3) != 0)\n     abort ();\n #endif\n \n@@ -500,7 +500,7 @@ test8 (unsigned cond)\n   if (__builtin_object_size (p, 3) != ((cond ? 2 : 6) + cond))\n     abort ();\n #else\n-  if (__builtin_object_size (p, 3) != 2)\n+  if (__builtin_object_size (p, 3) != 0)\n     abort ();\n #endif\n \n@@ -512,7 +512,7 @@ test8 (unsigned cond)\n   if (__builtin_object_size (p, 3) != sizeof (y.c) - 8 + cond)\n     abort ();\n #else\n-  if (__builtin_object_size (p, 3) != sizeof (y.c) - 8)\n+  if (__builtin_object_size (p, 3) != 0)\n     abort ();\n #endif\n }"}, {"sha": "d1ad761cb6924c34c8757e5566c9626356553550", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-5.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17df585a3a6a852c71883cc2ff40e111a6875149/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17df585a3a6a852c71883cc2ff40e111a6875149/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-5.c?ref=17df585a3a6a852c71883cc2ff40e111a6875149", "patch": "@@ -89,6 +89,7 @@ test6 (void)\n     abort ();\n }\n \n+#ifdef __builtin_object_size\n void\n test7 (void)\n {\n@@ -97,5 +98,6 @@ test7 (void)\n   if (__builtin_object_size (p + 2, 0) != 0)\n     abort ();\n }\n+#endif\n \n /* { dg-final { scan-assembler-not \"abort\" } } */"}, {"sha": "8be0df6ba40f47614b634462b87e9b67578e01b7", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17df585a3a6a852c71883cc2ff40e111a6875149/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17df585a3a6a852c71883cc2ff40e111a6875149/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=17df585a3a6a852c71883cc2ff40e111a6875149", "patch": "@@ -1054,7 +1054,8 @@ compute_builtin_object_size (tree ptr, int object_size_type,\n \t      ptr = gimple_assign_rhs1 (def);\n \n \t      if (((object_size_type & OST_DYNAMIC)\n-\t\t   || tree_fits_shwi_p (offset))\n+\t\t   || (tree_fits_shwi_p (offset)\n+\t\t       && compare_tree_int (offset, offset_limit) <= 0))\n \t\t  && compute_builtin_object_size (ptr, object_size_type,\n \t\t\t\t\t\t  psize))\n \t\t{\n@@ -1346,8 +1347,18 @@ plus_stmt_object_size (struct object_size_info *osi, tree var, gimple *stmt)\n       /* size_for_offset doesn't make sense for -1 size, but it does for size 0\n \t since the wholesize could be non-zero and a negative offset could give\n \t a non-zero size.  */\n-      if (!size_unknown_p (bytes, 0))\n+      if (size_unknown_p (bytes, 0))\n+\t;\n+      else if ((object_size_type & OST_DYNAMIC)\n+\t       || compare_tree_int (op1, offset_limit) <= 0)\n \tbytes = size_for_offset (bytes, op1, wholesize);\n+      /* In the static case, with a negative offset, the best estimate for\n+\t minimum size is size_unknown but for maximum size, the wholesize is a\n+\t better estimate than size_unknown.  */\n+      else if (object_size_type & OST_MINIMUM)\n+\tbytes = size_unknown (object_size_type);\n+      else\n+\tbytes = wholesize;\n     }\n   else\n     bytes = wholesize = size_unknown (object_size_type);"}]}