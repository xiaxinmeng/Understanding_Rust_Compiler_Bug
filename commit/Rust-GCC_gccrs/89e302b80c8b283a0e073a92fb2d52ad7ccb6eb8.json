{"sha": "89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODllMzAyYjgwYzhiMjgzYTBlMDczYTkyZmIyZDUyYWQ3Y2NiNmViOA==", "commit": {"author": {"name": "Max Ostapenko", "email": "m.ostapenko@partner.samsung.com", "date": "2015-10-21T07:40:54Z"}, "committer": {"name": "Maxim Ostapenko", "email": "chefmax@gcc.gnu.org", "date": "2015-10-21T07:40:54Z"}, "message": "libsanitizer merge from upstream r250806, compiler part.\n\ngcc/\n\n\t* asan.c (asan_emit_stack_protection): Don't pass local stack to\n\tasan_stack_malloc_[n] anymore. Check if asan_stack_malloc_[n] returned\n\tNULL and use local stack than.\n\t(asan_finish_file): Insert __asan_version_mismatch_check_v[n] call\n\tin addition to __asan_init.\n\t* sanitizer.def (BUILT_IN_ASAN_INIT): Rename to __asan_init.\n\t(BUILT_IN_ASAN_VERSION_MISMATCH_CHECK): Add new builtin call.\n\t* asan.h (asan_intercepted_p): Handle new string builtins.\n\t* ubsan.c (ubsan_use_new_style_p): New function.\n\t(ubsan_instrument_float_cast): If location is unknown, assign\n\tinput_location to loc. Propagate loc to ubsan_create_data if\n\tubsan_use_new_style_p returned true.\n\nconfig/\n\n\t* bootstrap-asan.mk: Replace ASAN_OPTIONS=detect_leaks with\n\tLSAN_OPTIONS=detect_leaks.\n\ngcc/testsuite/\n\n\t* c-c++-common/ubsan/float-cast-overflow-10.c: Adjust test.\n\t* c-c++-common/ubsan/float-cast-overflow-8.c: Likewise.\n\t* c-c++-common/ubsan/float-cast-overflow-9.c: Likewise.\n\t* g++.dg/asan/default-options-1.C: Likewise.\n\nFrom-SVN: r229112", "tree": {"sha": "b7543b32302329374f126d54ffc91193bf4f4f25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7543b32302329374f126d54ffc91193bf4f4f25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8/comments", "author": null, "committer": null, "parents": [{"sha": "696d846a56cc12549f080c6c87e6a0272bdb29f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/696d846a56cc12549f080c6c87e6a0272bdb29f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/696d846a56cc12549f080c6c87e6a0272bdb29f1"}], "stats": {"total": 210, "additions": 80, "deletions": 130}, "files": [{"sha": "9b3964a60fb51e3bb9e0baffe75df1273369dce0", "filename": "config/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8", "patch": "@@ -1,3 +1,8 @@\n+2015-10-21  Maxim Ostapenko  <m.ostapenko@partner.samsung.com>\n+\n+\t* bootstrap-asan.mk: Replace ASAN_OPTIONS=detect_leaks with\n+\tLSAN_OPTIONS=detect_leaks.\n+\n 2015-08-24  Yaakov Selkowitz  <yselkowi@redhat.com>\n \n \t* iconv.m4 (AM_ICONV_LINK): Use in-tree libiconv when present."}, {"sha": "70baaf9bb17354ae26919e2f2ff4006bbc656b45", "filename": "config/bootstrap-asan.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8/config%2Fbootstrap-asan.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8/config%2Fbootstrap-asan.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fbootstrap-asan.mk?ref=89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8", "patch": "@@ -1,7 +1,7 @@\n # This option enables -fsanitize=address for stage2 and stage3.\n \n # Suppress LeakSanitizer in bootstrap.\n-export ASAN_OPTIONS=\"detect_leaks=0\"\n+export LSAN_OPTIONS=\"detect_leaks=0\"\n \n STAGE2_CFLAGS += -fsanitize=address\n STAGE3_CFLAGS += -fsanitize=address"}, {"sha": "2b15977437a4c4a9381c7a13c0ed218030a6d5dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8", "patch": "@@ -1,3 +1,18 @@\n+2015-10-21  Maxim Ostapenko  <m.ostapenko@partner.samsung.com>\n+\n+\t* asan.c (asan_emit_stack_protection): Don't pass local stack to\n+\tasan_stack_malloc_[n] anymore. Check if asan_stack_malloc_[n] returned\n+\tNULL and use local stack than.\n+\t(asan_finish_file): Insert __asan_version_mismatch_check_v[n] call\n+\tin addition to __asan_init.\n+\t* sanitizer.def (BUILT_IN_ASAN_INIT): Rename to __asan_init.\n+\t(BUILT_IN_ASAN_VERSION_MISMATCH_CHECK): Add new builtin call.\n+\t* asan.h (asan_intercepted_p): Handle new string builtins.\n+\t* ubsan.c (ubsan_use_new_style_p): New function.\n+\t(ubsan_instrument_float_cast): If location is unknown, assign\n+\tinput_location to loc. Propagate loc to ubsan_create_data if\n+\tubsan_use_new_style_p returned true.\n+\n 2015-10-21  Jeff Law  <law@redhat.com>\n \n \t* Makefile.in (OBJS): Remove sched-vis.c"}, {"sha": "0c42b17dadaa28eee2ea46dbd1090c7c430c5575", "filename": "gcc/asan.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8", "patch": "@@ -1132,12 +1132,16 @@ asan_emit_stack_protection (rtx base, rtx pbase, unsigned int alignb,\n       snprintf (buf, sizeof buf, \"__asan_stack_malloc_%d\",\n \t\tuse_after_return_class);\n       ret = init_one_libfunc (buf);\n-      rtx addr = convert_memory_address (ptr_mode, base);\n-      ret = emit_library_call_value (ret, NULL_RTX, LCT_NORMAL, ptr_mode, 2,\n+      ret = emit_library_call_value (ret, NULL_RTX, LCT_NORMAL, ptr_mode, 1,\n \t\t\t\t     GEN_INT (asan_frame_size\n \t\t\t\t\t      + base_align_bias),\n-\t\t\t\t     TYPE_MODE (pointer_sized_int_node),\n-\t\t\t\t     addr, ptr_mode);\n+\t\t\t\t     TYPE_MODE (pointer_sized_int_node));\n+      /* __asan_stack_malloc_[n] returns a pointer to fake stack if succeeded\n+\t and NULL otherwise.  Check RET value is NULL here and jump over the\n+\t BASE reassignment in this case.  Otherwise, reassign BASE to RET.  */\n+      int very_unlikely = REG_BR_PROB_BASE / 2000 - 1;\n+      emit_cmp_and_jump_insns (ret, const0_rtx, EQ, NULL_RTX,\n+\t\t\t       VOIDmode, 0, lab, very_unlikely);\n       ret = convert_memory_address (Pmode, ret);\n       emit_move_insn (base, ret);\n       emit_label (lab);\n@@ -2470,6 +2474,8 @@ asan_finish_file (void)\n     {\n       tree fn = builtin_decl_implicit (BUILT_IN_ASAN_INIT);\n       append_to_statement_list (build_call_expr (fn, 0), &asan_ctor_statements);\n+      fn = builtin_decl_implicit (BUILT_IN_ASAN_VERSION_MISMATCH_CHECK);\n+      append_to_statement_list (build_call_expr (fn, 0), &asan_ctor_statements);\n     }\n   FOR_EACH_DEFINED_VARIABLE (vnode)\n     if (TREE_ASM_WRITTEN (vnode->decl)"}, {"sha": "73e41a051e2ea7cbd52ccdf15af46708a25a1735", "filename": "gcc/sanitizer.def", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8/gcc%2Fsanitizer.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8/gcc%2Fsanitizer.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanitizer.def?ref=89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8", "patch": "@@ -27,7 +27,10 @@ along with GCC; see the file COPYING3.  If not see\n    for other FEs by asan.c.  */\n \n /* Address Sanitizer */\n-DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_INIT, \"__asan_init_v4\",\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_INIT, \"__asan_init\",\n+\t\t      BT_FN_VOID, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_VERSION_MISMATCH_CHECK,\n+\t\t      \"__asan_version_mismatch_check_v6\",\n \t\t      BT_FN_VOID, ATTR_NOTHROW_LEAF_LIST)\n /* Do not reorder the BUILT_IN_ASAN_{REPORT,CHECK}* builtins, e.g. cfgcleanup.c\n    relies on this order.  */"}, {"sha": "df804352bd3e38acbbacf35e9b523ed0e0d43119", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8", "patch": "@@ -1,3 +1,10 @@\n+2015-10-21  Maxim Ostapenko  <m.ostapenko@partner.samsung.com>\n+\n+\t* c-c++-common/ubsan/float-cast-overflow-10.c: Adjust test.\n+\t* c-c++-common/ubsan/float-cast-overflow-8.c: Likewise.\n+\t* c-c++-common/ubsan/float-cast-overflow-9.c: Likewise.\n+\t* g++.dg/asan/default-options-1.C: Likewise.\n+\n 2015-10-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/stp_vec_64_1.c: New test."}, {"sha": "a54a838870b9943d1223728379b928d88eab92a9", "filename": "gcc/testsuite/c-c++-common/ubsan/float-cast-overflow-10.c", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-10.c?ref=89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8", "patch": "@@ -10,70 +10,37 @@\n \n /* _Decimal32 */\n /* { dg-output \"value <unknown> is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* _Decimal64 */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* _Decimal128 */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long unsigned int'\" } */"}, {"sha": "4adb22ae3b4711fe75329cf77131e237a0cf711b", "filename": "gcc/testsuite/c-c++-common/ubsan/float-cast-overflow-8.c", "status": "modified", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-8.c?ref=89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8", "patch": "@@ -100,106 +100,44 @@ main ()\n \n /* float */\n /* { dg-output \"value -129 is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n-/* { dg-output \"value \\[0-9.e+-]* is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n-/* { dg-output \"\\[^\\n\\r]*value 128 is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n /* { dg-output \"\\[^\\n\\r]*value (-129|-1) is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n-/* { dg-output \"\\[^\\n\\r]*value (128|256) is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n /* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value 256 is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n /* { dg-output \"\\[^\\n\\r]*value -32769 is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n-/* { dg-output \"\\[^\\n\\r]*value 32768 is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n /* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value 65536 is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { int128 } } } */\n /* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { int128 } } } */\n /* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { int128 } } } */\n /* No error for float and __int128 unsigned max value, as ui128_MAX is +Inf in float.  */\n /* double */\n /* { dg-output \"\\[^\\n\\r]*value -129 is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n-/* { dg-output \"\\[^\\n\\r]*value 128 is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n /* { dg-output \"\\[^\\n\\r]*value (-129|-1) is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n-/* { dg-output \"\\[^\\n\\r]*value (128|256) is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n /* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value 256 is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n /* { dg-output \"\\[^\\n\\r]*value -32769 is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n-/* { dg-output \"\\[^\\n\\r]*value 32768 is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n /* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value 65536 is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { int128 } } } */\n /* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { int128 } } } */\n /* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { int128 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { int128 } } } */\n /* long double */\n /* { dg-output \"\\[^\\n\\r]*value -129 is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n-/* { dg-output \"\\[^\\n\\r]*value 128 is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n /* { dg-output \"\\[^\\n\\r]*value (-129|-1) is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n-/* { dg-output \"\\[^\\n\\r]*value (128|256) is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n /* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value 256 is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n /* { dg-output \"\\[^\\n\\r]*value -32769 is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n-/* { dg-output \"\\[^\\n\\r]*value 32768 is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n /* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value 65536 is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long long unsigned int'\" } */\n-/* { dg-output \"(\\n|\\r\\n|\\r)\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { int128 } } } */\n /* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { int128 } } } */\n /* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { int128 } } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type '__int128 unsigned'\" { target { int128 } } } */"}, {"sha": "f2d71f6a5333edb472f6f67eebda97050f69357e", "filename": "gcc/testsuite/c-c++-common/ubsan/float-cast-overflow-9.c", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-9.c?ref=89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8", "patch": "@@ -7,55 +7,29 @@\n \n /* __float80 */\n /* { dg-output \"value -129 is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value 128 is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value (-129|-1) is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value (128|256) is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value 256 is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value -32769 is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value 32768 is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value 65536 is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target int128 } } */\n /* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target int128 } } */\n /* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target int128 } } */\n-/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target int128 } } */\n /* __float128 */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target int128 } } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target int128 } } */\n /* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target int128 } } */\n-/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type '__int128 unsigned'\" { target int128 } } */"}, {"sha": "dc818917ddc4d3eb4c9e01420663db69c7b4b23b", "filename": "gcc/testsuite/g++.dg/asan/default-options-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdefault-options-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdefault-options-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdefault-options-1.C?ref=89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8", "patch": "@@ -12,4 +12,4 @@ int main() {\n   return 0;\n }\n \n-// { dg-output \"Using the defaults from __asan_default_options:.* foo=bar.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"WARNING: found 1 unrecognized flag\\\\(s\\\\):(\\n|\\r\\n|\\r).*foo(\\n|\\r\\n|\\r)\" }"}, {"sha": "f30a2d51cfa303c693d9cd2c76d55639a0c88916", "filename": "gcc/ubsan.c", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=89e302b80c8b283a0e073a92fb2d52ad7ccb6eb8", "patch": "@@ -1472,6 +1472,30 @@ instrument_bool_enum_load (gimple_stmt_iterator *gsi)\n   *gsi = gsi_for_stmt (stmt);\n }\n \n+/* Determine if we can propagate given LOCATION to ubsan_data descriptor to use\n+   new style handlers.  Libubsan uses heuristics to destinguish between old and\n+   new styles and relies on these properties for filename:\n+\n+   a) Location's filename must not be NULL.\n+   b) Location's filename must not be equal to \"\".\n+   c) Location's filename must not be equal to \"\\1\".\n+   d) First two bytes of filename must not contain '\\xff' symbol.  */\n+\n+static bool\n+ubsan_use_new_style_p (location_t loc)\n+{\n+  if (loc == UNKNOWN_LOCATION)\n+    return false;\n+\n+  expanded_location xloc = expand_location (loc);\n+  if (xloc.file == NULL || strncmp (xloc.file, \"\\1\", 2) == 0\n+      || xloc.file == '\\0' || xloc.file[0] == '\\xff'\n+      || xloc.file[1] == '\\xff')\n+    return false;\n+\n+  return true;\n+}\n+\n /* Instrument float point-to-integer conversion.  TYPE is an integer type of\n    destination, EXPR is floating-point expression.  ARG is what to pass\n    the libubsan call as value, often EXPR itself.  */\n@@ -1484,6 +1508,7 @@ ubsan_instrument_float_cast (location_t loc, tree type, tree expr, tree arg)\n   machine_mode mode = TYPE_MODE (expr_type);\n   int prec = TYPE_PRECISION (type);\n   bool uns_p = TYPE_UNSIGNED (type);\n+  if (!loc) loc = input_location;\n \n   /* Float to integer conversion first truncates toward zero, so\n      even signed char c = 127.875f; is not problematic.\n@@ -1580,9 +1605,19 @@ ubsan_instrument_float_cast (location_t loc, tree type, tree expr, tree arg)\n     fn = build_call_expr_loc (loc, builtin_decl_explicit (BUILT_IN_TRAP), 0);\n   else\n     {\n+      location_t *loc_ptr = NULL;\n+      unsigned num_locations = 0;\n+      /* Figure out if we can propagate location to ubsan_data and use new\n+         style handlers in libubsan.  */\n+      if (ubsan_use_new_style_p (loc))\n+\t{\n+\t  loc_ptr = &loc;\n+\t  num_locations = 1;\n+\t}\n       /* Create the __ubsan_handle_float_cast_overflow fn call.  */\n-      tree data = ubsan_create_data (\"__ubsan_float_cast_overflow_data\", 0,\n-\t\t\t\t     NULL, ubsan_type_descriptor (expr_type),\n+      tree data = ubsan_create_data (\"__ubsan_float_cast_overflow_data\",\n+\t\t\t\t     num_locations, loc_ptr,\n+\t\t\t\t     ubsan_type_descriptor (expr_type),\n \t\t\t\t     ubsan_type_descriptor (type), NULL_TREE,\n \t\t\t\t     NULL_TREE);\n       enum built_in_function bcode"}]}