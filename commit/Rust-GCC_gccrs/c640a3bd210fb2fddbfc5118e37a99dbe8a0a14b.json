{"sha": "c640a3bd210fb2fddbfc5118e37a99dbe8a0a14b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY0MGEzYmQyMTBmYjJmZGRiZmM1MTE4ZTM3YTk5ZGJlOGEwYTE0Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2009-10-05T19:45:54Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2009-10-05T19:45:54Z"}, "message": "mips-protos.h (mips_trampoline_code_size): Declare.\n\ngcc/\n\t* config/mips/mips-protos.h (mips_trampoline_code_size): Declare.\n\t* config/mips/mips.h (TRAMPOLINE_SIZE): Redefine as the size of\n\ta code block followed by two pointers.\n\t(TRAMPOLINE_ALIGNMENT): Define to 64 for 32-bit targets too.\n\t* config/mips/mips.c (MIPS_LOAD_PTR): New macro.\n\t(MIPS_MOVE): Likewise.\n\t(MIPS_LUI): Likewise.\n\t(MIPS_JR): Likewise.\n\t(MIPS_BAL): Likewise.\n\t(MIPS_NOP): Likewise.\n\t(mips_asm_trampoline_template): Delete.\n\t(mips_trampoline_code_size): New function.\n\t(mips_trampoline_init): Add shorter sequences for all cases\n\texcept Pmode == DImoe && !TARGET_USE_PIC_FN_ADDR_REG.\n\tCalculate the opcodes directly, rather than copying from a template.\n\tOnly flush the code part of the trampoline.\n\t(TARGET_ASM_TRAMPOLINE_TEMPLATE): Delete.\n\nFrom-SVN: r152466", "tree": {"sha": "525e11396150f9067933a78b22862a0296eebd0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/525e11396150f9067933a78b22862a0296eebd0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c640a3bd210fb2fddbfc5118e37a99dbe8a0a14b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c640a3bd210fb2fddbfc5118e37a99dbe8a0a14b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c640a3bd210fb2fddbfc5118e37a99dbe8a0a14b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c640a3bd210fb2fddbfc5118e37a99dbe8a0a14b/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "293593b15fbf08603d6fa038e8e4614b41166c9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/293593b15fbf08603d6fa038e8e4614b41166c9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/293593b15fbf08603d6fa038e8e4614b41166c9f"}], "stats": {"total": 258, "additions": 207, "deletions": 51}, "files": [{"sha": "2f611f00efd582a6c5cf4643ee7ff0f17ed387b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c640a3bd210fb2fddbfc5118e37a99dbe8a0a14b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c640a3bd210fb2fddbfc5118e37a99dbe8a0a14b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c640a3bd210fb2fddbfc5118e37a99dbe8a0a14b", "patch": "@@ -1,3 +1,23 @@\n+2009-10-05  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/mips/mips-protos.h (mips_trampoline_code_size): Declare.\n+\t* config/mips/mips.h (TRAMPOLINE_SIZE): Redefine as the size of\n+\ta code block followed by two pointers.\n+\t(TRAMPOLINE_ALIGNMENT): Define to 64 for 32-bit targets too.\n+\t* config/mips/mips.c (MIPS_LOAD_PTR): New macro.\n+\t(MIPS_MOVE): Likewise.\n+\t(MIPS_LUI): Likewise.\n+\t(MIPS_JR): Likewise.\n+\t(MIPS_BAL): Likewise.\n+\t(MIPS_NOP): Likewise.\n+\t(mips_asm_trampoline_template): Delete.\n+\t(mips_trampoline_code_size): New function.\n+\t(mips_trampoline_init): Add shorter sequences for all cases\n+\texcept Pmode == DImoe && !TARGET_USE_PIC_FN_ADDR_REG.\n+\tCalculate the opcodes directly, rather than copying from a template.\n+\tOnly flush the code part of the trampoline.\n+\t(TARGET_ASM_TRAMPOLINE_TEMPLATE): Delete.\n+\n 2009-10-05  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/mips/mips.h (DWARF_FRAME_RETURN_COLUMN): Replace"}, {"sha": "429a6217ad7674deac6bf33ca11b3926c6559302", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c640a3bd210fb2fddbfc5118e37a99dbe8a0a14b/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c640a3bd210fb2fddbfc5118e37a99dbe8a0a14b/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=c640a3bd210fb2fddbfc5118e37a99dbe8a0a14b", "patch": "@@ -343,5 +343,6 @@ extern void mips_expand_vector_init (rtx, rtx);\n extern bool mips_eh_uses (unsigned int);\n extern bool mips_epilogue_uses (unsigned int);\n extern void mips_final_prescan_insn (rtx, rtx *, int);\n+extern int mips_trampoline_code_size (void);\n \n #endif /* ! GCC_MIPS_PROTOS_H */"}, {"sha": "e44eb49b94335d274c407433c7ecc94dbd568fd8", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 180, "deletions": 46, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c640a3bd210fb2fddbfc5118e37a99dbe8a0a14b/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c640a3bd210fb2fddbfc5118e37a99dbe8a0a14b/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=c640a3bd210fb2fddbfc5118e37a99dbe8a0a14b", "patch": "@@ -126,6 +126,40 @@ along with GCC; see the file COPYING3.  If not see\n /* True if bit BIT is set in VALUE.  */\n #define BITSET_P(VALUE, BIT) (((VALUE) & (1 << (BIT))) != 0)\n \n+/* Return the opcode for a ptr_mode load of the form:\n+\n+       l[wd]    DEST, OFFSET(BASE).  */\n+#define MIPS_LOAD_PTR(DEST, OFFSET, BASE)\t\\\n+  (((ptr_mode == DImode ? 0x37 : 0x23) << 26)\t\\\n+   | ((BASE) << 21)\t\t\t\t\\\n+   | ((DEST) << 16)\t\t\t\t\\\n+   | (OFFSET))\n+\n+/* Return the opcode to move register SRC into register DEST.  */\n+#define MIPS_MOVE(DEST, SRC)\t\t\\\n+  ((TARGET_64BIT ? 0x2d : 0x21)\t\t\\\n+   | ((DEST) << 11)\t\t\t\\\n+   | ((SRC) << 21))\n+\n+/* Return the opcode for:\n+\n+       lui      DEST, VALUE.  */\n+#define MIPS_LUI(DEST, VALUE) \\\n+  ((0xf << 26) | ((DEST) << 16) | (VALUE))\n+\n+/* Return the opcode to jump to register DEST.  */\n+#define MIPS_JR(DEST) \\\n+  (((DEST) << 21) | 0x8)\n+\n+/* Return the opcode for:\n+\n+       bal     . + (1 + OFFSET) * 4.  */\n+#define MIPS_BAL(OFFSET) \\\n+  ((0x1 << 26) | (0x11 << 16) | (OFFSET))\n+\n+/* Return the usual opcode for a nop.  */\n+#define MIPS_NOP 0\n+\n /* Classifies an address.\n \n    ADDRESS_REG\n@@ -15889,65 +15923,167 @@ mips_final_postscan_insn (FILE *file ATTRIBUTE_UNUSED, rtx insn,\n     mips_pop_asm_switch (&mips_noat);\n }\n \f\n-/* Implement TARGET_ASM_TRAMPOLINE_TEMPLATE.  */\n+/* Return the size in bytes of the trampoline code, padded to\n+   TRAMPOLINE_ALIGNMENT bits.  The static chain pointer and target\n+   function address immediately follow.  */\n \n-static void\n-mips_asm_trampoline_template (FILE *f)\n-{\n-  if (ptr_mode == DImode)\n-    fprintf (f, \"\\t.word\\t0x03e0082d\\t\\t# dmove   $1,$31\\n\");\n-  else\n-    fprintf (f, \"\\t.word\\t0x03e00821\\t\\t# move   $1,$31\\n\");\n-  fprintf (f, \"\\t.word\\t0x04110001\\t\\t# bgezal $0,.+8\\n\");\n-  fprintf (f, \"\\t.word\\t0x00000000\\t\\t# nop\\n\");\n-  if (ptr_mode == DImode)\n-    {\n-      fprintf (f, \"\\t.word\\t0xdff90014\\t\\t# ld     $25,20($31)\\n\");\n-      fprintf (f, \"\\t.word\\t0xdfef001c\\t\\t# ld     $15,28($31)\\n\");\n-    }\n-  else\n-    {\n-      fprintf (f, \"\\t.word\\t0x8ff90010\\t\\t# lw     $25,16($31)\\n\");\n-      fprintf (f, \"\\t.word\\t0x8fef0014\\t\\t# lw     $15,20($31)\\n\");\n-    }\n-  fprintf (f, \"\\t.word\\t0x03200008\\t\\t# jr     $25\\n\");\n-  if (ptr_mode == DImode)\n-    {\n-      fprintf (f, \"\\t.word\\t0x0020f82d\\t\\t# dmove   $31,$1\\n\");\n-      fprintf (f, \"\\t.word\\t0x00000000\\t\\t# <padding>\\n\");\n-      fprintf (f, \"\\t.dword\\t0x00000000\\t\\t# <function address>\\n\");\n-      fprintf (f, \"\\t.dword\\t0x00000000\\t\\t# <static chain value>\\n\");\n-    }\n+int\n+mips_trampoline_code_size (void)\n+{\n+  if (TARGET_USE_PIC_FN_ADDR_REG)\n+    return 4 * 4;\n+  else if (ptr_mode == DImode)\n+    return 8 * 4;\n+  else if (ISA_HAS_LOAD_DELAY)\n+    return 6 * 4;\n   else\n-    {\n-      fprintf (f, \"\\t.word\\t0x0020f821\\t\\t# move   $31,$1\\n\");\n-      fprintf (f, \"\\t.word\\t0x00000000\\t\\t# <function address>\\n\");\n-      fprintf (f, \"\\t.word\\t0x00000000\\t\\t# <static chain value>\\n\");\n-    }\n+    return 4 * 4;\n }\n \n /* Implement TARGET_TRAMPOLINE_INIT.  */\n \n static void\n mips_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n {\n-  rtx fnaddr = XEXP (DECL_RTL (fndecl), 0);\n-  rtx mem, addr, end_addr;\n+  rtx addr, end_addr, high, low, opcode, mem;\n+  rtx trampoline[8];\n+  unsigned int i, j;\n+  HOST_WIDE_INT end_addr_offset, static_chain_offset, target_function_offset;\n+\n+  /* Work out the offsets of the pointers from the start of the\n+     trampoline code.  */\n+  end_addr_offset = mips_trampoline_code_size ();\n+  static_chain_offset = end_addr_offset;\n+  target_function_offset = static_chain_offset + GET_MODE_SIZE (ptr_mode);\n \n-  emit_block_move (m_tramp, assemble_trampoline_template (),\n-\t\t   GEN_INT (TRAMPOLINE_SIZE), BLOCK_OP_NORMAL);\n+  /* Get pointers to the beginning and end of the code block.  */\n+  addr = force_reg (Pmode, XEXP (m_tramp, 0));\n+  end_addr = mips_force_binary (Pmode, PLUS, addr, GEN_INT (end_addr_offset));\n \n-  mem = adjust_address (m_tramp, ptr_mode, ptr_mode == DImode ? 32 : 28);\n-  mips_emit_move (mem, force_reg (ptr_mode, fnaddr));\n-  mem = adjust_address (mem, ptr_mode, GET_MODE_SIZE (ptr_mode));\n-  mips_emit_move (mem, force_reg (ptr_mode, chain_value));\n+#define OP(X) gen_int_mode (X, SImode)\n \n-  addr = force_reg (ptr_mode, XEXP (m_tramp, 0));\n-  end_addr = gen_reg_rtx (ptr_mode);\n+  /* Build up the code in TRAMPOLINE.  */\n+  i = 0;\n+  if (TARGET_USE_PIC_FN_ADDR_REG)\n+    {\n+      /* $25 contains the address of the trampoline.  Emit code of the form:\n+\n+\t     l[wd]    $1, target_function_offset($25)\n+\t     l[wd]    $static_chain, static_chain_offset($25)\n+\t     jr       $1\n+\t     move     $25,$1.  */\n+      trampoline[i++] = OP (MIPS_LOAD_PTR (AT_REGNUM,\n+\t\t\t\t\t   target_function_offset,\n+\t\t\t\t\t   PIC_FUNCTION_ADDR_REGNUM));\n+      trampoline[i++] = OP (MIPS_LOAD_PTR (STATIC_CHAIN_REGNUM,\n+\t\t\t\t\t   static_chain_offset,\n+\t\t\t\t\t   PIC_FUNCTION_ADDR_REGNUM));\n+      trampoline[i++] = OP (MIPS_JR (AT_REGNUM));\n+      trampoline[i++] = OP (MIPS_MOVE (PIC_FUNCTION_ADDR_REGNUM, AT_REGNUM));\n+    }\n+  else if (ptr_mode == DImode)\n+    {\n+      /* It's too cumbersome to create the full 64-bit address, so let's\n+\t instead use:\n+\n+\t     move    $1, $31\n+\t     bal     1f\n+\t     nop\n+\t 1:  l[wd]   $25, target_function_offset - 12($31)\n+\t     l[wd]   $static_chain, static_chain_offset - 12($31)\n+\t     jr      $25\n+\t     move    $31, $1\n+\n+\twhere 12 is the offset of \"1:\" from the start of the code block.  */\n+      trampoline[i++] = OP (MIPS_MOVE (AT_REGNUM, RETURN_ADDR_REGNUM));\n+      trampoline[i++] = OP (MIPS_BAL (1));\n+      trampoline[i++] = OP (MIPS_NOP);\n+      trampoline[i++] = OP (MIPS_LOAD_PTR (PIC_FUNCTION_ADDR_REGNUM,\n+\t\t\t\t\t   target_function_offset - 12,\n+\t\t\t\t\t   RETURN_ADDR_REGNUM));\n+      trampoline[i++] = OP (MIPS_LOAD_PTR (STATIC_CHAIN_REGNUM,\n+\t\t\t\t\t   static_chain_offset - 12,\n+\t\t\t\t\t   RETURN_ADDR_REGNUM));\n+      trampoline[i++] = OP (MIPS_JR (PIC_FUNCTION_ADDR_REGNUM));\n+      trampoline[i++] = OP (MIPS_MOVE (RETURN_ADDR_REGNUM, AT_REGNUM));\n+    }\n+  else\n+    {\n+      /* If the target has load delays, emit:\n+\n+\t     lui     $1, %hi(end_addr)\n+\t     lw      $25, %lo(end_addr + ...)($1)\n+\t     lw      $static_chain, %lo(end_addr + ...)($1)\n+\t     jr      $25\n+\t     nop\n+\n+\t Otherwise emit:\n+\n+\t     lui     $1, %hi(end_addr)\n+\t     lw      $25, %lo(end_addr + ...)($1)\n+\t     jr      $25\n+\t     lw      $static_chain, %lo(end_addr + ...)($1).  */\n+\n+      /* Split END_ADDR into %hi and %lo values.  Trampolines are aligned\n+\t to 64 bits, so the %lo value will have the bottom 3 bits clear.  */\n+      high = expand_simple_binop (SImode, PLUS, end_addr, GEN_INT (0x8000),\n+\t\t\t\t  NULL, false, OPTAB_WIDEN);\n+      high = expand_simple_binop (SImode, LSHIFTRT, high, GEN_INT (16),\n+\t\t\t\t  NULL, false, OPTAB_WIDEN);\n+      low = convert_to_mode (SImode, gen_lowpart (HImode, end_addr), true);\n+\n+      /* Emit the LUI.  */\n+      opcode = OP (MIPS_LUI (AT_REGNUM, 0));\n+      trampoline[i++] = expand_simple_binop (SImode, IOR, opcode, high,\n+\t\t\t\t\t     NULL, false, OPTAB_WIDEN);\n+\n+      /* Emit the load of the target function.  */\n+      opcode = OP (MIPS_LOAD_PTR (PIC_FUNCTION_ADDR_REGNUM,\n+\t\t\t\t  target_function_offset - end_addr_offset,\n+\t\t\t\t  AT_REGNUM));\n+      trampoline[i++] = expand_simple_binop (SImode, IOR, opcode, low,\n+\t\t\t\t\t     NULL, false, OPTAB_WIDEN);\n+\n+      /* Emit the JR here, if we can.  */\n+      if (!ISA_HAS_LOAD_DELAY)\n+\ttrampoline[i++] = OP (MIPS_JR (PIC_FUNCTION_ADDR_REGNUM));\n+\n+      /* Emit the load of the static chain register.  */\n+      opcode = OP (MIPS_LOAD_PTR (STATIC_CHAIN_REGNUM,\n+\t\t\t\t  static_chain_offset - end_addr_offset,\n+\t\t\t\t  AT_REGNUM));\n+      trampoline[i++] = expand_simple_binop (SImode, IOR, opcode, low,\n+\t\t\t\t\t     NULL, false, OPTAB_WIDEN);\n+\n+      /* Emit the JR, if we couldn't above.  */\n+      if (ISA_HAS_LOAD_DELAY)\n+\t{\n+\t  trampoline[i++] = OP (MIPS_JR (PIC_FUNCTION_ADDR_REGNUM));\n+\t  trampoline[i++] = OP (MIPS_NOP);\n+\t}\n+    }\n+\n+#undef OP\n+\n+  /* Copy the trampoline code.  Leave any padding uninitialized.  */\n+  for (j = 0; j < i; j++)\n+    {\n+      mem = adjust_address (m_tramp, SImode, j * GET_MODE_SIZE (SImode));\n+      mips_emit_move (mem, trampoline[j]);\n+    }\n+\n+  /* Set up the static chain pointer field.  */\n+  mem = adjust_address (m_tramp, ptr_mode, static_chain_offset);\n+  mips_emit_move (mem, chain_value);\n+\n+  /* Set up the target function field.  */\n+  mem = adjust_address (m_tramp, ptr_mode, target_function_offset);\n+  mips_emit_move (mem, XEXP (DECL_RTL (fndecl), 0));\n+\n+  /* Flush the code part of the trampoline.  */\n   emit_insn (gen_add3_insn (end_addr, addr, GEN_INT (TRAMPOLINE_SIZE)));\n   emit_insn (gen_clear_cache (addr, end_addr));\n }\n-\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -16129,8 +16265,6 @@ mips_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE mips_can_eliminate\n \n-#undef TARGET_ASM_TRAMPOLINE_TEMPLATE\n-#define TARGET_ASM_TRAMPOLINE_TEMPLATE mips_asm_trampoline_template\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT mips_trampoline_init\n "}, {"sha": "50bc4ea14bbb250041c61fbaef1f2d76bc8cc3f1", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c640a3bd210fb2fddbfc5118e37a99dbe8a0a14b/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c640a3bd210fb2fddbfc5118e37a99dbe8a0a14b/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=c640a3bd210fb2fddbfc5118e37a99dbe8a0a14b", "patch": "@@ -2433,14 +2433,15 @@ typedef struct mips_args {\n #define EXIT_IGNORE_STACK 1\n \n \f\n-/* A C expression for the size in bytes of the trampoline, as an\n-   integer.  */\n+/* Trampolines are a block of code followed by two pointers.  */\n \n-#define TRAMPOLINE_SIZE (ptr_mode == DImode ? 48 : 36)\n+#define TRAMPOLINE_SIZE \\\n+  (mips_trampoline_code_size () + GET_MODE_SIZE (ptr_mode) * 2)\n \n-/* Alignment required for trampolines, in bits.  */\n+/* Forcing a 64-bit alignment for 32-bit targets allows us to load two\n+   pointers from a single LUI base.  */\n \n-#define TRAMPOLINE_ALIGNMENT GET_MODE_BITSIZE (ptr_mode)\n+#define TRAMPOLINE_ALIGNMENT 64\n \n /* mips_trampoline_init calls this library function to flush\n    program and data caches.  */"}]}