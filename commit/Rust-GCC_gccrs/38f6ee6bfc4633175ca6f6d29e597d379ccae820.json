{"sha": "38f6ee6bfc4633175ca6f6d29e597d379ccae820", "node_id": "C_kwDOANBUbNoAKDM4ZjZlZTZiZmM0NjMzMTc1Y2E2ZjZkMjllNTk3ZDM3OWNjYWU4MjA", "commit": {"author": {"name": "dianhong xu", "email": "dianhong.xu@intel.com", "date": "2021-10-09T10:23:35Z"}, "committer": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2021-10-19T06:48:21Z"}, "message": "AVX512FP16: Add *_set1_pch intrinsics.\n\nAdd *_set1_pch (_Float16 _Complex A) intrinsics.\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h:\n\t(_mm512_set1_pch): New intrinsic.\n\t* config/i386/avx512fp16vlintrin.h:\n\t(_mm256_set1_pch): New intrinsic.\n\t(_mm_set1_pch): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-set1-pch-1a.c: New test.\n\t* gcc.target/i386/avx512fp16-set1-pch-1b.c: New test.\n\t* gcc.target/i386/avx512fp16vl-set1-pch-1a.c: New test.\n\t* gcc.target/i386/avx512fp16vl-set1-pch-1b.c: New test.", "tree": {"sha": "a55886fa80906d79deb2dfe288703fbb2bc2d867", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a55886fa80906d79deb2dfe288703fbb2bc2d867"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38f6ee6bfc4633175ca6f6d29e597d379ccae820", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38f6ee6bfc4633175ca6f6d29e597d379ccae820", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38f6ee6bfc4633175ca6f6d29e597d379ccae820", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38f6ee6bfc4633175ca6f6d29e597d379ccae820/comments", "author": null, "committer": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce4d1f632ff3f680550d3b186b60176022f41190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce4d1f632ff3f680550d3b186b60176022f41190", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce4d1f632ff3f680550d3b186b60176022f41190"}], "stats": {"total": 171, "additions": 171, "deletions": 0}, "files": [{"sha": "44c5e24f234e01f9ce15492e2eb621061a6b4e72", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f6ee6bfc4633175ca6f6d29e597d379ccae820/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f6ee6bfc4633175ca6f6d29e597d379ccae820/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=38f6ee6bfc4633175ca6f6d29e597d379ccae820", "patch": "@@ -7149,6 +7149,19 @@ _mm512_permutexvar_ph (__m512i __A, __m512h __B)\n \t\t\t\t\t\t     (__mmask32)-1);\n }\n \n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_set1_pch (_Float16 _Complex __A)\n+{\n+  union\n+  {\n+    _Float16 _Complex a;\n+    float b;\n+  } u = { .a = __A};\n+\n+  return (__m512h) _mm512_set1_ps (u.b);\n+}\n+\n #ifdef __DISABLE_AVX512FP16__\n #undef __DISABLE_AVX512FP16__\n #pragma GCC pop_options"}, {"sha": "11f34bb67785a9120d2da2fa2d06b6f6efc5bf3e", "filename": "gcc/config/i386/avx512fp16vlintrin.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f6ee6bfc4633175ca6f6d29e597d379ccae820/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f6ee6bfc4633175ca6f6d29e597d379ccae820/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h?ref=38f6ee6bfc4633175ca6f6d29e597d379ccae820", "patch": "@@ -3311,6 +3311,32 @@ _mm_permutexvar_ph (__m128i __A, __m128h __B)\n \t\t\t\t\t\t     (__mmask8)-1);\n }\n \n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_set1_pch (_Float16 _Complex __A)\n+{\n+  union\n+  {\n+    _Float16 _Complex a;\n+    float b;\n+  } u = { .a = __A };\n+\n+  return (__m256h) _mm256_set1_ps (u.b);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_set1_pch (_Float16 _Complex __A)\n+{\n+  union\n+  {\n+    _Float16 _Complex a;\n+    float b;\n+  } u = { .a = __A };\n+\n+  return (__m128h) _mm_set1_ps (u.b);\n+}\n+\n #ifdef __DISABLE_AVX512FP16VL__\n #undef __DISABLE_AVX512FP16VL__\n #pragma GCC pop_options"}, {"sha": "0055193f243f5f2036b62345b690a20dd845bd45", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-set1-pch-1a.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f6ee6bfc4633175ca6f6d29e597d379ccae820/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-set1-pch-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f6ee6bfc4633175ca6f6d29e597d379ccae820/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-set1-pch-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-set1-pch-1a.c?ref=38f6ee6bfc4633175ca6f6d29e597d379ccae820", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile} */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+#include <immintrin.h>\n+\n+__m512h\n+__attribute__ ((noinline, noclone))\n+test_mm512_set1_pch (_Float16 _Complex A)\n+{\n+  return _mm512_set1_pch(A);\n+}\n+\n+/* { dg-final { scan-assembler \"vbroadcastss\\[ \\\\t\\]+\\[^\\n\\r\\]*%zmm\\[01\\]\" } } */"}, {"sha": "450d7e3723751c10f5802ffc7c1da794078fab1b", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-set1-pch-1b.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f6ee6bfc4633175ca6f6d29e597d379ccae820/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-set1-pch-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f6ee6bfc4633175ca6f6d29e597d379ccae820/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-set1-pch-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-set1-pch-1b.c?ref=38f6ee6bfc4633175ca6f6d29e597d379ccae820", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+#include<stdio.h>\n+#include <math.h>\n+#include <complex.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+\n+#include <immintrin.h>\n+#include \"avx512-check.h\"\n+\n+static void\n+do_test (void)\n+{\n+ _Float16 _Complex fc = 1.0 + 1.0*I;\n+  union\n+  {\n+    _Float16 _Complex a;\n+    float b;\n+  } u = { .a = fc };\n+  float ff= u.b;\n+\n+  typedef union\n+  {\n+    float fp[16];\n+    __m512h m512h;\n+  } u1;\n+\n+  __m512h test512 = _mm512_set1_pch(fc);\n+\n+  u1 test;\n+  test.m512h = test512;\n+  for (int i = 0; i<16; i++)\n+  {\n+    if (test.fp[i] != ff) abort();\n+  }\n+\n+}"}, {"sha": "4c5624f99359112d99168b2269ffcceef14b676b", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-set1-pch-1a.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f6ee6bfc4633175ca6f6d29e597d379ccae820/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-set1-pch-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f6ee6bfc4633175ca6f6d29e597d379ccae820/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-set1-pch-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-set1-pch-1a.c?ref=38f6ee6bfc4633175ca6f6d29e597d379ccae820", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile} */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl\" } */\n+\n+#include <immintrin.h>\n+\n+__m256h\n+__attribute__ ((noinline, noclone))\n+test_mm256_set1_pch (_Float16 _Complex A)\n+{\n+  return _mm256_set1_pch(A);\n+}\n+\n+__m128h\n+__attribute__ ((noinline, noclone))\n+test_mm_set1_pch (_Float16 _Complex A)\n+{\n+  return _mm_set1_pch(A);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vbroadcastss\" 2 } } */"}, {"sha": "aebff1418211113453c15a7efecd7ea86e916ac4", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-set1-pch-1b.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f6ee6bfc4633175ca6f6d29e597d379ccae820/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-set1-pch-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f6ee6bfc4633175ca6f6d29e597d379ccae820/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-set1-pch-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-set1-pch-1b.c?ref=38f6ee6bfc4633175ca6f6d29e597d379ccae820", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl\" } */\n+\n+#include<stdio.h>\n+#include <math.h>\n+#include <complex.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+\n+#include <immintrin.h>\n+#include \"avx512-check.h\"\n+\n+static void\n+do_test (void)\n+{\n+  _Float16 _Complex fc = 1.0 + 1.0*I;\n+  union\n+  { \n+    _Float16 _Complex a;\n+    float b;\n+  } u = { .a = fc };\n+  float ff= u.b;\n+\n+  typedef union\n+  {\n+    float fp[8];\n+    __m256h m256h;\n+  } u1;\n+\n+  __m256h test256 = _mm256_set1_pch(fc);\n+\n+  u1 test1;\n+  test1.m256h = test256;\n+  for (int i = 0; i<8; i++)\n+  {\n+    if (test1.fp[i] != ff) abort();\n+  }\n+\n+  typedef union\n+  {\n+    float fp[4];\n+    __m128h m128h;\n+  } u2;\n+\n+  __m128h test128 = _mm_set1_pch(fc);\n+\n+  u2 test2;\n+  test2.m128h = test128;\n+  for (int i = 0; i<4; i++)\n+  {\n+    if (test2.fp[i] != ff) abort();\n+  }\n+\n+}"}]}