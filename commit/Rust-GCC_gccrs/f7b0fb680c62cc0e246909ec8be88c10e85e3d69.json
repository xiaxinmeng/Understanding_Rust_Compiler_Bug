{"sha": "f7b0fb680c62cc0e246909ec8be88c10e85e3d69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdiMGZiNjgwYzYyY2MwZTI0NjkwOWVjOGJlODhjMTBlODVlM2Q2OQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-08-31T08:29:24Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-08-31T08:29:24Z"}, "message": "attribs.c (strip_attrs): Remove.\n\n\t* attribs.c (strip_attrs): Remove.\n\t(split_specs_attrs): Move ...\n\t* c-decl.c: ... to here.\n\t* tree.h (split_specs_attrs, strip_attrs): Remove.\n\t* c-tree.h (split_specs_attrs): Declare.\n\nFrom-SVN: r86823", "tree": {"sha": "a33dfe5d198803168d6b3a46763e2916104ba8f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a33dfe5d198803168d6b3a46763e2916104ba8f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7b0fb680c62cc0e246909ec8be88c10e85e3d69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7b0fb680c62cc0e246909ec8be88c10e85e3d69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7b0fb680c62cc0e246909ec8be88c10e85e3d69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7b0fb680c62cc0e246909ec8be88c10e85e3d69/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f51a38b9c178b325ea983283908f40fc009a1da5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f51a38b9c178b325ea983283908f40fc009a1da5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f51a38b9c178b325ea983283908f40fc009a1da5"}], "stats": {"total": 198, "additions": 88, "deletions": 110}, "files": [{"sha": "8e292b1a94735cd71de893d0e2039e7c12d9e3da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7b0fb680c62cc0e246909ec8be88c10e85e3d69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7b0fb680c62cc0e246909ec8be88c10e85e3d69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7b0fb680c62cc0e246909ec8be88c10e85e3d69", "patch": "@@ -1,3 +1,11 @@\n+2004-08-31  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* attribs.c (strip_attrs): Remove.\n+\t(split_specs_attrs): Move ...\n+\t* c-decl.c: ... to here.\n+\t* tree.h (split_specs_attrs, strip_attrs): Remove.\n+\t* c-tree.h (split_specs_attrs): Declare.\n+\n 2004-08-31  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* read-rtl.c: Disable RTL checking."}, {"sha": "6f111818dd359e103c423bdaa3132642fd1b5c02", "filename": "gcc/attribs.c", "status": "modified", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7b0fb680c62cc0e246909ec8be88c10e85e3d69/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7b0fb680c62cc0e246909ec8be88c10e85e3d69/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=f7b0fb680c62cc0e246909ec8be88c10e85e3d69", "patch": "@@ -335,105 +335,3 @@ decl_attributes (tree *node, tree attributes, int flags)\n \n   return returned_attrs;\n }\n-\n-/* Split SPECS_ATTRS, a list of declspecs and prefix attributes, into two\n-   lists.  SPECS_ATTRS may also be just a typespec (eg: RECORD_TYPE).\n-\n-   The head of the declspec list is stored in DECLSPECS.\n-   The head of the attribute list is stored in PREFIX_ATTRIBUTES.\n-\n-   Note that attributes in SPECS_ATTRS are stored in the TREE_PURPOSE of\n-   the list elements.  We drop the containing TREE_LIST nodes and link the\n-   resulting attributes together the way decl_attributes expects them.  */\n-\n-void\n-split_specs_attrs (tree specs_attrs, tree *declspecs, tree *prefix_attributes)\n-{\n-  tree t, s, a, next, specs, attrs;\n-\n-  /* This can happen after an __extension__ in pedantic mode.  */\n-  if (specs_attrs != NULL_TREE\n-      && TREE_CODE (specs_attrs) == INTEGER_CST)\n-    {\n-      *declspecs = NULL_TREE;\n-      *prefix_attributes = NULL_TREE;\n-      return;\n-    }\n-\n-  /* This can happen in c++ (eg: decl: typespec initdecls ';').  */\n-  if (specs_attrs != NULL_TREE\n-      && TREE_CODE (specs_attrs) != TREE_LIST)\n-    {\n-      *declspecs = specs_attrs;\n-      *prefix_attributes = NULL_TREE;\n-      return;\n-    }\n-\n-  /* Remember to keep the lists in the same order, element-wise.  */\n-\n-  specs = s = NULL_TREE;\n-  attrs = a = NULL_TREE;\n-  for (t = specs_attrs; t; t = next)\n-    {\n-      next = TREE_CHAIN (t);\n-      /* Declspecs have a non-NULL TREE_VALUE.  */\n-      if (TREE_VALUE (t) != NULL_TREE)\n-\t{\n-\t  if (specs == NULL_TREE)\n-\t    specs = s = t;\n-\t  else\n-\t    {\n-\t      TREE_CHAIN (s) = t;\n-\t      s = t;\n-\t    }\n-\t}\n-      /* The TREE_PURPOSE may also be empty in the case of\n-\t __attribute__(()).  */\n-      else if (TREE_PURPOSE (t) != NULL_TREE)\n-\t{\n-\t  if (attrs == NULL_TREE)\n-\t    attrs = a = TREE_PURPOSE (t);\n-\t  else\n-\t    {\n-\t      TREE_CHAIN (a) = TREE_PURPOSE (t);\n-\t      a = TREE_PURPOSE (t);\n-\t    }\n-\t  /* More attrs can be linked here, move A to the end.  */\n-\t  while (TREE_CHAIN (a) != NULL_TREE)\n-\t    a = TREE_CHAIN (a);\n-\t}\n-    }\n-\n-  /* Terminate the lists.  */\n-  if (s != NULL_TREE)\n-    TREE_CHAIN (s) = NULL_TREE;\n-  if (a != NULL_TREE)\n-    TREE_CHAIN (a) = NULL_TREE;\n-\n-  /* All done.  */\n-  *declspecs = specs;\n-  *prefix_attributes = attrs;\n-}\n-\n-/* Strip attributes from SPECS_ATTRS, a list of declspecs and attributes.\n-   This function is used by the parser when a rule will accept attributes\n-   in a particular position, but we don't want to support that just yet.\n-\n-   A warning is issued for every ignored attribute.  */\n-\n-tree\n-strip_attrs (tree specs_attrs)\n-{\n-  tree specs, attrs;\n-\n-  split_specs_attrs (specs_attrs, &specs, &attrs);\n-\n-  while (attrs)\n-    {\n-      warning (\"`%s' attribute ignored\",\n-\t       IDENTIFIER_POINTER (TREE_PURPOSE (attrs)));\n-      attrs = TREE_CHAIN (attrs);\n-    }\n-\n-  return specs;\n-}"}, {"sha": "e358ff6408ca96c67bab9bdf1bd3ceb636b235e7", "filename": "gcc/c-decl.c", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7b0fb680c62cc0e246909ec8be88c10e85e3d69/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7b0fb680c62cc0e246909ec8be88c10e85e3d69/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=f7b0fb680c62cc0e246909ec8be88c10e85e3d69", "patch": "@@ -2797,6 +2797,85 @@ set_array_declarator_inner (tree decl, tree type, bool abstract_p)\n   return decl;\n }\n \f\n+/* Split SPECS_ATTRS, a list of declspecs and prefix attributes, into two\n+   lists.  SPECS_ATTRS may also be just a typespec (eg: RECORD_TYPE).\n+\n+   The head of the declspec list is stored in DECLSPECS.\n+   The head of the attribute list is stored in PREFIX_ATTRIBUTES.\n+\n+   Note that attributes in SPECS_ATTRS are stored in the TREE_PURPOSE of\n+   the list elements.  We drop the containing TREE_LIST nodes and link the\n+   resulting attributes together the way decl_attributes expects them.  */\n+\n+void\n+split_specs_attrs (tree specs_attrs, tree *declspecs, tree *prefix_attributes)\n+{\n+  tree t, s, a, next, specs, attrs;\n+\n+  /* This can happen after an __extension__ in pedantic mode.  */\n+  if (specs_attrs != NULL_TREE\n+      && TREE_CODE (specs_attrs) == INTEGER_CST)\n+    {\n+      *declspecs = NULL_TREE;\n+      *prefix_attributes = NULL_TREE;\n+      return;\n+    }\n+\n+  /* This can happen in c++ (eg: decl: typespec initdecls ';').  */\n+  if (specs_attrs != NULL_TREE\n+      && TREE_CODE (specs_attrs) != TREE_LIST)\n+    {\n+      *declspecs = specs_attrs;\n+      *prefix_attributes = NULL_TREE;\n+      return;\n+    }\n+\n+  /* Remember to keep the lists in the same order, element-wise.  */\n+\n+  specs = s = NULL_TREE;\n+  attrs = a = NULL_TREE;\n+  for (t = specs_attrs; t; t = next)\n+    {\n+      next = TREE_CHAIN (t);\n+      /* Declspecs have a non-NULL TREE_VALUE.  */\n+      if (TREE_VALUE (t) != NULL_TREE)\n+\t{\n+\t  if (specs == NULL_TREE)\n+\t    specs = s = t;\n+\t  else\n+\t    {\n+\t      TREE_CHAIN (s) = t;\n+\t      s = t;\n+\t    }\n+\t}\n+      /* The TREE_PURPOSE may also be empty in the case of\n+\t __attribute__(()).  */\n+      else if (TREE_PURPOSE (t) != NULL_TREE)\n+\t{\n+\t  if (attrs == NULL_TREE)\n+\t    attrs = a = TREE_PURPOSE (t);\n+\t  else\n+\t    {\n+\t      TREE_CHAIN (a) = TREE_PURPOSE (t);\n+\t      a = TREE_PURPOSE (t);\n+\t    }\n+\t  /* More attrs can be linked here, move A to the end.  */\n+\t  while (TREE_CHAIN (a) != NULL_TREE)\n+\t    a = TREE_CHAIN (a);\n+\t}\n+    }\n+\n+  /* Terminate the lists.  */\n+  if (s != NULL_TREE)\n+    TREE_CHAIN (s) = NULL_TREE;\n+  if (a != NULL_TREE)\n+    TREE_CHAIN (a) = NULL_TREE;\n+\n+  /* All done.  */\n+  *declspecs = specs;\n+  *prefix_attributes = attrs;\n+}\n+\n /* Decode a \"typename\", such as \"int **\", returning a ..._TYPE node.  */\n \n tree"}, {"sha": "02ff4a6b28aed1359406d8bc0068b17703ac251e", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7b0fb680c62cc0e246909ec8be88c10e85e3d69/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7b0fb680c62cc0e246909ec8be88c10e85e3d69/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=f7b0fb680c62cc0e246909ec8be88c10e85e3d69", "patch": "@@ -179,6 +179,7 @@ extern void finish_function (void);\n extern tree finish_struct (tree, tree, tree);\n extern tree get_parm_info (bool);\n extern tree grokfield (tree, tree, tree);\n+extern void split_specs_attrs (tree, tree *, tree *);\n extern tree groktypename (tree);\n extern tree groktypename_in_parm_context (tree);\n extern tree grokparm (tree);"}, {"sha": "e815ef0f38943cc4fd4b6d3bf0be6fbd9c0d9e9e", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7b0fb680c62cc0e246909ec8be88c10e85e3d69/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7b0fb680c62cc0e246909ec8be88c10e85e3d69/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f7b0fb680c62cc0e246909ec8be88c10e85e3d69", "patch": "@@ -2895,14 +2895,6 @@ extern tree merge_decl_attributes (tree, tree);\n extern tree merge_type_attributes (tree, tree);\n extern void default_register_cpp_builtins (struct cpp_reader *);\n \n-/* Split a list of declspecs and attributes into two.  */\n-\n-extern void split_specs_attrs (tree, tree *, tree *);\n-\n-/* Strip attributes from a list of combined specs and attrs.  */\n-\n-extern tree strip_attrs (tree);\n-\n /* Return 1 if an attribute and its arguments are valid for a decl or type.  */\n \n extern int valid_machine_attribute (tree, tree, tree, tree);"}]}