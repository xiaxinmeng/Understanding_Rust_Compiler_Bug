{"sha": "eb77256b6395628d3d0841dd71448daf100ff103", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI3NzI1NmI2Mzk1NjI4ZDNkMDg0MWRkNzE0NDhkYWYxMDBmZjEwMw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-12-21T15:56:38Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-12-21T15:56:38Z"}, "message": "EnumSyntax.java, [...]: New files.\n\n2003-12-21  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/print/attribute/EnumSyntax.java,\n\tjavax/print/attribute/SetOfIntegerSyntax.java: New files.\n\t* Makefile.am (ordinary_java_source_files):\n\tAdded javax/print/attribute/EnumSyntax.java\n\tand javax/print/attribute/SetOfIntegerSyntax.java.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r74908", "tree": {"sha": "cdf11349662e314f3fb9facb405982fde8929a2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdf11349662e314f3fb9facb405982fde8929a2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb77256b6395628d3d0841dd71448daf100ff103", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb77256b6395628d3d0841dd71448daf100ff103", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb77256b6395628d3d0841dd71448daf100ff103", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb77256b6395628d3d0841dd71448daf100ff103/comments", "author": null, "committer": null, "parents": [{"sha": "6614fd40d27c83df7f165257727b6a0c76585062", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6614fd40d27c83df7f165257727b6a0c76585062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6614fd40d27c83df7f165257727b6a0c76585062"}], "stats": {"total": 414, "additions": 414, "deletions": 0}, "files": [{"sha": "e993c56c8f03a9a803b4f2753365aae4a93d42e2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb77256b6395628d3d0841dd71448daf100ff103/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb77256b6395628d3d0841dd71448daf100ff103/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=eb77256b6395628d3d0841dd71448daf100ff103", "patch": "@@ -1,3 +1,12 @@\n+2003-12-21  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/print/attribute/EnumSyntax.java,\n+\tjavax/print/attribute/SetOfIntegerSyntax.java: New files.\n+\t* Makefile.am (ordinary_java_source_files):\n+\tAdded javax/print/attribute/EnumSyntax.java\n+\tand javax/print/attribute/SetOfIntegerSyntax.java.\n+\t* Makefile.in: Regenerated.\n+\n 2003-12-21  Michael Koch  <konqueror@gmx.de>\n \n \t* javax/print/attribute/PrintJobAttribute.java,"}, {"sha": "4aeb63fcd4e07a3bc47458c5240cdf9457d2eac5", "filename": "libjava/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb77256b6395628d3d0841dd71448daf100ff103/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb77256b6395628d3d0841dd71448daf100ff103/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=eb77256b6395628d3d0841dd71448daf100ff103", "patch": "@@ -1746,6 +1746,7 @@ javax/print/attribute/AttributeSet.java \\\n javax/print/attribute/DateTimeSyntax.java \\\n javax/print/attribute/DocAttribute.java \\\n javax/print/attribute/DocAttributeSet.java \\\n+javax/print/attribute/EnumSyntax.java \\\n javax/print/attribute/IntegerSyntax.java \\\n javax/print/attribute/PrintJobAttribute.java \\\n javax/print/attribute/PrintJobAttributeSet.java \\\n@@ -1754,6 +1755,7 @@ javax/print/attribute/PrintRequestAttributeSet.java \\\n javax/print/attribute/PrintServiceAttribute.java \\\n javax/print/attribute/PrintServiceAttributeSet.java \\\n javax/print/attribute/ResolutionSyntax.java \\\n+javax/print/attribute/SetOfIntegerSyntax.java \\\n javax/print/attribute/Size2DSyntax.java \\\n javax/print/attribute/SupportedValuesAttribute.java \\\n javax/print/attribute/TextSyntax.java \\"}, {"sha": "acf9abc370f7d9b44b3647b19799ed2a169d0e7f", "filename": "libjava/Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb77256b6395628d3d0841dd71448daf100ff103/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb77256b6395628d3d0841dd71448daf100ff103/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=eb77256b6395628d3d0841dd71448daf100ff103", "patch": "@@ -1462,6 +1462,7 @@ javax/print/attribute/AttributeSet.java \\\n javax/print/attribute/DateTimeSyntax.java \\\n javax/print/attribute/DocAttribute.java \\\n javax/print/attribute/DocAttributeSet.java \\\n+javax/print/attribute/EnumSyntax.java \\\n javax/print/attribute/IntegerSyntax.java \\\n javax/print/attribute/PrintJobAttribute.java \\\n javax/print/attribute/PrintJobAttributeSet.java \\\n@@ -1470,6 +1471,7 @@ javax/print/attribute/PrintRequestAttributeSet.java \\\n javax/print/attribute/PrintServiceAttribute.java \\\n javax/print/attribute/PrintServiceAttributeSet.java \\\n javax/print/attribute/ResolutionSyntax.java \\\n+javax/print/attribute/SetOfIntegerSyntax.java \\\n javax/print/attribute/Size2DSyntax.java \\\n javax/print/attribute/SupportedValuesAttribute.java \\\n javax/print/attribute/TextSyntax.java \\\n@@ -4069,6 +4071,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/javax/print/attribute/DateTimeSyntax.P \\\n .deps/javax/print/attribute/DocAttribute.P \\\n .deps/javax/print/attribute/DocAttributeSet.P \\\n+.deps/javax/print/attribute/EnumSyntax.P \\\n .deps/javax/print/attribute/IntegerSyntax.P \\\n .deps/javax/print/attribute/PrintJobAttribute.P \\\n .deps/javax/print/attribute/PrintJobAttributeSet.P \\\n@@ -4077,6 +4080,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/javax/print/attribute/PrintServiceAttribute.P \\\n .deps/javax/print/attribute/PrintServiceAttributeSet.P \\\n .deps/javax/print/attribute/ResolutionSyntax.P \\\n+.deps/javax/print/attribute/SetOfIntegerSyntax.P \\\n .deps/javax/print/attribute/Size2DSyntax.P \\\n .deps/javax/print/attribute/SupportedValuesAttribute.P \\\n .deps/javax/print/attribute/TextSyntax.P \\"}, {"sha": "c5a096c2fe622d77a6716721a89294f389bc41b9", "filename": "libjava/javax/print/attribute/EnumSyntax.java", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb77256b6395628d3d0841dd71448daf100ff103/libjava%2Fjavax%2Fprint%2Fattribute%2FEnumSyntax.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb77256b6395628d3d0841dd71448daf100ff103/libjava%2Fjavax%2Fprint%2Fattribute%2FEnumSyntax.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FEnumSyntax.java?ref=eb77256b6395628d3d0841dd71448daf100ff103", "patch": "@@ -0,0 +1,146 @@\n+/* EnumSyntax.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * @author Michael Koch\n+ */\n+public abstract class EnumSyntax implements Cloneable, Serializable\n+{\n+  private static final long serialVersionUID = -2739521845085831642L;\n+  \n+  private int value;\n+\n+  /**\n+   * Creates a <code>EnumSyntax</code> object.\n+   *\n+   * @param value the value to set\n+   */\n+  protected EnumSyntax(int value)\n+  {\n+    this.value = value;\n+  }\n+\n+  /**\n+   * Returns the value of this object.\n+   *\n+   * @return the value\n+   */\n+  public int getValue()\n+  {\n+    return value;\n+  }\n+\n+  /**\n+   * Clones this object.\n+   *\n+   * @return a clone of this object\n+   */\n+  public Object clone()\n+  {\n+    try\n+      {\n+        return super.clone();\n+      }\n+    catch (CloneNotSupportedException e)\n+      {\n+        // Cannot happen as we implement java.lang.Cloneable.\n+        return null;\n+      }\n+  }\n+\n+  /**\n+   * Returns the hashcode for this object.\n+   *\n+   * @return the hashcode\n+   */\n+  public int hashCode()\n+  {\n+    return value;\n+  }\n+\n+  /**\n+   * Returns the string representation for this object.\n+   *\n+   * @return the string representation\n+   */\n+  public String toString()\n+  {\n+    int index = value - getOffset();\n+    String[] table = getStringTable();\n+\n+    if (table != null\n+        && index >= 0\n+        && index < table.length)\n+      return table[index];\n+    \n+    return \"\" + value;\n+  }\n+\n+  /**\n+   * Returns a table with the enumeration values represented as strings\n+   * for this object.\n+   *\n+   * The default implementation just returns null.\n+   *\n+   * @return the enumeration values as strings\n+   */\n+  public String[] getStringTable()\n+  {\n+    return null;\n+  }\n+\n+  /**\n+   * Returns a table with the enumeration values for this object.\n+   *\n+   * The default implementation just returns null.\n+   *\n+   * @return the enumeration values\n+   */\n+  public EnumSyntax[] getEnumValueTable()\n+  {\n+    return null;\n+  }\n+\n+  public int getOffset()\n+  {\n+    return 0;\n+  }\n+}"}, {"sha": "3204187afd47cca209bf6694c24a223eaac8c9fb", "filename": "libjava/javax/print/attribute/SetOfIntegerSyntax.java", "status": "added", "additions": 253, "deletions": 0, "changes": 253, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb77256b6395628d3d0841dd71448daf100ff103/libjava%2Fjavax%2Fprint%2Fattribute%2FSetOfIntegerSyntax.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb77256b6395628d3d0841dd71448daf100ff103/libjava%2Fjavax%2Fprint%2Fattribute%2FSetOfIntegerSyntax.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FSetOfIntegerSyntax.java?ref=eb77256b6395628d3d0841dd71448daf100ff103", "patch": "@@ -0,0 +1,253 @@\n+/* SetOfIntegerSyntax.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute;\n+\n+import java.io.Serializable;\n+import java.util.Vector;\n+\n+/**\n+ * @author Michael Koch\n+ */\n+public abstract class SetOfIntegerSyntax\n+  implements Cloneable, Serializable\n+{\n+  private static final long serialVersionUID = 3666874174847632203L;\n+\n+  private int[][] members;\n+\n+  private static int[][] normalize(Vector vecMembers)\n+  {\n+    // XXX: Perhaps we should merge ranges that overlap.\n+    \n+    int current = 0;\n+    int[][] members = new int[vecMembers.size()][];\n+\n+    while (vecMembers.size() > 0)\n+      {\n+        // Search the lowest range.\n+        int[] range = (int[]) vecMembers.elementAt(0);\n+\n+        for (int index = 1; index < vecMembers.size(); index++)\n+          {\n+            int[] tmp = (int[]) vecMembers.elementAt(index);\n+\n+            if (range[0] > tmp[0]\n+                || (range[0] == tmp[0]\n+                    && range[0] > tmp[0]))\n+              range = tmp;\n+          }\n+\n+        members[current] = range;\n+        current++;\n+      }\n+    \n+    return members;\n+  }\n+  \n+  /**\n+   * Creates a <code>SetOfIntegerSyntax</code> object.\n+   *\n+   * @param member the member value\n+   *\n+   * @exception IllegalArgumentException if member is < 0\n+   */\n+  protected SetOfIntegerSyntax(int member)\n+  {\n+    if (member < 0)\n+      throw new IllegalArgumentException(\"member may not be less then 0\");\n+\n+    this.members = new int[][]{{member, member}};\n+  }\n+\n+  /**\n+   * Creates a <code>SetOfIntegerSyntax</code> object.\n+   *\n+   * @param members the members to use in this set\n+   *\n+   * @exception IllegalArgumentException if any element is invalid\n+   * @exception NullPointerException if any element of members is null\n+   */\n+  protected SetOfIntegerSyntax(int[][] members)\n+  {\n+    Vector vecMembers = new Vector();\n+    \n+    if (members != null)\n+      {\n+        for (int index = 0; index < members.length; index++)\n+          {\n+            int lower;\n+            int upper;\n+\n+            if (members[index].length == 1)\n+              {\n+                lower = members[index][0];\n+                upper = members[index][0];\n+              }\n+            else if (members[index].length == 2)\n+              {\n+                lower = members[index][0];\n+                upper = members[index][1];\n+              }\n+            else\n+              throw new IllegalArgumentException(\"invalid member element\");\n+\n+            if (lower <= upper && lower < 0)\n+              throw new IllegalArgumentException(\"invalid member element\");\n+\n+            if (lower <= upper)\n+              {\n+                int[] range = new int[2];\n+                range[0] = lower;\n+                range[1] = upper;\n+                vecMembers.add(range);\n+              }\n+          }\n+      }\n+    \n+    this.members = normalize(vecMembers);\n+  }\n+\n+  /**\n+   * Creates a <code>SetOfIntegerSyntax</code> object.\n+   *\n+   * @param lowerBound the lower bound value\n+   * @param upperBound the upper bound value\n+   *\n+   * @exception IllegalArgumentException if lowerBound <= uppbound\n+   * and lowerBound < 0\n+   */\n+  protected SetOfIntegerSyntax(int lowerBound, int upperBound)\n+  {\n+    if (lowerBound <= upperBound\n+        && lowerBound < 0)\n+      throw new IllegalArgumentException();\n+\n+    members = (lowerBound <= upperBound ? new int[][]{{lowerBound, upperBound}}\n+                                        : new int[0][]);\n+  }\n+\n+  /**\n+   * Checks if this set contains value.\n+   *\n+   * @param value the value to test for\n+   *\n+   * @return true if this set contains value, false otherwise\n+   */\n+  public boolean contains(int value)\n+  {\n+    // This only works on a normalized member array.\n+    for (int index = 0; index < members.length; index++)\n+      {\n+        if (value < members[index][0])\n+          return false;\n+        else if (value < members[index][1])\n+          return true;\n+      }\n+\n+    return false;\n+  }\n+\n+  /**\n+   * Checks if this set contains value.\n+   *\n+   * @param value the value to test for\n+   *\n+   * @return true if this set contains value, false otherwise\n+   */\n+  public boolean contains(IntegerSyntax value)\n+  {\n+    return contains(value.getValue());\n+  }\n+\n+  /**\n+   * Tests of obj is equal to this object.\n+   *\n+   * @param obj the object to test\n+   *\n+   * @returns true if both objects are equal, false otherwise.\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if (! (obj instanceof SetOfIntegerSyntax))\n+      return false;\n+\n+    throw new Error(\"not implemented\");\n+  }\n+\n+  /**\n+   * Returns an array describing the members included in this set.\n+   *\n+   * @return the array with the members\n+   */\n+  public int[][] getMembers()\n+  {\n+    throw new Error(\"not implemented\");\n+  }\n+\n+  /**\n+   * Returns the hashcode for this object.\n+   *\n+   * @return the hashcode\n+   */\n+  public int hashCode()\n+  {\n+    throw new Error(\"not implemented\");\n+  }\n+\n+  /**\n+   * Returns the smallest value that is greater then x.\n+   *\n+   * @param x an integer value\n+   *\n+   * @return the next value\n+   */\n+  public int next(int x)\n+  {\n+    throw new Error(\"not implemented\");\n+  }\n+\n+  /**\n+   * Returns the string representation for this object.\n+   *\n+   * @return the string representation\n+   */\n+  public String toString()\n+  {\n+    throw new Error(\"not implemented\");\n+  }\n+}"}]}