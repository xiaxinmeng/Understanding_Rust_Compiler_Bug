{"sha": "7f0942424b7229797dfbcb7b9467c788df8c26b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YwOTQyNDI0YjcyMjk3OTdkZmJjYjdiOTQ2N2M3ODhkZjhjMjZiMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-09-28T09:16:44Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-11-24T10:16:00Z"}, "message": "[Ada] Implement Big_Integer.From_String fully\n\ngcc/ada/\n\n\t* libgnat/a-nbnbin.adb (From_String): Implement fully.", "tree": {"sha": "fe5aae5f19d87620ea7f538387f0fa9057f22a10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe5aae5f19d87620ea7f538387f0fa9057f22a10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f0942424b7229797dfbcb7b9467c788df8c26b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f0942424b7229797dfbcb7b9467c788df8c26b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f0942424b7229797dfbcb7b9467c788df8c26b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f0942424b7229797dfbcb7b9467c788df8c26b0/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e65b68dd67e45ae54aa47f41a1f8a8d8296cf26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e65b68dd67e45ae54aa47f41a1f8a8d8296cf26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e65b68dd67e45ae54aa47f41a1f8a8d8296cf26"}], "stats": {"total": 187, "additions": 186, "deletions": 1}, "files": [{"sha": "e40be35e72ed574046924ec3a4910a53412646d1", "filename": "gcc/ada/libgnat/a-nbnbin.adb", "status": "modified", "additions": 186, "deletions": 1, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f0942424b7229797dfbcb7b9467c788df8c26b0/gcc%2Fada%2Flibgnat%2Fa-nbnbin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f0942424b7229797dfbcb7b9467c788df8c26b0/gcc%2Fada%2Flibgnat%2Fa-nbnbin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbin.adb?ref=7f0942424b7229797dfbcb7b9467c788df8c26b0", "patch": "@@ -236,11 +236,196 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -----------------\n \n    function From_String (Arg : String) return Big_Integer is\n+      procedure Scan_Decimal\n+        (Arg : String; J : in out Natural; Result : out Big_Integer);\n+      --  Scan decimal value starting at Arg (J). Store value in Result if\n+      --  successful, raise Constraint_Error if not. On exit, J points to the\n+      --  first index past the decimal value.\n+\n+      ------------------\n+      -- Scan_Decimal --\n+      ------------------\n+\n+      procedure Scan_Decimal\n+        (Arg : String; J : in out Natural; Result : out Big_Integer)\n+      is\n+         Initial_J : constant Natural := J;\n+         Ten       : constant Big_Integer := To_Big_Integer (10);\n+      begin\n+         Result := To_Big_Integer (0);\n+\n+         while J <= Arg'Last loop\n+            if Arg (J) in '0' .. '9' then\n+               Result :=\n+                 Result * Ten + To_Big_Integer (Character'Pos (Arg (J))\n+                                                  - Character'Pos ('0'));\n+\n+            elsif Arg (J) = '_' then\n+               if J in Initial_J | Arg'Last\n+                 or else Arg (J - 1) not in '0' .. '9'\n+                 or else Arg (J + 1) not in '0' .. '9'\n+               then\n+                  raise Constraint_Error with \"invalid integer value: \" & Arg;\n+               end if;\n+            else\n+               exit;\n+            end if;\n+\n+            J := J + 1;\n+         end loop;\n+      end Scan_Decimal;\n+\n       Result : Big_Integer;\n+\n    begin\n-      --  ??? only support Long_Long_Long_Integer, good enough for now\n+      --  First try the fast path via Long_Long_Long_Integer'Value\n+\n       Set_Bignum (Result, To_Bignum (Long_Long_Long_Integer'Value (Arg)));\n       return Result;\n+\n+   exception\n+      when Constraint_Error =>\n+         --  Then try the slow path\n+\n+         declare\n+            Neg        : Boolean  := False;\n+            Base_Found : Boolean  := False;\n+            Base_Int   : Positive := 10;\n+            J          : Natural  := Arg'First;\n+            Val        : Natural;\n+            Base       : Big_Integer;\n+            Exp        : Big_Integer;\n+\n+         begin\n+            --  Scan past leading blanks\n+\n+            while J <= Arg'Last and then Arg (J) = ' ' loop\n+               J := J + 1;\n+            end loop;\n+\n+            if J > Arg'Last then\n+               raise;\n+            end if;\n+\n+            --  Scan and store negative sign if found\n+\n+            if Arg (J) = '-' then\n+               Neg := True;\n+               J   := J + 1;\n+            end if;\n+\n+            --  Scan decimal value: either the result itself, or the base\n+            --  value if followed by a '#'.\n+\n+            Scan_Decimal (Arg, J, Result);\n+\n+            --  Scan explicit base if requested\n+\n+            if J <= Arg'Last and then Arg (J) = '#' then\n+               Base_Int := To_Integer (Result);\n+\n+               if Base_Int not in 2 .. 16 then\n+                  raise;\n+               end if;\n+\n+               Base_Found := True;\n+               Base       := Result;\n+               Result     := To_Big_Integer (0);\n+               J          := J + 1;\n+\n+               while J <= Arg'Last loop\n+                  case Arg (J) is\n+                     when '0' .. '9' =>\n+                        Val := Character'Pos (Arg (J)) - Character'Pos ('0');\n+\n+                        if Val >= Base_Int then\n+                           raise;\n+                        end if;\n+\n+                        Result := Result * Base + To_Big_Integer (Val);\n+\n+                     when 'a' .. 'f' =>\n+                        Val :=\n+                          10 + Character'Pos (Arg (J)) - Character'Pos ('a');\n+\n+                        if Val >= Base_Int then\n+                           raise;\n+                        end if;\n+\n+                        Result := Result * Base + To_Big_Integer (Val);\n+\n+                     when 'A' .. 'F' =>\n+                        Val :=\n+                          10 + Character'Pos (Arg (J)) - Character'Pos ('A');\n+\n+                        if Val >= Base_Int then\n+                           raise;\n+                        end if;\n+\n+                        Result := Result * Base + To_Big_Integer (Val);\n+\n+                     when '_' =>\n+\n+                        --  We only allow _ preceded and followed by a valid\n+                        --  number and not any other character.\n+\n+                        if J in Arg'First | Arg'Last\n+                          or else Arg (J - 1) in '_' | '#'\n+                          or else Arg (J + 1) = '#'\n+                        then\n+                           raise;\n+                        end if;\n+\n+                     when '#' =>\n+                        J := J + 1;\n+                        exit;\n+\n+                     when others =>\n+                        raise;\n+                  end case;\n+\n+                  J := J + 1;\n+               end loop;\n+            else\n+               Base := To_Big_Integer (10);\n+            end if;\n+\n+            if Base_Found and then Arg (J - 1) /= '#' then\n+               raise;\n+            end if;\n+\n+            if J <= Arg'Last then\n+\n+               --  Scan exponent\n+\n+               if Arg (J) in 'e' | 'E' then\n+                  J := J + 1;\n+\n+                  if Arg (J) = '+' then\n+                     J := J + 1;\n+                  end if;\n+\n+                  Scan_Decimal (Arg, J, Exp);\n+                  Result := Result * (Base ** To_Integer (Exp));\n+               end if;\n+\n+               --  Scan past trailing blanks\n+\n+               while J <= Arg'Last and then Arg (J) = ' ' loop\n+                  J := J + 1;\n+               end loop;\n+\n+               if J <= Arg'Last then\n+                  raise;\n+               end if;\n+            end if;\n+\n+            if Neg then\n+               return -Result;\n+            else\n+               return Result;\n+            end if;\n+         end;\n    end From_String;\n \n    ---------------"}]}