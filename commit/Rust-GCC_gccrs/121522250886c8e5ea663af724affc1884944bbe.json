{"sha": "121522250886c8e5ea663af724affc1884944bbe", "node_id": "C_kwDOANBUbNoAKDEyMTUyMjI1MDg4NmM4ZTVlYTY2M2FmNzI0YWZmYzE4ODQ5NDRiYmU", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-05-04T10:31:14Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-06-01T08:43:17Z"}, "message": "[Ada] Fix composability of return on the secondary stack\n\nHaving components that need to be returned on the secondary stack would\nnot always force a record type to be returned on the secondary stack\nitself.\n\ngcc/ada/\n\n\t* sem_util.adb\n\t(Returns_On_Secondary_Stack.Caller_Known_Size_Record): Directly\n\tcheck the dependence on discriminants for the variant part, if\n\tany, instead of calling the Is_Definite_Subtype predicate.", "tree": {"sha": "d6f670ed3fde05d4e4057ef4ae5f719af5cc134a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6f670ed3fde05d4e4057ef4ae5f719af5cc134a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/121522250886c8e5ea663af724affc1884944bbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/121522250886c8e5ea663af724affc1884944bbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/121522250886c8e5ea663af724affc1884944bbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/121522250886c8e5ea663af724affc1884944bbe/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdb2f2e696250fafc13635ac8c026d82e05f7738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdb2f2e696250fafc13635ac8c026d82e05f7738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdb2f2e696250fafc13635ac8c026d82e05f7738"}], "stats": {"total": 61, "additions": 47, "deletions": 14}, "files": [{"sha": "21b6ee448f47334a9c229f94167d5f7358e45bd0", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 47, "deletions": 14, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/121522250886c8e5ea663af724affc1884944bbe/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/121522250886c8e5ea663af724affc1884944bbe/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=121522250886c8e5ea663af724affc1884944bbe", "patch": "@@ -27388,14 +27388,8 @@ package body Sem_Util is\n       pragma Assert (if Present (Id) then Ekind (Id) in E_Void | Type_Kind);\n \n       function Caller_Known_Size_Record (Typ : Entity_Id) return Boolean;\n-      --  This is called for untagged records and protected types, with\n-      --  nondefaulted discriminants. Returns True if the size of function\n-      --  results is known at the call site, False otherwise. Returns False\n-      --  if there is a variant part that depends on the discriminants of\n-      --  this type, or if there is an array constrained by the discriminants\n-      --  of this type. ???Currently, this is overly conservative (the array\n-      --  could be nested inside some other record that is constrained by\n-      --  nondiscriminants). That is, the recursive calls are too conservative.\n+      --  Called for untagged record and protected types. Return True if the\n+      --  size of function results is known in the caller for Typ.\n \n       function Large_Max_Size_Mutable (Typ : Entity_Id) return Boolean;\n       --  Returns True if Typ is a nonlimited record with defaulted\n@@ -27409,22 +27403,61 @@ package body Sem_Util is\n       function Caller_Known_Size_Record (Typ : Entity_Id) return Boolean is\n          pragma Assert (Typ = Underlying_Type (Typ));\n \n+         function Depends_On_Discriminant (Typ : Entity_Id) return Boolean;\n+         --  Called for untagged record and protected types. Return True if Typ\n+         --  depends on discriminants, either directly when it is unconstrained\n+         --  or indirectly when it is constrained by uplevel discriminants.\n+\n+         -----------------------------\n+         -- Depends_On_Discriminant --\n+         -----------------------------\n+\n+         function Depends_On_Discriminant (Typ : Entity_Id) return Boolean is\n+            Cons : Elmt_Id;\n+\n+         begin\n+            if Has_Discriminants (Typ) then\n+               if not Is_Constrained (Typ) then\n+                  return True;\n+\n+               else\n+                  Cons := First_Elmt (Discriminant_Constraint (Typ));\n+                  while Present (Cons) loop\n+                     if Nkind (Node (Cons)) = N_Identifier\n+                       and then Ekind (Entity (Node (Cons))) = E_Discriminant\n+                     then\n+                        return True;\n+                     end if;\n+\n+                     Next_Elmt (Cons);\n+                  end loop;\n+               end if;\n+            end if;\n+\n+            return False;\n+         end Depends_On_Discriminant;\n+\n       begin\n-         if Has_Variant_Part (Typ) and then not Is_Definite_Subtype (Typ) then\n+         --  First see if we have a variant part and return False if it depends\n+         --  on discriminants.\n+\n+         if Has_Variant_Part (Typ) and then Depends_On_Discriminant (Typ) then\n             return False;\n          end if;\n \n+         --  Then loop over components and return False if their subtype has a\n+         --  caller-unknown size, possibly recursively.\n+\n+         --  ??? This is overly conservative, an array could be nested inside\n+         --  some other record that is constrained by nondiscriminants. That\n+         --  is, the recursive calls are too conservative.\n+\n          declare\n             Comp : Entity_Id;\n \n          begin\n             Comp := First_Component (Typ);\n             while Present (Comp) loop\n-\n-               --  Only look at E_Component entities. No need to look at\n-               --  E_Discriminant entities, and we must ignore internal\n-               --  subtypes generated for constrained components.\n-\n                declare\n                   Comp_Type : constant Entity_Id :=\n                                 Underlying_Type (Etype (Comp));"}]}