{"sha": "1d3e12c469e5f5627c2e271232e1a3d8a88783be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQzZTEyYzQ2OWU1ZjU2MjdjMmUyNzEyMzJlMWEzZDhhODg3ODNiZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-10-02T11:58:57Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-10-02T12:01:17Z"}, "message": "c++: Simplify __FUNCTION__ creation\n\nI had reason to wander into cp_make_fname, and noticed it's the only\ncaller of cp_fname_init.  Folding it in makes the code simpler.\n\n\tgcc/cp/\n\t* cp-tree.h (cp_fname_init): Delete declaration.\n\t* decl.c (cp_fname_init): Merge into only caller ...\n\t(cp_make_fname): ... here & refactor.", "tree": {"sha": "767e018251ed3831e26df13d1ccb9586f0302df1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/767e018251ed3831e26df13d1ccb9586f0302df1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d3e12c469e5f5627c2e271232e1a3d8a88783be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d3e12c469e5f5627c2e271232e1a3d8a88783be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d3e12c469e5f5627c2e271232e1a3d8a88783be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d3e12c469e5f5627c2e271232e1a3d8a88783be/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05d39f0de9ee0455d7b2b60f314f4231bc9a87c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05d39f0de9ee0455d7b2b60f314f4231bc9a87c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05d39f0de9ee0455d7b2b60f314f4231bc9a87c1"}], "stats": {"total": 86, "additions": 32, "deletions": 54}, "files": [{"sha": "9f948aee2d82b83a9fef0b227d034755f3371e15", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3e12c469e5f5627c2e271232e1a3d8a88783be/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3e12c469e5f5627c2e271232e1a3d8a88783be/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1d3e12c469e5f5627c2e271232e1a3d8a88783be", "patch": "@@ -6514,7 +6514,6 @@ extern tree create_implicit_typedef\t\t(tree, tree);\n extern int local_variable_p\t\t\t(const_tree);\n extern tree register_dtor_fn\t\t\t(tree);\n extern tmpl_spec_kind current_tmpl_spec_kind\t(int);\n-extern tree cp_fname_init\t\t\t(const char *, tree *);\n extern tree cxx_builtin_function\t\t(tree decl);\n extern tree cxx_builtin_function_ext_scope\t(tree decl);\n extern tree cxx_simulate_builtin_function_decl\t(tree);"}, {"sha": "6b306ee466758c5ef70ca404f9807a1db7fa68ac", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 32, "deletions": 53, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3e12c469e5f5627c2e271232e1a3d8a88783be/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3e12c469e5f5627c2e271232e1a3d8a88783be/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1d3e12c469e5f5627c2e271232e1a3d8a88783be", "patch": "@@ -4592,38 +4592,6 @@ cxx_init_decl_processing (void)\n     using_eh_for_cleanups ();\n }\n \n-/* Generate an initializer for a function naming variable from\n-   NAME. NAME may be NULL, to indicate a dependent name.  TYPE_P is\n-   filled in with the type of the init.  */\n-\n-tree\n-cp_fname_init (const char* name, tree *type_p)\n-{\n-  tree domain = NULL_TREE;\n-  tree type;\n-  tree init = NULL_TREE;\n-  size_t length = 0;\n-\n-  if (name)\n-    {\n-      length = strlen (name);\n-      domain = build_index_type (size_int (length));\n-      init = build_string (length + 1, name);\n-    }\n-\n-  type = cp_build_qualified_type (char_type_node, TYPE_QUAL_CONST);\n-  type = build_cplus_array_type (type, domain);\n-\n-  *type_p = type;\n-\n-  if (init)\n-    TREE_TYPE (init) = type;\n-  else\n-    init = error_mark_node;\n-\n-  return init;\n-}\n-\n /* Create the VAR_DECL for __FUNCTION__ etc. ID is the name to give\n    the decl, LOC is the location to give the decl, NAME is the\n    initialization string and TYPE_DEP indicates whether NAME depended\n@@ -4634,31 +4602,45 @@ cp_fname_init (const char* name, tree *type_p)\n static tree\n cp_make_fname_decl (location_t loc, tree id, int type_dep)\n {\n-  const char * name = NULL;\n-  bool release_name = false;\n+  tree domain = NULL_TREE;\n+  tree init = NULL_TREE;\n+\n   if (!(type_dep && in_template_function ()))\n     {\n+      const char *name = NULL;\n+      bool release_name = false;\n+\n       if (current_function_decl == NULL_TREE)\n \tname = \"top level\";\n-      else if (type_dep == 1) /* __PRETTY_FUNCTION__ */\n-\tname = cxx_printable_name (current_function_decl, 2);\n-      else if (type_dep == 0) /* __FUNCTION__ */\n+      else if (type_dep == 0)\n \t{\n+\t  /* __FUNCTION__ */\t  \n \t  name = fname_as_string (type_dep);\n \t  release_name = true;\n \t}\n       else\n-\tgcc_unreachable ();\n+\t{\n+\t  /* __PRETTY_FUNCTION__ */\n+\t  gcc_checking_assert (type_dep == 1);\n+\t  name = cxx_printable_name (current_function_decl, 2);\n+\t}\n+\n+      size_t length = strlen (name);\n+      domain = build_index_type (size_int (length));\n+      init = build_string (length + 1, name);\n+      if (release_name)\n+\tfree (const_cast<char *> (name));\n     }\n-  tree type;\n-  tree init = cp_fname_init (name, &type);\n-  tree decl = build_decl (loc, VAR_DECL, id, type);\n \n-  if (release_name)\n-    free (CONST_CAST (char *, name));\n+  tree type = cp_build_qualified_type (char_type_node, TYPE_QUAL_CONST);\n+  type = build_cplus_array_type (type, domain);\n \n-  /* As we're using pushdecl_with_scope, we must set the context.  */\n-  DECL_CONTEXT (decl) = current_function_decl;\n+  if (init)\n+    TREE_TYPE (init) = type;\n+  else\n+    init = error_mark_node;\n+\n+  tree decl = build_decl (loc, VAR_DECL, id, type);\n \n   TREE_READONLY (decl) = 1;\n   DECL_ARTIFICIAL (decl) = 1;\n@@ -4667,13 +4649,10 @@ cp_make_fname_decl (location_t loc, tree id, int type_dep)\n \n   TREE_USED (decl) = 1;\n \n-  if (init)\n-    {\n-      SET_DECL_VALUE_EXPR (decl, init);\n-      DECL_HAS_VALUE_EXPR_P (decl) = 1;\n-      /* For decl_constant_var_p.  */\n-      DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl) = 1;\n-    }\n+  SET_DECL_VALUE_EXPR (decl, init);\n+  DECL_HAS_VALUE_EXPR_P (decl) = 1;\n+  /* For decl_constant_var_p.  */\n+  DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl) = 1;\n \n   if (current_function_decl)\n     {\n@@ -4685,7 +4664,7 @@ cp_make_fname_decl (location_t loc, tree id, int type_dep)\n   else\n     {\n       DECL_THIS_STATIC (decl) = true;\n-      pushdecl_top_level_and_finish (decl, NULL_TREE);\n+      decl = pushdecl_top_level_and_finish (decl, NULL_TREE);\n     }\n \n   return decl;"}]}