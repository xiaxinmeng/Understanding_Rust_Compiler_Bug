{"sha": "408702b44570a4c92e4f9d05cd97f98cf12a4eb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA4NzAyYjQ0NTcwYTRjOTJlNGY5ZDA1Y2Q5N2Y5OGNmMTJhNGViNA==", "commit": {"author": {"name": "Renlin Li", "email": "renlin.li@arm.com", "date": "2016-08-09T17:20:14Z"}, "committer": {"name": "Renlin Li", "email": "renlin@gcc.gnu.org", "date": "2016-08-09T17:20:14Z"}, "message": "[PATCH][PR64971]Convert function pointer to Pmode when emit call.\n\ngcc/\n\n2016-08-04  Renlin Li  <renlin.li@arm.com>\n\n\tPR middle-end/64971\n\t* calls.c (prepare_call_address): Convert funexp to Pmode when\n\tnecessary.\n\t* config/aarch64/aarch64.md (sibcall): Remove fix for PR 64971.\n\t(sibcall_value): Likewise.\n\nFrom-SVN: r239300", "tree": {"sha": "cf4bf4eff74b4d63228faeb3496ff8880b11304d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf4bf4eff74b4d63228faeb3496ff8880b11304d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/408702b44570a4c92e4f9d05cd97f98cf12a4eb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/408702b44570a4c92e4f9d05cd97f98cf12a4eb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/408702b44570a4c92e4f9d05cd97f98cf12a4eb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/408702b44570a4c92e4f9d05cd97f98cf12a4eb4/comments", "author": null, "committer": null, "parents": [{"sha": "d676d623eb1e2aabcb2d3c10574a1c240083a22a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d676d623eb1e2aabcb2d3c10574a1c240083a22a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d676d623eb1e2aabcb2d3c10574a1c240083a22a"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "40537cba7e70c6da1ca5ee1e92d6eee59b1cdad5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/408702b44570a4c92e4f9d05cd97f98cf12a4eb4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/408702b44570a4c92e4f9d05cd97f98cf12a4eb4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=408702b44570a4c92e4f9d05cd97f98cf12a4eb4", "patch": "@@ -1,3 +1,11 @@\n+2016-08-09  Renlin Li  <renlin.li@arm.com>\n+\n+\tPR middle-end/64971\n+\t* calls.c (prepare_call_address): Convert funexp to Pmode when\n+\tnecessary.\n+\t* config/aarch64/aarch64.md (sibcall): Remove fix for PR 64971.\n+\t(sibcall_value): Likewise.\n+\n 2016-08-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/7652"}, {"sha": "4ad3e34d67752656f289b6040088d57cd9bfb4c5", "filename": "gcc/calls.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/408702b44570a4c92e4f9d05cd97f98cf12a4eb4/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/408702b44570a4c92e4f9d05cd97f98cf12a4eb4/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=408702b44570a4c92e4f9d05cd97f98cf12a4eb4", "patch": "@@ -194,10 +194,19 @@ prepare_call_address (tree fndecl_or_type, rtx funexp, rtx static_chain_value,\n \t       && targetm.small_register_classes_for_mode_p (FUNCTION_MODE))\n \t      ? force_not_mem (memory_address (FUNCTION_MODE, funexp))\n \t      : memory_address (FUNCTION_MODE, funexp));\n-  else if (! sibcallp)\n+  else\n     {\n-      if (!NO_FUNCTION_CSE && optimize && ! flag_no_function_cse)\n-\tfunexp = force_reg (Pmode, funexp);\n+      /* funexp could be a SYMBOL_REF represents a function pointer which is\n+\t of ptr_mode.  In this case, it should be converted into address mode\n+\t to be a valid address for memory rtx pattern.  See PR 64971.  */\n+      if (GET_MODE (funexp) != Pmode)\n+\tfunexp = convert_memory_address (Pmode, funexp);\n+\n+      if (! sibcallp)\n+\t{\n+\t  if (!NO_FUNCTION_CSE && optimize && ! flag_no_function_cse)\n+\t    funexp = force_reg (Pmode, funexp);\n+\t}\n     }\n \n   if (static_chain_value != 0"}, {"sha": "c95258b71033451ab1d5f4826e0bfa0044edc704", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/408702b44570a4c92e4f9d05cd97f98cf12a4eb4/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/408702b44570a4c92e4f9d05cd97f98cf12a4eb4/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=408702b44570a4c92e4f9d05cd97f98cf12a4eb4", "patch": "@@ -859,13 +859,6 @@\n \t   || aarch64_is_noplt_call_p (callee)))\n       XEXP (operands[0], 0) = force_reg (Pmode, callee);\n \n-    /* FIXME: This is a band-aid.  Need to analyze why expand_expr_addr_expr\n-       is generating an SImode symbol reference.  See PR 64971.  */\n-    if (TARGET_ILP32\n-\t&& GET_CODE (XEXP (operands[0], 0)) == SYMBOL_REF\n-\t&& GET_MODE (XEXP (operands[0], 0)) == SImode)\n-      XEXP (operands[0], 0) = convert_memory_address (Pmode,\n-\t\t\t\t\t\t      XEXP (operands[0], 0));\n     if (operands[2] == NULL_RTX)\n       operands[2] = const0_rtx;\n \n@@ -897,14 +890,6 @@\n \t   || aarch64_is_noplt_call_p (callee)))\n       XEXP (operands[1], 0) = force_reg (Pmode, callee);\n \n-    /* FIXME: This is a band-aid.  Need to analyze why expand_expr_addr_expr\n-       is generating an SImode symbol reference.  See PR 64971.  */\n-    if (TARGET_ILP32\n-\t&& GET_CODE (XEXP (operands[1], 0)) == SYMBOL_REF\n-\t&& GET_MODE (XEXP (operands[1], 0)) == SImode)\n-      XEXP (operands[1], 0) = convert_memory_address (Pmode,\n-\t\t\t\t\t\t      XEXP (operands[1], 0));\n-\n     if (operands[3] == NULL_RTX)\n       operands[3] = const0_rtx;\n "}]}