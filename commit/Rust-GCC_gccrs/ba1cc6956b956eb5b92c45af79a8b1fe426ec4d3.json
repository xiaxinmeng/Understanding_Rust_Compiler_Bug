{"sha": "ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmExY2M2OTU2Yjk1NmViNWI5MmM0NWFmNzlhOGIxZmU0MjZlYzRkMw==", "commit": {"author": {"name": "Marcel Vollweiler", "email": "marcel@codesourcery.com", "date": "2021-09-07T10:46:28Z"}, "committer": {"name": "Marcel Vollweiler", "email": "marcel@codesourcery.com", "date": "2021-09-07T10:46:28Z"}, "message": "C, C++, Fortran, OpenMP: Add support for 'flush seq_cst' construct.\n\nThis patch adds support for the 'seq_cst' memory order clause on the 'flush'\ndirective which was introduced in OpenMP 5.1.\n\ngcc/c-family/ChangeLog:\n\n\t* c-omp.c (c_finish_omp_flush): Handle MEMMODEL_SEQ_CST.\n\ngcc/c/ChangeLog:\n\n\t* c-parser.c (c_parser_omp_flush): Parse 'seq_cst' clause on 'flush'\n\tdirective.\n\ngcc/cp/ChangeLog:\n\n\t* parser.c (cp_parser_omp_flush): Parse 'seq_cst' clause on 'flush'\n\tdirective.\n\t* semantics.c (finish_omp_flush): Handle MEMMODEL_SEQ_CST.\n\ngcc/fortran/ChangeLog:\n\n\t* openmp.c (gfc_match_omp_flush): Parse 'seq_cst' clause on 'flush'\n\tdirective.\n\t* trans-openmp.c (gfc_trans_omp_flush): Handle OMP_MEMORDER_SEQ_CST.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/gomp/flush-1.c: Add test case for 'seq_cst'.\n\t* c-c++-common/gomp/flush-2.c: Add test case for 'seq_cst'.\n\t* g++.dg/gomp/attrs-1.C: Adapt test to handle all flush clauses.\n\t* g++.dg/gomp/attrs-2.C: Adapt test to handle all flush clauses.\n\t* gfortran.dg/gomp/flush-1.f90: Add test case for 'seq_cst'.\n\t* gfortran.dg/gomp/flush-2.f90: Add test case for 'seq_cst'.", "tree": {"sha": "eb53edb25868ea05aecaeb9c04a7eca9fcadc0b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb53edb25868ea05aecaeb9c04a7eca9fcadc0b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/comments", "author": null, "committer": null, "parents": [{"sha": "aad72d2ea8378e1a56c00d15daa4bdcac8a5ae39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aad72d2ea8378e1a56c00d15daa4bdcac8a5ae39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aad72d2ea8378e1a56c00d15daa4bdcac8a5ae39"}], "stats": {"total": 72, "additions": 56, "deletions": 16}, "files": [{"sha": "4b95fc16e1f635b1c3b2dae293d6c035e275d184", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3", "patch": "@@ -606,7 +606,7 @@ c_finish_omp_flush (location_t loc, int mo)\n {\n   tree x;\n \n-  if (mo == MEMMODEL_LAST)\n+  if (mo == MEMMODEL_LAST || mo == MEMMODEL_SEQ_CST)\n     {\n       x = builtin_decl_explicit (BUILT_IN_SYNC_SYNCHRONIZE);\n       x = build_call_expr_loc (loc, x, 0);"}, {"sha": "4d074ec14438484b8a494e9d3265e7a0a6ae63db", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3", "patch": "@@ -18339,15 +18339,18 @@ c_parser_omp_flush (c_parser *parser)\n       const char *p\n \t= IDENTIFIER_POINTER (c_parser_peek_token (parser)->value);\n \n-      if (!strcmp (p, \"acq_rel\"))\n+      if (!strcmp (p, \"seq_cst\"))\n+\tmo = MEMMODEL_SEQ_CST;\n+      else if (!strcmp (p, \"acq_rel\"))\n \tmo = MEMMODEL_ACQ_REL;\n       else if (!strcmp (p, \"release\"))\n \tmo = MEMMODEL_RELEASE;\n       else if (!strcmp (p, \"acquire\"))\n \tmo = MEMMODEL_ACQUIRE;\n       else\n \terror_at (c_parser_peek_token (parser)->location,\n-\t\t  \"expected %<acq_rel%>, %<release%> or %<acquire%>\");\n+\t\t  \"expected %<seq_cst%>, %<acq_rel%>, %<release%> or \"\n+\t\t  \"%<acquire%>\");\n       c_parser_consume_token (parser);\n     }\n   if (c_parser_next_token_is (parser, CPP_OPEN_PAREN))"}, {"sha": "f9c2c8ac3a7261d0b6331bdf8961b190a0b640bc", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3", "patch": "@@ -40742,15 +40742,18 @@ cp_parser_omp_flush (cp_parser *parser, cp_token *pragma_tok)\n     {\n       tree id = cp_lexer_peek_token (parser->lexer)->u.value;\n       const char *p = IDENTIFIER_POINTER (id);\n-      if (!strcmp (p, \"acq_rel\"))\n+      if (!strcmp (p, \"seq_cst\"))\n+\tmo = MEMMODEL_SEQ_CST;\n+      else if (!strcmp (p, \"acq_rel\"))\n \tmo = MEMMODEL_ACQ_REL;\n       else if (!strcmp (p, \"release\"))\n \tmo = MEMMODEL_RELEASE;\n       else if (!strcmp (p, \"acquire\"))\n \tmo = MEMMODEL_ACQUIRE;\n       else\n \terror_at (cp_lexer_peek_token (parser->lexer)->location,\n-\t\t  \"expected %<acq_rel%>, %<release%> or %<acquire%>\");\n+\t\t  \"expected %<seq_cst%>, %<acq_rel%>, %<release%> or \"\n+\t\t  \"%<acquire%>\");\n       cp_lexer_consume_token (parser->lexer);\n     }\n   if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))"}, {"sha": "8b78e89ce3a145956fd5efe7ad972d633b3106db", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3", "patch": "@@ -10039,7 +10039,7 @@ finish_omp_flush (int mo)\n {\n   tree fn = builtin_decl_explicit (BUILT_IN_SYNC_SYNCHRONIZE);\n   releasing_vec vec;\n-  if (mo != MEMMODEL_LAST)\n+  if (mo != MEMMODEL_LAST && mo != MEMMODEL_SEQ_CST)\n     {\n       fn = builtin_decl_explicit (BUILT_IN_ATOMIC_THREAD_FENCE);\n       vec->quick_push (build_int_cst (integer_type_node, mo));"}, {"sha": "a64b7f5aa10e55db36362df2cca5621efe5c8e63", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3", "patch": "@@ -3782,15 +3782,17 @@ gfc_match_omp_flush (void)\n   enum gfc_omp_memorder mo = OMP_MEMORDER_UNSET;\n   if (gfc_match_omp_eos () == MATCH_NO && gfc_peek_ascii_char () != '(')\n     {\n-      if (gfc_match (\"acq_rel\") == MATCH_YES)\n+      if (gfc_match (\"seq_cst\") == MATCH_YES)\n+\tmo = OMP_MEMORDER_SEQ_CST;\n+      else if (gfc_match (\"acq_rel\") == MATCH_YES)\n \tmo = OMP_MEMORDER_ACQ_REL;\n       else if (gfc_match (\"release\") == MATCH_YES)\n \tmo = OMP_MEMORDER_RELEASE;\n       else if (gfc_match (\"acquire\") == MATCH_YES)\n \tmo = OMP_MEMORDER_ACQUIRE;\n       else\n \t{\n-\t  gfc_error (\"Expected AQC_REL, RELEASE, or ACQUIRE at %C\");\n+\t  gfc_error (\"Expected SEQ_CST, AQC_REL, RELEASE, or ACQUIRE at %C\");\n \t  return MATCH_ERROR;\n \t}\n       c = gfc_get_omp_clauses ();"}, {"sha": "e55e0c818686cd69bdcd4798026382a85483a178", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3", "patch": "@@ -5413,7 +5413,8 @@ gfc_trans_omp_flush (gfc_code *code)\n {\n   tree call;\n   if (!code->ext.omp_clauses\n-      || code->ext.omp_clauses->memorder == OMP_MEMORDER_UNSET)\n+      || code->ext.omp_clauses->memorder == OMP_MEMORDER_UNSET\n+      || code->ext.omp_clauses->memorder == OMP_MEMORDER_SEQ_CST)\n     {\n       call = builtin_decl_explicit (BUILT_IN_SYNC_SYNCHRONIZE);\n       call = build_call_expr_loc (input_location, call, 0);"}, {"sha": "717b951160fa38ff306e778732f1df0258f92a80", "filename": "gcc/testsuite/c-c++-common/gomp/flush-1.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fflush-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fflush-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fflush-1.c?ref=ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3", "patch": "@@ -1,4 +1,5 @@\n /* { dg-additional-options \"-fdump-tree-gimple\" } */\n+/* { dg-final { scan-tree-dump \"foo \\\\(6\\\\);\\[\\n\\r]*  __sync_synchronize \\\\(\\\\);\\[\\n\\r]*  foo \\\\(6\\\\);\" \"gimple\" } } */\n /* { dg-final { scan-tree-dump \"foo \\\\(4\\\\);\\[\\n\\r]*  __atomic_thread_fence \\\\(4\\\\);\\[\\n\\r]*  foo \\\\(4\\\\);\" \"gimple\" } } */\n /* { dg-final { scan-tree-dump \"foo \\\\(3\\\\);\\[\\n\\r]*  __atomic_thread_fence \\\\(3\\\\);\\[\\n\\r]*  foo \\\\(3\\\\);\" \"gimple\" } } */\n /* { dg-final { scan-tree-dump \"foo \\\\(2\\\\);\\[\\n\\r]*  __atomic_thread_fence \\\\(2\\\\);\\[\\n\\r]*  foo \\\\(2\\\\);\" \"gimple\" } } */\n@@ -37,3 +38,11 @@ f4 (void)\n   #pragma omp flush\n   foo (5);\n }\n+\n+void\n+f5 (void)\n+{\n+  foo (6);\n+  #pragma omp flush seq_cst\n+  foo (6);\n+}"}, {"sha": "30ef5982712f43e38faf7f676366c0d5c7567191", "filename": "gcc/testsuite/c-c++-common/gomp/flush-2.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fflush-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fflush-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fflush-2.c?ref=ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3", "patch": "@@ -8,10 +8,11 @@ foo (void)\n   #pragma omp flush acquire\n   #pragma omp flush release\n   #pragma omp flush acq_rel\n-  #pragma omp flush relaxed\t\t/* { dg-error \"expected 'acq_rel', 'release' or 'acquire'\" } */\n-  #pragma omp flush seq_cst\t\t/* { dg-error \"expected 'acq_rel', 'release' or 'acquire'\" } */\n-  #pragma omp flush foobar\t\t/* { dg-error \"expected 'acq_rel', 'release' or 'acquire'\" } */\n+  #pragma omp flush seq_cst\n+  #pragma omp flush relaxed\t\t/* { dg-error \"expected 'seq_cst', 'acq_rel', 'release' or 'acquire'\" } */\n+  #pragma omp flush foobar\t\t/* { dg-error \"expected 'seq_cst', 'acq_rel', 'release' or 'acquire'\" } */\n   #pragma omp flush acquire (a, b)\t/* { dg-error \"'flush' list specified together with memory order clause\" } */\n   #pragma omp flush release (a, b)\t/* { dg-error \"'flush' list specified together with memory order clause\" } */\n   #pragma omp flush acq_rel (a, b)\t/* { dg-error \"'flush' list specified together with memory order clause\" } */\n+  #pragma omp flush seq_cst (a, b)\t/* { dg-error \"'flush' list specified together with memory order clause\" } */\n }"}, {"sha": "c871c51728fc3d1888f1519d44ec5cacbf7bb843", "filename": "gcc/testsuite/g++.dg/gomp/attrs-1.C", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-1.C?ref=ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3", "patch": "@@ -528,6 +528,12 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n   ;\n   [[omp::directive (flush acq_rel)]]\n   ;\n+  [[omp::directive (flush acquire)]]\n+  ;\n+  [[omp::directive (flush release)]]\n+  ;\n+  [[omp::directive (flush seq_cst)]]\n+  ;\n   [[omp::directive (flush (p, f))]]\n   ;\n   [[omp::directive (simd"}, {"sha": "5ec19b32fb0e3b63ab8af416f29d918047feafdb", "filename": "gcc/testsuite/g++.dg/gomp/attrs-2.C", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-2.C?ref=ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3", "patch": "@@ -528,6 +528,12 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n   ;\n   [[omp::directive (flush, acq_rel)]]\n   ;\n+  [[omp::directive (flush, acquire)]]\n+  ;\n+  [[omp::directive (flush, release)]]\n+  ;\n+  [[omp::directive (flush, seq_cst)]]\n+  ;\n   [[omp::directive (flush (p, f))]]\n   ;\n   [[omp::directive (simd,"}, {"sha": "904bb1d03aab49d10eccad75e1e2776e8e05e5da", "filename": "gcc/testsuite/gfortran.dg/gomp/flush-1.f90", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fflush-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fflush-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fflush-1.f90?ref=ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3", "patch": "@@ -1,4 +1,5 @@\n ! { dg-additional-options \"-fdump-tree-gimple\" }\n+! { dg-final { scan-tree-dump \"foo \\\\(6\\\\);\\[\\n\\r]*  __sync_synchronize \\\\(\\\\);\\[\\n\\r]*  foo \\\\(6\\\\);\" \"gimple\" } }\n ! { dg-final { scan-tree-dump \"foo \\\\(4\\\\);\\[\\n\\r]*  __atomic_thread_fence \\\\(4\\\\);\\[\\n\\r]*  foo \\\\(4\\\\);\" \"gimple\" } }\n ! { dg-final { scan-tree-dump \"foo \\\\(3\\\\);\\[\\n\\r]*  __atomic_thread_fence \\\\(3\\\\);\\[\\n\\r]*  foo \\\\(3\\\\);\" \"gimple\" } }\n ! { dg-final { scan-tree-dump \"foo \\\\(2\\\\);\\[\\n\\r]*  __atomic_thread_fence \\\\(2\\\\);\\[\\n\\r]*  foo \\\\(2\\\\);\" \"gimple\" } }\n@@ -39,3 +40,10 @@ subroutine f4\n   !$omp flush\n   call foo (5)\n end\n+\n+subroutine f5\n+  use m\n+  call foo (6)\n+  !$omp flush seq_cst\n+  call foo (6)\n+end"}, {"sha": "ba234448a60d711d2a739afa1caa373f04b69203", "filename": "gcc/testsuite/gfortran.dg/gomp/flush-2.f90", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fflush-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fflush-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fflush-2.f90?ref=ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3", "patch": "@@ -9,10 +9,11 @@ subroutine foo (void)\n   !$omp flush acquire\n   !$omp flush release\n   !$omp flush acq_rel\n-  !$omp flush relaxed\t\t! { dg-error \"Expected AQC_REL, RELEASE, or ACQUIRE\" }\n-  !$omp flush seq_cst\t\t! { dg-error \"Expected AQC_REL, RELEASE, or ACQUIRE\" }\n-  !$omp flush foobar\t\t! { dg-error \"Expected AQC_REL, RELEASE, or ACQUIRE\" }\n+  !$omp flush seq_cst\n+  !$omp flush relaxed\t\t! { dg-error \"Expected SEQ_CST, AQC_REL, RELEASE, or ACQUIRE\" }\n+  !$omp flush foobar\t\t! { dg-error \"Expected SEQ_CST, AQC_REL, RELEASE, or ACQUIRE\" }\n   !$omp flush acquire (a, b)\t! { dg-error \"List specified together with memory order clause in FLUSH directive\" }\n   !$omp flush release (a, b)\t! { dg-error \"List specified together with memory order clause in FLUSH directive\" }\n   !$omp flush acq_rel (a, b)\t! { dg-error \"List specified together with memory order clause in FLUSH directive\" }\n-end\n+  !$omp flush seq_cst (a, b)\t! { dg-error \"List specified together with memory order clause in FLUSH directive\" }\n+  end"}]}