{"sha": "3fe5bcaf11efc74817ef5b4d0b612b6f5cb21388", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZlNWJjYWYxMWVmYzc0ODE3ZWY1YjRkMGI2MTJiNmY1Y2IyMTM4OA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2007-06-05T13:18:22Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2007-06-05T13:18:22Z"}, "message": "tree-vrp.c (compare_values_warnv): Check TREE_NO_WARNING on a PLUS_EXPR or MINUS_EXPR node before setting...\n\n./:\t* tree-vrp.c (compare_values_warnv): Check TREE_NO_WARNING on a\n\tPLUS_EXPR or MINUS_EXPR node before setting *strict_overflow_p.\n\t(extract_range_from_assert): Set TREE_NO_WARNING when creating an\n\texpression.\n\t(test_for_singularity): Likewise.\ntestsuite/:\n\t* gcc.dg/Wstrict-overflow-19.c: New test.\n\nFrom-SVN: r125334", "tree": {"sha": "fac4c70bb3a0a0a1d278aa6d8e22121f701e942b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fac4c70bb3a0a0a1d278aa6d8e22121f701e942b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fe5bcaf11efc74817ef5b4d0b612b6f5cb21388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe5bcaf11efc74817ef5b4d0b612b6f5cb21388", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fe5bcaf11efc74817ef5b4d0b612b6f5cb21388", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe5bcaf11efc74817ef5b4d0b612b6f5cb21388/comments", "author": null, "committer": null, "parents": [{"sha": "a176d60f9d8fab161a44994bbd37b883d995e428", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a176d60f9d8fab161a44994bbd37b883d995e428", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a176d60f9d8fab161a44994bbd37b883d995e428"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "8da0981fba0a5cb6ce11cde2b97fafd91259e23b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe5bcaf11efc74817ef5b4d0b612b6f5cb21388/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe5bcaf11efc74817ef5b4d0b612b6f5cb21388/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3fe5bcaf11efc74817ef5b4d0b612b6f5cb21388", "patch": "@@ -1,3 +1,11 @@\n+2007-06-05  Ian Lance Taylor  <iant@google.com>\n+\n+\t* tree-vrp.c (compare_values_warnv): Check TREE_NO_WARNING on a\n+\tPLUS_EXPR or MINUS_EXPR node before setting *strict_overflow_p.\n+\t(extract_range_from_assert): Set TREE_NO_WARNING when creating an\n+\texpression.\n+\t(test_for_singularity): Likewise.\n+\n 2007-06-05  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/constraints.md (\"Y2\"): Replaced by ..."}, {"sha": "945521340d99f88baf5da283470787800516a43f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe5bcaf11efc74817ef5b4d0b612b6f5cb21388/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe5bcaf11efc74817ef5b4d0b612b6f5cb21388/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3fe5bcaf11efc74817ef5b4d0b612b6f5cb21388", "patch": "@@ -1,3 +1,7 @@\n+2007-06-05  Ian Lance Taylor  <iant@google.com>\n+\n+\t* gcc.dg/Wstrict-overflow-19.c: New test.\n+\n 2007-06-05  Razya Ladelsky  <razya@il.ibm.com>\n \n \t* gcc.dg/matrix/matrix-6.c: Remove conversion."}, {"sha": "daf98b0ce6308d7fdde4f16eb8bfcee65a646b5f", "filename": "gcc/testsuite/gcc.dg/Wstrict-overflow-19.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe5bcaf11efc74817ef5b4d0b612b6f5cb21388/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-overflow-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe5bcaf11efc74817ef5b4d0b612b6f5cb21388/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-overflow-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-overflow-19.c?ref=3fe5bcaf11efc74817ef5b4d0b612b6f5cb21388", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fstrict-overflow -O2 -Wstrict-overflow\" } */\n+\n+/* Don't warn about an overflow when threading jumps.  We used to get\n+   a warning from comparing bounds generated by VRP.  */\n+\n+int\n+bar(int a, int b, int n)\n+{\n+  if (b > a)\n+    n = a - b;\n+  if (a >= b)\n+    n = 1;\n+  return n;\n+}"}, {"sha": "7506092278edefc1370caf11b5cb785cad0b97e1", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe5bcaf11efc74817ef5b4d0b612b6f5cb21388/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe5bcaf11efc74817ef5b4d0b612b6f5cb21388/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=3fe5bcaf11efc74817ef5b4d0b612b6f5cb21388", "patch": "@@ -837,7 +837,9 @@ compare_values_warnv (tree val1, tree val2, bool *strict_overflow_p)\n       if (!TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (val1)))\n \treturn -2;\n \n-      if (strict_overflow_p != NULL)\n+      if (strict_overflow_p != NULL\n+\t  && (code1 == SSA_NAME || !TREE_NO_WARNING (val1))\n+\t  && (code2 == SSA_NAME || !TREE_NO_WARNING (val2)))\n \t*strict_overflow_p = true;\n \n       if (code1 == SSA_NAME)\n@@ -1252,6 +1254,8 @@ extract_range_from_assert (value_range_t *vr_p, tree expr)\n \t    {\n \t      tree one = build_int_cst (type, 1);\n \t      max = fold_build2 (MINUS_EXPR, type, max, one);\n+\t      if (EXPR_P (max))\n+\t\tTREE_NO_WARNING (max) = 1;\n \t    }\n \n \t  set_value_range (vr_p, VR_RANGE, min, max, vr_p->equiv);\n@@ -1285,6 +1289,8 @@ extract_range_from_assert (value_range_t *vr_p, tree expr)\n \t    {\n \t      tree one = build_int_cst (type, 1);\n \t      min = fold_build2 (PLUS_EXPR, type, min, one);\n+\t      if (EXPR_P (min))\n+\t\tTREE_NO_WARNING (min) = 1;\n \t    }\n \n \t  set_value_range (vr_p, VR_RANGE, min, max, vr_p->equiv);\n@@ -5646,6 +5652,8 @@ test_for_singularity (enum tree_code cond_code, tree op0,\n \t{\n \t  tree one = build_int_cst (TREE_TYPE (op0), 1);\n \t  max = fold_build2 (MINUS_EXPR, TREE_TYPE (op0), max, one);\n+\t  if (EXPR_P (max))\n+\t    TREE_NO_WARNING (max) = 1;\n \t}\n     }\n   else if (cond_code == GE_EXPR || cond_code == GT_EXPR)\n@@ -5659,6 +5667,8 @@ test_for_singularity (enum tree_code cond_code, tree op0,\n \t{\n \t  tree one = build_int_cst (TREE_TYPE (op0), 1);\n \t  min = fold_build2 (PLUS_EXPR, TREE_TYPE (op0), min, one);\n+\t  if (EXPR_P (min))\n+\t    TREE_NO_WARNING (min) = 1;\n \t}\n     }\n "}]}