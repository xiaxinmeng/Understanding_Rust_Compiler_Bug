{"sha": "9b8830b6f3920b3ec6b9013230c687dc250bb6e9", "node_id": "C_kwDOANBUbNoAKDliODgzMGI2ZjM5MjBiM2VjNmI5MDEzMjMwYzY4N2RjMjUwYmI2ZTk", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-12-02T14:39:22Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-12-02T14:39:43Z"}, "message": "AArch64: Optimize right shift rounding narrowing\n\nThis optimizes right shift rounding narrow instructions to\nrounding add narrow high where one vector is 0 when the shift amount is half\nthat of the original input type.\n\ni.e.\n\nuint32x4_t foo (uint64x2_t a, uint64x2_t b)\n{\n  return vrshrn_high_n_u64 (vrshrn_n_u64 (a, 32), b, 32);\n}\n\nnow generates:\n\nfoo:\n        movi    v3.4s, 0\n        raddhn  v0.2s, v2.2d, v3.2d\n        raddhn2 v0.4s, v2.2d, v3.2d\n\ninstead of:\n\nfoo:\n        rshrn   v0.2s, v0.2d, 32\n        rshrn2  v0.4s, v1.2d, 32\n        ret\n\nOn Arm cores this is an improvement in both latency and throughput.\nBecause a vector zero is needed I created a new method\naarch64_gen_shareable_zero that creates zeros using V4SI and then takes a subreg\nof the zero to the desired type.  This allows CSE to share all the zero\nconstants.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-protos.h (aarch64_gen_shareable_zero): New.\n\t* config/aarch64/aarch64-simd.md (aarch64_rshrn<mode>,\n\taarch64_rshrn2<mode>): Generate rounding half-ing add when appropriate.\n\t* config/aarch64/aarch64.c (aarch64_gen_shareable_zero): New.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/advsimd-intrinsics/shrn-1.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/shrn-2.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/shrn-3.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/shrn-4.c: New test.", "tree": {"sha": "1e5af8440fa2c7ff97be56d2b10d7304084f38dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e5af8440fa2c7ff97be56d2b10d7304084f38dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b8830b6f3920b3ec6b9013230c687dc250bb6e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b8830b6f3920b3ec6b9013230c687dc250bb6e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b8830b6f3920b3ec6b9013230c687dc250bb6e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b8830b6f3920b3ec6b9013230c687dc250bb6e9/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d47393d0b4d0d498795c4ae1353e6c156c1c4500", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d47393d0b4d0d498795c4ae1353e6c156c1c4500", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d47393d0b4d0d498795c4ae1353e6c156c1c4500"}], "stats": {"total": 126, "additions": 106, "deletions": 20}, "files": [{"sha": "f7f5cae82bc9198e54d0298f25f7c0f5902d5fb1", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8830b6f3920b3ec6b9013230c687dc250bb6e9/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8830b6f3920b3ec6b9013230c687dc250bb6e9/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=9b8830b6f3920b3ec6b9013230c687dc250bb6e9", "patch": "@@ -846,6 +846,7 @@ const char *aarch64_output_move_struct (rtx *operands);\n rtx aarch64_return_addr_rtx (void);\n rtx aarch64_return_addr (int, rtx);\n rtx aarch64_simd_gen_const_vector_dup (machine_mode, HOST_WIDE_INT);\n+rtx aarch64_gen_shareable_zero (machine_mode);\n bool aarch64_simd_mem_operand_p (rtx);\n bool aarch64_sve_ld1r_operand_p (rtx);\n bool aarch64_sve_ld1rq_operand_p (rtx);"}, {"sha": "175a9f07e2597b4b6a8d19141b948a8bb796db16", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 45, "deletions": 20, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8830b6f3920b3ec6b9013230c687dc250bb6e9/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8830b6f3920b3ec6b9013230c687dc250bb6e9/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=9b8830b6f3920b3ec6b9013230c687dc250bb6e9", "patch": "@@ -1956,20 +1956,32 @@\n    (match_operand:SI 2 \"aarch64_simd_shift_imm_offset_<vn_mode>\")]\n   \"TARGET_SIMD\"\n   {\n-    operands[2] = aarch64_simd_gen_const_vector_dup (<MODE>mode,\n-\t\t\t\t\t\t INTVAL (operands[2]));\n-    rtx tmp = gen_reg_rtx (<VNARROWQ2>mode);\n-    if (BYTES_BIG_ENDIAN)\n-      emit_insn (gen_aarch64_rshrn<mode>_insn_be (tmp, operands[1],\n-\t\t\t\toperands[2], CONST0_RTX (<VNARROWQ>mode)));\n+    if (INTVAL (operands[2]) == GET_MODE_UNIT_BITSIZE (<VNARROWQ>mode))\n+      {\n+\trtx tmp0 = aarch64_gen_shareable_zero (<MODE>mode);\n+\temit_insn (gen_aarch64_raddhn<mode> (operands[0], operands[1], tmp0));\n+      }\n     else\n-      emit_insn (gen_aarch64_rshrn<mode>_insn_le (tmp, operands[1],\n-\t\t\t\toperands[2], CONST0_RTX (<VNARROWQ>mode)));\n-\n-    /* The intrinsic expects a narrow result, so emit a subreg that will get\n-       optimized away as appropriate.  */\n-    emit_move_insn (operands[0], lowpart_subreg (<VNARROWQ>mode, tmp,\n-\t\t\t\t\t\t <VNARROWQ2>mode));\n+      {\n+\trtx tmp = gen_reg_rtx (<VNARROWQ2>mode);\n+\toperands[2] = aarch64_simd_gen_const_vector_dup (<MODE>mode,\n+\t\t\t\t\t\t         INTVAL (operands[2]));\n+\tif (BYTES_BIG_ENDIAN)\n+\t  emit_insn (\n+\t\tgen_aarch64_rshrn<mode>_insn_be (tmp, operands[1],\n+\t\t\t\t\t\t operands[2],\n+\t\t\t\t\t\t CONST0_RTX (<VNARROWQ>mode)));\n+\telse\n+\t  emit_insn (\n+\t\tgen_aarch64_rshrn<mode>_insn_le (tmp, operands[1],\n+\t\t\t\t\t\t operands[2],\n+\t\t\t\t\t\t CONST0_RTX (<VNARROWQ>mode)));\n+\n+\t/* The intrinsic expects a narrow result, so emit a subreg that will\n+\t   get optimized away as appropriate.  */\n+\temit_move_insn (operands[0], lowpart_subreg (<VNARROWQ>mode, tmp,\n+\t\t\t\t\t\t     <VNARROWQ2>mode));\n+      }\n     DONE;\n   }\n )\n@@ -2049,14 +2061,27 @@\n    (match_operand:SI 3 \"aarch64_simd_shift_imm_offset_<vn_mode>\")]\n   \"TARGET_SIMD\"\n   {\n-    operands[3] = aarch64_simd_gen_const_vector_dup (<MODE>mode,\n-\t\t\t\t\t\t INTVAL (operands[3]));\n-    if (BYTES_BIG_ENDIAN)\n-      emit_insn (gen_aarch64_rshrn2<mode>_insn_be (operands[0], operands[1],\n-\t\t\t\t\t\t  operands[2], operands[3]));\n+    if (INTVAL (operands[3]) == GET_MODE_UNIT_BITSIZE (<VNARROWQ2>mode))\n+      {\n+\trtx tmp = aarch64_gen_shareable_zero (<MODE>mode);\n+\temit_insn (gen_aarch64_raddhn2<mode> (operands[0], operands[1],\n+\t\t\t\t\t      operands[2], tmp));\n+      }\n     else\n-      emit_insn (gen_aarch64_rshrn2<mode>_insn_le (operands[0], operands[1],\n-\t\t\t\t\t\t  operands[2], operands[3]));\n+      {\n+\toperands[3] = aarch64_simd_gen_const_vector_dup (<MODE>mode,\n+\t\t\t\t\t\t\t INTVAL (operands[3]));\n+\tif (BYTES_BIG_ENDIAN)\n+\t  emit_insn (gen_aarch64_rshrn2<mode>_insn_be (operands[0],\n+\t\t\t\t\t\t       operands[1],\n+\t\t\t\t\t\t       operands[2],\n+\t\t\t\t\t\t       operands[3]));\n+\telse\n+\t  emit_insn (gen_aarch64_rshrn2<mode>_insn_le (operands[0],\n+\t\t\t\t\t\t       operands[1],\n+\t\t\t\t\t\t       operands[2],\n+\t\t\t\t\t\t       operands[3]));\n+      }\n     DONE;\n   }\n )"}, {"sha": "be24b7320d28deed9a19a0451c96bd67d2fb3104", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8830b6f3920b3ec6b9013230c687dc250bb6e9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8830b6f3920b3ec6b9013230c687dc250bb6e9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=9b8830b6f3920b3ec6b9013230c687dc250bb6e9", "patch": "@@ -20414,6 +20414,18 @@ aarch64_mov_operand_p (rtx x, machine_mode mode)\n     == SYMBOL_TINY_ABSOLUTE;\n }\n \n+/* Create a 0 constant that is based on V4SI to allow CSE to optimally share\n+   the constant creation.  */\n+\n+rtx\n+aarch64_gen_shareable_zero (machine_mode mode)\n+{\n+  machine_mode zmode = V4SImode;\n+  rtx tmp = gen_reg_rtx (zmode);\n+  emit_move_insn (tmp, CONST0_RTX (zmode));\n+  return lowpart_subreg (mode, tmp, zmode);\n+}\n+\n /* Return a const_int vector of VAL.  */\n rtx\n aarch64_simd_gen_const_vector_dup (machine_mode mode, HOST_WIDE_INT val)"}, {"sha": "4bc3aa9563ee7d0dc46557d30d9a29149706229d", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/shrn-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8830b6f3920b3ec6b9013230c687dc250bb6e9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fshrn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8830b6f3920b3ec6b9013230c687dc250bb6e9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fshrn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fshrn-1.c?ref=9b8830b6f3920b3ec6b9013230c687dc250bb6e9", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { aarch64*-*-* } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+#include <arm_neon.h>\n+\n+uint8x16_t foo (uint32x4_t a, uint32x4_t b)\n+{\n+  uint16x4_t a1 = vrshrn_n_u32 (a, 16);\n+  uint16x8_t b1 = vrshrn_high_n_u32 (a1, b, 16);\n+  return vrshrn_high_n_u16 (vrshrn_n_u16 (b1, 8), b1, 8);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tmovi\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\traddhn\\t} 2 } } */\n+/* { dg-final { scan-assembler-times {\\traddhn2\\t} 2 } } */"}, {"sha": "09d913e85524f06367c1c2cf51dda0f57578e9ae", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/shrn-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8830b6f3920b3ec6b9013230c687dc250bb6e9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fshrn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8830b6f3920b3ec6b9013230c687dc250bb6e9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fshrn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fshrn-2.c?ref=9b8830b6f3920b3ec6b9013230c687dc250bb6e9", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { aarch64*-*-* } } } */\n+\n+#include <arm_neon.h>\n+\n+uint32x4_t foo (uint64x2_t a, uint64x2_t b)\n+{\n+  return vrshrn_high_n_u64 (vrshrn_n_u64 (a, 32), b, 32);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\traddhn\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\traddhn2\\t} 1 } } */"}, {"sha": "bdccbb3410f049d7e45aabdcc3d2964fbabca807", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/shrn-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8830b6f3920b3ec6b9013230c687dc250bb6e9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fshrn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8830b6f3920b3ec6b9013230c687dc250bb6e9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fshrn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fshrn-3.c?ref=9b8830b6f3920b3ec6b9013230c687dc250bb6e9", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { aarch64*-*-* } } } */\n+\n+#include <arm_neon.h>\n+\n+uint16x8_t foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vrshrn_high_n_u32 (vrshrn_n_u32 (a, 16), b, 16);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\traddhn\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\traddhn2\\t} 1 } } */"}, {"sha": "4b23eddb85891975b8e122060e2a9ebfe56d842c", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/shrn-4.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8830b6f3920b3ec6b9013230c687dc250bb6e9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fshrn-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8830b6f3920b3ec6b9013230c687dc250bb6e9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fshrn-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fshrn-4.c?ref=9b8830b6f3920b3ec6b9013230c687dc250bb6e9", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { aarch64*-*-* } } } */\n+\n+#include <arm_neon.h>\n+\n+uint8x16_t foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vrshrn_high_n_u16 (vrshrn_n_u16 (a, 8), b, 8);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\traddhn\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\traddhn2\\t} 1 } } */"}]}