{"sha": "7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E4Y2JhMzRiMGNiOWIzZTk0NDk2MzU1ODFkZTNkN2Q1ZjgzODU5YQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2010-05-22T22:24:53Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2010-05-22T22:24:53Z"}, "message": "coretypes.h (struct simple_bitmap_def, [...]): New core types.\n\ngcc/ChangeLog:\n\t* coretypes.h (struct simple_bitmap_def, sbitmap, const_sbitmap):\n\tNew core types.\n\t* sbitmap.h (struct sbitmap_def): Do not typedef here.\n\t* sbitmap.c: Include sbitmap.h.\n\t* basic-block.h: Do not include bitmap.h, sbitmap.h, partition.h,\n\thard-reg-set.h.  Split everything related to regsets out from here...\n\t* regset.h: ...to here.  New file.\n\t* df.h: Include regset.h and sbitmap.h.\n\t* tree-flow.h: Likewise.\n\t* cfgloop.h: Likewise.\n\t* except.h: Do not include sbitmap.h.  Include hashtab.h.\n\t* cgraph.h: Include vec.h and function.h.\n\t* reload.h (struct insn_chain): Change types of live_throughout\n\tand dead_or_set from regset_head to bitmap_head.\n\t(compute_use_by_pseudos): Be defined also if regset.h is not included.\n\t* ira-int.h (struct ira_spilled_reg_stack_slot): Change type of\n\tspilled_regs from regset_head to bitmap_head to avoid dependency\n\tin regset.h.\n\t* sel-sched-ir.h: Include regset.h.\n\t* reload.c: Include df.h before reload.h.\n\t* caller-save.c: Likewise.\n\t* reload1.c: Likewise.\n\t* ira.c: Likewise.\n\t(mark_elimination): Update type of r to bitmap, consistent with\n\tDF_LR_IN.\n\t* dominance.c: Include bitmap.h.\n\t* modulo-sched.c: Include df.h.\n\t* cfganal.c: Include bitmap.h and sbitmap.h.\n\t* cfgbuild.c: Include sbitmap.h.\n\t* lcm.c: Include sbitmap.h.\n\t* gcse.c (alloc_gcse_mem): Allocate regset with ALLOC_REG_SET.\n\t* domwalk.c: Include sbitmap.h, exclude ggc.h.\n\t* cfgexpand.c: Inlcude bitmap.h and sbitmap.h.\n\t* cselib.c: Include bitmap.h.\n\t* tree-optimize.c: Include regset.h.\n\t* stmt.c: Include bitmap.h.\n\t* Makefile.in: Update dependencies.\n\ncp/ChangeLog\n\t* semantics.c: Include bitmap.h.\n\t* Make-lang.in: Update dependencies.\n\nFrom-SVN: r159746", "tree": {"sha": "3d05bf2ab0eff15d3c90028c9229b88a37ce513d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d05bf2ab0eff15d3c90028c9229b88a37ce513d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/comments", "author": null, "committer": null, "parents": [{"sha": "bc382218cee3c9536da0fbdf3ee61e4b93edb02b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc382218cee3c9536da0fbdf3ee61e4b93edb02b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc382218cee3c9536da0fbdf3ee61e4b93edb02b"}], "stats": {"total": 377, "additions": 244, "deletions": 133}, "files": [{"sha": "a6d11a7a455853e6b90b14af8c0898bcd863ad69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -1,3 +1,43 @@\n+2010-05-22  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* coretypes.h (struct simple_bitmap_def, sbitmap, const_sbitmap):\n+\tNew core types.\n+\t* sbitmap.h (struct sbitmap_def): Do not typedef here.\n+\t* sbitmap.c: Include sbitmap.h.\n+\t* basic-block.h: Do not include bitmap.h, sbitmap.h, partition.h,\n+\thard-reg-set.h.  Split everything related to regsets out from here...\n+\t* regset.h: ...to here.  New file.\n+\t* df.h: Include regset.h and sbitmap.h.\n+\t* tree-flow.h: Likewise.\n+\t* cfgloop.h: Likewise.\n+\t* except.h: Do not include sbitmap.h.  Include hashtab.h.\n+\t* cgraph.h: Include vec.h and function.h.\n+\t* reload.h (struct insn_chain): Change types of live_throughout\n+\tand dead_or_set from regset_head to bitmap_head.\n+\t(compute_use_by_pseudos): Be defined also if regset.h is not included.\n+\t* ira-int.h (struct ira_spilled_reg_stack_slot): Change type of\n+\tspilled_regs from regset_head to bitmap_head to avoid dependency\n+\tin regset.h.\n+\t* sel-sched-ir.h: Include regset.h.\n+\t* reload.c: Include df.h before reload.h.\n+\t* caller-save.c: Likewise.\n+\t* reload1.c: Likewise.\n+\t* ira.c: Likewise.\n+\t(mark_elimination): Update type of r to bitmap, consistent with\n+\tDF_LR_IN.\n+\t* dominance.c: Include bitmap.h.\n+\t* modulo-sched.c: Include df.h.\n+\t* cfganal.c: Include bitmap.h and sbitmap.h.\n+\t* cfgbuild.c: Include sbitmap.h.\n+\t* lcm.c: Include sbitmap.h.\n+\t* gcse.c (alloc_gcse_mem): Allocate regset with ALLOC_REG_SET.\n+\t* domwalk.c: Include sbitmap.h, exclude ggc.h.\n+\t* cfgexpand.c: Inlcude bitmap.h and sbitmap.h.\n+\t* cselib.c: Include bitmap.h.\n+\t* tree-optimize.c: Include regset.h.\n+\t* stmt.c: Include bitmap.h.\n+\t* Makefile.in: Update dependencies.\n+\n 2010-05-22  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.h (struct varpool_node): Add same_comdat_group."}, {"sha": "e7998f42966b396684386cd4436e46fccc3caf5f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -858,7 +858,7 @@ REVISION_s  := \"\\\"\\\"\"\n endif\n \n # Shorthand variables for dependency lists.\n-EXCEPT_H = except.h sbitmap.h vecprim.h vecir.h\n+EXCEPT_H = except.h $(HASHTAB_) vecprim.h vecir.h\n TOPLEV_H = toplev.h $(INPUT_H) bversion.h\n TARGET_H = $(TM_H) target.h insn-modes.h\n MACHMODE_H = machmode.h mode-classes.def insn-modes.h\n@@ -877,9 +877,8 @@ TREE_H = tree.h all-tree.def tree.def c-common.def $(lang_tree_files) \\\n           $(INPUT_H) statistics.h vec.h treestruct.def $(HASHTAB_H) \\\n           double-int.h alias.h $(SYMTAB_H) options.h vecir.h \\\n \t  $(REAL_H) $(FIXED_VALUE_H)\n-BASIC_BLOCK_H = basic-block.h $(BITMAP_H) sbitmap.h $(PARTITION_H) \\\n-          hard-reg-set.h $(PREDICT_H) vec.h $(FUNCTION_H) \\\n-          cfghooks.h $(OBSTACK_H)\n+REGSET_H = regset.h $(BITMAP_H) hard-reg-set.h\n+BASIC_BLOCK_H = basic-block.h $(PREDICT_H) vec.h $(FUNCTION_H) cfghooks.h\n GIMPLE_H = gimple.h gimple.def gsstruct.def pointer-set.h vec.h \\\n \t$(GGC_H) $(BASIC_BLOCK_H) $(TM_H) $(TARGET_H) tree-ssa-operands.h \\\n \ttree-ssa-alias.h vecir.h\n@@ -894,19 +893,22 @@ FUNCTION_H = function.h $(TREE_H) $(HASHTAB_H) vecprim.h\n EXPR_H = expr.h insn-config.h $(FUNCTION_H) $(RTL_H) $(FLAGS_H) $(TREE_H) $(MACHMODE_H) $(EMIT_RTL_H)\n OPTABS_H = optabs.h insn-codes.h\n REGS_H = regs.h $(MACHMODE_H) $(OBSTACK_H) $(BASIC_BLOCK_H) $(FUNCTION_H)\n-RESOURCE_H = resource.h hard-reg-set.h\n-SCHED_INT_H = sched-int.h $(INSN_ATTR_H) $(BASIC_BLOCK_H) $(RTL_H) $(DF_H) vecprim.h\n+SCHED_INT_H = sched-int.h $(INSN_ATTR_H) $(BASIC_BLOCK_H) $(RTL_H) $(DF_H) \\\n+\tvecprim.h $(REGSET_H)\n SEL_SCHED_IR_H = sel-sched-ir.h $(INSN_ATTR_H) $(BASIC_BLOCK_H) $(RTL_H) \\\n-\t$(GGC_H) $(BITMAP_H) vecprim.h $(SCHED_INT_H) $(CFGLOOP_H)\n+\t$(GGC_H) $(BITMAP_H) vecprim.h $(SCHED_INT_H) $(CFGLOOP_H) $(REGSET_H)\n SEL_SCHED_DUMP_H = sel-sched-dump.h $(SEL_SCHED_IR_H)\n INTEGRATE_H = integrate.h\n CFGLAYOUT_H = cfglayout.h $(BASIC_BLOCK_H)\n-CFGLOOP_H = cfgloop.h $(BASIC_BLOCK_H) $(RTL_H) vecprim.h double-int.h\n+CFGLOOP_H = cfgloop.h $(BASIC_BLOCK_H) $(RTL_H) vecprim.h double-int.h \\\n+\t$(BITMAP_H) sbitmap.h\n IPA_UTILS_H = ipa-utils.h $(TREE_H) $(CGRAPH_H)\n IPA_REFERENCE_H = ipa-reference.h $(BITMAP_H) $(TREE_H)\n IPA_TYPE_ESCAPE_H = ipa-type-escape.h $(TREE_H)\n-CGRAPH_H = cgraph.h $(TREE_H) $(BASIC_BLOCK_H) cif-code.def ipa-ref.h ipa-ref-inline.h\n-DF_H = df.h $(BITMAP_H) $(BASIC_BLOCK_H) alloc-pool.h $(TIMEVAR_H)\n+CGRAPH_H = cgraph.h vec.h $(TREE_H) $(BASIC_BLOCK_H) $(FUNCTION_H) \\\n+\tcif-code.def ipa-ref.h ipa-ref-inline.h\n+DF_H = df.h $(BITMAP_H) $(REGSET_H) sbitmap.h $(BASIC_BLOCK_H) \\\n+\talloc-pool.h $(TIMEVAR_H)\n RESOURCE_H = resource.h hard-reg-set.h $(DF_H)\n DDG_H = ddg.h sbitmap.h $(DF_H)\n GCC_H = gcc.h version.h\n@@ -933,7 +935,7 @@ CPP_INTERNAL_H = $(srcdir)/../libcpp/internal.h $(CPP_ID_DATA_H)\n TREE_PASS_H = tree-pass.h $(TIMEVAR_H)\n TREE_DUMP_H = tree-dump.h $(SPLAY_TREE_H) $(TREE_PASS_H)\n TREE_FLOW_H = tree-flow.h tree-flow-inline.h tree-ssa-operands.h \\\n-\t\t$(BITMAP_H) $(BASIC_BLOCK_H) $(GIMPLE_H) \\\n+\t\t$(BITMAP_H) sbitmap.h $(BASIC_BLOCK_H) $(GIMPLE_H) \\\n \t\t$(HASHTAB_H) $(CGRAPH_H) $(IPA_REFERENCE_H) \\\n \t\ttree-ssa-alias.h\n TREE_SSA_LIVE_H = tree-ssa-live.h $(PARTITION_H) vecprim.h\n@@ -2382,7 +2384,7 @@ tree-phinodes.o : tree-phinodes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(GGC_H) $(BASIC_BLOCK_H) $(TREE_FLOW_H) \\\n    gt-tree-phinodes.h $(RTL_H) $(TOPLEV_H)  $(GIMPLE_H)\n domwalk.o : domwalk.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(BASIC_BLOCK_H) domwalk.h $(GGC_H)\n+   $(BASIC_BLOCK_H) domwalk.h sbitmap.h\n tree-ssa-live.o : tree-ssa-live.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(DIAGNOSTIC_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\\n    $(TREE_SSA_LIVE_H) $(BITMAP_H) $(TOPLEV_H) debug.h $(FLAGS_H) \\\n@@ -2543,7 +2545,7 @@ tree-optimize.o : tree-optimize.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TREE_DUMP_H) $(TOPLEV_H) $(FUNCTION_H) langhooks.h \\\n    $(FLAGS_H) $(CGRAPH_H) $(PLUGIN_H) \\\n    $(TREE_INLINE_H) tree-mudflap.h $(GGC_H) graph.h $(CGRAPH_H) \\\n-   $(TREE_PASS_H) $(CFGLOOP_H) $(EXCEPT_H)\n+   $(TREE_PASS_H) $(CFGLOOP_H) $(EXCEPT_H) $(REGSET_H)\n \n c-gimplify.o : c-gimplify.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n    $(C_TREE_H) $(C_COMMON_H) $(DIAGNOSTIC_H) $(GIMPLE_H) \\\n@@ -2824,14 +2826,14 @@ stmt.o : stmt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(FUNCTION_H) insn-config.h hard-reg-set.h $(EXPR_H) \\\n    libfuncs.h $(EXCEPT_H) $(RECOG_H) $(TOPLEV_H) output.h $(GGC_H) $(TM_P_H) \\\n    langhooks.h $(PREDICT_H) $(OPTABS_H) $(TARGET_H) $(GIMPLE_H) $(MACHMODE_H) \\\n-   $(REGS_H) alloc-pool.h $(PRETTY_PRINT_H)\n+   $(REGS_H) alloc-pool.h $(PRETTY_PRINT_H) $(BITMAP_H)\n except.o : except.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(EXCEPT_H) $(FUNCTION_H) $(EXPR_H) libfuncs.h \\\n    langhooks.h insn-config.h hard-reg-set.h $(BASIC_BLOCK_H) output.h \\\n    dwarf2asm.h dwarf2out.h $(TOPLEV_H) $(HASHTAB_H) intl.h $(GGC_H) \\\n    gt-except.h $(CGRAPH_H) $(INTEGRATE_H) $(DIAGNOSTIC_H) $(DWARF2_H) \\\n    $(TARGET_H) $(TM_P_H) $(TREE_PASS_H) $(TIMEVAR_H) $(TREE_FLOW_H) \\\n-   tree-pretty-print.h\n+   tree-pretty-print.h sbitmap.h\n expr.o : expr.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(FUNCTION_H) $(REGS_H) $(EXPR_H) $(OPTABS_H) \\\n    libfuncs.h $(INSN_ATTR_H) insn-config.h $(RECOG_H) output.h \\\n@@ -2994,7 +2996,7 @@ cselib.o : cselib.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h $(RECOG_H) \\\n    $(EMIT_RTL_H) $(TOPLEV_H) output.h $(FUNCTION_H) $(TREE_PASS_H) \\\n    cselib.h gt-cselib.h $(GGC_H) $(TM_P_H) $(PARAMS_H) alloc-pool.h \\\n-   $(HASHTAB_H) $(TARGET_H)\n+   $(HASHTAB_H) $(TARGET_H) $(BITMAP_H)\n cse.o : cse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n    hard-reg-set.h $(FLAGS_H) insn-config.h $(RECOG_H) $(EXPR_H) $(TOPLEV_H) \\\n    output.h $(FUNCTION_H) $(BASIC_BLOCK_H) $(GGC_H) $(TM_P_H) $(TIMEVAR_H) \\\n@@ -3006,7 +3008,8 @@ dce.o : dce.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n dse.o : dse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(TM_P_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n    $(RECOG_H) $(EXPR_H) $(DF_H) cselib.h $(DBGCNT_H) $(TIMEVAR_H) \\\n-   $(TREE_PASS_H) alloc-pool.h $(ALIAS_H) dse.h $(OPTABS_H) $(TARGET_H)\n+   $(TREE_PASS_H) alloc-pool.h $(ALIAS_H) dse.h $(OPTABS_H) $(TARGET_H) \\\n+   $(BITMAP_H)\n fwprop.o : fwprop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TOPLEV_H) insn-config.h $(RECOG_H) $(FLAGS_H) $(OBSTACK_H) $(BASIC_BLOCK_H) \\\n    output.h $(DF_H) alloc-pool.h $(TIMEVAR_H) $(TREE_PASS_H) $(TARGET_H) \\\n@@ -3023,7 +3026,8 @@ gcse.o : gcse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h $(GGC_H) \\\n    $(RECOG_H) $(EXPR_H) $(BASIC_BLOCK_H) $(FUNCTION_H) output.h $(TOPLEV_H) \\\n    $(TM_P_H) $(PARAMS_H) cselib.h $(EXCEPT_H) gt-gcse.h $(TREE_H) $(TIMEVAR_H) \\\n-   intl.h $(OBSTACK_H) $(TREE_PASS_H) $(DF_H) $(DBGCNT_H) $(TARGET_H)\n+   intl.h $(OBSTACK_H) $(TREE_PASS_H) $(DF_H) $(DBGCNT_H) $(TARGET_H) \\\n+   $(DF_H)\n store-motion.o : store-motion.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h $(GGC_H) \\\n    $(RECOG_H) $(EXPR_H) $(BASIC_BLOCK_H) $(FUNCTION_H) output.h $(TOPLEV_H) \\\n@@ -3034,7 +3038,7 @@ resource.o : resource.c $(CONFIG_H) $(RTL_H) hard-reg-set.h $(SYSTEM_H) \\\n    $(FUNCTION_H) $(TOPLEV_H) $(INSN_ATTR_H) $(EXCEPT_H) $(PARAMS_H) $(TM_P_H)\n lcm.o : lcm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n    hard-reg-set.h $(FLAGS_H) insn-config.h $(INSN_ATTR_H) $(RECOG_H) \\\n-   $(BASIC_BLOCK_H) $(TM_P_H) $(FUNCTION_H) output.h\n+   $(BASIC_BLOCK_H) $(TM_P_H) $(FUNCTION_H) output.h sbitmap.h\n mode-switching.o : mode-switching.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(RTL_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n    $(INSN_ATTR_H) $(RECOG_H) $(BASIC_BLOCK_H) $(TM_P_H) $(FUNCTION_H) \\\n@@ -3131,7 +3135,7 @@ cfgexpand.o : cfgexpand.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TREE_DUMP_H) $(EXCEPT_H) langhooks.h $(TREE_PASS_H) $(RTL_H) \\\n    $(DIAGNOSTIC_H) $(TOPLEV_H) $(BASIC_BLOCK_H) $(FLAGS_H) debug.h $(PARAMS_H) \\\n    value-prof.h $(TREE_INLINE_H) $(TARGET_H) $(SSAEXPAND_H) \\\n-   tree-pretty-print.h gimple-pretty-print.h\n+   tree-pretty-print.h gimple-pretty-print.h $(BITMAP_H) sbitmap.h\n cfgrtl.o : cfgrtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h \\\n    output.h $(TOPLEV_H) $(FUNCTION_H) $(EXCEPT_H) $(TM_P_H) $(INSN_ATTR_H) \\\n@@ -3140,10 +3144,10 @@ cfgrtl.o : cfgrtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_PASS_H) $(DF_H) $(GGC_H)\n cfganal.o : cfganal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h insn-config.h $(RECOG_H) $(TM_P_H) \\\n-   $(TIMEVAR_H) $(OBSTACK_H) $(TOPLEV_H) vecprim.h\n+   $(TIMEVAR_H) $(OBSTACK_H) $(TOPLEV_H) vecprim.h sbitmap.h $(BITMAP_H)\n cfgbuild.o : cfgbuild.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h $(TOPLEV_H) \\\n-   $(FUNCTION_H) $(EXCEPT_H) $(TIMEVAR_H) $(TREE_H) $(EXPR_H)\n+   $(FUNCTION_H) $(EXCEPT_H) $(TIMEVAR_H) $(TREE_H) $(EXPR_H) sbitmap.h\n cfgcleanup.o : cfgcleanup.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TIMEVAR_H) hard-reg-set.h output.h $(FLAGS_H) $(RECOG_H) \\\n    $(TOPLEV_H) insn-config.h cselib.h $(TARGET_H) $(TM_P_H) $(PARAMS_H) \\\n@@ -3181,7 +3185,7 @@ loop-unroll.o: loop-unroll.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TM_H) \\\n    $(OBSTACK_H)\n dominance.o : dominance.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    hard-reg-set.h $(BASIC_BLOCK_H) et-forest.h $(OBSTACK_H) $(TOPLEV_H) \\\n-   $(TIMEVAR_H) graphds.h vecprim.h pointer-set.h\n+   $(TIMEVAR_H) graphds.h vecprim.h pointer-set.h $(BITMAP_H)\n et-forest.o : et-forest.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    et-forest.h alloc-pool.h $(BASIC_BLOCK_H)\n combine.o : combine.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\"}, {"sha": "c5b8799d8d570c3f8abf235cc7f7f88f3427709e", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 90, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -1,4 +1,4 @@\n-/* Define control and data flow tables, and regsets.\n+/* Define control flow data structures for the CFG.\n    Copyright (C) 1987, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n    2005, 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n \n@@ -21,95 +21,10 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_BASIC_BLOCK_H\n #define GCC_BASIC_BLOCK_H\n \n-#include \"bitmap.h\"\n-#include \"sbitmap.h\"\n-#include \"partition.h\"\n-#include \"hard-reg-set.h\"\n #include \"predict.h\"\n #include \"vec.h\"\n #include \"function.h\"\n \n-/* Head of register set linked list.  */\n-typedef bitmap_head regset_head;\n-\n-/* A pointer to a regset_head.  */\n-typedef bitmap regset;\n-\n-/* Allocate a register set with oballoc.  */\n-#define ALLOC_REG_SET(OBSTACK) BITMAP_ALLOC (OBSTACK)\n-\n-/* Do any cleanup needed on a regset when it is no longer used.  */\n-#define FREE_REG_SET(REGSET) BITMAP_FREE (REGSET)\n-\n-/* Initialize a new regset.  */\n-#define INIT_REG_SET(HEAD) bitmap_initialize (HEAD, &reg_obstack)\n-\n-/* Clear a register set by freeing up the linked list.  */\n-#define CLEAR_REG_SET(HEAD) bitmap_clear (HEAD)\n-\n-/* Copy a register set to another register set.  */\n-#define COPY_REG_SET(TO, FROM) bitmap_copy (TO, FROM)\n-\n-/* Compare two register sets.  */\n-#define REG_SET_EQUAL_P(A, B) bitmap_equal_p (A, B)\n-\n-/* `and' a register set with a second register set.  */\n-#define AND_REG_SET(TO, FROM) bitmap_and_into (TO, FROM)\n-\n-/* `and' the complement of a register set with a register set.  */\n-#define AND_COMPL_REG_SET(TO, FROM) bitmap_and_compl_into (TO, FROM)\n-\n-/* Inclusive or a register set with a second register set.  */\n-#define IOR_REG_SET(TO, FROM) bitmap_ior_into (TO, FROM)\n-\n-/* Exclusive or a register set with a second register set.  */\n-#define XOR_REG_SET(TO, FROM) bitmap_xor_into (TO, FROM)\n-\n-/* Or into TO the register set FROM1 `and'ed with the complement of FROM2.  */\n-#define IOR_AND_COMPL_REG_SET(TO, FROM1, FROM2) \\\n-  bitmap_ior_and_compl_into (TO, FROM1, FROM2)\n-\n-/* Clear a single register in a register set.  */\n-#define CLEAR_REGNO_REG_SET(HEAD, REG) bitmap_clear_bit (HEAD, REG)\n-\n-/* Set a single register in a register set.  */\n-#define SET_REGNO_REG_SET(HEAD, REG) bitmap_set_bit (HEAD, REG)\n-\n-/* Return true if a register is set in a register set.  */\n-#define REGNO_REG_SET_P(TO, REG) bitmap_bit_p (TO, REG)\n-\n-/* Copy the hard registers in a register set to the hard register set.  */\n-extern void reg_set_to_hard_reg_set (HARD_REG_SET *, const_bitmap);\n-#define REG_SET_TO_HARD_REG_SET(TO, FROM)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  CLEAR_HARD_REG_SET (TO);\t\t\t\t\t\t\\\n-  reg_set_to_hard_reg_set (&TO, FROM);\t\t\t\t\t\\\n-} while (0)\n-\n-typedef bitmap_iterator reg_set_iterator;\n-\n-/* Loop over all registers in REGSET, starting with MIN, setting REGNUM to the\n-   register number and executing CODE for all registers that are set.  */\n-#define EXECUTE_IF_SET_IN_REG_SET(REGSET, MIN, REGNUM, RSI)\t\\\n-  EXECUTE_IF_SET_IN_BITMAP (REGSET, MIN, REGNUM, RSI)\n-\n-/* Loop over all registers in REGSET1 and REGSET2, starting with MIN, setting\n-   REGNUM to the register number and executing CODE for all registers that are\n-   set in the first regset and not set in the second.  */\n-#define EXECUTE_IF_AND_COMPL_IN_REG_SET(REGSET1, REGSET2, MIN, REGNUM, RSI) \\\n-  EXECUTE_IF_AND_COMPL_IN_BITMAP (REGSET1, REGSET2, MIN, REGNUM, RSI)\n-\n-/* Loop over all registers in REGSET1 and REGSET2, starting with MIN, setting\n-   REGNUM to the register number and executing CODE for all registers that are\n-   set in both regsets.  */\n-#define EXECUTE_IF_AND_IN_REG_SET(REGSET1, REGSET2, MIN, REGNUM, RSI) \\\n-  EXECUTE_IF_AND_IN_BITMAP (REGSET1, REGSET2, MIN, REGNUM, RSI)\t\\\n-\n-/* Same information as REGS_INVALIDATED_BY_CALL but in regset form to be used\n-   in dataflow more conveniently.  */\n-\n-extern regset regs_invalidated_by_call_regset;\n-\n /* Type we use to hold basic block counters.  Should be at least\n    64bit.  Although a counter cannot be negative, we use a signed\n    type, because erroneous negative counts can be generated when the\n@@ -482,8 +397,6 @@ struct GTY(()) control_flow_graph {\n #define FOR_ALL_BB_FN(BB, FN) \\\n   for (BB = ENTRY_BLOCK_PTR_FOR_FUNCTION (FN); BB; BB = BB->next_bb)\n \n-extern bitmap_obstack reg_obstack;\n-\n \f\n /* Stuff for recording basic block info.  */\n \n@@ -857,8 +770,6 @@ extern bool predictable_edge_p (edge);\n extern void init_flow (struct function *);\n extern void debug_bb (basic_block);\n extern basic_block debug_bb_n (int);\n-extern void dump_regset (regset, FILE *);\n-extern void debug_regset (regset);\n extern void expunge_block (basic_block);\n extern void link_block (basic_block, basic_block);\n extern void unlink_block (basic_block);"}, {"sha": "6bcfd4bf4c7c3e61e60651c14e643c482821c772", "filename": "gcc/caller-save.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -30,14 +30,14 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hard-reg-set.h\"\n #include \"recog.h\"\n #include \"basic-block.h\"\n+#include \"df.h\"\n #include \"reload.h\"\n #include \"function.h\"\n #include \"expr.h\"\n #include \"toplev.h\"\n #include \"tm_p.h\"\n #include \"addresses.h\"\n #include \"output.h\"\n-#include \"df.h\"\n #include \"ggc.h\"\n \n /* True if caller-save has been initialized.  */"}, {"sha": "e0c6443dcdd53bc887814bf1174df9a6ccb8343f", "filename": "gcc/cfganal.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -34,6 +34,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"vec.h\"\n #include \"vecprim.h\"\n+#include \"bitmap.h\"\n+#include \"sbitmap.h\"\n #include \"timevar.h\"\n \n /* Store the data structures necessary for depth-first search.  */"}, {"sha": "79b6183bfba639f1f57e88ef7d468b6b83ce8c00", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"expr.h\"\n #include \"toplev.h\"\n #include \"timevar.h\"\n+#include \"sbitmap.h\"\n \n static void make_edges (basic_block, basic_block, int);\n static void make_label_edge (sbitmap, basic_block, rtx, int);"}, {"sha": "3a36ee1794460077785c4445780fb5403b5090c2", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -45,7 +45,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"value-prof.h\"\n #include \"target.h\"\n #include \"ssaexpand.h\"\n-\n+#include \"bitmap.h\"\n+#include \"sbitmap.h\"\n \n /* This variable holds information helping the rewriting of SSA trees\n    into RTL.  */"}, {"sha": "96911c6a4150e5cdfa5f440f819c5d1fcae402eb", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -27,6 +27,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"vecprim.h\"\n #include \"double-int.h\"\n \n+#include \"bitmap.h\"\n+#include \"sbitmap.h\"\n+\n /* Structure to hold decision about unrolling/peeling.  */\n enum lpt_dec\n {"}, {"sha": "f352cc65e3acc05f979315c441781072b47485c8", "filename": "gcc/cgraph.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -21,9 +21,12 @@ along with GCC; see the file COPYING3.  If not see\n \n #ifndef GCC_CGRAPH_H\n #define GCC_CGRAPH_H\n+\n+#include \"vec.h\"\n #include \"tree.h\"\n #include \"basic-block.h\"\n-#include \"ipa-ref.h\"\n+#include \"function.h\"\n+#include \"ipa-ref.h\"\t/* FIXME: inappropriate dependency of cgraph on IPA.  */\n \n enum availability\n {\n@@ -914,6 +917,7 @@ varpool_all_refs_explicit_p (struct varpool_node *vnode)\n /* Constant pool accessor function.  */\n htab_t constant_pool_htab (void);\n \n+/* FIXME: inappropriate dependency of cgraph on IPA.  */\n #include \"ipa-ref-inline.h\"\n \n #endif  /* GCC_CGRAPH_H  */"}, {"sha": "a7bc8dbb67ad827c8876ca6de4526c1663a83677", "filename": "gcc/coretypes.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -46,6 +46,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n struct bitmap_head_def;\n typedef struct bitmap_head_def *bitmap;\n typedef const struct bitmap_head_def *const_bitmap;\n+struct simple_bitmap_def;\n+typedef struct simple_bitmap_def *sbitmap;\n+typedef const struct simple_bitmap_def *const_sbitmap;\n struct rtx_def;\n typedef struct rtx_def *rtx;\n typedef const struct rtx_def *const_rtx;"}, {"sha": "7acd4132c14df20ff5a42d030532d44f08a29024", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -1,3 +1,8 @@\n+2010-05-22  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* semantics.c: Include bitmap.h.\n+\t* Make-lang.in: Update dependencies.\n+\n 2010-05-22  Jan Hubicka  <jh@suse.cz>\n \n \t* decl2.c (maybe_emit_vtables): Produce same comdat group when outputting"}, {"sha": "c4f553e16c211f851afb0a891a65584c78c1fac3", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -303,7 +303,7 @@ cp/repo.o: cp/repo.c $(CXX_TREE_H) $(TM_H) toplev.h $(DIAGNOSTIC_H) \\\n cp/semantics.o: cp/semantics.c $(CXX_TREE_H) $(TM_H) except.h toplev.h \\\n   $(FLAGS_H) debug.h output.h $(RTL_H) $(TIMEVAR_H) $(EXPR_H) \\\n   $(TREE_INLINE_H) $(CGRAPH_H) $(TARGET_H) $(C_COMMON_H) $(GIMPLE_H) \\\n-  gt-cp-semantics.h\n+  bitmap.h gt-cp-semantics.h\n cp/dump.o: cp/dump.c $(CXX_TREE_H) $(TM_H) $(TREE_DUMP_H)\n cp/optimize.o: cp/optimize.c $(CXX_TREE_H) $(TM_H) rtl.h $(INTEGRATE_H) \\\n   insn-config.h input.h $(PARAMS_H) debug.h $(TREE_INLINE_H) $(GIMPLE_H) \\"}, {"sha": "b97a4c363c56d6559449737e24655c3f99a1f559", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"vec.h\"\n #include \"target.h\"\n #include \"gimple.h\"\n+#include \"bitmap.h\"\n \n /* There routines provide a modular interface to perform many parsing\n    operations.  They may therefore be used during actual parsing, or"}, {"sha": "5e819cd979754fbf56a33950cd04ba45a8498ffa", "filename": "gcc/cselib.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -42,6 +42,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"alloc-pool.h\"\n #include \"target.h\"\n+#include \"bitmap.h\"\n \n static bool cselib_record_memory;\n static bool cselib_preserve_constants;"}, {"sha": "0632b1dbaafb5761f8e3940ddfa0ba0d630dbfb1", "filename": "gcc/df.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -27,6 +27,8 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_DF_H\n \n #include \"bitmap.h\"\n+#include \"regset.h\"\n+#include \"sbitmap.h\"\n #include \"basic-block.h\"\n #include \"alloc-pool.h\"\n #include \"timevar.h\""}, {"sha": "f7db0f10d6be2ac4bf90d1bd53def0a3f0ae759d", "filename": "gcc/dominance.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -47,6 +47,7 @@\n #include \"vecprim.h\"\n #include \"pointer-set.h\"\n #include \"graphds.h\"\n+#include \"bitmap.h\"\n \n /* We name our nodes with integers, beginning with 1.  Zero is reserved for\n    'undefined' or 'end of list'.  The name of each node is given by the dfs"}, {"sha": "89d2e469eedd5aefc59be0558ace5d375d5bb9fb", "filename": "gcc/domwalk.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fdomwalk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fdomwalk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdomwalk.c?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"basic-block.h\"\n #include \"domwalk.h\"\n-#include \"ggc.h\"\n+#include \"sbitmap.h\"\n \n /* This file implements a generic walker for dominator trees.\n "}, {"sha": "ef511c9051579f83ea6503e4963b157f6ed11fd3", "filename": "gcc/except.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -19,7 +19,7 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-#include \"sbitmap.h\"\n+#include \"hashtab.h\"\n #include \"vecprim.h\"\n #include \"vecir.h\"\n "}, {"sha": "10f015fa3f0f0b1b90779acf9c92ef2bfefa50ee", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -624,7 +624,7 @@ static void\n alloc_gcse_mem (void)\n {\n   /* Allocate vars to track sets of regs.  */\n-  reg_set_bitmap = BITMAP_ALLOC (NULL);\n+  reg_set_bitmap = ALLOC_REG_SET (NULL);\n \n   /* Allocate array to keep a list of insns which modify memory in each\n      basic block.  */"}, {"sha": "e56e05189458f751554276860bde2bd55302189f", "filename": "gcc/ira-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fira-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fira-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-int.h?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -542,7 +542,7 @@ extern int ira_copies_num;\n struct ira_spilled_reg_stack_slot\n {\n   /* pseudo-registers assigned to the stack slot.  */\n-  regset_head spilled_regs;\n+  bitmap_head spilled_regs;\n   /* RTL representation of the stack slot.  */\n   rtx mem;\n   /* Size of the stack slot.  */"}, {"sha": "574fe07d89ed26c585b1617f630b4cb9c9fa87e7", "filename": "gcc/ira.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -310,6 +310,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"bitmap.h\"\n #include \"hard-reg-set.h\"\n #include \"basic-block.h\"\n+#include \"df.h\"\n #include \"expr.h\"\n #include \"recog.h\"\n #include \"params.h\"\n@@ -320,7 +321,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"reload.h\"\n #include \"toplev.h\"\n #include \"integrate.h\"\n-#include \"df.h\"\n #include \"ggc.h\"\n #include \"ira-int.h\"\n \n@@ -1899,7 +1899,7 @@ mark_elimination (int from, int to)\n   FOR_EACH_BB (bb)\n     {\n       /* We don't use LIVE info in IRA.  */\n-      regset r = DF_LR_IN (bb);\n+      bitmap r = DF_LR_IN (bb);\n \n       if (REGNO_REG_SET_P (r, from))\n \t{"}, {"sha": "619d2ab946f64a1191567beb31b094db26fe0e81", "filename": "gcc/lcm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Flcm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Flcm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flcm.c?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -63,6 +63,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"output.h\"\n #include \"tm_p.h\"\n #include \"function.h\"\n+#include \"sbitmap.h\"\n \n /* We want target macros for the mode switching code to be able to refer\n    to instruction attribute values.  */"}, {"sha": "ebf76492e2b2bb74e2e70fe5021d953de6543fba", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -48,6 +48,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"timevar.h\"\n #include \"tree-pass.h\"\n #include \"dbgcnt.h\"\n+#include \"df.h\"\n \n #ifdef INSN_SCHEDULING\n "}, {"sha": "75082a063228e80c58519635188325d74727d7ee", "filename": "gcc/regset.h", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fregset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fregset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregset.h?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -0,0 +1,125 @@\n+/* Define regsets.\n+   Copyright (C) 1987, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n+   2005, 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_REGSET_H\n+#define GCC_REGSET_H\n+\n+/* TODO: regset is just a bitmap in its implementation.  The compiler does\n+   not consistently use one or the other, i.e. sometimes variables are\n+   declared as bitmap but they are actually regsets and regset accessors\n+   are used, and vice versa, or mixed (see e.g. spilled_regs in IRA).\n+\n+   This should be cleaned up, either by just dropping the regset type, or\n+   by changing all bitmaps that are really regsets to the regset type.  For\n+   the latter option, a good start would be to change everything allocated\n+   on the reg_obstack to regset.  */\n+\n+#include \"bitmap.h\"\t\t/* For bitmap_iterator.  */\n+#include \"hard-reg-set.h\"\n+\n+/* Head of register set linked list.  */\n+typedef bitmap_head regset_head;\n+\n+/* A pointer to a regset_head.  */\n+typedef bitmap regset;\n+\n+/* Allocate a register set with oballoc.  */\n+#define ALLOC_REG_SET(OBSTACK) BITMAP_ALLOC (OBSTACK)\n+\n+/* Do any cleanup needed on a regset when it is no longer used.  */\n+#define FREE_REG_SET(REGSET) BITMAP_FREE (REGSET)\n+\n+/* Initialize a new regset.  */\n+#define INIT_REG_SET(HEAD) bitmap_initialize (HEAD, &reg_obstack)\n+\n+/* Clear a register set by freeing up the linked list.  */\n+#define CLEAR_REG_SET(HEAD) bitmap_clear (HEAD)\n+\n+/* Copy a register set to another register set.  */\n+#define COPY_REG_SET(TO, FROM) bitmap_copy (TO, FROM)\n+\n+/* Compare two register sets.  */\n+#define REG_SET_EQUAL_P(A, B) bitmap_equal_p (A, B)\n+\n+/* `and' a register set with a second register set.  */\n+#define AND_REG_SET(TO, FROM) bitmap_and_into (TO, FROM)\n+\n+/* `and' the complement of a register set with a register set.  */\n+#define AND_COMPL_REG_SET(TO, FROM) bitmap_and_compl_into (TO, FROM)\n+\n+/* Inclusive or a register set with a second register set.  */\n+#define IOR_REG_SET(TO, FROM) bitmap_ior_into (TO, FROM)\n+\n+/* Exclusive or a register set with a second register set.  */\n+#define XOR_REG_SET(TO, FROM) bitmap_xor_into (TO, FROM)\n+\n+/* Or into TO the register set FROM1 `and'ed with the complement of FROM2.  */\n+#define IOR_AND_COMPL_REG_SET(TO, FROM1, FROM2) \\\n+  bitmap_ior_and_compl_into (TO, FROM1, FROM2)\n+\n+/* Clear a single register in a register set.  */\n+#define CLEAR_REGNO_REG_SET(HEAD, REG) bitmap_clear_bit (HEAD, REG)\n+\n+/* Set a single register in a register set.  */\n+#define SET_REGNO_REG_SET(HEAD, REG) bitmap_set_bit (HEAD, REG)\n+\n+/* Return true if a register is set in a register set.  */\n+#define REGNO_REG_SET_P(TO, REG) bitmap_bit_p (TO, REG)\n+\n+/* Copy the hard registers in a register set to the hard register set.  */\n+extern void reg_set_to_hard_reg_set (HARD_REG_SET *, const_bitmap);\n+#define REG_SET_TO_HARD_REG_SET(TO, FROM)\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  CLEAR_HARD_REG_SET (TO);\t\t\t\t\t\t\\\n+  reg_set_to_hard_reg_set (&TO, FROM);\t\t\t\t\t\\\n+} while (0)\n+\n+typedef bitmap_iterator reg_set_iterator;\n+\n+/* Loop over all registers in REGSET, starting with MIN, setting REGNUM to the\n+   register number and executing CODE for all registers that are set.  */\n+#define EXECUTE_IF_SET_IN_REG_SET(REGSET, MIN, REGNUM, RSI)\t\\\n+  EXECUTE_IF_SET_IN_BITMAP (REGSET, MIN, REGNUM, RSI)\n+\n+/* Loop over all registers in REGSET1 and REGSET2, starting with MIN, setting\n+   REGNUM to the register number and executing CODE for all registers that are\n+   set in the first regset and not set in the second.  */\n+#define EXECUTE_IF_AND_COMPL_IN_REG_SET(REGSET1, REGSET2, MIN, REGNUM, RSI) \\\n+  EXECUTE_IF_AND_COMPL_IN_BITMAP (REGSET1, REGSET2, MIN, REGNUM, RSI)\n+\n+/* Loop over all registers in REGSET1 and REGSET2, starting with MIN, setting\n+   REGNUM to the register number and executing CODE for all registers that are\n+   set in both regsets.  */\n+#define EXECUTE_IF_AND_IN_REG_SET(REGSET1, REGSET2, MIN, REGNUM, RSI) \\\n+  EXECUTE_IF_AND_IN_BITMAP (REGSET1, REGSET2, MIN, REGNUM, RSI)\t\\\n+\n+/* Same information as REGS_INVALIDATED_BY_CALL but in regset form to be used\n+   in dataflow more conveniently.  */\n+\n+extern regset regs_invalidated_by_call_regset;\n+\n+/* An obstack for regsets.  */\n+extern bitmap_obstack reg_obstack;\n+\n+/* In cfg.c  */\n+extern void dump_regset (regset, FILE *);\n+extern void debug_regset (regset);\n+\n+#endif /* GCC_REGSET_H */"}, {"sha": "af520ef1515eaa23a03570f9cb3e101535de00b1", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -100,6 +100,7 @@ a register with any other reload.  */\n #include \"expr.h\"\n #include \"optabs.h\"\n #include \"recog.h\"\n+#include \"df.h\"\n #include \"reload.h\"\n #include \"regs.h\"\n #include \"addresses.h\"\n@@ -110,7 +111,6 @@ a register with any other reload.  */\n #include \"toplev.h\"\n #include \"params.h\"\n #include \"target.h\"\n-#include \"df.h\"\n #include \"ira.h\"\n \n /* True if X is a constant that can be forced into the constant pool.  */"}, {"sha": "a28567014d3bb640c6b7c8e45f5de5aa056df776", "filename": "gcc/reload.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Freload.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Freload.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.h?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -225,8 +225,8 @@ struct insn_chain\n   /* Register life information: record all live hard registers, and\n      all live pseudos that have a hard register.  This set also\n      contains pseudos spilled by IRA.  */\n-  regset_head live_throughout;\n-  regset_head dead_or_set;\n+  bitmap_head live_throughout;\n+  bitmap_head dead_or_set;\n \n   /* Copies of the global variables computed by find_reloads.  */\n   struct reload *rld;\n@@ -242,8 +242,10 @@ extern struct insn_chain *reload_insn_chain;\n \n /* Allocate a new insn_chain structure.  */\n extern struct insn_chain *new_insn_chain (void);\n+#endif\n \n-extern void compute_use_by_pseudos (HARD_REG_SET *, regset);\n+#if defined SET_HARD_REG_BIT\n+extern void compute_use_by_pseudos (HARD_REG_SET *, bitmap);\n #endif\n \n /* Functions from reload.c:  */"}, {"sha": "504c9e09049c2ab24154ebbc79b30077f8ed191c", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -37,14 +37,14 @@ along with GCC; see the file COPYING3.  If not see\n #include \"regs.h\"\n #include \"addresses.h\"\n #include \"basic-block.h\"\n+#include \"df.h\"\n #include \"reload.h\"\n #include \"recog.h\"\n #include \"output.h\"\n #include \"toplev.h\"\n #include \"except.h\"\n #include \"tree.h\"\n #include \"ira.h\"\n-#include \"df.h\"\n #include \"target.h\"\n #include \"emit-rtl.h\"\n "}, {"sha": "205b1827284c3f42ac2b09a1de113a4cc02be1e1", "filename": "gcc/sbitmap.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fsbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fsbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.c?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hard-reg-set.h\"\n #include \"obstack.h\"\n #include \"basic-block.h\"\n+#include \"sbitmap.h\"\n \n #if GCC_VERSION >= 3400\n #if HOST_BITS_PER_WIDEST_FAST_INT == HOST_BITS_PER_LONG"}, {"sha": "dc6d671549978455ff06eb024e3a1857e5a855f6", "filename": "gcc/sbitmap.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fsbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fsbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.h?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -36,14 +36,13 @@ along with GCC; see the file COPYING3.  If not see\n #error Need to increase size of datatype used for popcount\n #endif\n \n-typedef struct simple_bitmap_def\n+struct simple_bitmap_def\n {\n   unsigned char *popcount;      /* Population count.  */\n   unsigned int n_bits;\t\t/* Number of bits.  */\n   unsigned int size;\t\t/* Size in elements.  */\n   SBITMAP_ELT_TYPE elms[1];\t/* The elements.  */\n-} *sbitmap;\n-typedef const struct simple_bitmap_def *const_sbitmap;\n+};\n \n typedef SBITMAP_ELT_TYPE *sbitmap_ptr;\n typedef const SBITMAP_ELT_TYPE *const_sbitmap_ptr;"}, {"sha": "f3025e856ae2ac264a254b30e79cd4f64e242481", "filename": "gcc/sel-sched-ir.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fsel-sched-ir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fsel-sched-ir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.h?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -23,7 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* For state_t.  */\n #include \"insn-attr.h\"\n-/* For regset_head.  */\n+#include \"regset.h\"\n #include \"basic-block.h\"\n /* For reg_note.  */\n #include \"rtl.h\""}, {"sha": "4b91ab6522e16d99c1cdb11e8f83922125a23b4a", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -52,6 +52,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"regs.h\"\n #include \"alloc-pool.h\"\n #include \"pretty-print.h\"\n+#include \"bitmap.h\"\n+\n \f\n /* Functions and data structures for expanding case statements.  */\n "}, {"sha": "bcbd7fbe440e746b552458e10b83057bcf148308", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -23,6 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #define _TREE_FLOW_H 1\n \n #include \"bitmap.h\"\n+#include \"sbitmap.h\"\n #include \"basic-block.h\"\n #include \"hashtab.h\"\n #include \"gimple.h\""}, {"sha": "76918f1cfd69cf62bbedf2c644ed6a0fb70bd4e0", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8cba34b0cb9b3e9449635581de3d7d5f83859a/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "patch": "@@ -47,7 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"except.h\"\n #include \"plugin.h\"\n-\n+#include \"regset.h\"\t/* FIXME: For reg_obstack.  */\n \n /* Gate: execute, or not, all of the non-trivial optimizations.  */\n "}]}