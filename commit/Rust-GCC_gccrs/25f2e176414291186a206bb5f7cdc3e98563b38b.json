{"sha": "25f2e176414291186a206bb5f7cdc3e98563b38b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVmMmUxNzY0MTQyOTExODZhMjA2YmI1ZjdjZGMzZTk4NTYzYjM4Yg==", "commit": {"author": {"name": "Marek Michalkiewicz", "email": "marekm@amelek.gda.pl", "date": "2002-06-09T18:06:10Z"}, "committer": {"name": "Marek Michalkiewicz", "email": "marekm@gcc.gnu.org", "date": "2002-06-09T18:06:10Z"}, "message": "avr.c (avr_mcu_types): Update for new devices.\n\n\n\t* config/avr/avr.c (avr_mcu_types): Update for new devices.\n\t* config/avr/avr.h (TARGET_SWITCHES, AVR_MEGA): Add -mshort-calls.\n\t(LINK_SPEC, CRT_BINUTILS_SPECS): Update for new devices.\n\t* config/avr/avr.md (\"type\" and \"length\" attributes): New type\n\t\"xcall\", length 1 or 2 if AVR_MEGA.  Use in all patterns that\n\toutput a single \"call\" or \"rcall\" insn depending on device size.\n\t* config/avr/t-avr (MULTILIB_MATCHES): Update for new devices.\n\nFrom-SVN: r54410", "tree": {"sha": "5de871bbfd36e59cbb8c7e33b6a02b443f77535e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5de871bbfd36e59cbb8c7e33b6a02b443f77535e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25f2e176414291186a206bb5f7cdc3e98563b38b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25f2e176414291186a206bb5f7cdc3e98563b38b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25f2e176414291186a206bb5f7cdc3e98563b38b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25f2e176414291186a206bb5f7cdc3e98563b38b/comments", "author": null, "committer": null, "parents": [{"sha": "6ef0903d0f09e153fb47e2b6f127ae7a7a91ede9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ef0903d0f09e153fb47e2b6f127ae7a7a91ede9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ef0903d0f09e153fb47e2b6f127ae7a7a91ede9"}], "stats": {"total": 76, "additions": 42, "deletions": 34}, "files": [{"sha": "79b875c127d3604a30b8874d1d5179bfb8609960", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f2e176414291186a206bb5f7cdc3e98563b38b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f2e176414291186a206bb5f7cdc3e98563b38b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25f2e176414291186a206bb5f7cdc3e98563b38b", "patch": "@@ -1,3 +1,13 @@\n+2002-06-09  Marek Michalkiewicz  <marekm@amelek.gda.pl>\n+\n+\t* config/avr/avr.c (avr_mcu_types): Update for new devices.\n+\t* config/avr/avr.h (TARGET_SWITCHES, AVR_MEGA): Add -mshort-calls.\n+\t(LINK_SPEC, CRT_BINUTILS_SPECS): Update for new devices.\n+\t* config/avr/avr.md (\"type\" and \"length\" attributes): New type\n+\t\"xcall\", length 1 or 2 if AVR_MEGA.  Use in all patterns that\n+\toutput a single \"call\" or \"rcall\" insn depending on device size.\n+\t* config/avr/t-avr (MULTILIB_MATCHES): Update for new devices.\n+\n 2002-06-09  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/{aix43.h,aix5.1} (ASM_CPU_SPEC): Add power3"}, {"sha": "1f51c038b4065fd6175ddbc64f0b1f51f46b859d", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f2e176414291186a206bb5f7cdc3e98563b38b/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f2e176414291186a206bb5f7cdc3e98563b38b/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=25f2e176414291186a206bb5f7cdc3e98563b38b", "patch": "@@ -171,6 +171,7 @@ static const struct mcu_type_s avr_mcu_types[] = {\n   { \"at90s8515\", 2, \"__AVR_AT90S8515__\" },\n   { \"at90c8534\", 2, \"__AVR_AT90C8534__\" },\n   { \"at90s8535\", 2, \"__AVR_AT90S8535__\" },\n+  { \"at86rf401\", 2, \"__AVR_AT86RF401__\" },\n     /* Classic, > 8K.  */\n   { \"avr3\",      3, NULL },\n   { \"atmega103\", 3, \"__AVR_ATmega103__\" },\n@@ -182,12 +183,14 @@ static const struct mcu_type_s avr_mcu_types[] = {\n   { \"avr4\",      4, NULL },\n   { \"atmega8\",   4, \"__AVR_ATmega8__\" },\n   { \"atmega8515\", 4, \"__AVR_ATmega8515__\" },\n+  { \"atmega8535\", 4, \"__AVR_ATmega8535__\" },\n     /* Enhanced, > 8K.  */\n   { \"avr5\",      5, NULL },\n   { \"atmega16\",  5, \"__AVR_ATmega16__\" },\n   { \"atmega161\", 5, \"__AVR_ATmega161__\" },\n   { \"atmega162\", 5, \"__AVR_ATmega162__\" },\n   { \"atmega163\", 5, \"__AVR_ATmega163__\" },\n+  { \"atmega169\", 5, \"__AVR_ATmega169__\" },\n   { \"atmega32\",  5, \"__AVR_ATmega32__\" },\n   { \"atmega323\", 5, \"__AVR_ATmega323__\" },\n   { \"atmega64\",  5, \"__AVR_ATmega64__\" },"}, {"sha": "5148f3ee8dc36f63144dfda4a100d104509f512d", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f2e176414291186a206bb5f7cdc3e98563b38b/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f2e176414291186a206bb5f7cdc3e98563b38b/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=25f2e176414291186a206bb5f7cdc3e98563b38b", "patch": "@@ -58,6 +58,7 @@ extern int target_flags;\n #define MASK_NO_INTERRUPTS\t0x00020000\n #define MASK_CALL_PROLOGUES\t0x00040000\n #define MASK_TINY_STACK\t\t0x00080000\n+#define MASK_SHORT_CALLS\t0x00100000\n \n #define TARGET_ORDER_1\t\t(target_flags & MASK_ORDER_1)\n #define TARGET_ORDER_2\t\t(target_flags & MASK_ORDER_2)\n@@ -67,6 +68,7 @@ extern int target_flags;\n #define TARGET_CALL_PROLOGUES\t(target_flags & MASK_CALL_PROLOGUES)\n #define TARGET_TINY_STACK\t(target_flags & MASK_TINY_STACK)\n #define TARGET_NO_TABLEJUMP\t(target_flags & MASK_NO_TABLEJUMP)\n+#define TARGET_SHORT_CALLS\t(target_flags & MASK_SHORT_CALLS)\n \n /* Dump each assembler insn's rtl into the output file.\n    This is for debugging the compiler itself.  */\n@@ -86,6 +88,8 @@ extern int target_flags;\n     N_(\"Change only the low 8 bits of the stack pointer\") },\t\t\\\n   { \"no-tablejump\", MASK_NO_TABLEJUMP,\t\t\t\t\t\\\n     N_(\"Do not generate tablejump insns\") },\t\t\t\t\\\n+  { \"short-calls\", MASK_SHORT_CALLS,\t\t\t\t\t\\\n+    N_(\"Use rjmp/rcall (limited range) on >8K devices\") },\t\t\\\n   { \"rtl\", MASK_RTL_DUMP, NULL },\t\t\t\t\t\\\n   { \"size\", MASK_INSN_SIZE_DUMP,\t\t\t\t\t\\\n     N_(\"Output instruction sizes to the asm file\") },\t\t\t\\\n@@ -101,7 +105,7 @@ extern int avr_mega_p;\n extern int avr_enhanced_p;\n extern int avr_asm_only_p;\n \n-#define AVR_MEGA (avr_mega_p)\n+#define AVR_MEGA (avr_mega_p && !TARGET_SHORT_CALLS)\n #define AVR_ENHANCED (avr_enhanced_p)\n \n #define TARGET_OPTIONS {\t\t\t\t\t\t      \\\n@@ -2585,11 +2589,11 @@ extern int avr_case_values_threshold;\n \n #define LINK_SPEC \" %{!mmcu*:-m avr2}\\\n %{mmcu=at90s1200|mmcu=attiny1*|mmcu=attiny28:-m avr1} \\\n-%{mmcu=attiny22|mmcu=attiny26|mmcu=at90s2*|mmcu=at90s4*|mmcu=at90s8*|mmcu=at90c8*:-m avr2}\\\n+%{mmcu=attiny22|mmcu=attiny26|mmcu=at90s2*|mmcu=at90s4*|mmcu=at90s8*|mmcu=at90c8*|mmcu=at86rf401:-m avr2}\\\n %{mmcu=atmega103|mmcu=atmega603|mmcu=at43*|mmcu=at76*:-m avr3}\\\n %{mmcu=atmega8*:-m avr4}\\\n %{mmcu=atmega16*|mmcu=atmega32*|mmcu=atmega64|mmcu=atmega128|mmcu=at94k:-m avr5}\\\n-%{mmcu=atmega64|mmcu=atmega128|mmcu=atmega162: -Tdata 0x800100} \"\n+%{mmcu=atmega64|mmcu=atmega128|mmcu=atmega162|mmcu=atmega169: -Tdata 0x800100} \"\n \n /* A C string constant that tells the GNU CC driver program options to\n    pass to the linker.  It can also specify how to translate options\n@@ -2653,17 +2657,20 @@ extern int avr_case_values_threshold;\n %{mmcu=at90s4434:crts4434.o%s} \\\n %{mmcu=at90c8534:crtc8534.o%s} \\\n %{mmcu=at90s8535:crts8535.o%s} \\\n+%{mmcu=at86rf401:crt86401.o%s} \\\n %{mmcu=atmega103|mmcu=avr3:crtm103.o%s} \\\n %{mmcu=atmega603:crtm603.o%s} \\\n %{mmcu=at43usb320:crt43320.o%s} \\\n %{mmcu=at43usb355:crt43355.o%s} \\\n %{mmcu=at76c711:crt76711.o%s} \\\n %{mmcu=atmega8|mmcu=avr4:crtm8.o%s} \\\n %{mmcu=atmega8515:crtm8515.o%s} \\\n+%{mmcu=atmega8535:crtm8535.o%s} \\\n %{mmcu=atmega16:crtm16.o%s} \\\n %{mmcu=atmega161|mmcu=avr5:crtm161.o%s} \\\n %{mmcu=atmega162:crtm162.o%s} \\\n %{mmcu=atmega163:crtm163.o%s} \\\n+%{mmcu=atmega169:crtm169.o%s} \\\n %{mmcu=atmega32:crtm32.o%s} \\\n %{mmcu=atmega323:crtm323.o%s} \\\n %{mmcu=atmega64:crtm64.o%s} \\"}, {"sha": "017b8a2c8c2cf97da9259cde84d09f67a9c5496b", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 15, "deletions": 29, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f2e176414291186a206bb5f7cdc3e98563b38b/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f2e176414291186a206bb5f7cdc3e98563b38b/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=25f2e176414291186a206bb5f7cdc3e98563b38b", "patch": "@@ -39,7 +39,7 @@\n (define_attr \"cc\" \"none,set_czn,set_zn,set_n,compare,clobber\"\n   (const_string \"none\"))\n \n-(define_attr \"type\" \"branch,branch1,arith\"\n+(define_attr \"type\" \"branch,branch1,arith,xcall\"\n   (const_string \"arith\"))\n \n (define_attr \"mcu_enhanced\" \"yes,no\"\n@@ -80,7 +80,11 @@\n                                           (le (minus (pc) (match_dup 0))\n                                               (const_int 2043)))\n                                      (const_int 3)\n-                                     (const_int 4)))]\n+                                     (const_int 4)))\n+\t (eq_attr \"type\" \"xcall\")\n+\t (if_then_else (eq_attr \"mcu_mega\" \"no\")\n+\t\t       (const_int 1)\n+\t\t       (const_int 2))]\n         (const_int 2)))\n \n (define_insn \"*pop1\"\n@@ -718,9 +722,7 @@\n    (clobber (reg:QI 22))]\n   \"!AVR_ENHANCED\"\n   \"%~call __mulqi3\"\n-  [(set (attr \"length\") (if_then_else (eq_attr \"mcu_mega\" \"no\")\n-\t\t\t\t      (const_int 1)\n-\t\t\t\t      (const_int 2)))\n+  [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"mulqihi3\"\n@@ -790,9 +792,7 @@\n    (clobber (reg:QI 21))]\n   \"!AVR_ENHANCED\"\n   \"%~call __mulhi3\"\n-  [(set (attr \"length\") (if_then_else (eq_attr \"mcu_mega\" \"no\")\n-\t\t\t\t      (const_int 1)\n-\t\t\t\t      (const_int 2)))\n+  [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n ;; Operand 2 (reg:SI 18) not clobbered on the enhanced core.\n@@ -813,9 +813,7 @@\n    (clobber (reg:HI 30))]\n   \"AVR_ENHANCED\"\n   \"%~call __mulsi3\"\n-  [(set (attr \"length\") (if_then_else (eq_attr \"mcu_mega\" \"no\")\n-\t\t\t\t      (const_int 1)\n-\t\t\t\t      (const_int 2)))\n+  [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n ; / % / % / % / % / % / % / % / % / % / % / % / % / % / % / % / % / % / % / %\n@@ -845,9 +843,7 @@\n    (clobber (reg:QI 23))]\n   \"\"\n   \"%~call __divmodqi4\"\n-  [(set (attr \"length\") (if_then_else (eq_attr \"mcu_mega\" \"no\")\n-\t\t\t\t      (const_int 1)\n-\t\t\t\t      (const_int 2)))\n+  [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n (define_expand \"udivmodqi4\"\n@@ -867,9 +863,7 @@\n    (clobber (reg:QI 23))]\n   \"\"\n   \"%~call __udivmodqi4\"\n-  [(set (attr \"length\") (if_then_else (eq_attr \"mcu_mega\" \"no\")\n-\t\t\t\t      (const_int 1)\n-\t\t\t\t      (const_int 2)))\n+  [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n (define_expand \"divmodhi4\"\n@@ -891,9 +885,7 @@\n    (clobber (reg:QI 21))]\n   \"\"\n   \"%~call __divmodhi4\"\n-  [(set (attr \"length\") (if_then_else (eq_attr \"mcu_mega\" \"no\")\n-\t\t\t\t      (const_int 1)\n-\t\t\t\t      (const_int 2)))\n+  [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n (define_expand \"udivmodhi4\"\n@@ -915,9 +907,7 @@\n    (clobber (reg:QI 21))]\n   \"\"\n   \"%~call __udivmodhi4\"\n-  [(set (attr \"length\") (if_then_else (eq_attr \"mcu_mega\" \"no\")\n-\t\t\t\t      (const_int 1)\n-\t\t\t\t      (const_int 2)))\n+  [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n (define_expand \"divmodsi4\"\n@@ -939,9 +929,7 @@\n    (clobber (reg:HI 30))]\n   \"\"\n   \"%~call __divmodsi4\"\n-  [(set (attr \"length\") (if_then_else (eq_attr \"mcu_mega\" \"no\")\n-\t\t\t\t      (const_int 1)\n-\t\t\t\t      (const_int 2)))\n+  [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n (define_expand \"udivmodsi4\"\n@@ -963,9 +951,7 @@\n    (clobber (reg:HI 30))]\n   \"\"\n   \"%~call __udivmodsi4\"\n-  [(set (attr \"length\") (if_then_else (eq_attr \"mcu_mega\" \"no\")\n-\t\t\t\t      (const_int 1)\n-\t\t\t\t      (const_int 2)))\n+  [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n ;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&"}, {"sha": "9df673e3f17cd24b45603365af02dce5f8b16d54", "filename": "gcc/config/avr/t-avr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f2e176414291186a206bb5f7cdc3e98563b38b/gcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f2e176414291186a206bb5f7cdc3e98563b38b/gcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Ft-avr?ref=25f2e176414291186a206bb5f7cdc3e98563b38b", "patch": "@@ -49,9 +49,11 @@ MULTILIB_MATCHES = \\\n \tmmcu?avr3=mmcu?atmega103 mmcu?avr3=mmcu?atmega603 \\\n \tmmcu?avr3=mmcu?at43usb320 mmcu?avr3=at43usb355 \\\n \tmmcu?avr3=mmcu?at76c711 \\\n-\tmmcu?avr4=mmcu?atmega8515 mmcu?avr4=mmcu?atmega8 \\\n+\tmmcu?avr4=mmcu?atmega8515 mmcu?avr4=mmcu?atmega8535 \\\n+\tmmcu?avr4=mmcu?atmega8 \\\n \tmmcu?avr5=mmcu?atmega161 mmcu?avr5=mmcu?atmega162 \\\n-\tmmcu?avr5=mmcu?atmega163 mmcu?avr5=mmcu?atmega16 \\\n+\tmmcu?avr5=mmcu?atmega163 mmcu?avr5=mmcu?atmega169 \\\n+\tmmcu?avr5=mmcu?atmega16 \\\n \tmmcu?avr5=mmcu?atmega323 mmcu?avr5=mmcu?atmega32 \\\n \tmmcu?avr5=mmcu?atmega64  mmcu?avr5=mmcu?atmega128 \\\n \tmmcu?avr5=mmcu?at94k"}]}