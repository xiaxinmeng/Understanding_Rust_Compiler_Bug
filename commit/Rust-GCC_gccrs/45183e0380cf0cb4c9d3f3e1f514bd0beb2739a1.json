{"sha": "45183e0380cf0cb4c9d3f3e1f514bd0beb2739a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUxODNlMDM4MGNmMGNiNGM5ZDNmM2UxZjUxNGJkMGJlYjI3MzlhMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-03-18T18:24:07Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-03-18T18:24:07Z"}, "message": "alias.c (rtx_equal_for_memref_p): Assume that X and Y has been canonicalized.\n\n\t* alias.c (rtx_equal_for_memref_p): Assume that X and Y has been\n\tcanonicalized.\n\t(memrefs_conflict_p): Likewise.\n\t(addr_side_effect_eval): Canonicalize the constructed address.\n\nFrom-SVN: r64540", "tree": {"sha": "3b38a67ade57d53e9487e33073b52abb24091408", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b38a67ade57d53e9487e33073b52abb24091408"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45183e0380cf0cb4c9d3f3e1f514bd0beb2739a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45183e0380cf0cb4c9d3f3e1f514bd0beb2739a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45183e0380cf0cb4c9d3f3e1f514bd0beb2739a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45183e0380cf0cb4c9d3f3e1f514bd0beb2739a1/comments", "author": null, "committer": null, "parents": [{"sha": "897db4af51cf3c7abccb0dfa75d957304671c7cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/897db4af51cf3c7abccb0dfa75d957304671c7cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/897db4af51cf3c7abccb0dfa75d957304671c7cf"}], "stats": {"total": 63, "additions": 45, "deletions": 18}, "files": [{"sha": "c259d56dc0bd2714385788cb43a079270fa60b99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45183e0380cf0cb4c9d3f3e1f514bd0beb2739a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45183e0380cf0cb4c9d3f3e1f514bd0beb2739a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45183e0380cf0cb4c9d3f3e1f514bd0beb2739a1", "patch": "@@ -1,3 +1,10 @@\n+Tue Mar 18 19:22:57 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* alias.c (rtx_equal_for_memref_p): Assume that X and Y has been\n+\tcanonicalized.\n+\t(memrefs_conflict_p): Likewise.\n+\t(addr_side_effect_eval): Canonicalize the constructed address.\n+\n Tue Mar 18 13:15:08 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (cvtts?2si peep2): New."}, {"sha": "ba8fceec298402e8a93ebbd86be7330dacc1ff33", "filename": "gcc/alias.c", "status": "modified", "additions": 38, "deletions": 18, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45183e0380cf0cb4c9d3f3e1f514bd0beb2739a1/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45183e0380cf0cb4c9d3f3e1f514bd0beb2739a1/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=45183e0380cf0cb4c9d3f3e1f514bd0beb2739a1", "patch": "@@ -1118,6 +1118,7 @@ canon_rtx (x)\n }\n \n /* Return 1 if X and Y are identical-looking rtx's.\n+   Expect that X and Y has been already canonicalized.\n \n    We use the data in reg_known_value above to see if two registers with\n    different numbers are, in fact, equivalent.  */\n@@ -1136,9 +1137,6 @@ rtx_equal_for_memref_p (x, y)\n   if (x == 0 || y == 0)\n     return 0;\n \n-  x = canon_rtx (x);\n-  y = canon_rtx (y);\n-\n   if (x == y)\n     return 1;\n \n@@ -1177,24 +1175,42 @@ rtx_equal_for_memref_p (x, y)\n \n     case ADDRESSOF:\n       return (XINT (x, 1) == XINT (y, 1)\n-\t      && rtx_equal_for_memref_p (XEXP (x, 0), XEXP (y, 0)));\n+\t      && rtx_equal_for_memref_p (XEXP (x, 0),\n+\t\t      \t\t\t XEXP (y, 0)));\n \n     default:\n       break;\n     }\n \n-  /* For commutative operations, the RTX match if the operand match in any\n-     order.  Also handle the simple binary and unary cases without a loop.  */\n-  if (code == EQ || code == NE || GET_RTX_CLASS (code) == 'c')\n+  /* canon_rtx knows how to handle plus.  No need to canonicalize.  */\n+  if (code == PLUS)\n     return ((rtx_equal_for_memref_p (XEXP (x, 0), XEXP (y, 0))\n \t     && rtx_equal_for_memref_p (XEXP (x, 1), XEXP (y, 1)))\n \t    || (rtx_equal_for_memref_p (XEXP (x, 0), XEXP (y, 1))\n \t\t&& rtx_equal_for_memref_p (XEXP (x, 1), XEXP (y, 0))));\n+  /* For commutative operations, the RTX match if the operand match in any\n+     order.  Also handle the simple binary and unary cases without a loop.  */\n+  if (code == EQ || code == NE || GET_RTX_CLASS (code) == 'c')\n+    {\n+      rtx xop0 = canon_rtx (XEXP (x, 0));\n+      rtx yop0 = canon_rtx (XEXP (y, 0));\n+      rtx yop1 = canon_rtx (XEXP (y, 1));\n+\n+      return ((rtx_equal_for_memref_p (xop0, yop0)\n+\t       && rtx_equal_for_memref_p (canon_rtx (XEXP (x, 1)), yop1))\n+\t      || (rtx_equal_for_memref_p (xop0, yop1)\n+\t\t  && rtx_equal_for_memref_p (canon_rtx (XEXP (x, 1)), yop0)));\n+    }\n   else if (GET_RTX_CLASS (code) == '<' || GET_RTX_CLASS (code) == '2')\n-    return (rtx_equal_for_memref_p (XEXP (x, 0), XEXP (y, 0))\n-\t    && rtx_equal_for_memref_p (XEXP (x, 1), XEXP (y, 1)));\n+    {\n+      return (rtx_equal_for_memref_p (canon_rtx (XEXP (x, 0)),\n+\t  \t\t\t      canon_rtx (XEXP (y, 0)))\n+\t      && rtx_equal_for_memref_p (canon_rtx (XEXP (x, 1)),\n+\t\t\t\t\t canon_rtx (XEXP (y, 1))));\n+    }\n   else if (GET_RTX_CLASS (code) == '1')\n-    return rtx_equal_for_memref_p (XEXP (x, 0), XEXP (y, 0));\n+    return rtx_equal_for_memref_p (canon_rtx (XEXP (x, 0)),\n+      \t\t\t\t   canon_rtx (XEXP (y, 0)));\n \n   /* Compare the elements.  If any pair of corresponding elements\n      fail to match, return 0 for the whole things.\n@@ -1218,13 +1234,14 @@ rtx_equal_for_memref_p (x, y)\n \n \t  /* And the corresponding elements must match.  */\n \t  for (j = 0; j < XVECLEN (x, i); j++)\n-\t    if (rtx_equal_for_memref_p (XVECEXP (x, i, j),\n-\t\t\t\t\tXVECEXP (y, i, j)) == 0)\n+\t    if (rtx_equal_for_memref_p (canon_rtx (XVECEXP (x, i, j)),\n+\t\t\t\t\tcanon_rtx (XVECEXP (y, i, j))) == 0)\n \t      return 0;\n \t  break;\n \n \tcase 'e':\n-\t  if (rtx_equal_for_memref_p (XEXP (x, i), XEXP (y, i)) == 0)\n+\t  if (rtx_equal_for_memref_p (canon_rtx (XEXP (x, i)),\n+\t\t\t\t      canon_rtx (XEXP (y, i))) == 0)\n \t    return 0;\n \t  break;\n \n@@ -1549,9 +1566,11 @@ addr_side_effect_eval (addr, size, n_refs)\n     }\n \n   if (offset)\n-    addr = gen_rtx_PLUS (GET_MODE (addr), XEXP (addr, 0), GEN_INT (offset));\n+    addr = gen_rtx_PLUS (GET_MODE (addr), XEXP (addr, 0),\n+\t\t         GEN_INT (offset));\n   else\n     addr = XEXP (addr, 0);\n+  addr = canon_rtx (addr);\n \n   return addr;\n }\n@@ -1561,6 +1580,7 @@ addr_side_effect_eval (addr, size, n_refs)\n    C is nonzero, we are testing aliases between X and Y + C.\n    XSIZE is the size in bytes of the X reference,\n    similarly YSIZE is the size in bytes for Y.\n+   Expect that canon_rtx has been already called for X and Y.\n \n    If XSIZE or YSIZE is zero, we do not know the amount of memory being\n    referenced (the reference was BLKmode), so make the most pessimistic\n@@ -1588,13 +1608,13 @@ memrefs_conflict_p (xsize, x, ysize, y, c)\n   else if (GET_CODE (x) == LO_SUM)\n     x = XEXP (x, 1);\n   else\n-    x = canon_rtx (addr_side_effect_eval (x, xsize, 0));\n+    x = addr_side_effect_eval (x, xsize, 0);\n   if (GET_CODE (y) == HIGH)\n     y = XEXP (y, 0);\n   else if (GET_CODE (y) == LO_SUM)\n     y = XEXP (y, 1);\n   else\n-    y = canon_rtx (addr_side_effect_eval (y, ysize, 0));\n+    y = addr_side_effect_eval (y, ysize, 0);\n \n   if (rtx_equal_for_memref_p (x, y))\n     {\n@@ -1717,7 +1737,7 @@ memrefs_conflict_p (xsize, x, ysize, y, c)\n     {\n       if (GET_CODE (y) == AND || ysize < -INTVAL (XEXP (x, 1)))\n \txsize = -1;\n-      return memrefs_conflict_p (xsize, XEXP (x, 0), ysize, y, c);\n+      return memrefs_conflict_p (xsize, canon_rtx (XEXP (x, 0)), ysize, y, c);\n     }\n   if (GET_CODE (y) == AND && GET_CODE (XEXP (y, 1)) == CONST_INT)\n     {\n@@ -1727,7 +1747,7 @@ memrefs_conflict_p (xsize, x, ysize, y, c)\n \t a following reference, so we do nothing with that for now.  */\n       if (GET_CODE (x) == AND || xsize < -INTVAL (XEXP (y, 1)))\n \tysize = -1;\n-      return memrefs_conflict_p (xsize, x, ysize, XEXP (y, 0), c);\n+      return memrefs_conflict_p (xsize, x, ysize, canon_rtx (XEXP (y, 0)), c);\n     }\n \n   if (GET_CODE (x) == ADDRESSOF)"}]}