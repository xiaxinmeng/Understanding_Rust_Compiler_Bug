{"sha": "8a6ef76052f2d275e86bec08c16db3cfea263f5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE2ZWY3NjA1MmYyZDI3NWU4NmJlYzA4YzE2ZGIzY2ZlYTI2M2Y1Yw==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2013-12-27T14:22:35Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-12-27T14:22:35Z"}, "message": "sse.md (<code><mode>3<mask_name>): Extend to support EVEX's SAE mode.\n\n        * config/i386/sse.md (<code><mode>3<mask_name>): Extend to support\n        EVEX's SAE mode.\n        (*<code><mode>3_finite<mask_name>): Ditto.\n        (*<code><mode>3<mask_name>): Ditto.\n        (avx512f_cmp<mode>3<mask_scalar_merge_name>): Ditto.\n        (avx512f_vmcmp<mode>3): Ditto.\n        (avx512f_vmcmp<mode>3_mask): Ditto.\n        (<sse>_comi): Ditto.\n        (<sse>_ucomi): Ditto.\n        (sse_cvttss2si): Ditto.\n        (sse_cvttss2siq): Ditto.\n        (<fixsuffix>fix_truncv16sfv16si2<mask_name>): Ditto.\n        (avx512f_vcvttss2usi): Ditto.\n        (avx512f_vcvttss2usiq): Ditto.\n        (avx512f_vcvttsd2usi): Ditto.\n        (avx512f_vcvttsd2usiq): Ditto.\n        (sse2_cvttsd2si): Ditto.\n        (sse2_cvttsd2siq): Ditto.\n        (<fixsuffix>fix_truncv8dfv8si2<mask_name>): Ditto.\n        (<sse2_avx_avx512f>_cvtps2pd<avxsizesuffix><mask_name>): Ditto.\n        (avx512f_getexp<mode><mask_name>): Ditto.\n        (avx512f_fixupimm<mode><sd_maskz_name>): Ditto.\n        (avx512f_fixupimm<mode>_mask): Ditto.\n        (avx512f_sfixupimm<mode><sd_maskz_name>): Ditto.\n        (avx512f_sfixupimm<mode>_mask): Ditto.\n        (avx512f_rndscale<mode><mask_name>): Ditto.\n        (<mask_codefor>avx512f_vcvtph2ps512<mask_name>): Ditto.\n        (avx512f_getmant<mode><mask_name>): Ditto.\n        * config/i386/subst.md (round_saeonly_name): New.\n        (round_saeonly_mask_operand2): Ditto.\n        (round_saeonly_mask_operand3): Ditto.\n        (round_saeonly_mask_scalar_operand3): Ditto.\n        (round_saeonly_mask_scalar_operand4): Ditto.\n        (round_saeonly_mask_scalar_merge_operand4): Ditto.\n        (round_saeonly_sd_mask_operand5): Ditto.\n        (round_saeonly_op2): Ditto.\n        (round_saeonly_op4): Ditto.\n        (round_saeonly_op5): Ditto.\n        (round_saeonly_op6): Ditto.\n        (round_saeonly_mask_op2): Ditto.\n        (round_saeonly_mask_op3): Ditto.\n        (round_saeonly_mask_scalar_op3): Ditto.\n        (round_saeonly_mask_scalar_op4): Ditto.\n        (round_saeonly_mask_scalar_merge_op4): Ditto.\n        (round_saeonly_sd_mask_op5): Ditto.\n        (round_saeonly_constraint): Ditto.\n        (round_saeonly_constraint2): Ditto.\n        (round_saeonly_nimm_predicate): Ditto.\n        (round_saeonly_mode512bit_condition): Ditto.\n        (round_saeonly): Ditto.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\nCo-Authored-By: Sergey Lega <sergey.s.lega@intel.com>\n\nFrom-SVN: r206221", "tree": {"sha": "8bb22789757806aac0bf4df1363cf36576b8c785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bb22789757806aac0bf4df1363cf36576b8c785"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a6ef76052f2d275e86bec08c16db3cfea263f5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a6ef76052f2d275e86bec08c16db3cfea263f5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a6ef76052f2d275e86bec08c16db3cfea263f5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a6ef76052f2d275e86bec08c16db3cfea263f5c/comments", "author": null, "committer": null, "parents": [{"sha": "06bc9e41f4da836809323409de0a27892cba655a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06bc9e41f4da836809323409de0a27892cba655a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06bc9e41f4da836809323409de0a27892cba655a"}], "stats": {"total": 266, "additions": 179, "deletions": 87}, "files": [{"sha": "88e65b5cf60558d2d1596725dafdc3dd980d3674", "filename": "gcc/ChangeLog", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a6ef76052f2d275e86bec08c16db3cfea263f5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a6ef76052f2d275e86bec08c16db3cfea263f5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a6ef76052f2d275e86bec08c16db3cfea263f5c", "patch": "@@ -1,3 +1,64 @@\n+2013-12-27  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Sergey Lega  <sergey.s.lega@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/sse.md (<code><mode>3<mask_name>): Extend to support\n+\tEVEX's SAE mode.\n+\t(*<code><mode>3_finite<mask_name>): Ditto.\n+\t(*<code><mode>3<mask_name>): Ditto.\n+\t(avx512f_cmp<mode>3<mask_scalar_merge_name>): Ditto.\n+\t(avx512f_vmcmp<mode>3): Ditto.\n+\t(avx512f_vmcmp<mode>3_mask): Ditto.\n+\t(<sse>_comi): Ditto.\n+\t(<sse>_ucomi): Ditto.\n+\t(sse_cvttss2si): Ditto.\n+\t(sse_cvttss2siq): Ditto.\n+\t(<fixsuffix>fix_truncv16sfv16si2<mask_name>): Ditto.\n+\t(avx512f_vcvttss2usi): Ditto.\n+\t(avx512f_vcvttss2usiq): Ditto.\n+\t(avx512f_vcvttsd2usi): Ditto.\n+\t(avx512f_vcvttsd2usiq): Ditto.\n+\t(sse2_cvttsd2si): Ditto.\n+\t(sse2_cvttsd2siq): Ditto.\n+\t(<fixsuffix>fix_truncv8dfv8si2<mask_name>): Ditto.\n+\t(<sse2_avx_avx512f>_cvtps2pd<avxsizesuffix><mask_name>): Ditto.\n+\t(avx512f_getexp<mode><mask_name>): Ditto.\n+\t(avx512f_fixupimm<mode><sd_maskz_name>): Ditto.\n+\t(avx512f_fixupimm<mode>_mask): Ditto.\n+\t(avx512f_sfixupimm<mode><sd_maskz_name>): Ditto.\n+\t(avx512f_sfixupimm<mode>_mask): Ditto.\n+\t(avx512f_rndscale<mode><mask_name>): Ditto.\n+\t(<mask_codefor>avx512f_vcvtph2ps512<mask_name>): Ditto.\n+\t(avx512f_getmant<mode><mask_name>): Ditto.\n+\t* config/i386/subst.md (round_saeonly_name): New.\n+\t(round_saeonly_mask_operand2): Ditto.\n+\t(round_saeonly_mask_operand3): Ditto.\n+\t(round_saeonly_mask_scalar_operand3): Ditto.\n+\t(round_saeonly_mask_scalar_operand4): Ditto.\n+\t(round_saeonly_mask_scalar_merge_operand4): Ditto.\n+\t(round_saeonly_sd_mask_operand5): Ditto.\n+\t(round_saeonly_op2): Ditto.\n+\t(round_saeonly_op4): Ditto.\n+\t(round_saeonly_op5): Ditto.\n+\t(round_saeonly_op6): Ditto.\n+\t(round_saeonly_mask_op2): Ditto.\n+\t(round_saeonly_mask_op3): Ditto.\n+\t(round_saeonly_mask_scalar_op3): Ditto.\n+\t(round_saeonly_mask_scalar_op4): Ditto.\n+\t(round_saeonly_mask_scalar_merge_op4): Ditto.\n+\t(round_saeonly_sd_mask_op5): Ditto.\n+\t(round_saeonly_constraint): Ditto.\n+\t(round_saeonly_constraint2): Ditto.\n+\t(round_saeonly_nimm_predicate): Ditto.\n+\t(round_saeonly_mode512bit_condition): Ditto.\n+\t(round_saeonly): Ditto.\n+\n 2013-12-27  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Sergey Lega  <sergey.s.lega@intel.com>"}, {"sha": "59eedf425222b5aaccdfa19ce23282b4b30a8fad", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 87, "deletions": 87, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a6ef76052f2d275e86bec08c16db3cfea263f5c/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a6ef76052f2d275e86bec08c16db3cfea263f5c/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=8a6ef76052f2d275e86bec08c16db3cfea263f5c", "patch": "@@ -1566,45 +1566,45 @@\n ;; isn't really correct, as those rtl operators aren't defined when\n ;; applied to NaNs.  Hopefully the optimizers won't get too smart on us.\n \n-(define_expand \"<code><mode>3<mask_name>\"\n+(define_expand \"<code><mode>3<mask_name><round_saeonly_name>\"\n   [(set (match_operand:VF 0 \"register_operand\")\n \t(smaxmin:VF\n-\t  (match_operand:VF 1 \"nonimmediate_operand\")\n-\t  (match_operand:VF 2 \"nonimmediate_operand\")))]\n-  \"TARGET_SSE && <mask_mode512bit_condition>\"\n+\t  (match_operand:VF 1 \"<round_saeonly_nimm_predicate>\")\n+\t  (match_operand:VF 2 \"<round_saeonly_nimm_predicate>\")))]\n+  \"TARGET_SSE && <mask_mode512bit_condition> && <round_saeonly_mode512bit_condition>\"\n {\n   if (!flag_finite_math_only)\n     operands[1] = force_reg (<MODE>mode, operands[1]);\n   ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\n })\n \n-(define_insn \"*<code><mode>3_finite<mask_name>\"\n+(define_insn \"*<code><mode>3_finite<mask_name><round_saeonly_name>\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n \t(smaxmin:VF\n-\t  (match_operand:VF 1 \"nonimmediate_operand\" \"%0,v\")\n-\t  (match_operand:VF 2 \"nonimmediate_operand\" \"xm,vm\")))]\n+\t  (match_operand:VF 1 \"<round_saeonly_nimm_predicate>\" \"%0,v\")\n+\t  (match_operand:VF 2 \"<round_saeonly_nimm_predicate>\" \"xm,<round_saeonly_constraint>\")))]\n   \"TARGET_SSE && flag_finite_math_only\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n-   && <mask_mode512bit_condition>\"\n+   && <mask_mode512bit_condition> && <round_saeonly_mode512bit_condition>\"\n   \"@\n    <maxmin_float><ssemodesuffix>\\t{%2, %0|%0, %2}\n-   v<maxmin_float><ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n+   v<maxmin_float><ssemodesuffix>\\t{<round_saeonly_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2<round_saeonly_mask_op3>}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseadd\")\n    (set_attr \"btver2_sse_attr\" \"maxmin\")\n    (set_attr \"prefix\" \"<mask_prefix3>\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*<code><mode>3<mask_name>\"\n+(define_insn \"*<code><mode>3<mask_name><round_saeonly_name>\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n \t(smaxmin:VF\n \t  (match_operand:VF 1 \"register_operand\" \"0,v\")\n-\t  (match_operand:VF 2 \"nonimmediate_operand\" \"xm,vm\")))]\n+\t  (match_operand:VF 2 \"<round_saeonly_nimm_predicate>\" \"xm,<round_saeonly_constraint>\")))]\n   \"TARGET_SSE && !flag_finite_math_only\n-   && <mask_mode512bit_condition>\"\n+   && <mask_mode512bit_condition> && <round_saeonly_mode512bit_condition>\"\n   \"@\n    <maxmin_float><ssemodesuffix>\\t{%2, %0|%0, %2}\n-   v<maxmin_float><ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n+   v<maxmin_float><ssemodesuffix>\\t{<round_saeonly_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2<round_saeonly_mask_op3>}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseadd\")\n    (set_attr \"btver2_sse_attr\" \"maxmin\")\n@@ -2142,15 +2142,15 @@\n   [(V16SF \"const_0_to_31_operand\") (V8DF \"const_0_to_31_operand\")\n   (V16SI \"const_0_to_7_operand\") (V8DI \"const_0_to_7_operand\")])\n \n-(define_insn \"avx512f_cmp<mode>3<mask_scalar_merge_name>\"\n+(define_insn \"avx512f_cmp<mode>3<mask_scalar_merge_name><round_saeonly_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n \t(unspec:<avx512fmaskmode>\n \t  [(match_operand:VI48F_512 1 \"register_operand\" \"v\")\n-\t   (match_operand:VI48F_512 2 \"nonimmediate_operand\" \"vm\")\n+\t   (match_operand:VI48F_512 2 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n \t   (match_operand:SI 3 \"<cmp_imm_predicate>\" \"n\")]\n \t  UNSPEC_PCMP))]\n-  \"TARGET_AVX512F\"\n-  \"v<sseintprefix>cmp<ssemodesuffix>\\t{%3, %2, %1, %0<mask_scalar_merge_operand4>|%0<mask_scalar_merge_operand4>, %1, %2, %3}\"\n+  \"TARGET_AVX512F && <round_saeonly_mode512bit_condition>\"\n+  \"v<sseintprefix>cmp<ssemodesuffix>\\t{%3, <round_saeonly_mask_scalar_merge_op4>%2, %1, %0<mask_scalar_merge_operand4>|%0<mask_scalar_merge_operand4>, %1, %2<round_saeonly_mask_scalar_merge_op4>, %3}\"\n   [(set_attr \"type\" \"ssecmp\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"evex\")\n@@ -2170,35 +2170,35 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"avx512f_vmcmp<mode>3\"\n+(define_insn \"avx512f_vmcmp<mode>3<round_saeonly_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n \t(and:<avx512fmaskmode>\n \t  (unspec:<avx512fmaskmode>\n \t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_128 2 \"nonimmediate_operand\" \"vm\")\n+\t     (match_operand:VF_128 2 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n \t     (match_operand:SI 3 \"const_0_to_31_operand\" \"n\")]\n \t    UNSPEC_PCMP)\n \t  (const_int 1)))]\n   \"TARGET_AVX512F\"\n-  \"vcmp<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n+  \"vcmp<ssescalarmodesuffix>\\t{%3, <round_saeonly_op4>%2, %1, %0|%0, %1, %2<round_saeonly_op4>, %3}\"\n   [(set_attr \"type\" \"ssecmp\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n-(define_insn \"avx512f_vmcmp<mode>3_mask\"\n+(define_insn \"avx512f_vmcmp<mode>3_mask<round_saeonly_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n \t(and:<avx512fmaskmode>\n \t  (unspec:<avx512fmaskmode>\n \t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_128 2 \"nonimmediate_operand\" \"vm\")\n+\t     (match_operand:VF_128 2 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n \t     (match_operand:SI 3 \"const_0_to_31_operand\" \"n\")]\n \t    UNSPEC_PCMP)\n \t  (and:<avx512fmaskmode>\n \t    (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k\")\n \t    (const_int 1))))]\n   \"TARGET_AVX512F\"\n-  \"vcmp<ssescalarmodesuffix>\\t{%3, %2, %1, %0%{%4%}|%0%{%4%}, %1, %2, %3}\"\n+  \"vcmp<ssescalarmodesuffix>\\t{%3, <round_saeonly_op5>%2, %1, %0%{%4%}|%0%{%4%}, %1, %2<round_saeonly_op5>, %3}\"\n   [(set_attr \"type\" \"ssecmp\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"evex\")\n@@ -2216,17 +2216,17 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"<sse>_comi\"\n+(define_insn \"<sse>_comi<round_saeonly_name>\"\n   [(set (reg:CCFP FLAGS_REG)\n \t(compare:CCFP\n \t  (vec_select:MODEF\n \t    (match_operand:<ssevecmode> 0 \"register_operand\" \"v\")\n \t    (parallel [(const_int 0)]))\n \t  (vec_select:MODEF\n-\t    (match_operand:<ssevecmode> 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:<ssevecmode> 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n \t    (parallel [(const_int 0)]))))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode)\"\n-  \"%vcomi<ssemodesuffix>\\t{%1, %0|%0, %<iptr>1}\"\n+  \"%vcomi<ssemodesuffix>\\t{<round_saeonly_op2>%1, %0|%0, %<iptr>1<round_saeonly_op2>}\"\n   [(set_attr \"type\" \"ssecomi\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"prefix_rep\" \"0\")\n@@ -2236,17 +2236,17 @@\n \t\t      (const_string \"0\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<sse>_ucomi\"\n+(define_insn \"<sse>_ucomi<round_saeonly_name>\"\n   [(set (reg:CCFPU FLAGS_REG)\n \t(compare:CCFPU\n \t  (vec_select:MODEF\n \t    (match_operand:<ssevecmode> 0 \"register_operand\" \"v\")\n \t    (parallel [(const_int 0)]))\n \t  (vec_select:MODEF\n-\t    (match_operand:<ssevecmode> 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:<ssevecmode> 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n \t    (parallel [(const_int 0)]))))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode)\"\n-  \"%vucomi<ssemodesuffix>\\t{%1, %0|%0, %<iptr>1}\"\n+  \"%vucomi<ssemodesuffix>\\t{<round_saeonly_op2>%1, %0|%0, %<iptr>1<round_saeonly_op2>}\"\n   [(set_attr \"type\" \"ssecomi\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"prefix_rep\" \"0\")\n@@ -3407,14 +3407,14 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"sse_cvttss2si\"\n+(define_insn \"sse_cvttss2si<round_saeonly_name>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(fix:SI\n \t  (vec_select:SF\n-\t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"v,m\")\n+\t    (match_operand:V4SF 1 \"<round_saeonly_nimm_predicate>\" \"v,<round_saeonly_constraint2>\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_SSE\"\n-  \"%vcvttss2si\\t{%1, %0|%0, %k1}\"\n+  \"%vcvttss2si\\t{<round_saeonly_op2>%1, %0|%0, %k1<round_saeonly_op2>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"amdfam10_decode\" \"double,double\")\n@@ -3423,14 +3423,14 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"sse_cvttss2siq\"\n+(define_insn \"sse_cvttss2siq<round_saeonly_name>\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(fix:DI\n \t  (vec_select:SF\n-\t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"v,vm\")\n+\t    (match_operand:V4SF 1 \"<round_saeonly_nimm_predicate>\" \"v,<round_saeonly_constraint>\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_SSE && TARGET_64BIT\"\n-  \"%vcvttss2si{q}\\t{%1, %0|%0, %k1}\"\n+  \"%vcvttss2si{q}\\t{<round_saeonly_op2>%1, %0|%0, %k1<round_saeonly_op2>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"amdfam10_decode\" \"double,double\")\n@@ -3539,12 +3539,12 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_insn \"<fixsuffix>fix_truncv16sfv16si2<mask_name>\"\n+(define_insn \"<fixsuffix>fix_truncv16sfv16si2<mask_name><round_saeonly_name>\"\n   [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n \t(any_fix:V16SI\n-\t  (match_operand:V16SF 1 \"nonimmediate_operand\" \"vm\")))]\n+\t  (match_operand:V16SF 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")))]\n   \"TARGET_AVX512F\"\n-  \"vcvttps2<fixsuffix>dq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  \"vcvttps2<fixsuffix>dq\\t{<round_saeonly_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_saeonly_mask_op2>}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n@@ -3700,26 +3700,26 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"avx512f_vcvttss2usi\"\n+(define_insn \"avx512f_vcvttss2usi<round_saeonly_name>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unsigned_fix:SI\n \t  (vec_select:SF\n-\t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:V4SF 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_AVX512F\"\n-  \"vcvttss2usi\\t{%1, %0|%0, %1}\"\n+  \"vcvttss2usi\\t{<round_saeonly_op2>%1, %0|%0, %1<round_saeonly_op2>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"avx512f_vcvttss2usiq\"\n+(define_insn \"avx512f_vcvttss2usiq<round_saeonly_name>\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unsigned_fix:DI\n \t  (vec_select:SF\n-\t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:V4SF 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_AVX512F && TARGET_64BIT\"\n-  \"vcvttss2usi\\t{%1, %0|%0, %1}\"\n+  \"vcvttss2usi\\t{<round_saeonly_op2>%1, %0|%0, %1<round_saeonly_op2>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"DI\")])\n@@ -3750,26 +3750,26 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"avx512f_vcvttsd2usi\"\n+(define_insn \"avx512f_vcvttsd2usi<round_saeonly_name>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unsigned_fix:SI\n \t  (vec_select:DF\n-\t    (match_operand:V2DF 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:V2DF 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_AVX512F\"\n-  \"vcvttsd2usi\\t{%1, %0|%0, %1}\"\n+  \"vcvttsd2usi\\t{<round_saeonly_op2>%1, %0|%0, %1<round_saeonly_op2>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"avx512f_vcvttsd2usiq\"\n+(define_insn \"avx512f_vcvttsd2usiq<round_saeonly_name>\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unsigned_fix:DI\n \t  (vec_select:DF\n-\t    (match_operand:V2DF 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:V2DF 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_AVX512F && TARGET_64BIT\"\n-  \"vcvttsd2usi\\t{%1, %0|%0, %1}\"\n+  \"vcvttsd2usi\\t{<round_saeonly_op2>%1, %0|%0, %1<round_saeonly_op2>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"DI\")])\n@@ -3835,14 +3835,14 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"sse2_cvttsd2si\"\n+(define_insn \"sse2_cvttsd2si<round_saeonly_name>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(fix:SI\n \t  (vec_select:DF\n-\t    (match_operand:V2DF 1 \"nonimmediate_operand\" \"v,m\")\n+\t    (match_operand:V2DF 1 \"<round_saeonly_nimm_predicate>\" \"v,<round_saeonly_constraint2>\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_SSE2\"\n-  \"%vcvttsd2si\\t{%1, %0|%0, %q1}\"\n+  \"%vcvttsd2si\\t{<round_saeonly_op2>%1, %0|%0, %q1<round_saeonly_op2>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"amdfam10_decode\" \"double,double\")\n@@ -3852,14 +3852,14 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"sse2_cvttsd2siq\"\n+(define_insn \"sse2_cvttsd2siq<round_saeonly_name>\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(fix:DI\n \t  (vec_select:DF\n-\t    (match_operand:V2DF 1 \"nonimmediate_operand\" \"v,m\")\n+\t    (match_operand:V2DF 1 \"<round_saeonly_nimm_predicate>\" \"v,<round_saeonly_constraint2>\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_SSE2 && TARGET_64BIT\"\n-  \"%vcvttsd2si{q}\\t{%1, %0|%0, %q1}\"\n+  \"%vcvttsd2si{q}\\t{<round_saeonly_op2>%1, %0|%0, %q1<round_saeonly_op2>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"amdfam10_decode\" \"double,double\")\n@@ -4019,12 +4019,12 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"OI\")])\n \n-(define_insn \"<fixsuffix>fix_truncv8dfv8si2<mask_name>\"\n+(define_insn \"<fixsuffix>fix_truncv8dfv8si2<mask_name><round_saeonly_name>\"\n   [(set (match_operand:V8SI 0 \"register_operand\" \"=v\")\n \t(any_fix:V8SI\n-\t  (match_operand:V8DF 1 \"nonimmediate_operand\" \"vm\")))]\n+\t  (match_operand:V8DF 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")))]\n   \"TARGET_AVX512F\"\n-  \"vcvttpd2<fixsuffix>dq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  \"vcvttpd2<fixsuffix>dq\\t{<round_saeonly_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_saeonly_mask_op2>}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"OI\")])\n@@ -4185,12 +4185,12 @@\n (define_mode_attr sf2dfmode\n   [(V8DF \"V8SF\") (V4DF \"V4SF\")])\n \n-(define_insn \"<sse2_avx_avx512f>_cvtps2pd<avxsizesuffix><mask_name>\"\n+(define_insn \"<sse2_avx_avx512f>_cvtps2pd<avxsizesuffix><mask_name><round_saeonly_name>\"\n   [(set (match_operand:VF2_512_256 0 \"register_operand\" \"=v\")\n \t(float_extend:VF2_512_256\n-\t  (match_operand:<sf2dfmode> 1 \"nonimmediate_operand\" \"vm\")))]\n-  \"TARGET_AVX && <mask_mode512bit_condition>\"\n-  \"vcvtps2pd\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+\t  (match_operand:<sf2dfmode> 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")))]\n+  \"TARGET_AVX && <mask_mode512bit_condition> && <round_saeonly_mode512bit_condition>\"\n+  \"vcvtps2pd\\t{<round_saeonly_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_saeonly_mask_op2>}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -6560,12 +6560,12 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"avx512f_getexp<mode><mask_name>\"\n+(define_insn \"avx512f_getexp<mode><mask_name><round_saeonly_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n-        (unspec:VF_512 [(match_operand:VF_512 1 \"nonimmediate_operand\" \"vm\")]\n+        (unspec:VF_512 [(match_operand:VF_512 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")]\n                         UNSPEC_GETEXP))]\n    \"TARGET_AVX512F\"\n-   \"vgetexp<ssemodesuffix>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\";\n+   \"vgetexp<ssemodesuffix>\\t{<round_saeonly_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_saeonly_mask_op2>}\";\n     [(set_attr \"prefix\" \"evex\")\n      (set_attr \"mode\" \"<MODE>\")])\n \n@@ -6641,32 +6641,32 @@\n   DONE;\n })\n \n-(define_insn \"avx512f_fixupimm<mode><sd_maskz_name>\"\n+(define_insn \"avx512f_fixupimm<mode><sd_maskz_name><round_saeonly_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n         (unspec:VF_512\n           [(match_operand:VF_512 1 \"register_operand\" \"0\")\n \t   (match_operand:VF_512 2 \"register_operand\" \"v\")\n-           (match_operand:<sseintvecmode> 3 \"nonimmediate_operand\" \"vm\")\n+           (match_operand:<sseintvecmode> 3 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n            (match_operand:SI 4 \"const_0_to_255_operand\")]\n            UNSPEC_FIXUPIMM))]\n   \"TARGET_AVX512F\"\n-  \"vfixupimm<ssemodesuffix>\\t{%4, %3, %2, %0<sd_mask_op5>|%0<sd_mask_op5>, %2, %3, %4}\";\n+  \"vfixupimm<ssemodesuffix>\\t{%4, <round_saeonly_sd_mask_op5>%3, %2, %0<sd_mask_op5>|%0<sd_mask_op5>, %2, %3<round_saeonly_sd_mask_op5>, %4}\";\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fixupimm<mode>_mask\"\n+(define_insn \"avx512f_fixupimm<mode>_mask<round_saeonly_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_512\n           (unspec:VF_512\n             [(match_operand:VF_512 1 \"register_operand\" \"0\")\n \t     (match_operand:VF_512 2 \"register_operand\" \"v\")\n-             (match_operand:<sseintvecmode> 3 \"nonimmediate_operand\" \"vm\")\n+             (match_operand:<sseintvecmode> 3 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n              (match_operand:SI 4 \"const_0_to_255_operand\")]\n              UNSPEC_FIXUPIMM)\n \t  (match_dup 1)\n \t  (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"k\")))]\n   \"TARGET_AVX512F\"\n-  \"vfixupimm<ssemodesuffix>\\t{%4, %3, %2, %0%{%5%}|%0%{%5%}, %2, %3, %4}\";\n+  \"vfixupimm<ssemodesuffix>\\t{%4, <round_saeonly_op6>%3, %2, %0%{%5%}|%0%{%5%}, %2, %3<round_saeonly_op6>, %4}\";\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -6685,49 +6685,49 @@\n   DONE;\n })\n \n-(define_insn \"avx512f_sfixupimm<mode><sd_maskz_name>\"\n+(define_insn \"avx512f_sfixupimm<mode><sd_maskz_name><round_saeonly_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_128\n           (unspec:VF_128\n             [(match_operand:VF_128 1 \"register_operand\" \"0\")\n \t     (match_operand:VF_128 2 \"register_operand\" \"v\")\n-\t     (match_operand:<sseintvecmode> 3 \"nonimmediate_operand\" \"vm\")\n+\t     (match_operand:<sseintvecmode> 3 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n \t     (match_operand:SI 4 \"const_0_to_255_operand\")]\n \t    UNSPEC_FIXUPIMM)\n \t  (match_dup 1)\n \t  (const_int 1)))]\n    \"TARGET_AVX512F\"\n-   \"vfixupimm<ssescalarmodesuffix>\\t{%4, %3, %2, %0<sd_mask_op5>|%0<sd_mask_op5>, %2, %3, %4}\";\n+   \"vfixupimm<ssescalarmodesuffix>\\t{%4, <round_saeonly_sd_mask_op5>%3, %2, %0<sd_mask_op5>|%0<sd_mask_op5>, %2, %3<round_saeonly_sd_mask_op5>, %4}\";\n    [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n-(define_insn \"avx512f_sfixupimm<mode>_mask\"\n+(define_insn \"avx512f_sfixupimm<mode>_mask<round_saeonly_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_128\n \t  (vec_merge:VF_128\n \t    (unspec:VF_128\n \t       [(match_operand:VF_128 1 \"register_operand\" \"0\")\n \t\t(match_operand:VF_128 2 \"register_operand\" \"v\")\n-\t\t(match_operand:<sseintvecmode> 3 \"nonimmediate_operand\" \"vm\")\n+\t\t(match_operand:<sseintvecmode> 3 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n \t\t(match_operand:SI 4 \"const_0_to_255_operand\")]\n \t       UNSPEC_FIXUPIMM)\n \t    (match_dup 1)\n \t    (const_int 1))\n \t  (match_dup 1)\n \t  (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"k\")))]\n   \"TARGET_AVX512F\"\n-  \"vfixupimm<ssescalarmodesuffix>\\t{%4, %3, %2, %0%{%5%}|%0%{%5%}, %2, %3, %4}\";\n+  \"vfixupimm<ssescalarmodesuffix>\\t{%4, <round_saeonly_op6>%3, %2, %0%{%5%}|%0%{%5%}, %2, %3<round_saeonly_op6>, %4}\";\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n-(define_insn \"avx512f_rndscale<mode><mask_name>\"\n+(define_insn \"avx512f_rndscale<mode><mask_name><round_saeonly_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n \t(unspec:VF_512\n-\t  [(match_operand:VF_512 1 \"nonimmediate_operand\" \"vm\")\n+\t  [(match_operand:VF_512 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n \t   (match_operand:SI 2 \"const_0_to_255_operand\")]\n \t  UNSPEC_ROUND))]\n   \"TARGET_AVX512F\"\n-  \"vrndscale<ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n+  \"vrndscale<ssemodesuffix>\\t{%2, <round_saeonly_mask_op3>%1, %0<mask_operand3>|%0<mask_operand3>, %1<round_saeonly_mask_op3>, %2}\"\n   [(set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -14602,13 +14602,13 @@\n    (set_attr \"btver2_decode\" \"double\")\n    (set_attr \"mode\" \"V8SF\")])\n \n-(define_insn \"<mask_codefor>avx512f_vcvtph2ps512<mask_name>\"\n+(define_insn \"<mask_codefor>avx512f_vcvtph2ps512<mask_name><round_saeonly_name>\"\n   [(set (match_operand:V16SF 0 \"register_operand\" \"=v\")\n \t(unspec:V16SF\n-\t  [(match_operand:V16HI 1 \"nonimmediate_operand\" \"vm\")]\n+\t  [(match_operand:V16HI 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")]\n \t  UNSPEC_VCVTPH2PS))]\n   \"TARGET_AVX512F\"\n-  \"vcvtph2ps\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  \"vcvtph2ps\\t{<round_saeonly_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_saeonly_mask_op2>}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"V16SF\")])\n@@ -15107,14 +15107,14 @@\n    (set_attr \"memory\" \"none,load\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"avx512f_getmant<mode><mask_name>\"\n+(define_insn \"avx512f_getmant<mode><mask_name><round_saeonly_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n \t(unspec:VF_512\n-\t  [(match_operand:VF_512 1 \"nonimmediate_operand\" \"vm\")\n+\t  [(match_operand:VF_512 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n \t   (match_operand:SI 2 \"const_0_to_15_operand\")]\n \t  UNSPEC_GETMANT))]\n   \"TARGET_AVX512F\"\n-  \"vgetmant<ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\";\n+  \"vgetmant<ssemodesuffix>\\t{%2, <round_saeonly_mask_op3>%1, %0<mask_operand3>|%0<mask_operand3>, %1<round_saeonly_mask_op3>, %2}\";\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n "}, {"sha": "d17b8b263ed78b29c0cca2fe8a380248015b643f", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a6ef76052f2d275e86bec08c16db3cfea263f5c/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a6ef76052f2d275e86bec08c16db3cfea263f5c/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=8a6ef76052f2d275e86bec08c16db3cfea263f5c", "patch": "@@ -129,3 +129,34 @@\n      (set (match_dup 0)\n           (match_dup 1))\n      (unspec [(match_operand:SI 2 \"const_0_to_4_operand\")] UNSPEC_EMBEDDED_ROUNDING)])])\n+\n+(define_subst_attr \"round_saeonly_name\" \"round_saeonly\" \"\" \"_round\")\n+(define_subst_attr \"round_saeonly_mask_operand2\" \"mask\" \"%R2\" \"%R4\")\n+(define_subst_attr \"round_saeonly_mask_operand3\" \"mask\" \"%R3\" \"%R5\")\n+(define_subst_attr \"round_saeonly_mask_scalar_operand3\" \"mask_scalar\" \"%R3\" \"%R5\")\n+(define_subst_attr \"round_saeonly_mask_scalar_operand4\" \"mask_scalar\" \"%R4\" \"%R6\")\n+(define_subst_attr \"round_saeonly_mask_scalar_merge_operand4\" \"mask_scalar_merge\" \"%R4\" \"%R5\")\n+(define_subst_attr \"round_saeonly_sd_mask_operand5\" \"sd\" \"%R5\" \"%R7\")\n+(define_subst_attr \"round_saeonly_op2\" \"round_saeonly\" \"\" \"%R2\")\n+(define_subst_attr \"round_saeonly_op4\" \"round_saeonly\" \"\" \"%R4\")\n+(define_subst_attr \"round_saeonly_op5\" \"round_saeonly\" \"\" \"%R5\")\n+(define_subst_attr \"round_saeonly_op6\" \"round_saeonly\" \"\" \"%R6\")\n+(define_subst_attr \"round_saeonly_mask_op2\" \"round_saeonly\" \"\" \"<round_saeonly_mask_operand2>\")\n+(define_subst_attr \"round_saeonly_mask_op3\" \"round_saeonly\" \"\" \"<round_saeonly_mask_operand3>\")\n+(define_subst_attr \"round_saeonly_mask_scalar_op3\" \"round_saeonly\" \"\" \"<round_saeonly_mask_scalar_operand3>\")\n+(define_subst_attr \"round_saeonly_mask_scalar_op4\" \"round_saeonly\" \"\" \"<round_saeonly_mask_scalar_operand4>\")\n+(define_subst_attr \"round_saeonly_mask_scalar_merge_op4\" \"round_saeonly\" \"\" \"<round_saeonly_mask_scalar_merge_operand4>\")\n+(define_subst_attr \"round_saeonly_sd_mask_op5\" \"round_saeonly\" \"\" \"<round_saeonly_sd_mask_operand5>\")\n+(define_subst_attr \"round_saeonly_constraint\" \"round_saeonly\" \"vm\" \"v\")\n+(define_subst_attr \"round_saeonly_constraint2\" \"round_saeonly\" \"m\" \"v\")\n+(define_subst_attr \"round_saeonly_nimm_predicate\" \"round_saeonly\" \"nonimmediate_operand\" \"register_operand\")\n+(define_subst_attr \"round_saeonly_mode512bit_condition\" \"round_saeonly\" \"1\" \"(<MODE>mode == V16SFmode || <MODE>mode == V8DFmode)\")\n+\n+(define_subst \"round_saeonly\"\n+  [(set (match_operand:SUBST_A 0)\n+        (match_operand:SUBST_A 1))]\n+  \"TARGET_AVX512F\"\n+  [(parallel[\n+     (set (match_dup 0)\n+          (match_dup 1))\n+     (unspec [(match_operand:SI 2 \"const_4_to_5_operand\")] UNSPEC_EMBEDDED_ROUNDING)])])"}]}