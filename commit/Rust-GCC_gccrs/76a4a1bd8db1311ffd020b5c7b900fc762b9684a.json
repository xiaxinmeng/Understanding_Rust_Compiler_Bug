{"sha": "76a4a1bd8db1311ffd020b5c7b900fc762b9684a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZhNGExYmQ4ZGIxMzExZmZkMDIwYjVjN2I5MDBmYzc2MmI5Njg0YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-12-21T11:50:59Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-12-21T11:50:59Z"}, "message": "alpha.c (alpha_pad_noreturn): New static function.\n\n\t* config/alpha/alpha.c (alpha_pad_noreturn): New static function.\n\t(alpha_reorg): Call alpha_pad_noreturn.\n\nFrom-SVN: r142858", "tree": {"sha": "477e3223d4d59a6aa0cf9dc954bf161be0ddc611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/477e3223d4d59a6aa0cf9dc954bf161be0ddc611"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76a4a1bd8db1311ffd020b5c7b900fc762b9684a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76a4a1bd8db1311ffd020b5c7b900fc762b9684a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76a4a1bd8db1311ffd020b5c7b900fc762b9684a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76a4a1bd8db1311ffd020b5c7b900fc762b9684a/comments", "author": null, "committer": null, "parents": [{"sha": "10bcc2b8a11290732e186b2d795a1ce439993e6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10bcc2b8a11290732e186b2d795a1ce439993e6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10bcc2b8a11290732e186b2d795a1ce439993e6d"}], "stats": {"total": 69, "additions": 64, "deletions": 5}, "files": [{"sha": "98b4531d23085ad3d4bffceb7f717a45fff085b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a4a1bd8db1311ffd020b5c7b900fc762b9684a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a4a1bd8db1311ffd020b5c7b900fc762b9684a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76a4a1bd8db1311ffd020b5c7b900fc762b9684a", "patch": "@@ -1,3 +1,8 @@\n+2008-12-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.c (alpha_pad_noreturn): New static function.\n+\t(alpha_reorg): Call alpha_pad_noreturn.\n+\n 2008-12-21  Denis Chertykov  <denisc@overta.ru>\n \n \t* config/avr/avr.md (\"andsi3\"): Fix wrong cc attribute.\n@@ -152,10 +157,10 @@\n \n 2008-12-17  Sebastian Pop  <sebastian.pop@amd.com>\n \n-        * doc/install.texi (Prerequisites): Document PPL and CLooG-PPL\n-        dependences and the configure options.\n-        (Configuration): Document --with-cloog, --with-ppl, --with-cloog-lib,\n-         --with-ppl-lib, --with-cloog-incude, --with-ppl-include.\n+\t* doc/install.texi (Prerequisites): Document PPL and CLooG-PPL\n+\tdependences and the configure options.\n+\t(Configuration): Document --with-cloog, --with-ppl, --with-cloog-lib,\n+\t--with-ppl-lib, --with-cloog-incude, --with-ppl-include.\n \n 2008-12-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n@@ -243,7 +248,7 @@\n \tfor the milli.a library.\n \n 2008-12-12  Andrew Pinski  <andrew_pinskia@playstation.sony.com>\n-            Peter Bergner <bergner@vnet.ibm.com>\n+\t    Peter Bergner <bergner@vnet.ibm.com>\n \n \tPR target/24779\n \t* config/rs6000/rs6000.md (call_indirect_aix32): Move the load of the"}, {"sha": "d9ed21fba497270e81dc0f01e9b1c550ba0e8ace", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a4a1bd8db1311ffd020b5c7b900fc762b9684a/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a4a1bd8db1311ffd020b5c7b900fc762b9684a/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=76a4a1bd8db1311ffd020b5c7b900fc762b9684a", "patch": "@@ -9299,12 +9299,66 @@ alpha_align_insns (unsigned int max_align,\n       i = next;\n     }\n }\n+\n+/* Insert an unop between a noreturn function call and GP load.  */\n+\n+static void\n+alpha_pad_noreturn (void)\n+{\n+  rtx insn, next;\n+\n+  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n+    {\n+      if (!CALL_P (insn)\n+\t  || !find_reg_note (insn, REG_NORETURN, NULL_RTX))\n+        continue;\n+\n+      next = next_active_insn (insn);\n+\n+      if (next)\n+\t{\n+\t  rtx pat = PATTERN (next);\n+\n+\t  if (GET_CODE (pat) == SET\n+\t      && GET_CODE (SET_SRC (pat)) == UNSPEC_VOLATILE\n+\t      && XINT (SET_SRC (pat), 1) == UNSPECV_LDGP1)\n+\t    emit_insn_after (gen_unop (), insn);\n+\t}\n+    }\n+}\n \f\n /* Machine dependent reorg pass.  */\n \n static void\n alpha_reorg (void)\n {\n+  /* Workaround for a linker error that triggers when an\n+     exception handler immediatelly follows a noreturn function.\n+\n+     The instruction stream from an object file:\n+\n+  54:   00 40 5b 6b     jsr     ra,(t12),58 <__func+0x58>\n+  58:   00 00 ba 27     ldah    gp,0(ra)\n+  5c:   00 00 bd 23     lda     gp,0(gp)\n+  60:   00 00 7d a7     ldq     t12,0(gp)\n+  64:   00 40 5b 6b     jsr     ra,(t12),68 <__func+0x68>\n+\n+     was converted in the final link pass to:\n+\n+   fdb24:       a0 03 40 d3     bsr     ra,fe9a8 <_called_func+0x8>\n+   fdb28:       00 00 fe 2f     unop\n+   fdb2c:       00 00 fe 2f     unop\n+   fdb30:       30 82 7d a7     ldq     t12,-32208(gp)\n+   fdb34:       00 40 5b 6b     jsr     ra,(t12),fdb38 <__func+0x68>\n+\n+     GP load instructions were wrongly cleared by the linker relaxation\n+     pass.  This workaround prevents removal of GP loads by inserting\n+     an unop instruction between a noreturn function call and\n+     exception handler prologue.  */\n+\n+  if (current_function_has_exception_handlers ())\n+    alpha_pad_noreturn ();\n+\n   if (alpha_tp != ALPHA_TP_PROG || flag_exceptions)\n     alpha_handle_trap_shadows ();\n "}]}