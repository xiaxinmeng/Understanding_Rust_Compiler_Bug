{"sha": "651ff4152e25e6aecbfa7fbcf2b920df15cb0f41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUxZmY0MTUyZTI1ZTZhZWNiZmE3ZmJjZjJiOTIwZGYxNWNiMGY0MQ==", "commit": {"author": {"name": "Torvald Riegel", "email": "triegel@redhat.com", "date": "2012-02-20T20:57:09Z"}, "committer": {"name": "Torvald Riegel", "email": "torvald@gcc.gnu.org", "date": "2012-02-20T20:57:09Z"}, "message": "libitm: Remove obsolete handling of prior serial lock corner cases in gl_wt.\n\n\tlibitm/\n\t* method-gl.cc (gl_wt_dispatch::trycommit): Remove handling of\n\tserial mode corner cases made obsolete by prior gtm_rwlock changes.\n\t(gl_wt_dispatch.rollback): Same.\n\nFrom-SVN: r184401", "tree": {"sha": "f1c00be0fffee441e9aee38df402baa6695ec680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1c00be0fffee441e9aee38df402baa6695ec680"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/651ff4152e25e6aecbfa7fbcf2b920df15cb0f41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/651ff4152e25e6aecbfa7fbcf2b920df15cb0f41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/651ff4152e25e6aecbfa7fbcf2b920df15cb0f41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/651ff4152e25e6aecbfa7fbcf2b920df15cb0f41/comments", "author": {"login": "triegelrh", "id": 62400967, "node_id": "MDQ6VXNlcjYyNDAwOTY3", "avatar_url": "https://avatars.githubusercontent.com/u/62400967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/triegelrh", "html_url": "https://github.com/triegelrh", "followers_url": "https://api.github.com/users/triegelrh/followers", "following_url": "https://api.github.com/users/triegelrh/following{/other_user}", "gists_url": "https://api.github.com/users/triegelrh/gists{/gist_id}", "starred_url": "https://api.github.com/users/triegelrh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/triegelrh/subscriptions", "organizations_url": "https://api.github.com/users/triegelrh/orgs", "repos_url": "https://api.github.com/users/triegelrh/repos", "events_url": "https://api.github.com/users/triegelrh/events{/privacy}", "received_events_url": "https://api.github.com/users/triegelrh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "efee0113e8539a1f2bbdf149534c2ac0db105a64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efee0113e8539a1f2bbdf149534c2ac0db105a64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efee0113e8539a1f2bbdf149534c2ac0db105a64"}], "stats": {"total": 39, "additions": 11, "deletions": 28}, "files": [{"sha": "977613d05beaaf23d3c38bf653efb9499bf6af97", "filename": "libitm/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651ff4152e25e6aecbfa7fbcf2b920df15cb0f41/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651ff4152e25e6aecbfa7fbcf2b920df15cb0f41/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=651ff4152e25e6aecbfa7fbcf2b920df15cb0f41", "patch": "@@ -1,3 +1,9 @@\n+2012-02-20  Torvald Riegel  <triegel@redhat.com>\n+\n+\t* method-gl.cc (gl_wt_dispatch::trycommit): Remove handling of\n+\tserial mode corner cases made obsolete by prior gtm_rwlock changes.\n+\t(gl_wt_dispatch.rollback): Same.\n+\n 2012-02-20  Torvald Riegel  <triegel@redhat.com>\n \n \t* method-gl.cc (gl_wt_dispatch::pre_write): Optimize memory orders."}, {"sha": "5bae22b90c161adcec077efa7c2ecf3c4e95f1e2", "filename": "libitm/method-gl.cc", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651ff4152e25e6aecbfa7fbcf2b920df15cb0f41/libitm%2Fmethod-gl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651ff4152e25e6aecbfa7fbcf2b920df15cb0f41/libitm%2Fmethod-gl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fmethod-gl.cc?ref=651ff4152e25e6aecbfa7fbcf2b920df15cb0f41", "patch": "@@ -76,12 +76,10 @@ static gl_mg o_gl_mg;\n // validate that no other update transaction comitted before we acquired the\n // orec, so we have the most recent timestamp and no other transaction can\n // commit until we have committed).\n-// However, we therefore cannot use this method for a serial transaction\n-// (because shared_state needs to remain at ~0) and we have to be careful\n-// when switching to serial mode (see the special handling in trycommit() and\n-// rollback()).\n-// ??? This sharing adds some complexity wrt. serial mode. Just use a separate\n-// state variable?\n+// However, we therefore depend on shared_state not being modified by the\n+// serial lock during upgrades to serial mode, which is ensured by\n+// gtm_thread::serialirr_mode by not calling gtm_rwlock::write_upgrade_finish\n+// before we have committed or rolled back.\n class gl_wt_dispatch : public abi_dispatch\n {\n protected:\n@@ -283,15 +281,6 @@ class gl_wt_dispatch : public abi_dispatch\n     gtm_thread* tx = gtm_thr();\n     gtm_word v = tx->shared_state.load(memory_order_relaxed);\n \n-    // Special case: If shared_state is ~0, then we have acquired the\n-    // serial lock (tx->state is not updated yet). In this case, the previous\n-    // value isn't available anymore, so grab it from the global lock, which\n-    // must have a meaningful value because no other transactions are active\n-    // anymore. In particular, if it is locked, then we are an update\n-    // transaction, which is all we care about for commit.\n-    if (v == ~(typeof v)0)\n-      v = o_gl_mg.orec.load(memory_order_relaxed);\n-\n     // Release the orec but do not reset shared_state, which will be modified\n     // by the serial lock right after our commit anyway. Also, resetting\n     // shared state here would interfere with the serial lock's use of this\n@@ -319,15 +308,6 @@ class gl_wt_dispatch : public abi_dispatch\n \n     gtm_thread *tx = gtm_thr();\n     gtm_word v = tx->shared_state.load(memory_order_relaxed);\n-    // Special case: If shared_state is ~0, then we have acquired the\n-    // serial lock (tx->state is not updated yet). In this case, the previous\n-    // value isn't available anymore, so grab it from the global lock, which\n-    // must have a meaningful value because no other transactions are active\n-    // anymore. In particular, if it is locked, then we are an update\n-    // transaction, which is all we care about for rollback.\n-    bool is_serial = v == ~(typeof v)0;\n-    if (is_serial)\n-      v = o_gl_mg.orec.load(memory_order_relaxed);\n \n     // Release lock and increment version number to prevent dirty reads.\n     // Also reset shared state here, so that begin_or_restart() can expect a\n@@ -340,10 +320,7 @@ class gl_wt_dispatch : public abi_dispatch\n \to_gl_mg.orec.store(v, memory_order_release);\n \n \t// Also reset the timestamp published via shared_state.\n-\t// Special case: Only do this if we are not a serial transaction\n-\t// because otherwise, we would interfere with the serial lock.\n-\tif (!is_serial)\n-\t  tx->shared_state.store(v, memory_order_release);\n+\ttx->shared_state.store(v, memory_order_release);\n \n \t// We need a store-load barrier after this store to prevent it\n \t// from becoming visible after later data loads because the"}]}