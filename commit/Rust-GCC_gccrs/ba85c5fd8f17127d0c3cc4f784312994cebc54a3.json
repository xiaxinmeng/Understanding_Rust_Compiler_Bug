{"sha": "ba85c5fd8f17127d0c3cc4f784312994cebc54a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE4NWM1ZmQ4ZjE3MTI3ZDBjM2NjNGY3ODQzMTI5OTRjZWJjNTRhMw==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2016-01-12T17:53:14Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2016-01-12T17:53:14Z"}, "message": "Prevent \"undef var\" errors on gcc --help or --version with self-specs\n\n        * gcc.c (spec_undefvar_allowed): New global.\n        (process_command): Set to true when running for --version or --help,\n        alone or together.\n        (getenv_spec_function): When the variable is not defined, use the\n        variable name as the variable value if we're allowed not to issue\n        a fatal error.\n\nFrom-SVN: r232287", "tree": {"sha": "6918ce3872809d14493260237973c7c890a1a98d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6918ce3872809d14493260237973c7c890a1a98d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba85c5fd8f17127d0c3cc4f784312994cebc54a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba85c5fd8f17127d0c3cc4f784312994cebc54a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba85c5fd8f17127d0c3cc4f784312994cebc54a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba85c5fd8f17127d0c3cc4f784312994cebc54a3/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c446cf07e903f12bd0926078b5afd3d9183b744d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c446cf07e903f12bd0926078b5afd3d9183b744d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c446cf07e903f12bd0926078b5afd3d9183b744d"}], "stats": {"total": 52, "additions": 47, "deletions": 5}, "files": [{"sha": "8df676c7d676840a7bdf74201ff751aaa3425856", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba85c5fd8f17127d0c3cc4f784312994cebc54a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba85c5fd8f17127d0c3cc4f784312994cebc54a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba85c5fd8f17127d0c3cc4f784312994cebc54a3", "patch": "@@ -1,3 +1,12 @@\n+2016-01-12  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gcc.c (spec_undefvar_allowed): New global.\n+\t(process_command): Set to true when running for --version or --help,\n+\talone or together.\n+\t(getenv_spec_function): When the variable is not defined, use the\n+\tvariable name as the variable value if we're allowed not to issue\n+\ta fatal error.\n+\n 2016-01-12  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/68911"}, {"sha": "f04fdc440d2a79f3415a145bb14b3a1439c44dab", "filename": "gcc/gcc.c", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba85c5fd8f17127d0c3cc4f784312994cebc54a3/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba85c5fd8f17127d0c3cc4f784312994cebc54a3/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=ba85c5fd8f17127d0c3cc4f784312994cebc54a3", "patch": "@@ -3299,6 +3299,11 @@ int n_infiles;\n \n static int n_infiles_alloc;\n \n+/* True if undefined environment variables encountered during spec processing\n+   are ok to ignore, typically when we're running for --help or --version.  */\n+\n+static bool spec_undefvar_allowed;\n+\n /* True if multiple input files are being compiled to a single\n    assembly file.  */\n \n@@ -4542,6 +4547,26 @@ process_command (unsigned int decoded_options_count,\n       add_infile (\"help-dummy\", \"c\");\n     }\n \n+  /* Decide if undefined variable references are allowed in specs.  */\n+\n+  /* --version and --help alone or together are safe.  Note that -v would\n+     make them unsafe, as they'd then be run for subprocesses as well, the\n+     location of which might depend on variables possibly coming from\n+     self-specs.\n+\n+     Count the number of options we have for which undefined variables\n+     are harmless for sure, and check that nothing else is set.  */\n+\n+  unsigned n_varsafe_options = 0;\n+\n+  if (print_version)\n+    n_varsafe_options++;\n+  \n+  if (print_help_list)\n+    n_varsafe_options++;\n+  \n+  spec_undefvar_allowed = (n_varsafe_options == decoded_options_count - 1);\n+\n   alloc_switch ();\n   switches[n_switches].part1 = 0;\n   alloc_infile ();\n@@ -9085,25 +9110,33 @@ print_multilib_info (void)\n \f\n /* getenv built-in spec function.\n \n-   Returns the value of the environment variable given by its first\n-   argument, concatenated with the second argument.  If the\n-   environment variable is not defined, a fatal error is issued.  */\n+   Returns the value of the environment variable given by its first argument,\n+   concatenated with the second argument.  If the variable is not defined, a\n+   fatal error is issued unless such undefs are internally allowed, in which\n+   case the variable name is used as the variable value.  */\n \n static const char *\n getenv_spec_function (int argc, const char **argv)\n {\n   const char *value;\n+  const char *varname;\n+\n   char *result;\n   char *ptr;\n   size_t len;\n \n   if (argc != 2)\n     return NULL;\n \n-  value = env.get (argv[0]);\n+  varname = argv[0];\n+  value = env.get (varname);\n+\n+  if (!value && spec_undefvar_allowed)\n+    value = varname;\n+\n   if (!value)\n     fatal_error (input_location,\n-\t\t \"environment variable %qs not defined\", argv[0]);\n+\t\t \"environment variable %qs not defined\", varname);\n \n   /* We have to escape every character of the environment variable so\n      they are not interpreted as active spec characters.  A"}]}