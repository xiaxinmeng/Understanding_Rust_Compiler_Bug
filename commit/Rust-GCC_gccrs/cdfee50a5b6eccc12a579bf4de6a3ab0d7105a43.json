{"sha": "cdfee50a5b6eccc12a579bf4de6a3ab0d7105a43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RmZWU1MGE1YjZlY2NjMTJhNTc5YmY0ZGU2YTNhYjBkNzEwNWE0Mw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-25T11:05:38Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-25T11:05:38Z"}, "message": "configure.ac: Add --enable-languages=default to mean default and make --enable-languages=all...\n\n\t* configure.ac: Add --enable-languages=default to mean default and\n\tmake --enable-languages=all mean all supported languages.\n\t* configure: Regenerated.\n\tgcc/\n\t* doc/invoke.texi (--enable-languages): Update documentation.\n\nFrom-SVN: r248454", "tree": {"sha": "57e5becb8e004d4a4c6fd70aae03af5a38bac884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57e5becb8e004d4a4c6fd70aae03af5a38bac884"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdfee50a5b6eccc12a579bf4de6a3ab0d7105a43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdfee50a5b6eccc12a579bf4de6a3ab0d7105a43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdfee50a5b6eccc12a579bf4de6a3ab0d7105a43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdfee50a5b6eccc12a579bf4de6a3ab0d7105a43/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "56af751e21b1397bfc1ba7aba8dfa18aebc4c209", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56af751e21b1397bfc1ba7aba8dfa18aebc4c209", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56af751e21b1397bfc1ba7aba8dfa18aebc4c209"}], "stats": {"total": 283, "additions": 166, "deletions": 117}, "files": [{"sha": "c8393344bbc692ce6dd7159d308c18e669e58b68", "filename": "ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdfee50a5b6eccc12a579bf4de6a3ab0d7105a43/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdfee50a5b6eccc12a579bf4de6a3ab0d7105a43/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=cdfee50a5b6eccc12a579bf4de6a3ab0d7105a43", "patch": "@@ -1,3 +1,9 @@\n+2017-05-25  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* configure.ac: Add --enable-languages=default to mean default and\n+\tmake --enable-languages=all mean all supported languages.\n+\t* configure: Regenerated.\n+\n 2017-05-24  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config.gcc (powerpc*-*-*spe*): New."}, {"sha": "82aa619fad145f8565fed3f01e5cff397ebc8535", "filename": "configure", "status": "modified", "additions": 80, "deletions": 60, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdfee50a5b6eccc12a579bf4de6a3ab0d7105a43/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdfee50a5b6eccc12a579bf4de6a3ab0d7105a43/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=cdfee50a5b6eccc12a579bf4de6a3ab0d7105a43", "patch": "@@ -556,7 +556,6 @@ enable_option_checking=no\n ac_subst_vars='LTLIBOBJS\n LIBOBJS\n compare_exclusions\n-host_shared\n stage2_werror_flag\n stage1_checking\n stage1_cflags\n@@ -645,6 +644,7 @@ get_gcc_base_ver\n extra_host_zlib_configure_flags\n extra_host_libiberty_configure_flags\n stage1_languages\n+host_shared\n extra_linker_plugin_flags\n extra_linker_plugin_configure_flags\n islinc\n@@ -781,6 +781,7 @@ enable_isl_version_check\n enable_lto\n enable_linker_plugin_configure_flags\n enable_linker_plugin_flags\n+enable_host_shared\n enable_stage1_languages\n enable_objc_gc\n with_target_bdw_gc\n@@ -796,7 +797,6 @@ with_build_time_tools\n enable_maintainer_mode\n enable_stage1_checking\n enable_werror\n-enable_host_shared\n '\n       ac_precious_vars='build_alias\n host_alias\n@@ -1498,6 +1498,7 @@ Optional Features:\n   --enable-linker-plugin-flags=FLAGS\n                           additional flags for configuring and building linker\n                           plugins [none]\n+  --enable-host-shared    build host code as shared libraries\n   --enable-stage1-languages[=all]\n                           choose additional languages to build during stage1.\n                           Mostly useful for compiler development\n@@ -1515,7 +1516,6 @@ Optional Features:\n                           choose additional checking for stage1 of the\n                           compiler\n   --enable-werror         enable -Werror in bootstrap stage2 and later\n-  --enable-host-shared    build host code as shared libraries\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -6090,6 +6090,16 @@ fi\n \n \n \n+# Enable --enable-host-shared.\n+# Checked early to determine whether jit is an 'all' language\n+# Check whether --enable-host-shared was given.\n+if test \"${enable_host_shared+set}\" = set; then :\n+  enableval=$enable_host_shared; host_shared=$enableval\n+else\n+  host_shared=no\n+fi\n+\n+\n \n # By default, C and C++ are the only stage 1 languages.\n stage1_languages=,c,\n@@ -6108,7 +6118,7 @@ if test -d ${srcdir}/gcc; then\n       enable_languages=\"${LANGUAGES}\"\n         echo configure.ac: warning: setting LANGUAGES is deprecated, use --enable-languages instead 1>&2\n     else\n-      enable_languages=all\n+      enable_languages=default\n     fi\n   else\n     if test x\"${enable_languages}\" = x ||\n@@ -6160,6 +6170,7 @@ if test -d ${srcdir}/gcc; then\n         for other in ${lang_requires} ${lang_requires_boot_languages}; do\n           case ,${enable_languages}, in\n \t    *,$other,*) ;;\n+\t    *,default,*) ;;\n \t    *,all,*) ;;\n \t    *,$language,*)\n \t      echo \" \\`$other' language required by \\`$language'; enabling\" 1>&2\n@@ -6171,6 +6182,7 @@ if test -d ${srcdir}/gcc; then\n \t  if test \"$other\" != \"c\"; then\n \t    case ,${enable_stage1_languages}, in\n \t      *,$other,*) ;;\n+\t      *,default,*) ;;\n \t      *,all,*) ;;\n \t      *)\n \t\tcase ,${enable_languages}, in\n@@ -6208,7 +6220,7 @@ if test -d ${srcdir}/gcc; then\n     esac\n   fi\n \n-  missing_languages=`echo \",$enable_languages,\" | sed -e s/,all,/,/ -e s/,c,/,/ `\n+  missing_languages=`echo \",$enable_languages,\" | sed -e s/,default,/,/ -e s/,all,/,/ -e s/,c,/,/ `\n   potential_languages=,c,\n \n   enabled_target_libs=\n@@ -6240,30 +6252,37 @@ if test -d ${srcdir}/gcc; then\n \tfi\n \n         add_this_lang=no\n-        case ,${enable_languages}, in\n-          *,${language},*)\n-            # Language was explicitly selected; include it\n-\t    # unless it is C, which is enabled by default.\n-\t    if test \"$language\" != \"c\"; then\n+        # C is always enabled, so no need to add it again\n+        if test \"$language\" != \"c\"; then\n+          case ,${enable_languages}, in\n+            *,${language},*)\n+              # Language was explicitly selected; include it\n \t      add_this_lang=yes\n-\t    fi\n-            ;;\n-          *,all,*)\n-            # 'all' was selected, select it if it is a default language\n-\t    if test \"$language\" != \"c\"; then\n+              ;;\n+\t    *,all,*)\n+\t      # All languages are enabled\n+\t      add_this_lang=all\n+              ;;\n+            *,default,*)\n+              # 'default' was selected, select it if it is a default language\n \t      add_this_lang=${build_by_default}\n-\t    fi\n-            ;;\n-        esac\n+              ;;\n+          esac\n+        fi\n \n         # Disable languages that need other directories if these aren't available.\n \tfor i in $subdir_requires; do\n \t  test -f \"$srcdir/gcc/$i/config-lang.in\" && continue\n-\t  case ,${enable_languages}, in\n-            *,${language},*)\n+\t  case ${add_this_lang} in\n+\t    yes)\n               # Specifically requested language; tell them.\n               as_fn_error \"The gcc/$i directory contains parts of $language but is missing\" \"$LINENO\" 5\n               ;;\n+            all)\n+              { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: The gcc/$i directory contains parts of $language but is missing\" >&5\n+$as_echo \"$as_me: WARNING: The gcc/$i directory contains parts of $language but is missing\" >&2;}\n+              add_this_lang=unsupported\n+              ;;\n             *)\n               # Silently disable.\n               add_this_lang=unsupported\n@@ -6272,20 +6291,55 @@ if test -d ${srcdir}/gcc; then\n \tdone\n \n         # Disable Ada if no preexisting GNAT is available.\n-        case ,${enable_languages},:${language}:${have_gnat} in\n-          *,${language},*:ada:no)\n+        case ${add_this_lang}:${language}:${have_gnat} in\n+          yes:ada:no)\n             # Specifically requested language; tell them.\n             as_fn_error \"GNAT is required to build $language\" \"$LINENO\" 5\n             ;;\n+          all:ada:no)\n+            { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: GNAT is required to build $language\" >&5\n+$as_echo \"$as_me: WARNING: GNAT is required to build $language\" >&2;}\n+            add_this_lang=unsupported\n+            ;;\n           *:ada:no)\n             # Silently disable.\n             add_this_lang=unsupported\n             ;;\n         esac\n \n-\t# Disable a language that is unsupported by the target.\n-\tcase \" $unsupported_languages \" in\n-\t  *\" $language \"*)\n+        # Disable jit if -enable-host-shared not specified\n+        case ${add_this_lang}:${language}:${host_shared} in\n+          yes:jit:no)\n+\t    # PR jit/64780: explicitly specify --enable-host-shared\n+\t    as_fn_error \"\n+Enabling language \\\"jit\\\" requires --enable-host-shared.\n+\n+--enable-host-shared typically slows the rest of the compiler down by\n+a few %, so you must explicitly enable it.\n+\n+If you want to build both the jit and the regular compiler, it is often\n+best to do this via two separate configure/builds, in separate\n+directories, to avoid imposing the performance cost of\n+--enable-host-shared on the regular compiler.\" \"$LINENO\" 5\n+\t    ;;\n+          all:jit:no)\n+\t    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: --enable-host-shared required to build $language\" >&5\n+$as_echo \"$as_me: WARNING: --enable-host-shared required to build $language\" >&2;}\n+            add_this_lang=unsupported\n+            ;;\n+          *:jit:no)\n+            # Silently disable.\n+            add_this_lang=unsupported\n+            ;;\n+\tesac\n+\n+        # Disable a language that is unsupported by the target.\n+\tcase \"${add_this_lang}: $unsupported_languages \" in\n+\t  no:*) ;;\n+\t  unsupported:*) ;;\n+\t  *:*\" $language \"*)\n+\t    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: ${language} not supported for this target\" >&5\n+$as_echo \"$as_me: WARNING: ${language} not supported for this target\" >&2;}\n \t    add_this_lang=unsupported\n \t    ;;\n \tesac\n@@ -6302,7 +6356,7 @@ if test -d ${srcdir}/gcc; then\n \t    noconfigdirs=\"$noconfigdirs $lang_dirs\"\n             potential_languages=\"${potential_languages}${language},\"\n \t    ;;\n-          yes)\n+          all|yes)\n \t    new_enable_languages=\"${new_enable_languages}${language},\"\n             potential_languages=\"${potential_languages}${language},\"\n \t    missing_languages=`echo \"$missing_languages\" | sed \"s/,$language,/,/\"`\n@@ -14605,40 +14659,6 @@ fi\n \n \n \n-# Enable --enable-host-shared.\n-# Check whether --enable-host-shared was given.\n-if test \"${enable_host_shared+set}\" = set; then :\n-  enableval=$enable_host_shared; host_shared=$enableval\n-else\n-  host_shared=no\n-fi\n-\n-\n-\n-# PR jit/64780: Require the user to explicitly specify\n-# --enable-host-shared if the jit is enabled, hinting\n-# that they might want to do a separate configure/build of\n-# the jit, to avoid users from slowing down the rest of the\n-# compiler by enabling the jit.\n-if test ${host_shared} = \"no\" ; then\n-  case \"${enable_languages}\" in\n-    *jit*)\n-      as_fn_error \"\n-Enabling language \\\"jit\\\" requires --enable-host-shared.\n-\n---enable-host-shared typically slows the rest of the compiler down by\n-a few %, so you must explicitly enable it.\n-\n-If you want to build both the jit and the regular compiler, it is often\n-best to do this via two separate configure/builds, in separate\n-directories, to avoid imposing the performance cost of\n---enable-host-shared on the regular compiler.\" \"$LINENO\" 5\n-      ;;\n-    *)\n-      ;;\n-  esac\n-fi\n-\n # Specify what files to not compare during bootstrap.\n \n compare_exclusions=\"gcc/cc*-checksum\\$(objext) | gcc/ada/*tools/*\""}, {"sha": "78d2d5931067b1f0b429e5bdbe3af8d513c97e57", "filename": "configure.ac", "status": "modified", "additions": 70, "deletions": 54, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdfee50a5b6eccc12a579bf4de6a3ab0d7105a43/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdfee50a5b6eccc12a579bf4de6a3ab0d7105a43/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=cdfee50a5b6eccc12a579bf4de6a3ab0d7105a43", "patch": "@@ -1766,6 +1766,13 @@ AC_ARG_ENABLE(linker-plugin-flags,\n   extra_linker_plugin_flags=)\n AC_SUBST(extra_linker_plugin_flags)\n \n+# Enable --enable-host-shared.\n+# Checked early to determine whether jit is an 'all' language\n+AC_ARG_ENABLE(host-shared,\n+[AS_HELP_STRING([--enable-host-shared],\n+\t\t[build host code as shared libraries])],\n+[host_shared=$enableval], [host_shared=no])\n+AC_SUBST(host_shared)\n \n # By default, C and C++ are the only stage 1 languages.\n stage1_languages=,c,\n@@ -1784,7 +1791,7 @@ if test -d ${srcdir}/gcc; then\n       enable_languages=\"${LANGUAGES}\"\n         echo configure.ac: warning: setting LANGUAGES is deprecated, use --enable-languages instead 1>&2\n     else\n-      enable_languages=all\n+      enable_languages=default\n     fi\n   else\n     if test x\"${enable_languages}\" = x ||\n@@ -1836,6 +1843,7 @@ if test -d ${srcdir}/gcc; then\n         for other in ${lang_requires} ${lang_requires_boot_languages}; do\n           case ,${enable_languages}, in\n \t    *,$other,*) ;;\n+\t    *,default,*) ;;\n \t    *,all,*) ;;\n \t    *,$language,*)\n \t      echo \" \\`$other' language required by \\`$language'; enabling\" 1>&2\n@@ -1847,6 +1855,7 @@ if test -d ${srcdir}/gcc; then\n \t  if test \"$other\" != \"c\"; then\n \t    case ,${enable_stage1_languages}, in\n \t      *,$other,*) ;;\n+\t      *,default,*) ;;\n \t      *,all,*) ;;\n \t      *)\n \t\tcase ,${enable_languages}, in\n@@ -1884,7 +1893,7 @@ if test -d ${srcdir}/gcc; then\n     esac\n   fi\n \n-  missing_languages=`echo \",$enable_languages,\" | sed -e s/,all,/,/ -e s/,c,/,/ `\n+  missing_languages=`echo \",$enable_languages,\" | sed -e s/,default,/,/ -e s/,all,/,/ -e s/,c,/,/ `\n   potential_languages=,c,\n \n   enabled_target_libs=\n@@ -1916,30 +1925,36 @@ if test -d ${srcdir}/gcc; then\n \tfi\n \n         add_this_lang=no\n-        case ,${enable_languages}, in\n-          *,${language},*)\n-            # Language was explicitly selected; include it\n-\t    # unless it is C, which is enabled by default.\n-\t    if test \"$language\" != \"c\"; then\n+        # C is always enabled, so no need to add it again\n+        if test \"$language\" != \"c\"; then\n+          case ,${enable_languages}, in\n+            *,${language},*)\n+              # Language was explicitly selected; include it\n \t      add_this_lang=yes\n-\t    fi\n-            ;;\n-          *,all,*)\n-            # 'all' was selected, select it if it is a default language\n-\t    if test \"$language\" != \"c\"; then\n+              ;;\n+\t    *,all,*)\n+\t      # All languages are enabled\n+\t      add_this_lang=all\n+              ;;\n+            *,default,*)\n+              # 'default' was selected, select it if it is a default language\n \t      add_this_lang=${build_by_default}\n-\t    fi\n-            ;;\n-        esac\n+              ;;\n+          esac\n+        fi\n \n         # Disable languages that need other directories if these aren't available.\n \tfor i in $subdir_requires; do\n \t  test -f \"$srcdir/gcc/$i/config-lang.in\" && continue\n-\t  case ,${enable_languages}, in\n-            *,${language},*)\n+\t  case ${add_this_lang} in\n+\t    yes)\n               # Specifically requested language; tell them.\n               AC_MSG_ERROR([The gcc/$i directory contains parts of $language but is missing])\n               ;;\n+            all)\n+              AC_MSG_WARN([The gcc/$i directory contains parts of $language but is missing])\n+              add_this_lang=unsupported\n+              ;;\n             *)\n               # Silently disable.\n               add_this_lang=unsupported\n@@ -1948,20 +1963,52 @@ if test -d ${srcdir}/gcc; then\n \tdone\n \n         # Disable Ada if no preexisting GNAT is available.\n-        case ,${enable_languages},:${language}:${have_gnat} in\n-          *,${language},*:ada:no)\n+        case ${add_this_lang}:${language}:${have_gnat} in\n+          yes:ada:no)\n             # Specifically requested language; tell them.\n             AC_MSG_ERROR([GNAT is required to build $language])\n             ;;\n+          all:ada:no)\n+            AC_MSG_WARN([GNAT is required to build $language])\n+            add_this_lang=unsupported\n+            ;;\n           *:ada:no)\n             # Silently disable.\n             add_this_lang=unsupported\n             ;;\n         esac\n \n-\t# Disable a language that is unsupported by the target.\n-\tcase \" $unsupported_languages \" in\n-\t  *\" $language \"*)\n+        # Disable jit if -enable-host-shared not specified\n+        case ${add_this_lang}:${language}:${host_shared} in\n+          yes:jit:no)\n+\t    # PR jit/64780: explicitly specify --enable-host-shared\n+\t    AC_MSG_ERROR([\n+Enabling language \"jit\" requires --enable-host-shared.\n+\n+--enable-host-shared typically slows the rest of the compiler down by\n+a few %, so you must explicitly enable it.\n+\n+If you want to build both the jit and the regular compiler, it is often\n+best to do this via two separate configure/builds, in separate\n+directories, to avoid imposing the performance cost of\n+--enable-host-shared on the regular compiler.])\n+\t    ;;\n+          all:jit:no)\n+\t    AC_MSG_WARN([--enable-host-shared required to build $language])\n+            add_this_lang=unsupported\n+            ;;\n+          *:jit:no)\n+            # Silently disable.\n+            add_this_lang=unsupported\n+            ;;\n+\tesac\n+\n+        # Disable a language that is unsupported by the target.\n+\tcase \"${add_this_lang}: $unsupported_languages \" in\n+\t  no:*) ;;\n+\t  unsupported:*) ;;\n+\t  *:*\" $language \"*)\n+\t    AC_MSG_WARN([${language} not supported for this target])\n \t    add_this_lang=unsupported\n \t    ;;\n \tesac\n@@ -1978,7 +2025,7 @@ if test -d ${srcdir}/gcc; then\n \t    noconfigdirs=\"$noconfigdirs $lang_dirs\"\n             potential_languages=\"${potential_languages}${language},\"\n \t    ;;\n-          yes)\n+          all|yes)\n \t    new_enable_languages=\"${new_enable_languages}${language},\"\n             potential_languages=\"${potential_languages}${language},\"\n \t    missing_languages=`echo \"$missing_languages\" | sed \"s/,$language,/,/\"`\n@@ -3478,37 +3525,6 @@ fi\n \n AC_SUBST(stage2_werror_flag)\n \n-# Enable --enable-host-shared.\n-AC_ARG_ENABLE(host-shared,\n-[AS_HELP_STRING([--enable-host-shared],\n-\t\t[build host code as shared libraries])],\n-[host_shared=$enableval], [host_shared=no])\n-AC_SUBST(host_shared)\n-\n-# PR jit/64780: Require the user to explicitly specify\n-# --enable-host-shared if the jit is enabled, hinting\n-# that they might want to do a separate configure/build of\n-# the jit, to avoid users from slowing down the rest of the\n-# compiler by enabling the jit.\n-if test ${host_shared} = \"no\" ; then\n-  case \"${enable_languages}\" in\n-    *jit*)\n-      AC_MSG_ERROR([\n-Enabling language \"jit\" requires --enable-host-shared.\n-\n---enable-host-shared typically slows the rest of the compiler down by\n-a few %, so you must explicitly enable it.\n-\n-If you want to build both the jit and the regular compiler, it is often\n-best to do this via two separate configure/builds, in separate\n-directories, to avoid imposing the performance cost of\n---enable-host-shared on the regular compiler.])\n-      ;;\n-    *)\n-      ;;\n-  esac\n-fi\n-\n # Specify what files to not compare during bootstrap.\n \n compare_exclusions=\"gcc/cc*-checksum\\$(objext) | gcc/ada/*tools/*\""}, {"sha": "59292354056be87b1da52997d7feae9c37ae5bfe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdfee50a5b6eccc12a579bf4de6a3ab0d7105a43/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdfee50a5b6eccc12a579bf4de6a3ab0d7105a43/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cdfee50a5b6eccc12a579bf4de6a3ab0d7105a43", "patch": "@@ -1,3 +1,7 @@\n+2017-05-25  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* doc/invoke.texi (--enable-languages): Update documentation.\n+\n 2017-05-25  Martin Liska  <mliska@suse.cz>\n \n \t* dumpfile.c: Add TDF_FOLDING."}, {"sha": "36424d15a407a70bf955ab182b0796c6dd7436ba", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdfee50a5b6eccc12a579bf4de6a3ab0d7105a43/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdfee50a5b6eccc12a579bf4de6a3ab0d7105a43/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=cdfee50a5b6eccc12a579bf4de6a3ab0d7105a43", "patch": "@@ -1621,14 +1621,17 @@ their runtime libraries should be built.  For a list of valid values for\n grep ^language= */config-lang.in\n @end smallexample\n Currently, you can use any of the following:\n-@code{all}, @code{ada}, @code{c}, @code{c++}, @code{fortran},\n+@code{all}, @code{default}, @code{ada}, @code{c}, @code{c++}, @code{fortran},\n @code{go}, @code{jit}, @code{lto}, @code{objc}, @code{obj-c++}.\n Building the Ada compiler has special requirements, see below.\n-If you do not pass this flag, or specify the option @code{all}, then all\n+If you do not pass this flag, or specify the option @code{default}, then the\n default languages available in the @file{gcc} sub-tree will be configured.\n Ada, Go, Jit, and Objective-C++ are not default languages.  LTO is not a\n default language, but is built by default because @option{--enable-lto} is\n-enabled by default.  The other languages are default languages.\n+enabled by default.  The other languages are default languages.  If\n+@code{all} is specified, then all available languages are built.  An\n+exception is @code{jit} language, which requires\n+@option{--enable-host-shared} to be included with @code{all}.\n \n @item --enable-stage1-languages=@var{lang1},@var{lang2},@dots{}\n Specify that a particular subset of compilers and their runtime"}]}