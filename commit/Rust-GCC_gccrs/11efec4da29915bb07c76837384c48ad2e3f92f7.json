{"sha": "11efec4da29915bb07c76837384c48ad2e3f92f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFlZmVjNGRhMjk5MTViYjA3Yzc2ODM3Mzg0YzQ4YWQyZTNmOTJmNw==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2007-06-06T10:14:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:14:25Z"}, "message": "g-expect-vms.adb:\n\n2007-04-20  Bob Duff  <duff@adacore.com>\n\n\t* g-expect-vms.adb: \n\t(Send_Signal, Close): Raise Invalid_Process if the process id is invalid.\n\t* g-expect.ads, g-expect.adb (Send): Avoid useless copy of the string.\n\t(Send_Signal, Close): Raise Invalid_Process if the process id is\n\tinvalid.\n\t(Pattern_Matcher_Access): Is now a general access type to be able to\n\tuse aliased string.\n\nFrom-SVN: r125361", "tree": {"sha": "f3be7ba4a1adc235e5c2e9db34a66941375fad70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3be7ba4a1adc235e5c2e9db34a66941375fad70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11efec4da29915bb07c76837384c48ad2e3f92f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11efec4da29915bb07c76837384c48ad2e3f92f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11efec4da29915bb07c76837384c48ad2e3f92f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11efec4da29915bb07c76837384c48ad2e3f92f7/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "30681738f9948fa5a6f9c4c1b597bcf91ecdecce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30681738f9948fa5a6f9c4c1b597bcf91ecdecce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30681738f9948fa5a6f9c4c1b597bcf91ecdecce"}], "stats": {"total": 164, "additions": 98, "deletions": 66}, "files": [{"sha": "c4c4419b16172fae67407a2a0673a231874bb654", "filename": "gcc/ada/g-expect-vms.adb", "status": "modified", "additions": 37, "deletions": 18, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11efec4da29915bb07c76837384c48ad2e3f92f7/gcc%2Fada%2Fg-expect-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11efec4da29915bb07c76837384c48ad2e3f92f7/gcc%2Fada%2Fg-expect-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-expect-vms.adb?ref=11efec4da29915bb07c76837384c48ad2e3f92f7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2006, AdaCore                     --\n+--                     Copyright (C) 2002-2007, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,14 +33,14 @@\n \n --  This is the VMS version\n \n-with System;        use System;\n-with Ada.Calendar;  use Ada.Calendar;\n+with System;       use System;\n+with Ada.Calendar; use Ada.Calendar;\n \n with GNAT.IO;\n-with GNAT.OS_Lib;   use GNAT.OS_Lib;\n-with GNAT.Regpat;   use GNAT.Regpat;\n+with GNAT.OS_Lib;  use GNAT.OS_Lib;\n+with GNAT.Regpat;  use GNAT.Regpat;\n \n-with Unchecked_Deallocation;\n+with Ada.Unchecked_Deallocation;\n \n package body GNAT.Expect is\n \n@@ -72,7 +72,7 @@ package body GNAT.Expect is\n    --  Reinitialize the internal buffer.\n    --  The buffer is deleted up to the end of the last match.\n \n-   procedure Free is new Unchecked_Deallocation\n+   procedure Free is new Ada.Unchecked_Deallocation\n      (Pattern_Matcher, Pattern_Matcher_Access);\n \n    procedure Call_Filters\n@@ -218,12 +218,21 @@ package body GNAT.Expect is\n       Close (Descriptor.Output_Fd);\n \n       --  ??? Should have timeouts for different signals\n-      Kill (Descriptor.Pid, 9);\n+\n+      if Descriptor.Pid > 0 then  --  see comment in Send_Signal\n+         Kill (Descriptor.Pid, Sig_Num => 9);\n+      end if;\n \n       GNAT.OS_Lib.Free (Descriptor.Buffer);\n       Descriptor.Buffer_Size := 0;\n \n-      Status := Waitpid (Descriptor.Pid);\n+      --  Check process id (see comment in Send_Signal)\n+\n+      if Descriptor.Pid > 0 then\n+         Status := Waitpid (Descriptor.Pid);\n+      else\n+         raise Invalid_Process;\n+      end if;\n    end Close;\n \n    procedure Close (Descriptor : in out Process_Descriptor) is\n@@ -327,7 +336,8 @@ package body GNAT.Expect is\n             return;\n          end if;\n \n-         --  Calculate the timeout for the next turn.\n+         --  Calculate the timeout for the next turn\n+\n          --  Note that Timeout is, from the caller's perspective, the maximum\n          --  time until a match, not the maximum time until some output is\n          --  read, and thus cannot be reused as is for Expect_Internal.\n@@ -758,7 +768,6 @@ package body GNAT.Expect is\n                end if;\n          end case;\n       end loop;\n-\n    end Flush;\n \n    ------------------------\n@@ -894,7 +903,6 @@ package body GNAT.Expect is\n \n    procedure Interrupt (Descriptor : in out Process_Descriptor) is\n       SIGINT : constant := 2;\n-\n    begin\n       Send_Signal (Descriptor, SIGINT);\n    end Interrupt;\n@@ -1030,9 +1038,10 @@ package body GNAT.Expect is\n \n       Call_Filters (Descriptor, Full_Str (Full_Str'First .. Last), Input);\n \n-      Discard := Write (Descriptor.Input_Fd,\n-                        Full_Str'Address,\n-                        Last - Full_Str'First + 1);\n+      Discard :=\n+        Write (Descriptor.Input_Fd,\n+               Full_Str'Address,\n+               Last - Full_Str'First + 1);\n       --  Shouldn't we at least have a pragma Assert on the result ???\n    end Send;\n \n@@ -1045,8 +1054,19 @@ package body GNAT.Expect is\n       Signal     : Integer)\n    is\n    begin\n-      Kill (Descriptor.Pid, Signal);\n-      --  ??? Need to check process status here\n+      --  A nonpositive process id passed to kill has special meanings. For\n+      --  example, -1 means kill all processes in sight, including self, in\n+      --  POSIX and Windows (and something slightly different in Linux). See\n+      --  man pages for details. In any case, we don't want to do that. Note\n+      --  that Descriptor.Pid will be -1 if the process was not successfully\n+      --  started; we don't want to kill ourself in that case.\n+\n+      if Descriptor.Pid > 0 then\n+         Kill (Descriptor.Pid, Signal);\n+         --  ??? Need to check process status here\n+      else\n+         raise Invalid_Process;\n+      end if;\n    end Send_Signal;\n \n    ---------------------------------\n@@ -1163,7 +1183,6 @@ package body GNAT.Expect is\n    is\n       pragma Warnings (Off, Descriptor);\n       pragma Warnings (Off, User_Data);\n-\n    begin\n       GNAT.IO.Put (Str);\n    end Trace_Filter;"}, {"sha": "fb9d296e513d8fc2163f97dfbdad7f54229fe759", "filename": "gcc/ada/g-expect.adb", "status": "modified", "additions": 49, "deletions": 34, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11efec4da29915bb07c76837384c48ad2e3f92f7/gcc%2Fada%2Fg-expect.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11efec4da29915bb07c76837384c48ad2e3f92f7/gcc%2Fada%2Fg-expect.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-expect.adb?ref=11efec4da29915bb07c76837384c48ad2e3f92f7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2000-2006, AdaCore                     --\n+--                     Copyright (C) 2000-2007, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,7 +38,7 @@ with GNAT.IO;\n with GNAT.OS_Lib;  use GNAT.OS_Lib;\n with GNAT.Regpat;  use GNAT.Regpat;\n \n-with Unchecked_Deallocation;\n+with Ada.Unchecked_Deallocation;\n \n package body GNAT.Expect is\n \n@@ -66,10 +66,10 @@ package body GNAT.Expect is\n    --  Reinitialize the internal buffer.\n    --  The buffer is deleted up to the end of the last match.\n \n-   procedure Free is new Unchecked_Deallocation\n+   procedure Free is new Ada.Unchecked_Deallocation\n      (Pattern_Matcher, Pattern_Matcher_Access);\n \n-   procedure Free is new Unchecked_Deallocation\n+   procedure Free is new Ada.Unchecked_Deallocation\n      (Filter_List_Elem, Filter_List);\n \n    procedure Call_Filters\n@@ -100,8 +100,7 @@ package body GNAT.Expect is\n      (Fds     : System.Address;\n       Num_Fds : Integer;\n       Timeout : Integer;\n-      Is_Set  : System.Address)\n-      return    Integer;\n+      Is_Set  : System.Address) return Integer;\n    pragma Import (C, Poll, \"__gnat_expect_poll\");\n    --  Check whether there is any data waiting on the file descriptor\n    --  Out_fd, and wait if there is none, at most Timeout milliseconds\n@@ -128,8 +127,7 @@ package body GNAT.Expect is\n    ---------\n \n    function \"+\"\n-     (P    : GNAT.Regpat.Pattern_Matcher)\n-      return Pattern_Matcher_Access\n+     (P : GNAT.Regpat.Pattern_Matcher) return Pattern_Matcher_Access\n    is\n    begin\n       return new GNAT.Regpat.Pattern_Matcher'(P);\n@@ -222,7 +220,9 @@ package body GNAT.Expect is\n \n       --  ??? Should have timeouts for different signals\n \n-      Kill (Descriptor.Pid, 9, 0);\n+      if Descriptor.Pid > 0 then  --  see comment in Send_Signal\n+         Kill (Descriptor.Pid, Sig_Num => 9, Close => 0);\n+      end if;\n \n       GNAT.OS_Lib.Free (Descriptor.Buffer);\n       Descriptor.Buffer_Size := 0;\n@@ -236,7 +236,14 @@ package body GNAT.Expect is\n       end loop;\n \n       Descriptor.Filters := null;\n-      Status := Waitpid (Descriptor.Pid);\n+\n+      --  Check process id (see comment in Send_Signal)\n+\n+      if Descriptor.Pid > 0 then\n+         Status := Waitpid (Descriptor.Pid);\n+      else\n+         raise Invalid_Process;\n+      end if;\n    end Close;\n \n    procedure Close (Descriptor : in out Process_Descriptor) is\n@@ -863,7 +870,8 @@ package body GNAT.Expect is\n    ------------------\n \n    function Get_Error_Fd\n-     (Descriptor : Process_Descriptor) return GNAT.OS_Lib.File_Descriptor is\n+     (Descriptor : Process_Descriptor) return GNAT.OS_Lib.File_Descriptor\n+   is\n    begin\n       return Descriptor.Error_Fd;\n    end Get_Error_Fd;\n@@ -873,7 +881,8 @@ package body GNAT.Expect is\n    ------------------\n \n    function Get_Input_Fd\n-     (Descriptor : Process_Descriptor) return GNAT.OS_Lib.File_Descriptor is\n+     (Descriptor : Process_Descriptor) return GNAT.OS_Lib.File_Descriptor\n+   is\n    begin\n       return Descriptor.Input_Fd;\n    end Get_Input_Fd;\n@@ -883,7 +892,8 @@ package body GNAT.Expect is\n    -------------------\n \n    function Get_Output_Fd\n-     (Descriptor : Process_Descriptor) return GNAT.OS_Lib.File_Descriptor is\n+     (Descriptor : Process_Descriptor) return GNAT.OS_Lib.File_Descriptor\n+   is\n    begin\n       return Descriptor.Output_Fd;\n    end Get_Output_Fd;\n@@ -893,7 +903,8 @@ package body GNAT.Expect is\n    -------------\n \n    function Get_Pid\n-     (Descriptor : Process_Descriptor) return Process_Id is\n+     (Descriptor : Process_Descriptor) return Process_Id\n+   is\n    begin\n       return Descriptor.Pid;\n    end Get_Pid;\n@@ -904,7 +915,6 @@ package body GNAT.Expect is\n \n    procedure Interrupt (Descriptor : in out Process_Descriptor) is\n       SIGINT : constant := 2;\n-\n    begin\n       Send_Signal (Descriptor, SIGINT);\n    end Interrupt;\n@@ -1106,8 +1116,7 @@ package body GNAT.Expect is\n       Add_LF       : Boolean := True;\n       Empty_Buffer : Boolean := False)\n    is\n-      Full_Str    : constant String := Str & ASCII.LF;\n-      Last        : Natural;\n+      Line_Feed   : aliased constant String := (1 .. 1 => ASCII.LF);\n       Result      : Expect_Match;\n       Descriptors : Array_Of_Pd := (1 => Descriptor'Unrestricted_Access);\n \n@@ -1119,27 +1128,24 @@ package body GNAT.Expect is\n \n          --  Force a read on the process if there is anything waiting\n \n-         Expect_Internal (Descriptors, Result,\n-                          Timeout => 0, Full_Buffer => False);\n+         Expect_Internal\n+           (Descriptors, Result, Timeout => 0, Full_Buffer => False);\n          Descriptor.Last_Match_End := Descriptor.Buffer_Index;\n \n          --  Empty the buffer\n \n          Reinitialize_Buffer (Descriptor);\n       end if;\n \n+      Call_Filters (Descriptor, Str, Input);\n+      Discard :=\n+        Write (Descriptor.Input_Fd, Str'Address, Str'Last - Str'First + 1);\n+\n       if Add_LF then\n-         Last := Full_Str'Last;\n-      else\n-         Last := Full_Str'Last - 1;\n+         Call_Filters (Descriptor, Line_Feed, Input);\n+         Discard :=\n+           Write (Descriptor.Input_Fd, Line_Feed'Address, 1);\n       end if;\n-\n-      Call_Filters (Descriptor, Full_Str (Full_Str'First .. Last), Input);\n-\n-      Discard :=\n-        Write (Descriptor.Input_Fd,\n-               Full_Str'Address,\n-               Last - Full_Str'First + 1);\n    end Send;\n \n    -----------------\n@@ -1151,8 +1157,19 @@ package body GNAT.Expect is\n       Signal     : Integer)\n    is\n    begin\n-      Kill (Descriptor.Pid, Signal, 1);\n-      --  ??? Need to check process status here\n+      --  A nonpositive process id passed to kill has special meanings. For\n+      --  example, -1 means kill all processes in sight, including self, in\n+      --  POSIX and Windows (and something slightly different in Linux). See\n+      --  man pages for details. In any case, we don't want to do that. Note\n+      --  that Descriptor.Pid will be -1 if the process was not successfully\n+      --  started; we don't want to kill ourself in that case.\n+\n+      if Descriptor.Pid > 0 then\n+         Kill (Descriptor.Pid, Signal, Close => 1);\n+         --  ??? Need to check process status here\n+      else\n+         raise Invalid_Process;\n+      end if;\n    end Send_Signal;\n \n    ---------------------------------\n@@ -1258,8 +1275,7 @@ package body GNAT.Expect is\n          end if;\n       end if;\n \n-      --  As above, we record the proper fd for the child's\n-      --  standard error stream.\n+      --  As above, record the proper fd for the child's standard error stream\n \n       Pid.Error_Fd := Pipe3.Input;\n       Set_Close_On_Exec (Pipe3.Input, True, Status);\n@@ -1293,7 +1309,6 @@ package body GNAT.Expect is\n    is\n       pragma Warnings (Off, Descriptor);\n       pragma Warnings (Off, User_Data);\n-\n    begin\n       GNAT.IO.Put (Str);\n    end Trace_Filter;"}, {"sha": "7d9eced4d797ff0bbf6d762d2a335d53e3ee9f67", "filename": "gcc/ada/g-expect.ads", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11efec4da29915bb07c76837384c48ad2e3f92f7/gcc%2Fada%2Fg-expect.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11efec4da29915bb07c76837384c48ad2e3f92f7/gcc%2Fada%2Fg-expect.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-expect.ads?ref=11efec4da29915bb07c76837384c48ad2e3f92f7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2000-2006, AdaCore                     --\n+--                     Copyright (C) 2000-2007, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -188,41 +188,39 @@ package GNAT.Expect is\n    procedure Close (Descriptor : in out Process_Descriptor);\n    --  Terminate the process and close the pipes to it. It implicitly\n    --  does the 'wait' command required to clean up the process table.\n-   --  This also frees the buffer associated with the process id.\n+   --  This also frees the buffer associated with the process id. Raise\n+   --  Invalid_Process if the process id is invalid.\n \n    procedure Close\n      (Descriptor : in out Process_Descriptor;\n       Status     : out Integer);\n-   --  Same as above, but also returns the exit status of the process,\n-   --  as set for example by the procedure GNAT.OS_Lib.OS_Exit.\n+   --  Same as above, but also returns the exit status of the process, as set\n+   --  for example by the procedure GNAT.OS_Lib.OS_Exit.\n \n    procedure Send_Signal\n      (Descriptor : Process_Descriptor;\n       Signal     : Integer);\n-   --  Send a given signal to the process\n+   --  Send a given signal to the process. Raise Invalid_Process if the process\n+   --  id is invalid.\n \n    procedure Interrupt (Descriptor : in out Process_Descriptor);\n    --  Interrupt the process (the equivalent of Ctrl-C on unix and windows)\n    --  and call close if the process dies.\n \n    function Get_Input_Fd\n-     (Descriptor : Process_Descriptor)\n-      return       GNAT.OS_Lib.File_Descriptor;\n+     (Descriptor : Process_Descriptor) return GNAT.OS_Lib.File_Descriptor;\n    --  Return the input file descriptor associated with Descriptor\n \n    function Get_Output_Fd\n-     (Descriptor : Process_Descriptor)\n-      return       GNAT.OS_Lib.File_Descriptor;\n+     (Descriptor : Process_Descriptor) return GNAT.OS_Lib.File_Descriptor;\n    --  Return the output file descriptor associated with Descriptor\n \n    function Get_Error_Fd\n-     (Descriptor : Process_Descriptor)\n-      return       GNAT.OS_Lib.File_Descriptor;\n+     (Descriptor : Process_Descriptor) return GNAT.OS_Lib.File_Descriptor;\n    --  Return the error output file descriptor associated with Descriptor\n \n    function Get_Pid\n-     (Descriptor : Process_Descriptor)\n-      return       Process_Id;\n+     (Descriptor : Process_Descriptor) return Process_Id;\n    --  Return the process id assocated with a given process descriptor\n \n    function Get_Command_Output\n@@ -403,7 +401,7 @@ package GNAT.Expect is\n \n    type Regexp_Array is array (Positive range <>) of GNAT.OS_Lib.String_Access;\n \n-   type Pattern_Matcher_Access is access GNAT.Regpat.Pattern_Matcher;\n+   type Pattern_Matcher_Access is access all GNAT.Regpat.Pattern_Matcher;\n    type Compiled_Regexp_Array is array (Positive range <>)\n      of Pattern_Matcher_Access;\n "}]}