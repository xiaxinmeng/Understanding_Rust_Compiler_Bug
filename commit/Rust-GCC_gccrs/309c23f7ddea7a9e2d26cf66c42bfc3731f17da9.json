{"sha": "309c23f7ddea7a9e2d26cf66c42bfc3731f17da9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA5YzIzZjdkZGVhN2E5ZTJkMjZjZjY2YzQyYmZjMzczMWYxN2RhOQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1994-03-28T01:27:48Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1994-03-28T01:27:48Z"}, "message": "(attrib): Handle string args as expressions,\n\nmerging the two rules.  `mode' attribute now takes a string arg.\nDelete the rule for an identifier as arg.\n\nFrom-SVN: r6913", "tree": {"sha": "e6a32df38bf1e0fa2294fe9dc790dc3e90f69a7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6a32df38bf1e0fa2294fe9dc790dc3e90f69a7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/309c23f7ddea7a9e2d26cf66c42bfc3731f17da9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/309c23f7ddea7a9e2d26cf66c42bfc3731f17da9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/309c23f7ddea7a9e2d26cf66c42bfc3731f17da9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/309c23f7ddea7a9e2d26cf66c42bfc3731f17da9/comments", "author": null, "committer": null, "parents": [{"sha": "423b04b06f9c845e907bd3ce0915c065b9e27cdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/423b04b06f9c845e907bd3ce0915c065b9e27cdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/423b04b06f9c845e907bd3ce0915c065b9e27cdb"}], "stats": {"total": 42, "additions": 14, "deletions": 28}, "files": [{"sha": "57530d063fb4891a9a0eaf9e20ed43c187c6353f", "filename": "gcc/c-parse.in", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/309c23f7ddea7a9e2d26cf66c42bfc3731f17da9/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/309c23f7ddea7a9e2d26cf66c42bfc3731f17da9/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=309c23f7ddea7a9e2d26cf66c42bfc3731f17da9", "patch": "@@ -1062,39 +1062,35 @@ attribute_list\n     ;\n \n attrib\n-    : IDENTIFIER\n+    : identifier\n \t{ if (strcmp (IDENTIFIER_POINTER ($1), \"packed\")\n \t      && strcmp (IDENTIFIER_POINTER ($1), \"noreturn\"))\n \t    warning (\"`%s' attribute directive ignored\",\n \t\t     IDENTIFIER_POINTER ($1));\n \t  $$ = $1; }\n     | TYPE_QUAL\n-    | IDENTIFIER '(' IDENTIFIER ')'\n-\t{ /* If not \"mode (m)\" or \"aligned\", then issue warning. \n-\t     If \"aligned\", this will later produce an error in decl_attributes\n-\t     since an identifier is not a valid constant, but we want to give\n-\t     an error instead of a warning when the attribute name is\n-\t     recognized but has an improper argument.  */\n-\t  if (strcmp (IDENTIFIER_POINTER ($1), \"mode\") != 0\n-\t      && strcmp (IDENTIFIER_POINTER ($1), \"aligned\") != 0)\n+    | identifier '(' expr_no_commas ')'\n+\t{ /* If not aligned(n) or section(name), then issue warning */\n+\t  if (strcmp (IDENTIFIER_POINTER ($1), \"section\") == 0\n+\t      || strcmp (IDENTIFIER_POINTER ($1), \"mode\") == 0)\n \t    {\n-\t      warning (\"`%s' attribute directive ignored\",\n-\t\t       IDENTIFIER_POINTER ($1));\n-\t      $$ = $1;\n+\t      if (TREE_CODE ($3) != STRING_CST)\n+\t\t{\n+\t\t  error (\"invalid argument in `%s' attribute\",\n+\t\t\t IDENTIFIER_POINTER ($1));\n+\t\t  $$ = $1;\n+\t\t}\n+\t      $$ = tree_cons ($1, $3, NULL_TREE);\n \t    }\n-\t  else\n-\t    $$ = tree_cons ($1, $3, NULL_TREE); }\n-    | IDENTIFIER '(' expr_no_commas ')'\n-\t{ /* if not \"aligned(n)\", then issue warning */\n-\t  if (strcmp (IDENTIFIER_POINTER ($1), \"aligned\") != 0)\n+\t  else if (strcmp (IDENTIFIER_POINTER ($1), \"aligned\") != 0)\n \t    {\n \t      warning (\"`%s' attribute directive ignored\",\n \t\t       IDENTIFIER_POINTER ($1));\n \t      $$ = $1;\n \t    }\n \t  else\n \t    $$ = tree_cons ($1, $3, NULL_TREE); }\n-    | IDENTIFIER '(' IDENTIFIER ',' expr_no_commas ',' expr_no_commas ')'\n+    | identifier '(' IDENTIFIER ',' expr_no_commas ',' expr_no_commas ')'\n \t{ /* if not \"format(...)\", then issue warning */\n \t  if (strcmp (IDENTIFIER_POINTER ($1), \"format\") != 0)\n \t    {\n@@ -1108,16 +1104,6 @@ attrib\n \t\t\t\t       tree_cons ($5, $7, NULL_TREE),\n \t\t\t\t       NULL_TREE),\n \t\t\t    NULL_TREE); }\n-    | IDENTIFIER '(' STRING ')'\n-\t{ /* If not \"section (name)\", then issue warning.  */\n-\t  if (strcmp (IDENTIFIER_POINTER ($1), \"section\") != 0)\n-\t    {\n-\t      warning (\"`%s' attribute directive ignored\",\n-\t\t       IDENTIFIER_POINTER ($1));\n-\t      $$ = $1;\n-\t    }\n-\t  else\n-\t    $$ = tree_cons ($1, $3, NULL_TREE); }\n     ;\n \f\n /* Initializers.  `init' is the entry point.  */"}]}