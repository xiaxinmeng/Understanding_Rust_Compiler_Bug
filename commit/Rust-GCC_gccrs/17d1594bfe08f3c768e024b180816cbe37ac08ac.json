{"sha": "17d1594bfe08f3c768e024b180816cbe37ac08ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdkMTU5NGJmZTA4ZjNjNzY4ZTAyNGIxODA4MTZjYmUzN2FjMDhhYw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-28T06:16:58Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-28T06:18:21Z"}, "message": "gcov-tool: Flexible endian adjustment for merging coverage data\n\ngcc/ChangeLog:\n2020-05-27  Dong JianQiang  <dongjianqiang2@huawei.com>\n\n\tPR gcov-profile/95332\n\t* gcov-io.c (gcov_var::endian): Move field.\n\t(from_file): Add IN_GCOV_TOOL check.\n\t* gcov-io.h (gcov_magic): Ditto.\n\nlibgcc/ChangeLog:\n2020-05-27  Dong JianQiang  <dongjianqiang2@huawei.com>\n\n\tPR gcov-profile/95332\n\t* libgcov-util.c (read_gcda_file): Call gcov_magic.\n\t* libgcov.h (gcov_magic): Disable GCC poison.", "tree": {"sha": "f16e3c2caa50407dafc752f7e7b5eac59522a328", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f16e3c2caa50407dafc752f7e7b5eac59522a328"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17d1594bfe08f3c768e024b180816cbe37ac08ac", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl7PV7cACgkQTcGC3A+n\nN4UzFAf/YChVE7sM1A/XdATKcRGP5kqr9c6Y24Z1Kg0/ViDh1YWaIX0WbadrYqBo\nb0HSMo1WeKwGDGHvHWZrVuQiUMSRHC3XD2UVqtarEtTmI7UTZe/vY8ewMbiHvpN3\nHEmaIz+gQfBHOkA/90dJxHPGlyeNAzDnkIf3lLuMC4JYvdD2JXtAW5wKBjN1Xr3J\n9j3a6JOHFl1bdnaOhXjdz28H8zq5Ov2UEFP0OW1GJWHL12O/Nscz9taOKHQ9rPID\n9gjFhtRxTcL0THrvwh+DgHRO6U4y11J4/7vViBRF0MGMc8pTvtv42UMG4EH8ZPrV\nc36WTtH0mrzJBiIxUpJ5YUoS9XcYlw==\n=EbD4\n-----END PGP SIGNATURE-----", "payload": "tree f16e3c2caa50407dafc752f7e7b5eac59522a328\nparent 61f3b60556e8d4da298906ac4f4effc3d18c6ea1\nauthor Martin Liska <mliska@suse.cz> 1590646618 +0200\ncommitter Martin Liska <mliska@suse.cz> 1590646701 +0200\n\ngcov-tool: Flexible endian adjustment for merging coverage data\n\ngcc/ChangeLog:\n2020-05-27  Dong JianQiang  <dongjianqiang2@huawei.com>\n\n\tPR gcov-profile/95332\n\t* gcov-io.c (gcov_var::endian): Move field.\n\t(from_file): Add IN_GCOV_TOOL check.\n\t* gcov-io.h (gcov_magic): Ditto.\n\nlibgcc/ChangeLog:\n2020-05-27  Dong JianQiang  <dongjianqiang2@huawei.com>\n\n\tPR gcov-profile/95332\n\t* libgcov-util.c (read_gcda_file): Call gcov_magic.\n\t* libgcov.h (gcov_magic): Disable GCC poison.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d1594bfe08f3c768e024b180816cbe37ac08ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17d1594bfe08f3c768e024b180816cbe37ac08ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d1594bfe08f3c768e024b180816cbe37ac08ac/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61f3b60556e8d4da298906ac4f4effc3d18c6ea1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f3b60556e8d4da298906ac4f4effc3d18c6ea1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61f3b60556e8d4da298906ac4f4effc3d18c6ea1"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "ac60f9baf47e1c5d81196b7c732f6b83c10cc602", "filename": "gcc/gcov-io.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d1594bfe08f3c768e024b180816cbe37ac08ac/gcc%2Fgcov-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d1594bfe08f3c768e024b180816cbe37ac08ac/gcc%2Fgcov-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.c?ref=17d1594bfe08f3c768e024b180816cbe37ac08ac", "patch": "@@ -48,14 +48,14 @@ struct gcov_var\n   unsigned overread;\t\t/* Number of words overread.  */\n   int error;\t\t\t/* < 0 overflow, > 0 disk error.  */\n   int mode;\t                /* < 0 writing, > 0 reading */\n+  int endian;\t\t\t/* Swap endianness.  */\n #if IN_LIBGCOV\n   /* Holds one block plus 4 bytes, thus all coverage reads & writes\n      fit within this buffer and we always can transfer GCOV_BLOCK_SIZE\n      to and from the disk. libgcov never backtracks and only writes 4\n      or 8 byte objects.  */\n   gcov_unsigned_t buffer[GCOV_BLOCK_SIZE + 1];\n #else\n-  int endian;\t\t\t/* Swap endianness.  */\n   /* Holds a variable length block, as the compiler can write\n      strings and needs to backtrack.  */\n   size_t alloc;\n@@ -100,7 +100,7 @@ gcov_rewrite (void)\n \n static inline gcov_unsigned_t from_file (gcov_unsigned_t value)\n {\n-#if !IN_LIBGCOV\n+#if !IN_LIBGCOV || defined (IN_GCOV_TOOL)\n   if (gcov_var.endian)\n     {\n       value = (value >> 16) | (value << 16);\n@@ -222,7 +222,7 @@ gcov_close (void)\n   return gcov_var.error;\n }\n \n-#if !IN_LIBGCOV\n+#if !IN_LIBGCOV || defined (IN_GCOV_TOOL)\n /* Check if MAGIC is EXPECTED. Use it to determine endianness of the\n    file. Returns +1 for same endian, -1 for other endian and zero for\n    not EXPECTED.  */"}, {"sha": "8cb68aaf42d1c0e92bf732e9fd860cb7c59be4bd", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d1594bfe08f3c768e024b180816cbe37ac08ac/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d1594bfe08f3c768e024b180816cbe37ac08ac/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=17d1594bfe08f3c768e024b180816cbe37ac08ac", "patch": "@@ -332,6 +332,9 @@ struct gcov_summary\n \n #if !IN_LIBGCOV\n GCOV_LINKAGE int gcov_open (const char */*name*/, int /*direction*/);\n+#endif\n+\n+#if !IN_LIBGCOV || defined (IN_GCOV_TOOL)\n GCOV_LINKAGE int gcov_magic (gcov_unsigned_t, gcov_unsigned_t);\n #endif\n "}, {"sha": "fff54c6a3f6bf17d9033c41d0bdc510de7836cf6", "filename": "libgcc/libgcov-util.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d1594bfe08f3c768e024b180816cbe37ac08ac/libgcc%2Flibgcov-util.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d1594bfe08f3c768e024b180816cbe37ac08ac/libgcc%2Flibgcov-util.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-util.c?ref=17d1594bfe08f3c768e024b180816cbe37ac08ac", "patch": "@@ -261,7 +261,7 @@ read_gcda_file (const char *filename)\n {\n   unsigned tags[4];\n   unsigned depth = 0;\n-  unsigned magic, version;\n+  unsigned version;\n   struct gcov_info *obj_info;\n   int i;\n \n@@ -276,8 +276,7 @@ read_gcda_file (const char *filename)\n     }\n \n   /* Read magic.  */\n-  magic = gcov_read_unsigned ();\n-  if (magic != GCOV_DATA_MAGIC)\n+  if (!gcov_magic (gcov_read_unsigned (), GCOV_DATA_MAGIC))\n     {\n       fnotice (stderr, \"%s:not a gcov data file\\n\", filename);\n       gcov_close ();"}, {"sha": "b248690086ea17b7f0cf57c608d1bf54510f9c5f", "filename": "libgcc/libgcov.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d1594bfe08f3c768e024b180816cbe37ac08ac/libgcc%2Flibgcov.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d1594bfe08f3c768e024b180816cbe37ac08ac/libgcc%2Flibgcov.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov.h?ref=17d1594bfe08f3c768e024b180816cbe37ac08ac", "patch": "@@ -147,7 +147,7 @@ extern struct gcov_info *gcov_list;\n \n /* Poison these, so they don't accidentally slip in.  */\n #pragma GCC poison gcov_write_string gcov_write_tag gcov_write_length\n-#pragma GCC poison gcov_time gcov_magic\n+#pragma GCC poison gcov_time\n \n #ifdef HAVE_GAS_HIDDEN\n #define ATTRIBUTE_HIDDEN  __attribute__ ((__visibility__ (\"hidden\")))"}]}