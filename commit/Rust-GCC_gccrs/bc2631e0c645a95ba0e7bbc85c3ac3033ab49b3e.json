{"sha": "bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMyNjMxZTBjNjQ1YTk1YmEwZTdiYmM4NWMzYWMzMDMzYWI0OWIzZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-02-03T23:44:53Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-02-03T23:44:53Z"}, "message": "re PR libstdc++/25191 (exception_defines.h #defines try/catch)\n\n2009-02-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/25191\t\n\t* libsupc++/exception_defines.h: Depending on __EXCEPTIONS,\n\tdeal consistently with __try and __catch too.\n\t* src/localename.cc: Replace try -> __try, catch -> __catch.\n\t* src/ios.cc: Likewise.\n\t* src/locale.cc: Likewise.\n\t* src/istream.cc: Likewise.\n\t* src/thread.cc: Likewise.\n\t* src/compatibility.cc: Likewise.\n\t* src/bitmap_allocator.cc: Likewise.\n\t* src/ios_init.cc: Likewise.\n\t* include/debug/deque: Likewise.\n\t* include/debug/list: Likewise.\n\t* include/tr1_impl/hashtable: Likewise.\n\t* include/std/bitset: Likewise.\n\t* include/ext/pb_ds/detail/resize_policy/\n\thash_load_check_resize_trigger_imp.hpp: Likewise.\n\t* include/ext/pb_ds/detail/resize_policy/\n\thash_standard_resize_policy_imp.hpp: Likewise.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tresize_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tconstructor_destructor_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pat_trie_/\n\tsplit_join_branch_bag.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pat_trie_/\n\tconstructors_destructor_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/bin_search_tree_/\n\tconstructors_destructor_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tresize_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tconstructor_destructor_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/binary_heap_/\n\tconstructors_destructor_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/binary_heap_/\n\terase_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/binary_heap_/\n\tsplit_join_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\tconstructors_destructor_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/debug_map_base.hpp: Likewise.\n\t* include/ext/pb_ds/detail/list_update_map_/\n\tconstructor_destructor_fn_imps.hpp: Likewise.\n\t* include/ext/slist: Likewise.\n\t* include/ext/memory: Likewise.\n\t* include/ext/rc_string_base.h: Likewise.\n\t* include/ext/ropeimpl.h: Likewise.\n\t* include/ext/vstring.tcc: Likewise.\n\t* include/ext/rope: Likewise.\n\t* include/ext/sso_string_base.h: Likewise.\n\t* include/bits/shared_ptr.h: Likewise.\n\t* include/bits/stl_list.h: Likewise.\n\t* include/bits/locale_classes.tcc: Likewise.\n\t* include/bits/locale_facets.tcc: Likewise.\n\t* include/bits/locale_classes.h: Likewise.\n\t* include/bits/forward_list.h: Likewise.\n\t* include/bits/stl_vector.h: Likewise.\n\t* include/bits/stl_deque.h: Likewise.\n\t* include/bits/istream.tcc: Likewise.\n\t* include/bits/stl_uninitialized.h: Likewise.\n\t* include/bits/ostream.tcc: Likewise.\n\t* include/bits/vector.tcc: Likewise.\n\t* include/bits/stl_tempbuf.h: Likewise.\n\t* include/bits/deque.tcc: Likewise.\n\t* include/bits/basic_string.tcc: Likewise.\n\t* include/bits/ostream_insert.h: Likewise.\n\t* include/bits/locale_facets_nonio.tcc: Likewise.\n\t* include/bits/stl_tree.h: Likewise.\n\t* include/bits/fstream.tcc: Likewise.\n\t* include/tr1/shared_ptr.h: Likewise.\n\t* include/tr1/hypergeometric.tcc: Likewise.\n\t* include/backward/hashtable.h: Likewise.\n\t* libsupc++/exception_ptr.h: Likewise.\n\t* libsupc++/eh_personality.cc: Likewise.\n\t* libsupc++/eh_call.cc: Likewise.\n\t* config/locale/gnu/monetary_members.cc: Likewise.\n\t* config/locale/gnu/time_members.h: Likewise.\n\t* config/locale/generic/time_members.h: Likewise.\n\nFrom-SVN: r143913", "tree": {"sha": "e57495d04f52ab34d745a83ce9b9254363ad51c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e57495d04f52ab34d745a83ce9b9254363ad51c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/comments", "author": null, "committer": null, "parents": [{"sha": "d0db89893f32405918a613be61232735d8356002", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0db89893f32405918a613be61232735d8356002", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0db89893f32405918a613be61232735d8356002"}], "stats": {"total": 1054, "additions": 574, "deletions": 480}, "files": [{"sha": "b5d4d055dac92d484feb7e80beace77160161a2e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,3 +1,85 @@\n+2009-02-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/25191\t\n+\t* libsupc++/exception_defines.h: Depending on __EXCEPTIONS,\n+\tdeal consistently with __try and __catch too.\n+\t* src/localename.cc: Replace try -> __try, catch -> __catch.\n+\t* src/ios.cc: Likewise.\n+\t* src/locale.cc: Likewise.\n+\t* src/istream.cc: Likewise.\n+\t* src/thread.cc: Likewise.\n+\t* src/compatibility.cc: Likewise.\n+\t* src/bitmap_allocator.cc: Likewise.\n+\t* src/ios_init.cc: Likewise.\n+\t* include/debug/deque: Likewise.\n+\t* include/debug/list: Likewise.\n+\t* include/tr1_impl/hashtable: Likewise.\n+\t* include/std/bitset: Likewise.\n+\t* include/ext/pb_ds/detail/resize_policy/\n+\thash_load_check_resize_trigger_imp.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/resize_policy/\n+\thash_standard_resize_policy_imp.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tresize_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tconstructor_destructor_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pat_trie_/\n+\tsplit_join_branch_bag.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pat_trie_/\n+\tconstructors_destructor_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/\n+\tconstructors_destructor_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tresize_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tconstructor_destructor_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/binary_heap_/\n+\tconstructors_destructor_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/binary_heap_/\n+\terase_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/binary_heap_/\n+\tsplit_join_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\tconstructors_destructor_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/debug_map_base.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/list_update_map_/\n+\tconstructor_destructor_fn_imps.hpp: Likewise.\n+\t* include/ext/slist: Likewise.\n+\t* include/ext/memory: Likewise.\n+\t* include/ext/rc_string_base.h: Likewise.\n+\t* include/ext/ropeimpl.h: Likewise.\n+\t* include/ext/vstring.tcc: Likewise.\n+\t* include/ext/rope: Likewise.\n+\t* include/ext/sso_string_base.h: Likewise.\n+\t* include/bits/shared_ptr.h: Likewise.\n+\t* include/bits/stl_list.h: Likewise.\n+\t* include/bits/locale_classes.tcc: Likewise.\n+\t* include/bits/locale_facets.tcc: Likewise.\n+\t* include/bits/locale_classes.h: Likewise.\n+\t* include/bits/forward_list.h: Likewise.\n+\t* include/bits/stl_vector.h: Likewise.\n+\t* include/bits/stl_deque.h: Likewise.\n+\t* include/bits/istream.tcc: Likewise.\n+\t* include/bits/stl_uninitialized.h: Likewise.\n+\t* include/bits/ostream.tcc: Likewise.\n+\t* include/bits/vector.tcc: Likewise.\n+\t* include/bits/stl_tempbuf.h: Likewise.\n+\t* include/bits/deque.tcc: Likewise.\n+\t* include/bits/basic_string.tcc: Likewise.\n+\t* include/bits/ostream_insert.h: Likewise.\n+\t* include/bits/locale_facets_nonio.tcc: Likewise.\n+\t* include/bits/stl_tree.h: Likewise.\n+\t* include/bits/fstream.tcc: Likewise.\n+\t* include/tr1/shared_ptr.h: Likewise.\n+\t* include/tr1/hypergeometric.tcc: Likewise.\n+\t* include/backward/hashtable.h: Likewise.\n+\t* libsupc++/exception_ptr.h: Likewise.\n+\t* libsupc++/eh_personality.cc: Likewise.\n+\t* libsupc++/eh_call.cc: Likewise.\n+\t* config/locale/gnu/monetary_members.cc: Likewise.\n+\t* config/locale/gnu/time_members.h: Likewise.\n+\t* config/locale/generic/time_members.h: Likewise.\n+\n 2009-02-03  Johannes Singler  <singler@ira.uka.de>\n \n         * include/parallel/algorithmfwd.h:"}, {"sha": "538252ec199e050eecc6e91f055e13c7405ce1fa", "filename": "libstdc++-v3/config/locale/generic/time_members.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // std::time_get, std::time_put implementation, generic version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -73,9 +73,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       else\n \t_M_name_timepunct = _S_get_c_name();\n \n-      try\n+      __try\n \t{ _M_initialize_timepunct(__cloc); }\n-      catch(...)\n+      __catch(...)\n \t{\n \t  if (_M_name_timepunct != _S_get_c_name())\n \t    delete [] _M_name_timepunct;"}, {"sha": "a9f04cdffc3e3fce026867ce1f2db400f5fb7310", "filename": "libstdc++-v3/config/locale/gnu/monetary_members.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // std::moneypunct implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -479,7 +479,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  wchar_t* __wcs_ps = 0;\n \t  wchar_t* __wcs_ns = 0;\n \t  const char __nposn = *(__nl_langinfo_l(__INT_N_SIGN_POSN, __cloc));\n-\t  try\n+\t  __try\n \t    {\n \t      mbstate_t __state;\n \t      size_t __len = strlen(__cpossign);\n@@ -524,7 +524,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t_M_data->_M_curr_symbol = L\"\";\n \t      _M_data->_M_curr_symbol_size = wcslen(_M_data->_M_curr_symbol);\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    {\n \t      delete _M_data;\n \t      _M_data = 0;\n@@ -647,7 +647,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  wchar_t* __wcs_ps = 0;\n \t  wchar_t* __wcs_ns = 0;\n \t  const char __nposn = *(__nl_langinfo_l(__N_SIGN_POSN, __cloc));\n-\t  try\n+\t  __try\n             {\n               mbstate_t __state;\n               size_t __len;\n@@ -693,7 +693,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t_M_data->_M_curr_symbol = L\"\";\n               _M_data->_M_curr_symbol_size = wcslen(_M_data->_M_curr_symbol);\n \t    }\n-          catch(...)\n+          __catch(...)\n \t    {\n \t      delete _M_data;\n               _M_data = 0;"}, {"sha": "80e1e4f7dde1880193ae138f799c29b146efdd59", "filename": "libstdc++-v3/config/locale/gnu/time_members.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // std::time_get, std::time_put implementation, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -70,9 +70,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       else\n \t_M_name_timepunct = _S_get_c_name();\n \n-      try\n+      __try\n \t{ _M_initialize_timepunct(__cloc); }\n-      catch(...)\n+      __catch(...)\n \t{\n \t  if (_M_name_timepunct != _S_get_c_name())\n \t    delete [] _M_name_timepunct;"}, {"sha": "62bc5bc51935b38af5ecc9c0d518812f90a9715a", "filename": "libstdc++-v3/include/backward/hashtable.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhashtable.h?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // Hashtable implementation used by containers -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -603,12 +603,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       {\n \t_Node* __n = _M_get_node();\n \t__n->_M_next = 0;\n-\ttry\n+\t__try\n \t  {\n \t    this->get_allocator().construct(&__n->_M_val, __obj);\n \t    return __n;\n \t  }\n-\tcatch(...)\n+\t__catch(...)\n \t  {\n \t    _M_put_node(__n);\n \t    __throw_exception_again;\n@@ -995,7 +995,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  if (__n > __old_n)\n \t    {\n \t      _Vector_type __tmp(__n, (_Node*)(0), _M_buckets.get_allocator());\n-\t      try\n+\t      __try\n \t\t{\n \t\t  for (size_type __bucket = 0; __bucket < __old_n; ++__bucket)\n \t\t    {\n@@ -1012,7 +1012,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t    }\n \t\t  _M_buckets.swap(__tmp);\n \t\t}\n-\t      catch(...)\n+\t      __catch(...)\n \t\t{\n \t\t  for (size_type __bucket = 0; __bucket < __tmp.size();\n \t\t       ++__bucket)\n@@ -1098,7 +1098,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       _M_buckets.clear();\n       _M_buckets.reserve(__ht._M_buckets.size());\n       _M_buckets.insert(_M_buckets.end(), __ht._M_buckets.size(), (_Node*) 0);\n-      try\n+      __try\n \t{\n \t  for (size_type __i = 0; __i < __ht._M_buckets.size(); ++__i) {\n \t    const _Node* __cur = __ht._M_buckets[__i];\n@@ -1118,7 +1118,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  }\n \t  _M_num_elements = __ht._M_num_elements;\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  clear();\n \t  __throw_exception_again;"}, {"sha": "de41b8b7f00b08eab8ca58f4684a5d8a01f17e9a", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,7 +1,7 @@\n // Components for manipulating sequences of characters -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007\n+// 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -97,7 +97,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  }\n \t_Rep* __r = _Rep::_S_create(__len, size_type(0), __a);\n \t_M_copy(__r->_M_refdata(), __buf, __len);\n-\ttry\n+\t__try\n \t  {\n \t    while (__beg != __end)\n \t      {\n@@ -113,7 +113,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t++__beg;\n \t      }\n \t  }\n-\tcatch(...)\n+\t__catch(...)\n \t  {\n \t    __r->_M_destroy(__a);\n \t    __throw_exception_again;\n@@ -142,9 +142,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t\t\t\t\t      __end));\n \t// Check for out_of_range and length_error exceptions.\n \t_Rep* __r = _Rep::_S_create(__dnew, size_type(0), __a);\n-\ttry\n+\t__try\n \t  { _S_copy_chars(__r->_M_refdata(), __beg, __end); }\n-\tcatch(...)\n+\t__catch(...)\n \t  {\n \t    __r->_M_destroy(__a);\n \t    __throw_exception_again;\n@@ -992,7 +992,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typename __istream_type::sentry __cerb(__in, false);\n       if (__cerb)\n \t{\n-\t  try\n+\t  __try\n \t    {\n \t      // Avoid reallocation for common case.\n \t      __str.erase();\n@@ -1025,12 +1025,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t__err |= __ios_base::eofbit;\n \t      __in.width(0);\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      __in._M_setstate(__ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    {\n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 91. Description of operator>> and getline() for string<>\n@@ -1063,7 +1063,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typename __istream_type::sentry __cerb(__in, true);\n       if (__cerb)\n \t{\n-\t  try\n+\t  __try\n \t    {\n \t      __str.erase();\n \t      const __int_type __idelim = _Traits::to_int_type(__delim);\n@@ -1089,12 +1089,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      else\n \t\t__err |= __ios_base::failbit;\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      __in._M_setstate(__ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    {\n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 91. Description of operator>> and getline() for string<>"}, {"sha": "2a697686e9b177cd5437f54ee7f5e0f6bb9c02d0", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // Deque implementation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -242,13 +242,13 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       if (__pos._M_cur == this->_M_impl._M_start._M_cur)\n \t{\n \t  iterator __new_start = _M_reserve_elements_at_front(__n);\n-\t  try\n+\t  __try\n \t    {\n \t      std::__uninitialized_fill_a(__new_start, this->_M_impl._M_start,\n \t\t\t\t\t  __x, _M_get_Tp_allocator());\n \t      this->_M_impl._M_start = __new_start;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    {\n \t      _M_destroy_nodes(__new_start._M_node,\n \t\t\t       this->_M_impl._M_start._M_node);\n@@ -258,14 +258,14 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)\n \t{\n \t  iterator __new_finish = _M_reserve_elements_at_back(__n);\n-\t  try\n+\t  __try\n \t    {\n \t      std::__uninitialized_fill_a(this->_M_impl._M_finish,\n \t\t\t\t\t  __new_finish, __x,\n \t\t\t\t\t  _M_get_Tp_allocator());\n \t      this->_M_impl._M_finish = __new_finish;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    {\n \t      _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,\n \t\t\t       __new_finish._M_node + 1);\n@@ -282,7 +282,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n     _M_fill_initialize(const value_type& __value)\n     {\n       _Map_pointer __cur;\n-      try\n+      __try\n         {\n           for (__cur = this->_M_impl._M_start._M_node;\n \t       __cur < this->_M_impl._M_finish._M_node;\n@@ -293,7 +293,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t\t\t      this->_M_impl._M_finish._M_cur,\n \t\t\t\t      __value, _M_get_Tp_allocator());\n         }\n-      catch(...)\n+      __catch(...)\n         {\n           std::_Destroy(this->_M_impl._M_start, iterator(*__cur, __cur),\n \t\t\t_M_get_Tp_allocator());\n@@ -309,12 +309,12 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n                           std::input_iterator_tag)\n       {\n         this->_M_initialize_map(0);\n-        try\n+        __try\n           {\n             for (; __first != __last; ++__first)\n               push_back(*__first);\n           }\n-        catch(...)\n+        __catch(...)\n           {\n             clear();\n             __throw_exception_again;\n@@ -332,7 +332,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n         this->_M_initialize_map(__n);\n \n         _Map_pointer __cur_node;\n-        try\n+        __try\n           {\n             for (__cur_node = this->_M_impl._M_start._M_node;\n                  __cur_node < this->_M_impl._M_finish._M_node;\n@@ -348,7 +348,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t\t\t\tthis->_M_impl._M_finish._M_first,\n \t\t\t\t\t_M_get_Tp_allocator());\n           }\n-        catch(...)\n+        __catch(...)\n           {\n             std::_Destroy(this->_M_impl._M_start,\n \t\t\t  iterator(*__cur_node, __cur_node),\n@@ -372,7 +372,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       {\n \t_M_reserve_map_at_back();\n \t*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();\n-\ttry\n+\t__try\n \t  {\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n \t    this->_M_impl.construct(this->_M_impl._M_finish._M_cur,\n@@ -384,7 +384,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t\t\t\t\t+ 1);\n \t    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;\n \t  }\n-\tcatch(...)\n+\t__catch(...)\n \t  {\n \t    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));\n \t    __throw_exception_again;\n@@ -406,7 +406,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       {\n \t_M_reserve_map_at_front();\n \t*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();\n-\ttry\n+\t__try\n \t  {\n \t    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node\n \t\t\t\t\t       - 1);\n@@ -418,7 +418,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t    this->_M_impl.construct(this->_M_impl._M_start._M_cur, __t);\n #endif\n \t  }\n-\tcatch(...)\n+\t__catch(...)\n \t  {\n \t    ++this->_M_impl._M_start;\n \t    _M_deallocate_node(*(this->_M_impl._M_start._M_node - 1));\n@@ -473,13 +473,13 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n         if (__pos._M_cur == this->_M_impl._M_start._M_cur)\n \t  {\n \t    iterator __new_start = _M_reserve_elements_at_front(__n);\n-\t    try\n+\t    __try\n \t      {\n \t\tstd::__uninitialized_copy_a(__first, __last, __new_start,\n \t\t\t\t\t    _M_get_Tp_allocator());\n \t\tthis->_M_impl._M_start = __new_start;\n \t      }\n-\t    catch(...)\n+\t    __catch(...)\n \t      {\n \t\t_M_destroy_nodes(__new_start._M_node,\n \t\t\t\t this->_M_impl._M_start._M_node);\n@@ -489,14 +489,14 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n         else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)\n \t  {\n \t    iterator __new_finish = _M_reserve_elements_at_back(__n);\n-\t    try\n+\t    __try\n \t      {\n \t\tstd::__uninitialized_copy_a(__first, __last,\n \t\t\t\t\t    this->_M_impl._M_finish,\n \t\t\t\t\t    _M_get_Tp_allocator());\n \t\tthis->_M_impl._M_finish = __new_finish;\n \t      }\n-\t    catch(...)\n+\t    __catch(...)\n \t      {\n \t\t_M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,\n \t\t\t\t __new_finish._M_node + 1);\n@@ -562,7 +562,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t  iterator __new_start = _M_reserve_elements_at_front(__n);\n \t  iterator __old_start = this->_M_impl._M_start;\n \t  __pos = this->_M_impl._M_start + __elems_before;\n-\t  try\n+\t  __try\n \t    {\n \t      if (__elems_before >= difference_type(__n))\n \t\t{\n@@ -586,7 +586,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t  std::fill(__old_start, __pos, __x_copy);\n \t\t}\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    {\n \t      _M_destroy_nodes(__new_start._M_node,\n \t\t\t       this->_M_impl._M_start._M_node);\n@@ -600,7 +600,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t  const difference_type __elems_after =\n \t    difference_type(__length) - __elems_before;\n \t  __pos = this->_M_impl._M_finish - __elems_after;\n-\t  try\n+\t  __try\n \t    {\n \t      if (__elems_after > difference_type(__n))\n \t\t{\n@@ -625,7 +625,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t  std::fill(__pos, __old_finish, __x_copy);\n \t\t}\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    {\n \t      _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,\n \t\t\t       __new_finish._M_node + 1);\n@@ -649,7 +649,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t    iterator __new_start = _M_reserve_elements_at_front(__n);\n \t    iterator __old_start = this->_M_impl._M_start;\n \t    __pos = this->_M_impl._M_start + __elemsbefore;\n-\t    try\n+\t    __try\n \t      {\n \t\tif (__elemsbefore >= difference_type(__n))\n \t\t  {\n@@ -674,7 +674,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t    std::copy(__mid, __last, __old_start);\n \t\t  }\n \t      }\n-\t    catch(...)\n+\t    __catch(...)\n \t      {\n \t\t_M_destroy_nodes(__new_start._M_node,\n \t\t\t\t this->_M_impl._M_start._M_node);\n@@ -688,7 +688,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n           const difference_type __elemsafter =\n             difference_type(__length) - __elemsbefore;\n           __pos = this->_M_impl._M_finish - __elemsafter;\n-          try\n+          __try\n             {\n               if (__elemsafter > difference_type(__n))\n \t\t{\n@@ -714,7 +714,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t  std::copy(__first, __mid, __pos);\n \t\t}\n             }\n-          catch(...)\n+          __catch(...)\n             {\n               _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,\n \t\t\t       __new_finish._M_node + 1);\n@@ -757,12 +757,12 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t\t\t     / _S_buffer_size());\n       _M_reserve_map_at_front(__new_nodes);\n       size_type __i;\n-      try\n+      __try\n         {\n           for (__i = 1; __i <= __new_nodes; ++__i)\n             *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();\n         }\n-      catch(...)\n+      __catch(...)\n         {\n           for (size_type __j = 1; __j < __i; ++__j)\n             _M_deallocate_node(*(this->_M_impl._M_start._M_node - __j));\n@@ -782,12 +782,12 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t\t\t     / _S_buffer_size());\n       _M_reserve_map_at_back(__new_nodes);\n       size_type __i;\n-      try\n+      __try\n         {\n           for (__i = 1; __i <= __new_nodes; ++__i)\n             *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();\n         }\n-      catch(...)\n+      __catch(...)\n         {\n           for (size_type __j = 1; __j < __i; ++__j)\n             _M_deallocate_node(*(this->_M_impl._M_finish._M_node + __j));"}, {"sha": "78f098faacd6a471ee5afd0ca5471fa74903ee53", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -366,13 +366,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         _M_create_node(_Args&&... __args)\n         {\n           typename _Node::_Pointer __node = this->_M_get_node();\n-          try\n+          __try\n             {\n               _M_get_Node_allocator().construct(__node,\n                                               std::forward<_Args>(__args)...);\n               __node->_M_next = 0;\n             }\n-          catch(...)\n+          __catch(...)\n             {\n               this->_M_put_node(__node);\n               __throw_exception_again;"}, {"sha": "f5de38c5d7430e8fb06282bc1a068593cb595581", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,7 +1,7 @@\n // File based streams -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n-// 2007\n+// 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -154,17 +154,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  }\n \t} __cs (this);\n \n-\ttry\n+\t__try\n \t  {\n \t    if (!_M_terminate_output())\n \t      __testfail = true;\n \t  }\n-\tcatch(__cxxabiv1::__forced_unwind&)\n+\t__catch(__cxxabiv1::__forced_unwind&)\n \t  {\n \t    _M_file.close();\n \t    __throw_exception_again;\n \t  }\n-\tcatch(...)\n+\t__catch(...)\n \t  { __testfail = true; }\n       }\n "}, {"sha": "ca5e31446c935943b83c1dc9314ab9f1d65100b2", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 64, "deletions": 64, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,7 +1,7 @@\n // istream classes -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007\n+// 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -95,17 +95,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tif (__cerb)\n \t  {\n \t    ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t    try\n+\t    __try\n \t      {\n \t\tconst __num_get_type& __ng = __check_facet(this->_M_num_get);\n \t\t__ng.get(*this, 0, *this, __err, __v);\n \t      }\n-\t    catch(__cxxabiv1::__forced_unwind&)\n+\t    __catch(__cxxabiv1::__forced_unwind&)\n \t      {\n \t\tthis->_M_setstate(ios_base::badbit);\t\t\n \t\t__throw_exception_again;\n \t      }\n-\t    catch(...)\n+\t    __catch(...)\n \t      { this->_M_setstate(ios_base::badbit); }\n \t    if (__err)\n \t      this->setstate(__err);\n@@ -162,20 +162,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sentry __cerb(*this, false);\n       if (__cerb && __sbout)\n \t{\n-\t  try\n+\t  __try\n \t    {\n \t      bool __ineof;\n \t      if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))\n \t\t__err |= ios_base::failbit;\n \t      if (__ineof)\n \t\t__err |= ios_base::eofbit;\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::failbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { this->_M_setstate(ios_base::failbit); }\n \t}\n       else if (!__sbout)\n@@ -197,7 +197,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sentry __cerb(*this, true);\n       if (__cerb)\n \t{\n-\t  try\n+\t  __try\n \t    {\n \t      __c = this->rdbuf()->sbumpc();\n \t      // 27.6.1.1 paragraph 3\n@@ -206,12 +206,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      else\n \t\t__err |= ios_base::eofbit;\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { this->_M_setstate(ios_base::badbit); }\n \t}\n       if (!_M_gcount)\n@@ -231,7 +231,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sentry __cerb(*this, true);\n       if (__cerb)\n \t{\n-\t  try\n+\t  __try\n \t    {\n \t      const int_type __cb = this->rdbuf()->sbumpc();\n \t      // 27.6.1.1 paragraph 3\n@@ -243,12 +243,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      else\n \t\t__err |= ios_base::eofbit;\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { this->_M_setstate(ios_base::badbit); }\n \t}\n       if (!_M_gcount)\n@@ -268,7 +268,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sentry __cerb(*this, true);\n       if (__cerb)\n \t{\n-\t  try\n+\t  __try\n \t    {\n \t      const int_type __idelim = traits_type::to_int_type(__delim);\n \t      const int_type __eof = traits_type::eof();\n@@ -286,12 +286,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { this->_M_setstate(ios_base::badbit); }\n \t}\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -315,7 +315,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sentry __cerb(*this, true);\n       if (__cerb)\n \t{\n-\t  try\n+\t  __try\n \t    {\n \t      const int_type __idelim = traits_type::to_int_type(__delim);\n \t      const int_type __eof = traits_type::eof();\n@@ -334,12 +334,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { this->_M_setstate(ios_base::badbit); }\n \t}\n       if (!_M_gcount)\n@@ -359,7 +359,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sentry __cerb(*this, true);\n       if (__cerb)\n         {\n-          try\n+          __try\n             {\n               const int_type __idelim = traits_type::to_int_type(__delim);\n               const int_type __eof = traits_type::eof();\n@@ -387,12 +387,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n                     __err |= ios_base::failbit;\n                 }\n             }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-          catch(...)\n+          __catch(...)\n             { this->_M_setstate(ios_base::badbit); }\n         }\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -419,7 +419,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (__cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n+\t  __try\n \t    {\n \t      const int_type __eof = traits_type::eof();\n \t      __streambuf_type* __sb = this->rdbuf();\n@@ -429,12 +429,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      else\n \t\t_M_gcount = 1;\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { this->_M_setstate(ios_base::badbit); }\n \t  if (__err)\n \t    this->setstate(__err);\n@@ -452,7 +452,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (__cerb && __n > 0)\n         {\n           ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-          try\n+          __try\n             {\n               const int_type __eof = traits_type::eof();\n               __streambuf_type* __sb = this->rdbuf();\n@@ -491,12 +491,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      if (traits_type::eq_int_type(__c, __eof))\n                 __err |= ios_base::eofbit;\n             }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-          catch(...)\n+          __catch(...)\n             { this->_M_setstate(ios_base::badbit); }\n           if (__err)\n             this->setstate(__err);\n@@ -514,7 +514,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (__cerb && __n > 0)\n         {\n           ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-          try\n+          __try\n             {\n               const int_type __eof = traits_type::eof();\n               __streambuf_type* __sb = this->rdbuf();\n@@ -556,12 +556,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t  __sb->sbumpc();\n \t\t}\n             }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-          catch(...)\n+          __catch(...)\n             { this->_M_setstate(ios_base::badbit); }\n           if (__err)\n             this->setstate(__err);\n@@ -580,18 +580,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (__cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n+\t  __try\n \t    {\n \t      __c = this->rdbuf()->sgetc();\n \t      if (traits_type::eq_int_type(__c, traits_type::eof()))\n \t\t__err |= ios_base::eofbit;\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { this->_M_setstate(ios_base::badbit); }\n \t  if (__err)\n \t    this->setstate(__err);\n@@ -609,18 +609,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (__cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n+\t  __try\n \t    {\n \t      _M_gcount = this->rdbuf()->sgetn(__s, __n);\n \t      if (_M_gcount != __n)\n \t\t__err |= (ios_base::eofbit | ios_base::failbit);\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { this->_M_setstate(ios_base::badbit); }\n \t  if (__err)\n \t    this->setstate(__err);\n@@ -638,7 +638,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (__cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n+\t  __try\n \t    {\n \t      // Cannot compare int_type with streamsize generically.\n \t      const streamsize __num = this->rdbuf()->in_avail();\n@@ -647,12 +647,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      else if (__num == -1)\n \t\t__err |= ios_base::eofbit;\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { this->_M_setstate(ios_base::badbit); }\n \t  if (__err)\n \t    this->setstate(__err);\n@@ -672,20 +672,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (__cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n+\t  __try\n \t    {\n \t      const int_type __eof = traits_type::eof();\n \t      __streambuf_type* __sb = this->rdbuf();\n \t      if (!__sb\n \t\t  || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))\n \t\t__err |= ios_base::badbit;\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { this->_M_setstate(ios_base::badbit); }\n \t  if (__err)\n \t    this->setstate(__err);\n@@ -705,20 +705,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (__cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n+\t  __try\n \t    {\n \t      const int_type __eof = traits_type::eof();\n \t      __streambuf_type* __sb = this->rdbuf();\n \t      if (!__sb\n \t\t  || traits_type::eq_int_type(__sb->sungetc(), __eof))\n \t\t__err |= ios_base::badbit;\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { this->_M_setstate(ios_base::badbit); }\n \t  if (__err)\n \t    this->setstate(__err);\n@@ -738,7 +738,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (__cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n+\t  __try\n \t    {\n \t      __streambuf_type* __sb = this->rdbuf();\n \t      if (__sb)\n@@ -749,12 +749,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t    __ret = 0;\n \t\t}\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { this->_M_setstate(ios_base::badbit); }\n \t  if (__err)\n \t    this->setstate(__err);\n@@ -770,18 +770,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR60.  Do not change _M_gcount.\n       pos_type __ret = pos_type(-1);\n-      try\n+      __try\n \t{\n \t  if (!this->fail())\n \t    __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,\n \t\t\t\t\t      ios_base::in);\n \t}\n-      catch(__cxxabiv1::__forced_unwind&)\n+      __catch(__cxxabiv1::__forced_unwind&)\n \t{\n \t  this->_M_setstate(ios_base::badbit);\n \t  __throw_exception_again;\n \t}\n-      catch(...)\n+      __catch(...)\n \t{ this->_M_setstate(ios_base::badbit); }\n       return __ret;\n     }\n@@ -794,7 +794,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR60.  Do not change _M_gcount.\n       ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-      try\n+      __try\n \t{\n \t  if (!this->fail())\n \t    {\n@@ -807,12 +807,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t__err |= ios_base::failbit;\n \t    }\n \t}\n-      catch(__cxxabiv1::__forced_unwind&)\n+      __catch(__cxxabiv1::__forced_unwind&)\n \t{\n \t  this->_M_setstate(ios_base::badbit);\n \t  __throw_exception_again;\n \t}\n-      catch(...)\n+      __catch(...)\n \t{ this->_M_setstate(ios_base::badbit); }\n       if (__err)\n \tthis->setstate(__err);\n@@ -827,7 +827,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR60.  Do not change _M_gcount.\n       ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-      try\n+      __try\n \t{\n \t  if (!this->fail())\n \t    {\n@@ -840,12 +840,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t__err |= ios_base::failbit;\n \t    }\n \t}\n-      catch(__cxxabiv1::__forced_unwind&)\n+      __catch(__cxxabiv1::__forced_unwind&)\n \t{\n \t  this->_M_setstate(ios_base::badbit);\n \t  __throw_exception_again;\n \t}\n-      catch(...)\n+      __catch(...)\n \t{ this->_M_setstate(ios_base::badbit); }\n       if (__err)\n \tthis->setstate(__err);\n@@ -864,20 +864,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (__cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n+\t  __try\n \t    {\n \t      const __int_type __cb = __in.rdbuf()->sbumpc();\n \t      if (!_Traits::eq_int_type(__cb, _Traits::eof()))\n \t\t__c = _Traits::to_char_type(__cb);\n \t      else\n \t\t__err |= (ios_base::eofbit | ios_base::failbit);\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      __in._M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { __in._M_setstate(ios_base::badbit); }\n \t  if (__err)\n \t    __in.setstate(__err);\n@@ -900,7 +900,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typename __istream_type::sentry __cerb(__in, false);\n       if (__cerb)\n \t{\n-\t  try\n+\t  __try\n \t    {\n \t      // Figure out how many characters to extract.\n \t      streamsize __num = __in.width();\n@@ -930,12 +930,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      *__s = char_type();\n \t      __in.width(0);\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      __in._M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { __in._M_setstate(ios_base::badbit); }\n \t}\n       if (!__extracted)"}, {"sha": "ad7b456c26d35535fd8f9b61db491eb877cd8b03", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,7 +1,7 @@\n // Locale support -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008\n+// 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -404,9 +404,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)\n \t{\n-\t  try\n+\t  __try\n \t    { delete this; }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { }\n \t}\n     }\n@@ -509,9 +509,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)\n \t{\n-\t  try\n+\t  __try\n \t    { delete this; }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { }\n \t}\n     }"}, {"sha": "bc2daeb2b1537c3ebd3eec94276d294ea353aa1c", "filename": "libstdc++-v3/include/bits/locale_classes.tcc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -49,9 +49,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       _M_impl = new _Impl(*__other._M_impl, 1);\n \n-      try\n+      __try\n \t{ _M_impl->_M_install_facet(&_Facet::id, __f); }\n-      catch(...)\n+      __catch(...)\n \t{\n \t  _M_impl->_M_remove_reference();\n \t  __throw_exception_again;\n@@ -66,11 +66,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     combine(const locale& __other) const\n     {\n       _Impl* __tmp = new _Impl(*_M_impl, 1);\n-      try\n+      __try\n \t{\n \t  __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  __tmp->_M_remove_reference();\n \t  __throw_exception_again;\n@@ -189,7 +189,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       _CharT* __c = new _CharT[__len];\n \n-      try\n+      __try\n \t{\n \t  // strxfrm stops when it sees a nul character so we break\n \t  // the string into zero-terminated substrings and pass those\n@@ -217,7 +217,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      __ret.push_back(_CharT());\n \t    }\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  delete [] __c;\n \t  __throw_exception_again;"}, {"sha": "779b4d505e149f11a95aea2af7d389c281275d5e", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,7 +1,7 @@\n // Locale support -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008\n+// 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -62,12 +62,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tif (!__caches[__i])\n \t  {\n \t    __numpunct_cache<_CharT>* __tmp = NULL;\n-\t    try\n+\t    __try\n \t      {\n \t\t__tmp = new __numpunct_cache<_CharT>;\n \t\t__tmp->_M_cache(__loc);\n \t      }\n-\t    catch(...)\n+\t    __catch(...)\n \t      {\n \t\tdelete __tmp;\n \t\t__throw_exception_again;"}, {"sha": "9cc1b913d19c64ecf0e226c8716d551d8340b5bb", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -50,12 +50,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tif (!__caches[__i])\n \t  {\n \t    __moneypunct_cache<_CharT, _Intl>* __tmp = NULL;\n-\t    try\n+\t    __try\n \t      {\n \t\t__tmp = new __moneypunct_cache<_CharT, _Intl>;\n \t\t__tmp->_M_cache(__loc);\n \t      }\n-\t    catch(...)\n+\t    __catch(...)\n \t      {\n \t\tdelete __tmp;\n \t\t__throw_exception_again;"}, {"sha": "bdc6c2861fa45500ed113f4a71a150ddac7ce8e1", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,7 +1,7 @@\n // ostream classes -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007\n+// 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -72,18 +72,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tif (__cerb)\n \t  {\n \t    ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t    try\n+\t    __try\n \t      {\n \t\tconst __num_put_type& __np = __check_facet(this->_M_num_put);\n \t\tif (__np.put(*this, *this, this->fill(), __v).failed())\n \t\t  __err |= ios_base::badbit;\n \t      }\n-\t    catch(__cxxabiv1::__forced_unwind&)\n+\t    __catch(__cxxabiv1::__forced_unwind&)\n \t      {\n \t\tthis->_M_setstate(ios_base::badbit);\t\t\n \t\t__throw_exception_again;\n \t      }\n-\t    catch(...)\n+\t    __catch(...)\n \t      { this->_M_setstate(ios_base::badbit); }\n \t    if (__err)\n \t      this->setstate(__err);\n@@ -128,17 +128,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sentry __cerb(*this);\n       if (__cerb && __sbin)\n \t{\n-\t  try\n+\t  __try\n \t    {\n \t      if (!__copy_streambufs(__sbin, this->rdbuf()))\n \t\t__err |= ios_base::failbit;\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::badbit);\t\t\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { this->_M_setstate(ios_base::failbit); }\n \t}\n       else if (!__sbin)\n@@ -163,18 +163,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (__cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n+\t  __try\n \t    {\n \t      const int_type __put = this->rdbuf()->sputc(__c);\n \t      if (traits_type::eq_int_type(__put, traits_type::eof()))\n \t\t__err |= ios_base::badbit;\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::badbit);\t\t\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { this->_M_setstate(ios_base::badbit); }\n \t  if (__err)\n \t    this->setstate(__err);\n@@ -197,14 +197,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sentry __cerb(*this);\n       if (__cerb)\n \t{\n-\t  try\n+\t  __try\n \t    { _M_write(__s, __n); }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::badbit);\t\t\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { this->_M_setstate(ios_base::badbit); }\n \t}\n       return *this;\n@@ -219,17 +219,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // DR 60. What is a formatted input function?\n       // basic_ostream::flush() is *not* an unformatted output function.\n       ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-      try\n+      __try\n \t{\n \t  if (this->rdbuf() && this->rdbuf()->pubsync() == -1)\n \t    __err |= ios_base::badbit;\n \t}\n-      catch(__cxxabiv1::__forced_unwind&)\n+      __catch(__cxxabiv1::__forced_unwind&)\n \t{\n \t  this->_M_setstate(ios_base::badbit);\t\t\n \t  __throw_exception_again;\n \t}\n-      catch(...)\n+      __catch(...)\n \t{ this->_M_setstate(ios_base::badbit); }\n       if (__err)\n \tthis->setstate(__err);\n@@ -242,17 +242,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     tellp()\n     {\n       pos_type __ret = pos_type(-1);\n-      try\n+      __try\n \t{\n \t  if (!this->fail())\n \t    __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);\n \t}\n-      catch(__cxxabiv1::__forced_unwind&)\n+      __catch(__cxxabiv1::__forced_unwind&)\n \t{\n \t  this->_M_setstate(ios_base::badbit);\t\t\n \t  __throw_exception_again;\n \t}\n-      catch(...)\n+      __catch(...)\n \t{ this->_M_setstate(ios_base::badbit); }\n       return __ret;\n     }\n@@ -263,7 +263,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     seekp(pos_type __pos)\n     {\n       ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-      try\n+      __try\n \t{\n \t  if (!this->fail())\n \t    {\n@@ -277,12 +277,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t__err |= ios_base::failbit;\n \t    }\n \t}\n-      catch(__cxxabiv1::__forced_unwind&)\n+      __catch(__cxxabiv1::__forced_unwind&)\n \t{\n \t  this->_M_setstate(ios_base::badbit);\t\t\n \t  __throw_exception_again;\n \t}\n-      catch(...)\n+      __catch(...)\n \t{ this->_M_setstate(ios_base::badbit); }\n       if (__err)\n \tthis->setstate(__err);\n@@ -295,7 +295,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     seekp(off_type __off, ios_base::seekdir __dir)\n     {\n       ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-      try\n+      __try\n \t{\n \t  if (!this->fail())\n \t    {\n@@ -309,12 +309,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t__err |= ios_base::failbit;\n \t    }\n \t}\n-      catch(__cxxabiv1::__forced_unwind&)\n+      __catch(__cxxabiv1::__forced_unwind&)\n \t{\n \t  this->_M_setstate(ios_base::badbit);\t\t\n \t  __throw_exception_again;\n \t}\n-      catch(...)\n+      __catch(...)\n \t{ this->_M_setstate(ios_base::badbit); }\n       if (__err)\n \tthis->setstate(__err);\n@@ -332,7 +332,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t  // 167.  Improper use of traits_type::length()\n \t  const size_t __clen = char_traits<char>::length(__s);\n-\t  try\n+\t  __try\n \t    {\n \t      struct __ptr_guard\n \t      {\n@@ -347,12 +347,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t__ws[__i] = __out.widen(__s[__i]);\n \t      __ostream_insert(__out, __ws, __clen);\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      __out._M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { __out._M_setstate(ios_base::badbit); }\n \t}\n       return __out;"}, {"sha": "170c6bc3a3e23746700aab70093a06f6650be712", "filename": "libstdc++-v3/include/bits/ostream_insert.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // Helpers for ostream inserters -*- C++ -*-\n \n-// Copyright (C) 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -85,7 +85,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typename __ostream_type::sentry __cerb(__out);\n       if (__cerb)\n \t{\n-\t  try\n+\t  __try\n \t    {\n \t      const streamsize __w = __out.width();\n \t      if (__w > __n)\n@@ -104,12 +104,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t__ostream_write(__out, __s, __n);\n \t      __out.width(0);\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      __out._M_setstate(__ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { __out._M_setstate(__ios_base::badbit); }\n \t}\n       return __out;"}, {"sha": "e4758dcdf38e2e157c4b2635ca6ec74e44bd6057", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // <bits/shared_ptr.h> -*- C++ -*-\n \n-// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -222,11 +222,11 @@ namespace std\n       template<typename _Ptr>\n         __shared_count(_Ptr __p) : _M_pi(0)\n         {\n-          try\n+          __try\n             {\n               _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);\n             }\n-          catch(...)\n+          __catch(...)\n             {\n               delete __p;\n               __throw_exception_again;\n@@ -241,12 +241,12 @@ namespace std\n           typedef _Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp> _Sp_cd_type;\n           typedef std::allocator<_Sp_cd_type> _Alloc2;\n           _Alloc2 __a2;\n-          try\n+          __try\n             {\n               _M_pi = __a2.allocate(1);\n               ::new(static_cast<void*>(_M_pi)) _Sp_cd_type(__p, __d);\n             }\n-          catch(...)\n+          __catch(...)\n             {\n               __d(__p); // Call _Deleter on __p.\n               if (_M_pi)\n@@ -261,12 +261,12 @@ namespace std\n           typedef _Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp> _Sp_cd_type;\n           typedef typename _Alloc::template rebind<_Sp_cd_type>::other _Alloc2;\n           _Alloc2 __a2(__a);\n-          try\n+          __try\n             {\n               _M_pi = __a2.allocate(1);\n               ::new(static_cast<void*>(_M_pi)) _Sp_cd_type(__p, __d, __a);\n             }\n-          catch(...)\n+          __catch(...)\n             {\n               __d(__p); // Call _Deleter on __p.\n               if (_M_pi)\n@@ -282,13 +282,13 @@ namespace std\n           typedef _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp> _Sp_cp_type;\n           typedef typename _Alloc::template rebind<_Sp_cp_type>::other _Alloc2;\n           _Alloc2 __a2(__a);\n-          try\n+          __try\n             {\n               _M_pi = __a2.allocate(1);\n               ::new(static_cast<void*>(_M_pi)) _Sp_cp_type(__a,\n                     std::forward<_Args>(__args)...);\n             }\n-          catch(...)\n+          __catch(...)\n             {\n               if (_M_pi)\n         \t__a2.deallocate(static_cast<_Sp_cp_type*>(_M_pi), 1);\n@@ -1074,11 +1074,11 @@ namespace std\n \tif (expired())\n \t  return __shared_ptr<element_type, _Lp>();\n \n-\ttry\n+\t__try\n \t  {\n \t    return __shared_ptr<element_type, _Lp>(*this);\n \t  }\n-\tcatch(const bad_weak_ptr&)\n+\t__catch(const bad_weak_ptr&)\n \t  {\n \t    // Q: How can we get here?\n \t    // A: Another thread may have invalidated r after the\n@@ -1447,11 +1447,11 @@ namespace std\n \tif (this->expired())\n \t  return shared_ptr<_Tp>();\n \n-\ttry\n+\t__try\n \t  {\n \t    return shared_ptr<_Tp>(*this);\n \t  }\n-\tcatch(const bad_weak_ptr&)\n+\t__catch(const bad_weak_ptr&)\n \t  {\n \t    return shared_ptr<_Tp>();\n \t  }"}, {"sha": "ec9a727b0f3e9c0852e811f42de554d2fa89907e", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // Deque implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -513,9 +513,9 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t\t+ (this->_M_impl._M_map_size - __num_nodes) / 2);\n       _Tp** __nfinish = __nstart + __num_nodes;\n \n-      try\n+      __try\n \t{ _M_create_nodes(__nstart, __nfinish); }\n-      catch(...)\n+      __catch(...)\n \t{\n \t  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);\n \t  this->_M_impl._M_map = 0;\n@@ -537,12 +537,12 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n     _M_create_nodes(_Tp** __nstart, _Tp** __nfinish)\n     {\n       _Tp** __cur;\n-      try\n+      __try\n \t{\n \t  for (__cur = __nstart; __cur < __nfinish; ++__cur)\n \t    *__cur = this->_M_allocate_node();\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  _M_destroy_nodes(__nstart, __cur);\n \t  __throw_exception_again;"}, {"sha": "d38fffe1b3331038872588ad18e4cc65c8b5b9ce", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // List implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -465,11 +465,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       _M_create_node(const value_type& __x)\n       {\n \t_Node* __p = this->_M_get_node();\n-\ttry\n+\t__try\n \t  {\n \t    _M_get_Tp_allocator().construct(&__p->_M_data, __x);\n \t  }\n-\tcatch(...)\n+\t__catch(...)\n \t  {\n \t    _M_put_node(__p);\n \t    __throw_exception_again;\n@@ -482,12 +482,12 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n         _M_create_node(_Args&&... __args)\n \t{\n \t  _Node* __p = this->_M_get_node();\n-\t  try\n+\t  __try\n \t    {\n \t      _M_get_Node_allocator().construct(__p,\n \t\t\t\t\t\tstd::forward<_Args>(__args)...);\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    {\n \t      _M_put_node(__p);\n \t      __throw_exception_again;"}, {"sha": "9e98fcd7bdc52fda5ea90aace954609c13f4045f", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // Temporary buffer implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -187,7 +187,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     : _M_original_len(std::distance(__first, __last)),\n       _M_len(0), _M_buffer(0)\n     {\n-      try\n+      __try\n \t{\n \t  std::pair<pointer, size_type> __p(std::get_temporary_buffer<\n \t\t\t\t\t    value_type>(_M_original_len));\n@@ -196,7 +196,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  if (!__is_pod(_Tp) && _M_len > 0)\n \t    std::uninitialized_fill_n(_M_buffer, _M_len, *__first);\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  std::return_temporary_buffer(_M_buffer);\n \t  _M_buffer = 0;"}, {"sha": "125b6661120788ee08a222725c94c5aa7b96cde3", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // RB tree implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -372,9 +372,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_create_node(const value_type& __x)\n       {\n \t_Link_type __tmp = _M_get_node();\n-\ttry\n+\t__try\n \t  { get_allocator().construct(&__tmp->_M_value_field, __x); }\n-\tcatch(...)\n+\t__catch(...)\n \t  {\n \t    _M_put_node(__tmp);\n \t    __throw_exception_again;\n@@ -394,12 +394,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         _M_create_node(_Args&&... __args)\n \t{\n \t  _Link_type __tmp = _M_get_node();\n-\t  try\n+\t  __try\n \t    {\n \t      _M_get_Node_allocator().construct(__tmp,\n \t\t\t\t\t     std::forward<_Args>(__args)...);\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    {\n \t      _M_put_node(__tmp);\n \t      __throw_exception_again;\n@@ -937,7 +937,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _Link_type __top = _M_clone_node(__x);\n       __top->_M_parent = __p;\n \n-      try\n+      __try\n \t{\n \t  if (__x->_M_right)\n \t    __top->_M_right = _M_copy(_S_right(__x), __top);\n@@ -955,7 +955,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      __x = _S_left(__x);\n \t    }\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  _M_erase(__top);\n \t  __throw_exception_again;"}, {"sha": "a9936cfecc355e3c180aa4cd3849e33d14fe1ab2", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // Raw memory manipulators -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -73,14 +73,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t   _ForwardIterator __result)\n         {\n \t  _ForwardIterator __cur = __result;\n-\t  try\n+\t  __try\n \t    {\n \t      for (; __first != __last; ++__first, ++__cur)\n \t\t::new(static_cast<void*>(&*__cur)) typename\n \t\t    iterator_traits<_ForwardIterator>::value_type(*__first);\n \t      return __cur;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    {\n \t      std::_Destroy(__result, __cur);\n \t      __throw_exception_again;\n@@ -132,12 +132,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t   _ForwardIterator __last, const _Tp& __x)\n         {\n \t  _ForwardIterator __cur = __first;\n-\t  try\n+\t  __try\n \t    {\n \t      for (; __cur != __last; ++__cur)\n \t\tstd::_Construct(&*__cur, __x);\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    {\n \t      std::_Destroy(__first, __cur);\n \t      __throw_exception_again;\n@@ -186,12 +186,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t     const _Tp& __x)\n         {\n \t  _ForwardIterator __cur = __first;\n-\t  try\n+\t  __try\n \t    {\n \t      for (; __n > 0; --__n, ++__cur)\n \t\tstd::_Construct(&*__cur, __x);\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    {\n \t      std::_Destroy(__first, __cur);\n \t      __throw_exception_again;\n@@ -242,13 +242,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t   _ForwardIterator __result, _Allocator& __alloc)\n     {\n       _ForwardIterator __cur = __result;\n-      try\n+      __try\n \t{\n \t  for (; __first != __last; ++__first, ++__cur)\n \t    __alloc.construct(&*__cur, *__first);\n \t  return __cur;\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  std::_Destroy(__result, __cur, __alloc);\n \t  __throw_exception_again;\n@@ -278,12 +278,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t   const _Tp& __x, _Allocator& __alloc)\n     {\n       _ForwardIterator __cur = __first;\n-      try\n+      __try\n \t{\n \t  for (; __cur != __last; ++__cur)\n \t    __alloc.construct(&*__cur, __x);\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  std::_Destroy(__first, __cur, __alloc);\n \t  __throw_exception_again;\n@@ -303,12 +303,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t     const _Tp& __x, _Allocator& __alloc)\n     {\n       _ForwardIterator __cur = __first;\n-      try\n+      __try\n \t{\n \t  for (; __n > 0; --__n, ++__cur)\n \t    __alloc.construct(&*__cur, __x);\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  std::_Destroy(__first, __cur, __alloc);\n \t  __throw_exception_again;\n@@ -345,11 +345,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,\n \t\t\t\t\t\t\t   __result,\n \t\t\t\t\t\t\t   __alloc);\n-      try\n+      __try\n \t{\n \t  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  std::_Destroy(__result, __mid, __alloc);\n \t  __throw_exception_again;\n@@ -373,11 +373,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,\n \t\t\t\t\t\t\t   __result,\n \t\t\t\t\t\t\t   __alloc);\n-      try\n+      __try\n \t{\n \t  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  std::_Destroy(__result, __mid, __alloc);\n \t  __throw_exception_again;\n@@ -395,11 +395,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t      _InputIterator __last, _Allocator& __alloc)\n     {\n       std::__uninitialized_fill_a(__result, __mid, __x, __alloc);\n-      try\n+      __try\n \t{\n \t  return std::__uninitialized_move_a(__first, __last, __mid, __alloc);\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  std::_Destroy(__result, __mid, __alloc);\n \t  __throw_exception_again;\n@@ -420,11 +420,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,\n \t\t\t\t\t\t\t    __first2,\n \t\t\t\t\t\t\t    __alloc);\n-      try\n+      __try\n \t{\n \t  std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  std::_Destroy(__first2, __mid2, __alloc);\n \t  __throw_exception_again;\n@@ -439,14 +439,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t   _ForwardIterator __result, input_iterator_tag)\n     {\n       _ForwardIterator __cur = __result;\n-      try\n+      __try\n \t{\n \t  for (; __n > 0; --__n, ++__first, ++__cur)\n \t    ::new(static_cast<void*>(&*__cur)) typename\n \t\titerator_traits<_ForwardIterator>::value_type(*__first);\n \t  return __cur;\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  std::_Destroy(__result, __cur);\n \t  __throw_exception_again;"}, {"sha": "e6a42c6835c7daf20f6a6e80d6da1a200bc118bb", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // Vector implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -968,13 +968,13 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t\t     _ForwardIterator __first, _ForwardIterator __last)\n         {\n \t  pointer __result = this->_M_allocate(__n);\n-\t  try\n+\t  __try\n \t    {\n \t      std::__uninitialized_copy_a(__first, __last, __result,\n \t\t\t\t\t  _M_get_Tp_allocator());\n \t      return __result;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    {\n \t      _M_deallocate(__result, __n);\n \t      __throw_exception_again;"}, {"sha": "39b7951bff56cd70858138b6eda9c0264e1de0a1", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // Vector implementation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -326,7 +326,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t  const size_type __elems_before = __position - begin();\n \t  pointer __new_start(this->_M_allocate(__len));\n \t  pointer __new_finish(__new_start);\n-\t  try\n+\t  __try\n \t    {\n \t      // The order of the three operations is dictated by the C++0x\n \t      // case, where the moves could alter a new element belonging\n@@ -352,7 +352,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t\t\t\t    __new_finish,\n \t\t\t\t\t    _M_get_Tp_allocator());\n \t    }\n-\t  catch(...)\n+          __catch(...)\n \t    {\n \t      if (!__new_finish)\n \t\tthis->_M_impl.destroy(__new_start + __elems_before);\n@@ -418,7 +418,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t      const size_type __elems_before = __position - begin();\n \t      pointer __new_start(this->_M_allocate(__len));\n \t      pointer __new_finish(__new_start);\n-\t      try\n+\t      __try\n \t\t{\n \t\t  // See _M_insert_aux above.\n \t\t  std::__uninitialized_fill_n_a(__new_start + __elems_before,\n@@ -439,7 +439,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t\t\t\t\t__new_finish,\n \t\t\t\t\t\t_M_get_Tp_allocator());\n \t\t}\n-\t      catch(...)\n+\t      __catch(...)\n \t\t{\n \t\t  if (!__new_finish)\n \t\t    std::_Destroy(__new_start + __elems_before,\n@@ -525,7 +525,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t  _M_check_len(__n, \"vector::_M_range_insert\");\n \t\tpointer __new_start(this->_M_allocate(__len));\n \t\tpointer __new_finish(__new_start);\n-\t\ttry\n+\t\t__try\n \t\t  {\n \t\t    __new_finish =\n \t\t      std::__uninitialized_move_a(this->_M_impl._M_start,\n@@ -542,7 +542,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t\t\t\t\t  __new_finish,\n \t\t\t\t\t\t  _M_get_Tp_allocator());\n \t\t  }\n-\t\tcatch(...)\n+\t\t__catch(...)\n \t\t  {\n \t\t    std::_Destroy(__new_start, __new_finish,\n \t\t\t\t  _M_get_Tp_allocator());"}, {"sha": "2003734eca97931a277cd639d22d28ea46900448", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // Debugging deque implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -416,12 +416,12 @@ namespace __debug\n \t\titerator __victim = __position++;\n \t\t__victim._M_invalidate();\n \t      }\n-\t    try\n+\t    __try\n \t      {\n \t\treturn iterator(_Base::erase(__first.base(), __last.base()),\n \t\t\t\tthis);\n \t      }\n-\t    catch(...)\n+\t    __catch(...)\n \t      {\n \t\tthis->_M_revalidate_singular();\n \t\t__throw_exception_again;"}, {"sha": "96c100f59b8ee6788ef43122b4f6e7f2f6529df2", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // Debugging list implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -256,11 +256,11 @@ namespace __debug\n \t    __real_victim._M_invalidate();\n \t  }\n \n-\ttry\n+\t__try\n \t  {\n \t    _Base::resize(__sz, __c);\n \t  }\n-\tcatch(...)\n+\t__catch(...)\n \t  {\n \t    this->_M_revalidate_singular();\n \t    __throw_exception_again;"}, {"sha": "7f08f1605fc0d77d7cfbeedfe1a2f7a069a57972", "filename": "libstdc++-v3/include/ext/memory", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmemory?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,7 @@\n // Memory extensions -*- C++ -*-\n \n-// Copyright (C) 2002, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -79,13 +80,13 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t\t   _ForwardIter __result, std::input_iterator_tag)\n     {\n       _ForwardIter __cur = __result;\n-      try\n+      __try\n \t{\n \t  for (; __count > 0 ; --__count, ++__first, ++__cur)\n \t    std::_Construct(&*__cur, *__first);\n \t  return pair<_InputIter, _ForwardIter>(__first, __cur);\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  std::_Destroy(__result, __cur);\n \t  __throw_exception_again;\n@@ -138,13 +139,13 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t\t     _Allocator __alloc)\n     {\n       _ForwardIter __cur = __result;\n-      try\n+      __try\n \t{\n \t  for (; __count > 0 ; --__count, ++__first, ++__cur)\n \t    __alloc.construct(&*__cur, *__first);\n \t  return pair<_InputIter, _ForwardIter>(__first, __cur);\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  std::_Destroy(__result, __cur, __alloc);\n \t  __throw_exception_again;"}, {"sha": "617843b8718b439cade533b42bb7d880003a3f71", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fconstructors_destructor_fn_imps.hpp?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -95,15 +95,15 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n   m_size = other.m_size;\n   _GLIBCXX_DEBUG_ONLY(other.structure_only_assert_valid();)\n \n-    try\n+    __try\n       {\n         m_p_head->m_p_parent = recursive_copy_node(other.m_p_head->m_p_parent);\n         if (m_p_head->m_p_parent != NULL)\n \t  m_p_head->m_p_parent->m_p_parent = m_p_head;\n         m_size = other.m_size;\n         initialize_min_max();\n       }\n-    catch(...)\n+    __catch(...)\n       {\n         _GLIBCXX_DEBUG_ONLY(debug_base::clear();)\n \ts_node_allocator.deallocate(m_p_head, 1);\n@@ -163,24 +163,24 @@ recursive_copy_node(const node_pointer p_nd)\n     return (NULL);\n \n   node_pointer p_ret = s_node_allocator.allocate(1);\n-  try\n+  __try\n     {\n       new (p_ret) node(*p_nd);\n     }\n-  catch(...)\n+  __catch(...)\n     {\n       s_node_allocator.deallocate(p_ret, 1);\n       __throw_exception_again;\n     }\n \n   p_ret->m_p_left = p_ret->m_p_right = NULL;\n \n-  try\n+  __try\n     {\n       p_ret->m_p_left = recursive_copy_node(p_nd->m_p_left);\n       p_ret->m_p_right = recursive_copy_node(p_nd->m_p_right);\n     }\n-  catch(...)\n+  __catch(...)\n     {\n       clear_imp(p_ret);\n       __throw_exception_again;"}, {"sha": "3cb485596310c826b2ce3fdc5c251679977c8faf", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconstructors_destructor_fn_imps.hpp?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -109,15 +109,15 @@ binary_heap_(const PB_DS_CLASS_C_DEC& other) :\n   const_iterator first_it = other.begin();\n   const_iterator last_it = other.end();\n \n-  try\n+  __try\n     {\n       while (first_it != last_it)\n         {\n \t  insert_value(*first_it, s_no_throw_copies_ind);\n \t  ++first_it;\n         }\n     }\n-  catch(...)\n+  __catch(...)\n     {\n       for (size_type i = 0; i < m_size; ++i)\n \terase_at(m_a_entries, i, s_no_throw_copies_ind);"}, {"sha": "c7875df229d478aa6b074b8161cd9f01447ba7b5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/erase_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ferase_fn_imps.hpp?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -52,7 +52,7 @@ clear()\n   for (size_type i = 0; i < m_size; ++i)\n     erase_at(m_a_entries, i, s_no_throw_copies_ind);\n \n-  try\n+  __try\n     {\n       const size_type actual_size = resize_policy::get_new_size_for_arbitrary(0);\n \n@@ -66,7 +66,7 @@ clear()\n \n       m_a_entries = a_entries;\n     }\n-  catch(...)\n+  __catch(...)\n     { }\n \n   m_size = 0;\n@@ -135,7 +135,7 @@ erase_if(Pred pred)\n   for (size_type i = left; i < m_size; ++i)\n     erase_at(m_a_entries, i, s_no_throw_copies_ind);\n \n-  try\n+  __try\n     {\n       const size_type actual_size =\n \tresize_policy::get_new_size_for_arbitrary(left);\n@@ -150,7 +150,7 @@ erase_if(Pred pred)\n \n       resize_policy::notify_arbitrary(m_actual_size);\n     }\n-  catch(...)\n+  __catch(...)\n     { };\n \n   m_size = left;\n@@ -197,7 +197,7 @@ resize_for_erase_if_needed()\n   if (!resize_policy::resize_needed_for_shrink(m_size))\n     return;\n \n-  try\n+  __try\n     {\n       const size_type new_actual_size =\n \tresize_policy::get_new_size_for_shrink();\n@@ -215,7 +215,7 @@ resize_for_erase_if_needed()\n \n       m_a_entries = a_new_entries;\n     }\n-  catch(...)\n+  __catch(...)\n     { }\n }\n "}, {"sha": "34259eab697096580146fe1b7610ceac2d703074", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/split_join_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fsplit_join_fn_imps.hpp?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -77,13 +77,13 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n   entry_pointer a_entries = NULL;\n   entry_pointer a_other_entries = NULL;\n \n-  try\n+  __try\n     {\n       a_entries = s_entry_allocator.allocate(actual_size);\n \n       a_other_entries = s_entry_allocator.allocate(other_actual_size);\n     }\n-  catch(...)\n+  __catch(...)\n     {\n       if (a_entries != NULL)\n \ts_entry_allocator.deallocate(a_entries, actual_size);\n@@ -137,12 +137,12 @@ join(PB_DS_CLASS_C_DEC& other)\n   entry_pointer a_entries = NULL;\n   entry_pointer a_other_entries = NULL;\n \n-  try\n+  __try\n     {\n       a_entries = s_entry_allocator.allocate(actual_size);\n       a_other_entries = s_entry_allocator.allocate(resize_policy::min_size);\n     }\n-  catch(...)\n+  __catch(...)\n     {\n       if (a_entries != NULL)\n \ts_entry_allocator.deallocate(a_entries, actual_size);"}, {"sha": "2593101f9e9c0aafd900e02a08a94ac09735e339", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -139,11 +139,11 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n {\n   initialize();\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-    try\n+    __try\n       {\n         copy_from_range(other.begin(), other.end());\n       }\n-    catch(...)\n+    __catch(...)\n       {\n         deallocate_all();\n         __throw_exception_again;"}, {"sha": "036f9b842efc8b19b51b185a841b4bd4ced96e65", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/resize_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -69,11 +69,11 @@ do_resize_if_needed_no_throw()\n   if (!resize_base::is_resize_needed())\n     return;\n \n-  try\n+  __try\n     {\n       resize_imp(resize_base::get_new_size(m_num_e, m_num_used_e));\n     }\n-  catch(...)\n+  __catch(...)\n     { }\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n@@ -94,13 +94,13 @@ resize_imp(size_type new_size)\n   // Following line might throw an exception.\n   ranged_hash_fn_base::notify_resized(new_size);\n \n-  try\n+  __try\n     {\n       // Following line might throw an exception.\n       a_p_entries_resized = s_entry_pointer_allocator.allocate(new_size);\n       m_num_e = new_size;\n     }\n-  catch(...)\n+  __catch(...)\n     {\n       ranged_hash_fn_base::notify_resized(old_size);\n       __throw_exception_again;"}, {"sha": "568c50991a50390b57b60c1e0c59a11bb808e40c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/debug_map_base.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fdebug_map_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fdebug_map_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fdebug_map_base.hpp?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -168,11 +168,11 @@ namespace __gnu_pbds\n \t  std::abort();\n \t}\n \n-      try\n+      __try\n \t{\n \t  m_key_set.push_back(r_key);\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  std::cerr << \"insert_new\" << r_key << std::endl;\n \t  std::abort();"}, {"sha": "3e8ae49d5ce13a4894a43e959b6ada245634f971", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -152,7 +152,7 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n   for (size_type i = 0; i < m_num_e; ++i)\n     m_entries[i].m_stat = (entry_status)empty_entry_status;\n \n-  try\n+  __try\n     {\n       for (size_type i = 0; i < m_num_e; ++i)\n         {\n@@ -161,7 +161,7 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n \t    new (m_entries + i) entry(other.m_entries[i]);\n         }\n     }\n-  catch(...)\n+  __catch(...)\n     {\n       deallocate_all();\n       __throw_exception_again;"}, {"sha": "ab6279f8907f2b4f0df492bd0bee6833129ccb59", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/resize_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_fn_imps.hpp?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -69,11 +69,11 @@ do_resize_if_needed_no_throw()\n   if (!resize_base::is_resize_needed())\n     return;\n \n-  try\n+  __try\n     {\n       resize_imp(resize_base::get_new_size(m_num_e, m_num_used_e));\n     }\n-  catch(...)\n+  __catch(...)\n     { }\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n@@ -104,11 +104,11 @@ resize_imp(size_type new_size)\n   for (size_type i = 0; i < m_num_e; ++i)\n     a_entries_resized[i].m_stat = empty_entry_status;\n \n-  try\n+  __try\n     {\n       resize_imp(a_entries_resized, old_size);\n     }\n-  catch(...)\n+  __catch(...)\n     {\n       erase_all_valid_entries(a_entries_resized, new_size);\n       m_num_e = old_size;"}, {"sha": "cd18a7b023b376e10d80b751b379308550334b96", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconstructors_destructor_fn_imps.hpp?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -122,11 +122,11 @@ recursive_copy_node(const_node_pointer p_nd)\n \n   node_pointer p_ret = s_node_allocator.allocate(1);\n \n-  try\n+  __try\n     {\n       new (p_ret) node(*p_nd);\n     }\n-  catch(...)\n+  __catch(...)\n     {\n       s_node_allocator.deallocate(p_ret, 1);\n       __throw_exception_again;\n@@ -135,12 +135,12 @@ recursive_copy_node(const_node_pointer p_nd)\n   p_ret->m_p_l_child = p_ret->m_p_next_sibling =\n     p_ret->m_p_prev_or_parent = NULL;\n \n-  try\n+  __try\n     {\n       p_ret->m_p_l_child = recursive_copy_node(p_nd->m_p_l_child);\n       p_ret->m_p_next_sibling = recursive_copy_node(p_nd->m_p_next_sibling);\n     }\n-  catch(...)\n+  __catch(...)\n     {\n       clear_imp(p_ret);\n       __throw_exception_again;"}, {"sha": "3be4df422d777923e9b92a9d71b42b1369f76c23", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fconstructor_destructor_fn_imps.hpp?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -93,7 +93,7 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n #endif\n m_p_l(NULL)\n {\n-  try\n+  __try\n     {\n       for (const_iterator it = other.begin(); it != other.end(); ++it)\n         {\n@@ -104,7 +104,7 @@ m_p_l(NULL)\n \t  m_p_l = p_l;\n         }\n     }\n-  catch(...)\n+  __catch(...)\n     {\n       deallocate_all();\n       __throw_exception_again;"}, {"sha": "40bd0a0d9ecb57b1e5b5eef21e8a0f561f277691", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconstructors_destructor_fn_imps.hpp?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -96,11 +96,11 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n         _GLIBCXX_DEBUG_ONLY(assert_valid();)\n         return;\n       }\n-  try\n+  __try\n     {\n       m_p_head->m_p_parent = recursive_copy_node(other.m_p_head->m_p_parent);\n     }\n-  catch(...)\n+  __catch(...)\n     {\n       s_head_allocator.deallocate(m_p_head, 1);\n       __throw_exception_again;\n@@ -193,13 +193,13 @@ recursive_copy_node(const_node_pointer p_other_nd)\n     p_other_internal_nd->begin();\n \n   internal_node_pointer p_ret;\n-  try\n+  __try\n     {\n       while (child_it != p_other_internal_nd->end())\n \ta_p_children[child_i++] = recursive_copy_node(*(child_it++));\n       p_ret = s_internal_node_allocator.allocate(1);\n     }\n-  catch(...)\n+  __catch(...)\n     {\n       while (child_i-- > 0)\n \tclear_imp(a_p_children[child_i]);"}, {"sha": "b727518a0dcd202a57c399061783a9c00ea47deb", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/split_join_branch_bag.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_join_branch_bag.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_join_branch_bag.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_join_branch_bag.hpp?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -60,11 +60,11 @@ class split_join_branch_bag\n   add_branch()\n   {\n     internal_node_pointer p_nd = s_internal_node_allocator.allocate(1);\n-    try\n+    __try\n       {\n \tm_bag.push_back(p_nd);\n       }\n-    catch(...)\n+    __catch(...)\n       {\n \ts_internal_node_allocator.deallocate(p_nd, 1);\n \t__throw_exception_again;"}, {"sha": "594965f00b8cbb82bbfa7ab89ea4be9d24ada1c1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/hash_load_check_resize_trigger_imp.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_imp.hpp?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -259,13 +259,13 @@ set_loads(std::pair<float, float> load_pair)\n   const size_type old_next_grow_size = m_next_grow_size;\n   const bool old_resize_needed = m_resize_needed;\n \n-  try\n+  __try\n     {\n       m_load_min = load_pair.first;\n       m_load_max = load_pair.second;\n       do_resize(static_cast<size_type>(size_base::get_size() / ((m_load_min + m_load_max) / 2)));\n     }\n-  catch(...)\n+  __catch(...)\n     {\n       m_load_min = old_load_min;\n       m_load_max = old_load_max;"}, {"sha": "706af42d004e290966166c4377feb3381c075ac6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/hash_standard_resize_policy_imp.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_standard_resize_policy_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_standard_resize_policy_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_standard_resize_policy_imp.hpp?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -205,16 +205,16 @@ resize(size_type new_size)\n     --actual_size;\n \n   const size_type old_size = m_size;\n-  try\n+  __try\n     {\n       do_resize(actual_size - 1);\n     }\n-  catch(insert_error& )\n+  __catch(insert_error& )\n     {\n       m_size = old_size;\n       __throw_resize_error();\n     }\n-  catch(...)\n+  __catch(...)\n     {\n       m_size = old_size;\n       __throw_exception_again;"}, {"sha": "ff2c9a8eca9c62ceb7bf992fff3b3fd4205fb152", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // Reference-counted versatile string base -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -515,7 +515,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  }\n \t_Rep* __r = _Rep::_S_create(__len, size_type(0), __a);\n \t_S_copy(__r->_M_refdata(), __buf, __len);\n-\ttry\n+\t__try\n \t  {\n \t    while (__beg != __end)\n \t      {\n@@ -531,7 +531,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t++__beg;\n \t      }\n \t  }\n-\tcatch(...)\n+\t__catch(...)\n \t  {\n \t    __r->_M_destroy(__a);\n \t    __throw_exception_again;\n@@ -559,9 +559,9 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t\t\t\t\t\t\t      __end));\n \t// Check for out_of_range and length_error exceptions.\n \t_Rep* __r = _Rep::_S_create(__dnew, size_type(0), __a);\n-\ttry\n+\t__try\n \t  { _S_copy_chars(__r->_M_refdata(), __beg, __end); }\n-\tcatch(...)\n+\t__catch(...)\n \t  {\n \t    __r->_M_destroy(__a);\n \t    __throw_exception_again;"}, {"sha": "642f927c96142db691fb19508e3f0f2bfa32deaf", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // SGI's rope class -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -1689,9 +1689,9 @@ protected:\n \t\n \t__uninitialized_copy_n_a(__s, __size, __buf, __a);\n \t_S_cond_store_eos(__buf[__size]);\n-\ttry\n+\t__try\n \t  { return _S_new_RopeLeaf(__buf, __size, __a); }\n-\tcatch(...)\n+\t__catch(...)\n \t  {\n \t    _RopeRep::__STL_FREE_STRING(__buf, __size, __a);\n \t    __throw_exception_again;\n@@ -1845,12 +1845,12 @@ protected:\n \t_CharT* __buf = this->_Data_allocate(_S_rounded_up_size(1));\n \t\n \t_M_get_allocator().construct(__buf, __c);\n-\ttry\n+\t__try\n \t  {\n \t    this->_M_tree_ptr = _S_new_RopeLeaf(__buf, 1,\n \t\t\t\t\t\t_M_get_allocator());\n \t  }\n-\tcatch(...)\n+\t__catch(...)\n \t  {\n \t    _RopeRep::__STL_FREE_STRING(__buf, 1, _M_get_allocator());\n \t    __throw_exception_again;\n@@ -1924,13 +1924,13 @@ protected:\n \t_RopeRep* __old = this->_M_tree_ptr;\n \t_RopeRep* __left =\n \t  __STL_ROPE_FROM_UNOWNED_CHAR_PTR(&__x, 1, _M_get_allocator());\n-\ttry\n+\t__try\n \t  {\n \t    this->_M_tree_ptr = _S_concat(__left, this->_M_tree_ptr);\n \t    _S_unref(__old);\n \t    _S_unref(__left);\n \t  }\n-\tcatch(...)\n+\t__catch(...)\n \t  {\n \t    _S_unref(__left);\n \t    __throw_exception_again;"}, {"sha": "8b330801366c200f3431cbfebd5aa2e9d06ee3e6", "filename": "libstdc++-v3/include/ext/ropeimpl.h", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // SGI's rope class implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -439,12 +439,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       uninitialized_copy_n(__r->_M_data, __old_len, __new_data);\n       uninitialized_copy_n(__iter, __len, __new_data + __old_len);\n       _S_cond_store_eos(__new_data[__old_len + __len]);\n-      try\n+      __try\n \t{\n \t  __result = _S_new_RopeLeaf(__new_data, __old_len + __len,\n \t\t\t\t     __r->_M_get_allocator());\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  _RopeRep::__STL_FREE_STRING(__new_data, __old_len + __len,\n \t\t\t\t      __r->_M_get_allocator());\n@@ -507,12 +507,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t{\n \t  _RopeRep* __balanced;\n \n-\t  try\n+\t  __try\n \t    {\n \t      __balanced = _S_balance(__result);\n \t      __result->_M_unref_nonnil();\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    {\n \t      _C_deallocate(__result,1);\n \t      __throw_exception_again;\n@@ -558,9 +558,9 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t      _RopeRep* __nright =\n \t\t_S_leaf_concat_char_iter((_RopeLeaf*)__right, __s, __slen);\n \t      __left->_M_ref_nonnil();\n-\t      try\n+\t      __try\n \t\t{ __result = _S_tree_concat(__left, __nright); }\n-\t      catch(...)\n+\t      __catch(...)\n \t\t{\n \t\t  _S_unref(__left);\n \t\t  _S_unref(__nright);\n@@ -571,12 +571,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t}\n       _RopeRep* __nright =\n \t__STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __slen, __r->_M_get_allocator());\n-      try\n+      __try\n \t{\n \t  __r->_M_ref_nonnil();\n \t  __result = _S_tree_concat(__r, __nright);\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  _S_unref(__r);\n \t  _S_unref(__nright);\n@@ -638,9 +638,9 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       _RopeRep* __right =\n \t__STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __slen, __r->_M_get_allocator());\n       __r->_M_ref_nonnil();\n-      try\n+      __try\n \t{ __result = _S_tree_concat(__r, __right); }\n-      catch(...)\n+      __catch(...)\n \t{\n \t  _S_unref(__r);\n \t  _S_unref(__right);\n@@ -690,9 +690,9 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t\t\t\t\t\t      _M_data,\n \t\t\t\t\t\t\t      __right->_M_size);\n \t\t  __leftleft->_M_ref_nonnil();\n-\t\t  try\n+\t\t  __try\n \t\t    { return(_S_tree_concat(__leftleft, __rest)); }\n-\t\t  catch(...)\n+\t\t  __catch(...)\n \t\t    {\n \t\t      _S_unref(__leftleft);\n \t\t      _S_unref(__rest);\n@@ -703,9 +703,9 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t}\n       __left->_M_ref_nonnil();\n       __right->_M_ref_nonnil();\n-      try\n+      __try\n \t{ return(_S_tree_concat(__left, __right)); }\n-      catch(...)\n+      __catch(...)\n \t{\n \t  _S_unref(__left);\n \t  _S_unref(__right);\n@@ -818,9 +818,9 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t      goto lazy;\n \t    __section = (_CharT*)\n \t      _Data_allocate(_S_rounded_up_size(__result_len));\n-\t    try\n+\t    __try\n \t      {\t(*(__f->_M_fn))(__start, __result_len, __section); }\n-\t    catch(...)\n+\t    __catch(...)\n \t      {\n \t\t_RopeRep::__STL_FREE_STRING(__section, __result_len,\n \t\t\t\t\t    __base->_M_get_allocator());\n@@ -965,13 +965,13 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t      bool __result;\n \t      _CharT* __buffer =\n \t\t(_CharT*)_Alloc().allocate(__len * sizeof(_CharT));\n-\t      try\n+\t      __try\n \t\t{\n \t\t  (*(__f->_M_fn))(__begin, __len, __buffer);\n \t\t  __result = __c(__buffer, __len);\n                   _Alloc().deallocate(__buffer, __len * sizeof(_CharT));\n                 }\n-\t      catch(...)\n+\t      __catch(...)\n \t\t{\n \t\t  _Alloc().deallocate(__buffer, __len * sizeof(_CharT));\n \t\t  __throw_exception_again;\n@@ -1027,7 +1027,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n       if (!__is_simple)\n \t__o.width(__w / __rope_len);\n-      try\n+      __try\n \t{\n \t  if (__is_simple && !__left && __pad_len > 0)\n \t    _Rope_fill(__o, __pad_len);\n@@ -1037,7 +1037,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  if (!__is_simple)\n \t    __o.width(__w);\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  if (!__is_simple)\n \t    __o.width(__w);\n@@ -1216,7 +1216,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       \n       for (__i = 0; __i <= int(__detail::_S_max_rope_depth); ++__i)\n \t__forest[__i] = 0;\n-      try\n+      __try\n \t{\n \t  _S_add_to_forest(__r, __forest);\n \t  for (__i = 0; __i <= int(__detail::_S_max_rope_depth); ++__i)\n@@ -1232,7 +1232,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n #endif\n \t      }\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  for(__i = 0; __i <= int(__detail::_S_max_rope_depth); __i++)\n \t    _S_unref(__forest[__i]);\n@@ -1552,10 +1552,10 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  __uninitialized_fill_n_a(__rest_buffer, __rest, __c,\n \t\t\t\t   _M_get_allocator());\n \t  _S_cond_store_eos(__rest_buffer[__rest]);\n-\t  try\n+\t  __try\n \t    { __remainder = _S_new_RopeLeaf(__rest_buffer, __rest,\n \t\t\t\t\t    _M_get_allocator()); }\n-\t  catch(...)\n+\t  __catch(...)\n \t    {\n \t      _RopeRep::__STL_FREE_STRING(__rest_buffer, __rest,\n \t\t\t\t\t  _M_get_allocator());\n@@ -1572,13 +1572,13 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  __uninitialized_fill_n_a(__base_buffer, __exponentiate_threshold, __c,\n \t\t\t\t   _M_get_allocator());\n \t  _S_cond_store_eos(__base_buffer[__exponentiate_threshold]);\n-\t  try\n+\t  __try\n \t    {\n \t      __base_leaf = _S_new_RopeLeaf(__base_buffer,\n \t\t\t\t\t    __exponentiate_threshold,\n \t\t\t\t\t    _M_get_allocator());\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    {\n \t      _RopeRep::__STL_FREE_STRING(__base_buffer,\n \t\t\t\t\t  __exponentiate_threshold,"}, {"sha": "ea6c3c076e950c1f3aa1afcecf3d33bcbd7be1a2", "filename": "libstdc++-v3/include/ext/slist", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,7 @@\n // Singly-linked list implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004, 2005, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004, 2005, 2007, 2008, 2009\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -327,12 +328,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       _M_create_node(const value_type& __x)\n       {\n \t_Node* __node = this->_M_get_node();\n-\ttry\n+\t__try\n \t  {\n \t    get_allocator().construct(&__node->_M_data, __x);\n \t    __node->_M_next = 0;\n \t  }\n-\tcatch(...)\n+\t__catch(...)\n \t  {\n \t    this->_M_put_node(__node);\n \t    __throw_exception_again;\n@@ -344,12 +345,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       _M_create_node()\n       {\n \t_Node* __node = this->_M_get_node();\n-\ttry\n+\t__try\n \t  {\n \t    get_allocator().construct(&__node->_M_data, value_type());\n \t    __node->_M_next = 0;\n \t  }\n-\tcatch(...)\n+\t__catch(...)\n \t  {\n \t    this->_M_put_node(__node);\n \t    __throw_exception_again;"}, {"sha": "a50f48f998507f24b1ef7a00b107f2b91a887247", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // Short-string-optimized versatile string base -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -398,7 +398,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t    ++__beg;\n \t  }\n \t\n-\ttry\n+\t__try\n \t  {\n \t    while (__beg != __end)\n \t      {\n@@ -416,7 +416,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t++__beg;\n \t      }\n \t  }\n-\tcatch(...)\n+\t__catch(...)\n \t  {\n \t    _M_dispose();\n \t    __throw_exception_again;\n@@ -446,9 +446,9 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  }\n \n \t// Check for out_of_range and length_error exceptions.\n-\ttry\n+\t__try\n \t  { _S_copy_chars(_M_data(), __beg, __end); }\n-\tcatch(...)\n+\t__catch(...)\n \t  {\n \t    _M_dispose();\n \t    __throw_exception_again;"}, {"sha": "1ba2321281ab2a69041e5cabc9e2a2163e3f78ed", "filename": "libstdc++-v3/include/ext/vstring.tcc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // Versatile string -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -567,7 +567,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typename __istream_type::sentry __cerb(__in, false);\n       if (__cerb)\n \t{\n-\t  try\n+\t  __try\n \t    {\n \t      // Avoid reallocation for common case.\n \t      __str.erase();\n@@ -600,12 +600,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t__err |= __ios_base::eofbit;\n \t      __in.width(0);\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      __in._M_setstate(__ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    {\n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 91. Description of operator>> and getline() for string<>\n@@ -641,7 +641,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typename __istream_type::sentry __cerb(__in, true);\n       if (__cerb)\n \t{\n-\t  try\n+\t  __try\n \t    {\n \t      // Avoid reallocation for common case.\n \t      __str.erase();\n@@ -676,12 +676,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      else\n \t\t__err |= __ios_base::failbit;\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      __in._M_setstate(__ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    {\n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 91. Description of operator>> and getline() for string<>"}, {"sha": "f8f001f8b6f74ea3e47c48e9257c06975b779630", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // <bitset> -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -1326,7 +1326,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       typename __istream_type::sentry __sentry(__is);\n       if (__sentry)\n \t{\n-\t  try\n+\t  __try\n \t    {\n \t      for (size_t __i = _Nb; __i > 0; --__i)\n \t\t{\n@@ -1355,12 +1355,12 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t    }\n \t\t}\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      __is._M_setstate(__ios_base::badbit);\t\t\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { __is._M_setstate(__ios_base::badbit); }\n \t}\n "}, {"sha": "e5f35e291118d40e9aae6b0580119f0a9f64461d", "filename": "libstdc++-v3/include/tr1/hypergeometric.tcc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhypergeometric.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhypergeometric.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhypergeometric.tcc?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // Special functions -*- C++ -*-\n \n-// Copyright (C) 2006, 2007, 2008\n+// Copyright (C) 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -477,13 +477,13 @@ namespace tr1\n \n               bool __ok_d1 = true;\n               _Tp __lng_ad, __lng_ad1, __lng_bd1;\n-              try\n+              __try\n                 {\n                   __lng_ad = __log_gamma(__ad);\n                   __lng_ad1 = __log_gamma(__a + __d1);\n                   __lng_bd1 = __log_gamma(__b + __d1);\n                 }\n-              catch(...)\n+              __catch(...)\n                 {\n                   __ok_d1 = false;\n                 }\n@@ -525,12 +525,12 @@ namespace tr1\n           // Evaluate F2.\n           bool __ok_d2 = true;\n           _Tp __lng_ad2, __lng_bd2;\n-          try\n+          __try\n             {\n               __lng_ad2 = __log_gamma(__a + __d2);\n               __lng_bd2 = __log_gamma(__b + __d2);\n             }\n-          catch(...)\n+          __catch(...)\n             {\n               __ok_d2 = false;\n             }\n@@ -600,29 +600,29 @@ namespace tr1\n           bool __ok1 = true;\n           _Tp __sgn_g1ca = _Tp(0), __ln_g1ca = _Tp(0);\n           _Tp __sgn_g1cb = _Tp(0), __ln_g1cb = _Tp(0);\n-          try\n+          __try\n             {\n               __sgn_g1ca = __log_gamma_sign(__c - __a);\n               __ln_g1ca = __log_gamma(__c - __a);\n               __sgn_g1cb = __log_gamma_sign(__c - __b);\n               __ln_g1cb = __log_gamma(__c - __b);\n             }\n-          catch(...)\n+          __catch(...)\n             {\n               __ok1 = false;\n             }\n \n           bool __ok2 = true;\n           _Tp __sgn_g2a = _Tp(0), __ln_g2a = _Tp(0);\n           _Tp __sgn_g2b = _Tp(0), __ln_g2b = _Tp(0);\n-          try\n+          __try\n             {\n               __sgn_g2a = __log_gamma_sign(__a);\n               __ln_g2a = __log_gamma(__a);\n               __sgn_g2b = __log_gamma_sign(__b);\n               __ln_g2b = __log_gamma(__b);\n             }\n-          catch(...)\n+          __catch(...)\n             {\n               __ok2 = false;\n             }"}, {"sha": "a21561433d906b16852c838c9064be58a8e09192", "filename": "libstdc++-v3/include/tr1/shared_ptr.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // <tr1/shared_ptr.h> -*- C++ -*-\n \n-// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -110,13 +110,13 @@ namespace tr1\n       template<typename _Ptr>\n         __shared_count(_Ptr __p) : _M_pi(0)\n         {\n-\t  try\n+\t  __try\n \t    {\n \t      typedef typename std::tr1::remove_pointer<_Ptr>::type _Tp;\n \t      _M_pi = new _Sp_counted_base_impl<_Ptr, _Sp_deleter<_Tp>, _Lp>(\n \t          __p, _Sp_deleter<_Tp>());\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    {\n \t      delete __p;\n \t      __throw_exception_again;\n@@ -126,11 +126,11 @@ namespace tr1\n       template<typename _Ptr, typename _Deleter>\n         __shared_count(_Ptr __p, _Deleter __d) : _M_pi(0)\n         {\n-\t  try\n+\t  __try\n \t    {\n \t      _M_pi = new _Sp_counted_base_impl<_Ptr, _Deleter, _Lp>(__p, __d);\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    {\n \t      __d(__p); // Call _Deleter on __p.\n \t      __throw_exception_again;\n@@ -709,11 +709,11 @@ namespace tr1\n \tif (expired())\n \t  return __shared_ptr<element_type, _Lp>();\n \n-\ttry\n+\t__try\n \t  {\n \t    return __shared_ptr<element_type, _Lp>(*this);\n \t  }\n-\tcatch(const bad_weak_ptr&)\n+\t__catch(const bad_weak_ptr&)\n \t  {\n \t    // Q: How can we get here?\n \t    // A: Another thread may have invalidated r after the\n@@ -958,11 +958,11 @@ namespace tr1\n \tif (this->expired())\n \t  return shared_ptr<_Tp>();\n \n-\ttry\n+\t__try\n \t  {\n \t    return shared_ptr<_Tp>(*this);\n \t  }\n-\tcatch(const bad_weak_ptr&)\n+\t__catch(const bad_weak_ptr&)\n \t  {\n \t    return shared_ptr<_Tp>();\n \t  }"}, {"sha": "c8651088cb231ea1c9b2f10c52cebc6d49cb3550", "filename": "libstdc++-v3/include/tr1_impl/hashtable", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // Internal header for TR1 unordered_set and unordered_map -*- C++ -*-\n \n-// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -482,7 +482,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     _M_allocate_node(const value_type& __v)\n     {\n       _Node* __n = _M_node_allocator.allocate(1);\n-      try\n+      __try\n \t{\n #ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n \t  _M_node_allocator.construct(__n, __v);\n@@ -492,7 +492,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \t  __n->_M_next = 0;\n \t  return __n;\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  _M_node_allocator.deallocate(__n, 1);\n \t  __throw_exception_again;\n@@ -624,12 +624,12 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \t\t\t\t\t\t       __distance_fw(__f,\n \t\t\t\t\t\t\t\t     __l)));\n \t_M_buckets = _M_allocate_buckets(_M_bucket_count);\n-\ttry\n+\t__try\n \t  {\n \t    for (; __f != __l; ++__f)\n \t      this->insert(*__f);\n \t  }\n-\tcatch(...)\n+\t__catch(...)\n \t  {\n \t    clear();\n \t    _M_deallocate_buckets(_M_buckets, _M_bucket_count);\n@@ -654,7 +654,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       _M_rehash_policy(__ht._M_rehash_policy)\n     {\n       _M_buckets = _M_allocate_buckets(_M_bucket_count);\n-      try\n+      __try\n \t{\n \t  for (size_type __i = 0; __i < __ht._M_bucket_count; ++__i)\n \t    {\n@@ -669,7 +669,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \t\t}\n \t    }\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  clear();\n \t  _M_deallocate_buckets(_M_buckets, _M_bucket_count);\n@@ -946,7 +946,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       // do a rehash if the allocation throws.\n       _Node* __new_node = _M_allocate_node(__v);\n \n-      try\n+      __try\n \t{\n \t  if (__do_rehash.first)\n \t    {\n@@ -961,7 +961,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \t  ++_M_element_count;\n \t  return iterator(__new_node, _M_buckets + __n);\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  _M_deallocate_node(__new_node);\n \t  __throw_exception_again;\n@@ -1239,7 +1239,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     _M_rehash(size_type __n)\n     {\n       _Node** __new_array = _M_allocate_buckets(__n);\n-      try\n+      __try\n \t{\n \t  for (size_type __i = 0; __i < _M_bucket_count; ++__i)\n \t    while (_Node* __p = _M_buckets[__i])\n@@ -1253,7 +1253,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \t  _M_bucket_count = __n;\n \t  _M_buckets = __new_array;\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  // A failure here means that a hash function threw an exception.\n \t  // We can't restore the previous state without calling the hash"}, {"sha": "1f64cfde224aeb93e9d37264d553b6b1fd005b74", "filename": "libstdc++-v3/libsupc++/eh_call.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_call.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_call.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_call.cc?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,5 +1,6 @@\n // -*- C++ -*- Helpers for calling unextected and terminate\n-// Copyright (C) 2001, 2002, 2003, 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n //\n@@ -108,14 +109,14 @@ __cxa_call_unexpected(void* exc_obj_in)\n   } end_catch_protect_obj;\n \n \n-  try \n+  __try \n     { \n       if (foreign_exception)\n \tstd::unexpected();\n       else\n \t__unexpected(unexpectedHandler);\n     }\n-  catch(...) \n+  __catch(...) \n     {\n       /* See if the new exception matches the rtti list.  */\n       if (foreign_exception)"}, {"sha": "177fe417584d248f41ac7d7145a2ea4a1ef72bd7", "filename": "libstdc++-v3/libsupc++/eh_personality.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,5 +1,6 @@\n // -*- C++ -*- The GNU C++ exception personality routine.\n-// Copyright (C) 2001, 2002, 2003, 2006, 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n //\n@@ -664,9 +665,9 @@ PERSONALITY_FUNCTION (int version,\n \tstd::terminate ();\n       else if (handler_switch_value < 0)\n \t{\n-\t  try \n+\t  __try \n \t    { std::unexpected (); } \n-\t  catch(...) \n+\t  __catch(...) \n \t    { std::terminate (); }\n \t}\n     }\n@@ -753,9 +754,9 @@ __cxa_call_unexpected (void *exc_obj_in)\n   xh_terminate_handler = xh->terminateHandler;\n   info.ttype_base = (_Unwind_Ptr) xh->catchTemp;\n \n-  try \n+  __try \n     { __unexpected (xh->unexpectedHandler); } \n-  catch(...) \n+  __catch(...) \n     {\n       // Get the exception thrown from unexpected.\n "}, {"sha": "342806bbb863a1dd37e79e13b99187f24c137a07", "filename": "libstdc++-v3/libsupc++/exception_defines.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_defines.h?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,7 @@\n // -fno-exceptions Support -*- C++ -*-\n \n-// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2006, 2007, 2008, 2009\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -40,11 +41,13 @@\n \n #ifndef __EXCEPTIONS\n // Iff -fno-exceptions, transform error handling code to work without it.\n-# define try      if (true)\n-# define catch(X) if (false)\n+# define __try      if (true)\n+# define __catch(X) if (false)\n # define __throw_exception_again\n #else\n // Else proceed normally.\n+# define __try      try\n+# define __catch(X) catch(X)\n # define __throw_exception_again throw\n #endif\n "}, {"sha": "ae07db5f794950072b97d3e4c3b46d0474095c7e", "filename": "libstdc++-v3/libsupc++/exception_ptr.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // Exception Handling support header (exception_ptr class) for -*- C++ -*-\n \n-// Copyright (C) 2008 Free Software Foundation\n+// Copyright (C) 2008, 2009 Free Software Foundation\n //\n // This file is part of GCC.\n //\n@@ -39,6 +39,7 @@\n #pragma GCC visibility push(default)\n \n #include <bits/c++config.h>\n+#include <exception_defines.h>\n \n #if !defined(_GLIBCXX_ATOMIC_BUILTINS_4)\n #  error This platform does not support exception propagation.\n@@ -152,11 +153,11 @@ namespace std\n   template <class _Ex>\n   exception_ptr copy_exception(_Ex __ex) throw()\n   {\n-    try\n+    __try\n       {\n         throw __ex;\n       }\n-    catch(...)\n+    __catch(...)\n       {\n         return current_exception ();\n       }"}, {"sha": "1d30b96a701a41ca68f6c9c84a17cc1d060d0fb6", "filename": "libstdc++-v3/src/bitmap_allocator.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,7 @@\n // Bitmap Allocator. Out of line function definitions. -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -75,12 +76,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  {\n \t    size_t* __ret = 0;\n \t    --__ctr;\n-\t    try\n+\t    __try\n \t      {\n \t\t__ret = reinterpret_cast<size_t*>\n \t\t  (::operator new(__sz + sizeof(size_t)));\n \t      }\n-\t    catch(...)\n+\t    __catch(...)\n \t      {\n \t\tthis->_M_clear();\n \t      }"}, {"sha": "13f13cfcc982f0212d3454f519fc44ccb384ad37", "filename": "libstdc++-v3/src/compatibility.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,6 @@\n // Compatibility symbols for previous versions -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -70,7 +70,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (__cerb && __n > 0)\n \t{\n \t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n+\t  __try\n \t    {\n \t      const int_type __eof = traits_type::eof();\n \t      __streambuf_type* __sb = this->rdbuf();\n@@ -115,12 +115,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { this->_M_setstate(ios_base::badbit); }\n \t  if (__err)\n \t    this->setstate(__err);\n@@ -142,7 +142,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (__cerb && __n > 0)\n \t{\n \t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n+\t  __try\n \t    {\n \t      const int_type __eof = traits_type::eof();\n \t      __streambuf_type* __sb = this->rdbuf();\n@@ -186,12 +186,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { this->_M_setstate(ios_base::badbit); }\n \t  if (__err)\n \t    this->setstate(__err);"}, {"sha": "ec07ef0688877686a84abc939b68afa444520ce2", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,7 @@\n // Iostreams base classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n+// 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -125,9 +126,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tif (__ix < numeric_limits<int>::max())\n \t  {\n \t    __newsize = __ix + 1;\n-\t    try\n+\t    __try\n \t      { __words = new _Words[__newsize]; }\n-\t    catch(...)\n+\t    __catch(...)\n \t      {\n \t\t_M_streambuf_state |= badbit;\n \t\tif (_M_streambuf_state & _M_exception)\n@@ -170,9 +171,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     _Callback_list* __p = _M_callbacks;\n     while (__p)\n       {\n-\ttry \n+\t__try \n \t  { (*__p->_M_fn) (__e, *this, __p->_M_index); } \n-\tcatch(...) \n+\t__catch(...) \n \t  { }\n \t__p = __p->_M_next;\n       }"}, {"sha": "9db8f7d563461a41e92a0a1aa1acd451fef7e565", "filename": "libstdc++-v3/src/ios_init.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Fsrc%2Fios_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Fsrc%2Fios_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios_init.cc?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,7 @@\n // Iostreams base classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n+// 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -129,7 +130,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     if (__gnu_cxx::__exchange_and_add_dispatch(&_S_refcount, -1) == 2)\n       {\n \t// Catch any exceptions thrown by basic_ostream::flush()\n-\ttry\n+\t__try\n \t  { \n \t    // Flush standard output streams as required by 27.4.2.1.6\n \t    cout.flush();\n@@ -142,7 +143,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    wclog.flush();    \n #endif\n \t  }\n-\tcatch(...)\n+\t__catch(...)\n \t  { }\n       }\n   } "}, {"sha": "a5b7f605fe8e67494bc4a6a3dc402406582e6f47", "filename": "libstdc++-v3/src/istream.cc", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,6 +1,7 @@\n // Input streams -*- C++ -*-\n \n-// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -45,7 +46,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sentry __cerb(*this, true);\n       if (__cerb)\n \t{\n-          try\n+          __try\n \t    {\n \t      const int_type __idelim = traits_type::to_int_type(__delim);\n \t      const int_type __eof = traits_type::eof();\n@@ -91,12 +92,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      else\n \t\t__err |= ios_base::failbit;\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { this->_M_setstate(ios_base::badbit); }\n \t}\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -123,7 +124,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (__cerb && __n > 0)\n \t{\n \t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n+\t  __try\n \t    {\n \t      const char_type __cdelim = traits_type::to_char_type(__delim);\t      \n \t      const int_type __eof = traits_type::eof();\n@@ -182,12 +183,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t  __sb->sbumpc();\n \t\t}\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { this->_M_setstate(ios_base::badbit); }\n \t  if (__err)\n \t    this->setstate(__err);\n@@ -211,7 +212,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __istream_type::sentry __cerb(__in, false);\n       if (__cerb)\n \t{\n-\t  try\n+\t  __try\n \t    {\n \t      // Figure out how many characters to extract.\n \t      streamsize __num = __in.width();\n@@ -261,12 +262,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      *__s = __char_type();\n \t      __in.width(0);\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      __in._M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { __in._M_setstate(ios_base::badbit); }\n \t}\n       if (!__extracted)\n@@ -294,7 +295,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __istream_type::sentry __cerb(__in, false);\n       if (__cerb)\n \t{\n-\t  try\n+\t  __try\n \t    {\n \t      __str.erase();\n \t      const streamsize __w = __in.width();\n@@ -336,12 +337,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t__err |= ios_base::eofbit;\n \t      __in.width(0);\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      __in._M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    {\n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 91. Description of operator>> and getline() for string<>\n@@ -376,7 +377,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __istream_type::sentry __cerb(__in, true);\n       if (__cerb)\n \t{\n-\t  try\n+\t  __try\n \t    {\n \t      __str.erase();\n \t      const __int_type __idelim = __traits_type::to_int_type(__delim);\n@@ -421,12 +422,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      else\n \t\t__err |= ios_base::failbit;\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      __in._M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    {\n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 91. Description of operator>> and getline() for string<>\n@@ -452,7 +453,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sentry __cerb(*this, true);\n       if (__cerb)\n \t{\n-          try\n+          __try\n \t    {\n \t      const int_type __idelim = traits_type::to_int_type(__delim);\n \t      const int_type __eof = traits_type::eof();\n@@ -498,12 +499,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      else\n \t\t__err |= ios_base::failbit;\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { this->_M_setstate(ios_base::badbit); }\n \t}\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -530,7 +531,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (__cerb && __n > 0)\n \t{\n \t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n+\t  __try\n \t    {\n \t      const char_type __cdelim = traits_type::to_char_type(__delim);\t      \n \t      const int_type __eof = traits_type::eof();\n@@ -589,12 +590,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t  __sb->sbumpc();\n \t\t}\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      this->_M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    { this->_M_setstate(ios_base::badbit); }\n \t  if (__err)\n \t    this->setstate(__err);\n@@ -622,7 +623,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __istream_type::sentry __cerb(__in, true);\n       if (__cerb)\n \t{\n-\t  try\n+\t  __try\n \t    {\n \t      __str.erase();\n \t      const __int_type __idelim = __traits_type::to_int_type(__delim);\n@@ -667,12 +668,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      else\n \t\t__err |= ios_base::failbit;\n \t    }\n-\t  catch(__cxxabiv1::__forced_unwind&)\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n \t    {\n \t      __in._M_setstate(ios_base::badbit);\n \t      __throw_exception_again;\n \t    }\n-\t  catch(...)\n+\t  __catch(...)\n \t    {\n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 91. Description of operator>> and getline() for string<>"}, {"sha": "c87fcc935939f2179ec6b9a802571ee1a2322671", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,5 +1,5 @@\n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n-// 2009\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n+// 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -256,7 +256,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   : _M_refcount(__refs), _M_facets(0), _M_facets_size(__imp._M_facets_size),\n   _M_caches(0), _M_names(0)\n   {\n-    try\n+    __try\n       {\n \t_M_facets = new const facet*[_M_facets_size];\n \tfor (size_t __i = 0; __i < _M_facets_size; ++__i)\n@@ -285,7 +285,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    std::memcpy(_M_names[__l], __imp._M_names[__l], __len);\n \t  }\n       }\n-    catch(...)\n+    __catch(...)\n       {\n \tthis->~_Impl();\n \t__throw_exception_again;\n@@ -337,11 +337,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    // New cache array.\n \t    const facet** __oldc = _M_caches;\n \t    const facet** __newc;\n-\t    try\n+\t    __try\n \t      {\n \t\t__newc = new const facet*[__new_size];\n \t      }\n-\t    catch(...)\n+\t    __catch(...)\n \t      {\n \t\tdelete [] __newf;\n \t\t__throw_exception_again;"}, {"sha": "875dbd4a3e16d6f11b47afcdfe974d2ce85a8c40", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -1,5 +1,5 @@\n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008\n+// 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -166,9 +166,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     __cat = _S_normalize_category(__cat);  \n     _M_impl = new _Impl(*__base._M_impl, 1);  \n \n-    try \n+    __try \n       { _M_impl->_M_replace_categories(__add._M_impl, __cat); }\n-    catch (...) \n+    __catch (...) \n       { \n \t_M_impl->_M_remove_reference(); \n \t__throw_exception_again;\n@@ -186,7 +186,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     __c_locale __cloc;\n     locale::facet::_S_create_c_locale(__cloc, __s);\n \n-    try\n+    __try\n       {\n \t_M_facets = new const facet*[_M_facets_size];\n \tfor (size_t __i = 0; __i < _M_facets_size; ++__i)\n@@ -254,7 +254,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\t  \n \tlocale::facet::_S_destroy_c_locale(__cloc);\n       }\n-    catch(...)\n+    __catch(...)\n       {\n \tlocale::facet::_S_destroy_c_locale(__cloc);\n \tthis->~_Impl();"}, {"sha": "58e60cfe26b47e50a7df9900099e7831e1122dcb", "filename": "libstdc++-v3/src/thread.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc?ref=bc2631e0c645a95ba0e7bbc85c3ac3033ab49b3e", "patch": "@@ -44,11 +44,11 @@ namespace std\n \t__thread_data_ptr __local_thread_data;\n \t__local_thread_data.swap(__t->_M_this_ptr);\n \n-\ttry\n+\t__try\n \t  {\n \t    __local_thread_data->_M_run();\n \t  }\n-\tcatch(...)\n+\t__catch(...)\n \t  {\n \t    std::terminate();\n \t  }"}]}