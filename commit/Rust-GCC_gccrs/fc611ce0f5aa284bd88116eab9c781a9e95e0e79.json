{"sha": "fc611ce0f5aa284bd88116eab9c781a9e95e0e79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM2MTFjZTBmNWFhMjg0YmQ4ODExNmVhYjljNzgxYTllOTVlMGU3OQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-04-26T15:43:50Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-04-26T15:43:50Z"}, "message": "cp-tree.h (TREE_READONLY_DECL_P): Use DECL_P.\n\n\t* cp-tree.h (TREE_READONLY_DECL_P): Use DECL_P.\n\t* init.c (decl_constant_value): Check TREE_READONLY_DECL_P.\n\t* call.c (convert_like_real): Don't test TREE_READONLY_DECL_P\n\tbefore calling decl_constant_value.\n\t* class.c (check_bitfield_decl): Likewise.\n\t* cvt.c (ocp_convert): Likewise.\n\t(convert): Likewise.\n\t* decl.c (compute_array_index_type): Likewise.\n\t(build_enumerator): Likewise.\n\t* decl2.c (check_cp_case_value): Likewise.\n\t* pt.c (convert_nontype_argument): Likewise.\n\t(tsubst): Likewise.\n\t* typeck.c (decay_conversion): Likewise.\n\t(build_compound_expr): Likewise.\n\t(build_reinterpret_cast): Likewise.\n\t(build_c_cast): Likewise.\n\t(convert_for_assignment): Likewise.\n\nFrom-SVN: r33446", "tree": {"sha": "e677c2a2cecce758e9be195b1143cdb72174210c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e677c2a2cecce758e9be195b1143cdb72174210c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc611ce0f5aa284bd88116eab9c781a9e95e0e79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc611ce0f5aa284bd88116eab9c781a9e95e0e79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc611ce0f5aa284bd88116eab9c781a9e95e0e79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc611ce0f5aa284bd88116eab9c781a9e95e0e79/comments", "author": null, "committer": null, "parents": [{"sha": "d4047e241e8c3f88b53f8c14bd8dc77d82d8efbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4047e241e8c3f88b53f8c14bd8dc77d82d8efbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4047e241e8c3f88b53f8c14bd8dc77d82d8efbb"}], "stats": {"total": 75, "additions": 42, "deletions": 33}, "files": [{"sha": "f8357254c7e5c2a3b166df6126348636e290b087", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc611ce0f5aa284bd88116eab9c781a9e95e0e79/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc611ce0f5aa284bd88116eab9c781a9e95e0e79/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fc611ce0f5aa284bd88116eab9c781a9e95e0e79", "patch": "@@ -1,3 +1,23 @@\n+2000-04-26  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (TREE_READONLY_DECL_P): Use DECL_P.\n+\t* init.c (decl_constant_value): Check TREE_READONLY_DECL_P.\n+\t* call.c (convert_like_real): Don't test TREE_READONLY_DECL_P\n+\tbefore calling decl_constant_value.\n+\t* class.c (check_bitfield_decl): Likewise.\n+\t* cvt.c (ocp_convert): Likewise.\n+\t(convert): Likewise.\n+\t* decl.c (compute_array_index_type): Likewise.\n+\t(build_enumerator): Likewise.\n+\t* decl2.c (check_cp_case_value): Likewise.\n+\t* pt.c (convert_nontype_argument): Likewise.\n+\t(tsubst): Likewise.\n+\t* typeck.c (decay_conversion): Likewise.\n+\t(build_compound_expr): Likewise.\n+\t(build_reinterpret_cast): Likewise.\n+\t(build_c_cast): Likewise.\n+\t(convert_for_assignment): Likewise.\n+\t\n 2000-04-26  Jason Merrill  <jason@casey.cygnus.com>\n \n \t* decl.c (finish_function): Don't play games with DECL_INLINE."}, {"sha": "8cbdd3098d9d2db52ba1e548bfbe11acf06ebd8d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc611ce0f5aa284bd88116eab9c781a9e95e0e79/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc611ce0f5aa284bd88116eab9c781a9e95e0e79/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=fc611ce0f5aa284bd88116eab9c781a9e95e0e79", "patch": "@@ -3720,7 +3720,7 @@ convert_like_real (convs, expr, fn, argnum, inner)\n   /* Convert a non-array constant variable to its underlying value, unless we\n      are about to bind it to a reference, in which case we need to\n      leave it as an lvalue.  */\n-  if (TREE_READONLY_DECL_P (expr) && TREE_CODE (convs) != REF_BIND\n+  if (TREE_CODE (convs) != REF_BIND\n       && TREE_CODE (TREE_TYPE (expr)) != ARRAY_TYPE)\n     expr = decl_constant_value (expr);\n "}, {"sha": "5a95bc562f903b2e33f795d00baae67285ff6a68", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc611ce0f5aa284bd88116eab9c781a9e95e0e79/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc611ce0f5aa284bd88116eab9c781a9e95e0e79/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=fc611ce0f5aa284bd88116eab9c781a9e95e0e79", "patch": "@@ -3061,7 +3061,7 @@ check_bitfield_decl (field)\n       /* detect invalid field size.  */\n       if (TREE_CODE (w) == CONST_DECL)\n \tw = DECL_INITIAL (w);\n-      else if (TREE_READONLY_DECL_P (w))\n+      else\n \tw = decl_constant_value (w);\n \n       if (TREE_CODE (w) != INTEGER_CST)"}, {"sha": "a36803e8b993c2ef1f728bdbdc157c6ac6bb4c97", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc611ce0f5aa284bd88116eab9c781a9e95e0e79/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc611ce0f5aa284bd88116eab9c781a9e95e0e79/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fc611ce0f5aa284bd88116eab9c781a9e95e0e79", "patch": "@@ -1922,7 +1922,7 @@ struct lang_decl\n \n /* Non-zero if NODE is a _DECL with TREE_READONLY set.  */\n #define TREE_READONLY_DECL_P(NODE) \\\n-  (TREE_READONLY (NODE) && TREE_CODE_CLASS (TREE_CODE (NODE)) == 'd')\n+  (TREE_READONLY (NODE) && DECL_P (NODE))\n \n /* Non-zero iff DECL is memory-based.  The DECL_RTL of\n    certain const variables might be a CONST_INT, or a REG"}, {"sha": "5a2964f6e3a6d39e85adabb66efbf61591682619", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc611ce0f5aa284bd88116eab9c781a9e95e0e79/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc611ce0f5aa284bd88116eab9c781a9e95e0e79/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=fc611ce0f5aa284bd88116eab9c781a9e95e0e79", "patch": "@@ -673,8 +673,7 @@ ocp_convert (type, expr, convtype, flags)\n   complete_type (type);\n   complete_type (TREE_TYPE (expr));\n \n-  if (TREE_READONLY_DECL_P (e))\n-    e = decl_constant_value (e);\n+  e = decl_constant_value (e);\n \n   if (IS_AGGR_TYPE (type) && (convtype & CONV_FORCE_TEMP)\n       /* Some internal structures (vtable_entry_type, sigtbl_ptr_type)\n@@ -1003,8 +1002,7 @@ convert (type, expr)\n \n   if (POINTER_TYPE_P (type) && POINTER_TYPE_P (intype))\n     {\n-      if (TREE_READONLY_DECL_P (expr))\n-\texpr = decl_constant_value (expr);\n+      expr = decl_constant_value (expr);\n       return fold (build1 (NOP_EXPR, type, expr));\n     }\n "}, {"sha": "78c416719572e32be6fd80bab5348a220152f9a2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc611ce0f5aa284bd88116eab9c781a9e95e0e79/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc611ce0f5aa284bd88116eab9c781a9e95e0e79/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=fc611ce0f5aa284bd88116eab9c781a9e95e0e79", "patch": "@@ -9124,8 +9124,7 @@ compute_array_index_type (name, size)\n   STRIP_TYPE_NOPS (size);\n \n   /* It might be a const variable or enumeration constant.  */\n-  if (TREE_READONLY_DECL_P (size))\n-    size = decl_constant_value (size);\n+  size = decl_constant_value (size);\n \n   /* If this involves a template parameter, it will be a constant at\n      instantiation time, but we don't know what the value is yet.\n@@ -13019,8 +13018,7 @@ build_enumerator (name, value, enumtype)\n       /* Validate and default VALUE.  */\n       if (value != NULL_TREE)\n \t{\n-\t  if (TREE_READONLY_DECL_P (value))\n-\t    value = decl_constant_value (value);\n+\t  value = decl_constant_value (value);\n \n \t  if (TREE_CODE (value) == INTEGER_CST)\n \t    {"}, {"sha": "dd89057f0a4b2b82f852763fce83b7d671953dae", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc611ce0f5aa284bd88116eab9c781a9e95e0e79/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc611ce0f5aa284bd88116eab9c781a9e95e0e79/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=fc611ce0f5aa284bd88116eab9c781a9e95e0e79", "patch": "@@ -4143,12 +4143,8 @@ check_cp_case_value (value)\n \n   /* Strip NON_LVALUE_EXPRs since we aren't using as an lvalue.  */\n   STRIP_TYPE_NOPS (value);\n-\n-  if (TREE_READONLY_DECL_P (value))\n-    {\n-      value = decl_constant_value (value);\n-      STRIP_TYPE_NOPS (value);\n-    }\n+  value = decl_constant_value (value);\n+  STRIP_TYPE_NOPS (value);\n   value = fold (value);\n \n   if (TREE_CODE (value) != INTEGER_CST"}, {"sha": "373b7c03ef7ec7642e52e6e397aef9be62ccfa70", "filename": "gcc/cp/init.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc611ce0f5aa284bd88116eab9c781a9e95e0e79/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc611ce0f5aa284bd88116eab9c781a9e95e0e79/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=fc611ce0f5aa284bd88116eab9c781a9e95e0e79", "patch": "@@ -1779,13 +1779,15 @@ resolve_offset_ref (exp)\n   return NULL_TREE;\n }\n \n-/* Return either DECL or its known constant value (if it has one).  */\n+/* If DECL is a `const' declaration, and its value is a known\n+   constant, then return that value.  */\n \n tree\n decl_constant_value (decl)\n      tree decl;\n {\n-  if (! TREE_THIS_VOLATILE (decl)\n+  if (TREE_READONLY_DECL_P (decl)\n+      && ! TREE_THIS_VOLATILE (decl)\n       && DECL_INITIAL (decl)\n       && DECL_INITIAL (decl) != error_mark_node\n       /* This is invalid if initial value is not constant."}, {"sha": "2379a2c3cae54d5b1d6d991d99027690b5623dca", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc611ce0f5aa284bd88116eab9c781a9e95e0e79/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc611ce0f5aa284bd88116eab9c781a9e95e0e79/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fc611ce0f5aa284bd88116eab9c781a9e95e0e79", "patch": "@@ -2701,7 +2701,7 @@ convert_nontype_argument (type, expr)\n      enumerators.  Simplify things by folding them to their values,\n      unless we're about to bind the declaration to a reference\n      parameter.  */\n-  if (INTEGRAL_TYPE_P (expr_type) && TREE_READONLY_DECL_P (expr)\n+  if (INTEGRAL_TYPE_P (expr_type)\n       && TREE_CODE (type) != REFERENCE_TYPE)\n     expr = decl_constant_value (expr);\n \n@@ -6200,7 +6200,7 @@ tsubst (t, args, complain, in_decl)\n \n \t/* See if we can reduce this expression to something simpler.  */\n \tmax = maybe_fold_nontype_arg (max);\n-\tif (!processing_template_decl && TREE_READONLY_DECL_P (max))\n+\tif (!processing_template_decl)\n \t  max = decl_constant_value (max);\n \n \tif (processing_template_decl "}, {"sha": "39b47a005d0fb3d3a9d9c594aec5776973838640", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc611ce0f5aa284bd88116eab9c781a9e95e0e79/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc611ce0f5aa284bd88116eab9c781a9e95e0e79/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=fc611ce0f5aa284bd88116eab9c781a9e95e0e79", "patch": "@@ -1710,7 +1710,7 @@ decay_conversion (exp)\n      don't do this for arrays, though; we want the address of the\n      first element of the array, not the address of the first element\n      of its initializing constant.  */\n-  else if (TREE_READONLY_DECL_P (exp) && code != ARRAY_TYPE)\n+  else if (code != ARRAY_TYPE)\n     {\n       exp = decl_constant_value (exp);\n       type = TREE_TYPE (exp);\n@@ -5084,8 +5084,7 @@ build_compound_expr (list)\n   register tree rest;\n   tree first;\n \n-  if (TREE_READONLY_DECL_P (TREE_VALUE (list)))\n-    TREE_VALUE (list) = decl_constant_value (TREE_VALUE (list));\n+  TREE_VALUE (list) = decl_constant_value (TREE_VALUE (list));\n \n   if (TREE_CHAIN (list) == 0)\n     {\n@@ -5272,8 +5271,7 @@ build_reinterpret_cast (type, expr)\n   else if ((TYPE_PTRFN_P (type) && TYPE_PTRFN_P (intype))\n \t   || (TYPE_PTRMEMFUNC_P (type) && TYPE_PTRMEMFUNC_P (intype)))\n     {\n-      if (TREE_READONLY_DECL_P (expr))\n-\texpr = decl_constant_value (expr);\n+      expr = decl_constant_value (expr);\n       return fold (build1 (NOP_EXPR, type, expr));\n     }\n   else if ((TYPE_PTRMEM_P (type) && TYPE_PTRMEM_P (intype))\n@@ -5283,16 +5281,14 @@ build_reinterpret_cast (type, expr)\n \tcp_pedwarn (\"reinterpret_cast from `%T' to `%T' casts away const (or volatile)\",\n \t\t    intype, type);\n \n-      if (TREE_READONLY_DECL_P (expr))\n-\texpr = decl_constant_value (expr);\n+      expr = decl_constant_value (expr);\n       return fold (build1 (NOP_EXPR, type, expr));\n     }\n   else if ((TYPE_PTRFN_P (type) && TYPE_PTROBV_P (intype))\n \t   || (TYPE_PTRFN_P (intype) && TYPE_PTROBV_P (type)))\n     {\n       pedwarn (\"ISO C++ forbids casting between pointer-to-function and pointer-to-object\");\n-      if (TREE_READONLY_DECL_P (expr))\n-\texpr = decl_constant_value (expr);\n+      expr = decl_constant_value (expr);\n       return fold (build1 (NOP_EXPR, type, expr));\n     }\n   else\n@@ -5498,8 +5494,7 @@ build_c_cast (type, expr)\n     {\n       tree ovalue;\n \n-      if (TREE_READONLY_DECL_P (value))\n-\tvalue = decl_constant_value (value);\n+      value = decl_constant_value (value);\n \n       ovalue = value;\n       value = convert_force (type, value, CONV_C_CAST);\n@@ -6493,7 +6488,7 @@ convert_for_assignment (type, rhs, errtype, fndecl, parmnum)\n   /* Simplify the RHS if possible.  */\n   if (TREE_CODE (rhs) == CONST_DECL)\n     rhs = DECL_INITIAL (rhs);\n-  else if (TREE_READONLY_DECL_P (rhs) && coder != ARRAY_TYPE)\n+  else if (coder != ARRAY_TYPE)\n     rhs = decl_constant_value (rhs);\n \n   /* [expr.ass]"}]}