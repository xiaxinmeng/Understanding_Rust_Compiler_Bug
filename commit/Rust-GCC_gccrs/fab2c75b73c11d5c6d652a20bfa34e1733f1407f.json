{"sha": "fab2c75b73c11d5c6d652a20bfa34e1733f1407f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFiMmM3NWI3M2MxMWQ1YzZkNjUyYTIwYmZhMzRlMTczM2YxNDA3Zg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-10-18T15:38:50Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-10-18T15:38:50Z"}, "message": "PR libstdc++/87641 correctly initialize accumulator in valarray::sum()\n\nUse the value of the first element as the initial value of the\n__valarray_sum accumulator. Value-initialization might not create the\nadditive identity for the value type.\n\nMake a similar change to __valarray_product even though it's only ever\nused internally with a value_type of size_t.\n\n\tPR libstdc++/87641\n\t* include/bits/valarray_array.h (__valarray_sum): Use first element\n\tto initialize accumulator instead of value-initializing it.\n\t(__valarray_product<_Tp>): Move to ...\n\t* src/c++98/valarray.cc (__valarray_product<_Tp>): Here. Use first\n\telement to initialize accumulator.\n\t(__valarray_product(const valarray<size_t>&)): Remove const_cast made\n\tunnecessary by LWG 389.\n\t* testsuite/26_numerics/valarray/87641.cc: New test.\n\nFrom-SVN: r265270", "tree": {"sha": "ceb55f655207d0eb8205ce2feba2e21d59e1cd64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ceb55f655207d0eb8205ce2feba2e21d59e1cd64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fab2c75b73c11d5c6d652a20bfa34e1733f1407f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fab2c75b73c11d5c6d652a20bfa34e1733f1407f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fab2c75b73c11d5c6d652a20bfa34e1733f1407f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fab2c75b73c11d5c6d652a20bfa34e1733f1407f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b71679934e64bdad94409ace50ee79471cad6f20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b71679934e64bdad94409ace50ee79471cad6f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b71679934e64bdad94409ace50ee79471cad6f20"}], "stats": {"total": 125, "additions": 103, "deletions": 22}, "files": [{"sha": "cb9aac1a7c3b21b420302f35de50e70ee2003f33", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab2c75b73c11d5c6d652a20bfa34e1733f1407f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab2c75b73c11d5c6d652a20bfa34e1733f1407f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fab2c75b73c11d5c6d652a20bfa34e1733f1407f", "patch": "@@ -1,3 +1,15 @@\n+2018-10-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/87641\n+\t* include/bits/valarray_array.h (__valarray_sum): Use first element\n+\tto initialize accumulator instead of value-initializing it.\n+\t(__valarray_product<_Tp>): Move to ...\n+\t* src/c++98/valarray.cc (__valarray_product<_Tp>): Here. Use first\n+\telement to initialize accumulator.\n+\t(__valarray_product(const valarray<size_t>&)): Remove const_cast made\n+\tunnecessary by LWG 389.\n+\t* testsuite/26_numerics/valarray/87641.cc: New test.\n+\n 2018-10-18  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tPartial revert."}, {"sha": "2dd1ec836acaaf04b9589060fa6114d506d34185", "filename": "libstdc++-v3/include/bits/valarray_array.h", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab2c75b73c11d5c6d652a20bfa34e1733f1407f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab2c75b73c11d5c6d652a20bfa34e1733f1407f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h?ref=fab2c75b73c11d5c6d652a20bfa34e1733f1407f", "patch": "@@ -338,33 +338,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   //\n-  // Compute the sum of elements in range [__f, __l)\n+  // Compute the sum of elements in range [__f, __l) which must not be empty.\n   // This is a naive algorithm.  It suffers from cancelling.\n-  // In the future try to specialize\n-  // for _Tp = float, double, long double using a more accurate\n-  // algorithm.\n+  // In the future try to specialize for _Tp = float, double, long double\n+  // using a more accurate algorithm.\n   //\n   template<typename _Tp>\n     inline _Tp\n     __valarray_sum(const _Tp* __f, const _Tp* __l)\n     {\n-      _Tp __r = _Tp();\n+      _Tp __r = *__f++;\n       while (__f != __l)\n \t__r += *__f++;\n       return __r;\n     }\n \n-  // Compute the product of all elements in range [__f, __l)\n-  template<typename _Tp>\n-    inline _Tp\n-    __valarray_product(const _Tp* __f, const _Tp* __l)\n-    {\n-      _Tp __r = _Tp(1);\n-      while (__f != __l)\n-\t__r = __r * *__f++;\n-      return __r;\n-    }\n-\n   // Compute the min/max of an array-expression\n   template<typename _Ta>\n     inline typename _Ta::value_type"}, {"sha": "284db21e81c187ed96df004ec7c81b53fde8c9ff", "filename": "libstdc++-v3/src/c++98/valarray.cc", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab2c75b73c11d5c6d652a20bfa34e1733f1407f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fvalarray.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab2c75b73c11d5c6d652a20bfa34e1733f1407f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fvalarray.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fvalarray.cc?ref=fab2c75b73c11d5c6d652a20bfa34e1733f1407f", "patch": "@@ -45,15 +45,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template size_t valarray<size_t>::size() const;\n   template size_t& valarray<size_t>::operator[](size_t);\n \n+  // Compute the product of all elements in the non-empty range [__f, __l)\n+  template<typename _Tp>\n+    inline _Tp\n+    __valarray_product(const _Tp* __f, const _Tp* __l)\n+    {\n+      _Tp __r = *__f++;\n+      while (__f != __l)\n+\t__r = __r * *__f++;\n+      return __r;\n+    }\n+\n   inline size_t\n   __valarray_product(const valarray<size_t>& __a)\n   {\n-    const size_t __n = __a.size();\n-    // XXX: This ugly cast is necessary because\n-    //      valarray::operator[]() const return a VALUE!\n-    //      Try to get the committee to correct that gross error.\n-    valarray<size_t>& __t = const_cast<valarray<size_t>&>(__a);\n-    return __valarray_product(&__t[0], &__t[0] + __n);\n+    return __valarray_product(&__a[0], &__a[0] + __a.size());\n   }\n \n   // Map a gslice, described by its multidimensional LENGTHS"}, {"sha": "eae5440e60b471fa875651a347ecce8d1991bddf", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/87641.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab2c75b73c11d5c6d652a20bfa34e1733f1407f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2F87641.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab2c75b73c11d5c6d652a20bfa34e1733f1407f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2F87641.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2F87641.cc?ref=fab2c75b73c11d5c6d652a20bfa34e1733f1407f", "patch": "@@ -0,0 +1,75 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <valarray>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  // PR libstdc++/87641\n+  std::valarray<int> v1(3);\n+  v1[0] = 1;\n+  v1[1] = 2;\n+  v1[2] = 3;\n+  std::valarray< std::valarray<int> > v2(v1, 3);\n+  std::valarray<int> v3 = v2.sum();\n+  VERIFY( v3.size() == v1.size() );\n+  VERIFY( v3[0] == 3 );\n+  VERIFY( v3[1] == 6 );\n+  VERIFY( v3[2] == 9 );\n+}\n+\n+struct X\n+{\n+  X() : val(1) { }\n+\n+  X& operator+=(const X& x) { val += x.val; return *this; }\n+  bool operator==(const X& x) { return val == x.val; }\n+\n+  int val;\n+};\n+\n+void\n+test02()\n+{\n+  std::valarray<X> v1(1);\n+  VERIFY( v1.sum() == v1[0] );\n+\n+  std::valarray<X> v2(2);\n+  VERIFY( v2.sum().val == 2 );\n+}\n+\n+struct Y\n+{\n+  X& operator+=(const Y&) { throw 1; }\n+};\n+\n+void\n+test03()\n+{\n+  std::valarray<Y> v1(1);\n+  (void) v1.sum(); // no addition performed for a single element\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}]}