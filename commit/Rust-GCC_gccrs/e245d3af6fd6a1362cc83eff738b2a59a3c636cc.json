{"sha": "e245d3af6fd6a1362cc83eff738b2a59a3c636cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI0NWQzYWY2ZmQ2YTEzNjJjYzgzZWZmNzM4YjJhNTlhM2M2MzZjYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-03-20T22:40:50Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-03-20T22:40:50Z"}, "message": "calls.c (expand_call): Don't bother generating tail call sequences if there are pending cleanups.\n\n        * calls.c (expand_call): Don't bother generating tail call\n        sequences if there are pending cleanups.  Use\n        expand_start_target_temps/expand_end_target_temps to elide\n        cleanups created during sibcall expansion.\n\nFrom-SVN: r32653", "tree": {"sha": "6f610a0e811cb699c41e00a9790f2f9058833c25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f610a0e811cb699c41e00a9790f2f9058833c25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e245d3af6fd6a1362cc83eff738b2a59a3c636cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e245d3af6fd6a1362cc83eff738b2a59a3c636cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e245d3af6fd6a1362cc83eff738b2a59a3c636cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e245d3af6fd6a1362cc83eff738b2a59a3c636cc/comments", "author": null, "committer": null, "parents": [{"sha": "e139e81e899442d2e792f4b66bf0ffcb74495a8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e139e81e899442d2e792f4b66bf0ffcb74495a8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e139e81e899442d2e792f4b66bf0ffcb74495a8e"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "dcb99bc0f34ef6141fd57a8b6651db1c6453a243", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e245d3af6fd6a1362cc83eff738b2a59a3c636cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e245d3af6fd6a1362cc83eff738b2a59a3c636cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e245d3af6fd6a1362cc83eff738b2a59a3c636cc", "patch": "@@ -1,3 +1,10 @@\n+2000-03-20  Richard Henderson  <rth@cygnus.com>\n+\n+\t* calls.c (expand_call): Don't bother generating tail call\n+\tsequences if there are pending cleanups.  Use\n+\texpand_start_target_temps/expand_end_target_temps to elide\n+\tcleanups created during sibcall expansion.\n+\n 2000-03-20  Geoff Keating  <geoffk@cygnus.com>\n \n \t* configure.in: Set $IFS to a value if it doesn't already have one"}, {"sha": "104cc0753f432c2b33fe91d83646cc0735f8a015", "filename": "gcc/calls.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e245d3af6fd6a1362cc83eff738b2a59a3c636cc/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e245d3af6fd6a1362cc83eff738b2a59a3c636cc/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=e245d3af6fd6a1362cc83eff738b2a59a3c636cc", "patch": "@@ -2020,7 +2020,8 @@ expand_call (exp, target, ignore)\n   safe_for_reeval = 0;\n   if (optimize >= 2\n       && currently_expanding_call == 1\n-      && stmt_loop_nest_empty ())\n+      && stmt_loop_nest_empty ()\n+      && ! any_pending_cleanups (1))\n     {\n       /* Verify that each argument is safe for re-evaluation.  */\n       for (p = actparms; p; p = TREE_CHAIN (p))\n@@ -2152,6 +2153,12 @@ expand_call (exp, target, ignore)\n \t      || ! FUNCTION_OK_FOR_SIBCALL (fndecl))\n \t    continue;\n \n+\t  /* We know at this point that there are not currently any\n+\t     pending cleanups.  If, however, in the process of evaluating\n+\t     the arguments we were to create some, we'll need to be\n+\t     able to get rid of them.  */\n+\t  expand_start_target_temps ();\n+\n \t  /* State variables we need to save and restore between\n \t     iterations.  */\n \t  save_pending_stack_adjust = pending_stack_adjust;\n@@ -2925,6 +2932,14 @@ expand_call (exp, target, ignore)\n \tif (args[i].aligned_regs)\n \t  free (args[i].aligned_regs);\n \n+      if (pass == 0)\n+\t{\n+\t  /* Undo the fake expand_start_target_temps we did earlier.  If\n+\t     there had been any cleanups created, we've already set\n+\t     sibcall_failure.  */\n+\t  expand_end_target_temps ();\n+\t}\n+\n       insns = get_insns ();\n       end_sequence ();\n "}]}