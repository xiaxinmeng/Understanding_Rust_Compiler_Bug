{"sha": "d266391244dae81f7f1693d9927df4c6c1bc146b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI2NjM5MTI0NGRhZTgxZjdmMTY5M2Q5OTI3ZGY0YzZjMWJjMTQ2Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-07-28T20:56:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-07-28T20:56:50Z"}, "message": "re PR fortran/31067 (MINLOC should sometimes be inlined (gas_dyn is sooooo sloooow))\n\n\tPR fortran/31067\n\t* frontend-passes.c (optimize_minmaxloc): New function.\n\t(optimize_expr): Call it.\n\n\t* gfortran.dg/maxloc_2.f90: New test.\n\t* gfortran.dg/maxloc_3.f90: New test.\n\t* gfortran.dg/minloc_1.f90: New test.\n\t* gfortran.dg/minloc_2.f90: New test.\n\t* gfortran.dg/minloc_3.f90: New test.\n\t* gfortran.dg/minmaxloc_7.f90: New test.\n\nFrom-SVN: r176897", "tree": {"sha": "84fa0235e700ee8b97d41dd0db663877ac961ad1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84fa0235e700ee8b97d41dd0db663877ac961ad1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d266391244dae81f7f1693d9927df4c6c1bc146b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d266391244dae81f7f1693d9927df4c6c1bc146b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d266391244dae81f7f1693d9927df4c6c1bc146b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d266391244dae81f7f1693d9927df4c6c1bc146b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5fce91262c0d0ecedb53090544f227106bf3cbf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fce91262c0d0ecedb53090544f227106bf3cbf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fce91262c0d0ecedb53090544f227106bf3cbf4"}], "stats": {"total": 742, "additions": 741, "deletions": 1}, "files": [{"sha": "89825e35cc480bc0adf7d5e24bb8086ac6df82e3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d266391244dae81f7f1693d9927df4c6c1bc146b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d266391244dae81f7f1693d9927df4c6c1bc146b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d266391244dae81f7f1693d9927df4c6c1bc146b", "patch": "@@ -1,3 +1,9 @@\n+2011-07-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/31067\n+\t* frontend-passes.c (optimize_minmaxloc): New function.\n+\t(optimize_expr): Call it.\n+\n 2011-07-27  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/45586"}, {"sha": "5c3e280df1c0a75e5cca06cd6a8b33df697f51ab", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d266391244dae81f7f1693d9927df4c6c1bc146b/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d266391244dae81f7f1693d9927df4c6c1bc146b/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=d266391244dae81f7f1693d9927df4c6c1bc146b", "patch": "@@ -1,5 +1,5 @@\n /* Pass manager for Fortran front end.\n-   Copyright (C) 2010 Free Software Foundation, Inc.\n+   Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n    Contributed by Thomas K\u00f6nig.\n \n This file is part of GCC.\n@@ -36,6 +36,7 @@ static bool optimize_op (gfc_expr *);\n static bool optimize_comparison (gfc_expr *, gfc_intrinsic_op);\n static bool optimize_trim (gfc_expr *);\n static bool optimize_lexical_comparison (gfc_expr *);\n+static void optimize_minmaxloc (gfc_expr **);\n \n /* How deep we are inside an argument list.  */\n \n@@ -129,6 +130,17 @@ optimize_expr (gfc_expr **e, int *walk_subtrees ATTRIBUTE_UNUSED,\n   if ((*e)->expr_type == EXPR_OP && optimize_op (*e))\n     gfc_simplify_expr (*e, 0);\n \n+  if ((*e)->expr_type == EXPR_FUNCTION && (*e)->value.function.isym)\n+    switch ((*e)->value.function.isym->id)\n+      {\n+      case GFC_ISYM_MINLOC:\n+      case GFC_ISYM_MAXLOC:\n+\toptimize_minmaxloc (e);\n+\tbreak;\n+      default:\n+\tbreak;\n+      }\n+\n   if (function_expr)\n     count_arglist --;\n \n@@ -862,6 +874,49 @@ optimize_trim (gfc_expr *e)\n   return true;\n }\n \n+/* Optimize minloc(b), where b is rank 1 array, into\n+   (/ minloc(b, dim=1) /), and similarly for maxloc,\n+   as the latter forms are expanded inline.  */\n+\n+static void\n+optimize_minmaxloc (gfc_expr **e)\n+{\n+  gfc_expr *fn = *e;\n+  gfc_actual_arglist *a;\n+  char *name, *p;\n+\n+  if (fn->rank != 1\n+      || fn->value.function.actual == NULL\n+      || fn->value.function.actual->expr == NULL\n+      || fn->value.function.actual->expr->rank != 1)\n+    return;\n+\n+  *e = gfc_get_array_expr (fn->ts.type, fn->ts.kind, &fn->where);\n+  (*e)->shape = fn->shape;\n+  fn->rank = 0;\n+  fn->shape = NULL;\n+  gfc_constructor_append_expr (&(*e)->value.constructor, fn, &fn->where);\n+\n+  name = XALLOCAVEC (char, strlen (fn->value.function.name) + 1);\n+  strcpy (name, fn->value.function.name);\n+  p = strstr (name, \"loc0\");\n+  p[3] = '1';\n+  fn->value.function.name = gfc_get_string (name);\n+  if (fn->value.function.actual->next)\n+    {\n+      a = fn->value.function.actual->next;\n+      gcc_assert (a->expr == NULL);\n+    }\n+  else\n+    {\n+      a = gfc_get_actual_arglist ();\n+      fn->value.function.actual->next = a;\n+    }\n+  a->expr = gfc_get_constant_expr (BT_INTEGER, gfc_default_integer_kind,\n+\t\t\t\t   &fn->where);\n+  mpz_set_ui (a->expr->value.integer, 1);\n+}\n+\n #define WALK_SUBEXPR(NODE) \\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\"}, {"sha": "9e9efb19b6460c8228819252d3b28e857d9250be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d266391244dae81f7f1693d9927df4c6c1bc146b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d266391244dae81f7f1693d9927df4c6c1bc146b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d266391244dae81f7f1693d9927df4c6c1bc146b", "patch": "@@ -1,5 +1,13 @@\n 2011-07-28  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR fortran/31067\n+\t* gfortran.dg/maxloc_2.f90: New test.\n+\t* gfortran.dg/maxloc_3.f90: New test.\n+\t* gfortran.dg/minloc_1.f90: New test.\n+\t* gfortran.dg/minloc_2.f90: New test.\n+\t* gfortran.dg/minloc_3.f90: New test.\n+\t* gfortran.dg/minmaxloc_7.f90: New test.\n+\n \tPR debug/49871\n \t* gcc.dg/debug/dwarf2/pr49871.c: New test.\n "}, {"sha": "deca9fc4427dc0931ce92947a236c68be1cc13c9", "filename": "gcc/testsuite/gfortran.dg/maxloc_2.f90", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d266391244dae81f7f1693d9927df4c6c1bc146b/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaxloc_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d266391244dae81f7f1693d9927df4c6c1bc146b/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaxloc_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaxloc_2.f90?ref=d266391244dae81f7f1693d9927df4c6c1bc146b", "patch": "@@ -0,0 +1,156 @@\n+! { dg-do run }\n+! { dg-add-options ieee }\n+! { dg-skip-if \"NaN not supported\" { spu-*-* } { \"*\" } { \"\" } }\n+  real :: a(3), nan, minf, pinf\n+  real, allocatable :: c(:)\n+  integer :: ia(1)\n+  logical :: l\n+  logical :: l2(3)\n+\n+  nan = 0.0\n+  minf = 0.0\n+  pinf = 0.0\n+  nan = 0.0/nan\n+  minf = -1.0/minf\n+  pinf = 1.0/pinf\n+\n+  allocate (c(3))\n+  a(:) = nan\n+  ia = maxloc (a)\n+  if (ia(1).ne.1) call abort\n+  a(:) = minf\n+  ia = maxloc (a)\n+  if (ia(1).ne.1) call abort\n+  a(1:2) = nan\n+  ia = maxloc (a)\n+  if (ia(1).ne.3) call abort\n+  a(2) = 1.0\n+  ia = maxloc (a)\n+  if (ia(1).ne.2) call abort\n+  a(2) = pinf\n+  ia = maxloc (a)\n+  if (ia(1).ne.2) call abort\n+  c(:) = nan\n+  ia = maxloc (c)\n+  if (ia(1).ne.1) call abort\n+  c(:) = minf\n+  ia = maxloc (c)\n+  if (ia(1).ne.1) call abort\n+  c(1:2) = nan\n+  ia = maxloc (c)\n+  if (ia(1).ne.3) call abort\n+  c(2) = 1.0\n+  ia = maxloc (c)\n+  if (ia(1).ne.2) call abort\n+  c(2) = pinf\n+  ia = maxloc (c)\n+  if (ia(1).ne.2) call abort\n+  l = .false.\n+  l2(:) = .false.\n+  a(:) = nan\n+  ia = maxloc (a, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = maxloc (a, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  a(:) = minf\n+  ia = maxloc (a, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = maxloc (a, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  a(1:2) = nan\n+  ia = maxloc (a, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = maxloc (a, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  a(2) = 1.0\n+  ia = maxloc (a, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = maxloc (a, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  a(2) = pinf\n+  ia = maxloc (a, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = maxloc (a, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  c(:) = nan\n+  ia = maxloc (c, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = maxloc (c, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  c(:) = minf\n+  ia = maxloc (c, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = maxloc (c, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  c(1:2) = nan\n+  ia = maxloc (c, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = maxloc (c, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  c(2) = 1.0\n+  ia = maxloc (c, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = maxloc (c, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  c(2) = pinf\n+  ia = maxloc (c, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = maxloc (c, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  l = .true.\n+  l2(:) = .true.\n+  a(:) = nan\n+  ia = maxloc (a, mask = l)\n+  if (ia(1).ne.1) call abort\n+  ia = maxloc (a, mask = l2)\n+  if (ia(1).ne.1) call abort\n+  a(:) = minf\n+  ia = maxloc (a, mask = l)\n+  if (ia(1).ne.1) call abort\n+  ia = maxloc (a, mask = l2)\n+  if (ia(1).ne.1) call abort\n+  a(1:2) = nan\n+  ia = maxloc (a, mask = l)\n+  if (ia(1).ne.3) call abort\n+  ia = maxloc (a, mask = l2)\n+  if (ia(1).ne.3) call abort\n+  a(2) = 1.0\n+  ia = maxloc (a, mask = l)\n+  if (ia(1).ne.2) call abort\n+  ia = maxloc (a, mask = l2)\n+  if (ia(1).ne.2) call abort\n+  a(2) = pinf\n+  ia = maxloc (a, mask = l)\n+  if (ia(1).ne.2) call abort\n+  ia = maxloc (a, mask = l2)\n+  if (ia(1).ne.2) call abort\n+  c(:) = nan\n+  ia = maxloc (c, mask = l)\n+  if (ia(1).ne.1) call abort\n+  ia = maxloc (c, mask = l2)\n+  if (ia(1).ne.1) call abort\n+  c(:) = minf\n+  ia = maxloc (c, mask = l)\n+  if (ia(1).ne.1) call abort\n+  ia = maxloc (c, mask = l2)\n+  if (ia(1).ne.1) call abort\n+  c(1:2) = nan\n+  ia = maxloc (c, mask = l)\n+  if (ia(1).ne.3) call abort\n+  ia = maxloc (c, mask = l2)\n+  if (ia(1).ne.3) call abort\n+  c(2) = 1.0\n+  ia = maxloc (c, mask = l)\n+  if (ia(1).ne.2) call abort\n+  ia = maxloc (c, mask = l2)\n+  if (ia(1).ne.2) call abort\n+  c(2) = pinf\n+  ia = maxloc (c, mask = l)\n+  if (ia(1).ne.2) call abort\n+  ia = maxloc (c, mask = l2)\n+  if (ia(1).ne.2) call abort\n+  deallocate (c)\n+  allocate (c(-2:-3))\n+  ia = maxloc (c)\n+  if (ia(1).ne.0) call abort\n+end"}, {"sha": "c89e8749c091407aaed81b9eed135ac5cf90b68f", "filename": "gcc/testsuite/gfortran.dg/maxloc_3.f90", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d266391244dae81f7f1693d9927df4c6c1bc146b/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaxloc_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d266391244dae81f7f1693d9927df4c6c1bc146b/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaxloc_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaxloc_3.f90?ref=d266391244dae81f7f1693d9927df4c6c1bc146b", "patch": "@@ -0,0 +1,122 @@\n+! { dg-do run }\n+  integer :: a(3), h, ia(1)\n+  integer, allocatable :: c(:)\n+  logical :: l\n+  logical :: l2(3)\n+\n+  h = -huge(h)\n+  h = h - 1\n+  allocate (c(3))\n+  a(:) = 5\n+  ia = maxloc (a)\n+  if (ia(1).ne.1) call abort\n+  a(2) = huge(h)\n+  ia = maxloc (a)\n+  if (ia(1).ne.2) call abort\n+  a(:) = h\n+  ia = maxloc (a)\n+  if (ia(1).ne.1) call abort\n+  a(3) = -huge(h)\n+  ia = maxloc (a)\n+  if (ia(1).ne.3) call abort\n+  c(:) = 5\n+  ia = maxloc (c)\n+  if (ia(1).ne.1) call abort\n+  c(2) = huge(h)\n+  ia = maxloc (c)\n+  if (ia(1).ne.2) call abort\n+  c(:) = h\n+  ia = maxloc (c)\n+  if (ia(1).ne.1) call abort\n+  c(3) = -huge(h)\n+  ia = maxloc (c)\n+  if (ia(1).ne.3) call abort\n+  l = .false.\n+  l2(:) = .false.\n+  a(:) = 5\n+  ia = maxloc (a, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = maxloc (a, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  a(2) = huge(h)\n+  ia = maxloc (a, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = maxloc (a, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  a(:) = h\n+  ia = maxloc (a, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = maxloc (a, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  a(3) = -huge(h)\n+  ia = maxloc (a, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = maxloc (a, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  c(:) = 5\n+  ia = maxloc (c, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = maxloc (c, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  c(2) = huge(h)\n+  ia = maxloc (c, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = maxloc (c, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  c(:) = h\n+  ia = maxloc (c, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = maxloc (c, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  c(3) = -huge(h)\n+  ia = maxloc (c, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = maxloc (c, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  l = .true.\n+  l2(:) = .true.\n+  a(:) = 5\n+  ia = maxloc (a, mask = l)\n+  if (ia(1).ne.1) call abort\n+  ia = maxloc (a, mask = l2)\n+  if (ia(1).ne.1) call abort\n+  a(2) = huge(h)\n+  ia = maxloc (a, mask = l)\n+  if (ia(1).ne.2) call abort\n+  ia = maxloc (a, mask = l2)\n+  if (ia(1).ne.2) call abort\n+  a(:) = h\n+  ia = maxloc (a, mask = l)\n+  if (ia(1).ne.1) call abort\n+  ia = maxloc (a, mask = l2)\n+  if (ia(1).ne.1) call abort\n+  a(3) = -huge(h)\n+  ia = maxloc (a, mask = l)\n+  if (ia(1).ne.3) call abort\n+  ia = maxloc (a, mask = l2)\n+  if (ia(1).ne.3) call abort\n+  c(:) = 5\n+  ia = maxloc (c, mask = l)\n+  if (ia(1).ne.1) call abort\n+  ia = maxloc (c, mask = l2)\n+  if (ia(1).ne.1) call abort\n+  c(2) = huge(h)\n+  ia = maxloc (c, mask = l)\n+  if (ia(1).ne.2) call abort\n+  ia = maxloc (c, mask = l2)\n+  if (ia(1).ne.2) call abort\n+  c(:) = h\n+  ia = maxloc (c, mask = l)\n+  if (ia(1).ne.1) call abort\n+  ia = maxloc (c, mask = l2)\n+  if (ia(1).ne.1) call abort\n+  c(3) = -huge(h)\n+  ia = maxloc (c, mask = l)\n+  if (ia(1).ne.3) call abort\n+  ia = maxloc (c, mask = l2)\n+  if (ia(1).ne.3) call abort\n+  deallocate (c)\n+  allocate (c(-2:-3))\n+  ia = maxloc (c)\n+  if (ia(1).ne.0) call abort\n+end"}, {"sha": "25691b0682a8aec9ebf55533bac700a80e16e9e2", "filename": "gcc/testsuite/gfortran.dg/minloc_1.f90", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d266391244dae81f7f1693d9927df4c6c1bc146b/gcc%2Ftestsuite%2Fgfortran.dg%2Fminloc_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d266391244dae81f7f1693d9927df4c6c1bc146b/gcc%2Ftestsuite%2Fgfortran.dg%2Fminloc_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fminloc_1.f90?ref=d266391244dae81f7f1693d9927df4c6c1bc146b", "patch": "@@ -0,0 +1,156 @@\n+! { dg-do run }\n+! { dg-add-options ieee }\n+! { dg-skip-if \"NaN not supported\" { spu-*-* } { \"*\" } { \"\" } }\n+  real :: a(3), nan, minf, pinf\n+  integer :: ia(1)\n+  real, allocatable :: c(:)\n+  logical :: l\n+  logical :: l2(3)\n+\n+  nan = 0.0\n+  minf = 0.0\n+  pinf = 0.0\n+  nan = 0.0/nan\n+  minf = -1.0/minf\n+  pinf = 1.0/pinf\n+\n+  allocate (c(3))\n+  a(:) = nan\n+  ia = minloc (a)\n+  if (ia(1).ne.1) call abort\n+  a(:) = pinf\n+  ia = minloc (a)\n+  if (ia(1).ne.1) call abort\n+  a(1:2) = nan\n+  ia = minloc (a)\n+  if (ia(1).ne.3) call abort\n+  a(2) = 1.0\n+  ia = minloc (a)\n+  if (ia(1).ne.2) call abort\n+  a(2) = minf\n+  ia = minloc (a)\n+  if (ia(1).ne.2) call abort\n+  c(:) = nan\n+  ia = minloc (c)\n+  if (ia(1).ne.1) call abort\n+  c(:) = pinf\n+  ia = minloc (c)\n+  if (ia(1).ne.1) call abort\n+  c(1:2) = nan\n+  ia = minloc (c)\n+  if (ia(1).ne.3) call abort\n+  c(2) = 1.0\n+  ia = minloc (c)\n+  if (ia(1).ne.2) call abort\n+  c(2) = minf\n+  ia = minloc (c)\n+  if (ia(1).ne.2) call abort\n+  l = .false.\n+  l2(:) = .false.\n+  a(:) = nan\n+  ia = minloc (a, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = minloc (a, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  a(:) = pinf\n+  ia = minloc (a, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = minloc (a, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  a(1:2) = nan\n+  ia = minloc (a, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = minloc (a, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  a(2) = 1.0\n+  ia = minloc (a, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = minloc (a, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  a(2) = minf\n+  ia = minloc (a, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = minloc (a, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  c(:) = nan\n+  ia = minloc (c, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = minloc (c, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  c(:) = pinf\n+  ia = minloc (c, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = minloc (c, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  c(1:2) = nan\n+  ia = minloc (c, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = minloc (c, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  c(2) = 1.0\n+  ia = minloc (c, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = minloc (c, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  c(2) = minf\n+  ia = minloc (c, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = minloc (c, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  l = .true.\n+  l2(:) = .true.\n+  a(:) = nan\n+  ia = minloc (a, mask = l)\n+  if (ia(1).ne.1) call abort\n+  ia = minloc (a, mask = l2)\n+  if (ia(1).ne.1) call abort\n+  a(:) = pinf\n+  ia = minloc (a, mask = l)\n+  if (ia(1).ne.1) call abort\n+  ia = minloc (a, mask = l2)\n+  if (ia(1).ne.1) call abort\n+  a(1:2) = nan\n+  ia = minloc (a, mask = l)\n+  if (ia(1).ne.3) call abort\n+  ia = minloc (a, mask = l2)\n+  if (ia(1).ne.3) call abort\n+  a(2) = 1.0\n+  ia = minloc (a, mask = l)\n+  if (ia(1).ne.2) call abort\n+  ia = minloc (a, mask = l2)\n+  if (ia(1).ne.2) call abort\n+  a(2) = minf\n+  ia = minloc (a, mask = l)\n+  if (ia(1).ne.2) call abort\n+  ia = minloc (a, mask = l2)\n+  if (ia(1).ne.2) call abort\n+  c(:) = nan\n+  ia = minloc (c, mask = l)\n+  if (ia(1).ne.1) call abort\n+  ia = minloc (c, mask = l2)\n+  if (ia(1).ne.1) call abort\n+  c(:) = pinf\n+  ia = minloc (c, mask = l)\n+  if (ia(1).ne.1) call abort\n+  ia = minloc (c, mask = l2)\n+  if (ia(1).ne.1) call abort\n+  c(1:2) = nan\n+  ia = minloc (c, mask = l)\n+  if (ia(1).ne.3) call abort\n+  ia = minloc (c, mask = l2)\n+  if (ia(1).ne.3) call abort\n+  c(2) = 1.0\n+  ia = minloc (c, mask = l)\n+  if (ia(1).ne.2) call abort\n+  ia = minloc (c, mask = l2)\n+  if (ia(1).ne.2) call abort\n+  c(2) = minf\n+  ia = minloc (c, mask = l)\n+  if (ia(1).ne.2) call abort\n+  ia = minloc (c, mask = l2)\n+  if (ia(1).ne.2) call abort\n+  deallocate (c)\n+  allocate (c(-2:-3))\n+  ia = minloc (c)\n+  if (ia(1).ne.0) call abort\n+end"}, {"sha": "7a659f786c9521c083a7df8ca03544ae7399ca81", "filename": "gcc/testsuite/gfortran.dg/minloc_2.f90", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d266391244dae81f7f1693d9927df4c6c1bc146b/gcc%2Ftestsuite%2Fgfortran.dg%2Fminloc_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d266391244dae81f7f1693d9927df4c6c1bc146b/gcc%2Ftestsuite%2Fgfortran.dg%2Fminloc_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fminloc_2.f90?ref=d266391244dae81f7f1693d9927df4c6c1bc146b", "patch": "@@ -0,0 +1,122 @@\n+! { dg-do run }\n+  integer :: a(3), h, ia(1)\n+  integer, allocatable :: c(:)\n+  logical :: l\n+  logical :: l2(3)\n+\n+  h = -huge(h)\n+  h = h - 1\n+  allocate (c(3))\n+  a(:) = 5\n+  ia = minloc (a)\n+  if (ia(1).ne.1) call abort\n+  a(2) = h\n+  ia = minloc (a)\n+  if (ia(1).ne.2) call abort\n+  a(:) = huge(h)\n+  ia = minloc (a)\n+  if (ia(1).ne.1) call abort\n+  a(3) = huge(h) - 1\n+  ia = minloc (a)\n+  if (ia(1).ne.3) call abort\n+  c(:) = 5\n+  ia = minloc (c)\n+  if (ia(1).ne.1) call abort\n+  c(2) = h\n+  ia = minloc (c)\n+  if (ia(1).ne.2) call abort\n+  c(:) = huge(h)\n+  ia = minloc (c)\n+  if (ia(1).ne.1) call abort\n+  c(3) = huge(h) - 1\n+  ia = minloc (c)\n+  if (ia(1).ne.3) call abort\n+  l = .false.\n+  l2(:) = .false.\n+  a(:) = 5\n+  ia = minloc (a, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = minloc (a, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  a(2) = h\n+  ia = minloc (a, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = minloc (a, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  a(:) = huge(h)\n+  ia = minloc (a, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = minloc (a, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  a(3) = huge(h) - 1\n+  ia = minloc (a, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = minloc (a, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  c(:) = 5\n+  ia = minloc (c, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = minloc (c, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  c(2) = h\n+  ia = minloc (c, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = minloc (c, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  c(:) = huge(h)\n+  ia = minloc (c, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = minloc (c, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  c(3) = huge(h) - 1\n+  ia = minloc (c, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = minloc (c, mask = l2)\n+  if (ia(1).ne.0) call abort\n+  l = .true.\n+  l2(:) = .true.\n+  a(:) = 5\n+  ia = minloc (a, mask = l)\n+  if (ia(1).ne.1) call abort\n+  ia = minloc (a, mask = l2)\n+  if (ia(1).ne.1) call abort\n+  a(2) = h\n+  ia = minloc (a, mask = l)\n+  if (ia(1).ne.2) call abort\n+  ia = minloc (a, mask = l2)\n+  if (ia(1).ne.2) call abort\n+  a(:) = huge(h)\n+  ia = minloc (a, mask = l)\n+  if (ia(1).ne.1) call abort\n+  ia = minloc (a, mask = l2)\n+  if (ia(1).ne.1) call abort\n+  a(3) = huge(h) - 1\n+  ia = minloc (a, mask = l)\n+  if (ia(1).ne.3) call abort\n+  ia = minloc (a, mask = l2)\n+  if (ia(1).ne.3) call abort\n+  c(:) = 5\n+  ia = minloc (c, mask = l)\n+  if (ia(1).ne.1) call abort\n+  ia = minloc (c, mask = l2)\n+  if (ia(1).ne.1) call abort\n+  c(2) = h\n+  ia = minloc (c, mask = l)\n+  if (ia(1).ne.2) call abort\n+  ia = minloc (c, mask = l2)\n+  if (ia(1).ne.2) call abort\n+  c(:) = huge(h)\n+  ia = minloc (c, mask = l)\n+  if (ia(1).ne.1) call abort\n+  ia = minloc (c, mask = l2)\n+  if (ia(1).ne.1) call abort\n+  c(3) = huge(h) - 1\n+  ia = minloc (c, mask = l)\n+  if (ia(1).ne.3) call abort\n+  ia = minloc (c, mask = l2)\n+  if (ia(1).ne.3) call abort\n+  deallocate (c)\n+  allocate (c(-2:-3))\n+  ia = minloc (c)\n+  if (ia(1).ne.0) call abort\n+end"}, {"sha": "b1655e981432d5e85d44d31926fb3b3eb03237a2", "filename": "gcc/testsuite/gfortran.dg/minloc_3.f90", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d266391244dae81f7f1693d9927df4c6c1bc146b/gcc%2Ftestsuite%2Fgfortran.dg%2Fminloc_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d266391244dae81f7f1693d9927df4c6c1bc146b/gcc%2Ftestsuite%2Fgfortran.dg%2Fminloc_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fminloc_3.f90?ref=d266391244dae81f7f1693d9927df4c6c1bc146b", "patch": "@@ -0,0 +1,94 @@\n+  real :: a(30), m\n+  real, allocatable :: c(:)\n+  integer :: e(30), n, ia(1)\n+  integer, allocatable :: g(:)\n+  logical :: l(30)\n+  allocate (c (30))\n+  allocate (g (30))\n+  a = 7.0\n+  c = 7.0\n+  e = 7\n+  g = 7\n+  m = huge(m)\n+  n = huge(n)\n+  a(7) = 6.0\n+  c(7) = 6.0\n+  e(7) = 6\n+  g(7) = 6\n+  ia = minloc (a)\n+  if (ia(1).ne.7) call abort\n+  ia = minloc (a(::2))\n+  if (ia(1).ne.4) call abort\n+  if (any (minloc (a).ne.(/ 7 /))) call abort\n+  if (any (minloc (a(::2)).ne.(/ 4 /))) call abort\n+  ia = minloc (c)\n+  if (ia(1).ne.7) call abort\n+  ia = minloc (c(::2))\n+  if (ia(1).ne.4) call abort\n+  if (any (minloc (c).ne.(/ 7 /))) call abort\n+  if (any (minloc (c(::2)).ne.(/ 4 /))) call abort\n+  ia = minloc (e)\n+  if (ia(1).ne.7) call abort\n+  ia = minloc (e(::2))\n+  if (ia(1).ne.4) call abort\n+  if (any (minloc (e).ne.(/ 7 /))) call abort\n+  if (any (minloc (e(::2)).ne.(/ 4 /))) call abort\n+  ia = minloc (g)\n+  if (ia(1).ne.7) call abort\n+  ia = minloc (g(::2))\n+  if (ia(1).ne.4) call abort\n+  if (any (minloc (g).ne.(/ 7 /))) call abort\n+  if (any (minloc (g(::2)).ne.(/ 4 /))) call abort\n+  l = .true.\n+  ia = minloc (a, mask = l)\n+  if (ia(1).ne.7) call abort\n+  ia = minloc (a(::2), mask = l(::2))\n+  if (ia(1).ne.4) call abort\n+  if (any (minloc (a, mask = l).ne.(/ 7 /))) call abort\n+  if (any (minloc (a(::2), mask = l(::2)).ne.(/ 4 /))) call abort\n+  ia = minloc (c, mask = l)\n+  if (ia(1).ne.7) call abort\n+  ia = minloc (c(::2), mask = l(::2))\n+  if (ia(1).ne.4) call abort\n+  if (any (minloc (c, mask = l).ne.(/ 7 /))) call abort\n+  if (any (minloc (c(::2), mask = l(::2)).ne.(/ 4 /))) call abort\n+  ia = minloc (e, mask = l)\n+  if (ia(1).ne.7) call abort\n+  ia = minloc (e(::2), mask = l(::2))\n+  if (ia(1).ne.4) call abort\n+  if (any (minloc (e, mask = l).ne.(/ 7 /))) call abort\n+  if (any (minloc (e(::2), mask = l(::2)).ne.(/ 4 /))) call abort\n+  ia = minloc (g, mask = l)\n+  if (ia(1).ne.7) call abort\n+  ia = minloc (g(::2), mask = l(::2))\n+  if (ia(1).ne.4) call abort\n+  if (any (minloc (g, mask = l).ne.(/ 7 /))) call abort\n+  if (any (minloc (g(::2), mask = l(::2)).ne.(/ 4 /))) call abort\n+  l = .false.\n+  ia = minloc (a, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = minloc (a(::2), mask = l(::2))\n+  if (ia(1).ne.0) call abort\n+  if (any (minloc (a, mask = l).ne.(/ 0 /))) call abort\n+  if (any (minloc (a(::2), mask = l(::2)).ne.(/ 0 /))) call abort\n+  ia = minloc (c, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = minloc (c(::2), mask = l(::2))\n+  if (ia(1).ne.0) call abort\n+  if (any (minloc (c, mask = l).ne.(/ 0 /))) call abort\n+  if (any (minloc (c(::2), mask = l(::2)).ne.(/ 0 /))) call abort\n+  ia = minloc (e, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = minloc (e(::2), mask = l(::2))\n+  if (ia(1).ne.0) call abort\n+  if (any (minloc (e, mask = l).ne.(/ 0 /))) call abort\n+  if (any (minloc (e(::2), mask = l(::2)).ne.(/ 0 /))) call abort\n+  ia = minloc (g, mask = l)\n+  if (ia(1).ne.0) call abort\n+  ia = minloc (g(::2), mask = l(::2))\n+  if (ia(1).ne.0) call abort\n+  if (any (minloc (g, mask = l).ne.(/ 0 /))) call abort\n+  if (any (minloc (g(::2), mask = l(::2)).ne.(/ 0 /))) call abort\n+  a = 7.0\n+  c = 7.0\n+end"}, {"sha": "2645a96e444b7c418d9595badc1236c0ac1fb337", "filename": "gcc/testsuite/gfortran.dg/minmaxloc_7.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d266391244dae81f7f1693d9927df4c6c1bc146b/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmaxloc_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d266391244dae81f7f1693d9927df4c6c1bc146b/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmaxloc_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmaxloc_7.f90?ref=d266391244dae81f7f1693d9927df4c6c1bc146b", "patch": "@@ -0,0 +1,21 @@\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+! { dg-do run }\n+program test\n+  implicit none\n+  real, volatile, allocatable :: A(:)\n+  logical, volatile :: mask(11)\n+\n+  A = [1,2,3,5,6,1,35,3,7,-3,-47]\n+  mask = .true.\n+  mask(7) = .false.\n+  mask(11) = .false.\n+  call sub2 (minloc(A),11)\n+  call sub2 (maxloc(A, mask=mask),9)\n+  A = minloc(A)\n+  if (size (A) /= 1 .or. A(1) /= 11) call abort ()\n+contains\n+  subroutine sub2(A,n)\n+    integer :: A(:),n\n+    if (A(1) /= n .or. size (A) /= 1) call abort ()\n+  end subroutine sub2\n+end program test"}]}