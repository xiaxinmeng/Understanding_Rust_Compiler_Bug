{"sha": "3b998c11fb4b43c4547bb7aa3f714ce89fe0c922", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I5OThjMTFmYjRiNDNjNDU0N2JiN2FhM2Y3MTRjZTg5ZmUwYzkyMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-05-25T10:28:09Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-05-25T10:28:09Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1079", "tree": {"sha": "20a3a7c01f2515050b05f012690cb27e34ff094a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20a3a7c01f2515050b05f012690cb27e34ff094a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b998c11fb4b43c4547bb7aa3f714ce89fe0c922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b998c11fb4b43c4547bb7aa3f714ce89fe0c922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b998c11fb4b43c4547bb7aa3f714ce89fe0c922", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b998c11fb4b43c4547bb7aa3f714ce89fe0c922/comments", "author": null, "committer": null, "parents": [{"sha": "1ce634c39faa75856b8a0468b6f39943a6c8e687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce634c39faa75856b8a0468b6f39943a6c8e687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ce634c39faa75856b8a0468b6f39943a6c8e687"}], "stats": {"total": 75, "additions": 64, "deletions": 11}, "files": [{"sha": "c01c21b338e0bfca967fe114420f9a485f466d42", "filename": "gcc/explow.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b998c11fb4b43c4547bb7aa3f714ce89fe0c922/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b998c11fb4b43c4547bb7aa3f714ce89fe0c922/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=3b998c11fb4b43c4547bb7aa3f714ce89fe0c922", "patch": "@@ -846,14 +846,18 @@ allocate_dynamic_stack_space (size, target, known_align)\n \n #ifdef MUST_ALIGN\n \n-  if (GET_CODE (size) == CONST_INT)\n-    size = gen_rtx (CONST_INT, VOIDmode,\n-\t\t    INTVAL (size) + (BIGGEST_ALIGNMENT / BITS_PER_UNIT - 1));\n-  else\n-    size = expand_binop (Pmode, add_optab, size,\n-\t\t\t gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t  BIGGEST_ALIGNMENT / BITS_PER_UNIT - 1),\n-\t\t\t 0, 1, OPTAB_LIB_WIDEN);\n+  if (known_align % BIGGEST_ALIGNMENT != 0)\n+    {\n+      if (GET_CODE (size) == CONST_INT)\n+\tsize = gen_rtx (CONST_INT, VOIDmode,\n+\t\t\t(INTVAL (size)\n+\t\t\t + (BIGGEST_ALIGNMENT / BITS_PER_UNIT - 1)));\n+      else\n+\tsize = expand_binop (Pmode, add_optab, size,\n+\t\t\t     gen_rtx (CONST_INT, VOIDmode,\n+\t\t\t\t      BIGGEST_ALIGNMENT / BITS_PER_UNIT - 1),\n+\t\t\t     0, 1, OPTAB_LIB_WIDEN);\n+    }\n #endif\n \n #ifdef SETJMP_VIA_SAVE_AREA"}, {"sha": "ba44e202bc58df4425206937ac3c2df806ee1822", "filename": "gcc/fold-const.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b998c11fb4b43c4547bb7aa3f714ce89fe0c922/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b998c11fb4b43c4547bb7aa3f714ce89fe0c922/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=3b998c11fb4b43c4547bb7aa3f714ce89fe0c922", "patch": "@@ -3140,6 +3140,49 @@ fold (expr)\n \treturn non_lvalue (convert (type, arg0));\n       if (integer_zerop (arg1))\n \treturn t;\n+\n+      /* If we have ((a * C1) / C2) and C1 % C2 == 0, we can replace this with\n+\t (a * (C1/C2).  Also look for when we have a SAVE_EXPR in\n+\t between.  */\n+      if (TREE_CODE (arg1) == INTEGER_CST\n+\t  && TREE_INT_CST_LOW (arg1) > 0 && TREE_INT_CST_HIGH (arg1) == 0\n+\t  && TREE_CODE (arg0) == MULT_EXPR\n+\t  && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST\n+\t  && TREE_INT_CST_LOW (TREE_OPERAND (arg0, 1)) > 0\n+\t  && TREE_INT_CST_HIGH (TREE_OPERAND (arg0, 1)) == 0\n+\t  && 0 == (TREE_INT_CST_LOW (TREE_OPERAND (arg0, 1))\n+\t\t   % TREE_INT_CST_LOW (arg1)))\n+\t{\n+\t  tree new_op\n+\t    = build_int_2 (TREE_INT_CST_LOW (TREE_OPERAND (arg0, 1))\n+\t\t\t   / TREE_INT_CST_LOW (arg1));\n+\n+\t  TREE_TYPE (new_op) = type;\n+\t  return build (MULT_EXPR, type, TREE_OPERAND (arg0, 0), new_op);\n+\t}\n+\n+      else if (TREE_CODE (arg1) == INTEGER_CST\n+\t       && TREE_INT_CST_LOW (arg1) > 0 && TREE_INT_CST_HIGH (arg1) == 0\n+\t       && TREE_CODE (arg0) == SAVE_EXPR\n+\t       && TREE_CODE (TREE_OPERAND (arg0, 0)) == MULT_EXPR\n+\t       && (TREE_CODE (TREE_OPERAND (TREE_OPERAND (arg0, 0), 1))\n+\t\t   == INTEGER_CST)\n+\t       && (TREE_INT_CST_LOW (TREE_OPERAND (TREE_OPERAND (arg0, 0), 1))\n+\t\t   > 0)\n+\t       && (TREE_INT_CST_HIGH (TREE_OPERAND (TREE_OPERAND (arg0, 0), 1))\n+\t\t   == 0)\n+\t       && (TREE_INT_CST_LOW (TREE_OPERAND (TREE_OPERAND (arg0, 0), 1))\n+\t\t   % TREE_INT_CST_LOW (arg1)) == 0)\n+\t{\n+\t  tree new_op\n+\t    = build_int_2 (TREE_INT_CST_LOW (TREE_OPERAND (TREE_OPERAND (arg0, 0), 1))\n+\t\t\t   / TREE_INT_CST_LOW (arg1));\n+\t  \n+\t  TREE_TYPE (new_op) = type;\n+\t  return build (MULT_EXPR, type,\n+\t\t\tTREE_OPERAND (TREE_OPERAND (arg0, 0), 0), new_op);\n+\t}\n+\n #if !defined (REAL_IS_NOT_DOUBLE) || defined (REAL_ARITHMETIC)\n #ifndef REAL_INFINITY\n       if (TREE_CODE (arg1) == REAL_CST"}, {"sha": "eca3e9a694c66c90417c030e8f2561c479de0ad7", "filename": "gcc/reload1.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b998c11fb4b43c4547bb7aa3f714ce89fe0c922/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b998c11fb4b43c4547bb7aa3f714ce89fe0c922/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=3b998c11fb4b43c4547bb7aa3f714ce89fe0c922", "patch": "@@ -5522,7 +5522,9 @@ gen_input_reload (reloadreg, in, before_insn, is_asm)\n   else if (GET_RTX_CLASS (GET_CODE (in)) == 'o' || GET_CODE (in) == SUBREG)\n     {\n       rtx x = emit_insn_before (gen_move_insn (reloadreg, in), before_insn);\n-      if (is_asm && recog_memoized (x) < 0)\n+      if (is_asm\n+\t  && (recog_memoized (x) < 0\n+\t      || (insn_extract (x), ! constrain_operands (INSN_CODE (x), 1))))\n \t{\n \t  delete_insn (x);\n \t  return 0;\n@@ -5534,7 +5536,9 @@ gen_input_reload (reloadreg, in, before_insn, is_asm)\n     {\n       rtx x = emit_insn_before (gen_reload_load_address (reloadreg, in),\n \t\t\t\tbefore_insn);\n-      if (is_asm && recog_memoized (x) < 0)\n+      if (is_asm\n+\t  && (recog_memoized (x) < 0\n+\t      || (insn_extract (x), ! constrain_operands (INSN_CODE (x), 1))))\n \t{\n \t  delete_insn (x);\n \t  return 0;\n@@ -5547,7 +5551,9 @@ gen_input_reload (reloadreg, in, before_insn, is_asm)\n     {\n       rtx x = emit_insn_before (gen_rtx (SET, VOIDmode, reloadreg, in),\n \t\t\t\tbefore_insn);\n-      if (is_asm && recog_memoized (x) < 0)\n+      if (is_asm\n+\t  && (recog_memoized (x) < 0\n+\t      || (insn_extract (x), ! constrain_operands (INSN_CODE (x), 1))))\n \t{\n \t  delete_insn (x);\n \t  return 0;"}]}