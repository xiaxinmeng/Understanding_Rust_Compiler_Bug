{"sha": "d69d031618f01a7a013b2a8fcd5dcf85b5ce7bee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY5ZDAzMTYxOGYwMWE3YTAxM2IyYThmY2Q1ZGNmODViNWNlN2JlZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-07-27T15:55:41Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-07-27T15:55:41Z"}, "message": "flow.c (last_loop_beg_note): New function.\n\n\t* flow.c (last_loop_beg_note): New function.\n\t(redirect_edge_and_branch): Use it.\n\t(split_edge): Likewise.\n\n\t* alias.c (loop_p): Avoid uninitialized memory access.\n\n\t* flow.c (try_forward_edges): Avoid accessing freed memory.\n\n\t* flow.c (backward_edge_of_syntactic_loop_p): Avoid uninitialized\n\tvariable access.\n\nFrom-SVN: r44429", "tree": {"sha": "ae0f94c81d3a2055c7c2c089edaa68e10ecae36b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae0f94c81d3a2055c7c2c089edaa68e10ecae36b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d69d031618f01a7a013b2a8fcd5dcf85b5ce7bee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d69d031618f01a7a013b2a8fcd5dcf85b5ce7bee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d69d031618f01a7a013b2a8fcd5dcf85b5ce7bee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d69d031618f01a7a013b2a8fcd5dcf85b5ce7bee/comments", "author": null, "committer": null, "parents": [{"sha": "f636e2a57d170c1b8bb65668afc86b69f4b45ef1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f636e2a57d170c1b8bb65668afc86b69f4b45ef1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f636e2a57d170c1b8bb65668afc86b69f4b45ef1"}], "stats": {"total": 97, "additions": 72, "deletions": 25}, "files": [{"sha": "8a0143f6c3ccdfba9f59ef363ae59c0eee7085b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d69d031618f01a7a013b2a8fcd5dcf85b5ce7bee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d69d031618f01a7a013b2a8fcd5dcf85b5ce7bee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d69d031618f01a7a013b2a8fcd5dcf85b5ce7bee", "patch": "@@ -1,3 +1,16 @@\n+Fri Jul 27 17:53:00 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* flow.c (last_loop_beg_note): New function.\n+\t(redirect_edge_and_branch): Use it.\n+\t(split_edge): Likewise.\n+\n+\t* alias.c (loop_p): Avoid uninitialized memory access.\n+\n+\t* flow.c (try_forward_edges): Avoid accessing freed memory.\n+\n+\t* flow.c (backward_edge_of_syntactic_loop_p): Avoid uninitialized\n+\tvariable access.\n+\n 2001-07-27  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n \t* doc/install.texi (Configuration): Properly link the host"}, {"sha": "84a7663ce7b55bd1b781fcd18bccf3655155807c", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d69d031618f01a7a013b2a8fcd5dcf85b5ce7bee/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d69d031618f01a7a013b2a8fcd5dcf85b5ce7bee/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=d69d031618f01a7a013b2a8fcd5dcf85b5ce7bee", "patch": "@@ -2118,7 +2118,7 @@ loop_p ()\n \t}\n       else\n \t{\n-\t  if (dest != EXIT_BLOCK_PTR\n+\t  if (dest != EXIT_BLOCK_PTR && src != ENTRY_BLOCK_PTR\n \t      && pre[src->index] >= pre[dest->index]\n \t      && post[dest->index] == 0)\n \t    break;"}, {"sha": "4f339cd7076ef774d0c07e3eee4f5a4d1d189276", "filename": "gcc/flow.c", "status": "modified", "additions": 58, "deletions": 24, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d69d031618f01a7a013b2a8fcd5dcf85b5ce7bee/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d69d031618f01a7a013b2a8fcd5dcf85b5ce7bee/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=d69d031618f01a7a013b2a8fcd5dcf85b5ce7bee", "patch": "@@ -1748,6 +1748,30 @@ try_redirect_by_replacing_jump (e, target)\n   return true;\n }\n \n+/* Return last loop_beg note appearing after INSN, before start of next\n+   basic block.  Return INSN if there are no such notes.\n+\n+   When emmiting jump to redirect an fallthru edge, it should always\n+   appear after the LOOP_BEG notes, as loop optimizer expect loop to\n+   eighter start by fallthru edge or jump following the LOOP_BEG note\n+   jumping to the loop exit test.\n+ */\n+rtx\n+last_loop_beg_note (insn)\n+     rtx insn;\n+{\n+  rtx last = insn;\n+  insn = NEXT_INSN (insn);\n+  while (GET_CODE (insn) == NOTE\n+\t && NOTE_LINE_NUMBER (insn) != NOTE_INSN_BASIC_BLOCK)\n+    {\n+      if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_LOOP_BEG)\n+\tlast = insn;\n+      insn = NEXT_INSN (insn);\n+    }\n+  return last;\n+}\n+\n /* Attempt to change code to redirect edge E to TARGET.\n    Don't do that on expense of adding new instructions or reordering\n    basic blocks.\n@@ -1877,7 +1901,8 @@ redirect_edge_and_branch_force (e, target)\n   /* Case of the fallthru block.  */\n   if (!e->src->succ->succ_next)\n     {\n-      e->src->end = emit_jump_insn_after (gen_jump (label), e->src->end);\n+      e->src->end = emit_jump_insn_after (gen_jump (label),\n+\t\t\t\t\t  last_loop_beg_note (e->src->end));\n       JUMP_LABEL (e->src->end) = label;\n       LABEL_NUSES (label)++;\n       if (basic_block_for_insn)\n@@ -1906,7 +1931,7 @@ redirect_edge_and_branch_force (e, target)\n \n   memset (new_bb, 0, sizeof (*new_bb));\n \n-  new_bb->end = new_bb->head = e->src->end;\n+  new_bb->end = new_bb->head = last_loop_beg_note (e->src->end);\n   new_bb->succ = NULL;\n   new_bb->pred = new_edge;\n   new_bb->count = e->count;\n@@ -1976,7 +2001,7 @@ back_edge_of_syntactic_loop_p (bb1, bb2)\n \tbasic_block bb1, bb2;\n {\n   rtx insn;\n-  int count;\n+  int count = 0;\n   if (bb1->index > bb2->index)\n     return false;\n   if (bb1->index == bb2->index)\n@@ -2088,7 +2113,7 @@ split_edge (edge_in)\n \n \t  /* Now add the jump insn ...  */\n \t  pos = emit_jump_insn_after (gen_jump (old_succ->head),\n-\t\t\t\t      jump_block->end);\n+\t\t\t\t      last_loop_beg_note (jump_block->end));\n \t  jump_block->end = pos;\n \t  if (basic_block_for_insn)\n \t    set_block_for_new_insns (pos, jump_block);\n@@ -3159,29 +3184,38 @@ try_forward_edges (b)\n \t}\n       else if (target == first)\n \t; /* We didn't do anything.  */\n-      else if (redirect_edge_and_branch (e, target))\n+      else\n \t{\n-\t  /* We successfully forwarded the edge.  Now update profile\n-\t     data: for each edge we traversed in the chain, remove\n-\t     the original edge's execution count.  */\n-\t  do\n+\t  /* Save the values now, as the edge may get removed.  */\n+\t  gcov_type edge_count = e->count;\n+\t  int edge_probability = e->probability;\n+\n+\t  if (redirect_edge_and_branch (e, target))\n \t    {\n-\t      first->count -= e->count;\n-\t      first->succ->count -= e->count;\n-\t      first->frequency -= ((e->probability * b->frequency\n-\t\t\t\t    + REG_BR_PROB_BASE / 2)\n-\t\t\t\t   / REG_BR_PROB_BASE);\n-\t      first = first->succ->dest;\n-\t    }\n-\t  while (first != target);\n+\t      /* We successfully forwarded the edge.  Now update profile\n+\t\t data: for each edge we traversed in the chain, remove\n+\t\t the original edge's execution count.  */\n+\t      int edge_frequency = ((edge_probability * b->frequency\n+\t\t\t\t     + REG_BR_PROB_BASE / 2)\n+\t\t\t\t    / REG_BR_PROB_BASE);\n+\n+\t      do\n+\t\t{\n+\t\t  first->count -= edge_count;\n+\t\t  first->succ->count -= edge_count;\n+\t\t  first->frequency -= edge_frequency;\n+\t\t  first = first->succ->dest;\n+\t\t}\n+\t      while (first != target);\n \n-\t  changed = true;\n-\t}\n-      else\n-\t{\n-\t  if (rtl_dump_file)\n-\t    fprintf (rtl_dump_file, \"Forwarding edge %i->%i to %i failed.\\n\",\n-\t\t     b->index, e->dest->index, target->index);\n+\t      changed = true;\n+\t    }\n+\t  else\n+\t    {\n+\t      if (rtl_dump_file)\n+\t\tfprintf (rtl_dump_file, \"Forwarding edge %i->%i to %i failed.\\n\",\n+\t\t\t b->index, e->dest->index, target->index);\n+\t    }\n \t}\n     }\n "}]}