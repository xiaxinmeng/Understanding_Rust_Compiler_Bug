{"sha": "6541fe758b3d491fd9531d610bc344d0cb5e13a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU0MWZlNzU4YjNkNDkxZmQ5NTMxZDYxMGJjMzQ0ZDBjYjVlMTNhNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-12-13T08:08:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-12-13T08:08:46Z"}, "message": "re PR debug/25023 (ICE in def_cfa_1, at dwarf2out.c:792)\n\n\tPR debug/25023\n\tPR target/25293\n\t* expr.c (emit_move_resolve_push): Handle PRE_MODIFY\n\tand POST_MODIFY with CONST_INT adjustment equal to PUSH_ROUNDING.\n\tFix POST_INC/POST_DEC handling if PUSH_ROUNDING is not identity.\n\t* config/i386/i386.md (pushhi2, pushqi2): Use pushl instead of pushw.\n\tSet mode to SI, adjust constraints.\n\t(pushhi2_rex64, pushqi2_rex64): Set mode to DI.\n\t* config/i386/i386.h (PUSH_ROUNDING): Round up to 4 instead of 2 for\n\t32-bit code.\n\n\t* gcc.target/i386/pr25293.c: New test.\n\nFrom-SVN: r108463", "tree": {"sha": "3e381c6cb02cd2615bcd811bfcbbab696131e626", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e381c6cb02cd2615bcd811bfcbbab696131e626"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6541fe758b3d491fd9531d610bc344d0cb5e13a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6541fe758b3d491fd9531d610bc344d0cb5e13a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6541fe758b3d491fd9531d610bc344d0cb5e13a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6541fe758b3d491fd9531d610bc344d0cb5e13a7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d32822515d3fee23547ea9a680f13e27e877795", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d32822515d3fee23547ea9a680f13e27e877795", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d32822515d3fee23547ea9a680f13e27e877795"}], "stats": {"total": 126, "additions": 103, "deletions": 23}, "files": [{"sha": "cc2131f6f740d52768540801cef2d8fa47d7b3dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6541fe758b3d491fd9531d610bc344d0cb5e13a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6541fe758b3d491fd9531d610bc344d0cb5e13a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6541fe758b3d491fd9531d610bc344d0cb5e13a7", "patch": "@@ -1,3 +1,16 @@\n+2005-12-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/25023\n+\tPR target/25293\n+\t* expr.c (emit_move_resolve_push): Handle PRE_MODIFY\n+\tand POST_MODIFY with CONST_INT adjustment equal to PUSH_ROUNDING.\n+\tFix POST_INC/POST_DEC handling if PUSH_ROUNDING is not identity.\n+\t* config/i386/i386.md (pushhi2, pushqi2): Use pushl instead of pushw.\n+\tSet mode to SI, adjust constraints.\n+\t(pushhi2_rex64, pushqi2_rex64): Set mode to DI.\n+\t* config/i386/i386.h (PUSH_ROUNDING): Round up to 4 instead of 2 for\n+\t32-bit code.\n+\n 2005-12-13  Carlos O'Donell <carlos@codesourcery.com>\n \n \t* c-cppbuiltin.c (builtin_define_float_constants): Add"}, {"sha": "de29adbe94844ffdd04e6f17788411e900e602dd", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6541fe758b3d491fd9531d610bc344d0cb5e13a7/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6541fe758b3d491fd9531d610bc344d0cb5e13a7/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=6541fe758b3d491fd9531d610bc344d0cb5e13a7", "patch": "@@ -1374,17 +1374,18 @@ enum reg_class\n \n /* If we generate an insn to push BYTES bytes,\n    this says how many the stack pointer really advances by.\n-   On 386 pushw decrements by exactly 2 no matter what the position was.\n-   On the 386 there is no pushb; we use pushw instead, and this\n-   has the effect of rounding up to 2.\n+   On 386, we have pushw instruction that decrements by exactly 2 no\n+   matter what the position was, there is no pushb.\n+   But as CIE data alignment factor on this arch is -4, we need to make\n+   sure all stack pointer adjustments are in multiple of 4.\n \n    For 64bit ABI we round up to 8 bytes.\n  */\n \n #define PUSH_ROUNDING(BYTES) \\\n   (TARGET_64BIT\t\t     \\\n    ? (((BYTES) + 7) & (-8))  \\\n-   : (((BYTES) + 1) & (-2)))\n+   : (((BYTES) + 3) & (-4)))\n \n /* If defined, the maximum amount of space required for outgoing arguments will\n    be computed and placed into the variable"}, {"sha": "44983193650a5df83d43e5e7c588036127214ba4", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6541fe758b3d491fd9531d610bc344d0cb5e13a7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6541fe758b3d491fd9531d610bc344d0cb5e13a7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6541fe758b3d491fd9531d610bc344d0cb5e13a7", "patch": "@@ -1274,14 +1274,12 @@\n   \"ix86_expand_move (HImode, operands); DONE;\")\n \n (define_insn \"*pushhi2\"\n-  [(set (match_operand:HI 0 \"push_operand\" \"=<,<\")\n-\t(match_operand:HI 1 \"general_no_elim_operand\" \"n,r*m\"))]\n+  [(set (match_operand:HI 0 \"push_operand\" \"=X\")\n+\t(match_operand:HI 1 \"nonmemory_no_elim_operand\" \"rn\"))]\n   \"!TARGET_64BIT\"\n-  \"@\n-   push{w}\\t{|WORD PTR }%1\n-   push{w}\\t%1\"\n+  \"push{l}\\t%k1\"\n   [(set_attr \"type\" \"push\")\n-   (set_attr \"mode\" \"HI\")])\n+   (set_attr \"mode\" \"SI\")])\n \n ;; For 64BIT abi we always round up to 8 bytes.\n (define_insn \"*pushhi2_rex64\"\n@@ -1290,7 +1288,7 @@\n   \"TARGET_64BIT\"\n   \"push{q}\\t%q1\"\n   [(set_attr \"type\" \"push\")\n-   (set_attr \"mode\" \"QI\")])\n+   (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*movhi_1\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,r,m\")\n@@ -1435,18 +1433,16 @@\n   \"ix86_expand_move (QImode, operands); DONE;\")\n \n ;; emit_push_insn when it calls move_by_pieces requires an insn to\n-;; \"push a byte\".  But actually we use pushw, which has the effect\n-;; of rounding the amount pushed up to a halfword.\n+;; \"push a byte\".  But actually we use pushl, which has the effect\n+;; of rounding the amount pushed up to a word.\n \n (define_insn \"*pushqi2\"\n-  [(set (match_operand:QI 0 \"push_operand\" \"=X,X\")\n-\t(match_operand:QI 1 \"nonmemory_no_elim_operand\" \"n,r\"))]\n+  [(set (match_operand:QI 0 \"push_operand\" \"=X\")\n+\t(match_operand:QI 1 \"nonmemory_no_elim_operand\" \"rn\"))]\n   \"!TARGET_64BIT\"\n-  \"@\n-   push{w}\\t{|word ptr }%1\n-   push{w}\\t%w1\"\n+  \"push{l}\\t%k1\"\n   [(set_attr \"type\" \"push\")\n-   (set_attr \"mode\" \"HI\")])\n+   (set_attr \"mode\" \"SI\")])\n \n ;; For 64BIT abi we always round up to 8 bytes.\n (define_insn \"*pushqi2_rex64\"\n@@ -1455,7 +1451,7 @@\n   \"TARGET_64BIT\"\n   \"push{q}\\t%q1\"\n   [(set_attr \"type\" \"push\")\n-   (set_attr \"mode\" \"QI\")])\n+   (set_attr \"mode\" \"DI\")])\n \n ;; Situation is quite tricky about when to choose full sized (SImode) move\n ;; over QImode moves.  For Q_REG -> Q_REG move we use full size only for"}, {"sha": "2e26ef05cdc3004e70355af4f776e6b9d7109b6f", "filename": "gcc/expr.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6541fe758b3d491fd9531d610bc344d0cb5e13a7/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6541fe758b3d491fd9531d610bc344d0cb5e13a7/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=6541fe758b3d491fd9531d610bc344d0cb5e13a7", "patch": "@@ -2852,6 +2852,19 @@ emit_move_resolve_push (enum machine_mode mode, rtx x)\n #endif\n   if (code == PRE_DEC || code == POST_DEC)\n     adjust = -adjust;\n+  else if (code == PRE_MODIFY || code == POST_MODIFY)\n+    {\n+      rtx expr = XEXP (XEXP (x, 0), 1);\n+      HOST_WIDE_INT val;\n+\n+      gcc_assert (GET_CODE (expr) == PLUS || GET_CODE (expr) == MINUS);\n+      gcc_assert (GET_CODE (XEXP (expr, 1)) == CONST_INT);\n+      val = INTVAL (XEXP (expr, 1));\n+      if (GET_CODE (expr) == MINUS)\n+\tval = -val;\n+      gcc_assert (adjust == val || adjust == -val);\n+      adjust = val;\n+    }\n \n   /* Do not use anti_adjust_stack, since we don't want to update\n      stack_pointer_delta.  */\n@@ -2865,13 +2878,13 @@ emit_move_resolve_push (enum machine_mode mode, rtx x)\n     {\n     case PRE_INC:\n     case PRE_DEC:\n+    case PRE_MODIFY:\n       temp = stack_pointer_rtx;\n       break;\n     case POST_INC:\n-      temp = plus_constant (stack_pointer_rtx, -GET_MODE_SIZE (mode));\n-      break;\n     case POST_DEC:\n-      temp = plus_constant (stack_pointer_rtx, GET_MODE_SIZE (mode));\n+    case POST_MODIFY:\n+      temp = plus_constant (stack_pointer_rtx, -adjust);\n       break;\n     default:\n       gcc_unreachable ();"}, {"sha": "5b71d708eb64e3949fa6811993349bde5b917750", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6541fe758b3d491fd9531d610bc344d0cb5e13a7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6541fe758b3d491fd9531d610bc344d0cb5e13a7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6541fe758b3d491fd9531d610bc344d0cb5e13a7", "patch": "@@ -1,3 +1,9 @@\n+2005-12-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/25023\n+\tPR target/25293\n+\t* gcc.target/i386/pr25293.c: New test.\n+\n 2005-12-13  Petr Machata  <machata@post.cz>\n \n \tPR c++/24907"}, {"sha": "6217da2a033e1aef753488ca7ae0659228c36278", "filename": "gcc/testsuite/gcc.target/i386/pr25293.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6541fe758b3d491fd9531d610bc344d0cb5e13a7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr25293.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6541fe758b3d491fd9531d610bc344d0cb5e13a7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr25293.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr25293.c?ref=6541fe758b3d491fd9531d610bc344d0cb5e13a7", "patch": "@@ -0,0 +1,51 @@\n+/* PR target/25293 */\n+/* { dg-do compile } */\n+/* { dg-options \"-mpreferred-stack-boundary=2 -mtune=i586 -O2 -fomit-frame-pointer -g\" } */\n+/* { dg-require-effective-target ilp32 } */\n+\n+struct T { unsigned short t1, t2, t3, t4, t5, t6, t7; };\n+struct S { struct T s1; unsigned short s2, s3; };\n+unsigned short v1;\n+int f1 (void);\n+int f2 (struct T);\n+int f3 (const char *);\n+\n+int\n+foo (struct S *x, struct T y)\n+{\n+  unsigned short a, b, c;\n+  unsigned long d, e;\n+  int f = 0;\n+  y.t6 = 6;\n+  a = y.t7;\n+  b = y.t6;\n+  c = y.t7;\n+  switch (a)\n+    {\n+    case 8:\n+    case 7:\n+      c = 9;\n+      break;\n+    case 1:\n+    case 6:\n+    case 3:\n+      b = 16;\n+      c = 9;\n+      break;\n+    }\n+  if ((f = f1 ()))\n+    goto error;\n+  if ((f = f2 (y)))\n+    goto error;\n+  d = (long) &y;\n+  e = (long) &x->s1;\n+  __asm __volatile (\"\" : \"+D\" (e), \"+S\" (d) :: \"memory\");\n+  x->s2 = b;\n+  x->s3 = c;\n+  f3 (\"foo\");\n+  return 0;\n+error:\n+  if (v1 >= 1)\n+    f3 (\"bar\");\n+  return f;\n+}"}]}