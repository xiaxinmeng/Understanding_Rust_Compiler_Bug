{"sha": "68c8d72a1aa31d750ddeb6a0eb3f472f1498a154", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhjOGQ3MmExYWEzMWQ3NTBkZGViNmEwZWIzZjQ3MmYxNDk4YTE1NA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-08-12T08:58:46Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-12T08:58:46Z"}, "message": "[Ada] Fix incorrect Do_Range_Check on type conversion\n\nThis gets rid of another leak of the Do_Range_Check flag to the back-end\nwhich is specific to expression functions.  No functional changes.\n\n2019-08-12  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* checks.adb (Activate_Range_Check): Remove redundant argument.\n\t(Generate_Range_Check): Likewise.\n\t(Apply_Float_Conversion_Check): Reset the Do_Range_Check flag on\n\tentry and remove redundant condition.\n\nFrom-SVN: r274279", "tree": {"sha": "9e9ebcb62a42d01acce70febd27a9afaa661e19b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e9ebcb62a42d01acce70febd27a9afaa661e19b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68c8d72a1aa31d750ddeb6a0eb3f472f1498a154", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c8d72a1aa31d750ddeb6a0eb3f472f1498a154", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68c8d72a1aa31d750ddeb6a0eb3f472f1498a154", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c8d72a1aa31d750ddeb6a0eb3f472f1498a154/comments", "author": null, "committer": null, "parents": [{"sha": "52c9b7face987062527c612e0a65f084e43c85fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c9b7face987062527c612e0a65f084e43c85fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52c9b7face987062527c612e0a65f084e43c85fd"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "749d96a138956bf5fa20d55e51ffcc7f7a8a7159", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c8d72a1aa31d750ddeb6a0eb3f472f1498a154/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c8d72a1aa31d750ddeb6a0eb3f472f1498a154/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=68c8d72a1aa31d750ddeb6a0eb3f472f1498a154", "patch": "@@ -1,3 +1,10 @@\n+2019-08-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* checks.adb (Activate_Range_Check): Remove redundant argument.\n+\t(Generate_Range_Check): Likewise.\n+\t(Apply_Float_Conversion_Check): Reset the Do_Range_Check flag on\n+\tentry and remove redundant condition.\n+\n 2019-08-02  Alexandre Oliva  <oliva@adacore.com>\n \n \t* libgnat/a-exexpr.adb (Begin_Handler_v1, End_Handler_v1): New."}, {"sha": "813ffec31361738949914bd12d2e9005bb42a5f8", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c8d72a1aa31d750ddeb6a0eb3f472f1498a154/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c8d72a1aa31d750ddeb6a0eb3f472f1498a154/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=68c8d72a1aa31d750ddeb6a0eb3f472f1498a154", "patch": "@@ -445,7 +445,7 @@ package body Checks is\n \n    procedure Activate_Range_Check (N : Node_Id) is\n    begin\n-      Set_Do_Range_Check (N, True);\n+      Set_Do_Range_Check (N);\n       Possible_Local_Raise (N, Standard_Constraint_Error);\n    end Activate_Range_Check;\n \n@@ -2031,6 +2031,12 @@ package body Checks is\n          return;\n       end if;\n \n+      --  Here we will generate an explicit range check, so we don't want to\n+      --  set the Do_Range check flag, since the range check is taken care of\n+      --  by the code we will generate.\n+\n+      Set_Do_Range_Check (Ck_Node, False);\n+\n       if not Compile_Time_Known_Value (LB)\n           or not Compile_Time_Known_Value (HB)\n       then\n@@ -2079,7 +2085,6 @@ package body Checks is\n       if Nkind (Ck_Node) = N_Real_Literal\n         and then Etype (Ck_Node) = Universal_Real\n         and then Is_Integer_Type (Target_Typ)\n-        and then Nkind (Parent (Ck_Node)) = N_Type_Conversion\n       then\n          declare\n             Int_Val : constant Uint := UR_To_Uint (Realval (Ck_Node));\n@@ -6936,7 +6941,7 @@ package body Checks is\n       --  flag set, we do not want to generate the explicit range check code.\n \n       if GNATprove_Mode or else not Expander_Active then\n-         Set_Do_Range_Check (N, True);\n+         Set_Do_Range_Check (N);\n          return;\n       end if;\n "}]}