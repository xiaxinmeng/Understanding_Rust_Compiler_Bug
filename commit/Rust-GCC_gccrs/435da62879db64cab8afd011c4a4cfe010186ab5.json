{"sha": "435da62879db64cab8afd011c4a4cfe010186ab5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM1ZGE2Mjg3OWRiNjRjYWI4YWZkMDExYzRhNGNmZTAxMDE4NmFiNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-01-21T18:47:19Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-01-21T18:47:19Z"}, "message": "re PR rtl-optimization/38879 (scheduler does not look for conflicting alias sets)\n\n\tPR rtl-optimization/38879\n\t* alias.c (base_alias_check): Unaligned access via AND address can\n\talias all surrounding object types except those with sizes equal\n\tor wider than the size of unaligned access.\n\nFrom-SVN: r143549", "tree": {"sha": "73570de17e026178fe37f390385219209b3654e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73570de17e026178fe37f390385219209b3654e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/435da62879db64cab8afd011c4a4cfe010186ab5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435da62879db64cab8afd011c4a4cfe010186ab5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/435da62879db64cab8afd011c4a4cfe010186ab5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435da62879db64cab8afd011c4a4cfe010186ab5/comments", "author": null, "committer": null, "parents": [{"sha": "d597b3ce68d904078ca38bca09c5e8984d934364", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d597b3ce68d904078ca38bca09c5e8984d934364", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d597b3ce68d904078ca38bca09c5e8984d934364"}], "stats": {"total": 103, "additions": 52, "deletions": 51}, "files": [{"sha": "bc511e9e366f5dadd860982eb8a93a5783fb3c71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435da62879db64cab8afd011c4a4cfe010186ab5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435da62879db64cab8afd011c4a4cfe010186ab5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=435da62879db64cab8afd011c4a4cfe010186ab5", "patch": "@@ -1,9 +1,16 @@\n+2009-01-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR rtl-optimization/38879\n+\t* alias.c (base_alias_check): Unaligned access via AND address can\n+\talias all surrounding object types except those with sizes equal\n+\tor wider than the size of unaligned access.\n+\n 2009-01-21  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/26693\n-\t* c-decl.c: (clone_underlying_type): Move this  ...\n+\t* c-decl.c: (clone_underlying_type): Move this ...\n \t* c-common.c (set_underlying_type): ... here.\n-\tAlso, make sure the function  properly sets TYPE_STUB_DECL() on\n+\tAlso, make sure the function properly sets TYPE_STUB_DECL() on\n \tthe newly created typedef variant type.\n \t(is_typedef_decl ): New entry point.\n \t* tree.h: Added a new member member_types_needing_access_check to\n@@ -35,7 +42,7 @@\n \t(version_id): Modify.\n \n 2009-01-20  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n-\tRichard Guenther  <rguenther@suse.de>\n+\t    Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/38747\n \tPR tree-optimization/38748\n@@ -62,14 +69,13 @@\n 2009-01-20  Ben Elliston  <bje@au.ibm.com>\n \n \t* libgcov.c (__gcov_execl, __gcov_execlp, __gcov_execle): Remove\n-\tconst qualifier from arg parameter. Remove unnecessary cast to\n-\tchar *.\n+\tconst qualifier from arg parameter. Remove unnecessary cast to char *.\n \t* gcov-io.h (__gcov_execl, __gcov_execlp, __gcov_execle): Remove\n \tconst qualifier from arg 2.\n \n 2009-01-19  Iain Sandoe  <iain.sandoe@sandoe-acoustics.co.uk>\n \n-        * config/darwin.h: Add static-libgfortran to LINK_SPEC.\n+\t* config/darwin.h: Add static-libgfortran to LINK_SPEC.\n \n 2009-01-19  Vladimir Makarov  <vmakarov@redhat.com>\n \n@@ -228,8 +234,7 @@\n \n 2009-01-15  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n-\t* dce.c (find_call_stack_args, delete_unmarked_insns): Fixed\n-\tcomments.\n+\t* dce.c (find_call_stack_args, delete_unmarked_insns): Fixed comments.\n \t\n 2009-01-14  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -255,9 +260,9 @@\n 2009-01-14  Michael Meissner  <gnu@the-meissners.org>\n \n \tPR target/22599\n-\t* i386.c (print_operand): Add tests for 'D', 'C', 'F', 'f' to make\n-\tsure the insn is a conditional test (bug 22599).  Reformat a few long\n-\tlines.\n+\t* config/i386/i386.c (print_operand): Add tests for 'D', 'C', 'F', 'f'\n+\tto make sure the insn is a conditional test (bug 22599).  Reformat a\n+\tfew long lines.\n \n 2009-01-14  Sebastian Pop  <sebastian.pop@amd.com>\n \n@@ -268,10 +273,6 @@\n \t(graphite_transform_loops): Call cleanup_tree_cfg after all \n \tscops have been code generated.\n \n-2009-01-14  Vladimir Makarov  <vmakarov@redhat.com>\n-\n-\t* testsuite/g++.dg/torture/pr38811.C: New file.\n-\n 2009-01-14  Basile Starynkevitch  <basile@starynkevitch.net>\n \t* doc/gty.texi (Invoking the garbage collector): Added new node\n \tand section documenting ggc_collect.\n@@ -291,10 +292,8 @@\n \n \t* ira-conflicts.c: Include addresses.h for the definition of\n \tbase_reg_class.\n-\t(ira_build_conflicts): Use base_reg_class instead of\n-\tBASE_REG_CLASS.\n-\t* Makefile.in: Add a dependency of ira-conflicts.o on\n-\taddresses.h.\n+\t(ira_build_conflicts): Use base_reg_class instead of BASE_REG_CLASS.\n+\t* Makefile.in: Add a dependency of ira-conflicts.o on addresses.h.\n \n 2009-01-13  Vladimir Makarov  <vmakarov@redhat.com>\n \n@@ -337,13 +336,13 @@\n \n 2009-01-13  Richard Earnshaw  <rearnsha@arm.com>\n \n-\t* arm.c (output_move_double): Don't synthesize thumb-2 ldrd/strd with\n-\ttwo 32-bit instructions.\n+\t* config/arm/arm.c (output_move_double): Don't synthesize thumb-2\n+\tldrd/strd with two 32-bit instructions.\n \n 2009-01-13  Richard Earnshaw  <rearnsha@arm.com>\n \n-\t* arm.c (struct processors): Pass for speed down into cost helper\n-\tfunctions.\n+\t* config/arm/arm.c (struct processors): Pass for speed down into\n+\tcost helper functions.\n \t(const_ok_for_op): Handle COMPARE and inequality nodes.\n \t(arm_rtx_costs_1): Rewrite.\n \t(arm_size_rtx_costs): Update prototype.\n@@ -355,7 +354,7 @@\n 2009-01-13  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/alpha/alpha.c (alpha_legitimate_address_p): Explicit\n-\trelocations of local symbols  wider than UNITS_PER_WORD are not valid.\n+\trelocations of local symbols wider than UNITS_PER_WORD are not valid.\n \t(alpha_legitimize_address): Do not split local symbols wider than\n \tUNITS_PER_WORD into HIGH/LO_SUM parts.\n \n@@ -652,7 +651,7 @@\n 2009-01-06  Jan Hubicka  <jh@suse.cz>\n \n \tPR target/38744\n-\t* i386.c (ix86_expand_call): Use ARRAY_SIZE.\n+\t* config/i386/i386.c (ix86_expand_call): Use ARRAY_SIZE.\n \n 2009-01-06  Gerald Pfeifer  <gerald@pfeifer.com>\n \n@@ -662,14 +661,15 @@\n 2009-01-06  Jan Hubicka  <jh@suse.cz>\n \t    Kai Tietz <kai.tietz@onevision.com>\n \n-\t* i386.md (*msabi_syvabi): Add SSE regs clobbers.\n-\t* i386.c (ix86_expand_call): Add clobbers.\n+\t* config/i386/i386.md (*msabi_syvabi): Add SSE regs clobbers.\n+\t* config/i386/i386.c (ix86_expand_call): Add clobbers.\n \n 2009-01-06  Jan Hubicka  <jh@suse.cz>\n \t    Kai Tietz <kai.tietz@onevision.com>\n \n-\t* i386.h (CONDITIONAL_CALL_USAGE): SSE regs are not used for w64 ABI.\n-\t* i386.c (struct ix86_frame): Add padding0 and nsseregs.\n+\t* config/i386/i386.h (CONDITIONAL_CALL_USAGE): SSE regs are not used\n+\tfor w64 ABI.\n+\t* config/i386/i386.c (struct ix86_frame): Add padding0 and nsseregs.\n \t(ix86_nsaved_regs): Count only general purpose regs.\n \t(ix86_nsaved_sseregs): New.\n \t(ix86_compute_frame_layout): Update nsseregs; set preferred alignment\n@@ -685,9 +685,9 @@\n 2009-01-06  Jan Hubicka  <jh@suse.cz>\n \t    Kai Tietz <kai.tietz@onevision.com>\n \n-\t* i386.h (ACCUMULATE_OUTGOING_ARGS): Enable for MSABI\n-\t* i386.c (init_cumulative_args): Disallow calls of MSABI functions\n-\twhen accumulate outgoing args is off.\n+\t* config/i386/i386.h (ACCUMULATE_OUTGOING_ARGS): Enable for MSABI\n+\t* config/i386/i386.c (init_cumulative_args): Disallow calls of MSABI\n+\tfunctions when accumulate outgoing args is off.\n \n 2009-01-06  H.J. Lu  <hongjiu.lu@intel.com>\n "}, {"sha": "13c94bc6dff0c0dcf66517dc2051cb1356e0f1f0", "filename": "gcc/alias.c", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435da62879db64cab8afd011c4a4cfe010186ab5/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435da62879db64cab8afd011c4a4cfe010186ab5/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=435da62879db64cab8afd011c4a4cfe010186ab5", "patch": "@@ -1559,26 +1559,27 @@ base_alias_check (rtx x, rtx y, enum machine_mode x_mode,\n   if (rtx_equal_p (x_base, y_base))\n     return 1;\n \n-  /* The base addresses of the read and write are different expressions.\n-     If they are both symbols and they are not accessed via AND, there is\n-     no conflict.  We can bring knowledge of object alignment into play\n-     here.  For example, on alpha, \"char a, b;\" can alias one another,\n-     though \"char a; long b;\" cannot.  */\n+  /* The base addresses are different expressions.  If they are not accessed\n+     via AND, there is no conflict.  We can bring knowledge of object\n+     alignment into play here.  For example, on alpha, \"char a, b;\" can\n+     alias one another, though \"char a; long b;\" cannot.  AND addesses may\n+     implicitly alias surrounding objects; i.e. unaligned access in DImode\n+     via AND address can alias all surrounding object types except those\n+     with aligment 8 or higher.  */\n+  if (GET_CODE (x) == AND && GET_CODE (y) == AND)\n+    return 1;\n+  if (GET_CODE (x) == AND\n+      && (GET_CODE (XEXP (x, 1)) != CONST_INT\n+\t  || (int) GET_MODE_UNIT_SIZE (y_mode) < -INTVAL (XEXP (x, 1))))\n+    return 1;\n+  if (GET_CODE (y) == AND\n+      && (GET_CODE (XEXP (y, 1)) != CONST_INT\n+\t  || (int) GET_MODE_UNIT_SIZE (x_mode) < -INTVAL (XEXP (y, 1))))\n+    return 1;\n+\n+  /* Differing symbols not accessed via AND never alias.  */\n   if (GET_CODE (x_base) != ADDRESS && GET_CODE (y_base) != ADDRESS)\n-    {\n-      if (GET_CODE (x) == AND && GET_CODE (y) == AND)\n-\treturn 1;\n-      if (GET_CODE (x) == AND\n-\t  && (GET_CODE (XEXP (x, 1)) != CONST_INT\n-\t      || (int) GET_MODE_UNIT_SIZE (y_mode) < -INTVAL (XEXP (x, 1))))\n-\treturn 1;\n-      if (GET_CODE (y) == AND\n-\t  && (GET_CODE (XEXP (y, 1)) != CONST_INT\n-\t      || (int) GET_MODE_UNIT_SIZE (x_mode) < -INTVAL (XEXP (y, 1))))\n-\treturn 1;\n-      /* Differing symbols never alias.  */\n-      return 0;\n-    }\n+    return 0;\n \n   /* If one address is a stack reference there can be no alias:\n      stack references using different base registers do not alias,"}]}