{"sha": "45986ed939d2187a03b6f55721e51e363968f5be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU5ODZlZDkzOWQyMTg3YTAzYjZmNTU3MjFlNTFlMzYzOTY4ZjViZQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-07-20T17:34:06Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-07-20T17:34:06Z"}, "message": "rs6000: Make lwa_operand use any_memory_operand\n\nTestcase from comex, see https://lwn.net/Articles/793932/ .\n\n\n\t* config/rs6000/predicates.md (lwa_operand): Allow volatile memory.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/volatile-mem.c: New testcase.\n\nFrom-SVN: r273631", "tree": {"sha": "f027ff7802ce0093979508f6ba53cf980d041d08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f027ff7802ce0093979508f6ba53cf980d041d08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45986ed939d2187a03b6f55721e51e363968f5be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45986ed939d2187a03b6f55721e51e363968f5be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45986ed939d2187a03b6f55721e51e363968f5be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45986ed939d2187a03b6f55721e51e363968f5be/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5744faa9851c86d018f32de7363b1064d5348d26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5744faa9851c86d018f32de7363b1064d5348d26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5744faa9851c86d018f32de7363b1064d5348d26"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "459c869796c0596d4c3db0aef81b7edf53c6d457", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45986ed939d2187a03b6f55721e51e363968f5be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45986ed939d2187a03b6f55721e51e363968f5be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45986ed939d2187a03b6f55721e51e363968f5be", "patch": "@@ -1,3 +1,7 @@\n+2019-07-20  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/predicates.md (lwa_operand): Allow volatile memory.\n+\n 2019-07-20  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/predicates.md (volatile_mem_operand): Modernize syntax."}, {"sha": "23d626bc0c40aec5d44e9266bc21bef7f1df07d2", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45986ed939d2187a03b6f55721e51e363968f5be/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45986ed939d2187a03b6f55721e51e363968f5be/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=45986ed939d2187a03b6f55721e51e363968f5be", "patch": "@@ -929,7 +929,7 @@\n \n   if (gpc_reg_operand (inner, mode))\n     return true;\n-  if (!memory_operand (inner, mode))\n+  if (!any_memory_operand (inner, mode))\n     return false;\n \n   addr = XEXP (inner, 0);"}, {"sha": "fc9b4c8d24fa067cfb2d0562e931e7b378d5bfad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45986ed939d2187a03b6f55721e51e363968f5be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45986ed939d2187a03b6f55721e51e363968f5be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=45986ed939d2187a03b6f55721e51e363968f5be", "patch": "@@ -1,3 +1,7 @@\n+2019-07-20  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* gcc.target/powerpc/volatile-mem.c: New testcase.\n+\n 2019-07-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/91204"}, {"sha": "c8a7444b6c334c2a2d4e02f8a53de41307655015", "filename": "gcc/testsuite/gcc.target/powerpc/volatile-mem.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45986ed939d2187a03b6f55721e51e363968f5be/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvolatile-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45986ed939d2187a03b6f55721e51e363968f5be/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvolatile-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvolatile-mem.c?ref=45986ed939d2187a03b6f55721e51e363968f5be", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-options \"-O2 -std=c11\" } */\n+/* { dg-require-effective-target lp64 } */\n+\n+/* This tests if the instructions used for C atomic are optimised properly\n+   as atomic by the target code, too.  */\n+\n+#include <stdatomic.h>\n+\n+int load(_Atomic int *ptr)\n+{\n+        return atomic_load_explicit(ptr, memory_order_relaxed);\n+}\n+\n+/* There should be only two machine instructions, an lwa and a blr: */\n+/* { dg-final { scan-assembler-times {(?n)^\\s+[a-z]} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mlwa\\M} 1 } } */"}]}