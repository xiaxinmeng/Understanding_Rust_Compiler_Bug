{"sha": "ed901e4c617dec0b7388b2410e802545a2a55bb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ5MDFlNGM2MTdkZWMwYjczODhiMjQxMGU4MDI1NDVhMmE1NWJiMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2012-10-07T18:58:04Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-10-07T18:58:04Z"}, "message": "ipa-inline-analysis.c (do_estimate_edge_time): Return actual time spent by the inlined sequence.\n\n\n\t* ipa-inline-analysis.c (do_estimate_edge_time): Return actual\n\ttime spent by the inlined sequence.\n\t(do_estimate_edge_growth): Rename to ...\n\t(do_estimate_edge_time): ... this one; return size of inlined\n\tsequence.\n\t* ipa-inline.h (do_estimate_edge_size): New.\n\t(do_estimate_edge_growth): Remove.\n\t(estimate_edge_size): New function.\n\t(estimate_edge_growth): Use it.\n\nFrom-SVN: r192185", "tree": {"sha": "fe7a69511297e157ec48839981853e440e96771d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe7a69511297e157ec48839981853e440e96771d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed901e4c617dec0b7388b2410e802545a2a55bb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed901e4c617dec0b7388b2410e802545a2a55bb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed901e4c617dec0b7388b2410e802545a2a55bb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed901e4c617dec0b7388b2410e802545a2a55bb0/comments", "author": null, "committer": null, "parents": [{"sha": "e75f8f79f086dac6fa2944875f0fbfdf14644687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e75f8f79f086dac6fa2944875f0fbfdf14644687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e75f8f79f086dac6fa2944875f0fbfdf14644687"}], "stats": {"total": 48, "additions": 33, "deletions": 15}, "files": [{"sha": "d6824e3d7ef8a4d08650fbb7e10af529caf3d151", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed901e4c617dec0b7388b2410e802545a2a55bb0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed901e4c617dec0b7388b2410e802545a2a55bb0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed901e4c617dec0b7388b2410e802545a2a55bb0", "patch": "@@ -1,3 +1,15 @@\n+2012-10-07  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-inline-analysis.c (do_estimate_edge_time): Return actual\n+\ttime spent by the inlined sequence.\n+\t(do_estimate_edge_growth): Rename to ...\n+\t(do_estimate_edge_time): ... this one; return size of inlined\n+\tsequence.\n+\t* ipa-inline.h (do_estimate_edge_size): New.\n+\t(do_estimate_edge_growth): Remove.\n+\t(estimate_edge_size): New function.\n+\t(estimate_edge_growth): Use it.\n+\n 2012-10-07  Jan Hubicka  <jh@suse.cz>\n \n \t* lto-cgraph.c (lto_symtab_encoder_new): New parameter FOR_INPUT."}, {"sha": "6cea94225b05fac3e19f95f88d1cf4768084b19f", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed901e4c617dec0b7388b2410e802545a2a55bb0/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed901e4c617dec0b7388b2410e802545a2a55bb0/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=ed901e4c617dec0b7388b2410e802545a2a55bb0", "patch": "@@ -3312,37 +3312,33 @@ do_estimate_edge_time (struct cgraph_edge *edge)\n   VEC_free (tree, heap, known_binfos);\n   VEC_free (ipa_agg_jump_function_p, heap, known_aggs);\n \n-  ret = (((gcov_type)time\n-\t   - es->call_stmt_time) * edge->frequency\n-\t + CGRAPH_FREQ_BASE / 2) / CGRAPH_FREQ_BASE;\n+  ret = RDIV ((gcov_type)time * edge->frequency,\n+\t      CGRAPH_FREQ_BASE);\n \n   /* When caching, update the cache entry.  */\n   if (edge_growth_cache)\n     {\n-      int ret_size;\n       if ((int)VEC_length (edge_growth_cache_entry, edge_growth_cache)\n \t  <= edge->uid)\n \tVEC_safe_grow_cleared (edge_growth_cache_entry, heap, edge_growth_cache,\n \t\t\t       cgraph_edge_max_uid);\n       VEC_index (edge_growth_cache_entry, edge_growth_cache, edge->uid).time\n \t= ret + (ret >= 0);\n \n-      ret_size = size - es->call_stmt_size;\n-      gcc_checking_assert (es->call_stmt_size);\n       VEC_index (edge_growth_cache_entry, edge_growth_cache, edge->uid).size\n-\t= ret_size + (ret_size >= 0);\n+\t= size + (size >= 0);\n       VEC_index (edge_growth_cache_entry, edge_growth_cache, edge->uid).hints\n \t= hints + 1;\n     }\n   return ret;\n }\n \n \n-/* Estimate the growth of the caller when inlining EDGE.\n+/* Return estimated callee growth after inlining EDGE.\n    Only to be called via estimate_edge_size.  */\n \n int\n-do_estimate_edge_growth (struct cgraph_edge *edge)\n+do_estimate_edge_size (struct cgraph_edge *edge)\n {\n   int size;\n   struct cgraph_node *callee;\n@@ -3375,8 +3371,7 @@ do_estimate_edge_growth (struct cgraph_edge *edge)\n   VEC_free (tree, heap, known_vals);\n   VEC_free (tree, heap, known_binfos);\n   VEC_free (ipa_agg_jump_function_p, heap, known_aggs);\n-  gcc_checking_assert (inline_edge_summary (edge)->call_stmt_size);\n-  return size - inline_edge_summary (edge)->call_stmt_size;\n+  return size;\n }\n \n "}, {"sha": "df8b3a7e2029ae3c6aba82dcbc30a415698e8fe8", "filename": "gcc/ipa-inline.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed901e4c617dec0b7388b2410e802545a2a55bb0/gcc%2Fipa-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed901e4c617dec0b7388b2410e802545a2a55bb0/gcc%2Fipa-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.h?ref=ed901e4c617dec0b7388b2410e802545a2a55bb0", "patch": "@@ -201,7 +201,7 @@ void estimate_ipcp_clone_size_and_time (struct cgraph_node *,\n int do_estimate_growth (struct cgraph_node *);\n void inline_merge_summary (struct cgraph_edge *edge);\n void inline_update_overall_summary (struct cgraph_node *node);\n-int do_estimate_edge_growth (struct cgraph_edge *edge);\n+int do_estimate_edge_size (struct cgraph_edge *edge);\n int do_estimate_edge_time (struct cgraph_edge *edge);\n inline_hints do_estimate_edge_hints (struct cgraph_edge *edge);\n void initialize_growth_caches (void);\n@@ -245,20 +245,31 @@ estimate_growth (struct cgraph_node *node)\n }\n \n \n-/* Return estimated callee growth after inlining EDGE.  */\n+/* Return estimated size of the inline sequence of EDGE.  */\n \n static inline int\n-estimate_edge_growth (struct cgraph_edge *edge)\n+estimate_edge_size (struct cgraph_edge *edge)\n {\n   int ret;\n   if ((int)VEC_length (edge_growth_cache_entry, edge_growth_cache) <= edge->uid\n       || !(ret = VEC_index (edge_growth_cache_entry,\n \t\t\t    edge_growth_cache,\n \t\t\t    edge->uid).size))\n-    return do_estimate_edge_growth (edge);\n+    return do_estimate_edge_size (edge);\n   return ret - (ret > 0);\n }\n \n+/* Return estimated callee growth after inlining EDGE.  */\n+\n+static inline int\n+estimate_edge_growth (struct cgraph_edge *edge)\n+{\n+#ifdef ENABLE_CHECKING\n+  gcc_checking_assert (inline_edge_summary (edge)->call_stmt_size);\n+#endif\n+  return (estimate_edge_size (edge)\n+\t  - inline_edge_summary (edge)->call_stmt_size);\n+}\n \n /* Return estimated callee runtime increase after inlning\n    EDGE.  */"}]}