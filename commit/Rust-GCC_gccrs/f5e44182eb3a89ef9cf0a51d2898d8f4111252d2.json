{"sha": "f5e44182eb3a89ef9cf0a51d2898d8f4111252d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVlNDQxODJlYjNhODllZjljZjBhNTFkMjg5OGQ4ZjQxMTEyNTJkMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-03-28T18:20:58Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-03-28T18:20:58Z"}, "message": "re PR c++/56679 ([C++11] Cannot take sizeof... a template template parameter pack)\n\n\tPR c++/56679\n\t* parser.c (cp_parser_sizeof_pack): Split out from...\n\t(cp_parser_sizeof_operand): ...here.  Require (id).\n\nFrom-SVN: r197213", "tree": {"sha": "b18d61a43d0cc3ed93f82c1521b98a3cfda037e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b18d61a43d0cc3ed93f82c1521b98a3cfda037e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5e44182eb3a89ef9cf0a51d2898d8f4111252d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e44182eb3a89ef9cf0a51d2898d8f4111252d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5e44182eb3a89ef9cf0a51d2898d8f4111252d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e44182eb3a89ef9cf0a51d2898d8f4111252d2/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "374b2837482811e9d5a2ec4b2db0dabd67e6d420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/374b2837482811e9d5a2ec4b2db0dabd67e6d420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/374b2837482811e9d5a2ec4b2db0dabd67e6d420"}], "stats": {"total": 86, "additions": 62, "deletions": 24}, "files": [{"sha": "0709b66966f4bb628f0795f1ea664d981318675f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e44182eb3a89ef9cf0a51d2898d8f4111252d2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e44182eb3a89ef9cf0a51d2898d8f4111252d2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f5e44182eb3a89ef9cf0a51d2898d8f4111252d2", "patch": "@@ -1,5 +1,9 @@\n 2013-03-28  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/56679\n+\t* parser.c (cp_parser_sizeof_pack): Split out from...\n+\t(cp_parser_sizeof_operand): ...here.  Require (id).\n+\n \tPR c++/56701\n \t* semantics.c (finish_this_expr): 'this' is an rvalue.\n \t* typeck.c (cp_build_indirect_ref): Handle NOP_EXPR of 'this'."}, {"sha": "ec6eb085289b7ca55f3662bd67f7055a9c7ecfe8", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 44, "deletions": 21, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e44182eb3a89ef9cf0a51d2898d8f4111252d2/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e44182eb3a89ef9cf0a51d2898d8f4111252d2/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=f5e44182eb3a89ef9cf0a51d2898d8f4111252d2", "patch": "@@ -22618,6 +22618,44 @@ cp_parser_late_parsing_default_args (cp_parser *parser, tree fn)\n   pop_unparsed_function_queues (parser);\n }\n \n+/* Subroutine of cp_parser_sizeof_operand, for handling C++11\n+\n+     sizeof ... ( identifier )\n+\n+   where the 'sizeof' token has already been consumed.  */\n+\n+static tree\n+cp_parser_sizeof_pack (cp_parser *parser)\n+{\n+  /* Consume the `...'.  */\n+  cp_lexer_consume_token (parser->lexer);\n+  maybe_warn_variadic_templates ();\n+\n+  bool paren = cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN);\n+  if (paren)\n+    cp_lexer_consume_token (parser->lexer);\n+  else\n+    permerror (cp_lexer_peek_token (parser->lexer)->location,\n+\t       \"%<sizeof...%> argument must be surrounded by parentheses\");\n+\n+  cp_token *token = cp_lexer_peek_token (parser->lexer);\n+  tree name = cp_parser_identifier (parser);\n+  tree expr = cp_parser_lookup_name_simple (parser, name, token->location);\n+  if (expr == error_mark_node)\n+    cp_parser_name_lookup_error (parser, name, expr, NLE_NULL,\n+\t\t\t\t token->location);\n+  if (TREE_CODE (expr) == TYPE_DECL)\n+    expr = TREE_TYPE (expr);\n+  else if (TREE_CODE (expr) == CONST_DECL)\n+    expr = DECL_INITIAL (expr);\n+  expr = make_pack_expansion (expr);\n+\n+  if (paren)\n+    cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);\n+\n+  return expr;\n+}\n+\n /* Parse the operand of `sizeof' (or a similar operator).  Returns\n    either a TYPE or an expression, depending on the form of the\n    input.  The KEYWORD indicates which kind of expression we have\n@@ -22631,7 +22669,12 @@ cp_parser_sizeof_operand (cp_parser* parser, enum rid keyword)\n   char *tmp;\n   bool saved_integral_constant_expression_p;\n   bool saved_non_integral_constant_expression_p;\n-  bool pack_expansion_p = false;\n+\n+  /* If it's a `...', then we are computing the length of a parameter\n+     pack.  */\n+  if (keyword == RID_SIZEOF\n+      && cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))\n+    return cp_parser_sizeof_pack (parser);\n \n   /* Types cannot be defined in a `sizeof' expression.  Save away the\n      old message.  */\n@@ -22650,19 +22693,6 @@ cp_parser_sizeof_operand (cp_parser* parser, enum rid keyword)\n     = parser->non_integral_constant_expression_p;\n   parser->integral_constant_expression_p = false;\n \n-  /* If it's a `...', then we are computing the length of a parameter\n-     pack.  */\n-  if (keyword == RID_SIZEOF\n-      && cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))\n-    {\n-      /* Consume the `...'.  */\n-      cp_lexer_consume_token (parser->lexer);\n-      maybe_warn_variadic_templates ();\n-\n-      /* Note that this is an expansion.  */\n-      pack_expansion_p = true;\n-    }\n-\n   /* Do not actually evaluate the expression.  */\n   ++cp_unevaluated_operand;\n   ++c_inhibit_evaluation_warnings;\n@@ -22702,20 +22732,13 @@ cp_parser_sizeof_operand (cp_parser* parser, enum rid keyword)\n \t\t\t\t /*attrlist=*/NULL);\n \t}\n     }\n-  else if (pack_expansion_p)\n-    permerror (cp_lexer_peek_token (parser->lexer)->location,\n-\t       \"%<sizeof...%> argument must be surrounded by parentheses\");\n \n   /* If the type-id production did not work out, then we must be\n      looking at the unary-expression production.  */\n   if (!expr)\n     expr = cp_parser_unary_expression (parser, /*address_p=*/false,\n \t\t\t\t       /*cast_p=*/false, NULL);\n \n-  if (pack_expansion_p)\n-    /* Build a pack expansion. */\n-    expr = make_pack_expansion (expr);\n-\n   /* Go back to evaluating expressions.  */\n   --cp_unevaluated_operand;\n   --c_inhibit_evaluation_warnings;"}, {"sha": "2837c856b10a2129ed2da19dc37664bb003d2086", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-sizeof1.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e44182eb3a89ef9cf0a51d2898d8f4111252d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-sizeof1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e44182eb3a89ef9cf0a51d2898d8f4111252d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-sizeof1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-sizeof1.C?ref=f5e44182eb3a89ef9cf0a51d2898d8f4111252d2", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/56679\n+// { dg-require-effective-target c++11 }\n+\n+template <template <typename> class... Args>\n+struct Foo {\n+  static const int value = sizeof...(Args);\n+};\n+\n+template <typename> struct Bar { };\n+\n+const int test = Foo<Bar>::value;"}, {"sha": "ff0211ded150461d1bb8e0026c3025271bc8843a", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic76.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e44182eb3a89ef9cf0a51d2898d8f4111252d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic76.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e44182eb3a89ef9cf0a51d2898d8f4111252d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic76.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic76.C?ref=f5e44182eb3a89ef9cf0a51d2898d8f4111252d2", "patch": "@@ -4,8 +4,8 @@\n \n template<int... N> int foo ()\n {\n-  return sizeof... (N ());\t// { dg-error \"cannot be used as a function\" }\n-  return sizeof... (N) ();\t// { dg-error \"cannot be used as a function\" }\n+  return sizeof... (N ());\t// { dg-error \"\" }\n+  return sizeof... (N) ();\t// { dg-error \"\" }\n }\n \n int bar ()"}, {"sha": "8c6119ff160affedecff060dca3aca2fef9a38a6", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic77.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e44182eb3a89ef9cf0a51d2898d8f4111252d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic77.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e44182eb3a89ef9cf0a51d2898d8f4111252d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic77.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic77.C?ref=f5e44182eb3a89ef9cf0a51d2898d8f4111252d2", "patch": "@@ -12,7 +12,7 @@ template<int... M> struct S\n {\n   template<int... N> static int foo ()\n   {\n-    return sizeof... (pair<M, N>);\t// { dg-error \"mismatched argument pack lengths\" }\n+    return sizeof... (pair<M, N>);\t// { dg-error \"\" }\n   }\n };\n "}]}