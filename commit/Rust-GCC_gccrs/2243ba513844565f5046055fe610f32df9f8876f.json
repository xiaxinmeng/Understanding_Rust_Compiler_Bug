{"sha": "2243ba513844565f5046055fe610f32df9f8876f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI0M2JhNTEzODQ0NTY1ZjUwNDYwNTVmZTYxMGYzMmRmOWY4ODc2Zg==", "commit": {"author": {"name": "Xinliang David Li", "email": "davidxl@google.com", "date": "2014-07-26T00:06:56Z"}, "committer": {"name": "Xinliang David Li", "email": "davidxl@gcc.gnu.org", "date": "2014-07-26T00:06:56Z"}, "message": "Make FDO more tolerant to source changes\n\nFrom-SVN: r213068", "tree": {"sha": "b55990283764ae89e23d3c97dc21584d42c7a7c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b55990283764ae89e23d3c97dc21584d42c7a7c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2243ba513844565f5046055fe610f32df9f8876f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2243ba513844565f5046055fe610f32df9f8876f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2243ba513844565f5046055fe610f32df9f8876f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2243ba513844565f5046055fe610f32df9f8876f/comments", "author": {"login": "vns-mn", "id": 57157229, "node_id": "MDQ6VXNlcjU3MTU3MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/57157229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vns-mn", "html_url": "https://github.com/vns-mn", "followers_url": "https://api.github.com/users/vns-mn/followers", "following_url": "https://api.github.com/users/vns-mn/following{/other_user}", "gists_url": "https://api.github.com/users/vns-mn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vns-mn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vns-mn/subscriptions", "organizations_url": "https://api.github.com/users/vns-mn/orgs", "repos_url": "https://api.github.com/users/vns-mn/repos", "events_url": "https://api.github.com/users/vns-mn/events{/privacy}", "received_events_url": "https://api.github.com/users/vns-mn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "37545fa7226bfa3aa72244dd119a9a82ed26d077", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37545fa7226bfa3aa72244dd119a9a82ed26d077", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37545fa7226bfa3aa72244dd119a9a82ed26d077"}], "stats": {"total": 220, "additions": 207, "deletions": 13}, "files": [{"sha": "b2d5532cb58f1b79ded6ba7f275fea38473814c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2243ba513844565f5046055fe610f32df9f8876f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2243ba513844565f5046055fe610f32df9f8876f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2243ba513844565f5046055fe610f32df9f8876f", "patch": "@@ -1,3 +1,14 @@\n+2014-07-25  Xinliang David Li  <davidxl@google.com>\n+\n+\t* params.def: New parameter.\n+\t* coverage.c (get_coverage_counts): Check new flag.\n+\t(coverage_compute_profile_id): Check new flag.\n+\t(coverage_begin_function): Check new flag.\n+\t(coverage_end_function): Check new flag.\n+\t* value-prof.c (coverage_node_map_initialized_p): New function.\n+\t(init_node_map): Populate map with all functions.\n+\t* doc/invoke.texi: Document new parameter.\n+\n 2014-07-25  Jan Hubicka  <hubicka@ucw.cz>\n \t    Richard Biener <rguenther@suse.de>\n "}, {"sha": "dd7655d80adea58157e23425d856f894c79e7ba6", "filename": "gcc/coverage.c", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2243ba513844565f5046055fe610f32df9f8876f/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2243ba513844565f5046055fe610f32df9f8876f/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=2243ba513844565f5046055fe610f32df9f8876f", "patch": "@@ -54,6 +54,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"filenames.h\"\n #include \"target.h\"\n+#include \"params.h\"\n \n #include \"gcov-io.h\"\n #include \"gcov-io.c\"\n@@ -369,8 +370,13 @@ get_coverage_counts (unsigned counter, unsigned expected,\n                          da_file_name);\n       return NULL;\n     }\n-\n-  elt.ident = current_function_funcdef_no + 1;\n+  if (PARAM_VALUE (PARAM_PROFILE_FUNC_INTERNAL_ID))\n+    elt.ident = current_function_funcdef_no + 1;\n+  else\n+    {\n+      gcc_assert (coverage_node_map_initialized_p ());\n+      elt.ident = cgraph_node::get (cfun->decl)->profile_id;\n+    }\n   elt.ctr = counter;\n   entry = counts_hash->find (&elt);\n   if (!entry || !entry->summary.num)\n@@ -416,7 +422,8 @@ get_coverage_counts (unsigned counter, unsigned expected,\n     }\n   else if (entry->lineno_checksum != lineno_checksum)\n     {\n-      warning (0, \"source locations for function %qE have changed,\"\n+      warning (OPT_Wcoverage_mismatch,\n+               \"source locations for function %qE have changed,\"\n \t       \" the profile data may be out of date\",\n \t       DECL_ASSEMBLER_NAME (current_function_decl));\n     }\n@@ -581,12 +588,13 @@ coverage_compute_profile_id (struct cgraph_node *n)\n     {\n       expanded_location xloc\n \t= expand_location (DECL_SOURCE_LOCATION (n->decl));\n+      bool use_name_only = (PARAM_VALUE (PARAM_PROFILE_FUNC_INTERNAL_ID) == 0);\n \n-      chksum = xloc.line;\n+      chksum = (use_name_only ? 0 : xloc.line);\n       chksum = coverage_checksum_string (chksum, xloc.file);\n       chksum = coverage_checksum_string\n \t(chksum, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (n->decl)));\n-      if (first_global_object_name)\n+      if (!use_name_only && first_global_object_name)\n \tchksum = coverage_checksum_string\n \t  (chksum, first_global_object_name);\n       chksum = coverage_checksum_string\n@@ -645,7 +653,15 @@ coverage_begin_function (unsigned lineno_checksum, unsigned cfg_checksum)\n \n   /* Announce function */\n   offset = gcov_write_tag (GCOV_TAG_FUNCTION);\n-  gcov_write_unsigned (current_function_funcdef_no + 1);\n+  if (PARAM_VALUE (PARAM_PROFILE_FUNC_INTERNAL_ID))\n+    gcov_write_unsigned (current_function_funcdef_no + 1);\n+  else\n+    {\n+      gcc_assert (coverage_node_map_initialized_p ());\n+      gcov_write_unsigned (\n+        cgraph_node::get (current_function_decl)->profile_id);\n+    }\n+\n   gcov_write_unsigned (lineno_checksum);\n   gcov_write_unsigned (cfg_checksum);\n   gcov_write_string (IDENTIFIER_POINTER\n@@ -682,8 +698,15 @@ coverage_end_function (unsigned lineno_checksum, unsigned cfg_checksum)\n       if (!DECL_EXTERNAL (current_function_decl))\n \t{\n \t  item = ggc_alloc<coverage_data> ();\n-\t  \n-\t  item->ident = current_function_funcdef_no + 1;\n+\n+          if (PARAM_VALUE (PARAM_PROFILE_FUNC_INTERNAL_ID))\n+\t    item->ident = current_function_funcdef_no + 1;\n+          else\n+            {\n+              gcc_assert (coverage_node_map_initialized_p ());\n+              item->ident = cgraph_node::get (cfun->decl)->profile_id;\n+            }\n+\n \t  item->lineno_checksum = lineno_checksum;\n \t  item->cfg_checksum = cfg_checksum;\n "}, {"sha": "2ea5293b2775fa7b21dadad05ef1e0f54b1de762", "filename": "gcc/coverage.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2243ba513844565f5046055fe610f32df9f8876f/gcc%2Fcoverage.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2243ba513844565f5046055fe610f32df9f8876f/gcc%2Fcoverage.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.h?ref=2243ba513844565f5046055fe610f32df9f8876f", "patch": "@@ -56,5 +56,6 @@ extern gcov_type *get_coverage_counts (unsigned /*counter*/,\n \t\t\t\t       const struct gcov_ctr_summary **);\n \n extern tree get_gcov_type (void);\n+extern bool coverage_node_map_initialized_p (void);\n \n #endif"}, {"sha": "aaa5a688375af37b75065fdb161b3dc9c4f4f15c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2243ba513844565f5046055fe610f32df9f8876f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2243ba513844565f5046055fe610f32df9f8876f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2243ba513844565f5046055fe610f32df9f8876f", "patch": "@@ -9659,6 +9659,14 @@ Deeper chains are still handled by late inlining.\n Probability (in percent) that C++ inline function with comdat visibility\n are shared across multiple compilation units.  The default value is 20.\n \n+@item profile-func-internal-id\n+@itemx profile-func-internal-id\n+A parameter to control whether to use function internal id in profile\n+database lookup. If the value is 0, the compiler will use id that\n+is based on function assembler name and filename, which makes old profile\n+data more tolerant to source changes such as function reordering etc.\n+The default value is 0.\n+\n @item min-vect-loop-bound\n The minimum number of iterations under which loops are not vectorized\n when @option{-ftree-vectorize} is used.  The number of iterations after"}, {"sha": "cad00e222a5c69379e723d270447eed2e73d8913", "filename": "gcc/params.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2243ba513844565f5046055fe610f32df9f8876f/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2243ba513844565f5046055fe610f32df9f8876f/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=2243ba513844565f5046055fe610f32df9f8876f", "patch": "@@ -874,6 +874,14 @@ DEFPARAM (PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP,\n \t  \"Max basic blocks number in loop for loop invariant motion\",\n \t  10000, 0, 0)\n \n+/* When the parameter is 1, use the internal function id\n+   to look up for profile data. Otherwise, use a more stable\n+   external id based on assembler name and source location. */\n+DEFPARAM (PARAM_PROFILE_FUNC_INTERNAL_ID,\n+         \"profile-func-internal-id\",\n+         \"use internal function id in profile lookup\",\n+          0, 0, 1)\n+\n /* Avoid SLP vectorization of large basic blocks.  */\n DEFPARAM (PARAM_SLP_MAX_INSNS_IN_BB,\n           \"slp-max-insns-in-bb\","}, {"sha": "1b842d8bbf37a9114058a8aa962d3692f5b251a3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2243ba513844565f5046055fe610f32df9f8876f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2243ba513844565f5046055fe610f32df9f8876f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2243ba513844565f5046055fe610f32df9f8876f", "patch": "@@ -1,3 +1,11 @@\n+2014-07-25  Xinliang David Li  <davidxl@google.com>\n+\n+\t* g++.dg/tree-prof/tree-prof.exp: Define macros.\n+\t* g++.dg/tree-prof/reorder_class1.h: New file.\n+\t* g++.dg/tree-prof/reorder_class2.h: New file.\n+\t* g++.dg/tree-prof/reorder.C: New test.\n+\t* g++.dg/tree-prof/morefunc.C: New test.\n+\n 2014-07-25  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \tImplement N4051 - Allow typename in a template template parameter"}, {"sha": "d5cee40cd26953d0b96e9dd3184c5351893a143c", "filename": "gcc/testsuite/g++.dg/tree-prof/morefunc.C", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2243ba513844565f5046055fe610f32df9f8876f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Fmorefunc.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2243ba513844565f5046055fe610f32df9f8876f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Fmorefunc.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Fmorefunc.C?ref=2243ba513844565f5046055fe610f32df9f8876f", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-options \"-O2 -fno-devirtualize --param=profile-func-internal-id=0 -fdump-ipa-profile -Wno-attributes -Wno-coverage-mismatch\" } */\n+#include \"reorder_class1.h\"\n+#include \"reorder_class2.h\"\n+\n+int g;\n+\n+#ifdef _PROFILE_USE\n+/* Another function not existing\n+ * in profile-gen  */\n+\n+__attribute__((noinline)) void\n+new_func (int i)\n+{\n+   g += i;\n+}\n+#endif\n+\n+static __attribute__((always_inline))\n+void test1 (A *tc)\n+{\n+  int i;\n+  for (i = 0; i < 1000; i++)\n+     g += tc->foo(); \n+   if (g<100) g++;\n+}\n+\n+static __attribute__((always_inline))\n+void test2 (B *tc)\n+{\n+  int i;\n+  for (i = 0; i < 1000; i++)\n+     g += tc->foo();\n+}\n+\n+\n+__attribute__((noinline)) void test_a(A *ap) { test1 (ap); }\n+__attribute__((noinline)) void test_b(B *bp) { test2 (bp); }\n+\n+\n+int main()\n+{\n+  A* ap = new A();\n+  B* bp = new B();\n+\n+  test_a(ap);\n+  test_b(bp);\n+\n+#ifdef _PROFILE_USE\n+  new_func(10);\n+#endif\n+\n+}\n+\n+/* { dg-final-use { scan-ipa-dump-times \"Indirect call -> direct call\" 2 \"profile\" } } */\n+"}, {"sha": "223bcf94f4fa50c7169f845b961d1ab71df6364f", "filename": "gcc/testsuite/g++.dg/tree-prof/reorder.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2243ba513844565f5046055fe610f32df9f8876f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Freorder.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2243ba513844565f5046055fe610f32df9f8876f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Freorder.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Freorder.C?ref=2243ba513844565f5046055fe610f32df9f8876f", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-options \"-O2 -fno-devirtualize --param=profile-func-internal-id=0 -fdump-ipa-profile -Wno-coverage-mismatch -Wno-attributes\" } */\n+\n+#ifdef _PROFILE_USE\n+#include \"reorder_class1.h\"\n+#include \"reorder_class2.h\"\n+#else\n+#include \"reorder_class2.h\"\n+#include \"reorder_class1.h\"\n+#endif\n+\n+int g;\n+static __attribute__((always_inline))\n+void test1 (A *tc)\n+{\n+  int i;\n+  for (i = 0; i < 1000; i++)\n+     g += tc->foo(); \n+   if (g<100) g++;\n+}\n+\n+static __attribute__((always_inline))\n+void test2 (B *tc)\n+{\n+  int i;\n+  for (i = 0; i < 1000; i++)\n+     g += tc->foo();\n+}\n+\n+\n+#ifdef _PROFILE_USE\n+__attribute__((noinline)) void test_a(A *ap) { test1 (ap); }\n+__attribute__((noinline)) void test_b(B *bp) { test2 (bp); }\n+#else\n+__attribute__((noinline)) void test_b(B *bp) { test2 (bp); }\n+__attribute__((noinline)) void test_a(A *ap) { test1 (ap); }\n+#endif\n+\n+int main()\n+{\n+  A* ap = new A();\n+  B* bp = new B();\n+\n+  test_a(ap);\n+  test_b(bp);\n+}\n+\n+/* { dg-final-use { scan-ipa-dump-times \"Indirect call -> direct call\" 2 \"profile\" } } */\n+"}, {"sha": "62a1e923c755041fb002f429d09986b70cdc8897", "filename": "gcc/testsuite/g++.dg/tree-prof/reorder_class1.h", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2243ba513844565f5046055fe610f32df9f8876f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Freorder_class1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2243ba513844565f5046055fe610f32df9f8876f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Freorder_class1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Freorder_class1.h?ref=2243ba513844565f5046055fe610f32df9f8876f", "patch": "@@ -0,0 +1,11 @@\n+struct A {\n+  virtual int foo();\n+};\n+\n+int A::foo()\n+{\n+  return 1;\n+}\n+\n+\n+"}, {"sha": "ee3ed109b9eef616b4c366a3a2e87b932991ba6f", "filename": "gcc/testsuite/g++.dg/tree-prof/reorder_class2.h", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2243ba513844565f5046055fe610f32df9f8876f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Freorder_class2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2243ba513844565f5046055fe610f32df9f8876f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Freorder_class2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Freorder_class2.h?ref=2243ba513844565f5046055fe610f32df9f8876f", "patch": "@@ -0,0 +1,12 @@\n+\n+struct B {\n+  virtual int foo();\n+};\n+\n+int B::foo()\n+{\n+  return 2;\n+}\n+\n+\n+"}, {"sha": "f12ddaf86dc534ce0beb62fcd926f6ba36c334ed", "filename": "gcc/testsuite/g++.dg/tree-prof/tree-prof.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2243ba513844565f5046055fe610f32df9f8876f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Ftree-prof.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2243ba513844565f5046055fe610f32df9f8876f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Ftree-prof.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Ftree-prof.exp?ref=2243ba513844565f5046055fe610f32df9f8876f", "patch": "@@ -42,8 +42,8 @@ set PROFOPT_OPTIONS [list {}]\n # These are globals used by profopt-execute.  The first is options\n # needed to generate profile data, the second is options to use the\n # profile data.\n-set profile_option \"-fprofile-generate\"\n-set feedback_option \"-fprofile-use\"\n+set profile_option \"-fprofile-generate -D_PROFILE_GENERATE\"\n+set feedback_option \"-fprofile-use -D_PROFILE_USE\"\n \n foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.C]] {\n     # If we're only testing specific files and this isn't one of them, skip it."}, {"sha": "3e51539c72d6d8840dc09f39241f46c69bffe03e", "filename": "gcc/value-prof.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2243ba513844565f5046055fe610f32df9f8876f/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2243ba513844565f5046055fe610f32df9f8876f/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=2243ba513844565f5046055fe610f32df9f8876f", "patch": "@@ -1210,7 +1210,17 @@ gimple_mod_subtract_transform (gimple_stmt_iterator *si)\n   return true;\n }\n \n-static pointer_map_t *cgraph_node_map;\n+static pointer_map_t *cgraph_node_map = 0;\n+\n+/* Returns true if node graph is initialized. This\n+   is used to test if profile_id has been created\n+   for cgraph_nodes.  */\n+\n+bool\n+coverage_node_map_initialized_p (void)\n+{\n+  return cgraph_node_map != 0;\n+}\n \n /* Initialize map from PROFILE_ID to CGRAPH_NODE.\n    When LOCAL is true, the PROFILE_IDs are computed.  when it is false we assume\n@@ -1223,8 +1233,7 @@ init_node_map (bool local)\n   cgraph_node_map = pointer_map_create ();\n \n   FOR_EACH_DEFINED_FUNCTION (n)\n-    if (n->has_gimple_body_p ()\n-\t&& !n->only_called_directly_p ())\n+    if (n->has_gimple_body_p ())\n       {\n \tvoid **val;\n \tif (local)"}]}