{"sha": "445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "node_id": "C_kwDOANBUbNoAKDQ0NWQ4ZGVmZmI2YzliYzFmNGE1ZWQwYThlMDJkN2YzMWQzY2FlYzc", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-06-22T15:03:33Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-06-22T15:57:56Z"}, "message": "d:  Merge upstream dmd 6203135dc, druntime e150cca1, phobos a4a18d21c.\n\nD front-end changes:\n\n    - Input parameters can now be applied on extern(C++) functions to\n      bind to `const &' when the `-fpreview=in' flag is in effect.\n\nD runtime changes:\n\n    - Run-time flag `--DRT-oncycle=deprecate' has been removed.\n\nPhobos changes:\n\n    - Removed std.experimental.logger's capability to set the minimal\n      LogLevel at compile time.\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd 6203135dc.\n\t* typeinfo.cc (TypeInfoVisitor::visit (TypeInfoStructDeclaration *)):\n\tUpdate for new front-end interface.\n\t(SpeculativeTypeVisitor::visit (TypeStruct *)): Likewise.\n\nlibphobos/ChangeLog:\n\n\t* libdruntime/MERGE: Merge upstream druntime e150cca1.\n\t* src/MERGE: Merge upstream phobos a4a18d21c.\n\t* testsuite/libphobos.cycles/cycles.exp (cycle_test_list): Update\n\texpected result of deprecate test.", "tree": {"sha": "4b9aa4224d827abfe081adf2289af34436d3e552", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b9aa4224d827abfe081adf2289af34436d3e552"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d844478ab47a16c8ae65f253fd1cdc685c7951fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d844478ab47a16c8ae65f253fd1cdc685c7951fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d844478ab47a16c8ae65f253fd1cdc685c7951fc"}], "stats": {"total": 1844, "additions": 1071, "deletions": 773}, "files": [{"sha": "d1e3dc163122af29a85725852e2352f69abf5b27", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -1,4 +1,4 @@\n-821ed393d428c7db5a48623e77d43f5647d5c6a2\n+6203135dcf0112d3211add0cbfb22fecc5df1af4\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "d91e35ee8c25b94e64613d8e19b4452ae6301f5f", "filename": "gcc/d/dmd/aggregate.h", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2Faggregate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2Faggregate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Faggregate.h?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -159,17 +159,6 @@ struct StructFlags\n class StructDeclaration : public AggregateDeclaration\n {\n public:\n-    bool zeroInit;              // !=0 if initialize with 0 fill\n-    bool hasIdentityAssign;     // true if has identity opAssign\n-    bool hasBlitAssign;         // true if opAssign is a blit\n-    bool hasIdentityEquals;     // true if has identity opEquals\n-    bool hasNoFields;           // has no fields\n-    bool hasCopyCtor;           // copy constructor\n-    // Even if struct is defined as non-root symbol, some built-in operations\n-    // (e.g. TypeidExp, NewExp, ArrayLiteralExp, etc) request its TypeInfo.\n-    // For those, today TypeInfo_Struct is generated in COMDAT.\n-    bool requestTypeInfo;\n-\n     FuncDeclarations postblits; // Array of postblit functions\n     FuncDeclaration *postblit;  // aggregate postblit\n \n@@ -179,18 +168,37 @@ class StructDeclaration : public AggregateDeclaration\n     static FuncDeclaration *xerreq;      // object.xopEquals\n     static FuncDeclaration *xerrcmp;     // object.xopCmp\n \n-    structalign_t alignment;    // alignment applied outside of the struct\n-    ThreeState ispod;           // if struct is POD\n-\n     // ABI-specific type(s) if the struct can be passed in registers\n     TypeTuple *argTypes;\n \n+    structalign_t alignment;    // alignment applied outside of the struct\n+    ThreeState ispod;           // if struct is POD\n+private:\n+    uint8_t bitFields;\n+public:\n     static StructDeclaration *create(const Loc &loc, Identifier *id, bool inObject);\n     StructDeclaration *syntaxCopy(Dsymbol *s) override;\n     Dsymbol *search(const Loc &loc, Identifier *ident, int flags = SearchLocalsOnly) override final;\n     const char *kind() const override;\n     void finalizeSize() override final;\n     bool isPOD();\n+    bool zeroInit() const;          // !=0 if initialize with 0 fill\n+    bool zeroInit(bool v);\n+    bool hasIdentityAssign() const; // true if has identity opAssign\n+    bool hasIdentityAssign(bool v);\n+    bool hasBlitAssign() const;     // true if opAssign is a blit\n+    bool hasBlitAssign(bool v);\n+    bool hasIdentityEquals() const; // true if has identity opEquals\n+    bool hasIdentityEquals(bool v);\n+    bool hasNoFields() const;       // has no fields\n+    bool hasNoFields(bool v);\n+    bool hasCopyCtor() const;       // copy constructor\n+    bool hasCopyCtor(bool v);\n+    // Even if struct is defined as non-root symbol, some built-in operations\n+    // (e.g. TypeidExp, NewExp, ArrayLiteralExp, etc) request its TypeInfo.\n+    // For those, today TypeInfo_Struct is generated in COMDAT.\n+    bool requestTypeInfo() const;\n+    bool requestTypeInfo(bool v);\n \n     StructDeclaration *isStructDeclaration() override final { return this; }\n     void accept(Visitor *v) override { v->visit(this); }"}, {"sha": "cf4ccbb955c6aa1a97cc29735d08759d5274383e", "filename": "gcc/d/dmd/clone.d", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2Fclone.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2Fclone.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fclone.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -404,7 +404,12 @@ bool needOpEquals(StructDeclaration sd)\n {\n     //printf(\"StructDeclaration::needOpEquals() %s\\n\", sd.toChars());\n     if (sd.isUnionDeclaration())\n-        goto Ldontneed;\n+    {\n+        /* If a union has only one field, treat it like a struct\n+         */\n+        if (sd.fields.length != 1)\n+            goto Ldontneed;\n+    }\n     if (sd.hasIdentityEquals)\n         goto Lneed;\n     /* If any of the fields has an opEquals, then we\n@@ -421,7 +426,7 @@ bool needOpEquals(StructDeclaration sd)\n         if (tvbase.ty == Tstruct)\n         {\n             TypeStruct ts = cast(TypeStruct)tvbase;\n-            if (ts.sym.isUnionDeclaration())\n+            if (ts.sym.isUnionDeclaration() && ts.sym.fields.length != 1)\n                 continue;\n             if (needOpEquals(ts.sym))\n                 goto Lneed;"}, {"sha": "ef322f13da504857a631cc2e257ae5d397f265ca", "filename": "gcc/d/dmd/denum.d", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2Fdenum.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2Fdenum.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdenum.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -54,9 +54,17 @@ extern (C++) final class EnumDeclaration : ScopeDsymbol\n     Expression maxval;\n     Expression minval;\n     Expression defaultval;  // default initializer\n-    bool isdeprecated;\n-    bool added;\n-    int inuse;\n+\n+    // `bool` fields that are compacted into bit fields in a string mixin\n+    private extern (D) static struct BitFields\n+    {\n+        bool isdeprecated;\n+        bool added;\n+        bool inuse;\n+    }\n+\n+    import dmd.common.bitfields : generateBitFields;\n+    mixin(generateBitFields!(BitFields, ubyte));\n \n     extern (D) this(const ref Loc loc, Identifier ident, Type memtype)\n     {"}, {"sha": "4126a8adc68c388baaa5a7034d164c4c3abb6404", "filename": "gcc/d/dmd/dstruct.d", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2Fdstruct.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2Fdstruct.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdstruct.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -192,17 +192,6 @@ enum StructFlags : int\n  */\n extern (C++) class StructDeclaration : AggregateDeclaration\n {\n-    bool zeroInit;              // !=0 if initialize with 0 fill\n-    bool hasIdentityAssign;     // true if has identity opAssign\n-    bool hasBlitAssign;         // true if opAssign is a blit\n-    bool hasIdentityEquals;     // true if has identity opEquals\n-    bool hasNoFields;           // has no fields\n-    bool hasCopyCtor;           // copy constructor\n-    // Even if struct is defined as non-root symbol, some built-in operations\n-    // (e.g. TypeidExp, NewExp, ArrayLiteralExp, etc) request its TypeInfo.\n-    // For those, today TypeInfo_Struct is generated in COMDAT.\n-    bool requestTypeInfo;\n-\n     FuncDeclarations postblits; // Array of postblit functions\n     FuncDeclaration postblit;   // aggregate postblit\n \n@@ -212,11 +201,29 @@ extern (C++) class StructDeclaration : AggregateDeclaration\n     extern (C++) __gshared FuncDeclaration xerreq;   // object.xopEquals\n     extern (C++) __gshared FuncDeclaration xerrcmp;  // object.xopCmp\n \n+    // ABI-specific type(s) if the struct can be passed in registers\n+    TypeTuple argTypes;\n+\n     structalign_t alignment;    // alignment applied outside of the struct\n     ThreeState ispod;           // if struct is POD\n \n-    // ABI-specific type(s) if the struct can be passed in registers\n-    TypeTuple argTypes;\n+    // `bool` fields that are compacted into bit fields in a string mixin\n+    private extern (D) static struct BitFields\n+    {\n+        bool zeroInit;              // !=0 if initialize with 0 fill\n+        bool hasIdentityAssign;     // true if has identity opAssign\n+        bool hasBlitAssign;         // true if opAssign is a blit\n+        bool hasIdentityEquals;     // true if has identity opEquals\n+        bool hasNoFields;           // has no fields\n+        bool hasCopyCtor;           // copy constructor\n+        // Even if struct is defined as non-root symbol, some built-in operations\n+        // (e.g. TypeidExp, NewExp, ArrayLiteralExp, etc) request its TypeInfo.\n+        // For those, today TypeInfo_Struct is generated in COMDAT.\n+        bool requestTypeInfo;\n+    }\n+\n+    import dmd.common.bitfields : generateBitFields;\n+    mixin(generateBitFields!(BitFields, ubyte));\n \n     extern (D) this(const ref Loc loc, Identifier id, bool inObject)\n     {"}, {"sha": "7fd478187593acb3357cb5a53fa6332aa84cbfff", "filename": "gcc/d/dmd/dsymbolsem.d", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2Fdsymbolsem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2Fdsymbolsem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbolsem.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -49,6 +49,7 @@ import dmd.identifier;\n import dmd.importc;\n import dmd.init;\n import dmd.initsem;\n+import dmd.intrange;\n import dmd.hdrgen;\n import dmd.mtype;\n import dmd.mustuse;\n@@ -2177,6 +2178,13 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n             assert(ed.memtype);\n             int nextValue = 0;        // C11 6.7.2.2-3 first member value defaults to 0\n \n+            // C11 6.7.2.2-2 value must be representable as an int.\n+            // The sizemask represents all values that int will fit into,\n+            // from 0..uint.max.  We want to cover int.min..uint.max.\n+            const mask = Type.tint32.sizemask();\n+            IntRange ir = IntRange(SignExtendedNumber(~(mask >> 1), true),\n+                                   SignExtendedNumber(mask));\n+\n             void emSemantic(EnumMember em, ref int nextValue)\n             {\n                 static void errorReturn(EnumMember em)\n@@ -2206,21 +2214,32 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n                         em.error(\"enum member must be an integral constant expression, not `%s` of type `%s`\", e.toChars(), e.type.toChars());\n                         return errorReturn(em);\n                     }\n-                    const sinteger_t v = ie.toInteger();\n-                    if (v < int.min || v > uint.max)\n+                    if (!ir.contains(getIntRange(ie)))\n                     {\n                         // C11 6.7.2.2-2\n                         em.error(\"enum member value `%s` does not fit in an `int`\", e.toChars());\n                         return errorReturn(em);\n                     }\n-                    em.value = new IntegerExp(em.loc, cast(int)v, Type.tint32);\n-                    nextValue = cast(int)v;\n+                    nextValue = cast(int)ie.toInteger();\n+                    em.value = new IntegerExp(em.loc, nextValue, Type.tint32);\n                 }\n                 else\n                 {\n+                    // C11 6.7.2.2-3 add 1 to value of previous enumeration constant\n+                    bool first = (em == (*em.ed.members)[0]);\n+                    if (!first)\n+                    {\n+                        import core.checkedint : adds;\n+                        bool overflow;\n+                        nextValue = adds(nextValue, 1, overflow);\n+                        if (overflow)\n+                        {\n+                            em.error(\"initialization with `%d+1` causes overflow for type `int`\", nextValue - 1);\n+                            return errorReturn(em);\n+                        }\n+                    }\n                     em.value = new IntegerExp(em.loc, nextValue, Type.tint32);\n                 }\n-                ++nextValue; // C11 6.7.2.2-3 add 1 to value of previous enumeration constant\n                 em.semanticRun = PASS.semanticdone;\n             }\n "}, {"sha": "723cebc7e0ad00cf3ad33273f1397ca304ceccdd", "filename": "gcc/d/dmd/enum.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2Fenum.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2Fenum.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fenum.h?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -35,10 +35,15 @@ class EnumDeclaration final : public ScopeDsymbol\n     Expression *maxval;\n     Expression *minval;\n     Expression *defaultval;     // default initializer\n-\n-    bool isdeprecated;\n-    bool added;\n-    int inuse;\n+private:\n+    uint8_t bitFields;\n+public:\n+    bool isdeprecated() const;\n+    bool isdeprecated(bool v);\n+    bool added() const;\n+    bool added(bool v);\n+    bool inuse() const;\n+    bool inuse(bool v);\n \n     EnumDeclaration *syntaxCopy(Dsymbol *s) override;\n     void addMember(Scope *sc, ScopeDsymbol *sds) override;"}, {"sha": "0646f57c5cdece5a19ad6593f164400b4eeb8d0f", "filename": "gcc/d/dmd/escape.d", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2Fescape.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2Fescape.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fescape.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -328,12 +328,12 @@ bool checkParamArgumentEscape(Scope* sc, FuncDeclaration fdc, Parameter par, STC\n         else if (par)\n         {\n             result |= sc.setUnsafeDIP1000(gag, arg.loc,\n-                desc ~ \" `%s` assigned to non-scope parameter `%s`\", v, par);\n+                desc ~ \" `%s` assigned to non-scope parameter `%s` calling `%s`\", v, par, fdc);\n         }\n         else\n         {\n             result |= sc.setUnsafeDIP1000(gag, arg.loc,\n-                desc ~ \" `%s` assigned to non-scope parameter `this`\", v);\n+                desc ~ \" `%s` assigned to non-scope parameter `this` calling `%s`\", v, fdc);\n         }\n     }\n \n@@ -1230,9 +1230,24 @@ private bool checkReturnEscapeImpl(Scope* sc, Expression e, bool refs, bool gag)\n                 !(!refs && sc.func.isFuncDeclaration().getLevel(pfunc, sc.intypeof) > 0)\n                )\n             {\n-                // https://issues.dlang.org/show_bug.cgi?id=17029\n-                result |= sc.setUnsafeDIP1000(gag, e.loc, \"scope variable `%s` may not be returned\", v);\n-                continue;\n+                if (v.isParameter() && !(v.storage_class & STC.return_))\n+                {\n+                    // https://issues.dlang.org/show_bug.cgi?id=23191\n+                    if (!gag)\n+                    {\n+                        previewErrorFunc(sc.isDeprecated(), global.params.useDIP1000)(e.loc,\n+                            \"scope parameter `%s` may not be returned\", v.toChars()\n+                        );\n+                        result = true;\n+                        continue;\n+                    }\n+                }\n+                else\n+                {\n+                    // https://issues.dlang.org/show_bug.cgi?id=17029\n+                    result |= sc.setUnsafeDIP1000(gag, e.loc, \"scope variable `%s` may not be returned\", v);\n+                    continue;\n+                }\n             }\n         }\n         else if (v.storage_class & STC.variadic && p == sc.func)\n@@ -2492,40 +2507,43 @@ private void addMaybe(VarDeclaration va, VarDeclaration v)\n  *   fmt = printf-style format string\n  *   arg0  = (optional) argument for first %s format specifier\n  *   arg1  = (optional) argument for second %s format specifier\n+ *   arg2  = (optional) argument for third %s format specifier\n  * Returns: whether an actual safe error (not deprecation) occured\n  */\n-private bool setUnsafePreview(Scope* sc, FeatureState fs, bool gag, Loc loc, const(char)* msg, RootObject arg0 = null, RootObject arg1 = null)\n+private bool setUnsafePreview(Scope* sc, FeatureState fs, bool gag, Loc loc, const(char)* msg,\n+    RootObject arg0 = null, RootObject arg1 = null, RootObject arg2 = null)\n {\n     if (fs == FeatureState.disabled)\n     {\n         return false;\n     }\n     else if (fs == FeatureState.enabled)\n     {\n-        return sc.setUnsafe(gag, loc, msg, arg0, arg1);\n+        return sc.setUnsafe(gag, loc, msg, arg0, arg1, arg2);\n     }\n     else\n     {\n         if (sc.func.isSafeBypassingInference())\n         {\n             if (!gag)\n                 previewErrorFunc(sc.isDeprecated(), fs)(\n-                    loc, msg, arg0 ? arg0.toChars() : \"\", arg1 ? arg1.toChars() : \"\"\n+                    loc, msg, arg0 ? arg0.toChars() : \"\", arg1 ? arg1.toChars() : \"\", arg2 ? arg2.toChars() : \"\"\n                 );\n         }\n         else if (!sc.func.safetyViolation)\n         {\n             import dmd.func : AttributeViolation;\n-            sc.func.safetyViolation = new AttributeViolation(loc, msg, arg0, arg1);\n+            sc.func.safetyViolation = new AttributeViolation(loc, msg, arg0, arg1, arg2);\n         }\n         return false;\n     }\n }\n \n // `setUnsafePreview` partially evaluated for dip1000\n-private bool setUnsafeDIP1000(Scope* sc, bool gag, Loc loc, const(char)* msg, RootObject arg0 = null, RootObject arg1 = null)\n+private bool setUnsafeDIP1000(Scope* sc, bool gag, Loc loc, const(char)* msg,\n+    RootObject arg0 = null, RootObject arg1 = null, RootObject arg2 = null)\n {\n-    return setUnsafePreview(sc, global.params.useDIP1000, gag, loc, msg, arg0, arg1);\n+    return setUnsafePreview(sc, global.params.useDIP1000, gag, loc, msg, arg0, arg1, arg2);\n }\n \n /***************************************"}, {"sha": "ceecf4b5e74f7a9fb719057ca124f06a68bb6371", "filename": "gcc/d/dmd/expression.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2Fexpression.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2Fexpression.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -1438,7 +1438,7 @@ extern (C++) abstract class Expression : ASTNode\n             else if (!sc.func.safetyViolation)\n             {\n                 import dmd.func : AttributeViolation;\n-                sc.func.safetyViolation = new AttributeViolation(this.loc, null, f, null);\n+                sc.func.safetyViolation = new AttributeViolation(this.loc, null, f, null, null);\n             }\n         }\n         return false;"}, {"sha": "83bc2eab1feee48967fbe8c8f0a2c8c857ca056c", "filename": "gcc/d/dmd/func.d", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2Ffunc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2Ffunc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ffunc.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -1476,25 +1476,27 @@ extern (C++) class FuncDeclaration : Declaration\n      *   fmt = printf-style format string\n      *   arg0  = (optional) argument for first %s format specifier\n      *   arg1  = (optional) argument for second %s format specifier\n+     *   arg2  = (optional) argument for third %s format specifier\n      * Returns: whether there's a safe error\n      */\n     extern (D) final bool setUnsafe(\n-        bool gag = false, Loc loc = Loc.init, const(char)* fmt = null, RootObject arg0 = null, RootObject arg1 = null)\n+        bool gag = false, Loc loc = Loc.init, const(char)* fmt = null,\n+        RootObject arg0 = null, RootObject arg1 = null, RootObject arg2 = null)\n     {\n         if (flags & FUNCFLAG.safetyInprocess)\n         {\n             flags &= ~FUNCFLAG.safetyInprocess;\n             type.toTypeFunction().trust = TRUST.system;\n             if (fmt || arg0)\n-                safetyViolation = new AttributeViolation(loc, fmt, arg0, arg1);\n+                safetyViolation = new AttributeViolation(loc, fmt, arg0, arg1, arg2);\n \n             if (fes)\n                 fes.func.setUnsafe();\n         }\n         else if (isSafe())\n         {\n             if (!gag && fmt)\n-                .error(loc, fmt, arg0 ? arg0.toChars() : \"\", arg1 ? arg1.toChars() : \"\");\n+                .error(loc, fmt, arg0 ? arg0.toChars() : \"\", arg1 ? arg1.toChars() : \"\", arg2 ? arg2.toChars() : \"\");\n \n             return true;\n         }\n@@ -4370,10 +4372,12 @@ extern (C++) final class NewDeclaration : FuncDeclaration\n  *   fmt = printf-style format string\n  *   arg0  = (optional) argument for first %s format specifier\n  *   arg1  = (optional) argument for second %s format specifier\n+ *   arg2  = (optional) argument for third %s format specifier\n  * Returns: whether there's a safe error\n  */\n bool setUnsafe(Scope* sc,\n-    bool gag = false, Loc loc = Loc.init, const(char)* fmt = null, RootObject arg0 = null, RootObject arg1 = null)\n+    bool gag = false, Loc loc = Loc.init, const(char)* fmt = null,\n+    RootObject arg0 = null, RootObject arg1 = null, RootObject arg2 = null)\n {\n     // TODO:\n     // For @system variables, unsafe initializers at global scope should mark\n@@ -4394,13 +4398,13 @@ bool setUnsafe(Scope* sc,\n         {\n             // Message wil be gagged, but still call error() to update global.errors and for\n             // -verrors=spec\n-            .error(loc, fmt, arg0 ? arg0.toChars() : \"\", arg1 ? arg1.toChars() : \"\");\n+            .error(loc, fmt, arg0 ? arg0.toChars() : \"\", arg1 ? arg1.toChars() : \"\", arg2 ? arg2.toChars() : \"\");\n             return true;\n         }\n         return false;\n     }\n \n-    return sc.func.setUnsafe(gag, loc, fmt, arg0, arg1);\n+    return sc.func.setUnsafe(gag, loc, fmt, arg0, arg1, arg2);\n }\n \n /// Stores a reason why a function failed to infer a function attribute like `@safe` or `pure`\n@@ -4421,6 +4425,8 @@ struct AttributeViolation\n     RootObject arg0 = null;\n     /// ditto\n     RootObject arg1 = null;\n+    /// ditto\n+    RootObject arg2 = null;\n }\n \n /// Print the reason why `fd` was inferred `@system` as a supplemental error\n@@ -4438,7 +4444,8 @@ void errorSupplementalInferredSafety(FuncDeclaration fd, int maxDepth, bool depr\n             errorFunc(s.loc, deprecation ?\n                 \"which would be `@system` because of:\" :\n                 \"which was inferred `@system` because of:\");\n-            errorFunc(s.loc, s.fmtStr, s.arg0 ? s.arg0.toChars() : \"\", s.arg1 ? s.arg1.toChars() : \"\");\n+            errorFunc(s.loc, s.fmtStr,\n+                s.arg0 ? s.arg0.toChars() : \"\", s.arg1 ? s.arg1.toChars() : \"\", s.arg2 ? s.arg2.toChars() : \"\");\n         }\n         else if (FuncDeclaration fd2 = cast(FuncDeclaration) s.arg0)\n         {"}, {"sha": "eb5e69429486377c207fd13e801ba3bbf378e8b6", "filename": "gcc/d/dmd/parse.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2Fparse.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2Fparse.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fparse.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -4862,7 +4862,7 @@ class Parser(AST, Lexer = dmd.lexer.Lexer) : Lexer\n                     if (udas !is null)\n                     {\n                         if (storage_class != 0)\n-                            error(\"cannot put a storage-class in an alias declaration.\");\n+                            error(\"cannot put a storage-class in an `alias` declaration.\");\n                         // parseAttributes shouldn't have set these variables\n                         assert(link == linkage && !setAlignment && ealign is null);\n                         auto tpl_ = cast(AST.TemplateDeclaration) s;\n@@ -4887,7 +4887,7 @@ class Parser(AST, Lexer = dmd.lexer.Lexer) : Lexer\n                     parseAttributes();\n                     // type\n                     if (udas)\n-                        error(\"user-defined attributes not allowed for alias declarations\");\n+                        error(\"user-defined attributes not allowed for `alias` declarations\");\n \n                     auto t = parseType();\n "}, {"sha": "f23b9882ae05dab66ba92a6fc06834e4995bf5ec", "filename": "gcc/d/dmd/statementsem.d", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2Fstatementsem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2Fstatementsem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstatementsem.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -4401,19 +4401,21 @@ public auto makeTupleForeach(Scope* sc, bool isStatic, bool isDecl, ForeachState\n                 Dsymbol ds = null;\n                 if (!(storageClass & STC.manifest))\n                 {\n-                    if ((isStatic || tb.ty == Tfunction || storageClass&STC.alias_) && e.op == EXP.variable)\n-                        ds = (cast(VarExp)e).var;\n-                    else if (e.op == EXP.template_)\n-                        ds = (cast(TemplateExp)e).td;\n-                    else if (e.op == EXP.scope_)\n-                        ds = (cast(ScopeExp)e).sds;\n-                    else if (e.op == EXP.function_)\n+                    if (isStatic || tb.ty == Tfunction || storageClass & STC.alias_)\n                     {\n-                        auto fe = cast(FuncExp)e;\n-                        ds = fe.td ? cast(Dsymbol)fe.td : fe.fd;\n+                        if (auto ve = e.isVarExp())\n+                            ds = ve.var;\n+                        else if (auto dve = e.isDotVarExp())\n+                            ds = dve.var;\n                     }\n-                    else if (e.op == EXP.overloadSet)\n-                        ds = (cast(OverExp)e).vars;\n+                    if (auto te = e.isTemplateExp())\n+                        ds = te.td;\n+                    else if (auto se = e.isScopeExp())\n+                        ds = se.sds;\n+                    else if (auto fe = e.isFuncExp())\n+                        ds = fe.td ? fe.td : fe.fd;\n+                    else if (auto oe = e.isOverExp())\n+                        ds = oe.vars;\n                 }\n                 else if (storageClass & STC.alias_)\n                 {\n@@ -4530,6 +4532,7 @@ public auto makeTupleForeach(Scope* sc, bool isStatic, bool isDecl, ForeachState\n                 auto field = Identifier.idPool(StaticForeach.tupleFieldName.ptr,StaticForeach.tupleFieldName.length);\n                 Expression access = new DotIdExp(loc, e, field);\n                 access = expressionSemantic(access, sc);\n+                access = access.optimize(WANTvalue);\n                 if (!tuple) return returnEarly();\n                 //printf(\"%s\\n\",tuple.toChars());\n                 foreach (l; 0 .. dim)"}, {"sha": "8cacdb10a26e3273b60de9ddf99c5acf83956cdd", "filename": "gcc/d/dmd/typesem.d", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2Ftypesem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Fdmd%2Ftypesem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftypesem.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -119,7 +119,7 @@ private void resolveTupleIndex(const ref Loc loc, Scope* sc, Dsymbol s, out Expr\n     const(uinteger_t) d = eindex.toUInteger();\n     if (d >= tup.objects.dim)\n     {\n-        .error(loc, \"tuple index `%llu` exceeds length %llu\", d, cast(ulong)tup.objects.dim);\n+        .error(loc, \"tuple index `%llu` out of bounds `[0 .. %llu]`\", d, cast(ulong)tup.objects.dim);\n         pt = Type.terror;\n         return;\n     }\n@@ -554,7 +554,7 @@ extern(C++) Type typeSemantic(Type type, const ref Loc loc, Scope* sc)\n             uinteger_t d = mtype.dim.toUInteger();\n             if (d >= tup.objects.dim)\n             {\n-                .error(loc, \"tuple index %llu exceeds %llu\", cast(ulong)d, cast(ulong)tup.objects.dim);\n+                .error(loc, \"tuple index `%llu` out of bounds `[0 .. %llu]`\", cast(ulong)d, cast(ulong)tup.objects.dim);\n                 return error();\n             }\n \n@@ -649,7 +649,7 @@ extern(C++) Type typeSemantic(Type type, const ref Loc loc, Scope* sc)\n                 uinteger_t d = mtype.dim.toUInteger();\n                 if (d >= tt.arguments.dim)\n                 {\n-                    .error(loc, \"tuple index %llu exceeds %llu\", cast(ulong)d, cast(ulong)tt.arguments.dim);\n+                    .error(loc, \"tuple index `%llu` out of bounds `[0 .. %llu]`\", cast(ulong)d, cast(ulong)tt.arguments.dim);\n                     return error();\n                 }\n                 Type telem = (*tt.arguments)[cast(size_t)d].type;\n@@ -1224,6 +1224,25 @@ extern(C++) Type typeSemantic(Type type, const ref Loc loc, Scope* sc)\n                     continue;\n                 }\n \n+                // -preview=in: Always add `ref` when used with `extern(C++)` functions\n+                // Done here to allow passing opaque types with `in`\n+                if (global.params.previewIn && (fparam.storageClass & (STC.in_ | STC.ref_)) == STC.in_)\n+                {\n+                    switch (tf.linkage)\n+                    {\n+                    case LINK.cpp:\n+                        fparam.storageClass |= STC.ref_;\n+                        break;\n+                    case LINK.default_, LINK.d:\n+                        break;\n+                    default:\n+                        .error(loc, \"cannot use `in` parameters with `extern(%s)` functions\",\n+                               linkageToChars(tf.linkage));\n+                        .errorSupplemental(loc, \"parameter `%s` declared as `in` here\", fparam.toChars());\n+                        break;\n+                    }\n+                }\n+\n                 if (t.ty == Tfunction)\n                 {\n                     .error(loc, \"cannot have parameter of function type `%s`\", fparam.type.toChars());\n@@ -2572,7 +2591,7 @@ void resolve(Type mt, const ref Loc loc, Scope* sc, out Expression pe, out Type\n                 const d = mt.dim.toUInteger();\n                 if (d >= tup.objects.dim)\n                 {\n-                    error(loc, \"tuple index `%llu` exceeds length %llu\", d, cast(ulong) tup.objects.dim);\n+                    error(loc, \"tuple index `%llu` out of bounds `[0 .. %llu]`\", d, cast(ulong) tup.objects.dim);\n                     return returnError();\n                 }\n \n@@ -4891,9 +4910,9 @@ Expression getMaxMinValue(EnumDeclaration ed, const ref Loc loc, Identifier id)\n              */\n             Expression e = em.value;\n             Expression ec = new CmpExp(id == Id.max ? EXP.greaterThan : EXP.lessThan, em.loc, e, *pval);\n-            ed.inuse++;\n+            ed.inuse = true;\n             ec = ec.expressionSemantic(em._scope);\n-            ed.inuse--;\n+            ed.inuse = false;\n             ec = ec.ctfeInterpret();\n             if (ec.op == EXP.error)\n             {"}, {"sha": "d1f0d59952f99d91464f4fa86e8e4abd3368df59", "filename": "gcc/d/typeinfo.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Ftypeinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Fd%2Ftypeinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypeinfo.cc?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -1050,7 +1050,7 @@ class TypeInfoVisitor : public Visitor\n     this->layout_string (ti->deco);\n \n     /* Default initializer for struct.  */\n-    tree ptr = (sd->zeroInit) ? null_pointer_node\n+    tree ptr = (sd->zeroInit ()) ? null_pointer_node\n       : build_address (aggregate_initializer_decl (sd));\n     this->layout_field (d_array_value (array_type_node,\n \t\t\t\t       size_int (sd->structsize), ptr));\n@@ -1771,7 +1771,7 @@ class SpeculativeTypeVisitor : public Visitor\n       {\n \tif (!ti->needsCodegen ())\n \t  {\n-\t    if (ti->minst || sd->requestTypeInfo)\n+\t    if (ti->minst || sd->requestTypeInfo ())\n \t      return;\n \n \t    this->result_ |= true;"}, {"sha": "11415791b6595ef66da57c40d001bc006af6703d", "filename": "gcc/testsuite/gdc.test/compilable/b16360.d", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d844478ab47a16c8ae65f253fd1cdc685c7951fc/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fb16360.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d844478ab47a16c8ae65f253fd1cdc685c7951fc/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fb16360.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fb16360.d?ref=d844478ab47a16c8ae65f253fd1cdc685c7951fc", "patch": "@@ -1,39 +0,0 @@\n-/*\n-REQUIRED_ARGS: -inline -wi\n-\n-TEST_OUTPUT:\n----\n-compilable/b16360.d(12): Warning: cannot inline function `b16360.foo`\n-compilable/b16360.d(25): Warning: cannot inline function `b16360.bar`\n----\n-*/\n-\n-pragma(inline, true)\n-auto foo()\n-{\n-    static struct U\n-    {\n-        int a = 42;\n-        float b;\n-        ~this(){} // __dtor: inline not allowed\n-    }\n-    U u;\n-    return u.a;\n-}\n-\n-pragma(inline, true)\n-auto bar()\n-{\n-    class U   // class : inline not allowed\n-    {\n-        int a = 42;\n-        float b;\n-    }\n-    return (new U).a;\n-}\n-\n-void main()\n-{\n-    auto f = foo();\n-    auto b = bar();\n-}"}, {"sha": "1273809b8dbf388673542fb0ab418b2ee3d65cb9", "filename": "gcc/testsuite/gdc.test/compilable/inliner.d", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Finliner.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Finliner.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Finliner.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -0,0 +1,21 @@\n+// REQUIRED_ARGS: -inline -O -unittest\n+\n+struct Cent\n+{\n+    ulong lo;\n+    ulong hi;\n+}\n+\n+Cent add(Cent, Cent);\n+\n+Cent sub(Cent c1, Cent c2)\n+{\n+    return add(c1, c2);\n+}\n+\n+Cent udivmod(Cent c3, Cent c4)\n+{\n+    Cent quotient;\n+    Cent rem = sub(c3, c4);\n+    return quotient;\n+}"}, {"sha": "7ffa5cca31ba23eaf70e66677f3a55e0dfb421a9", "filename": "gcc/testsuite/gdc.test/compilable/inliner2.d", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Finliner2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Finliner2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Finliner2.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -0,0 +1,27 @@\n+// REQUIRED_ARGS: -O -inline\n+\n+struct Cent\n+{\n+    ulong lo;  // low 64 bits\n+    ulong hi;  // high 64 bits\n+}\n+\n+pure bool tst(Cent c)\n+{\n+    return c.hi || c.lo;\n+}\n+\n+pure Cent dec(Cent c);\n+pure Cent shl(Cent c, uint n);\n+\n+pure Cent udivmod(Cent c1, Cent c2, out Cent modulus)\n+{\n+    ulong v1 = shl(c2, 3).hi;\n+\n+    Cent quotient;\n+\n+    if (tst(quotient))\n+        quotient = dec(quotient);\n+\n+    return quotient;\n+}"}, {"sha": "cf610ff8d9730fe335a6064385ef07d458baeb77", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail17927.d", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail17927.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail17927.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail17927.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -1,10 +1,10 @@\n /* REQUIRED_ARGS: -preview=dip1000\n  * TEST_OUTPUT:\n ---\n-fail_compilation/fail17927.d(13): Error: scope variable `this` may not be returned\n-fail_compilation/fail17927.d(15): Error: scope variable `this` may not be returned\n-fail_compilation/fail17927.d(21): Error: scope variable `ptr` may not be returned\n-fail_compilation/fail17927.d(23): Error: scope variable `ptr` may not be returned\n+fail_compilation/fail17927.d(13): Error: scope parameter `this` may not be returned\n+fail_compilation/fail17927.d(15): Error: scope parameter `this` may not be returned\n+fail_compilation/fail17927.d(21): Error: scope parameter `ptr` may not be returned\n+fail_compilation/fail17927.d(23): Error: scope parameter `ptr` may not be returned\n ---\n */\n // https://issues.dlang.org/show_bug.cgi?id=17927"}, {"sha": "15845e1d2fcc3f6769f4fec93db102d6f45c5c14", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail20108.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail20108.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail20108.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail20108.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -3,7 +3,7 @@\n TEST_OUTPUT:\n ---\n fail_compilation/fail20108.d(15): Error: address of variable `y` assigned to `x` with longer lifetime\n-fail_compilation/fail20108.d(16): Error: scope variable `x` may not be returned\n+fail_compilation/fail20108.d(16): Error: scope parameter `x` may not be returned\n fail_compilation/fail20108.d(23): Error: address of variable `y` assigned to `x` with longer lifetime\n fail_compilation/fail20108.d(24): Error: scope variable `x` may not be returned\n ---"}, {"sha": "3fac1678e69ea457b0baf4d00bdf944b36729fa8", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail_scope.d", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail_scope.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail_scope.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail_scope.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -2,7 +2,10 @@\n REQUIRED_ARGS:\n TEST_OUTPUT:\n ---\n-fail_compilation/fail_scope.d(40): Deprecation: scope variable `p` may not be returned\n+fail_compilation/fail_scope.d(30): Deprecation: scope parameter `da` may not be returned\n+fail_compilation/fail_scope.d(32): Deprecation: scope parameter `o` may not be returned\n+fail_compilation/fail_scope.d(33): Deprecation: scope parameter `dg` may not be returned\n+fail_compilation/fail_scope.d(40): Deprecation: scope parameter `p` may not be returned\n fail_compilation/fail_scope.d(45): Error: returning `cast(char[])string` escapes a reference to local variable `string`\n fail_compilation/fail_scope.d(63): Error: returning `s.bar()` escapes a reference to local variable `s`\n fail_compilation/fail_scope.d(74): Error: `fail_scope.foo8` called with argument types `(int)` matches both:\n@@ -16,9 +19,6 @@ fail_compilation/fail_scope.d(108): Deprecation: escaping reference to outer loc\n fail_compilation/fail_scope.d(127): Deprecation: returning `s.bar()` escapes a reference to local variable `s`\n fail_compilation/fail_scope.d(137): Error: returning `foo16226(i)` escapes a reference to local variable `i`\n ---\n-//fail_compilation/fail_scope.d(30): Error: scope variable `da` may not be returned\n-//fail_compilation/fail_scope.d(32): Error: scope variable `o` may not be returned\n-//fail_compilation/fail_scope.d(33): Error: scope variable `dg` may not be returned\n //fail_compilation/fail_scope.d(35): Error: scope variable `da` may not be returned\n //fail_compilation/fail_scope.d(37): Error: scope variable `o` may not be returned\n //fail_compilation/fail_scope.d(38): Error: scope variable `dg` may not be returned"}, {"sha": "93e5f1d8cc003b4ea9f177eac8a3f626ce447db8", "filename": "gcc/testsuite/gdc.test/fail_compilation/ice12574.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice12574.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice12574.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice12574.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -1,7 +1,7 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/ice12574.d(40): Error: tuple index `2` exceeds length 2\n+fail_compilation/ice12574.d(40): Error: tuple index `2` out of bounds `[0 .. 2]`\n fail_compilation/ice12574.d(53): Error: template instance `ice12574.reduce!(\"a\", \"a\").reduce!(Tuple!(int, int, int))` error instantiating\n ---\n */"}, {"sha": "ce0cf926a1321924c9bea97f86b2ffdcf1b7b4cb", "filename": "gcc/testsuite/gdc.test/fail_compilation/previewin.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fpreviewin.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fpreviewin.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fpreviewin.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -10,7 +10,7 @@ fail_compilation/previewin.d(6): Error: function `previewin.takeFunction(void fu\n fail_compilation/previewin.d(6):        cannot pass argument `__lambda3` of type `void function(ref const(real) x) pure nothrow @nogc @safe` to parameter `void function(in real) f`\n fail_compilation/previewin.d(15): Error: scope variable `arg` assigned to non-scope `myGlobal`\n fail_compilation/previewin.d(16): Error: scope variable `arg` assigned to non-scope `myGlobal`\n-fail_compilation/previewin.d(17): Error: scope variable `arg` may not be returned\n+fail_compilation/previewin.d(17): Error: scope parameter `arg` may not be returned\n fail_compilation/previewin.d(18): Error: scope variable `arg` assigned to `escape` with longer lifetime\n fail_compilation/previewin.d(22): Error: returning `arg` escapes a reference to parameter `arg`\n fail_compilation/previewin.d(22):        perhaps annotate the parameter with `return`"}, {"sha": "e9fe6a1fa88c80f448551ba7bca3a9c76e0a6cde", "filename": "gcc/testsuite/gdc.test/fail_compilation/previewin2.d", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fpreviewin2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fpreviewin2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fpreviewin2.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -0,0 +1,18 @@\n+/*\n+REQUIRED_ARGS: -preview=in -preview=dip1000\n+TEST_OUTPUT:\n+---\n+fail_compilation/previewin2.d(1): Error: cannot use `in` parameters with `extern(C)` functions\n+fail_compilation/previewin2.d(1):        parameter `a` declared as `in` here\n+fail_compilation/previewin2.d(2): Error: cannot use `in` parameters with `extern(Windows)` functions\n+fail_compilation/previewin2.d(2):        parameter `a` declared as `in` here\n+fail_compilation/previewin2.d(4): Error: cannot use `in` parameters with `extern(C)` functions\n+fail_compilation/previewin2.d(4):        parameter `__anonymous_param` declared as `in` here\n+---\n+*/\n+\n+#line 1\n+extern(C) void wrongLink1 (in int a);\n+extern(Windows) void wrongLink2 (in void* a);\n+struct Large { ulong[64] data; }\n+extern(C) void wrongLink3 (in Large);"}, {"sha": "93944040db9ee0415c6d0b5fc6b7b15cae0f19e3", "filename": "gcc/testsuite/gdc.test/fail_compilation/retscope.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fretscope.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fretscope.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fretscope.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -2,7 +2,7 @@\n REQUIRED_ARGS: -preview=dip1000\n TEST_OUTPUT:\n ---\n-fail_compilation/retscope.d(22): Error: scope variable `p` may not be returned\n+fail_compilation/retscope.d(22): Error: scope parameter `p` may not be returned\n fail_compilation/retscope.d(32): Error: returning `b ? nested1(& i) : nested2(& j)` escapes a reference to local variable `j`\n fail_compilation/retscope.d(45): Error: scope variable `p` assigned to non-scope `q`\n fail_compilation/retscope.d(47): Error: address of variable `i` assigned to `q` with longer lifetime\n@@ -85,7 +85,7 @@ struct HTTP\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/retscope.d(96): Error: reference to local variable `sa` assigned to non-scope parameter `a`\n+fail_compilation/retscope.d(96): Error: reference to local variable `sa` assigned to non-scope parameter `a` calling `bar8`\n ---\n */\n // https://issues.dlang.org/show_bug.cgi?id=8838\n@@ -149,7 +149,7 @@ S10* test10()\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/retscope.d(158): Error: scope variable `this` may not be returned\n+fail_compilation/retscope.d(158): Error: scope parameter `this` may not be returned\n ---\n */\n \n@@ -218,7 +218,7 @@ void* escape3 (scope void* p) @safe {\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/retscope.d(229): Error: scope variable `ptr` may not be returned\n+fail_compilation/retscope.d(229): Error: scope parameter `ptr` may not be returned\n ---\n */\n \n@@ -403,7 +403,7 @@ class Foo13\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/retscope.d(1205): Error: scope variable `f14` assigned to non-scope parameter `this`\n+fail_compilation/retscope.d(1205): Error: scope variable `f14` assigned to non-scope parameter `this` calling `foo`\n ---\n */\n \n@@ -454,7 +454,7 @@ fail_compilation/retscope.d(1311): Error: scope variable `u2` assigned to `ek` w\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/retscope.d(1405): Error: reference to local variable `buf` assigned to non-scope parameter `__anonymous_param`\n+fail_compilation/retscope.d(1405): Error: reference to local variable `buf` assigned to non-scope parameter `__anonymous_param` calling `myprintf`\n ---\n */\n "}, {"sha": "9f1e13dde98d6f8207c73536fbf51d934649a2bd", "filename": "gcc/testsuite/gdc.test/fail_compilation/retscope2.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fretscope2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fretscope2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fretscope2.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -86,8 +86,8 @@ fail_compilation/retscope2.d(504): Error: scope variable `c` may not be returned\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/retscope2.d(604): Error: scope variable `_param_0` assigned to non-scope parameter `__anonymous_param`\n-fail_compilation/retscope2.d(604): Error: scope variable `_param_1` assigned to non-scope parameter `__anonymous_param`\n+fail_compilation/retscope2.d(604): Error: scope variable `_param_0` assigned to non-scope parameter `__anonymous_param` calling `foo600`\n+fail_compilation/retscope2.d(604): Error: scope variable `_param_1` assigned to non-scope parameter `__anonymous_param` calling `foo600`\n fail_compilation/retscope2.d(614): Error: template instance `retscope2.test600!(int*, int*)` error instantiating\n ---\n */"}, {"sha": "a8e5de5dc6d293af4dcc88c5c1c3f7486b6ed361", "filename": "gcc/testsuite/gdc.test/fail_compilation/retscope6.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fretscope6.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fretscope6.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fretscope6.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -76,9 +76,9 @@ void foo() @safe\n /* TEST_OUTPUT:\n ---\n fail_compilation/retscope6.d(8016): Error: address of variable `i` assigned to `p` with longer lifetime\n-fail_compilation/retscope6.d(8031): Error: reference to local variable `i` assigned to non-scope parameter `p`\n-fail_compilation/retscope6.d(8031): Error: reference to local variable `j` assigned to non-scope parameter `q`\n-fail_compilation/retscope6.d(8048): Error: reference to local variable `j` assigned to non-scope parameter `q`\n+fail_compilation/retscope6.d(8031): Error: reference to local variable `i` assigned to non-scope parameter `p` calling `betty`\n+fail_compilation/retscope6.d(8031): Error: reference to local variable `j` assigned to non-scope parameter `q` calling `betty`\n+fail_compilation/retscope6.d(8048): Error: reference to local variable `j` assigned to non-scope parameter `q` calling `archie`\n ---\n */\n \n@@ -172,7 +172,7 @@ T9 testfred()\n \n /* TEST_OUTPUT:\n ---\n-fail_compilation/retscope6.d(10003): Error: scope variable `values` assigned to non-scope parameter `values`\n+fail_compilation/retscope6.d(10003): Error: scope variable `values` assigned to non-scope parameter `values` calling `escape`\n ---\n */\n \n@@ -234,7 +234,7 @@ const(int)* f_c_20150() @safe nothrow\n \n /* TEST_OUTPUT:\n ---\n-fail_compilation/retscope6.d(13010): Error: reference to local variable `str` assigned to non-scope parameter `x`\n+fail_compilation/retscope6.d(13010): Error: reference to local variable `str` assigned to non-scope parameter `x` calling `f_throw`\n ---\n */\n \n@@ -254,7 +254,7 @@ void escape_throw_20150() @safe\n \n /* TEST_OUTPUT:\n ---\n-fail_compilation/retscope6.d(14019): Error: scope variable `scopePtr` assigned to non-scope parameter `x`\n+fail_compilation/retscope6.d(14019): Error: scope variable `scopePtr` assigned to non-scope parameter `x` calling `noInfer23021`\n fail_compilation/retscope6.d(14022): Error: scope variable `scopePtr` may not be returned\n ---\n */"}, {"sha": "a0e4d69b361fb4d2603db4663c15299b5866b698", "filename": "gcc/testsuite/gdc.test/fail_compilation/test14238.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest14238.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest14238.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest14238.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -1,7 +1,7 @@\n /* REQUIRED_ARGS: -preview=dip1000\n    TEST_OUTPUT:\n ---\n-fail_compilation/test14238.d(20): Error: scope variable `fn` may not be returned\n+fail_compilation/test14238.d(20): Error: scope parameter `fn` may not be returned\n fail_compilation/test14238.d(28): Error: escaping reference to stack allocated value returned by `&baz`\n ---\n */"}, {"sha": "3afb63b591b7b3f7969800829bf9a375c93faa02", "filename": "gcc/testsuite/gdc.test/fail_compilation/test17423.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest17423.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest17423.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest17423.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -1,7 +1,7 @@\n /* REQUIRED_ARGS: -preview=dip1000\n TEST_OUTPUT:\n ---\n-fail_compilation/test17423.d(26): Error: reference to local `this` assigned to non-scope parameter `dlg`\n+fail_compilation/test17423.d(26): Error: reference to local `this` assigned to non-scope parameter `dlg` calling `opApply`\n ---\n */\n "}, {"sha": "ddf3f46fb129b5595bb47cab08625ed73f32a19d", "filename": "gcc/testsuite/gdc.test/fail_compilation/test17450.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest17450.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest17450.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest17450.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -33,8 +33,8 @@ struct S {\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/test17450.d(103): Error: scope variable `c` may not be returned\n-fail_compilation/test17450.d(106): Error: scope variable `this` may not be returned\n+fail_compilation/test17450.d(103): Error: scope parameter `c` may not be returned\n+fail_compilation/test17450.d(106): Error: scope parameter `this` may not be returned\n ---\n */\n // https://issues.dlang.org/show_bug.cgi?id=17450"}, {"sha": "1713c9d8c271bcd732f021da55a2ea594d08dc86", "filename": "gcc/testsuite/gdc.test/fail_compilation/test20245.d", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest20245.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest20245.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest20245.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -2,15 +2,15 @@\n REQUIRED_ARGS: -preview=dip1000\n TEST_OUTPUT:\n ---\n-fail_compilation/test20245.d(20): Error: reference to local variable `x` assigned to non-scope parameter `ptr`\n+fail_compilation/test20245.d(20): Error: reference to local variable `x` assigned to non-scope parameter `ptr` calling `escape`\n fail_compilation/test20245.d(21): Error: copying `&x` into allocated memory escapes a reference to parameter `x`\n fail_compilation/test20245.d(22): Error: scope variable `a` may not be returned\n fail_compilation/test20245.d(26): Error: cannot take address of `scope` variable `x` since `scope` applies to first indirection only\n-fail_compilation/test20245.d(32): Error: reference to local variable `x` assigned to non-scope parameter `ptr`\n+fail_compilation/test20245.d(32): Error: reference to local variable `x` assigned to non-scope parameter `ptr` calling `escape`\n fail_compilation/test20245.d(33): Error: copying `&x` into allocated memory escapes a reference to parameter `x`\n fail_compilation/test20245.d(49): Error: reference to local variable `price` assigned to non-scope `this.minPrice`\n-fail_compilation/test20245.d(68): Error: reference to local variable `this` assigned to non-scope parameter `msg`\n-fail_compilation/test20245.d(88): Error: reference to local variable `this` assigned to non-scope parameter `content`\n+fail_compilation/test20245.d(68): Error: reference to local variable `this` assigned to non-scope parameter `msg` calling `this`\n+fail_compilation/test20245.d(88): Error: reference to local variable `this` assigned to non-scope parameter `content` calling `listUp`\n ---\n */\n "}, {"sha": "5759415ead2fbbb5129bfbe944c20e921eabda4b", "filename": "gcc/testsuite/gdc.test/fail_compilation/test22818.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest22818.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest22818.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest22818.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -1,7 +1,7 @@\n /* REQUIRED_ARGS: -preview=dip1000\n  * TEST_OUTPUT:\n ---\n-fail_compilation/test22818.d(104): Error: scope variable `c` may not be returned\n+fail_compilation/test22818.d(104): Error: scope parameter `c` may not be returned\n ---\n */\n "}, {"sha": "9d527b75d711e15d1f33f88ebeb491f09217596d", "filename": "gcc/testsuite/gdc.test/fail_compilation/typeerrors.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftypeerrors.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftypeerrors.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftypeerrors.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -2,7 +2,7 @@\n TEST_OUTPUT:\n ---\n fail_compilation/typeerrors.d(32): Deprecation: `scope` as a type constraint is deprecated.  Use `scope` at the usage site.\n-fail_compilation/typeerrors.d(37): Error: tuple index 4 exceeds 4\n+fail_compilation/typeerrors.d(37): Error: tuple index `4` out of bounds `[0 .. 4]`\n fail_compilation/typeerrors.d(39): Error: variable `x` cannot be read at compile time\n fail_compilation/typeerrors.d(40): Error: cannot have array of `void()`\n fail_compilation/typeerrors.d(41): Error: cannot have array of scope `typeerrors.C`"}, {"sha": "ec4796789ac754823ac1e097beb626688aff8119", "filename": "gcc/testsuite/gdc.test/fail_compilation/udaparams.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fudaparams.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fudaparams.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fudaparams.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -12,8 +12,8 @@ fail_compilation/udaparams.d(40): Error: `@safe` attribute for function paramete\n fail_compilation/udaparams.d(43): Error: `@system` attribute for function parameter is not supported\n fail_compilation/udaparams.d(44): Error: `@trusted` attribute for function parameter is not supported\n fail_compilation/udaparams.d(45): Error: `@nogc` attribute for function parameter is not supported\n-fail_compilation/udaparams.d(51): Error: cannot put a storage-class in an alias declaration.\n-fail_compilation/udaparams.d(52): Error: cannot put a storage-class in an alias declaration.\n+fail_compilation/udaparams.d(51): Error: cannot put a storage-class in an `alias` declaration.\n+fail_compilation/udaparams.d(52): Error: cannot put a storage-class in an `alias` declaration.\n fail_compilation/udaparams.d(53): Error: semicolon expected to close `alias` declaration\n fail_compilation/udaparams.d(53): Error: declaration expected, not `=>`\n fail_compilation/udaparams.d(54): Error: semicolon expected to close `alias` declaration"}, {"sha": "a7f2bfc521f7271d191d2c54d52e581cd66383b6", "filename": "gcc/testsuite/gdc.test/fail_compilation/udatypes.d", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fudatypes.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fudatypes.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fudatypes.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -0,0 +1,8 @@\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/udatypes.d(8): Error: user-defined attributes not allowed for `alias` declarations\n+---\n+*/\n+\n+alias c_typedef = extern(C) @(1) void* function(size_t);"}, {"sha": "910c5c4a7a2bb4ef0a6e34c5e2f5607d1605e47b", "filename": "gcc/testsuite/gdc.test/runnable/ice10086b.d", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fice10086b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fice10086b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fice10086b.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -5,3 +5,53 @@ import imports.ice10086y;\n import imports.ice10086x;\n \n void main() { test(); }\n+\n+static if (0)\n+{\n+/* this is a reduced one-file version that triggers a seg fault\n+because the use of OPframeptr gets inlined, and the offests\n+to it are not updated.\n+Compile with: -O -inline\n+*/\n+\n+pragma(inline, false)\n+auto bind(alias f, bindValues...)()\n+{\n+    pragma(inline, false)\n+    auto bind(Types...)(Types values)\n+    {\n+        return f(bindValues, values);\n+    }\n+    return bind();\n+}\n+\n+\n+struct SS\n+{\n+    int a1 = 123;\n+}\n+\n+pragma(inline, false)\n+@safe auto ff(SS rr)\n+{\n+    return rr;\n+}\n+\n+//   pragma(inline, false)\n+@safe auto gg(SS ss)  // this getting inlined triggers the problem\n+{\n+    return bind!(ff, ss);\n+}\n+\n+pragma(inline, false)\n+void test()\n+{\n+    SS s1;\n+\n+    auto zb = bind!(gg, s1)();\n+    assert(zb.a1 == 123);\n+}\n+\n+\n+void main() { test(); }\n+}"}, {"sha": "01af5c8cbe5ff2c9d8779f78f3565e01788e7e1c", "filename": "gcc/testsuite/gdc.test/runnable/inline3.d", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Finline3.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Finline3.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Finline3.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -0,0 +1,44 @@\n+// REQUIRED_ARGS: -inline -O\n+\n+// Test operator overloading\n+\n+extern (C) int printf(const(char*) fmt, ...);\n+\n+struct Tuple6798(T...)\n+{\n+    T field;\n+    alias field this;\n+\n+    bool opEquals(Tuple6798 rxx)\n+    {\n+        foreach (i, _; T)\n+        {\n+            if (!__equals(this[i], rxx[i]))\n+                assert(0);\n+                //return false;\n+        }\n+        return true;\n+    }\n+}\n+\n+auto tuple(T...)(T args)\n+{\n+    return Tuple6798!T(args);\n+}\n+\n+int zzzz()\n+{\n+    if (!__equals(\"mno\", \"mno\"))\n+        assert(0);\n+\n+    assert(tuple(\"abcd\", \"x\") == tuple(\"abcd\", \"x\"));\n+    return 0;\n+}\n+\n+int main()\n+{\n+    zzzz();\n+\n+    printf(\"Success\\n\");\n+    return 0;\n+}"}, {"sha": "6a9ac5deb2f8ed3f6fdcf5b25f8db5d7d7382e79", "filename": "gcc/testsuite/gdc.test/runnable/staticforeach.d", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fstaticforeach.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fstaticforeach.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fstaticforeach.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -39,7 +39,36 @@ void test19479()\n     }\n }\n \n+/**********************************/\n+// https://issues.dlang.org/show_bug.cgi?id=23192\n+\n+alias AliasSeq(Args...) = Args;\n+\n+struct S23192\n+{\n+    int x;\n+    int y;\n+\n+    int fun()\n+    {\n+        static foreach (sym; AliasSeq!(S23192.x))\n+            int i = sym;\n+\n+        static foreach (sym; AliasSeq!(this.y))\n+            int j = sym;\n+\n+        return i + j;\n+    }\n+}\n+\n+void test23192()\n+{\n+    assert(S23192(1, 2).fun() == 3);\n+    static assert(S23192(1, 2).fun() == 3);\n+}\n+\n void main()\n {\n     test19479();\n+    test23192();\n }"}, {"sha": "cd91dd558340eefa22fa9c747c55815fb8fd575f", "filename": "gcc/testsuite/gdc.test/runnable_cxx/cppa.d", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fcppa.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fcppa.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fcppa.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -1,3 +1,4 @@\n+// REQUIRED_ARGS: -preview=in\n // PERMUTE_ARGS: -g\n // EXTRA_CPP_SOURCES: cppb.cpp\n // EXTRA_FILES: extra-files/cppb.h\n@@ -1637,7 +1638,13 @@ void test19134()\n }\n \n // https://issues.dlang.org/show_bug.cgi?id=18955\n-alias std_string = std.basic_string!(char);\n+version (linux)\n+    alias std_string = std.basic_string!(char);\n+else\n+{\n+    import core.stdcpp.string : core_basic_string = basic_string;\n+    alias std_string = core_basic_string!(char);\n+}\n \n extern(C++) void callback18955(ref const(std_string) str)\n {\n@@ -1646,6 +1653,16 @@ extern(C++) void test18955();\n \n /****************************************/\n \n+extern(C++) void testPreviewIn();\n+\n+extern(C++) void previewInFunction(in int a, in std_string b, ref const(std_string) c)\n+{\n+    assert(a == 42);\n+    assert(&b is &c);\n+}\n+\n+/****************************************/\n+\n void main()\n {\n     test1();\n@@ -1695,6 +1712,7 @@ void main()\n     test18966();\n     test19134();\n     test18955();\n+    testPreviewIn();\n \n     printf(\"Success\\n\");\n }"}, {"sha": "83667cbddc78368925db36906584239d4c97caba", "filename": "gcc/testsuite/gdc.test/runnable_cxx/extra-files/cppb.cpp", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fextra-files%2Fcppb.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fextra-files%2Fcppb.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fextra-files%2Fcppb.cpp?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -4,30 +4,8 @@\n #include <exception>\n #include <cstdarg>\n \n-#if _WIN32 // otherwise defined in C header files!\n-// https://issues.dlang.org/show_bug.cgi?id=18955\n-namespace std\n-{\n-    template<typename Char>\n-    struct char_traits\n-    {\n-    };\n-    template<typename Char>\n-    class allocator\n-    {\n-    };\n-    template<typename Char, typename Traits, typename Alloc>\n-    class basic_string\n-    {\n-    };\n-    typedef basic_string<char, char_traits<char>, allocator<char> > string;\n-}\n-#else // if POSIX\n-\n #include <string>\n \n-#endif // _WIN32\n-\n #include \"cppb.h\"\n \n /**************************************/\n@@ -936,3 +914,11 @@ void test18955()\n     callback18955(s);\n #endif\n }\n+\n+void previewInFunction(const int& a, const std::string& b, const std::string& c);\n+\n+void testPreviewIn()\n+{\n+    std::string s = \"Hello World\";\n+    previewInFunction(42, s, s);\n+}"}, {"sha": "3f4a0ec63e37291478ee94a8e1304954f84aa28f", "filename": "libphobos/libdruntime/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMERGE?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -1,4 +1,4 @@\n-454471d8077d12ec6bf0ae8fcd9571aad1bce7be\n+e150cca179515ce5113e828aac94c20c0b983b7c\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/druntime repository."}, {"sha": "c576e991db58c63771ac1e8f0d7ec9ebf961b01f", "filename": "libphobos/libdruntime/core/stdc/config.d", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fconfig.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fconfig.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fconfig.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -185,6 +185,37 @@ else version (Posix)\n     alias ulong cpp_ulonglong;\n   }\n }\n+else version (WASI)\n+{\n+    static if ( (void*).sizeof > int.sizeof )\n+    {\n+        enum __c_longlong  : long;\n+        enum __c_ulonglong : ulong;\n+\n+        alias long  c_long;\n+        alias ulong c_ulong;\n+\n+        alias long   cpp_long;\n+        alias ulong  cpp_ulong;\n+\n+        alias __c_longlong  cpp_longlong;\n+        alias __c_ulonglong cpp_ulonglong;\n+    }\n+    else\n+    {\n+        enum __c_long  : int;\n+        enum __c_ulong : uint;\n+\n+        alias int   c_long;\n+        alias uint  c_ulong;\n+\n+        alias __c_long   cpp_long;\n+        alias __c_ulong  cpp_ulong;\n+\n+        alias long  cpp_longlong;\n+        alias ulong cpp_ulonglong;\n+    }\n+}\n \n version (GNU)\n     alias c_long_double = real;"}, {"sha": "24b4138153d87a31e5c0664791591194fcf5946d", "filename": "libphobos/libdruntime/core/stdc/errno.d", "status": "modified", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ferrno.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ferrno.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ferrno.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -2079,6 +2079,143 @@ else version (Haiku)\n     enum B_NO_TRANSLATOR                 = (B_TRANSLATION_ERROR_BASE + 1);\n     enum B_ILLEGAL_DATA                  = (B_TRANSLATION_ERROR_BASE + 2);\n }\n+else version (WASI)\n+{\n+    enum EPERM            = 1;\n+    enum ENOENT           = 2;\n+    enum ESRCH            = 3;\n+    enum EINTR            = 4;\n+    enum EIO              = 5;\n+    enum ENXIO            = 6;\n+    enum E2BIG            = 7;\n+    enum ENOEXEC          = 8;\n+    enum EBADF            = 9;\n+    enum ECHILD          = 10;\n+    enum EAGAIN          = 11;\n+    enum ENOMEM          = 12;\n+    enum EACCES          = 13;\n+    enum EFAULT          = 14;\n+    enum ENOTBLK         = 15;\n+    enum EBUSY           = 16;\n+    enum EEXIST          = 17;\n+    enum EXDEV           = 18;\n+    enum ENODEV          = 19;\n+    enum ENOTDIR         = 20;\n+    enum EISDIR          = 21;\n+    enum EINVAL          = 22;\n+    enum ENFILE          = 23;\n+    enum EMFILE          = 24;\n+    enum ENOTTY          = 25;\n+    enum ETXTBSY         = 26;\n+    enum EFBIG           = 27;\n+    enum ENOSPC          = 28;\n+    enum ESPIPE          = 29;\n+    enum EROFS           = 30;\n+    enum EMLINK          = 31;\n+    enum EPIPE           = 32;\n+    enum EDOM            = 33;\n+    enum ERANGE          = 34;\n+    enum EDEADLK         = 35;\n+    enum ENAMETOOLONG    = 36;\n+    enum ENOLCK          = 37;\n+    enum ENOSYS          = 38;\n+    enum ENOTEMPTY       = 39;\n+    enum ELOOP           = 40;\n+    enum EWOULDBLOCK     = EAGAIN;\n+    enum ENOMSG          = 42;\n+    enum EIDRM           = 43;\n+    enum ECHRNG          = 44;\n+    enum EL2NSYNC        = 45;\n+    enum EL3HLT          = 46;\n+    enum EL3RST          = 47;\n+    enum ELNRNG          = 48;\n+    enum EUNATCH         = 49;\n+    enum ENOCSI          = 50;\n+    enum EL2HLT          = 51;\n+    enum EBADE           = 52;\n+    enum EBADR           = 53;\n+    enum EXFULL          = 54;\n+    enum ENOANO          = 55;\n+    enum EBADRQC         = 56;\n+    enum EBADSLT         = 57;\n+    enum EDEADLOCK       = EDEADLK;\n+    enum EBFONT          = 59;\n+    enum ENOSTR          = 60;\n+    enum ENODATA         = 61;\n+    enum ETIME           = 62;\n+    enum ENOSR           = 63;\n+    enum ENONET          = 64;\n+    enum ENOPKG          = 65;\n+    enum EREMOTE         = 66;\n+    enum ENOLINK         = 67;\n+    enum EADV            = 68;\n+    enum ESRMNT          = 69;\n+    enum ECOMM           = 70;\n+    enum EPROTO          = 71;\n+    enum EMULTIHOP       = 72;\n+    enum EDOTDOT         = 73;\n+    enum EBADMSG         = 74;\n+    enum EOVERFLOW       = 75;\n+    enum ENOTUNIQ        = 76;\n+    enum EBADFD          = 77;\n+    enum EREMCHG         = 78;\n+    enum ELIBACC         = 79;\n+    enum ELIBBAD         = 80;\n+    enum ELIBSCN         = 81;\n+    enum ELIBMAX         = 82;\n+    enum ELIBEXEC        = 83;\n+    enum EILSEQ          = 84;\n+    enum ERESTART        = 85;\n+    enum ESTRPIPE        = 86;\n+    enum EUSERS          = 87;\n+    enum ENOTSOCK        = 88;\n+    enum EDESTADDRREQ    = 89;\n+    enum EMSGSIZE        = 90;\n+    enum EPROTOTYPE      = 91;\n+    enum ENOPROTOOPT     = 92;\n+    enum EPROTONOSUPPORT = 93;\n+    enum ESOCKTNOSUPPORT = 94;\n+    enum EOPNOTSUPP      = 95;\n+    enum ENOTSUP         = EOPNOTSUPP;\n+    enum EPFNOSUPPORT    = 96;\n+    enum EAFNOSUPPORT    = 97;\n+    enum EADDRINUSE      = 98;\n+    enum EADDRNOTAVAIL   = 99;\n+    enum ENETDOWN        = 100;\n+    enum ENETUNREACH     = 101;\n+    enum ENETRESET       = 102;\n+    enum ECONNABORTED    = 103;\n+    enum ECONNRESET      = 104;\n+    enum ENOBUFS         = 105;\n+    enum EISCONN         = 106;\n+    enum ENOTCONN        = 107;\n+    enum ESHUTDOWN       = 108;\n+    enum ETOOMANYREFS    = 109;\n+    enum ETIMEDOUT       = 110;\n+    enum ECONNREFUSED    = 111;\n+    enum EHOSTDOWN       = 112;\n+    enum EHOSTUNREACH    = 113;\n+    enum EALREADY        = 114;\n+    enum EINPROGRESS     = 115;\n+    enum ESTALE          = 116;\n+    enum EUCLEAN         = 117;\n+    enum ENOTNAM         = 118;\n+    enum ENAVAIL         = 119;\n+    enum EISNAM          = 120;\n+    enum EREMOTEIO       = 121;\n+    enum EDQUOT          = 122;\n+    enum ENOMEDIUM       = 123;\n+    enum EMEDIUMTYPE     = 124;\n+    enum ECANCELED       = 125;\n+    enum ENOKEY          = 126;\n+    enum EKEYEXPIRED     = 127;\n+    enum EKEYREVOKED     = 128;\n+    enum EKEYREJECTED    = 129;\n+    enum EOWNERDEAD      = 130;\n+    enum ENOTRECOVERABLE = 131;\n+    enum ERFKILL         = 132;\n+    enum EHWPOISON       = 133;\n+}\n else\n {\n     static assert(false, \"Unsupported platform\");"}, {"sha": "646905eaffb4534752e9db8435b78b71b4a77708", "filename": "libphobos/libdruntime/core/stdc/stdarg.d", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdarg.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdarg.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdarg.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -47,6 +47,8 @@ version (MIPS32)  version = MIPS_Any;\n version (MIPS64)  version = MIPS_Any;\n version (PPC)     version = PPC_Any;\n version (PPC64)   version = PPC_Any;\n+version (RISCV32) version = RISCV_Any;\n+version (RISCV64) version = RISCV_Any;\n \n version (GNU)\n {\n@@ -130,6 +132,12 @@ else version (AAPCS64)\n {\n     alias va_list = core.internal.vararg.aarch64.va_list;\n }\n+else version (RISCV_Any)\n+{\n+    // The va_list type is void*, according to RISCV Calling Convention\n+    // https://github.com/riscv-non-isa/riscv-elf-psabi-doc/blob/master/riscv-cc.adoc\n+    alias va_list = void*;\n+}\n else\n {\n     alias va_list = char*; // incl. unknown platforms\n@@ -259,6 +267,19 @@ T va_arg(T)(ref va_list ap)\n         ap += T.sizeof.alignUp;\n         return *p;\n     }\n+    else version (RISCV_Any)\n+    {\n+        static if (T.sizeof > (size_t.sizeof << 1))\n+            auto p = *cast(T**) ap;\n+        else\n+        {\n+            static if (T.alignof == (size_t.sizeof << 1))\n+                ap = ap.alignUp!(size_t.sizeof << 1);\n+            auto p = cast(T*) ap;\n+        }\n+        ap += T.sizeof.alignUp;\n+        return *p;\n+    }\n     else\n         static assert(0, \"Unsupported platform\");\n }"}, {"sha": "56b3c9b3f90e139c6ba806b22ae9e749a52ce564", "filename": "libphobos/libdruntime/core/stdc/stddef.d", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstddef.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstddef.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstddef.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -34,3 +34,8 @@ else version (Posix)\n     ///\n     alias dchar wchar_t;\n }\n+else version (WASI)\n+{\n+    ///\n+    alias dchar wchar_t;\n+}"}, {"sha": "476c42f08ee456c89a94957986c29cd50c3d025f", "filename": "libphobos/libdruntime/core/stdc/stdint.d", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdint.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdint.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdint.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -377,6 +377,41 @@ else version (Solaris)\n     alias intmax_t  = long;      ///\n     alias uintmax_t = ulong;     ///\n }\n+else version (WASI)\n+{\n+    alias int8_t   = byte;   ///\n+    alias int16_t  = short;  ///\n+    alias uint8_t  = ubyte;  ///\n+    alias uint16_t = ushort; ///\n+    alias int32_t  = int;    ///\n+    alias uint32_t = uint;   ///\n+    alias int64_t  = long;   ///\n+    alias uint64_t = ulong;  ///\n+\n+    alias int_least8_t   = byte;   ///\n+    alias uint_least8_t  = ubyte;  ///\n+    alias int_least16_t  = short;  ///\n+    alias uint_least16_t = ushort; ///\n+    alias int_least32_t  = int;    ///\n+    alias uint_least32_t = uint;   ///\n+    alias int_least64_t  = long;   ///\n+    alias uint_least64_t = ulong;  ///\n+\n+    alias int_fast8_t   = byte;      ///\n+    alias uint_fast8_t  = ubyte;     ///\n+    alias int_fast16_t  = ptrdiff_t; ///\n+    alias uint_fast16_t = size_t;    ///\n+    alias int_fast32_t  = ptrdiff_t; ///\n+    alias uint_fast32_t = size_t;    ///\n+\n+    alias int_fast64_t  = long;      ///\n+    alias uint_fast64_t = ulong;     ///\n+\n+    alias intptr_t  = ptrdiff_t; ///\n+    alias uintptr_t = size_t;    ///\n+    alias intmax_t  = long;      ///\n+    alias uintmax_t = ulong;     ///\n+}\n else\n {\n     static assert(false, \"Unsupported architecture.\");"}, {"sha": "2e8381180db8e370192247de6e98803e74c0c71c", "filename": "libphobos/libdruntime/core/stdc/stdio.d", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -347,6 +347,24 @@ else version (CRuntime_UClibc)\n         L_tmpnam     = 20\n     }\n }\n+else version (WASI)\n+{\n+    enum\n+    {\n+        ///\n+        BUFSIZ       = 1024,\n+        ///\n+        EOF          = -1,\n+        ///\n+        FOPEN_MAX    = 1000,\n+        ///\n+        FILENAME_MAX = 4096,\n+        ///\n+        TMP_MAX      = 10000,\n+        ///\n+        L_tmpnam     = 20\n+    }\n+}\n else\n {\n     static assert( false, \"Unsupported platform\" );\n@@ -449,6 +467,20 @@ else version (CRuntime_Glibc)\n     ///\n     alias shared(_IO_FILE) FILE;\n }\n+else version (WASI)\n+{\n+    union fpos_t\n+    {\n+        char[16] __opaque = 0;\n+        double __align;\n+    }\n+    struct _IO_FILE;\n+\n+    ///\n+    alias _IO_FILE _iobuf; // needed for phobos\n+    ///\n+    alias shared(_IO_FILE) FILE;\n+}\n else version (CRuntime_Musl)\n {\n     union fpos_t\n@@ -1125,6 +1157,24 @@ else version (CRuntime_UClibc)\n     ///\n     extern shared FILE* stderr;\n }\n+else version (WASI)\n+{\n+    // needs tail const\n+    extern shared FILE* stdin;\n+    ///\n+    extern shared FILE* stdout;\n+    ///\n+    extern shared FILE* stderr;\n+    enum\n+    {\n+        ///\n+        _IOFBF = 0,\n+        ///\n+        _IOLBF = 1,\n+        ///\n+        _IONBF = 2,\n+    }\n+}\n else\n {\n     static assert( false, \"Unsupported platform\" );\n@@ -1793,6 +1843,28 @@ else version (CRuntime_UClibc)\n     pragma(printf)\n     int  vsnprintf(scope char* s, size_t n, scope const char* format, va_list arg);\n }\n+else version (WASI)\n+{\n+    // No unsafe pointer manipulation.\n+    @trusted\n+    {\n+        ///\n+        void rewind(FILE* stream);\n+        ///\n+        pure void clearerr(FILE* stream);\n+        ///\n+        pure int  feof(FILE* stream);\n+        ///\n+        pure int  ferror(FILE* stream);\n+        ///\n+        int  fileno(FILE *);\n+    }\n+\n+    ///\n+    int  snprintf(scope char* s, size_t n, scope const char* format, ...);\n+    ///\n+    int  vsnprintf(scope char* s, size_t n, scope const char* format, va_list arg);\n+}\n else\n {\n     static assert( false, \"Unsupported platform\" );"}, {"sha": "920c31177327cd7a0e04e37878b24a32e36a712e", "filename": "libphobos/libdruntime/core/stdc/stdlib.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdlib.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdlib.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdlib.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -99,6 +99,7 @@ else version (Solaris) enum RAND_MAX = 0x7fff;\n else version (CRuntime_Bionic) enum RAND_MAX = 0x7fffffff;\n else version (CRuntime_Musl) enum RAND_MAX = 0x7fffffff;\n else version (CRuntime_UClibc) enum RAND_MAX = 0x7fffffff;\n+else version (WASI) enum RAND_MAX = 0x7fffffff;\n else static assert( false, \"Unsupported platform\" );\n \n ///"}, {"sha": "2dcfd201dd5bb5f82f6df989ebf21902dacbbe0d", "filename": "libphobos/libdruntime/core/sys/elf/package.d", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fsys%2Felf%2Fpackage.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fsys%2Felf%2Fpackage.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Felf%2Fpackage.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -2510,3 +2510,66 @@ enum R_TILEGX_GNU_VTINHERIT =  128;\n enum R_TILEGX_GNU_VTENTRY =    129;\n \n enum R_TILEGX_NUM =            130;\n+\n+enum EF_RISCV_RVC =              0x0001;\n+enum EF_RISCV_FLOAT_ABI =        0x0006;\n+enum EF_RISCV_FLOAT_ABI_SOFT =   0x0000;\n+enum EF_RISCV_FLOAT_ABI_SINGLE = 0x0002;\n+enum EF_RISCV_FLOAT_ABI_DOUBLE = 0x0004;\n+enum EF_RISCV_FLOAT_ABI_QUAD =   0x0006;\n+enum R_RISCV_NONE =            0;\n+enum R_RISCV_32 =              1;\n+enum R_RISCV_64 =              2;\n+enum R_RISCV_RELATIVE =        3;\n+enum R_RISCV_COPY =            4;\n+enum R_RISCV_JUMP_SLOT =       5;\n+enum R_RISCV_TLS_DTPMOD32 =    6;\n+enum R_RISCV_TLS_DTPMOD64 =    7;\n+enum R_RISCV_TLS_DTPREL32 =    8;\n+enum R_RISCV_TLS_DTPREL64 =    9;\n+enum R_RISCV_TLS_TPREL32 =     10;\n+enum R_RISCV_TLS_TPREL64 =     11;\n+enum R_RISCV_BRANCH =          16;\n+enum R_RISCV_JAL =             17;\n+enum R_RISCV_CALL =            18;\n+enum R_RISCV_CALL_PLT =        19;\n+enum R_RISCV_GOT_HI20 =        20;\n+enum R_RISCV_TLS_GOT_HI20 =    21;\n+enum R_RISCV_TLS_GD_HI20 =     22;\n+enum R_RISCV_PCREL_HI20 =      23;\n+enum R_RISCV_PCREL_LO12_I =    24;\n+enum R_RISCV_PCREL_LO12_S =    25;\n+enum R_RISCV_HI20 =            26;\n+enum R_RISCV_LO12_I =          27;\n+enum R_RISCV_LO12_S =          28;\n+enum R_RISCV_TPREL_HI20 =      29;\n+enum R_RISCV_TPREL_LO12_I =    30;\n+enum R_RISCV_TPREL_LO12_S =    31;\n+enum R_RISCV_TPREL_ADD =       32;\n+enum R_RISCV_ADD8 =            33;\n+enum R_RISCV_ADD16 =           34;\n+enum R_RISCV_ADD32 =           35;\n+enum R_RISCV_ADD64 =           36;\n+enum R_RISCV_SUB8 =            37;\n+enum R_RISCV_SUB16 =           38;\n+enum R_RISCV_SUB32 =           39;\n+enum R_RISCV_SUB64 =           40;\n+enum R_RISCV_GNU_VTINHERIT =   41;\n+enum R_RISCV_GNU_VTENTRY =     42;\n+enum R_RISCV_ALIGN =           43;\n+enum R_RISCV_RVC_BRANCH =      44;\n+enum R_RISCV_RVC_JUMP =        45;\n+enum R_RISCV_RVC_LUI =         46;\n+enum R_RISCV_GPREL_I =         47;\n+enum R_RISCV_GPREL_S =         48;\n+enum R_RISCV_TPREL_I =         49;\n+enum R_RISCV_TPREL_S =         50;\n+enum R_RISCV_RELAX =           51;\n+enum R_RISCV_SUB6 =            52;\n+enum R_RISCV_SET6 =            53;\n+enum R_RISCV_SET8 =            54;\n+enum R_RISCV_SET16 =           55;\n+enum R_RISCV_SET32 =           56;\n+enum R_RISCV_32_PCREL =        57;\n+enum R_RISCV_IRELATIVE =       58;\n+enum R_RISCV_NUM =             59;"}, {"sha": "dc0a183f25e84b2efe86f52572fab268441bc3c5", "filename": "libphobos/libdruntime/core/sys/posix/fcntl.d", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ffcntl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ffcntl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ffcntl.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -123,6 +123,12 @@ version (linux)\n     enum F_SETLK        = 6;\n     enum F_SETLKW       = 7;\n   }\n+  else version (RISCV64)\n+  {\n+    enum F_GETLK        = 5;\n+    enum F_SETLK        = 6;\n+    enum F_SETLKW       = 7;\n+  }\n   else version (SystemZ)\n   {\n     static assert(off_t.sizeof == 8);"}, {"sha": "8a4b1fda27454d82e434e7399b26a344af801613", "filename": "libphobos/libdruntime/core/sys/windows/winsock2.d", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinsock2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinsock2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinsock2.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -45,15 +45,15 @@ enum NI_MAXSERV = 32;\n @nogc\n {\n int WSAStartup(ushort wVersionRequested, LPWSADATA lpWSAData);\n-int WSACleanup();\n-SOCKET socket(int af, int type, int protocol);\n+@trusted int WSACleanup();\n+@trusted SOCKET socket(int af, int type, int protocol);\n int ioctlsocket(SOCKET s, int cmd, uint* argp);\n int bind(SOCKET s, const(sockaddr)* name, socklen_t namelen);\n int connect(SOCKET s, const(sockaddr)* name, socklen_t namelen);\n-int listen(SOCKET s, int backlog);\n+@trusted int listen(SOCKET s, int backlog);\n SOCKET accept(SOCKET s, sockaddr* addr, socklen_t* addrlen);\n-int closesocket(SOCKET s);\n-int shutdown(SOCKET s, int how);\n+@trusted int closesocket(SOCKET s);\n+@trusted int shutdown(SOCKET s, int how);\n int getpeername(SOCKET s, sockaddr* name, socklen_t* namelen);\n int getsockname(SOCKET s, sockaddr* name, socklen_t* namelen);\n int send(SOCKET s, const(void)* buf, int len, int flags);\n@@ -64,11 +64,11 @@ int getsockopt(SOCKET s, int level, int optname, void* optval, socklen_t* optlen\n int setsockopt(SOCKET s, int level, int optname, const(void)* optval, socklen_t optlen);\n uint inet_addr(const char* cp);\n int select(int nfds, fd_set* readfds, fd_set* writefds, fd_set* errorfds, const(timeval)* timeout);\n-char* inet_ntoa(in_addr ina);\n+@trusted char* inet_ntoa(in_addr ina);\n hostent* gethostbyname(const char* name);\n hostent* gethostbyaddr(const(void)* addr, int len, int type);\n protoent* getprotobyname(const char* name);\n-protoent* getprotobynumber(int number);\n+@trusted protoent* getprotobynumber(int number);\n servent* getservbyname(const char* name, const char* proto);\n servent* getservbyport(int port, const char* proto);\n }"}, {"sha": "1165320f8f8b03f447a98a27d21a89e79dfd37bf", "filename": "libphobos/libdruntime/core/thread/osthread.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fosthread.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fosthread.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fosthread.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -2104,7 +2104,7 @@ private extern (D) void resume(ThreadBase _t) nothrow @nogc\n  * garbage collector on startup and before any other thread routines\n  * are called.\n  */\n-extern (C) void thread_init() @nogc\n+extern (C) void thread_init() @nogc nothrow\n {\n     // NOTE: If thread_init itself performs any allocations then the thread\n     //       routines reserved for garbage collector use may be called while\n@@ -2191,7 +2191,7 @@ package __gshared align(__traits(classInstanceAlignment, Thread)) MainThreadStor\n  * Terminates the thread module. No other thread routine may be called\n  * afterwards.\n  */\n-extern (C) void thread_term() @nogc\n+extern (C) void thread_term() @nogc nothrow\n {\n     thread_term_tpl!(Thread)(_mainThreadStore);\n }"}, {"sha": "909bffc162b1f17517525b93e4384009fb94eb11", "filename": "libphobos/libdruntime/core/thread/threadbase.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fthreadbase.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fthreadbase.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fthreadbase.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -569,14 +569,14 @@ package(core.thread):\n     __gshared align(mutexAlign) void[mutexClassInstanceSize] _slock;\n     __gshared align(mutexAlign) void[mutexClassInstanceSize] _criticalRegionLock;\n \n-    static void initLocks() @nogc\n+    static void initLocks() @nogc nothrow\n     {\n         import core.lifetime : emplace;\n         emplace!Mutex(_slock[]);\n         emplace!Mutex(_criticalRegionLock[]);\n     }\n \n-    static void termLocks() @nogc\n+    static void termLocks() @nogc nothrow\n     {\n         (cast(Mutex)_slock.ptr).__dtor();\n         (cast(Mutex)_criticalRegionLock.ptr).__dtor();\n@@ -756,13 +756,13 @@ package(core.thread):\n \n private alias attachThread = externDFunc!(\"core.thread.osthread.attachThread\", ThreadBase function(ThreadBase) @nogc nothrow);\n \n-extern (C) void _d_monitordelete_nogc(Object h) @nogc;\n+extern (C) void _d_monitordelete_nogc(Object h) @nogc nothrow;\n \n /**\n  * Terminates the thread module. No other thread routine may be called\n  * afterwards.\n  */\n-package void thread_term_tpl(ThreadT, MainThreadStore)(ref MainThreadStore _mainThreadStore) @nogc\n+package void thread_term_tpl(ThreadT, MainThreadStore)(ref MainThreadStore _mainThreadStore) @nogc nothrow\n {\n     assert(_mainThreadStore.ptr is cast(void*) ThreadBase.sm_main);\n \n@@ -1332,13 +1332,13 @@ package\n         return cast(Mutex)ll_lock.ptr;\n     }\n \n-    void initLowlevelThreads() @nogc\n+    void initLowlevelThreads() @nogc nothrow\n     {\n         import core.lifetime : emplace;\n         emplace(lowlevelLock());\n     }\n \n-    void termLowlevelThreads() @nogc\n+    void termLowlevelThreads() @nogc nothrow\n     {\n         lowlevelLock.__dtor();\n     }"}, {"sha": "9b8391e720741a5cba113f27b47208fa8c112211", "filename": "libphobos/libdruntime/core/time.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Ftime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Ftime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Ftime.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -2488,7 +2488,7 @@ private immutable long[__traits(allMembers, ClockType).length] _ticksPerSecond;\n // https://issues.dlang.org/show_bug.cgi?id=14863\n // The assert will occur when someone attempts to use _ticksPerSecond for that\n // value.\n-extern(C) void _d_initMonoTime()\n+extern(C) void _d_initMonoTime() @nogc nothrow\n {\n     // We need a mutable pointer to the ticksPerSecond array. Although this\n     // would appear to break immutability, it is logically the same as a static\n@@ -3823,7 +3823,7 @@ unittest\n }\n \n version (Darwin)\n-long machTicksPerSecond()\n+long machTicksPerSecond() @nogc nothrow\n {\n     // Be optimistic that ticksPerSecond (1e9*denom/numer) is integral. So far\n     // so good on Darwin based platforms OS X, iOS."}, {"sha": "2c3e9659fb695f97f2ff0784d3b4e9555f99dee7", "filename": "libphobos/libdruntime/core/vararg.d", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fvararg.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Fcore%2Fvararg.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fvararg.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -28,6 +28,8 @@ version (MIPS32)  version = MIPS_Any;\n version (MIPS64)  version = MIPS_Any;\n version (PPC)     version = PPC_Any;\n version (PPC64)   version = PPC_Any;\n+version (RISCV32) version = RISCV_Any;\n+version (RISCV64) version = RISCV_Any;\n \n version (ARM_Any)\n {\n@@ -136,6 +138,21 @@ void va_arg()(ref va_list ap, TypeInfo ti, void* parmn)\n         ap += tsize.alignUp;\n         parmn[0..tsize] = p[0..tsize];\n     }\n+    else version (RISCV_Any)\n+    {\n+        const tsize = ti.tsize;\n+        void* p;\n+        if (tsize > (size_t.sizeof << 1))\n+            p = *cast(void**) ap;\n+        else\n+        {\n+            if (tsize == (size_t.sizeof << 1))\n+                ap = ap.alignUp!(size_t.sizeof << 1);\n+            p = cast(void*) ap;\n+        }\n+        ap += tsize.alignUp;\n+        parmn[0..tsize] = p[0..tsize];\n+    }\n     else\n         static assert(0, \"Unsupported platform\");\n }"}, {"sha": "36552a3ce1a8e60f9f7ca0d8083591c7299d64eb", "filename": "libphobos/libdruntime/rt/critical_.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Frt%2Fcritical_.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Frt%2Fcritical_.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Fcritical_.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -18,13 +18,13 @@ nothrow:\n \n import rt.monitor_, core.atomic;\n \n-extern (C) void _d_critical_init()\n+extern (C) void _d_critical_init() @nogc nothrow\n {\n     initMutex(cast(Mutex*)&gcs.mtx);\n     head = &gcs;\n }\n \n-extern (C) void _d_critical_term()\n+extern (C) void _d_critical_term() @nogc nothrow\n {\n     // This function is only ever called by the runtime shutdown code\n     // and therefore is single threaded so the following cast is fine."}, {"sha": "0739b7451fd5f469299041c50fb4e0891fb4b290", "filename": "libphobos/libdruntime/rt/dmain2.d", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Frt%2Fdmain2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Frt%2Fdmain2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Fdmain2.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -62,22 +62,21 @@ struct UnitTestResult\n     bool summarize;\n }\n \n-extern (C) void _d_monitor_staticctor();\n-extern (C) void _d_monitor_staticdtor();\n-extern (C) void _d_critical_init();\n-extern (C) void _d_critical_term();\n+extern (C) void _d_monitor_staticctor() @nogc nothrow;\n+extern (C) void _d_monitor_staticdtor() @nogc nothrow;\n+extern (C) void _d_critical_init() @nogc nothrow;\n+extern (C) void _d_critical_term() @nogc nothrow;\n extern (C) void gc_init();\n extern (C) void gc_term();\n-extern (C) void thread_init() @nogc;\n-extern (C) void thread_term() @nogc;\n-extern (C) void lifetime_init();\n+extern (C) void thread_init() @nogc nothrow;\n+extern (C) void thread_term() @nogc nothrow;\n extern (C) void rt_moduleCtor();\n extern (C) void rt_moduleTlsCtor();\n extern (C) void rt_moduleDtor();\n extern (C) void rt_moduleTlsDtor();\n extern (C) void thread_joinAll();\n extern (C) UnitTestResult runModuleUnitTests();\n-extern (C) void _d_initMonoTime();\n+extern (C) void _d_initMonoTime() @nogc nothrow;\n \n version (CRuntime_Microsoft)\n {\n@@ -134,7 +133,6 @@ extern (C) int rt_init()\n         thread_init();\n         // TODO: fixme - calls GC.addRange -> Initializes GC\n         initStaticDataGC();\n-        lifetime_init();\n         rt_moduleCtor();\n         rt_moduleTlsCtor();\n         return 1;"}, {"sha": "18ecc31311ce482c4d5181fc6e87c86d85308ccf", "filename": "libphobos/libdruntime/rt/lifetime.d", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Frt%2Flifetime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Frt%2Flifetime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Flifetime.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -40,9 +40,11 @@ private\n     }\n }\n \n-extern (C) void lifetime_init()\n+// Now-removed symbol, kept around for ABI\n+// Some programs are dynamically linked, so best to err on the side of keeping symbols around for a while (especially extern(C) ones)\n+// https://github.com/dlang/druntime/pull/3361\n+deprecated extern (C) void lifetime_init()\n {\n-    // this is run before static ctors, so it is safe to modify immutables\n }\n \n /**"}, {"sha": "7489150636488920ffccef2626e279d5618e5cc7", "filename": "libphobos/libdruntime/rt/minfo.d", "status": "modified", "additions": 11, "deletions": 205, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Frt%2Fminfo.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Frt%2Fminfo.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Fminfo.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -58,7 +58,7 @@ struct ModuleGroup\n     // target modules are involved in a cycle.\n     //\n     // The return value is malloc'd using C, so it must be freed after use.\n-    private size_t[] genCyclePath(size_t srcidx, size_t targetidx, int[][] edges)\n+    private size_t[] genCyclePath(size_t srcidx, size_t targetidx, int[][] edges) nothrow\n     {\n         import core.bitop : bt, btc, bts;\n \n@@ -109,7 +109,7 @@ struct ModuleGroup\n             // release mode.\n             if (distance[target] != curdist)\n             {\n-                throw new Error(\"internal error printing module cycle\");\n+                assert(0, \"internal error printing module cycle\");\n             }\n \n             // determine the path. This is tricky, because we have to\n@@ -162,14 +162,13 @@ struct ModuleGroup\n      * Throws:\n      *  Exception if it fails.\n      */\n-    void sortCtors(string cycleHandling)\n+    void sortCtors(string cycleHandling) nothrow\n     {\n         import core.bitop : bts, btr, bt, BitRange;\n         import core.internal.container.hashtab;\n \n         enum OnCycle\n         {\n-            deprecate,\n             abort,\n             print,\n             ignore\n@@ -180,7 +179,9 @@ struct ModuleGroup\n         switch (cycleHandling) with(OnCycle)\n         {\n         case \"deprecate\":\n-            onCycle = deprecate;\n+            import core.stdc.stdio : fprintf, stderr;\n+            // Option deprecated in 2.101, remove in 2.111\n+            fprintf(stderr, \"`--DRT-oncycle=deprecate` is no longer supported, using `abort` instead\\n\");\n             break;\n         case \"abort\":\n             onCycle = abort;\n@@ -196,7 +197,7 @@ struct ModuleGroup\n             break;\n         default:\n             // invalid cycle handling option.\n-            throw new Error(\"DRT invalid cycle handling option: \" ~ cycleHandling);\n+            assert(0, \"DRT invalid cycle handling option: \" ~ cycleHandling);\n         }\n \n         debug (printModuleDependencies)\n@@ -280,7 +281,7 @@ struct ModuleGroup\n             .free(edges.ptr);\n         }\n \n-        void buildCycleMessage(size_t sourceIdx, size_t cycleIdx, scope void delegate(string) sink)\n+        void buildCycleMessage(size_t sourceIdx, size_t cycleIdx, scope void delegate(string) nothrow sink)\n         {\n             version (Windows)\n                 enum EOL = \"\\r\\n\";\n@@ -312,7 +313,7 @@ struct ModuleGroup\n         //\n         // If a cycle is detected, returns the index of the module that completes the cycle.\n         // Returns: true for success, false for a deprecated cycle error\n-        bool findDeps(size_t idx, size_t* reachable)\n+        bool findDeps(size_t idx, size_t* reachable) nothrow\n         {\n             static struct stackFrame\n             {\n@@ -356,14 +357,6 @@ struct ModuleGroup\n                                 // was already started, this is a cycle.\n                                 final switch (onCycle) with(OnCycle)\n                                 {\n-                                case deprecate:\n-                                    // check with old algorithm\n-                                    if (sortCtorsOld(edges))\n-                                    {\n-                                        // unwind to print deprecation message.\n-                                        return false;   // deprecated cycle error\n-                                    }\n-                                    goto case abort; // fall through\n                                 case abort:\n \n                                     string errmsg = \"\";\n@@ -418,7 +411,7 @@ struct ModuleGroup\n         // ctor/dtors that must be dealt with. It recurses only when it finds\n         // dependencies that also have static ctor/dtors.\n         // Returns: true for success, false for a deprecated cycle error\n-        bool processMod(size_t curidx)\n+        bool processMod(size_t curidx) nothrow\n         {\n             immutable ModuleInfo* current = _modules[curidx];\n \n@@ -461,7 +454,7 @@ struct ModuleGroup\n         }\n \n         // returns `false` if deprecated cycle error otherwise set `result`.\n-        bool doSort(size_t relevantFlags, ref immutable(ModuleInfo)*[] result)\n+        bool doSort(size_t relevantFlags, ref immutable(ModuleInfo)*[] result) nothrow\n         {\n             clearFlags(relevant);\n             clearFlags(ctorstart);\n@@ -533,193 +526,6 @@ struct ModuleGroup\n         sortCtors(rt_configOption(\"oncycle\"));\n     }\n \n-    /******************************\n-     * This is the old ctor sorting algorithm that does not find all cycles.\n-     *\n-     * It is here to allow the deprecated behavior from the original algorithm\n-     * until people have fixed their code.\n-     *\n-     * If no cycles are found, the _ctors and _tlsctors are replaced with the\n-     * ones generated by this algorithm to preserve the old incorrect ordering\n-     * behavior.\n-     *\n-     * Params:\n-     *   edges = The module edges as found in the `importedModules` member of\n-     *          each ModuleInfo. Generated in sortCtors.\n-     * Returns:\n-     *   true if no cycle is found, false if one was.\n-     */\n-    bool sortCtorsOld(int[][] edges)\n-    {\n-        immutable len = edges.length;\n-        assert(len == _modules.length);\n-\n-        static struct StackRec\n-        {\n-            @property int mod()\n-            {\n-                return _mods[_idx];\n-            }\n-\n-            int[] _mods;\n-            size_t         _idx;\n-        }\n-\n-        auto stack = (cast(StackRec*).calloc(len, StackRec.sizeof))[0 .. len];\n-        // TODO: reuse GCBits by moving it to core.internal.container\n-        immutable nwords = (len + 8 * size_t.sizeof - 1) / (8 * size_t.sizeof);\n-        auto ctorstart = cast(size_t*).malloc(nwords * size_t.sizeof);\n-        auto ctordone = cast(size_t*).malloc(nwords * size_t.sizeof);\n-        int[] initialEdges = (cast(int *)malloc(int.sizeof * len))[0 .. len];\n-        if (!stack.ptr || ctorstart is null || ctordone is null || !initialEdges.ptr)\n-            assert(0);\n-        scope (exit)\n-        {\n-            .free(stack.ptr);\n-            .free(ctorstart);\n-            .free(ctordone);\n-            .free(initialEdges.ptr);\n-        }\n-\n-        // initialize the initial edges\n-        foreach (i, ref v; initialEdges)\n-            v = cast(int)i;\n-\n-        bool sort(ref immutable(ModuleInfo)*[] ctors, uint mask)\n-        {\n-            import core.bitop;\n-\n-            ctors = (cast(immutable(ModuleInfo)**).malloc(len * size_t.sizeof))[0 .. len];\n-            if (!ctors.ptr)\n-                assert(0);\n-\n-            // clean flags\n-            memset(ctorstart, 0, nwords * size_t.sizeof);\n-            memset(ctordone, 0, nwords * size_t.sizeof);\n-            size_t stackidx = 0;\n-            size_t cidx;\n-\n-            int[] mods = initialEdges;\n-\n-            size_t idx;\n-            while (true)\n-            {\n-                while (idx < mods.length)\n-                {\n-                    auto m = mods[idx];\n-\n-                    if (bt(ctordone, m))\n-                    {\n-                        // this module has already been processed, skip\n-                        ++idx;\n-                        continue;\n-                    }\n-                    else if (bt(ctorstart, m))\n-                    {\n-                        /* Trace back to the begin of the cycle.\n-                         */\n-                        bool ctorInCycle;\n-                        size_t start = stackidx;\n-                        while (start--)\n-                        {\n-                            auto sm = stack[start].mod;\n-                            if (sm == m)\n-                                break;\n-                            assert(sm >= 0);\n-                            if (bt(ctorstart, sm))\n-                                ctorInCycle = true;\n-                        }\n-                        assert(stack[start].mod == m);\n-                        if (ctorInCycle)\n-                        {\n-                            return false;\n-                        }\n-                        else\n-                        {\n-                            /* This is also a cycle, but the import chain does not constrain\n-                             * the order of initialization, either because the imported\n-                             * modules have no ctors or the ctors are standalone.\n-                             */\n-                            ++idx;\n-                        }\n-                    }\n-                    else\n-                    {\n-                        auto curmod = _modules[m];\n-                        if (curmod.flags & mask)\n-                        {\n-                            if (curmod.flags & MIstandalone || !edges[m].length)\n-                            {   // trivial ctor => sort in\n-                                ctors[cidx++] = curmod;\n-                                bts(ctordone, m);\n-                            }\n-                            else\n-                            {   // non-trivial ctor => defer\n-                                bts(ctorstart, m);\n-                            }\n-                        }\n-                        else    // no ctor => mark as visited\n-                        {\n-                            bts(ctordone, m);\n-                        }\n-\n-                        if (edges[m].length)\n-                        {\n-                            /* Internal runtime error, recursion exceeds number of modules.\n-                             */\n-                            (stackidx < len) || assert(0);\n-\n-                            // recurse\n-                            stack[stackidx++] = StackRec(mods, idx);\n-                            idx  = 0;\n-                            mods = edges[m];\n-                        }\n-                    }\n-                }\n-\n-                if (stackidx)\n-                {   // pop old value from stack\n-                    --stackidx;\n-                    mods    = stack[stackidx]._mods;\n-                    idx     = stack[stackidx]._idx;\n-                    auto m  = mods[idx++];\n-                    if (bt(ctorstart, m) && !bts(ctordone, m))\n-                        ctors[cidx++] = _modules[m];\n-                }\n-                else // done\n-                    break;\n-            }\n-            // store final number and shrink array\n-            ctors = (cast(immutable(ModuleInfo)**).realloc(ctors.ptr, cidx * size_t.sizeof))[0 .. cidx];\n-            return true;\n-        }\n-\n-        /* Do two passes: ctor/dtor, tlsctor/tlsdtor\n-         */\n-        immutable(ModuleInfo)*[] _ctors2;\n-        immutable(ModuleInfo)*[] _tlsctors2;\n-        auto result = sort(_ctors2, MIctor | MIdtor) && sort(_tlsctors2, MItlsctor | MItlsdtor);\n-        if (result) // no cycle\n-        {\n-            // fall back to original ordering as part of the deprecation.\n-            if (_ctors.ptr)\n-                .free(_ctors.ptr);\n-            _ctors = _ctors2;\n-            if (_tlsctors.ptr)\n-                .free(_tlsctors.ptr);\n-            _tlsctors = _tlsctors2;\n-        }\n-        else\n-        {\n-            // free any allocated memory that will be forgotten\n-            if (_ctors2.ptr)\n-                .free(_ctors2.ptr);\n-            if (_tlsctors2.ptr)\n-                .free(_tlsctors2.ptr);\n-        }\n-        return result;\n-    }\n-\n     void runCtors()\n     {\n         // run independent ctors"}, {"sha": "c1f3f3cb9a700725229181a3ec1c7e07e3d3028c", "filename": "libphobos/libdruntime/rt/monitor_.d", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Frt%2Fmonitor_.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Flibdruntime%2Frt%2Fmonitor_.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Fmonitor_.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -54,7 +54,7 @@ extern (C) void _d_monitordelete(Object h, bool det)\n }\n \n // does not call dispose events, for internal use only\n-extern (C) void _d_monitordelete_nogc(Object h) @nogc\n+extern (C) void _d_monitordelete_nogc(Object h) @nogc nothrow\n {\n     auto m = getMonitor(h);\n     if (m is null)\n@@ -148,7 +148,7 @@ extern (C) void rt_detachDisposeEvent(Object h, DEvent e)\n \n nothrow:\n \n-extern (C) void _d_monitor_staticctor()\n+extern (C) void _d_monitor_staticctor() @nogc nothrow\n {\n     version (Posix)\n     {\n@@ -158,7 +158,7 @@ extern (C) void _d_monitor_staticctor()\n     initMutex(&gmtx);\n }\n \n-extern (C) void _d_monitor_staticdtor()\n+extern (C) void _d_monitor_staticdtor() @nogc nothrow\n {\n     destroyMutex(&gmtx);\n     version (Posix)"}, {"sha": "a4daa8419bfe416a8938c862d1372dfb5b4aa2a4", "filename": "libphobos/src/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Fsrc%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Fsrc%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2FMERGE?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -1,4 +1,4 @@\n-1206fc94f967b0183667a109049cbf596deaa696\n+a4a18d21c4ea7930f80309f85e38c571c5f6d4b8\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/phobos repository."}, {"sha": "6b1541a2532405be426809eea1620b79954d0b47", "filename": "libphobos/src/std/complex.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Fsrc%2Fstd%2Fcomplex.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Fsrc%2Fstd%2Fcomplex.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fcomplex.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -935,7 +935,7 @@ Complex!(CommonType!(T, U)) fromPolar(T, U)(const T modulus, const U argument)\n     import std.math.operations : isClose;\n     import std.math.algebraic : sqrt;\n     import std.math.constants : PI_4;\n-    auto z = fromPolar(core.math.sqrt(2.0), PI_4);\n+    auto z = fromPolar(core.math.sqrt(2.0L), PI_4);\n     assert(isClose(z.re, 1.0L));\n     assert(isClose(z.im, 1.0L));\n }"}, {"sha": "d899db707936cd13d735748c5680702685940856", "filename": "libphobos/src/std/experimental/logger/core.d", "status": "modified", "additions": 58, "deletions": 271, "changes": 329, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Fsrc%2Fstd%2Fexperimental%2Flogger%2Fcore.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Fsrc%2Fstd%2Fexperimental%2Flogger%2Fcore.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fexperimental%2Flogger%2Fcore.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -12,56 +12,6 @@ import std.traits;\n \n import std.experimental.logger.filelogger;\n \n-/** This template evaluates if the passed `LogLevel` is active.\n-The previously described version statements are used to decide if the\n-`LogLevel` is active. The version statements only influence the compile\n-unit they are used with, therefore this function can only disable logging this\n-specific compile unit.\n-*/\n-template isLoggingActiveAt(LogLevel ll)\n-{\n-    version (StdLoggerDisableLogging)\n-    {\n-        enum isLoggingActiveAt = false;\n-    }\n-    else\n-    {\n-        static if (ll == LogLevel.trace)\n-        {\n-            version (StdLoggerDisableTrace) enum isLoggingActiveAt = false;\n-        }\n-        else static if (ll == LogLevel.info)\n-        {\n-            version (StdLoggerDisableInfo) enum isLoggingActiveAt = false;\n-        }\n-        else static if (ll == LogLevel.warning)\n-        {\n-            version (StdLoggerDisableWarning) enum isLoggingActiveAt = false;\n-        }\n-        else static if (ll == LogLevel.error)\n-        {\n-            version (StdLoggerDisableError) enum isLoggingActiveAt = false;\n-        }\n-        else static if (ll == LogLevel.critical)\n-        {\n-            version (StdLoggerDisableCritical) enum isLoggingActiveAt = false;\n-        }\n-        else static if (ll == LogLevel.fatal)\n-        {\n-            version (StdLoggerDisableFatal) enum isLoggingActiveAt = false;\n-        }\n-        // If `isLoggingActiveAt` didn't get defined above to false,\n-        // we default it to true.\n-        static if (!is(typeof(isLoggingActiveAt) == bool))\n-        {\n-            enum isLoggingActiveAt = true;\n-        }\n-    }\n-}\n-\n-/// This compile-time flag is `true` if logging is not statically disabled.\n-enum isLoggingActive = isLoggingActiveAt!(LogLevel.all);\n-\n /** This functions is used at runtime to determine if a `LogLevel` is\n active. The same previously defined version statements are used to disable\n certain levels. Again the version statements are associated with a compile\n@@ -71,26 +21,6 @@ pure bool isLoggingEnabled()(LogLevel ll) @safe nothrow @nogc\n bool isLoggingEnabled()(LogLevel ll, LogLevel loggerLL,\n     LogLevel globalLL, lazy bool condition = true) @safe\n {\n-    switch (ll)\n-    {\n-        case LogLevel.trace:\n-            version (StdLoggerDisableTrace) return false;\n-            else break;\n-        case LogLevel.info:\n-            version (StdLoggerDisableInfo) return false;\n-            else break;\n-        case LogLevel.warning:\n-            version (StdLoggerDisableWarning) return false;\n-            else break;\n-        case LogLevel.critical:\n-            version (StdLoggerDisableCritical) return false;\n-            else break;\n-        case LogLevel.fatal:\n-            version (StdLoggerDisableFatal) return false;\n-            else break;\n-        default: break;\n-    }\n-\n     return ll >= globalLL\n         && ll >= loggerLL\n         && ll != LogLevel.off\n@@ -99,66 +29,6 @@ bool isLoggingEnabled()(LogLevel ll, LogLevel loggerLL,\n         && condition;\n }\n \n-/** This template returns the `LogLevel` named \"logLevel\" of type $(D\n-LogLevel) defined in a user defined module where the filename has the\n-suffix \"_loggerconfig.d\". This `LogLevel` sets the minimal `LogLevel`\n-of the module.\n-\n-A minimal `LogLevel` can be defined on a per module basis.\n-In order to define a module `LogLevel` a file with a modulename\n-\"MODULENAME_loggerconfig\" must be found. If no such module exists and the\n-module is a nested module, it is checked if there exists a\n-\"PARENT_MODULE_loggerconfig\" module with such a symbol.\n-If this module exists and it contains a `LogLevel` called logLevel this $(D\n-LogLevel) will be used. This parent lookup is continued until there is no\n-parent module. Then the moduleLogLevel is `LogLevel.all`.\n-*/\n-template moduleLogLevel(string moduleName)\n-if (!moduleName.length)\n-{\n-    // default\n-    enum moduleLogLevel = LogLevel.all;\n-}\n-\n-///\n-@system unittest\n-{\n-    static assert(moduleLogLevel!\"\" == LogLevel.all);\n-}\n-\n-/// ditto\n-template moduleLogLevel(string moduleName)\n-if (moduleName.length)\n-{\n-    import std.string : format;\n-    mixin(q{\n-        static if (__traits(compiles, {import %1$s : logLevel;}))\n-        {\n-            import %1$s : logLevel;\n-            static assert(is(typeof(logLevel) : LogLevel),\n-                          \"Expect 'logLevel' to be of Type 'LogLevel'.\");\n-            // don't enforce enum here\n-            alias moduleLogLevel = logLevel;\n-        }\n-        else\n-            // use logLevel of package or default\n-            alias moduleLogLevel = moduleLogLevel!(parentOf(moduleName));\n-    }.format(moduleName ~ \"_loggerconfig\"));\n-}\n-\n-///\n-@system unittest\n-{\n-    static assert(moduleLogLevel!\"not.amodule.path\" == LogLevel.all);\n-}\n-\n-private string parentOf(string mod)\n-{\n-    foreach_reverse (i, c; mod)\n-        if (c == '.') return mod[0 .. i];\n-    return null;\n-}\n-\n /* This function formates a `SysTime` into an `OutputRange`.\n \n The `SysTime` is formatted similar to\n@@ -200,29 +70,17 @@ void log(int line = __LINE__, string file = __FILE__,\n     lazy bool condition, lazy A args)\n if (args.length != 1)\n {\n-    static if (isLoggingActive)\n-    {\n-        if (ll >= moduleLogLevel!moduleName)\n-        {\n-               stdThreadLocalLog.log!(line, file, funcName, prettyFuncName, moduleName)\n-                (ll, condition, args);\n-        }\n-    }\n+    stdThreadLocalLog.log!(line, file, funcName, prettyFuncName, moduleName)\n+        (ll, condition, args);\n }\n \n /// Ditto\n void log(T, string moduleName = __MODULE__)(const LogLevel ll,\n     lazy bool condition, lazy T arg, int line = __LINE__, string file = __FILE__,\n     string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__)\n {\n-    static if (isLoggingActive)\n-    {\n-        if (ll >= moduleLogLevel!moduleName)\n-        {\n-            stdThreadLocalLog.log!(T,moduleName)(ll, condition, arg, line, file, funcName,\n-                prettyFuncName);\n-        }\n-    }\n+    stdThreadLocalLog.log!(T,moduleName)(ll, condition, arg, line, file, funcName,\n+        prettyFuncName);\n }\n \n /** This function logs data.\n@@ -244,29 +102,17 @@ void log(int line = __LINE__, string file = __FILE__,\n     string moduleName = __MODULE__, A...)(const LogLevel ll, lazy A args)\n if (args.length > 1 && !is(Unqual!(A[0]) : bool))\n {\n-    static if (isLoggingActive)\n-    {\n-        if (ll >= moduleLogLevel!moduleName)\n-        {\n-            stdThreadLocalLog.log!(line, file, funcName, prettyFuncName, moduleName)\n-                (ll, args);\n-        }\n-    }\n+    stdThreadLocalLog.log!(line, file, funcName, prettyFuncName, moduleName)\n+        (ll, args);\n }\n \n /// Ditto\n void log(T, string moduleName = __MODULE__)(const LogLevel ll, lazy T arg,\n     int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__,\n     string prettyFuncName = __PRETTY_FUNCTION__)\n {\n-    static if (isLoggingActive)\n-    {\n-        if (ll >= moduleLogLevel!moduleName)\n-        {\n-            stdThreadLocalLog.log!T(ll, arg, line, file, funcName, prettyFuncName,\n-                moduleName);\n-        }\n-    }\n+    stdThreadLocalLog.log!T(ll, arg, line, file, funcName, prettyFuncName,\n+        moduleName);\n }\n \n /** This function logs data.\n@@ -289,23 +135,17 @@ void log(int line = __LINE__, string file = __FILE__,\n     string moduleName = __MODULE__, A...)(lazy bool condition, lazy A args)\n if (args.length != 1)\n {\n-    static if (isLoggingActive)\n-    {\n-        stdThreadLocalLog.log!(line, file, funcName, prettyFuncName, moduleName)\n-            (stdThreadLocalLog.logLevel, condition, args);\n-    }\n+    stdThreadLocalLog.log!(line, file, funcName, prettyFuncName, moduleName)\n+        (stdThreadLocalLog.logLevel, condition, args);\n }\n \n /// Ditto\n void log(T, string moduleName = __MODULE__)(lazy bool condition, lazy T arg,\n     int line = __LINE__, string file = __FILE__, string funcName = __FUNCTION__,\n     string prettyFuncName = __PRETTY_FUNCTION__)\n {\n-    static if (isLoggingActive)\n-    {\n-        stdThreadLocalLog.log!(T,moduleName)(stdThreadLocalLog.logLevel,\n-            condition, arg, line, file, funcName, prettyFuncName);\n-    }\n+    stdThreadLocalLog.log!(T,moduleName)(stdThreadLocalLog.logLevel,\n+        condition, arg, line, file, funcName, prettyFuncName);\n }\n \n /** This function logs data.\n@@ -328,22 +168,16 @@ if ((args.length > 1 && !is(Unqual!(A[0]) : bool)\n     && !is(Unqual!(A[0]) == LogLevel))\n     || args.length == 0)\n {\n-    static if (isLoggingActive)\n-    {\n-        stdThreadLocalLog.log!(line, file, funcName,\n-           prettyFuncName, moduleName)(stdThreadLocalLog.logLevel, args);\n-    }\n+    stdThreadLocalLog.log!(line, file, funcName,\n+       prettyFuncName, moduleName)(stdThreadLocalLog.logLevel, args);\n }\n \n void log(T)(lazy T arg, int line = __LINE__, string file = __FILE__,\n     string funcName = __FUNCTION__, string prettyFuncName = __PRETTY_FUNCTION__,\n     string moduleName = __MODULE__)\n {\n-    static if (isLoggingActive)\n-    {\n-        stdThreadLocalLog.log!T(stdThreadLocalLog.logLevel, arg, line, file,\n-            funcName, prettyFuncName, moduleName);\n-    }\n+    stdThreadLocalLog.log!T(stdThreadLocalLog.logLevel, arg, line, file,\n+        funcName, prettyFuncName, moduleName);\n }\n \n /** This function logs data in a `printf`-style manner.\n@@ -369,14 +203,8 @@ void logf(int line = __LINE__, string file = __FILE__,\n     string moduleName = __MODULE__, A...)(const LogLevel ll,\n     lazy bool condition, lazy string msg, lazy A args)\n {\n-    static if (isLoggingActive)\n-    {\n-        if (ll >= moduleLogLevel!moduleName)\n-        {\n-            stdThreadLocalLog.logf!(line, file, funcName, prettyFuncName, moduleName)\n-                (ll, condition, msg, args);\n-        }\n-    }\n+    stdThreadLocalLog.logf!(line, file, funcName, prettyFuncName, moduleName)\n+        (ll, condition, msg, args);\n }\n \n /** This function logs data in a `printf`-style manner.\n@@ -400,14 +228,8 @@ void logf(int line = __LINE__, string file = __FILE__,\n     string moduleName = __MODULE__, A...)(const LogLevel ll, lazy string msg,\n         lazy A args)\n {\n-    static if (isLoggingActive)\n-    {\n-        if (ll >= moduleLogLevel!moduleName)\n-        {\n-            stdThreadLocalLog.logf!(line, file, funcName, prettyFuncName, moduleName)\n-                (ll, msg, args);\n-        }\n-    }\n+    stdThreadLocalLog.logf!(line, file, funcName, prettyFuncName, moduleName)\n+        (ll, msg, args);\n }\n \n /** This function logs data in a `printf`-style manner.\n@@ -431,11 +253,8 @@ void logf(int line = __LINE__, string file = __FILE__,\n     string moduleName = __MODULE__, A...)(lazy bool condition,\n         lazy string msg, lazy A args)\n {\n-    static if (isLoggingActive)\n-    {\n-        stdThreadLocalLog.logf!(line, file, funcName, prettyFuncName, moduleName)\n-            (stdThreadLocalLog.logLevel, condition, msg, args);\n-    }\n+    stdThreadLocalLog.logf!(line, file, funcName, prettyFuncName, moduleName)\n+        (stdThreadLocalLog.logLevel, condition, msg, args);\n }\n \n /** This function logs data in a `printf`-style manner.\n@@ -457,11 +276,8 @@ void logf(int line = __LINE__, string file = __FILE__,\n     string prettyFuncName = __PRETTY_FUNCTION__,\n     string moduleName = __MODULE__, A...)(lazy string msg, lazy A args)\n {\n-    static if (isLoggingActive)\n-    {\n-        stdThreadLocalLog.logf!(line, file, funcName,prettyFuncName, moduleName)\n-            (stdThreadLocalLog.logLevel, msg, args);\n-    }\n+    stdThreadLocalLog.logf!(line, file, funcName,prettyFuncName, moduleName)\n+        (stdThreadLocalLog.logLevel, msg, args);\n }\n \n /** This template provides the global log functions with the `LogLevel`\n@@ -478,23 +294,17 @@ template defaultLogFunction(LogLevel ll)\n         string moduleName = __MODULE__, A...)(lazy A args)\n         if ((args.length > 0 && !is(Unqual!(A[0]) : bool)) || args.length == 0)\n     {\n-        static if (isLoggingActiveAt!ll && ll >= moduleLogLevel!moduleName)\n-        {\n             stdThreadLocalLog.memLogFunctions!(ll).logImpl!(line, file, funcName,\n                 prettyFuncName, moduleName)(args);\n-        }\n     }\n \n     void defaultLogFunction(int line = __LINE__, string file = __FILE__,\n         string funcName = __FUNCTION__,\n         string prettyFuncName = __PRETTY_FUNCTION__,\n         string moduleName = __MODULE__, A...)(lazy bool condition, lazy A args)\n     {\n-        static if (isLoggingActiveAt!ll && ll >= moduleLogLevel!moduleName)\n-        {\n-            stdThreadLocalLog.memLogFunctions!(ll).logImpl!(line, file, funcName,\n-                prettyFuncName, moduleName)(condition, args);\n-        }\n+        stdThreadLocalLog.memLogFunctions!(ll).logImpl!(line, file, funcName,\n+            prettyFuncName, moduleName)(condition, args);\n     }\n }\n \n@@ -551,11 +361,8 @@ template defaultLogFunctionf(LogLevel ll)\n         string prettyFuncName = __PRETTY_FUNCTION__,\n         string moduleName = __MODULE__, A...)(lazy string msg, lazy A args)\n     {\n-        static if (isLoggingActiveAt!ll && ll >= moduleLogLevel!moduleName)\n-        {\n-            stdThreadLocalLog.memLogFunctions!(ll).logImplf!(line, file, funcName,\n-                prettyFuncName, moduleName)(msg, args);\n-        }\n+        stdThreadLocalLog.memLogFunctions!(ll).logImplf!(line, file, funcName,\n+            prettyFuncName, moduleName)(msg, args);\n     }\n \n     void defaultLogFunctionf(int line = __LINE__, string file = __FILE__,\n@@ -564,11 +371,8 @@ template defaultLogFunctionf(LogLevel ll)\n         string moduleName = __MODULE__, A...)(lazy bool condition,\n             lazy string msg, lazy A args)\n     {\n-        static if (isLoggingActiveAt!ll && ll >= moduleLogLevel!moduleName)\n-        {\n-            stdThreadLocalLog.memLogFunctions!(ll).logImplf!(line, file, funcName,\n-                prettyFuncName, moduleName)(condition, msg, args);\n-        }\n+        stdThreadLocalLog.memLogFunctions!(ll).logImplf!(line, file, funcName,\n+            prettyFuncName, moduleName)(condition, msg, args);\n     }\n }\n \n@@ -816,32 +620,23 @@ abstract class Logger\n         Tid threadId, SysTime timestamp, Logger logger)\n         @safe\n     {\n-        static if (isLoggingActive)\n-        {\n-            msgAppender = appender!string();\n-            header = LogEntry(file, line, funcName, prettyFuncName,\n-                moduleName, logLevel, threadId, timestamp, null, logger);\n-        }\n+        msgAppender = appender!string();\n+        header = LogEntry(file, line, funcName, prettyFuncName,\n+            moduleName, logLevel, threadId, timestamp, null, logger);\n     }\n \n     /** Logs a part of the log message. */\n     protected void logMsgPart(scope const(char)[] msg) @safe\n     {\n-        static if (isLoggingActive)\n-        {\n-               msgAppender.put(msg);\n-        }\n+       msgAppender.put(msg);\n     }\n \n     /** Signals that the message has been written and no more calls to\n     `logMsgPart` follow. */\n     protected void finishLogMsg() @safe\n     {\n-        static if (isLoggingActive)\n-        {\n-            header.msg = msgAppender.data;\n-            this.writeLogMsg(header);\n-        }\n+        header.msg = msgAppender.data;\n+        this.writeLogMsg(header);\n     }\n \n     /** The `LogLevel` determines if the log call are processed or dropped\n@@ -895,16 +690,13 @@ abstract class Logger\n     */\n     void forwardMsg(ref LogEntry payload) @trusted\n     {\n-        static if (isLoggingActive) synchronized (mutex)\n+        if (isLoggingEnabled(payload.logLevel, this.logLevel_,\n+            globalLogLevel))\n         {\n-            if (isLoggingEnabled(payload.logLevel, this.logLevel_,\n-                globalLogLevel))\n-            {\n-                this.writeLogMsg(payload);\n+            this.writeLogMsg(payload);\n \n-                if (payload.logLevel == LogLevel.fatal)\n-                    this.fatalHandler_();\n-            }\n+            if (payload.logLevel == LogLevel.fatal)\n+                this.fatalHandler_();\n         }\n     }\n \n@@ -944,8 +736,7 @@ abstract class Logger\n             string moduleName = __MODULE__, A...)(lazy A args)\n             if (args.length == 0 || (args.length > 0 && !is(A[0] : bool)))\n         {\n-            static if (isLoggingActiveAt!ll && ll >= moduleLogLevel!moduleName)\n-                synchronized (mutex)\n+            synchronized (mutex)\n             {\n                 if (isLoggingEnabled(ll, this.logLevel_, globalLogLevel))\n                 {\n@@ -991,8 +782,7 @@ abstract class Logger\n             string moduleName = __MODULE__, A...)(lazy bool condition,\n                 lazy A args)\n         {\n-            static if (isLoggingActiveAt!ll && ll >= moduleLogLevel!moduleName)\n-                synchronized (mutex)\n+            synchronized (mutex)\n             {\n                 if (isLoggingEnabled(ll, this.logLevel_, globalLogLevel,\n                                      condition))\n@@ -1040,8 +830,7 @@ abstract class Logger\n             string moduleName = __MODULE__, A...)(lazy bool condition,\n                 lazy string msg, lazy A args)\n         {\n-            static if (isLoggingActiveAt!ll && ll >= moduleLogLevel!moduleName)\n-                synchronized (mutex)\n+            synchronized (mutex)\n             {\n                 import std.format.write : formattedWrite;\n \n@@ -1088,8 +877,7 @@ abstract class Logger\n             string prettyFuncName = __PRETTY_FUNCTION__,\n             string moduleName = __MODULE__, A...)(lazy string msg, lazy A args)\n         {\n-            static if (isLoggingActiveAt!ll && ll >= moduleLogLevel!moduleName)\n-                synchronized (mutex)\n+            synchronized (mutex)\n             {\n                 import std.format.write : formattedWrite;\n \n@@ -1161,7 +949,7 @@ abstract class Logger\n         lazy bool condition, lazy A args)\n         if (args.length != 1)\n     {\n-        static if (isLoggingActive) synchronized (mutex)\n+        synchronized (mutex)\n         {\n             if (isLoggingEnabled(ll, this.logLevel_, globalLogLevel, condition))\n             {\n@@ -1185,10 +973,9 @@ abstract class Logger\n         string file = __FILE__, string funcName = __FUNCTION__,\n         string prettyFuncName = __PRETTY_FUNCTION__)\n     {\n-        static if (isLoggingActive) synchronized (mutex)\n+        synchronized (mutex)\n         {\n-            if (isLoggingEnabled(ll, this.logLevel_, globalLogLevel,\n-                condition) && ll >= moduleLogLevel!moduleName)\n+            if (isLoggingEnabled(ll, this.logLevel_, globalLogLevel, condition))\n             {\n                 this.beginLogMsg(file, line, funcName, prettyFuncName,\n                     moduleName, ll, thisTid, Clock.currTime, this);\n@@ -1230,7 +1017,7 @@ abstract class Logger\n         string moduleName = __MODULE__, A...)(const LogLevel ll, lazy A args)\n         if ((args.length > 1 && !is(Unqual!(A[0]) : bool)) || args.length == 0)\n     {\n-        static if (isLoggingActive) synchronized (mutex)\n+        synchronized (mutex)\n         {\n             if (isLoggingEnabled(ll, this.logLevel_, globalLogLevel))\n             {\n@@ -1254,7 +1041,7 @@ abstract class Logger\n         string prettyFuncName = __PRETTY_FUNCTION__,\n         string moduleName = __MODULE__)\n     {\n-        static if (isLoggingActive) synchronized (mutex)\n+        synchronized (mutex)\n         {\n             if (isLoggingEnabled(ll, this.logLevel_, globalLogLevel))\n             {\n@@ -1299,7 +1086,7 @@ abstract class Logger\n         string moduleName = __MODULE__, A...)(lazy bool condition, lazy A args)\n         if (args.length != 1)\n     {\n-        static if (isLoggingActive) synchronized (mutex)\n+        synchronized (mutex)\n         {\n             if (isLoggingEnabled(this.logLevel_, this.logLevel_,\n                 globalLogLevel, condition))\n@@ -1324,7 +1111,7 @@ abstract class Logger\n         string prettyFuncName = __PRETTY_FUNCTION__,\n         string moduleName = __MODULE__)\n     {\n-        static if (isLoggingActive) synchronized (mutex)\n+        synchronized (mutex)\n         {\n             if (isLoggingEnabled(this.logLevel_, this.logLevel_, globalLogLevel,\n                 condition))\n@@ -1371,7 +1158,7 @@ abstract class Logger\n                 && !is(immutable A[0] == immutable LogLevel))\n             || args.length == 0)\n     {\n-        static if (isLoggingActive) synchronized (mutex)\n+        synchronized (mutex)\n         {\n             if (isLoggingEnabled(this.logLevel_, this.logLevel_,\n                 globalLogLevel))\n@@ -1395,7 +1182,7 @@ abstract class Logger\n         string prettyFuncName = __PRETTY_FUNCTION__,\n         string moduleName = __MODULE__)\n     {\n-        static if (isLoggingActive) synchronized (mutex)\n+        synchronized (mutex)\n         {\n             if (isLoggingEnabled(this.logLevel_, this.logLevel_, globalLogLevel))\n             {\n@@ -1442,7 +1229,7 @@ abstract class Logger\n         string moduleName = __MODULE__, A...)(const LogLevel ll,\n         lazy bool condition, lazy string msg, lazy A args)\n     {\n-        static if (isLoggingActive) synchronized (mutex)\n+        synchronized (mutex)\n         {\n             import std.format.write : formattedWrite;\n \n@@ -1490,7 +1277,7 @@ abstract class Logger\n         string moduleName = __MODULE__, A...)(const LogLevel ll,\n             lazy string msg, lazy A args)\n     {\n-        static if (isLoggingActive) synchronized (mutex)\n+        synchronized (mutex)\n         {\n             import std.format.write : formattedWrite;\n \n@@ -1539,7 +1326,7 @@ abstract class Logger\n         string moduleName = __MODULE__, A...)(lazy bool condition,\n             lazy string msg, lazy A args)\n     {\n-        static if (isLoggingActive) synchronized (mutex)\n+        synchronized (mutex)\n         {\n             import std.format.write : formattedWrite;\n \n@@ -1585,7 +1372,7 @@ abstract class Logger\n         string prettyFuncName = __PRETTY_FUNCTION__,\n         string moduleName = __MODULE__, A...)(lazy string msg, lazy A args)\n     {\n-        static if (isLoggingActive) synchronized (mutex)\n+        synchronized (mutex)\n         {\n             import std.format.write : formattedWrite;\n "}, {"sha": "89dc7131fb3be62b4414a73bef1df038d3ad8769", "filename": "libphobos/src/std/experimental/logger/package.d", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Fsrc%2Fstd%2Fexperimental%2Flogger%2Fpackage.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Fsrc%2Fstd%2Fexperimental%2Flogger%2Fpackage.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fexperimental%2Flogger%2Fpackage.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -146,26 +146,6 @@ To gain more precise control over the logging process, additionally to\n overriding the `writeLogMsg` method the methods `beginLogMsg`,\n `logMsgPart` and `finishLogMsg` can be overridden.\n \n-$(H3 Compile Time Disabling of `Logger`)\n-In order to disable logging at compile time, pass `StdLoggerDisableLogging` as a\n-version argument to the `D` compiler when compiling your program code.\n-This will disable all logging functionality.\n-Specific `LogLevel` can be disabled at compile time as well.\n-In order to disable logging with the `trace` `LogLevel` pass\n-`StdLoggerDisableTrace` as a version.\n-The following table shows which version statement disables which\n-`LogLevel`.\n-$(TABLE\n-    $(TR $(TD `LogLevel.trace` ) $(TD StdLoggerDisableTrace))\n-    $(TR $(TD `LogLevel.info` ) $(TD StdLoggerDisableInfo))\n-    $(TR $(TD `LogLevel.warning` ) $(TD StdLoggerDisableWarning))\n-    $(TR $(TD `LogLevel.error` ) $(TD StdLoggerDisableError))\n-    $(TR $(TD `LogLevel.critical` ) $(TD StdLoggerDisableCritical))\n-    $(TR $(TD `LogLevel.fatal` ) $(TD StdLoggerDisableFatal))\n-)\n-Such a version statement will only disable logging in the associated compile\n-unit.\n-\n $(H3 Provided Logger)\n By default four `Logger` implementations are given. The `FileLogger`\n logs data to files. It can also be used to log to `stdout` and `stderr`"}, {"sha": "05fad6724e0584aa7aca5067832e7b47d70849a0", "filename": "libphobos/src/std/file.d", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Fsrc%2Fstd%2Ffile.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Fsrc%2Fstd%2Ffile.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Ffile.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -3610,7 +3610,7 @@ version (StdDdoc)\n             Throws:\n                 $(LREF FileException) if the file does not exist.\n         +/\n-        this(string path);\n+        this(return scope string path);\n \n         version (Windows)\n         {\n@@ -3772,7 +3772,7 @@ else version (Windows)\n     public:\n         alias name this;\n \n-        this(string path)\n+        this(return scope string path)\n         {\n             import std.datetime.systime : FILETIMEToSysTime;\n \n@@ -3881,7 +3881,7 @@ else version (Posix)\n     public:\n         alias name this;\n \n-        this(string path)\n+        this(return scope string path)\n         {\n             if (!path.exists)\n                 throw new FileException(path, \"File does not exist\");\n@@ -4424,7 +4424,7 @@ void rmdirRecurse(scope const(char)[] pathname) @safe\n }\n \n /// ditto\n-void rmdirRecurse(ref DirEntry de) @safe\n+void rmdirRecurse(ref scope DirEntry de) @safe\n {\n     if (!de.isDir)\n         throw new FileException(de.name, \"Not a directory\");\n@@ -4459,7 +4459,7 @@ void rmdirRecurse(ref DirEntry de) @safe\n //\"rmdirRecurse(in char[] pathname)\" implementation. That is needlessly\n //expensive.\n //A DirEntry is a bit big (72B), so keeping the \"by ref\" signature is desirable.\n-void rmdirRecurse(DirEntry de) @safe\n+void rmdirRecurse(scope DirEntry de) @safe\n {\n     rmdirRecurse(de);\n }\n@@ -4511,22 +4511,20 @@ version (Posix) @system unittest\n     enforce(!exists(deleteme));\n }\n \n-@system unittest\n+@safe unittest\n {\n-    void[] buf;\n-\n-    buf = new void[10];\n-    (cast(byte[]) buf)[] = 3;\n+    ubyte[] buf = new ubyte[10];\n+    buf[] = 3;\n     string unit_file = deleteme ~ \"-unittest_write.tmp\";\n     if (exists(unit_file)) remove(unit_file);\n-    write(unit_file, buf);\n+    write(unit_file, cast(void[]) buf);\n     void[] buf2 = read(unit_file);\n-    assert(buf == buf2);\n+    assert(cast(void[]) buf == buf2);\n \n     string unit2_file = deleteme ~ \"-unittest_write2.tmp\";\n     copy(unit_file, unit2_file);\n     buf2 = read(unit2_file);\n-    assert(buf == buf2);\n+    assert(cast(void[]) buf == buf2);\n \n     remove(unit_file);\n     assert(!exists(unit_file));\n@@ -5042,7 +5040,7 @@ auto dirEntries(string path, string pattern, SpanMode mode,\n     return filter!f(DirIterator(path, mode, followSymlink));\n }\n \n-@system unittest\n+@safe unittest\n {\n     import std.stdio : writefln;\n     immutable dpath = deleteme ~ \"_dir\";\n@@ -5059,11 +5057,11 @@ auto dirEntries(string path, string pattern, SpanMode mode,\n \n     mkdir(dpath);\n     write(fpath, \"hello world\");\n-    version (Posix)\n+    version (Posix) () @trusted\n     {\n         core.sys.posix.unistd.symlink((dpath ~ '\\0').ptr, (sdpath ~ '\\0').ptr);\n         core.sys.posix.unistd.symlink((fpath ~ '\\0').ptr, (sfpath ~ '\\0').ptr);\n-    }\n+    } ();\n \n     static struct Flags { bool dir, file, link; }\n     auto tests = [dpath : Flags(true), fpath : Flags(false, true)];"}, {"sha": "4791766ab3ad17898b1eab1c431f95f3a97bced4", "filename": "libphobos/src/std/math/algebraic.d", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Fsrc%2Fstd%2Fmath%2Falgebraic.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Fsrc%2Fstd%2Fmath%2Falgebraic.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fmath%2Falgebraic.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -496,9 +496,9 @@ if (isFloatingPoint!T)\n             [ 1.0L, 4.0L, 8.0L, 9.0L ],\n             [ 4.0L, 4.0L, 7.0L, 9.0L ],\n             [ 12.0L, 16.0L, 21.0L, 29.0L ],\n-            [ 1e+8L, 1.0L, 1e-8L, 1e+8L ],\n-            [ 1.0L, 1e+8L, 1e-8L, 1e+8L ],\n-            [ 1e-8L, 1.0L, 1e+8L, 1e+8L ],\n+            [ 1e+8L, 1.0L, 1e-8L, 1e+8L+5e-9L ],\n+            [ 1.0L, 1e+8L, 1e-8L, 1e+8L+5e-9L ],\n+            [ 1e-8L, 1.0L, 1e+8L, 1e+8L+5e-9L ],\n             [ 1e-2L, 1e-4L, 1e-4L, 0.010000999950004999375L ],\n             [ 2147483647.0L, 2147483647.0L, 2147483647.0L, 3719550785.027307813987L ]\n         ];"}, {"sha": "40e42da74f9ac047997041a19340387026eea9b7", "filename": "libphobos/src/std/math/hardware.d", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Fsrc%2Fstd%2Fmath%2Fhardware.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Fsrc%2Fstd%2Fmath%2Fhardware.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fmath%2Fhardware.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -674,9 +674,9 @@ nothrow @nogc:\n         enum : ExceptionMask\n         {\n             inexactException      = 0x01,\n-            divByZeroException    = 0x02,\n-            underflowException    = 0x04,\n-            overflowException     = 0x08,\n+            divByZeroException    = 0x08,\n+            underflowException    = 0x02,\n+            overflowException     = 0x04,\n             invalidException      = 0x10,\n             severeExceptions   = overflowException | divByZeroException\n                                  | invalidException,"}, {"sha": "a3d04c60402392955a5afad494c45820bb93eb35", "filename": "libphobos/src/std/math/trigonometry.d", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Fsrc%2Fstd%2Fmath%2Ftrigonometry.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Fsrc%2Fstd%2Fmath%2Ftrigonometry.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fmath%2Ftrigonometry.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -467,20 +467,20 @@ private T tanImpl(T)(T x) @safe pure nothrow @nogc\n         static immutable T[2][] vals =\n         [\n             // angle, tan\n-            [   .5,  .54630248984],\n-            [   1,   1.5574077247],\n-            [   1.5, 14.101419947],\n-            [   2,  -2.1850398633],\n-            [   2.5,-.74702229724],\n-            [   3,  -.14254654307],\n-            [   3.5, .37458564016],\n-            [   4,   1.1578212823],\n-            [   4.5, 4.6373320546],\n-            [   5,  -3.3805150062],\n-            [   5.5,-.99558405221],\n-            [   6,  -.29100619138],\n-            [   6.5, .22027720035],\n-            [   10,  .64836082746],\n+            [   .5,  .546302489843790513255L],\n+            [   1,   1.55740772465490223050L],\n+            [   1.5, 14.1014199471717193876L],\n+            [   2,  -2.18503986326151899164L],\n+            [   2.5,-.747022297238660279355L],\n+            [   3,  -.142546543074277805295L],\n+            [   3.5, .374585640158594666330L],\n+            [   4,   1.15782128234957758313L],\n+            [   4.5, 4.63733205455118446831L],\n+            [   5,  -3.38051500624658563698L],\n+            [   5.5,-.995584052213885017701L],\n+            [   6,  -.291006191384749157053L],\n+            [   6.5, .220277200345896811825L],\n+            [   10,  .648360827459086671259L],\n \n             // special angles\n             [   PI_4,   1],\n@@ -857,11 +857,11 @@ private T atanImpl(T)(T x) @safe pure nothrow @nogc\n         static immutable T[2][] vals =\n         [\n             // x, atan(x)\n-            [ 0.25, 0.24497866313 ],\n-            [ 0.5,  0.46364760900 ],\n-            [ 1,    PI_4          ],\n-            [ 1.5,  0.98279372325 ],\n-            [ 10,   1.47112767430 ],\n+            [ 0.25, 0.244978663126864154172L ],\n+            [ 0.5,  0.463647609000806116214L ],\n+            [ 1,    PI_4                     ],\n+            [ 1.5,  0.982793723247329067985L ],\n+            [ 10,   1.471127674303734591852L ],\n         ];\n \n         foreach (ref val; vals)\n@@ -1075,10 +1075,10 @@ private T atan2Impl(T)(T y, T x) @safe pure nothrow @nogc\n             [  3.0, -3.0,  3 * PI_4 ],\n             [ -4.0, -4.0, -3 * PI_4 ],\n \n-            [  0.75,  0.25,   1.249045772398 ],\n-            [ -0.5,   0.375, -0.927295218002 ],\n-            [  0.5,  -0.125,  1.815774989922 ],\n-            [ -0.75, -0.5,   -2.158798930342 ],\n+            [  0.75,  0.25,   1.2490457723982544258299L ],\n+            [ -0.5,   0.375, -0.9272952180016122324285L ],\n+            [  0.5,  -0.125,  1.8157749899217607734034L ],\n+            [ -0.75, -0.5,   -2.1587989303424641704769L ],\n         ];\n \n         foreach (ref val; vals)"}, {"sha": "96d20c233d83a1b8901fb92a54810ad1dc556bbe", "filename": "libphobos/src/std/numeric.d", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Fsrc%2Fstd%2Fnumeric.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Fsrc%2Fstd%2Fnumeric.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fnumeric.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -79,10 +79,12 @@ public enum CustomFloatFlags\n     none = 0\n }\n \n+private enum isIEEEQuadruple = floatTraits!real.realFormat == RealFormat.ieeeQuadruple;\n+\n private template CustomFloatParams(uint bits)\n {\n     enum CustomFloatFlags flags = CustomFloatFlags.ieee\n-                ^ ((bits == 80) ? CustomFloatFlags.storeNormalized : CustomFloatFlags.none);\n+                ^ ((bits == 80 && !isIEEEQuadruple) ? CustomFloatFlags.storeNormalized : CustomFloatFlags.none);\n     static if (bits ==  8) alias CustomFloatParams = CustomFloatParams!( 4,  3, flags);\n     static if (bits == 16) alias CustomFloatParams = CustomFloatParams!(10,  5, flags);\n     static if (bits == 32) alias CustomFloatParams = CustomFloatParams!(23,  8, flags);\n@@ -367,11 +369,36 @@ private:\n public:\n     static if (precision == 64) // CustomFloat!80 support hack\n     {\n-        ulong significand;\n-        enum ulong significand_max = ulong.max;\n-        mixin(bitfields!(\n-            T_exp , \"exponent\", exponentWidth,\n-            bool  , \"sign\"    , flags & flags.signed ));\n+        static if (isIEEEQuadruple)\n+        {\n+        // Only use highest 64 significand bits from 112 explicitly stored\n+        align (1):\n+            enum ulong significand_max = ulong.max;\n+            version (LittleEndian)\n+            {\n+                private ubyte[6] _padding; // 48-bit of padding\n+                ulong significand;\n+                mixin(bitfields!(\n+                    T_exp , \"exponent\", exponentWidth,\n+                    bool  , \"sign\"    , flags & flags.signed ));\n+            }\n+            else\n+            {\n+                mixin(bitfields!(\n+                    T_exp , \"exponent\", exponentWidth,\n+                    bool  , \"sign\"    , flags & flags.signed ));\n+                ulong significand;\n+                private ubyte[6] _padding; // 48-bit of padding\n+            }\n+        }\n+        else\n+        {\n+            ulong significand;\n+            enum ulong significand_max = ulong.max;\n+            mixin(bitfields!(\n+                T_exp , \"exponent\", exponentWidth,\n+                bool  , \"sign\"    , flags & flags.signed ));\n+        }\n     }\n     else\n     {\n@@ -631,23 +658,28 @@ public:\n         auto x = F(0.125);\n         assert(x.get!float == 0.125F);\n         assert(x.get!double == 0.125);\n+        assert(x.get!real == 0.125L);\n \n         x -= 0.0625;\n         assert(x.get!float == 0.0625F);\n         assert(x.get!double == 0.0625);\n+        assert(x.get!real == 0.0625L);\n \n         x *= 2;\n         assert(x.get!float == 0.125F);\n         assert(x.get!double == 0.125);\n+        assert(x.get!real == 0.125L);\n \n         x /= 4;\n         assert(x.get!float == 0.03125);\n         assert(x.get!double == 0.03125);\n+        assert(x.get!real == 0.03125L);\n \n         x = 0.5;\n         x ^^= 4;\n         assert(x.get!float == 1 / 16.0F);\n         assert(x.get!double == 1 / 16.0);\n+        assert(x.get!real == 1 / 16.0L);\n     }\n }\n "}, {"sha": "8614dc969019aa7ae191b122bd126975f2280150", "filename": "libphobos/src/std/stdio.d", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Fsrc%2Fstd%2Fstdio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Fsrc%2Fstd%2Fstdio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fstdio.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -498,17 +498,21 @@ struct File\n     private Impl* _p;\n     private string _name;\n \n-    package this(FILE* handle, string name, uint refs = 1, bool isPopened = false) @trusted\n+    package this(FILE* handle, string name, uint refs = 1, bool isPopened = false) @trusted @nogc nothrow\n     {\n         import core.stdc.stdlib : malloc;\n-        import std.exception : enforce;\n \n         assert(!_p);\n-        _p = cast(Impl*) enforce(malloc(Impl.sizeof), \"Out of memory\");\n+        _p = cast(Impl*) malloc(Impl.sizeof);\n+        if (!_p)\n+        {\n+            import core.exception : onOutOfMemoryError;\n+            onOutOfMemoryError();\n+        }\n         initImpl(handle, name, refs, isPopened);\n     }\n \n-    private void initImpl(FILE* handle, string name, uint refs = 1, bool isPopened = false)\n+    private void initImpl(FILE* handle, string name, uint refs = 1, bool isPopened = false) @nogc nothrow pure @safe\n     {\n         assert(_p);\n         _p.handle = handle;"}, {"sha": "1d375ef4d7e8d83c2f88e2664acea9fabed9ffd6", "filename": "libphobos/src/std/sumtype.d", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Fsrc%2Fstd%2Fsumtype.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Fsrc%2Fstd%2Fsumtype.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fsumtype.d?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -635,9 +635,19 @@ public:\n \n                 this.match!destroyIfOwner;\n \n-                mixin(\"Storage newStorage = { \",\n-                    Storage.memberName!T, \": forward!rhs\",\n-                \" };\");\n+                static if (isCopyable!T)\n+                {\n+                    // Workaround for https://issues.dlang.org/show_bug.cgi?id=21542\n+                    mixin(\"Storage newStorage = { \",\n+                        Storage.memberName!T, \": __ctfe ? rhs : forward!rhs\",\n+                    \" };\");\n+                }\n+                else\n+                {\n+                    mixin(\"Storage newStorage = { \",\n+                        Storage.memberName!T, \": forward!rhs\",\n+                    \" };\");\n+                }\n \n                 storage = newStorage;\n                 tag = tid;\n@@ -678,7 +688,17 @@ public:\n         {\n             import core.lifetime : move;\n \n-            rhs.match!((ref value) { this = move(value); });\n+            rhs.match!((ref value) {\n+                static if (isCopyable!(typeof(value)))\n+                {\n+                    // Workaround for https://issues.dlang.org/show_bug.cgi?id=21542\n+                    this = __ctfe ? value : move(value);\n+                }\n+                else\n+                {\n+                    this = move(value);\n+                }\n+            });\n             return this;\n         }\n     }\n@@ -1569,6 +1589,28 @@ version (D_BetterC) {} else\n     }\n }\n \n+// Assignment of struct with overloaded opAssign in CTFE\n+// https://issues.dlang.org/show_bug.cgi?id=23182\n+@safe unittest\n+{\n+    static struct HasOpAssign\n+    {\n+        void opAssign(HasOpAssign rhs) {}\n+    }\n+\n+    static SumType!HasOpAssign test()\n+    {\n+        SumType!HasOpAssign s;\n+        // Test both overloads\n+        s = HasOpAssign();\n+        s = SumType!HasOpAssign();\n+        return s;\n+    }\n+\n+    // Force CTFE\n+    enum result = test();\n+}\n+\n /// True if `T` is an instance of the `SumType` template, otherwise false.\n private enum bool isSumTypeInstance(T) = is(T == SumType!Args, Args...);\n "}, {"sha": "fa3dfd4819a998792b559bf5d7c32094896b886b", "filename": "libphobos/testsuite/libphobos.cycles/cycles.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Ftestsuite%2Flibphobos.cycles%2Fcycles.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7/libphobos%2Ftestsuite%2Flibphobos.cycles%2Fcycles.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Ftestsuite%2Flibphobos.cycles%2Fcycles.exp?ref=445d8deffb6c9bc1f4a5ed0a8e02d7f31d3caec7", "patch": "@@ -23,7 +23,7 @@ set cycle_test_list [list \\\n     { ignore \"\"\t 0 } \\\n     { abort \"object.Error@.*: Cyclic dependency between module mod. and mod.\" 1 } \\\n     { print \"Cyclic dependency between module mod. and mod.\" 0 } \\\n-    { deprecate \"Deprecation 16211 warning:\" 0 } \\\n+    { deprecate \"deprecate is no longer supported, using abort instead\" 1 } \\\n ]\n \n # Initialize dg."}]}