{"sha": "4dd7201eac0b2f44f0f5b91dc2150a68aff5e389", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRkNzIwMWVhYzBiMmY0NGYwZjViOTFkYzIxNTBhNjhhZmY1ZTM4OQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-01-25T17:13:14Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-01-25T17:13:14Z"}, "message": "c-common.c, [...]: Remove all references to obstack functions obsoleted by GC...\n\n\t* c-common.c, c-decl.c, c-lang.c, c-lex.c, c-parse.in, c-pragma.c,\n\tc-typeck.c, objc/objc-act.c: Remove all references to obstack\n\tfunctions obsoleted by GC, such as push_obstacks_nochange,\n\tend_temporary_allocation, savealloc, saveable_tree_cons, etc.\n\tand code which existed only to decide whether or not to call\n\tthem.  Remove now-unused NESTED argument from start_function;\n\tall callers changed.  Do not change behavior based on ggc_p.\n\tThe use of the ixp_obstack in c-iterate.c and the util_obstack\n\tin objc/objc-act.c remain; these are not obsoleted by garbage\n\tcollection.\n\t* c-tree.h: Update prototype for start_function.\n\n\t* c-parse.y, c-parse.c, objc/objc-parse.c, objc/objc-parse.y: Rebuild.\n\nFrom-SVN: r31611", "tree": {"sha": "e3f4e1a3212b662d8c287e2abd1a0473dd49789b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3f4e1a3212b662d8c287e2abd1a0473dd49789b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/comments", "author": null, "committer": null, "parents": [{"sha": "b5031ab715c5dcae4a61492da51b796934647f16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5031ab715c5dcae4a61492da51b796934647f16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5031ab715c5dcae4a61492da51b796934647f16"}], "stats": {"total": 3054, "additions": 1171, "deletions": 1883}, "files": [{"sha": "8a0c4392d0d002dc1353c943e713ad71da036134", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4dd7201eac0b2f44f0f5b91dc2150a68aff5e389", "patch": "@@ -1,3 +1,19 @@\n+2000-01-25  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* c-common.c, c-decl.c, c-lang.c, c-lex.c, c-parse.in, c-pragma.c,\n+\tc-typeck.c, objc/objc-act.c: Remove all references to obstack\n+\tfunctions obsoleted by GC, such as push_obstacks_nochange,\n+\tend_temporary_allocation, savealloc, saveable_tree_cons, etc.\n+\tand code which existed only to decide whether or not to call\n+\tthem.  Remove now-unused NESTED argument from start_function;\n+\tall callers changed.  Do not change behavior based on ggc_p.\n+\tThe use of the ixp_obstack in c-iterate.c and the util_obstack\n+\tin objc/objc-act.c remain; these are not obsoleted by garbage\n+\tcollection.\n+\t* c-tree.h: Update prototype for start_function.\n+\n+\t* c-parse.y, c-parse.c, objc/objc-parse.c, objc/objc-parse.y: Rebuild.\n+\n 2000-01-25  Clinton Popetz  <cpopetz@cygnus.com>\n \n \t* config/mips/mips.md (zero_extendsidi2_internal): Disable for\n@@ -1030,7 +1046,7 @@ Thu Jan 13 23:44:03 2000  Richard Henderson  <rth@cygnus.com>\n \tUse emit_jump_insn for the return insn.\n \n Thu Jan 13 14:46:03 2000  Jason Eckhardt  <jle@cygnus.com>\n-\t                  Stan Cox  <scox@cygnus.com>\n+\t\t\t  Stan Cox  <scox@cygnus.com>\n \n \t* predict.c: New file. Preliminary infrastructure work for static\n \tbranch prediction and basic block reordering.\n@@ -3991,7 +4007,7 @@ Mon Nov 29 18:09:39 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n 1999-11-28  Robert Lipe  <robertl@cygnus.com>\n \n \t* i386/sco5.h (FINI_SECTION_ASM_OP_COFF): Move destructor fn\n-\ttable from .fini into .dtor.                                \n+\ttable from .fini into .dtor.\t\t\t\t\n \n 1999-11-28  Anthony Green  <green@cygnus.com>\n \n@@ -4849,7 +4865,7 @@ Wed Nov 10 10:52:42 1999  Tom Tromey  <tromey@cygnus.com>\n \t* gcc.c (do_spec_1): Support text between `%u' and `%O'.\n \n Wed Nov 10 12:43:21 1999  Philippe De Muyter  <phdm@macqel.be>\n-\t                  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\t\t\t  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* cppinit.c: Test `GCC_VERSION', not `HAVE_GCC_VERSION'.\n \n@@ -7934,7 +7950,7 @@ Thu Oct  7 23:06:50 1999  Richard Henderson  <rth@cygnus.com>\n \tbefore the fctiwz insn.\n \n Thu Oct  7 22:53:00 1999  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n-\t                  Mark Mitchell  <mark@codesourcery.com>\n+\t\t\t  Mark Mitchell  <mark@codesourcery.com>\n \n \t* tree.c (make_lang_type_fn): New funtion pointer.\n \t(make_lang_type): Call it.\n@@ -8083,7 +8099,7 @@ Tue Oct  5 11:34:52 1999  Michael Meissner  <meissner@cygnus.com>\n \t* ggc-simple.c (toplevel): Ditto.\n \n Mon Oct  4 16:48:16 1999  Diego Novillo <dnovillo@cygnus.com>\n-\t                  Jonathan Larmour  <jlarmour@cygnus.co.uk>\n+\t\t\t  Jonathan Larmour  <jlarmour@cygnus.co.uk>\n \n \t* config/mips/mips.c (mips_move_2words): Split doubles if\n \tISA >= 3, !TARGET_64BIT, and destination is not an FP register."}, {"sha": "3d0812085f59dcf512324611ce1fae203c413151", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=4dd7201eac0b2f44f0f5b91dc2150a68aff5e389", "patch": "@@ -24,7 +24,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-lex.h\"\n #include \"c-tree.h\"\n #include \"flags.h\"\n-#include \"obstack.h\"\n #include \"toplev.h\"\n #include \"output.h\"\n #include \"c-pragma.h\"\n@@ -291,7 +290,6 @@ declare_hidden_char_array (name, value)\n       || warn_larger_than)\n     type = build_array_type (char_type_node,\n \t\t\t     build_index_type (build_int_2 (vlen, 0)));\n-  push_obstacks_nochange ();\n   decl = build_decl (VAR_DECL, get_identifier (name), type);\n   TREE_STATIC (decl) = 1;\n   TREE_READONLY (decl) = 1;\n@@ -345,7 +343,7 @@ combine_strings (strings)\n       if (wide_flag)\n \tlength = length * wchar_bytes + wide_length;\n \n-      p = ggc_p ? ggc_alloc_string (NULL, length) : savealloc (length);\n+      p = ggc_alloc_string (NULL, length);\n \n       /* Copy the individual strings into the new combined string.\n \t If the combined string is wide, convert the chars to ints\n@@ -3491,7 +3489,7 @@ c_get_alias_set (t)\n \n   if (!TYPE_ALIAS_SET_KNOWN_P (type))\n     {\n-      /* Types that are not allocated on the permanent obstack are not\n+      /* Types that are not global ('permanent') are not\n \t placed in the type hash table.  Thus, there can be multiple\n \t copies of identical types in local scopes.  In the long run,\n \t all types should be permanent.  */"}, {"sha": "cc072a680d9bc309773b2a167ec86532d7cd9d0d", "filename": "gcc/c-decl.c", "status": "modified", "additions": 30, "deletions": 283, "changes": 313, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=4dd7201eac0b2f44f0f5b91dc2150a68aff5e389", "patch": "@@ -1339,10 +1339,7 @@ pushtag (name, type)\n \tTYPE_NAME (type) = name;\n     }\n \n-  if (b == global_binding_level)\n-    b->tags = perm_tree_cons (name, type, b->tags);\n-  else\n-    b->tags = saveable_tree_cons (name, type, b->tags);\n+  b->tags = tree_cons (name, type, b->tags);\n \n   /* Create a fake NULL-named TYPE_DECL node whose TREE_TYPE will be the\n      tagged type we just added to the current binding level.  This fake\n@@ -1469,17 +1466,6 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \t  tree oldreturntype = TREE_TYPE (oldtype);\n \t  tree newreturntype = TREE_TYPE (newtype);\n \n-\t  /* Make sure we put the new type in the same obstack as the old ones.\n-\t     If the old types are not both in the same obstack, use the\n-\t     permanent one.  */\n-\t  if (TYPE_OBSTACK (oldtype) == TYPE_OBSTACK (newtype))\n-\t    push_obstacks (TYPE_OBSTACK (oldtype), TYPE_OBSTACK (oldtype));\n-\t  else\n-\t    {\n-\t      push_obstacks_nochange ();\n-\t      end_temporary_allocation ();\n-\t    }\n-\n           if (TYPE_MODE (oldreturntype) == TYPE_MODE (newreturntype))\n             {\n \t      /* Function types may be shared, so we can't just modify\n@@ -1515,8 +1501,6 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \t    }\n \t  if (! different_binding_level)\n \t    TREE_TYPE (olddecl) = oldtype;\n-\n-\t  pop_obstacks ();\n \t}\n       if (!types_match)\n \t{\n@@ -1779,17 +1763,6 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \t different_binding_level is true.  */\n       tree write_olddecl = different_binding_level ? newdecl : olddecl;\n \n-      /* Make sure we put the new type in the same obstack as the old ones.\n-\t If the old types are not both in the same obstack, use the permanent\n-\t one.  */\n-      if (TYPE_OBSTACK (oldtype) == TYPE_OBSTACK (newtype))\n-\tpush_obstacks (TYPE_OBSTACK (oldtype), TYPE_OBSTACK (oldtype));\n-      else\n-\t{\n-\t  push_obstacks_nochange ();\n-\t  end_temporary_allocation ();\n-\t}\n-\t\t       \n       /* Merge the data types specified in the two decls.  */\n       if (TREE_CODE (newdecl) != FUNCTION_DECL || !DECL_BUILT_IN (olddecl))\n \t{\n@@ -1887,8 +1860,6 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \t  DECL_NO_LIMIT_STACK (newdecl)\n \t    |= DECL_NO_LIMIT_STACK (olddecl);\n \t}\n-\n-      pop_obstacks ();\n     }\n   /* If cannot merge, then use the new type and qualifiers,\n      and don't preserve the old rtl.  */\n@@ -2474,10 +2445,6 @@ implicitly_declare (functionid)\n   /* Only one \"implicit declaration\" warning per identifier.  */\n   int implicit_warning;\n \n-  /* Save the decl permanently so we can warn if definition follows.  */\n-  push_obstacks_nochange ();\n-  end_temporary_allocation ();\n-\n   /* We used to reuse an old implicit decl here,\n      but this loses with inline functions because it can clobber\n      the saved decl chains.  */\n@@ -2528,8 +2495,6 @@ implicitly_declare (functionid)\n \n   gen_aux_info_record (decl, 0, 1, 0);\n \n-  pop_obstacks ();\n-\n   return decl;\n }\n \n@@ -3281,10 +3246,6 @@ groktypename_in_parm_context (typename)\n    do go through here.  Structure field declarations are done by\n    grokfield and not through here.  */\n \n-/* Set this to zero to debug not using the temporary obstack\n-   to parse initializers.  */\n-int debug_temp_inits = 1;\n-\n tree\n start_decl (declarator, declspecs, initialized, attributes, prefix_attributes)\n      tree declarator, declspecs;\n@@ -3294,10 +3255,6 @@ start_decl (declarator, declspecs, initialized, attributes, prefix_attributes)\n   register tree decl = grokdeclarator (declarator, declspecs,\n \t\t\t\t       NORMAL, initialized);\n   register tree tem;\n-  int init_written = initialized;\n-\n-  /* The corresponding pop_obstacks is in finish_decl.  */\n-  push_obstacks_nochange ();\n \n   if (warn_main > 0 && TREE_CODE (decl) != FUNCTION_DECL \n       && !strcmp (IDENTIFIER_POINTER (DECL_NAME (decl)), \"main\"))\n@@ -3420,14 +3377,6 @@ start_decl (declarator, declspecs, initialized, attributes, prefix_attributes)\n \texpand_decl (tem);\n     }\n \n-  if (init_written)\n-    {\n-      /* When parsing and digesting the initializer,\n-\t use temporary storage.  Do this even if we will ignore the value.  */\n-      if (current_binding_level == global_binding_level && debug_temp_inits)\n-\ttemporary_allocation ();\n-    }\n-\n   return tem;\n }\n \n@@ -3443,7 +3392,6 @@ finish_decl (decl, init, asmspec_tree)\n {\n   register tree type = TREE_TYPE (decl);\n   int was_incomplete = (DECL_SIZE (decl) == 0);\n-  int temporary = allocation_temporary_p ();\n   char *asmspec = 0;\n \n   /* If a name was specified, get the string.   */\n@@ -3478,16 +3426,6 @@ finish_decl (decl, init, asmspec_tree)\n \t}\n     }\n \n-  /* Pop back to the obstack that is current for this binding level.\n-     This is because MAXINDEX, rtl, etc. to be made below\n-     must go in the permanent obstack.  But don't discard the\n-     temporary data yet.  */\n-  pop_obstacks ();\n-#if 0 /* pop_obstacks was near the end; this is what was here.  */\n-  if (current_binding_level == global_binding_level && temporary)\n-    end_temporary_allocation ();\n-#endif\n-\n   /* Deduce size of array from initialization, if not already known */\n \n   if (TREE_CODE (type) == ARRAY_TYPE\n@@ -3590,28 +3528,12 @@ finish_decl (decl, init, asmspec_tree)\n \n   if (TREE_CODE (decl) == VAR_DECL || TREE_CODE (decl) == FUNCTION_DECL)\n     {\n-      if ((flag_traditional || TREE_PERMANENT (decl))\n-\t  && allocation_temporary_p ())\n-\t{\n-\t  push_obstacks_nochange ();\n-\t  end_temporary_allocation ();\n-\t  /* This is a no-op in c-lang.c or something real in objc-actions.c.  */\n-\t  maybe_objc_check_decl (decl);\n-\t  rest_of_decl_compilation (decl, asmspec,\n-\t\t\t\t    (DECL_CONTEXT (decl) == 0\n-\t\t\t\t     || TREE_ASM_WRITTEN (decl)),\n-\t\t\t\t    0);\n-\t  pop_obstacks ();\n-\t}\n-      else\n-\t{\n-\t  /* This is a no-op in c-lang.c or something real in objc-actions.c.  */\n-\t  maybe_objc_check_decl (decl);\n-\t  rest_of_decl_compilation (decl, asmspec,\n-\t\t\t\t    (DECL_CONTEXT (decl) == 0\n-\t\t\t\t     || TREE_ASM_WRITTEN (decl)),\n-\t\t\t\t    0);\n-\t}\n+      /* This is a no-op in c-lang.c or something real in objc-actions.c.  */\n+      maybe_objc_check_decl (decl);\n+      rest_of_decl_compilation (decl, asmspec,\n+\t\t\t\t(DECL_CONTEXT (decl) == 0\n+\t\t\t\t || TREE_ASM_WRITTEN (decl)), 0);\n+\n       if (DECL_CONTEXT (decl) != 0)\n \t{\n \t  /* Recompute the RTL of a local array now\n@@ -3636,51 +3558,7 @@ finish_decl (decl, init, asmspec_tree)\n     {\n       /* This is a no-op in c-lang.c or something real in objc-actions.c.  */\n       maybe_objc_check_decl (decl);\n-      rest_of_decl_compilation (decl, NULL_PTR, DECL_CONTEXT (decl) == 0,\n-\t\t\t\t0);\n-    }\n-\n-  /* ??? After 2.3, test (init != 0) instead of TREE_CODE.  */\n-  /* This test used to include TREE_PERMANENT, however, we have the same\n-     problem with initializers at the function level.  Such initializers get\n-     saved until the end of the function on the momentary_obstack.  */\n-  if (!(TREE_CODE (decl) == FUNCTION_DECL && DECL_INLINE (decl))\n-      && temporary\n-      /* DECL_INITIAL is not defined in PARM_DECLs, since it shares\n-\t space with DECL_ARG_TYPE.  */\n-      && TREE_CODE (decl) != PARM_DECL)\n-    {\n-      /* We need to remember that this array HAD an initialization,\n-\t but discard the actual temporary nodes,\n-\t since we can't have a permanent node keep pointing to them.  */\n-      /* We make an exception for inline functions, since it's\n-\t normal for a local extern redeclaration of an inline function\n-\t to have a copy of the top-level decl's DECL_INLINE.  */\n-      if (DECL_INITIAL (decl) != 0 && DECL_INITIAL (decl) != error_mark_node)\n-\t{\n-\t  /* If this is a const variable, then preserve the\n-\t     initializer instead of discarding it so that we can optimize\n-\t     references to it.  */\n-\t  /* This test used to include TREE_STATIC, but this won't be set\n-\t     for function level initializers.  */\n-\t  if (TREE_READONLY (decl) || ITERATOR_P (decl))\n-\t    {\n-\t      preserve_initializer ();\n-\t      /* Hack?  Set the permanent bit for something that is permanent,\n-\t\t but not on the permanent obstack, so as to convince\n-\t\t output_constant_def to make its rtl on the permanent\n-\t\t obstack.  */\n-\t      TREE_PERMANENT (DECL_INITIAL (decl)) = 1;\n-\n-\t      /* The initializer and DECL must have the same (or equivalent\n-\t\t types), but if the initializer is a STRING_CST, its type\n-\t\t might not be on the right obstack, so copy the type\n-\t\t of DECL.  */\n-\t      TREE_TYPE (DECL_INITIAL (decl)) = type;\n-\t    }\n-\t  else\n-\t    DECL_INITIAL (decl) = error_mark_node;\n-\t}\n+      rest_of_decl_compilation (decl, NULL_PTR, DECL_CONTEXT (decl) == 0, 0);\n     }\n \n   /* If requested, warn about definitions of large data objects.  */\n@@ -3700,18 +3578,6 @@ finish_decl (decl, init, asmspec_tree)\n \t}\n     }\n \n-#if 0\n-  /* Resume permanent allocation, if not within a function.  */\n-  /* The corresponding push_obstacks_nochange is in start_decl,\n-     and in push_parm_decl and in grokfield.  */\n-  pop_obstacks ();\n-#endif\n-\n-  /* If we have gone back from temporary to permanent allocation,\n-     actually free the temporary space that we no longer need.  */\n-  if (temporary && !allocation_temporary_p ())\n-    permanent_allocation (0);\n-\n   /* At the end of a declaration, throw away any variable type sizes\n      of types defined inside that declaration.  There is no use\n      computing them in the following function definition.  */\n@@ -3744,9 +3610,6 @@ push_parm_decl (parm)\n   /* Don't try computing parm sizes now -- wait till fn is called.  */\n   immediate_size_expand = 0;\n \n-  /* The corresponding pop_obstacks is in finish_decl.  */\n-  push_obstacks_nochange ();\n-\n   decl = grokdeclarator (TREE_VALUE (TREE_PURPOSE (parm)),\n \t\t\t TREE_PURPOSE (TREE_PURPOSE (parm)), PARM, 0);\n   decl_attributes (decl, TREE_VALUE (TREE_VALUE (parm)),\n@@ -3915,11 +3778,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n   if (decl_context == FUNCDEF)\n     funcdef_flag = 1, decl_context = NORMAL;\n \n-  push_obstacks_nochange ();\n-\n-  if (flag_traditional && allocation_temporary_p ())\n-    end_temporary_allocation ();\n-\n   /* Look inside a declarator for the name being declared\n      and get it as a string, for an error message.  */\n   {\n@@ -4055,7 +3913,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t\t\t  | (1 << (int) RID_UNSIGNED))))\n \t  /* Don't warn about typedef foo = bar.  */\n \t  && ! (specbits & (1 << (int) RID_TYPEDEF) && initialized)\n-\t  && ! (in_system_header && ! allocation_temporary_p ()))\n+\t  && ! in_system_header)\n \t{\n \t  /* Issue a warning if this is an ISO C 9x program or if -Wreturn-type\n \t     and this is a function, or if -Wimplicit; prefer the former\n@@ -4339,8 +4197,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t{\n \t  register tree itype = NULL_TREE;\n \t  register tree size = TREE_OPERAND (declarator, 1);\n-\t  /* An uninitialized decl with `extern' is a reference.  */\n-\t  int extern_ref = !initialized && (specbits & (1 << (int) RID_EXTERN));\n \t  /* The index is a signed object `sizetype' bits wide.  */\n \t  tree index_type = signed_type (sizetype);\n \n@@ -4366,12 +4222,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t  if (type == error_mark_node)\n \t    continue;\n \n-\t  /* If this is a block level extern, it must live past the end\n-\t     of the function so that we can check it against other extern\n-\t     declarations (IDENTIFIER_LIMBO_VALUE).  */\n-\t  if (extern_ref && allocation_temporary_p ())\n-\t    end_temporary_allocation ();\n-\n \t  /* If size was specified, set ITYPE to a range-type for that size.\n \t     Otherwise, ITYPE remains null.  finish_decl may figure it out\n \t     from an initial value.  */\n@@ -4476,8 +4326,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t}\n       else if (TREE_CODE (declarator) == CALL_EXPR)\n \t{\n-\t  int extern_ref = (!(specbits & (1 << (int) RID_AUTO))\n-\t\t\t    || current_binding_level == global_binding_level);\n \t  tree arg_types;\n \n \t  /* Declaring a function type.\n@@ -4507,12 +4355,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t    type = double_type_node;\n #endif /* TRADITIONAL_RETURN_FLOAT */\n \n-\t  /* If this is a block level extern, it must live past the end\n-\t     of the function so that we can check it against other extern\n-\t     declarations (IDENTIFIER_LIMBO_VALUE).  */\n-\t  if (extern_ref && allocation_temporary_p ())\n-\t    end_temporary_allocation ();\n-\n \t  /* Construct the function type and go to the next\n \t     inner layer of declarator.  */\n \n@@ -4522,17 +4364,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t\t\t\t    only for the CALL_EXPR\n \t\t\t\t    closest to the identifier.  */\n \t\t\t\t && TREE_CODE (TREE_OPERAND (declarator, 0)) == IDENTIFIER_NODE);\n-#if 0 /* This seems to be false.  We turn off temporary allocation\n-\t above in this function if -traditional.\n-\t And this code caused inconsistent results with prototypes:\n-\t callers would ignore them, and pass arguments wrong.  */\n-\n-\t  /* Omit the arg types if -traditional, since the arg types\n-\t     and the list links might not be permanent.  */\n-\t  type = build_function_type (type,\n-\t\t\t\t      flag_traditional \n-\t\t\t\t      ? NULL_TREE : arg_types);\n-#endif\n \t  /* Type qualifiers before the return type of the function\n \t     qualify the return type, not the function type.  */\n \t  if (type_quals)\n@@ -4642,7 +4473,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n       if ((specbits & (1 << (int) RID_SIGNED))\n \t  || (typedef_decl && C_TYPEDEF_EXPLICITLY_SIGNED (typedef_decl)))\n \tC_TYPEDEF_EXPLICITLY_SIGNED (decl) = 1;\n-      pop_obstacks ();\n       return decl;\n     }\n \n@@ -4673,7 +4503,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \tpedwarn (\"ANSI C forbids const or volatile function types\");\n       if (type_quals)\n \ttype = c_build_qualified_type (type, type_quals);\n-      pop_obstacks ();\n       return type;\n     }\n \n@@ -4800,12 +4629,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t    && pedantic)\n \t  pedwarn (\"invalid storage class for function `%s'\", name);\n \n-\t/* If this is a block level extern, it must live past the end\n-\t   of the function so that we can check it against other\n-\t   extern declarations (IDENTIFIER_LIMBO_VALUE).  */\n-\tif (extern_ref && allocation_temporary_p ())\n-\t  end_temporary_allocation ();\n-\n \tdecl = build_decl (FUNCTION_DECL, declarator, type);\n \tdecl = build_decl_attribute_variant (decl, decl_machine_attr);\n \n@@ -4860,12 +4683,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n #endif\n \t  }\n \n-\t/* If this is a block level extern, it must live past the end\n-\t   of the function so that we can check it against other\n-\t   extern declarations (IDENTIFIER_LIMBO_VALUE).  */\n-\tif (extern_ref && allocation_temporary_p ())\n-\t  end_temporary_allocation ();\n-\n \tdecl = build_decl (VAR_DECL, declarator, type);\n \tif (size_varies)\n \t  C_DECL_VARIABLE_SIZE (decl) = 1;\n@@ -4911,8 +4728,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n     if (C_TYPE_FIELDS_VOLATILE (TREE_TYPE (decl)))\n       mark_addressable (decl);\n \n-    pop_obstacks ();\n-\n     return decl;\n   }\n }\n@@ -5015,19 +4830,6 @@ grokparms (parms_info, funcdef_flag)\n \t      typelt = TREE_CHAIN (typelt);\n \t    }\n \n-      /* Allocate the list of types the way we allocate a type.  */\n-      if (first_parm && ! TREE_PERMANENT (first_parm))\n-\t{\n-\t  /* Construct a copy of the list of types\n-\t     on the saveable obstack.  */\n-\t  tree result = NULL;\n-\t  for (typelt = first_parm; typelt; typelt = TREE_CHAIN (typelt))\n-\t    result = saveable_tree_cons (NULL_TREE, TREE_VALUE (typelt),\n-\t\t\t\t\t result);\n-\t  return nreverse (result);\n-\t}\n-      else\n-\t/* The list we have is permanent already.  */\n \treturn first_parm;\n     }\n }\n@@ -5062,8 +4864,8 @@ get_parm_info (void_at_end)\n     {\n       parms = NULL_TREE;\n       storedecls (NULL_TREE);\n-      return saveable_tree_cons (NULL_TREE, NULL_TREE,\n-\t\t\t\t saveable_tree_cons (NULL_TREE, void_type_node, NULL_TREE));\n+      return tree_cons (NULL_TREE, NULL_TREE,\n+\t\t\ttree_cons (NULL_TREE, void_type_node, NULL_TREE));\n     }\n \n   /* Extract enumerator values and other non-parms declared with the parms.\n@@ -5117,7 +4919,7 @@ get_parm_info (void_at_end)\n \t    && TYPE_PRECISION (type) < TYPE_PRECISION (integer_type_node))\n \t  DECL_ARG_TYPE (decl) = integer_type_node;\n \n-\ttypes = saveable_tree_cons (NULL_TREE, TREE_TYPE (decl), types);\n+\ttypes = tree_cons (NULL_TREE, TREE_TYPE (decl), types);\n \tif (TYPE_MAIN_VARIANT (TREE_VALUE (types)) == void_type_node && ! erred\n \t    && DECL_NAME (decl) == 0)\n \t  {\n@@ -5127,10 +4929,10 @@ get_parm_info (void_at_end)\n       }\n \n   if (void_at_end)\n-    return saveable_tree_cons (new_parms, tags,\n-\t\t\t       nreverse (saveable_tree_cons (NULL_TREE, void_type_node, types)));\n+    return tree_cons (new_parms, tags,\n+\t\t      nreverse (tree_cons (NULL_TREE, void_type_node, types)));\n \n-  return saveable_tree_cons (new_parms, tags, nreverse (types));\n+  return tree_cons (new_parms, tags, nreverse (types));\n }\n \n /* At end of parameter list, warn about any struct, union or enum tags\n@@ -5177,8 +4979,6 @@ xref_tag (code, name)\n      enum tree_code code;\n      tree name;\n {\n-  int temporary = allocation_temporary_p ();\n-\n   /* If a cross reference is requested, look up the type\n      already defined for this tag and return it.  */\n \n@@ -5190,11 +4990,6 @@ xref_tag (code, name)\n   if (ref)\n     return ref;\n \n-  push_obstacks_nochange ();\n-\n-  if (current_binding_level == global_binding_level && temporary)\n-    end_temporary_allocation ();\n-\n   /* If no such tag is yet defined, create a forward-reference node\n      and record it as the \"definition\".\n      When a real declaration of this type is found,\n@@ -5218,17 +5013,12 @@ xref_tag (code, name)\n \n   pushtag (name, ref);\n \n-  pop_obstacks ();\n-\n   return ref;\n }\n \f\n /* Make sure that the tag NAME is defined *in the current binding level*\n    at least as a forward reference.\n-   CODE says which kind of tag NAME ought to be.\n-\n-   We also do a push_obstacks_nochange\n-   whose matching pop is in finish_struct.  */\n+   CODE says which kind of tag NAME ought to be.  */\n \n tree\n start_struct (code, name)\n@@ -5240,10 +5030,6 @@ start_struct (code, name)\n \n   register tree ref = 0;\n \n-  push_obstacks_nochange ();\n-  if (current_binding_level == global_binding_level)\n-    end_temporary_allocation ();\n-\n   if (name != 0)\n     ref = lookup_tag (code, name, current_binding_level, 1);\n   if (ref && TREE_CODE (ref) == code)\n@@ -5283,9 +5069,6 @@ grokfield (filename, line, declarator, declspecs, width)\n {\n   tree value;\n \n-  /* The corresponding pop_obstacks is in finish_decl.  */\n-  push_obstacks_nochange ();\n-\n   value = grokdeclarator (declarator, declspecs, width ? BITFIELD : FIELD, 0);\n \n   finish_decl (value, NULL_TREE, NULL_TREE);\n@@ -5297,9 +5080,7 @@ grokfield (filename, line, declarator, declspecs, width)\n \f\n /* Fill in the fields of a RECORD_TYPE or UNION_TYPE node, T.\n    FIELDLIST is a chain of FIELD_DECL nodes for the fields.\n-   ATTRIBUTES are attributes to be applied to the structure.\n-\n-   We also do a pop_obstacks to match the push in start_struct.  */\n+   ATTRIBUTES are attributes to be applied to the structure.  */\n \n tree\n finish_struct (t, fieldlist, attributes)\n@@ -5308,7 +5089,6 @@ finish_struct (t, fieldlist, attributes)\n      tree attributes;\n {\n   register tree x;\n-  int old_momentary;\n   int toplevel = global_binding_level == current_binding_level;\n \n   /* If this type was previously laid out as a forward reference,\n@@ -5331,8 +5111,6 @@ finish_struct (t, fieldlist, attributes)\n \t\t   TREE_CODE (t) == UNION_TYPE ? \"union\" : \"structure\");\n       }\n \n-  old_momentary = suspend_momentary ();\n-\n   if (pedantic)\n     {\n       for (x = fieldlist; x; x = TREE_CHAIN (x))\n@@ -5576,14 +5354,9 @@ finish_struct (t, fieldlist, attributes)\n \t}\n     }\n \n-  resume_momentary (old_momentary);\n-\n   /* Finish debugging output for this type.  */\n   rest_of_type_compilation (t, toplevel);\n \n-  /* The matching push is in start_struct.  */\n-  pop_obstacks ();\n-\n   return t;\n }\n \n@@ -5617,12 +5390,6 @@ start_enum (name)\n   if (name != 0)\n     enumtype = lookup_tag (ENUMERAL_TYPE, name, current_binding_level, 1);\n \n-  /* The corresponding pop_obstacks is in finish_enum.  */\n-  push_obstacks_nochange ();\n-  /* If these symbols and types are global, make them permanent.  */\n-  if (current_binding_level == global_binding_level)\n-    end_temporary_allocation ();\n-\n   if (enumtype == 0 || TREE_CODE (enumtype) != ENUMERAL_TYPE)\n     {\n       enumtype = make_node (ENUMERAL_TYPE);\n@@ -5756,9 +5523,6 @@ finish_enum (enumtype, values, attributes)\n   /* Finish debugging output for this type.  */\n   rest_of_type_compilation (enumtype, toplevel);\n \n-  /* This matches a push in start_enum.  */\n-  pop_obstacks ();\n-\n   return enumtype;\n }\n \n@@ -5828,7 +5592,7 @@ build_enumerator (name, value)\n   TREE_TYPE (value) = type;\n   pushdecl (decl);\n \n-  return saveable_tree_cons (decl, value, NULL_TREE);\n+  return tree_cons (decl, value, NULL_TREE);\n }\n \f\n /* Create the FUNCTION_DECL for a function definition.\n@@ -5841,14 +5605,11 @@ build_enumerator (name, value)\n \n    Returns 1 on success.  If the DECLARATOR is not suitable for a function\n    (it defines a datum instead), we return 0, which tells\n-   yyparse to report a parse error.\n-\n-   NESTED is nonzero for a function nested within another function.  */\n+   yyparse to report a parse error.  */\n \n int\n-start_function (declspecs, declarator, prefix_attributes, attributes, nested)\n+start_function (declspecs, declarator, prefix_attributes, attributes)\n      tree declarator, declspecs, prefix_attributes, attributes;\n-     int nested;\n {\n   tree decl1, old_decl;\n   tree restype;\n@@ -6060,11 +5821,6 @@ start_function (declspecs, declarator, prefix_attributes, attributes, nested)\n   DECL_RESULT (current_function_decl)\n     = build_decl (RESULT_DECL, NULL_TREE, restype);\n \n-  if (!nested)\n-    /* Allocate further tree nodes temporarily during compilation\n-       of this function only.  */\n-    temporary_allocation ();\n-\n   /* If this fcn was already referenced via a block-scope `extern' decl\n      (or an implicit decl), propagate certain information about the usage.  */\n   if (TREE_ADDRESSABLE (DECL_ASSEMBLER_NAME (current_function_decl)))\n@@ -6428,15 +6184,14 @@ store_parm_decls ()\n \n \t  for (parm = DECL_ARGUMENTS (fndecl); parm; parm = TREE_CHAIN (parm))\n \t    {\n-\t      type = perm_tree_cons (NULL_TREE, DECL_ARG_TYPE (parm),\n-\t\t\t\t     NULL_TREE);\n+\t      type = tree_cons (NULL_TREE, DECL_ARG_TYPE (parm), NULL_TREE);\n \t      if (last)\n \t\tTREE_CHAIN (last) = type;\n \t      else\n \t\tactual = type;\n \t      last = type;\n \t    }\n-\t  type = perm_tree_cons (NULL_TREE, void_type_node, NULL_TREE);\n+\t  type = tree_cons (NULL_TREE, void_type_node, NULL_TREE);\n \t  if (last)\n \t    TREE_CHAIN (last) = type;\n \t  else\n@@ -6639,17 +6394,15 @@ combine_parm_decls (specparms, parmlist, void_at_end)\n \t  last = TREE_PURPOSE (parm);\n \t  TREE_CHAIN (last) = 0;\n \n-\t  types = saveable_tree_cons (NULL_TREE, TREE_TYPE (parm), types);\n+\t  types = tree_cons (NULL_TREE, TREE_TYPE (parm), types);\n \t}\n   }\n   \n   if (void_at_end)\n-    return saveable_tree_cons (parmdecls, nonparms,\n-\t\t\t       nreverse (saveable_tree_cons (NULL_TREE,\n-\t\t\t\t\t\t\t     void_type_node,\n-\t\t\t\t\t\t\t     types)));\n+    return tree_cons (parmdecls, nonparms,\n+\t\t      nreverse (tree_cons (NULL_TREE, void_type_node, types)));\n \n-  return saveable_tree_cons (parmdecls, nonparms, nreverse (types));\n+  return tree_cons (parmdecls, nonparms, nreverse (types));\n }\n \f\n /* Finish up a function declaration and compile that function\n@@ -6711,14 +6464,14 @@ finish_function (nested)\n \n   /* If this is a nested function, protect the local variables in the stack\n      above us from being collected while we're compiling this function.  */\n-  if (ggc_p && nested)\n+  if (nested)\n     ggc_push_context ();\n \n   /* Run the optimizers and output the assembler code for this function.  */\n   rest_of_compilation (fndecl);\n \n   /* Undo the GC context switch.  */\n-  if (ggc_p && nested)\n+  if (nested)\n     ggc_pop_context ();\n \n   current_function_returns_null |= can_reach_end;\n@@ -6767,12 +6520,6 @@ finish_function (nested)\n \t}\n     }\n \n-  /* Free all the tree nodes making up this function.  */\n-  /* Switch back to allocating nodes permanently\n-     until we start another function.  */\n-  if (! nested)\n-    permanent_allocation (1);\n-\n   if (DECL_SAVED_INSNS (fndecl) == 0 && ! nested)\n     {\n       /* Stop pointing to the local nodes about to be freed.  */\n@@ -6789,7 +6536,7 @@ finish_function (nested)\n     {\n #ifndef ASM_OUTPUT_CONSTRUCTOR\n       if (! flag_gnu_linker)\n-\tstatic_ctors = perm_tree_cons (NULL_TREE, fndecl, static_ctors);\n+\tstatic_ctors = tree_cons (NULL_TREE, fndecl, static_ctors);\n       else\n #endif\n \tassemble_constructor (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (fndecl))); \n@@ -6799,7 +6546,7 @@ finish_function (nested)\n     {\n #ifndef ASM_OUTPUT_DESTRUCTOR\n       if (! flag_gnu_linker)\n-\tstatic_dtors = perm_tree_cons (NULL_TREE, fndecl, static_dtors);\n+\tstatic_dtors = tree_cons (NULL_TREE, fndecl, static_dtors);\n       else\n #endif\n \tassemble_destructor (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (fndecl)));"}, {"sha": "be1acdea1546ce5719b2b420c808934ba2dc862f", "filename": "gcc/c-lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=4dd7201eac0b2f44f0f5b91dc2150a68aff5e389", "patch": "@@ -194,7 +194,7 @@ finish_file ()\n \t\t\t\t\ttree_cons (NULL_TREE, NULL_TREE, \n \t\t\t\t\t\t   void_list_node_1),\n \t\t\t\t\tNULL_TREE),\n-\t\t      NULL_TREE, NULL_TREE, 0);\n+\t\t      NULL_TREE, NULL_TREE);\n       fnname = DECL_ASSEMBLER_NAME (current_function_decl);\n       store_parm_decls ();\n \n@@ -216,7 +216,7 @@ finish_file ()\n \t\t\t\t\ttree_cons (NULL_TREE, NULL_TREE,\n \t\t\t\t\t\t   void_list_node_1),\n \t\t\t\t\tNULL_TREE),\n-\t\t      NULL_TREE, NULL_TREE, 0);\n+\t\t      NULL_TREE, NULL_TREE);\n       fnname = DECL_ASSEMBLER_NAME (current_function_decl);\n       store_parm_decls ();\n "}, {"sha": "a69aa07e5483cce9f9d7146c3e2ddce9fc8d292d", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=4dd7201eac0b2f44f0f5b91dc2150a68aff5e389", "patch": "@@ -759,14 +759,7 @@ check_newline ()\n       goto skipline;\n     }\n \n-  if (! ggc_p && !TREE_PERMANENT (yylval.ttype))\n-    {\n-      input_filename\n-\t= (char *) permalloc (TREE_STRING_LENGTH (yylval.ttype) + 1);\n-      strcpy (input_filename, TREE_STRING_POINTER (yylval.ttype));\n-    }\n-  else\n-    input_filename = TREE_STRING_POINTER (yylval.ttype);\n+  input_filename = TREE_STRING_POINTER (yylval.ttype);\n \n   if (main_input_filename == 0)\n     main_input_filename = input_filename;"}, {"sha": "d1259ee0768aee0e6329ac09fcecf14118b9c28d", "filename": "gcc/c-parse.c", "status": "modified", "additions": 412, "deletions": 477, "changes": 889, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fc-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fc-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.c?ref=4dd7201eac0b2f44f0f5b91dc2150a68aff5e389", "patch": "@@ -1,7 +1,6 @@\n \n /*  A Bison parser, made from c-parse.y\n- by  GNU Bison version 1.27\n-  */\n+    by GNU Bison version 1.28  */\n \n #define YYBISON 1  /* Identify Bison output.  */\n \n@@ -382,46 +381,46 @@ static const short yyrhs[] = {    -1,\n #if YYDEBUG != 0\n static const short yyrline[] = { 0,\n    234,   239,   253,   255,   255,   256,   258,   260,   261,   269,\n-   273,   284,   289,   294,   296,   298,   299,   300,   305,   312,\n-   314,   319,   324,   330,   332,   337,   342,   348,   350,   355,\n-   362,   364,   367,   369,   371,   373,   375,   377,   379,   383,\n-   387,   390,   393,   396,   400,   402,   405,   408,   412,   440,\n-   446,   449,   452,   455,   457,   459,   463,   467,   471,   473,\n-   476,   480,   507,   509,   511,   513,   515,   517,   519,   521,\n-   523,   525,   527,   529,   531,   533,   537,   539,   543,   545,\n-   548,   552,   554,   561,   564,   572,   583,   682,   683,   685,\n-   691,   693,   716,   725,   727,   729,   733,   739,   741,   746,\n-   748,   756,   758,   759,   769,   774,   776,   777,   778,   785,\n-   791,   796,   799,   807,   812,   814,   815,   816,   823,   834,\n-   838,   844,   849,   854,   859,   861,   863,   872,   875,   879,\n-   881,   883,   888,   892,   895,   899,   902,   904,   916,   919,\n-   921,   923,   927,   931,   933,   936,   949,   952,   956,   958,\n-   966,   967,   968,   972,   974,   980,   981,   982,   985,   987,\n-   990,   992,   995,   998,  1004,  1011,  1013,  1020,  1027,  1030,\n-  1037,  1040,  1044,  1047,  1051,  1056,  1059,  1063,  1066,  1068,\n-  1070,  1072,  1079,  1081,  1082,  1083,  1088,  1090,  1095,  1103,\n-  1108,  1112,  1115,  1117,  1122,  1124,  1125,  1128,  1128,  1131,\n-  1134,  1136,  1138,  1141,  1143,  1146,  1152,  1154,  1158,  1172,\n-  1180,  1184,  1198,  1206,  1213,  1215,  1220,  1223,  1228,  1230,\n-  1232,  1239,  1241,  1249,  1255,  1260,  1262,  1264,  1271,  1273,\n-  1279,  1285,  1287,  1289,  1294,  1296,  1303,  1305,  1308,  1311,\n-  1315,  1318,  1322,  1325,  1329,  1334,  1336,  1340,  1342,  1344,\n-  1346,  1350,  1352,  1355,  1358,  1361,  1364,  1368,  1370,  1373,\n-  1375,  1380,  1383,  1388,  1390,  1392,  1406,  1413,  1427,  1433,\n-  1438,  1440,  1445,  1447,  1451,  1455,  1459,  1469,  1471,  1476,\n-  1481,  1484,  1488,  1491,  1495,  1498,  1501,  1504,  1508,  1511,\n-  1515,  1519,  1521,  1523,  1525,  1527,  1529,  1531,  1533,  1537,\n-  1545,  1553,  1555,  1557,  1561,  1563,  1566,  1569,  1580,  1582,\n-  1587,  1589,  1592,  1606,  1609,  1612,  1614,  1616,  1624,  1632,\n-  1642,  1660,  1665,  1670,  1673,  1687,  1696,  1700,  1704,  1708,\n-  1714,  1718,  1723,  1726,  1731,  1734,  1735,  1752,  1757,  1760,\n-  1772,  1774,  1784,  1794,  1795,  1803,  1806,  1818,  1822,  1839,\n-  1849,  1858,  1863,  1868,  1873,  1877,  1881,  1892,  1899,  1906,\n-  1913,  1924,  1930,  1933,  1938,  1961,  1995,  2026,  2057,  2072,\n-  2086,  2090,  2094,  2097,  2102,  2104,  2107,  2109,  2113,  2118,\n-  2121,  2127,  2132,  2137,  2139,  2148,  2149,  2155,  2157,  2167,\n-  2169,  2173,  2176,  2182,  2192,  2201,  2210,  2220,  2234,  2239,\n-  2244,  2246,  2255,  2258,  2263,  2266,  2270\n+   273,   283,   287,   291,   293,   295,   296,   297,   302,   309,\n+   311,   315,   319,   325,   327,   331,   335,   341,   343,   347,\n+   353,   355,   358,   360,   362,   364,   366,   368,   370,   374,\n+   378,   381,   384,   387,   391,   393,   396,   399,   403,   431,\n+   437,   440,   443,   446,   448,   450,   454,   458,   462,   464,\n+   467,   471,   498,   500,   502,   504,   506,   508,   510,   512,\n+   514,   516,   518,   520,   522,   524,   528,   530,   534,   536,\n+   539,   543,   545,   552,   555,   563,   574,   673,   674,   676,\n+   682,   684,   707,   716,   718,   720,   724,   730,   732,   737,\n+   739,   747,   749,   750,   760,   765,   767,   768,   769,   776,\n+   781,   785,   788,   796,   801,   803,   804,   805,   812,   822,\n+   826,   831,   835,   839,   843,   845,   847,   856,   859,   863,\n+   865,   867,   872,   876,   879,   883,   886,   888,   900,   903,\n+   905,   907,   911,   915,   917,   920,   933,   936,   940,   942,\n+   950,   951,   952,   956,   958,   964,   965,   966,   969,   971,\n+   974,   976,   979,   982,   988,   995,   997,  1004,  1011,  1014,\n+  1021,  1024,  1028,  1031,  1035,  1040,  1043,  1047,  1050,  1052,\n+  1054,  1056,  1063,  1065,  1066,  1067,  1072,  1074,  1076,  1078,\n+  1083,  1087,  1090,  1092,  1097,  1099,  1100,  1103,  1103,  1106,\n+  1109,  1111,  1113,  1116,  1118,  1121,  1127,  1129,  1133,  1147,\n+  1155,  1159,  1173,  1181,  1188,  1190,  1195,  1198,  1203,  1205,\n+  1207,  1214,  1216,  1224,  1230,  1235,  1237,  1239,  1246,  1248,\n+  1254,  1260,  1262,  1264,  1269,  1271,  1278,  1280,  1283,  1286,\n+  1290,  1293,  1297,  1300,  1304,  1309,  1311,  1315,  1317,  1319,\n+  1321,  1325,  1327,  1329,  1332,  1334,  1337,  1341,  1343,  1346,\n+  1348,  1353,  1356,  1361,  1363,  1365,  1379,  1385,  1398,  1403,\n+  1408,  1410,  1415,  1417,  1421,  1425,  1429,  1439,  1441,  1446,\n+  1451,  1454,  1458,  1461,  1465,  1468,  1471,  1474,  1478,  1481,\n+  1485,  1489,  1491,  1493,  1495,  1497,  1499,  1501,  1503,  1507,\n+  1515,  1523,  1525,  1527,  1531,  1533,  1536,  1539,  1549,  1551,\n+  1556,  1558,  1561,  1575,  1578,  1581,  1583,  1585,  1589,  1593,\n+  1599,  1617,  1622,  1627,  1630,  1644,  1653,  1657,  1661,  1665,\n+  1671,  1675,  1680,  1683,  1688,  1691,  1692,  1708,  1713,  1716,\n+  1728,  1730,  1740,  1750,  1751,  1758,  1760,  1772,  1776,  1790,\n+  1796,  1802,  1803,  1808,  1813,  1817,  1821,  1832,  1839,  1846,\n+  1853,  1864,  1870,  1873,  1878,  1901,  1931,  1962,  1993,  2008,\n+  2022,  2026,  2030,  2033,  2038,  2040,  2043,  2045,  2049,  2054,\n+  2057,  2063,  2068,  2073,  2075,  2084,  2085,  2091,  2093,  2103,\n+  2105,  2109,  2112,  2118,  2127,  2135,  2143,  2152,  2165,  2170,\n+  2175,  2177,  2186,  2189,  2194,  2197,  2201\n };\n #endif\n \n@@ -1266,8 +1265,8 @@ static const short yycheck[] = {    38,\n     51,    52,    53,    54\n };\n /* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */\n-#line 3 \"/usr/share/bison.simple\"\n-/* This file comes from bison-1.27.  */\n+#line 3 \"/usr/share/misc/bison.simple\"\n+/* This file comes from bison-1.28.  */\n \n /* Skeleton output parser for bison,\n    Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.\n@@ -1480,7 +1479,7 @@ __yy_memcpy (char *to, char *from, unsigned int count)\n #endif\n #endif\n \f\n-#line 216 \"/usr/share/bison.simple\"\n+#line 217 \"/usr/share/misc/bison.simple\"\n \n /* The user can define YYPARSE_PARAM as the name of an argument to be passed\n    into yyparse.  The argument should have type void *.\n@@ -1856,174 +1855,165 @@ case 11:\n \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary (yyvsp[-2].itype); ;\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 12:\n-#line 285 \"c-parse.y\"\n+#line 284 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary (yyvsp[-2].itype); ;\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 13:\n-#line 290 \"c-parse.y\"\n+#line 288 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary (yyvsp[-2].itype);  ;\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 14:\n-#line 295 \"c-parse.y\"\n+#line 292 \"c-parse.y\"\n { pedwarn (\"empty declaration\"); ;\n     break;}\n case 15:\n-#line 297 \"c-parse.y\"\n+#line 294 \"c-parse.y\"\n { shadow_tag (yyvsp[-1].ttype); ;\n     break;}\n case 18:\n-#line 301 \"c-parse.y\"\n+#line 298 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C does not allow extra `;' outside of a function\"); ;\n     break;}\n case 19:\n-#line 307 \"c-parse.y\"\n+#line 304 \"c-parse.y\"\n { if (! start_function (current_declspecs, yyvsp[0].ttype,\n-\t\t\t\t\tprefix_attributes, NULL_TREE, 0))\n+\t\t\t\t\tprefix_attributes, NULL_TREE))\n \t\t    YYERROR1;\n \t\t  reinit_parse_for_function (); ;\n     break;}\n case 20:\n-#line 312 \"c-parse.y\"\n+#line 309 \"c-parse.y\"\n { store_parm_decls (); ;\n     break;}\n case 21:\n-#line 314 \"c-parse.y\"\n+#line 311 \"c-parse.y\"\n { finish_function (0); \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary (yyvsp[-5].itype); ;\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 22:\n-#line 320 \"c-parse.y\"\n+#line 316 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary (yyvsp[-2].itype); ;\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 23:\n-#line 325 \"c-parse.y\"\n+#line 320 \"c-parse.y\"\n { if (! start_function (current_declspecs, yyvsp[0].ttype,\n-\t\t\t\t\tprefix_attributes, NULL_TREE, 0))\n+\t\t\t\t\tprefix_attributes, NULL_TREE))\n \t\t    YYERROR1;\n \t\t  reinit_parse_for_function (); ;\n     break;}\n case 24:\n-#line 330 \"c-parse.y\"\n+#line 325 \"c-parse.y\"\n { store_parm_decls (); ;\n     break;}\n case 25:\n-#line 332 \"c-parse.y\"\n+#line 327 \"c-parse.y\"\n { finish_function (0); \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary (yyvsp[-5].itype); ;\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 26:\n-#line 338 \"c-parse.y\"\n+#line 332 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary (yyvsp[-2].itype); ;\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 27:\n-#line 343 \"c-parse.y\"\n+#line 336 \"c-parse.y\"\n { if (! start_function (NULL_TREE, yyvsp[0].ttype,\n-\t\t\t\t\tprefix_attributes, NULL_TREE, 0))\n+\t\t\t\t\tprefix_attributes, NULL_TREE))\n \t\t    YYERROR1;\n \t\t  reinit_parse_for_function (); ;\n     break;}\n case 28:\n-#line 348 \"c-parse.y\"\n+#line 341 \"c-parse.y\"\n { store_parm_decls (); ;\n     break;}\n case 29:\n-#line 350 \"c-parse.y\"\n+#line 343 \"c-parse.y\"\n { finish_function (0); \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary (yyvsp[-5].itype); ;\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 30:\n-#line 356 \"c-parse.y\"\n+#line 348 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary (yyvsp[-2].itype); ;\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 33:\n-#line 368 \"c-parse.y\"\n+#line 359 \"c-parse.y\"\n { yyval.code = ADDR_EXPR; ;\n     break;}\n case 34:\n-#line 370 \"c-parse.y\"\n+#line 361 \"c-parse.y\"\n { yyval.code = NEGATE_EXPR; ;\n     break;}\n case 35:\n-#line 372 \"c-parse.y\"\n+#line 363 \"c-parse.y\"\n { yyval.code = CONVERT_EXPR; ;\n     break;}\n case 36:\n-#line 374 \"c-parse.y\"\n+#line 365 \"c-parse.y\"\n { yyval.code = PREINCREMENT_EXPR; ;\n     break;}\n case 37:\n-#line 376 \"c-parse.y\"\n+#line 367 \"c-parse.y\"\n { yyval.code = PREDECREMENT_EXPR; ;\n     break;}\n case 38:\n-#line 378 \"c-parse.y\"\n+#line 369 \"c-parse.y\"\n { yyval.code = BIT_NOT_EXPR; ;\n     break;}\n case 39:\n-#line 380 \"c-parse.y\"\n+#line 371 \"c-parse.y\"\n { yyval.code = TRUTH_NOT_EXPR; ;\n     break;}\n case 40:\n-#line 384 \"c-parse.y\"\n+#line 375 \"c-parse.y\"\n { yyval.ttype = build_compound_expr (yyvsp[0].ttype); ;\n     break;}\n case 41:\n-#line 389 \"c-parse.y\"\n+#line 380 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 43:\n-#line 395 \"c-parse.y\"\n+#line 386 \"c-parse.y\"\n { yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 44:\n-#line 397 \"c-parse.y\"\n+#line 388 \"c-parse.y\"\n { chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;\n     break;}\n case 46:\n-#line 403 \"c-parse.y\"\n+#line 394 \"c-parse.y\"\n { yyval.ttype = build_indirect_ref (yyvsp[0].ttype, \"unary *\"); ;\n     break;}\n case 47:\n-#line 406 \"c-parse.y\"\n+#line 397 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype;\n \t\t  RESTORE_WARN_FLAGS (yyvsp[-1].ttype); ;\n     break;}\n case 48:\n-#line 409 \"c-parse.y\"\n+#line 400 \"c-parse.y\"\n { yyval.ttype = build_unary_op (yyvsp[-1].code, yyvsp[0].ttype, 0);\n \t\t  overflow_warning (yyval.ttype); ;\n     break;}\n case 49:\n-#line 413 \"c-parse.y\"\n+#line 404 \"c-parse.y\"\n { tree label = lookup_label (yyvsp[0].ttype);\n \t\t  if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids `&&'\");\n@@ -2038,61 +2028,61 @@ case 49:\n \t\t;\n     break;}\n case 50:\n-#line 441 \"c-parse.y\"\n+#line 432 \"c-parse.y\"\n { skip_evaluation--;\n \t\t  if (TREE_CODE (yyvsp[0].ttype) == COMPONENT_REF\n \t\t      && DECL_C_BIT_FIELD (TREE_OPERAND (yyvsp[0].ttype, 1)))\n \t\t    error (\"`sizeof' applied to a bit-field\");\n \t\t  yyval.ttype = c_sizeof (TREE_TYPE (yyvsp[0].ttype)); ;\n     break;}\n case 51:\n-#line 447 \"c-parse.y\"\n+#line 438 \"c-parse.y\"\n { skip_evaluation--;\n \t\t  yyval.ttype = c_sizeof (groktypename (yyvsp[-1].ttype)); ;\n     break;}\n case 52:\n-#line 450 \"c-parse.y\"\n+#line 441 \"c-parse.y\"\n { skip_evaluation--;\n \t\t  yyval.ttype = c_alignof_expr (yyvsp[0].ttype); ;\n     break;}\n case 53:\n-#line 453 \"c-parse.y\"\n+#line 444 \"c-parse.y\"\n { skip_evaluation--;\n \t\t  yyval.ttype = c_alignof (groktypename (yyvsp[-1].ttype)); ;\n     break;}\n case 54:\n-#line 456 \"c-parse.y\"\n+#line 447 \"c-parse.y\"\n { yyval.ttype = build_unary_op (REALPART_EXPR, yyvsp[0].ttype, 0); ;\n     break;}\n case 55:\n-#line 458 \"c-parse.y\"\n+#line 449 \"c-parse.y\"\n { yyval.ttype = build_unary_op (IMAGPART_EXPR, yyvsp[0].ttype, 0); ;\n     break;}\n case 56:\n-#line 460 \"c-parse.y\"\n+#line 451 \"c-parse.y\"\n { yyval.ttype = build_va_arg (yyvsp[-3].ttype, groktypename (yyvsp[-1].ttype)); ;\n     break;}\n case 57:\n-#line 464 \"c-parse.y\"\n+#line 455 \"c-parse.y\"\n { skip_evaluation++; ;\n     break;}\n case 58:\n-#line 468 \"c-parse.y\"\n+#line 459 \"c-parse.y\"\n { skip_evaluation++; ;\n     break;}\n case 60:\n-#line 474 \"c-parse.y\"\n+#line 465 \"c-parse.y\"\n { tree type = groktypename (yyvsp[-2].ttype);\n \t\t  yyval.ttype = build_c_cast (type, yyvsp[0].ttype); ;\n     break;}\n case 61:\n-#line 477 \"c-parse.y\"\n+#line 468 \"c-parse.y\"\n { start_init (NULL_TREE, NULL, 0);\n \t\t  yyvsp[-2].ttype = groktypename (yyvsp[-2].ttype);\n \t\t  really_start_incremental_init (yyvsp[-2].ttype); ;\n     break;}\n case 62:\n-#line 481 \"c-parse.y\"\n+#line 472 \"c-parse.y\"\n { const char *name;\n \t\t  tree result = pop_init_level (0);\n \t\t  tree type = yyvsp[-5].ttype;\n@@ -2119,90 +2109,90 @@ case 62:\n \t\t;\n     break;}\n case 64:\n-#line 510 \"c-parse.y\"\n+#line 501 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 65:\n-#line 512 \"c-parse.y\"\n+#line 503 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 66:\n-#line 514 \"c-parse.y\"\n+#line 505 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 67:\n-#line 516 \"c-parse.y\"\n+#line 507 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 68:\n-#line 518 \"c-parse.y\"\n+#line 509 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 69:\n-#line 520 \"c-parse.y\"\n+#line 511 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 70:\n-#line 522 \"c-parse.y\"\n+#line 513 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 71:\n-#line 524 \"c-parse.y\"\n+#line 515 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 72:\n-#line 526 \"c-parse.y\"\n+#line 517 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 73:\n-#line 528 \"c-parse.y\"\n+#line 519 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 74:\n-#line 530 \"c-parse.y\"\n+#line 521 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 75:\n-#line 532 \"c-parse.y\"\n+#line 523 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 76:\n-#line 534 \"c-parse.y\"\n+#line 525 \"c-parse.y\"\n { yyvsp[-1].ttype = truthvalue_conversion (default_conversion (yyvsp[-1].ttype));\n \t\t  skip_evaluation += yyvsp[-1].ttype == boolean_false_node; ;\n     break;}\n case 77:\n-#line 537 \"c-parse.y\"\n+#line 528 \"c-parse.y\"\n { skip_evaluation -= yyvsp[-3].ttype == boolean_false_node;\n \t\t  yyval.ttype = parser_build_binary_op (TRUTH_ANDIF_EXPR, yyvsp[-3].ttype, yyvsp[0].ttype); ;\n     break;}\n case 78:\n-#line 540 \"c-parse.y\"\n+#line 531 \"c-parse.y\"\n { yyvsp[-1].ttype = truthvalue_conversion (default_conversion (yyvsp[-1].ttype));\n \t\t  skip_evaluation += yyvsp[-1].ttype == boolean_true_node; ;\n     break;}\n case 79:\n-#line 543 \"c-parse.y\"\n+#line 534 \"c-parse.y\"\n { skip_evaluation -= yyvsp[-3].ttype == boolean_true_node;\n \t\t  yyval.ttype = parser_build_binary_op (TRUTH_ORIF_EXPR, yyvsp[-3].ttype, yyvsp[0].ttype); ;\n     break;}\n case 80:\n-#line 546 \"c-parse.y\"\n+#line 537 \"c-parse.y\"\n { yyvsp[-1].ttype = truthvalue_conversion (default_conversion (yyvsp[-1].ttype));\n \t\t  skip_evaluation += yyvsp[-1].ttype == boolean_false_node; ;\n     break;}\n case 81:\n-#line 549 \"c-parse.y\"\n+#line 540 \"c-parse.y\"\n { skip_evaluation += ((yyvsp[-4].ttype == boolean_true_node)\n \t\t\t\t      - (yyvsp[-4].ttype == boolean_false_node)); ;\n     break;}\n case 82:\n-#line 552 \"c-parse.y\"\n+#line 543 \"c-parse.y\"\n { skip_evaluation -= yyvsp[-6].ttype == boolean_true_node;\n \t\t  yyval.ttype = build_conditional_expr (yyvsp[-6].ttype, yyvsp[-3].ttype, yyvsp[0].ttype); ;\n     break;}\n case 83:\n-#line 555 \"c-parse.y\"\n+#line 546 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids omitting the middle term of a ?: expression\");\n \t\t  /* Make sure first operand is calculated only once.  */\n@@ -2211,12 +2201,12 @@ case 83:\n \t\t  skip_evaluation += yyvsp[-1].ttype == boolean_true_node; ;\n     break;}\n case 84:\n-#line 562 \"c-parse.y\"\n+#line 553 \"c-parse.y\"\n { skip_evaluation -= yyvsp[-4].ttype == boolean_true_node;\n \t\t  yyval.ttype = build_conditional_expr (yyvsp[-4].ttype, yyvsp[-3].ttype, yyvsp[0].ttype); ;\n     break;}\n case 85:\n-#line 565 \"c-parse.y\"\n+#line 556 \"c-parse.y\"\n { char class;\n \t\t  yyval.ttype = build_modify_expr (yyvsp[-2].ttype, NOP_EXPR, yyvsp[0].ttype);\n \t\t  class = TREE_CODE_CLASS (TREE_CODE (yyval.ttype));\n@@ -2226,7 +2216,7 @@ case 85:\n \t\t;\n     break;}\n case 86:\n-#line 573 \"c-parse.y\"\n+#line 564 \"c-parse.y\"\n { char class;\n \t\t  yyval.ttype = build_modify_expr (yyvsp[-2].ttype, yyvsp[-1].code, yyvsp[0].ttype);\n \t\t  /* This inhibits warnings in truthvalue_conversion.  */\n@@ -2237,7 +2227,7 @@ case 86:\n \t\t;\n     break;}\n case 87:\n-#line 585 \"c-parse.y\"\n+#line 576 \"c-parse.y\"\n {\n \t\t  yyval.ttype = lastiddecl;\n \t\t  if (!yyval.ttype || yyval.ttype == error_mark_node)\n@@ -2337,23 +2327,23 @@ case 87:\n \t\t;\n     break;}\n case 89:\n-#line 684 \"c-parse.y\"\n+#line 675 \"c-parse.y\"\n { yyval.ttype = combine_strings (yyvsp[0].ttype); ;\n     break;}\n case 90:\n-#line 686 \"c-parse.y\"\n+#line 677 \"c-parse.y\"\n { char class = TREE_CODE_CLASS (TREE_CODE (yyvsp[-1].ttype));\n \t\t  if (class == 'e' || class == '1'\n \t\t      || class == '2' || class == '<')\n \t\t    C_SET_EXP_ORIGINAL_CODE (yyvsp[-1].ttype, ERROR_MARK);\n \t\t  yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 91:\n-#line 692 \"c-parse.y\"\n+#line 683 \"c-parse.y\"\n { yyval.ttype = error_mark_node; ;\n     break;}\n case 92:\n-#line 694 \"c-parse.y\"\n+#line 685 \"c-parse.y\"\n { tree rtl_exp;\n \t\t  if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids braced-groups within expressions\");\n@@ -2378,7 +2368,7 @@ case 92:\n \t\t;\n     break;}\n case 93:\n-#line 717 \"c-parse.y\"\n+#line 708 \"c-parse.y\"\n {\n \t\t  /* Make sure we call expand_end_stmt_expr.  Otherwise\n \t\t     we are likely to lose sequences and crash later.  */\n@@ -2389,649 +2379,631 @@ case 93:\n \t\t;\n     break;}\n case 94:\n-#line 726 \"c-parse.y\"\n+#line 717 \"c-parse.y\"\n { yyval.ttype = build_function_call (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 95:\n-#line 728 \"c-parse.y\"\n+#line 719 \"c-parse.y\"\n { yyval.ttype = build_array_ref (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 96:\n-#line 730 \"c-parse.y\"\n+#line 721 \"c-parse.y\"\n {\n \t\t    yyval.ttype = build_component_ref (yyvsp[-2].ttype, yyvsp[0].ttype);\n \t\t;\n     break;}\n case 97:\n-#line 734 \"c-parse.y\"\n+#line 725 \"c-parse.y\"\n {\n                   tree expr = build_indirect_ref (yyvsp[-2].ttype, \"->\");\n \n                     yyval.ttype = build_component_ref (expr, yyvsp[0].ttype);\n \t\t;\n     break;}\n case 98:\n-#line 740 \"c-parse.y\"\n+#line 731 \"c-parse.y\"\n { yyval.ttype = build_unary_op (POSTINCREMENT_EXPR, yyvsp[-1].ttype, 0); ;\n     break;}\n case 99:\n-#line 742 \"c-parse.y\"\n+#line 733 \"c-parse.y\"\n { yyval.ttype = build_unary_op (POSTDECREMENT_EXPR, yyvsp[-1].ttype, 0); ;\n     break;}\n case 101:\n-#line 749 \"c-parse.y\"\n+#line 740 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  if (warn_traditional && !in_system_header)\n \t\t    warning (\"Use of ANSI string concatenation\");\n \t\t;\n     break;}\n case 104:\n-#line 761 \"c-parse.y\"\n+#line 752 \"c-parse.y\"\n { c_mark_varargs ();\n \t\t  if (pedantic)\n \t\t    pedwarn (\"ANSI C does not permit use of `varargs.h'\"); ;\n     break;}\n case 105:\n-#line 771 \"c-parse.y\"\n+#line 762 \"c-parse.y\"\n { ;\n     break;}\n case 110:\n-#line 787 \"c-parse.y\"\n+#line 778 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary (yyvsp[-2].itype); ;\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 111:\n-#line 792 \"c-parse.y\"\n+#line 782 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\t\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary (yyvsp[-2].itype); ;\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 112:\n-#line 797 \"c-parse.y\"\n+#line 786 \"c-parse.y\"\n { shadow_tag_warned (yyvsp[-1].ttype, 1);\n \t\t  pedwarn (\"empty declaration\"); ;\n     break;}\n case 113:\n-#line 800 \"c-parse.y\"\n+#line 789 \"c-parse.y\"\n { pedwarn (\"empty declaration\"); ;\n     break;}\n case 114:\n-#line 809 \"c-parse.y\"\n+#line 798 \"c-parse.y\"\n { ;\n     break;}\n case 119:\n-#line 824 \"c-parse.y\"\n-{ yyval.itype = suspend_momentary ();\n-\t\t  pending_xref_error ();\n+#line 813 \"c-parse.y\"\n+{ pending_xref_error ();\n \t\t  declspec_stack = tree_cons (prefix_attributes,\n \t\t\t\t\t      current_declspecs,\n \t\t\t\t\t      declspec_stack);\n \t\t  split_specs_attrs (yyvsp[0].ttype,\n \t\t\t\t     &current_declspecs, &prefix_attributes); ;\n     break;}\n case 120:\n-#line 835 \"c-parse.y\"\n+#line 823 \"c-parse.y\"\n { prefix_attributes = chainon (prefix_attributes, yyvsp[0].ttype); ;\n     break;}\n case 121:\n-#line 840 \"c-parse.y\"\n+#line 828 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary (yyvsp[-2].itype); ;\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 122:\n-#line 845 \"c-parse.y\"\n+#line 832 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary (yyvsp[-2].itype); ;\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 123:\n-#line 850 \"c-parse.y\"\n+#line 836 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary (yyvsp[-1].itype); ;\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 124:\n-#line 855 \"c-parse.y\"\n+#line 840 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary (yyvsp[-1].itype); ;\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 125:\n-#line 860 \"c-parse.y\"\n+#line 844 \"c-parse.y\"\n { shadow_tag (yyvsp[-1].ttype); ;\n     break;}\n case 126:\n-#line 862 \"c-parse.y\"\n+#line 846 \"c-parse.y\"\n { pedwarn (\"empty declaration\"); ;\n     break;}\n case 127:\n-#line 864 \"c-parse.y\"\n+#line 848 \"c-parse.y\"\n { RESTORE_WARN_FLAGS (yyvsp[-1].ttype); ;\n     break;}\n case 128:\n-#line 874 \"c-parse.y\"\n+#line 858 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 129:\n-#line 876 \"c-parse.y\"\n+#line 860 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[0].ttype, tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[-2].ttype)); ;\n     break;}\n case 130:\n-#line 880 \"c-parse.y\"\n+#line 864 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 131:\n-#line 882 \"c-parse.y\"\n+#line 866 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 132:\n-#line 884 \"c-parse.y\"\n+#line 868 \"c-parse.y\"\n { if (extra_warnings)\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER (yyvsp[0].ttype));\n \t\t  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 133:\n-#line 889 \"c-parse.y\"\n+#line 873 \"c-parse.y\"\n { yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype); ;\n     break;}\n case 134:\n-#line 894 \"c-parse.y\"\n+#line 878 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 135:\n-#line 896 \"c-parse.y\"\n+#line 880 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[0].ttype, tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[-2].ttype)); ;\n     break;}\n case 136:\n-#line 901 \"c-parse.y\"\n+#line 885 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 137:\n-#line 903 \"c-parse.y\"\n+#line 887 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 138:\n-#line 905 \"c-parse.y\"\n+#line 889 \"c-parse.y\"\n { if (extra_warnings)\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER (yyvsp[0].ttype));\n \t\t  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 139:\n-#line 918 \"c-parse.y\"\n+#line 902 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 140:\n-#line 920 \"c-parse.y\"\n+#line 904 \"c-parse.y\"\n { yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, NULL_TREE); ;\n     break;}\n case 141:\n-#line 922 \"c-parse.y\"\n+#line 906 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 142:\n-#line 924 \"c-parse.y\"\n+#line 908 \"c-parse.y\"\n { yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype); ;\n     break;}\n case 143:\n-#line 929 \"c-parse.y\"\n+#line 913 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE);\n \t\t  TREE_STATIC (yyval.ttype) = 1; ;\n     break;}\n case 144:\n-#line 932 \"c-parse.y\"\n+#line 916 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 145:\n-#line 934 \"c-parse.y\"\n+#line 918 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);\n \t\t  TREE_STATIC (yyval.ttype) = 1; ;\n     break;}\n case 146:\n-#line 937 \"c-parse.y\"\n+#line 921 \"c-parse.y\"\n { if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER (yyvsp[0].ttype));\n \t\t  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);\n \t\t  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;\n     break;}\n case 147:\n-#line 951 \"c-parse.y\"\n+#line 935 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 148:\n-#line 953 \"c-parse.y\"\n+#line 937 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[0].ttype, tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[-2].ttype)); ;\n     break;}\n case 149:\n-#line 957 \"c-parse.y\"\n+#line 941 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 150:\n-#line 959 \"c-parse.y\"\n+#line 943 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 153:\n-#line 969 \"c-parse.y\"\n+#line 953 \"c-parse.y\"\n { /* For a typedef name, record the meaning, not the name.\n \t\t     In case of `foo foo, bar;'.  */\n \t\t  yyval.ttype = lookup_name (yyvsp[0].ttype); ;\n     break;}\n case 154:\n-#line 973 \"c-parse.y\"\n+#line 957 \"c-parse.y\"\n { yyval.ttype = TREE_TYPE (yyvsp[-1].ttype); ;\n     break;}\n case 155:\n-#line 975 \"c-parse.y\"\n+#line 959 \"c-parse.y\"\n { yyval.ttype = groktypename (yyvsp[-1].ttype); ;\n     break;}\n case 163:\n-#line 997 \"c-parse.y\"\n+#line 981 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 164:\n-#line 999 \"c-parse.y\"\n+#line 983 \"c-parse.y\"\n { if (TREE_CHAIN (yyvsp[-1].ttype)) yyvsp[-1].ttype = combine_strings (yyvsp[-1].ttype);\n \t\t  yyval.ttype = yyvsp[-1].ttype;\n \t\t;\n     break;}\n case 165:\n-#line 1006 \"c-parse.y\"\n+#line 990 \"c-parse.y\"\n { yyval.ttype = start_decl (yyvsp[-3].ttype, current_declspecs, 1,\n \t\t\t\t\t  yyvsp[-1].ttype, prefix_attributes);\n \t\t  start_init (yyval.ttype, yyvsp[-2].ttype, global_bindings_p ()); ;\n     break;}\n case 166:\n-#line 1011 \"c-parse.y\"\n+#line 995 \"c-parse.y\"\n { finish_init ();\n \t\t  finish_decl (yyvsp[-1].ttype, yyvsp[0].ttype, yyvsp[-4].ttype); ;\n     break;}\n case 167:\n-#line 1014 \"c-parse.y\"\n+#line 998 \"c-parse.y\"\n { tree d = start_decl (yyvsp[-2].ttype, current_declspecs, 0,\n \t\t\t\t       yyvsp[0].ttype, prefix_attributes);\n \t\t  finish_decl (d, NULL_TREE, yyvsp[-1].ttype); \n                 ;\n     break;}\n case 168:\n-#line 1022 \"c-parse.y\"\n+#line 1006 \"c-parse.y\"\n { yyval.ttype = start_decl (yyvsp[-3].ttype, current_declspecs, 1,\n \t\t\t\t\t  yyvsp[-1].ttype, prefix_attributes);\n \t\t  start_init (yyval.ttype, yyvsp[-2].ttype, global_bindings_p ()); ;\n     break;}\n case 169:\n-#line 1027 \"c-parse.y\"\n+#line 1011 \"c-parse.y\"\n { finish_init ();\n \t\t  decl_attributes (yyvsp[-1].ttype, yyvsp[-3].ttype, prefix_attributes);\n \t\t  finish_decl (yyvsp[-1].ttype, yyvsp[0].ttype, yyvsp[-4].ttype); ;\n     break;}\n case 170:\n-#line 1031 \"c-parse.y\"\n+#line 1015 \"c-parse.y\"\n { tree d = start_decl (yyvsp[-2].ttype, current_declspecs, 0,\n \t\t\t\t       yyvsp[0].ttype, prefix_attributes);\n \t\t  finish_decl (d, NULL_TREE, yyvsp[-1].ttype); ;\n     break;}\n case 171:\n-#line 1039 \"c-parse.y\"\n+#line 1023 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 172:\n-#line 1041 \"c-parse.y\"\n+#line 1025 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 173:\n-#line 1046 \"c-parse.y\"\n+#line 1030 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 174:\n-#line 1048 \"c-parse.y\"\n+#line 1032 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 175:\n-#line 1053 \"c-parse.y\"\n+#line 1037 \"c-parse.y\"\n { yyval.ttype = yyvsp[-2].ttype; ;\n     break;}\n case 176:\n-#line 1058 \"c-parse.y\"\n+#line 1042 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 177:\n-#line 1060 \"c-parse.y\"\n+#line 1044 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 178:\n-#line 1065 \"c-parse.y\"\n+#line 1049 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 179:\n-#line 1067 \"c-parse.y\"\n+#line 1051 \"c-parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 180:\n-#line 1069 \"c-parse.y\"\n+#line 1053 \"c-parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[-3].ttype, build_tree_list (NULL_TREE, yyvsp[-1].ttype)); ;\n     break;}\n case 181:\n-#line 1071 \"c-parse.y\"\n+#line 1055 \"c-parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[-5].ttype, tree_cons (NULL_TREE, yyvsp[-3].ttype, yyvsp[-1].ttype)); ;\n     break;}\n case 182:\n-#line 1073 \"c-parse.y\"\n+#line 1057 \"c-parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 188:\n-#line 1091 \"c-parse.y\"\n-{ really_start_incremental_init (NULL_TREE);\n-\t\t  /* Note that the call to clear_momentary\n-\t\t     is in process_init_element.  */\n-\t\t  push_momentary (); ;\n+#line 1075 \"c-parse.y\"\n+{ really_start_incremental_init (NULL_TREE); ;\n     break;}\n case 189:\n-#line 1096 \"c-parse.y\"\n-{ yyval.ttype = pop_init_level (0);\n-\t\t  if (yyval.ttype == error_mark_node\n-\t\t      && ! (yychar == STRING || yychar == CONSTANT))\n-\t\t    pop_momentary ();\n-\t\t  else\n-\t\t    pop_momentary_nofree (); ;\n+#line 1077 \"c-parse.y\"\n+{ yyval.ttype = pop_init_level (0); ;\n     break;}\n case 190:\n-#line 1104 \"c-parse.y\"\n+#line 1079 \"c-parse.y\"\n { yyval.ttype = error_mark_node; ;\n     break;}\n case 191:\n-#line 1110 \"c-parse.y\"\n+#line 1085 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids empty initializer braces\"); ;\n     break;}\n case 197:\n-#line 1126 \"c-parse.y\"\n+#line 1101 \"c-parse.y\"\n { set_init_label (yyvsp[-1].ttype); ;\n     break;}\n case 200:\n-#line 1133 \"c-parse.y\"\n+#line 1108 \"c-parse.y\"\n { push_init_level (0); ;\n     break;}\n case 201:\n-#line 1135 \"c-parse.y\"\n+#line 1110 \"c-parse.y\"\n { process_init_element (pop_init_level (0)); ;\n     break;}\n case 202:\n-#line 1137 \"c-parse.y\"\n+#line 1112 \"c-parse.y\"\n { process_init_element (yyvsp[0].ttype); ;\n     break;}\n case 206:\n-#line 1148 \"c-parse.y\"\n+#line 1123 \"c-parse.y\"\n { set_init_label (yyvsp[0].ttype); ;\n     break;}\n case 207:\n-#line 1153 \"c-parse.y\"\n+#line 1128 \"c-parse.y\"\n { set_init_index (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 208:\n-#line 1155 \"c-parse.y\"\n+#line 1130 \"c-parse.y\"\n { set_init_index (yyvsp[-1].ttype, NULL_TREE); ;\n     break;}\n case 209:\n-#line 1160 \"c-parse.y\"\n+#line 1135 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids nested functions\");\n \n \t\t  push_function_context ();\n \t\t  if (! start_function (current_declspecs, yyvsp[0].ttype,\n-\t\t\t\t\tprefix_attributes, NULL_TREE, 1))\n+\t\t\t\t\tprefix_attributes, NULL_TREE))\n \t\t    {\n \t\t      pop_function_context ();\n \t\t      YYERROR1;\n \t\t    }\n \t\t  reinit_parse_for_function (); ;\n     break;}\n case 210:\n-#line 1172 \"c-parse.y\"\n+#line 1147 \"c-parse.y\"\n { store_parm_decls (); ;\n     break;}\n case 211:\n-#line 1180 \"c-parse.y\"\n+#line 1155 \"c-parse.y\"\n { finish_function (1);\n \t\t  pop_function_context (); ;\n     break;}\n case 212:\n-#line 1186 \"c-parse.y\"\n+#line 1161 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids nested functions\");\n \n \t\t  push_function_context ();\n \t\t  if (! start_function (current_declspecs, yyvsp[0].ttype,\n-\t\t\t\t\tprefix_attributes, NULL_TREE, 1))\n+\t\t\t\t\tprefix_attributes, NULL_TREE))\n \t\t    {\n \t\t      pop_function_context ();\n \t\t      YYERROR1;\n \t\t    }\n \t\t  reinit_parse_for_function (); ;\n     break;}\n case 213:\n-#line 1198 \"c-parse.y\"\n+#line 1173 \"c-parse.y\"\n { store_parm_decls (); ;\n     break;}\n case 214:\n-#line 1206 \"c-parse.y\"\n+#line 1181 \"c-parse.y\"\n { finish_function (1);\n \t\t  pop_function_context (); ;\n     break;}\n case 217:\n-#line 1222 \"c-parse.y\"\n+#line 1197 \"c-parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 218:\n-#line 1224 \"c-parse.y\"\n+#line 1199 \"c-parse.y\"\n { yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 219:\n-#line 1229 \"c-parse.y\"\n+#line 1204 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 220:\n-#line 1231 \"c-parse.y\"\n+#line 1206 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-2].ttype, NULL_TREE); ;\n     break;}\n case 221:\n-#line 1233 \"c-parse.y\"\n+#line 1208 \"c-parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 222:\n-#line 1240 \"c-parse.y\"\n+#line 1215 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 224:\n-#line 1251 \"c-parse.y\"\n+#line 1226 \"c-parse.y\"\n { yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 225:\n-#line 1256 \"c-parse.y\"\n+#line 1231 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, NULL_TREE);\n \t\t  if (! flag_isoc9x)\n \t\t    error (\"`[*]' in parameter declaration only allowed in ISO C 9x\");\n \t\t;\n     break;}\n case 226:\n-#line 1261 \"c-parse.y\"\n+#line 1236 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 227:\n-#line 1263 \"c-parse.y\"\n+#line 1238 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-2].ttype, NULL_TREE); ;\n     break;}\n case 228:\n-#line 1265 \"c-parse.y\"\n+#line 1240 \"c-parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 229:\n-#line 1272 \"c-parse.y\"\n+#line 1247 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 231:\n-#line 1281 \"c-parse.y\"\n+#line 1256 \"c-parse.y\"\n { yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 232:\n-#line 1286 \"c-parse.y\"\n+#line 1261 \"c-parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 233:\n-#line 1288 \"c-parse.y\"\n+#line 1263 \"c-parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 234:\n-#line 1290 \"c-parse.y\"\n+#line 1265 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, NULL_TREE);\n \t\t  if (! flag_isoc9x)\n \t\t    error (\"`[*]' in parameter declaration only allowed in ISO C 9x\");\n \t\t;\n     break;}\n case 235:\n-#line 1295 \"c-parse.y\"\n+#line 1270 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 236:\n-#line 1297 \"c-parse.y\"\n+#line 1272 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-2].ttype, NULL_TREE); ;\n     break;}\n case 237:\n-#line 1304 \"c-parse.y\"\n+#line 1279 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 239:\n-#line 1310 \"c-parse.y\"\n+#line 1285 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 240:\n-#line 1312 \"c-parse.y\"\n+#line 1287 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 241:\n-#line 1317 \"c-parse.y\"\n+#line 1292 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 242:\n-#line 1319 \"c-parse.y\"\n+#line 1294 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 243:\n-#line 1324 \"c-parse.y\"\n+#line 1299 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 244:\n-#line 1326 \"c-parse.y\"\n+#line 1301 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 245:\n-#line 1331 \"c-parse.y\"\n+#line 1306 \"c-parse.y\"\n { yyval.ttype = start_struct (RECORD_TYPE, yyvsp[-1].ttype);\n \t\t  /* Start scope of tag before parsing components.  */\n \t\t;\n     break;}\n case 246:\n-#line 1335 \"c-parse.y\"\n+#line 1310 \"c-parse.y\"\n { yyval.ttype = finish_struct (yyvsp[-3].ttype, yyvsp[-2].ttype, chainon (yyvsp[-6].ttype, yyvsp[0].ttype)); ;\n     break;}\n case 247:\n-#line 1337 \"c-parse.y\"\n+#line 1312 \"c-parse.y\"\n { yyval.ttype = finish_struct (start_struct (RECORD_TYPE, NULL_TREE),\n \t\t\t\t      yyvsp[-2].ttype, chainon (yyvsp[-4].ttype, yyvsp[0].ttype));\n \t\t;\n     break;}\n case 248:\n-#line 1341 \"c-parse.y\"\n+#line 1316 \"c-parse.y\"\n { yyval.ttype = xref_tag (RECORD_TYPE, yyvsp[0].ttype); ;\n     break;}\n case 249:\n-#line 1343 \"c-parse.y\"\n+#line 1318 \"c-parse.y\"\n { yyval.ttype = start_struct (UNION_TYPE, yyvsp[-1].ttype); ;\n     break;}\n case 250:\n-#line 1345 \"c-parse.y\"\n+#line 1320 \"c-parse.y\"\n { yyval.ttype = finish_struct (yyvsp[-3].ttype, yyvsp[-2].ttype, chainon (yyvsp[-6].ttype, yyvsp[0].ttype)); ;\n     break;}\n case 251:\n-#line 1347 \"c-parse.y\"\n+#line 1322 \"c-parse.y\"\n { yyval.ttype = finish_struct (start_struct (UNION_TYPE, NULL_TREE),\n \t\t\t\t      yyvsp[-2].ttype, chainon (yyvsp[-4].ttype, yyvsp[0].ttype));\n \t\t;\n     break;}\n case 252:\n-#line 1351 \"c-parse.y\"\n+#line 1326 \"c-parse.y\"\n { yyval.ttype = xref_tag (UNION_TYPE, yyvsp[0].ttype); ;\n     break;}\n case 253:\n-#line 1353 \"c-parse.y\"\n-{ yyvsp[0].itype = suspend_momentary ();\n-\t\t  yyval.ttype = start_enum (yyvsp[-1].ttype); ;\n+#line 1328 \"c-parse.y\"\n+{ yyval.ttype = start_enum (yyvsp[-1].ttype); ;\n     break;}\n case 254:\n-#line 1356 \"c-parse.y\"\n-{ yyval.ttype= finish_enum (yyvsp[-4].ttype, nreverse (yyvsp[-3].ttype), chainon (yyvsp[-7].ttype, yyvsp[0].ttype));\n-\t\t  resume_momentary (yyvsp[-5].itype); ;\n+#line 1330 \"c-parse.y\"\n+{ yyval.ttype = finish_enum (yyvsp[-4].ttype, nreverse (yyvsp[-3].ttype),\n+\t\t\t\t    chainon (yyvsp[-7].ttype, yyvsp[0].ttype)); ;\n     break;}\n case 255:\n-#line 1359 \"c-parse.y\"\n-{ yyvsp[0].itype = suspend_momentary ();\n-\t\t  yyval.ttype = start_enum (NULL_TREE); ;\n+#line 1333 \"c-parse.y\"\n+{ yyval.ttype = start_enum (NULL_TREE); ;\n     break;}\n case 256:\n-#line 1362 \"c-parse.y\"\n-{ yyval.ttype= finish_enum (yyvsp[-4].ttype, nreverse (yyvsp[-3].ttype), chainon (yyvsp[-6].ttype, yyvsp[0].ttype));\n-\t\t  resume_momentary (yyvsp[-5].itype); ;\n+#line 1335 \"c-parse.y\"\n+{ yyval.ttype = finish_enum (yyvsp[-4].ttype, nreverse (yyvsp[-3].ttype),\n+\t\t\t\t    chainon (yyvsp[-6].ttype, yyvsp[0].ttype)); ;\n     break;}\n case 257:\n-#line 1365 \"c-parse.y\"\n+#line 1338 \"c-parse.y\"\n { yyval.ttype = xref_tag (ENUMERAL_TYPE, yyvsp[0].ttype); ;\n     break;}\n case 261:\n-#line 1376 \"c-parse.y\"\n+#line 1349 \"c-parse.y\"\n { if (pedantic && ! flag_isoc9x)\n \t\t    pedwarn (\"comma at end of enumerator list\"); ;\n     break;}\n case 262:\n-#line 1382 \"c-parse.y\"\n+#line 1355 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 263:\n-#line 1384 \"c-parse.y\"\n+#line 1357 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  pedwarn (\"no semicolon at end of struct or union\"); ;\n     break;}\n case 264:\n-#line 1389 \"c-parse.y\"\n+#line 1362 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 265:\n-#line 1391 \"c-parse.y\"\n+#line 1364 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 266:\n-#line 1393 \"c-parse.y\"\n+#line 1366 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"extra semicolon in struct or union specified\"); ;\n     break;}\n case 267:\n-#line 1408 \"c-parse.y\"\n+#line 1381 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype;\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary (yyvsp[-1].itype); ;\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 268:\n-#line 1414 \"c-parse.y\"\n+#line 1386 \"c-parse.y\"\n {\n \t\t  /* Support for unnamed structs or unions as members of \n \t\t     structs or unions (which is [a] useful and [b] supports \n@@ -3043,170 +3015,167 @@ case 268:\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary (yyvsp[-3].itype);\n \t\t;\n     break;}\n case 269:\n-#line 1428 \"c-parse.y\"\n+#line 1399 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype;\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary (yyvsp[-1].itype); ;\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 270:\n-#line 1434 \"c-parse.y\"\n+#line 1404 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids member declarations with no members\");\n \t\t  shadow_tag(yyvsp[0].ttype);\n \t\t  yyval.ttype = NULL_TREE; ;\n     break;}\n case 271:\n-#line 1439 \"c-parse.y\"\n+#line 1409 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 272:\n-#line 1441 \"c-parse.y\"\n+#line 1411 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype;\n \t\t  RESTORE_WARN_FLAGS (yyvsp[-1].ttype); ;\n     break;}\n case 274:\n-#line 1448 \"c-parse.y\"\n+#line 1418 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 275:\n-#line 1453 \"c-parse.y\"\n+#line 1423 \"c-parse.y\"\n { yyval.ttype = grokfield (yyvsp[-3].filename, yyvsp[-2].lineno, yyvsp[-1].ttype, current_declspecs, NULL_TREE);\n \t\t  decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;\n     break;}\n case 276:\n-#line 1457 \"c-parse.y\"\n+#line 1427 \"c-parse.y\"\n { yyval.ttype = grokfield (yyvsp[-5].filename, yyvsp[-4].lineno, yyvsp[-3].ttype, current_declspecs, yyvsp[-1].ttype);\n \t\t  decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;\n     break;}\n case 277:\n-#line 1460 \"c-parse.y\"\n+#line 1430 \"c-parse.y\"\n { yyval.ttype = grokfield (yyvsp[-4].filename, yyvsp[-3].lineno, NULL_TREE, current_declspecs, yyvsp[-1].ttype);\n \t\t  decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;\n     break;}\n case 279:\n-#line 1472 \"c-parse.y\"\n+#line 1442 \"c-parse.y\"\n { if (yyvsp[-2].ttype == error_mark_node)\n \t\t    yyval.ttype = yyvsp[-2].ttype;\n \t\t  else\n \t\t    yyval.ttype = chainon (yyvsp[0].ttype, yyvsp[-2].ttype); ;\n     break;}\n case 280:\n-#line 1477 \"c-parse.y\"\n+#line 1447 \"c-parse.y\"\n { yyval.ttype = error_mark_node; ;\n     break;}\n case 281:\n-#line 1483 \"c-parse.y\"\n+#line 1453 \"c-parse.y\"\n { yyval.ttype = build_enumerator (yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 282:\n-#line 1485 \"c-parse.y\"\n+#line 1455 \"c-parse.y\"\n { yyval.ttype = build_enumerator (yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 283:\n-#line 1490 \"c-parse.y\"\n+#line 1460 \"c-parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 284:\n-#line 1492 \"c-parse.y\"\n+#line 1462 \"c-parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 285:\n-#line 1497 \"c-parse.y\"\n+#line 1467 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 287:\n-#line 1503 \"c-parse.y\"\n+#line 1473 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 288:\n-#line 1505 \"c-parse.y\"\n+#line 1475 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 289:\n-#line 1510 \"c-parse.y\"\n+#line 1480 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 290:\n-#line 1512 \"c-parse.y\"\n+#line 1482 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 291:\n-#line 1517 \"c-parse.y\"\n+#line 1487 \"c-parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 292:\n-#line 1520 \"c-parse.y\"\n+#line 1490 \"c-parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 293:\n-#line 1522 \"c-parse.y\"\n+#line 1492 \"c-parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 294:\n-#line 1524 \"c-parse.y\"\n+#line 1494 \"c-parse.y\"\n { yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 295:\n-#line 1526 \"c-parse.y\"\n+#line 1496 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 296:\n-#line 1528 \"c-parse.y\"\n+#line 1498 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-2].ttype, NULL_TREE); ;\n     break;}\n case 297:\n-#line 1530 \"c-parse.y\"\n+#line 1500 \"c-parse.y\"\n { yyval.ttype = build_nt (CALL_EXPR, NULL_TREE, yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 298:\n-#line 1532 \"c-parse.y\"\n+#line 1502 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, NULL_TREE, yyvsp[-1].ttype); ;\n     break;}\n case 299:\n-#line 1534 \"c-parse.y\"\n+#line 1504 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, NULL_TREE, NULL_TREE); ;\n     break;}\n case 300:\n-#line 1538 \"c-parse.y\"\n+#line 1508 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 301:\n-#line 1547 \"c-parse.y\"\n+#line 1517 \"c-parse.y\"\n {\n \t\t  if (pedantic && yyvsp[0].ends_in_label)\n \t\t    pedwarn (\"ANSI C forbids label at end of compound statement\");\n \t\t;\n     break;}\n case 303:\n-#line 1556 \"c-parse.y\"\n+#line 1526 \"c-parse.y\"\n { yyval.ends_in_label = yyvsp[0].ends_in_label; ;\n     break;}\n case 304:\n-#line 1558 \"c-parse.y\"\n+#line 1528 \"c-parse.y\"\n { yyval.ends_in_label = 0; ;\n     break;}\n case 308:\n-#line 1570 \"c-parse.y\"\n+#line 1540 \"c-parse.y\"\n { emit_line_note (input_filename, lineno);\n \t\t  pushlevel (0);\n \t\t  clear_last_expr ();\n-\t\t  push_momentary ();\n \t\t  expand_start_bindings (0);\n \t\t;\n     break;}\n case 310:\n-#line 1583 \"c-parse.y\"\n+#line 1552 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids label declarations\"); ;\n     break;}\n case 313:\n-#line 1594 \"c-parse.y\"\n+#line 1563 \"c-parse.y\"\n { tree link;\n \t\t  for (link = yyvsp[-1].ttype; link; link = TREE_CHAIN (link))\n \t\t    {\n@@ -3217,49 +3186,37 @@ case 313:\n \t\t;\n     break;}\n case 314:\n-#line 1608 \"c-parse.y\"\n+#line 1577 \"c-parse.y\"\n {;\n     break;}\n case 316:\n-#line 1612 \"c-parse.y\"\n+#line 1581 \"c-parse.y\"\n { compstmt_count++; ;\n     break;}\n case 317:\n-#line 1615 \"c-parse.y\"\n+#line 1584 \"c-parse.y\"\n { yyval.ttype = convert (void_type_node, integer_zero_node); ;\n     break;}\n case 318:\n-#line 1617 \"c-parse.y\"\n+#line 1586 \"c-parse.y\"\n { emit_line_note (input_filename, lineno);\n \t\t  expand_end_bindings (getdecls (), 1, 0);\n-\t\t  yyval.ttype = poplevel (1, 1, 0);\n-\t\t  if (yychar == CONSTANT || yychar == STRING)\n-\t\t    pop_momentary_nofree ();\n-\t\t  else\n-\t\t    pop_momentary (); ;\n+\t\t  yyval.ttype = poplevel (1, 1, 0); ;\n     break;}\n case 319:\n-#line 1625 \"c-parse.y\"\n+#line 1590 \"c-parse.y\"\n { emit_line_note (input_filename, lineno);\n \t\t  expand_end_bindings (getdecls (), kept_level_p (), 0);\n-\t\t  yyval.ttype = poplevel (kept_level_p (), 0, 0);\n-\t\t  if (yychar == CONSTANT || yychar == STRING)\n-\t\t    pop_momentary_nofree ();\n-\t\t  else\n-\t\t    pop_momentary (); ;\n+\t\t  yyval.ttype = poplevel (kept_level_p (), 0, 0); ;\n     break;}\n case 320:\n-#line 1633 \"c-parse.y\"\n+#line 1594 \"c-parse.y\"\n { emit_line_note (input_filename, lineno);\n \t\t  expand_end_bindings (getdecls (), kept_level_p (), 0);\n-\t\t  yyval.ttype = poplevel (kept_level_p (), 0, 0);\n-\t\t  if (yychar == CONSTANT || yychar == STRING)\n-\t\t    pop_momentary_nofree ();\n-\t\t  else\n-\t\t    pop_momentary (); ;\n+\t\t  yyval.ttype = poplevel (kept_level_p (), 0, 0); ;\n     break;}\n case 321:\n-#line 1644 \"c-parse.y\"\n+#line 1601 \"c-parse.y\"\n { if (current_function_decl == 0)\n \t\t    {\n \t\t      error (\"braced-group within expression allowed only inside a function\");\n@@ -3277,11 +3234,11 @@ case 321:\n \t\t;\n     break;}\n case 322:\n-#line 1661 \"c-parse.y\"\n+#line 1618 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 325:\n-#line 1675 \"c-parse.y\"\n+#line 1632 \"c-parse.y\"\n { emit_line_note (yyvsp[-5].filename, yyvsp[-4].lineno);\n \t\t  c_expand_start_cond (truthvalue_conversion (yyvsp[-1].ttype), 0, \n \t\t\t\t       compstmt_count);\n@@ -3291,7 +3248,7 @@ case 325:\n \t\t  position_after_white_space (); ;\n     break;}\n case 326:\n-#line 1689 \"c-parse.y\"\n+#line 1646 \"c-parse.y\"\n { stmt_count++;\n \t\t  compstmt_count++;\n \t\t  emit_line_note (yyvsp[-2].filename, yyvsp[-1].lineno);\n@@ -3301,43 +3258,43 @@ case 326:\n \t\t  position_after_white_space (); ;\n     break;}\n case 327:\n-#line 1697 \"c-parse.y\"\n+#line 1654 \"c-parse.y\"\n { expand_loop_continue_here (); ;\n     break;}\n case 328:\n-#line 1701 \"c-parse.y\"\n+#line 1658 \"c-parse.y\"\n { yyval.filename = input_filename; ;\n     break;}\n case 329:\n-#line 1705 \"c-parse.y\"\n+#line 1662 \"c-parse.y\"\n { yyval.lineno = lineno; ;\n     break;}\n case 330:\n-#line 1710 \"c-parse.y\"\n+#line 1667 \"c-parse.y\"\n { ;\n     break;}\n case 331:\n-#line 1715 \"c-parse.y\"\n+#line 1672 \"c-parse.y\"\n { ;\n     break;}\n case 332:\n-#line 1720 \"c-parse.y\"\n+#line 1677 \"c-parse.y\"\n { yyval.ends_in_label = yyvsp[0].ends_in_label; ;\n     break;}\n case 333:\n-#line 1725 \"c-parse.y\"\n+#line 1682 \"c-parse.y\"\n { yyval.ends_in_label = 0; ;\n     break;}\n case 334:\n-#line 1727 \"c-parse.y\"\n+#line 1684 \"c-parse.y\"\n { yyval.ends_in_label = 1; ;\n     break;}\n case 335:\n-#line 1733 \"c-parse.y\"\n+#line 1690 \"c-parse.y\"\n { stmt_count++; ;\n     break;}\n case 337:\n-#line 1736 \"c-parse.y\"\n+#line 1693 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-3].filename, yyvsp[-2].lineno);\n /* It appears that this should not be done--that a non-lvalue array\n@@ -3352,23 +3309,22 @@ case 337:\n \t\t      || TREE_CODE (TREE_TYPE (yyvsp[-1].ttype)) == FUNCTION_TYPE)\n \t\t    yyvsp[-1].ttype = default_conversion (yyvsp[-1].ttype);\n #endif\n-\t\t  iterator_expand (yyvsp[-1].ttype);\n-\t\t  clear_momentary (); ;\n+\t\t  iterator_expand (yyvsp[-1].ttype); ;\n     break;}\n case 338:\n-#line 1753 \"c-parse.y\"\n+#line 1709 \"c-parse.y\"\n { c_expand_start_else ();\n \t\t  yyvsp[-1].itype = stmt_count;\n \t\t  position_after_white_space (); ;\n     break;}\n case 339:\n-#line 1757 \"c-parse.y\"\n+#line 1713 \"c-parse.y\"\n { c_expand_end_cond ();\n \t\t  if (extra_warnings && stmt_count == yyvsp[-3].itype)\n \t\t    warning (\"empty body in an else-statement\"); ;\n     break;}\n case 340:\n-#line 1761 \"c-parse.y\"\n+#line 1717 \"c-parse.y\"\n { c_expand_end_cond ();\n \t\t  /* This warning is here instead of in simple_if, because we\n \t\t     do not want a warning if an empty if is followed by an\n@@ -3379,11 +3335,11 @@ case 340:\n \t\t\t\t\t\t\"empty body in an if-statement\"); ;\n     break;}\n case 341:\n-#line 1773 \"c-parse.y\"\n+#line 1729 \"c-parse.y\"\n { c_expand_end_cond (); ;\n     break;}\n case 342:\n-#line 1775 \"c-parse.y\"\n+#line 1731 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-2].filename, yyvsp[-1].lineno);\n \t\t  /* The emit_nop used to come before emit_line_note,\n@@ -3395,7 +3351,7 @@ case 342:\n \t\t  emit_nop (); ;\n     break;}\n case 343:\n-#line 1785 \"c-parse.y\"\n+#line 1741 \"c-parse.y\"\n { /* Don't start the loop till we have succeeded\n \t\t     in parsing the end test.  This is to make sure\n \t\t     that we end every loop we start.  */\n@@ -3406,24 +3362,22 @@ case 343:\n \t\t  position_after_white_space (); ;\n     break;}\n case 344:\n-#line 1794 \"c-parse.y\"\n+#line 1750 \"c-parse.y\"\n { expand_end_loop (); ;\n     break;}\n case 345:\n-#line 1797 \"c-parse.y\"\n+#line 1753 \"c-parse.y\"\n { emit_line_note (input_filename, lineno);\n \t\t  expand_exit_loop_if_false (NULL_PTR,\n \t\t\t\t\t     truthvalue_conversion (yyvsp[-2].ttype));\n-\t\t  expand_end_loop ();\n-\t\t  clear_momentary (); ;\n+\t\t  expand_end_loop (); ;\n     break;}\n case 346:\n-#line 1804 \"c-parse.y\"\n-{ expand_end_loop ();\n-\t\t  clear_momentary (); ;\n+#line 1759 \"c-parse.y\"\n+{ expand_end_loop (); ;\n     break;}\n case 347:\n-#line 1808 \"c-parse.y\"\n+#line 1762 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-5].filename, yyvsp[-4].lineno);\n \t\t  /* See comment in `while' alternative, above.  */\n@@ -3436,12 +3390,12 @@ case 347:\n \t\t;\n     break;}\n case 348:\n-#line 1820 \"c-parse.y\"\n+#line 1774 \"c-parse.y\"\n { yyvsp[0].lineno = lineno;\n \t\t  yyval.filename = input_filename; ;\n     break;}\n case 349:\n-#line 1823 \"c-parse.y\"\n+#line 1777 \"c-parse.y\"\n { \n \t\t  /* Start the loop.  Doing this after parsing\n \t\t     all the expressions ensures we will end the loop.  */\n@@ -3451,72 +3405,58 @@ case 349:\n \t\t  if (yyvsp[-4].ttype)\n \t\t    expand_exit_loop_if_false (NULL_PTR,\n \t\t\t\t\t       truthvalue_conversion (yyvsp[-4].ttype));\n-\t\t  /* Don't let the tree nodes for $9 be discarded by\n-\t\t     clear_momentary during the parsing of the next stmt.  */\n-\t\t  push_momentary ();\n \t\t  yyvsp[-3].lineno = lineno;\n \t\t  yyvsp[-2].filename = input_filename;\n \t\t  position_after_white_space (); ;\n     break;}\n case 350:\n-#line 1839 \"c-parse.y\"\n+#line 1790 \"c-parse.y\"\n { /* Emit the increment expression, with a line number.  */\n \t\t  emit_line_note (yyvsp[-4].filename, yyvsp[-5].lineno);\n \t\t  expand_loop_continue_here ();\n \t\t  if (yyvsp[-3].ttype)\n \t\t    c_expand_expr_stmt (yyvsp[-3].ttype);\n-\t\t  if (yychar == CONSTANT || yychar == STRING)\n-\t\t    pop_momentary_nofree ();\n-\t\t  else\n-\t\t    pop_momentary ();\n \t\t  expand_end_loop (); ;\n     break;}\n case 351:\n-#line 1850 \"c-parse.y\"\n+#line 1797 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-5].filename, yyvsp[-4].lineno);\n \t\t  c_expand_start_case (yyvsp[-1].ttype);\n-\t\t  /* Don't let the tree nodes for $3 be discarded by\n-\t\t     clear_momentary during the parsing of the next stmt.  */\n-\t\t  push_momentary ();\n \t\t  position_after_white_space (); ;\n     break;}\n case 352:\n-#line 1858 \"c-parse.y\"\n-{ expand_end_case (yyvsp[-3].ttype);\n-\t\t  if (yychar == CONSTANT || yychar == STRING)\n-\t\t    pop_momentary_nofree ();\n-\t\t  else\n-\t\t    pop_momentary (); ;\n+#line 1802 \"c-parse.y\"\n+{ expand_end_case (yyvsp[-3].ttype); ;\n     break;}\n case 353:\n-#line 1864 \"c-parse.y\"\n+#line 1804 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-3].filename, yyvsp[-2].lineno);\n \t\t  if ( ! expand_exit_something ())\n \t\t    error (\"break statement not within loop or switch\"); ;\n     break;}\n case 354:\n-#line 1869 \"c-parse.y\"\n+#line 1809 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-3].filename, yyvsp[-2].lineno);\n \t\t  if (! expand_continue_loop (NULL_PTR))\n \t\t    error (\"continue statement not within a loop\"); ;\n     break;}\n case 355:\n-#line 1874 \"c-parse.y\"\n+#line 1814 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-3].filename, yyvsp[-2].lineno);\n \t\t  c_expand_return (NULL_TREE); ;\n     break;}\n case 356:\n-#line 1878 \"c-parse.y\"\n+#line 1818 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-4].filename, yyvsp[-3].lineno);\n \t\t  c_expand_return (yyvsp[-1].ttype); ;\n     break;}\n case 357:\n-#line 1882 \"c-parse.y\"\n+#line 1822 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-7].filename, yyvsp[-6].lineno);\n \t\t  STRIP_NOPS (yyvsp[-2].ttype);\n@@ -3528,31 +3468,31 @@ case 357:\n \t\t    error (\"argument of `asm' is not a constant string\"); ;\n     break;}\n case 358:\n-#line 1893 \"c-parse.y\"\n+#line 1833 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-9].filename, yyvsp[-8].lineno);\n \t\t  c_expand_asm_operands (yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE, NULL_TREE,\n \t\t\t\t\t yyvsp[-6].ttype == ridpointers[(int)RID_VOLATILE],\n \t\t\t\t\t input_filename, lineno); ;\n     break;}\n case 359:\n-#line 1900 \"c-parse.y\"\n+#line 1840 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-11].filename, yyvsp[-10].lineno);\n \t\t  c_expand_asm_operands (yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE,\n \t\t\t\t\t yyvsp[-8].ttype == ridpointers[(int)RID_VOLATILE],\n \t\t\t\t\t input_filename, lineno); ;\n     break;}\n case 360:\n-#line 1908 \"c-parse.y\"\n+#line 1848 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-13].filename, yyvsp[-12].lineno);\n \t\t  c_expand_asm_operands (yyvsp[-8].ttype, yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype,\n \t\t\t\t\t yyvsp[-10].ttype == ridpointers[(int)RID_VOLATILE],\n \t\t\t\t\t input_filename, lineno); ;\n     break;}\n case 361:\n-#line 1914 \"c-parse.y\"\n+#line 1854 \"c-parse.y\"\n { tree decl;\n \t\t  stmt_count++;\n \t\t  emit_line_note (yyvsp[-4].filename, yyvsp[-3].lineno);\n@@ -3565,15 +3505,15 @@ case 361:\n \t\t;\n     break;}\n case 362:\n-#line 1925 \"c-parse.y\"\n+#line 1865 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids `goto *expr;'\");\n \t\t  stmt_count++;\n \t\t  emit_line_note (yyvsp[-5].filename, yyvsp[-4].lineno);\n \t\t  expand_computed_goto (convert (ptr_type_node, yyvsp[-1].ttype)); ;\n     break;}\n case 365:\n-#line 1940 \"c-parse.y\"\n+#line 1880 \"c-parse.y\"\n {\n \t    /* The value returned by this action is  */\n \t    /*      1 if everything is OK */ \n@@ -3596,14 +3536,14 @@ case 365:\n \t  ;\n     break;}\n case 366:\n-#line 1961 \"c-parse.y\"\n+#line 1901 \"c-parse.y\"\n {\n \t    if (yyvsp[-1].itype)\n \t      iterator_for_loop_end (yyvsp[-3].ttype);\n \t  ;\n     break;}\n case 367:\n-#line 1996 \"c-parse.y\"\n+#line 1932 \"c-parse.y\"\n { register tree value = check_case_value (yyvsp[-1].ttype);\n \t\t  register tree label\n \t\t    = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);\n@@ -3636,7 +3576,7 @@ case 367:\n \t\t  position_after_white_space (); ;\n     break;}\n case 368:\n-#line 2027 \"c-parse.y\"\n+#line 1963 \"c-parse.y\"\n { register tree value1 = check_case_value (yyvsp[-3].ttype);\n \t\t  register tree value2 = check_case_value (yyvsp[-1].ttype);\n \t\t  register tree label\n@@ -3669,7 +3609,7 @@ case 368:\n \t\t  position_after_white_space (); ;\n     break;}\n case 369:\n-#line 2058 \"c-parse.y\"\n+#line 1994 \"c-parse.y\"\n {\n \t\t  tree duplicate;\n \t\t  register tree label\n@@ -3686,7 +3626,7 @@ case 369:\n \t\t  position_after_white_space (); ;\n     break;}\n case 370:\n-#line 2073 \"c-parse.y\"\n+#line 2009 \"c-parse.y\"\n { tree label = define_label (input_filename, lineno, yyvsp[-2].ttype);\n \t\t  stmt_count++;\n \t\t  emit_nop ();\n@@ -3698,52 +3638,52 @@ case 370:\n \t\t  position_after_white_space (); ;\n     break;}\n case 371:\n-#line 2088 \"c-parse.y\"\n+#line 2024 \"c-parse.y\"\n { emit_line_note (input_filename, lineno);\n \t\t  yyval.ttype = NULL_TREE; ;\n     break;}\n case 372:\n-#line 2091 \"c-parse.y\"\n+#line 2027 \"c-parse.y\"\n { emit_line_note (input_filename, lineno); ;\n     break;}\n case 373:\n-#line 2096 \"c-parse.y\"\n+#line 2032 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 375:\n-#line 2103 \"c-parse.y\"\n+#line 2039 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 378:\n-#line 2110 \"c-parse.y\"\n+#line 2046 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 379:\n-#line 2115 \"c-parse.y\"\n+#line 2051 \"c-parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 380:\n-#line 2120 \"c-parse.y\"\n+#line 2056 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, combine_strings (yyvsp[0].ttype), NULL_TREE); ;\n     break;}\n case 381:\n-#line 2122 \"c-parse.y\"\n+#line 2058 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, combine_strings (yyvsp[0].ttype), yyvsp[-2].ttype); ;\n     break;}\n case 382:\n-#line 2128 \"c-parse.y\"\n+#line 2064 \"c-parse.y\"\n { pushlevel (0);\n \t\t  clear_parm_order ();\n \t\t  declare_parm_level (0); ;\n     break;}\n case 383:\n-#line 2132 \"c-parse.y\"\n+#line 2068 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype;\n \t\t  parmlist_tags_warning ();\n \t\t  poplevel (0, 0, 0); ;\n     break;}\n case 385:\n-#line 2140 \"c-parse.y\"\n+#line 2076 \"c-parse.y\"\n { tree parm;\n \t\t  if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids forward parameter declarations\");\n@@ -3753,19 +3693,19 @@ case 385:\n \t\t  clear_parm_order (); ;\n     break;}\n case 386:\n-#line 2148 \"c-parse.y\"\n+#line 2084 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 387:\n-#line 2150 \"c-parse.y\"\n+#line 2086 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, NULL_TREE, NULL_TREE); ;\n     break;}\n case 388:\n-#line 2156 \"c-parse.y\"\n+#line 2092 \"c-parse.y\"\n { yyval.ttype = get_parm_info (0); ;\n     break;}\n case 389:\n-#line 2158 \"c-parse.y\"\n+#line 2094 \"c-parse.y\"\n { yyval.ttype = get_parm_info (0);\n \t\t  /* Gcc used to allow this as an extension.  However, it does\n \t\t     not work for all targets, and thus has been disabled.\n@@ -3777,121 +3717,116 @@ case 389:\n \t\t;\n     break;}\n case 390:\n-#line 2168 \"c-parse.y\"\n+#line 2104 \"c-parse.y\"\n { yyval.ttype = get_parm_info (1); ;\n     break;}\n case 391:\n-#line 2170 \"c-parse.y\"\n+#line 2106 \"c-parse.y\"\n { yyval.ttype = get_parm_info (0); ;\n     break;}\n case 392:\n-#line 2175 \"c-parse.y\"\n+#line 2111 \"c-parse.y\"\n { push_parm_decl (yyvsp[0].ttype); ;\n     break;}\n case 393:\n-#line 2177 \"c-parse.y\"\n+#line 2113 \"c-parse.y\"\n { push_parm_decl (yyvsp[0].ttype); ;\n     break;}\n case 394:\n-#line 2184 \"c-parse.y\"\n+#line 2120 \"c-parse.y\"\n { yyval.ttype = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t yyvsp[-1].ttype),\n \t\t\t\t\tbuild_tree_list (prefix_attributes,\n \t\t\t\t\t\t\t yyvsp[0].ttype));\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary (yyvsp[-2].itype); ;\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 395:\n-#line 2193 \"c-parse.y\"\n+#line 2128 \"c-parse.y\"\n { yyval.ttype = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t yyvsp[-1].ttype),\n \t\t\t\t\tbuild_tree_list (prefix_attributes,\n \t\t\t\t\t\t\t yyvsp[0].ttype)); \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary (yyvsp[-2].itype); ;\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 396:\n-#line 2202 \"c-parse.y\"\n+#line 2136 \"c-parse.y\"\n { yyval.ttype = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t yyvsp[-1].ttype),\n \t\t\t\t\tbuild_tree_list (prefix_attributes,\n \t\t\t\t\t\t\t yyvsp[0].ttype));\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary (yyvsp[-2].itype); ;\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 397:\n-#line 2211 \"c-parse.y\"\n+#line 2144 \"c-parse.y\"\n { yyval.ttype = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t yyvsp[-1].ttype),\n \t\t\t\t\tbuild_tree_list (prefix_attributes,\n \t\t\t\t\t\t\t yyvsp[0].ttype));\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary (yyvsp[-2].itype);  ;\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 398:\n-#line 2221 \"c-parse.y\"\n+#line 2153 \"c-parse.y\"\n { yyval.ttype = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t yyvsp[-1].ttype),\n \t\t\t\t\tbuild_tree_list (prefix_attributes,\n \t\t\t\t\t\t\t yyvsp[0].ttype));\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary (yyvsp[-2].itype);  ;\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 399:\n-#line 2235 \"c-parse.y\"\n+#line 2166 \"c-parse.y\"\n { pushlevel (0);\n \t\t  clear_parm_order ();\n \t\t  declare_parm_level (1); ;\n     break;}\n case 400:\n-#line 2239 \"c-parse.y\"\n+#line 2170 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype;\n \t\t  parmlist_tags_warning ();\n \t\t  poplevel (0, 0, 0); ;\n     break;}\n case 402:\n-#line 2247 \"c-parse.y\"\n+#line 2178 \"c-parse.y\"\n { tree t;\n \t\t  for (t = yyvsp[-1].ttype; t; t = TREE_CHAIN (t))\n \t\t    if (TREE_VALUE (t) == NULL_TREE)\n \t\t      error (\"`...' in old-style identifier list\");\n \t\t  yyval.ttype = tree_cons (NULL_TREE, NULL_TREE, yyvsp[-1].ttype); ;\n     break;}\n case 403:\n-#line 2257 \"c-parse.y\"\n+#line 2188 \"c-parse.y\"\n { yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 404:\n-#line 2259 \"c-parse.y\"\n+#line 2190 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;\n     break;}\n case 405:\n-#line 2265 \"c-parse.y\"\n+#line 2196 \"c-parse.y\"\n { yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 406:\n-#line 2267 \"c-parse.y\"\n+#line 2198 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;\n     break;}\n case 407:\n-#line 2272 \"c-parse.y\"\n+#line 2203 \"c-parse.y\"\n { yyval.ttype = SAVE_WARN_FLAGS();\n \t\t  pedantic = 0;\n \t\t  warn_pointer_arith = 0; ;\n     break;}\n }\n    /* the action file gets copied in in place of this dollarsign */\n-#line 542 \"/usr/share/bison.simple\"\n+#line 543 \"/usr/share/misc/bison.simple\"\n \f\n   yyvsp -= yylen;\n   yyssp -= yylen;\n@@ -4111,5 +4046,5 @@ case 407:\n     }\n   return 1;\n }\n-#line 2277 \"c-parse.y\"\n+#line 2208 \"c-parse.y\"\n "}, {"sha": "e5f876a3d2f214e31836491e1a9c9c8f062c51f9", "filename": "gcc/c-parse.in", "status": "modified", "additions": 46, "deletions": 118, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=4dd7201eac0b2f44f0f5b91dc2150a68aff5e389", "patch": "@@ -320,18 +320,15 @@ datadef:\n \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($1); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n         | declmods setspecs notype_initdecls ';'\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_declspecs setspecs initdecls ';'\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2);  }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n         | declmods ';'\n \t  { pedwarn (\"empty declaration\"); }\n \t| typed_declspecs ';'\n@@ -346,7 +343,7 @@ datadef:\n fndef:\n \t  typed_declspecs setspecs declarator\n \t\t{ if (! start_function (current_declspecs, $3,\n-\t\t\t\t\tprefix_attributes, NULL_TREE, 0))\n+\t\t\t\t\tprefix_attributes, NULL_TREE))\n \t\t    YYERROR1;\n \t\t  reinit_parse_for_function (); }\n \t  old_style_parm_decls\n@@ -355,16 +352,14 @@ fndef:\n \t\t{ finish_function (0); \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_declspecs setspecs declarator error\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| declmods setspecs notype_declarator\n \t\t{ if (! start_function (current_declspecs, $3,\n-\t\t\t\t\tprefix_attributes, NULL_TREE, 0))\n+\t\t\t\t\tprefix_attributes, NULL_TREE))\n \t\t    YYERROR1;\n \t\t  reinit_parse_for_function (); }\n \t  old_style_parm_decls\n@@ -373,16 +368,14 @@ fndef:\n \t\t{ finish_function (0); \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| declmods setspecs notype_declarator error\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| setspecs notype_declarator\n \t\t{ if (! start_function (NULL_TREE, $2,\n-\t\t\t\t\tprefix_attributes, NULL_TREE, 0))\n+\t\t\t\t\tprefix_attributes, NULL_TREE))\n \t\t    YYERROR1;\n \t\t  reinit_parse_for_function (); }\n \t  old_style_parm_decls\n@@ -391,13 +384,11 @@ fndef:\n \t\t{ finish_function (0); \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($1); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| setspecs notype_declarator error\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($1); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t;\n \n identifier:\n@@ -943,13 +934,11 @@ datadecl:\n \ttyped_declspecs_no_prefix_attr setspecs initdecls ';'\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| declmods_no_prefix_attr setspecs notype_initdecls ';'\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\t\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_declspecs_no_prefix_attr ';'\n \t\t{ shadow_tag_warned ($1, 1);\n \t\t  pedwarn (\"empty declaration\"); }\n@@ -978,8 +967,7 @@ decls:\n    Maintains a stack of outer-level values of current_declspecs,\n    for the sake of parm declarations nested in function declarators.  */\n setspecs: /* empty */\n-\t\t{ $$ = suspend_momentary ();\n-\t\t  pending_xref_error ();\n+\t\t{ pending_xref_error ();\n \t\t  declspec_stack = tree_cons (prefix_attributes,\n \t\t\t\t\t      current_declspecs,\n \t\t\t\t\t      declspec_stack);\n@@ -996,23 +984,19 @@ decl:\n \ttyped_declspecs setspecs initdecls ';'\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| declmods setspecs notype_initdecls ';'\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_declspecs setspecs nested_function\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| declmods setspecs notype_nested_function\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_declspecs ';'\n \t\t{ shadow_tag ($1); }\n \t| declmods ';'\n@@ -1256,18 +1240,9 @@ any_word:\n init:\n \texpr_no_commas\n \t| '{'\n-\t\t{ really_start_incremental_init (NULL_TREE);\n-\t\t  /* Note that the call to clear_momentary\n-\t\t     is in process_init_element.  */\n-\t\t  push_momentary (); }\n+\t\t{ really_start_incremental_init (NULL_TREE); }\n \t  initlist_maybe_comma '}'\n-\t\t{ $$ = pop_init_level (0);\n-\t\t  if ($$ == error_mark_node\n-\t\t      && ! (yychar == STRING || yychar == CONSTANT))\n-\t\t    pop_momentary ();\n-\t\t  else\n-\t\t    pop_momentary_nofree (); }\n-\n+\t\t{ $$ = pop_init_level (0); }\n \t| error\n \t\t{ $$ = error_mark_node; }\n \t;\n@@ -1332,7 +1307,7 @@ nested_function:\n \n \t\t  push_function_context ();\n \t\t  if (! start_function (current_declspecs, $1,\n-\t\t\t\t\tprefix_attributes, NULL_TREE, 1))\n+\t\t\t\t\tprefix_attributes, NULL_TREE))\n \t\t    {\n \t\t      pop_function_context ();\n \t\t      YYERROR1;\n@@ -1358,7 +1333,7 @@ notype_nested_function:\n \n \t\t  push_function_context ();\n \t\t  if (! start_function (current_declspecs, $1,\n-\t\t\t\t\tprefix_attributes, NULL_TREE, 1))\n+\t\t\t\t\tprefix_attributes, NULL_TREE))\n \t\t    {\n \t\t      pop_function_context ();\n \t\t      YYERROR1;\n@@ -1527,17 +1502,15 @@ structsp:\n \t| union_head identifier\n \t\t{ $$ = xref_tag (UNION_TYPE, $2); }\n \t| enum_head identifier '{'\n-\t\t{ $<itype>3 = suspend_momentary ();\n-\t\t  $$ = start_enum ($2); }\n+\t\t{ $$ = start_enum ($2); }\n \t  enumlist maybecomma_warn '}' maybe_attribute\n-\t\t{ $$= finish_enum ($<ttype>4, nreverse ($5), chainon ($1, $8));\n-\t\t  resume_momentary ($<itype>3); }\n+\t\t{ $$ = finish_enum ($<ttype>4, nreverse ($5),\n+\t\t\t\t    chainon ($1, $8)); }\n \t| enum_head '{'\n-\t\t{ $<itype>2 = suspend_momentary ();\n-\t\t  $$ = start_enum (NULL_TREE); }\n+\t\t{ $$ = start_enum (NULL_TREE); }\n \t  enumlist maybecomma_warn '}' maybe_attribute\n-\t\t{ $$= finish_enum ($<ttype>3, nreverse ($4), chainon ($1, $7));\n-\t\t  resume_momentary ($<itype>2); }\n+\t\t{ $$ = finish_enum ($<ttype>3, nreverse ($4),\n+\t\t\t\t    chainon ($1, $7)); }\n \t| enum_head identifier\n \t\t{ $$ = xref_tag (ENUMERAL_TYPE, $2); }\n \t;\n@@ -1601,8 +1574,7 @@ component_decl:\n \t\t{ $$ = $3;\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_typespecs setspecs save_filename save_lineno maybe_attribute\n \t\t{\n \t\t  /* Support for unnamed structs or unions as members of \n@@ -1615,14 +1587,12 @@ component_decl:\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2);\n \t\t}\n     | nonempty_type_quals setspecs components\n \t\t{ $$ = $3;\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| nonempty_type_quals\n \t\t{ if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids member declarations with no members\");\n@@ -1763,7 +1733,6 @@ pushlevel:  /* empty */\n \t\t{ emit_line_note (input_filename, lineno);\n \t\t  pushlevel (0);\n \t\t  clear_last_expr ();\n-\t\t  push_momentary ();\n \t\t  expand_start_bindings (0);\n ifobjc\n \t\t  if (objc_method_context)\n@@ -1813,27 +1782,15 @@ compstmt_nostart: '}'\n \t| pushlevel maybe_label_decls decls xstmts '}'\n \t\t{ emit_line_note (input_filename, lineno);\n \t\t  expand_end_bindings (getdecls (), 1, 0);\n-\t\t  $$ = poplevel (1, 1, 0);\n-\t\t  if (yychar == CONSTANT || yychar == STRING)\n-\t\t    pop_momentary_nofree ();\n-\t\t  else\n-\t\t    pop_momentary (); }\n+\t\t  $$ = poplevel (1, 1, 0); }\n \t| pushlevel maybe_label_decls error '}'\n \t\t{ emit_line_note (input_filename, lineno);\n \t\t  expand_end_bindings (getdecls (), kept_level_p (), 0);\n-\t\t  $$ = poplevel (kept_level_p (), 0, 0);\n-\t\t  if (yychar == CONSTANT || yychar == STRING)\n-\t\t    pop_momentary_nofree ();\n-\t\t  else\n-\t\t    pop_momentary (); }\n+\t\t  $$ = poplevel (kept_level_p (), 0, 0); }\n \t| pushlevel maybe_label_decls stmts '}'\n \t\t{ emit_line_note (input_filename, lineno);\n \t\t  expand_end_bindings (getdecls (), kept_level_p (), 0);\n-\t\t  $$ = poplevel (kept_level_p (), 0, 0);\n-\t\t  if (yychar == CONSTANT || yychar == STRING)\n-\t\t    pop_momentary_nofree ();\n-\t\t  else\n-\t\t    pop_momentary (); }\n+\t\t  $$ = poplevel (kept_level_p (), 0, 0); }\n \t;\n \n compstmt_primary_start:\n@@ -1944,8 +1901,7 @@ stmt:\n \t\t      || TREE_CODE (TREE_TYPE ($1)) == FUNCTION_TYPE)\n \t\t    $1 = default_conversion ($1);\n #endif\n-\t\t  iterator_expand ($1);\n-\t\t  clear_momentary (); }\n+\t\t  iterator_expand ($1); }\n \t| simple_if ELSE\n \t\t{ c_expand_start_else ();\n \t\t  $<itype>1 = stmt_count;\n@@ -1994,12 +1950,10 @@ stmt:\n \t\t{ emit_line_note (input_filename, lineno);\n \t\t  expand_exit_loop_if_false (NULL_PTR,\n \t\t\t\t\t     truthvalue_conversion ($3));\n-\t\t  expand_end_loop ();\n-\t\t  clear_momentary (); }\n+\t\t  expand_end_loop (); }\n /* This rule is needed to make sure we end every loop we start.  */\n \t| do_stmt_start error\n-\t\t{ expand_end_loop ();\n-\t\t  clear_momentary (); }\n+\t\t{ expand_end_loop (); }\n \t| FOR\n \t  '(' xexpr ';'\n \t\t{ stmt_count++;\n@@ -2026,9 +1980,6 @@ stmt:\n \t\t  if ($6)\n \t\t    expand_exit_loop_if_false (NULL_PTR,\n \t\t\t\t\t       truthvalue_conversion ($6));\n-\t\t  /* Don't let the tree nodes for $9 be discarded by\n-\t\t     clear_momentary during the parsing of the next stmt.  */\n-\t\t  push_momentary ();\n \t\t  $<lineno>7 = lineno;\n \t\t  $<filename>8 = input_filename;\n \t\t  position_after_white_space (); }\n@@ -2038,25 +1989,14 @@ stmt:\n \t\t  expand_loop_continue_here ();\n \t\t  if ($9)\n \t\t    c_expand_expr_stmt ($9);\n-\t\t  if (yychar == CONSTANT || yychar == STRING)\n-\t\t    pop_momentary_nofree ();\n-\t\t  else\n-\t\t    pop_momentary ();\n \t\t  expand_end_loop (); }\n \t| SWITCH '(' expr ')'\n \t\t{ stmt_count++;\n \t\t  emit_line_note ($<filename>-1, $<lineno>0);\n \t\t  c_expand_start_case ($3);\n-\t\t  /* Don't let the tree nodes for $3 be discarded by\n-\t\t     clear_momentary during the parsing of the next stmt.  */\n-\t\t  push_momentary ();\n \t\t  position_after_white_space (); }\n \t  lineno_labeled_stmt\n-\t\t{ expand_end_case ($3);\n-\t\t  if (yychar == CONSTANT || yychar == STRING)\n-\t\t    pop_momentary_nofree ();\n-\t\t  else\n-\t\t    pop_momentary (); }\n+\t\t{ expand_end_case ($3); }\n \t| BREAK ';'\n \t\t{ stmt_count++;\n \t\t  emit_line_note ($<filename>-1, $<lineno>0);\n@@ -2178,10 +2118,6 @@ all_iter_stmt_with_decl:\n \t    emit_line_note (input_filename, lineno);\n \t    expand_end_bindings (getdecls (), 1, 0);\n \t    $<ttype>$ = poplevel (1, 1, 0);\n-\t    if (yychar == CONSTANT || yychar == STRING)\n-\t      pop_momentary_nofree ();\n-\t    else\n-\t      pop_momentary ();\t    \n \t  }\n */\n \n@@ -2384,35 +2320,31 @@ parm:\n \t\t\t\t\t\t\t $4));\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_declspecs setspecs notype_declarator maybe_attribute\n \t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t $3),\n \t\t\t\t\tbuild_tree_list (prefix_attributes,\n \t\t\t\t\t\t\t $4)); \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_declspecs setspecs absdcl maybe_attribute\n \t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t $3),\n \t\t\t\t\tbuild_tree_list (prefix_attributes,\n \t\t\t\t\t\t\t $4));\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| declmods setspecs notype_declarator maybe_attribute\n \t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t $3),\n \t\t\t\t\tbuild_tree_list (prefix_attributes,\n \t\t\t\t\t\t\t $4));\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2);  }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \n \t| declmods setspecs absdcl maybe_attribute\n \t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n@@ -2421,8 +2353,7 @@ parm:\n \t\t\t\t\t\t\t $4));\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2);  }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t;\n \n /* This is used in a function definition\n@@ -2708,14 +2639,12 @@ ivar_decl:\n \t        { $$ = $3;\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| nonempty_type_quals setspecs ivars\n \t\t{ $$ = $3;\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| error\n \t\t{ $$ = NULL_TREE; }\n \t;\n@@ -2902,8 +2831,7 @@ mydecl:\n \ttyped_declspecs setspecs myparms ';'\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_declspecs ';'\n \t\t{ shadow_tag ($1); }\n \t| declmods ';'"}, {"sha": "11a87513e1b55b0d384f050e9673555db19b4500", "filename": "gcc/c-parse.y", "status": "modified", "additions": 43, "deletions": 112, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fc-parse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fc-parse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.y?ref=4dd7201eac0b2f44f0f5b91dc2150a68aff5e389", "patch": "@@ -279,18 +279,15 @@ datadef:\n \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($1); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n         | declmods setspecs notype_initdecls ';'\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_declspecs setspecs initdecls ';'\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2);  }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n         | declmods ';'\n \t  { pedwarn (\"empty declaration\"); }\n \t| typed_declspecs ';'\n@@ -305,7 +302,7 @@ datadef:\n fndef:\n \t  typed_declspecs setspecs declarator\n \t\t{ if (! start_function (current_declspecs, $3,\n-\t\t\t\t\tprefix_attributes, NULL_TREE, 0))\n+\t\t\t\t\tprefix_attributes, NULL_TREE))\n \t\t    YYERROR1;\n \t\t  reinit_parse_for_function (); }\n \t  old_style_parm_decls\n@@ -314,16 +311,14 @@ fndef:\n \t\t{ finish_function (0); \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_declspecs setspecs declarator error\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| declmods setspecs notype_declarator\n \t\t{ if (! start_function (current_declspecs, $3,\n-\t\t\t\t\tprefix_attributes, NULL_TREE, 0))\n+\t\t\t\t\tprefix_attributes, NULL_TREE))\n \t\t    YYERROR1;\n \t\t  reinit_parse_for_function (); }\n \t  old_style_parm_decls\n@@ -332,16 +327,14 @@ fndef:\n \t\t{ finish_function (0); \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| declmods setspecs notype_declarator error\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| setspecs notype_declarator\n \t\t{ if (! start_function (NULL_TREE, $2,\n-\t\t\t\t\tprefix_attributes, NULL_TREE, 0))\n+\t\t\t\t\tprefix_attributes, NULL_TREE))\n \t\t    YYERROR1;\n \t\t  reinit_parse_for_function (); }\n \t  old_style_parm_decls\n@@ -350,13 +343,11 @@ fndef:\n \t\t{ finish_function (0); \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($1); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| setspecs notype_declarator error\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($1); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t;\n \n identifier:\n@@ -786,13 +777,11 @@ datadecl:\n \ttyped_declspecs_no_prefix_attr setspecs initdecls ';'\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| declmods_no_prefix_attr setspecs notype_initdecls ';'\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\t\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_declspecs_no_prefix_attr ';'\n \t\t{ shadow_tag_warned ($1, 1);\n \t\t  pedwarn (\"empty declaration\"); }\n@@ -821,8 +810,7 @@ decls:\n    Maintains a stack of outer-level values of current_declspecs,\n    for the sake of parm declarations nested in function declarators.  */\n setspecs: /* empty */\n-\t\t{ $$ = suspend_momentary ();\n-\t\t  pending_xref_error ();\n+\t\t{ pending_xref_error ();\n \t\t  declspec_stack = tree_cons (prefix_attributes,\n \t\t\t\t\t      current_declspecs,\n \t\t\t\t\t      declspec_stack);\n@@ -839,23 +827,19 @@ decl:\n \ttyped_declspecs setspecs initdecls ';'\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| declmods setspecs notype_initdecls ';'\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_declspecs setspecs nested_function\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| declmods setspecs notype_nested_function\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_declspecs ';'\n \t\t{ shadow_tag ($1); }\n \t| declmods ';'\n@@ -1088,18 +1072,9 @@ any_word:\n init:\n \texpr_no_commas\n \t| '{'\n-\t\t{ really_start_incremental_init (NULL_TREE);\n-\t\t  /* Note that the call to clear_momentary\n-\t\t     is in process_init_element.  */\n-\t\t  push_momentary (); }\n+\t\t{ really_start_incremental_init (NULL_TREE); }\n \t  initlist_maybe_comma '}'\n-\t\t{ $$ = pop_init_level (0);\n-\t\t  if ($$ == error_mark_node\n-\t\t      && ! (yychar == STRING || yychar == CONSTANT))\n-\t\t    pop_momentary ();\n-\t\t  else\n-\t\t    pop_momentary_nofree (); }\n-\n+\t\t{ $$ = pop_init_level (0); }\n \t| error\n \t\t{ $$ = error_mark_node; }\n \t;\n@@ -1162,7 +1137,7 @@ nested_function:\n \n \t\t  push_function_context ();\n \t\t  if (! start_function (current_declspecs, $1,\n-\t\t\t\t\tprefix_attributes, NULL_TREE, 1))\n+\t\t\t\t\tprefix_attributes, NULL_TREE))\n \t\t    {\n \t\t      pop_function_context ();\n \t\t      YYERROR1;\n@@ -1188,7 +1163,7 @@ notype_nested_function:\n \n \t\t  push_function_context ();\n \t\t  if (! start_function (current_declspecs, $1,\n-\t\t\t\t\tprefix_attributes, NULL_TREE, 1))\n+\t\t\t\t\tprefix_attributes, NULL_TREE))\n \t\t    {\n \t\t      pop_function_context ();\n \t\t      YYERROR1;\n@@ -1350,17 +1325,15 @@ structsp:\n \t| union_head identifier\n \t\t{ $$ = xref_tag (UNION_TYPE, $2); }\n \t| enum_head identifier '{'\n-\t\t{ $<itype>3 = suspend_momentary ();\n-\t\t  $$ = start_enum ($2); }\n+\t\t{ $$ = start_enum ($2); }\n \t  enumlist maybecomma_warn '}' maybe_attribute\n-\t\t{ $$= finish_enum ($<ttype>4, nreverse ($5), chainon ($1, $8));\n-\t\t  resume_momentary ($<itype>3); }\n+\t\t{ $$ = finish_enum ($<ttype>4, nreverse ($5),\n+\t\t\t\t    chainon ($1, $8)); }\n \t| enum_head '{'\n-\t\t{ $<itype>2 = suspend_momentary ();\n-\t\t  $$ = start_enum (NULL_TREE); }\n+\t\t{ $$ = start_enum (NULL_TREE); }\n \t  enumlist maybecomma_warn '}' maybe_attribute\n-\t\t{ $$= finish_enum ($<ttype>3, nreverse ($4), chainon ($1, $7));\n-\t\t  resume_momentary ($<itype>2); }\n+\t\t{ $$ = finish_enum ($<ttype>3, nreverse ($4),\n+\t\t\t\t    chainon ($1, $7)); }\n \t| enum_head identifier\n \t\t{ $$ = xref_tag (ENUMERAL_TYPE, $2); }\n \t;\n@@ -1408,8 +1381,7 @@ component_decl:\n \t\t{ $$ = $3;\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_typespecs setspecs save_filename save_lineno maybe_attribute\n \t\t{\n \t\t  /* Support for unnamed structs or unions as members of \n@@ -1422,14 +1394,12 @@ component_decl:\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2);\n \t\t}\n     | nonempty_type_quals setspecs components\n \t\t{ $$ = $3;\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| nonempty_type_quals\n \t\t{ if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids member declarations with no members\");\n@@ -1570,7 +1540,6 @@ pushlevel:  /* empty */\n \t\t{ emit_line_note (input_filename, lineno);\n \t\t  pushlevel (0);\n \t\t  clear_last_expr ();\n-\t\t  push_momentary ();\n \t\t  expand_start_bindings (0);\n \t\t}\n \t;\n@@ -1616,27 +1585,15 @@ compstmt_nostart: '}'\n \t| pushlevel maybe_label_decls decls xstmts '}'\n \t\t{ emit_line_note (input_filename, lineno);\n \t\t  expand_end_bindings (getdecls (), 1, 0);\n-\t\t  $$ = poplevel (1, 1, 0);\n-\t\t  if (yychar == CONSTANT || yychar == STRING)\n-\t\t    pop_momentary_nofree ();\n-\t\t  else\n-\t\t    pop_momentary (); }\n+\t\t  $$ = poplevel (1, 1, 0); }\n \t| pushlevel maybe_label_decls error '}'\n \t\t{ emit_line_note (input_filename, lineno);\n \t\t  expand_end_bindings (getdecls (), kept_level_p (), 0);\n-\t\t  $$ = poplevel (kept_level_p (), 0, 0);\n-\t\t  if (yychar == CONSTANT || yychar == STRING)\n-\t\t    pop_momentary_nofree ();\n-\t\t  else\n-\t\t    pop_momentary (); }\n+\t\t  $$ = poplevel (kept_level_p (), 0, 0); }\n \t| pushlevel maybe_label_decls stmts '}'\n \t\t{ emit_line_note (input_filename, lineno);\n \t\t  expand_end_bindings (getdecls (), kept_level_p (), 0);\n-\t\t  $$ = poplevel (kept_level_p (), 0, 0);\n-\t\t  if (yychar == CONSTANT || yychar == STRING)\n-\t\t    pop_momentary_nofree ();\n-\t\t  else\n-\t\t    pop_momentary (); }\n+\t\t  $$ = poplevel (kept_level_p (), 0, 0); }\n \t;\n \n compstmt_primary_start:\n@@ -1747,8 +1704,7 @@ stmt:\n \t\t      || TREE_CODE (TREE_TYPE ($1)) == FUNCTION_TYPE)\n \t\t    $1 = default_conversion ($1);\n #endif\n-\t\t  iterator_expand ($1);\n-\t\t  clear_momentary (); }\n+\t\t  iterator_expand ($1); }\n \t| simple_if ELSE\n \t\t{ c_expand_start_else ();\n \t\t  $<itype>1 = stmt_count;\n@@ -1797,12 +1753,10 @@ stmt:\n \t\t{ emit_line_note (input_filename, lineno);\n \t\t  expand_exit_loop_if_false (NULL_PTR,\n \t\t\t\t\t     truthvalue_conversion ($3));\n-\t\t  expand_end_loop ();\n-\t\t  clear_momentary (); }\n+\t\t  expand_end_loop (); }\n /* This rule is needed to make sure we end every loop we start.  */\n \t| do_stmt_start error\n-\t\t{ expand_end_loop ();\n-\t\t  clear_momentary (); }\n+\t\t{ expand_end_loop (); }\n \t| FOR\n \t  '(' xexpr ';'\n \t\t{ stmt_count++;\n@@ -1829,9 +1783,6 @@ stmt:\n \t\t  if ($6)\n \t\t    expand_exit_loop_if_false (NULL_PTR,\n \t\t\t\t\t       truthvalue_conversion ($6));\n-\t\t  /* Don't let the tree nodes for $9 be discarded by\n-\t\t     clear_momentary during the parsing of the next stmt.  */\n-\t\t  push_momentary ();\n \t\t  $<lineno>7 = lineno;\n \t\t  $<filename>8 = input_filename;\n \t\t  position_after_white_space (); }\n@@ -1841,25 +1792,14 @@ stmt:\n \t\t  expand_loop_continue_here ();\n \t\t  if ($9)\n \t\t    c_expand_expr_stmt ($9);\n-\t\t  if (yychar == CONSTANT || yychar == STRING)\n-\t\t    pop_momentary_nofree ();\n-\t\t  else\n-\t\t    pop_momentary ();\n \t\t  expand_end_loop (); }\n \t| SWITCH '(' expr ')'\n \t\t{ stmt_count++;\n \t\t  emit_line_note ($<filename>-1, $<lineno>0);\n \t\t  c_expand_start_case ($3);\n-\t\t  /* Don't let the tree nodes for $3 be discarded by\n-\t\t     clear_momentary during the parsing of the next stmt.  */\n-\t\t  push_momentary ();\n \t\t  position_after_white_space (); }\n \t  lineno_labeled_stmt\n-\t\t{ expand_end_case ($3);\n-\t\t  if (yychar == CONSTANT || yychar == STRING)\n-\t\t    pop_momentary_nofree ();\n-\t\t  else\n-\t\t    pop_momentary (); }\n+\t\t{ expand_end_case ($3); }\n \t| BREAK ';'\n \t\t{ stmt_count++;\n \t\t  emit_line_note ($<filename>-1, $<lineno>0);\n@@ -1981,10 +1921,6 @@ all_iter_stmt_with_decl:\n \t    emit_line_note (input_filename, lineno);\n \t    expand_end_bindings (getdecls (), 1, 0);\n \t    $<ttype>$ = poplevel (1, 1, 0);\n-\t    if (yychar == CONSTANT || yychar == STRING)\n-\t      pop_momentary_nofree ();\n-\t    else\n-\t      pop_momentary ();\t    \n \t  }\n */\n \n@@ -2187,35 +2123,31 @@ parm:\n \t\t\t\t\t\t\t $4));\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_declspecs setspecs notype_declarator maybe_attribute\n \t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t $3),\n \t\t\t\t\tbuild_tree_list (prefix_attributes,\n \t\t\t\t\t\t\t $4)); \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_declspecs setspecs absdcl maybe_attribute\n \t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t $3),\n \t\t\t\t\tbuild_tree_list (prefix_attributes,\n \t\t\t\t\t\t\t $4));\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| declmods setspecs notype_declarator maybe_attribute\n \t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t $3),\n \t\t\t\t\tbuild_tree_list (prefix_attributes,\n \t\t\t\t\t\t\t $4));\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2);  }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \n \t| declmods setspecs absdcl maybe_attribute\n \t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n@@ -2224,8 +2156,7 @@ parm:\n \t\t\t\t\t\t\t $4));\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2);  }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t;\n \n /* This is used in a function definition"}, {"sha": "2adfcc70af81fe483f8a366730db8da9d38bc17d", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=4dd7201eac0b2f44f0f5b91dc2150a68aff5e389", "patch": "@@ -303,35 +303,17 @@ handle_pragma_token (string, token)\n \n #ifdef HANDLE_PRAGMA_WEAK\n     case ps_weak:\n-      name = permalloc (strlen (string) + 1);\n-      if (name == NULL)\n-\t{\n-\t  warning (\"Out of memory parsing #pragma weak\");\n-\t  state = ps_bad;\n-\t}\n-      else\n-\t{\n-\t  strcpy (name, string);\n-\t  state = ps_name;\n-\t}\n+      name = xstrdup (string);\n+      state = ps_name;\n       break;\n       \n     case ps_name:\n       state = (strcmp (string, \"=\") ? ps_bad : ps_equals);\n       break;\n \n     case ps_equals:\n-      value = permalloc (strlen (string) + 1);\n-      if (value == NULL)\n-\t{\n-\t  warning (\"Out of memory parsing #pragma weak\");\n-\t  state = ps_bad;\n-\t}\n-      else\n-\t{\n-\t  strcpy (value, string);\n-\t  state = ps_value;\n-\t}\n+      value = xstrdup (string);\n+      state = ps_value;\n       break;\n \n     case ps_value:"}, {"sha": "5744760e48d6fb0a001e1fa7e2e668ccc49e349e", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=4dd7201eac0b2f44f0f5b91dc2150a68aff5e389", "patch": "@@ -235,7 +235,7 @@ extern void shadow_tag                          PARAMS ((tree));\n extern void shadow_tag_warned                   PARAMS ((tree, int));\n extern tree start_enum                          PARAMS ((tree));\n extern int  start_function                      PARAMS ((tree, tree, tree,\n-\t\t\t\t\t\t\t tree, int));\n+\t\t\t\t\t\t\t tree));\n extern tree start_decl                          PARAMS ((tree, tree, int,\n \t\t\t\t\t\t\t tree, tree));\n extern tree start_struct                        PARAMS ((enum tree_code, tree));"}, {"sha": "a424242d4a845af507d9be47224fed42bfbdce2a", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 5, "deletions": 44, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=4dd7201eac0b2f44f0f5b91dc2150a68aff5e389", "patch": "@@ -40,6 +40,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"intl.h\"\n #include \"defaults.h\"\n+#include \"ggc.h\"\n \n /* Nonzero if we've already printed a \"missing braces around initializer\"\n    message within this initializer.  */\n@@ -4825,7 +4826,8 @@ struct init_node\n /* Tree of pending elements at this constructor level.\n    These are elements encountered out of order\n    which belong at places we haven't reached yet in actually\n-   writing the output.  */\n+   writing the output.\n+   Will never hold tree nodes across GC runs.  */\n static struct init_node *constructor_pending_elts;\n \n /* The SPELLING_DEPTH of this constructor.  */\n@@ -5099,19 +5101,10 @@ really_start_incremental_init (type)\n \n   if (constructor_incremental)\n     {\n-      int momentary = suspend_momentary ();\n-      push_obstacks_nochange ();\n-      if (TREE_PERMANENT (constructor_decl))\n-\tend_temporary_allocation ();\n       make_decl_rtl (constructor_decl, constructor_asmspec,\n \t\t     constructor_top_level);\n       assemble_variable (constructor_decl, constructor_top_level, 0, 1);\n-      pop_obstacks ();\n-      resume_momentary (momentary);\n-    }\n \n-  if (constructor_incremental)\n-    {\n       defer_addressed_constants ();\n       constructor_subconstants_deferred = 1;\n     }\n@@ -5392,29 +5385,15 @@ pop_init_level (implicit)\n \t  if (TREE_CODE (constructor_type) == ARRAY_TYPE\n \t      && TYPE_DOMAIN (constructor_type) == 0)\n \t    {\n-\t      int failure;\n-\t      int momentary_p;\n-\n-\t      push_obstacks_nochange ();\n-\t      if (TREE_PERMANENT (constructor_type))\n-\t\tend_temporary_allocation ();\n-\n-\t      momentary_p = suspend_momentary ();\n-\n \t      /* We shouldn't have an incomplete array type within\n \t\t some other type.  */\n \t      if (constructor_stack->next)\n \t\tabort ();\n \n-\t      failure\n-\t\t= complete_array_type (constructor_type,\n-\t\t\t\t       constructor, 0);\n-\t      if (failure)\n+\t      if (complete_array_type (constructor_type, constructor, 0))\n \t\tabort ();\n \n \t      size = int_size_in_bytes (constructor_type);\n-\t      resume_momentary (momentary_p);\n-\t      pop_obstacks ();\n \t    }\n \n \t  output_constant (constructor, size);\n@@ -5448,23 +5427,17 @@ pop_init_level (implicit)\n \tconstructor = error_mark_node;\n       else\n \t{\n-\t  int momentary = suspend_momentary ();\n-\n \t  constructor = build (CONSTRUCTOR, constructor_type, NULL_TREE,\n \t\t\t       nreverse (constructor_elements));\n \t  if (constructor_constant)\n \t    TREE_CONSTANT (constructor) = 1;\n \t  if (constructor_constant && constructor_simple)\n \t    TREE_STATIC (constructor) = 1;\n-\n-\t  resume_momentary (momentary);\n \t}\n     }\n   else\n     {\n       tree filled;\n-      int momentary = suspend_momentary ();\n-\n       if (TREE_CODE (constructor_type) == RECORD_TYPE\n \t  || TREE_CODE (constructor_type) == UNION_TYPE)\n \t{\n@@ -5485,9 +5458,6 @@ pop_init_level (implicit)\n \t\t\t      constructor_unfilled_index,\n \t\t\t      integer_one_node);\n \n-\t      push_obstacks_nochange ();\n-\t      if (TREE_PERMANENT (constructor_type))\n-\t\tend_temporary_allocation ();\n \t      maxindex = copy_node (maxindex);\n \t      TYPE_DOMAIN (constructor_type) = build_index_type (maxindex);\n \t      TREE_TYPE (maxindex) = TYPE_DOMAIN (constructor_type);\n@@ -5502,7 +5472,6 @@ pop_init_level (implicit)\n \t\t\t\t \"zero or negative array size `%s'\");\n \t      layout_type (constructor_type);\n \t      size = int_size_in_bytes (constructor_type);\n-\t      pop_obstacks ();\n \t    }\n \n \t  filled = size_binop (MULT_EXPR, constructor_unfilled_index,\n@@ -5513,8 +5482,6 @@ pop_init_level (implicit)\n \n       if (filled != 0)\n \tassemble_zeros (size - TREE_INT_CST_LOW (filled));\n-\n-      resume_momentary (momentary);\n     }\n \n \t  \n@@ -5672,7 +5639,7 @@ add_pending_init (purpose, value)\n \t}\n     }\n \n-  r = (struct init_node *) oballoc (sizeof (struct init_node));\n+  r = (struct init_node *) ggc_alloc_obj (sizeof (struct init_node), 0);\n   r->purpose = purpose;\n   r->value = value;\n \n@@ -6550,12 +6517,6 @@ process_init_element (value)\n       constructor_fields = 0;\n       break;\n     }\n-\n-  /* If the (lexically) previous elments are not now saved,\n-     we can discard the storage for them.  */\n-  if (constructor_incremental && constructor_pending_elts == 0 && value != 0\n-      && constructor_stack == 0)\n-    clear_momentary ();\n }\n \f\n /* Expand an ASM statement with operands, handling output operands"}, {"sha": "87ccf7839d2d88f1c5e890e4a7d62f12147ae26c", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 13, "deletions": 76, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=4dd7201eac0b2f44f0f5b91dc2150a68aff5e389", "patch": "@@ -1022,11 +1022,8 @@ get_static_reference (interface, protocols)\n     {\n       tree t, m = TYPE_MAIN_VARIANT (type);\n \n-      push_obstacks_nochange ();\n-      end_temporary_allocation ();\n       t = copy_node (type);\n       TYPE_BINFO (t) = make_tree_vec (2);\n-      pop_obstacks ();\n \n       /* Add this type to the chain of variants of TYPE.  */\n       TYPE_NEXT_VARIANT (t) = TYPE_NEXT_VARIANT (m);\n@@ -1072,11 +1069,8 @@ get_object_reference (protocols)\n     {\n       tree t, m = TYPE_MAIN_VARIANT (type);\n \n-      push_obstacks_nochange ();\n-      end_temporary_allocation ();\n       t = copy_node (type);\n       TYPE_BINFO (t) = make_tree_vec (2);\n-      pop_obstacks ();\n \n       /* Add this type to the chain of variants of TYPE.  */\n       TYPE_NEXT_VARIANT (t) = TYPE_NEXT_VARIANT (m);\n@@ -1362,8 +1356,6 @@ build_objc_string_object (strings)\n \n   if (! flag_next_runtime)\n     {\n-      push_obstacks_nochange ();\n-      end_temporary_allocation ();\n       if (! TREE_PERMANENT (strings))\n \tstring = my_build_string (length + 1,\n \t\t\t\t  TREE_STRING_POINTER (string));\n@@ -1382,7 +1374,6 @@ build_objc_string_object (strings)\n     {\n       constructor\n \t= objc_add_static_instance (constructor, constant_string_type);\n-      pop_obstacks ();\n     }\n \n   return (build_unary_op (ADDR_EXPR, constructor, 1));\n@@ -1398,9 +1389,6 @@ objc_add_static_instance (constructor, class_decl)\n   tree *chain, decl;\n   char buf[256];\n \n-  push_obstacks_nochange ();\n-  end_temporary_allocation ();\n-\n   /* Find the list of static instances for the CLASS_DECL.  Create one if\n      not found.  */\n   for (chain = &objc_static_instances;\n@@ -1427,7 +1415,6 @@ objc_add_static_instance (constructor, class_decl)\n   /* Add the DECL to the head of this CLASS' list.  */\n   TREE_PURPOSE (*chain) = tree_cons (NULL_TREE, decl, TREE_PURPOSE (*chain));\n \n-  pop_obstacks ();\n   return decl;\n }\n \n@@ -1805,7 +1792,7 @@ build_module_descriptor ()\n \t\t\t\t      tree_cons (NULL_TREE, NULL_TREE,\n \t\t\t\t\t\t void_list_node_1),\n \t\t\t\t      NULL_TREE),\n-\t\t    NULL_TREE, NULL_TREE, 0);\n+\t\t    NULL_TREE, NULL_TREE);\n #if 0 /* This should be turned back on later\n \t for the systems where collect is not needed.  */\n     /* Make these functions nonglobal\n@@ -1942,7 +1929,6 @@ generate_static_references ()\n   TREE_USED (static_instances_decl) = 1;\n   DECL_CONTEXT (static_instances_decl) = 0;\n   DECL_ARTIFICIAL (static_instances_decl) = 1;\n-  end_temporary_allocation ();\n   expr = build_constructor (TREE_TYPE (static_instances_decl),\n \t\t\t    nreverse (decls));\n   finish_decl (static_instances_decl, expr, NULL_TREE);\n@@ -1966,7 +1952,6 @@ generate_strings ()\n       decl_specs = tree_cons (NULL_TREE, ridpointers[(int) RID_CHAR], sc_spec);\n       expr_decl = build_nt (ARRAY_REF, DECL_NAME (decl), NULL_TREE);\n       decl = start_decl (expr_decl, decl_specs, 1, NULL_TREE, NULL_TREE);\n-      end_temporary_allocation ();\n       string_expr = my_build_string (IDENTIFIER_LENGTH (string) + 1,\n \t\t\t\t     IDENTIFIER_POINTER (string));\n       finish_decl (decl, string_expr, NULL_TREE);\n@@ -2010,9 +1995,6 @@ build_selector_reference_decl ()\n \n   sprintf (buf, \"_OBJC_SELECTOR_REFERENCES_%d\", idx++);\n \n-  push_obstacks_nochange ();\n-  end_temporary_allocation ();\n-\n   ident = get_identifier (buf);\n \n   decl = build_decl (VAR_DECL, ident, selector_type);\n@@ -2026,8 +2008,6 @@ build_selector_reference_decl ()\n   make_decl_rtl (decl, 0, 1);\n   pushdecl_top_level (decl);\n \n-  pop_obstacks ();\n-\n   return decl;\n }\n \n@@ -2085,11 +2065,6 @@ build_selector_translation_table ()\n   int offset = 0;\n   tree decl = NULL_TREE, var_decl, name;\n \n-  /* The corresponding pop_obstacks is in finish_decl,\n-     called at the end of this function.  */\n-  if (! flag_next_runtime)\n-    push_obstacks_nochange ();\n-\n   for (chain = sel_ref_chain; chain; chain = TREE_CHAIN (chain))\n     {\n       tree expr;\n@@ -2193,7 +2168,7 @@ build_typed_selector_reference (ident, proto)\n       chain = &TREE_CHAIN (*chain);\n     }\n \n-  *chain = perm_tree_cons (proto, ident, NULL_TREE);\n+  *chain = tree_cons (proto, ident, NULL_TREE);\n \n  return_at_index:\n   expr = build_unary_op (ADDR_EXPR,\n@@ -2225,7 +2200,7 @@ build_selector_reference (ident)\n \n   expr = build_selector_reference_decl ();\n \n-  *chain = perm_tree_cons (expr, ident, NULL_TREE);\n+  *chain = tree_cons (expr, ident, NULL_TREE);\n \n   return (flag_next_runtime\n \t  ? expr\n@@ -2242,9 +2217,6 @@ build_class_reference_decl ()\n \n   sprintf (buf, \"_OBJC_CLASS_REFERENCES_%d\", idx++);\n \n-  push_obstacks_nochange ();\n-  end_temporary_allocation ();\n-\n   ident = get_identifier (buf);\n \n   decl = build_decl (VAR_DECL, ident, objc_class_type);\n@@ -2258,8 +2230,6 @@ build_class_reference_decl ()\n   make_decl_rtl (decl, 0, 1);\n   pushdecl_top_level (decl);\n \n-  pop_obstacks ();\n-\n   return decl;\n }\n \n@@ -2286,10 +2256,10 @@ add_class_reference (ident)\n       while (chain);\n \n       /* Append to the end of the list */\n-      TREE_CHAIN (tail) = perm_tree_cons (NULL_TREE, ident, NULL_TREE);\n+      TREE_CHAIN (tail) = tree_cons (NULL_TREE, ident, NULL_TREE);\n     }\n   else\n-    cls_ref_chain = perm_tree_cons (NULL_TREE, ident, NULL_TREE);\n+    cls_ref_chain = tree_cons (NULL_TREE, ident, NULL_TREE);\n }\n \n /* Get a class reference, creating it if necessary.  Also create the\n@@ -2314,7 +2284,7 @@ get_class_reference (ident)\n \t  }\n \n       decl = build_class_reference_decl ();\n-      *chain = perm_tree_cons (decl, ident, NULL_TREE);\n+      *chain = tree_cons (decl, ident, NULL_TREE);\n       return decl;\n     }\n   else\n@@ -2367,7 +2337,7 @@ add_objc_string (ident, section)\n \n   decl = build_objc_string_decl (section);\n \n-  *chain = perm_tree_cons (decl, ident, NULL_TREE);\n+  *chain = tree_cons (decl, ident, NULL_TREE);\n \n   return build_unary_op (ADDR_EXPR, decl, 1);\n }\n@@ -2389,8 +2359,6 @@ build_objc_string_decl (section)\n   else if (section == meth_var_types)\n     sprintf (buf, \"_OBJC_METH_VAR_TYPE_%d\", meth_var_types_idx++);\n \n-  push_obstacks_nochange ();\n-  end_temporary_allocation ();\n   ident = get_identifier (buf);\n \n   decl = build_decl (VAR_DECL, ident, build_array_type (char_type_node, 0));\n@@ -2405,8 +2373,6 @@ build_objc_string_decl (section)\n   make_decl_rtl (decl, 0, 1);\n   pushdecl_top_level (decl);\n \n-  pop_obstacks ();\n-\n   return decl;\n }\n \n@@ -5315,9 +5281,6 @@ build_protocol_reference (p)\n {\n   tree decl, ident, ptype;\n \n-  push_obstacks_nochange ();\n-  end_temporary_allocation ();\n-\n   /* extern struct objc_protocol _OBJC_PROTOCOL_<mumble>; */\n \n   ident = synth_id_with_class_suffix (\"_OBJC_PROTOCOL\", p);\n@@ -5341,7 +5304,6 @@ build_protocol_reference (p)\n    }\n \n   PROTOCOL_FORWARD_DECL (p) = decl;\n-  pop_obstacks ();\n }\n \n tree\n@@ -5676,10 +5638,6 @@ add_class_method (class, method)\n   tree mth;\n   hash hsh;\n \n-  /* We will have allocated the method parameter declarations on the\n-     maybepermanent_obstack.  Need to make sure they stick around!  */\n-  preserve_data ();\n-\n   if (!(mth = lookup_method (CLASS_CLS_METHODS (class), method)))\n     {\n       /* put method on list in reverse order */\n@@ -5722,10 +5680,6 @@ add_instance_method (class, method)\n   tree mth;\n   hash hsh;\n \n-  /* We will have allocated the method parameter declarations on the\n-     maybepermanent_obstack.  Need to make sure they stick around!  */\n-  preserve_data ();\n-\n   if (!(mth = lookup_method (CLASS_NST_METHODS (class), method)))\n     {\n       /* Put method on list in reverse order.  */\n@@ -6129,10 +6083,7 @@ check_protocols (proto_list, type, name)\n /* Make sure that the class CLASS_NAME is defined\n    CODE says which kind of thing CLASS_NAME ought to be.\n    It can be CLASS_INTERFACE_TYPE, CLASS_IMPLEMENTATION_TYPE,\n-   CATEGORY_INTERFACE_TYPE, or CATEGORY_IMPLEMENTATION_TYPE.\n-\n-   If CODE is CLASS_INTERFACE_TYPE, we also do a push_obstacks_nochange\n-   whose matching pop is in continue_class.  */\n+   CATEGORY_INTERFACE_TYPE, or CATEGORY_IMPLEMENTATION_TYPE.  */\n \n tree\n start_class (code, class_name, super_name, protocol_list)\n@@ -6143,12 +6094,6 @@ start_class (code, class_name, super_name, protocol_list)\n {\n   tree class, decl;\n \n-  if (code == CLASS_INTERFACE_TYPE)\n-    {\n-      push_obstacks_nochange ();\n-      end_temporary_allocation ();\n-    }\n-\n   if (!doing_objc_thang)\n     objc_fatal ();\n \n@@ -6178,8 +6123,8 @@ start_class (code, class_name, super_name, protocol_list)\n \t\t      IDENTIFIER_POINTER (class_name));\n \t       return error_mark_node;\n \t     }\n-        implemented_classes = perm_tree_cons (NULL_TREE, class_name,\n-\t\t\t\t\t      implemented_classes);\n+        implemented_classes = tree_cons (NULL_TREE, class_name,\n+\t\t\t\t\t implemented_classes);\n       }\n \n       /* Pre-build the following entities - for speed/convenience.  */\n@@ -7103,12 +7048,7 @@ comp_method_with_proto (method, proto)\n \n   /* Create a function_type node once.  */\n   if (!function_type)\n-    {\n-      push_obstacks_nochange ();\n-      end_temporary_allocation ();\n-      function_type = make_node (FUNCTION_TYPE);\n-      pop_obstacks ();\n-    }\n+    function_type = make_node (FUNCTION_TYPE);\n \n   /* Install argument types - normally set by build_function_type.  */\n   TYPE_ARG_TYPES (function_type) = get_arg_type_list (proto, METHOD_DEF, 0);\n@@ -7130,11 +7070,8 @@ comp_proto_with_proto (proto1, proto2)\n   /* Create a couple function_type node's once.  */\n   if (!function_type1)\n     {\n-      push_obstacks_nochange ();\n-      end_temporary_allocation ();\n       function_type1 = make_node (FUNCTION_TYPE);\n       function_type2 = make_node (FUNCTION_TYPE);\n-      pop_obstacks ();\n     }\n \n   /* Install argument types; normally set by build_function_type.  */\n@@ -7198,7 +7135,7 @@ really_start_method (method, parmlist)\n       method_decl = ret_decl;\n \n       /* Fool the parser into thinking it is starting a function.  */\n-      start_function (decl_specs, method_decl, NULL_TREE, NULL_TREE, 0);\n+      start_function (decl_specs, method_decl, NULL_TREE, NULL_TREE);\n \n       /* Unhook: this has the effect of restoring the abstract declarator.  */\n       TREE_OPERAND (save_expr, 0) = NULL_TREE;\n@@ -7209,7 +7146,7 @@ really_start_method (method, parmlist)\n       TREE_VALUE (TREE_TYPE (method)) = method_decl;\n \n       /* Fool the parser into thinking it is starting a function.  */\n-      start_function (decl_specs, method_decl, NULL_TREE, NULL_TREE, 0);\n+      start_function (decl_specs, method_decl, NULL_TREE, NULL_TREE);\n \n       /* Unhook: this has the effect of restoring the abstract declarator.  */\n       TREE_VALUE (TREE_TYPE (method)) = NULL_TREE;"}, {"sha": "18db5a40cd4e70ec960154faacf00480ad9eb172", "filename": "gcc/objc/objc-parse.c", "status": "modified", "additions": 545, "deletions": 613, "changes": 1158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fobjc%2Fobjc-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fobjc%2Fobjc-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-parse.c?ref=4dd7201eac0b2f44f0f5b91dc2150a68aff5e389"}, {"sha": "79361efb5150468f68b9e5a7d75d5118e53d5f22", "filename": "gcc/objc/objc-parse.y", "status": "modified", "additions": 46, "deletions": 118, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fobjc%2Fobjc-parse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd7201eac0b2f44f0f5b91dc2150a68aff5e389/gcc%2Fobjc%2Fobjc-parse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-parse.y?ref=4dd7201eac0b2f44f0f5b91dc2150a68aff5e389", "patch": "@@ -303,18 +303,15 @@ datadef:\n \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($1); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n         | declmods setspecs notype_initdecls ';'\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_declspecs setspecs initdecls ';'\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2);  }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n         | declmods ';'\n \t  { pedwarn (\"empty declaration\"); }\n \t| typed_declspecs ';'\n@@ -329,7 +326,7 @@ datadef:\n fndef:\n \t  typed_declspecs setspecs declarator\n \t\t{ if (! start_function (current_declspecs, $3,\n-\t\t\t\t\tprefix_attributes, NULL_TREE, 0))\n+\t\t\t\t\tprefix_attributes, NULL_TREE))\n \t\t    YYERROR1;\n \t\t  reinit_parse_for_function (); }\n \t  old_style_parm_decls\n@@ -338,16 +335,14 @@ fndef:\n \t\t{ finish_function (0); \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_declspecs setspecs declarator error\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| declmods setspecs notype_declarator\n \t\t{ if (! start_function (current_declspecs, $3,\n-\t\t\t\t\tprefix_attributes, NULL_TREE, 0))\n+\t\t\t\t\tprefix_attributes, NULL_TREE))\n \t\t    YYERROR1;\n \t\t  reinit_parse_for_function (); }\n \t  old_style_parm_decls\n@@ -356,16 +351,14 @@ fndef:\n \t\t{ finish_function (0); \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| declmods setspecs notype_declarator error\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| setspecs notype_declarator\n \t\t{ if (! start_function (NULL_TREE, $2,\n-\t\t\t\t\tprefix_attributes, NULL_TREE, 0))\n+\t\t\t\t\tprefix_attributes, NULL_TREE))\n \t\t    YYERROR1;\n \t\t  reinit_parse_for_function (); }\n \t  old_style_parm_decls\n@@ -374,13 +367,11 @@ fndef:\n \t\t{ finish_function (0); \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($1); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| setspecs notype_declarator error\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($1); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t;\n \n identifier:\n@@ -904,13 +895,11 @@ datadecl:\n \ttyped_declspecs_no_prefix_attr setspecs initdecls ';'\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| declmods_no_prefix_attr setspecs notype_initdecls ';'\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\t\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_declspecs_no_prefix_attr ';'\n \t\t{ shadow_tag_warned ($1, 1);\n \t\t  pedwarn (\"empty declaration\"); }\n@@ -939,8 +928,7 @@ decls:\n    Maintains a stack of outer-level values of current_declspecs,\n    for the sake of parm declarations nested in function declarators.  */\n setspecs: /* empty */\n-\t\t{ $$ = suspend_momentary ();\n-\t\t  pending_xref_error ();\n+\t\t{ pending_xref_error ();\n \t\t  declspec_stack = tree_cons (prefix_attributes,\n \t\t\t\t\t      current_declspecs,\n \t\t\t\t\t      declspec_stack);\n@@ -957,23 +945,19 @@ decl:\n \ttyped_declspecs setspecs initdecls ';'\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| declmods setspecs notype_initdecls ';'\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_declspecs setspecs nested_function\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| declmods setspecs notype_nested_function\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_declspecs ';'\n \t\t{ shadow_tag ($1); }\n \t| declmods ';'\n@@ -1215,18 +1199,9 @@ any_word:\n init:\n \texpr_no_commas\n \t| '{'\n-\t\t{ really_start_incremental_init (NULL_TREE);\n-\t\t  /* Note that the call to clear_momentary\n-\t\t     is in process_init_element.  */\n-\t\t  push_momentary (); }\n+\t\t{ really_start_incremental_init (NULL_TREE); }\n \t  initlist_maybe_comma '}'\n-\t\t{ $$ = pop_init_level (0);\n-\t\t  if ($$ == error_mark_node\n-\t\t      && ! (yychar == STRING || yychar == CONSTANT))\n-\t\t    pop_momentary ();\n-\t\t  else\n-\t\t    pop_momentary_nofree (); }\n-\n+\t\t{ $$ = pop_init_level (0); }\n \t| error\n \t\t{ $$ = error_mark_node; }\n \t;\n@@ -1285,7 +1260,7 @@ nested_function:\n \n \t\t  push_function_context ();\n \t\t  if (! start_function (current_declspecs, $1,\n-\t\t\t\t\tprefix_attributes, NULL_TREE, 1))\n+\t\t\t\t\tprefix_attributes, NULL_TREE))\n \t\t    {\n \t\t      pop_function_context ();\n \t\t      YYERROR1;\n@@ -1311,7 +1286,7 @@ notype_nested_function:\n \n \t\t  push_function_context ();\n \t\t  if (! start_function (current_declspecs, $1,\n-\t\t\t\t\tprefix_attributes, NULL_TREE, 1))\n+\t\t\t\t\tprefix_attributes, NULL_TREE))\n \t\t    {\n \t\t      pop_function_context ();\n \t\t      YYERROR1;\n@@ -1464,17 +1439,15 @@ structsp:\n \t| union_head identifier\n \t\t{ $$ = xref_tag (UNION_TYPE, $2); }\n \t| enum_head identifier '{'\n-\t\t{ $<itype>3 = suspend_momentary ();\n-\t\t  $$ = start_enum ($2); }\n+\t\t{ $$ = start_enum ($2); }\n \t  enumlist maybecomma_warn '}' maybe_attribute\n-\t\t{ $$= finish_enum ($<ttype>4, nreverse ($5), chainon ($1, $8));\n-\t\t  resume_momentary ($<itype>3); }\n+\t\t{ $$ = finish_enum ($<ttype>4, nreverse ($5),\n+\t\t\t\t    chainon ($1, $8)); }\n \t| enum_head '{'\n-\t\t{ $<itype>2 = suspend_momentary ();\n-\t\t  $$ = start_enum (NULL_TREE); }\n+\t\t{ $$ = start_enum (NULL_TREE); }\n \t  enumlist maybecomma_warn '}' maybe_attribute\n-\t\t{ $$= finish_enum ($<ttype>3, nreverse ($4), chainon ($1, $7));\n-\t\t  resume_momentary ($<itype>2); }\n+\t\t{ $$ = finish_enum ($<ttype>3, nreverse ($4),\n+\t\t\t\t    chainon ($1, $7)); }\n \t| enum_head identifier\n \t\t{ $$ = xref_tag (ENUMERAL_TYPE, $2); }\n \t;\n@@ -1536,8 +1509,7 @@ component_decl:\n \t\t{ $$ = $3;\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_typespecs setspecs save_filename save_lineno maybe_attribute\n \t\t{\n \t\t  /* Support for unnamed structs or unions as members of \n@@ -1550,14 +1522,12 @@ component_decl:\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2);\n \t\t}\n     | nonempty_type_quals setspecs components\n \t\t{ $$ = $3;\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| nonempty_type_quals\n \t\t{ if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids member declarations with no members\");\n@@ -1698,7 +1668,6 @@ pushlevel:  /* empty */\n \t\t{ emit_line_note (input_filename, lineno);\n \t\t  pushlevel (0);\n \t\t  clear_last_expr ();\n-\t\t  push_momentary ();\n \t\t  expand_start_bindings (0);\n \t\t  if (objc_method_context)\n \t\t    add_objc_decls ();\n@@ -1746,27 +1715,15 @@ compstmt_nostart: '}'\n \t| pushlevel maybe_label_decls decls xstmts '}'\n \t\t{ emit_line_note (input_filename, lineno);\n \t\t  expand_end_bindings (getdecls (), 1, 0);\n-\t\t  $$ = poplevel (1, 1, 0);\n-\t\t  if (yychar == CONSTANT || yychar == STRING)\n-\t\t    pop_momentary_nofree ();\n-\t\t  else\n-\t\t    pop_momentary (); }\n+\t\t  $$ = poplevel (1, 1, 0); }\n \t| pushlevel maybe_label_decls error '}'\n \t\t{ emit_line_note (input_filename, lineno);\n \t\t  expand_end_bindings (getdecls (), kept_level_p (), 0);\n-\t\t  $$ = poplevel (kept_level_p (), 0, 0);\n-\t\t  if (yychar == CONSTANT || yychar == STRING)\n-\t\t    pop_momentary_nofree ();\n-\t\t  else\n-\t\t    pop_momentary (); }\n+\t\t  $$ = poplevel (kept_level_p (), 0, 0); }\n \t| pushlevel maybe_label_decls stmts '}'\n \t\t{ emit_line_note (input_filename, lineno);\n \t\t  expand_end_bindings (getdecls (), kept_level_p (), 0);\n-\t\t  $$ = poplevel (kept_level_p (), 0, 0);\n-\t\t  if (yychar == CONSTANT || yychar == STRING)\n-\t\t    pop_momentary_nofree ();\n-\t\t  else\n-\t\t    pop_momentary (); }\n+\t\t  $$ = poplevel (kept_level_p (), 0, 0); }\n \t;\n \n compstmt_primary_start:\n@@ -1877,8 +1834,7 @@ stmt:\n \t\t      || TREE_CODE (TREE_TYPE ($1)) == FUNCTION_TYPE)\n \t\t    $1 = default_conversion ($1);\n #endif\n-\t\t  iterator_expand ($1);\n-\t\t  clear_momentary (); }\n+\t\t  iterator_expand ($1); }\n \t| simple_if ELSE\n \t\t{ c_expand_start_else ();\n \t\t  $<itype>1 = stmt_count;\n@@ -1927,12 +1883,10 @@ stmt:\n \t\t{ emit_line_note (input_filename, lineno);\n \t\t  expand_exit_loop_if_false (NULL_PTR,\n \t\t\t\t\t     truthvalue_conversion ($3));\n-\t\t  expand_end_loop ();\n-\t\t  clear_momentary (); }\n+\t\t  expand_end_loop (); }\n /* This rule is needed to make sure we end every loop we start.  */\n \t| do_stmt_start error\n-\t\t{ expand_end_loop ();\n-\t\t  clear_momentary (); }\n+\t\t{ expand_end_loop (); }\n \t| FOR\n \t  '(' xexpr ';'\n \t\t{ stmt_count++;\n@@ -1959,9 +1913,6 @@ stmt:\n \t\t  if ($6)\n \t\t    expand_exit_loop_if_false (NULL_PTR,\n \t\t\t\t\t       truthvalue_conversion ($6));\n-\t\t  /* Don't let the tree nodes for $9 be discarded by\n-\t\t     clear_momentary during the parsing of the next stmt.  */\n-\t\t  push_momentary ();\n \t\t  $<lineno>7 = lineno;\n \t\t  $<filename>8 = input_filename;\n \t\t  position_after_white_space (); }\n@@ -1971,25 +1922,14 @@ stmt:\n \t\t  expand_loop_continue_here ();\n \t\t  if ($9)\n \t\t    c_expand_expr_stmt ($9);\n-\t\t  if (yychar == CONSTANT || yychar == STRING)\n-\t\t    pop_momentary_nofree ();\n-\t\t  else\n-\t\t    pop_momentary ();\n \t\t  expand_end_loop (); }\n \t| SWITCH '(' expr ')'\n \t\t{ stmt_count++;\n \t\t  emit_line_note ($<filename>-1, $<lineno>0);\n \t\t  c_expand_start_case ($3);\n-\t\t  /* Don't let the tree nodes for $3 be discarded by\n-\t\t     clear_momentary during the parsing of the next stmt.  */\n-\t\t  push_momentary ();\n \t\t  position_after_white_space (); }\n \t  lineno_labeled_stmt\n-\t\t{ expand_end_case ($3);\n-\t\t  if (yychar == CONSTANT || yychar == STRING)\n-\t\t    pop_momentary_nofree ();\n-\t\t  else\n-\t\t    pop_momentary (); }\n+\t\t{ expand_end_case ($3); }\n \t| BREAK ';'\n \t\t{ stmt_count++;\n \t\t  emit_line_note ($<filename>-1, $<lineno>0);\n@@ -2111,10 +2051,6 @@ all_iter_stmt_with_decl:\n \t    emit_line_note (input_filename, lineno);\n \t    expand_end_bindings (getdecls (), 1, 0);\n \t    $<ttype>$ = poplevel (1, 1, 0);\n-\t    if (yychar == CONSTANT || yychar == STRING)\n-\t      pop_momentary_nofree ();\n-\t    else\n-\t      pop_momentary ();\t    \n \t  }\n */\n \n@@ -2317,35 +2253,31 @@ parm:\n \t\t\t\t\t\t\t $4));\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_declspecs setspecs notype_declarator maybe_attribute\n \t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t $3),\n \t\t\t\t\tbuild_tree_list (prefix_attributes,\n \t\t\t\t\t\t\t $4)); \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_declspecs setspecs absdcl maybe_attribute\n \t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t $3),\n \t\t\t\t\tbuild_tree_list (prefix_attributes,\n \t\t\t\t\t\t\t $4));\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| declmods setspecs notype_declarator maybe_attribute\n \t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t $3),\n \t\t\t\t\tbuild_tree_list (prefix_attributes,\n \t\t\t\t\t\t\t $4));\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2);  }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \n \t| declmods setspecs absdcl maybe_attribute\n \t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n@@ -2354,8 +2286,7 @@ parm:\n \t\t\t\t\t\t\t $4));\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2);  }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t;\n \n /* This is used in a function definition\n@@ -2640,14 +2571,12 @@ ivar_decl:\n \t        { $$ = $3;\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| nonempty_type_quals setspecs ivars\n \t\t{ $$ = $3;\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| error\n \t\t{ $$ = NULL_TREE; }\n \t;\n@@ -2834,8 +2763,7 @@ mydecl:\n \ttyped_declspecs setspecs myparms ';'\n \t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n-\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n-\t\t  resume_momentary ($2); }\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| typed_declspecs ';'\n \t\t{ shadow_tag ($1); }\n \t| declmods ';'"}]}