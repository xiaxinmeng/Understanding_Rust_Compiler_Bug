{"sha": "293593b15fbf08603d6fa038e8e4614b41166c9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkzNTkzYjE1ZmJmMDg2MDNkNmZhMDM4ZThlNDYxNGI0MTE2NmM5Zg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2009-10-05T19:29:36Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2009-10-05T19:29:36Z"}, "message": "mips.h (DWARF_FRAME_RETURN_COLUMN): Replace GP_REG_FIRST + 31 with RETURN_ADDR_REGNUM.\n\ngcc/\n\t* config/mips/mips.h (DWARF_FRAME_RETURN_COLUMN): Replace\n\tGP_REG_FIRST + 31 with RETURN_ADDR_REGNUM.\n\t(INCOMING_RETURN_ADDR_RTX): Likewise.\n\t(FUNCTION_PROFILER): Likewise.  Replace GP_REG_FIRST + 1\n\twith AT_REGNUM.\n\t* config/mips/sdemtk.h (FUNCTION_PROFILER): Replace GP_REG_FIRST + 31\n\twith RETURN_ADDR_REGNUM.\n\t(MIPS_SAVE_REG_FOR_PROFILING_P): Likewise.\n\t* config/mips/mips.c (mips16_build_call_stub): Replace\n\tGP_REG_FIRST + 31 with RETURN_ADDR_REGNUM, GP_REG_FIRST + 1\n\twith AT_REGNUM and 31 with RETURN_ADDR_REGNUM.\n\t(mips_print_operand_punctuation): Likewise.\n\t(mips_frame_set): Likewise.\n\t(mips16e_output_save_restore): Likewise.\n\t(mips_cfun_might_clobber_call_saved_reg_p): Likewise.\n\t(mips_save_reg_p): Likewise.\n\t(mips_return_addr): Likewise.\n\t(mips_set_return_address): Likewise.\n\t(mips_direct_save_slot_move_p): Likewise.\n\t(mips_output_function_prologue): Likewise.\n\t(mips_restore_reg): Likewise.\n\t(mips_expand_epilogue): Likewise.\n\t(mips_epilogue_uses): Likewise.\n\t* config/mips/mips.md (RETURN_ADD_REGNUM): Define.\n\t(*mov<mode>_ra): Use it instead of a hard-coded 31.\n\t(clear_hazard_<mode>): Likewise.\n\t(call_internal): Likewise.\n\t(call_internal_direct): Likewise.\n\t(call_direct_split): Likewise.\n\t(call_value_internal): Likewise.\n\t(call_value_split): Likewise.\n\t(call_value_internal_direct): Likewise.\n\t(call_value_direct_split): Likewise.\n\t(call_value_multiple_internal): Likewise.\n\t(call_value_multiple_split): Likewise.\n\nFrom-SVN: r152465", "tree": {"sha": "538112e0a1f89859a9a1b75f907ce39732ba1a11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/538112e0a1f89859a9a1b75f907ce39732ba1a11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/293593b15fbf08603d6fa038e8e4614b41166c9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/293593b15fbf08603d6fa038e8e4614b41166c9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/293593b15fbf08603d6fa038e8e4614b41166c9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/293593b15fbf08603d6fa038e8e4614b41166c9f/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7cf078dceaaf3fac20ae6cad5077f9cec6256c8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cf078dceaaf3fac20ae6cad5077f9cec6256c8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cf078dceaaf3fac20ae6cad5077f9cec6256c8f"}], "stats": {"total": 107, "additions": 73, "deletions": 34}, "files": [{"sha": "18407265f12a63655b52c509a32350c1363468db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/293593b15fbf08603d6fa038e8e4614b41166c9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/293593b15fbf08603d6fa038e8e4614b41166c9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=293593b15fbf08603d6fa038e8e4614b41166c9f", "patch": "@@ -1,3 +1,41 @@\n+2009-10-05  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/mips/mips.h (DWARF_FRAME_RETURN_COLUMN): Replace\n+\tGP_REG_FIRST + 31 with RETURN_ADDR_REGNUM.\n+\t(INCOMING_RETURN_ADDR_RTX): Likewise.\n+\t(FUNCTION_PROFILER): Likewise.  Replace GP_REG_FIRST + 1\n+\twith AT_REGNUM.\n+\t* config/mips/sdemtk.h (FUNCTION_PROFILER): Replace GP_REG_FIRST + 31\n+\twith RETURN_ADDR_REGNUM.\n+\t(MIPS_SAVE_REG_FOR_PROFILING_P): Likewise.\n+\t* config/mips/mips.c (mips16_build_call_stub): Replace\n+\tGP_REG_FIRST + 31 with RETURN_ADDR_REGNUM, GP_REG_FIRST + 1\n+\twith AT_REGNUM and 31 with RETURN_ADDR_REGNUM.\n+\t(mips_print_operand_punctuation): Likewise.\n+\t(mips_frame_set): Likewise.\n+\t(mips16e_output_save_restore): Likewise.\n+\t(mips_cfun_might_clobber_call_saved_reg_p): Likewise.\n+\t(mips_save_reg_p): Likewise.\n+\t(mips_return_addr): Likewise.\n+\t(mips_set_return_address): Likewise.\n+\t(mips_direct_save_slot_move_p): Likewise.\n+\t(mips_output_function_prologue): Likewise.\n+\t(mips_restore_reg): Likewise.\n+\t(mips_expand_epilogue): Likewise.\n+\t(mips_epilogue_uses): Likewise.\n+\t* config/mips/mips.md (RETURN_ADD_REGNUM): Define.\n+\t(*mov<mode>_ra): Use it instead of a hard-coded 31.\n+\t(clear_hazard_<mode>): Likewise.\n+\t(call_internal): Likewise.\n+\t(call_internal_direct): Likewise.\n+\t(call_direct_split): Likewise.\n+\t(call_value_internal): Likewise.\n+\t(call_value_split): Likewise.\n+\t(call_value_internal_direct): Likewise.\n+\t(call_value_direct_split): Likewise.\n+\t(call_value_multiple_internal): Likewise.\n+\t(call_value_multiple_split): Likewise.\n+\n 2009-10-05  Eric Botcazou  <ebotcazou@adacore.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "cbe84478d2c37e18eeb9c20776c6b3809d307ee6", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/293593b15fbf08603d6fa038e8e4614b41166c9f/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/293593b15fbf08603d6fa038e8e4614b41166c9f/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=293593b15fbf08603d6fa038e8e4614b41166c9f", "patch": "@@ -6243,7 +6243,7 @@ mips16_build_call_stub (rtx retval, rtx *fn_ptr, rtx args_size, int fp_code)\n \t     The stub's caller knows that $18 might be clobbered, even though\n \t     $18 is usually a call-saved register.  */\n \t  fprintf (asm_out_file, \"\\tmove\\t%s,%s\\n\",\n-\t\t   reg_names[GP_REG_FIRST + 18], reg_names[GP_REG_FIRST + 31]);\n+\t\t   reg_names[GP_REG_FIRST + 18], reg_names[RETURN_ADDR_REGNUM]);\n \t  output_asm_insn (MIPS_CALL (\"jal\", &fn, 0, -1), &fn);\n \n \t  /* Move the result from floating-point registers to\n@@ -7276,7 +7276,7 @@ mips_print_operand_punctuation (FILE *file, int ch)\n       break;\n \n     case '@':\n-      fputs (reg_names[GP_REG_FIRST + 1], file);\n+      fputs (reg_names[AT_REGNUM], file);\n       break;\n \n     case '^':\n@@ -8144,8 +8144,8 @@ mips_frame_set (rtx mem, rtx reg)\n   /* If we're saving the return address register and the DWARF return\n      address column differs from the hard register number, adjust the\n      note reg to refer to the former.  */\n-  if (REGNO (reg) == GP_REG_FIRST + 31\n-      && DWARF_FRAME_RETURN_COLUMN != GP_REG_FIRST + 31)\n+  if (REGNO (reg) == RETURN_ADDR_REGNUM\n+      && DWARF_FRAME_RETURN_COLUMN != RETURN_ADDR_REGNUM)\n     reg = gen_rtx_REG (GET_MODE (reg), DWARF_FRAME_RETURN_COLUMN);\n \n   set = gen_rtx_SET (VOIDmode, mem, reg);\n@@ -8595,8 +8595,8 @@ mips16e_output_save_restore (rtx pattern, HOST_WIDE_INT adjust)\n \t\t\t\t    mips16e_a0_a3_regs[end - 1]);\n \n   /* Save or restore $31.  */\n-  if (BITSET_P (info.mask, 31))\n-    s += sprintf (s, \",%s\", reg_names[GP_REG_FIRST + 31]);\n+  if (BITSET_P (info.mask, RETURN_ADDR_REGNUM))\n+    s += sprintf (s, \",%s\", reg_names[RETURN_ADDR_REGNUM]);\n \n   return buffer;\n }\n@@ -8764,7 +8764,7 @@ mips_global_pointer (void)\n   return GLOBAL_POINTER_REGNUM;\n }\n \n-/* Return true if current function's prologue must load the global\n+/* Return true if the current function's prologue must load the global\n    pointer value into pic_offset_table_rtx and store the same value in\n    the function's cprestore slot (if any).\n \n@@ -8969,7 +8969,7 @@ mips_cfun_might_clobber_call_saved_reg_p (unsigned int regno)\n   /* If a MIPS16 function returns a value in FPRs, its epilogue\n      will need to call an external libgcc routine.  This yet-to-be\n      generated call_insn will clobber $31.  */\n-  if (regno == GP_REG_FIRST + 31 && mips16_cfun_returns_in_fpr_p ())\n+  if (regno == RETURN_ADDR_REGNUM && mips16_cfun_returns_in_fpr_p ())\n     return true;\n \n   /* If REGNO is ordinarily call-clobbered, we must assume that any\n@@ -9003,7 +9003,7 @@ mips_save_reg_p (unsigned int regno)\n \n   /* We need to save the incoming return address if __builtin_eh_return\n      is being used to set a different return address.  */\n-  if (regno == GP_REG_FIRST + 31 && crtl->calls_eh_return)\n+  if (regno == RETURN_ADDR_REGNUM && crtl->calls_eh_return)\n     return true;\n \n   return false;\n@@ -9378,7 +9378,7 @@ mips_return_addr (int count, rtx frame ATTRIBUTE_UNUSED)\n   if (count != 0)\n     return const0_rtx;\n \n-  return get_hard_reg_initial_val (Pmode, GP_REG_FIRST + 31);\n+  return get_hard_reg_initial_val (Pmode, RETURN_ADDR_REGNUM);\n }\n \n /* Emit code to change the current function's return address to\n@@ -9390,7 +9390,7 @@ mips_set_return_address (rtx address, rtx scratch)\n {\n   rtx slot_address;\n \n-  gcc_assert (BITSET_P (cfun->machine->frame.mask, 31));\n+  gcc_assert (BITSET_P (cfun->machine->frame.mask, RETURN_ADDR_REGNUM));\n   slot_address = mips_add_offset (scratch, stack_pointer_rtx,\n \t\t\t\t  cfun->machine->frame.gp_sp_offset);\n   mips_emit_move (gen_frame_mem (GET_MODE (address), slot_address), address);\n@@ -9604,7 +9604,7 @@ static bool\n mips_direct_save_slot_move_p (unsigned int regno, rtx mem, bool load_p)\n {\n   /* There is a specific MIPS16 instruction for saving $31 to the stack.  */\n-  if (TARGET_MIPS16 && !load_p && regno == GP_REG_FIRST + 31)\n+  if (TARGET_MIPS16 && !load_p && regno == RETURN_ADDR_REGNUM)\n     return false;\n \n   return mips_secondary_reload_class (REGNO_REG_CLASS (regno),\n@@ -9741,7 +9741,7 @@ mips_output_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n \t       (frame_pointer_needed\n \t\t? frame->total_size - frame->hard_frame_pointer_offset\n \t\t: frame->total_size),\n-\t       reg_names[GP_REG_FIRST + 31],\n+\t       reg_names[RETURN_ADDR_REGNUM],\n \t       frame->var_size,\n \t       frame->num_gp, frame->num_fp,\n \t       frame->args_size,\n@@ -10184,7 +10184,7 @@ mips_restore_reg (rtx reg, rtx mem)\n {\n   /* There's no MIPS16 instruction to load $31 directly.  Load into\n      $7 instead and adjust the return insn appropriately.  */\n-  if (TARGET_MIPS16 && REGNO (reg) == GP_REG_FIRST + 31)\n+  if (TARGET_MIPS16 && REGNO (reg) == RETURN_ADDR_REGNUM)\n     reg = gen_rtx_REG (GET_MODE (reg), GP_REG_FIRST + 7);\n \n   mips_emit_save_slot_move (reg, mem, MIPS_EPILOGUE_TEMP (GET_MODE (reg)));\n@@ -10399,10 +10399,10 @@ mips_expand_epilogue (bool sibcall_p)\n \t     address into $7 rather than $31.  */\n \t  if (TARGET_MIPS16\n \t      && !GENERATE_MIPS16E_SAVE_RESTORE\n-\t      && BITSET_P (frame->mask, 31))\n+\t      && BITSET_P (frame->mask, RETURN_ADDR_REGNUM))\n \t    regno = GP_REG_FIRST + 7;\n \t  else\n-\t    regno = GP_REG_FIRST + 31;\n+\t    regno = RETURN_ADDR_REGNUM;\n \t  emit_jump_insn (gen_return_internal (gen_rtx_REG (Pmode, regno)));\n \t}\n     }\n@@ -15830,7 +15830,7 @@ mips_epilogue_uses (unsigned int regno)\n   /* Say that the epilogue uses the return address register.  Note that\n      in the case of sibcalls, the values \"used by the epilogue\" are\n      considered live at the start of the called function.  */\n-  if (regno == 31)\n+  if (regno == RETURN_ADDR_REGNUM)\n     return true;\n \n   /* If using a GOT, say that the epilogue also uses GOT_VERSION_REGNUM."}, {"sha": "b17512f2aa9beaee84e6c335027bef893f2d6531", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/293593b15fbf08603d6fa038e8e4614b41166c9f/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/293593b15fbf08603d6fa038e8e4614b41166c9f/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=293593b15fbf08603d6fa038e8e4614b41166c9f", "patch": "@@ -1311,10 +1311,10 @@ enum mips_code_readable_setting {\n #define DWARF_FRAME_REGNUM(REGNO) mips_dwarf_regno[REGNO]\n \n /* The DWARF 2 CFA column which tracks the return address.  */\n-#define DWARF_FRAME_RETURN_COLUMN (GP_REG_FIRST + 31)\n+#define DWARF_FRAME_RETURN_COLUMN RETURN_ADDR_REGNUM\n \n /* Before the prologue, RA lives in r31.  */\n-#define INCOMING_RETURN_ADDR_RTX  gen_rtx_REG (VOIDmode, GP_REG_FIRST + 31)\n+#define INCOMING_RETURN_ADDR_RTX gen_rtx_REG (VOIDmode, RETURN_ADDR_REGNUM)\n \n /* Describe how we implement __builtin_eh_return.  */\n #define EH_RETURN_DATA_REGNO(N) \\\n@@ -2386,7 +2386,7 @@ typedef struct mips_args {\n     }\t\t\t\t\t\t\t\t\t\\\n   mips_push_asm_switch (&mips_noat);\t\t\t\t\t\\\n   fprintf (FILE, \"\\tmove\\t%s,%s\\t\\t# save current return address\\n\",\t\\\n-\t   reg_names[GP_REG_FIRST + 1], reg_names[GP_REG_FIRST + 31]);\t\\\n+\t   reg_names[AT_REGNUM], reg_names[RETURN_ADDR_REGNUM]);\t\\\n   /* _mcount treats $2 as the static chain register.  */\t\t\\\n   if (cfun->static_chain_decl != NULL)\t\t\t\t\t\\\n     fprintf (FILE, \"\\tmove\\t%s,%s\\n\", reg_names[2],\t\t\t\\"}, {"sha": "2d11ed07c5fccee57aaba406a4dd4caa5e2b3b3a", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/293593b15fbf08603d6fa038e8e4614b41166c9f/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/293593b15fbf08603d6fa038e8e4614b41166c9f/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=293593b15fbf08603d6fa038e8e4614b41166c9f", "patch": "@@ -82,6 +82,7 @@\n    (UNSPEC_ADDRESS_FIRST\t100)\n \n    (TLS_GET_TP_REGNUM\t\t3)\n+   (RETURN_ADDR_REGNUM\t\t31)\n    (CPRESTORE_SLOT_REGNUM\t76)\n    (GOT_VERSION_REGNUM\t\t79)\n \n@@ -4011,7 +4012,7 @@\n \n (define_insn \"*mov<mode>_ra\"\n   [(set (match_operand:GPR 0 \"stack_operand\" \"=m\")\n-\t(reg:GPR 31))]\n+\t(reg:GPR RETURN_ADDR_REGNUM))]\n   \"TARGET_MIPS16\"\n   \"<store>\\t$31,%0\"\n   [(set_attr \"move_type\" \"store\")\n@@ -4938,7 +4939,7 @@\n \n (define_insn \"clear_hazard_<mode>\"\n   [(unspec_volatile [(const_int 0)] UNSPEC_CLEAR_HAZARD)\n-   (clobber (reg:P 31))]\n+   (clobber (reg:P RETURN_ADDR_REGNUM))]\n   \"ISA_HAS_SYNCI\"\n {\n   return \"%(%<bal\\t1f\\n\"\n@@ -6123,7 +6124,7 @@\n (define_insn_and_split \"call_internal\"\n   [(call (mem:SI (match_operand 0 \"call_insn_operand\" \"c,S\"))\n \t (match_operand 1 \"\" \"\"))\n-   (clobber (reg:SI 31))]\n+   (clobber (reg:SI RETURN_ADDR_REGNUM))]\n   \"\"\n   { return TARGET_SPLIT_CALLS ? \"#\" : MIPS_CALL (\"jal\", operands, 0, 1); }\n   \"reload_completed && TARGET_SPLIT_CALLS && (operands[2] = insn)\"\n@@ -6137,7 +6138,7 @@\n (define_insn \"call_split\"\n   [(call (mem:SI (match_operand 0 \"call_insn_operand\" \"cS\"))\n \t (match_operand 1 \"\" \"\"))\n-   (clobber (reg:SI 31))\n+   (clobber (reg:SI RETURN_ADDR_REGNUM))\n    (clobber (reg:SI 28))]\n   \"TARGET_SPLIT_CALLS\"\n   { return MIPS_CALL (\"jal\", operands, 0, 1); }\n@@ -6151,7 +6152,7 @@\n   [(call (mem:SI (match_operand 0 \"const_call_insn_operand\"))\n \t (match_operand 1))\n    (const_int 1)\n-   (clobber (reg:SI 31))]\n+   (clobber (reg:SI RETURN_ADDR_REGNUM))]\n   \"\"\n   { return TARGET_SPLIT_CALLS ? \"#\" : MIPS_CALL (\"jal\", operands, 0, -1); }\n   \"reload_completed && TARGET_SPLIT_CALLS && (operands[2] = insn)\"\n@@ -6167,7 +6168,7 @@\n   [(call (mem:SI (match_operand 0 \"const_call_insn_operand\"))\n \t (match_operand 1))\n    (const_int 1)\n-   (clobber (reg:SI 31))\n+   (clobber (reg:SI RETURN_ADDR_REGNUM))\n    (clobber (reg:SI 28))]\n   \"TARGET_SPLIT_CALLS\"\n   { return MIPS_CALL (\"jal\", operands, 0, -1); }\n@@ -6190,7 +6191,7 @@\n   [(set (match_operand 0 \"register_operand\" \"\")\n         (call (mem:SI (match_operand 1 \"call_insn_operand\" \"c,S\"))\n               (match_operand 2 \"\" \"\")))\n-   (clobber (reg:SI 31))]\n+   (clobber (reg:SI RETURN_ADDR_REGNUM))]\n   \"\"\n   { return TARGET_SPLIT_CALLS ? \"#\" : MIPS_CALL (\"jal\", operands, 1, 2); }\n   \"reload_completed && TARGET_SPLIT_CALLS && (operands[3] = insn)\"\n@@ -6207,7 +6208,7 @@\n   [(set (match_operand 0 \"register_operand\" \"\")\n         (call (mem:SI (match_operand 1 \"call_insn_operand\" \"cS\"))\n               (match_operand 2 \"\" \"\")))\n-   (clobber (reg:SI 31))\n+   (clobber (reg:SI RETURN_ADDR_REGNUM))\n    (clobber (reg:SI 28))]\n   \"TARGET_SPLIT_CALLS\"\n   { return MIPS_CALL (\"jal\", operands, 1, 2); }\n@@ -6219,7 +6220,7 @@\n         (call (mem:SI (match_operand 1 \"const_call_insn_operand\"))\n               (match_operand 2)))\n    (const_int 1)\n-   (clobber (reg:SI 31))]\n+   (clobber (reg:SI RETURN_ADDR_REGNUM))]\n   \"\"\n   { return TARGET_SPLIT_CALLS ? \"#\" : MIPS_CALL (\"jal\", operands, 1, -1); }\n   \"reload_completed && TARGET_SPLIT_CALLS && (operands[3] = insn)\"\n@@ -6237,7 +6238,7 @@\n         (call (mem:SI (match_operand 1 \"const_call_insn_operand\"))\n               (match_operand 2)))\n    (const_int 1)\n-   (clobber (reg:SI 31))\n+   (clobber (reg:SI RETURN_ADDR_REGNUM))\n    (clobber (reg:SI 28))]\n   \"TARGET_SPLIT_CALLS\"\n   { return MIPS_CALL (\"jal\", operands, 1, -1); }\n@@ -6251,7 +6252,7 @@\n    (set (match_operand 3 \"register_operand\" \"\")\n \t(call (mem:SI (match_dup 1))\n \t      (match_dup 2)))\n-   (clobber (reg:SI 31))]\n+   (clobber (reg:SI RETURN_ADDR_REGNUM))]\n   \"\"\n   { return TARGET_SPLIT_CALLS ? \"#\" : MIPS_CALL (\"jal\", operands, 1, 2); }\n   \"reload_completed && TARGET_SPLIT_CALLS && (operands[4] = insn)\"\n@@ -6271,7 +6272,7 @@\n    (set (match_operand 3 \"register_operand\" \"\")\n \t(call (mem:SI (match_dup 1))\n \t      (match_dup 2)))\n-   (clobber (reg:SI 31))\n+   (clobber (reg:SI RETURN_ADDR_REGNUM))\n    (clobber (reg:SI 28))]\n   \"TARGET_SPLIT_CALLS\"\n   { return MIPS_CALL (\"jal\", operands, 1, 2); }"}, {"sha": "a9bb85e82b6e240df6b18cc9609a09fa4ac0a3b9", "filename": "gcc/config/mips/sdemtk.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/293593b15fbf08603d6fa038e8e4614b41166c9f/gcc%2Fconfig%2Fmips%2Fsdemtk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/293593b15fbf08603d6fa038e8e4614b41166c9f/gcc%2Fconfig%2Fmips%2Fsdemtk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsdemtk.h?ref=293593b15fbf08603d6fa038e8e4614b41166c9f", "patch": "@@ -101,7 +101,7 @@ extern void mips_sync_icache (void *beg, unsigned long len);\n     /* MIPS16 code passes saved $ra in $v1 instead of $at.  */\t\t\\\n     fprintf (FILE, \"\\tmove\\t%s,%s\\n\",\t\t\t\t\t\\\n \t     reg_names[GP_REG_FIRST + (TARGET_MIPS16 ? 3 : 1)],\t\t\\\n-\t     reg_names[GP_REG_FIRST + 31]);\t\t\t\t\\\n+\t     reg_names[RETURN_ADDR_REGNUM]);\t\t\t\t\\\n     fprintf (FILE, \"\\tjal\\t_mcount\\n\");\t\t\t\t\t\\\n     mips_pop_asm_switch (&mips_noat);\t\t\t\t\t\\\n     /* _mcount treats $2 as the static chain register.  */\t\t\\\n@@ -112,4 +112,4 @@ extern void mips_sync_icache (void *beg, unsigned long len);\n \n /* ...nor does the call sequence preserve $31.  */\n #undef MIPS_SAVE_REG_FOR_PROFILING_P\n-#define MIPS_SAVE_REG_FOR_PROFILING_P(REGNO) ((REGNO) == GP_REG_FIRST + 31)\n+#define MIPS_SAVE_REG_FOR_PROFILING_P(REGNO) ((REGNO) == RETURN_ADDR_REGNUM)"}]}