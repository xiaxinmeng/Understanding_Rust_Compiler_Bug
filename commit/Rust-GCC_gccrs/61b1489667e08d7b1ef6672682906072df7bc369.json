{"sha": "61b1489667e08d7b1ef6672682906072df7bc369", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFiMTQ4OTY2N2UwOGQ3YjFlZjY2NzI2ODI5MDYwNzJkZjdiYzM2OQ==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-09-25T09:51:49Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-09-25T09:51:49Z"}, "message": "[multiple changes]\n\n2017-09-25  Yannick Moy  <moy@adacore.com>\n\n\t* exp_spark.adb (Expand_SPARK_Indexed_Component,\n\tExpand_SPARK_Selected_Component): New procedures to insert explicit\n\tdereference if required.\n\t(Expand_SPARK): Call the new procedures.\n\n2017-09-25  Patrick Bernardi  <bernardi@adacore.com>\n\n\t* libgnat/a-stwiun.adb, libgnat/s-stchop__vxworks.adb,\n\tlibgnat/g-socthi__vxworks.ads, libgnat/a-stzunb.adb,\n\tlibgnat/a-strunb.adb, libgnarl/s-osinte__lynxos178.adb,\n\tlibgnarl/s-intman__vxworks.adb, libgnarl/s-osinte__darwin.adb,\n\tlibgnarl/a-exetim__darwin.adb: Removed ineffective use-clauses.\n\n2017-09-25  Vasiliy Fofanov  <fofanov@adacore.com>\n\n\t* adaint.c (win32_wait): Properly handle error and take into account\n\tthe WIN32 limitation on the number of simultaneous wait objects.\n\n2017-09-25  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch3.adb (Constant_Redeclaration): Do not insert a call to the\n\tinvariant procedure in GNATprove mode.\n\t* sem_ch5.adb (Analyze_Assignment): Likewise.\n\nFrom-SVN: r253143", "tree": {"sha": "c134926fb8862b14d9968c9e1d5623f67a9d56e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c134926fb8862b14d9968c9e1d5623f67a9d56e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61b1489667e08d7b1ef6672682906072df7bc369", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61b1489667e08d7b1ef6672682906072df7bc369", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61b1489667e08d7b1ef6672682906072df7bc369", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61b1489667e08d7b1ef6672682906072df7bc369/comments", "author": null, "committer": null, "parents": [{"sha": "871a0725ddee3c9ef8cf827cb85ce08e150fec44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/871a0725ddee3c9ef8cf827cb85ce08e150fec44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/871a0725ddee3c9ef8cf827cb85ce08e150fec44"}], "stats": {"total": 140, "additions": 117, "deletions": 23}, "files": [{"sha": "28fa8f18e3052c155fe3a086ceafff0a4fec626c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=61b1489667e08d7b1ef6672682906072df7bc369", "patch": "@@ -1,3 +1,29 @@\n+2017-09-25  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK_Indexed_Component,\n+\tExpand_SPARK_Selected_Component): New procedures to insert explicit\n+\tdereference if required.\n+\t(Expand_SPARK): Call the new procedures.\n+\n+2017-09-25  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* libgnat/a-stwiun.adb, libgnat/s-stchop__vxworks.adb,\n+\tlibgnat/g-socthi__vxworks.ads, libgnat/a-stzunb.adb,\n+\tlibgnat/a-strunb.adb, libgnarl/s-osinte__lynxos178.adb,\n+\tlibgnarl/s-intman__vxworks.adb, libgnarl/s-osinte__darwin.adb,\n+\tlibgnarl/a-exetim__darwin.adb: Removed ineffective use-clauses.\n+\n+2017-09-25  Vasiliy Fofanov  <fofanov@adacore.com>\n+\n+\t* adaint.c (win32_wait): Properly handle error and take into account\n+\tthe WIN32 limitation on the number of simultaneous wait objects.\n+\n+2017-09-25  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch3.adb (Constant_Redeclaration): Do not insert a call to the\n+\tinvariant procedure in GNATprove mode.\n+\t* sem_ch5.adb (Analyze_Assignment): Likewise.\n+\n 2017-09-25  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* adabkend.adb (Call_Back_End): Fix wording of \"front-end\" and"}, {"sha": "10325b0f1d05418c3485eb5409752743dd0a4c34", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=61b1489667e08d7b1ef6672682906072df7bc369", "patch": "@@ -2551,6 +2551,7 @@ win32_wait (int *status)\n   DWORD res;\n   int hl_len;\n   int found;\n+  int pos;\n \n  START_WAIT:\n \n@@ -2563,7 +2564,15 @@ win32_wait (int *status)\n   /* -------------------- critical section -------------------- */\n   EnterCS();\n \n+  /* ??? We can't wait for more than MAXIMUM_WAIT_OBJECTS due to a Win32\n+     limitation */\n+  if (plist_length < MAXIMUM_WAIT_OBJECTS)\n   hl_len = plist_length;\n+  else\n+    {\n+      errno = EINVAL;\n+      return -1;\n+    }\n \n #ifdef CERT\n   hl = (HANDLE *) xmalloc (sizeof (HANDLE) * hl_len);\n@@ -2586,6 +2595,13 @@ win32_wait (int *status)\n \n   res = WaitForMultipleObjects (hl_len, hl, FALSE, INFINITE);\n \n+  /* If there was an error, exit now */\n+  if (res == WAIT_FAILED)\n+    {\n+      errno = EINVAL;\n+      return -1;\n+    }\n+\n   /* if the ProcListEvt has been signaled then the list of processes has been\n      updated to add or remove a handle, just loop over */\n \n@@ -2596,9 +2612,17 @@ win32_wait (int *status)\n       goto START_WAIT;\n     }\n \n-  h = hl[res - WAIT_OBJECT_0];\n+  /* Handle two distinct groups of return codes: finished waits and abandoned\n+     waits */\n+\n+  if (res < WAIT_ABANDONED_0)\n+    pos = res - WAIT_OBJECT_0;\n+  else\n+    pos = res - WAIT_ABANDONED_0;\n+\n+  h = hl[pos];\n   GetExitCodeProcess (h, &exitcode);\n-  pid = pidl [res - WAIT_OBJECT_0];\n+  pid = pidl [pos];\n \n   found = __gnat_win32_remove_handle (h, -1);\n "}, {"sha": "811033e9d5bb992c5b92a3f7b2f9c2824ab5ad05", "filename": "gcc/ada/exp_spark.adb", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Fexp_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Fexp_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_spark.adb?ref=61b1489667e08d7b1ef6672682906072df7bc369", "patch": "@@ -58,6 +58,9 @@ package body Exp_SPARK is\n    procedure Expand_SPARK_Freeze_Type (E : Entity_Id);\n    --  Build the DIC procedure of a type when needed, if not already done\n \n+   procedure Expand_SPARK_Indexed_Component (N : Node_Id);\n+   --  Insert explicit dereference if required\n+\n    procedure Expand_SPARK_N_Object_Declaration (N : Node_Id);\n    --  Perform object-declaration-specific expansion\n \n@@ -67,6 +70,9 @@ package body Exp_SPARK is\n    procedure Expand_SPARK_Op_Ne (N : Node_Id);\n    --  Rewrite operator /= based on operator = when defined explicitly\n \n+   procedure Expand_SPARK_Selected_Component (N : Node_Id);\n+   --  Insert explicit dereference if required\n+\n    ------------------\n    -- Expand_SPARK --\n    ------------------\n@@ -138,6 +144,12 @@ package body Exp_SPARK is\n                Expand_SPARK_Freeze_Type (Entity (N));\n             end if;\n \n+         when N_Indexed_Component =>\n+            Expand_SPARK_Indexed_Component (N);\n+\n+         when N_Selected_Component =>\n+            Expand_SPARK_Selected_Component (N);\n+\n          --  In SPARK mode, no other constructs require expansion\n \n          when others =>\n@@ -264,6 +276,20 @@ package body Exp_SPARK is\n       end if;\n    end Expand_SPARK_Freeze_Type;\n \n+   ------------------------------------\n+   -- Expand_SPARK_Indexed_Component --\n+   ------------------------------------\n+\n+   procedure Expand_SPARK_Indexed_Component (N : Node_Id) is\n+      P   : constant Node_Id    := Prefix (N);\n+      T   : constant Entity_Id  := Etype (P);\n+   begin\n+      if Is_Access_Type (T) then\n+         Insert_Explicit_Dereference (P);\n+         Analyze_And_Resolve (P, Designated_Type (T));\n+      end if;\n+   end Expand_SPARK_Indexed_Component;\n+\n    ---------------------------------------\n    -- Expand_SPARK_N_Object_Declaration --\n    ---------------------------------------\n@@ -445,4 +471,31 @@ package body Exp_SPARK is\n       end if;\n    end Expand_SPARK_Potential_Renaming;\n \n+   -------------------------------------\n+   -- Expand_SPARK_Selected_Component --\n+   -------------------------------------\n+\n+   procedure Expand_SPARK_Selected_Component (N : Node_Id) is\n+      P    : constant Node_Id   := Prefix (N);\n+      Ptyp : constant Entity_Id := Underlying_Type (Etype (P));\n+   begin\n+      if Present (Ptyp)\n+        and then Is_Access_Type (Ptyp)\n+      then\n+         --  First set prefix type to proper access type, in case it currently\n+         --  has a private (non-access) view of this type.\n+\n+         Set_Etype (P, Ptyp);\n+\n+         Insert_Explicit_Dereference (P);\n+         Analyze_And_Resolve (P, Designated_Type (Ptyp));\n+\n+         if Ekind (Etype (P)) = E_Private_Subtype\n+           and then Is_For_Access_Subtype (Etype (P))\n+         then\n+            Set_Etype (P, Base_Type (Etype (P)));\n+         end if;\n+      end if;\n+   end Expand_SPARK_Selected_Component;\n+\n end Exp_SPARK;"}, {"sha": "cb3a55adf0c84daba31ea7ddf465021301ff8f79", "filename": "gcc/ada/libgnarl/a-exetim__darwin.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Flibgnarl%2Fa-exetim__darwin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Flibgnarl%2Fa-exetim__darwin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fa-exetim__darwin.adb?ref=61b1489667e08d7b1ef6672682906072df7bc369", "patch": "@@ -189,7 +189,6 @@ package body Ada.Execution_Time is\n       SC : out Ada.Real_Time.Seconds_Count;\n       TS : out Ada.Real_Time.Time_Span)\n    is\n-      use type Ada.Real_Time.Time;\n    begin\n       Ada.Real_Time.Split (Ada.Real_Time.Time (T), SC, TS);\n    end Split;"}, {"sha": "62f9711bb643f92549191941ea8283ee43c81d03", "filename": "gcc/ada/libgnarl/s-intman__vxworks.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Flibgnarl%2Fs-intman__vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Flibgnarl%2Fs-intman__vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-intman__vxworks.adb?ref=61b1489667e08d7b1ef6672682906072df7bc369", "patch": "@@ -37,7 +37,6 @@\n package body System.Interrupt_Management is\n \n    use System.OS_Interface;\n-   use type Interfaces.C.int;\n \n    -----------------------\n    -- Local Subprograms --"}, {"sha": "880c9b4fd6241e661603a51a689cd863364e31c5", "filename": "gcc/ada/libgnarl/s-osinte__darwin.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Flibgnarl%2Fs-osinte__darwin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Flibgnarl%2Fs-osinte__darwin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__darwin.adb?ref=61b1489667e08d7b1ef6672682906072df7bc369", "patch": "@@ -39,7 +39,6 @@ with Interfaces.C.Extensions;\n \n package body System.OS_Interface is\n    use Interfaces.C;\n-   use Interfaces.C.Extensions;\n \n    -----------------\n    -- To_Duration --"}, {"sha": "a6dc986750d993639dc2e6aa472c2a24d05e11df", "filename": "gcc/ada/libgnarl/s-osinte__lynxos178.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Flibgnarl%2Fs-osinte__lynxos178.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Flibgnarl%2Fs-osinte__lynxos178.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__lynxos178.adb?ref=61b1489667e08d7b1ef6672682906072df7bc369", "patch": "@@ -37,8 +37,6 @@ pragma Polling (Off);\n \n package body System.OS_Interface is\n \n-   use Interfaces.C;\n-\n    ------------------\n    --  Current_CPU --\n    ------------------"}, {"sha": "0366806ed99e90e797cefd203f104d7c0ebc1778", "filename": "gcc/ada/libgnat/a-strunb.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Flibgnat%2Fa-strunb.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Flibgnat%2Fa-strunb.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strunb.adb?ref=61b1489667e08d7b1ef6672682906072df7bc369", "patch": "@@ -35,8 +35,6 @@ with Ada.Unchecked_Deallocation;\n \n package body Ada.Strings.Unbounded is\n \n-   use Ada.Finalization;\n-\n    ---------\n    -- \"&\" --\n    ---------"}, {"sha": "2449822b0311c8e4f623d6519df312a874924497", "filename": "gcc/ada/libgnat/a-stwiun.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Flibgnat%2Fa-stwiun.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Flibgnat%2Fa-stwiun.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stwiun.adb?ref=61b1489667e08d7b1ef6672682906072df7bc369", "patch": "@@ -35,8 +35,6 @@ with Ada.Unchecked_Deallocation;\n \n package body Ada.Strings.Wide_Unbounded is\n \n-   use Ada.Finalization;\n-\n    ---------\n    -- \"&\" --\n    ---------"}, {"sha": "2492fecee4fa0c21aa7af806c300803047851bbf", "filename": "gcc/ada/libgnat/a-stzunb.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Flibgnat%2Fa-stzunb.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Flibgnat%2Fa-stzunb.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stzunb.adb?ref=61b1489667e08d7b1ef6672682906072df7bc369", "patch": "@@ -35,8 +35,6 @@ with Ada.Unchecked_Deallocation;\n \n package body Ada.Strings.Wide_Wide_Unbounded is\n \n-   use Ada.Finalization;\n-\n    ---------\n    -- \"&\" --\n    ---------"}, {"sha": "ac8eddfa26deea6354d6356a472127e79105ed36", "filename": "gcc/ada/libgnat/g-socthi__vxworks.ads", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Flibgnat%2Fg-socthi__vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Flibgnat%2Fg-socthi__vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-socthi__vxworks.ads?ref=61b1489667e08d7b1ef6672682906072df7bc369", "patch": "@@ -49,8 +49,6 @@ package GNAT.Sockets.Thin is\n \n    package C renames Interfaces.C;\n \n-   use type System.CRTL.ssize_t;\n-\n    function Socket_Errno return Integer renames GNAT.OS_Lib.Errno;\n    --  Returns last socket error number\n "}, {"sha": "99e0288d5488317b4c125028ca8566043ccf7d30", "filename": "gcc/ada/libgnat/s-stchop__vxworks.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Flibgnat%2Fs-stchop__vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Flibgnat%2Fs-stchop__vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-stchop__vxworks.adb?ref=61b1489667e08d7b1ef6672682906072df7bc369", "patch": "@@ -103,8 +103,6 @@ package body System.Stack_Checking.Operations is\n    --------------------------------------\n \n    procedure Set_Stack_Limit_For_Current_Task is\n-      use Interfaces.C;\n-\n       type OS_Stack_Info is record\n          Size  : Interfaces.C.int;\n          Base  : System.Address;"}, {"sha": "7e451fed0db133786b55d184034d790f21b6e018", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=61b1489667e08d7b1ef6672682906072df7bc369", "patch": "@@ -12755,9 +12755,13 @@ package body Sem_Ch3 is\n          end if;\n \n          --  A deferred constant is a visible entity. If type has invariants,\n-         --  verify that the initial value satisfies them.\n+         --  verify that the initial value satisfies them. This is not done in\n+         --  GNATprove mode, as GNATprove handles invariant checks itself.\n \n-         if Has_Invariants (T) and then Present (Invariant_Procedure (T)) then\n+         if Has_Invariants (T)\n+           and then Present (Invariant_Procedure (T))\n+           and then not GNATprove_Mode\n+         then\n             Insert_After (N,\n               Make_Invariant_Call (New_Occurrence_Of (Prev, Sloc (N))));\n          end if;"}, {"sha": "d33d59ab8c0b650ccc740925dcaea990693c6558", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b1489667e08d7b1ef6672682906072df7bc369/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=61b1489667e08d7b1ef6672682906072df7bc369", "patch": "@@ -839,14 +839,16 @@ package body Sem_Ch5 is\n          Set_Referenced_Modified (Lhs, Out_Param => False);\n       end if;\n \n-      --  RM 7.3.2 (12/3): An assignment to a view conversion (from a type\n-      --  to one of its ancestors) requires an invariant check. Apply check\n-      --  only if expression comes from source, otherwise it will be applied\n-      --  when value is assigned to source entity.\n+      --  RM 7.3.2 (12/3): An assignment to a view conversion (from a type to\n+      --  one of its ancestors) requires an invariant check. Apply check only\n+      --  if expression comes from source, otherwise it will be applied when\n+      --  value is assigned to source entity. This is not done in GNATprove\n+      --  mode, as GNATprove handles invariant checks itself.\n \n       if Nkind (Lhs) = N_Type_Conversion\n         and then Has_Invariants (Etype (Expression (Lhs)))\n         and then Comes_From_Source (Expression (Lhs))\n+        and then not GNATprove_Mode\n       then\n          Insert_After (N, Make_Invariant_Call (Expression (Lhs)));\n       end if;"}]}