{"sha": "1a837f7746a6627e3651119531de18fcd95d6dfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE4MzdmNzc0NmE2NjI3ZTM2NTExMTk1MzFkZTE4ZmNkOTVkNmRmZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2004-07-28T02:27:20Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-07-28T02:27:20Z"}, "message": "re PR tree-optimization/15077 (ICE in make_decl_rtl when inlining tail recursive nested function)\n\n\tPR optimization/15077\n\t* function.h (struct function): Add field saved_static_chain_decl.\n\tFix comment for static_chain_decl.\n\t* tree-inline.c (save_body): Add new arg and handle static_chain_decl.\n\t* tree-inline.h (save_body): Add new arg.\n\t* tree-optimize.c (tree_rest_of_compilation): Handle saving\n\tstatic_chain_decl.\n\nFrom-SVN: r85247", "tree": {"sha": "568e306fd21e996f7b463cb5bdd43364edf136f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/568e306fd21e996f7b463cb5bdd43364edf136f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a837f7746a6627e3651119531de18fcd95d6dfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a837f7746a6627e3651119531de18fcd95d6dfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a837f7746a6627e3651119531de18fcd95d6dfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a837f7746a6627e3651119531de18fcd95d6dfd/comments", "author": null, "committer": null, "parents": [{"sha": "e847cc68ebc1e2a961941e75ae613fec9f90463b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e847cc68ebc1e2a961941e75ae613fec9f90463b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e847cc68ebc1e2a961941e75ae613fec9f90463b"}], "stats": {"total": 45, "additions": 36, "deletions": 9}, "files": [{"sha": "b1d01918c1e07c80466a8347913d1034e7fd4b11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a837f7746a6627e3651119531de18fcd95d6dfd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a837f7746a6627e3651119531de18fcd95d6dfd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a837f7746a6627e3651119531de18fcd95d6dfd", "patch": "@@ -1,3 +1,13 @@\n+2004-07-27  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\tPR optimization/15077\n+\t* function.h (struct function): Add field saved_static_chain_decl.\n+\tFix comment for static_chain_decl.\n+\t* tree-inline.c (save_body): Add new arg and handle static_chain_decl.\n+\t* tree-inline.h (save_body): Add new arg.\n+\t* tree-optimize.c (tree_rest_of_compilation): Handle saving\n+\tstatic_chain_decl.\n+\n 2004-07-27  Richard Henderson  <rth@redhat.com>\n \n \t* gimplify.c (is_gimple_addr_expr_arg_or_indirect): Remove."}, {"sha": "b3e750fd6b0b67f3fe30513137720b1c67f5e26f", "filename": "gcc/function.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a837f7746a6627e3651119531de18fcd95d6dfd/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a837f7746a6627e3651119531de18fcd95d6dfd/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=1a837f7746a6627e3651119531de18fcd95d6dfd", "patch": "@@ -173,6 +173,7 @@ struct function GTY(())\n      inlining */\n   tree saved_tree;\n   tree saved_args;\n+  tree saved_static_chain_decl;\n \n   /* For function.c.  */\n \n@@ -254,7 +255,7 @@ struct function GTY(())\n      If stack grows up, this is the address for the next slot.  */\n   HOST_WIDE_INT x_frame_offset;\n \n-  /* A VAR_DECL that should contain the static chain for this function.\n+  /* A PARM_DECL that should contain the static chain for this function.\n      It will be initialized at the beginning of the function.  */\n   tree static_chain_decl;\n "}, {"sha": "139661e4b507f2730132e745ca434cf473e93943", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a837f7746a6627e3651119531de18fcd95d6dfd/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a837f7746a6627e3651119531de18fcd95d6dfd/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=1a837f7746a6627e3651119531de18fcd95d6dfd", "patch": "@@ -1877,10 +1877,11 @@ clone_body (tree clone, tree fn, void *arg_map)\n   append_to_statement_list_force (copy_body (&id), &DECL_SAVED_TREE (clone));\n }\n \n-/* Save duplicate of body in FN.  MAP is used to pass around splay tree\n-   used to update arguments in restore_body.  */\n+/* Make and return duplicate of body in FN.  Put copies of DECL_ARGUMENTS\n+   in *arg_copy and of the static chain, if any, in *sc_copy.  */\n+\n tree\n-save_body (tree fn, tree *arg_copy)\n+save_body (tree fn, tree *arg_copy, tree *sc_copy)\n {\n   inline_data id;\n   tree body, *parg;\n@@ -1904,6 +1905,18 @@ save_body (tree fn, tree *arg_copy)\n       *parg = new;\n     }\n \n+  *sc_copy = DECL_STRUCT_FUNCTION (fn)->static_chain_decl;\n+  if (*sc_copy)\n+    {\n+      tree new = copy_node (*sc_copy);\n+\n+      lang_hooks.dup_lang_specific_decl (new);\n+      DECL_ABSTRACT_ORIGIN (new) = DECL_ORIGIN (*sc_copy);\n+      insert_decl_map (&id, *sc_copy, new);\n+      TREE_CHAIN (new) = TREE_CHAIN (*sc_copy);\n+      *sc_copy = new;\n+    }\n+\n   insert_decl_map (&id, DECL_RESULT (fn), DECL_RESULT (fn));\n \n   /* Actually copy the body.  */"}, {"sha": "b62b42447e90269275097105fbb3b2383b279c17", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a837f7746a6627e3651119531de18fcd95d6dfd/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a837f7746a6627e3651119531de18fcd95d6dfd/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=1a837f7746a6627e3651119531de18fcd95d6dfd", "patch": "@@ -26,10 +26,10 @@ Boston, MA 02111-1307, USA.  */\n \n void optimize_inline_calls (tree);\n bool tree_inlinable_function_p (tree);\n-tree copy_tree_r (tree*, int*, void*);\n-void clone_body (tree, tree, void*);\n-tree save_body (tree, tree *);\n-void remap_save_expr (tree*, void*, int*);\n+tree copy_tree_r (tree *, int *, void *);\n+void clone_body (tree, tree, void *);\n+tree save_body (tree, tree *, tree *);\n+void remap_save_expr (tree *, void *, int *);\n int estimate_num_insns (tree expr);\n \n /* 0 if we should not perform inlining."}, {"sha": "d575990cce67d58c7cbef715e6da9ac6bd06ef12", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a837f7746a6627e3651119531de18fcd95d6dfd/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a837f7746a6627e3651119531de18fcd95d6dfd/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=1a837f7746a6627e3651119531de18fcd95d6dfd", "patch": "@@ -524,7 +524,9 @@ tree_rest_of_compilation (tree fndecl, bool nested_p)\n \t    if (!e->inline_failed)\n \t      cgraph_clone_inlined_nodes (e, true);\n \t}\n-      cfun->saved_tree = save_body (fndecl, &cfun->saved_args);\n+      cfun->saved_static_chain_decl = cfun->static_chain_decl;\n+      cfun->saved_tree = save_body (fndecl, &cfun->saved_args,\n+\t\t\t\t    &cfun->saved_static_chain_decl);\n     }\n \n   if (flag_inline_trees)\n@@ -557,6 +559,7 @@ tree_rest_of_compilation (tree fndecl, bool nested_p)\n     {\n       DECL_SAVED_TREE (fndecl) = cfun->saved_tree;\n       DECL_ARGUMENTS (fndecl) = cfun->saved_args;\n+      cfun->static_chain_decl = cfun->saved_static_chain_decl;\n \n       /* When not in unit-at-a-time mode, we must preserve out of line copy\n \t representing node before inlining.  Restore original outgoing edges"}]}