{"sha": "455d25861f0975d0baed1912bf22deed944770a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU1ZDI1ODYxZjA5NzVkMGJhZWQxOTEyYmYyMmRlZWQ5NDQ3NzBhMg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-03-04T01:42:56Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-03-04T01:42:56Z"}, "message": "cpplib.h (_dollar_ok): New macro.\n\n\t* cpplib.h (_dollar_ok): New macro.\n\t(is_idchar, is_idstart): Use it.\n\t(IStable): Rename to _cpp_IStable.  Declare it const if\n\tgcc >=2.7 or C99.  Delete all references to FAKE_CONST.\n\t(is_idchar, is_idstart, is_numchar, is_numstart, is_hspace,\n\tis_space): Update for renamed IStable.\n\n\t* cppinit.c: Delete all references to FAKE_CONST and CAT\n\tmacros. Define init_IStable as empty macro if gcc >=2.7 or\n\tC99. Change TABLE() to ISTABLE and hardcode name of table.\n\t(cpp_start_read): Don't change the IStable based on\n\tdollars_in_ident.\n\n\t* cpphash.c (unsafe_chars): Add pfile argument.  All callers\n\tchanged.  Handle '$' for char1 correctly.\n\t* cpplib.c (cpp_get_token): Use is_numchar when parsing numbers.\n\n\t* cppexp.c (tokentab2): Make const.\n\t(cpp_lex): Make toktab const.\n\t* cppinit.c (include_defaults_array): Make const.\n\t(initialize_standard_includes): Make default_include const.\n\nFrom-SVN: r32321", "tree": {"sha": "a52521153bf75ca10099523abb8586d4cb5851a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a52521153bf75ca10099523abb8586d4cb5851a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/455d25861f0975d0baed1912bf22deed944770a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/455d25861f0975d0baed1912bf22deed944770a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/455d25861f0975d0baed1912bf22deed944770a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/455d25861f0975d0baed1912bf22deed944770a2/comments", "author": null, "committer": null, "parents": [{"sha": "fcd7f76b289ddadbb67057154547d570b94f2b23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcd7f76b289ddadbb67057154547d570b94f2b23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcd7f76b289ddadbb67057154547d570b94f2b23"}], "stats": {"total": 131, "additions": 77, "deletions": 54}, "files": [{"sha": "a161b207409914a8a8cfd0ef0031ced9d03aa714", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455d25861f0975d0baed1912bf22deed944770a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455d25861f0975d0baed1912bf22deed944770a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=455d25861f0975d0baed1912bf22deed944770a2", "patch": "@@ -1,3 +1,27 @@\n+2000-03-03  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cpplib.h (_dollar_ok): New macro.\n+\t(is_idchar, is_idstart): Use it.\n+\t(IStable): Rename to _cpp_IStable.  Declare it const if\n+\tgcc >=2.7 or C99.  Delete all references to FAKE_CONST.\n+\t(is_idchar, is_idstart, is_numchar, is_numstart, is_hspace,\n+\tis_space): Update for renamed IStable.\n+\n+\t* cppinit.c: Delete all references to FAKE_CONST and CAT\n+\tmacros. Define init_IStable as empty macro if gcc >=2.7 or\n+\tC99. Change TABLE() to ISTABLE and hardcode name of table.\n+\t(cpp_start_read): Don't change the IStable based on\n+\tdollars_in_ident.\n+\n+\t* cpphash.c (unsafe_chars): Add pfile argument.  All callers\n+\tchanged.  Handle '$' for char1 correctly.\n+\t* cpplib.c (cpp_get_token): Use is_numchar when parsing numbers.\n+\n+\t* cppexp.c (tokentab2): Make const.\n+\t(cpp_lex): Make toktab const.\n+\t* cppinit.c (include_defaults_array): Make const.\n+\t(initialize_standard_includes): Make default_include const.\n+\n 2000-03-03  Jason Merrill  <jason@casey.cygnus.com>\n \n \t* dwarf2out.c (dwarf2out_frame_debug): Add cast to silence warning."}, {"sha": "01f94698b24d0688e5a954c2d584f8438e64558d", "filename": "gcc/cppexp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455d25861f0975d0baed1912bf22deed944770a2/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455d25861f0975d0baed1912bf22deed944770a2/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=455d25861f0975d0baed1912bf22deed944770a2", "patch": "@@ -403,7 +403,7 @@ struct token {\n   int token;\n };\n \n-static struct token tokentab2[] = {\n+static const struct token tokentab2[] = {\n   {\"&&\", ANDAND},\n   {\"||\", OROR},\n   {\"<<\", LSH},\n@@ -424,7 +424,7 @@ cpp_lex (pfile, skip_evaluation)\n      cpp_reader *pfile;\n      int skip_evaluation;\n {\n-  struct token *toktab;\n+  const struct token *toktab;\n   enum cpp_token token;\n   struct operation op;\n   U_CHAR *tok_start, *tok_end;"}, {"sha": "a85c7c2b0b6384493a16a047e2c4735d810991d6", "filename": "gcc/cpphash.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455d25861f0975d0baed1912bf22deed944770a2/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455d25861f0975d0baed1912bf22deed944770a2/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=455d25861f0975d0baed1912bf22deed944770a2", "patch": "@@ -35,7 +35,7 @@ static int comp_def_part\t PARAMS ((int, U_CHAR *, int, U_CHAR *,\n \t\t\t\t\t  int, int));\n static void push_macro_expansion PARAMS ((cpp_reader *,\n \t\t\t\t\t  U_CHAR *, int, HASHNODE *));\n-static int unsafe_chars\t\t PARAMS ((int, int));\n+static int unsafe_chars\t\t PARAMS ((cpp_reader *, int, int));\n static int macro_cleanup\t PARAMS ((cpp_buffer *, cpp_reader *));\n static enum cpp_token macarg\t PARAMS ((cpp_reader *, int));\n static struct tm *timestamp\t PARAMS ((cpp_reader *));\n@@ -1317,7 +1317,7 @@ macroexpand (pfile, hp)\n \t      U_CHAR *expanded = ARG_BASE + arg->expanded;\n \t      if (!ap->raw_before && totlen > 0 && arg->expand_length\n \t\t  && !CPP_TRADITIONAL (pfile)\n-\t\t  && unsafe_chars (xbuf[totlen - 1], expanded[0]))\n+\t\t  && unsafe_chars (pfile, xbuf[totlen - 1], expanded[0]))\n \t\t{\n \t\t  xbuf[totlen++] = '\\r';\n \t\t  xbuf[totlen++] = ' ';\n@@ -1328,7 +1328,7 @@ macroexpand (pfile, hp)\n \n \t      if (!ap->raw_after && totlen > 0 && offset < defn->length\n \t\t  && !CPP_TRADITIONAL (pfile)\n-\t\t  && unsafe_chars (xbuf[totlen - 1], exp[offset]))\n+\t\t  && unsafe_chars (pfile, xbuf[totlen - 1], exp[offset]))\n \t\t{\n \t\t  xbuf[totlen++] = '\\r';\n \t\t  xbuf[totlen++] = ' ';\n@@ -1382,7 +1382,8 @@ macroexpand (pfile, hp)\n    could cause mis-tokenization.  */\n \n static int\n-unsafe_chars (c1, c2)\n+unsafe_chars (pfile, c1, c2)\n+     cpp_reader *pfile;\n      int c1, c2;\n {\n   switch (c1)\n@@ -1397,6 +1398,11 @@ unsafe_chars (c1, c2)\n \treturn 1;\t\t/* could extend a pre-processing number */\n       goto letter;\n \n+    case '$':\n+      if (CPP_OPTIONS (pfile)->dollars_in_ident)\n+\tgoto letter;\n+      return 0;\n+\n     case 'L':\n       if (c2 == '\\'' || c2 == '\\\"')\n \treturn 1;\t\t/* Could turn into L\"xxx\" or L'xxx'.  */\n@@ -1468,7 +1474,7 @@ push_macro_expansion (pfile, xbuf, xbuf_len, hp)\n     {\n       int c1 = mbuf->rlimit[-3];\n       int c2 = CPP_BUF_PEEK (CPP_PREV_BUFFER (CPP_BUFFER (pfile)));\n-      if (c2 == EOF || !unsafe_chars (c1, c2))\n+      if (c2 == EOF || !unsafe_chars (pfile, c1, c2))\n \tmbuf->rlimit -= 2;\n     }\n }"}, {"sha": "2ec7acd01d1f29a36c36031b7c4d1bd54330a7c1", "filename": "gcc/cppinit.c", "status": "modified", "additions": 22, "deletions": 30, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455d25861f0975d0baed1912bf22deed944770a2/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455d25861f0975d0baed1912bf22deed944770a2/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=455d25861f0975d0baed1912bf22deed944770a2", "patch": "@@ -22,7 +22,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include \"system.h\"\n \n-#define FAKE_CONST\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n #include \"output.h\"\n@@ -103,7 +102,7 @@ static const char * const known_suffixes[] =\n    All these directories are treated as `system' include directories\n    (they are not subject to pedantic warnings in some cases).  */\n \n-static struct default_include\n+struct default_include\n {\n   const char *fname;\t\t/* The name of the directory.  */\n   const char *component;\t/* The component containing the directory\n@@ -112,8 +111,9 @@ static struct default_include\n   int cxx_aware;\t\t/* Includes in this directory don't need to\n \t\t\t\t   be wrapped in extern \"C\" when compiling\n \t\t\t\t   C++.  */\n-}\n-include_defaults_array[]\n+};\n+\n+static const struct default_include include_defaults_array[]\n #ifdef INCLUDE_DEFAULTS\n = INCLUDE_DEFAULTS;\n #else\n@@ -204,32 +204,29 @@ static void new_pending_define\t\tPARAMS ((struct cpp_options *,\n /* Fourth argument to append_include_chain: chain to use */\n enum { QUOTE = 0, BRACKET, SYSTEM, AFTER };\n \n-/* If gcc is in use (stage2/stage3) we can make this table initialized data. */\n-#ifdef __STDC__\n-#define CAT(a, b) a##b\n-#else\n-#define CAT(a, b) a/**/b\n-#endif\n+/* If we have designated initializers (GCC >2.7, or C99) this table\n+   can be initialized, constant data.  Otherwise, it has to be filled\n+   in at runtime.  */\n \n-#if (GCC_VERSION >= 2007)\n-#define TABLE(id) static inline void CAT(init_, id) PARAMS ((void)) {} \\\n-unsigned char id[256] = {\n-#define s(p, v) [p] = v,\n+#if (GCC_VERSION >= 2007) || (__STDC_VERSION__ >= 199901L)\n+#define init_IStable()  /* nothing */\n+#define ISTABLE const unsigned char _cpp_IStable[256] = {\n #define END };\n+#define s(p, v) [p] = v,\n #else\n-#define TABLE(id) unsigned char id[256] = { 0 }; \\\n-static void CAT(init_,id) PARAMS ((void)) { \\\n-unsigned char *x = id;\n-#define s(p, v) x[p] = v;\n+#define ISTABLE unsigned char _cpp_IStable[256] = { 0 }; \\\n+ static void init_IStable PARAMS ((void)) { \\\n+ unsigned char *x = id;\n #define END } \n+#define s(p, v) x[p] = v;\n #endif\n \n #define A(x) s(x, ISidnum|ISidstart)\n #define N(x) s(x, ISidnum|ISnumstart)\n #define H(x) s(x, IShspace|ISspace)\n #define S(x) s(x, ISspace)\n \n-TABLE (IStable)\n+ISTABLE\n   A('_')\n \n   A('a') A('b') A('c') A('d') A('e') A('f') A('g') A('h') A('i')\n@@ -251,10 +248,9 @@ END\n #undef N\n #undef H\n #undef S\n-#undef TABLE\n-#undef END\n #undef s\n-#undef CAT\n+#undef ISTABLE\n+#undef END\n \n /* Given a colon-separated list of file names PATH,\n    add all the names to the search path for include files.  */\n@@ -668,7 +664,7 @@ initialize_standard_includes (pfile)\n {\n   cpp_options *opts = CPP_OPTIONS (pfile);\n   char *path;\n-  struct default_include *p = include_defaults_array;\n+  const struct default_include *p;\n   char *specd_prefix = opts->include_prefix;\n \n   /* Several environment variables may add to the include search path.\n@@ -793,14 +789,10 @@ cpp_start_read (pfile, fname)\n      preprocessing.  */\n   if (opts->preprocessed)\n     pfile->no_macro_expand++;\n-  \n-  /* Now that we know dollars_in_ident, we can initialize the syntax\n-     tables. */\n+\n+  /* Set up the IStable.  This doesn't do anything if we were compiled\n+     with a compiler that supports C99 designated initializers.  */\n   init_IStable ();\n-  /* XXX Get rid of code that depends on this, then IStable can\n-     be truly const.  */\n-  if (opts->dollars_in_ident)\n-    IStable['$'] = ISidstart|ISidnum;\n \n   /* Set up the include search path now.  */\n   if (! opts->no_standard_includes)"}, {"sha": "2d897456e763eb10212dbb47ff0634bfd32b9b5f", "filename": "gcc/cpplib.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455d25861f0975d0baed1912bf22deed944770a2/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455d25861f0975d0baed1912bf22deed944770a2/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=455d25861f0975d0baed1912bf22deed944770a2", "patch": "@@ -2615,7 +2615,7 @@ cpp_get_token (pfile)\n \t      c = PEEKC ();\n \t      if (c == EOF)\n \t\tbreak;\n-\t      if (!is_idchar(c) && c != '.'\n+\t      if (!is_numchar(c) && c != '.'\n \t\t  && ((c2 != 'e' && c2 != 'E'\n \t\t       && ((c2 != 'p' && c2 != 'P') || CPP_C89 (pfile)))\n \t\t      || (c != '+' && c != '-')))\n@@ -2640,7 +2640,7 @@ cpp_get_token (pfile)\n \t\t  c = GETC();\n \t\t  if (c == EOF)\n \t\t    goto chill_number_eof;\n-\t\t  if (!is_idchar(c))\n+\t\t  if (!is_numchar(c))\n \t\t    break;\n \t\t  CPP_PUTC (pfile, c);\n \t\t}"}, {"sha": "a9e8f15204ddaccd683f92676e4d892f29eefdc6", "filename": "gcc/cpplib.h", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455d25861f0975d0baed1912bf22deed944770a2/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455d25861f0975d0baed1912bf22deed944770a2/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=455d25861f0975d0baed1912bf22deed944770a2", "patch": "@@ -612,22 +612,23 @@ enum node_type {\n #define IShspace\t0x08\t/* ' ' \\t \\f \\v */\n #define ISspace\t\t0x10\t/* ' ' \\t \\f \\v \\n */\n \n-#define is_idchar(x)\t(IStable[x] & ISidnum)\n-#define is_numchar(x)\t(IStable[x] & ISidnum)\n-#define is_idstart(x)\t(IStable[x] & ISidstart)\n-#define is_numstart(x)\t(IStable[x] & ISnumstart)\n-#define is_hspace(x)\t(IStable[x] & IShspace)\n-#define is_space(x)\t(IStable[x] & ISspace)\n-\n-/* This table is not really `const', but it is only modified at\n-   initialization time, in a separate translation unit from the rest\n-   of the library.  We let the rest of the library think it is `const'\n-   to get better code and some additional compile-time checks.  */\n-#ifndef FAKE_CONST\n-#define FAKE_CONST const\n+#define _dollar_ok(x)\t((x) == '$' && CPP_OPTIONS (pfile)->dollars_in_ident)\n+\n+#define is_idchar(x)\t((_cpp_IStable[x] & ISidnum) || _dollar_ok(x))\n+#define is_idstart(x)\t((_cpp_IStable[x] & ISidstart) || _dollar_ok(x))\n+#define is_numchar(x)\t(_cpp_IStable[x] & ISidnum)\n+#define is_numstart(x)\t(_cpp_IStable[x] & ISnumstart)\n+#define is_hspace(x)\t(_cpp_IStable[x] & IShspace)\n+#define is_space(x)\t(_cpp_IStable[x] & ISspace)\n+\n+/* This table is constant if it can be initialized at compile time,\n+   which is the case if cpp was compiled with GCC >=2.7, or another\n+   compiler that supports C99.  */\n+#if (GCC_VERSION >= 2007) || (__STDC_VERSION__ >= 199901L)\n+extern const unsigned char _cpp_IStable[256];\n+#else\n+extern unsigned char _cpp_IStable[256];\n #endif\n-extern FAKE_CONST unsigned char IStable[256];\n-#undef FAKE_CONST\n \n /* Stack of conditionals currently in progress\n    (including both successful and failing conditionals).  */"}]}