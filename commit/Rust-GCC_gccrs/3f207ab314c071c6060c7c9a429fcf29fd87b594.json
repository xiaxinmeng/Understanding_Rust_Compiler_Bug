{"sha": "3f207ab314c071c6060c7c9a429fcf29fd87b594", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YyMDdhYjMxNGMwNzFjNjA2MGM3YzlhNDI5ZmNmMjlmZDg3YjU5NA==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde@tbsaunde.org", "date": "2021-06-12T03:49:22Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@tbsaunde.org", "date": "2021-06-13T16:08:01Z"}, "message": "use range based for loops to iterate over vec<>\n\nThis changes users of FOR_EACH_VEC_ELT to use range based for loops,\nwhere the index variables are otherwise unused.  As such the index\nvariables are all deleted, producing shorter and simpler code.\n\nSigned-off-by: Trevor Saunders <tbsaunde@tbsaunde.org>\n\ngcc/analyzer/ChangeLog:\n\n\t* call-string.cc (call_string::call_string): Use range based for\n\tto iterate over vec<>.\n\t(call_string::to_json): Likewise.\n\t(call_string::hash): Likewise.\n\t(call_string::calc_recursion_depth): Likewise.\n\t* checker-path.cc (checker_path::fixup_locations): Likewise.\n\t* constraint-manager.cc (equiv_class::equiv_class): Likewise.\n\t(equiv_class::to_json): Likewise.\n\t(equiv_class::hash): Likewise.\n\t(constraint_manager::to_json): Likewise.\n\t* engine.cc (impl_region_model_context::on_svalue_leak):\n\tLikewise.\n\t(on_liveness_change): Likewise.\n\t(impl_region_model_context::on_unknown_change): Likewise.\n\t* program-state.cc (sm_state_map::set_state): Likewise.\n\t* region-model.cc (test_canonicalization_4): Likewise.\n\ngcc/ChangeLog:\n\n\t* attribs.c (find_attribute_namespace): Iterate over vec<> with\n\trange based for.\n\t* auto-profile.c (afdo_find_equiv_class): Likewise.\n\t* gcc.c (do_specs_vec): Likewise.\n\t(do_spec_1): Likewise.\n\t(driver::set_up_specs): Likewise.\n\t* gimple-loop-jam.c (any_access_function_variant_p): Likewise.\n\t* gimple-ssa-store-merging.c (compatible_load_p): Likewise.\n\t(imm_store_chain_info::try_coalesce_bswap): Likewise.\n\t(imm_store_chain_info::coalesce_immediate_stores): Likewise.\n\t(get_location_for_stmts): Likewise.\n\t* graphite-poly.c (print_iteration_domains): Likewise.\n\t(free_poly_bb): Likewise.\n\t(remove_gbbs_in_scop): Likewise.\n\t(free_scop): Likewise.\n\t(dump_gbb_cases): Likewise.\n\t(dump_gbb_conditions): Likewise.\n\t(print_pdrs): Likewise.\n\t(print_scop): Likewise.\n\t* ifcvt.c (cond_move_process_if_block): Likewise.\n\t* lower-subreg.c (decompose_multiword_subregs): Likewise.\n\t* regcprop.c (pass_cprop_hardreg::execute): Likewise.\n\t* sanopt.c (sanitize_rewrite_addressable_params): Likewise.\n\t* sel-sched-dump.c (dump_insn_vector): Likewise.\n\t* store-motion.c (store_ops_ok): Likewise.\n\t(store_killed_in_insn): Likewise.\n\t* timevar.c (timer::named_items::print): Likewise.\n\t* tree-cfgcleanup.c (cleanup_control_flow_pre): Likewise.\n\t(cleanup_tree_cfg_noloop): Likewise.\n\t* tree-data-ref.c (dump_data_references): Likewise.\n\t(print_dir_vectors): Likewise.\n\t(print_dist_vectors): Likewise.\n\t(dump_data_dependence_relations): Likewise.\n\t(dump_dist_dir_vectors): Likewise.\n\t(dump_ddrs): Likewise.\n\t(create_runtime_alias_checks): Likewise.\n\t(free_subscripts): Likewise.\n\t(save_dist_v): Likewise.\n\t(save_dir_v): Likewise.\n\t(invariant_access_functions): Likewise.\n\t(same_access_functions): Likewise.\n\t(access_functions_are_affine_or_constant_p): Likewise.\n\t(find_data_references_in_stmt): Likewise.\n\t(graphite_find_data_references_in_stmt): Likewise.\n\t(free_dependence_relations): Likewise.\n\t(free_data_refs): Likewise.\n\t* tree-inline.c (copy_debug_stmts): Likewise.\n\t* tree-into-ssa.c (dump_currdefs): Likewise.\n\t(rewrite_update_phi_arguments): Likewise.\n\t* tree-ssa-propagate.c (clean_up_loop_closed_phi): Likewise.\n\t* tree-vect-data-refs.c (vect_analyze_possibly_independent_ddr):\n\tLikewise.\n\t(vect_slp_analyze_node_dependences): Likewise.\n\t(vect_slp_analyze_instance_dependence): Likewise.\n\t(vect_record_base_alignments): Likewise.\n\t(vect_get_peeling_costs_all_drs): Likewise.\n\t(vect_peeling_supportable): Likewise.\n\t* tree-vectorizer.c (vec_info::~vec_info): Likewise.\n\t(vec_info::free_stmt_vec_infos): Likewise.\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.c (cxx_eval_call_expression): Iterate over vec<>\n\twith range based for.\n\t(cxx_eval_store_expression): Likewise.\n\t(cxx_eval_loop_expr): Likewise.\n\t* decl.c (wrapup_namespace_globals): Likewise.\n\t(cp_finish_decl): Likewise.\n\t(cxx_simulate_enum_decl): Likewise.\n\t* parser.c (cp_parser_postfix_expression): Likewise.", "tree": {"sha": "63c671856587ed870cda867c2b71496d840453e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63c671856587ed870cda867c2b71496d840453e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f207ab314c071c6060c7c9a429fcf29fd87b594", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f207ab314c071c6060c7c9a429fcf29fd87b594", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f207ab314c071c6060c7c9a429fcf29fd87b594", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f207ab314c071c6060c7c9a429fcf29fd87b594/comments", "author": {"login": "tbsaunde", "id": 349840, "node_id": "MDQ6VXNlcjM0OTg0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/349840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbsaunde", "html_url": "https://github.com/tbsaunde", "followers_url": "https://api.github.com/users/tbsaunde/followers", "following_url": "https://api.github.com/users/tbsaunde/following{/other_user}", "gists_url": "https://api.github.com/users/tbsaunde/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbsaunde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbsaunde/subscriptions", "organizations_url": "https://api.github.com/users/tbsaunde/orgs", "repos_url": "https://api.github.com/users/tbsaunde/repos", "events_url": "https://api.github.com/users/tbsaunde/events{/privacy}", "received_events_url": "https://api.github.com/users/tbsaunde/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbsaunde", "id": 349840, "node_id": "MDQ6VXNlcjM0OTg0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/349840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbsaunde", "html_url": "https://github.com/tbsaunde", "followers_url": "https://api.github.com/users/tbsaunde/followers", "following_url": "https://api.github.com/users/tbsaunde/following{/other_user}", "gists_url": "https://api.github.com/users/tbsaunde/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbsaunde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbsaunde/subscriptions", "organizations_url": "https://api.github.com/users/tbsaunde/orgs", "repos_url": "https://api.github.com/users/tbsaunde/repos", "events_url": "https://api.github.com/users/tbsaunde/events{/privacy}", "received_events_url": "https://api.github.com/users/tbsaunde/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a7d54b1e10b8f4fba1358260ed2e7056ed23cbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a7d54b1e10b8f4fba1358260ed2e7056ed23cbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a7d54b1e10b8f4fba1358260ed2e7056ed23cbd"}], "stats": {"total": 408, "additions": 108, "deletions": 300}, "files": [{"sha": "9f4f77ab3a9c160998725c2a7da98cf60005d2ae", "filename": "gcc/analyzer/call-string.cc", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fanalyzer%2Fcall-string.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fanalyzer%2Fcall-string.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fcall-string.cc?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -50,9 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n call_string::call_string (const call_string &other)\n : m_return_edges (other.m_return_edges.length ())\n {\n-  const return_superedge *e;\n-  int i;\n-  FOR_EACH_VEC_ELT (other.m_return_edges, i, e)\n+  for (const return_superedge *e : other.m_return_edges)\n     m_return_edges.quick_push (e);\n }\n \n@@ -118,9 +116,7 @@ call_string::to_json () const\n {\n   json::array *arr = new json::array ();\n \n-  const return_superedge *e;\n-  int i;\n-  FOR_EACH_VEC_ELT (m_return_edges, i, e)\n+  for (const return_superedge *e : m_return_edges)\n     {\n       json::object *e_obj = new json::object ();\n       e_obj->set (\"src_snode_idx\",\n@@ -141,9 +137,7 @@ hashval_t\n call_string::hash () const\n {\n   inchash::hash hstate;\n-  int i;\n-  const return_superedge *e;\n-  FOR_EACH_VEC_ELT (m_return_edges, i, e)\n+  for (const return_superedge *e : m_return_edges)\n     hstate.add_ptr (e);\n   return hstate.end ();\n }\n@@ -173,9 +167,7 @@ call_string::calc_recursion_depth () const\n     = m_return_edges[m_return_edges.length () - 1];\n \n   int result = 0;\n-  const return_superedge *e;\n-  int i;\n-  FOR_EACH_VEC_ELT (m_return_edges, i, e)\n+  for (const return_superedge *e : m_return_edges)\n     if (e == top_return_sedge)\n       ++result;\n   return result;"}, {"sha": "e6f838b7d522392bff2313c23b3cb288c941938f", "filename": "gcc/analyzer/checker-path.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fanalyzer%2Fchecker-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fanalyzer%2Fchecker-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-path.cc?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -1001,9 +1001,7 @@ checker_path::add_final_event (const state_machine *sm,\n void\n checker_path::fixup_locations (pending_diagnostic *pd)\n {\n-  checker_event *e;\n-  int i;\n-  FOR_EACH_VEC_ELT (m_events, i, e)\n+  for (checker_event *e : m_events)\n     e->set_location (pd->fixup_location (e->get_location ()));\n }\n "}, {"sha": "51cf52258a96993225159ac3aab754113d6efb75", "filename": "gcc/analyzer/constraint-manager.cc", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fanalyzer%2Fconstraint-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fanalyzer%2Fconstraint-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fconstraint-manager.cc?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -270,9 +270,7 @@ equiv_class::equiv_class (const equiv_class &other)\n : m_constant (other.m_constant), m_cst_sval (other.m_cst_sval),\n   m_vars (other.m_vars.length ())\n {\n-  int i;\n-  const svalue *sval;\n-  FOR_EACH_VEC_ELT (other.m_vars, i, sval)\n+  for (const svalue *sval : other.m_vars)\n     m_vars.quick_push (sval);\n }\n \n@@ -310,9 +308,7 @@ equiv_class::to_json () const\n   json::object *ec_obj = new json::object ();\n \n   json::array *sval_arr = new json::array ();\n-  int i;\n-  const svalue *sval;\n-  FOR_EACH_VEC_ELT (m_vars, i, sval)\n+  for (const svalue *sval : m_vars)\n     sval_arr->append (sval->to_json ());\n   ec_obj->set (\"svals\", sval_arr);\n \n@@ -337,9 +333,7 @@ equiv_class::hash () const\n   inchash::hash hstate;\n \n   inchash::add_expr (m_constant, hstate);\n-  int i;\n-  const svalue *sval;\n-  FOR_EACH_VEC_ELT (m_vars, i, sval)\n+  for (const svalue * sval : m_vars)\n     hstate.add_ptr (sval);\n   return hstate.end ();\n }\n@@ -811,20 +805,16 @@ constraint_manager::to_json () const\n   /* Equivalence classes.  */\n   {\n     json::array *ec_arr = new json::array ();\n-    int i;\n-    equiv_class *ec;\n-    FOR_EACH_VEC_ELT (m_equiv_classes, i, ec)\n+    for (const equiv_class *ec : m_equiv_classes)\n       ec_arr->append (ec->to_json ());\n     cm_obj->set (\"ecs\", ec_arr);\n   }\n \n   /* Constraints.  */\n   {\n     json::array *con_arr = new json::array ();\n-    int i;\n-    constraint *c;\n-    FOR_EACH_VEC_ELT (m_constraints, i, c)\n-      con_arr->append (c->to_json ());\n+    for (const constraint &c : m_constraints)\n+      con_arr->append (c.to_json ());\n     cm_obj->set (\"constraints\", con_arr);\n   }\n "}, {"sha": "50652b2cfa6b8376366fd8db369698a488bdab9e", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -121,9 +121,7 @@ void\n impl_region_model_context::on_svalue_leak (const svalue *sval)\n \n {\n-  int sm_idx;\n-  sm_state_map *smap;\n-  FOR_EACH_VEC_ELT (m_new_state->m_checker_states, sm_idx, smap)\n+  for (sm_state_map *smap : m_new_state->m_checker_states)\n     smap->on_svalue_leak (sval, this);\n }\n \n@@ -132,19 +130,15 @@ impl_region_model_context::\n on_liveness_change (const svalue_set &live_svalues,\n \t\t    const region_model *model)\n {\n-  int sm_idx;\n-  sm_state_map *smap;\n-  FOR_EACH_VEC_ELT (m_new_state->m_checker_states, sm_idx, smap)\n+  for (sm_state_map *smap : m_new_state->m_checker_states)\n     smap->on_liveness_change (live_svalues, model, this);\n }\n \n void\n impl_region_model_context::on_unknown_change (const svalue *sval,\n \t\t\t\t\t      bool is_mutable)\n {\n-  int sm_idx;\n-  sm_state_map *smap;\n-  FOR_EACH_VEC_ELT (m_new_state->m_checker_states, sm_idx, smap)\n+  for (sm_state_map *smap : m_new_state->m_checker_states)\n     smap->on_unknown_change (sval, is_mutable, m_ext_state);\n }\n "}, {"sha": "76959c135db30785ab8df4fd7f2bfbbcef510c3f", "filename": "gcc/analyzer/program-state.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fanalyzer%2Fprogram-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fanalyzer%2Fprogram-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.cc?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -441,10 +441,8 @@ sm_state_map::set_state (const equiv_class &ec,\n \t\t\t const svalue *origin,\n \t\t\t const extrinsic_state &ext_state)\n {\n-  int i;\n-  const svalue *sval;\n   bool any_changed = false;\n-  FOR_EACH_VEC_ELT (ec.m_vars, i, sval)\n+  for (const svalue *sval : ec.m_vars)\n     any_changed |= impl_set_state (sval, state, origin, ext_state);\n   return any_changed;\n }"}, {"sha": "4b9620d988737d02e793adf8c327aac0f46b2cbe", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -4294,9 +4294,7 @@ test_canonicalization_4 ()\n   region_model_manager mgr;\n   region_model model (&mgr);\n \n-  unsigned i;\n-  tree cst;\n-  FOR_EACH_VEC_ELT (csts, i, cst)\n+  for (tree cst : csts)\n     model.get_rvalue (cst, NULL);\n \n   model.canonicalize ();"}, {"sha": "afa485ed37d48ae6a84a401e6482fe2e5615560c", "filename": "gcc/attribs.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -165,15 +165,12 @@ register_scoped_attributes (const struct attribute_spec *attributes,\n static scoped_attributes*\n find_attribute_namespace (const char* ns)\n {\n-  unsigned ix;\n-  scoped_attributes *iter;\n-\n-  FOR_EACH_VEC_ELT (attributes_table, ix, iter)\n-    if (ns == iter->ns\n-\t|| (iter->ns != NULL\n+  for (scoped_attributes &iter : attributes_table)\n+    if (ns == iter.ns\n+\t|| (iter.ns != NULL\n \t    && ns != NULL\n-\t    && !strcmp (iter->ns, ns)))\n-      return iter;\n+\t    && !strcmp (iter.ns, ns)))\n+      return &iter;\n   return NULL;\n }\n "}, {"sha": "ed788dc06a808c758519566afd4f37fd19b2709b", "filename": "gcc/auto-profile.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fauto-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fauto-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fauto-profile.c?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -1156,14 +1156,12 @@ afdo_find_equiv_class (bb_set *annotated_bb)\n   FOR_ALL_BB_FN (bb, cfun)\n   {\n     vec<basic_block> dom_bbs;\n-    basic_block bb1;\n-    int i;\n \n     if (bb->aux != NULL)\n       continue;\n     bb->aux = bb;\n     dom_bbs = get_dominated_by (CDI_DOMINATORS, bb);\n-    FOR_EACH_VEC_ELT (dom_bbs, i, bb1)\n+    for (basic_block bb1 : dom_bbs)\n       if (bb1->aux == NULL && dominated_by_p (CDI_POST_DOMINATORS, bb, bb1)\n \t  && bb1->loop_father == bb->loop_father)\n \t{\n@@ -1175,7 +1173,7 @@ afdo_find_equiv_class (bb_set *annotated_bb)\n \t    }\n \t}\n     dom_bbs = get_dominated_by (CDI_POST_DOMINATORS, bb);\n-    FOR_EACH_VEC_ELT (dom_bbs, i, bb1)\n+    for (basic_block bb1 : dom_bbs)\n       if (bb1->aux == NULL && dominated_by_p (CDI_DOMINATORS, bb, bb1)\n \t  && bb1->loop_father == bb->loop_father)\n \t{"}, {"sha": "a26aead6dc28ecf23eec1666b47cffb011331f77", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -2793,9 +2793,7 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \n \t  /* Forget the saved values of the callee's SAVE_EXPRs and\n \t     TARGET_EXPRs.  */\n-\t  unsigned int i;\n-\t  tree save_expr;\n-\t  FOR_EACH_VEC_ELT (save_exprs, i, save_expr)\n+\t  for (tree save_expr : save_exprs)\n \t    ctx->global->values.remove (save_expr);\n \n \t  /* Remove the parms/result from the values map.  Is it worth\n@@ -5495,9 +5493,7 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n \t     semantics are not applied on an object under construction.\n \t     They come into effect when the constructor for the most\n \t     derived object ends.\"  */\n-\t  tree elt;\n-\t  unsigned int i;\n-\t  FOR_EACH_VEC_ELT (*ctors, i, elt)\n+\t  for (tree elt : *ctors)\n \t    if (same_type_ignoring_top_level_qualifiers_p\n \t\t(TREE_TYPE (const_object_being_modified), TREE_TYPE (elt)))\n \t      {\n@@ -5605,12 +5601,10 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n \n   /* Update TREE_CONSTANT and TREE_SIDE_EFFECTS on enclosing\n      CONSTRUCTORs, if any.  */\n-  tree elt;\n-  unsigned i;\n   bool c = TREE_CONSTANT (init);\n   bool s = TREE_SIDE_EFFECTS (init);\n   if (!c || s || activated_union_member_p)\n-    FOR_EACH_VEC_ELT (*ctors, i, elt)\n+    for (tree elt : *ctors)\n       {\n \tif (!c)\n \t  TREE_CONSTANT (elt) = false;\n@@ -5928,9 +5922,7 @@ cxx_eval_loop_expr (const constexpr_ctx *ctx, tree t,\n \t}\n \n       /* Forget saved values of SAVE_EXPRs and TARGET_EXPRs.  */\n-      unsigned int i;\n-      tree save_expr;\n-      FOR_EACH_VEC_ELT (save_exprs, i, save_expr)\n+      for (tree save_expr : save_exprs)\n \tctx->global->values.remove (save_expr);\n       save_exprs.truncate (0);\n \n@@ -5952,9 +5944,7 @@ cxx_eval_loop_expr (const constexpr_ctx *ctx, tree t,\n \t && !*non_constant_p);\n \n   /* Forget saved values of SAVE_EXPRs and TARGET_EXPRs.  */\n-  unsigned int i;\n-  tree save_expr;\n-  FOR_EACH_VEC_ELT (save_exprs, i, save_expr)\n+  for (tree save_expr : save_exprs)\n     ctx->global->values.remove (save_expr);\n \n   return NULL_TREE;"}, {"sha": "f5596b689a210b5b97bb3dbedbe86a6980faef35", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -841,9 +841,7 @@ wrapup_namespace_globals ()\n {\n   if (vec<tree, va_gc> *statics = static_decls)\n     {\n-      tree decl;\n-      unsigned int i;\n-      FOR_EACH_VEC_ELT (*statics, i, decl)\n+      for (tree decl : *statics)\n \t{\n \t  if (warn_unused_function\n \t      && TREE_CODE (decl) == FUNCTION_DECL\n@@ -8260,8 +8258,7 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n      reference, insert it in the statement-tree now.  */\n   if (cleanups)\n     {\n-      unsigned i; tree t;\n-      FOR_EACH_VEC_ELT (*cleanups, i, t)\n+      for (tree t : *cleanups)\n \tpush_cleanup (decl, t, false);\n       release_tree_vector (cleanups);\n     }\n@@ -16415,11 +16412,9 @@ cxx_simulate_enum_decl (location_t loc, const char *name,\n   SET_OPAQUE_ENUM_P (enumtype, false);\n   DECL_SOURCE_LOCATION (TYPE_NAME (enumtype)) = loc;\n \n-  string_int_pair *value;\n-  unsigned int i;\n-  FOR_EACH_VEC_ELT (values, i, value)\n-    build_enumerator (get_identifier (value->first),\n-\t\t      build_int_cst (integer_type_node, value->second),\n+  for (const string_int_pair &value : values)\n+    build_enumerator (get_identifier (value.first),\n+\t\t      build_int_cst (integer_type_node, value.second),\n \t\t      enumtype, NULL_TREE, loc);\n \n   finish_enum_value_list (enumtype);"}, {"sha": "b5af3877e48831fe5a655587534c1ee06b7d1b30", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -7299,8 +7299,6 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n     case RID_BUILTIN_LAUNDER:\n       {\n \tvec<tree, va_gc> *vec;\n-\tunsigned int i;\n-\ttree p;\n \n \tcp_lexer_consume_token (parser->lexer);\n \tvec = cp_parser_parenthesized_expression_list (parser, non_attr,\n@@ -7312,7 +7310,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t    break;\n \t  }\n \n-\tFOR_EACH_VEC_ELT (*vec, i, p)\n+\tfor (tree p : *vec)\n \t  mark_exp_read (p);\n \n \tswitch (keyword)"}, {"sha": "af286400a4a4571e5cfc3360e6b10713d6211fab", "filename": "gcc/gcc.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -5838,10 +5838,7 @@ compile_input_file_p (struct infile *infile)\n static void\n do_specs_vec (vec<char_p> vec)\n {\n-  unsigned ix;\n-  char *opt;\n-\n-  FOR_EACH_VEC_ELT (vec, ix, opt)\n+  for (char *opt : vec)\n     {\n       do_spec_1 (opt, 1, NULL);\n       /* Make each accumulated option a separate argument.  */\n@@ -6436,8 +6433,6 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t    {\n \t      const char *p1 = p;\n \t      char *string;\n-\t      char *opt;\n-\t      unsigned ix;\n \n \t      /* Skip past the option value and make a copy.  */\n \t      if (*p != '{')\n@@ -6448,7 +6443,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t      string = save_string (p1 + 1, p - p1 - 2);\n \n \t      /* See if we already recorded this option.  */\n-\t      FOR_EACH_VEC_ELT (linker_options, ix, opt)\n+\t      for (const char *opt : linker_options)\n \t\tif (! strcmp (string, opt))\n \t\t  {\n \t\t    free (string);\n@@ -8316,9 +8311,7 @@ driver::set_up_specs () const\n       && do_spec_2 (startfile_prefix_spec, NULL) == 0\n       && do_spec_1 (\" \", 0, NULL) == 0)\n     {\n-      const char *arg;\n-      int ndx;\n-      FOR_EACH_VEC_ELT (argbuf, ndx, arg)\n+      for (const char *arg : argbuf)\n \tadd_sysrooted_prefix (&startfile_prefixes, arg, \"BINUTILS\",\n \t\t\t      PREFIX_PRIORITY_LAST, 0, 1);\n     }"}, {"sha": "4842f0dff80e086f928edecf63944e830fc8a5ea", "filename": "gcc/gimple-loop-jam.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fgimple-loop-jam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fgimple-loop-jam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-loop-jam.c?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -365,11 +365,9 @@ static bool\n any_access_function_variant_p (const struct data_reference *a,\n \t\t\t       const class loop *loop_nest)\n {\n-  unsigned int i;\n   vec<tree> fns = DR_ACCESS_FNS (a);\n-  tree t;\n \n-  FOR_EACH_VEC_ELT (fns, i, t)\n+  for (tree t : fns)\n     if (!evolution_function_is_invariant_p (t, loop_nest->num))\n       return true;\n "}, {"sha": "632947950e4d4b18c58f72d27f2710321490c3fa", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -2541,16 +2541,14 @@ compatible_load_p (merged_store_group *merged_store,\n      clobbers those loads.  */\n   gimple *first = merged_store->first_stmt;\n   gimple *last = merged_store->last_stmt;\n-  unsigned int i;\n-  store_immediate_info *infoc;\n   /* The stores are sorted by increasing store bitpos, so if info->stmt store\n      comes before the so far first load, we'll be changing\n      merged_store->first_stmt.  In that case we need to give up if\n      any of the earlier processed loads clobber with the stmts in the new\n      range.  */\n   if (info->order < merged_store->first_order)\n     {\n-      FOR_EACH_VEC_ELT (merged_store->stores, i, infoc)\n+      for (store_immediate_info *infoc : merged_store->stores)\n \tif (stmts_may_clobber_ref_p (info->stmt, first, infoc->ops[idx].val))\n \t  return false;\n       first = info->stmt;\n@@ -2560,7 +2558,7 @@ compatible_load_p (merged_store_group *merged_store,\n      processed loads.  */\n   else if (info->order > merged_store->last_order)\n     {\n-      FOR_EACH_VEC_ELT (merged_store->stores, i, infoc)\n+      for (store_immediate_info *infoc : merged_store->stores)\n \tif (stmts_may_clobber_ref_p (last, info->stmt, infoc->ops[idx].val))\n \t  return false;\n       last = info->stmt;\n@@ -2884,9 +2882,7 @@ imm_store_chain_info::try_coalesce_bswap (merged_store_group *merged_store,\n \tgather_bswap_load_refs (&refs,\n \t\t\t\tgimple_assign_rhs1 (m_store_info[i]->stmt));\n \n-      unsigned int i;\n-      tree ref;\n-      FOR_EACH_VEC_ELT (refs, i, ref)\n+      for (tree ref : refs)\n \tif (stmts_may_clobber_ref_p (first_stmt, last_stmt, ref))\n \t  return false;\n       n.vuse = NULL_TREE;\n@@ -3199,9 +3195,7 @@ imm_store_chain_info::coalesce_immediate_stores ()\n \t\t}\n \t      else if (infof->rhs_code == MEM_REF && info->rhs_code != MEM_REF)\n \t\t{\n-\t\t  store_immediate_info *infoj;\n-\t\t  unsigned int j;\n-\t\t  FOR_EACH_VEC_ELT (merged_store->stores, j, infoj)\n+\t\t  for (store_immediate_info *infoj : merged_store->stores)\n \t\t    {\n \t\t      infoj->rhs_code = BIT_INSERT_EXPR;\n \t\t      infoj->ops[0].val = gimple_assign_rhs1 (infoj->stmt);\n@@ -3323,10 +3317,7 @@ get_alias_type_for_stmts (vec<gimple *> &stmts, bool is_load,\n static location_t\n get_location_for_stmts (vec<gimple *> &stmts)\n {\n-  gimple *stmt;\n-  unsigned int i;\n-\n-  FOR_EACH_VEC_ELT (stmts, i, stmt)\n+  for (gimple *stmt : stmts)\n     if (gimple_has_location (stmt))\n       return gimple_location (stmt);\n "}, {"sha": "1dfc28e6caea4cc1175c61e39c4a164ee0a14cc1", "filename": "gcc/graphite-poly.c", "status": "modified", "additions": 10, "deletions": 31, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fgraphite-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fgraphite-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.c?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -63,10 +63,7 @@ print_iteration_domain (FILE *file, poly_bb_p pbb)\n void\n print_iteration_domains (FILE *file, scop_p scop)\n {\n-  int i;\n-  poly_bb_p pbb;\n-\n-  FOR_EACH_VEC_ELT (scop->pbbs, i, pbb)\n+  for (poly_bb_p pbb : scop->pbbs)\n     print_iteration_domain (file, pbb);\n }\n \n@@ -150,16 +147,13 @@ new_poly_bb (scop_p scop, gimple_poly_bb_p black_box)\n static void\n free_poly_bb (poly_bb_p pbb)\n {\n-  int i;\n-  poly_dr_p pdr;\n-\n   isl_set_free (pbb->domain);\n   pbb->domain = NULL;\n   isl_set_free (pbb->iterators);\n   pbb->iterators = NULL;\n \n   if (PBB_DRS (pbb).exists ())\n-    FOR_EACH_VEC_ELT (PBB_DRS (pbb), i, pdr)\n+    for (poly_dr_p pdr : PBB_DRS (pbb))\n       free_poly_dr (pdr);\n \n   PBB_DRS (pbb).release ();\n@@ -243,10 +237,7 @@ free_gimple_poly_bb (gimple_poly_bb_p gbb)\n static void\n remove_gbbs_in_scop (scop_p scop)\n {\n-  int i;\n-  poly_bb_p pbb;\n-\n-  FOR_EACH_VEC_ELT (scop->pbbs, i, pbb)\n+  for (poly_bb_p pbb : scop->pbbs)\n     free_gimple_poly_bb (PBB_BLACK_BOX (pbb));\n }\n \n@@ -273,13 +264,10 @@ new_scop (edge entry, edge exit)\n void\n free_scop (scop_p scop)\n {\n-  int i;\n-  poly_bb_p pbb;\n-\n   remove_gbbs_in_scop (scop);\n   free_sese_info (scop->scop_info);\n \n-  FOR_EACH_VEC_ELT (scop->pbbs, i, pbb)\n+  for (poly_bb_p pbb : scop->pbbs)\n     free_poly_bb (pbb);\n \n   scop->pbbs.release ();\n@@ -309,8 +297,6 @@ print_pbb_domain (FILE *file, poly_bb_p pbb)\n static void\n dump_gbb_cases (FILE *file, gimple_poly_bb_p gbb)\n {\n-  int i;\n-  gimple *stmt;\n   vec<gimple *> cases;\n \n   if (!gbb)\n@@ -322,7 +308,7 @@ dump_gbb_cases (FILE *file, gimple_poly_bb_p gbb)\n \n   fprintf (file, \"cases bb_%d (\\n\", GBB_BB (gbb)->index);\n \n-  FOR_EACH_VEC_ELT (cases, i, stmt)\n+  for (gimple *stmt : cases)\n     print_gimple_stmt (file, stmt, 0);\n \n   fprintf (file, \")\\n\");\n@@ -333,8 +319,6 @@ dump_gbb_cases (FILE *file, gimple_poly_bb_p gbb)\n static void\n dump_gbb_conditions (FILE *file, gimple_poly_bb_p gbb)\n {\n-  int i;\n-  gimple *stmt;\n   vec<gimple *> conditions;\n \n   if (!gbb)\n@@ -346,7 +330,7 @@ dump_gbb_conditions (FILE *file, gimple_poly_bb_p gbb)\n \n   fprintf (file, \"conditions bb_%d (\\n\", GBB_BB (gbb)->index);\n \n-  FOR_EACH_VEC_ELT (conditions, i, stmt)\n+  for (gimple *stmt : conditions)\n     print_gimple_stmt (file, stmt, 0);\n \n   fprintf (file, \")\\n\");\n@@ -357,8 +341,6 @@ dump_gbb_conditions (FILE *file, gimple_poly_bb_p gbb)\n void\n print_pdrs (FILE *file, poly_bb_p pbb)\n {\n-  int i;\n-  poly_dr_p pdr;\n   int nb_reads = 0;\n   int nb_writes = 0;\n \n@@ -367,21 +349,21 @@ print_pdrs (FILE *file, poly_bb_p pbb)\n \n   fprintf (file, \"Data references (\\n\");\n \n-  FOR_EACH_VEC_ELT (PBB_DRS (pbb), i, pdr)\n+  for (poly_dr_p pdr : PBB_DRS (pbb))\n     if (PDR_TYPE (pdr) == PDR_READ)\n       nb_reads++;\n     else\n       nb_writes++;\n \n   fprintf (file, \"Read data references (\\n\");\n \n-  FOR_EACH_VEC_ELT (PBB_DRS (pbb), i, pdr)\n+  for (poly_dr_p pdr : PBB_DRS (pbb))\n     if (PDR_TYPE (pdr) == PDR_READ)\n       print_pdr (file, pdr);\n \n   fprintf (file, \")\\n\");\n   fprintf (file, \"Write data references (\\n\");\n-  FOR_EACH_VEC_ELT (PBB_DRS (pbb), i, pdr)\n+  for (poly_dr_p pdr : PBB_DRS (pbb))\n     if (PDR_TYPE (pdr) != PDR_READ)\n       print_pdr (file, pdr);\n   fprintf (file, \")\\n\");\n@@ -459,17 +441,14 @@ print_scop_context (FILE *file, scop_p scop)\n void\n print_scop (FILE *file, scop_p scop)\n {\n-  int i;\n-  poly_bb_p pbb;\n-\n   fprintf (file, \"SCoP (\\n\");\n   print_scop_context (file, scop);\n   print_scop_params (file, scop);\n \n   fprintf (file, \"Number of statements: \");\n   fprintf (file, \"%d\\n\", scop->pbbs.length ());\n \n-  FOR_EACH_VEC_ELT (scop->pbbs, i, pbb)\n+  for (poly_bb_p pbb : scop->pbbs)\n     print_pbb (file, pbb);\n \n   fprintf (file, \")\\n\");"}, {"sha": "017944f4f79aa687f89788f1ea0a78c0abd05298", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -3889,11 +3889,9 @@ cond_move_process_if_block (struct noce_if_info *if_info)\n   rtx_insn *jump = if_info->jump;\n   rtx cond = if_info->cond;\n   rtx_insn *seq, *loc_insn;\n-  rtx reg;\n   int c;\n   vec<rtx> then_regs = vNULL;\n   vec<rtx> else_regs = vNULL;\n-  unsigned int i;\n   int success_p = FALSE;\n   int limit = param_max_rtl_if_conversion_insns;\n \n@@ -3915,7 +3913,7 @@ cond_move_process_if_block (struct noce_if_info *if_info)\n      source register does not change after the assignment.  Also count\n      the number of registers set in only one of the blocks.  */\n   c = 0;\n-  FOR_EACH_VEC_ELT (then_regs, i, reg)\n+  for (rtx reg : then_regs)\n     {\n       rtx *then_slot = then_vals.get (reg);\n       rtx *else_slot = else_vals.get (reg);\n@@ -3934,7 +3932,7 @@ cond_move_process_if_block (struct noce_if_info *if_info)\n     }\n \n   /* Finish off c for MAX_CONDITIONAL_EXECUTE.  */\n-  FOR_EACH_VEC_ELT (else_regs, i, reg)\n+  for (rtx reg : else_regs)\n     {\n       gcc_checking_assert (else_vals.get (reg));\n       if (!then_vals.get (reg))"}, {"sha": "21078268ba0d241efc469fe71357d3b94f8935d6", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -1731,14 +1731,9 @@ decompose_multiword_subregs (bool decompose_copies)\n \t}\n     }\n \n-  {\n-    unsigned int i;\n-    bitmap b;\n-\n-    FOR_EACH_VEC_ELT (reg_copy_graph, i, b)\n-      if (b)\n-\tBITMAP_FREE (b);\n-  }\n+  for (bitmap b : reg_copy_graph)\n+    if (b)\n+      BITMAP_FREE (b);\n \n   reg_copy_graph.release ();\n "}, {"sha": "5ca7e8c9ea2642dcc4b2833827aad224347c2d4b", "filename": "gcc/regcprop.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fregcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fregcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregcprop.c?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -1404,12 +1404,9 @@ pass_cprop_hardreg::execute (function *fun)\n      changed anything though.  */\n   if (!worklist.is_empty ())\n     {\n-      unsigned int i;\n-      int index;\n-\n       any_debug_changes = false;\n       bitmap_clear (visited);\n-      FOR_EACH_VEC_ELT (worklist, i, index)\n+      for (int index : worklist)\n \t{\n \t  bb = BASIC_BLOCK_FOR_FN (fun, index);\n \t  cprop_hardreg_bb (bb, all_vd, visited);"}, {"sha": "18829ff18502ced4f71705396d7f52893537ce96", "filename": "gcc/sanopt.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fsanopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fsanopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanopt.c?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -1246,9 +1246,7 @@ sanitize_rewrite_addressable_params (function *fun)\n \n   /* Unset value expr for parameters for which we created debug bind\n      expressions.  */\n-  unsigned i;\n-  tree arg;\n-  FOR_EACH_VEC_ELT (clear_value_expr_list, i, arg)\n+  for (tree arg : clear_value_expr_list)\n     {\n       DECL_HAS_VALUE_EXPR_P (arg) = 0;\n       SET_DECL_VALUE_EXPR (arg, NULL_TREE);"}, {"sha": "993a16a3f0c7d13f0f4e003c27242e378258d07e", "filename": "gcc/sel-sched-dump.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fsel-sched-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fsel-sched-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-dump.c?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -528,10 +528,7 @@ dump_flist (flist_t l)\n void\n dump_insn_vector (rtx_vec_t succs)\n {\n-  int i;\n-  rtx_insn *succ;\n-\n-  FOR_EACH_VEC_ELT (succs, i, succ)\n+  for (rtx_insn *succ : succs)\n     if (succ)\n       dump_insn (succ);\n     else"}, {"sha": "dd61701b947708f9567f9c8f239697f0e7215494", "filename": "gcc/store-motion.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fstore-motion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Fstore-motion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstore-motion.c?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -251,9 +251,7 @@ print_store_motion_mems (FILE * file)\n static bool\n store_ops_ok (const vec<rtx> &x, int *regs_set)\n {\n-  unsigned int i;\n-  rtx temp;\n-  FOR_EACH_VEC_ELT (x, i, temp)\n+  for (rtx temp : x)\n     if (regs_set[REGNO (temp)])\n       return false;\n \n@@ -386,9 +384,7 @@ store_killed_in_insn (const_rtx x, const vec<rtx> &x_regs,\n \n       /* But even a const call reads its parameters.  Check whether the\n \t base of some of registers used in mem is stack pointer.  */\n-      rtx temp;\n-      unsigned int i;\n-      FOR_EACH_VEC_ELT (x_regs, i, temp)\n+      for (rtx temp : x_regs)\n \tif (may_be_sp_based_p (temp))\n \t  return true;\n "}, {"sha": "5f54215f10856e995d972d5e2cd0084346b86610", "filename": "gcc/timevar.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Ftimevar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Ftimevar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.c?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -198,10 +198,8 @@ timer::named_items::pop ()\n void\n timer::named_items::print (FILE *fp, const timevar_time_def *total)\n {\n-  unsigned int i;\n-  const char *item_name;\n   fprintf (fp, \"Client items:\\n\");\n-  FOR_EACH_VEC_ELT (m_names, i, item_name)\n+  for (const char *item_name : m_names)\n     {\n       timer::timevar_def *def = m_hash_map.get (item_name);\n       gcc_assert (def);"}, {"sha": "a016ee47a0220022c9a3fd5338e1069c3e92852b", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -950,9 +950,7 @@ cleanup_control_flow_pre ()\n   /* If we've marked .ABNORMAL_DISPATCHER basic block(s) as visited\n      above, but haven't marked any of their successors as visited,\n      unmark them now, so that they can be removed as useless.  */\n-  basic_block dispatcher_bb;\n-  unsigned int k;\n-  FOR_EACH_VEC_ELT (abnormal_dispatchers, k, dispatcher_bb)\n+  for (basic_block dispatcher_bb : abnormal_dispatchers)\n     {\n       edge e;\n       edge_iterator ei;\n@@ -1015,9 +1013,7 @@ cleanup_tree_cfg_noloop (unsigned ssa_update_flags)\n       if (!dom_info_available_p (CDI_DOMINATORS))\n \tmark_dfs_back_edges ();\n \n-      loop_p loop;\n-      unsigned i;\n-      FOR_EACH_VEC_ELT (*get_loops (cfun), i, loop)\n+      for (loop_p loop : *get_loops (cfun))\n \tif (loop && loop->header)\n \t  {\n \t    basic_block bb = loop->header;"}, {"sha": "6f3352ffb1f44893d0e8c9b9523ae71a32b4b3fb", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 27, "deletions": 76, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -170,10 +170,7 @@ ref_contains_union_access_p (tree ref)\n static void\n dump_data_references (FILE *file, vec<data_reference_p> datarefs)\n {\n-  unsigned int i;\n-  struct data_reference *dr;\n-\n-  FOR_EACH_VEC_ELT (datarefs, i, dr)\n+  for (data_reference *dr : datarefs)\n     dump_data_reference (file, dr);\n }\n \n@@ -378,10 +375,7 @@ DEBUG_FUNCTION void\n print_dir_vectors (FILE *outf, vec<lambda_vector> dir_vects,\n \t\t   int length)\n {\n-  unsigned j;\n-  lambda_vector v;\n-\n-  FOR_EACH_VEC_ELT (dir_vects, j, v)\n+  for (lambda_vector v : dir_vects)\n     print_direction_vector (outf, v, length);\n }\n \n@@ -403,10 +397,7 @@ DEBUG_FUNCTION void\n print_dist_vectors (FILE *outf, vec<lambda_vector> dist_vects,\n \t\t    int length)\n {\n-  unsigned j;\n-  lambda_vector v;\n-\n-  FOR_EACH_VEC_ELT (dist_vects, j, v)\n+  for (lambda_vector v : dist_vects)\n     print_lambda_vector (outf, v, length);\n }\n \n@@ -499,10 +490,7 @@ DEBUG_FUNCTION void\n dump_data_dependence_relations (FILE *file,\n \t\t\t\tvec<ddr_p> ddrs)\n {\n-  unsigned int i;\n-  struct data_dependence_relation *ddr;\n-\n-  FOR_EACH_VEC_ELT (ddrs, i, ddr)\n+  for (data_dependence_relation *ddr : ddrs)\n     dump_data_dependence_relation (file, ddr);\n }\n \n@@ -538,21 +526,17 @@ debug_data_dependence_relations (vec<ddr_p> ddrs)\n DEBUG_FUNCTION void\n dump_dist_dir_vectors (FILE *file, vec<ddr_p> ddrs)\n {\n-  unsigned int i, j;\n-  struct data_dependence_relation *ddr;\n-  lambda_vector v;\n-\n-  FOR_EACH_VEC_ELT (ddrs, i, ddr)\n+  for (data_dependence_relation *ddr : ddrs)\n     if (DDR_ARE_DEPENDENT (ddr) == NULL_TREE && DDR_AFFINE_P (ddr))\n       {\n-\tFOR_EACH_VEC_ELT (DDR_DIST_VECTS (ddr), j, v)\n+\tfor (lambda_vector v : DDR_DIST_VECTS (ddr))\n \t  {\n \t    fprintf (file, \"DISTANCE_V (\");\n \t    print_lambda_vector (file, v, DDR_NB_LOOPS (ddr));\n \t    fprintf (file, \")\\n\");\n \t  }\n \n-\tFOR_EACH_VEC_ELT (DDR_DIR_VECTS (ddr), j, v)\n+\tfor (lambda_vector v : DDR_DIR_VECTS (ddr))\n \t  {\n \t    fprintf (file, \"DIRECTION_V (\");\n \t    print_direction_vector (file, v, DDR_NB_LOOPS (ddr));\n@@ -568,10 +552,7 @@ dump_dist_dir_vectors (FILE *file, vec<ddr_p> ddrs)\n DEBUG_FUNCTION void\n dump_ddrs (FILE *file, vec<ddr_p> ddrs)\n {\n-  unsigned int i;\n-  struct data_dependence_relation *ddr;\n-\n-  FOR_EACH_VEC_ELT (ddrs, i, ddr)\n+  for (data_dependence_relation *ddr : ddrs)\n     dump_data_dependence_relation (file, ddr);\n \n   fprintf (file, \"\\n\\n\");\n@@ -2668,19 +2649,17 @@ create_runtime_alias_checks (class loop *loop,\n   tree part_cond_expr;\n \n   fold_defer_overflow_warnings ();\n-  dr_with_seg_len_pair_t *alias_pair;\n-  unsigned int i;\n-  FOR_EACH_VEC_ELT (*alias_pairs, i, alias_pair)\n+  for (const dr_with_seg_len_pair_t &alias_pair : alias_pairs)\n     {\n-      gcc_assert (alias_pair->flags);\n+      gcc_assert (alias_pair.flags);\n       if (dump_enabled_p ())\n \tdump_printf (MSG_NOTE,\n \t\t     \"create runtime check for data references %T and %T\\n\",\n-\t\t     DR_REF (alias_pair->first.dr),\n-\t\t     DR_REF (alias_pair->second.dr));\n+\t\t     DR_REF (alias_pair.first.dr),\n+\t\t     DR_REF (alias_pair.second.dr));\n \n       /* Create condition expression for each pair data references.  */\n-      create_intersect_range_checks (loop, &part_cond_expr, *alias_pair);\n+      create_intersect_range_checks (loop, &part_cond_expr, alias_pair);\n       if (*cond_expr)\n \t*cond_expr = fold_build2 (TRUTH_AND_EXPR, boolean_type_node,\n \t\t\t\t  *cond_expr, part_cond_expr);\n@@ -3436,10 +3415,7 @@ free_conflict_function (conflict_function *f)\n static void\n free_subscripts (vec<subscript_p> subscripts)\n {\n-  unsigned i;\n-  subscript_p s;\n-\n-  FOR_EACH_VEC_ELT (subscripts, i, s)\n+  for (subscript_p s : subscripts)\n     {\n       free_conflict_function (s->conflicting_iterations_in_a);\n       free_conflict_function (s->conflicting_iterations_in_b);\n@@ -4980,10 +4956,7 @@ analyze_overlapping_iterations (tree chrec_a,\n static void\n save_dist_v (struct data_dependence_relation *ddr, lambda_vector dist_v)\n {\n-  unsigned i;\n-  lambda_vector v;\n-\n-  FOR_EACH_VEC_ELT (DDR_DIST_VECTS (ddr), i, v)\n+  for (lambda_vector v : DDR_DIST_VECTS (ddr))\n     if (lambda_vector_equal (v, dist_v, DDR_NB_LOOPS (ddr)))\n       return;\n \n@@ -4995,10 +4968,7 @@ save_dist_v (struct data_dependence_relation *ddr, lambda_vector dist_v)\n static void\n save_dir_v (struct data_dependence_relation *ddr, lambda_vector dir_v)\n {\n-  unsigned i;\n-  lambda_vector v;\n-\n-  FOR_EACH_VEC_ELT (DDR_DIR_VECTS (ddr), i, v)\n+  for (lambda_vector v : DDR_DIR_VECTS (ddr))\n     if (lambda_vector_equal (v, dir_v, DDR_NB_LOOPS (ddr)))\n       return;\n \n@@ -5135,10 +5105,7 @@ static bool\n invariant_access_functions (const struct data_dependence_relation *ddr,\n \t\t\t    int lnum)\n {\n-  unsigned i;\n-  subscript *sub;\n-\n-  FOR_EACH_VEC_ELT (DDR_SUBSCRIPTS (ddr), i, sub)\n+  for (subscript *sub : DDR_SUBSCRIPTS (ddr))\n     if (!evolution_function_is_invariant_p (SUB_ACCESS_FN (sub, 0), lnum)\n \t|| !evolution_function_is_invariant_p (SUB_ACCESS_FN (sub, 1), lnum))\n       return false;\n@@ -5307,10 +5274,7 @@ add_distance_for_zero_overlaps (struct data_dependence_relation *ddr)\n static inline bool\n same_access_functions (const struct data_dependence_relation *ddr)\n {\n-  unsigned i;\n-  subscript *sub;\n-\n-  FOR_EACH_VEC_ELT (DDR_SUBSCRIPTS (ddr), i, sub)\n+  for (subscript *sub : DDR_SUBSCRIPTS (ddr))\n     if (!eq_evolutions_p (SUB_ACCESS_FN (sub, 0),\n \t\t\t  SUB_ACCESS_FN (sub, 1)))\n       return false;\n@@ -5587,11 +5551,8 @@ static bool\n access_functions_are_affine_or_constant_p (const struct data_reference *a,\n \t\t\t\t\t   const class loop *loop_nest)\n {\n-  unsigned int i;\n   vec<tree> fns = DR_ACCESS_FNS (a);\n-  tree t;\n-\n-  FOR_EACH_VEC_ELT (fns, i, t)\n+  for (tree t : fns)\n     if (!evolution_function_is_invariant_p (t, loop_nest->num)\n \t&& !evolution_function_is_affine_multivariate_p (t, loop_nest->num))\n       return false;\n@@ -5902,20 +5863,18 @@ opt_result\n find_data_references_in_stmt (class loop *nest, gimple *stmt,\n \t\t\t      vec<data_reference_p> *datarefs)\n {\n-  unsigned i;\n   auto_vec<data_ref_loc, 2> references;\n-  data_ref_loc *ref;\n   data_reference_p dr;\n \n   if (get_references_in_stmt (stmt, &references))\n     return opt_result::failure_at (stmt, \"statement clobbers memory: %G\",\n \t\t\t\t   stmt);\n \n-  FOR_EACH_VEC_ELT (references, i, ref)\n+  for (const data_ref_loc &ref : references)\n     {\n       dr = create_data_ref (nest ? loop_preheader_edge (nest) : NULL,\n-\t\t\t    loop_containing_stmt (stmt), ref->ref,\n-\t\t\t    stmt, ref->is_read, ref->is_conditional_in_stmt);\n+\t\t\t    loop_containing_stmt (stmt), ref.ref,\n+\t\t\t    stmt, ref.is_read, ref.is_conditional_in_stmt);\n       gcc_assert (dr != NULL);\n       datarefs->safe_push (dr);\n     }\n@@ -5933,19 +5892,17 @@ bool\n graphite_find_data_references_in_stmt (edge nest, loop_p loop, gimple *stmt,\n \t\t\t\t       vec<data_reference_p> *datarefs)\n {\n-  unsigned i;\n   auto_vec<data_ref_loc, 2> references;\n-  data_ref_loc *ref;\n   bool ret = true;\n   data_reference_p dr;\n \n   if (get_references_in_stmt (stmt, &references))\n     return false;\n \n-  FOR_EACH_VEC_ELT (references, i, ref)\n+  for (const data_ref_loc &ref : references)\n     {\n-      dr = create_data_ref (nest, loop, ref->ref, stmt, ref->is_read,\n-\t\t\t    ref->is_conditional_in_stmt);\n+      dr = create_data_ref (nest, loop, ref.ref, stmt, ref.is_read,\n+\t\t\t    ref.is_conditional_in_stmt);\n       gcc_assert (dr != NULL);\n       datarefs->safe_push (dr);\n     }\n@@ -6253,10 +6210,7 @@ free_dependence_relation (struct data_dependence_relation *ddr)\n void\n free_dependence_relations (vec<ddr_p> dependence_relations)\n {\n-  unsigned int i;\n-  struct data_dependence_relation *ddr;\n-\n-  FOR_EACH_VEC_ELT (dependence_relations, i, ddr)\n+  for (data_dependence_relation *ddr : dependence_relations)\n     if (ddr)\n       free_dependence_relation (ddr);\n \n@@ -6268,10 +6222,7 @@ free_dependence_relations (vec<ddr_p> dependence_relations)\n void\n free_data_refs (vec<data_reference_p> datarefs)\n {\n-  unsigned int i;\n-  struct data_reference *dr;\n-\n-  FOR_EACH_VEC_ELT (datarefs, i, dr)\n+  for (data_reference *dr : datarefs)\n     free_data_ref (dr);\n   datarefs.release ();\n }"}, {"sha": "4a0dc3b6b60262a9e8354e8d711c0cb66ba6016e", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -3260,13 +3260,10 @@ copy_debug_stmt (gdebug *stmt, copy_body_data *id)\n static void\n copy_debug_stmts (copy_body_data *id)\n {\n-  size_t i;\n-  gdebug *stmt;\n-\n   if (!id->debug_stmts.exists ())\n     return;\n \n-  FOR_EACH_VEC_ELT (id->debug_stmts, i, stmt)\n+  for (gdebug *stmt : id->debug_stmts)\n     copy_debug_stmt (stmt, id);\n \n   id->debug_stmts.release ();"}, {"sha": "8045e34df261c841f7537c037145b4ffdbf27239", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -1638,14 +1638,11 @@ debug_defs_stack (int n)\n void\n dump_currdefs (FILE *file)\n {\n-  unsigned i;\n-  tree var;\n-\n   if (symbols_to_rename.is_empty ())\n     return;\n \n   fprintf (file, \"\\n\\nCurrent reaching definitions\\n\\n\");\n-  FOR_EACH_VEC_ELT (symbols_to_rename, i, var)\n+  for (tree var : symbols_to_rename)\n     {\n       common_info *info = get_common_info (var);\n       fprintf (file, \"CURRDEF (\");\n@@ -2069,18 +2066,16 @@ rewrite_update_phi_arguments (basic_block bb)\n {\n   edge e;\n   edge_iterator ei;\n-  unsigned i;\n \n   FOR_EACH_EDGE (e, ei, bb->succs)\n     {\n-      gphi *phi;\n       vec<gphi *> phis;\n \n       if (!bitmap_bit_p (blocks_with_phis_to_rewrite, e->dest->index))\n \tcontinue;\n \n       phis = phis_to_rewrite[e->dest->index];\n-      FOR_EACH_VEC_ELT (phis, i, phi)\n+      for (gphi *phi : phis)\n \t{\n \t  tree arg, lhs_sym, reaching_def = NULL;\n \t  use_operand_p arg_p;"}, {"sha": "d93ec90b002edd6f8b51a16fed3f7a4920fcf330", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -1258,8 +1258,6 @@ propagate_tree_value_into_stmt (gimple_stmt_iterator *gsi, tree val)\n unsigned\n clean_up_loop_closed_phi (function *fun)\n {\n-  unsigned i;\n-  edge e;\n   gphi *phi;\n   tree rhs;\n   tree lhs;\n@@ -1280,7 +1278,7 @@ clean_up_loop_closed_phi (function *fun)\n     {\n       /* Check each exit edege of loop.  */\n       auto_vec<edge> exits = get_loop_exit_edges (loop);\n-      FOR_EACH_VEC_ELT (exits, i, e)\n+      for (edge e : exits)\n \tif (single_pred_p (e->dest))\n \t  /* Walk over loop-closed PHIs.  */\n \t  for (gsi = gsi_start_phis (e->dest); !gsi_end_p (gsi);)"}, {"sha": "2694d1ab452f42ee5cac0ab5a3d72975f48369a4", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -290,9 +290,7 @@ vect_analyze_possibly_independent_ddr (data_dependence_relation *ddr,\n \t\t\t\t       int loop_depth, unsigned int *max_vf)\n {\n   class loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n-  lambda_vector dist_v;\n-  unsigned int i;\n-  FOR_EACH_VEC_ELT (DDR_DIST_VECTS (ddr), i, dist_v)\n+  for (lambda_vector &dist_v : DDR_DIST_VECTS (ddr))\n     {\n       int dist = dist_v[loop_depth];\n       if (dist != 0 && !(dist > 0 && DDR_REVERSED_P (ddr)))\n@@ -729,9 +727,8 @@ vect_slp_analyze_node_dependences (vec_info *vinfo, slp_tree node,\n \t\t{\n \t\t  if (stmt_info != last_store_info)\n \t\t    continue;\n-\t\t  unsigned i;\n-\t\t  stmt_vec_info store_info;\n-\t\t  FOR_EACH_VEC_ELT (stores, i, store_info)\n+\n+\t\t  for (stmt_vec_info &store_info : stores)\n \t\t    {\n \t\t      data_reference *store_dr\n \t\t\t= STMT_VINFO_DATA_REF (store_info);\n@@ -804,9 +801,8 @@ vect_slp_analyze_node_dependences (vec_info *vinfo, slp_tree node,\n \t\t{\n \t\t  if (stmt_info != last_store_info)\n \t\t    continue;\n-\t\t  unsigned i;\n-\t\t  stmt_vec_info store_info;\n-\t\t  FOR_EACH_VEC_ELT (stores, i, store_info)\n+\n+\t\t  for (stmt_vec_info &store_info : stores)\n \t\t    {\n \t\t      data_reference *store_dr\n \t\t\t= STMT_VINFO_DATA_REF (store_info);\n@@ -868,9 +864,7 @@ vect_slp_analyze_instance_dependence (vec_info *vinfo, slp_instance instance)\n \n   /* Verify we can sink loads to the vectorized stmt insert location,\n      special-casing stores of this instance.  */\n-  slp_tree load;\n-  unsigned int i;\n-  FOR_EACH_VEC_ELT (SLP_INSTANCE_LOADS (instance), i, load)\n+  for (slp_tree &load : SLP_INSTANCE_LOADS (instance))\n     if (! vect_slp_analyze_node_dependences (vinfo, load,\n \t\t\t\t\t     store\n \t\t\t\t\t     ? SLP_TREE_SCALAR_STMTS (store)\n@@ -927,9 +921,7 @@ vect_record_base_alignments (vec_info *vinfo)\n {\n   loop_vec_info loop_vinfo = dyn_cast <loop_vec_info> (vinfo);\n   class loop *loop = loop_vinfo ? LOOP_VINFO_LOOP (loop_vinfo) : NULL;\n-  data_reference *dr;\n-  unsigned int i;\n-  FOR_EACH_VEC_ELT (vinfo->shared->datarefs, i, dr)\n+  for (data_reference *dr : vinfo->shared->datarefs)\n     {\n       dr_vec_info *dr_info = vinfo->lookup_dr (dr);\n       stmt_vec_info stmt_info = dr_info->stmt;\n@@ -1463,10 +1455,8 @@ vect_get_peeling_costs_all_drs (loop_vec_info loop_vinfo,\n \t\t\t\tbool unknown_misalignment)\n {\n   vec<data_reference_p> datarefs = LOOP_VINFO_DATAREFS (loop_vinfo);\n-  unsigned i;\n-  data_reference *dr;\n \n-  FOR_EACH_VEC_ELT (datarefs, i, dr)\n+  for (data_reference *dr : datarefs)\n     {\n       dr_vec_info *dr_info = loop_vinfo->lookup_dr (dr);\n       if (!vect_relevant_for_alignment_p (dr_info))\n@@ -1575,13 +1565,11 @@ static bool\n vect_peeling_supportable (loop_vec_info loop_vinfo, dr_vec_info *dr0_info,\n \t\t\t  unsigned npeel)\n {\n-  unsigned i;\n-  struct data_reference *dr = NULL;\n   vec<data_reference_p> datarefs = LOOP_VINFO_DATAREFS (loop_vinfo);\n   enum dr_alignment_support supportable_dr_alignment;\n \n   /* Ensure that all data refs can be vectorized after the peel.  */\n-  FOR_EACH_VEC_ELT (datarefs, i, dr)\n+  for (data_reference *dr : datarefs)\n     {\n       int save_misalignment;\n "}, {"sha": "9748043f3ee8c2e4a3f161289169cae3ef8cd289", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f207ab314c071c6060c7c9a429fcf29fd87b594/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=3f207ab314c071c6060c7c9a429fcf29fd87b594", "patch": "@@ -469,10 +469,7 @@ vec_info::vec_info (vec_info::vec_kind kind_in, void *target_cost_data_in,\n \n vec_info::~vec_info ()\n {\n-  slp_instance instance;\n-  unsigned int i;\n-\n-  FOR_EACH_VEC_ELT (slp_instances, i, instance)\n+  for (slp_instance &instance : slp_instances)\n     vect_free_slp_instance (instance);\n \n   destroy_cost_data (target_cost_data);\n@@ -739,9 +736,7 @@ vec_info::set_vinfo_for_stmt (gimple *stmt, stmt_vec_info info, bool check_ro)\n void\n vec_info::free_stmt_vec_infos (void)\n {\n-  unsigned int i;\n-  stmt_vec_info info;\n-  FOR_EACH_VEC_ELT (stmt_vec_infos, i, info)\n+  for (stmt_vec_info &info : stmt_vec_infos)\n     if (info != NULL)\n       free_stmt_vec_info (info);\n   stmt_vec_infos.release ();"}]}