{"sha": "0e0a19c5dfa42b6b5fae4b60842e3f903d8e9bed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUwYTE5YzVkZmE0MmI2YjVmYWU0YjYwODQyZTNmOTAzZDhlOWJlZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-10T12:01:23Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-10T12:01:23Z"}, "message": "* dumpfile.h: Tabify.\n\nFrom-SVN: r247832", "tree": {"sha": "49a070571fcca7fea13f5cbc2901a4c93d087af3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49a070571fcca7fea13f5cbc2901a4c93d087af3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e0a19c5dfa42b6b5fae4b60842e3f903d8e9bed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e0a19c5dfa42b6b5fae4b60842e3f903d8e9bed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e0a19c5dfa42b6b5fae4b60842e3f903d8e9bed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e0a19c5dfa42b6b5fae4b60842e3f903d8e9bed/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "33e2d6f8bae92f2009f882ba5d1cb7a9534f45be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33e2d6f8bae92f2009f882ba5d1cb7a9534f45be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33e2d6f8bae92f2009f882ba5d1cb7a9534f45be"}], "stats": {"total": 83, "additions": 44, "deletions": 39}, "files": [{"sha": "91a14b8bb6009193e787e747cd096af01b923246", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0a19c5dfa42b6b5fae4b60842e3f903d8e9bed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0a19c5dfa42b6b5fae4b60842e3f903d8e9bed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e0a19c5dfa42b6b5fae4b60842e3f903d8e9bed", "patch": "@@ -1,3 +1,7 @@\n+2017-05-10  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* dumpfile.h: Tabify.\n+\n 2017-05-10  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \tPR target/80671"}, {"sha": "053442318e63537f56151b4bbcdaa80fa67609fe", "filename": "gcc/dumpfile.h", "status": "modified", "additions": 40, "deletions": 39, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0a19c5dfa42b6b5fae4b60842e3f903d8e9bed/gcc%2Fdumpfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0a19c5dfa42b6b5fae4b60842e3f903d8e9bed/gcc%2Fdumpfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.h?ref=0e0a19c5dfa42b6b5fae4b60842e3f903d8e9bed", "patch": "@@ -27,17 +27,17 @@ along with GCC; see the file COPYING3.  If not see\n enum tree_dump_index\n {\n   TDI_none,\t\t\t/* No dump */\n-  TDI_cgraph,                   /* dump function call graph.  */\n-  TDI_inheritance,              /* dump type inheritance graph.  */\n+  TDI_cgraph,\t\t\t/* dump function call graph.  */\n+  TDI_inheritance,\t\t/* dump type inheritance graph.  */\n   TDI_clones,\t\t\t/* dump IPA cloning decisions.  */\n   TDI_tu,\t\t\t/* dump the whole translation unit.  */\n   TDI_class,\t\t\t/* dump class hierarchy.  */\n   TDI_original,\t\t\t/* dump each function before optimizing it */\n   TDI_generic,\t\t\t/* dump each function after genericizing it */\n   TDI_nested,\t\t\t/* dump each function after unnesting it */\n-  TDI_tree_all,                 /* enable all the GENERIC/GIMPLE dumps.  */\n-  TDI_rtl_all,                  /* enable all the RTL dumps.  */\n-  TDI_ipa_all,                  /* enable all the IPA dumps.  */\n+  TDI_tree_all,\t\t\t/* enable all the GENERIC/GIMPLE dumps.  */\n+  TDI_rtl_all,\t\t\t/* enable all the RTL dumps.  */\n+  TDI_ipa_all,\t\t\t/* enable all the IPA dumps.  */\n \n   TDI_end\n };\n@@ -49,7 +49,7 @@ enum tree_dump_index\n    allow that.  */\n #define TDF_ADDRESS\t(1 << 0)\t/* dump node addresses */\n #define TDF_SLIM\t(1 << 1)\t/* don't go wild following links */\n-#define TDF_RAW  \t(1 << 2)\t/* don't unparse the function */\n+#define TDF_RAW\t\t(1 << 2)\t/* don't unparse the function */\n #define TDF_DETAILS\t(1 << 3)\t/* show more detailed info about\n \t\t\t\t\t   each pass */\n #define TDF_STATS\t(1 << 4)\t/* dump various statistics about\n@@ -66,11 +66,11 @@ enum tree_dump_index\n \n #define TDF_GRAPH\t(1 << 13)\t/* a graph dump is being emitted */\n #define TDF_MEMSYMS\t(1 << 14)\t/* display memory symbols in expr.\n-                                           Implies TDF_VOPS.  */\n+\t\t\t\t\t   Implies TDF_VOPS.  */\n \n #define TDF_DIAGNOSTIC\t(1 << 15)\t/* A dump to be put in a diagnostic\n \t\t\t\t\t   message.  */\n-#define TDF_VERBOSE     (1 << 16)       /* A dump that uses the full tree\n+#define TDF_VERBOSE\t(1 << 16)\t/* A dump that uses the full tree\n \t\t\t\t\t   dumper to print stmts.  */\n #define TDF_RHS_ONLY\t(1 << 17)\t/* a flag to only print the RHS of\n \t\t\t\t\t   a gimple stmt.  */\n@@ -84,49 +84,50 @@ enum tree_dump_index\n #define TDF_SCEV\t(1 << 24)\t/* Dump SCEV details.  */\n #define TDF_COMMENT\t(1 << 25)\t/* Dump lines with prefix \";;\"  */\n #define TDF_GIMPLE\t(1 << 26)\t/* Dump in GIMPLE FE syntax  */\n-#define MSG_OPTIMIZED_LOCATIONS  (1 << 27)  /* -fopt-info optimized sources */\n-#define MSG_MISSED_OPTIMIZATION  (1 << 28)  /* missed opportunities */\n-#define MSG_NOTE                 (1 << 29)  /* general optimization info */\n-#define MSG_ALL         (MSG_OPTIMIZED_LOCATIONS | MSG_MISSED_OPTIMIZATION \\\n-                         | MSG_NOTE)\n+#define MSG_OPTIMIZED_LOCATIONS\t (1 << 27)  /* -fopt-info optimized sources */\n+#define MSG_MISSED_OPTIMIZATION\t (1 << 28)  /* missed opportunities */\n+#define MSG_NOTE\t\t (1 << 29)  /* general optimization info */\n+#define MSG_ALL\t\t(MSG_OPTIMIZED_LOCATIONS | MSG_MISSED_OPTIMIZATION \\\n+\t\t\t | MSG_NOTE)\n \n \n /* Flags to control high-level -fopt-info dumps.  Usually these flags\n    define a group of passes.  An optimization pass can be part of\n    multiple groups.  */\n-#define OPTGROUP_NONE        (0)\n-#define OPTGROUP_IPA         (1 << 1)   /* IPA optimization passes */\n-#define OPTGROUP_LOOP        (1 << 2)   /* Loop optimization passes */\n-#define OPTGROUP_INLINE      (1 << 3)   /* Inlining passes */\n-#define OPTGROUP_OMP         (1 << 4)   /* OMP (Offloading and Multi\n+#define OPTGROUP_NONE\t     (0)\n+#define OPTGROUP_IPA\t     (1 << 1)\t/* IPA optimization passes */\n+#define OPTGROUP_LOOP\t     (1 << 2)\t/* Loop optimization passes */\n+#define OPTGROUP_INLINE\t     (1 << 3)\t/* Inlining passes */\n+#define OPTGROUP_OMP\t     (1 << 4)\t/* OMP (Offloading and Multi\n \t\t\t\t\t   Processing) transformations */\n-#define OPTGROUP_VEC         (1 << 5)   /* Vectorization passes */\n-#define OPTGROUP_OTHER       (1 << 6)   /* All other passes */\n+#define OPTGROUP_VEC\t     (1 << 5)\t/* Vectorization passes */\n+#define OPTGROUP_OTHER\t     (1 << 6)\t/* All other passes */\n #define OPTGROUP_ALL\t     (OPTGROUP_IPA | OPTGROUP_LOOP | OPTGROUP_INLINE \\\n-                              | OPTGROUP_OMP | OPTGROUP_VEC | OPTGROUP_OTHER)\n+\t\t\t      | OPTGROUP_OMP | OPTGROUP_VEC | OPTGROUP_OTHER)\n \n /* Define a tree dump switch.  */\n struct dump_file_info\n {\n-  const char *suffix;           /* suffix to give output file.  */\n-  const char *swtch;            /* command line dump switch */\n-  const char *glob;             /* command line glob  */\n-  const char *pfilename;        /* filename for the pass-specific stream  */\n-  const char *alt_filename;     /* filename for the -fopt-info stream  */\n-  FILE *pstream;                /* pass-specific dump stream  */\n-  FILE *alt_stream;             /* -fopt-info stream */\n-  int pflags;                   /* dump flags */\n-  int optgroup_flags;           /* optgroup flags for -fopt-info */\n-  int alt_flags;                /* flags for opt-info */\n-  int pstate;                   /* state of pass-specific stream */\n-  int alt_state;                /* state of the -fopt-info stream */\n-  int num;                      /* dump file number */\n-  bool owns_strings;            /* fields \"suffix\", \"swtch\", \"glob\" can be\n+  const char *suffix;\t\t/* suffix to give output file.  */\n+  const char *swtch;\t\t/* command line dump switch */\n+  const char *glob;\t\t/* command line glob  */\n+  const char *pfilename;\t/* filename for the pass-specific stream  */\n+  const char *alt_filename;\t/* filename for the -fopt-info stream  */\n+  FILE *pstream;\t\t/* pass-specific dump stream  */\n+  FILE *alt_stream;\t\t/* -fopt-info stream */\n+  int pflags;\t\t\t/* dump flags */\n+  int optgroup_flags;\t\t/* optgroup flags for -fopt-info */\n+  int alt_flags;\t\t/* flags for opt-info */\n+  int pstate;\t\t\t/* state of pass-specific stream */\n+  int alt_state;\t\t/* state of the -fopt-info stream */\n+  int num;\t\t\t/* dump file number */\n+  bool owns_strings;\t\t/* fields \"suffix\", \"swtch\", \"glob\" can be\n \t\t\t\t   const strings, or can be dynamically\n \t\t\t\t   allocated, needing free.  */\n-  bool graph_dump_initialized;  /* When a given dump file is being initialized,\n-\t\t\t\t   this flag is set to true if the corresponding\n-\t\t\t\t   TDF_graph dump file has also been\n+  bool graph_dump_initialized;\t/* When a given dump file is being\n+\t\t\t\t   initialized, this flag is set to\n+\t\t\t\t   true if the corresponding TDF_graph\n+\t\t\t\t   dump file has also been\n \t\t\t\t   initialized.  */\n };\n \n@@ -137,7 +138,7 @@ extern int opt_info_switch_p (const char *);\n extern const char *dump_flag_name (int);\n extern void dump_printf (int, const char *, ...) ATTRIBUTE_PRINTF_2;\n extern void dump_printf_loc (int, source_location,\n-                             const char *, ...) ATTRIBUTE_PRINTF_3;\n+\t\t\t     const char *, ...) ATTRIBUTE_PRINTF_3;\n extern void dump_basic_block (int, basic_block, int);\n extern void dump_generic_expr_loc (int, source_location, int, tree);\n extern void dump_generic_expr (int, int, tree);"}]}