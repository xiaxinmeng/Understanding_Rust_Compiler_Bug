{"sha": "012f609e02aa915808883cda0159cb59751b37f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEyZjYwOWUwMmFhOTE1ODA4ODgzY2RhMDE1OWNiNTk3NTFiMzdmNA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-06-04T23:27:57Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-06-04T23:27:57Z"}, "message": "rs6000: Simplify VS[ra]* for VSX_[BDF]\n\nWhen used in VSX_B, VSX_D, or VSX_F, both <VSr> and <VSa> are always\njust \"wa\" now.  Similarly <VSr2> and <VSr3>.  The former of those is\nalways \"wa\", so we can remove the mode attribute completely.\n\n\n\t* config/rs6000/vsx.md (define_mode_attr VSr2): Delete.\n\t(rest of file): Replace all <VSa>, <VSr>, <VSr2>, and <VSr3> that are\n\tused with VSX_B, VSX_D, or VSX_F, with just \"wa\".\n\nFrom-SVN: r271929", "tree": {"sha": "5213c6ad7e6c03eb165a79276dcf38b1ecf3b983", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5213c6ad7e6c03eb165a79276dcf38b1ecf3b983"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/012f609e02aa915808883cda0159cb59751b37f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/012f609e02aa915808883cda0159cb59751b37f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/012f609e02aa915808883cda0159cb59751b37f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/012f609e02aa915808883cda0159cb59751b37f4/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ad441c263d5aeedc9c152642cba54dcba7799b2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad441c263d5aeedc9c152642cba54dcba7799b2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad441c263d5aeedc9c152642cba54dcba7799b2b"}], "stats": {"total": 213, "additions": 103, "deletions": 110}, "files": [{"sha": "8353f0478684ec342168c7b57dd3aeb566893fde", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/012f609e02aa915808883cda0159cb59751b37f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/012f609e02aa915808883cda0159cb59751b37f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=012f609e02aa915808883cda0159cb59751b37f4", "patch": "@@ -1,3 +1,9 @@\n+2019-06-04  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/vsx.md (define_mode_attr VSr2): Delete.\n+\t(rest of file): Replace all <VSa>, <VSr>, <VSr2>, and <VSr3> that are\n+\tused with VSX_B, VSX_D, or VSX_F, with just \"wa\".\n+\n 2019-06-04  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \tPR target/78263"}, {"sha": "11e50bf162360b3ee606a94ce6bb4f2aae4f45c2", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 97, "deletions": 110, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/012f609e02aa915808883cda0159cb59751b37f4/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/012f609e02aa915808883cda0159cb59751b37f4/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=012f609e02aa915808883cda0159cb59751b37f4", "patch": "@@ -123,16 +123,7 @@\n \t\t\t (TI    \"wa\")])\n \n ;; Map the register class used for float<->int conversions (floating point side)\n-;; VSr2 is the preferred register class, VSr3 is any register class that will\n-;; hold the data\n-(define_mode_attr VSr2\t[(V2DF  \"wa\")\n-\t\t\t (V4SF  \"wa\")\n-\t\t\t (DF    \"wa\")\n-\t\t\t (SF\t\"ww\")\n-\t\t\t (DI\t\"wa\")\n-\t\t\t (KF\t\"wq\")\n-\t\t\t (TF\t\"wp\")])\n-\n+;; VSr3 is any register class that will hold the data\n (define_mode_attr VSr3\t[(V2DF  \"wa\")\n \t\t\t (V4SF  \"wa\")\n \t\t\t (DF    \"wa\")\n@@ -429,7 +420,7 @@\n ;; The patterns for LE permuted loads and stores come before the general\n ;; VSX moves so they match first.\n (define_insn_and_split \"*vsx_le_perm_load_<mode>\"\n-  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=<VSa>\")\n+  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=wa\")\n         (match_operand:VSX_D 1 \"indexed_or_indirect_operand\" \"Z\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"#\"\n@@ -644,7 +635,7 @@\n \n (define_insn \"*vsx_le_perm_store_<mode>\"\n   [(set (match_operand:VSX_D 0 \"indexed_or_indirect_operand\" \"=Z\")\n-        (match_operand:VSX_D 1 \"vsx_register_operand\" \"+<VSa>\"))]\n+        (match_operand:VSX_D 1 \"vsx_register_operand\" \"+wa\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"#\"\n   [(set_attr \"type\" \"vecstore\")\n@@ -1599,25 +1590,25 @@\n ;; instructions are now combined with the insn for the traditional floating\n ;; point unit.\n (define_insn \"*vsx_add<mode>3\"\n-  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n-        (plus:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")\n-\t\t    (match_operand:VSX_F 2 \"vsx_register_operand\" \"<VSr>,<VSa>\")))]\n+  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n+        (plus:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n+\t\t    (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvadd<VSs> %x0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"*vsx_sub<mode>3\"\n-  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n-        (minus:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")\n-\t\t     (match_operand:VSX_F 2 \"vsx_register_operand\" \"<VSr>,<VSa>\")))]\n+  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa>\")\n+        (minus:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n+\t\t     (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvsub<VSs> %x0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"*vsx_mul<mode>3\"\n-  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n-        (mult:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")\n-\t\t    (match_operand:VSX_F 2 \"vsx_register_operand\" \"<VSr>,<VSa>\")))]\n+  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n+        (mult:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n+\t\t    (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvmul<VSs> %x0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n@@ -1663,9 +1654,9 @@\n   [(set_attr \"type\" \"mul\")])\n \n (define_insn \"*vsx_div<mode>3\"\n-  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n-        (div:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")\n-\t\t   (match_operand:VSX_F 2 \"vsx_register_operand\" \"<VSr>,<VSa>\")))]\n+  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n+        (div:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n+\t\t   (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvdiv<VSs> %x0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_div>\")])\n@@ -1794,71 +1785,71 @@\n })\n \n (define_insn \"*vsx_tdiv<mode>3_internal\"\n-  [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=x,x\")\n-\t(unspec:CCFP [(match_operand:VSX_B 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")\n-\t\t      (match_operand:VSX_B 2 \"vsx_register_operand\" \"<VSr>,<VSa>\")]\n+  [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=x\")\n+\t(unspec:CCFP [(match_operand:VSX_B 1 \"vsx_register_operand\" \"wa\")\n+\t\t      (match_operand:VSX_B 2 \"vsx_register_operand\" \"wa\")]\n \t\t   UNSPEC_VSX_TDIV))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"x<VSv>tdiv<VSs> %0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"vsx_fre<mode>2\"\n-  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n-\t(unspec:VSX_F [(match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")]\n+  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n+\t(unspec:VSX_F [(match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")]\n \t\t      UNSPEC_FRES))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvre<VSs> %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"*vsx_neg<mode>2\"\n-  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n-        (neg:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")))]\n+  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n+        (neg:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvneg<VSs> %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"*vsx_abs<mode>2\"\n-  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n-        (abs:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")))]\n+  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n+        (abs:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvabs<VSs> %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"vsx_nabs<mode>2\"\n-  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n+  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n         (neg:VSX_F\n \t (abs:VSX_F\n-\t  (match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,<VSa>\"))))]\n+\t  (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\"))))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvnabs<VSs> %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"vsx_smax<mode>3\"\n-  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n-        (smax:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")\n-\t\t    (match_operand:VSX_F 2 \"vsx_register_operand\" \"<VSr>,<VSa>\")))]\n+  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n+        (smax:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n+\t\t    (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvmax<VSs> %x0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"*vsx_smin<mode>3\"\n-  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n-        (smin:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")\n-\t\t    (match_operand:VSX_F 2 \"vsx_register_operand\" \"<VSr>,<VSa>\")))]\n+  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n+        (smin:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n+\t\t    (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvmin<VSs> %x0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"*vsx_sqrt<mode>2\"\n-  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n-        (sqrt:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")))]\n+  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n+        (sqrt:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvsqrt<VSs> %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_sqrt>\")])\n \n (define_insn \"*vsx_rsqrte<mode>2\"\n-  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n-\t(unspec:VSX_F [(match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")]\n+  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n+\t(unspec:VSX_F [(match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")]\n \t\t      UNSPEC_RSQRT))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvrsqrte<VSs> %x0,%x1\"\n@@ -1891,8 +1882,8 @@\n })\n \n (define_insn \"*vsx_tsqrt<mode>2_internal\"\n-  [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=x,x\")\n-\t(unspec:CCFP [(match_operand:VSX_B 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")]\n+  [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=x\")\n+\t(unspec:CCFP [(match_operand:VSX_B 1 \"vsx_register_operand\" \"wa\")]\n \t\t     UNSPEC_VSX_TSQRT))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"x<VSv>tsqrt<VSs> %0,%x1\"\n@@ -1929,31 +1920,27 @@\n   [(set_attr \"type\" \"vecdouble\")])\n \n (define_insn \"*vsx_fms<mode>4\"\n-  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,<VSr>,?<VSa>,?<VSa>\")\n+  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa,wa\")\n \t(fma:VSX_F\n-\t  (match_operand:VSX_F 1 \"vsx_register_operand\" \"%<VSr>,<VSr>,<VSa>,<VSa>\")\n-\t  (match_operand:VSX_F 2 \"vsx_register_operand\" \"<VSr>,0,<VSa>,0\")\n+\t  (match_operand:VSX_F 1 \"vsx_register_operand\" \"%wa,wa\")\n+\t  (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa,0\")\n \t  (neg:VSX_F\n-\t    (match_operand:VSX_F 3 \"vsx_register_operand\" \"0,<VSr>,0,<VSa>\"))))]\n+\t    (match_operand:VSX_F 3 \"vsx_register_operand\" \"0,wa\"))))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"@\n-   xvmsuba<VSs> %x0,%x1,%x2\n-   xvmsubm<VSs> %x0,%x1,%x3\n    xvmsuba<VSs> %x0,%x1,%x2\n    xvmsubm<VSs> %x0,%x1,%x3\"\n   [(set_attr \"type\" \"<VStype_mul>\")])\n \n (define_insn \"*vsx_nfma<mode>4\"\n-  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,<VSr>,?<VSa>,?<VSa>\")\n+  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa,wa\")\n \t(neg:VSX_F\n \t (fma:VSX_F\n-\t  (match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,<VSr>,<VSa>,<VSa>\")\n-\t  (match_operand:VSX_F 2 \"vsx_register_operand\" \"<VSr>,0,<VSa>,0\")\n-\t  (match_operand:VSX_F 3 \"vsx_register_operand\" \"0,<VSr>,0,<VSa>\"))))]\n+\t  (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa,wa\")\n+\t  (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa,0\")\n+\t  (match_operand:VSX_F 3 \"vsx_register_operand\" \"0,wa\"))))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"@\n-   xvnmadda<VSs> %x0,%x1,%x2\n-   xvnmaddm<VSs> %x0,%x1,%x3\n    xvnmadda<VSs> %x0,%x1,%x2\n    xvnmaddm<VSs> %x0,%x1,%x3\"\n   [(set_attr \"type\" \"<VStype_mul>\")])\n@@ -1989,25 +1976,25 @@\n \n ;; Vector conditional expressions (no scalar version for these instructions)\n (define_insn \"vsx_eq<mode>\"\n-  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n-\t(eq:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")\n-\t\t  (match_operand:VSX_F 2 \"vsx_register_operand\" \"<VSr>,<VSa>\")))]\n+  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n+\t(eq:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n+\t\t  (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvcmpeq<VSs> %x0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"vsx_gt<mode>\"\n-  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n-\t(gt:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")\n-\t\t  (match_operand:VSX_F 2 \"vsx_register_operand\" \"<VSr>,<VSa>\")))]\n+  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n+\t(gt:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n+\t\t  (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvcmpgt<VSs> %x0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"*vsx_ge<mode>\"\n-  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n-\t(ge:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")\n-\t\t  (match_operand:VSX_F 2 \"vsx_register_operand\" \"<VSr>,<VSa>\")))]\n+  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n+\t(ge:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n+\t\t  (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvcmpge<VSs> %x0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n@@ -2017,10 +2004,10 @@\n (define_insn \"*vsx_eq_<mode>_p\"\n   [(set (reg:CC CR6_REGNO)\n \t(unspec:CC\n-\t [(eq:CC (match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,?<VSa>\")\n-\t\t (match_operand:VSX_F 2 \"vsx_register_operand\" \"<VSr>,?<VSa>\"))]\n+\t [(eq:CC (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n+\t\t (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\"))]\n \t UNSPEC_PREDICATE))\n-   (set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n+   (set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n \t(eq:VSX_F (match_dup 1)\n \t\t  (match_dup 2)))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n@@ -2030,10 +2017,10 @@\n (define_insn \"*vsx_gt_<mode>_p\"\n   [(set (reg:CC CR6_REGNO)\n \t(unspec:CC\n-\t [(gt:CC (match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,?<VSa>\")\n-\t\t (match_operand:VSX_F 2 \"vsx_register_operand\" \"<VSr>,?<VSa>\"))]\n+\t [(gt:CC (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n+\t\t (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\"))]\n \t UNSPEC_PREDICATE))\n-   (set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n+   (set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n \t(gt:VSX_F (match_dup 1)\n \t\t  (match_dup 2)))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n@@ -2043,10 +2030,10 @@\n (define_insn \"*vsx_ge_<mode>_p\"\n   [(set (reg:CC CR6_REGNO)\n \t(unspec:CC\n-\t [(ge:CC (match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,?<VSa>\")\n-\t\t (match_operand:VSX_F 2 \"vsx_register_operand\" \"<VSr>,?<VSa>\"))]\n+\t [(ge:CC (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n+\t\t (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\"))]\n \t UNSPEC_PREDICATE))\n-   (set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n+   (set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n \t(ge:VSX_F (match_dup 1)\n \t\t  (match_dup 2)))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n@@ -2078,10 +2065,10 @@\n \n ;; Copy sign\n (define_insn \"vsx_copysign<mode>3\"\n-  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n+  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:VSX_F\n-\t [(match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")\n-\t  (match_operand:VSX_F 2 \"vsx_register_operand\" \"<VSr>,<VSa>\")]\n+\t [(match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n+\t  (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\")]\n \t UNSPEC_COPYSIGN))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvcpsgn<VSs> %x0,%x2,%x1\"\n@@ -2094,76 +2081,76 @@\n ;; Don't use vsx_register_operand here, use gpc_reg_operand to match rs6000.md\n ;; in allowing virtual registers.\n (define_insn \"vsx_float<VSi><mode>2\"\n-  [(set (match_operand:VSX_F 0 \"gpc_reg_operand\" \"=<VSr>,?<VSa>\")\n-\t(float:VSX_F (match_operand:<VSI> 1 \"gpc_reg_operand\" \"<VSr2>,<VSr3>\")))]\n+  [(set (match_operand:VSX_F 0 \"gpc_reg_operand\" \"=wa\")\n+\t(float:VSX_F (match_operand:<VSI> 1 \"gpc_reg_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvcvsx<VSc><VSs> %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"vsx_floatuns<VSi><mode>2\"\n-  [(set (match_operand:VSX_F 0 \"gpc_reg_operand\" \"=<VSr>,?<VSa>\")\n-\t(unsigned_float:VSX_F (match_operand:<VSI> 1 \"gpc_reg_operand\" \"<VSr2>,<VSr3>\")))]\n+  [(set (match_operand:VSX_F 0 \"gpc_reg_operand\" \"=wa\")\n+\t(unsigned_float:VSX_F (match_operand:<VSI> 1 \"gpc_reg_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvcvux<VSc><VSs> %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"vsx_fix_trunc<mode><VSi>2\"\n-  [(set (match_operand:<VSI> 0 \"gpc_reg_operand\" \"=<VSr2>,?<VSr3>\")\n-\t(fix:<VSI> (match_operand:VSX_F 1 \"gpc_reg_operand\" \"<VSr>,<VSa>\")))]\n+  [(set (match_operand:<VSI> 0 \"gpc_reg_operand\" \"=wa\")\n+\t(fix:<VSI> (match_operand:VSX_F 1 \"gpc_reg_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"x<VSv>cv<VSs>sx<VSc>s %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"vsx_fixuns_trunc<mode><VSi>2\"\n-  [(set (match_operand:<VSI> 0 \"gpc_reg_operand\" \"=<VSr2>,?<VSr3>\")\n-\t(unsigned_fix:<VSI> (match_operand:VSX_F 1 \"gpc_reg_operand\" \"<VSr>,<VSa>\")))]\n+  [(set (match_operand:<VSI> 0 \"gpc_reg_operand\" \"=wa\")\n+\t(unsigned_fix:<VSI> (match_operand:VSX_F 1 \"gpc_reg_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"x<VSv>cv<VSs>ux<VSc>s %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n ;; Math rounding functions\n (define_insn \"vsx_x<VSv>r<VSs>i\"\n-  [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n-\t(unspec:VSX_B [(match_operand:VSX_B 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")]\n+  [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=wa\")\n+\t(unspec:VSX_B [(match_operand:VSX_B 1 \"vsx_register_operand\" \"wa\")]\n \t\t      UNSPEC_VSX_ROUND_I))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"x<VSv>r<VSs>i %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"vsx_x<VSv>r<VSs>ic\"\n-  [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n-\t(unspec:VSX_B [(match_operand:VSX_B 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")]\n+  [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=wa\")\n+\t(unspec:VSX_B [(match_operand:VSX_B 1 \"vsx_register_operand\" \"wa\")]\n \t\t      UNSPEC_VSX_ROUND_IC))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"x<VSv>r<VSs>ic %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"vsx_btrunc<mode>2\"\n-  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n-\t(fix:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")))]\n+  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n+\t(fix:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvr<VSs>iz %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"*vsx_b2trunc<mode>2\"\n-  [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n-\t(unspec:VSX_B [(match_operand:VSX_B 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")]\n+  [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=wa\")\n+\t(unspec:VSX_B [(match_operand:VSX_B 1 \"vsx_register_operand\" \"wa\")]\n \t\t      UNSPEC_FRIZ))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"x<VSv>r<VSs>iz %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"vsx_floor<mode>2\"\n-  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n-\t(unspec:VSX_F [(match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")]\n+  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n+\t(unspec:VSX_F [(match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")]\n \t\t      UNSPEC_FRIM))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvr<VSs>im %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"vsx_ceil<mode>2\"\n-  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n-\t(unspec:VSX_F [(match_operand:VSX_F 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")]\n+  [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n+\t(unspec:VSX_F [(match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")]\n \t\t      UNSPEC_FRIP))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvr<VSs>ip %x0,%x1\"\n@@ -2987,9 +2974,9 @@\n ;; xxpermdi for little endian loads and stores.  We need several of\n ;; these since the form of the PARALLEL differs by mode.\n (define_insn \"*vsx_xxpermdi2_le_<mode>\"\n-  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=<VSa>\")\n+  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=wa\")\n         (vec_select:VSX_D\n-          (match_operand:VSX_D 1 \"vsx_register_operand\" \"<VSa>\")\n+          (match_operand:VSX_D 1 \"vsx_register_operand\" \"wa\")\n           (parallel [(const_int 1) (const_int 0)])))]\n   \"!BYTES_BIG_ENDIAN && VECTOR_MEM_VSX_P (<MODE>mode)\"\n   \"xxpermdi %x0,%x1,%x1,2\"\n@@ -3036,7 +3023,7 @@\n ;; lxvd2x for little endian loads.  We need several of\n ;; these since the form of the PARALLEL differs by mode.\n (define_insn \"*vsx_lxvd2x2_le_<mode>\"\n-  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=<VSa>\")\n+  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=wa\")\n         (vec_select:VSX_D\n           (match_operand:VSX_D 1 \"memory_operand\" \"Z\")\n           (parallel [(const_int 1) (const_int 0)])))]\n@@ -3087,7 +3074,7 @@\n (define_insn \"*vsx_stxvd2x2_le_<mode>\"\n   [(set (match_operand:VSX_D 0 \"memory_operand\" \"=Z\")\n         (vec_select:VSX_D\n-          (match_operand:VSX_D 1 \"vsx_register_operand\" \"<VSa>\")\n+          (match_operand:VSX_D 1 \"vsx_register_operand\" \"wa\")\n           (parallel [(const_int 1) (const_int 0)])))]\n   \"!BYTES_BIG_ENDIAN && VECTOR_MEM_VSX_P (<MODE>mode) && !TARGET_P9_VECTOR\"\n   \"stxvd2x %x1,%y0\"\n@@ -3184,11 +3171,11 @@\n ;; register was picked.  Limit the scalar value to FPRs for now.\n \n (define_insn \"vsx_extract_<mode>\"\n-  [(set (match_operand:<VS_scalar> 0 \"gpc_reg_operand\" \"=d,    d,     wr, wr\")\n+  [(set (match_operand:<VS_scalar> 0 \"gpc_reg_operand\" \"=d, d,  wr, wr\")\n \t(vec_select:<VS_scalar>\n-\t (match_operand:VSX_D 1 \"gpc_reg_operand\"      \"<VSa>, <VSa>, wa, wa\")\n+\t (match_operand:VSX_D 1 \"gpc_reg_operand\"      \"wa, wa, wa, wa\")\n \t (parallel\n-\t  [(match_operand:QI 2 \"const_0_to_1_operand\"  \"wD,    n,     wD, n\")])))]\n+\t  [(match_operand:QI 2 \"const_0_to_1_operand\"  \"wD, n,  wD, n\")])))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n {\n   int element = INTVAL (operands[2]);\n@@ -4103,7 +4090,7 @@\n })\n \n (define_insn \"vsx_splat_<mode>_reg\"\n-  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=<VSX_D:VSa>,we\")\n+  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=wa,we\")\n \t(vec_duplicate:VSX_D\n \t (match_operand:<VS_scalar> 1 \"gpc_reg_operand\" \"wa,b\")))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n@@ -4112,8 +4099,8 @@\n    mtvsrdd %x0,%1,%1\"\n   [(set_attr \"type\" \"vecperm\")])\n \n-(define_insn \"vsx_splat_<VSX_D:mode>_mem\"\n-  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=<VSX_D:VSa>\")\n+(define_insn \"vsx_splat_<mode>_mem\"\n+  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=wa\")\n \t(vec_duplicate:VSX_D\n \t (match_operand:<VSX_D:VS_scalar> 1 \"memory_operand\" \"Z\")))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\""}]}