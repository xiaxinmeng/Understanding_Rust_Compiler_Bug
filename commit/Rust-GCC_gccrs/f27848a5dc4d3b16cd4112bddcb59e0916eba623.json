{"sha": "f27848a5dc4d3b16cd4112bddcb59e0916eba623", "node_id": "C_kwDOANBUbNoAKGYyNzg0OGE1ZGM0ZDNiMTZjZDQxMTJiZGRjYjU5ZTA5MTZlYmE2MjM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-27T12:06:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-28T06:06:52Z"}, "message": "tree-optimization/105219 - bogus max iters for vectorized epilogue\n\nThe following makes sure to take into account prologue peeling\nwhen trying to narrow down the maximum number of iterations\ncomputed for the vectorized epilogue.  A similar issue exists when\npeeling for gaps.\n\n2022-04-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/105219\n\t* tree-vect-loop.cc (vect_transform_loop): Disable\n\tspecial code narrowing the vectorized epilogue max\n\titerations when peeling for alignment or gaps was in effect.\n\n\t* gcc.dg/vect/pr105219.c: New testcase.", "tree": {"sha": "cf6a126f05a2d77182cdd45e354249beebf0ad45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf6a126f05a2d77182cdd45e354249beebf0ad45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f27848a5dc4d3b16cd4112bddcb59e0916eba623", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f27848a5dc4d3b16cd4112bddcb59e0916eba623", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f27848a5dc4d3b16cd4112bddcb59e0916eba623", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f27848a5dc4d3b16cd4112bddcb59e0916eba623/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84c1c9b013faf8cdac31db3f6612bd9d5f70ddb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84c1c9b013faf8cdac31db3f6612bd9d5f70ddb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84c1c9b013faf8cdac31db3f6612bd9d5f70ddb3"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "0cb7ae2f4d6dc2a236740d34b59b771255b067b7", "filename": "gcc/testsuite/gcc.dg/vect/pr105219.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f27848a5dc4d3b16cd4112bddcb59e0916eba623/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr105219.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f27848a5dc4d3b16cd4112bddcb59e0916eba623/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr105219.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr105219.c?ref=f27848a5dc4d3b16cd4112bddcb59e0916eba623", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-O3\" } */\n+/* { dg-additional-options \"-mtune=intel\" { target x86_64-*-* i?86-*-* } } */\n+\n+#include \"tree-vect.h\"\n+\n+int data[128];\n+\n+void __attribute((noipa))\n+foo (int *data, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    data[i] = i;\n+}\n+\n+int main()\n+{\n+  check_vect ();\n+  for (int start = 0; start < 16; ++start)\n+    for (int n = 1; n < 3*16; ++n)\n+      {\n+        __builtin_memset (data, 0, sizeof (data));\n+        foo (&data[start], n);\n+        for (int j = 0; j < n; ++j)\n+          if (data[start + j] != j)\n+            __builtin_abort ();\n+      }\n+  return 0;\n+}"}, {"sha": "f53a634a390c389df13f83a4ba8eb5bfa4aaddad", "filename": "gcc/tree-vect-loop.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f27848a5dc4d3b16cd4112bddcb59e0916eba623/gcc%2Ftree-vect-loop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f27848a5dc4d3b16cd4112bddcb59e0916eba623/gcc%2Ftree-vect-loop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.cc?ref=f27848a5dc4d3b16cd4112bddcb59e0916eba623", "patch": "@@ -9977,7 +9977,11 @@ vect_transform_loop (loop_vec_info loop_vinfo, gimple *loop_vectorized_call)\n \t\t\t    lowest_vf) - 1\n \t   : wi::udiv_floor (loop->nb_iterations_upper_bound + bias_for_lowest,\n \t\t\t     lowest_vf) - 1);\n-      if (main_vinfo)\n+      if (main_vinfo\n+\t  /* Both peeling for alignment and peeling for gaps can end up\n+\t     with the scalar epilogue running for more than VF-1 iterations.  */\n+\t  && !main_vinfo->peeling_for_alignment\n+\t  && !main_vinfo->peeling_for_gaps)\n \t{\n \t  unsigned int bound;\n \t  poly_uint64 main_iters"}]}