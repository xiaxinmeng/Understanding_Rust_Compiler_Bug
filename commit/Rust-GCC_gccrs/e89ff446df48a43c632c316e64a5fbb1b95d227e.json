{"sha": "e89ff446df48a43c632c316e64a5fbb1b95d227e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg5ZmY0NDZkZjQ4YTQzYzYzMmMzMTZlNjRhNWZiYjFiOTVkMjI3ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-07-14T05:25:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-07-14T05:25:37Z"}, "message": "re PR c++/58511 ([c++11] ICE using static const member variable in constexpr)\n\n\tPR c++/58511\n\t* semantics.c (is_instantiation_of_constexpr): Return true for\n\tdefaulted functions, too.\n\t(explain_invalid_constexpr_fn): Only use\n\texplain_implicit_non_constexpr if !DECL_DECLARED_CONSTEXPR_P.\n\t* method.c (explain_implicit_non_constexpr): Pass\n\tDECL_INHERITED_CTOR_BASE to explain_implicit_non_constexpr.\n\nFrom-SVN: r212507", "tree": {"sha": "6b91ee2146e4d91b83d33d812cb537248cb4a833", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b91ee2146e4d91b83d33d812cb537248cb4a833"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e89ff446df48a43c632c316e64a5fbb1b95d227e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e89ff446df48a43c632c316e64a5fbb1b95d227e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e89ff446df48a43c632c316e64a5fbb1b95d227e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e89ff446df48a43c632c316e64a5fbb1b95d227e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ea3b9879b670a30e176046fc8e69b5c9e862c80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ea3b9879b670a30e176046fc8e69b5c9e862c80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ea3b9879b670a30e176046fc8e69b5c9e862c80"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "3c35c10481693201a2f50dc3c959509d694584d9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89ff446df48a43c632c316e64a5fbb1b95d227e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89ff446df48a43c632c316e64a5fbb1b95d227e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e89ff446df48a43c632c316e64a5fbb1b95d227e", "patch": "@@ -1,5 +1,13 @@\n 2014-07-13  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/58511\n+\t* semantics.c (is_instantiation_of_constexpr): Return true for\n+\tdefaulted functions, too.\n+\t(explain_invalid_constexpr_fn): Only use\n+\texplain_implicit_non_constexpr if !DECL_DECLARED_CONSTEXPR_P.\n+\t* method.c (explain_implicit_non_constexpr): Pass\n+\tDECL_INHERITED_CTOR_BASE to explain_implicit_non_constexpr.\n+\n \tPR c++/58611\n \t* decl.c (check_initializer): Don't finish_compound_literal\n \ton erroneous constexpr init."}, {"sha": "1fa4be8d55229d7eddf4cb00cd31851f3e78a339", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89ff446df48a43c632c316e64a5fbb1b95d227e/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89ff446df48a43c632c316e64a5fbb1b95d227e/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=e89ff446df48a43c632c316e64a5fbb1b95d227e", "patch": "@@ -1575,7 +1575,8 @@ explain_implicit_non_constexpr (tree decl)\n   synthesized_method_walk (DECL_CLASS_CONTEXT (decl),\n \t\t\t   special_function_p (decl), const_p,\n \t\t\t   NULL, NULL, NULL, &dummy, true,\n-\t\t\t   NULL_TREE, NULL_TREE);\n+\t\t\t   DECL_INHERITED_CTOR_BASE (decl),\n+\t\t\t   FUNCTION_FIRST_USER_PARMTYPE (decl));\n }\n \n /* DECL is an instantiation of an inheriting constructor template.  Deduce"}, {"sha": "c87764d58d46dbf2373fcbf2d24ded07b68af690", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89ff446df48a43c632c316e64a5fbb1b95d227e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89ff446df48a43c632c316e64a5fbb1b95d227e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=e89ff446df48a43c632c316e64a5fbb1b95d227e", "patch": "@@ -3949,13 +3949,16 @@ emit_associated_thunks (tree fn)\n }\n \n /* Returns true iff FUN is an instantiation of a constexpr function\n-   template.  */\n+   template or a defaulted constexpr function.  */\n \n static inline bool\n is_instantiation_of_constexpr (tree fun)\n {\n-  return (DECL_TEMPLOID_INSTANTIATION (fun)\n-\t  && DECL_DECLARED_CONSTEXPR_P (DECL_TI_TEMPLATE (fun)));\n+  return ((DECL_TEMPLOID_INSTANTIATION (fun)\n+\t   && DECL_DECLARED_CONSTEXPR_P (DECL_TI_TEMPLATE (fun)))\n+\t  || (DECL_DEFAULTED_FN (fun)\n+\t      && DECL_DECLARED_CONSTEXPR_P (fun)));\n+\n }\n \n /* Generate RTL for FN.  */\n@@ -8048,7 +8051,7 @@ explain_invalid_constexpr_fn (tree fun)\n   if (is_valid_constexpr_fn (fun, true))\n     {\n       /* Then if it's OK, the body.  */\n-      if (DECL_DEFAULTED_FN (fun))\n+      if (!DECL_DECLARED_CONSTEXPR_P (fun))\n \texplain_implicit_non_constexpr (fun);\n       else\n \t{"}, {"sha": "ee8757f4dcf464a90ac9072312217f8683835819", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-inhctor1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89ff446df48a43c632c316e64a5fbb1b95d227e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-inhctor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89ff446df48a43c632c316e64a5fbb1b95d227e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-inhctor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-inhctor1.C?ref=e89ff446df48a43c632c316e64a5fbb1b95d227e", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/58511\n+// { dg-do compile { target c++11 } }\n+\n+struct A\n+{\n+  constexpr A(int, int = i) {}\n+  static const int i;\n+};\n+\n+struct B : A\n+{\n+  using A::A;\t\t\t// { dg-error \"A::i\" }\n+};\n+\n+constexpr B b(0);\t\t// { dg-error \"B::B\" }"}, {"sha": "6ac414b7437d148652e463103eb36cf342a364ec", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89ff446df48a43c632c316e64a5fbb1b95d227e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89ff446df48a43c632c316e64a5fbb1b95d227e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi3.C?ref=e89ff446df48a43c632c316e64a5fbb1b95d227e", "patch": "@@ -10,9 +10,9 @@ struct B\n {\n   A a1 = 1;\t\t\t// { dg-error \"\" }\n   A a2 { 2 };\n-  A a3 = { 3 };\t\t\t// { dg-error \"\" }\n+  A a3 = { 3 };\t\t\t// { dg-error \"explicit\" }\n };\n \n constexpr B b;\t\t\t// { dg-error \"B::B\" }\n \n-// { dg-message \"a1. is invalid\" \"\" { target *-*-* } 11 }\n+// { dg-prune-output \"uninitialized member\" }"}]}