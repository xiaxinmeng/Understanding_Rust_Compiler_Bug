{"sha": "6d4331962422e9333a9ca194aa9f81fc997f3cc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ0MzMxOTYyNDIyZTkzMzNhOWNhMTk0YWE5ZjgxZmM5OTdmM2NjNw==", "commit": {"author": {"name": "Craig Burley", "email": "burley@gnu.org", "date": "1998-02-22T19:25:07Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-02-22T19:25:07Z"}, "message": "Various changes from Craig.  See the appropriate ChangeLog files.\n\nFrom-SVN: r18182", "tree": {"sha": "facdf38294937d58cfe1b183702b631ef826e62c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/facdf38294937d58cfe1b183702b631ef826e62c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d4331962422e9333a9ca194aa9f81fc997f3cc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d4331962422e9333a9ca194aa9f81fc997f3cc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d4331962422e9333a9ca194aa9f81fc997f3cc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d4331962422e9333a9ca194aa9f81fc997f3cc7/comments", "author": null, "committer": null, "parents": [{"sha": "575094a2d6edced0069c17ebac487cde56816243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/575094a2d6edced0069c17ebac487cde56816243", "html_url": "https://github.com/Rust-GCC/gccrs/commit/575094a2d6edced0069c17ebac487cde56816243"}], "stats": {"total": 278, "additions": 212, "deletions": 66}, "files": [{"sha": "bd3d47d5de4e608a65fd2a8b9ecf9d646a7c5467", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4331962422e9333a9ca194aa9f81fc997f3cc7/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4331962422e9333a9ca194aa9f81fc997f3cc7/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=6d4331962422e9333a9ca194aa9f81fc997f3cc7", "patch": "@@ -14,6 +14,45 @@ Sun Jan 11 02:14:47 1998  Craig Burley  <burley@gnu.org>\n \t* stb.c (ffestb_R10014_, ffestb_R10016_, ffestb_R10018_,\n \tffestb_R100110_): Restructure `for' loop for style.\n \n+Tue Dec 23 14:58:04 1997  Craig Burley  <burley@gnu.org>\n+\n+\t* com.c (ffecom_gfrt_basictype):\n+\t(ffecom_gfrt_kindtype):\n+\t(ffecom_make_gfrt_):\n+\t(FFECOM_rttypeVOIDSTAR_): New return type `void *', for\n+\tthe SIGNAL intrinsic.\n+\t* com-rt.def (FFECOM_rttypeSIGNAL): Now returns `void *'.\n+\t* intdoc.c: Replace `p' kind specifier with `7'.\n+\t* intrin.c (ffeintrin_check_, ffeintrin_init_0): Replace\n+\t`p' kind specifier with `7'.\n+\t* intrin.def (FFEINTRIN_impLOC, FFEINTRIN_impSIGNAL_func,\n+\tFFEINTRIN_impSIGNAL_subr): Replace `p' specifier with `7'.\n+\tAlso, SIGNAL now returns a `void *' status, not `int'.\n+\n+Mon Dec 22 12:41:07 1997  Craig Burley  <burley@gnu.org>\n+\n+\t* intrin.c (ffeintrin_init_0): Remove duplicate\n+\tcheck for `!'.\n+\n+Sun Dec 14 02:49:58 1997  Craig Burley  <burley@gnu.org>\n+\n+\t* intrin.c (ffeintrin_init_0): Fix up indentation a bit.\n+\tFix bug that prevented checking of arguments other\n+\tthan the first.\n+\n+\t* intdoc.c: Fix up indentation a bit.\n+\n+Mon Dec  1 19:12:36 1997  Craig Burley  <burley@gnu.org>\n+\n+\t* intrin.c (ffeintrin_check_): Fix up indentation a bit more.\n+\n+Sun Nov 30 22:22:22 1997  Craig Burley  <burley@gnu.org>\n+\n+\t* intdoc.c: Minor fix-ups.\n+\n+\t* intrin.c (ffeintrin_check_): Fix up indentation a bit.\n+\n+\n Fri Oct 10 13:00:48 1997  Craig Burley  <burley@gnu.ai.mit.edu>\n \n \t* ste.c (ffeste_begin_iterdo_): Fix loop setup so iteration"}, {"sha": "f124379c9cfbb834ba48e60cfff15336aa188607", "filename": "gcc/f/com-rt.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4331962422e9333a9ca194aa9f81fc997f3cc7/gcc%2Ff%2Fcom-rt.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4331962422e9333a9ca194aa9f81fc997f3cc7/gcc%2Ff%2Fcom-rt.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom-rt.def?ref=6d4331962422e9333a9ca194aa9f81fc997f3cc7", "patch": "@@ -225,7 +225,7 @@ DEFGFRT (FFECOM_gfrtRENAME, \"G77_rename_0\", FFECOM_rttypeINTEGER_, \"&a&a\", FALSE\n DEFGFRT (FFECOM_gfrtSECNDS, \"G77_secnds_0\", FFECOM_rttypeREAL_F2C_, \"&f\", FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtSECOND, \"G77_second_0\", FFECOM_rttypeREAL_F2C_, 0, FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtSIGN, \"r_sign\", FFECOM_rttypeREAL_F2C_, \"&f&f\", FALSE, FALSE)\n-DEFGFRT (FFECOM_gfrtL_SIGNAL, \"G77_signal_0\", FFECOM_rttypeFTNINT_, \"&i0\", FALSE, FALSE)\n+DEFGFRT (FFECOM_gfrtL_SIGNAL, \"G77_signal_0\", FFECOM_rttypeVOIDSTAR_, \"&i0\", FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtSIN, \"r_sin\", FFECOM_rttypeREAL_F2C_, \"&f\", FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtSINH, \"r_sinh\", FFECOM_rttypeREAL_F2C_, \"&f\", FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtSLEEP, \"G77_sleep_0\", FFECOM_rttypeVOID_, \"&i\", FALSE, FALSE)"}, {"sha": "4d8e02611f4c86e54a8ecdb8126262986ac13a8d", "filename": "gcc/f/com.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4331962422e9333a9ca194aa9f81fc997f3cc7/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4331962422e9333a9ca194aa9f81fc997f3cc7/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=6d4331962422e9333a9ca194aa9f81fc997f3cc7", "patch": "@@ -345,6 +345,7 @@ tree ffecom_f2c_ptr_to_ftnint_type_node;\n typedef enum\n   {\n     FFECOM_rttypeVOID_,\n+    FFECOM_rttypeVOIDSTAR_,\t/* C's `void *' type. */\n     FFECOM_rttypeFTNINT_,\t/* f2c's `ftnint' type. */\n     FFECOM_rttypeINTEGER_,\t/* f2c's `integer' type. */\n     FFECOM_rttypeLONGINT_,\t/* f2c's `longint' type. */\n@@ -7448,6 +7449,10 @@ ffecom_make_gfrt_ (ffecomGfrt ix)\n       ttype = void_type_node;\n       break;\n \n+    case FFECOM_rttypeVOIDSTAR_:\n+      ttype = TREE_TYPE (null_pointer_node);\t/* `void *'. */\n+      break;\n+\n     case FFECOM_rttypeFTNINT_:\n       ttype = ffecom_f2c_ftnint_type_node;\n       break;\n@@ -11632,6 +11637,7 @@ ffecom_gfrt_basictype (ffecomGfrt gfrt)\n   switch (ffecom_gfrt_type_[gfrt])\n     {\n     case FFECOM_rttypeVOID_:\n+    case FFECOM_rttypeVOIDSTAR_:\n       return FFEINFO_basictypeNONE;\n \n     case FFECOM_rttypeFTNINT_:\n@@ -11678,6 +11684,7 @@ ffecom_gfrt_kindtype (ffecomGfrt gfrt)\n   switch (ffecom_gfrt_type_[gfrt])\n     {\n     case FFECOM_rttypeVOID_:\n+    case FFECOM_rttypeVOIDSTAR_:\n       return FFEINFO_kindtypeNONE;\n \n     case FFECOM_rttypeFTNINT_:"}, {"sha": "6e88df4dbbb2b8cf2225c9f064370485ea6eb9ca", "filename": "gcc/f/intdoc.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4331962422e9333a9ca194aa9f81fc997f3cc7/gcc%2Ff%2Fintdoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4331962422e9333a9ca194aa9f81fc997f3cc7/gcc%2Ff%2Fintdoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintdoc.c?ref=6d4331962422e9333a9ca194aa9f81fc997f3cc7", "patch": "@@ -494,7 +494,7 @@ external procedure.\\n\\\n       if ((argi[0] == '*')\n \t  || (argi[0] == 'n')\n \t  || (argi[0] == '+')\n-      || (argi[0] == 'p'))\n+\t  || (argi[0] == 'p'))\n \tprintf (\"-1, @var{%s}-2, @dots{}, @var{%s}-n\",\n \t\targc, argc);\n     }\n@@ -559,7 +559,7 @@ this intrinsic is valid only when used as the argument to\\n\\\n \t}\n #if 0\n       else if ((c[0] == 'I')\n-\t       && (c[1] == 'p'))\n+\t       && (c[1] == '7'))\n \tprintf (\", the exact type being wide enough to hold a pointer\\n\\\n on the target system (typically @code{INTEGER(KIND=1)} or @code{INTEGER(KIND=4)}).\\n\\n\");\n #endif\n@@ -730,10 +730,6 @@ types of all the arguments.\\n\\n\");\n \t\t      argument_name_string (imp, 0));\n \t      break;\n \n-\t    case 'p':\n-\t      printf (\"@code{INTEGER} wide enough to hold a pointer\");\n-\t      break;\n-\n \t    default:\n \t      assert (\"Ia\" == NULL);\n \t      break;\n@@ -848,7 +844,7 @@ types of all the arguments.\\n\\n\");\n \t      break;\n \n \t    default:\n-\t      assert (\"N1\" == NULL);\n+\t      assert (\"E1\" == NULL);\n \t      break;\n \t    }\n \t  break;\n@@ -1209,10 +1205,6 @@ print_type_string (char *c)\n \t  printf (\"@code{INTEGER(KIND=%d)}\", (kind - '0'));\n \t  break;\n \n-\tcase 'p':\n-\t  printf (\"@code{INTEGER(KIND=0)}\");\n-\t  break;\n-\n \tdefault:\n \t  assert (\"Ia\" == NULL);\n \t  break;\n@@ -1336,7 +1328,7 @@ print_type_string (char *c)\n       break;\n \n     default:\n-      assert (\"arg type?\" == NULL);\n+      assert (\"type?\" == NULL);\n       break;\n     }\n }"}, {"sha": "80046b730c2bed653ca226fe9a529f1421242524", "filename": "gcc/f/intdoc.in", "status": "modified", "additions": 90, "deletions": 7, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4331962422e9333a9ca194aa9f81fc997f3cc7/gcc%2Ff%2Fintdoc.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4331962422e9333a9ca194aa9f81fc997f3cc7/gcc%2Ff%2Fintdoc.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintdoc.in?ref=6d4331962422e9333a9ca194aa9f81fc997f3cc7", "patch": "@@ -2190,12 +2190,13 @@ DEFDOC (SIGNAL_subr, \"Muck with signal handling.\", \"\\\n If @var{@2@} is a an @code{EXTERNAL} routine, arranges for it to be\n invoked with a single integer argument (of system-dependent length)\n when signal @var{@1@} occurs.\n-If @var{@1@} is an integer, it can be\n-used to turn off handling of signal @var{@2@} or revert to its default\n+If @var{@2@} is an integer, it can be\n+used to turn off handling of signal @var{@1@} or revert to its default\n action.\n See @code{signal(2)}.\n \n-Note that @var{@2@} will be called using C conventions, so its value in\n+Note that @var{@2@} will be called using C conventions,\n+so the value of its argument in Fortran terms\n Fortran terms is obtained by applying @code{%LOC()} (or @var{LOC()}) to it.\n \n The value returned by @code{signal(2)} is written to @var{@3@}, if\n@@ -2205,24 +2206,106 @@ Otherwise the return value is ignored.\n Some non-GNU implementations of Fortran provide this intrinsic as\n only a function, not as a subroutine, or do not support the\n (optional) @var{@3@} argument.\n+\n+@emph{Warning:} Use of the @code{libf2c} run-time library function\n+@samp{signal_} directly\n+(such as via @samp{EXTERNAL SIGNAL})\n+requires use of the @code{%VAL()} construct\n+to pass an @code{INTEGER} value\n+(such as @samp{SIG_IGN} or @samp{SIG_DFL})\n+for the @var{@2@} argument.\n+\n+However, while @samp{CALL SIGNAL(@var{signum}, %VAL(SIG_IGN))}\n+works when @samp{SIGNAL} is treated as an external procedure\n+(and resolves, at link time, to @code{libf2c}'s @samp{signal_} routine),\n+this construct is not valid when @samp{SIGNAL} is recognized\n+as the intrinsic of that name.\n+\n+Therefore, for maximum portability and reliability,\n+code such references to the @samp{SIGNAL} facility as follows:\n+\n+@smallexample\n+INTRINSIC SIGNAL\n+@dots{}\n+CALL SIGNAL(@var{signum}, SIG_IGN)\n+@end smallexample\n+\n+@code{g77} will compile such a call correctly,\n+while other compilers will generally either do so as well\n+or reject the @samp{INTRINSIC SIGNAL} statement via a diagnostic,\n+allowing you to take appropriate action.\n \")\n \n DEFDOC (SIGNAL_func, \"Muck with signal handling.\", \"\\\n If @var{@2@} is a an @code{EXTERNAL} routine, arranges for it to be\n invoked with a single integer argument (of system-dependent length)\n when signal @var{@1@} occurs.\n-If @var{@1@} is an integer, it can be\n-used to turn off handling of signal @var{@2@} or revert to its default\n+If @var{@2@} is an integer, it can be\n+used to turn off handling of signal @var{@1@} or revert to its default\n action.\n See @code{signal(2)}.\n \n-Note that @var{@2@} will be called using C conventions, so its value in\n-Fortran terms is obtained by applying @code{%LOC()} (or @var{LOC()}) to it.\n+Note that @var{@2@} will be called using C conventions,\n+so the value of its argument in Fortran terms\n+is obtained by applying @code{%LOC()} (or @var{LOC()}) to it.\n \n The value returned by @code{signal(2)} is returned.\n \n Due to the side effects performed by this intrinsic, the function\n form is not recommended.\n+\n+@emph{Warning:} If the returned value is stored in\n+an @code{INTEGER(KIND=1)} (default @code{INTEGER}) argument,\n+truncation of the original return value occurs on some systems\n+(such as Alphas, which have 64-bit pointers but 32-bit default integers),\n+with no warning issued by @code{g77} under normal circumstances.\n+\n+Therefore, the following code fragment might silently fail on\n+some systems:\n+\n+@smallexample\n+INTEGER RTN\n+EXTERNAL MYHNDL\n+RTN = SIGNAL(@var{signum}, MYHNDL)\n+@dots{}\n+! Restore original handler:\n+RTN = SIGNAL(@var{signum}, RTN)\n+@end smallexample\n+\n+The reason for the failure is that @samp{RTN} might not hold\n+all the information on the original handler for the signal,\n+thus restoring an invalid handler.\n+This bug could manifest itself as a spurious run-time failure\n+at an arbitrary point later during the program's execution,\n+for example.\n+\n+@emph{Warning:} Use of the @code{libf2c} run-time library function\n+@samp{signal_} directly\n+(such as via @samp{EXTERNAL SIGNAL})\n+requires use of the @code{%VAL()} construct\n+to pass an @code{INTEGER} value\n+(such as @samp{SIG_IGN} or @samp{SIG_DFL})\n+for the @var{@2@} argument.\n+\n+However, while @samp{RTN = SIGNAL(@var{signum}, %VAL(SIG_IGN))}\n+works when @samp{SIGNAL} is treated as an external procedure\n+(and resolves, at link time, to @code{libf2c}'s @samp{signal_} routine),\n+this construct is not valid when @samp{SIGNAL} is recognized\n+as the intrinsic of that name.\n+\n+Therefore, for maximum portability and reliability,\n+code such references to the @samp{SIGNAL} facility as follows:\n+\n+@smallexample\n+INTRINSIC SIGNAL\n+@dots{}\n+RTN = SIGNAL(@var{signum}, SIG_IGN)\n+@end smallexample\n+\n+@code{g77} will compile such a call correctly,\n+while other compilers will generally either do so as well\n+or reject the @samp{INTRINSIC SIGNAL} statement via a diagnostic,\n+allowing you to take appropriate action.\n \")\n \n DEFDOC (KILL_func, \"Signal a process.\", \"\\"}, {"sha": "553a6d63d557a3ab5d0b0d2816ada7e89ae65710", "filename": "gcc/f/intrin.c", "status": "modified", "additions": 42, "deletions": 36, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4331962422e9333a9ca194aa9f81fc997f3cc7/gcc%2Ff%2Fintrin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4331962422e9333a9ca194aa9f81fc997f3cc7/gcc%2Ff%2Fintrin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintrin.c?ref=6d4331962422e9333a9ca194aa9f81fc997f3cc7", "patch": "@@ -398,6 +398,10 @@ ffeintrin_check_ (ffeintrinImp imp, ffebldOp op,\n \t\t    case 6:\n \t\t      akt = 3;\n \t\t      break;\n+\n+\t\t    case 7:\n+\t\t      akt = ffecom_pointer_kind ();\n+\t\t      break;\n \t\t    }\n \t\t}\n \t      okay &= anynum || (ffeinfo_kindtype (i) == akt);\n@@ -593,6 +597,10 @@ ffeintrin_check_ (ffeintrinImp imp, ffebldOp op,\n \t    case 6:\n \t      kt = 3;\n \t      break;\n+\n+\t    case 7:\n+\t      kt = ffecom_pointer_kind ();\n+\t      break;\n \t    }\n \t}\n       break;\n@@ -603,10 +611,6 @@ ffeintrin_check_ (ffeintrinImp imp, ffebldOp op,\n       kt = 1;\n       break;\n \n-    case 'p':\n-      kt = ffecom_pointer_kind ();\n-      break;\n-\n     case '=':\n       need_col = TRUE;\n       /* Fall through.  */\n@@ -991,6 +995,10 @@ ffeintrin_check_ (ffeintrinImp imp, ffebldOp op,\n \t\t    case 6:\n \t\t      akt = 3;\n \t\t      break;\n+\n+\t\t    case 7:\n+\t\t      akt = ffecom_pointer_kind ();\n+\t\t      break;\n \t\t    }\n \t\t}\n \t      okay &= anynum || (ffeinfo_kindtype (i) == akt);\n@@ -1569,25 +1577,24 @@ ffeintrin_init_0 ()\n \n       if ((c[0] != '-')\n \t  && (c[0] != 'A')\n-      && (c[0] != 'C')\n-      && (c[0] != 'I')\n-      && (c[0] != 'L')\n-      && (c[0] != 'R')\n-      && (c[0] != 'B')\n-      && (c[0] != 'F')\n-      && (c[0] != 'N')\n-      && (c[0] != 'S'))\n+\t  && (c[0] != 'C')\n+\t  && (c[0] != 'I')\n+\t  && (c[0] != 'L')\n+\t  && (c[0] != 'R')\n+\t  && (c[0] != 'B')\n+\t  && (c[0] != 'F')\n+\t  && (c[0] != 'N')\n+\t  && (c[0] != 'S'))\n \t{\n \t  fprintf (stderr, \"%s: bad return-base-type\\n\",\n \t\t   ffeintrin_imps_[i].name);\n \t  continue;\n \t}\n       if ((c[1] != '-')\n \t  && (c[1] != '=')\n-      && ((c[1] < '1')\n-\t  || (c[1] > '9'))\n-\t  && (c[1] != 'C')\n-\t  && (c[1] != 'p'))\n+\t  && ((c[1] < '1')\n+\t      || (c[1] > '9'))\n+\t  && (c[1] != 'C'))\n \t{\n \t  fprintf (stderr, \"%s: bad return-kind-type\\n\",\n \t\t   ffeintrin_imps_[i].name);\n@@ -1613,8 +1620,8 @@ ffeintrin_init_0 ()\n \t}\n       if ((c[colon + 1] != '-')\n \t  && (c[colon + 1] != '*')\n-      && ((c[colon + 1] < '0')\n-\t  || (c[colon + 1] > '9')))\n+\t  && ((c[colon + 1] < '0')\n+\t      || (c[colon + 1] > '9')))\n \t{\n \t  fprintf (stderr, \"%s: bad COL-spec\\n\",\n \t\t   ffeintrin_imps_[i].name);\n@@ -1625,7 +1632,7 @@ ffeintrin_init_0 ()\n \t{\n \t  while ((c[0] != '=')\n \t\t && (c[0] != ',')\n-\t  && (c[0] != '\\0'))\n+\t\t && (c[0] != '\\0'))\n \t    ++c;\n \t  if (c[0] != '=')\n \t    {\n@@ -1635,28 +1642,27 @@ ffeintrin_init_0 ()\n \t    }\n \t  if ((c[1] == '?')\n \t      || (c[1] == '!')\n-\t  || (c[1] == '!')\n \t      || (c[1] == '+')\n-\t  || (c[1] == '*')\n+\t      || (c[1] == '*')\n \t      || (c[1] == 'n')\n-\t  || (c[1] == 'p'))\n+\t      || (c[1] == 'p'))\n \t    ++c;\n \t  if (((c[1] != '-')\n \t       && (c[1] != 'A')\n-\t  && (c[1] != 'C')\n-\t  && (c[1] != 'I')\n-\t  && (c[1] != 'L')\n-\t  && (c[1] != 'R')\n-\t  && (c[1] != 'B')\n-\t  && (c[1] != 'F')\n-\t  && (c[1] != 'N')\n-\t  && (c[1] != 'S')\n-\t  && (c[1] != 'g')\n-\t  && (c[1] != 's'))\n+\t       && (c[1] != 'C')\n+\t       && (c[1] != 'I')\n+\t       && (c[1] != 'L')\n+\t       && (c[1] != 'R')\n+\t       && (c[1] != 'B')\n+\t       && (c[1] != 'F')\n+\t       && (c[1] != 'N')\n+\t       && (c[1] != 'S')\n+\t       && (c[1] != 'g')\n+\t       && (c[1] != 's'))\n \t      || ((c[2] != '*')\n \t\t  && ((c[2] < '1')\n \t\t      || (c[2] > '9'))\n-\t      && (c[2] != 'A')))\n+\t\t  && (c[2] != 'A')))\n \t    {\n \t      fprintf (stderr, \"%s: bad arg-type\\n\",\n \t\t       ffeintrin_imps_[i].name);\n@@ -1693,13 +1699,13 @@ ffeintrin_init_0 ()\n \t    ++c;\n \t  if ((c[3] == '&')\n \t      || (c[3] == 'i')\n-\t  || (c[3] == 'w')\n-\t  || (c[3] == 'x'))\n+\t      || (c[3] == 'w')\n+\t      || (c[3] == 'x'))\n \t    ++c;\n \t  if (c[3] == ',')\n \t    {\n \t      c += 4;\n-\t      break;\n+\t      continue;\n \t    }\n \t  if (c[3] != '\\0')\n \t    {"}, {"sha": "5fbe83eb46cc83af5efb0de392294615d73898ab", "filename": "gcc/f/intrin.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4331962422e9333a9ca194aa9f81fc997f3cc7/gcc%2Ff%2Fintrin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4331962422e9333a9ca194aa9f81fc997f3cc7/gcc%2Ff%2Fintrin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintrin.def?ref=6d4331962422e9333a9ca194aa9f81fc997f3cc7", "patch": "@@ -3038,8 +3038,8 @@ DEFSPEC (NONE,\n      3    (Same size as CHARACTER*1)\n      4    (Twice the size of 2)\n      6    (Twice the size as 3)\n+     7    (Same size as `char *')\n      C    Like 1 (F77), except (F90), if COL is COMPLEX, uses kind type of COL\n-     p    ffecom_pointer_kind_\n \n    <return-modifier> is:\n \n@@ -3309,7 +3309,7 @@ DEFIMP\t(LONG,\t\t\"LONG\",\t\t,,,\t\t\"I1:-:A=I6\")\n DEFIMP  (LSTAT_func,\t\"LSTAT_func\",\tLSTAT,,,\t\"I1:-:File=A1,SArray=I1(13)w\")\n DEFIMP  (LSTAT_subr,\t\"LSTAT_subr\",\tLSTAT,,,\t\"--:-:File=A1,SArray=I1(13)w,Status=?I1w\")\n DEFIMP  (LTIME,\t\t\"LTIME\",\tLTIME,,,\t\"--:-:STime=I1,TArray=I1(9)w\")\n-DEFIMP\t(LOC,\t\t\"LOC\",\t\t,,,\t\t\"Ip:-:Entity=-*&&\")\n+DEFIMP\t(LOC,\t\t\"LOC\",\t\t,,,\t\t\"I7:-:Entity=-*&&\")\n DEFIMP\t(LSHIFT,\t\"LSHIFT\",\t,,,\t\t\"I=:0:I=I*,Shift=I*\")\n DEFIMP  (MCLOCK,\t\"MCLOCK\",\tMCLOCK,,,\t\"I1:-:\")\n DEFIMP  (MCLOCK8,\t\"MCLOCK8\",\tMCLOCK,,,\t\"I2:-:\")\n@@ -3326,8 +3326,8 @@ DEFIMP  (SECNDS,\t\"SECNDS\",\tSECNDS,,,\t\"R1:-:T=R1\")\n DEFIMP  (SECOND_func,\t\"SECOND_func\",\tSECOND,SECOND,,\t\"R1:-:\")\n DEFIMP  (SECOND_subr,\t\"SECOND_subr\",\tSECOND,,,\t\"--:-:Seconds=R1w\")\n DEFIMP\t(SHORT,\t\t\"SHORT\",\t,,,\t\t\"I6:-:A=I*\")\n-DEFIMP\t(SIGNAL_func,\t\"SIGNAL_func\",\tL_SIGNAL,,,\t\"I1:-:Number=I*,Handler=s*\")\n-DEFIMP\t(SIGNAL_subr,\t\"SIGNAL_subr\",\tL_SIGNAL,,,\t\"--:-:Number=I*,Handler=s*,Status=?I1w\")\n+DEFIMP\t(SIGNAL_func,\t\"SIGNAL_func\",\tL_SIGNAL,,,\t\"I7:-:Number=I*,Handler=s*\")\n+DEFIMP\t(SIGNAL_subr,\t\"SIGNAL_subr\",\tL_SIGNAL,,,\t\"--:-:Number=I*,Handler=s*,Status=?I7w\")\n DEFIMP\t(SLEEP,\t\t\"SLEEP\",\tSLEEP,,,\t\"--:-:Seconds=I1\")\n DEFIMP  (SRAND,\t\t\"SRAND\",\tSRAND,,,\t\"--:-:Seed=I*\")\n DEFIMP  (STAT_func,\t\"STAT_func\",\tSTAT,,,\t\t\"I1:-:File=A1,SArray=I1(13)w\")"}, {"sha": "31324ce41ff39dd9cf01c7dba2213391ad1c2c7e", "filename": "gcc/f/news.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4331962422e9333a9ca194aa9f81fc997f3cc7/gcc%2Ff%2Fnews.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4331962422e9333a9ca194aa9f81fc997f3cc7/gcc%2Ff%2Fnews.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fnews.texi?ref=6d4331962422e9333a9ca194aa9f81fc997f3cc7", "patch": "@@ -26,6 +26,15 @@ involve a combination of these elements.\n \n @heading In 0.5.22:\n @itemize @bullet\n+@item\n+Fix @code{SIGNAL} intrinsic so it offers portable\n+support for 64-bit systems (such as Digital Alphas\n+running GNU/Linux).\n+\n+@item\n+Support @samp{FORMAT(I<@var{expr}>)} when @var{expr} is a\n+compile-time constant @code{INTEGER} expression.\n+\n @item\n Fix code generation for iterative @code{DO} loops that\n have one or more references to the iteration variable,"}, {"sha": "1adcc0d582ac925697315d1d526c57704b1dabc2", "filename": "libf2c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4331962422e9333a9ca194aa9f81fc997f3cc7/libf2c%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4331962422e9333a9ca194aa9f81fc997f3cc7/libf2c%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FChangeLog?ref=6d4331962422e9333a9ca194aa9f81fc997f3cc7", "patch": "@@ -1,3 +1,10 @@\n+Tue Dec 23 22:56:01 1997  Craig Burley  <burley@gnu.org>\n+\n+\t* libF77/signal_.c (G77_signal_0): Return type is\n+\tnow `void *', to cope with returning previous signal\n+\thandler on 64-bit systems like Alphas.\n+\t* f2cext.c (signal_): Changed accordingly.\n+\n Tue Sep 30 00:41:39 1997  Craig Burley  <burley@gnu.ai.mit.edu>\n \n \tDo a better job of printing the offending FORMAT string"}, {"sha": "fa1eff7e19790d91ca1c7f7a93338aa8acf844dd", "filename": "libf2c/f2cext.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4331962422e9333a9ca194aa9f81fc997f3cc7/libf2c%2Ff2cext.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4331962422e9333a9ca194aa9f81fc997f3cc7/libf2c%2Ff2cext.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2Ff2cext.c?ref=6d4331962422e9333a9ca194aa9f81fc997f3cc7", "patch": "@@ -18,7 +18,7 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include <f2c.h>\n-typedef int (*sig_proc)(int);\n+typedef void *sig_proc;\t/* For now, this will have to do. */\n \n #ifdef Labort\n int abort_ (void) {\n@@ -98,8 +98,8 @@ ftnint iargc_ (void) {\n #endif\n \n #ifdef Lsignal\n-ftnint signal_ (integer *sigp, sig_proc proc) {\n-    extern ftnint G77_signal_0 (integer *sigp, sig_proc proc);\n+void *signal_ (integer *sigp, sig_proc proc) {\n+    extern void *G77_signal_0 (integer *sigp, sig_proc proc);\n     return G77_signal_0 (sigp, proc);\n }\n #endif"}, {"sha": "efd969b672d411354a783542a97f0e5d991fa234", "filename": "libf2c/libF77/signal_.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4331962422e9333a9ca194aa9f81fc997f3cc7/libf2c%2FlibF77%2Fsignal_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4331962422e9333a9ca194aa9f81fc997f3cc7/libf2c%2FlibF77%2Fsignal_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fsignal_.c?ref=6d4331962422e9333a9ca194aa9f81fc997f3cc7", "patch": "@@ -2,13 +2,16 @@\n #include \"signal1.h\"\n \n #ifdef KR_headers\n-ftnint G77_signal_0 (sigp, proc) integer *sigp; sig_pf proc;\n+void *\n+G77_signal_0 (sigp, proc) integer *sigp; sig_pf proc;\n #else\n-ftnint G77_signal_0 (integer *sigp, sig_pf proc)\n+void *\n+G77_signal_0 (integer *sigp, sig_pf proc)\n #endif\n {\n \tint sig;\n \tsig = (int)*sigp;\n \n-\treturn (ftnint)signal(sig, proc);\n+\treturn (void *) signal(sig, proc);\n \t}\n+"}]}