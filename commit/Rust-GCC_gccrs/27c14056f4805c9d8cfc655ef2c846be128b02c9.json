{"sha": "27c14056f4805c9d8cfc655ef2c846be128b02c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdjMTQwNTZmNDgwNWM5ZDhjZmM2NTVlZjJjODQ2YmUxMjhiMDJjOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-26T09:08:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-26T10:33:50Z"}, "message": "tree-optimization/97539 - reset out-of-loop debug uses before peeling\n\nThis makes sure to reset out-of-loop debug uses before vectorizer\nloop peeling as we cannot make sure to retain the use-def dominance\nrelationship when there are no LC SSA nodes.\n\n2020-10-26  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/97539\n\t* tree-vect-loop-manip.c (vect_do_peeling): Reset out-of-loop\n\tdebug uses before peeling.\n\n\t* gcc.dg/pr97539.c: New testcase.", "tree": {"sha": "d59e0999fb39d9c6635b69f2fbed3f03c42cf731", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d59e0999fb39d9c6635b69f2fbed3f03c42cf731"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27c14056f4805c9d8cfc655ef2c846be128b02c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c14056f4805c9d8cfc655ef2c846be128b02c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27c14056f4805c9d8cfc655ef2c846be128b02c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c14056f4805c9d8cfc655ef2c846be128b02c9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40e67ab8e59cf1c558f2818625c7e06dbf7a8e50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40e67ab8e59cf1c558f2818625c7e06dbf7a8e50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40e67ab8e59cf1c558f2818625c7e06dbf7a8e50"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "def55e1d6ee6971291d0de08c05f28912bc16224", "filename": "gcc/testsuite/gcc.dg/pr97539.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c14056f4805c9d8cfc655ef2c846be128b02c9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97539.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c14056f4805c9d8cfc655ef2c846be128b02c9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97539.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97539.c?ref=27c14056f4805c9d8cfc655ef2c846be128b02c9", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -g\" } */\n+\n+int a, b;\n+void c() {\n+  char d;\n+  for (; b;)\n+    for (;;)\n+      for (; d <= 7; d += 1) {\n+        a = 7;\n+        for (; a; a += 1)\n+        e:\n+          d += d;\n+        d ^= 0;\n+      }\n+  goto e;\n+}"}, {"sha": "5d00b6fb9569029dac3bbdfe4a265b81b6168e94", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c14056f4805c9d8cfc655ef2c846be128b02c9/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c14056f4805c9d8cfc655ef2c846be128b02c9/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=27c14056f4805c9d8cfc655ef2c846be128b02c9", "patch": "@@ -2545,14 +2545,53 @@ vect_do_peeling (loop_vec_info loop_vinfo, tree niters, tree nitersm1,\n   if (!prolog_peeling && !epilog_peeling)\n     return NULL;\n \n+  /* Before doing any peeling make sure to reset debug binds outside of\n+     the loop refering to defs not in LC SSA.  */\n+  class loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n+  for (unsigned i = 0; i < loop->num_nodes; ++i)\n+    {\n+      basic_block bb = LOOP_VINFO_BBS (loop_vinfo)[i];\n+      imm_use_iterator ui;\n+      gimple *use_stmt;\n+      for (gphi_iterator gsi = gsi_start_phis (bb); !gsi_end_p (gsi);\n+\t   gsi_next (&gsi))\n+\t{\n+\t  FOR_EACH_IMM_USE_STMT (use_stmt, ui, gimple_phi_result (gsi.phi ()))\n+\t    if (gimple_debug_bind_p (use_stmt)\n+\t\t&& loop != gimple_bb (use_stmt)->loop_father\n+\t\t&& !flow_loop_nested_p (loop,\n+\t\t\t\t\tgimple_bb (use_stmt)->loop_father))\n+\t      {\n+\t\tgimple_debug_bind_reset_value (use_stmt);\n+\t\tupdate_stmt (use_stmt);\n+\t      }\n+\t}\n+      for (gimple_stmt_iterator gsi = gsi_start_bb (bb); !gsi_end_p (gsi);\n+\t   gsi_next (&gsi))\n+\t{\n+\t  ssa_op_iter op_iter;\n+\t  def_operand_p def_p;\n+\t  FOR_EACH_SSA_DEF_OPERAND (def_p, gsi_stmt (gsi), op_iter, SSA_OP_DEF)\n+\t    FOR_EACH_IMM_USE_STMT (use_stmt, ui, DEF_FROM_PTR (def_p))\n+\t      if (gimple_debug_bind_p (use_stmt)\n+\t\t  && loop != gimple_bb (use_stmt)->loop_father\n+\t\t  && !flow_loop_nested_p (loop,\n+\t\t\t\t\t  gimple_bb (use_stmt)->loop_father))\n+\t\t{\n+\t\t  gimple_debug_bind_reset_value (use_stmt);\n+\t\t  update_stmt (use_stmt);\n+\t\t}\n+\t}\n+    }\n+\n   prob_vector = profile_probability::guessed_always ().apply_scale (9, 10);\n   estimated_vf = vect_vf_for_cost (loop_vinfo);\n   if (estimated_vf == 2)\n     estimated_vf = 3;\n   prob_prolog = prob_epilog = profile_probability::guessed_always ()\n \t\t\t.apply_scale (estimated_vf - 1, estimated_vf);\n \n-  class loop *prolog, *epilog = NULL, *loop = LOOP_VINFO_LOOP (loop_vinfo);\n+  class loop *prolog, *epilog = NULL;\n   class loop *first_loop = loop;\n   bool irred_flag = loop_preheader_edge (loop)->flags & EDGE_IRREDUCIBLE_LOOP;\n "}]}