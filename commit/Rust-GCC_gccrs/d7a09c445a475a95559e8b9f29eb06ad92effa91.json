{"sha": "d7a09c445a475a95559e8b9f29eb06ad92effa91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdhMDljNDQ1YTQ3NWE5NTU1OWU4YjlmMjllYjA2YWQ5MmVmZmE5MQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-15T08:43:36Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-15T08:43:36Z"}, "message": "[AArch64] Rework SVE REV[BHW] patterns\n\nThe current SVE REV patterns follow the AArch64 scheme, in which\nUNSPEC_REV<NN> reverses elements within an <NN>-bit granule.\nE.g. UNSPEC_REV64 on VNx8HI reverses the four 16-bit elements\nwithin each 64-bit granule.\n\nThe native SVE scheme is the other way around: UNSPEC_REV64 is seen\nas an operation on 64-bit elements, with REVB swapping bytes within\nthe elements, REVH swapping halfwords, and so on.  This fits SVE more\nnaturally because the operation can then be predicated per <NN>-bit\ngranule/element.\n\nMaking the patterns use the Advanced SIMD scheme was more natural\nwhen all we cared about were permutes, since we could then use\nthe source and target of the permute in their original modes.\nHowever, the ACLE does need patterns that follow the native scheme,\ntreating them as operations on integer elements.  This patch defines\nthe patterns that way instead and updates the existing uses to match.\n\nThis also brings in a couple of helper routines from the ACLE branch.\n\n2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/iterators.md (UNSPEC_REVB, UNSPEC_REVH)\n\t(UNSPEC_REVW): New constants.\n\t(elem_bits): New mode attribute.\n\t(SVE_INT_UNARY): New int iterator.\n\t(optab): Handle UNSPEC_REV[BHW].\n\t(sve_int_op): New int attribute.\n\t(min_elem_bits): Handle VNx16QI and the predicate modes.\n\t* config/aarch64/aarch64-sve.md (*aarch64_sve_rev64<mode>)\n\t(*aarch64_sve_rev32<mode>, *aarch64_sve_rev16vnx16qi): Delete.\n\t(@aarch64_pred_<SVE_INT_UNARY:optab><SVE_I:mode>): New pattern.\n\t* config/aarch64/aarch64.c (aarch64_sve_data_mode): New function.\n\t(aarch64_sve_int_mode, aarch64_sve_rev_unspec): Likewise.\n\t(aarch64_split_sve_subreg_move): Use UNSPEC_REV[BHW] instead of\n\tunspecs based on the total width of the reversed data.\n\t(aarch64_evpc_rev_local): Likewise (for SVE only).  Use a\n\treinterpret followed by a subreg on big-endian targets.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/revb_1.c: Restrict to little-endian targets.\n\tAvoid including stdint.h.\n\t* gcc.target/aarch64/sve/revh_1.c: Likewise.\n\t* gcc.target/aarch64/sve/revw_1.c: Likewise.\n\t* gcc.target/aarch64/sve/revb_2.c: New big-endian test.\n\t* gcc.target/aarch64/sve/revh_2.c: Likewise.\n\t* gcc.target/aarch64/sve/revw_2.c: Likewise.\n\nFrom-SVN: r274517", "tree": {"sha": "56cfe9c8a4d3df8ad2cbb7b30c8fd497dac2ea94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56cfe9c8a4d3df8ad2cbb7b30c8fd497dac2ea94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7a09c445a475a95559e8b9f29eb06ad92effa91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7a09c445a475a95559e8b9f29eb06ad92effa91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7a09c445a475a95559e8b9f29eb06ad92effa91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7a09c445a475a95559e8b9f29eb06ad92effa91/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "432b29c189a6d26ed701c7518402708b2fcb794f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/432b29c189a6d26ed701c7518402708b2fcb794f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/432b29c189a6d26ed701c7518402708b2fcb794f"}], "stats": {"total": 257, "additions": 178, "deletions": 79}, "files": [{"sha": "87414e0e28d59e7a917a3423f7e1d1a80cb96ff3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a09c445a475a95559e8b9f29eb06ad92effa91/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a09c445a475a95559e8b9f29eb06ad92effa91/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7a09c445a475a95559e8b9f29eb06ad92effa91", "patch": "@@ -1,3 +1,22 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/iterators.md (UNSPEC_REVB, UNSPEC_REVH)\n+\t(UNSPEC_REVW): New constants.\n+\t(elem_bits): New mode attribute.\n+\t(SVE_INT_UNARY): New int iterator.\n+\t(optab): Handle UNSPEC_REV[BHW].\n+\t(sve_int_op): New int attribute.\n+\t(min_elem_bits): Handle VNx16QI and the predicate modes.\n+\t* config/aarch64/aarch64-sve.md (*aarch64_sve_rev64<mode>)\n+\t(*aarch64_sve_rev32<mode>, *aarch64_sve_rev16vnx16qi): Delete.\n+\t(@aarch64_pred_<SVE_INT_UNARY:optab><SVE_I:mode>): New pattern.\n+\t* config/aarch64/aarch64.c (aarch64_sve_data_mode): New function.\n+\t(aarch64_sve_int_mode, aarch64_sve_rev_unspec): Likewise.\n+\t(aarch64_split_sve_subreg_move): Use UNSPEC_REV[BHW] instead of\n+\tunspecs based on the total width of the reversed data.\n+\t(aarch64_evpc_rev_local): Likewise (for SVE only).  Use a\n+\treinterpret followed by a subreg on big-endian targets.\n+\n 2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n "}, {"sha": "b049785ae4eb36ef51de0ed7ad0cebd6fb16eba4", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 23, "deletions": 39, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a09c445a475a95559e8b9f29eb06ad92effa91/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a09c445a475a95559e8b9f29eb06ad92effa91/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=d7a09c445a475a95559e8b9f29eb06ad92effa91", "patch": "@@ -54,6 +54,7 @@\n ;;\n ;; == Unary arithmetic\n ;; ---- [INT] General unary arithmetic corresponding to rtx codes\n+;; ---- [INT] General unary arithmetic corresponding to unspecs\n ;; ---- [INT] Zero extension\n ;; ---- [INT] Logical inverse\n ;; ---- [FP] General unary arithmetic corresponding to unspecs\n@@ -1497,6 +1498,28 @@\n   [(set_attr \"movprfx\" \"*,yes,yes\")]\n )\n \n+;; -------------------------------------------------------------------------\n+;; ---- [INT] General unary arithmetic corresponding to unspecs\n+;; -------------------------------------------------------------------------\n+;; Includes\n+;; - REVB\n+;; - REVH\n+;; - REVW\n+;; -------------------------------------------------------------------------\n+\n+;; Predicated integer unary operations.\n+(define_insn \"@aarch64_pred_<optab><mode>\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n+\t   (unspec:SVE_I\n+\t     [(match_operand:SVE_I 2 \"register_operand\" \"w\")]\n+\t     SVE_INT_UNARY)]\n+\t  UNSPEC_PRED_X))]\n+  \"TARGET_SVE && <elem_bits> >= <min_elem_bits>\"\n+  \"<sve_int_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>\"\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [INT] Zero extension\n ;; -------------------------------------------------------------------------\n@@ -4619,9 +4642,6 @@\n ;; Includes:\n ;; - DUP\n ;; - REV\n-;; - REVB\n-;; - REVH\n-;; - REVW\n ;; -------------------------------------------------------------------------\n \n ;; Duplicate one element of a vector.\n@@ -4644,42 +4664,6 @@\n   \"TARGET_SVE\"\n   \"rev\\t%0.<Vetype>, %1.<Vetype>\")\n \n-;; Reverse the order elements within a 64-bit container.\n-(define_insn \"*aarch64_sve_rev64<mode>\"\n-  [(set (match_operand:SVE_BHS 0 \"register_operand\" \"=w\")\n-\t(unspec:SVE_BHS\n-\t  [(match_operand:VNx2BI 1 \"register_operand\" \"Upl\")\n-\t   (unspec:SVE_BHS [(match_operand:SVE_BHS 2 \"register_operand\" \"w\")]\n-\t\t\t   UNSPEC_REV64)]\n-\t  UNSPEC_PRED_X))]\n-  \"TARGET_SVE\"\n-  \"rev<Vesize>\\t%0.d, %1/m, %2.d\"\n-)\n-\n-;; Reverse the order elements within a 32-bit container.\n-(define_insn \"*aarch64_sve_rev32<mode>\"\n-  [(set (match_operand:SVE_BH 0 \"register_operand\" \"=w\")\n-\t(unspec:SVE_BH\n-\t  [(match_operand:VNx4BI 1 \"register_operand\" \"Upl\")\n-\t   (unspec:SVE_BH [(match_operand:SVE_BH 2 \"register_operand\" \"w\")]\n-\t\t\t  UNSPEC_REV32)]\n-\t  UNSPEC_PRED_X))]\n-  \"TARGET_SVE\"\n-  \"rev<Vesize>\\t%0.s, %1/m, %2.s\"\n-)\n-\n-;; Reverse the order elements within a 16-bit container.\n-(define_insn \"*aarch64_sve_rev16vnx16qi\"\n-  [(set (match_operand:VNx16QI 0 \"register_operand\" \"=w\")\n-\t(unspec:VNx16QI\n-\t  [(match_operand:VNx8BI 1 \"register_operand\" \"Upl\")\n-\t   (unspec:VNx16QI [(match_operand:VNx16QI 2 \"register_operand\" \"w\")]\n-\t\t\t   UNSPEC_REV16)]\n-\t  UNSPEC_PRED_X))]\n-  \"TARGET_SVE\"\n-  \"revb\\t%0.h, %1/m, %2.h\"\n-)\n-\n ;; -------------------------------------------------------------------------\n ;; ---- [INT,FP] Special-purpose binary permutes\n ;; -------------------------------------------------------------------------"}, {"sha": "90866c7709f214873b7f9381b0afe682ca3e0840", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 72, "deletions": 26, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a09c445a475a95559e8b9f29eb06ad92effa91/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a09c445a475a95559e8b9f29eb06ad92effa91/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=d7a09c445a475a95559e8b9f29eb06ad92effa91", "patch": "@@ -1675,6 +1675,22 @@ aarch64_get_mask_mode (poly_uint64 nunits, poly_uint64 nbytes)\n   return default_get_mask_mode (nunits, nbytes);\n }\n \n+/* Return the SVE vector mode that has NUNITS elements of mode INNER_MODE.  */\n+\n+static opt_machine_mode\n+aarch64_sve_data_mode (scalar_mode inner_mode, poly_uint64 nunits)\n+{\n+  enum mode_class mclass = (is_a <scalar_float_mode> (inner_mode)\n+\t\t\t    ? MODE_VECTOR_FLOAT : MODE_VECTOR_INT);\n+  machine_mode mode;\n+  FOR_EACH_MODE_IN_CLASS (mode, mclass)\n+    if (inner_mode == GET_MODE_INNER (mode)\n+\t&& known_eq (nunits, GET_MODE_NUNITS (mode))\n+\t&& aarch64_sve_data_mode_p (mode))\n+      return mode;\n+  return opt_machine_mode ();\n+}\n+\n /* Return the integer element mode associated with SVE mode MODE.  */\n \n static scalar_int_mode\n@@ -1685,6 +1701,17 @@ aarch64_sve_element_int_mode (machine_mode mode)\n   return int_mode_for_size (elt_bits, 0).require ();\n }\n \n+/* Return the integer vector mode associated with SVE mode MODE.\n+   Unlike mode_for_int_vector, this can handle the case in which\n+   MODE is a predicate (and thus has a different total size).  */\n+\n+static machine_mode\n+aarch64_sve_int_mode (machine_mode mode)\n+{\n+  scalar_int_mode int_mode = aarch64_sve_element_int_mode (mode);\n+  return aarch64_sve_data_mode (int_mode, GET_MODE_NUNITS (mode)).require ();\n+}\n+\n /* Implement TARGET_PREFERRED_ELSE_VALUE.  For binary operations,\n    prefer to use the first arithmetic operand as the else value if\n    the else value doesn't matter, since that exactly matches the SVE\n@@ -4280,45 +4307,46 @@ aarch64_replace_reg_mode (rtx x, machine_mode mode)\n   return x;\n }\n \n+/* Return the SVE REV[BHW] unspec for reversing quantites of mode MODE\n+   stored in wider integer containers.  */\n+\n+static unsigned int\n+aarch64_sve_rev_unspec (machine_mode mode)\n+{\n+  switch (GET_MODE_UNIT_SIZE (mode))\n+    {\n+    case 1: return UNSPEC_REVB;\n+    case 2: return UNSPEC_REVH;\n+    case 4: return UNSPEC_REVW;\n+    }\n+  gcc_unreachable ();\n+}\n+\n /* Split a *aarch64_sve_mov<mode>_subreg_be pattern with the given\n    operands.  */\n \n void\n aarch64_split_sve_subreg_move (rtx dest, rtx ptrue, rtx src)\n {\n-  /* Decide which REV operation we need.  The mode with narrower elements\n-     determines the mode of the operands and the mode with the wider\n+  /* Decide which REV operation we need.  The mode with wider elements\n+     determines the mode of the operands and the mode with the narrower\n      elements determines the reverse width.  */\n   machine_mode mode_with_wider_elts = GET_MODE (dest);\n   machine_mode mode_with_narrower_elts = GET_MODE (src);\n   if (GET_MODE_UNIT_SIZE (mode_with_wider_elts)\n       < GET_MODE_UNIT_SIZE (mode_with_narrower_elts))\n     std::swap (mode_with_wider_elts, mode_with_narrower_elts);\n \n+  unsigned int unspec = aarch64_sve_rev_unspec (mode_with_narrower_elts);\n   unsigned int wider_bytes = GET_MODE_UNIT_SIZE (mode_with_wider_elts);\n-  unsigned int unspec;\n-  if (wider_bytes == 8)\n-    unspec = UNSPEC_REV64;\n-  else if (wider_bytes == 4)\n-    unspec = UNSPEC_REV32;\n-  else if (wider_bytes == 2)\n-    unspec = UNSPEC_REV16;\n-  else\n-    gcc_unreachable ();\n   machine_mode pred_mode = aarch64_sve_pred_mode (wider_bytes).require ();\n \n-  /* Emit:\n-\n-       (set DEST (unspec [PTRUE (unspec [SRC] UNSPEC_REV<nn>)] UNSPEC_PRED_X))\n-\n-     with the appropriate modes.  */\n+  /* Get the operands in the appropriate modes and emit the instruction.  */\n   ptrue = gen_lowpart (pred_mode, ptrue);\n-  dest = aarch64_replace_reg_mode (dest, mode_with_narrower_elts);\n-  src = aarch64_replace_reg_mode (src, mode_with_narrower_elts);\n-  src = gen_rtx_UNSPEC (mode_with_narrower_elts, gen_rtvec (1, src), unspec);\n-  src = gen_rtx_UNSPEC (mode_with_narrower_elts, gen_rtvec (2, ptrue, src),\n-\t\t\tUNSPEC_PRED_X);\n-  emit_insn (gen_rtx_SET (dest, src));\n+  dest = aarch64_replace_reg_mode (dest, mode_with_wider_elts);\n+  src = aarch64_replace_reg_mode (src, mode_with_wider_elts);\n+  emit_insn (gen_aarch64_pred (unspec, mode_with_wider_elts,\n+\t\t\t       dest, ptrue, src));\n }\n \n static bool\n@@ -17753,13 +17781,31 @@ aarch64_evpc_rev_local (struct expand_vec_perm_d *d)\n   if (d->testing_p)\n     return true;\n \n-  rtx src = gen_rtx_UNSPEC (d->vmode, gen_rtvec (1, d->op0), unspec);\n   if (d->vec_flags == VEC_SVE_DATA)\n     {\n-      rtx pred = aarch64_ptrue_reg (pred_mode);\n-      src = gen_rtx_UNSPEC (d->vmode, gen_rtvec (2, pred, src),\n-\t\t\t    UNSPEC_PRED_X);\n+      machine_mode int_mode = aarch64_sve_int_mode (pred_mode);\n+      rtx target = gen_reg_rtx (int_mode);\n+      if (BYTES_BIG_ENDIAN)\n+\t/* The act of taking a subreg between INT_MODE and d->vmode\n+\t   is itself a reversing operation on big-endian targets;\n+\t   see the comment at the head of aarch64-sve.md for details.\n+\t   First reinterpret OP0 as INT_MODE without using a subreg\n+\t   and without changing the contents.  */\n+\temit_insn (gen_aarch64_sve_reinterpret (int_mode, target, d->op0));\n+      else\n+\t{\n+\t  /* For SVE we use REV[BHW] unspecs derived from the element size\n+\t     of v->mode and vector modes whose elements have SIZE bytes.\n+\t     This ensures that the vector modes match the predicate modes.  */\n+\t  int unspec = aarch64_sve_rev_unspec (d->vmode);\n+\t  rtx pred = aarch64_ptrue_reg (pred_mode);\n+\t  emit_insn (gen_aarch64_pred (unspec, int_mode, target, pred,\n+\t\t\t\t       gen_lowpart (int_mode, d->op0)));\n+\t}\n+      emit_move_insn (d->target, gen_lowpart (d->vmode, target));\n+      return true;\n     }\n+  rtx src = gen_rtx_UNSPEC (d->vmode, gen_rtvec (1, d->op0), unspec);\n   emit_set_insn (d->target, src);\n   return true;\n }"}, {"sha": "e8ba4f3d987b0a79d290db6f75b9638b867a5f0e", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a09c445a475a95559e8b9f29eb06ad92effa91/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a09c445a475a95559e8b9f29eb06ad92effa91/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=d7a09c445a475a95559e8b9f29eb06ad92effa91", "patch": "@@ -476,6 +476,9 @@\n     UNSPEC_ANDF\t\t; Used in aarch64-sve.md.\n     UNSPEC_IORF\t\t; Used in aarch64-sve.md.\n     UNSPEC_XORF\t\t; Used in aarch64-sve.md.\n+    UNSPEC_REVB\t\t; Used in aarch64-sve.md.\n+    UNSPEC_REVH\t\t; Used in aarch64-sve.md.\n+    UNSPEC_REVW\t\t; Used in aarch64-sve.md.\n     UNSPEC_SMUL_HIGHPART ; Used in aarch64-sve.md.\n     UNSPEC_UMUL_HIGHPART ; Used in aarch64-sve.md.\n     UNSPEC_COND_FABS\t; Used in aarch64-sve.md.\n@@ -638,7 +641,10 @@\n \n ;; The number of bits in a vector element, or controlled by a predicate\n ;; element.\n-(define_mode_attr elem_bits [(VNx8HI \"16\") (VNx4SI \"32\") (VNx2DI \"64\")\n+(define_mode_attr elem_bits [(VNx16BI \"8\") (VNx8BI \"16\")\n+\t\t\t     (VNx4BI \"32\") (VNx2BI \"64\")\n+\t\t\t     (VNx16QI \"8\") (VNx8HI \"16\")\n+\t\t\t     (VNx4SI \"32\") (VNx2DI \"64\")\n \t\t\t     (VNx8HF \"16\") (VNx4SF \"32\") (VNx2DF \"64\")])\n \n ;; Attribute to describe constants acceptable in logical operations\n@@ -1677,6 +1683,8 @@\n \n (define_int_iterator MUL_HIGHPART [UNSPEC_SMUL_HIGHPART UNSPEC_UMUL_HIGHPART])\n \n+(define_int_iterator SVE_INT_UNARY [UNSPEC_REVB UNSPEC_REVH UNSPEC_REVW])\n+\n (define_int_iterator SVE_INT_REDUCTION [UNSPEC_ANDV\n \t\t\t\t\tUNSPEC_IORV\n \t\t\t\t\tUNSPEC_SMAXV\n@@ -1777,6 +1785,9 @@\n \t\t\t(UNSPEC_ANDV \"and\")\n \t\t\t(UNSPEC_IORV \"ior\")\n \t\t\t(UNSPEC_XORV \"xor\")\n+\t\t\t(UNSPEC_REVB \"revb\")\n+\t\t\t(UNSPEC_REVH \"revh\")\n+\t\t\t(UNSPEC_REVW \"revw\")\n \t\t\t(UNSPEC_UMAXV \"umax\")\n \t\t\t(UNSPEC_UMINV \"umin\")\n \t\t\t(UNSPEC_SMAXV \"smax\")\n@@ -2045,7 +2056,10 @@\n \t\t\t     (UNSPEC_UMAXV \"umaxv\")\n \t\t\t     (UNSPEC_UMINV \"uminv\")\n \t\t\t     (UNSPEC_SMAXV \"smaxv\")\n-\t\t\t     (UNSPEC_SMINV \"sminv\")])\n+\t\t\t     (UNSPEC_SMINV \"sminv\")\n+\t\t\t     (UNSPEC_REVB \"revb\")\n+\t\t\t     (UNSPEC_REVH \"revh\")\n+\t\t\t     (UNSPEC_REVW \"revw\")])\n \n (define_int_attr sve_fp_op [(UNSPEC_FADDV \"faddv\")\n \t\t\t    (UNSPEC_FMAXNMV \"fmaxnmv\")\n@@ -2118,3 +2132,8 @@\n   [(UNSPEC_COND_FMAXNM \"aarch64_sve_float_maxmin_immediate\")\n    (UNSPEC_COND_FMINNM \"aarch64_sve_float_maxmin_immediate\")\n    (UNSPEC_COND_FMUL \"aarch64_sve_float_mul_immediate\")])\n+\n+;; The minimum number of element bits that an instruction can handle.\n+(define_int_attr min_elem_bits [(UNSPEC_REVB \"16\")\n+\t\t\t\t(UNSPEC_REVH \"32\")\n+\t\t\t\t(UNSPEC_REVW \"64\")])"}, {"sha": "9f667f2f9a88d7c169ea7f0f44ed26f9bd925e88", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a09c445a475a95559e8b9f29eb06ad92effa91/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a09c445a475a95559e8b9f29eb06ad92effa91/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d7a09c445a475a95559e8b9f29eb06ad92effa91", "patch": "@@ -1,3 +1,13 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/revb_1.c: Restrict to little-endian targets.\n+\tAvoid including stdint.h.\n+\t* gcc.target/aarch64/sve/revh_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/revw_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/revb_2.c: New big-endian test.\n+\t* gcc.target/aarch64/sve/revh_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/revw_2.c: Likewise.\n+\n 2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n "}, {"sha": "9cf2f27c877051a74d81ca7e5e7797467aa6cd3f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/revb_1.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a09c445a475a95559e8b9f29eb06ad92effa91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevb_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a09c445a475a95559e8b9f29eb06ad92effa91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevb_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevb_1.c?ref=d7a09c445a475a95559e8b9f29eb06ad92effa91", "patch": "@@ -1,9 +1,7 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n-/* { dg-options \"-O -msve-vector-bits=256 --save-temps\" } */\n+/* { dg-options \"-O -msve-vector-bits=256 --save-temps -mlittle-endian\" } */\n \n-#include <stdint.h>\n-\n-typedef int8_t vnx16qi __attribute__((vector_size (32)));\n+typedef __INT8_TYPE__ vnx16qi __attribute__((vector_size (32)));\n \n #define MASK_2(X, Y) (X) ^ (Y), (X + 1) ^ (Y)\n #define MASK_4(X, Y) MASK_2 (X, Y), MASK_2 (X + 2, Y)"}, {"sha": "389739cc85d603eabdc4212951545b1354428a58", "filename": "gcc/testsuite/gcc.target/aarch64/sve/revb_2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a09c445a475a95559e8b9f29eb06ad92effa91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevb_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a09c445a475a95559e8b9f29eb06ad92effa91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevb_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevb_2.c?ref=d7a09c445a475a95559e8b9f29eb06ad92effa91", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=256 --save-temps -mbig-endian\" } */\n+\n+#include \"revb_1.c\"\n+\n+/* { dg-final { scan-assembler-not {\\ttbl\\t} } } */\n+\n+/* { dg-final { scan-assembler-times {\\trevb\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d} 1 } } */\n+/* { dg-final { scan-assembler-times {\\trevb\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s} 1 } } */\n+/* { dg-final { scan-assembler-times {\\trevb\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h} 1 } } */"}, {"sha": "28a0399b91283b743c7b13a68dfe2df6571b24c3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/revh_1.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a09c445a475a95559e8b9f29eb06ad92effa91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevh_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a09c445a475a95559e8b9f29eb06ad92effa91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevh_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevh_1.c?ref=d7a09c445a475a95559e8b9f29eb06ad92effa91", "patch": "@@ -1,9 +1,7 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n-/* { dg-options \"-O -msve-vector-bits=256 --save-temps\" } */\n+/* { dg-options \"-O -msve-vector-bits=256 --save-temps -mlittle-endian\" } */\n \n-#include <stdint.h>\n-\n-typedef uint16_t vnx8hi __attribute__((vector_size (32)));\n+typedef __UINT16_TYPE__ vnx8hi __attribute__((vector_size (32)));\n typedef _Float16 vnx8hf __attribute__((vector_size (32)));\n \n #define MASK_2(X, Y) (X) ^ (Y), (X + 1) ^ (Y)"}, {"sha": "e821b64027e2e46b9e6c5d8345da8ac8f67c4124", "filename": "gcc/testsuite/gcc.target/aarch64/sve/revh_2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a09c445a475a95559e8b9f29eb06ad92effa91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevh_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a09c445a475a95559e8b9f29eb06ad92effa91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevh_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevh_2.c?ref=d7a09c445a475a95559e8b9f29eb06ad92effa91", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=256 --save-temps -mbig-endian\" } */\n+\n+#include \"revh_1.c\"\n+\n+/* { dg-final { scan-assembler-not {\\ttbl\\t} } } */\n+\n+/* { dg-final { scan-assembler-times {\\trevh\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d} 2 } } */\n+/* { dg-final { scan-assembler-times {\\trevh\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s} 2 } } */"}, {"sha": "de926753c9dc37b7307adb4277f2c57badd30186", "filename": "gcc/testsuite/gcc.target/aarch64/sve/revw_1.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a09c445a475a95559e8b9f29eb06ad92effa91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevw_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a09c445a475a95559e8b9f29eb06ad92effa91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevw_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevw_1.c?ref=d7a09c445a475a95559e8b9f29eb06ad92effa91", "patch": "@@ -1,9 +1,7 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n-/* { dg-options \"-O -msve-vector-bits=256 --save-temps\" } */\n+/* { dg-options \"-O -msve-vector-bits=256 --save-temps -mlittle-endian\" } */\n \n-#include <stdint.h>\n-\n-typedef uint32_t vnx4si __attribute__((vector_size (32)));\n+typedef __UINT32_TYPE__ vnx4si __attribute__((vector_size (32)));\n typedef float vnx4sf __attribute__((vector_size (32)));\n \n #define MASK_2(X, Y) (X) ^ (Y), (X + 1) ^ (Y)"}, {"sha": "17243c05c5e34408adece4c3c10aa547f36b609c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/revw_2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a09c445a475a95559e8b9f29eb06ad92effa91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevw_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a09c445a475a95559e8b9f29eb06ad92effa91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevw_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevw_2.c?ref=d7a09c445a475a95559e8b9f29eb06ad92effa91", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=256 --save-temps -mbig-endian\" } */\n+\n+#include \"revw_1.c\"\n+\n+/* { dg-final { scan-assembler-not {\\ttbl\\t} } } */\n+\n+/* { dg-final { scan-assembler-times {\\trevw\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d} 2 } } */"}]}