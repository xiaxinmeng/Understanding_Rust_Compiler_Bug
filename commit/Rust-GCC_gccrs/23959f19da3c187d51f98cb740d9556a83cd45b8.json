{"sha": "23959f19da3c187d51f98cb740d9556a83cd45b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM5NTlmMTlkYTNjMTg3ZDUxZjk4Y2I3NDBkOTU1NmE4M2NkNDViOA==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2004-04-27T23:24:01Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2004-04-27T23:24:01Z"}, "message": "re PR debug/14829 (Bootstrap comparison failure on hppa64-hp-hpux11.11)\n\n\tPR debug/14829\n\t* dwarf2out.c (reg_number): Rename to dbx_reg_number.  Adjust all\n\tcallers.\n\t(multiple_reg_loc_descriptor, reg_loc_descriptor): Use gcc register\n\tnumber for indexing hard_regno_nregs array.\n\nFrom-SVN: r81233", "tree": {"sha": "63a76f438f78e8db620ee061d47121f0b7a16094", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63a76f438f78e8db620ee061d47121f0b7a16094"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23959f19da3c187d51f98cb740d9556a83cd45b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23959f19da3c187d51f98cb740d9556a83cd45b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23959f19da3c187d51f98cb740d9556a83cd45b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23959f19da3c187d51f98cb740d9556a83cd45b8/comments", "author": null, "committer": null, "parents": [{"sha": "2f70eed18e149dc3cd03ebcc8f69e9fe04743d30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f70eed18e149dc3cd03ebcc8f69e9fe04743d30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f70eed18e149dc3cd03ebcc8f69e9fe04743d30"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "8b567508deb2e89f199a017fb8b1390cadf2299c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23959f19da3c187d51f98cb740d9556a83cd45b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23959f19da3c187d51f98cb740d9556a83cd45b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23959f19da3c187d51f98cb740d9556a83cd45b8", "patch": "@@ -1,3 +1,11 @@\n+2004-04-27  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR debug/14829\n+\t* dwarf2out.c (reg_number): Rename to dbx_reg_number.  Adjust all\n+\tcallers.\n+\t(multiple_reg_loc_descriptor, reg_loc_descriptor): Use gcc register\n+\tnumber for indexing hard_regno_nregs array.\n+\t\n 2004-04-27  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config/darwin.h (STARTFILE_SPEC): Use %s to find crt2.o."}, {"sha": "83c6821c4daa13c78903fd2ab5e4eaea81fefcad", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23959f19da3c187d51f98cb740d9556a83cd45b8/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23959f19da3c187d51f98cb740d9556a83cd45b8/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=23959f19da3c187d51f98cb740d9556a83cd45b8", "patch": "@@ -3785,7 +3785,7 @@ static bool is_subrange_type (tree);\n static dw_die_ref subrange_type_die (tree, dw_die_ref);\n static dw_die_ref modified_type_die (tree, int, int, dw_die_ref);\n static int type_is_enum (tree);\n-static unsigned int reg_number (rtx);\n+static unsigned int dbx_reg_number (rtx);\n static dw_loc_descr_ref reg_loc_descriptor (rtx);\n static dw_loc_descr_ref one_reg_loc_descriptor (unsigned int);\n static dw_loc_descr_ref multiple_reg_loc_descriptor (rtx, rtx);\n@@ -8240,10 +8240,10 @@ type_is_enum (tree type)\n   return TREE_CODE (type) == ENUMERAL_TYPE;\n }\n \n-/* Return the register number described by a given RTL node.  */\n+/* Return the DBX register number described by a given RTL node.  */\n \n static unsigned int\n-reg_number (rtx rtl)\n+dbx_reg_number (rtx rtl)\n {\n   unsigned regno = REGNO (rtl);\n \n@@ -8265,10 +8265,10 @@ reg_loc_descriptor (rtx rtl)\n   if (REGNO (rtl) >= FIRST_PSEUDO_REGISTER)\n     return 0;\n \n-  reg = reg_number (rtl);\n+  reg = dbx_reg_number (rtl);\n   regs = targetm.dwarf_register_span (rtl);\n \n-  if (hard_regno_nregs[reg][GET_MODE (rtl)] > 1\n+  if (hard_regno_nregs[REGNO (rtl)][GET_MODE (rtl)] > 1\n       || regs)\n     return multiple_reg_loc_descriptor (rtl, regs);\n   else\n@@ -8297,8 +8297,8 @@ multiple_reg_loc_descriptor (rtx rtl, rtx regs)\n   unsigned reg;\n   dw_loc_descr_ref loc_result = NULL;\n \n-  reg = reg_number (rtl);\n-  nregs = hard_regno_nregs[reg][GET_MODE (rtl)];\n+  reg = dbx_reg_number (rtl);\n+  nregs = hard_regno_nregs[REGNO (rtl)][GET_MODE (rtl)];\n \n   /* Simple, contiguous registers.  */\n   if (regs == NULL_RTX)\n@@ -8478,7 +8478,8 @@ mem_loc_descriptor (rtx rtl, enum machine_mode mode, bool can_use_fbreg)\n \t memory) so DWARF consumers need to be aware of the subtle\n \t distinction between OP_REG and OP_BASEREG.  */\n       if (REGNO (rtl) < FIRST_PSEUDO_REGISTER)\n-\tmem_loc_result = based_loc_descr (reg_number (rtl), 0, can_use_fbreg);\n+\tmem_loc_result = based_loc_descr (dbx_reg_number (rtl), 0,\n+\t\t\t\t\t  can_use_fbreg);\n       break;\n \n     case MEM:\n@@ -8549,7 +8550,7 @@ mem_loc_descriptor (rtx rtl, enum machine_mode mode, bool can_use_fbreg)\n     case PLUS:\n     plus:\n       if (is_based_loc (rtl))\n-\tmem_loc_result = based_loc_descr (reg_number (XEXP (rtl, 0)),\n+\tmem_loc_result = based_loc_descr (dbx_reg_number (XEXP (rtl, 0)),\n \t\t\t\t\t  INTVAL (XEXP (rtl, 1)),\n \t\t\t\t\t  can_use_fbreg);\n       else"}]}