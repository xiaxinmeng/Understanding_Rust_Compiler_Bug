{"sha": "98412b775be070bb8e7d56cd20df527a43bdb26e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg0MTJiNzc1YmUwNzBiYjhlN2Q1NmNkMjBkZjUyN2E0M2JkYjI2ZQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2012-09-03T11:46:56Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2012-09-03T11:46:56Z"}, "message": "s390.c (s390_loadrelative_operand_p): New function.\n\n2012-09-03  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* config/s390/s390.c (s390_loadrelative_operand_p): New function.\n\t(s390_check_qrst_address, print_operand_address): Use\n\ts390_loadrelative_operand_p instead of s390_symref_operand_p.\n\t(s390_check_symref_alignment): Accept pointer size alignment for GOT slots.\n\t(legitimize_pic_address): Use load relative on z10 or later.\n\nFrom-SVN: r190884", "tree": {"sha": "941dda4371c3b6e951727e0439373602e81d438c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/941dda4371c3b6e951727e0439373602e81d438c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98412b775be070bb8e7d56cd20df527a43bdb26e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98412b775be070bb8e7d56cd20df527a43bdb26e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98412b775be070bb8e7d56cd20df527a43bdb26e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98412b775be070bb8e7d56cd20df527a43bdb26e/comments", "author": null, "committer": null, "parents": [{"sha": "d540153b6766cc4079627ef9d70afff529b3301f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d540153b6766cc4079627ef9d70afff529b3301f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d540153b6766cc4079627ef9d70afff529b3301f"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "9b3891c66c0e4f5673e9799e04414694410a14b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98412b775be070bb8e7d56cd20df527a43bdb26e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98412b775be070bb8e7d56cd20df527a43bdb26e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98412b775be070bb8e7d56cd20df527a43bdb26e", "patch": "@@ -1,3 +1,11 @@\n+2012-09-03  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* config/s390/s390.c (s390_loadrelative_operand_p): New function.\n+\t(s390_check_qrst_address, print_operand_address): Use\n+\ts390_loadrelative_operand_p instead of s390_symref_operand_p.\n+\t(s390_check_symref_alignment): Accept pointer size alignment for GOT slots.\n+\t(legitimize_pic_address): Use load relative on z10 or later.\n+\n 2012-09-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/53923"}, {"sha": "976d4cbc8a7c05570f80fa81b2ef7520e0bda9d9", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98412b775be070bb8e7d56cd20df527a43bdb26e/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98412b775be070bb8e7d56cd20df527a43bdb26e/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=98412b775be070bb8e7d56cd20df527a43bdb26e", "patch": "@@ -2123,6 +2123,22 @@ s390_symref_operand_p (rtx addr, rtx *symref, HOST_WIDE_INT *addend)\n   return true;\n }\n \n+/* Return TRUE if ADDR is an operand valid for a load/store relative\n+   instructions.  Be aware that the alignment of the operand needs to\n+   be checked separately.  */\n+static bool\n+s390_loadrelative_operand_p (rtx addr)\n+{\n+  if (GET_CODE (addr) == CONST)\n+    addr = XEXP (addr, 0);\n+\n+  /* Enable load relative for symbol@GOTENT.  */\n+  if (GET_CODE (addr) == UNSPEC\n+      && XINT (addr, 1) == UNSPEC_GOTENT)\n+    return true;\n+\n+  return s390_symref_operand_p (addr, NULL, NULL);\n+}\n \n /* Return true if the address in OP is valid for constraint letter C\n    if wrapped in a MEM rtx.  Set LIT_POOL_OK to true if it literal\n@@ -2137,7 +2153,7 @@ s390_check_qrst_address (char c, rtx op, bool lit_pool_ok)\n \n   /* This check makes sure that no symbolic address (except literal\n      pool references) are accepted by the R or T constraints.  */\n-  if (s390_symref_operand_p (op, NULL, NULL))\n+  if (s390_loadrelative_operand_p (op))\n     return 0;\n \n   /* Ensure literal pool references are only accepted if LIT_POOL_OK.  */\n@@ -2941,6 +2957,13 @@ s390_check_symref_alignment (rtx addr, HOST_WIDE_INT alignment)\n   HOST_WIDE_INT addend;\n   rtx symref;\n \n+  /* Accept symbol@GOTENT with pointer size alignment.  */\n+  if (GET_CODE (addr) == CONST\n+      && GET_CODE (XEXP (addr, 0)) == UNSPEC\n+      && XINT (XEXP (addr, 0), 1) == UNSPEC_GOTENT\n+      && alignment <= UNITS_PER_LONG)\n+    return true;\n+\n   if (!s390_symref_operand_p (addr, &symref, &addend))\n     return false;\n \n@@ -3398,9 +3421,14 @@ legitimize_pic_address (rtx orig, rtx reg)\n \n           new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOTENT);\n           new_rtx = gen_rtx_CONST (Pmode, new_rtx);\n-          emit_move_insn (temp, new_rtx);\n \n-          new_rtx = gen_const_mem (Pmode, temp);\n+\t  if (!TARGET_Z10)\n+\t    {\n+\t      emit_move_insn (temp, new_rtx);\n+\t      new_rtx = gen_const_mem (Pmode, temp);\n+\t    }\n+\t  else\n+\t    new_rtx = gen_const_mem (GET_MODE (reg), new_rtx);\n           emit_move_insn (reg, new_rtx);\n           new_rtx = reg;\n         }\n@@ -5250,7 +5278,7 @@ print_operand_address (FILE *file, rtx addr)\n {\n   struct s390_address ad;\n \n-  if (s390_symref_operand_p (addr, NULL, NULL))\n+  if (s390_loadrelative_operand_p (addr))\n     {\n       if (!TARGET_Z10)\n \t{"}]}