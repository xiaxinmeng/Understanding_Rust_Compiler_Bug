{"sha": "11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d", "node_id": "C_kwDOANBUbNoAKDExY2U4ZDA0ZjI5NDE3ZjI1NDFkOWI5YmJmYjU0YjNiMjZkN2E5MGQ", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-07T00:16:24Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-07T00:16:24Z"}, "message": "Daily bump.", "tree": {"sha": "905e63da5fb87d2cd9b348b28679f6b2476d0cbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/905e63da5fb87d2cd9b348b28679f6b2476d0cbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d/comments", "author": null, "committer": null, "parents": [{"sha": "d564a83d14252d7db01381f71900b7a68357803b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d564a83d14252d7db01381f71900b7a68357803b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d564a83d14252d7db01381f71900b7a68357803b"}], "stats": {"total": 483, "additions": 482, "deletions": 1}, "files": [{"sha": "dfe7009e8f0aa32b467f70659c75d40e6d11cd1f", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d", "patch": "@@ -1,3 +1,9 @@\n+2022-01-06  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* inclhack.def (vxworks_next_yvals): New hack.\n+\t* tests/base/yvals.h: New expected test result.\n+\t* fixincl.x: Regenerate.\n+\n 2022-01-04  Olivier Hainque  <hainque@adacore.com>\n \n \t* inclhack.def (vxworks_posix_mkdir): Refine to expose a"}, {"sha": "c7d12d9a4898a5665d26dc8ae48ca67967d23583", "filename": "gcc/ChangeLog", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d", "patch": "@@ -1,3 +1,93 @@\n+2022-01-06  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/103925\n+\t* config/i386/i386.c (ix86_output_indirect_function_return):\n+\tGenerate INT3 after indirect jmp for -mharden-sls=indirect-jmp.\n+\n+2022-01-06  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/102952\n+\t* config/i386/i386-opts.h (harden_sls): Replace\n+\tharden_sls_indirect_branch with harden_sls_indirect_jmp.\n+\t* config/i386/i386.c (ix86_output_jmp_thunk_or_indirect):\n+\tLikewise.\n+\t(ix86_output_indirect_jmp): Likewise.\n+\t(ix86_output_call_insn): Likewise.\n+\t* config/i386/i386.opt: Replace indirect-branch with\n+\tindirect-jmp.  Replace harden_sls_indirect_branch with\n+\tharden_sls_indirect_jmp.\n+\t* doc/invoke.texi (-harden-sls=): Replace indirect-branch with\n+\tindirect-jmp.\n+\n+2022-01-06  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_output_ssemov) <MODE_DI>:\n+\tAdd %q modifier for operands in general registers.\n+\t<MODE_SI>: Add %q modifier for operands in general registers.\n+\t* config/i386/i386.md (*movhi_internal): Change type attribute of\n+\txmm-gpr interunit alternatives 9,10 to ssemov and mode attribute\n+\tto SImode for non-avx512fp16 targets.\n+\t(*movhf_internal): Ditto for xmm-gpr interunit alternatives 6,8.\n+\t* config/i386/mmx.md (*movv2qi_internal):\n+\tDitto for xmm-gpr interunit alternatives 8,9.\n+\n+2022-01-06  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* common/config/riscv/riscv-common.c (riscv_implied_info): Add\n+\tvector extensions.\n+\t(riscv_ext_version_table): Add version info for vector extensions.\n+\t(riscv_ext_flag_table): Add option mask for vector extensions.\n+\t* config/riscv/riscv-opts.h (MASK_VECTOR_EEW_32): New.\n+\t(MASK_VECTOR_EEW_64): New.\n+\t(MASK_VECTOR_EEW_FP_32): New.\n+\t(MASK_VECTOR_EEW_FP_64): New.\n+\t(MASK_ZVL32B): New.\n+\t(MASK_ZVL64B): New.\n+\t(MASK_ZVL128B): New.\n+\t(MASK_ZVL256B): New.\n+\t(MASK_ZVL512B): New.\n+\t(MASK_ZVL1024B): New.\n+\t(MASK_ZVL2048B): New.\n+\t(MASK_ZVL4096B): New.\n+\t(MASK_ZVL8192B): New.\n+\t(MASK_ZVL16384B): New.\n+\t(MASK_ZVL32768B): New.\n+\t(MASK_ZVL65536B): New.\n+\t(TARGET_ZVL32B): New.\n+\t(TARGET_ZVL64B): New.\n+\t(TARGET_ZVL128B): New.\n+\t(TARGET_ZVL256B): New.\n+\t(TARGET_ZVL512B): New.\n+\t(TARGET_ZVL1024B): New.\n+\t(TARGET_ZVL2048B): New.\n+\t(TARGET_ZVL4096B): New.\n+\t(TARGET_ZVL8192B): New.\n+\t(TARGET_ZVL16384B): New.\n+\t(TARGET_ZVL32768B): New.\n+\t(TARGET_ZVL65536B): New.\n+\t* config/riscv/riscv.opt (Mask(VECTOR)): New.\n+\t(riscv_vector_eew_flags): New.\n+\t(riscv_zvl_flags): New.\n+\n+2022-01-06  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* common/config/riscv/riscv-common.c\n+\t(riscv_subset_list::parse_multiletter_ext): Allow ext. name has\n+\tdigit.\n+\n+2022-01-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/103899\n+\t* expr.c (expand_expr_real_1): Add a workaround for bogus uninit\n+\twarning by moving context variable to the only spot where it is used\n+\tand moving gcc_assert into if body.\n+\n+2022-01-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/103908\n+\t* ifcvt.c (bb_valid_for_noce_process_p): Punt on bbs ending with\n+\tasm goto.\n+\n 2022-01-05  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \tPR target/103622"}, {"sha": "2493603a2a43d93f78456d576a044beceb6037a0", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d", "patch": "@@ -1 +1 @@\n-20220106\n+20220107"}, {"sha": "42a12ab615c9d94a2ae1b8178008e4076546582e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 293, "deletions": 0, "changes": 293, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d", "patch": "@@ -1,3 +1,296 @@\n+2022-01-06  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Range): Warn on null range, unless we are\n+\tinside a generic unit or an instance thereof.\n+\t* sem_ch3.adb (Analyze_Subtype_Indication): Minor: avoid double\n+\tnegative.\n+\n+2022-01-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* errout.adb (Adjust_Name_Case): Remove unnecessary declare\n+\tblock.\n+\n+2022-01-06  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/a-ngcoar.adb: Add pragma to ignore assertions in\n+\tinstance.\n+\t* libgnat/a-ngrear.adb: Likewise.\n+\t* libgnat/s-gearop.adb: Prove implementation is free of runtime\n+\terrors.\n+\t* libgnat/s-gearop.ads: Add contracts to protect against runtime\n+\terrors in the generic part.\n+\n+2022-01-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* errout.adb (Remove_Warning_Messages): Use traversal procedure\n+\tinstead of traversal function, since we discard status of each\n+\tstep anyway.\n+\n+2022-01-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Concatenate): There is no reason for using\n+\tdeclaring, raising and catching an exception; a simple return\n+\tstatement is enough.\n+\n+2022-01-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_eval.adb (Eval_Arithmetic_Op): Add Loc parameter to all\n+\tcalls to Apply_Compile_Time_Constraint_Error related to division\n+\tby zero.\n+\n+2022-01-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* errout.adb (Remove_Warning_Messages): Remove unnecessary guard.\n+\t* exp_util.adb (Kill_Dead_Code): Likewise.\n+\t* par_sco.adb (Traverse_Declarations_Or_Statements): Likewise.\n+\t* sem_ch3.adb (Build_Derived_Record_Type): Likewise.\n+\t* sem_ch4.adb (Traverse_Interfaces): Likewise.\n+\t* sem_eval.adb (Traverse_Interfaces): Likewise.\n+\t* sem_util.adb (Collect_Interfaces): Likewise.\n+\t(Has_Non_Null_Statements, Side_Effect_Free_Statements):\n+\tLikewise; turn into WHILE loops, for consistency.\n+\n+2022-01-06  Etienne Servais  <servais@adacore.com>\n+\n+\t* sem_type.adb (Full_View_Covers): Fix typo.\n+\n+2022-01-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch12.adb (Insert_Freeze_Node_For_Instance): When going to\n+\tthe outer level, do not jump over following instantiations in\n+\tthe list.\n+\n+2022-01-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* err_vars.ads (Warn_On_Instance): Remove; it was a relic from\n+\tthe previous handling of warning in instances that was removed\n+\tdecades ago.\n+\n+2022-01-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* errout.adb (Error_Msg_Internal): Reorder words.\n+\t* erroutc.ads (Is_Warning_Msg): Add closing paren.\n+\t* sem_util.adb (Compile_Time_Constraint_Error): Fix casing.\n+\n+2022-01-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Resolve_String_Literal): Simplify pointer\n+\tarithmetic.\n+\n+2022-01-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Resolve_String_Literal): Avoid unnecessary\n+\tconversions inside \"<\" and \">\" bodies.\n+\n+2022-01-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* checks.adb (Null_Exclusion_Static_Checks,\n+\tSelected_Range_Checks): Fix style.\n+\n+2022-01-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Package_Renaming): Do not check for Text_IO\n+\tspecial units when the name of the renaming is a generic instance,\n+\twhich is the case for package instantiations in the GNAT model.\n+\n+2022-01-06  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_util.adb (Build_Discriminant_Reference): In the unexpected\n+\tcase where we previously would fail an assertion, we instead\n+\trevert to the old behavior.\n+\n+2022-01-06  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_util.adb (Build_Actual_Subtype_Of_Component): Define a new\n+\tlocal function, Build_Discriminant_Reference, and call it in\n+\teach of the three cases where Make_Selected_Component was\n+\tpreviously being called to construct a discriminant reference (2\n+\tin Build_Actual_Array_Constraint and 1 in\n+\tBuild_Actual_Record_Constraint). Instead of unconditionally\n+\tusing the passed-in object name as the prefix for the new\n+\tselected component node, this new function checks to see if\n+\tperhaps a prefix of that name should be used instead.\n+\n+2022-01-06  Etienne Servais  <servais@adacore.com>\n+\n+\t* atree.adb: Fix typo.\n+\t* einfo.ads: Likewise.\n+\t* exp_aggr.adb: Likewise.\n+\t* exp_ch6.adb: Likewise.\n+\t* exp_ch7.adb: Likewise.\n+\t* exp_ch9.adb: Likewise.\n+\t* exp_prag.adb: Likewise.\n+\t* exp_unst.adb: Likewise.\n+\t* exp_unst.ads: Likewise.\n+\t* exp_util.adb: Likewise.\n+\t* par-endh.adb: Likewise.\n+\t* par.adb: Likewise.\n+\t* restrict.adb: Likewise.\n+\t* sem.ads: Likewise.\n+\t* sem_ch4.adb: Likewise.\n+\t* sem_ch5.adb: Likewise.\n+\t* sem_ch6.adb: Likewise.\n+\t* sem_ch8.adb: Likewise.\n+\t* sem_ch12.adb: Likewise.\n+\t* sem_ch13.adb: Likewise.\n+\t* sem_dim.adb: Likewise.\n+\t* sem_elab.adb: Likewise.\n+\t* sem_prag.adb: Likewise.\n+\t* sem_res.adb: Likewise.\n+\t* sem_util.adb: Likewise.\n+\t* sem_util.ads: Likewise.\n+\t* sinfo.ads: Likewise.\n+\t* sprint.adb: Likewise.\n+\t* urealp.adb: Likewise.\n+\n+2022-01-06  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Assignment): Replace current instance of\n+\ttype with Init_Proc formal.\n+\t* sem_attr.adb (OK_Self_Reference): Handle recognition of\n+\tCurrent_Instance to detect certain expansion.\n+\t* sem_ch4.adb (Analyze_One_Call): Set actual's type when the\n+\tactual in question is a current instance and its corresponding\n+\tformal is an incomplete type.\n+\t* sem_util.adb (Is_Current_Instance): Add check for incomplete\n+\tviews and add comment.\n+\n+2022-01-06  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/s-rident.ads (No_Tagged_Type_Registration): New\n+\trestriction identifier.\n+\t* restrict.ads (Implementation_Restriction): Add restriction.\n+\t* exp_ch7.adb (Process_Declarations): Suppress\n+\ttagged-type-related finalization actions if the restriction is\n+\tactive.  Call RTE_Available last.\n+\t* exp_disp.adb (Make_DT): Likewise.\n+\t* exp_util.adb (Requires_Cleanup_Actions): Return False for a\n+\ttagged type declaration if No_Tagged_Type_Registration is\n+\tactive.\n+\t* sem_attr.adb (Check_Stream_Attribute): Check restriction\n+\tNo_Tagged_Type_Registration.\n+\t* libgnat/a-except.ads (Null_Occurrence): Minor: Initialize, to\n+\tavoid stopping at a warning in gdb.\n+\t* doc/gnat_rm/standard_and_implementation_defined_restrictions.rst:\n+\tDocument new restriction.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-01-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* par-ch4.adb (P_Simple_Expression): Reuse Null_String_Id.\n+\t* prep.adb (Parse_Def_File): Likewise; remove Empty_String.\n+\n+2022-01-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* stand.ads (Any_Access): Delete.\n+\t(Universal_Access): New entity.\n+\t* einfo.ads: Remove obsolete reference to Any_Access.\n+\t* gen_il-gen-gen_entities.adb: Likewise.\n+\t* cstand.adb (Create_Standard): Do not create Any_Access and create\n+\tUniversal_Access as a full type instead.\n+\t* errout.adb (Set_Msg_Insertion_Type_Reference): Do not deal with\n+\tAny_Access and deal with Universal_Access instead.\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Replace Any_Access with\n+\tUniversal_Access.\n+\t* sem_ch4.adb (Analyze_Null): Likewise.\n+\t(Find_Non_Universal_Interpretations): Likewise.\n+\t(Find_Equality_Types.Try_One_Interp): Likewise and avoid shadowing\n+\tby renaming a local variable of the same name.\n+\t* sem_res.adb (Make_Call_Into_Operato): Likewise.\n+\t(Resolve_Equality_Op): Likewise.\n+\t* sem_type.adb (Covers): Likewise.\n+\t(Specific_Type): Likewise.\n+\n+2022-01-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* treepr.adb (Destroy): Prevent spurious check from CodePeer.\n+\n+2022-01-06  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-exponu.adb (Exponu): Add annotation.\n+\n+2022-01-06  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch6.adb (Add_Simple_Call_By_Copy_Code): Add comments\n+\tregarding special handling of components which depend on\n+\tdiscriminants.\n+\t* exp_dist.adb (Build_From_Any_Function): Add Real_Rep actual\n+\tfor calls to Has_Stream_Attribute_Definition.\n+\t(Build_To_Any_Function): Likewise.\n+\t(Build_TypeCode_Function): Likewise.\n+\t* freeze.adb (Freeze_Entity): Add missing comment for Test_E.\n+\t* libgnat/s-utf_32.adb: Remove disabled warning comments and\n+\ttemporarily inserted pragma warnings.  Remove very old (2006 and\n+\t2012) comments about bootstrapping older versions.\n+\t* par.adb (P_Identifier): Add new parameter Force_Msg.\n+\t* par-ch2.adb (P_Identifier): Restructure and clean up function.\n+\t* par-ch3.adb (P_Defining_Identifier): Remove code duplication\n+\tfor parsing identifiers.\n+\t* sem_attr.adb (Stream_Attribute_Available): Add missing\n+\tcomments and add Real_Rep actual for calls to\n+\tHas_Stream_Attribute_Definition.\n+\t* sem_cat.adb (Has_Read_Write_Attribute): Add Real_Rep actual\n+\tfor calls to Has_Stream_Attribute_Definition.\n+\t(Has_Stream_Attribute_Definition): Remove local Real_Rep and fix\n+\trecursive calls. Add default value for Real_Rep.\n+\t* sem_cat.ads (Has_Stream_Attribute_Definition): Add new out\n+\tparameter \"Real_Rep\".\n+\t* sem_type.adb (Add_Entry): Add condition to avoid passing\n+\tnon-function calls to Function_Interp_Has_Abstract_Op.\n+\t(Function_Interp_Has_Abstract_Op): Add missing comments and\n+\tremove check for Is_Overloadable.\n+\t* sem_util.adb (Derivation_Too_Early_To_Inherit): Remove\n+\tduplicated code.\n+\n+2022-01-06  Javier Miranda  <miranda@adacore.com>\n+\n+\t* contracts.adb (Restore_Original_Selected_Component): New\n+\tsubprogram that traverses a preanalyzed expression searching for\n+\tdispatching calls to functions whose original node was a\n+\tselected component, and replacing them with their original node.\n+\tThis functionality is required because the preanalyis of\n+\tdispatching calls using the Object.Operation notation transforms\n+\tsuch calls, and we need the original condition to properly\n+\tinherit and extend the condition expression on tagged type\n+\tderivations.  This functionality was previously provided by the\n+\troutine Install_Original_Selected_Component (as part of\n+\tinheriting conditions); now it is performed as part of the\n+\tpreanalysis of the condition, thus avoiding repeatedly\n+\tinstalling and restoring such nodes.\n+\t(Install_Original_Selected_Component): Removed.\n+\t(Restore_Dispatching_Calls): Removed.\n+\n+2022-01-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* treepr.adb (Visit_Node): Simplify repeated call to\n+\tNext_Entity.\n+\n+2022-01-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* treepr.ads (Treepr, Print_Tree_List, Print_Tree_Elist): Fix\n+\tstyle in comments.\n+\t* treepr.adb (Serial_Numbers): Hash table instance.\n+\t(Hash): Hashing routine.\n+\t(Print_Field): Fix style.\n+\t(Print_Init): Adapt to simple hash table.\n+\t(Print_Term): Likewise.\n+\t(Serial_Numbers): Likewise.\n+\t(Set_Serial_Number): Likewise.\n+\n+2022-01-06  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-expmod.adb: Mark in SPARK. Add ghost code for proof.\n+\t* libgnat/s-expmod.ads: Mark in SPARK. Add ghost specifications.\n+\n+2022-01-06  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-explllu.ads: Mark in SPARK.\n+\t* libgnat/s-expllu.ads: Mark in SPARK.\n+\t* libgnat/s-exponu.adb: Add loop invariants and needed\n+\tassertions.\n+\t* libgnat/s-exponu.ads: Add functional contract.\n+\t* libgnat/s-expuns.ads: Mark in SPARK.\n+\n 2022-01-05  Steve Baird  <baird@adacore.com>\n \n \t* exp_ch5.adb (Finish_Binding_Object_Declaration): Fix a bug"}, {"sha": "9b2b59be7f3627318208213efbe7847d2e9648fb", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d", "patch": "@@ -1,3 +1,10 @@\n+2022-01-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/103546\n+\t* store.cc (store::eval_alias_1): Refactor handling of decl\n+\tregions, adding a test for may_be_aliased, rejecting those for\n+\twhich it returns false.\n+\n 2021-12-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* engine.cc: Define INCLUDE_MEMORY instead of INCLUDE_UNIQUE_PTR."}, {"sha": "112acab8316145a8adcfc28161a4972a11e49b02", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d", "patch": "@@ -1,3 +1,10 @@\n+2022-01-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/103758\n+\t* c-pragma.c (handle_pragma_scalar_storage_order): Use %< %> in\n+\tdiagnostic messages.\n+\t(handle_pragma_diagnostic): Likewise.\n+\n 2022-01-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/103758"}, {"sha": "bc7c2cb16452d3bdd5885b136c43d98feb041200", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d", "patch": "@@ -1,3 +1,10 @@\n+2022-01-06  Steve Kargl  <kargl@gcc.gnu.org>\n+\t    Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR fortran/103287\n+\t* interface.c (argument_rank_mismatch): Replace incorrect assertion\n+\twith return.\n+\n 2022-01-05  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR fortran/103258"}, {"sha": "d6dfeac6279fc6aef99eca61cc6e1ea63c772e4f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d", "patch": "@@ -1,3 +1,48 @@\n+2022-01-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/103546\n+\t* gcc.dg/analyzer/aliasing-3.c: New test.\n+\n+2022-01-06  Steve Kargl  <kargl@gcc.gnu.org>\n+\t    Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR fortran/103287\n+\t* gfortran.dg/c-interop/pr103287-1.f90: new.\n+\t* gfortran.dg/c-interop/pr103287-2.f90: new.\n+\n+2022-01-06  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/103925\n+\t* gcc.target/i386/harden-sls-6.c: New test.\n+\n+2022-01-06  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/pr102811-2.c (dg-final):\n+\tUpdate scan-assembler-times directives.\n+\t* gcc.target/i386/sse2-float16-2.c (dg-final):\n+\tUpdate scan-assembler directives.\n+\n+2022-01-06  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* gcc.target/riscv/predef-14.c: New.\n+\t* gcc.target/riscv/predef-15.c: Ditto.\n+\t* gcc.target/riscv/predef-16.c: Ditto.\n+\n+2022-01-06  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/69681\n+\t* g++.dg/cpp0x/constexpr-compare2.C: New test.\n+\n+2022-01-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/103908\n+\t* gcc.target/i386/pr103908.c: New test.\n+\n+2022-01-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/103758\n+\t* gcc.dg/sso-6.c: Update dg-warning.\n+\n 2022-01-05  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/103861"}, {"sha": "6c5cdd3f77046014c51c908f6599ea65386672bd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d", "patch": "@@ -1,3 +1,29 @@\n+2022-01-06  Pavel I. Kryukov  <pavel.kryukov@phystech.edu>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103853\n+\t* include/bits/forward_list.tcc (forward_list::merge): Check for\n+\tself-merge.\n+\t* testsuite/23_containers/forward_list/operations/merge.cc: New test.\n+\n+2022-01-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/regex.h (basic_regex, match_results): Qualify\n+\tname in friend declaration, to work around Clang bug.\n+\n+2022-01-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/ext/rope/pthread7-rope.cc: Add dg-timeout-factor.\n+\n+2022-01-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103911\n+\t* include/std/charconv (__from_chars_alpha_to_num): Return\n+\tchar instead of unsigned char. Change invalid return value to\n+\t127 instead of using numeric trait.\n+\t(__from_chars_alnum): Fix comment. Do not use std::isdigit.\n+\tChange type of variable to char.\n+\n 2022-01-05  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tPR libstdc++/68303"}]}