{"sha": "0dcfe9ab48b775629e5a8f5894a017e2bacc1c58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRjZmU5YWI0OGI3NzU2MjllNWE4ZjU4OTRhMDE3ZTJiYWNjMWM1OA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2016-05-23T09:14:37Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2016-05-23T09:14:37Z"}, "message": "[ARM, AArch64] Add missing tests for intrinsics operating on poly64 and poly128 types.\n\n2016-05-23  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h (result):\n\tAdd poly64x1_t and poly64x2_t cases if supported.\n\t* gcc.target/aarch64/advsimd-intrinsics/compute-ref-data.h\n\t(buffer, buffer_pad, buffer_dup, buffer_dup_pad): Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/p64_p128.c: New file.\n\t* gcc.target/aarch64/advsimd-intrinsics/vreinterpret_p128.c: New file.\n\t* gcc.target/aarch64/advsimd-intrinsics/vreinterpret_p64.c: New file.\n\nFrom-SVN: r236579", "tree": {"sha": "352a62f50f1de0b96446059513caeb7c603da3a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/352a62f50f1de0b96446059513caeb7c603da3a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dcfe9ab48b775629e5a8f5894a017e2bacc1c58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dcfe9ab48b775629e5a8f5894a017e2bacc1c58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dcfe9ab48b775629e5a8f5894a017e2bacc1c58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dcfe9ab48b775629e5a8f5894a017e2bacc1c58/comments", "author": null, "committer": null, "parents": [{"sha": "ffd70e4a61cea6323d111867961763f441073c40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffd70e4a61cea6323d111867961763f441073c40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffd70e4a61cea6323d111867961763f441073c40"}], "stats": {"total": 1036, "additions": 1036, "deletions": 0}, "files": [{"sha": "194d136fd73d6f7fcca1bc9bb5a095a6ab31ab2e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dcfe9ab48b775629e5a8f5894a017e2bacc1c58/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dcfe9ab48b775629e5a8f5894a017e2bacc1c58/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0dcfe9ab48b775629e5a8f5894a017e2bacc1c58", "patch": "@@ -1,3 +1,13 @@\n+2016-05-23  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h (result):\n+\tAdd poly64x1_t and poly64x2_t cases if supported.\n+\t* gcc.target/aarch64/advsimd-intrinsics/compute-ref-data.h\n+\t(buffer, buffer_pad, buffer_dup, buffer_dup_pad): Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/p64_p128.c: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vreinterpret_p128.c: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vreinterpret_p64.c: New file.\n+\n 2016-05-23  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vrnd.c: New."}, {"sha": "3363a7208625175d0a9cbb79954902c80aeedabc", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dcfe9ab48b775629e5a8f5894a017e2bacc1c58/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dcfe9ab48b775629e5a8f5894a017e2bacc1c58/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h?ref=0dcfe9ab48b775629e5a8f5894a017e2bacc1c58", "patch": "@@ -133,6 +133,9 @@ static ARRAY(result, uint, 32, 2);\n static ARRAY(result, uint, 64, 1);\n static ARRAY(result, poly, 8, 8);\n static ARRAY(result, poly, 16, 4);\n+#if defined (__ARM_FEATURE_CRYPTO)\n+static ARRAY(result, poly, 64, 1);\n+#endif\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n static ARRAY(result, float, 16, 4);\n #endif\n@@ -150,6 +153,9 @@ static ARRAY(result, uint, 32, 4);\n static ARRAY(result, uint, 64, 2);\n static ARRAY(result, poly, 8, 16);\n static ARRAY(result, poly, 16, 8);\n+#if defined (__ARM_FEATURE_CRYPTO)\n+static ARRAY(result, poly, 64, 2);\n+#endif\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n static ARRAY(result, float, 16, 8);\n #endif"}, {"sha": "f8c4aefeec967f2f4dedbabb0719a810074f7995", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/compute-ref-data.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dcfe9ab48b775629e5a8f5894a017e2bacc1c58/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fcompute-ref-data.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dcfe9ab48b775629e5a8f5894a017e2bacc1c58/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fcompute-ref-data.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fcompute-ref-data.h?ref=0dcfe9ab48b775629e5a8f5894a017e2bacc1c58", "patch": "@@ -118,6 +118,10 @@ VECT_VAR_DECL_INIT(buffer, uint, 32, 2);\n PAD(buffer_pad, uint, 32, 2);\n VECT_VAR_DECL_INIT(buffer, uint, 64, 1);\n PAD(buffer_pad, uint, 64, 1);\n+#if defined (__ARM_FEATURE_CRYPTO)\n+VECT_VAR_DECL_INIT(buffer, poly, 64, 1);\n+PAD(buffer_pad, poly, 64, 1);\n+#endif\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n VECT_VAR_DECL_INIT(buffer, float, 16, 4);\n PAD(buffer_pad, float, 16, 4);\n@@ -144,6 +148,10 @@ VECT_VAR_DECL_INIT(buffer, poly, 8, 16);\n PAD(buffer_pad, poly, 8, 16);\n VECT_VAR_DECL_INIT(buffer, poly, 16, 8);\n PAD(buffer_pad, poly, 16, 8);\n+#if defined (__ARM_FEATURE_CRYPTO)\n+VECT_VAR_DECL_INIT(buffer, poly, 64, 2);\n+PAD(buffer_pad, poly, 64, 2);\n+#endif\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n VECT_VAR_DECL_INIT(buffer, float, 16, 8);\n PAD(buffer_pad, float, 16, 8);\n@@ -178,6 +186,10 @@ VECT_VAR_DECL_INIT(buffer_dup, poly, 8, 8);\n VECT_VAR_DECL(buffer_dup_pad, poly, 8, 8);\n VECT_VAR_DECL_INIT(buffer_dup, poly, 16, 4);\n VECT_VAR_DECL(buffer_dup_pad, poly, 16, 4);\n+#if defined (__ARM_FEATURE_CRYPTO)\n+VECT_VAR_DECL_INIT4(buffer_dup, poly, 64, 1);\n+VECT_VAR_DECL(buffer_dup_pad, poly, 64, 1);\n+#endif\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n VECT_VAR_DECL_INIT4(buffer_dup, float, 16, 4);\n VECT_VAR_DECL(buffer_dup_pad, float, 16, 4);\n@@ -205,6 +217,10 @@ VECT_VAR_DECL_INIT(buffer_dup, poly, 8, 16);\n VECT_VAR_DECL(buffer_dup_pad, poly, 8, 16);\n VECT_VAR_DECL_INIT(buffer_dup, poly, 16, 8);\n VECT_VAR_DECL(buffer_dup_pad, poly, 16, 8);\n+#if defined (__ARM_FEATURE_CRYPTO)\n+VECT_VAR_DECL_INIT4(buffer_dup, poly, 64, 2);\n+VECT_VAR_DECL(buffer_dup_pad, poly, 64, 2);\n+#endif\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n VECT_VAR_DECL_INIT(buffer_dup, float, 16, 8);\n VECT_VAR_DECL(buffer_dup_pad, float, 16, 8);"}, {"sha": "ced3884de5224bc75eca2037b7828c1ef5b3d81f", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/p64_p128.c", "status": "added", "additions": 665, "deletions": 0, "changes": 665, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dcfe9ab48b775629e5a8f5894a017e2bacc1c58/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fp64_p128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dcfe9ab48b775629e5a8f5894a017e2bacc1c58/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fp64_p128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fp64_p128.c?ref=0dcfe9ab48b775629e5a8f5894a017e2bacc1c58", "patch": "@@ -0,0 +1,665 @@\n+/* This file contains tests for all the *p64 intrinsics, except for\n+   vreinterpret which have their own testcase.  */\n+\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results: vbsl.  */\n+VECT_VAR_DECL(vbsl_expected,poly,64,1) [] = { 0xfffffff1 };\n+VECT_VAR_DECL(vbsl_expected,poly,64,2) [] = { 0xfffffff1,\n+\t\t\t\t\t      0xfffffff1 };\n+\n+/* Expected results: vceq.  */\n+VECT_VAR_DECL(vceq_expected,uint,64,1) [] = { 0x0 };\n+\n+/* Expected results: vcombine.  */\n+VECT_VAR_DECL(vcombine_expected,poly,64,2) [] = { 0xfffffffffffffff0, 0x88 };\n+\n+/* Expected results: vcreate.  */\n+VECT_VAR_DECL(vcreate_expected,poly,64,1) [] = { 0x123456789abcdef0 };\n+\n+/* Expected results: vdup_lane.  */\n+VECT_VAR_DECL(vdup_lane_expected,poly,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(vdup_lane_expected,poly,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t\t   0xfffffffffffffff0 };\n+\n+/* Expected results: vdup_n.  */\n+VECT_VAR_DECL(vdup_n_expected0,poly,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(vdup_n_expected0,poly,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t\t 0xfffffffffffffff0 };\n+VECT_VAR_DECL(vdup_n_expected1,poly,64,1) [] = { 0xfffffffffffffff1 };\n+VECT_VAR_DECL(vdup_n_expected1,poly,64,2) [] = { 0xfffffffffffffff1,\n+\t\t\t\t\t\t 0xfffffffffffffff1 };\n+VECT_VAR_DECL(vdup_n_expected2,poly,64,1) [] = { 0xfffffffffffffff2 };\n+VECT_VAR_DECL(vdup_n_expected2,poly,64,2) [] = { 0xfffffffffffffff2,\n+\t\t\t\t\t\t 0xfffffffffffffff2 };\n+\n+/* Expected results: vext.  */\n+VECT_VAR_DECL(vext_expected,poly,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(vext_expected,poly,64,2) [] = { 0xfffffffffffffff1, 0x88 };\n+\n+/* Expected results: vget_low.  */\n+VECT_VAR_DECL(vget_low_expected,poly,64,1) [] = { 0xfffffffffffffff0 };\n+\n+/* Expected results: vld1.  */\n+VECT_VAR_DECL(vld1_expected,poly,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(vld1_expected,poly,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t      0xfffffffffffffff1 };\n+\n+/* Expected results: vld1_dup.  */\n+VECT_VAR_DECL(vld1_dup_expected0,poly,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(vld1_dup_expected0,poly,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t\t   0xfffffffffffffff0 };\n+VECT_VAR_DECL(vld1_dup_expected1,poly,64,1) [] = { 0xfffffffffffffff1 };\n+VECT_VAR_DECL(vld1_dup_expected1,poly,64,2) [] = { 0xfffffffffffffff1,\n+\t\t\t\t\t\t   0xfffffffffffffff1 };\n+VECT_VAR_DECL(vld1_dup_expected2,poly,64,1) [] = { 0xfffffffffffffff2 };\n+VECT_VAR_DECL(vld1_dup_expected2,poly,64,2) [] = { 0xfffffffffffffff2,\n+\t\t\t\t\t\t   0xfffffffffffffff2 };\n+\n+/* Expected results: vld1_lane.  */\n+VECT_VAR_DECL(vld1_lane_expected,poly,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(vld1_lane_expected,poly,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t\t   0xaaaaaaaaaaaaaaaa };\n+\n+/* Expected results: vldX.  */\n+VECT_VAR_DECL(vld2_expected_0,poly,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(vld2_expected_1,poly,64,1) [] = { 0xfffffffffffffff1 };\n+VECT_VAR_DECL(vld3_expected_0,poly,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(vld3_expected_1,poly,64,1) [] = { 0xfffffffffffffff1 };\n+VECT_VAR_DECL(vld3_expected_2,poly,64,1) [] = { 0xfffffffffffffff2 };\n+VECT_VAR_DECL(vld4_expected_0,poly,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(vld4_expected_1,poly,64,1) [] = { 0xfffffffffffffff1 };\n+VECT_VAR_DECL(vld4_expected_2,poly,64,1) [] = { 0xfffffffffffffff2 };\n+VECT_VAR_DECL(vld4_expected_3,poly,64,1) [] = { 0xfffffffffffffff3 };\n+\n+/* Expected results: vldX_dup.  */\n+VECT_VAR_DECL(vld2_dup_expected_0,poly,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(vld2_dup_expected_1,poly,64,1) [] = { 0xfffffffffffffff1 };\n+VECT_VAR_DECL(vld3_dup_expected_0,poly,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(vld3_dup_expected_1,poly,64,1) [] = { 0xfffffffffffffff1 };\n+VECT_VAR_DECL(vld3_dup_expected_2,poly,64,1) [] = { 0xfffffffffffffff2 };\n+VECT_VAR_DECL(vld4_dup_expected_0,poly,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(vld4_dup_expected_1,poly,64,1) [] = { 0xfffffffffffffff1 };\n+VECT_VAR_DECL(vld4_dup_expected_2,poly,64,1) [] = { 0xfffffffffffffff2 };\n+VECT_VAR_DECL(vld4_dup_expected_3,poly,64,1) [] = { 0xfffffffffffffff3 };\n+\n+/* Expected results: vsli.  */\n+VECT_VAR_DECL(vsli_expected,poly,64,1) [] = { 0x10 };\n+VECT_VAR_DECL(vsli_expected,poly,64,2) [] = { 0x7ffffffffffff0,\n+\t\t\t\t\t      0x7ffffffffffff1 };\n+VECT_VAR_DECL(vsli_expected_max_shift,poly,64,1) [] = { 0x7ffffffffffffff0 };\n+VECT_VAR_DECL(vsli_expected_max_shift,poly,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t\t\t0xfffffffffffffff1 };\n+\n+/* Expected results: vsri.  */\n+VECT_VAR_DECL(vsri_expected,poly,64,1) [] = { 0xe000000000000000 };\n+VECT_VAR_DECL(vsri_expected,poly,64,2) [] = { 0xfffffffffffff800,\n+\t\t\t\t\t      0xfffffffffffff800 };\n+VECT_VAR_DECL(vsri_expected_max_shift,poly,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(vsri_expected_max_shift,poly,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t\t\t0xfffffffffffffff1 };\n+\n+/* Expected results: vst1_lane.  */\n+VECT_VAR_DECL(vst1_lane_expected,poly,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(vst1_lane_expected,poly,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t\t   0x3333333333333333 };\n+\n+int main (void)\n+{\n+  int i;\n+\n+  /* vbsl_p64 tests.  */\n+#define TEST_MSG \"VBSL/VBSLQ\"\n+\n+#define TEST_VBSL(T3, Q, T1, T2, W, N)\t\t\t\t\t\\\n+  VECT_VAR(vbsl_vector_res, T1, W, N) =\t\t\t\t\t\\\n+    vbsl##Q##_##T2##W(VECT_VAR(vbsl_vector_first, T3, W, N),\t\t\\\n+\t\t      VECT_VAR(vbsl_vector, T1, W, N),\t\t\t\\\n+\t\t      VECT_VAR(vbsl_vector2, T1, W, N));\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vbsl_vector_res, T1, W, N))\n+\n+  DECL_VARIABLE(vbsl_vector, poly, 64, 1);\n+  DECL_VARIABLE(vbsl_vector, poly, 64, 2);\n+  DECL_VARIABLE(vbsl_vector2, poly, 64, 1);\n+  DECL_VARIABLE(vbsl_vector2, poly, 64, 2);\n+  DECL_VARIABLE(vbsl_vector_res, poly, 64, 1);\n+  DECL_VARIABLE(vbsl_vector_res, poly, 64, 2);\n+\n+  DECL_VARIABLE(vbsl_vector_first, uint, 64, 1);\n+  DECL_VARIABLE(vbsl_vector_first, uint, 64, 2);\n+\n+  CLEAN(result, poly, 64, 1);\n+  CLEAN(result, poly, 64, 2);\n+\n+  VLOAD(vbsl_vector, buffer, , poly, p, 64, 1);\n+  VLOAD(vbsl_vector, buffer, q, poly, p, 64, 2);\n+\n+  VDUP(vbsl_vector2, , poly, p, 64, 1, 0xFFFFFFF3);\n+  VDUP(vbsl_vector2, q, poly, p, 64, 2, 0xFFFFFFF3);\n+\n+  VDUP(vbsl_vector_first, , uint, u, 64, 1, 0xFFFFFFF2);\n+  VDUP(vbsl_vector_first, q, uint, u, 64, 2, 0xFFFFFFF2);\n+\n+  TEST_VBSL(uint, , poly, p, 64, 1);\n+  TEST_VBSL(uint, q, poly, p, 64, 2);\n+\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vbsl_expected, \"\");\n+  CHECK(TEST_MSG, poly, 64, 2, PRIx64, vbsl_expected, \"\");\n+\n+  /* vceq_p64 tests. */\n+#undef TEST_MSG\n+#define TEST_MSG \"VCEQ\"\n+\n+#define TEST_VCOMP1(INSN, Q, T1, T2, T3, W, N)\t\t\t\t\\\n+  VECT_VAR(vceq_vector_res, T3, W, N) =\t\t\t\t\t\\\n+    INSN##Q##_##T2##W(VECT_VAR(vceq_vector, T1, W, N),\t\t\t\\\n+\t\t      VECT_VAR(vceq_vector2, T1, W, N));\t\t\\\n+  vst1##Q##_u##W(VECT_VAR(result, T3, W, N), VECT_VAR(vceq_vector_res, T3, W, N))\n+\n+#define TEST_VCOMP(INSN, Q, T1, T2, T3, W, N)\t\t\t\t\\\n+  TEST_VCOMP1(INSN, Q, T1, T2, T3, W, N)\n+\n+  DECL_VARIABLE(vceq_vector, poly, 64, 1);\n+  DECL_VARIABLE(vceq_vector2, poly, 64, 1);\n+  DECL_VARIABLE(vceq_vector_res, uint, 64, 1);\n+\n+  CLEAN(result, uint, 64, 1);\n+\n+  VLOAD(vceq_vector, buffer, , poly, p, 64, 1);\n+\n+  VDUP(vceq_vector2, , poly, p, 64, 1, 0x88);\n+\n+  fprintf(stderr, \"toto\\n\");\n+  TEST_VCOMP(vceq, , poly, p, uint, 64, 1);\n+\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, vceq_expected, \"\");\n+  fprintf(stderr, \"toto\\n\");\n+\n+  /* vcombine_p64 tests.  */\n+#undef TEST_MSG\n+#define TEST_MSG \"VCOMBINE\"\n+\n+#define TEST_VCOMBINE(T1, T2, W, N, N2)\t\t\t\t\t\\\n+  VECT_VAR(vcombine_vector128, T1, W, N2) =\t\t\t\t\\\n+    vcombine_##T2##W(VECT_VAR(vcombine_vector64_a, T1, W, N),\t\t\\\n+\t\t     VECT_VAR(vcombine_vector64_b, T1, W, N));\t\t\\\n+  vst1q_##T2##W(VECT_VAR(result, T1, W, N2), VECT_VAR(vcombine_vector128, T1, W, N2))\n+\n+  DECL_VARIABLE(vcombine_vector64_a, poly, 64, 1);\n+  DECL_VARIABLE(vcombine_vector64_b, poly, 64, 1);\n+  DECL_VARIABLE(vcombine_vector128, poly, 64, 2);\n+\n+  CLEAN(result, poly, 64, 2);\n+\n+  VLOAD(vcombine_vector64_a, buffer, , poly, p, 64, 1);\n+\n+  VDUP(vcombine_vector64_b, , poly, p, 64, 1, 0x88);\n+\n+  TEST_VCOMBINE(poly, p, 64, 1, 2);\n+\n+  CHECK(TEST_MSG, poly, 64, 2, PRIx16, vcombine_expected, \"\");\n+\n+  /* vcreate_p64 tests.  */\n+#undef TEST_MSG\n+#define TEST_MSG \"VCREATE\"\n+\n+#define TEST_VCREATE(T1, T2, W, N)\t\t\t\t\t\\\n+  VECT_VAR(vcreate_vector_res, T1, W, N) =\t\t\t\t\\\n+    vcreate_##T2##W(VECT_VAR(vcreate_val, T1, W, N));\t\t\t\\\n+  vst1_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vcreate_vector_res, T1, W, N))\n+\n+#define DECL_VAL(VAR, T1, W, N)\t\t\t\\\n+  uint64_t VECT_VAR(VAR, T1, W, N)\n+\n+  DECL_VAL(vcreate_val, poly, 64, 1);\n+  DECL_VARIABLE(vcreate_vector_res, poly, 64, 1);\n+\n+  CLEAN(result, poly, 64, 2);\n+\n+  VECT_VAR(vcreate_val, poly, 64, 1) = 0x123456789abcdef0ULL;\n+\n+  TEST_VCREATE(poly, p, 64, 1);\n+\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vcreate_expected, \"\");\n+\n+  /* vdup_lane_p64 tests.  */\n+#undef TEST_MSG\n+#define TEST_MSG \"VDUP_LANE/VDUP_LANEQ\"\n+\n+#define TEST_VDUP_LANE(Q, T1, T2, W, N, N2, L)\t\t\t\t\\\n+  VECT_VAR(vdup_lane_vector_res, T1, W, N) =\t\t\t\t\\\n+    vdup##Q##_lane_##T2##W(VECT_VAR(vdup_lane_vector, T1, W, N2), L);\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vdup_lane_vector_res, T1, W, N))\n+\n+  DECL_VARIABLE(vdup_lane_vector, poly, 64, 1);\n+  DECL_VARIABLE(vdup_lane_vector, poly, 64, 2);\n+  DECL_VARIABLE(vdup_lane_vector_res, poly, 64, 1);\n+  DECL_VARIABLE(vdup_lane_vector_res, poly, 64, 2);\n+\n+  CLEAN(result, poly, 64, 1);\n+  CLEAN(result, poly, 64, 2);\n+\n+  VLOAD(vdup_lane_vector, buffer, , poly, p, 64, 1);\n+\n+  TEST_VDUP_LANE(, poly, p, 64, 1, 1, 0);\n+  TEST_VDUP_LANE(q, poly, p, 64, 2, 1, 0);\n+\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vdup_lane_expected, \"\");\n+  CHECK(TEST_MSG, poly, 64, 2, PRIx64, vdup_lane_expected, \"\");\n+\n+  /* vdup_n_p64 tests.  */\n+#undef TEST_MSG\n+#define TEST_MSG \"VDUP/VDUPQ\"\n+\n+#define TEST_VDUP(Q, T1, T2, W, N)\t\t\t\t\t\\\n+  VECT_VAR(vdup_n_vector, T1, W, N) =\t\t\t\t\t\\\n+    vdup##Q##_n_##T2##W(VECT_VAR(buffer_dup, T1, W, N)[i]);\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vdup_n_vector, T1, W, N))\n+\n+  DECL_VARIABLE(vdup_n_vector, poly, 64, 1);\n+  DECL_VARIABLE(vdup_n_vector, poly, 64, 2);\n+\n+  /* Try to read different places from the input buffer.  */\n+  for (i=0; i< 3; i++) {\n+    CLEAN(result, poly, 64, 1);\n+    CLEAN(result, poly, 64, 2);\n+\n+    TEST_VDUP(, poly, p, 64, 1);\n+    TEST_VDUP(q, poly, p, 64, 2);\n+\n+    switch (i) {\n+    case 0:\n+      CHECK(TEST_MSG, poly, 64, 1, PRIx64, vdup_n_expected0, \"\");\n+      CHECK(TEST_MSG, poly, 64, 2, PRIx64, vdup_n_expected0, \"\");\n+      break;\n+    case 1:\n+      CHECK(TEST_MSG, poly, 64, 1, PRIx64, vdup_n_expected1, \"\");\n+      CHECK(TEST_MSG, poly, 64, 2, PRIx64, vdup_n_expected1, \"\");\n+      break;\n+    case 2:\n+      CHECK(TEST_MSG, poly, 64, 1, PRIx64, vdup_n_expected2, \"\");\n+      CHECK(TEST_MSG, poly, 64, 2, PRIx64, vdup_n_expected2, \"\");\n+      break;\n+    default:\n+      abort();\n+    }\n+  }\n+\n+  /* vexit_p64 tests.  */\n+#undef TEST_MSG\n+#define TEST_MSG \"VEXT/VEXTQ\"\n+\n+#define TEST_VEXT(Q, T1, T2, W, N, V)\t\t\t\t\t\\\n+  VECT_VAR(vext_vector_res, T1, W, N) =\t\t\t\t\t\\\n+    vext##Q##_##T2##W(VECT_VAR(vext_vector1, T1, W, N),\t\t\t\\\n+\t\t      VECT_VAR(vext_vector2, T1, W, N),\t\t\t\\\n+\t\t      V);\t\t\t\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vext_vector_res, T1, W, N))\n+\n+  DECL_VARIABLE(vext_vector1, poly, 64, 1);\n+  DECL_VARIABLE(vext_vector1, poly, 64, 2);\n+  DECL_VARIABLE(vext_vector2, poly, 64, 1);\n+  DECL_VARIABLE(vext_vector2, poly, 64, 2);\n+  DECL_VARIABLE(vext_vector_res, poly, 64, 1);\n+  DECL_VARIABLE(vext_vector_res, poly, 64, 2);\n+\n+  CLEAN(result, poly, 64, 1);\n+  CLEAN(result, poly, 64, 2);\n+\n+  VLOAD(vext_vector1, buffer, , poly, p, 64, 1);\n+  VLOAD(vext_vector1, buffer, q, poly, p, 64, 2);\n+\n+  VDUP(vext_vector2, , poly, p, 64, 1, 0x88);\n+  VDUP(vext_vector2, q, poly, p, 64, 2, 0x88);\n+\n+  TEST_VEXT(, poly, p, 64, 1, 0);\n+  TEST_VEXT(q, poly, p, 64, 2, 1);\n+\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vext_expected, \"\");\n+  CHECK(TEST_MSG, poly, 64, 2, PRIx64, vext_expected, \"\");\n+\n+  /* vget_low_p64 tests.  */\n+#undef TEST_MSG\n+#define TEST_MSG \"VGET_LOW\"\n+\n+#define TEST_VGET_LOW(T1, T2, W, N, N2)\t\t\t\t\t\\\n+  VECT_VAR(vget_low_vector64, T1, W, N) =\t\t\t\t\\\n+    vget_low_##T2##W(VECT_VAR(vget_low_vector128, T1, W, N2));\t\t\\\n+  vst1_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vget_low_vector64, T1, W, N))\n+\n+  DECL_VARIABLE(vget_low_vector64, poly, 64, 1);\n+  DECL_VARIABLE(vget_low_vector128, poly, 64, 2);\n+\n+  CLEAN(result, poly, 64, 1);\n+\n+  VLOAD(vget_low_vector128, buffer, q, poly, p, 64, 2);\n+\n+  TEST_VGET_LOW(poly, p, 64, 1, 2);\n+\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vget_low_expected, \"\");\n+\n+  /* vld1_p64 tests.  */\n+#undef TEST_MSG\n+#define TEST_MSG \"VLD1/VLD1Q\"\n+\n+#define TEST_VLD1(VAR, BUF, Q, T1, T2, W, N)\t\t\t\t\\\n+  VECT_VAR(VAR, T1, W, N) = vld1##Q##_##T2##W(VECT_VAR(BUF, T1, W, N)); \\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(VAR, T1, W, N))\n+\n+  DECL_VARIABLE(vld1_vector, poly, 64, 1);\n+  DECL_VARIABLE(vld1_vector, poly, 64, 2);\n+\n+  CLEAN(result, poly, 64, 1);\n+  CLEAN(result, poly, 64, 2);\n+\n+  VLOAD(vld1_vector, buffer, , poly, p, 64, 1);\n+  VLOAD(vld1_vector, buffer, q, poly, p, 64, 2);\n+\n+  TEST_VLD1(vld1_vector, buffer, , poly, p, 64, 1);\n+  TEST_VLD1(vld1_vector, buffer, q, poly, p, 64, 2);\n+\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld1_expected, \"\");\n+  CHECK(TEST_MSG, poly, 64, 2, PRIx64, vld1_expected, \"\");\n+\n+  /* vld1_dup_p64 tests.  */\n+#undef TEST_MSG\n+#define TEST_MSG \"VLD1_DUP/VLD1_DUPQ\"\n+\n+#define TEST_VLD1_DUP(VAR, BUF, Q, T1, T2, W, N)\t\t\t\\\n+  VECT_VAR(VAR, T1, W, N) =\t\t\t\t\t\t\\\n+    vld1##Q##_dup_##T2##W(&VECT_VAR(BUF, T1, W, N)[i]);\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(VAR, T1, W, N))\n+\n+  DECL_VARIABLE(vld1_dup_vector, poly, 64, 1);\n+  DECL_VARIABLE(vld1_dup_vector, poly, 64, 2);\n+\n+  /* Try to read different places from the input buffer.  */\n+  for (i=0; i<3; i++) {\n+    CLEAN(result, poly, 64, 1);\n+    CLEAN(result, poly, 64, 2);\n+\n+    TEST_VLD1_DUP(vld1_dup_vector, buffer_dup, , poly, p, 64, 1);\n+    TEST_VLD1_DUP(vld1_dup_vector, buffer_dup, q, poly, p, 64, 2);\n+\n+    switch (i) {\n+    case 0:\n+      CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld1_dup_expected0, \"\");\n+      CHECK(TEST_MSG, poly, 64, 2, PRIx64, vld1_dup_expected0, \"\");\n+      break;\n+    case 1:\n+      CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld1_dup_expected1, \"\");\n+      CHECK(TEST_MSG, poly, 64, 2, PRIx64, vld1_dup_expected1, \"\");\n+      break;\n+    case 2:\n+      CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld1_dup_expected2, \"\");\n+      CHECK(TEST_MSG, poly, 64, 2, PRIx64, vld1_dup_expected2, \"\");\n+      break;\n+    default:\n+      abort();\n+    }\n+  }\n+\n+  /* vld1_lane_p64 tests.  */\n+#undef TEST_MSG\n+#define TEST_MSG \"VLD1_LANE/VLD1_LANEQ\"\n+\n+#define TEST_VLD1_LANE(Q, T1, T2, W, N, L)\t\t\t\t\\\n+  memset (VECT_VAR(vld1_lane_buffer_src, T1, W, N), 0xAA, W/8*N);\t\\\n+  VECT_VAR(vld1_lane_vector_src, T1, W, N) =\t\t\t\t\\\n+    vld1##Q##_##T2##W(VECT_VAR(vld1_lane_buffer_src, T1, W, N));\t\\\n+  VECT_VAR(vld1_lane_vector, T1, W, N) =\t\t\t\t\\\n+    vld1##Q##_lane_##T2##W(VECT_VAR(buffer, T1, W, N),\t\t\t\\\n+\t\t\t   VECT_VAR(vld1_lane_vector_src, T1, W, N), L); \\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vld1_lane_vector, T1, W, N))\n+\n+  DECL_VARIABLE(vld1_lane_vector, poly, 64, 1);\n+  DECL_VARIABLE(vld1_lane_vector, poly, 64, 2);\n+  DECL_VARIABLE(vld1_lane_vector_src, poly, 64, 1);\n+  DECL_VARIABLE(vld1_lane_vector_src, poly, 64, 2);\n+\n+  ARRAY(vld1_lane_buffer_src, poly, 64, 1);\n+  ARRAY(vld1_lane_buffer_src, poly, 64, 2);\n+\n+  CLEAN(result, poly, 64, 1);\n+  CLEAN(result, poly, 64, 2);\n+\n+  TEST_VLD1_LANE(, poly, p, 64, 1, 0);\n+  TEST_VLD1_LANE(q, poly, p, 64, 2, 0);\n+\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld1_lane_expected, \"\");\n+  CHECK(TEST_MSG, poly, 64, 2, PRIx64, vld1_lane_expected, \"\");\n+\n+  /* vldX_p64 tests.  */\n+#define DECL_VLDX(T1, W, N, X)\t\t\t\t\t\t\\\n+  VECT_ARRAY_TYPE(T1, W, N, X) VECT_ARRAY_VAR(vldX_vector, T1, W, N, X); \\\n+  VECT_VAR_DECL(vldX_result_bis_##X, T1, W, N)[X * N]\n+\n+#define TEST_VLDX(Q, T1, T2, W, N, X)\t\t\t\t\t\\\n+  VECT_ARRAY_VAR(vldX_vector, T1, W, N, X) =\t\t\t\t\\\n+    /* Use dedicated init buffer, of size X */\t\t\t\t\\\n+    vld##X##Q##_##T2##W(VECT_ARRAY_VAR(buffer_vld##X, T1, W, N, X));\t\\\n+  vst##X##Q##_##T2##W(VECT_VAR(vldX_result_bis_##X, T1, W, N),\t\t\\\n+\t\t      VECT_ARRAY_VAR(vldX_vector, T1, W, N, X));\t\\\n+  memcpy(VECT_VAR(result, T1, W, N), VECT_VAR(vldX_result_bis_##X, T1, W, N), \\\n+\t sizeof(VECT_VAR(result, T1, W, N)));\n+\n+  /* Overwrite \"result\" with the contents of \"result_bis\"[Y].  */\n+#define TEST_EXTRA_CHUNK(T1, W, N, X,Y)\t\t\t\t\\\n+  memcpy(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n+\t &(VECT_VAR(vldX_result_bis_##X, T1, W, N)[Y*N]),\t\\\n+\t sizeof(VECT_VAR(result, T1, W, N)));\n+\n+  DECL_VLDX(poly, 64, 1, 2);\n+  DECL_VLDX(poly, 64, 1, 3);\n+  DECL_VLDX(poly, 64, 1, 4);\n+\n+  VECT_ARRAY_INIT2(buffer_vld2, poly, 64, 1);\n+  PAD(buffer_vld2_pad, poly, 64, 1);\n+  VECT_ARRAY_INIT3(buffer_vld3, poly, 64, 1);\n+  PAD(buffer_vld3_pad, poly, 64, 1);\n+  VECT_ARRAY_INIT4(buffer_vld4, poly, 64, 1);\n+  PAD(buffer_vld4_pad, poly, 64, 1);\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VLD2/VLD2Q\"\n+  CLEAN(result, poly, 64, 1);\n+  TEST_VLDX(, poly, p, 64, 1, 2);\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld2_expected_0, \"chunk 0\");\n+  CLEAN(result, poly, 64, 1);\n+  TEST_EXTRA_CHUNK(poly, 64, 1, 2, 1);\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld2_expected_1, \"chunk 1\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VLD3/VLD3Q\"\n+  CLEAN(result, poly, 64, 1);\n+  TEST_VLDX(, poly, p, 64, 1, 3);\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld3_expected_0, \"chunk 0\");\n+  CLEAN(result, poly, 64, 1);\n+  TEST_EXTRA_CHUNK(poly, 64, 1, 3, 1);\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld3_expected_1, \"chunk 1\");\n+  CLEAN(result, poly, 64, 1);\n+  TEST_EXTRA_CHUNK(poly, 64, 1, 3, 2);\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld3_expected_2, \"chunk 2\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VLD4/VLD4Q\"\n+  CLEAN(result, poly, 64, 1);\n+  TEST_VLDX(, poly, p, 64, 1, 4);\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld4_expected_0, \"chunk 0\");\n+  CLEAN(result, poly, 64, 1);\n+  TEST_EXTRA_CHUNK(poly, 64, 1, 4, 1);\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld4_expected_1, \"chunk 1\");\n+  CLEAN(result, poly, 64, 1);\n+  TEST_EXTRA_CHUNK(poly, 64, 1, 4, 2);\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld4_expected_2, \"chunk 2\");\n+  CLEAN(result, poly, 64, 1);\n+  TEST_EXTRA_CHUNK(poly, 64, 1, 4, 3);\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld4_expected_3, \"chunk 3\");\n+\n+  /* vldX_dup_p64 tests.  */\n+#define DECL_VLDX_DUP(T1, W, N, X)\t\t\t\t\t\\\n+  VECT_ARRAY_TYPE(T1, W, N, X) VECT_ARRAY_VAR(vldX_dup_vector, T1, W, N, X); \\\n+  VECT_VAR_DECL(vldX_dup_result_bis_##X, T1, W, N)[X * N]\n+\n+#define TEST_VLDX_DUP(Q, T1, T2, W, N, X)\t\t\t\t\\\n+  VECT_ARRAY_VAR(vldX_dup_vector, T1, W, N, X) =\t\t\t\\\n+    vld##X##Q##_dup_##T2##W(&VECT_VAR(buffer_dup, T1, W, N)[0]);\t\\\n+    \t\t\t\t\t\t\t\t\t\\\n+  vst##X##Q##_##T2##W(VECT_VAR(vldX_dup_result_bis_##X, T1, W, N),\t\\\n+\t\t      VECT_ARRAY_VAR(vldX_dup_vector, T1, W, N, X));\t\\\n+  memcpy(VECT_VAR(result, T1, W, N), VECT_VAR(vldX_dup_result_bis_##X, T1, W, N), \\\n+\t sizeof(VECT_VAR(result, T1, W, N)));\n+\n+  /* Overwrite \"result\" with the contents of \"result_bis\"[Y].  */\n+#define TEST_VLDX_DUP_EXTRA_CHUNK(T1, W, N, X,Y)\t\t\\\n+  memcpy(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n+\t &(VECT_VAR(vldX_dup_result_bis_##X, T1, W, N)[Y*N]),\t\\\n+\t sizeof(VECT_VAR(result, T1, W, N)));\n+\n+  DECL_VLDX_DUP(poly, 64, 1, 2);\n+  DECL_VLDX_DUP(poly, 64, 1, 3);\n+  DECL_VLDX_DUP(poly, 64, 1, 4);\n+\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VLD2_DUP/VLD2Q_DUP\"\n+  CLEAN(result, poly, 64, 1);\n+  TEST_VLDX_DUP(, poly, p, 64, 1, 2);\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld2_dup_expected_0, \"chunk 0\");\n+  CLEAN(result, poly, 64, 1);\n+  TEST_VLDX_DUP_EXTRA_CHUNK(poly, 64, 1, 2, 1);\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld2_dup_expected_1, \"chunk 1\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VLD3_DUP/VLD3Q_DUP\"\n+  CLEAN(result, poly, 64, 1);\n+  TEST_VLDX_DUP(, poly, p, 64, 1, 3);\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld3_dup_expected_0, \"chunk 0\");\n+  CLEAN(result, poly, 64, 1);\n+  TEST_VLDX_DUP_EXTRA_CHUNK(poly, 64, 1, 3, 1);\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld3_dup_expected_1, \"chunk 1\");\n+  CLEAN(result, poly, 64, 1);\n+  TEST_VLDX_DUP_EXTRA_CHUNK(poly, 64, 1, 3, 2);\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld3_dup_expected_2, \"chunk 2\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VLD4_DUP/VLD4Q_DUP\"\n+  CLEAN(result, poly, 64, 1);\n+  TEST_VLDX_DUP(, poly, p, 64, 1, 4);\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld4_dup_expected_0, \"chunk 0\");\n+  CLEAN(result, poly, 64, 1);\n+  TEST_VLDX_DUP_EXTRA_CHUNK(poly, 64, 1, 4, 1);\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld4_dup_expected_1, \"chunk 1\");\n+  CLEAN(result, poly, 64, 1);\n+  TEST_VLDX_DUP_EXTRA_CHUNK(poly, 64, 1, 4, 2);\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld4_dup_expected_2, \"chunk 2\");\n+  CLEAN(result, poly, 64, 1);\n+  TEST_VLDX_DUP_EXTRA_CHUNK(poly, 64, 1, 4, 3);\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vld4_dup_expected_3, \"chunk 3\");\n+\n+  /* vsli_p64 tests.  */\n+#undef TEST_MSG\n+#define TEST_MSG \"VSLI\"\n+\n+#define TEST_VSXI1(INSN, Q, T1, T2, W, N, V)\t\t\t\t\\\n+  VECT_VAR(vsXi_vector_res, T1, W, N) =\t\t\t\t\t\\\n+    INSN##Q##_n_##T2##W(VECT_VAR(vsXi_vector, T1, W, N),\t\t\\\n+\t\t      VECT_VAR(vsXi_vector2, T1, W, N),\t\t\t\\\n+\t\t      V);\t\t\t\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vsXi_vector_res, T1, W, N))\n+\n+#define TEST_VSXI(INSN, Q, T1, T2, W, N, V)\t\\\n+  TEST_VSXI1(INSN, Q, T1, T2, W, N, V)\n+\n+  DECL_VARIABLE(vsXi_vector, poly, 64, 1);\n+  DECL_VARIABLE(vsXi_vector, poly, 64, 2);\n+  DECL_VARIABLE(vsXi_vector2, poly, 64, 1);\n+  DECL_VARIABLE(vsXi_vector2, poly, 64, 2);\n+  DECL_VARIABLE(vsXi_vector_res, poly, 64, 1);\n+  DECL_VARIABLE(vsXi_vector_res, poly, 64, 2);\n+\n+  CLEAN(result, poly, 64, 1);\n+  CLEAN(result, poly, 64, 2);\n+\n+  VLOAD(vsXi_vector, buffer, , poly, p, 64, 1);\n+  VLOAD(vsXi_vector, buffer, q, poly, p, 64, 2);\n+\n+  VDUP(vsXi_vector2, , poly, p, 64, 1, 2);\n+  VDUP(vsXi_vector2, q, poly, p, 64, 2, 3);\n+\n+  TEST_VSXI(vsli, , poly, p, 64, 1, 3);\n+  TEST_VSXI(vsli, q, poly, p, 64, 2, 53);\n+\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vsli_expected, \"\");\n+  CHECK(TEST_MSG, poly, 64, 2, PRIx64, vsli_expected, \"\");\n+\n+  /* Test cases with maximum shift amount.  */\n+  CLEAN(result, poly, 64, 1);\n+  CLEAN(result, poly, 64, 2);\n+\n+  TEST_VSXI(vsli, , poly, p, 64, 1, 63);\n+  TEST_VSXI(vsli, q, poly, p, 64, 2, 63);\n+\n+#define COMMENT \"(max shift amount)\"\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vsli_expected_max_shift, COMMENT);\n+  CHECK(TEST_MSG, poly, 64, 2, PRIx64, vsli_expected_max_shift, COMMENT);\n+\n+  /* vsri_p64 tests.  */\n+#undef TEST_MSG\n+#define TEST_MSG \"VSRI\"\n+\n+  CLEAN(result, poly, 64, 1);\n+  CLEAN(result, poly, 64, 2);\n+\n+  VLOAD(vsXi_vector, buffer, , poly, p, 64, 1);\n+  VLOAD(vsXi_vector, buffer, q, poly, p, 64, 2);\n+\n+  VDUP(vsXi_vector2, , poly, p, 64, 1, 2);\n+  VDUP(vsXi_vector2, q, poly, p, 64, 2, 3);\n+\n+  TEST_VSXI(vsri, , poly, p, 64, 1, 3);\n+  TEST_VSXI(vsri, q, poly, p, 64, 2, 53);\n+\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vsri_expected, \"\");\n+  CHECK(TEST_MSG, poly, 64, 2, PRIx64, vsri_expected, \"\");\n+\n+  /* Test cases with maximum shift amount.  */\n+  CLEAN(result, poly, 64, 1);\n+  CLEAN(result, poly, 64, 2);\n+\n+  TEST_VSXI(vsri, , poly, p, 64, 1, 64);\n+  TEST_VSXI(vsri, q, poly, p, 64, 2, 64);\n+\n+#define COMMENT \"(max shift amount)\"\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vsri_expected_max_shift, COMMENT);\n+  CHECK(TEST_MSG, poly, 64, 2, PRIx64, vsri_expected_max_shift, COMMENT);\n+\n+  /* vst1_lane_p64 tests.  */\n+#undef TEST_MSG\n+#define TEST_MSG \"VST1_LANE/VST1_LANEQ\"\n+\n+#define TEST_VST1_LANE(Q, T1, T2, W, N, L)\t\t\t\t\\\n+  VECT_VAR(vst1_lane_vector, T1, W, N) =\t\t\t\t\\\n+    vld1##Q##_##T2##W(VECT_VAR(buffer, T1, W, N));\t\t\t\\\n+  vst1##Q##_lane_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\\\n+\t\t\t VECT_VAR(vst1_lane_vector, T1, W, N), L)\n+\n+  DECL_VARIABLE(vst1_lane_vector, poly, 64, 1);\n+  DECL_VARIABLE(vst1_lane_vector, poly, 64, 2);\n+\n+  CLEAN(result, poly, 64, 1);\n+  CLEAN(result, poly, 64, 2);\n+\n+  TEST_VST1_LANE(, poly, p, 64, 1, 0);\n+  TEST_VST1_LANE(q, poly, p, 64, 2, 0);\n+\n+  CHECK(TEST_MSG, poly, 64, 1, PRIx64, vst1_lane_expected, \"\");\n+  CHECK(TEST_MSG, poly, 64, 2, PRIx64, vst1_lane_expected, \"\");\n+\n+  return 0;\n+}"}, {"sha": "a049cb386693e281f2e298d96460df1b4bc724e1", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vreinterpret_p128.c", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dcfe9ab48b775629e5a8f5894a017e2bacc1c58/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvreinterpret_p128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dcfe9ab48b775629e5a8f5894a017e2bacc1c58/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvreinterpret_p128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvreinterpret_p128.c?ref=0dcfe9ab48b775629e5a8f5894a017e2bacc1c58", "patch": "@@ -0,0 +1,151 @@\n+/* This file contains tests for the vreinterpret *p128 intrinsics.  */\n+\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results: vreinterpretq_p128_*.  */\n+VECT_VAR_DECL(vreint_expected_q_p128_s8,poly,64,2) [] = { 0xf7f6f5f4f3f2f1f0,\n+\t\t\t\t\t\t\t  0xfffefdfcfbfaf9f8 };\n+VECT_VAR_DECL(vreint_expected_q_p128_s16,poly,64,2) [] = { 0xfff3fff2fff1fff0,\n+\t\t\t\t\t\t\t   0xfff7fff6fff5fff4 };\n+VECT_VAR_DECL(vreint_expected_q_p128_s32,poly,64,2) [] = { 0xfffffff1fffffff0,\n+\t\t\t\t\t\t\t   0xfffffff3fffffff2 };\n+VECT_VAR_DECL(vreint_expected_q_p128_s64,poly,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t\t\t   0xfffffffffffffff1 };\n+VECT_VAR_DECL(vreint_expected_q_p128_u8,poly,64,2) [] = { 0xf7f6f5f4f3f2f1f0,\n+\t\t\t\t\t\t\t  0xfffefdfcfbfaf9f8 };\n+VECT_VAR_DECL(vreint_expected_q_p128_u16,poly,64,2) [] = { 0xfff3fff2fff1fff0,\n+\t\t\t\t\t\t\t   0xfff7fff6fff5fff4 };\n+VECT_VAR_DECL(vreint_expected_q_p128_u32,poly,64,2) [] = { 0xfffffff1fffffff0,\n+\t\t\t\t\t\t\t   0xfffffff3fffffff2 };\n+VECT_VAR_DECL(vreint_expected_q_p128_u64,poly,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t\t\t   0xfffffffffffffff1 };\n+VECT_VAR_DECL(vreint_expected_q_p128_p8,poly,64,2) [] = { 0xf7f6f5f4f3f2f1f0,\n+\t\t\t\t\t\t\t  0xfffefdfcfbfaf9f8 };\n+VECT_VAR_DECL(vreint_expected_q_p128_p16,poly,64,2) [] = { 0xfff3fff2fff1fff0,\n+\t\t\t\t\t\t\t   0xfff7fff6fff5fff4 };\n+VECT_VAR_DECL(vreint_expected_q_p128_f32,poly,64,2) [] = { 0xc1700000c1800000,\n+\t\t\t\t\t\t\t   0xc1500000c1600000 };\n+\n+/* Expected results: vreinterpretq_*_p128.  */\n+VECT_VAR_DECL(vreint_expected_q_s8_p128,int,8,16) [] = { 0xf0, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t\t 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t\t 0xf1, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t\t 0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(vreint_expected_q_s16_p128,int,16,8) [] = { 0xfff0, 0xffff,\n+\t\t\t\t\t\t\t  0xffff, 0xffff,\n+\t\t\t\t\t\t\t  0xfff1, 0xffff,\n+\t\t\t\t\t\t\t  0xffff, 0xffff };\n+VECT_VAR_DECL(vreint_expected_q_s32_p128,int,32,4) [] = { 0xfffffff0, 0xffffffff,\n+\t\t\t\t\t\t\t  0xfffffff1, 0xffffffff };\n+VECT_VAR_DECL(vreint_expected_q_s64_p128,int,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t\t\t  0xfffffffffffffff1 };\n+VECT_VAR_DECL(vreint_expected_q_u8_p128,uint,8,16) [] = { 0xf0, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t\t  0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t\t  0xf1, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t\t  0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(vreint_expected_q_u16_p128,uint,16,8) [] = { 0xfff0, 0xffff,\n+\t\t\t\t\t\t\t   0xffff, 0xffff,\n+\t\t\t\t\t\t\t   0xfff1, 0xffff,\n+\t\t\t\t\t\t\t   0xffff, 0xffff };\n+VECT_VAR_DECL(vreint_expected_q_u32_p128,uint,32,4) [] = { 0xfffffff0, 0xffffffff,\n+\t\t\t\t\t\t\t   0xfffffff1, 0xffffffff };\n+VECT_VAR_DECL(vreint_expected_q_u64_p128,uint,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t\t\t   0xfffffffffffffff1 };\n+VECT_VAR_DECL(vreint_expected_q_p8_p128,poly,8,16) [] = { 0xf0, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t\t  0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t\t  0xf1, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t\t  0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(vreint_expected_q_p16_p128,poly,16,8) [] = { 0xfff0, 0xffff,\n+\t\t\t\t\t\t\t   0xffff, 0xffff,\n+\t\t\t\t\t\t\t   0xfff1, 0xffff,\n+\t\t\t\t\t\t\t   0xffff, 0xffff };\n+VECT_VAR_DECL(vreint_expected_q_p64_p128,uint,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t\t\t   0xfffffffffffffff1 };\n+VECT_VAR_DECL(vreint_expected_q_f32_p128,hfloat,32,4) [] = { 0xfffffff0, 0xffffffff,\n+\t\t\t\t\t\t\t     0xfffffff1, 0xffffffff };\n+\n+int main (void)\n+{\n+  DECL_VARIABLE_128BITS_VARIANTS(vreint_vector);\n+  DECL_VARIABLE(vreint_vector, poly, 64, 2);\n+  DECL_VARIABLE_128BITS_VARIANTS(vreint_vector_res);\n+  DECL_VARIABLE(vreint_vector_res, poly, 64, 2);\n+\n+  clean_results ();\n+\n+  TEST_MACRO_128BITS_VARIANTS_2_5(VLOAD, vreint_vector, buffer);\n+  VLOAD(vreint_vector, buffer, q, poly, p, 64, 2);\n+  VLOAD(vreint_vector, buffer, q, float, f, 32, 4);\n+\n+  /* vreinterpretq_p128_* tests.  */\n+#undef TEST_MSG\n+#define TEST_MSG \"VREINTERPRETQ_P128_*\"\n+\n+  /* Since there is no way to store a poly128_t value, convert to\n+     poly64x2_t before storing. This means that we are not able to\n+     test vreinterpretq_p128* alone, and that errors in\n+     vreinterpretq_p64_p128 could compensate for errors in\n+     vreinterpretq_p128*.  */\n+#define TEST_VREINTERPRET128(Q, T1, T2, W, N, TS1, TS2, WS, NS, EXPECTED) \\\n+  VECT_VAR(vreint_vector_res, poly, 64, 2) =  vreinterpretq_p64_p128(\t\\\n+    vreinterpret##Q##_##T2##W##_##TS2##WS(VECT_VAR(vreint_vector, TS1, WS, NS))); \\\n+  vst1##Q##_##T2##64(VECT_VAR(result, poly, 64, 2),\t\t\t\\\n+                     VECT_VAR(vreint_vector_res, poly, 64, 2));\t\t\\\n+  CHECK(TEST_MSG, T1, 64, 2, PRIx##64, EXPECTED, \"\");\n+\n+  TEST_VREINTERPRET128(q, poly, p, 128, 1, int, s, 8, 16, vreint_expected_q_p128_s8);\n+  TEST_VREINTERPRET128(q, poly, p, 128, 1, int, s, 16, 8, vreint_expected_q_p128_s16);\n+  TEST_VREINTERPRET128(q, poly, p, 128, 1, int, s, 32, 4, vreint_expected_q_p128_s32);\n+  TEST_VREINTERPRET128(q, poly, p, 128, 1, int, s, 64, 2, vreint_expected_q_p128_s64);\n+  TEST_VREINTERPRET128(q, poly, p, 128, 1, uint, u, 8, 16, vreint_expected_q_p128_u8);\n+  TEST_VREINTERPRET128(q, poly, p, 128, 1, uint, u, 16, 8, vreint_expected_q_p128_u16);\n+  TEST_VREINTERPRET128(q, poly, p, 128, 1, uint, u, 32, 4, vreint_expected_q_p128_u32);\n+  TEST_VREINTERPRET128(q, poly, p, 128, 1, uint, u, 64, 2, vreint_expected_q_p128_u64);\n+  TEST_VREINTERPRET128(q, poly, p, 128, 1, poly, p, 8, 16, vreint_expected_q_p128_p8);\n+  TEST_VREINTERPRET128(q, poly, p, 128, 1, poly, p, 16, 8, vreint_expected_q_p128_p16);\n+  TEST_VREINTERPRET128(q, poly, p, 128, 1, float, f, 32, 4, vreint_expected_q_p128_f32);\n+\n+  /* vreinterpretq_*_p128 tests.  */\n+#undef TEST_MSG\n+#define TEST_MSG \"VREINTERPRETQ_*_P128\"\n+\n+  /* Since there is no way to load a poly128_t value, load a\n+     poly64x2_t and convert it to poly128_t. This means that we are\n+     not able to test vreinterpretq_*_p128 alone, and that errors in\n+     vreinterpretq_p128_p64 could compensate for errors in\n+     vreinterpretq_*_p128*.  */\n+#define TEST_VREINTERPRET_FROM_P128(Q, T1, T2, W, N, TS1, TS2, WS, NS, EXPECTED) \\\n+  VECT_VAR(vreint_vector_res, T1, W, N) =\t\t\t\t\\\n+    vreinterpret##Q##_##T2##W##_##TS2##WS(\t\t\t\t\\\n+  vreinterpretq_p128_p64(VECT_VAR(vreint_vector, TS1, 64, 2)));\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n+\t\t    VECT_VAR(vreint_vector_res, T1, W, N));\t\t\\\n+  CHECK(TEST_MSG, T1, W, N, PRIx##W, EXPECTED, \"\");\n+\n+#define TEST_VREINTERPRET_FP_FROM_P128(Q, T1, T2, W, N, TS1, TS2, WS, NS, EXPECTED) \\\n+  VECT_VAR(vreint_vector_res, T1, W, N) =\t\t\t\t\\\n+    vreinterpret##Q##_##T2##W##_##TS2##WS(\t\t\t\t\\\n+  vreinterpretq_p128_p64(VECT_VAR(vreint_vector, TS1, 64, 2)));\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n+\t\t    VECT_VAR(vreint_vector_res, T1, W, N));\t\t\\\n+  CHECK_FP(TEST_MSG, T1, W, N, PRIx##W, EXPECTED, \"\");\n+\n+  TEST_VREINTERPRET_FROM_P128(q, int, s, 8, 16, poly, p, 128, 1, vreint_expected_q_s8_p128);\n+  TEST_VREINTERPRET_FROM_P128(q, int, s, 16, 8, poly, p, 128, 1, vreint_expected_q_s16_p128);\n+  TEST_VREINTERPRET_FROM_P128(q, int, s, 32, 4, poly, p, 128, 1, vreint_expected_q_s32_p128);\n+  TEST_VREINTERPRET_FROM_P128(q, int, s, 64, 2, poly, p, 128, 1, vreint_expected_q_s64_p128);\n+  TEST_VREINTERPRET_FROM_P128(q, uint, u, 8, 16, poly, p, 128, 1, vreint_expected_q_u8_p128);\n+  TEST_VREINTERPRET_FROM_P128(q, uint, u, 16, 8, poly, p, 128, 1, vreint_expected_q_u16_p128);\n+  TEST_VREINTERPRET_FROM_P128(q, uint, u, 32, 4, poly, p, 128, 1, vreint_expected_q_u32_p128);\n+  TEST_VREINTERPRET_FROM_P128(q, uint, u, 64, 2, poly, p, 128, 1, vreint_expected_q_u64_p128);\n+  TEST_VREINTERPRET_FROM_P128(q, poly, p, 8, 16, poly, p, 128, 1, vreint_expected_q_p8_p128);\n+  TEST_VREINTERPRET_FROM_P128(q, poly, p, 16, 8, poly, p, 128, 1, vreint_expected_q_p16_p128);\n+  TEST_VREINTERPRET_FP_FROM_P128(q, float, f, 32, 4, poly, p, 128, 1, vreint_expected_q_f32_p128);\n+\n+  return 0;\n+}"}, {"sha": "79f3cd622b1eb22a4b2cad8552cc0ece0c16ddaa", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vreinterpret_p64.c", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dcfe9ab48b775629e5a8f5894a017e2bacc1c58/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvreinterpret_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dcfe9ab48b775629e5a8f5894a017e2bacc1c58/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvreinterpret_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvreinterpret_p64.c?ref=0dcfe9ab48b775629e5a8f5894a017e2bacc1c58", "patch": "@@ -0,0 +1,188 @@\n+/* This file contains tests for the vreinterpret *p64 intrinsics.  */\n+\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results: vreinterpret_p64_*.  */\n+VECT_VAR_DECL(vreint_expected_p64_s8,poly,64,1) [] = { 0xf7f6f5f4f3f2f1f0 };\n+VECT_VAR_DECL(vreint_expected_p64_s16,poly,64,1) [] = { 0xfff3fff2fff1fff0 };\n+VECT_VAR_DECL(vreint_expected_p64_s32,poly,64,1) [] = { 0xfffffff1fffffff0 };\n+VECT_VAR_DECL(vreint_expected_p64_s64,poly,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(vreint_expected_p64_u8,poly,64,1) [] = { 0xf7f6f5f4f3f2f1f0 };\n+VECT_VAR_DECL(vreint_expected_p64_u16,poly,64,1) [] = { 0xfff3fff2fff1fff0 };\n+VECT_VAR_DECL(vreint_expected_p64_u32,poly,64,1) [] = { 0xfffffff1fffffff0 };\n+VECT_VAR_DECL(vreint_expected_p64_u64,poly,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(vreint_expected_p64_p8,poly,64,1) [] = { 0xf7f6f5f4f3f2f1f0 };\n+VECT_VAR_DECL(vreint_expected_p64_p16,poly,64,1) [] = { 0xfff3fff2fff1fff0 };\n+VECT_VAR_DECL(vreint_expected_p64_f32,poly,64,1) [] = { 0xc1700000c1800000 };\n+\n+/* Expected results: vreinterpretq_p64_*.  */\n+VECT_VAR_DECL(vreint_expected_q_p64_s8,poly,64,2) [] = { 0xf7f6f5f4f3f2f1f0,\n+\t\t\t\t\t\t\t 0xfffefdfcfbfaf9f8 };\n+VECT_VAR_DECL(vreint_expected_q_p64_s16,poly,64,2) [] = { 0xfff3fff2fff1fff0,\n+\t\t\t\t\t\t\t  0xfff7fff6fff5fff4 };\n+VECT_VAR_DECL(vreint_expected_q_p64_s32,poly,64,2) [] = { 0xfffffff1fffffff0,\n+\t\t\t\t\t\t\t  0xfffffff3fffffff2 };\n+VECT_VAR_DECL(vreint_expected_q_p64_s64,poly,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t\t\t  0xfffffffffffffff1 };\n+VECT_VAR_DECL(vreint_expected_q_p64_u8,poly,64,2) [] = { 0xf7f6f5f4f3f2f1f0,\n+\t\t\t\t\t\t\t 0xfffefdfcfbfaf9f8 };\n+VECT_VAR_DECL(vreint_expected_q_p64_u16,poly,64,2) [] = { 0xfff3fff2fff1fff0,\n+\t\t\t\t\t\t\t  0xfff7fff6fff5fff4 };\n+VECT_VAR_DECL(vreint_expected_q_p64_u32,poly,64,2) [] = { 0xfffffff1fffffff0,\n+\t\t\t\t\t\t\t  0xfffffff3fffffff2 };\n+VECT_VAR_DECL(vreint_expected_q_p64_u64,poly,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t\t\t  0xfffffffffffffff1 };\n+VECT_VAR_DECL(vreint_expected_q_p64_p8,poly,64,2) [] = { 0xf7f6f5f4f3f2f1f0,\n+\t\t\t\t\t\t\t 0xfffefdfcfbfaf9f8 };\n+VECT_VAR_DECL(vreint_expected_q_p64_p16,poly,64,2) [] = { 0xfff3fff2fff1fff0,\n+\t\t\t\t\t\t\t  0xfff7fff6fff5fff4 };\n+VECT_VAR_DECL(vreint_expected_q_p64_f32,poly,64,2) [] = { 0xc1700000c1800000,\n+\t\t\t\t\t\t\t  0xc1500000c1600000 };\n+\n+/* Expected results: vreinterpret_*_p64.  */\n+VECT_VAR_DECL(vreint_expected_s8_p64,int,8,8) [] = { 0xf0, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t     0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(vreint_expected_s16_p64,int,16,4) [] = { 0xfff0, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(vreint_expected_s32_p64,int,32,2) [] = { 0xfffffff0, 0xffffffff };\n+VECT_VAR_DECL(vreint_expected_s64_p64,int,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(vreint_expected_u8_p64,uint,8,8) [] = { 0xf0, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t      0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(vreint_expected_u16_p64,uint,16,4) [] = { 0xfff0, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(vreint_expected_u32_p64,uint,32,2) [] = { 0xfffffff0, 0xffffffff };\n+VECT_VAR_DECL(vreint_expected_u64_p64,uint,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(vreint_expected_p8_p64,poly,8,8) [] = { 0xf0, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t      0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(vreint_expected_p16_p64,poly,16,4) [] = { 0xfff0, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(vreint_expected_f32_p64,hfloat,32,2) [] = { 0xfffffff0, 0xffffffff };\n+\n+/* Expected results: vreinterpretq_*_p64.  */\n+VECT_VAR_DECL(vreint_expected_q_s8_p64,int,8,16) [] = { 0xf0, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t\t0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t\t0xf1, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t\t0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(vreint_expected_q_s16_p64,int,16,8) [] = { 0xfff0, 0xffff,\n+\t\t\t\t\t\t\t 0xffff, 0xffff,\n+\t\t\t\t\t\t\t 0xfff1, 0xffff,\n+\t\t\t\t\t\t\t 0xffff, 0xffff };\n+VECT_VAR_DECL(vreint_expected_q_s32_p64,int,32,4) [] = { 0xfffffff0, 0xffffffff,\n+\t\t\t\t\t\t\t 0xfffffff1, 0xffffffff };\n+VECT_VAR_DECL(vreint_expected_q_s64_p64,int,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t\t\t 0xfffffffffffffff1 };\n+VECT_VAR_DECL(vreint_expected_q_u8_p64,uint,8,16) [] = { 0xf0, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t\t 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t\t 0xf1, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t\t 0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(vreint_expected_q_u16_p64,uint,16,8) [] = { 0xfff0, 0xffff,\n+\t\t\t\t\t\t\t  0xffff, 0xffff,\n+\t\t\t\t\t\t\t  0xfff1, 0xffff,\n+\t\t\t\t\t\t\t  0xffff, 0xffff };\n+VECT_VAR_DECL(vreint_expected_q_u32_p64,uint,32,4) [] = { 0xfffffff0, 0xffffffff,\n+\t\t\t\t\t\t\t  0xfffffff1, 0xffffffff };\n+VECT_VAR_DECL(vreint_expected_q_u64_p64,uint,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t\t\t  0xfffffffffffffff1 };\n+VECT_VAR_DECL(vreint_expected_q_p8_p64,poly,8,16) [] = { 0xf0, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t\t 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t\t 0xf1, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t\t 0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(vreint_expected_q_p16_p64,poly,16,8) [] = { 0xfff0, 0xffff,\n+\t\t\t\t\t\t\t  0xffff, 0xffff,\n+\t\t\t\t\t\t\t  0xfff1, 0xffff,\n+\t\t\t\t\t\t\t  0xffff, 0xffff };\n+VECT_VAR_DECL(vreint_expected_q_f32_p64,hfloat,32,4) [] = { 0xfffffff0, 0xffffffff,\n+\t\t\t\t\t\t\t    0xfffffff1, 0xffffffff };\n+\n+int main (void)\n+{\n+#define TEST_VREINTERPRET(Q, T1, T2, W, N, TS1, TS2, WS, NS, EXPECTED)\t\\\n+  VECT_VAR(vreint_vector_res, T1, W, N) =\t\t\t\t\\\n+    vreinterpret##Q##_##T2##W##_##TS2##WS(VECT_VAR(vreint_vector, TS1, WS, NS)); \\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n+\t\t    VECT_VAR(vreint_vector_res, T1, W, N));\t\t\\\n+  CHECK(TEST_MSG, T1, W, N, PRIx##W, EXPECTED, \"\");\n+\n+#define TEST_VREINTERPRET_FP(Q, T1, T2, W, N, TS1, TS2, WS, NS, EXPECTED) \\\n+  VECT_VAR(vreint_vector_res, T1, W, N) =\t\t\t\t\\\n+    vreinterpret##Q##_##T2##W##_##TS2##WS(VECT_VAR(vreint_vector, TS1, WS, NS)); \\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n+\t\t    VECT_VAR(vreint_vector_res, T1, W, N));\t\t\\\n+  CHECK_FP(TEST_MSG, T1, W, N, PRIx##W, EXPECTED, \"\");\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vreint_vector);\n+  DECL_VARIABLE(vreint_vector, poly, 64, 1);\n+  DECL_VARIABLE(vreint_vector, poly, 64, 2);\n+  DECL_VARIABLE_ALL_VARIANTS(vreint_vector_res);\n+  DECL_VARIABLE(vreint_vector_res, poly, 64, 1);\n+  DECL_VARIABLE(vreint_vector_res, poly, 64, 2);\n+\n+  clean_results ();\n+\n+  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vreint_vector, buffer);\n+  VLOAD(vreint_vector, buffer, , poly, p, 64, 1);\n+  VLOAD(vreint_vector, buffer, q, poly, p, 64, 2);\n+  VLOAD(vreint_vector, buffer, , float, f, 32, 2);\n+  VLOAD(vreint_vector, buffer, q, float, f, 32, 4);\n+\n+  /* vreinterpret_p64_* tests.  */\n+#undef TEST_MSG\n+#define TEST_MSG \"VREINTERPRET_P64_*\"\n+  TEST_VREINTERPRET(, poly, p, 64, 1, int, s, 8, 8, vreint_expected_p64_s8);\n+  TEST_VREINTERPRET(, poly, p, 64, 1, int, s, 16, 4, vreint_expected_p64_s16);\n+  TEST_VREINTERPRET(, poly, p, 64, 1, int, s, 32, 2, vreint_expected_p64_s32);\n+  TEST_VREINTERPRET(, poly, p, 64, 1, int, s, 64, 1, vreint_expected_p64_s64);\n+  TEST_VREINTERPRET(, poly, p, 64, 1, uint, u, 8, 8, vreint_expected_p64_u8);\n+  TEST_VREINTERPRET(, poly, p, 64, 1, uint, u, 16, 4, vreint_expected_p64_u16);\n+  TEST_VREINTERPRET(, poly, p, 64, 1, uint, u, 32, 2, vreint_expected_p64_u32);\n+  TEST_VREINTERPRET(, poly, p, 64, 1, uint, u, 64, 1, vreint_expected_p64_u64);\n+  TEST_VREINTERPRET(, poly, p, 64, 1, poly, p, 8, 8, vreint_expected_p64_p8);\n+  TEST_VREINTERPRET(, poly, p, 64, 1, poly, p, 16, 4, vreint_expected_p64_p16);\n+  TEST_VREINTERPRET(, poly, p, 64, 1, float, f, 32, 2, vreint_expected_p64_f32);\n+\n+  /* vreinterpretq_p64_* tests.  */\n+#undef TEST_MSG\n+#define TEST_MSG \"VREINTERPRETQ_P64_*\"\n+  TEST_VREINTERPRET(q, poly, p, 64, 2, int, s, 8, 16, vreint_expected_q_p64_s8);\n+  TEST_VREINTERPRET(q, poly, p, 64, 2, int, s, 16, 8, vreint_expected_q_p64_s16);\n+  TEST_VREINTERPRET(q, poly, p, 64, 2, int, s, 32, 4, vreint_expected_q_p64_s32);\n+  TEST_VREINTERPRET(q, poly, p, 64, 2, int, s, 64, 2, vreint_expected_q_p64_s64);\n+  TEST_VREINTERPRET(q, poly, p, 64, 2, uint, u, 8, 16, vreint_expected_q_p64_u8);\n+  TEST_VREINTERPRET(q, poly, p, 64, 2, uint, u, 16, 8, vreint_expected_q_p64_u16);\n+  TEST_VREINTERPRET(q, poly, p, 64, 2, uint, u, 32, 4, vreint_expected_q_p64_u32);\n+  TEST_VREINTERPRET(q, poly, p, 64, 2, uint, u, 64, 2, vreint_expected_q_p64_u64);\n+  TEST_VREINTERPRET(q, poly, p, 64, 2, poly, p, 8, 16, vreint_expected_q_p64_p8);\n+  TEST_VREINTERPRET(q, poly, p, 64, 2, poly, p, 16, 8, vreint_expected_q_p64_p16);\n+  TEST_VREINTERPRET(q, poly, p, 64, 2, float, f, 32, 4, vreint_expected_q_p64_f32);\n+\n+  /* vreinterpret_*_p64 tests.  */\n+#undef TEST_MSG\n+#define TEST_MSG \"VREINTERPRET_*_P64\"\n+\n+  TEST_VREINTERPRET(, int, s, 8, 8, poly, p, 64, 1, vreint_expected_s8_p64);\n+  TEST_VREINTERPRET(, int, s, 16, 4, poly, p, 64, 1, vreint_expected_s16_p64);\n+  TEST_VREINTERPRET(, int, s, 32, 2, poly, p, 64, 1, vreint_expected_s32_p64);\n+  TEST_VREINTERPRET(, int, s, 64, 1, poly, p, 64, 1, vreint_expected_s64_p64);\n+  TEST_VREINTERPRET(, uint, u, 8, 8, poly, p, 64, 1, vreint_expected_u8_p64);\n+  TEST_VREINTERPRET(, uint, u, 16, 4, poly, p, 64, 1, vreint_expected_u16_p64);\n+  TEST_VREINTERPRET(, uint, u, 32, 2, poly, p, 64, 1, vreint_expected_u32_p64);\n+  TEST_VREINTERPRET(, uint, u, 64, 1, poly, p, 64, 1, vreint_expected_u64_p64);\n+  TEST_VREINTERPRET(, poly, p, 8, 8, poly, p, 64, 1, vreint_expected_p8_p64);\n+  TEST_VREINTERPRET(, poly, p, 16, 4, poly, p, 64, 1, vreint_expected_p16_p64);\n+  TEST_VREINTERPRET_FP(, float, f, 32, 2, poly, p, 64, 1, vreint_expected_f32_p64);\n+  TEST_VREINTERPRET(q, int, s, 8, 16, poly, p, 64, 2, vreint_expected_q_s8_p64);\n+  TEST_VREINTERPRET(q, int, s, 16, 8, poly, p, 64, 2, vreint_expected_q_s16_p64);\n+  TEST_VREINTERPRET(q, int, s, 32, 4, poly, p, 64, 2, vreint_expected_q_s32_p64);\n+  TEST_VREINTERPRET(q, int, s, 64, 2, poly, p, 64, 2, vreint_expected_q_s64_p64);\n+  TEST_VREINTERPRET(q, uint, u, 8, 16, poly, p, 64, 2, vreint_expected_q_u8_p64);\n+  TEST_VREINTERPRET(q, uint, u, 16, 8, poly, p, 64, 2, vreint_expected_q_u16_p64);\n+  TEST_VREINTERPRET(q, uint, u, 32, 4, poly, p, 64, 2, vreint_expected_q_u32_p64);\n+  TEST_VREINTERPRET(q, uint, u, 64, 2, poly, p, 64, 2, vreint_expected_q_u64_p64);\n+  TEST_VREINTERPRET(q, poly, p, 8, 16, poly, p, 64, 2, vreint_expected_q_p8_p64);\n+  TEST_VREINTERPRET(q, poly, p, 16, 8, poly, p, 64, 2, vreint_expected_q_p16_p64);\n+  TEST_VREINTERPRET_FP(q, float, f, 32, 4, poly, p, 64, 2, vreint_expected_q_f32_p64);\n+\n+  return 0;\n+}"}]}