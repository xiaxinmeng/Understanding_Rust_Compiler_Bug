{"sha": "ef7e7ab2782ad3efd51e6803e71435cd155e5fa5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY3ZTdhYjI3ODJhZDNlZmQ1MWU2ODAzZTcxNDM1Y2QxNTVlNWZhNQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2013-06-14T08:37:30Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2013-06-14T08:37:30Z"}, "message": "re PR middle-end/57134 (ICE with -mstrict-align and inline assembly on ppc64)\n\n\tPR middle-end/57134\n\tPR middle-end/57586\n\t* expr.c (expand_expr_real_1 <normal_inner_ref>): Pass\n\tEXPAND_MEMORY and EXPAND_WRITE to recursive call.  Don't use\n\tbitfield expansion when EXPAND_MEMORY.\n\t(expand_expr_real_1 <VIEW_CONVERT_EXPR>): Pass modifier likewise.\n\n\t* gcc.dg/pr57134.c: New.\n\nFrom-SVN: r200086", "tree": {"sha": "1efb80e66a3e16d26c1db3039a2645a1f1b9e4a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1efb80e66a3e16d26c1db3039a2645a1f1b9e4a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef7e7ab2782ad3efd51e6803e71435cd155e5fa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef7e7ab2782ad3efd51e6803e71435cd155e5fa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef7e7ab2782ad3efd51e6803e71435cd155e5fa5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef7e7ab2782ad3efd51e6803e71435cd155e5fa5/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "48f316eafeb6fa1196298313a03783901c00782b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f316eafeb6fa1196298313a03783901c00782b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48f316eafeb6fa1196298313a03783901c00782b"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "e7d352c1edca179443543f4cc2422dfab85d14ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7e7ab2782ad3efd51e6803e71435cd155e5fa5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7e7ab2782ad3efd51e6803e71435cd155e5fa5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef7e7ab2782ad3efd51e6803e71435cd155e5fa5", "patch": "@@ -1,3 +1,12 @@\n+2013-06-14  Alan Modra  <amodra@gmail.com>\n+\n+\tPR middle-end/57134\n+\tPR middle-end/57586\n+\t* expr.c (expand_expr_real_1 <normal_inner_ref>): Pass\n+\tEXPAND_MEMORY and EXPAND_WRITE to recursive call.  Don't use\n+\tbitfield expansion when EXPAND_MEMORY.\n+\t(expand_expr_real_1 <VIEW_CONVERT_EXPR>): Pass modifier likewise.\n+\n 2013-06-13  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_option_override_internal): Move"}, {"sha": "c68f489e8de4a1715581f469f4a9416bf3043621", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7e7ab2782ad3efd51e6803e71435cd155e5fa5/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7e7ab2782ad3efd51e6803e71435cd155e5fa5/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ef7e7ab2782ad3efd51e6803e71435cd155e5fa5", "patch": "@@ -9909,11 +9909,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t\t\t  && modifier != EXPAND_STACK_PARM\n \t\t\t  ? target : NULL_RTX),\n \t\t\t VOIDmode,\n-\t\t\t (modifier == EXPAND_INITIALIZER\n-\t\t\t  || modifier == EXPAND_CONST_ADDRESS\n-\t\t\t  || modifier == EXPAND_STACK_PARM)\n-\t\t\t ? modifier : EXPAND_NORMAL);\n-\n+\t\t\t modifier == EXPAND_SUM ? EXPAND_NORMAL : modifier);\n \n \t/* If the bitfield is volatile, we want to access it in the\n \t   field's mode, not the computed mode.\n@@ -10072,6 +10068,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t\t      || (MEM_P (op0)\n \t\t\t  && (MEM_ALIGN (op0) < GET_MODE_ALIGNMENT (mode1)\n \t\t\t      || (bitpos % GET_MODE_ALIGNMENT (mode1) != 0))))\n+\t\t     && modifier != EXPAND_MEMORY\n \t\t     && ((modifier == EXPAND_CONST_ADDRESS\n \t\t\t  || modifier == EXPAND_INITIALIZER)\n \t\t\t ? STRICT_ALIGNMENT\n@@ -10271,10 +10268,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t\t\t      && modifier != EXPAND_STACK_PARM\n \t\t\t      ? target : NULL_RTX),\n \t\t\t     VOIDmode,\n-\t\t\t     (modifier == EXPAND_INITIALIZER\n-\t\t\t      || modifier == EXPAND_CONST_ADDRESS\n-\t\t\t      || modifier == EXPAND_STACK_PARM)\n-\t\t\t     ? modifier : EXPAND_NORMAL);\n+\t\t\t     modifier == EXPAND_SUM ? EXPAND_NORMAL : modifier);\n \n \t    if (MEM_P (orig_op0))\n \t      {"}, {"sha": "a209086b41b1f09c9f508fe86f11d40d5dc317a1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7e7ab2782ad3efd51e6803e71435cd155e5fa5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7e7ab2782ad3efd51e6803e71435cd155e5fa5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ef7e7ab2782ad3efd51e6803e71435cd155e5fa5", "patch": "@@ -1,3 +1,8 @@\n+2013-06-14  Alan Modra  <amodra@gmail.com>\n+\n+\tPR middle-end/57134\n+\t* gcc.dg/pr57134.c: New.\n+\n 2013-06-14  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/57596"}, {"sha": "94ff0929c90c600fe4c59c1ff87986d65754a130", "filename": "gcc/testsuite/gcc.dg/pr57134.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7e7ab2782ad3efd51e6803e71435cd155e5fa5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr57134.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7e7ab2782ad3efd51e6803e71435cd155e5fa5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr57134.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr57134.c?ref=ef7e7ab2782ad3efd51e6803e71435cd155e5fa5", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target stdint_types } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -mstrict-align\" { target { powerpc*-*-linux* powerpc*-*-elf* } } } */\n+\n+#include <stdint.h>\n+\n+typedef struct {\n+  int64_t counter;\n+} atomic64_t;\n+\n+struct buffer_page {\n+  void *a, *b;\n+  atomic64_t entries;\n+};\n+\n+static __inline__ __attribute__((always_inline)) int64_t\n+atomic64_read(const atomic64_t *v)\n+{\n+ int64_t t;\n+ __asm__ __volatile__(\"# %0, %1\" : \"=r\"(t) : \"m\"(v->counter));\n+ return t;\n+}\n+\n+int rb_remove_pages(void *p)\n+{\n+  struct buffer_page *blah = (void *)((intptr_t) p & -4);\n+  return atomic64_read(&blah->entries);\n+}"}]}