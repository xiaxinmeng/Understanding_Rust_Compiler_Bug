{"sha": "43088bb4dadd3d14b6b594c5f9363fe879f3d7f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMwODhiYjRkYWRkM2QxNGI2YjU5NGM1ZjkzNjNmZTg3OWYzZDdmNw==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-05-29T05:38:49Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-06-04T12:04:40Z"}, "message": "Fix zero-masking for vcvtps2ph when dest operand is memory.\n\nWhen dest is memory, zero-masking is not valid, only merging-masking is available,\n\n2020-06-24  Hongtao Liu  <hongtao.liu@inte.com>\n\ngcc/ChangeLog:\n\tPR target/95254\n\t* config/i386/sse.md (*vcvtps2ph_store<merge_mask_name>):\n\tRefine from *vcvtps2ph_store<mask_name>.\n\t(vcvtps2ph256<mask_name>): Refine constraint from vm to v.\n\t(<mask_codefor>avx512f_vcvtps2ph512<mask_name>): Ditto.\n\t(*vcvtps2ph256<merge_mask_name>): New define_insn.\n\t(*avx512f_vcvtps2ph512<merge_mask_name>): Ditto.\n\t* config/i386/subst.md (merge_mask): New define_subst.\n\t(merge_mask_name): New define_subst_attr.\n\t(merge_mask_operand3): Ditto.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.target/i386/avx512f-vcvtps2ph-pr95254.c: New test.\n\t* gcc.target/i386/avx512vl-vcvtps2ph-pr95254.c: Ditto.", "tree": {"sha": "79ff52c44967f5e91a11e20c3269f538aac102b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79ff52c44967f5e91a11e20c3269f538aac102b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43088bb4dadd3d14b6b594c5f9363fe879f3d7f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43088bb4dadd3d14b6b594c5f9363fe879f3d7f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43088bb4dadd3d14b6b594c5f9363fe879f3d7f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43088bb4dadd3d14b6b594c5f9363fe879f3d7f7/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53ec04cbdd192468d1975640759084f4e37fe4e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53ec04cbdd192468d1975640759084f4e37fe4e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53ec04cbdd192468d1975640759084f4e37fe4e8"}], "stats": {"total": 74, "additions": 70, "deletions": 4}, "files": [{"sha": "7815d77bcbfdbe318fefd974e881c3b6db9a6171", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43088bb4dadd3d14b6b594c5f9363fe879f3d7f7/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43088bb4dadd3d14b6b594c5f9363fe879f3d7f7/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=43088bb4dadd3d14b6b594c5f9363fe879f3d7f7", "patch": "@@ -21775,19 +21775,19 @@\n    (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n-(define_insn \"*vcvtps2ph_store<mask_name>\"\n+(define_insn \"*vcvtps2ph_store<merge_mask_name>\"\n   [(set (match_operand:V4HI 0 \"memory_operand\" \"=m\")\n \t(unspec:V4HI [(match_operand:V4SF 1 \"register_operand\" \"v\")\n \t\t      (match_operand:SI 2 \"const_0_to_255_operand\" \"N\")]\n \t\t     UNSPEC_VCVTPS2PH))]\n   \"TARGET_F16C || TARGET_AVX512VL\"\n-  \"vcvtps2ph\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n+  \"vcvtps2ph\\t{%2, %1, %0<merge_mask_operand3>|%0<merge_mask_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n (define_insn \"vcvtps2ph256<mask_name>\"\n-  [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"=vm\")\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n \t(unspec:V8HI [(match_operand:V8SF 1 \"register_operand\" \"v\")\n \t\t      (match_operand:SI 2 \"const_0_to_255_operand\" \"N\")]\n \t\t     UNSPEC_VCVTPS2PH))]\n@@ -21798,8 +21798,20 @@\n    (set_attr \"btver2_decode\" \"vector\")\n    (set_attr \"mode\" \"V8SF\")])\n \n+(define_insn \"*vcvtps2ph256<merge_mask_name>\"\n+  [(set (match_operand:V8HI 0 \"memory_operand\" \"=m\")\n+\t(unspec:V8HI [(match_operand:V8SF 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:SI 2 \"const_0_to_255_operand\" \"N\")]\n+\t\t     UNSPEC_VCVTPS2PH))]\n+  \"TARGET_F16C || TARGET_AVX512VL\"\n+  \"vcvtps2ph\\t{%2, %1, %0<merge_mask_operand3>|%0<merge_mask_operand3>, %1, %2}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n+   (set_attr \"btver2_decode\" \"vector\")\n+   (set_attr \"mode\" \"V8SF\")])\n+\n (define_insn \"<mask_codefor>avx512f_vcvtps2ph512<mask_name>\"\n-  [(set (match_operand:V16HI 0 \"nonimmediate_operand\" \"=vm\")\n+  [(set (match_operand:V16HI 0 \"register_operand\" \"=v\")\n \t(unspec:V16HI\n \t  [(match_operand:V16SF 1 \"register_operand\" \"v\")\n \t   (match_operand:SI 2 \"const_0_to_255_operand\" \"N\")]\n@@ -21810,6 +21822,18 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"V16SF\")])\n \n+(define_insn \"*avx512f_vcvtps2ph512<merge_mask_name>\"\n+  [(set (match_operand:V16HI 0 \"memory_operand\" \"=m\")\n+\t(unspec:V16HI\n+\t  [(match_operand:V16SF 1 \"register_operand\" \"v\")\n+\t   (match_operand:SI 2 \"const_0_to_255_operand\" \"N\")]\n+\t  UNSPEC_VCVTPS2PH))]\n+  \"TARGET_AVX512F\"\n+  \"vcvtps2ph\\t{%2, %1, %0<merge_mask_operand3>|%0<merge_mask_operand3>, %1, %2}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"V16SF\")])\n+\n ;; For gather* insn patterns\n (define_mode_iterator VEC_GATHER_MODE\n \t\t      [V2DI V2DF V4DI V4DF V4SI V4SF V8SI V8SF])"}, {"sha": "58ea9dc83e27c74a2f2e84670b1c3be6bd78c6bf", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43088bb4dadd3d14b6b594c5f9363fe879f3d7f7/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43088bb4dadd3d14b6b594c5f9363fe879f3d7f7/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=43088bb4dadd3d14b6b594c5f9363fe879f3d7f7", "patch": "@@ -73,6 +73,18 @@\n \t  (match_operand:SUBST_V 2 \"nonimm_or_0_operand\" \"0C\")\n \t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk\")))])\n \n+(define_subst_attr \"merge_mask_name\" \"merge_mask\" \"\" \"_merge_mask\")\n+(define_subst_attr \"merge_mask_operand3\" \"merge_mask\" \"\" \"%{%3%}\")\n+(define_subst \"merge_mask\"\n+  [(set (match_operand:SUBST_V 0)\n+        (match_operand:SUBST_V 1))]\n+  \"TARGET_AVX512F\"\n+  [(set (match_dup 0)\n+        (vec_merge:SUBST_V\n+\t  (match_dup 1)\n+\t  (match_dup 0)\n+\t  (match_operand:<avx512fmaskmode> 2 \"register_operand\" \"Yk\")))])\n+\n (define_subst_attr \"mask_scalar_merge_name\" \"mask_scalar_merge\" \"\" \"_mask\")\n (define_subst_attr \"mask_scalar_merge_operand3\" \"mask_scalar_merge\" \"\" \"%{%3%}\")\n (define_subst_attr \"mask_scalar_merge_operand4\" \"mask_scalar_merge\" \"\" \"%{%4%}\")"}, {"sha": "9e0da9473684da9dc60c0599af45c110462decc3", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtps2ph-pr95254.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43088bb4dadd3d14b6b594c5f9363fe879f3d7f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2ph-pr95254.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43088bb4dadd3d14b6b594c5f9363fe879f3d7f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2ph-pr95254.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2ph-pr95254.c?ref=43088bb4dadd3d14b6b594c5f9363fe879f3d7f7", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+\n+#include<immintrin.h>\n+extern __m256i res;\n+void\n+foo (__m512 a, __mmask16 m)\n+{\n+  res = _mm512_maskz_cvtps_ph (m, a, 10);\n+}\n+\n+/* { dg-final { scan-assembler-not \"vcvtps2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*res\\[^\\n\\]*\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"} } */"}, {"sha": "0c685ea66fdae85ab21ce2d58d4bd03301640c15", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vcvtps2ph-pr95254.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43088bb4dadd3d14b6b594c5f9363fe879f3d7f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vcvtps2ph-pr95254.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43088bb4dadd3d14b6b594c5f9363fe879f3d7f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vcvtps2ph-pr95254.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vcvtps2ph-pr95254.c?ref=43088bb4dadd3d14b6b594c5f9363fe879f3d7f7", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512f\" } */\n+\n+#include<immintrin.h>\n+extern __m128i res;\n+void\n+foo (__m256 a, __mmask8 m)\n+{\n+  res = _mm256_maskz_cvtps_ph (m, a, 10);\n+}\n+\n+void\n+foo1 (__m128 a, __mmask8 m)\n+{\n+  res = _mm_maskz_cvtps_ph (m, a, 10);\n+}\n+\n+/* { dg-final { scan-assembler-not \"vcvtps2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%\\[xy\\]mm\\[0-9\\]\\[^\\n\\]*res\\[^\\n\\]*\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"} } */"}]}