{"sha": "7224c6a997c32d3b4f7a2a22d27459ca58ee2587", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzIyNGM2YTk5N2MzMmQzYjRmN2EyYTIyZDI3NDU5Y2E1OGVlMjU4Nw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-12-15T12:45:47Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-12-15T12:45:47Z"}, "message": "Tweak formatting and docs for pretty printers\n\n\t* python/libstdcxx/v6/printers.py (UniquePointerPrinter.to_string):\n\tRemove redundant parentheses.\n\t(RbtreeIterator, StdRbtreeIteratorPrinter): Add docstrings.\n\t(StdForwardListPrinter.to_string): Remove redundant parentheses.\n\t(StdExpOptionalPrinter.to_string): Use string formatting instead of\n\tconcatenation.\n\t(StdVariantPrinter.to_string, StdNodeHandlePrinter.to_string)\n\t(TemplateTypePrinter): Adjust whitespace.\n\nFrom-SVN: r243689", "tree": {"sha": "1ab1f1e0dcd65298cbc482e761ad660b09dfa94d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ab1f1e0dcd65298cbc482e761ad660b09dfa94d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7224c6a997c32d3b4f7a2a22d27459ca58ee2587", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7224c6a997c32d3b4f7a2a22d27459ca58ee2587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7224c6a997c32d3b4f7a2a22d27459ca58ee2587", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7224c6a997c32d3b4f7a2a22d27459ca58ee2587/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0376e86bfc9cbf1fe7b15be65d4f8e183da6484a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0376e86bfc9cbf1fe7b15be65d4f8e183da6484a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0376e86bfc9cbf1fe7b15be65d4f8e183da6484a"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "14c0c6e0dc7b1a341dbe6da6433cdb6d97ac000d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7224c6a997c32d3b4f7a2a22d27459ca58ee2587/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7224c6a997c32d3b4f7a2a22d27459ca58ee2587/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7224c6a997c32d3b4f7a2a22d27459ca58ee2587", "patch": "@@ -1,5 +1,14 @@\n 2016-12-15  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* python/libstdcxx/v6/printers.py (UniquePointerPrinter.to_string):\n+\tRemove redundant parentheses.\n+\t(RbtreeIterator, StdRbtreeIteratorPrinter): Add docstrings.\n+\t(StdForwardListPrinter.to_string): Remove redundant parentheses.\n+\t(StdExpOptionalPrinter.to_string): Use string formatting instead of\n+\tconcatenation.\n+\t(StdVariantPrinter.to_string, StdNodeHandlePrinter.to_string)\n+\t(TemplateTypePrinter): Adjust whitespace.\n+\n \t* python/libstdcxx/v6/xmethods.py (UniquePtrGetWorker.__init__): Use\n \tcorrect element type for unique_ptr<T[]>.\n \t(UniquePtrGetWorker._supports, UniquePtrDerefWorker._supports): New"}, {"sha": "9d84b4f263b986755719591730e9b748225c55c6", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7224c6a997c32d3b4f7a2a22d27459ca58ee2587/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7224c6a997c32d3b4f7a2a22d27459ca58ee2587/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=7224c6a997c32d3b4f7a2a22d27459ca58ee2587", "patch": "@@ -133,8 +133,8 @@ def to_string (self):\n             v = self.val['_M_t']['_M_head_impl']\n         else:\n             raise ValueError(\"Unsupported implementation for unique_ptr: %s\" % self.val.type.fields()[0].type.tag)\n-        return ('std::unique_ptr<%s> containing %s' % (str(v.type.target()),\n-                                                       str(v)))\n+        return 'std::unique_ptr<%s> containing %s' % (str(v.type.target()),\n+                                                      str(v))\n \n def get_value_from_aligned_membuf(buf, valtype):\n     \"\"\"Returns the value held in a __gnu_cxx::__aligned_membuf.\"\"\"\n@@ -428,6 +428,11 @@ def display_hint (self):\n         return None\n \n class RbtreeIterator(Iterator):\n+    \"\"\"\n+    Turn an RB-tree-based container (std::map, std::set etc.) into\n+    a Python iterable object.\n+    \"\"\"\n+\n     def __init__(self, rbtree):\n         self.size = rbtree['_M_t']['_M_impl']['_M_node_count']\n         self.node = rbtree['_M_t']['_M_impl']['_M_header']['_M_left']\n@@ -480,7 +485,7 @@ def get_value_from_Rb_tree_node(node):\n # std::map::iterator), and has nothing to do with the RbtreeIterator\n # class above.\n class StdRbtreeIteratorPrinter:\n-    \"Print std::map::iterator\"\n+    \"Print std::map::iterator, std::set::iterator, etc.\"\n \n     def __init__ (self, typename, val):\n         self.val = val\n@@ -891,8 +896,8 @@ def children(self):\n \n     def to_string(self):\n         if self.val['_M_impl']['_M_head']['_M_next'] == 0:\n-            return 'empty %s' % (self.typename)\n-        return '%s' % (self.typename)\n+            return 'empty %s' % self.typename\n+        return '%s' % self.typename\n \n class SingleObjContainerPrinter(object):\n     \"Base class for printers of containers of single objects\"\n@@ -994,9 +999,10 @@ def __init__ (self, typename, val):\n \n     def to_string (self):\n         if self.contained_value is None:\n-            return self.typename + \" [no contained value]\"\n+            return \"%s [no contained value]\" % self.typename\n         if hasattr (self.visualizer, 'children'):\n-            return self.typename + \" containing \" + self.visualizer.to_string ()\n+            return \"%s containing %s\" % (self.typename,\n+                                         self.visualizer.to_string())\n         return self.typename\n \n class StdVariantPrinter(SingleObjContainerPrinter):\n@@ -1032,7 +1038,8 @@ def to_string(self):\n         if self.contained_value is None:\n             return \"%s [no contained value]\" % self.typename\n         if hasattr(self.visualizer, 'children'):\n-            return \"%s [index %d] containing %s\" % (self.typename, self.index, self.visualizer.to_string())\n+            return \"%s [index %d] containing %s\" % (self.typename, self.index,\n+                                                    self.visualizer.to_string())\n         return \"%s [index %d]\" % (self.typename, self.index)\n \n class StdNodeHandlePrinter(SingleObjContainerPrinter):\n@@ -1060,7 +1067,6 @@ def __init__(self, typename, val):\n                                                    'array')\n \n     def to_string(self):\n-\n         desc = 'node handle for '\n         if not self.is_rb_tree_node:\n             desc += 'unordered '\n@@ -1230,7 +1236,8 @@ def __call__(self, val):\n libstdcxx_printer = None\n \n class TemplateTypePrinter(object):\n-    r\"\"\"A type printer for class templates.\n+    r\"\"\"\n+    A type printer for class templates.\n \n     Recognizes type names that match a regular expression.\n     Replaces them with a formatted string which can use replacement field"}]}