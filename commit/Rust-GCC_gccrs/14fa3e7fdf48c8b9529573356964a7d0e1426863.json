{"sha": "14fa3e7fdf48c8b9529573356964a7d0e1426863", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRmYTNlN2ZkZjQ4YzhiOTUyOTU3MzM1Njk2NGE3ZDBlMTQyNjg2Mw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-15T17:33:43Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-15T17:33:43Z"}, "message": "re PR go/61248 (gccgo: spurious \"error: too many arguments\" [GoSmith])\n\n\tPR go/61248\ncompiler: Ignore argument when typechecking converted recover calls.\n\nFrom-SVN: r218754", "tree": {"sha": "fbe72c76a5217947a2d72c403b542f71147e6264", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbe72c76a5217947a2d72c403b542f71147e6264"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14fa3e7fdf48c8b9529573356964a7d0e1426863", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14fa3e7fdf48c8b9529573356964a7d0e1426863", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14fa3e7fdf48c8b9529573356964a7d0e1426863", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14fa3e7fdf48c8b9529573356964a7d0e1426863/comments", "author": null, "committer": null, "parents": [{"sha": "cb3eb3dce752b4a3f2cbd457ae10c6b67cd5085e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3eb3dce752b4a3f2cbd457ae10c6b67cd5085e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb3eb3dce752b4a3f2cbd457ae10c6b67cd5085e"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "90cea3943d1ac51bbbc8bc685936bd281c786d5d", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14fa3e7fdf48c8b9529573356964a7d0e1426863/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14fa3e7fdf48c8b9529573356964a7d0e1426863/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=14fa3e7fdf48c8b9529573356964a7d0e1426863", "patch": "@@ -6627,6 +6627,8 @@ class Builtin_call_expression : public Call_expression\n   // Used to stop endless loops when the length of an array uses len\n   // or cap of the array itself.\n   mutable bool seen_;\n+  // Whether the argument is set for calls to BUILTIN_RECOVER.\n+  bool recover_arg_is_set_;\n };\n \n Builtin_call_expression::Builtin_call_expression(Gogo* gogo,\n@@ -6635,7 +6637,8 @@ Builtin_call_expression::Builtin_call_expression(Gogo* gogo,\n \t\t\t\t\t\t bool is_varargs,\n \t\t\t\t\t\t Location location)\n   : Call_expression(fn, args, is_varargs, location),\n-    gogo_(gogo), code_(BUILTIN_INVALID), seen_(false)\n+    gogo_(gogo), code_(BUILTIN_INVALID), seen_(false),\n+    recover_arg_is_set_(false)\n {\n   Func_expression* fnexp = this->fn()->func_expression();\n   go_assert(fnexp != NULL);\n@@ -6701,6 +6704,7 @@ Builtin_call_expression::do_set_recover_arg(Expression* arg)\n   Expression_list* new_args = new Expression_list();\n   new_args->push_back(arg);\n   this->set_args(new_args);\n+  this->recover_arg_is_set_ = true;\n }\n \n // Lower a builtin call expression.  This turns new and make into\n@@ -7841,7 +7845,9 @@ Builtin_call_expression::do_check_types(Gogo*)\n       break;\n \n     case BUILTIN_RECOVER:\n-      if (this->args() != NULL && !this->args()->empty())\n+      if (this->args() != NULL\n+\t  && !this->args()->empty()\n+\t  && !this->recover_arg_is_set_)\n \tthis->report_error(_(\"too many arguments\"));\n       break;\n "}]}