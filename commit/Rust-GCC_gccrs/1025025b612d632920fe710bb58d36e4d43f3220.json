{"sha": "1025025b612d632920fe710bb58d36e4d43f3220", "node_id": "C_kwDOANBUbNoAKDEwMjUwMjViNjEyZDYzMjkyMGZlNzEwYmI1OGQzNmU0ZDQzZjMyMjA", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-08-30T14:43:48Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-08-30T14:43:48Z"}, "message": "expmed: Fix store_bit_field_1 subreg offset\n\nstore_bit_field_1 tries to convert a field assignment into a subreg\nassignment.  Normally it must check that the field occupies a full\nword (or more specifically, a full REGMODE_NATURAL_SIZE chunk),\nso that writing to the subreg doesn't clobber any other fields.\nBut it can skip that check if the structure is known to be in\nan undefined state.\n\nThe idea was that, in the undefined case, we could rely on\nsimplify_gen_subreg to do the check for a valid subreg, rather\nthan having to repeat the required endianness logic in the caller.\n\nBefore the addition of the undefined case, the code could use\nregnum * regsize to get the byte offset, where regnum came from\nchecking that the start was word-aligned.  In the undefined case\nwe need to calculate the byte offset explicitly.\n\ngcc/\n\t* expmed.cc (store_bit_field_1): Fix byte offset calculation\n\tfor undefined structures.", "tree": {"sha": "5ea7660a3c830874be57000418cad382253f2dc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ea7660a3c830874be57000418cad382253f2dc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1025025b612d632920fe710bb58d36e4d43f3220", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1025025b612d632920fe710bb58d36e4d43f3220", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1025025b612d632920fe710bb58d36e4d43f3220", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1025025b612d632920fe710bb58d36e4d43f3220/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61c4c989034548f481d1f10198447be27fb9a55f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61c4c989034548f481d1f10198447be27fb9a55f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61c4c989034548f481d1f10198447be27fb9a55f"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "6c02c3bb850be86b06e38d8c8931e19f15ae6638", "filename": "gcc/expmed.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1025025b612d632920fe710bb58d36e4d43f3220/gcc%2Fexpmed.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1025025b612d632920fe710bb58d36e4d43f3220/gcc%2Fexpmed.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.cc?ref=1025025b612d632920fe710bb58d36e4d43f3220", "patch": "@@ -794,7 +794,7 @@ store_bit_field_1 (rtx str_rtx, poly_uint64 bitsize, poly_uint64 bitnum,\n \t words or to cope with mode punning between equal-sized modes.\n \t In the latter case, use subreg on the rhs side, not lhs.  */\n       rtx sub;\n-      HOST_WIDE_INT regnum = 0;\n+      poly_uint64 bytenum;\n       poly_uint64 regsize = REGMODE_NATURAL_SIZE (GET_MODE (op0));\n       if (known_eq (bitnum, 0U)\n \t  && known_eq (bitsize, GET_MODE_BITSIZE (GET_MODE (op0))))\n@@ -808,13 +808,13 @@ store_bit_field_1 (rtx str_rtx, poly_uint64 bitsize, poly_uint64 bitnum,\n \t      return true;\n \t    }\n \t}\n-      else if (((constant_multiple_p (bitnum, regsize * BITS_PER_UNIT, &regnum)\n-\t\t && multiple_p (bitsize, regsize * BITS_PER_UNIT))\n-\t\t|| undefined_p)\n+      else if (multiple_p (bitnum, BITS_PER_UNIT, &bytenum)\n+\t       && (undefined_p\n+\t\t   || (multiple_p (bitnum, regsize * BITS_PER_UNIT)\n+\t\t       && multiple_p (bitsize, regsize * BITS_PER_UNIT)))\n \t       && known_ge (GET_MODE_BITSIZE (GET_MODE (op0)), bitsize))\n \t{\n-\t  sub = simplify_gen_subreg (fieldmode, op0, GET_MODE (op0),\n-\t\t\t\t     regnum * regsize);\n+\t  sub = simplify_gen_subreg (fieldmode, op0, GET_MODE (op0), bytenum);\n \t  if (sub)\n \t    {\n \t      if (reverse)"}]}