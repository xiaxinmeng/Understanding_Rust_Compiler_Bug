{"sha": "051508d769162f11d48b185a253408ffd849ee07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUxNTA4ZDc2OTE2MmYxMWQ0OGIxODVhMjUzNDA4ZmZkODQ5ZWUwNw==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2017-06-09T12:55:38Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2017-06-09T12:55:38Z"}, "message": "[ARM] Allow arm_arch_*_ok to test several macros\n\n2017-06-09  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/testsuite/\n    * lib/target-supports.exp (check_effective_target_arm_arch_FUNC_ok):\n    Test for null definitions instead of them being undefined.  Add entry\n    for ARMv7VE.  Reindent entry for ARMv8-M Baseline.  Add comment warning\n    about using the effective target for architecture extension.\n    (check_effective_target_arm_arch_v7ve_ok): Remove.\n    (add_options_for_arm_arch_v7ve): Likewise.\n\nFrom-SVN: r249059", "tree": {"sha": "9cfc74c727b5b16f3c98479ba0e439e67fa72a54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cfc74c727b5b16f3c98479ba0e439e67fa72a54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/051508d769162f11d48b185a253408ffd849ee07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/051508d769162f11d48b185a253408ffd849ee07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/051508d769162f11d48b185a253408ffd849ee07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/051508d769162f11d48b185a253408ffd849ee07/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f751c5437988863e622fd8b3ff82ec65e281260", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f751c5437988863e622fd8b3ff82ec65e281260", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f751c5437988863e622fd8b3ff82ec65e281260"}], "stats": {"total": 47, "additions": 20, "deletions": 27}, "files": [{"sha": "1a709466b2e6bfdd24b0f81829283097377c9e06", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/051508d769162f11d48b185a253408ffd849ee07/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/051508d769162f11d48b185a253408ffd849ee07/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=051508d769162f11d48b185a253408ffd849ee07", "patch": "@@ -1,3 +1,12 @@\n+2017-06-09  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_arm_arch_FUNC_ok):\n+\tTest for null definitions instead of them being undefined.  Add entry\n+\tfor ARMv7VE.  Reindent entry for ARMv8-M Baseline.  Add comment warning\n+\tabout using the effective target for architecture extension.\n+\t(check_effective_target_arm_arch_v7ve_ok): Remove.\n+\t(add_options_for_arm_arch_v7ve): Likewise.\n+\n 2017-06-09  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/66623"}, {"sha": "9c9a26fe1dc75b01c77cb11f3db5d862287f202c", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/051508d769162f11d48b185a253408ffd849ee07/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/051508d769162f11d48b185a253408ffd849ee07/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=051508d769162f11d48b185a253408ffd849ee07", "patch": "@@ -3772,12 +3772,13 @@ proc check_effective_target_arm_fp16_hw { } {\n # can be selected and a routine to give the flags to select that architecture\n # Note: Extra flags may be added to disable options from newer compilers\n # (Thumb in particular - but others may be added in the future).\n-# -march=armv7ve is special and is handled explicitly after this loop because\n-# it needs more than one predefine check to identify.\n+# Warning: Do not use check_effective_target_arm_arch_*_ok for architecture\n+# extension (eg. ARMv8.1-A) since there is no macro defined for them.  See\n+# how only __ARM_ARCH_8A__ is checked for ARMv8.1-A.\n # Usage: /* { dg-require-effective-target arm_arch_v5_ok } */\n #        /* { dg-add-options arm_arch_v5 } */\n #\t /* { dg-require-effective-target arm_arch_v5_multilib } */\n-foreach { armfunc armflag armdef } {\n+foreach { armfunc armflag armdefs } {\n \tv4 \"-march=armv4 -marm\" __ARM_ARCH_4__\n \tv4t \"-march=armv4t\" __ARM_ARCH_4T__\n \tv5 \"-march=armv5 -marm\" __ARM_ARCH_5__\n@@ -3792,20 +3793,23 @@ foreach { armfunc armflag armdef } {\n \tv7r \"-march=armv7-r\" __ARM_ARCH_7R__\n \tv7m \"-march=armv7-m -mthumb\" __ARM_ARCH_7M__\n \tv7em \"-march=armv7e-m -mthumb\" __ARM_ARCH_7EM__\n+\tv7ve \"-march=armv7ve -marm\"\n+\t\t\"__ARM_ARCH_7A__ && __ARM_FEATURE_IDIV\"\n \tv8a \"-march=armv8-a\" __ARM_ARCH_8A__\n \tv8_1a \"-march=armv8.1a\" __ARM_ARCH_8A__\n \tv8_2a \"-march=armv8.2a\" __ARM_ARCH_8A__\n-\tv8m_base \"-march=armv8-m.base -mthumb -mfloat-abi=soft\" __ARM_ARCH_8M_BASE__\n+\tv8m_base \"-march=armv8-m.base -mthumb -mfloat-abi=soft\"\n+\t\t__ARM_ARCH_8M_BASE__\n \tv8m_main \"-march=armv8-m.main -mthumb\" __ARM_ARCH_8M_MAIN__ } {\n-    eval [string map [list FUNC $armfunc FLAG $armflag DEF $armdef ] {\n+    eval [string map [list FUNC $armfunc FLAG $armflag DEFS $armdefs ] {\n \tproc check_effective_target_arm_arch_FUNC_ok { } {\n \t    if { [ string match \"*-marm*\" \"FLAG\" ] &&\n \t\t![check_effective_target_arm_arm_ok] } {\n \t\treturn 0\n \t    }\n \t    return [check_no_compiler_messages arm_arch_FUNC_ok assembly {\n-\t\t#if !defined (DEF)\n-\t\t#error !DEF\n+\t\t#if !(DEFS)\n+\t\t#error !(DEFS)\n \t\t#endif\n \t    } \"FLAG\" ]\n \t}\n@@ -3826,26 +3830,6 @@ foreach { armfunc armflag armdef } {\n     }]\n }\n \n-# Same functions as above but for -march=armv7ve.  To uniquely identify\n-# -march=armv7ve we need to check for __ARM_ARCH_7A__ as well as\n-# __ARM_FEATURE_IDIV otherwise it aliases with armv7-a.\n-\n-proc check_effective_target_arm_arch_v7ve_ok { } {\n-  if { [ string match \"*-marm*\" \"-march=armv7ve\" ] &&\n-\t![check_effective_target_arm_arm_ok] } {\n-\t\treturn 0\n-    }\n-  return [check_no_compiler_messages arm_arch_v7ve_ok assembly {\n-  #if !defined (__ARM_ARCH_7A__) || !defined (__ARM_FEATURE_IDIV)\n-  #error !armv7ve\n-  #endif\n-  } \"-march=armv7ve\" ]\n-}\n-\n-proc add_options_for_arm_arch_v7ve { flags } {\n-    return \"$flags -march=armv7ve\"\n-}\n-\n # Return 1 if GCC was configured with --with-mode=\n proc check_effective_target_default_mode { } {\n "}]}