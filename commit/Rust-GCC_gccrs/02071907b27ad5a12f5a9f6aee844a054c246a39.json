{"sha": "02071907b27ad5a12f5a9f6aee844a054c246a39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIwNzE5MDdiMjdhZDVhMTJmNWE5ZjZhZWU4NDRhMDU0YzI0NmEzOQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2001-09-06T02:19:58Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2001-09-06T02:19:58Z"}, "message": "rs6000.c (mask_operand): Use signed vars to avoid compiler warnings.\n\n\t* config/rs6000/rs6000.c (mask_operand): Use signed vars to avoid\n\tcompiler warnings.\n\t(mask64_operand): Likewise.\n\t(includes_rldic_lshift_p): Likewise.\n\t(includes_rldicr_lshift_p): Likewise.\n\nFrom-SVN: r45430", "tree": {"sha": "63da6143006af0ffec3707f15b2e3c3493dc7bb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63da6143006af0ffec3707f15b2e3c3493dc7bb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02071907b27ad5a12f5a9f6aee844a054c246a39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02071907b27ad5a12f5a9f6aee844a054c246a39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02071907b27ad5a12f5a9f6aee844a054c246a39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02071907b27ad5a12f5a9f6aee844a054c246a39/comments", "author": null, "committer": null, "parents": [{"sha": "89fc36051e8045d8bb086b3228c1aec280884097", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89fc36051e8045d8bb086b3228c1aec280884097", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89fc36051e8045d8bb086b3228c1aec280884097"}], "stats": {"total": 45, "additions": 25, "deletions": 20}, "files": [{"sha": "b0be444441502d44dc2ac148dc23a8e2bbfe1350", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02071907b27ad5a12f5a9f6aee844a054c246a39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02071907b27ad5a12f5a9f6aee844a054c246a39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02071907b27ad5a12f5a9f6aee844a054c246a39", "patch": "@@ -1,3 +1,11 @@\n+2001-09-06  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* config/rs6000/rs6000.c (mask_operand): Use signed vars to avoid\n+\tcompiler warnings.\n+\t(mask64_operand): Likewise.\n+\t(includes_rldic_lshift_p): Likewise.\n+\t(includes_rldicr_lshift_p): Likewise.\n+\n 2001-09-05  Ziemowit Laski  <zlaski@apple.com>\n \n         * objc/objc-act.c (build_message_expr): If a class method cannot"}, {"sha": "dcd2c32bd4f7d3d5a412c47a32bbea16e933fbda", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02071907b27ad5a12f5a9f6aee844a054c246a39/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02071907b27ad5a12f5a9f6aee844a054c246a39/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=02071907b27ad5a12f5a9f6aee844a054c246a39", "patch": "@@ -1158,7 +1158,7 @@ mask_operand (op, mode)\n      register rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n-  unsigned HOST_WIDE_INT c, lsb;\n+  HOST_WIDE_INT c, lsb;\n \n   if (GET_CODE (op) != CONST_INT)\n     return 0;\n@@ -1202,7 +1202,7 @@ mask64_operand (op, mode)\n {\n   if (GET_CODE (op) == CONST_INT)\n     {\n-      unsigned HOST_WIDE_INT c, lsb;\n+      HOST_WIDE_INT c, lsb;\n \n       /* We don't change the number of transitions by inverting,\n \t so make sure we start with the LS bit zero.  */\n@@ -1221,7 +1221,7 @@ mask64_operand (op, mode)\n   else if (GET_CODE (op) == CONST_DOUBLE\n \t   && (mode == VOIDmode || mode == DImode))\n     {\n-      unsigned HOST_WIDE_INT low, high, lsb;\n+      HOST_WIDE_INT low, high, lsb;\n \n       if (HOST_BITS_PER_WIDE_INT < 64)\n \thigh = CONST_DOUBLE_HIGH (op);\n@@ -3642,13 +3642,13 @@ includes_rldic_lshift_p (shiftop, andop)\n {\n   if (GET_CODE (andop) == CONST_INT)\n     {\n-      unsigned HOST_WIDE_INT c, lsb, shift_mask;\n+      HOST_WIDE_INT c, lsb, shift_mask;\n \n       c = INTVAL (andop);\n-      if (c == 0 || c == ~(unsigned HOST_WIDE_INT) 0)\n+      if (c == 0 || c == ~0)\n \treturn 0;\n \n-      shift_mask = ~(unsigned HOST_WIDE_INT) 0;\n+      shift_mask = ~0;\n       shift_mask <<= INTVAL (shiftop);\n \n       /* Find the least signifigant one bit.  */\n@@ -3671,22 +3671,20 @@ includes_rldic_lshift_p (shiftop, andop)\n   else if (GET_CODE (andop) == CONST_DOUBLE\n \t   && (GET_MODE (andop) == VOIDmode || GET_MODE (andop) == DImode))\n     {\n-      unsigned HOST_WIDE_INT low, high, lsb;\n-      unsigned HOST_WIDE_INT shift_mask_low, shift_mask_high;\n+      HOST_WIDE_INT low, high, lsb;\n+      HOST_WIDE_INT shift_mask_low, shift_mask_high;\n \n       low = CONST_DOUBLE_LOW (andop);\n       if (HOST_BITS_PER_WIDE_INT < 64)\n \thigh = CONST_DOUBLE_HIGH (andop);\n \n       if ((low == 0 && (HOST_BITS_PER_WIDE_INT >= 64 || high == 0))\n-\t  || (low == ~(unsigned HOST_WIDE_INT) 0\n-\t      && (HOST_BITS_PER_WIDE_INT >= 64\n-\t\t  || high == ~(unsigned HOST_WIDE_INT) 0)))\n+\t  || (low == ~0 && (HOST_BITS_PER_WIDE_INT >= 64 || high == ~0)))\n \treturn 0;\n \n       if (HOST_BITS_PER_WIDE_INT < 64 && low == 0)\n \t{\n-\t  shift_mask_high = ~(unsigned HOST_WIDE_INT) 0;\n+\t  shift_mask_high = ~0;\n \t  if (INTVAL (shiftop) > 32)\n \t    shift_mask_high <<= INTVAL (shiftop) - 32;\n \n@@ -3702,7 +3700,7 @@ includes_rldic_lshift_p (shiftop, andop)\n \t  return high == -lsb;\n \t}\n \n-      shift_mask_low = ~(unsigned HOST_WIDE_INT) 0;\n+      shift_mask_low = ~0;\n       shift_mask_low <<= INTVAL (shiftop);\n \n       lsb = low & -low;\n@@ -3739,10 +3737,9 @@ includes_rldicr_lshift_p (shiftop, andop)\n {\n   if (GET_CODE (andop) == CONST_INT)\n     {\n-      unsigned HOST_WIDE_INT c, lsb;\n-      unsigned HOST_WIDE_INT shift_mask;\n+      HOST_WIDE_INT c, lsb, shift_mask;\n \n-      shift_mask = ~(unsigned HOST_WIDE_INT) 0;\n+      shift_mask = ~0;\n       shift_mask <<= INTVAL (shiftop);\n       c = INTVAL (andop);\n \n@@ -3760,19 +3757,19 @@ includes_rldicr_lshift_p (shiftop, andop)\n   else if (GET_CODE (andop) == CONST_DOUBLE\n \t   && (GET_MODE (andop) == VOIDmode || GET_MODE (andop) == DImode))\n     {\n-      unsigned HOST_WIDE_INT low, lsb, shift_mask_low;\n+      HOST_WIDE_INT low, lsb, shift_mask_low;\n \n       low = CONST_DOUBLE_LOW (andop);\n \n       if (HOST_BITS_PER_WIDE_INT < 64)\n \t{\n-\t  unsigned HOST_WIDE_INT high, shift_mask_high;\n+\t  HOST_WIDE_INT high, shift_mask_high;\n \n \t  high = CONST_DOUBLE_HIGH (andop);\n \n \t  if (low == 0)\n \t    {\n-\t      shift_mask_high = ~(unsigned HOST_WIDE_INT) 0;\n+\t      shift_mask_high = ~0;\n \t      if (INTVAL (shiftop) > 32)\n \t\tshift_mask_high <<= INTVAL (shiftop) - 32;\n \n@@ -3787,7 +3784,7 @@ includes_rldicr_lshift_p (shiftop, andop)\n \t    return 0;\n \t}\n \n-      shift_mask_low = ~(unsigned HOST_WIDE_INT) 0;\n+      shift_mask_low = ~0;\n       shift_mask_low <<= INTVAL (shiftop);\n \n       lsb = low & -low;"}]}