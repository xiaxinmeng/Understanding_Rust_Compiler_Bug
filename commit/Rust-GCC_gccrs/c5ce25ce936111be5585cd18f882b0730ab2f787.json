{"sha": "c5ce25ce936111be5585cd18f882b0730ab2f787", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVjZTI1Y2U5MzYxMTFiZTU1ODVjZDE4Zjg4MmIwNzMwYWIyZjc4Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-10-26T17:59:36Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-10-26T17:59:36Z"}, "message": "re PR c++/50870 ([C++0x] [4.6/4.7 Regression] ICE with decltype, operator->, and default template arguments)\n\n2011-10-26  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* typeck.c (cp_build_addr_expr_1): Use BASELINK_P.\n\t* class.c (instantiate_type): Likewise.\n\t* pt.c (convert_nontype_argument_function, uses_template_parms,\n\ttsubst_copy, resolve_nondeduced_context, type_dependent_expression_p):\n\tLikewise.\n\t* semantics.c (finish_decltype_type): Likewise.\n\t* decl2.c (mark_used): Likewise.\n\t* name-lookup.c (arg_assoc): Likewise.\n\n/cp\n2011-10-26  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/50870\n\t* typeck.c (non_reference): Pass NULL_TREE through.\n\n/testsuite\n2011-10-26  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/50870\n\t* g++.dg/cpp0x/decltype34.C: New.\n\nFrom-SVN: r180531", "tree": {"sha": "62555b15a9bad6e10330aa38fba2c5c300e998e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62555b15a9bad6e10330aa38fba2c5c300e998e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5ce25ce936111be5585cd18f882b0730ab2f787", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5ce25ce936111be5585cd18f882b0730ab2f787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5ce25ce936111be5585cd18f882b0730ab2f787", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5ce25ce936111be5585cd18f882b0730ab2f787/comments", "author": null, "committer": null, "parents": [{"sha": "e3c1bb6126be4d0b44083f77952321566748fbe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3c1bb6126be4d0b44083f77952321566748fbe6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3c1bb6126be4d0b44083f77952321566748fbe6"}], "stats": {"total": 62, "additions": 51, "deletions": 11}, "files": [{"sha": "e6a9a90affeef4d4dd3e36dd5a64fce0c133bdca", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ce25ce936111be5585cd18f882b0730ab2f787/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ce25ce936111be5585cd18f882b0730ab2f787/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c5ce25ce936111be5585cd18f882b0730ab2f787", "patch": "@@ -1,3 +1,19 @@\n+2011-10-26  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* typeck.c (cp_build_addr_expr_1): Use BASELINK_P.\n+\t* class.c (instantiate_type): Likewise.\n+\t* pt.c (convert_nontype_argument_function, uses_template_parms,\n+\ttsubst_copy, resolve_nondeduced_context, type_dependent_expression_p):\n+\tLikewise.\n+\t* semantics.c (finish_decltype_type): Likewise.\n+\t* decl2.c (mark_used): Likewise.\n+\t* name-lookup.c (arg_assoc): Likewise.\n+\n+2011-10-26  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/50870\n+\t* typeck.c (non_reference): Pass NULL_TREE through.\n+\n 2011-10-25  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/50866"}, {"sha": "03521e50345d39c5ac90fd9b2dc3e4315478b211", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ce25ce936111be5585cd18f882b0730ab2f787/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ce25ce936111be5585cd18f882b0730ab2f787/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=c5ce25ce936111be5585cd18f882b0730ab2f787", "patch": "@@ -6873,7 +6873,7 @@ instantiate_type (tree lhstype, tree rhs, tsubst_flags_t flags)\n \t}\n     }\n \n-  if (TREE_CODE (rhs) == BASELINK)\n+  if (BASELINK_P (rhs))\n     {\n       access_path = BASELINK_ACCESS_BINFO (rhs);\n       rhs = BASELINK_FUNCTIONS (rhs);"}, {"sha": "9851ece588006e5f5b105d3605e7409f58a4b685", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ce25ce936111be5585cd18f882b0730ab2f787/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ce25ce936111be5585cd18f882b0730ab2f787/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=c5ce25ce936111be5585cd18f882b0730ab2f787", "patch": "@@ -4174,7 +4174,7 @@ mark_used (tree decl)\n      like the DECL for the function.  Otherwise, if the BASELINK is\n      for an overloaded function, we don't know which function was\n      actually used until after overload resolution.  */\n-  if (TREE_CODE (decl) == BASELINK)\n+  if (BASELINK_P (decl))\n     {\n       decl = BASELINK_FUNCTIONS (decl);\n       if (really_overloaded_fn (decl))"}, {"sha": "7b61d68208a59e4a404cd35e4cd342cdc0d31ce6", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ce25ce936111be5585cd18f882b0730ab2f787/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ce25ce936111be5585cd18f882b0730ab2f787/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=c5ce25ce936111be5585cd18f882b0730ab2f787", "patch": "@@ -5329,7 +5329,7 @@ arg_assoc (struct arg_lookup *k, tree n)\n     n = TREE_OPERAND (n, 1);\n   while (TREE_CODE (n) == TREE_LIST)\n     n = TREE_VALUE (n);\n-  if (TREE_CODE (n) == BASELINK)\n+  if (BASELINK_P (n))\n     n = BASELINK_FUNCTIONS (n);\n \n   if (TREE_CODE (n) == FUNCTION_DECL)"}, {"sha": "7aea72d4e59e2ea2dc7b453c06ad9630456e79a8", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ce25ce936111be5585cd18f882b0730ab2f787/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ce25ce936111be5585cd18f882b0730ab2f787/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c5ce25ce936111be5585cd18f882b0730ab2f787", "patch": "@@ -5277,7 +5277,7 @@ convert_nontype_argument_function (tree type, tree expr)\n   fn_no_ptr = fn;\n   if (TREE_CODE (fn_no_ptr) == ADDR_EXPR)\n     fn_no_ptr = TREE_OPERAND (fn_no_ptr, 0);\n-  if (TREE_CODE (fn_no_ptr) == BASELINK)\n+  if (BASELINK_P (fn_no_ptr))\n     fn_no_ptr = BASELINK_FUNCTIONS (fn_no_ptr);\n  \n   /* [temp.arg.nontype]/1\n@@ -7801,7 +7801,7 @@ uses_template_parms (tree t)\n \t   || EXPR_P (t)\n \t   || TREE_CODE (t) == TEMPLATE_PARM_INDEX\n \t   || TREE_CODE (t) == OVERLOAD\n-\t   || TREE_CODE (t) == BASELINK\n+\t   || BASELINK_P (t)\n \t   || TREE_CODE (t) == IDENTIFIER_NODE\n \t   || TREE_CODE (t) == TRAIT_EXPR\n \t   || TREE_CODE (t) == CONSTRUCTOR\n@@ -11993,7 +11993,7 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\t\t\t\t base, name,\n \t\t\t\t\t /*template_p=*/false);\n \t  }\n-\telse if (TREE_CODE (name) == BASELINK)\n+\telse if (BASELINK_P (name))\n \t  name = tsubst_baselink (name,\n \t\t\t\t  non_reference (TREE_TYPE (object)),\n \t\t\t\t  args, complain,\n@@ -15197,7 +15197,7 @@ resolve_nondeduced_context (tree orig_expr)\n       offset = expr;\n       expr = TREE_OPERAND (expr, 1);\n     }\n-  if (TREE_CODE (expr) == BASELINK)\n+  if (BASELINK_P (expr))\n     {\n       baselink = expr;\n       expr = BASELINK_FUNCTIONS (expr);\n@@ -19314,7 +19314,7 @@ type_dependent_expression_p (tree expression)\n       if (TREE_CODE (expression) == SCOPE_REF)\n \treturn false;\n \n-      if (TREE_CODE (expression) == BASELINK)\n+      if (BASELINK_P (expression))\n \texpression = BASELINK_FUNCTIONS (expression);\n \n       if (TREE_CODE (expression) == TEMPLATE_ID_EXPR)"}, {"sha": "ec38a473715f2d8aabe3849c479f51be571461dd", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ce25ce936111be5585cd18f882b0730ab2f787/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ce25ce936111be5585cd18f882b0730ab2f787/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=c5ce25ce936111be5585cd18f882b0730ab2f787", "patch": "@@ -5115,7 +5115,7 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p,\n            step.  */\n         expr = TREE_OPERAND (expr, 1);\n \n-      if (TREE_CODE (expr) == BASELINK)\n+      if (BASELINK_P (expr))\n         /* See through BASELINK nodes to the underlying function.  */\n         expr = BASELINK_FUNCTIONS (expr);\n "}, {"sha": "068819ebe870341c37904583f8b1da45fdf9a8ac", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ce25ce936111be5585cd18f882b0730ab2f787/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ce25ce936111be5585cd18f882b0730ab2f787/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=c5ce25ce936111be5585cd18f882b0730ab2f787", "patch": "@@ -4946,7 +4946,7 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n       if (TREE_CODE (arg) == OFFSET_REF)\n \tPTRMEM_OK_P (val) = PTRMEM_OK_P (arg);\n     }\n-  else if (TREE_CODE (TREE_OPERAND (arg, 1)) == BASELINK)\n+  else if (BASELINK_P (TREE_OPERAND (arg, 1)))\n     {\n       tree fn = BASELINK_FUNCTIONS (TREE_OPERAND (arg, 1));\n \n@@ -8322,7 +8322,7 @@ casts_away_constness (tree t1, tree t2)\n tree\n non_reference (tree t)\n {\n-  if (TREE_CODE (t) == REFERENCE_TYPE)\n+  if (t && TREE_CODE (t) == REFERENCE_TYPE)\n     t = TREE_TYPE (t);\n   return t;\n }"}, {"sha": "868e4b0d204a4086d45389c16542e36b9d14fcf1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ce25ce936111be5585cd18f882b0730ab2f787/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ce25ce936111be5585cd18f882b0730ab2f787/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c5ce25ce936111be5585cd18f882b0730ab2f787", "patch": "@@ -1,3 +1,8 @@\n+2011-10-26  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/50870\n+\t* g++.dg/cpp0x/decltype34.C: New.\n+\n 2011-10-26  Tom de Vries <tom@codesourcery.com>\n \n \t* gcc.c-torture/unsorted/HIcmp.c: Fix unaligned pointer."}, {"sha": "fbd15c2797d8f346bb4580da11a8896682e3c95d", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype34.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ce25ce936111be5585cd18f882b0730ab2f787/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ce25ce936111be5585cd18f882b0730ab2f787/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype34.C?ref=c5ce25ce936111be5585cd18f882b0730ab2f787", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/50870\n+// { dg-options \"-std=gnu++0x\" }\n+\n+struct impl\n+{\n+  template <class T> static T create();\n+};\n+\n+template<class T, class U,\n+\t class = decltype(impl::create<T>()->impl::create<U>())>\n+struct tester{};\n+\n+tester<impl*, int> ti;\n+\n+template<class T, class U,\n+\t class = decltype(impl::create<T>()->impl::create<U>())>\n+int test() { return 0; }\n+\n+int i = test<impl*, int>();"}]}