{"sha": "a5e3c1e2c8dafcd2f6e4eeb2b2fa38fd40c5eda3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVlM2MxZTJjOGRhZmNkMmY2ZTRlZWIyYjJmYTM4ZmQ0MGM1ZWRhMw==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-08-06T14:37:34Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-08-09T08:59:05Z"}, "message": "testsuite: aarch64: Fix invalid SVE tests\n\nSome scan-assembler tests for SVE code generation were erroneously\nsplit over multiple lines - meaning they became invalid. This patch\ngets the tests working again by putting each test on a single line.\n\nThe extract_[1234].c tests are corrected to expect that extracted\n32-bit values are moved into 'w' registers rather than 'x' registers.\n\ngcc/testsuite/ChangeLog:\n\n2021-08-06  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* gcc.target/aarch64/sve/dup_lane_1.c: Don't split\n\tscan-assembler tests over multiple lines. Expect 32-bit\n\tresult values in 'w' registers.\n\t* gcc.target/aarch64/sve/extract_1.c: Likewise.\n\t* gcc.target/aarch64/sve/extract_2.c: Likewise.\n\t* gcc.target/aarch64/sve/extract_3.c: Likewise.\n\t* gcc.target/aarch64/sve/extract_4.c: Likewise.", "tree": {"sha": "19870512b305190dce6be4e5ff71c3b24df33aa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19870512b305190dce6be4e5ff71c3b24df33aa9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5e3c1e2c8dafcd2f6e4eeb2b2fa38fd40c5eda3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5e3c1e2c8dafcd2f6e4eeb2b2fa38fd40c5eda3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5e3c1e2c8dafcd2f6e4eeb2b2fa38fd40c5eda3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5e3c1e2c8dafcd2f6e4eeb2b2fa38fd40c5eda3/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da81e30d21fb4acd217d88779ca077f22aee92b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da81e30d21fb4acd217d88779ca077f22aee92b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da81e30d21fb4acd217d88779ca077f22aee92b2"}], "stats": {"total": 72, "additions": 24, "deletions": 48}, "files": [{"sha": "39b46daaae26744af786a989b52c56e4e2b908c3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/dup_lane_1.c", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5e3c1e2c8dafcd2f6e4eeb2b2fa38fd40c5eda3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fdup_lane_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5e3c1e2c8dafcd2f6e4eeb2b2fa38fd40c5eda3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fdup_lane_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fdup_lane_1.c?ref=a5e3c1e2c8dafcd2f6e4eeb2b2fa38fd40c5eda3", "patch": "@@ -56,27 +56,19 @@ TEST_ALL (DUP_LANE)\n \n /* { dg-final { scan-assembler-not {\\ttbl\\t} } } */\n \n-/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, d[0-9]} 2 {\n-\t\ttarget { aarch64_little_endian } } } } */\n-/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.d, z[0-9]+\\.d\\[0\\]} 2 {\n-\t\ttarget { aarch64_big_endian } } } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, d[0-9]} 2 { target aarch64_little_endian } } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.d, z[0-9]+\\.d\\[0\\]} 2 { target aarch64_big_endian } } } */\n /* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.d, z[0-9]+\\.d\\[2\\]} 2 } } */\n /* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.d, z[0-9]+\\.d\\[3\\]} 2 } } */\n-/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.s, s[0-9]} 2 {\n-\t\ttarget { aarch64_little_endian } } } } */\n-/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.s, z[0-9]+\\.s\\[0\\]} 2 {\n-\t\ttarget { aarch64_big_endian } } } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.s, s[0-9]} 2 { target aarch64_little_endian } } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.s, z[0-9]+\\.s\\[0\\]} 2 { target aarch64_big_endian } } } */\n /* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.s, z[0-9]+\\.s\\[5\\]} 2 } } */\n /* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.s, z[0-9]+\\.s\\[7\\]} 2 } } */\n-/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, h[0-9]} 2 {\n-\t\ttarget { aarch64_little_endian } } } } */\n-/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.h, z[0-9]+\\.h\\[0\\]} 2 {\n-\t\ttarget { aarch64_big_endian } } } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, h[0-9]} 2 { target aarch64_little_endian } } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.h, z[0-9]+\\.h\\[0\\]} 2 { target aarch64_big_endian } } } */\n /* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.h, z[0-9]+\\.h\\[6\\]} 2 } } */\n /* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.h, z[0-9]+\\.h\\[15\\]} 2 } } */\n-/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.b, b[0-9]} 1 {\n-\t\ttarget { aarch64_little_endian } } } } */\n-/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.b, z[0-9]+\\.b\\[0\\]} 1 {\n-\t\ttarget { aarch64_big_endian } } } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.b, b[0-9]} 1 { target aarch64_little_endian } } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.b, z[0-9]+\\.b\\[0\\]} 1 { target aarch64_big_endian } } } */\n /* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.b, z[0-9]+\\.b\\[19\\]} 1 } } */\n /* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.b, z[0-9]+\\.b\\[31\\]} 1 } } */"}, {"sha": "dbcc1d943e1b29f5dd0482c442146394931828a4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/extract_1.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5e3c1e2c8dafcd2f6e4eeb2b2fa38fd40c5eda3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5e3c1e2c8dafcd2f6e4eeb2b2fa38fd40c5eda3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_1.c?ref=a5e3c1e2c8dafcd2f6e4eeb2b2fa38fd40c5eda3", "patch": "@@ -56,21 +56,17 @@ typedef _Float16 vnx8hf __attribute__((vector_size (32)));\n \n TEST_ALL (EXTRACT)\n \n-/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, d[0-9]\\n} 2 {\n-\t\ttarget { aarch64_little_endian } } } } */\n-/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[0\\]\\n} 1 {\n-\t\ttarget { aarch64_big_endian } } } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, d[0-9]\\n} 2 { target aarch64_little_endian } } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[0\\]\\n} 1 { target aarch64_big_endian } } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-not {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[0\\]\\n} } } */\n /* { dg-final { scan-assembler-times {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.d, z[0-9]+\\.d\\[2\\]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tlastb\\tx[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tlastb\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n \n-/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, s[0-9]\\n} 2 {\n-\t\ttarget { aarch64_little_endian } } } } */\n-/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.s\\[0\\]\\n} 1 {\n-\t\ttarget { aarch64_big_endian } } } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tw[0-9]+, s[0-9]\\n} 2 { target aarch64_little_endian } } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[0\\]\\n} 1 { target aarch64_big_endian } } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[3\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-not {\\tdup\\ts[0-9]+, v[0-9]+\\.s\\[0\\]\\n} } } */"}, {"sha": "a48774664dd270a96da755ac5f8be22fc6680b30", "filename": "gcc/testsuite/gcc.target/aarch64/sve/extract_2.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5e3c1e2c8dafcd2f6e4eeb2b2fa38fd40c5eda3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5e3c1e2c8dafcd2f6e4eeb2b2fa38fd40c5eda3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_2.c?ref=a5e3c1e2c8dafcd2f6e4eeb2b2fa38fd40c5eda3", "patch": "@@ -56,21 +56,17 @@ typedef _Float16 vnx16hf __attribute__((vector_size (64)));\n \n TEST_ALL (EXTRACT)\n \n-/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, d[0-9]\\n} 2 {\n-\t\ttarget { aarch64_little_endian } } } } */\n-/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[0\\]\\n} 1 {\n-\t\ttarget { aarch64_big_endian } } } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, d[0-9]\\n} 2 { target aarch64_little_endian } } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[0\\]\\n} 1 { target aarch64_big_endian } } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-not {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[0\\]\\n} } } */\n /* { dg-final { scan-assembler-times {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.d, z[0-9]+\\.d\\[2\\]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tlastb\\tx[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tlastb\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n \n-/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, s[0-9]\\n} 2 {\n-\t\ttarget { aarch64_little_endian } } } } */\n-/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.s\\[0\\]\\n} 1 {\n-\t\ttarget { aarch64_big_endian } } } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tw[0-9]+, s[0-9]\\n} 2 { target aarch64_little_endian } } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[0\\]\\n} 1 { target aarch64_big_endian } } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[3\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-not {\\tdup\\ts[0-9]+, v[0-9]+\\.s\\[0\\]\\n} } } */"}, {"sha": "bf10bf16efd9452269f219b5daa29b720d50532e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/extract_3.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5e3c1e2c8dafcd2f6e4eeb2b2fa38fd40c5eda3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5e3c1e2c8dafcd2f6e4eeb2b2fa38fd40c5eda3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_3.c?ref=a5e3c1e2c8dafcd2f6e4eeb2b2fa38fd40c5eda3", "patch": "@@ -77,10 +77,8 @@ typedef _Float16 vnx32hf __attribute__((vector_size (128)));\n \n TEST_ALL (EXTRACT)\n \n-/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, d[0-9]\\n} 5 {\n-\t\ttarget { aarch64_little_endian } } } } */\n-/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[0\\]\\n} 1 {\n-\t\ttarget { aarch64_big_endian } } } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, d[0-9]\\n} 5 { target aarch64_little_endian } } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[0\\]\\n} 1 { target aarch64_big_endian } } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-not {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[0\\]\\n} } } */\n /* { dg-final { scan-assembler-times {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n@@ -89,10 +87,8 @@ TEST_ALL (EXTRACT)\n /* { dg-final { scan-assembler-times {\\tlastb\\tx[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tlastb\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n \n-/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, s[0-9]\\n} 5 {\n-\t\ttarget { aarch64_little_endian } } } } */\n-/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.s\\[0\\]\\n} 1 {\n-\t\ttarget { aarch64_big_endian } } } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tw[0-9]+, s[0-9]\\n} 5 { target aarch64_little_endian } } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[0\\]\\n} 1 { target aarch64_big_endian } } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[3\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-not {\\tdup\\ts[0-9]+, v[0-9]+\\.s\\[0\\]\\n} } } */"}, {"sha": "9805678c12ee7d2ba1af0faf0e0c46a72f14d5cd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/extract_4.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5e3c1e2c8dafcd2f6e4eeb2b2fa38fd40c5eda3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5e3c1e2c8dafcd2f6e4eeb2b2fa38fd40c5eda3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_4.c?ref=a5e3c1e2c8dafcd2f6e4eeb2b2fa38fd40c5eda3", "patch": "@@ -84,10 +84,8 @@ typedef _Float16 v128hf __attribute__((vector_size (256)));\n \n TEST_ALL (EXTRACT)\n \n-/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, d[0-9]\\n} 6 {\n-\t\ttarget { aarch64_little_endian } } } } */\n-/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[0\\]\\n} 1 {\n-\t\ttarget { aarch64_big_endian } } } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, d[0-9]\\n} 6 { target aarch64_little_endian } } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[0\\]\\n} 1 { target aarch64_big_endian } } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-not {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[0\\]\\n} } } */\n /* { dg-final { scan-assembler-times {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n@@ -96,10 +94,8 @@ TEST_ALL (EXTRACT)\n /* { dg-final { scan-assembler-times {\\tlastb\\tx[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tlastb\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n \n-/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, s[0-9]\\n} 6 {\n-\t\ttarget { aarch64_little_endian } } } } */\n-/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.s\\[0\\]\\n} 1 {\n-\t\ttarget { aarch64_big_endian } } } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tw[0-9]+, s[0-9]\\n} 6 { target aarch64_little_endian } } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[0\\]\\n} 1 { target aarch64_big_endian } } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[3\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-not {\\tdup\\ts[0-9]+, v[0-9]+\\.s\\[0\\]\\n} } } */"}]}