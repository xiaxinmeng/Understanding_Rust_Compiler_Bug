{"sha": "6d04746832c64088a510517fcace16f0c60d528c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQwNDc0NjgzMmM2NDA4OGE1MTA1MTdmY2FjZTE2ZjBjNjBkNTI4Yw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-03-17T15:21:45Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-03-17T15:21:45Z"}, "message": "Beans.java: Explicitely import classes not packages.\n\n2003-03-17  Michael Koch  <konqueror@gmx.de>\n\n\t* java/beans/Beans.java:\n\tExplicitely import classes not packages.\n\t* java/beans/FeatureDescriptor.java\n\t(preferred): New member variable.\n\t(isPreferred): New method.\n\t(setPreferred): New method.\n\t* java/beans/PropertyEditorManager.java:\n\tExplicitely import used classes.\n\t* java/beans/beancontext/BeanContextChild.java:\n\tAdded line wrapping.\n\t* java/beans/beancontext/BeanContextChildSupport.java:\n\tReindented.\n\t* java/beans/beancontext/BeanContextEvent.java:\n\tReindented.\n\nFrom-SVN: r64486", "tree": {"sha": "6acf6da5e934be029c688434eef17c49b3b73840", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6acf6da5e934be029c688434eef17c49b3b73840"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d04746832c64088a510517fcace16f0c60d528c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d04746832c64088a510517fcace16f0c60d528c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d04746832c64088a510517fcace16f0c60d528c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d04746832c64088a510517fcace16f0c60d528c/comments", "author": null, "committer": null, "parents": [{"sha": "2ff04cc63aa8b683dd17f029e7579280ecd8f9c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ff04cc63aa8b683dd17f029e7579280ecd8f9c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ff04cc63aa8b683dd17f029e7579280ecd8f9c8"}], "stats": {"total": 155, "additions": 105, "deletions": 50}, "files": [{"sha": "31ad7beaaeb30598cf19373a33ddc19ebbb432e6", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d04746832c64088a510517fcace16f0c60d528c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d04746832c64088a510517fcace16f0c60d528c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6d04746832c64088a510517fcace16f0c60d528c", "patch": "@@ -1,3 +1,20 @@\n+2003-03-17  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/beans/Beans.java:\n+\tExplicitely import classes not packages.\n+\t* java/beans/FeatureDescriptor.java\n+\t(preferred): New member variable.\n+\t(isPreferred): New method.\n+\t(setPreferred): New method.\n+\t* java/beans/PropertyEditorManager.java:\n+\tExplicitely import used classes.\n+\t* java/beans/beancontext/BeanContextChild.java:\n+\tAdded line wrapping.\n+\t* java/beans/beancontext/BeanContextChildSupport.java:\n+\tReindented.\n+\t* java/beans/beancontext/BeanContextEvent.java:\n+\tReindented.\n+\n 2003-03-17  Michael Koch  <konqueror@gmx.de>\n \n \t* java/awt/Dialog.java"}, {"sha": "7ee0522f823f1f05f0408f60acb458cebb5d05f2", "filename": "libjava/java/beans/Beans.java", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d04746832c64088a510517fcace16f0c60d528c/libjava%2Fjava%2Fbeans%2FBeans.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d04746832c64088a510517fcace16f0c60d528c/libjava%2Fjava%2Fbeans%2FBeans.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FBeans.java?ref=6d04746832c64088a510517fcace16f0c60d528c", "patch": "@@ -38,9 +38,11 @@\n \n package java.beans;\n \n-import java.io.*;\n-import java.applet.*;\n-import gnu.java.io.*;\n+import gnu.java.io.ClassLoaderObjectInputStream;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.applet.Applet;\n \n /**\n  * <code>Beans</code> provides some helper methods that allow the basic"}, {"sha": "32f54a410cbdb05e92dfd8c859ddd0d7c17b3789", "filename": "libjava/java/beans/FeatureDescriptor.java", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d04746832c64088a510517fcace16f0c60d528c/libjava%2Fjava%2Fbeans%2FFeatureDescriptor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d04746832c64088a510517fcace16f0c60d528c/libjava%2Fjava%2Fbeans%2FFeatureDescriptor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FFeatureDescriptor.java?ref=6d04746832c64088a510517fcace16f0c60d528c", "patch": "@@ -66,6 +66,7 @@\n   String shortDescription;\n   boolean expert;\n   boolean hidden;\n+  boolean preferred;\n \n   Hashtable valueHash;\n \n@@ -177,6 +178,15 @@ public void setHidden(boolean hidden)\n     this.hidden = hidden;\n   }\n \n+  public boolean isPreferred ()\n+  {\n+    return preferred;\n+  }\n+\n+  public void setPreferred (boolean preferred)\n+  {\n+    this.preferred = preferred;\n+  }\n \n   /**\n    * Get an arbitrary value set with setValue()."}, {"sha": "cb03563d50e0d5a3adf359885c7128a22bddf8c9", "filename": "libjava/java/beans/PropertyEditorManager.java", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d04746832c64088a510517fcace16f0c60d528c/libjava%2Fjava%2Fbeans%2FPropertyEditorManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d04746832c64088a510517fcace16f0c60d528c/libjava%2Fjava%2Fbeans%2FPropertyEditorManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FPropertyEditorManager.java?ref=6d04746832c64088a510517fcace16f0c60d528c", "patch": "@@ -39,6 +39,18 @@\n package java.beans;\n \n import gnu.java.lang.ClassHelper;\n+import gnu.java.beans.editors.ColorEditor;\n+import gnu.java.beans.editors.FontEditor;\n+import gnu.java.beans.editors.NativeBooleanEditor;\n+import gnu.java.beans.editors.NativeByteEditor;\n+import gnu.java.beans.editors.NativeDoubleEditor;\n+import gnu.java.beans.editors.NativeFloatEditor;\n+import gnu.java.beans.editors.NativeIntEditor;\n+import gnu.java.beans.editors.NativeLongEditor;\n+import gnu.java.beans.editors.NativeShortEditor;\n+import gnu.java.beans.editors.StringEditor;\n+import java.awt.Color;\n+import java.awt.Font;\n \n /**\n  * PropertyEditorManager is used to find property editors\n@@ -70,20 +82,21 @@\n public class PropertyEditorManager\n {\n   static java.util.Hashtable editors = new java.util.Hashtable();\n-  static String[] editorSearchPath = {\"gnu.java.beans.editors\",\"sun.beans.editors\"};\n+  static String[] editorSearchPath = { \"gnu.java.beans.editors\",\n+                                       \"sun.beans.editors\" };\n \n   static\n     {\n-      registerEditor(java.lang.Boolean.TYPE, gnu.java.beans.editors.NativeBooleanEditor.class);\n-      registerEditor(java.lang.Byte.TYPE,    gnu.java.beans.editors.NativeByteEditor.class);\n-      registerEditor(java.lang.Short.TYPE,   gnu.java.beans.editors.NativeShortEditor.class);\n-      registerEditor(java.lang.Integer.TYPE, gnu.java.beans.editors.NativeIntEditor.class);\n-      registerEditor(java.lang.Long.TYPE,    gnu.java.beans.editors.NativeLongEditor.class);\n-      registerEditor(java.lang.Float.TYPE,   gnu.java.beans.editors.NativeFloatEditor.class);\n-      registerEditor(java.lang.Double.TYPE,  gnu.java.beans.editors.NativeDoubleEditor.class);\n-      registerEditor(java.lang.String.class, gnu.java.beans.editors.StringEditor.class);\n-      registerEditor(java.awt.Color.class,   gnu.java.beans.editors.ColorEditor.class);\n-      registerEditor(java.awt.Font.class,    gnu.java.beans.editors.FontEditor.class);\n+      registerEditor(Boolean.TYPE, NativeBooleanEditor.class);\n+      registerEditor(Byte.TYPE,    NativeByteEditor.class);\n+      registerEditor(Short.TYPE,   NativeShortEditor.class);\n+      registerEditor(Integer.TYPE, NativeIntEditor.class);\n+      registerEditor(Long.TYPE,    NativeLongEditor.class);\n+      registerEditor(Float.TYPE,   NativeFloatEditor.class);\n+      registerEditor(Double.TYPE,  NativeDoubleEditor.class);\n+      registerEditor(String.class, StringEditor.class);\n+      registerEditor(Color.class,  ColorEditor.class);\n+      registerEditor(Font.class,   FontEditor.class);\n     }\n \n   /**"}, {"sha": "ef2b7b3497698d6e3c528f887a99dc34ce8363e6", "filename": "libjava/java/beans/beancontext/BeanContextChild.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d04746832c64088a510517fcace16f0c60d528c/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextChild.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d04746832c64088a510517fcace16f0c60d528c/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextChild.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextChild.java?ref=6d04746832c64088a510517fcace16f0c60d528c", "patch": "@@ -43,7 +43,8 @@\n import java.beans.PropertyVetoException;\n \n /**\n- * Beans implement this to get information about the execution environment and its services and to be placed in the hierarchy.\n+ * Beans implement this to get information about the execution environment and\n+ * its services and to be placed in the hierarchy.\n  * <P>\n  *\n  * The difference between a <code>BeanContext</code> and a"}, {"sha": "ea48cf2ae502409a80cfb63a3b8706d42f89a08c", "filename": "libjava/java/beans/beancontext/BeanContextChildSupport.java", "status": "modified", "additions": 45, "deletions": 34, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d04746832c64088a510517fcace16f0c60d528c/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextChildSupport.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d04746832c64088a510517fcace16f0c60d528c/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextChildSupport.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextChildSupport.java?ref=6d04746832c64088a510517fcace16f0c60d528c", "patch": "@@ -56,7 +56,7 @@\n  *           behavior.  If there are problems, let me know.\n  *\n  * @author John Keiser\n- * @since JDK1.2\n+ * @since 1.2\n  * @see java.beans.beancontext.BeanContextChild\n  */\n \n@@ -97,29 +97,31 @@\n \t */\n \tprotected VetoableChangeSupport vcSupport;\n \n-\n \t/**\n \t * Create a new <code>BeanContextChildSupport</code> with itself as the peer.\n \t * This is meant to be used when you subclass\n \t * <code>BeanContextChildSupport</code> to create your child.\n \t */\n-\tpublic BeanContextChildSupport() {\n-\t\tthis(null);\n+\tpublic BeanContextChildSupport()\n+  {\n+\t\tthis (null);\n \t};\n \n \t/**\n \t * Create a new <code>BeanContextChildSupport</code> with the specified peer.\n \t * @param peer the peer to use, or <code>null</code> to specify\n \t *        <code>this</code>.\n \t */\n-\tpublic BeanContextChildSupport(BeanContextChild peer) {\n-\t\tif(peer == null) {\n-\t\t\tpeer = this;\n-\t\t}\n+\tpublic BeanContextChildSupport (BeanContextChild peer)\n+  {\n+\t\tif (peer == null)\n+      {\n+        peer = this;\n+      }\n \n \t\tbeanContextChildPeer = peer;\n-\t\tpcSupport = new PropertyChangeSupport(peer);\n-\t\tvcSupport = new VetoableChangeSupport(peer);\n+\t\tpcSupport = new PropertyChangeSupport (peer);\n+\t\tvcSupport = new VetoableChangeSupport (peer);\n \t}\n \n \t/**\n@@ -178,42 +180,51 @@ public BeanContextChildSupport(BeanContextChild peer) {\n \t *            <code>BeanContextChild</code> implementor does not\n \t *            wish to have its parent changed.\n \t */\n-\tpublic void setBeanContext(BeanContext newBeanContext)\n-\t\tthrows PropertyVetoException {\n-\t\tsynchronized(beanContextChildPeer) {\n-\t\t\tif(newBeanContext == beanContext)\n-\t\t\t\treturn;\n-\n-\t\t\tif(!rejectedSetBCOnce) {\n-\t\t\t\tif(!validatePendingSetBeanContext(newBeanContext)) {\n-\t\t\t\t\trejectedSetBCOnce = true;\n-\t\t\t\t\tthrow new PropertyVetoException(\"validatePendingSetBeanContext() rejected change\",\n-\t\t\t\t\t\tnew PropertyChangeEvent(beanContextChildPeer, \"beanContext\", beanContext, newBeanContext));\n-\t\t\t\t}\n-\t\t\t\ttry {\n-\t\t\t\t\tfireVetoableChange(\"beanContext\", beanContext, newBeanContext);\n-\t\t\t\t} catch(PropertyVetoException e) {\n-\t\t\t\t\trejectedSetBCOnce = true;\n-\t\t\t\t\tthrow e;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\treleaseBeanContextResources();\n+  public void setBeanContext(BeanContext newBeanContext)\n+    throws PropertyVetoException\n+  {\n+    synchronized (beanContextChildPeer)\n+      {\n+        if (newBeanContext == beanContext)\n+          return;\n+\n+        if (!rejectedSetBCOnce)\n+          {\n+            if (!validatePendingSetBeanContext (newBeanContext))\n+              {\n+                rejectedSetBCOnce = true;\n+                throw new PropertyVetoException (\"validatePendingSetBeanContext() rejected change\",\n+                                                 new PropertyChangeEvent(beanContextChildPeer, \"beanContext\", beanContext, newBeanContext));\n+              }\n+            \n+            try\n+              {\n+                fireVetoableChange (\"beanContext\", beanContext, newBeanContext);\n+              }\n+            catch (PropertyVetoException e)\n+              {\n+                rejectedSetBCOnce = true;\n+                throw e;\n+              }\n+          }\n+\n+\t\t\treleaseBeanContextResources ();\n \n \t\t\tbeanContext = newBeanContext;\n \t\t\trejectedSetBCOnce = false;\n \n-\t\t\tfirePropertyChange(\"beanContext\", beanContext, newBeanContext);\n+\t\t\tfirePropertyChange (\"beanContext\", beanContext, newBeanContext);\n \n-\t\t\tinitializeBeanContextResources();\n+\t\t\tinitializeBeanContextResources ();\n \t\t}\n \t}\n \n \t/**\n \t * Get the parent <code>BeanContext</code>.\n \t * @return the parent <code>BeanContext</code>.\n \t */\n-\tpublic BeanContext getBeanContext() {\n+\tpublic BeanContext getBeanContext()\n+  {\n \t\treturn beanContext;\n \t}\n "}, {"sha": "f93d3fe148f47823438ae3ff1e10090326013a85", "filename": "libjava/java/beans/beancontext/BeanContextEvent.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d04746832c64088a510517fcace16f0c60d528c/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d04746832c64088a510517fcace16f0c60d528c/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextEvent.java?ref=6d04746832c64088a510517fcace16f0c60d528c", "patch": "@@ -47,7 +47,8 @@\n  * @since JDK1.2\n  */\n \n-public abstract class BeanContextEvent extends EventObject {\n+public abstract class BeanContextEvent extends EventObject\n+{\n \t/**\n \t * The <code>BeanContext</code> that most recently passed this\n \t * event on."}]}