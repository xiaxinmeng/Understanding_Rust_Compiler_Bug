{"sha": "b90c93381261e3c7fff0bf25fad4c22407ab9b73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkwYzkzMzgxMjYxZTNjN2ZmZjBiZjI1ZmFkNGMyMjQwN2FiOWI3Mw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-10-11T18:09:59Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-10-11T18:09:59Z"}, "message": "[PATCH] Include path enumeration\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-10/msg00693.html\n\tgcc/\n\t* incpath.h (enum incpath_kind): Name enum, prefix values.\n\t(add_path, add_cpp_dir_path, get_added_cpp_dirs): Use incpath_kind.\n\t* incpath.c (heads, tails): Use INC_MAX.\n\t(add_env_var_paths, add_standard_paths): Use incpath_kind.\n\t(merge_include_chains, split_quote_chain,\n\tregister_include_chains): Update incpath_kind names.\n\t(add_cpp_dir_path, add_path, get_added_cpp_dirs): Use incpath_kind.\n\t* config/darwin-c.c (add_system_framework_path): Update incpath_kind\n\tnames.\n\t(add_framework_path, darwin_register_objc_includes): Likewise.\n\t* config/vms/vms-c.c (vms_c_register_includes): Likewise.\n\tgcc/c-family/\n\t* c-opts.c (add_prefixed_path): Change chain to incpath_kind.\n\t(c_common_handle_option): Update incpath_kind names.\n\tgcc/fortran/\n\t* cpp.c (gfc_cpp_add_include_path): Update incpath_e names.\n\t(gfc_cpp_add_include_path_after): Likewise.\n\nFrom-SVN: r253654", "tree": {"sha": "9ea0969a69bf3e506dfd77d4a35fb7ef8c761a34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ea0969a69bf3e506dfd77d4a35fb7ef8c761a34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b90c93381261e3c7fff0bf25fad4c22407ab9b73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b90c93381261e3c7fff0bf25fad4c22407ab9b73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b90c93381261e3c7fff0bf25fad4c22407ab9b73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b90c93381261e3c7fff0bf25fad4c22407ab9b73/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "42851ff81dbe1ccaa16dbcc070513c181ff61eb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42851ff81dbe1ccaa16dbcc070513c181ff61eb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42851ff81dbe1ccaa16dbcc070513c181ff61eb7"}], "stats": {"total": 149, "additions": 92, "deletions": 57}, "files": [{"sha": "cb3a961b86ac4449babc05b529fc8c4b46a08e0c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b90c93381261e3c7fff0bf25fad4c22407ab9b73/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b90c93381261e3c7fff0bf25fad4c22407ab9b73/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b90c93381261e3c7fff0bf25fad4c22407ab9b73", "patch": "@@ -1,3 +1,17 @@\n+2017-10-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* incpath.h (enum incpath_kind): Name enum, prefix values.\n+\t(add_path, add_cpp_dir_path, get_added_cpp_dirs): Use incpath_kind.\n+\t* incpath.c (heads, tails): Use INC_MAX.\n+\t(add_env_var_paths, add_standard_paths): Use incpath_kind.\n+\t(merge_include_chains, split_quote_chain,\n+\tregister_include_chains): Update incpath_kind names.\n+\t(add_cpp_dir_path, add_path, get_added_cpp_dirs): Use incpath_kind.\n+\t* config/darwin-c.c (add_system_framework_path): Update incpath_kind\n+\tnames.\n+\t(add_framework_path, darwin_register_objc_includes): Likewise.\n+\t* config/vms/vms-c.c (vms_c_register_includes): Likewise.\n+\n 2017-10-11  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*cmp<X87MODEF:mode>_<SWI24:mode>_i387):"}, {"sha": "da40ab310026be10a706c033cfd1b7057a85ea15", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b90c93381261e3c7fff0bf25fad4c22407ab9b73/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b90c93381261e3c7fff0bf25fad4c22407ab9b73/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b90c93381261e3c7fff0bf25fad4c22407ab9b73", "patch": "@@ -1,3 +1,8 @@\n+2017-10-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-opts.c (add_prefixed_path): Change chain to incpath_kind.\n+\t(c_common_handle_option): Update incpath_kind names.\n+\n 2017-10-11  Martin Liska  <mliska@suse.cz>\n \n \tPR sanitizer/82490"}, {"sha": "6bd535532d3d315a07194bf2ebd656327321ffa0", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b90c93381261e3c7fff0bf25fad4c22407ab9b73/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b90c93381261e3c7fff0bf25fad4c22407ab9b73/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=b90c93381261e3c7fff0bf25fad4c22407ab9b73", "patch": "@@ -118,7 +118,7 @@ static void set_std_c11 (int);\n static void check_deps_environment_vars (void);\n static void handle_deferred_opts (void);\n static void sanitize_cpp_opts (void);\n-static void add_prefixed_path (const char *, size_t);\n+static void add_prefixed_path (const char *, incpath_kind);\n static void push_command_line_include (void);\n static void cb_file_change (cpp_reader *, const line_map_ordinary *);\n static void cb_dir_change (cpp_reader *, const char *);\n@@ -316,7 +316,7 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \n     case OPT_I:\n       if (strcmp (arg, \"-\"))\n-\tadd_path (xstrdup (arg), BRACKET, 0, true);\n+\tadd_path (xstrdup (arg), INC_BRACKET, 0, true);\n       else\n \t{\n \t  if (quote_chain_split)\n@@ -550,7 +550,7 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       break;\n \n     case OPT_idirafter:\n-      add_path (xstrdup (arg), AFTER, 0, true);\n+      add_path (xstrdup (arg), INC_AFTER, 0, true);\n       break;\n \n     case OPT_imacros:\n@@ -567,23 +567,23 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       break;\n \n     case OPT_iquote:\n-      add_path (xstrdup (arg), QUOTE, 0, true);\n+      add_path (xstrdup (arg), INC_QUOTE, 0, true);\n       break;\n \n     case OPT_isysroot:\n       sysroot = arg;\n       break;\n \n     case OPT_isystem:\n-      add_path (xstrdup (arg), SYSTEM, 0, true);\n+      add_path (xstrdup (arg), INC_SYSTEM, 0, true);\n       break;\n \n     case OPT_iwithprefix:\n-      add_prefixed_path (arg, SYSTEM);\n+      add_prefixed_path (arg, INC_SYSTEM);\n       break;\n \n     case OPT_iwithprefixbefore:\n-      add_prefixed_path (arg, BRACKET);\n+      add_prefixed_path (arg, INC_BRACKET);\n       break;\n \n     case OPT_lang_asm:\n@@ -1326,7 +1326,7 @@ sanitize_cpp_opts (void)\n \n /* Add include path with a prefix at the front of its name.  */\n static void\n-add_prefixed_path (const char *suffix, size_t chain)\n+add_prefixed_path (const char *suffix, incpath_kind chain)\n {\n   char *path;\n   const char *prefix;"}, {"sha": "91f08a0dceea579ef6ecc27dba3a38c614b41363", "filename": "gcc/config/darwin-c.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b90c93381261e3c7fff0bf25fad4c22407ab9b73/gcc%2Fconfig%2Fdarwin-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b90c93381261e3c7fff0bf25fad4c22407ab9b73/gcc%2Fconfig%2Fdarwin-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-c.c?ref=b90c93381261e3c7fff0bf25fad4c22407ab9b73", "patch": "@@ -433,7 +433,7 @@ add_system_framework_path (char *path)\n   p->construct = framework_construct_pathname;\n   using_frameworks = 1;\n \n-  add_cpp_dir_path (p, SYSTEM);\n+  add_cpp_dir_path (p, INC_SYSTEM);\n }\n \n /* Add PATH to the bracket includes. PATH must be malloc-ed and\n@@ -451,7 +451,7 @@ add_framework_path (char *path)\n   p->construct = framework_construct_pathname;\n   using_frameworks = 1;\n \n-  add_cpp_dir_path (p, BRACKET);\n+  add_cpp_dir_path (p, INC_BRACKET);\n }\n \n static const char *framework_defaults [] =\n@@ -488,7 +488,7 @@ darwin_register_objc_includes (const char *sysroot, const char *iprefix,\n \t{\n \t  str = concat (iprefix, fname + len, NULL);\n           /* FIXME: wrap the headers for C++awareness.  */\n-\t  add_path (str, SYSTEM, /*c++aware=*/false, false);\n+\t  add_path (str, INC_SYSTEM, /*c++aware=*/false, false);\n \t}\n \n       /* Should this directory start with the sysroot?  */\n@@ -497,7 +497,7 @@ darwin_register_objc_includes (const char *sysroot, const char *iprefix,\n       else\n \tstr = update_path (fname, \"\");\n \n-      add_path (str, SYSTEM, /*c++aware=*/false, false);\n+      add_path (str, INC_SYSTEM, /*c++aware=*/false, false);\n     }\n }\n "}, {"sha": "278c8e236be5e494f8111298ebc3f7074d60eb23", "filename": "gcc/config/vms/vms-c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b90c93381261e3c7fff0bf25fad4c22407ab9b73/gcc%2Fconfig%2Fvms%2Fvms-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b90c93381261e3c7fff0bf25fad4c22407ab9b73/gcc%2Fconfig%2Fvms%2Fvms-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-c.c?ref=b90c93381261e3c7fff0bf25fad4c22407ab9b73", "patch": "@@ -418,7 +418,7 @@ vms_c_register_includes (const char *sysroot,\n   if (!stdinc)\n     return;\n \n-  for (dir = get_added_cpp_dirs (SYSTEM); dir != NULL; dir = dir->next)\n+  for (dir = get_added_cpp_dirs (INC_SYSTEM); dir != NULL; dir = dir->next)\n     {\n       const char * const *lib;\n       for (lib = vms_std_modules; *lib != NULL; lib++)\n@@ -441,7 +441,7 @@ vms_c_register_includes (const char *sysroot,\n               p->sysp = 1;\n               p->construct = vms_construct_include_filename;\n               p->user_supplied_p = 0;\n-              add_cpp_dir_path (p, SYSTEM);\n+              add_cpp_dir_path (p, INC_SYSTEM);\n             }\n           else\n             free (path);"}, {"sha": "a37d16e51fa705e09ed42b4464e17622c5f3e618", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b90c93381261e3c7fff0bf25fad4c22407ab9b73/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b90c93381261e3c7fff0bf25fad4c22407ab9b73/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b90c93381261e3c7fff0bf25fad4c22407ab9b73", "patch": "@@ -1,3 +1,8 @@\n+2017-10-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cpp.c (gfc_cpp_add_include_path): Update incpath_e names.\n+\t(gfc_cpp_add_include_path_after): Likewise.\n+\n 2017-10-10  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* target-memory.c (gfc_interpret_logical): Use wi::to_wide when"}, {"sha": "af8a69ca3f7653e6b7c6b6b639daa8c31deec27d", "filename": "gcc/fortran/cpp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b90c93381261e3c7fff0bf25fad4c22407ab9b73/gcc%2Ffortran%2Fcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b90c93381261e3c7fff0bf25fad4c22407ab9b73/gcc%2Ffortran%2Fcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.c?ref=b90c93381261e3c7fff0bf25fad4c22407ab9b73", "patch": "@@ -683,14 +683,14 @@ gfc_cpp_add_include_path (char *path, bool user_supplied)\n      include path. Fortran does not define any system include paths.  */\n   int cxx_aware = 0;\n \n-  add_path (path, BRACKET, cxx_aware, user_supplied);\n+  add_path (path, INC_BRACKET, cxx_aware, user_supplied);\n }\n \n void\n gfc_cpp_add_include_path_after (char *path, bool user_supplied)\n {\n   int cxx_aware = 0;\n-  add_path (path, AFTER, cxx_aware, user_supplied);\n+  add_path (path, INC_AFTER, cxx_aware, user_supplied);\n }\n \n void"}, {"sha": "a2ee69f428cebe19f0fccf0fbe2a95d8f10bfea2", "filename": "gcc/incpath.c", "status": "modified", "additions": 40, "deletions": 36, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b90c93381261e3c7fff0bf25fad4c22407ab9b73/gcc%2Fincpath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b90c93381261e3c7fff0bf25fad4c22407ab9b73/gcc%2Fincpath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fincpath.c?ref=b90c93381261e3c7fff0bf25fad4c22407ab9b73", "patch": "@@ -46,7 +46,7 @@\n \n static const char dir_separator_str[] = { DIR_SEPARATOR, 0 };\n \n-static void add_env_var_paths (const char *, int);\n+static void add_env_var_paths (const char *, incpath_kind);\n static void add_standard_paths (const char *, const char *, const char *, int);\n static void free_path (struct cpp_dir *, int);\n static void merge_include_chains (const char *, cpp_reader *, int);\n@@ -56,8 +56,9 @@ static struct cpp_dir *remove_duplicates (cpp_reader *, struct cpp_dir *,\n \t\t\t\t\t   struct cpp_dir *, int);\n \n /* Include chains heads and tails.  */\n-static struct cpp_dir *heads[4];\n-static struct cpp_dir *tails[4];\n+static struct cpp_dir *heads[INC_MAX];\n+static struct cpp_dir *tails[INC_MAX];\n+\n static bool quote_ignores_source_dir;\n enum { REASON_QUIET = 0, REASON_NOENT, REASON_DUP, REASON_DUP_SYS };\n \n@@ -92,7 +93,7 @@ free_path (struct cpp_dir *path, int reason)\n /* Read ENV_VAR for a PATH_SEPARATOR-separated list of file names; and\n    append all the names to the search path CHAIN.  */\n static void\n-add_env_var_paths (const char *env_var, int chain)\n+add_env_var_paths (const char *env_var, incpath_kind chain)\n {\n   char *p, *q, *path;\n \n@@ -116,7 +117,7 @@ add_env_var_paths (const char *env_var, int chain)\n \t  path[q - p] = '\\0';\n \t}\n \n-      add_path (path, chain, chain == SYSTEM, false);\n+      add_path (path, chain, chain == INC_SYSTEM, false);\n     }\n }\n \n@@ -159,7 +160,7 @@ add_standard_paths (const char *sysroot, const char *iprefix,\n \t\t      str = reconcat (str, str, dir_separator_str,\n \t\t\t\t      imultiarch, NULL);\n \t\t    }\n-\t\t  add_path (str, SYSTEM, p->cxx_aware, false);\n+\t\t  add_path (str, INC_SYSTEM, p->cxx_aware, false);\n \t\t}\n \t    }\n \t}\n@@ -225,7 +226,7 @@ add_standard_paths (const char *sysroot, const char *iprefix,\n \t      str = reconcat (str, str, dir_separator_str, imultiarch, NULL);\n \t    }\n \n-\t  add_path (str, SYSTEM, p->cxx_aware, false);\n+\t  add_path (str, INC_SYSTEM, p->cxx_aware, false);\n \t}\n     }\n }\n@@ -349,39 +350,42 @@ merge_include_chains (const char *sysroot, cpp_reader *pfile, int verbose)\n   /* Add the sysroot to user-supplied paths starting with \"=\".  */\n   if (sysroot)\n     {\n-      add_sysroot_to_chain (sysroot, QUOTE);\n-      add_sysroot_to_chain (sysroot, BRACKET);\n-      add_sysroot_to_chain (sysroot, SYSTEM);\n-      add_sysroot_to_chain (sysroot, AFTER);\n+      add_sysroot_to_chain (sysroot, INC_QUOTE);\n+      add_sysroot_to_chain (sysroot, INC_BRACKET);\n+      add_sysroot_to_chain (sysroot, INC_SYSTEM);\n+      add_sysroot_to_chain (sysroot, INC_AFTER);\n     }\n \n   /* Join the SYSTEM and AFTER chains.  Remove duplicates in the\n      resulting SYSTEM chain.  */\n-  if (heads[SYSTEM])\n-    tails[SYSTEM]->next = heads[AFTER];\n+  if (heads[INC_SYSTEM])\n+    tails[INC_SYSTEM]->next = heads[INC_AFTER];\n   else\n-    heads[SYSTEM] = heads[AFTER];\n-  heads[SYSTEM] = remove_duplicates (pfile, heads[SYSTEM], 0, 0, verbose);\n+    heads[INC_SYSTEM] = heads[INC_AFTER];\n+  heads[INC_SYSTEM]\n+    = remove_duplicates (pfile, heads[INC_SYSTEM], 0, 0, verbose);\n \n   /* Remove duplicates from BRACKET that are in itself or SYSTEM, and\n      join it to SYSTEM.  */\n-  heads[BRACKET] = remove_duplicates (pfile, heads[BRACKET], heads[SYSTEM],\n-\t\t\t\t      heads[SYSTEM], verbose);\n+  heads[INC_BRACKET]\n+    = remove_duplicates (pfile, heads[INC_BRACKET], heads[INC_SYSTEM],\n+\t\t\t heads[INC_SYSTEM], verbose);\n \n   /* Remove duplicates from QUOTE that are in itself or SYSTEM, and\n      join it to BRACKET.  */\n-  heads[QUOTE] = remove_duplicates (pfile, heads[QUOTE], heads[SYSTEM],\n-\t\t\t\t    heads[BRACKET], verbose);\n+  heads[INC_QUOTE]\n+    = remove_duplicates (pfile, heads[INC_QUOTE], heads[INC_SYSTEM],\n+\t\t\t heads[INC_BRACKET], verbose);\n \n   /* If verbose, print the list of dirs to search.  */\n   if (verbose)\n     {\n       struct cpp_dir *p;\n \n       fprintf (stderr, _(\"#include \\\"...\\\" search starts here:\\n\"));\n-      for (p = heads[QUOTE];; p = p->next)\n+      for (p = heads[INC_QUOTE];; p = p->next)\n \t{\n-\t  if (p == heads[BRACKET])\n+\t  if (p == heads[INC_BRACKET])\n \t    fprintf (stderr, _(\"#include <...> search starts here:\\n\"));\n \t  if (!p)\n \t    break;\n@@ -398,22 +402,22 @@ merge_include_chains (const char *sysroot, cpp_reader *pfile, int verbose)\n void\n split_quote_chain (void)\n {\n-  if (heads[QUOTE])\n-    free_path (heads[QUOTE], REASON_QUIET);\n-  if (tails[QUOTE])\n-    free_path (tails[QUOTE], REASON_QUIET);\n-  heads[QUOTE] = heads[BRACKET];\n-  tails[QUOTE] = tails[BRACKET];\n-  heads[BRACKET] = NULL;\n-  tails[BRACKET] = NULL;\n+  if (heads[INC_QUOTE])\n+    free_path (heads[INC_QUOTE], REASON_QUIET);\n+  if (tails[INC_QUOTE])\n+    free_path (tails[INC_QUOTE], REASON_QUIET);\n+  heads[INC_QUOTE] = heads[INC_BRACKET];\n+  tails[INC_QUOTE] = tails[INC_BRACKET];\n+  heads[INC_BRACKET] = NULL;\n+  tails[INC_BRACKET] = NULL;\n   /* This is NOT redundant.  */\n   quote_ignores_source_dir = true;\n }\n \n /* Add P to the chain specified by CHAIN.  */\n \n void\n-add_cpp_dir_path (cpp_dir *p, int chain)\n+add_cpp_dir_path (cpp_dir *p, incpath_kind chain)\n {\n   if (tails[chain])\n     tails[chain]->next = p;\n@@ -425,7 +429,7 @@ add_cpp_dir_path (cpp_dir *p, int chain)\n /* Add PATH to the include chain CHAIN. PATH must be malloc-ed and\n    NUL-terminated.  */\n void\n-add_path (char *path, int chain, int cxx_aware, bool user_supplied_p)\n+add_path (char *path, incpath_kind chain, int cxx_aware, bool user_supplied_p)\n {\n   cpp_dir *p;\n \n@@ -450,7 +454,7 @@ add_path (char *path, int chain, int cxx_aware, bool user_supplied_p)\n #ifndef INO_T_EQ\n   p->canonical_name = lrealpath (path);\n #endif\n-  if (chain == SYSTEM || chain == AFTER)\n+  if (chain == INC_SYSTEM || chain == INC_AFTER)\n     p->sysp = 1 + !cxx_aware;\n   else\n     p->sysp = 0;\n@@ -480,8 +484,8 @@ register_include_chains (cpp_reader *pfile, const char *sysroot,\n \n   /* CPATH and language-dependent environment variables may add to the\n      include chain.  */\n-  add_env_var_paths (\"CPATH\", BRACKET);\n-  add_env_var_paths (lang_env_vars[idx], SYSTEM);\n+  add_env_var_paths (\"CPATH\", INC_BRACKET);\n+  add_env_var_paths (lang_env_vars[idx], INC_SYSTEM);\n \n   target_c_incpath.extra_pre_includes (sysroot, iprefix, stdinc);\n \n@@ -493,14 +497,14 @@ register_include_chains (cpp_reader *pfile, const char *sysroot,\n \n   merge_include_chains (sysroot, pfile, verbose);\n \n-  cpp_set_include_chains (pfile, heads[QUOTE], heads[BRACKET],\n+  cpp_set_include_chains (pfile, heads[INC_QUOTE], heads[INC_BRACKET],\n \t\t\t  quote_ignores_source_dir);\n }\n \n /* Return the current chain of cpp dirs.  */\n \n struct cpp_dir *\n-get_added_cpp_dirs (int chain)\n+get_added_cpp_dirs (incpath_kind chain)\n {\n   return heads[chain];\n }"}, {"sha": "32c3dceb78b1a975c5aad3c21c53f79928e27d60", "filename": "gcc/incpath.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b90c93381261e3c7fff0bf25fad4c22407ab9b73/gcc%2Fincpath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b90c93381261e3c7fff0bf25fad4c22407ab9b73/gcc%2Fincpath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fincpath.h?ref=b90c93381261e3c7fff0bf25fad4c22407ab9b73", "patch": "@@ -18,13 +18,22 @@\n #ifndef GCC_INCPATH_H\n #define GCC_INCPATH_H\n \n+/* Various fragments of include path.  */\n+enum incpath_kind {\n+  INC_QUOTE = 0, /* include \"foo\" */\n+  INC_BRACKET,   /* include <foo> */\n+  INC_SYSTEM,    /* sysinclude */\n+  INC_AFTER,\t/* post-sysinclude.  */\n+  INC_MAX\n+};\n+\n extern void split_quote_chain (void);\n-extern void add_path (char *, int, int, bool);\n+extern void add_path (char *, incpath_kind, int, bool);\n extern void register_include_chains (cpp_reader *, const char *,\n \t\t\t\t     const char *, const char *,\n \t\t\t\t     int, int, int);\n-extern void add_cpp_dir_path (struct cpp_dir *, int);\n-extern struct cpp_dir *get_added_cpp_dirs (int);\n+extern void add_cpp_dir_path (struct cpp_dir *, incpath_kind);\n+extern struct cpp_dir *get_added_cpp_dirs (incpath_kind);\n \n struct target_c_incpath_s {\n   /* Do extra includes processing.  STDINC is false iff -nostdinc was given.  */\n@@ -34,6 +43,4 @@ struct target_c_incpath_s {\n \n extern struct target_c_incpath_s target_c_incpath;\n \n-enum { QUOTE = 0, BRACKET, SYSTEM, AFTER };\n-\n #endif /* GCC_INCPATH_H */"}]}