{"sha": "b2c3160ca56fe11425e80fffff754f206faf9e19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJjMzE2MGNhNTZmZTExNDI1ZTgwZmZmZmY3NTRmMjA2ZmFmOWUxOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-08T09:15:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-08T09:15:24Z"}, "message": "[multiple changes]\n\n2017-09-08  Bob Duff  <duff@adacore.com>\n\n\t* sem_ch3.adb (Build_Derived_Private_Type): Inherit\n\trepresentation items from interfaces that the derived type\n\timplements, not just from the parent type.\n\t* sem_util.ads, sem_util.adb (Abstract_Interface_List): Change\n\tthis to return an empty list when there are no interfaces.\n\t* einfo.ads, sem_ch13.adb: Minor comment fixes.\n\t* sem_attr.adb: Minor comment fix.\n\n2017-09-08  Doug Rupp  <rupp@adacore.com>\n\n\t* sigtramp-vxworks.c [i386]: Adjust the kernel context for\n\tx86-vx7.\n\n2017-09-08  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Allocator): Generate a\n\tcall to Allocate_Any_Controlled when the allocation does not\n\trequire any initialization.\n\nFrom-SVN: r251870", "tree": {"sha": "7160f5b78d707ee69887ad727b9fad23c36f132b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7160f5b78d707ee69887ad727b9fad23c36f132b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2c3160ca56fe11425e80fffff754f206faf9e19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2c3160ca56fe11425e80fffff754f206faf9e19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2c3160ca56fe11425e80fffff754f206faf9e19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2c3160ca56fe11425e80fffff754f206faf9e19/comments", "author": null, "committer": null, "parents": [{"sha": "cc3a298607f8b33c06cbf5163c8eaf07f138d6c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc3a298607f8b33c06cbf5163c8eaf07f138d6c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc3a298607f8b33c06cbf5163c8eaf07f138d6c0"}], "stats": {"total": 70, "additions": 58, "deletions": 12}, "files": [{"sha": "2631caf70eecc30d2f4f378585e4ffcacc810598", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c3160ca56fe11425e80fffff754f206faf9e19/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c3160ca56fe11425e80fffff754f206faf9e19/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b2c3160ca56fe11425e80fffff754f206faf9e19", "patch": "@@ -1,3 +1,24 @@\n+2017-09-08  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch3.adb (Build_Derived_Private_Type): Inherit\n+\trepresentation items from interfaces that the derived type\n+\timplements, not just from the parent type.\n+\t* sem_util.ads, sem_util.adb (Abstract_Interface_List): Change\n+\tthis to return an empty list when there are no interfaces.\n+\t* einfo.ads, sem_ch13.adb: Minor comment fixes.\n+\t* sem_attr.adb: Minor comment fix.\n+\n+2017-09-08  Doug Rupp  <rupp@adacore.com>\n+\n+\t* sigtramp-vxworks.c [i386]: Adjust the kernel context for\n+\tx86-vx7.\n+\n+2017-09-08  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Allocator): Generate a\n+\tcall to Allocate_Any_Controlled when the allocation does not\n+\trequire any initialization.\n+\n 2017-09-08  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_util.adb (Copy_Node_With_Replacement):"}, {"sha": "227055649c16f61e1e1a02b079330c841e3c93cb", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c3160ca56fe11425e80fffff754f206faf9e19/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c3160ca56fe11425e80fffff754f206faf9e19/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=b2c3160ca56fe11425e80fffff754f206faf9e19", "patch": "@@ -2730,8 +2730,8 @@ package Einfo is\n \n --    Is_Interface (Flag186)\n --       Defined in record types and subtypes. Set to indicate that the current\n---       entity corresponds with an abstract interface. Because abstract\n---       interfaces are conceptually a special kind of abstract tagged types\n+--       entity corresponds to an abstract interface. Because abstract\n+--       interfaces are conceptually a special kind of abstract tagged type\n --       we represent them by means of tagged record types and subtypes\n --       marked with this attribute. This allows us to reuse most of the\n --       compiler support for abstract tagged types to implement interfaces"}, {"sha": "e2e58c97a968622cf05a728d092a9eb5084dcdfa", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c3160ca56fe11425e80fffff754f206faf9e19/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c3160ca56fe11425e80fffff754f206faf9e19/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=b2c3160ca56fe11425e80fffff754f206faf9e19", "patch": "@@ -4632,7 +4632,9 @@ package body Exp_Ch4 is\n             --  No initialization required\n \n             else\n-               null;\n+               Build_Allocate_Deallocate_Proc\n+                 (N           => N,\n+                  Is_Allocate => True);\n             end if;\n \n          --  Case of initialization procedure present, must be called"}, {"sha": "641ac87eb9bebabd60ffc734e87fa50f8009feab", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c3160ca56fe11425e80fffff754f206faf9e19/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c3160ca56fe11425e80fffff754f206faf9e19/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=b2c3160ca56fe11425e80fffff754f206faf9e19", "patch": "@@ -8199,7 +8199,8 @@ package body Sem_Attr is\n \n       case Id is\n \n-      --  Attributes related to Ada 2012 iterators (placeholder ???)\n+      --  Attributes related to Ada 2012 iterators; nothing to evaluate for\n+      --  these.\n \n       when Attribute_Constant_Indexing\n          | Attribute_Default_Iterator"}, {"sha": "dea044af5284313d749cd02dde36243267213d45", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c3160ca56fe11425e80fffff754f206faf9e19/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c3160ca56fe11425e80fffff754f206faf9e19/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=b2c3160ca56fe11425e80fffff754f206faf9e19", "patch": "@@ -3974,7 +3974,7 @@ package body Sem_Ch13 is\n \n       procedure Check_Iterator_Functions;\n       --  Check that there is a single function in Default_Iterator attribute\n-      --  has the proper type structure.\n+      --  that has the proper type structure.\n \n       function Check_Primitive_Function (Subp : Entity_Id) return Boolean;\n       --  Common legality check for the previous two"}, {"sha": "158aa674597a90a72fb62c2801530efc846ef43c", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c3160ca56fe11425e80fffff754f206faf9e19/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c3160ca56fe11425e80fffff754f206faf9e19/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=b2c3160ca56fe11425e80fffff754f206faf9e19", "patch": "@@ -9576,9 +9576,18 @@ package body Sem_Ch3 is\n          Set_Has_Predicates (Derived_Type);\n       end if;\n \n-      --  The derived type inherits the representation clauses of the parent\n+      --  The derived type inherits representation clauses from the parent\n+      --  type, and from any interfaces.\n \n       Inherit_Rep_Item_Chain (Derived_Type, Parent_Type);\n+      declare\n+         Iface : Node_Id := First (Abstract_Interface_List (Derived_Type));\n+      begin\n+         while Present (Iface) loop\n+            Inherit_Rep_Item_Chain (Derived_Type, Entity (Iface));\n+            Next (Iface);\n+         end loop;\n+      end;\n \n       --  If the parent type has delayed rep aspects, then mark the derived\n       --  type as possibly inheriting a delayed rep aspect."}, {"sha": "9deee3bc98f8bfab49f7603a6f949eda39fa9192", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c3160ca56fe11425e80fffff754f206faf9e19/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c3160ca56fe11425e80fffff754f206faf9e19/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=b2c3160ca56fe11425e80fffff754f206faf9e19", "patch": "@@ -198,12 +198,17 @@ package body Sem_Util is\n \n          return Abstract_Interface_List (Etype (Typ));\n \n-      else pragma Assert ((Ekind (Typ)) = E_Record_Type);\n+      elsif Ekind (Typ) = E_Record_Type then\n          if Nkind (Parent (Typ)) = N_Formal_Type_Declaration then\n             Nod := Formal_Type_Definition (Parent (Typ));\n          else\n             Nod := Type_Definition (Parent (Typ));\n          end if;\n+\n+      --  It's not the kind of type that can implement interfaces\n+\n+      else\n+         return Empty_List;\n       end if;\n \n       return Interface_List (Nod);"}, {"sha": "a7b3487ac26f2dccf7777d48b6ce9ebe6f4d0abe", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c3160ca56fe11425e80fffff754f206faf9e19/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c3160ca56fe11425e80fffff754f206faf9e19/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=b2c3160ca56fe11425e80fffff754f206faf9e19", "patch": "@@ -37,8 +37,9 @@ with Urealp;  use Urealp;\n package Sem_Util is\n \n    function Abstract_Interface_List (Typ : Entity_Id) return List_Id;\n-   --  Given a type that implements interfaces look for its associated\n-   --  definition node and return its list of interfaces.\n+   --  The list of interfaces implemented by Typ. Empty if there are none,\n+   --  including the cases where there can't be any because e.g. the type is\n+   --  not tagged.\n \n    procedure Add_Access_Type_To_Process (E : Entity_Id; A : Entity_Id);\n    --  Add A to the list of access types to process when expanding the"}, {"sha": "211be97e244220271619f87b75230cceba552cdd", "filename": "gcc/ada/sigtramp-vxworks.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c3160ca56fe11425e80fffff754f206faf9e19/gcc%2Fada%2Fsigtramp-vxworks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c3160ca56fe11425e80fffff754f206faf9e19/gcc%2Fada%2Fsigtramp-vxworks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsigtramp-vxworks.c?ref=b2c3160ca56fe11425e80fffff754f206faf9e19", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                         Asm Implementation File                          *\n  *                                                                          *\n- *         Copyright (C) 2011-2015, Free Software Foundation, Inc.          *\n+ *         Copyright (C) 2011-2017, Free Software Foundation, Inc.          *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -39,6 +39,9 @@\n #include <vxWorks.h>\n #include <arch/../regs.h>\n #ifndef __RTP__\n+#if defined(__i386__)\n+#include <version.h>\n+#endif\n #include <sigLib.h>\n #else\n #include <signal.h>\n@@ -127,11 +130,13 @@ void __gnat_sigtramp (int signo, void *si, void *sc,\n        containing a complete REG_SET just before the field 'sc_pregs', this\n        adds a 208 bytes offset to get the value of 'sc_pregs'.\n      * on x86-vx7: the same offset is used on vx7: 3 32-bit values are present\n-       at the enf of the reg set, but the padding is then of 0xc4 characters.\n+       at the end of the reg set, but the padding is then of 0xc4 characters.\n      * on x86_64-vx7: two 64-bit values are added at the beginning of the\n        REG_SET. This adds a 16 bytes offset to get the value of 'sc_pregs',\n        and another 16 bytes offset within the pregs structure to retrieve the\n        registers list.\n+\n+     * See header file regsSimlinux.h.\n   */\n \n   /* Retrieve the registers to restore : */\n@@ -141,7 +146,9 @@ void __gnat_sigtramp (int signo, void *si, void *sc,\n   /* move sctx 208 bytes further, so that the vxsim's sc_pregs field coincide\n      with the expected x86 one */\n   struct sigcontext * sctx =\n-    (struct sigcontext *) (sc + (__gnat_is_vxsim ? 208 : 0));\n+    (struct sigcontext *) (sc + (__gnat_is_vxsim ?\n+\t\t\t\t (_WRS_VXWORKS_MAJOR == 7 ? 204 : 208)\n+\t\t\t\t : 0));\n #elif defined(__x86_64__)\n   /* move sctx 16 bytes further, so that the vxsim's sc_pregs field coincide\n      with the expected x86_64 one */"}]}