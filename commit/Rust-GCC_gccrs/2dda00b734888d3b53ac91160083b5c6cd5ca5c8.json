{"sha": "2dda00b734888d3b53ac91160083b5c6cd5ca5c8", "node_id": "C_kwDOANBUbNoAKDJkZGEwMGI3MzQ4ODhkM2I1M2FjOTExNjAwODNiNWM2Y2Q1Y2E1Yzg", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-09-29T15:45:24Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-10-04T16:33:57Z"}, "message": "c-family: Implement -Warray-compare [PR97573]\n\nThis patch addresses one of my leftovers from GCC 11.  C++20 introduced\n[depr.array.comp]: \"Equality and relational comparisons between two operands\nof array type are deprecated.\" so this patch adds -Warray-compare.  Since the\ncode in question is dubious (the comparison doesn't actually compare the array\nelements), I've added this warning for C too, and enabled it in all C++ modes.\n\n\tPR c++/97573\n\ngcc/c-family/ChangeLog:\n\n\t* c-common.h (do_warn_array_compare): Declare.\n\t* c-warn.c (do_warn_array_compare): New.\n\t* c.opt (Warray-compare): New option.\n\ngcc/c/ChangeLog:\n\n\t* c-typeck.c (parser_build_binary_op): Call do_warn_array_compare.\n\ngcc/cp/ChangeLog:\n\n\t* typeck.c (cp_build_binary_op): Call do_warn_array_compare.\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi: Document -Warray-compare.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/Warray-compare-1.c: New test.\n\t* c-c++-common/Warray-compare-2.c: New test.", "tree": {"sha": "979400d2829948a66cb67287d39474967cadb837", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/979400d2829948a66cb67287d39474967cadb837"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dda00b734888d3b53ac91160083b5c6cd5ca5c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dda00b734888d3b53ac91160083b5c6cd5ca5c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dda00b734888d3b53ac91160083b5c6cd5ca5c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dda00b734888d3b53ac91160083b5c6cd5ca5c8/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d362b91fa655fb02a4214e28eb33b8b60a0e1ace", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d362b91fa655fb02a4214e28eb33b8b60a0e1ace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d362b91fa655fb02a4214e28eb33b8b60a0e1ace"}], "stats": {"total": 167, "additions": 164, "deletions": 3}, "files": [{"sha": "078730f1e6479a19cb0cc67ecc6412e11434e5c0", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dda00b734888d3b53ac91160083b5c6cd5ca5c8/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dda00b734888d3b53ac91160083b5c6cd5ca5c8/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=2dda00b734888d3b53ac91160083b5c6cd5ca5c8", "patch": "@@ -1421,6 +1421,7 @@ extern bool warn_for_restrict (unsigned, tree *, unsigned);\n extern void warn_for_address_or_pointer_of_packed_member (tree, tree);\n extern void warn_parm_array_mismatch (location_t, tree, tree);\n extern void maybe_warn_sizeof_array_div (location_t, tree, tree, tree, tree);\n+extern void do_warn_array_compare (location_t, tree_code, tree, tree);\n \n /* Places where an lvalue, or modifiable lvalue, may be required.\n    Used to select diagnostic messages in lvalue_error and"}, {"sha": "99cde4a2a59df99ce7982fa723c9223cd5663303", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dda00b734888d3b53ac91160083b5c6cd5ca5c8/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dda00b734888d3b53ac91160083b5c6cd5ca5c8/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=2dda00b734888d3b53ac91160083b5c6cd5ca5c8", "patch": "@@ -3726,3 +3726,35 @@ maybe_warn_sizeof_array_div (location_t loc, tree arr, tree arr_type,\n \t}\n     }\n }\n+\n+/* Warn about C++20 [depr.array.comp] array comparisons: \"Equality\n+   and relational comparisons between two operands of array type are\n+   deprecated.\"  We also warn in C and earlier C++ standards.  CODE is\n+   the code for this comparison, OP0 and OP1 are the operands.  */\n+\n+void\n+do_warn_array_compare (location_t location, tree_code code, tree op0, tree op1)\n+{\n+  STRIP_NOPS (op0);\n+  STRIP_NOPS (op1);\n+  if (TREE_CODE (op0) == ADDR_EXPR)\n+    op0 = TREE_OPERAND (op0, 0);\n+  if (TREE_CODE (op1) == ADDR_EXPR)\n+    op1 = TREE_OPERAND (op1, 0);\n+\n+  auto_diagnostic_group d;\n+  if (warning_at (location, OPT_Warray_compare,\n+\t\t  (c_dialect_cxx () && cxx_dialect >= cxx20)\n+\t\t  ? G_(\"comparison between two arrays is deprecated in C++20\")\n+\t\t  : G_(\"comparison between two arrays\")))\n+    {\n+      /* C doesn't allow +arr.  */\n+      if (c_dialect_cxx ())\n+\tinform (location, \"use unary %<+%> which decays operands to pointers \"\n+\t\t\"or %<&%D[0] %s &%D[0]%> to compare the addresses\",\n+\t\top0, op_symbol_code (code), op1);\n+      else\n+\tinform (location, \"use %<&%D[0] %s &%D[0]%> to compare the addresses\",\n+\t\top0, op_symbol_code (code), op1);\n+    }\n+}"}, {"sha": "06457ac739e4ed7deeb49b2a208dc1c84cdae360", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dda00b734888d3b53ac91160083b5c6cd5ca5c8/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dda00b734888d3b53ac91160083b5c6cd5ca5c8/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=2dda00b734888d3b53ac91160083b5c6cd5ca5c8", "patch": "@@ -350,6 +350,10 @@ Warray-bounds=\n LangEnabledBy(C ObjC C++ LTO ObjC++,Wall,1,0)\n ; in common.opt\n \n+Warray-compare\n+C ObjC C++ ObjC++ Var(warn_array_compare) Warning LangEnabledBy(C ObjC C++ ObjC++, Wall)\n+Warn about comparisons between two operands of array type.\n+\n Warray-parameter\n C ObjC C++ ObjC++ Warning Alias(Warray-parameter=, 2, 0)\n Warn about mismatched declarations of array parameters and unsafe accesses to them."}, {"sha": "f9eb0e5176f05ef93bd10e6ef141dac04769e618", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dda00b734888d3b53ac91160083b5c6cd5ca5c8/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dda00b734888d3b53ac91160083b5c6cd5ca5c8/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=2dda00b734888d3b53ac91160083b5c6cd5ca5c8", "patch": "@@ -3940,7 +3940,14 @@ parser_build_binary_op (location_t location, enum tree_code code,\n   else if (TREE_CODE_CLASS (code) == tcc_comparison\n \t   && (code1 == STRING_CST || code2 == STRING_CST))\n     warning_at (location, OPT_Waddress,\n-\t\t\"comparison with string literal results in unspecified behavior\");\n+\t\t\"comparison with string literal results in unspecified \"\n+\t\t\"behavior\");\n+\n+  if (warn_array_compare\n+      && TREE_CODE_CLASS (code) == tcc_comparison\n+      && TREE_CODE (type1) == ARRAY_TYPE\n+      && TREE_CODE (type2) == ARRAY_TYPE)\n+    do_warn_array_compare (location, code, arg1.value, arg2.value);\n \n   if (TREE_OVERFLOW_P (result.value)\n       && !TREE_OVERFLOW_P (arg1.value)"}, {"sha": "ab0f9da255231538d0973d8b7b9002f179f32106", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dda00b734888d3b53ac91160083b5c6cd5ca5c8/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dda00b734888d3b53ac91160083b5c6cd5ca5c8/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=2dda00b734888d3b53ac91160083b5c6cd5ca5c8", "patch": "@@ -5357,6 +5357,11 @@ cp_build_binary_op (const op_location_t &location,\n \t    warning_at (location, OPT_Waddress,\n \t\t\t\"comparison with string literal results in \"\n \t\t\t\"unspecified behavior\");\n+\t  else if (warn_array_compare\n+\t\t   && TREE_CODE (TREE_TYPE (orig_op0)) == ARRAY_TYPE\n+\t\t   && TREE_CODE (TREE_TYPE (orig_op1)) == ARRAY_TYPE)\n+\t    do_warn_array_compare (location, code, stripped_orig_op0,\n+\t\t\t\t   stripped_orig_op1);\n \t}\n \n       build_type = boolean_type_node;\n@@ -5629,6 +5634,14 @@ cp_build_binary_op (const op_location_t &location,\n \t\t\t\"comparison with string literal results \"\n \t\t\t\"in unspecified behavior\");\n \t}\n+      else if (warn_array_compare\n+\t       && TREE_CODE (TREE_TYPE (orig_op0)) == ARRAY_TYPE\n+\t       && TREE_CODE (TREE_TYPE (orig_op1)) == ARRAY_TYPE\n+\t       && code != SPACESHIP_EXPR\n+\t       && (complain & tf_warning))\n+\tdo_warn_array_compare (location, code,\n+\t\t\t       tree_strip_any_location_wrapper (orig_op0),\n+\t\t\t       tree_strip_any_location_wrapper (orig_op1));\n \n       if (gnu_vector_type_p (type0) && gnu_vector_type_p (type1))\n \t{"}, {"sha": "b4eaa7793b7f0411c803390670b7b23bd03051ca", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dda00b734888d3b53ac91160083b5c6cd5ca5c8/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dda00b734888d3b53ac91160083b5c6cd5ca5c8/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2dda00b734888d3b53ac91160083b5c6cd5ca5c8", "patch": "@@ -249,7 +249,8 @@ in the following sections.\n -Wcomma-subscript  -Wconditionally-supported @gol\n -Wno-conversion-null  -Wctad-maybe-unsupported @gol\n -Wctor-dtor-privacy  -Wno-delete-incomplete @gol\n--Wdelete-non-virtual-dtor  -Wdeprecated-copy -Wdeprecated-copy-dtor @gol\n+-Wdelete-non-virtual-dtor  -Wno-deprecated-array-compare @gol\n+-Wdeprecated-copy -Wdeprecated-copy-dtor @gol\n -Wno-deprecated-enum-enum-conversion -Wno-deprecated-enum-float-conversion @gol\n -Weffc++  -Wno-exceptions -Wextra-semi  -Wno-inaccessible-base @gol\n -Wno-inherited-variadic-ctor  -Wno-init-list-lifetime @gol\n@@ -323,7 +324,7 @@ Objective-C and Objective-C++ Dialects}.\n -Walloca  -Walloca-larger-than=@var{byte-size} @gol\n -Wno-aggressive-loop-optimizations @gol\n -Warith-conversion @gol\n--Warray-bounds  -Warray-bounds=@var{n} @gol\n+-Warray-bounds  -Warray-bounds=@var{n}  -Warray-compare @gol\n -Wno-attributes  -Wattribute-alias=@var{n} -Wno-attribute-alias @gol\n -Wno-attribute-warning  -Wbool-compare  -Wbool-operation @gol\n -Wno-builtin-declaration-mismatch @gol\n@@ -5562,6 +5563,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n \n @gccoptlist{-Waddress   @gol\n -Warray-bounds=1 @r{(only with} @option{-O2}@r{)}  @gol\n+-Warray-compare @gol\n -Warray-parameter=2 @r{(C and Objective-C only)} @gol\n -Wbool-compare  @gol\n -Wbool-operation  @gol\n@@ -7533,6 +7535,20 @@ pointers. This warning level may give a larger number of\n false positives and is deactivated by default.\n @end table\n \n+@item -Warray-compare\n+@opindex Warray-compare\n+@opindex Wno-array-compare\n+Warn about equality and relational comparisons between two operands of array\n+type.  This comparison was deprecated in C++20.  For example:\n+\n+@smallexample\n+int arr1[5];\n+int arr2[5];\n+bool same = arr1 == arr2;\n+@end smallexample\n+\n+@option{-Warray-compare} is enabled by @option{-Wall}.\n+\n @item -Warray-parameter\n @itemx -Warray-parameter=@var{n}\n @opindex Wno-array-parameter"}, {"sha": "922396c0a1a02699e2ead49cfcc90411c2536c6e", "filename": "gcc/testsuite/c-c++-common/Warray-compare-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dda00b734888d3b53ac91160083b5c6cd5ca5c8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-compare-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dda00b734888d3b53ac91160083b5c6cd5ca5c8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-compare-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-compare-1.c?ref=2dda00b734888d3b53ac91160083b5c6cd5ca5c8", "patch": "@@ -0,0 +1,44 @@\n+/* PR c++/97573 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+\n+#ifndef __cplusplus\n+# define bool _Bool\n+#endif\n+\n+int arr1[5];\n+int arr2[5];\n+int arr3[2][2];\n+int arr4[2][2];\n+\n+bool\n+g ()\n+{\n+  bool b = arr1 == arr2; /* { dg-warning \"comparison between two arrays\" } */\n+  b &= arr1 != arr2; /* { dg-warning \"comparison between two arrays\" } */\n+  b &= arr1 > arr2; /* { dg-warning \"comparison between two arrays\" } */\n+  b &= arr1 >= arr2; /* { dg-warning \"comparison between two arrays\" } */\n+  b &= arr1 < arr2; /* { dg-warning \"comparison between two arrays\" } */\n+  b &= arr1 <= arr2; /* { dg-warning \"comparison between two arrays\" } */\n+#ifdef __cplusplus\n+  b &= +arr1 == +arr2;\n+  b &= +arr1 != +arr2;\n+  b &= +arr1 > +arr2;\n+  b &= +arr1 >= +arr2;\n+  b &= +arr1 < +arr2;\n+  b &= +arr1 <= +arr2;\n+#endif\n+  b &= &arr1[0] == &arr2[0];\n+  b &= &arr1[0] != &arr2[0];\n+  b &= &arr1[0] > &arr2[0];\n+  b &= &arr1[0] >= &arr2[0];\n+  b &= &arr1[0] < &arr2[0];\n+  b &= &arr1[0] <= &arr2[0];\n+\n+  b &= arr3 == arr4; /* { dg-warning \"comparison between two arrays\" } */\n+\n+#if defined(__cplusplus) && __cplusplus > 201703L\n+  auto cmp = arr1 <=> arr2; /* { dg-error \"invalid operands\" \"\" { target c++20 } } */\n+#endif\n+  return b;\n+}"}, {"sha": "b3688e69b370add533078d7bbbc5ff165298b7a2", "filename": "gcc/testsuite/c-c++-common/Warray-compare-2.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dda00b734888d3b53ac91160083b5c6cd5ca5c8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-compare-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dda00b734888d3b53ac91160083b5c6cd5ca5c8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-compare-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-compare-2.c?ref=2dda00b734888d3b53ac91160083b5c6cd5ca5c8", "patch": "@@ -0,0 +1,44 @@\n+/* PR c++/97573 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -Wno-array-compare\" } */\n+\n+#ifndef __cplusplus\n+# define bool _Bool\n+#endif\n+\n+int arr1[5];\n+int arr2[5];\n+int arr3[2][2];\n+int arr4[2][2];\n+\n+bool\n+g ()\n+{\n+  bool b = arr1 == arr2; /* { dg-bogus \"comparison between two arrays\" } */\n+  b &= arr1 != arr2; /* { dg-bogus \"comparison between two arrays\" } */\n+  b &= arr1 > arr2; /* { dg-bogus \"comparison between two arrays\" } */\n+  b &= arr1 >= arr2; /* { dg-bogus \"comparison between two arrays\" } */\n+  b &= arr1 < arr2; /* { dg-bogus \"comparison between two arrays\" } */\n+  b &= arr1 <= arr2; /* { dg-bogus \"comparison between two arrays\" } */\n+#ifdef __cplusplus\n+  b &= +arr1 == +arr2;\n+  b &= +arr1 != +arr2;\n+  b &= +arr1 > +arr2;\n+  b &= +arr1 >= +arr2;\n+  b &= +arr1 < +arr2;\n+  b &= +arr1 <= +arr2;\n+#endif\n+  b &= &arr1[0] == &arr2[0];\n+  b &= &arr1[0] != &arr2[0];\n+  b &= &arr1[0] > &arr2[0];\n+  b &= &arr1[0] >= &arr2[0];\n+  b &= &arr1[0] < &arr2[0];\n+  b &= &arr1[0] <= &arr2[0];\n+\n+  b &= arr3 == arr4; /* { dg-bogus \"comparison between two arrays\" } */\n+\n+#if defined(__cplusplus) && __cplusplus > 201703L\n+  auto cmp = arr1 <=> arr2; /* { dg-error \"invalid operands\" \"\" { target c++20 } } */\n+#endif\n+  return b;\n+}"}]}