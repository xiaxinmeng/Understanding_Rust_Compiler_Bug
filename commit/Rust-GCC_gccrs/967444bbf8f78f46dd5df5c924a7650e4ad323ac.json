{"sha": "967444bbf8f78f46dd5df5c924a7650e4ad323ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY3NDQ0YmJmOGY3OGY0NmRkNWRmNWM5MjRhNzY1MGU0YWQzMjNhYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-05-21T22:01:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-05-21T22:01:29Z"}, "message": "re PR c++/48780 ([C++0x] scoped enumerations and va_arg (default argument promotions))\n\n\tPR c++/48780\n\t* cvt.c (type_promotes_to): Don't promote scoped enums.\n\nFrom-SVN: r174005", "tree": {"sha": "83ba4e68d0c082c7961e537865d4279fa9677c76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83ba4e68d0c082c7961e537865d4279fa9677c76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/967444bbf8f78f46dd5df5c924a7650e4ad323ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/967444bbf8f78f46dd5df5c924a7650e4ad323ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/967444bbf8f78f46dd5df5c924a7650e4ad323ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/967444bbf8f78f46dd5df5c924a7650e4ad323ac/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "525fe1cf88a56dbad47a1fcfee4e6bfe8dd3fbb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/525fe1cf88a56dbad47a1fcfee4e6bfe8dd3fbb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/525fe1cf88a56dbad47a1fcfee4e6bfe8dd3fbb4"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "492d25e4646c80163aef44f536cd03830f5feb12", "filename": "gcc/common.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967444bbf8f78f46dd5df5c924a7650e4ad323ac/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967444bbf8f78f46dd5df5c924a7650e4ad323ac/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=967444bbf8f78f46dd5df5c924a7650e4ad323ac", "patch": "@@ -759,6 +759,9 @@ Driver Undocumented\n ;    function parameters used in other parameters and the return type.\n ;    First selectable in G++ 4.6.\n ;\n+; 6: The version of the ABI that doesn't promote scoped enums to int.\n+;    First selectable in G++ 4.7.\n+;\n ; Additional positive integers will be assigned as new versions of\n ; the ABI become the default version of the ABI.\n fabi-version="}, {"sha": "83c43e0243e2d84099f6f960a8d52ff6ca557d45", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967444bbf8f78f46dd5df5c924a7650e4ad323ac/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967444bbf8f78f46dd5df5c924a7650e4ad323ac/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=967444bbf8f78f46dd5df5c924a7650e4ad323ac", "patch": "@@ -1,5 +1,8 @@\n 2011-05-20  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/48780\n+\t* cvt.c (type_promotes_to): Don't promote scoped enums.\n+\n \tPR c++/49066\n \t* decl.c (duplicate_decls): Preserve DECL_DELETED_FN.\n "}, {"sha": "e5d5361ac2803982f61e5b8405320237781e141a", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967444bbf8f78f46dd5df5c924a7650e4ad323ac/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967444bbf8f78f46dd5df5c924a7650e4ad323ac/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=967444bbf8f78f46dd5df5c924a7650e4ad323ac", "patch": "@@ -1616,6 +1616,10 @@ type_promotes_to (tree type)\n   if (TREE_CODE (type) == BOOLEAN_TYPE)\n     type = integer_type_node;\n \n+  /* scoped enums don't promote.  */\n+  else if (SCOPED_ENUM_P (type) && abi_version_at_least (6))\n+    ;\n+\n   /* Normally convert enums to int, but convert wide enums to something\n      wider.  */\n   else if (TREE_CODE (type) == ENUMERAL_TYPE\n@@ -1626,6 +1630,9 @@ type_promotes_to (tree type)\n       int precision = MAX (TYPE_PRECISION (type),\n \t\t\t   TYPE_PRECISION (integer_type_node));\n       tree totype = c_common_type_for_size (precision, 0);\n+      if (SCOPED_ENUM_P (type))\n+\twarning (OPT_Wabi, \"scoped enum %qT will not promote to an integral \"\n+\t\t \"type in a future version of GCC\", type);\n       if (TREE_CODE (type) == ENUMERAL_TYPE)\n \ttype = ENUM_UNDERLYING_TYPE (type);\n       if (TYPE_UNSIGNED (type)"}, {"sha": "7de8fd096a8946d9d5f7feb2452f1cbe17ab6f75", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967444bbf8f78f46dd5df5c924a7650e4ad323ac/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967444bbf8f78f46dd5df5c924a7650e4ad323ac/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=967444bbf8f78f46dd5df5c924a7650e4ad323ac", "patch": "@@ -1839,6 +1839,8 @@ Version 5 corrects the mangling of attribute const/volatile on\n function pointer types, decltype of a plain decl, and use of a\n function parameter in the declaration of another parameter.\n \n+Version 6 corrects the promotion behavior of C++0x scoped enums.\n+\n See also @option{-Wabi}.\n \n @item -fno-access-control"}, {"sha": "9cb673b143eb536c31fce546fdecb234bb988577", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967444bbf8f78f46dd5df5c924a7650e4ad323ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967444bbf8f78f46dd5df5c924a7650e4ad323ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=967444bbf8f78f46dd5df5c924a7650e4ad323ac", "patch": "@@ -1,3 +1,8 @@\n+2011-05-20  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/enum12.C: New.\n+\t* g++.dg/cpp0x/enum13.C: New.\n+\n 2011-05-21  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/48699"}, {"sha": "b2ec91990e29ac94dd5f0ecc3807cc5a49ec334e", "filename": "gcc/testsuite/g++.dg/cpp0x/enum12.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967444bbf8f78f46dd5df5c924a7650e4ad323ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967444bbf8f78f46dd5df5c924a7650e4ad323ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum12.C?ref=967444bbf8f78f46dd5df5c924a7650e4ad323ac", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/48780\n+// { dg-options \"-std=c++0x -fabi-version=0\" }\n+\n+typedef __builtin_va_list __gnuc_va_list;\n+typedef __gnuc_va_list va_list;\n+\n+enum struct A : short { X };\n+\n+void foo(int x, ...) {\n+   va_list vl;\n+   __builtin_va_start(vl, x);\n+   enum A t = __builtin_va_arg(vl, enum A);\n+   __builtin_va_end(vl);\n+}\n+\n+int main() {\n+   foo(0, A::X);\n+}"}, {"sha": "ec02d3bf60768febffe2eff197ec2a14d8aa3795", "filename": "gcc/testsuite/g++.dg/cpp0x/enum13.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967444bbf8f78f46dd5df5c924a7650e4ad323ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967444bbf8f78f46dd5df5c924a7650e4ad323ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum13.C?ref=967444bbf8f78f46dd5df5c924a7650e4ad323ac", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/48780\n+// { dg-options \"-std=c++0x -fabi-version=5 -Wabi\" }\n+\n+typedef __builtin_va_list __gnuc_va_list;\n+typedef __gnuc_va_list va_list;\n+\n+enum struct A : short { X };\n+\n+void foo(int x, ...) {\n+   va_list vl;\n+   __builtin_va_start(vl, x);\n+   enum A t = __builtin_va_arg(vl, enum A); // { dg-warning \"promote\" }\n+   __builtin_va_end(vl);\n+}\n+\n+int main() {\n+   foo(0, A::X);\t\t// { dg-warning \"will not promote\" }\n+}\n+\n+// { dg-prune-output \"note\" }"}]}