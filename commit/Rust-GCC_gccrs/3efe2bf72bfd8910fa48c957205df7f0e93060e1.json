{"sha": "3efe2bf72bfd8910fa48c957205df7f0e93060e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VmZTJiZjcyYmZkODkxMGZhNDhjOTU3MjA1ZGY3ZjBlOTMwNjBlMQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2012-01-30T16:25:11Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2012-01-30T16:25:11Z"}, "message": "re PR libstdc++/51649 (pretty printers don't handle std::__7:: namespace)\n\n\tPR libstdc++/51649:\n\t* testsuite/libstdc++-prettyprinters/debug.cc: New file.\n\t* testsuite/lib/gdb-test.exp (regexp-test): New proc.\n\t(note-test): Update.\n\t(gdb-test): Handle regexp tests.  Add some logging.\n\t* testsuite/libstdc++-prettyprinters/simple.cc: Compile with -O0.\n\t(placeholder, use): Remove.\n\t(main): Add tests for deque, list, map, and set iterators.  Add\n\ttests for slist and slist iterator.\n\t* testsuite/libstdc++-prettyprinters/48362.cc (main): Handle __7\n\tnamespace.\n\t* python/libstdcxx/v6/printers.py (StdListPrinter.children): Use\n\tthe type's _Node typedef.\n\t(StdListIteratorPrinter.to_string): Change how node type is\n\tcomputed.\n\t(StdSlistPrinter.children): Use the type's _Node typedef.\n\t(StdSlistIteratorPrinter.to_string): Likewise.\n\t(StdRbtreeIteratorPrinter.to_string): Use the type's _Link_type\n\ttypedef.\n\t(StdMapPrinter.children): Change how the node's type is computed.\n\t(StdSetPrinter.children): Likewise.\n\t(StdForwardListPrinter.children): Use the type's _Node typedef.\n\t(Printer.add_version): New method.\n\t(Printer.add_container): New method.\n\t(build_libstdcxx_dictionary): Handle __7 and __cxx1998\n\tnamespaces.\n\t(find_type): New function.\n\nFrom-SVN: r183732", "tree": {"sha": "dfa5562778e2cbd7c0ba3dc5765d3720b86193a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfa5562778e2cbd7c0ba3dc5765d3720b86193a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3efe2bf72bfd8910fa48c957205df7f0e93060e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3efe2bf72bfd8910fa48c957205df7f0e93060e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3efe2bf72bfd8910fa48c957205df7f0e93060e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3efe2bf72bfd8910fa48c957205df7f0e93060e1/comments", "author": null, "committer": null, "parents": [{"sha": "e799d447097b728213232e08fc2e807c3e5f8265", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e799d447097b728213232e08fc2e807c3e5f8265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e799d447097b728213232e08fc2e807c3e5f8265"}], "stats": {"total": 426, "additions": 297, "deletions": 129}, "files": [{"sha": "25359160ba70dda6e9de909ab8676c349af6e343", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3efe2bf72bfd8910fa48c957205df7f0e93060e1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3efe2bf72bfd8910fa48c957205df7f0e93060e1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3efe2bf72bfd8910fa48c957205df7f0e93060e1", "patch": "@@ -1,3 +1,33 @@\n+2012-01-30  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR libstdc++/51649:\n+\t* testsuite/libstdc++-prettyprinters/debug.cc: New file.\n+\t* testsuite/lib/gdb-test.exp (regexp-test): New proc.\n+\t(note-test): Update.\n+\t(gdb-test): Handle regexp tests.  Add some logging.\n+\t* testsuite/libstdc++-prettyprinters/simple.cc: Compile with -O0.\n+\t(placeholder, use): Remove.\n+\t(main): Add tests for deque, list, map, and set iterators.  Add\n+\ttests for slist and slist iterator.\n+\t* testsuite/libstdc++-prettyprinters/48362.cc (main): Handle __7\n+\tnamespace.\n+\t* python/libstdcxx/v6/printers.py (StdListPrinter.children): Use\n+\tthe type's _Node typedef.\n+\t(StdListIteratorPrinter.to_string): Change how node type is\n+\tcomputed.\n+\t(StdSlistPrinter.children): Use the type's _Node typedef.\n+\t(StdSlistIteratorPrinter.to_string): Likewise.\n+\t(StdRbtreeIteratorPrinter.to_string): Use the type's _Link_type\n+\ttypedef.\n+\t(StdMapPrinter.children): Change how the node's type is computed.\n+\t(StdSetPrinter.children): Likewise.\n+\t(StdForwardListPrinter.children): Use the type's _Node typedef.\n+\t(Printer.add_version): New method.\n+\t(Printer.add_container): New method.\n+\t(build_libstdcxx_dictionary): Handle __7 and __cxx1998\n+\tnamespaces.\n+\t(find_type): New function.\n+\n 2012-01-27  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/51795"}, {"sha": "4f34733ef460ed26ce7faaabc98b12fdb9553349", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 110, "deletions": 88, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3efe2bf72bfd8910fa48c957205df7f0e93060e1/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3efe2bf72bfd8910fa48c957205df7f0e93060e1/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=3efe2bf72bfd8910fa48c957205df7f0e93060e1", "patch": "@@ -1,6 +1,6 @@\n # Pretty-printers for libstc++.\n \n-# Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+# Copyright (C) 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -26,6 +26,25 @@\n except ImportError:\n     _use_gdb_pp = False\n \n+# Starting with the type ORIG, search for the member type NAME.  This\n+# handles searching upward through superclasses.  This is needed to\n+# work around http://sourceware.org/bugzilla/show_bug.cgi?id=13615.\n+def find_type(orig, name):\n+    typ = orig.strip_typedefs()\n+    while True:\n+        search = str(typ) + '::' + name\n+        try:\n+            return gdb.lookup_type(search)\n+        except RuntimeError:\n+            pass\n+        # The type was not found, so try the superclass.  We only need\n+        # to check the first superclass, so we don't bother with\n+        # anything fancier here.\n+        field = typ.fields()[0]\n+        if not field.is_base_class:\n+            raise ValueError, \"Cannot find type %s::%s\" % (str(orig), name)\n+        typ = field.type\n+\n class StdPointerPrinter:\n     \"Print a smart pointer of some kind\"\n \n@@ -76,15 +95,8 @@ def __init__(self, typename, val):\n         self.val = val\n \n     def children(self):\n-        itype = self.val.type.template_argument(0)\n-        # If the inferior program is compiled with -D_GLIBCXX_DEBUG\n-        # some of the internal implementation details change.\n-        if self.typename == \"std::list\":\n-            nodetype = gdb.lookup_type('std::_List_node<%s>' % itype).pointer()\n-        elif self.typename == \"std::__debug::list\":\n-            nodetype = gdb.lookup_type('std::__norm::_List_node<%s>' % itype).pointer()\n-        else:\n-            raise ValueError, \"Cannot cast list node for list printer.\"\n+        nodetype = find_type(self.val.type, '_Node')\n+        nodetype = nodetype.strip_typedefs().pointer()\n         return self._iterator(nodetype, self.val['_M_impl']['_M_node'])\n \n     def to_string(self):\n@@ -100,15 +112,8 @@ def __init__(self, typename, val):\n         self.typename = typename\n \n     def to_string(self):\n-        itype = self.val.type.template_argument(0)\n-        # If the inferior program is compiled with -D_GLIBCXX_DEBUG\n-        # some of the internal implementation details change.\n-        if self.typename == \"std::_List_iterator\" or self.typename == \"std::_List_const_iterator\":\n-            nodetype = gdb.lookup_type('std::_List_node<%s>' % itype).pointer()\n-        elif self.typename == \"std::__norm::_List_iterator\" or self.typename == \"std::__norm::_List_const_iterator\":\n-            nodetype = gdb.lookup_type('std::__norm::_List_node<%s>' % itype).pointer()\n-        else:\n-            raise ValueError, \"Cannot cast list node for list iterator printer.\"\n+        nodetype = find_type(self.val.type, '_Node')\n+        nodetype = nodetype.strip_typedefs().pointer()\n         return self.val['_M_node'].cast(nodetype).dereference()['_M_data']\n \n class StdSlistPrinter:\n@@ -136,8 +141,8 @@ def __init__(self, typename, val):\n         self.val = val\n \n     def children(self):\n-        itype = self.val.type.template_argument(0)\n-        nodetype = gdb.lookup_type('__gnu_cxx::_Slist_node<%s>' % itype).pointer()\n+        nodetype = find_type(self.val.type, '_Node')\n+        nodetype = nodetype.strip_typedefs().pointer()\n         return self._iterator(nodetype, self.val)\n \n     def to_string(self):\n@@ -152,8 +157,8 @@ def __init__(self, typename, val):\n         self.val = val\n \n     def to_string(self):\n-        itype = self.val.type.template_argument(0)\n-        nodetype = gdb.lookup_type('__gnu_cxx::_Slist_node<%s>' % itype).pointer()\n+        nodetype = find_type(self.val.type, '_Node')\n+        nodetype = nodetype.strip_typedefs().pointer()\n         return self.val['_M_node'].cast(nodetype).dereference()['_M_data']\n \n class StdVectorPrinter:\n@@ -364,9 +369,8 @@ def __init__ (self, typename, val):\n         self.val = val\n \n     def to_string (self):\n-        valuetype = self.val.type.template_argument(0)\n-        nodetype = gdb.lookup_type('std::_Rb_tree_node < %s >' % valuetype)\n-        nodetype = nodetype.pointer()\n+        typename = str(self.val.type.strip_typedefs()) + '::_Link_type'\n+        nodetype = gdb.lookup_type(typename).strip_typedefs()\n         return self.val.cast(nodetype).dereference()['_M_value_field']\n \n class StdDebugIteratorPrinter:\n@@ -415,11 +419,10 @@ def to_string (self):\n                                         len (RbtreeIterator (self.val)))\n \n     def children (self):\n-        keytype = self.val.type.template_argument(0).const()\n-        valuetype = self.val.type.template_argument(1)\n-        nodetype = gdb.lookup_type('std::_Rb_tree_node< std::pair< %s, %s > >' % (keytype, valuetype))\n-        nodetype = nodetype.pointer()\n-        return self._iter (RbtreeIterator (self.val), nodetype)\n+        rep_type = find_type(self.val.type, '_Rep_type')\n+        node = find_type(rep_type, '_Link_type')\n+        node = node.strip_typedefs()\n+        return self._iter (RbtreeIterator (self.val), node)\n \n     def display_hint (self):\n         return 'map'\n@@ -455,9 +458,10 @@ def to_string (self):\n                                         len (RbtreeIterator (self.val)))\n \n     def children (self):\n-        keytype = self.val.type.template_argument(0)\n-        nodetype = gdb.lookup_type('std::_Rb_tree_node< %s >' % keytype).pointer()\n-        return self._iter (RbtreeIterator (self.val), nodetype)\n+        rep_type = find_type(self.val.type, '_Rep_type')\n+        node = find_type(rep_type, '_Link_type')\n+        node = node.strip_typedefs()\n+        return self._iter (RbtreeIterator (self.val), node)\n \n class StdBitsetPrinter:\n     \"Print a std::bitset\"\n@@ -713,15 +717,8 @@ def __init__(self, typename, val):\n         self.typename = typename\n \n     def children(self):\n-        itype = self.val.type.template_argument(0)\n-        # If the inferior program is compiled with -D_GLIBCXX_DEBUG\n-        # some of the internal implementation details change.\n-        if self.typename == \"std::forward_list\":\n-            nodetype = gdb.lookup_type('std::_Fwd_list_node<%s>' % itype).pointer()\n-        elif self.typename == \"std::__debug::list\":\n-            nodetype = gdb.lookup_type('std::__norm::_Fwd_list_node<%s>' % itype).pointer()\n-        else:\n-            raise ValueError, \"Cannot cast forward_list node for forward_list printer.\"\n+        nodetype = find_type(self.val.type, '_Node')\n+        nodetype = nodetype.strip_typedefs().pointer()\n         return self._iterator(nodetype, self.val['_M_impl']['_M_head'])\n \n     def to_string(self):\n@@ -764,6 +761,16 @@ def add(self, name, function):\n         self.subprinters.append(printer)\n         self.lookup[name] = printer\n \n+    # Add a name using _GLIBCXX_BEGIN_NAMESPACE_VERSION.\n+    def add_version(self, base, name, function):\n+        self.add(base + name, function)\n+        self.add(base + '__7::' + name, function)\n+\n+    # Add a name using _GLIBCXX_BEGIN_NAMESPACE_CONTAINER.\n+    def add_container(self, base, name, function):\n+        self.add_version(base, name, function)\n+        self.add_version(base + '__cxx1998::', name, function)\n+\n     @staticmethod\n     def get_basic_type(type):\n         # If it points to a reference, get the reference.\n@@ -813,23 +820,29 @@ def build_libstdcxx_dictionary ():\n \n     libstdcxx_printer = Printer(\"libstdc++-v6\")\n \n+    # For _GLIBCXX_BEGIN_NAMESPACE_VERSION.\n+    vers = '(__7::)?'\n+    # For _GLIBCXX_BEGIN_NAMESPACE_CONTAINER.\n+    container = '(__cxx1998::' + vers + ')?'\n+\n     # libstdc++ objects requiring pretty-printing.\n     # In order from:\n     # http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/a01847.html\n-    libstdcxx_printer.add('std::basic_string', StdStringPrinter)\n-    libstdcxx_printer.add('std::bitset', StdBitsetPrinter)\n-    libstdcxx_printer.add('std::deque', StdDequePrinter)\n-    libstdcxx_printer.add('std::list', StdListPrinter)\n-    libstdcxx_printer.add('std::map', StdMapPrinter)\n-    libstdcxx_printer.add('std::multimap', StdMapPrinter)\n-    libstdcxx_printer.add('std::multiset', StdSetPrinter)\n-    libstdcxx_printer.add('std::priority_queue', StdStackOrQueuePrinter)\n-    libstdcxx_printer.add('std::queue', StdStackOrQueuePrinter)\n-    libstdcxx_printer.add('std::tuple', StdTuplePrinter)\n-    libstdcxx_printer.add('std::set', StdSetPrinter)\n-    libstdcxx_printer.add('std::stack', StdStackOrQueuePrinter)\n-    libstdcxx_printer.add('std::unique_ptr', UniquePointerPrinter)\n-    libstdcxx_printer.add('std::vector', StdVectorPrinter)\n+    libstdcxx_printer.add_version('std::', 'basic_string', StdStringPrinter)\n+    libstdcxx_printer.add_container('std::', 'bitset', StdBitsetPrinter)\n+    libstdcxx_printer.add_container('std::', 'deque', StdDequePrinter)\n+    libstdcxx_printer.add_container('std::', 'list', StdListPrinter)\n+    libstdcxx_printer.add_container('std::', 'map', StdMapPrinter)\n+    libstdcxx_printer.add_container('std::', 'multimap', StdMapPrinter)\n+    libstdcxx_printer.add_container('std::', 'multiset', StdSetPrinter)\n+    libstdcxx_printer.add_version('std::', 'priority_queue',\n+                                  StdStackOrQueuePrinter)\n+    libstdcxx_printer.add_version('std::', 'queue', StdStackOrQueuePrinter)\n+    libstdcxx_printer.add_version('std::', 'tuple', StdTuplePrinter)\n+    libstdcxx_printer.add_container('std::', 'set', StdSetPrinter)\n+    libstdcxx_printer.add_version('std::', 'stack', StdStackOrQueuePrinter)\n+    libstdcxx_printer.add_version('std::', 'unique_ptr', UniquePointerPrinter)\n+    libstdcxx_printer.add_container('std::', 'vector', StdVectorPrinter)\n     # vector<bool>\n \n     # Printer registrations for classes compiled with -D_GLIBCXX_DEBUG.\n@@ -849,22 +862,29 @@ def build_libstdcxx_dictionary ():\n \n     # These are the TR1 and C++0x printers.\n     # For array - the default GDB pretty-printer seems reasonable.\n-    libstdcxx_printer.add('std::shared_ptr', StdPointerPrinter)\n-    libstdcxx_printer.add('std::weak_ptr', StdPointerPrinter)\n-    libstdcxx_printer.add('std::unordered_map', Tr1UnorderedMapPrinter)\n-    libstdcxx_printer.add('std::unordered_set', Tr1UnorderedSetPrinter)\n-    libstdcxx_printer.add('std::unordered_multimap', Tr1UnorderedMapPrinter)\n-    libstdcxx_printer.add('std::unordered_multiset', Tr1UnorderedSetPrinter)\n-    libstdcxx_printer.add('std::forward_list', StdForwardListPrinter)\n-\n-    libstdcxx_printer.add('std::tr1::shared_ptr', StdPointerPrinter)\n-    libstdcxx_printer.add('std::tr1::weak_ptr', StdPointerPrinter)\n-    libstdcxx_printer.add('std::tr1::unordered_map', Tr1UnorderedMapPrinter)\n-    libstdcxx_printer.add('std::tr1::unordered_set', Tr1UnorderedSetPrinter)\n-    libstdcxx_printer.add('std::tr1::unordered_multimap',\n-                          Tr1UnorderedMapPrinter)\n-    libstdcxx_printer.add('std::tr1::unordered_multiset',\n-                          Tr1UnorderedSetPrinter)\n+    libstdcxx_printer.add_version('std::', 'shared_ptr', StdPointerPrinter)\n+    libstdcxx_printer.add_version('std::', 'weak_ptr', StdPointerPrinter)\n+    libstdcxx_printer.add_container('std::', 'unordered_map',\n+                                    Tr1UnorderedMapPrinter)\n+    libstdcxx_printer.add_container('std::', 'unordered_set',\n+                                    Tr1UnorderedSetPrinter)\n+    libstdcxx_printer.add_container('std::', 'unordered_multimap',\n+                                    Tr1UnorderedMapPrinter)\n+    libstdcxx_printer.add_container('std::', 'unordered_multiset',\n+                                    Tr1UnorderedSetPrinter)\n+    libstdcxx_printer.add_container('std::', 'forward_list',\n+                                    StdForwardListPrinter)\n+\n+    libstdcxx_printer.add_version('std::tr1::', 'shared_ptr', StdPointerPrinter)\n+    libstdcxx_printer.add_version('std::tr1::', 'weak_ptr', StdPointerPrinter)\n+    libstdcxx_printer.add_version('std::tr1::', 'unordered_map',\n+                                  Tr1UnorderedMapPrinter)\n+    libstdcxx_printer.add_version('std::tr1::', 'unordered_set',\n+                                  Tr1UnorderedSetPrinter)\n+    libstdcxx_printer.add_version('std::tr1::', 'unordered_multimap',\n+                                  Tr1UnorderedMapPrinter)\n+    libstdcxx_printer.add_version('std::tr1::', 'unordered_multiset',\n+                                  Tr1UnorderedSetPrinter)\n \n     # These are the C++0x printer registrations for -D_GLIBCXX_DEBUG cases.\n     # The tr1 namespace printers do not seem to have any debug\n@@ -882,25 +902,27 @@ def build_libstdcxx_dictionary ():\n \n \n     # Extensions.\n-    libstdcxx_printer.add('__gnu_cxx::slist', StdSlistPrinter)\n+    libstdcxx_printer.add_version('__gnu_cxx::', 'slist', StdSlistPrinter)\n \n     if True:\n         # These shouldn't be necessary, if GDB \"print *i\" worked.\n         # But it often doesn't, so here they are.\n-        libstdcxx_printer.add('std::_List_iterator', StdListIteratorPrinter)\n-        libstdcxx_printer.add('std::_List_const_iterator',\n-                              StdListIteratorPrinter)\n-        libstdcxx_printer.add('std::_Rb_tree_iterator',\n-                              StdRbtreeIteratorPrinter)\n-        libstdcxx_printer.add('std::_Rb_tree_const_iterator',\n-                              StdRbtreeIteratorPrinter)\n-        libstdcxx_printer.add('std::_Deque_iterator', StdDequeIteratorPrinter)\n-        libstdcxx_printer.add('std::_Deque_const_iterator',\n-                              StdDequeIteratorPrinter)\n-        libstdcxx_printer.add('__gnu_cxx::__normal_iterator',\n-                              StdVectorIteratorPrinter)\n-        libstdcxx_printer.add('__gnu_cxx::_Slist_iterator',\n-                              StdSlistIteratorPrinter)\n+        libstdcxx_printer.add_container('std::', '_List_iterator',\n+                                        StdListIteratorPrinter)\n+        libstdcxx_printer.add_container('std::', '_List_const_iterator',\n+                                        StdListIteratorPrinter)\n+        libstdcxx_printer.add_version('std::', '_Rb_tree_iterator',\n+                                      StdRbtreeIteratorPrinter)\n+        libstdcxx_printer.add_version('std::', '_Rb_tree_const_iterator',\n+                                      StdRbtreeIteratorPrinter)\n+        libstdcxx_printer.add_container('std::', '_Deque_iterator',\n+                                        StdDequeIteratorPrinter)\n+        libstdcxx_printer.add_container('std::', '_Deque_const_iterator',\n+                                        StdDequeIteratorPrinter)\n+        libstdcxx_printer.add_version('__gnu_cxx::', '__normal_iterator',\n+                                      StdVectorIteratorPrinter)\n+        libstdcxx_printer.add_version('__gnu_cxx::', '_Slist_iterator',\n+                                      StdSlistIteratorPrinter)\n \n         # Debug (compiled with -D_GLIBCXX_DEBUG) printer\n         # registrations.  The Rb_tree debug iterator when unwrapped"}, {"sha": "b9d4742d3939bbc270d0a1de39cbbf28edcfdad7", "filename": "libstdc++-v3/testsuite/lib/gdb-test.exp", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3efe2bf72bfd8910fa48c957205df7f0e93060e1/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fgdb-test.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3efe2bf72bfd8910fa48c957205df7f0e93060e1/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fgdb-test.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fgdb-test.exp?ref=3efe2bf72bfd8910fa48c957205df7f0e93060e1", "patch": "@@ -1,4 +1,4 @@\n-#   Copyright (C) 2009, 2011 Free Software Foundation, Inc.\n+#   Copyright (C) 2009, 2011, 2012 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -55,11 +55,20 @@ proc get_line_number {filename marker} {\n proc note-test {var result} {\n     global gdb_tests\n \n-    lappend gdb_tests $var $result\n+    lappend gdb_tests $var $result 0\n+}\n+\n+# A test that uses a regular expression.  This is like note-test, but\n+# the result is a regular expression that is matched against the\n+# output.\n+proc regexp-test {var result} {\n+    global gdb_tests\n+\n+    lappend gdb_tests $var $result 1\n }\n \n # Utility for testing variable values using gdb, invoked via dg-final.\n-# Tests all tests indicated by note-test.\n+# Tests all tests indicated by note-test and regexp-test.\n #\n # Argument 0 is the marker on which to put a breakpoint\n # Argument 2 handles expected failures and the like\n@@ -100,11 +109,12 @@ proc gdb-test { marker {selector {}} } {\n     puts $fd \"run\"\n \n     set count 0\n-    foreach {var result} $gdb_tests {\n+    foreach {var result is_regexp} $gdb_tests {\n \tputs $fd \"print $var\"\n \tincr count\n \tset gdb_var($count) $var\n \tset gdb_expected($count) $result\n+\tset gdb_is_regexp($count) $is_regexp\n     }\n     set gdb_tests {}\n \n@@ -120,9 +130,18 @@ proc gdb-test { marker {selector {}} } {\n \n     remote_expect target [timeout_value] {\n \t-re {^\\$([0-9]+) = ([^\\n\\r]*)[\\n\\r]+} {\n+\t    send_log \"got: $expect_out(buffer)\"\n+\n \t    set num $expect_out(1,string)\n \t    set first $expect_out(2,string)\n-\t    if { ![string compare $first $gdb_expected($num)] } {\n+\n+\t    if {$gdb_is_regexp($num)} {\n+\t\tset match [regexp -- $gdb_expected($num) $first]\n+\t    } else {\n+\t\tset match [expr {![string compare $first $gdb_expected($num)]}]\n+\t    }\n+\n+\t    if {$match} {\n \t\tpass \"$testname print $gdb_var($num)\"\n \t    } else {\n \t\tfail \"$testname print $gdb_var($num)\"\n@@ -145,7 +164,7 @@ proc gdb-test { marker {selector {}} } {\n \t}\n \n \t-re {^[^$][^\\n\\r]*[\\n\\r]+} {\n-\t    verbose \"skipping: $expect_out(buffer)\"\n+\t    send_log \"skipping: $expect_out(buffer)\"\n \t    exp_continue\n \t}\n "}, {"sha": "97607f1b884da5367f70d03114191cd62439c2b7", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/48362.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3efe2bf72bfd8910fa48c957205df7f0e93060e1/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2F48362.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3efe2bf72bfd8910fa48c957205df7f0e93060e1/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2F48362.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2F48362.cc?ref=3efe2bf72bfd8910fa48c957205df7f0e93060e1", "patch": "@@ -1,7 +1,7 @@\n // { dg-do run }\n // { dg-options \"-g -std=gnu++11 -O0\" }\n \n-// Copyright (C) 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,10 +25,10 @@ int\n main()\n {\n   std::tuple<> t1;\n-// { dg-final { note-test t1 {empty std::tuple} } }\n+// { dg-final { regexp-test t1 {empty std::(__7::)?tuple} } }\n \n   std::tuple<std::string, int, std::tuple<>> t2{ \"Johnny\", 5, {} };\n-// { dg-final { note-test t2 {std::tuple containing = {[1] = \"Johnny\", [2] = 5, [3] = {<std::tuple<>> = empty std::tuple, <No data fields>}}} } }\n+// { dg-final { regexp-test t2 {std::(__7::)?tuple containing = {\\[1\\] = \"Johnny\", \\[2\\] = 5, \\[3\\] = {<std::(__7::)?tuple<>> = empty std::(__7::)?tuple, <No data fields>}}} } }\n \n   return 0; // Mark SPOT\n }"}, {"sha": "bdc8eb974cf7a1ad40a23413aadc7c16651dabf4", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/debug.cc", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3efe2bf72bfd8910fa48c957205df7f0e93060e1/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3efe2bf72bfd8910fa48c957205df7f0e93060e1/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fdebug.cc?ref=3efe2bf72bfd8910fa48c957205df7f0e93060e1", "patch": "@@ -0,0 +1,92 @@\n+// { dg-do run }\n+// { dg-options \"-g -O0\" }\n+\n+// Copyright (C) 2011, 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#define _GLIBCXX_DEBUG\n+\n+#include <string>\n+#include <deque>\n+#include <bitset>\n+#include <iostream>\n+#include <list>\n+#include <map>\n+#include <set>\n+#include <ext/slist>\n+\n+int\n+main()\n+{\n+  std::string tem;\n+  std::string str = \"zardoz\";\n+// { dg-final { note-test str \"\\\"zardoz\\\"\" } }\n+\n+  std::bitset<10> bs;\n+  bs[0] = 1;\n+  bs[5] = 1;\n+  bs[7] = 1;\n+// { dg-final { note-test bs {std::__debug::bitset = {[0] = 1, [5] = 1, [7] = 1}} } }\n+\n+  std::deque<std::string> deq;\n+  deq.push_back(\"one\");\n+  deq.push_back(\"two\");\n+// { dg-final { note-test deq {std::__debug::deque with 2 elements = {\"one\", \"two\"}} } }\n+\n+  std::deque<std::string>::iterator deqiter = deq.begin();\n+// { dg-final { note-test deqiter {\"one\"} } }\n+\n+  std::list<std::string> lst;\n+  lst.push_back(\"one\");\n+  lst.push_back(\"two\");\n+// { dg-final { note-test lst {std::__debug::list = {[0] = \"one\", [1] = \"two\"}} } }\n+\n+  std::list<std::string>::iterator lstiter = lst.begin();\n+  tem = *lstiter;\n+// { dg-final { note-test lstiter {\"one\"}} }\n+\n+  std::list<std::string>::const_iterator lstciter = lst.begin();\n+  tem = *lstciter;\n+// { dg-final { note-test lstciter {\"one\"}} }\n+\n+  std::map<std::string, int> mp;\n+  mp[\"zardoz\"] = 23;\n+// { dg-final { note-test mp {std::__debug::map with 1 elements = {[\"zardoz\"] = 23}} } }\n+\n+  std::map<std::string, int>::iterator mpiter = mp.begin();\n+// { dg-final { note-test mpiter {{first = \"zardoz\", second = 23}} } }\n+\n+  std::set<std::string> sp;\n+  sp.insert(\"clownfish\");\n+  sp.insert(\"barrel\");\n+// { dg-final { note-test sp {std::__debug::set with 2 elements = {[0] = \"barrel\", [1] = \"clownfish\"}} } }\n+\n+  std::set<std::string>::const_iterator spciter = sp.begin();\n+// { dg-final { note-test spciter {\"barrel\"} } }\n+\n+  __gnu_cxx::slist<int> sll;\n+  sll.push_front(23);\n+  sll.push_front(47);\n+// { dg-final { note-test sll {__gnu_cxx::slist = {[0] = 47, [1] = 23}} } }\n+\n+  __gnu_cxx::slist<int>::iterator slliter = sll.begin();\n+// { dg-final { note-test slliter {47} } }\n+\n+  return 0;\t\t\t// Mark SPOT\n+}\n+\n+// { dg-final { gdb-test SPOT } }"}, {"sha": "09badbbfe287be61167c1a7fb42241fd13a19bce", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/simple.cc", "status": "modified", "additions": 37, "deletions": 32, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3efe2bf72bfd8910fa48c957205df7f0e93060e1/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3efe2bf72bfd8910fa48c957205df7f0e93060e1/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc?ref=3efe2bf72bfd8910fa48c957205df7f0e93060e1", "patch": "@@ -1,7 +1,9 @@\n+// If you modify this, please update debug.cc as well.\n+\n // { dg-do run }\n-// { dg-options \"-g\" }\n+// { dg-options \"-g -O0\" }\n \n-// Copyright (C) 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -24,34 +26,13 @@\n #include <iostream>\n #include <list>\n #include <map>\n-\n-template<class T>\n-void\n-placeholder(const T &s)\n-{\n-  std::cout << s;\n-}\n-\n-template<class T, class S>\n-void\n-placeholder(const std::pair<T,S> &s)\n-{\n-  std::cout << s.first;\n-}\n-\n-template<class T>\n-void\n-use(const T &container)\n-{\n-  for (typename T::const_iterator i = container.begin();\n-       i != container.end();\n-       ++i)\n-    placeholder(*i);\n-}\n+#include <set>\n+#include <ext/slist>\n \n int\n main()\n {\n+  std::string tem;\n   std::string str = \"zardoz\";\n // { dg-final { note-test str \"\\\"zardoz\\\"\" } }\n \n@@ -66,22 +47,46 @@ main()\n   deq.push_back(\"two\");\n // { dg-final { note-test deq {std::deque with 2 elements = {\"one\", \"two\"}} } }\n \n+  std::deque<std::string>::iterator deqiter = deq.begin();\n+// { dg-final { note-test deqiter {\"one\"} } }\n+\n   std::list<std::string> lst;\n   lst.push_back(\"one\");\n   lst.push_back(\"two\");\n // { dg-final { note-test lst {std::list = {[0] = \"one\", [1] = \"two\"}} } }\n \n+  std::list<std::string>::iterator lstiter = lst.begin();\n+  tem = *lstiter;\n+// { dg-final { note-test lstiter {\"one\"}} }\n+\n+  std::list<std::string>::const_iterator lstciter = lst.begin();\n+  tem = *lstciter;\n+// { dg-final { note-test lstciter {\"one\"}} }\n+\n   std::map<std::string, int> mp;\n   mp[\"zardoz\"] = 23;\n // { dg-final { note-test mp {std::map with 1 elements = {[\"zardoz\"] = 23}} } }\n \n-  placeholder(str); // Mark SPOT\n-  std::cout << bs;\n-  use(deq);\n-  use(lst);\n-  use(mp);\n+  std::map<std::string, int>::iterator mpiter = mp.begin();\n+// { dg-final { note-test mpiter {{first = \"zardoz\", second = 23}} } }\n+\n+  std::set<std::string> sp;\n+  sp.insert(\"clownfish\");\n+  sp.insert(\"barrel\");\n+// { dg-final { note-test sp {std::set with 2 elements = {[0] = \"barrel\", [1] = \"clownfish\"}} } }\n+\n+  std::set<std::string>::const_iterator spciter = sp.begin();\n+// { dg-final { note-test spciter {\"barrel\"} } }\n+\n+  __gnu_cxx::slist<int> sll;\n+  sll.push_front(23);\n+  sll.push_front(47);\n+// { dg-final { note-test sll {__gnu_cxx::slist = {[0] = 47, [1] = 23}} } }\n+\n+  __gnu_cxx::slist<int>::iterator slliter = sll.begin();\n+// { dg-final { note-test slliter {47} } }\n \n-  return 0;\n+  return 0;\t\t\t// Mark SPOT\n }\n \n // { dg-final { gdb-test SPOT } }"}]}