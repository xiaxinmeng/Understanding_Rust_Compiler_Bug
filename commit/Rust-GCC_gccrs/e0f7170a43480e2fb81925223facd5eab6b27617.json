{"sha": "e0f7170a43480e2fb81925223facd5eab6b27617", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBmNzE3MGE0MzQ4MGUyZmI4MTkyNTIyM2ZhY2Q1ZWFiNmIyNzYxNw==", "commit": {"author": {"name": "Geoff Keating", "email": "geoffk@cygnus.com", "date": "2000-09-11T06:03:02Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2000-09-11T06:03:02Z"}, "message": "sysv4.h (MASK_LONG_DOUBLE_128): Define.\n\n\t* config/rs6000/sysv4.h (MASK_LONG_DOUBLE_128): Define.\n\t(TARGET_LONG_DOUBLE_128): Define.\n\t(SUBTARGET_SWITCHES): Add -mlong-double-64 and -mlong-double-128.\n\t(LONG_DOUBLE_TYPE_SIZE): Redefine.\n\t(MAX_LONG_DOUBLE_TYPE_SIZE): Define.\n\t(LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Define depending on definition\n\tof __LONG_DOUBLE_128__.\n\t(CPP_SYSV_SPEC): Define __LONG_DOUBLE_128__ if -mlong-double-128\n\tpassed.\n\t(CPP_LONGDOUBLE_DEFAULT_SPEC): Define.\n\t(CPP_SYSV_DEFAULT_SPEC): Define.\n\t(SUBTARGET_EXTRA_SPECS): Add cpp_longdouble_default.\n\t(INIT_TARGET_OPTABS): Define.\n\nFrom-SVN: r36311", "tree": {"sha": "f307b61300aee7cba3b87692cbafc09231e39093", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f307b61300aee7cba3b87692cbafc09231e39093"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0f7170a43480e2fb81925223facd5eab6b27617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f7170a43480e2fb81925223facd5eab6b27617", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0f7170a43480e2fb81925223facd5eab6b27617", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f7170a43480e2fb81925223facd5eab6b27617/comments", "author": null, "committer": null, "parents": [{"sha": "9cb8fcaf501a9d87a7271f379f58c0579053101b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cb8fcaf501a9d87a7271f379f58c0579053101b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cb8fcaf501a9d87a7271f379f58c0579053101b"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "43f8040ab680115a930c883a04e74f6e7878d77d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f7170a43480e2fb81925223facd5eab6b27617/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f7170a43480e2fb81925223facd5eab6b27617/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0f7170a43480e2fb81925223facd5eab6b27617", "patch": "@@ -1,5 +1,19 @@\n 2000-09-10  Geoff Keating  <geoffk@cygnus.com>\n \n+\t* config/rs6000/sysv4.h (MASK_LONG_DOUBLE_128): Define.\n+\t(TARGET_LONG_DOUBLE_128): Define.\n+\t(SUBTARGET_SWITCHES): Add -mlong-double-64 and -mlong-double-128.\n+\t(LONG_DOUBLE_TYPE_SIZE): Redefine.\n+\t(MAX_LONG_DOUBLE_TYPE_SIZE): Define.\n+\t(LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Define depending on definition\n+\tof __LONG_DOUBLE_128__.\n+\t(CPP_SYSV_SPEC): Define __LONG_DOUBLE_128__ if -mlong-double-128\n+\tpassed.\n+\t(CPP_LONGDOUBLE_DEFAULT_SPEC): Define.\n+\t(CPP_SYSV_DEFAULT_SPEC): Define.\n+\t(SUBTARGET_EXTRA_SPECS): Add cpp_longdouble_default.\n+\t(INIT_TARGET_OPTABS): Define.\n+\n \t* config/rs6000/aix.h (RS6000_ITRUNC): Moved from rs6000.h.\n \t(RS6000_UITRUNC): Likewise.\n \t(INIT_TARGET_OPTABS): New macro."}, {"sha": "d8d963376a467618424a9dd8c30615f07becd32b", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f7170a43480e2fb81925223facd5eab6b27617/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f7170a43480e2fb81925223facd5eab6b27617/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=e0f7170a43480e2fb81925223facd5eab6b27617", "patch": "@@ -60,6 +60,7 @@ extern enum rs6000_sdata_type rs6000_sdata;\n #define\tMASK_LITTLE_ENDIAN\t0x04000000\t/* Target is little endian.  */\n #define\tMASK_REGNAMES\t\t0x02000000\t/* Use alternate register names.  */\n #define\tMASK_PROTOTYPE\t\t0x01000000\t/* Only prototyped fcns pass variable args.  */\n+#define MASK_LONG_DOUBLE_128\t0x00800000\t/* Use IEEE quad long double.  */\n \n #define\tTARGET_NO_BITFIELD_TYPE\t(target_flags & MASK_NO_BITFIELD_TYPE)\n #define\tTARGET_STRICT_ALIGN\t(target_flags & MASK_STRICT_ALIGN)\n@@ -68,6 +69,7 @@ extern enum rs6000_sdata_type rs6000_sdata;\n #define\tTARGET_LITTLE_ENDIAN\t(target_flags & MASK_LITTLE_ENDIAN)\n #define\tTARGET_REGNAMES\t\t(target_flags & MASK_REGNAMES)\n #define\tTARGET_PROTOTYPE\t(target_flags & MASK_PROTOTYPE)\n+#define TARGET_LONG_DOUBLE_128\t(target_flags & MASK_LONG_DOUBLE_128)\n #define\tTARGET_TOC\t\t((target_flags & MASK_64BIT)\t\t\\\n \t\t\t\t || ((target_flags & (MASK_RELOCATABLE\t\\\n \t\t\t\t\t\t      | MASK_MINIMAL_TOC)) \\\n@@ -126,6 +128,10 @@ extern int g_switch_set;\t\t/* Whether -G xx was passed.  */\n     N_(\"Produce big endian code.\") },\t\t\t\t\t\\\n   { \"big\",\t\t-MASK_LITTLE_ENDIAN,\t\t\t\t\\\n     N_(\"Produce big endian code.\") },\t\t\t\t\t\\\n+  { \"long-double-64\",\t-MASK_LONG_DOUBLE_128,\t\t\t\t\\\n+    N_(\"Use 64 bit long doubles\") },\t\t\t\t\t\\\n+  { \"long-double-128\",\t MASK_LONG_DOUBLE_128, \t\t\t\t\\\n+    N_(\"Use 128 bit long doubles\") },\t\t\t\t\t\\\n   { \"no-toc\",\t\t 0, N_(\"no description yet\") },\t\t\t\\\n   { \"toc\",\t\t MASK_MINIMAL_TOC, N_(\"no description yet\") },\t\\\n   { \"full-toc\",\t\t MASK_MINIMAL_TOC, N_(\"no description yet\") },\t\\\n@@ -350,6 +356,22 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef\tWCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE 32\n \n+/* Define for support of TFmode long double and REAL_ARITHMETIC.\n+   PowerPC SVR4 ABI says that long double is 4 words.  */\n+#undef LONG_DOUBLE_TYPE_SIZE\n+#define LONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_128 ? 128 : 64)\n+\n+/* Constant which presents upper bound of the above value.  */\n+#define MAX_LONG_DOUBLE_TYPE_SIZE 128\n+\n+/* Define this to set long double type size to use in libgcc2.c, which can\n+   not depend on target_flags.  */\n+#ifdef __LONG_DOUBLE_128__\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 128\n+#else\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n+#endif\n+\n /* Make int foo : 8 not cause structures to be aligned to an int boundary.  */\n /* Override elfos.h definition.  */\n #undef\tPCC_BITFIELD_TYPE_MATTERS\n@@ -1164,6 +1186,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n \"%{mrelocatable*: -D_RELOCATABLE} \\\n %{fpic: -D__PIC__=1 -D__pic__=1} \\\n %{!fpic: %{fPIC: -D__PIC__=2 -D__pic__=2}} \\\n+%{mlong-double-128: -D__LONG_DOUBLE_128__=1} \\\n+%{!mlong-double-64: %(cpp_longdouble_default)} \\\n %{mcall-sysv: -D_CALL_SYSV} \\\n %{mcall-aix: -D_CALL_AIX} %{mcall-aixdesc: -D_CALL_AIX -D_CALL_AIXDESC} \\\n %{!mcall-sysv: %{!mcall-aix: %{!mcall-aixdesc: %(cpp_sysv_default) }}} \\\n@@ -1181,6 +1205,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Whether floating point is disabled by default.  */\n #define\tCPP_FLOAT_DEFAULT_SPEC \"\"\n \n+/* Whether 'long double' is 128 bits by default.  */\n+#define\tCPP_LONGDOUBLE_DEFAULT_SPEC \"\"\n+\n #define\tCPP_SYSV_DEFAULT_SPEC \"-D_CALL_SYSV\"\n \n #define CPP_ENDIAN_BIG_SPEC \"-D_BIG_ENDIAN -D__BIG_ENDIAN__ -Amachine(bigendian)\"\n@@ -1494,6 +1521,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   { \"cpp_endian_little\",\tCPP_ENDIAN_LITTLE_SPEC },\t\t\\\n   { \"cpp_endian_solaris\",\tCPP_ENDIAN_SOLARIS_SPEC },\t\t\\\n   { \"cpp_float_default\",\tCPP_FLOAT_DEFAULT_SPEC },\t\t\\\n+  { \"cpp_longdouble_default\",\tCPP_LONGDOUBLE_DEFAULT_SPEC },\t\t\\\n   { \"cpp_os_ads\",\t\tCPP_OS_ADS_SPEC },\t\t\t\\\n   { \"cpp_os_yellowknife\",\tCPP_OS_YELLOWKNIFE_SPEC },\t\t\\\n   { \"cpp_os_mvme\",\t\tCPP_OS_MVME_SPEC },\t\t\t\\\n@@ -1521,3 +1549,60 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Function name to call to do profiling.  */\n #define RS6000_MCOUNT \"_mcount\"\n+\n+/* Define library calls for quad FP operations.  These are all part of the\n+   PowerPC 32bit ABI.  */\n+#define ADDTF3_LIBCALL \"_q_add\"\n+#define DIVTF3_LIBCALL \"_q_div\"\n+#define EXTENDDFTF2_LIBCALL \"_q_dtoq\"\n+#define EQTF2_LIBCALL \"_q_feq\"\n+#define GETF2_LIBCALL \"_q_fge\"\n+#define GTTF2_LIBCALL \"_q_fgt\"\n+#define LETF2_LIBCALL \"_q_fle\"\n+#define LTTF2_LIBCALL \"_q_flt\"\n+#define NETF2_LIBCALL \"_q_fne\"\n+#define FLOATSITF2_LIBCALL \"_q_itoq\"\n+#define MULTF3_LIBCALL \"_q_mul\"\n+#define NEGTF2_LIBCALL \"_q_neg\"\n+#define TRUNCTFDF2_LIBCALL \"_q_qtod\"\n+#define FIX_TRUNCTFSI2_LIBCALL \"_q_qtoi\"\n+#define TRUNCTFSF2_LIBCALL \"_q_qtos\"\n+#define FIXUNS_TRUNCTFSI2_LIBCALL \"_q_qtou\"\n+#define SQRTTF_LIBCALL \"_q_sqrt\"\n+#define EXTENDSFTF2_LIBCALL \"_q_stoq\"\n+#define SUBTF3_LIBCALL \"_q_sub\"\n+#define FLOATUNSSITF2_LIBCALL \"_q_utoq\"\n+\n+#define INIT_TARGET_OPTABS\t\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if (TARGET_HARD_FLOAT)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tadd_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n+\t  = init_one_libfunc (ADDTF3_LIBCALL);\t\t\t\t\\\n+\tsub_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n+\t  = init_one_libfunc (SUBTF3_LIBCALL);\t\t\t\t\\\n+\tneg_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n+\t  = init_one_libfunc (NEGTF2_LIBCALL);\t\t\t\t\\\n+\tsmul_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n+\t  = init_one_libfunc (MULTF3_LIBCALL);\t\t\t\t\\\n+\tflodiv_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n+\t  = init_one_libfunc (DIVTF3_LIBCALL);\t\t\t\t\\\n+\teqtf2_libfunc = init_one_libfunc (EQTF2_LIBCALL);\t\t\\\n+\tnetf2_libfunc = init_one_libfunc (NETF2_LIBCALL);\t\t\\\n+\tgttf2_libfunc = init_one_libfunc (GTTF2_LIBCALL);\t\t\\\n+\tgetf2_libfunc = init_one_libfunc (GETF2_LIBCALL);\t\t\\\n+\tlttf2_libfunc = init_one_libfunc (LTTF2_LIBCALL);\t\t\\\n+\tletf2_libfunc = init_one_libfunc (LETF2_LIBCALL);\t\t\\\n+\ttrunctfsf2_libfunc = init_one_libfunc (TRUNCTFSF2_LIBCALL);\t\\\n+\ttrunctfdf2_libfunc = init_one_libfunc (TRUNCTFDF2_LIBCALL);\t\\\n+\textendsftf2_libfunc = init_one_libfunc (EXTENDSFTF2_LIBCALL);\t\\\n+\textenddftf2_libfunc = init_one_libfunc (EXTENDDFTF2_LIBCALL);\t\\\n+\tfloatsitf_libfunc = init_one_libfunc (FLOATSITF2_LIBCALL);\t\\\n+\tfixtfsi_libfunc = init_one_libfunc (FIX_TRUNCTFSI2_LIBCALL);\t\\\n+\tfixunstfsi_libfunc\t\t\t\t\t\t\\\n+\t  = init_one_libfunc (FIXUNS_TRUNCTFSI2_LIBCALL);\t\t\\\n+\tif (TARGET_PPC_GPOPT || TARGET_POWER2) \t\t\t\t\\\n+\t  sqrt_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n+\t    = init_one_libfunc (SQRTTF_LIBCALL);\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  } while (0)"}]}