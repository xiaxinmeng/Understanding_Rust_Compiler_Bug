{"sha": "307b821c36a068b8482454c6167c71cedc53083b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA3YjgyMWMzNmEwNjhiODQ4MjQ1NGM2MTY3YzcxY2VkYzUzMDgzYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-25T18:35:27Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-25T18:35:27Z"}, "message": "(expand_expr...\n\n(expand_expr, case ARRAY_REF): Remove uses of *_type_node and simplify\nfolding a reference to a character in a STRING_CST.\n\nFrom-SVN: r6322", "tree": {"sha": "86772577778cd733606f09fd4c3f23ffec84c9a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86772577778cd733606f09fd4c3f23ffec84c9a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/307b821c36a068b8482454c6167c71cedc53083b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/307b821c36a068b8482454c6167c71cedc53083b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/307b821c36a068b8482454c6167c71cedc53083b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/307b821c36a068b8482454c6167c71cedc53083b/comments", "author": null, "committer": null, "parents": [{"sha": "43b603ea3d8457f8fe167f4d2cb9aeacb8772ffa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b603ea3d8457f8fe167f4d2cb9aeacb8772ffa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43b603ea3d8457f8fe167f4d2cb9aeacb8772ffa"}], "stats": {"total": 28, "additions": 6, "deletions": 22}, "files": [{"sha": "c0bd5dba80b163f1901a81590e5f74ae15bf9e60", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/307b821c36a068b8482454c6167c71cedc53083b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/307b821c36a068b8482454c6167c71cedc53083b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=307b821c36a068b8482454c6167c71cedc53083b", "patch": "@@ -148,7 +148,8 @@ static int fixed_type_p\t\tPROTO((tree));\n static int get_pointer_alignment PROTO((tree, unsigned));\n static tree string_constant\tPROTO((tree, tree *));\n static tree c_strlen\t\tPROTO((tree));\n-static rtx expand_builtin  PROTO((tree, rtx, rtx, enum machine_mode, int));\n+static rtx expand_builtin\tPROTO((tree, rtx, rtx,\n+\t\t\t\t       enum machine_mode, int));\n static int apply_args_size\tPROTO((void));\n static int apply_result_size\tPROTO((void));\n static rtx result_vector\tPROTO((int, rtx));\n@@ -4273,23 +4274,9 @@ expand_expr (exp, target, tmode, modifier)\n \tif (TREE_CODE (array) == STRING_CST\n \t    && TREE_CODE (index) == INTEGER_CST\n \t    && !TREE_INT_CST_HIGH (index)\n-\t    && (i = TREE_INT_CST_LOW (index)) < TREE_STRING_LENGTH (array))\n-\t  {\n-\t    if (TREE_TYPE (TREE_TYPE (array)) == integer_type_node)\n-\t      {\n-\t\texp = build_int_2 (((int *)TREE_STRING_POINTER (array))[i], 0);\n-\t\tTREE_TYPE (exp) = integer_type_node;\n-\t\treturn expand_expr (exp, target, tmode, modifier);\n-\t      }\n-\t    if (TREE_TYPE (TREE_TYPE (array)) == char_type_node)\n-\t      {\n-\t\texp = build_int_2 (TREE_STRING_POINTER (array)[i], 0);\n-\t\tTREE_TYPE (exp) = integer_type_node;\n-\t\treturn expand_expr (convert (TREE_TYPE (TREE_TYPE (array)),\n-\t\t\t\t\t     exp),\n-\t\t\t\t    target, tmode, modifier);\n-\t      }\n-\t  }\n+\t    && (i = TREE_INT_CST_LOW (index)) < TREE_STRING_LENGTH (array)\n+\t    && GET_MODE_CLASS (mode) == MODE_INT)\n+\t  return GEN_INT (TREE_STRING_POINTER (array)[i]);\n \n \t/* If this is a constant index into a constant array,\n \t   just get the value from the array.  Handle both the cases when\n@@ -4336,10 +4323,7 @@ expand_expr (exp, target, tmode, modifier)\n \t\t  }\n \t\telse if (TREE_CODE (init) == STRING_CST\n \t\t\t && i < TREE_STRING_LENGTH (init))\n-\t\t  {\n-\t\t    temp = GEN_INT (TREE_STRING_POINTER (init)[i]);\n-\t\t    return convert_to_mode (mode, temp, 0);\n-\t\t  }\n+\t\t  return GEN_INT (TREE_STRING_POINTER (init)[i]);\n \t      }\n \t  }\n       }"}]}