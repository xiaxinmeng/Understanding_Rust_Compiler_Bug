{"sha": "aa3bf45c241decb77de0d3704ca511c8c186e0d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEzYmY0NWMyNDFkZWNiNzdkZTBkMzcwNGNhNTExYzhjMTg2ZTBkMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-06-04T21:59:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-06-04T21:59:22Z"}, "message": "pt.c (value_dependent_expression_p): Avoid using an uninitialized variable.\n\n\t* pt.c (value_dependent_expression_p) [NOEXCEPT_EXPR]: Avoid\n\tusing an uninitialized variable.\n\nFrom-SVN: r160300", "tree": {"sha": "b4873371de4452369cf547609ab447f58bc6d3f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4873371de4452369cf547609ab447f58bc6d3f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa3bf45c241decb77de0d3704ca511c8c186e0d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa3bf45c241decb77de0d3704ca511c8c186e0d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa3bf45c241decb77de0d3704ca511c8c186e0d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa3bf45c241decb77de0d3704ca511c8c186e0d0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c56ba35442a83d6af897bf9a171a126f9ad3f8d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c56ba35442a83d6af897bf9a171a126f9ad3f8d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c56ba35442a83d6af897bf9a171a126f9ad3f8d9"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "a67de73c802e9a8526d3d32425344e997dd6a80b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa3bf45c241decb77de0d3704ca511c8c186e0d0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa3bf45c241decb77de0d3704ca511c8c186e0d0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aa3bf45c241decb77de0d3704ca511c8c186e0d0", "patch": "@@ -1,5 +1,8 @@\n 2010-06-04  Jason Merrill  <jason@redhat.com>\n \n+\t* pt.c (value_dependent_expression_p) [NOEXCEPT_EXPR]: Avoid\n+\tusing an uninitialized variable.\n+\n \t* cxx-pretty-print.c (pp_cxx_unary_expression): Handle NOEXCEPT_EXPR.\n \t(pp_cxx_expression): Likewise.\n "}, {"sha": "d7c03821771501958968a3e9e40fc2f1b514b314", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa3bf45c241decb77de0d3704ca511c8c186e0d0/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa3bf45c241decb77de0d3704ca511c8c186e0d0/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=aa3bf45c241decb77de0d3704ca511c8c186e0d0", "patch": "@@ -17596,9 +17596,14 @@ value_dependent_expression_p (tree expression)\n         return true;\n       else if (TYPE_P (expression))\n \treturn dependent_type_p (expression);\n-    case NOEXCEPT_EXPR:\n       return type_dependent_expression_p (expression);\n \n+    case NOEXCEPT_EXPR:\n+      expression = TREE_OPERAND (expression, 0);\n+      /* FIXME why check value-dependency?  */\n+      return (type_dependent_expression_p (expression)\n+\t      || value_dependent_expression_p (expression));\n+\n     case SCOPE_REF:\n       return dependent_scope_ref_p (expression, value_dependent_expression_p);\n "}]}