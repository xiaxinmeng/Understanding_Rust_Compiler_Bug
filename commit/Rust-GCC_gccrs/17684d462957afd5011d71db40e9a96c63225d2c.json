{"sha": "17684d462957afd5011d71db40e9a96c63225d2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc2ODRkNDYyOTU3YWZkNTAxMWQ3MWRiNDBlOWE5NmM2MzIyNWQyYw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenth@gcc.gnu.org", "date": "2005-02-09T20:58:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2005-02-09T20:58:13Z"}, "message": "re PR middle-end/19402 (__builtin_powi? still missing)\n\n2005-02-09  Richard Guenther  <rguenth@gcc.gnu.org>\n\n\tPR middle-end/19402\n\n\t* builtins.def: New __builtin_powi[lf].\n\t* builtins.c (mathfn_built_in): Handle BUILT_IN_POWI.\n\t(expand_builtin_powi): New function.\n\t(expand_builtin): Dispatch to expand_builtin_powi.\n\t* libgcc2.h: Add prototypes for __builtin_powi[lf].\n\t* libgcc2.c: Add __builtin_powi[lf] implementation.\n\t* mklibgcc.in: Add __builtin_powi[lf] to lib2funcs.\n\t* optabs.h: Add powi_optab.\n\t* optabs.c (init_optabs): Initialize powi_optab.\n\t* doc/extend.texi: Document __builtin_powi[lf].\n\n\t* gcc.dg/pr19402-1.c: New testcase.\n\t* gcc.dg/pr19402-2.c: likewise.\n\nFrom-SVN: r94774", "tree": {"sha": "347cc9d98b8029f4811e05bd8d3f3df4c5a4ced7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/347cc9d98b8029f4811e05bd8d3f3df4c5a4ced7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17684d462957afd5011d71db40e9a96c63225d2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17684d462957afd5011d71db40e9a96c63225d2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17684d462957afd5011d71db40e9a96c63225d2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17684d462957afd5011d71db40e9a96c63225d2c/comments", "author": null, "committer": null, "parents": [{"sha": "8ca3515fbe765aef349c8d6f848539bf11d3d6df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ca3515fbe765aef349c8d6f848539bf11d3d6df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ca3515fbe765aef349c8d6f848539bf11d3d6df"}], "stats": {"total": 282, "additions": 281, "deletions": 1}, "files": [{"sha": "60107b013c33c94f61728b3e62a623d4db618a04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17684d462957afd5011d71db40e9a96c63225d2c", "patch": "@@ -1,3 +1,17 @@\n+2005-02-09  Richard Guenther  <rguenth@gcc.gnu.org>\n+\n+\tPR middle-end/19402\n+\t* builtins.def: New __builtin_powi[lf].\n+\t* builtins.c (mathfn_built_in): Handle BUILT_IN_POWI.\n+\t(expand_builtin_powi): New function.\n+\t(expand_builtin): Dispatch to expand_builtin_powi.\n+\t* libgcc2.h: Add prototypes for __builtin_powi[lf].\n+\t* libgcc2.c: Add __builtin_powi[lf] implementation.\n+\t* mklibgcc.in: Add __builtin_powi[lf] to lib2funcs.\n+\t* optabs.h: Add powi_optab.\n+\t* optabs.c (init_optabs): Initialize powi_optab.\n+\t* doc/extend.texi: Document __builtin_powi[lf].\n+\n 2005-02-09  Dorit Naishlos  <dorit@il.ibm.com>\n \n \t* tree-vectorizer.c (vect_set_dump_settings): Check that dump_file "}, {"sha": "36316156c5f340a303babf54e1f9733812d1f35a", "filename": "gcc/builtins.c", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=17684d462957afd5011d71db40e9a96c63225d2c", "patch": "@@ -1563,6 +1563,7 @@ mathfn_built_in (tree type, enum built_in_function fn)\n       CASE_MATHFN (BUILT_IN_NEXTAFTER)\n       CASE_MATHFN (BUILT_IN_NEXTTOWARD)\n       CASE_MATHFN (BUILT_IN_POW)\n+      CASE_MATHFN (BUILT_IN_POWI)\n       CASE_MATHFN (BUILT_IN_POW10)\n       CASE_MATHFN (BUILT_IN_REMAINDER)\n       CASE_MATHFN (BUILT_IN_REMQUO)\n@@ -2349,6 +2350,66 @@ expand_builtin_pow (tree exp, rtx target, rtx subtarget)\n   return expand_builtin_mathfn_2 (exp, target, subtarget);\n }\n \n+/* Expand a call to the powi built-in mathematical function.  Return 0 if\n+   a normal call should be emitted rather than expanding the function\n+   in-line.  EXP is the expression that is a call to the builtin\n+   function; if convenient, the result should be placed in TARGET.  */\n+\n+static rtx\n+expand_builtin_powi (tree exp, rtx target, rtx subtarget)\n+{\n+  tree arglist = TREE_OPERAND (exp, 1);\n+  tree arg0, arg1;\n+  rtx op0, op1;\n+  enum machine_mode mode;\n+\n+  if (! validate_arglist (arglist, REAL_TYPE, INTEGER_TYPE, VOID_TYPE))\n+    return 0;\n+\n+  arg0 = TREE_VALUE (arglist);\n+  arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+  mode = TYPE_MODE (TREE_TYPE (exp));\n+\n+  /* Handle constant power.  */\n+\n+  if (TREE_CODE (arg1) == INTEGER_CST\n+      && ! TREE_CONSTANT_OVERFLOW (arg1))\n+    {\n+      HOST_WIDE_INT n = TREE_INT_CST_LOW (arg1);\n+\n+      /* If the exponent is -1, 0, 1 or 2, then expand_powi is exact.\n+\t Otherwise, check the number of multiplications required.  */\n+      if ((TREE_INT_CST_HIGH (arg1) == 0\n+\t   || TREE_INT_CST_HIGH (arg1) == -1)\n+\t  && ((n >= -1 && n <= 2)\n+\t      || (! optimize_size\n+\t\t  && powi_cost (n) <= POWI_MAX_MULTS)))\n+\t{\n+\t  op0 = expand_expr (arg0, subtarget, VOIDmode, 0);\n+\t  op0 = force_reg (mode, op0);\n+\t  return expand_powi (op0, mode, n);\n+\t}\n+    }\n+\n+  /* Emit a libcall to libgcc.  */\n+\n+  if (target == NULL_RTX)\n+    target = gen_reg_rtx (mode);\n+\n+  op0 = expand_expr (arg0, subtarget, mode, 0);\n+  if (GET_MODE (op0) != mode)\n+    op0 = convert_to_mode (mode, op0, 0);\n+  op1 = expand_expr (arg1, 0, word_mode, 0);\n+  if (GET_MODE (op1) != word_mode)\n+    op1 = convert_to_mode (word_mode, op1, 0);\n+\n+  target = emit_library_call_value (powi_optab->handlers[(int) mode].libfunc,\n+\t\t\t\t    target, LCT_CONST_MAKE_BLOCK, mode, 2,\n+\t\t\t\t    op0, mode, op1, word_mode);\n+\n+  return target;\n+}\n+\n /* Expand expression EXP which is a call to the strlen builtin.  Return 0\n    if we failed the caller should emit a normal call, otherwise\n    try to get the result in TARGET, if convenient.  */\n@@ -5186,6 +5247,14 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \treturn target;\n       break;\n \n+    case BUILT_IN_POWI:\n+    case BUILT_IN_POWIF:\n+    case BUILT_IN_POWIL:\n+      target = expand_builtin_powi (exp, target, subtarget);\n+      if (target)\n+\treturn target;\n+      break;\n+\n     case BUILT_IN_ATAN2:\n     case BUILT_IN_ATAN2F:\n     case BUILT_IN_ATAN2L:"}, {"sha": "972b6a2ee83da25520650b82457fa725d02f73c7", "filename": "gcc/builtins.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=17684d462957afd5011d71db40e9a96c63225d2c", "patch": "@@ -306,6 +306,9 @@ DEF_EXT_LIB_BUILTIN    (BUILT_IN_POW10, \"pow10\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHF\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_POW10F, \"pow10f\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_POW10L, \"pow10l\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_POWF, \"powf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_GCC_BUILTIN        (BUILT_IN_POWI, \"powi\", BT_FN_DOUBLE_DOUBLE_INT, ATTR_MATHFN_FPROUNDING)\n+DEF_GCC_BUILTIN        (BUILT_IN_POWIF, \"powif\", BT_FN_FLOAT_FLOAT_INT, ATTR_MATHFN_FPROUNDING)\n+DEF_GCC_BUILTIN        (BUILT_IN_POWIL, \"powil\", BT_FN_LONGDOUBLE_LONGDOUBLE_INT, ATTR_MATHFN_FPROUNDING)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_POWL, \"powl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_REMAINDER, \"remainder\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_REMAINDERF, \"remainderf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)"}, {"sha": "7e4d66aaa8709f5e2f2543937389c281308aea06", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=17684d462957afd5011d71db40e9a96c63225d2c", "patch": "@@ -4507,6 +4507,9 @@ identifier, or a sequence of member accesses and array references.\n @findex __builtin_islessequal\n @findex __builtin_islessgreater\n @findex __builtin_isunordered\n+@findex __builtin_powi\n+@findex __builtin_powif\n+@findex __builtin_powil\n @findex _Exit\n @findex _exit\n @findex abort\n@@ -5368,6 +5371,21 @@ Similar to @code{__builtin_parity}, except the argument type is\n @code{unsigned long long}.\n @end deftypefn\n \n+@deftypefn {Built-in Function} double __builtin_powi (double, int)\n+Returns the first argument raised to the power of the second.  Unlike the\n+@code{pow} function no guarantees about precision and rounding are made.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} float __builtin_powif (float, int)\n+Similar to @code{__builtin_powi}, except the argument and return types\n+are @code{float}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} {long double} __builtin_powil (long double, int)\n+Similar to @code{__builtin_powi}, except the argument and return types\n+are @code{long double}.\n+@end deftypefn\n+\n \n @node Target Builtins\n @section Built-in Functions Specific to Particular Target Machines"}, {"sha": "b701fcf95339291e7e843f736a8f654e4fbde688", "filename": "gcc/libgcc-std.ver", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2Flibgcc-std.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2Flibgcc-std.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc-std.ver?ref=17684d462957afd5011d71db40e9a96c63225d2c", "patch": "@@ -233,3 +233,12 @@ GCC_3.4.4 {\n   __negvti2\n   __subvti3\n }\n+\n+%inherit GCC_4.0.0 GCC_3.4.4\n+GCC_4.0.0 {\n+  # libgcc2 __builtin_powi helpers.\n+  __powisf2\n+  __powidf2\n+  __powixf2\n+  __powitf2\n+}\n\\ No newline at end of file"}, {"sha": "2d47c0d7f649c875fd491cb8b8032d741bb34d1d", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=17684d462957afd5011d71db40e9a96c63225d2c", "patch": "@@ -1463,6 +1463,42 @@ __fixunssfSI (SFtype a)\n     return (Wtype) (a + Wtype_MIN) - Wtype_MIN;\n   return (Wtype) a;\n }\n+#endif\n+\f\n+/* Integer power helper used from __builtin_powi for non-constant\n+   exponents.  */\n+\n+#if defined(L_powisf2) || defined(L_powidf2) \\\n+    || (defined(L_powixf2) && LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 80) \\\n+    || (defined(L_powitf2) && LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 128)\n+# if defined(L_powisf2)\n+#  define TYPE SFtype\n+#  define NAME __powisf2\n+# elif defined(L_powidf2)\n+#  define TYPE DFtype\n+#  define NAME __powidf2\n+# elif defined(L_powixf2)\n+#  define TYPE XFtype\n+#  define NAME __powixf2\n+# elif defined(L_powitf2)\n+#  define TYPE TFtype\n+#  define NAME __powitf2\n+# endif\n+\n+TYPE\n+NAME (TYPE x, Wtype m)\n+{\n+  UWtype n = m < 0 ? -m : m;\n+  TYPE y = n % 2 ? x : 1;\n+  while (n >>= 1)\n+    {\n+      x = x * x;\n+      if (n % 2)\n+\ty = y * x;\n+    }\n+  return m < 0 ? 1/y : y;\n+}\n+\n #endif\n \f\n /* From here on down, the routines use normal data types.  */"}, {"sha": "025dd6f5aefa9b8f1e2360a498da73cf2fa3e429", "filename": "gcc/libgcc2.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.h?ref=17684d462957afd5011d71db40e9a96c63225d2c", "patch": "@@ -305,18 +305,22 @@ extern UWtype __fixunsdfSI (DFtype);\n extern UWtype __fixunssfSI (SFtype);\n extern DWtype __fixunsdfDI (DFtype);\n extern DWtype __fixunssfDI (SFtype);\n+extern SFtype __powisf2 (SFtype, Wtype);\n+extern DFtype __powidf2 (DFtype, Wtype);\n \n #if LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 80\n extern DWtype __fixxfdi (XFtype);\n extern DWtype __fixunsxfDI (XFtype);\n extern XFtype __floatdixf (DWtype);\n extern UWtype __fixunsxfSI (XFtype);\n+extern XFtype __powixf2 (XFtype, Wtype);\n #endif\n \n #if LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 128\n extern DWtype __fixunstfDI (TFtype);\n extern DWtype __fixtfdi (TFtype);\n extern TFtype __floatditf (DWtype);\n+extern TFtype __powitf2 (TFtype, Wtype);\n #endif\n #endif /* BITS_PER_UNIT == 8 */\n "}, {"sha": "7ac1dbf24de0ad03f38e53eb16314ee9a9a2dee1", "filename": "gcc/mklibgcc.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2Fmklibgcc.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2Fmklibgcc.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmklibgcc.in?ref=17684d462957afd5011d71db40e9a96c63225d2c", "patch": "@@ -61,7 +61,8 @@ lib2funcs='_muldi3 _negdi2 _lshrdi3 _ashldi3 _ashrdi3\n \t_enable_execute_stack _trampoline __main _absvsi2 _absvdi2 _addvsi3\n \t_addvdi3 _subvsi3 _subvdi3 _mulvsi3 _mulvdi3 _negvsi2 _negvdi2 _ctors\n \t_ffssi2 _ffsdi2 _clz _clzsi2 _clzdi2 _ctzsi2 _ctzdi2 _popcount_tab\n-\t_popcountsi2 _popcountdi2 _paritysi2 _paritydi2'\n+\t_popcountsi2 _popcountdi2 _paritysi2 _paritydi2 _powisf2 _powidf2\n+\t_powixf2 _powitf2'\n \n # Disable SHLIB_LINK if shared libgcc not enabled.\n if [ \"@enable_shared@\" = \"no\" ]; then"}, {"sha": "75c78cd9b2d83c7533efb213ecdfb9f0a1449933", "filename": "gcc/optabs.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=17684d462957afd5011d71db40e9a96c63225d2c", "patch": "@@ -5049,6 +5049,8 @@ init_optabs (void)\n   vec_realign_load_optab = init_optab (UNKNOWN);\n   movmisalign_optab = init_optab (UNKNOWN);\n \n+  powi_optab = init_optab (UNKNOWN);\n+\n   /* Conversions.  */\n   sext_optab = init_convert_optab (SIGN_EXTEND);\n   zext_optab = init_convert_optab (ZERO_EXTEND);\n@@ -5135,6 +5137,8 @@ init_optabs (void)\n   init_floating_libfuncs (le_optab, \"le\", '2');\n   init_floating_libfuncs (unord_optab, \"unord\", '2');\n \n+  init_floating_libfuncs (powi_optab, \"powi\", '2');\n+\n   /* Conversions.  */\n   init_interclass_conv_libfuncs (sfloat_optab, \"float\",\n \t\t\t\t MODE_INT, MODE_FLOAT);"}, {"sha": "621136be635cfc6a3903d646c18462c0b41886db", "filename": "gcc/optabs.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=17684d462957afd5011d71db40e9a96c63225d2c", "patch": "@@ -235,6 +235,9 @@ enum optab_index\n   /* Extract specified elements from vectors, for vector load.  */\n   OTI_vec_realign_load,\n \n+  /* Perform a raise to the power of integer.  */\n+  OTI_powi,\n+\n   OTI_MAX\n };\n \n@@ -340,6 +343,8 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define vec_init_optab (optab_table[OTI_vec_init])\n #define vec_realign_load_optab (optab_table[OTI_vec_realign_load])\n \n+#define powi_optab (optab_table[OTI_powi])\n+\n /* Conversion optabs have their own table and indexes.  */\n enum convert_optab_index\n {"}, {"sha": "2cfb809faf3cc1cb2e8b58b767c2a00fa76373ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=17684d462957afd5011d71db40e9a96c63225d2c", "patch": "@@ -1,3 +1,9 @@\n+2005-02-09  Richard Guenther  <rguenth@gcc.gnu.org>\n+\n+\tPR middle-end/19402\n+\t* gcc.dg/pr19402-1.c: New testcase.\n+\t* gcc.dg/pr19402-2.c: likewise.\n+\n 2005-02-09  Richard Guenther  <rguenth@gcc.gnu.org>\n \n \tPR middle-end/19854"}, {"sha": "866ac63cb7e961bf04154df1338f8036f81a875f", "filename": "gcc/testsuite/gcc.dg/pr19402-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19402-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19402-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19402-1.c?ref=17684d462957afd5011d71db40e9a96c63225d2c", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+float test_powif(float x)\n+{\n+  return __builtin_powif(x, -1)\n+\t + __builtin_powif(x, 0)\n+\t + __builtin_powif(x, 1)\n+\t + __builtin_powif(x, 2);\n+}\n+\n+double test_powi(double x)\n+{\n+  return __builtin_powi(x, -1)\n+\t + __builtin_powi(x, 0)\n+\t + __builtin_powi(x, 1)\n+\t + __builtin_powi(x, 2);\n+}\n+\n+long double test_powil(long double x)\n+{\n+  return __builtin_powil(x, -1)\n+\t + __builtin_powil(x, 0)\n+\t + __builtin_powil(x, 1)\n+\t + __builtin_powil(x, 2);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__builtin_\" } } */\n+"}, {"sha": "1902227a6e061395e63b46561dc52eae92f22e48", "filename": "gcc/testsuite/gcc.dg/pr19402-2.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19402-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17684d462957afd5011d71db40e9a96c63225d2c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19402-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19402-2.c?ref=17684d462957afd5011d71db40e9a96c63225d2c", "patch": "@@ -0,0 +1,82 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-inline -Os\" } */\n+\n+void abort(void);\n+\n+\n+float powif(float x, int n)\n+{\n+  return __builtin_powif(x, n);\n+}\n+\n+double powi(double x, int n)\n+{\n+  return __builtin_powi(x, n);\n+}\n+\n+long double powil(long double x, int n)\n+{\n+  return __builtin_powil(x, n);\n+}\n+\n+\n+float powcif(float x)\n+{\n+  return __builtin_powif(x, 5);\n+}\n+\n+double powci(double x)\n+{\n+  return __builtin_powi(x, 5);\n+}\n+\n+long double powcil(long double x)\n+{\n+  return __builtin_powil(x, 5);\n+}\n+\n+\n+float powicf(int n)\n+{\n+  return __builtin_powif(2.0, n);\n+}\n+\n+double powic(int n)\n+{\n+  return __builtin_powi(2.0, n);\n+}\n+\n+long double powicl(int n)\n+{\n+  return __builtin_powil(2.0, n);\n+}\n+\n+\n+int main()\n+{\n+  if (__builtin_powi(1.0, 5) != 1.0)\n+    abort();\n+  if (__builtin_powif(1.0, 5) != 1.0)\n+    abort();\n+  if (__builtin_powil(1.0, 5) != 1.0)\n+    abort();\n+  if (powci(1.0) != 1.0)\n+    abort();\n+  if (powcif(1.0) != 1.0)\n+    abort();\n+  if (powcil(1.0) != 1.0)\n+    abort();\n+  if (powi(1.0, -5) != 1.0)\n+    abort();\n+  if (powif(1.0, -5) != 1.0)\n+    abort();\n+  if (powil(1.0, -5) != 1.0)\n+    abort();\n+  if (powic(1) != 2.0)\n+    abort();\n+  if (powicf(1) != 2.0)\n+    abort();\n+  if (powicl(1) != 2.0)\n+    abort();\n+  return 0;\n+}"}]}