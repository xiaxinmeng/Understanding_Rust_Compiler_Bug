{"sha": "53f2f6c1c4a55c6d700a2eb3ceaf465f7ccd81be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNmMmY2YzFjNGE1NWM2ZDcwMGEyZWIzY2VhZjQ2NWY3Y2NkODFiZQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2014-06-20T08:01:41Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2014-06-20T08:01:41Z"}, "message": "Use function_used_regs variable in collect_fn_hard_reg_usage\n\n2014-06-20  Tom de Vries  <tom@codesourcery.com>\n\n\t* final.c (collect_fn_hard_reg_usage): Add and use variable\n\tfunction_used_regs.\n\nFrom-SVN: r211839", "tree": {"sha": "d3b889b391e7318b93597464ae692d15719f2a1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3b889b391e7318b93597464ae692d15719f2a1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53f2f6c1c4a55c6d700a2eb3ceaf465f7ccd81be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53f2f6c1c4a55c6d700a2eb3ceaf465f7ccd81be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53f2f6c1c4a55c6d700a2eb3ceaf465f7ccd81be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53f2f6c1c4a55c6d700a2eb3ceaf465f7ccd81be/comments", "author": null, "committer": null, "parents": [{"sha": "569b1784fe1523adf8cbe899834a7cb7f7600bfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/569b1784fe1523adf8cbe899834a7cb7f7600bfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/569b1784fe1523adf8cbe899834a7cb7f7600bfb"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "e83b0ce18f358a5e1d4a4df423cc98a35d8f89bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53f2f6c1c4a55c6d700a2eb3ceaf465f7ccd81be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53f2f6c1c4a55c6d700a2eb3ceaf465f7ccd81be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53f2f6c1c4a55c6d700a2eb3ceaf465f7ccd81be", "patch": "@@ -1,3 +1,8 @@\n+2014-06-20  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* final.c (collect_fn_hard_reg_usage): Add and use variable\n+\tfunction_used_regs.\n+\n 2014-06-20  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* cgraph.h (struct symtab_node): Add field in_init_priority_hash"}, {"sha": "e39930d4207f2bce68e76b1aa1ec90daf0074d31", "filename": "gcc/final.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53f2f6c1c4a55c6d700a2eb3ceaf465f7ccd81be/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53f2f6c1c4a55c6d700a2eb3ceaf465f7ccd81be/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=53f2f6c1c4a55c6d700a2eb3ceaf465f7ccd81be", "patch": "@@ -4760,13 +4760,13 @@ collect_fn_hard_reg_usage (void)\n   int i;\n #endif\n   struct cgraph_rtl_info *node;\n+  HARD_REG_SET function_used_regs;\n \n   /* ??? To be removed when all the ports have been fixed.  */\n   if (!targetm.call_fusage_contains_non_callee_clobbers)\n     return;\n \n-  node = cgraph_rtl_info (current_function_decl);\n-  gcc_assert (node != NULL);\n+  CLEAR_HARD_REG_SET (function_used_regs);\n \n   for (insn = get_insns (); insn != NULL_RTX; insn = next_insn (insn))\n     {\n@@ -4779,25 +4779,26 @@ collect_fn_hard_reg_usage (void)\n \n       if (CALL_P (insn)\n \t  && !get_call_reg_set_usage (insn, &insn_used_regs, call_used_reg_set))\n-\t{\n-\t  CLEAR_HARD_REG_SET (node->function_used_regs);\n-\t  return;\n-\t}\n+\treturn;\n \n-      IOR_HARD_REG_SET (node->function_used_regs, insn_used_regs);\n+      IOR_HARD_REG_SET (function_used_regs, insn_used_regs);\n     }\n \n   /* Be conservative - mark fixed and global registers as used.  */\n-  IOR_HARD_REG_SET (node->function_used_regs, fixed_reg_set);\n+  IOR_HARD_REG_SET (function_used_regs, fixed_reg_set);\n \n #ifdef STACK_REGS\n   /* Handle STACK_REGS conservatively, since the df-framework does not\n      provide accurate information for them.  */\n \n   for (i = FIRST_STACK_REG; i <= LAST_STACK_REG; i++)\n-    SET_HARD_REG_BIT (node->function_used_regs, i);\n+    SET_HARD_REG_BIT (function_used_regs, i);\n #endif\n \n+  node = cgraph_rtl_info (current_function_decl);\n+  gcc_assert (node != NULL);\n+\n+  COPY_HARD_REG_SET (node->function_used_regs, function_used_regs);\n   node->function_used_regs_valid = 1;\n }\n "}]}