{"sha": "c74fa144ca7cc415fbbb7c3a46ec6c71c3f055ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc0ZmExNDRjYTdjYzQxNWZiYmI3YzNhNDZlYzZjNzFjM2YwNTVjYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-10-06T05:19:40Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-10-06T05:19:40Z"}, "message": "alpha.c (alpha_emit_setcc): Don't swap GT tests when second op1 is const0_rtx.\n\n        * config/alpha/alpha.c (alpha_emit_setcc): Don't swap GT tests\n        when second op1 is const0_rtx.  Validate op0 as a register.\n        * config/alpha/alpha.md (setcc_internal): Don't allow constants\n        in the first argument of the compare.\n        (setcc_swapped_internal): Likewise.\n        (setne_internal): Likewise.\n\nFrom-SVN: r36743", "tree": {"sha": "e0301d12cbe36653850c34f044438548b7d5f2a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0301d12cbe36653850c34f044438548b7d5f2a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c74fa144ca7cc415fbbb7c3a46ec6c71c3f055ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c74fa144ca7cc415fbbb7c3a46ec6c71c3f055ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c74fa144ca7cc415fbbb7c3a46ec6c71c3f055ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c74fa144ca7cc415fbbb7c3a46ec6c71c3f055ca/comments", "author": null, "committer": null, "parents": [{"sha": "c562099651d49af2777002f82e60e3ecc8125ac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c562099651d49af2777002f82e60e3ecc8125ac1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c562099651d49af2777002f82e60e3ecc8125ac1"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "b4259e8c8389e444d236d3089b0fc8eb5805713e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74fa144ca7cc415fbbb7c3a46ec6c71c3f055ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74fa144ca7cc415fbbb7c3a46ec6c71c3f055ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c74fa144ca7cc415fbbb7c3a46ec6c71c3f055ca", "patch": "@@ -1,3 +1,12 @@\n+2000-10-05  Richard Henderson  <rth@cygnus.com>\n+\n+\t* config/alpha/alpha.c (alpha_emit_setcc): Don't swap GT tests\n+\twhen second op1 is const0_rtx.  Validate op0 as a register.\n+\t* config/alpha/alpha.md (setcc_internal): Don't allow constants\n+\tin the first argument of the compare.\n+\t(setcc_swapped_internal): Likewise.\n+\t(setne_internal): Likewise.\n+\n 2000-10-05  Geoff Keating  <geoffk@cygnus.com>\n \n \t* tree.c (tree_size): New function split out of copy_node."}, {"sha": "87455423811644b33a9042e0c4fc7b85ac08a767", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74fa144ca7cc415fbbb7c3a46ec6c71c3f055ca/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74fa144ca7cc415fbbb7c3a46ec6c71c3f055ca/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=c74fa144ca7cc415fbbb7c3a46ec6c71c3f055ca", "patch": "@@ -1816,6 +1816,10 @@ alpha_emit_setcc (code)\n       break;\n \n     case GE:  case GT: case GEU:  case GTU:\n+      /* These are normally need swapping, but for integer zero we have\n+\t special patterns that recognize swapped operands.  */\n+      if (!fp_p && op1 == const0_rtx)\n+\tbreak;\n       code = swap_condition (code);\n       if (fp_p)\n \tcmp_code = code, code = NE;\n@@ -1828,7 +1832,7 @@ alpha_emit_setcc (code)\n \n   if (!fp_p)\n     {\n-      if (!reg_or_0_operand (op0, DImode))\n+      if (!register_operand (op0, DImode))\n \top0 = force_reg (DImode, op0);\n       if (!reg_or_8bit_operand (op1, DImode))\n \top1 = force_reg (DImode, op1);"}, {"sha": "d01025b4e6769f6d090cb5c3514bd77ce6de436d", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74fa144ca7cc415fbbb7c3a46ec6c71c3f055ca/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74fa144ca7cc415fbbb7c3a46ec6c71c3f055ca/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=c74fa144ca7cc415fbbb7c3a46ec6c71c3f055ca", "patch": "@@ -2523,29 +2523,34 @@\n (define_insn \"*setcc_internal\"\n   [(set (match_operand 0 \"register_operand\" \"=r\")\n \t(match_operator 1 \"alpha_comparison_operator\"\n-\t\t\t   [(match_operand:DI 2 \"reg_or_0_operand\" \"rJ\")\n+\t\t\t   [(match_operand:DI 2 \"register_operand\" \"r\")\n \t\t\t    (match_operand:DI 3 \"reg_or_8bit_operand\" \"rI\")]))]\n   \"GET_MODE_CLASS (GET_MODE (operands[0])) == MODE_INT\n    && GET_MODE_SIZE (GET_MODE (operands[0])) <= 8\n    && GET_MODE (operands[0]) == GET_MODE (operands[1])\"\n-  \"cmp%C1 %r2,%3,%0\"\n+  \"cmp%C1 %2,%3,%0\"\n   [(set_attr \"type\" \"icmp\")])\n \n+;; Yes, we can technically support reg_or_8bit_operand in operand 2,\n+;; but that's non-canonical rtl and allowing that causes inefficiencies\n+;; from cse on.\n (define_insn \"*setcc_swapped_internal\"\n   [(set (match_operand 0 \"register_operand\" \"=r\")\n         (match_operator 1 \"alpha_swapped_comparison_operator\"\n-\t\t\t   [(match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n+\t\t\t   [(match_operand:DI 2 \"register_operand\" \"r\")\n \t\t\t    (match_operand:DI 3 \"reg_or_0_operand\" \"rJ\")]))]\n   \"GET_MODE_CLASS (GET_MODE (operands[0])) == MODE_INT\n    && GET_MODE_SIZE (GET_MODE (operands[0])) <= 8\n    && GET_MODE (operands[0]) == GET_MODE (operands[1])\"\n   \"cmp%c1 %r3,%2,%0\"\n   [(set_attr \"type\" \"icmp\")])\n \n+;; Use match_operator rather than ne directly so that we can match\n+;; multiple integer modes.\n (define_insn \"*setne_internal\"\n   [(set (match_operand 0 \"register_operand\" \"=r\")\n \t(match_operator 1 \"signed_comparison_operator\"\n-\t\t\t  [(match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n+\t\t\t  [(match_operand:DI 2 \"register_operand\" \"r\")\n \t\t\t   (const_int 0)]))]\n   \"GET_MODE_CLASS (GET_MODE (operands[0])) == MODE_INT\n    && GET_MODE_SIZE (GET_MODE (operands[0])) <= 8"}]}