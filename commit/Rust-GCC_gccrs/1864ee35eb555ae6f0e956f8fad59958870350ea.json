{"sha": "1864ee35eb555ae6f0e956f8fad59958870350ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg2NGVlMzVlYjU1NWFlNmYwZTk1NmY4ZmFkNTk5NTg4NzAzNTBlYQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-10-28T05:52:52Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-10-28T05:52:52Z"}, "message": "Add support for the VIS3 addxc instruction.\n\ngcc/\n\n\t* config/sparc/sparc.md (snedi_special): Only match when not VIS3.\n\t(*snedi_zero): Likewise.\n\t(*snedi_zero_trunc): Likewise.\n\t(snedi_special_vis3): New expander.\n\t(*snedi_zero_vis3): New insn.\n\t(*snedi_zero_trunc_vis3): Likewise.\n\t(*sltu_insn_vis3): Likewise.\n\t(*sltu_insn_vis3_trunc): Likewise.\n\t(addxc): Likewise.\n\t(*addxc_trunc_sp64_vis3): Likewise.\n\t* config/sparc/sparc.c (emit_scc_insn): When VIS3 use the\n\tgen_snedi_special_vis3 expander, and try GTU/LTU addx based\n\tsequences on DImode values.\n\ngcc/testsuite/\n\n\t* gcc.target/sparc/setcc-3.c: New test.\n\nFrom-SVN: r180602", "tree": {"sha": "282fd8d8aa553ae2b1dd8e3b41ec72721586aee8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/282fd8d8aa553ae2b1dd8e3b41ec72721586aee8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1864ee35eb555ae6f0e956f8fad59958870350ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1864ee35eb555ae6f0e956f8fad59958870350ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1864ee35eb555ae6f0e956f8fad59958870350ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1864ee35eb555ae6f0e956f8fad59958870350ea/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0a940828f6dce12ae6e9b3e5c7317c086682974d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a940828f6dce12ae6e9b3e5c7317c086682974d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a940828f6dce12ae6e9b3e5c7317c086682974d"}], "stats": {"total": 112, "additions": 104, "deletions": 8}, "files": [{"sha": "420e188b91edc373e52a29dc1946005405373a91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1864ee35eb555ae6f0e956f8fad59958870350ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1864ee35eb555ae6f0e956f8fad59958870350ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1864ee35eb555ae6f0e956f8fad59958870350ea", "patch": "@@ -1,5 +1,19 @@\n 2011-10-27  David S. Miller  <davem@davemloft.net>\n \n+\t* config/sparc/sparc.md (snedi_special): Only match when not VIS3.\n+\t(*snedi_zero): Likewise.\n+\t(*snedi_zero_trunc): Likewise.\n+\t(snedi_special_vis3): New expander.\n+\t(*snedi_zero_vis3): New insn.\n+\t(*snedi_zero_trunc_vis3): Likewise.\n+\t(*sltu_insn_vis3): Likewise.\n+\t(*sltu_insn_vis3_trunc): Likewise.\n+\t(addxc): Likewise.\n+\t(*addxc_trunc_sp64_vis3): Likewise.\n+\t* config/sparc/sparc.c (emit_scc_insn): When VIS3 use the\n+\tgen_snedi_special_vis3 expander, and try GTU/LTU addx based\n+\tsequences on DImode values.\n+\n \t* config/sparc/sparc.md (64-bit vector moves): Use 'e' not 'f'\n \tconstraint.\n "}, {"sha": "3883dbd21d863eadfa9a918f81a18cb144f07f5a", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1864ee35eb555ae6f0e956f8fad59958870350ea/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1864ee35eb555ae6f0e956f8fad59958870350ea/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=1864ee35eb555ae6f0e956f8fad59958870350ea", "patch": "@@ -2519,7 +2519,7 @@ emit_scc_insn (rtx operands[])\n         }\n       else if (GET_MODE (x) == DImode)\n         {\n-          rtx pat = gen_seqdi_special (operands[0], x, y);\n+\t  rtx pat = gen_seqdi_special (operands[0], x, y);\n           emit_insn (pat);\n           return true;\n         }\n@@ -2535,14 +2535,21 @@ emit_scc_insn (rtx operands[])\n         }\n       else if (GET_MODE (x) == DImode)\n         {\n-          rtx pat = gen_snedi_special (operands[0], x, y);\n+\t  rtx pat;\n+\t  if (TARGET_VIS3)\n+\t    pat = gen_snedi_special_vis3 (operands[0], x, y);\n+\t  else\n+\t    pat = gen_snedi_special (operands[0], x, y);\n           emit_insn (pat);\n           return true;\n         }\n     }\n \n   if (TARGET_V9\n+      && TARGET_ARCH64\n       && GET_MODE (x) == DImode\n+      && !(TARGET_VIS3\n+\t   && (code == GTU || code == LTU))\n       && gen_v9_scc (operands[0], code, x, y))\n     return true;\n \n@@ -2561,7 +2568,8 @@ emit_scc_insn (rtx operands[])\n         }\n     }\n \n-  if (code == LTU || code == GEU)\n+  if (code == LTU\n+      || (!TARGET_VIS3 && code == GEU))\n     {\n       emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n \t\t\t      gen_rtx_fmt_ee (code, SImode,"}, {"sha": "6dd390952c39aa6008694552d634f952c0a92e69", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 75, "deletions": 5, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1864ee35eb555ae6f0e956f8fad59958870350ea/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1864ee35eb555ae6f0e956f8fad59958870350ea/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=1864ee35eb555ae6f0e956f8fad59958870350ea", "patch": "@@ -656,7 +656,17 @@\n \t\t(match_operand:DI 2 \"register_operand\" \"\")))\n    (set (match_operand:SI 0 \"register_operand\" \"\")\n \t(ne:SI (match_dup 3) (const_int 0)))]\n-  \"TARGET_ARCH64\"\n+  \"TARGET_ARCH64 && ! TARGET_VIS3\"\n+  { operands[3] = gen_reg_rtx (DImode); })\n+\n+(define_expand \"snedi_special_vis3\"\n+  [(set (match_dup 3)\n+\t(xor:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t(match_operand:DI 2 \"register_operand\" \"\")))\n+   (parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t\t   (ne:SI (match_dup 3) (const_int 0)))\n+\t      (clobber (reg:CCX CC_REG))])]\n+  \"TARGET_ARCH64 && TARGET_VIS3\"\n   { operands[3] = gen_reg_rtx (DImode); })\n \n \n@@ -733,7 +743,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n         (ne:DI (match_operand:DI 1 \"register_operand\" \"r\")\n                (const_int 0)))]\n-  \"TARGET_ARCH64\"\n+  \"TARGET_ARCH64 && ! TARGET_VIS3\"\n   \"#\"\n   \"&& ! reg_overlap_mentioned_p (operands[1], operands[0])\"\n   [(set (match_dup 0) (const_int 0))\n@@ -744,6 +754,20 @@\n   \"\"\n   [(set_attr \"length\" \"2\")])\n \n+(define_insn_and_split \"*snedi_zero_vis3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(ne:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t       (const_int 0)))\n+   (clobber (reg:CCX CC_REG))]\n+  \"TARGET_ARCH64 && TARGET_VIS3\"\n+  \"#\"\n+  \"\"\n+  [(set (reg:CCX_NOOV CC_REG) (compare:CCX_NOOV (neg:DI (match_dup 1))\n+\t\t\t\t\t        (const_int 0)))\n+   (set (match_dup 0) (ltu:DI (reg:CCX CC_REG) (const_int 0)))]\n+  \"\"\n+  [(set_attr \"length\" \"2\")])\n+\n (define_insn_and_split \"*neg_snedi_zero\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n         (neg:DI (ne:DI (match_operand:DI 1 \"register_operand\" \"r\")\n@@ -763,7 +787,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n         (ne:SI (match_operand:DI 1 \"register_operand\" \"r\")\n                (const_int 0)))]\n-  \"TARGET_ARCH64\"\n+  \"TARGET_ARCH64 && ! TARGET_VIS3\"\n   \"#\"\n   \"&& ! reg_overlap_mentioned_p (operands[1], operands[0])\"\n   [(set (match_dup 0) (const_int 0))\n@@ -774,6 +798,20 @@\n   \"\"\n   [(set_attr \"length\" \"2\")])\n \n+(define_insn_and_split \"*snedi_zero_trunc_vis3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ne:SI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t       (const_int 0)))\n+   (clobber (reg:CCX CC_REG))]\n+  \"TARGET_ARCH64 && TARGET_VIS3\"\n+  \"#\"\n+  \"\"\n+  [(set (reg:CCX_NOOV CC_REG) (compare:CCX_NOOV (neg:DI (match_dup 1))\n+\t\t\t\t\t        (const_int 0)))\n+   (set (match_dup 0) (ltu:SI (reg:CCX CC_REG) (const_int 0)))]\n+  \"\"\n+  [(set_attr \"length\" \"2\")])\n+\n (define_insn_and_split \"*seqsi_zero\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(eq:SI (match_operand:SI 1 \"register_operand\" \"r\")\n@@ -959,6 +997,20 @@\n   \"addx\\t%%g0, 0, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n \n+(define_insn \"*sltu_insn_vis3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(ltu:DI (reg:CCX CC_REG) (const_int 0)))]\n+  \"TARGET_ARCH64 && TARGET_VIS3\"\n+  \"addxc\\t%%g0, %%g0, %0\"\n+  [(set_attr \"type\" \"ialuX\")])\n+\n+(define_insn \"*sltu_insn_vis3_trunc\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ltu:SI (reg:CCX CC_REG) (const_int 0)))]\n+  \"TARGET_ARCH64 && TARGET_VIS3\"\n+  \"addxc\\t%%g0, %%g0, %0\"\n+  [(set_attr \"type\" \"ialuX\")])\n+\n (define_insn \"*sltu_extend_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ltu:DI (reg:CC CC_REG) (const_int 0)))]\n@@ -3543,6 +3595,15 @@\n   \"addx\\t%1, %2, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n \n+(define_insn \"addxc\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(plus:DI (plus:DI (match_operand:DI 1 \"register_or_zero_operand\" \"%rJ\")\n+\t\t\t  (match_operand:DI 2 \"register_or_zero_operand\" \"rJ\"))\n+\t\t (ltu:DI (reg:CCX_NOOV CC_REG) (const_int 0))))]\n+  \"TARGET_ARCH64 && TARGET_VIS3\"\n+  \"addxc\\t%r1, %r2, %0\"\n+  [(set_attr \"type\" \"ialuX\")])\n+\n (define_insn_and_split \"*addx_extend_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (plus:SI (plus:SI\n@@ -3562,10 +3623,19 @@\n (define_insn \"*addx_extend_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (plus:SI (plus:SI (match_operand:SI 1 \"register_or_zero_operand\" \"%rJ\")\n-                                          (match_operand:SI 2 \"arith_operand\" \"rI\"))\n+                                          (match_operand:SI 2 \"register_or_zero_operand\" \"rJ\"))\n                                  (ltu:SI (reg:CC_NOOV CC_REG) (const_int 0)))))]\n   \"TARGET_ARCH64\"\n-  \"addx\\t%r1, %2, %0\"\n+  \"addx\\t%r1, %r2, %0\"\n+  [(set_attr \"type\" \"ialuX\")])\n+\n+(define_insn \"*addxc_trunc_sp64_vis3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(plus:SI (plus:SI (match_operand:SI 1 \"register_or_zero_operand\" \"%rJ\")\n+                          (match_operand:SI 2 \"register_or_zero_operand\" \"rJ\"))\n+                 (ltu:SI (reg:CCX_NOOV CC_REG) (const_int 0))))]\n+  \"TARGET_ARCH64 && TARGET_VIS3\"\n+  \"addxc\\t%r1, %r2, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n \n (define_insn_and_split \"*adddi3_extend_sp32\""}, {"sha": "9ef38fc4c0b6a47dfd5406155d79f9ab37d9aa84", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1864ee35eb555ae6f0e956f8fad59958870350ea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1864ee35eb555ae6f0e956f8fad59958870350ea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1864ee35eb555ae6f0e956f8fad59958870350ea", "patch": "@@ -1,3 +1,7 @@\n+2011-10-27  David S. Miller  <davem@davemloft.net>\n+\n+\t* gcc.target/sparc/setcc-3.c: New test.\n+\n 2011-10-27  Roberto Agostino Vitillo  <ravitillo@lbl.gov>\n \n \tPR c++/30066"}]}