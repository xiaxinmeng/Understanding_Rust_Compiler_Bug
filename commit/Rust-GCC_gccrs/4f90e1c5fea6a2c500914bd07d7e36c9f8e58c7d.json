{"sha": "4f90e1c5fea6a2c500914bd07d7e36c9f8e58c7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY5MGUxYzVmZWE2YTJjNTAwOTE0YmQwN2Q3ZTM2YzlmOGU1OGM3ZA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-01-28T19:37:59Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-01-28T19:37:59Z"}, "message": "2004-01-28  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/swing/JComponent.java\n\t(listenerList): Initalize globally.\n\t(ancestor_list): Removed.\n\t(veto_list): Removed.\n\t(change_list): Removed.\n\t(get_veto_list): Removed.\n\t(get_change_list): Removed.\n\t(get_ancestor_list): Removed.\n\t(removeAncestorListener): Reimplemented.\n\t(removePropertyChangeListener): Likewise.\n\t(removeVetoableChangeListener): Likewise.\n\t(addAncestorListener): Likewise.\n\t(addPropertyChangeListener): Likewise.\n\t(addVetoableChangeListener): Likewise.\n\t(getListeners): New method.\n\t(getAncestorListeners): Likewise.\n\t(getVetoableChangeListeners): Likewise.\n\t(fireVetoableChange): Throws PropertyVetoException.\n\t* javax/swing/JEditorPane.java\n\t(JEditorPane): Throws IOException.\n\nFrom-SVN: r76802", "tree": {"sha": "27201615d0c2de5785d1dfc7099980f45164c6ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27201615d0c2de5785d1dfc7099980f45164c6ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f90e1c5fea6a2c500914bd07d7e36c9f8e58c7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f90e1c5fea6a2c500914bd07d7e36c9f8e58c7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f90e1c5fea6a2c500914bd07d7e36c9f8e58c7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f90e1c5fea6a2c500914bd07d7e36c9f8e58c7d/comments", "author": null, "committer": null, "parents": [{"sha": "685fe0325cddc64776cc8e6c504ef40b35c846e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/685fe0325cddc64776cc8e6c504ef40b35c846e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/685fe0325cddc64776cc8e6c504ef40b35c846e0"}], "stats": {"total": 178, "additions": 127, "deletions": 51}, "files": [{"sha": "9d68cb8066993d73f520e8d65bf81fa60ec1b74a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f90e1c5fea6a2c500914bd07d7e36c9f8e58c7d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f90e1c5fea6a2c500914bd07d7e36c9f8e58c7d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=4f90e1c5fea6a2c500914bd07d7e36c9f8e58c7d", "patch": "@@ -1,3 +1,26 @@\n+2004-01-28  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/swing/JComponent.java\n+\t(listenerList): Initalize globally.\n+\t(ancestor_list): Removed.\n+\t(veto_list): Removed.\n+\t(change_list): Removed.\n+\t(get_veto_list): Removed.\n+\t(get_change_list): Removed.\n+\t(get_ancestor_list): Removed.\n+\t(removeAncestorListener): Reimplemented.\n+\t(removePropertyChangeListener): Likewise.\n+\t(removeVetoableChangeListener): Likewise.\n+\t(addAncestorListener): Likewise.\n+\t(addPropertyChangeListener): Likewise.\n+\t(addVetoableChangeListener): Likewise.\n+\t(getListeners): New method.\n+\t(getAncestorListeners): Likewise.\n+\t(getVetoableChangeListeners): Likewise.\n+\t(fireVetoableChange): Throws PropertyVetoException.\n+\t* javax/swing/JEditorPane.java\n+\t(JEditorPane): Throws IOException.\n+\n 2004-01-28  David Jee  <djee@redhat.com>\n \n \t* gnu/java/awt/peer/gtk/GtkFramePeer.java"}, {"sha": "fa41951973a2c59d802f0a81b6915a3a6f35217c", "filename": "libjava/javax/swing/JComponent.java", "status": "modified", "additions": 100, "deletions": 50, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f90e1c5fea6a2c500914bd07d7e36c9f8e58c7d/libjava%2Fjavax%2Fswing%2FJComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f90e1c5fea6a2c500914bd07d7e36c9f8e58c7d/libjava%2Fjavax%2Fswing%2FJComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJComponent.java?ref=4f90e1c5fea6a2c500914bd07d7e36c9f8e58c7d", "patch": "@@ -1,5 +1,5 @@\n /* JComponent.java -- Every component in swing inherits from this class.\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -63,8 +63,9 @@\n import java.beans.PropertyVetoException;\n import java.beans.VetoableChangeListener;\n import java.io.Serializable;\n-import java.util.Vector;\n+import java.util.EventListener;\n import java.util.Hashtable;\n+import java.util.Vector;\n import javax.accessibility.Accessible;\n import javax.accessibility.AccessibleContext;\n import javax.accessibility.AccessibleExtendedComponent;\n@@ -86,6 +87,9 @@\n public abstract class JComponent extends Container implements Serializable\n {\n   static final long serialVersionUID = -5242478962609715464L;\n+\n+  protected EventListenerList listenerList = new EventListenerList();\n+\n         /**\n          * accessibleContext\n          */\n@@ -98,9 +102,6 @@ public abstract class JComponent extends Container implements Serializable\n \tboolean use_double_buffer, opaque;\n \tprotected ComponentUI ui;\n \n-\tVector ancestor_list;\n-\tVector veto_list;\n-\tVector change_list;\n \tHashtable prop_hash;\n \n \t/**\n@@ -273,16 +274,12 @@ public JComponent()\n \t\tsuper();\n \t\tsuper.setLayout(new FlowLayout());\n \t\t\n-\t\tlistenerList = new EventListenerList();\n-    \n \t\t//eventMask |= AWTEvent.COMP_KEY_EVENT_MASK;\n \t\t// enableEvents( AWTEvent.KEY_EVENT_MASK );\n \n \t\t//updateUI(); // get a proper ui\n \t}\n \n-\tprotected EventListenerList listenerList;\n-\n \tpublic boolean contains(int x, int y)\n \t{\n \t\t//return dims.contains(x,y);\n@@ -301,54 +298,106 @@ Hashtable get_prop_hash()\n \t\t\tprop_hash = new Hashtable();\n \t\treturn prop_hash;\n \t}\n-\tpublic Vector get_veto_list()\n-\t{\n-\t\tif (veto_list == null)\n-\t\t\tveto_list = new Vector();\n-\t\treturn veto_list;\n-\t}\n-\tpublic Vector get_change_list()\n-\t{\n-\t\tif (change_list == null)\n-\t\t\tchange_list = new Vector();\n-\t\treturn change_list;\n-\t}\n-\tpublic Vector get_ancestor_list()\n-\t{\n-\t\tif (ancestor_list == null)\n-\t\t\tancestor_list = new Vector();\n-\t\treturn ancestor_list;\n-\t}\n \n \tpublic Object getClientProperty(Object key)\n         {\treturn get_prop_hash().get(key);    }\n \n \tpublic void putClientProperty(Object key, Object value)\n \t{    get_prop_hash().put(key, value);   }\n \n-\tpublic void removeAncestorListener(AncestorListener listener)\n-\t{  get_ancestor_list().removeElement(listener);  }\n-\n-        public void removePropertyChangeListener(PropertyChangeListener listener)\n-\t{  get_change_list().removeElement(listener);   }\n-\n-\tpublic void removePropertyChangeListener(String propertyName, PropertyChangeListener listener)\n-\t{  /* FIXME */   get_change_list().removeElement(listener);   }\n-\n-\tpublic void removeVetoableChangeListener(VetoableChangeListener listener)\n-\t{  get_veto_list().removeElement(listener);   }\n-\n-\tpublic void addAncestorListener(AncestorListener listener)\n-\t{   get_ancestor_list().addElement(listener);  }\n-\n-\tpublic void addPropertyChangeListener(PropertyChangeListener listener)\n-\t{  get_change_list().addElement(listener);   }\n-\n-\tpublic void addPropertyChangeListener(String propertyName, PropertyChangeListener listener)\n-\t{ /* FIXME */ get_change_list().addElement(listener);   }\n-\n-\tpublic void addVetoableChangeListener(VetoableChangeListener listener)\n-\t{  get_veto_list().addElement(listener);    }\n+  /**\n+   * Unregister an <code>AncestorListener</code>.\n+   */\n+  public void removeAncestorListener(AncestorListener listener)\n+  {\n+    listenerList.remove(AncestorListener.class, listener);\n+  }\n+\n+  /**\n+   * Unregister a <code>PropertyChangeListener</code>.\n+   */\n+  public void removePropertyChangeListener(PropertyChangeListener listener)\n+  {\n+    listenerList.remove(PropertyChangeListener.class, listener);\n+  }\n+\n+  /**\n+   * Unregister a <code>PropertyChangeListener</code>.\n+   */\n+  public void removePropertyChangeListener(String propertyName, PropertyChangeListener listener)\n+  {\n+    listenerList.remove(PropertyChangeListener.class, listener);\n+  }\n+\n+  /**\n+   * Unregister a <code>VetoableChangeChangeListener</code>.\n+   */\n+  public void removeVetoableChangeListener(VetoableChangeListener listener)\n+  {\n+    listenerList.remove(VetoableChangeListener.class, listener);\n+  }\n+\n+  /**\n+   * Register an <code>AncestorListener</code>.\n+   */\n+  public void addAncestorListener(AncestorListener listener)\n+  {\n+    listenerList.add(AncestorListener.class, listener);\n+  }\n+\n+  /**\n+   * Register a <code>PropertyChangeListener</code>.\n+   */\n+  public void addPropertyChangeListener(PropertyChangeListener listener)\n+  {\n+    listenerList.add(PropertyChangeListener.class, listener);\n+  }\n+\n+  /**\n+   * Register a <code>PropertyChangeListener</code>.\n+   */\n+  public void addPropertyChangeListener(String propertyName, PropertyChangeListener listener)\n+  {\n+    listenerList.add(PropertyChangeListener.class, listener);\n+  }\n+\n+  /**\n+   * Register a <code>VetoableChangeListener</code>.\n+   */\n+  public void addVetoableChangeListener(VetoableChangeListener listener)\n+  {\n+    listenerList.add(VetoableChangeListener.class, listener);\n+  }\n+\n+  /**\n+   * Return all registered listeners of a special type.\n+   * \n+   * @since 1.3\n+   */\n+  public EventListener[] getListeners (Class listenerType)\n+  {\n+    return listenerList.getListeners (listenerType);\n+  }\n+  \n+  /**\n+   * Return all registered <code>Ancestor</code> objects.\n+   * \n+   * @since 1.4\n+   */\n+  public AncestorListener[] getAncestorListeners()\n+  {\n+    return (AncestorListener[]) getListeners (AncestorListener.class);\n+  }\n+\n+  /**\n+   * Return all registered <code>VetoableChangeListener</code> objects.\n+   * \n+   * @since 1.4\n+   */\n+  public VetoableChangeListener[] getVetoableChangeListeners()\n+  {\n+    return (VetoableChangeListener[]) getListeners (VetoableChangeListener.class);\n+  }\n \n \tpublic void computeVisibleRect(Rectangle rect)\n \t{\n@@ -397,6 +446,7 @@ public void firePropertyChange(String propertyName, short oldValue, short newVal\n \t}\n \n \tprotected  void fireVetoableChange(String propertyName, Object oldValue, Object newValue)\n+          throws PropertyVetoException\n \t{\n \t\t//       Support for reporting constrained property changes.\n \t}"}, {"sha": "ecc4eb0e24e9861c12a67046ac500c6abfe60785", "filename": "libjava/javax/swing/JEditorPane.java", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f90e1c5fea6a2c500914bd07d7e36c9f8e58c7d/libjava%2Fjavax%2Fswing%2FJEditorPane.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f90e1c5fea6a2c500914bd07d7e36c9f8e58c7d/libjava%2Fjavax%2Fswing%2FJEditorPane.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJEditorPane.java?ref=4f90e1c5fea6a2c500914bd07d7e36c9f8e58c7d", "patch": "@@ -1,5 +1,5 @@\n /* JEditorPane.java -- \n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -41,6 +41,7 @@\n import java.awt.Dimension;\n import java.awt.event.KeyEvent;\n import java.io.InputStream;\n+import java.io.IOException;\n import java.net.URL;\n import javax.accessibility.AccessibleContext;\n import javax.swing.text.EditorKit;\n@@ -63,6 +64,7 @@ public JEditorPane()\n     }\n \n     public JEditorPane(String url)\n+      throws IOException\n     {\n \tthis();\n \tsetPage(url);\n@@ -75,6 +77,7 @@ public JEditorPane(String type, String text)\n     }\n     \n     public JEditorPane(URL url)\n+      throws IOException\n     {\n \tsetPage(url);\n     }"}]}