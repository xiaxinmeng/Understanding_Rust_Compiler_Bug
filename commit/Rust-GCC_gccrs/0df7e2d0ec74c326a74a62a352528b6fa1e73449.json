{"sha": "0df7e2d0ec74c326a74a62a352528b6fa1e73449", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRmN2UyZDBlYzc0YzMyNmE3NGE2MmEzNTI1MjhiNmZhMWU3MzQ0OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-02-17T13:59:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-02-17T13:59:28Z"}, "message": "[multiple changes]\n\n2012-02-17  Yannick Moy  <moy@adacore.com>\n\n\t* gnat_ugn.texi: Fix typos.\n\n2012-02-17  Pascal Obry  <obry@adacore.com>\n\n\t* prj-nmsc.adb: prj-nmsc.adb (Check_Aggregated): Check that an\n\taggregate is not Externally_Built.\n\n2012-02-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_aggr.adb (Resolve_Record_Aggregate): If a composite\n\tcomponent has a box association, copy the default value using\n\tthe current scope as the scope of internal types, to prevent\n\tscoping anomalies in gigi.\n\nFrom-SVN: r184337", "tree": {"sha": "893b14bf61354dd5157543d3b881c13dcb3103b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/893b14bf61354dd5157543d3b881c13dcb3103b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0df7e2d0ec74c326a74a62a352528b6fa1e73449", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df7e2d0ec74c326a74a62a352528b6fa1e73449", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0df7e2d0ec74c326a74a62a352528b6fa1e73449", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df7e2d0ec74c326a74a62a352528b6fa1e73449/comments", "author": null, "committer": null, "parents": [{"sha": "260359e35de7fcc0d7746cdc3983857fba1b9f7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/260359e35de7fcc0d7746cdc3983857fba1b9f7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/260359e35de7fcc0d7746cdc3983857fba1b9f7a"}], "stats": {"total": 103, "additions": 89, "deletions": 14}, "files": [{"sha": "5f1aae8baca3086b613ed47c99944d9119a605e6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df7e2d0ec74c326a74a62a352528b6fa1e73449/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df7e2d0ec74c326a74a62a352528b6fa1e73449/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0df7e2d0ec74c326a74a62a352528b6fa1e73449", "patch": "@@ -1,3 +1,19 @@\n+2012-02-17  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat_ugn.texi: Fix typos.\n+\n+2012-02-17  Pascal Obry  <obry@adacore.com>\n+\n+\t* prj-nmsc.adb: prj-nmsc.adb (Check_Aggregated): Check that an\n+\taggregate is not Externally_Built.\n+\n+2012-02-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Record_Aggregate): If a composite\n+\tcomponent has a box association, copy the default value using\n+\tthe current scope as the scope of internal types, to prevent\n+\tscoping anomalies in gigi.\n+\n 2012-02-17  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_dim.adb, sem_dim.ads, s-tasren.adb, prj.adb, prj.ads, freeze.adb,"}, {"sha": "c9951b78b0e298a3e47562be3c90bdd07841b419", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df7e2d0ec74c326a74a62a352528b6fa1e73449/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df7e2d0ec74c326a74a62a352528b6fa1e73449/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=0df7e2d0ec74c326a74a62a352528b6fa1e73449", "patch": "@@ -18009,9 +18009,11 @@ switch or by the corresponding attribute in the project file.\n \n @item filename\n is the name of the source file containing the library unit package declaration\n-for which a test package will be created. The file name may given with a path.\n+for which a test package will be created. The file name may be given with a\n+path.\n \n-@item @samp{@var{gcc_switches}} is a list of switches for\n+@item @samp{@var{gcc_switches}}\n+is a list of switches for\n @command{gcc}. These switches will be passed on to all compiler invocations\n made by @command{gnatstub} to generate a set of ASIS trees. Here you can provide\n @option{^-I^/INCLUDE_DIRS=^} switches to form the source search path,\n@@ -18027,7 +18029,7 @@ is an optional sequence of switches as described in the next section.\n @command{gnattest} results can be found in two different places.\n \n @itemize @bullet\n-@item automatic harness\n+@item automatic harness:\n the harness code, which is located either in the harness-dir as specified on\n the command line or in the project file. All of this code is generated\n completely automatically and can be destroyed and regenerated at will. It is not\n@@ -18044,7 +18046,7 @@ test_runner\n Note that you might need to specify the necessary values of scenario variables\n when you are not using the AUnit defaults.\n \n-@item actual unit test stubs\n+@item actual unit test stubs:\n a test stub for each visible subprogram is created in a separate file, if it\n doesn't exist already. By default, those separate test files are located in a\n \"tests\" directory that is created in the directory containing the source file\n@@ -18053,10 +18055,10 @@ source, option @option{--separate-root} can be used. For example, if a source\n file my_unit.ads in directory src contains a visible subprogram Proc, then\n the corresponding unit test will be found in file\n src/tests/my_unit-tests-proc_<code>.adb. <code> is a signature encoding used to\n-differentiate test names in cases of overloading.\n+differentiate test names in case of overloading.\n \n-Note that if the project already has both my_unit.ads and my_unit-tests.ads this\n-will cause name a conflict with generated test package.\n+Note that if the project already has both my_unit.ads and my_unit-tests.ads,\n+this will cause a name conflict with the generated test package.\n @end itemize\n \n @node Switches for gnattest"}, {"sha": "2b65c15d4b59aa8bb2331836b91002055aa27b03", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 57, "deletions": 6, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df7e2d0ec74c326a74a62a352528b6fa1e73449/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df7e2d0ec74c326a74a62a352528b6fa1e73449/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=0df7e2d0ec74c326a74a62a352528b6fa1e73449", "patch": "@@ -8172,6 +8172,14 @@ package body Prj.Nmsc is\n          --  Check the aggregate project attributes, reject any not supported\n          --  attributes.\n \n+         procedure Check_Aggregated\n+           (Project : Project_Id;\n+            Data    : in out Tree_Processing_Data);\n+         --  Check aggregated projets which should not be externally built.\n+         --  What is Data??? if same as outer Data, why passed???\n+         --  What exact check is performed here??? Seems a bad idea to have\n+         --  two procedures with such close names ???\n+\n          ---------------------\n          -- Check_Aggregate --\n          ---------------------\n@@ -8180,7 +8188,6 @@ package body Prj.Nmsc is\n            (Project : Project_Id;\n             Data    : in out Tree_Processing_Data)\n          is\n-\n             procedure Check_Not_Defined (Name : Name_Id);\n             --  Report an error if Var is defined\n \n@@ -8203,6 +8210,8 @@ package body Prj.Nmsc is\n                end if;\n             end Check_Not_Defined;\n \n+         --  Start of processing for Check_Aggregate\n+\n          begin\n             Check_Not_Defined (Snames.Name_Library_Dir);\n             Check_Not_Defined (Snames.Name_Library_Interface);\n@@ -8216,6 +8225,43 @@ package body Prj.Nmsc is\n             Check_Not_Defined (Snames.Name_Library_Version);\n          end Check_Aggregate;\n \n+         ----------------------\n+         -- Check_Aggregated --\n+         ----------------------\n+\n+         procedure Check_Aggregated\n+           (Project : Project_Id;\n+            Data    : in out Tree_Processing_Data)\n+         is\n+            L : Aggregated_Project_List;\n+\n+         begin\n+            --  Check that aggregated projects are not externally built\n+\n+            L := Project.Aggregated_Projects;\n+            while L /= null loop\n+               declare\n+                  Var : constant Prj.Variable_Value :=\n+                          Prj.Util.Value_Of\n+                            (Snames.Name_Externally_Built,\n+                             L.Project.Decl.Attributes,\n+                             Data.Tree.Shared);\n+               begin\n+                  if not Var.Default then\n+                     Error_Msg_Name_1 := L.Project.Display_Name;\n+                     Error_Msg\n+                       (Data.Flags,\n+                        \"cannot aggregate externally build library %%\",\n+                        Var.Location, Project);\n+                  end if;\n+               end;\n+\n+               L := L.Next;\n+            end loop;\n+         end Check_Aggregated;\n+\n+         --  Local Variables\n+\n          Shared   : constant Shared_Project_Tree_Data_Access :=\n                       Data.Tree.Shared;\n          Prj_Data : Project_Processing_Data;\n@@ -8231,9 +8277,11 @@ package body Prj.Nmsc is\n \n          case Project.Qualifier is\n             when Aggregate =>\n-               null;\n+               Check_Aggregated (Project, Data);\n \n             when Aggregate_Library =>\n+               Check_Aggregated (Project, Data);\n+\n                if Project.Object_Directory = No_Path_Information then\n                   Project.Object_Directory := Project.Directory;\n                end if;\n@@ -8251,10 +8299,9 @@ package body Prj.Nmsc is\n                end if;\n          end case;\n \n-         --  Check configuration. This must be done even for gnatmake (even\n-         --  though no user configuration file was provided) since the default\n-         --  config we generate indicates whether libraries are supported for\n-         --  instance.\n+         --  Check configuration. Must be done for gnatmake (even though no\n+         --  user configuration file was provided) since the default config we\n+         --  generate indicates whether libraries are supported for instance.\n \n          Check_Configuration (Project, Data);\n \n@@ -8318,6 +8365,9 @@ package body Prj.Nmsc is\n \n       procedure Check_All_Projects is new For_Every_Project_Imported_Context\n         (Tree_Processing_Data, Recursive_Check);\n+      --  Comment required???\n+\n+      --  Local Variables\n \n       Data : Tree_Processing_Data;\n \n@@ -8342,6 +8392,7 @@ package body Prj.Nmsc is\n          List := Tree.Projects;\n          while List /= null loop\n             Proj := List.Project;\n+\n             Exte := Proj;\n             while Exte.Extended_By /= No_Project loop\n                Exte := Exte.Extended_By;"}, {"sha": "1b7822c348c732cbd19ae6cc2d8ce16643d7ca03", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df7e2d0ec74c326a74a62a352528b6fa1e73449/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df7e2d0ec74c326a74a62a352528b6fa1e73449/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=0df7e2d0ec74c326a74a62a352528b6fa1e73449", "patch": "@@ -3896,7 +3896,12 @@ package body Sem_Aggr is\n \n             begin\n                --  If there is a default expression for the aggregate, copy\n-               --  it into a new association.\n+               --  it into a new association. This copy must modify the scopes\n+               --  of internal types that may be attached to the expression\n+               --  (e.g. index subtypes of arrays) because in general the type\n+               --  declaration and the aggregate appear in different scopes,\n+               --  and the backend requires the scope of the type to match the\n+               --  point at which it is elaborated.\n \n                --  If the component has an initialization procedure (IP) we\n                --  pass the component to the expander, which will generate\n@@ -3916,6 +3921,7 @@ package body Sem_Aggr is\n                then\n                   Expr :=\n                     New_Copy_Tree (Expression (Parent (Component)),\n+                     New_Scope => Current_Scope,\n                       New_Sloc => Sloc (N));\n \n                   Add_Association"}]}