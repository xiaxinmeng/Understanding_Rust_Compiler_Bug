{"sha": "692a4bf88c5a4743bb5dca47b59a73a83add0fae", "node_id": "C_kwDOANBUbNoAKDY5MmE0YmY4OGM1YTQ3NDNiYjVkY2E0N2I1OWE3M2E4M2FkZDBmYWU", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-01-07T23:48:58Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-09T09:27:33Z"}, "message": "[Ada] Fix internal error on declaration of derived discriminated record type\n\nWhen the parent type has a variant part and the derived type is also\ndiscriminated but statically selects a variant, the initialization\nroutine of the derived type may attempt to access components of other\nvariants that are no longer present.\n\ngcc/ada/\n\n\t* exp_ch4.adb (Handle_Changed_Representation): Simplify and fix\n\tthinko in the loop building the constraints for discriminants.\n\t* exp_ch5.adb (Make_Component_List_Assign): Try also to extract\n\tdiscriminant values for a derived type.", "tree": {"sha": "3bfbdb3694aedbd0611e0b435c7882f81e457533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bfbdb3694aedbd0611e0b435c7882f81e457533"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/692a4bf88c5a4743bb5dca47b59a73a83add0fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/692a4bf88c5a4743bb5dca47b59a73a83add0fae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/692a4bf88c5a4743bb5dca47b59a73a83add0fae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/692a4bf88c5a4743bb5dca47b59a73a83add0fae/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5081e9205a6f12c41bdd5a7d630a732120fb4e92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5081e9205a6f12c41bdd5a7d630a732120fb4e92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5081e9205a6f12c41bdd5a7d630a732120fb4e92"}], "stats": {"total": 84, "additions": 46, "deletions": 38}, "files": [{"sha": "09e734defb29af603fe97470ff761696a3246240", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/692a4bf88c5a4743bb5dca47b59a73a83add0fae/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/692a4bf88c5a4743bb5dca47b59a73a83add0fae/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=692a4bf88c5a4743bb5dca47b59a73a83add0fae", "patch": "@@ -11745,31 +11745,24 @@ package body Exp_Ch4 is\n                   declare\n                      Stored : constant Elist_Id :=\n                                 Stored_Constraint (Operand_Type);\n-\n-                     Elmt : Elmt_Id;\n+                     --  Stored constraints of the operand. If present, they\n+                     --  correspond to the discriminants of the parent type.\n \n                      Disc_O : Entity_Id;\n                      --  Discriminant of the operand type. Its value in the\n                      --  object is captured in a selected component.\n \n-                     Disc_S : Entity_Id;\n-                     --  Stored discriminant of the operand. If present, it\n-                     --  corresponds to a constrained discriminant of the\n-                     --  parent type.\n-\n                      Disc_T : Entity_Id;\n                      --  Discriminant of the target type\n \n+                     Elmt : Elmt_Id;\n+\n                   begin\n-                     Disc_T := First_Discriminant (Target_Type);\n                      Disc_O := First_Discriminant (Operand_Type);\n-                     Disc_S := First_Stored_Discriminant (Operand_Type);\n-\n-                     if Present (Stored) then\n-                        Elmt := First_Elmt (Stored);\n-                     else\n-                        Elmt := No_Elmt; -- init to avoid warning\n-                     end if;\n+                     Disc_T := First_Discriminant (Target_Type);\n+                     Elmt   := (if Present (Stored)\n+                                 then First_Elmt (Stored)\n+                                 else No_Elmt);\n \n                      Cons := New_List;\n                      while Present (Disc_T) loop\n@@ -11784,8 +11777,11 @@ package body Exp_Ch4 is\n                                  Make_Identifier (Loc, Chars (Disc_O))));\n                            Next_Discriminant (Disc_O);\n \n-                        elsif Present (Disc_S) then\n+                        elsif Present (Elmt) then\n                            Append_To (Cons, New_Copy_Tree (Node (Elmt)));\n+                        end if;\n+\n+                        if Present (Elmt) then\n                            Next_Elmt (Elmt);\n                         end if;\n "}, {"sha": "710db666e8d31f3b191a74c4b46605a4c1a61a52", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/692a4bf88c5a4743bb5dca47b59a73a83add0fae/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/692a4bf88c5a4743bb5dca47b59a73a83add0fae/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=692a4bf88c5a4743bb5dca47b59a73a83add0fae", "patch": "@@ -1848,27 +1848,14 @@ package body Exp_Ch5 is\n             CI : constant List_Id := Component_Items (CL);\n             VP : constant Node_Id := Variant_Part (CL);\n \n-            Constrained_Typ : Entity_Id;\n-            Alts            : List_Id;\n-            DC              : Node_Id;\n-            DCH             : List_Id;\n-            Expr            : Node_Id;\n-            Result          : List_Id;\n-            V               : Node_Id;\n+            Alts   : List_Id;\n+            DC     : Node_Id;\n+            DCH    : List_Id;\n+            Expr   : Node_Id;\n+            Result : List_Id;\n+            V      : Node_Id;\n \n          begin\n-            --  Try to find a constrained type to extract discriminant values\n-            --  from, so that the case statement built below gets an\n-            --  opportunity to be folded by Expand_N_Case_Statement.\n-\n-            if U_U or else Is_Constrained (Etype (Rhs)) then\n-               Constrained_Typ := Etype (Rhs);\n-            elsif Is_Constrained (Etype (Expression (N))) then\n-               Constrained_Typ := Etype (Expression (N));\n-            else\n-               Constrained_Typ := Empty;\n-            end if;\n-\n             Result := Make_Field_Assigns (CI);\n \n             if Present (VP) then\n@@ -1890,13 +1877,38 @@ package body Exp_Ch5 is\n                   Next_Non_Pragma (V);\n                end loop;\n \n-               if Present (Constrained_Typ) then\n+               --  Try to find a constrained type or a derived type to extract\n+               --  discriminant values from, so that the case statement built\n+               --  below can be folded by Expand_N_Case_Statement.\n+\n+               if U_U or else Is_Constrained (Etype (Rhs)) then\n+                  Expr :=\n+                    New_Copy (Get_Discriminant_Value (\n+                      Entity (Name (VP)),\n+                      Etype (Rhs),\n+                      Discriminant_Constraint (Etype (Rhs))));\n+\n+               elsif Is_Constrained (Etype (Expression (N))) then\n                   Expr :=\n                     New_Copy (Get_Discriminant_Value (\n                       Entity (Name (VP)),\n-                      Constrained_Typ,\n-                      Discriminant_Constraint (Constrained_Typ)));\n+                      Etype (Expression (N)),\n+                      Discriminant_Constraint (Etype (Expression (N)))));\n+\n+               elsif Is_Derived_Type (Etype (Rhs))\n+                 and then Present (Stored_Constraint (Etype (Rhs)))\n+               then\n+                  Expr :=\n+                    New_Copy (Get_Discriminant_Value (\n+                      Corresponding_Record_Component (Entity (Name (VP))),\n+                      Etype (Etype (Rhs)),\n+                      Stored_Constraint (Etype (Rhs))));\n+\n                else\n+                  Expr := Empty;\n+               end if;\n+\n+               if No (Expr) or else not Compile_Time_Known_Value (Expr) then\n                   Expr :=\n                     Make_Selected_Component (Loc,\n                       Prefix        => Duplicate_Subexpr (Rhs),"}]}