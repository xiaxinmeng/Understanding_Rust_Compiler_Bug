{"sha": "8a411aa322e7ed9835670266e0ea39a22e05c71e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE0MTFhYTMyMmU3ZWQ5ODM1NjcwMjY2ZTBlYTM5YTIyZTA1YzcxZQ==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2017-09-13T14:24:23Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2017-09-13T14:24:23Z"}, "message": "fold-vec-ld-char.c: New.\n\n[gcc/testsuite]\n    \n2017-09-12  Will Schmidt  <will_schmidt@vnet.ibm.com>\n    \n        * gcc.target/powerpc/fold-vec-ld-char.c: New.\n        * gcc.target/powerpc/fold-vec-ld-double.c: New.\n        * gcc.target/powerpc/fold-vec-ld-float.c: New.\n        * gcc.target/powerpc/fold-vec-ld-int.c: New.\n        * gcc.target/powerpc/fold-vec-ld-longlong.c: New.\n        * gcc.target/powerpc/fold-vec-ld-short.c: New.\n\nFrom-SVN: r252087", "tree": {"sha": "0c03fb07a94cd1c251765521a32f6e7568a33350", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c03fb07a94cd1c251765521a32f6e7568a33350"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a411aa322e7ed9835670266e0ea39a22e05c71e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a411aa322e7ed9835670266e0ea39a22e05c71e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a411aa322e7ed9835670266e0ea39a22e05c71e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a411aa322e7ed9835670266e0ea39a22e05c71e/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1cb656f82c5d03ce40495bbe59111ac3cc26b713", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb656f82c5d03ce40495bbe59111ac3cc26b713", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cb656f82c5d03ce40495bbe59111ac3cc26b713"}], "stats": {"total": 328, "additions": 328, "deletions": 0}, "files": [{"sha": "2091f98c11a10d54549f953bc89eb206f99c614c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a411aa322e7ed9835670266e0ea39a22e05c71e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a411aa322e7ed9835670266e0ea39a22e05c71e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a411aa322e7ed9835670266e0ea39a22e05c71e", "patch": "@@ -1,3 +1,12 @@\n+2017-09-13  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fold-vec-ld-char.c: New.\n+\t* gcc.target/powerpc/fold-vec-ld-double.c: New.\n+\t* gcc.target/powerpc/fold-vec-ld-float.c: New.\n+\t* gcc.target/powerpc/fold-vec-ld-int.c: New.\n+\t* gcc.target/powerpc/fold-vec-ld-longlong.c: New.\n+\t* gcc.target/powerpc/fold-vec-ld-short.c: New.\n+\n 2017-09-13  Jackson Woodruff  <jackson.woodruff@arm.com>\n \n \t* gcc.target/aarch64/pr62178.c: Updated testcase"}, {"sha": "f9ef3e0a2fe9dc495583dacdc501e9753b17fa38", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-ld-char.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a411aa322e7ed9835670266e0ea39a22e05c71e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-ld-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a411aa322e7ed9835670266e0ea39a22e05c71e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-ld-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-ld-char.c?ref=8a411aa322e7ed9835670266e0ea39a22e05c71e", "patch": "@@ -0,0 +1,71 @@\n+/* Verify that overloaded built-ins for vec_ld* with char\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector signed char\n+testld_sc_vsc (long long ll1, vector signed char vsc2)\n+{\n+  return vec_ld (ll1, &vsc2);\n+}\n+\n+vector signed char\n+testld_sc_sc (long long ll1, signed char sc)\n+{\n+  return vec_ld (ll1, &sc);\n+}\n+\n+vector unsigned char\n+testld_uc_vuc (long long ll1, vector unsigned char vuc2)\n+{\n+  return vec_ld (ll1, &vuc2);\n+}\n+\n+vector unsigned char\n+testld_uc_uc (long long ll1, unsigned char uc)\n+{\n+  return vec_ld (ll1, &uc);\n+}\n+\n+vector bool char\n+testld_bc_vbc (long long ll1, vector bool char vbc2)\n+{\n+  return vec_ld (ll1, &vbc2);\n+}\n+\n+vector signed char\n+testld_cst_vsc (vector signed char vsc2)\n+{\n+  return vec_ld (16, &vsc2);\n+}\n+\n+vector signed char\n+testld_cst_sc (signed char sc)\n+{\n+  return vec_ld (32, &sc);\n+}\n+\n+vector unsigned char\n+testld_cst_vuc (vector unsigned char vuc2)\n+{\n+  return vec_ld (48, &vuc2);\n+}\n+\n+vector unsigned char\n+testld_cst_uc (unsigned char uc)\n+{\n+  return vec_ld (64, &uc);\n+}\n+\n+vector bool char\n+testld_cst_vbc (vector bool char vbc2)\n+{\n+  return vec_ld (80, &vbc2);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvd2x\\M|\\mlxvw4x\\M}  10 } } */\n+"}, {"sha": "9c6fbb23f24e01fe80e94dbbfa2344386df867b5", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-ld-double.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a411aa322e7ed9835670266e0ea39a22e05c71e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-ld-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a411aa322e7ed9835670266e0ea39a22e05c71e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-ld-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-ld-double.c?ref=8a411aa322e7ed9835670266e0ea39a22e05c71e", "patch": "@@ -0,0 +1,22 @@\n+/* Verify that overloaded built-ins for vec_ld with \n+   double inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector double\n+testld_ll_vd (long long ll1, vector double vd)\n+{\n+  return vec_ld (ll1, &vd);\n+}\n+\n+vector double\n+testld_cst_vd (long long ll1, vector double vd)\n+{\n+  return vec_ld (16, &vd);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvd2x\\M} 2 } } */"}, {"sha": "eca847ac11585d679dd87af058e07b1b143841f5", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-ld-float.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a411aa322e7ed9835670266e0ea39a22e05c71e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-ld-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a411aa322e7ed9835670266e0ea39a22e05c71e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-ld-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-ld-float.c?ref=8a411aa322e7ed9835670266e0ea39a22e05c71e", "patch": "@@ -0,0 +1,37 @@\n+/* Verify that overloaded built-ins for vec_ld with float\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector float\n+testld_ll_vf (long long ll1, vector float vf2)\n+{\n+  return vec_ld (ll1, &vf2);\n+}\n+\n+vector float\n+testld_ll_f (long long ll1, float f2)\n+{\n+  return vec_ld (ll1, &f2);\n+}\n+\n+vector float\n+testld_cst_vf (vector float vf2)\n+{\n+  return vec_ld (16, &vf2);\n+}\n+\n+vector float\n+testld_cst_f (float f2)\n+{\n+  return vec_ld (16, &f2);\n+}\n+\n+// lvx - generated by ll_vf and ll_f\n+// lxvd2x - generated by cst_vf and cst_f\n+/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvd2x\\M} 4 } } */\n+"}, {"sha": "5dc6df67c1b1d85db58fb06aa8e83d2ec9102a6f", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-ld-int.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a411aa322e7ed9835670266e0ea39a22e05c71e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-ld-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a411aa322e7ed9835670266e0ea39a22e05c71e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-ld-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-ld-int.c?ref=8a411aa322e7ed9835670266e0ea39a22e05c71e", "patch": "@@ -0,0 +1,71 @@\n+/* Verify that overloaded built-ins for vec_ld* with int\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector signed int\n+testld_vsi_vsi (long long ll1, vector signed int vsi2)\n+{\n+  return vec_ld (ll1, &vsi2);\n+}\n+\n+vector signed int\n+testld_vsi_si (long long ll1, signed int si)\n+{\n+  return vec_ld (ll1, &si);\n+}\n+\n+vector unsigned int\n+testld_vui_vui (long long ll1, vector unsigned int vui2)\n+{\n+  return vec_ld (ll1, &vui2);\n+}\n+\n+vector unsigned int\n+testld_vui_ui (long long ll1, unsigned int ui)\n+{\n+  return vec_ld (ll1, &ui);\n+}\n+\n+vector bool int\n+testld_vbi_vbi (long long ll1, vector bool int vbi2)\n+{\n+  return vec_ld (ll1, &vbi2);\n+}\n+\n+vector signed int\n+testld_cst_vsi (vector signed int vsi2)\n+{\n+  return vec_ld (16, &vsi2);\n+}\n+\n+vector signed int\n+testld_cst_si (signed int si)\n+{\n+  return vec_ld (32, &si);\n+}\n+\n+vector unsigned int\n+testld_cst_vui (vector unsigned int vui2)\n+{\n+  return vec_ld (48, &vui2);\n+}\n+\n+vector unsigned int\n+testld_cst_ui (unsigned int ui)\n+{\n+  return vec_ld (64, &ui);\n+}\n+\n+vector bool int\n+testld_cst_vbi (vector bool int vbi2)\n+{\n+  return vec_ld (80, &vbi2);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvd2x\\M|\\mlxvw4x\\M} 10 } } */\n+"}, {"sha": "37941af7b26d495f0a082ac3f7319e2ea43e1149", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-ld-longlong.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a411aa322e7ed9835670266e0ea39a22e05c71e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-ld-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a411aa322e7ed9835670266e0ea39a22e05c71e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-ld-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-ld-longlong.c?ref=8a411aa322e7ed9835670266e0ea39a22e05c71e", "patch": "@@ -0,0 +1,47 @@\n+/* Verify that overloaded built-ins for vec_ld* with long long\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector signed long long\n+testld_vsl_vsl (long long ll1, vector signed long vsl2)\n+{\n+  return vec_ld (ll1, &vsl2);\n+}\n+\n+vector unsigned long long\n+testld_vul_vul (long long ll1, vector unsigned long vul2)\n+{\n+  return vec_ld (ll1, &vul2);\n+}\n+\n+vector bool long long\n+testld_vbl_vbl (long long ll1, vector bool long vbl2)\n+{\n+  return vec_ld (ll1, &vbl2);\n+}\n+\n+vector signed long long\n+testld_cst_vsl (vector signed long vsl2)\n+{\n+  return vec_ld (16, &vsl2);\n+}\n+\n+vector unsigned long long\n+testld_cst_vul (vector unsigned long vul2)\n+{\n+  return vec_ld (32, &vul2);\n+}\n+\n+vector bool long long\n+testld_cst_vbl (vector bool long vbl2)\n+{\n+  return vec_ld (48, &vbl2);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvd2x\\M} 6 } } */\n+"}, {"sha": "5e42844bd711f26b970e5b8a3cd62cd3021b38ad", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-ld-short.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a411aa322e7ed9835670266e0ea39a22e05c71e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-ld-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a411aa322e7ed9835670266e0ea39a22e05c71e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-ld-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-ld-short.c?ref=8a411aa322e7ed9835670266e0ea39a22e05c71e", "patch": "@@ -0,0 +1,71 @@\n+/* Verify that overloaded built-ins for vec_ld* with short\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector signed short\n+testld_vss_vss (long long ll1, vector signed short vss2)\n+{\n+  return vec_ld (ll1, &vss2);\n+}\n+\n+vector signed short\n+testld_vss_ss (long long ll1, signed short ss)\n+{\n+  return vec_ld (ll1, &ss);\n+}\n+\n+vector unsigned short\n+testld_vus_vus (long long ll1, vector unsigned short vus2)\n+{\n+  return vec_ld (ll1, &vus2);\n+}\n+\n+vector unsigned short\n+testld_vus_us (long long ll1, unsigned short us)\n+{\n+  return vec_ld (ll1, &us);\n+}\n+\n+vector bool short\n+testld_vbs_vbs (long long ll1, vector bool short vbs2)\n+{\n+  return vec_ld (ll1, &vbs2);\n+}\n+\n+vector signed short\n+testld_cst_vss (vector signed short vss2)\n+{\n+  return vec_ld (16, &vss2);\n+}\n+\n+vector signed short\n+testld_cst_ss (signed short ss)\n+{\n+  return vec_ld (32, &ss);\n+}\n+\n+vector unsigned short\n+testld_cst_vus (vector unsigned short vus2)\n+{\n+  return vec_ld (48, &vus2);\n+}\n+\n+vector unsigned short\n+testld_cst_us (unsigned short us)\n+{\n+  return vec_ld (64, &us);\n+}\n+\n+vector bool short\n+testld_cst_vbs (vector bool short vbs2)\n+{\n+  return vec_ld (80, &vbs2);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvd2x\\M|\\mlxvw4x\\M} 10 } } */\n+"}]}