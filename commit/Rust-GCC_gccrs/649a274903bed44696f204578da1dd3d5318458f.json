{"sha": "649a274903bed44696f204578da1dd3d5318458f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ5YTI3NDkwM2JlZDQ0Njk2ZjIwNDU3OGRhMWRkM2Q1MzE4NDU4Zg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-01-07T16:03:36Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-01-07T16:03:36Z"}, "message": "jit.exp: add __func__ to help test-{combination|threads}.c\n\ngcc/testsuite/ChangeLog:\n\t* jit.dg/harness.h (CHECK_NON_NULL): Add __func__ to output, to\n\tmake it easier to figure out the origin of each test result when\n\trunning test-combination.c and test-threads.c.\n\t(CHECK_VALUE): Likewise.\n\t(CHECK_DOUBLE_VALUE): Likewise.\n\t(CHECK_STRING_VALUE): Likewise.\n\t(CHECK_STRING_STARTS_WITH): Likewise.\n\t(CHECK_STRING_CONTAINS): Likewise.\n\t(CHECK): Likewise.\n\t(check_string_value): Likewise, add \"funcname\" param.\n\t(check_string_starts_with): Likewise.\n\t(check_string_contains): Likewise.\n\nFrom-SVN: r219314", "tree": {"sha": "2c008aa54e9a63837be765226125f2923b964a5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c008aa54e9a63837be765226125f2923b964a5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/649a274903bed44696f204578da1dd3d5318458f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649a274903bed44696f204578da1dd3d5318458f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/649a274903bed44696f204578da1dd3d5318458f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649a274903bed44696f204578da1dd3d5318458f/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee756af88e15fd3aaaf9a7ec37fdc9b1e873e557", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee756af88e15fd3aaaf9a7ec37fdc9b1e873e557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee756af88e15fd3aaaf9a7ec37fdc9b1e873e557"}], "stats": {"total": 93, "additions": 62, "deletions": 31}, "files": [{"sha": "fbe4251fbcf70e01d245960cd9af51a7751ba1e2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649a274903bed44696f204578da1dd3d5318458f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649a274903bed44696f204578da1dd3d5318458f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=649a274903bed44696f204578da1dd3d5318458f", "patch": "@@ -1,3 +1,18 @@\n+2015-01-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit.dg/harness.h (CHECK_NON_NULL): Add __func__ to output, to\n+\tmake it easier to figure out the origin of each test result when\n+\trunning test-combination.c and test-threads.c.\n+\t(CHECK_VALUE): Likewise.\n+\t(CHECK_DOUBLE_VALUE): Likewise.\n+\t(CHECK_STRING_VALUE): Likewise.\n+\t(CHECK_STRING_STARTS_WITH): Likewise.\n+\t(CHECK_STRING_CONTAINS): Likewise.\n+\t(CHECK): Likewise.\n+\t(check_string_value): Likewise, add \"funcname\" param.\n+\t(check_string_starts_with): Likewise.\n+\t(check_string_contains): Likewise.\n+\n 2015-01-07  David Malcolm  <dmalcolm@redhat.com>\n \n \t* jit.dg/jit.exp (jit-dg-test): Remove \"rootname\" call when"}, {"sha": "fda797c0cff31d9cc0133d63820acc2463efef73", "filename": "gcc/testsuite/jit.dg/harness.h", "status": "modified", "additions": 47, "deletions": 31, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649a274903bed44696f204578da1dd3d5318458f/gcc%2Ftestsuite%2Fjit.dg%2Fharness.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649a274903bed44696f204578da1dd3d5318458f/gcc%2Ftestsuite%2Fjit.dg%2Fharness.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fharness.h?ref=649a274903bed44696f204578da1dd3d5318458f", "patch": "@@ -39,11 +39,13 @@ static char test[1024];\n   do {                                       \\\n     if ((PTR) != NULL)                       \\\n       {                                      \\\n-\tpass (\"%s: %s is non-null\", test, #PTR); \\\n+\tpass (\"%s: %s: %s is non-null\",\t     \\\n+\t      test, __func__, #PTR);\t     \\\n       }                                      \\\n     else                                     \\\n       {                                      \\\n-\tfail (\"%s: %s is NULL\", test, #PTR); \\\n+\tfail (\"%s: %s: %s is NULL\",\t     \\\n+\t      test, __func__, #PTR);\t     \\\n \tabort ();                            \\\n     }                                        \\\n   } while (0)\n@@ -52,11 +54,13 @@ static char test[1024];\n   do {                                       \\\n     if ((ACTUAL) == (EXPECTED))              \\\n       {                                      \\\n-\tpass (\"%s: actual: %s == expected: %s\", test, #ACTUAL, #EXPECTED); \\\n+\tpass (\"%s: %s: actual: %s == expected: %s\", \\\n+\t      test, __func__, #ACTUAL, #EXPECTED);  \\\n       }                                      \\\n     else                                     \\\n       {                                        \\\n-\tfail (\"%s: actual: %s != expected: %s\", test, #ACTUAL, #EXPECTED); \\\n+\tfail (\"%s: %s: actual: %s != expected: %s\", \\\n+\t      test, __func__, #ACTUAL, #EXPECTED);  \\\n \tfprintf (stderr, \"incorrect value\\n\"); \\\n \tabort ();                              \\\n     }                                        \\\n@@ -68,34 +72,36 @@ static char test[1024];\n     double actual = (ACTUAL);\t\t     \\\n     if (abs (actual - expected) < 0.00001)   \\\n       {                                      \\\n-\tpass (\"%s: actual: %s == expected: %s\", test, #ACTUAL, #EXPECTED); \\\n+\tpass (\"%s: %s: actual: %s == expected: %s\", \\\n+\t      __func__, test, #ACTUAL, #EXPECTED);  \\\n       }                                      \\\n     else                                     \\\n       {                                      \\\n-\tfail (\"%s: actual: %s != expected: %s\", test, #ACTUAL, #EXPECTED); \\\n+\tfail (\"%s: %s: actual: %s != expected: %s\", \\\n+\t      __func__, test, #ACTUAL, #EXPECTED);\t   \\\n \tfprintf (stderr, \"incorrect value: %f\\n\", actual); \\\n \tabort ();                            \\\n     }                                        \\\n   } while (0)\n \n #define CHECK_STRING_VALUE(ACTUAL, EXPECTED) \\\n-  check_string_value ((ACTUAL), (EXPECTED));\n+  check_string_value (__func__, (ACTUAL), (EXPECTED));\n \n #define CHECK_STRING_STARTS_WITH(ACTUAL, EXPECTED_PREFIX) \\\n-  check_string_starts_with ((ACTUAL), (EXPECTED_PREFIX));\n+  check_string_starts_with (__func__, (ACTUAL), (EXPECTED_PREFIX));\n \n #define CHECK_STRING_CONTAINS(ACTUAL, EXPECTED_SUBSTRING) \\\n-  check_string_contains (#ACTUAL, (ACTUAL), (EXPECTED_SUBSTRING));\n+  check_string_contains (__func__, #ACTUAL, (ACTUAL), (EXPECTED_SUBSTRING));\n \n #define CHECK(COND) \\\n   do {\t\t\t\t\t\\\n     if (COND)\t\t\t\t\\\n       {\t\t\t\t\\\n-\tpass (\"%s: %s\", test, #COND);\t\\\n+\tpass (\"%s: %s: %s\", test, __func__, #COND);\t\\\n       }\t\t\t\t\\\n     else\t\t\t\t\\\n       {\t\t\t\t\\\n-\tfail (\"%s: %s\", test, #COND);\t\\\n+\tfail (\"%s: %s: %s\", test, __func__, #COND);\t\\\n \tabort ();\t\t\t\\\n       }\t\t\t\t\\\n   } while (0)\n@@ -107,14 +113,17 @@ create_code (gcc_jit_context *ctxt, void * user_data);\n extern void\n verify_code (gcc_jit_context *ctxt, gcc_jit_result *result);\n \n-extern void check_string_value (const char *actual, const char *expected);\n+extern void check_string_value (const char *funcname,\n+\t\t\t\tconst char *actual, const char *expected);\n \n extern void\n-check_string_starts_with (const char *actual,\n+check_string_starts_with (const char *funcname,\n+\t\t\t  const char *actual,\n \t\t\t  const char *expected_prefix);\n \n extern void\n-check_string_contains (const char *name,\n+check_string_contains (const char *funcname,\n+\t\t       const char *name,\n \t\t       const char *actual,\n \t\t       const char *expected_substring);\n \n@@ -124,50 +133,56 @@ check_string_contains (const char *name,\n    temporarily turning off this part of harness.h.  */\n #ifndef COMBINED_TEST\n \n-void check_string_value (const char *actual, const char *expected)\n+void check_string_value (const char *funcname,\n+\t\t\t const char *actual, const char *expected)\n {\n   if (actual && !expected)\n     {\n-      fail (\"%s: actual: \\\"%s\\\" != expected: NULL\", test, actual);\n+      fail (\"%s: %s: actual: \\\"%s\\\" != expected: NULL\",\n+\t    funcname, test, actual);\n \tfprintf (stderr, \"incorrect value\\n\");\n \tabort ();\n     }\n     if (expected && !actual)\n       {\n-\tfail (\"%s: actual: NULL != expected: \\\"%s\\\"\", test, expected);\n+\tfail (\"%s: %s: actual: NULL != expected: \\\"%s\\\"\",\n+\t      funcname, test, expected);\n \tfprintf (stderr, \"incorrect value\\n\");\n \tabort ();\n       }\n     if (actual && expected)\n       {\n \tif (strcmp (actual, expected))\n \t  {\n-\t    fail (\"%s: actual: \\\"%s\\\" != expected: \\\"%s\\\"\", test, actual, expected);\n+\t    fail (\"%s: %s: actual: \\\"%s\\\" != expected: \\\"%s\\\"\",\n+\t\t  test, funcname, actual, expected);\n \t    fprintf (stderr, \"incorrect valuen\");\n \t    abort ();\n \t  }\n-\tpass (\"%s: actual: \\\"%s\\\" == expected: \\\"%s\\\"\", test, actual, expected);\n+\tpass (\"%s: %s: actual: \\\"%s\\\" == expected: \\\"%s\\\"\",\n+\t      test, funcname, actual, expected);\n       }\n     else\n       pass (\"%s: actual: NULL == expected: NULL\");\n }\n \n void\n-check_string_starts_with (const char *actual,\n+check_string_starts_with (const char *funcname,\n+\t\t\t  const char *actual,\n \t\t\t  const char *expected_prefix)\n {\n   if (!actual)\n     {\n-      fail (\"%s: actual: NULL != expected prefix: \\\"%s\\\"\",\n-\t    test, expected_prefix);\n+      fail (\"%s: %s: actual: NULL != expected prefix: \\\"%s\\\"\",\n+\t    test, funcname, expected_prefix);\n       fprintf (stderr, \"incorrect value\\n\");\n       abort ();\n     }\n \n   if (strncmp (actual, expected_prefix, strlen (expected_prefix)))\n     {\n-      fail (\"%s: actual: \\\"%s\\\" did not begin with expected prefix: \\\"%s\\\"\",\n-\t    test, actual, expected_prefix);\n+      fail (\"%s: %s: actual: \\\"%s\\\" did not begin with expected prefix: \\\"%s\\\"\",\n+\t    test, funcname, actual, expected_prefix);\n       fprintf (stderr, \"incorrect value\\n\");\n       abort ();\n     }\n@@ -177,28 +192,29 @@ check_string_starts_with (const char *actual,\n }\n \n void\n-check_string_contains (const char *name,\n+check_string_contains (const char *funcname,\n+\t\t       const char *name,\n \t\t       const char *actual,\n \t\t       const char *expected_substring)\n {\n   if (!actual)\n     {\n-      fail (\"%s: %s: actual: NULL does not contain expected substring: \\\"%s\\\"\",\n-\t    test, name, expected_substring);\n+      fail (\"%s: %s, %s: actual: NULL does not contain expected substring: \\\"%s\\\"\",\n+\t    test, funcname, name, expected_substring);\n       fprintf (stderr, \"incorrect value\\n\");\n       abort ();\n     }\n \n   if (!strstr (actual, expected_substring))\n     {\n-      fail (\"%s: %s: actual: \\\"%s\\\" did not contain expected substring: \\\"%s\\\"\",\n-\t    test, name, actual, expected_substring);\n+      fail (\"%s: %s: %s: actual: \\\"%s\\\" did not contain expected substring: \\\"%s\\\"\",\n+\t    test, funcname, name, actual, expected_substring);\n       fprintf (stderr, \"incorrect value\\n\");\n       abort ();\n     }\n \n-  pass (\"%s: %s: found substring: \\\"%s\\\"\",\n-\ttest, name, expected_substring);\n+  pass (\"%s: %s: %s: found substring: \\\"%s\\\"\",\n+\ttest, funcname, name, expected_substring);\n }\n \n static void set_options (gcc_jit_context *ctxt, const char *argv0)"}]}