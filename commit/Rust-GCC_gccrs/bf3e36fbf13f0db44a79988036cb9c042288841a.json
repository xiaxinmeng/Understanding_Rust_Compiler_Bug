{"sha": "bf3e36fbf13f0db44a79988036cb9c042288841a", "node_id": "C_kwDOANBUbNoAKGJmM2UzNmZiZjEzZjBkYjQ0YTc5OTg4MDM2Y2I5YzA0MjI4ODg0MWE", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@arm.com", "date": "2021-10-13T09:16:09Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@foss.st.com", "date": "2022-02-22T15:55:06Z"}, "message": "arm: Add GENERAL_AND_VPR_REGS regclass\n\nAt some point during the development of this patch series, it appeared\nthat in some cases the register allocator wants \u201cVPR or general\u201d\nrather than \u201cVPR or general or FP\u201d (which is the same thing as\nALL_REGS).  The series does not seem to require this anymore, but it\nseems to be a good thing to do anyway, to give the register allocator\nmore freedom.\n\nCLASS_MAX_NREGS and arm_hard_regno_nregs need adjustment to avoid a\nregression in gcc.dg/stack-usage-1.c when compiled with -mthumb\n-mfloat-abi=hard -march=armv8.1-m.main+mve.fp+fp.dp.\n\nMost of the work of this patch series was carried out while I was\nworking at STMicroelectronics as a Linaro assignee.\n\n2022-02-22  Christophe Lyon  <christophe.lyon@arm.com>\n\n\tgcc/\n\t* config/arm/arm.h (reg_class): Add GENERAL_AND_VPR_REGS.\n\t(REG_CLASS_NAMES): Likewise.\n\t(REG_CLASS_CONTENTS): Likewise.\n\t(CLASS_MAX_NREGS): Handle VPR.\n\t* config/arm/arm.cc (arm_hard_regno_nregs): Handle VPR.", "tree": {"sha": "987b7c7f90f1095b5506b29beeafa296cc5250d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/987b7c7f90f1095b5506b29beeafa296cc5250d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf3e36fbf13f0db44a79988036cb9c042288841a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3e36fbf13f0db44a79988036cb9c042288841a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf3e36fbf13f0db44a79988036cb9c042288841a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3e36fbf13f0db44a79988036cb9c042288841a/comments", "author": null, "committer": null, "parents": [{"sha": "7b1cce9273ce49fee5f5ebafb22107b97e3e7741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b1cce9273ce49fee5f5ebafb22107b97e3e7741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b1cce9273ce49fee5f5ebafb22107b97e3e7741"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "9c19589186fbedc25a62423c25798d886509e405", "filename": "gcc/config/arm/arm.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3e36fbf13f0db44a79988036cb9c042288841a/gcc%2Fconfig%2Farm%2Farm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3e36fbf13f0db44a79988036cb9c042288841a/gcc%2Fconfig%2Farm%2Farm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.cc?ref=bf3e36fbf13f0db44a79988036cb9c042288841a", "patch": "@@ -25339,6 +25339,9 @@ thumb2_asm_output_opcode (FILE * stream)\n static unsigned int\n arm_hard_regno_nregs (unsigned int regno, machine_mode mode)\n {\n+  if (IS_VPR_REGNUM (regno))\n+    return CEIL (GET_MODE_SIZE (mode), 2);\n+\n   if (TARGET_32BIT\n       && regno > PC_REGNUM\n       && regno != FRAME_POINTER_REGNUM"}, {"sha": "61c02218b78bba9c197ec5811d778967dc2c039e", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3e36fbf13f0db44a79988036cb9c042288841a/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3e36fbf13f0db44a79988036cb9c042288841a/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=bf3e36fbf13f0db44a79988036cb9c042288841a", "patch": "@@ -1287,6 +1287,7 @@ enum reg_class\n   SFP_REG,\n   AFP_REG,\n   VPR_REG,\n+  GENERAL_AND_VPR_REGS,\n   ALL_REGS,\n   LIM_REG_CLASSES\n };\n@@ -1316,6 +1317,7 @@ enum reg_class\n   \"SFP_REG\",\t\t\\\n   \"AFP_REG\",\t\t\\\n   \"VPR_REG\",\t\t\\\n+  \"GENERAL_AND_VPR_REGS\", \\\n   \"ALL_REGS\"\t\t\\\n }\n \n@@ -1344,6 +1346,7 @@ enum reg_class\n   { 0x00000000, 0x00000000, 0x00000000, 0x00000040 }, /* SFP_REG */\t\\\n   { 0x00000000, 0x00000000, 0x00000000, 0x00000080 }, /* AFP_REG */\t\\\n   { 0x00000000, 0x00000000, 0x00000000, 0x00000400 }, /* VPR_REG.  */\t\\\n+  { 0x00005FFF, 0x00000000, 0x00000000, 0x00000400 }, /* GENERAL_AND_VPR_REGS.  */ \\\n   { 0xFFFF7FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x0000000F }  /* ALL_REGS.  */\t\\\n }\n \n@@ -1453,7 +1456,9 @@ extern const char *fp_sysreg_names[NB_FP_SYSREGS];\n    ARM regs are UNITS_PER_WORD bits.  \n    FIXME: Is this true for iWMMX?  */\n #define CLASS_MAX_NREGS(CLASS, MODE)  \\\n-  (ARM_NUM_REGS (MODE))\n+  (CLASS == VPR_REG)\t\t      \\\n+  ? CEIL (GET_MODE_SIZE (MODE), 2)    \\\n+  : (ARM_NUM_REGS (MODE))\n \n /* If defined, gives a class of registers that cannot be used as the\n    operand of a SUBREG that changes the mode of the object illegally.  */"}]}