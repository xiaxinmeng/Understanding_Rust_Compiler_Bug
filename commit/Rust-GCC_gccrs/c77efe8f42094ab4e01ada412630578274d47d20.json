{"sha": "c77efe8f42094ab4e01ada412630578274d47d20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc3ZWZlOGY0MjA5NGFiNGUwMWFkYTQxMjYzMDU3ODI3NGQ0N2QyMA==", "commit": {"author": {"name": "Phil Muldoon", "email": "pmuldoon@redhat.com", "date": "2013-08-20T19:20:42Z"}, "committer": {"name": "Phil Muldoon", "email": "pmuldoon@gcc.gnu.org", "date": "2013-08-20T19:20:42Z"}, "message": "re PR libstdc++/53477 (pretty printer fails with: Python Exception <type 'exceptions.IndexError'> list index out of range)\n\n2013-08-20  Phil Muldoon  <pmuldoon@redhat.com>\n\n\tPR libstdc++/53477\n\thttp://sourceware.org/bugzilla/show_bug.cgi?id=15195\n\n\t* python/libstdcxx/v6/printers.py (Printer.__call__): If a value\n\tis a reference, fetch referenced value.\n\t(RxPrinter.invoke): Ditto.\n\t* testsuite/libstdc++-prettyprinters/cxx11.cc (main): Add -O0\n\tflag. Add referenced value tests.\n\nFrom-SVN: r201888", "tree": {"sha": "f6b42c11b37cb8cbf0f35b501f8c86d4126cc508", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6b42c11b37cb8cbf0f35b501f8c86d4126cc508"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c77efe8f42094ab4e01ada412630578274d47d20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77efe8f42094ab4e01ada412630578274d47d20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c77efe8f42094ab4e01ada412630578274d47d20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77efe8f42094ab4e01ada412630578274d47d20/comments", "author": null, "committer": null, "parents": [{"sha": "6cd4d135d77f9a649bf83b94915130981d60de95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd4d135d77f9a649bf83b94915130981d60de95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cd4d135d77f9a649bf83b94915130981d60de95"}], "stats": {"total": 57, "additions": 56, "deletions": 1}, "files": [{"sha": "689dc99fe17ff092810a9c0519867cddd9afacd8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77efe8f42094ab4e01ada412630578274d47d20/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77efe8f42094ab4e01ada412630578274d47d20/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c77efe8f42094ab4e01ada412630578274d47d20", "patch": "@@ -1,3 +1,14 @@\n+2013-08-20  Phil Muldoon  <pmuldoon@redhat.com>\n+\n+\tPR libstdc++/53477\n+\thttp://sourceware.org/bugzilla/show_bug.cgi?id=15195\n+\n+\t* python/libstdcxx/v6/printers.py (Printer.__call__): If a value\n+\tis a reference, fetch referenced value.\n+\t(RxPrinter.invoke): Ditto.\n+\t* testsuite/libstdc++-prettyprinters/cxx11.cc (main): Add -O0\n+\tflag. Add referenced value tests.\n+\n 2013-08-20  Tim Shen  <timshen91@gmail.com>\n \n \t* include/bits/regex_constants.h: Add underlying `unsigned int` for"}, {"sha": "3465348fbe20f492f6e072ffcbf5850531bf0132", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77efe8f42094ab4e01ada412630578274d47d20/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77efe8f42094ab4e01ada412630578274d47d20/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=c77efe8f42094ab4e01ada412630578274d47d20", "patch": "@@ -786,6 +786,11 @@ def __init__(self, name, function):\n     def invoke(self, value):\n         if not self.enabled:\n             return None\n+\n+        if value.type.code == gdb.TYPE_CODE_REF:\n+            if hasattr(gdb.Value,\"referenced_value\"):\n+                value = value.referenced_value()\n+\n         return self.function(self.name, value)\n \n # A pretty-printer that conforms to the \"PrettyPrinter\" protocol from\n@@ -841,6 +846,11 @@ def __call__(self, val):\n             return None\n \n         basename = match.group(1)\n+\n+        if val.type.code == gdb.TYPE_CODE_REF:\n+            if hasattr(gdb.Value,\"referenced_value\"):\n+                val = val.referenced_value()\n+\n         if basename in self.lookup:\n             return self.lookup[basename].invoke(val)\n "}, {"sha": "6ca02aa4e1f577a30ec88303fe308849cfb0f78b", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/cxx11.cc", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77efe8f42094ab4e01ada412630578274d47d20/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77efe8f42094ab4e01ada412630578274d47d20/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc?ref=c77efe8f42094ab4e01ada412630578274d47d20", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run }\n-// { dg-options \"-std=gnu++11 -g\" }\n+// { dg-options \"-std=gnu++11 -g -O0\" }\n \n // Copyright (C) 2011-2013 Free Software Foundation, Inc.\n //\n@@ -25,6 +25,8 @@\n #include <memory>\n #include <iostream>\n \n+typedef std::tuple<int, int> ExTuple;\n+\n template<class T>\n void\n placeholder(const T &s)\n@@ -63,43 +65,75 @@ main()\n   std::forward_list<int> efl;\n // { dg-final { note-test efl \"empty std::forward_list\" } }\n \n+  std::forward_list<int> &refl = efl;\n+// { dg-final { note-test refl \"empty std::forward_list\" } }\n+\n   std::forward_list<int> fl;\n   fl.push_front(2);\n   fl.push_front(1);\n // { dg-final { note-test fl {std::forward_list = {[0] = 1, [1] = 2}} } }\n \n+  std::forward_list<int> &rfl = fl;\n+// { dg-final { note-test rfl {std::forward_list = {[0] = 1, [1] = 2}} } }\n+\n   std::unordered_map<int, std::string> eum;\n // { dg-final { note-test eum \"std::unordered_map with 0 elements\" } }\n+  std::unordered_map<int, std::string> &reum = eum;\n+// { dg-final { note-test reum \"std::unordered_map with 0 elements\" } }\n+\n   std::unordered_multimap<int, std::string> eumm;\n // { dg-final { note-test eumm \"std::unordered_multimap with 0 elements\" } }\n+  std::unordered_multimap<int, std::string> &reumm = eumm;\n+// { dg-final { note-test reumm \"std::unordered_multimap with 0 elements\" } }\n+\n   std::unordered_set<int> eus;\n // { dg-final { note-test eus \"std::unordered_set with 0 elements\" } }\n+  std::unordered_set<int> &reus = eus;\n+// { dg-final { note-test reus \"std::unordered_set with 0 elements\" } }\n+\n   std::unordered_multiset<int> eums;\n // { dg-final { note-test eums \"std::unordered_multiset with 0 elements\" } }\n+  std::unordered_multiset<int> &reums = eums;\n+// { dg-final { note-test reums \"std::unordered_multiset with 0 elements\" } }\n \n   std::unordered_map<int, std::string> uom;\n   uom[5] = \"three\";\n   uom[3] = \"seven\";\n // { dg-final { note-test uom {std::unordered_map with 2 elements = {[3] = \"seven\", [5] = \"three\"}} } }\n \n+  std::unordered_map<int, std::string> &ruom = uom;\n+// { dg-final { note-test ruom {std::unordered_map with 2 elements = {[3] = \"seven\", [5] = \"three\"}} } }\n+\n   std::unordered_multimap<int, std::string> uomm;\n   uomm.insert(std::pair<int, std::string> (5, \"three\"));\n   uomm.insert(std::pair<int, std::string> (5, \"seven\"));\n // { dg-final { note-test uomm {std::unordered_multimap with 2 elements = {[5] = \"seven\", [5] = \"three\"}} } }\n+  std::unordered_multimap<int, std::string> &ruomm = uomm;\n+// { dg-final { note-test ruomm {std::unordered_multimap with 2 elements = {[5] = \"seven\", [5] = \"three\"}} } }\n \n   std::unordered_set<int> uos;\n   uos.insert(5);\n // { dg-final { note-test uos {std::unordered_set with 1 elements = {[0] = 5}} } }\n+  std::unordered_set<int> &ruos = uos;\n+// { dg-final { note-test ruos {std::unordered_set with 1 elements = {[0] = 5}} } }\n \n   std::unordered_multiset<int> uoms;\n   uoms.insert(5);\n // { dg-final { note-test uoms {std::unordered_multiset with 1 elements = {[0] = 5}} } }\n+  std::unordered_multiset<int> &ruoms = uoms;\n+// { dg-final { note-test ruoms {std::unordered_multiset with 1 elements = {[0] = 5}} } }\n \n   std::unique_ptr<datum> uptr (new datum);\n   uptr->s = \"hi bob\";\n   uptr->i = 23;\n // { dg-final { regexp-test uptr {std::unique_ptr.datum. containing 0x.*} } }\n+  std::unique_ptr<datum> &ruptr = uptr;\n+// { dg-final { regexp-test ruptr {std::unique_ptr.datum. containing 0x.*} } }\n \n+  ExTuple tpl(6,7);\n+// { dg-final { note-test tpl {std::tuple containing = {[1] = 6, [2] = 7}} } }  \n+  ExTuple &rtpl = tpl;\n+// { dg-final { note-test rtpl {std::tuple containing = {[1] = 6, [2] = 7}} } }   \n   placeholder(\"\"); // Mark SPOT\n   use(efl);\n   use(fl);"}]}