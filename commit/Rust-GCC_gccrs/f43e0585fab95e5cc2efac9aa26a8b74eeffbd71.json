{"sha": "f43e0585fab95e5cc2efac9aa26a8b74eeffbd71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQzZTA1ODVmYWI5NWU1Y2MyZWZhYzlhYTI2YThiNzRlZWZmYmQ3MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-01-11T22:36:20Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-01-11T22:36:20Z"}, "message": "PR c++/88613 - ICE with use of const var in lambda.\n\nThe issue here was that we were cp_folding a location wrapper around a\nlambda capture proxy before it had been mark_rvalue_used.  I considered\nadding mark_rvalue_use calls to build_new_op_1, but it seems appropriate to\nhave them in cp_fold_maybe_rvalue when we know we're trying to produce an\nrvalue.\n\nThe change to mark_use is for a related issue: when we change the operand of\nthe location wrapper from VAR_DECL to INTEGER_CST, we need the TREE_CODE of\nthe location wrapper to change as well, from VIEW_CONVERT_EXPR to\nNON_LVALUE_EXPR.\n\n\t* expr.c (mark_use): Fix location wrapper handling.\n\t* cp-gimplify.c (cp_fold_maybe_rvalue): Call mark_rvalue_use.\n\nFrom-SVN: r267859", "tree": {"sha": "3fc4cee14e318f3bf8b1fcb6ec63b532bfa104fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fc4cee14e318f3bf8b1fcb6ec63b532bfa104fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f43e0585fab95e5cc2efac9aa26a8b74eeffbd71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f43e0585fab95e5cc2efac9aa26a8b74eeffbd71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f43e0585fab95e5cc2efac9aa26a8b74eeffbd71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f43e0585fab95e5cc2efac9aa26a8b74eeffbd71/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "da972c05f48637060ae3a3b121f99d1522413b82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da972c05f48637060ae3a3b121f99d1522413b82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da972c05f48637060ae3a3b121f99d1522413b82"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "9208f1e4937a39cef7b96e7679fe5eb868633afb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f43e0585fab95e5cc2efac9aa26a8b74eeffbd71/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f43e0585fab95e5cc2efac9aa26a8b74eeffbd71/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f43e0585fab95e5cc2efac9aa26a8b74eeffbd71", "patch": "@@ -1,3 +1,9 @@\n+2019-01-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/88613 - ICE with use of const var in lambda.\n+\t* expr.c (mark_use): Fix location wrapper handling.\n+\t* cp-gimplify.c (cp_fold_maybe_rvalue): Call mark_rvalue_use.\n+\n 2019-01-11  Tobias Burnus  <burnus@net-b.de>\n \n \tPR C++/88114"}, {"sha": "121dfa41d8d2a7f405b3751e5d48d8185e7d5138", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f43e0585fab95e5cc2efac9aa26a8b74eeffbd71/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f43e0585fab95e5cc2efac9aa26a8b74eeffbd71/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=f43e0585fab95e5cc2efac9aa26a8b74eeffbd71", "patch": "@@ -2124,6 +2124,8 @@ cp_fold_maybe_rvalue (tree x, bool rval)\n   while (true)\n     {\n       x = cp_fold (x);\n+      if (rval)\n+\tx = mark_rvalue_use (x);\n       if (rval && DECL_P (x)\n \t  && !TYPE_REF_P (TREE_TYPE (x)))\n \t{"}, {"sha": "9160043ed114ce11b0d8f47767a8661e50e0217c", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f43e0585fab95e5cc2efac9aa26a8b74eeffbd71/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f43e0585fab95e5cc2efac9aa26a8b74eeffbd71/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=f43e0585fab95e5cc2efac9aa26a8b74eeffbd71", "patch": "@@ -187,10 +187,23 @@ mark_use (tree expr, bool rvalue_p, bool read_p,\n \t}\n       break;\n \n-    CASE_CONVERT:\n     case VIEW_CONVERT_EXPR:\n       if (location_wrapper_p (expr))\n-\tloc = EXPR_LOCATION (expr);\n+\t{\n+\t  loc = EXPR_LOCATION (expr);\n+\t  tree op = TREE_OPERAND (expr, 0);\n+\t  tree nop = RECUR (op);\n+\t  if (nop == error_mark_node)\n+\t    return error_mark_node;\n+\t  TREE_OPERAND (expr, 0) = nop;\n+\t  /* If we're replacing a DECL with a constant, we also need to change\n+\t     the TREE_CODE of the location wrapper.  */\n+\t  if (op != nop && rvalue_p)\n+\t    TREE_SET_CODE (expr, NON_LVALUE_EXPR);\n+\t  return expr;\n+\t}\n+      gcc_fallthrough();\n+    CASE_CONVERT:\n       recurse_op[0] = true;\n       break;\n "}, {"sha": "3112f08f5c207632e6dc9cbdb8dfe51dead91135", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-const10.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f43e0585fab95e5cc2efac9aa26a8b74eeffbd71/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-const10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f43e0585fab95e5cc2efac9aa26a8b74eeffbd71/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-const10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-const10.C?ref=f43e0585fab95e5cc2efac9aa26a8b74eeffbd71", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/88613\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options -Wtautological-compare }\n+\n+void a() {\n+  const int b = 5;\n+  [=] {\n+    if (b != 5)\n+      ;\n+  }();\n+}"}]}