{"sha": "fd6657fbb3f79043efae618c18088808bc17cab0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ2NjU3ZmJiM2Y3OTA0M2VmYWU2MThjMTgwODg4MDhiYzE3Y2FiMA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-21T20:28:33Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-21T20:28:33Z"}, "message": "bt-load.c: Use rtx_insn\n\ngcc/\n2014-08-21  David Malcolm  <dmalcolm@redhat.com>\n\n\t* bt-load.c (struct btr_user_s): Strengthen field \"insn\" from rtx\n\tto rtx_insn *.\n\t(struct btr_def_s): Likewise.\n\t(insn_sets_btr_p): Strengthen param \"insn\" from const_rtx to\n\tconst rtx_insn *.\n\t(add_btr_def): Likewise.\n\t(new_btr_user): Likewise.\n\t(compute_defs_uses_and_gen): Strengthen locals \"insn\", \"last\" from\n\trtx to rtx_insn *.\n\t(link_btr_uses): Likewise.\n\t(move_btr_def): Likewise for locals \"insp\", \"old_insn\",\n\t\"new_insn\".  Add checked cast to rtx_insn * for now on result of\n\tgen_move_insn.\n\t(can_move_up): Strengthen param \"insn\" from const_rtx to\n\tconst rtx_insn *.\n\nFrom-SVN: r214287", "tree": {"sha": "725a4903fe0acb31fb0424cf38edd23835c108c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/725a4903fe0acb31fb0424cf38edd23835c108c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd6657fbb3f79043efae618c18088808bc17cab0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd6657fbb3f79043efae618c18088808bc17cab0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd6657fbb3f79043efae618c18088808bc17cab0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd6657fbb3f79043efae618c18088808bc17cab0/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e93768e449cce45544b79a8f6095519782e9b83a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93768e449cce45544b79a8f6095519782e9b83a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e93768e449cce45544b79a8f6095519782e9b83a"}], "stats": {"total": 55, "additions": 37, "deletions": 18}, "files": [{"sha": "905eb3921b266f843f1cb8fc15390836ec02e8f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6657fbb3f79043efae618c18088808bc17cab0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6657fbb3f79043efae618c18088808bc17cab0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd6657fbb3f79043efae618c18088808bc17cab0", "patch": "@@ -1,3 +1,21 @@\n+2014-08-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* bt-load.c (struct btr_user_s): Strengthen field \"insn\" from rtx\n+\tto rtx_insn *.\n+\t(struct btr_def_s): Likewise.\n+\t(insn_sets_btr_p): Strengthen param \"insn\" from const_rtx to\n+\tconst rtx_insn *.\n+\t(add_btr_def): Likewise.\n+\t(new_btr_user): Likewise.\n+\t(compute_defs_uses_and_gen): Strengthen locals \"insn\", \"last\" from\n+\trtx to rtx_insn *.\n+\t(link_btr_uses): Likewise.\n+\t(move_btr_def): Likewise for locals \"insp\", \"old_insn\",\n+\t\"new_insn\".  Add checked cast to rtx_insn * for now on result of\n+\tgen_move_insn.\n+\t(can_move_up): Strengthen param \"insn\" from const_rtx to\n+\tconst rtx_insn *.\n+\n 2014-08-21  David Malcolm  <dmalcolm@redhat.com>\n \n \t* bb-reorder.c (copy_bb_p): Strengthen local \"insn\" from rtx to"}, {"sha": "41288fe66528b66a1147c3bc1a4148fd0893b0d0", "filename": "gcc/bt-load.c", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6657fbb3f79043efae618c18088808bc17cab0/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6657fbb3f79043efae618c18088808bc17cab0/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=fd6657fbb3f79043efae618c18088808bc17cab0", "patch": "@@ -53,7 +53,7 @@ typedef struct btr_user_s\n   struct btr_user_s *next;\n   basic_block bb;\n   int luid;\n-  rtx insn;\n+  rtx_insn *insn;\n   /* If INSN has a single use of a single branch register, then\n      USE points to it within INSN.  If there is more than\n      one branch register use, or the use is in some way ambiguous,\n@@ -79,7 +79,7 @@ typedef struct btr_def_s\n   struct btr_def_s *next_this_group;\n   basic_block bb;\n   int luid;\n-  rtx insn;\n+  rtx_insn *insn;\n   int btr;\n   int cost;\n   /* For a branch register setting insn that has a constant\n@@ -112,14 +112,14 @@ typedef struct btr_def_s\n static int issue_rate;\n \n static int basic_block_freq (const_basic_block);\n-static int insn_sets_btr_p (const_rtx, int, int *);\n+static int insn_sets_btr_p (const rtx_insn *, int, int *);\n static rtx *find_btr_use (rtx);\n static int btr_referenced_p (rtx, rtx *);\n static int find_btr_reference (rtx *, void *);\n static void find_btr_def_group (btr_def_group *, btr_def);\n-static btr_def add_btr_def (fibheap_t, basic_block, int, rtx,\n+static btr_def add_btr_def (fibheap_t, basic_block, int, rtx_insn *,\n \t\t\t    unsigned int, int, btr_def_group *);\n-static btr_user new_btr_user (basic_block, int, rtx);\n+static btr_user new_btr_user (basic_block, int, rtx_insn *);\n static void dump_hard_reg_set (HARD_REG_SET);\n static void dump_btrs_live (int);\n static void note_other_use_this_block (unsigned int, btr_user);\n@@ -140,7 +140,7 @@ static void btr_def_live_range (btr_def, HARD_REG_SET *);\n static void move_btr_def (basic_block, int, btr_def, bitmap, HARD_REG_SET *);\n static int migrate_btr_def (btr_def, int);\n static void migrate_btr_defs (enum reg_class, int);\n-static int can_move_up (const_basic_block, const_rtx, int);\n+static int can_move_up (const_basic_block, const rtx_insn *, int);\n static void note_btr_set (rtx, const_rtx, void *);\n \f\n /* The following code performs code motion of target load instructions\n@@ -222,7 +222,7 @@ btr_referenced_p (rtx x, rtx *excludep)\n    If such a set is found and REGNO is nonzero, assign the register number\n    of the destination register to *REGNO.  */\n static int\n-insn_sets_btr_p (const_rtx insn, int check_const, int *regno)\n+insn_sets_btr_p (const rtx_insn *insn, int check_const, int *regno)\n {\n   rtx set;\n \n@@ -297,7 +297,8 @@ find_btr_def_group (btr_def_group *all_btr_def_groups, btr_def def)\n    block BB, instruction INSN, and insert it into ALL_BTR_DEFS.  Return\n    the new definition.  */\n static btr_def\n-add_btr_def (fibheap_t all_btr_defs, basic_block bb, int insn_luid, rtx insn,\n+add_btr_def (fibheap_t all_btr_defs, basic_block bb, int insn_luid,\n+\t     rtx_insn *insn,\n \t     unsigned int dest_reg, int other_btr_uses_before_def,\n \t     btr_def_group *all_btr_def_groups)\n {\n@@ -330,7 +331,7 @@ add_btr_def (fibheap_t all_btr_defs, basic_block bb, int insn_luid, rtx insn,\n /* Create a new target register user structure, for a use in block BB,\n    instruction INSN.  Return the new user.  */\n static btr_user\n-new_btr_user (basic_block bb, int insn_luid, rtx insn)\n+new_btr_user (basic_block bb, int insn_luid, rtx_insn *insn)\n {\n   /* This instruction reads target registers.  We need\n      to decide whether we can replace all target register\n@@ -463,8 +464,8 @@ compute_defs_uses_and_gen (fibheap_t all_btr_defs, btr_def *def_array,\n       basic_block bb = BASIC_BLOCK_FOR_FN (cfun, i);\n       int reg;\n       btr_def defs_this_bb = NULL;\n-      rtx insn;\n-      rtx last;\n+      rtx_insn *insn;\n+      rtx_insn *last;\n       int can_throw = 0;\n \n       info.users_this_bb = NULL;\n@@ -671,8 +672,8 @@ link_btr_uses (btr_def *def_array, btr_user *use_array, sbitmap *bb_out,\n   for (i = NUM_FIXED_BLOCKS; i < last_basic_block_for_fn (cfun); i++)\n     {\n       basic_block bb = BASIC_BLOCK_FOR_FN (cfun, i);\n-      rtx insn;\n-      rtx last;\n+      rtx_insn *insn;\n+      rtx_insn *last;\n \n       bitmap_union_of_preds (reaching_defs, bb_out, BASIC_BLOCK_FOR_FN (cfun, i));\n       for (insn = BB_HEAD (bb), last = NEXT_INSN (BB_END (bb));\n@@ -1154,11 +1155,11 @@ move_btr_def (basic_block new_def_bb, int btr, btr_def def, bitmap live_range,\n      Replace all uses of the old target register definition by\n      uses of the new definition.  Delete the old definition.  */\n   basic_block b = new_def_bb;\n-  rtx insp = BB_HEAD (b);\n-  rtx old_insn = def->insn;\n+  rtx_insn *insp = BB_HEAD (b);\n+  rtx_insn *old_insn = def->insn;\n   rtx src;\n   rtx btr_rtx;\n-  rtx new_insn;\n+  rtx_insn *new_insn;\n   enum machine_mode btr_mode;\n   btr_user user;\n   rtx set;\n@@ -1200,7 +1201,7 @@ move_btr_def (basic_block new_def_bb, int btr, btr_def def, bitmap live_range,\n   btr_mode = GET_MODE (SET_DEST (set));\n   btr_rtx = gen_rtx_REG (btr_mode, btr);\n \n-  new_insn = gen_move_insn (btr_rtx, src);\n+  new_insn = as_a <rtx_insn *> (gen_move_insn (btr_rtx, src));\n \n   /* Insert target register initialization at head of basic block.  */\n   def->insn = emit_insn_after (new_insn, insp);\n@@ -1236,7 +1237,7 @@ move_btr_def (basic_block new_def_bb, int btr, btr_def def, bitmap live_range,\n /* We anticipate intra-block scheduling to be done.  See if INSN could move\n    up within BB by N_INSNS.  */\n static int\n-can_move_up (const_basic_block bb, const_rtx insn, int n_insns)\n+can_move_up (const_basic_block bb, const rtx_insn *insn, int n_insns)\n {\n   while (insn != BB_HEAD (bb) && n_insns > 0)\n     {"}]}