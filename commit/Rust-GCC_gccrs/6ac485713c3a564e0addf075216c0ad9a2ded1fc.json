{"sha": "6ac485713c3a564e0addf075216c0ad9a2ded1fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFjNDg1NzEzYzNhNTY0ZTBhZGRmMDc1MjE2YzBhZDlhMmRlZDFmYw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-06-02T13:59:52Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-06-02T13:59:52Z"}, "message": "install-old.texi: Remove documentation of some configuration options.\n\n\t* doc/install-old.texi: Remove documentation of some configuration\n\toptions.\n\t* doc/install.texi: Add relevant parts of this documentation here.\n\nFrom-SVN: r42802", "tree": {"sha": "a3db4c63f305633d1b489f34afd4c771f6995c84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3db4c63f305633d1b489f34afd4c771f6995c84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ac485713c3a564e0addf075216c0ad9a2ded1fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ac485713c3a564e0addf075216c0ad9a2ded1fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ac485713c3a564e0addf075216c0ad9a2ded1fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ac485713c3a564e0addf075216c0ad9a2ded1fc/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c3cc043ac8d7867639591318fa6776b313788bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c3cc043ac8d7867639591318fa6776b313788bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c3cc043ac8d7867639591318fa6776b313788bf"}], "stats": {"total": 139, "additions": 56, "deletions": 83}, "files": [{"sha": "0f3883e5b1ed8799269e6f52ccefe8c763befa28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac485713c3a564e0addf075216c0ad9a2ded1fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac485713c3a564e0addf075216c0ad9a2ded1fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ac485713c3a564e0addf075216c0ad9a2ded1fc", "patch": "@@ -1,3 +1,9 @@\n+2001-06-02  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* doc/install-old.texi: Remove documentation of some configuration\n+\toptions.\n+\t* doc/install.texi: Add relevant parts of this documentation here.\n+\n 2001-06-02  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n \t* contrib.texi: Updated entries for Mark Mitchell, Joseph S. Myers,"}, {"sha": "c0aa729cc701b64e8052aeb24e276b32884e1376", "filename": "gcc/doc/install-old.texi", "status": "modified", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac485713c3a564e0addf075216c0ad9a2ded1fc/gcc%2Fdoc%2Finstall-old.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac485713c3a564e0addf075216c0ad9a2ded1fc/gcc%2Fdoc%2Finstall-old.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall-old.texi?ref=6ac485713c3a564e0addf075216c0ad9a2ded1fc", "patch": "@@ -201,27 +201,6 @@ point unit.  These systems include @samp{m68k-sun-sunos@var{n}} and\n effect, though perhaps there are other systems where it could usefully\n make a difference.\n \n-@cindex Haifa scheduler\n-@cindex scheduler, experimental\n-@item --enable-haifa\n-@itemx --disable-haifa\n-Use @samp{--enable-haifa} to enable use of an experimental instruction\n-scheduler (from IBM Haifa).  This may or may not produce better code.\n-Some targets on which it is known to be a win enable it by default; use\n-@samp{--disable-haifa} to disable it in these cases.  @code{configure}\n-will print out whether the Haifa scheduler is enabled when it is run.\n-\n-@cindex Objective C threads\n-@cindex threads, Objective C\n-@item --enable-threads=@var{type}\n-Certain systems, notably Linux-based GNU systems, can't be relied on to\n-supply a threads facility for the Objective C runtime and so will\n-default to single-threaded runtime.  They may, however, have a library\n-threads implementation available, in which case threads can be enabled\n-with this option by supplying a suitable @var{type}, probably\n-@samp{posix}.  The possibilities for @var{type} are @samp{single},\n-@samp{posix}, @samp{win32}, @samp{solaris}, @samp{irix} and @samp{mach}.\n-\n @cindex Internal Compiler Checking\n @item --enable-checking\n When you specify this option, the compiler is built to perform checking\n@@ -254,15 +233,6 @@ ignores @code{catgets} and instead uses GCC's copy of the GNU\n @code{gettext} library.  The @samp{--with-catgets} option causes the\n build procedure to use the host's @code{catgets} in this situation.\n \n-@cindex @code{maintainer-mode}\n-@item --enable-maintainer-mode\n-The build rules that regenerate the GCC master message catalog\n-@code{gcc.pot} are normally disabled. This is because it can only be rebuilt\n-if the complete source tree is present. If you have changed the sources and\n-want to rebuild the catalog, configuring with\n-@samp{--enable-maintainer-mode} will enable this. Note that you need a\n-special version of the @code{gettext} tools to do so.\n-\n @cindex Windows32 Registry support\n @item --enable-win32-registry\n @itemx --enable-win32-registry=@var{KEY}\n@@ -283,54 +253,6 @@ by default, and can be disabled by @code{--disable-win32-registry}\n option.  This option has no effect on the other hosts.\n @end table\n \n-@item\n-In certain cases, you should specify certain other options when you run\n-@code{configure}.\n-\n-@itemize @bullet\n-@item\n-The standard directory for installing GNU CC is @file{/usr/local/lib}.\n-If you want to install its files somewhere else, specify\n-@samp{--prefix=@var{dir}} when you run @file{configure}.  Here @var{dir}\n-is a directory name to use instead of @file{/usr/local} for all purposes\n-with one exception: the directory @file{/usr/local/include} is searched\n-for header files no matter where you install the compiler.  To override\n-this name, use the @code{--with-local-prefix} option below.  The directory\n-you specify need not exist, but its parent directory must exist.\n-\n-@item\n-Specify @samp{--with-local-prefix=@var{dir}} if you want the compiler to\n-search directory @file{@var{dir}/include} for locally installed header\n-files @emph{instead} of @file{/usr/local/include}.\n-\n-You should specify @samp{--with-local-prefix} @strong{only} if your site has\n-a different convention (not @file{/usr/local}) for where to put\n-site-specific files.\n-\n-The default value for @samp{--with-local-prefix} is @file{/usr/local}\n-regardless of the value of @samp{--prefix}.  Specifying @samp{--prefix}\n-has no effect on which directory GNU CC searches for local header files.\n-This may seem counterintuitive, but actually it is logical.\n-\n-The purpose of @samp{--prefix} is to specify where to @emph{install GNU\n-CC}.  The local header files in @file{/usr/local/include}---if you put\n-any in that directory---are not part of GNU CC.  They are part of other\n-programs---perhaps many others.  (GNU CC installs its own header files\n-in another directory which is based on the @samp{--prefix} value.)\n-\n-@strong{Do not} specify @file{/usr} as the @samp{--with-local-prefix}!  The\n-directory you use for @samp{--with-local-prefix} @strong{must not} contain\n-any of the system's standard header files.  If it did contain them,\n-certain programs would be miscompiled (including GNU Emacs, on certain\n-targets), because this would override and nullify the header file\n-corrections made by the @code{fixincludes} script.\n-\n-Indications are that people who use this option use it based on\n-mistaken ideas of what it is for.  People use it as if it specified\n-where to install part of GNU CC.  Perhaps they make this assumption\n-because installing GNU CC creates the directory.\n-@end itemize\n-\n @item\n Build the compiler.  Just type @samp{make LANGUAGES=c} in the compiler\n directory."}, {"sha": "4d28a7c595a3ca816bf534f12d2a567be394f273", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 50, "deletions": 5, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac485713c3a564e0addf075216c0ad9a2ded1fc/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac485713c3a564e0addf075216c0ad9a2ded1fc/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=6ac485713c3a564e0addf075216c0ad9a2ded1fc", "patch": "@@ -33,7 +33,7 @@\n @settitle Installing GCC: Binaries\n @end ifset\n \n-@comment $Id: install.texi,v 1.9 2001/05/31 08:15:15 gerald Exp $\n+@comment $Id: install.texi,v 1.10 2001/06/01 18:08:19 gerald Exp $\n @c Copyright (C) 2001 Free Software Foundation, Inc.\n @c *** Converted to texinfo by Dean Wakerley, dean@wakerley.com\n \n@@ -297,9 +297,6 @@ subdirectory of @var{objdir} or vice versa.\n These additional options control where certain parts of the distribution\n are installed.  Normally you should not need to use these options.\n @itemize @bullet\n-@item\n-@option{--with-local-prefix=}@var{dirname} @minus{}@minus{} Specify the installation\n-directory for local include files.  The default is @file{/usr/local}.\n \n @item\n @option{--with-gxx-include-dir=}@var{dirname} @minus{}@minus{} Specify\n@@ -308,6 +305,41 @@ the installation directory for g++ header files.  The default is\n   \n @end itemize\n \n+@item\n+@option{--with-local-prefix=}@var{dirname} @minus{}@minus{} Specify the\n+installation directory for local include files.  The default is\n+@file{/usr/local}.  Specify this option if you want the compiler to\n+search directory @file{@var{dirname}/include} for locally installed\n+header files @emph{instead} of @file{/usr/local/include}.\n+\n+You should specify @option{--with-local-prefix} @strong{only} if your\n+site has a different convention (not @file{/usr/local}) for where to put\n+site-specific files.\n+\n+The default value for @option{--with-local-prefix} is @file{/usr/local}\n+regardless of the value of @option{--prefix}.  Specifying\n+@option{--prefix} has no effect on which directory GCC searches for\n+local header files.  This may seem counterintuitive, but actually it is\n+logical.\n+\n+The purpose of @option{--prefix} is to specify where to @emph{install\n+GCC}.  The local header files in @file{/usr/local/include}---if you put\n+any in that directory---are not part of GCC.  They are part of other\n+programs---perhaps many others.  (GCC installs its own header files in\n+another directory which is based on the @option{--prefix} value.)\n+\n+@strong{Do not} specify @file{/usr} as the @option{--with-local-prefix}!\n+The directory you use for @option{--with-local-prefix} @strong{must not}\n+contain any of the system's standard header files.  If it did contain\n+them, certain programs would be miscompiled (including GNU Emacs, on\n+certain targets), because this would override and nullify the header\n+file corrections made by the @code{fixincludes} script.\n+\n+Indications are that people who use this option use it based on mistaken\n+ideas of what it is for.  People use it as if it specified where to\n+install part of GCC.  Perhaps they make this assumption because\n+installing GCC creates the directory.\n+\n @item\n @option{--enable-shared} @minus{}@minus{} Build shared versions of the\n C++ runtime libraries if supported. This is the default on most\n@@ -375,12 +407,16 @@ conventions, etc.  This is the default.\n @option{--enable-threads} @minus{}@minus{} Specify that the target\n supports threads.  This affects the Objective-C compiler and runtime\n library, and exception handling for other languages like C++ and Java.\n+On some systems, this is the default.\n \n @item\n @option{--enable-threads=}@var{lib} @minus{}@minus{} Specify that\n @var{lib} is the thread support library.  This affects the Objective-C\n compiler and runtime library, and exception handling for other languages\n-like C++ and Java.\n+like C++ and Java.  The possibilities for @var{lib} are @samp{aix},\n+@samp{dce}, @samp{decosf1}, @samp{irix}, @samp{mach}, @samp{os2},\n+@samp{posix}, @samp{pthreads}, @samp{single}, @samp{solaris},\n+@samp{vxworks} and @samp{win32}.\n \n @item\n @option{--with-cpu=}@var{cpu} @minus{}@minus{} Specify which cpu variant the\n@@ -406,6 +442,15 @@ not supported by snapshots since November 2000.  In snapshots where\n it is supported, it is not enabled by default, except for snapshots\n very close to November 2000.\n \n+@item\n+@option{--enable-maintainer-mode} @minus{}@minus{} The build rules that\n+regenerate the GCC master message catalog @code{gcc.pot} are normally\n+disabled. This is because it can only be rebuilt if the complete source\n+tree is present. If you have changed the sources and want to rebuild the\n+catalog, configuring with @option{--enable-maintainer-mode} will enable\n+this. Note that you need a recent version of the @code{gettext} tools\n+to do so.\n+\n @item\n @option{--without-fast-fixincludes} @minus{}@minus{} Specify that the\n old, slower method of fixing the system header files should be used."}]}