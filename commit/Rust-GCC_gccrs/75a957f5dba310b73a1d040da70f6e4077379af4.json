{"sha": "75a957f5dba310b73a1d040da70f6e4077379af4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVhOTU3ZjVkYmEzMTBiNzNhMWQwNDBkYTcwZjZlNDA3NzM3OWFmNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-20T10:45:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-20T10:45:55Z"}, "message": "[multiple changes]\n\n2016-04-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* einfo.adb Flag286 is now used as Is_Exception_Handler.\n\t(Is_Exception_Handler): New routine.\n\t(Set_Is_Exception_Handler): New routine.\n\t(Write_Entity_Flags): Output the status of Is_Exception_Handler.\n\t* einfo.ads New attribute Is_Exception_Handler along with\n\toccurrences in entities.\n\t(Is_Exception_Handler): New routine along with pragma Inline.\n\t(Set_Is_Exception_Handler): New routine along with pragma Inline.\n\t* exp_ch7.adb (Make_Transient_Block): Ignore blocks generated\n\tfor exception handlers with a choice parameter.\n\t* sem_ch11.adb (Analyze_Exception_Handlers): Mark the scope\n\tgenerated for a choice parameter as an exception handler.\n\n2016-04-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Build_Derived_Access_Type): Remove dead code.\n\t(Constrain_Discriminated_Type): In an instance, if the type has\n\tunknown discriminants, use its full view.\n\t(Process_Subtype): Check that the base type is private before\n\tadding subtype to Private_Dependents list.\n\n2016-04-20  Bob Duff  <duff@adacore.com>\n\n\t* sem_ch13.adb: Minor comment fix.\n\nFrom-SVN: r235264", "tree": {"sha": "97ebf50af958de9b7d35ca951dc92ba8b70a8099", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97ebf50af958de9b7d35ca951dc92ba8b70a8099"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75a957f5dba310b73a1d040da70f6e4077379af4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a957f5dba310b73a1d040da70f6e4077379af4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75a957f5dba310b73a1d040da70f6e4077379af4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a957f5dba310b73a1d040da70f6e4077379af4/comments", "author": null, "committer": null, "parents": [{"sha": "bc795e3e039342e74d2d2b0515dd190f7d24ec65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc795e3e039342e74d2d2b0515dd190f7d24ec65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc795e3e039342e74d2d2b0515dd190f7d24ec65"}], "stats": {"total": 136, "additions": 102, "deletions": 34}, "files": [{"sha": "b187ef1d04b3e925eabe45384b2c9afaf963f6de", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a957f5dba310b73a1d040da70f6e4077379af4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a957f5dba310b73a1d040da70f6e4077379af4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=75a957f5dba310b73a1d040da70f6e4077379af4", "patch": "@@ -1,3 +1,30 @@\n+2016-04-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* einfo.adb Flag286 is now used as Is_Exception_Handler.\n+\t(Is_Exception_Handler): New routine.\n+\t(Set_Is_Exception_Handler): New routine.\n+\t(Write_Entity_Flags): Output the status of Is_Exception_Handler.\n+\t* einfo.ads New attribute Is_Exception_Handler along with\n+\toccurrences in entities.\n+\t(Is_Exception_Handler): New routine along with pragma Inline.\n+\t(Set_Is_Exception_Handler): New routine along with pragma Inline.\n+\t* exp_ch7.adb (Make_Transient_Block): Ignore blocks generated\n+\tfor exception handlers with a choice parameter.\n+\t* sem_ch11.adb (Analyze_Exception_Handlers): Mark the scope\n+\tgenerated for a choice parameter as an exception handler.\n+\n+2016-04-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Build_Derived_Access_Type): Remove dead code.\n+\t(Constrain_Discriminated_Type): In an instance, if the type has\n+\tunknown discriminants, use its full view.\n+\t(Process_Subtype): Check that the base type is private before\n+\tadding subtype to Private_Dependents list.\n+\n+2016-04-20  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch13.adb: Minor comment fix.\n+\n 2016-04-20  Yannick Moy  <moy@adacore.com>\n \n \t* sem_ch4.adb: Fix typos in comments."}, {"sha": "5586ea7a268b36674b9133e116816f919b455a9b", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a957f5dba310b73a1d040da70f6e4077379af4/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a957f5dba310b73a1d040da70f6e4077379af4/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=75a957f5dba310b73a1d040da70f6e4077379af4", "patch": "@@ -597,7 +597,7 @@ package body Einfo is\n    --    Is_Uplevel_Referenced_Entity    Flag283\n    --    Is_Unimplemented                Flag284\n    --    Is_Volatile_Full_Access         Flag285\n-   --    (unused)                        Flag286\n+   --    Is_Exception_Handler            Flag286\n    --    Rewritten_For_C                 Flag287\n \n    --    (unused)                        Flag288\n@@ -1976,12 +1976,6 @@ package body Einfo is\n       return Flag146 (Id);\n    end Is_Abstract_Type;\n \n-   function Is_Local_Anonymous_Access (Id : E) return B is\n-   begin\n-      pragma Assert (Is_Access_Type (Id));\n-      return Flag194 (Id);\n-   end Is_Local_Anonymous_Access;\n-\n    function Is_Access_Constant (Id : E) return B is\n    begin\n       pragma Assert (Is_Access_Type (Id));\n@@ -2137,6 +2131,12 @@ package body Einfo is\n       return Flag52 (Id);\n    end Is_Entry_Formal;\n \n+   function Is_Exception_Handler (Id : E) return B is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Block);\n+      return Flag286 (Id);\n+   end Is_Exception_Handler;\n+\n    function Is_Exported (Id : E) return B is\n    begin\n       return Flag99 (Id);\n@@ -2307,6 +2307,12 @@ package body Einfo is\n       return Flag25 (Id);\n    end Is_Limited_Record;\n \n+   function Is_Local_Anonymous_Access (Id : E) return B is\n+   begin\n+      pragma Assert (Is_Access_Type (Id));\n+      return Flag194 (Id);\n+   end Is_Local_Anonymous_Access;\n+\n    function Is_Machine_Code_Subprogram (Id : E) return B is\n    begin\n       pragma Assert (Is_Subprogram (Id));\n@@ -5146,6 +5152,12 @@ package body Einfo is\n       Set_Flag52 (Id, V);\n    end Set_Is_Entry_Formal;\n \n+   procedure Set_Is_Exception_Handler (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Block);\n+      Set_Flag286 (Id, V);\n+   end Set_Is_Exception_Handler;\n+\n    procedure Set_Is_Exported (Id : E; V : B := True) is\n    begin\n       Set_Flag99 (Id, V);\n@@ -8956,6 +8968,7 @@ package body Einfo is\n       W (\"Is_Dispatching_Operation\",        Flag6   (Id));\n       W (\"Is_Eliminated\",                   Flag124 (Id));\n       W (\"Is_Entry_Formal\",                 Flag52  (Id));\n+      W (\"Is_Exception_Handler\",            Flag286 (Id));\n       W (\"Is_Exported\",                     Flag99  (Id));\n       W (\"Is_First_Subtype\",                Flag70  (Id));\n       W (\"Is_For_Access_Subtype\",           Flag118 (Id));"}, {"sha": "535fa39fc74560d2227be9457c4e14e76ad6f3ce", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a957f5dba310b73a1d040da70f6e4077379af4/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a957f5dba310b73a1d040da70f6e4077379af4/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=75a957f5dba310b73a1d040da70f6e4077379af4", "patch": "@@ -2428,6 +2428,11 @@ package Einfo is\n --    Is_Enumeration_Type (synthesized)\n --       Defined in all entities, true for enumeration types and subtypes\n \n+--    Is_Exception_Handler (Flag286)\n+--       Defined in blocks. Set if the block serves only as a scope of an\n+--       exception handler with a choice parameter. Such a block does not\n+--       physically appear in the tree.\n+\n --    Is_Exported (Flag99)\n --       Defined in all entities. Set if the entity is exported. For now we\n --       only allow the export of constants, exceptions, functions, procedures\n@@ -5621,6 +5626,7 @@ package Einfo is\n    --    Discard_Names                       (Flag88)\n    --    Has_Master_Entity                   (Flag21)\n    --    Has_Nested_Block_With_Handler       (Flag101)\n+   --    Is_Exception_Handler                (Flag286)\n    --    Sec_Stack_Needed_For_Return         (Flag167)\n    --    Uses_Sec_Stack                      (Flag95)\n    --    Scope_Depth                         (synth)\n@@ -6971,6 +6977,7 @@ package Einfo is\n    function Is_Dispatching_Operation            (Id : E) return B;\n    function Is_Eliminated                       (Id : E) return B;\n    function Is_Entry_Formal                     (Id : E) return B;\n+   function Is_Exception_Handler                (Id : E) return B;\n    function Is_Exported                         (Id : E) return B;\n    function Is_First_Subtype                    (Id : E) return B;\n    function Is_For_Access_Subtype               (Id : E) return B;\n@@ -7634,6 +7641,7 @@ package Einfo is\n    procedure Set_Is_Dispatching_Operation        (Id : E; V : B := True);\n    procedure Set_Is_Eliminated                   (Id : E; V : B := True);\n    procedure Set_Is_Entry_Formal                 (Id : E; V : B := True);\n+   procedure Set_Is_Exception_Handler            (Id : E; V : B := True);\n    procedure Set_Is_Exported                     (Id : E; V : B := True);\n    procedure Set_Is_First_Subtype                (Id : E; V : B := True);\n    procedure Set_Is_For_Access_Subtype           (Id : E; V : B := True);\n@@ -8434,6 +8442,7 @@ package Einfo is\n    pragma Inline (Is_Entry);\n    pragma Inline (Is_Entry_Formal);\n    pragma Inline (Is_Enumeration_Type);\n+   pragma Inline (Is_Exception_Handler);\n    pragma Inline (Is_Exported);\n    pragma Inline (Is_First_Subtype);\n    pragma Inline (Is_Fixed_Point_Type);\n@@ -8923,6 +8932,7 @@ package Einfo is\n    pragma Inline (Set_Is_Dispatching_Operation);\n    pragma Inline (Set_Is_Eliminated);\n    pragma Inline (Set_Is_Entry_Formal);\n+   pragma Inline (Set_Is_Exception_Handler);\n    pragma Inline (Set_Is_Exported);\n    pragma Inline (Set_Is_First_Subtype);\n    pragma Inline (Set_Is_For_Access_Subtype);"}, {"sha": "04b60b5c59dff8f875adbdbf87a54fa004cb76f9", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a957f5dba310b73a1d040da70f6e4077379af4/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a957f5dba310b73a1d040da70f6e4077379af4/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=75a957f5dba310b73a1d040da70f6e4077379af4", "patch": "@@ -7993,14 +7993,22 @@ package body Exp_Ch7 is\n                elsif Ekind_In (S, E_Entry, E_Loop) then\n                   exit;\n \n-               --  In a procedure or a block, we release on exit of the\n-               --  procedure or block. ??? memory leak can be created by\n-               --  recursive calls.\n-\n-               elsif Ekind_In (S, E_Block, E_Procedure) then\n+               --  In a procedure or a block, release the sec stack on exit\n+               --  from the construct. Note that an exception handler with a\n+               --  choice parameter requires a declarative region in the form\n+               --  of a block. The block does not physically manifest in the\n+               --  tree as it only serves as a scope. Do not consider such a\n+               --  block because it will never release the sec stack.\n+\n+               --  ??? Memory leak can be created by recursive calls\n+\n+               elsif Ekind (S) = E_Procedure\n+                 or else (Ekind (S) = E_Block\n+                           and then not Is_Exception_Handler (S))\n+               then\n+                  Set_Uses_Sec_Stack (Current_Scope, False);\n                   Set_Uses_Sec_Stack (S, True);\n                   Check_Restriction (No_Secondary_Stack, Action);\n-                  Set_Uses_Sec_Stack (Current_Scope, False);\n                   exit;\n \n                else"}, {"sha": "e03ec1cb4ea9b92f1daf3052a904c64842a7fb52", "filename": "gcc/ada/sem_ch11.adb", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a957f5dba310b73a1d040da70f6e4077379af4/gcc%2Fada%2Fsem_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a957f5dba310b73a1d040da70f6e4077379af4/gcc%2Fada%2Fsem_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch11.adb?ref=75a957f5dba310b73a1d040da70f6e4077379af4", "patch": "@@ -214,6 +214,7 @@ package body Sem_Ch11 is\n                   H_Scope :=\n                     New_Internal_Entity\n                      (E_Block, Current_Scope, Sloc (Choice), 'E');\n+                  Set_Is_Exception_Handler (H_Scope);\n                end if;\n \n                Push_Scope (H_Scope);\n@@ -318,11 +319,11 @@ package body Sem_Ch11 is\n                                            N_Formal_Package_Declaration\n                            then\n                               Error_Msg_NE\n-                                (\"exception& is declared in \"  &\n-                                 \"generic formal package\", Id, Ent);\n+                                (\"exception& is declared in generic formal \"\n+                                 & \"package\", Id, Ent);\n                               Error_Msg_N\n-                                (\"\\and therefore cannot appear in \" &\n-                                 \"handler (RM 11.2(8))\", Id);\n+                                (\"\\and therefore cannot appear in handler \"\n+                                 & \"(RM 11.2(8))\", Id);\n                               exit;\n \n                            --  If the exception is declared in an inner\n@@ -362,8 +363,8 @@ package body Sem_Ch11 is\n \n             Analyze_Statements (Statements (Handler));\n \n-            --  If a choice was present, we created a special scope for it,\n-            --  so this is where we pop that special scope to get rid of it.\n+            --  If a choice was present, we created a special scope for it, so\n+            --  this is where we pop that special scope to get rid of it.\n \n             if Present (Choice) then\n                End_Scope;"}, {"sha": "859e67e3c676262b799cd54ac7952f339658df29", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a957f5dba310b73a1d040da70f6e4077379af4/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a957f5dba310b73a1d040da70f6e4077379af4/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=75a957f5dba310b73a1d040da70f6e4077379af4", "patch": "@@ -10847,10 +10847,10 @@ package body Sem_Ch13 is\n       --  After all forms of overriding have been resolved, a tagged type may\n       --  be left with a set of implicitly declared and possibly erroneous\n       --  abstract subprograms, null procedures and subprograms that require\n-      --  overriding. If this set contains fully conformat homographs, then one\n-      --  is chosen arbitrarily (already done during resolution), otherwise all\n-      --  remaining non-fully conformant homographs are hidden from visibility\n-      --  (Ada RM 8.3 12.3/2).\n+      --  overriding. If this set contains fully conformant homographs, then\n+      --  one is chosen arbitrarily (already done during resolution), otherwise\n+      --  all remaining non-fully conformant homographs are hidden from\n+      --  visibility (Ada RM 8.3 12.3/2).\n \n       if Is_Tagged_Type (E) then\n          Hide_Non_Overridden_Subprograms (E);"}, {"sha": "cc82e710795ddfaab31ce7b553dab6dc72a4bbe1", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a957f5dba310b73a1d040da70f6e4077379af4/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a957f5dba310b73a1d040da70f6e4077379af4/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=75a957f5dba310b73a1d040da70f6e4077379af4", "patch": "@@ -5962,16 +5962,6 @@ package body Sem_Ch3 is\n       if Null_Exclusion_Present (Type_Definition (N)) then\n          Set_Can_Never_Be_Null (Derived_Type);\n \n-         --  What is with the \"AND THEN FALSE\" here ???\n-\n-         if Can_Never_Be_Null (Parent_Type)\n-           and then False\n-         then\n-            Error_Msg_NE\n-              (\"`NOT NULL` not allowed (& already excludes null)\",\n-                N, Parent_Type);\n-         end if;\n-\n       elsif Can_Never_Be_Null (Parent_Type) then\n          Set_Can_Never_Be_Null (Derived_Type);\n       end if;\n@@ -5983,6 +5973,7 @@ package body Sem_Ch3 is\n       --  ??? THIS CODE SHOULD NOT BE HERE REALLY.\n \n       Desig_Type := Designated_Type (Derived_Type);\n+\n       if Is_Composite_Type (Desig_Type)\n         and then (not Is_Array_Type (Desig_Type))\n         and then Has_Discriminants (Desig_Type)\n@@ -13048,6 +13039,18 @@ package body Sem_Ch3 is\n          T := Designated_Type (T);\n       end if;\n \n+      --  In an instance it may be necessary to retrieve the full view of a\n+      --  type with unknown discriminants. In other contexts the constraint\n+      --  is illegal.\n+\n+      if In_Instance\n+        and then Is_Private_Type (T)\n+        and then Has_Unknown_Discriminants (T)\n+        and then Present (Full_View (T))\n+      then\n+         T := Full_View (T);\n+      end if;\n+\n       --  Ada 2005 (AI-412): Constrained incomplete subtypes are illegal.\n       --  Avoid generating an error for access-to-incomplete subtypes.\n \n@@ -20745,7 +20748,13 @@ package body Sem_Ch3 is\n \n             when Private_Kind =>\n                Constrain_Discriminated_Type (Def_Id, S, Related_Nod);\n-               Set_Private_Dependents (Def_Id, New_Elmt_List);\n+\n+               --  The base type may be private but Def_Id may be a full view\n+               --  in an instance.\n+\n+               if Is_Private_Type (Def_Id) then\n+                  Set_Private_Dependents (Def_Id, New_Elmt_List);\n+               end if;\n \n                --  In case of an invalid constraint prevent further processing\n                --  since the type constructed is missing expected fields."}]}