{"sha": "63cf72605a8365bb2fb5f27a0ea6121c74d32ac7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNjZjcyNjA1YTgzNjViYjJmYjVmMjdhMGVhNjEyMWM3NGQzMmFjNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2012-10-30T16:51:12Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-10-30T16:51:12Z"}, "message": "* ipa-inline-analysis.c (eliminated_by_inlining_prob): Cleanup.\n\nFrom-SVN: r192991", "tree": {"sha": "6c4362f693319e55f9260978be0a1bcb1af32e73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c4362f693319e55f9260978be0a1bcb1af32e73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63cf72605a8365bb2fb5f27a0ea6121c74d32ac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63cf72605a8365bb2fb5f27a0ea6121c74d32ac7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63cf72605a8365bb2fb5f27a0ea6121c74d32ac7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63cf72605a8365bb2fb5f27a0ea6121c74d32ac7/comments", "author": null, "committer": null, "parents": [{"sha": "e152d14c2f42038d518c985eb3f4a830323791b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e152d14c2f42038d518c985eb3f4a830323791b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e152d14c2f42038d518c985eb3f4a830323791b3"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "e7e3ec314431eabbd74b4b947a4a3bbf23011198", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63cf72605a8365bb2fb5f27a0ea6121c74d32ac7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63cf72605a8365bb2fb5f27a0ea6121c74d32ac7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63cf72605a8365bb2fb5f27a0ea6121c74d32ac7", "patch": "@@ -1,3 +1,7 @@\n+2012-10-30  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-inline-analysis.c (eliminated_by_inlining_prob): Cleanup.\n+\n 2012-10-30  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-ssa-loop-niter.c (number_of_iterations_exit): New parameter"}, {"sha": "8baaced2bd997addd0040a3053bf85b4549799f6", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63cf72605a8365bb2fb5f27a0ea6121c74d32ac7/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63cf72605a8365bb2fb5f27a0ea6121c74d32ac7/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=63cf72605a8365bb2fb5f27a0ea6121c74d32ac7", "patch": "@@ -1548,6 +1548,7 @@ static int\n eliminated_by_inlining_prob (gimple stmt)\n {\n   enum gimple_code code = gimple_code (stmt);\n+  enum tree_code rhs_code;\n \n   if (!optimize)\n     return 0;\n@@ -1560,14 +1561,16 @@ eliminated_by_inlining_prob (gimple stmt)\n \tif (gimple_num_ops (stmt) != 2)\n \t  return 0;\n \n+\trhs_code = gimple_assign_rhs_code (stmt);\n+\n \t/* Casts of parameters, loads from parameters passed by reference\n \t   and stores to return value or parameters are often free after\n \t   inlining dua to SRA and further combining.\n \t   Assume that half of statements goes away.  */\n-\tif (gimple_assign_rhs_code (stmt) == CONVERT_EXPR\n-\t    || gimple_assign_rhs_code (stmt) == NOP_EXPR\n-\t    || gimple_assign_rhs_code (stmt) == VIEW_CONVERT_EXPR\n-\t    || gimple_assign_rhs_code (stmt) == ADDR_EXPR\n+\tif (rhs_code == CONVERT_EXPR\n+\t    || rhs_code == NOP_EXPR\n+\t    || rhs_code == VIEW_CONVERT_EXPR\n+\t    || rhs_code == ADDR_EXPR\n \t    || gimple_assign_rhs_class (stmt) == GIMPLE_SINGLE_RHS)\n \t  {\n \t    tree rhs = gimple_assign_rhs1 (stmt);\n@@ -1592,12 +1595,9 @@ eliminated_by_inlining_prob (gimple stmt)\n \t\ttree op = get_base_address (TREE_OPERAND (inner_rhs, 0));\n \t\tif (TREE_CODE (op) == PARM_DECL)\n \t\t  rhs_free = true;\n-\t        else if (TREE_CODE (op) == MEM_REF)\n-\t\t  {\n-\t\t    op = get_base_address (TREE_OPERAND (op, 0));\n-\t\t    if (unmodified_parm (stmt, op))\n-\t\t      rhs_free = true;\n-\t\t  }\n+\t        else if (TREE_CODE (op) == MEM_REF\n+\t\t\t && unmodified_parm (stmt, TREE_OPERAND (op, 0)))\n+\t\t  rhs_free = true;\n \t      }\n \n \t    /* When parameter is not SSA register because its address is taken"}]}