{"sha": "54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRlYTFkZTlmMzlhMTBhNGYzMjljOGYzYzRhNTRhZDhjZDMxZDhmYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-03-20T19:21:31Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-03-20T19:21:31Z"}, "message": "Warning fixes:\n\n        * c-lex.c (yylex): Remove unused variable `bytes'.\n        * flow.c (print_rtl_with_bb): Cast the return value of alloca.\n        * function.c (assign_parms): Wrap variable `varargs_setup' in\n        macro SETUP_INCOMING_VARARGS.\n        (thread_prologue_and_epilogue_insns): Mark parameter `f' with\n        ATTRIBUTE_UNUSED.\n        * local-alloc.c (no_equiv): Likewise for parameter `store'.\n        * sched.c (schedule_insns): Remove unused variables `insn' and `next'.\n        * tlink.c (symbol_hash_newfunc, symbol_hash_lookup,\n        file_hash_newfunc, file_hash_lookup, demangled_hash_newfunc,\n        demangled_hash_lookup, symbol_push, symbol_pop, file_push,\n        file_pop, tlink_init, tlink_execute, frob_extension,\n        obstack_fgets, tfgets, pfgets, freadsym, read_repo_file,\n        maybe_tweak, recompile_files, read_repo_files,\n        demangle_new_symbols, scan_linker_output): Add static prototype.\n        (symbol_hash_newfunc, file_hash_newfunc, demangled_hash_newfunc):\n        Make the third argument a `hash_table_key'.\n        * toplev.c (debug_start_source_file): Mark parameter `filename'\n        with ATTRIBUTE_UNUSED.\n\nFrom-SVN: r25871", "tree": {"sha": "ccbeb8c4f275846b9aaf9e86072c1f0572291df3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccbeb8c4f275846b9aaf9e86072c1f0572291df3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa/comments", "author": null, "committer": null, "parents": [{"sha": "59d40964295f794d4ea7fc0d9a459c4ffccda9f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d40964295f794d4ea7fc0d9a459c4ffccda9f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59d40964295f794d4ea7fc0d9a459c4ffccda9f9"}], "stats": {"total": 99, "additions": 80, "deletions": 19}, "files": [{"sha": "42e615594a93c364260d02e2a2e1be13fb075e66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa", "patch": "@@ -1,3 +1,32 @@\n+Sat Mar 20 21:46:06 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-lex.c (yylex): Remove unused variable `bytes'.\n+\n+\t* flow.c (print_rtl_with_bb): Cast the return value of alloca.\n+\n+\t* function.c (assign_parms): Wrap variable `varargs_setup' in\n+\tmacro SETUP_INCOMING_VARARGS.\n+\t(thread_prologue_and_epilogue_insns): Mark parameter `f' with\n+\tATTRIBUTE_UNUSED.\n+\n+\t* local-alloc.c (no_equiv): Likewise for parameter `store'.\n+\n+\t* sched.c (schedule_insns): Remove unused variables `insn' and `next'.\n+\n+\t* tlink.c (symbol_hash_newfunc, symbol_hash_lookup,\n+ \tfile_hash_newfunc, file_hash_lookup, demangled_hash_newfunc,\n+ \tdemangled_hash_lookup, symbol_push, symbol_pop, file_push,\n+ \tfile_pop, tlink_init, tlink_execute, frob_extension,\n+ \tobstack_fgets, tfgets, pfgets, freadsym, read_repo_file,\n+ \tmaybe_tweak, recompile_files, read_repo_files,\n+ \tdemangle_new_symbols, scan_linker_output): Add static prototype.\n+\n+\t(symbol_hash_newfunc, file_hash_newfunc, demangled_hash_newfunc):\n+\tMake the third argument a `hash_table_key'.\n+\n+\t* toplev.c (debug_start_source_file): Mark parameter `filename'\n+\twith ATTRIBUTE_UNUSED.\n+\n Sun Mar 21 02:28:21 1999  Andreas Schwab  <schwab@issan.cs.uni-dortmund.de>\n \n \t* tm.texi (Varargs): Don't split argument of @item across lines."}, {"sha": "27c65f3fa27f20f912a3b00b5f058f8f7b541de8", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa", "patch": "@@ -1694,7 +1694,7 @@ yylex ()\n \t    int spec_long = 0;\n \t    int spec_long_long = 0;\n \t    int spec_imag = 0;\n-\t    int bytes, warn, i;\n+\t    int warn, i;\n \n \t    traditional_type = ansi_type = type = NULL_TREE;\n \t    while (1)"}, {"sha": "1515d418de8bf1a7d9e868798a4fed706efb4f61", "filename": "gcc/flow.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa", "patch": "@@ -4268,8 +4268,10 @@ print_rtl_with_bb (outf, rtx_first)\n       int i;\n       enum bb_state { NOT_IN_BB, IN_ONE_BB, IN_MULTIPLE_BB };\n       int max_uid = get_max_uid ();\n-      basic_block *start = alloca (max_uid * sizeof (basic_block));\n-      basic_block *end = alloca (max_uid * sizeof (basic_block));\n+      basic_block *start = (basic_block *)\n+\talloca (max_uid * sizeof (basic_block));\n+      basic_block *end = (basic_block *)\n+\talloca (max_uid * sizeof (basic_block));\n       enum bb_state *in_bb_p = (enum bb_state *)\n \talloca (max_uid * sizeof (enum bb_state));\n "}, {"sha": "1319fb9bf7c17f17628357944bef6940779c3f97", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa", "patch": "@@ -4028,7 +4028,9 @@ assign_parms (fndecl, second_time)\n   /* This is a dummy PARM_DECL that we used for the function result if \n      the function returns a structure.  */\n   tree function_result_decl = 0;\n+#ifdef SETUP_INCOMING_VARARGS\n   int varargs_setup = 0;\n+#endif\n   rtx conversion_insns = 0;\n \n   /* Nonzero if the last arg is named `__builtin_va_alist',\n@@ -6451,7 +6453,7 @@ contains (insn, vec)\n \n void\n thread_prologue_and_epilogue_insns (f)\n-     rtx f;\n+     rtx f ATTRIBUTE_UNUSED;\n {\n   int insertted = 0;\n "}, {"sha": "598d405198f7e86e6c8ce99d068b8b4cacf7ba50", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa", "patch": "@@ -983,7 +983,7 @@ update_equiv_regs ()\n    but needs to be there because this function is called from note_stores.  */\n static void\n no_equiv (reg, store)\n-     rtx reg, store;\n+     rtx reg, store ATTRIBUTE_UNUSED;\n {\n   int regno;\n   rtx list;"}, {"sha": "3701ac624be7bf9472b5f2851f9a033739d05fea", "filename": "gcc/sched.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa/gcc%2Fsched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa/gcc%2Fsched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched.c?ref=54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa", "patch": "@@ -4327,8 +4327,6 @@ schedule_insns (dump_file)\n \n   for (b = 0; b < n_basic_blocks; b++)\n     {\n-      rtx insn, next;\n-\n       note_list = 0;\n \n       split_block_insns (b, reload_completed == 0 || ! flag_schedule_insns);"}, {"sha": "29e2deb778eef21c421995766116cee9ceb7dea5", "filename": "gcc/tlink.c", "status": "modified", "additions": 41, "deletions": 11, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa/gcc%2Ftlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa/gcc%2Ftlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftlink.c?ref=54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa", "patch": "@@ -76,14 +76,46 @@ typedef struct demangled_hash_entry\n \n static struct hash_table symbol_table;\n \n+static struct hash_entry * symbol_hash_newfunc PARAMS ((struct hash_entry *,\n+\t\t\t\t\t\t\tstruct hash_table *,\n+\t\t\t\t\t\t\thash_table_key));\n+static struct symbol_hash_entry * symbol_hash_lookup PARAMS ((const char *,\n+\t\t\t\t\t\t\t      boolean));\n+static struct hash_entry * file_hash_newfunc PARAMS ((struct hash_entry *,\n+\t\t\t\t\t\t      struct hash_table *,\n+\t\t\t\t\t\t      hash_table_key));\n+static struct file_hash_entry * file_hash_lookup PARAMS ((const char *));\n+static struct hash_entry * demangled_hash_newfunc PARAMS ((struct hash_entry *,\n+\t\t\t\t\t\t\t   struct hash_table *,\n+\t\t\t\t\t\t\t   hash_table_key));\n+static struct demangled_hash_entry *\n+  demangled_hash_lookup PARAMS ((const char *, boolean));\n+static void symbol_push PARAMS ((symbol *));\n+static symbol * symbol_pop PARAMS ((void));\n+static void file_push PARAMS ((file *));\n+static file * file_pop PARAMS ((void));\n+static void tlink_init PARAMS ((void));\n+static int tlink_execute PARAMS ((char *, char **, char *));\n+static char * frob_extension PARAMS ((char *, const char *));\n+static char * obstack_fgets PARAMS ((FILE *, struct obstack *));\n+static char * tfgets PARAMS ((FILE *));\n+static char * pfgets PARAMS ((FILE *));\n+static void freadsym PARAMS ((FILE *, file *, int));\n+static void read_repo_file PARAMS ((file *));\n+static void maybe_tweak PARAMS ((char *, file *));\n+static int recompile_files PARAMS ((void));\n+static int read_repo_files PARAMS ((char **));\n+static void demangle_new_symbols PARAMS ((void));\n+static int scan_linker_output PARAMS ((const char *));\n+\n /* Create a new entry for the symbol hash table.\n    Passed to hash_table_init.  */\n \n static struct hash_entry *\n symbol_hash_newfunc (entry, table, string)\n      struct hash_entry *entry;\n      struct hash_table *table;\n-     const char *string;\n+     hash_table_key string;\n {\n   struct symbol_hash_entry *ret = (struct symbol_hash_entry *) entry;\n   if (ret == NULL)\n@@ -94,8 +126,7 @@ symbol_hash_newfunc (entry, table, string)\n \treturn NULL;\n     }\n   ret = ((struct symbol_hash_entry *)\n-     \t hash_newfunc ((struct hash_entry *) ret, table, \n-\t\t       (hash_table_key) string));\n+     \t hash_newfunc ((struct hash_entry *) ret, table, string));\n   ret->file = NULL;\n   ret->chosen = 0;\n   ret->tweaking = 0;\n@@ -124,7 +155,7 @@ static struct hash_entry *\n file_hash_newfunc (entry, table, string)\n      struct hash_entry *entry;\n      struct hash_table *table;\n-     const char *string;\n+     hash_table_key string;\n {\n    struct file_hash_entry *ret = (struct file_hash_entry *) entry;\n   if (ret == NULL)\n@@ -135,8 +166,7 @@ file_hash_newfunc (entry, table, string)\n \treturn NULL;\n     }\n   ret = ((struct file_hash_entry *)\n-     \t hash_newfunc ((struct hash_entry *) ret, table, \n-\t\t       (hash_table_key) string));\n+     \t hash_newfunc ((struct hash_entry *) ret, table, string));\n   ret->args = NULL;\n   ret->dir = NULL;\n   ret->main = NULL;\n@@ -164,7 +194,7 @@ static struct hash_entry *\n demangled_hash_newfunc (entry, table, string)\n      struct hash_entry *entry;\n      struct hash_table *table;\n-     const char *string;\n+     hash_table_key string;\n {\n   struct demangled_hash_entry *ret = (struct demangled_hash_entry *) entry;\n   if (ret == NULL)\n@@ -175,8 +205,7 @@ demangled_hash_newfunc (entry, table, string)\n \treturn NULL;\n     }\n   ret = ((struct demangled_hash_entry *)\n-     \t hash_newfunc ((struct hash_entry *) ret, table, \n-\t\t       (hash_table_key) string));\n+     \t hash_newfunc ((struct hash_entry *) ret, table, string));\n   ret->mangled = NULL;\n   return (struct hash_entry *) ret;\n }\n@@ -309,7 +338,8 @@ tlink_execute (prog, argv, redir)\n \n static char *\n frob_extension (s, ext)\n-     char *s, *ext;\n+     char *s;\n+     const char *ext;\n {\n   char *p = rindex (s, '/');\n   if (! p)\n@@ -578,7 +608,7 @@ demangle_new_symbols ()\n \n static int\n scan_linker_output (fname)\n-     char *fname;\n+     const char *fname;\n {\n   FILE *stream = fopen (fname, \"r\");\n   char *line;"}, {"sha": "abe818d24c5420d83d2d7ed23166a74ca5ddbcb4", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=54ea1de9f39a10a4f329c8f3c4a54ad8cd31d8fa", "patch": "@@ -5521,7 +5521,7 @@ print_switch_values (file, pos, max, indent, sep, term)\n \n void\n debug_start_source_file (filename)\n-     register char *filename;\n+     register char *filename ATTRIBUTE_UNUSED;\n {\n #ifdef DBX_DEBUGGING_INFO\n   if (write_symbols == DBX_DEBUG)"}]}