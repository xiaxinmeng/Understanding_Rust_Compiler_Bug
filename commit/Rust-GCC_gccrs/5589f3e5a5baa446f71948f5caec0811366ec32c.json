{"sha": "5589f3e5a5baa446f71948f5caec0811366ec32c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU4OWYzZTVhNWJhYTQ0NmY3MTk0OGY1Y2FlYzA4MTEzNjZlYzMyYw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-04-20T10:48:56Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-04-20T10:48:56Z"}, "message": "2004-04-20  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/print/attribute/EnumSyntax.java\n\t(getOffset): Made protected.\n\t* javax/print/attribute/HashAttributeSet.java\n\t(HashAttributeSet): Likewise.\n\t* javax/print/attribute/ResolutionSyntax.java\n\t(getFeedResolution): Fixed typo in exception name.\n\t(getCrossFeedResolution): Likewise.\n\t* javax/print/attribute/SetOfIntegerSyntax.java\n\t(SetOfIntegerSyntax): Fixed HTML entities in javadoc.\n\t* javax/print/attribute/TextSyntax.java\n\t(TextSyntax): Handle locale correctly.\n\t(hashCode): Calc better hashcode value.\n\t(equals): Fixed @return tag.\n\t(toString): New method.\n\nFrom-SVN: r80892", "tree": {"sha": "df1d948beb71fcf176c3edc5088b72eeb4a6cf7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df1d948beb71fcf176c3edc5088b72eeb4a6cf7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5589f3e5a5baa446f71948f5caec0811366ec32c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5589f3e5a5baa446f71948f5caec0811366ec32c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5589f3e5a5baa446f71948f5caec0811366ec32c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5589f3e5a5baa446f71948f5caec0811366ec32c/comments", "author": null, "committer": null, "parents": [{"sha": "0150fc2287534cf7b09ddf294ccd0c8f0ff3bdf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0150fc2287534cf7b09ddf294ccd0c8f0ff3bdf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0150fc2287534cf7b09ddf294ccd0c8f0ff3bdf5"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "434e91c1c3c3f040341773a0b88b8486bc2db6bc", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5589f3e5a5baa446f71948f5caec0811366ec32c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5589f3e5a5baa446f71948f5caec0811366ec32c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=5589f3e5a5baa446f71948f5caec0811366ec32c", "patch": "@@ -1,3 +1,20 @@\n+2004-04-20  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/print/attribute/EnumSyntax.java\n+\t(getOffset): Made protected.\n+\t* javax/print/attribute/HashAttributeSet.java\n+\t(HashAttributeSet): Likewise.\n+\t* javax/print/attribute/ResolutionSyntax.java\n+\t(getFeedResolution): Fixed typo in exception name.\n+\t(getCrossFeedResolution): Likewise.\n+\t* javax/print/attribute/SetOfIntegerSyntax.java\n+\t(SetOfIntegerSyntax): Fixed HTML entities in javadoc.\n+\t* javax/print/attribute/TextSyntax.java\n+\t(TextSyntax): Handle locale correctly.\n+\t(hashCode): Calc better hashcode value.\n+\t(equals): Fixed @return tag.\n+\t(toString): New method.\n+\n 2004-04-20  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/nio/FileLockImpl.java"}, {"sha": "aa82ccc6bb855e5c2d350c9e043838fd93933390", "filename": "libjava/javax/print/attribute/EnumSyntax.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5589f3e5a5baa446f71948f5caec0811366ec32c/libjava%2Fjavax%2Fprint%2Fattribute%2FEnumSyntax.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5589f3e5a5baa446f71948f5caec0811366ec32c/libjava%2Fjavax%2Fprint%2Fattribute%2FEnumSyntax.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FEnumSyntax.java?ref=5589f3e5a5baa446f71948f5caec0811366ec32c", "patch": "@@ -139,7 +139,7 @@ protected EnumSyntax[] getEnumValueTable()\n     return null;\n   }\n \n-  public int getOffset()\n+  protected int getOffset()\n   {\n     return 0;\n   }"}, {"sha": "af5b3d188f3cacf1aa8f8e98caa88fdac3af9a67", "filename": "libjava/javax/print/attribute/HashAttributeSet.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5589f3e5a5baa446f71948f5caec0811366ec32c/libjava%2Fjavax%2Fprint%2Fattribute%2FHashAttributeSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5589f3e5a5baa446f71948f5caec0811366ec32c/libjava%2Fjavax%2Fprint%2Fattribute%2FHashAttributeSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FHashAttributeSet.java?ref=5589f3e5a5baa446f71948f5caec0811366ec32c", "patch": "@@ -151,7 +151,7 @@ protected HashAttributeSet(Attribute[] attributes, Class interfaceName)\n    * @exception ClassCastException if any element of attributes is not an\n    * interface of interfaceName\n    */\n-  public HashAttributeSet(AttributeSet attributes, Class interfaceName)\n+  protected HashAttributeSet(AttributeSet attributes, Class interfaceName)\n   {\n     this(interfaceName);\n     "}, {"sha": "4eba85499ffb75f5964d54696146e12f7c1f453c", "filename": "libjava/javax/print/attribute/ResolutionSyntax.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5589f3e5a5baa446f71948f5caec0811366ec32c/libjava%2Fjavax%2Fprint%2Fattribute%2FResolutionSyntax.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5589f3e5a5baa446f71948f5caec0811366ec32c/libjava%2Fjavax%2Fprint%2Fattribute%2FResolutionSyntax.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FResolutionSyntax.java?ref=5589f3e5a5baa446f71948f5caec0811366ec32c", "patch": "@@ -104,7 +104,7 @@ public boolean equals(Object obj)\n    *\n    * @return the resolution\n    *\n-   * @exception IllegalArgumenException if units < 1\n+   * @exception IllegalArgumentException if units < 1\n    */\n   public int getCrossFeedResolution(int units)\n   {\n@@ -130,7 +130,7 @@ protected int getCrossFeedResolutionDphi()\n    *\n    * @return the resolution\n    *\n-   * @exception IllegalArgumenException if units < 1\n+   * @exception IllegalArgumentException if units < 1\n    */\n   public int getFeedResolution(int units)\n   {"}, {"sha": "7c022125f454bd01069e5a78f33f8377f870b920", "filename": "libjava/javax/print/attribute/SetOfIntegerSyntax.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5589f3e5a5baa446f71948f5caec0811366ec32c/libjava%2Fjavax%2Fprint%2Fattribute%2FSetOfIntegerSyntax.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5589f3e5a5baa446f71948f5caec0811366ec32c/libjava%2Fjavax%2Fprint%2Fattribute%2FSetOfIntegerSyntax.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FSetOfIntegerSyntax.java?ref=5589f3e5a5baa446f71948f5caec0811366ec32c", "patch": "@@ -148,8 +148,8 @@ else if (members[index].length == 2)\n    * @param lowerBound the lower bound value\n    * @param upperBound the upper bound value\n    *\n-   * @exception IllegalArgumentException if lowerBound <= uppbound\n-   * and lowerBound < 0\n+   * @exception IllegalArgumentException if lowerBound &lt;= upperbound\n+   * and lowerBound &lt; 0\n    */\n   protected SetOfIntegerSyntax(int lowerBound, int upperBound)\n   {"}, {"sha": "ebad88b654189252ba8fca318c5b9345c5d5a569", "filename": "libjava/javax/print/attribute/TextSyntax.java", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5589f3e5a5baa446f71948f5caec0811366ec32c/libjava%2Fjavax%2Fprint%2Fattribute%2FTextSyntax.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5589f3e5a5baa446f71948f5caec0811366ec32c/libjava%2Fjavax%2Fprint%2Fattribute%2FTextSyntax.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FTextSyntax.java?ref=5589f3e5a5baa446f71948f5caec0811366ec32c", "patch": "@@ -1,5 +1,5 @@\n /* TextSyntax.java -- \n-   Copyright (C) 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -57,12 +57,12 @@ public abstract class TextSyntax implements Cloneable, Serializable\n    * @param value the value for this syntax\n    * @param locale the locale to use\n    *\n-   * @exception NullPointerException if value is null\n+   * @exception NullPointerException if value and/or locale is null\n    */\n   protected TextSyntax(String value, Locale locale)\n   {\n-    if (value == null)\n-      throw new NullPointerException(\"value may not be null\");\n+    if (value == null || locale == null)\n+      throw new NullPointerException(\"value and/or locale may not be null\");\n \n     this.value = value;\n     this.locale = locale;\n@@ -95,15 +95,15 @@ public Locale getLocale()\n    */\n   public int hashCode()\n   {\n-    return value.hashCode() + locale.hashCode();\n+    return value.hashCode() ^ locale.hashCode();\n   }\n \n   /**\n    * Tests of obj is equal to this object.\n    *\n    * @param obj the object to test\n    *\n-   * @returns true if both objects are equal, false otherwise.\n+   * @return true if both objects are equal, false otherwise.\n    */\n   public boolean equals(Object obj)\n   {\n@@ -115,4 +115,12 @@ public boolean equals(Object obj)\n     return (value.equals(tmp.getValue())\n             && locale.equals(tmp.getLocale()));\n   }\n+\n+  /**\n+   * Returns a string representing the object.\n+   */\n+  public String toString()\n+  {\n+    return value;\n+  }\n }"}]}