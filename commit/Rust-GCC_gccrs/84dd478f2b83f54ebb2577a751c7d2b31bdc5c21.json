{"sha": "84dd478f2b83f54ebb2577a751c7d2b31bdc5c21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRkZDQ3OGYyYjgzZjU0ZWJiMjU3N2E3NTFjN2QyYjMxYmRjNWMyMQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2004-10-23T18:00:01Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2004-10-23T18:00:01Z"}, "message": "tree-ssa-dom.c (record_equality): Use loop depth to determine which way to record the equality as well.\n\n2004-10-23  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-ssa-dom.c (record_equality): Use loop depth to determine\n\twhich way to record the equality as well.\n\t(loop_depth_of_name): New function.\n\nFrom-SVN: r89491", "tree": {"sha": "d5d749747f359eaf8ed7298e51dda7810c2e1aa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5d749747f359eaf8ed7298e51dda7810c2e1aa8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84dd478f2b83f54ebb2577a751c7d2b31bdc5c21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84dd478f2b83f54ebb2577a751c7d2b31bdc5c21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84dd478f2b83f54ebb2577a751c7d2b31bdc5c21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84dd478f2b83f54ebb2577a751c7d2b31bdc5c21/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee742c05a25dc4f364c345b1675203c402a5cda4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee742c05a25dc4f364c345b1675203c402a5cda4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee742c05a25dc4f364c345b1675203c402a5cda4"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "10a63b387639b8478448cd90429a49e444a8f65d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84dd478f2b83f54ebb2577a751c7d2b31bdc5c21/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84dd478f2b83f54ebb2577a751c7d2b31bdc5c21/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84dd478f2b83f54ebb2577a751c7d2b31bdc5c21", "patch": "@@ -1,3 +1,9 @@\n+2004-10-23  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree-ssa-dom.c (record_equality): Use loop depth to determine\n+\twhich way to record the equality as well.\n+\t(loop_depth_of_name): New function.\n+\n 2004-10-23  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR middle-end/17793"}, {"sha": "edd74e03c2e5e5ff7b274f6d2d1e74669ddaed5a", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84dd478f2b83f54ebb2577a751c7d2b31bdc5c21/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84dd478f2b83f54ebb2577a751c7d2b31bdc5c21/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=84dd478f2b83f54ebb2577a751c7d2b31bdc5c21", "patch": "@@ -1491,6 +1491,35 @@ record_const_or_copy_1 (tree x, tree y, tree prev_x)\n   VARRAY_PUSH_TREE (const_and_copies_stack, x);\n }\n \n+\n+/* Return the loop depth of the basic block of the defining statement of X.\n+   This number should not be treated as absolutely correct because the loop\n+   information may not be completely up-to-date when dom runs.  However, it\n+   will be relatively correct, and as more passes are taught to keep loop info\n+   up to date, the result will become more and more accurate.  */\n+\n+static int\n+loop_depth_of_name (tree x)\n+{\n+  tree defstmt;\n+  basic_block defbb;\n+\n+  /* If it's not an SSA_NAME, we have no clue where the definition is.  */\n+  if (TREE_CODE (x) != SSA_NAME)\n+    return 0;\n+\n+  /* Otherwise return the loop depth of the defining statement's bb.\n+     Note that there may not actually be a bb for this statement, if the\n+     ssa_name is live on entry.  */\n+  defstmt = SSA_NAME_DEF_STMT (x);\n+  defbb = bb_for_stmt (defstmt);\n+  if (!defbb)\n+    return 0;\n+\n+  return defbb->loop_depth;\n+}\n+\n+\n /* Record that X is equal to Y in const_and_copies.  Record undo\n    information in the block-local varray.  */\n \n@@ -1522,12 +1551,13 @@ record_equality (tree x, tree y)\n   if (TREE_CODE (y) == SSA_NAME)\n     prev_y = SSA_NAME_VALUE (y);\n \n-  /* If one of the previous values is invariant, then use that.\n+  /* If one of the previous values is invariant, or invariant in more loops\n+     (by depth), then use that.\n      Otherwise it doesn't matter which value we choose, just so\n      long as we canonicalize on one value.  */\n   if (TREE_INVARIANT (y))\n     ;\n-  else if (TREE_INVARIANT (x))\n+  else if (TREE_INVARIANT (x) || (loop_depth_of_name (x) <= loop_depth_of_name (y)))\n     prev_x = x, x = y, y = prev_x, prev_x = prev_y;\n   else if (prev_x && TREE_INVARIANT (prev_x))\n     x = y, y = prev_x, prev_x = prev_y;"}]}