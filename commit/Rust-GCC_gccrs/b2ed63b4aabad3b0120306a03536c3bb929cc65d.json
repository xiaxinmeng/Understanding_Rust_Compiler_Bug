{"sha": "b2ed63b4aabad3b0120306a03536c3bb929cc65d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJlZDYzYjRhYWJhZDNiMDEyMDMwNmEwMzUzNmMzYmI5MjljYzY1ZA==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2006-05-04T18:44:53Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2006-05-04T18:44:53Z"}, "message": "[multiple changes]\n\n2006-05-04  Andrew Haley  <aph@redhat.com>\n\n        * class.c (make_field_value): Always build_address_of fdecl if\n        there is an initializer.\n\n2006-05-03  Andrew Haley  <aph@redhat.com>\n\n        PR libgcj/27352\n        * expr.c (maybe_rewrite_invocation): New function.\n        (rewrite_arglist_getclass): Likewise.\n        (rules): New.\n        (expand_invoke): Call maybe_rewrite_invocation.\n        * parse.y (patch_invoke): Likewise.\n        * java-tree.h: (maybe_rewrite_invocation): New function.\n\n2006-05-03  Andrew Haley  <aph@redhat.com>\n\n        PR libgcj/27352\n        * java/lang/Class.java (getClassLoader(Class)): New.\n        forName(String, Class): New.\n        * java/lang/natClass.cc (getClassLoader(Class)): New.\n\n2006-05-02  Andrew Haley  <aph@redhat.com>\n\n        * prims.cc (_Jv_NewMultiArray): Check for phantom class.\n\nFrom-SVN: r113532", "tree": {"sha": "53c5cc5b6cfb9186e5f76d34fc5fec1124c7e943", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53c5cc5b6cfb9186e5f76d34fc5fec1124c7e943"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2ed63b4aabad3b0120306a03536c3bb929cc65d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2ed63b4aabad3b0120306a03536c3bb929cc65d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2ed63b4aabad3b0120306a03536c3bb929cc65d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2ed63b4aabad3b0120306a03536c3bb929cc65d/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7285117b4d52ba2ee8adc9f2c123ee08c48937c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7285117b4d52ba2ee8adc9f2c123ee08c48937c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7285117b4d52ba2ee8adc9f2c123ee08c48937c"}], "stats": {"total": 147, "additions": 143, "deletions": 4}, "files": [{"sha": "93deeb2f78f30a9e61ec55f1817dec31cffcc56a", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ed63b4aabad3b0120306a03536c3bb929cc65d/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ed63b4aabad3b0120306a03536c3bb929cc65d/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=b2ed63b4aabad3b0120306a03536c3bb929cc65d", "patch": "@@ -1,3 +1,18 @@\n+2006-05-04  Andrew Haley  <aph@redhat.com>\n+\n+\t* class.c (make_field_value): Always build_address_of fdecl if\n+\tthere is an initializer.\n+\n+2006-05-03  Andrew Haley  <aph@redhat.com>\n+\n+\tPR libgcj/27352\n+\t* expr.c (maybe_rewrite_invocation): New function.\n+\t(rewrite_arglist_getclass): Likewise.\n+\t(rules): New.\n+\t(expand_invoke): Call maybe_rewrite_invocation.\n+\t* parse.y (patch_invoke): Likewise.\n+\t* java-tree.h: (maybe_rewrite_invocation): New function.\n+\n 2006-04-21  Andrew Haley  <aph@redhat.com>\n \n \t* lang.c (java_init): Handle flag_indirect_classes."}, {"sha": "590925d3ab2861fbe08610f7d026c1baa2090f91", "filename": "gcc/java/class.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ed63b4aabad3b0120306a03536c3bb929cc65d/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ed63b4aabad3b0120306a03536c3bb929cc65d/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=b2ed63b4aabad3b0120306a03536c3bb929cc65d", "patch": "@@ -1344,7 +1344,8 @@ make_field_value (tree fdecl)\n \n   {\n     tree field_address = integer_zero_node;\n-    if (! flag_indirect_classes && FIELD_STATIC (fdecl))\n+    if ((DECL_INITIAL (fdecl) || ! flag_indirect_classes) \n+\t&& FIELD_STATIC (fdecl))\n       field_address = build_address_of (fdecl);\n \n     PUSH_FIELD_VALUE"}, {"sha": "b2e03fc862ecae209aa05047b4d7000364c73c96", "filename": "gcc/java/expr.c", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ed63b4aabad3b0120306a03536c3bb929cc65d/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ed63b4aabad3b0120306a03536c3bb929cc65d/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=b2ed63b4aabad3b0120306a03536c3bb929cc65d", "patch": "@@ -2020,6 +2020,86 @@ build_class_init (tree clas, tree expr)\n   return init;\n }\n \n+\f\n+\n+/* Rewrite expensive calls that require stack unwinding at runtime to\n+   cheaper alternatives.  The logic here performs thse\n+   transformations:\n+\n+   java.lang.Class.forName(\"foo\") -> java.lang.Class.forName(\"foo\", class$)\n+   java.lang.Class.getClassLoader() -> java.lang.Class.getClassLoader(class$)\n+\n+*/\n+\n+typedef struct\n+{\n+  const char *classname;\n+  const char *method;\n+  const char *signature;\n+  const char *new_signature;\n+  int flags;\n+  tree (*rewrite_arglist) (tree arglist);\n+} rewrite_rule;\n+\n+/* Add this.class to the end of an arglist.  */\n+\n+static tree \n+rewrite_arglist_getclass (tree arglist)\n+{\n+  return chainon (arglist, \n+\t\t  tree_cons (NULL_TREE, build_class_ref (output_class), NULL_TREE));\n+}\n+\n+static rewrite_rule rules[] =\n+  {{\"java.lang.Class\", \"getClassLoader\", \"()Ljava/lang/ClassLoader;\", \n+    \"(Ljava/lang/Class;)Ljava/lang/ClassLoader;\", \n+    ACC_FINAL|ACC_PRIVATE, rewrite_arglist_getclass},\n+   {\"java.lang.Class\", \"forName\", \"(Ljava/lang/String;)Ljava/lang/Class;\",\n+    \"(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class;\",\n+    ACC_FINAL|ACC_PRIVATE|ACC_STATIC, rewrite_arglist_getclass},\n+   {NULL, NULL, NULL, NULL, 0, NULL}};\n+\n+/* Scan the rules list for replacements for *METHOD_P and replace the\n+   args accordingly.  */\n+\n+void\n+maybe_rewrite_invocation (tree *method_p, tree *arg_list_p, \n+\t\t\t  tree *method_signature_p)\n+{\n+  tree context = DECL_NAME (TYPE_NAME (DECL_CONTEXT (*method_p)));\n+  rewrite_rule *p;\n+  for (p = rules; p->classname; p++)\n+    {\n+      if (get_identifier (p->classname) == context)\n+\t{\n+\t  tree method = DECL_NAME (*method_p);\n+\t  if (get_identifier (p->method) == method\n+\t      && get_identifier (p->signature) == *method_signature_p)\n+\t    {\n+\t      tree maybe_method\n+\t\t= lookup_java_method (DECL_CONTEXT (*method_p),\n+\t\t\t\t      method,\n+\t\t\t\t      get_identifier (p->new_signature));\n+\t      if (! maybe_method && ! flag_verify_invocations)\n+\t\t{\n+\t\t  maybe_method\n+\t\t    = add_method (DECL_CONTEXT (*method_p), p->flags, \n+\t\t\t\t  method, get_identifier (p->new_signature));\n+\t\t  DECL_EXTERNAL (maybe_method) = 1;\n+\t\t}\n+\t      *method_p = maybe_method;\n+\t      gcc_assert (*method_p);\n+\t      *arg_list_p = p->rewrite_arglist (*arg_list_p);\n+\t      *method_signature_p = get_identifier (p->new_signature);\n+\n+\t      break;\n+\t    }\n+\t}\n+    }\n+}\n+\n+\f\n+\n tree\n build_known_method_ref (tree method, tree method_type ATTRIBUTE_UNUSED,\n \t\t\ttree self_type, tree method_signature ATTRIBUTE_UNUSED,\n@@ -2394,6 +2474,8 @@ expand_invoke (int opcode, int method_ref_index, int nargs ATTRIBUTE_UNUSED)\n   arg_list = pop_arguments (TYPE_ARG_TYPES (method_type));\n   flush_quick_stack ();\n \n+  maybe_rewrite_invocation (&method, &arg_list, &method_signature);\n+\n   func = NULL_TREE;\n   if (opcode == OPCODE_invokestatic)\n     func = build_known_method_ref (method, method_type, self_type,"}, {"sha": "de826b9c52dec16e5c6c6da4aa0519fa4cbcb13b", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ed63b4aabad3b0120306a03536c3bb929cc65d/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ed63b4aabad3b0120306a03536c3bb929cc65d/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=b2ed63b4aabad3b0120306a03536c3bb929cc65d", "patch": "@@ -1241,6 +1241,7 @@ extern tree check_for_builtin (tree, tree);\n extern void initialize_builtins (void);\n \n extern tree lookup_name (tree);\n+extern void maybe_rewrite_invocation (tree *, tree *, tree *);\n extern tree build_known_method_ref (tree, tree, tree, tree, tree);\n extern tree build_class_init (tree, tree);\n extern int attach_init_test_initialization_flags (void **, void *);"}, {"sha": "a606d87869e52ced980e267cfa031aa4ae9f91ab", "filename": "gcc/java/parse.y", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ed63b4aabad3b0120306a03536c3bb929cc65d/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ed63b4aabad3b0120306a03536c3bb929cc65d/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=b2ed63b4aabad3b0120306a03536c3bb929cc65d", "patch": "@@ -11066,6 +11066,7 @@ patch_invoke (tree patch, tree method, tree args)\n \tcase INVOKE_STATIC:\n \t  {\n \t    tree signature = build_java_signature (TREE_TYPE (method));\n+\t    maybe_rewrite_invocation (&method, &args, &signature);\n \t    func = build_known_method_ref (method, TREE_TYPE (method),\n \t\t\t\t\t   DECL_CONTEXT (method),\n \t\t\t\t\t   signature, args);"}, {"sha": "19c06e16265507a1bc79bb5f8450be5f57d28cf0", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ed63b4aabad3b0120306a03536c3bb929cc65d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ed63b4aabad3b0120306a03536c3bb929cc65d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b2ed63b4aabad3b0120306a03536c3bb929cc65d", "patch": "@@ -1,3 +1,14 @@\n+2006-05-03  Andrew Haley  <aph@redhat.com>\n+\n+\tPR libgcj/27352\n+\t* java/lang/Class.java (getClassLoader(Class)): New.\n+\tforName(String, Class): New.\n+\t* java/lang/natClass.cc (getClassLoader(Class)): New.\n+\t\n+2006-05-02  Andrew Haley  <aph@redhat.com>\n+\n+\t* prims.cc (_Jv_NewMultiArray): Check for phantom class.\n+\n 2006-05-04  Tom Tromey  <tromey@redhat.com>\n \n \tPR libgcj/26861:"}, {"sha": "f6ca3deb949a5237c57b037eee4ea76829eaff28", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ed63b4aabad3b0120306a03536c3bb929cc65d/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ed63b4aabad3b0120306a03536c3bb929cc65d/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=b2ed63b4aabad3b0120306a03536c3bb929cc65d", "patch": "@@ -297,6 +297,8 @@ class java::lang::Class : public java::lang::Object\n   JArray<jclass> *getClasses (void);\n \n   java::lang::ClassLoader *getClassLoader (void);\n+private:\n+  java::lang::ClassLoader *getClassLoader (jclass caller);\n public:\n   // This is an internal method that circumvents the usual security\n   // checks when getting the class loader."}, {"sha": "66b85c7ce99247aed8d83bd26e0e9416d8cd2dcb", "filename": "libjava/java/lang/Class.java", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ed63b4aabad3b0120306a03536c3bb929cc65d/libjava%2Fjava%2Flang%2FClass.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ed63b4aabad3b0120306a03536c3bb929cc65d/libjava%2Fjava%2Flang%2FClass.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.java?ref=b2ed63b4aabad3b0120306a03536c3bb929cc65d", "patch": "@@ -111,6 +111,14 @@ private Class ()\n   public static native Class forName (String className)\n     throws ClassNotFoundException;\n \n+  // A private internal method that is called by compiler-generated code.\n+  private static Class forName (String className, Class caller)\n+    throws ClassNotFoundException\n+  {\n+    return forName(className, true, caller.getClassLoader());\n+  }\n+\n+\n   /**\n    * Use the specified classloader to load and link a class. If the loader\n    * is null, this uses the bootstrap class loader (provide the security\n@@ -185,6 +193,9 @@ private Class[] internalGetClasses()\n    */\n   public native ClassLoader getClassLoader ();\n   \n+  // A private internal method that is called by compiler-generated code.\n+  private final native ClassLoader getClassLoader (Class caller);\n+  \n   /**\n    * If this is an array, get the Class representing the type of array.\n    * Examples: \"[[Ljava.lang.String;\" would return \"[Ljava.lang.String;\", and"}, {"sha": "887088933f7f21748700842bdcbde81a54bdd49c", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ed63b4aabad3b0120306a03536c3bb929cc65d/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ed63b4aabad3b0120306a03536c3bb929cc65d/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=b2ed63b4aabad3b0120306a03536c3bb929cc65d", "patch": "@@ -115,9 +115,19 @@ java::lang::Class::getClassLoader (void)\n   if (s != NULL)\n     {\n       jclass caller = _Jv_StackTrace::GetCallingClass (&Class::class$);\n-      ClassLoader *caller_loader = NULL;\n-      if (caller)\n-\tcaller_loader = caller->getClassLoaderInternal();\n+      return getClassLoader (caller);\n+   }\n+\n+  return loader;\n+}\n+\n+java::lang::ClassLoader *\n+java::lang::Class::getClassLoader (jclass caller)\n+{\n+  java::lang::SecurityManager *s = java::lang::System::getSecurityManager();\n+  if (s != NULL)\n+    {\n+      ClassLoader *caller_loader = caller->getClassLoaderInternal();\n \n       // If the caller has a non-null class loader, and that loader\n       // is not this class' loader or an ancestor thereof, then do a"}, {"sha": "e0cdc0ae5856ce90efd8685951aef2d32e2dc66b", "filename": "libjava/prims.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ed63b4aabad3b0120306a03536c3bb929cc65d/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ed63b4aabad3b0120306a03536c3bb929cc65d/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=b2ed63b4aabad3b0120306a03536c3bb929cc65d", "patch": "@@ -762,6 +762,11 @@ _Jv_NewMultiArray (jclass type, jint dimensions, jint *sizes)\n jobject\n _Jv_NewMultiArray (jclass array_type, jint dimensions, ...)\n {\n+  // Creating an array of an unresolved type is impossible. So we throw\n+  // the NoClassDefFoundError.\n+  if (_Jv_IsPhantomClass(array_type))\n+    throw new java::lang::NoClassDefFoundError(array_type->getName());\n+\n   va_list args;\n   jint sizes[dimensions];\n   va_start (args, dimensions);"}]}