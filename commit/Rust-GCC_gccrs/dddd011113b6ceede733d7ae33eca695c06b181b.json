{"sha": "dddd011113b6ceede733d7ae33eca695c06b181b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRkZDAxMTExM2I2Y2VlZGU3MzNkN2FlMzNlY2E2OTVjMDZiMTgxYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-03-10T15:27:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-03-10T15:27:06Z"}, "message": "libstdc++: Implement LWG 3530 for concept-constrained comparisons\n\nThe proposed resolution for this library issue simplifies the\nconstraints for compare_three_way, ranges::equal_to, ranges::less etc.\nso that they do not work with types which are convertible to pointers\nbut which fail to meet the usual syntactic requirements for the\ncomparisons.\n\nThis affects the example in PR libstdc++/93628 but doesn't fix the\nproblem described in that report.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ranges_cmp.h (__eq_builtin_ptr_cmp): Remove.\n\t(ranges::equal_to, ranges::not_equal_to): Do not constrain\n\twith __eq_builtin_ptr_cmp.\n\t(ranges::less, ranges::greater, ranges::less_equal)\n\t(ranges::greater_equal): Do not constrain with\n\t__less_builtin_ptr_cmp.\n\t* libsupc++/compare (compare_three_way): Do not constrain with\n\t__3way_builtin_ptr_cmp.\n\t* testsuite/18_support/comparisons/object/builtin-ptr-three-way.cc: Moved to...\n\t* testsuite/18_support/comparisons/object/lwg3530.cc: ...here.\n\t* testsuite/20_util/function_objects/range.cmp/lwg3530.cc: New test.", "tree": {"sha": "1a05f9740b62a79cb64a9727bcf617c032629639", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a05f9740b62a79cb64a9727bcf617c032629639"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dddd011113b6ceede733d7ae33eca695c06b181b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dddd011113b6ceede733d7ae33eca695c06b181b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dddd011113b6ceede733d7ae33eca695c06b181b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dddd011113b6ceede733d7ae33eca695c06b181b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6073c9faaf2718062ecd8333336a0d3c1457132", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6073c9faaf2718062ecd8333336a0d3c1457132", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6073c9faaf2718062ecd8333336a0d3c1457132"}], "stats": {"total": 90, "additions": 68, "deletions": 22}, "files": [{"sha": "3f71d31e5a6a46a59da5c2e740e762ee9872ad0a", "filename": "libstdc++-v3/include/bits/ranges_cmp.h", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddd011113b6ceede733d7ae33eca695c06b181b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddd011113b6ceede733d7ae33eca695c06b181b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_cmp.h?ref=dddd011113b6ceede733d7ae33eca695c06b181b", "patch": "@@ -62,19 +62,9 @@ namespace ranges\n {\n   namespace __detail\n   {\n-    // BUILTIN-PTR-CMP(T, ==, U)\n-    template<typename _Tp, typename _Up>\n-      concept __eq_builtin_ptr_cmp\n-\t= requires (_Tp&& __t, _Up&& __u) { { __t == __u } -> same_as<bool>; }\n-\t  && convertible_to<_Tp, const volatile void*>\n-\t  && convertible_to<_Up, const volatile void*>\n-\t  && (! requires(_Tp&& __t, _Up&& __u)\n-\t      { operator==(std::forward<_Tp>(__t), std::forward<_Up>(__u)); }\n-\t      &&\n-\t      ! requires(_Tp&& __t, _Up&& __u)\n-\t      { std::forward<_Tp>(__t).operator==(std::forward<_Up>(__u)); });\n-\n     // BUILTIN-PTR-CMP(T, <, U)\n+    // This determines whether t < u results in a call to a built-in operator<\n+    // comparing pointers. It doesn't work for function pointers (PR 93628).\n     template<typename _Tp, typename _Up>\n       concept __less_builtin_ptr_cmp\n \t= requires (_Tp&& __t, _Up&& __u) { { __t < __u } -> same_as<bool>; }\n@@ -88,12 +78,14 @@ namespace ranges\n \n   // [range.cmp] Concept-constrained comparisons\n \n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 3530 BUILTIN-PTR-MEOW should not opt the type out of syntactic checks\n+\n   /// ranges::equal_to function object type.\n   struct equal_to\n   {\n     template<typename _Tp, typename _Up>\n       requires equality_comparable_with<_Tp, _Up>\n-\t|| __detail::__eq_builtin_ptr_cmp<_Tp, _Up>\n       constexpr bool\n       operator()(_Tp&& __t, _Up&& __u) const\n       noexcept(noexcept(std::declval<_Tp>() == std::declval<_Up>()))\n@@ -107,7 +99,6 @@ namespace ranges\n   {\n     template<typename _Tp, typename _Up>\n       requires equality_comparable_with<_Tp, _Up>\n-\t|| __detail::__eq_builtin_ptr_cmp<_Tp, _Up>\n       constexpr bool\n       operator()(_Tp&& __t, _Up&& __u) const\n       noexcept(noexcept(std::declval<_Up>() == std::declval<_Tp>()))\n@@ -121,7 +112,6 @@ namespace ranges\n   {\n     template<typename _Tp, typename _Up>\n       requires totally_ordered_with<_Tp, _Up>\n-\t|| __detail::__less_builtin_ptr_cmp<_Tp, _Up>\n       constexpr bool\n       operator()(_Tp&& __t, _Up&& __u) const\n       noexcept(noexcept(std::declval<_Tp>() < std::declval<_Up>()))\n@@ -150,7 +140,6 @@ namespace ranges\n   {\n     template<typename _Tp, typename _Up>\n       requires totally_ordered_with<_Tp, _Up>\n-\t|| __detail::__less_builtin_ptr_cmp<_Up, _Tp>\n       constexpr bool\n       operator()(_Tp&& __t, _Up&& __u) const\n       noexcept(noexcept(std::declval<_Up>() < std::declval<_Tp>()))\n@@ -164,7 +153,6 @@ namespace ranges\n   {\n     template<typename _Tp, typename _Up>\n       requires totally_ordered_with<_Tp, _Up>\n-\t|| __detail::__less_builtin_ptr_cmp<_Tp, _Up>\n       constexpr bool\n       operator()(_Tp&& __t, _Up&& __u) const\n       noexcept(noexcept(std::declval<_Tp>() < std::declval<_Up>()))\n@@ -178,7 +166,6 @@ namespace ranges\n   {\n     template<typename _Tp, typename _Up>\n       requires totally_ordered_with<_Tp, _Up>\n-\t|| __detail::__less_builtin_ptr_cmp<_Up, _Tp>\n       constexpr bool\n       operator()(_Tp&& __t, _Up&& __u) const\n       noexcept(noexcept(std::declval<_Up>() < std::declval<_Tp>()))"}, {"sha": "82d00889272e58ab1300ff7f657f76ea3bb791c1", "filename": "libstdc++-v3/libsupc++/compare", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddd011113b6ceede733d7ae33eca695c06b181b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddd011113b6ceede733d7ae33eca695c06b181b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare?ref=dddd011113b6ceede733d7ae33eca695c06b181b", "patch": "@@ -479,6 +479,9 @@ namespace std\n   namespace __detail\n   {\n     // BUILTIN-PTR-THREE-WAY(T, U)\n+    // This determines whether t <=> u results in a call to a built-in\n+    // operator<=> comparing pointers. It doesn't work for function pointers\n+    // (PR 93628).\n     template<typename _Tp, typename _Up>\n       concept __3way_builtin_ptr_cmp\n \t= requires(_Tp&& __t, _Up&& __u)\n@@ -491,12 +494,14 @@ namespace std\n \t  { static_cast<_Tp&&>(__t).operator<=>(static_cast<_Up&&>(__u)); };\n   } // namespace __detail\n \n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 3530 BUILTIN-PTR-MEOW should not opt the type out of syntactic checks\n+\n   // [cmp.object], typename compare_three_way\n   struct compare_three_way\n   {\n     template<typename _Tp, typename _Up>\n       requires three_way_comparable_with<_Tp, _Up>\n-      || __detail::__3way_builtin_ptr_cmp<_Tp, _Up>\n       constexpr auto\n       operator()(_Tp&& __t, _Up&& __u) const\n       noexcept(noexcept(std::declval<_Tp>() <=> std::declval<_Up>()))"}, {"sha": "103fe4c9130dd87eae37fc6ff686a0a10fe06622", "filename": "libstdc++-v3/testsuite/18_support/comparisons/object/lwg3530.cc", "status": "renamed", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddd011113b6ceede733d7ae33eca695c06b181b/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcomparisons%2Fobject%2Flwg3530.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddd011113b6ceede733d7ae33eca695c06b181b/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcomparisons%2Fobject%2Flwg3530.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcomparisons%2Fobject%2Flwg3530.cc?ref=dddd011113b6ceede733d7ae33eca695c06b181b", "patch": "@@ -20,6 +20,11 @@\n \n #include <compare>\n \n+template<typename C, typename T, typename U>\n+  concept comparable = requires (const C& cmp, const T& t, const U& u) {\n+    cmp(t, u);\n+  };\n+\n void\n test01()\n {\n@@ -39,7 +44,9 @@ test01()\n \n   long l;\n   // But <=> is valid and resolves to a builtin operator comparing pointers:\n-  auto c = &l <=> x;\n-  // So std::compare_three_way should be usable:\n-  auto c2 = std::compare_three_way()(&l, x);\n+  [[maybe_unused]] auto c = &l <=> x;\n+\n+  // But LWG 3530 says std::compare_three_way should not be usable:\n+  static_assert( ! comparable<std::compare_three_way, long*, X> );\n+  static_assert( ! comparable<std::compare_three_way, X, long*> );\n }", "previous_filename": "libstdc++-v3/testsuite/18_support/comparisons/object/builtin-ptr-three-way.cc"}, {"sha": "cd9664678cff0109fd7010cdf74c80426bb13ed1", "filename": "libstdc++-v3/testsuite/20_util/function_objects/range.cmp/lwg3530.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddd011113b6ceede733d7ae33eca695c06b181b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Flwg3530.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddd011113b6ceede733d7ae33eca695c06b181b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Flwg3530.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Flwg3530.cc?ref=dddd011113b6ceede733d7ae33eca695c06b181b", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+\n+#include <functional>\n+\n+struct S {\n+  constexpr operator int*() const { return nullptr; }\n+};\n+\n+void operator!=(S const&, S const&) {}\n+void operator>=(S const&, S const&) {}\n+\n+// S can be compared via conversion to int*\n+static_assert(S{} == S{});\n+static_assert(S{} <= S{});\n+// But concept not satisfied because operator!= returns void\n+static_assert(!std::equality_comparable_with<S,S>);\n+// But concept not satisfied because operator>= returns void\n+static_assert(!std::totally_ordered<S>);\n+\n+template<typename C, typename T>\n+  concept comparable = requires (const C& cmp, const T& t) { cmp(t, t); };\n+\n+// LWG 3530 says [range.cmp] comparisons should not work for S\n+static_assert( ! comparable<std::ranges::equal_to,      S> );\n+static_assert( ! comparable<std::ranges::not_equal_to,  S> );\n+static_assert( ! comparable<std::ranges::greater,       S> );\n+static_assert( ! comparable<std::ranges::less,          S> );\n+static_assert( ! comparable<std::ranges::greater_equal, S> );\n+static_assert( ! comparable<std::ranges::less_equal,    S> );"}]}