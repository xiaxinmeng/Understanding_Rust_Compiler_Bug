{"sha": "a0884cf09ee0b132930c5ad0f16736f9681f3b07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA4ODRjZjA5ZWUwYjEzMjkzMGM1YWQwZjE2NzM2Zjk2ODFmM2IwNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-04-04T15:44:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-04-04T15:44:20Z"}, "message": "libgomp.h (gomp_cpu_affinity, [...]): New extern decls.\n\n\t* libgomp.h (gomp_cpu_affinity, gomp_cpu_affinity_len): New extern\n\tdecls.\n\t(gomp_init_affinity, gomp_init_thread_affinity): New prototypes.\n\t* env.c (gomp_cpu_affinity, gomp_cpu_affinity_len): New variables.\n\t(parse_affinity): New function.\n\t(initialize_env): Call it and gomp_init_affinity.\n\t* team.c (gomp_team_start): If gomp_cpu_affinity != NULL,\n\tcreate new pthread_attr_t and call gomp_init_thread_affinity\n\ton it for each thread before passing the attribute to pthread_create.\n\t* config/linux/affinity.c: New file.\n\t* config/posix/affinity.c: New file.\n\t* configure.ac (HAVE_PTHREAD_AFFINITY_NP): New test.\n\t* configure: Rebuilt.\n\t* config.h.in: Rebuilt.\n\t* Makefile.am (libgomp_la_SOURCES): Add affinity.c.\n\t* Makefile.in: Rebuilt.\n\nFrom-SVN: r123494", "tree": {"sha": "ac821b38fafbfdcd8c9ded3ac49ca98b9174d998", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac821b38fafbfdcd8c9ded3ac49ca98b9174d998"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0884cf09ee0b132930c5ad0f16736f9681f3b07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0884cf09ee0b132930c5ad0f16736f9681f3b07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0884cf09ee0b132930c5ad0f16736f9681f3b07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0884cf09ee0b132930c5ad0f16736f9681f3b07/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6acd883864e3cff5895962772cca141bbbf3d2ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6acd883864e3cff5895962772cca141bbbf3d2ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6acd883864e3cff5895962772cca141bbbf3d2ad"}], "stats": {"total": 390, "additions": 382, "deletions": 8}, "files": [{"sha": "960c57ca92b048da0d8cf956e15e0e428c98128b", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0884cf09ee0b132930c5ad0f16736f9681f3b07/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0884cf09ee0b132930c5ad0f16736f9681f3b07/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=a0884cf09ee0b132930c5ad0f16736f9681f3b07", "patch": "@@ -1,3 +1,22 @@\n+2007-04-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libgomp.h (gomp_cpu_affinity, gomp_cpu_affinity_len): New extern\n+\tdecls.\n+\t(gomp_init_affinity, gomp_init_thread_affinity): New prototypes.\n+\t* env.c (gomp_cpu_affinity, gomp_cpu_affinity_len): New variables.\n+\t(parse_affinity): New function.\n+\t(initialize_env): Call it and gomp_init_affinity.\n+\t* team.c (gomp_team_start): If gomp_cpu_affinity != NULL,\n+\tcreate new pthread_attr_t and call gomp_init_thread_affinity\n+\ton it for each thread before passing the attribute to pthread_create.\n+\t* config/linux/affinity.c: New file.\n+\t* config/posix/affinity.c: New file.\n+\t* configure.ac (HAVE_PTHREAD_AFFINITY_NP): New test.\n+\t* configure: Rebuilt.\n+\t* config.h.in: Rebuilt.\n+\t* Makefile.am (libgomp_la_SOURCES): Add affinity.c.\n+\t* Makefile.in: Rebuilt.\n+\n 2007-03-23  Andreas Tobler  <a.tobler@schweiz.org>\n \n \t* testsuite/lib/libgomp.exp (libgomp_init): Add -shared-libgcc for"}, {"sha": "6963e105e62cbb6b9ad1bd754c975ea7cc1f9f03", "filename": "libgomp/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0884cf09ee0b132930c5ad0f16736f9681f3b07/libgomp%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0884cf09ee0b132930c5ad0f16736f9681f3b07/libgomp%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FMakefile.am?ref=a0884cf09ee0b132930c5ad0f16736f9681f3b07", "patch": "@@ -33,7 +33,7 @@ libgomp_la_LDFLAGS = $(libgomp_version_info) $(libgomp_version_script)\n \n libgomp_la_SOURCES = alloc.c barrier.c critical.c env.c error.c iter.c \\\n \tloop.c ordered.c parallel.c sections.c single.c team.c work.c \\\n-\tlock.c mutex.c proc.c sem.c bar.c time.c fortran.c\n+\tlock.c mutex.c proc.c sem.c bar.c time.c fortran.c affinity.c\n \n nodist_noinst_HEADERS = libgomp_f.h\n nodist_libsubinclude_HEADERS = omp.h"}, {"sha": "f41ca1707f6cb97072202f166e98cc2df902dc0e", "filename": "libgomp/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0884cf09ee0b132930c5ad0f16736f9681f3b07/libgomp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0884cf09ee0b132930c5ad0f16736f9681f3b07/libgomp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FMakefile.in?ref=a0884cf09ee0b132930c5ad0f16736f9681f3b07", "patch": "@@ -79,7 +79,7 @@ libgomp_la_LIBADD =\n am_libgomp_la_OBJECTS = alloc.lo barrier.lo critical.lo env.lo \\\n \terror.lo iter.lo loop.lo ordered.lo parallel.lo sections.lo \\\n \tsingle.lo team.lo work.lo lock.lo mutex.lo proc.lo sem.lo \\\n-\tbar.lo time.lo fortran.lo\n+\tbar.lo time.lo fortran.lo affinity.lo\n libgomp_la_OBJECTS = $(am_libgomp_la_OBJECTS)\n DEFAULT_INCLUDES = -I. -I$(srcdir) -I.\n depcomp = $(SHELL) $(top_srcdir)/../depcomp\n@@ -279,7 +279,7 @@ libgomp_version_info = -version-info $(libtool_VERSION)\n libgomp_la_LDFLAGS = $(libgomp_version_info) $(libgomp_version_script)\n libgomp_la_SOURCES = alloc.c barrier.c critical.c env.c error.c iter.c \\\n \tloop.c ordered.c parallel.c sections.c single.c team.c work.c \\\n-\tlock.c mutex.c proc.c sem.c bar.c time.c fortran.c\n+\tlock.c mutex.c proc.c sem.c bar.c time.c fortran.c affinity.c\n \n nodist_noinst_HEADERS = libgomp_f.h\n nodist_libsubinclude_HEADERS = omp.h\n@@ -406,6 +406,7 @@ mostlyclean-compile:\n distclean-compile:\n \t-rm -f *.tab.c\n \n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/affinity.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/alloc.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bar.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/barrier.Plo@am__quote@"}, {"sha": "13cdf1b40abaf2104e27608d9441afee086aa510", "filename": "libgomp/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0884cf09ee0b132930c5ad0f16736f9681f3b07/libgomp%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0884cf09ee0b132930c5ad0f16736f9681f3b07/libgomp%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig.h.in?ref=a0884cf09ee0b132930c5ad0f16736f9681f3b07", "patch": "@@ -24,6 +24,9 @@\n /* Define to 1 if you have the <memory.h> header file. */\n #undef HAVE_MEMORY_H\n \n+/* Define if pthread_{,attr_}{g,s}etaffinity_np is supported. */\n+#undef HAVE_PTHREAD_AFFINITY_NP\n+\n /* Define to 1 if you have the <semaphore.h> header file. */\n #undef HAVE_SEMAPHORE_H\n "}, {"sha": "8fcce5f3a5b4b303a02a3842e4fb821a8fb0517d", "filename": "libgomp/config/linux/affinity.c", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0884cf09ee0b132930c5ad0f16736f9681f3b07/libgomp%2Fconfig%2Flinux%2Faffinity.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0884cf09ee0b132930c5ad0f16736f9681f3b07/libgomp%2Fconfig%2Flinux%2Faffinity.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Flinux%2Faffinity.c?ref=a0884cf09ee0b132930c5ad0f16736f9681f3b07", "patch": "@@ -0,0 +1,107 @@\n+/* Copyright (C) 2006, 2007 Free Software Foundation, Inc.\n+   Contributed by Jakub Jelinek <jakub@redhat.com>.\n+\n+   This file is part of the GNU OpenMP Library (libgomp).\n+\n+   Libgomp is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU Lesser General Public License as published by\n+   the Free Software Foundation; either version 2.1 of the License, or\n+   (at your option) any later version.\n+\n+   Libgomp is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for\n+   more details.\n+\n+   You should have received a copy of the GNU Lesser General Public License \n+   along with libgomp; see the file COPYING.LIB.  If not, write to the\n+   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+/* As a special exception, if you link this library with other files, some\n+   of which are compiled with GCC, to produce an executable, this library\n+   does not by itself cause the resulting executable to be covered by the\n+   GNU General Public License.  This exception does not however invalidate\n+   any other reasons why the executable file might be covered by the GNU\n+   General Public License.  */\n+\n+/* This is a Linux specific implementation of a CPU affinity setting.  */\n+\n+#ifndef _GNU_SOURCE\n+#define _GNU_SOURCE 1\n+#endif\n+#include \"libgomp.h\"\n+#include <sched.h>\n+#include <stdlib.h>\n+#include <unistd.h>\n+\n+#ifdef HAVE_PTHREAD_AFFINITY_NP\n+\n+static unsigned int affinity_counter;\n+#ifndef HAVE_SYNC_BUILTINS\n+static gomp_mutex_t affinity_lock;\n+#endif\n+\n+void\n+gomp_init_affinity (void)\n+{\n+  cpu_set_t cpuset;\n+  size_t idx, widx;\n+\n+  if (pthread_getaffinity_np (pthread_self (), sizeof (cpuset), &cpuset))\n+    {\n+      gomp_error (\"could not get CPU affinity set\");\n+      free (gomp_cpu_affinity);\n+      gomp_cpu_affinity = NULL;\n+      gomp_cpu_affinity_len = 0;\n+      return;\n+    }\n+\n+  for (widx = idx = 0; idx < gomp_cpu_affinity_len; idx++)\n+    if (gomp_cpu_affinity[idx] < CPU_SETSIZE\n+        && CPU_ISSET (gomp_cpu_affinity[idx], &cpuset))\n+      gomp_cpu_affinity[widx++] = gomp_cpu_affinity[idx];\n+\n+  if (widx == 0)\n+    {\n+      gomp_error (\"no CPUs left for affinity setting\");\n+      free (gomp_cpu_affinity);\n+      gomp_cpu_affinity = NULL;\n+      gomp_cpu_affinity_len = 0;\n+      return;\n+    }\n+\n+  gomp_cpu_affinity_len = widx;\n+  CPU_ZERO (&cpuset);\n+  CPU_SET (gomp_cpu_affinity[0], &cpuset);\n+  pthread_setaffinity_np (pthread_self (), sizeof (cpuset), &cpuset);\n+  affinity_counter = 1;\n+#ifndef HAVE_SYNC_BUILTINS\n+  gomp_mutex_init (&affinity_lock);\n+#endif\n+}\n+\n+void\n+gomp_init_thread_affinity (pthread_attr_t *attr)\n+{\n+  unsigned int cpu;\n+  cpu_set_t cpuset;\n+\n+#ifdef HAVE_SYNC_BUILTINS\n+  cpu = __sync_fetch_and_add (&affinity_counter, 1);\n+#else\n+  gomp_mutex_lock (&affinity_lock);\n+  cpu = affinity_counter++;\n+  gomp_mutex_unlock (&affinity_lock);\n+#endif\n+  cpu %= gomp_cpu_affinity_len;\n+  CPU_ZERO (&cpuset);\n+  CPU_SET (gomp_cpu_affinity[cpu], &cpuset);\n+  pthread_attr_setaffinity_np (attr, sizeof (cpu_set_t), &cpuset);\n+}\n+\n+#else\n+\n+#include \"../posix/affinity.c\"\n+\n+#endif"}, {"sha": "67cb37ad924ba77896b604b0280eb20fa7280279", "filename": "libgomp/config/posix/affinity.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0884cf09ee0b132930c5ad0f16736f9681f3b07/libgomp%2Fconfig%2Fposix%2Faffinity.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0884cf09ee0b132930c5ad0f16736f9681f3b07/libgomp%2Fconfig%2Fposix%2Faffinity.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Fposix%2Faffinity.c?ref=a0884cf09ee0b132930c5ad0f16736f9681f3b07", "patch": "@@ -0,0 +1,41 @@\n+/* Copyright (C) 2006 Free Software Foundation, Inc.\n+   Contributed by Jakub Jelinek <jakub@redhat.com>.\n+\n+   This file is part of the GNU OpenMP Library (libgomp).\n+\n+   Libgomp is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU Lesser General Public License as published by\n+   the Free Software Foundation; either version 2.1 of the License, or\n+   (at your option) any later version.\n+\n+   Libgomp is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for\n+   more details.\n+\n+   You should have received a copy of the GNU Lesser General Public License \n+   along with libgomp; see the file COPYING.LIB.  If not, write to the\n+   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+/* As a special exception, if you link this library with other files, some\n+   of which are compiled with GCC, to produce an executable, this library\n+   does not by itself cause the resulting executable to be covered by the\n+   GNU General Public License.  This exception does not however invalidate\n+   any other reasons why the executable file might be covered by the GNU\n+   General Public License.  */\n+\n+/* This is a generic stub implementation of a CPU affinity setting.  */\n+\n+#include \"libgomp.h\"\n+\n+void\n+gomp_init_affinity (void)\n+{\n+}\n+\n+void\n+gomp_init_thread_affinity (pthread_attr_t *attr)\n+{\n+  (void) attr;\n+}"}, {"sha": "426c62fcf710e5bb0dfe78a20731714e9252b215", "filename": "libgomp/configure", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0884cf09ee0b132930c5ad0f16736f9681f3b07/libgomp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0884cf09ee0b132930c5ad0f16736f9681f3b07/libgomp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure?ref=a0884cf09ee0b132930c5ad0f16736f9681f3b07", "patch": "@@ -8851,6 +8851,68 @@ rm -f conftest.err conftest.$ac_objext \\\n     ;;\n esac\n \n+# Check for pthread_{,attr_}[sg]etaffinity_np.\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#define _GNU_SOURCE\n+   #include <pthread.h>\n+int\n+main ()\n+{\n+cpu_set_t cpuset;\n+   pthread_attr_t attr;\n+   pthread_getaffinity_np (pthread_self (), sizeof (cpu_set_t), &cpuset);\n+   if (CPU_ISSET (0, &cpuset))\n+     CPU_SET (1, &cpuset);\n+   else\n+     CPU_ZERO (&cpuset);\n+   pthread_setaffinity_np (pthread_self (), sizeof (cpu_set_t), &cpuset);\n+   pthread_attr_init (&attr);\n+   pthread_attr_getaffinity_np (&attr, sizeof (cpu_set_t), &cpuset);\n+   pthread_attr_setaffinity_np (&attr, sizeof (cpu_set_t), &cpuset);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_PTHREAD_AFFINITY_NP 1\n+_ACEOF\n+\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+\n # At least for glibc, clock_gettime is in librt.  But don't pull that\n # in if it still doesn't give us the function we want.\n if test $ac_cv_func_clock_gettime = no; then"}, {"sha": "427c8f7c7531fcca093632c4a0e79b3a93ad4995", "filename": "libgomp/configure.ac", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0884cf09ee0b132930c5ad0f16736f9681f3b07/libgomp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0884cf09ee0b132930c5ad0f16736f9681f3b07/libgomp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure.ac?ref=a0884cf09ee0b132930c5ad0f16736f9681f3b07", "patch": "@@ -236,6 +236,25 @@ If so, please configure with --disable-linux-futex])\n     ;;\n esac\n \n+# Check for pthread_{,attr_}[sg]etaffinity_np.\n+AC_LINK_IFELSE(\n+ [AC_LANG_PROGRAM(\n+  [#define _GNU_SOURCE\n+   #include <pthread.h>],\n+  [cpu_set_t cpuset;\n+   pthread_attr_t attr;\n+   pthread_getaffinity_np (pthread_self (), sizeof (cpu_set_t), &cpuset);\n+   if (CPU_ISSET (0, &cpuset))\n+     CPU_SET (1, &cpuset);\n+   else\n+     CPU_ZERO (&cpuset);\n+   pthread_setaffinity_np (pthread_self (), sizeof (cpu_set_t), &cpuset);\n+   pthread_attr_init (&attr);\n+   pthread_attr_getaffinity_np (&attr, sizeof (cpu_set_t), &cpuset);\n+   pthread_attr_setaffinity_np (&attr, sizeof (cpu_set_t), &cpuset);])],\n+  AC_DEFINE(HAVE_PTHREAD_AFFINITY_NP, 1,\n+[\tDefine if pthread_{,attr_}{g,s}etaffinity_np is supported.]))\n+\n # At least for glibc, clock_gettime is in librt.  But don't pull that\n # in if it still doesn't give us the function we want.\n if test $ac_cv_func_clock_gettime = no; then"}, {"sha": "4a07bfa4975a4f319e318750f6afc2c08facca55", "filename": "libgomp/env.c", "status": "modified", "additions": 96, "deletions": 1, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0884cf09ee0b132930c5ad0f16736f9681f3b07/libgomp%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0884cf09ee0b132930c5ad0f16736f9681f3b07/libgomp%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fenv.c?ref=a0884cf09ee0b132930c5ad0f16736f9681f3b07", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+/* Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n    Contributed by Richard Henderson <rth@redhat.com>.\n \n    This file is part of the GNU OpenMP Library (libgomp).\n@@ -42,6 +42,8 @@ bool gomp_dyn_var = false;\n bool gomp_nest_var = false;\n enum gomp_schedule_type gomp_run_sched_var = GFS_DYNAMIC;\n unsigned long gomp_run_sched_chunk = 1;\n+unsigned short *gomp_cpu_affinity;\n+size_t gomp_cpu_affinity_len;\n \n /* Parse the OMP_SCHEDULE environment variable.  */\n \n@@ -177,6 +179,97 @@ parse_boolean (const char *name, bool *value)\n     gomp_error (\"Invalid value for environment variable %s\", name);\n }\n \n+/* Parse the GOMP_CPU_AFFINITY environment varible.  Return true if one was\n+   present and it was successfully parsed.  */\n+\n+static bool\n+parse_affinity (void)\n+{\n+  char *env, *end;\n+  unsigned long cpu_beg, cpu_end, cpu_stride;\n+  unsigned short *cpus = NULL;\n+  size_t allocated = 0, used = 0, needed;\n+\n+  env = getenv (\"GOMP_CPU_AFFINITY\");\n+  if (env == NULL)\n+    return false;\n+\n+  do\n+    {\n+      while (*env == ' ' || *env == '\\t')\n+\tenv++;\n+\n+      cpu_beg = strtoul (env, &end, 0);\n+      cpu_end = cpu_beg;\n+      cpu_stride = 1;\n+      if (env == end || cpu_beg >= 65536)\n+\tgoto invalid;\n+\n+      env = end;\n+      if (*env == '-')\n+\t{\n+\t  cpu_end = strtoul (++env, &end, 0);\n+\t  if (env == end || cpu_end >= 65536 || cpu_end < cpu_beg)\n+\t    goto invalid;\n+\n+\t  env = end;\n+\t  if (*env == ':')\n+\t    {\n+\t      cpu_stride = strtoul (++env, &end, 0);\n+\t      if (env == end || cpu_stride == 0 || cpu_stride >= 65536)\n+\t\tgoto invalid;\n+\n+\t      env = end;\n+\t    }\n+\t}\n+\n+      needed = (cpu_end - cpu_beg) / cpu_stride + 1;\n+      if (used + needed >= allocated)\n+\t{\n+\t  unsigned short *new_cpus;\n+\n+\t  if (allocated < 64)\n+\t    allocated = 64;\n+\t  if (allocated > needed)\n+\t    allocated <<= 1;\n+\t  else\n+\t    allocated += 2 * needed;\n+\t  new_cpus = realloc (cpus, allocated * sizeof (unsigned short));\n+\t  if (new_cpus == NULL)\n+\t    {\n+\t      free (cpus);\n+\t      gomp_error (\"not enough memory to store GOMP_CPU_AFFINITY list\");\n+\t      return false;\n+\t    }\n+\n+\t  cpus = new_cpus;\n+\t}\n+\n+      while (needed--)\n+\t{\n+\t  cpus[used++] = cpu_beg;\n+\t  cpu_beg += cpu_stride;\n+\t}\n+\n+      while (*env == ' ' || *env == '\\t')\n+\tenv++;\n+\n+      if (*env == ',')\n+\tenv++;\n+      else if (*env == '\\0')\n+\tbreak;\n+    }\n+  while (1);\n+\n+  gomp_cpu_affinity = cpus;\n+  gomp_cpu_affinity_len = used;\n+  return true;\n+\n+ invalid:\n+  gomp_error (\"Invalid value for enviroment variable GOMP_CPU_AFFINITY\");\n+  return false;\n+}\n+\n static void __attribute__((constructor))\n initialize_env (void)\n {\n@@ -190,6 +283,8 @@ initialize_env (void)\n   parse_boolean (\"OMP_NESTED\", &gomp_nest_var);\n   if (!parse_unsigned_long (\"OMP_NUM_THREADS\", &gomp_nthreads_var))\n     gomp_init_num_threads ();\n+  if (parse_affinity ())\n+    gomp_init_affinity ();\n \n   /* Not strictly environment related, but ordering constructors is tricky.  */\n   pthread_attr_init (&gomp_thread_attr);"}, {"sha": "7075250a87fc0986c831eb78124ab318a2786268", "filename": "libgomp/libgomp.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0884cf09ee0b132930c5ad0f16736f9681f3b07/libgomp%2Flibgomp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0884cf09ee0b132930c5ad0f16736f9681f3b07/libgomp%2Flibgomp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.h?ref=a0884cf09ee0b132930c5ad0f16736f9681f3b07", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2005 Free Software Foundation, Inc.\n+/* Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n    Contributed by Richard Henderson <rth@redhat.com>.\n \n    This file is part of the GNU OpenMP Library (libgomp).\n@@ -246,8 +246,18 @@ extern unsigned long gomp_run_sched_chunk;\n /* The attributes to be used during thread creation.  */\n extern pthread_attr_t gomp_thread_attr;\n \n+/* Other variables.  */\n+\n+extern unsigned short *gomp_cpu_affinity;\n+extern size_t gomp_cpu_affinity_len;\n+\n /* Function prototypes.  */\n \n+/* affinity.c */\n+\n+extern void gomp_init_affinity (void);\n+extern void gomp_init_thread_affinity (pthread_attr_t *);\n+\n /* alloc.c */\n \n extern void *gomp_malloc (size_t) __attribute__((malloc));"}, {"sha": "d114bb5de85ba20a429ec4614febbfb68fb88d71", "filename": "libgomp/team.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0884cf09ee0b132930c5ad0f16736f9681f3b07/libgomp%2Fteam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0884cf09ee0b132930c5ad0f16736f9681f3b07/libgomp%2Fteam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fteam.c?ref=a0884cf09ee0b132930c5ad0f16736f9681f3b07", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2005 Free Software Foundation, Inc.\n+/* Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n    Contributed by Richard Henderson <rth@redhat.com>.\n \n    This file is part of the GNU OpenMP Library (libgomp).\n@@ -183,6 +183,7 @@ gomp_team_start (void (*fn) (void *), void *data, unsigned nthreads,\n   struct gomp_team *team;\n   bool nested;\n   unsigned i, n, old_threads_used = 0;\n+  pthread_attr_t thread_attr, *attr;\n \n   thr = gomp_thread ();\n   nested = thr->ts.team != NULL;\n@@ -265,6 +266,17 @@ gomp_team_start (void (*fn) (void *), void *data, unsigned nthreads,\n \t}\n     }\n \n+  attr = &gomp_thread_attr;\n+  if (gomp_cpu_affinity != NULL)\n+    {\n+      size_t stacksize;\n+      pthread_attr_init (&thread_attr);\n+      pthread_attr_setdetachstate (&thread_attr, PTHREAD_CREATE_DETACHED);\n+      if (! pthread_attr_getstacksize (&thread_attr, &stacksize))\n+\tpthread_attr_setstacksize (&thread_attr, stacksize);\n+      attr = &thread_attr;\n+    }\n+\n   start_data = gomp_alloca (sizeof (struct gomp_thread_start_data)\n \t\t\t    * (nthreads-i));\n \n@@ -283,12 +295,17 @@ gomp_team_start (void (*fn) (void *), void *data, unsigned nthreads,\n       start_data->fn_data = data;\n       start_data->nested = nested;\n \n-      err = pthread_create (&pt, &gomp_thread_attr,\n-\t\t\t    gomp_thread_start, start_data);\n+      if (gomp_cpu_affinity != NULL)\n+\tgomp_init_thread_affinity (attr);\n+\n+      err = pthread_create (&pt, attr, gomp_thread_start, start_data);\n       if (err != 0)\n \tgomp_fatal (\"Thread creation failed: %s\", strerror (err));\n     }\n \n+  if (gomp_cpu_affinity != NULL)\n+    pthread_attr_destroy (&thread_attr);\n+\n  do_release:\n   gomp_barrier_wait (nested ? &team->barrier : &gomp_threads_dock);\n "}]}