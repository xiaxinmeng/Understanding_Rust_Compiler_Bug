{"sha": "ffa2298476ac8659ef25bc6a1a00fe463d5126e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZhMjI5ODQ3NmFjODY1OWVmMjViYzZhMWEwMGZlNDYzZDUxMjZlMA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2003-11-28T05:07:06Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2003-11-28T05:07:06Z"}, "message": "rs6000.h (MASK_MFCRF): New.\n\n        * config/rs6000/rs6000.h (MASK_MFCRF): New.\n        (TARGET_MFCRF): Test target_flags, not processor type.\n        (TARGET_SWITCHES): Add mfcrf and no-mfcrf.\n        Change Don't to Do not.\n        * config/rs6000/rs6000.c (processors_target_table): Add MASK_MFCRF\n        to power4, 970, G5.\n\nFrom-SVN: r74012", "tree": {"sha": "f371e9a83c194667ee139318c69329025fc3dd27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f371e9a83c194667ee139318c69329025fc3dd27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffa2298476ac8659ef25bc6a1a00fe463d5126e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffa2298476ac8659ef25bc6a1a00fe463d5126e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffa2298476ac8659ef25bc6a1a00fe463d5126e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffa2298476ac8659ef25bc6a1a00fe463d5126e0/comments", "author": null, "committer": null, "parents": [{"sha": "e427e6944b5f706ec4b3dc2e2bbb5d6607e43099", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e427e6944b5f706ec4b3dc2e2bbb5d6607e43099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e427e6944b5f706ec4b3dc2e2bbb5d6607e43099"}], "stats": {"total": 73, "additions": 45, "deletions": 28}, "files": [{"sha": "3d65e50af577fc8e0dee31d5273ba545b721fe27", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffa2298476ac8659ef25bc6a1a00fe463d5126e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffa2298476ac8659ef25bc6a1a00fe463d5126e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ffa2298476ac8659ef25bc6a1a00fe463d5126e0", "patch": "@@ -1,3 +1,12 @@\n+2003-11-28  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.h (MASK_MFCRF): New.\n+\t(TARGET_MFCRF): Test target_flags, not processor type.\n+\t(TARGET_SWITCHES): Add mfcrf and no-mfcrf.\n+\tChange Don't to Do not.\n+\t* config/rs6000/rs6000.c (processors_target_table): Add MASK_MFCRF\n+\tto power4, 970, G5.\n+\n 2003-11-27  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* cse.c (cse_set_around_loop): When changing a constant load\n@@ -3598,7 +3607,7 @@\n \n \t* config/i386/i386.c (x86_this_parameter): Fix typo.\n \n-2\u001003-10-11  Jan Hubicka  <jh@suse.cz>\n+203-10-11  Jan Hubicka  <jh@suse.cz>\n \n \t* Makefile.in (web.o): New.\n \t* web.c: New file."}, {"sha": "24155f3dced04065e169e9afccfb707d79426557", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffa2298476ac8659ef25bc6a1a00fe463d5126e0/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffa2298476ac8659ef25bc6a1a00fe463d5126e0/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ffa2298476ac8659ef25bc6a1a00fe463d5126e0", "patch": "@@ -645,7 +645,7 @@ rs6000_override_options (const char *default_cpu)\n \t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n \t    POWER_MASKS},\n \t {\"power4\", PROCESSOR_POWER4,\n-            MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n+            MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS | MASK_MFCRF,\n             POWER_MASKS},\n \t {\"powerpc\", PROCESSOR_POWERPC,\n \t    MASK_POWERPC | MASK_NEW_MNEMONICS,\n@@ -753,10 +753,10 @@ rs6000_override_options (const char *default_cpu)\n \t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n \t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n \t {\"970\", PROCESSOR_POWER4,\n-\t    MASK_POWERPC | POWERPC_OPT_MASKS | MASK_NEW_MNEMONICS,\n+\t    MASK_POWERPC | POWERPC_OPT_MASKS | MASK_NEW_MNEMONICS | MASK_MFCRF,\n \t    POWER_MASKS},\n \t {\"G5\", PROCESSOR_POWER4,\n-\t    MASK_POWERPC | POWERPC_OPT_MASKS | MASK_NEW_MNEMONICS,\n+\t    MASK_POWERPC | POWERPC_OPT_MASKS | MASK_NEW_MNEMONICS | MASK_MFCRF,\n \t    POWER_MASKS}};\n \n   const size_t ptt_size = ARRAY_SIZE (processor_target_table);"}, {"sha": "f0f351e9234d597b35f9319b7ebe27c1e02436cb", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 32, "deletions": 24, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffa2298476ac8659ef25bc6a1a00fe463d5126e0/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffa2298476ac8659ef25bc6a1a00fe463d5126e0/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=ffa2298476ac8659ef25bc6a1a00fe463d5126e0", "patch": "@@ -187,7 +187,10 @@ extern int target_flags;\n /* Return small structures in memory (as the AIX ABI requires).  */\n #define MASK_AIX_STRUCT_RET\t0x00040000\n \n-/* The only remaining free bits are 0x00780000. sysv4.h uses\n+/* Use single field mfcr instruction.  */\n+#define MASK_MFCRF\t\t0x00080000\n+\n+/* The only remaining free bits are 0x00700000. sysv4.h uses\n    0x00800000 -> 0x40000000, and 0x80000000 is not available\n    because target_flags is signed.  */\n \n@@ -210,6 +213,17 @@ extern int target_flags;\n #define TARGET_ALTIVEC\t\t(target_flags & MASK_ALTIVEC)\n #define TARGET_AIX_STRUCT_RET\t(target_flags & MASK_AIX_STRUCT_RET)\n \n+/* Define TARGET_MFCRF if the target assembler supports the optional\n+   field operand for mfcr and the target processor supports the\n+   instruction.  */\n+\n+#ifdef HAVE_AS_MFCRF\n+#define TARGET_MFCRF\t\t(target_flags & MASK_MFCRF)\n+#else\n+#define TARGET_MFCRF 0\n+#endif\n+\n+\n #define TARGET_32BIT\t\t(! TARGET_64BIT)\n #define TARGET_HARD_FLOAT\t(! TARGET_SOFT_FLOAT)\n #define TARGET_UPDATE\t\t(! TARGET_NO_UPDATE)\n@@ -259,19 +273,19 @@ extern int target_flags;\n   {\"powerpc-gpopt\",\tMASK_POWERPC | MASK_PPC_GPOPT,\t\t\t\\\n \t\t\tN_(\"Use PowerPC General Purpose group optional instructions\")},\\\n   {\"no-powerpc-gpopt\",\t- MASK_PPC_GPOPT,\t\t\t\t\\\n-\t\t\tN_(\"Don't use PowerPC General Purpose group optional instructions\")},\\\n+\t\t\tN_(\"Do not use PowerPC General Purpose group optional instructions\")},\\\n   {\"powerpc-gfxopt\",\tMASK_POWERPC | MASK_PPC_GFXOPT,\t\t\t\\\n \t\t\tN_(\"Use PowerPC Graphics group optional instructions\")},\\\n   {\"no-powerpc-gfxopt\",\t- MASK_PPC_GFXOPT,\t\t\t\t\\\n-\t\t\tN_(\"Don't use PowerPC Graphics group optional instructions\")},\\\n+\t\t\tN_(\"Do not use PowerPC Graphics group optional instructions\")},\\\n   {\"powerpc64\",\t\tMASK_POWERPC64,\t\t\t\t\t\\\n \t\t\tN_(\"Use PowerPC-64 instruction set\")},\t\t\\\n   {\"no-powerpc64\",\t- MASK_POWERPC64,\t\t\t\t\\\n-\t\t\tN_(\"Don't use PowerPC-64 instruction set\")},\t\\\n+\t\t\tN_(\"Do not use PowerPC-64 instruction set\")},\t\\\n   {\"altivec\",\t\tMASK_ALTIVEC ,\t\t\t\t\t\\\n \t\t\tN_(\"Use AltiVec instructions\")},\t\t\\\n   {\"no-altivec\",\t- MASK_ALTIVEC ,\t\t\t\t\t\\\n-\t\t\tN_(\"Don't use AltiVec instructions\")},\t\\\n+\t\t\tN_(\"Do not use AltiVec instructions\")},\t\\\n   {\"new-mnemonics\",\tMASK_NEW_MNEMONICS,\t\t\t\t\\\n \t\t\tN_(\"Use new mnemonics for PowerPC architecture\")},\\\n   {\"old-mnemonics\",\t-MASK_NEW_MNEMONICS,\t\t\t\t\\\n@@ -282,21 +296,21 @@ extern int target_flags;\n   {\"fp-in-toc\",\t\t- MASK_NO_FP_IN_TOC,\t\t\t\t\\\n \t\t\tN_(\"Place floating point constants in TOC\")},\t\\\n   {\"no-fp-in-toc\",\tMASK_NO_FP_IN_TOC,\t\t\t\t\\\n-\t\t\tN_(\"Don't place floating point constants in TOC\")},\\\n+\t\t\tN_(\"Do not place floating point constants in TOC\")},\\\n   {\"sum-in-toc\",\t- MASK_NO_SUM_IN_TOC,\t\t\t\t\\\n \t\t\tN_(\"Place symbol+offset constants in TOC\")},\t\\\n   {\"no-sum-in-toc\",\tMASK_NO_SUM_IN_TOC,\t\t\t\t\\\n-\t\t\tN_(\"Don't place symbol+offset constants in TOC\")},\\\n+\t\t\tN_(\"Do not place symbol+offset constants in TOC\")},\\\n   {\"minimal-toc\",\tMASK_MINIMAL_TOC,\t\t\t\t\\\n \t\t\t\"Use only one TOC entry per procedure\"},\t\\\n   {\"minimal-toc\",\t- (MASK_NO_FP_IN_TOC | MASK_NO_SUM_IN_TOC),\t\\\n \t\t\t\"\"},\t\t\t\t\t\t\\\n   {\"no-minimal-toc\",\t- MASK_MINIMAL_TOC,\t\t\t\t\\\n \t\t\tN_(\"Place variable addresses in the regular TOC\")},\\\n   {\"hard-float\",\t- MASK_SOFT_FLOAT,\t\t\t\t\\\n-\t\t\tN_(\"Use hardware fp\")},\t\t\t\t\\\n+\t\t\tN_(\"Use hardware floating point\")},\t\t\\\n   {\"soft-float\",\tMASK_SOFT_FLOAT,\t\t\t\t\\\n-\t\t\tN_(\"Do not use hardware fp\")},\t\t\t\\\n+\t\t\tN_(\"Do not use hardware floating point\")},\t\\\n   {\"multiple\",\t\tMASK_MULTIPLE,\t\t\t\t\t\\\n \t\t\tN_(\"Generate load/store multiple instructions\")},\t\\\n   {\"no-multiple\",\t- MASK_MULTIPLE,\t\t\t\t\\\n@@ -312,11 +326,11 @@ extern int target_flags;\n   {\"fused-madd\",\t- MASK_NO_FUSED_MADD,\t\t\t\t\\\n \t\t\tN_(\"Generate fused multiply/add instructions\")},\\\n   {\"no-fused-madd\",\tMASK_NO_FUSED_MADD,\t\t\t\t\\\n-\t\t\tN_(\"Don't generate fused multiply/add instructions\")},\\\n+\t\t\tN_(\"Do not generate fused multiply/add instructions\")},\\\n   {\"sched-prolog\",      MASK_SCHED_PROLOG,                              \\\n \t\t\t\"\"},\t\t\t\t\t\t\\\n   {\"no-sched-prolog\",   -MASK_SCHED_PROLOG,                             \\\n-\t\t\tN_(\"Don't schedule the start and end of the procedure\")},\\\n+\t\t\tN_(\"Do not schedule the start and end of the procedure\")},\\\n   {\"sched-epilog\",      MASK_SCHED_PROLOG,                              \\\n \t\t\t\"\"},\t\t\t\t\t\t\\\n   {\"no-sched-epilog\",   -MASK_SCHED_PROLOG,                             \\\n@@ -326,9 +340,13 @@ extern int target_flags;\n   {\"svr4-struct-return\", - MASK_AIX_STRUCT_RET,\t\t\t\t\\\n \t\t\tN_(\"Return small structures in registers (SVR4 default)\")},\\\n   {\"no-aix-struct-return\", - MASK_AIX_STRUCT_RET,\t\t\t\\\n-\t\t\t\"\"},\\\n+\t\t\t\"\"},\t\t\t\t\t\t\\\n   {\"no-svr4-struct-return\", MASK_AIX_STRUCT_RET,\t\t\t\\\n-\t\t\t\"\"},\\\n+\t\t\t\"\"},\t\t\t\t\t\t\\\n+  {\"mfcrf\",\t\tMASK_MFCRF,\t\t\t\t\t\\\n+\t\t\tN_(\"Generate single field mfcr instruction\")},\t\\\n+  {\"no-mfcrf\",\t\t- MASK_MFCRF,\t\t\t\t\t\\\n+\t\t\tN_(\"Do not generate single field mfcr instruction\")},\\\n   SUBTARGET_SWITCHES\t\t\t\t\t\t\t\\\n   {\"\",\t\t\tTARGET_DEFAULT | MASK_SCHED_PROLOG,\t\t\\\n \t\t\t\"\"}}\n@@ -529,16 +547,6 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n #define DEFAULT_SCHED_FINISH_NOP_INSERTION_SCHEME          \\\n   (rs6000_cpu == PROCESSOR_POWER4 ? sched_finish_regroup_exact : sched_finish_none)\n \n-/* Define TARGET_MFCRF if the target assembler supports the optional\n-   field operand for mfcr and the target processor supports the\n-   instruction.  */\n-\n-#ifdef HAVE_AS_MFCRF\n-#define TARGET_MFCRF (rs6000_cpu == PROCESSOR_POWER4)\n-#else\n-#define TARGET_MFCRF 0\n-#endif\n-\n #define TARGET_LONG_DOUBLE_128 (rs6000_long_double_type_size == 128)\n #define TARGET_ALTIVEC_ABI rs6000_altivec_abi\n #define TARGET_ALTIVEC_VRSAVE rs6000_altivec_vrsave\n@@ -555,7 +563,7 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n    defined, is executed once just after all the command options have\n    been parsed.\n \n-   Don't use this macro to turn on various extra optimizations for\n+   Do not use this macro to turn on various extra optimizations for\n    `-O'.  That is what `OPTIMIZATION_OPTIONS' is for.\n \n    On the RS/6000 this is used to define the target cpu type.  */"}]}