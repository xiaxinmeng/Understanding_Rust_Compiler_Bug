{"sha": "1ab84eda5548119908c4e24c6ad953dd7c00a5b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFiODRlZGE1NTQ4MTE5OTA4YzRlMjRjNmFkOTUzZGQ3YzAwYTViNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-25T20:35:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-25T20:35:57Z"}, "message": "c++: Fix up value initialization of structs with zero width bitfields [PR102019]\n\nThe removal of remove_zero_width_bit_fields, in addition to triggering\nsome ABI issues that need solving anyway (ABI incompatibility between\nC and C++) also resulted in UB inside of gcc, we now call build_zero_init\nwhich calls build_int_cst on an integral type with TYPE_PRECISION of 0.\n\nFixed by ignoring the zero width bitfields.  I understand\nbuild_value_init_noctor wants to initialize to 0 even unnamed bitfields\n(of non-zero width), at least until we have some CONSTRUCTOR flag that says\nthat even all the padding bits should be cleared.\n\n2021-08-25  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/102019\n\t* init.c (build_value_init_noctor): Ignore unnamed zero-width\n\tbitfields.", "tree": {"sha": "c3775826d008eb9bf901d8ce4c35f98bec0415a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3775826d008eb9bf901d8ce4c35f98bec0415a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ab84eda5548119908c4e24c6ad953dd7c00a5b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab84eda5548119908c4e24c6ad953dd7c00a5b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ab84eda5548119908c4e24c6ad953dd7c00a5b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab84eda5548119908c4e24c6ad953dd7c00a5b7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c85f29537662f1f4195a102cbf0182ffa32d8ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c85f29537662f1f4195a102cbf0182ffa32d8ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c85f29537662f1f4195a102cbf0182ffa32d8ac"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "1426f9a54345a82ad3d89f67c84d3a300f2d2f7d", "filename": "gcc/cp/init.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab84eda5548119908c4e24c6ad953dd7c00a5b7/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab84eda5548119908c4e24c6ad953dd7c00a5b7/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=1ab84eda5548119908c4e24c6ad953dd7c00a5b7", "patch": "@@ -427,6 +427,11 @@ build_value_init_noctor (tree type, tsubst_flags_t complain)\n \t\t      == NULL_TREE))\n \t\tcontinue;\n \n+\t      /* Ignore unnamed zero-width bitfields.  */\n+\t      if (DECL_UNNAMED_BIT_FIELD (field)\n+\t\t  && integer_zerop (DECL_SIZE (field)))\n+\t\tcontinue;\n+\n \t      /* We could skip vfields and fields of types with\n \t\t user-defined constructors, but I think that won't improve\n \t\t performance at all; it should be simpler in general just"}]}