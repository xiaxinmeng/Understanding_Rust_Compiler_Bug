{"sha": "8fcfe0474aed3d43f16d14c92216ec68f35895fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZjZmUwNDc0YWVkM2Q0M2YxNmQxNGM5MjIxNmVjNjhmMzU4OTVmZA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-09-04T13:59:38Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-09-04T13:59:38Z"}, "message": "genmatch: put reporting on a cold path\n\n2018-09-04  Martin Liska  <mliska@suse.cz>\n\n\t* genmatch.c (output_line_directive): Add new argument\n\tfnargs.\n\t(dt_simplify::gen_1): Encapsulate dump within __builtin_expect.\n\nFrom-SVN: r264084", "tree": {"sha": "f73c5d80d9c2acbed4acac391f463e5ad3c54d0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f73c5d80d9c2acbed4acac391f463e5ad3c54d0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fcfe0474aed3d43f16d14c92216ec68f35895fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fcfe0474aed3d43f16d14c92216ec68f35895fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fcfe0474aed3d43f16d14c92216ec68f35895fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fcfe0474aed3d43f16d14c92216ec68f35895fd/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b88ad32d4e3527ed9cd89a6c53ff533755dab779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b88ad32d4e3527ed9cd89a6c53ff533755dab779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b88ad32d4e3527ed9cd89a6c53ff533755dab779"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "8cba0290c46a39fec84d7afa0941fde536786c78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fcfe0474aed3d43f16d14c92216ec68f35895fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fcfe0474aed3d43f16d14c92216ec68f35895fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8fcfe0474aed3d43f16d14c92216ec68f35895fd", "patch": "@@ -1,3 +1,9 @@\n+2018-09-04  Martin Liska  <mliska@suse.cz>\n+\n+\t* genmatch.c (output_line_directive): Add new argument\n+\tfnargs.\n+\t(dt_simplify::gen_1): Encapsulate dump within __builtin_expect.\n+\n 2018-09-04  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/invoke.texi (Option Summary): Add whitespace."}, {"sha": "5f1691ae206abfcb147614dbc78689c9e3b4a74e", "filename": "gcc/genmatch.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fcfe0474aed3d43f16d14c92216ec68f35895fd/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fcfe0474aed3d43f16d14c92216ec68f35895fd/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=8fcfe0474aed3d43f16d14c92216ec68f35895fd", "patch": "@@ -184,7 +184,7 @@ fprintf_indent (FILE *f, unsigned int indent, const char *format, ...)\n \n static void\n output_line_directive (FILE *f, source_location location,\n-\t\t       bool dumpfile = false)\n+\t\t       bool dumpfile = false, bool fnargs = false)\n {\n   const line_map_ordinary *map;\n   linemap_resolve_location (line_table, location, LRK_SPELLING_LOCATION, &map);\n@@ -202,7 +202,11 @@ output_line_directive (FILE *f, source_location location,\n \tfile = loc.file;\n       else\n \t++file;\n-      fprintf (f, \"%s:%d\", file, loc.line);\n+\n+      if (fnargs)\n+\tfprintf (f, \"\\\"%s\\\", %d\", file, loc.line);\n+      else\n+\tfprintf (f, \"%s:%d\", file, loc.line);\n     }\n   else\n     /* Other gen programs really output line directives here, at least for\n@@ -3305,11 +3309,13 @@ dt_simplify::gen_1 (FILE *f, int indent, bool gimple, operand *result)\n \t}\n     }\n \n-  fprintf_indent (f, indent, \"if (dump_file && (dump_flags & TDF_FOLDING)) \"\n+  fprintf_indent (f, indent, \"if (__builtin_expect (dump_file && (dump_flags & TDF_FOLDING), 0)) \"\n \t   \"fprintf (dump_file, \\\"Applying pattern \");\n+  fprintf (f, \"%%s:%%d, %%s:%%d\\\\n\\\", \");\n   output_line_directive (f,\n-\t\t\t result ? result->location : s->match->location, true);\n-  fprintf (f, \", %%s:%%d\\\\n\\\", __FILE__, __LINE__);\\n\");\n+\t\t\t result ? result->location : s->match->location, true,\n+\t\t\t true);\n+  fprintf (f, \", __FILE__, __LINE__);\\n\");\n \n   if (!result)\n     {"}]}