{"sha": "15f0f591b8799b6987321777a82c26a9bbb8af78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVmMGY1OTFiODc5OWI2OTg3MzIxNzc3YTgyYzI2YTliYmI4YWY3OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2012-10-01T09:41:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-01T09:41:22Z"}, "message": "a-catizo.adb, [...]: Minor reformatting.\n\n2012-10-01  Arnaud Charlet  <charlet@adacore.com>\n\n\t* a-catizo.adb, a-stwiun.adb, a-cdlili.adb, a-cihama.adb, a-direct.adb,\n\ta-coinve.adb, a-calend.adb, a-ciorse.adb, a-coorma.adb, a-cfdlli.adb,\n\ta-stzunb-shared.adb, a-cfhase.adb, bindgen.adb, ceinfo.adb, a-tags.adb,\n\teinfo.adb, checks.adb, eval_fat.adb, a-cborma.adb, a-stwifi.adb,\n\ta-tifiio.adb, a-textio.adb, a-cidlli.adb, a-strunb-shared.adb,\n\ta-cimutr.adb, a-calcon.adb, a-exexpr-gcc.adb, a-ciormu.adb,\n\ta-stzunb.adb, a-stzsea.adb, a-ngelfu.adb, a-stzfix.adb,\n\ta-cihase.adb, a-cohama.adb, a-exetim-posix.adb, a-dirval-vms.adb,\n\ta-caldel-vms.adb, a-coorse.adb, errout.adb,\n\ta-except.adb, butil.adb, a-dirval-mingw.adb, a-cforma.adb,\n\ta-except-2005.adb, a-wtedit.adb, cstand.adb, a-stwiun-shared.adb,\n\ta-cbhama.adb, a-direio.adb, clean.adb, a-cborse.adb, back_end.adb,\n\tbinde.adb, a-exexda.adb, a-comutr.adb, a-ciorma.adb, a-cobove.adb,\n\ta-coormu.adb, a-teioed.adb, a-convec.adb, a-wtenau.adb, exp_aggr.adb,\n\ta-ztedit.adb, a-cohase.adb, a-exetim-mingw.adb, bcheck.adb,\n\ta-dynpri.adb, a-cfhama.adb, a-calfor.adb, a-cbdlli.adb,\n\ta-crdlli.adb, a-cbmutr.adb, a-sequio.adb, a-ngcoar.adb, a-cforse.adb,\n\ta-strunb.adb, a-calend-vms.adb, a-clrefi.adb, a-cofove.adb,\n\ta-ztenau.adb, a-strfix.adb, a-cbhase.adb, a-stzsup.adb: Minor\n\treformatting.\n\nFrom-SVN: r191905", "tree": {"sha": "294ac05591df8b0f8f0566cc44e4720f184af059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/294ac05591df8b0f8f0566cc44e4720f184af059"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15f0f591b8799b6987321777a82c26a9bbb8af78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15f0f591b8799b6987321777a82c26a9bbb8af78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15f0f591b8799b6987321777a82c26a9bbb8af78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15f0f591b8799b6987321777a82c26a9bbb8af78/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cf427f02bb7cc5a0103f5821e7b4f042c9275320", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf427f02bb7cc5a0103f5821e7b4f042c9275320", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf427f02bb7cc5a0103f5821e7b4f042c9275320"}], "stats": {"total": 1540, "additions": 717, "deletions": 823}, "files": [{"sha": "e41c0bc10b186da40d1478bab4fe55b56df9fe39", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -1,3 +1,26 @@\n+2012-10-01  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* a-catizo.adb, a-stwiun.adb, a-cdlili.adb, a-cihama.adb, a-direct.adb,\n+\ta-coinve.adb, a-calend.adb, a-ciorse.adb, a-coorma.adb, a-cfdlli.adb,\n+\ta-stzunb-shared.adb, a-cfhase.adb, bindgen.adb, ceinfo.adb, a-tags.adb,\n+\teinfo.adb, checks.adb, eval_fat.adb, a-cborma.adb, a-stwifi.adb,\n+\ta-tifiio.adb, a-textio.adb, a-cidlli.adb, a-strunb-shared.adb,\n+\ta-cimutr.adb, a-calcon.adb, a-exexpr-gcc.adb, a-ciormu.adb,\n+\ta-stzunb.adb, a-stzsea.adb, a-ngelfu.adb, a-stzfix.adb,\n+\ta-cihase.adb, a-cohama.adb, a-exetim-posix.adb, a-dirval-vms.adb,\n+\ta-caldel-vms.adb, a-coorse.adb, errout.adb,\n+\ta-except.adb, butil.adb, a-dirval-mingw.adb, a-cforma.adb,\n+\ta-except-2005.adb, a-wtedit.adb, cstand.adb, a-stwiun-shared.adb,\n+\ta-cbhama.adb, a-direio.adb, clean.adb, a-cborse.adb, back_end.adb,\n+\tbinde.adb, a-exexda.adb, a-comutr.adb, a-ciorma.adb, a-cobove.adb,\n+\ta-coormu.adb, a-teioed.adb, a-convec.adb, a-wtenau.adb, exp_aggr.adb,\n+\ta-ztedit.adb, a-cohase.adb, a-exetim-mingw.adb, bcheck.adb,\n+\ta-dynpri.adb, a-cfhama.adb, a-calfor.adb, a-cbdlli.adb,\n+\ta-crdlli.adb, a-cbmutr.adb, a-sequio.adb, a-ngcoar.adb, a-cforse.adb,\n+\ta-strunb.adb, a-calend-vms.adb, a-clrefi.adb, a-cofove.adb,\n+\ta-ztenau.adb, a-strfix.adb, a-cbhase.adb, a-stzsup.adb: Minor\n+\treformatting.\n+\n 2012-10-01  Vincent Pucci  <pucci@adacore.com>\n \n \t* s-gearop.adb (Vector_Matrix_Product): Dimensions check fixed. Index"}, {"sha": "f24b971b226369c8295275c9657ea86431f4505d", "filename": "gcc/ada/a-calcon.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-calcon.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-calcon.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calcon.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---        Copyright (C) 2008-2009  Free Software Foundation, Inc.           --\n+--        Copyright (C) 2008-2012, Free Software Foundation, Inc.           --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -140,7 +140,7 @@ package body Ada.Calendar.Conversions is\n \n    function To_Unix_Time (Ada_Time : Time) return long is\n       Val : constant Long_Integer :=\n-              Conversion_Operations.To_Unix_Time (Ada_Time);\n+        Conversion_Operations.To_Unix_Time (Ada_Time);\n    begin\n       return long (Val);\n    end To_Unix_Time;"}, {"sha": "1cf6f00d974641cd8554da035a478a52edbd3998", "filename": "gcc/ada/a-caldel-vms.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-caldel-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-caldel-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-caldel-vms.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -7,7 +7,7 @@\n --                                  B o d y                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2010, AdaCore                     --\n+--                     Copyright (C) 1995-2012, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -78,7 +78,7 @@ package body Ada.Calendar.Delays is\n       --  cause overflow.\n \n       Safe_T : constant Time :=\n-                 (if T > Safe_Ada_High then Safe_Ada_High else T);\n+        (if T > Safe_Ada_High then Safe_Ada_High else T);\n \n    begin\n       return OSP.To_Duration (OSP.OS_Time (Safe_T), OSP.Absolute_Calendar);"}, {"sha": "9d6913d0434f5ebf891a031589fffdb54566cbdb", "filename": "gcc/ada/a-calend-vms.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-calend-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-calend-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend-vms.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -141,7 +141,7 @@ package body Ada.Calendar is\n    --  UTC, it must be increased to include all leap seconds.\n \n    Ada_High_And_Leaps : constant OS_Time :=\n-                          Ada_High + OS_Time (Leap_Seconds_Count) * Mili;\n+     Ada_High + OS_Time (Leap_Seconds_Count) * Mili;\n \n    --  Two constants used in the calculations of elapsed leap seconds.\n    --  End_Of_Time is later than Ada_High in time zone -28. Start_Of_Time\n@@ -221,9 +221,9 @@ package body Ada.Calendar is\n       --  The bound of type Duration expressed as time\n \n       Dur_High : constant OS_Time :=\n-                   OS_Time (To_Relative_Time (Duration'Last));\n+        OS_Time (To_Relative_Time (Duration'Last));\n       Dur_Low  : constant OS_Time :=\n-                   OS_Time (To_Relative_Time (Duration'First));\n+        OS_Time (To_Relative_Time (Duration'First));\n \n       Res_M : OS_Time;\n "}, {"sha": "dbc95771e7103d000d05637517b87bf1fc8f6002", "filename": "gcc/ada/a-calend.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-calend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-calend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -177,29 +177,29 @@ package body Ada.Calendar is\n    --  UTC, it must be increased to include all leap seconds.\n \n    Ada_High_And_Leaps : constant Time_Rep :=\n-                          Ada_High + Time_Rep (Leap_Seconds_Count) * Nano;\n+     Ada_High + Time_Rep (Leap_Seconds_Count) * Nano;\n \n    --  Two constants used in the calculations of elapsed leap seconds.\n    --  End_Of_Time is later than Ada_High in time zone -28. Start_Of_Time\n    --  is earlier than Ada_Low in time zone +28.\n \n    End_Of_Time   : constant Time_Rep :=\n-                     Ada_High + Time_Rep (3) * Nanos_In_Day;\n+     Ada_High + Time_Rep (3) * Nanos_In_Day;\n    Start_Of_Time : constant Time_Rep :=\n-                     Ada_Low - Time_Rep (3) * Nanos_In_Day;\n+     Ada_Low - Time_Rep (3) * Nanos_In_Day;\n \n    --  The Unix lower time bound expressed as nanoseconds since the start of\n    --  Ada time in UTC.\n \n    Unix_Min : constant Time_Rep :=\n-                Ada_Low + Time_Rep (17 * 366 + 52 * 365) * Nanos_In_Day;\n+     Ada_Low + Time_Rep (17 * 366 + 52 * 365) * Nanos_In_Day;\n \n    --  The Unix upper time bound expressed as nanoseconds since the start of\n    --  Ada time in UTC.\n \n    Unix_Max : constant Time_Rep :=\n-                Ada_Low + Time_Rep (34 * 366 + 102 * 365) * Nanos_In_Day +\n-                          Time_Rep (Leap_Seconds_Count) * Nano;\n+     Ada_Low + Time_Rep (34 * 366 + 102 * 365) * Nanos_In_Day +\n+     Time_Rep (Leap_Seconds_Count) * Nano;\n \n    Epoch_Offset : constant Time_Rep := (136 * 365 + 44 * 366) * Nanos_In_Day;\n    --  The difference between 2150-1-1 UTC and 1970-1-1 UTC expressed in\n@@ -367,7 +367,7 @@ package body Ada.Calendar is\n       --  by adding the number of nanoseconds between the two origins.\n \n       Res_N : Time_Rep :=\n-                Duration_To_Time_Rep (System.OS_Primitives.Clock) + Unix_Min;\n+        Duration_To_Time_Rep (System.OS_Primitives.Clock) + Unix_Min;\n \n    begin\n       --  If the target supports leap seconds, determine the number of leap\n@@ -1283,7 +1283,7 @@ package body Ada.Calendar is\n          else\n             declare\n                Off : constant Long_Integer :=\n-                       UTC_Time_Offset (Time (Date_N), Is_Historic);\n+                 UTC_Time_Offset (Time (Date_N), Is_Historic);\n \n             begin\n                Date_N := Date_N + Time_Rep (Off) * Nano;\n@@ -1506,11 +1506,11 @@ package body Ada.Calendar is\n          else\n             declare\n                Cur_Off   : constant Long_Integer :=\n-                             UTC_Time_Offset (Time (Res_N), Is_Historic);\n+                 UTC_Time_Offset (Time (Res_N), Is_Historic);\n                Cur_Res_N : constant Time_Rep :=\n-                             Res_N - Time_Rep (Cur_Off) * Nano;\n+                 Res_N - Time_Rep (Cur_Off) * Nano;\n                Off       : constant Long_Integer :=\n-                             UTC_Time_Offset (Time (Cur_Res_N), Is_Historic);\n+                 UTC_Time_Offset (Time (Cur_Res_N), Is_Historic);\n \n             begin\n                Res_N := Res_N - Time_Rep (Off) * Nano;"}, {"sha": "6da6f1d40b9ee0100550f72fb1adf75de97cda03", "filename": "gcc/ada/a-calfor.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-calfor.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-calfor.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calfor.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -213,7 +213,7 @@ package body Ada.Calendar.Formatting is\n \n       Result : String := \"0000-00-00 00:00:00.00\";\n       Last   : constant Positive :=\n-                 Result'Last - (if Include_Time_Fraction then 0 else 3);\n+        Result'Last - (if Include_Time_Fraction then 0 else 3);\n \n    begin\n       Split (Date, Year, Month, Day,"}, {"sha": "3c3c02f709c9072b55b96e7d309d60b336e3079d", "filename": "gcc/ada/a-catizo.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-catizo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-catizo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-catizo.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -44,7 +44,7 @@ package body Ada.Calendar.Time_Zones is\n \n    function UTC_Time_Offset (Date : Time := Clock) return Time_Offset is\n       Offset_L : constant Long_Integer :=\n-                   Time_Zones_Operations.UTC_Time_Offset (Date);\n+        Time_Zones_Operations.UTC_Time_Offset (Date);\n       Offset   : Time_Offset;\n \n    begin"}, {"sha": "5db2d58f3d7abfe156cc74c18a406a899f226077", "filename": "gcc/ada/a-cbdlli.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cbdlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cbdlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbdlli.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -902,7 +902,7 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n \n          procedure Sort (Front, Back : Count_Type) is\n             Pivot : constant Count_Type :=\n-                      (if Front = 0 then Container.First else N (Front).Next);\n+              (if Front = 0 then Container.First else N (Front).Next);\n          begin\n             if Pivot /= Back then\n                Partition (Pivot, Back);\n@@ -1160,9 +1160,9 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       --  for a reverse iterator, Container.Last is the beginning.\n \n       return It : constant Iterator :=\n-                    Iterator'(Limited_Controlled with\n-                                Container => Container'Unrestricted_Access,\n-                                Node      => 0)\n+        Iterator'(Limited_Controlled with\n+                    Container => Container'Unrestricted_Access,\n+                    Node      => 0)\n       do\n          B := B + 1;\n       end return;\n@@ -1209,9 +1209,9 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       --  is a forward or reverse iteration.\n \n       return It : constant Iterator :=\n-                    Iterator'(Limited_Controlled with\n-                                Container => Container'Unrestricted_Access,\n-                                Node      => Start.Node)\n+        Iterator'(Limited_Controlled with\n+                    Container => Container'Unrestricted_Access,\n+                    Node      => Start.Node)\n       do\n          B := B + 1;\n       end return;"}, {"sha": "314bed6142d6127eecaa43cdde5481b5e3681db2", "filename": "gcc/ada/a-cbhama.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cbhama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cbhama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbhama.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -739,8 +739,8 @@ package body Ada.Containers.Bounded_Hashed_Maps is\n \n    begin\n       return It : constant Iterator :=\n-                    (Limited_Controlled with\n-                       Container => Container'Unrestricted_Access)\n+        (Limited_Controlled with\n+           Container => Container'Unrestricted_Access)\n       do\n          B := B + 1;\n       end return;"}, {"sha": "cc60762ed15a2c12676810ffaf490496e48589f8", "filename": "gcc/ada/a-cbhase.adb", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cbhase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cbhase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbhase.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -129,7 +129,7 @@ package body Ada.Containers.Bounded_Hashed_Sets is\n          L_Node : Node_Type) return Boolean\n       is\n          R_Index : constant Hash_Type :=\n-                     Element_Keys.Index (R_HT, L_Node.Element);\n+           Element_Keys.Index (R_HT, L_Node.Element);\n \n          R_Node  : Count_Type := R_HT.Buckets (R_Index);\n \n@@ -480,7 +480,7 @@ package body Ada.Containers.Bounded_Hashed_Sets is\n          L_Node : Node_Type) return Boolean\n       is\n          R_Index : constant Hash_Type :=\n-                     Element_Keys.Index (R_HT, L_Node.Element);\n+           Element_Keys.Index (R_HT, L_Node.Element);\n \n          R_Node  : Count_Type := R_HT.Buckets (R_Index);\n \n@@ -959,8 +959,8 @@ package body Ada.Containers.Bounded_Hashed_Sets is\n    begin\n       B := B + 1;\n       return It : constant Iterator :=\n-                    Iterator'(Limited_Controlled with\n-                                Container => Container'Unrestricted_Access);\n+        Iterator'(Limited_Controlled with\n+                    Container => Container'Unrestricted_Access);\n    end Iterate;\n \n    ------------\n@@ -1180,8 +1180,7 @@ package body Ada.Containers.Bounded_Hashed_Sets is\n      (Container : in out Set;\n       New_Item  : Element_Type)\n    is\n-      Node : constant Count_Type :=\n-               Element_Keys.Find (Container, New_Item);\n+      Node : constant Count_Type := Element_Keys.Find (Container, New_Item);\n \n    begin\n       if Node = 0 then"}, {"sha": "536f00afdb34765523caa99c6c7909b38643f03d", "filename": "gcc/ada/a-cbmutr.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cbmutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cbmutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbmutr.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---             Copyright (C) 2011, Free Software Foundation, Inc.           --\n+--             Copyright (C) 2011-2012, Free Software Foundation, Inc.      --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1903,9 +1903,9 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n       end if;\n \n       return It : constant Child_Iterator :=\n-                    Child_Iterator'(Limited_Controlled with\n-                                      Container => C,\n-                                      Subtree   => Parent.Node)\n+        Child_Iterator'(Limited_Controlled with\n+                          Container => C,\n+                          Subtree   => Parent.Node)\n       do\n          B := B + 1;\n       end return;\n@@ -1931,9 +1931,9 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n          B : Natural renames Position.Container.Busy;\n       begin\n          return It : constant Subtree_Iterator :=\n-                       (Limited_Controlled with\n-                          Container => Position.Container,\n-                          Subtree   => Position.Node)\n+           (Limited_Controlled with\n+              Container => Position.Container,\n+              Subtree   => Position.Node)\n          do\n             B := B + 1;\n          end return;"}, {"sha": "8fca6495dc563901a3b05d7579927b5fd3fcceb3", "filename": "gcc/ada/a-cborma.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cborma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cborma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cborma.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -980,9 +980,9 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n       --  for a reverse iterator, Container.Last is the beginning.\n \n       return It : constant Iterator :=\n-                    (Limited_Controlled with\n-                       Container => Container'Unrestricted_Access,\n-                       Node      => 0)\n+        (Limited_Controlled with\n+           Container => Container'Unrestricted_Access,\n+           Node      => 0)\n       do\n          B := B + 1;\n       end return;\n@@ -1029,9 +1029,9 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n       --  is a forward or reverse iteration.)\n \n       return It : constant Iterator :=\n-                    (Limited_Controlled with\n-                       Container => Container'Unrestricted_Access,\n-                       Node      => Start.Node)\n+        (Limited_Controlled with\n+           Container => Container'Unrestricted_Access,\n+           Node      => Start.Node)\n       do\n          B := B + 1;\n       end return;\n@@ -1174,7 +1174,7 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n          M : Map renames Position.Container.all;\n \n          Node : constant Count_Type :=\n-                  Tree_Operations.Next (M, Position.Node);\n+           Tree_Operations.Next (M, Position.Node);\n \n       begin\n          if Node = 0 then\n@@ -1233,7 +1233,7 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n          M : Map renames Position.Container.all;\n \n          Node : constant Count_Type :=\n-                  Tree_Operations.Previous (M, Position.Node);\n+           Tree_Operations.Previous (M, Position.Node);\n \n       begin\n          if Node = 0 then"}, {"sha": "3131de1370063d9494d18d4c8a3b323c19e25904", "filename": "gcc/ada/a-cborse.adb", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cborse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cborse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cborse.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -378,7 +378,7 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n \n    function Ceiling (Container : Set; Item : Element_Type) return Cursor is\n       Node : constant Count_Type :=\n-               Element_Keys.Ceiling (Container, Item);\n+        Element_Keys.Ceiling (Container, Item);\n    begin\n       return (if Node = 0 then No_Element\n               else Cursor'(Container'Unrestricted_Access, Node));\n@@ -720,7 +720,7 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n \n       function Ceiling (Container : Set; Key : Key_Type) return Cursor is\n          Node : constant Count_Type :=\n-                  Key_Keys.Ceiling (Container, Key);\n+           Key_Keys.Ceiling (Container, Key);\n       begin\n          return (if Node = 0 then No_Element\n                  else Cursor'(Container'Unrestricted_Access, Node));\n@@ -1334,9 +1334,9 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n       --  for a reverse iterator, Container.Last is the beginning.\n \n       return It : constant Iterator :=\n-                    Iterator'(Limited_Controlled with\n-                                Container => Container'Unrestricted_Access,\n-                                Node      => 0)\n+        Iterator'(Limited_Controlled with\n+                    Container => Container'Unrestricted_Access,\n+                    Node      => 0)\n       do\n          B := B + 1;\n       end return;\n@@ -1382,9 +1382,9 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n       --  is a forward or reverse iteration.)\n \n       return It : constant Iterator :=\n-                    Iterator'(Limited_Controlled with\n-                                Container => Container'Unrestricted_Access,\n-                                Node      => Start.Node)\n+        Iterator'(Limited_Controlled with\n+                    Container => Container'Unrestricted_Access,\n+                    Node      => Start.Node)\n       do\n          B := B + 1;\n       end return;\n@@ -1487,7 +1487,7 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n \n       declare\n          Node : constant Count_Type :=\n-                  Tree_Operations.Next (Position.Container.all, Position.Node);\n+           Tree_Operations.Next (Position.Container.all, Position.Node);\n \n       begin\n          if Node = 0 then\n@@ -1548,9 +1548,7 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n \n       declare\n          Node : constant Count_Type :=\n-                  Tree_Operations.Previous\n-                    (Position.Container.all,\n-                     Position.Node);\n+           Tree_Operations.Previous (Position.Container.all, Position.Node);\n       begin\n          return (if Node = 0 then No_Element\n                  else Cursor'(Position.Container, Node));"}, {"sha": "8234f327eb1bdda2fa38526711e29ded8e0a5a8c", "filename": "gcc/ada/a-cdlili.adb", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cdlili.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cdlili.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cdlili.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -264,9 +264,8 @@ package body Ada.Containers.Doubly_Linked_Lists is\n          L : Natural renames C.Lock;\n       begin\n          return R : constant Constant_Reference_Type :=\n-                      (Element => Position.Node.Element'Access,\n-                       Control =>\n-                         (Controlled with Container'Unrestricted_Access))\n+           (Element => Position.Node.Element'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -750,7 +749,7 @@ package body Ada.Containers.Doubly_Linked_Lists is\n \n          procedure Sort (Front, Back : Node_Access) is\n             Pivot : constant Node_Access :=\n-                      (if Front = null then Container.First else Front.Next);\n+              (if Front = null then Container.First else Front.Next);\n          begin\n             if Pivot /= Back then\n                Partition (Pivot, Back);\n@@ -997,9 +996,9 @@ package body Ada.Containers.Doubly_Linked_Lists is\n       --  for a reverse iterator, Container.Last is the beginning.\n \n       return It : constant Iterator :=\n-                    Iterator'(Limited_Controlled with\n-                                Container => Container'Unrestricted_Access,\n-                                Node      => null)\n+        Iterator'(Limited_Controlled with\n+                    Container => Container'Unrestricted_Access,\n+                    Node      => null)\n       do\n          B := B + 1;\n       end return;\n@@ -1044,9 +1043,9 @@ package body Ada.Containers.Doubly_Linked_Lists is\n       --  is a forward or reverse iteration.\n \n       return It : constant Iterator :=\n-                    Iterator'(Limited_Controlled with\n-                                Container => Container'Unrestricted_Access,\n-                                Node      => Start.Node)\n+        Iterator'(Limited_Controlled with\n+                    Container => Container'Unrestricted_Access,\n+                    Node      => Start.Node)\n       do\n          B := B + 1;\n       end return;\n@@ -1385,8 +1384,8 @@ package body Ada.Containers.Doubly_Linked_Lists is\n          L : Natural renames C.Lock;\n       begin\n          return R : constant Reference_Type :=\n-                      (Element => Position.Node.Element'Access,\n-                       Control => (Controlled with Position.Container))\n+           (Element => Position.Node.Element'Access,\n+            Control => (Controlled with Position.Container))\n          do\n             B := B + 1;\n             L := L + 1;"}, {"sha": "ee9484077dee1564291958da71b7425cbfce7d94", "filename": "gcc/ada/a-cfdlli.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cfdlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cfdlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfdlli.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2010-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2010-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -989,9 +989,9 @@ package body Ada.Containers.Formal_Doubly_Linked_Lists is\n       --  for a reverse iterator, Container.Last is the beginning.\n \n       return It : constant Iterator :=\n-                    Iterator'(Ada.Finalization.Limited_Controlled with\n-                                Container => Container'Unrestricted_Access,\n-                                Node      => 0)\n+        Iterator'(Ada.Finalization.Limited_Controlled with\n+                    Container => Container'Unrestricted_Access,\n+                    Node      => 0)\n       do\n          B := B + 1;\n       end return;\n@@ -1029,9 +1029,9 @@ package body Ada.Containers.Formal_Doubly_Linked_Lists is\n       --  is a forward or reverse iteration.\n \n       return It : constant Iterator :=\n-                    Iterator'(Ada.Finalization.Limited_Controlled with\n-                                Container => Container'Unrestricted_Access,\n-                                Node      => Start.Node)\n+        Iterator'(Ada.Finalization.Limited_Controlled with\n+                    Container => Container'Unrestricted_Access,\n+                    Node      => Start.Node)\n       do\n          B := B + 1;\n       end return;"}, {"sha": "c692cb666740cac2384eb3589506929e196dae96", "filename": "gcc/ada/a-cfhama.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cfhama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cfhama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfhama.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2010-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2010-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -202,7 +202,7 @@ package body Ada.Containers.Formal_Hashed_Maps is\n       Capacity : Count_Type := 0) return Map\n    is\n       C      : constant Count_Type :=\n-                 Count_Type'Max (Capacity, Source.Capacity);\n+        Count_Type'Max (Capacity, Source.Capacity);\n       H      : Hash_Type;\n       N      : Count_Type;\n       Target : Map (C, Source.Modulus);\n@@ -407,8 +407,7 @@ package body Ada.Containers.Formal_Hashed_Maps is\n    ----------\n \n    function Find (Container : Map; Key : Key_Type) return Cursor is\n-      Node : constant Count_Type :=\n-               Key_Ops.Find (Container, Key);\n+      Node : constant Count_Type := Key_Ops.Find (Container, Key);\n \n    begin\n       if Node = 0 then\n@@ -700,7 +699,7 @@ package body Ada.Containers.Formal_Hashed_Maps is\n    function Left (Container : Map; Position : Cursor) return Map is\n       Curs : Cursor;\n       C    : Map (Container.Capacity, Container.Modulus) :=\n-               Copy (Container, Container.Capacity);\n+        Copy (Container, Container.Capacity);\n       Node : Count_Type;\n \n    begin\n@@ -1026,7 +1025,7 @@ package body Ada.Containers.Formal_Hashed_Maps is\n    function Right (Container : Map; Position : Cursor) return Map is\n       Curs : Cursor := First (Container);\n       C    : Map (Container.Capacity, Container.Modulus) :=\n-               Copy (Container, Container.Capacity);\n+        Copy (Container, Container.Capacity);\n       Node : Count_Type;\n \n    begin"}, {"sha": "d5d73e2a1e82cb05e3ad81caa10b5a1a346c391c", "filename": "gcc/ada/a-cfhase.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cfhase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cfhase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfhase.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2010-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2010-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -226,7 +226,7 @@ package body Ada.Containers.Formal_Hashed_Sets is\n       Capacity : Count_Type := 0) return Set\n    is\n       C      : constant Count_Type :=\n-                 Count_Type'Max (Capacity, Source.Capacity);\n+        Count_Type'Max (Capacity, Source.Capacity);\n       H      : Hash_Type;\n       N      : Count_Type;\n       Target : Set (C, Source.Modulus);\n@@ -470,7 +470,7 @@ package body Ada.Containers.Formal_Hashed_Sets is\n          L_Node : Node_Type) return Boolean\n       is\n          R_Index : constant Hash_Type :=\n-                     Element_Keys.Index (R_HT, L_Node.Element);\n+           Element_Keys.Index (R_HT, L_Node.Element);\n          R_Node  : Count_Type := R_HT.Buckets (R_Index);\n          RN      : Nodes_Type renames R_HT.Nodes;\n \n@@ -979,7 +979,7 @@ package body Ada.Containers.Formal_Hashed_Sets is\n    function Left (Container : Set; Position : Cursor) return Set is\n       Curs : Cursor := Position;\n       C    : Set (Container.Capacity, Container.Modulus) :=\n-               Copy (Container, Container.Capacity);\n+        Copy (Container, Container.Capacity);\n       Node : Count_Type;\n \n    begin\n@@ -1280,7 +1280,7 @@ package body Ada.Containers.Formal_Hashed_Sets is\n    function Right (Container : Set; Position : Cursor) return Set is\n       Curs : Cursor := First (Container);\n       C    : Set (Container.Capacity, Container.Modulus) :=\n-               Copy (Container, Container.Capacity);\n+        Copy (Container, Container.Capacity);\n       Node : Count_Type;\n \n    begin"}, {"sha": "6b45ad6036910bb51a8dab7ad5b755d56a53bd72", "filename": "gcc/ada/a-cforma.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cforma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cforma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cforma.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2010-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2010-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1003,7 +1003,7 @@ package body Ada.Containers.Formal_Ordered_Maps is\n \n       declare\n          Node : constant Count_Type :=\n-                  Tree_Operations.Previous (Container, Position.Node);\n+           Tree_Operations.Previous (Container, Position.Node);\n \n       begin\n          if Node = 0 then"}, {"sha": "0707d74d0e857bf6b42ae4d23c4cf6d60f3eb798", "filename": "gcc/ada/a-cforse.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cforse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cforse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cforse.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2010-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2010-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1336,7 +1336,7 @@ package body Ada.Containers.Formal_Ordered_Sets is\n \n       declare\n          Node : constant Count_Type :=\n-                  Tree_Operations.Previous (Container, Position.Node);\n+           Tree_Operations.Previous (Container, Position.Node);\n       begin\n          return (if Node = 0 then No_Element else (Node => Node));\n       end;"}, {"sha": "7d5e22ee80ea91d1f0002ad57c8d8c89d96d2473", "filename": "gcc/ada/a-cidlli.adb", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cidlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cidlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cidlli.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -291,8 +291,8 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n          L : Natural renames C.Lock;\n       begin\n          return R : constant Constant_Reference_Type :=\n-                      (Element => Position.Node.Element.all'Access,\n-                       Control => (Controlled with Position.Container))\n+           (Element => Position.Node.Element.all'Access,\n+            Control => (Controlled with Position.Container))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -801,7 +801,7 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n \n          procedure Sort (Front, Back : Node_Access) is\n             Pivot : constant Node_Access :=\n-                      (if Front = null then Container.First else Front.Next);\n+              (if Front = null then Container.First else Front.Next);\n          begin\n             if Pivot /= Back then\n                Partition (Pivot, Back);\n@@ -1041,9 +1041,9 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n       --  for a reverse iterator, Container.Last is the beginning.\n \n       return It : constant Iterator :=\n-                    Iterator'(Limited_Controlled with\n-                                Container => Container'Unrestricted_Access,\n-                                Node      => null)\n+        Iterator'(Limited_Controlled with\n+                    Container => Container'Unrestricted_Access,\n+                    Node      => null)\n       do\n          B := B + 1;\n       end return;\n@@ -1090,9 +1090,9 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n       --  is a forward or reverse iteration.\n \n       return It : constant Iterator :=\n-                    Iterator'(Limited_Controlled with\n-                                Container => Container'Unrestricted_Access,\n-                                Node      => Start.Node)\n+        Iterator'(Limited_Controlled with\n+                    Container => Container'Unrestricted_Access,\n+                    Node      => Start.Node)\n       do\n          B := B + 1;\n       end return;\n@@ -1345,7 +1345,7 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n \n       declare\n          Element : Element_Access :=\n-                     new Element_Type'(Element_Type'Input (Stream));\n+           new Element_Type'(Element_Type'Input (Stream));\n       begin\n          Dst := new Node_Type'(Element, null, null);\n       exception\n@@ -1361,7 +1361,7 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n       while Item.Length < N loop\n          declare\n             Element : Element_Access :=\n-                        new Element_Type'(Element_Type'Input (Stream));\n+              new Element_Type'(Element_Type'Input (Stream));\n          begin\n             Dst := new Node_Type'(Element, Next => null, Prev => Item.Last);\n          exception\n@@ -1430,8 +1430,8 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n          L : Natural renames C.Lock;\n       begin\n          return R : constant Reference_Type :=\n-                      (Element => Position.Node.Element.all'Access,\n-                       Control => (Controlled with Position.Container))\n+           (Element => Position.Node.Element.all'Access,\n+            Control => (Controlled with Position.Container))\n          do\n             B := B + 1;\n             L := L + 1;"}, {"sha": "2d889cdfb1bc42d0b025d1150d5c55c24b3a881d", "filename": "gcc/ada/a-cihama.adb", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cihama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cihama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihama.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -239,9 +239,8 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n          L : Natural renames HT.Lock;\n       begin\n          return R : constant Constant_Reference_Type :=\n-                      (Element => Position.Node.Element.all'Access,\n-                       Control =>\n-                         (Controlled with Container'Unrestricted_Access))\n+           (Element => Position.Node.Element.all'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -271,9 +270,8 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n          L : Natural renames HT.Lock;\n       begin\n          return R : constant Constant_Reference_Type :=\n-                      (Element => Node.Element.all'Access,\n-                       Control =>\n-                         (Controlled with Container'Unrestricted_Access))\n+           (Element => Node.Element.all'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -851,8 +849,7 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n       B  : Natural renames Container'Unrestricted_Access.all.HT.Busy;\n    begin\n       return It : constant Iterator :=\n-                    (Limited_Controlled with\n-                       Container => Container'Unrestricted_Access)\n+        (Limited_Controlled with Container => Container'Unrestricted_Access)\n       do\n          B := B + 1;\n       end return;\n@@ -1110,8 +1107,8 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n          L : Natural renames HT.Lock;\n       begin\n          return R : constant Reference_Type :=\n-                      (Element => Position.Node.Element.all'Access,\n-                       Control => (Controlled with Position.Container))\n+           (Element => Position.Node.Element.all'Access,\n+            Control => (Controlled with Position.Container))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -1141,9 +1138,8 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n          L : Natural renames HT.Lock;\n       begin\n          return R : constant Reference_Type :=\n-                      (Element => Node.Element.all'Access,\n-                       Control =>\n-                         (Controlled with Container'Unrestricted_Access))\n+           (Element => Node.Element.all'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n          do\n             B := B + 1;\n             L := L + 1;"}, {"sha": "bae3ecc38973184edfe84eceeae8e8cc70e4d7ab", "filename": "gcc/ada/a-cihase.adb", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cihase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cihase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihase.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -255,9 +255,8 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n          L : Natural renames HT.Lock;\n       begin\n          return R : constant Constant_Reference_Type :=\n-                      (Element => Position.Node.Element.all'Access,\n-                       Control =>\n-                         (Controlled with Container'Unrestricted_Access))\n+           (Element => Position.Node.Element.all'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -683,7 +682,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n       L_Node : Node_Access) return Boolean\n    is\n       R_Index : constant Hash_Type :=\n-                  Element_Keys.Index (R_HT, L_Node.Element.all);\n+        Element_Keys.Index (R_HT, L_Node.Element.all);\n \n       R_Node  : Node_Access := R_HT.Buckets (R_Index);\n \n@@ -710,7 +709,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n       L_Node : Node_Access) return Boolean\n    is\n       R_Index : constant Hash_Type :=\n-                  Element_Keys.Index (R_HT, L_Node.Element.all);\n+        Element_Keys.Index (R_HT, L_Node.Element.all);\n \n       R_Node  : Node_Access := R_HT.Buckets (R_Index);\n \n@@ -1119,8 +1118,8 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n       B : Natural renames Container'Unrestricted_Access.all.HT.Busy;\n    begin\n       return It : constant Iterator :=\n-                    Iterator'(Limited_Controlled with\n-                                Container => Container'Unrestricted_Access)\n+        Iterator'(Limited_Controlled with\n+                    Container => Container'Unrestricted_Access)\n       do\n          B := B + 1;\n       end return;\n@@ -1322,7 +1321,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n       New_Item  : Element_Type)\n    is\n       Node : constant Node_Access :=\n-               Element_Keys.Find (Container.HT, New_Item);\n+        Element_Keys.Find (Container.HT, New_Item);\n \n       X : Element_Access;\n       pragma Warnings (Off, X);\n@@ -1566,7 +1565,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n \n       declare\n          Size : constant Hash_Type :=\n-                  Prime_Numbers.To_Prime (Left.Length + Right.Length);\n+           Prime_Numbers.To_Prime (Left.Length + Right.Length);\n       begin\n          Buckets := HT_Ops.New_Buckets (Length => Size);\n       end;\n@@ -1768,7 +1767,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n \n       declare\n          Size : constant Hash_Type :=\n-                  Prime_Numbers.To_Prime (Left.Length + Right.Length);\n+           Prime_Numbers.To_Prime (Left.Length + Right.Length);\n       begin\n          Buckets := HT_Ops.New_Buckets (Length => Size);\n       end;\n@@ -1990,7 +1989,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n          Key       : Key_Type) return Constant_Reference_Type\n       is\n          Node : constant Node_Access :=\n-                  Key_Keys.Find (Container.HT, Key);\n+           Key_Keys.Find (Container.HT, Key);\n \n       begin\n          if Node = null then\n@@ -2007,9 +2006,8 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n             L : Natural renames HT.Lock;\n          begin\n             return R : constant Constant_Reference_Type :=\n-                         (Element => Node.Element.all'Access,\n-                          Control =>\n-                            (Controlled with Container'Unrestricted_Access))\n+              (Element => Node.Element.all'Access,\n+               Control => (Controlled with Container'Unrestricted_Access))\n             do\n                B := B + 1;\n                L := L + 1;\n@@ -2176,7 +2174,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n          Key       : Key_Type) return Reference_Type\n       is\n          Node : constant Node_Access :=\n-                  Key_Keys.Find (Container.HT, Key);\n+           Key_Keys.Find (Container.HT, Key);\n \n       begin\n          if Node = null then\n@@ -2204,7 +2202,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n          New_Item  : Element_Type)\n       is\n          Node : constant Node_Access :=\n-                  Key_Keys.Find (Container.HT, Key);\n+           Key_Keys.Find (Container.HT, Key);\n \n       begin\n          if Node = null then"}, {"sha": "15f1640e867ec6ce1c91a9bb9698746d35684a11", "filename": "gcc/ada/a-cimutr.adb", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cimutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cimutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cimutr.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -504,9 +504,8 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n          L : Natural renames C.Lock;\n       begin\n          return R : constant Constant_Reference_Type :=\n-                      (Element => Position.Node.Element.all'Access,\n-                       Control =>\n-                         (Controlled with Container'Unrestricted_Access))\n+           (Element => Position.Node.Element.all'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -1049,7 +1048,7 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n       Item      : Element_Type) return Cursor\n    is\n       N : constant Tree_Node_Access :=\n-            Find_In_Children (Root_Node (Container), Item);\n+        Find_In_Children (Root_Node (Container), Item);\n \n    begin\n       if N = null then\n@@ -1534,9 +1533,9 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n       end if;\n \n       return It : constant Child_Iterator :=\n-                    Child_Iterator'(Limited_Controlled with\n-                                      Container => C,\n-                                      Subtree   => Parent.Node)\n+        Child_Iterator'(Limited_Controlled with\n+                          Container => C,\n+                          Subtree   => Parent.Node)\n       do\n          B := B + 1;\n       end return;\n@@ -1562,9 +1561,9 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n          B : Natural renames Position.Container.Busy;\n       begin\n          return It : constant Subtree_Iterator :=\n-                       (Limited_Controlled with\n-                          Container => Position.Container,\n-                          Subtree   => Position.Node)\n+           (Limited_Controlled with\n+              Container => Position.Container,\n+              Subtree   => Position.Node)\n          do\n             B := B + 1;\n          end return;\n@@ -2023,13 +2022,11 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n         (Parent : Tree_Node_Access) return Tree_Node_Access\n       is\n          Element : constant Element_Access :=\n-                     new Element_Type'(Element_Type'Input (Stream));\n+           new Element_Type'(Element_Type'Input (Stream));\n \n          Subtree : constant Tree_Node_Access :=\n-                     new Tree_Node_Type'\n-                           (Parent  => Parent,\n-                            Element => Element,\n-                            others  => <>);\n+           new Tree_Node_Type'\n+             (Parent  => Parent, Element => Element, others  => <>);\n \n       begin\n          Read_Count := Read_Count + 1;\n@@ -2126,8 +2123,8 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n          L : Natural renames C.Lock;\n       begin\n          return R : constant Reference_Type :=\n-                      (Element => Position.Node.Element.all'Access,\n-                       Control => (Controlled with Position.Container))\n+           (Element => Position.Node.Element.all'Access,\n+            Control => (Controlled with Position.Container))\n          do\n             B := B + 1;\n             L := L + 1;"}, {"sha": "7f2b2491eeb931d632ea46538cdc938263f1e7a1", "filename": "gcc/ada/a-ciorma.adb", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-ciorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-ciorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorma.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -399,9 +399,8 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n          L : Natural renames T.Lock;\n       begin\n          return R : constant Constant_Reference_Type :=\n-                      (Element => Position.Node.Element.all'Access,\n-                       Control =>\n-                         (Controlled with Container'Unrestricted_Access))\n+           (Element => Position.Node.Element.all'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -430,9 +429,8 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n          L : Natural renames T.Lock;\n       begin\n          return R : constant Constant_Reference_Type :=\n-                      (Element => Node.Element.all'Access,\n-                       Control =>\n-                         (Controlled with Container'Unrestricted_Access))\n+           (Element => Node.Element.all'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -1014,9 +1012,9 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n       --  for a reverse iterator, Container.Last is the beginning.\n \n       return It : constant Iterator :=\n-                    (Limited_Controlled with\n-                       Container => Container'Unrestricted_Access,\n-                       Node      => null)\n+        (Limited_Controlled with\n+           Container => Container'Unrestricted_Access,\n+           Node      => null)\n       do\n          B := B + 1;\n       end return;\n@@ -1064,9 +1062,9 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n       --  is a forward or reverse iteration.\n \n       return It : constant Iterator :=\n-                    (Limited_Controlled with\n-                       Container => Container'Unrestricted_Access,\n-                       Node      => Start.Node)\n+        (Limited_Controlled with\n+           Container => Container'Unrestricted_Access,\n+           Node      => Start.Node)\n       do\n          B := B + 1;\n       end return;\n@@ -1204,7 +1202,7 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n \n       declare\n          Node : constant Node_Access :=\n-                  Tree_Operations.Next (Position.Node);\n+           Tree_Operations.Next (Position.Node);\n       begin\n          return (if Node = null then No_Element\n                  else Cursor'(Position.Container, Node));\n@@ -1260,7 +1258,7 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n \n       declare\n          Node : constant Node_Access :=\n-                  Tree_Operations.Previous (Position.Node);\n+           Tree_Operations.Previous (Position.Node);\n       begin\n          return (if Node = null then No_Element\n                  else Cursor'(Position.Container, Node));\n@@ -1437,8 +1435,8 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n          L : Natural renames T.Lock;\n       begin\n          return R : constant Reference_Type :=\n-                      (Element => Position.Node.Element.all'Access,\n-                       Control => (Controlled with Position.Container))\n+           (Element => Position.Node.Element.all'Access,\n+            Control => (Controlled with Position.Container))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -1467,9 +1465,8 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n          L : Natural renames T.Lock;\n       begin\n          return R : constant Reference_Type :=\n-                      (Element => Node.Element.all'Access,\n-                       Control =>\n-                         (Controlled with Container'Unrestricted_Access))\n+           (Element => Node.Element.all'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -1486,8 +1483,7 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n       Key       : Key_Type;\n       New_Item  : Element_Type)\n    is\n-      Node : constant Node_Access :=\n-               Key_Ops.Find (Container.Tree, Key);\n+      Node : constant Node_Access := Key_Ops.Find (Container.Tree, Key);\n \n       K : Key_Access;\n       E : Element_Access;"}, {"sha": "4fce4754c7853172a8c5cd1261a8ece9323982a3", "filename": "gcc/ada/a-ciormu.adb", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-ciormu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-ciormu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciormu.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -340,7 +340,7 @@ package body Ada.Containers.Indefinite_Ordered_Multisets is\n \n    function Ceiling (Container : Set; Item : Element_Type) return Cursor is\n       Node : constant Node_Access :=\n-               Element_Keys.Ceiling (Container.Tree, Item);\n+        Element_Keys.Ceiling (Container.Tree, Item);\n \n    begin\n       if Node = null then\n@@ -503,8 +503,7 @@ package body Ada.Containers.Indefinite_Ordered_Multisets is\n    end Difference;\n \n    function Difference (Left, Right : Set) return Set is\n-      Tree : constant Tree_Type :=\n-               Set_Ops.Difference (Left.Tree, Right.Tree);\n+      Tree : constant Tree_Type := Set_Ops.Difference (Left.Tree, Right.Tree);\n    begin\n       return Set'(Controlled with Tree);\n    end Difference;\n@@ -601,8 +600,7 @@ package body Ada.Containers.Indefinite_Ordered_Multisets is\n    ----------\n \n    function Find (Container : Set; Item : Element_Type) return Cursor is\n-      Node : constant Node_Access :=\n-               Element_Keys.Find (Container.Tree, Item);\n+      Node : constant Node_Access := Element_Keys.Find (Container.Tree, Item);\n \n    begin\n       if Node = null then\n@@ -677,8 +675,7 @@ package body Ada.Containers.Indefinite_Ordered_Multisets is\n    -----------\n \n    function Floor (Container : Set; Item : Element_Type) return Cursor is\n-      Node : constant Node_Access :=\n-               Element_Keys.Floor (Container.Tree, Item);\n+      Node : constant Node_Access := Element_Keys.Floor (Container.Tree, Item);\n \n    begin\n       if Node = null then\n@@ -753,8 +750,7 @@ package body Ada.Containers.Indefinite_Ordered_Multisets is\n       -------------\n \n       function Ceiling (Container : Set; Key : Key_Type) return Cursor is\n-         Node : constant Node_Access :=\n-                  Key_Keys.Ceiling (Container.Tree, Key);\n+         Node : constant Node_Access := Key_Keys.Ceiling (Container.Tree, Key);\n \n       begin\n          if Node = null then\n@@ -803,8 +799,7 @@ package body Ada.Containers.Indefinite_Ordered_Multisets is\n       -------------\n \n       function Element (Container : Set; Key : Key_Type) return Element_Type is\n-         Node : constant Node_Access :=\n-                  Key_Keys.Find (Container.Tree, Key);\n+         Node : constant Node_Access := Key_Keys.Find (Container.Tree, Key);\n \n       begin\n          if Node = null then\n@@ -1259,7 +1254,7 @@ package body Ada.Containers.Indefinite_Ordered_Multisets is\n \n    function Intersection (Left, Right : Set) return Set is\n       Tree : constant Tree_Type :=\n-               Set_Ops.Intersection (Left.Tree, Right.Tree);\n+        Set_Ops.Intersection (Left.Tree, Right.Tree);\n    begin\n       return Set'(Controlled with Tree);\n    end Intersection;"}, {"sha": "a6538665a1bc90583bc4bcc8fffa28e5d21c6da5", "filename": "gcc/ada/a-ciorse.adb", "status": "modified", "additions": 28, "deletions": 43, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-ciorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-ciorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorse.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -359,7 +359,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n \n    function Ceiling (Container : Set; Item : Element_Type) return Cursor is\n       Node : constant Node_Access :=\n-               Element_Keys.Ceiling (Container.Tree, Item);\n+        Element_Keys.Ceiling (Container.Tree, Item);\n    begin\n       return (if Node = null then No_Element\n               else Cursor'(Container'Unrestricted_Access, Node));\n@@ -418,9 +418,8 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n          L : Natural renames Tree.Lock;\n       begin\n          return R : constant Constant_Reference_Type :=\n-                      (Element => Position.Node.Element.all'Access,\n-                       Control =>\n-                         (Controlled with Container'Unrestricted_Access))\n+           (Element => Position.Node.Element.all'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -494,8 +493,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n    end Delete;\n \n    procedure Delete (Container : in out Set; Item : Element_Type) is\n-      X : Node_Access :=\n-            Element_Keys.Find (Container.Tree, Item);\n+      X : Node_Access := Element_Keys.Find (Container.Tree, Item);\n \n    begin\n       if X = null then\n@@ -620,8 +618,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n    -------------\n \n    procedure Exclude (Container : in out Set; Item : Element_Type) is\n-      X : Node_Access :=\n-            Element_Keys.Find (Container.Tree, Item);\n+      X : Node_Access := Element_Keys.Find (Container.Tree, Item);\n    begin\n       if X /= null then\n          Tree_Operations.Delete_Node_Sans_Free (Container.Tree, X);\n@@ -665,8 +662,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n    ----------\n \n    function Find (Container : Set; Item : Element_Type) return Cursor is\n-      Node : constant Node_Access :=\n-               Element_Keys.Find (Container.Tree, Item);\n+      Node : constant Node_Access := Element_Keys.Find (Container.Tree, Item);\n    begin\n       if Node = null then\n          return No_Element;\n@@ -726,8 +722,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n    -----------\n \n    function Floor (Container : Set; Item : Element_Type) return Cursor is\n-      Node : constant Node_Access :=\n-               Element_Keys.Floor (Container.Tree, Item);\n+      Node : constant Node_Access := Element_Keys.Floor (Container.Tree, Item);\n    begin\n       return (if Node = null then No_Element\n               else Cursor'(Container'Unrestricted_Access, Node));\n@@ -798,8 +793,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n       -------------\n \n       function Ceiling (Container : Set; Key : Key_Type) return Cursor is\n-         Node : constant Node_Access :=\n-                  Key_Keys.Ceiling (Container.Tree, Key);\n+         Node : constant Node_Access := Key_Keys.Ceiling (Container.Tree, Key);\n       begin\n          return (if Node = null then No_Element\n                  else Cursor'(Container'Unrestricted_Access, Node));\n@@ -813,8 +807,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n         (Container : aliased Set;\n          Key       : Key_Type) return Constant_Reference_Type\n       is\n-         Node : constant Node_Access :=\n-                  Key_Keys.Find (Container.Tree, Key);\n+         Node : constant Node_Access := Key_Keys.Find (Container.Tree, Key);\n \n       begin\n          if Node = null then\n@@ -831,9 +824,8 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n             L : Natural renames Tree.Lock;\n          begin\n             return R : constant Constant_Reference_Type :=\n-                         (Element => Node.Element.all'Access,\n-                          Control =>\n-                            (Controlled with Container'Unrestricted_Access))\n+              (Element => Node.Element.all'Access,\n+               Control => (Controlled with Container'Unrestricted_Access))\n             do\n                B := B + 1;\n                L := L + 1;\n@@ -871,8 +863,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n       -------------\n \n       function Element (Container : Set; Key : Key_Type) return Element_Type is\n-         Node : constant Node_Access :=\n-                  Key_Keys.Find (Container.Tree, Key);\n+         Node : constant Node_Access := Key_Keys.Find (Container.Tree, Key);\n       begin\n          if Node = null then\n             raise Constraint_Error with \"key not in set\";\n@@ -912,8 +903,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n       ----------\n \n       function Find (Container : Set; Key : Key_Type) return Cursor is\n-         Node : constant Node_Access :=\n-                  Key_Keys.Find (Container.Tree, Key);\n+         Node : constant Node_Access := Key_Keys.Find (Container.Tree, Key);\n       begin\n          return (if Node = null then No_Element\n                  else Cursor'(Container'Unrestricted_Access, Node));\n@@ -924,8 +914,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n       -----------\n \n       function Floor (Container : Set; Key : Key_Type) return Cursor is\n-         Node : constant Node_Access :=\n-                  Key_Keys.Floor (Container.Tree, Key);\n+         Node : constant Node_Access := Key_Keys.Floor (Container.Tree, Key);\n       begin\n          return (if Node = null then No_Element\n                  else Cursor'(Container'Unrestricted_Access, Node));\n@@ -1046,8 +1035,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n         (Container : aliased in out Set;\n          Key       : Key_Type) return Reference_Type\n       is\n-         Node : constant Node_Access :=\n-                  Key_Keys.Find (Container.Tree, Key);\n+         Node : constant Node_Access := Key_Keys.Find (Container.Tree, Key);\n \n       begin\n          if Node = null then\n@@ -1309,8 +1297,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n       --------------\n \n       function New_Node return Node_Access is\n-         Element : Element_Access :=\n-                     new Element_Type'(Src_Node.Element.all);\n+         Element : Element_Access := new Element_Type'(Src_Node.Element.all);\n          Node    : Node_Access;\n \n       begin\n@@ -1348,7 +1335,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n \n    function Intersection (Left, Right : Set) return Set is\n       Tree : constant Tree_Type :=\n-               Set_Ops.Intersection (Left.Tree, Right.Tree);\n+        Set_Ops.Intersection (Left.Tree, Right.Tree);\n    begin\n       return Set'(Controlled with Tree);\n    end Intersection;\n@@ -1466,9 +1453,9 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n       --  for a reverse iterator, Container.Last is the beginning.\n \n       return It : constant Iterator :=\n-                    Iterator'(Limited_Controlled with\n-                                Container => Container'Unrestricted_Access,\n-                                Node      => null)\n+        Iterator'(Limited_Controlled with\n+                    Container => Container'Unrestricted_Access,\n+                    Node      => null)\n       do\n          B := B + 1;\n       end return;\n@@ -1516,9 +1503,9 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n       --  a forward or reverse iteration.\n \n       return It : constant Iterator :=\n-                    (Limited_Controlled with\n-                       Container => Container'Unrestricted_Access,\n-                       Node      => Start.Node)\n+        (Limited_Controlled with\n+           Container => Container'Unrestricted_Access,\n+           Node      => Start.Node)\n       do\n          B := B + 1;\n       end return;\n@@ -1622,8 +1609,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n                      \"bad cursor in Next\");\n \n       declare\n-         Node : constant Node_Access :=\n-                  Tree_Operations.Next (Position.Node);\n+         Node : constant Node_Access := Tree_Operations.Next (Position.Node);\n       begin\n          return (if Node = null then No_Element\n                  else Cursor'(Position.Container, Node));\n@@ -1689,7 +1675,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n \n       declare\n          Node : constant Node_Access :=\n-                  Tree_Operations.Previous (Position.Node);\n+           Tree_Operations.Previous (Position.Node);\n       begin\n          return (if Node = null then No_Element\n                  else Cursor'(Position.Container, Node));\n@@ -1819,7 +1805,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n \n    procedure Replace (Container : in out Set; New_Item : Element_Type) is\n       Node : constant Node_Access :=\n-               Element_Keys.Find (Container.Tree, New_Item);\n+        Element_Keys.Find (Container.Tree, New_Item);\n \n       X : Element_Access;\n       pragma Warnings (Off, X);\n@@ -2097,7 +2083,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n \n    function Symmetric_Difference (Left, Right : Set) return Set is\n       Tree : constant Tree_Type :=\n-               Set_Ops.Symmetric_Difference (Left.Tree, Right.Tree);\n+        Set_Ops.Symmetric_Difference (Left.Tree, Right.Tree);\n    begin\n       return Set'(Controlled with Tree);\n    end Symmetric_Difference;\n@@ -2126,8 +2112,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n    end Union;\n \n    function Union (Left, Right : Set) return Set is\n-      Tree : constant Tree_Type :=\n-               Set_Ops.Union (Left.Tree, Right.Tree);\n+      Tree : constant Tree_Type := Set_Ops.Union (Left.Tree, Right.Tree);\n    begin\n       return Set'(Controlled with Tree);\n    end Union;"}, {"sha": "87090258f39ecae6452e5b9a5560e4f5462e2925", "filename": "gcc/ada/a-clrefi.adb", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-clrefi.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-clrefi.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-clrefi.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2007-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2007-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -87,7 +87,7 @@ package body Ada.Command_Line.Response_File is\n          if Last_Arg = Arguments'Last then\n             declare\n                New_Arguments : constant Argument_List_Access :=\n-                                 new Argument_List (1 .. Arguments'Last * 2);\n+                 new Argument_List (1 .. Arguments'Last * 2);\n             begin\n                New_Arguments (Arguments'Range) := Arguments.all;\n                Arguments.all := (others => null);\n@@ -421,10 +421,9 @@ package body Ada.Command_Line.Response_File is\n \n                      declare\n                         Inc_File_Name     : constant String :=\n-                                              Arguments (Arg)\n-                                              (2 .. Arguments (Arg)'Last);\n+                          Arguments (Arg) (2 .. Arguments (Arg)'Last);\n                         Current_Arguments : constant Argument_List :=\n-                                              Arguments (1 .. Last_Arg);\n+                          Arguments (1 .. Last_Arg);\n                      begin\n                         Recurse (Inc_File_Name);\n \n@@ -433,10 +432,10 @@ package body Ada.Command_Line.Response_File is\n \n                         declare\n                            New_Arguments : constant Argument_List :=\n-                                             Arguments (1 .. Last_Arg);\n+                             Arguments (1 .. Last_Arg);\n                            New_Last_Arg  : constant Positive :=\n-                                             Current_Arguments'Length +\n-                                             New_Arguments'Length - 1;\n+                             Current_Arguments'Length +\n+                             New_Arguments'Length - 1;\n \n                         begin\n                            --  Grow Arguments if it is not large enough"}, {"sha": "8ca958f0b71e4bf2f7c10156ba3de2606702487d", "filename": "gcc/ada/a-cobove.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cobove.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cobove.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cobove.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -1728,9 +1728,9 @@ package body Ada.Containers.Bounded_Vectors is\n       --  for a reverse iterator, Container.Last is the beginning.\n \n       return It : constant Iterator :=\n-                    (Limited_Controlled with\n-                       Container => V,\n-                       Index     => No_Index)\n+        (Limited_Controlled with\n+           Container => V,\n+           Index     => No_Index)\n       do\n          B := B + 1;\n       end return;\n@@ -1781,9 +1781,9 @@ package body Ada.Containers.Bounded_Vectors is\n       --  a forward or reverse iteration.\n \n       return It : constant Iterator :=\n-                    (Limited_Controlled with\n-                       Container => V,\n-                       Index     => Start.Index)\n+        (Limited_Controlled with\n+           Container => V,\n+           Index     => Start.Index)\n       do\n          B := B + 1;\n       end return;\n@@ -2319,7 +2319,7 @@ package body Ada.Containers.Bounded_Vectors is\n       Index     : Index_Type := Index_Type'Last) return Extended_Index\n    is\n       Last : constant Index_Type'Base :=\n-               Index_Type'Min (Container.Last, Index);\n+        Index_Type'Min (Container.Last, Index);\n \n    begin\n       for Indx in reverse Index_Type'First .. Last loop"}, {"sha": "548512d5536822e9c32004fcc1ec94577060ce5f", "filename": "gcc/ada/a-cofove.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cofove.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cofove.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cofove.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2010-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2010-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -53,7 +53,7 @@ package body Ada.Containers.Formal_Vectors is\n \n          declare\n             E : constant Elements_Array (1 .. Length (Right)) :=\n-                  Right.Elements (1 .. RN);\n+              Right.Elements (1 .. RN);\n          begin\n             return (Length (Right), E, Last => Right.Last, others => <>);\n          end;\n@@ -62,7 +62,7 @@ package body Ada.Containers.Formal_Vectors is\n       if RN = 0 then\n          declare\n             E : constant Elements_Array (1 .. Length (Left)) :=\n-                  Left.Elements (1 .. LN);\n+              Left.Elements (1 .. LN);\n          begin\n             return (Length (Left), E, Last => Left.Last, others => <>);\n          end;\n@@ -370,7 +370,7 @@ package body Ada.Containers.Formal_Vectors is\n \n                New_Last_As_Int : constant Int'Base := Old_Last_As_Int - N;\n                New_Last        : constant Index_Type :=\n-                                   Index_Type (New_Last_As_Int);\n+                 Index_Type (New_Last_As_Int);\n \n                KK : constant Int := New_Last_As_Int - Int (No_Index);\n                K  : constant Count_Type := Count_Type (KK);\n@@ -867,7 +867,7 @@ package body Ada.Containers.Formal_Vectors is\n \n       declare\n          Dst_Last_As_Int : constant Int'Base :=\n-                             Int (Before) + Int (N) - 1 - Int (No_Index);\n+           Int (Before) + Int (N) - 1 - Int (No_Index);\n \n          Dst_Last : constant Count_Type := Count_Type (Dst_Last_As_Int);\n \n@@ -902,7 +902,7 @@ package body Ada.Containers.Formal_Vectors is\n                     Container.Elements (Dst_Last + 1 .. Length (Container));\n \n             Index_As_Int : constant Int'Base :=\n-                             Dst_Last_As_Int - Src'Length + 1;\n+              Dst_Last_As_Int - Src'Length + 1;\n \n             Index : constant Count_Type := Count_Type (Index_As_Int);\n \n@@ -1775,7 +1775,7 @@ package body Ada.Containers.Formal_Vectors is\n \n       declare\n          Last_As_Int : constant Int'Base :=\n-                         Int (Index_Type'First) + Int (Length) - 1;\n+           Int (Index_Type'First) + Int (Length) - 1;\n       begin\n          Container.Last := Index_Type'Base (Last_As_Int);\n       end;"}, {"sha": "5eee4b302c189522498cce5b04312f5032bc7a32", "filename": "gcc/ada/a-cohama.adb", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cohama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cohama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -231,8 +231,8 @@ package body Ada.Containers.Hashed_Maps is\n          L  : Natural renames HT.Lock;\n       begin\n          return R : constant Constant_Reference_Type :=\n-                      (Element => Position.Node.Element'Access,\n-                       Control => (Controlled with Position.Container))\n+           (Element => Position.Node.Element'Access,\n+            Control => (Controlled with Position.Container))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -257,9 +257,8 @@ package body Ada.Containers.Hashed_Maps is\n          L  : Natural renames HT.Lock;\n       begin\n          return R : constant Constant_Reference_Type :=\n-                      (Element => Node.Element'Access,\n-                       Control =>\n-                         (Controlled with Container'Unrestricted_Access))\n+           (Element => Node.Element'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -312,9 +311,9 @@ package body Ada.Containers.Hashed_Maps is\n      (Source : Node_Access) return Node_Access\n    is\n       Target : constant Node_Access :=\n-                 new Node_Type'(Key     => Source.Key,\n-                                Element => Source.Element,\n-                                Next    => null);\n+        new Node_Type'(Key     => Source.Key,\n+                       Element => Source.Element,\n+                       Next    => null);\n    begin\n       return Target;\n    end Copy_Node;\n@@ -774,8 +773,7 @@ package body Ada.Containers.Hashed_Maps is\n       B  : Natural renames Container'Unrestricted_Access.all.HT.Busy;\n    begin\n       return It : constant Iterator :=\n-                    (Limited_Controlled with\n-                       Container => Container'Unrestricted_Access)\n+        (Limited_Controlled with Container => Container'Unrestricted_Access)\n       do\n          B := B + 1;\n       end return;\n@@ -981,8 +979,8 @@ package body Ada.Containers.Hashed_Maps is\n          L  : Natural renames HT.Lock;\n       begin\n          return R : constant Reference_Type :=\n-                      (Element => Position.Node.Element'Access,\n-                       Control => (Controlled with Position.Container))\n+           (Element => Position.Node.Element'Access,\n+            Control => (Controlled with Position.Container))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -1007,9 +1005,8 @@ package body Ada.Containers.Hashed_Maps is\n          L  : Natural renames HT.Lock;\n       begin\n          return R : constant Reference_Type :=\n-                      (Element => Node.Element'Access,\n-                       Control =>\n-                         (Controlled with Container'Unrestricted_Access))\n+           (Element => Node.Element'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n          do\n             B := B + 1;\n             L := L + 1;"}, {"sha": "6180168a1da23570a24868c70f00bd06e010015d", "filename": "gcc/ada/a-cohase.adb", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cohase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-cohase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohase.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -238,9 +238,8 @@ package body Ada.Containers.Hashed_Sets is\n          L : Natural renames HT.Lock;\n       begin\n          return R : constant Constant_Reference_Type :=\n-                      (Element => Position.Node.Element'Access,\n-                       Control =>\n-                         (Controlled with Container'Unrestricted_Access))\n+           (Element => Position.Node.Element'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -442,7 +441,7 @@ package body Ada.Containers.Hashed_Sets is\n             if not Is_In (Right.HT, L_Node) then\n                declare\n                   J : constant Hash_Type :=\n-                        Hash (L_Node.Element) mod Buckets'Length;\n+                    Hash (L_Node.Element) mod Buckets'Length;\n \n                   Bucket : Node_Access renames Buckets (J);\n \n@@ -618,7 +617,7 @@ package body Ada.Containers.Hashed_Sets is\n       L_Node : Node_Access) return Boolean\n    is\n       R_Index : constant Hash_Type :=\n-                  Element_Keys.Index (R_HT, L_Node.Element);\n+        Element_Keys.Index (R_HT, L_Node.Element);\n \n       R_Node  : Node_Access := R_HT.Buckets (R_Index);\n \n@@ -645,7 +644,7 @@ package body Ada.Containers.Hashed_Sets is\n       L_Node : Node_Access) return Boolean\n    is\n       R_Index : constant Hash_Type :=\n-                  Element_Keys.Index (R_HT, L_Node.Element);\n+        Element_Keys.Index (R_HT, L_Node.Element);\n \n       R_Node  : Node_Access := R_HT.Buckets (R_Index);\n \n@@ -891,7 +890,7 @@ package body Ada.Containers.Hashed_Sets is\n             if Is_In (Right.HT, L_Node) then\n                declare\n                   J : constant Hash_Type :=\n-                        Hash (L_Node.Element) mod Buckets'Length;\n+                    Hash (L_Node.Element) mod Buckets'Length;\n \n                   Bucket : Node_Access renames Buckets (J);\n \n@@ -1201,7 +1200,7 @@ package body Ada.Containers.Hashed_Sets is\n       New_Item  : Element_Type)\n    is\n       Node : constant Node_Access :=\n-               Element_Keys.Find (Container.HT, New_Item);\n+        Element_Keys.Find (Container.HT, New_Item);\n \n    begin\n       if Node = null then\n@@ -1396,7 +1395,7 @@ package body Ada.Containers.Hashed_Sets is\n \n       declare\n          Size : constant Hash_Type :=\n-                  Prime_Numbers.To_Prime (Left.Length + Right.Length);\n+           Prime_Numbers.To_Prime (Left.Length + Right.Length);\n       begin\n          Buckets := HT_Ops.New_Buckets (Length => Size);\n       end;\n@@ -1520,7 +1519,7 @@ package body Ada.Containers.Hashed_Sets is\n \n          function New_Node (Next : Node_Access) return Node_Access is\n             Node : constant Node_Access :=\n-                     new Node_Type'(Src_Node.Element, Next);\n+              new Node_Type'(Src_Node.Element, Next);\n          begin\n             return Node;\n          end New_Node;\n@@ -1577,7 +1576,7 @@ package body Ada.Containers.Hashed_Sets is\n \n       declare\n          Size : constant Hash_Type :=\n-                  Prime_Numbers.To_Prime (Left.Length + Right.Length);\n+           Prime_Numbers.To_Prime (Left.Length + Right.Length);\n       begin\n          Buckets := HT_Ops.New_Buckets (Length => Size);\n       end;\n@@ -1594,7 +1593,7 @@ package body Ada.Containers.Hashed_Sets is\n \n          procedure Process (L_Node : Node_Access) is\n             J : constant Hash_Type :=\n-                  Hash (L_Node.Element) mod Buckets'Length;\n+              Hash (L_Node.Element) mod Buckets'Length;\n \n          begin\n             Buckets (J) := new Node_Type'(L_Node.Element, Buckets (J));\n@@ -1624,7 +1623,7 @@ package body Ada.Containers.Hashed_Sets is\n \n          procedure Process (Src_Node : Node_Access) is\n             J : constant Hash_Type :=\n-                  Hash (Src_Node.Element) mod Buckets'Length;\n+              Hash (Src_Node.Element) mod Buckets'Length;\n \n             Tgt_Node : Node_Access := Buckets (J);\n \n@@ -1781,8 +1780,7 @@ package body Ada.Containers.Hashed_Sets is\n         (Container : aliased Set;\n          Key       : Key_Type) return Constant_Reference_Type\n       is\n-         Node : constant Node_Access :=\n-                  Key_Keys.Find (Container.HT, Key);\n+         Node : constant Node_Access := Key_Keys.Find (Container.HT, Key);\n \n       begin\n          if Node = null then\n@@ -1795,9 +1793,8 @@ package body Ada.Containers.Hashed_Sets is\n             L : Natural renames HT.Lock;\n          begin\n             return R : constant Constant_Reference_Type :=\n-                         (Element => Node.Element'Access,\n-                          Control =>\n-                            (Controlled with Container'Unrestricted_Access))\n+              (Element => Node.Element'Access,\n+               Control => (Controlled with Container'Unrestricted_Access))\n             do\n                B := B + 1;\n                L := L + 1;\n@@ -1889,8 +1886,7 @@ package body Ada.Containers.Hashed_Sets is\n         (Container : Set;\n          Key       : Key_Type) return Cursor\n       is\n-         Node : constant Node_Access :=\n-                  Key_Keys.Find (Container.HT, Key);\n+         Node : constant Node_Access := Key_Keys.Find (Container.HT, Key);\n \n       begin\n          if Node = null then\n@@ -1961,8 +1957,7 @@ package body Ada.Containers.Hashed_Sets is\n         (Container : aliased in out Set;\n          Key       : Key_Type) return Reference_Type\n       is\n-         Node : constant Node_Access :=\n-                  Key_Keys.Find (Container.HT, Key);\n+         Node : constant Node_Access := Key_Keys.Find (Container.HT, Key);\n \n       begin\n          if Node = null then\n@@ -1985,8 +1980,7 @@ package body Ada.Containers.Hashed_Sets is\n          Key       : Key_Type;\n          New_Item  : Element_Type)\n       is\n-         Node : constant Node_Access :=\n-                  Key_Keys.Find (Container.HT, Key);\n+         Node : constant Node_Access := Key_Keys.Find (Container.HT, Key);\n \n       begin\n          if Node = null then"}, {"sha": "5b59c019da59b004e1de93d4923f6df9d016bdec", "filename": "gcc/ada/a-coinve.adb", "status": "modified", "additions": 22, "deletions": 29, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-coinve.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-coinve.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinve.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -90,8 +90,7 @@ package body Ada.Containers.Indefinite_Vectors is\n             RE : Elements_Array renames\n                    Right.Elements.EA (Index_Type'First .. Right.Last);\n \n-            Elements : Elements_Access :=\n-                         new Elements_Type (Right.Last);\n+            Elements : Elements_Access := new Elements_Type (Right.Last);\n \n          begin\n             --  Elements of an indefinite vector are allocated, so we cannot\n@@ -126,8 +125,7 @@ package body Ada.Containers.Indefinite_Vectors is\n             LE : Elements_Array renames\n                    Left.Elements.EA (Index_Type'First .. Left.Last);\n \n-            Elements : Elements_Access :=\n-                         new Elements_Type (Left.Last);\n+            Elements : Elements_Access := new Elements_Type (Left.Last);\n \n          begin\n             --  Elements of an indefinite vector are allocated, so we cannot\n@@ -348,8 +346,7 @@ package body Ada.Containers.Indefinite_Vectors is\n          LE : Elements_Array renames\n                  Left.Elements.EA (Index_Type'First .. Left.Last);\n \n-         Elements : Elements_Access :=\n-                       new Elements_Type (Last);\n+         Elements : Elements_Access := new Elements_Type (Last);\n \n       begin\n          for I in LE'Range loop\n@@ -433,8 +430,7 @@ package body Ada.Containers.Indefinite_Vectors is\n          RE : Elements_Array renames\n                 Right.Elements.EA (Index_Type'First .. Right.Last);\n \n-         Elements : Elements_Access :=\n-                      new Elements_Type (Last);\n+         Elements : Elements_Access := new Elements_Type (Last);\n \n          I : Index_Type'Base := Index_Type'First;\n \n@@ -717,9 +713,8 @@ package body Ada.Containers.Indefinite_Vectors is\n          L : Natural renames C.Lock;\n       begin\n          return R : constant Constant_Reference_Type :=\n-                      (Element => E.all'Access,\n-                       Control =>\n-                         (Controlled with Container'Unrestricted_Access))\n+           (Element => E.all'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -750,9 +745,8 @@ package body Ada.Containers.Indefinite_Vectors is\n          L : Natural renames C.Lock;\n       begin\n          return R : constant Constant_Reference_Type :=\n-                      (Element => E.all'Access,\n-                       Control =>\n-                         (Controlled with Container'Unrestricted_Access))\n+           (Element => E.all'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -1138,7 +1132,7 @@ package body Ada.Containers.Indefinite_Vectors is\n \n       declare\n          EA : constant Element_Access :=\n-                Position.Container.Elements.EA (Position.Index);\n+           Position.Container.Elements.EA (Position.Index);\n \n       begin\n          if EA = null then\n@@ -1287,7 +1281,7 @@ package body Ada.Containers.Indefinite_Vectors is\n \n       declare\n          EA : constant Element_Access :=\n-                Container.Elements.EA (Index_Type'First);\n+           Container.Elements.EA (Index_Type'First);\n \n       begin\n          if EA = null then\n@@ -2708,9 +2702,9 @@ package body Ada.Containers.Indefinite_Vectors is\n       --  for a reverse iterator, Container.Last is the beginning.\n \n       return It : constant Iterator :=\n-                    (Limited_Controlled with\n-                       Container => V,\n-                       Index     => No_Index)\n+        (Limited_Controlled with\n+           Container => V,\n+           Index     => No_Index)\n       do\n          B := B + 1;\n       end return;\n@@ -2761,9 +2755,9 @@ package body Ada.Containers.Indefinite_Vectors is\n       --  is a forward or reverse iteration.\n \n       return It : constant Iterator :=\n-                    (Limited_Controlled with\n-                       Container => V,\n-                       Index     => Start.Index)\n+        (Limited_Controlled with\n+           Container => V,\n+           Index     => Start.Index)\n       do\n          B := B + 1;\n       end return;\n@@ -2816,7 +2810,7 @@ package body Ada.Containers.Indefinite_Vectors is\n \n       declare\n          EA : constant Element_Access :=\n-                Container.Elements.EA (Container.Last);\n+           Container.Elements.EA (Container.Last);\n \n       begin\n          if EA = null then\n@@ -3155,8 +3149,8 @@ package body Ada.Containers.Indefinite_Vectors is\n          L : Natural renames C.Lock;\n       begin\n          return R : constant Reference_Type :=\n-                      (Element => E.all'Access,\n-                       Control => (Controlled with Position.Container))\n+           (Element => E.all'Access,\n+            Control => (Controlled with Position.Container))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -3187,9 +3181,8 @@ package body Ada.Containers.Indefinite_Vectors is\n          L : Natural renames C.Lock;\n       begin\n          return R : constant Reference_Type :=\n-                      (Element => E.all'Access,\n-                       Control =>\n-                         (Controlled with Container'Unrestricted_Access))\n+           (Element => E.all'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -3652,7 +3645,7 @@ package body Ada.Containers.Indefinite_Vectors is\n       Index     : Index_Type := Index_Type'Last) return Extended_Index\n    is\n       Last : constant Index_Type'Base :=\n-               (if Index > Container.Last then Container.Last else Index);\n+        (if Index > Container.Last then Container.Last else Index);\n    begin\n       for Indx in reverse Index_Type'First .. Last loop\n          if Container.Elements.EA (Indx) /= null"}, {"sha": "426c6f0675b1686bb6b863f928d4019f73d0fe25", "filename": "gcc/ada/a-comutr.adb", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-comutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-comutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-comutr.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -484,9 +484,8 @@ package body Ada.Containers.Multiway_Trees is\n          L : Natural renames C.Lock;\n       begin\n          return R : constant Constant_Reference_Type :=\n-                      (Element => Position.Node.Element'Access,\n-                       Control =>\n-                         (Controlled with Container'Unrestricted_Access))\n+           (Element => Position.Node.Element'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -1009,7 +1008,7 @@ package body Ada.Containers.Multiway_Trees is\n       Item      : Element_Type) return Cursor\n    is\n       N : constant Tree_Node_Access :=\n-            Find_In_Children (Root_Node (Container), Item);\n+        Find_In_Children (Root_Node (Container), Item);\n    begin\n       if N = null then\n          return No_Element;\n@@ -1537,9 +1536,9 @@ package body Ada.Containers.Multiway_Trees is\n       end if;\n \n       return It : constant Child_Iterator :=\n-                    (Limited_Controlled with\n-                       Container => C,\n-                       Subtree   => Parent.Node)\n+        (Limited_Controlled with\n+           Container => C,\n+           Subtree   => Parent.Node)\n       do\n          B := B + 1;\n       end return;\n@@ -1565,9 +1564,9 @@ package body Ada.Containers.Multiway_Trees is\n          B : Natural renames Position.Container.Busy;\n       begin\n          return It : constant Subtree_Iterator :=\n-                       (Limited_Controlled with\n-                          Container => Position.Container,\n-                          Subtree   => Position.Node)\n+           (Limited_Controlled with\n+              Container => Position.Container,\n+              Subtree   => Position.Node)\n          do\n             B := B + 1;\n          end return;\n@@ -2006,10 +2005,10 @@ package body Ada.Containers.Multiway_Trees is\n         (Parent : Tree_Node_Access) return Tree_Node_Access\n       is\n          Subtree : constant Tree_Node_Access :=\n-                     new Tree_Node_Type'\n-                           (Parent  => Parent,\n-                            Element => Element_Type'Input (Stream),\n-                            others  => <>);\n+           new Tree_Node_Type'\n+             (Parent  => Parent,\n+              Element => Element_Type'Input (Stream),\n+              others  => <>);\n \n       begin\n          Read_Count := Read_Count + 1;\n@@ -2102,8 +2101,8 @@ package body Ada.Containers.Multiway_Trees is\n          L : Natural renames C.Lock;\n       begin\n          return R : constant Reference_Type :=\n-                      (Element => Position.Node.Element'Access,\n-                       Control => (Controlled with Position.Container))\n+           (Element => Position.Node.Element'Access,\n+            Control => (Controlled with Position.Container))\n          do\n             B := B + 1;\n             L := L + 1;"}, {"sha": "6282301dd333e7d8a96385da99d99a42cdfee3b0", "filename": "gcc/ada/a-convec.adb", "status": "modified", "additions": 34, "deletions": 39, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-convec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-convec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-convec.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -85,10 +85,10 @@ package body Ada.Containers.Vectors is\n \n          declare\n             RE : Elements_Array renames\n-                   Right.Elements.EA (Index_Type'First .. Right.Last);\n+              Right.Elements.EA (Index_Type'First .. Right.Last);\n \n             Elements : constant Elements_Access :=\n-                         new Elements_Type'(Right.Last, RE);\n+              new Elements_Type'(Right.Last, RE);\n \n          begin\n             return (Controlled with Elements, Right.Last, 0, 0);\n@@ -101,7 +101,7 @@ package body Ada.Containers.Vectors is\n                    Left.Elements.EA (Index_Type'First .. Left.Last);\n \n             Elements : constant Elements_Access :=\n-                         new Elements_Type'(Left.Last, LE);\n+              new Elements_Type'(Left.Last, LE);\n \n          begin\n             return (Controlled with Elements, Left.Last, 0, 0);\n@@ -198,13 +198,13 @@ package body Ada.Containers.Vectors is\n \n       declare\n          LE : Elements_Array renames\n-                Left.Elements.EA (Index_Type'First .. Left.Last);\n+           Left.Elements.EA (Index_Type'First .. Left.Last);\n \n          RE : Elements_Array renames\n-                Right.Elements.EA (Index_Type'First .. Right.Last);\n+           Right.Elements.EA (Index_Type'First .. Right.Last);\n \n          Elements : constant Elements_Access :=\n-                      new Elements_Type'(Last, LE & RE);\n+           new Elements_Type'(Last, LE & RE);\n \n       begin\n          return (Controlled with Elements, Last, 0, 0);\n@@ -223,9 +223,9 @@ package body Ada.Containers.Vectors is\n       if Left.Is_Empty then\n          declare\n             Elements : constant Elements_Access :=\n-                         new Elements_Type'\n-                               (Last => Index_Type'First,\n-                                EA   => (others => Right));\n+              new Elements_Type'\n+                (Last => Index_Type'First,\n+                 EA   => (others => Right));\n \n          begin\n             return (Controlled with Elements, Index_Type'First, 0, 0);\n@@ -253,7 +253,7 @@ package body Ada.Containers.Vectors is\n            Left.Elements.EA (Index_Type'First .. Left.Last);\n \n          Elements : constant Elements_Access :=\n-                      new Elements_Type'(Last => Last, EA => LE & Right);\n+           new Elements_Type'(Last => Last, EA => LE & Right);\n \n       begin\n          return (Controlled with Elements, Last, 0, 0);\n@@ -272,9 +272,9 @@ package body Ada.Containers.Vectors is\n       if Right.Is_Empty then\n          declare\n             Elements : constant Elements_Access :=\n-                         new Elements_Type'\n-                               (Last => Index_Type'First,\n-                                EA   => (others => Left));\n+              new Elements_Type'\n+                (Last => Index_Type'First,\n+                 EA   => (others => Left));\n \n          begin\n             return (Controlled with Elements, Index_Type'First, 0, 0);\n@@ -302,9 +302,9 @@ package body Ada.Containers.Vectors is\n                 Right.Elements.EA (Index_Type'First .. Right.Last);\n \n          Elements : constant Elements_Access :=\n-                      new Elements_Type'\n-                        (Last => Last,\n-                         EA   => Left & RE);\n+           new Elements_Type'\n+             (Last => Last,\n+              EA   => Left & RE);\n \n       begin\n          return (Controlled with Elements, Last, 0, 0);\n@@ -332,9 +332,9 @@ package body Ada.Containers.Vectors is\n          Last : constant Index_Type := Index_Type'First + 1;\n \n          Elements : constant Elements_Access :=\n-                      new Elements_Type'\n-                            (Last => Last,\n-                             EA   => (Left, Right));\n+           new Elements_Type'\n+             (Last => Last,\n+              EA   => (Left, Right));\n \n       begin\n          return (Controlled with Elements, Last, 0, 0);\n@@ -519,10 +519,8 @@ package body Ada.Containers.Vectors is\n          L : Natural renames C.Lock;\n       begin\n          return R : constant Constant_Reference_Type :=\n-                      (Element =>\n-                         Container.Elements.EA (Position.Index)'Access,\n-                       Control =>\n-                         (Controlled with Container'Unrestricted_Access))\n+           (Element => Container.Elements.EA (Position.Index)'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -544,9 +542,8 @@ package body Ada.Containers.Vectors is\n             L : Natural renames C.Lock;\n          begin\n             return R : constant Constant_Reference_Type :=\n-                         (Element => Container.Elements.EA (Index)'Access,\n-                          Control =>\n-                            (Controlled with Container'Unrestricted_Access))\n+              (Element => Container.Elements.EA (Index)'Access,\n+               Control => (Controlled with Container'Unrestricted_Access))\n             do\n                B := B + 1;\n                L := L + 1;\n@@ -2253,9 +2250,9 @@ package body Ada.Containers.Vectors is\n       --  for a reverse iterator, Container.Last is the beginning.\n \n       return It : constant Iterator :=\n-                    (Limited_Controlled with\n-                       Container => V,\n-                       Index     => No_Index)\n+        (Limited_Controlled with\n+           Container => V,\n+           Index     => No_Index)\n       do\n          B := B + 1;\n       end return;\n@@ -2306,9 +2303,9 @@ package body Ada.Containers.Vectors is\n       --  is a forward or reverse iteration.\n \n       return It : constant Iterator :=\n-                    (Limited_Controlled with\n-                       Container => V,\n-                       Index     => Start.Index)\n+        (Limited_Controlled with\n+           Container => V,\n+           Index     => Start.Index)\n       do\n          B := B + 1;\n       end return;\n@@ -2664,9 +2661,8 @@ package body Ada.Containers.Vectors is\n          L : Natural renames C.Lock;\n       begin\n          return R : constant Reference_Type :=\n-                      (Element =>\n-                         Container.Elements.EA (Position.Index)'Access,\n-                       Control => (Controlled with Position.Container))\n+           (Element => Container.Elements.EA (Position.Index)'Access,\n+            Control => (Controlled with Position.Container))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -2688,9 +2684,8 @@ package body Ada.Containers.Vectors is\n             L : Natural renames C.Lock;\n          begin\n             return R : constant Reference_Type :=\n-                         (Element => Container.Elements.EA (Index)'Access,\n-                          Control =>\n-                            (Controlled with Container'Unrestricted_Access))\n+              (Element => Container.Elements.EA (Index)'Access,\n+               Control => (Controlled with Container'Unrestricted_Access))\n             do\n                B := B + 1;\n                L := L + 1;\n@@ -3150,7 +3145,7 @@ package body Ada.Containers.Vectors is\n       Index     : Index_Type := Index_Type'Last) return Extended_Index\n    is\n       Last : constant Index_Type'Base :=\n-               Index_Type'Min (Container.Last, Index);\n+        Index_Type'Min (Container.Last, Index);\n \n    begin\n       for Indx in reverse Index_Type'First .. Last loop"}, {"sha": "aa8fa91a8c50ee426e4fa8f5b9976b50ecbba221", "filename": "gcc/ada/a-coorma.adb", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-coorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-coorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorma.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -360,8 +360,8 @@ package body Ada.Containers.Ordered_Maps is\n          L : Natural renames T.Lock;\n       begin\n          return R : constant Constant_Reference_Type :=\n-                      (Element => Position.Node.Element'Access,\n-                       Control => (Controlled with Position.Container))\n+           (Element => Position.Node.Element'Access,\n+            Control => (Controlled with Position.Container))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -386,9 +386,8 @@ package body Ada.Containers.Ordered_Maps is\n          L : Natural renames T.Lock;\n       begin\n          return R : constant Constant_Reference_Type :=\n-                      (Element => Node.Element'Access,\n-                       Control =>\n-                         (Controlled with Container'Unrestricted_Access))\n+           (Element => Node.Element'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -422,12 +421,12 @@ package body Ada.Containers.Ordered_Maps is\n \n    function Copy_Node (Source : Node_Access) return Node_Access is\n       Target : constant Node_Access :=\n-                 new Node_Type'(Color   => Source.Color,\n-                                Key     => Source.Key,\n-                                Element => Source.Element,\n-                                Parent  => null,\n-                                Left    => null,\n-                                Right   => null);\n+        new Node_Type'(Color   => Source.Color,\n+                       Key     => Source.Key,\n+                       Element => Source.Element,\n+                       Parent  => null,\n+                       Left    => null,\n+                       Right   => null);\n    begin\n       return Target;\n    end Copy_Node;\n@@ -946,9 +945,9 @@ package body Ada.Containers.Ordered_Maps is\n       --  for a reverse iterator, Container.Last is the beginning.\n \n       return It : constant Iterator :=\n-                    (Limited_Controlled with\n-                       Container => Container'Unrestricted_Access,\n-                       Node      => null)\n+        (Limited_Controlled with\n+           Container => Container'Unrestricted_Access,\n+           Node      => null)\n       do\n          B := B + 1;\n       end return;\n@@ -994,9 +993,9 @@ package body Ada.Containers.Ordered_Maps is\n       --  is a forward or reverse iteration.\n \n       return It : constant Iterator :=\n-                    (Limited_Controlled with\n-                       Container => Container'Unrestricted_Access,\n-                       Node      => Start.Node)\n+        (Limited_Controlled with\n+           Container => Container'Unrestricted_Access,\n+           Node      => Start.Node)\n       do\n          B := B + 1;\n       end return;\n@@ -1132,8 +1131,7 @@ package body Ada.Containers.Ordered_Maps is\n                      \"Position cursor of Next is bad\");\n \n       declare\n-         Node : constant Node_Access :=\n-                  Tree_Operations.Next (Position.Node);\n+         Node : constant Node_Access := Tree_Operations.Next (Position.Node);\n \n       begin\n          if Node = null then\n@@ -1190,7 +1188,7 @@ package body Ada.Containers.Ordered_Maps is\n \n       declare\n          Node : constant Node_Access :=\n-                  Tree_Operations.Previous (Position.Node);\n+           Tree_Operations.Previous (Position.Node);\n \n       begin\n          if Node = null then\n@@ -1355,8 +1353,8 @@ package body Ada.Containers.Ordered_Maps is\n          L : Natural renames T.Lock;\n       begin\n          return R : constant Reference_Type :=\n-                      (Element => Position.Node.Element'Access,\n-                       Control => (Controlled with Position.Container))\n+           (Element => Position.Node.Element'Access,\n+            Control => (Controlled with Position.Container))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -1381,9 +1379,8 @@ package body Ada.Containers.Ordered_Maps is\n          L : Natural renames T.Lock;\n       begin\n          return R : constant Reference_Type :=\n-                      (Element => Node.Element'Access,\n-                       Control =>\n-                         (Controlled with Container'Unrestricted_Access))\n+           (Element => Node.Element'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n          do\n             B := B + 1;\n             L := L + 1;"}, {"sha": "2cc763197470d70e8e1f5c2bd0ea93d67ca08dba", "filename": "gcc/ada/a-coormu.adb", "status": "modified", "additions": 30, "deletions": 35, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-coormu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-coormu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coormu.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -308,7 +308,7 @@ package body Ada.Containers.Ordered_Multisets is\n \n    function Ceiling (Container : Set; Item : Element_Type) return Cursor is\n       Node : constant Node_Access :=\n-               Element_Keys.Ceiling (Container.Tree, Item);\n+        Element_Keys.Ceiling (Container.Tree, Item);\n \n    begin\n       if Node = null then\n@@ -365,11 +365,11 @@ package body Ada.Containers.Ordered_Multisets is\n \n    function Copy_Node (Source : Node_Access) return Node_Access is\n       Target : constant Node_Access :=\n-                 new Node_Type'(Parent  => null,\n-                                Left    => null,\n-                                Right   => null,\n-                                Color   => Source.Color,\n-                                Element => Source.Element);\n+        new Node_Type'(Parent  => null,\n+                       Left    => null,\n+                       Right   => null,\n+                       Color   => Source.Color,\n+                       Element => Source.Element);\n    begin\n       return Target;\n    end Copy_Node;\n@@ -464,7 +464,7 @@ package body Ada.Containers.Ordered_Multisets is\n \n    function Difference (Left, Right : Set) return Set is\n       Tree : constant Tree_Type :=\n-               Set_Ops.Difference (Left.Tree, Right.Tree);\n+        Set_Ops.Difference (Left.Tree, Right.Tree);\n    begin\n       return Set'(Controlled with Tree);\n    end Difference;\n@@ -568,7 +568,7 @@ package body Ada.Containers.Ordered_Multisets is\n \n    function Find (Container : Set; Item : Element_Type) return Cursor is\n       Node : constant Node_Access :=\n-               Element_Keys.Find (Container.Tree, Item);\n+        Element_Keys.Find (Container.Tree, Item);\n \n    begin\n       if Node = null then\n@@ -632,7 +632,7 @@ package body Ada.Containers.Ordered_Multisets is\n \n    function Floor (Container : Set; Item : Element_Type) return Cursor is\n       Node : constant Node_Access :=\n-               Element_Keys.Floor (Container.Tree, Item);\n+        Element_Keys.Floor (Container.Tree, Item);\n \n    begin\n       if Node = null then\n@@ -697,7 +697,7 @@ package body Ada.Containers.Ordered_Multisets is\n \n       function Ceiling (Container : Set; Key : Key_Type) return Cursor is\n          Node : constant Node_Access :=\n-                  Key_Keys.Ceiling (Container.Tree, Key);\n+           Key_Keys.Ceiling (Container.Tree, Key);\n \n       begin\n          if Node = null then\n@@ -746,8 +746,7 @@ package body Ada.Containers.Ordered_Multisets is\n       -------------\n \n       function Element (Container : Set; Key : Key_Type) return Element_Type is\n-         Node : constant Node_Access :=\n-                  Key_Keys.Find (Container.Tree, Key);\n+         Node : constant Node_Access := Key_Keys.Find (Container.Tree, Key);\n       begin\n          if Node = null then\n             raise Constraint_Error with \"key not in set\";\n@@ -795,8 +794,7 @@ package body Ada.Containers.Ordered_Multisets is\n       ----------\n \n       function Find (Container : Set; Key : Key_Type) return Cursor is\n-         Node : constant Node_Access :=\n-                  Key_Keys.Find (Container.Tree, Key);\n+         Node : constant Node_Access := Key_Keys.Find (Container.Tree, Key);\n \n       begin\n          if Node = null then\n@@ -811,8 +809,7 @@ package body Ada.Containers.Ordered_Multisets is\n       -----------\n \n       function Floor (Container : Set; Key : Key_Type) return Cursor is\n-         Node : constant Node_Access :=\n-                  Key_Keys.Floor (Container.Tree, Key);\n+         Node : constant Node_Access := Key_Keys.Floor (Container.Tree, Key);\n \n       begin\n          if Node = null then\n@@ -1099,11 +1096,11 @@ package body Ada.Containers.Ordered_Multisets is\n \n       function New_Node return Node_Access is\n          Node : constant Node_Access :=\n-                  new Node_Type'(Parent  => null,\n-                                 Left    => null,\n-                                 Right   => null,\n-                                 Color   => Red_Black_Trees.Red,\n-                                 Element => New_Item);\n+           new Node_Type'(Parent  => null,\n+                          Left    => null,\n+                          Right   => null,\n+                          Color   => Red_Black_Trees.Red,\n+                          Element => New_Item);\n       begin\n          return Node;\n       end New_Node;\n@@ -1144,11 +1141,11 @@ package body Ada.Containers.Ordered_Multisets is\n \n       function New_Node return Node_Access is\n          Node : constant Node_Access :=\n-                  new Node_Type'(Parent  => null,\n-                                 Left    => null,\n-                                 Right   => null,\n-                                 Color   => Red,\n-                                 Element => Src_Node.Element);\n+           new Node_Type'(Parent  => null,\n+                          Left    => null,\n+                          Right   => null,\n+                          Color   => Red,\n+                          Element => Src_Node.Element);\n       begin\n          return Node;\n       end New_Node;\n@@ -1174,7 +1171,7 @@ package body Ada.Containers.Ordered_Multisets is\n \n    function Intersection (Left, Right : Set) return Set is\n       Tree : constant Tree_Type :=\n-               Set_Ops.Intersection (Left.Tree, Right.Tree);\n+        Set_Ops.Intersection (Left.Tree, Right.Tree);\n    begin\n       return Set'(Controlled with Tree);\n    end Intersection;\n@@ -1385,7 +1382,7 @@ package body Ada.Containers.Ordered_Multisets is\n       --  a forward or reverse iteration.\n \n       return It : constant Iterator :=\n-                    (Limited_Controlled with S, Start.Node)\n+        (Limited_Controlled with S, Start.Node)\n       do\n          B := B + 1;\n       end return;\n@@ -1489,8 +1486,7 @@ package body Ada.Containers.Ordered_Multisets is\n                      \"bad cursor in Next\");\n \n       declare\n-         Node : constant Node_Access :=\n-                  Tree_Operations.Next (Position.Node);\n+         Node : constant Node_Access := Tree_Operations.Next (Position.Node);\n       begin\n          if Node = null then\n             return No_Element;\n@@ -1553,7 +1549,7 @@ package body Ada.Containers.Ordered_Multisets is\n \n       declare\n          Node : constant Node_Access :=\n-                  Tree_Operations.Previous (Position.Node);\n+           Tree_Operations.Previous (Position.Node);\n       begin\n          return (if Node = null then No_Element\n                  else Cursor'(Position.Container, Node));\n@@ -1884,7 +1880,7 @@ package body Ada.Containers.Ordered_Multisets is\n \n    function Symmetric_Difference (Left, Right : Set) return Set is\n       Tree : constant Tree_Type :=\n-               Set_Ops.Symmetric_Difference (Left.Tree, Right.Tree);\n+        Set_Ops.Symmetric_Difference (Left.Tree, Right.Tree);\n    begin\n       return Set'(Controlled with Tree);\n    end Symmetric_Difference;\n@@ -1912,8 +1908,7 @@ package body Ada.Containers.Ordered_Multisets is\n    end Union;\n \n    function Union (Left, Right : Set) return Set is\n-      Tree : constant Tree_Type :=\n-               Set_Ops.Union (Left.Tree, Right.Tree);\n+      Tree : constant Tree_Type := Set_Ops.Union (Left.Tree, Right.Tree);\n    begin\n       return Set'(Controlled with Tree);\n    end Union;"}, {"sha": "f92760f573d4a065b1ddf7ceaf09997144df8f91", "filename": "gcc/ada/a-coorse.adb", "status": "modified", "additions": 29, "deletions": 38, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-coorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-coorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorse.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -319,7 +319,7 @@ package body Ada.Containers.Ordered_Sets is\n \n    function Ceiling (Container : Set; Item : Element_Type) return Cursor is\n       Node : constant Node_Access :=\n-               Element_Keys.Ceiling (Container.Tree, Item);\n+        Element_Keys.Ceiling (Container.Tree, Item);\n    begin\n       return (if Node = null then No_Element\n               else Cursor'(Container'Unrestricted_Access, Node));\n@@ -373,9 +373,8 @@ package body Ada.Containers.Ordered_Sets is\n          L : Natural renames Tree.Lock;\n       begin\n          return R : constant Constant_Reference_Type :=\n-                      (Element => Position.Node.Element'Access,\n-                       Control =>\n-                         (Controlled with Container'Unrestricted_Access))\n+           (Element => Position.Node.Element'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n          do\n             B := B + 1;\n             L := L + 1;\n@@ -412,11 +411,11 @@ package body Ada.Containers.Ordered_Sets is\n \n    function Copy_Node (Source : Node_Access) return Node_Access is\n       Target : constant Node_Access :=\n-                 new Node_Type'(Parent  => null,\n-                                Left    => null,\n-                                Right   => null,\n-                                Color   => Source.Color,\n-                                Element => Source.Element);\n+        new Node_Type'(Parent  => null,\n+                       Left    => null,\n+                       Right   => null,\n+                       Color   => Source.Color,\n+                       Element => Source.Element);\n    begin\n       return Target;\n    end Copy_Node;\n@@ -493,8 +492,7 @@ package body Ada.Containers.Ordered_Sets is\n    end Difference;\n \n    function Difference (Left, Right : Set) return Set is\n-      Tree : constant Tree_Type :=\n-               Set_Ops.Difference (Left.Tree, Right.Tree);\n+      Tree : constant Tree_Type := Set_Ops.Difference (Left.Tree, Right.Tree);\n    begin\n       return Set'(Controlled with Tree);\n    end Difference;\n@@ -602,8 +600,7 @@ package body Ada.Containers.Ordered_Sets is\n    ----------\n \n    function Find (Container : Set; Item : Element_Type) return Cursor is\n-      Node : constant Node_Access :=\n-               Element_Keys.Find (Container.Tree, Item);\n+      Node : constant Node_Access := Element_Keys.Find (Container.Tree, Item);\n    begin\n       return (if Node = null then No_Element\n               else Cursor'(Container'Unrestricted_Access, Node));\n@@ -660,8 +657,7 @@ package body Ada.Containers.Ordered_Sets is\n    -----------\n \n    function Floor (Container : Set; Item : Element_Type) return Cursor is\n-      Node : constant Node_Access :=\n-               Element_Keys.Floor (Container.Tree, Item);\n+      Node : constant Node_Access := Element_Keys.Floor (Container.Tree, Item);\n    begin\n       return (if Node = null then No_Element\n               else Cursor'(Container'Unrestricted_Access, Node));\n@@ -719,8 +715,7 @@ package body Ada.Containers.Ordered_Sets is\n       -------------\n \n       function Ceiling (Container : Set; Key : Key_Type) return Cursor is\n-         Node : constant Node_Access :=\n-                  Key_Keys.Ceiling (Container.Tree, Key);\n+         Node : constant Node_Access := Key_Keys.Ceiling (Container.Tree, Key);\n       begin\n          return (if Node = null then No_Element\n                  else Cursor'(Container'Unrestricted_Access, Node));\n@@ -734,8 +729,7 @@ package body Ada.Containers.Ordered_Sets is\n         (Container : aliased Set;\n          Key       : Key_Type) return Constant_Reference_Type\n       is\n-         Node : constant Node_Access :=\n-                  Key_Keys.Find (Container.Tree, Key);\n+         Node : constant Node_Access := Key_Keys.Find (Container.Tree, Key);\n \n       begin\n          if Node = null then\n@@ -748,9 +742,8 @@ package body Ada.Containers.Ordered_Sets is\n             L : Natural renames Tree.Lock;\n          begin\n             return R : constant Constant_Reference_Type :=\n-                         (Element => Node.Element'Access,\n-                          Control =>\n-                            (Controlled with Container'Unrestricted_Access))\n+              (Element => Node.Element'Access,\n+               Control => (Controlled with Container'Unrestricted_Access))\n             do\n                B := B + 1;\n                L := L + 1;\n@@ -788,8 +781,7 @@ package body Ada.Containers.Ordered_Sets is\n       -------------\n \n       function Element (Container : Set; Key : Key_Type) return Element_Type is\n-         Node : constant Node_Access :=\n-                  Key_Keys.Find (Container.Tree, Key);\n+         Node : constant Node_Access := Key_Keys.Find (Container.Tree, Key);\n \n       begin\n          if Node = null then\n@@ -929,8 +921,7 @@ package body Ada.Containers.Ordered_Sets is\n         (Container : aliased in out Set;\n          Key       : Key_Type) return Reference_Type\n       is\n-         Node : constant Node_Access :=\n-                  Key_Keys.Find (Container.Tree, Key);\n+         Node : constant Node_Access := Key_Keys.Find (Container.Tree, Key);\n \n       begin\n          if Node = null then\n@@ -1215,7 +1206,7 @@ package body Ada.Containers.Ordered_Sets is\n \n    function Intersection (Left, Right : Set) return Set is\n       Tree : constant Tree_Type :=\n-               Set_Ops.Intersection (Left.Tree, Right.Tree);\n+        Set_Ops.Intersection (Left.Tree, Right.Tree);\n    begin\n       return Set'(Controlled with Tree);\n    end Intersection;\n@@ -1343,9 +1334,9 @@ package body Ada.Containers.Ordered_Sets is\n       B := B + 1;\n \n       return It : constant Iterator :=\n-                    Iterator'(Limited_Controlled with\n-                                Container => Container'Unrestricted_Access,\n-                                Node      => null);\n+        Iterator'(Limited_Controlled with\n+                    Container => Container'Unrestricted_Access,\n+                    Node      => null);\n    end Iterate;\n \n    function Iterate (Container : Set; Start : Cursor)\n@@ -1390,9 +1381,9 @@ package body Ada.Containers.Ordered_Sets is\n       B := B + 1;\n \n       return It : constant Iterator :=\n-                    Iterator'(Limited_Controlled with\n-                                Container => Container'Unrestricted_Access,\n-                                Node      => Start.Node);\n+        Iterator'(Limited_Controlled with\n+                    Container => Container'Unrestricted_Access,\n+                    Node      => Start.Node);\n    end Iterate;\n \n    ----------\n@@ -1485,7 +1476,7 @@ package body Ada.Containers.Ordered_Sets is\n \n       declare\n          Node : constant Node_Access :=\n-                  Tree_Operations.Next (Position.Node);\n+           Tree_Operations.Next (Position.Node);\n       begin\n          return (if Node = null then No_Element\n                  else Cursor'(Position.Container, Node));\n@@ -1544,7 +1535,7 @@ package body Ada.Containers.Ordered_Sets is\n \n       declare\n          Node : constant Node_Access :=\n-                  Tree_Operations.Previous (Position.Node);\n+           Tree_Operations.Previous (Position.Node);\n       begin\n          return (if Node = null then No_Element\n                  else Cursor'(Position.Container, Node));\n@@ -1670,7 +1661,7 @@ package body Ada.Containers.Ordered_Sets is\n \n    procedure Replace (Container : in out Set; New_Item : Element_Type) is\n       Node : constant Node_Access :=\n-               Element_Keys.Find (Container.Tree, New_Item);\n+        Element_Keys.Find (Container.Tree, New_Item);\n \n    begin\n       if Node = null then\n@@ -1899,7 +1890,7 @@ package body Ada.Containers.Ordered_Sets is\n \n    function Symmetric_Difference (Left, Right : Set) return Set is\n       Tree : constant Tree_Type :=\n-               Set_Ops.Symmetric_Difference (Left.Tree, Right.Tree);\n+        Set_Ops.Symmetric_Difference (Left.Tree, Right.Tree);\n    begin\n       return Set'(Controlled with Tree);\n    end Symmetric_Difference;\n@@ -1929,7 +1920,7 @@ package body Ada.Containers.Ordered_Sets is\n \n    function Union (Left, Right : Set) return Set is\n       Tree : constant Tree_Type :=\n-               Set_Ops.Union (Left.Tree, Right.Tree);\n+        Set_Ops.Union (Left.Tree, Right.Tree);\n    begin\n       return Set'(Controlled with Tree);\n    end Union;"}, {"sha": "8d5fe9f5c5655da589a6af2fe114da674c005812", "filename": "gcc/ada/a-crdlli.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-crdlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-crdlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-crdlli.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -562,7 +562,7 @@ package body Ada.Containers.Restricted_Doubly_Linked_Lists is\n \n          procedure Sort (Front, Back : Count_Type) is\n             Pivot : constant Count_Type :=\n-                      (if Front = 0 then Container.First else N (Front).Next);\n+              (if Front = 0 then Container.First else N (Front).Next);\n          begin\n             if Pivot /= Back then\n                Partition (Pivot, Back);"}, {"sha": "fa95d3c9cb0ff169c614a82a9a6a6ad181af06e1", "filename": "gcc/ada/a-direct.adb", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-direct.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-direct.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-direct.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -216,8 +216,7 @@ package body Ada.Directories is\n \n             Norm    : constant String := Normalize_Pathname (Name);\n             Last_DS : constant Natural :=\n-                        Strings.Fixed.Index\n-                          (Name, Dir_Seps, Going => Strings.Backward);\n+              Strings.Fixed.Index (Name, Dir_Seps, Going => Strings.Backward);\n \n          begin\n             if Last_DS = 0 then\n@@ -755,7 +754,7 @@ package body Ada.Directories is\n                  Target => Path_String_Access);\n \n             Path_Access : constant Path_String_Access :=\n-                            Address_To_Access (Filename_Addr);\n+              Address_To_Access (Filename_Addr);\n \n          begin\n             Last := Filename_Len;\n@@ -767,9 +766,7 @@ package body Ada.Directories is\n          if Match (Name (1 .. Last), Search.Value.Pattern) then\n             declare\n                Full_Name : constant String :=\n-                             Compose\n-                               (To_String\n-                                  (Search.Value.Name), Name (1 .. Last));\n+                 Compose (To_String (Search.Value.Name), Name (1 .. Last));\n                Found     : Boolean := False;\n \n             begin\n@@ -1159,8 +1156,7 @@ package body Ada.Directories is\n \n       function Simple_Name_Internal (Path : String) return String is\n          Cut_Start : Natural :=\n-                       Strings.Fixed.Index\n-                         (Path, Dir_Seps, Going => Strings.Backward);\n+           Strings.Fixed.Index (Path, Dir_Seps, Going => Strings.Backward);\n          Cut_End   : Natural;\n \n       begin\n@@ -1176,7 +1172,7 @@ package body Ada.Directories is\n             BN : constant String := Path (Cut_Start .. Cut_End);\n \n             Has_Drive_Letter : constant Boolean :=\n-                                 OS_Lib.Path_Separator /= ':';\n+              OS_Lib.Path_Separator /= ':';\n             --  If Path separator is not ':' then we are on a DOS based OS\n             --  where this character is used as a drive letter separator.\n "}, {"sha": "b9330b0448705506da9cb9ef2c0254ed9d910e1a", "filename": "gcc/ada/a-direio.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-direio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-direio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-direio.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -48,7 +48,7 @@ use type System.Direct_IO.Count;\n package body Ada.Direct_IO is\n \n    Zeroes : constant System.Storage_Elements.Storage_Array :=\n-              (1 .. System.Storage_Elements.Storage_Offset (Bytes) => 0);\n+     (1 .. System.Storage_Elements.Storage_Offset (Bytes) => 0);\n    --  Buffer used to fill out partial records\n \n    package FCB renames System.File_Control_Block;"}, {"sha": "205f128cdaf04af1fe111c15f61750dab8911825", "filename": "gcc/ada/a-dirval-mingw.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-dirval-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-dirval-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-dirval-mingw.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -7,7 +7,7 @@\n --                                 B o d y                                  --\n --                            (Windows Version)                             --\n --                                                                          --\n---          Copyright (C) 2004-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,11 +37,11 @@ with Ada.Characters.Latin_1; use Ada.Characters.Latin_1;\n package body Ada.Directories.Validity is\n \n    Invalid_Character : constant array (Character) of Boolean :=\n-                         (NUL .. US | '\\'       => True,\n-                          '/' | ':' | '*' | '?' => True,\n-                          '\"' | '<' | '>' | '|' => True,\n-                          DEL .. NBSP           => True,\n-                          others                => False);\n+     (NUL .. US | '\\'       => True,\n+      '/' | ':' | '*' | '?' => True,\n+      '\"' | '<' | '>' | '|' => True,\n+      DEL .. NBSP           => True,\n+      others                => False);\n \n    ---------------------------------\n    -- Is_Path_Name_Case_Sensitive --"}, {"sha": "c9a08310d749273a7a45a428dcc49d530e800232", "filename": "gcc/ada/a-dirval-vms.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-dirval-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-dirval-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-dirval-vms.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -7,7 +7,7 @@\n --                                 B o d y                                  --\n --                              (VMS Version)                               --\n --                                                                          --\n---          Copyright (C) 2004-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,11 +38,11 @@ package body Ada.Directories.Validity is\n    Max_Path_Length          : constant := 1_024;\n \n    Invalid_Character : constant array (Character) of Boolean :=\n-                         ('a' .. 'z' => False,\n-                          'A' .. 'Z' => False,\n-                          '0' .. '9' => False,\n-                          '_' | '$' | '-' | '.' => False,\n-                          others => True);\n+     ('a' .. 'z' => False,\n+      'A' .. 'Z' => False,\n+      '0' .. '9' => False,\n+      '_' | '$' | '-' | '.' => False,\n+      others => True);\n \n    ---------------------------------\n    -- Is_Path_Name_Case_Sensitive --"}, {"sha": "4e67934b7d93a33d04abb877872391e42e0454e6", "filename": "gcc/ada/a-dynpri.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-dynpri.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-dynpri.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-dynpri.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -82,7 +82,7 @@ package body Ada.Dynamic_Priorities is\n    procedure Set_Priority\n      (Priority : System.Any_Priority;\n       T        : Ada.Task_Identification.Task_Id :=\n-                   Ada.Task_Identification.Current_Task)\n+        Ada.Task_Identification.Current_Task)\n    is\n       Target        : constant Task_Id := Convert_Ids (T);\n       Error_Message : constant String := \"Trying to set the priority of a \";"}, {"sha": "fd3f04b115cf8d98be6cfeaac3e4525e4d162b55", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -1009,10 +1009,10 @@ package body Ada.Exceptions is\n       Prefix             : constant String := \"adjust/finalize raised \";\n       Orig_Msg           : constant String := Exception_Message (X);\n       Orig_Prefix_Length : constant Natural :=\n-                             Integer'Min (Prefix'Length, Orig_Msg'Length);\n+        Integer'Min (Prefix'Length, Orig_Msg'Length);\n       Orig_Prefix        : String renames Orig_Msg\n-                             (Orig_Msg'First ..\n-                              Orig_Msg'First + Orig_Prefix_Length - 1);\n+        (Orig_Msg'First ..\n+         Orig_Msg'First + Orig_Prefix_Length - 1);\n    begin\n       --  Message already has the proper prefix, just re-raise\n \n@@ -1446,9 +1446,9 @@ package body Ada.Exceptions is\n      (File : System.Address; Line, Column, Index, First, Last : Integer)\n    is\n       Msg : constant String :=\n-              Rmsg_05 (Rmsg_05'First .. Rmsg_05'Last - 1) & ASCII.LF &\n-              \"index \" & Image (Index) & \" not in \" & Image (First) &\n-              \"..\" & Image (Last) & ASCII.NUL;\n+        Rmsg_05 (Rmsg_05'First .. Rmsg_05'Last - 1) & ASCII.LF &\n+        \"index \" & Image (Index) & \" not in \" & Image (First) &\n+        \"..\" & Image (Last) & ASCII.NUL;\n    begin\n       Raise_Constraint_Error_Msg (File, Line, Column, Msg'Address);\n    end Rcheck_CE_Index_Check_Ext;\n@@ -1457,9 +1457,9 @@ package body Ada.Exceptions is\n      (File : System.Address; Line, Column, Index, First, Last : Integer)\n    is\n       Msg : constant String :=\n-              Rmsg_06 (Rmsg_06'First .. Rmsg_06'Last - 1) & ASCII.LF &\n-              \"value \" & Image (Index) & \" not in \" & Image (First) &\n-              \"..\" & Image (Last) & ASCII.NUL;\n+        Rmsg_06 (Rmsg_06'First .. Rmsg_06'Last - 1) & ASCII.LF &\n+        \"value \" & Image (Index) & \" not in \" & Image (First) &\n+        \"..\" & Image (Last) & ASCII.NUL;\n    begin\n       Raise_Constraint_Error_Msg (File, Line, Column, Msg'Address);\n    end Rcheck_CE_Invalid_Data_Ext;\n@@ -1468,9 +1468,9 @@ package body Ada.Exceptions is\n      (File : System.Address; Line, Column, Index, First, Last : Integer)\n    is\n       Msg : constant String :=\n-              Rmsg_12 (Rmsg_12'First .. Rmsg_12'Last - 1) & ASCII.LF &\n-              \"value \" & Image (Index) & \" not in \" & Image (First) &\n-              \"..\" & Image (Last) & ASCII.NUL;\n+        Rmsg_12 (Rmsg_12'First .. Rmsg_12'Last - 1) & ASCII.LF &\n+        \"value \" & Image (Index) & \" not in \" & Image (First) &\n+        \"..\" & Image (Last) & ASCII.NUL;\n    begin\n       Raise_Constraint_Error_Msg (File, Line, Column, Msg'Address);\n    end Rcheck_CE_Range_Check_Ext;"}, {"sha": "3dae9c4dda13e830494624d7d87eed60be026662", "filename": "gcc/ada/a-except.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -1026,10 +1026,9 @@ package body Ada.Exceptions is\n       Prefix             : constant String := \"adjust/finalize raised \";\n       Orig_Msg           : constant String := Exception_Message (X);\n       Orig_Prefix_Length : constant Natural :=\n-                             Integer'Min (Prefix'Length, Orig_Msg'Length);\n+        Integer'Min (Prefix'Length, Orig_Msg'Length);\n       Orig_Prefix        : String renames Orig_Msg\n-                            (Orig_Msg'First ..\n-                             Orig_Msg'First + Orig_Prefix_Length - 1);\n+        (Orig_Msg'First ..  Orig_Msg'First + Orig_Prefix_Length - 1);\n    begin\n       --  Message already has proper prefix, just re-reraise\n "}, {"sha": "b6919f268752a1282c778eb36101d08d73bce285", "filename": "gcc/ada/a-exetim-mingw.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-exetim-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-exetim-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exetim-mingw.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---         Copyright (C) 2007-2011, Free Software Foundation, Inc.          --\n+--         Copyright (C) 2007-2012, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -91,7 +91,7 @@ package body Ada.Execution_Time is\n \n    function Clock\n      (T : Ada.Task_Identification.Task_Id :=\n-            Ada.Task_Identification.Current_Task) return CPU_Time\n+        Ada.Task_Identification.Current_Task) return CPU_Time\n    is\n       Hundreds_Nano_In_Sec : constant Long_Long_Float := 1.0E7;\n "}, {"sha": "9dc709ac61fd5b73427d939ce66c698301935fb0", "filename": "gcc/ada/a-exetim-posix.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-exetim-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-exetim-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exetim-posix.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---         Copyright (C) 2007-2011, Free Software Foundation, Inc.          --\n+--         Copyright (C) 2007-2012, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -95,8 +95,7 @@ package body Ada.Execution_Time is\n \n    function Clock\n      (T : Ada.Task_Identification.Task_Id :=\n-            Ada.Task_Identification.Current_Task)\n-      return CPU_Time\n+        Ada.Task_Identification.Current_Task) return CPU_Time\n    is\n       TS     : aliased timespec;\n       Result : Interfaces.C.int;"}, {"sha": "85b519a5e1e30e8776728260737c6dbd08413fb1", "filename": "gcc/ada/a-exexda.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-exexda.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-exexda.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexda.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -220,7 +220,7 @@ package body Exception_Data is\n       N : Integer_Address;\n \n       H : constant array (Integer range 0 .. 15) of Character :=\n-                                                         \"0123456789abcdef\";\n+        \"0123456789abcdef\";\n    begin\n       P := S'Last;\n       N := To_Integer (A);\n@@ -659,7 +659,7 @@ package body Exception_Data is\n       Message : String)\n    is\n       Len   : constant Natural :=\n-                Natural'Min (Message'Length, Exception_Msg_Max_Length);\n+        Natural'Min (Message'Length, Exception_Msg_Max_Length);\n       First : constant Integer := Message'First;\n    begin\n       Excep.Exception_Raised := False;\n@@ -689,7 +689,7 @@ package body Exception_Data is\n       --  call become inoffensive.\n \n       Wrapper : constant Traceback_Decorator_Wrapper_Call :=\n-                  Traceback_Decorator_Wrapper;\n+        Traceback_Decorator_Wrapper;\n \n    begin\n       if Wrapper = null then"}, {"sha": "178b7e375f653e4a12931bbd55688bb8b458b2ec", "filename": "gcc/ada/a-exexpr-gcc.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-exexpr-gcc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-exexpr-gcc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexpr-gcc.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -356,7 +356,7 @@ package body Exception_Propagation is\n \n          declare\n             GNAT_Occurrence : constant GNAT_GCC_Exception_Access :=\n-                                To_GNAT_GCC_Exception (GCC_Exception);\n+              To_GNAT_GCC_Exception (GCC_Exception);\n          begin\n             Excep.all := GNAT_Occurrence.Occurrence;\n "}, {"sha": "ca0c58c36f222808e679f3b91761c7b1fd68eb0b", "filename": "gcc/ada/a-ngcoar.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-ngcoar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-ngcoar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ngcoar.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---            Copyright (C) 2006-2011, Free Software Foundation, Inc.       --\n+--            Copyright (C) 2006-2012, Free Software Foundation, Inc.       --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1073,7 +1073,7 @@ package body Ada.Numerics.Generic_Complex_Arrays is\n          for K in 1 .. N loop\n             declare\n                C : constant Complex :=\n-                     (A (A'First (1) + (J - 1), A'First (2) + (K - 1)));\n+                 (A (A'First (1) + (J - 1), A'First (2) + (K - 1)));\n             begin\n                M (J, K) := Re (C);\n                M (J + N, K + N) := Re (C);\n@@ -1120,7 +1120,7 @@ package body Ada.Numerics.Generic_Complex_Arrays is\n          for K in 1 .. N loop\n             declare\n                C : constant Complex :=\n-                     (A (A'First (1) + (J - 1), A'First (2) + (K - 1)));\n+                 (A (A'First (1) + (J - 1), A'First (2) + (K - 1)));\n             begin\n                M (J, K) := Re (C);\n                M (J + N, K + N) := Re (C);"}, {"sha": "796f57415a4c861613d34140252ed14bf5efbc88", "filename": "gcc/ada/a-ngelfu.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-ngelfu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-ngelfu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ngelfu.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -971,7 +971,7 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n       G : constant Float_Type'Base := Y * Y;\n \n       Float_Type_Digits_15_Or_More : constant Boolean :=\n-                                       Float_Type'Digits > 14;\n+        Float_Type'Digits > 14;\n \n    begin\n       if X < Half_Log_Epsilon then"}, {"sha": "397a778f36f201ae28f1e44ffe9f9fbbe0e4c9a1", "filename": "gcc/ada/a-sequio.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-sequio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-sequio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-sequio.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -182,7 +182,7 @@ package body Ada.Sequential_IO is\n          then\n             declare\n                RsizS : constant SSE.Storage_Offset :=\n-                         SSE.Storage_Offset (Rsiz - 1);\n+                 SSE.Storage_Offset (Rsiz - 1);\n \n                type SA is new SSE.Storage_Array (0 .. RsizS);\n "}, {"sha": "69c0650df8e3bda9b9fcd07e7111e105a82d23c5", "filename": "gcc/ada/a-strfix.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-strfix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-strfix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strfix.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -434,9 +434,9 @@ package body Ada.Strings.Fixed is\n \n       declare\n          Result_Length : constant Natural :=\n-                           Integer'Max\n-                             (Source'Length,\n-                              Position - Source'First + New_Item'Length);\n+           Integer'Max\n+             (Source'Length,\n+              Position - Source'First + New_Item'Length);\n \n          Result : String (1 .. Result_Length);\n          Front  : constant Integer := Position - Source'First;\n@@ -482,15 +482,15 @@ package body Ada.Strings.Fixed is\n       if High >= Low then\n          declare\n             Front_Len : constant Integer :=\n-                          Integer'Max (0, Low - Source'First);\n+              Integer'Max (0, Low - Source'First);\n             --  Length of prefix of Source copied to result\n \n             Back_Len : constant Integer :=\n-                         Integer'Max (0, Source'Last - High);\n+              Integer'Max (0, Source'Last - High);\n             --  Length of suffix of Source copied to result\n \n             Result_Length : constant Integer :=\n-                              Front_Len + By'Length + Back_Len;\n+              Front_Len + By'Length + Back_Len;\n             --  Length of result\n \n             Result : String (1 .. Result_Length);"}, {"sha": "dac8d235db1e8f3e4281f8187a79bb89462dc41f", "filename": "gcc/ada/a-strunb-shared.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-strunb-shared.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-strunb-shared.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strunb-shared.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -486,7 +486,7 @@ package body Ada.Strings.Unbounded is\n \n    function Aligned_Max_Length (Max_Length : Natural) return Natural is\n       Static_Size : constant Natural :=\n-                      Empty_Shared_String'Size / Standard'Storage_Unit;\n+        Empty_Shared_String'Size / Standard'Storage_Unit;\n       --  Total size of all static components\n \n    begin"}, {"sha": "b4c3cddf983b75ca76c674b1a922a227aa4cff63", "filename": "gcc/ada/a-strunb.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-strunb.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-strunb.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strunb.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -785,14 +785,13 @@ package body Ada.Strings.Unbounded is\n       if Chunk_Size > S_Length - Source.Last then\n          declare\n             New_Size : constant Positive :=\n-                         S_Length + Chunk_Size + (S_Length / Growth_Factor);\n+              S_Length + Chunk_Size + (S_Length / Growth_Factor);\n \n             New_Rounded_Up_Size : constant Positive :=\n-                                    ((New_Size - 1) / Min_Mul_Alloc + 1) *\n-                                       Min_Mul_Alloc;\n+              ((New_Size - 1) / Min_Mul_Alloc + 1) * Min_Mul_Alloc;\n \n             Tmp : constant String_Access :=\n-                    new String (1 .. New_Rounded_Up_Size);\n+              new String (1 .. New_Rounded_Up_Size);\n \n          begin\n             Tmp (1 .. Source.Last) := Source.Reference (1 .. Source.Last);"}, {"sha": "dfe961995da75316a581a5dc00e1856e6ed6c21a", "filename": "gcc/ada/a-stwifi.adb", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-stwifi.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-stwifi.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stwifi.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -411,9 +411,9 @@ package body Ada.Strings.Wide_Fixed is\n       else\n          declare\n             Result_Length : constant Natural :=\n-                              Natural'Max\n-                                (Source'Length,\n-                                 Position - Source'First + New_Item'Length);\n+              Natural'Max\n+                (Source'Length,\n+                 Position - Source'First + New_Item'Length);\n \n             Result : Wide_String (1 .. Result_Length);\n \n@@ -455,15 +455,14 @@ package body Ada.Strings.Wide_Fixed is\n       if High >= Low then\n          declare\n             Front_Len : constant Integer :=\n-                          Integer'Max (0, Low - Source'First);\n+              Integer'Max (0, Low - Source'First);\n             --  Length of prefix of Source copied to result\n \n-            Back_Len : constant Integer :=\n-                         Integer'Max (0, Source'Last - High);\n+            Back_Len : constant Integer := Integer'Max (0, Source'Last - High);\n             --  Length of suffix of Source copied to result\n \n             Result_Length : constant Integer :=\n-                              Front_Len + By'Length + Back_Len;\n+              Front_Len + By'Length + Back_Len;\n             --  Length of result\n \n             Result : Wide_String (1 .. Result_Length);\n@@ -622,7 +621,7 @@ package body Ada.Strings.Wide_Fixed is\n       else\n          declare\n             Result : constant Wide_String (1 .. High - Low + 1) :=\n-                       Source (Low .. High);\n+              Source (Low .. High);\n \n          begin\n             return Result;"}, {"sha": "6c3be54083c47912bbc93180dd38f0f295efa11c", "filename": "gcc/ada/a-stwiun-shared.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-stwiun-shared.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-stwiun-shared.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stwiun-shared.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -486,11 +486,11 @@ package body Ada.Strings.Wide_Unbounded is\n \n    function Aligned_Max_Length (Max_Length : Natural) return Natural is\n       Static_Size  : constant Natural :=\n-                       Empty_Shared_Wide_String'Size / Standard'Storage_Unit;\n+        Empty_Shared_Wide_String'Size / Standard'Storage_Unit;\n       --  Total size of all static components\n \n       Element_Size : constant Natural :=\n-                       Wide_Character'Size / Standard'Storage_Unit;\n+        Wide_Character'Size / Standard'Storage_Unit;\n \n    begin\n       return"}, {"sha": "06f9d3691074ed00b36d00e29dadb750b1995fdd", "filename": "gcc/ada/a-stwiun.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-stwiun.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-stwiun.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stwiun.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -802,14 +802,13 @@ package body Ada.Strings.Wide_Unbounded is\n       if Chunk_Size > S_Length - Source.Last then\n          declare\n             New_Size : constant Positive :=\n-                         S_Length + Chunk_Size + (S_Length / Growth_Factor);\n+              S_Length + Chunk_Size + (S_Length / Growth_Factor);\n \n             New_Rounded_Up_Size : constant Positive :=\n-                                    ((New_Size - 1) / Min_Mul_Alloc + 1) *\n-                                       Min_Mul_Alloc;\n+              ((New_Size - 1) / Min_Mul_Alloc + 1) * Min_Mul_Alloc;\n \n             Tmp : constant Wide_String_Access :=\n-                    new Wide_String (1 .. New_Rounded_Up_Size);\n+              new Wide_String (1 .. New_Rounded_Up_Size);\n \n          begin\n             Tmp (1 .. Source.Last) := Source.Reference (1 .. Source.Last);"}, {"sha": "9176d400e034d41c77449b38d6c47367ef1319d2", "filename": "gcc/ada/a-stzfix.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-stzfix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-stzfix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stzfix.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -43,7 +43,7 @@ package body Ada.Strings.Wide_Wide_Fixed is\n       Pattern : Wide_Wide_String;\n       Going   : Direction := Forward;\n       Mapping : Wide_Wide_Maps.Wide_Wide_Character_Mapping :=\n-                  Wide_Wide_Maps.Identity)\n+        Wide_Wide_Maps.Identity)\n       return Natural\n    renames Ada.Strings.Wide_Wide_Search.Index;\n \n@@ -68,7 +68,7 @@ package body Ada.Strings.Wide_Wide_Fixed is\n       From    : Positive;\n       Going   : Direction := Forward;\n       Mapping : Wide_Wide_Maps.Wide_Wide_Character_Mapping :=\n-                  Wide_Wide_Maps.Identity)\n+        Wide_Wide_Maps.Identity)\n       return Natural\n    renames Ada.Strings.Wide_Wide_Search.Index;\n \n@@ -104,7 +104,7 @@ package body Ada.Strings.Wide_Wide_Fixed is\n      (Source  : Wide_Wide_String;\n       Pattern : Wide_Wide_String;\n       Mapping : Wide_Wide_Maps.Wide_Wide_Character_Mapping :=\n-                  Wide_Wide_Maps.Identity)\n+        Wide_Wide_Maps.Identity)\n       return Natural\n    renames Ada.Strings.Wide_Wide_Search.Count;\n \n@@ -413,9 +413,9 @@ package body Ada.Strings.Wide_Wide_Fixed is\n       else\n          declare\n             Result_Length : constant Natural :=\n-                              Natural'Max\n-                                (Source'Length,\n-                                 Position - Source'First + New_Item'Length);\n+              Natural'Max\n+                (Source'Length,\n+                 Position - Source'First + New_Item'Length);\n \n             Result : Wide_Wide_String (1 .. Result_Length);\n \n@@ -457,15 +457,15 @@ package body Ada.Strings.Wide_Wide_Fixed is\n       if High >= Low then\n          declare\n             Front_Len : constant Integer :=\n-                          Integer'Max (0, Low - Source'First);\n+              Integer'Max (0, Low - Source'First);\n             --  Length of prefix of Source copied to result\n \n             Back_Len : constant Integer :=\n-                         Integer'Max (0, Source'Last - High);\n+              Integer'Max (0, Source'Last - High);\n             --  Length of suffix of Source copied to result\n \n             Result_Length : constant Integer :=\n-                              Front_Len + By'Length + Back_Len;\n+              Front_Len + By'Length + Back_Len;\n             --  Length of result\n \n             Result : Wide_Wide_String (1 .. Result_Length);\n@@ -626,7 +626,7 @@ package body Ada.Strings.Wide_Wide_Fixed is\n       else\n          declare\n             Result : constant Wide_Wide_String (1 .. High - Low + 1) :=\n-                       Source (Low .. High);\n+              Source (Low .. High);\n \n          begin\n             return Result;"}, {"sha": "31285fb264e8b12768a2e0d3caf0e0e79e2fad5b", "filename": "gcc/ada/a-stzsea.adb", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-stzsea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-stzsea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stzsea.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -71,8 +71,7 @@ package body Ada.Strings.Wide_Wide_Search is\n      (Source  : Wide_Wide_String;\n       Pattern : Wide_Wide_String;\n       Mapping : Wide_Wide_Maps.Wide_Wide_Character_Mapping :=\n-                  Wide_Wide_Maps.Identity)\n-      return Natural\n+        Wide_Wide_Maps.Identity) return Natural\n    is\n       PL1 : constant Integer := Pattern'Length - 1;\n       Num : Natural;\n@@ -267,8 +266,7 @@ package body Ada.Strings.Wide_Wide_Search is\n       Pattern : Wide_Wide_String;\n       Going   : Direction := Forward;\n       Mapping : Wide_Wide_Maps.Wide_Wide_Character_Mapping :=\n-                  Wide_Wide_Maps.Identity)\n-      return Natural\n+        Wide_Wide_Maps.Identity) return Natural\n    is\n       PL1 : constant Integer := Pattern'Length - 1;\n       Cur : Natural;\n@@ -479,8 +477,7 @@ package body Ada.Strings.Wide_Wide_Search is\n       From    : Positive;\n       Going   : Direction := Forward;\n       Mapping : Wide_Wide_Maps.Wide_Wide_Character_Mapping :=\n-                  Wide_Wide_Maps.Identity)\n-      return Natural\n+        Wide_Wide_Maps.Identity) return Natural\n    is\n    begin\n       if Going = Forward then"}, {"sha": "d197a8fb7b5f11e3693093e573c85e7b5fda3e99", "filename": "gcc/ada/a-stzsup.adb", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-stzsup.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-stzsup.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stzsup.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -698,8 +698,7 @@ package body Ada.Strings.Wide_Wide_Superbounded is\n      (Source  : Super_String;\n       Pattern : Wide_Wide_String;\n       Mapping : Wide_Wide_Maps.Wide_Wide_Character_Mapping :=\n-                  Wide_Wide_Maps.Identity)\n-      return Natural\n+        Wide_Wide_Maps.Identity) return Natural\n    is\n    begin\n       return\n@@ -939,8 +938,7 @@ package body Ada.Strings.Wide_Wide_Superbounded is\n       Pattern : Wide_Wide_String;\n       Going   : Strings.Direction := Strings.Forward;\n       Mapping : Wide_Wide_Maps.Wide_Wide_Character_Mapping :=\n-                  Wide_Wide_Maps.Identity)\n-      return Natural\n+        Wide_Wide_Maps.Identity) return Natural\n    is\n    begin\n       return Wide_Wide_Search.Index\n@@ -976,8 +974,7 @@ package body Ada.Strings.Wide_Wide_Superbounded is\n       From    : Positive;\n       Going   : Direction := Forward;\n       Mapping : Wide_Wide_Maps.Wide_Wide_Character_Mapping :=\n-                  Wide_Wide_Maps.Identity)\n-      return Natural\n+        Wide_Wide_Maps.Identity) return Natural\n    is\n    begin\n       return Wide_Wide_Search.Index"}, {"sha": "37ab295369ea6dd495641b43391f3dc6e4d0989c", "filename": "gcc/ada/a-stzunb-shared.adb", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-stzunb-shared.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-stzunb-shared.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stzunb-shared.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -486,12 +486,11 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n \n    function Aligned_Max_Length (Max_Length : Natural) return Natural is\n       Static_Size  : constant Natural :=\n-                       Empty_Shared_Wide_Wide_String'Size\n-                         / Standard'Storage_Unit;\n+        Empty_Shared_Wide_Wide_String'Size / Standard'Storage_Unit;\n       --  Total size of all static components\n \n       Element_Size : constant Natural :=\n-                       Wide_Wide_Character'Size / Standard'Storage_Unit;\n+        Wide_Wide_Character'Size / Standard'Storage_Unit;\n \n    begin\n       return\n@@ -645,8 +644,7 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n      (Source  : Unbounded_Wide_Wide_String;\n       Pattern : Wide_Wide_String;\n       Mapping : Wide_Wide_Maps.Wide_Wide_Character_Mapping :=\n-                  Wide_Wide_Maps.Identity)\n-      return Natural\n+        Wide_Wide_Maps.Identity) return Natural\n    is\n       SR : constant Shared_Wide_Wide_String_Access := Source.Reference;\n    begin\n@@ -975,8 +973,7 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n       Pattern : Wide_Wide_String;\n       Going   : Strings.Direction := Strings.Forward;\n       Mapping : Wide_Wide_Maps.Wide_Wide_Character_Mapping :=\n-                  Wide_Wide_Maps.Identity)\n-      return Natural\n+        Wide_Wide_Maps.Identity) return Natural\n    is\n       SR : constant Shared_Wide_Wide_String_Access := Source.Reference;\n    begin\n@@ -1014,8 +1011,7 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n       From    : Positive;\n       Going   : Direction := Forward;\n       Mapping : Wide_Wide_Maps.Wide_Wide_Character_Mapping :=\n-                  Wide_Wide_Maps.Identity)\n-      return Natural\n+        Wide_Wide_Maps.Identity) return Natural\n    is\n       SR : constant Shared_Wide_Wide_String_Access := Source.Reference;\n    begin"}, {"sha": "267df9e6912be3319e0513d294273b046db72a18", "filename": "gcc/ada/a-stzunb.adb", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-stzunb.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-stzunb.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stzunb.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -404,8 +404,7 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n      (Source  : Unbounded_Wide_Wide_String;\n       Pattern : Wide_Wide_String;\n       Mapping : Wide_Wide_Maps.Wide_Wide_Character_Mapping :=\n-                  Wide_Wide_Maps.Identity)\n-      return Natural\n+        Wide_Wide_Maps.Identity) return Natural\n    is\n    begin\n       return\n@@ -596,8 +595,7 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n       Pattern : Wide_Wide_String;\n       Going   : Strings.Direction := Strings.Forward;\n       Mapping : Wide_Wide_Maps.Wide_Wide_Character_Mapping :=\n-                  Wide_Wide_Maps.Identity)\n-      return Natural\n+        Wide_Wide_Maps.Identity) return Natural\n    is\n    begin\n       return\n@@ -635,8 +633,7 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n       From    : Positive;\n       Going   : Direction := Forward;\n       Mapping : Wide_Wide_Maps.Wide_Wide_Character_Mapping :=\n-                  Wide_Wide_Maps.Identity)\n-      return Natural\n+        Wide_Wide_Maps.Identity) return Natural\n    is\n    begin\n       return\n@@ -813,14 +810,13 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n       if Chunk_Size > S_Length - Source.Last then\n          declare\n             New_Size : constant Positive :=\n-                         S_Length + Chunk_Size + (S_Length / Growth_Factor);\n+              S_Length + Chunk_Size + (S_Length / Growth_Factor);\n \n             New_Rounded_Up_Size : constant Positive :=\n-                                    ((New_Size - 1) / Min_Mul_Alloc + 1) *\n-                                       Min_Mul_Alloc;\n+              ((New_Size - 1) / Min_Mul_Alloc + 1) * Min_Mul_Alloc;\n \n             Tmp : constant Wide_Wide_String_Access :=\n-                    new Wide_Wide_String (1 .. New_Rounded_Up_Size);\n+              new Wide_Wide_String (1 .. New_Rounded_Up_Size);\n \n          begin\n             Tmp (1 .. Source.Last) := Source.Reference (1 .. Source.Last);"}, {"sha": "d45c37861c4bfabd6a61e424f3f7cf771853ac23", "filename": "gcc/ada/a-tags.adb", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-tags.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-tags.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tags.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -139,13 +139,13 @@ package body Ada.Tags is\n \n    function CW_Membership (Obj_Tag : Tag; Typ_Tag : Tag) return Boolean is\n       Obj_TSD_Ptr : constant Addr_Ptr :=\n-                     To_Addr_Ptr (To_Address (Obj_Tag) - DT_Typeinfo_Ptr_Size);\n+        To_Addr_Ptr (To_Address (Obj_Tag) - DT_Typeinfo_Ptr_Size);\n       Typ_TSD_Ptr : constant Addr_Ptr :=\n-                     To_Addr_Ptr (To_Address (Typ_Tag) - DT_Typeinfo_Ptr_Size);\n+        To_Addr_Ptr (To_Address (Typ_Tag) - DT_Typeinfo_Ptr_Size);\n       Obj_TSD     : constant Type_Specific_Data_Ptr :=\n-                     To_Type_Specific_Data_Ptr (Obj_TSD_Ptr.all);\n+        To_Type_Specific_Data_Ptr (Obj_TSD_Ptr.all);\n       Typ_TSD     : constant Type_Specific_Data_Ptr :=\n-                     To_Type_Specific_Data_Ptr (Typ_TSD_Ptr.all);\n+        To_Type_Specific_Data_Ptr (Typ_TSD_Ptr.all);\n       Pos         : constant Integer := Obj_TSD.Idepth - Typ_TSD.Idepth;\n    begin\n       return Pos >= 0 and then Obj_TSD.Tags_Table (Pos) = Typ_Tag;\n@@ -157,9 +157,9 @@ package body Ada.Tags is\n \n    function Get_External_Tag (T : Tag) return System.Address is\n       TSD_Ptr : constant Addr_Ptr :=\n-                  To_Addr_Ptr (To_Address (T) - DT_Typeinfo_Ptr_Size);\n+        To_Addr_Ptr (To_Address (T) - DT_Typeinfo_Ptr_Size);\n       TSD     : constant Type_Specific_Data_Ptr :=\n-                  To_Type_Specific_Data_Ptr (TSD_Ptr.all);\n+        To_Type_Specific_Data_Ptr (TSD_Ptr.all);\n    begin\n       return To_Address (TSD.External_Tag);\n    end Get_External_Tag;\n@@ -179,7 +179,7 @@ package body Ada.Tags is\n \n    function OSD (T : Tag) return Object_Specific_Data_Ptr is\n       OSD_Ptr : constant Addr_Ptr :=\n-                  To_Addr_Ptr (To_Address (T) - DT_Typeinfo_Ptr_Size);\n+        To_Addr_Ptr (To_Address (T) - DT_Typeinfo_Ptr_Size);\n    begin\n       return To_Object_Specific_Data_Ptr (OSD_Ptr.all);\n    end OSD;\n@@ -190,9 +190,9 @@ package body Ada.Tags is\n \n    function SSD (T : Tag) return Select_Specific_Data_Ptr is\n       TSD_Ptr : constant Addr_Ptr :=\n-                  To_Addr_Ptr (To_Address (T) - DT_Typeinfo_Ptr_Size);\n+        To_Addr_Ptr (To_Address (T) - DT_Typeinfo_Ptr_Size);\n       TSD     : constant Type_Specific_Data_Ptr :=\n-                  To_Type_Specific_Data_Ptr (TSD_Ptr.all);\n+        To_Type_Specific_Data_Ptr (TSD_Ptr.all);\n    begin\n       return TSD.SSD;\n    end SSD;\n@@ -260,9 +260,9 @@ package body Ada.Tags is\n \n       function Get_HT_Link (T : Tag) return Tag is\n          TSD_Ptr : constant Addr_Ptr :=\n-                     To_Addr_Ptr (To_Address (T) - DT_Typeinfo_Ptr_Size);\n+           To_Addr_Ptr (To_Address (T) - DT_Typeinfo_Ptr_Size);\n          TSD     : constant Type_Specific_Data_Ptr :=\n-                     To_Type_Specific_Data_Ptr (TSD_Ptr.all);\n+           To_Type_Specific_Data_Ptr (TSD_Ptr.all);\n       begin\n          return TSD.HT_Link.all;\n       end Get_HT_Link;\n@@ -285,9 +285,9 @@ package body Ada.Tags is\n \n       procedure Set_HT_Link (T : Tag; Next : Tag) is\n          TSD_Ptr : constant Addr_Ptr :=\n-                     To_Addr_Ptr (To_Address (T) - DT_Typeinfo_Ptr_Size);\n+           To_Addr_Ptr (To_Address (T) - DT_Typeinfo_Ptr_Size);\n          TSD     : constant Type_Specific_Data_Ptr :=\n-                     To_Type_Specific_Data_Ptr (TSD_Ptr.all);\n+           To_Type_Specific_Data_Ptr (TSD_Ptr.all);\n       begin\n          TSD.HT_Link.all := Next;\n       end Set_HT_Link;\n@@ -419,7 +419,7 @@ package body Ada.Tags is\n \n    function DT (T : Tag) return Dispatch_Table_Ptr is\n       Offset : constant SSE.Storage_Offset :=\n-                 To_Dispatch_Table_Ptr (T).Prims_Ptr'Position;\n+        To_Dispatch_Table_Ptr (T).Prims_Ptr'Position;\n    begin\n       return To_Dispatch_Table_Ptr (To_Address (T) - Offset);\n    end DT;\n@@ -562,9 +562,9 @@ package body Ada.Tags is\n \n    function Interface_Ancestor_Tags (T : Tag) return Tag_Array is\n       TSD_Ptr     : constant Addr_Ptr :=\n-                      To_Addr_Ptr (To_Address (T) - DT_Typeinfo_Ptr_Size);\n+        To_Addr_Ptr (To_Address (T) - DT_Typeinfo_Ptr_Size);\n       TSD         : constant Type_Specific_Data_Ptr :=\n-                      To_Type_Specific_Data_Ptr (TSD_Ptr.all);\n+        To_Type_Specific_Data_Ptr (TSD_Ptr.all);\n       Iface_Table : constant Interface_Data_Ptr := TSD.Interfaces_Table;\n \n    begin\n@@ -612,7 +612,7 @@ package body Ada.Tags is\n       then\n          declare\n             Addr_First : constant Natural :=\n-                           External'First + Internal_Tag_Header'Length;\n+              External'First + Internal_Tag_Header'Length;\n             Addr_Last  : Natural;\n             Addr       : Integer_Address;\n \n@@ -718,14 +718,13 @@ package body Ada.Tags is\n       Ancestor   : Tag) return Boolean\n    is\n       D_TSD_Ptr : constant Addr_Ptr :=\n-                    To_Addr_Ptr (To_Address (Descendant)\n-                                   - DT_Typeinfo_Ptr_Size);\n+        To_Addr_Ptr (To_Address (Descendant) - DT_Typeinfo_Ptr_Size);\n       A_TSD_Ptr : constant Addr_Ptr :=\n-                    To_Addr_Ptr (To_Address (Ancestor) - DT_Typeinfo_Ptr_Size);\n+        To_Addr_Ptr (To_Address (Ancestor) - DT_Typeinfo_Ptr_Size);\n       D_TSD     : constant Type_Specific_Data_Ptr :=\n-                    To_Type_Specific_Data_Ptr (D_TSD_Ptr.all);\n+        To_Type_Specific_Data_Ptr (D_TSD_Ptr.all);\n       A_TSD     : constant Type_Specific_Data_Ptr :=\n-                    To_Type_Specific_Data_Ptr (A_TSD_Ptr.all);\n+        To_Type_Specific_Data_Ptr (A_TSD_Ptr.all);\n \n    begin\n       return CW_Membership (Descendant, Ancestor)\n@@ -782,9 +781,9 @@ package body Ada.Tags is\n \n    function Needs_Finalization (T : Tag) return Boolean is\n       TSD_Ptr : constant Addr_Ptr :=\n-                  To_Addr_Ptr (To_Address (T) - DT_Typeinfo_Ptr_Size);\n+        To_Addr_Ptr (To_Address (T) - DT_Typeinfo_Ptr_Size);\n       TSD     : constant Type_Specific_Data_Ptr :=\n-                  To_Type_Specific_Data_Ptr (TSD_Ptr.all);\n+        To_Type_Specific_Data_Ptr (TSD_Ptr.all);\n    begin\n       return TSD.Needs_Finalization;\n    end Needs_Finalization;\n@@ -802,17 +801,16 @@ package body Ada.Tags is\n       --  ancestor tags.\n \n       TSD_Ptr : constant Addr_Ptr :=\n-                  To_Addr_Ptr (To_Address (T) - DT_Typeinfo_Ptr_Size);\n+        To_Addr_Ptr (To_Address (T) - DT_Typeinfo_Ptr_Size);\n       TSD     : constant Type_Specific_Data_Ptr :=\n-                  To_Type_Specific_Data_Ptr (TSD_Ptr.all);\n+        To_Type_Specific_Data_Ptr (TSD_Ptr.all);\n       --  Pointer to the TSD\n \n       Parent_Tag     : constant Tag := TSD.Tags_Table (Parent_Slot);\n       Parent_TSD_Ptr : constant Addr_Ptr :=\n-                         To_Addr_Ptr (To_Address (Parent_Tag)\n-                                       - DT_Typeinfo_Ptr_Size);\n+        To_Addr_Ptr (To_Address (Parent_Tag) - DT_Typeinfo_Ptr_Size);\n       Parent_TSD     : constant Type_Specific_Data_Ptr :=\n-                         To_Type_Specific_Data_Ptr (Parent_TSD_Ptr.all);\n+        To_Type_Specific_Data_Ptr (Parent_TSD_Ptr.all);\n \n    begin\n       --  Here we compute the size of the _parent field of the object"}, {"sha": "2bb1435a881073cc153c7394a039724250ea14c8", "filename": "gcc/ada/a-teioed.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-teioed.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-teioed.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-teioed.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -932,7 +932,7 @@ package body Ada.Text_IO.Editing is\n \n    function Pic_String (Pic : Picture) return String is\n       Temp : String (1 .. Pic.Contents.Picture.Length) :=\n-                              Pic.Contents.Picture.Expanded;\n+        Pic.Contents.Picture.Expanded;\n    begin\n       for J in Temp'Range loop\n          if Temp (J) = 'b' then"}, {"sha": "2f2fe27c680eb1e62b5d229aeaaad3805eae7992", "filename": "gcc/ada/a-textio.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-textio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-textio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-textio.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -2118,8 +2118,7 @@ package body Ada.Text_IO is\n       end Has_Translated_Characters;\n \n       Needs_Binary_Write : constant Boolean :=\n-                             text_translation_required\n-                               and then Has_Translated_Characters;\n+        text_translation_required and then Has_Translated_Characters;\n \n    --  Start of processing for Write\n "}, {"sha": "ff4bb2c4e18f44411fa0c4b8af1e260fe21e12a6", "filename": "gcc/ada/a-tifiio.adb", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-tifiio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-tifiio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tifiio.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -290,10 +290,9 @@ package body Ada.Text_IO.Fixed_IO is\n                    and then Num'Small * 10.0**Scale < 10.0);\n \n    Exact : constant Boolean :=\n-            Float'Floor (Num'Small) = Float'Ceiling (Num'Small)\n-              or else Float'Floor (1.0 / Num'Small) =\n-                                Float'Ceiling (1.0 / Num'Small)\n-              or else Num'Small >= 10.0**Max_Digits;\n+     Float'Floor (Num'Small) = Float'Ceiling (Num'Small)\n+       or else Float'Floor (1.0 / Num'Small) = Float'Ceiling (1.0 / Num'Small)\n+       or else Num'Small >= 10.0**Max_Digits;\n    --  True iff a numerator and denominator can be calculated such that\n    --  their ratio exactly represents the small of Num.\n \n@@ -387,11 +386,11 @@ package body Ada.Text_IO.Fixed_IO is\n       Exp  : Field := Default_Exp)\n    is\n       Fore : constant Integer :=\n-               To'Length\n-                 - 1                      -- Decimal point\n-                 - Field'Max (1, Aft)     -- Decimal part\n-                 - Boolean'Pos (Exp /= 0) -- Exponent indicator\n-                 - Exp;                   -- Exponent\n+        To'Length\n+          - 1                      -- Decimal point\n+          - Field'Max (1, Aft)     -- Decimal part\n+          - Boolean'Pos (Exp /= 0) -- Exponent indicator\n+          - Exp;                   -- Exponent\n \n       Last : Natural;\n "}, {"sha": "921c0afc1fa72517ba9426c23d7e1f1f2acc3765", "filename": "gcc/ada/a-wtedit.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-wtedit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-wtedit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wtedit.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1090,7 +1090,7 @@ package body Ada.Wide_Text_IO.Editing is\n \n    function Pic_String (Pic : Picture) return String is\n       Temp : String (1 .. Pic.Contents.Picture.Length) :=\n-                              Pic.Contents.Picture.Expanded;\n+        Pic.Contents.Picture.Expanded;\n    begin\n       for J in Temp'Range loop\n          if Temp (J) = 'b' then"}, {"sha": "d09306bb756e29ad3a4380f673ab6623d421e74a", "filename": "gcc/ada/a-wtenau.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-wtenau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-wtenau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wtenau.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -152,7 +152,7 @@ package body Ada.Wide_Text_IO.Enumeration_Aux is\n       Set   : Type_Set)\n    is\n       Actual_Width : constant Integer :=\n-                       Integer'Max (Integer (Width), Item'Length);\n+        Integer'Max (Integer (Width), Item'Length);\n \n    begin\n       Check_On_One_Line (TFT (File), Actual_Width);"}, {"sha": "6d97f61ff45485028fbbd1f7e4d4779fa00d0c13", "filename": "gcc/ada/a-ztedit.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-ztedit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-ztedit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ztedit.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1091,7 +1091,7 @@ package body Ada.Wide_Wide_Text_IO.Editing is\n \n    function Pic_String (Pic : Picture) return String is\n       Temp : String (1 .. Pic.Contents.Picture.Length) :=\n-                              Pic.Contents.Picture.Expanded;\n+        Pic.Contents.Picture.Expanded;\n    begin\n       for J in Temp'Range loop\n          if Temp (J) = 'b' then"}, {"sha": "8df795e685359d1e8ecb100f7d2ace9011d57990", "filename": "gcc/ada/a-ztenau.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-ztenau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fa-ztenau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ztenau.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -153,7 +153,7 @@ package body Ada.Wide_Wide_Text_IO.Enumeration_Aux is\n       Set   : Type_Set)\n    is\n       Actual_Width : constant Integer :=\n-                       Integer'Max (Integer (Width), Item'Length);\n+        Integer'Max (Integer (Width), Item'Length);\n \n    begin\n       Check_On_One_Line (TFT (File), Actual_Width);"}, {"sha": "aa398ff31c3f2650526c489e12f3f3638e3a4d66", "filename": "gcc/ada/back_end.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fback_end.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fback_end.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -274,7 +274,7 @@ package body Back_End is\n             Argv_Ptr : constant Big_String_Ptr := save_argv (Arg);\n             Argv_Len : constant Nat            := Len_Arg (Arg);\n             Argv     : constant String         :=\n-                         Argv_Ptr (1 .. Natural (Argv_Len));\n+              Argv_Ptr (1 .. Natural (Argv_Len));\n          begin\n             Args (Positive (Arg)) := new String'(Argv);\n          end;"}, {"sha": "2efe6da9d6e76092f3bc3222fa99186f7ef17559", "filename": "gcc/ada/bcheck.adb", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fbcheck.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fbcheck.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbcheck.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -280,7 +280,7 @@ package body Bcheck is\n \n                Check_Policy : declare\n                   Policy : constant Character :=\n-                             ALIs.Table (A1).Task_Dispatching_Policy;\n+                    ALIs.Table (A1).Task_Dispatching_Policy;\n \n                begin\n                   for A2 in A1 + 1 .. ALIs.Last loop\n@@ -337,10 +337,10 @@ package body Bcheck is\n             end record;\n \n             PSD_Table  : array (0 .. Max_Prio) of Specific_Dispatching_Entry :=\n-                           (others => Specific_Dispatching_Entry'\n-                              (Dispatching_Policy => ' ',\n-                               Afile              => No_ALI_Id,\n-                               Loc                => 0));\n+              (others => Specific_Dispatching_Entry'\n+                 (Dispatching_Policy => ' ',\n+                  Afile              => No_ALI_Id,\n+                  Loc                => 0));\n             --  Array containing an entry per priority containing the location\n             --  where there is a Priority_Specific_Dispatching pragma that\n             --  applies to the priority.\n@@ -943,9 +943,7 @@ package body Bcheck is\n \n       for ND in No_Deps.First .. No_Deps.Last loop\n          declare\n-            ND_Unit : constant Name_Id :=\n-                        No_Deps.Table (ND).No_Dep_Unit;\n-\n+            ND_Unit : constant Name_Id := No_Deps.Table (ND).No_Dep_Unit;\n          begin\n             for J in ALIs.First .. ALIs.Last loop\n                declare\n@@ -1019,7 +1017,7 @@ package body Bcheck is\n                      if AFN /= No_File then\n                         declare\n                            WAI : constant ALI_Id :=\n-                                   ALI_Id (Get_Name_Table_Info (AFN));\n+                             ALI_Id (Get_Name_Table_Info (AFN));\n                            WTE : ALIs_Record renames ALIs.Table (WAI);\n \n                         begin"}, {"sha": "ed51554b6fd94398792910b84ae7012f12d07599", "filename": "gcc/ada/binde.adb", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fbinde.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fbinde.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbinde.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -427,8 +427,8 @@ package body Binde is\n       elsif Is_Waiting_Body (U1) and then Is_Waiting_Body (U2) then\n          declare\n             Result : constant Boolean :=\n-                       UNR.Table (Corresponding_Spec (U1)).Elab_Position >\n-                       UNR.Table (Corresponding_Spec (U2)).Elab_Position;\n+              UNR.Table (Corresponding_Spec (U1)).Elab_Position >\n+              UNR.Table (Corresponding_Spec (U2)).Elab_Position;\n          begin\n             if Debug_Flag_B then\n                if Result then\n@@ -483,8 +483,8 @@ package body Binde is\n          then\n             declare\n                Result : constant Boolean :=\n-                          UNR.Table (Corresponding_Body (U1)).Num_Pred <\n-                          UNR.Table (Corresponding_Body (U2)).Num_Pred;\n+                 UNR.Table (Corresponding_Body (U1)).Num_Pred <\n+                 UNR.Table (Corresponding_Body (U2)).Num_Pred;\n             begin\n                if Debug_Flag_B then\n                   if Result then\n@@ -902,8 +902,7 @@ package body Binde is\n          then\n             declare\n                Info : constant Int :=\n-                        Get_Name_Table_Info\n-                          (Withs.Table (W).Uname);\n+                 Get_Name_Table_Info (Withs.Table (W).Uname);\n \n             begin\n                --  If the unit is unknown, for some unknown reason, fail\n@@ -913,11 +912,10 @@ package body Binde is\n                if Info = 0 or else Unit_Id (Info) = No_Unit_Id then\n                   declare\n                      Withed       : String :=\n-                                      Get_Name_String (Withs.Table (W).Uname);\n+                       Get_Name_String (Withs.Table (W).Uname);\n                      Last_Withed  : Natural := Withed'Last;\n                      Withing      : String :=\n-                                      Get_Name_String\n-                                        (Units.Table (Before).Uname);\n+                       Get_Name_String (Units.Table (Before).Uname);\n                      Last_Withing : Natural := Withing'Last;\n                      Spec_Body    : String  := \" (Spec)\";\n \n@@ -1520,8 +1518,8 @@ package body Binde is\n       elsif Is_Waiting_Body (U1) and then Is_Waiting_Body (U2) then\n          declare\n             Result : constant Boolean :=\n-                       UNR.Table (Corresponding_Spec (U1)).Elab_Position <\n-                       UNR.Table (Corresponding_Spec (U2)).Elab_Position;\n+              UNR.Table (Corresponding_Spec (U1)).Elab_Position <\n+              UNR.Table (Corresponding_Spec (U2)).Elab_Position;\n          begin\n             if Debug_Flag_B then\n                if Result then\n@@ -1580,8 +1578,8 @@ package body Binde is\n          then\n             declare\n                Result : constant Boolean :=\n-                          UNR.Table (Corresponding_Body (U1)).Num_Pred >=\n-                          UNR.Table (Corresponding_Body (U2)).Num_Pred;\n+                 UNR.Table (Corresponding_Body (U1)).Num_Pred >=\n+                 UNR.Table (Corresponding_Body (U2)).Num_Pred;\n             begin\n                if Debug_Flag_B then\n                   if Result then"}, {"sha": "094b25da42e6571d8cf5093126c3ecc4e4e304d6", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -2135,8 +2135,7 @@ package body Bindgen is\n       --  function Get_Ada_Main_Name for details on the form of the name.\n \n       Needs_Library_Finalization : constant Boolean :=\n-                                     not Configurable_Run_Time_On_Target\n-                                       and then Has_Finalizer;\n+        not Configurable_Run_Time_On_Target and then Has_Finalizer;\n       --  For restricted run-time libraries (ZFP and Ravenscar) tasks are\n       --  non-terminating, so we do not want finalization.\n \n@@ -2658,7 +2657,7 @@ package body Bindgen is\n    function Get_Ada_Main_Name return String is\n       Suffix : constant String := \"_00\";\n       Name   : String (1 .. Opt.Ada_Main_Name.all'Length + Suffix'Length) :=\n-                 Opt.Ada_Main_Name.all & Suffix;\n+        Opt.Ada_Main_Name.all & Suffix;\n       Nlen   : Natural;\n \n    begin\n@@ -2945,9 +2944,9 @@ package body Bindgen is\n          loop\n             declare\n                Inum : constant Int :=\n-                        Interrupt_States.Table (K).Interrupt_Id;\n+                 Interrupt_States.Table (K).Interrupt_Id;\n                Stat : constant Character :=\n-                        Interrupt_States.Table (K).Interrupt_State;\n+                 Interrupt_States.Table (K).Interrupt_State;\n \n             begin\n                while IS_Pragma_Settings.Last < Inum loop"}, {"sha": "703d24395309350e291cf14f5a9d3e49a512da4f", "filename": "gcc/ada/butil.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fbutil.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fbutil.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbutil.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -119,7 +119,7 @@ package body Butil is\n \n       declare\n          U1_Name : constant String (1 .. Name_Len) :=\n-                                           Name_Buffer (1 .. Name_Len);\n+           Name_Buffer (1 .. Name_Len);\n          Min_Length : Natural;\n \n       begin"}, {"sha": "3f073b357b0a915fe59758cff6a764d529b5d115", "filename": "gcc/ada/ceinfo.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fceinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fceinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fceinfo.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1998-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -61,11 +61,11 @@ procedure CEinfo is\n    Fnam : constant Pattern := (UC & Break (' ')) * Fieldnm;\n \n    Field_Def : constant Pattern :=\n-                 \"--    \" & Fnam & \" (\" & Break (')') * Accessfunc;\n+     \"--    \" & Fnam & \" (\" & Break (')') * Accessfunc;\n \n    Field_Ref : constant Pattern :=\n-                 \"   --    \" & Fnam & Break ('(') & Len (1) &\n-                   Break (')') * Accessfunc;\n+     \"   --    \" & Fnam & Break ('(') & Len (1) &\n+     Break (')') * Accessfunc;\n \n    Field_Com : constant Pattern := \"   --    \" & Fnam & Span (' ') &\n                                      (Break (' ') or Rest) * Accessfunc;"}, {"sha": "697599db7dcaf867d5c5b78211a48151fea0594f", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 22, "deletions": 27, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -397,9 +397,8 @@ package body Checks is\n       Internal_Static_Sloc : constant Source_Ptr := Static_Sloc;\n \n       Checks_On : constant Boolean :=\n-                    (not Index_Checks_Suppressed (Suppress_Typ))\n-                       or else\n-                    (not Range_Checks_Suppressed (Suppress_Typ));\n+        (not Index_Checks_Suppressed (Suppress_Typ))\n+         or else (not Range_Checks_Suppressed (Suppress_Typ));\n \n    begin\n       --  For now we just return if Checks_On is false, however this should\n@@ -792,7 +791,7 @@ package body Checks is\n       then\n          declare\n             Target_Type : constant Entity_Id :=\n-                            Base_Type (Entity (Subtype_Mark (Parent (N))));\n+              Base_Type (Entity (Subtype_Mark (Parent (N))));\n \n             Llo, Lhi : Uint;\n             Rlo, Rhi : Uint;\n@@ -1279,7 +1278,7 @@ package body Checks is\n       then\n          declare\n             Alloc_Typ : constant Entity_Id :=\n-                          Entity (Expression (Original_Node (N)));\n+              Entity (Expression (Original_Node (N)));\n \n          begin\n             if Alloc_Typ = T_Typ\n@@ -1341,8 +1340,7 @@ package body Checks is\n                then\n                   declare\n                      Type_Def : constant Node_Id :=\n-                                 Type_Definition\n-                                   (Original_Node (Parent (T_Typ)));\n+                       Type_Definition (Original_Node (Parent (T_Typ)));\n                   begin\n                      if Nkind (Type_Def) = N_Derived_Type_Definition\n                        and then Is_Entity_Name (Subtype_Indication (Type_Def))\n@@ -1576,17 +1574,17 @@ package body Checks is\n       Loc         : constant Source_Ptr := Sloc (Ck_Node);\n       Expr_Type   : constant Entity_Id  := Base_Type (Etype (Ck_Node));\n       Target_Base : constant Entity_Id  :=\n-                      Implementation_Base_Type (Target_Typ);\n+        Implementation_Base_Type (Target_Typ);\n \n       Par : constant Node_Id := Parent (Ck_Node);\n       pragma Assert (Nkind (Par) = N_Type_Conversion);\n       --  Parent of check node, must be a type conversion\n \n       Truncate  : constant Boolean := Float_Truncate (Par);\n       Max_Bound : constant Uint :=\n-                    UI_Expon\n-                      (Machine_Radix_Value (Expr_Type),\n-                       Machine_Mantissa_Value (Expr_Type) - 1) - 1;\n+        UI_Expon\n+          (Machine_Radix_Value (Expr_Type),\n+           Machine_Mantissa_Value (Expr_Type) - 1) - 1;\n \n       --  Largest bound, so bound plus or minus half is a machine number of F\n \n@@ -2394,9 +2392,8 @@ package body Checks is\n \n       Loc         : constant Source_Ptr := Sloc (Ck_Node);\n       Checks_On   : constant Boolean :=\n-                      (not Index_Checks_Suppressed (Target_Typ))\n-                        or else\n-                      (not Length_Checks_Suppressed (Target_Typ));\n+        (not Index_Checks_Suppressed (Target_Typ))\n+         or else (not Length_Checks_Suppressed (Target_Typ));\n \n    begin\n       if not Full_Expander_Active then\n@@ -2502,9 +2499,8 @@ package body Checks is\n \n       Loc       : constant Source_Ptr := Sloc (Ck_Node);\n       Checks_On : constant Boolean :=\n-                    (not Index_Checks_Suppressed (Target_Typ))\n-                      or else\n-                    (not Range_Checks_Suppressed (Target_Typ));\n+        (not Index_Checks_Suppressed (Target_Typ))\n+         or else (not Range_Checks_Suppressed (Target_Typ));\n \n    begin\n       if not Full_Expander_Active or else not Checks_On then\n@@ -2657,8 +2653,8 @@ package body Checks is\n             --  fixed point values must be read as integral values.\n \n             Float_To_Int : constant Boolean :=\n-                             Is_Floating_Point_Type (Expr_Type)\n-                               and then Is_Integer_Type (Target_Type);\n+              Is_Floating_Point_Type (Expr_Type)\n+              and then Is_Integer_Type (Target_Type);\n \n          begin\n             if not Overflow_Checks_Suppressed (Target_Base)\n@@ -2714,7 +2710,7 @@ package body Checks is\n \n             New_Constraints : constant Elist_Id := New_Elmt_List;\n             Old_Constraints : constant Elist_Id :=\n-                                Discriminant_Constraint (Expr_Type);\n+              Discriminant_Constraint (Expr_Type);\n \n          begin\n             Constraint := First_Elmt (Stored_Constraint (Target_Type));\n@@ -4799,11 +4795,11 @@ package body Checks is\n       Sel  : constant Node_Id    := Selector_Name (N);\n \n       Orig_Comp : constant Entity_Id :=\n-                    Original_Record_Component (Entity (Sel));\n+        Original_Record_Component (Entity (Sel));\n       --  The original component to be checked\n \n       Discr_Fct : constant Entity_Id :=\n-                    Discriminant_Checking_Func (Orig_Comp);\n+        Discriminant_Checking_Func (Orig_Comp);\n       --  The discriminant checking function\n \n       Discr : Entity_Id;\n@@ -5596,9 +5592,8 @@ package body Checks is\n \n       Check_Node : Node_Id;\n       Checks_On  : constant Boolean :=\n-                     (not Index_Checks_Suppressed (Suppress_Typ))\n-                       or else\n-                     (not Range_Checks_Suppressed (Suppress_Typ));\n+        (not Index_Checks_Suppressed (Suppress_Typ))\n+         or else (not Range_Checks_Suppressed (Suppress_Typ));\n \n    begin\n       --  For now we just return if Checks_On is false, however this should be\n@@ -7361,8 +7356,8 @@ package body Checks is\n \n                Out_Of_Range  : Boolean;\n                Static_Bounds : constant Boolean :=\n-                                 Compile_Time_Known_Value (LB)\n-                                   and Compile_Time_Known_Value (UB);\n+                 Compile_Time_Known_Value (LB)\n+                 and Compile_Time_Known_Value (UB);\n \n             begin\n                --  Following range tests should use Sem_Eval routine ???"}, {"sha": "f952e18ab74bedb5d4d041af217db60a1ad8cc03", "filename": "gcc/ada/clean.adb", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fclean.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fclean.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fclean.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2003-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2003-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -73,7 +73,7 @@ package body Clean is\n    --  Changed to \"b__\" for VMS in the body of the package.\n \n    Project_Tree : constant Project_Tree_Ref :=\n-                    new Project_Tree_Data (Is_Root_Tree => True);\n+     new Project_Tree_Data (Is_Root_Tree => True);\n    --  The project tree\n \n    Object_Directory_Path : String_Access := null;\n@@ -319,7 +319,7 @@ package body Clean is\n       --  The name of the archive dependency file for this project\n \n       Obj_Dir : constant String :=\n-                  Get_Name_String (Project.Object_Directory.Display_Name);\n+        Get_Name_String (Project.Object_Directory.Display_Name);\n \n    begin\n       Change_Dir (Obj_Dir);\n@@ -463,7 +463,7 @@ package body Clean is\n \n                declare\n                   Obj_Dir : constant String :=\n-                              Dir_Name (Get_Name_String (Full_Lib_File));\n+                    Dir_Name (Get_Name_String (Full_Lib_File));\n                   Obj     : constant String := Object_File_Name (Lib_File);\n                   Adt     : constant String := Tree_File_Name   (Lib_File);\n                   Asm     : constant String := Assembly_File_Name (Lib_File);\n@@ -489,9 +489,9 @@ package body Clean is\n                   for J in 1 .. Sources.Last loop\n                      declare\n                         Deb : constant String :=\n-                                Debug_File_Name (Sources.Table (J));\n+                          Debug_File_Name (Sources.Table (J));\n                         Rep : constant String :=\n-                                Repinfo_File_Name (Sources.Table (J));\n+                          Repinfo_File_Name (Sources.Table (J));\n \n                      begin\n                         if Is_Regular_File (Obj_Dir & Dir_Separator & Deb) then\n@@ -513,9 +513,9 @@ package body Clean is\n          if not Compile_Only then\n             declare\n                Source     : constant File_Name_Type :=\n-                              Strip_Suffix (Main_Lib_File);\n+                 Strip_Suffix (Main_Lib_File);\n                Executable : constant String :=\n-                              Get_Name_String (Executable_Name (Source));\n+                 Get_Name_String (Executable_Name (Source));\n             begin\n                if Is_Regular_File (Executable) then\n                   Delete (\"\", Executable);\n@@ -548,7 +548,7 @@ package body Clean is\n       then\n          declare\n             Directory : constant String :=\n-                        Get_Name_String (Project.Library_Src_Dir.Display_Name);\n+              Get_Name_String (Project.Library_Src_Dir.Display_Name);\n \n          begin\n             Change_Dir (Directory);\n@@ -631,9 +631,9 @@ package body Clean is\n \n       Lib_Filename : constant String := Get_Name_String (Project.Library_Name);\n       DLL_Name     : String :=\n-                       DLL_Prefix & Lib_Filename & \".\" & DLL_Ext;\n+        DLL_Prefix & Lib_Filename & \".\" & DLL_Ext;\n       Archive_Name : String :=\n-                       \"lib\" & Lib_Filename & \".\" & Archive_Ext;\n+        \"lib\" & Lib_Filename & \".\" & Archive_Ext;\n       Direc        : Dir_Type;\n \n       Name : String (1 .. 200);\n@@ -656,11 +656,9 @@ package body Clean is\n \n          declare\n             Lib_Directory     : constant String :=\n-                                  Get_Name_String\n-                                    (Project.Library_Dir.Display_Name);\n+              Get_Name_String (Project.Library_Dir.Display_Name);\n             Lib_ALI_Directory : constant String :=\n-                                  Get_Name_String\n-                                    (Project.Library_ALI_Dir.Display_Name);\n+              Get_Name_String (Project.Library_ALI_Dir.Display_Name);\n \n          begin\n             Canonical_Case_File_Name (Archive_Name);\n@@ -863,8 +861,7 @@ package body Clean is\n          if Project.Object_Directory /= No_Path_Information then\n             declare\n                Obj_Dir : constant String :=\n-                           Get_Name_String\n-                             (Project.Object_Directory.Display_Name);\n+                 Get_Name_String (Project.Object_Directory.Display_Name);\n \n             begin\n                Change_Dir (Obj_Dir);\n@@ -933,17 +930,17 @@ package body Clean is\n \n                         declare\n                            Asm : constant String :=\n-                                   Assembly_File_Name (Lib_File);\n+                             Assembly_File_Name (Lib_File);\n                            ALI : constant String :=\n-                                   ALI_File_Name      (Lib_File);\n+                             ALI_File_Name      (Lib_File);\n                            Obj : constant String :=\n-                                   Object_File_Name   (Lib_File);\n+                             Object_File_Name   (Lib_File);\n                            Adt : constant String :=\n-                                   Tree_File_Name     (Lib_File);\n+                             Tree_File_Name     (Lib_File);\n                            Deb : constant String :=\n-                                   Debug_File_Name    (File_Name1);\n+                             Debug_File_Name    (File_Name1);\n                            Rep : constant String :=\n-                                   Repinfo_File_Name  (File_Name1);\n+                             Repinfo_File_Name  (File_Name1);\n                            Del : Boolean := True;\n \n                         begin\n@@ -1010,9 +1007,9 @@ package body Clean is\n                               if File_Name2 /= No_File then\n                                  declare\n                                     Deb : constant String :=\n-                                            Debug_File_Name (File_Name2);\n+                                      Debug_File_Name (File_Name2);\n                                     Rep : constant String :=\n-                                            Repinfo_File_Name (File_Name2);\n+                                      Repinfo_File_Name (File_Name2);\n \n                                  begin\n                                     if Is_Regular_File (Deb) then\n@@ -1155,7 +1152,7 @@ package body Clean is\n       then\n          declare\n             Exec_Dir : constant String :=\n-                         Get_Name_String (Project.Exec_Directory.Display_Name);\n+              Get_Name_String (Project.Exec_Directory.Display_Name);\n \n          begin\n             Change_Dir (Exec_Dir);\n@@ -1173,7 +1170,7 @@ package body Clean is\n \n                   declare\n                      Exec_File_Name : constant String :=\n-                                        Get_Name_String (Executable);\n+                       Get_Name_String (Executable);\n \n                   begin\n                      if Is_Absolute_Path (Name => Exec_File_Name) then"}, {"sha": "82f8697bcb359ebebbd5e2af4e98f4612c78874a", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -505,13 +505,12 @@ package body CStand is\n \n       procedure Pack_String_Type (String_Type : Entity_Id) is\n          Prag : constant Node_Id :=\n-                  Make_Pragma (Stloc,\n-                    Chars                        => Name_Pack,\n-                    Pragma_Argument_Associations =>\n-                      New_List (\n-                        Make_Pragma_Argument_Association (Stloc,\n-                          Expression =>\n-                            New_Occurrence_Of (String_Type, Stloc))));\n+           Make_Pragma (Stloc,\n+             Chars                        => Name_Pack,\n+             Pragma_Argument_Associations =>\n+               New_List (\n+                 Make_Pragma_Argument_Association (Stloc,\n+                   Expression => New_Occurrence_Of (String_Type, Stloc))));\n       begin\n          Append (Prag, Decl_S);\n          Record_Rep_Item (String_Type, Prag);"}, {"sha": "e7c9146d6f00b30dc0de2ac6eb3a41676d06cc34", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6214,25 +6214,25 @@ package body Einfo is\n    --  Global flag table allowing rapid computation of this function\n \n    Entity_Is_Base_Type : constant array (Entity_Kind) of Boolean :=\n-                           (E_Enumeration_Subtype          |\n-                            E_Incomplete_Type              |\n-                            E_Signed_Integer_Subtype       |\n-                            E_Modular_Integer_Subtype      |\n-                            E_Floating_Point_Subtype       |\n-                            E_Ordinary_Fixed_Point_Subtype |\n-                            E_Decimal_Fixed_Point_Subtype  |\n-                            E_Array_Subtype                |\n-                            E_String_Subtype               |\n-                            E_Record_Subtype               |\n-                            E_Private_Subtype              |\n-                            E_Record_Subtype_With_Private  |\n-                            E_Limited_Private_Subtype      |\n-                            E_Access_Subtype               |\n-                            E_Protected_Subtype            |\n-                            E_Task_Subtype                 |\n-                            E_String_Literal_Subtype       |\n-                            E_Class_Wide_Subtype           => False,\n-                            others                         => True);\n+     (E_Enumeration_Subtype          |\n+      E_Incomplete_Type              |\n+      E_Signed_Integer_Subtype       |\n+      E_Modular_Integer_Subtype      |\n+      E_Floating_Point_Subtype       |\n+      E_Ordinary_Fixed_Point_Subtype |\n+      E_Decimal_Fixed_Point_Subtype  |\n+      E_Array_Subtype                |\n+      E_String_Subtype               |\n+      E_Record_Subtype               |\n+      E_Private_Subtype              |\n+      E_Record_Subtype_With_Private  |\n+      E_Limited_Private_Subtype      |\n+      E_Access_Subtype               |\n+      E_Protected_Subtype            |\n+      E_Task_Subtype                 |\n+      E_String_Literal_Subtype       |\n+      E_Class_Wide_Subtype           => False,\n+      others                         => True);\n \n    function Is_Base_Type (Id : E) return Boolean is\n    begin"}, {"sha": "6f450200ef952e19e9b844e6f8230f45ce1e88df", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -2445,7 +2445,7 @@ package body Errout is\n          if Sloc (Error_Msg_Node_1) > Standard_Location then\n             declare\n                Iloc : constant Source_Ptr :=\n-                        Instantiation_Location (Sloc (Error_Msg_Node_1));\n+                 Instantiation_Location (Sloc (Error_Msg_Node_1));\n \n             begin\n                if Iloc /= No_Location\n@@ -2938,7 +2938,7 @@ package body Errout is\n                   if Is_Itype (Ent) then\n                      declare\n                         Assoc : constant Node_Id :=\n-                                  Associated_Node_For_Itype (Ent);\n+                          Associated_Node_For_Itype (Ent);\n \n                      begin\n                         if Nkind (Assoc) in N_Subprogram_Specification then"}, {"sha": "8ebeb117614b4fa08f2d4e99524a498f362fd95c", "filename": "gcc/ada/eval_fat.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Feval_fat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Feval_fat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feval_fat.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -41,7 +41,7 @@ package body Eval_Fat is\n    type Radix_Power_Table is array (Int range 1 .. 4) of Int;\n \n    Radix_Powers : constant Radix_Power_Table :=\n-                    (Radix ** 1, Radix ** 2, Radix ** 3, Radix ** 4);\n+     (Radix ** 1, Radix ** 2, Radix ** 3, Radix ** 4);\n \n    -----------------------\n    -- Local Subprograms --\n@@ -188,7 +188,7 @@ package body Eval_Fat is\n       --  True iff Fraction is even\n \n       Most_Significant_Digit : constant UI :=\n-                                 Radix ** (Machine_Mantissa_Value (RT) - 1);\n+        Radix ** (Machine_Mantissa_Value (RT) - 1);\n \n       Uintp_Mark : Uintp.Save_Mark;\n       --  The code is divided into blocks that systematically release"}, {"sha": "7141a30cd532316758b5ed2e8c8c7312fa84a4dc", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 33, "deletions": 43, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f0f591b8799b6987321777a82c26a9bbb8af78/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=15f0f591b8799b6987321777a82c26a9bbb8af78", "patch": "@@ -321,17 +321,13 @@ package body Exp_Aggr is\n       --  components.\n \n       Max_Aggr_Size : constant Nat :=\n-                        5000 + (2 ** 24 - 5000) *\n-                          Boolean'Pos\n-                            (Restriction_Active (No_Elaboration_Code)\n-                               or else\n-                             Restriction_Active (No_Implicit_Loops)\n-                               or else\n-                             Is_Two_Dim_Packed_Array (Typ)\n-                               or else\n-                             ((Ekind (Current_Scope) = E_Package\n-                               and then\n-                                 Static_Elaboration_Desired (Current_Scope))));\n+        5000 + (2 ** 24 - 5000) *\n+          Boolean'Pos\n+            (Restriction_Active (No_Elaboration_Code)\n+             or else Restriction_Active (No_Implicit_Loops)\n+             or else Is_Two_Dim_Packed_Array (Typ)\n+             or else ((Ekind (Current_Scope) = E_Package\n+                       and then Static_Elaboration_Desired (Current_Scope))));\n \n       function Component_Count (T : Entity_Id) return Int;\n       --  The limit is applied to the total number of components that the\n@@ -363,9 +359,9 @@ package body Exp_Aggr is\n          elsif Is_Array_Type (T) then\n             declare\n                Lo : constant Node_Id :=\n-                      Type_Low_Bound (Etype (First_Index (T)));\n+                 Type_Low_Bound (Etype (First_Index (T)));\n                Hi : constant Node_Id :=\n-                      Type_High_Bound (Etype (First_Index (T)));\n+                 Type_High_Bound (Etype (First_Index (T)));\n \n                Siz : constant Int := Component_Count (Component_Type (T));\n \n@@ -423,9 +419,8 @@ package body Exp_Aggr is\n          then\n             declare\n                Index_Type : constant Entity_Id :=\n-                              Etype\n-                                (First_Index\n-                                   (Etype (Defining_Identifier (Parent (N)))));\n+                 Etype\n+                   (First_Index (Etype (Defining_Identifier (Parent (N)))));\n                Indx       : Node_Id;\n \n             begin\n@@ -2526,8 +2521,7 @@ package body Exp_Aggr is\n         and then CPP_Num_Prims (Typ) > 0\n       then\n          Invoke_Constructor : declare\n-            CPP_Parent : constant Entity_Id :=\n-                           Enclosing_CPP_Parent (Typ);\n+            CPP_Parent : constant Entity_Id := Enclosing_CPP_Parent (Typ);\n \n             procedure Invoke_IC_Proc (T : Entity_Id);\n             --  Recursive routine used to climb to parents. Required because\n@@ -2720,30 +2714,28 @@ package body Exp_Aggr is\n                      SubE : constant Entity_Id := Make_Temporary (Loc, 'T');\n \n                      SubD : constant Node_Id :=\n-                              Make_Subtype_Declaration (Loc,\n-                                Defining_Identifier => SubE,\n-                                Subtype_Indication  =>\n-                                  Make_Subtype_Indication (Loc,\n-                                    Subtype_Mark =>\n-                                      New_Reference_To\n-                                        (Etype (Comp_Type), Loc),\n-                                    Constraint =>\n-                                      Make_Index_Or_Discriminant_Constraint\n-                                        (Loc,\n-                                         Constraints => New_List (\n-                                          New_Copy_Tree\n-                                            (Aggregate_Bounds (Expr_Q))))));\n+                       Make_Subtype_Declaration (Loc,\n+                         Defining_Identifier => SubE,\n+                         Subtype_Indication  =>\n+                           Make_Subtype_Indication (Loc,\n+                             Subtype_Mark =>\n+                               New_Reference_To (Etype (Comp_Type), Loc),\n+                             Constraint =>\n+                               Make_Index_Or_Discriminant_Constraint\n+                                 (Loc,\n+                                  Constraints => New_List (\n+                                    New_Copy_Tree\n+                                      (Aggregate_Bounds (Expr_Q))))));\n \n                      --  Create a temporary array of the above subtype which\n                      --  will be used to capture the aggregate assignments.\n \n                      TmpE : constant Entity_Id := Make_Temporary (Loc, 'A', N);\n \n                      TmpD : constant Node_Id :=\n-                              Make_Object_Declaration (Loc,\n-                                Defining_Identifier => TmpE,\n-                                Object_Definition   =>\n-                                  New_Reference_To (SubE, Loc));\n+                       Make_Object_Declaration (Loc,\n+                         Defining_Identifier => TmpE,\n+                         Object_Definition   => New_Reference_To (SubE, Loc));\n \n                   begin\n                      Set_No_Initialization (TmpD);\n@@ -2964,9 +2956,8 @@ package body Exp_Aggr is\n       Temp : constant Entity_Id  := Defining_Identifier (Decl);\n \n       Occ  : constant Node_Id :=\n-               Unchecked_Convert_To (Typ,\n-                 Make_Explicit_Dereference (Loc,\n-                   New_Reference_To (Temp, Loc)));\n+        Unchecked_Convert_To (Typ,\n+          Make_Explicit_Dereference (Loc, New_Reference_To (Temp, Loc)));\n \n    begin\n       if Is_Array_Type (Typ) then\n@@ -3549,7 +3540,7 @@ package body Exp_Aggr is\n \n                            declare\n                               P : constant Entity_Id :=\n-                                    Cunit_Entity (Current_Sem_Unit);\n+                                Cunit_Entity (Current_Sem_Unit);\n \n                            begin\n                               --  Check if duplication OK and if so continue\n@@ -3848,7 +3839,7 @@ package body Exp_Aggr is\n       --  possible, provided other conditions are met on the LHS.\n \n       Others_Present : array (1 .. Aggr_Dimension) of Boolean :=\n-                         (others => False);\n+        (others => False);\n       --  If Others_Present (J) is True, then there is an others choice\n       --  in one of the sub-aggregates of N at dimension J.\n \n@@ -5793,11 +5784,10 @@ package body Exp_Aggr is\n             elsif Tagged_Type_Expansion then\n                declare\n                   Tag_Name  : constant Node_Id :=\n-                                New_Occurrence_Of\n-                                  (First_Tag_Component (Typ), Loc);\n+                    New_Occurrence_Of (First_Tag_Component (Typ), Loc);\n                   Typ_Tag   : constant Entity_Id := RTE (RE_Tag);\n                   Conv_Node : constant Node_Id :=\n-                                Unchecked_Convert_To (Typ_Tag, Tag_Value);\n+                    Unchecked_Convert_To (Typ_Tag, Tag_Value);\n \n                begin\n                   Set_Etype (Conv_Node, Typ_Tag);"}]}