{"sha": "7d0720375952abd2c48d95f4cf752eff7d732e48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QwNzIwMzc1OTUyYWJkMmM0OGQ5NWY0Y2Y3NTJlZmY3ZDczMmU0OA==", "commit": {"author": {"name": "Stuart Hastings", "email": "stuart@apple.com", "date": "2006-01-10T23:56:12Z"}, "committer": {"name": "Stuart Hastings", "email": "stuart@gcc.gnu.org", "date": "2006-01-10T23:56:12Z"}, "message": "i386.md (set_got): Update.\n\n\t* gcc/config/i386/i386.md (set_got): Update.\n\t(set_got_labelled): New.  (UNSPEC_LD_MPIC): New.\n\t(builtin_setjmp_receiver): Mach-O support.\n\t* gcc/config/i386/darwin.h (TARGET_ASM_FILE_END) Define.\n\t(GOT_SYMBOL_NAME): Define.\n\t(FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN): New.\n\t(TARGET_DEEP_BRANCH_PREDICTION): Remove.\n\t* gcc/config/i386/i386.c (override_options): Revise for Darwin.\n\t(USE_HIDDEN_LINKONCE): Enable for Mach-O.  (ix86_file_end): Mach-O\n\tsupport.  (darwin_x86_file_end): New.  (output_set_got): Add label\n\tparameter, revise for Mach-O.  (x86_output_mi_thunk): Likewise.\n\t* gcc/config/i386/i386-protos.h (output_set_got): Likewise.\n\t* gcc/config/darwin.c (machopic_legitimize_pic_address): Update\n\tregs_ever_live[].\n\nFrom-SVN: r109556", "tree": {"sha": "31ba267cdfe3754d23ff1fd1f764d15586797215", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31ba267cdfe3754d23ff1fd1f764d15586797215"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d0720375952abd2c48d95f4cf752eff7d732e48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d0720375952abd2c48d95f4cf752eff7d732e48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d0720375952abd2c48d95f4cf752eff7d732e48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d0720375952abd2c48d95f4cf752eff7d732e48/comments", "author": null, "committer": null, "parents": [{"sha": "a45fefd6839744b6f77f7ae3b3101983b3af57e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a45fefd6839744b6f77f7ae3b3101983b3af57e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a45fefd6839744b6f77f7ae3b3101983b3af57e6"}], "stats": {"total": 120, "additions": 101, "deletions": 19}, "files": [{"sha": "b74c09f64b7e025b46a0006597721868b432c593", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d0720375952abd2c48d95f4cf752eff7d732e48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d0720375952abd2c48d95f4cf752eff7d732e48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d0720375952abd2c48d95f4cf752eff7d732e48", "patch": "@@ -1,3 +1,20 @@\n+2006-01-10  Stuart Hastings  <stuart@apple.com>\n+\n+\t* gcc/config/i386/i386.md (set_got): Update.\n+\t(set_got_labelled): New.  (UNSPEC_LD_MPIC): New.\n+\t(builtin_setjmp_receiver): Mach-O support.\n+\t* gcc/config/i386/darwin.h (TARGET_ASM_FILE_END) Define.\n+\t(GOT_SYMBOL_NAME): Define.\n+\t(FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN): New.\n+\t(TARGET_DEEP_BRANCH_PREDICTION): Remove.\n+\t* gcc/config/i386/i386.c (override_options): Revise for Darwin.\n+\t(USE_HIDDEN_LINKONCE): Enable for Mach-O.  (ix86_file_end): Mach-O\n+\tsupport.  (darwin_x86_file_end): New.  (output_set_got): Add label\n+\tparameter, revise for Mach-O.  (x86_output_mi_thunk): Likewise.\n+\t* gcc/config/i386/i386-protos.h (output_set_got): Likewise.\n+\t* gcc/config/darwin.c (machopic_legitimize_pic_address): Update\n+\tregs_ever_live[].\n+\n 2006-01-10  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/sh.h (SH5_WOULD_BE_PARTIAL_NREGS): Use GET_MODE_SIZE"}, {"sha": "8920d62095c07ac8db4e0166e49e21bf7f88f14f", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d0720375952abd2c48d95f4cf752eff7d732e48/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d0720375952abd2c48d95f4cf752eff7d732e48/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=7d0720375952abd2c48d95f4cf752eff7d732e48", "patch": "@@ -773,6 +773,8 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t\t\t\t\t\t   PIC_OFFSET_TABLE_REGNUM)));\n #endif\n \n+\t      if (reload_in_progress)\n+\t\tregs_ever_live[REGNO (pic)] = 1;\n \t      pic_ref = gen_rtx_PLUS (Pmode, pic,\n \t\t\t\t      gen_pic_offset (XEXP (orig, 0),\n \t\t\t\t\t\t      pic_base));\n@@ -842,6 +844,8 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t\t  emit_insn (gen_rtx_USE (VOIDmode,\n \t\t\t\t\t  pic_offset_table_rtx));\n #endif\n+\t\t  if (reload_in_progress)\n+\t\t    regs_ever_live[REGNO (pic)] = 1;\n \t\t  pic_ref = gen_rtx_PLUS (Pmode,\n \t\t\t\t\t  pic,\n \t\t\t\t\t  gen_pic_offset (orig, pic_base));"}, {"sha": "73e080f068aaf025f75bb300feb5b1759c163e6f", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d0720375952abd2c48d95f4cf752eff7d732e48/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d0720375952abd2c48d95f4cf752eff7d732e48/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=7d0720375952abd2c48d95f4cf752eff7d732e48", "patch": "@@ -37,6 +37,9 @@ Boston, MA 02110-1301, USA.  */\n     }                                           \\\n   while (0)\n \n+#undef FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN\n+#define FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN (0)\n+\n /* We want -fPIC by default, unless we're using -static to compile for\n    the kernel or some such.  */\n \n@@ -69,6 +72,10 @@ Boston, MA 02110-1301, USA.  */\n \n #define SHIFT_DOUBLE_OMITS_COUNT 0\n \n+extern void darwin_x86_file_end (void);\n+#undef TARGET_ASM_FILE_END\n+#define TARGET_ASM_FILE_END darwin_x86_file_end\n+\n /* Define the syntax of pseudo-ops, labels and comments.  */\n \n /* String containing the assembler's comment-starter.  */\n@@ -80,16 +87,14 @@ Boston, MA 02110-1301, USA.  */\n \n #define TARGET_SUBTARGET_DEFAULT (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_128BIT_LONG_DOUBLE | MASK_ALIGN_DOUBLE)\n \n-/* TARGET_DEEP_BRANCH_PREDICTION is incompatible with Mach-O PIC.  */\n-\n-#undef TARGET_DEEP_BRANCH_PREDICTION\n-#define TARGET_DEEP_BRANCH_PREDICTION   0\n-\n /* For now, disable dynamic-no-pic.  We'll need to go through i386.c\n    with a fine-tooth comb looking for refs to flag_pic!  */\n #define MASK_MACHO_DYNAMIC_NO_PIC 0\n #define TARGET_DYNAMIC_NO_PIC\t  (target_flags & MASK_MACHO_DYNAMIC_NO_PIC)\n \n+#undef GOT_SYMBOL_NAME\n+#define GOT_SYMBOL_NAME (machopic_function_base_name ())\n+\n /* Define the syntax of pseudo-ops, labels and comments.  */\n \n #define LPREFIX \"L\""}, {"sha": "188c9677b77d713cef11e6fc8df21f89b8758a71", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d0720375952abd2c48d95f4cf752eff7d732e48/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d0720375952abd2c48d95f4cf752eff7d732e48/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=7d0720375952abd2c48d95f4cf752eff7d732e48", "patch": "@@ -67,7 +67,7 @@ extern bool output_addr_const_extra (FILE*, rtx);\n extern void split_di (rtx[], int, rtx[], rtx[]);\n extern void split_ti (rtx[], int, rtx[], rtx[]);\n \n-extern const char *output_set_got (rtx);\n+extern const char *output_set_got (rtx, rtx);\n extern const char *output_387_binary_op (rtx, rtx*);\n extern const char *output_387_reg_move (rtx, rtx*);\n extern const char *output_fix_trunc (rtx, rtx*, int);"}, {"sha": "5cececebcce46afbaaa9a42f47ea0c2816fdb9ef", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 41, "deletions": 11, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d0720375952abd2c48d95f4cf752eff7d732e48/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d0720375952abd2c48d95f4cf752eff7d732e48/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7d0720375952abd2c48d95f4cf752eff7d732e48", "patch": "@@ -1589,9 +1589,8 @@ override_options (void)\n      The default of 128 bits is for Pentium III's SSE __m128, but we\n      don't want additional code to keep the stack aligned when\n      optimizing for code size.  */\n-  ix86_preferred_stack_boundary = (optimize_size\n-\t\t\t\t   ? TARGET_64BIT ? 128 : 32\n-\t\t\t\t   : 128);\n+  ix86_preferred_stack_boundary = ((TARGET_64BIT || TARGET_MACHO || !optimize_size)\n+\t\t\t\t   ? 128 : 32);\n   if (ix86_preferred_stack_boundary_string)\n     {\n       i = atoi (ix86_preferred_stack_boundary_string);\n@@ -4431,7 +4430,7 @@ ix86_setup_frame_addresses (void)\n   cfun->machine->accesses_prev_frame = 1;\n }\n \f\n-#if defined(HAVE_GAS_HIDDEN) && (SUPPORTS_ONE_ONLY - 0)\n+#if (defined(HAVE_GAS_HIDDEN) && (SUPPORTS_ONE_ONLY - 0)) || TARGET_MACHO\n # define USE_HIDDEN_LINKONCE 1\n #else\n # define USE_HIDDEN_LINKONCE 0\n@@ -4470,6 +4469,19 @@ ix86_file_end (void)\n \n       get_pc_thunk_name (name, regno);\n \n+#if TARGET_MACHO\n+      if (TARGET_MACHO)\n+\t{\n+\t  switch_to_section (darwin_sections[text_coal_section]);\n+\t  fputs (\"\\t.weak_definition\\t\", asm_out_file);\n+\t  assemble_name (asm_out_file, name);\n+\t  fputs (\"\\n\\t.private_extern\\t\", asm_out_file);\n+\t  assemble_name (asm_out_file, name);\n+\t  fputs (\"\\n\", asm_out_file);\n+\t  ASM_OUTPUT_LABEL (asm_out_file, name);\n+\t}\n+      else\n+#endif\n       if (USE_HIDDEN_LINKONCE)\n \t{\n \t  tree decl;\n@@ -4508,7 +4520,7 @@ ix86_file_end (void)\n /* Emit code for the SET_GOT patterns.  */\n \n const char *\n-output_set_got (rtx dest)\n+output_set_got (rtx dest, rtx label ATTRIBUTE_UNUSED)\n {\n   rtx xops[3];\n \n@@ -4517,18 +4529,20 @@ output_set_got (rtx dest)\n \n   if (! TARGET_DEEP_BRANCH_PREDICTION || !flag_pic)\n     {\n-      xops[2] = gen_rtx_LABEL_REF (Pmode, gen_label_rtx ());\n+      xops[2] = gen_rtx_LABEL_REF (Pmode, label ? label : gen_label_rtx ());\n \n       if (!flag_pic)\n \toutput_asm_insn (\"mov{l}\\t{%2, %0|%0, %2}\", xops);\n       else\n \toutput_asm_insn (\"call\\t%a2\", xops);\n \n #if TARGET_MACHO\n-      /* Output the \"canonical\" label name (\"Lxx$pb\") here too.  This\n-         is what will be referred to by the Mach-O PIC subsystem.  */\n-      ASM_OUTPUT_LABEL (asm_out_file, machopic_function_base_name ());\n+      /* Output the Mach-O \"canonical\" label name (\"Lxx$pb\") here too.  This\n+         is what will be referenced by the Mach-O PIC subsystem.  */\n+      if (!label)\n+\tASM_OUTPUT_LABEL (asm_out_file, machopic_function_base_name ());\n #endif\n+\n       (*targetm.asm_out.internal_label) (asm_out_file, \"L\",\n \t\t\t\t CODE_LABEL_NUMBER (XEXP (xops[2], 0)));\n \n@@ -4544,11 +4558,20 @@ output_set_got (rtx dest)\n       xops[2] = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (name));\n       xops[2] = gen_rtx_MEM (QImode, xops[2]);\n       output_asm_insn (\"call\\t%X2\", xops);\n+      /* Output the Mach-O \"canonical\" label name (\"Lxx$pb\") here too.  This\n+         is what will be referenced by the Mach-O PIC subsystem.  */\n+#if TARGET_MACHO\n+      if (!label)\n+\tASM_OUTPUT_LABEL (asm_out_file, machopic_function_base_name ());\n+#endif\n     }\n \n+  if (TARGET_MACHO)\n+    return \"\";\n+\n   if (!flag_pic || TARGET_DEEP_BRANCH_PREDICTION)\n     output_asm_insn (\"add{l}\\t{%1, %0|%0, %1}\", xops);\n-  else if (!TARGET_MACHO)\n+  else\n     output_asm_insn (\"add{l}\\t{%1+[.-%a2], %0|%0, %1+(.-%a2)}\", xops);\n \n   return \"\";\n@@ -16708,6 +16731,13 @@ machopic_output_stub (FILE *file, const char *symb, const char *stub)\n   fprintf (file, \"\\t.indirect_symbol %s\\n\", symbol_name);\n   fprintf (file, \"\\t.long %s\\n\", binder_name);\n }\n+\n+void\n+darwin_x86_file_end (void)\n+{\n+  darwin_file_end ();\n+  ix86_file_end ();\n+}\n #endif /* TARGET_MACHO */\n \n /* Order the registers for register allocator.  */\n@@ -16996,7 +17026,7 @@ x86_output_mi_thunk (FILE *file ATTRIBUTE_UNUSED,\n #endif /* TARGET_MACHO */\n \t{\n \t  tmp = gen_rtx_REG (SImode, 2 /* ECX */);\n-\t  output_set_got (tmp);\n+\t  output_set_got (tmp, NULL_RTX);\n \n \t  xops[1] = tmp;\n \t  output_asm_insn (\"mov{l}\\t{%0@GOT(%1), %1|%1, %0@GOT[%1]}\", xops);"}, {"sha": "99b3acf537a2a02f751a9c4a2dc3bf8a5a1eb768", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d0720375952abd2c48d95f4cf752eff7d732e48/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d0720375952abd2c48d95f4cf752eff7d732e48/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7d0720375952abd2c48d95f4cf752eff7d732e48", "patch": "@@ -83,6 +83,7 @@\n    (UNSPEC_FLDCW\t\t25)\n    (UNSPEC_REP\t\t\t26)\n    (UNSPEC_EH_RETURN\t\t27)\n+   (UNSPEC_LD_MPIC\t\t28)\t; load_macho_picbase\n \n    ; For SSE/MMX support:\n    (UNSPEC_FIX_NOTRUNC\t\t30)\n@@ -13859,7 +13860,17 @@\n \t(unspec:SI [(const_int 0)] UNSPEC_SET_GOT))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT\"\n-  { return output_set_got (operands[0]); }\n+  { return output_set_got (operands[0], NULL_RTX); }\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"12\")])\n+\n+(define_insn \"set_got_labelled\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(label_ref (match_operand 1 \"\" \"\"))]\n+\t UNSPEC_SET_GOT))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"!TARGET_64BIT\"\n+  { return output_set_got (operands[0], operands[1]); }\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"12\")])\n \n@@ -18801,7 +18812,22 @@\n   [(label_ref (match_operand 0 \"\" \"\"))]\n   \"!TARGET_64BIT && flag_pic\"\n {\n-  emit_insn (gen_set_got (pic_offset_table_rtx));\n+  if (TARGET_MACHO)\n+    {\n+      rtx xops[3];\n+      rtx picreg = gen_rtx_REG (Pmode, PIC_OFFSET_TABLE_REGNUM);\n+      rtx label_rtx = gen_label_rtx ();\n+      emit_insn (gen_set_got_labelled (pic_offset_table_rtx, label_rtx));\n+      emit_label (label_rtx);\n+      xops[0] = xops[1] = picreg;\n+      xops[2] = gen_rtx_CONST (SImode,\n+\t          gen_rtx_MINUS (SImode,\n+\t\t    gen_rtx_LABEL_REF (SImode, label_rtx),\n+\t\t    gen_rtx_SYMBOL_REF (SImode, GOT_SYMBOL_NAME)));\n+      ix86_expand_binary_operator (MINUS, SImode, xops);\n+    }\n+  else\n+    emit_insn (gen_set_got (pic_offset_table_rtx));\n   DONE;\n })\n \f"}]}