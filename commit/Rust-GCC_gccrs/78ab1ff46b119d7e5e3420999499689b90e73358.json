{"sha": "78ab1ff46b119d7e5e3420999499689b90e73358", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhhYjFmZjQ2YjExOWQ3ZTVlMzQyMDk5OTQ5OTY4OWI5MGU3MzM1OA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-09-17T15:08:13Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-09-17T15:08:13Z"}, "message": "rtl.h (CONST_FIXED_P): New predicate macro.\n\n\t* rtl.h (CONST_FIXED_P): New predicate macro.\n\nFrom-SVN: r191388", "tree": {"sha": "8d2abe3bfe22ece9fd8264d4f8b7200655f63f43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d2abe3bfe22ece9fd8264d4f8b7200655f63f43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78ab1ff46b119d7e5e3420999499689b90e73358", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78ab1ff46b119d7e5e3420999499689b90e73358", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78ab1ff46b119d7e5e3420999499689b90e73358", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78ab1ff46b119d7e5e3420999499689b90e73358/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fea4ea737fa4a9ab3d979b6f0b969a96cbbb4cd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fea4ea737fa4a9ab3d979b6f0b969a96cbbb4cd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fea4ea737fa4a9ab3d979b6f0b969a96cbbb4cd1"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "2dc31a55248ea23f0acfd437ac9544aa750bd3e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ab1ff46b119d7e5e3420999499689b90e73358/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ab1ff46b119d7e5e3420999499689b90e73358/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78ab1ff46b119d7e5e3420999499689b90e73358", "patch": "@@ -1,3 +1,7 @@\n+2012-09-17  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* rtl.h (CONST_FIXED_P): New predicate macro.\n+\n 2012-09-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-cfgcleanup. (cleanup_control_expr_graph) <GIMPLE_COND>: Remove"}, {"sha": "43e5980936c1e27cc4a82bb6a631e7268a59c1f6", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ab1ff46b119d7e5e3420999499689b90e73358/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ab1ff46b119d7e5e3420999499689b90e73358/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=78ab1ff46b119d7e5e3420999499689b90e73358", "patch": "@@ -419,6 +419,9 @@ struct GTY((variable_size)) rtvec_def {\n /* Predicate yielding nonzero iff X is an rtx for a constant integer.  */\n #define CONST_INT_P(X) (GET_CODE (X) == CONST_INT)\n \n+/* Predicate yielding nonzero iff X is an rtx for a constant fixed-point.  */\n+#define CONST_FIXED_P(X) (GET_CODE (X) == CONST_FIXED)\n+\n /* Predicate yielding true iff X is an rtx for a double-int\n    or floating point constant.  */\n #define CONST_DOUBLE_P(X) (GET_CODE (X) == CONST_DOUBLE)"}]}