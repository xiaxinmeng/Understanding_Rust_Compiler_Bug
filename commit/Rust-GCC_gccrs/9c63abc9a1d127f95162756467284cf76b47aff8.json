{"sha": "9c63abc9a1d127f95162756467284cf76b47aff8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM2M2FiYzlhMWQxMjdmOTUxNjI3NTY0NjcyODRjZjc2YjQ3YWZmOA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-12-07T01:11:29Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-12-07T01:11:29Z"}, "message": "libgo: Update to weekly 2011-11-09.\n\nFrom-SVN: r182073", "tree": {"sha": "84f27a6ab44d932e4b0455f18390b070b4de626e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84f27a6ab44d932e4b0455f18390b070b4de626e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c63abc9a1d127f95162756467284cf76b47aff8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c63abc9a1d127f95162756467284cf76b47aff8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c63abc9a1d127f95162756467284cf76b47aff8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c63abc9a1d127f95162756467284cf76b47aff8/comments", "author": null, "committer": null, "parents": [{"sha": "374280238f934fa851273e2ee16ba53be890c6b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/374280238f934fa851273e2ee16ba53be890c6b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/374280238f934fa851273e2ee16ba53be890c6b8"}], "stats": {"total": 7315, "additions": 4954, "deletions": 2361}, "files": [{"sha": "cc2cc71000ef1171e8d6faba947d1714258006e1", "filename": "gcc/testsuite/go.test/test/chan/select5.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fselect5.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fselect5.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fselect5.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -18,7 +18,7 @@ import (\n \t\"fmt\"\n \t\"io\"\n \t\"os\"\n-\t\"template\"\n+\t\"text/template\"\n )\n \n func main() {"}, {"sha": "461ee9796ed384631bd55c37b922601aa7830082", "filename": "gcc/testsuite/go.test/test/cmplxdivide.go", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmplxdivide.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmplxdivide.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmplxdivide.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -9,14 +9,14 @@\n package main\n \n import (\n-\t\"cmath\"\n \t\"fmt\"\n \t\"math\"\n+\t\"math/cmplx\"\n )\n \n-type Test struct{\n-\tf, g\tcomplex128\n-\tout\tcomplex128\n+type Test struct {\n+\tf, g complex128\n+\tout  complex128\n }\n \n var nan = math.NaN()\n@@ -25,9 +25,9 @@ var negzero = math.Copysign(0, -1)\n \n func calike(a, b complex128) bool {\n \tswitch {\n-\tcase cmath.IsInf(a) && cmath.IsInf(b):\n+\tcase cmplx.IsInf(a) && cmplx.IsInf(b):\n \t\treturn true\n-\tcase cmath.IsNaN(a) && cmath.IsNaN(b):\n+\tcase cmplx.IsNaN(a) && cmplx.IsNaN(b):\n \t\treturn true\n \t}\n \treturn a == b\n@@ -36,7 +36,7 @@ func calike(a, b complex128) bool {\n func main() {\n \tbad := false\n \tfor _, t := range tests {\n-\t\tx := t.f/t.g\n+\t\tx := t.f / t.g\n \t\tif !calike(x, t.out) {\n \t\t\tif !bad {\n \t\t\t\tfmt.Printf(\"BUG\\n\")"}, {"sha": "82fbf7f8150f376cef4ebe923a2f64ddcbc738f5", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug358.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug358.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug358.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug358.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -10,8 +10,8 @@\n package main\n \n import (\n-\t\"http\"\n \t\"io/ioutil\"\t// GCCGO_ERROR \"imported and not used\"\n+\t\"net/http\"\n \t\"os\"\n )\n "}, {"sha": "5a64d16b49069643839e9003590bbd05a8837f9d", "filename": "gcc/testsuite/go.test/test/ken/divconst.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fdivconst.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fdivconst.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fdivconst.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -6,7 +6,7 @@\n \n package main\n \n-import \"rand\"\n+import \"math/rand\"\n \n const Count = 1e5\n "}, {"sha": "c2603a0a099c62ac996e0e5836571068713db13b", "filename": "gcc/testsuite/go.test/test/ken/modconst.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fmodconst.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fmodconst.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fmodconst.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -6,7 +6,7 @@\n \n package main\n \n-import \"rand\"\n+import \"math/rand\"\n \n const Count = 1e5\n "}, {"sha": "726e36799a82b104e54bd6d995958de49686cdff", "filename": "gcc/testsuite/go.test/test/mallocrand.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmallocrand.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmallocrand.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmallocrand.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -10,7 +10,7 @@ package main\n \n import (\n \t\"flag\"\n-\t\"rand\"\n+\t\"math/rand\"\n \t\"runtime\"\n \t\"unsafe\"\n )"}, {"sha": "6a7063e239d3dc70d03a2553eaa28b8383c5289d", "filename": "gcc/testsuite/go.test/test/stringrange.go", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fstringrange.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fstringrange.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fstringrange.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -9,28 +9,29 @@ package main\n import (\n \t\"fmt\"\n \t\"os\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n func main() {\n \ts := \"\\000\\123\\x00\\xca\\xFE\\u0123\\ubabe\\U0000babe\\U0010FFFFx\"\n-\texpect := []int{ 0, 0123, 0, 0xFFFD, 0xFFFD, 0x123, 0xbabe, 0xbabe, 0x10FFFF, 'x' }\n+\texpect := []rune{0, 0123, 0, 0xFFFD, 0xFFFD, 0x123, 0xbabe, 0xbabe, 0x10FFFF, 'x'}\n \toffset := 0\n-\tvar i, c int\n+\tvar i int\n+\tvar c rune\n \tok := true\n \tcnum := 0\n \tfor i, c = range s {\n-\t\trune, size := utf8.DecodeRuneInString(s[i:len(s)])  // check it another way\n+\t\tr, size := utf8.DecodeRuneInString(s[i:len(s)]) // check it another way\n \t\tif i != offset {\n \t\t\tfmt.Printf(\"unexpected offset %d not %d\\n\", i, offset)\n \t\t\tok = false\n \t\t}\n-\t\tif rune != expect[cnum] {\n-\t\t\tfmt.Printf(\"unexpected rune %d from DecodeRuneInString: %x not %x\\n\", i, rune, expect[cnum])\n+\t\tif r != expect[cnum] {\n+\t\t\tfmt.Printf(\"unexpected rune %d from DecodeRuneInString: %x not %x\\n\", i, r, expect[cnum])\n \t\t\tok = false\n \t\t}\n \t\tif c != expect[cnum] {\n-\t\t\tfmt.Printf(\"unexpected rune %d from range: %x not %x\\n\", i, rune, expect[cnum])\n+\t\t\tfmt.Printf(\"unexpected rune %d from range: %x not %x\\n\", i, r, expect[cnum])\n \t\t\tok = false\n \t\t}\n \t\toffset += size"}, {"sha": "9fba58156b3423bb0c900a7eba44f26433ea1dd9", "filename": "gcc/testsuite/go.test/test/utf.go", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Futf.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Futf.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Futf.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -6,10 +6,10 @@\n \n package main\n \n-import \"utf8\"\n+import \"unicode/utf8\"\n \n func main() {\n-\tvar chars [6] int\n+\tvar chars [6]rune\n \tchars[0] = 'a'\n \tchars[1] = 'b'\n \tchars[2] = 'c'\n@@ -21,16 +21,22 @@ func main() {\n \t\ts += string(chars[i])\n \t}\n \tvar l = len(s)\n-\tfor w, i, j := 0,0,0; i < l; i += w {\n-\t\tvar r int\n+\tfor w, i, j := 0, 0, 0; i < l; i += w {\n+\t\tvar r rune\n \t\tr, w = utf8.DecodeRuneInString(s[i:len(s)])\n-\t\tif w == 0 { panic(\"zero width in string\") }\n-\t\tif r != chars[j] { panic(\"wrong value from string\") }\n+\t\tif w == 0 {\n+\t\t\tpanic(\"zero width in string\")\n+\t\t}\n+\t\tif r != chars[j] {\n+\t\t\tpanic(\"wrong value from string\")\n+\t\t}\n \t\tj++\n \t}\n \t// encoded as bytes:  'a' 'b' 'c' e6 97 a5 e6 9c ac e8 aa 9e\n \tconst L = 12\n-\tif L != l { panic(\"wrong length constructing array\") }\n+\tif L != l {\n+\t\tpanic(\"wrong length constructing array\")\n+\t}\n \ta := make([]byte, L)\n \ta[0] = 'a'\n \ta[1] = 'b'\n@@ -44,11 +50,15 @@ func main() {\n \ta[9] = 0xe8\n \ta[10] = 0xaa\n \ta[11] = 0x9e\n-\tfor w, i, j := 0,0,0; i < L; i += w {\n-\t\tvar r int\n+\tfor w, i, j := 0, 0, 0; i < L; i += w {\n+\t\tvar r rune\n \t\tr, w = utf8.DecodeRune(a[i:L])\n-\t\tif w == 0 { panic(\"zero width in bytes\") }\n-\t\tif r != chars[j] { panic(\"wrong value from bytes\") }\n+\t\tif w == 0 {\n+\t\t\tpanic(\"zero width in bytes\")\n+\t\t}\n+\t\tif r != chars[j] {\n+\t\t\tpanic(\"wrong value from bytes\")\n+\t\t}\n \t\tj++\n \t}\n }"}, {"sha": "5e896c008bf4e34bd3213f3a411aff5e3e539963", "filename": "libgo/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMERGE?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -1,4 +1,4 @@\n-780c85032b17\n+2f4482b89a6b\n \n The first line of this file holds the Mercurial revision number of the\n last merge done from the master library sources."}, {"sha": "cd264e326687eb242d6f4ba21174953be9f21e39", "filename": "libgo/Makefile.am", "status": "modified", "additions": 609, "deletions": 554, "changes": 1163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -100,56 +100,36 @@ toolexeclib_LIBRARIES = libgobegin.a\n toolexeclibgodir = $(toolexeclibdir)/go/$(gcc_version)/$(target_alias)\n \n toolexeclibgo_DATA = \\\n-\tasn1.gox \\\n-\tbig.gox \\\n \tbufio.gox \\\n \tbytes.gox \\\n-\tcmath.gox \\\n \tcrypto.gox \\\n-\tcsv.gox \\\n \terrors.gox \\\n-\texec.gox \\\n \texpvar.gox \\\n \tflag.gox \\\n \tfmt.gox \\\n-\tgob.gox \\\n \thash.gox \\\n \thtml.gox \\\n-\thttp.gox \\\n \timage.gox \\\n \tio.gox \\\n-\tjson.gox \\\n \tlog.gox \\\n \tmath.gox \\\n-\tmail.gox \\\n \tmime.gox \\\n \tnet.gox \\\n \tos.gox \\\n \tpatch.gox \\\n \tpath.gox \\\n-\trand.gox \\\n \treflect.gox \\\n \tregexp.gox \\\n-\trpc.gox \\\n \truntime.gox \\\n-\tscanner.gox \\\n-\tsmtp.gox \\\n \tsort.gox \\\n \tstrconv.gox \\\n \tstrings.gox \\\n \tsync.gox \\\n \tsyscall.gox \\\n-\tsyslog.gox \\\n-\ttabwriter.gox \\\n-\ttemplate.gox \\\n \ttesting.gox \\\n \ttime.gox \\\n \tunicode.gox \\\n-\turl.gox \\\n-\tutf16.gox \\\n-\tutf8.gox \\\n-\twebsocket.gox \\\n-\txml.gox\n+\twebsocket.gox\n \n toolexeclibgoarchivedir = $(toolexeclibgodir)/archive\n \n@@ -230,12 +210,17 @@ toolexeclibgoencodingdir = $(toolexeclibgodir)/encoding\n \n toolexeclibgoencoding_DATA = \\\n \tencoding/ascii85.gox \\\n+\tencoding/asn1.gox \\\n \tencoding/base32.gox \\\n \tencoding/base64.gox \\\n \tencoding/binary.gox \\\n+\tencoding/csv.gox \\\n \tencoding/git85.gox \\\n+\tencoding/gob.gox \\\n \tencoding/hex.gox \\\n-\tencoding/pem.gox\n+\tencoding/json.gox \\\n+\tencoding/pem.gox \\\n+\tencoding/xml.gox\n \n if LIBGO_IS_LINUX\n # exp_inotify_gox = exp/inotify.gox\n@@ -267,11 +252,6 @@ toolexeclibgoexpsqldir = $(toolexeclibgoexpdir)/sql\n toolexeclibgoexpsql_DATA = \\\n \texp/sql/driver.gox\n \n-toolexeclibgoexptemplatedir = $(toolexeclibgoexpdir)/template\n-\n-toolexeclibgoexptemplate_DATA = \\\n-\texp/template/html.gox\n-\n toolexeclibgogodir = $(toolexeclibgodir)/go\n \n toolexeclibgogo_DATA = \\\n@@ -291,13 +271,10 @@ toolexeclibgohash_DATA = \\\n \thash/crc64.gox \\\n \thash/fnv.gox\n \n-toolexeclibgohttpdir = $(toolexeclibgodir)/http\n+toolexeclibgohtmldir = $(toolexeclibgodir)/html\n \n-toolexeclibgohttp_DATA = \\\n-\thttp/cgi.gox \\\n-\thttp/fcgi.gox \\\n-\thttp/httptest.gox \\\n-\thttp/pprof.gox\n+toolexeclibgohtml_DATA = \\\n+\thtml/template.gox\n \n toolexeclibgoimagedir = $(toolexeclibgodir)/image\n \n@@ -321,6 +298,18 @@ toolexeclibgoiodir = $(toolexeclibgodir)/io\n toolexeclibgoio_DATA = \\\n \tio/ioutil.gox\n \n+toolexeclibgologdir = $(toolexeclibgodir)/log\n+\n+toolexeclibgolog_DATA = \\\n+\tlog/syslog.gox\n+\n+toolexeclibgomathdir = $(toolexeclibgodir)/math\n+\n+toolexeclibgomath_DATA = \\\n+\tmath/big.gox \\\n+\tmath/cmplx.gox \\\n+\tmath/rand.gox\n+\n toolexeclibgomimedir = $(toolexeclibgodir)/mime\n \n toolexeclibgomime_DATA = \\\n@@ -330,7 +319,26 @@ toolexeclibgonetdir = $(toolexeclibgodir)/net\n \n toolexeclibgonet_DATA = \\\n \tnet/dict.gox \\\n-\tnet/textproto.gox\n+\tnet/http.gox \\\n+\tnet/mail.gox \\\n+\tnet/rpc.gox \\\n+\tnet/smtp.gox \\\n+\tnet/textproto.gox \\\n+\tnet/url.gox\n+\n+toolexeclibgonethttpdir = $(toolexeclibgonetdir)/http\n+\n+toolexeclibgonethttp_DATA = \\\n+\tnet/http/cgi.gox \\\n+\tnet/http/fcgi.gox \\\n+\tnet/http/httptest.gox \\\n+\tnet/http/httputil.gox \\\n+\tnet/http/pprof.gox\n+\n+toolexeclibgonetrpcdir = $(toolexeclibgonetdir)/rpc\n+\n+toolexeclibgonetrpc_DATA = \\\n+\tnet/rpc/jsonrpc.gox\n \n toolexeclibgoolddir = $(toolexeclibgodir)/old\n \n@@ -342,6 +350,7 @@ toolexeclibgoold_DATA = \\\n toolexeclibgoosdir = $(toolexeclibgodir)/os\n \n toolexeclibgoos_DATA = \\\n+\tos/exec.gox \\\n \tos/user.gox \\\n \tos/signal.gox\n \n@@ -355,22 +364,12 @@ toolexeclibgoregexpdir = $(toolexeclibgodir)/regexp\n toolexeclibgoregexp_DATA = \\\n \tregexp/syntax.gox\n \n-toolexeclibgorpcdir = $(toolexeclibgodir)/rpc\n-\n-toolexeclibgorpc_DATA = \\\n-\trpc/jsonrpc.gox\n-\n toolexeclibgoruntimedir = $(toolexeclibgodir)/runtime\n \n toolexeclibgoruntime_DATA = \\\n \truntime/debug.gox \\\n \truntime/pprof.gox\n \n-toolexeclibgotemplatedir = $(toolexeclibgodir)/template\n-\n-toolexeclibgotemplate_DATA = \\\n-\ttemplate/parse.gox\n-\n toolexeclibgosyncdir = $(toolexeclibgodir)/sync\n \n toolexeclibgosync_DATA = \\\n@@ -383,6 +382,24 @@ toolexeclibgotesting_DATA = \\\n \ttesting/quick.gox \\\n \ttesting/script.gox\n \n+toolexeclibgotextdir = $(toolexeclibgodir)/text\n+\n+toolexeclibgotext_DATA = \\\n+\ttext/scanner.gox \\\n+\ttext/tabwriter.gox \\\n+\ttext/template.gox\n+\n+toolexeclibgotexttemplatedir = $(toolexeclibgotextdir)/template\n+\n+toolexeclibgotexttemplate_DATA = \\\n+\ttext/template/parse.gox\n+\n+toolexeclibgounicodedir = $(toolexeclibgodir)/unicode\n+\n+toolexeclibgounicode_DATA = \\\n+\tunicode/utf16.gox \\\n+\tunicode/utf8.gox\n+\n if HAVE_SYS_MMAN_H\n runtime_mem_file = runtime/mem.c\n else\n@@ -484,7 +501,8 @@ runtime_files = \\\n \truntime1.c \\\n \tsema.c \\\n \tsigqueue.c \\\n-\tstring.c\n+\tstring.c \\\n+\ttime.c\n \n goc2c.$(OBJEXT): runtime/goc2c.c\n \t$(CC_FOR_BUILD) -c $(CFLAGS_FOR_BUILD) $<\n@@ -516,21 +534,14 @@ sigqueue.c: $(srcdir)/runtime/sigqueue.goc goc2c\n \t./goc2c --gcc --go-prefix libgo_runtime $< > $@.tmp\n \tmv -f $@.tmp $@\n \n+time.c: $(srcdir)/runtime/time.goc goc2c\n+\t./goc2c --gcc --go-prefix libgo_time $< > $@.tmp\n+\tmv -f $@.tmp $@\n+\n %.c: $(srcdir)/runtime/%.goc goc2c\n \t./goc2c --gcc $< > $@.tmp\n \tmv -f $@.tmp $@\n \n-go_asn1_files = \\\n-\tgo/asn1/asn1.go \\\n-\tgo/asn1/common.go \\\n-\tgo/asn1/marshal.go\n-\n-go_big_files = \\\n-\tgo/big/arith.go \\\n-\tgo/big/int.go \\\n-\tgo/big/nat.go \\\n-\tgo/big/rat.go\n-\n go_bufio_files = \\\n \tgo/bufio/bufio.go\n \n@@ -541,36 +552,12 @@ go_bytes_files = \\\n go_bytes_c_files = \\\n \tgo/bytes/indexbyte.c\n \n-go_cmath_files = \\\n-\tgo/cmath/abs.go \\\n-\tgo/cmath/asin.go \\\n-\tgo/cmath/conj.go \\\n-\tgo/cmath/exp.go \\\n-\tgo/cmath/isinf.go \\\n-\tgo/cmath/isnan.go \\\n-\tgo/cmath/log.go \\\n-\tgo/cmath/phase.go \\\n-\tgo/cmath/polar.go \\\n-\tgo/cmath/pow.go \\\n-\tgo/cmath/rect.go \\\n-\tgo/cmath/sin.go \\\n-\tgo/cmath/sqrt.go \\\n-\tgo/cmath/tan.go\n-\n go_crypto_files = \\\n \tgo/crypto/crypto.go\n \n-go_csv_files = \\\n-\tgo/csv/reader.go \\\n-\tgo/csv/writer.go\n-\n go_errors_files = \\\n \tgo/errors/errors.go\n \n-go_exec_files = \\\n-\tgo/exec/exec.go \\\n-\tgo/exec/lp_unix.go\n-\n go_expvar_files = \\\n \tgo/expvar/expvar.go\n \n@@ -583,15 +570,6 @@ go_fmt_files = \\\n \tgo/fmt/print.go \\\n \tgo/fmt/scan.go\n \n-go_gob_files = \\\n-\tgo/gob/decode.go \\\n-\tgo/gob/decoder.go \\\n-\tgo/gob/doc.go \\\n-\tgo/gob/encode.go \\\n-\tgo/gob/encoder.go \\\n-\tgo/gob/error.go \\\n-\tgo/gob/type.go\n-\n go_hash_files = \\\n \tgo/hash/hash.go\n \n@@ -605,25 +583,6 @@ go_html_files = \\\n \tgo/html/render.go \\\n \tgo/html/token.go\n \n-go_http_files = \\\n-\tgo/http/chunked.go \\\n-\tgo/http/client.go \\\n-\tgo/http/cookie.go \\\n-\tgo/http/dump.go \\\n-\tgo/http/filetransport.go \\\n-\tgo/http/fs.go \\\n-\tgo/http/header.go \\\n-\tgo/http/lex.go \\\n-\tgo/http/persist.go \\\n-\tgo/http/request.go \\\n-\tgo/http/response.go \\\n-\tgo/http/reverseproxy.go \\\n-\tgo/http/server.go \\\n-\tgo/http/sniff.go \\\n-\tgo/http/status.go \\\n-\tgo/http/transfer.go \\\n-\tgo/http/transport.go\n-\n go_image_files = \\\n \tgo/image/format.go \\\n \tgo/image/geom.go \\\n@@ -635,14 +594,6 @@ go_io_files = \\\n \tgo/io/io.go \\\n \tgo/io/pipe.go\n \n-go_json_files = \\\n-\tgo/json/decode.go \\\n-\tgo/json/encode.go \\\n-\tgo/json/indent.go \\\n-\tgo/json/scanner.go \\\n-\tgo/json/stream.go \\\n-\tgo/json/tags.go\n-\n go_log_files = \\\n \tgo/log/log.go\n \n@@ -694,9 +645,6 @@ go_math_files = \\\n \tgo/math/tanh.go \\\n \tgo/math/unsafe.go\n \n-go_mail_files = \\\n-\tgo/mail/message.go\n-\n go_mime_files = \\\n \tgo/mime/grammar.go \\\n \tgo/mime/mediatype.go \\\n@@ -852,13 +800,6 @@ go_path_files = \\\n \tgo/path/match.go \\\n \tgo/path/path.go\n \n-go_rand_files = \\\n-\tgo/rand/exp.go \\\n-\tgo/rand/normal.go \\\n-\tgo/rand/rand.go \\\n-\tgo/rand/rng.go \\\n-\tgo/rand/zipf.go\n-\n go_reflect_files = \\\n \tgo/reflect/deepequal.go \\\n \tgo/reflect/type.go \\\n@@ -868,10 +809,10 @@ go_regexp_files = \\\n \tgo/regexp/exec.go \\\n \tgo/regexp/regexp.go\n \n-go_rpc_files = \\\n-\tgo/rpc/client.go \\\n-\tgo/rpc/debug.go \\\n-\tgo/rpc/server.go\n+go_net_rpc_files = \\\n+\tgo/net/rpc/client.go \\\n+\tgo/net/rpc/debug.go \\\n+\tgo/net/rpc/server.go\n \n go_runtime_files = \\\n \tgo/runtime/debug.go \\\n@@ -894,13 +835,6 @@ s-version: Makefile\n \t$(SHELL) $(srcdir)/../move-if-change version.go.tmp version.go\n \t$(STAMP) $@\n \n-go_scanner_files = \\\n-\tgo/scanner/scanner.go\n-\n-go_smtp_files = \\\n-\tgo/smtp/auth.go \\\n-\tgo/smtp/smtp.go\n-\n go_sort_files = \\\n \tgo/sort/search.go \\\n \tgo/sort/sort.go\n@@ -927,31 +861,20 @@ go_sync_files = \\\n \tgo/sync/waitgroup.go\n \n if LIBGO_IS_SOLARIS\n-go_syslog_file = go/syslog/syslog_libc.go\n+go_syslog_file = go/log/syslog/syslog_libc.go\n else\n if LIBGO_IS_IRIX\n-go_syslog_file = go/syslog/syslog_libc.go\n+go_syslog_file = go/log/syslog/syslog_libc.go\n else\n-go_syslog_file = go/syslog/syslog_unix.go\n+go_syslog_file = go/log/syslog/syslog_unix.go\n endif\n endif\n \n-go_syslog_files = \\\n-\tgo/syslog/syslog.go \\\n+go_log_syslog_files = \\\n+\tgo/log/syslog/syslog.go \\\n \t$(go_syslog_file)\n go_syslog_c_files = \\\n-\tgo/syslog/syslog_c.c\n-\n-go_tabwriter_files = \\\n-\tgo/tabwriter/tabwriter.go\n-\n-go_template_files = \\\n-\tgo/template/doc.go \\\n-\tgo/template/exec.go \\\n-\tgo/template/funcs.go \\\n-\tgo/template/helper.go \\\n-\tgo/template/parse.go \\\n-\tgo/template/set.go\n+\tgo/log/syslog/syslog_c.c\n \n go_testing_files = \\\n \tgo/testing/benchmark.go \\\n@@ -975,27 +898,13 @@ go_unicode_files = \\\n \tgo/unicode/letter.go \\\n \tgo/unicode/tables.go\n \n-go_url_files = \\\n-\tgo/url/url.go\n-\n-go_utf16_files = \\\n-\tgo/utf16/utf16.go\n-\n-go_utf8_files = \\\n-\tgo/utf8/string.go \\\n-\tgo/utf8/utf8.go\n-\n go_websocket_files = \\\n \tgo/websocket/client.go \\\n \tgo/websocket/hixie.go \\\n \tgo/websocket/hybi.go \\\n \tgo/websocket/server.go \\\n \tgo/websocket/websocket.go\n \n-go_xml_files = \\\n-\tgo/xml/marshal.go \\\n-\tgo/xml/read.go \\\n-\tgo/xml/xml.go\n \n go_archive_tar_files = \\\n \tgo/archive/tar/common.go \\\n@@ -1183,19 +1092,45 @@ go_debug_pe_files = \\\n \n go_encoding_ascii85_files = \\\n \tgo/encoding/ascii85/ascii85.go\n+go_encoding_asn1_files = \\\n+\tgo/encoding/asn1/asn1.go \\\n+\tgo/encoding/asn1/common.go \\\n+\tgo/encoding/asn1/marshal.go\n go_encoding_base32_files = \\\n \tgo/encoding/base32/base32.go\n go_encoding_base64_files = \\\n \tgo/encoding/base64/base64.go\n go_encoding_binary_files = \\\n \tgo/encoding/binary/binary.go \\\n \tgo/encoding/binary/varint.go\n+go_encoding_csv_files = \\\n+\tgo/encoding/csv/reader.go \\\n+\tgo/encoding/csv/writer.go\n go_encoding_git85_files = \\\n \tgo/encoding/git85/git.go\n+go_encoding_gob_files = \\\n+\tgo/encoding/gob/decode.go \\\n+\tgo/encoding/gob/decoder.go \\\n+\tgo/encoding/gob/doc.go \\\n+\tgo/encoding/gob/encode.go \\\n+\tgo/encoding/gob/encoder.go \\\n+\tgo/encoding/gob/error.go \\\n+\tgo/encoding/gob/type.go\n go_encoding_hex_files = \\\n \tgo/encoding/hex/hex.go\n+go_encoding_json_files = \\\n+\tgo/encoding/json/decode.go \\\n+\tgo/encoding/json/encode.go \\\n+\tgo/encoding/json/indent.go \\\n+\tgo/encoding/json/scanner.go \\\n+\tgo/encoding/json/stream.go \\\n+\tgo/encoding/json/tags.go\n go_encoding_pem_files = \\\n \tgo/encoding/pem/pem.go\n+go_encoding_xml_files = \\\n+\tgo/encoding/xml/marshal.go \\\n+\tgo/encoding/xml/read.go \\\n+\tgo/encoding/xml/xml.go\n \n go_exp_ebnf_files = \\\n \tgo/exp/ebnf/ebnf.go \\\n@@ -1222,6 +1157,7 @@ go_exp_sql_files = \\\n go_exp_ssh_files = \\\n \tgo/exp/ssh/channel.go \\\n \tgo/exp/ssh/client.go \\\n+\tgo/exp/ssh/client_auth.go \\\n \tgo/exp/ssh/common.go \\\n \tgo/exp/ssh/doc.go \\\n \tgo/exp/ssh/messages.go \\\n@@ -1248,23 +1184,10 @@ go_exp_sql_driver_files = \\\n \tgo/exp/sql/driver/driver.go \\\n \tgo/exp/sql/driver/types.go\n \n-go_exp_template_html_files = \\\n-\tgo/exp/template/html/attr.go \\\n-\tgo/exp/template/html/clone.go \\\n-\tgo/exp/template/html/content.go \\\n-\tgo/exp/template/html/context.go \\\n-\tgo/exp/template/html/css.go \\\n-\tgo/exp/template/html/doc.go \\\n-\tgo/exp/template/html/error.go \\\n-\tgo/exp/template/html/escape.go \\\n-\tgo/exp/template/html/html.go \\\n-\tgo/exp/template/html/js.go \\\n-\tgo/exp/template/html/transition.go \\\n-\tgo/exp/template/html/url.go\n-\n go_go_ast_files = \\\n \tgo/go/ast/ast.go \\\n \tgo/go/ast/filter.go \\\n+\tgo/go/ast/import.go \\\n \tgo/go/ast/print.go \\\n \tgo/go/ast/resolve.go \\\n \tgo/go/ast/scope.go \\\n@@ -1302,17 +1225,20 @@ go_hash_crc64_files = \\\n go_hash_fnv_files = \\\n \tgo/hash/fnv/fnv.go\n \n-go_http_cgi_files = \\\n-\tgo/http/cgi/child.go \\\n-\tgo/http/cgi/host.go\n-go_http_fcgi_files = \\\n-\tgo/http/fcgi/child.go \\\n-\tgo/http/fcgi/fcgi.go\n-go_http_httptest_files = \\\n-\tgo/http/httptest/recorder.go \\\n-\tgo/http/httptest/server.go\n-go_http_pprof_files = \\\n-\tgo/http/pprof/pprof.go\n+go_html_template_files = \\\n+\tgo/html/template/attr.go \\\n+\tgo/html/template/clone.go \\\n+\tgo/html/template/content.go \\\n+\tgo/html/template/context.go \\\n+\tgo/html/template/css.go \\\n+\tgo/html/template/doc.go \\\n+\tgo/html/template/error.go \\\n+\tgo/html/template/escape.go \\\n+\tgo/html/template/html.go \\\n+\tgo/html/template/js.go \\\n+\tgo/html/template/template.go \\\n+\tgo/html/template/transition.go \\\n+\tgo/html/template/url.go\n \n go_image_bmp_files = \\\n \tgo/image/bmp/reader.go\n@@ -1354,20 +1280,86 @@ go_io_ioutil_files = \\\n \tgo/io/ioutil/ioutil.go \\\n \tgo/io/ioutil/tempfile.go\n \n+go_math_big_files = \\\n+\tgo/math/big/arith.go \\\n+\tgo/math/big/int.go \\\n+\tgo/math/big/nat.go \\\n+\tgo/math/big/rat.go\n+go_math_cmplx_files = \\\n+\tgo/math/cmplx/abs.go \\\n+\tgo/math/cmplx/asin.go \\\n+\tgo/math/cmplx/conj.go \\\n+\tgo/math/cmplx/exp.go \\\n+\tgo/math/cmplx/isinf.go \\\n+\tgo/math/cmplx/isnan.go \\\n+\tgo/math/cmplx/log.go \\\n+\tgo/math/cmplx/phase.go \\\n+\tgo/math/cmplx/polar.go \\\n+\tgo/math/cmplx/pow.go \\\n+\tgo/math/cmplx/rect.go \\\n+\tgo/math/cmplx/sin.go \\\n+\tgo/math/cmplx/sqrt.go \\\n+\tgo/math/cmplx/tan.go\n+go_math_rand_files = \\\n+\tgo/math/rand/exp.go \\\n+\tgo/math/rand/normal.go \\\n+\tgo/math/rand/rand.go \\\n+\tgo/math/rand/rng.go \\\n+\tgo/math/rand/zipf.go\n+\n go_mime_multipart_files = \\\n \tgo/mime/multipart/formdata.go \\\n \tgo/mime/multipart/multipart.go \\\n \tgo/mime/multipart/writer.go\n \n go_net_dict_files = \\\n \tgo/net/dict/dict.go\n-\n+go_net_http_files = \\\n+\tgo/net/http/chunked.go \\\n+\tgo/net/http/client.go \\\n+\tgo/net/http/cookie.go \\\n+\tgo/net/http/filetransport.go \\\n+\tgo/net/http/fs.go \\\n+\tgo/net/http/header.go \\\n+\tgo/net/http/lex.go \\\n+\tgo/net/http/request.go \\\n+\tgo/net/http/response.go \\\n+\tgo/net/http/server.go \\\n+\tgo/net/http/sniff.go \\\n+\tgo/net/http/status.go \\\n+\tgo/net/http/transfer.go \\\n+\tgo/net/http/transport.go\n+go_net_mail_files = \\\n+\tgo/net/mail/message.go\n+go_net_smtp_files = \\\n+\tgo/net/smtp/auth.go \\\n+\tgo/net/smtp/smtp.go\n go_net_textproto_files = \\\n \tgo/net/textproto/header.go \\\n \tgo/net/textproto/pipeline.go \\\n \tgo/net/textproto/reader.go \\\n \tgo/net/textproto/textproto.go \\\n \tgo/net/textproto/writer.go\n+go_net_url_files = \\\n+\tgo/net/url/url.go\n+\n+go_net_http_cgi_files = \\\n+\tgo/net/http/cgi/child.go \\\n+\tgo/net/http/cgi/host.go\n+go_net_http_fcgi_files = \\\n+\tgo/net/http/fcgi/child.go \\\n+\tgo/net/http/fcgi/fcgi.go\n+go_net_http_httptest_files = \\\n+\tgo/net/http/httptest/recorder.go \\\n+\tgo/net/http/httptest/server.go\n+go_net_http_pprof_files = \\\n+\tgo/net/http/pprof/pprof.go\n+go_net_http_httputil_files = \\\n+\tgo/net/http/httputil/chunked.go \\\n+\tgo/net/http/httputil/dump.go \\\n+\tgo/net/http/httputil/persist.go \\\n+\tgo/net/http/httputil/reverseproxy.go\n+\n \n go_old_netchan_files = \\\n \tgo/old/netchan/common.go \\\n@@ -1381,6 +1373,10 @@ go_old_template_files = \\\n \tgo/old/template/format.go \\\n \tgo/old/template/parse.go\n \n+go_os_exec_files = \\\n+\tgo/os/exec/exec.go \\\n+\tgo/os/exec/lp_unix.go\n+\n go_os_user_files = \\\n \tgo/os/user/user.go \\\n \tgo/os/user/lookup_unix.go\n@@ -1401,20 +1397,29 @@ go_regexp_syntax_files = \\\n \tgo/regexp/syntax/regexp.go \\\n \tgo/regexp/syntax/simplify.go\n \n-go_rpc_jsonrpc_files = \\\n-\tgo/rpc/jsonrpc/client.go \\\n-\tgo/rpc/jsonrpc/server.go\n+go_net_rpc_jsonrpc_files = \\\n+\tgo/net/rpc/jsonrpc/client.go \\\n+\tgo/net/rpc/jsonrpc/server.go\n \n go_runtime_debug_files = \\\n \tgo/runtime/debug/stack.go\n go_runtime_pprof_files = \\\n \tgo/runtime/pprof/pprof.go\n \n-go_template_parse_files = \\\n-\tgo/template/parse/lex.go \\\n-\tgo/template/parse/node.go \\\n-\tgo/template/parse/parse.go \\\n-\tgo/template/parse/set.go\n+go_text_tabwriter_files = \\\n+\tgo/text/tabwriter/tabwriter.go\n+go_text_template_files = \\\n+\tgo/text/template/doc.go \\\n+\tgo/text/template/exec.go \\\n+\tgo/text/template/funcs.go \\\n+\tgo/text/template/helper.go \\\n+\tgo/text/template/parse.go \\\n+\tgo/text/template/set.go\n+go_text_template_parse_files = \\\n+\tgo/text/template/parse/lex.go \\\n+\tgo/text/template/parse/node.go \\\n+\tgo/text/template/parse/parse.go \\\n+\tgo/text/template/parse/set.go\n \n go_sync_atomic_files = \\\n \tgo/sync/atomic/doc.go\n@@ -1430,6 +1435,15 @@ go_testing_quick_files = \\\n go_testing_script_files = \\\n \tgo/testing/script/script.go\n \n+go_text_scanner_files = \\\n+\tgo/text/scanner/scanner.go\n+\n+go_unicode_utf16_files = \\\n+\tgo/unicode/utf16/utf16.go\n+go_unicode_utf8_files = \\\n+\tgo/unicode/utf8/string.go \\\n+\tgo/unicode/utf8/utf8.go\n+\n # Define Syscall and Syscall6.\n if LIBGO_IS_RTEMS\n syscall_syscall_file = go/syscall/syscall_stubs.go\n@@ -1619,56 +1633,35 @@ os_lib_inotify_lo =\n endif\n \n libgo_go_objs = \\\n-\tasn1/asn1.lo \\\n-\tbig/big.lo \\\n \tbufio/bufio.lo \\\n \tbytes/bytes.lo \\\n \tbytes/index.lo \\\n-\tcmath/cmath.lo \\\n \tcrypto/crypto.lo \\\n-\tcsv/csv.lo \\\n \terrors/errors.lo \\\n-\texec/exec.lo \\\n \texpvar/expvar.lo \\\n \tflag/flag.lo \\\n \tfmt/fmt.lo \\\n-\tgob/gob.lo \\\n \thash/hash.lo \\\n \thtml/html.lo \\\n-\thttp/http.lo \\\n \timage/image.lo \\\n \tio/io.lo \\\n-\tjson/json.lo \\\n \tlog/log.lo \\\n \tmath/math.lo \\\n-\tmail/mail.lo \\\n-\tmime/mime.lo \\\n \tnet/net.lo \\\n+\tos/exec.lo \\\n \tos/os.lo \\\n \tpatch/patch.lo \\\n \tpath/path.lo \\\n-\trand/rand.lo \\\n \treflect/reflect.lo \\\n \tregexp/regexp.lo \\\n-\trpc/rpc.lo \\\n \truntime/runtime.lo \\\n-\tscanner/scanner.lo \\\n-\tsmtp/smtp.lo \\\n \tsort/sort.lo \\\n \tstrconv/strconv.lo \\\n \tstrings/strings.lo \\\n \tsync/sync.lo \\\n-\tsyslog/syslog.lo \\\n-\tsyslog/syslog_c.lo \\\n-\ttabwriter/tabwriter.lo \\\n-\ttemplate/template.lo \\\n \ttime/time.lo \\\n \tunicode/unicode.lo \\\n-\turl/url.lo \\\n-\tutf16/utf16.lo \\\n-\tutf8/utf8.lo \\\n \twebsocket/websocket.lo \\\n-\txml/xml.lo \\\n \tarchive/tar.lo \\\n \tarchive/zip.lo \\\n \tcompress/bzip2.lo \\\n@@ -1717,12 +1710,17 @@ libgo_go_objs = \\\n \tdebug/macho.lo \\\n \tdebug/pe.lo \\\n \tencoding/ascii85.lo \\\n+\tencoding/asn1.lo \\\n \tencoding/base32.lo \\\n \tencoding/base64.lo \\\n \tencoding/binary.lo \\\n+\tencoding/csv.lo \\\n \tencoding/git85.lo \\\n+\tencoding/gob.lo \\\n \tencoding/hex.lo \\\n+\tencoding/json.lo \\\n \tencoding/pem.lo \\\n+\tencoding/xml.lo \\\n \texp/ebnf.lo \\\n \texp/gui.lo \\\n \texp/norm.lo \\\n@@ -1733,7 +1731,7 @@ libgo_go_objs = \\\n \texp/types.lo \\\n \texp/gui/x11.lo \\\n \texp/sql/driver.lo \\\n-\texp/template/html.lo \\\n+\thtml/template.lo \\\n \tgo/ast.lo \\\n \tgo/build.lo \\\n \tgo/doc.lo \\\n@@ -1745,10 +1743,11 @@ libgo_go_objs = \\\n \thash/crc32.lo \\\n \thash/crc64.lo \\\n \thash/fnv.lo \\\n-\thttp/cgi.lo \\\n-\thttp/fcgi.lo \\\n-\thttp/httptest.lo \\\n-\thttp/pprof.lo \\\n+\tnet/http/cgi.lo \\\n+\tnet/http/fcgi.lo \\\n+\tnet/http/httptest.lo \\\n+\tnet/http/httputil.lo \\\n+\tnet/http/pprof.lo \\\n \timage/bmp.lo \\\n \timage/color.lo \\\n \timage/draw.lo \\\n@@ -1759,9 +1758,20 @@ libgo_go_objs = \\\n \timage/ycbcr.lo \\\n \tindex/suffixarray.lo \\\n \tio/ioutil.lo \\\n+\tlog/syslog.lo \\\n+\tlog/syslog/syslog_c.lo \\\n+\tmath/big.lo \\\n+\tmath/cmplx.lo \\\n+\tmath/rand.lo \\\n+\tmime/mime.lo \\\n \tmime/multipart.lo \\\n \tnet/dict.lo \\\n+\tnet/http.lo \\\n+\tnet/mail.lo \\\n+\tnet/rpc.lo \\\n+\tnet/smtp.lo \\\n \tnet/textproto.lo \\\n+\tnet/url.lo \\\n \told/netchan.lo \\\n \told/regexp.lo \\\n \told/template.lo \\\n@@ -1770,19 +1780,24 @@ libgo_go_objs = \\\n \tos/signal.lo \\\n \tpath/filepath.lo \\\n \tregexp/syntax.lo \\\n-\trpc/jsonrpc.lo \\\n+\tnet/rpc/jsonrpc.lo \\\n \truntime/debug.lo \\\n \truntime/pprof.lo \\\n \tsync/atomic.lo \\\n \tsync/atomic_c.lo \\\n \tsyscall/syscall.lo \\\n \tsyscall/errno.lo \\\n \tsyscall/wait.lo \\\n-\ttemplate/parse.lo \\\n+\ttext/scanner.lo \\\n+\ttext/tabwriter.lo \\\n+\ttext/template.lo \\\n+\ttext/template/parse.lo \\\n \ttesting/testing.lo \\\n \ttesting/iotest.lo \\\n \ttesting/quick.lo \\\n-\ttesting/script.lo\n+\ttesting/script.lo \\\n+\tunicode/utf16.lo \\\n+\tunicode/utf8.lo\n \n libgo_la_SOURCES = $(runtime_files)\n \n@@ -1871,36 +1886,23 @@ CHECK_DEPS = libgo.la libgobegin.a \\\n \t$(toolexeclibgoexp_DATA) \\\n \t$(toolexeclibgogo_DATA) \\\n \t$(toolexeclibgohash_DATA) \\\n-\t$(toolexeclibgohttp_DATA) \\\n \t$(toolexeclibgoimage_DATA) \\\n \t$(toolexeclibgoindex_DATA) \\\n \t$(toolexeclibgoio_DATA) \\\n+\t$(toolexeclibgolog_DATA) \\\n+\t$(toolexeclibgomath_DATA) \\\n \t$(toolexeclibgomime_DATA) \\\n \t$(toolexeclibgonet_DATA) \\\n+\t$(toolexeclibgonethttp_DATA) \\\n \t$(toolexeclibgoos_DATA) \\\n \t$(toolexeclibgopath_DATA) \\\n \t$(toolexeclibgorpc_DATA) \\\n \t$(toolexeclibgoruntime_DATA) \\\n \t$(toolexeclibgosync_DATA) \\\n-\t$(toolexeclibgotesting_DATA)\n-\n-@go_include@ asn1/asn1.lo.dep\n-asn1/asn1.lo.dep: $(go_asn1_files)\n-\t$(BUILDDEPS)\n-asn1/asn1.lo: $(go_asn1_files)\n-\t$(BUILDPACKAGE)\n-asn1/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: asn1/check\n-\n-@go_include@ big/big.lo.dep\n-big/big.lo.dep: $(go_big_files)\n-\t$(BUILDDEPS)\n-big/big.lo: $(go_big_files)\n-\t$(BUILDPACKAGE)\n-big/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: big/check\n+\t$(toolexeclibgotesting_DATA) \\\n+\t$(toolexeclibgotext_DATA) \\\n+\t$(toolexeclibgotexttemplate_DATA) \\\n+\t$(toolexeclibgounicode_DATA)\n \n @go_include@ bufio/bufio.lo.dep\n bufio/bufio.lo.dep: $(go_bufio_files)\n@@ -1922,15 +1924,6 @@ bytes/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: bytes/check\n \n-@go_include@ cmath/cmath.lo.dep\n-cmath/cmath.lo.dep: $(go_cmath_files)\n-\t$(BUILDDEPS)\n-cmath/cmath.lo: $(go_cmath_files)\n-\t$(BUILDPACKAGE)\n-cmath/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: cmath/check\n-\n @go_include@ crypto/crypto.lo.dep\n crypto/crypto.lo.dep: $(go_crypto_files)\n \t$(BUILDDEPS)\n@@ -1940,15 +1933,6 @@ crypto/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: crypto/check\n \n-@go_include@ csv/csv.lo.dep\n-csv/csv.lo.dep: $(go_csv_files)\n-\t$(BUILDDEPS)\n-csv/csv.lo: $(go_csv_files)\n-\t$(BUILDPACKAGE)\n-csv/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: csv/check\n-\n @go_include@ errors/errors.lo.dep\n errors/errors.lo.dep: $(go_errors_files)\n \t$(BUILDDEPS)\n@@ -1958,15 +1942,6 @@ errors/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: errors/check\n \n-@go_include@ exec/exec.lo.dep\n-exec/exec.lo.dep: $(go_exec_files)\n-\t$(BUILDDEPS)\n-exec/exec.lo: $(go_exec_files)\n-\t$(BUILDPACKAGE)\n-exec/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: exec/check\n-\n @go_include@ expvar/expvar.lo.dep\n expvar/expvar.lo.dep: $(go_expvar_files)\n \t$(BUILDDEPS)\n@@ -1994,15 +1969,6 @@ fmt/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: fmt/check\n \n-@go_include@ gob/gob.lo.dep\n-gob/gob.lo.dep: $(go_gob_files)\n-\t$(BUILDDEPS)\n-gob/gob.lo: $(go_gob_files)\n-\t$(BUILDPACKAGE)\n-gob/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: gob/check\n-\n @go_include@ hash/hash.lo.dep\n hash/hash.lo.dep: $(go_hash_files)\n \t$(BUILDDEPS)\n@@ -2021,15 +1987,6 @@ html/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: html/check\n \n-@go_include@ http/http.lo.dep\n-http/http.lo.dep: $(go_http_files)\n-\t$(BUILDDEPS)\n-http/http.lo: $(go_http_files)\n-\t$(BUILDPACKAGE)\n-http/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: http/check\n-\n @go_include@ image/image.lo.dep\n image/image.lo.dep: $(go_image_files)\n \t$(BUILDDEPS)\n@@ -2048,15 +2005,6 @@ io/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: io/check\n \n-@go_include@ json/json.lo.dep\n-json/json.lo.dep: $(go_json_files)\n-\t$(BUILDDEPS)\n-json/json.lo: $(go_json_files)\n-\t$(BUILDPACKAGE)\n-json/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: json/check\n-\n @go_include@ log/log.lo.dep\n log/log.lo.dep: $(go_log_files)\n \t$(BUILDDEPS)\n@@ -2075,15 +2023,6 @@ math/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: math/check\n \n-@go_include@ mail/mail.lo.dep\n-mail/mail.lo.dep: $(go_mail_files)\n-\t$(BUILDDEPS)\n-mail/mail.lo: $(go_mail_files)\n-\t$(BUILDPACKAGE)\n-mail/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: mail/check\n-\n @go_include@ mime/mime.lo.dep\n mime/mime.lo.dep: $(go_mime_files)\n \t$(BUILDDEPS)\n@@ -2133,15 +2072,6 @@ path/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: path/check\n \n-@go_include@ rand/rand.lo.dep\n-rand/rand.lo.dep: $(go_rand_files)\n-\t$(BUILDDEPS)\n-rand/rand.lo: $(go_rand_files)\n-\t$(BUILDPACKAGE)\n-rand/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: rand/check\n-\n @go_include@ reflect/reflect.lo.dep\n reflect/reflect.lo.dep: $(go_reflect_files)\n \t$(BUILDDEPS)\n@@ -2160,15 +2090,6 @@ regexp/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: regexp/check\n \n-@go_include@ rpc/rpc.lo.dep\n-rpc/rpc.lo.dep: $(go_rpc_files)\n-\t$(BUILDDEPS)\n-rpc/rpc.lo: $(go_rpc_files)\n-\t$(BUILDPACKAGE)\n-rpc/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: rpc/check\n-\n @go_include@ runtime/runtime.lo.dep\n runtime/runtime.lo.dep: $(go_runtime_files)\n \t$(BUILDDEPS)\n@@ -2178,23 +2099,15 @@ runtime/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: runtime/check\n \n-@go_include@ scanner/scanner.lo.dep\n-scanner/scanner.lo.dep: $(go_scanner_files)\n-\t$(BUILDDEPS)\n-scanner/scanner.lo: $(go_scanner_files)\n-\t$(BUILDPACKAGE)\n-scanner/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: scanner/check\n-\n-@go_include@ smtp/smtp.lo.dep\n-smtp/smtp.lo.dep: $(go_smtp_files)\n+@go_include@ text/scanner.lo.dep\n+text/scanner.lo.dep: $(go_text_scanner_files)\n \t$(BUILDDEPS)\n-smtp/smtp.lo: $(go_smtp_files)\n+text/scanner.lo: $(go_text_scanner_files)\n \t$(BUILDPACKAGE)\n-smtp/check: $(CHECK_DEPS)\n+text/scanner/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) text/scanner\n \t@$(CHECK)\n-.PHONY: smtp/check\n+.PHONY: text/scanner/check\n \n @go_include@ sort/sort.lo.dep\n sort/sort.lo.dep: $(go_sort_files)\n@@ -2232,35 +2145,6 @@ sync/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: sync/check\n \n-@go_include@ syslog/syslog.lo.dep\n-syslog/syslog.lo.dep: $(go_syslog_files)\n-\t$(BUILDDEPS)\n-syslog/syslog.lo: $(go_syslog_files)\n-\t$(BUILDPACKAGE)\n-syslog/syslog_c.lo: $(go_syslog_c_files) syslog/syslog.lo\n-\t$(LTCOMPILE) -c -o $@ $(srcdir)/go/syslog/syslog_c.c\n-syslog/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: syslog/check\n-\n-@go_include@ tabwriter/tabwriter.lo.dep\n-tabwriter/tabwriter.lo.dep: $(go_tabwriter_files)\n-\t$(BUILDDEPS)\n-tabwriter/tabwriter.lo: $(go_tabwriter_files)\n-\t$(BUILDPACKAGE)\n-tabwriter/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: tabwriter/check\n-\n-@go_include@ template/template.lo.dep\n-template/template.lo.dep: $(go_template_files)\n-\t$(BUILDDEPS)\n-template/template.lo: $(go_template_files)\n-\t$(BUILDPACKAGE)\n-template/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: template/check\n-\n @go_include@ testing/testing.lo.dep\n testing/testing.lo.dep: $(go_testing_files)\n \t$(BUILDDEPS)\n@@ -2288,33 +2172,6 @@ unicode/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: unicode/check\n \n-@go_include@ url/url.lo.dep\n-url/url.lo.dep: $(go_url_files)\n-\t$(BUILDDEPS)\n-url/url.lo: $(go_url_files)\n-\t$(BUILDPACKAGE)\n-url/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: url/check\n-\n-@go_include@ utf16/utf16.lo.dep\n-utf16/utf16.lo.dep: $(go_utf16_files)\n-\t$(BUILDDEPS)\n-utf16/utf16.lo: $(go_utf16_files)\n-\t$(BUILDPACKAGE)\n-utf16/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: utf16/check\n-\n-@go_include@ utf8/utf8.lo.dep\n-utf8/utf8.lo.dep: $(go_utf8_files)\n-\t$(BUILDDEPS)\n-utf8/utf8.lo: $(go_utf8_files)\n-\t$(BUILDPACKAGE)\n-utf8/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: utf8/check\n-\n @go_include@ websocket/websocket.lo.dep\n websocket/websocket.lo.dep: $(go_websocket_files)\n \t$(BUILDDEPS)\n@@ -2324,15 +2181,6 @@ websocket/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: websocket/check\n \n-@go_include@ xml/xml.lo.dep\n-xml/xml.lo.dep: $(go_xml_files)\n-\t$(BUILDDEPS)\n-xml/xml.lo: $(go_xml_files)\n-\t$(BUILDPACKAGE)\n-xml/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: xml/check\n-\n @go_include@ archive/tar.lo.dep\n archive/tar.lo.dep: $(go_archive_tar_files)\n \t$(BUILDDEPS)\n@@ -2803,6 +2651,16 @@ debug/pe/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: debug/pe/check\n \n+@go_include@ encoding/asn1.lo.dep\n+encoding/asn1.lo.dep: $(go_encoding_asn1_files)\n+\t$(BUILDDEPS)\n+encoding/asn1.lo: $(go_encoding_asn1_files)\n+\t$(BUILDPACKAGE)\n+encoding/asn1/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) encoding/asn1\n+\t@$(CHECK)\n+.PHONY: encoding/asn1/check\n+\n @go_include@ encoding/ascii85.lo.dep\n encoding/ascii85.lo.dep: $(go_encoding_ascii85_files)\n \t$(BUILDDEPS)\n@@ -2843,6 +2701,16 @@ encoding/binary/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: encoding/binary/check\n \n+@go_include@ encoding/csv.lo.dep\n+encoding/csv.lo.dep: $(go_encoding_csv_files)\n+\t$(BUILDDEPS)\n+encoding/csv.lo: $(go_encoding_csv_files)\n+\t$(BUILDPACKAGE)\n+encoding/csv/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) encoding/csv\n+\t@$(CHECK)\n+.PHONY: encoding/csv/check\n+\n @go_include@ encoding/git85.lo.dep\n encoding/git85.lo.dep: $(go_encoding_git85_files)\n \t$(BUILDDEPS)\n@@ -2853,6 +2721,16 @@ encoding/git85/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: encoding/git85/check\n \n+@go_include@ encoding/gob.lo.dep\n+encoding/gob.lo.dep: $(go_encoding_gob_files)\n+\t$(BUILDDEPS)\n+encoding/gob.lo: $(go_encoding_gob_files)\n+\t$(BUILDPACKAGE)\n+encoding/gob/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) encoding/gob\n+\t@$(CHECK)\n+.PHONY: encoding/gob/check\n+\n @go_include@ encoding/hex.lo.dep\n encoding/hex.lo.dep: $(go_encoding_hex_files)\n \t$(BUILDDEPS)\n@@ -2863,6 +2741,16 @@ encoding/hex/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: encoding/hex/check\n \n+@go_include@ encoding/json.lo.dep\n+encoding/json.lo.dep: $(go_encoding_json_files)\n+\t$(BUILDDEPS)\n+encoding/json.lo: $(go_encoding_json_files)\n+\t$(BUILDPACKAGE)\n+encoding/json/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) encoding/json\n+\t@$(CHECK)\n+.PHONY: encoding/json/check\n+\n @go_include@ encoding/pem.lo.dep\n encoding/pem.lo.dep: $(go_encoding_pem_files)\n \t$(BUILDDEPS)\n@@ -2873,6 +2761,16 @@ encoding/pem/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: encoding/pem/check\n \n+@go_include@ encoding/xml.lo.dep\n+encoding/xml.lo.dep: $(go_encoding_xml_files)\n+\t$(BUILDDEPS)\n+encoding/xml.lo: $(go_encoding_xml_files)\n+\t$(BUILDPACKAGE)\n+encoding/xml/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) encoding/xml\n+\t@$(CHECK)\n+.PHONY: encoding/xml/check\n+\n @go_include@ exp/ebnf.lo.dep\n exp/ebnf.lo.dep: $(go_exp_ebnf_files)\n \t$(BUILDDEPS)\n@@ -2983,15 +2881,15 @@ exp/sql/driver/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: exp/sql/driver/check\n \n-@go_include@ exp/template/html.lo.dep\n-exp/template/html.lo.dep: $(go_exp_template_html_files)\n+@go_include@ html/template.lo.dep\n+html/template.lo.dep: $(go_html_template_files)\n \t$(BUILDDEPS)\n-exp/template/html.lo: $(go_exp_template_html_files)\n+html/template.lo: $(go_html_template_files)\n \t$(BUILDPACKAGE)\n-exp/template/html/check: $(CHECK_DEPS)\n-\t@$(MKDIR_P) exp/template/html\n+html/template/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) html/template\n \t@$(CHECK)\n-.PHONY: exp/template/html/check\n+.PHONY: html/template/check\n \n @go_include@ go/ast.lo.dep\n go/ast.lo.dep: $(go_go_ast_files)\n@@ -3112,46 +3010,6 @@ hash/fnv/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: hash/fnv/check\n \n-@go_include@ http/cgi.lo.dep\n-http/cgi.lo.dep: $(go_http_cgi_files)\n-\t$(BUILDDEPS)\n-http/cgi.lo: $(go_http_cgi_files)\n-\t$(BUILDPACKAGE)\n-http/cgi/check: $(CHECK_DEPS)\n-\t@$(MKDIR_P) http/cgi\n-\t@$(CHECK)\n-.PHONY: http/cgi/check\n-\n-@go_include@ http/fcgi.lo.dep\n-http/fcgi.lo.dep: $(go_http_fcgi_files)\n-\t$(BUILDDEPS)\n-http/fcgi.lo: $(go_http_fcgi_files)\n-\t$(BUILDPACKAGE)\n-http/fcgi/check: $(CHECK_DEPS)\n-\t@$(MKDIR_P) http/fcgi\n-\t@$(CHECK)\n-.PHONY: http/fcgi/check\n-\n-@go_include@ http/httptest.lo.dep\n-http/httptest.lo.dep: $(go_http_httptest_files)\n-\t$(BUILDDEPS)\n-http/httptest.lo: $(go_http_httptest_files)\n-\t$(BUILDPACKAGE)\n-http/httptest/check: $(CHECK_DEPS)\n-\t@$(MKDIR_P) http/httptest\n-\t@$(CHECK)\n-.PHONY: http/httptest/check\n-\n-@go_include@ http/pprof.lo.dep\n-http/pprof.lo.dep: $(go_http_pprof_files)\n-\t$(BUILDDEPS)\n-http/pprof.lo: $(go_http_pprof_files)\n-\t$(BUILDPACKAGE)\n-http/pprof/check: $(CHECK_DEPS)\n-\t@$(MKDIR_P) http/pprof\n-\t@$(CHECK)\n-.PHONY: http/pprof/check\n-\n @go_include@ image/bmp.lo.dep\n image/bmp.lo.dep: $(go_image_bmp_files)\n \t$(BUILDDEPS)\n@@ -3252,6 +3110,48 @@ io/ioutil/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: io/ioutil/check\n \n+@go_include@ log/syslog.lo.dep\n+log/syslog.lo.dep: $(go_log_syslog_files)\n+\t$(BUILDDEPS)\n+log/syslog.lo: $(go_log_syslog_files)\n+\t$(BUILDPACKAGE)\n+log/syslog/syslog_c.lo: $(go_syslog_c_files) log/syslog.lo\n+\t$(LTCOMPILE) -c -o $@ $(srcdir)/go/log/syslog/syslog_c.c\n+log/syslog/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) log/syslog\n+\t@$(CHECK)\n+.PHONY: log/syslog/check\n+\n+@go_include@ math/big.lo.dep\n+math/big.lo.dep: $(go_math_big_files)\n+\t$(BUILDDEPS)\n+math/big.lo: $(go_math_big_files)\n+\t$(BUILDPACKAGE)\n+math/big/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) math/big\n+\t@$(CHECK)\n+.PHONY: math/big/check\n+\n+@go_include@ math/cmplx.lo.dep\n+math/cmplx.lo.dep: $(go_math_cmplx_files)\n+\t$(BUILDDEPS)\n+math/cmplx.lo: $(go_math_cmplx_files)\n+\t$(BUILDPACKAGE)\n+math/cmplx/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) math/cmplx\n+\t@$(CHECK)\n+.PHONY: math/cmplx/check\n+\n+@go_include@ math/rand.lo.dep\n+math/rand.lo.dep: $(go_math_rand_files)\n+\t$(BUILDDEPS)\n+math/rand.lo: $(go_math_rand_files)\n+\t$(BUILDPACKAGE)\n+math/rand/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) math/rand\n+\t@$(CHECK)\n+.PHONY: math/rand/check\n+\n @go_include@ mime/multipart.lo.dep\n mime/multipart.lo.dep: $(go_mime_multipart_files)\n \t$(BUILDDEPS)\n@@ -3268,6 +3168,56 @@ net/dict.lo.dep: $(go_net_dict_files)\n net/dict.lo: $(go_net_dict_files)\n \t$(BUILDPACKAGE)\n \n+@go_include@ net/http.lo.dep\n+net/http.lo.dep: $(go_net_http_files)\n+\t$(BUILDDEPS)\n+net/http.lo: $(go_net_http_files)\n+\t$(BUILDPACKAGE)\n+net/http/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) net/http\n+\t@$(CHECK)\n+.PHONY: net/http/check\n+\n+@go_include@ net/mail.lo.dep\n+net/mail.lo.dep: $(go_net_mail_files)\n+\t$(BUILDDEPS)\n+net/mail.lo: $(go_net_mail_files)\n+\t$(BUILDPACKAGE)\n+net/mail/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) net/mail\n+\t@$(CHECK)\n+.PHONY: net/mail/check\n+\n+@go_include@ net/rpc.lo.dep\n+net/rpc.lo.dep: $(go_net_rpc_files)\n+\t$(BUILDDEPS)\n+net/rpc.lo: $(go_net_rpc_files)\n+\t$(BUILDPACKAGE)\n+net/rpc/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) net/rpc\n+\t@$(CHECK)\n+.PHONY: net/rpc/check\n+\n+@go_include@ net/smtp.lo.dep\n+net/smtp.lo.dep: $(go_net_smtp_files)\n+\t$(BUILDDEPS)\n+net/smtp.lo: $(go_net_smtp_files)\n+\t$(BUILDPACKAGE)\n+net/smtp/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) net/smtp\n+\t@$(CHECK)\n+.PHONY: net/smtp/check\n+\n+@go_include@ net/url.lo.dep\n+net/url.lo.dep: $(go_net_url_files)\n+\t$(BUILDDEPS)\n+net/url.lo: $(go_net_url_files)\n+\t$(BUILDPACKAGE)\n+net/url/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) net/url\n+\t@$(CHECK)\n+.PHONY: net/url/check\n+\n @go_include@ net/textproto.lo.dep\n net/textproto.lo.dep: $(go_net_textproto_files)\n \t$(BUILDDEPS)\n@@ -3278,6 +3228,66 @@ net/textproto/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: net/textproto/check\n \n+@go_include@ net/http/cgi.lo.dep\n+net/http/cgi.lo.dep: $(go_net_http_cgi_files)\n+\t$(BUILDDEPS)\n+net/http/cgi.lo: $(go_net_http_cgi_files)\n+\t$(BUILDPACKAGE)\n+net/http/cgi/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) net/http/cgi\n+\t@$(CHECK)\n+.PHONY: net/http/cgi/check\n+\n+@go_include@ net/http/fcgi.lo.dep\n+net/http/fcgi.lo.dep: $(go_net_http_fcgi_files)\n+\t$(BUILDDEPS)\n+net/http/fcgi.lo: $(go_net_http_fcgi_files)\n+\t$(BUILDPACKAGE)\n+net/http/fcgi/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) net/http/fcgi\n+\t@$(CHECK)\n+.PHONY: net/http/fcgi/check\n+\n+@go_include@ net/http/httptest.lo.dep\n+net/http/httptest.lo.dep: $(go_net_http_httptest_files)\n+\t$(BUILDDEPS)\n+net/http/httptest.lo: $(go_net_http_httptest_files)\n+\t$(BUILDPACKAGE)\n+net/http/httptest/check: $(check_deps)\n+\t@$(MKDIR_P) net/http/httptest\n+\t@$(CHECK)\n+.PHONY: net/http/httptest/check\n+\n+@go_include@ net/http/httputil.lo.dep\n+net/http/httputil.lo.dep: $(go_net_http_httputil_files)\n+\t$(BUILDDEPS)\n+net/http/httputil.lo: $(go_net_http_httputil_files)\n+\t$(BUILDPACKAGE)\n+net/http/httputil/check: $(check_deps)\n+\t@$(MKDIR_P) net/http/httputil\n+\t@$(CHECK)\n+.PHONY: net/http/httputil/check\n+\n+@go_include@ net/http/pprof.lo.dep\n+net/http/pprof.lo.dep: $(go_net_http_pprof_files)\n+\t$(BUILDDEPS)\n+net/http/pprof.lo: $(go_net_http_pprof_files)\n+\t$(BUILDPACKAGE)\n+net/http/pprof/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) net/http/pprof\n+\t@$(CHECK)\n+.PHONY: net/http/pprof/check\n+\n+@go_include@ net/rpc/jsonrpc.lo.dep\n+net/rpc/jsonrpc.lo.dep: $(go_net_rpc_jsonrpc_files)\n+\t$(BUILDDEPS)\n+net/rpc/jsonrpc.lo: $(go_net_rpc_jsonrpc_files)\n+\t$(BUILDPACKAGE)\n+net/rpc/jsonrpc/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) net/rpc/jsonrpc\n+\t@$(CHECK)\n+.PHONY: net/rpc/jsonrpc/check\n+\n @go_include@ old/netchan.lo.dep\n old/netchan.lo.dep: $(go_old_netchan_files)\n \t$(BUILDDEPS)\n@@ -3308,6 +3318,16 @@ old/template/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: old/template/check\n \n+@go_include@ os/exec.lo.dep\n+os/exec.lo.dep: $(go_os_exec_files)\n+\t$(BUILDDEPS)\n+os/exec.lo: $(go_os_exec_files)\n+\t$(BUILDPACKAGE)\n+os/exec/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) os/exec\n+\t@$(CHECK)\n+.PHONY: os/exec/check\n+\n @go_include@ os/user.lo.dep\n os/user.lo.dep: $(go_os_user_files)\n \t$(BUILDDEPS)\n@@ -3348,16 +3368,6 @@ regexp/syntax/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: regexp/syntax/check\n \n-@go_include@ rpc/jsonrpc.lo.dep\n-rpc/jsonrpc.lo.dep: $(go_rpc_jsonrpc_files)\n-\t$(BUILDDEPS)\n-rpc/jsonrpc.lo: $(go_rpc_jsonrpc_files)\n-\t$(BUILDPACKAGE)\n-rpc/jsonrpc/check: $(CHECK_DEPS)\n-\t@$(MKDIR_P) rpc/jsonrpc\n-\t@$(CHECK)\n-.PHONY: rpc/jsonrpc/check\n-\n @go_include@ runtime/debug.lo.dep\n runtime/debug.lo.dep: $(go_runtime_debug_files)\n \t$(BUILDDEPS)\n@@ -3390,15 +3400,34 @@ sync/atomic/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: sync/atomic/check\n \n-@go_include@ template/parse.lo.dep\n-template/parse.lo.dep: $(go_template_parse_files)\n+@go_include@ text/tabwriter.lo.dep\n+text/tabwriter.lo.dep: $(go_text_tabwriter_files)\n+\t$(BUILDDEPS)\n+text/tabwriter.lo: $(go_text_tabwriter_files)\n+\t$(BUILDPACKAGE)\n+text/tabwriter/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) text/tabwriter\n+\t@$(CHECK)\n+.PHONY: text/tabwriter/check\n+\n+@go_include@ text/template.lo.dep\n+text/template.lo.dep: $(go_text_template_files)\n \t$(BUILDDEPS)\n-template/parse.lo: $(go_template_parse_files)\n+text/template.lo: $(go_text_template_files)\n \t$(BUILDPACKAGE)\n-template/parse/check: $(CHECK_DEPS)\n-\t@$(MKDIR_P) template/parse\n+text/template/check: $(CHECK_DEPS)\n \t@$(CHECK)\n-.PHONY: template/parse/check\n+.PHONY: text/template/check\n+\n+@go_include@ text/template/parse.lo.dep\n+text/template/parse.lo.dep: $(go_text_template_parse_files)\n+\t$(BUILDDEPS)\n+text/template/parse.lo: $(go_text_template_parse_files)\n+\t$(BUILDPACKAGE)\n+text/template/parse/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) text/template/parse\n+\t@$(CHECK)\n+.PHONY: text/template/parse/check\n \n @go_include@ testing/iotest.lo.dep\n testing/iotest.lo.dep: $(go_testing_iotest_files)\n@@ -3430,6 +3459,26 @@ testing/script/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: testing/script/check\n \n+@go_include@ unicode/utf16.lo.dep\n+unicode/utf16.lo.dep: $(go_unicode_utf16_files)\n+\t$(BUILDDEPS)\n+unicode/utf16.lo: $(go_unicode_utf16_files)\n+\t$(BUILDPACKAGE)\n+unicode/utf16/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) unicode/utf16\n+\t@$(CHECK)\n+.PHONY: unicode/utf16/check\n+\n+@go_include@ unicode/utf8.lo.dep\n+unicode/utf8.lo.dep: $(go_unicode_utf8_files)\n+\t$(BUILDDEPS)\n+unicode/utf8.lo: $(go_unicode_utf8_files)\n+\t$(BUILDPACKAGE)\n+unicode/utf8/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) unicode/utf8\n+\t@$(CHECK)\n+.PHONY: unicode/utf8/check\n+\n @go_include@ syscall/syscall.lo.dep\n syscall/syscall.lo.dep: $(go_syscall_files)\n \t$(BUILDDEPS)\n@@ -3445,50 +3494,32 @@ BUILDGOX = \\\n \tf=`echo $< | sed -e 's/.lo$$/.o/'`; \\\n \t$(OBJCOPY) -j .go_export $$f $@.tmp && mv -f $@.tmp $@\n \n-asn1.gox: asn1/asn1.lo\n-\t$(BUILDGOX)\n-big.gox: big/big.lo\n-\t$(BUILDGOX)\n bufio.gox: bufio/bufio.lo\n \t$(BUILDGOX)\n bytes.gox: bytes/bytes.lo\n \t$(BUILDGOX)\n-cmath.gox: cmath/cmath.lo\n-\t$(BUILDGOX)\n crypto.gox: crypto/crypto.lo\n \t$(BUILDGOX)\n-csv.gox: csv/csv.lo\n-\t$(BUILDGOX)\n errors.gox: errors/errors.lo\n \t$(BUILDGOX)\n-exec.gox: exec/exec.lo\n-\t$(BUILDGOX)\n expvar.gox: expvar/expvar.lo\n \t$(BUILDGOX)\n flag.gox: flag/flag.lo\n \t$(BUILDGOX)\n fmt.gox: fmt/fmt.lo\n \t$(BUILDGOX)\n-gob.gox: gob/gob.lo\n-\t$(BUILDGOX)\n hash.gox: hash/hash.lo\n \t$(BUILDGOX)\n html.gox: html/html.lo\n \t$(BUILDGOX)\n-http.gox: http/http.lo\n-\t$(BUILDGOX)\n image.gox: image/image.lo\n \t$(BUILDGOX)\n io.gox: io/io.lo\n \t$(BUILDGOX)\n-json.gox: json/json.lo\n-\t$(BUILDGOX)\n log.gox: log/log.lo\n \t$(BUILDGOX)\n math.gox: math/math.lo\n \t$(BUILDGOX)\n-mail.gox: mail/mail.lo\n-\t$(BUILDGOX)\n mime.gox: mime/mime.lo\n \t$(BUILDGOX)\n net.gox: net/net.lo\n@@ -3499,20 +3530,12 @@ patch.gox: patch/patch.lo\n \t$(BUILDGOX)\n path.gox: path/path.lo\n \t$(BUILDGOX)\n-rand.gox: rand/rand.lo\n-\t$(BUILDGOX)\n reflect.gox: reflect/reflect.lo\n \t$(BUILDGOX)\n regexp.gox: regexp/regexp.lo\n \t$(BUILDGOX)\n-rpc.gox: rpc/rpc.lo\n-\t$(BUILDGOX)\n runtime.gox: runtime/runtime.lo\n \t$(BUILDGOX)\n-scanner.gox: scanner/scanner.lo\n-\t$(BUILDGOX)\n-smtp.gox: smtp/smtp.lo\n-\t$(BUILDGOX)\n sort.gox: sort/sort.lo\n \t$(BUILDGOX)\n strconv.gox: strconv/strconv.lo\n@@ -3521,30 +3544,16 @@ strings.gox: strings/strings.lo\n \t$(BUILDGOX)\n sync.gox: sync/sync.lo\n \t$(BUILDGOX)\n-syslog.gox: syslog/syslog.lo\n-\t$(BUILDGOX)\n syscall.gox: syscall/syscall.lo\n \t$(BUILDGOX)\n-tabwriter.gox: tabwriter/tabwriter.lo\n-\t$(BUILDGOX)\n-template.gox: template/template.lo\n-\t$(BUILDGOX)\n testing.gox: testing/testing.lo\n \t$(BUILDGOX)\n time.gox: time/time.lo\n \t$(BUILDGOX)\n unicode.gox: unicode/unicode.lo\n \t$(BUILDGOX)\n-url.gox: url/url.lo\n-\t$(BUILDGOX)\n-utf16.gox: utf16/utf16.lo\n-\t$(BUILDGOX)\n-utf8.gox: utf8/utf8.lo\n-\t$(BUILDGOX)\n websocket.gox: websocket/websocket.lo\n \t$(BUILDGOX)\n-xml.gox: xml/xml.lo\n-\t$(BUILDGOX)\n \n archive/tar.gox: archive/tar.lo\n \t$(BUILDGOX)\n@@ -3649,18 +3658,28 @@ debug/pe.gox: debug/pe.lo\n \n encoding/ascii85.gox: encoding/ascii85.lo\n \t$(BUILDGOX)\n+encoding/asn1.gox: encoding/asn1.lo\n+\t$(BUILDGOX)\n encoding/base32.gox: encoding/base32.lo\n \t$(BUILDGOX)\n encoding/base64.gox: encoding/base64.lo\n \t$(BUILDGOX)\n encoding/binary.gox: encoding/binary.lo\n \t$(BUILDGOX)\n+encoding/csv.gox: encoding/csv.lo\n+\t$(BUILDGOX)\n encoding/git85.gox: encoding/git85.lo\n \t$(BUILDGOX)\n+encoding/gob.gox: encoding/gob.lo\n+\t$(BUILDGOX)\n encoding/hex.gox: encoding/hex.lo\n \t$(BUILDGOX)\n+encoding/json.gox: encoding/json.lo\n+\t$(BUILDGOX)\n encoding/pem.gox: encoding/pem.lo\n \t$(BUILDGOX)\n+encoding/xml.gox: encoding/xml.lo\n+\t$(BUILDGOX)\n \n exp/ebnf.gox: exp/ebnf.lo\n \t$(BUILDGOX)\n@@ -3687,7 +3706,7 @@ exp/gui/x11.gox: exp/gui/x11.lo\n exp/sql/driver.gox: exp/sql/driver.lo\n \t$(BUILDGOX)\n \n-exp/template/html.gox: exp/template/html.lo\n+html/template.gox: html/template.lo\n \t$(BUILDGOX)\n \n go/ast.gox: go/ast.lo\n@@ -3714,15 +3733,6 @@ hash/crc64.gox: hash/crc64.lo\n hash/fnv.gox: hash/fnv.lo\n \t$(BUILDGOX)\n \n-http/cgi.gox: http/cgi.lo\n-\t$(BUILDGOX)\n-http/fcgi.gox: http/fcgi.lo\n-\t$(BUILDGOX)\n-http/httptest.gox: http/httptest.lo\n-\t$(BUILDGOX)\n-http/pprof.gox: http/pprof.lo\n-\t$(BUILDGOX)\n-\n image/bmp.gox: image/bmp.lo\n \t$(BUILDGOX)\n image/color.gox: image/color.lo\n@@ -3746,13 +3756,47 @@ index/suffixarray.gox: index/suffixarray.lo\n io/ioutil.gox: io/ioutil.lo\n \t$(BUILDGOX)\n \n+log/syslog.gox: log/syslog.lo\n+\t$(BUILDGOX)\n+\n+math/big.gox: math/big.lo\n+\t$(BUILDGOX)\n+math/cmplx.gox: math/cmplx.lo\n+\t$(BUILDGOX)\n+math/rand.gox: math/rand.lo\n+\t$(BUILDGOX)\n+\n mime/multipart.gox: mime/multipart.lo\n \t$(BUILDGOX)\n \n net/dict.gox: net/dict.lo\n \t$(BUILDGOX)\n+net/http.gox: net/http.lo\n+\t$(BUILDGOX)\n+net/mail.gox: net/mail.lo\n+\t$(BUILDGOX)\n+net/rpc.gox: net/rpc.lo\n+\t$(BUILDGOX)\n+net/smtp.gox: net/smtp.lo\n+\t$(BUILDGOX)\n net/textproto.gox: net/textproto.lo\n \t$(BUILDGOX)\n+net/url.gox: net/url.lo\n+\t$(BUILDGOX)\n+\n+net/http/cgi.gox: net/http/cgi.lo\n+\t$(BUILDGOX)\n+net/http/fcgi.gox: net/http/fcgi.lo\n+\t$(BUILDGOX)\n+net/http/httptest.gox: net/http/httptest.lo\n+\t$(BUILDGOX)\n+net/http/httputil.gox: net/http/httputil.lo\n+\t$(BUILDGOX)\n+net/http/pprof.gox: net/http/pprof.lo\n+\t$(BUILDGOX)\n+\n+net/rpc/jsonrpc.gox: net/rpc/jsonrpc.lo\n+\t$(BUILDGOX)\n \n old/netchan.gox: old/netchan.lo\n \t$(BUILDGOX)\n@@ -3761,6 +3805,8 @@ old/regexp.gox: old/regexp.lo\n old/template.gox: old/template.lo\n \t$(BUILDGOX)\n \n+os/exec.gox: os/exec.lo\n+\t$(BUILDGOX)\n os/user.gox: os/user.lo\n \t$(BUILDGOX)\n os/signal.gox: os/signal.lo\n@@ -3772,9 +3818,6 @@ path/filepath.gox: path/filepath.lo\n regexp/syntax.gox: regexp/syntax.lo\n \t$(BUILDGOX)\n \n-rpc/jsonrpc.gox: rpc/jsonrpc.lo\n-\t$(BUILDGOX)\n-\n runtime/debug.gox: runtime/debug.lo\n \t$(BUILDGOX)\n runtime/pprof.gox: runtime/pprof.lo\n@@ -3783,7 +3826,13 @@ runtime/pprof.gox: runtime/pprof.lo\n sync/atomic.gox: sync/atomic.lo\n \t$(BUILDGOX)\n \n-template/parse.gox: template/parse.lo\n+text/scanner.gox: text/scanner.lo\n+\t$(BUILDGOX)\n+text/tabwriter.gox: text/tabwriter.lo\n+\t$(BUILDGOX)\n+text/template.gox: text/template.lo\n+\t$(BUILDGOX)\n+text/template/parse.gox: text/template/parse.lo\n \t$(BUILDGOX)\n \n testing/iotest.gox: testing/iotest.lo\n@@ -3793,6 +3842,11 @@ testing/quick.gox: testing/quick.lo\n testing/script.gox: testing/script.lo\n \t$(BUILDGOX)\n \n+unicode/utf16.gox: unicode/utf16.lo\n+\t$(BUILDGOX)\n+unicode/utf8.gox: unicode/utf8.lo\n+\t$(BUILDGOX)\n+\n if LIBGO_IS_LINUX\n # exp_inotify_check = exp/inotify/check\n exp_inotify_check =\n@@ -3801,52 +3855,32 @@ exp_inotify_check =\n endif\n \n TEST_PACKAGES = \\\n-\tasn1/check \\\n-\tbig/check \\\n \tbufio/check \\\n \tbytes/check \\\n-\tcmath/check \\\n-\tcsv/check \\\n \terrors/check \\\n-\texec/check \\\n \texpvar/check \\\n \tflag/check \\\n \tfmt/check \\\n-\tgob/check \\\n \thtml/check \\\n-\thttp/check \\\n \timage/check \\\n \tio/check \\\n-\tjson/check \\\n \tlog/check \\\n \tmath/check \\\n-\tmail/check \\\n \tmime/check \\\n \tnet/check \\\n \tos/check \\\n \tpatch/check \\\n \tpath/check \\\n-\trand/check \\\n \treflect/check \\\n \tregexp/check \\\n-\trpc/check \\\n \truntime/check \\\n-\tscanner/check \\\n-\tsmtp/check \\\n \tsort/check \\\n \tstrconv/check \\\n \tstrings/check \\\n \tsync/check \\\n-\tsyslog/check \\\n-\ttabwriter/check \\\n-\ttemplate/check \\\n \ttime/check \\\n \tunicode/check \\\n-\turl/check \\\n-\tutf16/check \\\n-\tutf8/check \\\n \twebsocket/check \\\n-\txml/check \\\n \tarchive/tar/check \\\n \tarchive/zip/check \\\n \tcompress/bzip2/check \\\n@@ -3892,20 +3926,25 @@ TEST_PACKAGES = \\\n \tdebug/macho/check \\\n \tdebug/pe/check \\\n \tencoding/ascii85/check \\\n+\tencoding/asn1/check \\\n \tencoding/base32/check \\\n \tencoding/base64/check \\\n \tencoding/binary/check \\\n+\tencoding/csv/check \\\n \tencoding/git85/check \\\n+\tencoding/gob/check \\\n \tencoding/hex/check \\\n+\tencoding/json/check \\\n \tencoding/pem/check \\\n+\tencoding/xml/check \\\n \texp/ebnf/check \\\n \t$(exp_inotify_check) \\\n \texp/norm/check \\\n \texp/spdy/check \\\n \texp/sql/check \\\n \texp/ssh/check \\\n \texp/terminal/check \\\n-\texp/template/html/check \\\n+\thtml/template/check \\\n \tgo/ast/check \\\n \t$(go_build_check_omitted_since_it_calls_6g) \\\n \tgo/parser/check \\\n@@ -3917,29 +3956,45 @@ TEST_PACKAGES = \\\n \thash/crc32/check \\\n \thash/crc64/check \\\n \thash/fnv/check \\\n-\thttp/cgi/check \\\n-\thttp/fcgi/check \\\n \timage/draw/check \\\n \timage/jpeg/check \\\n \timage/png/check \\\n \timage/tiff/check \\\n \timage/ycbcr/check \\\n \tindex/suffixarray/check \\\n \tio/ioutil/check \\\n+\tlog/syslog/check \\\n+\tmath/big/check \\\n+\tmath/cmplx/check \\\n+\tmath/rand/check \\\n \tmime/multipart/check \\\n+\tnet/http/check \\\n+\tnet/http/cgi/check \\\n+\tnet/http/fcgi/check \\\n+\tnet/http/httputil/check \\\n+\tnet/mail/check \\\n+\tnet/rpc/check \\\n+\tnet/smtp/check \\\n \tnet/textproto/check \\\n+\tnet/url/check \\\n+\tnet/rpc/jsonrpc/check \\\n \told/netchan/check \\\n \told/regexp/check \\\n \told/template/check \\\n+\tos/exec/check \\\n \tos/user/check \\\n \tos/signal/check \\\n \tpath/filepath/check \\\n \tregexp/syntax/check \\\n-\trpc/jsonrpc/check \\\n \tsync/atomic/check \\\n-\ttemplate/parse/check \\\n+\ttext/scanner/check \\\n+\ttext/tabwriter/check \\\n+\ttext/template/check \\\n+\ttext/template/parse/check \\\n \ttesting/quick/check \\\n-\ttesting/script/check\n+\ttesting/script/check \\\n+\tunicode/utf16/check \\\n+\tunicode/utf8/check\n \n check: check-tail\n check-recursive: check-head"}, {"sha": "11b86509e6f7b055014d5930603d72a81596f568", "filename": "libgo/Makefile.in", "status": "modified", "additions": 872, "deletions": 710, "changes": 1582, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -104,24 +104,28 @@ am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\" \\\n \t\"$(DESTDIR)$(toolexeclibgoexpdir)\" \\\n \t\"$(DESTDIR)$(toolexeclibgoexpguidir)\" \\\n \t\"$(DESTDIR)$(toolexeclibgoexpsqldir)\" \\\n-\t\"$(DESTDIR)$(toolexeclibgoexptemplatedir)\" \\\n \t\"$(DESTDIR)$(toolexeclibgogodir)\" \\\n \t\"$(DESTDIR)$(toolexeclibgohashdir)\" \\\n-\t\"$(DESTDIR)$(toolexeclibgohttpdir)\" \\\n+\t\"$(DESTDIR)$(toolexeclibgohtmldir)\" \\\n \t\"$(DESTDIR)$(toolexeclibgoimagedir)\" \\\n \t\"$(DESTDIR)$(toolexeclibgoindexdir)\" \\\n \t\"$(DESTDIR)$(toolexeclibgoiodir)\" \\\n+\t\"$(DESTDIR)$(toolexeclibgologdir)\" \\\n+\t\"$(DESTDIR)$(toolexeclibgomathdir)\" \\\n \t\"$(DESTDIR)$(toolexeclibgomimedir)\" \\\n \t\"$(DESTDIR)$(toolexeclibgonetdir)\" \\\n+\t\"$(DESTDIR)$(toolexeclibgonethttpdir)\" \\\n+\t\"$(DESTDIR)$(toolexeclibgonetrpcdir)\" \\\n \t\"$(DESTDIR)$(toolexeclibgoolddir)\" \\\n \t\"$(DESTDIR)$(toolexeclibgoosdir)\" \\\n \t\"$(DESTDIR)$(toolexeclibgopathdir)\" \\\n \t\"$(DESTDIR)$(toolexeclibgoregexpdir)\" \\\n-\t\"$(DESTDIR)$(toolexeclibgorpcdir)\" \\\n \t\"$(DESTDIR)$(toolexeclibgoruntimedir)\" \\\n \t\"$(DESTDIR)$(toolexeclibgosyncdir)\" \\\n-\t\"$(DESTDIR)$(toolexeclibgotemplatedir)\" \\\n-\t\"$(DESTDIR)$(toolexeclibgotestingdir)\"\n+\t\"$(DESTDIR)$(toolexeclibgotestingdir)\" \\\n+\t\"$(DESTDIR)$(toolexeclibgotextdir)\" \\\n+\t\"$(DESTDIR)$(toolexeclibgotexttemplatedir)\" \\\n+\t\"$(DESTDIR)$(toolexeclibgounicodedir)\"\n LIBRARIES = $(toolexeclib_LIBRARIES)\n ARFLAGS = cru\n libgobegin_a_AR = $(AR) $(ARFLAGS)\n@@ -130,52 +134,54 @@ am_libgobegin_a_OBJECTS = go-main.$(OBJEXT)\n libgobegin_a_OBJECTS = $(am_libgobegin_a_OBJECTS)\n LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n am__DEPENDENCIES_1 =\n-am__DEPENDENCIES_2 = asn1/asn1.lo big/big.lo bufio/bufio.lo \\\n-\tbytes/bytes.lo bytes/index.lo cmath/cmath.lo crypto/crypto.lo \\\n-\tcsv/csv.lo errors/errors.lo exec/exec.lo expvar/expvar.lo \\\n-\tflag/flag.lo fmt/fmt.lo gob/gob.lo hash/hash.lo html/html.lo \\\n-\thttp/http.lo image/image.lo io/io.lo json/json.lo log/log.lo \\\n-\tmath/math.lo mail/mail.lo mime/mime.lo net/net.lo os/os.lo \\\n-\tpatch/patch.lo path/path.lo rand/rand.lo reflect/reflect.lo \\\n-\tregexp/regexp.lo rpc/rpc.lo runtime/runtime.lo \\\n-\tscanner/scanner.lo smtp/smtp.lo sort/sort.lo \\\n-\tstrconv/strconv.lo strings/strings.lo sync/sync.lo \\\n-\tsyslog/syslog.lo syslog/syslog_c.lo tabwriter/tabwriter.lo \\\n-\ttemplate/template.lo time/time.lo unicode/unicode.lo \\\n-\turl/url.lo utf16/utf16.lo utf8/utf8.lo websocket/websocket.lo \\\n-\txml/xml.lo archive/tar.lo archive/zip.lo compress/bzip2.lo \\\n-\tcompress/flate.lo compress/gzip.lo compress/lzw.lo \\\n-\tcompress/zlib.lo container/heap.lo container/list.lo \\\n-\tcontainer/ring.lo crypto/aes.lo crypto/bcrypt.lo \\\n-\tcrypto/blowfish.lo crypto/cast5.lo crypto/cipher.lo \\\n-\tcrypto/des.lo crypto/dsa.lo crypto/ecdsa.lo crypto/elliptic.lo \\\n-\tcrypto/hmac.lo crypto/md4.lo crypto/md5.lo crypto/ocsp.lo \\\n-\tcrypto/openpgp.lo crypto/rand.lo crypto/rc4.lo \\\n+am__DEPENDENCIES_2 = bufio/bufio.lo bytes/bytes.lo bytes/index.lo \\\n+\tcrypto/crypto.lo errors/errors.lo expvar/expvar.lo \\\n+\tflag/flag.lo fmt/fmt.lo hash/hash.lo html/html.lo \\\n+\timage/image.lo io/io.lo log/log.lo math/math.lo net/net.lo \\\n+\tos/exec.lo os/os.lo patch/patch.lo path/path.lo \\\n+\treflect/reflect.lo regexp/regexp.lo runtime/runtime.lo \\\n+\tsort/sort.lo strconv/strconv.lo strings/strings.lo \\\n+\tsync/sync.lo time/time.lo unicode/unicode.lo \\\n+\twebsocket/websocket.lo archive/tar.lo archive/zip.lo \\\n+\tcompress/bzip2.lo compress/flate.lo compress/gzip.lo \\\n+\tcompress/lzw.lo compress/zlib.lo container/heap.lo \\\n+\tcontainer/list.lo container/ring.lo crypto/aes.lo \\\n+\tcrypto/bcrypt.lo crypto/blowfish.lo crypto/cast5.lo \\\n+\tcrypto/cipher.lo crypto/des.lo crypto/dsa.lo crypto/ecdsa.lo \\\n+\tcrypto/elliptic.lo crypto/hmac.lo crypto/md4.lo crypto/md5.lo \\\n+\tcrypto/ocsp.lo crypto/openpgp.lo crypto/rand.lo crypto/rc4.lo \\\n \tcrypto/ripemd160.lo crypto/rsa.lo crypto/sha1.lo \\\n \tcrypto/sha256.lo crypto/sha512.lo crypto/subtle.lo \\\n \tcrypto/tls.lo crypto/twofish.lo crypto/x509.lo crypto/xtea.lo \\\n \tcrypto/openpgp/armor.lo crypto/openpgp/elgamal.lo \\\n \tcrypto/openpgp/error.lo crypto/openpgp/packet.lo \\\n \tcrypto/openpgp/s2k.lo crypto/x509/pkix.lo debug/dwarf.lo \\\n \tdebug/elf.lo debug/gosym.lo debug/macho.lo debug/pe.lo \\\n-\tencoding/ascii85.lo encoding/base32.lo encoding/base64.lo \\\n-\tencoding/binary.lo encoding/git85.lo encoding/hex.lo \\\n-\tencoding/pem.lo exp/ebnf.lo exp/gui.lo exp/norm.lo exp/spdy.lo \\\n-\texp/sql.lo exp/ssh.lo exp/terminal.lo exp/types.lo \\\n-\texp/gui/x11.lo exp/sql/driver.lo exp/template/html.lo \\\n-\tgo/ast.lo go/build.lo go/doc.lo go/parser.lo go/printer.lo \\\n-\tgo/scanner.lo go/token.lo hash/adler32.lo hash/crc32.lo \\\n-\thash/crc64.lo hash/fnv.lo http/cgi.lo http/fcgi.lo \\\n-\thttp/httptest.lo http/pprof.lo image/bmp.lo image/color.lo \\\n-\timage/draw.lo image/gif.lo image/jpeg.lo image/png.lo \\\n-\timage/tiff.lo image/ycbcr.lo index/suffixarray.lo io/ioutil.lo \\\n-\tmime/multipart.lo net/dict.lo net/textproto.lo old/netchan.lo \\\n-\told/regexp.lo old/template.lo $(am__DEPENDENCIES_1) os/user.lo \\\n-\tos/signal.lo path/filepath.lo regexp/syntax.lo rpc/jsonrpc.lo \\\n-\truntime/debug.lo runtime/pprof.lo sync/atomic.lo \\\n-\tsync/atomic_c.lo syscall/syscall.lo syscall/errno.lo \\\n-\tsyscall/wait.lo template/parse.lo testing/testing.lo \\\n-\ttesting/iotest.lo testing/quick.lo testing/script.lo\n+\tencoding/ascii85.lo encoding/asn1.lo encoding/base32.lo \\\n+\tencoding/base64.lo encoding/binary.lo encoding/csv.lo \\\n+\tencoding/git85.lo encoding/gob.lo encoding/hex.lo \\\n+\tencoding/json.lo encoding/pem.lo encoding/xml.lo exp/ebnf.lo \\\n+\texp/gui.lo exp/norm.lo exp/spdy.lo exp/sql.lo exp/ssh.lo \\\n+\texp/terminal.lo exp/types.lo exp/gui/x11.lo exp/sql/driver.lo \\\n+\thtml/template.lo go/ast.lo go/build.lo go/doc.lo go/parser.lo \\\n+\tgo/printer.lo go/scanner.lo go/token.lo hash/adler32.lo \\\n+\thash/crc32.lo hash/crc64.lo hash/fnv.lo net/http/cgi.lo \\\n+\tnet/http/fcgi.lo net/http/httptest.lo net/http/httputil.lo \\\n+\tnet/http/pprof.lo image/bmp.lo image/color.lo image/draw.lo \\\n+\timage/gif.lo image/jpeg.lo image/png.lo image/tiff.lo \\\n+\timage/ycbcr.lo index/suffixarray.lo io/ioutil.lo log/syslog.lo \\\n+\tlog/syslog/syslog_c.lo math/big.lo math/cmplx.lo math/rand.lo \\\n+\tmime/mime.lo mime/multipart.lo net/dict.lo net/http.lo \\\n+\tnet/mail.lo net/rpc.lo net/smtp.lo net/textproto.lo net/url.lo \\\n+\told/netchan.lo old/regexp.lo old/template.lo \\\n+\t$(am__DEPENDENCIES_1) os/user.lo os/signal.lo path/filepath.lo \\\n+\tregexp/syntax.lo net/rpc/jsonrpc.lo runtime/debug.lo \\\n+\truntime/pprof.lo sync/atomic.lo sync/atomic_c.lo \\\n+\tsyscall/syscall.lo syscall/errno.lo syscall/wait.lo \\\n+\ttext/scanner.lo text/tabwriter.lo text/template.lo \\\n+\ttext/template/parse.lo testing/testing.lo testing/iotest.lo \\\n+\ttesting/quick.lo testing/script.lo unicode/utf16.lo \\\n+\tunicode/utf8.lo\n libgo_la_DEPENDENCIES = $(am__DEPENDENCIES_2) $(am__DEPENDENCIES_1) \\\n \t$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \\\n \t$(am__DEPENDENCIES_1)\n@@ -216,7 +222,7 @@ am__libgo_la_SOURCES_DIST = runtime/go-append.c runtime/go-assert.c \\\n \truntime/mheap.c runtime/msize.c runtime/proc.c \\\n \truntime/runtime.c runtime/thread.c runtime/yield.c \\\n \truntime/rtems-task-variable-add.c iface.c malloc.c map.c \\\n-\tmprof.c reflect.c runtime1.c sema.c sigqueue.c string.c\n+\tmprof.c reflect.c runtime1.c sema.c sigqueue.c string.c time.c\n @LIBGO_IS_LINUX_FALSE@am__objects_1 = lock_sema.lo thread-sema.lo\n @LIBGO_IS_LINUX_TRUE@am__objects_1 = lock_futex.lo thread-linux.lo\n @HAVE_SYS_MMAN_H_FALSE@am__objects_2 = mem_posix_memalign.lo\n@@ -245,7 +251,7 @@ am__objects_4 = go-append.lo go-assert.lo go-assert-interface.lo \\\n \tmfinal.lo mfixalloc.lo mgc0.lo mheap.lo msize.lo proc.lo \\\n \truntime.lo thread.lo yield.lo $(am__objects_3) iface.lo \\\n \tmalloc.lo map.lo mprof.lo reflect.lo runtime1.lo sema.lo \\\n-\tsigqueue.lo string.lo\n+\tsigqueue.lo string.lo time.lo\n am_libgo_la_OBJECTS = $(am__objects_4)\n libgo_la_OBJECTS = $(am_libgo_la_OBJECTS)\n libgo_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n@@ -285,15 +291,17 @@ DATA = $(toolexeclibgo_DATA) $(toolexeclibgoarchive_DATA) \\\n \t$(toolexeclibgocryptox509_DATA) $(toolexeclibgodebug_DATA) \\\n \t$(toolexeclibgoencoding_DATA) $(toolexeclibgoexp_DATA) \\\n \t$(toolexeclibgoexpgui_DATA) $(toolexeclibgoexpsql_DATA) \\\n-\t$(toolexeclibgoexptemplate_DATA) $(toolexeclibgogo_DATA) \\\n-\t$(toolexeclibgohash_DATA) $(toolexeclibgohttp_DATA) \\\n-\t$(toolexeclibgoimage_DATA) $(toolexeclibgoindex_DATA) \\\n-\t$(toolexeclibgoio_DATA) $(toolexeclibgomime_DATA) \\\n-\t$(toolexeclibgonet_DATA) $(toolexeclibgoold_DATA) \\\n-\t$(toolexeclibgoos_DATA) $(toolexeclibgopath_DATA) \\\n-\t$(toolexeclibgoregexp_DATA) $(toolexeclibgorpc_DATA) \\\n+\t$(toolexeclibgogo_DATA) $(toolexeclibgohash_DATA) \\\n+\t$(toolexeclibgohtml_DATA) $(toolexeclibgoimage_DATA) \\\n+\t$(toolexeclibgoindex_DATA) $(toolexeclibgoio_DATA) \\\n+\t$(toolexeclibgolog_DATA) $(toolexeclibgomath_DATA) \\\n+\t$(toolexeclibgomime_DATA) $(toolexeclibgonet_DATA) \\\n+\t$(toolexeclibgonethttp_DATA) $(toolexeclibgonetrpc_DATA) \\\n+\t$(toolexeclibgoold_DATA) $(toolexeclibgoos_DATA) \\\n+\t$(toolexeclibgopath_DATA) $(toolexeclibgoregexp_DATA) \\\n \t$(toolexeclibgoruntime_DATA) $(toolexeclibgosync_DATA) \\\n-\t$(toolexeclibgotemplate_DATA) $(toolexeclibgotesting_DATA)\n+\t$(toolexeclibgotesting_DATA) $(toolexeclibgotext_DATA) \\\n+\t$(toolexeclibgotexttemplate_DATA) $(toolexeclibgounicode_DATA)\n RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive\t\\\n   distclean-recursive maintainer-clean-recursive\n AM_RECURSIVE_TARGETS = $(RECURSIVE_TARGETS:-recursive=) \\\n@@ -561,56 +569,36 @@ toolexeclib_LTLIBRARIES = libgo.la\n toolexeclib_LIBRARIES = libgobegin.a\n toolexeclibgodir = $(toolexeclibdir)/go/$(gcc_version)/$(target_alias)\n toolexeclibgo_DATA = \\\n-\tasn1.gox \\\n-\tbig.gox \\\n \tbufio.gox \\\n \tbytes.gox \\\n-\tcmath.gox \\\n \tcrypto.gox \\\n-\tcsv.gox \\\n \terrors.gox \\\n-\texec.gox \\\n \texpvar.gox \\\n \tflag.gox \\\n \tfmt.gox \\\n-\tgob.gox \\\n \thash.gox \\\n \thtml.gox \\\n-\thttp.gox \\\n \timage.gox \\\n \tio.gox \\\n-\tjson.gox \\\n \tlog.gox \\\n \tmath.gox \\\n-\tmail.gox \\\n \tmime.gox \\\n \tnet.gox \\\n \tos.gox \\\n \tpatch.gox \\\n \tpath.gox \\\n-\trand.gox \\\n \treflect.gox \\\n \tregexp.gox \\\n-\trpc.gox \\\n \truntime.gox \\\n-\tscanner.gox \\\n-\tsmtp.gox \\\n \tsort.gox \\\n \tstrconv.gox \\\n \tstrings.gox \\\n \tsync.gox \\\n \tsyscall.gox \\\n-\tsyslog.gox \\\n-\ttabwriter.gox \\\n-\ttemplate.gox \\\n \ttesting.gox \\\n \ttime.gox \\\n \tunicode.gox \\\n-\turl.gox \\\n-\tutf16.gox \\\n-\tutf8.gox \\\n-\twebsocket.gox \\\n-\txml.gox\n+\twebsocket.gox\n \n toolexeclibgoarchivedir = $(toolexeclibgodir)/archive\n toolexeclibgoarchive_DATA = \\\n@@ -683,12 +671,17 @@ toolexeclibgodebug_DATA = \\\n toolexeclibgoencodingdir = $(toolexeclibgodir)/encoding\n toolexeclibgoencoding_DATA = \\\n \tencoding/ascii85.gox \\\n+\tencoding/asn1.gox \\\n \tencoding/base32.gox \\\n \tencoding/base64.gox \\\n \tencoding/binary.gox \\\n+\tencoding/csv.gox \\\n \tencoding/git85.gox \\\n+\tencoding/gob.gox \\\n \tencoding/hex.gox \\\n-\tencoding/pem.gox\n+\tencoding/json.gox \\\n+\tencoding/pem.gox \\\n+\tencoding/xml.gox\n \n @LIBGO_IS_LINUX_FALSE@exp_inotify_gox = \n \n@@ -714,10 +707,6 @@ toolexeclibgoexpsqldir = $(toolexeclibgoexpdir)/sql\n toolexeclibgoexpsql_DATA = \\\n \texp/sql/driver.gox\n \n-toolexeclibgoexptemplatedir = $(toolexeclibgoexpdir)/template\n-toolexeclibgoexptemplate_DATA = \\\n-\texp/template/html.gox\n-\n toolexeclibgogodir = $(toolexeclibgodir)/go\n toolexeclibgogo_DATA = \\\n \tgo/ast.gox \\\n@@ -735,12 +724,9 @@ toolexeclibgohash_DATA = \\\n \thash/crc64.gox \\\n \thash/fnv.gox\n \n-toolexeclibgohttpdir = $(toolexeclibgodir)/http\n-toolexeclibgohttp_DATA = \\\n-\thttp/cgi.gox \\\n-\thttp/fcgi.gox \\\n-\thttp/httptest.gox \\\n-\thttp/pprof.gox\n+toolexeclibgohtmldir = $(toolexeclibgodir)/html\n+toolexeclibgohtml_DATA = \\\n+\thtml/template.gox\n \n toolexeclibgoimagedir = $(toolexeclibgodir)/image\n toolexeclibgoimage_DATA = \\\n@@ -761,14 +747,41 @@ toolexeclibgoiodir = $(toolexeclibgodir)/io\n toolexeclibgoio_DATA = \\\n \tio/ioutil.gox\n \n+toolexeclibgologdir = $(toolexeclibgodir)/log\n+toolexeclibgolog_DATA = \\\n+\tlog/syslog.gox\n+\n+toolexeclibgomathdir = $(toolexeclibgodir)/math\n+toolexeclibgomath_DATA = \\\n+\tmath/big.gox \\\n+\tmath/cmplx.gox \\\n+\tmath/rand.gox\n+\n toolexeclibgomimedir = $(toolexeclibgodir)/mime\n toolexeclibgomime_DATA = \\\n \tmime/multipart.gox\n \n toolexeclibgonetdir = $(toolexeclibgodir)/net\n toolexeclibgonet_DATA = \\\n \tnet/dict.gox \\\n-\tnet/textproto.gox\n+\tnet/http.gox \\\n+\tnet/mail.gox \\\n+\tnet/rpc.gox \\\n+\tnet/smtp.gox \\\n+\tnet/textproto.gox \\\n+\tnet/url.gox\n+\n+toolexeclibgonethttpdir = $(toolexeclibgonetdir)/http\n+toolexeclibgonethttp_DATA = \\\n+\tnet/http/cgi.gox \\\n+\tnet/http/fcgi.gox \\\n+\tnet/http/httptest.gox \\\n+\tnet/http/httputil.gox \\\n+\tnet/http/pprof.gox\n+\n+toolexeclibgonetrpcdir = $(toolexeclibgonetdir)/rpc\n+toolexeclibgonetrpc_DATA = \\\n+\tnet/rpc/jsonrpc.gox\n \n toolexeclibgoolddir = $(toolexeclibgodir)/old\n toolexeclibgoold_DATA = \\\n@@ -778,6 +791,7 @@ toolexeclibgoold_DATA = \\\n \n toolexeclibgoosdir = $(toolexeclibgodir)/os\n toolexeclibgoos_DATA = \\\n+\tos/exec.gox \\\n \tos/user.gox \\\n \tos/signal.gox\n \n@@ -789,19 +803,11 @@ toolexeclibgoregexpdir = $(toolexeclibgodir)/regexp\n toolexeclibgoregexp_DATA = \\\n \tregexp/syntax.gox\n \n-toolexeclibgorpcdir = $(toolexeclibgodir)/rpc\n-toolexeclibgorpc_DATA = \\\n-\trpc/jsonrpc.gox\n-\n toolexeclibgoruntimedir = $(toolexeclibgodir)/runtime\n toolexeclibgoruntime_DATA = \\\n \truntime/debug.gox \\\n \truntime/pprof.gox\n \n-toolexeclibgotemplatedir = $(toolexeclibgodir)/template\n-toolexeclibgotemplate_DATA = \\\n-\ttemplate/parse.gox\n-\n toolexeclibgosyncdir = $(toolexeclibgodir)/sync\n toolexeclibgosync_DATA = \\\n \tsync/atomic.gox\n@@ -812,6 +818,21 @@ toolexeclibgotesting_DATA = \\\n \ttesting/quick.gox \\\n \ttesting/script.gox\n \n+toolexeclibgotextdir = $(toolexeclibgodir)/text\n+toolexeclibgotext_DATA = \\\n+\ttext/scanner.gox \\\n+\ttext/tabwriter.gox \\\n+\ttext/template.gox\n+\n+toolexeclibgotexttemplatedir = $(toolexeclibgotextdir)/template\n+toolexeclibgotexttemplate_DATA = \\\n+\ttext/template/parse.gox\n+\n+toolexeclibgounicodedir = $(toolexeclibgodir)/unicode\n+toolexeclibgounicode_DATA = \\\n+\tunicode/utf16.gox \\\n+\tunicode/utf8.gox\n+\n @HAVE_SYS_MMAN_H_FALSE@runtime_mem_file = runtime/mem_posix_memalign.c\n @HAVE_SYS_MMAN_H_TRUE@runtime_mem_file = runtime/mem.c\n @LIBGO_IS_RTEMS_FALSE@rtems_task_variable_add_file = \n@@ -901,18 +922,8 @@ runtime_files = \\\n \truntime1.c \\\n \tsema.c \\\n \tsigqueue.c \\\n-\tstring.c\n-\n-go_asn1_files = \\\n-\tgo/asn1/asn1.go \\\n-\tgo/asn1/common.go \\\n-\tgo/asn1/marshal.go\n-\n-go_big_files = \\\n-\tgo/big/arith.go \\\n-\tgo/big/int.go \\\n-\tgo/big/nat.go \\\n-\tgo/big/rat.go\n+\tstring.c \\\n+\ttime.c\n \n go_bufio_files = \\\n \tgo/bufio/bufio.go\n@@ -925,36 +936,12 @@ go_bytes_files = \\\n go_bytes_c_files = \\\n \tgo/bytes/indexbyte.c\n \n-go_cmath_files = \\\n-\tgo/cmath/abs.go \\\n-\tgo/cmath/asin.go \\\n-\tgo/cmath/conj.go \\\n-\tgo/cmath/exp.go \\\n-\tgo/cmath/isinf.go \\\n-\tgo/cmath/isnan.go \\\n-\tgo/cmath/log.go \\\n-\tgo/cmath/phase.go \\\n-\tgo/cmath/polar.go \\\n-\tgo/cmath/pow.go \\\n-\tgo/cmath/rect.go \\\n-\tgo/cmath/sin.go \\\n-\tgo/cmath/sqrt.go \\\n-\tgo/cmath/tan.go\n-\n go_crypto_files = \\\n \tgo/crypto/crypto.go\n \n-go_csv_files = \\\n-\tgo/csv/reader.go \\\n-\tgo/csv/writer.go\n-\n go_errors_files = \\\n \tgo/errors/errors.go\n \n-go_exec_files = \\\n-\tgo/exec/exec.go \\\n-\tgo/exec/lp_unix.go\n-\n go_expvar_files = \\\n \tgo/expvar/expvar.go\n \n@@ -967,15 +954,6 @@ go_fmt_files = \\\n \tgo/fmt/print.go \\\n \tgo/fmt/scan.go\n \n-go_gob_files = \\\n-\tgo/gob/decode.go \\\n-\tgo/gob/decoder.go \\\n-\tgo/gob/doc.go \\\n-\tgo/gob/encode.go \\\n-\tgo/gob/encoder.go \\\n-\tgo/gob/error.go \\\n-\tgo/gob/type.go\n-\n go_hash_files = \\\n \tgo/hash/hash.go\n \n@@ -989,25 +967,6 @@ go_html_files = \\\n \tgo/html/render.go \\\n \tgo/html/token.go\n \n-go_http_files = \\\n-\tgo/http/chunked.go \\\n-\tgo/http/client.go \\\n-\tgo/http/cookie.go \\\n-\tgo/http/dump.go \\\n-\tgo/http/filetransport.go \\\n-\tgo/http/fs.go \\\n-\tgo/http/header.go \\\n-\tgo/http/lex.go \\\n-\tgo/http/persist.go \\\n-\tgo/http/request.go \\\n-\tgo/http/response.go \\\n-\tgo/http/reverseproxy.go \\\n-\tgo/http/server.go \\\n-\tgo/http/sniff.go \\\n-\tgo/http/status.go \\\n-\tgo/http/transfer.go \\\n-\tgo/http/transport.go\n-\n go_image_files = \\\n \tgo/image/format.go \\\n \tgo/image/geom.go \\\n@@ -1019,14 +978,6 @@ go_io_files = \\\n \tgo/io/io.go \\\n \tgo/io/pipe.go\n \n-go_json_files = \\\n-\tgo/json/decode.go \\\n-\tgo/json/encode.go \\\n-\tgo/json/indent.go \\\n-\tgo/json/scanner.go \\\n-\tgo/json/stream.go \\\n-\tgo/json/tags.go\n-\n go_log_files = \\\n \tgo/log/log.go\n \n@@ -1078,9 +1029,6 @@ go_math_files = \\\n \tgo/math/tanh.go \\\n \tgo/math/unsafe.go\n \n-go_mail_files = \\\n-\tgo/mail/message.go\n-\n go_mime_files = \\\n \tgo/mime/grammar.go \\\n \tgo/mime/mediatype.go \\\n@@ -1185,13 +1133,6 @@ go_path_files = \\\n \tgo/path/match.go \\\n \tgo/path/path.go\n \n-go_rand_files = \\\n-\tgo/rand/exp.go \\\n-\tgo/rand/normal.go \\\n-\tgo/rand/rand.go \\\n-\tgo/rand/rng.go \\\n-\tgo/rand/zipf.go\n-\n go_reflect_files = \\\n \tgo/reflect/deepequal.go \\\n \tgo/reflect/type.go \\\n@@ -1201,10 +1142,10 @@ go_regexp_files = \\\n \tgo/regexp/exec.go \\\n \tgo/regexp/regexp.go\n \n-go_rpc_files = \\\n-\tgo/rpc/client.go \\\n-\tgo/rpc/debug.go \\\n-\tgo/rpc/server.go\n+go_net_rpc_files = \\\n+\tgo/net/rpc/client.go \\\n+\tgo/net/rpc/debug.go \\\n+\tgo/net/rpc/server.go\n \n go_runtime_files = \\\n \tgo/runtime/debug.go \\\n@@ -1216,13 +1157,6 @@ go_runtime_files = \\\n \tgo/runtime/type.go \\\n \tversion.go\n \n-go_scanner_files = \\\n-\tgo/scanner/scanner.go\n-\n-go_smtp_files = \\\n-\tgo/smtp/auth.go \\\n-\tgo/smtp/smtp.go\n-\n go_sort_files = \\\n \tgo/sort/search.go \\\n \tgo/sort/sort.go\n@@ -1248,26 +1182,15 @@ go_sync_files = \\\n \tgo/sync/rwmutex.go \\\n \tgo/sync/waitgroup.go\n \n-@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_syslog_file = go/syslog/syslog_unix.go\n-@LIBGO_IS_IRIX_TRUE@@LIBGO_IS_SOLARIS_FALSE@go_syslog_file = go/syslog/syslog_libc.go\n-@LIBGO_IS_SOLARIS_TRUE@go_syslog_file = go/syslog/syslog_libc.go\n-go_syslog_files = \\\n-\tgo/syslog/syslog.go \\\n+@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_syslog_file = go/log/syslog/syslog_unix.go\n+@LIBGO_IS_IRIX_TRUE@@LIBGO_IS_SOLARIS_FALSE@go_syslog_file = go/log/syslog/syslog_libc.go\n+@LIBGO_IS_SOLARIS_TRUE@go_syslog_file = go/log/syslog/syslog_libc.go\n+go_log_syslog_files = \\\n+\tgo/log/syslog/syslog.go \\\n \t$(go_syslog_file)\n \n go_syslog_c_files = \\\n-\tgo/syslog/syslog_c.c\n-\n-go_tabwriter_files = \\\n-\tgo/tabwriter/tabwriter.go\n-\n-go_template_files = \\\n-\tgo/template/doc.go \\\n-\tgo/template/exec.go \\\n-\tgo/template/funcs.go \\\n-\tgo/template/helper.go \\\n-\tgo/template/parse.go \\\n-\tgo/template/set.go\n+\tgo/log/syslog/syslog_c.c\n \n go_testing_files = \\\n \tgo/testing/benchmark.go \\\n@@ -1291,28 +1214,13 @@ go_unicode_files = \\\n \tgo/unicode/letter.go \\\n \tgo/unicode/tables.go\n \n-go_url_files = \\\n-\tgo/url/url.go\n-\n-go_utf16_files = \\\n-\tgo/utf16/utf16.go\n-\n-go_utf8_files = \\\n-\tgo/utf8/string.go \\\n-\tgo/utf8/utf8.go\n-\n go_websocket_files = \\\n \tgo/websocket/client.go \\\n \tgo/websocket/hixie.go \\\n \tgo/websocket/hybi.go \\\n \tgo/websocket/server.go \\\n \tgo/websocket/websocket.go\n \n-go_xml_files = \\\n-\tgo/xml/marshal.go \\\n-\tgo/xml/read.go \\\n-\tgo/xml/xml.go\n-\n go_archive_tar_files = \\\n \tgo/archive/tar/common.go \\\n \tgo/archive/tar/reader.go \\\n@@ -1533,6 +1441,11 @@ go_debug_pe_files = \\\n go_encoding_ascii85_files = \\\n \tgo/encoding/ascii85/ascii85.go\n \n+go_encoding_asn1_files = \\\n+\tgo/encoding/asn1/asn1.go \\\n+\tgo/encoding/asn1/common.go \\\n+\tgo/encoding/asn1/marshal.go\n+\n go_encoding_base32_files = \\\n \tgo/encoding/base32/base32.go\n \n@@ -1543,15 +1456,41 @@ go_encoding_binary_files = \\\n \tgo/encoding/binary/binary.go \\\n \tgo/encoding/binary/varint.go\n \n+go_encoding_csv_files = \\\n+\tgo/encoding/csv/reader.go \\\n+\tgo/encoding/csv/writer.go\n+\n go_encoding_git85_files = \\\n \tgo/encoding/git85/git.go\n \n+go_encoding_gob_files = \\\n+\tgo/encoding/gob/decode.go \\\n+\tgo/encoding/gob/decoder.go \\\n+\tgo/encoding/gob/doc.go \\\n+\tgo/encoding/gob/encode.go \\\n+\tgo/encoding/gob/encoder.go \\\n+\tgo/encoding/gob/error.go \\\n+\tgo/encoding/gob/type.go\n+\n go_encoding_hex_files = \\\n \tgo/encoding/hex/hex.go\n \n+go_encoding_json_files = \\\n+\tgo/encoding/json/decode.go \\\n+\tgo/encoding/json/encode.go \\\n+\tgo/encoding/json/indent.go \\\n+\tgo/encoding/json/scanner.go \\\n+\tgo/encoding/json/stream.go \\\n+\tgo/encoding/json/tags.go\n+\n go_encoding_pem_files = \\\n \tgo/encoding/pem/pem.go\n \n+go_encoding_xml_files = \\\n+\tgo/encoding/xml/marshal.go \\\n+\tgo/encoding/xml/read.go \\\n+\tgo/encoding/xml/xml.go\n+\n go_exp_ebnf_files = \\\n \tgo/exp/ebnf/ebnf.go \\\n \tgo/exp/ebnf/parser.go\n@@ -1583,6 +1522,7 @@ go_exp_sql_files = \\\n go_exp_ssh_files = \\\n \tgo/exp/ssh/channel.go \\\n \tgo/exp/ssh/client.go \\\n+\tgo/exp/ssh/client_auth.go \\\n \tgo/exp/ssh/common.go \\\n \tgo/exp/ssh/doc.go \\\n \tgo/exp/ssh/messages.go \\\n@@ -1611,23 +1551,10 @@ go_exp_sql_driver_files = \\\n \tgo/exp/sql/driver/driver.go \\\n \tgo/exp/sql/driver/types.go\n \n-go_exp_template_html_files = \\\n-\tgo/exp/template/html/attr.go \\\n-\tgo/exp/template/html/clone.go \\\n-\tgo/exp/template/html/content.go \\\n-\tgo/exp/template/html/context.go \\\n-\tgo/exp/template/html/css.go \\\n-\tgo/exp/template/html/doc.go \\\n-\tgo/exp/template/html/error.go \\\n-\tgo/exp/template/html/escape.go \\\n-\tgo/exp/template/html/html.go \\\n-\tgo/exp/template/html/js.go \\\n-\tgo/exp/template/html/transition.go \\\n-\tgo/exp/template/html/url.go\n-\n go_go_ast_files = \\\n \tgo/go/ast/ast.go \\\n \tgo/go/ast/filter.go \\\n+\tgo/go/ast/import.go \\\n \tgo/go/ast/print.go \\\n \tgo/go/ast/resolve.go \\\n \tgo/go/ast/scope.go \\\n@@ -1674,20 +1601,20 @@ go_hash_crc64_files = \\\n go_hash_fnv_files = \\\n \tgo/hash/fnv/fnv.go\n \n-go_http_cgi_files = \\\n-\tgo/http/cgi/child.go \\\n-\tgo/http/cgi/host.go\n-\n-go_http_fcgi_files = \\\n-\tgo/http/fcgi/child.go \\\n-\tgo/http/fcgi/fcgi.go\n-\n-go_http_httptest_files = \\\n-\tgo/http/httptest/recorder.go \\\n-\tgo/http/httptest/server.go\n-\n-go_http_pprof_files = \\\n-\tgo/http/pprof/pprof.go\n+go_html_template_files = \\\n+\tgo/html/template/attr.go \\\n+\tgo/html/template/clone.go \\\n+\tgo/html/template/content.go \\\n+\tgo/html/template/context.go \\\n+\tgo/html/template/css.go \\\n+\tgo/html/template/doc.go \\\n+\tgo/html/template/error.go \\\n+\tgo/html/template/escape.go \\\n+\tgo/html/template/html.go \\\n+\tgo/html/template/js.go \\\n+\tgo/html/template/template.go \\\n+\tgo/html/template/transition.go \\\n+\tgo/html/template/url.go\n \n go_image_bmp_files = \\\n \tgo/image/bmp/reader.go\n@@ -1729,6 +1656,35 @@ go_io_ioutil_files = \\\n \tgo/io/ioutil/ioutil.go \\\n \tgo/io/ioutil/tempfile.go\n \n+go_math_big_files = \\\n+\tgo/math/big/arith.go \\\n+\tgo/math/big/int.go \\\n+\tgo/math/big/nat.go \\\n+\tgo/math/big/rat.go\n+\n+go_math_cmplx_files = \\\n+\tgo/math/cmplx/abs.go \\\n+\tgo/math/cmplx/asin.go \\\n+\tgo/math/cmplx/conj.go \\\n+\tgo/math/cmplx/exp.go \\\n+\tgo/math/cmplx/isinf.go \\\n+\tgo/math/cmplx/isnan.go \\\n+\tgo/math/cmplx/log.go \\\n+\tgo/math/cmplx/phase.go \\\n+\tgo/math/cmplx/polar.go \\\n+\tgo/math/cmplx/pow.go \\\n+\tgo/math/cmplx/rect.go \\\n+\tgo/math/cmplx/sin.go \\\n+\tgo/math/cmplx/sqrt.go \\\n+\tgo/math/cmplx/tan.go\n+\n+go_math_rand_files = \\\n+\tgo/math/rand/exp.go \\\n+\tgo/math/rand/normal.go \\\n+\tgo/math/rand/rand.go \\\n+\tgo/math/rand/rng.go \\\n+\tgo/math/rand/zipf.go\n+\n go_mime_multipart_files = \\\n \tgo/mime/multipart/formdata.go \\\n \tgo/mime/multipart/multipart.go \\\n@@ -1737,13 +1693,60 @@ go_mime_multipart_files = \\\n go_net_dict_files = \\\n \tgo/net/dict/dict.go\n \n+go_net_http_files = \\\n+\tgo/net/http/chunked.go \\\n+\tgo/net/http/client.go \\\n+\tgo/net/http/cookie.go \\\n+\tgo/net/http/filetransport.go \\\n+\tgo/net/http/fs.go \\\n+\tgo/net/http/header.go \\\n+\tgo/net/http/lex.go \\\n+\tgo/net/http/request.go \\\n+\tgo/net/http/response.go \\\n+\tgo/net/http/server.go \\\n+\tgo/net/http/sniff.go \\\n+\tgo/net/http/status.go \\\n+\tgo/net/http/transfer.go \\\n+\tgo/net/http/transport.go\n+\n+go_net_mail_files = \\\n+\tgo/net/mail/message.go\n+\n+go_net_smtp_files = \\\n+\tgo/net/smtp/auth.go \\\n+\tgo/net/smtp/smtp.go\n+\n go_net_textproto_files = \\\n \tgo/net/textproto/header.go \\\n \tgo/net/textproto/pipeline.go \\\n \tgo/net/textproto/reader.go \\\n \tgo/net/textproto/textproto.go \\\n \tgo/net/textproto/writer.go\n \n+go_net_url_files = \\\n+\tgo/net/url/url.go\n+\n+go_net_http_cgi_files = \\\n+\tgo/net/http/cgi/child.go \\\n+\tgo/net/http/cgi/host.go\n+\n+go_net_http_fcgi_files = \\\n+\tgo/net/http/fcgi/child.go \\\n+\tgo/net/http/fcgi/fcgi.go\n+\n+go_net_http_httptest_files = \\\n+\tgo/net/http/httptest/recorder.go \\\n+\tgo/net/http/httptest/server.go\n+\n+go_net_http_pprof_files = \\\n+\tgo/net/http/pprof/pprof.go\n+\n+go_net_http_httputil_files = \\\n+\tgo/net/http/httputil/chunked.go \\\n+\tgo/net/http/httputil/dump.go \\\n+\tgo/net/http/httputil/persist.go \\\n+\tgo/net/http/httputil/reverseproxy.go\n+\n go_old_netchan_files = \\\n \tgo/old/netchan/common.go \\\n \tgo/old/netchan/export.go \\\n@@ -1758,6 +1761,10 @@ go_old_template_files = \\\n \tgo/old/template/format.go \\\n \tgo/old/template/parse.go\n \n+go_os_exec_files = \\\n+\tgo/os/exec/exec.go \\\n+\tgo/os/exec/lp_unix.go\n+\n go_os_user_files = \\\n \tgo/os/user/user.go \\\n \tgo/os/user/lookup_unix.go\n@@ -1778,21 +1785,32 @@ go_regexp_syntax_files = \\\n \tgo/regexp/syntax/regexp.go \\\n \tgo/regexp/syntax/simplify.go\n \n-go_rpc_jsonrpc_files = \\\n-\tgo/rpc/jsonrpc/client.go \\\n-\tgo/rpc/jsonrpc/server.go\n+go_net_rpc_jsonrpc_files = \\\n+\tgo/net/rpc/jsonrpc/client.go \\\n+\tgo/net/rpc/jsonrpc/server.go\n \n go_runtime_debug_files = \\\n \tgo/runtime/debug/stack.go\n \n go_runtime_pprof_files = \\\n \tgo/runtime/pprof/pprof.go\n \n-go_template_parse_files = \\\n-\tgo/template/parse/lex.go \\\n-\tgo/template/parse/node.go \\\n-\tgo/template/parse/parse.go \\\n-\tgo/template/parse/set.go\n+go_text_tabwriter_files = \\\n+\tgo/text/tabwriter/tabwriter.go\n+\n+go_text_template_files = \\\n+\tgo/text/template/doc.go \\\n+\tgo/text/template/exec.go \\\n+\tgo/text/template/funcs.go \\\n+\tgo/text/template/helper.go \\\n+\tgo/text/template/parse.go \\\n+\tgo/text/template/set.go\n+\n+go_text_template_parse_files = \\\n+\tgo/text/template/parse/lex.go \\\n+\tgo/text/template/parse/node.go \\\n+\tgo/text/template/parse/parse.go \\\n+\tgo/text/template/parse/set.go\n \n go_sync_atomic_files = \\\n \tgo/sync/atomic/doc.go\n@@ -1811,6 +1829,16 @@ go_testing_quick_files = \\\n go_testing_script_files = \\\n \tgo/testing/script/script.go\n \n+go_text_scanner_files = \\\n+\tgo/text/scanner/scanner.go\n+\n+go_unicode_utf16_files = \\\n+\tgo/unicode/utf16/utf16.go\n+\n+go_unicode_utf8_files = \\\n+\tgo/unicode/utf8/string.go \\\n+\tgo/unicode/utf8/utf8.go\n+\n @LIBGO_IS_RTEMS_FALSE@syscall_syscall_file = go/syscall/syscall_unix.go\n \n # Define Syscall and Syscall6.\n@@ -1896,56 +1924,35 @@ go_syscall_c_files = \\\n # os_lib_inotify_lo = os/inotify.lo\n @LIBGO_IS_LINUX_TRUE@os_lib_inotify_lo = \n libgo_go_objs = \\\n-\tasn1/asn1.lo \\\n-\tbig/big.lo \\\n \tbufio/bufio.lo \\\n \tbytes/bytes.lo \\\n \tbytes/index.lo \\\n-\tcmath/cmath.lo \\\n \tcrypto/crypto.lo \\\n-\tcsv/csv.lo \\\n \terrors/errors.lo \\\n-\texec/exec.lo \\\n \texpvar/expvar.lo \\\n \tflag/flag.lo \\\n \tfmt/fmt.lo \\\n-\tgob/gob.lo \\\n \thash/hash.lo \\\n \thtml/html.lo \\\n-\thttp/http.lo \\\n \timage/image.lo \\\n \tio/io.lo \\\n-\tjson/json.lo \\\n \tlog/log.lo \\\n \tmath/math.lo \\\n-\tmail/mail.lo \\\n-\tmime/mime.lo \\\n \tnet/net.lo \\\n+\tos/exec.lo \\\n \tos/os.lo \\\n \tpatch/patch.lo \\\n \tpath/path.lo \\\n-\trand/rand.lo \\\n \treflect/reflect.lo \\\n \tregexp/regexp.lo \\\n-\trpc/rpc.lo \\\n \truntime/runtime.lo \\\n-\tscanner/scanner.lo \\\n-\tsmtp/smtp.lo \\\n \tsort/sort.lo \\\n \tstrconv/strconv.lo \\\n \tstrings/strings.lo \\\n \tsync/sync.lo \\\n-\tsyslog/syslog.lo \\\n-\tsyslog/syslog_c.lo \\\n-\ttabwriter/tabwriter.lo \\\n-\ttemplate/template.lo \\\n \ttime/time.lo \\\n \tunicode/unicode.lo \\\n-\turl/url.lo \\\n-\tutf16/utf16.lo \\\n-\tutf8/utf8.lo \\\n \twebsocket/websocket.lo \\\n-\txml/xml.lo \\\n \tarchive/tar.lo \\\n \tarchive/zip.lo \\\n \tcompress/bzip2.lo \\\n@@ -1994,12 +2001,17 @@ libgo_go_objs = \\\n \tdebug/macho.lo \\\n \tdebug/pe.lo \\\n \tencoding/ascii85.lo \\\n+\tencoding/asn1.lo \\\n \tencoding/base32.lo \\\n \tencoding/base64.lo \\\n \tencoding/binary.lo \\\n+\tencoding/csv.lo \\\n \tencoding/git85.lo \\\n+\tencoding/gob.lo \\\n \tencoding/hex.lo \\\n+\tencoding/json.lo \\\n \tencoding/pem.lo \\\n+\tencoding/xml.lo \\\n \texp/ebnf.lo \\\n \texp/gui.lo \\\n \texp/norm.lo \\\n@@ -2010,7 +2022,7 @@ libgo_go_objs = \\\n \texp/types.lo \\\n \texp/gui/x11.lo \\\n \texp/sql/driver.lo \\\n-\texp/template/html.lo \\\n+\thtml/template.lo \\\n \tgo/ast.lo \\\n \tgo/build.lo \\\n \tgo/doc.lo \\\n@@ -2022,10 +2034,11 @@ libgo_go_objs = \\\n \thash/crc32.lo \\\n \thash/crc64.lo \\\n \thash/fnv.lo \\\n-\thttp/cgi.lo \\\n-\thttp/fcgi.lo \\\n-\thttp/httptest.lo \\\n-\thttp/pprof.lo \\\n+\tnet/http/cgi.lo \\\n+\tnet/http/fcgi.lo \\\n+\tnet/http/httptest.lo \\\n+\tnet/http/httputil.lo \\\n+\tnet/http/pprof.lo \\\n \timage/bmp.lo \\\n \timage/color.lo \\\n \timage/draw.lo \\\n@@ -2036,9 +2049,20 @@ libgo_go_objs = \\\n \timage/ycbcr.lo \\\n \tindex/suffixarray.lo \\\n \tio/ioutil.lo \\\n+\tlog/syslog.lo \\\n+\tlog/syslog/syslog_c.lo \\\n+\tmath/big.lo \\\n+\tmath/cmplx.lo \\\n+\tmath/rand.lo \\\n+\tmime/mime.lo \\\n \tmime/multipart.lo \\\n \tnet/dict.lo \\\n+\tnet/http.lo \\\n+\tnet/mail.lo \\\n+\tnet/rpc.lo \\\n+\tnet/smtp.lo \\\n \tnet/textproto.lo \\\n+\tnet/url.lo \\\n \told/netchan.lo \\\n \told/regexp.lo \\\n \told/template.lo \\\n@@ -2047,19 +2071,24 @@ libgo_go_objs = \\\n \tos/signal.lo \\\n \tpath/filepath.lo \\\n \tregexp/syntax.lo \\\n-\trpc/jsonrpc.lo \\\n+\tnet/rpc/jsonrpc.lo \\\n \truntime/debug.lo \\\n \truntime/pprof.lo \\\n \tsync/atomic.lo \\\n \tsync/atomic_c.lo \\\n \tsyscall/syscall.lo \\\n \tsyscall/errno.lo \\\n \tsyscall/wait.lo \\\n-\ttemplate/parse.lo \\\n+\ttext/scanner.lo \\\n+\ttext/tabwriter.lo \\\n+\ttext/template.lo \\\n+\ttext/template/parse.lo \\\n \ttesting/testing.lo \\\n \ttesting/iotest.lo \\\n \ttesting/quick.lo \\\n-\ttesting/script.lo\n+\ttesting/script.lo \\\n+\tunicode/utf16.lo \\\n+\tunicode/utf8.lo\n \n libgo_la_SOURCES = $(runtime_files)\n libgo_la_LDFLAGS = $(PTHREAD_CFLAGS) $(AM_LDFLAGS)\n@@ -2142,18 +2171,23 @@ CHECK_DEPS = libgo.la libgobegin.a \\\n \t$(toolexeclibgoexp_DATA) \\\n \t$(toolexeclibgogo_DATA) \\\n \t$(toolexeclibgohash_DATA) \\\n-\t$(toolexeclibgohttp_DATA) \\\n \t$(toolexeclibgoimage_DATA) \\\n \t$(toolexeclibgoindex_DATA) \\\n \t$(toolexeclibgoio_DATA) \\\n+\t$(toolexeclibgolog_DATA) \\\n+\t$(toolexeclibgomath_DATA) \\\n \t$(toolexeclibgomime_DATA) \\\n \t$(toolexeclibgonet_DATA) \\\n+\t$(toolexeclibgonethttp_DATA) \\\n \t$(toolexeclibgoos_DATA) \\\n \t$(toolexeclibgopath_DATA) \\\n \t$(toolexeclibgorpc_DATA) \\\n \t$(toolexeclibgoruntime_DATA) \\\n \t$(toolexeclibgosync_DATA) \\\n-\t$(toolexeclibgotesting_DATA)\n+\t$(toolexeclibgotesting_DATA) \\\n+\t$(toolexeclibgotext_DATA) \\\n+\t$(toolexeclibgotexttemplate_DATA) \\\n+\t$(toolexeclibgounicode_DATA)\n \n \n # How to build a .gox file from a .lo file.\n@@ -2166,52 +2200,32 @@ BUILDGOX = \\\n # exp_inotify_check = exp/inotify/check\n @LIBGO_IS_LINUX_TRUE@exp_inotify_check = \n TEST_PACKAGES = \\\n-\tasn1/check \\\n-\tbig/check \\\n \tbufio/check \\\n \tbytes/check \\\n-\tcmath/check \\\n-\tcsv/check \\\n \terrors/check \\\n-\texec/check \\\n \texpvar/check \\\n \tflag/check \\\n \tfmt/check \\\n-\tgob/check \\\n \thtml/check \\\n-\thttp/check \\\n \timage/check \\\n \tio/check \\\n-\tjson/check \\\n \tlog/check \\\n \tmath/check \\\n-\tmail/check \\\n \tmime/check \\\n \tnet/check \\\n \tos/check \\\n \tpatch/check \\\n \tpath/check \\\n-\trand/check \\\n \treflect/check \\\n \tregexp/check \\\n-\trpc/check \\\n \truntime/check \\\n-\tscanner/check \\\n-\tsmtp/check \\\n \tsort/check \\\n \tstrconv/check \\\n \tstrings/check \\\n \tsync/check \\\n-\tsyslog/check \\\n-\ttabwriter/check \\\n-\ttemplate/check \\\n \ttime/check \\\n \tunicode/check \\\n-\turl/check \\\n-\tutf16/check \\\n-\tutf8/check \\\n \twebsocket/check \\\n-\txml/check \\\n \tarchive/tar/check \\\n \tarchive/zip/check \\\n \tcompress/bzip2/check \\\n@@ -2257,20 +2271,25 @@ TEST_PACKAGES = \\\n \tdebug/macho/check \\\n \tdebug/pe/check \\\n \tencoding/ascii85/check \\\n+\tencoding/asn1/check \\\n \tencoding/base32/check \\\n \tencoding/base64/check \\\n \tencoding/binary/check \\\n+\tencoding/csv/check \\\n \tencoding/git85/check \\\n+\tencoding/gob/check \\\n \tencoding/hex/check \\\n+\tencoding/json/check \\\n \tencoding/pem/check \\\n+\tencoding/xml/check \\\n \texp/ebnf/check \\\n \t$(exp_inotify_check) \\\n \texp/norm/check \\\n \texp/spdy/check \\\n \texp/sql/check \\\n \texp/ssh/check \\\n \texp/terminal/check \\\n-\texp/template/html/check \\\n+\thtml/template/check \\\n \tgo/ast/check \\\n \t$(go_build_check_omitted_since_it_calls_6g) \\\n \tgo/parser/check \\\n@@ -2282,29 +2301,45 @@ TEST_PACKAGES = \\\n \thash/crc32/check \\\n \thash/crc64/check \\\n \thash/fnv/check \\\n-\thttp/cgi/check \\\n-\thttp/fcgi/check \\\n \timage/draw/check \\\n \timage/jpeg/check \\\n \timage/png/check \\\n \timage/tiff/check \\\n \timage/ycbcr/check \\\n \tindex/suffixarray/check \\\n \tio/ioutil/check \\\n+\tlog/syslog/check \\\n+\tmath/big/check \\\n+\tmath/cmplx/check \\\n+\tmath/rand/check \\\n \tmime/multipart/check \\\n+\tnet/http/check \\\n+\tnet/http/cgi/check \\\n+\tnet/http/fcgi/check \\\n+\tnet/http/httputil/check \\\n+\tnet/mail/check \\\n+\tnet/rpc/check \\\n+\tnet/smtp/check \\\n \tnet/textproto/check \\\n+\tnet/url/check \\\n+\tnet/rpc/jsonrpc/check \\\n \told/netchan/check \\\n \told/regexp/check \\\n \told/template/check \\\n+\tos/exec/check \\\n \tos/user/check \\\n \tos/signal/check \\\n \tpath/filepath/check \\\n \tregexp/syntax/check \\\n-\trpc/jsonrpc/check \\\n \tsync/atomic/check \\\n-\ttemplate/parse/check \\\n+\ttext/scanner/check \\\n+\ttext/tabwriter/check \\\n+\ttext/template/check \\\n+\ttext/template/parse/check \\\n \ttesting/quick/check \\\n-\ttesting/script/check\n+\ttesting/script/check \\\n+\tunicode/utf16/check \\\n+\tunicode/utf8/check\n \n MOSTLYCLEAN_FILES = libgo.head libgo.sum.sep libgo.log.sep\n CLEANFILES = *.go *.gox goc2c *.c s-version libgo.sum libgo.log\n@@ -2527,6 +2562,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/thread-linux.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/thread-sema.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/thread.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/time.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/yield.Plo@am__quote@\n \n .c.o:\n@@ -3375,26 +3411,6 @@ uninstall-toolexeclibgoexpsqlDATA:\n \ttest -n \"$$files\" || exit 0; \\\n \techo \" ( cd '$(DESTDIR)$(toolexeclibgoexpsqldir)' && rm -f\" $$files \")\"; \\\n \tcd \"$(DESTDIR)$(toolexeclibgoexpsqldir)\" && rm -f $$files\n-install-toolexeclibgoexptemplateDATA: $(toolexeclibgoexptemplate_DATA)\n-\t@$(NORMAL_INSTALL)\n-\ttest -z \"$(toolexeclibgoexptemplatedir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibgoexptemplatedir)\"\n-\t@list='$(toolexeclibgoexptemplate_DATA)'; test -n \"$(toolexeclibgoexptemplatedir)\" || list=; \\\n-\tfor p in $$list; do \\\n-\t  if test -f \"$$p\"; then d=; else d=\"$(srcdir)/\"; fi; \\\n-\t  echo \"$$d$$p\"; \\\n-\tdone | $(am__base_list) | \\\n-\twhile read files; do \\\n-\t  echo \" $(INSTALL_DATA) $$files '$(DESTDIR)$(toolexeclibgoexptemplatedir)'\"; \\\n-\t  $(INSTALL_DATA) $$files \"$(DESTDIR)$(toolexeclibgoexptemplatedir)\" || exit $$?; \\\n-\tdone\n-\n-uninstall-toolexeclibgoexptemplateDATA:\n-\t@$(NORMAL_UNINSTALL)\n-\t@list='$(toolexeclibgoexptemplate_DATA)'; test -n \"$(toolexeclibgoexptemplatedir)\" || list=; \\\n-\tfiles=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \\\n-\ttest -n \"$$files\" || exit 0; \\\n-\techo \" ( cd '$(DESTDIR)$(toolexeclibgoexptemplatedir)' && rm -f\" $$files \")\"; \\\n-\tcd \"$(DESTDIR)$(toolexeclibgoexptemplatedir)\" && rm -f $$files\n install-toolexeclibgogoDATA: $(toolexeclibgogo_DATA)\n \t@$(NORMAL_INSTALL)\n \ttest -z \"$(toolexeclibgogodir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibgogodir)\"\n@@ -3435,26 +3451,26 @@ uninstall-toolexeclibgohashDATA:\n \ttest -n \"$$files\" || exit 0; \\\n \techo \" ( cd '$(DESTDIR)$(toolexeclibgohashdir)' && rm -f\" $$files \")\"; \\\n \tcd \"$(DESTDIR)$(toolexeclibgohashdir)\" && rm -f $$files\n-install-toolexeclibgohttpDATA: $(toolexeclibgohttp_DATA)\n+install-toolexeclibgohtmlDATA: $(toolexeclibgohtml_DATA)\n \t@$(NORMAL_INSTALL)\n-\ttest -z \"$(toolexeclibgohttpdir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibgohttpdir)\"\n-\t@list='$(toolexeclibgohttp_DATA)'; test -n \"$(toolexeclibgohttpdir)\" || list=; \\\n+\ttest -z \"$(toolexeclibgohtmldir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibgohtmldir)\"\n+\t@list='$(toolexeclibgohtml_DATA)'; test -n \"$(toolexeclibgohtmldir)\" || list=; \\\n \tfor p in $$list; do \\\n \t  if test -f \"$$p\"; then d=; else d=\"$(srcdir)/\"; fi; \\\n \t  echo \"$$d$$p\"; \\\n \tdone | $(am__base_list) | \\\n \twhile read files; do \\\n-\t  echo \" $(INSTALL_DATA) $$files '$(DESTDIR)$(toolexeclibgohttpdir)'\"; \\\n-\t  $(INSTALL_DATA) $$files \"$(DESTDIR)$(toolexeclibgohttpdir)\" || exit $$?; \\\n+\t  echo \" $(INSTALL_DATA) $$files '$(DESTDIR)$(toolexeclibgohtmldir)'\"; \\\n+\t  $(INSTALL_DATA) $$files \"$(DESTDIR)$(toolexeclibgohtmldir)\" || exit $$?; \\\n \tdone\n \n-uninstall-toolexeclibgohttpDATA:\n+uninstall-toolexeclibgohtmlDATA:\n \t@$(NORMAL_UNINSTALL)\n-\t@list='$(toolexeclibgohttp_DATA)'; test -n \"$(toolexeclibgohttpdir)\" || list=; \\\n+\t@list='$(toolexeclibgohtml_DATA)'; test -n \"$(toolexeclibgohtmldir)\" || list=; \\\n \tfiles=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \\\n \ttest -n \"$$files\" || exit 0; \\\n-\techo \" ( cd '$(DESTDIR)$(toolexeclibgohttpdir)' && rm -f\" $$files \")\"; \\\n-\tcd \"$(DESTDIR)$(toolexeclibgohttpdir)\" && rm -f $$files\n+\techo \" ( cd '$(DESTDIR)$(toolexeclibgohtmldir)' && rm -f\" $$files \")\"; \\\n+\tcd \"$(DESTDIR)$(toolexeclibgohtmldir)\" && rm -f $$files\n install-toolexeclibgoimageDATA: $(toolexeclibgoimage_DATA)\n \t@$(NORMAL_INSTALL)\n \ttest -z \"$(toolexeclibgoimagedir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibgoimagedir)\"\n@@ -3515,6 +3531,46 @@ uninstall-toolexeclibgoioDATA:\n \ttest -n \"$$files\" || exit 0; \\\n \techo \" ( cd '$(DESTDIR)$(toolexeclibgoiodir)' && rm -f\" $$files \")\"; \\\n \tcd \"$(DESTDIR)$(toolexeclibgoiodir)\" && rm -f $$files\n+install-toolexeclibgologDATA: $(toolexeclibgolog_DATA)\n+\t@$(NORMAL_INSTALL)\n+\ttest -z \"$(toolexeclibgologdir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibgologdir)\"\n+\t@list='$(toolexeclibgolog_DATA)'; test -n \"$(toolexeclibgologdir)\" || list=; \\\n+\tfor p in $$list; do \\\n+\t  if test -f \"$$p\"; then d=; else d=\"$(srcdir)/\"; fi; \\\n+\t  echo \"$$d$$p\"; \\\n+\tdone | $(am__base_list) | \\\n+\twhile read files; do \\\n+\t  echo \" $(INSTALL_DATA) $$files '$(DESTDIR)$(toolexeclibgologdir)'\"; \\\n+\t  $(INSTALL_DATA) $$files \"$(DESTDIR)$(toolexeclibgologdir)\" || exit $$?; \\\n+\tdone\n+\n+uninstall-toolexeclibgologDATA:\n+\t@$(NORMAL_UNINSTALL)\n+\t@list='$(toolexeclibgolog_DATA)'; test -n \"$(toolexeclibgologdir)\" || list=; \\\n+\tfiles=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \\\n+\ttest -n \"$$files\" || exit 0; \\\n+\techo \" ( cd '$(DESTDIR)$(toolexeclibgologdir)' && rm -f\" $$files \")\"; \\\n+\tcd \"$(DESTDIR)$(toolexeclibgologdir)\" && rm -f $$files\n+install-toolexeclibgomathDATA: $(toolexeclibgomath_DATA)\n+\t@$(NORMAL_INSTALL)\n+\ttest -z \"$(toolexeclibgomathdir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibgomathdir)\"\n+\t@list='$(toolexeclibgomath_DATA)'; test -n \"$(toolexeclibgomathdir)\" || list=; \\\n+\tfor p in $$list; do \\\n+\t  if test -f \"$$p\"; then d=; else d=\"$(srcdir)/\"; fi; \\\n+\t  echo \"$$d$$p\"; \\\n+\tdone | $(am__base_list) | \\\n+\twhile read files; do \\\n+\t  echo \" $(INSTALL_DATA) $$files '$(DESTDIR)$(toolexeclibgomathdir)'\"; \\\n+\t  $(INSTALL_DATA) $$files \"$(DESTDIR)$(toolexeclibgomathdir)\" || exit $$?; \\\n+\tdone\n+\n+uninstall-toolexeclibgomathDATA:\n+\t@$(NORMAL_UNINSTALL)\n+\t@list='$(toolexeclibgomath_DATA)'; test -n \"$(toolexeclibgomathdir)\" || list=; \\\n+\tfiles=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \\\n+\ttest -n \"$$files\" || exit 0; \\\n+\techo \" ( cd '$(DESTDIR)$(toolexeclibgomathdir)' && rm -f\" $$files \")\"; \\\n+\tcd \"$(DESTDIR)$(toolexeclibgomathdir)\" && rm -f $$files\n install-toolexeclibgomimeDATA: $(toolexeclibgomime_DATA)\n \t@$(NORMAL_INSTALL)\n \ttest -z \"$(toolexeclibgomimedir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibgomimedir)\"\n@@ -3555,6 +3611,46 @@ uninstall-toolexeclibgonetDATA:\n \ttest -n \"$$files\" || exit 0; \\\n \techo \" ( cd '$(DESTDIR)$(toolexeclibgonetdir)' && rm -f\" $$files \")\"; \\\n \tcd \"$(DESTDIR)$(toolexeclibgonetdir)\" && rm -f $$files\n+install-toolexeclibgonethttpDATA: $(toolexeclibgonethttp_DATA)\n+\t@$(NORMAL_INSTALL)\n+\ttest -z \"$(toolexeclibgonethttpdir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibgonethttpdir)\"\n+\t@list='$(toolexeclibgonethttp_DATA)'; test -n \"$(toolexeclibgonethttpdir)\" || list=; \\\n+\tfor p in $$list; do \\\n+\t  if test -f \"$$p\"; then d=; else d=\"$(srcdir)/\"; fi; \\\n+\t  echo \"$$d$$p\"; \\\n+\tdone | $(am__base_list) | \\\n+\twhile read files; do \\\n+\t  echo \" $(INSTALL_DATA) $$files '$(DESTDIR)$(toolexeclibgonethttpdir)'\"; \\\n+\t  $(INSTALL_DATA) $$files \"$(DESTDIR)$(toolexeclibgonethttpdir)\" || exit $$?; \\\n+\tdone\n+\n+uninstall-toolexeclibgonethttpDATA:\n+\t@$(NORMAL_UNINSTALL)\n+\t@list='$(toolexeclibgonethttp_DATA)'; test -n \"$(toolexeclibgonethttpdir)\" || list=; \\\n+\tfiles=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \\\n+\ttest -n \"$$files\" || exit 0; \\\n+\techo \" ( cd '$(DESTDIR)$(toolexeclibgonethttpdir)' && rm -f\" $$files \")\"; \\\n+\tcd \"$(DESTDIR)$(toolexeclibgonethttpdir)\" && rm -f $$files\n+install-toolexeclibgonetrpcDATA: $(toolexeclibgonetrpc_DATA)\n+\t@$(NORMAL_INSTALL)\n+\ttest -z \"$(toolexeclibgonetrpcdir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibgonetrpcdir)\"\n+\t@list='$(toolexeclibgonetrpc_DATA)'; test -n \"$(toolexeclibgonetrpcdir)\" || list=; \\\n+\tfor p in $$list; do \\\n+\t  if test -f \"$$p\"; then d=; else d=\"$(srcdir)/\"; fi; \\\n+\t  echo \"$$d$$p\"; \\\n+\tdone | $(am__base_list) | \\\n+\twhile read files; do \\\n+\t  echo \" $(INSTALL_DATA) $$files '$(DESTDIR)$(toolexeclibgonetrpcdir)'\"; \\\n+\t  $(INSTALL_DATA) $$files \"$(DESTDIR)$(toolexeclibgonetrpcdir)\" || exit $$?; \\\n+\tdone\n+\n+uninstall-toolexeclibgonetrpcDATA:\n+\t@$(NORMAL_UNINSTALL)\n+\t@list='$(toolexeclibgonetrpc_DATA)'; test -n \"$(toolexeclibgonetrpcdir)\" || list=; \\\n+\tfiles=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \\\n+\ttest -n \"$$files\" || exit 0; \\\n+\techo \" ( cd '$(DESTDIR)$(toolexeclibgonetrpcdir)' && rm -f\" $$files \")\"; \\\n+\tcd \"$(DESTDIR)$(toolexeclibgonetrpcdir)\" && rm -f $$files\n install-toolexeclibgooldDATA: $(toolexeclibgoold_DATA)\n \t@$(NORMAL_INSTALL)\n \ttest -z \"$(toolexeclibgoolddir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibgoolddir)\"\n@@ -3635,26 +3731,6 @@ uninstall-toolexeclibgoregexpDATA:\n \ttest -n \"$$files\" || exit 0; \\\n \techo \" ( cd '$(DESTDIR)$(toolexeclibgoregexpdir)' && rm -f\" $$files \")\"; \\\n \tcd \"$(DESTDIR)$(toolexeclibgoregexpdir)\" && rm -f $$files\n-install-toolexeclibgorpcDATA: $(toolexeclibgorpc_DATA)\n-\t@$(NORMAL_INSTALL)\n-\ttest -z \"$(toolexeclibgorpcdir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibgorpcdir)\"\n-\t@list='$(toolexeclibgorpc_DATA)'; test -n \"$(toolexeclibgorpcdir)\" || list=; \\\n-\tfor p in $$list; do \\\n-\t  if test -f \"$$p\"; then d=; else d=\"$(srcdir)/\"; fi; \\\n-\t  echo \"$$d$$p\"; \\\n-\tdone | $(am__base_list) | \\\n-\twhile read files; do \\\n-\t  echo \" $(INSTALL_DATA) $$files '$(DESTDIR)$(toolexeclibgorpcdir)'\"; \\\n-\t  $(INSTALL_DATA) $$files \"$(DESTDIR)$(toolexeclibgorpcdir)\" || exit $$?; \\\n-\tdone\n-\n-uninstall-toolexeclibgorpcDATA:\n-\t@$(NORMAL_UNINSTALL)\n-\t@list='$(toolexeclibgorpc_DATA)'; test -n \"$(toolexeclibgorpcdir)\" || list=; \\\n-\tfiles=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \\\n-\ttest -n \"$$files\" || exit 0; \\\n-\techo \" ( cd '$(DESTDIR)$(toolexeclibgorpcdir)' && rm -f\" $$files \")\"; \\\n-\tcd \"$(DESTDIR)$(toolexeclibgorpcdir)\" && rm -f $$files\n install-toolexeclibgoruntimeDATA: $(toolexeclibgoruntime_DATA)\n \t@$(NORMAL_INSTALL)\n \ttest -z \"$(toolexeclibgoruntimedir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibgoruntimedir)\"\n@@ -3695,46 +3771,86 @@ uninstall-toolexeclibgosyncDATA:\n \ttest -n \"$$files\" || exit 0; \\\n \techo \" ( cd '$(DESTDIR)$(toolexeclibgosyncdir)' && rm -f\" $$files \")\"; \\\n \tcd \"$(DESTDIR)$(toolexeclibgosyncdir)\" && rm -f $$files\n-install-toolexeclibgotemplateDATA: $(toolexeclibgotemplate_DATA)\n+install-toolexeclibgotestingDATA: $(toolexeclibgotesting_DATA)\n \t@$(NORMAL_INSTALL)\n-\ttest -z \"$(toolexeclibgotemplatedir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibgotemplatedir)\"\n-\t@list='$(toolexeclibgotemplate_DATA)'; test -n \"$(toolexeclibgotemplatedir)\" || list=; \\\n+\ttest -z \"$(toolexeclibgotestingdir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibgotestingdir)\"\n+\t@list='$(toolexeclibgotesting_DATA)'; test -n \"$(toolexeclibgotestingdir)\" || list=; \\\n \tfor p in $$list; do \\\n \t  if test -f \"$$p\"; then d=; else d=\"$(srcdir)/\"; fi; \\\n \t  echo \"$$d$$p\"; \\\n \tdone | $(am__base_list) | \\\n \twhile read files; do \\\n-\t  echo \" $(INSTALL_DATA) $$files '$(DESTDIR)$(toolexeclibgotemplatedir)'\"; \\\n-\t  $(INSTALL_DATA) $$files \"$(DESTDIR)$(toolexeclibgotemplatedir)\" || exit $$?; \\\n+\t  echo \" $(INSTALL_DATA) $$files '$(DESTDIR)$(toolexeclibgotestingdir)'\"; \\\n+\t  $(INSTALL_DATA) $$files \"$(DESTDIR)$(toolexeclibgotestingdir)\" || exit $$?; \\\n \tdone\n \n-uninstall-toolexeclibgotemplateDATA:\n+uninstall-toolexeclibgotestingDATA:\n \t@$(NORMAL_UNINSTALL)\n-\t@list='$(toolexeclibgotemplate_DATA)'; test -n \"$(toolexeclibgotemplatedir)\" || list=; \\\n+\t@list='$(toolexeclibgotesting_DATA)'; test -n \"$(toolexeclibgotestingdir)\" || list=; \\\n \tfiles=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \\\n \ttest -n \"$$files\" || exit 0; \\\n-\techo \" ( cd '$(DESTDIR)$(toolexeclibgotemplatedir)' && rm -f\" $$files \")\"; \\\n-\tcd \"$(DESTDIR)$(toolexeclibgotemplatedir)\" && rm -f $$files\n-install-toolexeclibgotestingDATA: $(toolexeclibgotesting_DATA)\n+\techo \" ( cd '$(DESTDIR)$(toolexeclibgotestingdir)' && rm -f\" $$files \")\"; \\\n+\tcd \"$(DESTDIR)$(toolexeclibgotestingdir)\" && rm -f $$files\n+install-toolexeclibgotextDATA: $(toolexeclibgotext_DATA)\n \t@$(NORMAL_INSTALL)\n-\ttest -z \"$(toolexeclibgotestingdir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibgotestingdir)\"\n-\t@list='$(toolexeclibgotesting_DATA)'; test -n \"$(toolexeclibgotestingdir)\" || list=; \\\n+\ttest -z \"$(toolexeclibgotextdir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibgotextdir)\"\n+\t@list='$(toolexeclibgotext_DATA)'; test -n \"$(toolexeclibgotextdir)\" || list=; \\\n \tfor p in $$list; do \\\n \t  if test -f \"$$p\"; then d=; else d=\"$(srcdir)/\"; fi; \\\n \t  echo \"$$d$$p\"; \\\n \tdone | $(am__base_list) | \\\n \twhile read files; do \\\n-\t  echo \" $(INSTALL_DATA) $$files '$(DESTDIR)$(toolexeclibgotestingdir)'\"; \\\n-\t  $(INSTALL_DATA) $$files \"$(DESTDIR)$(toolexeclibgotestingdir)\" || exit $$?; \\\n+\t  echo \" $(INSTALL_DATA) $$files '$(DESTDIR)$(toolexeclibgotextdir)'\"; \\\n+\t  $(INSTALL_DATA) $$files \"$(DESTDIR)$(toolexeclibgotextdir)\" || exit $$?; \\\n \tdone\n \n-uninstall-toolexeclibgotestingDATA:\n+uninstall-toolexeclibgotextDATA:\n \t@$(NORMAL_UNINSTALL)\n-\t@list='$(toolexeclibgotesting_DATA)'; test -n \"$(toolexeclibgotestingdir)\" || list=; \\\n+\t@list='$(toolexeclibgotext_DATA)'; test -n \"$(toolexeclibgotextdir)\" || list=; \\\n \tfiles=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \\\n \ttest -n \"$$files\" || exit 0; \\\n-\techo \" ( cd '$(DESTDIR)$(toolexeclibgotestingdir)' && rm -f\" $$files \")\"; \\\n-\tcd \"$(DESTDIR)$(toolexeclibgotestingdir)\" && rm -f $$files\n+\techo \" ( cd '$(DESTDIR)$(toolexeclibgotextdir)' && rm -f\" $$files \")\"; \\\n+\tcd \"$(DESTDIR)$(toolexeclibgotextdir)\" && rm -f $$files\n+install-toolexeclibgotexttemplateDATA: $(toolexeclibgotexttemplate_DATA)\n+\t@$(NORMAL_INSTALL)\n+\ttest -z \"$(toolexeclibgotexttemplatedir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibgotexttemplatedir)\"\n+\t@list='$(toolexeclibgotexttemplate_DATA)'; test -n \"$(toolexeclibgotexttemplatedir)\" || list=; \\\n+\tfor p in $$list; do \\\n+\t  if test -f \"$$p\"; then d=; else d=\"$(srcdir)/\"; fi; \\\n+\t  echo \"$$d$$p\"; \\\n+\tdone | $(am__base_list) | \\\n+\twhile read files; do \\\n+\t  echo \" $(INSTALL_DATA) $$files '$(DESTDIR)$(toolexeclibgotexttemplatedir)'\"; \\\n+\t  $(INSTALL_DATA) $$files \"$(DESTDIR)$(toolexeclibgotexttemplatedir)\" || exit $$?; \\\n+\tdone\n+\n+uninstall-toolexeclibgotexttemplateDATA:\n+\t@$(NORMAL_UNINSTALL)\n+\t@list='$(toolexeclibgotexttemplate_DATA)'; test -n \"$(toolexeclibgotexttemplatedir)\" || list=; \\\n+\tfiles=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \\\n+\ttest -n \"$$files\" || exit 0; \\\n+\techo \" ( cd '$(DESTDIR)$(toolexeclibgotexttemplatedir)' && rm -f\" $$files \")\"; \\\n+\tcd \"$(DESTDIR)$(toolexeclibgotexttemplatedir)\" && rm -f $$files\n+install-toolexeclibgounicodeDATA: $(toolexeclibgounicode_DATA)\n+\t@$(NORMAL_INSTALL)\n+\ttest -z \"$(toolexeclibgounicodedir)\" || $(MKDIR_P) \"$(DESTDIR)$(toolexeclibgounicodedir)\"\n+\t@list='$(toolexeclibgounicode_DATA)'; test -n \"$(toolexeclibgounicodedir)\" || list=; \\\n+\tfor p in $$list; do \\\n+\t  if test -f \"$$p\"; then d=; else d=\"$(srcdir)/\"; fi; \\\n+\t  echo \"$$d$$p\"; \\\n+\tdone | $(am__base_list) | \\\n+\twhile read files; do \\\n+\t  echo \" $(INSTALL_DATA) $$files '$(DESTDIR)$(toolexeclibgounicodedir)'\"; \\\n+\t  $(INSTALL_DATA) $$files \"$(DESTDIR)$(toolexeclibgounicodedir)\" || exit $$?; \\\n+\tdone\n+\n+uninstall-toolexeclibgounicodeDATA:\n+\t@$(NORMAL_UNINSTALL)\n+\t@list='$(toolexeclibgounicode_DATA)'; test -n \"$(toolexeclibgounicodedir)\" || list=; \\\n+\tfiles=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \\\n+\ttest -n \"$$files\" || exit 0; \\\n+\techo \" ( cd '$(DESTDIR)$(toolexeclibgounicodedir)' && rm -f\" $$files \")\"; \\\n+\tcd \"$(DESTDIR)$(toolexeclibgounicodedir)\" && rm -f $$files\n \n # This directory's subdirectories are mostly independent; you can cd\n # into them and run `make' without going through this Makefile.\n@@ -4052,7 +4168,7 @@ all-am: Makefile $(LIBRARIES) $(LTLIBRARIES) all-multi $(DATA) \\\n \t\tconfig.h\n installdirs: installdirs-recursive\n installdirs-am:\n-\tfor dir in \"$(DESTDIR)$(toolexeclibdir)\" \"$(DESTDIR)$(toolexeclibdir)\" \"$(DESTDIR)$(toolexeclibgodir)\" \"$(DESTDIR)$(toolexeclibgoarchivedir)\" \"$(DESTDIR)$(toolexeclibgocompressdir)\" \"$(DESTDIR)$(toolexeclibgocontainerdir)\" \"$(DESTDIR)$(toolexeclibgocryptodir)\" \"$(DESTDIR)$(toolexeclibgocryptoopenpgpdir)\" \"$(DESTDIR)$(toolexeclibgocryptox509dir)\" \"$(DESTDIR)$(toolexeclibgodebugdir)\" \"$(DESTDIR)$(toolexeclibgoencodingdir)\" \"$(DESTDIR)$(toolexeclibgoexpdir)\" \"$(DESTDIR)$(toolexeclibgoexpguidir)\" \"$(DESTDIR)$(toolexeclibgoexpsqldir)\" \"$(DESTDIR)$(toolexeclibgoexptemplatedir)\" \"$(DESTDIR)$(toolexeclibgogodir)\" \"$(DESTDIR)$(toolexeclibgohashdir)\" \"$(DESTDIR)$(toolexeclibgohttpdir)\" \"$(DESTDIR)$(toolexeclibgoimagedir)\" \"$(DESTDIR)$(toolexeclibgoindexdir)\" \"$(DESTDIR)$(toolexeclibgoiodir)\" \"$(DESTDIR)$(toolexeclibgomimedir)\" \"$(DESTDIR)$(toolexeclibgonetdir)\" \"$(DESTDIR)$(toolexeclibgoolddir)\" \"$(DESTDIR)$(toolexeclibgoosdir)\" \"$(DESTDIR)$(toolexeclibgopathdir)\" \"$(DESTDIR)$(toolexeclibgoregexpdir)\" \"$(DESTDIR)$(toolexeclibgorpcdir)\" \"$(DESTDIR)$(toolexeclibgoruntimedir)\" \"$(DESTDIR)$(toolexeclibgosyncdir)\" \"$(DESTDIR)$(toolexeclibgotemplatedir)\" \"$(DESTDIR)$(toolexeclibgotestingdir)\"; do \\\n+\tfor dir in \"$(DESTDIR)$(toolexeclibdir)\" \"$(DESTDIR)$(toolexeclibdir)\" \"$(DESTDIR)$(toolexeclibgodir)\" \"$(DESTDIR)$(toolexeclibgoarchivedir)\" \"$(DESTDIR)$(toolexeclibgocompressdir)\" \"$(DESTDIR)$(toolexeclibgocontainerdir)\" \"$(DESTDIR)$(toolexeclibgocryptodir)\" \"$(DESTDIR)$(toolexeclibgocryptoopenpgpdir)\" \"$(DESTDIR)$(toolexeclibgocryptox509dir)\" \"$(DESTDIR)$(toolexeclibgodebugdir)\" \"$(DESTDIR)$(toolexeclibgoencodingdir)\" \"$(DESTDIR)$(toolexeclibgoexpdir)\" \"$(DESTDIR)$(toolexeclibgoexpguidir)\" \"$(DESTDIR)$(toolexeclibgoexpsqldir)\" \"$(DESTDIR)$(toolexeclibgogodir)\" \"$(DESTDIR)$(toolexeclibgohashdir)\" \"$(DESTDIR)$(toolexeclibgohtmldir)\" \"$(DESTDIR)$(toolexeclibgoimagedir)\" \"$(DESTDIR)$(toolexeclibgoindexdir)\" \"$(DESTDIR)$(toolexeclibgoiodir)\" \"$(DESTDIR)$(toolexeclibgologdir)\" \"$(DESTDIR)$(toolexeclibgomathdir)\" \"$(DESTDIR)$(toolexeclibgomimedir)\" \"$(DESTDIR)$(toolexeclibgonetdir)\" \"$(DESTDIR)$(toolexeclibgonethttpdir)\" \"$(DESTDIR)$(toolexeclibgonetrpcdir)\" \"$(DESTDIR)$(toolexeclibgoolddir)\" \"$(DESTDIR)$(toolexeclibgoosdir)\" \"$(DESTDIR)$(toolexeclibgopathdir)\" \"$(DESTDIR)$(toolexeclibgoregexpdir)\" \"$(DESTDIR)$(toolexeclibgoruntimedir)\" \"$(DESTDIR)$(toolexeclibgosyncdir)\" \"$(DESTDIR)$(toolexeclibgotestingdir)\" \"$(DESTDIR)$(toolexeclibgotextdir)\" \"$(DESTDIR)$(toolexeclibgotexttemplatedir)\" \"$(DESTDIR)$(toolexeclibgounicodedir)\"; do \\\n \t  test -z \"$$dir\" || $(MKDIR_P) \"$$dir\"; \\\n \tdone\n install: install-recursive\n@@ -4123,18 +4239,19 @@ install-exec-am: install-multi install-toolexeclibLIBRARIES \\\n \tinstall-toolexeclibgodebugDATA \\\n \tinstall-toolexeclibgoencodingDATA install-toolexeclibgoexpDATA \\\n \tinstall-toolexeclibgoexpguiDATA \\\n-\tinstall-toolexeclibgoexpsqlDATA \\\n-\tinstall-toolexeclibgoexptemplateDATA \\\n-\tinstall-toolexeclibgogoDATA install-toolexeclibgohashDATA \\\n-\tinstall-toolexeclibgohttpDATA install-toolexeclibgoimageDATA \\\n-\tinstall-toolexeclibgoindexDATA install-toolexeclibgoioDATA \\\n-\tinstall-toolexeclibgomimeDATA install-toolexeclibgonetDATA \\\n-\tinstall-toolexeclibgooldDATA install-toolexeclibgoosDATA \\\n-\tinstall-toolexeclibgopathDATA install-toolexeclibgoregexpDATA \\\n-\tinstall-toolexeclibgorpcDATA install-toolexeclibgoruntimeDATA \\\n-\tinstall-toolexeclibgosyncDATA \\\n-\tinstall-toolexeclibgotemplateDATA \\\n-\tinstall-toolexeclibgotestingDATA\n+\tinstall-toolexeclibgoexpsqlDATA install-toolexeclibgogoDATA \\\n+\tinstall-toolexeclibgohashDATA install-toolexeclibgohtmlDATA \\\n+\tinstall-toolexeclibgoimageDATA install-toolexeclibgoindexDATA \\\n+\tinstall-toolexeclibgoioDATA install-toolexeclibgologDATA \\\n+\tinstall-toolexeclibgomathDATA install-toolexeclibgomimeDATA \\\n+\tinstall-toolexeclibgonetDATA install-toolexeclibgonethttpDATA \\\n+\tinstall-toolexeclibgonetrpcDATA install-toolexeclibgooldDATA \\\n+\tinstall-toolexeclibgoosDATA install-toolexeclibgopathDATA \\\n+\tinstall-toolexeclibgoregexpDATA \\\n+\tinstall-toolexeclibgoruntimeDATA install-toolexeclibgosyncDATA \\\n+\tinstall-toolexeclibgotestingDATA install-toolexeclibgotextDATA \\\n+\tinstall-toolexeclibgotexttemplateDATA \\\n+\tinstall-toolexeclibgounicodeDATA\n \n install-html: install-html-recursive\n \n@@ -4189,20 +4306,23 @@ uninstall-am: uninstall-toolexeclibLIBRARIES \\\n \tuninstall-toolexeclibgoexpDATA \\\n \tuninstall-toolexeclibgoexpguiDATA \\\n \tuninstall-toolexeclibgoexpsqlDATA \\\n-\tuninstall-toolexeclibgoexptemplateDATA \\\n \tuninstall-toolexeclibgogoDATA uninstall-toolexeclibgohashDATA \\\n-\tuninstall-toolexeclibgohttpDATA \\\n+\tuninstall-toolexeclibgohtmlDATA \\\n \tuninstall-toolexeclibgoimageDATA \\\n \tuninstall-toolexeclibgoindexDATA uninstall-toolexeclibgoioDATA \\\n+\tuninstall-toolexeclibgologDATA uninstall-toolexeclibgomathDATA \\\n \tuninstall-toolexeclibgomimeDATA uninstall-toolexeclibgonetDATA \\\n+\tuninstall-toolexeclibgonethttpDATA \\\n+\tuninstall-toolexeclibgonetrpcDATA \\\n \tuninstall-toolexeclibgooldDATA uninstall-toolexeclibgoosDATA \\\n \tuninstall-toolexeclibgopathDATA \\\n \tuninstall-toolexeclibgoregexpDATA \\\n-\tuninstall-toolexeclibgorpcDATA \\\n \tuninstall-toolexeclibgoruntimeDATA \\\n \tuninstall-toolexeclibgosyncDATA \\\n-\tuninstall-toolexeclibgotemplateDATA \\\n-\tuninstall-toolexeclibgotestingDATA\n+\tuninstall-toolexeclibgotestingDATA \\\n+\tuninstall-toolexeclibgotextDATA \\\n+\tuninstall-toolexeclibgotexttemplateDATA \\\n+\tuninstall-toolexeclibgounicodeDATA\n \n .MAKE: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) all all-multi \\\n \tclean-multi ctags-recursive distclean-multi install-am \\\n@@ -4233,18 +4353,19 @@ uninstall-am: uninstall-toolexeclibLIBRARIES \\\n \tinstall-toolexeclibgodebugDATA \\\n \tinstall-toolexeclibgoencodingDATA install-toolexeclibgoexpDATA \\\n \tinstall-toolexeclibgoexpguiDATA \\\n-\tinstall-toolexeclibgoexpsqlDATA \\\n-\tinstall-toolexeclibgoexptemplateDATA \\\n-\tinstall-toolexeclibgogoDATA install-toolexeclibgohashDATA \\\n-\tinstall-toolexeclibgohttpDATA install-toolexeclibgoimageDATA \\\n-\tinstall-toolexeclibgoindexDATA install-toolexeclibgoioDATA \\\n-\tinstall-toolexeclibgomimeDATA install-toolexeclibgonetDATA \\\n-\tinstall-toolexeclibgooldDATA install-toolexeclibgoosDATA \\\n-\tinstall-toolexeclibgopathDATA install-toolexeclibgoregexpDATA \\\n-\tinstall-toolexeclibgorpcDATA install-toolexeclibgoruntimeDATA \\\n-\tinstall-toolexeclibgosyncDATA \\\n-\tinstall-toolexeclibgotemplateDATA \\\n-\tinstall-toolexeclibgotestingDATA installcheck installcheck-am \\\n+\tinstall-toolexeclibgoexpsqlDATA install-toolexeclibgogoDATA \\\n+\tinstall-toolexeclibgohashDATA install-toolexeclibgohtmlDATA \\\n+\tinstall-toolexeclibgoimageDATA install-toolexeclibgoindexDATA \\\n+\tinstall-toolexeclibgoioDATA install-toolexeclibgologDATA \\\n+\tinstall-toolexeclibgomathDATA install-toolexeclibgomimeDATA \\\n+\tinstall-toolexeclibgonetDATA install-toolexeclibgonethttpDATA \\\n+\tinstall-toolexeclibgonetrpcDATA install-toolexeclibgooldDATA \\\n+\tinstall-toolexeclibgoosDATA install-toolexeclibgopathDATA \\\n+\tinstall-toolexeclibgoregexpDATA \\\n+\tinstall-toolexeclibgoruntimeDATA install-toolexeclibgosyncDATA \\\n+\tinstall-toolexeclibgotestingDATA install-toolexeclibgotextDATA \\\n+\tinstall-toolexeclibgotexttemplateDATA \\\n+\tinstall-toolexeclibgounicodeDATA installcheck installcheck-am \\\n \tinstalldirs installdirs-am maintainer-clean \\\n \tmaintainer-clean-generic maintainer-clean-multi mostlyclean \\\n \tmostlyclean-compile mostlyclean-generic mostlyclean-libtool \\\n@@ -4263,20 +4384,23 @@ uninstall-am: uninstall-toolexeclibLIBRARIES \\\n \tuninstall-toolexeclibgoexpDATA \\\n \tuninstall-toolexeclibgoexpguiDATA \\\n \tuninstall-toolexeclibgoexpsqlDATA \\\n-\tuninstall-toolexeclibgoexptemplateDATA \\\n \tuninstall-toolexeclibgogoDATA uninstall-toolexeclibgohashDATA \\\n-\tuninstall-toolexeclibgohttpDATA \\\n+\tuninstall-toolexeclibgohtmlDATA \\\n \tuninstall-toolexeclibgoimageDATA \\\n \tuninstall-toolexeclibgoindexDATA uninstall-toolexeclibgoioDATA \\\n+\tuninstall-toolexeclibgologDATA uninstall-toolexeclibgomathDATA \\\n \tuninstall-toolexeclibgomimeDATA uninstall-toolexeclibgonetDATA \\\n+\tuninstall-toolexeclibgonethttpDATA \\\n+\tuninstall-toolexeclibgonetrpcDATA \\\n \tuninstall-toolexeclibgooldDATA uninstall-toolexeclibgoosDATA \\\n \tuninstall-toolexeclibgopathDATA \\\n \tuninstall-toolexeclibgoregexpDATA \\\n-\tuninstall-toolexeclibgorpcDATA \\\n \tuninstall-toolexeclibgoruntimeDATA \\\n \tuninstall-toolexeclibgosyncDATA \\\n-\tuninstall-toolexeclibgotemplateDATA \\\n-\tuninstall-toolexeclibgotestingDATA\n+\tuninstall-toolexeclibgotestingDATA \\\n+\tuninstall-toolexeclibgotextDATA \\\n+\tuninstall-toolexeclibgotexttemplateDATA \\\n+\tuninstall-toolexeclibgounicodeDATA\n \n \n goc2c.$(OBJEXT): runtime/goc2c.c\n@@ -4309,6 +4433,10 @@ sigqueue.c: $(srcdir)/runtime/sigqueue.goc goc2c\n \t./goc2c --gcc --go-prefix libgo_runtime $< > $@.tmp\n \tmv -f $@.tmp $@\n \n+time.c: $(srcdir)/runtime/time.goc goc2c\n+\t./goc2c --gcc --go-prefix libgo_time $< > $@.tmp\n+\tmv -f $@.tmp $@\n+\n %.c: $(srcdir)/runtime/%.goc goc2c\n \t./goc2c --gcc $< > $@.tmp\n \tmv -f $@.tmp $@\n@@ -4375,24 +4503,6 @@ s-epoll: Makefile\n \t$(SHELL) $(srcdir)/../move-if-change epoll.go.tmp epoll.go\n \t$(STAMP) $@\n \n-@go_include@ asn1/asn1.lo.dep\n-asn1/asn1.lo.dep: $(go_asn1_files)\n-\t$(BUILDDEPS)\n-asn1/asn1.lo: $(go_asn1_files)\n-\t$(BUILDPACKAGE)\n-asn1/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: asn1/check\n-\n-@go_include@ big/big.lo.dep\n-big/big.lo.dep: $(go_big_files)\n-\t$(BUILDDEPS)\n-big/big.lo: $(go_big_files)\n-\t$(BUILDPACKAGE)\n-big/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: big/check\n-\n @go_include@ bufio/bufio.lo.dep\n bufio/bufio.lo.dep: $(go_bufio_files)\n \t$(BUILDDEPS)\n@@ -4413,15 +4523,6 @@ bytes/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: bytes/check\n \n-@go_include@ cmath/cmath.lo.dep\n-cmath/cmath.lo.dep: $(go_cmath_files)\n-\t$(BUILDDEPS)\n-cmath/cmath.lo: $(go_cmath_files)\n-\t$(BUILDPACKAGE)\n-cmath/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: cmath/check\n-\n @go_include@ crypto/crypto.lo.dep\n crypto/crypto.lo.dep: $(go_crypto_files)\n \t$(BUILDDEPS)\n@@ -4431,15 +4532,6 @@ crypto/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: crypto/check\n \n-@go_include@ csv/csv.lo.dep\n-csv/csv.lo.dep: $(go_csv_files)\n-\t$(BUILDDEPS)\n-csv/csv.lo: $(go_csv_files)\n-\t$(BUILDPACKAGE)\n-csv/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: csv/check\n-\n @go_include@ errors/errors.lo.dep\n errors/errors.lo.dep: $(go_errors_files)\n \t$(BUILDDEPS)\n@@ -4449,15 +4541,6 @@ errors/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: errors/check\n \n-@go_include@ exec/exec.lo.dep\n-exec/exec.lo.dep: $(go_exec_files)\n-\t$(BUILDDEPS)\n-exec/exec.lo: $(go_exec_files)\n-\t$(BUILDPACKAGE)\n-exec/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: exec/check\n-\n @go_include@ expvar/expvar.lo.dep\n expvar/expvar.lo.dep: $(go_expvar_files)\n \t$(BUILDDEPS)\n@@ -4485,15 +4568,6 @@ fmt/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: fmt/check\n \n-@go_include@ gob/gob.lo.dep\n-gob/gob.lo.dep: $(go_gob_files)\n-\t$(BUILDDEPS)\n-gob/gob.lo: $(go_gob_files)\n-\t$(BUILDPACKAGE)\n-gob/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: gob/check\n-\n @go_include@ hash/hash.lo.dep\n hash/hash.lo.dep: $(go_hash_files)\n \t$(BUILDDEPS)\n@@ -4512,15 +4586,6 @@ html/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: html/check\n \n-@go_include@ http/http.lo.dep\n-http/http.lo.dep: $(go_http_files)\n-\t$(BUILDDEPS)\n-http/http.lo: $(go_http_files)\n-\t$(BUILDPACKAGE)\n-http/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: http/check\n-\n @go_include@ image/image.lo.dep\n image/image.lo.dep: $(go_image_files)\n \t$(BUILDDEPS)\n@@ -4539,15 +4604,6 @@ io/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: io/check\n \n-@go_include@ json/json.lo.dep\n-json/json.lo.dep: $(go_json_files)\n-\t$(BUILDDEPS)\n-json/json.lo: $(go_json_files)\n-\t$(BUILDPACKAGE)\n-json/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: json/check\n-\n @go_include@ log/log.lo.dep\n log/log.lo.dep: $(go_log_files)\n \t$(BUILDDEPS)\n@@ -4566,15 +4622,6 @@ math/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: math/check\n \n-@go_include@ mail/mail.lo.dep\n-mail/mail.lo.dep: $(go_mail_files)\n-\t$(BUILDDEPS)\n-mail/mail.lo: $(go_mail_files)\n-\t$(BUILDPACKAGE)\n-mail/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: mail/check\n-\n @go_include@ mime/mime.lo.dep\n mime/mime.lo.dep: $(go_mime_files)\n \t$(BUILDDEPS)\n@@ -4624,15 +4671,6 @@ path/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: path/check\n \n-@go_include@ rand/rand.lo.dep\n-rand/rand.lo.dep: $(go_rand_files)\n-\t$(BUILDDEPS)\n-rand/rand.lo: $(go_rand_files)\n-\t$(BUILDPACKAGE)\n-rand/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: rand/check\n-\n @go_include@ reflect/reflect.lo.dep\n reflect/reflect.lo.dep: $(go_reflect_files)\n \t$(BUILDDEPS)\n@@ -4651,15 +4689,6 @@ regexp/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: regexp/check\n \n-@go_include@ rpc/rpc.lo.dep\n-rpc/rpc.lo.dep: $(go_rpc_files)\n-\t$(BUILDDEPS)\n-rpc/rpc.lo: $(go_rpc_files)\n-\t$(BUILDPACKAGE)\n-rpc/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: rpc/check\n-\n @go_include@ runtime/runtime.lo.dep\n runtime/runtime.lo.dep: $(go_runtime_files)\n \t$(BUILDDEPS)\n@@ -4669,23 +4698,15 @@ runtime/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: runtime/check\n \n-@go_include@ scanner/scanner.lo.dep\n-scanner/scanner.lo.dep: $(go_scanner_files)\n-\t$(BUILDDEPS)\n-scanner/scanner.lo: $(go_scanner_files)\n-\t$(BUILDPACKAGE)\n-scanner/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: scanner/check\n-\n-@go_include@ smtp/smtp.lo.dep\n-smtp/smtp.lo.dep: $(go_smtp_files)\n+@go_include@ text/scanner.lo.dep\n+text/scanner.lo.dep: $(go_text_scanner_files)\n \t$(BUILDDEPS)\n-smtp/smtp.lo: $(go_smtp_files)\n+text/scanner.lo: $(go_text_scanner_files)\n \t$(BUILDPACKAGE)\n-smtp/check: $(CHECK_DEPS)\n+text/scanner/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) text/scanner\n \t@$(CHECK)\n-.PHONY: smtp/check\n+.PHONY: text/scanner/check\n \n @go_include@ sort/sort.lo.dep\n sort/sort.lo.dep: $(go_sort_files)\n@@ -4723,35 +4744,6 @@ sync/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: sync/check\n \n-@go_include@ syslog/syslog.lo.dep\n-syslog/syslog.lo.dep: $(go_syslog_files)\n-\t$(BUILDDEPS)\n-syslog/syslog.lo: $(go_syslog_files)\n-\t$(BUILDPACKAGE)\n-syslog/syslog_c.lo: $(go_syslog_c_files) syslog/syslog.lo\n-\t$(LTCOMPILE) -c -o $@ $(srcdir)/go/syslog/syslog_c.c\n-syslog/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: syslog/check\n-\n-@go_include@ tabwriter/tabwriter.lo.dep\n-tabwriter/tabwriter.lo.dep: $(go_tabwriter_files)\n-\t$(BUILDDEPS)\n-tabwriter/tabwriter.lo: $(go_tabwriter_files)\n-\t$(BUILDPACKAGE)\n-tabwriter/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: tabwriter/check\n-\n-@go_include@ template/template.lo.dep\n-template/template.lo.dep: $(go_template_files)\n-\t$(BUILDDEPS)\n-template/template.lo: $(go_template_files)\n-\t$(BUILDPACKAGE)\n-template/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: template/check\n-\n @go_include@ testing/testing.lo.dep\n testing/testing.lo.dep: $(go_testing_files)\n \t$(BUILDDEPS)\n@@ -4779,33 +4771,6 @@ unicode/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: unicode/check\n \n-@go_include@ url/url.lo.dep\n-url/url.lo.dep: $(go_url_files)\n-\t$(BUILDDEPS)\n-url/url.lo: $(go_url_files)\n-\t$(BUILDPACKAGE)\n-url/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: url/check\n-\n-@go_include@ utf16/utf16.lo.dep\n-utf16/utf16.lo.dep: $(go_utf16_files)\n-\t$(BUILDDEPS)\n-utf16/utf16.lo: $(go_utf16_files)\n-\t$(BUILDPACKAGE)\n-utf16/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: utf16/check\n-\n-@go_include@ utf8/utf8.lo.dep\n-utf8/utf8.lo.dep: $(go_utf8_files)\n-\t$(BUILDDEPS)\n-utf8/utf8.lo: $(go_utf8_files)\n-\t$(BUILDPACKAGE)\n-utf8/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: utf8/check\n-\n @go_include@ websocket/websocket.lo.dep\n websocket/websocket.lo.dep: $(go_websocket_files)\n \t$(BUILDDEPS)\n@@ -4815,15 +4780,6 @@ websocket/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: websocket/check\n \n-@go_include@ xml/xml.lo.dep\n-xml/xml.lo.dep: $(go_xml_files)\n-\t$(BUILDDEPS)\n-xml/xml.lo: $(go_xml_files)\n-\t$(BUILDPACKAGE)\n-xml/check: $(CHECK_DEPS)\n-\t@$(CHECK)\n-.PHONY: xml/check\n-\n @go_include@ archive/tar.lo.dep\n archive/tar.lo.dep: $(go_archive_tar_files)\n \t$(BUILDDEPS)\n@@ -5294,6 +5250,16 @@ debug/pe/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: debug/pe/check\n \n+@go_include@ encoding/asn1.lo.dep\n+encoding/asn1.lo.dep: $(go_encoding_asn1_files)\n+\t$(BUILDDEPS)\n+encoding/asn1.lo: $(go_encoding_asn1_files)\n+\t$(BUILDPACKAGE)\n+encoding/asn1/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) encoding/asn1\n+\t@$(CHECK)\n+.PHONY: encoding/asn1/check\n+\n @go_include@ encoding/ascii85.lo.dep\n encoding/ascii85.lo.dep: $(go_encoding_ascii85_files)\n \t$(BUILDDEPS)\n@@ -5334,6 +5300,16 @@ encoding/binary/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: encoding/binary/check\n \n+@go_include@ encoding/csv.lo.dep\n+encoding/csv.lo.dep: $(go_encoding_csv_files)\n+\t$(BUILDDEPS)\n+encoding/csv.lo: $(go_encoding_csv_files)\n+\t$(BUILDPACKAGE)\n+encoding/csv/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) encoding/csv\n+\t@$(CHECK)\n+.PHONY: encoding/csv/check\n+\n @go_include@ encoding/git85.lo.dep\n encoding/git85.lo.dep: $(go_encoding_git85_files)\n \t$(BUILDDEPS)\n@@ -5344,6 +5320,16 @@ encoding/git85/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: encoding/git85/check\n \n+@go_include@ encoding/gob.lo.dep\n+encoding/gob.lo.dep: $(go_encoding_gob_files)\n+\t$(BUILDDEPS)\n+encoding/gob.lo: $(go_encoding_gob_files)\n+\t$(BUILDPACKAGE)\n+encoding/gob/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) encoding/gob\n+\t@$(CHECK)\n+.PHONY: encoding/gob/check\n+\n @go_include@ encoding/hex.lo.dep\n encoding/hex.lo.dep: $(go_encoding_hex_files)\n \t$(BUILDDEPS)\n@@ -5354,6 +5340,16 @@ encoding/hex/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: encoding/hex/check\n \n+@go_include@ encoding/json.lo.dep\n+encoding/json.lo.dep: $(go_encoding_json_files)\n+\t$(BUILDDEPS)\n+encoding/json.lo: $(go_encoding_json_files)\n+\t$(BUILDPACKAGE)\n+encoding/json/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) encoding/json\n+\t@$(CHECK)\n+.PHONY: encoding/json/check\n+\n @go_include@ encoding/pem.lo.dep\n encoding/pem.lo.dep: $(go_encoding_pem_files)\n \t$(BUILDDEPS)\n@@ -5364,6 +5360,16 @@ encoding/pem/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: encoding/pem/check\n \n+@go_include@ encoding/xml.lo.dep\n+encoding/xml.lo.dep: $(go_encoding_xml_files)\n+\t$(BUILDDEPS)\n+encoding/xml.lo: $(go_encoding_xml_files)\n+\t$(BUILDPACKAGE)\n+encoding/xml/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) encoding/xml\n+\t@$(CHECK)\n+.PHONY: encoding/xml/check\n+\n @go_include@ exp/ebnf.lo.dep\n exp/ebnf.lo.dep: $(go_exp_ebnf_files)\n \t$(BUILDDEPS)\n@@ -5474,15 +5480,15 @@ exp/sql/driver/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: exp/sql/driver/check\n \n-@go_include@ exp/template/html.lo.dep\n-exp/template/html.lo.dep: $(go_exp_template_html_files)\n+@go_include@ html/template.lo.dep\n+html/template.lo.dep: $(go_html_template_files)\n \t$(BUILDDEPS)\n-exp/template/html.lo: $(go_exp_template_html_files)\n+html/template.lo: $(go_html_template_files)\n \t$(BUILDPACKAGE)\n-exp/template/html/check: $(CHECK_DEPS)\n-\t@$(MKDIR_P) exp/template/html\n+html/template/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) html/template\n \t@$(CHECK)\n-.PHONY: exp/template/html/check\n+.PHONY: html/template/check\n \n @go_include@ go/ast.lo.dep\n go/ast.lo.dep: $(go_go_ast_files)\n@@ -5603,46 +5609,6 @@ hash/fnv/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: hash/fnv/check\n \n-@go_include@ http/cgi.lo.dep\n-http/cgi.lo.dep: $(go_http_cgi_files)\n-\t$(BUILDDEPS)\n-http/cgi.lo: $(go_http_cgi_files)\n-\t$(BUILDPACKAGE)\n-http/cgi/check: $(CHECK_DEPS)\n-\t@$(MKDIR_P) http/cgi\n-\t@$(CHECK)\n-.PHONY: http/cgi/check\n-\n-@go_include@ http/fcgi.lo.dep\n-http/fcgi.lo.dep: $(go_http_fcgi_files)\n-\t$(BUILDDEPS)\n-http/fcgi.lo: $(go_http_fcgi_files)\n-\t$(BUILDPACKAGE)\n-http/fcgi/check: $(CHECK_DEPS)\n-\t@$(MKDIR_P) http/fcgi\n-\t@$(CHECK)\n-.PHONY: http/fcgi/check\n-\n-@go_include@ http/httptest.lo.dep\n-http/httptest.lo.dep: $(go_http_httptest_files)\n-\t$(BUILDDEPS)\n-http/httptest.lo: $(go_http_httptest_files)\n-\t$(BUILDPACKAGE)\n-http/httptest/check: $(CHECK_DEPS)\n-\t@$(MKDIR_P) http/httptest\n-\t@$(CHECK)\n-.PHONY: http/httptest/check\n-\n-@go_include@ http/pprof.lo.dep\n-http/pprof.lo.dep: $(go_http_pprof_files)\n-\t$(BUILDDEPS)\n-http/pprof.lo: $(go_http_pprof_files)\n-\t$(BUILDPACKAGE)\n-http/pprof/check: $(CHECK_DEPS)\n-\t@$(MKDIR_P) http/pprof\n-\t@$(CHECK)\n-.PHONY: http/pprof/check\n-\n @go_include@ image/bmp.lo.dep\n image/bmp.lo.dep: $(go_image_bmp_files)\n \t$(BUILDDEPS)\n@@ -5743,6 +5709,48 @@ io/ioutil/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: io/ioutil/check\n \n+@go_include@ log/syslog.lo.dep\n+log/syslog.lo.dep: $(go_log_syslog_files)\n+\t$(BUILDDEPS)\n+log/syslog.lo: $(go_log_syslog_files)\n+\t$(BUILDPACKAGE)\n+log/syslog/syslog_c.lo: $(go_syslog_c_files) log/syslog.lo\n+\t$(LTCOMPILE) -c -o $@ $(srcdir)/go/log/syslog/syslog_c.c\n+log/syslog/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) log/syslog\n+\t@$(CHECK)\n+.PHONY: log/syslog/check\n+\n+@go_include@ math/big.lo.dep\n+math/big.lo.dep: $(go_math_big_files)\n+\t$(BUILDDEPS)\n+math/big.lo: $(go_math_big_files)\n+\t$(BUILDPACKAGE)\n+math/big/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) math/big\n+\t@$(CHECK)\n+.PHONY: math/big/check\n+\n+@go_include@ math/cmplx.lo.dep\n+math/cmplx.lo.dep: $(go_math_cmplx_files)\n+\t$(BUILDDEPS)\n+math/cmplx.lo: $(go_math_cmplx_files)\n+\t$(BUILDPACKAGE)\n+math/cmplx/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) math/cmplx\n+\t@$(CHECK)\n+.PHONY: math/cmplx/check\n+\n+@go_include@ math/rand.lo.dep\n+math/rand.lo.dep: $(go_math_rand_files)\n+\t$(BUILDDEPS)\n+math/rand.lo: $(go_math_rand_files)\n+\t$(BUILDPACKAGE)\n+math/rand/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) math/rand\n+\t@$(CHECK)\n+.PHONY: math/rand/check\n+\n @go_include@ mime/multipart.lo.dep\n mime/multipart.lo.dep: $(go_mime_multipart_files)\n \t$(BUILDDEPS)\n@@ -5759,6 +5767,56 @@ net/dict.lo.dep: $(go_net_dict_files)\n net/dict.lo: $(go_net_dict_files)\n \t$(BUILDPACKAGE)\n \n+@go_include@ net/http.lo.dep\n+net/http.lo.dep: $(go_net_http_files)\n+\t$(BUILDDEPS)\n+net/http.lo: $(go_net_http_files)\n+\t$(BUILDPACKAGE)\n+net/http/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) net/http\n+\t@$(CHECK)\n+.PHONY: net/http/check\n+\n+@go_include@ net/mail.lo.dep\n+net/mail.lo.dep: $(go_net_mail_files)\n+\t$(BUILDDEPS)\n+net/mail.lo: $(go_net_mail_files)\n+\t$(BUILDPACKAGE)\n+net/mail/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) net/mail\n+\t@$(CHECK)\n+.PHONY: net/mail/check\n+\n+@go_include@ net/rpc.lo.dep\n+net/rpc.lo.dep: $(go_net_rpc_files)\n+\t$(BUILDDEPS)\n+net/rpc.lo: $(go_net_rpc_files)\n+\t$(BUILDPACKAGE)\n+net/rpc/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) net/rpc\n+\t@$(CHECK)\n+.PHONY: net/rpc/check\n+\n+@go_include@ net/smtp.lo.dep\n+net/smtp.lo.dep: $(go_net_smtp_files)\n+\t$(BUILDDEPS)\n+net/smtp.lo: $(go_net_smtp_files)\n+\t$(BUILDPACKAGE)\n+net/smtp/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) net/smtp\n+\t@$(CHECK)\n+.PHONY: net/smtp/check\n+\n+@go_include@ net/url.lo.dep\n+net/url.lo.dep: $(go_net_url_files)\n+\t$(BUILDDEPS)\n+net/url.lo: $(go_net_url_files)\n+\t$(BUILDPACKAGE)\n+net/url/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) net/url\n+\t@$(CHECK)\n+.PHONY: net/url/check\n+\n @go_include@ net/textproto.lo.dep\n net/textproto.lo.dep: $(go_net_textproto_files)\n \t$(BUILDDEPS)\n@@ -5769,6 +5827,66 @@ net/textproto/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: net/textproto/check\n \n+@go_include@ net/http/cgi.lo.dep\n+net/http/cgi.lo.dep: $(go_net_http_cgi_files)\n+\t$(BUILDDEPS)\n+net/http/cgi.lo: $(go_net_http_cgi_files)\n+\t$(BUILDPACKAGE)\n+net/http/cgi/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) net/http/cgi\n+\t@$(CHECK)\n+.PHONY: net/http/cgi/check\n+\n+@go_include@ net/http/fcgi.lo.dep\n+net/http/fcgi.lo.dep: $(go_net_http_fcgi_files)\n+\t$(BUILDDEPS)\n+net/http/fcgi.lo: $(go_net_http_fcgi_files)\n+\t$(BUILDPACKAGE)\n+net/http/fcgi/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) net/http/fcgi\n+\t@$(CHECK)\n+.PHONY: net/http/fcgi/check\n+\n+@go_include@ net/http/httptest.lo.dep\n+net/http/httptest.lo.dep: $(go_net_http_httptest_files)\n+\t$(BUILDDEPS)\n+net/http/httptest.lo: $(go_net_http_httptest_files)\n+\t$(BUILDPACKAGE)\n+net/http/httptest/check: $(check_deps)\n+\t@$(MKDIR_P) net/http/httptest\n+\t@$(CHECK)\n+.PHONY: net/http/httptest/check\n+\n+@go_include@ net/http/httputil.lo.dep\n+net/http/httputil.lo.dep: $(go_net_http_httputil_files)\n+\t$(BUILDDEPS)\n+net/http/httputil.lo: $(go_net_http_httputil_files)\n+\t$(BUILDPACKAGE)\n+net/http/httputil/check: $(check_deps)\n+\t@$(MKDIR_P) net/http/httputil\n+\t@$(CHECK)\n+.PHONY: net/http/httputil/check\n+\n+@go_include@ net/http/pprof.lo.dep\n+net/http/pprof.lo.dep: $(go_net_http_pprof_files)\n+\t$(BUILDDEPS)\n+net/http/pprof.lo: $(go_net_http_pprof_files)\n+\t$(BUILDPACKAGE)\n+net/http/pprof/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) net/http/pprof\n+\t@$(CHECK)\n+.PHONY: net/http/pprof/check\n+\n+@go_include@ net/rpc/jsonrpc.lo.dep\n+net/rpc/jsonrpc.lo.dep: $(go_net_rpc_jsonrpc_files)\n+\t$(BUILDDEPS)\n+net/rpc/jsonrpc.lo: $(go_net_rpc_jsonrpc_files)\n+\t$(BUILDPACKAGE)\n+net/rpc/jsonrpc/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) net/rpc/jsonrpc\n+\t@$(CHECK)\n+.PHONY: net/rpc/jsonrpc/check\n+\n @go_include@ old/netchan.lo.dep\n old/netchan.lo.dep: $(go_old_netchan_files)\n \t$(BUILDDEPS)\n@@ -5799,6 +5917,16 @@ old/template/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: old/template/check\n \n+@go_include@ os/exec.lo.dep\n+os/exec.lo.dep: $(go_os_exec_files)\n+\t$(BUILDDEPS)\n+os/exec.lo: $(go_os_exec_files)\n+\t$(BUILDPACKAGE)\n+os/exec/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) os/exec\n+\t@$(CHECK)\n+.PHONY: os/exec/check\n+\n @go_include@ os/user.lo.dep\n os/user.lo.dep: $(go_os_user_files)\n \t$(BUILDDEPS)\n@@ -5839,16 +5967,6 @@ regexp/syntax/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: regexp/syntax/check\n \n-@go_include@ rpc/jsonrpc.lo.dep\n-rpc/jsonrpc.lo.dep: $(go_rpc_jsonrpc_files)\n-\t$(BUILDDEPS)\n-rpc/jsonrpc.lo: $(go_rpc_jsonrpc_files)\n-\t$(BUILDPACKAGE)\n-rpc/jsonrpc/check: $(CHECK_DEPS)\n-\t@$(MKDIR_P) rpc/jsonrpc\n-\t@$(CHECK)\n-.PHONY: rpc/jsonrpc/check\n-\n @go_include@ runtime/debug.lo.dep\n runtime/debug.lo.dep: $(go_runtime_debug_files)\n \t$(BUILDDEPS)\n@@ -5881,15 +5999,34 @@ sync/atomic/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: sync/atomic/check\n \n-@go_include@ template/parse.lo.dep\n-template/parse.lo.dep: $(go_template_parse_files)\n+@go_include@ text/tabwriter.lo.dep\n+text/tabwriter.lo.dep: $(go_text_tabwriter_files)\n+\t$(BUILDDEPS)\n+text/tabwriter.lo: $(go_text_tabwriter_files)\n+\t$(BUILDPACKAGE)\n+text/tabwriter/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) text/tabwriter\n+\t@$(CHECK)\n+.PHONY: text/tabwriter/check\n+\n+@go_include@ text/template.lo.dep\n+text/template.lo.dep: $(go_text_template_files)\n \t$(BUILDDEPS)\n-template/parse.lo: $(go_template_parse_files)\n+text/template.lo: $(go_text_template_files)\n \t$(BUILDPACKAGE)\n-template/parse/check: $(CHECK_DEPS)\n-\t@$(MKDIR_P) template/parse\n+text/template/check: $(CHECK_DEPS)\n \t@$(CHECK)\n-.PHONY: template/parse/check\n+.PHONY: text/template/check\n+\n+@go_include@ text/template/parse.lo.dep\n+text/template/parse.lo.dep: $(go_text_template_parse_files)\n+\t$(BUILDDEPS)\n+text/template/parse.lo: $(go_text_template_parse_files)\n+\t$(BUILDPACKAGE)\n+text/template/parse/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) text/template/parse\n+\t@$(CHECK)\n+.PHONY: text/template/parse/check\n \n @go_include@ testing/iotest.lo.dep\n testing/iotest.lo.dep: $(go_testing_iotest_files)\n@@ -5921,6 +6058,26 @@ testing/script/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: testing/script/check\n \n+@go_include@ unicode/utf16.lo.dep\n+unicode/utf16.lo.dep: $(go_unicode_utf16_files)\n+\t$(BUILDDEPS)\n+unicode/utf16.lo: $(go_unicode_utf16_files)\n+\t$(BUILDPACKAGE)\n+unicode/utf16/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) unicode/utf16\n+\t@$(CHECK)\n+.PHONY: unicode/utf16/check\n+\n+@go_include@ unicode/utf8.lo.dep\n+unicode/utf8.lo.dep: $(go_unicode_utf8_files)\n+\t$(BUILDDEPS)\n+unicode/utf8.lo: $(go_unicode_utf8_files)\n+\t$(BUILDPACKAGE)\n+unicode/utf8/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) unicode/utf8\n+\t@$(CHECK)\n+.PHONY: unicode/utf8/check\n+\n @go_include@ syscall/syscall.lo.dep\n syscall/syscall.lo.dep: $(go_syscall_files)\n \t$(BUILDDEPS)\n@@ -5931,50 +6088,32 @@ syscall/errno.lo: go/syscall/errno.c\n syscall/wait.lo: go/syscall/wait.c\n \t$(LTCOMPILE) -c -o $@ $<\n \n-asn1.gox: asn1/asn1.lo\n-\t$(BUILDGOX)\n-big.gox: big/big.lo\n-\t$(BUILDGOX)\n bufio.gox: bufio/bufio.lo\n \t$(BUILDGOX)\n bytes.gox: bytes/bytes.lo\n \t$(BUILDGOX)\n-cmath.gox: cmath/cmath.lo\n-\t$(BUILDGOX)\n crypto.gox: crypto/crypto.lo\n \t$(BUILDGOX)\n-csv.gox: csv/csv.lo\n-\t$(BUILDGOX)\n errors.gox: errors/errors.lo\n \t$(BUILDGOX)\n-exec.gox: exec/exec.lo\n-\t$(BUILDGOX)\n expvar.gox: expvar/expvar.lo\n \t$(BUILDGOX)\n flag.gox: flag/flag.lo\n \t$(BUILDGOX)\n fmt.gox: fmt/fmt.lo\n \t$(BUILDGOX)\n-gob.gox: gob/gob.lo\n-\t$(BUILDGOX)\n hash.gox: hash/hash.lo\n \t$(BUILDGOX)\n html.gox: html/html.lo\n \t$(BUILDGOX)\n-http.gox: http/http.lo\n-\t$(BUILDGOX)\n image.gox: image/image.lo\n \t$(BUILDGOX)\n io.gox: io/io.lo\n \t$(BUILDGOX)\n-json.gox: json/json.lo\n-\t$(BUILDGOX)\n log.gox: log/log.lo\n \t$(BUILDGOX)\n math.gox: math/math.lo\n \t$(BUILDGOX)\n-mail.gox: mail/mail.lo\n-\t$(BUILDGOX)\n mime.gox: mime/mime.lo\n \t$(BUILDGOX)\n net.gox: net/net.lo\n@@ -5985,20 +6124,12 @@ patch.gox: patch/patch.lo\n \t$(BUILDGOX)\n path.gox: path/path.lo\n \t$(BUILDGOX)\n-rand.gox: rand/rand.lo\n-\t$(BUILDGOX)\n reflect.gox: reflect/reflect.lo\n \t$(BUILDGOX)\n regexp.gox: regexp/regexp.lo\n \t$(BUILDGOX)\n-rpc.gox: rpc/rpc.lo\n-\t$(BUILDGOX)\n runtime.gox: runtime/runtime.lo\n \t$(BUILDGOX)\n-scanner.gox: scanner/scanner.lo\n-\t$(BUILDGOX)\n-smtp.gox: smtp/smtp.lo\n-\t$(BUILDGOX)\n sort.gox: sort/sort.lo\n \t$(BUILDGOX)\n strconv.gox: strconv/strconv.lo\n@@ -6007,30 +6138,16 @@ strings.gox: strings/strings.lo\n \t$(BUILDGOX)\n sync.gox: sync/sync.lo\n \t$(BUILDGOX)\n-syslog.gox: syslog/syslog.lo\n-\t$(BUILDGOX)\n syscall.gox: syscall/syscall.lo\n \t$(BUILDGOX)\n-tabwriter.gox: tabwriter/tabwriter.lo\n-\t$(BUILDGOX)\n-template.gox: template/template.lo\n-\t$(BUILDGOX)\n testing.gox: testing/testing.lo\n \t$(BUILDGOX)\n time.gox: time/time.lo\n \t$(BUILDGOX)\n unicode.gox: unicode/unicode.lo\n \t$(BUILDGOX)\n-url.gox: url/url.lo\n-\t$(BUILDGOX)\n-utf16.gox: utf16/utf16.lo\n-\t$(BUILDGOX)\n-utf8.gox: utf8/utf8.lo\n-\t$(BUILDGOX)\n websocket.gox: websocket/websocket.lo\n \t$(BUILDGOX)\n-xml.gox: xml/xml.lo\n-\t$(BUILDGOX)\n \n archive/tar.gox: archive/tar.lo\n \t$(BUILDGOX)\n@@ -6135,18 +6252,28 @@ debug/pe.gox: debug/pe.lo\n \n encoding/ascii85.gox: encoding/ascii85.lo\n \t$(BUILDGOX)\n+encoding/asn1.gox: encoding/asn1.lo\n+\t$(BUILDGOX)\n encoding/base32.gox: encoding/base32.lo\n \t$(BUILDGOX)\n encoding/base64.gox: encoding/base64.lo\n \t$(BUILDGOX)\n encoding/binary.gox: encoding/binary.lo\n \t$(BUILDGOX)\n+encoding/csv.gox: encoding/csv.lo\n+\t$(BUILDGOX)\n encoding/git85.gox: encoding/git85.lo\n \t$(BUILDGOX)\n+encoding/gob.gox: encoding/gob.lo\n+\t$(BUILDGOX)\n encoding/hex.gox: encoding/hex.lo\n \t$(BUILDGOX)\n+encoding/json.gox: encoding/json.lo\n+\t$(BUILDGOX)\n encoding/pem.gox: encoding/pem.lo\n \t$(BUILDGOX)\n+encoding/xml.gox: encoding/xml.lo\n+\t$(BUILDGOX)\n \n exp/ebnf.gox: exp/ebnf.lo\n \t$(BUILDGOX)\n@@ -6173,7 +6300,7 @@ exp/gui/x11.gox: exp/gui/x11.lo\n exp/sql/driver.gox: exp/sql/driver.lo\n \t$(BUILDGOX)\n \n-exp/template/html.gox: exp/template/html.lo\n+html/template.gox: html/template.lo\n \t$(BUILDGOX)\n \n go/ast.gox: go/ast.lo\n@@ -6200,15 +6327,6 @@ hash/crc64.gox: hash/crc64.lo\n hash/fnv.gox: hash/fnv.lo\n \t$(BUILDGOX)\n \n-http/cgi.gox: http/cgi.lo\n-\t$(BUILDGOX)\n-http/fcgi.gox: http/fcgi.lo\n-\t$(BUILDGOX)\n-http/httptest.gox: http/httptest.lo\n-\t$(BUILDGOX)\n-http/pprof.gox: http/pprof.lo\n-\t$(BUILDGOX)\n-\n image/bmp.gox: image/bmp.lo\n \t$(BUILDGOX)\n image/color.gox: image/color.lo\n@@ -6232,13 +6350,47 @@ index/suffixarray.gox: index/suffixarray.lo\n io/ioutil.gox: io/ioutil.lo\n \t$(BUILDGOX)\n \n+log/syslog.gox: log/syslog.lo\n+\t$(BUILDGOX)\n+\n+math/big.gox: math/big.lo\n+\t$(BUILDGOX)\n+math/cmplx.gox: math/cmplx.lo\n+\t$(BUILDGOX)\n+math/rand.gox: math/rand.lo\n+\t$(BUILDGOX)\n+\n mime/multipart.gox: mime/multipart.lo\n \t$(BUILDGOX)\n \n net/dict.gox: net/dict.lo\n \t$(BUILDGOX)\n+net/http.gox: net/http.lo\n+\t$(BUILDGOX)\n+net/mail.gox: net/mail.lo\n+\t$(BUILDGOX)\n+net/rpc.gox: net/rpc.lo\n+\t$(BUILDGOX)\n+net/smtp.gox: net/smtp.lo\n+\t$(BUILDGOX)\n net/textproto.gox: net/textproto.lo\n \t$(BUILDGOX)\n+net/url.gox: net/url.lo\n+\t$(BUILDGOX)\n+\n+net/http/cgi.gox: net/http/cgi.lo\n+\t$(BUILDGOX)\n+net/http/fcgi.gox: net/http/fcgi.lo\n+\t$(BUILDGOX)\n+net/http/httptest.gox: net/http/httptest.lo\n+\t$(BUILDGOX)\n+net/http/httputil.gox: net/http/httputil.lo\n+\t$(BUILDGOX)\n+net/http/pprof.gox: net/http/pprof.lo\n+\t$(BUILDGOX)\n+\n+net/rpc/jsonrpc.gox: net/rpc/jsonrpc.lo\n+\t$(BUILDGOX)\n \n old/netchan.gox: old/netchan.lo\n \t$(BUILDGOX)\n@@ -6247,6 +6399,8 @@ old/regexp.gox: old/regexp.lo\n old/template.gox: old/template.lo\n \t$(BUILDGOX)\n \n+os/exec.gox: os/exec.lo\n+\t$(BUILDGOX)\n os/user.gox: os/user.lo\n \t$(BUILDGOX)\n os/signal.gox: os/signal.lo\n@@ -6258,9 +6412,6 @@ path/filepath.gox: path/filepath.lo\n regexp/syntax.gox: regexp/syntax.lo\n \t$(BUILDGOX)\n \n-rpc/jsonrpc.gox: rpc/jsonrpc.lo\n-\t$(BUILDGOX)\n-\n runtime/debug.gox: runtime/debug.lo\n \t$(BUILDGOX)\n runtime/pprof.gox: runtime/pprof.lo\n@@ -6269,7 +6420,13 @@ runtime/pprof.gox: runtime/pprof.lo\n sync/atomic.gox: sync/atomic.lo\n \t$(BUILDGOX)\n \n-template/parse.gox: template/parse.lo\n+text/scanner.gox: text/scanner.lo\n+\t$(BUILDGOX)\n+text/tabwriter.gox: text/tabwriter.lo\n+\t$(BUILDGOX)\n+text/template.gox: text/template.lo\n+\t$(BUILDGOX)\n+text/template/parse.gox: text/template/parse.lo\n \t$(BUILDGOX)\n \n testing/iotest.gox: testing/iotest.lo\n@@ -6279,6 +6436,11 @@ testing/quick.gox: testing/quick.lo\n testing/script.gox: testing/script.lo\n \t$(BUILDGOX)\n \n+unicode/utf16.gox: unicode/utf16.lo\n+\t$(BUILDGOX)\n+unicode/utf8.gox: unicode/utf8.lo\n+\t$(BUILDGOX)\n+\n check: check-tail\n check-recursive: check-head\n "}, {"sha": "facba2cc7a3e6726ded3c9e5133bc0f1eb69de23", "filename": "libgo/go/archive/tar/reader.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Farchive%2Ftar%2Freader.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Farchive%2Ftar%2Freader.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Ftar%2Freader.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -29,7 +29,7 @@ var (\n //\ttr := tar.NewReader(r)\n //\tfor {\n //\t\thdr, err := tr.Next()\n-//\t\tif err == os.EOF {\n+//\t\tif err == io.EOF {\n //\t\t\t// end of tar archive\n //\t\t\tbreak\n //\t\t}\n@@ -200,7 +200,7 @@ func (tr *Reader) readHeader() *Header {\n }\n \n // Read reads from the current entry in the tar archive.\n-// It returns 0, os.EOF when it reaches the end of that entry,\n+// It returns 0, io.EOF when it reaches the end of that entry,\n // until Next is called to advance to the next entry.\n func (tr *Reader) Read(b []byte) (n int, err error) {\n \tif tr.nb == 0 {"}, {"sha": "cfbe5498a157995258cd13129bbb0b8ec113ef85", "filename": "libgo/go/archive/zip/reader.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Farchive%2Fzip%2Freader.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Farchive%2Fzip%2Freader.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Fzip%2Freader.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -7,10 +7,10 @@ package zip\n import (\n \t\"bufio\"\n \t\"compress/flate\"\n+\t\"encoding/binary\"\n \t\"errors\"\n \t\"hash\"\n \t\"hash/crc32\"\n-\t\"encoding/binary\"\n \t\"io\"\n \t\"io/ioutil\"\n \t\"os\"\n@@ -60,6 +60,7 @@ func OpenReader(name string) (*ReadCloser, error) {\n \t\tf.Close()\n \t\treturn nil, err\n \t}\n+\tr.f = f\n \treturn r, nil\n }\n "}, {"sha": "ca0b04e2bba397ad64ab32913b0d446885d6ae37", "filename": "libgo/go/archive/zip/reader_test.go", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Farchive%2Fzip%2Freader_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Farchive%2Fzip%2Freader_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Fzip%2Freader_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -98,7 +98,11 @@ func readTestZip(t *testing.T, zt ZipTest) {\n \tif err == FormatError {\n \t\treturn\n \t}\n-\tdefer z.Close()\n+\tdefer func() {\n+\t\tif err := z.Close(); err != nil {\n+\t\t\tt.Errorf(\"error %q when closing zip file\", err)\n+\t\t}\n+\t}()\n \n \t// bail here if no Files expected to be tested\n \t// (there may actually be files in the zip, but we don't care)"}, {"sha": "25491dc753d56225b08c7af0285b867e7442d706", "filename": "libgo/go/archive/zip/writer_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Farchive%2Fzip%2Fwriter_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Farchive%2Fzip%2Fwriter_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Farchive%2Fzip%2Fwriter_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -7,7 +7,7 @@ package zip\n import (\n \t\"bytes\"\n \t\"io/ioutil\"\n-\t\"rand\"\n+\t\"math/rand\"\n \t\"testing\"\n )\n "}, {"sha": "61e338b61657519aeec1744f41fc7aff601ec03e", "filename": "libgo/go/bufio/bufio.go", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fbufio%2Fbufio.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fbufio%2Fbufio.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbufio%2Fbufio.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -11,7 +11,7 @@ import (\n \t\"bytes\"\n \t\"io\"\n \t\"strconv\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n const (\n@@ -135,7 +135,7 @@ func (b *Reader) Peek(n int) ([]byte, error) {\n // It returns the number of bytes read into p.\n // It calls Read at most once on the underlying Reader,\n // hence n may be less than len(p).\n-// At EOF, the count will be zero and err will be os.EOF.\n+// At EOF, the count will be zero and err will be io.EOF.\n func (b *Reader) Read(p []byte) (n int, err error) {\n \tn = len(p)\n \tif n == 0 {\n@@ -246,7 +246,7 @@ func (b *Reader) Buffered() int { return b.w - b.r }\n // returning a slice pointing at the bytes in the buffer.\n // The bytes stop being valid at the next read call.\n // If ReadSlice encounters an error before finding a delimiter,\n-// it returns all the data in the buffer and the error itself (often os.EOF).\n+// it returns all the data in the buffer and the error itself (often io.EOF).\n // ReadSlice fails with error ErrBufferFull if the buffer fills without a delim.\n // Because the data returned from ReadSlice will be overwritten\n // by the next I/O operation, most clients should use\n@@ -312,6 +312,9 @@ func (b *Reader) ReadLine() (line []byte, isPrefix bool, err error) {\n \t}\n \n \tif len(line) == 0 {\n+\t\tif err != nil {\n+\t\t\tline = nil\n+\t\t}\n \t\treturn\n \t}\n \terr = nil\n@@ -329,7 +332,7 @@ func (b *Reader) ReadLine() (line []byte, isPrefix bool, err error) {\n // ReadBytes reads until the first occurrence of delim in the input,\n // returning a slice containing the data up to and including the delimiter.\n // If ReadBytes encounters an error before finding a delimiter,\n-// it returns the data read before the error and the error itself (often os.EOF).\n+// it returns the data read before the error and the error itself (often io.EOF).\n // ReadBytes returns err != nil if and only if the returned data does not end in\n // delim.\n func (b *Reader) ReadBytes(delim byte) (line []byte, err error) {\n@@ -376,7 +379,7 @@ func (b *Reader) ReadBytes(delim byte) (line []byte, err error) {\n // ReadString reads until the first occurrence of delim in the input,\n // returning a string containing the data up to and including the delimiter.\n // If ReadString encounters an error before finding a delimiter,\n-// it returns the data read before the error and the error itself (often os.EOF).\n+// it returns the data read before the error and the error itself (often io.EOF).\n // ReadString returns err != nil if and only if the returned data does not end in\n // delim.\n func (b *Reader) ReadString(delim byte) (line string, err error) {"}, {"sha": "1f893951c15bd14c63595d760a421d6556c9cf1d", "filename": "libgo/go/bufio/bufio_test.go", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fbufio%2Fbufio_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fbufio%2Fbufio_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbufio%2Fbufio_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -14,7 +14,7 @@ import (\n \t\"strings\"\n \t\"testing\"\n \t\"testing/iotest\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n // Reads from a reader and rot13s the result.\n@@ -698,6 +698,17 @@ func TestLinesAfterRead(t *testing.T) {\n \t}\n }\n \n+func TestReadLineNonNilLineOrError(t *testing.T) {\n+\tr := NewReader(strings.NewReader(\"line 1\\n\"))\n+\tfor i := 0; i < 2; i++ {\n+\t\tl, _, err := r.ReadLine()\n+\t\tif l != nil && err != nil {\n+\t\t\tt.Fatalf(\"on line %d/2; ReadLine=%#v, %v; want non-nil line or Error, but not both\",\n+\t\t\t\ti+1, l, err)\n+\t\t}\n+\t}\n+}\n+\n type readLineResult struct {\n \tline     []byte\n \tisPrefix bool"}, {"sha": "5a7aaf364db82d71a5e91ef7177b889d0e5336e5", "filename": "libgo/go/builtin/builtin.go", "status": "modified", "additions": 87, "deletions": 5, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fbuiltin%2Fbuiltin.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fbuiltin%2Fbuiltin.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbuiltin%2Fbuiltin.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -3,13 +3,89 @@\n // license that can be found in the LICENSE file.\n \n /*\n-\tPackage builtin provides documentation for Go's built-in functions.\n-\tThe functions documented here are not actually in package builtin\n+\tPackage builtin provides documentation for Go's predeclared identifiers.\n+\tThe items documented here are not actually in package builtin\n \tbut their descriptions here allow godoc to present documentation\n-\tfor the language's special functions.\n+\tfor the language's special identifiers.\n */\n package builtin\n \n+// bool is the set of boolean values, true and false.\n+type bool bool\n+\n+// uint8 is the set of all unsigned 8-bit integers.\n+// Range: 0 through 255.\n+type uint8 uint8\n+\n+// uint16 is the set of all unsigned 16-bit integers.\n+// Range: 0 through 65535.\n+type uint16 uint16\n+\n+// uint32 is the set of all unsigned 32-bit integers.\n+// Range: 0 through 4294967295.\n+type uint32 uint32\n+\n+// uint64 is the set of all unsigned 64-bit integers.\n+// Range: 0 through 18446744073709551615.\n+type uint64 uint64\n+\n+// int8 is the set of all signed 8-bit integers.\n+// Range: -128 through 127.\n+type int8 int8\n+\n+// int16 is the set of all signed 16-bit integers.\n+// Range: -32768 through 32767.\n+type int16 int16\n+\n+// int32 is the set of all signed 32-bit integers.\n+// Range: -2147483648 through 2147483647.\n+type int32 int32\n+\n+// int64 is the set of all signed 64-bit integers.\n+// Range: -9223372036854775808 through 9223372036854775807.\n+type int64 int64\n+\n+// float32 is the set of all IEEE-754 32-bit floating-point numbers.\n+type float32 float32\n+\n+// float64 is the set of all IEEE-754 64-bit floating-point numbers.\n+type float64 float64\n+\n+// complex64 is the set of all complex numbers with float32 real and\n+// imaginary parts.\n+type complex64 complex64\n+\n+// complex128 is the set of all complex numbers with float64 real and\n+// imaginary parts.\n+type complex128 complex128\n+\n+// string is the set of all strings of 8-bit bytes, conventionally but not\n+// necessarily representing UTF-8-encoded text. A string may be empty, but\n+// not nil. Values of string type are immutable.\n+type string string\n+\n+// int is a signed integer type that is at least 32 bits in size. It is a\n+// distinct type, however, and not an alias for, say, int32.\n+type int int\n+\n+// uint is an unsigned integer type that is at least 32 bits in size. It is a\n+// distinct type, however, and not an alias for, say, uint32.\n+type uint uint\n+\n+// uintptr is an integer type that is large enough to hold the bit pattern of\n+// any pointer.\n+type uintptr uintptr\n+\n+// byte is an alias for uint8 and is equivalent to uint8 in all ways. It is\n+// used, by convention, to distinguish byte values from 8-bit unsigned\n+// integer values.\n+type byte byte\n+\n+// rune is an alias for int and is equivalent to int in all ways. It is\n+// used, by convention, to distinguish character values from integer values.\n+// In a future version of Go, it will change to an alias of int32.\n+type rune rune\n+\n // Type is here for the purposes of documentation only. It is a stand-in\n // for any Go type, but represents the same type for any given function\n // invocation.\n@@ -21,11 +97,11 @@ type IntegerType int\n \n // FloatType is here for the purposes of documentation only. It is a stand-in\n // for either float type: float32 or float64.\n-type FloatType int\n+type FloatType float32\n \n // ComplexType is here for the purposes of documentation only. It is a\n // stand-in for either complex type: complex64 or complex128.\n-type ComplexType int\n+type ComplexType complex64\n \n // The append built-in function appends elements to the end of a slice. If\n // it has sufficient capacity, the destination is resliced to accommodate the\n@@ -133,3 +209,9 @@ func panic(v interface{})\n // nil. Thus the return value from recover reports whether the goroutine is\n // panicking.\n func recover() interface{}\n+\n+// The error built-in interface type is the conventional interface for\n+// representing an error condition, with the nil value representing no error.\n+type error interface {\n+\tError() string\n+}"}, {"sha": "e66ac026e5beb8232a71dae4c10d6077220dc74a", "filename": "libgo/go/bytes/buffer.go", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fbytes%2Fbuffer.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fbytes%2Fbuffer.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbytes%2Fbuffer.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -9,7 +9,7 @@ package bytes\n import (\n \t\"errors\"\n \t\"io\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n // A Buffer is a variable-sized buffer of bytes with Read and Write methods.\n@@ -117,7 +117,7 @@ const MinRead = 512\n \n // ReadFrom reads data from r until EOF and appends it to the buffer.\n // The return value n is the number of bytes read.\n-// Any error except os.EOF encountered during the read\n+// Any error except io.EOF encountered during the read\n // is also returned.\n func (b *Buffer) ReadFrom(r io.Reader) (n int64, err error) {\n \tb.lastRead = opInvalid\n@@ -200,7 +200,7 @@ func (b *Buffer) WriteRune(r rune) (n int, err error) {\n \n // Read reads the next len(p) bytes from the buffer or until the buffer\n // is drained.  The return value n is the number of bytes read.  If the\n-// buffer has no data to return, err is os.EOF even if len(p) is zero;\n+// buffer has no data to return, err is io.EOF even if len(p) is zero;\n // otherwise it is nil.\n func (b *Buffer) Read(p []byte) (n int, err error) {\n \tb.lastRead = opInvalid\n@@ -236,7 +236,7 @@ func (b *Buffer) Next(n int) []byte {\n }\n \n // ReadByte reads and returns the next byte from the buffer.\n-// If no byte is available, it returns error os.EOF.\n+// If no byte is available, it returns error io.EOF.\n func (b *Buffer) ReadByte() (c byte, err error) {\n \tb.lastRead = opInvalid\n \tif b.off >= len(b.buf) {\n@@ -252,7 +252,7 @@ func (b *Buffer) ReadByte() (c byte, err error) {\n \n // ReadRune reads and returns the next UTF-8-encoded\n // Unicode code point from the buffer.\n-// If no bytes are available, the error returned is os.EOF.\n+// If no bytes are available, the error returned is io.EOF.\n // If the bytes are an erroneous UTF-8 encoding, it\n // consumes one byte and returns U+FFFD, 1.\n func (b *Buffer) ReadRune() (r rune, size int, err error) {\n@@ -307,7 +307,7 @@ func (b *Buffer) UnreadByte() error {\n // ReadBytes reads until the first occurrence of delim in the input,\n // returning a slice containing the data up to and including the delimiter.\n // If ReadBytes encounters an error before finding a delimiter,\n-// it returns the data read before the error and the error itself (often os.EOF).\n+// it returns the data read before the error and the error itself (often io.EOF).\n // ReadBytes returns err != nil if and only if the returned data does not end in\n // delim.\n func (b *Buffer) ReadBytes(delim byte) (line []byte, err error) {\n@@ -326,7 +326,7 @@ func (b *Buffer) ReadBytes(delim byte) (line []byte, err error) {\n // ReadString reads until the first occurrence of delim in the input,\n // returning a string containing the data up to and including the delimiter.\n // If ReadString encounters an error before finding a delimiter,\n-// it returns the data read before the error and the error itself (often os.EOF).\n+// it returns the data read before the error and the error itself (often io.EOF).\n // ReadString returns err != nil if and only if the returned data does not end\n // in delim.\n func (b *Buffer) ReadString(delim byte) (line string, err error) {"}, {"sha": "523597003226100e1a1334c7bfcf17f5c60e5b48", "filename": "libgo/go/bytes/buffer_test.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fbytes%2Fbuffer_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fbytes%2Fbuffer_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbytes%2Fbuffer_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -7,9 +7,9 @@ package bytes_test\n import (\n \t. \"bytes\"\n \t\"io\"\n-\t\"rand\"\n+\t\"math/rand\"\n \t\"testing\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n const N = 10000  // make this bigger for a larger (and slower) test"}, {"sha": "9bfd88fa39894a589fa7658495a52f4a5ee66408", "filename": "libgo/go/bytes/bytes.go", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fbytes%2Fbytes.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fbytes%2Fbytes.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbytes%2Fbytes.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -8,7 +8,7 @@ package bytes\n \n import (\n \t\"unicode\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n // Compare returns an integer comparing the two byte arrays lexicographically.\n@@ -88,6 +88,11 @@ func Count(s, sep []byte) int {\n \treturn n\n }\n \n+// Contains returns whether subslice is within b.\n+func Contains(b, subslice []byte) bool {\n+\treturn Index(b, subslice) != -1\n+}\n+\n // Index returns the index of the first instance of sep in s, or -1 if sep is not present in s.\n func Index(s, sep []byte) int {\n \tn := len(sep)"}, {"sha": "9256b1842742a24298ab825c87e214f78c304df4", "filename": "libgo/go/bytes/bytes_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fbytes%2Fbytes_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fbytes%2Fbytes_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbytes%2Fbytes_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -9,7 +9,7 @@ import (\n \t\"reflect\"\n \t\"testing\"\n \t\"unicode\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n func eq(a, b []string) bool {"}, {"sha": "b2c13e50ca4684bfd5d1f5ecf54296b515e76113", "filename": "libgo/go/compress/bzip2/bit_reader.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcompress%2Fbzip2%2Fbit_reader.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcompress%2Fbzip2%2Fbit_reader.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fbzip2%2Fbit_reader.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -37,7 +37,7 @@ func newBitReader(r io.Reader) bitReader {\n \n // ReadBits64 reads the given number of bits and returns them in the\n // least-significant part of a uint64. In the event of an error, it returns 0\n-// and the error can be obtained by calling Error().\n+// and the error can be obtained by calling Err().\n func (br *bitReader) ReadBits64(bits uint) (n uint64) {\n \tfor bits > br.bits {\n \t\tb, err := br.r.ReadByte()\n@@ -82,6 +82,6 @@ func (br *bitReader) ReadBit() bool {\n \treturn n != 0\n }\n \n-func (br *bitReader) Error() error {\n+func (br *bitReader) Err() error {\n \treturn br.err\n }"}, {"sha": "3dc8c62061530fde60f536a83aaf31b26e1c3ebe", "filename": "libgo/go/compress/bzip2/bzip2.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcompress%2Fbzip2%2Fbzip2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcompress%2Fbzip2%2Fbzip2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fbzip2%2Fbzip2.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -80,7 +80,7 @@ func (bz2 *reader) Read(buf []byte) (n int, err error) {\n \n \tif !bz2.setupDone {\n \t\terr = bz2.setup()\n-\t\tbrErr := bz2.br.Error()\n+\t\tbrErr := bz2.br.Err()\n \t\tif brErr != nil {\n \t\t\terr = brErr\n \t\t}\n@@ -91,7 +91,7 @@ func (bz2 *reader) Read(buf []byte) (n int, err error) {\n \t}\n \n \tn, err = bz2.read(buf)\n-\tbrErr := bz2.br.Error()\n+\tbrErr := bz2.br.Err()\n \tif brErr != nil {\n \t\terr = brErr\n \t}"}, {"sha": "76cf2a7b69172d2863e3a363df2714d65c3ad64f", "filename": "libgo/go/compress/zlib/testdata/e.txt", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/374280238f934fa851273e2ee16ba53be890c6b8/libgo%2Fgo%2Fcompress%2Fzlib%2Ftestdata%2Fe.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/374280238f934fa851273e2ee16ba53be890c6b8/libgo%2Fgo%2Fcompress%2Fzlib%2Ftestdata%2Fe.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fzlib%2Ftestdata%2Fe.txt?ref=374280238f934fa851273e2ee16ba53be890c6b8", "patch": "@@ -1 +0,0 @@\n-2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447614606680822648001684774118537423454424371075390777449920695517027618386062613313845830007520449338265602976067371132007093287091274437470472306969772093101416928368190255151086574637721112523897844250569536967707854499699679468644549059879316368892300987931277361782154249992295763514822082698951936680331825288693984964651058209392398294887933203625094431173012381970684161403970198376793206832823764648042953118023287825098194558153017567173613320698112509961818815930416903515988885193458072738667385894228792284998920868058257492796104841984443634632449684875602336248270419786232090021609902353043699418491463140934317381436405462531520961836908887070167683964243781405927145635490613031072085103837505101157477041718986106873969655212671546889570350354021234078498193343210681701210056278802351930332247450158539047304199577770935036604169973297250886876966403555707162268447162560798826517871341951246652010305921236677194325278675398558944896970964097545918569563802363701621120477427228364896134225164450781824423529486363721417402388934412479635743702637552944483379980161254922785092577825620926226483262779333865664816277251640191059004916449982893150566047258027786318641551956532442586982946959308019152987211725563475463964479101459040905862984967912874068705048958586717479854667757573205681288459205413340539220001137863009455606881667400169842055804033637953764520304024322566135278369511778838638744396625322498506549958862342818997077332761717839280349465014345588970719425863987727547109629537415211151368350627526023264847287039207643100595841166120545297030236472549296669381151373227536450988890313602057248176585118063036442812314965507047510254465011727211555194866850800368532281831521960037356252794495158284188294787610852639813955990067376482922443752871846245780361929819713991475644882626039033814418232625150974827987779964373089970388867782271383605772978824125611907176639465070633045279546618550966661856647097113444740160704626215680717481877844371436988218559670959102596862002353718588748569652200050311734392073211390803293634479727355955277349071783793421637012050054513263835440001863239914907054797780566978533580489669062951194324730995876552368128590413832411607226029983305353708761389396391779574540161372236187893652605381558415871869255386061647798340254351284396129460352913325942794904337299085731580290958631382683291477116396337092400316894586360606458459251269946557248391865642097526850823075442545993769170419777800853627309417101634349076964237222943523661255725088147792231519747780605696725380171807763603462459278778465850656050780844211529697521890874019660906651803516501792504619501366585436632712549639908549144200014574760819302212066024330096412704894390397177195180699086998606636583232278709376502260149291011517177635944602023249300280401867723910288097866605651183260043688508817157238669842242201024950551881694803221002515426494639812873677658927688163598312477886520141174110913601164995076629077943646005851941998560162647907615321038727557126992518275687989302761761146162549356495903798045838182323368612016243736569846703785853305275833337939907521660692380533698879565137285593883499894707416181550125397064648171946708348197214488898790676503795903669672494992545279033729636162658976039498576741397359441023744329709355477982629614591442936451428617158587339746791897571211956187385783644758448423555581050025611492391518893099463428413936080383091662818811503715284967059741625628236092168075150177725387402564253470879089137291722828611515915683725241630772254406337875931059826760944203261924285317018781772960235413060672136046000389661093647095141417185777014180606443636815464440053316087783143174440811949422975599314011888683314832802706553833004693290115744147563139997221703804617092894579096271662260740718749975359212756084414737823303270330168237193648002173285734935947564334129943024850235732214597843282641421684878721673367010615094243456984401873312810107945127223737886126058165668053714396127888732527373890392890506865324138062796025930387727697783792868409325365880733988457218746021005311483351323850047827169376218004904795597959290591655470505777514308175112698985188408718564026035305583737832422924185625644255022672155980274012617971928047139600689163828665277009752767069777036439260224372841840883251848770472638440379530166905465937461619323840363893131364327137688841026811219891275223056256756254701725086349765367288605966752740868627407912856576996313789753034660616669804218267724560530660773899624218340859882071864682623215080288286359746839654358856685503773131296587975810501214916207656769950659715344763470320853215603674828608378656803073062657633469774295634643716709397193060876963495328846833613038829431040800296873869117066666146800015121143442256023874474325250769387077775193299942137277211258843608715834835626961661980572526612206797540621062080649882918454395301529982092503005498257043390553570168653120526495614857249257386206917403695213533732531666345466588597286659451136441370331393672118569553952108458407244323835586063106806964924851232632699514603596037297253198368423363904632136710116192821711150282801604488058802382031981493096369596735832742024988245684941273860566491352526706046234450549227581151709314921879592718001940968866986837037302200475314338181092708030017205935530520700706072233999463990571311587099635777359027196285061146514837526209565346713290025994397663114545902685898979115837093419370441155121920117164880566945938131183843765620627846310490346293950029458341164824114969758326011800731699437393506966295712410273239138741754923071862454543222039552735295240245903805744502892246886285336542213815722131163288112052146489805180092024719391710555390113943316681515828843687606961102505171007392762385553386272553538830960671644662370922646809671254061869502143176211668140097595281493907222601112681153108387317617323235263605838173151034595736538223534992935822836851007810884634349983518404451704270189381994243410090575376257767571118090088164183319201962623416288166521374717325477727783488774366518828752156685719506371936565390389449366421764003121527870222366463635755503565576948886549500270853923617105502131147413744106134445544192101336172996285694899193369184729478580729156088510396781959429833186480756083679551496636448965592948187851784038773326247051945050419847742014183947731202815886845707290544057510601285258056594703046836344592652552137008068752009593453607316226118728173928074623094685367823106097921599360019946237993434210687813497346959246469752506246958616909178573976595199392993995567542714654910456860702099012606818704984178079173924071945996323060254707901774527513186809982284730860766536866855516467702911336827563107223346726113705490795365834538637196235856312618387156774118738527722922594743373785695538456246801013905727871016512966636764451872465653730402443684140814488732957847348490003019477888020460324660842875351848364959195082888323206522128104190448047247949291342284951970022601310430062410717971502793433263407995960531446053230488528972917659876016667811937932372453857209607582277178483361613582612896226118129455927462767137794487586753657544861407611931125958512655759734573015333642630767985443385761715333462325270572005303988289499034259566232975782488735029259166825894456894655992658454762694528780516501720674785417887982276806536650641910973434528878338621726156269582654478205672987756426325321594294418039943217000090542650763095588465895171709147607437136893319469090981904501290307099566226620303182649365733698419555776963787624918852865686607600566025605445711337286840205574416030837052312242587223438854123179481388550075689381124935386318635287083799845692619981794523364087429591180747453419551420351726184200845509170845682368200897739455842679214273477560879644279202708312150156406341341617166448069815483764491573900121217041547872591998943825364950514771379399147205219529079396137621107238494290616357604596231253506068537651423115349665683715116604220796394466621163255157729070978473156278277598788136491951257483328793771571459091064841642678309949723674420175862269402159407924480541255360431317992696739157542419296607312393763542139230617876753958711436104089409966089471418340698362993675362621545247298464213752891079884381306095552622720837518629837066787224430195793793786072107254277289071732854874374355781966511716618330881129120245204048682200072344035025448202834254187884653602591506445271657700044521097735585897622655484941621714989532383421600114062950718490427789258552743035221396835679018076406042138307308774460170842688272261177180842664333651780002171903449234264266292261456004337383868335555343453004264818473989215627086095650629340405264943244261445665921291225648893569655009154306426134252668472594914314239398845432486327461842846655985332312210466259890141712103446084271616619001257195870793217569698544013397622096749454185407118446433946990162698351607848924514058940946395267807354579700307051163682519487701189764002827648414160587206184185297189154019688253289309149665345753571427318482016384644832499037886069008072709327673127581966563941148961716832980455139729506687604740915420428429993541025829113502241690769431668574242522509026939034814856451303069925199590436384028429267412573422447765584177886171737265462085498294498946787350929581652632072258992368768457017823038096567883112289305809140572610865884845873101658151167533327674887014829167419701512559782572707406431808601428149024146780472327597684269633935773542930186739439716388611764209004068663398856841681003872389214483176070116684503887212364367043314091155733280182977988736590916659612402021778558854876176161989370794380056663364884365089144805571039765214696027662583599051987042300179465536788"}, {"sha": "58d8f3b6dd433d041d0c02f16950b252e1be3860", "filename": "libgo/go/compress/zlib/testdata/pi.txt", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/374280238f934fa851273e2ee16ba53be890c6b8/libgo%2Fgo%2Fcompress%2Fzlib%2Ftestdata%2Fpi.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/374280238f934fa851273e2ee16ba53be890c6b8/libgo%2Fgo%2Fcompress%2Fzlib%2Ftestdata%2Fpi.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fzlib%2Ftestdata%2Fpi.txt?ref=374280238f934fa851273e2ee16ba53be890c6b8", "patch": "@@ -1 +0,0 @@\n-3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632788659361533818279682303019520353018529689957736225994138912497217752834791315155748572424541506959508295331168617278558890750983817546374649393192550604009277016711390098488240128583616035637076601047101819429555961989467678374494482553797747268471040475346462080466842590694912933136770289891521047521620569660240580381501935112533824300355876402474964732639141992726042699227967823547816360093417216412199245863150302861829745557067498385054945885869269956909272107975093029553211653449872027559602364806654991198818347977535663698074265425278625518184175746728909777727938000816470600161452491921732172147723501414419735685481613611573525521334757418494684385233239073941433345477624168625189835694855620992192221842725502542568876717904946016534668049886272327917860857843838279679766814541009538837863609506800642251252051173929848960841284886269456042419652850222106611863067442786220391949450471237137869609563643719172874677646575739624138908658326459958133904780275900994657640789512694683983525957098258226205224894077267194782684826014769909026401363944374553050682034962524517493996514314298091906592509372216964615157098583874105978859597729754989301617539284681382686838689427741559918559252459539594310499725246808459872736446958486538367362226260991246080512438843904512441365497627807977156914359977001296160894416948685558484063534220722258284886481584560285060168427394522674676788952521385225499546667278239864565961163548862305774564980355936345681743241125150760694794510965960940252288797108931456691368672287489405601015033086179286809208747609178249385890097149096759852613655497818931297848216829989487226588048575640142704775551323796414515237462343645428584447952658678210511413547357395231134271661021359695362314429524849371871101457654035902799344037420073105785390621983874478084784896833214457138687519435064302184531910484810053706146806749192781911979399520614196634287544406437451237181921799983910159195618146751426912397489409071864942319615679452080951465502252316038819301420937621378559566389377870830390697920773467221825625996615014215030680384477345492026054146659252014974428507325186660021324340881907104863317346496514539057962685610055081066587969981635747363840525714591028970641401109712062804390397595156771577004203378699360072305587631763594218731251471205329281918261861258673215791984148488291644706095752706957220917567116722910981690915280173506712748583222871835209353965725121083579151369882091444210067510334671103141267111369908658516398315019701651511685171437657618351556508849099898599823873455283316355076479185358932261854896321329330898570642046752590709154814165498594616371802709819943099244889575712828905923233260972997120844335732654893823911932597463667305836041428138830320382490375898524374417029132765618093773444030707469211201913020330380197621101100449293215160842444859637669838952286847831235526582131449576857262433441893039686426243410773226978028073189154411010446823252716201052652272111660396665573092547110557853763466820653109896526918620564769312570586356620185581007293606598764861179104533488503461136576867532494416680396265797877185560845529654126654085306143444318586769751456614068007002378776591344017127494704205622305389945613140711270004078547332699390814546646458807972708266830634328587856983052358089330657574067954571637752542021149557615814002501262285941302164715509792592309907965473761255176567513575178296664547791745011299614890304639947132962107340437518957359614589019389713111790429782856475032031986915140287080859904801094121472213179476477726224142548545403321571853061422881375850430633217518297986622371721591607716692547487389866549494501146540628433663937900397692656721463853067360965712091807638327166416274888800786925602902284721040317211860820419000422966171196377921337575114959501566049631862947265473642523081770367515906735023507283540567040386743513622224771589150495309844489333096340878076932599397805419341447377441842631298608099888687413260472156951623965864573021631598193195167353812974167729478672422924654366800980676928238280689964004824354037014163149658979409243237896907069779422362508221688957383798623001593776471651228935786015881617557829735233446042815126272037343146531977774160319906655418763979293344195215413418994854447345673831624993419131814809277771038638773431772075456545322077709212019051660962804909263601975988281613323166636528619326686336062735676303544776280350450777235547105859548702790814356240145171806246436267945612753181340783303362542327839449753824372058353114771199260638133467768796959703098339130771098704085913374641442822772634659470474587847787201927715280731767907707157213444730605700733492436931138350493163128404251219256517980694113528013147013047816437885185290928545201165839341965621349143415956258658655705526904965209858033850722426482939728584783163057777560688876446248246857926039535277348030480290058760758251047470916439613626760449256274204208320856611906254543372131535958450687724602901618766795240616342522577195429162991930645537799140373404328752628889639958794757291746426357455254079091451357111369410911939325191076020825202618798531887705842972591677813149699009019211697173727847684726860849003377024242916513005005168323364350389517029893922334517220138128069650117844087451960121228599371623130171144484640903890644954440061986907548516026327505298349187407866808818338510228334508504860825039302133219715518430635455007668282949304137765527939751754613953984683393638304746119966538581538420568533862186725233402830871123282789212507712629463229563989898935821167456270102183564622013496715188190973038119800497340723961036854066431939509790190699639552453005450580685501956730229219139339185680344903982059551002263535361920419947455385938102343955449597783779023742161727111723643435439478221818528624085140066604433258885698670543154706965747458550332323342107301545940516553790686627333799585115625784322988273723198987571415957811196358330059408730681216028764962867446047746491599505497374256269010490377819868359381465741268049256487985561453723478673303904688383436346553794986419270563872931748723320837601123029911367938627089438799362016295154133714248928307220126901475466847653576164773794675200490757155527819653621323926406160136358155907422020203187277605277219005561484255518792530343513984425322341576233610642506390497500865627109535919465897514131034822769306247435363256916078154781811528436679570611086153315044521274739245449454236828860613408414863776700961207151249140430272538607648236341433462351897576645216413767969031495019108575984423919862916421939949072362346468441173940326591840443780513338945257423995082965912285085558215725031071257012668302402929525220118726767562204154205161841634847565169998116141010029960783869092916030288400269104140792886215078424516709087000699282120660418371806535567252532567532861291042487761825829765157959847035622262934860034158722980534989650226291748788202734209222245339856264766914905562842503912757710284027998066365825488926488025456610172967026640765590429099456815065265305371829412703369313785178609040708667114965583434347693385781711386455873678123014587687126603489139095620099393610310291616152881384379099042317473363948045759314931405297634757481193567091101377517210080315590248530906692037671922033229094334676851422144773793937517034436619910403375111735471918550464490263655128162288244625759163330391072253837421821408835086573917715096828874782656995995744906617583441375223970968340800535598491754173818839994469748676265516582765848358845314277568790029095170283529716344562129640435231176006651012412006597558512761785838292041974844236080071930457618932349229279650198751872127267507981255470958904556357921221033346697499235630254947802490114195212382815309114079073860251522742995818072471625916685451333123948049470791191532673430282441860414263639548000448002670496248201792896476697583183271314251702969234889627668440323260927524960357996469256504936818360900323809293459588970695365349406034021665443755890045632882250545255640564482465151875471196218443965825337543885690941130315095261793780029741207665147939425902989695946995565761218656196733786236256125216320862869222103274889218654364802296780705765615144632046927906821207388377814233562823608963208068222468012248261177185896381409183903673672220888321513755600372798394004152970028783076670944474560134556417254370906979396122571429894671543578468788614445812314593571984922528471605049221242470141214780573455105008019086996033027634787081081754501193071412233908663938339529425786905076431006383519834389341596131854347546495569781038293097164651438407007073604112373599843452251610507027056235266012764848308407611830130527932054274628654036036745328651057065874882256981579367897669742205750596834408697350201410206723585020072452256326513410559240190274216248439140359989535394590944070469120914093870012645600162374288021092764579310657922955249887275846101264836999892256959688159205600101655256375678"}, {"sha": "ca9113967548d2d463192ff117002527faa2eca1", "filename": "libgo/go/container/heap/heap.go", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcontainer%2Fheap%2Fheap.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcontainer%2Fheap%2Fheap.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcontainer%2Fheap%2Fheap.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -11,14 +11,17 @@ import \"sort\"\n \n // Any type that implements heap.Interface may be used as a\n // min-heap with the following invariants (established after\n-// Init has been called):\n+// Init has been called or if the data is empty or sorted):\n //\n //\t!h.Less(j, i) for 0 <= i < h.Len() and j = 2*i+1 or 2*i+2 and j < h.Len()\n //\n+// Note that Push and Pop in this interface are for package heap's\n+// implementation to call.  To add and remove things from the heap,\n+// use heap.Push and heap.Pop.\n type Interface interface {\n \tsort.Interface\n-\tPush(x interface{})\n-\tPop() interface{}\n+\tPush(x interface{}) // add x as element Len()\n+\tPop() interface{}   // remove and return element Len() - 1.\n }\n \n // A heap must be initialized before any of the heap operations"}, {"sha": "cb31ef6d30ab3e1c9c90c2484c500627381e9752", "filename": "libgo/go/container/heap/heap_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcontainer%2Fheap%2Fheap_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcontainer%2Fheap%2Fheap_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcontainer%2Fheap%2Fheap_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,8 +5,8 @@\n package heap_test\n \n import (\n-\t\"testing\"\n \t. \"container/heap\"\n+\t\"testing\"\n )\n \n type myHeap []int"}, {"sha": "a2adc7eb5c334f88732a946b54df65a27a045cbf", "filename": "libgo/go/crypto/dsa/dsa.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fdsa%2Fdsa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fdsa%2Fdsa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fdsa%2Fdsa.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -6,9 +6,9 @@\n package dsa\n \n import (\n-\t\"big\"\n \t\"errors\"\n \t\"io\"\n+\t\"math/big\"\n )\n \n // Parameters represents the domain parameters for a key. These parameters can"}, {"sha": "177aa444dfd207a9a20f730f96d7fb40c7c64f37", "filename": "libgo/go/crypto/dsa/dsa_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fdsa%2Fdsa_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fdsa%2Fdsa_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fdsa%2Fdsa_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,8 +5,8 @@\n package dsa\n \n import (\n-\t\"big\"\n \t\"crypto/rand\"\n+\t\"math/big\"\n \t\"testing\"\n )\n "}, {"sha": "2f199990c24b4c66e13e27e10478caa53275411c", "filename": "libgo/go/crypto/ecdsa/ecdsa.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fecdsa%2Fecdsa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fecdsa%2Fecdsa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fecdsa%2Fecdsa.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -13,9 +13,9 @@ package ecdsa\n //     http://www.secg.org/download/aid-780/sec1-v2.pdf\n \n import (\n-\t\"big\"\n \t\"crypto/elliptic\"\n \t\"io\"\n+\t\"math/big\"\n )\n \n // PublicKey represents an ECDSA public key."}, {"sha": "22360b5708c53e5ab34beed4a9d47c3465200271", "filename": "libgo/go/crypto/ecdsa/ecdsa_test.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fecdsa%2Fecdsa_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fecdsa%2Fecdsa_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fecdsa%2Fecdsa_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,11 +5,11 @@\n package ecdsa\n \n import (\n-\t\"big\"\n \t\"crypto/elliptic\"\n-\t\"crypto/sha1\"\n \t\"crypto/rand\"\n+\t\"crypto/sha1\"\n \t\"encoding/hex\"\n+\t\"math/big\"\n \t\"testing\"\n )\n "}, {"sha": "b7232a2fad0752f07d85137bf130d78ebc7b17da", "filename": "libgo/go/crypto/elliptic/elliptic.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Felliptic%2Felliptic.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Felliptic%2Felliptic.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Felliptic%2Felliptic.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -14,8 +14,8 @@ package elliptic\n // reverse the transform than to operate in affine coordinates.\n \n import (\n-\t\"big\"\n \t\"io\"\n+\t\"math/big\"\n \t\"sync\"\n )\n "}, {"sha": "a68a3807dfd145c31eb2839c801035e68371d264", "filename": "libgo/go/crypto/elliptic/elliptic_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Felliptic%2Felliptic_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Felliptic%2Felliptic_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Felliptic%2Felliptic_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,9 +5,9 @@\n package elliptic\n \n import (\n-\t\"big\"\n \t\"crypto/rand\"\n \t\"fmt\"\n+\t\"math/big\"\n \t\"testing\"\n )\n "}, {"sha": "03431c92f759be2393fdfc738ea8e82896b046d7", "filename": "libgo/go/crypto/hmac/hmac_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fhmac%2Fhmac_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fhmac%2Fhmac_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fhmac%2Fhmac_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,8 +5,8 @@\n package hmac\n \n import (\n-\t\"hash\"\n \t\"fmt\"\n+\t\"hash\"\n \t\"testing\"\n )\n "}, {"sha": "a04b5bd713513892a80fff02e526da760f77c399", "filename": "libgo/go/crypto/ocsp/ocsp.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Focsp%2Focsp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Focsp%2Focsp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Focsp%2Focsp.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -8,12 +8,12 @@\n package ocsp\n \n import (\n-\t\"asn1\"\n \t\"crypto\"\n \t\"crypto/rsa\"\n \t_ \"crypto/sha1\"\n \t\"crypto/x509\"\n \t\"crypto/x509/pkix\"\n+\t\"encoding/asn1\"\n \t\"time\"\n )\n "}, {"sha": "3bbb5dc351a148ff9d81bedf073c94cd1d6de512", "filename": "libgo/go/crypto/openpgp/armor/armor.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Farmor%2Farmor.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Farmor%2Farmor.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Farmor%2Farmor.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -151,7 +151,7 @@ func (r *openpgpReader) Read(p []byte) (n int, err error) {\n }\n \n // Decode reads a PGP armored block from the given Reader. It will ignore\n-// leading garbage. If it doesn't find a block, it will return nil, os.EOF. The\n+// leading garbage. If it doesn't find a block, it will return nil, io.EOF. The\n // given Reader is not usable after calling this function: an arbitrary amount\n // of data may have been read past the end of the block.\n func Decode(in io.Reader) (p *Block, err error) {"}, {"sha": "a553bdee8dd6ab7e216a55b9611051a26fc45d46", "filename": "libgo/go/crypto/openpgp/elgamal/elgamal.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Felgamal%2Felgamal.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Felgamal%2Felgamal.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Felgamal%2Felgamal.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -13,11 +13,11 @@\n package elgamal\n \n import (\n-\t\"big\"\n \t\"crypto/rand\"\n \t\"crypto/subtle\"\n \t\"errors\"\n \t\"io\"\n+\t\"math/big\"\n )\n \n // PublicKey represents an ElGamal public key."}, {"sha": "c4f99f5c48cd21ff31eb21353ffb76617aa5523b", "filename": "libgo/go/crypto/openpgp/elgamal/elgamal_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Felgamal%2Felgamal_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Felgamal%2Felgamal_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Felgamal%2Felgamal_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,9 +5,9 @@\n package elgamal\n \n import (\n-\t\"big\"\n \t\"bytes\"\n \t\"crypto/rand\"\n+\t\"math/big\"\n \t\"testing\"\n )\n "}, {"sha": "b24fa3a3fd3f0f05dcf4a98a2f51be2b82c6d743", "filename": "libgo/go/crypto/openpgp/packet/encrypted_key.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Fpacket%2Fencrypted_key.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Fpacket%2Fencrypted_key.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Fpacket%2Fencrypted_key.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,13 +5,13 @@\n package packet\n \n import (\n-\t\"big\"\n \t\"crypto/openpgp/elgamal\"\n \terror_ \"crypto/openpgp/error\"\n \t\"crypto/rand\"\n \t\"crypto/rsa\"\n \t\"encoding/binary\"\n \t\"io\"\n+\t\"math/big\"\n \t\"strconv\"\n )\n "}, {"sha": "2b8eff7b3a9a614c8ce7755b69d17c7024e4e6cd", "filename": "libgo/go/crypto/openpgp/packet/encrypted_key_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Fpacket%2Fencrypted_key_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Fpacket%2Fencrypted_key_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Fpacket%2Fencrypted_key_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,11 +5,11 @@\n package packet\n \n import (\n-\t\"big\"\n \t\"bytes\"\n \t\"crypto/rand\"\n \t\"crypto/rsa\"\n \t\"fmt\"\n+\t\"math/big\"\n \t\"testing\"\n )\n "}, {"sha": "778df15c0bd17bd39c509c4abb4410b560982b6e", "filename": "libgo/go/crypto/openpgp/packet/packet.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Fpacket%2Fpacket.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Fpacket%2Fpacket.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Fpacket%2Fpacket.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -7,12 +7,12 @@\n package packet\n \n import (\n-\t\"big\"\n \t\"crypto/aes\"\n \t\"crypto/cast5\"\n \t\"crypto/cipher\"\n \terror_ \"crypto/openpgp/error\"\n \t\"io\"\n+\t\"math/big\"\n )\n \n // readFull is the same as io.ReadFull except that reading zero bytes returns"}, {"sha": "c0ff82b4135fcd107d0cfa78745a6fe4f954302c", "filename": "libgo/go/crypto/openpgp/packet/private_key.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Fpacket%2Fprivate_key.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Fpacket%2Fprivate_key.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Fpacket%2Fprivate_key.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,7 +5,6 @@\n package packet\n \n import (\n-\t\"big\"\n \t\"bytes\"\n \t\"crypto/cipher\"\n \t\"crypto/dsa\"\n@@ -16,6 +15,7 @@ import (\n \t\"crypto/sha1\"\n \t\"io\"\n \t\"io/ioutil\"\n+\t\"math/big\"\n \t\"strconv\"\n )\n "}, {"sha": "7d71dc49a7b2983718a2930b46a013591675db29", "filename": "libgo/go/crypto/openpgp/packet/public_key.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Fpacket%2Fpublic_key.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Fpacket%2Fpublic_key.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Fpacket%2Fpublic_key.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,7 +5,6 @@\n package packet\n \n import (\n-\t\"big\"\n \t\"crypto/dsa\"\n \t\"crypto/openpgp/elgamal\"\n \terror_ \"crypto/openpgp/error\"\n@@ -15,6 +14,7 @@ import (\n \t\"fmt\"\n \t\"hash\"\n \t\"io\"\n+\t\"math/big\"\n \t\"strconv\"\n )\n "}, {"sha": "3a094a10f1f5d2a165e63f0f08a7e39d56085470", "filename": "libgo/go/crypto/openpgp/s2k/s2k_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Fs2k%2Fs2k_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Fs2k%2Fs2k_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Fs2k%2Fs2k_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -6,8 +6,8 @@ package s2k\n \n import (\n \t\"bytes\"\n-\t\"crypto/sha1\"\n \t\"crypto/rand\"\n+\t\"crypto/sha1\"\n \t\"encoding/hex\"\n \t\"testing\"\n )"}, {"sha": "b44ae9897ba2acc8039ac6163a2a6505c799eb21", "filename": "libgo/go/crypto/rand/util.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Frand%2Futil.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Frand%2Futil.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Frand%2Futil.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,8 +5,8 @@\n package rand\n \n import (\n-\t\"big\"\n \t\"io\"\n+\t\"math/big\"\n \t\"os\"\n )\n "}, {"sha": "d7b053fec5cc40383d6ed1bee1a741acc9ab34f1", "filename": "libgo/go/crypto/rsa/pkcs1v15.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Frsa%2Fpkcs1v15.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Frsa%2Fpkcs1v15.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Frsa%2Fpkcs1v15.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,11 +5,11 @@\n package rsa\n \n import (\n-\t\"big\"\n \t\"crypto\"\n \t\"crypto/subtle\"\n \t\"errors\"\n \t\"io\"\n+\t\"math/big\"\n )\n \n // This file implements encryption and decryption using PKCS#1 v1.5 padding."}, {"sha": "66188ac10ed8fa4432f523c7c5c26e273a11dc6c", "filename": "libgo/go/crypto/rsa/pkcs1v15_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Frsa%2Fpkcs1v15_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Frsa%2Fpkcs1v15_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Frsa%2Fpkcs1v15_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,14 +5,14 @@\n package rsa\n \n import (\n-\t\"big\"\n \t\"bytes\"\n \t\"crypto\"\n \t\"crypto/rand\"\n \t\"crypto/sha1\"\n \t\"encoding/base64\"\n \t\"encoding/hex\"\n \t\"io\"\n+\t\"math/big\"\n \t\"testing\"\n \t\"testing/quick\"\n )"}, {"sha": "27ccf61c4fc1bf78caadac8e0bdded6405ed4a2d", "filename": "libgo/go/crypto/rsa/rsa.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Frsa%2Frsa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Frsa%2Frsa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Frsa%2Frsa.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -8,12 +8,12 @@ package rsa\n // TODO(agl): Add support for PSS padding.\n \n import (\n-\t\"big\"\n \t\"crypto/rand\"\n \t\"crypto/subtle\"\n \t\"errors\"\n \t\"hash\"\n \t\"io\"\n+\t\"math/big\"\n )\n \n var bigZero = big.NewInt(0)"}, {"sha": "0fb9875d0440bde4be6a12635674b6a12b0856da", "filename": "libgo/go/crypto/rsa/rsa_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Frsa%2Frsa_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Frsa%2Frsa_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Frsa%2Frsa_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,10 +5,10 @@\n package rsa\n \n import (\n-\t\"big\"\n \t\"bytes\"\n \t\"crypto/rand\"\n \t\"crypto/sha1\"\n+\t\"math/big\"\n \t\"testing\"\n )\n "}, {"sha": "f4178e30c58248dcdd1e777eb5dd03b35e6cbe58", "filename": "libgo/go/crypto/tls/conn.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Ftls%2Fconn.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Ftls%2Fconn.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Fconn.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -471,7 +471,7 @@ Again:\n \t\t// RFC suggests that EOF without an alertCloseNotify is\n \t\t// an error, but popular web sites seem to do this,\n \t\t// so we can't make it an error.\n-\t\t// if err == os.EOF {\n+\t\t// if err == io.EOF {\n \t\t// \terr = io.ErrUnexpectedEOF\n \t\t// }\n \t\tif e, ok := err.(net.Error); !ok || !e.Temporary() {"}, {"sha": "c4463ff48f8bd096fa7736dd8341969a5d4be817", "filename": "libgo/go/crypto/tls/generate_cert.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Ftls%2Fgenerate_cert.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Ftls%2Fgenerate_cert.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Fgenerate_cert.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -8,14 +8,14 @@\n package main\n \n import (\n-\t\"big\"\n-\t\"crypto/x509/pkix\"\n \t\"crypto/rand\"\n \t\"crypto/rsa\"\n \t\"crypto/x509\"\n+\t\"crypto/x509/pkix\"\n \t\"encoding/pem\"\n \t\"flag\"\n \t\"log\"\n+\t\"math/big\"\n \t\"os\"\n \t\"time\"\n )"}, {"sha": "87e8f7e428d90e24eb6932fa620233b278bf8b05", "filename": "libgo/go/crypto/tls/handshake_messages_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_messages_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_messages_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_messages_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,7 +5,7 @@\n package tls\n \n import (\n-\t\"rand\"\n+\t\"math/rand\"\n \t\"reflect\"\n \t\"testing\"\n \t\"testing/quick\""}, {"sha": "bc3797947f5fe96ed249ad71fea94327e3a5ce4a", "filename": "libgo/go/crypto/tls/handshake_server_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_server_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_server_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Fhandshake_server_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,12 +5,12 @@\n package tls\n \n import (\n-\t\"big\"\n \t\"bytes\"\n \t\"crypto/rsa\"\n \t\"encoding/hex\"\n \t\"flag\"\n \t\"io\"\n+\t\"math/big\"\n \t\"net\"\n \t\"strconv\"\n \t\"strings\""}, {"sha": "08fb852d66a7403ad5d0ec941f8c6b84e41279c1", "filename": "libgo/go/crypto/tls/key_agreement.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Ftls%2Fkey_agreement.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Ftls%2Fkey_agreement.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Fkey_agreement.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,7 +5,6 @@\n package tls\n \n import (\n-\t\"big\"\n \t\"crypto\"\n \t\"crypto/elliptic\"\n \t\"crypto/md5\"\n@@ -14,6 +13,7 @@ import (\n \t\"crypto/x509\"\n \t\"errors\"\n \t\"io\"\n+\t\"math/big\"\n )\n \n // rsaKeyAgreement implements the standard TLS key agreement where the client"}, {"sha": "31d0dd0c2264e50ededc180794addbcfccc07c96", "filename": "libgo/go/crypto/x509/pkcs1.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fx509%2Fpkcs1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fx509%2Fpkcs1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fx509%2Fpkcs1.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,10 +5,10 @@\n package x509\n \n import (\n-\t\"asn1\"\n-\t\"big\"\n-\t\"errors\"\n \t\"crypto/rsa\"\n+\t\"encoding/asn1\"\n+\t\"errors\"\n+\t\"math/big\"\n )\n \n // pkcs1PrivateKey is a structure which mirrors the PKCS#1 ASN.1 for an RSA private key."}, {"sha": "b35274c9ae16b6340da0f06fccafea651ccef226", "filename": "libgo/go/crypto/x509/pkix/pkix.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fx509%2Fpkix%2Fpkix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fx509%2Fpkix%2Fpkix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fx509%2Fpkix%2Fpkix.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -7,8 +7,8 @@\n package pkix\n \n import (\n-\t\"asn1\"\n-\t\"big\"\n+\t\"encoding/asn1\"\n+\t\"math/big\"\n \t\"time\"\n )\n "}, {"sha": "9ff7db9a0f99ffb0fa02e80d88ac1e2110d8b623", "filename": "libgo/go/crypto/x509/x509.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fx509%2Fx509.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fx509%2Fx509.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fx509%2Fx509.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -6,17 +6,17 @@\n package x509\n \n import (\n-\t\"asn1\"\n-\t\"big\"\n \t\"bytes\"\n \t\"crypto\"\n \t\"crypto/dsa\"\n \t\"crypto/rsa\"\n \t\"crypto/sha1\"\n \t\"crypto/x509/pkix\"\n+\t\"encoding/asn1\"\n \t\"encoding/pem\"\n \t\"errors\"\n \t\"io\"\n+\t\"math/big\"\n \t\"time\"\n )\n "}, {"sha": "c42471507bebf78f122021e5f5fdf61ade367d42", "filename": "libgo/go/crypto/x509/x509_test.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fx509%2Fx509_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fcrypto%2Fx509%2Fx509_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fx509%2Fx509_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,16 +5,16 @@\n package x509\n \n import (\n-\t\"asn1\"\n-\t\"big\"\n \t\"bytes\"\n \t\"crypto/dsa\"\n \t\"crypto/rand\"\n \t\"crypto/rsa\"\n \t\"crypto/x509/pkix\"\n+\t\"encoding/asn1\"\n \t\"encoding/base64\"\n \t\"encoding/hex\"\n \t\"encoding/pem\"\n+\t\"math/big\"\n \t\"testing\"\n \t\"time\"\n )"}, {"sha": "562e7a0a37fff673d92e08d9fe2c893699364cdd", "filename": "libgo/go/debug/gosym/pclntab_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fdebug%2Fgosym%2Fpclntab_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fdebug%2Fgosym%2Fpclntab_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fgosym%2Fpclntab_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -7,8 +7,8 @@ package gosym\n import (\n \t\"debug/elf\"\n \t\"os\"\n-\t\"testing\"\n \t\"syscall\"\n+\t\"testing\"\n )\n \n func dotest() bool {"}, {"sha": "a0066654f8d0208006c6e4030d9d33f851b93008", "filename": "libgo/go/encoding/asn1/asn1.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fasn1%2Fasn1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fasn1%2Fasn1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fasn1%2Fasn1.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -20,8 +20,8 @@ package asn1\n // everything by any means.\n \n import (\n-\t\"big\"\n \t\"fmt\"\n+\t\"math/big\"\n \t\"reflect\"\n \t\"time\"\n )", "previous_filename": "libgo/go/asn1/asn1.go"}, {"sha": "1c529bdb30ca0482dce8d1a73ac38dd4a397c9fe", "filename": "libgo/go/encoding/asn1/asn1_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fasn1%2Fasn1_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fasn1%2Fasn1_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fasn1%2Fasn1_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/asn1/asn1_test.go"}, {"sha": "01f4f7b6ec7a6519caf9dd508685a4484a0fdf46", "filename": "libgo/go/encoding/asn1/common.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fasn1%2Fcommon.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fasn1%2Fcommon.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fasn1%2Fcommon.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/asn1/common.go"}, {"sha": "89c50a70ef4716df86b6beaefbd840f80921955f", "filename": "libgo/go/encoding/asn1/marshal.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fasn1%2Fmarshal.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fasn1%2Fmarshal.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fasn1%2Fmarshal.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,10 +5,10 @@\n package asn1\n \n import (\n-\t\"big\"\n \t\"bytes\"\n \t\"fmt\"\n \t\"io\"\n+\t\"math/big\"\n \t\"reflect\"\n \t\"time\"\n )", "previous_filename": "libgo/go/asn1/marshal.go"}, {"sha": "03df5f1e1d52b86fd24eb7ebd45a57f64b57ae2c", "filename": "libgo/go/encoding/asn1/marshal_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fasn1%2Fmarshal_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fasn1%2Fmarshal_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fasn1%2Fmarshal_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/asn1/marshal_test.go"}, {"sha": "d2f8b1e62483efc39a4d929b4fe860bab5154c91", "filename": "libgo/go/encoding/binary/binary.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fbinary%2Fbinary.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fbinary%2Fbinary.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fbinary%2Fbinary.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -9,8 +9,8 @@ package binary\n \n import (\n \t\"errors\"\n-\t\"math\"\n \t\"io\"\n+\t\"math\"\n \t\"reflect\"\n )\n "}, {"sha": "fd4fdb015747ef1cab8b61f9a3bbdc2af8804355", "filename": "libgo/go/encoding/binary/binary_test.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fbinary%2Fbinary_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fbinary%2Fbinary_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fbinary%2Fbinary_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -7,7 +7,6 @@ package binary\n import (\n \t\"bytes\"\n \t\"io\"\n-\t\"bytes\"\n \t\"math\"\n \t\"reflect\"\n \t\"testing\""}, {"sha": "ae0f567b9df811c241a5a0b47cabd2dfe22e8c33", "filename": "libgo/go/encoding/csv/reader.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fcsv%2Freader.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fcsv%2Freader.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fcsv%2Freader.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/csv/reader.go"}, {"sha": "5fd84a76bdfb830db453e7d2d2674870a5846956", "filename": "libgo/go/encoding/csv/reader_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fcsv%2Freader_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fcsv%2Freader_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fcsv%2Freader_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/csv/reader_test.go"}, {"sha": "c4dcba5668af61672db93d4abb0a7a87aafda8ec", "filename": "libgo/go/encoding/csv/writer.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fcsv%2Fwriter.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fcsv%2Fwriter.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fcsv%2Fwriter.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -9,7 +9,7 @@ import (\n \t\"io\"\n \t\"strings\"\n \t\"unicode\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n // A Writer writes records to a CSV encoded file.", "previous_filename": "libgo/go/csv/writer.go"}, {"sha": "578959007fd37f58fb745b559debb2dbd88c9c7f", "filename": "libgo/go/encoding/csv/writer_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fcsv%2Fwriter_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fcsv%2Fwriter_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fcsv%2Fwriter_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/csv/writer_test.go"}, {"sha": "dc0e0078e6810d1201e21722712fdaffd7d9ad76", "filename": "libgo/go/encoding/gob/codec_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Fcodec_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Fcodec_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Fcodec_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/gob/codec_test.go"}, {"sha": "b21c7fa0b2b06df51010115bf241ebb211aad566", "filename": "libgo/go/encoding/gob/debug.go", "status": "added", "additions": 687, "deletions": 0, "changes": 687, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Fdebug.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Fdebug.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Fdebug.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -0,0 +1,687 @@\n+package gob\n+\n+// This file is not normally included in the gob package.  Used only for debugging the package itself.\n+// Add debug.go to the files listed in the Makefile to add Debug to the gob package.\n+// Except for reading uints, it is an implementation of a reader that is independent of\n+// the one implemented by Decoder.\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"io\"\n+\t\"os\"\n+\t\"strings\"\n+\t\"sync\"\n+)\n+\n+var dumpBytes = false // If true, print the remaining bytes in the input buffer at each item.\n+\n+// Init installs the debugging facility. If this file is not compiled in the\n+// package, the tests in codec_test.go are no-ops.\n+func init() {\n+\tdebugFunc = Debug\n+}\n+\n+var (\n+\tblanks = bytes.Repeat([]byte{' '}, 3*10)\n+\tempty  = []byte(\": <empty>\\n\")\n+\ttabs   = strings.Repeat(\"\\t\", 100)\n+)\n+\n+// tab indents itself when printed.\n+type tab int\n+\n+func (t tab) String() string {\n+\tn := int(t)\n+\tif n > len(tabs) {\n+\t\tn = len(tabs)\n+\t}\n+\treturn tabs[0:n]\n+}\n+\n+func (t tab) print() {\n+\tfmt.Fprint(os.Stderr, t)\n+}\n+\n+// A peekReader wraps an io.Reader, allowing one to peek ahead to see\n+// what's coming without stealing the data from the client of the Reader.\n+type peekReader struct {\n+\tr    io.Reader\n+\tdata []byte // read-ahead data\n+}\n+\n+// newPeekReader returns a peekReader that wraps r.\n+func newPeekReader(r io.Reader) *peekReader {\n+\treturn &peekReader{r: r}\n+}\n+\n+// Read is the usual method. It will first take data that has been read ahead.\n+func (p *peekReader) Read(b []byte) (n int, err error) {\n+\tif len(p.data) == 0 {\n+\t\treturn p.r.Read(b)\n+\t}\n+\t// Satisfy what's possible from the read-ahead data.\n+\tn = copy(b, p.data)\n+\t// Move data down to beginning of slice, to avoid endless growth\n+\tcopy(p.data, p.data[n:])\n+\tp.data = p.data[:len(p.data)-n]\n+\treturn\n+}\n+\n+// peek returns as many bytes as possible from the unread\n+// portion of the stream, up to the length of b.\n+func (p *peekReader) peek(b []byte) (n int, err error) {\n+\tif len(p.data) > 0 {\n+\t\tn = copy(b, p.data)\n+\t\tif n == len(b) {\n+\t\t\treturn\n+\t\t}\n+\t\tb = b[n:]\n+\t}\n+\tif len(b) == 0 {\n+\t\treturn\n+\t}\n+\tm, e := io.ReadFull(p.r, b)\n+\tif m > 0 {\n+\t\tp.data = append(p.data, b[:m]...)\n+\t}\n+\tn += m\n+\tif e == io.ErrUnexpectedEOF {\n+\t\t// That means m > 0 but we reached EOF. If we got data\n+\t\t// we won't complain about not being able to peek enough.\n+\t\tif n > 0 {\n+\t\t\te = nil\n+\t\t} else {\n+\t\t\te = io.EOF\n+\t\t}\n+\t}\n+\treturn n, e\n+}\n+\n+type debugger struct {\n+\tmutex          sync.Mutex\n+\tremain         int  // the number of bytes known to remain in the input\n+\tremainingKnown bool // the value of 'remain' is valid\n+\tr              *peekReader\n+\twireType       map[typeId]*wireType\n+\ttmp            []byte // scratch space for decoding uints.\n+}\n+\n+// dump prints the next nBytes of the input.\n+// It arranges to print the output aligned from call to\n+// call, to make it easy to see what has been consumed.\n+func (deb *debugger) dump(format string, args ...interface{}) {\n+\tif !dumpBytes {\n+\t\treturn\n+\t}\n+\tfmt.Fprintf(os.Stderr, format+\" \", args...)\n+\tif !deb.remainingKnown {\n+\t\treturn\n+\t}\n+\tif deb.remain < 0 {\n+\t\tfmt.Fprintf(os.Stderr, \"remaining byte count is negative! %d\\n\", deb.remain)\n+\t\treturn\n+\t}\n+\tdata := make([]byte, deb.remain)\n+\tn, _ := deb.r.peek(data)\n+\tif n == 0 {\n+\t\tos.Stderr.Write(empty)\n+\t\treturn\n+\t}\n+\tb := new(bytes.Buffer)\n+\tfmt.Fprintf(b, \"[%d]{\\n\", deb.remain)\n+\t// Blanks until first byte\n+\tlineLength := 0\n+\tif n := len(data); n%10 != 0 {\n+\t\tlineLength = 10 - n%10\n+\t\tfmt.Fprintf(b, \"\\t%s\", blanks[:lineLength*3])\n+\t}\n+\t// 10 bytes per line\n+\tfor len(data) > 0 {\n+\t\tif lineLength == 0 {\n+\t\t\tfmt.Fprint(b, \"\\t\")\n+\t\t}\n+\t\tm := 10 - lineLength\n+\t\tlineLength = 0\n+\t\tif m > len(data) {\n+\t\t\tm = len(data)\n+\t\t}\n+\t\tfmt.Fprintf(b, \"% x\\n\", data[:m])\n+\t\tdata = data[m:]\n+\t}\n+\tfmt.Fprint(b, \"}\\n\")\n+\tos.Stderr.Write(b.Bytes())\n+}\n+\n+// Debug prints a human-readable representation of the gob data read from r.\n+// It is a no-op unless debugging was enabled when the package was built.\n+func Debug(r io.Reader) {\n+\terr := debug(r)\n+\tif err != nil {\n+\t\tfmt.Fprintf(os.Stderr, \"gob debug: %s\\n\", err)\n+\t}\n+}\n+\n+// debug implements Debug, but catches panics and returns\n+// them as errors to be printed by Debug.\n+func debug(r io.Reader) (err error) {\n+\tdefer catchError(&err)\n+\tfmt.Fprintln(os.Stderr, \"Start of debugging\")\n+\tdeb := &debugger{\n+\t\tr:        newPeekReader(r),\n+\t\twireType: make(map[typeId]*wireType),\n+\t\ttmp:      make([]byte, 16),\n+\t}\n+\tif b, ok := r.(*bytes.Buffer); ok {\n+\t\tdeb.remain = b.Len()\n+\t\tdeb.remainingKnown = true\n+\t}\n+\tdeb.gobStream()\n+\treturn\n+}\n+\n+// note that we've consumed some bytes\n+func (deb *debugger) consumed(n int) {\n+\tif deb.remainingKnown {\n+\t\tdeb.remain -= n\n+\t}\n+}\n+\n+// int64 decodes and returns the next integer, which must be present.\n+// Don't call this if you could be at EOF.\n+func (deb *debugger) int64() int64 {\n+\treturn toInt(deb.uint64())\n+}\n+\n+// uint64 returns and decodes the next unsigned integer, which must be present.\n+// Don't call this if you could be at EOF.\n+// TODO: handle errors better.\n+func (deb *debugger) uint64() uint64 {\n+\tn, w, err := decodeUintReader(deb.r, deb.tmp)\n+\tif err != nil {\n+\t\terrorf(\"debug: read error: %s\", err)\n+\t}\n+\tdeb.consumed(w)\n+\treturn n\n+}\n+\n+// GobStream:\n+//\tDelimitedMessage* (until EOF)\n+func (deb *debugger) gobStream() {\n+\t// Make sure we're single-threaded through here.\n+\tdeb.mutex.Lock()\n+\tdefer deb.mutex.Unlock()\n+\n+\tfor deb.delimitedMessage(0) {\n+\t}\n+}\n+\n+// DelimitedMessage:\n+//\tuint(lengthOfMessage) Message\n+func (deb *debugger) delimitedMessage(indent tab) bool {\n+\tfor {\n+\t\tn := deb.loadBlock(true)\n+\t\tif n < 0 {\n+\t\t\treturn false\n+\t\t}\n+\t\tdeb.dump(\"Delimited message of length %d\", n)\n+\t\tdeb.message(indent)\n+\t}\n+\treturn true\n+}\n+\n+// loadBlock preps us to read a message\n+// of the length specified next in the input. It returns\n+// the length of the block. The argument tells whether\n+// an EOF is acceptable now.  If it is and one is found,\n+// the return value is negative.\n+func (deb *debugger) loadBlock(eofOK bool) int {\n+\tn64, w, err := decodeUintReader(deb.r, deb.tmp) // deb.uint64 will error at EOF\n+\tif err != nil {\n+\t\tif eofOK && err == io.EOF {\n+\t\t\treturn -1\n+\t\t}\n+\t\terrorf(\"debug: unexpected error: %s\", err)\n+\t}\n+\tdeb.consumed(w)\n+\tn := int(n64)\n+\tif n < 0 {\n+\t\terrorf(\"huge value for message length: %d\", n64)\n+\t}\n+\treturn int(n)\n+}\n+\n+// Message:\n+//\tTypeSequence TypedValue\n+// TypeSequence\n+//\t(TypeDefinition DelimitedTypeDefinition*)?\n+// DelimitedTypeDefinition:\n+//\tuint(lengthOfTypeDefinition) TypeDefinition\n+// TypedValue:\n+//\tint(typeId) Value\n+func (deb *debugger) message(indent tab) bool {\n+\tfor {\n+\t\t// Convert the uint64 to a signed integer typeId\n+\t\tuid := deb.int64()\n+\t\tid := typeId(uid)\n+\t\tdeb.dump(\"type id=%d\", id)\n+\t\tif id < 0 {\n+\t\t\tdeb.typeDefinition(indent, -id)\n+\t\t\tn := deb.loadBlock(false)\n+\t\t\tdeb.dump(\"Message of length %d\", n)\n+\t\t\tcontinue\n+\t\t} else {\n+\t\t\tdeb.value(indent, id)\n+\t\t\tbreak\n+\t\t}\n+\t}\n+\treturn true\n+}\n+\n+// Helper methods to make it easy to scan a type descriptor.\n+\n+// common returns the CommonType at the input point.\n+func (deb *debugger) common() CommonType {\n+\tfieldNum := -1\n+\tname := \"\"\n+\tid := typeId(0)\n+\tfor {\n+\t\tdelta := deb.delta(-1)\n+\t\tif delta == 0 {\n+\t\t\tbreak\n+\t\t}\n+\t\tfieldNum += delta\n+\t\tswitch fieldNum {\n+\t\tcase 0:\n+\t\t\tname = deb.string()\n+\t\tcase 1:\n+\t\t\t// Id typeId\n+\t\t\tid = deb.typeId()\n+\t\tdefault:\n+\t\t\terrorf(\"corrupted CommonType\")\n+\t\t}\n+\t}\n+\treturn CommonType{name, id}\n+}\n+\n+// uint returns the unsigned int at the input point, as a uint (not uint64).\n+func (deb *debugger) uint() uint {\n+\treturn uint(deb.uint64())\n+}\n+\n+// int returns the signed int at the input point, as an int (not int64).\n+func (deb *debugger) int() int {\n+\treturn int(deb.int64())\n+}\n+\n+// typeId returns the type id at the input point.\n+func (deb *debugger) typeId() typeId {\n+\treturn typeId(deb.int64())\n+}\n+\n+// string returns the string at the input point.\n+func (deb *debugger) string() string {\n+\tx := int(deb.uint64())\n+\tb := make([]byte, x)\n+\tnb, _ := deb.r.Read(b)\n+\tif nb != x {\n+\t\terrorf(\"corrupted type\")\n+\t}\n+\tdeb.consumed(nb)\n+\treturn string(b)\n+}\n+\n+// delta returns the field delta at the input point.  The expect argument,\n+// if non-negative, identifies what the value should be.\n+func (deb *debugger) delta(expect int) int {\n+\tdelta := int(deb.uint64())\n+\tif delta < 0 || (expect >= 0 && delta != expect) {\n+\t\terrorf(\"decode: corrupted type: delta %d expected %d\", delta, expect)\n+\t}\n+\treturn delta\n+}\n+\n+// TypeDefinition:\n+//\t[int(-typeId) (already read)] encodingOfWireType\n+func (deb *debugger) typeDefinition(indent tab, id typeId) {\n+\tdeb.dump(\"type definition for id %d\", id)\n+\t// Encoding is of a wireType. Decode the structure as usual\n+\tfieldNum := -1\n+\twire := new(wireType)\n+\t// A wireType defines a single field.\n+\tdelta := deb.delta(-1)\n+\tfieldNum += delta\n+\tswitch fieldNum {\n+\tcase 0: // array type, one field of {{Common}, elem, length}\n+\t\t// Field number 0 is CommonType\n+\t\tdeb.delta(1)\n+\t\tcom := deb.common()\n+\t\t// Field number 1 is type Id of elem\n+\t\tdeb.delta(1)\n+\t\tid := deb.typeId()\n+\t\t// Field number 3 is length\n+\t\tdeb.delta(1)\n+\t\tlength := deb.int()\n+\t\twire.ArrayT = &arrayType{com, id, length}\n+\n+\tcase 1: // slice type, one field of {{Common}, elem}\n+\t\t// Field number 0 is CommonType\n+\t\tdeb.delta(1)\n+\t\tcom := deb.common()\n+\t\t// Field number 1 is type Id of elem\n+\t\tdeb.delta(1)\n+\t\tid := deb.typeId()\n+\t\twire.SliceT = &sliceType{com, id}\n+\n+\tcase 2: // struct type, one field of {{Common}, []fieldType}\n+\t\t// Field number 0 is CommonType\n+\t\tdeb.delta(1)\n+\t\tcom := deb.common()\n+\t\t// Field number 1 is slice of FieldType\n+\t\tdeb.delta(1)\n+\t\tnumField := int(deb.uint())\n+\t\tfield := make([]*fieldType, numField)\n+\t\tfor i := 0; i < numField; i++ {\n+\t\t\tfield[i] = new(fieldType)\n+\t\t\tdeb.delta(1) // field 0 of fieldType: name\n+\t\t\tfield[i].Name = deb.string()\n+\t\t\tdeb.delta(1) // field 1 of fieldType: id\n+\t\t\tfield[i].Id = deb.typeId()\n+\t\t\tdeb.delta(0) // end of fieldType\n+\t\t}\n+\t\twire.StructT = &structType{com, field}\n+\n+\tcase 3: // map type, one field of {{Common}, key, elem}\n+\t\t// Field number 0 is CommonType\n+\t\tdeb.delta(1)\n+\t\tcom := deb.common()\n+\t\t// Field number 1 is type Id of key\n+\t\tdeb.delta(1)\n+\t\tkeyId := deb.typeId()\n+\t\t// Field number 2 is type Id of elem\n+\t\tdeb.delta(1)\n+\t\telemId := deb.typeId()\n+\t\twire.MapT = &mapType{com, keyId, elemId}\n+\tcase 4: // GobEncoder type, one field of {{Common}}\n+\t\t// Field number 0 is CommonType\n+\t\tdeb.delta(1)\n+\t\tcom := deb.common()\n+\t\twire.GobEncoderT = &gobEncoderType{com}\n+\tdefault:\n+\t\terrorf(\"bad field in type %d\", fieldNum)\n+\t}\n+\tdeb.printWireType(indent, wire)\n+\tdeb.delta(0) // end inner type (arrayType, etc.)\n+\tdeb.delta(0) // end wireType\n+\t// Remember we've seen this type.\n+\tdeb.wireType[id] = wire\n+}\n+\n+// Value:\n+//\tSingletonValue | StructValue\n+func (deb *debugger) value(indent tab, id typeId) {\n+\twire, ok := deb.wireType[id]\n+\tif ok && wire.StructT != nil {\n+\t\tdeb.structValue(indent, id)\n+\t} else {\n+\t\tdeb.singletonValue(indent, id)\n+\t}\n+}\n+\n+// SingletonValue:\n+//\tuint(0) FieldValue\n+func (deb *debugger) singletonValue(indent tab, id typeId) {\n+\tdeb.dump(\"Singleton value\")\n+\t// is it a builtin type?\n+\twire := deb.wireType[id]\n+\t_, ok := builtinIdToType[id]\n+\tif !ok && wire == nil {\n+\t\terrorf(\"type id %d not defined\", id)\n+\t}\n+\tm := deb.uint64()\n+\tif m != 0 {\n+\t\terrorf(\"expected zero; got %d\", m)\n+\t}\n+\tdeb.fieldValue(indent, id)\n+}\n+\n+// InterfaceValue:\n+//\tNilInterfaceValue | NonNilInterfaceValue\n+func (deb *debugger) interfaceValue(indent tab) {\n+\tdeb.dump(\"Start of interface value\")\n+\tif nameLen := deb.uint64(); nameLen == 0 {\n+\t\tdeb.nilInterfaceValue(indent)\n+\t} else {\n+\t\tdeb.nonNilInterfaceValue(indent, int(nameLen))\n+\t}\n+}\n+\n+// NilInterfaceValue:\n+//\tuint(0) [already read]\n+func (deb *debugger) nilInterfaceValue(indent tab) int {\n+\tfmt.Fprintf(os.Stderr, \"%snil interface\\n\", indent)\n+\treturn 0\n+}\n+\n+// NonNilInterfaceValue:\n+//\tConcreteTypeName TypeSequence InterfaceContents\n+// ConcreteTypeName:\n+//\tuint(lengthOfName) [already read=n] name\n+// InterfaceContents:\n+//\tint(concreteTypeId) DelimitedValue\n+// DelimitedValue:\n+//\tuint(length) Value\n+func (deb *debugger) nonNilInterfaceValue(indent tab, nameLen int) {\n+\t// ConcreteTypeName\n+\tb := make([]byte, nameLen)\n+\tdeb.r.Read(b) // TODO: CHECK THESE READS!!\n+\tdeb.consumed(nameLen)\n+\tname := string(b)\n+\n+\tfor {\n+\t\tid := deb.typeId()\n+\t\tif id < 0 {\n+\t\t\tdeb.typeDefinition(indent, -id)\n+\t\t\tn := deb.loadBlock(false)\n+\t\t\tdeb.dump(\"Nested message of length %d\", n)\n+\t\t} else {\n+\t\t\t// DelimitedValue\n+\t\t\tx := deb.uint64() // in case we want to ignore the value; we don't.\n+\t\t\tfmt.Fprintf(os.Stderr, \"%sinterface value, type %q id=%d; valueLength %d\\n\", indent, name, id, x)\n+\t\t\tdeb.value(indent, id)\n+\t\t\tbreak\n+\t\t}\n+\t}\n+}\n+\n+// printCommonType prints a common type; used by printWireType.\n+func (deb *debugger) printCommonType(indent tab, kind string, common *CommonType) {\n+\tindent.print()\n+\tfmt.Fprintf(os.Stderr, \"%s %q id=%d\\n\", kind, common.Name, common.Id)\n+}\n+\n+// printWireType prints the contents of a wireType.\n+func (deb *debugger) printWireType(indent tab, wire *wireType) {\n+\tfmt.Fprintf(os.Stderr, \"%stype definition {\\n\", indent)\n+\tindent++\n+\tswitch {\n+\tcase wire.ArrayT != nil:\n+\t\tdeb.printCommonType(indent, \"array\", &wire.ArrayT.CommonType)\n+\t\tfmt.Fprintf(os.Stderr, \"%slen %d\\n\", indent+1, wire.ArrayT.Len)\n+\t\tfmt.Fprintf(os.Stderr, \"%selemid %d\\n\", indent+1, wire.ArrayT.Elem)\n+\tcase wire.MapT != nil:\n+\t\tdeb.printCommonType(indent, \"map\", &wire.MapT.CommonType)\n+\t\tfmt.Fprintf(os.Stderr, \"%skey id=%d\\n\", indent+1, wire.MapT.Key)\n+\t\tfmt.Fprintf(os.Stderr, \"%selem id=%d\\n\", indent+1, wire.MapT.Elem)\n+\tcase wire.SliceT != nil:\n+\t\tdeb.printCommonType(indent, \"slice\", &wire.SliceT.CommonType)\n+\t\tfmt.Fprintf(os.Stderr, \"%selem id=%d\\n\", indent+1, wire.SliceT.Elem)\n+\tcase wire.StructT != nil:\n+\t\tdeb.printCommonType(indent, \"struct\", &wire.StructT.CommonType)\n+\t\tfor i, field := range wire.StructT.Field {\n+\t\t\tfmt.Fprintf(os.Stderr, \"%sfield %d:\\t%s\\tid=%d\\n\", indent+1, i, field.Name, field.Id)\n+\t\t}\n+\tcase wire.GobEncoderT != nil:\n+\t\tdeb.printCommonType(indent, \"GobEncoder\", &wire.GobEncoderT.CommonType)\n+\t}\n+\tindent--\n+\tfmt.Fprintf(os.Stderr, \"%s}\\n\", indent)\n+}\n+\n+// fieldValue prints a value of any type, such as a struct field.\n+// FieldValue:\n+//\tbuiltinValue | ArrayValue | MapValue | SliceValue | StructValue | InterfaceValue\n+func (deb *debugger) fieldValue(indent tab, id typeId) {\n+\t_, ok := builtinIdToType[id]\n+\tif ok {\n+\t\tif id == tInterface {\n+\t\t\tdeb.interfaceValue(indent)\n+\t\t} else {\n+\t\t\tdeb.printBuiltin(indent, id)\n+\t\t}\n+\t\treturn\n+\t}\n+\twire, ok := deb.wireType[id]\n+\tif !ok {\n+\t\terrorf(\"type id %d not defined\", id)\n+\t}\n+\tswitch {\n+\tcase wire.ArrayT != nil:\n+\t\tdeb.arrayValue(indent, wire)\n+\tcase wire.MapT != nil:\n+\t\tdeb.mapValue(indent, wire)\n+\tcase wire.SliceT != nil:\n+\t\tdeb.sliceValue(indent, wire)\n+\tcase wire.StructT != nil:\n+\t\tdeb.structValue(indent, id)\n+\tcase wire.GobEncoderT != nil:\n+\t\tdeb.gobEncoderValue(indent, id)\n+\tdefault:\n+\t\tpanic(\"bad wire type for field\")\n+\t}\n+}\n+\n+// printBuiltin prints a value not of a fundamental type, that is,\n+// one whose type is known to gobs at bootstrap time.\n+func (deb *debugger) printBuiltin(indent tab, id typeId) {\n+\tswitch id {\n+\tcase tBool:\n+\t\tx := deb.int64()\n+\t\tif x == 0 {\n+\t\t\tfmt.Fprintf(os.Stderr, \"%sfalse\\n\", indent)\n+\t\t} else {\n+\t\t\tfmt.Fprintf(os.Stderr, \"%strue\\n\", indent)\n+\t\t}\n+\tcase tInt:\n+\t\tx := deb.int64()\n+\t\tfmt.Fprintf(os.Stderr, \"%s%d\\n\", indent, x)\n+\tcase tUint:\n+\t\tx := deb.int64()\n+\t\tfmt.Fprintf(os.Stderr, \"%s%d\\n\", indent, x)\n+\tcase tFloat:\n+\t\tx := deb.uint64()\n+\t\tfmt.Fprintf(os.Stderr, \"%s%g\\n\", indent, floatFromBits(x))\n+\tcase tComplex:\n+\t\tr := deb.uint64()\n+\t\ti := deb.uint64()\n+\t\tfmt.Fprintf(os.Stderr, \"%s%g+%gi\\n\", indent, floatFromBits(r), floatFromBits(i))\n+\tcase tBytes:\n+\t\tx := int(deb.uint64())\n+\t\tb := make([]byte, x)\n+\t\tdeb.r.Read(b)\n+\t\tdeb.consumed(x)\n+\t\tfmt.Fprintf(os.Stderr, \"%s{% x}=%q\\n\", indent, b, b)\n+\tcase tString:\n+\t\tx := int(deb.uint64())\n+\t\tb := make([]byte, x)\n+\t\tdeb.r.Read(b)\n+\t\tdeb.consumed(x)\n+\t\tfmt.Fprintf(os.Stderr, \"%s%q\\n\", indent, b)\n+\tdefault:\n+\t\tpanic(\"unknown builtin\")\n+\t}\n+}\n+\n+// ArrayValue:\n+//\tuint(n) FieldValue*n\n+func (deb *debugger) arrayValue(indent tab, wire *wireType) {\n+\telemId := wire.ArrayT.Elem\n+\tu := deb.uint64()\n+\tlength := int(u)\n+\tfor i := 0; i < length; i++ {\n+\t\tdeb.fieldValue(indent, elemId)\n+\t}\n+\tif length != wire.ArrayT.Len {\n+\t\tfmt.Fprintf(os.Stderr, \"%s(wrong length for array: %d should be %d)\\n\", indent, length, wire.ArrayT.Len)\n+\t}\n+}\n+\n+// MapValue:\n+//\tuint(n) (FieldValue FieldValue)*n  [n (key, value) pairs]\n+func (deb *debugger) mapValue(indent tab, wire *wireType) {\n+\tkeyId := wire.MapT.Key\n+\telemId := wire.MapT.Elem\n+\tu := deb.uint64()\n+\tlength := int(u)\n+\tfor i := 0; i < length; i++ {\n+\t\tdeb.fieldValue(indent+1, keyId)\n+\t\tdeb.fieldValue(indent+1, elemId)\n+\t}\n+}\n+\n+// SliceValue:\n+//\tuint(n) (n FieldValue)\n+func (deb *debugger) sliceValue(indent tab, wire *wireType) {\n+\telemId := wire.SliceT.Elem\n+\tu := deb.uint64()\n+\tlength := int(u)\n+\tdeb.dump(\"Start of slice of length %d\", length)\n+\n+\tfor i := 0; i < length; i++ {\n+\t\tdeb.fieldValue(indent, elemId)\n+\t}\n+}\n+\n+// StructValue:\n+//\t(uint(fieldDelta) FieldValue)*\n+func (deb *debugger) structValue(indent tab, id typeId) {\n+\tdeb.dump(\"Start of struct value of %q id=%d\\n<<\\n\", id.name(), id)\n+\tfmt.Fprintf(os.Stderr, \"%s%s struct {\\n\", indent, id.name())\n+\twire, ok := deb.wireType[id]\n+\tif !ok {\n+\t\terrorf(\"type id %d not defined\", id)\n+\t}\n+\tstrct := wire.StructT\n+\tfieldNum := -1\n+\tindent++\n+\tfor {\n+\t\tdelta := deb.uint64()\n+\t\tif delta == 0 { // struct terminator is zero delta fieldnum\n+\t\t\tbreak\n+\t\t}\n+\t\tfieldNum += int(delta)\n+\t\tif fieldNum < 0 || fieldNum >= len(strct.Field) {\n+\t\t\tdeb.dump(\"field number out of range: prevField=%d delta=%d\", fieldNum-int(delta), delta)\n+\t\t\tbreak\n+\t\t}\n+\t\tfmt.Fprintf(os.Stderr, \"%sfield %d:\\t%s\\n\", indent, fieldNum, wire.StructT.Field[fieldNum].Name)\n+\t\tdeb.fieldValue(indent+1, strct.Field[fieldNum].Id)\n+\t}\n+\tindent--\n+\tfmt.Fprintf(os.Stderr, \"%s} // end %s struct\\n\", indent, id.name())\n+\tdeb.dump(\">> End of struct value of type %d %q\", id, id.name())\n+}\n+\n+// GobEncoderValue:\n+//\tuint(n) byte*n\n+func (deb *debugger) gobEncoderValue(indent tab, id typeId) {\n+\tlen := deb.uint64()\n+\tdeb.dump(\"GobEncoder value of %q id=%d, length %d\\n\", id.name(), id, len)\n+\tfmt.Fprintf(os.Stderr, \"%s%s (implements GobEncoder)\\n\", indent, id.name())\n+\tdata := make([]byte, len)\n+\t_, err := deb.r.Read(data)\n+\tif err != nil {\n+\t\terrorf(\"gobEncoder data read: %s\", err)\n+\t}\n+\tfmt.Fprintf(os.Stderr, \"%s[% .2x]\\n\", indent+1, data)\n+}"}, {"sha": "1515d1286d093d6a87990441195cc428ea645e75", "filename": "libgo/go/encoding/gob/decode.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Fdecode.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Fdecode.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Fdecode.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/gob/decode.go"}, {"sha": "5e684d3ee7eba49ab243fc4674b8f8aa9be8bb5f", "filename": "libgo/go/encoding/gob/decoder.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Fdecoder.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Fdecoder.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Fdecoder.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/gob/decoder.go"}, {"sha": "05ebef195932775e2e99962ef38cc09d05fe4900", "filename": "libgo/go/encoding/gob/doc.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Fdoc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Fdoc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Fdoc.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/gob/doc.go"}, {"sha": "0d0017cc783c6224b4b2e904c33e534bdc60862e", "filename": "libgo/go/encoding/gob/dump.go", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Fdump.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Fdump.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Fdump.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -0,0 +1,22 @@\n+package main\n+\n+// Need to compile package gob with debug.go to build this program.\n+\n+import (\n+\t\"encoding/gob\"\n+\t\"fmt\"\n+\t\"os\"\n+)\n+\n+func main() {\n+\tvar err error\n+\tfile := os.Stdin\n+\tif len(os.Args) > 1 {\n+\t\tfile, err = os.Open(os.Args[1])\n+\t\tif err != nil {\n+\t\t\tfmt.Fprintf(os.Stderr, \"dump: %s\\n\", err)\n+\t\t\tos.Exit(1)\n+\t\t}\n+\t}\n+\tgob.Debug(file)\n+}"}, {"sha": "c7e48230c5306ebebd1cec9417ac24792ffe75c5", "filename": "libgo/go/encoding/gob/encode.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Fencode.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Fencode.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Fencode.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/gob/encode.go"}, {"sha": "e4a48dfc4fca6804bad5bf4501d52463f49be45c", "filename": "libgo/go/encoding/gob/encoder.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Fencoder.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Fencoder.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Fencoder.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/gob/encoder.go"}, {"sha": "bc5af120af3350bd975bb3075012e6dbcd1aa7ca", "filename": "libgo/go/encoding/gob/encoder_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Fencoder_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Fencoder_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Fencoder_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/gob/encoder_test.go"}, {"sha": "fbae8b683da74038a930e055219246e278b6ee88", "filename": "libgo/go/encoding/gob/error.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Ferror.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Ferror.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Ferror.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/gob/error.go"}, {"sha": "eacfd842db383cd4997ed9ec623e662277f078db", "filename": "libgo/go/encoding/gob/gobencdec_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Fgobencdec_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Fgobencdec_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Fgobencdec_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/gob/gobencdec_test.go"}, {"sha": "47437a607f1a3e9ec05e8da354e22d7de6ee8b5b", "filename": "libgo/go/encoding/gob/timing_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Ftiming_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Ftiming_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Ftiming_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/gob/timing_test.go"}, {"sha": "1b20843fa2574004f7f9fa76da7736720fa702e4", "filename": "libgo/go/encoding/gob/type.go", "status": "renamed", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Ftype.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Ftype.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Ftype.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -11,7 +11,7 @@ import (\n \t\"reflect\"\n \t\"sync\"\n \t\"unicode\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n // userTypeInfo stores the information associated with a type the user has handed\n@@ -703,18 +703,19 @@ func RegisterName(name string, value interface{}) {\n \t\t// reserved for nil\n \t\tpanic(\"attempt to register empty name\")\n \t}\n-\tbase := userType(reflect.TypeOf(value)).base\n-\t// Check for incompatible duplicates.\n-\tif t, ok := nameToConcreteType[name]; ok && t != base {\n-\t\tpanic(\"gob: registering duplicate types for \" + name)\n+\tut := userType(reflect.TypeOf(value))\n+\t// Check for incompatible duplicates. The name must refer to the\n+\t// same user type, and vice versa.\n+\tif t, ok := nameToConcreteType[name]; ok && t != ut.user {\n+\t\tpanic(fmt.Sprintf(\"gob: registering duplicate types for %q: %s != %s\", name, t, ut.user))\n \t}\n-\tif n, ok := concreteTypeToName[base]; ok && n != name {\n-\t\tpanic(\"gob: registering duplicate names for \" + base.String())\n+\tif n, ok := concreteTypeToName[ut.base]; ok && n != name {\n+\t\tpanic(fmt.Sprintf(\"gob: registering duplicate names for %s: %q != %q\", ut.user, n, name))\n \t}\n \t// Store the name and type provided by the user....\n \tnameToConcreteType[name] = reflect.TypeOf(value)\n \t// but the flattened type in the type table, since that's what decode needs.\n-\tconcreteTypeToName[base] = name\n+\tconcreteTypeToName[ut.base] = name\n }\n \n // Register records a type, identified by a value for that type, under its", "previous_filename": "libgo/go/gob/type.go"}, {"sha": "42bdb4cf7bb224198162fb626c6394df1ef1560c", "filename": "libgo/go/encoding/gob/type_test.go", "status": "renamed", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Ftype_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fgob%2Ftype_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fgob%2Ftype_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -151,3 +151,11 @@ func TestStructType(t *testing.T) {\n \t\tt.Errorf(\"struct printed as %q; expected %q\", str, expected)\n \t}\n }\n+\n+// Should be OK to register the same type multiple times, as long as they're\n+// at the same level of indirection.\n+func TestRegistration(t *testing.T) {\n+\ttype T struct{ a int }\n+\tRegister(new(T))\n+\tRegister(new(T))\n+}", "previous_filename": "libgo/go/gob/type_test.go"}, {"sha": "41295d2d24142d8eeb8815676dc5338c9453e124", "filename": "libgo/go/encoding/json/decode.go", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fjson%2Fdecode.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fjson%2Fdecode.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Fdecode.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -15,8 +15,8 @@ import (\n \t\"strconv\"\n \t\"strings\"\n \t\"unicode\"\n-\t\"utf16\"\n-\t\"utf8\"\n+\t\"unicode/utf16\"\n+\t\"unicode/utf8\"\n )\n \n // Unmarshal parses the JSON-encoded data and stores the result", "previous_filename": "libgo/go/json/decode.go"}, {"sha": "bd4326a0cd7e828721e3f44af3212ec8a58b4d1e", "filename": "libgo/go/encoding/json/decode_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fjson%2Fdecode_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fjson%2Fdecode_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Fdecode_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/json/decode_test.go"}, {"sha": "35964c5d9c2378fd5fe021855b6876b67f8b75d4", "filename": "libgo/go/encoding/json/encode.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fjson%2Fencode.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fjson%2Fencode.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Fencode.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -17,7 +17,7 @@ import (\n \t\"sort\"\n \t\"strconv\"\n \t\"unicode\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n // Marshal returns the JSON encoding of v.", "previous_filename": "libgo/go/json/encode.go"}, {"sha": "92f266aba63819bf87dcb26be26b436f7e9515d0", "filename": "libgo/go/encoding/json/encode_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fjson%2Fencode_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fjson%2Fencode_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Fencode_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/json/encode_test.go"}, {"sha": "5ba19b07ac652d73564cf56463545b93f4d20e0f", "filename": "libgo/go/encoding/json/indent.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fjson%2Findent.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fjson%2Findent.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Findent.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/json/indent.go"}, {"sha": "179690464b9f9e46cd50a64b92d104cb6f4c767e", "filename": "libgo/go/encoding/json/scanner.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fjson%2Fscanner.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fjson%2Fscanner.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Fscanner.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/json/scanner.go"}, {"sha": "a0a5995af8ffb1e695264c10067974780be2b271", "filename": "libgo/go/encoding/json/scanner_test.go", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fjson%2Fscanner_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fjson%2Fscanner_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Fscanner_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -7,7 +7,7 @@ package json\n import (\n \t\"bytes\"\n \t\"math\"\n-\t\"rand\"\n+\t\"math/rand\"\n \t\"reflect\"\n \t\"testing\"\n )\n@@ -147,7 +147,7 @@ var indentErrorTests = []indentErrorTest{\n \t{`{\"X\": \"foo\" \"Y\": \"bar\"}`, &SyntaxError{\"invalid character '\\\"' after object key:value pair\", 13}},\n }\n \n-func TestIdentErrors(t *testing.T) {\n+func TestIndentErrors(t *testing.T) {\n \tfor i, tt := range indentErrorTests {\n \t\tslice := make([]uint8, 0)\n \t\tbuf := bytes.NewBuffer(slice)", "previous_filename": "libgo/go/json/scanner_test.go"}, {"sha": "f2476395023f74f1dfe49583f61c8ec71ba1c555", "filename": "libgo/go/encoding/json/stream.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fjson%2Fstream.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fjson%2Fstream.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Fstream.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/json/stream.go"}, {"sha": "ce5a7e6d65625ea52b0d5c340833eb30e83d5372", "filename": "libgo/go/encoding/json/stream_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fjson%2Fstream_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fjson%2Fstream_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Fstream_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/json/stream_test.go"}, {"sha": "31fe2be3621042a00f4da41fc75c3a86208ada5c", "filename": "libgo/go/encoding/json/tagkey_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fjson%2Ftagkey_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fjson%2Ftagkey_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Ftagkey_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/json/tagkey_test.go"}, {"sha": "58cda2027c612ae107dad951bbf0eb3a81d07879", "filename": "libgo/go/encoding/json/tags.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fjson%2Ftags.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fjson%2Ftags.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Ftags.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/json/tags.go"}, {"sha": "91fb18831e27305c2962364e81887d24d2ab3a70", "filename": "libgo/go/encoding/json/tags_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fjson%2Ftags_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fjson%2Ftags_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Ftags_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/json/tags_test.go"}, {"sha": "d365510bf583e1e20376a43ea38ecbb3dadadf59", "filename": "libgo/go/encoding/xml/atom_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fxml%2Fatom_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fxml%2Fatom_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fatom_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/xml/atom_test.go"}, {"sha": "ec7f478bec3fdff5fbe049660402232dd3098748", "filename": "libgo/go/encoding/xml/embed_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fxml%2Fembed_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fxml%2Fembed_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fembed_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/xml/embed_test.go"}, {"sha": "691b70d2510e8fa83c80b7c3795a8aeb4c2c8983", "filename": "libgo/go/encoding/xml/marshal.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/xml/marshal.go"}, {"sha": "a6f7d2d0c27bdca43c72a2acf81a915c5eda2e5b", "filename": "libgo/go/encoding/xml/marshal_test.go", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,11 +5,11 @@\n package xml\n \n import (\n-\t\"reflect\"\n-\t\"testing\"\n \t\"bytes\"\n-\t\"strings\"\n+\t\"reflect\"\n \t\"strconv\"\n+\t\"strings\"\n+\t\"testing\"\n )\n \n type DriveType int", "previous_filename": "libgo/go/xml/marshal_test.go"}, {"sha": "c6a3d75a8019432a99359806233c5a3b77104754", "filename": "libgo/go/encoding/xml/read.go", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fxml%2Fread.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fxml%2Fread.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fread.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -13,7 +13,7 @@ import (\n \t\"strconv\"\n \t\"strings\"\n \t\"unicode\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n // BUG(rsc): Mapping between XML elements and data structures is inherently flawed:\n@@ -201,8 +201,8 @@ func (p *Parser) Unmarshal(val interface{}, start *StartElement) error {\n func fieldName(original string) string {\n \n \tvar i int\n-\t//remove leading underscores\n-\tfor i = 0; i < len(original) && original[i] == '_'; i++ {\n+\t//remove leading underscores, without exhausting all characters\n+\tfor i = 0; i < len(original)-1 && original[i] == '_'; i++ {\n \t}\n \n \treturn strings.Map(\n@@ -617,7 +617,7 @@ func (p *Parser) Skip() error {\n \t\tif err != nil {\n \t\t\treturn err\n \t\t}\n-\t\tswitch t := tok.(type) {\n+\t\tswitch tok.(type) {\n \t\tcase StartElement:\n \t\t\tif err := p.Skip(); err != nil {\n \t\t\t\treturn err", "previous_filename": "libgo/go/xml/read.go"}, {"sha": "fbb7fd5d2f276e2e75868921cc415ea956a3cb69", "filename": "libgo/go/encoding/xml/read_test.go", "status": "renamed", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fxml%2Fread_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fxml%2Fread_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fread_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -245,6 +245,9 @@ const pathTestString = `\n             <Value>C</Value>\n             <Value>D</Value>\n         </Item1>\n+        <_>\n+            <value>E</value>\n+        </_>\n     </items>\n     <after>2</after>\n </result>\n@@ -279,11 +282,17 @@ type PathTestD struct {\n \tBefore, After string\n }\n \n+type PathTestE struct {\n+\tUnderline     string `xml:\"items>_>value\"`\n+\tBefore, After string\n+}\n+\n var pathTests = []interface{}{\n \t&PathTestA{Items: []PathTestItem{{\"A\"}, {\"D\"}}, Before: \"1\", After: \"2\"},\n \t&PathTestB{Other: []PathTestItem{{\"A\"}, {\"D\"}}, Before: \"1\", After: \"2\"},\n \t&PathTestC{Values1: []string{\"A\", \"C\", \"D\"}, Values2: []string{\"B\"}, Before: \"1\", After: \"2\"},\n \t&PathTestD{Other: PathTestSet{Item1: []PathTestItem{{\"A\"}, {\"D\"}}}, Before: \"1\", After: \"2\"},\n+\t&PathTestE{Underline: \"E\", Before: \"1\", After: \"2\"},\n }\n \n func TestUnmarshalPaths(t *testing.T) {", "previous_filename": "libgo/go/xml/read_test.go"}, {"sha": "216d8889b239a92805eff6b7d7af0647b22d3b21", "filename": "libgo/go/encoding/xml/xml.go", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fxml%2Fxml.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fxml%2Fxml.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fxml.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -21,7 +21,7 @@ import (\n \t\"strconv\"\n \t\"strings\"\n \t\"unicode\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n // A SyntaxError represents a syntax error in the XML input stream.\n@@ -197,7 +197,7 @@ func NewParser(r io.Reader) *Parser {\n }\n \n // Token returns the next XML token in the input stream.\n-// At the end of the input stream, Token returns nil, os.EOF.\n+// At the end of the input stream, Token returns nil, io.EOF.\n //\n // Slices of bytes in the returned token data refer to the\n // parser's internal buffer and remain valid only until the next", "previous_filename": "libgo/go/xml/xml.go"}, {"sha": "6c874fadb7a0d7d03d688161d4ae2e64c30b4020", "filename": "libgo/go/encoding/xml/xml_test.go", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fxml%2Fxml_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fencoding%2Fxml%2Fxml_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fxml_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -520,7 +520,7 @@ func TestTrailingRawToken(t *testing.T) {\n \tfor _, err = p.RawToken(); err == nil; _, err = p.RawToken() {\n \t}\n \tif err != io.EOF {\n-\t\tt.Fatalf(\"p.RawToken() = _, %v, want _, os.EOF\", err)\n+\t\tt.Fatalf(\"p.RawToken() = _, %v, want _, io.EOF\", err)\n \t}\n }\n \n@@ -531,7 +531,7 @@ func TestTrailingToken(t *testing.T) {\n \tfor _, err = p.Token(); err == nil; _, err = p.Token() {\n \t}\n \tif err != io.EOF {\n-\t\tt.Fatalf(\"p.Token() = _, %v, want _, os.EOF\", err)\n+\t\tt.Fatalf(\"p.Token() = _, %v, want _, io.EOF\", err)\n \t}\n }\n \n@@ -542,7 +542,7 @@ func TestEntityInsideCDATA(t *testing.T) {\n \tfor _, err = p.Token(); err == nil; _, err = p.Token() {\n \t}\n \tif err != io.EOF {\n-\t\tt.Fatalf(\"p.Token() = _, %v, want _, os.EOF\", err)\n+\t\tt.Fatalf(\"p.Token() = _, %v, want _, io.EOF\", err)\n \t}\n }\n ", "previous_filename": "libgo/go/xml/xml_test.go"}, {"sha": "cd8c83c92101556c54c3c44c00c4636cc9b2b716", "filename": "libgo/go/exp/ebnf/ebnf.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Febnf%2Febnf.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Febnf%2Febnf.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Febnf%2Febnf.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -25,9 +25,9 @@ package ebnf\n import (\n \t\"errors\"\n \t\"fmt\"\n-\t\"scanner\"\n+\t\"text/scanner\"\n \t\"unicode\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n // ----------------------------------------------------------------------------"}, {"sha": "7a7e3cc16e4441ccdbc18396b08673cbbfb3844e", "filename": "libgo/go/exp/ebnf/parser.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Febnf%2Fparser.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Febnf%2Fparser.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Febnf%2Fparser.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -6,8 +6,8 @@ package ebnf\n \n import (\n \t\"io\"\n-\t\"scanner\"\n \t\"strconv\"\n+\t\"text/scanner\"\n )\n \n type parser struct {"}, {"sha": "7cad8a2ccd79abdd8fc4b0ca6c1d07f585d502db", "filename": "libgo/go/exp/norm/composition.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fnorm%2Fcomposition.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fnorm%2Fcomposition.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Fcomposition.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -4,7 +4,7 @@\n \n package norm\n \n-import \"utf8\"\n+import \"unicode/utf8\"\n \n const (\n \tmaxCombiningChars = 30"}, {"sha": "ce159e9050cea671ecc1953a8f12207c90623760", "filename": "libgo/go/exp/norm/input.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fnorm%2Finput.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fnorm%2Finput.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Finput.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -4,7 +4,7 @@\n \n package norm\n \n-import \"utf8\"\n+import \"unicode/utf8\"\n \n type input interface {\n \tskipASCII(p int) int"}, {"sha": "39bab7f0b6a80ea33582af8b782c80ccf0981ad4", "filename": "libgo/go/exp/norm/maketables.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fnorm%2Fmaketables.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fnorm%2Fmaketables.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Fmaketables.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -12,9 +12,9 @@ import (\n \t\"bytes\"\n \t\"flag\"\n \t\"fmt\"\n-\t\"http\"\n \t\"io\"\n \t\"log\"\n+\t\"net/http\"\n \t\"os\"\n \t\"regexp\"\n \t\"strconv\""}, {"sha": "25bb28d517fb6f1d8f5d9e921a066db0ae5f2624", "filename": "libgo/go/exp/norm/normalize.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fnorm%2Fnormalize.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fnorm%2Fnormalize.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Fnormalize.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,7 +5,7 @@\n // Package norm contains types and functions for normalizing Unicode strings.\n package norm\n \n-import \"utf8\"\n+import \"unicode/utf8\"\n \n // A Form denotes a canonical representation of Unicode code points.\n // The Unicode-defined normalization and equivalence forms are:"}, {"sha": "6610c257e512617dfb9bb59be8839730af066418", "filename": "libgo/go/exp/norm/normregtest.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fnorm%2Fnormregtest.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fnorm%2Fnormregtest.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Fnormregtest.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -10,17 +10,17 @@ import (\n \t\"exp/norm\"\n \t\"flag\"\n \t\"fmt\"\n-\t\"http\"\n \t\"io\"\n \t\"log\"\n+\t\"net/http\"\n \t\"os\"\n \t\"path\"\n \t\"regexp\"\n \t\"runtime\"\n \t\"strconv\"\n \t\"strings\"\n \t\"time\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n func main() {"}, {"sha": "7308d281b5032c0c0005e14d525b71f955260825", "filename": "libgo/go/exp/norm/trie_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fnorm%2Ftrie_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fnorm%2Ftrie_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Ftrie_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@ package norm\n \n import (\n \t\"testing\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n // Test data is located in triedata_test.go; generated by maketesttables."}, {"sha": "5edadac0a41672e1df5ccfba8825895184a0b1fe", "filename": "libgo/go/exp/norm/triegen.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fnorm%2Ftriegen.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fnorm%2Ftriegen.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fnorm%2Ftriegen.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -14,7 +14,7 @@ import (\n \t\"fmt\"\n \t\"hash/crc32\"\n \t\"log\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n const blockSize = 64"}, {"sha": "4830a1d6bfd3ae02a4771bd59b0c0b8f247baefd", "filename": "libgo/go/exp/spdy/read.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fspdy%2Fread.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fspdy%2Fread.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fspdy%2Fread.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -7,8 +7,8 @@ package spdy\n import (\n \t\"compress/zlib\"\n \t\"encoding/binary\"\n-\t\"http\"\n \t\"io\"\n+\t\"net/http\"\n \t\"strings\"\n )\n "}, {"sha": "c1cad4b37c6b3c1f22fb36a23771f209996f9e05", "filename": "libgo/go/exp/spdy/spdy_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fspdy%2Fspdy_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fspdy%2Fspdy_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fspdy%2Fspdy_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -6,8 +6,8 @@ package spdy\n \n import (\n \t\"bytes\"\n-\t\"http\"\n \t\"io\"\n+\t\"net/http\"\n \t\"reflect\"\n \t\"testing\"\n )"}, {"sha": "2648c4f75f93fc08a9e5209c8ec48a9db65cad87", "filename": "libgo/go/exp/spdy/types.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fspdy%2Ftypes.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fspdy%2Ftypes.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fspdy%2Ftypes.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -7,8 +7,8 @@ package spdy\n import (\n \t\"bytes\"\n \t\"compress/zlib\"\n-\t\"http\"\n \t\"io\"\n+\t\"net/http\"\n )\n \n //  Data Frame Format"}, {"sha": "3dd2ca1d5d8ef644bed70ea7ddbc280ccabf289b", "filename": "libgo/go/exp/spdy/write.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fspdy%2Fwrite.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fspdy%2Fwrite.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fspdy%2Fwrite.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -6,8 +6,8 @@ package spdy\n \n import (\n \t\"encoding/binary\"\n-\t\"http\"\n \t\"io\"\n+\t\"net/http\"\n \t\"strings\"\n )\n "}, {"sha": "e46cebe9a3da51f5e8901b41dfad61222209e52e", "filename": "libgo/go/exp/sql/convert.go", "status": "modified", "additions": 46, "deletions": 25, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fsql%2Fconvert.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fsql%2Fconvert.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fsql%2Fconvert.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -8,6 +8,7 @@ package sql\n \n import (\n \t\"errors\"\n+\t\"exp/sql/driver\"\n \t\"fmt\"\n \t\"reflect\"\n \t\"strconv\"\n@@ -36,10 +37,11 @@ func convertAssign(dest, src interface{}) error {\n \t\t}\n \t}\n \n-\tsv := reflect.ValueOf(src)\n+\tvar sv reflect.Value\n \n \tswitch d := dest.(type) {\n \tcase *string:\n+\t\tsv = reflect.ValueOf(src)\n \t\tswitch sv.Kind() {\n \t\tcase reflect.Bool,\n \t\t\treflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64,\n@@ -48,6 +50,12 @@ func convertAssign(dest, src interface{}) error {\n \t\t\t*d = fmt.Sprintf(\"%v\", src)\n \t\t\treturn nil\n \t\t}\n+\tcase *bool:\n+\t\tbv, err := driver.Bool.ConvertValue(src)\n+\t\tif err == nil {\n+\t\t\t*d = bv.(bool)\n+\t\t}\n+\t\treturn err\n \t}\n \n \tif scanner, ok := dest.(ScannerInto); ok {\n@@ -59,6 +67,10 @@ func convertAssign(dest, src interface{}) error {\n \t\treturn errors.New(\"destination not a pointer\")\n \t}\n \n+\tif !sv.IsValid() {\n+\t\tsv = reflect.ValueOf(src)\n+\t}\n+\n \tdv := reflect.Indirect(dpv)\n \tif dv.Kind() == sv.Kind() {\n \t\tdv.Set(sv)\n@@ -67,40 +79,49 @@ func convertAssign(dest, src interface{}) error {\n \n \tswitch dv.Kind() {\n \tcase reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:\n-\t\tif s, ok := asString(src); ok {\n-\t\t\ti64, err := strconv.Atoi64(s)\n-\t\t\tif err != nil {\n-\t\t\t\treturn fmt.Errorf(\"converting string %q to a %s: %v\", s, dv.Kind(), err)\n-\t\t\t}\n-\t\t\tif dv.OverflowInt(i64) {\n-\t\t\t\treturn fmt.Errorf(\"string %q overflows %s\", s, dv.Kind())\n-\t\t\t}\n-\t\t\tdv.SetInt(i64)\n-\t\t\treturn nil\n+\t\ts := asString(src)\n+\t\ti64, err := strconv.Atoi64(s)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"converting string %q to a %s: %v\", s, dv.Kind(), err)\n+\t\t}\n+\t\tif dv.OverflowInt(i64) {\n+\t\t\treturn fmt.Errorf(\"string %q overflows %s\", s, dv.Kind())\n \t\t}\n+\t\tdv.SetInt(i64)\n+\t\treturn nil\n \tcase reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:\n-\t\tif s, ok := asString(src); ok {\n-\t\t\tu64, err := strconv.Atoui64(s)\n-\t\t\tif err != nil {\n-\t\t\t\treturn fmt.Errorf(\"converting string %q to a %s: %v\", s, dv.Kind(), err)\n-\t\t\t}\n-\t\t\tif dv.OverflowUint(u64) {\n-\t\t\t\treturn fmt.Errorf(\"string %q overflows %s\", s, dv.Kind())\n-\t\t\t}\n-\t\t\tdv.SetUint(u64)\n-\t\t\treturn nil\n+\t\ts := asString(src)\n+\t\tu64, err := strconv.Atoui64(s)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"converting string %q to a %s: %v\", s, dv.Kind(), err)\n+\t\t}\n+\t\tif dv.OverflowUint(u64) {\n+\t\t\treturn fmt.Errorf(\"string %q overflows %s\", s, dv.Kind())\n+\t\t}\n+\t\tdv.SetUint(u64)\n+\t\treturn nil\n+\tcase reflect.Float32, reflect.Float64:\n+\t\ts := asString(src)\n+\t\tf64, err := strconv.Atof64(s)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"converting string %q to a %s: %v\", s, dv.Kind(), err)\n+\t\t}\n+\t\tif dv.OverflowFloat(f64) {\n+\t\t\treturn fmt.Errorf(\"value %q overflows %s\", s, dv.Kind())\n \t\t}\n+\t\tdv.SetFloat(f64)\n+\t\treturn nil\n \t}\n \n \treturn fmt.Errorf(\"unsupported driver -> Scan pair: %T -> %T\", src, dest)\n }\n \n-func asString(src interface{}) (s string, ok bool) {\n+func asString(src interface{}) string {\n \tswitch v := src.(type) {\n \tcase string:\n-\t\treturn v, true\n+\t\treturn v\n \tcase []byte:\n-\t\treturn string(v), true\n+\t\treturn string(v)\n \t}\n-\treturn \"\", false\n+\treturn fmt.Sprintf(\"%v\", src)\n }"}, {"sha": "52cee9272412d697a7a33cb4ba9b54de2ebd337b", "filename": "libgo/go/exp/sql/convert_test.go", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fsql%2Fconvert_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fsql%2Fconvert_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fsql%2Fconvert_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -17,6 +17,9 @@ type conversionTest struct {\n \twantint  int64\n \twantuint uint64\n \twantstr  string\n+\twantf32  float32\n+\twantf64  float64\n+\twantbool bool // used if d is of type *bool\n \twanterr  string\n }\n \n@@ -29,6 +32,9 @@ var (\n \tscanint32  int32\n \tscanuint8  uint8\n \tscanuint16 uint16\n+\tscanbool   bool\n+\tscanf32    float32\n+\tscanf64    float64\n )\n \n var conversionTests = []conversionTest{\n@@ -53,6 +59,35 @@ var conversionTests = []conversionTest{\n \t{s: \"256\", d: &scanuint16, wantuint: 256},\n \t{s: \"-1\", d: &scanint, wantint: -1},\n \t{s: \"foo\", d: &scanint, wanterr: `converting string \"foo\" to a int: parsing \"foo\": invalid syntax`},\n+\n+\t// True bools\n+\t{s: true, d: &scanbool, wantbool: true},\n+\t{s: \"True\", d: &scanbool, wantbool: true},\n+\t{s: \"TRUE\", d: &scanbool, wantbool: true},\n+\t{s: \"1\", d: &scanbool, wantbool: true},\n+\t{s: 1, d: &scanbool, wantbool: true},\n+\t{s: int64(1), d: &scanbool, wantbool: true},\n+\t{s: uint16(1), d: &scanbool, wantbool: true},\n+\n+\t// False bools\n+\t{s: false, d: &scanbool, wantbool: false},\n+\t{s: \"false\", d: &scanbool, wantbool: false},\n+\t{s: \"FALSE\", d: &scanbool, wantbool: false},\n+\t{s: \"0\", d: &scanbool, wantbool: false},\n+\t{s: 0, d: &scanbool, wantbool: false},\n+\t{s: int64(0), d: &scanbool, wantbool: false},\n+\t{s: uint16(0), d: &scanbool, wantbool: false},\n+\n+\t// Not bools\n+\t{s: \"yup\", d: &scanbool, wanterr: `sql/driver: couldn't convert \"yup\" into type bool`},\n+\t{s: 2, d: &scanbool, wanterr: `sql/driver: couldn't convert 2 into type bool`},\n+\n+\t// Floats\n+\t{s: float64(1.5), d: &scanf64, wantf64: float64(1.5)},\n+\t{s: int64(1), d: &scanf64, wantf64: float64(1)},\n+\t{s: float64(1.5), d: &scanf32, wantf32: float32(1.5)},\n+\t{s: \"1.5\", d: &scanf32, wantf32: float32(1.5)},\n+\t{s: \"1.5\", d: &scanf64, wantf64: float64(1.5)},\n }\n \n func intValue(intptr interface{}) int64 {\n@@ -63,6 +98,14 @@ func uintValue(intptr interface{}) uint64 {\n \treturn reflect.Indirect(reflect.ValueOf(intptr)).Uint()\n }\n \n+func float64Value(ptr interface{}) float64 {\n+\treturn *(ptr.(*float64))\n+}\n+\n+func float32Value(ptr interface{}) float32 {\n+\treturn *(ptr.(*float32))\n+}\n+\n func TestConversions(t *testing.T) {\n \tfor n, ct := range conversionTests {\n \t\terr := convertAssign(ct.d, ct.s)\n@@ -86,6 +129,15 @@ func TestConversions(t *testing.T) {\n \t\tif ct.wantuint != 0 && ct.wantuint != uintValue(ct.d) {\n \t\t\terrf(\"want uint %d, got %d\", ct.wantuint, uintValue(ct.d))\n \t\t}\n+\t\tif ct.wantf32 != 0 && ct.wantf32 != float32Value(ct.d) {\n+\t\t\terrf(\"want float32 %v, got %v\", ct.wantf32, float32Value(ct.d))\n+\t\t}\n+\t\tif ct.wantf64 != 0 && ct.wantf64 != float64Value(ct.d) {\n+\t\t\terrf(\"want float32 %v, got %v\", ct.wantf64, float64Value(ct.d))\n+\t\t}\n+\t\tif bp, boolTest := ct.d.(*bool); boolTest && *bp != ct.wantbool && ct.wanterr == \"\" {\n+\t\t\terrf(\"want bool %v, got %v\", ct.wantbool, *bp)\n+\t\t}\n \t}\n }\n "}, {"sha": "6a51c342415a33bec30bf2e4ba4ee7e5e7a51432", "filename": "libgo/go/exp/sql/driver/driver.go", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fsql%2Fdriver%2Fdriver.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fsql%2Fdriver%2Fdriver.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fsql%2Fdriver%2Fdriver.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -24,9 +24,13 @@ import \"errors\"\n // Driver is the interface that must be implemented by a database\n // driver.\n type Driver interface {\n-\t// Open returns a new or cached connection to the database.\n+\t// Open returns a new connection to the database.\n \t// The name is a string in a driver-specific format.\n \t//\n+\t// Open may return a cached connection (one previously\n+\t// closed), but doing so is unnecessary; the sql package\n+\t// maintains a pool of idle connections for efficient re-use.\n+\t//\n \t// The returned connection is only used by one goroutine at a\n \t// time.\n \tOpen(name string) (Conn, error)\n@@ -59,8 +63,12 @@ type Conn interface {\n \n \t// Close invalidates and potentially stops any current\n \t// prepared statements and transactions, marking this\n-\t// connection as no longer in use.  The driver may cache or\n-\t// close its underlying connection to its database.\n+\t// connection as no longer in use.\n+\t//\n+\t// Because the sql package maintains a free pool of\n+\t// connections and only calls Close when there's a surplus of\n+\t// idle connections, it shouldn't be necessary for drivers to\n+\t// do their own connection caching.\n \tClose() error\n \n \t// Begin starts and returns a new transaction."}, {"sha": "6e0ce4339cc86faae5ac60d83616f7a13a05e7a6", "filename": "libgo/go/exp/sql/driver/types.go", "status": "modified", "additions": 59, "deletions": 3, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fsql%2Fdriver%2Ftypes.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fsql%2Fdriver%2Ftypes.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fsql%2Fdriver%2Ftypes.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -11,6 +11,21 @@ import (\n )\n \n // ValueConverter is the interface providing the ConvertValue method.\n+//\n+// Various implementations of ValueConverter are provided by the\n+// driver package to provide consistent implementations of conversions\n+// between drivers.  The ValueConverters have several uses:\n+//\n+//  * converting from the subset types as provided by the sql package\n+//    into a database table's specific column type and making sure it\n+//    fits, such as making sure a particular int64 fits in a\n+//    table's uint16 column.\n+//\n+//  * converting a value as given from the database into one of the\n+//    subset types.\n+//\n+//  * by the sql package, for converting from a driver's subset type\n+//    to a user's type in a scan.\n type ValueConverter interface {\n \t// ConvertValue converts a value to a restricted subset type.\n \tConvertValue(v interface{}) (interface{}, error)\n@@ -19,15 +34,56 @@ type ValueConverter interface {\n // Bool is a ValueConverter that converts input values to bools.\n //\n // The conversion rules are:\n-//  - .... TODO(bradfitz): TBD\n+//  - booleans are returned unchanged\n+//  - for integer types,\n+//       1 is true\n+//       0 is false,\n+//       other integers are an error\n+//  - for strings and []byte, same rules as strconv.Atob\n+//  - all other types are an error\n var Bool boolType\n \n type boolType struct{}\n \n var _ ValueConverter = boolType{}\n \n-func (boolType) ConvertValue(v interface{}) (interface{}, error) {\n-\treturn nil, fmt.Errorf(\"TODO(bradfitz): bool conversions\")\n+func (boolType) String() string { return \"Bool\" }\n+\n+func (boolType) ConvertValue(src interface{}) (interface{}, error) {\n+\tswitch s := src.(type) {\n+\tcase bool:\n+\t\treturn s, nil\n+\tcase string:\n+\t\tb, err := strconv.Atob(s)\n+\t\tif err != nil {\n+\t\t\treturn nil, fmt.Errorf(\"sql/driver: couldn't convert %q into type bool\", s)\n+\t\t}\n+\t\treturn b, nil\n+\tcase []byte:\n+\t\tb, err := strconv.Atob(string(s))\n+\t\tif err != nil {\n+\t\t\treturn nil, fmt.Errorf(\"sql/driver: couldn't convert %q into type bool\", s)\n+\t\t}\n+\t\treturn b, nil\n+\t}\n+\n+\tsv := reflect.ValueOf(src)\n+\tswitch sv.Kind() {\n+\tcase reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:\n+\t\tiv := sv.Int()\n+\t\tif iv == 1 || iv == 0 {\n+\t\t\treturn iv == 1, nil\n+\t\t}\n+\t\treturn nil, fmt.Errorf(\"sql/driver: couldn't convert %d into type bool\", iv)\n+\tcase reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:\n+\t\tuv := sv.Uint()\n+\t\tif uv == 1 || uv == 0 {\n+\t\t\treturn uv == 1, nil\n+\t\t}\n+\t\treturn nil, fmt.Errorf(\"sql/driver: couldn't convert %d into type bool\", uv)\n+\t}\n+\n+\treturn nil, fmt.Errorf(\"sql/driver: couldn't convert %v (%T) into type bool\", src, src)\n }\n \n // Int32 is a ValueConverter that converts input values to int64,"}, {"sha": "4b049e26e5131b64870ccc99f7ad551af592ce54", "filename": "libgo/go/exp/sql/driver/types_test.go", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fsql%2Fdriver%2Ftypes_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fsql%2Fdriver%2Ftypes_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fsql%2Fdriver%2Ftypes_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package driver\n+\n+import (\n+\t\"reflect\"\n+\t\"testing\"\n+)\n+\n+type valueConverterTest struct {\n+\tc   ValueConverter\n+\tin  interface{}\n+\tout interface{}\n+\terr string\n+}\n+\n+var valueConverterTests = []valueConverterTest{\n+\t{Bool, \"true\", true, \"\"},\n+\t{Bool, \"True\", true, \"\"},\n+\t{Bool, []byte(\"t\"), true, \"\"},\n+\t{Bool, true, true, \"\"},\n+\t{Bool, \"1\", true, \"\"},\n+\t{Bool, 1, true, \"\"},\n+\t{Bool, int64(1), true, \"\"},\n+\t{Bool, uint16(1), true, \"\"},\n+\t{Bool, \"false\", false, \"\"},\n+\t{Bool, false, false, \"\"},\n+\t{Bool, \"0\", false, \"\"},\n+\t{Bool, 0, false, \"\"},\n+\t{Bool, int64(0), false, \"\"},\n+\t{Bool, uint16(0), false, \"\"},\n+\t{c: Bool, in: \"foo\", err: \"sql/driver: couldn't convert \\\"foo\\\" into type bool\"},\n+\t{c: Bool, in: 2, err: \"sql/driver: couldn't convert 2 into type bool\"},\n+}\n+\n+func TestValueConverters(t *testing.T) {\n+\tfor i, tt := range valueConverterTests {\n+\t\tout, err := tt.c.ConvertValue(tt.in)\n+\t\tgoterr := \"\"\n+\t\tif err != nil {\n+\t\t\tgoterr = err.Error()\n+\t\t}\n+\t\tif goterr != tt.err {\n+\t\t\tt.Errorf(\"test %d: %s(%T(%v)) error = %q; want error = %q\",\n+\t\t\t\ti, tt.c, tt.in, tt.in, goterr, tt.err)\n+\t\t}\n+\t\tif tt.err != \"\" {\n+\t\t\tcontinue\n+\t\t}\n+\t\tif !reflect.DeepEqual(out, tt.out) {\n+\t\t\tt.Errorf(\"test %d: %s(%T(%v)) = %v (%T); want %v (%T)\",\n+\t\t\t\ti, tt.c, tt.in, tt.in, out, out, tt.out, tt.out)\n+\t\t}\n+\t}\n+}"}, {"sha": "c8a19974d641df1317c832829ba7929a7a71df9c", "filename": "libgo/go/exp/sql/fakedb_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fsql%2Ffakedb_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fsql%2Ffakedb_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fsql%2Ffakedb_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -476,7 +476,7 @@ func (rc *rowsCursor) Next(dest []interface{}) error {\n \tfor i, v := range rc.rows[rc.pos].cols {\n \t\t// TODO(bradfitz): convert to subset types? naah, I\n \t\t// think the subset types should only be input to\n-\t\t// driver, but the db package should be able to handle\n+\t\t// driver, but the sql package should be able to handle\n \t\t// a wider range of types coming out of drivers. all\n \t\t// for ease of drivers, and to prevent drivers from\n \t\t// messing up conversions or doing them differently."}, {"sha": "291af7f67dcb0878f8c1fce8322daa9f0ea2619d", "filename": "libgo/go/exp/sql/sql.go", "status": "modified", "additions": 210, "deletions": 54, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fsql%2Fsql.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fsql%2Fsql.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fsql%2Fsql.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -10,7 +10,6 @@ import (\n \t\"errors\"\n \t\"fmt\"\n \t\"io\"\n-\t\"runtime\"\n \t\"sync\"\n \n \t\"exp/sql/driver\"\n@@ -192,21 +191,21 @@ func (db *DB) Exec(query string, args ...interface{}) (Result, error) {\n \n \t// If the driver does not implement driver.Execer, we need\n \t// a connection.\n-\tconn, err := db.conn()\n+\tci, err := db.conn()\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\tdefer db.putConn(conn)\n+\tdefer db.putConn(ci)\n \n-\tif execer, ok := conn.(driver.Execer); ok {\n+\tif execer, ok := ci.(driver.Execer); ok {\n \t\tresi, err := execer.Exec(query, args)\n \t\tif err != nil {\n \t\t\treturn nil, err\n \t\t}\n \t\treturn result{resi}, nil\n \t}\n \n-\tsti, err := conn.Prepare(query)\n+\tsti, err := ci.Prepare(query)\n \tif err != nil {\n \t\treturn nil, err\n \t}\n@@ -233,18 +232,26 @@ func (db *DB) Query(query string, args ...interface{}) (*Rows, error) {\n // Row's Scan method is called.\n func (db *DB) QueryRow(query string, args ...interface{}) *Row {\n \trows, err := db.Query(query, args...)\n-\tif err != nil {\n-\t\treturn &Row{err: err}\n-\t}\n-\treturn &Row{rows: rows}\n+\treturn &Row{rows: rows, err: err}\n }\n \n-// Begin starts a transaction.  The isolation level is dependent on\n+// Begin starts a transaction. The isolation level is dependent on\n // the driver.\n func (db *DB) Begin() (*Tx, error) {\n-\t// TODO(bradfitz): add another method for beginning a transaction\n-\t// at a specific isolation level.\n-\tpanic(todo())\n+\tci, err := db.conn()\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\ttxi, err := ci.Begin()\n+\tif err != nil {\n+\t\tdb.putConn(ci)\n+\t\treturn nil, fmt.Errorf(\"sql: failed to Begin transaction: %v\", err)\n+\t}\n+\treturn &Tx{\n+\t\tdb:  db,\n+\t\tci:  ci,\n+\t\ttxi: txi,\n+\t}, nil\n }\n \n // DriverDatabase returns the database's underlying driver.\n@@ -253,41 +260,158 @@ func (db *DB) Driver() driver.Driver {\n }\n \n // Tx is an in-progress database transaction.\n+//\n+// A transaction must end with a call to Commit or Rollback.\n+//\n+// After a call to Commit or Rollback, all operations on the\n+// transaction fail with ErrTransactionFinished.\n type Tx struct {\n+\tdb *DB\n+\n+\t// ci is owned exclusively until Commit or Rollback, at which point\n+\t// it's returned with putConn.\n+\tci  driver.Conn\n+\ttxi driver.Tx\n+\n+\t// cimu is held while somebody is using ci (between grabConn\n+\t// and releaseConn)\n+\tcimu sync.Mutex\n \n+\t// done transitions from false to true exactly once, on Commit\n+\t// or Rollback. once done, all operations fail with\n+\t// ErrTransactionFinished.\n+\tdone bool\n+}\n+\n+var ErrTransactionFinished = errors.New(\"sql: Transaction has already been committed or rolled back\")\n+\n+func (tx *Tx) close() {\n+\tif tx.done {\n+\t\tpanic(\"double close\") // internal error\n+\t}\n+\ttx.done = true\n+\ttx.db.putConn(tx.ci)\n+\ttx.ci = nil\n+\ttx.txi = nil\n+}\n+\n+func (tx *Tx) grabConn() (driver.Conn, error) {\n+\tif tx.done {\n+\t\treturn nil, ErrTransactionFinished\n+\t}\n+\ttx.cimu.Lock()\n+\treturn tx.ci, nil\n+}\n+\n+func (tx *Tx) releaseConn() {\n+\ttx.cimu.Unlock()\n }\n \n // Commit commits the transaction.\n func (tx *Tx) Commit() error {\n-\tpanic(todo())\n+\tif tx.done {\n+\t\treturn ErrTransactionFinished\n+\t}\n+\tdefer tx.close()\n+\treturn tx.txi.Commit()\n }\n \n // Rollback aborts the transaction.\n func (tx *Tx) Rollback() error {\n-\tpanic(todo())\n+\tif tx.done {\n+\t\treturn ErrTransactionFinished\n+\t}\n+\tdefer tx.close()\n+\treturn tx.txi.Rollback()\n }\n \n // Prepare creates a prepared statement.\n+//\n+// The statement is only valid within the scope of this transaction.\n func (tx *Tx) Prepare(query string) (*Stmt, error) {\n-\tpanic(todo())\n+\t// TODO(bradfitz): the restriction that the returned statement\n+\t// is only valid for this Transaction is lame and negates a\n+\t// lot of the benefit of prepared statements.  We could be\n+\t// more efficient here and either provide a method to take an\n+\t// existing Stmt (created on perhaps a different Conn), and\n+\t// re-create it on this Conn if necessary. Or, better: keep a\n+\t// map in DB of query string to Stmts, and have Stmt.Execute\n+\t// do the right thing and re-prepare if the Conn in use\n+\t// doesn't have that prepared statement.  But we'll want to\n+\t// avoid caching the statement in the case where we only call\n+\t// conn.Prepare implicitly (such as in db.Exec or tx.Exec),\n+\t// but the caller package can't be holding a reference to the\n+\t// returned statement.  Perhaps just looking at the reference\n+\t// count (by noting Stmt.Close) would be enough. We might also\n+\t// want a finalizer on Stmt to drop the reference count.\n+\tci, err := tx.grabConn()\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdefer tx.releaseConn()\n+\n+\tsi, err := ci.Prepare(query)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tstmt := &Stmt{\n+\t\tdb:    tx.db,\n+\t\ttx:    tx,\n+\t\ttxsi:  si,\n+\t\tquery: query,\n+\t}\n+\treturn stmt, nil\n }\n \n // Exec executes a query that doesn't return rows.\n // For example: an INSERT and UPDATE.\n-func (tx *Tx) Exec(query string, args ...interface{}) {\n-\tpanic(todo())\n+func (tx *Tx) Exec(query string, args ...interface{}) (Result, error) {\n+\tci, err := tx.grabConn()\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdefer tx.releaseConn()\n+\n+\tif execer, ok := ci.(driver.Execer); ok {\n+\t\tresi, err := execer.Exec(query, args)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\treturn result{resi}, nil\n+\t}\n+\n+\tsti, err := ci.Prepare(query)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdefer sti.Close()\n+\tresi, err := sti.Exec(args)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn result{resi}, nil\n }\n \n // Query executes a query that returns rows, typically a SELECT.\n func (tx *Tx) Query(query string, args ...interface{}) (*Rows, error) {\n-\tpanic(todo())\n+\tif tx.done {\n+\t\treturn nil, ErrTransactionFinished\n+\t}\n+\tstmt, err := tx.Prepare(query)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdefer stmt.Close()\n+\treturn stmt.Query(args...)\n }\n \n // QueryRow executes a query that is expected to return at most one row.\n // QueryRow always return a non-nil value. Errors are deferred until\n // Row's Scan method is called.\n func (tx *Tx) QueryRow(query string, args ...interface{}) *Row {\n-\tpanic(todo())\n+\trows, err := tx.Query(query, args...)\n+\treturn &Row{rows: rows, err: err}\n }\n \n // connStmt is a prepared statement on a particular connection.\n@@ -302,24 +426,28 @@ type Stmt struct {\n \tdb    *DB    // where we came from\n \tquery string // that created the Sttm\n \n-\tmu     sync.Mutex\n+\t// If in a transaction, else both nil:\n+\ttx   *Tx\n+\ttxsi driver.Stmt\n+\n+\tmu     sync.Mutex // protects the rest of the fields\n \tclosed bool\n-\tcss    []connStmt // can use any that have idle connections\n-}\n \n-func todo() string {\n-\t_, file, line, _ := runtime.Caller(1)\n-\treturn fmt.Sprintf(\"%s:%d: TODO: implement\", file, line)\n+\t// css is a list of underlying driver statement interfaces\n+\t// that are valid on particular connections.  This is only\n+\t// used if tx == nil and one is found that has idle\n+\t// connections.  If tx != nil, txsi is always used.\n+\tcss []connStmt\n }\n \n // Exec executes a prepared statement with the given arguments and\n // returns a Result summarizing the effect of the statement.\n func (s *Stmt) Exec(args ...interface{}) (Result, error) {\n-\tci, si, err := s.connStmt()\n+\t_, releaseConn, si, err := s.connStmt()\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\tdefer s.db.putConn(ci)\n+\tdefer releaseConn()\n \n \tif want := si.NumInput(); len(args) != want {\n \t\treturn nil, fmt.Errorf(\"db: expected %d arguments, got %d\", want, len(args))\n@@ -353,11 +481,29 @@ func (s *Stmt) Exec(args ...interface{}) (Result, error) {\n \treturn result{resi}, nil\n }\n \n-func (s *Stmt) connStmt(args ...interface{}) (driver.Conn, driver.Stmt, error) {\n+// connStmt returns a free driver connection on which to execute the\n+// statement, a function to call to release the connection, and a\n+// statement bound to that connection.\n+func (s *Stmt) connStmt() (ci driver.Conn, releaseConn func(), si driver.Stmt, err error) {\n \ts.mu.Lock()\n \tif s.closed {\n-\t\treturn nil, nil, errors.New(\"db: statement is closed\")\n+\t\ts.mu.Unlock()\n+\t\terr = errors.New(\"db: statement is closed\")\n+\t\treturn\n \t}\n+\n+\t// In a transaction, we always use the connection that the\n+\t// transaction was created on.\n+\tif s.tx != nil {\n+\t\ts.mu.Unlock()\n+\t\tci, err = s.tx.grabConn() // blocks, waiting for the connection.\n+\t\tif err != nil {\n+\t\t\treturn\n+\t\t}\n+\t\treleaseConn = func() { s.tx.releaseConn() }\n+\t\treturn ci, releaseConn, s.txsi, nil\n+\t}\n+\n \tvar cs connStmt\n \tmatch := false\n \tfor _, v := range s.css {\n@@ -375,25 +521,27 @@ func (s *Stmt) connStmt(args ...interface{}) (driver.Conn, driver.Stmt, error) {\n \tif !match {\n \t\tci, err := s.db.conn()\n \t\tif err != nil {\n-\t\t\treturn nil, nil, err\n+\t\t\treturn nil, nil, nil, err\n \t\t}\n \t\tsi, err := ci.Prepare(s.query)\n \t\tif err != nil {\n-\t\t\treturn nil, nil, err\n+\t\t\treturn nil, nil, nil, err\n \t\t}\n \t\ts.mu.Lock()\n \t\tcs = connStmt{ci, si}\n \t\ts.css = append(s.css, cs)\n \t\ts.mu.Unlock()\n \t}\n \n-\treturn cs.ci, cs.si, nil\n+\tconn := cs.ci\n+\treleaseConn = func() { s.db.putConn(conn) }\n+\treturn conn, releaseConn, cs.si, nil\n }\n \n // Query executes a prepared query statement with the given arguments\n // and returns the query results as a *Rows.\n func (s *Stmt) Query(args ...interface{}) (*Rows, error) {\n-\tci, si, err := s.connStmt(args...)\n+\tci, releaseConn, si, err := s.connStmt()\n \tif err != nil {\n \t\treturn nil, err\n \t}\n@@ -405,11 +553,13 @@ func (s *Stmt) Query(args ...interface{}) (*Rows, error) {\n \t\ts.db.putConn(ci)\n \t\treturn nil, err\n \t}\n-\t// Note: ownership of ci passes to the *Rows\n+\t// Note: ownership of ci passes to the *Rows, to be freed\n+\t// with releaseConn.\n \trows := &Rows{\n-\t\tdb:    s.db,\n-\t\tci:    ci,\n-\t\trowsi: rowsi,\n+\t\tdb:          s.db,\n+\t\tci:          ci,\n+\t\treleaseConn: releaseConn,\n+\t\trowsi:       rowsi,\n \t}\n \treturn rows, nil\n }\n@@ -436,19 +586,24 @@ func (s *Stmt) QueryRow(args ...interface{}) *Row {\n // Close closes the statement.\n func (s *Stmt) Close() error {\n \ts.mu.Lock()\n-\tdefer s.mu.Unlock() // TODO(bradfitz): move this unlock after 'closed = true'?\n+\tdefer s.mu.Unlock()\n \tif s.closed {\n \t\treturn nil\n \t}\n \ts.closed = true\n-\tfor _, v := range s.css {\n-\t\tif ci, match := s.db.connIfFree(v.ci); match {\n-\t\t\tv.si.Close()\n-\t\t\ts.db.putConn(ci)\n-\t\t} else {\n-\t\t\t// TODO(bradfitz): care that we can't close\n-\t\t\t// this statement because the statement's\n-\t\t\t// connection is in use?\n+\n+\tif s.tx != nil {\n+\t\ts.txsi.Close()\n+\t} else {\n+\t\tfor _, v := range s.css {\n+\t\t\tif ci, match := s.db.connIfFree(v.ci); match {\n+\t\t\t\tv.si.Close()\n+\t\t\t\ts.db.putConn(ci)\n+\t\t\t} else {\n+\t\t\t\t// TODO(bradfitz): care that we can't close\n+\t\t\t\t// this statement because the statement's\n+\t\t\t\t// connection is in use?\n+\t\t\t}\n \t\t}\n \t}\n \treturn nil\n@@ -465,12 +620,13 @@ func (s *Stmt) Close() error {\n //         err = rows.Scan(&id, &name)\n //         ...\n //     }\n-//     err = rows.Error() // get any Error encountered during iteration\n+//     err = rows.Err() // get any error encountered during iteration\n //     ...\n type Rows struct {\n-\tdb    *DB\n-\tci    driver.Conn // owned; must be returned when Rows is closed\n-\trowsi driver.Rows\n+\tdb          *DB\n+\tci          driver.Conn // owned; must call putconn when closed to release\n+\treleaseConn func()\n+\trowsi       driver.Rows\n \n \tclosed   bool\n \tlastcols []interface{}\n@@ -495,8 +651,8 @@ func (rs *Rows) Next() bool {\n \treturn rs.lasterr == nil\n }\n \n-// Error returns the error, if any, that was encountered during iteration.\n-func (rs *Rows) Error() error {\n+// Err returns the error, if any, that was encountered during iteration.\n+func (rs *Rows) Err() error {\n \tif rs.lasterr == io.EOF {\n \t\treturn nil\n \t}\n@@ -538,7 +694,7 @@ func (rs *Rows) Close() error {\n \t}\n \trs.closed = true\n \terr := rs.rowsi.Close()\n-\trs.db.putConn(rs.ci)\n+\trs.releaseConn()\n \treturn err\n }\n "}, {"sha": "da45688eee08ca362a471a8c0eed54386006b3ef", "filename": "libgo/go/exp/ssh/client.go", "status": "modified", "additions": 4, "deletions": 53, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fssh%2Fclient.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fssh%2Fclient.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fssh%2Fclient.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,12 +5,12 @@\n package ssh\n \n import (\n-\t\"big\"\n \t\"crypto\"\n \t\"crypto/rand\"\n \t\"errors\"\n \t\"fmt\"\n \t\"io\"\n+\t\"math/big\"\n \t\"net\"\n \t\"sync\"\n )\n@@ -131,56 +131,6 @@ func (c *ClientConn) handshake() error {\n \treturn c.transport.reader.setupKeys(serverKeys, K, H, H, hashFunc)\n }\n \n-// authenticate authenticates with the remote server. See RFC 4252. \n-// Only \"password\" authentication is supported.\n-func (c *ClientConn) authenticate() error {\n-\tif err := c.writePacket(marshal(msgServiceRequest, serviceRequestMsg{serviceUserAuth})); err != nil {\n-\t\treturn err\n-\t}\n-\tpacket, err := c.readPacket()\n-\tif err != nil {\n-\t\treturn err\n-\t}\n-\n-\tvar serviceAccept serviceAcceptMsg\n-\tif err = unmarshal(&serviceAccept, packet, msgServiceAccept); err != nil {\n-\t\treturn err\n-\t}\n-\n-\t// TODO(dfc) support proper authentication method negotation\n-\tmethod := \"none\"\n-\tif c.config.Password != \"\" {\n-\t\tmethod = \"password\"\n-\t}\n-\tif err := c.sendUserAuthReq(method); err != nil {\n-\t\treturn err\n-\t}\n-\n-\tif packet, err = c.readPacket(); err != nil {\n-\t\treturn err\n-\t}\n-\n-\tif packet[0] != msgUserAuthSuccess {\n-\t\treturn UnexpectedMessageError{msgUserAuthSuccess, packet[0]}\n-\t}\n-\treturn nil\n-}\n-\n-func (c *ClientConn) sendUserAuthReq(method string) error {\n-\tlength := stringLength([]byte(c.config.Password)) + 1\n-\tpayload := make([]byte, length)\n-\t// always false for password auth, see RFC 4252 Section 8.\n-\tpayload[0] = 0\n-\tmarshalString(payload[1:], []byte(c.config.Password))\n-\n-\treturn c.writePacket(marshal(msgUserAuthRequest, userAuthRequestMsg{\n-\t\tUser:    c.config.User,\n-\t\tService: serviceSSH,\n-\t\tMethod:  method,\n-\t\tPayload: payload,\n-\t}))\n-}\n-\n // kexDH performs Diffie-Hellman key agreement on a ClientConn. The\n // returned values are given the same names as in RFC 4253, section 8.\n func (c *ClientConn) kexDH(group *dhGroup, hashFunc crypto.Hash, magics *handshakeMagics, hostKeyAlgo string) ([]byte, []byte, error) {\n@@ -348,8 +298,9 @@ type ClientConfig struct {\n \t// The username to authenticate.\n \tUser string\n \n-\t// Used for \"password\" method authentication.\n-\tPassword string\n+\t// A slice of ClientAuth methods. Only the first instance \n+\t// of a particular RFC 4252 method will be used during authentication.\n+\tAuth []ClientAuth\n }\n \n func (c *ClientConfig) rand() io.Reader {"}, {"sha": "0089d0c769e33b7702a7324c94dbbb434f0eff67", "filename": "libgo/go/exp/ssh/client_auth.go", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fssh%2Fclient_auth.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fssh%2Fclient_auth.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fssh%2Fclient_auth.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -0,0 +1,157 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ssh\n+\n+import (\n+\t\"errors\"\n+)\n+\n+// authenticate authenticates with the remote server. See RFC 4252. \n+func (c *ClientConn) authenticate() error {\n+\t// initiate user auth session\n+\tif err := c.writePacket(marshal(msgServiceRequest, serviceRequestMsg{serviceUserAuth})); err != nil {\n+\t\treturn err\n+\t}\n+\tpacket, err := c.readPacket()\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tvar serviceAccept serviceAcceptMsg\n+\tif err := unmarshal(&serviceAccept, packet, msgServiceAccept); err != nil {\n+\t\treturn err\n+\t}\n+\t// during the authentication phase the client first attempts the \"none\" method\n+\t// then any untried methods suggested by the server. \n+\ttried, remain := make(map[string]bool), make(map[string]bool)\n+\tfor auth := ClientAuth(new(noneAuth)); auth != nil; {\n+\t\tok, methods, err := auth.auth(c.config.User, c.transport)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tif ok {\n+\t\t\t// success\n+\t\t\treturn nil\n+\t\t}\n+\t\ttried[auth.method()] = true\n+\t\tdelete(remain, auth.method())\n+\t\tfor _, meth := range methods {\n+\t\t\tif tried[meth] {\n+\t\t\t\t// if we've tried meth already, skip it.\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tremain[meth] = true\n+\t\t}\n+\t\tauth = nil\n+\t\tfor _, a := range c.config.Auth {\n+\t\t\tif remain[a.method()] {\n+\t\t\t\tauth = a\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t}\n+\t}\n+\treturn errors.New(\"ssh: unable to authenticate, no supported methods remain\")\n+}\n+\n+// A ClientAuth represents an instance of an RFC 4252 authentication method.\n+type ClientAuth interface {\n+\t// auth authenticates user over transport t. \n+\t// Returns true if authentication is successful.\n+\t// If authentication is not successful, a []string of alternative \n+\t// method names is returned.\n+\tauth(user string, t *transport) (bool, []string, error)\n+\n+\t// method returns the RFC 4252 method name.\n+\tmethod() string\n+}\n+\n+// \"none\" authentication, RFC 4252 section 5.2.\n+type noneAuth int\n+\n+func (n *noneAuth) auth(user string, t *transport) (bool, []string, error) {\n+\tif err := t.writePacket(marshal(msgUserAuthRequest, userAuthRequestMsg{\n+\t\tUser:    user,\n+\t\tService: serviceSSH,\n+\t\tMethod:  \"none\",\n+\t})); err != nil {\n+\t\treturn false, nil, err\n+\t}\n+\n+\tpacket, err := t.readPacket()\n+\tif err != nil {\n+\t\treturn false, nil, err\n+\t}\n+\n+\tswitch packet[0] {\n+\tcase msgUserAuthSuccess:\n+\t\treturn true, nil, nil\n+\tcase msgUserAuthFailure:\n+\t\tmsg := decode(packet).(*userAuthFailureMsg)\n+\t\treturn false, msg.Methods, nil\n+\t}\n+\treturn false, nil, UnexpectedMessageError{msgUserAuthSuccess, packet[0]}\n+}\n+\n+func (n *noneAuth) method() string {\n+\treturn \"none\"\n+}\n+\n+// \"password\" authentication, RFC 4252 Section 8.\n+type passwordAuth struct {\n+\tClientPassword\n+}\n+\n+func (p *passwordAuth) auth(user string, t *transport) (bool, []string, error) {\n+\ttype passwordAuthMsg struct {\n+\t\tUser     string\n+\t\tService  string\n+\t\tMethod   string\n+\t\tReply    bool\n+\t\tPassword string\n+\t}\n+\n+\tpw, err := p.Password(user)\n+\tif err != nil {\n+\t\treturn false, nil, err\n+\t}\n+\n+\tif err := t.writePacket(marshal(msgUserAuthRequest, passwordAuthMsg{\n+\t\tUser:     user,\n+\t\tService:  serviceSSH,\n+\t\tMethod:   \"password\",\n+\t\tReply:    false,\n+\t\tPassword: pw,\n+\t})); err != nil {\n+\t\treturn false, nil, err\n+\t}\n+\n+\tpacket, err := t.readPacket()\n+\tif err != nil {\n+\t\treturn false, nil, err\n+\t}\n+\n+\tswitch packet[0] {\n+\tcase msgUserAuthSuccess:\n+\t\treturn true, nil, nil\n+\tcase msgUserAuthFailure:\n+\t\tmsg := decode(packet).(*userAuthFailureMsg)\n+\t\treturn false, msg.Methods, nil\n+\t}\n+\treturn false, nil, UnexpectedMessageError{msgUserAuthSuccess, packet[0]}\n+}\n+\n+func (p *passwordAuth) method() string {\n+\treturn \"password\"\n+}\n+\n+// A ClientPassword implements access to a client's passwords.\n+type ClientPassword interface {\n+\t// Password returns the password to use for user.\n+\tPassword(user string) (password string, err error)\n+}\n+\n+// ClientAuthPassword returns a ClientAuth using password authentication.\n+func ClientAuthPassword(impl ClientPassword) ClientAuth {\n+\treturn &passwordAuth{impl}\n+}"}, {"sha": "273820b6428c62706df848f91f0cce4f83b37a7c", "filename": "libgo/go/exp/ssh/common.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fssh%2Fcommon.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fssh%2Fcommon.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fssh%2Fcommon.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,7 +5,7 @@\n package ssh\n \n import (\n-\t\"big\"\n+\t\"math/big\"\n \t\"strconv\"\n \t\"sync\"\n )"}, {"sha": "248b2fec4f84c9d06e952c439371b53847db1b15", "filename": "libgo/go/exp/ssh/doc.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fssh%2Fdoc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fssh%2Fdoc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fssh%2Fdoc.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -83,7 +83,7 @@ authentication method is supported.\n \n \tconfig := &ClientConfig{\n \t\tUser: \"username\",\n-\t\tPassword: \"123456\",\n+\t\tAuth: []ClientAuth{ ... },\n \t}\n \tclient, err := Dial(\"yourserver.com:22\", config)\n "}, {"sha": "e24b6398b56fbd57fc349570634b5834e5edf09d", "filename": "libgo/go/exp/ssh/messages.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fssh%2Fmessages.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fssh%2Fmessages.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fssh%2Fmessages.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,9 +5,9 @@\n package ssh\n \n import (\n-\t\"big\"\n \t\"bytes\"\n \t\"io\"\n+\t\"math/big\"\n \t\"reflect\"\n )\n "}, {"sha": "fe4c397dc3a2ccc6bb81c1a474adef54b564874f", "filename": "libgo/go/exp/ssh/messages_test.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fssh%2Fmessages_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fssh%2Fmessages_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fssh%2Fmessages_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,8 +5,8 @@\n package ssh\n \n import (\n-\t\"big\"\n-\t\"rand\"\n+\t\"math/big\"\n+\t\"math/rand\"\n \t\"reflect\"\n \t\"testing\"\n \t\"testing/quick\""}, {"sha": "62035d52b7dd6ba7e5539ac497ecfee19440da17", "filename": "libgo/go/exp/ssh/server.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fssh%2Fserver.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fssh%2Fserver.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fssh%2Fserver.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,7 +5,6 @@\n package ssh\n \n import (\n-\t\"big\"\n \t\"bytes\"\n \t\"crypto\"\n \t\"crypto/rand\"\n@@ -14,6 +13,7 @@ import (\n \t\"encoding/pem\"\n \t\"errors\"\n \t\"io\"\n+\t\"math/big\"\n \t\"net\"\n \t\"sync\"\n )"}, {"sha": "048f63bb7d380ebadb59405a5a42e2b371a979f1", "filename": "libgo/go/exp/types/const.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Ftypes%2Fconst.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Ftypes%2Fconst.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Ftypes%2Fconst.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -7,8 +7,8 @@\n package types\n \n import (\n-\t\"big\"\n \t\"go/token\"\n+\t\"math/big\"\n \t\"strconv\"\n )\n \n@@ -131,7 +131,7 @@ func (x Const) Match(y Const) (u, v Const) {\n // otherwise the result is invalid.\n func (x Const) Convert(typ *Type) Const {\n \t// TODO(gri) implement this\n-\tswitch x := x.val.(type) {\n+\tswitch x.val.(type) {\n \tcase bool:\n \tcase *big.Int:\n \tcase *big.Rat:"}, {"sha": "4167caf3f0e7875f283e5068283d205d44481c0b", "filename": "libgo/go/exp/types/gcimporter.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Ftypes%2Fgcimporter.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Ftypes%2Fgcimporter.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Ftypes%2Fgcimporter.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -8,17 +8,17 @@\n package types\n \n import (\n-\t\"big\"\n \t\"errors\"\n \t\"fmt\"\n \t\"go/ast\"\n \t\"go/token\"\n \t\"io\"\n+\t\"math/big\"\n \t\"os\"\n \t\"path/filepath\"\n \t\"runtime\"\n-\t\"scanner\"\n \t\"strconv\"\n+\t\"text/scanner\"\n )\n \n const trace = false // set to true for debugging"}, {"sha": "3f66d226153aa69bbe0c2616c8afb82f6d4c9b40", "filename": "libgo/go/exp/types/gcimporter_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Ftypes%2Fgcimporter_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Ftypes%2Fgcimporter_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Ftypes%2Fgcimporter_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,9 +5,9 @@\n package types\n \n import (\n-\t\"exec\"\n \t\"go/ast\"\n \t\"io/ioutil\"\n+\t\"os/exec\"\n \t\"path/filepath\"\n \t\"runtime\"\n \t\"strings\""}, {"sha": "5df2ee0faa141bae202604978429a2b6d61eab09", "filename": "libgo/go/exp/wingui/gui.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fwingui%2Fgui.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fwingui%2Fgui.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fwingui%2Fgui.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -6,8 +6,8 @@ package main\n \n import (\n \t\"fmt\"\n-\t\"syscall\"\n \t\"os\"\n+\t\"syscall\"\n \t\"unsafe\"\n )\n "}, {"sha": "08059df2b9d9d428259754ed95aee7ae3b57d73f", "filename": "libgo/go/exp/wingui/winapi.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fwingui%2Fwinapi.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexp%2Fwingui%2Fwinapi.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fwingui%2Fwinapi.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,8 +5,8 @@\n package main\n \n import (\n-\t\"unsafe\"\n \t\"syscall\"\n+\t\"unsafe\"\n )\n \n type Wndclassex struct {"}, {"sha": "629280acf76e05297cac9ead95457db2ef91b0f8", "filename": "libgo/go/expvar/expvar.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexpvar%2Fexpvar.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexpvar%2Fexpvar.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexpvar%2Fexpvar.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -23,10 +23,10 @@ package expvar\n \n import (\n \t\"bytes\"\n+\t\"encoding/json\"\n \t\"fmt\"\n-\t\"http\"\n-\t\"json\"\n \t\"log\"\n+\t\"net/http\"\n \t\"os\"\n \t\"runtime\"\n \t\"strconv\""}, {"sha": "fc607274b280062572e74895ca57108481ee644a", "filename": "libgo/go/expvar/expvar_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexpvar%2Fexpvar_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fexpvar%2Fexpvar_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexpvar%2Fexpvar_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,7 +5,7 @@\n package expvar\n \n import (\n-\t\"json\"\n+\t\"encoding/json\"\n \t\"testing\"\n )\n "}, {"sha": "3957a5a261df160c91385b2b03053947143c76e3", "filename": "libgo/go/fmt/format.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Ffmt%2Fformat.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Ffmt%2Fformat.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ffmt%2Fformat.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -8,7 +8,7 @@ import (\n \t\"bytes\"\n \t\"strconv\"\n \t\"unicode\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n const ("}, {"sha": "bfa88d187049ab9d6a88030fe60830f2c6cbdd94", "filename": "libgo/go/fmt/print.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Ffmt%2Fprint.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Ffmt%2Fprint.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ffmt%2Fprint.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -12,7 +12,7 @@ import (\n \t\"reflect\"\n \t\"sync\"\n \t\"unicode\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n // Some constants in the form of bytes, to avoid string overhead."}, {"sha": "85571e80c7a1ed04b36d377a079082da66829ba9", "filename": "libgo/go/fmt/scan.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Ffmt%2Fscan.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Ffmt%2Fscan.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ffmt%2Fscan.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -14,7 +14,7 @@ import (\n \t\"strconv\"\n \t\"strings\"\n \t\"unicode\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n // runeUnreader is the interface to something that can unread runes.\n@@ -219,7 +219,7 @@ func (s *ss) getRune() (r rune) {\n \treturn\n }\n \n-// mustReadRune turns os.EOF into a panic(io.ErrUnexpectedEOF).\n+// mustReadRune turns io.EOF into a panic(io.ErrUnexpectedEOF).\n // It is called in cases such as string scanning where an EOF is a\n // syntax error.\n func (s *ss) mustReadRune() (r rune) {"}, {"sha": "d3c39be60714e5a0ae15760d82b62e0bf15e2144", "filename": "libgo/go/fmt/scan_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Ffmt%2Fscan_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Ffmt%2Fscan_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ffmt%2Fscan_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -15,7 +15,7 @@ import (\n \t\"regexp\"\n \t\"strings\"\n \t\"testing\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n type ScanTest struct {"}, {"sha": "a0aa5ff12049f10677da60d4062b61b5ad4e9953", "filename": "libgo/go/go/ast/ast.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fgo%2Fast%2Fast.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fgo%2Fast%2Fast.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fast%2Fast.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -10,7 +10,7 @@ package ast\n import (\n \t\"go/token\"\n \t\"unicode\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n // ----------------------------------------------------------------------------"}, {"sha": "894fecdaa7e8dd4ffea9dee9e90666ee87ea3d8d", "filename": "libgo/go/go/ast/import.go", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fgo%2Fast%2Fimport.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fgo%2Fast%2Fimport.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fast%2Fimport.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -0,0 +1,139 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ast\n+\n+import (\n+\t\"go/token\"\n+\t\"sort\"\n+\t\"strconv\"\n+)\n+\n+// SortImports sorts runs of consecutive import lines in import blocks in f.\n+func SortImports(fset *token.FileSet, f *File) {\n+\tfor _, d := range f.Decls {\n+\t\td, ok := d.(*GenDecl)\n+\t\tif !ok || d.Tok != token.IMPORT {\n+\t\t\t// Not an import declaration, so we're done.\n+\t\t\t// Imports are always first.\n+\t\t\tbreak\n+\t\t}\n+\n+\t\tif d.Lparen == token.NoPos {\n+\t\t\t// Not a block: sorted by default.\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\t// Identify and sort runs of specs on successive lines.\n+\t\ti := 0\n+\t\tfor j, s := range d.Specs {\n+\t\t\tif j > i && fset.Position(s.Pos()).Line > 1+fset.Position(d.Specs[j-1].End()).Line {\n+\t\t\t\t// j begins a new run.  End this one.\n+\t\t\t\tsortSpecs(fset, f, d.Specs[i:j])\n+\t\t\t\ti = j\n+\t\t\t}\n+\t\t}\n+\t\tsortSpecs(fset, f, d.Specs[i:])\n+\t}\n+}\n+\n+func importPath(s Spec) string {\n+\tt, err := strconv.Unquote(s.(*ImportSpec).Path.Value)\n+\tif err == nil {\n+\t\treturn t\n+\t}\n+\treturn \"\"\n+}\n+\n+type posSpan struct {\n+\tStart token.Pos\n+\tEnd   token.Pos\n+}\n+\n+func sortSpecs(fset *token.FileSet, f *File, specs []Spec) {\n+\t// Avoid work if already sorted (also catches < 2 entries).\n+\tsorted := true\n+\tfor i, s := range specs {\n+\t\tif i > 0 && importPath(specs[i-1]) > importPath(s) {\n+\t\t\tsorted = false\n+\t\t\tbreak\n+\t\t}\n+\t}\n+\tif sorted {\n+\t\treturn\n+\t}\n+\n+\t// Record positions for specs.\n+\tpos := make([]posSpan, len(specs))\n+\tfor i, s := range specs {\n+\t\t// Cannot use s.End(), because it looks at len(s.Path.Value),\n+\t\t// and that string might have gotten longer or shorter.\n+\t\t// Instead, use s.Pos()+1, which is guaranteed to be > s.Pos()\n+\t\t// and still before the original end of the string, since any\n+\t\t// string literal must be at least 2 characters (\"\" or ``).\n+\t\tpos[i] = posSpan{s.Pos(), s.Pos() + 1}\n+\t}\n+\n+\t// Identify comments in this range.\n+\t// Any comment from pos[0].Start to the final line counts.\n+\tlastLine := fset.Position(pos[len(pos)-1].End).Line\n+\tcstart := len(f.Comments)\n+\tcend := len(f.Comments)\n+\tfor i, g := range f.Comments {\n+\t\tif g.Pos() < pos[0].Start {\n+\t\t\tcontinue\n+\t\t}\n+\t\tif i < cstart {\n+\t\t\tcstart = i\n+\t\t}\n+\t\tif fset.Position(g.End()).Line > lastLine {\n+\t\t\tcend = i\n+\t\t\tbreak\n+\t\t}\n+\t}\n+\tcomments := f.Comments[cstart:cend]\n+\n+\t// Assign each comment to the import spec preceding it.\n+\timportComment := map[*ImportSpec][]*CommentGroup{}\n+\tspecIndex := 0\n+\tfor _, g := range comments {\n+\t\tfor specIndex+1 < len(specs) && pos[specIndex+1].Start <= g.Pos() {\n+\t\t\tspecIndex++\n+\t\t}\n+\t\ts := specs[specIndex].(*ImportSpec)\n+\t\timportComment[s] = append(importComment[s], g)\n+\t}\n+\n+\t// Sort the import specs by import path.\n+\t// Reassign the import paths to have the same position sequence.\n+\t// Reassign each comment to abut the end of its spec.\n+\t// Sort the comments by new position.\n+\tsort.Sort(byImportPath(specs))\n+\tfor i, s := range specs {\n+\t\ts := s.(*ImportSpec)\n+\t\tif s.Name != nil {\n+\t\t\ts.Name.NamePos = pos[i].Start\n+\t\t}\n+\t\ts.Path.ValuePos = pos[i].Start\n+\t\ts.EndPos = pos[i].End\n+\t\tfor _, g := range importComment[s] {\n+\t\t\tfor _, c := range g.List {\n+\t\t\t\tc.Slash = pos[i].End\n+\t\t\t}\n+\t\t}\n+\t}\n+\tsort.Sort(byCommentPos(comments))\n+}\n+\n+type byImportPath []Spec // slice of *ImportSpec\n+\n+func (x byImportPath) Len() int           { return len(x) }\n+func (x byImportPath) Swap(i, j int)      { x[i], x[j] = x[j], x[i] }\n+func (x byImportPath) Less(i, j int) bool { return importPath(x[i]) < importPath(x[j]) }\n+\n+type byCommentPos []*CommentGroup\n+\n+func (x byCommentPos) Len() int           { return len(x) }\n+func (x byCommentPos) Swap(i, j int)      { x[i], x[j] = x[j], x[i] }\n+func (x byCommentPos) Less(i, j int) bool { return x[i].Pos() < x[j].Pos() }"}, {"sha": "e3de8d0fa7f7a80e5de8cccc03c66dcd2e6efdda", "filename": "libgo/go/go/build/build.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fgo%2Fbuild%2Fbuild.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fgo%2Fbuild%2Fbuild.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fbuild%2Fbuild.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -8,9 +8,9 @@ package build\n import (\n \t\"bytes\"\n \t\"errors\"\n-\t\"exec\"\n \t\"fmt\"\n \t\"os\"\n+\t\"os/exec\"\n \t\"path/filepath\"\n \t\"regexp\"\n \t\"runtime\""}, {"sha": "db8bc6c8a591533f3a510cd08a4536db6543357d", "filename": "libgo/go/go/build/build_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fgo%2Fbuild%2Fbuild_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fgo%2Fbuild%2Fbuild_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fbuild%2Fbuild_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,7 +5,7 @@\n package build\n \n import (\n-\t\"exec\"\n+\t\"os/exec\"\n \t\"path/filepath\"\n \t\"reflect\"\n \t\"runtime\""}, {"sha": "19216f85b96838dfb3e6117140f0db49b6fec61f", "filename": "libgo/go/go/doc/comment.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fgo%2Fdoc%2Fcomment.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fgo%2Fdoc%2Fcomment.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fdoc%2Fcomment.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -11,7 +11,7 @@ import (\n \t\"io\"\n \t\"regexp\"\n \t\"strings\"\n-\t\"template\" // for HTMLEscape\n+\t\"text/template\" // for HTMLEscape\n )\n \n func isWhitespace(ch byte) bool { return ch == ' ' || ch == '\\t' || ch == '\\n' || ch == '\\r' }"}, {"sha": "196c957544a1a12428860eeb09a4814378875d74", "filename": "libgo/go/go/doc/example.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fgo%2Fdoc%2Fexample.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fgo%2Fdoc%2Fexample.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fdoc%2Fexample.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -10,7 +10,7 @@ import (\n \t\"go/ast\"\n \t\"strings\"\n \t\"unicode\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n type Example struct {"}, {"sha": "55b8998b7d585b8035bb8e615d00b87cfda2e1ec", "filename": "libgo/go/go/parser/parser.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fgo%2Fparser%2Fparser.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fgo%2Fparser%2Fparser.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fparser%2Fparser.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -1131,7 +1131,7 @@ func (p *parser) parseLiteralValue(typ ast.Expr) ast.Expr {\n \n // checkExpr checks that x is an expression (and not a type).\n func (p *parser) checkExpr(x ast.Expr) ast.Expr {\n-\tswitch t := unparen(x).(type) {\n+\tswitch unparen(x).(type) {\n \tcase *ast.BadExpr:\n \tcase *ast.Ident:\n \tcase *ast.BasicLit:"}, {"sha": "aba7d93a64bbff874bb94bd87d95d354aa48bdcc", "filename": "libgo/go/go/printer/printer.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fgo%2Fprinter%2Fprinter.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fgo%2Fprinter%2Fprinter.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fprinter%2Fprinter.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -13,7 +13,7 @@ import (\n \t\"io\"\n \t\"os\"\n \t\"path/filepath\"\n-\t\"tabwriter\"\n+\t\"text/tabwriter\"\n )\n \n const debug = false // enable for debugging"}, {"sha": "cef9c4865083fd333f1a9a888b240695a841b803", "filename": "libgo/go/go/scanner/scanner.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fgo%2Fscanner%2Fscanner.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fgo%2Fscanner%2Fscanner.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fscanner%2Fscanner.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -27,7 +27,7 @@ import (\n \t\"path/filepath\"\n \t\"strconv\"\n \t\"unicode\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n // A Scanner holds the scanner's internal state while processing"}, {"sha": "042d6abdf9d236db8ee759ad448e339e63dc36ff", "filename": "libgo/go/go/token/serialize.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fgo%2Ftoken%2Fserialize.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fgo%2Ftoken%2Fserialize.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftoken%2Fserialize.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,7 +5,7 @@\n package token\n \n import (\n-\t\"gob\"\n+\t\"encoding/gob\"\n \t\"io\"\n )\n "}, {"sha": "1bea690c2c8984fa663bb2361be9dc51d71eb0e2", "filename": "libgo/go/html/doc.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Fdoc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Fdoc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Fdoc.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -36,7 +36,7 @@ lower-cased, and attributes are collected into a []Attribute. For example:\n \n \tfor {\n \t\tif z.Next() == html.ErrorToken {\n-\t\t\t// Returning os.EOF indicates success.\n+\t\t\t// Returning io.EOF indicates success.\n \t\t\treturn z.Error()\n \t\t}\n \t\temitToken(z.Token())\n@@ -61,7 +61,7 @@ call to Next. For example, to extract an HTML page's anchor text:\n \t\tcase StartTagToken, EndTagToken:\n \t\t\ttn, _ := z.TagName()\n \t\t\tif len(tn) == 1 && tn[0] == 'a' {\n-\t\t\t\tif tt == StartTag {\n+\t\t\t\tif tt == StartTagToken {\n \t\t\t\t\tdepth++\n \t\t\t\t} else {\n \t\t\t\t\tdepth--"}, {"sha": "b53f866fa2ddff6f22e9c9c831c8eabb1d7197b2", "filename": "libgo/go/html/entity_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Fentity_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Fentity_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Fentity_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -6,7 +6,7 @@ package html\n \n import (\n \t\"testing\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n func TestEntityLength(t *testing.T) {"}, {"sha": "ac9e100df0cb3c8fc1553fa7d5e5a7146502c105", "filename": "libgo/go/html/escape.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Fescape.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Fescape.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Fescape.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -7,7 +7,7 @@ package html\n import (\n \t\"bytes\"\n \t\"strings\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n // These replacements permit compatibility with old numeric entities that "}, {"sha": "f47d4ea147cb2f6ac1a3f08498f88b44c5c9c284", "filename": "libgo/go/html/parse.go", "status": "modified", "additions": 57, "deletions": 11, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Fparse.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Fparse.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Fparse.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -250,7 +250,7 @@ func (p *parser) read() error {\n \tp.tok = p.tokenizer.Token()\n \tswitch p.tok.Type {\n \tcase ErrorToken:\n-\t\treturn p.tokenizer.Error()\n+\t\treturn p.tokenizer.Err()\n \tcase SelfClosingTagToken:\n \t\tp.hasSelfClosingToken = true\n \t\tp.tok.Type = StartTagToken\n@@ -275,7 +275,9 @@ type insertionMode func(*parser) (insertionMode, bool)\n // Section 11.2.3.1, \"using the rules for\".\n func useTheRulesFor(p *parser, actual, delegate insertionMode) (insertionMode, bool) {\n \tim, consumed := delegate(p)\n-\t// TODO: do we need to update p.originalMode if it equals delegate?\n+\tif p.originalIM == delegate {\n+\t\tp.originalIM = actual\n+\t}\n \tif im != delegate {\n \t\treturn im, consumed\n \t}\n@@ -427,6 +429,7 @@ func beforeHeadIM(p *parser) (insertionMode, bool) {\n \t}\n \tif add || implied {\n \t\tp.addElement(\"head\", attr)\n+\t\tp.head = p.top()\n \t}\n \treturn inHeadIM, !implied\n }\n@@ -455,8 +458,10 @@ func inHeadIM(p *parser) (insertionMode, bool) {\n \t\timplied = true\n \tcase StartTagToken:\n \t\tswitch p.tok.Data {\n-\t\tcase \"meta\":\n-\t\t\t// TODO.\n+\t\tcase \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\":\n+\t\t\tp.addElement(p.tok.Data, p.tok.Attr)\n+\t\t\tp.oe.pop()\n+\t\t\tp.acknowledgeSelfClosingTag()\n \t\tcase \"script\", \"title\", \"noscript\", \"noframes\", \"style\":\n \t\t\tp.addElement(p.tok.Data, p.tok.Attr)\n \t\t\tp.setOriginalIM(inHeadIM)\n@@ -509,7 +514,9 @@ func afterHeadIM(p *parser) (insertionMode, bool) {\n \t\tcase \"frameset\":\n \t\t\t// TODO.\n \t\tcase \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\":\n-\t\t\t// TODO.\n+\t\t\tp.oe = append(p.oe, p.head)\n+\t\t\tdefer p.oe.pop()\n+\t\t\treturn useTheRulesFor(p, afterHeadIM, inHeadIM)\n \t\tcase \"head\":\n \t\t\t// TODO.\n \t\tdefault:\n@@ -532,6 +539,23 @@ func afterHeadIM(p *parser) (insertionMode, bool) {\n \treturn inBodyIM, !implied\n }\n \n+// copyAttributes copies attributes of src not found on dst to dst.\n+func copyAttributes(dst *Node, src Token) {\n+\tif len(src.Attr) == 0 {\n+\t\treturn\n+\t}\n+\tattr := map[string]string{}\n+\tfor _, a := range dst.Attr {\n+\t\tattr[a.Key] = a.Val\n+\t}\n+\tfor _, a := range src.Attr {\n+\t\tif _, ok := attr[a.Key]; !ok {\n+\t\t\tdst.Attr = append(dst.Attr, a)\n+\t\t\tattr[a.Key] = a.Val\n+\t\t}\n+\t}\n+}\n+\n // Section 11.2.5.4.7.\n func inBodyIM(p *parser) (insertionMode, bool) {\n \tswitch p.tok.Type {\n@@ -617,6 +641,19 @@ func inBodyIM(p *parser) (insertionMode, bool) {\n \t\t\t}\n \t\t\tp.reconstructActiveFormattingElements()\n \t\t\tp.addElement(p.tok.Data, p.tok.Attr)\n+\t\tcase \"body\":\n+\t\t\tif len(p.oe) >= 2 {\n+\t\t\t\tbody := p.oe[1]\n+\t\t\t\tif body.Type == ElementNode && body.Data == \"body\" {\n+\t\t\t\t\tp.framesetOK = false\n+\t\t\t\t\tcopyAttributes(body, p.tok)\n+\t\t\t\t}\n+\t\t\t}\n+\t\tcase \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\":\n+\t\t\treturn useTheRulesFor(p, inBodyIM, inHeadIM)\n+\t\tcase \"image\":\n+\t\t\tp.tok.Data = \"img\"\n+\t\t\treturn inBodyIM, false\n \t\tdefault:\n \t\t\t// TODO.\n \t\t\tp.addElement(p.tok.Data, p.tok.Attr)\n@@ -635,6 +672,10 @@ func inBodyIM(p *parser) (insertionMode, bool) {\n \t\t\tp.inBodyEndTagFormatting(p.tok.Data)\n \t\tcase \"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\":\n \t\t\tp.popUntil(defaultScopeStopTags, p.tok.Data)\n+\t\tcase \"applet\", \"marquee\", \"object\":\n+\t\t\tif p.popUntil(defaultScopeStopTags, p.tok.Data) {\n+\t\t\t\tp.clearActiveFormattingElements()\n+\t\t\t}\n \t\tdefault:\n \t\t\tp.inBodyEndTagOther(p.tok.Data)\n \t\t}\n@@ -934,22 +975,27 @@ func inRowIM(p *parser) (insertionMode, bool) {\n \tcase StartTagToken:\n \t\tswitch p.tok.Data {\n \t\tcase \"td\", \"th\":\n-\t\t\t// TODO: clear the stack back to a table row context.\n+\t\t\tp.clearStackToContext(tableRowContextStopTags)\n \t\t\tp.addElement(p.tok.Data, p.tok.Attr)\n \t\t\tp.afe = append(p.afe, &scopeMarker)\n \t\t\treturn inCellIM, true\n+\t\tcase \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\":\n+\t\t\tif p.popUntil(tableScopeStopTags, \"tr\") {\n+\t\t\t\treturn inTableBodyIM, false\n+\t\t\t}\n+\t\t\t// Ignore the token.\n+\t\t\treturn inRowIM, true\n \t\tdefault:\n \t\t\t// TODO.\n \t\t}\n \tcase EndTagToken:\n \t\tswitch p.tok.Data {\n \t\tcase \"tr\":\n-\t\t\tif !p.elementInScope(tableScopeStopTags, \"tr\") {\n-\t\t\t\treturn inRowIM, true\n+\t\t\tif p.popUntil(tableScopeStopTags, \"tr\") {\n+\t\t\t\treturn inTableBodyIM, true\n \t\t\t}\n-\t\t\tp.clearStackToContext(tableRowContextStopTags)\n-\t\t\tp.oe.pop()\n-\t\t\treturn inTableBodyIM, true\n+\t\t\t// Ignore the token.\n+\t\t\treturn inRowIM, true\n \t\tcase \"table\":\n \t\t\tif p.popUntil(tableScopeStopTags, \"tr\") {\n \t\t\t\treturn inTableBodyIM, false"}, {"sha": "27979225b332a5202dd5159a5f5dadd392158c8e", "filename": "libgo/go/html/parse_test.go", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Fparse_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Fparse_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Fparse_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -23,6 +23,7 @@ func pipeErr(err error) io.Reader {\n }\n \n func readDat(filename string, c chan io.Reader) {\n+\tdefer close(c)\n \tf, err := os.Open(\"testdata/webkit/\" + filename)\n \tif err != nil {\n \t\tc <- pipeErr(err)\n@@ -125,17 +126,27 @@ func dump(n *Node) (string, error) {\n }\n \n func TestParser(t *testing.T) {\n-\t// TODO(nigeltao): Process all the .dat files, not just the first one.\n-\tfilenames := []string{\n-\t\t\"tests1.dat\",\n+\ttestFiles := []struct {\n+\t\tfilename string\n+\t\t// n is the number of test cases to run from that file.\n+\t\t// -1 means all test cases.\n+\t\tn int\n+\t}{\n+\t\t// TODO(nigeltao): Process all the test cases from all the .dat files.\n+\t\t{\"tests1.dat\", 92},\n+\t\t{\"tests2.dat\", 0},\n+\t\t{\"tests3.dat\", 0},\n \t}\n-\tfor _, filename := range filenames {\n+\tfor _, tf := range testFiles {\n \t\trc := make(chan io.Reader)\n-\t\tgo readDat(filename, rc)\n-\t\t// TODO(nigeltao): Process all test cases, not just a subset.\n-\t\tfor i := 0; i < 80; i++ {\n+\t\tgo readDat(tf.filename, rc)\n+\t\tfor i := 0; i != tf.n; i++ {\n \t\t\t// Parse the #data section.\n-\t\t\tb, err := ioutil.ReadAll(<-rc)\n+\t\t\tdataReader := <-rc\n+\t\t\tif dataReader == nil {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tb, err := ioutil.ReadAll(dataReader)\n \t\t\tif err != nil {\n \t\t\t\tt.Fatal(err)\n \t\t\t}\n@@ -158,7 +169,7 @@ func TestParser(t *testing.T) {\n \t\t\t\tt.Fatal(err)\n \t\t\t}\n \t\t\tif want := string(b); got != want {\n-\t\t\t\tt.Errorf(\"%s test #%d %q, got vs want:\\n----\\n%s----\\n%s----\", filename, i, text, got, want)\n+\t\t\t\tt.Errorf(\"%s test #%d %q, got vs want:\\n----\\n%s----\\n%s----\", tf.filename, i, text, got, want)\n \t\t\t\tcontinue\n \t\t\t}\n \t\t\tif renderTestBlacklist[text] {\n@@ -178,10 +189,16 @@ func TestParser(t *testing.T) {\n \t\t\t\tt.Fatal(err)\n \t\t\t}\n \t\t\tif got != got1 {\n-\t\t\t\tt.Errorf(\"%s test #%d %q, got vs got1:\\n----\\n%s----\\n%s----\", filename, i, text, got, got1)\n+\t\t\t\tt.Errorf(\"%s test #%d %q, got vs got1:\\n----\\n%s----\\n%s----\", tf.filename, i, text, got, got1)\n \t\t\t\tcontinue\n \t\t\t}\n \t\t}\n+\t\t// Drain any untested cases for the test file.\n+\t\tfor r := range rc {\n+\t\t\tif _, err := ioutil.ReadAll(r); err != nil {\n+\t\t\t\tt.Fatal(err)\n+\t\t\t}\n+\t\t}\n \t}\n }\n \n@@ -193,6 +210,7 @@ var renderTestBlacklist = map[string]bool{\n \t// The second <a> will be reparented to the first <table>'s parent. This\n \t// results in an <a> whose parent is an <a>, which is not 'well-formed'.\n \t`<a><table><td><a><table></table><a></tr><a></table><b>X</b>C<a>Y`: true,\n-\t// The second <a> will be reparented, similar to the case above.\n+\t// More cases of <a> being reparented:\n \t`<a href=\"blah\">aba<table><a href=\"foo\">br<tr><td></td></tr>x</table>aoe`: true,\n+\t`<a><table><a></table><p><a><div><a>`:                                     true,\n }"}, {"sha": "3ea02880d45a67536083e7ff4b2c805234a358ac", "filename": "libgo/go/html/template/attr.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fattr.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fattr.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fattr.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package html\n+package template\n \n import (\n \t\"strings\"", "previous_filename": "libgo/go/exp/template/html/attr.go"}, {"sha": "d0d8ea46733f4aed2538603f619fec906c275f21", "filename": "libgo/go/html/template/clone.go", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fclone.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fclone.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fclone.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,10 +2,10 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package html\n+package template\n \n import (\n-\t\"template/parse\"\n+\t\"text/template/parse\"\n )\n \n // clone clones a template Node.", "previous_filename": "libgo/go/exp/template/html/clone.go"}, {"sha": "ed1698acd8b646e8c36c25ca4a372e2477460ca5", "filename": "libgo/go/html/template/clone_test.go", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fclone_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fclone_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fclone_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,13 +2,13 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package html\n+package template\n \n import (\n \t\"bytes\"\n-\t\"template\"\n-\t\"template/parse\"\n \t\"testing\"\n+\t\"text/template\"\n+\t\"text/template/parse\"\n )\n \n func TestClone(t *testing.T) {\n@@ -56,7 +56,7 @@ func TestClone(t *testing.T) {\n \t\t\tt.Errorf(\"want %q, got %q\", want, got)\n \t\t}\n \n-\t\td, err := Escape(d)\n+\t\terr := escape(d)\n \t\tif err != nil {\n \t\t\tt.Errorf(\"%q: failed to escape: %s\", test.input, err)\n \t\t\tcontinue", "previous_filename": "libgo/go/exp/template/html/clone_test.go"}, {"sha": "d720d4ba6895df1e0a48463f38ad02bd76815ada", "filename": "libgo/go/html/template/content.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fcontent.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fcontent.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fcontent.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package html\n+package template\n \n import (\n \t\"fmt\"", "previous_filename": "libgo/go/exp/template/html/content.go"}, {"sha": "c96a521a59c47e9e5ad9be547a11332f01213e47", "filename": "libgo/go/html/template/content_test.go", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fcontent_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fcontent_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fcontent_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,12 +2,11 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package html\n+package template\n \n import (\n \t\"bytes\"\n \t\"strings\"\n-\t\"template\"\n \t\"testing\"\n )\n \n@@ -203,7 +202,7 @@ func TestTypedContent(t *testing.T) {\n \t}\n \n \tfor _, test := range tests {\n-\t\ttmpl := template.Must(Escape(template.Must(template.New(\"x\").Parse(test.input))))\n+\t\ttmpl := Must(New(\"x\").Parse(test.input))\n \t\tpre := strings.Index(test.input, \"{{.}}\")\n \t\tpost := len(test.input) - (pre + 5)\n \t\tvar b bytes.Buffer", "previous_filename": "libgo/go/exp/template/html/content_test.go"}, {"sha": "7202221b831d8bc948f5874e8170eab09a30e396", "filename": "libgo/go/html/template/context.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fcontext.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fcontext.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fcontext.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package html\n+package template\n \n import (\n \t\"fmt\"", "previous_filename": "libgo/go/exp/template/html/context.go"}, {"sha": "b0a2f013d2909b0b8e453e58b6eed459849b628c", "filename": "libgo/go/html/template/css.go", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fcss.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fcss.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fcss.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,13 +2,13 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package html\n+package template\n \n import (\n \t\"bytes\"\n \t\"fmt\"\n \t\"unicode\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n // endsWithCSSKeyword returns whether b ends with an ident that", "previous_filename": "libgo/go/exp/template/html/css.go"}, {"sha": "0d94bdcf18cda23dcc1473bee5fe459817f5469e", "filename": "libgo/go/html/template/css_test.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fcss_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fcss_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fcss_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package html\n+package template\n \n import (\n \t\"strconv\"", "previous_filename": "libgo/go/exp/template/html/css_test.go"}, {"sha": "0324c9c0ee325115a08f85087de2b2d74d1e18eb", "filename": "libgo/go/html/template/doc.go", "status": "renamed", "additions": 29, "deletions": 33, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fdoc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fdoc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fdoc.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -3,65 +3,61 @@\n // license that can be found in the LICENSE file.\n \n /*\n-Package html is a specialization of package template that automates the\n-construction of HTML output that is safe against code injection.\n+Package template (html/template) is a specialization of package text/template\n+that automates the construction of HTML output that is safe against code\n+injection.\n \n \n Introduction\n \n-To use this package, invoke the standard template package to parse a template\n-set, and then use this package\u2019s EscapeSet function to secure the set.\n-The arguments to EscapeSet are the template set and the names of all templates\n-that will be passed to Execute.\n+This package wraps package template so you can use the standard template API\n+to parse and execute templates.\n \n     set, err := new(template.Set).Parse(...)\n-    set, err = EscapeSet(set, \"templateName0\", ...)\n+    // Error checking elided\n+    err = set.Execute(out, \"Foo\", data)\n \n-If successful, set will now be injection-safe. Otherwise, the returned set will\n-be nil and an error, described below, will explain the problem.\n+If successful, set will now be injection-safe. Otherwise, err is an error\n+defined in the docs for ErrorCode.\n \n-The template names do not need to include helper templates but should include\n-all names x used thus:\n-\n-    set.Execute(out, x, ...)\n-\n-EscapeSet modifies the named templates in place to treat data values as plain\n-text safe for embedding in an HTML document. The escaping is contextual, so\n-actions can appear within JavaScript, CSS, and URI contexts without introducing'hazards.\n+HTML templates treat data values as plain text which should be encoded so they\n+can be safely embedded in an HTML document. The escaping is contextual, so\n+actions can appear within JavaScript, CSS, and URI contexts.\n \n The security model used by this package assumes that template authors are\n trusted, while Execute's data parameter is not. More details are provided below.\n \n Example\n \n-    tmpls, err := new(template.Set).Parse(`{{define \"t'}}Hello, {{.}}!{{end}}`)\n-\n-when used by itself\n-\n-    tmpls.Execute(out, \"t\", \"<script>alert('you have been pwned')</script>\")\n+    import \"template\"\n+    ...\n+    t, err := (&template.Set{}).Parse(`{{define \"T\"}}Hello, {{.}}!{{end}}`)\n+    err = t.Execute(out, \"T\", \"<script>alert('you have been pwned')</script>\")\n \n produces\n \n     Hello, <script>alert('you have been pwned')</script>!\n \n-but after securing with EscapeSet like this,\n+but with contextual autoescaping,\n \n-    tmpls, err := EscapeSet(tmpls, \"t\")\n-    tmpls.Execute(out, \"t\", ...)\n+    import \"html/template\"\n+    ...\n+    t, err := (&template.Set{}).Parse(`{{define \"T\"}}Hello, {{.}}!{{end}}`)\n+    err = t.Execute(out, \"T\", \"<script>alert('you have been pwned')</script>\")\n \n-produces the safe, escaped HTML output\n+produces safe, escaped HTML output\n \n     Hello, &lt;script&gt;alert('you have been pwned')&lt;/script&gt;!\n \n \n Contexts\n \n-EscapeSet understands HTML, CSS, JavaScript, and URIs. It adds sanitizing\n+This package understands HTML, CSS, JavaScript, and URIs. It adds sanitizing\n functions to each simple action pipeline, so given the excerpt\n \n   <a href=\"/search?q={{.}}\">{{.}}</a>\n \n-EscapeSet will rewrite each {{.}} to add escaping functions where necessary,\n+At parse time each {{.}} is overwritten to add escaping functions as necessary,\n in this case,\n \n   <a href=\"/search?q={{. | urlquery}}\">{{. | html}}</a>\n@@ -134,8 +130,8 @@ embedding in JavaScript contexts.\n \n Typed Strings\n \n-By default, EscapeSet assumes all pipelines produce a plain text string. It\n-adds escaping pipeline stages necessary to correctly and safely embed that\n+By default, this package assumes that all pipelines produce a plain text string.\n+It adds escaping pipeline stages necessary to correctly and safely embed that\n plain text string in the appropriate context.\n \n When a data value is not plain text, you can make sure it is not over-escaped\n@@ -183,8 +179,8 @@ injecting the template output into a page and all code specified by the\n template author should run as a result of the same.\"\n \n Least Surprise Property\n-\"A developer (or code reviewer) familiar with HTML, CSS, and JavaScript;\n-who knows that EscapeSet is applied should be able to look at a {{.}}\n+\"A developer (or code reviewer) familiar with HTML, CSS, and JavaScript, who\n+knows that contextual autoescaping happens should be able to look at a {{.}}\n and correctly infer what sanitization happens.\"\n */\n-package html\n+package template", "previous_filename": "libgo/go/exp/template/html/doc.go"}, {"sha": "9622d7e48eed8dff1547a2a6150a3728f5c9a74e", "filename": "libgo/go/html/template/error.go", "status": "renamed", "additions": 25, "deletions": 41, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Ferror.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Ferror.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Ferror.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package html\n+package template\n \n import (\n \t\"fmt\"\n@@ -75,12 +75,12 @@ const (\n \t// Example:\n \t//   {{if .C}}<a href=\"{{end}}{{.X}}\n \t// Discussion:\n-\t//   EscapeSet statically examines each possible path when it encounters\n-\t//   a {{if}}, {{range}}, or {{with}} to escape any following pipelines.\n+\t//   Package html/template statically examines each path through an\n+\t//   {{if}}, {{range}}, or {{with}} to escape any following pipelines.\n \t//   The example is ambiguous since {{.X}} might be an HTML text node,\n-\t//   or a URL prefix in an HTML attribute. EscapeSet needs to understand\n-\t//   the context of {{.X}} to escape it, but that depends on the\n-\t//   run-time value of {{.C}}.\n+\t//   or a URL prefix in an HTML attribute. The context of {{.X}} is\n+\t//   used to figure out how to escape it, but that context depends on\n+\t//   the run-time value of {{.C}} which is not statically known.\n \t//\n \t//   The problem is usually something like missing quotes or angle\n \t//   brackets, or can be avoided by refactoring to put the two contexts\n@@ -95,44 +95,28 @@ const (\n \t//   <div title=\"no close quote>\n \t//   <script>f()\n \t// Discussion:\n-\t//   EscapeSet assumes the ouput is a DocumentFragment of HTML.\n+\t//   Executed templates should produce a DocumentFragment of HTML.\n \t//   Templates that end without closing tags will trigger this error.\n-\t//   Templates that produce incomplete Fragments should not be named\n-\t//   in the call to EscapeSet.\n-\t//\n-\t// If you have a helper template in your set that is not meant to\n-\t// produce a document fragment, then do not pass its name to\n-\t// EscapeSet(set, ...names).\n+\t//   Templates that should not be used in an HTML context or that\n+\t//   produce incomplete Fragments should not be executed directly.\n \t//\n \t//   {{define \"main\"}} <script>{{template \"helper\"}}</script> {{end}}\n \t//   {{define \"helper\"}} document.write(' <div title=\" ') {{end}}\n \t// \n-\t// \"helper\" does not produce a valid document fragment, though it does\n-\t// produce a valid JavaScript Program.\n+\t//   \"helper\" does not produce a valid document fragment, so should\n+\t//   not be Executed directly.\n \tErrEndContext\n \n-\t// ErrNoNames: \"must specify names of top level templates\"\n-\t// \n-\t//   EscapeSet does not assume that all templates in a set produce HTML.\n-\t//   Some may be helpers that produce snippets of other languages.\n-\t//   Passing in no template names is most likely an error,\n-\t//   so EscapeSet(set) will panic.\n-\t//   If you call EscapeSet with a slice of names, guard it with len:\n-\t// \n-\t//     if len(names) != 0 {\n-\t//       set, err := EscapeSet(set, ...names)\n-\t//     }\n-\tErrNoNames\n-\n \t// ErrNoSuchTemplate: \"no such template ...\"\n \t// Examples:\n \t//   {{define \"main\"}}<div {{template \"attrs\"}}>{{end}}\n \t//   {{define \"attrs\"}}href=\"{{.URL}}\"{{end}}\n \t// Discussion:\n-\t//   EscapeSet looks through template calls to compute the context.\n+\t//   Package html/template looks through template calls to compute the\n+\t//   context.\n \t//   Here the {{.URL}} in \"attrs\" must be treated as a URL when called\n-\t//   from \"main\", but if \"attrs\" is not in set when\n-\t//   EscapeSet(&set, \"main\") is called, this error will arise.\n+\t//   from \"main\", but you will get this error if \"attrs\" is not defined\n+\t//   when \"main\" is parsed.\n \tErrNoSuchTemplate\n \n \t// ErrOutputContext: \"cannot compute output context for template ...\"\n@@ -151,34 +135,34 @@ const (\n \t// Example:\n \t//     <script>var pattern = /foo[{{.Chars}}]/</script>\n \t// Discussion:\n-\t//   EscapeSet does not support interpolation into regular expression\n-\t//   literal character sets.\n+\t//   Package html/template does not support interpolation into regular\n+\t//   expression literal character sets.\n \tErrPartialCharset\n \n \t// ErrPartialEscape: \"unfinished escape sequence in ...\"\n \t// Example:\n \t//   <script>alert(\"\\{{.X}}\")</script>\n \t// Discussion:\n-\t//   EscapeSet does not support actions following a backslash.\n+\t//   Package html/template does not support actions following a\n+\t//   backslash.\n \t//   This is usually an error and there are better solutions; for\n-\t//   our example\n+\t//   example\n \t//     <script>alert(\"{{.X}}\")</script>\n \t//   should work, and if {{.X}} is a partial escape sequence such as\n \t//   \"xA0\", mark the whole sequence as safe content: JSStr(`\\xA0`)\n \tErrPartialEscape\n \n \t// ErrRangeLoopReentry: \"on range loop re-entry: ...\"\n \t// Example:\n-\t//   {{range .}}<p class={{.}}{{end}}\n+\t//   <script>var x = [{{range .}}'{{.}},{{end}}]</script>\n \t// Discussion:\n \t//   If an iteration through a range would cause it to end in a\n \t//   different context than an earlier pass, there is no single context.\n-\t//   In the example, the <p> tag is missing a '>'.\n-\t//   EscapeSet cannot tell whether {{.}} is meant to be an HTML class or\n-\t//   the content of a broken <p> element and complains because the\n-\t//   second iteration would produce something like\n+\t//   In the example, there is missing a quote, so it is not clear\n+\t//   whether {{.}} is meant to be inside a JS string or in a JS value\n+\t//   context.  The second iteration would produce something like\n \t// \n-\t//     <p class=foo<p class=bar\n+\t//     <script>var x = ['firstValue,'secondValue]</script>\n \tErrRangeLoopReentry\n \n \t// ErrSlashAmbig: '/' could start a division or regexp.", "previous_filename": "libgo/go/exp/template/html/error.go"}, {"sha": "8ac07eae24c3fe029791e18577a14c201c1686b4", "filename": "libgo/go/html/template/escape.go", "status": "renamed", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fescape.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fescape.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fescape.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,41 +2,33 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package html\n+package template\n \n import (\n \t\"bytes\"\n \t\"fmt\"\n \t\"html\"\n-\t\"template\"\n-\t\"template/parse\"\n+\t\"text/template\"\n+\t\"text/template/parse\"\n )\n \n-// Escape rewrites each action in the template to guarantee that the output is\n+// escape rewrites each action in the template to guarantee that the output is\n // properly escaped.\n-func Escape(t *template.Template) (*template.Template, error) {\n+func escape(t *template.Template) error {\n \tvar s template.Set\n \ts.Add(t)\n-\tif _, err := EscapeSet(&s, t.Name()); err != nil {\n-\t\treturn nil, err\n-\t}\n+\treturn escapeSet(&s, t.Name())\n \t// TODO: if s contains cloned dependencies due to self-recursion\n \t// cross-context, error out.\n-\treturn t, nil\n }\n \n-// EscapeSet rewrites the template set to guarantee that the output of any of\n+// escapeSet rewrites the template set to guarantee that the output of any of\n // the named templates is properly escaped.\n // Names should include the names of all templates that might be Executed but\n // need not include helper templates.\n // If no error is returned, then the named templates have been modified. \n // Otherwise the named templates have been rendered unusable.\n-func EscapeSet(s *template.Set, names ...string) (*template.Set, error) {\n-\tif len(names) == 0 {\n-\t\t// TODO: Maybe add a method to Set to enumerate template names\n-\t\t// and use those instead.\n-\t\treturn nil, &Error{ErrNoNames, \"\", 0, \"must specify names of top level templates\"}\n-\t}\n+func escapeSet(s *template.Set, names ...string) error {\n \te := newEscaper(s)\n \tfor _, name := range names {\n \t\tc, _ := e.escapeTree(context{}, name, 0)\n@@ -53,11 +45,11 @@ func EscapeSet(s *template.Set, names ...string) (*template.Set, error) {\n \t\t\t\t\tt.Tree = nil\n \t\t\t\t}\n \t\t\t}\n-\t\t\treturn nil, err\n+\t\t\treturn err\n \t\t}\n \t}\n \te.commit()\n-\treturn s, nil\n+\treturn nil\n }\n \n // funcMap maps command names to functions that render their inputs safe.\n@@ -509,7 +501,7 @@ func (e *escaper) escapeTree(c context, name string, line int) (context, string)\n \t\t}, dname\n \t}\n \tif dname != name {\n-\t\t// Use any template derived during an earlier call to EscapeSet\n+\t\t// Use any template derived during an earlier call to escapeSet\n \t\t// with different top level templates, or clone if necessary.\n \t\tdt := e.template(dname)\n \t\tif dt == nil {\n@@ -675,7 +667,7 @@ func contextAfterText(c context, s []byte) (context, int) {\n \t\t// http://www.w3.org/TR/html5/tokenization.html#attribute-value-unquoted-state\n \t\t// lists the runes below as error characters.\n \t\t// Error out because HTML parsers may differ on whether\n-\t\t// \"<a id= onclick=f(\"     ends inside id's or onchange's value,\n+\t\t// \"<a id= onclick=f(\"     ends inside id's or onclick's value,\n \t\t// \"<a class=`foo \"        ends inside a value,\n \t\t// \"<a style=font:'Arial'\" needs open-quote fixup.\n \t\t// IE treats '`' as a quotation character.", "previous_filename": "libgo/go/exp/template/html/escape.go"}, {"sha": "d8bfa321121020dd8d8e65bce99f56df4c41662c", "filename": "libgo/go/html/template/escape_test.go", "status": "renamed", "additions": 36, "deletions": 42, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fescape_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fescape_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fescape_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,16 +2,16 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package html\n+package template\n \n import (\n \t\"bytes\"\n+\t\"encoding/json\"\n \t\"fmt\"\n-\t\"json\"\n \t\"strings\"\n-\t\"template\"\n-\t\"template/parse\"\n \t\"testing\"\n+\t\"text/template\"\n+\t\"text/template/parse\"\n )\n \n type badMarshaler struct{}\n@@ -224,7 +224,7 @@ func TestEscape(t *testing.T) {\n \t\t{\n \t\t\t\"badMarshaller\",\n \t\t\t`<button onclick='alert(1/{{.B}}in numbers)'>`,\n-\t\t\t`<button onclick='alert(1/ /* json: error calling MarshalJSON for type *html.badMarshaler: invalid character &#39;f&#39; looking for beginning of object key string */null in numbers)'>`,\n+\t\t\t`<button onclick='alert(1/ /* json: error calling MarshalJSON for type *template.badMarshaler: invalid character &#39;f&#39; looking for beginning of object key string */null in numbers)'>`,\n \t\t},\n \t\t{\n \t\t\t\"jsMarshaller\",\n@@ -651,14 +651,14 @@ func TestEscape(t *testing.T) {\n \t}\n \n \tfor _, test := range tests {\n-\t\ttmpl := template.New(test.name)\n+\t\ttmpl := New(test.name)\n \t\t// TODO: Move noescape into template/func.go\n \t\ttmpl.Funcs(template.FuncMap{\n \t\t\t\"noescape\": func(a ...interface{}) string {\n \t\t\t\treturn fmt.Sprint(a...)\n \t\t\t},\n \t\t})\n-\t\ttmpl = template.Must(Escape(template.Must(tmpl.Parse(test.input))))\n+\t\ttmpl = Must(tmpl.Parse(test.input))\n \t\tb := new(bytes.Buffer)\n \t\tif err := tmpl.Execute(b, data); err != nil {\n \t\t\tt.Errorf(\"%s: template execution failed: %s\", test.name, err)\n@@ -792,17 +792,13 @@ func TestEscapeSet(t *testing.T) {\n \t}}\n \n \tfor _, test := range tests {\n-\t\tvar s template.Set\n-\t\tfor name, src := range test.inputs {\n-\t\t\tt := template.New(name)\n-\t\t\tt.Funcs(fns)\n-\t\t\ts.Add(template.Must(t.Parse(src)))\n+\t\tsource := \"\"\n+\t\tfor name, body := range test.inputs {\n+\t\t\tsource += fmt.Sprintf(\"{{define %q}}%s{{end}} \", name, body)\n \t\t}\n+\t\ts := &Set{}\n \t\ts.Funcs(fns)\n-\t\tif _, err := EscapeSet(&s, \"main\"); err != nil {\n-\t\t\tt.Errorf(\"%s for input:\\n%v\", err, test.inputs)\n-\t\t\tcontinue\n-\t\t}\n+\t\ts.Parse(source)\n \t\tvar b bytes.Buffer\n \n \t\tif err := s.Execute(&b, \"main\", data); err != nil {\n@@ -962,17 +958,19 @@ func TestErrors(t *testing.T) {\n \n \tfor _, test := range tests {\n \t\tvar err error\n+\t\tbuf := new(bytes.Buffer)\n \t\tif strings.HasPrefix(test.input, \"{{define\") {\n-\t\t\tvar s template.Set\n-\t\t\t_, err = s.Parse(test.input)\n-\t\t\tif err != nil {\n-\t\t\t\tt.Errorf(\"Failed to parse %q: %s\", test.input, err)\n-\t\t\t\tcontinue\n+\t\t\tvar s *Set\n+\t\t\ts, err = (&Set{}).Parse(test.input)\n+\t\t\tif err == nil {\n+\t\t\t\terr = s.Execute(buf, \"z\", nil)\n \t\t\t}\n-\t\t\t_, err = EscapeSet(&s, \"z\")\n \t\t} else {\n-\t\t\ttmpl := template.Must(template.New(\"z\").Parse(test.input))\n-\t\t\t_, err = Escape(tmpl)\n+\t\t\tvar t *Template\n+\t\t\tt, err = New(\"z\").Parse(test.input)\n+\t\t\tif err == nil {\n+\t\t\t\terr = t.Execute(buf, nil)\n+\t\t\t}\n \t\t}\n \t\tvar got string\n \t\tif err != nil {\n@@ -1548,33 +1546,29 @@ func TestEnsurePipelineContains(t *testing.T) {\n \t}\n }\n \n-func expectExecuteFailure(t *testing.T, b *bytes.Buffer, err error) {\n-\tif err != nil {\n-\t\tif b.Len() != 0 {\n-\t\t\tt.Errorf(\"output on buffer: %q\", b.String())\n-\t\t}\n-\t} else {\n-\t\tt.Errorf(\"unescaped template executed\")\n-\t}\n-}\n-\n func TestEscapeErrorsNotIgnorable(t *testing.T) {\n \tvar b bytes.Buffer\n-\ttmpl := template.Must(template.New(\"dangerous\").Parse(\"<a\"))\n-\tEscape(tmpl)\n+\ttmpl, _ := New(\"dangerous\").Parse(\"<a\")\n \terr := tmpl.Execute(&b, nil)\n-\texpectExecuteFailure(t, &b, err)\n+\tif err == nil {\n+\t\tt.Errorf(\"Expected error\")\n+\t} else if b.Len() != 0 {\n+\t\tt.Errorf(\"Emitted output despite escaping failure\")\n+\t}\n }\n \n func TestEscapeSetErrorsNotIgnorable(t *testing.T) {\n-\ts, err := (&template.Set{}).Parse(`{{define \"t\"}}<a{{end}}`)\n+\tvar b bytes.Buffer\n+\ts, err := (&Set{}).Parse(`{{define \"t\"}}<a{{end}}`)\n \tif err != nil {\n \t\tt.Errorf(\"failed to parse set: %q\", err)\n \t}\n-\tEscapeSet(s, \"t\")\n-\tvar b bytes.Buffer\n \terr = s.Execute(&b, \"t\", nil)\n-\texpectExecuteFailure(t, &b, err)\n+\tif err == nil {\n+\t\tt.Errorf(\"Expected error\")\n+\t} else if b.Len() != 0 {\n+\t\tt.Errorf(\"Emitted output despite escaping failure\")\n+\t}\n }\n \n func TestRedundantFuncs(t *testing.T) {\n@@ -1612,7 +1606,7 @@ func TestRedundantFuncs(t *testing.T) {\n }\n \n func BenchmarkEscapedExecute(b *testing.B) {\n-\ttmpl := template.Must(Escape(template.Must(template.New(\"t\").Parse(`<a onclick=\"alert('{{.}}')\">{{.}}</a>`))))\n+\ttmpl := Must(New(\"t\").Parse(`<a onclick=\"alert('{{.}}')\">{{.}}</a>`))\n \tvar buf bytes.Buffer\n \tb.ResetTimer()\n \tfor i := 0; i < b.N; i++ {", "previous_filename": "libgo/go/exp/template/html/escape_test.go"}, {"sha": "7b77d6531ab775807614ec11091732af8895da0f", "filename": "libgo/go/html/template/html.go", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fhtml.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fhtml.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fhtml.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,13 +2,13 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package html\n+package template\n \n import (\n \t\"bytes\"\n \t\"fmt\"\n \t\"strings\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n // htmlNospaceEscaper escapes for inclusion in unquoted attribute values.", "previous_filename": "libgo/go/exp/template/html/html.go"}, {"sha": "b9b970387571e38265b60f687b16476646d57587", "filename": "libgo/go/html/template/html_test.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fhtml_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fhtml_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fhtml_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package html\n+package template\n \n import (\n \t\"html\"", "previous_filename": "libgo/go/exp/template/html/html_test.go"}, {"sha": "68c53e5ca3b549484ae59368c190170ae64497d9", "filename": "libgo/go/html/template/js.go", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fjs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fjs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fjs.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,14 +2,14 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package html\n+package template\n \n import (\n \t\"bytes\"\n+\t\"encoding/json\"\n \t\"fmt\"\n-\t\"json\"\n \t\"strings\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n // nextJSCtx returns the context that determines whether a slash after the", "previous_filename": "libgo/go/exp/template/html/js.go"}, {"sha": "311e1d2c4ea2c1e7736e4a7b45e5c75edc8a2326", "filename": "libgo/go/html/template/js_test.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fjs_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Fjs_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fjs_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package html\n+package template\n \n import (\n \t\"bytes\"", "previous_filename": "libgo/go/exp/template/html/js_test.go"}, {"sha": "47334299384bf9c7eedcf60b1c1a46486398bf91", "filename": "libgo/go/html/template/template.go", "status": "added", "additions": 239, "deletions": 0, "changes": 239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Ftemplate.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Ftemplate.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Ftemplate.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -0,0 +1,239 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package template\n+\n+import (\n+\t\"fmt\"\n+\t\"io\"\n+\t\"path/filepath\"\n+\t\"text/template\"\n+)\n+\n+// Set is a specialized template.Set that produces a safe HTML document\n+// fragment.\n+type Set struct {\n+\tescaped map[string]bool\n+\ttemplate.Set\n+}\n+\n+// Template is a specialized template.Template that produces a safe HTML\n+// document fragment.\n+type Template struct {\n+\tescaped bool\n+\t*template.Template\n+}\n+\n+// Execute applies the named template to the specified data object, writing\n+// the output to wr.\n+func (s *Set) Execute(wr io.Writer, name string, data interface{}) error {\n+\tif !s.escaped[name] {\n+\t\tif err := escapeSet(&s.Set, name); err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tif s.escaped == nil {\n+\t\t\ts.escaped = make(map[string]bool)\n+\t\t}\n+\t\ts.escaped[name] = true\n+\t}\n+\treturn s.Set.Execute(wr, name, data)\n+}\n+\n+// Parse parses a string into a set of named templates.  Parse may be called\n+// multiple times for a given set, adding the templates defined in the string\n+// to the set.  If a template is redefined, the element in the set is\n+// overwritten with the new definition.\n+func (set *Set) Parse(src string) (*Set, error) {\n+\tset.escaped = nil\n+\ts, err := set.Set.Parse(src)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tif s != &(set.Set) {\n+\t\tpanic(\"allocated new set\")\n+\t}\n+\treturn set, nil\n+}\n+\n+// Parse parses the template definition string to construct an internal\n+// representation of the template for execution.\n+func (tmpl *Template) Parse(src string) (*Template, error) {\n+\ttmpl.escaped = false\n+\tt, err := tmpl.Template.Parse(src)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\ttmpl.Template = t\n+\treturn tmpl, nil\n+}\n+\n+// Execute applies a parsed template to the specified data object,\n+// writing the output to wr.\n+func (t *Template) Execute(wr io.Writer, data interface{}) error {\n+\tif !t.escaped {\n+\t\tif err := escape(t.Template); err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tt.escaped = true\n+\t}\n+\treturn t.Template.Execute(wr, data)\n+}\n+\n+// New allocates a new HTML template with the given name.\n+func New(name string) *Template {\n+\treturn &Template{false, template.New(name)}\n+}\n+\n+// Must panics if err is non-nil in the same way as template.Must.\n+func Must(t *Template, err error) *Template {\n+\tt.Template = template.Must(t.Template, err)\n+\treturn t\n+}\n+\n+// ParseFile creates a new Template and parses the template definition from\n+// the named file.  The template name is the base name of the file.\n+func ParseFile(filename string) (*Template, error) {\n+\tt, err := template.ParseFile(filename)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn &Template{false, t}, nil\n+}\n+\n+// ParseFile reads the template definition from a file and parses it to\n+// construct an internal representation of the template for execution.\n+// The returned template will be nil if an error occurs.\n+func (tmpl *Template) ParseFile(filename string) (*Template, error) {\n+\tt, err := tmpl.Template.ParseFile(filename)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\ttmpl.Template = t\n+\treturn tmpl, nil\n+}\n+\n+// SetMust panics if the error is non-nil just like template.SetMust.\n+func SetMust(s *Set, err error) *Set {\n+\tif err != nil {\n+\t\ttemplate.SetMust(&(s.Set), err)\n+\t}\n+\treturn s\n+}\n+\n+// ParseFiles parses the named files into a set of named templates.\n+// Each file must be parseable by itself.\n+// If an error occurs, parsing stops and the returned set is nil.\n+func (set *Set) ParseFiles(filenames ...string) (*Set, error) {\n+\ts, err := set.Set.ParseFiles(filenames...)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tif s != &(set.Set) {\n+\t\tpanic(\"allocated new set\")\n+\t}\n+\treturn set, nil\n+}\n+\n+// ParseSetFiles creates a new Set and parses the set definition from the\n+// named files. Each file must be individually parseable.\n+func ParseSetFiles(filenames ...string) (*Set, error) {\n+\tset := new(Set)\n+\ts, err := set.Set.ParseFiles(filenames...)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tif s != &(set.Set) {\n+\t\tpanic(\"allocated new set\")\n+\t}\n+\treturn set, nil\n+}\n+\n+// ParseGlob parses the set definition from the files identified by the\n+// pattern. The pattern is processed by filepath.Glob and must match at\n+// least one file.\n+// If an error occurs, parsing stops and the returned set is nil.\n+func (s *Set) ParseGlob(pattern string) (*Set, error) {\n+\tfilenames, err := filepath.Glob(pattern)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tif len(filenames) == 0 {\n+\t\treturn nil, fmt.Errorf(\"pattern matches no files: %#q\", pattern)\n+\t}\n+\treturn s.ParseFiles(filenames...)\n+}\n+\n+// ParseSetGlob creates a new Set and parses the set definition from the\n+// files identified by the pattern. The pattern is processed by filepath.Glob\n+// and must match at least one file.\n+func ParseSetGlob(pattern string) (*Set, error) {\n+\tset, err := new(Set).ParseGlob(pattern)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn set, nil\n+}\n+\n+// Functions and methods to parse stand-alone template files into a set.\n+\n+// ParseTemplateFiles parses the named template files and adds them to the set\n+// in the same way as template.ParseTemplateFiles but ensures that templates\n+// with upper-case names are contextually-autoescaped.\n+func (set *Set) ParseTemplateFiles(filenames ...string) (*Set, error) {\n+\ts, err := set.Set.ParseTemplateFiles(filenames...)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tif s != &(set.Set) {\n+\t\tpanic(\"new set allocated\")\n+\t}\n+\treturn set, nil\n+}\n+\n+// ParseTemplateGlob parses the template files matched by the\n+// patern and adds them to the set. Each template will be named\n+// the base name of its file.\n+// Unlike with ParseGlob, each file should be a stand-alone template\n+// definition suitable for Template.Parse (not Set.Parse); that is, the\n+// file does not contain {{define}} clauses. ParseTemplateGlob is\n+// therefore equivalent to calling the ParseFile function to create\n+// individual templates, which are then added to the set.\n+// Each file must be parseable by itself.\n+// If an error occurs, parsing stops and the returned set is nil.\n+func (s *Set) ParseTemplateGlob(pattern string) (*Set, error) {\n+\tfilenames, err := filepath.Glob(pattern)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn s.ParseTemplateFiles(filenames...)\n+}\n+\n+// ParseTemplateFiles creates a set by parsing the named files,\n+// each of which defines a single template. Each template will be\n+// named the base name of its file.\n+// Unlike with ParseFiles, each file should be a stand-alone template\n+// definition suitable for Template.Parse (not Set.Parse); that is, the\n+// file does not contain {{define}} clauses. ParseTemplateFiles is\n+// therefore equivalent to calling the ParseFile function to create\n+// individual templates, which are then added to the set.\n+// Each file must be parseable by itself. Parsing stops if an error is\n+// encountered.\n+func ParseTemplateFiles(filenames ...string) (*Set, error) {\n+\treturn new(Set).ParseTemplateFiles(filenames...)\n+}\n+\n+// ParseTemplateGlob creates a set by parsing the files matched\n+// by the pattern, each of which defines a single template. The pattern\n+// is processed by filepath.Glob and must match at least one file. Each\n+// template will be named the base name of its file.\n+// Unlike with ParseGlob, each file should be a stand-alone template\n+// definition suitable for Template.Parse (not Set.Parse); that is, the\n+// file does not contain {{define}} clauses. ParseTemplateGlob is\n+// therefore equivalent to calling the ParseFile function to create\n+// individual templates, which are then added to the set.\n+// Each file must be parseable by itself. Parsing stops if an error is\n+// encountered.\n+func ParseTemplateGlob(pattern string) (*Set, error) {\n+\treturn new(Set).ParseTemplateGlob(pattern)\n+}"}, {"sha": "96a4f6678bc746483636afeee048a73e70fcd34f", "filename": "libgo/go/html/template/transition.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Ftransition.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Ftransition.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Ftransition.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package html\n+package template\n \n import (\n \t\"bytes\"", "previous_filename": "libgo/go/exp/template/html/transition.go"}, {"sha": "454c791ec3123ca753e9cd5a05a9a72a744fe187", "filename": "libgo/go/html/template/url.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Furl.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Furl.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Furl.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package html\n+package template\n \n import (\n \t\"bytes\"", "previous_filename": "libgo/go/exp/template/html/url.go"}, {"sha": "5182e9d794386a99cab2c77b346adf6b88674fa9", "filename": "libgo/go/html/template/url_test.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Furl_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftemplate%2Furl_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Furl_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package html\n+package template\n \n import (\n \t\"testing\"", "previous_filename": "libgo/go/exp/template/html/url_test.go"}, {"sha": "a5ebb1eb285116af391137bc94beac0c8a6834b4", "filename": "libgo/go/html/testdata/webkit/pending-spec-changes-plain-text-unsafe.dat", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftestdata%2Fwebkit%2Fpending-spec-changes-plain-text-unsafe.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftestdata%2Fwebkit%2Fpending-spec-changes-plain-text-unsafe.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftestdata%2Fwebkit%2Fpending-spec-changes-plain-text-unsafe.dat?ref=9c63abc9a1d127f95162756467284cf76b47aff8"}, {"sha": "2c138227b1049ffc738712a677a452e1bd0a19db", "filename": "libgo/go/html/token.go", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftoken.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftoken.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftoken.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -123,7 +123,7 @@ type Tokenizer struct {\n \t// for tt != Error && err != nil to hold: this means that Next returned a\n \t// valid token but the subsequent Next call will return an error token.\n \t// For example, if the HTML text input was just \"plain\", then the first\n-\t// Next call would set z.err to os.EOF but return a TextToken, and all\n+\t// Next call would set z.err to io.EOF but return a TextToken, and all\n \t// subsequent Next calls would return an ErrorToken.\n \t// err is never reset. Once it becomes non-nil, it stays non-nil.\n \terr error\n@@ -149,9 +149,9 @@ type Tokenizer struct {\n \ttextIsRaw bool\n }\n \n-// Error returns the error associated with the most recent ErrorToken token.\n-// This is typically os.EOF, meaning the end of tokenization.\n-func (z *Tokenizer) Error() error {\n+// Err returns the error associated with the most recent ErrorToken token.\n+// This is typically io.EOF, meaning the end of tokenization.\n+func (z *Tokenizer) Err() error {\n \tif z.tt != ErrorToken {\n \t\treturn nil\n \t}"}, {"sha": "61d4e67c06d7f178400672a65d539fda6e5d1b30", "filename": "libgo/go/html/token_test.go", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftoken_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fhtml%2Ftoken_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftoken_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -427,7 +427,7 @@ loop:\n \t\tif tt.golden != \"\" {\n \t\t\tfor i, s := range strings.Split(tt.golden, \"$\") {\n \t\t\t\tif z.Next() == ErrorToken {\n-\t\t\t\t\tt.Errorf(\"%s token %d: want %q got error %v\", tt.desc, i, s, z.Error())\n+\t\t\t\t\tt.Errorf(\"%s token %d: want %q got error %v\", tt.desc, i, s, z.Err())\n \t\t\t\t\tcontinue loop\n \t\t\t\t}\n \t\t\t\tactual := z.Token().String()\n@@ -438,8 +438,8 @@ loop:\n \t\t\t}\n \t\t}\n \t\tz.Next()\n-\t\tif z.Error() != io.EOF {\n-\t\t\tt.Errorf(\"%s: want EOF got %q\", tt.desc, z.Error())\n+\t\tif z.Err() != io.EOF {\n+\t\t\tt.Errorf(\"%s: want EOF got %q\", tt.desc, z.Err())\n \t\t}\n \t}\n }\n@@ -543,8 +543,8 @@ loop:\n \t\ttt := z.Next()\n \t\tswitch tt {\n \t\tcase ErrorToken:\n-\t\t\tif z.Error() != io.EOF {\n-\t\t\t\tt.Error(z.Error())\n+\t\t\tif z.Err() != io.EOF {\n+\t\t\t\tt.Error(z.Err())\n \t\t\t}\n \t\t\tbreak loop\n \t\tcase TextToken:"}, {"sha": "b85feea3aebbc2d2bb5fc867fffb17f9b02a0dff", "filename": "libgo/go/http/dump.go", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/374280238f934fa851273e2ee16ba53be890c6b8/libgo%2Fgo%2Fhttp%2Fdump.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/374280238f934fa851273e2ee16ba53be890c6b8/libgo%2Fgo%2Fhttp%2Fdump.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhttp%2Fdump.go?ref=374280238f934fa851273e2ee16ba53be890c6b8", "patch": "@@ -1,77 +0,0 @@\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package http\n-\n-import (\n-\t\"bytes\"\n-\t\"io\"\n-\t\"io/ioutil\"\n-)\n-\n-// One of the copies, say from b to r2, could be avoided by using a more\n-// elaborate trick where the other copy is made during Request/Response.Write.\n-// This would complicate things too much, given that these functions are for\n-// debugging only.\n-func drainBody(b io.ReadCloser) (r1, r2 io.ReadCloser, err error) {\n-\tvar buf bytes.Buffer\n-\tif _, err = buf.ReadFrom(b); err != nil {\n-\t\treturn nil, nil, err\n-\t}\n-\tif err = b.Close(); err != nil {\n-\t\treturn nil, nil, err\n-\t}\n-\treturn ioutil.NopCloser(&buf), ioutil.NopCloser(bytes.NewBuffer(buf.Bytes())), nil\n-}\n-\n-// DumpRequest returns the wire representation of req,\n-// optionally including the request body, for debugging.\n-// DumpRequest is semantically a no-op, but in order to\n-// dump the body, it reads the body data into memory and\n-// changes req.Body to refer to the in-memory copy.\n-// The documentation for Request.Write details which fields\n-// of req are used.\n-func DumpRequest(req *Request, body bool) (dump []byte, err error) {\n-\tvar b bytes.Buffer\n-\tsave := req.Body\n-\tif !body || req.Body == nil {\n-\t\treq.Body = nil\n-\t} else {\n-\t\tsave, req.Body, err = drainBody(req.Body)\n-\t\tif err != nil {\n-\t\t\treturn\n-\t\t}\n-\t}\n-\terr = req.dumpWrite(&b)\n-\treq.Body = save\n-\tif err != nil {\n-\t\treturn\n-\t}\n-\tdump = b.Bytes()\n-\treturn\n-}\n-\n-// DumpResponse is like DumpRequest but dumps a response.\n-func DumpResponse(resp *Response, body bool) (dump []byte, err error) {\n-\tvar b bytes.Buffer\n-\tsave := resp.Body\n-\tsavecl := resp.ContentLength\n-\tif !body || resp.Body == nil {\n-\t\tresp.Body = nil\n-\t\tresp.ContentLength = 0\n-\t} else {\n-\t\tsave, resp.Body, err = drainBody(resp.Body)\n-\t\tif err != nil {\n-\t\t\treturn\n-\t\t}\n-\t}\n-\terr = resp.Write(&b)\n-\tresp.Body = save\n-\tresp.ContentLength = savecl\n-\tif err != nil {\n-\t\treturn\n-\t}\n-\tdump = b.Bytes()\n-\treturn\n-}"}, {"sha": "58bd7812ffd0dd7f28cbba820249b232dd0b3ac3", "filename": "libgo/go/image/bmp/reader.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fimage%2Fbmp%2Freader.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fimage%2Fbmp%2Freader.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fbmp%2Freader.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -9,8 +9,8 @@ package bmp\n \n import (\n \t\"errors\"\n-\t\"image/color\"\n \t\"image\"\n+\t\"image/color\"\n \t\"io\"\n )\n "}, {"sha": "28e87321361618198a8efc04fa6dc8fd489bc614", "filename": "libgo/go/image/jpeg/writer_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fimage%2Fjpeg%2Fwriter_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fimage%2Fjpeg%2Fwriter_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fjpeg%2Fwriter_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -10,7 +10,7 @@ import (\n \t\"image/color\"\n \t\"image/png\"\n \t\"io/ioutil\"\n-\t\"rand\"\n+\t\"math/rand\"\n \t\"os\"\n \t\"testing\"\n )"}, {"sha": "df3e449d322e4bd2e29d78d6a3d355028e330113", "filename": "libgo/go/index/suffixarray/suffixarray_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Findex%2Fsuffixarray%2Fsuffixarray_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Findex%2Fsuffixarray%2Fsuffixarray_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Findex%2Fsuffixarray%2Fsuffixarray_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -6,7 +6,7 @@ package suffixarray\n \n import (\n \t\"bytes\"\n-\t\"rand\"\n+\t\"math/rand\"\n \t\"regexp\"\n \t\"sort\"\n \t\"strings\""}, {"sha": "0de5cc312d02f24544dfd20d04a64778fc92288e", "filename": "libgo/go/io/multi_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fio%2Fmulti_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fio%2Fmulti_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fio%2Fmulti_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,10 +5,10 @@\n package io_test\n \n import (\n-\t. \"io\"\n \t\"bytes\"\n \t\"crypto/sha1\"\n \t\"fmt\"\n+\t. \"io\"\n \t\"strings\"\n \t\"testing\"\n )"}, {"sha": "b5368af53197b4844913997f86eda8fcfc1ade6b", "filename": "libgo/go/log/log.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Flog%2Flog.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Flog%2Flog.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Flog%2Flog.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -16,10 +16,10 @@ import (\n \t\"bytes\"\n \t\"fmt\"\n \t\"io\"\n-\t\"runtime\"\n \t\"os\"\n-\t\"time\"\n+\t\"runtime\"\n \t\"sync\"\n+\t\"time\"\n )\n \n // These flags define which text to prefix to each log entry generated by the Logger."}, {"sha": "26a2f736b174a636e07a6fb5648a474fb4551159", "filename": "libgo/go/log/syslog/syslog.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/syslog/syslog.go"}, {"sha": "f49b9ffcb1c27040865f374c9ac1b375e7e51a21", "filename": "libgo/go/log/syslog/syslog_c.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_c.c?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/syslog/syslog_c.c"}, {"sha": "fb98ad780604f1b3ed4ecde3cee63f250de61579", "filename": "libgo/go/log/syslog/syslog_libc.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_libc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_libc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_libc.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/syslog/syslog_libc.go"}, {"sha": "5c0b3e0c4e2b5d947173750def484d80439a9171", "filename": "libgo/go/log/syslog/syslog_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/syslog/syslog_test.go"}, {"sha": "b1c929ad2fe0cfa79ff59d2da1a52bdfd49796f9", "filename": "libgo/go/log/syslog/syslog_unix.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Flog%2Fsyslog%2Fsyslog_unix.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/syslog/syslog_unix.go"}, {"sha": "7e63023a1c40d71bfbe0c440b89c56fff8a69d89", "filename": "libgo/go/math/all_test.go", "status": "modified", "additions": 51, "deletions": 21, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fall_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fall_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fall_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -7,7 +7,6 @@ package math_test\n import (\n \t\"fmt\"\n \t. \"math\"\n-\t\"runtime\"\n \t\"testing\"\n )\n \n@@ -160,6 +159,19 @@ var cos = []float64{\n \t-2.517729313893103197176091e-01,\n \t-7.39241351595676573201918e-01,\n }\n+// Results for 100000 * Pi + vf[i]\n+var cosLarge = []float64{\n+\t2.634752141185559426744e-01,\n+\t1.14855126055543100712e-01,\n+\t9.61912973266488928113e-01,\n+\t2.9381411499556122552e-01,\n+\t-9.777138189880161924641e-01,\n+\t-9.76930413445147608049e-01,\n+\t4.940088097314976789841e-01,\n+\t-9.15658690217517835002e-01,\n+\t-2.51772931436786954751e-01,\n+\t-7.3924135157173099849e-01,\n+}\n var cosh = []float64{\n \t7.2668796942212842775517446e+01,\n \t1.1479413465659254502011135e+03,\n@@ -502,6 +514,19 @@ var sin = []float64{\n \t9.6778633541687993721617774e-01,\n \t-6.734405869050344734943028e-01,\n }\n+// Results for 100000 * Pi + vf[i]\n+var sinLarge = []float64{\n+\t-9.646661658548936063912e-01,\n+\t9.933822527198506903752e-01,\n+\t-2.7335587036246899796e-01,\n+\t9.55862576853689321268e-01,\n+\t-2.099421066862688873691e-01,\n+\t2.13557878070308981163e-01,\n+\t-8.694568970959221300497e-01,\n+\t4.01956668098863248917e-01,\n+\t9.67786335404528727927e-01,\n+\t-6.7344058693131973066e-01,\n+}\n var sinh = []float64{\n \t7.2661916084208532301448439e+01,\n \t1.1479409110035194500526446e+03,\n@@ -538,6 +563,19 @@ var tan = []float64{\n \t-3.843885560201130679995041e+00,\n \t9.10988793377685105753416e-01,\n }\n+// Results for 100000 * Pi + vf[i]\n+var tanLarge = []float64{\n+\t-3.66131656475596512705e+00,\n+\t8.6490023287202547927e+00,\n+\t-2.841794195104782406e-01,\n+\t3.2532901861033120983e+00,\n+\t2.14727564046880001365e-01,\n+\t-2.18600910700688062874e-01,\n+\t-1.760002817699722747043e+00,\n+\t-4.38980891453536115952e-01,\n+\t-3.84388555942723509071e+00,\n+\t9.1098879344275101051e-01,\n+}\n var tanh = []float64{\n \t9.9990531206936338549262119e-01,\n \t9.9999962057085294197613294e-01,\n@@ -2247,7 +2285,7 @@ func TestSqrt(t *testing.T) {\n \n func TestTan(t *testing.T) {\n \tfor i := 0; i < len(vf); i++ {\n-\t\tif f := Tan(vf[i]); !close(tan[i], f) {\n+\t\tif f := Tan(vf[i]); !veryclose(tan[i], f) {\n \t\t\tt.Errorf(\"Tan(%g) = %g, want %g\", vf[i], f, tan[i])\n \t\t}\n \t}\n@@ -2257,16 +2295,6 @@ func TestTan(t *testing.T) {\n \t\t\tt.Errorf(\"Tan(%g) = %g, want %g\", vfsinSC[i], f, sinSC[i])\n \t\t}\n \t}\n-\n-\t// Make sure portable Tan(Pi/2) doesn't panic (it used to).\n-\t// The portable implementation returns NaN.\n-\t// Assembly implementations might not,\n-\t// because Pi/2 is not exactly representable.\n-\tif runtime.GOARCH != \"386\" {\n-\t\tif f := Tan(Pi / 2); !alike(f, NaN()) {\n-\t\t\tt.Errorf(\"Tan(%g) = %g, want %g\", Pi/2, f, NaN())\n-\t\t}\n-\t}\n }\n \n func TestTanh(t *testing.T) {\n@@ -2344,13 +2372,15 @@ func TestYn(t *testing.T) {\n }\n \n // Check that math functions of high angle values\n-// return similar results to low angle values\n+// return accurate results. [Since (vf[i] + large) - large != vf[i],\n+// testing for Trig(vf[i] + large) == Trig(vf[i]), where large is\n+// a multiple of 2*Pi, is misleading.]\n func TestLargeCos(t *testing.T) {\n \tlarge := float64(100000 * Pi)\n \tfor i := 0; i < len(vf); i++ {\n-\t\tf1 := Cos(vf[i])\n+\t\tf1 := cosLarge[i]\n \t\tf2 := Cos(vf[i] + large)\n-\t\tif !kindaclose(f1, f2) {\n+\t\tif !close(f1, f2) {\n \t\t\tt.Errorf(\"Cos(%g) = %g, want %g\", vf[i]+large, f2, f1)\n \t\t}\n \t}\n@@ -2359,9 +2389,9 @@ func TestLargeCos(t *testing.T) {\n func TestLargeSin(t *testing.T) {\n \tlarge := float64(100000 * Pi)\n \tfor i := 0; i < len(vf); i++ {\n-\t\tf1 := Sin(vf[i])\n+\t\tf1 := sinLarge[i]\n \t\tf2 := Sin(vf[i] + large)\n-\t\tif !kindaclose(f1, f2) {\n+\t\tif !close(f1, f2) {\n \t\t\tt.Errorf(\"Sin(%g) = %g, want %g\", vf[i]+large, f2, f1)\n \t\t}\n \t}\n@@ -2370,9 +2400,9 @@ func TestLargeSin(t *testing.T) {\n func TestLargeSincos(t *testing.T) {\n \tlarge := float64(100000 * Pi)\n \tfor i := 0; i < len(vf); i++ {\n-\t\tf1, g1 := Sincos(vf[i])\n+\t\tf1, g1 := sinLarge[i], cosLarge[i]\n \t\tf2, g2 := Sincos(vf[i] + large)\n-\t\tif !kindaclose(f1, f2) || !kindaclose(g1, g2) {\n+\t\tif !close(f1, f2) || !close(g1, g2) {\n \t\t\tt.Errorf(\"Sincos(%g) = %g, %g, want %g, %g\", vf[i]+large, f2, g2, f1, g1)\n \t\t}\n \t}\n@@ -2381,9 +2411,9 @@ func TestLargeSincos(t *testing.T) {\n func TestLargeTan(t *testing.T) {\n \tlarge := float64(100000 * Pi)\n \tfor i := 0; i < len(vf); i++ {\n-\t\tf1 := Tan(vf[i])\n+\t\tf1 := tanLarge[i]\n \t\tf2 := Tan(vf[i] + large)\n-\t\tif !kindaclose(f1, f2) {\n+\t\tif !close(f1, f2) {\n \t\t\tt.Errorf(\"Tan(%g) = %g, want %g\", vf[i]+large, f2, f1)\n \t\t}\n \t}"}, {"sha": "242bd1e8cc42d66c6cd28e2bee93bbb16f728375", "filename": "libgo/go/math/big/arith.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fbig%2Farith.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fbig%2Farith.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fbig%2Farith.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/big/arith.go"}, {"sha": "95fcd8b94bed8208cd7bac115e3d970eeb951ae7", "filename": "libgo/go/math/big/arith_decl.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fbig%2Farith_decl.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fbig%2Farith_decl.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fbig%2Farith_decl.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/big/arith_decl.go"}, {"sha": "b6c56c39ef4756a65ec1dbee6f76aec203c3e498", "filename": "libgo/go/math/big/arith_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fbig%2Farith_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fbig%2Farith_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fbig%2Farith_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/big/arith_test.go"}, {"sha": "1cd93b1052bd1b2e0561f89b3be3f182cc471f58", "filename": "libgo/go/math/big/calibrate_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fbig%2Fcalibrate_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fbig%2Fcalibrate_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fbig%2Fcalibrate_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/big/calibrate_test.go"}, {"sha": "1a84341b3c0b63bfa7040c5631c2af9c8670578a", "filename": "libgo/go/math/big/hilbert_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fbig%2Fhilbert_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fbig%2Fhilbert_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fbig%2Fhilbert_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/big/hilbert_test.go"}, {"sha": "533a97f7495012ff6a147695d19b02c25fa2cd61", "filename": "libgo/go/math/big/int.go", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fbig%2Fint.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fbig%2Fint.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fbig%2Fint.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -10,7 +10,7 @@ import (\n \t\"errors\"\n \t\"fmt\"\n \t\"io\"\n-\t\"rand\"\n+\t\"math/rand\"\n \t\"strings\"\n )\n \n@@ -516,7 +516,7 @@ func (z *Int) SetString(s string, base int) (*Int, bool) {\n \tif err != io.EOF {\n \t\treturn nil, false\n \t}\n-\treturn z, true // err == os.EOF => scan consumed all of s\n+\treturn z, true // err == io.EOF => scan consumed all of s\n }\n \n // SetBytes interprets buf as the bytes of a big-endian unsigned", "previous_filename": "libgo/go/big/int.go"}, {"sha": "163c662b0bbdf81bdab8b0d2b2906beffce61614", "filename": "libgo/go/math/big/int_test.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fbig%2Fint_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fbig%2Fint_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fbig%2Fint_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -6,9 +6,9 @@ package big\n \n import (\n \t\"bytes\"\n+\t\"encoding/gob\"\n \t\"encoding/hex\"\n \t\"fmt\"\n-\t\"gob\"\n \t\"testing\"\n \t\"testing/quick\"\n )", "previous_filename": "libgo/go/big/int_test.go"}, {"sha": "3fa41e7565f3114a72fcfb0cf0dbe5baecf70d03", "filename": "libgo/go/math/big/nat.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fbig%2Fnat.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fbig%2Fnat.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fbig%2Fnat.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -21,7 +21,7 @@ package big\n import (\n \t\"errors\"\n \t\"io\"\n-\t\"rand\"\n+\t\"math/rand\"\n )\n \n // An unsigned integer x of the form", "previous_filename": "libgo/go/big/nat.go"}, {"sha": "041a6c4a255f884163bb8e267d70ba6535252f03", "filename": "libgo/go/math/big/nat_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fbig%2Fnat_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fbig%2Fnat_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fbig%2Fnat_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/big/nat_test.go"}, {"sha": "3a0add3236361df14a4806a8b2970ef203102ad9", "filename": "libgo/go/math/big/rat.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fbig%2Frat.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fbig%2Frat.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fbig%2Frat.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/big/rat.go"}, {"sha": "f7f31ae1a2024d01b21ca5d548b0db0dfd7a3857", "filename": "libgo/go/math/big/rat_test.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fbig%2Frat_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fbig%2Frat_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fbig%2Frat_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -6,8 +6,8 @@ package big\n \n import (\n \t\"bytes\"\n+\t\"encoding/gob\"\n \t\"fmt\"\n-\t\"gob\"\n \t\"testing\"\n )\n ", "previous_filename": "libgo/go/big/rat_test.go"}, {"sha": "f3cd1073ed27a1991839c0216e1432921b7ca4c2", "filename": "libgo/go/math/cmplx/abs.go", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Fabs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Fabs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fcmplx%2Fabs.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,9 +2,9 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// Package cmath provides basic constants and mathematical functions for\n+// Package cmplx provides basic constants and mathematical functions for\n // complex numbers.\n-package cmath\n+package cmplx\n \n import \"math\"\n ", "previous_filename": "libgo/go/cmath/abs.go"}, {"sha": "61880a257d49d340616f6427f5509ec1ad3b6faf", "filename": "libgo/go/math/cmplx/asin.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Fasin.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Fasin.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fcmplx%2Fasin.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package cmath\n+package cmplx\n \n import \"math\"\n ", "previous_filename": "libgo/go/cmath/asin.go"}, {"sha": "610ca8cebb2fca06ecb7755a84006c6b0314eb42", "filename": "libgo/go/math/cmplx/cmath_test.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Fcmath_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Fcmath_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fcmplx%2Fcmath_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package cmath\n+package cmplx\n \n import (\n \t\"math\"", "previous_filename": "libgo/go/cmath/cmath_test.go"}, {"sha": "34a4277c11746dcdd80b4edf5185ec3daf10c06a", "filename": "libgo/go/math/cmplx/conj.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Fconj.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Fconj.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fcmplx%2Fconj.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package cmath\n+package cmplx\n \n // Conj returns the complex conjugate of x.\n func Conj(x complex128) complex128 { return complex(real(x), -imag(x)) }", "previous_filename": "libgo/go/cmath/conj.go"}, {"sha": "485ed2c78d9a56b605e210d3981c2c703ca28fc6", "filename": "libgo/go/math/cmplx/exp.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Fexp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Fexp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fcmplx%2Fexp.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package cmath\n+package cmplx\n \n import \"math\"\n ", "previous_filename": "libgo/go/cmath/exp.go"}, {"sha": "d5a65b44b320c80da1500a4444907d4e2521c5a1", "filename": "libgo/go/math/cmplx/isinf.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Fisinf.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Fisinf.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fcmplx%2Fisinf.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package cmath\n+package cmplx\n \n import \"math\"\n ", "previous_filename": "libgo/go/cmath/isinf.go"}, {"sha": "05d0cce6335efaef250b2aa94713c442ecb2c08d", "filename": "libgo/go/math/cmplx/isnan.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Fisnan.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Fisnan.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fcmplx%2Fisnan.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package cmath\n+package cmplx\n \n import \"math\"\n ", "previous_filename": "libgo/go/cmath/isnan.go"}, {"sha": "881a064d8b8b1bf43bddfb5b1813bbd79aa67850", "filename": "libgo/go/math/cmplx/log.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Flog.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Flog.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fcmplx%2Flog.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package cmath\n+package cmplx\n \n import \"math\"\n ", "previous_filename": "libgo/go/cmath/log.go"}, {"sha": "03cece8a570060aef8c1a0143a486f60c2fe6a86", "filename": "libgo/go/math/cmplx/phase.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Fphase.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Fphase.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fcmplx%2Fphase.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package cmath\n+package cmplx\n \n import \"math\"\n ", "previous_filename": "libgo/go/cmath/phase.go"}, {"sha": "9b192bc6240b4a79c64a9313dd778e9026a227c9", "filename": "libgo/go/math/cmplx/polar.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Fpolar.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Fpolar.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fcmplx%2Fpolar.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package cmath\n+package cmplx\n \n // Polar returns the absolute value r and phase \u03b8 of x,\n // such that x = r * e**\u03b8i.", "previous_filename": "libgo/go/cmath/polar.go"}, {"sha": "4dbc58398b4c8fcc0eda62e2e5282b292f40b375", "filename": "libgo/go/math/cmplx/pow.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Fpow.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Fpow.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fcmplx%2Fpow.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package cmath\n+package cmplx\n \n import \"math\"\n ", "previous_filename": "libgo/go/cmath/pow.go"}, {"sha": "bf94d787ea402966effccd155f49dd667355eb8e", "filename": "libgo/go/math/cmplx/rect.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Frect.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Frect.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fcmplx%2Frect.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package cmath\n+package cmplx\n \n import \"math\"\n ", "previous_filename": "libgo/go/cmath/rect.go"}, {"sha": "2c57536edfc8312c7f10c635484a0496de0398f0", "filename": "libgo/go/math/cmplx/sin.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Fsin.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Fsin.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fcmplx%2Fsin.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package cmath\n+package cmplx\n \n import \"math\"\n ", "previous_filename": "libgo/go/cmath/sin.go"}, {"sha": "179b5396abcc4bca5ad635ef0c098b7f25f04284", "filename": "libgo/go/math/cmplx/sqrt.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Fsqrt.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Fsqrt.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fcmplx%2Fsqrt.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package cmath\n+package cmplx\n \n import \"math\"\n ", "previous_filename": "libgo/go/cmath/sqrt.go"}, {"sha": "9485315d8d00dd45abbae5fc9ef4c4b9fe6e1154", "filename": "libgo/go/math/cmplx/tan.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Ftan.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fcmplx%2Ftan.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fcmplx%2Ftan.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package cmath\n+package cmplx\n \n import \"math\"\n ", "previous_filename": "libgo/go/cmath/tan.go"}, {"sha": "e117158fee2e28822e1abee8803c3117a865f5d0", "filename": "libgo/go/math/gamma.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fgamma.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Fgamma.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fgamma.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -63,7 +63,7 @@ package math\n //   Stephen L. Moshier\n //   moshier@na-net.ornl.gov\n \n-var _P = []float64{\n+var _P = [...]float64{\n \t1.60119522476751861407e-04,\n \t1.19135147006586384913e-03,\n \t1.04213797561761569935e-02,\n@@ -72,7 +72,7 @@ var _P = []float64{\n \t4.94214826801497100753e-01,\n \t9.99999999999999996796e-01,\n }\n-var _Q = []float64{\n+var _Q = [...]float64{\n \t-2.31581873324120129819e-05,\n \t5.39605580493303397842e-04,\n \t-4.45641913851797240494e-03,\n@@ -82,7 +82,7 @@ var _Q = []float64{\n \t7.14304917030273074085e-02,\n \t1.00000000000000000320e+00,\n }\n-var _S = []float64{\n+var _S = [...]float64{\n \t7.87311395793093628397e-04,\n \t-2.29549961613378126380e-04,\n \t-2.68132617805781232825e-03,"}, {"sha": "85da495219d5126851690656638207c696c06885", "filename": "libgo/go/math/rand/exp.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Frand%2Fexp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Frand%2Fexp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Frand%2Fexp.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/rand/exp.go"}, {"sha": "9ab46db9f53ce4f1856e5efbd58f5cab2d679ec4", "filename": "libgo/go/math/rand/normal.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Frand%2Fnormal.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Frand%2Fnormal.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Frand%2Fnormal.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/rand/normal.go"}, {"sha": "459aed1db4fe6768e5ebae5b6a1bd2fff1d08f0d", "filename": "libgo/go/math/rand/rand.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Frand%2Frand.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Frand%2Frand.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Frand%2Frand.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/rand/rand.go"}, {"sha": "76215a978afb05fbcb585d977b5a69dd5ff82acb", "filename": "libgo/go/math/rand/rand_test.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Frand%2Frand_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Frand%2Frand_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Frand%2Frand_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -6,8 +6,8 @@ package rand\n \n import (\n \t\"errors\"\n-\t\"math\"\n \t\"fmt\"\n+\t\"math\"\n \t\"testing\"\n )\n ", "previous_filename": "libgo/go/rand/rand_test.go"}, {"sha": "947c49f0f26c8f3e5c26547d32eddb7f9e8fd2b7", "filename": "libgo/go/math/rand/rng.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Frand%2Frng.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Frand%2Frng.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Frand%2Frng.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/rand/rng.go"}, {"sha": "38e8ec5162acecaacc906744226f134ea53402b5", "filename": "libgo/go/math/rand/zipf.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Frand%2Fzipf.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Frand%2Fzipf.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Frand%2Fzipf.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/rand/zipf.go"}, {"sha": "739ee80f76f986e7ebf5f3605203ccfa07242419", "filename": "libgo/go/math/tan.go", "status": "modified", "additions": 103, "deletions": 37, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Ftan.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmath%2Ftan.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Ftan.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -1,64 +1,130 @@\n-// Copyright 2009 The Go Authors. All rights reserved.\n+// Copyright 2011 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n package math\n \n /*\n-\tFloating point tangent.\n+\tFloating-point tangent.\n */\n \n+// The original C code, the long comment, and the constants\n+// below were from http://netlib.sandia.gov/cephes/cmath/sin.c,\n+// available from http://www.netlib.org/cephes/cmath.tgz.\n+// The go code is a simplified version of the original C.\n+//\n+//      tan.c\n+//\n+//      Circular tangent\n+//\n+// SYNOPSIS:\n+//\n+// double x, y, tan();\n+// y = tan( x );\n+//\n+// DESCRIPTION:\n+//\n+// Returns the circular tangent of the radian argument x.\n+//\n+// Range reduction is modulo pi/4.  A rational function\n+//       x + x**3 P(x**2)/Q(x**2)\n+// is employed in the basic interval [0, pi/4].\n+//\n+// ACCURACY:\n+//                      Relative error:\n+// arithmetic   domain     # trials      peak         rms\n+//    DEC      +-1.07e9      44000      4.1e-17     1.0e-17\n+//    IEEE     +-1.07e9      30000      2.9e-16     8.1e-17\n+//\n+// Partial loss of accuracy begins to occur at x = 2**30 = 1.074e9.  The loss\n+// is not gradual, but jumps suddenly to about 1 part in 10e7.  Results may\n+// be meaningless for x > 2**49 = 5.6e14.\n+// [Accuracy loss statement from sin.go comments.]\n+//\n+// Cephes Math Library Release 2.8:  June, 2000\n+// Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier\n+//\n+// The readme file at http://netlib.sandia.gov/cephes/ says:\n+//    Some software in this archive may be from the book _Methods and\n+// Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster\n+// International, 1989) or from the Cephes Mathematical Library, a\n+// commercial product. In either event, it is copyrighted by the author.\n+// What you see here may be used freely but it comes with no support or\n+// guarantee.\n+//\n+//   The two known misprints in the book are repaired here in the\n+// source listings for the gamma function and the incomplete beta\n+// integral.\n+//\n+//   Stephen L. Moshier\n+//   moshier@na-net.ornl.gov\n+\n+// tan coefficients\n+var _tanP = [...]float64{\n+\t-1.30936939181383777646E4, // 0xc0c992d8d24f3f38\n+\t1.15351664838587416140E6,  // 0x413199eca5fc9ddd\n+\t-1.79565251976484877988E7, // 0xc1711fead3299176\n+}\n+var _tanQ = [...]float64{\n+\t1.00000000000000000000E0,\n+\t1.36812963470692954678E4,  //0x40cab8a5eeb36572\n+\t-1.32089234440210967447E6, //0xc13427bc582abc96\n+\t2.50083801823357915839E7,  //0x4177d98fc2ead8ef\n+\t-5.38695755929454629881E7, //0xc189afe03cbe5a31\n+}\n+\n // Tan returns the tangent of x.\n+//\n+// Special conditions are:\n+//\tTan(\u00b10) = \u00b10\n+//\tTan(\u00b1Inf) = NaN\n+//\tTan(NaN) = NaN\n func Tan(x float64) float64 {\n-\t// Coefficients are #4285 from Hart & Cheney. (19.74D)\n \tconst (\n-\t\tP0 = -.1306820264754825668269611177e+5\n-\t\tP1 = .1055970901714953193602353981e+4\n-\t\tP2 = -.1550685653483266376941705728e+2\n-\t\tP3 = .3422554387241003435328470489e-1\n-\t\tP4 = .3386638642677172096076369e-4\n-\t\tQ0 = -.1663895238947119001851464661e+5\n-\t\tQ1 = .4765751362916483698926655581e+4\n-\t\tQ2 = -.1555033164031709966900124574e+3\n+\t\tPI4A = 7.85398125648498535156E-1                             // 0x3fe921fb40000000, Pi/4 split into three parts\n+\t\tPI4B = 3.77489470793079817668E-8                             // 0x3e64442d00000000,\n+\t\tPI4C = 2.69515142907905952645E-15                            // 0x3ce8469898cc5170,\n+\t\tM4PI = 1.273239544735162542821171882678754627704620361328125 // 4/pi\n \t)\n+\t// TODO(rsc): Remove manual inlining of IsNaN, IsInf\n+\t// when compiler does it for us\n+\t// special cases\n+\tswitch {\n+\tcase x == 0 || x != x: // x == 0 || IsNaN():\n+\t\treturn x // return \u00b10 || NaN()\n+\tcase x < -MaxFloat64 || x > MaxFloat64: // IsInf(x, 0):\n+\t\treturn NaN()\n+\t}\n \n-\tflag := false\n+\t// make argument positive but save the sign\n \tsign := false\n \tif x < 0 {\n \t\tx = -x\n \t\tsign = true\n \t}\n-\tx = x * (4 / Pi) /* overflow? */\n-\tvar e float64\n-\te, x = Modf(x)\n-\ti := int32(e)\n-\n-\tswitch i & 3 {\n-\tcase 1:\n-\t\tx = 1 - x\n-\t\tflag = true\n \n-\tcase 2:\n-\t\tsign = !sign\n-\t\tflag = true\n+\tj := int64(x * M4PI) // integer part of x/(Pi/4), as integer for tests on the phase angle\n+\ty := float64(j)      // integer part of x/(Pi/4), as float\n \n-\tcase 3:\n-\t\tx = 1 - x\n-\t\tsign = !sign\n+\t/* map zeros and singularities to origin */\n+\tif j&1 == 1 {\n+\t\tj += 1\n+\t\ty += 1\n \t}\n \n-\txsq := x * x\n-\ttemp := ((((P4*xsq+P3)*xsq+P2)*xsq+P1)*xsq + P0) * x\n-\ttemp = temp / (((xsq+Q2)*xsq+Q1)*xsq + Q0)\n+\tz := ((x - y*PI4A) - y*PI4B) - y*PI4C\n+\tzz := z * z\n \n-\tif flag {\n-\t\tif temp == 0 {\n-\t\t\treturn NaN()\n-\t\t}\n-\t\ttemp = 1 / temp\n+\tif zz > 1e-14 {\n+\t\ty = z + z*(zz*(((_tanP[0]*zz)+_tanP[1])*zz+_tanP[2])/((((zz+_tanQ[1])*zz+_tanQ[2])*zz+_tanQ[3])*zz+_tanQ[4]))\n+\t} else {\n+\t\ty = z\n+\t}\n+\tif j&2 == 2 {\n+\t\ty = -1 / y\n \t}\n \tif sign {\n-\t\ttemp = -temp\n+\t\ty = -y\n \t}\n-\treturn temp\n+\treturn y\n }"}, {"sha": "64a11e6d9d908848eaf1c10c7f33d8b6ebb0deaf", "filename": "libgo/go/mime/multipart/multipart.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmime%2Fmultipart%2Fmultipart.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmime%2Fmultipart%2Fmultipart.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmime%2Fmultipart%2Fmultipart.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -176,7 +176,7 @@ type Reader struct {\n }\n \n // NextPart returns the next part in the multipart or an error.\n-// When there are no more parts, the error os.EOF is returned.\n+// When there are no more parts, the error io.EOF is returned.\n func (mr *Reader) NextPart() (*Part, error) {\n \tif mr.currentPart != nil {\n \t\tmr.currentPart.Close()"}, {"sha": "89ff5e489efd6c90fc11555d984dedb9097e4f0e", "filename": "libgo/go/mime/multipart/multipart_test.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmime%2Fmultipart%2Fmultipart_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fmime%2Fmultipart%2Fmultipart_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmime%2Fmultipart%2Fmultipart_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -6,10 +6,10 @@ package multipart\n \n import (\n \t\"bytes\"\n+\t\"encoding/json\"\n \t\"fmt\"\n \t\"io\"\n \t\"io/ioutil\"\n-\t\"json\"\n \t\"strings\"\n \t\"testing\"\n )\n@@ -214,7 +214,7 @@ func testMultipart(t *testing.T, r io.Reader, onlyNewlines bool) {\n \t\tt.Error(\"Didn't expect a fifth part.\")\n \t}\n \tif err != io.EOF {\n-\t\tt.Errorf(\"On fifth part expected os.EOF; got %v\", err)\n+\t\tt.Errorf(\"On fifth part expected io.EOF; got %v\", err)\n \t}\n }\n \n@@ -259,7 +259,7 @@ func TestVariousTextLineEndings(t *testing.T) {\n \t\t\tt.Errorf(\"Unexpected part in test %d\", testNum)\n \t\t}\n \t\tif err != io.EOF {\n-\t\t\tt.Errorf(\"On test %d expected os.EOF; got %v\", testNum, err)\n+\t\t\tt.Errorf(\"On test %d expected io.EOF; got %v\", testNum, err)\n \t\t}\n \n \t}"}, {"sha": "f4ed8b87cc1322e19d857accafb112f4a71d0bde", "filename": "libgo/go/net/dnsclient.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fdnsclient.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fdnsclient.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fdnsclient.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -7,7 +7,7 @@ package net\n import (\n \t\"bytes\"\n \t\"fmt\"\n-\t\"rand\"\n+\t\"math/rand\"\n \t\"sort\"\n )\n "}, {"sha": "bab5f2a9b6e94f4eb1258c2c6fa17e0c82b058f9", "filename": "libgo/go/net/dnsclient_unix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fdnsclient_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fdnsclient_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fdnsclient_unix.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -17,7 +17,7 @@\n package net\n \n import (\n-\t\"rand\"\n+\t\"math/rand\"\n \t\"sync\"\n \t\"time\"\n )"}, {"sha": "e188cd4a25019a209b8c09383e519aab7c1f416a", "filename": "libgo/go/net/http/cgi/child.go", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fchild.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fchild.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fchild.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -12,14 +12,14 @@ import (\n \t\"crypto/tls\"\n \t\"errors\"\n \t\"fmt\"\n-\t\"http\"\n \t\"io\"\n \t\"io/ioutil\"\n \t\"net\"\n+\t\"net/http\"\n+\t\"net/url\"\n \t\"os\"\n \t\"strconv\"\n \t\"strings\"\n-\t\"url\"\n )\n \n // Request returns the HTTP request as represented in the current", "previous_filename": "libgo/go/http/cgi/child.go"}, {"sha": "ec53ab851baaeeab8bc871baad2bc31e02eb8dba", "filename": "libgo/go/net/http/cgi/child_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fchild_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fchild_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fchild_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/http/cgi/child_test.go"}, {"sha": "615d366aedc3d8c71d2aebca47e32abf2998e7e1", "filename": "libgo/go/net/http/cgi/host.go", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fhost.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fhost.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fhost.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -16,12 +16,12 @@ package cgi\n \n import (\n \t\"bufio\"\n-\t\"exec\"\n \t\"fmt\"\n-\t\"http\"\n \t\"io\"\n \t\"log\"\n+\t\"net/http\"\n \t\"os\"\n+\t\"os/exec\"\n \t\"path/filepath\"\n \t\"regexp\"\n \t\"runtime\"", "previous_filename": "libgo/go/http/cgi/host.go"}, {"sha": "2bc913a1696d585fd861e94f93d31b4daaadc42d", "filename": "libgo/go/net/http/cgi/host_test.go", "status": "renamed", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fhost_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fhost_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fhost_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -8,19 +8,19 @@ package cgi\n \n import (\n \t\"bufio\"\n-\t\"exec\"\n \t\"fmt\"\n-\t\"http\"\n-\t\"http/httptest\"\n \t\"io\"\n-\t\"os\"\n \t\"net\"\n+\t\"net/http\"\n+\t\"net/http/httptest\"\n+\t\"os\"\n+\t\"os/exec\"\n \t\"path/filepath\"\n+\t\"runtime\"\n \t\"strconv\"\n \t\"strings\"\n \t\"testing\"\n \t\"time\"\n-\t\"runtime\"\n )\n \n func newRequest(httpreq string) *http.Request {\n@@ -374,8 +374,6 @@ func TestCopyError(t *testing.T) {\n \t}\n }\n \n-/* This test doesn't work in gccgo's testing environment.\n-\n func TestDirUnix(t *testing.T) {\n \tif skipTest(t) || runtime.GOOS == \"windows\" {\n \t\treturn\n@@ -398,14 +396,13 @@ func TestDirUnix(t *testing.T) {\n \t\tPath: \"testdata/test.cgi\",\n \t\tRoot: \"/test.cgi\",\n \t}\n+\tabswd, _ := filepath.EvalSymlinks(cwd)\n \texpectedMap = map[string]string{\n-\t\t\"cwd\": cwd,\n+\t\t\"cwd\": abswd,\n \t}\n \trunCgiTest(t, h, \"GET /test.cgi HTTP/1.0\\nHost: example.com\\n\\n\", expectedMap)\n }\n \n-*/\n-\n func TestDirWindows(t *testing.T) {\n \tif skipTest(t) || runtime.GOOS != \"windows\" {\n \t\treturn", "previous_filename": "libgo/go/http/cgi/host_test.go"}, {"sha": "1a44df2040115ff8a935c03d16862ccd7f0f6e88", "filename": "libgo/go/net/http/cgi/matryoshka_test.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fmatryoshka_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fmatryoshka_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fmatryoshka_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -10,7 +10,7 @@ package cgi\n \n import (\n \t\"fmt\"\n-\t\"http\"\n+\t\"net/http\"\n \t\"os\"\n \t\"testing\"\n )", "previous_filename": "libgo/go/http/cgi/matryoshka_test.go"}, {"sha": "b46b1330f38c309e8dc92823756da6b19c65dc2b", "filename": "libgo/go/net/http/cgi/testdata/test.cgi", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Ftestdata%2Ftest.cgi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Ftestdata%2Ftest.cgi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Ftestdata%2Ftest.cgi?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/http/cgi/testdata/test.cgi"}, {"sha": "b012dd18496c8e0f0d5dabccce865bf3d21a63fb", "filename": "libgo/go/net/http/chunked.go", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fchunked.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fchunked.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fchunked.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2009 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package http\n+\n+import (\n+\t\"bufio\"\n+\t\"io\"\n+\t\"strconv\"\n+)\n+\n+func newChunkedWriter(w io.Writer) io.WriteCloser {\n+\treturn &chunkedWriter{w}\n+}\n+\n+// Writing to ChunkedWriter translates to writing in HTTP chunked Transfer\n+// Encoding wire format to the underlying Wire writer.\n+type chunkedWriter struct {\n+\tWire io.Writer\n+}\n+\n+// Write the contents of data as one chunk to Wire.\n+// NOTE: Note that the corresponding chunk-writing procedure in Conn.Write has\n+// a bug since it does not check for success of io.WriteString\n+func (cw *chunkedWriter) Write(data []byte) (n int, err error) {\n+\n+\t// Don't send 0-length data. It looks like EOF for chunked encoding.\n+\tif len(data) == 0 {\n+\t\treturn 0, nil\n+\t}\n+\n+\thead := strconv.Itob(len(data), 16) + \"\\r\\n\"\n+\n+\tif _, err = io.WriteString(cw.Wire, head); err != nil {\n+\t\treturn 0, err\n+\t}\n+\tif n, err = cw.Wire.Write(data); err != nil {\n+\t\treturn\n+\t}\n+\tif n != len(data) {\n+\t\terr = io.ErrShortWrite\n+\t\treturn\n+\t}\n+\t_, err = io.WriteString(cw.Wire, \"\\r\\n\")\n+\n+\treturn\n+}\n+\n+func (cw *chunkedWriter) Close() error {\n+\t_, err := io.WriteString(cw.Wire, \"0\\r\\n\")\n+\treturn err\n+}\n+\n+func newChunkedReader(r *bufio.Reader) io.Reader {\n+\treturn &chunkedReader{r: r}\n+}"}, {"sha": "211ac44c58a9d92f5c4672d91d1029938acd7274", "filename": "libgo/go/net/http/client.go", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fclient.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fclient.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fclient.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -14,8 +14,8 @@ import (\n \t\"errors\"\n \t\"fmt\"\n \t\"io\"\n+\t\"net/url\"\n \t\"strings\"\n-\t\"url\"\n )\n \n // A Client is an HTTP client. Its zero value (DefaultClient) is a usable client\n@@ -143,7 +143,7 @@ func shouldRedirect(statusCode int) bool {\n //\n // Caller should close r.Body when done reading from it.\n //\n-// Get is a convenience wrapper around DefaultClient.Get.\n+// Get is a wrapper around DefaultClient.Get.\n func Get(url string) (r *Response, err error) {\n \treturn DefaultClient.Get(url)\n }", "previous_filename": "libgo/go/http/client.go"}, {"sha": "d224380298c86663060c0c27f5b735e4707b471c", "filename": "libgo/go/net/http/client_test.go", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fclient_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fclient_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fclient_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -10,15 +10,15 @@ import (\n \t\"crypto/tls\"\n \t\"errors\"\n \t\"fmt\"\n-\t. \"http\"\n-\t\"http/httptest\"\n \t\"io\"\n \t\"io/ioutil\"\n \t\"net\"\n+\t. \"net/http\"\n+\t\"net/http/httptest\"\n+\t\"net/url\"\n \t\"strconv\"\n \t\"strings\"\n \t\"testing\"\n-\t\"url\"\n )\n \n var robotsTxtHandler = HandlerFunc(func(w ResponseWriter, r *Request) {", "previous_filename": "libgo/go/http/client_test.go"}, {"sha": "69350143248540db7f7622754aa65dbafdb922be", "filename": "libgo/go/net/http/cookie.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fcookie.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fcookie.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fcookie.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/http/cookie.go"}, {"sha": "24adf2029817e16c77d8b5b2a98fadda0334af44", "filename": "libgo/go/net/http/cookie_test.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fcookie_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fcookie_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fcookie_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,8 +5,8 @@\n package http\n \n import (\n+\t\"encoding/json\"\n \t\"fmt\"\n-\t\"json\"\n \t\"reflect\"\n \t\"testing\"\n \t\"time\"", "previous_filename": "libgo/go/http/cookie_test.go"}, {"sha": "9c47ac7823fde5085337d172b9ee2502e96f7712", "filename": "libgo/go/net/http/doc.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fdoc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fdoc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fdoc.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/http/doc.go"}, {"sha": "3fe658641f8b4e546a4b7b95f5bbb21f1a5e8dd2", "filename": "libgo/go/net/http/export_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fexport_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fexport_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fexport_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/http/export_test.go"}, {"sha": "7b563951ccf202a4287b3ff376e40934e61c75d9", "filename": "libgo/go/net/http/fcgi/child.go", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ffcgi%2Fchild.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ffcgi%2Fchild.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ffcgi%2Fchild.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -8,10 +8,10 @@ package fcgi\n \n import (\n \t\"fmt\"\n-\t\"http\"\n-\t\"http/cgi\"\n \t\"io\"\n \t\"net\"\n+\t\"net/http\"\n+\t\"net/http/cgi\"\n \t\"os\"\n \t\"time\"\n )", "previous_filename": "libgo/go/http/fcgi/child.go"}, {"sha": "70cf781e228623aa23e904f344e5354030624b6e", "filename": "libgo/go/net/http/fcgi/fcgi.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ffcgi%2Ffcgi.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ffcgi%2Ffcgi.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ffcgi%2Ffcgi.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/http/fcgi/fcgi.go"}, {"sha": "e42f8efd65847a9555b35acdc8d8a70bd0a0d9d8", "filename": "libgo/go/net/http/fcgi/fcgi_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ffcgi%2Ffcgi_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ffcgi%2Ffcgi_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ffcgi%2Ffcgi_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/http/fcgi/fcgi_test.go"}, {"sha": "821787e0c4b2a2316fefde19db15c14feb5136c1", "filename": "libgo/go/net/http/filetransport.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ffiletransport.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ffiletransport.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ffiletransport.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/http/filetransport.go"}, {"sha": "265a3b903e94b975ded227d5f753678f7d883ffc", "filename": "libgo/go/net/http/filetransport_test.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ffiletransport_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ffiletransport_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ffiletransport_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,8 +5,8 @@\n package http_test\n \n import (\n-\t\"http\"\n \t\"io/ioutil\"\n+\t\"net/http\"\n \t\"path/filepath\"\n \t\"testing\"\n )", "previous_filename": "libgo/go/http/filetransport_test.go"}, {"sha": "5f91ff5cbf659122eb4faa80c213030818e7c20d", "filename": "libgo/go/net/http/fs.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ffs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ffs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ffs.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -17,7 +17,7 @@ import (\n \t\"strconv\"\n \t\"strings\"\n \t\"time\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n // A Dir implements http.FileSystem using the native file", "previous_filename": "libgo/go/http/fs.go"}, {"sha": "e1a784c1f6d191776824617c1c5b94160bb7e80b", "filename": "libgo/go/net/http/fs_test.go", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ffs_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ffs_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ffs_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -6,14 +6,14 @@ package http_test\n \n import (\n \t\"fmt\"\n-\t. \"http\"\n-\t\"http/httptest\"\n \t\"io/ioutil\"\n+\t. \"net/http\"\n+\t\"net/http/httptest\"\n+\t\"net/url\"\n \t\"os\"\n \t\"path/filepath\"\n \t\"strings\"\n \t\"testing\"\n-\t\"url\"\n )\n \n const (", "previous_filename": "libgo/go/http/fs_test.go"}, {"sha": "b107c312da782667fdfe8d627e88a3f44965fc34", "filename": "libgo/go/net/http/header.go", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fheader.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fheader.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fheader.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -30,8 +30,8 @@ func (h Header) Set(key, value string) {\n \n // Get gets the first value associated with the given key.\n // If there are no values associated with the key, Get returns \"\".\n-// Get is a convenience method.  For more complex queries,\n-// access the map directly.\n+// To access multiple values of a key, access the map directly\n+// with CanonicalHeaderKey.\n func (h Header) Get(key string) string {\n \treturn textproto.MIMEHeader(h).Get(key)\n }", "previous_filename": "libgo/go/http/header.go"}, {"sha": "ccdee8a97bdef352fc1f8b18b0be3bc7256c60ed", "filename": "libgo/go/net/http/header_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fheader_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fheader_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fheader_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/http/header_test.go"}, {"sha": "9aa0d510bd4d57906ee7d7d5357b545a1b172d70", "filename": "libgo/go/net/http/httptest/recorder.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fhttptest%2Frecorder.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fhttptest%2Frecorder.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fhttptest%2Frecorder.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -7,7 +7,7 @@ package httptest\n \n import (\n \t\"bytes\"\n-\t\"http\"\n+\t\"net/http\"\n )\n \n // ResponseRecorder is an implementation of http.ResponseWriter that", "previous_filename": "libgo/go/http/httptest/recorder.go"}, {"sha": "f09e826d9c9bbfdf8072ac48666fc3f2f7696322", "filename": "libgo/go/net/http/httptest/server.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fhttptest%2Fserver.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fhttptest%2Fserver.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fhttptest%2Fserver.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -11,8 +11,8 @@ import (\n \t\"crypto/tls\"\n \t\"flag\"\n \t\"fmt\"\n-\t\"http\"\n \t\"net\"\n+\t\"net/http\"\n \t\"os\"\n \t\"time\"\n )", "previous_filename": "libgo/go/http/httptest/server.go"}, {"sha": "34e47c796c19ce5afcd6a88dae29933c91f067aa", "filename": "libgo/go/net/http/httputil/chunked.go", "status": "renamed", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fchunked.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fchunked.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fchunked.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,13 +2,14 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package http\n+package httputil\n \n import (\n \t\"bufio\"\n \t\"io\"\n-\t\"log\"\n+\t\"net/http\"\n \t\"strconv\"\n+\t\"strings\"\n )\n \n // NewChunkedWriter returns a new writer that translates writes into HTTP\n@@ -21,9 +22,6 @@ import (\n // would result in double chunking or chunking with a Content-Length\n // length, both of which are wrong.\n func NewChunkedWriter(w io.Writer) io.WriteCloser {\n-\tif _, bad := w.(*response); bad {\n-\t\tlog.Printf(\"warning: using NewChunkedWriter in an http.Handler; expect corrupt output\")\n-\t}\n \treturn &chunkedWriter{w}\n }\n \n@@ -67,10 +65,20 @@ func (cw *chunkedWriter) Close() error {\n \n // NewChunkedReader returns a new reader that translates the data read from r\n // out of HTTP \"chunked\" format before returning it. \n-// The reader returns os.EOF when the final 0-length chunk is read.\n+// The reader returns io.EOF when the final 0-length chunk is read.\n //\n // NewChunkedReader is not needed by normal applications. The http package\n // automatically decodes chunking when reading response bodies.\n-func NewChunkedReader(r *bufio.Reader) io.Reader {\n-\treturn &chunkedReader{r: r}\n+func NewChunkedReader(r io.Reader) io.Reader {\n+\t// This is a bit of a hack so we don't have to copy chunkedReader into\n+\t// httputil.  It's a bit more complex than chunkedWriter, which is copied\n+\t// above.\n+\treq, err := http.ReadRequest(bufio.NewReader(io.MultiReader(\n+\t\tstrings.NewReader(\"POST / HTTP/1.1\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n\"),\n+\t\tr,\n+\t\tstrings.NewReader(\"\\r\\n\"))))\n+\tif err != nil {\n+\t\tpanic(\"bad fake request: \" + err.Error())\n+\t}\n+\treturn req.Body\n }", "previous_filename": "libgo/go/http/chunked.go"}, {"sha": "258d39b93cbdba259a03394ccf673e4b7aeb38e4", "filename": "libgo/go/net/http/httputil/chunked_test.go", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fchunked_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fchunked_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fchunked_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package httputil\n+\n+import (\n+\t\"bytes\"\n+\t\"io/ioutil\"\n+\t\"testing\"\n+)\n+\n+func TestChunk(t *testing.T) {\n+\tvar b bytes.Buffer\n+\n+\tw := NewChunkedWriter(&b)\n+\tconst chunk1 = \"hello, \"\n+\tconst chunk2 = \"world! 0123456789abcdef\"\n+\tw.Write([]byte(chunk1))\n+\tw.Write([]byte(chunk2))\n+\tw.Close()\n+\n+\tif g, e := b.String(), \"7\\r\\nhello, \\r\\n17\\r\\nworld! 0123456789abcdef\\r\\n0\\r\\n\"; g != e {\n+\t\tt.Fatalf(\"chunk writer wrote %q; want %q\", g, e)\n+\t}\n+\n+\tr := NewChunkedReader(&b)\n+\tdata, err := ioutil.ReadAll(r)\n+\tif err != nil {\n+\t\tt.Fatalf(\"ReadAll from NewChunkedReader: %v\", err)\n+\t}\n+\tif g, e := string(data), chunk1+chunk2; g != e {\n+\t\tt.Errorf(\"chunk reader read %q; want %q\", g, e)\n+\t}\n+}"}, {"sha": "31696aec86ed7b903c2a48f82a8514b1833608d9", "filename": "libgo/go/net/http/httputil/dump.go", "status": "added", "additions": 203, "deletions": 0, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fdump.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fdump.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fdump.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -0,0 +1,203 @@\n+// Copyright 2009 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package httputil\n+\n+import (\n+\t\"bytes\"\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"io\"\n+\t\"io/ioutil\"\n+\t\"net\"\n+\t\"net/http\"\n+\t\"strings\"\n+)\n+\n+// One of the copies, say from b to r2, could be avoided by using a more\n+// elaborate trick where the other copy is made during Request/Response.Write.\n+// This would complicate things too much, given that these functions are for\n+// debugging only.\n+func drainBody(b io.ReadCloser) (r1, r2 io.ReadCloser, err error) {\n+\tvar buf bytes.Buffer\n+\tif _, err = buf.ReadFrom(b); err != nil {\n+\t\treturn nil, nil, err\n+\t}\n+\tif err = b.Close(); err != nil {\n+\t\treturn nil, nil, err\n+\t}\n+\treturn ioutil.NopCloser(&buf), ioutil.NopCloser(bytes.NewBuffer(buf.Bytes())), nil\n+}\n+\n+// dumpConn is a net.Conn which writes to Writer and reads from Reader\n+type dumpConn struct {\n+\tio.Writer\n+\tio.Reader\n+}\n+\n+func (c *dumpConn) Close() error                     { return nil }\n+func (c *dumpConn) LocalAddr() net.Addr              { return nil }\n+func (c *dumpConn) RemoteAddr() net.Addr             { return nil }\n+func (c *dumpConn) SetTimeout(nsec int64) error      { return nil }\n+func (c *dumpConn) SetReadTimeout(nsec int64) error  { return nil }\n+func (c *dumpConn) SetWriteTimeout(nsec int64) error { return nil }\n+\n+// DumpRequestOut is like DumpRequest but includes\n+// headers that the standard http.Transport adds,\n+// such as User-Agent.\n+func DumpRequestOut(req *http.Request, body bool) (dump []byte, err error) {\n+\tsave := req.Body\n+\tif !body || req.Body == nil {\n+\t\treq.Body = nil\n+\t} else {\n+\t\tsave, req.Body, err = drainBody(req.Body)\n+\t\tif err != nil {\n+\t\t\treturn\n+\t\t}\n+\t}\n+\n+\tvar b bytes.Buffer\n+\tdialed := false\n+\tt := &http.Transport{\n+\t\tDial: func(net, addr string) (c net.Conn, err error) {\n+\t\t\tif dialed {\n+\t\t\t\treturn nil, errors.New(\"unexpected second dial\")\n+\t\t\t}\n+\t\t\tc = &dumpConn{\n+\t\t\t\tWriter: &b,\n+\t\t\t\tReader: strings.NewReader(\"HTTP/1.1 500 Fake Error\\r\\n\\r\\n\"),\n+\t\t\t}\n+\t\t\treturn\n+\t\t},\n+\t}\n+\n+\t_, err = t.RoundTrip(req)\n+\n+\treq.Body = save\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\tdump = b.Bytes()\n+\treturn\n+}\n+\n+// Return value if nonempty, def otherwise.\n+func valueOrDefault(value, def string) string {\n+\tif value != \"\" {\n+\t\treturn value\n+\t}\n+\treturn def\n+}\n+\n+var reqWriteExcludeHeaderDump = map[string]bool{\n+\t\"Host\":              true, // not in Header map anyway\n+\t\"Content-Length\":    true,\n+\t\"Transfer-Encoding\": true,\n+\t\"Trailer\":           true,\n+}\n+\n+// dumpAsReceived writes req to w in the form as it was received, or\n+// at least as accurately as possible from the information retained in\n+// the request.\n+func dumpAsReceived(req *http.Request, w io.Writer) error {\n+\treturn nil\n+}\n+\n+// DumpRequest returns the as-received wire representation of req,\n+// optionally including the request body, for debugging.\n+// DumpRequest is semantically a no-op, but in order to\n+// dump the body, it reads the body data into memory and\n+// changes req.Body to refer to the in-memory copy.\n+// The documentation for http.Request.Write details which fields\n+// of req are used.\n+func DumpRequest(req *http.Request, body bool) (dump []byte, err error) {\n+\tsave := req.Body\n+\tif !body || req.Body == nil {\n+\t\treq.Body = nil\n+\t} else {\n+\t\tsave, req.Body, err = drainBody(req.Body)\n+\t\tif err != nil {\n+\t\t\treturn\n+\t\t}\n+\t}\n+\n+\tvar b bytes.Buffer\n+\n+\turlStr := req.URL.Raw\n+\tif urlStr == \"\" {\n+\t\turlStr = valueOrDefault(req.URL.EncodedPath(), \"/\")\n+\t\tif req.URL.RawQuery != \"\" {\n+\t\t\turlStr += \"?\" + req.URL.RawQuery\n+\t\t}\n+\t}\n+\n+\tfmt.Fprintf(&b, \"%s %s HTTP/%d.%d\\r\\n\", valueOrDefault(req.Method, \"GET\"), urlStr,\n+\t\treq.ProtoMajor, req.ProtoMinor)\n+\n+\thost := req.Host\n+\tif host == \"\" && req.URL != nil {\n+\t\thost = req.URL.Host\n+\t}\n+\tif host != \"\" {\n+\t\tfmt.Fprintf(&b, \"Host: %s\\r\\n\", host)\n+\t}\n+\n+\tchunked := len(req.TransferEncoding) > 0 && req.TransferEncoding[0] == \"chunked\"\n+\tif len(req.TransferEncoding) > 0 {\n+\t\tfmt.Fprintf(&b, \"Transfer-Encoding: %s\\r\\n\", strings.Join(req.TransferEncoding, \",\"))\n+\t}\n+\tif req.Close {\n+\t\tfmt.Fprintf(&b, \"Connection: close\\r\\n\")\n+\t}\n+\n+\terr = req.Header.WriteSubset(&b, reqWriteExcludeHeaderDump)\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\n+\tio.WriteString(&b, \"\\r\\n\")\n+\n+\tif req.Body != nil {\n+\t\tvar dest io.Writer = &b\n+\t\tif chunked {\n+\t\t\tdest = NewChunkedWriter(dest)\n+\t\t}\n+\t\t_, err = io.Copy(dest, req.Body)\n+\t\tif chunked {\n+\t\t\tdest.(io.Closer).Close()\n+\t\t\tio.WriteString(&b, \"\\r\\n\")\n+\t\t}\n+\t}\n+\n+\treq.Body = save\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\tdump = b.Bytes()\n+\treturn\n+}\n+\n+// DumpResponse is like DumpRequest but dumps a response.\n+func DumpResponse(resp *http.Response, body bool) (dump []byte, err error) {\n+\tvar b bytes.Buffer\n+\tsave := resp.Body\n+\tsavecl := resp.ContentLength\n+\tif !body || resp.Body == nil {\n+\t\tresp.Body = nil\n+\t\tresp.ContentLength = 0\n+\t} else {\n+\t\tsave, resp.Body, err = drainBody(resp.Body)\n+\t\tif err != nil {\n+\t\t\treturn\n+\t\t}\n+\t}\n+\terr = resp.Write(&b)\n+\tresp.Body = save\n+\tresp.ContentLength = savecl\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\tdump = b.Bytes()\n+\treturn\n+}"}, {"sha": "819efb5847bd1f4dbed695f79d995acd5613a49f", "filename": "libgo/go/net/http/httputil/dump_test.go", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fdump_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fdump_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fdump_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -0,0 +1,140 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package httputil\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"io\"\n+\t\"io/ioutil\"\n+\t\"net/http\"\n+\t\"net/url\"\n+\t\"testing\"\n+)\n+\n+type dumpTest struct {\n+\tReq  http.Request\n+\tBody interface{} // optional []byte or func() io.ReadCloser to populate Req.Body\n+\n+\tWantDump    string\n+\tWantDumpOut string\n+}\n+\n+var dumpTests = []dumpTest{\n+\n+\t// HTTP/1.1 => chunked coding; body; empty trailer\n+\t{\n+\t\tReq: http.Request{\n+\t\t\tMethod: \"GET\",\n+\t\t\tURL: &url.URL{\n+\t\t\t\tScheme: \"http\",\n+\t\t\t\tHost:   \"www.google.com\",\n+\t\t\t\tPath:   \"/search\",\n+\t\t\t},\n+\t\t\tProtoMajor:       1,\n+\t\t\tProtoMinor:       1,\n+\t\t\tTransferEncoding: []string{\"chunked\"},\n+\t\t},\n+\n+\t\tBody: []byte(\"abcdef\"),\n+\n+\t\tWantDump: \"GET /search HTTP/1.1\\r\\n\" +\n+\t\t\t\"Host: www.google.com\\r\\n\" +\n+\t\t\t\"Transfer-Encoding: chunked\\r\\n\\r\\n\" +\n+\t\t\tchunk(\"abcdef\") + chunk(\"\"),\n+\t},\n+\n+\t// Verify that DumpRequest preserves the HTTP version number, doesn't add a Host,\n+\t// and doesn't add a User-Agent.\n+\t{\n+\t\tReq: http.Request{\n+\t\t\tMethod:     \"GET\",\n+\t\t\tURL:        mustParseURL(\"/foo\"),\n+\t\t\tProtoMajor: 1,\n+\t\t\tProtoMinor: 0,\n+\t\t\tHeader: http.Header{\n+\t\t\t\t\"X-Foo\": []string{\"X-Bar\"},\n+\t\t\t},\n+\t\t},\n+\n+\t\tWantDump: \"GET /foo HTTP/1.0\\r\\n\" +\n+\t\t\t\"X-Foo: X-Bar\\r\\n\\r\\n\",\n+\t},\n+\n+\t{\n+\t\tReq: *mustNewRequest(\"GET\", \"http://example.com/foo\", nil),\n+\n+\t\tWantDumpOut: \"GET /foo HTTP/1.1\\r\\n\" +\n+\t\t\t\"Host: example.com\\r\\n\" +\n+\t\t\t\"User-Agent: Go http package\\r\\n\" +\n+\t\t\t\"Accept-Encoding: gzip\\r\\n\\r\\n\",\n+\t},\n+}\n+\n+func TestDumpRequest(t *testing.T) {\n+\tfor i, tt := range dumpTests {\n+\t\tsetBody := func() {\n+\t\t\tif tt.Body == nil {\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t\tswitch b := tt.Body.(type) {\n+\t\t\tcase []byte:\n+\t\t\t\ttt.Req.Body = ioutil.NopCloser(bytes.NewBuffer(b))\n+\t\t\tcase func() io.ReadCloser:\n+\t\t\t\ttt.Req.Body = b()\n+\t\t\t}\n+\t\t}\n+\t\tsetBody()\n+\t\tif tt.Req.Header == nil {\n+\t\t\ttt.Req.Header = make(http.Header)\n+\t\t}\n+\n+\t\tif tt.WantDump != \"\" {\n+\t\t\tsetBody()\n+\t\t\tdump, err := DumpRequest(&tt.Req, true)\n+\t\t\tif err != nil {\n+\t\t\t\tt.Errorf(\"DumpRequest #%d: %s\", i, err)\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tif string(dump) != tt.WantDump {\n+\t\t\t\tt.Errorf(\"DumpRequest %d, expecting:\\n%s\\nGot:\\n%s\\n\", i, tt.WantDump, string(dump))\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t}\n+\n+\t\tif tt.WantDumpOut != \"\" {\n+\t\t\tsetBody()\n+\t\t\tdump, err := DumpRequestOut(&tt.Req, true)\n+\t\t\tif err != nil {\n+\t\t\t\tt.Errorf(\"DumpRequestOut #%d: %s\", i, err)\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tif string(dump) != tt.WantDumpOut {\n+\t\t\t\tt.Errorf(\"DumpRequestOut %d, expecting:\\n%s\\nGot:\\n%s\\n\", i, tt.WantDumpOut, string(dump))\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n+func chunk(s string) string {\n+\treturn fmt.Sprintf(\"%x\\r\\n%s\\r\\n\", len(s), s)\n+}\n+\n+func mustParseURL(s string) *url.URL {\n+\tu, err := url.Parse(s)\n+\tif err != nil {\n+\t\tpanic(fmt.Sprintf(\"Error parsing URL %q: %v\", s, err))\n+\t}\n+\treturn u\n+}\n+\n+func mustNewRequest(method, url string, body io.Reader) *http.Request {\n+\treq, err := http.NewRequest(method, url, body)\n+\tif err != nil {\n+\t\tpanic(fmt.Sprintf(\"NewRequest(%q, %q, %p) err = %v\", method, url, body, err))\n+\t}\n+\treturn req\n+}"}, {"sha": "d7b670110c4bcffc1532f889be5791c719d3ed92", "filename": "libgo/go/net/http/httputil/persist.go", "status": "renamed", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fpersist.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fpersist.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Fpersist.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -2,21 +2,24 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package http\n+// Package httputil provides HTTP utility functions, complementing the\n+// more common ones in the net/http package.\n+package httputil\n \n import (\n \t\"bufio\"\n \t\"errors\"\n \t\"io\"\n \t\"net\"\n+\t\"net/http\"\n \t\"net/textproto\"\n \t\"os\"\n \t\"sync\"\n )\n \n var (\n-\tErrPersistEOF = &ProtocolError{\"persistent connection closed\"}\n-\tErrPipeline   = &ProtocolError{\"pipeline error\"}\n+\tErrPersistEOF = &http.ProtocolError{\"persistent connection closed\"}\n+\tErrPipeline   = &http.ProtocolError{\"pipeline error\"}\n )\n \n // A ServerConn reads requests and sends responses over an underlying\n@@ -35,7 +38,7 @@ type ServerConn struct {\n \tre, we          error // read/write errors\n \tlastbody        io.ReadCloser\n \tnread, nwritten int\n-\tpipereq         map[*Request]uint\n+\tpipereq         map[*http.Request]uint\n \n \tpipe textproto.Pipeline\n }\n@@ -46,7 +49,7 @@ func NewServerConn(c net.Conn, r *bufio.Reader) *ServerConn {\n \tif r == nil {\n \t\tr = bufio.NewReader(c)\n \t}\n-\treturn &ServerConn{c: c, r: r, pipereq: make(map[*Request]uint)}\n+\treturn &ServerConn{c: c, r: r, pipereq: make(map[*http.Request]uint)}\n }\n \n // Hijack detaches the ServerConn and returns the underlying connection as well\n@@ -76,7 +79,7 @@ func (sc *ServerConn) Close() error {\n // it is gracefully determined that there are no more requests (e.g. after the\n // first request on an HTTP/1.0 connection, or after a Connection:close on a\n // HTTP/1.1 connection).\n-func (sc *ServerConn) Read() (req *Request, err error) {\n+func (sc *ServerConn) Read() (req *http.Request, err error) {\n \n \t// Ensure ordered execution of Reads and Writes\n \tid := sc.pipe.Next()\n@@ -126,7 +129,7 @@ func (sc *ServerConn) Read() (req *Request, err error) {\n \t\t}\n \t}\n \n-\treq, err = ReadRequest(r)\n+\treq, err = http.ReadRequest(r)\n \tsc.lk.Lock()\n \tdefer sc.lk.Unlock()\n \tif err != nil {\n@@ -161,7 +164,7 @@ func (sc *ServerConn) Pending() int {\n // Write writes resp in response to req. To close the connection gracefully, set the\n // Response.Close field to true. Write should be considered operational until\n // it returns an error, regardless of any errors returned on the Read side.\n-func (sc *ServerConn) Write(req *Request, resp *Response) error {\n+func (sc *ServerConn) Write(req *http.Request, resp *http.Response) error {\n \n \t// Retrieve the pipeline ID of this request/response pair\n \tsc.lk.Lock()\n@@ -225,10 +228,10 @@ type ClientConn struct {\n \tre, we          error // read/write errors\n \tlastbody        io.ReadCloser\n \tnread, nwritten int\n-\tpipereq         map[*Request]uint\n+\tpipereq         map[*http.Request]uint\n \n \tpipe     textproto.Pipeline\n-\twriteReq func(*Request, io.Writer) error\n+\twriteReq func(*http.Request, io.Writer) error\n }\n \n // NewClientConn returns a new ClientConn reading and writing c.  If r is not\n@@ -240,16 +243,16 @@ func NewClientConn(c net.Conn, r *bufio.Reader) *ClientConn {\n \treturn &ClientConn{\n \t\tc:        c,\n \t\tr:        r,\n-\t\tpipereq:  make(map[*Request]uint),\n-\t\twriteReq: (*Request).Write,\n+\t\tpipereq:  make(map[*http.Request]uint),\n+\t\twriteReq: (*http.Request).Write,\n \t}\n }\n \n // NewProxyClientConn works like NewClientConn but writes Requests\n // using Request's WriteProxy method.\n func NewProxyClientConn(c net.Conn, r *bufio.Reader) *ClientConn {\n \tcc := NewClientConn(c, r)\n-\tcc.writeReq = (*Request).WriteProxy\n+\tcc.writeReq = (*http.Request).WriteProxy\n \treturn cc\n }\n \n@@ -281,7 +284,7 @@ func (cc *ClientConn) Close() error {\n // keepalive connection is logically closed after this request and the opposing\n // server is informed. An ErrUnexpectedEOF indicates the remote closed the\n // underlying TCP connection, which is usually considered as graceful close.\n-func (cc *ClientConn) Write(req *Request) (err error) {\n+func (cc *ClientConn) Write(req *http.Request) (err error) {\n \n \t// Ensure ordered execution of Writes\n \tid := cc.pipe.Next()\n@@ -344,13 +347,7 @@ func (cc *ClientConn) Pending() int {\n // returned together with an ErrPersistEOF, which means that the remote\n // requested that this be the last request serviced. Read can be called\n // concurrently with Write, but not with another Read.\n-func (cc *ClientConn) Read(req *Request) (*Response, error) {\n-\treturn cc.readUsing(req, ReadResponse)\n-}\n-\n-// readUsing is the implementation of Read with a replaceable\n-// ReadResponse-like function, used by the Transport.\n-func (cc *ClientConn) readUsing(req *Request, readRes func(*bufio.Reader, *Request) (*Response, error)) (resp *Response, err error) {\n+func (cc *ClientConn) Read(req *http.Request) (resp *http.Response, err error) {\n \t// Retrieve the pipeline ID of this request/response pair\n \tcc.lk.Lock()\n \tid, ok := cc.pipereq[req]\n@@ -393,7 +390,7 @@ func (cc *ClientConn) readUsing(req *Request, readRes func(*bufio.Reader, *Reque\n \t\t}\n \t}\n \n-\tresp, err = readRes(r, req)\n+\tresp, err = http.ReadResponse(r, req)\n \tcc.lk.Lock()\n \tdefer cc.lk.Unlock()\n \tif err != nil {\n@@ -412,7 +409,7 @@ func (cc *ClientConn) readUsing(req *Request, readRes func(*bufio.Reader, *Reque\n }\n \n // Do is convenience method that writes a request and reads a response.\n-func (cc *ClientConn) Do(req *Request) (resp *Response, err error) {\n+func (cc *ClientConn) Do(req *http.Request) (resp *http.Response, err error) {\n \terr = cc.Write(req)\n \tif err != nil {\n \t\treturn", "previous_filename": "libgo/go/http/persist.go"}, {"sha": "bfcb3ca6b111d247dde7b43a92e0c338b893f78f", "filename": "libgo/go/net/http/httputil/reverseproxy.go", "status": "renamed", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Freverseproxy.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Freverseproxy.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Freverseproxy.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -4,16 +4,17 @@\n \n // HTTP reverse proxy handler\n \n-package http\n+package httputil\n \n import (\n \t\"io\"\n \t\"log\"\n \t\"net\"\n+\t\"net/http\"\n+\t\"net/url\"\n \t\"strings\"\n \t\"sync\"\n \t\"time\"\n-\t\"url\"\n )\n \n // ReverseProxy is an HTTP Handler that takes an incoming request and\n@@ -24,11 +25,11 @@ type ReverseProxy struct {\n \t// the request into a new request to be sent\n \t// using Transport. Its response is then copied\n \t// back to the original client unmodified.\n-\tDirector func(*Request)\n+\tDirector func(*http.Request)\n \n-\t// The Transport used to perform proxy requests.\n-\t// If nil, DefaultTransport is used.\n-\tTransport RoundTripper\n+\t// The transport used to perform proxy requests.\n+\t// If nil, http.DefaultTransport is used.\n+\tTransport http.RoundTripper\n \n \t// FlushInterval specifies the flush interval, in\n \t// nanoseconds, to flush to the client while\n@@ -54,7 +55,7 @@ func singleJoiningSlash(a, b string) string {\n // target's path is \"/base\" and the incoming request was for \"/dir\",\n // the target request will be for /base/dir.\n func NewSingleHostReverseProxy(target *url.URL) *ReverseProxy {\n-\tdirector := func(req *Request) {\n+\tdirector := func(req *http.Request) {\n \t\treq.URL.Scheme = target.Scheme\n \t\treq.URL.Host = target.Host\n \t\treq.URL.Path = singleJoiningSlash(target.Path, req.URL.Path)\n@@ -68,21 +69,21 @@ func NewSingleHostReverseProxy(target *url.URL) *ReverseProxy {\n \treturn &ReverseProxy{Director: director}\n }\n \n-func copyHeader(dst, src Header) {\n+func copyHeader(dst, src http.Header) {\n \tfor k, vv := range src {\n \t\tfor _, v := range vv {\n \t\t\tdst.Add(k, v)\n \t\t}\n \t}\n }\n \n-func (p *ReverseProxy) ServeHTTP(rw ResponseWriter, req *Request) {\n+func (p *ReverseProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n \ttransport := p.Transport\n \tif transport == nil {\n-\t\ttransport = DefaultTransport\n+\t\ttransport = http.DefaultTransport\n \t}\n \n-\toutreq := new(Request)\n+\toutreq := new(http.Request)\n \t*outreq = *req // includes shallow copies of maps, but okay\n \n \tp.Director(outreq)\n@@ -96,7 +97,7 @@ func (p *ReverseProxy) ServeHTTP(rw ResponseWriter, req *Request) {\n \t// to us.  This is modifying the same underlying map from req\n \t// (shallow copied above) so we only copy it if necessary.\n \tif outreq.Header.Get(\"Connection\") != \"\" {\n-\t\toutreq.Header = make(Header)\n+\t\toutreq.Header = make(http.Header)\n \t\tcopyHeader(outreq.Header, req.Header)\n \t\toutreq.Header.Del(\"Connection\")\n \t}\n@@ -108,7 +109,7 @@ func (p *ReverseProxy) ServeHTTP(rw ResponseWriter, req *Request) {\n \tres, err := transport.RoundTrip(outreq)\n \tif err != nil {\n \t\tlog.Printf(\"http: proxy error: %v\", err)\n-\t\trw.WriteHeader(StatusInternalServerError)\n+\t\trw.WriteHeader(http.StatusInternalServerError)\n \t\treturn\n \t}\n \n@@ -129,7 +130,7 @@ func (p *ReverseProxy) ServeHTTP(rw ResponseWriter, req *Request) {\n \n type writeFlusher interface {\n \tio.Writer\n-\tFlusher\n+\thttp.Flusher\n }\n \n type maxLatencyWriter struct {", "previous_filename": "libgo/go/http/reverseproxy.go"}, {"sha": "655784b30d5f195d7603ffde0b0dac3247df2027", "filename": "libgo/go/net/http/httputil/reverseproxy_test.go", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Freverseproxy_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Freverseproxy_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fhttputil%2Freverseproxy_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -4,20 +4,20 @@\n \n // Reverse proxy tests.\n \n-package http_test\n+package httputil\n \n import (\n-\t. \"http\"\n-\t\"http/httptest\"\n \t\"io/ioutil\"\n+\t\"net/http\"\n+\t\"net/http/httptest\"\n+\t\"net/url\"\n \t\"testing\"\n-\t\"url\"\n )\n \n func TestReverseProxy(t *testing.T) {\n \tconst backendResponse = \"I am the backend\"\n \tconst backendStatus = 404\n-\tbackend := httptest.NewServer(HandlerFunc(func(w ResponseWriter, r *Request) {\n+\tbackend := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n \t\tif len(r.TransferEncoding) > 0 {\n \t\t\tt.Errorf(\"backend got unexpected TransferEncoding: %v\", r.TransferEncoding)\n \t\t}\n@@ -31,7 +31,7 @@ func TestReverseProxy(t *testing.T) {\n \t\t\tt.Errorf(\"backend got Host header %q, want %q\", g, e)\n \t\t}\n \t\tw.Header().Set(\"X-Foo\", \"bar\")\n-\t\tSetCookie(w, &Cookie{Name: \"flavor\", Value: \"chocolateChip\"})\n+\t\thttp.SetCookie(w, &http.Cookie{Name: \"flavor\", Value: \"chocolateChip\"})\n \t\tw.WriteHeader(backendStatus)\n \t\tw.Write([]byte(backendResponse))\n \t}))\n@@ -44,11 +44,11 @@ func TestReverseProxy(t *testing.T) {\n \tfrontend := httptest.NewServer(proxyHandler)\n \tdefer frontend.Close()\n \n-\tgetReq, _ := NewRequest(\"GET\", frontend.URL, nil)\n+\tgetReq, _ := http.NewRequest(\"GET\", frontend.URL, nil)\n \tgetReq.Host = \"some-name\"\n \tgetReq.Header.Set(\"Connection\", \"close\")\n \tgetReq.Close = true\n-\tres, err := DefaultClient.Do(getReq)\n+\tres, err := http.DefaultClient.Do(getReq)\n \tif err != nil {\n \t\tt.Fatalf(\"Get: %v\", err)\n \t}", "previous_filename": "libgo/go/http/reverseproxy_test.go"}, {"sha": "93b67e701761285817db97f5bf3b154475777dae", "filename": "libgo/go/net/http/lex.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Flex.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Flex.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Flex.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/http/lex.go"}, {"sha": "5386f7534db51f92cb62a8ae1b549e7f7124e348", "filename": "libgo/go/net/http/lex_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Flex_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Flex_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Flex_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/http/lex_test.go"}, {"sha": "c0327a948244cf08bf081b1487894afce99fa725", "filename": "libgo/go/net/http/pprof/pprof.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fpprof%2Fpprof.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fpprof%2Fpprof.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fpprof%2Fpprof.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -28,8 +28,8 @@ import (\n \t\"bufio\"\n \t\"bytes\"\n \t\"fmt\"\n-\t\"http\"\n \t\"io\"\n+\t\"net/http\"\n \t\"os\"\n \t\"runtime\"\n \t\"runtime/pprof\"", "previous_filename": "libgo/go/http/pprof/pprof.go"}, {"sha": "9b320b3aa5b9904f26cc5aba7983f60ba5ddd2b7", "filename": "libgo/go/net/http/proxy_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fproxy_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fproxy_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fproxy_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/http/proxy_test.go"}, {"sha": "5274a81fa34479f2a0b74264f19678c847d56a98", "filename": "libgo/go/net/http/range_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Frange_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Frange_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Frange_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/http/range_test.go"}, {"sha": "2219d43316593b73439f5544de48a67e6d98b1fb", "filename": "libgo/go/net/http/readrequest_test.go", "status": "renamed", "additions": 53, "deletions": 6, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Freadrequest_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Freadrequest_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Freadrequest_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -9,19 +9,22 @@ import (\n \t\"bytes\"\n \t\"fmt\"\n \t\"io\"\n+\t\"net/url\"\n+\t\"reflect\"\n \t\"testing\"\n-\t\"url\"\n )\n \n type reqTest struct {\n-\tRaw   string\n-\tReq   *Request\n-\tBody  string\n-\tError string\n+\tRaw     string\n+\tReq     *Request\n+\tBody    string\n+\tTrailer Header\n+\tError   string\n }\n \n var noError = \"\"\n var noBody = \"\"\n+var noTrailer Header = nil\n \n var reqTests = []reqTest{\n \t// Baseline test; All Request fields included for template use\n@@ -72,6 +75,7 @@ var reqTests = []reqTest{\n \n \t\t\"abcdef\\n\",\n \n+\t\tnoTrailer,\n \t\tnoError,\n \t},\n \n@@ -97,6 +101,7 @@ var reqTests = []reqTest{\n \t\t},\n \n \t\tnoBody,\n+\t\tnoTrailer,\n \t\tnoError,\n \t},\n \n@@ -130,6 +135,7 @@ var reqTests = []reqTest{\n \t\t},\n \n \t\tnoBody,\n+\t\tnoTrailer,\n \t\tnoError,\n \t},\n \n@@ -139,6 +145,7 @@ var reqTests = []reqTest{\n \t\t\t\"Host: test\\r\\n\\r\\n\",\n \t\tnil,\n \t\tnoBody,\n+\t\tnoTrailer,\n \t\t\"parse ../../../../etc/passwd: invalid URI for request\",\n \t},\n \n@@ -148,8 +155,42 @@ var reqTests = []reqTest{\n \t\t\t\"Host: test\\r\\n\\r\\n\",\n \t\tnil,\n \t\tnoBody,\n+\t\tnoTrailer,\n \t\t\"parse : empty url\",\n \t},\n+\n+\t// Tests chunked body with trailer:\n+\t{\n+\t\t\"POST / HTTP/1.1\\r\\n\" +\n+\t\t\t\"Host: foo.com\\r\\n\" +\n+\t\t\t\"Transfer-Encoding: chunked\\r\\n\\r\\n\" +\n+\t\t\t\"3\\r\\nfoo\\r\\n\" +\n+\t\t\t\"3\\r\\nbar\\r\\n\" +\n+\t\t\t\"0\\r\\n\" +\n+\t\t\t\"Trailer-Key: Trailer-Value\\r\\n\" +\n+\t\t\t\"\\r\\n\",\n+\t\t&Request{\n+\t\t\tMethod: \"POST\",\n+\t\t\tURL: &url.URL{\n+\t\t\t\tRaw:     \"/\",\n+\t\t\t\tPath:    \"/\",\n+\t\t\t\tRawPath: \"/\",\n+\t\t\t},\n+\t\t\tTransferEncoding: []string{\"chunked\"},\n+\t\t\tProto:            \"HTTP/1.1\",\n+\t\t\tProtoMajor:       1,\n+\t\t\tProtoMinor:       1,\n+\t\t\tContentLength:    -1,\n+\t\t\tHost:             \"foo.com\",\n+\t\t\tForm:             url.Values{},\n+\t\t},\n+\n+\t\t\"foobar\",\n+\t\tHeader{\n+\t\t\t\"Trailer-Key\": {\"Trailer-Value\"},\n+\t\t},\n+\t\tnoError,\n+\t},\n }\n \n func TestReadRequest(t *testing.T) {\n@@ -169,12 +210,18 @@ func TestReadRequest(t *testing.T) {\n \t\tdiff(t, fmt.Sprintf(\"#%d Request\", i), req, tt.Req)\n \t\tvar bout bytes.Buffer\n \t\tif rbody != nil {\n-\t\t\tio.Copy(&bout, rbody)\n+\t\t\t_, err := io.Copy(&bout, rbody)\n+\t\t\tif err != nil {\n+\t\t\t\tt.Fatalf(\"#%d. copying body: %v\", i, err)\n+\t\t\t}\n \t\t\trbody.Close()\n \t\t}\n \t\tbody := bout.String()\n \t\tif body != tt.Body {\n \t\t\tt.Errorf(\"#%d: Body = %q want %q\", i, body, tt.Body)\n \t\t}\n+\t\tif !reflect.DeepEqual(tt.Trailer, req.Trailer) {\n+\t\t\tt.Errorf(\"%#d. Trailers differ.\\n got: %v\\nwant: %v\", i, req.Trailer, tt.Trailer)\n+\t\t}\n \t}\n }", "previous_filename": "libgo/go/http/readrequest_test.go"}, {"sha": "4410ca1d11ceec8c9bc925a8c3b984556771bcba", "filename": "libgo/go/net/http/request.go", "status": "renamed", "additions": 26, "deletions": 72, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Frequest.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Frequest.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Frequest.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -18,9 +18,9 @@ import (\n \t\"mime\"\n \t\"mime/multipart\"\n \t\"net/textproto\"\n+\t\"net/url\"\n \t\"strconv\"\n \t\"strings\"\n-\t\"url\"\n )\n \n const (\n@@ -69,14 +69,8 @@ var reqWriteExcludeHeader = map[string]bool{\n \t\"Trailer\":           true,\n }\n \n-var reqWriteExcludeHeaderDump = map[string]bool{\n-\t\"Host\":              true, // not in Header map anyway\n-\t\"Content-Length\":    true,\n-\t\"Transfer-Encoding\": true,\n-\t\"Trailer\":           true,\n-}\n-\n-// A Request represents a parsed HTTP request header.\n+// A Request represents an HTTP request received by a server\n+// or to be sent by a client.\n type Request struct {\n \tMethod string // GET, POST, PUT, etc.\n \tURL    *url.URL\n@@ -113,31 +107,44 @@ type Request struct {\n \n \t// ContentLength records the length of the associated content.\n \t// The value -1 indicates that the length is unknown.\n-\t// Values >= 0 indicate that the given number of bytes may be read from Body.\n+\t// Values >= 0 indicate that the given number of bytes may\n+\t// be read from Body.\n+\t// For outgoing requests, a value of 0 means unknown if Body is not nil.\n \tContentLength int64\n \n-\t// TransferEncoding lists the transfer encodings from outermost to innermost.\n-\t// An empty list denotes the \"identity\" encoding.\n+\t// TransferEncoding lists the transfer encodings from outermost to\n+\t// innermost. An empty list denotes the \"identity\" encoding.\n+\t// TransferEncoding can usually be ignored; chunked encoding is\n+\t// automatically added and removed as necessary when sending and\n+\t// receiving requests.\n \tTransferEncoding []string\n \n-\t// Whether to close the connection after replying to this request.\n+\t// Close indicates whether to close the connection after\n+\t// replying to this request.\n \tClose bool\n \n \t// The host on which the URL is sought.\n \t// Per RFC 2616, this is either the value of the Host: header\n \t// or the host name given in the URL itself.\n \tHost string\n \n-\t// The parsed form. Only available after ParseForm is called.\n+\t// Form contains the parsed form data, including both the URL\n+\t// field's query parameters and the POST or PUT form data.\n+\t// This field is only available after ParseForm is called.\n+\t// The HTTP client ignores Form and uses Body instead.\n \tForm url.Values\n \n-\t// The parsed multipart form, including file uploads.\n-\t// Only available after ParseMultipartForm is called.\n+\t// MultipartForm is the parsed multipart form, including file uploads.\n+\t// This field is only available after ParseMultipartForm is called.\n+\t// The HTTP client ignores MultipartForm and uses Body instead.\n \tMultipartForm *multipart.Form\n \n \t// Trailer maps trailer keys to values.  Like for Header, if the\n \t// response has multiple trailer lines with the same key, they will be\n \t// concatenated, delimited by commas.\n+\t// For server requests, Trailer is only populated after Body has been\n+\t// closed or fully consumed.\n+\t// Trailer support is only partially complete.\n \tTrailer Header\n \n \t// RemoteAddr allows HTTP servers and other software to record\n@@ -146,6 +153,7 @@ type Request struct {\n \t// has no defined format. The HTTP server in this package\n \t// sets RemoteAddr to an \"IP:port\" address before invoking a\n \t// handler.\n+\t// This field is ignored by the HTTP client.\n \tRemoteAddr string\n \n \t// TLS allows HTTP servers and other software to record\n@@ -154,6 +162,7 @@ type Request struct {\n \t// The HTTP server in this package sets the field for\n \t// TLS-enabled connections before invoking a handler;\n \t// otherwise it leaves the field nil.\n+\t// This field is ignored by the HTTP client.\n \tTLS *tls.ConnectionState\n }\n \n@@ -286,51 +295,6 @@ func (req *Request) WriteProxy(w io.Writer) error {\n \treturn req.write(w, true, nil)\n }\n \n-func (req *Request) dumpWrite(w io.Writer) error {\n-\t// TODO(bradfitz): RawPath here?\n-\turlStr := valueOrDefault(req.URL.EncodedPath(), \"/\")\n-\tif req.URL.RawQuery != \"\" {\n-\t\turlStr += \"?\" + req.URL.RawQuery\n-\t}\n-\n-\tbw := bufio.NewWriter(w)\n-\tfmt.Fprintf(bw, \"%s %s HTTP/%d.%d\\r\\n\", valueOrDefault(req.Method, \"GET\"), urlStr,\n-\t\treq.ProtoMajor, req.ProtoMinor)\n-\n-\thost := req.Host\n-\tif host == \"\" && req.URL != nil {\n-\t\thost = req.URL.Host\n-\t}\n-\tif host != \"\" {\n-\t\tfmt.Fprintf(bw, \"Host: %s\\r\\n\", host)\n-\t}\n-\n-\t// Process Body,ContentLength,Close,Trailer\n-\ttw, err := newTransferWriter(req)\n-\tif err != nil {\n-\t\treturn err\n-\t}\n-\terr = tw.WriteHeader(bw)\n-\tif err != nil {\n-\t\treturn err\n-\t}\n-\n-\terr = req.Header.WriteSubset(bw, reqWriteExcludeHeaderDump)\n-\tif err != nil {\n-\t\treturn err\n-\t}\n-\n-\tio.WriteString(bw, \"\\r\\n\")\n-\n-\t// Write body and trailer\n-\terr = tw.WriteBody(bw)\n-\tif err != nil {\n-\t\treturn err\n-\t}\n-\tbw.Flush()\n-\treturn nil\n-}\n-\n // extraHeaders may be nil\n func (req *Request) write(w io.Writer, usingProxy bool, extraHeaders Header) error {\n \thost := req.Host\n@@ -502,16 +466,6 @@ func (cr *chunkedReader) beginChunk() {\n \t\treturn\n \t}\n \tif cr.n == 0 {\n-\t\t// trailer CRLF\n-\t\tfor {\n-\t\t\tline, cr.err = readLine(cr.r)\n-\t\t\tif cr.err != nil {\n-\t\t\t\treturn\n-\t\t\t}\n-\t\t\tif line == \"\" {\n-\t\t\t\tbreak\n-\t\t\t}\n-\t\t}\n \t\tcr.err = io.EOF\n \t}\n }\n@@ -734,7 +688,7 @@ func (r *Request) ParseForm() (err error) {\n \t\tct := r.Header.Get(\"Content-Type\")\n \t\tct, _, err := mime.ParseMediaType(ct)\n \t\tswitch {\n-\t\tcase ct == \"text/plain\" || ct == \"application/x-www-form-urlencoded\" || ct == \"\":\n+\t\tcase ct == \"application/x-www-form-urlencoded\":\n \t\t\tvar reader io.Reader = r.Body\n \t\t\tmaxFormSize := int64(1<<63 - 1)\n \t\t\tif _, ok := r.Body.(*maxBytesReader); !ok {", "previous_filename": "libgo/go/http/request.go"}, {"sha": "714cb64f47f1b64ff3db51f310a97a053748dfea", "filename": "libgo/go/net/http/request_test.go", "status": "renamed", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Frequest_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Frequest_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Frequest_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -7,17 +7,17 @@ package http_test\n import (\n \t\"bytes\"\n \t\"fmt\"\n-\t. \"http\"\n-\t\"http/httptest\"\n \t\"io\"\n \t\"io/ioutil\"\n \t\"mime/multipart\"\n+\t. \"net/http\"\n+\t\"net/http/httptest\"\n+\t\"net/url\"\n \t\"os\"\n \t\"reflect\"\n \t\"regexp\"\n \t\"strings\"\n \t\"testing\"\n-\t\"url\"\n )\n \n func TestQuery(t *testing.T) {\n@@ -29,12 +29,10 @@ func TestQuery(t *testing.T) {\n }\n \n func TestPostQuery(t *testing.T) {\n-\treq := &Request{Method: \"POST\"}\n-\treq.URL, _ = url.Parse(\"http://www.google.com/search?q=foo&q=bar&both=x\")\n-\treq.Header = Header{\n-\t\t\"Content-Type\": {\"application/x-www-form-urlencoded; boo!\"},\n-\t}\n-\treq.Body = ioutil.NopCloser(strings.NewReader(\"z=post&both=y\"))\n+\treq, _ := NewRequest(\"POST\", \"http://www.google.com/search?q=foo&q=bar&both=x\",\n+\t\tstrings.NewReader(\"z=post&both=y\"))\n+\treq.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded; param=value\")\n+\n \tif q := req.FormValue(\"q\"); q != \"foo\" {\n \t\tt.Errorf(`req.FormValue(\"q\") = %q, want \"foo\"`, q)\n \t}\n@@ -49,7 +47,6 @@ func TestPostQuery(t *testing.T) {\n type stringMap map[string][]string\n type parseContentTypeTest struct {\n \tcontentType stringMap\n-\terr         bool\n }\n \n var parseContentTypeTests = []parseContentTypeTest{\n@@ -58,22 +55,18 @@ var parseContentTypeTests = []parseContentTypeTest{\n \t{contentType: stringMap{\"Content-Type\": {\"text/plain; boundary=\"}}},\n \t{\n \t\tcontentType: stringMap{\"Content-Type\": {\"application/unknown\"}},\n-\t\terr:         true,\n \t},\n }\n \n-func TestPostContentTypeParsing(t *testing.T) {\n+func TestParseFormBadContentType(t *testing.T) {\n \tfor i, test := range parseContentTypeTests {\n \t\treq := &Request{\n \t\t\tMethod: \"POST\",\n \t\t\tHeader: Header(test.contentType),\n \t\t\tBody:   ioutil.NopCloser(bytes.NewBufferString(\"body\")),\n \t\t}\n \t\terr := req.ParseForm()\n-\t\tif !test.err && err != nil {\n-\t\t\tt.Errorf(\"test %d: Unexpected error: %v\", i, err)\n-\t\t}\n-\t\tif test.err && err == nil {\n+\t\tif err == nil {\n \t\t\tt.Errorf(\"test %d should have returned error\", i)\n \t\t}\n \t}", "previous_filename": "libgo/go/http/request_test.go"}, {"sha": "8081589f5f25d8fc505b6ab1bf2ad0abe0f9ca66", "filename": "libgo/go/net/http/requestwrite_test.go", "status": "renamed", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Frequestwrite_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Frequestwrite_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Frequestwrite_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -10,9 +10,9 @@ import (\n \t\"fmt\"\n \t\"io\"\n \t\"io/ioutil\"\n+\t\"net/url\"\n \t\"strings\"\n \t\"testing\"\n-\t\"url\"\n )\n \n type reqWriteTest struct {\n@@ -22,7 +22,6 @@ type reqWriteTest struct {\n \t// Any of these three may be empty to skip that test.\n \tWantWrite string // Request.Write\n \tWantProxy string // Request.WriteProxy\n-\tWantDump  string // DumpRequest\n \n \tWantError error // wanted error from Request.Write\n }\n@@ -109,11 +108,6 @@ var reqWriteTests = []reqWriteTest{\n \t\t\t\"User-Agent: Go http package\\r\\n\" +\n \t\t\t\"Transfer-Encoding: chunked\\r\\n\\r\\n\" +\n \t\t\tchunk(\"abcdef\") + chunk(\"\"),\n-\n-\t\tWantDump: \"GET /search HTTP/1.1\\r\\n\" +\n-\t\t\t\"Host: www.google.com\\r\\n\" +\n-\t\t\t\"Transfer-Encoding: chunked\\r\\n\\r\\n\" +\n-\t\t\tchunk(\"abcdef\") + chunk(\"\"),\n \t},\n \t// HTTP/1.1 POST => chunked coding; body; empty trailer\n \t{\n@@ -335,13 +329,6 @@ var reqWriteTests = []reqWriteTest{\n \t\t\t},\n \t\t},\n \n-\t\t// We can dump it:\n-\t\tWantDump: \"GET /foo HTTP/1.0\\r\\n\" +\n-\t\t\t\"X-Foo: X-Bar\\r\\n\\r\\n\",\n-\n-\t\t// .. but we can't call Request.Write on it, due to its lack of Host header.\n-\t\t// TODO(bradfitz): there might be an argument to allow this, but for now I'd\n-\t\t// rather let HTTP/1.0 continue to die.\n \t\tWantWrite: \"GET /foo HTTP/1.1\\r\\n\" +\n \t\t\t\"Host: \\r\\n\" +\n \t\t\t\"User-Agent: Go http package\\r\\n\" +\n@@ -401,19 +388,6 @@ func TestRequestWrite(t *testing.T) {\n \t\t\t\tcontinue\n \t\t\t}\n \t\t}\n-\n-\t\tif tt.WantDump != \"\" {\n-\t\t\tsetBody()\n-\t\t\tdump, err := DumpRequest(&tt.Req, true)\n-\t\t\tif err != nil {\n-\t\t\t\tt.Errorf(\"DumpRequest #%d: %s\", i, err)\n-\t\t\t\tcontinue\n-\t\t\t}\n-\t\t\tif string(dump) != tt.WantDump {\n-\t\t\t\tt.Errorf(\"DumpRequest %d, expecting:\\n%s\\nGot:\\n%s\\n\", i, tt.WantDump, string(dump))\n-\t\t\t\tcontinue\n-\t\t\t}\n-\t\t}\n \t}\n }\n ", "previous_filename": "libgo/go/http/requestwrite_test.go"}, {"sha": "ae314b5ac934bfa942884a4ce96489458716684f", "filename": "libgo/go/net/http/response.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fresponse.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fresponse.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fresponse.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -11,9 +11,9 @@ import (\n \t\"errors\"\n \t\"io\"\n \t\"net/textproto\"\n+\t\"net/url\"\n \t\"strconv\"\n \t\"strings\"\n-\t\"url\"\n )\n \n var respExcludeHeader = map[string]bool{", "previous_filename": "libgo/go/http/response.go"}, {"sha": "be717aa83c3c586b9ca0f38de6dabdfe00ee67c9", "filename": "libgo/go/net/http/response_test.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fresponse_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fresponse_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fresponse_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -12,9 +12,9 @@ import (\n \t\"fmt\"\n \t\"io\"\n \t\"io/ioutil\"\n+\t\"net/url\"\n \t\"reflect\"\n \t\"testing\"\n-\t\"url\"\n )\n \n type respTest struct {", "previous_filename": "libgo/go/http/response_test.go"}, {"sha": "f8e63acf4f7b1d88b05180c164bc164575b2ad34", "filename": "libgo/go/net/http/responsewrite_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fresponsewrite_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fresponsewrite_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fresponsewrite_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/http/responsewrite_test.go"}, {"sha": "e278396091d590c98575de12e305cb26b07943bd", "filename": "libgo/go/net/http/serve_test.go", "status": "renamed", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fserve_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fserve_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fserve_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -11,19 +11,20 @@ import (\n \t\"bytes\"\n \t\"crypto/tls\"\n \t\"fmt\"\n-\t. \"http\"\n-\t\"http/httptest\"\n \t\"io\"\n \t\"io/ioutil\"\n \t\"log\"\n \t\"net\"\n+\t. \"net/http\"\n+\t\"net/http/httptest\"\n+\t\"net/http/httputil\"\n+\t\"net/url\"\n \t\"os\"\n \t\"reflect\"\n \t\"strings\"\n \t\"syscall\"\n \t\"testing\"\n \t\"time\"\n-\t\"url\"\n )\n \n type dummyAddr string\n@@ -181,7 +182,7 @@ func TestHostHandlers(t *testing.T) {\n \t\tt.Fatal(err)\n \t}\n \tdefer conn.Close()\n-\tcc := NewClientConn(conn, nil)\n+\tcc := httputil.NewClientConn(conn, nil)\n \tfor _, vt := range vtests {\n \t\tvar r *Response\n \t\tvar req Request\n@@ -824,7 +825,7 @@ func TestRedirectMunging(t *testing.T) {\n // explicit Content-Length of zero is present), then the transport can re-use the\n // connection immediately. But when it re-uses the connection, it typically closes\n // the previous request's body, which is not optimal for zero-lengthed bodies,\n-// as the client would then see http.ErrBodyReadAfterClose and not 0, os.EOF.\n+// as the client would then see http.ErrBodyReadAfterClose and not 0, io.EOF.\n func TestZeroLengthPostAndResponse(t *testing.T) {\n \tts := httptest.NewServer(HandlerFunc(func(rw ResponseWriter, r *Request) {\n \t\tall, err := ioutil.ReadAll(r.Body)", "previous_filename": "libgo/go/http/serve_test.go"}, {"sha": "8c4889436f1c6006dd8d52f31bf00305719de9f6", "filename": "libgo/go/net/http/server.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fserver.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fserver.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fserver.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -20,13 +20,13 @@ import (\n \t\"io/ioutil\"\n \t\"log\"\n \t\"net\"\n+\t\"net/url\"\n \t\"path\"\n \t\"runtime/debug\"\n \t\"strconv\"\n \t\"strings\"\n \t\"sync\"\n \t\"time\"\n-\t\"url\"\n )\n \n // Errors introduced by the HTTP server.", "previous_filename": "libgo/go/http/server.go"}, {"sha": "5707c7f057f2e03152f832dad706e3ec9c0b0b55", "filename": "libgo/go/net/http/sniff.go", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fsniff.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fsniff.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fsniff.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -11,7 +11,7 @@ import (\n \n // Content-type sniffing algorithm.\n // References in this file refer to this draft specification:\n-//   http://tools.ietf.org/html/draft-ietf-websec-mime-sniff-03\n+//   http://mimesniff.spec.whatwg.org/\n \n // The algorithm prefers to use sniffLen bytes to make its decision.\n const sniffLen = 512\n@@ -38,7 +38,7 @@ func DetectContentType(data []byte) string {\n }\n \n func isWS(b byte) bool {\n-\treturn bytes.IndexByte([]byte(\"\\t\\n\\x0C\\n \"), b) != -1\n+\treturn bytes.IndexByte([]byte(\"\\t\\n\\x0C\\r \"), b) != -1\n }\n \n type sniffSig interface {", "previous_filename": "libgo/go/http/sniff.go"}, {"sha": "a414e6420db88c39058cfd6b2f59d1faeb6214b7", "filename": "libgo/go/net/http/sniff_test.go", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fsniff_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fsniff_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fsniff_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -6,10 +6,10 @@ package http_test\n \n import (\n \t\"bytes\"\n-\t. \"http\"\n-\t\"http/httptest\"\n \t\"io/ioutil\"\n \t\"log\"\n+\t. \"net/http\"\n+\t\"net/http/httptest\"\n \t\"strconv\"\n \t\"testing\"\n )\n@@ -26,6 +26,7 @@ var sniffTests = []struct {\n \t{\"HTML document #1\", []byte(`<HtMl><bOdY>blah blah blah</body></html>`), \"text/html; charset=utf-8\"},\n \t{\"HTML document #2\", []byte(`<HTML></HTML>`), \"text/html; charset=utf-8\"},\n \t{\"HTML document #3 (leading whitespace)\", []byte(`   <!DOCTYPE HTML>...`), \"text/html; charset=utf-8\"},\n+\t{\"HTML document #4 (leading CRLF)\", []byte(\"\\r\\n<html>...\"), \"text/html; charset=utf-8\"},\n \n \t{\"Plain text\", []byte(`This is not HTML. It has \u2603 though.`), \"text/plain; charset=utf-8\"},\n ", "previous_filename": "libgo/go/http/sniff_test.go"}, {"sha": "b6e2d65c6a5019d8586186e1935835b6ce3cc025", "filename": "libgo/go/net/http/status.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fstatus.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Fstatus.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fstatus.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/http/status.go"}, {"sha": "11f11f9be3babdba706660bfc54cb4e8990c3a16", "filename": "libgo/go/net/http/testdata/file", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ftestdata%2Ffile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ftestdata%2Ffile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ftestdata%2Ffile?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/http/testdata/file"}, {"sha": "da8e1e93d159cc3dbb676c2d05bed0bc0bd1f8e7", "filename": "libgo/go/net/http/testdata/index.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ftestdata%2Findex.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ftestdata%2Findex.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ftestdata%2Findex.html?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/http/testdata/index.html"}, {"sha": "208d16d4213b91be6d840400703325d41ca9cb5e", "filename": "libgo/go/net/http/testdata/style.css", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ftestdata%2Fstyle.css", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ftestdata%2Fstyle.css", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ftestdata%2Fstyle.css?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/http/testdata/style.css"}, {"sha": "2670d77ef00ad864ccec45efe8e66f2f22e7bb22", "filename": "libgo/go/net/http/transfer.go", "status": "renamed", "additions": 68, "deletions": 11, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ftransfer.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ftransfer.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ftransfer.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,12 +5,13 @@\n package http\n \n import (\n-\t\"bytes\"\n \t\"bufio\"\n+\t\"bytes\"\n \t\"errors\"\n \t\"fmt\"\n \t\"io\"\n \t\"io/ioutil\"\n+\t\"net/textproto\"\n \t\"strconv\"\n \t\"strings\"\n )\n@@ -187,7 +188,7 @@ func (t *transferWriter) WriteBody(w io.Writer) (err error) {\n \t// Write body\n \tif t.Body != nil {\n \t\tif chunked(t.TransferEncoding) {\n-\t\t\tcw := NewChunkedWriter(w)\n+\t\t\tcw := newChunkedWriter(w)\n \t\t\t_, err = io.Copy(cw, t.Body)\n \t\t\tif err == nil {\n \t\t\t\terr = cw.Close()\n@@ -319,7 +320,7 @@ func readTransfer(msg interface{}, r *bufio.Reader) (err error) {\n \t// or close connection when finished, since multipart is not supported yet\n \tswitch {\n \tcase chunked(t.TransferEncoding):\n-\t\tt.Body = &body{Reader: NewChunkedReader(r), hdr: msg, r: r, closing: t.Close}\n+\t\tt.Body = &body{Reader: newChunkedReader(r), hdr: msg, r: r, closing: t.Close}\n \tcase t.ContentLength >= 0:\n \t\t// TODO: limit the Content-Length. This is an easy DoS vector.\n \t\tt.Body = &body{Reader: io.LimitReader(r, t.ContentLength), closing: t.Close}\n@@ -532,7 +533,68 @@ func (b *body) Read(p []byte) (n int, err error) {\n \tif b.closed {\n \t\treturn 0, ErrBodyReadAfterClose\n \t}\n-\treturn b.Reader.Read(p)\n+\tn, err = b.Reader.Read(p)\n+\n+\t// Read the final trailer once we hit EOF.\n+\tif err == io.EOF && b.hdr != nil {\n+\t\terr = b.readTrailer()\n+\t\tb.hdr = nil\n+\t}\n+\treturn n, err\n+}\n+\n+var (\n+\tsingleCRLF = []byte(\"\\r\\n\")\n+\tdoubleCRLF = []byte(\"\\r\\n\\r\\n\")\n+)\n+\n+func seeUpcomingDoubleCRLF(r *bufio.Reader) bool {\n+\tfor peekSize := 4; ; peekSize++ {\n+\t\t// This loop stops when Peek returns an error,\n+\t\t// which it does when r's buffer has been filled.\n+\t\tbuf, err := r.Peek(peekSize)\n+\t\tif bytes.HasSuffix(buf, doubleCRLF) {\n+\t\t\treturn true\n+\t\t}\n+\t\tif err != nil {\n+\t\t\tbreak\n+\t\t}\n+\t}\n+\treturn false\n+}\n+\n+func (b *body) readTrailer() error {\n+\t// The common case, since nobody uses trailers.\n+\tbuf, _ := b.r.Peek(2)\n+\tif bytes.Equal(buf, singleCRLF) {\n+\t\tb.r.ReadByte()\n+\t\tb.r.ReadByte()\n+\t\treturn nil\n+\t}\n+\n+\t// Make sure there's a header terminator coming up, to prevent\n+\t// a DoS with an unbounded size Trailer.  It's not easy to\n+\t// slip in a LimitReader here, as textproto.NewReader requires\n+\t// a concrete *bufio.Reader.  Also, we can't get all the way\n+\t// back up to our conn's LimitedReader that *might* be backing\n+\t// this bufio.Reader.  Instead, a hack: we iteratively Peek up\n+\t// to the bufio.Reader's max size, looking for a double CRLF.\n+\t// This limits the trailer to the underlying buffer size, typically 4kB.\n+\tif !seeUpcomingDoubleCRLF(b.r) {\n+\t\treturn errors.New(\"http: suspiciously long trailer after chunked body\")\n+\t}\n+\n+\thdr, err := textproto.NewReader(b.r).ReadMIMEHeader()\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tswitch rr := b.hdr.(type) {\n+\tcase *Request:\n+\t\trr.Trailer = Header(hdr)\n+\tcase *Response:\n+\t\trr.Trailer = Header(hdr)\n+\t}\n+\treturn nil\n }\n \n func (b *body) Close() error {\n@@ -557,15 +619,10 @@ func (b *body) Close() error {\n \t\treturn nil\n \t}\n \n+\t// Fully consume the body, which will also lead to us reading\n+\t// the trailer headers after the body, if present.\n \tif _, err := io.Copy(ioutil.Discard, b); err != nil {\n \t\treturn err\n \t}\n-\n-\tif b.hdr == nil { // not reading trailer\n-\t\treturn nil\n-\t}\n-\n-\t// TODO(petar): Put trailer reader code here\n-\n \treturn nil\n }", "previous_filename": "libgo/go/http/transfer.go"}, {"sha": "da5244b2c12ed0e7ea18b9f4015733069bc543a2", "filename": "libgo/go/net/http/transport.go", "status": "renamed", "additions": 26, "deletions": 30, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ftransport.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ftransport.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ftransport.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -20,10 +20,10 @@ import (\n \t\"io/ioutil\"\n \t\"log\"\n \t\"net\"\n+\t\"net/url\"\n \t\"os\"\n \t\"strings\"\n \t\"sync\"\n-\t\"url\"\n )\n \n // DefaultTransport is the default implementation of Transport and is\n@@ -372,7 +372,7 @@ func (t *Transport) getConn(cm *connectMethod) (*persistConn, error) {\n \t}\n \n \tpconn.br = bufio.NewReader(pconn.conn)\n-\tpconn.cc = NewClientConn(conn, pconn.br)\n+\tpconn.bw = bufio.NewWriter(pconn.conn)\n \tgo pconn.readLoop()\n \treturn pconn, nil\n }\n@@ -474,8 +474,8 @@ type persistConn struct {\n \tt        *Transport\n \tcacheKey string // its connectMethod.String()\n \tconn     net.Conn\n-\tcc       *ClientConn\n-\tbr       *bufio.Reader\n+\tbr       *bufio.Reader       // from conn\n+\tbw       *bufio.Writer       // to conn\n \treqch    chan requestAndChan // written by roundTrip(); read by readLoop()\n \tisProxy  bool\n \n@@ -515,6 +515,8 @@ func remoteSideClosed(err error) bool {\n \n func (pc *persistConn) readLoop() {\n \talive := true\n+\tvar lastbody io.ReadCloser // last response body, if any, read on this connection\n+\n \tfor alive {\n \t\tpb, err := pc.br.Peek(1)\n \t\tif err != nil {\n@@ -533,40 +535,40 @@ func (pc *persistConn) readLoop() {\n \t\t}\n \n \t\trc := <-pc.reqch\n-\t\tresp, err := pc.cc.readUsing(rc.req, func(buf *bufio.Reader, forReq *Request) (*Response, error) {\n-\t\t\tresp, err := ReadResponse(buf, forReq)\n-\t\t\tif err != nil || resp.ContentLength == 0 {\n-\t\t\t\treturn resp, err\n-\t\t\t}\n+\n+\t\t// Advance past the previous response's body, if the\n+\t\t// caller hasn't done so.\n+\t\tif lastbody != nil {\n+\t\t\tlastbody.Close() // assumed idempotent\n+\t\t\tlastbody = nil\n+\t\t}\n+\t\tresp, err := ReadResponse(pc.br, rc.req)\n+\n+\t\tif err == nil {\n \t\t\tif rc.addedGzip && resp.Header.Get(\"Content-Encoding\") == \"gzip\" {\n \t\t\t\tresp.Header.Del(\"Content-Encoding\")\n \t\t\t\tresp.Header.Del(\"Content-Length\")\n \t\t\t\tresp.ContentLength = -1\n-\t\t\t\tgzReader, err := gzip.NewReader(resp.Body)\n+\t\t\t\tgzReader, zerr := gzip.NewReader(resp.Body)\n \t\t\t\tif err != nil {\n \t\t\t\t\tpc.close()\n-\t\t\t\t\treturn nil, err\n+\t\t\t\t\terr = zerr\n+\t\t\t\t} else {\n+\t\t\t\t\tresp.Body = &readFirstCloseBoth{&discardOnCloseReadCloser{gzReader}, resp.Body}\n \t\t\t\t}\n-\t\t\t\tresp.Body = &readFirstCloseBoth{&discardOnCloseReadCloser{gzReader}, resp.Body}\n \t\t\t}\n \t\t\tresp.Body = &bodyEOFSignal{body: resp.Body}\n-\t\t\treturn resp, err\n-\t\t})\n+\t\t}\n \n-\t\tif err == ErrPersistEOF {\n-\t\t\t// Succeeded, but we can't send any more\n-\t\t\t// persistent connections on this again.  We\n-\t\t\t// hide this error to upstream callers.\n-\t\t\talive = false\n-\t\t\terr = nil\n-\t\t} else if err != nil || rc.req.Close {\n+\t\tif err != nil || resp.Close || rc.req.Close {\n \t\t\talive = false\n \t\t}\n \n \t\thasBody := resp != nil && resp.ContentLength != 0\n \t\tvar waitForBodyRead chan bool\n \t\tif alive {\n \t\t\tif hasBody {\n+\t\t\t\tlastbody = resp.Body\n \t\t\t\twaitForBodyRead = make(chan bool)\n \t\t\t\tresp.Body.(*bodyEOFSignal).fn = func() {\n \t\t\t\t\tpc.t.putIdleConn(pc)\n@@ -580,9 +582,7 @@ func (pc *persistConn) readLoop() {\n \t\t\t\t// loop, otherwise it might close the body\n \t\t\t\t// before the client code has had a chance to\n \t\t\t\t// read it (even though it'll just be 0, EOF).\n-\t\t\t\tpc.cc.lk.Lock()\n-\t\t\t\tpc.cc.lastbody = nil\n-\t\t\t\tpc.cc.lk.Unlock()\n+\t\t\t\tlastbody = nil\n \n \t\t\t\tpc.t.putIdleConn(pc)\n \t\t\t}\n@@ -635,15 +635,12 @@ func (pc *persistConn) roundTrip(req *transportRequest) (resp *Response, err err\n \tpc.numExpectedResponses++\n \tpc.lk.Unlock()\n \n-\tpc.cc.writeReq = func(r *Request, w io.Writer) error {\n-\t\treturn r.write(w, pc.isProxy, req.extra)\n-\t}\n-\n-\terr = pc.cc.Write(req.Request)\n+\terr = req.Request.write(pc.bw, pc.isProxy, req.extra)\n \tif err != nil {\n \t\tpc.close()\n \t\treturn\n \t}\n+\tpc.bw.Flush()\n \n \tch := make(chan responseAndError, 1)\n \tpc.reqch <- requestAndChan{req.Request, ch, requestedGzip}\n@@ -659,7 +656,6 @@ func (pc *persistConn) close() {\n \tpc.lk.Lock()\n \tdefer pc.lk.Unlock()\n \tpc.broken = true\n-\tpc.cc.Close()\n \tpc.conn.Close()\n \tpc.mutateHeaderFunc = nil\n }", "previous_filename": "libgo/go/http/transport.go"}, {"sha": "772979724492bd20d020f5076f19251067aa3c95", "filename": "libgo/go/net/http/transport_test.go", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ftransport_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ftransport_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ftransport_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -11,15 +11,15 @@ import (\n \t\"compress/gzip\"\n \t\"crypto/rand\"\n \t\"fmt\"\n-\t. \"http\"\n-\t\"http/httptest\"\n \t\"io\"\n \t\"io/ioutil\"\n+\t. \"net/http\"\n+\t\"net/http/httptest\"\n+\t\"net/url\"\n \t\"strconv\"\n \t\"strings\"\n \t\"testing\"\n \t\"time\"\n-\t\"url\"\n )\n \n // TODO: test 5 pipelined requests with responses: 1) OK, 2) OK, Connection: Close", "previous_filename": "libgo/go/http/transport_test.go"}, {"sha": "2a20d2224ae47c692fba2c34cd022287ac906381", "filename": "libgo/go/net/http/transport_windows.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ftransport_windows.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ftransport_windows.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ftransport_windows.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,8 +5,8 @@\n package http\n \n import (\n-\t\"os\"\n \t\"net\"\n+\t\"os\"\n )\n \n func init() {", "previous_filename": "libgo/go/http/transport_windows.go"}, {"sha": "994fc0e32f64df97943f30e25fb747d95cbcdfb1", "filename": "libgo/go/net/http/triv.go", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ftriv.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fhttp%2Ftriv.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ftriv.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -0,0 +1,149 @@\n+// Copyright 2009 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"bytes\"\n+\t\"expvar\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"io\"\n+\t\"log\"\n+\t\"net/http\"\n+\t\"os\"\n+\t\"strconv\"\n+)\n+\n+// hello world, the web server\n+var helloRequests = expvar.NewInt(\"hello-requests\")\n+\n+func HelloServer(w http.ResponseWriter, req *http.Request) {\n+\thelloRequests.Add(1)\n+\tio.WriteString(w, \"hello, world!\\n\")\n+}\n+\n+// Simple counter server. POSTing to it will set the value.\n+type Counter struct {\n+\tn int\n+}\n+\n+// This makes Counter satisfy the expvar.Var interface, so we can export\n+// it directly.\n+func (ctr *Counter) String() string { return fmt.Sprintf(\"%d\", ctr.n) }\n+\n+func (ctr *Counter) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n+\tswitch req.Method {\n+\tcase \"GET\":\n+\t\tctr.n++\n+\tcase \"POST\":\n+\t\tbuf := new(bytes.Buffer)\n+\t\tio.Copy(buf, req.Body)\n+\t\tbody := buf.String()\n+\t\tif n, err := strconv.Atoi(body); err != nil {\n+\t\t\tfmt.Fprintf(w, \"bad POST: %v\\nbody: [%v]\\n\", err, body)\n+\t\t} else {\n+\t\t\tctr.n = n\n+\t\t\tfmt.Fprint(w, \"counter reset\\n\")\n+\t\t}\n+\t}\n+\tfmt.Fprintf(w, \"counter = %d\\n\", ctr.n)\n+}\n+\n+// simple flag server\n+var booleanflag = flag.Bool(\"boolean\", true, \"another flag for testing\")\n+\n+func FlagServer(w http.ResponseWriter, req *http.Request) {\n+\tw.Header().Set(\"Content-Type\", \"text/plain; charset=utf-8\")\n+\tfmt.Fprint(w, \"Flags:\\n\")\n+\tflag.VisitAll(func(f *flag.Flag) {\n+\t\tif f.Value.String() != f.DefValue {\n+\t\t\tfmt.Fprintf(w, \"%s = %s [default = %s]\\n\", f.Name, f.Value.String(), f.DefValue)\n+\t\t} else {\n+\t\t\tfmt.Fprintf(w, \"%s = %s\\n\", f.Name, f.Value.String())\n+\t\t}\n+\t})\n+}\n+\n+// simple argument server\n+func ArgServer(w http.ResponseWriter, req *http.Request) {\n+\tfor _, s := range os.Args {\n+\t\tfmt.Fprint(w, s, \" \")\n+\t}\n+}\n+\n+// a channel (just for the fun of it)\n+type Chan chan int\n+\n+func ChanCreate() Chan {\n+\tc := make(Chan)\n+\tgo func(c Chan) {\n+\t\tfor x := 0; ; x++ {\n+\t\t\tc <- x\n+\t\t}\n+\t}(c)\n+\treturn c\n+}\n+\n+func (ch Chan) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n+\tio.WriteString(w, fmt.Sprintf(\"channel send #%d\\n\", <-ch))\n+}\n+\n+// exec a program, redirecting output\n+func DateServer(rw http.ResponseWriter, req *http.Request) {\n+\trw.Header().Set(\"Content-Type\", \"text/plain; charset=utf-8\")\n+\tr, w, err := os.Pipe()\n+\tif err != nil {\n+\t\tfmt.Fprintf(rw, \"pipe: %s\\n\", err)\n+\t\treturn\n+\t}\n+\n+\tp, err := os.StartProcess(\"/bin/date\", []string{\"date\"}, &os.ProcAttr{Files: []*os.File{nil, w, w}})\n+\tdefer r.Close()\n+\tw.Close()\n+\tif err != nil {\n+\t\tfmt.Fprintf(rw, \"fork/exec: %s\\n\", err)\n+\t\treturn\n+\t}\n+\tdefer p.Release()\n+\tio.Copy(rw, r)\n+\twait, err := p.Wait(0)\n+\tif err != nil {\n+\t\tfmt.Fprintf(rw, \"wait: %s\\n\", err)\n+\t\treturn\n+\t}\n+\tif !wait.Exited() || wait.ExitStatus() != 0 {\n+\t\tfmt.Fprintf(rw, \"date: %v\\n\", wait)\n+\t\treturn\n+\t}\n+}\n+\n+func Logger(w http.ResponseWriter, req *http.Request) {\n+\tlog.Print(req.URL.Raw)\n+\tw.WriteHeader(404)\n+\tw.Write([]byte(\"oops\"))\n+}\n+\n+var webroot = flag.String(\"root\", \"/home/rsc\", \"web root directory\")\n+\n+func main() {\n+\tflag.Parse()\n+\n+\t// The counter is published as a variable directly.\n+\tctr := new(Counter)\n+\thttp.Handle(\"/counter\", ctr)\n+\texpvar.Publish(\"counter\", ctr)\n+\n+\thttp.Handle(\"/\", http.HandlerFunc(Logger))\n+\thttp.Handle(\"/go/\", http.StripPrefix(\"/go/\", http.FileServer(http.Dir(*webroot))))\n+\thttp.Handle(\"/flags\", http.HandlerFunc(FlagServer))\n+\thttp.Handle(\"/args\", http.HandlerFunc(ArgServer))\n+\thttp.Handle(\"/go/hello\", http.HandlerFunc(HelloServer))\n+\thttp.Handle(\"/chan\", ChanCreate())\n+\thttp.Handle(\"/date\", http.HandlerFunc(DateServer))\n+\terr := http.ListenAndServe(\":12345\", nil)\n+\tif err != nil {\n+\t\tlog.Panicln(\"ListenAndServe:\", err)\n+\t}\n+}"}, {"sha": "df647ef73c0f8fda053474f95454209a1358c646", "filename": "libgo/go/net/ip_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fip_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fip_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fip_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -7,8 +7,8 @@ package net\n import (\n \t\"bytes\"\n \t\"reflect\"\n-\t\"testing\"\n \t\"runtime\"\n+\t\"testing\"\n )\n \n func isEqual(a, b []byte) bool {"}, {"sha": "9a39ca8a1eb46e4757c4042516c3ad643e1fcf10", "filename": "libgo/go/net/lookup_test.go", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Flookup_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Flookup_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Flookup_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -52,10 +52,6 @@ func TestGmailMX(t *testing.T) {\n }\n \n func TestGmailTXT(t *testing.T) {\n-\tif runtime.GOOS == \"windows\" {\n-\t\tt.Logf(\"LookupTXT is not implemented on Windows\")\n-\t\treturn\n-\t}\n \tif testing.Short() || avoidMacFirewall {\n \t\tt.Logf(\"skipping test to avoid external network\")\n \t\treturn"}, {"sha": "61d8a8871e1d4ac80d23fb419f84c3090637c73a", "filename": "libgo/go/net/lookup_windows.go", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Flookup_windows.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Flookup_windows.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Flookup_windows.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,11 +5,10 @@\n package net\n \n import (\n-\t\"errors\"\n-\t\"syscall\"\n-\t\"unsafe\"\n \t\"os\"\n \t\"sync\"\n+\t\"syscall\"\n+\t\"unsafe\"\n )\n \n var (\n@@ -81,7 +80,7 @@ func LookupPort(network, service string) (port int, err error) {\n func LookupCNAME(name string) (cname string, err error) {\n \tvar r *syscall.DNSRecord\n \te := syscall.DnsQuery(name, syscall.DNS_TYPE_CNAME, 0, nil, &r, nil)\n-\tif int(e) != 0 {\n+\tif e != 0 {\n \t\treturn \"\", os.NewSyscallError(\"LookupCNAME\", int(e))\n \t}\n \tdefer syscall.DnsRecordListFree(r, 1)\n@@ -110,7 +109,7 @@ func LookupSRV(service, proto, name string) (cname string, addrs []*SRV, err err\n \t}\n \tvar r *syscall.DNSRecord\n \te := syscall.DnsQuery(target, syscall.DNS_TYPE_SRV, 0, nil, &r, nil)\n-\tif int(e) != 0 {\n+\tif e != 0 {\n \t\treturn \"\", nil, os.NewSyscallError(\"LookupSRV\", int(e))\n \t}\n \tdefer syscall.DnsRecordListFree(r, 1)\n@@ -126,7 +125,7 @@ func LookupSRV(service, proto, name string) (cname string, addrs []*SRV, err err\n func LookupMX(name string) (mx []*MX, err error) {\n \tvar r *syscall.DNSRecord\n \te := syscall.DnsQuery(name, syscall.DNS_TYPE_MX, 0, nil, &r, nil)\n-\tif int(e) != 0 {\n+\tif e != 0 {\n \t\treturn nil, os.NewSyscallError(\"LookupMX\", int(e))\n \t}\n \tdefer syscall.DnsRecordListFree(r, 1)\n@@ -140,7 +139,21 @@ func LookupMX(name string) (mx []*MX, err error) {\n }\n \n func LookupTXT(name string) (txt []string, err error) {\n-\treturn nil, errors.New(\"net.LookupTXT is not implemented on Windows\")\n+\tvar r *syscall.DNSRecord\n+\te := syscall.DnsQuery(name, syscall.DNS_TYPE_TEXT, 0, nil, &r, nil)\n+\tif e != 0 {\n+\t\treturn nil, os.NewSyscallError(\"LookupTXT\", int(e))\n+\t}\n+\tdefer syscall.DnsRecordListFree(r, 1)\n+\ttxt = make([]string, 0, 10)\n+\tif r != nil && r.Type == syscall.DNS_TYPE_TEXT {\n+\t\td := (*syscall.DNSTXTData)(unsafe.Pointer(&r.Data[0]))\n+\t\tfor _, v := range (*[1 << 10]*uint16)(unsafe.Pointer(&(d.StringArray[0])))[:d.StringCount] {\n+\t\t\ts := syscall.UTF16ToString((*[1 << 20]uint16)(unsafe.Pointer(v))[:])\n+\t\t\ttxt = append(txt, s)\n+\t\t}\n+\t}\n+\treturn\n }\n \n func LookupAddr(addr string) (name []string, err error) {\n@@ -150,7 +163,7 @@ func LookupAddr(addr string) (name []string, err error) {\n \t}\n \tvar r *syscall.DNSRecord\n \te := syscall.DnsQuery(arpa, syscall.DNS_TYPE_PTR, 0, nil, &r, nil)\n-\tif int(e) != 0 {\n+\tif e != 0 {\n \t\treturn nil, os.NewSyscallError(\"LookupAddr\", int(e))\n \t}\n \tdefer syscall.DnsRecordListFree(r, 1)"}, {"sha": "95246b2fa1dd460bf2ad4a1ec009ab7b8e2597fd", "filename": "libgo/go/net/mail/message.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fmail%2Fmessage.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fmail%2Fmessage.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fmail%2Fmessage.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/mail/message.go"}, {"sha": "5653647b8cce0fc7d25d2fccd05929c881d48e37", "filename": "libgo/go/net/mail/message_test.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fmail%2Fmessage_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fmail%2Fmessage_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fmail%2Fmessage_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "previous_filename": "libgo/go/mail/message_test.go"}, {"sha": "d09ebf06f132f43a4ece72498d2e9f1b70e16ef8", "filename": "libgo/go/net/net_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fnet_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fnet_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fnet_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -147,7 +147,7 @@ func TestShutdown(t *testing.T) {\n \t\tvar buf [10]byte\n \t\tn, err := c.Read(buf[:])\n \t\tif n != 0 || err != io.EOF {\n-\t\t\tt.Fatalf(\"server Read = %d, %v; want 0, os.EOF\", n, err)\n+\t\t\tt.Fatalf(\"server Read = %d, %v; want 0, io.EOF\", n, err)\n \t\t}\n \t\tc.Write([]byte(\"response\"))\n \t\tc.Close()"}, {"sha": "dfbaba4d9e8db7580dc0036933cacbf711904621", "filename": "libgo/go/net/parse_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fparse_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Fparse_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fparse_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -7,8 +7,8 @@ package net\n import (\n \t\"bufio\"\n \t\"os\"\n-\t\"testing\"\n \t\"runtime\"\n+\t\"testing\"\n )\n \n func TestReadLine(t *testing.T) {"}, {"sha": "6fb414e089cdeb9b25d0e00a8b0e85138af9019a", "filename": "libgo/go/net/rpc/client.go", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Frpc%2Fclient.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Frpc%2Fclient.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Frpc%2Fclient.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -6,12 +6,12 @@ package rpc\n \n import (\n \t\"bufio\"\n+\t\"encoding/gob\"\n \t\"errors\"\n-\t\"gob\"\n-\t\"http\"\n \t\"io\"\n \t\"log\"\n \t\"net\"\n+\t\"net/http\"\n \t\"sync\"\n )\n ", "previous_filename": "libgo/go/rpc/client.go"}, {"sha": "663663fe941f72f34a39cfb19cf112e6b3cb473e", "filename": "libgo/go/net/rpc/debug.go", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Frpc%2Fdebug.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Frpc%2Fdebug.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Frpc%2Fdebug.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -11,9 +11,9 @@ package rpc\n \n import (\n \t\"fmt\"\n-\t\"http\"\n+\t\"net/http\"\n \t\"sort\"\n-\t\"template\"\n+\t\"text/template\"\n )\n \n const debugText = `<html>", "previous_filename": "libgo/go/rpc/debug.go"}, {"sha": "e6c7441f06b0a6bfde10ed7a7cc98e595363b385", "filename": "libgo/go/net/rpc/jsonrpc/all_test.go", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Frpc%2Fjsonrpc%2Fall_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Frpc%2Fjsonrpc%2Fall_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Frpc%2Fjsonrpc%2Fall_test.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,12 +5,12 @@\n package jsonrpc\n \n import (\n+\t\"encoding/json\"\n \t\"errors\"\n \t\"fmt\"\n \t\"io\"\n-\t\"json\"\n \t\"net\"\n-\t\"rpc\"\n+\t\"net/rpc\"\n \t\"testing\"\n )\n ", "previous_filename": "libgo/go/rpc/jsonrpc/all_test.go"}, {"sha": "3fa8cbf08a37bfb53308d6deaa6fd10f7e8a88d6", "filename": "libgo/go/net/rpc/jsonrpc/client.go", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Frpc%2Fjsonrpc%2Fclient.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Frpc%2Fjsonrpc%2Fclient.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Frpc%2Fjsonrpc%2Fclient.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -7,11 +7,11 @@\n package jsonrpc\n \n import (\n+\t\"encoding/json\"\n \t\"fmt\"\n \t\"io\"\n-\t\"json\"\n \t\"net\"\n-\t\"rpc\"\n+\t\"net/rpc\"\n \t\"sync\"\n )\n ", "previous_filename": "libgo/go/rpc/jsonrpc/client.go"}, {"sha": "4c54553a7238f583201e86bc4c0584f13dacc324", "filename": "libgo/go/net/rpc/jsonrpc/server.go", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Frpc%2Fjsonrpc%2Fserver.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Frpc%2Fjsonrpc%2Fserver.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Frpc%2Fjsonrpc%2Fserver.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -5,10 +5,10 @@\n package jsonrpc\n \n import (\n+\t\"encoding/json\"\n \t\"errors\"\n \t\"io\"\n-\t\"json\"\n-\t\"rpc\"\n+\t\"net/rpc\"\n \t\"sync\"\n )\n ", "previous_filename": "libgo/go/rpc/jsonrpc/server.go"}, {"sha": "920ae9137a676cd06a7426dd166328cd3c882bb9", "filename": "libgo/go/net/rpc/server.go", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Frpc%2Fserver.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c63abc9a1d127f95162756467284cf76b47aff8/libgo%2Fgo%2Fnet%2Frpc%2Fserver.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Frpc%2Fserver.go?ref=9c63abc9a1d127f95162756467284cf76b47aff8", "patch": "@@ -114,17 +114,17 @@ package rpc\n \n import (\n \t\"bufio\"\n+\t\"encoding/gob\"\n \t\"errors\"\n-\t\"gob\"\n-\t\"http\"\n \t\"io\"\n \t\"log\"\n \t\"net\"\n+\t\"net/http\"\n \t\"reflect\"\n \t\"strings\"\n \t\"sync\"\n \t\"unicode\"\n-\t\"utf8\"\n+\t\"unicode/utf8\"\n )\n \n const (", "previous_filename": "libgo/go/rpc/server.go"}]}