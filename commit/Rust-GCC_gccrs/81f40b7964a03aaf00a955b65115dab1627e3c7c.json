{"sha": "81f40b7964a03aaf00a955b65115dab1627e3c7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFmNDBiNzk2NGEwM2FhZjAwYTk1NWI2NTExNWRhYjE2MjdlM2M3Yw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2009-04-27T20:25:48Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2009-04-27T20:25:48Z"}, "message": "collect2.c (is_ctor_dtor): Change type of ret field in struct names to symkind.\n\n./:\t* collect2.c (is_ctor_dtor): Change type of ret field in struct\n\tnames to symkind.\n\t* dce.c (run_fast_df_dce): Change type of old_flags to int.\n\t* df-core.c (df_set_flags): Change return type to int.  Change\n\ttype of old_flags to int.\n\t(df_clear_flags): Likewise.\n\t* df-scan.c (df_def_record_1): Change 0 to VOIDmode.\n\t(df_get_conditional_uses): Likewise.\n\t* df.h (df_set_flags, df_clear_flags): Update declarations.\n\t* dwarf2out.c (struct indirect_string_node): Change type of form\n\tfield to enum dwarf_form.\n\t(AT_string_form): Change return type to enum dwarf_form.\n\t* fixed-value.c (fixed_compare): Add cast to enum type.\n\t* fwprop.c (update_df): Change 0 to VOIDmode.\n\t* gensupport.c: Change 0 to UNKNOWN.\n\t* gimple.h (gimple_cond_code): Add cast to enum type.\n\t* haifa-sched.c (reemit_notes): Add cast to enum type.\n\t* hooks.c (hook_int_void_no_regs): Remove function.\n\t* hooks.h (hook_int_void_no_regs): Remove declaration.\n\t* optabs.c (expand_widen_pattern_expr): Change 0 to VOIDmode.\n\t* predict.c (combine_predictions_for_insn): Add casts to enum\n\ttype.\n\t* real.c (real_arithmetic): Add cast to enum type.\n\t(real_compare): Likewise.\n\t* target.h (struct gcc_target): Change return type of\n\tbranch_target_register_class to enum reg_class.\n\t* target-def.h (TARGET_BRANCH_TARGET_REGISTER_CLASS): Define as\n\tdefault_branch_target_register_class.\n\t* targhooks.c (default_branch_target_register_class): New\n\tfunction.\n\t* targhooks.h (default_branch_target_register_class): Declare.\n\t* tree-data-ref.c (print_direction_vector): Add cast to enum\n\ttype.\n\t* tree-vect-data-refs.c (vect_supportable_dr_alignment): Remove\n\tcast to int.\n\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Change 0 to\n\tERROR_MARK.\n\t* tree-vect-slp.c (vect_build_slp_tree): Change 0 to\n\tvect_uninitialized_def.  Change 0 to ERROR_MARK.\n\t* tree-vect-stmts.c (supportable_widening_operation): Don't\n\tinitialize icode1 and icode2.\n\t* tree-vectorizer.h (enum vect_def_type): Add\n\tvect_uninitialized_def.\n\t* config/sol2-c.c (cmn_err_length_specs): Change 0 to FMT_LEN_none\n\tand to STD_C89.\n\t(cmn_err_flag_specs): Change 0 to STD_C89.\n\t(cmn_err_char_table): Likewise.\n\t* config/arm/arm.c (get_arm_condition_code): Change type of code\n\tto enum arm_cond_code.\n\t(IWMMXT_BUILTIN): Change 0 to UNKNOWN.\n\t(IWMMXT_BUILTIN2): Likewise.\n\t(neon_builtin_type_bits): Don't define typedef.\n\t(neon_builtin_datum): Change type of bits field to int.\n\t(arm_expand_neon_args): Add cast to enum type.\n\t* config/ia64/ia64.c (tls_symbolic_operand_type): Change 0 to\n\tTLS_MODEL_NONE.\n\t* config/i386/i386.c (bdesc_multi_arg): Change 0 to UNKNOWN.  Add\n\tcasts to enum type.\n\t* config/mips/mips.c (LOONGSON_BUILTIN_ALIAS): Change 0 to\n\tMIPS_FP_COND_f.\n\t* config/mips/mips.md (jal_macro): Return enum constant.\n\t(single_insn): Likewise.\n\t* config/rs6000/rs6000.c (bdesc_altivec_preds): Change 0 to\n\tCODE_FOR_nothing.\n\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n\tcasts to enum type.\n\t* config/s390/s390.c (s390_tune_flags): Change type to int.\n\t(s390_arch_flags): Likewise.\n\t(s390_handle_arch_option): Change flags field of struct pta to\n\tint.\n\t* config/s390/s390.h (s390_tune_flags): Update declaration.\n\t(s390_arch_flags): Likewise.\n\t* config/sh/sh.c (prepare_move_operands): Compare\n\ttls_symbolic_operand result with enum constant.\n\t(sh_reorg): Change PUT_MODE to PUT_REG_NOTE_KIND.\n\t(sh_expand_prologue): Add cast to enum type.\n\t(sh_expand_epilogue): Likewise.\n\t(tls_symbolic_operand): Change return type to enum tls_model.\n\t(fpscr_set_from_mem): Add cast to enum type.\n\t(legitimize_pic_address): Compare tls_symbolic_operand result with\n\tenum constant.\n\t(sh_target_reg_class): Change return type to enum reg_class.\n\t* config/sh/sh.h (OVERRIDE_OPTIONS): Change CPU_xxx to\n\tPROCESSOR_xxx.\n\t* config/sh/sh-protos.h (tls_symbolic_operand): Update\n\tdeclaration.\n\t* config/sparc/sparc.c (sparc_override_options): Add cast to enum\n\ttype.\n\t* config/sparc/sparc.md (empty_delay_slot): Return enum constant.\n\t(pic, calls_alloca, calls_eh_return, leaf_function): Likewise.\n\t(delayed_branch, tls_call_delay): Likewise.\n\t(eligible_for_sibcall_delay): Likewise.\n\t(eligible_for_return_delay): Likewise. \n\t* config/spu/spu.c (expand_builtin_args): Add cast to enum type.\n\t(spu_expand_builtin_1): Likewise.\n\n\t* c-typeck.c (convert_for_assignment): Issue -Wc++-compat warnings\n\tfor all types of conversions.\n\t(output_init_element): Issue -Wc++-compat warning if needed when\n\tinitializing a bitfield with enum type.\n\t* c-parser.c (c_parser_expression): Set original_type to\n\toriginal_type of right hand operand of comman operator.\ncp/:\n\t* semantics.c (finish_omp_clauses): Change type of c_kind to enum\n\tomp_clause_code.\nfortran/:\n\t* trans-intrinsic.c (DEFINE_MATH_BUILTIN): Add casts to enum\n\ttype.\n\t* trans-io.c (st_parameter_field): Add casts to enum type.\njava/:\n\t* builtins.c (java_builtins): Add casts to enum type.\n\t* verify-impl.c (check_class_constant): Add cast to enum type.\n\t(check_constant, check_wide_constant): Likewise.\nobjc/:\n\t* objc-act.c (objc_gimplify_expr): Add casts to enum type.\ntestsuite/:\n\t* gcc.dg/Wcxx-compat-5.c: New testcase.\n\t* gcc.dg/Wcxx-compat-6.c: New testcase.\n\nFrom-SVN: r146855", "tree": {"sha": "bf6741382939726705c226fb0eb6107825fcd028", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf6741382939726705c226fb0eb6107825fcd028"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81f40b7964a03aaf00a955b65115dab1627e3c7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81f40b7964a03aaf00a955b65115dab1627e3c7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81f40b7964a03aaf00a955b65115dab1627e3c7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81f40b7964a03aaf00a955b65115dab1627e3c7c/comments", "author": null, "committer": null, "parents": [{"sha": "e4ae5e771755c397e05b87b8126293ca76a250bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ae5e771755c397e05b87b8126293ca76a250bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4ae5e771755c397e05b87b8126293ca76a250bc"}], "stats": {"total": 870, "additions": 604, "deletions": 266}, "files": [{"sha": "a084c481abe2c9f83915bd3d4234fa78bbf2600c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -1,3 +1,108 @@\n+2009-04-27  Ian Lance Taylor  <iant@google.com>\n+\n+\t* collect2.c (is_ctor_dtor): Change type of ret field in struct\n+\tnames to symkind.\n+\t* dce.c (run_fast_df_dce): Change type of old_flags to int.\n+\t* df-core.c (df_set_flags): Change return type to int.  Change\n+\ttype of old_flags to int.\n+\t(df_clear_flags): Likewise.\n+\t* df-scan.c (df_def_record_1): Change 0 to VOIDmode.\n+\t(df_get_conditional_uses): Likewise.\n+\t* df.h (df_set_flags, df_clear_flags): Update declarations.\n+\t* dwarf2out.c (struct indirect_string_node): Change type of form\n+\tfield to enum dwarf_form.\n+\t(AT_string_form): Change return type to enum dwarf_form.\n+\t* fixed-value.c (fixed_compare): Add cast to enum type.\n+\t* fwprop.c (update_df): Change 0 to VOIDmode.\n+\t* gensupport.c: Change 0 to UNKNOWN.\n+\t* gimple.h (gimple_cond_code): Add cast to enum type.\n+\t* haifa-sched.c (reemit_notes): Add cast to enum type.\n+\t* hooks.c (hook_int_void_no_regs): Remove function.\n+\t* hooks.h (hook_int_void_no_regs): Remove declaration.\n+\t* optabs.c (expand_widen_pattern_expr): Change 0 to VOIDmode.\n+\t* predict.c (combine_predictions_for_insn): Add casts to enum\n+\ttype.\n+\t* real.c (real_arithmetic): Add cast to enum type.\n+\t(real_compare): Likewise.\n+\t* target.h (struct gcc_target): Change return type of\n+\tbranch_target_register_class to enum reg_class.\n+\t* target-def.h (TARGET_BRANCH_TARGET_REGISTER_CLASS): Define as\n+\tdefault_branch_target_register_class.\n+\t* targhooks.c (default_branch_target_register_class): New\n+\tfunction.\n+\t* targhooks.h (default_branch_target_register_class): Declare.\n+\t* tree-data-ref.c (print_direction_vector): Add cast to enum\n+\ttype.\n+\t* tree-vect-data-refs.c (vect_supportable_dr_alignment): Remove\n+\tcast to int.\n+\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Change 0 to\n+\tERROR_MARK.\n+\t* tree-vect-slp.c (vect_build_slp_tree): Change 0 to\n+\tvect_uninitialized_def.  Change 0 to ERROR_MARK.\n+\t* tree-vect-stmts.c (supportable_widening_operation): Don't\n+\tinitialize icode1 and icode2.\n+\t* tree-vectorizer.h (enum vect_def_type): Add\n+\tvect_uninitialized_def.\n+\t* config/sol2-c.c (cmn_err_length_specs): Change 0 to FMT_LEN_none\n+\tand to STD_C89.\n+\t(cmn_err_flag_specs): Change 0 to STD_C89.\n+\t(cmn_err_char_table): Likewise.\n+\t* config/arm/arm.c (get_arm_condition_code): Change type of code\n+\tto enum arm_cond_code.\n+\t(IWMMXT_BUILTIN): Change 0 to UNKNOWN.\n+\t(IWMMXT_BUILTIN2): Likewise.\n+\t(neon_builtin_type_bits): Don't define typedef.\n+\t(neon_builtin_datum): Change type of bits field to int.\n+\t(arm_expand_neon_args): Add cast to enum type.\n+\t* config/ia64/ia64.c (tls_symbolic_operand_type): Change 0 to\n+\tTLS_MODEL_NONE.\n+\t* config/i386/i386.c (bdesc_multi_arg): Change 0 to UNKNOWN.  Add\n+\tcasts to enum type.\n+\t* config/mips/mips.c (LOONGSON_BUILTIN_ALIAS): Change 0 to\n+\tMIPS_FP_COND_f.\n+\t* config/mips/mips.md (jal_macro): Return enum constant.\n+\t(single_insn): Likewise.\n+\t* config/rs6000/rs6000.c (bdesc_altivec_preds): Change 0 to\n+\tCODE_FOR_nothing.\n+\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n+\tcasts to enum type.\n+\t* config/s390/s390.c (s390_tune_flags): Change type to int.\n+\t(s390_arch_flags): Likewise.\n+\t(s390_handle_arch_option): Change flags field of struct pta to\n+\tint.\n+\t* config/s390/s390.h (s390_tune_flags): Update declaration.\n+\t(s390_arch_flags): Likewise.\n+\t* config/sh/sh.c (prepare_move_operands): Compare\n+\ttls_symbolic_operand result with enum constant.\n+\t(sh_reorg): Change PUT_MODE to PUT_REG_NOTE_KIND.\n+\t(sh_expand_prologue): Add cast to enum type.\n+\t(sh_expand_epilogue): Likewise.\n+\t(tls_symbolic_operand): Change return type to enum tls_model.\n+\t(fpscr_set_from_mem): Add cast to enum type.\n+\t(legitimize_pic_address): Compare tls_symbolic_operand result with\n+\tenum constant.\n+\t(sh_target_reg_class): Change return type to enum reg_class.\n+\t* config/sh/sh.h (OVERRIDE_OPTIONS): Change CPU_xxx to\n+\tPROCESSOR_xxx.\n+\t* config/sh/sh-protos.h (tls_symbolic_operand): Update\n+\tdeclaration.\n+\t* config/sparc/sparc.c (sparc_override_options): Add cast to enum\n+\ttype.\n+\t* config/sparc/sparc.md (empty_delay_slot): Return enum constant.\n+\t(pic, calls_alloca, calls_eh_return, leaf_function): Likewise.\n+\t(delayed_branch, tls_call_delay): Likewise.\n+\t(eligible_for_sibcall_delay): Likewise.\n+\t(eligible_for_return_delay): Likewise. \n+\t* config/spu/spu.c (expand_builtin_args): Add cast to enum type.\n+\t(spu_expand_builtin_1): Likewise.\n+\n+\t* c-typeck.c (convert_for_assignment): Issue -Wc++-compat warnings\n+\tfor all types of conversions.\n+\t(output_init_element): Issue -Wc++-compat warning if needed when\n+\tinitializing a bitfield with enum type.\n+\t* c-parser.c (c_parser_expression): Set original_type to\n+\toriginal_type of right hand operand of comman operator.\n+\n 2009-04-27  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* doc/c-tree.texi (Types, Functions, Expression trees): Fix"}, {"sha": "cdc2cee4f68ea96676b356a013597569839c2369", "filename": "gcc/c-parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -5784,7 +5784,7 @@ c_parser_expression (c_parser *parser)\n       next = default_function_array_conversion (next);\n       expr.value = build_compound_expr (expr.value, next.value);\n       expr.original_code = COMPOUND_EXPR;\n-      expr.original_type = NULL;\n+      expr.original_type = next.original_type;\n     }\n   return expr;\n }"}, {"sha": "f5ee1ef8fd7458b55d87c33df3a5f0f17fec306a", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -4581,21 +4581,15 @@ convert_for_assignment (tree type, tree rhs, tree origtype,\n \t  && TREE_CODE (type) == ENUMERAL_TYPE\n \t  && TYPE_MAIN_VARIANT (checktype) != TYPE_MAIN_VARIANT (type))\n \t{\n-\t  /* FIXME: Until the gcc source code is converted, we only\n-\t     warn about assignment and parameter passing.  We will add\n-\t     the other cases when bootstrap succeeds with them.  */\n-\t  if (errtype == ic_argpass || errtype == ic_assign)\n-\t    {\n-\t      WARN_FOR_ASSIGNMENT (input_location, OPT_Wc___compat,\n-\t\t\t\t   G_(\"enum conversion when passing argument \"\n-\t\t\t\t      \"%d of %qE is invalid in C++\"),\n-\t\t\t\t   G_(\"enum conversion in assignment is \"\n-\t\t\t\t      \"invalid in C++\"),\n-\t\t\t\t   G_(\"enum conversion in initialization is \"\n-\t\t\t\t      \"invalid in C++\"),\n-\t\t\t\t   G_(\"enum conversion in return is \"\n-\t\t\t\t      \"invalid in C++\"));\n-\t    }\n+\t  WARN_FOR_ASSIGNMENT (input_location, OPT_Wc___compat,\n+\t\t\t       G_(\"enum conversion when passing argument \"\n+\t\t\t\t  \"%d of %qE is invalid in C++\"),\n+\t\t\t       G_(\"enum conversion in assignment is \"\n+\t\t\t\t  \"invalid in C++\"),\n+\t\t\t       G_(\"enum conversion in initialization is \"\n+\t\t\t\t  \"invalid in C++\"),\n+\t\t\t       G_(\"enum conversion in return is \"\n+\t\t\t\t  \"invalid in C++\"));\n \t}\n     }\n \n@@ -7024,6 +7018,24 @@ output_init_element (tree value, tree origtype, bool strict_string, tree type,\n     pedwarn_init (input_location, 0,\n \t\t  \"initializer element is not a constant expression\");\n \n+  /* Issue -Wc++-compat warnings about initializing a bitfield with\n+     enum type.  */\n+  if (warn_cxx_compat\n+      && field != NULL_TREE\n+      && TREE_CODE (field) == FIELD_DECL\n+      && DECL_BIT_FIELD_TYPE (field) != NULL_TREE\n+      && (TYPE_MAIN_VARIANT (DECL_BIT_FIELD_TYPE (field))\n+\t  != TYPE_MAIN_VARIANT (type))\n+      && TREE_CODE (DECL_BIT_FIELD_TYPE (field)) == ENUMERAL_TYPE)\n+    {\n+      tree checktype = origtype != NULL_TREE ? origtype : TREE_TYPE (value);\n+      if (checktype != error_mark_node\n+\t  && (TYPE_MAIN_VARIANT (checktype)\n+\t      != TYPE_MAIN_VARIANT (DECL_BIT_FIELD_TYPE (field))))\n+\twarning_init (OPT_Wc___compat,\n+\t\t      \"enum conversion in initialization is invalid in C++\");\n+    }\n+\n   /* If this field is empty (and not at the end of structure),\n      don't do anything other than checking the initializer.  */\n   if (field"}, {"sha": "277ddd6dc4c9791bfcafdb0066be0ac44635b237", "filename": "gcc/collect2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -1,7 +1,7 @@\n /* Collect static initialization info into data structures that can be\n    traversed by C++ initialization and finalization routines.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Chris Smith (csmith@convex.com).\n    Heavily modified by Michael Meissner (meissner@cygnus.com),\n@@ -538,7 +538,7 @@ dump_file (const char *name, FILE *to)\n static symkind\n is_ctor_dtor (const char *s)\n {\n-  struct names { const char *const name; const int len; const int ret;\n+  struct names { const char *const name; const int len; symkind ret;\n     const int two_underscores; };\n \n   const struct names *p;"}, {"sha": "0b4a06cd84caf95b304ba43156055c7e3fe8a876", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -14027,7 +14027,7 @@ static enum arm_cond_code\n get_arm_condition_code (rtx comparison)\n {\n   enum machine_mode mode = GET_MODE (XEXP (comparison, 0));\n-  int code;\n+  enum arm_cond_code code;\n   enum rtx_code comp_code = GET_CODE (comparison);\n \n   if (GET_MODE_CLASS (mode) != MODE_CC)\n@@ -14824,7 +14824,7 @@ static const struct builtin_description bdesc_2arg[] =\n {\n #define IWMMXT_BUILTIN(code, string, builtin) \\\n   { FL_IWMMXT, CODE_FOR_##code, \"__builtin_arm_\" string, \\\n-    ARM_BUILTIN_##builtin, 0, 0 },\n+    ARM_BUILTIN_##builtin, UNKNOWN, 0 },\n \n   IWMMXT_BUILTIN (addv8qi3, \"waddb\", WADDB)\n   IWMMXT_BUILTIN (addv4hi3, \"waddh\", WADDH)\n@@ -14886,7 +14886,7 @@ static const struct builtin_description bdesc_2arg[] =\n   IWMMXT_BUILTIN (iwmmxt_wmaddu, \"wmaddu\", WMADDU)\n \n #define IWMMXT_BUILTIN2(code, builtin) \\\n-  { FL_IWMMXT, CODE_FOR_##code, NULL, ARM_BUILTIN_##builtin, 0, 0 },\n+  { FL_IWMMXT, CODE_FOR_##code, NULL, ARM_BUILTIN_##builtin, UNKNOWN, 0 },\n \n   IWMMXT_BUILTIN2 (iwmmxt_wpackhss, WPACKHSS)\n   IWMMXT_BUILTIN2 (iwmmxt_wpackwss, WPACKWSS)\n@@ -15283,7 +15283,7 @@ arm_init_tls_builtins (void)\n   TREE_READONLY (decl) = 1;\n }\n \n-typedef enum {\n+enum neon_builtin_type_bits {\n   T_V8QI  = 0x0001,\n   T_V4HI  = 0x0002,\n   T_V2SI  = 0x0004,\n@@ -15297,7 +15297,7 @@ typedef enum {\n   T_TI\t  = 0x0400,\n   T_EI\t  = 0x0800,\n   T_OI\t  = 0x1000\n-} neon_builtin_type_bits;\n+};\n \n #define v8qi_UP  T_V8QI\n #define v4hi_UP  T_V4HI\n@@ -15360,7 +15360,7 @@ typedef enum {\n typedef struct {\n   const char *name;\n   const neon_itype itype;\n-  const neon_builtin_type_bits bits;\n+  const int bits;\n   const enum insn_code codes[T_MAX];\n   const unsigned int num_vars;\n   unsigned int base_fcode;\n@@ -16277,7 +16277,7 @@ arm_expand_neon_args (rtx target, int icode, int have_retval,\n \n   for (;;)\n     {\n-      builtin_arg thisarg = va_arg (ap, int);\n+      builtin_arg thisarg = (builtin_arg) va_arg (ap, int);\n \n       if (thisarg == NEON_ARG_STOP)\n         break;"}, {"sha": "704b0f2d9184ae327f44dd0fb06b10a5a4ecc6d0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 101, "deletions": 101, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -21979,81 +21979,81 @@ enum multi_arg_type {\n \n static const struct builtin_description bdesc_multi_arg[] =\n {\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfmaddv4sf4,     \"__builtin_ia32_fmaddss\",    IX86_BUILTIN_FMADDSS,    0,            (int)MULTI_ARG_3_SF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfmaddv2df4,     \"__builtin_ia32_fmaddsd\",    IX86_BUILTIN_FMADDSD,    0,            (int)MULTI_ARG_3_DF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fmaddv4sf4,       \"__builtin_ia32_fmaddps\",    IX86_BUILTIN_FMADDPS,    0,            (int)MULTI_ARG_3_SF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fmaddv2df4,       \"__builtin_ia32_fmaddpd\",    IX86_BUILTIN_FMADDPD,    0,            (int)MULTI_ARG_3_DF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfmsubv4sf4,     \"__builtin_ia32_fmsubss\",    IX86_BUILTIN_FMSUBSS,    0,            (int)MULTI_ARG_3_SF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfmsubv2df4,     \"__builtin_ia32_fmsubsd\",    IX86_BUILTIN_FMSUBSD,    0,            (int)MULTI_ARG_3_DF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fmsubv4sf4,       \"__builtin_ia32_fmsubps\",    IX86_BUILTIN_FMSUBPS,    0,            (int)MULTI_ARG_3_SF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fmsubv2df4,       \"__builtin_ia32_fmsubpd\",    IX86_BUILTIN_FMSUBPD,    0,            (int)MULTI_ARG_3_DF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfnmaddv4sf4,    \"__builtin_ia32_fnmaddss\",   IX86_BUILTIN_FNMADDSS,   0,            (int)MULTI_ARG_3_SF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfnmaddv2df4,    \"__builtin_ia32_fnmaddsd\",   IX86_BUILTIN_FNMADDSD,   0,            (int)MULTI_ARG_3_DF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fnmaddv4sf4,      \"__builtin_ia32_fnmaddps\",   IX86_BUILTIN_FNMADDPS,   0,            (int)MULTI_ARG_3_SF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fnmaddv2df4,      \"__builtin_ia32_fnmaddpd\",   IX86_BUILTIN_FNMADDPD,   0,            (int)MULTI_ARG_3_DF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfnmsubv4sf4,    \"__builtin_ia32_fnmsubss\",   IX86_BUILTIN_FNMSUBSS,   0,            (int)MULTI_ARG_3_SF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfnmsubv2df4,    \"__builtin_ia32_fnmsubsd\",   IX86_BUILTIN_FNMSUBSD,   0,            (int)MULTI_ARG_3_DF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fnmsubv4sf4,      \"__builtin_ia32_fnmsubps\",   IX86_BUILTIN_FNMSUBPS,   0,            (int)MULTI_ARG_3_SF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fnmsubv2df4,      \"__builtin_ia32_fnmsubpd\",   IX86_BUILTIN_FNMSUBPD,   0,            (int)MULTI_ARG_3_DF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v2di,        \"__builtin_ia32_pcmov\",      IX86_BUILTIN_PCMOV,\t 0,            (int)MULTI_ARG_3_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v2di,        \"__builtin_ia32_pcmov_v2di\", IX86_BUILTIN_PCMOV_V2DI, 0,            (int)MULTI_ARG_3_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v4si,        \"__builtin_ia32_pcmov_v4si\", IX86_BUILTIN_PCMOV_V4SI, 0,            (int)MULTI_ARG_3_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v8hi,        \"__builtin_ia32_pcmov_v8hi\", IX86_BUILTIN_PCMOV_V8HI, 0,            (int)MULTI_ARG_3_HI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v16qi,       \"__builtin_ia32_pcmov_v16qi\",IX86_BUILTIN_PCMOV_V16QI,0,            (int)MULTI_ARG_3_QI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v2df,        \"__builtin_ia32_pcmov_v2df\", IX86_BUILTIN_PCMOV_V2DF, 0,            (int)MULTI_ARG_3_DF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v4sf,        \"__builtin_ia32_pcmov_v4sf\", IX86_BUILTIN_PCMOV_V4SF, 0,            (int)MULTI_ARG_3_SF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pperm,             \"__builtin_ia32_pperm\",      IX86_BUILTIN_PPERM,      0,            (int)MULTI_ARG_3_QI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_permv4sf,          \"__builtin_ia32_permps\",     IX86_BUILTIN_PERMPS,     0,            (int)MULTI_ARG_3_PERMPS },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_permv2df,          \"__builtin_ia32_permpd\",     IX86_BUILTIN_PERMPD,     0,            (int)MULTI_ARG_3_PERMPD },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacssww,          \"__builtin_ia32_pmacssww\",   IX86_BUILTIN_PMACSSWW,   0,            (int)MULTI_ARG_3_HI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacsww,           \"__builtin_ia32_pmacsww\",    IX86_BUILTIN_PMACSWW,    0,            (int)MULTI_ARG_3_HI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacsswd,          \"__builtin_ia32_pmacsswd\",   IX86_BUILTIN_PMACSSWD,   0,            (int)MULTI_ARG_3_HI_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacswd,           \"__builtin_ia32_pmacswd\",    IX86_BUILTIN_PMACSWD,    0,            (int)MULTI_ARG_3_HI_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacssdd,          \"__builtin_ia32_pmacssdd\",   IX86_BUILTIN_PMACSSDD,   0,            (int)MULTI_ARG_3_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacsdd,           \"__builtin_ia32_pmacsdd\",    IX86_BUILTIN_PMACSDD,    0,            (int)MULTI_ARG_3_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacssdql,         \"__builtin_ia32_pmacssdql\",  IX86_BUILTIN_PMACSSDQL,  0,            (int)MULTI_ARG_3_SI_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacssdqh,         \"__builtin_ia32_pmacssdqh\",  IX86_BUILTIN_PMACSSDQH,  0,            (int)MULTI_ARG_3_SI_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacsdql,          \"__builtin_ia32_pmacsdql\",   IX86_BUILTIN_PMACSDQL,   0,            (int)MULTI_ARG_3_SI_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacsdqh,          \"__builtin_ia32_pmacsdqh\",   IX86_BUILTIN_PMACSDQH,   0,            (int)MULTI_ARG_3_SI_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmadcsswd,         \"__builtin_ia32_pmadcsswd\",  IX86_BUILTIN_PMADCSSWD,  0,            (int)MULTI_ARG_3_HI_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmadcswd,          \"__builtin_ia32_pmadcswd\",   IX86_BUILTIN_PMADCSWD,   0,            (int)MULTI_ARG_3_HI_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vrotlv2di3,        \"__builtin_ia32_protq\",      IX86_BUILTIN_PROTQ,      0,            (int)MULTI_ARG_2_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vrotlv4si3,        \"__builtin_ia32_protd\",      IX86_BUILTIN_PROTD,      0,            (int)MULTI_ARG_2_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vrotlv8hi3,        \"__builtin_ia32_protw\",      IX86_BUILTIN_PROTW,      0,            (int)MULTI_ARG_2_HI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vrotlv16qi3,       \"__builtin_ia32_protb\",      IX86_BUILTIN_PROTB,      0,            (int)MULTI_ARG_2_QI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_rotlv2di3,         \"__builtin_ia32_protqi\",     IX86_BUILTIN_PROTQ_IMM,  0,            (int)MULTI_ARG_2_DI_IMM },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_rotlv4si3,         \"__builtin_ia32_protdi\",     IX86_BUILTIN_PROTD_IMM,  0,            (int)MULTI_ARG_2_SI_IMM },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_rotlv8hi3,         \"__builtin_ia32_protwi\",     IX86_BUILTIN_PROTW_IMM,  0,            (int)MULTI_ARG_2_HI_IMM },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_rotlv16qi3,        \"__builtin_ia32_protbi\",     IX86_BUILTIN_PROTB_IMM,  0,            (int)MULTI_ARG_2_QI_IMM },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_ashlv2di3,         \"__builtin_ia32_pshaq\",      IX86_BUILTIN_PSHAQ,      0,            (int)MULTI_ARG_2_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_ashlv4si3,         \"__builtin_ia32_pshad\",      IX86_BUILTIN_PSHAD,      0,            (int)MULTI_ARG_2_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_ashlv8hi3,         \"__builtin_ia32_pshaw\",      IX86_BUILTIN_PSHAW,      0,            (int)MULTI_ARG_2_HI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_ashlv16qi3,        \"__builtin_ia32_pshab\",      IX86_BUILTIN_PSHAB,      0,            (int)MULTI_ARG_2_QI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_lshlv2di3,         \"__builtin_ia32_pshlq\",      IX86_BUILTIN_PSHLQ,      0,            (int)MULTI_ARG_2_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_lshlv4si3,         \"__builtin_ia32_pshld\",      IX86_BUILTIN_PSHLD,      0,            (int)MULTI_ARG_2_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_lshlv8hi3,         \"__builtin_ia32_pshlw\",      IX86_BUILTIN_PSHLW,      0,            (int)MULTI_ARG_2_HI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_lshlv16qi3,        \"__builtin_ia32_pshlb\",      IX86_BUILTIN_PSHLB,      0,            (int)MULTI_ARG_2_QI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmfrczv4sf2,       \"__builtin_ia32_frczss\",     IX86_BUILTIN_FRCZSS,     0,            (int)MULTI_ARG_2_SF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmfrczv2df2,       \"__builtin_ia32_frczsd\",     IX86_BUILTIN_FRCZSD,     0,            (int)MULTI_ARG_2_DF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_frczv4sf2,         \"__builtin_ia32_frczps\",     IX86_BUILTIN_FRCZPS,     0,            (int)MULTI_ARG_1_SF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_frczv2df2,         \"__builtin_ia32_frczpd\",     IX86_BUILTIN_FRCZPD,     0,            (int)MULTI_ARG_1_DF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_cvtph2ps,          \"__builtin_ia32_cvtph2ps\",   IX86_BUILTIN_CVTPH2PS,   0,            (int)MULTI_ARG_1_PH2PS },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_cvtps2ph,          \"__builtin_ia32_cvtps2ph\",   IX86_BUILTIN_CVTPS2PH,   0,            (int)MULTI_ARG_1_PS2PH },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddbw,           \"__builtin_ia32_phaddbw\",    IX86_BUILTIN_PHADDBW,    0,            (int)MULTI_ARG_1_QI_HI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddbd,           \"__builtin_ia32_phaddbd\",    IX86_BUILTIN_PHADDBD,    0,            (int)MULTI_ARG_1_QI_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddbq,           \"__builtin_ia32_phaddbq\",    IX86_BUILTIN_PHADDBQ,    0,            (int)MULTI_ARG_1_QI_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddwd,           \"__builtin_ia32_phaddwd\",    IX86_BUILTIN_PHADDWD,    0,            (int)MULTI_ARG_1_HI_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddwq,           \"__builtin_ia32_phaddwq\",    IX86_BUILTIN_PHADDWQ,    0,            (int)MULTI_ARG_1_HI_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phadddq,           \"__builtin_ia32_phadddq\",    IX86_BUILTIN_PHADDDQ,    0,            (int)MULTI_ARG_1_SI_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddubw,          \"__builtin_ia32_phaddubw\",   IX86_BUILTIN_PHADDUBW,   0,            (int)MULTI_ARG_1_QI_HI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddubd,          \"__builtin_ia32_phaddubd\",   IX86_BUILTIN_PHADDUBD,   0,            (int)MULTI_ARG_1_QI_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddubq,          \"__builtin_ia32_phaddubq\",   IX86_BUILTIN_PHADDUBQ,   0,            (int)MULTI_ARG_1_QI_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phadduwd,          \"__builtin_ia32_phadduwd\",   IX86_BUILTIN_PHADDUWD,   0,            (int)MULTI_ARG_1_HI_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phadduwq,          \"__builtin_ia32_phadduwq\",   IX86_BUILTIN_PHADDUWQ,   0,            (int)MULTI_ARG_1_HI_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddudq,          \"__builtin_ia32_phaddudq\",   IX86_BUILTIN_PHADDUDQ,   0,            (int)MULTI_ARG_1_SI_DI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phsubbw,           \"__builtin_ia32_phsubbw\",    IX86_BUILTIN_PHSUBBW,    0,            (int)MULTI_ARG_1_QI_HI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phsubwd,           \"__builtin_ia32_phsubwd\",    IX86_BUILTIN_PHSUBWD,    0,            (int)MULTI_ARG_1_HI_SI },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phsubdq,           \"__builtin_ia32_phsubdq\",    IX86_BUILTIN_PHSUBDQ,    0,            (int)MULTI_ARG_1_SI_DI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfmaddv4sf4,     \"__builtin_ia32_fmaddss\",    IX86_BUILTIN_FMADDSS,    UNKNOWN,      (int)MULTI_ARG_3_SF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfmaddv2df4,     \"__builtin_ia32_fmaddsd\",    IX86_BUILTIN_FMADDSD,    UNKNOWN,      (int)MULTI_ARG_3_DF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fmaddv4sf4,       \"__builtin_ia32_fmaddps\",    IX86_BUILTIN_FMADDPS,    UNKNOWN,      (int)MULTI_ARG_3_SF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fmaddv2df4,       \"__builtin_ia32_fmaddpd\",    IX86_BUILTIN_FMADDPD,    UNKNOWN,      (int)MULTI_ARG_3_DF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfmsubv4sf4,     \"__builtin_ia32_fmsubss\",    IX86_BUILTIN_FMSUBSS,    UNKNOWN,      (int)MULTI_ARG_3_SF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfmsubv2df4,     \"__builtin_ia32_fmsubsd\",    IX86_BUILTIN_FMSUBSD,    UNKNOWN,      (int)MULTI_ARG_3_DF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fmsubv4sf4,       \"__builtin_ia32_fmsubps\",    IX86_BUILTIN_FMSUBPS,    UNKNOWN,      (int)MULTI_ARG_3_SF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fmsubv2df4,       \"__builtin_ia32_fmsubpd\",    IX86_BUILTIN_FMSUBPD,    UNKNOWN,      (int)MULTI_ARG_3_DF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfnmaddv4sf4,    \"__builtin_ia32_fnmaddss\",   IX86_BUILTIN_FNMADDSS,   UNKNOWN,      (int)MULTI_ARG_3_SF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfnmaddv2df4,    \"__builtin_ia32_fnmaddsd\",   IX86_BUILTIN_FNMADDSD,   UNKNOWN,      (int)MULTI_ARG_3_DF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fnmaddv4sf4,      \"__builtin_ia32_fnmaddps\",   IX86_BUILTIN_FNMADDPS,   UNKNOWN,      (int)MULTI_ARG_3_SF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fnmaddv2df4,      \"__builtin_ia32_fnmaddpd\",   IX86_BUILTIN_FNMADDPD,   UNKNOWN,      (int)MULTI_ARG_3_DF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfnmsubv4sf4,    \"__builtin_ia32_fnmsubss\",   IX86_BUILTIN_FNMSUBSS,   UNKNOWN,      (int)MULTI_ARG_3_SF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_vmfnmsubv2df4,    \"__builtin_ia32_fnmsubsd\",   IX86_BUILTIN_FNMSUBSD,   UNKNOWN,      (int)MULTI_ARG_3_DF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fnmsubv4sf4,      \"__builtin_ia32_fnmsubps\",   IX86_BUILTIN_FNMSUBPS,   UNKNOWN,      (int)MULTI_ARG_3_SF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5i_fnmsubv2df4,      \"__builtin_ia32_fnmsubpd\",   IX86_BUILTIN_FNMSUBPD,   UNKNOWN,      (int)MULTI_ARG_3_DF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v2di,        \"__builtin_ia32_pcmov\",      IX86_BUILTIN_PCMOV,\t UNKNOWN,      (int)MULTI_ARG_3_DI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v2di,        \"__builtin_ia32_pcmov_v2di\", IX86_BUILTIN_PCMOV_V2DI, UNKNOWN,      (int)MULTI_ARG_3_DI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v4si,        \"__builtin_ia32_pcmov_v4si\", IX86_BUILTIN_PCMOV_V4SI, UNKNOWN,      (int)MULTI_ARG_3_SI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v8hi,        \"__builtin_ia32_pcmov_v8hi\", IX86_BUILTIN_PCMOV_V8HI, UNKNOWN,      (int)MULTI_ARG_3_HI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v16qi,       \"__builtin_ia32_pcmov_v16qi\",IX86_BUILTIN_PCMOV_V16QI,UNKNOWN,      (int)MULTI_ARG_3_QI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v2df,        \"__builtin_ia32_pcmov_v2df\", IX86_BUILTIN_PCMOV_V2DF, UNKNOWN,      (int)MULTI_ARG_3_DF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcmov_v4sf,        \"__builtin_ia32_pcmov_v4sf\", IX86_BUILTIN_PCMOV_V4SF, UNKNOWN,      (int)MULTI_ARG_3_SF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pperm,             \"__builtin_ia32_pperm\",      IX86_BUILTIN_PPERM,      UNKNOWN,      (int)MULTI_ARG_3_QI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_permv4sf,          \"__builtin_ia32_permps\",     IX86_BUILTIN_PERMPS,     UNKNOWN,      (int)MULTI_ARG_3_PERMPS },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_permv2df,          \"__builtin_ia32_permpd\",     IX86_BUILTIN_PERMPD,     UNKNOWN,      (int)MULTI_ARG_3_PERMPD },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacssww,          \"__builtin_ia32_pmacssww\",   IX86_BUILTIN_PMACSSWW,   UNKNOWN,      (int)MULTI_ARG_3_HI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacsww,           \"__builtin_ia32_pmacsww\",    IX86_BUILTIN_PMACSWW,    UNKNOWN,      (int)MULTI_ARG_3_HI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacsswd,          \"__builtin_ia32_pmacsswd\",   IX86_BUILTIN_PMACSSWD,   UNKNOWN,      (int)MULTI_ARG_3_HI_SI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacswd,           \"__builtin_ia32_pmacswd\",    IX86_BUILTIN_PMACSWD,    UNKNOWN,      (int)MULTI_ARG_3_HI_SI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacssdd,          \"__builtin_ia32_pmacssdd\",   IX86_BUILTIN_PMACSSDD,   UNKNOWN,      (int)MULTI_ARG_3_SI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacsdd,           \"__builtin_ia32_pmacsdd\",    IX86_BUILTIN_PMACSDD,    UNKNOWN,      (int)MULTI_ARG_3_SI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacssdql,         \"__builtin_ia32_pmacssdql\",  IX86_BUILTIN_PMACSSDQL,  UNKNOWN,      (int)MULTI_ARG_3_SI_DI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacssdqh,         \"__builtin_ia32_pmacssdqh\",  IX86_BUILTIN_PMACSSDQH,  UNKNOWN,      (int)MULTI_ARG_3_SI_DI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacsdql,          \"__builtin_ia32_pmacsdql\",   IX86_BUILTIN_PMACSDQL,   UNKNOWN,      (int)MULTI_ARG_3_SI_DI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmacsdqh,          \"__builtin_ia32_pmacsdqh\",   IX86_BUILTIN_PMACSDQH,   UNKNOWN,      (int)MULTI_ARG_3_SI_DI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmadcsswd,         \"__builtin_ia32_pmadcsswd\",  IX86_BUILTIN_PMADCSSWD,  UNKNOWN,      (int)MULTI_ARG_3_HI_SI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pmadcswd,          \"__builtin_ia32_pmadcswd\",   IX86_BUILTIN_PMADCSWD,   UNKNOWN,      (int)MULTI_ARG_3_HI_SI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vrotlv2di3,        \"__builtin_ia32_protq\",      IX86_BUILTIN_PROTQ,      UNKNOWN,      (int)MULTI_ARG_2_DI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vrotlv4si3,        \"__builtin_ia32_protd\",      IX86_BUILTIN_PROTD,      UNKNOWN,      (int)MULTI_ARG_2_SI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vrotlv8hi3,        \"__builtin_ia32_protw\",      IX86_BUILTIN_PROTW,      UNKNOWN,      (int)MULTI_ARG_2_HI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vrotlv16qi3,       \"__builtin_ia32_protb\",      IX86_BUILTIN_PROTB,      UNKNOWN,      (int)MULTI_ARG_2_QI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_rotlv2di3,         \"__builtin_ia32_protqi\",     IX86_BUILTIN_PROTQ_IMM,  UNKNOWN,      (int)MULTI_ARG_2_DI_IMM },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_rotlv4si3,         \"__builtin_ia32_protdi\",     IX86_BUILTIN_PROTD_IMM,  UNKNOWN,      (int)MULTI_ARG_2_SI_IMM },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_rotlv8hi3,         \"__builtin_ia32_protwi\",     IX86_BUILTIN_PROTW_IMM,  UNKNOWN,      (int)MULTI_ARG_2_HI_IMM },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_rotlv16qi3,        \"__builtin_ia32_protbi\",     IX86_BUILTIN_PROTB_IMM,  UNKNOWN,      (int)MULTI_ARG_2_QI_IMM },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_ashlv2di3,         \"__builtin_ia32_pshaq\",      IX86_BUILTIN_PSHAQ,      UNKNOWN,      (int)MULTI_ARG_2_DI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_ashlv4si3,         \"__builtin_ia32_pshad\",      IX86_BUILTIN_PSHAD,      UNKNOWN,      (int)MULTI_ARG_2_SI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_ashlv8hi3,         \"__builtin_ia32_pshaw\",      IX86_BUILTIN_PSHAW,      UNKNOWN,      (int)MULTI_ARG_2_HI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_ashlv16qi3,        \"__builtin_ia32_pshab\",      IX86_BUILTIN_PSHAB,      UNKNOWN,      (int)MULTI_ARG_2_QI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_lshlv2di3,         \"__builtin_ia32_pshlq\",      IX86_BUILTIN_PSHLQ,      UNKNOWN,      (int)MULTI_ARG_2_DI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_lshlv4si3,         \"__builtin_ia32_pshld\",      IX86_BUILTIN_PSHLD,      UNKNOWN,      (int)MULTI_ARG_2_SI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_lshlv8hi3,         \"__builtin_ia32_pshlw\",      IX86_BUILTIN_PSHLW,      UNKNOWN,      (int)MULTI_ARG_2_HI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_lshlv16qi3,        \"__builtin_ia32_pshlb\",      IX86_BUILTIN_PSHLB,      UNKNOWN,      (int)MULTI_ARG_2_QI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmfrczv4sf2,       \"__builtin_ia32_frczss\",     IX86_BUILTIN_FRCZSS,     UNKNOWN,      (int)MULTI_ARG_2_SF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmfrczv2df2,       \"__builtin_ia32_frczsd\",     IX86_BUILTIN_FRCZSD,     UNKNOWN,      (int)MULTI_ARG_2_DF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_frczv4sf2,         \"__builtin_ia32_frczps\",     IX86_BUILTIN_FRCZPS,     UNKNOWN,      (int)MULTI_ARG_1_SF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_frczv2df2,         \"__builtin_ia32_frczpd\",     IX86_BUILTIN_FRCZPD,     UNKNOWN,      (int)MULTI_ARG_1_DF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_cvtph2ps,          \"__builtin_ia32_cvtph2ps\",   IX86_BUILTIN_CVTPH2PS,   UNKNOWN,      (int)MULTI_ARG_1_PH2PS },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_cvtps2ph,          \"__builtin_ia32_cvtps2ph\",   IX86_BUILTIN_CVTPS2PH,   UNKNOWN,      (int)MULTI_ARG_1_PS2PH },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddbw,           \"__builtin_ia32_phaddbw\",    IX86_BUILTIN_PHADDBW,    UNKNOWN,      (int)MULTI_ARG_1_QI_HI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddbd,           \"__builtin_ia32_phaddbd\",    IX86_BUILTIN_PHADDBD,    UNKNOWN,      (int)MULTI_ARG_1_QI_SI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddbq,           \"__builtin_ia32_phaddbq\",    IX86_BUILTIN_PHADDBQ,    UNKNOWN,      (int)MULTI_ARG_1_QI_DI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddwd,           \"__builtin_ia32_phaddwd\",    IX86_BUILTIN_PHADDWD,    UNKNOWN,      (int)MULTI_ARG_1_HI_SI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddwq,           \"__builtin_ia32_phaddwq\",    IX86_BUILTIN_PHADDWQ,    UNKNOWN,      (int)MULTI_ARG_1_HI_DI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phadddq,           \"__builtin_ia32_phadddq\",    IX86_BUILTIN_PHADDDQ,    UNKNOWN,      (int)MULTI_ARG_1_SI_DI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddubw,          \"__builtin_ia32_phaddubw\",   IX86_BUILTIN_PHADDUBW,   UNKNOWN,      (int)MULTI_ARG_1_QI_HI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddubd,          \"__builtin_ia32_phaddubd\",   IX86_BUILTIN_PHADDUBD,   UNKNOWN,      (int)MULTI_ARG_1_QI_SI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddubq,          \"__builtin_ia32_phaddubq\",   IX86_BUILTIN_PHADDUBQ,   UNKNOWN,      (int)MULTI_ARG_1_QI_DI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phadduwd,          \"__builtin_ia32_phadduwd\",   IX86_BUILTIN_PHADDUWD,   UNKNOWN,      (int)MULTI_ARG_1_HI_SI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phadduwq,          \"__builtin_ia32_phadduwq\",   IX86_BUILTIN_PHADDUWQ,   UNKNOWN,      (int)MULTI_ARG_1_HI_DI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phaddudq,          \"__builtin_ia32_phaddudq\",   IX86_BUILTIN_PHADDUDQ,   UNKNOWN,      (int)MULTI_ARG_1_SI_DI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phsubbw,           \"__builtin_ia32_phsubbw\",    IX86_BUILTIN_PHSUBBW,    UNKNOWN,      (int)MULTI_ARG_1_QI_HI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phsubwd,           \"__builtin_ia32_phsubwd\",    IX86_BUILTIN_PHSUBWD,    UNKNOWN,      (int)MULTI_ARG_1_HI_SI },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_phsubdq,           \"__builtin_ia32_phsubdq\",    IX86_BUILTIN_PHSUBDQ,    UNKNOWN,      (int)MULTI_ARG_1_SI_DI },\n \n   { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv4sf3,    \"__builtin_ia32_comeqss\",    IX86_BUILTIN_COMEQSS,    EQ,           (int)MULTI_ARG_2_SF_CMP },\n   { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_vmmaskcmpv4sf3,    \"__builtin_ia32_comness\",    IX86_BUILTIN_COMNESS,    NE,           (int)MULTI_ARG_2_SF_CMP },\n@@ -22187,32 +22187,32 @@ static const struct builtin_description bdesc_multi_arg[] =\n   { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_unsv2di3,  \"__builtin_ia32_pcomgtuq\",   IX86_BUILTIN_PCOMGTUQ,   GTU,          (int)MULTI_ARG_2_DI_CMP },\n   { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_maskcmp_unsv2di3,  \"__builtin_ia32_pcomgeuq\",   IX86_BUILTIN_PCOMGEUQ,   GEU,          (int)MULTI_ARG_2_DI_CMP },\n \n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_com_tfv4sf3,       \"__builtin_ia32_comfalsess\", IX86_BUILTIN_COMFALSESS, COM_FALSE_S,  (int)MULTI_ARG_2_SF_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_com_tfv4sf3,       \"__builtin_ia32_comtruess\",  IX86_BUILTIN_COMTRUESS,  COM_TRUE_S,   (int)MULTI_ARG_2_SF_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_com_tfv4sf3,       \"__builtin_ia32_comfalseps\", IX86_BUILTIN_COMFALSEPS, COM_FALSE_P,  (int)MULTI_ARG_2_SF_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_com_tfv4sf3,       \"__builtin_ia32_comtrueps\",  IX86_BUILTIN_COMTRUEPS,  COM_TRUE_P,   (int)MULTI_ARG_2_SF_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_com_tfv2df3,       \"__builtin_ia32_comfalsesd\", IX86_BUILTIN_COMFALSESD, COM_FALSE_S,  (int)MULTI_ARG_2_DF_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_com_tfv2df3,       \"__builtin_ia32_comtruesd\",  IX86_BUILTIN_COMTRUESD,  COM_TRUE_S,   (int)MULTI_ARG_2_DF_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_com_tfv2df3,       \"__builtin_ia32_comfalsepd\", IX86_BUILTIN_COMFALSEPD, COM_FALSE_P,  (int)MULTI_ARG_2_DF_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_com_tfv2df3,       \"__builtin_ia32_comtruepd\",  IX86_BUILTIN_COMTRUEPD,  COM_TRUE_P,   (int)MULTI_ARG_2_DF_TF },\n-\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv16qi3,     \"__builtin_ia32_pcomfalseb\", IX86_BUILTIN_PCOMFALSEB, PCOM_FALSE,   (int)MULTI_ARG_2_QI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv8hi3,      \"__builtin_ia32_pcomfalsew\", IX86_BUILTIN_PCOMFALSEW, PCOM_FALSE,   (int)MULTI_ARG_2_HI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv4si3,      \"__builtin_ia32_pcomfalsed\", IX86_BUILTIN_PCOMFALSED, PCOM_FALSE,   (int)MULTI_ARG_2_SI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv2di3,      \"__builtin_ia32_pcomfalseq\", IX86_BUILTIN_PCOMFALSEQ, PCOM_FALSE,   (int)MULTI_ARG_2_DI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv16qi3,     \"__builtin_ia32_pcomfalseub\",IX86_BUILTIN_PCOMFALSEUB,PCOM_FALSE,   (int)MULTI_ARG_2_QI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv8hi3,      \"__builtin_ia32_pcomfalseuw\",IX86_BUILTIN_PCOMFALSEUW,PCOM_FALSE,   (int)MULTI_ARG_2_HI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv4si3,      \"__builtin_ia32_pcomfalseud\",IX86_BUILTIN_PCOMFALSEUD,PCOM_FALSE,   (int)MULTI_ARG_2_SI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv2di3,      \"__builtin_ia32_pcomfalseuq\",IX86_BUILTIN_PCOMFALSEUQ,PCOM_FALSE,   (int)MULTI_ARG_2_DI_TF },\n-\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv16qi3,     \"__builtin_ia32_pcomtrueb\",  IX86_BUILTIN_PCOMTRUEB,  PCOM_TRUE,    (int)MULTI_ARG_2_QI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv8hi3,      \"__builtin_ia32_pcomtruew\",  IX86_BUILTIN_PCOMTRUEW,  PCOM_TRUE,    (int)MULTI_ARG_2_HI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv4si3,      \"__builtin_ia32_pcomtrued\",  IX86_BUILTIN_PCOMTRUED,  PCOM_TRUE,    (int)MULTI_ARG_2_SI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv2di3,      \"__builtin_ia32_pcomtrueq\",  IX86_BUILTIN_PCOMTRUEQ,  PCOM_TRUE,    (int)MULTI_ARG_2_DI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv16qi3,     \"__builtin_ia32_pcomtrueub\", IX86_BUILTIN_PCOMTRUEUB, PCOM_TRUE,    (int)MULTI_ARG_2_QI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv8hi3,      \"__builtin_ia32_pcomtrueuw\", IX86_BUILTIN_PCOMTRUEUW, PCOM_TRUE,    (int)MULTI_ARG_2_HI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv4si3,      \"__builtin_ia32_pcomtrueud\", IX86_BUILTIN_PCOMTRUEUD, PCOM_TRUE,    (int)MULTI_ARG_2_SI_TF },\n-  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv2di3,      \"__builtin_ia32_pcomtrueuq\", IX86_BUILTIN_PCOMTRUEUQ, PCOM_TRUE,    (int)MULTI_ARG_2_DI_TF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_com_tfv4sf3,       \"__builtin_ia32_comfalsess\", IX86_BUILTIN_COMFALSESS, (enum rtx_code) COM_FALSE_S,  (int)MULTI_ARG_2_SF_TF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_com_tfv4sf3,       \"__builtin_ia32_comtruess\",  IX86_BUILTIN_COMTRUESS,  (enum rtx_code) COM_TRUE_S,   (int)MULTI_ARG_2_SF_TF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_com_tfv4sf3,       \"__builtin_ia32_comfalseps\", IX86_BUILTIN_COMFALSEPS, (enum rtx_code) COM_FALSE_P,  (int)MULTI_ARG_2_SF_TF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_com_tfv4sf3,       \"__builtin_ia32_comtrueps\",  IX86_BUILTIN_COMTRUEPS,  (enum rtx_code) COM_TRUE_P,   (int)MULTI_ARG_2_SF_TF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_com_tfv2df3,       \"__builtin_ia32_comfalsesd\", IX86_BUILTIN_COMFALSESD, (enum rtx_code) COM_FALSE_S,  (int)MULTI_ARG_2_DF_TF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_com_tfv2df3,       \"__builtin_ia32_comtruesd\",  IX86_BUILTIN_COMTRUESD,  (enum rtx_code) COM_TRUE_S,   (int)MULTI_ARG_2_DF_TF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_com_tfv2df3,       \"__builtin_ia32_comfalsepd\", IX86_BUILTIN_COMFALSEPD, (enum rtx_code) COM_FALSE_P,  (int)MULTI_ARG_2_DF_TF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_com_tfv2df3,       \"__builtin_ia32_comtruepd\",  IX86_BUILTIN_COMTRUEPD,  (enum rtx_code) COM_TRUE_P,   (int)MULTI_ARG_2_DF_TF },\n+\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv16qi3,     \"__builtin_ia32_pcomfalseb\", IX86_BUILTIN_PCOMFALSEB, (enum rtx_code) PCOM_FALSE,   (int)MULTI_ARG_2_QI_TF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv8hi3,      \"__builtin_ia32_pcomfalsew\", IX86_BUILTIN_PCOMFALSEW, (enum rtx_code) PCOM_FALSE,   (int)MULTI_ARG_2_HI_TF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv4si3,      \"__builtin_ia32_pcomfalsed\", IX86_BUILTIN_PCOMFALSED, (enum rtx_code) PCOM_FALSE,   (int)MULTI_ARG_2_SI_TF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv2di3,      \"__builtin_ia32_pcomfalseq\", IX86_BUILTIN_PCOMFALSEQ, (enum rtx_code) PCOM_FALSE,   (int)MULTI_ARG_2_DI_TF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv16qi3,     \"__builtin_ia32_pcomfalseub\",IX86_BUILTIN_PCOMFALSEUB,(enum rtx_code) PCOM_FALSE,   (int)MULTI_ARG_2_QI_TF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv8hi3,      \"__builtin_ia32_pcomfalseuw\",IX86_BUILTIN_PCOMFALSEUW,(enum rtx_code) PCOM_FALSE,   (int)MULTI_ARG_2_HI_TF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv4si3,      \"__builtin_ia32_pcomfalseud\",IX86_BUILTIN_PCOMFALSEUD,(enum rtx_code) PCOM_FALSE,   (int)MULTI_ARG_2_SI_TF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv2di3,      \"__builtin_ia32_pcomfalseuq\",IX86_BUILTIN_PCOMFALSEUQ,(enum rtx_code) PCOM_FALSE,   (int)MULTI_ARG_2_DI_TF },\n+\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv16qi3,     \"__builtin_ia32_pcomtrueb\",  IX86_BUILTIN_PCOMTRUEB,  (enum rtx_code) PCOM_TRUE,    (int)MULTI_ARG_2_QI_TF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv8hi3,      \"__builtin_ia32_pcomtruew\",  IX86_BUILTIN_PCOMTRUEW,  (enum rtx_code) PCOM_TRUE,    (int)MULTI_ARG_2_HI_TF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv4si3,      \"__builtin_ia32_pcomtrued\",  IX86_BUILTIN_PCOMTRUED,  (enum rtx_code) PCOM_TRUE,    (int)MULTI_ARG_2_SI_TF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv2di3,      \"__builtin_ia32_pcomtrueq\",  IX86_BUILTIN_PCOMTRUEQ,  (enum rtx_code) PCOM_TRUE,    (int)MULTI_ARG_2_DI_TF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv16qi3,     \"__builtin_ia32_pcomtrueub\", IX86_BUILTIN_PCOMTRUEUB, (enum rtx_code) PCOM_TRUE,    (int)MULTI_ARG_2_QI_TF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv8hi3,      \"__builtin_ia32_pcomtrueuw\", IX86_BUILTIN_PCOMTRUEUW, (enum rtx_code) PCOM_TRUE,    (int)MULTI_ARG_2_HI_TF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv4si3,      \"__builtin_ia32_pcomtrueud\", IX86_BUILTIN_PCOMTRUEUD, (enum rtx_code) PCOM_TRUE,    (int)MULTI_ARG_2_SI_TF },\n+  { OPTION_MASK_ISA_SSE5, CODE_FOR_sse5_pcom_tfv2di3,      \"__builtin_ia32_pcomtrueuq\", IX86_BUILTIN_PCOMTRUEUQ, (enum rtx_code) PCOM_TRUE,    (int)MULTI_ARG_2_DI_TF },\n };\n \n /* Set up all the MMX/SSE builtins, even builtins for instructions that are not"}, {"sha": "9acb5702112a88af2b18e9ae281708d0c8eada7c", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -737,7 +737,7 @@ ia64_depz_field_mask (rtx rop, rtx rshift)\n static enum tls_model\n tls_symbolic_operand_type (rtx addr)\n {\n-  enum tls_model tls_kind = 0;\n+  enum tls_model tls_kind = TLS_MODEL_NONE;\n \n   if (GET_CODE (addr) == CONST)\n     {"}, {"sha": "29ae1795a5e4689de381d6105b3a69f6a44d81ab", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -11642,8 +11642,9 @@ AVAIL_NON_MIPS16 (cache, TARGET_CACHE_BUILTIN)\n    for instruction CODE_FOR_loongson_<INSN>.  FUNCTION_TYPE is a\n    builtin_description field.  */\n #define LOONGSON_BUILTIN_ALIAS(INSN, FN_NAME, FUNCTION_TYPE)\t\t\\\n-  { CODE_FOR_loongson_ ## INSN, 0, \"__builtin_loongson_\" #FN_NAME,\t\\\n-    MIPS_BUILTIN_DIRECT, FUNCTION_TYPE, mips_builtin_avail_loongson }\n+  { CODE_FOR_loongson_ ## INSN, MIPS_FP_COND_f,\t\t\t\t\\\n+    \"__builtin_loongson_\" #FN_NAME, MIPS_BUILTIN_DIRECT,\t\t\\\n+    FUNCTION_TYPE, mips_builtin_avail_loongson }\n \n /* Define a Loongson MIPS_BUILTIN_DIRECT function __builtin_loongson_<INSN>\n    for instruction CODE_FOR_loongson_<INSN>.  FUNCTION_TYPE is a"}, {"sha": "95ba6ba2620613ef31cdfa85b914cbab613c5f57", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -285,10 +285,12 @@\n ;; the target address into a register.\n (define_attr \"jal_macro\" \"no,yes\"\n   (cond [(eq_attr \"jal\" \"direct\")\n-\t (symbol_ref \"TARGET_CALL_CLOBBERED_GP\n-\t\t      || (flag_pic && !TARGET_ABSOLUTE_ABICALLS)\")\n+\t (symbol_ref \"((TARGET_CALL_CLOBBERED_GP\n+\t\t\t|| (flag_pic && !TARGET_ABSOLUTE_ABICALLS))\n+\t\t       ? JAL_MACRO_YES : JAL_MACRO_NO)\")\n \t (eq_attr \"jal\" \"indirect\")\n-\t (symbol_ref \"TARGET_CALL_CLOBBERED_GP\")]\n+\t (symbol_ref \"(TARGET_CALL_CLOBBERED_GP\n+\t\t       ? JAL_MACRO_YES : JAL_MACRO_NO)\")]\n \t(const_string \"no\")))\n \n ;; Classification of moves, extensions and truncations.  Most values\n@@ -602,7 +604,8 @@\n \n ;; Is it a single instruction?\n (define_attr \"single_insn\" \"no,yes\"\n-  (symbol_ref \"get_attr_length (insn) == (TARGET_MIPS16 ? 2 : 4)\"))\n+  (symbol_ref \"(get_attr_length (insn) == (TARGET_MIPS16 ? 2 : 4)\n+\t\t? SINGLE_INSN_YES : SINGLE_INSN_NO)\"))\n \n ;; Can the instruction be put into a delay slot?\n (define_attr \"can_delay\" \"no,yes\""}, {"sha": "7ebc14cb1fc393559d23a00457ef2aa7d17ecc0b", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -2884,7 +2884,7 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { ALTIVEC_BUILTIN_VCMPGE_P, ALTIVEC_BUILTIN_VCMPGEFP_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SF, RS6000_BTI_V4SF },\n \n-  { 0, 0, 0, 0, 0, 0 }\n+  { (enum rs6000_builtins) 0, (enum rs6000_builtins) 0, 0, 0, 0, 0 }\n };\n \f\n "}, {"sha": "38155a85362ef54db36b2ec378321e17ac21994d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -7691,9 +7691,9 @@ static const struct builtin_description_predicates bdesc_altivec_preds[] =\n   { MASK_ALTIVEC, CODE_FOR_altivec_predicate_v16qi, \"*vcmpgtsb.\", \"__builtin_altivec_vcmpgtsb_p\", ALTIVEC_BUILTIN_VCMPGTSB_P },\n   { MASK_ALTIVEC, CODE_FOR_altivec_predicate_v16qi, \"*vcmpgtub.\", \"__builtin_altivec_vcmpgtub_p\", ALTIVEC_BUILTIN_VCMPGTUB_P },\n \n-  { MASK_ALTIVEC, 0, NULL, \"__builtin_vec_vcmpeq_p\", ALTIVEC_BUILTIN_VCMPEQ_P },\n-  { MASK_ALTIVEC, 0, NULL, \"__builtin_vec_vcmpgt_p\", ALTIVEC_BUILTIN_VCMPGT_P },\n-  { MASK_ALTIVEC, 0, NULL, \"__builtin_vec_vcmpge_p\", ALTIVEC_BUILTIN_VCMPGE_P }\n+  { MASK_ALTIVEC, CODE_FOR_nothing, NULL, \"__builtin_vec_vcmpeq_p\", ALTIVEC_BUILTIN_VCMPEQ_P },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, NULL, \"__builtin_vec_vcmpgt_p\", ALTIVEC_BUILTIN_VCMPGT_P },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, NULL, \"__builtin_vec_vcmpge_p\", ALTIVEC_BUILTIN_VCMPGE_P }\n };\n \n /* SPE predicates.  */"}, {"sha": "61471bb41baddef650c82f056d8a9b3da8e71dbb", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -248,10 +248,10 @@ struct s390_address\n \n /* Which cpu are we tuning for.  */\n enum processor_type s390_tune = PROCESSOR_max;\n-enum processor_flags s390_tune_flags;\n+int s390_tune_flags;\n /* Which instruction set architecture to use.  */\n enum processor_type s390_arch;\n-enum processor_flags s390_arch_flags;\n+int s390_arch_flags;\n \n HOST_WIDE_INT s390_warn_framesize = 0;\n HOST_WIDE_INT s390_stack_size = 0;\n@@ -1471,13 +1471,13 @@ optimization_options (int level ATTRIBUTE_UNUSED, int size ATTRIBUTE_UNUSED)\n static bool\n s390_handle_arch_option (const char *arg,\n \t\t\t enum processor_type *type,\n-\t\t\t enum processor_flags *flags)\n+\t\t\t int *flags)\n {\n   static struct pta\n     {\n       const char *const name;\t\t/* processor name or nickname.  */\n       const enum processor_type processor;\n-      const enum processor_flags flags;\n+      const int flags;\t\t\t/* From enum processor_flags. */\n     }\n   const processor_alias_table[] =\n     {"}, {"sha": "a21bc727aabec1af554e27b7ea99f66e462a2a19", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for IBM S/390\n    Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n-   2007, 2008 Free Software Foundation, Inc.\n+   2007, 2008, 2009 Free Software Foundation, Inc.\n    Contributed by Hartmut Penner (hpenner@de.ibm.com) and\n                   Ulrich Weigand (uweigand@de.ibm.com).\n                   Andreas Krebbel (Andreas.Krebbel@de.ibm.com)\n@@ -58,14 +58,14 @@ enum processor_flags\n };\n \n extern enum processor_type s390_tune;\n-extern enum processor_flags s390_tune_flags;\n+extern int s390_tune_flags;\n \n /* This is necessary to avoid a warning about comparing different enum\n    types.  */\n #define s390_tune_attr ((enum attr_cpu)s390_tune)\n \n extern enum processor_type s390_arch;\n-extern enum processor_flags s390_arch_flags;\n+extern int s390_arch_flags;\n \n /* These flags indicate that the generated code should run on a cpu\n    providing the respective hardware facility regardless of the"}, {"sha": "a484b9c5d05995bd72129748f45ded6c609ac3af", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -93,7 +93,7 @@ extern void fixup_addr_diff_vecs (rtx);\n extern int get_dest_uid (rtx, int);\n extern void final_prescan_insn (rtx, rtx *, int);\n extern int symbol_ref_operand (rtx, enum machine_mode);\n-extern int tls_symbolic_operand (rtx, enum machine_mode);\n+extern enum tls_model tls_symbolic_operand (rtx, enum machine_mode);\n extern int system_reg_operand (rtx, enum machine_mode);\n extern int general_movsrc_operand (rtx, enum machine_mode);\n extern int general_movdst_operand (rtx, enum machine_mode);"}, {"sha": "f8a046b81e510e7f17bd7aa8cde3a158b2261389", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -224,7 +224,7 @@ static int sh_variable_issue (FILE *, int, rtx, int);\n static bool sh_function_ok_for_sibcall (tree, tree);\n \n static bool sh_cannot_modify_jumps_p (void);\n-static int sh_target_reg_class (void);\n+static enum reg_class sh_target_reg_class (void);\n static bool sh_optimize_target_register_callee_saved (bool);\n static bool sh_ms_bitfield_layout_p (const_tree);\n \n@@ -1218,7 +1218,7 @@ prepare_move_operands (rtx operands[], enum machine_mode mode)\n   if ((mode == SImode || mode == DImode)\n       && flag_pic\n       && ! ((mode == Pmode || mode == ptr_mode)\n-\t    && tls_symbolic_operand (operands[1], Pmode) != 0))\n+\t    && tls_symbolic_operand (operands[1], Pmode) != TLS_MODEL_NONE))\n     {\n       rtx temp;\n       if (SYMBOLIC_CONST_P (operands[1]))\n@@ -1290,15 +1290,16 @@ prepare_move_operands (rtx operands[], enum machine_mode mode)\n       op1 = operands[1];\n       if (GET_CODE (op1) == CONST\n \t  && GET_CODE (XEXP (op1, 0)) == PLUS\n-\t  && tls_symbolic_operand (XEXP (XEXP (op1, 0), 0), Pmode))\n+\t  && (tls_symbolic_operand (XEXP (XEXP (op1, 0), 0), Pmode)\n+\t      != TLS_MODEL_NONE))\n \t{\n \t  opc = XEXP (XEXP (op1, 0), 1);\n \t  op1 = XEXP (XEXP (op1, 0), 0);\n \t}\n       else\n \topc = NULL_RTX;\n \n-      if ((tls_kind = tls_symbolic_operand (op1, Pmode)))\n+      if ((tls_kind = tls_symbolic_operand (op1, Pmode)) != TLS_MODEL_NONE)\n \t{\n \t  rtx tga_op1, tga_ret, tmp, tmp2;\n \n@@ -5125,7 +5126,7 @@ sh_reorg (void)\n \t\t\t  /* If we are not optimizing, then there may not be\n \t\t\t     a note.  */\n \t\t\t  if (note)\n-\t\t\t    PUT_MODE (note, REG_INC);\n+\t\t\t    PUT_REG_NOTE_KIND (note, REG_INC);\n \n \t\t\t  *last_float_addr = r0_inc_rtx;\n \t\t\t}\n@@ -6348,7 +6349,7 @@ sh_expand_prologue (void)\n       tmp_pnt = schedule.temps;\n       for (entry = &schedule.entries[1]; entry->mode != VOIDmode; entry++)\n         {\n-\t  enum machine_mode mode = entry->mode;\n+\t  enum machine_mode mode = (enum machine_mode) entry->mode;\n \t  unsigned int reg = entry->reg;\n \t  rtx reg_rtx, mem_rtx, pre_dec = NULL_RTX;\n \t  rtx orig_reg_rtx;\n@@ -6633,7 +6634,7 @@ sh_expand_epilogue (bool sibcall_p)\n       tmp_pnt = schedule.temps;\n       for (; entry->mode != VOIDmode; entry--)\n \t{\n-\t  enum machine_mode mode = entry->mode;\n+\t  enum machine_mode mode = (enum machine_mode) entry->mode;\n \t  int reg = entry->reg;\n \t  rtx reg_rtx, mem_rtx, post_inc = NULL_RTX, insn;\n \n@@ -8452,11 +8453,11 @@ tertiary_reload_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n }\n \n /* Return the TLS type for TLS symbols, 0 for otherwise.  */\n-int\n+enum tls_model\n tls_symbolic_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   if (GET_CODE (op) != SYMBOL_REF)\n-    return 0;\n+    return TLS_MODEL_NONE;\n   return SYMBOL_REF_TLS_MODEL (op);\n }\n \f\n@@ -8696,7 +8697,7 @@ get_free_reg (HARD_REG_SET regs_live)\n void\n fpscr_set_from_mem (int mode, HARD_REG_SET regs_live)\n {\n-  enum attr_fp_mode fp_mode = mode;\n+  enum attr_fp_mode fp_mode = (enum attr_fp_mode) mode;\n   enum attr_fp_mode norm_mode = ACTUAL_NORMAL_MODE (FP_MODE);\n   rtx addr_reg;\n \n@@ -8844,7 +8845,7 @@ rtx\n legitimize_pic_address (rtx orig, enum machine_mode mode ATTRIBUTE_UNUSED,\n \t\t\trtx reg)\n {\n-  if (tls_symbolic_operand (orig, Pmode))\n+  if (tls_symbolic_operand (orig, Pmode) != TLS_MODEL_NONE)\n     return orig;\n \n   if (GET_CODE (orig) == LABEL_REF\n@@ -9623,7 +9624,7 @@ sh_cannot_modify_jumps_p (void)\n   return (TARGET_SHMEDIA && (reload_in_progress || reload_completed));\n }\n \n-static int\n+static enum reg_class\n sh_target_reg_class (void)\n {\n   return TARGET_SHMEDIA ? TARGET_REGS : NO_REGS;"}, {"sha": "51c7edfa2b24022498fe18627b19072e5830ac0e", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler for Renesas / SuperH SH.\n    Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-   2003, 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+   2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n    Contributed by Steve Chamberlain (sac@cygnus.com).\n    Improved by Jim Wilson (wilson@cygnus.com).\n \n@@ -545,35 +545,35 @@ do {\t\t\t\t\t\t\t\t\t\\\n       = !flag_signaling_nans && TARGET_SH2E && ! TARGET_IEEE;\t\t\\\n   if (TARGET_SH2E && !flag_finite_math_only)\t\t\t\t\\\n     target_flags |= MASK_IEEE;\t\t\t\t\t\t\\\n-  sh_cpu = CPU_SH1;\t\t\t\t\t\t\t\\\n+  sh_cpu = PROCESSOR_SH1;\t\t\t\t\t\t\\\n   assembler_dialect = 0;\t\t\t\t\t\t\\\n   if (TARGET_SH2)\t\t\t\t\t\t\t\\\n-    sh_cpu = CPU_SH2;\t\t\t\t\t\t\t\\\n+    sh_cpu = PROCESSOR_SH2;\t\t\t\t\t\t\\\n   if (TARGET_SH2E)\t\t\t\t\t\t\t\\\n-    sh_cpu = CPU_SH2E;\t\t\t\t\t\t\t\\\n+    sh_cpu = PROCESSOR_SH2E;\t\t\t\t\t\t\\\n   if (TARGET_SH2A)\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      sh_cpu = CPU_SH2A;\t\t\t\t\t\t\\\n+      sh_cpu = PROCESSOR_SH2A;\t\t\t\t\t\t\\\n       if (TARGET_SH2A_DOUBLE)\t\t\t\t\t\t\\\n         target_flags |= MASK_FMOVD;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_SH3)\t\t\t\t\t\t\t\\\n-    sh_cpu = CPU_SH3;\t\t\t\t\t\t\t\\\n+    sh_cpu = PROCESSOR_SH3;\t\t\t\t\t\t\\\n   if (TARGET_SH3E)\t\t\t\t\t\t\t\\\n-    sh_cpu = CPU_SH3E;\t\t\t\t\t\t\t\\\n+    sh_cpu = PROCESSOR_SH3E;\t\t\t\t\t\t\\\n   if (TARGET_SH4)\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       assembler_dialect = 1;\t\t\t\t\t\t\\\n-      sh_cpu = CPU_SH4;\t\t\t\t\t\t\t\\\n+      sh_cpu = PROCESSOR_SH4;\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_SH4A_ARCH)\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       assembler_dialect = 1;\t\t\t\t\t\t\\\n-      sh_cpu = CPU_SH4A;\t\t\t\t\t\t\\\n+      sh_cpu = PROCESSOR_SH4A;\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_SH5)\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      sh_cpu = CPU_SH5;\t\t\t\t\t\t\t\\\n+      sh_cpu = PROCESSOR_SH5;\t\t\t\t\t\t\\\n       target_flags |= MASK_ALIGN_DOUBLE;\t\t\t\t\\\n       if (TARGET_SHMEDIA_FPU)\t\t\t\t\t\t\\\n \ttarget_flags |= MASK_FMOVD;\t\t\t\t\t\\"}, {"sha": "fc527b1beb7504b59a1e0e12a7e6964af211d8d4", "filename": "gcc/config/sol2-c.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fsol2-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fsol2-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2-c.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -1,5 +1,5 @@\n /* Solaris support needed only by C/C++ frontends.\n-   Copyright (C) 2004, 2005, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2007, 2009 Free Software Foundation, Inc.\n    Contributed by CodeSourcery, LLC.\n \n This file is part of GCC.\n@@ -37,14 +37,14 @@ along with GCC; see the file COPYING3.  If not see\n static const format_length_info cmn_err_length_specs[] =\n {\n   { \"l\", FMT_LEN_l, STD_C89, \"ll\", FMT_LEN_ll, STD_C89 },\n-  { NULL, 0, 0, NULL, 0, 0 }\n+  { NULL, FMT_LEN_none, STD_C89, NULL, FMT_LEN_none, STD_C89 }\n };\n \n static const format_flag_spec cmn_err_flag_specs[] =\n {\n   { 'w',  0, 0, N_(\"field width\"),     N_(\"field width in printf format\"),     STD_C89 },\n   { 'L',  0, 0, N_(\"length modifier\"), N_(\"length modifier in printf format\"), STD_C89 },\n-  { 0, 0, 0, NULL, NULL, 0 }\n+  { 0, 0, 0, NULL, NULL, STD_C89 }\n };\n \n \n@@ -66,7 +66,7 @@ static const format_char_info cmn_err_char_table[] =\n   { \"p\",   1, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"w\", \"c\",  NULL },\n   { \"s\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"w\",  \"cR\", NULL },\n   { \"b\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"w\",   \"\",   &bitfield_string_type },\n-  { NULL,  0, 0, NOLENGTHS, NULL, NULL, NULL }\n+  { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n \n const format_kind_info solaris_format_types[] = {"}, {"sha": "60067b5dfdd5577b95057edec337e2dee9743eed", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -689,7 +689,7 @@ sparc_override_options (void)\n     /* UltraSPARC T1 */\n     { \"niagara\", PROCESSOR_NIAGARA, MASK_ISA, MASK_V9|MASK_DEPRECATED_V8_INSNS},\n     { \"niagara2\", PROCESSOR_NIAGARA, MASK_ISA, MASK_V9},\n-    { 0, 0, 0, 0 }\n+    { 0, (enum processor_type) 0, 0, 0 }\n   };\n   const struct cpu_table *cpu;\n   const struct sparc_cpu_select *sel;"}, {"sha": "4fae329cd9a79ca67d3c45af280f57d80bcf35db", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -130,25 +130,30 @@\n \n ;; True if branch/call has empty delay slot and will emit a nop in it\n (define_attr \"empty_delay_slot\" \"false,true\"\n-  (symbol_ref \"empty_delay_slot (insn)\"))\n+  (symbol_ref \"(empty_delay_slot (insn)\n+\t\t? EMPTY_DELAY_SLOT_TRUE : EMPTY_DELAY_SLOT_FALSE)\"))\n \n (define_attr \"branch_type\" \"none,icc,fcc,reg\"\n   (const_string \"none\"))\n \n (define_attr \"pic\" \"false,true\"\n-  (symbol_ref \"flag_pic != 0\"))\n+  (symbol_ref \"(flag_pic != 0 ? PIC_TRUE : PIC_FALSE)\"))\n \n (define_attr \"calls_alloca\" \"false,true\"\n-  (symbol_ref \"cfun->calls_alloca != 0\"))\n+  (symbol_ref \"(cfun->calls_alloca != 0\n+\t\t? CALLS_ALLOCA_TRUE : CALLS_ALLOCA_FALSE)\"))\n \n (define_attr \"calls_eh_return\" \"false,true\"\n-   (symbol_ref \"crtl->calls_eh_return !=0 \"))\n+   (symbol_ref \"(crtl->calls_eh_return != 0\n+\t\t ? CALLS_EH_RETURN_TRUE : CALLS_EH_RETURN_FALSE)\"))\n    \n (define_attr \"leaf_function\" \"false,true\"\n-  (symbol_ref \"current_function_uses_only_leaf_regs != 0\"))\n+  (symbol_ref \"(current_function_uses_only_leaf_regs != 0\n+\t\t? LEAF_FUNCTION_TRUE : LEAF_FUNCTION_FALSE)\"))\n \n (define_attr \"delayed_branch\" \"false,true\"\n-  (symbol_ref \"flag_delayed_branch != 0\"))\n+  (symbol_ref \"(flag_delayed_branch != 0\n+\t\t? DELAYED_BRANCH_TRUE : DELAYED_BRANCH_FALSE)\"))\n \n ;; Length (in # of insns).\n ;; Beware that setting a length greater or equal to 3 for conditional branches\n@@ -242,7 +247,8 @@\n \n ;; Attributes for instruction and branch scheduling\n (define_attr \"tls_call_delay\" \"false,true\"\n-  (symbol_ref \"tls_call_delay (insn)\"))\n+  (symbol_ref \"(tls_call_delay (insn)\n+\t\t? TLS_CALL_DELAY_TRUE : TLS_CALL_DELAY_FALSE)\"))\n \n (define_attr \"in_call_delay\" \"false,true\"\n   (cond [(eq_attr \"type\" \"uncond_branch,branch,call,sibcall,call_no_delay_slot,multi\")\n@@ -257,10 +263,14 @@\n \t\t      (const_string \"false\"))))\n \n (define_attr \"eligible_for_sibcall_delay\" \"false,true\"\n-  (symbol_ref \"eligible_for_sibcall_delay (insn)\"))\n+  (symbol_ref \"(eligible_for_sibcall_delay (insn)\n+\t\t? ELIGIBLE_FOR_SIBCALL_DELAY_TRUE\n+\t\t: ELIGIBLE_FOR_SIBCALL_DELAY_FALSE)\"))\n \n (define_attr \"eligible_for_return_delay\" \"false,true\"\n-  (symbol_ref \"eligible_for_return_delay (insn)\"))\n+  (symbol_ref \"(eligible_for_return_delay (insn)\n+\t\t? ELIGIBLE_FOR_RETURN_DELAY_TRUE\n+\t\t: ELIGIBLE_FOR_RETURN_DELAY_FALSE)\"))\n \n ;; ??? !v9: Should implement the notion of predelay slots for floating-point\n ;; branches.  This would allow us to remove the nop always inserted before"}, {"sha": "f504165822315216225c572f34621d279e45de57", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -6029,7 +6029,7 @@ static int\n expand_builtin_args (struct spu_builtin_description *d, tree exp,\n \t\t     rtx target, rtx ops[])\n {\n-  enum insn_code icode = d->icode;\n+  enum insn_code icode = (enum insn_code) d->icode;\n   int i = 0, a;\n \n   /* Expand the arguments into rtl. */\n@@ -6057,7 +6057,7 @@ spu_expand_builtin_1 (struct spu_builtin_description *d,\n {\n   rtx pat;\n   rtx ops[8];\n-  enum insn_code icode = d->icode;\n+  enum insn_code icode = (enum insn_code) d->icode;\n   enum machine_mode mode, tmode;\n   int i, p;\n   int n_operands;"}, {"sha": "95aff1f542d8472d6a5f16b9ce7f2dff573e1c06", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -1,3 +1,8 @@\n+2009-04-27  Ian Lance Taylor  <iant@google.com>\n+\n+\t* semantics.c (finish_omp_clauses): Change type of c_kind to enum\n+\tomp_clause_code.\n+\n 2009-04-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/39875"}, {"sha": "dd84891d73be67be6cde153d88685d7376846a80", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -3648,7 +3648,7 @@ finish_omp_clauses (tree clauses)\n \n   for (pc = &clauses, c = clauses; c ; c = *pc)\n     {\n-      enum tree_code c_kind = OMP_CLAUSE_CODE (c);\n+      enum omp_clause_code c_kind = OMP_CLAUSE_CODE (c);\n       bool remove = false;\n       bool need_complete_non_reference = false;\n       bool need_default_ctor = false;"}, {"sha": "b37b505ffbdb5c427c1b7c7c083788b1a5fc3811", "filename": "gcc/dce.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -1090,9 +1090,9 @@ run_fast_df_dce (void)\n       /* If dce is able to delete something, it has to happen\n \t immediately.  Otherwise there will be problems handling the\n \t eq_notes.  */\n-      enum df_changeable_flags old_flags \n-\t= df_clear_flags (DF_DEFER_INSN_RESCAN + DF_NO_INSN_RESCAN);\n-      \n+      int old_flags =\n+\tdf_clear_flags (DF_DEFER_INSN_RESCAN + DF_NO_INSN_RESCAN);\n+\n       df_in_progress = true;\n       rest_of_handle_fast_dce ();\n       df_in_progress = false;"}, {"sha": "a94dc48d95e8073ae1a5c68deeeac444b14b12d8", "filename": "gcc/df-core.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -474,10 +474,10 @@ df_add_problem (struct df_problem *problem)\n /* Set the MASK flags in the DFLOW problem.  The old flags are\n    returned.  If a flag is not allowed to be changed this will fail if\n    checking is enabled.  */\n-enum df_changeable_flags\n+int\n df_set_flags (int changeable_flags)\n {\n-  enum df_changeable_flags old_flags = df->changeable_flags;\n+  int old_flags = df->changeable_flags;\n   df->changeable_flags |= changeable_flags;\n   return old_flags;\n }\n@@ -486,10 +486,10 @@ df_set_flags (int changeable_flags)\n /* Clear the MASK flags in the DFLOW problem.  The old flags are\n    returned.  If a flag is not allowed to be changed this will fail if\n    checking is enabled.  */\n-enum df_changeable_flags\n+int\n df_clear_flags (int changeable_flags)\n {\n-  enum df_changeable_flags old_flags = df->changeable_flags;\n+  int old_flags = df->changeable_flags;\n   df->changeable_flags &= ~changeable_flags;\n   return old_flags;\n }"}, {"sha": "9337b6dbd8a72ec61bf306fd2182284d1a66ebf6", "filename": "gcc/df-scan.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -2888,7 +2888,7 @@ df_def_record_1 (struct df_collection_rec *collection_rec,\n   rtx dst;\n   int offset = -1;\n   int width = -1;\n-  enum machine_mode mode = 0;\n+  enum machine_mode mode = VOIDmode;\n   enum df_ref_class cl = DF_REF_REGULAR;\n \n  /* We may recursively call ourselves on EXPR_LIST when dealing with PARALLEL\n@@ -3299,7 +3299,7 @@ df_get_conditional_uses (struct df_collection_rec *collection_rec)\n         {\n \t  int width = -1;\n \t  int offset = -1;\n-\t  enum machine_mode mode = 0;\n+\t  enum machine_mode mode = VOIDmode;\n           df_ref use;\n \n \t  if (DF_REF_FLAGS_IS_SET (ref, DF_REF_SIGN_EXTRACT | DF_REF_ZERO_EXTRACT))"}, {"sha": "ab3a661bbc1f2c666a6b1d69fd96d98a8985ad29", "filename": "gcc/df.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -878,8 +878,8 @@ extern struct df *df;\n /* Functions defined in df-core.c.  */\n \n extern void df_add_problem (struct df_problem *);\n-extern enum df_changeable_flags df_set_flags (int);\n-extern enum df_changeable_flags df_clear_flags (int);\n+extern int df_set_flags (int);\n+extern int df_clear_flags (int);\n extern void df_set_blocks (bitmap);\n extern void df_remove_problem (struct dataflow *);\n extern void df_finish_pass (bool);"}, {"sha": "f441fb80efb4b5e5682fca5c369980a7f65a17d7", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -375,7 +375,7 @@ static unsigned current_funcdef_fde;\n struct GTY(()) indirect_string_node {\n   const char *str;\n   unsigned int refcount;\n-  unsigned int form;\n+  enum dwarf_form form;\n   char *label;\n };\n \n@@ -4995,7 +4995,7 @@ static hashval_t debug_str_do_hash (const void *);\n static int debug_str_eq (const void *, const void *);\n static void add_AT_string (dw_die_ref, enum dwarf_attribute, const char *);\n static inline const char *AT_string (dw_attr_ref);\n-static int AT_string_form (dw_attr_ref);\n+static enum dwarf_form AT_string_form (dw_attr_ref);\n static void add_AT_die_ref (dw_die_ref, enum dwarf_attribute, dw_die_ref);\n static void add_AT_specification (dw_die_ref, dw_die_ref);\n static inline dw_die_ref AT_ref (dw_attr_ref);\n@@ -6001,7 +6001,7 @@ AT_string (dw_attr_ref a)\n /* Find out whether a string should be output inline in DIE\n    or out-of-line in .debug_str section.  */\n \n-static int\n+static enum dwarf_form\n AT_string_form (dw_attr_ref a)\n {\n   struct indirect_string_node *node;"}, {"sha": "a13fd1340f4eea81ee7b0cbc8b28270176df95b0", "filename": "gcc/fixed-value.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ffixed-value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ffixed-value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixed-value.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -1,5 +1,5 @@\n /* Fixed-point arithmetic support.\n-   Copyright (C) 2006, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -784,7 +784,7 @@ bool\n fixed_compare (int icode, const FIXED_VALUE_TYPE *op0,\n \t       const FIXED_VALUE_TYPE *op1)\n {\n-  enum tree_code code = icode;\n+  enum tree_code code = (enum tree_code) icode;\n   gcc_assert (op0->mode == op1->mode);\n \n   switch (code)"}, {"sha": "a7abbc88c5de310882a561b51181f2853b28328b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -1,3 +1,9 @@\n+2009-04-27  Ian Lance Taylor  <iant@google.com>\n+\n+\t* trans-intrinsic.c (DEFINE_MATH_BUILTIN): Add casts to enum\n+\ttype.\n+\t* trans-io.c (st_parameter_field): Add casts to enum type.\n+\n 2009-04-26  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/39893"}, {"sha": "1d6e8bb3b514cb12c84d9afa327437001542cb8d", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -92,9 +92,11 @@ gfc_intrinsic_map_t;\n    except for atan2.  */\n #define DEFINE_MATH_BUILTIN(ID, NAME, ARGTYPE) \\\n   { GFC_ISYM_ ## ID, BUILT_IN_ ## ID ## F, BUILT_IN_ ## ID, \\\n-    BUILT_IN_ ## ID ## L, BUILT_IN_ ## ID ## L, 0, 0, 0, 0, true, \\\n-    false, true, NAME, NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE, \\\n-    NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE},\n+    BUILT_IN_ ## ID ## L, BUILT_IN_ ## ID ## L, (enum built_in_function) 0, \\\n+    (enum built_in_function) 0, (enum built_in_function) 0, \\\n+    (enum built_in_function) 0, true, false, true, NAME, NULL_TREE, \\\n+    NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE, \\\n+    NULL_TREE},\n \n #define DEFINE_MATH_BUILTIN_C(ID, NAME, ARGTYPE) \\\n   { GFC_ISYM_ ## ID, BUILT_IN_ ## ID ## F, BUILT_IN_ ## ID, \\"}, {"sha": "b15430512595e966f55f19ca46d9b6cb5962f173", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -105,7 +105,7 @@ static GTY(()) gfc_st_parameter_field st_parameter_field[] =\n   { #name, mask, IOPARM_ptype_##param_type, IOPARM_type_##type, NULL, NULL },\n #include \"ioparm.def\"\n #undef IOPARM\n-  { NULL, 0, 0, 0, NULL, NULL }\n+  { NULL, 0, (enum ioparam_type) 0, (enum iofield_type) 0, NULL, NULL }\n };\n \n /* Library I/O subroutines */"}, {"sha": "11c948f2127d648820168cd09ebb7baecf6b6747", "filename": "gcc/fwprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ffwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ffwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffwprop.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -694,7 +694,7 @@ update_df (rtx insn, rtx *loc, df_ref *use_rec, enum df_ref_type type,\n       df_ref orig_use = use, new_use;\n       int width = -1;\n       int offset = -1;\n-      enum machine_mode mode = 0;\n+      enum machine_mode mode = VOIDmode;\n       rtx *new_loc = find_occurrence (loc, DF_REF_REG (orig_use));\n       use_rec++;\n "}, {"sha": "b913ee23b413873e062688e76b9bb7794670cde3", "filename": "gcc/gensupport.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -1358,7 +1358,7 @@ static const struct std_pred_table std_preds[] = {\n   {\"register_operand\", false, false, {SUBREG, REG}},\n   {\"pmode_register_operand\", true, false, {SUBREG, REG}},\n   {\"scratch_operand\", false, false, {SCRATCH, REG}},\n-  {\"immediate_operand\", false, true, {0}},\n+  {\"immediate_operand\", false, true, {UNKNOWN}},\n   {\"const_int_operand\", false, false, {CONST_INT}},\n   {\"const_double_operand\", false, false, {CONST_INT, CONST_DOUBLE}},\n   {\"nonimmediate_operand\", false, false, {SUBREG, REG, MEM}},"}, {"sha": "d3f8f8fb8c449271eace53dfac0ff275bbe1e4fd", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -2202,7 +2202,7 @@ static inline enum tree_code\n gimple_cond_code (const_gimple gs)\n {\n   GIMPLE_CHECK (gs, GIMPLE_COND);\n-  return gs->gsbase.subcode;\n+  return (enum tree_code) gs->gsbase.subcode;\n }\n \n "}, {"sha": "f876b458d2d3f1a9695ef368d38a9a29e31b4854", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -1897,7 +1897,7 @@ reemit_notes (rtx insn)\n     {\n       if (REG_NOTE_KIND (note) == REG_SAVE_NOTE)\n \t{\n-\t  enum insn_note note_type = INTVAL (XEXP (note, 0));\n+\t  enum insn_note note_type = (enum insn_note) INTVAL (XEXP (note, 0));\n \n \t  last = emit_note_before (note_type, last);\n \t  remove_note (insn, note);"}, {"sha": "796d915e1c6eef75873c8886a1c31f41d88bb328", "filename": "gcc/hooks.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -1,5 +1,5 @@\n /* General-purpose hooks.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008\n+   Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -49,13 +49,6 @@ hook_bool_void_true (void)\n   return true;\n }\n \n-/* Generic hook that takes no arguments and returns NO_REGS.  */\n-int\n-hook_int_void_no_regs (void)\n-{\n-  return NO_REGS;\n-}\n-\n /* Generic hook that takes (bool) and returns false.  */\n bool\n hook_bool_bool_false (bool a ATTRIBUTE_UNUSED)"}, {"sha": "89e7f6dbf432fcce3b3f6420a261d12fc1554772", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -1,5 +1,5 @@\n /* General-purpose hooks.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008\n+   Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -62,7 +62,6 @@ extern int hook_int_const_tree_const_tree_1 (const_tree, const_tree);\n extern int hook_int_rtx_0 (rtx);\n extern int hook_int_rtx_bool_0 (rtx, bool);\n extern int hook_int_size_t_constcharptr_int_0 (size_t, const char *, int);\n-extern int hook_int_void_no_regs (void);\n \n extern tree hook_tree_tree_tree_null (tree, tree);\n extern tree hook_tree_tree_tree_tree_null (tree, tree, tree);"}, {"sha": "f10c219b0d8571fc8b8430d9e431201ab8ce9398", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -1,3 +1,9 @@\n+2009-04-27  Ian Lance Taylor  <iant@google.com>\n+\n+\t* builtins.c (java_builtins): Add casts to enum type.\n+\t* verify-impl.c (check_class_constant): Add cast to enum type.\n+\t(check_constant, check_wide_constant): Likewise.\n+\n 2009-04-27  Richard Guenther  <rguenther@suse.de>\n \n \tPR java/38374"}, {"sha": "39c73a5e7fae0c0f36c5f88c72df97eaa8e4024d", "filename": "gcc/java/builtins.c", "status": "modified", "additions": 44, "deletions": 28, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fjava%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fjava%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuiltins.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -80,9 +80,9 @@ struct GTY(()) builtin_record {\n \n static GTY(()) struct builtin_record java_builtins[] =\n {\n-  { { \"java.lang.Math\" }, { \"min\" }, min_builtin, 0 },\n-  { { \"java.lang.Math\" }, { \"max\" }, max_builtin, 0 },\n-  { { \"java.lang.Math\" }, { \"abs\" }, abs_builtin, 0 },\n+  { { \"java.lang.Math\" }, { \"min\" }, min_builtin, (enum built_in_function) 0 },\n+  { { \"java.lang.Math\" }, { \"max\" }, max_builtin, (enum built_in_function) 0 },\n+  { { \"java.lang.Math\" }, { \"abs\" }, abs_builtin, (enum built_in_function) 0 },\n   { { \"java.lang.Math\" }, { \"acos\" }, NULL, BUILT_IN_ACOS },\n   { { \"java.lang.Math\" }, { \"asin\" }, NULL, BUILT_IN_ASIN },\n   { { \"java.lang.Math\" }, { \"atan\" }, NULL, BUILT_IN_ATAN },\n@@ -96,31 +96,47 @@ static GTY(()) struct builtin_record java_builtins[] =\n   { { \"java.lang.Math\" }, { \"sin\" }, NULL, BUILT_IN_SIN },\n   { { \"java.lang.Math\" }, { \"sqrt\" }, NULL, BUILT_IN_SQRT },\n   { { \"java.lang.Math\" }, { \"tan\" }, NULL, BUILT_IN_TAN },\n-  { { \"java.lang.Float\" }, { \"intBitsToFloat\" }, convert_real, 0 },\n-  { { \"java.lang.Double\" }, { \"longBitsToDouble\" }, convert_real, 0 },\n-  { { \"java.lang.Float\" }, { \"floatToRawIntBits\" }, convert_real, 0 },\n-  { { \"java.lang.Double\" }, { \"doubleToRawLongBits\" }, convert_real, 0 },\n-  { { \"sun.misc.Unsafe\" }, { \"putInt\" }, putObject_builtin, 0},\n-  { { \"sun.misc.Unsafe\" }, { \"putLong\" }, putObject_builtin, 0},\n-  { { \"sun.misc.Unsafe\" }, { \"putObject\" }, putObject_builtin, 0},\n-  { { \"sun.misc.Unsafe\" }, { \"compareAndSwapInt\" }, \n-    compareAndSwapInt_builtin, 0},\n-  { { \"sun.misc.Unsafe\" }, { \"compareAndSwapLong\" }, \n-    compareAndSwapLong_builtin, 0},\n-  { { \"sun.misc.Unsafe\" }, { \"compareAndSwapObject\" }, \n-    compareAndSwapObject_builtin, 0},\n-  { { \"sun.misc.Unsafe\" }, { \"putOrderedInt\" }, putVolatile_builtin, 0},\n-  { { \"sun.misc.Unsafe\" }, { \"putOrderedLong\" }, putVolatile_builtin, 0},\n-  { { \"sun.misc.Unsafe\" }, { \"putOrderedObject\" }, putVolatile_builtin, 0},\n-  { { \"sun.misc.Unsafe\" }, { \"putIntVolatile\" }, putVolatile_builtin, 0},\n-  { { \"sun.misc.Unsafe\" }, { \"putLongVolatile\" }, putVolatile_builtin, 0},\n-  { { \"sun.misc.Unsafe\" }, { \"putObjectVolatile\" }, putVolatile_builtin, 0},\n-  { { \"sun.misc.Unsafe\" }, { \"getObjectVolatile\" }, getVolatile_builtin, 0},\n-  { { \"sun.misc.Unsafe\" }, { \"getIntVolatile\" }, getVolatile_builtin, 0},\n-  { { \"sun.misc.Unsafe\" }, { \"getLongVolatile\" }, getVolatile_builtin, 0},\n-  { { \"sun.misc.Unsafe\" }, { \"getLong\" }, getVolatile_builtin, 0},\n-  { { \"java.util.concurrent.atomic.AtomicLong\" }, { \"VMSupportsCS8\" }, \n-    VMSupportsCS8_builtin, 0},\n+  { { \"java.lang.Float\" }, { \"intBitsToFloat\" }, convert_real,\n+    (enum built_in_function) 0 },\n+  { { \"java.lang.Double\" }, { \"longBitsToDouble\" }, convert_real,\n+    (enum built_in_function) 0 },\n+  { { \"java.lang.Float\" }, { \"floatToRawIntBits\" }, convert_real,\n+    (enum built_in_function) 0 },\n+  { { \"java.lang.Double\" }, { \"doubleToRawLongBits\" }, convert_real,\n+    (enum built_in_function) 0 },\n+  { { \"sun.misc.Unsafe\" }, { \"putInt\" }, putObject_builtin,\n+    (enum built_in_function) 0},\n+  { { \"sun.misc.Unsafe\" }, { \"putLong\" }, putObject_builtin,\n+    (enum built_in_function) 0},\n+  { { \"sun.misc.Unsafe\" }, { \"putObject\" }, putObject_builtin,\n+  (enum built_in_function) 0},\n+  { { \"sun.misc.Unsafe\" }, { \"compareAndSwapInt\" },\n+    compareAndSwapInt_builtin, (enum built_in_function) 0},\n+  { { \"sun.misc.Unsafe\" }, { \"compareAndSwapLong\" },\n+    compareAndSwapLong_builtin, (enum built_in_function) 0},\n+  { { \"sun.misc.Unsafe\" }, { \"compareAndSwapObject\" },\n+    compareAndSwapObject_builtin, (enum built_in_function) 0},\n+  { { \"sun.misc.Unsafe\" }, { \"putOrderedInt\" }, putVolatile_builtin,\n+    (enum built_in_function) 0},\n+  { { \"sun.misc.Unsafe\" }, { \"putOrderedLong\" }, putVolatile_builtin,\n+    (enum built_in_function) 0},\n+  { { \"sun.misc.Unsafe\" }, { \"putOrderedObject\" }, putVolatile_builtin,\n+    (enum built_in_function) 0},\n+  { { \"sun.misc.Unsafe\" }, { \"putIntVolatile\" }, putVolatile_builtin,\n+    (enum built_in_function) 0},\n+  { { \"sun.misc.Unsafe\" }, { \"putLongVolatile\" }, putVolatile_builtin,\n+    (enum built_in_function) 0},\n+  { { \"sun.misc.Unsafe\" }, { \"putObjectVolatile\" }, putVolatile_builtin,\n+    (enum built_in_function) 0},\n+  { { \"sun.misc.Unsafe\" }, { \"getObjectVolatile\" }, getVolatile_builtin,\n+    (enum built_in_function) 0},\n+  { { \"sun.misc.Unsafe\" }, { \"getIntVolatile\" }, getVolatile_builtin,\n+    (enum built_in_function) 0},\n+  { { \"sun.misc.Unsafe\" }, { \"getLongVolatile\" }, getVolatile_builtin, (enum built_in_function) 0},\n+  { { \"sun.misc.Unsafe\" }, { \"getLong\" }, getVolatile_builtin,\n+    (enum built_in_function) 0},\n+  { { \"java.util.concurrent.atomic.AtomicLong\" }, { \"VMSupportsCS8\" },\n+    VMSupportsCS8_builtin, (enum built_in_function) 0},\n   { { NULL }, { NULL }, NULL, END_BUILTINS }\n };\n "}, {"sha": "759ee42c3dbb1adf3a5b6cd9436a0d1f15d9e270", "filename": "gcc/java/verify-impl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fjava%2Fverify-impl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fjava%2Fverify-impl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify-impl.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -1947,7 +1947,7 @@ check_pool_index (int index)\n static type\n check_class_constant (int index)\n {\n-  type t = { 0, 0, 0 };\n+  type t = { (type_val) 0, 0, 0 };\n   vfy_constants *pool;\n \n   check_pool_index (index);\n@@ -1964,7 +1964,7 @@ check_class_constant (int index)\n static type\n check_constant (int index)\n {\n-  type t = { 0, 0, 0 };\n+  type t = { (type_val) 0, 0, 0 };\n   vfy_constants *pool;\n \n   check_pool_index (index);\n@@ -1988,7 +1988,7 @@ check_constant (int index)\n static type\n check_wide_constant (int index)\n {\n-  type t = { 0, 0, 0 };\n+  type t = { (type_val) 0, 0, 0 };\n   vfy_constants *pool;\n \n   check_pool_index (index);"}, {"sha": "5f5a4787caffb3263978daa5c5e0befb66d3eade", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -1,3 +1,7 @@\n+2009-04-27  Ian Lance Taylor  <iant@google.com>\n+\n+\t* objc-act.c (objc_gimplify_expr): Add casts to enum type.\n+\n 2009-04-24  Ian Lance Taylor  <iant@google.com>\n \n \t* objc-act.c (get_super_receiver): Update calls to"}, {"sha": "741e344fd74c310c13cedfb158ca01f34f8e176e", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -9552,9 +9552,9 @@ objc_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n     }\n \n #ifdef OBJCPLUS\n-  return cp_gimplify_expr (expr_p, pre_p, post_p);\n+  return (enum gimplify_status) cp_gimplify_expr (expr_p, pre_p, post_p);\n #else\n-  return c_gimplify_expr (expr_p, pre_p, post_p);\n+  return (enum gimplify_status) c_gimplify_expr (expr_p, pre_p, post_p);\n #endif\n }\n "}, {"sha": "7eab811f0660f53cfbba1684ce38a31da88b2300", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -555,10 +555,10 @@ expand_widen_pattern_expr (tree exp, rtx op0, rtx op1, rtx wide_op, rtx target,\n                            int unsignedp)\n {   \n   tree oprnd0, oprnd1, oprnd2;\n-  enum machine_mode wmode = 0, tmode0, tmode1 = 0;\n+  enum machine_mode wmode = VOIDmode, tmode0, tmode1 = VOIDmode;\n   optab widen_pattern_optab;\n   int icode; \n-  enum machine_mode xmode0, xmode1 = 0, wxmode = 0;\n+  enum machine_mode xmode0, xmode1 = VOIDmode, wxmode = VOIDmode;\n   rtx temp;\n   rtx pat;\n   rtx xop0, xop1, wxop;"}, {"sha": "732283d4c22e70c8c2d360227f9f52e3de081ca2", "filename": "gcc/predict.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -677,7 +677,8 @@ combine_predictions_for_insn (rtx insn, basic_block bb)\n   for (note = REG_NOTES (insn); note; note = XEXP (note, 1))\n     if (REG_NOTE_KIND (note) == REG_BR_PRED)\n       {\n-\tenum br_predictor predictor = INTVAL (XEXP (XEXP (note, 0), 0));\n+\tenum br_predictor predictor = ((enum br_predictor)\n+\t\t\t\t       INTVAL (XEXP (XEXP (note, 0), 0)));\n \tint probability = INTVAL (XEXP (XEXP (note, 0), 1));\n \n \tfound = true;\n@@ -723,7 +724,8 @@ combine_predictions_for_insn (rtx insn, basic_block bb)\n     {\n       if (REG_NOTE_KIND (*pnote) == REG_BR_PRED)\n \t{\n-\t  enum br_predictor predictor = INTVAL (XEXP (XEXP (*pnote, 0), 0));\n+\t  enum br_predictor predictor = ((enum br_predictor)\n+\t\t\t\t\t INTVAL (XEXP (XEXP (*pnote, 0), 0)));\n \t  int probability = INTVAL (XEXP (XEXP (*pnote, 0), 1));\n \n \t  dump_prediction (dump_file, predictor, probability, bb,"}, {"sha": "3803ed69c1b5adcc02e4727f52cda81c80fd7947", "filename": "gcc/real.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -997,7 +997,7 @@ bool\n real_arithmetic (REAL_VALUE_TYPE *r, int icode, const REAL_VALUE_TYPE *op0,\n \t\t const REAL_VALUE_TYPE *op1)\n {\n-  enum tree_code code = icode;\n+  enum tree_code code = (enum tree_code) icode;\n \n   if (op0->decimal || (op1 && op1->decimal))\n     return decimal_real_arithmetic (r, code, op0, op1);\n@@ -1069,7 +1069,7 @@ bool\n real_compare (int icode, const REAL_VALUE_TYPE *op0,\n \t      const REAL_VALUE_TYPE *op1)\n {\n-  enum tree_code code = icode;\n+  enum tree_code code = (enum tree_code) icode;\n \n   switch (code)\n     {"}, {"sha": "30172d0e693492e8b9e55931b53d70846fdc6888", "filename": "gcc/target-def.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -480,7 +480,8 @@\n \n /* In hooks.c.  */\n #define TARGET_CANNOT_MODIFY_JUMPS_P hook_bool_void_false\n-#define TARGET_BRANCH_TARGET_REGISTER_CLASS hook_int_void_no_regs\n+#define TARGET_BRANCH_TARGET_REGISTER_CLASS \\\n+  default_branch_target_register_class\n #define TARGET_BRANCH_TARGET_REGISTER_CALLEE_SAVED hook_bool_bool_false\n #define TARGET_CANNOT_FORCE_CONST_MEM hook_bool_rtx_false\n #define TARGET_CANNOT_COPY_INSN_P NULL"}, {"sha": "d3a4af6c31f0ecb29f23959ed0a37f58f65cbd12", "filename": "gcc/target.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -586,7 +586,7 @@ struct gcc_target\n \n   /* Return a register class for which branch target register\n      optimizations should be applied.  */\n-  int (* branch_target_register_class) (void);\n+  enum reg_class (* branch_target_register_class) (void);\n \n   /* Return true if branch target register optimizations should include\n      callee-saved registers that are not already live during the current"}, {"sha": "7035c4943314eb6826972b6309bdfa64acdd6161", "filename": "gcc/targhooks.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -576,6 +576,12 @@ default_internal_arg_pointer (void)\n     return virtual_incoming_args_rtx;\n }\n \n+enum reg_class\n+default_branch_target_register_class (void)\n+{\n+  return NO_REGS;\n+}\n+\n #ifdef IRA_COVER_CLASSES\n const enum reg_class *\n default_ira_cover_classes (void)"}, {"sha": "cbd6e9085dc6cfb17bda78c52fbce5b351c75903", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -89,6 +89,7 @@ extern const char *hook_invalid_arg_for_unprototyped_fn\n extern bool hook_bool_const_rtx_commutative_p (const_rtx, int);\n extern rtx default_function_value (const_tree, const_tree, bool);\n extern rtx default_internal_arg_pointer (void);\n+extern enum reg_class default_branch_target_register_class (void);\n #ifdef IRA_COVER_CLASSES\n extern const enum reg_class *default_ira_cover_classes (void);\n #endif"}, {"sha": "aa164b21358e6f96c5f8fbe1ad9c202238044bf0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -1,3 +1,8 @@\n+2009-04-27  Ian Lance Taylor  <iant@google.com>\n+\n+\t* gcc.dg/Wcxx-compat-5.c: New testcase.\n+\t* gcc.dg/Wcxx-compat-6.c: New testcase.\n+\n 2009-04-27  Trevor Smigiel <trevor_smigiel@playstation.sony.com>\n \n \tAllow non-constant arguments to conversion intrinsics."}, {"sha": "d7b2f96a6be8981a3e4355f7d2ab7f9819973996", "filename": "gcc/testsuite/gcc.dg/Wcxx-compat-5.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-5.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wc++-compat\" } */\n+enum E1 { A, B, C };\n+enum E2 { D, E, F };\n+\n+int f1() { return A; }\n+\n+struct s { enum E1 e1 : 3; enum E2 e2 : 4; };\n+\n+enum E1\n+f2 (int i, struct s sv, struct s *pv)\n+{\n+  int a;\n+  enum E1 e1 = B;\n+  enum E2 e2 = E;\n+  switch (i)\n+    {\n+    case 0:\n+      return A;\n+    case 1:\n+      return D;\t\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+    case 2:\n+      return 0;\t\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+    case 3:\n+      return (enum E1) 1;\n+    case 4:\n+      return (enum E2) 2;\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+    case 5:\n+      return e1;\n+    case 6:\n+      return e2;\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+    case 7:\n+      return pv->e1;\n+    case 8:\n+      return sv.e1;\n+    case 9:\n+      return pv->e2;\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+    case 10:\n+      return sv.e2;\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+    case 11:\n+      return 1, A;\n+    default:\n+      return C;\n+    }\n+}"}, {"sha": "2b327c4bf64448e81b120f546b65fa287a22f1cb", "filename": "gcc/testsuite/gcc.dg/Wcxx-compat-6.c", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-6.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -0,0 +1,112 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wc++-compat\" } */\n+enum E1 { A, B, C };\n+enum E2 { D, E, F };\n+\n+enum E1 v1a = A;\n+enum E1 v1b = D;\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+enum E1 v1c = 0;\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+enum E1 v1d = (enum E1) 0;\n+enum E1 v1e = (enum E2) 0;\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+\n+enum E2 v2a;\n+\n+enum E1 a1[] =\n+{\n+  A,\n+  D,\t\t\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+  0,\t\t\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+  (enum E1) 0,\n+  (enum E2) 0,\t\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+  A\n+};\n+\n+struct s1\n+{\n+  enum E1 e1;\n+};\n+\n+struct s1 a2[] =\n+{\n+  { A },\n+  { D },\t\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+  { 0 },\t\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+  { (enum E1) 0 },\n+  { (enum E2) 0 },\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+  { A }\n+};\n+\n+struct s1 a3[] =\n+{\n+  [ 5 ] = { .e1 = A },\n+  [ 4 ] = { .e1 = D },\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+  [ 3 ] = { .e1 = 0 },\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+  [ 2 ] = { .e1 = (enum E1) 0 },\n+  [ 1 ] = { .e1 = (enum E2) 0 }, /* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+  [ 0 ] = { .e1 = A }\n+};\n+\n+struct s2\n+{\n+  enum E1 e1 : 3;\n+};\n+\n+struct s2 a4[] =\n+{\n+  { A },\n+  { D },\t\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+  { 0 },\t\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+  { (enum E1) 0 },\n+  { (enum E2) 0 },\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+  { A }\n+};\n+\n+struct s2 a5[] =\n+{\n+  [ 5 ] = { .e1 = A },\n+  [ 4 ] = { .e1 = D },\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+  [ 3 ] = { .e1 = 0 },\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+  [ 2 ] = { .e1 = (enum E1) 0 },\n+  [ 1 ] = { .e1 = (enum E2) 0 }, /* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+  [ 0 ] = { .e1 = A }\n+};\n+\n+void\n+f(enum E1 e1, enum E2 e2, struct s1 vs1, struct s1 *vp1)\n+{\n+  enum E1 va1[] = {\n+    e1,\n+    e2,\t\t\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+    v1a,\n+    v2a,\t\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+    vs1.e1,\n+    vp1->e1,\n+    e1 ? e1 : e1,\n+    (0, e1)\n+  };\n+\n+  struct s1 va2[] = {\n+    { e1 },\n+    { e2 },\t\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+    { v1a },\n+    { v2a },\t\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+    { vs1.e1 },\n+    { vp1->e1 },\n+    { e1 ? e1 : e1 },\n+    { (0, e1) }\n+  };\n+\n+  struct s2 va3[] = {\n+    { e1 },\n+    { e2 },\t\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+    { v1a },\n+    { v2a },\t\t\t/* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+    { vs1.e1 },\n+    { vp1->e1 },\n+    { e1 ? e1 : e1 },\n+    { (0, e1) }\n+  };\n+}\n+\n+/* Match all extra informative notes.  */\n+/* { dg-warning \"near initialization for\" \"expected\" { target *-*-* } 0 } */"}, {"sha": "de2ad5f921bad56c8d4ee49333ee8dcf75bac1f3", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -284,7 +284,8 @@ print_direction_vector (FILE *outf,\n \n   for (eq = 0; eq < length; eq++)\n     {\n-      enum data_dependence_direction dir = dirv[eq];\n+      enum data_dependence_direction dir = ((enum data_dependence_direction)\n+\t\t\t\t\t    dirv[eq]);\n \n       switch (dir)\n \t{"}, {"sha": "e7a01078a1c501258f1b8584031e6a91dd648009", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -3231,7 +3231,7 @@ vect_supportable_dr_alignment (struct data_reference *dr)\n   gimple stmt = DR_STMT (dr);\n   stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n   tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n-  enum machine_mode mode = (int) TYPE_MODE (vectype);\n+  enum machine_mode mode = TYPE_MODE (vectype);\n   struct loop *vect_loop = LOOP_VINFO_LOOP (STMT_VINFO_LOOP_VINFO (stmt_info));\n   bool nested_in_vect_loop = nested_in_vect_loop_p (vect_loop, stmt);\n   bool invariant_in_outerloop = false;"}, {"sha": "a2e83e2c108a9fe90b1a280e542bb4ebaefd3969", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -2584,7 +2584,7 @@ vect_create_epilog_for_reduction (tree vect_def, gimple stmt,\n     }\n   else\n     {\n-      enum tree_code shift_code = 0;\n+      enum tree_code shift_code = ERROR_MARK;\n       bool have_whole_vector_shift = true;\n       int bit_offset;\n       int element_bitsize = tree_low_cst (bitsize, 1);"}, {"sha": "0c4e9c853dd94f91ba8ab8b637de0b883be8211f", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -283,8 +283,9 @@ vect_build_slp_tree (loop_vec_info loop_vinfo, slp_tree *node,\n   unsigned int i;\n   VEC (gimple, heap) *stmts = SLP_TREE_SCALAR_STMTS (*node);\n   gimple stmt = VEC_index (gimple, stmts, 0);\n-  enum vect_def_type first_stmt_dt0 = 0, first_stmt_dt1 = 0;\n-  enum tree_code first_stmt_code = 0, rhs_code;\n+  enum vect_def_type first_stmt_dt0 = vect_uninitialized_def;\n+  enum vect_def_type first_stmt_dt1 = vect_uninitialized_def;\n+  enum tree_code first_stmt_code = ERROR_MARK, rhs_code;\n   tree first_stmt_def1_type = NULL_TREE, first_stmt_def0_type = NULL_TREE;\n   tree lhs;\n   bool stop_recursion = false, need_same_oprnds = false;"}, {"sha": "f16d4ac76db6c658faf03b546b3ef29ed33a9fb7", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -4618,7 +4618,7 @@ supportable_widening_operation (enum tree_code code, gimple stmt, tree vectype,\n   struct loop *vect_loop = LOOP_VINFO_LOOP (loop_info);\n   bool ordered_p;\n   enum machine_mode vec_mode;\n-  enum insn_code icode1 = 0, icode2 = 0;\n+  enum insn_code icode1, icode2;\n   optab optab1, optab2;\n   tree type = gimple_expr_type (stmt);\n   tree wide_vectype = get_vectype_for_scalar_type (type);"}, {"sha": "4ad9b3875fa93f3cc8775cc26cb6a2c29257a3c2", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f40b7964a03aaf00a955b65115dab1627e3c7c/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=81f40b7964a03aaf00a955b65115dab1627e3c7c", "patch": "@@ -55,7 +55,8 @@ enum dr_alignment_support {\n \n /* Define type of def-use cross-iteration cycle.  */\n enum vect_def_type {\n-  vect_constant_def = 1,\n+  vect_uninitialized_def = 0,\n+  vect_constant_def,\n   vect_invariant_def,\n   vect_loop_def,\n   vect_induction_def,"}]}