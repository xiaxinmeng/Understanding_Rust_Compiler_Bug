{"sha": "0257e3837eb84c9f288c39cfbb3caa41badf9e3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI1N2UzODM3ZWI4NGM5ZjI4OGMzOWNmYmIzY2FhNDFiYWRmOWUzYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-10-11T22:52:04Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-10-11T22:52:04Z"}, "message": "re PR c/24255 (__transparent_union__ mishandled)\n\n        PR c/24255\n        * c-typeck.c (convert_for_assignment): Use build_constructor_single\n        to initialize a transparent union instead of a nop_expr.\n\nFrom-SVN: r105270", "tree": {"sha": "6b4c903cc38542479c96457d3c7e5f32641dfc61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b4c903cc38542479c96457d3c7e5f32641dfc61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0257e3837eb84c9f288c39cfbb3caa41badf9e3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0257e3837eb84c9f288c39cfbb3caa41badf9e3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0257e3837eb84c9f288c39cfbb3caa41badf9e3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0257e3837eb84c9f288c39cfbb3caa41badf9e3b/comments", "author": null, "committer": null, "parents": [{"sha": "a4176272bf595ac4110d38e07970bdde42d6d4dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4176272bf595ac4110d38e07970bdde42d6d4dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4176272bf595ac4110d38e07970bdde42d6d4dd"}], "stats": {"total": 65, "additions": 54, "deletions": 11}, "files": [{"sha": "9d7fc4e7a8cc77d0ee3b14858bf9c9ed5c0952a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0257e3837eb84c9f288c39cfbb3caa41badf9e3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0257e3837eb84c9f288c39cfbb3caa41badf9e3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0257e3837eb84c9f288c39cfbb3caa41badf9e3b", "patch": "@@ -1,3 +1,9 @@\n+2005-10-11  Richard Henderson  <rth@redhat.com>\n+\n+\tPR c/24255\n+\t* c-typeck.c (convert_for_assignment): Use build_constructor_single\n+\tto initialize a transparent union instead of a nop_expr.\n+\n 2005-10-11  Richard Henderson  <rth@redhat.com>\n \n \t* Makefile.in (tree-ssa-dce.o): Depend on SCEV_H."}, {"sha": "cf9798adc8a43412bfe75f90eb8546c28c281fdf", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0257e3837eb84c9f288c39cfbb3caa41badf9e3b/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0257e3837eb84c9f288c39cfbb3caa41badf9e3b/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=0257e3837eb84c9f288c39cfbb3caa41badf9e3b", "patch": "@@ -3799,13 +3799,11 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n   else if (codel == UNION_TYPE && TYPE_TRANSPARENT_UNION (type)\n \t   && (errtype == ic_argpass || errtype == ic_argpass_nonproto))\n     {\n-      tree memb_types;\n-      tree marginal_memb_type = 0;\n+      tree memb, marginal_memb = NULL_TREE;\n \n-      for (memb_types = TYPE_FIELDS (type); memb_types;\n-\t   memb_types = TREE_CHAIN (memb_types))\n+      for (memb = TYPE_FIELDS (type); memb ; memb = TREE_CHAIN (memb))\n \t{\n-\t  tree memb_type = TREE_TYPE (memb_types);\n+\t  tree memb_type = TREE_TYPE (memb);\n \n \t  if (comptypes (TYPE_MAIN_VARIANT (memb_type),\n \t\t\t TYPE_MAIN_VARIANT (rhstype)))\n@@ -3837,8 +3835,8 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n \t\t    break;\n \n \t\t  /* Keep looking for a better type, but remember this one.  */\n-\t\t  if (!marginal_memb_type)\n-\t\t    marginal_memb_type = memb_type;\n+\t\t  if (!marginal_memb)\n+\t\t    marginal_memb = memb;\n \t\t}\n \t    }\n \n@@ -3852,13 +3850,13 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n \t    }\n \t}\n \n-      if (memb_types || marginal_memb_type)\n+      if (memb || marginal_memb)\n \t{\n-\t  if (!memb_types)\n+\t  if (!memb)\n \t    {\n \t      /* We have only a marginally acceptable member type;\n \t\t it needs a warning.  */\n-\t      tree ttl = TREE_TYPE (marginal_memb_type);\n+\t      tree ttl = TREE_TYPE (TREE_TYPE (marginal_memb));\n \t      tree ttr = TREE_TYPE (rhstype);\n \n \t      /* Const and volatile mean something different for function\n@@ -3893,12 +3891,14 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n \t\t\t\t\t\"from pointer target type\"),\n \t\t\t\t     G_(\"return discards qualifiers from \"\n \t\t\t\t\t\"pointer target type\"));\n+\n+\t      memb = marginal_memb;\n \t    }\n \n \t  if (pedantic && (!fundecl || !DECL_IN_SYSTEM_HEADER (fundecl)))\n \t    pedwarn (\"ISO C prohibits argument conversion to union type\");\n \n-\t  return build1 (NOP_EXPR, type, rhs);\n+\t  return build_constructor_single (type, memb, rhs);\n \t}\n     }\n "}, {"sha": "47e245e2470c2baf2070de45b850c982542658e5", "filename": "gcc/testsuite/gcc.dg/transparent-union-5.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0257e3837eb84c9f288c39cfbb3caa41badf9e3b/gcc%2Ftestsuite%2Fgcc.dg%2Ftransparent-union-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0257e3837eb84c9f288c39cfbb3caa41badf9e3b/gcc%2Ftestsuite%2Fgcc.dg%2Ftransparent-union-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftransparent-union-5.c?ref=0257e3837eb84c9f288c39cfbb3caa41badf9e3b", "patch": "@@ -0,0 +1,37 @@\n+/* PR 24255 */\n+/* { dg-do run } */\n+/* { dg-options \"-O\" } */\n+\n+extern void abort (void);\n+\n+union wait { int w_status; };\n+\n+typedef union\n+{\n+  union wait *uptr;\n+  int *iptr;\n+} WAIT_STATUS __attribute__ ((__transparent_union__));\n+\n+int status;\n+union wait wstatus;\n+\n+void __attribute__((noinline))\n+test1 (WAIT_STATUS s)\n+{\n+  if (s.iptr != &status)\n+    abort ();\n+}\n+\n+void __attribute__((noinline))\n+test2 (WAIT_STATUS s)\n+{\n+  if (s.uptr != &wstatus)\n+    abort ();\n+}\n+\n+int main()\n+{\n+  test1 (&status);\n+  test2 (&wstatus);\n+  return 0;\n+}"}]}