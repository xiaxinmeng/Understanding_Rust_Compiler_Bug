{"sha": "a5271b144985bd65b8fcbb14984deecd139e90ca", "node_id": "C_kwDOANBUbNoAKGE1MjcxYjE0NDk4NWJkNjViOGZjYmIxNDk4NGRlZWNkMTM5ZTkwY2E", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-07-26T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-07-26T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "7040fe46a32fc0c92cc1c3eceef590c983168e9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7040fe46a32fc0c92cc1c3eceef590c983168e9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5271b144985bd65b8fcbb14984deecd139e90ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5271b144985bd65b8fcbb14984deecd139e90ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5271b144985bd65b8fcbb14984deecd139e90ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5271b144985bd65b8fcbb14984deecd139e90ca/comments", "author": null, "committer": null, "parents": [{"sha": "789c4b9bb015c361bc1a6adfcd0abadce555e562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/789c4b9bb015c361bc1a6adfcd0abadce555e562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/789c4b9bb015c361bc1a6adfcd0abadce555e562"}], "stats": {"total": 178, "additions": 177, "deletions": 1}, "files": [{"sha": "258cc4813c41e9ffe16e2ef8df369561e7f98b42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5271b144985bd65b8fcbb14984deecd139e90ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5271b144985bd65b8fcbb14984deecd139e90ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5271b144985bd65b8fcbb14984deecd139e90ca", "patch": "@@ -1,3 +1,123 @@\n+2022-07-25  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* Makefile.in (OBJS): Add range-op-float.o.\n+\t* range-op.cc (get_float_handler): New.\n+\t(range_op_handler::range_op_handler): Save code and type for\n+\tdelayed querying.\n+\t(range_op_handler::oeprator bool): Move from header file, and\n+\tadd support for floats.\n+\t(range_op_handler::fold_range): Add support for floats.\n+\t(range_op_handler::op1_range): Same.\n+\t(range_op_handler::op2_range): Same.\n+\t(range_op_handler::lhs_op1_relation): Same.\n+\t(range_op_handler::lhs_op2_relation): Same.\n+\t(range_op_handler::op1_op2_relation): Same.\n+\t* range-op.h (class range_operator_float): New.\n+\t(class floating_op_table): New.\n+\t* value-query.cc (range_query::get_tree_range): Add case for\n+\tREAL_CST.\n+\t* range-op-float.cc: New file.\n+\n+2022-07-25  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/91681\n+\t* config/i386/i386-expand.cc (split_double_concat): A new helper\n+\tfunction for setting a double word value from two word values.\n+\t* config/i386/i386-protos.h (split_double_concat): Prototype here.\n+\t* config/i386/i386.md (zero_extendditi2): New define_insn_and_split.\n+\t(*add<dwi>3_doubleword_zext): New define_insn_and_split.\n+\t(*sub<dwi>3_doubleword_zext): New define_insn_and_split.\n+\t(*concat<mode><dwi>3_1): New define_insn_and_split replacing\n+\tprevious define_split for implementing DST = (HI<<32)|LO as\n+\tpair of move instructions, setting lopart and hipart.\n+\t(*concat<mode><dwi>3_2): Likewise.\n+\t(*concat<mode><dwi>3_3): Likewise, where HI is zero_extended.\n+\t(*concat<mode><dwi>3_4): Likewise, where HI is zero_extended.\n+\n+2022-07-25  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR middle-end/106432\n+\t* gimple-range.cc (gimple_ranger::range_on_edge): Return false\n+\twhen the result range type is unsupported.\n+\n+2022-07-25  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* config/rs6000/rtems.h (CPLUSPLUS_CPP_SPEC): Undef.\n+\n+2022-07-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/106414\n+\t* match.pd (~(x ^ y) -> x == y): Restrict to single bit\n+\tprecision types.\n+\n+2022-07-25  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/aarch64/aarch64.md (rbit<mode>2): Rename this ...\n+\t(@aarch64_rbit<mode>): ... to this and change it in...\n+\t(ffs<mode>2,ctz<mode>2): ... here.\n+\t(@aarch64_rev16<mode>): New.\n+\t* config/aarch64/aarch64-builtins.cc: (aarch64_builtins):\n+\tDefine the following enum AARCH64_REV16, AARCH64_REV16L,\n+\tAARCH64_REV16LL, AARCH64_RBIT, AARCH64_RBITL, AARCH64_RBITLL.\n+\t(aarch64_init_data_intrinsics): New.\n+\t(aarch64_general_init_builtins): Add call to\n+\taarch64_init_data_intrinsics.\n+\t(aarch64_expand_builtin_data_intrinsic): New.\n+\t(aarch64_general_expand_builtin): Add call to\n+\taarch64_expand_builtin_data_intrinsic.\n+\t* config/aarch64/arm_acle.h (__clz, __clzl, __clzll, __cls, __clsl,\n+\t__clsll, __rbit, __rbitl, __rbitll, __rev, __revl, __revll, __rev16,\n+\t__rev16l, __rev16ll, __ror, __rorl, __rorll, __revsh): New.\n+\n+2022-07-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/extend.texi: Remove trailing whitespaces.\n+\t* doc/invoke.texi: Likewise.\n+\n+2022-07-25  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range-pretty-print.cc (vrange_printer::visit): New.\n+\t(vrange_printer::print_frange_prop): New.\n+\t* value-range-pretty-print.h (class vrange_printer): Add visit and\n+\tprint_frange_prop.\n+\t* value-range-storage.h (vrange_allocator::alloc_vrange): Handle frange.\n+\t(vrange_allocator::alloc_frange): New.\n+\t* value-range.cc (vrange::operator=): Handle frange.\n+\t(vrange::operator==): Same.\n+\t(frange::accept): New.\n+\t(frange::set): New.\n+\t(frange::normalize_kind): New.\n+\t(frange::union_): New.\n+\t(frange::intersect): New.\n+\t(frange::operator=): New.\n+\t(frange::operator==): New.\n+\t(frange::supports_type_p): New.\n+\t(frange::verify_range): New.\n+\t* value-range.h (enum value_range_discriminator): Handle frange.\n+\t(class fp_prop): New.\n+\t(FP_PROP_ACCESSOR): New.\n+\t(class frange_props): New.\n+\t(FRANGE_PROP_ACCESSOR): New.\n+\t(class frange): New.\n+\t(Value_Range::init): Handle frange.\n+\t(Value_Range::operator=): Same.\n+\t(Value_Range::supports_type_p): Same.\n+\t(frange_props::operator==): New.\n+\t(frange_props::union_): New.\n+\t(frange_props::intersect): New\n+\t(frange::frange): New.\n+\t(frange::type): New.\n+\t(frange::set_varying): New.\n+\t(frange::set_undefined): New.\n+\n+2022-07-25  Peter Bergner  <bergner@linux.ibm.com>\n+\t    Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR testsuite/106345\n+\t* config/rs6000/rs6000.h (DRIVER_SELF_SPECS): Adjust -mdejagnu-cpu\n+\tto filter out all -mtune options.\n+\n 2022-07-24  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* value-query.cc (range_query::get_value_range): Add assert."}, {"sha": "5d984816bfe7cf44177e992d5e67a7c63cd712dd", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5271b144985bd65b8fcbb14984deecd139e90ca/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5271b144985bd65b8fcbb14984deecd139e90ca/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=a5271b144985bd65b8fcbb14984deecd139e90ca", "patch": "@@ -1 +1 @@\n-20220725\n+20220726"}, {"sha": "00905b293a7c00260724cb04a82ff5d937616318", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5271b144985bd65b8fcbb14984deecd139e90ca/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5271b144985bd65b8fcbb14984deecd139e90ca/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=a5271b144985bd65b8fcbb14984deecd139e90ca", "patch": "@@ -1,3 +1,7 @@\n+2022-07-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* sm-fd.cc: Run dos2unix and fix coding style issues.\n+\n 2022-07-23  Immad Mir  <mirimmad@outlook.com>\n \n \t* sm-fd.cc (fd_param_diagnostic): New diagnostic class."}, {"sha": "208275eceab85ce174968d927f090f3b5a5ac118", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5271b144985bd65b8fcbb14984deecd139e90ca/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5271b144985bd65b8fcbb14984deecd139e90ca/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a5271b144985bd65b8fcbb14984deecd139e90ca", "patch": "@@ -1,3 +1,13 @@\n+2022-07-26  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/106230\n+\t* semantics.cc (finish_for_stmt): Check stmts_are_full_exprs_p.\n+\n+2022-07-25  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/87729\n+\t* class.cc (warn_hidden): Remove shortcut.\n+\n 2022-07-22  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/106366"}, {"sha": "18e136ce609fb9262f2cb09e9e5545892567119e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5271b144985bd65b8fcbb14984deecd139e90ca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5271b144985bd65b8fcbb14984deecd139e90ca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a5271b144985bd65b8fcbb14984deecd139e90ca", "patch": "@@ -1,3 +1,45 @@\n+2022-07-26  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/106230\n+\t* g++.dg/cpp0x/range-for38.C: New test.\n+\n+2022-07-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/analyzer/fd-2.c: Convert Windows endlines to Unix\n+\tstyle.\n+\t* gcc.dg/analyzer/fd-3.c: Likewise.\n+\t* gcc.dg/analyzer/fd-4.c: Likewise.\n+\t* gcc.dg/analyzer/fd-5.c: Likewise.\n+\t* c-c++-common/attr-fd.c: Likewise.\n+\n+2022-07-25  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/91681\n+\t* g++.target/i386/pr91681.C: New test case (from the PR).\n+\t* gcc.target/i386/pr91681-1.c: New int128 test case.\n+\t* gcc.target/i386/pr91681-2.c: Likewise.\n+\t* gcc.target/i386/pr91681-3.c: Likewise, but for ia32.\n+\n+2022-07-25  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/87729\n+\t* g++.dg/warn/Woverloaded-virt4.C: New test.\n+\n+2022-07-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/106414\n+\t* gcc.dg/torture/pr106414-1.c: New testcase.\n+\t* gcc.dg/torture/pr106414-2.c: Likewise.\n+\n+2022-07-25  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.target/aarch64/acle/data-intrinsics.c: New test.\n+\n+2022-07-25  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/nsdmi-union7.C: Fix PR number.\n+\n 2022-07-24  Roger Sayle  <roger@nextmovesoftware.com>\n \t    H.J. Lu  <hjl.tools@gmail.com>\n "}]}