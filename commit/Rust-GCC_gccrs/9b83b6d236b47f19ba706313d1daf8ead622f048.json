{"sha": "9b83b6d236b47f19ba706313d1daf8ead622f048", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI4M2I2ZDIzNmI0N2YxOWJhNzA2MzEzZDFkYWY4ZWFkNjIyZjA0OA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-29T23:42:34Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-29T23:42:34Z"}, "message": "compiler: Avoid various crashes on error conditions.\n\nFrom-SVN: r184675", "tree": {"sha": "ca6b36d0c8d3a2ecc4bead32d7d596e38f6b91df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca6b36d0c8d3a2ecc4bead32d7d596e38f6b91df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b83b6d236b47f19ba706313d1daf8ead622f048", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b83b6d236b47f19ba706313d1daf8ead622f048", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b83b6d236b47f19ba706313d1daf8ead622f048", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b83b6d236b47f19ba706313d1daf8ead622f048/comments", "author": null, "committer": null, "parents": [{"sha": "a0c996ea7f9fa3f69670cc70642b61ca82c91f3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c996ea7f9fa3f69670cc70642b61ca82c91f3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0c996ea7f9fa3f69670cc70642b61ca82c91f3e"}], "stats": {"total": 48, "additions": 34, "deletions": 14}, "files": [{"sha": "3778c4db8e85f654d6e31e96362224bb3018f4ad", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b83b6d236b47f19ba706313d1daf8ead622f048/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b83b6d236b47f19ba706313d1daf8ead622f048/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=9b83b6d236b47f19ba706313d1daf8ead622f048", "patch": "@@ -3942,10 +3942,6 @@ Unsafe_type_conversion_expression::do_get_tree(Translate_context* context)\n     go_assert(et->map_type() != NULL);\n   else if (t->channel_type() != NULL)\n     go_assert(et->channel_type() != NULL);\n-  else if (t->points_to() != NULL && t->points_to()->channel_type() != NULL)\n-    go_assert((et->points_to() != NULL\n-\t\t&& et->points_to()->channel_type() != NULL)\n-\t       || et->is_nil_type());\n   else if (t->points_to() != NULL)\n     go_assert(et->points_to() != NULL || et->is_nil_type());\n   else if (et->is_unsafe_pointer_type())\n@@ -8502,6 +8498,7 @@ Builtin_call_expression::do_check_types(Gogo*)\n     case BUILTIN_INVALID:\n     case BUILTIN_NEW:\n     case BUILTIN_MAKE:\n+    case BUILTIN_DELETE:\n       return;\n \n     case BUILTIN_LEN:\n@@ -8670,13 +8667,17 @@ Builtin_call_expression::do_check_types(Gogo*)\n \t    this->report_error(_(\"too many arguments\"));\n \t    break;\n \t  }\n+\tif (args->front()->type()->is_error()\n+\t    || args->back()->type()->is_error())\n+\t  break;\n+\n+\tArray_type* at = args->front()->type()->array_type();\n+\tType* e = at->element_type();\n \n \t// The language permits appending a string to a []byte, as a\n \t// special case.\n \tif (args->back()->type()->is_string_type())\n \t  {\n-\t    const Array_type* at = args->front()->type()->array_type();\n-\t    const Type* e = at->element_type()->forwarded();\n \t    if (e->integer_type() != NULL && e->integer_type()->is_byte())\n \t      break;\n \t  }\n@@ -8685,8 +8686,7 @@ Builtin_call_expression::do_check_types(Gogo*)\n \t// assignable to a slice of the element type of the first\n \t// argument.  We already know the first argument is a slice\n \t// type.\n-\tArray_type* at = args->front()->type()->array_type();\n-\tType* arg2_type = Type::make_array_type(at->element_type(), NULL);\n+\tType* arg2_type = Type::make_array_type(e, NULL);\n \tstd::string reason;\n \tif (!Type::are_assignable(arg2_type, args->back()->type(), &reason))\n \t  {\n@@ -8982,7 +8982,10 @@ Builtin_call_expression::do_get_tree(Translate_context* context)\n \t\t    fnname = \"__go_print_slice\";\n \t\t  }\n \t\telse\n-\t\t  go_unreachable();\n+\t\t  {\n+\t\t    go_assert(saw_errors());\n+\t\t    return error_mark_node;\n+\t\t  }\n \n \t\ttree call = Gogo::call_builtin(pfndecl,\n \t\t\t\t\t       location,\n@@ -9665,8 +9668,11 @@ Call_expression::result_count() const\n Temporary_statement*\n Call_expression::result(size_t i) const\n {\n-  go_assert(this->results_ != NULL\n-\t    && this->results_->size() > i);\n+  if (this->results_ == NULL || this->results_->size() <= i)\n+    {\n+      go_assert(saw_errors());\n+      return NULL;\n+    }\n   return (*this->results_)[i];\n }\n \n@@ -10153,6 +10159,11 @@ Call_expression::set_results(Translate_context* context, tree call_tree)\n       go_assert(field != NULL_TREE);\n \n       Temporary_statement* temp = this->result(i);\n+      if (temp == NULL)\n+\t{\n+\t  go_assert(saw_errors());\n+\t  return error_mark_node;\n+\t}\n       Temporary_reference_expression* ref =\n \tExpression::make_temporary_reference(temp, loc);\n       ref->set_is_lvalue();\n@@ -10332,8 +10343,17 @@ tree\n Call_result_expression::do_get_tree(Translate_context* context)\n {\n   Call_expression* ce = this->call_->call_expression();\n-  go_assert(ce != NULL);\n+  if (ce == NULL)\n+    {\n+      go_assert(this->call_->is_error_expression());\n+      return error_mark_node;\n+    }\n   Temporary_statement* ts = ce->result(this->index_);\n+  if (ts == NULL)\n+    {\n+      go_assert(saw_errors());\n+      return error_mark_node;\n+    }\n   Expression* ref = Expression::make_temporary_reference(ts, this->location());\n   return ref->get_tree(context);\n }"}, {"sha": "65c64c5e906f3a89d38f980a1d579da4e8608328", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b83b6d236b47f19ba706313d1daf8ead622f048/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b83b6d236b47f19ba706313d1daf8ead622f048/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=9b83b6d236b47f19ba706313d1daf8ead622f048", "patch": "@@ -1013,7 +1013,7 @@ Tuple_assignment_statement::do_lower(Gogo*, Named_object*, Block* enclosing,\n       b->add_statement(s);\n       ++ptemp;\n     }\n-  go_assert(ptemp == temps.end());\n+  go_assert(ptemp == temps.end() || saw_errors());\n \n   return Statement::make_block_statement(b, loc);\n }\n@@ -3452,7 +3452,7 @@ Case_clauses::Case_clause::get_backend(Translate_context* context,\n \t    {\n \t      // Value was already present.\n \t      error_at(this->location_, \"duplicate case in switch\");\n-\t      continue;\n+\t      e = Expression::make_error(this->location_);\n \t    }\n \n \t  tree case_tree = e->get_tree(context);"}]}