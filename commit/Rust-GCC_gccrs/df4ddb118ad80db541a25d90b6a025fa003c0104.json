{"sha": "df4ddb118ad80db541a25d90b6a025fa003c0104", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY0ZGRiMTE4YWQ4MGRiNTQxYTI1ZDkwYjZhMDI1ZmEwMDNjMDEwNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-05-15T22:54:28Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-05-15T22:54:28Z"}, "message": "compiler: Fix taking address of constant outside of function.\n\nFrom-SVN: r187565", "tree": {"sha": "6572c3944eaba251d6b52e5f938129e814e8c364", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6572c3944eaba251d6b52e5f938129e814e8c364"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df4ddb118ad80db541a25d90b6a025fa003c0104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df4ddb118ad80db541a25d90b6a025fa003c0104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df4ddb118ad80db541a25d90b6a025fa003c0104", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df4ddb118ad80db541a25d90b6a025fa003c0104/comments", "author": null, "committer": null, "parents": [{"sha": "8345ae9343d696fdbfbd4c6b72928c6aa5ac695d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8345ae9343d696fdbfbd4c6b72928c6aa5ac695d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8345ae9343d696fdbfbd4c6b72928c6aa5ac695d"}], "stats": {"total": 49, "additions": 40, "deletions": 9}, "files": [{"sha": "15851504f6932cdee1785c15d5099252ba20c21d", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 40, "deletions": 9, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4ddb118ad80db541a25d90b6a025fa003c0104/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4ddb118ad80db541a25d90b6a025fa003c0104/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=df4ddb118ad80db541a25d90b6a025fa003c0104", "patch": "@@ -4048,15 +4048,46 @@ Unary_expression::do_get_tree(Translate_context* context)\n \t  && TREE_CODE(expr) != INDIRECT_REF\n \t  && TREE_CODE(expr) != COMPONENT_REF)\n \t{\n-\t  tree tmp = create_tmp_var(TREE_TYPE(expr), get_name(expr));\n-\t  DECL_IGNORED_P(tmp) = 1;\n-\t  DECL_INITIAL(tmp) = expr;\n-\t  TREE_ADDRESSABLE(tmp) = 1;\n-\t  return build2_loc(loc.gcc_location(), COMPOUND_EXPR,\n-\t\t\t    build_pointer_type(TREE_TYPE(expr)),\n-\t\t\t    build1_loc(loc.gcc_location(), DECL_EXPR,\n-                                       void_type_node, tmp),\n-\t\t\t    build_fold_addr_expr_loc(loc.gcc_location(), tmp));\n+\t  if (current_function_decl != NULL)\n+\t    {\n+\t      tree tmp = create_tmp_var(TREE_TYPE(expr), get_name(expr));\n+\t      DECL_IGNORED_P(tmp) = 1;\n+\t      DECL_INITIAL(tmp) = expr;\n+\t      TREE_ADDRESSABLE(tmp) = 1;\n+\t      return build2_loc(loc.gcc_location(), COMPOUND_EXPR,\n+\t\t\t\tbuild_pointer_type(TREE_TYPE(expr)),\n+\t\t\t\tbuild1_loc(loc.gcc_location(), DECL_EXPR,\n+\t\t\t\t\t   void_type_node, tmp),\n+\t\t\t\tbuild_fold_addr_expr_loc(loc.gcc_location(),\n+\t\t\t\t\t\t\t tmp));\n+\t    }\n+\t  else\n+\t    {\n+\t      tree tmp = build_decl(loc.gcc_location(), VAR_DECL,\n+\t\t\t\t    create_tmp_var_name(\"A\"), TREE_TYPE(expr));\n+\t      DECL_EXTERNAL(tmp) = 0;\n+\t      TREE_PUBLIC(tmp) = 0;\n+\t      TREE_STATIC(tmp) = 1;\n+\t      DECL_ARTIFICIAL(tmp) = 1;\n+\t      TREE_ADDRESSABLE(tmp) = 1;\n+\t      tree make_tmp;\n+\t      if (!TREE_CONSTANT(expr))\n+\t\tmake_tmp = fold_build2_loc(loc.gcc_location(), INIT_EXPR,\n+\t\t\t\t\t   void_type_node, tmp, expr);\n+\t      else\n+\t\t{\n+\t\t  TREE_READONLY(tmp) = 1;\n+\t\t  TREE_CONSTANT(tmp) = 1;\n+\t\t  DECL_INITIAL(tmp) = expr;\n+\t\t  make_tmp = NULL_TREE;\n+\t\t}\n+\t      rest_of_decl_compilation(tmp, 1, 0);\n+\t      tree addr = build_fold_addr_expr_loc(loc.gcc_location(), tmp);\n+\t      if (make_tmp == NULL_TREE)\n+\t\treturn addr;\n+\t      return build2_loc(loc.gcc_location(), COMPOUND_EXPR,\n+\t\t\t\tTREE_TYPE(addr), make_tmp, addr);\n+\t    }\n \t}\n \n       return build_fold_addr_expr_loc(loc.gcc_location(), expr);"}]}