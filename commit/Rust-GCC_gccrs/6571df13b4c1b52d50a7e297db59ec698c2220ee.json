{"sha": "6571df13b4c1b52d50a7e297db59ec698c2220ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU3MWRmMTNiNGMxYjUyZDUwYTdlMjk3ZGI1OWVjNjk4YzIyMjBlZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-10-28T20:46:08Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-10-28T20:46:08Z"}, "message": "mt_allocator.h (__common_pool_policy): Add template template parameter for pool class type.\n\n\n2004-10-28  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/ext/mt_allocator.h (__common_pool_policy): Add template\n\ttemplate parameter for pool class type.\n\t(__per_type_pool_policy): Same.\n\t(__mt_allocator): Don't inherit policy. Qualify policy_type calls.\n\t* testsuite/ext/mt_allocator/check_deallocate_null.cc: Fix.\n\t* testsuite/ext/mt_allocator/check_deallocate_null_thread.cc: Same.\n\t* testsuite/ext/mt_allocator/deallocate_global-2.cc: Same.\n\t* testsuite/ext/mt_allocator/deallocate_global-4.cc: Same.\n\t* testsuite/ext/mt_allocator/deallocate_global_thread-1.cc: Same.\n\t* testsuite/ext/mt_allocator/deallocate_global_thread-3.cc: Same.\n\t* testsuite/ext/mt_allocator/deallocate_local-2.cc: Same.\n\t* testsuite/ext/mt_allocator/deallocate_local-4.cc: Same.\n\t* testsuite/ext/mt_allocator/deallocate_local_thread-1.cc: Same.\n\t* testsuite/ext/mt_allocator/deallocate_local_thread-3.cc: Same.\n\t* testsuite/ext/mt_allocator/instantiate.cc: Same.\n\t* testsuite/ext/mt_allocator/tune-1.cc: Same.\n\t* testsuite/ext/mt_allocator/tune-2.cc: Same.\n\t* testsuite/ext/mt_allocator/tune-3.cc: Same.\n\t* testsuite/ext/mt_allocator/tune-4.cc: Same.\n\nFrom-SVN: r89776", "tree": {"sha": "42e84384ba20cde73791c69c66e64d90df17bc78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42e84384ba20cde73791c69c66e64d90df17bc78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6571df13b4c1b52d50a7e297db59ec698c2220ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6571df13b4c1b52d50a7e297db59ec698c2220ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6571df13b4c1b52d50a7e297db59ec698c2220ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6571df13b4c1b52d50a7e297db59ec698c2220ee/comments", "author": null, "committer": null, "parents": [{"sha": "a827e21a71040a2b8b4101e0c0c68396f360203c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a827e21a71040a2b8b4101e0c0c68396f360203c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a827e21a71040a2b8b4101e0c0c68396f360203c"}], "stats": {"total": 492, "additions": 259, "deletions": 233}, "files": [{"sha": "561c3670dc6045e612d01ab5d082116f758c5e83", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6571df13b4c1b52d50a7e297db59ec698c2220ee", "patch": "@@ -1,3 +1,25 @@\n+2004-10-28  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/ext/mt_allocator.h (__common_pool_policy): Add template\n+\ttemplate parameter for pool class type.\n+\t(__per_type_pool_policy): Same.\n+\t(__mt_allocator): Don't inherit policy. Qualify policy_type calls.\n+\t* testsuite/ext/mt_allocator/check_deallocate_null.cc: Fix.\n+\t* testsuite/ext/mt_allocator/check_deallocate_null_thread.cc: Same.\n+\t* testsuite/ext/mt_allocator/deallocate_global-2.cc: Same.\n+\t* testsuite/ext/mt_allocator/deallocate_global-4.cc: Same.\n+\t* testsuite/ext/mt_allocator/deallocate_global_thread-1.cc: Same.\n+\t* testsuite/ext/mt_allocator/deallocate_global_thread-3.cc: Same.\n+\t* testsuite/ext/mt_allocator/deallocate_local-2.cc: Same.\n+\t* testsuite/ext/mt_allocator/deallocate_local-4.cc: Same.\n+\t* testsuite/ext/mt_allocator/deallocate_local_thread-1.cc: Same.\n+\t* testsuite/ext/mt_allocator/deallocate_local_thread-3.cc: Same.\n+\t* testsuite/ext/mt_allocator/instantiate.cc: Same.\n+\t* testsuite/ext/mt_allocator/tune-1.cc: Same.\n+\t* testsuite/ext/mt_allocator/tune-2.cc: Same.\n+\t* testsuite/ext/mt_allocator/tune-3.cc: Same.\n+\t* testsuite/ext/mt_allocator/tune-4.cc: Same.\n+\n 2004-10-28  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_facets.tcc (num_get<>::_M_extract_float):"}, {"sha": "e5dab29e6d8ac702388ab1789adcbe6fbfedde7d", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 167, "deletions": 195, "changes": 362, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=6571df13b4c1b52d50a7e297db59ec698c2220ee", "patch": "@@ -65,7 +65,7 @@ namespace __gnu_cxx\n     // Variables used to configure the behavior of the allocator,\n     // assigned and explained in detail below.\n     struct _Tune\n-    {\n+     {\n       // Compile time constants for the default _Tune values.\n       enum { _S_align = 8 };\n       enum { _S_max_bytes = 128 };\n@@ -129,19 +129,6 @@ namespace __gnu_cxx\n       _M_chunk_size(__chunk), _M_max_threads(__maxthreads),\n       _M_freelist_headroom(__headroom), _M_force_new(__force)\n       { }\n-      \n-      bool\n-      is_default() const\n-      {\n-\tbool __ret = true;\n-\t__ret &= _M_align == _S_align;\n-\t__ret &= _M_max_bytes == _S_max_bytes;\n-\t__ret &= _M_min_bin == _S_min_bin;\n-\t__ret &= _M_chunk_size == _S_chunk_size;\n-\t__ret &= _M_max_threads == _S_max_threads;\n-\t__ret &= _M_freelist_headroom == _S_freelist_headroom;\n-\treturn __ret;\n-      }\n     };\n     \n     struct _Block_address\n@@ -173,20 +160,30 @@ namespace __gnu_cxx\n     _M_get_align()\n     { return _M_options._M_align; }\n \n-    explicit __pool_base() \n+    explicit \n+    __pool_base() \n     : _M_options(_Tune()), _M_binmap(NULL), _M_init(false) { }\n \n-    explicit __pool_base(const _Tune& __tune) \n-    : _M_options(__tune), _M_binmap(NULL), _M_init(false) { }\n+    explicit \n+    __pool_base(const _Tune& __options)\n+    : _M_options(__options), _M_binmap(NULL), _M_init(false) { }\n+\n+  private:\n+    explicit \n+    __pool_base(const __pool_base&);\n+\n+    __pool_base&\n+    operator=(const __pool_base&);\n \n   protected:\n     // Configuration options.\n     _Tune \t       \t\t_M_options;\n     \n     _Binmap_type* \t\t_M_binmap;\n \n-    // We need to create the initial lists and set up some variables\n-    // before we can answer to the first request for memory.\n+    // Configuration of the pool object via _M_options can happen\n+    // after construction but before initialization. After\n+    // initialization is complete, this variable is set to true.\n     bool \t\t\t_M_init;\n   };\n \n@@ -201,9 +198,74 @@ namespace __gnu_cxx\n   template<>\n     class __pool<false>;\n \n+  // Specialization for single thread.\n+  template<>\n+    class __pool<false> : public __pool_base\n+    {\n+    public:\n+      union _Block_record\n+      {\n+\t// Points to the block_record of the next free block.\n+\t_Block_record* volatile         _M_next;\n+      };\n+\n+      struct _Bin_record\n+      {\n+\t// An \"array\" of pointers to the first free block.\n+\t_Block_record** volatile        _M_first;\n \n+\t// A list of the initial addresses of all allocated blocks.\n+\t_Block_address*\t\t     \t_M_address;\n+      };\n+      \n+      void\n+      _M_initialize_once()\n+      {\n+\tif (__builtin_expect(_M_init == false, false))\n+\t  _M_initialize();\n+      }\n+\n+      void\n+      _M_destroy() throw();\n+\n+      char* \n+      _M_reserve_block(size_t __bytes, const size_t __thread_id);\n+    \n+      void\n+      _M_reclaim_block(char* __p, size_t __bytes);\n+    \n+      size_t \n+      _M_get_thread_id() { return 0; }\n+      \n+      const _Bin_record&\n+      _M_get_bin(size_t __which)\n+      { return _M_bin[__which]; }\n+      \n+      void\n+      _M_adjust_freelist(const _Bin_record&, _Block_record*, size_t)\n+      { }\n+\n+      explicit __pool() \n+      : _M_bin(NULL), _M_bin_size(1) { }\n+\n+      explicit __pool(const __pool_base::_Tune& __tune) \n+      : __pool_base(__tune), _M_bin(NULL), _M_bin_size(1) { }\n+\n+    private:\n+      // An \"array\" of bin_records each of which represents a specific\n+      // power of 2 size. Memory to this \"array\" is allocated in\n+      // _M_initialize().\n+      _Bin_record* volatile\t_M_bin;\n+      \n+      // Actual value calculated in _M_initialize().\n+      size_t \t       \t     \t_M_bin_size;     \n+\n+      void\n+      _M_initialize();\n+  };\n+ \n #ifdef __GTHREADS\n-  // Specialization for thread enabled, via gthreads.h.\n+   // Specialization for thread enabled, via gthreads.h.\n   template<>\n     class __pool<true> : public __pool_base\n     {\n@@ -326,8 +388,6 @@ namespace __gnu_cxx\n \t_M_once = __tmp;\n       }\n \n-      ~__pool() { }\n-\n     private:\n       // An \"array\" of bin_records each of which represents a specific\n       // power of 2 size. Memory to this \"array\" is allocated in\n@@ -344,94 +404,24 @@ namespace __gnu_cxx\n     };\n #endif\n \n-  // Specialization for single thread.\n-  template<>\n-    class __pool<false> : public __pool_base\n-    {\n-    public:\n-      union _Block_record\n-      {\n-\t// Points to the block_record of the next free block.\n-\t_Block_record* volatile         _M_next;\n-      };\n-\n-      struct _Bin_record\n-      {\n-\t// An \"array\" of pointers to the first free block.\n-\t_Block_record** volatile        _M_first;\n \n-\t// A list of the initial addresses of all allocated blocks.\n-\t_Block_address*\t\t     \t_M_address;\n-      };\n-      \n-      void\n-      _M_initialize_once()\n-      {\n-\tif (__builtin_expect(_M_init == false, false))\n-\t  _M_initialize();\n-      }\n+  template<template <bool> class _PoolTp, bool _Thread>\n+    struct __common_pool_policy;\n \n-      void\n-      _M_destroy() throw();\n-\n-      char* \n-      _M_reserve_block(size_t __bytes, const size_t __thread_id);\n-    \n-      void\n-      _M_reclaim_block(char* __p, size_t __bytes);\n-    \n-      size_t \n-      _M_get_thread_id() { return 0; }\n-      \n-      const _Bin_record&\n-      _M_get_bin(size_t __which)\n-      { return _M_bin[__which]; }\n-      \n-      void\n-      _M_adjust_freelist(const _Bin_record&, _Block_record*, size_t)\n-      { }\n-\n-      explicit __pool() \n-      : _M_bin(NULL), _M_bin_size(1) { }\n-\n-      explicit __pool(const __pool_base::_Tune& __tune) \n-      : __pool_base(__tune), _M_bin(NULL), _M_bin_size(1) { }\n-\n-      ~__pool() { }\n-\n-    private:\n-      // An \"array\" of bin_records each of which represents a specific\n-      // power of 2 size. Memory to this \"array\" is allocated in\n-      // _M_initialize().\n-      _Bin_record* volatile\t_M_bin;\n-      \n-      // Actual value calculated in _M_initialize().\n-      size_t \t       \t     \t_M_bin_size;     \n-\n-      void\n-      _M_initialize();\n-  };\n-\n-  template<bool _Thread>\n-    struct __common_pool_policy \n+  template<template <bool> class _PoolTp>\n+    struct __common_pool_policy<_PoolTp, false>\n     {\n-      typedef __pool<_Thread> __pool_type;\n-\n-      template<typename _Tp1, bool _Thread1 = _Thread>\n-        struct _M_rebind;\n-\n-      template<typename _Tp1>\n-        struct _M_rebind<_Tp1, true>\n-        { typedef __common_pool_policy<true> other; };\n-\n-      template<typename _Tp1>\n-        struct _M_rebind<_Tp1, false>\n-        { typedef __common_pool_policy<false> other; };\n+      typedef _PoolTp<false> pool_type;\n+      \n+      template<typename _Tp1, template <bool> class _PoolTp1 = _PoolTp, \n+\t       bool _Thread1 = false>\n+        struct _M_rebind\n+        { typedef __common_pool_policy<_PoolTp1, _Thread1> other; };\n \n-      static __pool_type&\n+      static pool_type&\n       _S_get_pool()\n       { \n-\tstatic __pool_type _S_pool;\n+\tstatic pool_type _S_pool;\n \treturn _S_pool;\n       }\n \n@@ -447,41 +437,24 @@ namespace __gnu_cxx\n       }\n     };\n \n-  template<>\n-    struct __common_pool_policy<true>;\n-\n #ifdef __GTHREADS\n-  template<>\n-    struct __common_pool_policy<true>\n+  template<template <bool> class _PoolTp>\n+    struct __common_pool_policy<_PoolTp, true>\n     {\n-      typedef __pool<true> __pool_type;\n-\n-      template<typename _Tp1, bool _Thread1 = true>\n-        struct _M_rebind;\n-\n-      template<typename _Tp1>\n-        struct _M_rebind<_Tp1, true>\n-        { typedef __common_pool_policy<true> other; };\n-\n-      template<typename _Tp1>\n-        struct _M_rebind<_Tp1, false>\n-        { typedef __common_pool_policy<false> other; };\n+      typedef _PoolTp<true> pool_type;\n+      \n+      template<typename _Tp1, template <bool> class _PoolTp1 = _PoolTp, \n+\t       bool _Thread1 = true>\n+        struct _M_rebind\n+        { typedef __common_pool_policy<_PoolTp1, _Thread1> other; };\n \n-      static __pool_type&\n+      static pool_type&\n       _S_get_pool()\n       { \n-\tstatic __pool_type _S_pool;\n+\tstatic pool_type _S_pool;\n \treturn _S_pool;\n       }\n \n-      static void\n-      _S_destroy_thread_key(void* __freelist_pos)\n-      { _S_get_pool()._M_destroy_thread_key(__freelist_pos); }\n-      \n-      static void\n-      _S_initialize() \n-      { _S_get_pool()._M_initialize(_S_destroy_thread_key); }\n-\n       static void\n       _S_initialize_once() \n       { \n@@ -492,34 +465,40 @@ namespace __gnu_cxx\n \t    __init = true;\n \t  }\n       }\n+\n+    private:\n+      static void\n+      _S_destroy_thread_key(void* __freelist_pos)\n+      { _S_get_pool()._M_destroy_thread_key(__freelist_pos); }\n+      \n+      static void\n+      _S_initialize() \n+      { _S_get_pool()._M_initialize(_S_destroy_thread_key); }\n    };\n #endif\n \n+ \n+  template<typename _Tp, template <bool> class _PoolTp, bool _Thread>\n+    struct __per_type_pool_policy;\n \n-  template<typename _Tp, bool _Thread>\n-    struct __per_type_pool_policy\n+  template<typename _Tp, template <bool> class _PoolTp>\n+    struct __per_type_pool_policy<_Tp, _PoolTp, false>\n     {\n-      typedef __pool<_Thread> __pool_type;\n-\n-      template<typename _Tp1, bool _Thread1 = _Thread>\n-        struct _M_rebind;\n+      typedef _Tp value_type;\n+      typedef _PoolTp<false> pool_type;\n \n-      template<typename _Tp1>\n-        struct _M_rebind<_Tp1, false>\n-        { typedef __per_type_pool_policy<_Tp1, false> other; };\n+      template<typename _Tp1, template <bool> class _PoolTp1 = _PoolTp, \n+\t       bool _Thread1 = false>\n+        struct _M_rebind\n+        { typedef __per_type_pool_policy<_Tp1, _PoolTp1, _Thread1> other; };\n \n-      template<typename _Tp1>\n-        struct _M_rebind<_Tp1, true>\n-        { typedef __per_type_pool_policy<_Tp1, true> other; };\n-\n-      // Avoid static initialization ordering issues.\n-      static __pool_type&\n-      _S_get_pool() \n+      static pool_type&\n+      _S_get_pool()\n       { \n-\t// Sane defaults for the __pool_type.\n-\tconst static size_t __align = __alignof__(_Tp) >= sizeof(typename __pool_type::_Block_record) ? __alignof__(_Tp) : sizeof(typename __pool_type::_Block_record);\n-\tstatic __pool_base::_Tune _S_tune(__align, sizeof(_Tp) * 128, (sizeof(_Tp) * 2) >= __align ? sizeof(_Tp) * 2 : __align, __pool_type::_Tune::_S_chunk_size, __pool_type::_Tune::_S_max_threads, __pool_type::_Tune::_S_freelist_headroom, getenv(\"GLIBCXX_FORCE_NEW\") ? true : false);\n-\tstatic __pool_type _S_pool(_S_tune);\n+\t// Sane defaults for the _PoolTp.\n+\tconst static size_t __align = __alignof__(_Tp) >= sizeof(typename pool_type::_Block_record) ? __alignof__(_Tp) : sizeof(typename pool_type::_Block_record);\n+\tstatic __pool_base::_Tune _S_tune(__align, sizeof(_Tp) * 128, (sizeof(_Tp) * 2) >= __align ? sizeof(_Tp) * 2 : __align, __pool_base::_Tune::_S_chunk_size, __pool_base::_Tune::_S_max_threads, __pool_base::_Tune::_S_freelist_headroom, getenv(\"GLIBCXX_FORCE_NEW\") ? true : false);\n+\tstatic pool_type _S_pool(_S_tune);\n \treturn _S_pool;\n       }\n \n@@ -535,45 +514,28 @@ namespace __gnu_cxx\n       }\n     };\n \n-  template<typename _Tp>\n-    struct __per_type_pool_policy<_Tp, true>;\n-\n #ifdef __GTHREADS\n-  template<typename _Tp>\n-    struct __per_type_pool_policy<_Tp, true>\n+  template<typename _Tp, template <bool> class _PoolTp>\n+    struct __per_type_pool_policy<_Tp, _PoolTp, true>\n     {\n-      typedef __pool<true> __pool_type;\n-\n-      template<typename _Tp1, bool _Thread1 = true>\n-        struct _M_rebind;\n+      typedef _Tp value_type;\n+      typedef _PoolTp<true> pool_type;\n \n-      template<typename _Tp1>\n-        struct _M_rebind<_Tp1, false>\n-        { typedef __per_type_pool_policy<_Tp1, false> other; };\n+     template<typename _Tp1, template <bool> class _PoolTp1 = _PoolTp, \n+\t       bool _Thread1 = true>\n+        struct _M_rebind\n+        { typedef __per_type_pool_policy<_Tp1, _PoolTp1, _Thread1> other; };\n \n-      template<typename _Tp1>\n-        struct _M_rebind<_Tp1, true>\n-        { typedef __per_type_pool_policy<_Tp1, true> other; };\n-\n-      // Avoid static initialization ordering issues.\n-      static __pool_type&\n-      _S_get_pool( ) \n+      static pool_type&\n+      _S_get_pool()\n       { \n-\t// Sane defaults for the __pool_type.\n-\tconst static size_t __align = __alignof__(_Tp) >= sizeof(typename __pool_type::_Block_record) ? __alignof__(_Tp) : sizeof(typename __pool_type::_Block_record);\n-\tstatic __pool_base::_Tune _S_tune(__align, sizeof(_Tp) * 128, (sizeof(_Tp) * 2) >= __align ? sizeof(_Tp) * 2 : __align, __pool_type::_Tune::_S_chunk_size, __pool_type::_Tune::_S_max_threads, __pool_type::_Tune::_S_freelist_headroom, getenv(\"GLIBCXX_FORCE_NEW\") ? true : false);\n-\tstatic __pool_type _S_pool(_S_tune);\n+\t// Sane defaults for the _PoolTp.\n+\tconst static size_t __align = __alignof__(_Tp) >= sizeof(typename pool_type::_Block_record) ? __alignof__(_Tp) : sizeof(typename pool_type::_Block_record);\n+\tstatic __pool_base::_Tune _S_tune(__align, sizeof(_Tp) * 128, (sizeof(_Tp) * 2) >= __align ? sizeof(_Tp) * 2 : __align, __pool_base::_Tune::_S_chunk_size, __pool_base::_Tune::_S_max_threads, __pool_base::_Tune::_S_freelist_headroom, getenv(\"GLIBCXX_FORCE_NEW\") ? true : false);\n+\tstatic pool_type _S_pool(_S_tune);\n \treturn _S_pool;\n       }\n \n-      static void\n-      _S_destroy_thread_key(void* __freelist_pos)\n-      { _S_get_pool()._M_destroy_thread_key(__freelist_pos); }\n-      \n-      static void\n-      _S_initialize() \n-      { _S_get_pool()._M_initialize(_S_destroy_thread_key); }\n-\n       static void\n       _S_initialize_once() \n       { \n@@ -584,6 +546,15 @@ namespace __gnu_cxx\n \t    __init = true;\n \t  }\n       }\n+\n+    private:\n+      static void\n+      _S_destroy_thread_key(void* __freelist_pos)\n+      { _S_get_pool()._M_destroy_thread_key(__freelist_pos); }\n+      \n+      static void\n+      _S_initialize() \n+      { _S_get_pool()._M_initialize(_S_destroy_thread_key); }\n     };\n #endif\n \n@@ -622,13 +593,14 @@ namespace __gnu_cxx\n     };\n \n #ifdef __GTHREADS\n-#define __default_policy __common_pool_policy<true>\n+#define __thread_default true\n #else\n-#define __default_policy __common_pool_policy<false>\n+#define __thread_default false\n #endif\n \n-  template<typename _Tp, typename _Poolp = __default_policy>\n-    class __mt_alloc : public __mt_alloc_base<_Tp>, _Poolp\n+  template<typename _Tp, \n+\t   typename _Poolp = __common_pool_policy<__pool, __thread_default> >\n+    class __mt_alloc : public __mt_alloc_base<_Tp>\n     {\n     public:\n       typedef size_t                    \tsize_type;\n@@ -638,8 +610,8 @@ namespace __gnu_cxx\n       typedef _Tp&                      \treference;\n       typedef const _Tp&                \tconst_reference;\n       typedef _Tp                       \tvalue_type;\n-      typedef _Poolp                  \t\t__policy_type;\n-      typedef typename _Poolp::__pool_type  \t__pool_type;\n+      typedef _Poolp      \t\t\t__policy_type;\n+      typedef typename _Poolp::pool_type\t__pool_type;\n \n       template<typename _Tp1, typename _Poolp1 = _Poolp>\n         struct rebind\n@@ -670,27 +642,27 @@ namespace __gnu_cxx\n       _M_get_options()\n       { \n \t// Return a copy, not a reference, for external consumption.\n-\treturn __pool_base::_Tune(this->_S_get_pool()._M_get_options()); \n+\treturn __policy_type::_S_get_pool()._M_get_options();\n       }\n       \n       void\n       _M_set_options(__pool_base::_Tune __t)\n-      { this->_S_get_pool()._M_set_options(__t); }\n+      { __policy_type::_S_get_pool()._M_set_options(__t); }\n     };\n \n   template<typename _Tp, typename _Poolp>\n     typename __mt_alloc<_Tp, _Poolp>::pointer\n     __mt_alloc<_Tp, _Poolp>::\n     allocate(size_type __n, const void*)\n     {\n-      this->_S_initialize_once();\n-\n       if (__builtin_expect(__n > this->max_size(), false))\n \tstd::__throw_bad_alloc();\n \n+      __policy_type::_S_initialize_once();\n+\n       // Requests larger than _M_max_bytes are handled by operator\n       // new/delete directly.\n-      __pool_type& __pool = this->_S_get_pool();\n+      __pool_type& __pool = __policy_type::_S_get_pool();\n       const size_t __bytes = __n * sizeof(_Tp);\n       if (__pool._M_check_threshold(__bytes))\n \t{\n@@ -734,7 +706,7 @@ namespace __gnu_cxx\n \t{\n \t  // Requests larger than _M_max_bytes are handled by\n \t  // operators new/delete directly.\n-\t  __pool_type& __pool = this->_S_get_pool();\n+\t  __pool_type& __pool = __policy_type::_S_get_pool();\n \t  const size_t __bytes = __n * sizeof(_Tp);\n \t  if (__pool._M_check_threshold(__bytes))\n \t    ::operator delete(__p);\n@@ -753,7 +725,7 @@ namespace __gnu_cxx\n     operator!=(const __mt_alloc<_Tp, _Poolp>&, const __mt_alloc<_Tp, _Poolp>&)\n     { return false; }\n \n-#undef __default_policy\n+#undef __thread_default\n } // namespace __gnu_cxx\n \n #endif"}, {"sha": "9d23c74fdfb3ec3da770603c0fddbb23260a88bb", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/check_deallocate_null.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_deallocate_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_deallocate_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_deallocate_null.cc?ref=6571df13b4c1b52d50a7e297db59ec698c2220ee", "patch": "@@ -25,7 +25,8 @@\n int main()\n { \n   typedef int value_type;\n-  typedef __gnu_cxx::__common_pool_policy<false> policy_type;\n+  using __gnu_cxx::__pool;\n+  typedef __gnu_cxx::__common_pool_policy<__pool, false> policy_type;\n   typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n   __gnu_test::check_deallocate_null<allocator_type>(); \n   return 0;"}, {"sha": "929b31de3cb080def2cca85d05de85c5a453395f", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/check_deallocate_null_thread.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_deallocate_null_thread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_deallocate_null_thread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_deallocate_null_thread.cc?ref=6571df13b4c1b52d50a7e297db59ec698c2220ee", "patch": "@@ -25,7 +25,8 @@\n int main()\n { \n   typedef int value_type;\n-  typedef __gnu_cxx::__common_pool_policy<true> policy_type;\n+  using __gnu_cxx::__pool;\n+  typedef __gnu_cxx::__common_pool_policy<__pool, true> policy_type;\n   typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n   __gnu_test::check_deallocate_null<allocator_type>(); \n   return 0;"}, {"sha": "76a9a8c35401ecf9ef36e1c0d0c84bc589e3475b", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_global-2.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-2.cc?ref=6571df13b4c1b52d50a7e297db59ec698c2220ee", "patch": "@@ -67,7 +67,9 @@ void operator delete(void* p) throw()\n }\n \n typedef std::string value_type;\n-typedef __gnu_cxx::__common_pool_policy<false> policy_type;\n+using __gnu_cxx::__pool;\n+using __gnu_cxx::__common_pool_policy;\n+typedef __common_pool_policy<__pool, false> policy_type;\n typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n typedef std::char_traits<value_type> traits_type;\n typedef std::list<value_type, allocator_type> list_type;"}, {"sha": "7de94f5337ac59f3c4149df02a98d4d28df84872", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_global-4.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-4.cc?ref=6571df13b4c1b52d50a7e297db59ec698c2220ee", "patch": "@@ -67,7 +67,9 @@ void operator delete(void* p) throw()\n }\n \n typedef std::string value_t;\n-typedef __gnu_cxx::__per_type_pool_policy<value_t, false> policy_type;\n+using __gnu_cxx::__pool;\n+using __gnu_cxx::__per_type_pool_policy;\n+typedef __per_type_pool_policy<value_t, __pool, false> policy_type;\n typedef __gnu_cxx::__mt_alloc<value_t, policy_type> allocator_type;\n typedef std::char_traits<value_t> traits_type;\n typedef std::list<value_t, allocator_type> list_type;"}, {"sha": "0264620c138df3b67b3a0ee4a68370166f3ebd45", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_global_thread-1.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-1.cc?ref=6571df13b4c1b52d50a7e297db59ec698c2220ee", "patch": "@@ -67,7 +67,9 @@ void operator delete(void* p) throw()\n }\n \n typedef std::string value_type;\n-typedef __gnu_cxx::__common_pool_policy<true> policy_type;\n+using __gnu_cxx::__pool;\n+using __gnu_cxx::__common_pool_policy;\n+typedef __common_pool_policy<__pool, true> policy_type;\n typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n typedef std::char_traits<value_type> traits_type;\n typedef std::list<value_type, allocator_type> list_type;"}, {"sha": "c65277548b557e64ecf8a0c04f7774ce3d8f10e0", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_global_thread-3.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-3.cc?ref=6571df13b4c1b52d50a7e297db59ec698c2220ee", "patch": "@@ -67,7 +67,9 @@ void operator delete(void* p) throw()\n }\n \n typedef std::string value_type;\n-typedef __gnu_cxx::__per_type_pool_policy<value_type, true> policy_type;\n+using __gnu_cxx::__pool;\n+using __gnu_cxx::__per_type_pool_policy;\n+typedef __per_type_pool_policy<value_type, __pool, true> policy_type;\n typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n typedef std::char_traits<value_type> traits_type;\n typedef std::list<value_type, allocator_type> list_type;"}, {"sha": "8951e44c9d9c6f165e338eeb3e8b396d7fee6c99", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local-2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-2.cc?ref=6571df13b4c1b52d50a7e297db59ec698c2220ee", "patch": "@@ -66,7 +66,8 @@ void operator delete(void* p) throw()\n \n typedef char value_type;\n typedef std::char_traits<value_type> traits_type;\n-typedef __gnu_cxx::__common_pool_policy<false> policy_type;\n+using __gnu_cxx::__pool;\n+typedef __gnu_cxx::__common_pool_policy<__pool, false> policy_type;\n typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n typedef std::basic_string<value_type, traits_type, allocator_type> string_type;\n "}, {"sha": "da2c1e96360c5e39253921335218a23403395f26", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local-4.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-4.cc?ref=6571df13b4c1b52d50a7e297db59ec698c2220ee", "patch": "@@ -66,7 +66,9 @@ void operator delete(void* p) throw()\n \n typedef char value_type;\n typedef std::char_traits<value_type> traits_type;\n-typedef __gnu_cxx::__per_type_pool_policy<value_type, false> policy_type;\n+using __gnu_cxx::__pool;\n+using __gnu_cxx::__per_type_pool_policy;\n+typedef __per_type_pool_policy<value_type, __pool, false> policy_type;\n typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n typedef std::basic_string<value_type, traits_type, allocator_type> string_type;\n "}, {"sha": "f0f1c32141ade3eb3bb8010a6f1bb64d615d0aba", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local_thread-1.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-1.cc?ref=6571df13b4c1b52d50a7e297db59ec698c2220ee", "patch": "@@ -66,7 +66,8 @@ void operator delete(void* p) throw()\n \n typedef char value_type;\n typedef std::char_traits<value_type> traits_type;\n-typedef __gnu_cxx::__common_pool_policy<true> policy_type;\n+using __gnu_cxx::__pool;\n+typedef __gnu_cxx::__common_pool_policy<__pool, true> policy_type;\n typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n typedef std::basic_string<value_type, traits_type, allocator_type> string_type;\n "}, {"sha": "f3d2781978b78a89838443ee2660eab3f610ec53", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local_thread-3.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-3.cc?ref=6571df13b4c1b52d50a7e297db59ec698c2220ee", "patch": "@@ -66,7 +66,9 @@ void operator delete(void* p) throw()\n \n typedef char value_type;\n typedef std::char_traits<value_type> traits_type;\n-typedef __gnu_cxx::__per_type_pool_policy<value_type, true> policy_type;\n+using __gnu_cxx::__pool;\n+using __gnu_cxx::__per_type_pool_policy;\n+typedef __per_type_pool_policy<value_type, __pool, true> policy_type;\n typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n typedef std::basic_string<value_type, traits_type, allocator_type> string_type;\n "}, {"sha": "30db7f578066b6c7dc565ed610d4f731d3dd56f4", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/instantiate.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Finstantiate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Finstantiate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Finstantiate.cc?ref=6571df13b4c1b52d50a7e297db59ec698c2220ee", "patch": "@@ -27,9 +27,9 @@\n \n using namespace __gnu_cxx;\n template class __mt_alloc<int>;\n-template class __mt_alloc<short, __common_pool_policy<false> >;\n-template class __mt_alloc<short, __per_type_pool_policy<short, false> >;\n+template class __mt_alloc<short, __common_pool_policy<__pool, false> >;\n+template class __mt_alloc<short, __per_type_pool_policy<short, __pool, false> >;\n #ifdef __GTHREADS\n-template class __mt_alloc<short, __common_pool_policy<true> >;\n-template class __mt_alloc<short, __per_type_pool_policy<short, true> >;\n+template class __mt_alloc<short, __common_pool_policy<__pool, true> >;\n+template class __mt_alloc<short, __per_type_pool_policy<short, __pool, true> >;\n #endif"}, {"sha": "4f875e2fe1c1c6a5ceec71010925c0204e744470", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/tune-1.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-1.cc?ref=6571df13b4c1b52d50a7e297db59ec698c2220ee", "patch": "@@ -29,10 +29,14 @@ void test01()\n   bool test __attribute__((unused)) = true;\n \n   typedef __gnu_test::pod_int value_type;\n+\n+  using __gnu_cxx::__pool;\n+  using __gnu_cxx::__common_pool_policy;\n+\n #ifdef __GTHREADS\n-  typedef __gnu_cxx::__common_pool_policy<true> policy_type;\n+  typedef __common_pool_policy<__pool, true> policy_type;\n #else\n-  typedef __gnu_cxx::__common_pool_policy<false> policy_type;\n+  typedef __common_pool_policy<__pool, false> policy_type;\n #endif\n   typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n   typedef __gnu_cxx::__pool_base::_Tune tune_type;"}, {"sha": "7ae9c93da348b30bbb5a4f3678b09813ff523748", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/tune-2.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-2.cc?ref=6571df13b4c1b52d50a7e297db59ec698c2220ee", "patch": "@@ -29,10 +29,14 @@ void test02()\n   bool test __attribute__((unused)) = true;\n \n   typedef __gnu_test::pod_int value_type;\n+\n+  using __gnu_cxx::__pool;\n+  using __gnu_cxx::__per_type_pool_policy;\n+\n #ifdef __GTHREADS\n-  typedef __gnu_cxx::__per_type_pool_policy<value_type, true> policy_type;\n+  typedef __per_type_pool_policy<value_type, __pool, true> policy_type;\n #else\n-  typedef __gnu_cxx::__per_type_pool_policy<value_type, false> policy_type;\n+  typedef __per_type_pool_policy<value_type, __pool, false> policy_type;\n #endif\n   typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n   typedef __gnu_cxx::__pool_base::_Tune tune_type;"}, {"sha": "81cd4e0380ad8cdc2f41e9524a79f2ea5bf6d0fa", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/tune-3.cc", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-3.cc?ref=6571df13b4c1b52d50a7e297db59ec698c2220ee", "patch": "@@ -27,12 +27,16 @@ template<typename _Tp>\n struct test_policy\n { static bool per_type() { return true; } };\n \n-template<bool _Thread>\n-struct test_policy<__gnu_cxx::__common_pool_policy<_Thread> >\n-{ \n-  typedef __gnu_cxx::__common_pool_policy<_Thread> policy_type;\n-  static bool per_type() { return false; } \n-};\n+using __gnu_cxx::__pool;\n+using __gnu_cxx::__common_pool_policy;\n+\n+template<>\n+struct test_policy<__common_pool_policy<__pool, true> >\n+{ static bool per_type() { return false; } };\n+\n+template<>\n+struct test_policy<__common_pool_policy<__pool, false> >\n+{ static bool per_type() { return false; } };\n \n // Tune characteristics, two of different types\n template<typename _Tp, typename _Cp>\n@@ -85,12 +89,12 @@ void test03()\n int main()\n {\n #ifdef __GTHREADS\n-  test03<int, __gnu_cxx::__per_type_pool_policy<int, true> >();\n-  test03<int, __gnu_cxx::__common_pool_policy<true> >();\n+  test03<int, __gnu_cxx::__per_type_pool_policy<int, __pool, true> >();\n+  test03<int, __gnu_cxx::__common_pool_policy<__pool, true> >();\n #endif\n \n-  test03<int, __gnu_cxx::__common_pool_policy<false> >();\n-  test03<int, __gnu_cxx::__per_type_pool_policy<int, false> >();\n+  test03<int, __gnu_cxx::__per_type_pool_policy<int, __pool, false> >();\n+  test03<int, __gnu_cxx::__common_pool_policy<__pool, false> >();\n \n   return 0;\n }"}, {"sha": "8e2f5119dbfbd2fe1dcd24ef4b09808c29279a7f", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/tune-4.cc", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6571df13b4c1b52d50a7e297db59ec698c2220ee/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-4.cc?ref=6571df13b4c1b52d50a7e297db59ec698c2220ee", "patch": "@@ -27,12 +27,16 @@ template<typename _Tp>\n struct test_policy\n { static bool per_type() { return true; } };\n \n-template<bool _Thread>\n-struct test_policy<__gnu_cxx::__common_pool_policy<_Thread> >\n-{ \n-  typedef __gnu_cxx::__common_pool_policy<_Thread> policy_type;\n-  static bool per_type() { return false; } \n-};\n+using __gnu_cxx::__pool;\n+using __gnu_cxx::__common_pool_policy;\n+\n+template<>\n+struct test_policy<__common_pool_policy<__pool, true> >\n+{ static bool per_type() { return false; } };\n+\n+template<>\n+struct test_policy<__common_pool_policy<__pool, false> >\n+{ static bool per_type() { return false; } };\n \n struct pod2\n {\n@@ -104,11 +108,11 @@ void test04()\n int main()\n {\n #ifdef __GTHREADS\n-  test04<float, __gnu_cxx::__common_pool_policy<true> >();\n-  test04<double, __gnu_cxx::__per_type_pool_policy<double, true> >();\n+  test04<float, __gnu_cxx::__common_pool_policy<__pool, true> >();\n+  test04<double, __gnu_cxx::__per_type_pool_policy<double, __pool, true> >();\n #endif\n-  test04<float, __gnu_cxx::__common_pool_policy<false> >();\n-  test04<double, __gnu_cxx::__per_type_pool_policy<double, false> >();\n+  test04<float, __gnu_cxx::__common_pool_policy<__pool, false> >();\n+  test04<double, __gnu_cxx::__per_type_pool_policy<double, __pool, false> >();\n \n   return 0;\n }"}]}