{"sha": "682d039597faffc4ec84e7a569b93e9447b3e681", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgyZDAzOTU5N2ZhZmZjNGVjODRlN2E1NjliOTNlOTQ0N2IzZTY4MQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-11-01T02:56:45Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-11-01T02:56:45Z"}, "message": "re PR middle-end/23470 (a*a (for floats) is not considered always postive (-ffast-math only))\n\n\n\tPR middle-end/23470\n\t* tree.h (tree_expr_nonnegative_p): Return \"bool\" instead of \"int\".\n\t* fold-const.c (tree_expr_nonnegative_p): Likewise.  Consider\n\tpow(x,y) and powi(x,y) to be nonnegative if either x is nonnegative\n\tor y is an even integer.\n\n\t* gcc.dg/pr23470-1.c: New test case.\n\nFrom-SVN: r118355", "tree": {"sha": "d9a9688ea50ffdbd59bbb3b045ca29467f5f137c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9a9688ea50ffdbd59bbb3b045ca29467f5f137c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/682d039597faffc4ec84e7a569b93e9447b3e681", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/682d039597faffc4ec84e7a569b93e9447b3e681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/682d039597faffc4ec84e7a569b93e9447b3e681", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/682d039597faffc4ec84e7a569b93e9447b3e681/comments", "author": null, "committer": null, "parents": [{"sha": "a3a1ebb559bce23379e851067df080d9f103f55e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3a1ebb559bce23379e851067df080d9f103f55e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3a1ebb559bce23379e851067df080d9f103f55e"}], "stats": {"total": 84, "additions": 70, "deletions": 14}, "files": [{"sha": "65b835a337c172ab96b803944d5e773106df1d63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/682d039597faffc4ec84e7a569b93e9447b3e681/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/682d039597faffc4ec84e7a569b93e9447b3e681/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=682d039597faffc4ec84e7a569b93e9447b3e681", "patch": "@@ -1,3 +1,11 @@\n+2006-10-31  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/23470\n+\t* tree.h (tree_expr_nonnegative_p): Return \"bool\" instead of \"int\".\n+\t* fold-const.c (tree_expr_nonnegative_p): Likewise.  Consider\n+\tpow(x,y) and powi(x,y) to be nonnegative if either x is nonnegative\n+\tor y is an even integer.\n+\n 2006-10-31  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR target/24071"}, {"sha": "a718f1414dfa41930c9fb97f18ac700cbdfd44bf", "filename": "gcc/fold-const.c", "status": "modified", "additions": 44, "deletions": 13, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/682d039597faffc4ec84e7a569b93e9447b3e681/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/682d039597faffc4ec84e7a569b93e9447b3e681/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=682d039597faffc4ec84e7a569b93e9447b3e681", "patch": "@@ -12109,14 +12109,14 @@ multiple_of_p (tree type, tree top, tree bottom)\n \n /* Return true if `t' is known to be non-negative.  */\n \n-int\n+bool\n tree_expr_nonnegative_p (tree t)\n {\n   if (t == error_mark_node)\n-    return 0;\n+    return false;\n \n   if (TYPE_UNSIGNED (TREE_TYPE (t)))\n-    return 1;\n+    return true;\n \n   switch (TREE_CODE (t))\n     {\n@@ -12129,7 +12129,7 @@ tree_expr_nonnegative_p (tree t)\n       /* We can't return 1 if flag_wrapv is set because\n \t ABS_EXPR<INT_MIN> = INT_MIN.  */\n       if (!(flag_wrapv && INTEGRAL_TYPE_P (TREE_TYPE (t))))\n-        return 1;\n+        return true;\n       break;\n \n     case INTEGER_CST:\n@@ -12166,7 +12166,7 @@ tree_expr_nonnegative_p (tree t)\n \t{\n \t  /* x * x for floating point x is always non-negative.  */\n \t  if (operand_equal_p (TREE_OPERAND (t, 0), TREE_OPERAND (t, 1), 0))\n-\t    return 1;\n+\t    return true;\n \t  return tree_expr_nonnegative_p (TREE_OPERAND (t, 0))\n \t\t && tree_expr_nonnegative_p (TREE_OPERAND (t, 1));\n \t}\n@@ -12184,7 +12184,7 @@ tree_expr_nonnegative_p (tree t)\n \t    return TYPE_PRECISION (inner1) + TYPE_PRECISION (inner2)\n \t\t   < TYPE_PRECISION (TREE_TYPE (t));\n \t}\n-      return 0;\n+      return false;\n \n     case BIT_AND_EXPR:\n     case MAX_EXPR:\n@@ -12234,7 +12234,7 @@ tree_expr_nonnegative_p (tree t)\n \t    if (TREE_CODE (inner_type) == INTEGER_TYPE)\n \t      {\n \t\tif (TYPE_UNSIGNED (inner_type))\n-\t\t  return 1;\n+\t\t  return true;\n \t\treturn tree_expr_nonnegative_p (TREE_OPERAND (t, 0));\n \t      }\n \t  }\n@@ -12277,7 +12277,7 @@ tree_expr_nonnegative_p (tree t)\n \t    && TREE_OPERAND (t, 0) == temp)\n \t  return tree_expr_nonnegative_p (TREE_OPERAND (t, 1));\n \n-\treturn 0;\n+\treturn false;\n       }\n \n     case CALL_EXPR:\n@@ -12303,12 +12303,12 @@ tree_expr_nonnegative_p (tree t)\n \t    CASE_INT_FN (BUILT_IN_PARITY):\n \t    CASE_INT_FN (BUILT_IN_POPCOUNT):\n \t      /* Always true.  */\n-\t      return 1;\n+\t      return true;\n \n \t    CASE_FLT_FN (BUILT_IN_SQRT):\n \t      /* sqrt(-0.0) is -0.0.  */\n \t      if (!HONOR_SIGNED_ZEROS (TYPE_MODE (TREE_TYPE (t))))\n-\t\treturn 1;\n+\t\treturn true;\n \t      return tree_expr_nonnegative_p (TREE_VALUE (arglist));\n \n \t    CASE_FLT_FN (BUILT_IN_ASINH):\n@@ -12332,7 +12332,6 @@ tree_expr_nonnegative_p (tree t)\n \t    CASE_FLT_FN (BUILT_IN_LROUND):\n \t    CASE_FLT_FN (BUILT_IN_MODF):\n \t    CASE_FLT_FN (BUILT_IN_NEARBYINT):\n-\t    CASE_FLT_FN (BUILT_IN_POW):\n \t    CASE_FLT_FN (BUILT_IN_RINT):\n \t    CASE_FLT_FN (BUILT_IN_ROUND):\n \t    CASE_FLT_FN (BUILT_IN_SIGNBIT):\n@@ -12356,6 +12355,38 @@ tree_expr_nonnegative_p (tree t)\n \t      /* True if the 2nd argument is nonnegative.  */\n \t      return tree_expr_nonnegative_p (TREE_VALUE (TREE_CHAIN (arglist)));\n \n+\t    CASE_FLT_FN (BUILT_IN_POWI):\n+\t      /* True if the 1st argument is nonnegative or the second\n+\t\t argument is an even integer.  */\n+\t      if (TREE_CODE (TREE_VALUE (TREE_CHAIN (arglist))) == INTEGER_CST)\n+\t\t{\n+\t\t  tree arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+\t\t  if ((TREE_INT_CST_LOW (arg1) & 1) == 0)\n+\t\t    return true;\n+\t\t}\n+\t      return tree_expr_nonnegative_p (TREE_VALUE (arglist));\n+\n+\t    CASE_FLT_FN (BUILT_IN_POW):\n+\t      /* True if the 1st argument is nonnegative or the second\n+\t\t argument is an even integer valued real.  */\n+\t      if (TREE_CODE (TREE_VALUE (TREE_CHAIN (arglist))) == REAL_CST)\n+\t\t{\n+\t\t  REAL_VALUE_TYPE c;\n+\t\t  HOST_WIDE_INT n;\n+\n+\t\t  c = TREE_REAL_CST (TREE_VALUE (TREE_CHAIN (arglist)));\n+\t\t  n = real_to_integer (&c);\n+\t\t  if ((n & 1) == 0)\n+\t\t    {\n+\t\t      REAL_VALUE_TYPE cint;\n+\t\t      real_from_integer (&cint, VOIDmode, n,\n+\t\t\t\t\t n < 0 ? -1 : 0, 0);\n+\t\t      if (real_identical (&c, &cint))\n+\t\t\treturn true;\n+\t\t    }\n+\t\t}\n+\t      return tree_expr_nonnegative_p (TREE_VALUE (arglist));\n+\n \t    default:\n \t      break;\n \t    }\n@@ -12366,11 +12397,11 @@ tree_expr_nonnegative_p (tree t)\n     default:\n       if (truth_value_p (TREE_CODE (t)))\n \t/* Truth values evaluate to 0 or 1, which is nonnegative.  */\n-\treturn 1;\n+\treturn true;\n     }\n \n   /* We don't know sign of `t', so be conservative and return false.  */\n-  return 0;\n+  return false;\n }\n \n /* Return true when T is an address and is known to be nonzero."}, {"sha": "e5457e0eff2141301262b0e65d1bcfb879e7861c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/682d039597faffc4ec84e7a569b93e9447b3e681/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/682d039597faffc4ec84e7a569b93e9447b3e681/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=682d039597faffc4ec84e7a569b93e9447b3e681", "patch": "@@ -1,3 +1,8 @@\n+2006-10-31  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/23470\n+\t* gcc.dg/pr23470-1.c: New test case.\n+\n 2006-11-01  Bernhard Fischer  <aldot@gcc.gnu.org>\n \n \tPR fortran/29537"}, {"sha": "2ddf6f2f22f6d50ef8dc47a01ee6f13e4c2d3f6a", "filename": "gcc/testsuite/gcc.dg/pr23470-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/682d039597faffc4ec84e7a569b93e9447b3e681/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23470-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/682d039597faffc4ec84e7a569b93e9447b3e681/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23470-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23470-1.c?ref=682d039597faffc4ec84e7a569b93e9447b3e681", "patch": "@@ -0,0 +1,12 @@\n+/* PR middle-end/23470 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math -fdump-tree-original\" } */\n+\n+int f(double a, double b)\n+{\n+  if (((a*a) + (b*b))<0)\n+    link_error();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"if \\\\(0\\\\)\" 1 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */"}, {"sha": "6c8133f61862c506c9c180594956a93841b80d9c", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/682d039597faffc4ec84e7a569b93e9447b3e681/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/682d039597faffc4ec84e7a569b93e9447b3e681/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=682d039597faffc4ec84e7a569b93e9447b3e681", "patch": "@@ -3606,7 +3606,7 @@ extern HOST_WIDE_INT tree_low_cst (tree, int);\n extern int tree_int_cst_msb (tree);\n extern int tree_int_cst_sgn (tree);\n extern int tree_int_cst_sign_bit (tree);\n-extern int tree_expr_nonnegative_p (tree);\n+extern bool tree_expr_nonnegative_p (tree);\n extern bool may_negate_without_overflow_p (tree);\n extern tree get_inner_array_type (tree);\n "}]}