{"sha": "e7a8f681c069f09f53be3f94e220669247379a48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdhOGY2ODFjMDY5ZjA5ZjUzYmUzZjk0ZTIyMDY2OTI0NzM3OWE0OA==", "commit": {"author": {"name": "Naveen H.S", "email": "naveen.S@kpitcummins.com", "date": "2010-09-05T00:46:33Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2010-09-05T00:46:33Z"}, "message": "sh.c (sh_option_override): Make static.\n\n\t* config/sh/sh.c (sh_option_override): Make static.\n\tAdjust comments.  Declare.\n\t(sh_function_value_regno_p): Likewise. \n\t(sh_register_move_cost): Modify the arguments, make static.\n\tAdjust comments.  Declare.\n\t(TARGET_OPTION_OVERRIDE, TARGET_REGISTER_MOVE_COST\n\tTARGET_FUNCTION_VALUE_REGNO_P): Define.\n\t* config/sh/sh.h (OVERRIDE_OPTIONS, FUNCTION_VALUE_REGNO_P\n\tREGISTER_MOVE_COST): Delete.\n\t* config/sh/sh-protos.h (sh_override_options): Delete.\n\t(sh_register_move_cost): Delete.\n\t(sh_function_value_regno_p): Delete.\n\nFrom-SVN: r163873", "tree": {"sha": "69e08fb23974f9ecd22a5c56159a8eeaf6612a31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69e08fb23974f9ecd22a5c56159a8eeaf6612a31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7a8f681c069f09f53be3f94e220669247379a48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a8f681c069f09f53be3f94e220669247379a48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7a8f681c069f09f53be3f94e220669247379a48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a8f681c069f09f53be3f94e220669247379a48/comments", "author": null, "committer": null, "parents": [{"sha": "879a629b685a60a20046c583956050c502e1bfe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/879a629b685a60a20046c583956050c502e1bfe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/879a629b685a60a20046c583956050c502e1bfe1"}], "stats": {"total": 53, "additions": 34, "deletions": 19}, "files": [{"sha": "ab41e8bf79f8fa76be33b7ce1c6f741d0d56a52e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a8f681c069f09f53be3f94e220669247379a48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a8f681c069f09f53be3f94e220669247379a48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7a8f681c069f09f53be3f94e220669247379a48", "patch": "@@ -1,3 +1,18 @@\n+2010-09-05  Naveen H.S  <naveen.S@kpitcummins.com>\n+\n+\t* config/sh/sh.c (sh_option_override): Make static.\n+\tAdjust comments.  Declare.\n+\t(sh_function_value_regno_p): Likewise. \n+\t(sh_register_move_cost): Modify the arguments, make static.\n+\tAdjust comments.  Declare.\n+\t(TARGET_OPTION_OVERRIDE, TARGET_REGISTER_MOVE_COST\n+\tTARGET_FUNCTION_VALUE_REGNO_P): Define.\n+\t* config/sh/sh.h (OVERRIDE_OPTIONS, FUNCTION_VALUE_REGNO_P\n+\tREGISTER_MOVE_COST): Delete.\n+\t* config/sh/sh-protos.h (sh_override_options): Delete.\n+\t(sh_register_move_cost): Delete.\n+\t(sh_function_value_regno_p): Delete.\n+\n 2010-09-04  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/m32r/m32r.c (m32r_function_value, m32r_libcall_value,"}, {"sha": "f6741eedf570604db65cdfe4424f563647f11dd5", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a8f681c069f09f53be3f94e220669247379a48/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a8f681c069f09f53be3f94e220669247379a48/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=e7a8f681c069f09f53be3f94e220669247379a48", "patch": "@@ -125,7 +125,6 @@ extern bool sh_vector_mode_supported_p (enum machine_mode);\n #endif /* RTX_CODE */\n \n extern void sh_optimization_options (int, int);\n-extern void sh_override_options (void);\n extern const char *output_jump_label_table (void);\n extern int sh_handle_pragma (int (*)(void), void (*)(int), const char *);\n extern struct rtx_def *get_fpscr_rtx (void);\n@@ -145,8 +144,6 @@ extern bool sh_cannot_change_mode_class\n \t      (enum machine_mode, enum machine_mode, enum reg_class);\n extern bool sh_small_register_classes_for_mode_p (enum machine_mode);\n extern void sh_mark_label (rtx, int);\n-extern int sh_register_move_cost\n-  (enum machine_mode mode, enum reg_class, enum reg_class);\n extern int check_use_sfunc_addr (rtx, rtx);\n \n #ifdef HARD_CONST\n@@ -161,7 +158,6 @@ extern rtx sh_get_pr_initial_val (void);\n \n extern int sh_pass_in_reg_p (CUMULATIVE_ARGS *, enum machine_mode, tree);\n extern void sh_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree, signed int, enum machine_mode);\n-extern bool sh_function_value_regno_p (const unsigned int);\n extern rtx sh_dwarf_register_span (rtx);\n \n extern rtx replace_n_hard_rtx (rtx, rtx *, int , int);"}, {"sha": "aa31c2798956467739063a85aa5f743cbf49d64f", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a8f681c069f09f53be3f94e220669247379a48/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a8f681c069f09f53be3f94e220669247379a48/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=e7a8f681c069f09f53be3f94e220669247379a48", "patch": "@@ -182,6 +182,7 @@ static rtx find_barrier (int, rtx, rtx);\n static int noncall_uses_reg (rtx, rtx, rtx *);\n static rtx gen_block_redirect (rtx, int, int);\n static void sh_reorg (void);\n+static void sh_option_override (void);\n static void output_stack_adjust (int, rtx, int, HARD_REG_SET *, bool);\n static rtx frame_insn (rtx);\n static rtx push (int);\n@@ -205,6 +206,7 @@ static bool sh_print_operand_punct_valid_p (unsigned char code);\n static void sh_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static void sh_insert_attributes (tree, tree *);\n static const char *sh_check_pch_target_flags (int);\n+static int sh_register_move_cost (enum machine_mode, reg_class_t, reg_class_t);\n static int sh_adjust_cost (rtx, rtx, rtx, int);\n static int sh_issue_rate (void);\n static int sh_dfa_new_cycle (FILE *, int, rtx, int, int, int *sort_p);\n@@ -261,6 +263,7 @@ static struct save_entry_s *sh5_schedule_saves (HARD_REG_SET *,\n \n static rtx sh_struct_value_rtx (tree, int);\n static rtx sh_function_value (const_tree, const_tree, bool);\n+static bool sh_function_value_regno_p (const unsigned int);\n static rtx sh_libcall_value (enum machine_mode, const_rtx);\n static bool sh_return_in_memory (const_tree, const_tree);\n static rtx sh_builtin_saveregs (void);\n@@ -334,6 +337,9 @@ static const struct attribute_spec sh_attribute_table[] =\n #undef TARGET_ASM_ALIGNED_DI_OP\n #define TARGET_ASM_ALIGNED_DI_OP \"\\t.quad\\t\"\n \n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE sh_option_override\n+\n #undef TARGET_PRINT_OPERAND\n #define TARGET_PRINT_OPERAND sh_print_operand\n #undef TARGET_PRINT_OPERAND_ADDRESS\n@@ -360,6 +366,9 @@ static const struct attribute_spec sh_attribute_table[] =\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION sh_handle_option\n \n+#undef TARGET_REGISTER_MOVE_COST\n+#define TARGET_REGISTER_MOVE_COST sh_register_move_cost\n+\n #undef TARGET_INSERT_ATTRIBUTES\n #define TARGET_INSERT_ATTRIBUTES sh_insert_attributes\n \n@@ -476,6 +485,8 @@ static const struct attribute_spec sh_attribute_table[] =\n \n #undef TARGET_FUNCTION_VALUE\n #define TARGET_FUNCTION_VALUE sh_function_value\n+#undef TARGET_FUNCTION_VALUE_REGNO_P\n+#define TARGET_FUNCTION_VALUE_REGNO_P sh_function_value_regno_p\n #undef TARGET_LIBCALL_VALUE\n #define TARGET_LIBCALL_VALUE sh_libcall_value\n #undef TARGET_STRUCT_VALUE_RTX\n@@ -721,10 +732,10 @@ sh_optimization_options (int level ATTRIBUTE_UNUSED, int size ATTRIBUTE_UNUSED)\n   set_param_value (\"simultaneous-prefetches\", 2);\n }\n \n-/* Implement OVERRIDE_OPTIONS macro.  Validate and override various\n-   options, and do some machine dependent initialization.  */\n-void\n-sh_override_options (void)\n+/* Implement TARGET_OPTION_OVERRIDE macro.  Validate and override \n+   various options, and do some machine dependent initialization.  */\n+static void\n+sh_option_override (void)\n {\n   int regno;\n \n@@ -8524,9 +8535,9 @@ sh_libcall_value (enum machine_mode mode, const_rtx fun ATTRIBUTE_UNUSED)\n   return gen_rtx_REG (mode, BASE_RETURN_VALUE_REG (mode));\n }\n \n-/* Worker function for FUNCTION_VALUE_REGNO_P.  */\n+/* Return true if N is a possible register number of function value.  */\n \n-bool\n+static bool\n sh_function_value_regno_p (const unsigned int regno)\n {\n   return ((regno) == FIRST_RET_REG \n@@ -11387,9 +11398,9 @@ sh_mark_label (rtx address, int nuses)\n    uses this information.  Hence, the general register <-> floating point\n    register information here is not used for SFmode.  */\n \n-int\n+static int\n sh_register_move_cost (enum machine_mode mode,\n-\t\t       enum reg_class srcclass, enum reg_class dstclass)\n+\t\t       reg_class_t srcclass, reg_class_t dstclass)\n {\n   if (dstclass == T_REGS || dstclass == PR_REGS)\n     return 10;"}, {"sha": "7bcf9e9c04bc4b6d4d702339a5f80b83da2c43fe", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a8f681c069f09f53be3f94e220669247379a48/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a8f681c069f09f53be3f94e220669247379a48/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=e7a8f681c069f09f53be3f94e220669247379a48", "patch": "@@ -507,8 +507,6 @@ extern enum sh_divide_strategy_e sh_div_strategy;\n \n extern const char *sh_fixed_range_str;\n \n-#define OVERRIDE_OPTIONS sh_override_options ()\n-\n \f\n /* Target machine storage layout.  */\n \n@@ -1451,8 +1449,6 @@ extern enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER];\n    ? FIRST_FP_PARM_REG\t\t\t\t\t\\\n    : FIRST_PARM_REG)\n \n-#define FUNCTION_VALUE_REGNO_P(REGNO) sh_function_value_regno_p (REGNO)\n-\n /* 1 if N is a possible register number for function argument passing.  */\n /* ??? There are some callers that pass REGNO as int, and others that pass\n    it as unsigned.  We get warnings unless we do casts everywhere.  */\n@@ -2174,9 +2170,6 @@ struct sh_args {\n   ((CLASS) == FP0_REGS || (CLASS) == FP_REGS \\\n    || (CLASS) == DF_REGS || (CLASS) == DF_HI_REGS)\n \n-#define REGISTER_MOVE_COST(MODE, SRCCLASS, DSTCLASS) \\\n-  sh_register_move_cost ((MODE), (SRCCLASS), (DSTCLASS))\n-\n /* ??? Perhaps make MEMORY_MOVE_COST depend on compiler option?  This\n    would be so that people with slow memory systems could generate\n    different code that does fewer memory accesses.  */"}]}