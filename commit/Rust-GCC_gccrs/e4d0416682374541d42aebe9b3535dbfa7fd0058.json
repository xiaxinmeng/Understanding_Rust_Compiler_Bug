{"sha": "e4d0416682374541d42aebe9b3535dbfa7fd0058", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRkMDQxNjY4MjM3NDU0MWQ0MmFlYmU5YjM1MzVkYmZhN2ZkMDA1OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-13T10:05:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-13T10:05:22Z"}, "message": "[multiple changes]\n\n2017-01-13  Arnaud Charlet  <charlet@adacore.com>\n\n\t* bindusg.adb: Improve usage output for -f switch.\n\n2017-01-13  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* frontend.adb, freeze.adb, sem_res.adb, sem_attr.adb, sem_ch8.adb:\n\tMinor reformatting.\n\n2017-01-13  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Is_Predicate_Static): Following the intent of the RM,\n\ttreat comparisons on strings as legal in a Static_Predicate.\n\t(Is_Predicate_Static, Is_Type_Ref): Predicate also returns true on\n\ta function call that is the expansion of a string comparison.The\n\tfunction call is built when compiling the corresponding predicate\n\tfunction, but the expression has been found legal as a static\n\tpredicate during earlier analysis.\n\t* sem_eval.adb (Real_Or_String_Static_Predicate_Matches): Handle\n\tproperly a function call that is the expansion of a string\n\tcomparison operation, in order to recover the Static_Predicate\n\texpression and apply it to a static argument when needed.\n\nFrom-SVN: r244400", "tree": {"sha": "a7f70047650464a25666464552b1b189dc756398", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7f70047650464a25666464552b1b189dc756398"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4d0416682374541d42aebe9b3535dbfa7fd0058", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4d0416682374541d42aebe9b3535dbfa7fd0058", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4d0416682374541d42aebe9b3535dbfa7fd0058", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4d0416682374541d42aebe9b3535dbfa7fd0058/comments", "author": null, "committer": null, "parents": [{"sha": "66340e0e9a029aa5cbba0e63f66e5319c1286ce4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66340e0e9a029aa5cbba0e63f66e5319c1286ce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66340e0e9a029aa5cbba0e63f66e5319c1286ce4"}], "stats": {"total": 154, "additions": 116, "deletions": 38}, "files": [{"sha": "d4193950a4e5de782683b31412d963cf09376d30", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d0416682374541d42aebe9b3535dbfa7fd0058/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d0416682374541d42aebe9b3535dbfa7fd0058/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e4d0416682374541d42aebe9b3535dbfa7fd0058", "patch": "@@ -1,3 +1,26 @@\n+2017-01-13  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* bindusg.adb: Improve usage output for -f switch.\n+\n+2017-01-13  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* frontend.adb, freeze.adb, sem_res.adb, sem_attr.adb, sem_ch8.adb:\n+\tMinor reformatting.\n+\n+2017-01-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Is_Predicate_Static): Following the intent of the RM,\n+\ttreat comparisons on strings as legal in a Static_Predicate.\n+\t(Is_Predicate_Static, Is_Type_Ref): Predicate also returns true on\n+\ta function call that is the expansion of a string comparison.The\n+\tfunction call is built when compiling the corresponding predicate\n+\tfunction, but the expression has been found legal as a static\n+\tpredicate during earlier analysis.\n+\t* sem_eval.adb (Real_Or_String_Static_Predicate_Matches): Handle\n+\tproperly a function call that is the expansion of a string\n+\tcomparison operation, in order to recover the Static_Predicate\n+\texpression and apply it to a static argument when needed.\n+\n 2017-01-13  Tristan Gingold  <gingold@adacore.com>\n \n \t* s-mmap.adb, s-mmap.ads (Open_Read_No_Exception): New function."}, {"sha": "9da8ce9bb7b225984580cf920fada2cc6e3a2427", "filename": "gcc/ada/bindusg.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d0416682374541d42aebe9b3535dbfa7fd0058/gcc%2Fada%2Fbindusg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d0416682374541d42aebe9b3535dbfa7fd0058/gcc%2Fada%2Fbindusg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindusg.adb?ref=e4d0416682374541d42aebe9b3535dbfa7fd0058", "patch": "@@ -115,7 +115,7 @@ package body Bindusg is\n \n       --  Line for -f switch\n \n-      Write_Line (\"  -felab-order  Force elaboration order\");\n+      Write_Line (\"  -ffile    Force elaboration order from given file\");\n \n       --  Line for -F switch\n "}, {"sha": "5fae9fd5b15e2fdf8d91c94bbb4ddaabd2e7c5a6", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d0416682374541d42aebe9b3535dbfa7fd0058/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d0416682374541d42aebe9b3535dbfa7fd0058/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=e4d0416682374541d42aebe9b3535dbfa7fd0058", "patch": "@@ -1457,18 +1457,25 @@ package body Freeze is\n             if Present (A_Pre) and then Class_Present (A_Pre) then\n                A_Pre :=\n                  Expression (First (Pragma_Argument_Associations (A_Pre)));\n+\n                Build_Class_Wide_Expression\n-                 (New_Copy_Tree (A_Pre), Prim, Par_Prim, Adjust_Sloc => False);\n+                 (Prag        => New_Copy_Tree (A_Pre),\n+                  Subp        => Prim,\n+                  Par_Subp    => Par_Prim,\n+                  Adjust_Sloc => False);\n             end if;\n \n             A_Post := Get_Pragma (Par_Prim, Pragma_Postcondition);\n \n             if Present (A_Post) and then Class_Present (A_Post) then\n                A_Post :=\n                  Expression (First (Pragma_Argument_Associations (A_Post)));\n+\n                Build_Class_Wide_Expression\n-                 (New_Copy_Tree (A_Post),\n-                  Prim, Par_Prim, Adjust_Sloc => False);\n+                 (Prag        => New_Copy_Tree (A_Post),\n+                  Subp        => Prim,\n+                  Par_Subp    => Par_Prim,\n+                  Adjust_Sloc => False);\n             end if;\n          end if;\n "}, {"sha": "5ad319d1fb31d565c803ea3f771956d728ff3250", "filename": "gcc/ada/frontend.adb", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d0416682374541d42aebe9b3535dbfa7fd0058/gcc%2Fada%2Ffrontend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d0416682374541d42aebe9b3535dbfa7fd0058/gcc%2Fada%2Ffrontend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffrontend.adb?ref=e4d0416682374541d42aebe9b3535dbfa7fd0058", "patch": "@@ -460,20 +460,21 @@ begin\n       end if;\n    end if;\n \n-   --  In GNATprove mode, force loading of a few RTE units.\n+   --  In GNATprove mode, force the loading of a few RTE units\n \n    if GNATprove_Mode then\n       declare\n-         Unused_E : Entity_Id;\n+         Unused : Entity_Id;\n+\n       begin\n-         --  Ensure that System.Interrupt_Priority is available to\n-         --  GNATprove for the generation of VCs related to ceiling\n-         --  priority.\n-         Unused_E := RTE (RE_Interrupt_Priority);\n+         --  Ensure that System.Interrupt_Priority is available to GNATprove\n+         --  for the generation of VCs related to ceiling priority.\n+\n+         Unused := RTE (RE_Interrupt_Priority);\n       end;\n    end if;\n \n-   --  Qualify all entity names in inner packages, package bodies, etc.\n+   --  Qualify all entity names in inner packages, package bodies, etc\n \n    Exp_Dbug.Qualify_All_Entity_Names;\n "}, {"sha": "dcb32867a3afa30a736f65e12215c1382d8df91a", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d0416682374541d42aebe9b3535dbfa7fd0058/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d0416682374541d42aebe9b3535dbfa7fd0058/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=e4d0416682374541d42aebe9b3535dbfa7fd0058", "patch": "@@ -7109,13 +7109,14 @@ package body Sem_Attr is\n \n       end case;\n \n-      --  In SPARK some attribute references depend on Tasking_State, so we\n-      --  need to make sure we load this so that gnat2why has the entity\n-      --  available. See SPARK RM 9(18) for the relevant rule.\n+      --  In SPARK certain attributes (see below) depend on Tasking_State.\n+      --  Ensure that the entity is available for gnat2why by loading it.\n+      --  See SPARK RM 9(18) for the relevant rule.\n \n       if GNATprove_Mode then\n          declare\n             Unused : Entity_Id;\n+\n          begin\n             case Attr_Id is\n                when Attribute_Callable   |"}, {"sha": "9d3f8c64d6b99dba48b8766f9fc63e941ce7a8cb", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d0416682374541d42aebe9b3535dbfa7fd0058/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d0416682374541d42aebe9b3535dbfa7fd0058/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=e4d0416682374541d42aebe9b3535dbfa7fd0058", "patch": "@@ -11603,11 +11603,18 @@ package body Sem_Ch13 is\n \n       function Is_Type_Ref (N : Node_Id) return Boolean;\n       pragma Inline (Is_Type_Ref);\n+\n       --  Returns True if N is a reference to the type for the predicate in the\n       --  expression (i.e. if it is an identifier whose Chars field matches the\n       --  Nam given in the call). N must not be parenthesized, if the type name\n       --  appears in parens, this routine will return False.\n \n+      --  The routine also returns True for function calls generated during the\n+      --  expansion of comparison operators on strings, which are intended to\n+      --  be legal in static predicates, and are converted into calls to array\n+      --  comparison routines in the body of the corresponding predicate\n+      --  function.\n+\n       ----------------------------------\n       -- All_Static_Case_Alternatives --\n       ----------------------------------\n@@ -11671,9 +11678,10 @@ package body Sem_Ch13 is\n \n       function Is_Type_Ref (N : Node_Id) return Boolean is\n       begin\n-         return Nkind (N) = N_Identifier\n-           and then Chars (N) = Nam\n-           and then Paren_Count (N) = 0;\n+         return (Nkind (N) = N_Identifier\n+                  and then Chars (N) = Nam\n+                  and then Paren_Count (N) = 0)\n+           or else Nkind (N) = N_Function_Call;\n       end Is_Type_Ref;\n \n    --  Start of processing for Is_Predicate_Static\n@@ -11723,10 +11731,12 @@ package body Sem_Ch13 is\n       --  and inequality operations to be valid on strings (this helps deal\n       --  with cases where we transform A in \"ABC\" to A = \"ABC).\n \n+      --  In fact, it appears that the intent of the ARG is to extend static\n+      --  predicates to strings, and that the extension should probably apply\n+      --  to static expressions themselves. The code below accepts comparison\n+      --  operators that apply to static strings.\n+\n       elsif Nkind (Expr) in N_Op_Compare\n-        and then ((not Is_String_Type (Etype (Left_Opnd (Expr))))\n-                    or else (Nkind_In (Expr, N_Op_Eq, N_Op_Ne)\n-                              and then not Comes_From_Source (Expr)))\n         and then ((Is_Type_Ref (Left_Opnd (Expr))\n                     and then Is_OK_Static_Expression (Right_Opnd (Expr)))\n                   or else\n@@ -12323,7 +12333,7 @@ package body Sem_Ch13 is\n            and then From_Aspect_Specification (N)\n          then\n             Error_Msg_NE\n-              (\"aspect specification causes premature freezing of&\", T, N);\n+              (\"aspect specification causes premature freezing of&\", N, T);\n             Set_Has_Delayed_Freeze (T, False);\n             return True;\n          end if;"}, {"sha": "d237e5f0722efc2b94568bc0057b171fb63d4b31", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d0416682374541d42aebe9b3535dbfa7fd0058/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d0416682374541d42aebe9b3535dbfa7fd0058/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=e4d0416682374541d42aebe9b3535dbfa7fd0058", "patch": "@@ -1936,6 +1936,12 @@ package body Sem_Ch8 is\n       is\n          Loc : constant Source_Ptr := Sloc (N);\n \n+         function Build_Call\n+           (Subp_Id : Entity_Id;\n+            Params  : List_Id) return Node_Id;\n+         --  Create a dispatching call to invoke routine Subp_Id with actuals\n+         --  built from the parameter specifications of list Params.\n+\n          function Build_Expr_Fun_Call\n            (Subp_Id : Entity_Id;\n             Params  : List_Id) return Node_Id;\n@@ -1944,12 +1950,6 @@ package body Sem_Ch8 is\n          --  directly the call, so that it can be used inside an expression\n          --  function. This is a specificity of the GNATprove mode.\n \n-         function Build_Call\n-           (Subp_Id : Entity_Id;\n-            Params  : List_Id) return Node_Id;\n-         --  Create a dispatching call to invoke routine Subp_Id with actuals\n-         --  built from the parameter specifications of list Params.\n-\n          function Build_Spec (Subp_Id : Entity_Id) return Node_Id;\n          --  Create a subprogram specification based on the subprogram profile\n          --  of Subp_Id.\n@@ -2027,6 +2027,8 @@ package body Sem_Ch8 is\n             Formal   : Node_Id;\n \n          begin\n+            pragma Assert (Ekind_In (Subp_Id, E_Function, E_Operator));\n+\n             --  Build the actual parameters of the call\n \n             Formal := First (Params);\n@@ -2039,11 +2041,10 @@ package body Sem_Ch8 is\n             --  Generate:\n             --    Subp_Id (Actuals);\n \n-            pragma Assert (Ekind_In (Subp_Id, E_Function, E_Operator));\n-\n-            return Make_Function_Call (Loc,\n-              Name                   => Call_Ref,\n-              Parameter_Associations => Actuals);\n+            return\n+              Make_Function_Call (Loc,\n+                Name                   => Call_Ref,\n+                Parameter_Associations => Actuals);\n          end Build_Expr_Fun_Call;\n \n          ----------------\n@@ -2399,9 +2400,10 @@ package body Sem_Ch8 is\n             Body_Decl :=\n               Make_Expression_Function (Loc,\n                 Specification => New_Spec,\n-                Expression    => Build_Expr_Fun_Call\n-                  (Subp_Id => Prim_Op,\n-                   Params  => Parameter_Specifications (New_Spec)));\n+                Expression    =>\n+                  Build_Expr_Fun_Call\n+                    (Subp_Id => Prim_Op,\n+                     Params  => Parameter_Specifications (New_Spec)));\n \n             Wrap_Id := Defining_Entity (Body_Decl);\n "}, {"sha": "f98498d9ed3a85ddea4e0bb8662a7c6466d1847f", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d0416682374541d42aebe9b3535dbfa7fd0058/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d0416682374541d42aebe9b3535dbfa7fd0058/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=e4d0416682374541d42aebe9b3535dbfa7fd0058", "patch": "@@ -5469,6 +5469,40 @@ package body Sem_Eval is\n                return Skip;\n             end;\n \n+         --  The predicate function may contain string-comparison operations\n+         --  that have been converted into calls to run-time array-comparison\n+         --  routines. To evaluate the predicate statically, we recover the\n+         --  original comparison operation and replace the occurrence of the\n+         --  formal by the static string value. The actuals of the generated\n+         --  call are of the form X'Address.\n+\n+         elsif Nkind (N) in N_Op_Compare\n+           and then Nkind (Left_Opnd (N)) = N_Function_Call\n+         then\n+            declare\n+               C : constant Node_Id := Left_Opnd (N);\n+               F : constant Node_Id := First (Parameter_Associations (C));\n+               L : constant Node_Id := Prefix (F);\n+               R : constant Node_Id := Prefix (Next (F));\n+\n+            begin\n+               --  If an operand is an entity name, it is the formal of the\n+               --  predicate function, so replace it with the string value.\n+               --  It may be either operand in the call. The other operand\n+               --  is a static string from the original predicate.\n+\n+               if Is_Entity_Name (L) then\n+                  Rewrite (Left_Opnd (N),  New_Copy (Val));\n+                  Rewrite (Right_Opnd (N), New_Copy (R));\n+\n+               else\n+                  Rewrite (Left_Opnd (N),  New_Copy (L));\n+                  Rewrite (Right_Opnd (N), New_Copy (Val));\n+               end if;\n+\n+               return Skip;\n+            end;\n+\n          else\n             return OK;\n          end if;"}, {"sha": "5bc6336d5e907a516249be75f71b1b9d24a9614c", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d0416682374541d42aebe9b3535dbfa7fd0058/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d0416682374541d42aebe9b3535dbfa7fd0058/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=e4d0416682374541d42aebe9b3535dbfa7fd0058", "patch": "@@ -4336,9 +4336,9 @@ package body Sem_Res is\n                      Apply_Scalar_Range_Check\n                        (Expression (A), Etype (Expression (A)), A_Typ);\n \n-                     --  In addition, the returned value of the parameter\n-                     --  must satisfy the bounds of the object type (see\n-                     --  comment below).\n+                     --  In addition, the returned value of the parameter must\n+                     --  satisfy the bounds of the object type (see comment\n+                     --  below).\n \n                      Apply_Scalar_Range_Check (A, A_Typ, F_Typ);\n "}]}