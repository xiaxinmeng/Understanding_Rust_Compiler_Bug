{"sha": "3ed56f8a0e57bd184b5926c6396feaf23ab2cbcb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VkNTZmOGEwZTU3YmQxODRiNTkyNmM2Mzk2ZmVhZjIzYWIyY2JjYg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-04-17T02:21:10Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-04-17T02:21:10Z"}, "message": "c-typeck.c (convert_arguments): Don't check for width changes with -Wtraditional.\n\n\t* c-typeck.c (convert_arguments): Don't check for width changes\n\twith -Wtraditional.\n\n\t* invoke.texi (-Wtraditional): Update documentation.\n\ntestsuite:\n\t* gcc.dg/wtr-conversion-1.c: Don't test for width changes.\n\nFrom-SVN: r41386", "tree": {"sha": "7335d9ce36a52a52d8f29c8470046a48deb92d5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7335d9ce36a52a52d8f29c8470046a48deb92d5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ed56f8a0e57bd184b5926c6396feaf23ab2cbcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ed56f8a0e57bd184b5926c6396feaf23ab2cbcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ed56f8a0e57bd184b5926c6396feaf23ab2cbcb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ed56f8a0e57bd184b5926c6396feaf23ab2cbcb/comments", "author": null, "committer": null, "parents": [{"sha": "acb0db7b38ae426210a6596d3d19d47476548637", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb0db7b38ae426210a6596d3d19d47476548637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acb0db7b38ae426210a6596d3d19d47476548637"}], "stats": {"total": 91, "additions": 39, "deletions": 52}, "files": [{"sha": "b2413d1f44f548fb250d938d5bf0deb6cb0bf3a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed56f8a0e57bd184b5926c6396feaf23ab2cbcb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed56f8a0e57bd184b5926c6396feaf23ab2cbcb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ed56f8a0e57bd184b5926c6396feaf23ab2cbcb", "patch": "@@ -1,3 +1,10 @@\n+2001-04-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-typeck.c (convert_arguments): Don't check for width changes\n+\twith -Wtraditional.\n+\n+\t* invoke.texi (-Wtraditional): Update documentation.\n+\n 2001-04-16  Zack Weinberg  <zackw@stanford.edu>\n \n \t* toplev.c (output_lang_identify): Delete."}, {"sha": "baf5fed2d07a36d2a744ec176450f59e44c10f5b", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed56f8a0e57bd184b5926c6396feaf23ab2cbcb/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed56f8a0e57bd184b5926c6396feaf23ab2cbcb/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=3ed56f8a0e57bd184b5926c6396feaf23ab2cbcb", "patch": "@@ -1709,8 +1709,10 @@ convert_arguments (typelist, values, name, fundecl)\n \t\t      if (formal_prec == TYPE_PRECISION (float_type_node))\n \t\t\twarn_for_assignment (\"%s as `float' rather than `double' due to prototype\", (char *) 0, name, parmnum + 1);\n \t\t    }\n-\t\t  /* Detect integer changing in width or signedness.  */\n-\t\t  else if (INTEGRAL_TYPE_P (type)\n+\t\t  /* Detect integer changing in width or signedness.\n+\t\t     These warnings are only activated with\n+\t\t     -Wconversion, not with -Wtraditional.  */\n+\t\t  else if (warn_conversion && INTEGRAL_TYPE_P (type)\n \t\t\t   && INTEGRAL_TYPE_P (TREE_TYPE (val)))\n \t\t    {\n \t\t      tree would_have_been = default_conversion (val);\n@@ -1755,15 +1757,10 @@ convert_arguments (typelist, values, name, fundecl)\n \t\t      else if (TYPE_PRECISION (TREE_TYPE (val)) < TYPE_PRECISION (type)\n \t\t\t       && TREE_UNSIGNED (TREE_TYPE (val)))\n \t\t\t;\n-\t\t      /* These warnings are only activated with\n-                         -Wconversion, not with -Wtraditional.  */\n-\t\t      else if (warn_conversion)\n-\t\t        {\n-\t\t\t  if (TREE_UNSIGNED (type))\n-\t\t\t    warn_for_assignment (\"%s as unsigned due to prototype\", (char *) 0, name, parmnum + 1);\n-\t\t\t  else\n-\t\t\t    warn_for_assignment (\"%s as signed due to prototype\", (char *) 0, name, parmnum + 1);\n-\t\t\t}\n+\t\t      else if (TREE_UNSIGNED (type))\n+\t\t\twarn_for_assignment (\"%s as unsigned due to prototype\", (char *) 0, name, parmnum + 1);\n+\t\t      else\n+\t\t\twarn_for_assignment (\"%s as signed due to prototype\", (char *) 0, name, parmnum + 1);\n \t\t    }\n \t\t}\n "}, {"sha": "9762596ad79f890e456963abafe5a1cc3e042e36", "filename": "gcc/invoke.texi", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed56f8a0e57bd184b5926c6396feaf23ab2cbcb/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed56f8a0e57bd184b5926c6396feaf23ab2cbcb/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=3ed56f8a0e57bd184b5926c6396feaf23ab2cbcb", "patch": "@@ -2125,9 +2125,10 @@ initializer warnings and relies on default initialization to zero in the\n traditional C case.\n \n @item\n-Conversions by prototypes.  This is similar to @samp{-Wconversion} in\n-that it warns about width changes and fixed/floating point conversions,\n-however it does not warn about changes in signedness.\n+Conversions by prototypes between fixed/floating point values and vice\n+versa.  The absence of these prototypes when compiling with traditional\n+C would cause serious problems.  This is a subset of the possible\n+conversion warnings, for the full set use @samp{-Wconversion}.\n @end itemize\n \n @item -Wundef"}, {"sha": "7a18d157f38c5bc2b8c159afe3db426ec71c56a7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed56f8a0e57bd184b5926c6396feaf23ab2cbcb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed56f8a0e57bd184b5926c6396feaf23ab2cbcb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ed56f8a0e57bd184b5926c6396feaf23ab2cbcb", "patch": "@@ -1,3 +1,7 @@\n+2001-04-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/wtr-conversion-1.c: Don't test for width changes.\n+\n 2001-04-12  Nathan Sidwell  <nathan@codesourcery.com>\n \t\n \t* g++.old-deja/g++.abi/primary3.C (main): Correct expected layout."}, {"sha": "ecf688fe40549c5847ee20770a3f8ea81c0a37eb", "filename": "gcc/testsuite/gcc.dg/wtr-conversion-1.c", "status": "modified", "additions": 16, "deletions": 38, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed56f8a0e57bd184b5926c6396feaf23ab2cbcb/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-conversion-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed56f8a0e57bd184b5926c6396feaf23ab2cbcb/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-conversion-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-conversion-1.c?ref=3ed56f8a0e57bd184b5926c6396feaf23ab2cbcb", "patch": "@@ -4,47 +4,35 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wtraditional\" } */\n \n-extern void foo_c (char);\n-extern void foo_ll (long long);\n+extern void foo_i (int);\n extern void foo_f (float);\n extern void foo_ld (long double);\n extern void foo_cd (__complex__ double);\n \n-extern char c;\n-extern long long ll;\n+extern int i;\n extern float f;\n extern long double ld;\n extern __complex__ double cd;\n \n void\n testfunc1 (void)\n {\n-  foo_c (c); /* { dg-warning \"with different width\" \"prototype conversion warning\" } */\n-  foo_c (ll); /* { dg-warning \"with different width\" \"prototype conversion warning\" } */\n-  foo_c (f); /* { dg-warning \"as integer rather than floating\" \"prototype conversion warning\" } */\n-  foo_c (ld); /* { dg-warning \"as integer rather than floating\" \"prototype conversion warning\" } */\n-  foo_c (cd); /* { dg-warning \"as integer rather than complex\" \"prototype conversion warning\" } */\n+  foo_i (i);\n+  foo_i (f); /* { dg-warning \"as integer rather than floating\" \"prototype conversion warning\" } */\n+  foo_i (ld); /* { dg-warning \"as integer rather than floating\" \"prototype conversion warning\" } */\n+  foo_i (cd); /* { dg-warning \"as integer rather than complex\" \"prototype conversion warning\" } */\n \n-  foo_ll (c); /* { dg-warning \"with different width\" \"prototype conversion warning\" } */\n-  foo_ll (ll);\n-  foo_ll (f); /* { dg-warning \"as integer rather than floating\" \"prototype conversion warning\" } */\n-  foo_ll (ld); /* { dg-warning \"as integer rather than floating\" \"prototype conversion warning\" } */\n-  foo_ll (cd); /* { dg-warning \"as integer rather than complex\" \"prototype conversion warning\" } */\n-\n-  foo_f (c); /* { dg-warning \"as floating rather than integer\" \"prototype conversion warning\" } */\n-  foo_f (ll); /* { dg-warning \"as floating rather than integer\" \"prototype conversion warning\" } */\n+  foo_f (i); /* { dg-warning \"as floating rather than integer\" \"prototype conversion warning\" } */\n   foo_f (f); /* { dg-warning \"as `float' rather than `double'\" \"prototype conversion warning\" } */\n   foo_f (ld); /* { dg-warning \"as `float' rather than `double'\" \"prototype conversion warning\" } */\n   foo_f (cd); /* { dg-warning \"as floating rather than complex\" \"prototype conversion warning\" } */\n \n-  foo_ld (c); /* { dg-warning \"as floating rather than integer\" \"prototype conversion warning\" } */\n-  foo_ld (ll); /* { dg-warning \"as floating rather than integer\" \"prototype conversion warning\" } */\n+  foo_ld (i); /* { dg-warning \"as floating rather than integer\" \"prototype conversion warning\" } */\n   foo_ld (f);\n   foo_ld (ld);\n   foo_ld (cd); /* { dg-warning \"as floating rather than complex\" \"prototype conversion warning\" } */\n \n-  foo_cd (c); /* { dg-warning \"as complex rather than integer\" \"prototype conversion warning\" } */\n-  foo_cd (ll); /* { dg-warning \"as complex rather than integer\" \"prototype conversion warning\" } */\n+  foo_cd (i); /* { dg-warning \"as complex rather than integer\" \"prototype conversion warning\" } */\n   foo_cd (f); /* { dg-warning \"as complex rather than floating\" \"prototype conversion warning\" } */\n   foo_cd (ld); /* { dg-warning \"as complex rather than floating\" \"prototype conversion warning\" } */\n   foo_cd (cd);\n@@ -56,32 +44,22 @@ testfunc1 (void)\n void\n testfunc2 (void)\n {\n-  foo_c (c);\n-  foo_c (ll);\n-  foo_c (f);\n-  foo_c (ld);\n-  foo_c (cd);\n-\n-  foo_ll (c);\n-  foo_ll (ll);\n-  foo_ll (f);\n-  foo_ll (ld);\n-  foo_ll (cd);\n+  foo_i (i);\n+  foo_i (f);\n+  foo_i (ld);\n+  foo_i (cd);\n \n-  foo_f (c);\n-  foo_f (ll);\n+  foo_f (i);\n   foo_f (f);\n   foo_f (ld);\n   foo_f (cd);\n \n-  foo_ld (c);\n-  foo_ld (ll);\n+  foo_ld (i);\n   foo_ld (f);\n   foo_ld (ld);\n   foo_ld (cd);\n \n-  foo_cd (c);\n-  foo_cd (ll);\n+  foo_cd (i);\n   foo_cd (f);\n   foo_cd (ld);\n   foo_cd (cd);"}]}