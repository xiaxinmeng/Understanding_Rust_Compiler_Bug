{"sha": "72058eea9d407edc85558efc76cde5ceb1d06b0a", "node_id": "C_kwDOANBUbNoAKDcyMDU4ZWVhOWQ0MDdlZGM4NTU1OGVmYzc2Y2RlNWNlYjFkMDZiMGE", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2023-02-04T17:38:45Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2023-02-04T17:38:45Z"}, "message": "libstdc++: Avoid use of naked int32_t in unseq_backend_simd.h, PR108672\n\nThe use of a \"naked\" int32_t (i.e. without a fitting #include:\nstdint.h or cstdint or inttypes.h or an equivalent internal header),\nin libstdc++-v3/include/pstl/unseq_backend_simd.h, caused an error for\ncris-elf and apparently pru-elf and I guess all \"newlib targets\".\n(Unfortunately, there's a lack of other *-elf targets in recent months\nof gcc-testresults archives.)\n\nThis does not manifest on e.g. native x86_64-pc-linux-gnu, because\nthere, a definition is included as an effect of including stdlib.h in\ncstdlib (following the trace in native xtreme-header-2_a.ii with\nglibc-2.31-13+deb11u5).  Maybe better than chasing the right #includes\nis to directly use the built-in type, like so:\n\nlibstdc++-v3:\n\n\tPR libstdc++/108672\n\t* include/pstl/unseq_backend_simd.h (__simd_or): Use __INT32_TYPE__\n\tinstead of int32_t.", "tree": {"sha": "8565930b862a35c8882c2e1581d738b7c0cce2b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8565930b862a35c8882c2e1581d738b7c0cce2b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72058eea9d407edc85558efc76cde5ceb1d06b0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72058eea9d407edc85558efc76cde5ceb1d06b0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72058eea9d407edc85558efc76cde5ceb1d06b0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72058eea9d407edc85558efc76cde5ceb1d06b0a/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "08fde093cab28b893e9d2bccfee68d660cfa0774", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08fde093cab28b893e9d2bccfee68d660cfa0774", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08fde093cab28b893e9d2bccfee68d660cfa0774"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "f6265f5c16e5addd9f1e90133d5bf9d28c52f38e", "filename": "libstdc++-v3/include/pstl/unseq_backend_simd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72058eea9d407edc85558efc76cde5ceb1d06b0a/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Funseq_backend_simd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72058eea9d407edc85558efc76cde5ceb1d06b0a/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Funseq_backend_simd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Funseq_backend_simd.h?ref=72058eea9d407edc85558efc76cde5ceb1d06b0a", "patch": "@@ -74,7 +74,7 @@ __simd_or(_Index __first, _DifferenceType __n, _Pred __pred) noexcept\n     const _Index __last = __first + __n;\n     while (__last != __first)\n     {\n-        int32_t __flag = 1;\n+        __INT32_TYPE__ __flag = 1;\n         _PSTL_PRAGMA_SIMD_REDUCTION(& : __flag)\n         for (_DifferenceType __i = 0; __i < __block_size; ++__i)\n             if (__pred(*(__first + __i)))"}]}