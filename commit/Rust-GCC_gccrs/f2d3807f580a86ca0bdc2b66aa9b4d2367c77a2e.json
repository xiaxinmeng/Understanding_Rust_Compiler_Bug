{"sha": "f2d3807f580a86ca0bdc2b66aa9b4d2367c77a2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJkMzgwN2Y1ODBhODZjYTBiZGMyYjY2YWE5YjRkMjM2N2M3N2EyZQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-03-15T12:59:14Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-03-16T09:38:31Z"}, "message": "libphobos: Merge upstream druntime 6c45dd3a, phobos 68cc18adb.\n\nSurrounds the gcc-style asm operands with parentheses, as the old style\nis now deprecated.\n\nReviewed-on: https://github.com/dlang/druntime/pull/2986", "tree": {"sha": "d72c486851501110f304f3d56960ca8a18f02771", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d72c486851501110f304f3d56960ca8a18f02771"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2d3807f580a86ca0bdc2b66aa9b4d2367c77a2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d3807f580a86ca0bdc2b66aa9b4d2367c77a2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2d3807f580a86ca0bdc2b66aa9b4d2367c77a2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d3807f580a86ca0bdc2b66aa9b4d2367c77a2e/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d44c881286762628afce5169d921a388ae6a1ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d44c881286762628afce5169d921a388ae6a1ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d44c881286762628afce5169d921a388ae6a1ff"}], "stats": {"total": 62, "additions": 33, "deletions": 29}, "files": [{"sha": "54ae72fa54ee100d9d4e2ecf08614bad13dd9e5d", "filename": "libphobos/libdruntime/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d3807f580a86ca0bdc2b66aa9b4d2367c77a2e/libphobos%2Flibdruntime%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d3807f580a86ca0bdc2b66aa9b4d2367c77a2e/libphobos%2Flibdruntime%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMERGE?ref=f2d3807f580a86ca0bdc2b66aa9b4d2367c77a2e", "patch": "@@ -1,4 +1,4 @@\n-7915b6a399fbb6d9c0db351eb5a8fda7e43fe8c5\n+6c45dd3a6523a21887cb9a883eeb3abd40375dc1\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/druntime repository."}, {"sha": "d35e7d5449fffd3bcd123b6bc840843b8d7e8eeb", "filename": "libphobos/libdruntime/core/cpuid.d", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d3807f580a86ca0bdc2b66aa9b4d2367c77a2e/libphobos%2Flibdruntime%2Fcore%2Fcpuid.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d3807f580a86ca0bdc2b66aa9b4d2367c77a2e/libphobos%2Flibdruntime%2Fcore%2Fcpuid.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fcpuid.d?ref=f2d3807f580a86ca0bdc2b66aa9b4d2367c77a2e", "patch": "@@ -510,7 +510,7 @@ void getcacheinfoCPUID2()\n     uint numinfos = 1;\n     do {\n         version (GNU) asm pure nothrow @nogc {\n-            \"cpuid\" : \"=a\" a[0], \"=b\" a[1], \"=c\" a[2], \"=d\" a[3] : \"a\" 2;\n+            \"cpuid\" : \"=a\" (a[0]), \"=b\" (a[1]), \"=c\" (a[2]), \"=d\" (a[3]) : \"a\" (2);\n         } else asm pure nothrow @nogc {\n             mov EAX, 2;\n             cpuid;\n@@ -554,7 +554,7 @@ void getcacheinfoCPUID4()\n     for (;;) {\n         uint a, b, number_of_sets;\n         version (GNU) asm pure nothrow @nogc {\n-            \"cpuid\" : \"=a\" a, \"=b\" b, \"=c\" number_of_sets : \"a\" 4, \"c\" cachenum : \"edx\";\n+            \"cpuid\" : \"=a\" (a), \"=b\" (b), \"=c\" (number_of_sets) : \"a\" (4), \"c\" (cachenum) : \"edx\";\n         } else asm pure nothrow @nogc {\n             mov EAX, 4;\n             mov ECX, cachenum;\n@@ -594,7 +594,7 @@ void getAMDcacheinfo()\n {\n     uint dummy, c5, c6, d6;\n     version (GNU) asm pure nothrow @nogc {\n-        \"cpuid\" : \"=a\" dummy, \"=c\" c5 : \"a\" 0x8000_0005 : \"ebx\", \"edx\";\n+        \"cpuid\" : \"=a\" (dummy), \"=c\" (c5) : \"a\" (0x8000_0005) : \"ebx\", \"edx\";\n     } else asm pure nothrow @nogc {\n         mov EAX, 0x8000_0005; // L1 cache\n         cpuid;\n@@ -613,7 +613,7 @@ void getAMDcacheinfo()\n         ubyte numcores = 1;\n         if (max_extended_cpuid >= 0x8000_0008) {\n             version (GNU) asm pure nothrow @nogc {\n-                \"cpuid\" : \"=a\" dummy, \"=c\" numcores : \"a\" 0x8000_0008 : \"ebx\", \"edx\";\n+                \"cpuid\" : \"=a\" (dummy), \"=c\" (numcores) : \"a\" (0x8000_0008) : \"ebx\", \"edx\";\n             } else asm pure nothrow @nogc {\n                 mov EAX, 0x8000_0008;\n                 cpuid;\n@@ -624,7 +624,7 @@ void getAMDcacheinfo()\n         }\n \n         version (GNU) asm pure nothrow @nogc {\n-            \"cpuid\" : \"=a\" dummy, \"=c\" c6, \"=d\" d6 : \"a\" 0x8000_0006 : \"ebx\";\n+            \"cpuid\" : \"=a\" (dummy), \"=c\" (c6), \"=d\" (d6) : \"a\" (0x8000_0006) : \"ebx\";\n         } else asm pure nothrow @nogc {\n             mov EAX, 0x8000_0006; // L2/L3 cache\n             cpuid;\n@@ -653,7 +653,7 @@ void getCpuInfo0B()\n     uint a, b, c, d;\n     do {\n         version (GNU) asm pure nothrow @nogc {\n-            \"cpuid\" : \"=a\" a, \"=b\" b, \"=c\" c, \"=d\" d : \"a\" 0x0B, \"c\" level;\n+            \"cpuid\" : \"=a\" (a), \"=b\" (b), \"=c\" (c), \"=d\" (d) : \"a\" (0x0B), \"c\" (level);\n         } else asm pure nothrow @nogc {\n             mov EAX, 0x0B;\n             mov ECX, level;\n@@ -686,8 +686,10 @@ void cpuidX86()\n     uint* venptr = cast(uint*)cf.vendorID.ptr;\n     version (GNU)\n     {\n-        asm pure nothrow @nogc { \"cpuid\" : \"=a\" max_cpuid, \"=b\" venptr[0], \"=d\" venptr[1], \"=c\" venptr[2] : \"a\" 0; }\n-        asm pure nothrow @nogc { \"cpuid\" : \"=a\" max_extended_cpuid : \"a\" 0x8000_0000 : \"ebx\", \"ecx\", \"edx\"; }\n+        asm pure nothrow @nogc {\n+            \"cpuid\" : \"=a\" (max_cpuid), \"=b\" (venptr[0]), \"=d\" (venptr[1]), \"=c\" (venptr[2]) : \"a\" (0);\n+            \"cpuid\" : \"=a\" (max_extended_cpuid) : \"a\" (0x8000_0000) : \"ebx\", \"ecx\", \"edx\";\n+        }\n     }\n     else\n     {\n@@ -730,7 +732,7 @@ void cpuidX86()\n     cf.probablyAMD = cf.vendorID == \"AuthenticAMD\";\n     uint apic = 0; // brand index, apic id\n     version (GNU) asm pure nothrow @nogc {\n-        \"cpuid\" : \"=a\" a, \"=b\" apic, \"=c\" cf.miscfeatures, \"=d\" cf.features : \"a\" 1;\n+        \"cpuid\" : \"=a\" (a), \"=b\" (apic), \"=c\" (cf.miscfeatures), \"=d\" (cf.features) : \"a\" (1);\n     } else {\n         asm pure nothrow @nogc {\n             mov EAX, 1; // model, stepping\n@@ -753,7 +755,7 @@ void cpuidX86()\n     if (max_cpuid >= 7)\n     {\n         version (GNU) asm pure nothrow @nogc {\n-            \"cpuid\" : \"=a\" a, \"=b\" cf.extfeatures, \"=c\" c : \"a\" 7, \"c\" 0 : \"edx\";\n+            \"cpuid\" : \"=a\" (a), \"=b\" (cf.extfeatures), \"=c\" (c) : \"a\" (7), \"c\" (0) : \"edx\";\n         } else {\n             uint ext;\n             asm pure nothrow @nogc {\n@@ -769,7 +771,7 @@ void cpuidX86()\n     if (cf.miscfeatures & OSXSAVE_BIT)\n     {\n         version (GNU) asm pure nothrow @nogc {\n-            \"xgetbv\" : \"=a\" a, \"=d\" d : \"c\" 0;\n+            \"xgetbv\" : \"=a\" (a), \"=d\" (d) : \"c\" (0);\n         } else asm pure nothrow @nogc {\n             mov ECX, 0;\n             xgetbv;\n@@ -783,7 +785,7 @@ void cpuidX86()\n     cf.amdmiscfeatures = 0;\n     if (max_extended_cpuid >= 0x8000_0001) {\n         version (GNU) asm pure nothrow @nogc {\n-            \"cpuid\" : \"=a\" a, \"=c\" cf.amdmiscfeatures, \"=d\" cf.amdfeatures : \"a\" 0x8000_0001 : \"ebx\";\n+            \"cpuid\" : \"=a\" (a), \"=c\" (cf.amdmiscfeatures), \"=d\" (cf.amdfeatures) : \"a\" (0x8000_0001) : \"ebx\";\n         } else {\n             asm pure nothrow @nogc {\n                 mov EAX, 0x8000_0001;\n@@ -804,7 +806,7 @@ void cpuidX86()\n         if (hyperThreadingBit) {\n             // determine max number of cores for AMD\n             version (GNU) asm pure nothrow @nogc {\n-                \"cpuid\" : \"=a\" a, \"=c\" c : \"a\" 0x8000_0008 : \"ebx\", \"edx\";\n+                \"cpuid\" : \"=a\" (a), \"=c\" (c) : \"a\" (0x8000_0008) : \"ebx\", \"edx\";\n             } else asm pure nothrow @nogc {\n                 mov EAX, 0x8000_0008;\n                 cpuid;\n@@ -818,9 +820,11 @@ void cpuidX86()\n         uint* pnb = cast(uint*)cf.processorNameBuffer.ptr;\n         version (GNU)\n         {\n-            asm pure nothrow @nogc { \"cpuid\" : \"=a\" pnb[0], \"=b\" pnb[1], \"=c\" pnb[ 2], \"=d\" pnb[ 3] : \"a\" 0x8000_0002; }\n-            asm pure nothrow @nogc { \"cpuid\" : \"=a\" pnb[4], \"=b\" pnb[5], \"=c\" pnb[ 6], \"=d\" pnb[ 7] : \"a\" 0x8000_0003; }\n-            asm pure nothrow @nogc { \"cpuid\" : \"=a\" pnb[8], \"=b\" pnb[9], \"=c\" pnb[10], \"=d\" pnb[11] : \"a\" 0x8000_0004; }\n+            asm pure nothrow @nogc {\n+                \"cpuid\" : \"=a\" (pnb[0]), \"=b\" (pnb[1]), \"=c\" (pnb[ 2]), \"=d\" (pnb[ 3]) : \"a\" (0x8000_0002);\n+                \"cpuid\" : \"=a\" (pnb[4]), \"=b\" (pnb[5]), \"=c\" (pnb[ 6]), \"=d\" (pnb[ 7]) : \"a\" (0x8000_0003);               \n+                \"cpuid\" : \"=a\" (pnb[8]), \"=b\" (pnb[9]), \"=c\" (pnb[10]), \"=d\" (pnb[11]) : \"a\" (0x8000_0004);\n+            }\n         }\n         else version (D_InlineAsm_X86)\n         {"}, {"sha": "c7e4878945a882c9dc84c5ce873fd808013afc82", "filename": "libphobos/src/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d3807f580a86ca0bdc2b66aa9b4d2367c77a2e/libphobos%2Fsrc%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d3807f580a86ca0bdc2b66aa9b4d2367c77a2e/libphobos%2Fsrc%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2FMERGE?ref=f2d3807f580a86ca0bdc2b66aa9b4d2367c77a2e", "patch": "@@ -1,4 +1,4 @@\n-66ae77ac3f97a007a12738e4bc02b3bbfef99bba\n+68cc18adbcdbf2a62cb85a5cb2a34236af2ab05a\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/phobos repository."}, {"sha": "c77792d30244b522f95157869321b3b80665a6a3", "filename": "libphobos/src/std/algorithm/iteration.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d3807f580a86ca0bdc2b66aa9b4d2367c77a2e/libphobos%2Fsrc%2Fstd%2Falgorithm%2Fiteration.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d3807f580a86ca0bdc2b66aa9b4d2367c77a2e/libphobos%2Fsrc%2Fstd%2Falgorithm%2Fiteration.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Falgorithm%2Fiteration.d?ref=f2d3807f580a86ca0bdc2b66aa9b4d2367c77a2e", "patch": "@@ -3620,7 +3620,7 @@ The number of seeds must be correspondingly increased.\n     static assert(!__traits(compiles, cumulativeFold!(min, max)(\"hello\", tuple(c))));\n     //\"Seed (dchar, dchar, dchar) does not have the correct amount of fields (should be 2)\"\n     static assert(!__traits(compiles, cumulativeFold!(min, max)(\"hello\", tuple(c, c, c))));\n-    //\"Incompatable function/seed/element: all(alias pred = \"a\")/int/dchar\"\n+    //\"Incompatible function/seed/element: all(alias pred = \"a\")/int/dchar\"\n     static assert(!__traits(compiles, cumulativeFold!all(\"hello\", 1)));\n     static assert(!__traits(compiles, cumulativeFold!(all, all)(\"hello\", tuple(1, 1))));\n }"}, {"sha": "dedfa2014ec868a93d9bf53b6a62188e57d821a9", "filename": "libphobos/src/std/math.d", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d3807f580a86ca0bdc2b66aa9b4d2367c77a2e/libphobos%2Fsrc%2Fstd%2Fmath.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d3807f580a86ca0bdc2b66aa9b4d2367c77a2e/libphobos%2Fsrc%2Fstd%2Fmath.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fmath.d?ref=f2d3807f580a86ca0bdc2b66aa9b4d2367c77a2e", "patch": "@@ -4760,7 +4760,7 @@ private:\n                     uint result = void;\n                     asm pure nothrow @nogc\n                     {\n-                        \"vmrs %0, FPSCR; and %0, %0, #0x1F;\" : \"=r\" result;\n+                        \"vmrs %0, FPSCR; and %0, %0, #0x1F;\" : \"=r\" (result);\n                     }\n                     return result;\n                 }\n@@ -4774,7 +4774,7 @@ private:\n                     uint result = void;\n                     asm pure nothrow @nogc\n                     {\n-                        \"frflags %0\" : \"=r\" result;\n+                        \"frflags %0\" : \"=r\" (result);\n                     }\n                     return result;\n                 }\n@@ -4862,7 +4862,7 @@ private:\n                     uint newValues = 0x0;\n                     asm pure nothrow @nogc\n                     {\n-                        \"fsflags %0\" : : \"r\" newValues;\n+                        \"fsflags %0\" : : \"r\" (newValues);\n                     }\n                 }\n             }\n@@ -5431,7 +5431,7 @@ private:\n                 ControlState cont;\n                 asm pure nothrow @nogc\n                 {\n-                    \"fstcw %0\" : \"=m\" cont;\n+                    \"fstcw %0\" : \"=m\" (cont);\n                 }\n                 return cont;\n             }\n@@ -5440,7 +5440,7 @@ private:\n                 ControlState cont;\n                 asm pure nothrow @nogc\n                 {\n-                    \"mrs %0, FPCR;\" : \"=r\" cont;\n+                    \"mrs %0, FPCR;\" : \"=r\" (cont);\n                 }\n                 return cont;\n             }\n@@ -5453,7 +5453,7 @@ private:\n                 {\n                     asm pure nothrow @nogc\n                     {\n-                        \"vmrs %0, FPSCR\" : \"=r\" cont;\n+                        \"vmrs %0, FPSCR\" : \"=r\" (cont);\n                     }\n                 }\n                 return cont;\n@@ -5467,7 +5467,7 @@ private:\n                     ControlState cont;\n                     asm pure nothrow @nogc\n                     {\n-                        \"frcsr %0\" : \"=r\" cont;\n+                        \"frcsr %0\" : \"=r\" (cont);\n                     }\n                     return cont;\n                 }\n@@ -5510,7 +5510,7 @@ private:\n             {\n                 asm pure nothrow @nogc\n                 {\n-                    \"fclex; fldcw %0\" : : \"m\" newState;\n+                    \"fclex; fldcw %0\" : : \"m\" (newState);\n                 }\n \n                 // Also update MXCSR, SSE's control register.\n@@ -5519,7 +5519,7 @@ private:\n                     uint mxcsr;\n                     asm pure nothrow @nogc\n                     {\n-                        \"stmxcsr %0\" : \"=m\" mxcsr;\n+                        \"stmxcsr %0\" : \"=m\" (mxcsr);\n                     }\n \n                     /* In the FPU control register, rounding mode is in bits 10 and\n@@ -5534,7 +5534,7 @@ private:\n \n                     asm pure nothrow @nogc\n                     {\n-                        \"ldmxcsr %0\" : : \"m\" mxcsr;\n+                        \"ldmxcsr %0\" : : \"m\" (mxcsr);\n                     }\n                 }\n             }"}]}