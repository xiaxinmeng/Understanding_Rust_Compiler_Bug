{"sha": "627b12bc5b72ee6ada70ec8ce3a2a2b262130e21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI3YjEyYmM1YjcyZWU2YWRhNzBlYzhjZTNhMmEyYjI2MjEzMGUyMQ==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-11-17T21:59:01Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-11-17T21:59:01Z"}, "message": "Initial revision\n\nFrom-SVN: r8487", "tree": {"sha": "ca20bade86eb601b2f0d8d4c801393e5bced2cd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca20bade86eb601b2f0d8d4c801393e5bced2cd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/627b12bc5b72ee6ada70ec8ce3a2a2b262130e21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/627b12bc5b72ee6ada70ec8ce3a2a2b262130e21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/627b12bc5b72ee6ada70ec8ce3a2a2b262130e21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/627b12bc5b72ee6ada70ec8ce3a2a2b262130e21/comments", "author": null, "committer": null, "parents": [{"sha": "338023d4cb04b826421737fadf8c42b3c57d10f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/338023d4cb04b826421737fadf8c42b3c57d10f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/338023d4cb04b826421737fadf8c42b3c57d10f8"}], "stats": {"total": 190, "additions": 190, "deletions": 0}, "files": [{"sha": "6d28de057cc183adbe683a2c5c6e1d659c244e7e", "filename": "gcc/config/a29k/udi.h", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627b12bc5b72ee6ada70ec8ce3a2a2b262130e21/gcc%2Fconfig%2Fa29k%2Fudi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627b12bc5b72ee6ada70ec8ce3a2a2b262130e21/gcc%2Fconfig%2Fa29k%2Fudi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fudi.h?ref=627b12bc5b72ee6ada70ec8ce3a2a2b262130e21", "patch": "@@ -0,0 +1,95 @@\n+/* Definitions of target machine for GNU compiler, for AMD Am29000 CPU\n+   running over UDI using COFF.\n+   Copyright (C) 1994 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#include \"a29k/a29k.h\"\n+\n+/* Support the ctors and dtors sections for g++.  */\n+\n+#define CTORS_SECTION_ASM_OP\t\"\\t.use .ctors\"\n+#define DTORS_SECTION_ASM_OP\t\"\\t.use .dtors\"\n+\n+/* A list of other sections which the compiler might be \"in\" at any\n+   given time.  */\n+\n+#undef EXTRA_SECTIONS\n+#define EXTRA_SECTIONS readonly_data, in_ctors, in_dtors\n+\n+/* A list of extra section function definitions.  */\n+\n+#undef EXTRA_SECTION_FUNCTIONS\n+#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n+  READONLY_DATA_FUNCTION\t\t\t\t\t\t\\\n+  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+  DTORS_SECTION_FUNCTION\n+\n+#define READONLY_DATA_FUNCTION\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+literal_section ()\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (in_section != readonly_data)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", READONLY_DATA_SECTION_ASM_OP); \\\n+      in_section = readonly_data;\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\n+#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+ctors_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_ctors)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n+      in_section = in_ctors;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+dtors_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_dtors)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n+      in_section = in_dtors;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define INT_ASM_OP \".word\"\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global constructors.  */\n+#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    ctors_section ();\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global destructors.  */\n+#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    dtors_section ();                   \t\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    assemble_name (FILE, NAME);              \t\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)"}, {"sha": "cc793f3f2ac8598387c7a78c2cc2bdbb8b1e691e", "filename": "gcc/config/gofast.h", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627b12bc5b72ee6ada70ec8ce3a2a2b262130e21/gcc%2Fconfig%2Fgofast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627b12bc5b72ee6ada70ec8ce3a2a2b262130e21/gcc%2Fconfig%2Fgofast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgofast.h?ref=627b12bc5b72ee6ada70ec8ce3a2a2b262130e21", "patch": "@@ -0,0 +1,95 @@\n+/* US Software GOFAST floating point library support.\n+   Copyright (C) 1994 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* This is used by fp-bit.c.  */\n+#define US_SOFTWARE_GOFAST\n+\n+/* The US Software GOFAST library requires special optabs support.\n+   There is no negation libcall, and several others have names different\n+   from gcc.  This file consolidates the support in one place.\n+\n+   The basic plan is to leave gcc proper alone and via some hook fix things\n+   after the optabs have been set up.  Our main entry point is\n+   INIT_GOFAST_OPTABS.  */\n+\n+#define INIT_GOFAST_OPTABS \\\n+  do { \\\n+    GOFAST_CLEAR_NEG_FLOAT_OPTAB; \\\n+    GOFAST_RENAME_LIBCALLS; \\\n+  } while (0)\n+\n+#define GOFAST_CLEAR_NEG_FLOAT_OPTAB \\\n+  do { \\\n+    int mode; \\\n+    for (mode = SFmode; (int) mode <= (int) TFmode; \\\n+\t mode = (enum machine_mode) ((int) mode + 1)) \\\n+      neg_optab->handlers[(int) mode].libfunc = NULL_RTX; \\\n+  } while (0)\n+\n+#define GOFAST_RENAME_LIBCALLS \\\n+  add_optab->handlers[(int) SFmode].libfunc = gen_rtx (SYMBOL_REF, Pmode, \"fpadd\"); \\\n+  add_optab->handlers[(int) DFmode].libfunc = gen_rtx (SYMBOL_REF, Pmode, \"dpadd\"); \\\n+  sub_optab->handlers[(int) SFmode].libfunc = gen_rtx (SYMBOL_REF, Pmode, \"fpsub\"); \\\n+  sub_optab->handlers[(int) DFmode].libfunc = gen_rtx (SYMBOL_REF, Pmode, \"dpsub\"); \\\n+  smul_optab->handlers[(int) SFmode].libfunc = gen_rtx (SYMBOL_REF, Pmode, \"fpmul\"); \\\n+  smul_optab->handlers[(int) DFmode].libfunc = gen_rtx (SYMBOL_REF, Pmode, \"dpmul\"); \\\n+  flodiv_optab->handlers[(int) SFmode].libfunc = gen_rtx (SYMBOL_REF, Pmode, \"fpdiv\"); \\\n+  flodiv_optab->handlers[(int) DFmode].libfunc = gen_rtx (SYMBOL_REF, Pmode, \"dpdiv\"); \\\n+  cmp_optab->handlers[(int) SFmode].libfunc = gen_rtx (SYMBOL_REF, Pmode, \"fpcmp\"); \\\n+  cmp_optab->handlers[(int) DFmode].libfunc = gen_rtx (SYMBOL_REF, Pmode, \"dpcmp\"); \\\n+\\\n+  extendsfdf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"fptodp\"); \\\n+  truncdfsf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"dptofp\"); \\\n+\\\n+  eqsf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"fpcmp\"); \\\n+  nesf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"fpcmp\"); \\\n+  gtsf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"fpcmp\"); \\\n+  gesf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"fpcmp\"); \\\n+  ltsf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"fpcmp\"); \\\n+  lesf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"fpcmp\"); \\\n+\\\n+  eqdf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"dpcmp\"); \\\n+  nedf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"dpcmp\"); \\\n+  gtdf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"dpcmp\"); \\\n+  gedf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"dpcmp\"); \\\n+  ltdf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"dpcmp\"); \\\n+  ledf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"dpcmp\"); \\\n+\\\n+  eqxf2_libfunc = NULL_RTX; \\\n+  nexf2_libfunc = NULL_RTX; \\\n+  gtxf2_libfunc = NULL_RTX; \\\n+  gexf2_libfunc = NULL_RTX; \\\n+  ltxf2_libfunc = NULL_RTX; \\\n+  lexf2_libfunc = NULL_RTX; \\\n+\\\n+  eqtf2_libfunc = NULL_RTX; \\\n+  netf2_libfunc = NULL_RTX; \\\n+  gttf2_libfunc = NULL_RTX; \\\n+  getf2_libfunc = NULL_RTX; \\\n+  lttf2_libfunc = NULL_RTX; \\\n+  letf2_libfunc = NULL_RTX; \\\n+\\\n+  floatsisf_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"sitofp\"); \\\n+  floatsidf_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"litodp\"); \\\n+  fixsfsi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"fptosi\"); \\\n+  fixdfsi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"dptoli\"); \\\n+  fixunssfsi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"fptoui\"); \\\n+  fixunsdfsi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"dptoul\"); \\\n+\n+/* End of GOFAST_RENAME_LIBCALLS */"}]}