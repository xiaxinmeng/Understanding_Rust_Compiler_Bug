{"sha": "e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkwYmVkZjUyYzg2YTdiNGUyZTBhMWY4YTVhMTQ1MDcyNWNiOTViNg==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-10-21T21:05:02Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-10-21T21:05:02Z"}, "message": "unconditionally compile most of the delay slot code\n\ngcc/ChangeLog:\n\n2015-10-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* cfgrtl.c (pass_free_cfg::execute): Adjust.\n\t* final.c (dbr_sequence_length): Always define.\n\t(shorten_branches): Adjust.\n\t* genattr-common.c (main): Always define DELAY_SLOTS.\n\t* genattr.c (main): Unconditionally declare functions and define\n\tmacros related to delay slots.\n\t* genattrtab.c (write_eligible_delay): Adjust.\n\t(main): Always write out delay slot functions.\n\t* opts.c (default_options_table): Adjust.\n\t* reorg.c (redirect_with_delay_slots_safe_p): Likewise.\n\t(redirect_with_delay_list_safe_p): Likewise.\n\t(fill_simple_delay_slots): Likewise.\n\t(fill_slots_from_thread): Likewise.\n\t(make_return_insns): Likewise.\n\t(dbr_schedule): Likewise.\n\t(rest_of_handle_delay_slots): Likewise.\n\t(pass_delay_slots::gate): Likewise.\n\t* toplev.c (process_options): Likewise.\n\nFrom-SVN: r229145", "tree": {"sha": "7e4247b26f99c762d570b1e1456c1d1e1167819e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e4247b26f99c762d570b1e1456c1d1e1167819e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6/comments", "author": null, "committer": null, "parents": [{"sha": "0a798c16c13970d020bc5b93c1aceac9ec5dd7a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a798c16c13970d020bc5b93c1aceac9ec5dd7a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a798c16c13970d020bc5b93c1aceac9ec5dd7a1"}], "stats": {"total": 188, "additions": 83, "deletions": 105}, "files": [{"sha": "cdeb703dbb7fd75ef0c1d74813bb0fc520be8159", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6", "patch": "@@ -1,3 +1,24 @@\n+2015-10-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* cfgrtl.c (pass_free_cfg::execute): Adjust.\n+\t* final.c (dbr_sequence_length): Always define.\n+\t(shorten_branches): Adjust.\n+\t* genattr-common.c (main): Always define DELAY_SLOTS.\n+\t* genattr.c (main): Unconditionally declare functions and define\n+\tmacros related to delay slots.\n+\t* genattrtab.c (write_eligible_delay): Adjust.\n+\t(main): Always write out delay slot functions.\n+\t* opts.c (default_options_table): Adjust.\n+\t* reorg.c (redirect_with_delay_slots_safe_p): Likewise.\n+\t(redirect_with_delay_list_safe_p): Likewise.\n+\t(fill_simple_delay_slots): Likewise.\n+\t(fill_slots_from_thread): Likewise.\n+\t(make_return_insns): Likewise.\n+\t(dbr_schedule): Likewise.\n+\t(rest_of_handle_delay_slots): Likewise.\n+\t(pass_delay_slots::gate): Likewise.\n+\t* toplev.c (process_options): Likewise.\n+\n 2015-10-21  Richard Henderson  <rth@redhat.com>\n \n \t* targhooks.c (default_addr_space_pointer_mode): Remove check"}, {"sha": "d2fe1e07537c11523b9c71f829b1e45c65de198c", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6", "patch": "@@ -483,15 +483,13 @@ class pass_free_cfg : public rtl_opt_pass\n unsigned int\n pass_free_cfg::execute (function *)\n {\n-#ifdef DELAY_SLOTS\n   /* The resource.c machinery uses DF but the CFG isn't guaranteed to be\n      valid at that point so it would be too late to call df_analyze.  */\n-  if (optimize > 0 && flag_delayed_branch)\n+  if (DELAY_SLOTS && optimize > 0 && flag_delayed_branch)\n     {\n       df_note_add_problem ();\n       df_analyze ();\n     }\n-#endif\n \n   if (crtl->has_bb_partition)\n     insert_section_boundary_note ();"}, {"sha": "18faa63e26d0afd689f9d1b7d2e095f04ab06fe9", "filename": "gcc/final.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6", "patch": "@@ -297,7 +297,6 @@ app_disable (void)\n    delayed branch sequence (we don't count the insn needing the\n    delay slot).   Zero if not in a delayed branch sequence.  */\n \n-#ifdef DELAY_SLOTS\n int\n dbr_sequence_length (void)\n {\n@@ -306,7 +305,6 @@ dbr_sequence_length (void)\n   else\n     return 0;\n }\n-#endif\n \f\n /* The next two pages contain routines used to compute the length of an insn\n    and to shorten branches.  */\n@@ -1156,11 +1154,11 @@ shorten_branches (rtx_insn *first)\n \t{\n \t  int i;\n \t  int const_delay_slots;\n-#ifdef DELAY_SLOTS\n-\t  const_delay_slots = const_num_delay_slots (body_seq->insn (0));\n-#else\n-\t  const_delay_slots = 0;\n-#endif\n+\t  if (DELAY_SLOTS)\n+\t    const_delay_slots = const_num_delay_slots (body_seq->insn (0));\n+\t  else\n+\t    const_delay_slots = 0;\n+\n \t  int (*inner_length_fun) (rtx_insn *)\n \t    = const_delay_slots ? length_fun : insn_default_length;\n \t  /* Inside a delay slot sequence, we do not do any branch shortening"}, {"sha": "a51f8ebf824406537964bb10802bd8c06d04b7dc", "filename": "gcc/genattr-common.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6/gcc%2Fgenattr-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6/gcc%2Fgenattr-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr-common.c?ref=e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6", "patch": "@@ -87,11 +87,7 @@ main (int argc, char **argv)\n \tbreak;\n \n       case DEFINE_DELAY:\n-\tif (!have_delay)\n-\t  {\n-\t    printf (\"#define DELAY_SLOTS\\n\");\n-\t    have_delay = true;\n-\t  }\n+\thave_delay = true;\n \tbreak;\n \n       case DEFINE_INSN_RESERVATION:\n@@ -105,6 +101,8 @@ main (int argc, char **argv)\n       default:\n \tbreak;\n       }\n+\n+\t    printf (\"#define DELAY_SLOTS %d\\n\", have_delay);\n   puts (\"\\n#endif /* GCC_INSN_ATTR_COMMON_H */\");\n \n   if (ferror (stdout) || fflush (stdout) || fclose (stdout))"}, {"sha": "e45f87cbeb26f26655e01b8d6cda48d0f03cf259", "filename": "gcc/genattr.c", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6", "patch": "@@ -140,9 +140,8 @@ find_tune_attr (rtx exp)\n int\n main (int argc, char **argv)\n {\n-  int have_delay = 0;\n-  int have_annul_true = 0;\n-  int have_annul_false = 0;\n+  bool have_annul_true = false;\n+  bool have_annul_false = false;\n   int num_insn_reservations = 0;\n   int i;\n \n@@ -172,29 +171,13 @@ main (int argc, char **argv)\n \t  break;\n \n \tcase DEFINE_DELAY:\n-\t  if (! have_delay)\n-\t    {\n-\t      printf (\"extern int num_delay_slots (rtx_insn *);\\n\");\n-\t      printf (\"extern int eligible_for_delay (rtx_insn *, int, rtx_insn *, int);\\n\\n\");\n-\t      printf (\"extern int const_num_delay_slots (rtx_insn *);\\n\\n\");\n-\t      have_delay = 1;\n-\t    }\n-\n \t  for (i = 0; i < XVECLEN (def, 1); i += 3)\n \t    {\n-\t      if (XVECEXP (def, 1, i + 1) && ! have_annul_true)\n-\t\t{\n-\t\t  printf (\"#define ANNUL_IFTRUE_SLOTS\\n\");\n-\t\t  printf (\"extern int eligible_for_annul_true (rtx_insn *, int, rtx_insn *, int);\\n\");\n-\t\t  have_annul_true = 1;\n-\t\t}\n-\n-\t      if (XVECEXP (def, 1, i + 2) && ! have_annul_false)\n-\t\t{\n-\t\t  printf (\"#define ANNUL_IFFALSE_SLOTS\\n\");\n-\t\t  printf (\"extern int eligible_for_annul_false (rtx_insn *, int, rtx_insn *, int);\\n\");\n-\t\t  have_annul_false = 1;\n-\t\t}\n+\t      if (XVECEXP (def, 1, i + 1))\n+\t\thave_annul_true = true;\n+\n+\t      if (XVECEXP (def, 1, i + 2))\n+\t\thave_annul_false = true;\n \t    }\n \t  break;\n \n@@ -208,6 +191,14 @@ main (int argc, char **argv)\n \t}\n     }\n \n+  printf (\"extern int num_delay_slots (rtx_insn *);\\n\");\n+  printf (\"extern int eligible_for_delay (rtx_insn *, int, rtx_insn *, int);\\n\\n\");\n+  printf (\"extern int const_num_delay_slots (rtx_insn *);\\n\\n\");\n+  printf (\"#define ANNUL_IFTRUE_SLOTS %d\\n\", have_annul_true);\n+  printf (\"extern int eligible_for_annul_true (rtx_insn *, int, rtx_insn *, int);\\n\");\n+  printf (\"#define ANNUL_IFFALSE_SLOTS %d\\n\", have_annul_false);\n+  printf (\"extern int eligible_for_annul_false (rtx_insn *, int, rtx_insn *, int);\\n\");\n+\n   if (num_insn_reservations > 0)\n     {\n       bool has_tune_attr"}, {"sha": "8d1fa6c9bbf09d2b5a171e239339039a10e48e1c", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6", "patch": "@@ -4449,7 +4449,7 @@ write_eligible_delay (FILE *outf, const char *kind)\n \t\t \"\t\t   rtx_insn *candidate_insn, int flags ATTRIBUTE_UNUSED)\\n\",\n \t   kind);\n   fprintf (outf, \"{\\n\");\n-  fprintf (outf, \"  rtx_insn *insn;\\n\");\n+  fprintf (outf, \"  rtx_insn *insn ATTRIBUTE_UNUSED;\\n\");\n   fprintf (outf, \"\\n\");\n   fprintf (outf, \"  gcc_assert (slot < %d);\\n\", max_slots);\n   fprintf (outf, \"\\n\");\n@@ -5240,8 +5240,7 @@ main (int argc, char **argv)\n     }\n \n   /* Expand DEFINE_DELAY information into new attribute.  */\n-  if (num_delays)\n-    expand_delays ();\n+  expand_delays ();\n \n   /* Make `insn_alternatives'.  */\n   int num_insn_codes = get_num_insn_codes ();\n@@ -5307,14 +5306,9 @@ main (int argc, char **argv)\n   /* Write out delay eligibility information, if DEFINE_DELAY present.\n      (The function to compute the number of delay slots will be written\n      below.)  */\n-  if (num_delays)\n-    {\n-      write_eligible_delay (attr_file, \"delay\");\n-      if (have_annul_true)\n-\twrite_eligible_delay (attr_file, \"annul_true\");\n-      if (have_annul_false)\n-\twrite_eligible_delay (attr_file, \"annul_false\");\n-    }\n+  write_eligible_delay (attr_file, \"delay\");\n+  write_eligible_delay (attr_file, \"annul_true\");\n+  write_eligible_delay (attr_file, \"annul_false\");\n \n   /* Write out constant delay slot info.  */\n   write_const_num_delay_slots (attr_file);"}, {"sha": "a892c8880e8f2db599115255abb9ad1d3c740733", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6", "patch": "@@ -429,7 +429,7 @@ static const struct default_options default_options_table[] =\n   {\n     /* -O1 optimizations.  */\n     { OPT_LEVELS_1_PLUS, OPT_fdefer_pop, NULL, 1 },\n-#ifdef DELAY_SLOTS\n+#if DELAY_SLOTS\n     { OPT_LEVELS_1_PLUS, OPT_fdelayed_branch, NULL, 1 },\n #endif\n     { OPT_LEVELS_1_PLUS, OPT_fguess_branch_probability, NULL, 1 },"}, {"sha": "47b938b46d05ae94b5a75fd4bcf2726bd84fd14a", "filename": "gcc/reorg.c", "status": "modified", "additions": 31, "deletions": 51, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6", "patch": "@@ -131,15 +131,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"tree-pass.h\"\n \n-#ifdef DELAY_SLOTS\n-\n-#ifndef ANNUL_IFTRUE_SLOTS\n-#define eligible_for_annul_true(INSN, SLOTS, TRIAL, FLAGS) 0\n-#endif\n-#ifndef ANNUL_IFFALSE_SLOTS\n-#define eligible_for_annul_false(INSN, SLOTS, TRIAL, FLAGS) 0\n-#endif\n-\n \f\n /* First, some functions that were used before GCC got a control flow graph.\n    These functions are now only used here in reorg.c, and have therefore\n@@ -219,9 +210,6 @@ static void add_to_delay_list (rtx_insn *, vec<rtx_insn *> *);\n static rtx_insn *delete_from_delay_slot (rtx_insn *);\n static void delete_scheduled_jump (rtx_insn *);\n static void note_delay_statistics (int, int);\n-#if defined(ANNUL_IFFALSE_SLOTS) || defined(ANNUL_IFTRUE_SLOTS)\n-static void optimize_skip (rtx_jump_insn *, vec<rtx_insn *> *);\n-#endif\n static int get_jump_flags (const rtx_insn *, rtx);\n static int mostly_true_jump (rtx);\n static rtx get_branch_condition (const rtx_insn *, rtx);\n@@ -717,8 +705,6 @@ note_delay_statistics (int slots_filled, int index)\n   num_filled_delays[index][slots_filled][reorg_pass_number]++;\n }\n \f\n-#if defined(ANNUL_IFFALSE_SLOTS) || defined(ANNUL_IFTRUE_SLOTS)\n-\n /* Optimize the following cases:\n \n    1.  When a conditional branch skips over only one instruction,\n@@ -818,7 +804,6 @@ optimize_skip (rtx_jump_insn *insn, vec<rtx_insn *> *delay_list)\n       INSN_ANNULLED_BRANCH_P (insn) = 1;\n     }\n }\n-#endif\n \f\n /*  Encode and return branch direction and prediction information for\n     INSN assuming it will jump to LABEL.\n@@ -973,12 +958,12 @@ redirect_with_delay_slots_safe_p (rtx_insn *jump, rtx newlabel, rtx seq)\n   flags = get_jump_flags (jump, newlabel);\n   for (i = 1; i < pat->len (); i++)\n     if (! (\n-#ifdef ANNUL_IFFALSE_SLOTS\n+#if ANNUL_IFFALSE_SLOTS\n \t   (INSN_ANNULLED_BRANCH_P (jump)\n \t    && INSN_FROM_TARGET_P (pat->insn (i)))\n \t   ? eligible_for_annul_false (jump, i - 1, pat->insn (i), flags) :\n #endif\n-#ifdef ANNUL_IFTRUE_SLOTS\n+#if ANNUL_IFTRUE_SLOTS\n \t   (INSN_ANNULLED_BRANCH_P (jump)\n \t    && ! INSN_FROM_TARGET_P (XVECEXP (pat, 0, i)))\n \t   ? eligible_for_annul_true (jump, i - 1, pat->insn (i), flags) :\n@@ -1005,12 +990,12 @@ redirect_with_delay_list_safe_p (rtx_insn *jump, rtx newlabel,\n   unsigned int i = 0;\n   for (; i < delay_insns; i++)\n     if (! (\n-#ifdef ANNUL_IFFALSE_SLOTS\n+#if ANNUL_IFFALSE_SLOTS\n \t   (INSN_ANNULLED_BRANCH_P (jump)\n \t    && INSN_FROM_TARGET_P (delay_list[i]))\n \t   ? eligible_for_annul_false (jump, i, delay_list[i], flags) :\n #endif\n-#ifdef ANNUL_IFTRUE_SLOTS\n+#if ANNUL_IFTRUE_SLOTS\n \t   (INSN_ANNULLED_BRANCH_P (jump)\n \t    && ! INSN_FROM_TARGET_P (delay_list[i]))\n \t   ? eligible_for_annul_true (jump, i, delay_list[i], flags) :\n@@ -2096,8 +2081,8 @@ fill_simple_delay_slots (int non_jumps_p)\n       /* If all needed slots haven't been filled, we come here.  */\n \n       /* Try to optimize case of jumping around a single insn.  */\n-#if defined(ANNUL_IFFALSE_SLOTS) || defined(ANNUL_IFTRUE_SLOTS)\n-      if (slots_filled != slots_to_fill\n+      if ((ANNUL_IFTRUE_SLOTS || ANNUL_IFFALSE_SLOTS)\n+\t&& slots_filled != slots_to_fill\n \t  && delay_list.is_empty ()\n \t  && JUMP_P (insn)\n \t  && (condjump_p (insn) || condjump_in_parallel_p (insn))\n@@ -2107,7 +2092,6 @@ fill_simple_delay_slots (int non_jumps_p)\n \t  if (!delay_list.is_empty ())\n \t    slots_filled += 1;\n \t}\n-#endif\n \n       /* Try to get insns from beyond the insn needing the delay slot.\n \t These insns can neither set or reference resources set in insns being\n@@ -2494,13 +2478,8 @@ fill_slots_from_thread (rtx_jump_insn *insn, rtx condition,\n \t\tgoto winner;\n \t    }\n \t  else if (0\n-#ifdef ANNUL_IFTRUE_SLOTS\n-\t\t   || ! thread_if_true\n-#endif\n-#ifdef ANNUL_IFFALSE_SLOTS\n-\t\t   || thread_if_true\n-#endif\n-\t\t   )\n+\t\t   || (ANNUL_IFTRUE_SLOTS && ! thread_if_true)\n+\t\t   || (ANNUL_IFFALSE_SLOTS && thread_if_true))\n \t    {\n \t      old_trial = trial;\n \t      trial = try_split (pat, trial, 0);\n@@ -3611,13 +3590,13 @@ make_return_insns (rtx_insn *first)\n \t{\n \t  for (i = 1; i < XVECLEN (pat, 0); i++)\n \t    if (! (\n-#ifdef ANNUL_IFFALSE_SLOTS\n+#if ANNUL_IFFALSE_SLOTS\n \t\t   (INSN_ANNULLED_BRANCH_P (jump_insn)\n \t\t    && INSN_FROM_TARGET_P (pat->insn (i)))\n \t\t   ? eligible_for_annul_false (jump_insn, i - 1,\n \t\t\t\t\t       pat->insn (i), flags) :\n #endif\n-#ifdef ANNUL_IFTRUE_SLOTS\n+#if ANNUL_IFTRUE_SLOTS\n \t\t   (INSN_ANNULLED_BRANCH_P (jump_insn)\n \t\t    && ! INSN_FROM_TARGET_P (pat->insn (i)))\n \t\t   ? eligible_for_annul_true (jump_insn, i - 1,\n@@ -3852,21 +3831,24 @@ dbr_schedule (rtx_insn *first)\n \t    }\n \t}\n       fprintf (dump_file, \"\\n\");\n-#if defined (ANNUL_IFTRUE_SLOTS) || defined (ANNUL_IFFALSE_SLOTS)\n-      fprintf (dump_file, \";; Reorg annuls: \");\n-      need_comma = 0;\n-      for (j = 0; j < MAX_DELAY_HISTOGRAM + 1; j++)\n+\n+      if (ANNUL_IFTRUE_SLOTS || ANNUL_IFFALSE_SLOTS)\n \t{\n-\t  if (total_annul_slots[j])\n+\t  fprintf (dump_file, \";; Reorg annuls: \");\n+\t  need_comma = 0;\n+\t  for (j = 0; j < MAX_DELAY_HISTOGRAM + 1; j++)\n \t    {\n-\t      if (need_comma)\n-\t\tfprintf (dump_file, \", \");\n-\t      need_comma = 1;\n-\t      fprintf (dump_file, \"%d got %d delays\", total_annul_slots[j], j);\n+\t      if (total_annul_slots[j])\n+\t\t{\n+\t\t  if (need_comma)\n+\t\t    fprintf (dump_file, \", \");\n+\t\t  need_comma = 1;\n+\t\t  fprintf (dump_file, \"%d got %d delays\", total_annul_slots[j], j);\n+\t\t}\n \t    }\n+\t  fprintf (dump_file, \"\\n\");\n \t}\n-      fprintf (dump_file, \"\\n\");\n-#endif\n+\n       fprintf (dump_file, \"\\n\");\n     }\n \n@@ -3880,15 +3862,14 @@ dbr_schedule (rtx_insn *first)\n   free (uid_to_ruid);\n   crtl->dbr_scheduled_p = true;\n }\n-#endif /* DELAY_SLOTS */\n \f\n /* Run delay slot optimization.  */\n static unsigned int\n rest_of_handle_delay_slots (void)\n {\n-#ifdef DELAY_SLOTS\n-  dbr_schedule (get_insns ());\n-#endif\n+  if (DELAY_SLOTS)\n+    dbr_schedule (get_insns ());\n+\n   return 0;\n }\n \n@@ -3926,12 +3907,11 @@ class pass_delay_slots : public rtl_opt_pass\n bool\n pass_delay_slots::gate (function *)\n {\n-#ifdef DELAY_SLOTS\n   /* At -O0 dataflow info isn't updated after RA.  */\n-  return optimize > 0 && flag_delayed_branch && !crtl->dbr_scheduled_p;\n-#else\n-  return 0;\n-#endif\n+  if (DELAY_SLOTS)\n+    return optimize > 0 && flag_delayed_branch && !crtl->dbr_scheduled_p;\n+\n+  return false;\n }\n \n } // anon namespace"}, {"sha": "0083d81670159d8cc719ebd9b39d4a0e36ee1a48", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=e90bedf52c86a7b4e2e0a1f8a5a1450725cb95b6", "patch": "@@ -1317,10 +1317,8 @@ process_options (void)\n   if (flag_schedule_insns || flag_schedule_insns_after_reload)\n     warning (0, \"instruction scheduling not supported on this target machine\");\n #endif\n-#ifndef DELAY_SLOTS\n-  if (flag_delayed_branch)\n+  if (!DELAY_SLOTS && flag_delayed_branch)\n     warning (0, \"this target machine does not have delayed branches\");\n-#endif\n \n   user_label_prefix = USER_LABEL_PREFIX;\n   if (flag_leading_underscore != -1)"}]}