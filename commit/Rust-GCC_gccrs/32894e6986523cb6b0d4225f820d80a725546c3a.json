{"sha": "32894e6986523cb6b0d4225f820d80a725546c3a", "node_id": "C_kwDOANBUbNoAKDMyODk0ZTY5ODY1MjNjYjZiMGQ0MjI1ZjgyMGQ4MGE3MjU1NDZjM2E", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-21T12:41:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-21T12:41:52Z"}, "message": "Merge #1042\n\n1042: Parse reserved keywords as valid fragments identifiers r=CohenArthur a=CohenArthur\n\nPer the reference, macro fragments actually accept all identifiers, not\r\nNON_KEYWORD_IDENTIFIERS\r\n\r\nFixes #1013 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "5835b6f393524237bd007ad21d9651fa584c8809", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5835b6f393524237bd007ad21d9651fa584c8809"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32894e6986523cb6b0d4225f820d80a725546c3a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiOHKRCRBK7hj4Ov3rIwAAZMIIACKNKQJUDdDOlxcLf3Gd9Sbf\ndYSawVoGDKzBlhXIa+KsrD0FPZEi9lmQ/nFinc2fKodhXfWaCJMXbe+OF9o0rJ/M\nSieI3r9r9xbucY90w3lAUp9M3FFX9jTmojxGdMNWfUXEJh8jtc00j5/R0djweaBY\nT+7B2HaSgk79hO5QC3sE4JOCUVxHg402BZlyGOdzLm83bh4bsanN/SZ4651zxcnD\nhc6QvcB/GBcRgcD/08tVXB5lpAeNjuyWUamae0WwYOYxgiPv1i6wKhROJybt0Wlg\nXgm/V9dGTOXywXX7kPBW4zIKiCebl9LZ0qFLyRJ4OyBx2wqgWeMO3vy9tVWKKw4=\n=rQfJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 5835b6f393524237bd007ad21d9651fa584c8809\nparent 1bb9a29688ab4ddfec7f8d36ca2cee63c5f258d2\nparent 80d96902421579b2ca7458027a0003da0271b4de\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1647866512 +0000\ncommitter GitHub <noreply@github.com> 1647866512 +0000\n\nMerge #1042\n\n1042: Parse reserved keywords as valid fragments identifiers r=CohenArthur a=CohenArthur\n\nPer the reference, macro fragments actually accept all identifiers, not\r\nNON_KEYWORD_IDENTIFIERS\r\n\r\nFixes #1013 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32894e6986523cb6b0d4225f820d80a725546c3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32894e6986523cb6b0d4225f820d80a725546c3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32894e6986523cb6b0d4225f820d80a725546c3a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bb9a29688ab4ddfec7f8d36ca2cee63c5f258d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bb9a29688ab4ddfec7f8d36ca2cee63c5f258d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bb9a29688ab4ddfec7f8d36ca2cee63c5f258d2"}, {"sha": "80d96902421579b2ca7458027a0003da0271b4de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80d96902421579b2ca7458027a0003da0271b4de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80d96902421579b2ca7458027a0003da0271b4de"}], "stats": {"total": 62, "additions": 59, "deletions": 3}, "files": [{"sha": "644e7898a70bf67c0ed9084118b1a70c58059923", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 59, "deletions": 3, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32894e6986523cb6b0d4225f820d80a725546c3a/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32894e6986523cb6b0d4225f820d80a725546c3a/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=32894e6986523cb6b0d4225f820d80a725546c3a", "patch": "@@ -1832,6 +1832,56 @@ Parser<ManagedTokenSource>::parse_macro_match ()\n \tconst_TokenPtr t2 = lexer.peek_token (1);\n \tswitch (t2->get_id ())\n \t  {\n+\t  case ABSTRACT:\n+\t  case AS:\n+\t  case ASYNC:\n+\t  case BECOME:\n+\t  case BOX:\n+\t  case BREAK:\n+\t  case CONST:\n+\t  case CONTINUE:\n+\t  case CRATE:\n+\t  case DO:\n+\t  case DYN:\n+\t  case ELSE:\n+\t  case ENUM_TOK:\n+\t  case EXTERN_TOK:\n+\t  case FALSE_LITERAL:\n+\t  case FINAL_TOK:\n+\t  case FN_TOK:\n+\t  case FOR:\n+\t  case IF:\n+\t  case IMPL:\n+\t  case IN:\n+\t  case LET:\n+\t  case LOOP:\n+\t  case MACRO:\n+\t  case MATCH_TOK:\n+\t  case MOD:\n+\t  case MOVE:\n+\t  case MUT:\n+\t  case OVERRIDE_TOK:\n+\t  case PRIV:\n+\t  case PUB:\n+\t  case REF:\n+\t  case RETURN_TOK:\n+\t  case SELF_ALIAS:\n+\t  case SELF:\n+\t  case STATIC_TOK:\n+\t  case STRUCT_TOK:\n+\t  case SUPER:\n+\t  case TRAIT:\n+\t  case TRUE_LITERAL:\n+\t  case TRY:\n+\t  case TYPE:\n+\t  case TYPEOF:\n+\t  case UNSAFE:\n+\t  case UNSIZED:\n+\t  case USE:\n+\t  case VIRTUAL:\n+\t  case WHERE:\n+\t  case WHILE:\n+\t  case YIELD:\n \t  case IDENTIFIER:\n \t    // macro fragment\n \t    return parse_macro_match_fragment ();\n@@ -1877,16 +1927,22 @@ Parser<ManagedTokenSource>::parse_macro_match_fragment ()\n   Location fragment_locus = lexer.peek_token ()->get_locus ();\n   skip_token (DOLLAR_SIGN);\n \n-  const_TokenPtr ident_tok = expect_token (IDENTIFIER);\n-  if (ident_tok == nullptr)\n+  Identifier ident = \"\";\n+  auto identifier = lexer.peek_token ();\n+  if (identifier->has_str ())\n+    ident = identifier->get_str ();\n+  else\n+    ident = std::string (token_id_to_str (identifier->get_id ()));\n+\n+  if (ident.empty ())\n     {\n       Error error (lexer.peek_token ()->get_locus (),\n \t\t   \"missing identifier in macro match fragment\");\n       add_error (std::move (error));\n \n       return nullptr;\n     }\n-  Identifier ident = ident_tok->get_str ();\n+  skip_token (identifier->get_id ());\n \n   if (!skip_token (COLON))\n     {"}]}