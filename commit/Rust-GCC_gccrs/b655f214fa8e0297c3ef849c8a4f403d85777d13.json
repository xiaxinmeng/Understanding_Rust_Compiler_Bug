{"sha": "b655f214fa8e0297c3ef849c8a4f403d85777d13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY1NWYyMTRmYThlMDI5N2MzZWY4NDljOGE0ZjQwM2Q4NTc3N2QxMw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-05-21T17:23:59Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-05-21T17:23:59Z"}, "message": "re PR c++/27210 (ICE on c++ template)\n\n\tPR c++/27210\n\t* cp-tree.h (cp_save_expr): New function.\n\t* init.c (build_new): Correct logic for zero-element array\n\twarning.  Use cp_save_expr.\n\t* tree.c (cp_save_expr): New function.\n\tPR c++/27210\n\t* g++.dg/warn/new1.C: New test.\n\t* g++.dg/template/new5.C: Likewise.\n\nFrom-SVN: r113958", "tree": {"sha": "43334d7f67ff997edd619b6c7ddc92b7245fdfaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43334d7f67ff997edd619b6c7ddc92b7245fdfaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b655f214fa8e0297c3ef849c8a4f403d85777d13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b655f214fa8e0297c3ef849c8a4f403d85777d13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b655f214fa8e0297c3ef849c8a4f403d85777d13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b655f214fa8e0297c3ef849c8a4f403d85777d13/comments", "author": null, "committer": null, "parents": [{"sha": "357f19a0db6794478e915ad7b1e01b7efe52d536", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/357f19a0db6794478e915ad7b1e01b7efe52d536", "html_url": "https://github.com/Rust-GCC/gccrs/commit/357f19a0db6794478e915ad7b1e01b7efe52d536"}], "stats": {"total": 60, "additions": 57, "deletions": 3}, "files": [{"sha": "251d21a04701dc6b0ec306d04150082af2bf7c1c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b655f214fa8e0297c3ef849c8a4f403d85777d13/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b655f214fa8e0297c3ef849c8a4f403d85777d13/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b655f214fa8e0297c3ef849c8a4f403d85777d13", "patch": "@@ -1,3 +1,11 @@\n+2006-05-21  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/27210\n+\t* cp-tree.h (cp_save_expr): New function.\n+\t* init.c (build_new): Correct logic for zero-element array\n+\twarning.  Use cp_save_expr.\n+\t* tree.c (cp_save_expr): New function.\n+\n 2006-05-21  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/27398"}, {"sha": "044fe2641c7dba49b9b040da06abff05d8b8b13f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b655f214fa8e0297c3ef849c8a4f403d85777d13/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b655f214fa8e0297c3ef849c8a4f403d85777d13/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b655f214fa8e0297c3ef849c8a4f403d85777d13", "patch": "@@ -4336,6 +4336,7 @@ extern int cp_auto_var_in_fn_p\t\t\t(tree,tree);\n extern tree fold_if_not_in_template\t\t(tree);\n extern tree rvalue                              (tree);\n extern tree convert_bitfield_to_declared_type   (tree);\n+extern tree cp_save_expr                        (tree);\n    \n /* in typeck.c */\n extern int string_conv_p\t\t\t(tree, tree, int);"}, {"sha": "533f9fb0a28d49e05a17dc20dfb0b37320f616b0", "filename": "gcc/cp/init.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b655f214fa8e0297c3ef849c8a4f403d85777d13/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b655f214fa8e0297c3ef849c8a4f403d85777d13/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=b655f214fa8e0297c3ef849c8a4f403d85777d13", "patch": "@@ -2088,9 +2088,22 @@ build_new (tree placement, tree type, tree nelts, tree init,\n     {\n       if (!build_expr_type_conversion (WANT_INT | WANT_ENUM, nelts, false))\n \tpedwarn (\"size in array new must have integral type\");\n-      nelts = save_expr (cp_convert (sizetype, nelts));\n-      if (nelts == integer_zero_node)\n-\twarning (0, \"zero size array reserves no space\");\n+      nelts = cp_save_expr (cp_convert (sizetype, nelts));\n+      /* It is valid to allocate a zero-element array:\n+\n+\t   [expr.new]\n+\n+\t   When the value of the expression in a direct-new-declarator\n+\t   is zero, the allocation function is called to allocate an\n+\t   array with no elements.  The pointer returned by the\n+\t   new-expression is non-null.  [Note: If the library allocation\n+\t   function is called, the pointer returned is distinct from the\n+\t   pointer to any other object.]  \n+\n+\t However, that is not generally useful, so we issue a\n+\t warning.  */\n+      if (integer_zerop (nelts))\n+\twarning (0, \"allocating zero-element array\");\n     }\n \n   /* ``A reference cannot be created by the new operator.  A reference"}, {"sha": "fdf491ae55b2ff8bbfa2f5457bdeef188d8a981f", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b655f214fa8e0297c3ef849c8a4f403d85777d13/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b655f214fa8e0297c3ef849c8a4f403d85777d13/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=b655f214fa8e0297c3ef849c8a4f403d85777d13", "patch": "@@ -2083,6 +2083,20 @@ cp_auto_var_in_fn_p (tree var, tree fn)\n \t  && nonstatic_local_decl_p (var));\n }\n \n+/* Like save_expr, but for C++.  */\n+\n+tree\n+cp_save_expr (tree expr)\n+{\n+  /* There is no reason to create a SAVE_EXPR within a template; if\n+     needed, we can create the SAVE_EXPR when instantiating the\n+     template.  Furthermore, the middle-end cannot handle C++-specific\n+     tree codes.  */\n+  if (processing_template_decl)\n+    return expr;\n+  return save_expr (expr);\n+}\n+\n /* Initialize tree.c.  */\n \n void"}, {"sha": "b3d146d775bcd320d99373fc237b55589e846a64", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b655f214fa8e0297c3ef849c8a4f403d85777d13/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b655f214fa8e0297c3ef849c8a4f403d85777d13/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b655f214fa8e0297c3ef849c8a4f403d85777d13", "patch": "@@ -1,3 +1,9 @@\n+2006-05-21  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/27210\n+\t* g++.dg/warn/new1.C: New test.\n+\t* g++.dg/template/new5.C: Likewise.\n+\n 2006-05-21  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.target/i386/20060512-1.c: Add -msse2 command line option."}, {"sha": "a2c560181cfac0230cc3448024b365829d4b2949", "filename": "gcc/testsuite/g++.dg/template/new5.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b655f214fa8e0297c3ef849c8a4f403d85777d13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnew5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b655f214fa8e0297c3ef849c8a4f403d85777d13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnew5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnew5.C?ref=b655f214fa8e0297c3ef849c8a4f403d85777d13", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/27210\n+\n+template <class foo> class junk {\n+  void bar(int a)\n+  {\n+    unsigned char *c = new unsigned char[a*sizeof(foo)];\n+  }\n+};\n+"}, {"sha": "6b78368aaecf68bc5e6b326081353fe4f4027f88", "filename": "gcc/testsuite/g++.dg/warn/new1.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b655f214fa8e0297c3ef849c8a4f403d85777d13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnew1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b655f214fa8e0297c3ef849c8a4f403d85777d13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnew1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnew1.C?ref=b655f214fa8e0297c3ef849c8a4f403d85777d13", "patch": "@@ -0,0 +1,3 @@\n+void f() {\n+  new int[0]; // { dg-warning \"zero\" }\n+}"}]}