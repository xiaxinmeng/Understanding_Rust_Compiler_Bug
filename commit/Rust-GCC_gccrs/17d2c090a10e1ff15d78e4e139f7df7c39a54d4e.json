{"sha": "17d2c090a10e1ff15d78e4e139f7df7c39a54d4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdkMmMwOTBhMTBlMWZmMTVkNzhlNGUxMzlmN2RmN2MzOWE1NGQ0ZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-04-23T14:08:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-04-23T14:08:25Z"}, "message": "re PR tree-optimization/27799 (adding unused char field inhibits optimization)\n\n2008-04-23  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/27799\n\tPR tree-optimization/32921\n\tPR tree-optimization/32624\n\t* tree-ssa-structalias.c (merge_smts_into): Only merge the\n\tSMTs aliases and the tag itself into the solution.\n\t* tree-ssa-alias.c (compute_flow_sensitive_aliasing): Do not\n\tmerge the points-to solution back into the SMT aliases.\n\t(may_alias_p): Use alias_set_subset_of instead of\n\taliases_conflict_p.  A pointer which points to\n\tmemory with alias set zero may access any variable.\n\n\t* gcc.dg/tree-ssa/pr27799.c: New testcase.\n\t* gcc.dg/tree-ssa/20030807-7.c: Remove xfail, scan vrp dump.\n\nFrom-SVN: r134598", "tree": {"sha": "1b094aa3273abc829435f2f6a7c4089e8476d961", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b094aa3273abc829435f2f6a7c4089e8476d961"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17d2c090a10e1ff15d78e4e139f7df7c39a54d4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d2c090a10e1ff15d78e4e139f7df7c39a54d4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17d2c090a10e1ff15d78e4e139f7df7c39a54d4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d2c090a10e1ff15d78e4e139f7df7c39a54d4e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7a512beff448f28fc2f9f192e19e30cbf971eba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a512beff448f28fc2f9f192e19e30cbf971eba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7a512beff448f28fc2f9f192e19e30cbf971eba"}], "stats": {"total": 99, "additions": 65, "deletions": 34}, "files": [{"sha": "4fdb84928c517a0bd9e653a85cba8b268ff4965d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d2c090a10e1ff15d78e4e139f7df7c39a54d4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d2c090a10e1ff15d78e4e139f7df7c39a54d4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17d2c090a10e1ff15d78e4e139f7df7c39a54d4e", "patch": "@@ -1,3 +1,16 @@\n+2008-04-23  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/27799\n+\tPR tree-optimization/32921\n+\tPR tree-optimization/32624\n+\t* tree-ssa-structalias.c (merge_smts_into): Only merge the\n+\tSMTs aliases and the tag itself into the solution.\n+\t* tree-ssa-alias.c (compute_flow_sensitive_aliasing): Do not\n+\tmerge the points-to solution back into the SMT aliases.\n+\t(may_alias_p): Use alias_set_subset_of instead of\n+\taliases_conflict_p.  A pointer which points to\n+\tmemory with alias set zero may access any variable.\n+\n 2008-04-23  Richard Guenther  <rguenther@suse.de>\n \n \t* alias.c (alias_set_subset_of): Correctly handle asking"}, {"sha": "82b6042f877014a963b0e05319ad52e29954e693", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d2c090a10e1ff15d78e4e139f7df7c39a54d4e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d2c090a10e1ff15d78e4e139f7df7c39a54d4e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=17d2c090a10e1ff15d78e4e139f7df7c39a54d4e", "patch": "@@ -1,3 +1,11 @@\n+2008-04-23  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/27799\n+\tPR tree-optimization/32921\n+\tPR tree-optimization/32624\n+\t* gcc.dg/tree-ssa/pr27799.c: New testcase.\n+\t* gcc.dg/tree-ssa/20030807-7.c: Remove xfail, scan vrp dump.\n+\n 2008-04-23  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/36021"}, {"sha": "f9f5fb798efbb9d7ab59f82f9a14a59905791d9f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030807-7.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d2c090a10e1ff15d78e4e139f7df7c39a54d4e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d2c090a10e1ff15d78e4e139f7df7c39a54d4e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-7.c?ref=17d2c090a10e1ff15d78e4e139f7df7c39a54d4e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n   \n extern void abort (void);\n \n@@ -32,7 +32,6 @@ simplify_condition (cond_p)\n   c_simplify_stmt (&decl);\n }\n \n-/* There should be exactly one IF conditional.  TBAA is not able to \n-   determine that 'decl' and 'cond' can't alias.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 1 \"dom3\" { xfail *-*-* } } } */\n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* There should be exactly one IF conditional.  */\n+/* { dg-final { scan-tree-dump-times \"if \" 1 \"vrp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp1\" } } */"}, {"sha": "de09a40e08b34230ae9d088bd9c144cebb4db48b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr27799.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d2c090a10e1ff15d78e4e139f7df7c39a54d4e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr27799.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d2c090a10e1ff15d78e4e139f7df7c39a54d4e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr27799.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr27799.c?ref=17d2c090a10e1ff15d78e4e139f7df7c39a54d4e", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do link } */\n+/* { dg-options \"-O2\" } */\n+\n+struct X { double m; int x; };\n+struct Y { int y; short d; };\n+struct YY { int y; short d; char c; };\n+\n+extern void link_error (void);\n+\n+int foo(struct X *x,  struct Y *y)\n+{\n+  x->x =  0;\n+  y->y =  1;\n+  if (x->x != 0)\n+    link_error ();\n+}\n+\n+int foo_no(struct X *x,  struct YY *y)\n+{\n+  x->x =  0;\n+  y->y =  1;\n+  if (x->x != 0)\n+    link_error ();\n+}\n+\n+int main() {}"}, {"sha": "ecc827ab9e9ddb31012eece8a184c2632849870b", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d2c090a10e1ff15d78e4e139f7df7c39a54d4e/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d2c090a10e1ff15d78e4e139f7df7c39a54d4e/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=17d2c090a10e1ff15d78e4e139f7df7c39a54d4e", "patch": "@@ -2354,26 +2354,14 @@ compute_flow_sensitive_aliasing (struct alias_info *ai)\n   for (i = 0; VEC_iterate (tree, ai->processed_ptrs, i, ptr); i++)\n     {\n       struct ptr_info_def *pi = SSA_NAME_PTR_INFO (ptr);\n-      tree tag = symbol_mem_tag (SSA_NAME_VAR (ptr));\n \n       /* Set up aliasing information for PTR's name memory tag (if it has\n \t one).  Note that only pointers that have been dereferenced will\n \t have a name memory tag.  */\n       if (pi->name_mem_tag && pi->pt_vars)\n \t{\n \t  if (!bitmap_empty_p (pi->pt_vars))\n-\t    {\n-\t      union_alias_set_into (pi->name_mem_tag, pi->pt_vars);\n-\t      union_alias_set_into (tag, pi->pt_vars);\n-\t      bitmap_clear_bit (MTAG_ALIASES (tag), DECL_UID (tag));\n-\t    \n-\t      /* It may be the case that this the tag uid was the only\n-\t\t bit we had set in the aliases list, and in this case,\n-\t\t we don't want to keep an empty bitmap, as this\n-\t\t asserts in tree-ssa-operands.c .  */\n-\t      if (bitmap_empty_p (MTAG_ALIASES (tag)))\n-\t\tBITMAP_FREE (MTAG_ALIASES (tag));\n-\t    }\n+\t    union_alias_set_into (pi->name_mem_tag, pi->pt_vars);\n \t}\n     }\n   timevar_pop (TV_FLOW_SENSITIVE);\n@@ -2860,8 +2848,19 @@ may_alias_p (tree ptr, alias_set_type mem_alias_set,\n     {\n       alias_stats.tbaa_queries++;\n \n+      /* If the pointed to memory has alias set zero or the pointer\n+\t is ref-all, the MEM can alias VAR.  */\n+      if (mem_alias_set == 0\n+\t  || PTR_IS_REF_ALL (ptr))\n+\t{\n+\t  alias_stats.alias_mayalias++;\n+\t  alias_stats.tbaa_resolved++;\n+\t  return true;\n+\t}\n+\n       /* If the alias sets don't conflict then MEM cannot alias VAR.  */\n-      if (!alias_sets_conflict_p (mem_alias_set, var_alias_set))\n+      if (mem_alias_set != var_alias_set\n+\t  && !alias_set_subset_of (mem_alias_set, var_alias_set))\n \t{\n \t  alias_stats.alias_noalias++;\n \t  alias_stats.tbaa_resolved++;"}, {"sha": "9a8afb70a2b909832f36d23675de52e783b03f66", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d2c090a10e1ff15d78e4e139f7df7c39a54d4e/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d2c090a10e1ff15d78e4e139f7df7c39a54d4e/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=17d2c090a10e1ff15d78e4e139f7df7c39a54d4e", "patch": "@@ -4861,8 +4861,6 @@ set_used_smts (void)\n static void\n merge_smts_into (tree p, bitmap solution)\n {\n-  unsigned int i;\n-  bitmap_iterator bi;\n   tree smt;\n   bitmap aliases;\n   tree var = p;\n@@ -4873,20 +4871,8 @@ merge_smts_into (tree p, bitmap solution)\n   smt = var_ann (var)->symbol_mem_tag;\n   if (smt)\n     {\n-      alias_set_type smtset = get_alias_set (TREE_TYPE (smt));\n-\n-      /* Need to set the SMT subsets first before this\n-\t will work properly.  */\n+      /* The smt itself isn't included in its aliases.  */\n       bitmap_set_bit (solution, DECL_UID (smt));\n-      EXECUTE_IF_SET_IN_BITMAP (used_smts, 0, i, bi)\n-\t{\n-\t  tree newsmt = referenced_var (i);\n-\t  tree newsmttype = TREE_TYPE (newsmt);\n-\n-\t  if (alias_set_subset_of (get_alias_set (newsmttype),\n-\t\t\t\t   smtset))\n-\t    bitmap_set_bit (solution, i);\n-\t}\n \n       aliases = MTAG_ALIASES (smt);\n       if (aliases)"}]}