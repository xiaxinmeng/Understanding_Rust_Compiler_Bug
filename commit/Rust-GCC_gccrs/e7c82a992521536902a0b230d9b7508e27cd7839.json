{"sha": "e7c82a992521536902a0b230d9b7508e27cd7839", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdjODJhOTkyNTIxNTM2OTAyYTBiMjMwZDliNzUwOGUyN2NkNzgzOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-09-27T07:29:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-09-27T07:29:21Z"}, "message": "rtl.h (const_tiny_rtx): Change into array of 4 x MAX_MACHINE_MODE from 3 x MAX_MACHINE_MODE.\n\n\t* rtl.h (const_tiny_rtx): Change into array of 4 x MAX_MACHINE_MODE\n\tfrom 3 x MAX_MACHINE_MODE.\n\t(CONSTM1_RTX): Define.\n\t* emit-rtl.c (const_tiny_rtx): Change into array of 4 x MAX_MACHINE_MODE\n        from 3 x MAX_MACHINE_MODE.\n\t(gen_rtx_CONST_VECTOR): Use CONSTM1_RTX if all inner constants are\n\tCONSTM1_RTX.\n\t(init_emit_once): Initialize CONSTM1_RTX for MODE_INT and\n\tMODE_VECTOR_INT modes.\n\t* simplify-rtx.c (simplify_binary_operation_1) <case IOR, XOR, AND>:\n\tOptimize if one operand is CONSTM1_RTX.\n\t* config/i386/i386.c (ix86_expand_sse_movcc): Optimize mask ? -1 : x\n\tinto mask | x.\n\nFrom-SVN: r179238", "tree": {"sha": "4aa113c1bf28b09947ed8356c4d508a5ad73380f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4aa113c1bf28b09947ed8356c4d508a5ad73380f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7c82a992521536902a0b230d9b7508e27cd7839", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c82a992521536902a0b230d9b7508e27cd7839", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7c82a992521536902a0b230d9b7508e27cd7839", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c82a992521536902a0b230d9b7508e27cd7839/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "16fa5e238ac913a6713582d7d93e9289d1ac802a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16fa5e238ac913a6713582d7d93e9289d1ac802a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16fa5e238ac913a6713582d7d93e9289d1ac802a"}], "stats": {"total": 54, "additions": 43, "deletions": 11}, "files": [{"sha": "52c2e9b1a6567513a75c76903bc39a946d2b845f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c82a992521536902a0b230d9b7508e27cd7839/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c82a992521536902a0b230d9b7508e27cd7839/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7c82a992521536902a0b230d9b7508e27cd7839", "patch": "@@ -1,3 +1,19 @@\n+2011-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* rtl.h (const_tiny_rtx): Change into array of 4 x MAX_MACHINE_MODE\n+\tfrom 3 x MAX_MACHINE_MODE.\n+\t(CONSTM1_RTX): Define.\n+\t* emit-rtl.c (const_tiny_rtx): Change into array of 4 x MAX_MACHINE_MODE\n+        from 3 x MAX_MACHINE_MODE.\n+\t(gen_rtx_CONST_VECTOR): Use CONSTM1_RTX if all inner constants are\n+\tCONSTM1_RTX.\n+\t(init_emit_once): Initialize CONSTM1_RTX for MODE_INT and\n+\tMODE_VECTOR_INT modes.\n+\t* simplify-rtx.c (simplify_binary_operation_1) <case IOR, XOR, AND>:\n+\tOptimize if one operand is CONSTM1_RTX.\n+\t* config/i386/i386.c (ix86_expand_sse_movcc): Optimize mask ? -1 : x\n+\tinto mask | x.\n+\n 2011-09-26  David S. Miller  <davem@davemloft.net>\n \n \t* config/sparc/sparc.md (edge{8,16,32}{,l}): Return Pmode."}, {"sha": "119dc9b8b4cc895fa0736acc11f5798f2ed64d16", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c82a992521536902a0b230d9b7508e27cd7839/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c82a992521536902a0b230d9b7508e27cd7839/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e7c82a992521536902a0b230d9b7508e27cd7839", "patch": "@@ -18903,6 +18903,12 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n       x = gen_rtx_AND (mode, x, op_false);\n       emit_insn (gen_rtx_SET (VOIDmode, dest, x));\n     }\n+  else if (INTEGRAL_MODE_P (mode) && op_true == CONSTM1_RTX (mode))\n+    {\n+      op_false = force_reg (mode, op_false);\n+      x = gen_rtx_IOR (mode, cmp, op_false);\n+      emit_insn (gen_rtx_SET (VOIDmode, dest, x));\n+    }\n   else if (TARGET_XOP)\n     {\n       op_true = force_reg (mode, op_true);"}, {"sha": "dae7669297aba9a2cffe203222524b1729180042", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c82a992521536902a0b230d9b7508e27cd7839/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c82a992521536902a0b230d9b7508e27cd7839/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=e7c82a992521536902a0b230d9b7508e27cd7839", "patch": "@@ -93,9 +93,10 @@ static GTY(()) int label_num = 1;\n \n /* We record floating-point CONST_DOUBLEs in each floating-point mode for\n    the values of 0, 1, and 2.  For the integer entries and VOIDmode, we\n-   record a copy of const[012]_rtx.  */\n+   record a copy of const[012]_rtx and constm1_rtx.  CONSTM1_RTX\n+   is set only for MODE_INT and MODE_VECTOR_INT modes.  */\n \n-rtx const_tiny_rtx[3][(int) MAX_MACHINE_MODE];\n+rtx const_tiny_rtx[4][(int) MAX_MACHINE_MODE];\n \n rtx const_true_rtx;\n \n@@ -5514,6 +5515,8 @@ gen_rtx_CONST_VECTOR (enum machine_mode mode, rtvec v)\n \treturn CONST0_RTX (mode);\n       else if (x == CONST1_RTX (inner))\n \treturn CONST1_RTX (mode);\n+      else if (x == CONSTM1_RTX (inner))\n+\treturn CONSTM1_RTX (mode);\n     }\n \n   return gen_rtx_raw_CONST_VECTOR (mode, v);\n@@ -5674,7 +5677,7 @@ init_emit_once (void)\n   dconsthalf = dconst1;\n   SET_REAL_EXP (&dconsthalf, REAL_EXP (&dconsthalf) - 1);\n \n-  for (i = 0; i < (int) ARRAY_SIZE (const_tiny_rtx); i++)\n+  for (i = 0; i < 3; i++)\n     {\n       const REAL_VALUE_TYPE *const r =\n \t(i == 0 ? &dconst0 : i == 1 ? &dconst1 : &dconst2);\n@@ -5704,6 +5707,13 @@ init_emit_once (void)\n \tconst_tiny_rtx[i][(int) mode] = GEN_INT (i);\n     }\n \n+  const_tiny_rtx[3][(int) VOIDmode] = constm1_rtx;\n+\n+  for (mode = GET_CLASS_NARROWEST_MODE (MODE_INT);\n+       mode != VOIDmode;\n+       mode = GET_MODE_WIDER_MODE (mode))\n+    const_tiny_rtx[3][(int) mode] = constm1_rtx;\n+\n   for (mode = GET_CLASS_NARROWEST_MODE (MODE_COMPLEX_INT);\n        mode != VOIDmode;\n        mode = GET_MODE_WIDER_MODE (mode))\n@@ -5726,6 +5736,7 @@ init_emit_once (void)\n     {\n       const_tiny_rtx[0][(int) mode] = gen_const_vector (mode, 0);\n       const_tiny_rtx[1][(int) mode] = gen_const_vector (mode, 1);\n+      const_tiny_rtx[3][(int) mode] = gen_const_vector (mode, 3);\n     }\n \n   for (mode = GET_CLASS_NARROWEST_MODE (MODE_VECTOR_FLOAT);"}, {"sha": "567aff9366843bef448a54802a546c95877b5264", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c82a992521536902a0b230d9b7508e27cd7839/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c82a992521536902a0b230d9b7508e27cd7839/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=e7c82a992521536902a0b230d9b7508e27cd7839", "patch": "@@ -2074,17 +2074,18 @@ extern GTY(()) rtx const_int_rtx[MAX_SAVED_CONST_INT * 2 + 1];\n #define constm1_rtx\t(const_int_rtx[MAX_SAVED_CONST_INT-1])\n extern GTY(()) rtx const_true_rtx;\n \n-extern GTY(()) rtx const_tiny_rtx[3][(int) MAX_MACHINE_MODE];\n+extern GTY(()) rtx const_tiny_rtx[4][(int) MAX_MACHINE_MODE];\n \n /* Returns a constant 0 rtx in mode MODE.  Integer modes are treated the\n    same as VOIDmode.  */\n \n #define CONST0_RTX(MODE) (const_tiny_rtx[0][(int) (MODE)])\n \n-/* Likewise, for the constants 1 and 2.  */\n+/* Likewise, for the constants 1 and 2 and -1.  */\n \n #define CONST1_RTX(MODE) (const_tiny_rtx[1][(int) (MODE)])\n #define CONST2_RTX(MODE) (const_tiny_rtx[2][(int) (MODE)])\n+#define CONSTM1_RTX(MODE) (const_tiny_rtx[3][(int) (MODE)])\n \n /* If HARD_FRAME_POINTER_REGNUM is defined, then a special dummy reg\n    is used to represent the frame pointer.  This is because the"}, {"sha": "130161698596a46d41b2d5b4a9b5c56a00b10d92", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c82a992521536902a0b230d9b7508e27cd7839/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c82a992521536902a0b230d9b7508e27cd7839/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=e7c82a992521536902a0b230d9b7508e27cd7839", "patch": "@@ -2431,9 +2431,7 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n     case IOR:\n       if (trueop1 == CONST0_RTX (mode))\n \treturn op0;\n-      if (CONST_INT_P (trueop1)\n-\t  && ((UINTVAL (trueop1) & GET_MODE_MASK (mode))\n-\t      == GET_MODE_MASK (mode)))\n+      if (INTEGRAL_MODE_P (mode) && trueop1 == CONSTM1_RTX (mode))\n \treturn op1;\n       if (rtx_equal_p (trueop0, trueop1) && ! side_effects_p (op0))\n \treturn op0;\n@@ -2573,9 +2571,7 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n     case XOR:\n       if (trueop1 == CONST0_RTX (mode))\n \treturn op0;\n-      if (CONST_INT_P (trueop1)\n-\t  && ((UINTVAL (trueop1) & GET_MODE_MASK (mode))\n-\t      == GET_MODE_MASK (mode)))\n+      if (INTEGRAL_MODE_P (mode) && trueop1 == CONSTM1_RTX (mode))\n \treturn simplify_gen_unary (NOT, mode, op0, mode);\n       if (rtx_equal_p (trueop0, trueop1)\n \t  && ! side_effects_p (op0)\n@@ -2721,6 +2717,8 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n     case AND:\n       if (trueop1 == CONST0_RTX (mode) && ! side_effects_p (op0))\n \treturn trueop1;\n+      if (INTEGRAL_MODE_P (mode) && trueop1 == CONSTM1_RTX (mode))\n+\treturn op0;\n       if (HWI_COMPUTABLE_MODE_P (mode))\n \t{\n \t  HOST_WIDE_INT nzop0 = nonzero_bits (trueop0, mode);"}]}