{"sha": "c5a0818e683e9bf93b3edfce46333ccac054b21f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVhMDgxOGU2ODNlOWJmOTNiM2VkZmNlNDYzMzNjY2FjMDU0YjIxZg==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2011-11-07T22:21:54Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2011-11-07T22:21:54Z"}, "message": "re PR libfortran/49188 (Mismatch between -fsign-zero documentation and formatted output)\n\n\tPR libfortran/49188\n\tPR libfortran/49336\n\t* invoke.texi: Fix documentation of fsign-zero option. Remove\n\tcontractions.\n\t* intrinsic.texi: Fix ATAN2 documentation for signed zeros.\n\tRemove contractions.\n\t* gfortran.texi: Remove contractions.\n\nFrom-SVN: r181127", "tree": {"sha": "f00079670915923b6879cb49ded2ca0057a4ec87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f00079670915923b6879cb49ded2ca0057a4ec87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5a0818e683e9bf93b3edfce46333ccac054b21f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5a0818e683e9bf93b3edfce46333ccac054b21f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5a0818e683e9bf93b3edfce46333ccac054b21f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5a0818e683e9bf93b3edfce46333ccac054b21f/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "744bbef1e1044b510d7ff90313b25a07c6c794ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/744bbef1e1044b510d7ff90313b25a07c6c794ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/744bbef1e1044b510d7ff90313b25a07c6c794ab"}], "stats": {"total": 68, "additions": 40, "deletions": 28}, "files": [{"sha": "0238c30f197a18f6f6c7c965dcac2b15d50941f8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5a0818e683e9bf93b3edfce46333ccac054b21f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5a0818e683e9bf93b3edfce46333ccac054b21f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c5a0818e683e9bf93b3edfce46333ccac054b21f", "patch": "@@ -1,3 +1,13 @@\n+2011-11-07  Fran\u00e7ois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR libfortran/49188\n+\tPR libfortran/49336\n+\t* invoke.texi: Fix documentation of fsign-zero option. Remove\n+\tcontractions.\n+\t* intrinsic.texi: Fix ATAN2 documentation for signed zeros.\n+\tRemove contractions.\n+\t* gfortran.texi: Remove contractions.\n+\n 2011-11-07  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/50919"}, {"sha": "6a1c92b8da5b2613c7520de94af1fe654ca36c7b", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5a0818e683e9bf93b3edfce46333ccac054b21f/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5a0818e683e9bf93b3edfce46333ccac054b21f/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=c5a0818e683e9bf93b3edfce46333ccac054b21f", "patch": "@@ -222,7 +222,7 @@ compiler.\n The GNU Fortran compiler front end was\n designed initially as a free replacement for,\n or alternative to, the unix @command{f95} command;\n-@command{gfortran} is the command you'll use to invoke the compiler.\n+@command{gfortran} is the command you will use to invoke the compiler.\n \n @menu\n * About GNU Fortran::    What you should know about the GNU Fortran compiler.\n@@ -261,7 +261,7 @@ place.  The result after compilation of a program is\n @dfn{machine code},\n code designed to be efficiently translated and processed\n by a machine such as your computer.\n-Humans usually aren't as good writing machine code\n+Humans usually are not as good writing machine code\n as they are at writing Fortran (or C++, Ada, or Java),\n because it is easy to make tiny mistakes writing machine code.\n \n@@ -580,8 +580,8 @@ Malformed environment variables are silently ignored.\n * GFORTRAN_STDOUT_UNIT:: Unit number for standard output\n * GFORTRAN_STDERR_UNIT:: Unit number for standard error\n * GFORTRAN_TMPDIR:: Directory for scratch files\n-* GFORTRAN_UNBUFFERED_ALL:: Don't buffer I/O for all units.\n-* GFORTRAN_UNBUFFERED_PRECONNECTED:: Don't buffer I/O for preconnected units.\n+* GFORTRAN_UNBUFFERED_ALL:: Do not buffer I/O for all units.\n+* GFORTRAN_UNBUFFERED_PRECONNECTED:: Do not buffer I/O for preconnected units.\n * GFORTRAN_SHOW_LOCUS::  Show location for runtime errors\n * GFORTRAN_OPTIONAL_PLUS:: Print leading + where permitted\n * GFORTRAN_DEFAULT_RECL:: Default record length for new files\n@@ -620,7 +620,7 @@ GNU Fortran searches for the environment variable @env{TMP}, then @env{TEMP}.\n If these are missing, the default is @file{/tmp}.\n \n @node GFORTRAN_UNBUFFERED_ALL\n-@section @env{GFORTRAN_UNBUFFERED_ALL}---Don't buffer I/O on all units\n+@section @env{GFORTRAN_UNBUFFERED_ALL}---Do not buffer I/O on all units\n \n This environment variable controls whether all I/O is unbuffered.  If\n the first letter is @samp{y}, @samp{Y} or @samp{1}, all I/O is\n@@ -629,7 +629,7 @@ the first letter is @samp{n}, @samp{N} or @samp{0}, I/O is buffered.\n This is the default.\n \n @node GFORTRAN_UNBUFFERED_PRECONNECTED\n-@section @env{GFORTRAN_UNBUFFERED_PRECONNECTED}---Don't buffer I/O on preconnected units\n+@section @env{GFORTRAN_UNBUFFERED_PRECONNECTED}---Do not buffer I/O on preconnected units\n \n The environment variable named @env{GFORTRAN_UNBUFFERED_PRECONNECTED} controls\n whether I/O on a preconnected unit (i.e.@: STDOUT or STDERR) is unbuffered.  If \n@@ -642,7 +642,7 @@ is @samp{n}, @samp{N} or @samp{0}, I/O is buffered.  This is the default.\n \n If the first letter is @samp{y}, @samp{Y} or @samp{1}, filename and\n line numbers for runtime errors are printed.  If the first letter is\n-@samp{n}, @samp{N} or @samp{0}, don't print filename and line numbers\n+@samp{n}, @samp{N} or @samp{0}, do not print filename and line numbers\n for runtime errors.  The default is to print the location.\n \n @node GFORTRAN_OPTIONAL_PLUS\n@@ -1953,7 +1953,7 @@ store_catalog(7)%id = 7831\n store_catalog(7)%description = \"milk bottle\"\n store_catalog(7)%price = 1.2\n \n-! Assignments of a whole variable don't change\n+! Assignments of a whole variable do not change\n store_catalog(12) = pear\n print *, store_catalog(12)\n @end example\n@@ -1974,7 +1974,7 @@ print *, store_catalog(12)\n @cindex @code{ENCODE}\n @cindex @code{DECODE}\n \n-GNU Fortran doesn't support the @code{ENCODE} and @code{DECODE}\n+GNU Fortran does not support the @code{ENCODE} and @code{DECODE}\n statements.  These statements are best replaced by @code{READ} and\n @code{WRITE} statements involving internal files (@code{CHARACTER}\n variables and arrays), which have been part of the Fortran standard since\n@@ -2334,10 +2334,10 @@ Procedure pointers are handled analogously to pointers; the C type is\n @code{TYPE(C_FUNPTR)} and the intrinsic conversion procedures are\n @code{C_F_PROCPOINTER} and @code{C_FUNLOC}.\n \n-Let's consider two examples of actually passing a procedure pointer from\n+Let us consider two examples of actually passing a procedure pointer from\n C to Fortran and vice versa.  Note that these examples are also very\n-similar to passing ordinary pointers between both languages.\n-First, consider this code in C:\n+similar to passing ordinary pointers between both languages. First,\n+consider this code in C:\n \n @smallexample\n /* Procedure implemented in Fortran.  */\n@@ -2827,7 +2827,7 @@ some are completely orthogonal to the rest of what is\n happening on GNU Fortran,\n but others are ``mainstream'' projects in need of enthusiastic hackers.\n All of these projects are important!\n-We'll eventually get around to the things here,\n+We will eventually get around to the things here,\n but they are also things doable by someone who is willing and able.\n \n @menu"}, {"sha": "6d4c9ffd20b380a580c536ef1ec81c443525b072", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5a0818e683e9bf93b3edfce46333ccac054b21f/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5a0818e683e9bf93b3edfce46333ccac054b21f/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=c5a0818e683e9bf93b3edfce46333ccac054b21f", "patch": "@@ -1470,13 +1470,15 @@ If @var{Y} is zero, then @var{X} must be nonzero.\n @end multitable\n \n @item @emph{Return value}:\n-The return value has the same type and kind type parameter as @var{Y}.\n-It is the principal value of the complex number @math{X + i Y}.  If\n-@var{X} is nonzero, then it lies in the range @math{-\\pi \\le \\atan (x) \\leq \\pi}.\n+The return value has the same type and kind type parameter as @var{Y}. It\n+is the principal value of the complex number @math{X + i Y}.  If @var{X}\n+is nonzero, then it lies in the range @math{-\\pi \\le \\atan (x) \\leq \\pi}.\n The sign is positive if @var{Y} is positive.  If @var{Y} is zero, then\n-the return value is zero if @var{X} is positive and @math{\\pi} if @var{X}\n-is negative.  Finally, if @var{X} is zero, then the magnitude of the result\n-is @math{\\pi/2}.\n+the return value is zero if @var{X} is strictly positive, @math{\\pi} if\n+@var{X} is negative and @var{Y} is positive zero (or the processor does\n+not handle signed zeros), and @math{-\\pi} if @var{X} is negative and\n+@var{Y} is negative zero.  Finally, if @var{X} is zero, then the\n+magnitude of the result is @math{\\pi/2}.\n \n @item @emph{Example}:\n @smallexample\n@@ -2484,7 +2486,7 @@ The return value is of type integer and of the system-dependent kind\n number of bytes occupied by the argument.  If the argument has the\n @code{POINTER} attribute, the number of bytes of the storage area pointed\n to is returned.  If the argument is of a derived type with @code{POINTER}\n-or @code{ALLOCATABLE} components, the return value doesn't account for\n+or @code{ALLOCATABLE} components, the return value does not account for\n the sizes of the data pointed to by these components.\n \n @item @emph{Example}:\n@@ -11467,7 +11469,7 @@ The return value is of type integer and of the system-dependent kind\n number of bytes occupied by the argument.  If the argument has the\n @code{POINTER} attribute, the number of bytes of the storage area pointed\n to is returned.  If the argument is of a derived type with @code{POINTER}\n-or @code{ALLOCATABLE} components, the return value doesn't account for\n+or @code{ALLOCATABLE} components, the return value does not account for\n the sizes of the data pointed to by these components. If the argument is\n polymorphic, the size according to the declared type is returned. The argument\n may not be a procedure or procedure pointer."}, {"sha": "7808c52ec735264e7eff7cb554f15b831ac7e9f8", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5a0818e683e9bf93b3edfce46333ccac054b21f/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5a0818e683e9bf93b3edfce46333ccac054b21f/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=c5a0818e683e9bf93b3edfce46333ccac054b21f", "patch": "@@ -459,7 +459,7 @@ let the compiler know the current working directory at the time of\n preprocessing. When this option is enabled, the preprocessor will emit,\n after the initial linemarker, a second linemarker with the current\n working directory followed by two slashes. GCC will use this directory,\n-when it's present in the preprocessed input, as the directory emitted\n+when it is present in the preprocessed input, as the directory emitted\n as the current working directory in some debugging information formats.\n This option is implicitly enabled if debugging information is enabled,\n but this can be inhibited with the negated form\n@@ -659,7 +659,7 @@ messages produced.\n @item -fsyntax-only\n @opindex @code{fsyntax-only}\n @cindex syntax checking\n-Check the code for syntax errors, but don't actually compile it.  This\n+Check the code for syntax errors, but do not actually compile it.  This\n will generate module files for each module present in the code, but no\n other output file.\n \n@@ -1088,10 +1088,10 @@ really useful for use by the gfortran testsuite.\n @opindex @code{fsign-zero}\n When enabled, floating point numbers of value zero with the sign bit set\n are written as negative number in formatted output and treated as\n-negative in the @code{SIGN} intrinsic.  @code{fno-sign-zero} does not\n-print the negative sign of zero values and regards zero as positive\n-number in the @code{SIGN} intrinsic for compatibility with F77.\n-Default behavior is to show the negative sign.\n+negative in the @code{SIGN} intrinsic.  @option{-fno-sign-zero} does not\n+print the negative sign of zero values (or values rounded to zero for I/O)\n+and regards zero as positive number in the @code{SIGN} intrinsic for\n+compatibility with Fortran 77. The default is @option{-fsign-zero}.\n @end table\n \n @node Code Gen Options\n@@ -1394,7 +1394,7 @@ The default value for @var{n} is 32768.\n @opindex @code{fstack-arrays}\n Adding this option will make the fortran compiler put all local arrays,\n even those of unknown size onto stack memory.  If your program uses very\n-large local arrays it's possible that you'll have to extend your runtime\n+large local arrays it is possible that you will have to extend your runtime\n limits for stack memory on some operating systems. This flag is enabled\n by default at optimization level @option{-Ofast}.\n "}]}