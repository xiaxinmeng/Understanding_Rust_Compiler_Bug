{"sha": "959fc02c27caefe184137ff482a34608e1ff64b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU5ZmMwMmMyN2NhZWZlMTg0MTM3ZmY0ODJhMzQ2MDhlMWZmNjRiOQ==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@spamcop.net", "date": "2010-11-09T17:21:02Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2010-11-09T17:21:02Z"}, "message": "re PR target/44755 (picochip.md enum types mismatch)\n\n\tPR target/44755\n\t* config.gcc (picochip-*): Add t-pnt16-warn to tmake_file.\n\t* config/t-pnt16-warn: New file.\n\t* config/picochip/picochip.c (picochip_emit_stack_allocate):\n\tUse add_reg_note.\n\t(picochip_emit_save_register): Likewise.\n\t(picochip_emit_restore_register): Remove variable insn.\n\t(picochip_legitimize_address): Don't use C++ style comments.\n\t(picochip_legitimize_reload_address): Likewise.\n\t(reorder_var_tracking_notes): Remove variable vliw_start.\n\t(picochip_reorg): Cast first arguemnt to emit_note_after to\n\tenum insn_note.\n\t(picochip_expand_builtin_2op): Use EXPAND_NORMAL.\n\t(picochip_expand_builtin_3op): Likewise.\n\t(picochip_expand_builtin_2opvoid): Likewise.\n\t(picochip_expand_array_get, picochip_expand_array_put): Likewise.\n\t(picochip_expand_array_testport): Likewise.\n\t(picochip_init_builtins): Remove unused variables.\n\t* config/picochip/picochip.h (ASM_FORMAT_PRIVATE_NAME): Cast LABELNO\n\tto unsigned long, and output it as such.\n\t(ASM_OUTPUT_SKIP): Use HOST_WIDE_INT_PRINT_UNSIGNED.\n\t* config/picochip/picochip.md (movhicc): Remove nonsense statement.\n\t(schedType): Cast result of picochip_schedule_type to\n\tenum attr_schedType.\n\nFrom-SVN: r166499", "tree": {"sha": "1a4c1b56ac02db3a762c3a9a2f5ce6c6e0f4e4c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a4c1b56ac02db3a762c3a9a2f5ce6c6e0f4e4c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/959fc02c27caefe184137ff482a34608e1ff64b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/959fc02c27caefe184137ff482a34608e1ff64b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/959fc02c27caefe184137ff482a34608e1ff64b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/959fc02c27caefe184137ff482a34608e1ff64b9/comments", "author": null, "committer": null, "parents": [{"sha": "a3357f7dffc52969c120c2ecb9f1c013833ccb9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3357f7dffc52969c120c2ecb9f1c013833ccb9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3357f7dffc52969c120c2ecb9f1c013833ccb9b"}], "stats": {"total": 147, "additions": 92, "deletions": 55}, "files": [{"sha": "0a80209a32de786ba1ee9edd0bdbf9e514882928", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/959fc02c27caefe184137ff482a34608e1ff64b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/959fc02c27caefe184137ff482a34608e1ff64b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=959fc02c27caefe184137ff482a34608e1ff64b9", "patch": "@@ -27,6 +27,31 @@\n \t* ix86_expand_split_stack_prologue (args_size): Change type to\n \tunsigned HOST_WIDE_INT.\n \n+\tPR target/44755\n+\t* config.gcc (picochip-*): Add t-pnt16-warn to tmake_file.\n+\t* config/t-pnt16-warn: New file.\n+\t* config/picochip/picochip.c (picochip_emit_stack_allocate):\n+\tUse add_reg_note.\n+\t(picochip_emit_save_register): Likewise.\n+\t(picochip_emit_restore_register): Remove variable insn.\n+\t(picochip_legitimize_address): Don't use C++ style comments.\n+\t(picochip_legitimize_reload_address): Likewise.\n+\t(reorder_var_tracking_notes): Remove variable vliw_start.\n+\t(picochip_reorg): Cast first arguemnt to emit_note_after to\n+\tenum insn_note.\n+\t(picochip_expand_builtin_2op): Use EXPAND_NORMAL.\n+\t(picochip_expand_builtin_3op): Likewise.\n+\t(picochip_expand_builtin_2opvoid): Likewise.\n+\t(picochip_expand_array_get, picochip_expand_array_put): Likewise.\n+\t(picochip_expand_array_testport): Likewise.\n+\t(picochip_init_builtins): Remove unused variables.\n+\t* config/picochip/picochip.h (ASM_FORMAT_PRIVATE_NAME): Cast LABELNO\n+\tto unsigned long, and output it as such.\n+\t(ASM_OUTPUT_SKIP): Use HOST_WIDE_INT_PRINT_UNSIGNED.\n+\t* config/picochip/picochip.md (movhicc): Remove nonsense statement.\n+\t(schedType): Cast result of picochip_schedule_type to\n+\tenum attr_schedType.\n+\n 2010-11-09  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/46392"}, {"sha": "c31373e0498a3afde228311993c9fa90f91710e8", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/959fc02c27caefe184137ff482a34608e1ff64b9/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/959fc02c27caefe184137ff482a34608e1ff64b9/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=959fc02c27caefe184137ff482a34608e1ff64b9", "patch": "@@ -1979,6 +1979,7 @@ pdp11-*-*)\n picochip-*)\n \ttm_file=\"${tm_file} newlib-stdint.h\"\n \tuse_gcc_stdint=wrap\n+\ttmake_file=\"picochip/t-picochip t-pnt16-warn\"\n         ;;\n # port not yet contributed\n #powerpc-*-openbsd*)"}, {"sha": "2e82247ad2eb6adbe8ef7a6f8603ebb57847f633", "filename": "gcc/config/picochip/picochip.c", "status": "modified", "additions": 32, "deletions": 51, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/959fc02c27caefe184137ff482a34608e1ff64b9/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/959fc02c27caefe184137ff482a34608e1ff64b9/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.c?ref=959fc02c27caefe184137ff482a34608e1ff64b9", "patch": "@@ -685,12 +685,10 @@ picochip_emit_stack_allocate (int adjustment)\n      so that the correct Dwarf information is generated (see documention\n      for RTX_FRAME_RELATED_P for more details). */\n   RTX_FRAME_RELATED_P (insn) = 1;\n-  REG_NOTES (insn) =\n-    gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR,\n-\t\t       gen_rtx_SET (VOIDmode, stack_pointer_reg,\n-\t\t\t\t    gen_rtx_PLUS (Pmode, stack_pointer_reg,\n-\t\t\t\t\t\t  GEN_INT (-adjustment))),\n-\t\t       REG_NOTES (insn));\n+  add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n+\t\tgen_rtx_SET (VOIDmode, stack_pointer_reg,\n+\t\t\t     gen_rtx_PLUS (Pmode, stack_pointer_reg,\n+\t\t\t\t\t   GEN_INT (-adjustment))));\n \n }\n \n@@ -743,10 +741,8 @@ picochip_emit_save_register (rtx reg, int offset)\n \t\t       gen_rtx_REG (HImode, REGNO (reg) + 1));\n \tRTX_FRAME_RELATED_P (RTVEC_ELT (p, 1)) = 1;\n \n-\tREG_NOTES (insn) =\n-\t  gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR,\n-\t\t\t     gen_rtx_PARALLEL (VOIDmode, p),\n-\t\t\t     REG_NOTES (insn));\n+\tadd_reg_note (insn, REG_FRAME_RELATED_EXPR,\n+\t\t      gen_rtx_PARALLEL (VOIDmode, p));\n \n       }\n       break;\n@@ -765,15 +761,15 @@ picochip_emit_save_register (rtx reg, int offset)\n static void\n picochip_emit_restore_register (rtx reg, int offset)\n {\n-  rtx stack_pointer, address, mem, insn;\n+  rtx stack_pointer, address, mem;\n \n   stack_pointer = gen_rtx_REG (Pmode, STACK_POINTER_REGNUM);\n \n   address = gen_rtx_PLUS (Pmode, stack_pointer, GEN_INT (offset));\n \n   mem = gen_rtx_MEM (GET_MODE (reg), address);\n \n-  insn = emit_move_insn (reg, mem);\n+  emit_move_insn (reg, mem);\n \n }\n \n@@ -1477,7 +1473,7 @@ picochip_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n     {\n       int high_val, low_val, offset;\n       offset = INTVAL (XEXP (x, 1));\n-      // Ignore cases with negative offsets.\n+      /* Ignore cases with negative offsets.  */\n       if (offset < 0)\n         return x;\n       high_val = offset & mask_val;\n@@ -1534,7 +1530,7 @@ picochip_legitimize_reload_address (rtx *x,\n       return 1;\n     }\n \n-  // Depending on mode, the offsets allowed are either 16/32/64.\n+  /* Depending on mode, the offsets allowed are either 16/32/64.  */\n   switch (mode)\n     {\n       case QImode:\n@@ -1556,7 +1552,7 @@ picochip_legitimize_reload_address (rtx *x,\n     {\n       int high_val, low_val, offset;\n       offset = INTVAL (XEXP (*x, 1));\n-      // Ignore cases with negative offsets.\n+      /* Ignore cases with negative offsets.  */\n       if (offset < 0)\n         return 0;\n       high_val = offset & mask_val;\n@@ -3196,7 +3192,6 @@ reorder_var_tracking_notes (void)\n   FOR_EACH_BB (bb)\n     {\n       rtx insn, next, last_insn = NULL_RTX;\n-      rtx vliw_start = NULL_RTX;\n       rtx queue = NULL_RTX;\n \n       /* Iterate through the bb and find the last non-debug insn */\n@@ -3362,7 +3357,9 @@ picochip_reorg (void)\n \n       if (last_insn_in_packet != NULL)\n \t{\n-          rtx tmp_note = emit_note_after (NOTE_KIND(prologue_end_note), last_insn_in_packet);\n+          rtx tmp_note\n+\t    = emit_note_after ((enum insn_note) NOTE_KIND (prologue_end_note),\n+\t\t\t       last_insn_in_packet);\n           memcpy(&NOTE_DATA (tmp_note), &NOTE_DATA(prologue_end_note), sizeof(NOTE_DATA(prologue_end_note)));\n \t  delete_insn (prologue_end_note);\n \t}\n@@ -3937,7 +3934,7 @@ picochip_expand_builtin_2op (enum insn_code icode, tree call, rtx target)\n \n   /* Grab the incoming argument and emit its RTL. */\n   arg0 = CALL_EXPR_ARG (call, 0);\n-  op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+  op0 = expand_expr (arg0, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n \n   /* Determine the modes of the instruction operands. */\n   tmode = insn_data[icode].operand[0].mode;\n@@ -3978,8 +3975,8 @@ picochip_expand_builtin_3op (enum insn_code icode, tree call, rtx target)\n   arg1 = CALL_EXPR_ARG (call, 1);\n \n   /* Emit rtl sequences for the function arguments. */\n-  op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-  op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+  op0 = expand_expr (arg0, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n+  op1 = expand_expr (arg1, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n \n   /* Get the mode's of each of the instruction operands. */\n   tmode = insn_data[icode].operand[0].mode;\n@@ -4022,8 +4019,8 @@ picochip_expand_builtin_2opvoid (enum insn_code icode, tree call)\n   arg1 = CALL_EXPR_ARG (call, 1);\n \n   /* Emit rtl sequences for the function arguments. */\n-  op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-  op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+  op0 = expand_expr (arg0, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n+  op1 = expand_expr (arg1, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n \n   /* Get the mode's of each of the instruction operands. */\n   mode0 = insn_data[icode].operand[0].mode;\n@@ -4059,9 +4056,9 @@ picochip_expand_array_get (tree call, rtx target)\n   arg2 = CALL_EXPR_ARG (call, 2) ;\n \n   /* Emit rtl sequences for the function arguments. */\n-  op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-  op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n-  op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n+  op0 = expand_expr (arg0, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n+  op1 = expand_expr (arg1, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n+  op2 = expand_expr (arg2, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n \n   /* The second and third operands must be constant.  Nothing else will\n      do. */\n@@ -4104,10 +4101,10 @@ picochip_expand_array_put (tree call, rtx target)\n   arg3 = CALL_EXPR_ARG (call, 3);\n \n   /* Emit rtl sequences for the function arguments. */\n-  op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-  op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n-  op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n-  op3 = expand_expr (arg3, NULL_RTX, VOIDmode, 0);\n+  op0 = expand_expr (arg0, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n+  op1 = expand_expr (arg1, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n+  op2 = expand_expr (arg2, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n+  op3 = expand_expr (arg3, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n \n   /* The first operand must be an SImode register. */\n   if (GET_MODE (op0) != SImode || REG != GET_CODE (op0))\n@@ -4147,9 +4144,9 @@ picochip_expand_array_testport (tree call, rtx target)\n   arg2 = CALL_EXPR_ARG (call, 2);\n \n   /* Emit rtl sequences for the function arguments. */\n-  op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-  op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n-  op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n+  op0 = expand_expr (arg0, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n+  op1 = expand_expr (arg1, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n+  op2 = expand_expr (arg2, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n \n   /* The first operand must be a HImode register, or a constant.  If it\n      isn't, force it into a HImode register. */\n@@ -4224,30 +4221,18 @@ picochip_init_builtins (void)\n     tree_cons (NULL_TREE, integer_type_node, int_int_endlink);\n   tree int_long_endlink =\n     tree_cons (NULL_TREE, integer_type_node, long_endlink);\n-  tree pchar_type_node = build_pointer_type (char_type_node);\n   tree long_int_int_int_endlink =\n     tree_cons (NULL_TREE, long_integer_type_node, int_int_int_endlink);\n \n-  tree int_ftype_void, int_ftype_int, int_ftype_int_int, void_ftype_pchar;\n-  tree long_ftype_int, long_ftype_int_int, long_ftype_int_int_int;\n+  tree int_ftype_int, int_ftype_int_int;\n+  tree long_ftype_int, long_ftype_int_int_int;\n   tree void_ftype_int_long, int_ftype_int_int_int,\n     void_ftype_long_int_int_int;\n-  tree void_ftype_void, void_ftype_int, unsigned_ftype_unsigned;\n+  tree void_ftype_void, unsigned_ftype_unsigned;\n \n   /* void func (void) */\n   void_ftype_void = build_function_type (void_type_node, endlink);\n \n-  /* void func (void *) */\n-  void_ftype_pchar\n-    = build_function_type (void_type_node,\n-\t\t\t   tree_cons (NULL_TREE, pchar_type_node, endlink));\n-\n-  /* int func (void) */\n-  int_ftype_void = build_function_type (integer_type_node, endlink);\n-\n-  /* void func (int) */\n-  void_ftype_int = build_function_type (void_type_node, int_endlink);\n-\n   /* int func (int) */\n   int_ftype_int = build_function_type (integer_type_node, int_endlink);\n \n@@ -4261,10 +4246,6 @@ picochip_init_builtins (void)\n   /* long func(int) */\n   long_ftype_int = build_function_type (long_integer_type_node, int_endlink);\n \n-  /* long func(int, int) */\n-  long_ftype_int_int\n-    = build_function_type (long_integer_type_node, int_int_endlink);\n-\n   /* long func(int, int, int) */\n   long_ftype_int_int_int\n     = build_function_type (long_integer_type_node, int_int_int_endlink);"}, {"sha": "16bb6c0dfa8cd9b5b60fc742c4c5251ac7147b61", "filename": "gcc/config/picochip/picochip.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/959fc02c27caefe184137ff482a34608e1ff64b9/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/959fc02c27caefe184137ff482a34608e1ff64b9/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.h?ref=959fc02c27caefe184137ff482a34608e1ff64b9", "patch": "@@ -550,7 +550,7 @@ do {                                                                         \\\n \n #define ASM_FORMAT_PRIVATE_NAME(OUTPUT, NAME, LABELNO)  \\\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 15),    \\\n-  sprintf ((OUTPUT), \"%s___%d\", (NAME), (LABELNO)))\n+  sprintf ((OUTPUT), \"%s___%lu\", (NAME), (unsigned long)(LABELNO)))\n \n /* Macros Controlling Initialization Routines  */\n \n@@ -622,7 +622,7 @@ do {                                                                         \\\n /* Assembler Commands for Alignment  */\n \n #define ASM_OUTPUT_SKIP(STREAM,BYTES) \\\n-  fprintf(STREAM, \".skip %u\\n\", BYTES);\n+  fprintf(STREAM, \".skip \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", BYTES);\n #define ASM_OUTPUT_ALIGN(STREAM,POWER) \\\n   fprintf(STREAM, \".align %u\\n\", 1 << POWER);\n "}, {"sha": "2a59c074cac5070be9b428da865154ac41541886", "filename": "gcc/config/picochip/picochip.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/959fc02c27caefe184137ff482a34608e1ff64b9/gcc%2Fconfig%2Fpicochip%2Fpicochip.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/959fc02c27caefe184137ff482a34608e1ff64b9/gcc%2Fconfig%2Fpicochip%2Fpicochip.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.md?ref=959fc02c27caefe184137ff482a34608e1ff64b9", "patch": "@@ -2520,7 +2520,6 @@\n   \"\"\n   {if (!picochip_check_conditional_copy (operands))\n      FAIL;\n-   operands[4] = GEN_INT(GET_CODE(operands[1]));\n   })\n \n (define_insn_and_split \"*checked_movhicc\"\n@@ -2593,7 +2592,7 @@\n   (const_string \"unknown\"))\n \n (define_attr \"schedType\" \"none,space,speed\"\n-  (const (symbol_ref \"picochip_schedule_type\")))\n+  (const (symbol_ref \"(enum attr_schedType) picochip_schedule_type\")))\n \n ;; Define whether an instruction uses a long constant.\n "}, {"sha": "97bac09a9f2e2333df96dcea20d920c0804f3e1a", "filename": "gcc/config/t-pnt16-warn", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/959fc02c27caefe184137ff482a34608e1ff64b9/gcc%2Fconfig%2Ft-pnt16-warn", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/959fc02c27caefe184137ff482a34608e1ff64b9/gcc%2Fconfig%2Ft-pnt16-warn", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-pnt16-warn?ref=959fc02c27caefe184137ff482a34608e1ff64b9", "patch": "@@ -0,0 +1,31 @@\n+# -Werror overrides for targets with 16 bit pointers\n+# Copyright (C) 2010 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+\n+# Because POINTER_SIZE is only 16, in dwarf2out.c,\n+# DWARF_ARANGES_PAD_SIZE is 0, thus a loop in output_aranges that checks\n+# (i < (unsigned) DWARF_ARANGES_PAD_SIZE) elicits a warning that the\n+# comparison is always false.\n+# We could say \"-Werror -Wno-error=type-limits\", alas, not all supported\n+# gcc bootstrap compilers support the latter option.\n+dwarf2out.o-warn = -Wno-error\n+\n+# Likewise, java/constants.c:build_constants_constructor has a negative shift\n+# count (in never-executed code) due to the small POINTER_SIZE.\n+java/constants.o-warn = -Wno-error"}]}