{"sha": "efe5e5a0d84673cfe9dea94b6463baf81287e394", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZlNWU1YTBkODQ2NzNjZmU5ZGVhOTRiNjQ2M2JhZjgxMjg3ZTM5NA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-10-23T22:26:08Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-10-23T22:26:08Z"}, "message": "gcc.c (n_switches_alloc_debug_check): New.\n\n\t* gcc.c (n_switches_alloc_debug_check): New.\n\t(set_option_handlers): New.\n\t(process_command): Use set_option_handlers.\n\t(do_self_spec): Pass spec-generated options through option\n\thandlers.\n\t(main): Also save and restore n_switches_alloc when swapping\n\tswitch arrays.\n\nFrom-SVN: r165891", "tree": {"sha": "cec1ca5db689c679dbfef96c06ba4fe30f41099a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cec1ca5db689c679dbfef96c06ba4fe30f41099a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efe5e5a0d84673cfe9dea94b6463baf81287e394", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efe5e5a0d84673cfe9dea94b6463baf81287e394", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efe5e5a0d84673cfe9dea94b6463baf81287e394", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efe5e5a0d84673cfe9dea94b6463baf81287e394/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe12dfe194c267599797db8be8acadf9639bd287", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe12dfe194c267599797db8be8acadf9639bd287", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe12dfe194c267599797db8be8acadf9639bd287"}], "stats": {"total": 136, "additions": 78, "deletions": 58}, "files": [{"sha": "809f3bec33b8c4c6309c22d02e4bf5b6edc77a38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe5e5a0d84673cfe9dea94b6463baf81287e394/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe5e5a0d84673cfe9dea94b6463baf81287e394/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efe5e5a0d84673cfe9dea94b6463baf81287e394", "patch": "@@ -1,3 +1,13 @@\n+2010-10-23  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.c (n_switches_alloc_debug_check): New.\n+\t(set_option_handlers): New.\n+\t(process_command): Use set_option_handlers.\n+\t(do_self_spec): Pass spec-generated options through option\n+\thandlers.\n+\t(main): Also save and restore n_switches_alloc when swapping\n+\tswitch arrays.\n+\n 2010-10-23  Richard Henderson  <rth@redhat.com>\n \n \tPR target/46144"}, {"sha": "13635d52b8ac1752492008ebd0c4eff4635490a8", "filename": "gcc/gcc.c", "status": "modified", "additions": 68, "deletions": 58, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe5e5a0d84673cfe9dea94b6463baf81287e394/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe5e5a0d84673cfe9dea94b6463baf81287e394/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=efe5e5a0d84673cfe9dea94b6463baf81287e394", "patch": "@@ -2810,6 +2810,8 @@ static struct switchstr *switches_debug_check[2];\n \n static int n_switches_debug_check[2];\n \n+static int n_switches_alloc_debug_check[2];\n+\n static char *debug_check_temp_file[2];\n \n /* Language is one of three things:\n@@ -3506,6 +3508,19 @@ driver_handle_option (struct gcc_options *opts,\n   return true;\n }\n \n+/* Put the driver's standard set of option handlers in *HANDLERS.  */\n+\n+static void\n+set_option_handlers (struct cl_option_handlers *handlers)\n+{\n+  handlers->unknown_option_callback = driver_unknown_option_callback;\n+  handlers->wrong_lang_callback = driver_wrong_lang_callback;\n+  handlers->post_handling_callback = driver_post_handling_callback;\n+  handlers->num_handlers = 1;\n+  handlers->handlers[0].handler = driver_handle_option;\n+  handlers->handlers[0].mask = CL_DRIVER;\n+}\n+\n /* Create the vector `switches' and its contents.\n    Store its length in `n_switches'.  */\n \n@@ -3730,12 +3745,7 @@ process_command (unsigned int decoded_options_count,\n \n   last_language_n_infiles = -1;\n \n-  handlers.unknown_option_callback = driver_unknown_option_callback;\n-  handlers.wrong_lang_callback = driver_wrong_lang_callback;\n-  handlers.post_handling_callback = driver_post_handling_callback;\n-  handlers.num_handlers = 1;\n-  handlers.handlers[0].handler = driver_handle_option;\n-  handlers.handlers[0].mask = CL_DRIVER;\n+  set_option_handlers (&handlers);\n \n   for (j = 1; j < decoded_options_count; j++)\n     {\n@@ -4250,66 +4260,59 @@ do_self_spec (const char *spec)\n \n   if (argbuf_index > 0)\n     {\n-      switches = XRESIZEVEC (struct switchstr, switches,\n-\t\t\t     n_switches + argbuf_index + 1);\n+      const char **argbuf_copy;\n+      struct cl_decoded_option *decoded_options;\n+      struct cl_option_handlers handlers;\n+      unsigned int decoded_options_count;\n+      unsigned int j;\n \n-      for (i = 0; i < argbuf_index; i++)\n-\t{\n-\t  struct switchstr *sw;\n-\t  const char *p = argbuf[i];\n-\t  int c = *p;\n-\n-\t  /* Each switch should start with '-'.  */\n-\t  if (c != '-')\n-\t    fatal_error (\"switch %qs does not start with %<-%>\", argbuf[i]);\n+      /* Create a copy of argbuf with a dummy argv[0] entry for\n+\t decode_cmdline_options_to_array.  */\n+      argbuf_copy = XNEWVEC (const char *, argbuf_index + 1);\n+      argbuf_copy[0] = \"\";\n+      memcpy (argbuf_copy + 1, argbuf, argbuf_index * sizeof (const char *));\n \n-\t  p++;\n-\t  c = *p;\n+      decode_cmdline_options_to_array (argbuf_index + 1, argbuf_copy,\n+\t\t\t\t       CL_DRIVER, &decoded_options,\n+\t\t\t\t       &decoded_options_count);\n \n-\t  sw = &switches[n_switches++];\n-\t  sw->part1 = p;\n-\t  sw->live_cond = 0;\n-\t  sw->validated = 0;\n-\t  sw->ordering = 0;\n+      set_option_handlers (&handlers);\n \n-\t  /* Deal with option arguments in separate argv elements.  */\n-\t  if ((SWITCH_TAKES_ARG (c) > (p[1] != 0))\n-\t      || WORD_SWITCH_TAKES_ARG (p))\n+      for (j = 1; j < decoded_options_count; j++)\n+\t{\n+\t  switch (decoded_options[j].opt_index)\n \t    {\n-\t      int j = 0;\n-\t      int n_args = WORD_SWITCH_TAKES_ARG (p);\n+\t    case OPT_SPECIAL_input_file:\n+\t      /* Specs should only generate options, not input\n+\t\t files.  */\n+\t      if (strcmp (decoded_options[j].arg, \"-\") != 0)\n+\t\tfatal_error (\"switch %qs does not start with %<-%>\",\n+\t\t\t     decoded_options[j].arg);\n+\t      else\n+\t\tfatal_error (\"spec-generated switch is just %<-%>\");\n+\t      break;\n \n-\t      if (n_args == 0)\n-\t\t{\n-\t\t  /* Count only the option arguments in separate argv elements.  */\n-\t\t  n_args = SWITCH_TAKES_ARG (c) - (p[1] != 0);\n-\t\t}\n-\t      if (i + n_args >= argbuf_index)\n-\t\tfatal_error (\"argument to %<-%s%> is missing\", p);\n-\t      sw->args\n-\t\t= XNEWVEC (const char *, n_args + 1);\n-\t      while (j < n_args)\n-\t\tsw->args[j++] = argbuf[++i];\n-\t      /* Null-terminate the vector.  */\n-\t      sw->args[j] = 0;\n-\t    }\n-\t  else if (c == 'o')\n-\t    {\n-\t      /* On some systems, ld cannot handle \"-o\" without\n-\t\t a space.  So split the option from its argument.  */\n-\t      char *part1 = XNEWVEC (char, 2);\n-\t      part1[0] = c;\n-\t      part1[1] = '\\0';\n-\n-\t      sw->part1 = part1;\n-\t      sw->args = XNEWVEC (const char *, 2);\n-\t      sw->args[0] = xstrdup (p+1);\n-\t      sw->args[1] = 0;\n+\t    case OPT_fcompare_debug_second:\n+\t    case OPT_fcompare_debug:\n+\t    case OPT_fcompare_debug_:\n+\t    case OPT_o:\n+\t      /* Avoid duplicate processing of some options from\n+\t\t compare-debug specs; just save them here.  */\n+\t      save_switch (decoded_options[j].canonical_option[0],\n+\t\t\t   (decoded_options[j].canonical_option_num_elements\n+\t\t\t    - 1),\n+\t\t\t   &decoded_options[j].canonical_option[1], false);\n+\t      break;\n+\n+\t    default:\n+\t      read_cmdline_option (&global_options, &global_options_set,\n+\t\t\t\t   decoded_options + j, CL_DRIVER, &handlers,\n+\t\t\t\t   global_dc);\n+\t      break;\n \t    }\n-\t  else\n-\t    sw->args = 0;\n \t}\n \n+      alloc_switch ();\n       switches[n_switches].part1 = 0;\n     }\n }\n@@ -6271,14 +6274,17 @@ main (int argc, char **argv)\n       if (!compare_debug_second)\n \t{\n \t  n_switches_debug_check[1] = n_switches;\n+\t  n_switches_alloc_debug_check[1] = n_switches_alloc;\n \t  switches_debug_check[1] = XDUPVEC (struct switchstr, switches,\n-\t\t\t\t\t     n_switches + 1);\n+\t\t\t\t\t     n_switches_alloc);\n \n \t  do_self_spec (\"%:compare-debug-self-opt()\");\n \t  n_switches_debug_check[0] = n_switches;\n+\t  n_switches_alloc_debug_check[0] = n_switches_alloc;\n \t  switches_debug_check[0] = switches;\n \n \t  n_switches = n_switches_debug_check[1];\n+\t  n_switches_alloc = n_switches_alloc_debug_check[1];\n \t  switches = switches_debug_check[1];\n \t}\n \n@@ -6294,9 +6300,11 @@ main (int argc, char **argv)\n       if (!compare_debug_second)\n \t{\n \t  n_switches_debug_check[1] = n_switches;\n+\t  n_switches_alloc_debug_check[1] = n_switches_alloc;\n \t  switches_debug_check[1] = switches;\n \t  compare_debug = -compare_debug;\n \t  n_switches = n_switches_debug_check[0];\n+\t  n_switches_alloc = n_switches_debug_check[0];\n \t  switches = switches_debug_check[0];\n \t}\n     }\n@@ -6712,12 +6720,14 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \n \t\t  compare_debug = -compare_debug;\n \t\t  n_switches = n_switches_debug_check[1];\n+\t\t  n_switches_alloc = n_switches_alloc_debug_check[1];\n \t\t  switches = switches_debug_check[1];\n \n \t\t  value = do_spec (input_file_compiler->spec);\n \n \t\t  compare_debug = -compare_debug;\n \t\t  n_switches = n_switches_debug_check[0];\n+\t\t  n_switches_alloc = n_switches_alloc_debug_check[0];\n \t\t  switches = switches_debug_check[0];\n \n \t\t  if (value < 0)"}]}