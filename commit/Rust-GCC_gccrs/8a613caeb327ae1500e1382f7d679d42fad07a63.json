{"sha": "8a613caeb327ae1500e1382f7d679d42fad07a63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE2MTNjYWViMzI3YWUxNTAwZTEzODJmN2Q2NzlkNDJmYWQwN2E2Mw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-08-22T16:26:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-08-22T16:26:32Z"}, "message": "re PR middle-end/28776 (dwarf2out.c:2160: ICE: in build_polynomial_chrec, at tree-chrec.h:108)\n\n2006-08-22  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/28776\n\t* tree-scalar-evolution.c (fold_used_pointer): Add at_stmt\n\tparameter.  Convert arguments to arithmetic expression to the\n\tchrecs type.\n\t(analyze_scalar_evolution_1): Adjust caller.\n\n\t* gcc.c-torture/compile/pr28776-1.c: New testcase.\n\t* gcc.c-torture/compile/pr28776-2.c: Likewise.\n\nFrom-SVN: r116326", "tree": {"sha": "2a5f3f06f213f2d53444674a77ae2fb00b1cd032", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a5f3f06f213f2d53444674a77ae2fb00b1cd032"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a613caeb327ae1500e1382f7d679d42fad07a63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a613caeb327ae1500e1382f7d679d42fad07a63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a613caeb327ae1500e1382f7d679d42fad07a63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a613caeb327ae1500e1382f7d679d42fad07a63/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f6c68eda53288a90b6fa6bd59f83c9dd887355f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f6c68eda53288a90b6fa6bd59f83c9dd887355f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f6c68eda53288a90b6fa6bd59f83c9dd887355f"}], "stats": {"total": 70, "additions": 65, "deletions": 5}, "files": [{"sha": "caf083ba5414d59d274648a41b5c3c6d5f37ba3b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a613caeb327ae1500e1382f7d679d42fad07a63/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a613caeb327ae1500e1382f7d679d42fad07a63/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a613caeb327ae1500e1382f7d679d42fad07a63", "patch": "@@ -1,3 +1,11 @@\n+2006-08-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/28776\n+\t* tree-scalar-evolution.c (fold_used_pointer): Add at_stmt\n+\tparameter.  Convert arguments to arithmetic expression to the\n+\tchrecs type.\n+\t(analyze_scalar_evolution_1): Adjust caller.\n+\n 2006-08-22  Jan Hubicka  <jh@suse.cz>\n \n \tPatch by Paolo Bonzini"}, {"sha": "5c029fa566a61f727dfd5f2fcb8f7d46b371545e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a613caeb327ae1500e1382f7d679d42fad07a63/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a613caeb327ae1500e1382f7d679d42fad07a63/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a613caeb327ae1500e1382f7d679d42fad07a63", "patch": "@@ -1,3 +1,9 @@\n+2006-08-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/28776\n+\t* gcc.c-torture/compile/pr28776-1.c: New testcase.\n+\t* gcc.c-torture/compile/pr28776-2.c: Likewise.\n+\n 2006-08-21  Mark Shinwell  <shinwell@codesourcery.com>\n \n \t* g++.dg/eh/arm-vfp-unwind.C: Correct order of DejaGNU directives."}, {"sha": "a37fb6fe105efb00f1abcf690f5e8a5c08243d19", "filename": "gcc/testsuite/gcc.c-torture/compile/pr28776-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a613caeb327ae1500e1382f7d679d42fad07a63/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr28776-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a613caeb327ae1500e1382f7d679d42fad07a63/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr28776-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr28776-1.c?ref=8a613caeb327ae1500e1382f7d679d42fad07a63", "patch": "@@ -0,0 +1,16 @@\n+typedef struct dw_fde_struct\n+{\n+  int decl;\n+} *dw_fde_ref;\n+dw_fde_ref fde_table;\n+unsigned fde_table_in_use;\n+void output_call_frame_info (void)\n+{\n+  unsigned int i;\n+  dw_fde_ref fde;\n+  for (i = 0; i < fde_table_in_use; i++)\n+    {\n+      fde = &fde_table[i];\n+      tree_contains_struct_check_failed (fde_table[i].decl);\n+    }\n+}"}, {"sha": "61a5d37dfa95d2848a2cc4e9ec2a388fbcf585ce", "filename": "gcc/testsuite/gcc.c-torture/compile/pr28776-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a613caeb327ae1500e1382f7d679d42fad07a63/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr28776-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a613caeb327ae1500e1382f7d679d42fad07a63/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr28776-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr28776-2.c?ref=8a613caeb327ae1500e1382f7d679d42fad07a63", "patch": "@@ -0,0 +1,26 @@\n+typedef struct RangeCoder\n+{\n+    unsigned char one_state[256];\n+} RangeCoder;\n+static inline void put_rac(RangeCoder *c, unsigned char* const state)\n+{\n+  *state= c->one_state[*state];\n+}\n+typedef struct PlaneContext{\n+    unsigned (*state)[32];\n+} PlaneContext;\n+static inline void put_symbol(RangeCoder *c, unsigned char *state)\n+{\n+    int i;\n+    const int e;\n+    put_rac(c, state);\n+    for(i=e-1; i>=0; i--)\n+      put_rac(c, state+22+i);\n+}\n+int encode_line(void)\n+{\n+    PlaneContext * const p;\n+    RangeCoder * const c;\n+    int a;\n+    put_symbol(c, p->state[a]);\n+}"}, {"sha": "9bd122adc47ae34f7f62f468cc43c40c84ddfe71", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a613caeb327ae1500e1382f7d679d42fad07a63/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a613caeb327ae1500e1382f7d679d42fad07a63/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=8a613caeb327ae1500e1382f7d679d42fad07a63", "patch": "@@ -1765,7 +1765,8 @@ pointer_offset_p (tree expr)\n /* EXPR is a scalar evolution of a pointer that is dereferenced or used in\n    comparison.  This means that it must point to a part of some object in\n    memory, which enables us to argue about overflows and possibly simplify\n-   the EXPR.  Returns the simplified value.\n+   the EXPR.  AT_STMT is the statement in which this conversion has to be\n+   performed.  Returns the simplified value.\n \n    Currently, for\n \n@@ -1820,7 +1821,7 @@ pointer_offset_p (tree expr)\n    bugs.  */\n \n static tree\n-fold_used_pointer (tree expr)\n+fold_used_pointer (tree expr, tree at_stmt)\n {\n   tree op0, op1, new0, new1;\n   enum tree_code code = TREE_CODE (expr);\n@@ -1833,20 +1834,23 @@ fold_used_pointer (tree expr)\n \n       if (pointer_offset_p (op1))\n \t{\n-\t  new0 = fold_used_pointer (op0);\n+\t  new0 = fold_used_pointer (op0, at_stmt);\n \t  new1 = fold_used_pointer_cast (op1);\n \t}\n       else if (code == PLUS_EXPR && pointer_offset_p (op0))\n \t{\n \t  new0 = fold_used_pointer_cast (op0);\n-\t  new1 = fold_used_pointer (op1);\n+\t  new1 = fold_used_pointer (op1, at_stmt);\n \t}\n       else\n \treturn expr;\n \n       if (new0 == op0 && new1 == op1)\n \treturn expr;\n \n+      new0 = chrec_convert (TREE_TYPE (expr), new0, at_stmt);\n+      new1 = chrec_convert (TREE_TYPE (expr), new1, at_stmt);\n+\n       if (code == PLUS_EXPR)\n \texpr = chrec_fold_plus (TREE_TYPE (expr), new0, new1);\n       else\n@@ -1948,7 +1952,7 @@ analyze_scalar_evolution_1 (struct loop *loop, tree var, tree res)\n       if (POINTER_TYPE_P (type)\n \t  && !automatically_generated_chrec_p (res)\n \t  && pointer_used_p (var))\n-\tres = fold_used_pointer (res);\n+\tres = fold_used_pointer (res, def);\n       break;\n \n     case PHI_NODE:"}]}