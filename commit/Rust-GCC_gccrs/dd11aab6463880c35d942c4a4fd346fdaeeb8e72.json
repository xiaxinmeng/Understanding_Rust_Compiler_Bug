{"sha": "dd11aab6463880c35d942c4a4fd346fdaeeb8e72", "node_id": "C_kwDOANBUbNoAKGRkMTFhYWI2NDYzODgwYzM1ZDk0MmM0YTRmZDM0NmZkYWVlYjhlNzI", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-09-06T15:40:16Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-09-27T14:59:38Z"}, "message": "Come up with section_flag enum.\n\ngcc/ChangeLog:\n\n\t* output.h (enum section_flag): New.\n\t(SECTION_FORGET): Remove.\n\t(SECTION_ENTSIZE): Make it (1UL << 8) - 1.\n\t(SECTION_STYLE_MASK): Define it based on other enum\n\tvalues.\n\t* varasm.c (switch_to_section): Remove unused handling of\n\tSECTION_FORGET.", "tree": {"sha": "e1c4fad9ef9ce65f8f3d1da72d0aa8d84e533769", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1c4fad9ef9ce65f8f3d1da72d0aa8d84e533769"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd11aab6463880c35d942c4a4fd346fdaeeb8e72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd11aab6463880c35d942c4a4fd346fdaeeb8e72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd11aab6463880c35d942c4a4fd346fdaeeb8e72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd11aab6463880c35d942c4a4fd346fdaeeb8e72/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a64697d7a3e0bf9e5b0d79e253f2b7dc3eb2fb00"}], "stats": {"total": 90, "additions": 48, "deletions": 42}, "files": [{"sha": "8f6f15308f4a4f5ad0948c416940288b85fb9e26", "filename": "gcc/output.h", "status": "modified", "additions": 47, "deletions": 38, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd11aab6463880c35d942c4a4fd346fdaeeb8e72/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd11aab6463880c35d942c4a4fd346fdaeeb8e72/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=dd11aab6463880c35d942c4a4fd346fdaeeb8e72", "patch": "@@ -365,44 +365,53 @@ extern void default_function_switched_text_sections (FILE *, tree, bool);\n extern void no_asm_to_stream (FILE *);\n \n /* Flags controlling properties of a section.  */\n-#define SECTION_ENTSIZE\t 0x000ff\t/* entity size in section */\n-#define SECTION_CODE\t 0x00100\t/* contains code */\n-#define SECTION_WRITE\t 0x00200\t/* data is writable */\n-#define SECTION_DEBUG\t 0x00400\t/* contains debug data */\n-#define SECTION_LINKONCE 0x00800\t/* is linkonce */\n-#define SECTION_SMALL\t 0x01000\t/* contains \"small data\" */\n-#define SECTION_BSS\t 0x02000\t/* contains zeros only */\n-#define SECTION_FORGET\t 0x04000\t/* forget that we've entered the section */\n-#define SECTION_MERGE\t 0x08000\t/* contains mergeable data */\n-#define SECTION_STRINGS  0x10000\t/* contains zero terminated strings without\n-\t\t\t\t\t   embedded zeros */\n-#define SECTION_OVERRIDE 0x20000\t/* allow override of default flags */\n-#define SECTION_TLS\t 0x40000\t/* contains thread-local storage */\n-#define SECTION_NOTYPE\t 0x80000\t/* don't output @progbits */\n-#define SECTION_DECLARED 0x100000\t/* section has been used */\n-#define SECTION_STYLE_MASK 0x600000\t/* bits used for SECTION_STYLE */\n-#define SECTION_COMMON   0x800000\t/* contains common data */\n-#define SECTION_RELRO\t 0x1000000\t/* data is readonly after relocation processing */\n-#define SECTION_EXCLUDE  0x2000000\t/* discarded by the linker */\n-#define SECTION_RETAIN\t 0x4000000\t/* retained by the linker.  */\n-#define SECTION_LINK_ORDER 0x8000000\t/* section needs link-order.  */\n-\n-/* NB: The maximum SECTION_MACH_DEP is 0x10000000 since AVR needs 4 bits\n-   in SECTION_MACH_DEP.  */\n-#define SECTION_MACH_DEP 0x10000000\t/* subsequent bits reserved for target */\n-\n-/* This SECTION_STYLE is used for unnamed sections that we can switch\n-   to using a special assembler directive.  */\n-#define SECTION_UNNAMED\t 0x000000\n-\n-/* This SECTION_STYLE is used for named sections that we can switch\n-   to using a general section directive.  */\n-#define SECTION_NAMED\t 0x200000\n-\n-/* This SECTION_STYLE is used for sections that we cannot switch to at\n-   all.  The choice of section is implied by the directive that we use\n-   to declare the object.  */\n-#define SECTION_NOSWITCH 0x400000\n+enum section_flag\n+{\n+  /* This SECTION_STYLE is used for unnamed sections that we can switch\n+     to using a special assembler directive.  */\n+  SECTION_UNNAMED = 0,\n+\n+  SECTION_ENTSIZE = (1UL << 8) - 1,\t/* entity size in section */\n+  SECTION_CODE = 1UL << 8,\t\t/* contains code */\n+  SECTION_WRITE = 1UL << 9,\t\t/* data is writable */\n+\n+  SECTION_DEBUG = 1UL << 10,\t\t/* contains debug data */\n+  SECTION_LINKONCE = 1UL << 11,\t\t/* is linkonce */\n+  SECTION_SMALL = 1UL << 12,\t\t/* contains \"small data\" */\n+  SECTION_BSS = 1UL << 13,\t\t/* contains zeros only */\n+  SECTION_MERGE = 1UL << 14,\t\t/* contains mergeable data */\n+  SECTION_STRINGS = 1UL << 15,\t\t/* contains zero terminated strings\n+\t\t\t\t\t   without embedded zeros */\n+  SECTION_OVERRIDE = 1UL << 16,\t\t/* allow override of default flags */\n+  SECTION_TLS = 1UL << 17,\t\t/* contains thread-local storage */\n+  SECTION_NOTYPE = 1UL << 18,\t\t/* don't output @progbits */\n+  SECTION_DECLARED = 1UL << 19,\t\t/* section has been used */\n+\n+  /* This SECTION_STYLE is used for named sections that we can switch\n+     to using a general section directive.  */\n+  SECTION_NAMED = 1UL << 20,\n+\n+  /* This SECTION_STYLE is used for sections that we cannot switch to at\n+     all.  The choice of section is implied by the directive that we use\n+     to declare the object.  */\n+  SECTION_NOSWITCH = 1UL << 21,\n+\n+  /* bits used for SECTION_STYLE */\n+  SECTION_STYLE_MASK = SECTION_NAMED | SECTION_NOSWITCH,\n+\n+  SECTION_COMMON = 1UL << 22,\t\t/* contains common data */\n+  SECTION_RELRO = 1UL << 23,\t\t/* data is readonly after\n+\t\t\t\t\t   relocation processing */\n+  SECTION_EXCLUDE = 1UL << 24,\t\t/* discarded by the linker */\n+  SECTION_RETAIN = 1UL << 25,\t\t/* retained by the linker.  */\n+  SECTION_LINK_ORDER = 1UL << 26,\t/* section needs link-order.  */\n+\n+  /* NB: The maximum SECTION_MACH_DEP is (1UL << 28) since AVR needs 4 bits\n+     in SECTION_MACH_DEP.  */\n+  SECTION_MACH_DEP = 1UL << 27,\n+\n+  /* subsequent bits reserved for target */\n+};\n \n /* A helper function for default_elf_select_section and\n    default_elf_unique_section.  Categorizes the DECL.  */"}, {"sha": "09316c62050faeebe7df01964947992114a605cb", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd11aab6463880c35d942c4a4fd346fdaeeb8e72/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd11aab6463880c35d942c4a4fd346fdaeeb8e72/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=dd11aab6463880c35d942c4a4fd346fdaeeb8e72", "patch": "@@ -7827,10 +7827,7 @@ switch_to_section (section *new_section, tree decl)\n   else if (in_section == new_section)\n     return;\n \n-  if (new_section->common.flags & SECTION_FORGET)\n-    in_section = NULL;\n-  else\n-    in_section = new_section;\n+  in_section = new_section;\n \n   switch (SECTION_STYLE (new_section))\n     {"}]}