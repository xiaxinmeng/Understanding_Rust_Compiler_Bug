{"sha": "628c06d6bc47c3a1487ecd41eb12d13a968d4480", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI4YzA2ZDZiYzQ3YzNhMTQ4N2VjZDQxZWIxMmQxM2E5NjhkNDQ4MA==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2017-05-11T20:40:49Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2017-05-11T20:40:49Z"}, "message": "re PR fortran/78659 ([F03] Spurious \"requires DTIO\" reported against namelist statement)\n\n2017-05-11  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR fortran/78659\n\t* io.c (dtio_procs_present): Add new function to check for DTIO\n\tprocedures relative to I/O statement READ or WRITE.\n\t(gfc_resolve_dt): Add namelist checks using the new function.\n\t* resolve.c (dtio_procs_present): Remove function and related\n\tnamelist checks. (resolve_fl_namelist): Add check specific to\n\tFortran 95 restriction on namelist objects.\n\n\t* gfortran.dg/namelist_91.f90: New test.\n\t* gfortran.dg/namelist_92.f90: New test.\n\t* gfortran.dg/namelist_93.f90: New test.\n\t* gfortran.dg/namelist_94.f90: New test.\n\nFrom-SVN: r247930", "tree": {"sha": "11ba4a43cb483cd064d84fb831bfb282e5a50823", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11ba4a43cb483cd064d84fb831bfb282e5a50823"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/628c06d6bc47c3a1487ecd41eb12d13a968d4480", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628c06d6bc47c3a1487ecd41eb12d13a968d4480", "html_url": "https://github.com/Rust-GCC/gccrs/commit/628c06d6bc47c3a1487ecd41eb12d13a968d4480", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628c06d6bc47c3a1487ecd41eb12d13a968d4480/comments", "author": null, "committer": null, "parents": [{"sha": "fee84d551f8cc48c79d92a2af1ccfa2272bed215", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fee84d551f8cc48c79d92a2af1ccfa2272bed215", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fee84d551f8cc48c79d92a2af1ccfa2272bed215"}], "stats": {"total": 224, "additions": 169, "deletions": 55}, "files": [{"sha": "e56a9b9b0d044dd706d28c52fc98bec4f9d5ecf1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628c06d6bc47c3a1487ecd41eb12d13a968d4480/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628c06d6bc47c3a1487ecd41eb12d13a968d4480/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=628c06d6bc47c3a1487ecd41eb12d13a968d4480", "patch": "@@ -1,3 +1,13 @@\n+2017-05-11  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/78659\n+\t* io.c (dtio_procs_present): Add new function to check for DTIO\n+\tprocedures relative to I/O statement READ or WRITE.\n+\t(gfc_resolve_dt): Add namelist checks using the new function.\n+\t* resolve.c (dtio_procs_present): Remove function and related\n+\tnamelist checks. (resolve_fl_namelist): Add check specific to\n+\tFortran 95 restriction on namelist objects.\n+\n 2017-05-11  Nathan Sidwell  <nathan@acm.org>\n \t\n \t* trans-decl.c: Include dumpfile.h not tree-dump.h,"}, {"sha": "b2fa741d03f0dc39f5b4e7dfc17cfb23acb531e9", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 67, "deletions": 10, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628c06d6bc47c3a1487ecd41eb12d13a968d4480/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628c06d6bc47c3a1487ecd41eb12d13a968d4480/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=628c06d6bc47c3a1487ecd41eb12d13a968d4480", "patch": "@@ -2966,6 +2966,30 @@ match_dt_format (gfc_dt *dt)\n   return MATCH_ERROR;\n }\n \n+/* Check for formatted read and write DTIO procedures.  */\n+\n+static bool\n+dtio_procs_present (gfc_symbol *sym, io_kind k)\n+{\n+  gfc_symbol *derived;\n+\n+  if (sym && sym->ts.u.derived)\n+    {\n+      if (sym->ts.type == BT_CLASS && CLASS_DATA (sym))\n+\tderived = CLASS_DATA (sym)->ts.u.derived;\n+      else if (sym->ts.type == BT_DERIVED)\n+\tderived = sym->ts.u.derived;\n+      else\n+\treturn false;\n+      if ((k == M_WRITE || k == M_PRINT) && \n+\t  (gfc_find_specific_dtio_proc (derived, true, true) != NULL))\n+\treturn true;\n+      if ((k == M_READ) &&\n+\t  (gfc_find_specific_dtio_proc (derived, false, true) != NULL))\n+\treturn true;\n+    }\n+  return false;\n+}\n \n /* Traverse a namelist that is part of a READ statement to make sure\n    that none of the variables in the namelist are INTENT(IN).  Returns\n@@ -3244,25 +3268,58 @@ gfc_resolve_dt (gfc_dt *dt, locus *loc)\n \n   /* If we are reading and have a namelist, check that all namelist symbols\n      can appear in a variable definition context.  */\n-  if (k == M_READ && dt->namelist)\n+  if (dt->namelist)\n     {\n       gfc_namelist* n;\n       for (n = dt->namelist->namelist; n; n = n->next)\n \t{\n \t  gfc_expr* e;\n \t  bool t;\n \n-\t  e = gfc_get_variable_expr (gfc_find_sym_in_symtree (n->sym));\n-\t  t = gfc_check_vardef_context (e, false, false, false, NULL);\n-\t  gfc_free_expr (e);\n+\t  if (k == M_READ)\n+\t    {\n+\t      e = gfc_get_variable_expr (gfc_find_sym_in_symtree (n->sym));\n+\t      t = gfc_check_vardef_context (e, false, false, false, NULL);\n+\t      gfc_free_expr (e);\n+    \n+\t      if (!t)\n+\t\t{\n+\t\t  gfc_error (\"NAMELIST %qs in READ statement at %L contains\"\n+\t\t\t     \" the symbol %qs which may not appear in a\"\n+\t\t\t     \" variable definition context\",\n+\t\t\t     dt->namelist->name, loc, n->sym->name);\n+\t\t  return false;\n+\t\t}\n+\t    }\n+\n+\t  t = dtio_procs_present (n->sym, k);\n \n-\t  if (!t)\n+\t  if (n->sym->ts.type == BT_CLASS && !t)\n \t    {\n-\t      gfc_error (\"NAMELIST %qs in READ statement at %L contains\"\n-\t\t\t \" the symbol %qs which may not appear in a\"\n-\t\t\t \" variable definition context\",\n-\t\t\t dt->namelist->name, loc, n->sym->name);\n-\t      return false;\n+\t      gfc_error (\"NAMELIST object %qs in namelist %qs at %L is \"\n+\t\t\t \"polymorphic and requires a defined input/output \"\n+\t\t\t \"procedure\", n->sym->name, dt->namelist->name, loc);\n+\t      return 1;\n+\t    }\n+    \n+\t  if ((n->sym->ts.type == BT_DERIVED)\n+\t      && (n->sym->ts.u.derived->attr.alloc_comp\n+\t\t  || n->sym->ts.u.derived->attr.pointer_comp))\n+\t    {\n+\t      if (!gfc_notify_std (GFC_STD_F2003, \"NAMELIST object %qs in \"\n+\t\t\t\t   \"namelist %qs at %L with ALLOCATABLE \"\n+\t\t\t\t   \"or POINTER components\", n->sym->name,\n+\t\t\t\t   dt->namelist->name, loc))\n+\t\treturn 1;\n+    \n+\t      if (!t)\n+\t\t{\n+\t\t  gfc_error (\"NAMELIST object %qs in namelist %qs at %L has \"\n+\t\t\t     \"ALLOCATABLE or POINTER components and thus requires \"\n+\t\t\t     \"a defined input/output procedure\", n->sym->name,\n+\t\t\t     dt->namelist->name, loc);\n+\t\t  return 1;\n+\t\t}\n \t    }\n \t}\n     }"}, {"sha": "d50ffdb826ae3df56e4f63b05543689e717d912f", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 11, "deletions": 45, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628c06d6bc47c3a1487ecd41eb12d13a968d4480/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628c06d6bc47c3a1487ecd41eb12d13a968d4480/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=628c06d6bc47c3a1487ecd41eb12d13a968d4480", "patch": "@@ -13846,31 +13846,11 @@ resolve_fl_derived (gfc_symbol *sym)\n }\n \n \n-/* Check for formatted read and write DTIO procedures.  */\n-\n-static bool\n-dtio_procs_present (gfc_symbol *sym)\n-{\n-  gfc_symbol *derived;\n-\n-  if (sym->ts.type == BT_CLASS)\n-    derived = CLASS_DATA (sym)->ts.u.derived;\n-  else if (sym->ts.type == BT_DERIVED)\n-    derived = sym->ts.u.derived;\n-  else\n-    return false;\n-\n-  return gfc_find_specific_dtio_proc (derived, true, true) != NULL\n-\t && gfc_find_specific_dtio_proc (derived, false, true) != NULL;\n-}\n-\n-\n static bool\n resolve_fl_namelist (gfc_symbol *sym)\n {\n   gfc_namelist *nl;\n   gfc_symbol *nlsym;\n-  bool dtio;\n \n   for (nl = sym->namelist; nl; nl = nl->next)\n     {\n@@ -13904,27 +13884,6 @@ resolve_fl_namelist (gfc_symbol *sym)\n \t\t\t      sym->name, &sym->declared_at))\n \treturn false;\n \n-      dtio = dtio_procs_present (nl->sym);\n-\n-      if (nl->sym->ts.type == BT_CLASS && !dtio)\n-\t{\n-\t  gfc_error (\"NAMELIST object %qs in namelist %qs at %L is \"\n-\t\t     \"polymorphic and requires a defined input/output \"\n-\t\t     \"procedure\", nl->sym->name, sym->name, &sym->declared_at);\n-\t  return false;\n-\t}\n-\n-      if (nl->sym->ts.type == BT_DERIVED\n-\t  && (nl->sym->ts.u.derived->attr.alloc_comp\n-\t      || nl->sym->ts.u.derived->attr.pointer_comp))\n-\t{\n-\t  if (!gfc_notify_std (GFC_STD_F2003, \"NAMELIST object %qs in \"\n-\t\t\t       \"namelist %qs at %L with ALLOCATABLE \"\n-\t\t\t       \"or POINTER components\", nl->sym->name,\n-\t\t\t       sym->name, &sym->declared_at))\n-\t    return false;\n-\t  return true;\n-\t}\n     }\n \n   /* Reject PRIVATE objects in a PUBLIC namelist.  */\n@@ -13942,10 +13901,17 @@ resolve_fl_namelist (gfc_symbol *sym)\n \t      return false;\n \t    }\n \n-\t  /* If the derived type has specific DTIO procedures for both read and\n-\t     write then namelist objects with private components are OK.  */\n-\t  if (dtio_procs_present (nl->sym))\n-\t    continue;\n+\t  if (nl->sym->ts.type == BT_DERIVED\n+\t     && (nl->sym->ts.u.derived->attr.alloc_comp\n+\t\t || nl->sym->ts.u.derived->attr.pointer_comp))\n+\t   {\n+\t     if (!gfc_notify_std (GFC_STD_F2003, \"NAMELIST object %qs in \"\n+\t\t\t\t  \"namelist %qs at %L with ALLOCATABLE \"\n+\t\t\t\t  \"or POINTER components\", nl->sym->name,\n+\t\t\t\t  sym->name, &sym->declared_at))\n+\t       return false;\n+\t     return true;\n+\t   }\n \n \t  /* Types with private components that came here by USE-association.  */\n \t  if (nl->sym->ts.type == BT_DERIVED"}, {"sha": "1d522ba86776a366135bc3acb8f3acd78e60a98b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628c06d6bc47c3a1487ecd41eb12d13a968d4480/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628c06d6bc47c3a1487ecd41eb12d13a968d4480/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=628c06d6bc47c3a1487ecd41eb12d13a968d4480", "patch": "@@ -1,3 +1,11 @@\n+2017-05-11  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/78659\n+\t* gfortran.dg/namelist_91.f90: New test.\n+\t* gfortran.dg/namelist_92.f90: New test.\n+\t* gfortran.dg/namelist_93.f90: New test.\n+\t* gfortran.dg/namelist_94.f90: New test.\n+\n 2017-05-11  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR target/80695"}, {"sha": "672e3f61d6edc5e54b481e145d66abdf19786900", "filename": "gcc/testsuite/gfortran.dg/namelist_91.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628c06d6bc47c3a1487ecd41eb12d13a968d4480/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_91.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628c06d6bc47c3a1487ecd41eb12d13a968d4480/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_91.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_91.f90?ref=628c06d6bc47c3a1487ecd41eb12d13a968d4480", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do compile }\n+! PR78659 Spurious \"requires DTIO\" reported against namelist statement\n+program p\n+   type t\n+     integer :: k\n+   end type\n+   class(t), allocatable :: x\n+   namelist /nml/ x\n+end"}, {"sha": "fc678caacb7bbae1081234bfa10dc06814e47c49", "filename": "gcc/testsuite/gfortran.dg/namelist_92.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628c06d6bc47c3a1487ecd41eb12d13a968d4480/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_92.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628c06d6bc47c3a1487ecd41eb12d13a968d4480/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_92.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_92.f90?ref=628c06d6bc47c3a1487ecd41eb12d13a968d4480", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+! PR78659 Spurious \"requires DTIO\" reported against namelist statement\n+MODULE ma\n+  IMPLICIT NONE\n+  TYPE :: ta\n+    INTEGER, allocatable :: array(:)\n+  END TYPE ta\n+END MODULE ma\n+\n+PROGRAM p\n+  USE ma\n+  type(ta):: x\n+  NAMELIST /nml/ x\n+  WRITE (*, nml) ! { dg-error \"has ALLOCATABLE or POINTER components and thus requires a defined input/output\" }\n+  READ (*, nml) ! { dg-error \"has ALLOCATABLE or POINTER components and thus requires a defined input/output\" }\n+END PROGRAM p"}, {"sha": "f4e26bc8af3e07cf2bbf7bd62ea59365e563d6a6", "filename": "gcc/testsuite/gfortran.dg/namelist_93.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628c06d6bc47c3a1487ecd41eb12d13a968d4480/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_93.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628c06d6bc47c3a1487ecd41eb12d13a968d4480/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_93.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_93.f90?ref=628c06d6bc47c3a1487ecd41eb12d13a968d4480", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+! PR78659 Spurious \"requires DTIO\" reported against namelist statement\n+MODULE ma\n+  IMPLICIT NONE\n+  TYPE :: ta\n+    INTEGER, allocatable :: array(:)\n+  END TYPE ta\n+END MODULE ma\n+\n+PROGRAM p\n+  USE ma\n+  class(ta), allocatable :: x\n+  NAMELIST /nml/ x\n+  WRITE (*, nml)! { dg-error \"is polymorphic and requires a defined input/output procedure\" }\n+  READ (*, nml) ! { dg-error \"is polymorphic and requires a defined input/output procedure\" }\n+END PROGRAM p"}, {"sha": "d0344f76d4d454033053304926cf45b09fca5533", "filename": "gcc/testsuite/gfortran.dg/namelist_94.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628c06d6bc47c3a1487ecd41eb12d13a968d4480/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_94.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628c06d6bc47c3a1487ecd41eb12d13a968d4480/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_94.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_94.f90?ref=628c06d6bc47c3a1487ecd41eb12d13a968d4480", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do compile }\n+! PR78659 Spurious \"requires DTIO\" reported against namelist statement\n+MODULE m\n+  IMPLICIT NONE\n+  TYPE :: t\n+    CHARACTER :: c\n+  CONTAINS\n+    PROCEDURE :: write_formatted\n+    GENERIC :: WRITE(FORMATTED) => write_formatted\n+  END TYPE\n+CONTAINS\n+  SUBROUTINE write_formatted(dtv, unit, iotype, v_list, iostat, iomsg)\n+    CLASS(t), INTENT(IN) :: dtv\n+    INTEGER, INTENT(IN) :: unit\n+    CHARACTER(*), INTENT(IN) :: iotype\n+    INTEGER, INTENT(IN) :: v_list(:)\n+    INTEGER, INTENT(OUT) :: iostat\n+    CHARACTER(*), INTENT(INOUT) :: iomsg\n+    WRITE (unit, \"(A)\", IOSTAT=iostat, IOMSG=iomsg) dtv%c\n+    print *, \"what\"\n+  END SUBROUTINE\n+END MODULE\n+\n+PROGRAM p\n+  USE m\n+  IMPLICIT NONE\n+  class(t), allocatable :: x\n+  NAMELIST /nml/ x\n+  x = t('a')\n+  WRITE (*, nml)\n+  READ (*, nml) ! { dg-error \"is polymorphic and requires a defined input/output procedure\" }\n+END"}]}