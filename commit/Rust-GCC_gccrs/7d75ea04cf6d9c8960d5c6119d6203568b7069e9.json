{"sha": "7d75ea04cf6d9c8960d5c6119d6203568b7069e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q3NWVhMDRjZjZkOWM4OTYwZDVjNjExOWQ2MjAzNTY4YjcwNjllOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-04-25T07:10:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-04-25T07:10:16Z"}, "message": "re PR c++/85437 (member pointer static upcast rejected in a constexpr context)\n\n\tPR c++/85437\n\tPR c++/49171\n\t* cp-tree.h (REINTERPRET_CAST_P): New.\n\t* constexpr.c (cxx_eval_constant_expression) <case NOP_EXPR>:\n\tReject REINTERPET_CAST_P conversions.  Use cplus_expand_constant\n\tfor non-trivial PTRMEM_CST cases.\n\t* typeck.c (build_nop_reinterpret): New.\n\t(build_reinterpret_cast_1): Use it.  Set REINTERPRET_CAST_P on\n\tNOP_EXPRs returned by cp_convert.\n\n\t* g++.dg/cpp0x/addressof1.C: Make reinterpret cases runtime checks.\n\t* g++.dg/cpp0x/constexpr-cast.C: Remove xfails\n\t* g++.dg/cpp0x/constexpr-nullptr-2.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-pmf1.C: Check when optimized.\n\t* g++.dg/cpp0x/pr85437-1.C: New.\n\t* g++.dg/cpp0x/pr85437-2.C: New.\n\t* g++.dg/cpp0x/pr85437-3.C: New.\n\t* g++.dg/cpp0x/pr85437-4.C: New.\n\nFrom-SVN: r259629", "tree": {"sha": "0bb4f2c59a7c078ae71479a2a88c3202e7e2c396", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bb4f2c59a7c078ae71479a2a88c3202e7e2c396"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d75ea04cf6d9c8960d5c6119d6203568b7069e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d75ea04cf6d9c8960d5c6119d6203568b7069e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d75ea04cf6d9c8960d5c6119d6203568b7069e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/comments", "author": null, "committer": null, "parents": [{"sha": "908553397a611a367ac71670750d7025bffdf5c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/908553397a611a367ac71670750d7025bffdf5c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/908553397a611a367ac71670750d7025bffdf5c1"}], "stats": {"total": 165, "additions": 132, "deletions": 33}, "files": [{"sha": "037870627f926752caa13a535553aa3ae3564691", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7d75ea04cf6d9c8960d5c6119d6203568b7069e9", "patch": "@@ -1,3 +1,15 @@\n+2018-04-25  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/85437\n+\tPR c++/49171\n+\t* cp-tree.h (REINTERPRET_CAST_P): New.\n+\t* constexpr.c (cxx_eval_constant_expression) <case NOP_EXPR>:\n+\tReject REINTERPET_CAST_P conversions.  Use cplus_expand_constant\n+\tfor non-trivial PTRMEM_CST cases.\n+\t* typeck.c (build_nop_reinterpret): New.\n+\t(build_reinterpret_cast_1): Use it.  Set REINTERPRET_CAST_P on\n+\tNOP_EXPRs returned by cp_convert.\n+\n 2018-04-23  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/69560 - wrong alignof(double) on x86."}, {"sha": "b4bcc6a567d02cfe4485cdffe685a08ecb6a6fdc", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=7d75ea04cf6d9c8960d5c6119d6203568b7069e9", "patch": "@@ -1822,8 +1822,8 @@ reduced_constant_expression_p (tree t)\n }\n \n /* Some expressions may have constant operands but are not constant\n-   themselves, such as 1/0.  Call this function (or rather, the macro\n-   following it) to check for that condition.\n+   themselves, such as 1/0.  Call this function to check for that\n+   condition.\n \n    We only call this in places that require an arithmetic constant, not in\n    places where we might have a non-constant expression that can be a\n@@ -4579,9 +4579,18 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t\t\t\t       non_constant_p, overflow_p);\n       break;\n \n+    case NOP_EXPR:\n+      if (REINTERPRET_CAST_P (t))\n+\t{\n+\t  if (!ctx->quiet)\n+\t    error_at (EXPR_LOC_OR_LOC (t, input_location),\n+\t\t      \"a reinterpret_cast is not a constant expression\");\n+\t  *non_constant_p = true;\n+\t  return t;\n+\t}\n+      /* FALLTHROUGH.  */\n     case CONVERT_EXPR:\n     case VIEW_CONVERT_EXPR:\n-    case NOP_EXPR:\n     case UNARY_PLUS_EXPR:\n       {\n \ttree oldop = TREE_OPERAND (t, 0);\n@@ -4595,20 +4604,13 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \tif (TREE_CODE (op) == PTRMEM_CST\n \t    && !TYPE_PTRMEM_P (type))\n \t  op = cplus_expand_constant (op);\n+\n \tif (TREE_CODE (op) == PTRMEM_CST && tcode == NOP_EXPR)\n \t  {\n-\t    if (same_type_ignoring_top_level_qualifiers_p (type,\n-\t\t\t\t\t\t\t   TREE_TYPE (op))\n-\t\t|| can_convert_qual (type, op))\n-\t      return cp_fold_convert (type, op);\n-\t    else\n-\t      {\n-\t\tif (!ctx->quiet)\n-\t\t  error_at (EXPR_LOC_OR_LOC (t, input_location),\n-\t\t\t    \"a reinterpret_cast is not a constant expression\");\n-\t\t*non_constant_p = true;\n-\t\treturn t;\n-\t      }\n+\t    if (!same_type_ignoring_top_level_qualifiers_p (type, TREE_TYPE (op))\n+\t\t&& !can_convert_qual (type, op))\n+\t      op = cplus_expand_constant (op);\n+\t    return cp_fold_convert (type, op);\n \t  }\n \n \tif (POINTER_TYPE_P (type) && TREE_CODE (op) == INTEGER_CST)\n@@ -4653,14 +4655,17 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t\treturn t;\n \t      }\n \t  }\n+\n \tif (op == oldop && tcode != UNARY_PLUS_EXPR)\n \t  /* We didn't fold at the top so we could check for ptr-int\n \t     conversion.  */\n \t  return fold (t);\n+\n \tif (tcode == UNARY_PLUS_EXPR)\n \t  r = fold_convert (TREE_TYPE (t), op);\n \telse\n \t  r = fold_build1 (tcode, type, op);\n+\n \t/* Conversion of an out-of-range value has implementation-defined\n \t   behavior; the language considers it different from arithmetic\n \t   overflow, which is undefined.  */"}, {"sha": "72e4080b8332c7f0b0298126ba815116df4478dd", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7d75ea04cf6d9c8960d5c6119d6203568b7069e9", "patch": "@@ -372,6 +372,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       TEMPLATE_TYPE_PARM_FOR_CLASS (TEMPLATE_TYPE_PARM)\n       DECL_NAMESPACE_INLINE_P (in NAMESPACE_DECL)\n       SWITCH_STMT_ALL_CASES_P (in SWITCH_STMT)\n+      REINTERPRET_CAST_P (in NOP_EXPR)\n       ALIGNOF_EXPR_STD_P (in ALIGNOF_EXPR)\n    1: IDENTIFIER_KIND_BIT_1 (in IDENTIFIER_NODE)\n       TI_PENDING_TEMPLATE_FLAG.\n@@ -632,6 +633,11 @@ typedef struct ptrmem_cst * ptrmem_cst_t;\n #define COND_EXPR_IS_VEC_DELETE(NODE) \\\n   TREE_LANG_FLAG_0 (COND_EXPR_CHECK (NODE))\n \n+/* Nonzero if this NOP_EXPR is a reinterpret_cast.  Such conversions\n+   are not constexprs.  Other NOP_EXPRs are.  */\n+#define REINTERPRET_CAST_P(NODE)\t\t\\\n+  TREE_LANG_FLAG_0 (NOP_EXPR_CHECK (NODE))\n+\n /* Returns nonzero iff TYPE1 and TYPE2 are the same type, in the usual\n    sense of `same'.  */\n #define same_type_p(TYPE1, TYPE2) \\"}, {"sha": "907d31d9786c8eeceba74d98190117f9a2779cd5", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=7d75ea04cf6d9c8960d5c6119d6203568b7069e9", "patch": "@@ -7280,6 +7280,18 @@ convert_member_func_to_ptr (tree type, tree expr, tsubst_flags_t complain)\n   return build_nop (type, expr);\n }\n \n+/* Build a NOP_EXPR to TYPE, but mark it as a reinterpret_cast so that\n+   constexpr evaluation knows to reject it.  */\n+\n+static tree\n+build_nop_reinterpret (tree type, tree expr)\n+{\n+  tree ret = build_nop (type, expr);\n+  if (ret != expr)\n+    REINTERPRET_CAST_P (ret) = true;\n+  return ret;\n+}\n+\n /* Return a representation for a reinterpret_cast from EXPR to TYPE.\n    If C_CAST_P is true, this reinterpret cast is being done as part of\n    a C-style cast.  If VALID_P is non-NULL, *VALID_P is set to\n@@ -7414,7 +7426,7 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n \twarning (OPT_Wcast_function_type,\n \t\t \"cast between incompatible function types\"\n \t\t \" from %qH to %qI\", intype, type);\n-      return build_nop (type, expr);\n+      return build_nop_reinterpret (type, expr);\n     }\n   else if (TYPE_PTRMEMFUNC_P (type) && TYPE_PTRMEMFUNC_P (intype))\n     {\n@@ -7425,7 +7437,7 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n \twarning (OPT_Wcast_function_type,\n \t\t \"cast between incompatible pointer to member types\"\n \t\t \" from %qH to %qI\", intype, type);\n-      return build_nop (type, expr);\n+      return build_nop_reinterpret (type, expr);\n     }\n   else if ((TYPE_PTRDATAMEM_P (type) && TYPE_PTRDATAMEM_P (intype))\n \t   || (TYPE_PTROBV_P (type) && TYPE_PTROBV_P (intype)))\n@@ -7451,7 +7463,7 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n \t/* strict_aliasing_warning STRIP_NOPs its expr.  */\n \tstrict_aliasing_warning (EXPR_LOCATION (expr), type, expr);\n \n-      return build_nop (type, expr);\n+      return build_nop_reinterpret (type, expr);\n     }\n   else if ((TYPE_PTRFN_P (type) && TYPE_PTROBV_P (intype))\n \t   || (TYPE_PTRFN_P (intype) && TYPE_PTROBV_P (type)))\n@@ -7462,7 +7474,7 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n \twarning (OPT_Wconditionally_supported,\n \t\t \"casting between pointer-to-function and pointer-to-object \"\n \t\t \"is conditionally-supported\");\n-      return build_nop (type, expr);\n+      return build_nop_reinterpret (type, expr);\n     }\n   else if (VECTOR_TYPE_P (type))\n     return convert_to_vector (type, expr);\n@@ -7478,7 +7490,11 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n       return error_mark_node;\n     }\n \n-  return cp_convert (type, expr, complain);\n+  expr = cp_convert (type, expr, complain);\n+  if (TREE_CODE (expr) == NOP_EXPR)\n+    /* Mark any nop_expr that created as a reintepret_cast.  */\n+    REINTERPRET_CAST_P (expr) = true;\n+  return expr;\n }\n \n tree"}, {"sha": "7a955a68c3eceb5d036aa98facf692c8f03c4c54", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d75ea04cf6d9c8960d5c6119d6203568b7069e9", "patch": "@@ -1,3 +1,17 @@\n+2018-04-25  Nathan Sidwell  <nathan@acm.org>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/85437\n+\tPR c++/49171\n+\t* g++.dg/cpp0x/addressof1.C: Make reinterpret cases runtime checks.\n+\t* g++.dg/cpp0x/constexpr-cast.C: Remove xfails\n+\t* g++.dg/cpp0x/constexpr-nullptr-2.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-pmf1.C: Check when optimized.\n+\t* g++.dg/cpp0x/pr85437-1.C: New.\n+\t* g++.dg/cpp0x/pr85437-2.C: New.\n+\t* g++.dg/cpp0x/pr85437-3.C: New.\n+\t* g++.dg/cpp0x/pr85437-4.C: New.\n+\n 2018-04-24  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/85520\n@@ -8,6 +22,7 @@\n \tPR target/85512\n \t* gcc.dg/pr85512.c: New test.\n \n+2018-04-24  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/85485\n \t* g++.dg/cet-notrack-1.C (dg-options): Remove -mcet."}, {"sha": "be4b5e81d8971dbfda2f4894fb81243ffeaa35aa", "filename": "gcc/testsuite/g++.dg/cpp0x/addressof1.C", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faddressof1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faddressof1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faddressof1.C?ref=7d75ea04cf6d9c8960d5c6119d6203568b7069e9", "patch": "@@ -18,9 +18,7 @@ static_assert (addressof (j) == &i, \"\");\n \n struct S { int s; } s;\n static_assert (__builtin_addressof (s) == &s, \"\");\n-static_assert ((int *) __builtin_addressof (s) == &s.s, \"\");\n static_assert (addressof (s) == &s, \"\");\n-static_assert ((int *) addressof (s) == &s.s, \"\");\n \n struct T\n {\n@@ -31,9 +29,7 @@ struct T\n };\n constexpr T t;\n T T::tt;\n-static_assert (__builtin_addressof (t) == (const T *) &t.p, \"\");\n static_assert (&t == __builtin_addressof (T::tt), \"\");\n-static_assert (addressof (t) == (const T *) &t.p, \"\");\n static_assert (&t == addressof (T::tt), \"\");\n \n struct S x, y;\n@@ -76,8 +72,6 @@ constexpr int a = 1;\n static_assert (__builtin_addressof (a) == &a, \"\");\n static_assert (addressof (a) == &a, \"\");\n constexpr int c[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n-static_assert ((const int *) __builtin_addressof (c) == &c[0], \"\");\n-static_assert ((const int *) addressof (c) == &c[0], \"\");\n \n void\n baz ()\n@@ -93,4 +87,15 @@ main ()\n       || __builtin_addressof (baz) != baz\n       || addressof (baz) != baz)\n     __builtin_abort ();\n+\n+  // reinterpret casts are not constexprs\n+  if (! (((int *) __builtin_addressof (s) == &s.s)\n+\t && ((int *) addressof (s) == &s.s)\n+\t && (__builtin_addressof (t) == (const T *) &t.p)\n+\t && (addressof (t) == (const T *) &t.p)\n+\t && ((const int *) __builtin_addressof (c) == &c[0])\n+\t && ((const int *) addressof (c) == &c[0])))\n+    __builtin_abort ();\n+\n+  return 0;\n }"}, {"sha": "e0c7ed33ac7159304fea4b6f493cf4c344e2b7f0", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-cast.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-cast.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-cast.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-cast.C?ref=7d75ea04cf6d9c8960d5c6119d6203568b7069e9", "patch": "@@ -4,8 +4,8 @@\n \n int i;\n \n-// The following is accepted due to bug 49171.\n-constexpr void *q = reinterpret_cast<void*>(&i);    // { dg-error \"\" \"bug c++/49171\" { xfail *-*-* } }\n+// The following was accepted due to bug 49171.\n+constexpr void *q = reinterpret_cast<void*>(&i);    // { dg-error \"not a constant expression\" }\n \n constexpr void *r0 = reinterpret_cast<void*>(1);    // { dg-error \"not a constant expression|reinterpret_cast from integer to pointer\" }\n constexpr void *r1 = reinterpret_cast<void*>(sizeof 'x');  // { dg-error \".reinterpret_cast<void\\\\*>\\\\(1\\[ul\\]\\*\\\\). is not a constant expression\" }"}, {"sha": "afb4b37be5a369d3a5a5f026332754f08c5bda8c", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-nullptr-2.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-nullptr-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-nullptr-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-nullptr-2.C?ref=7d75ea04cf6d9c8960d5c6119d6203568b7069e9", "patch": "@@ -99,9 +99,8 @@ constexpr const volatile void* pv3 = p0;\n constexpr void* pv4 = static_cast<void*>(p0);\n constexpr const void* pv5 = static_cast<const void*>(p0);\n \n-// The following should be rejected but isn't because of bug c++/49171\n-// - [C++0x][constexpr] Constant expressions support reinterpret_cast\n-constexpr void* pv6 = reinterpret_cast<void*>(p0);   // { dg-error \"\" \"bug c++/49171\" { xfail *-*-* } }\n+// The following was accepted due to bug c++/49171\n+constexpr void* pv6 = reinterpret_cast<void*>(p0);   // { dg-error \"not a constant expression\" }\n \n // Adding or subtracting zero from a null pointer is valid in C++.\n constexpr int* p1 = p0 + 0;"}, {"sha": "84077f34adcb1676bc6534f87ddda3dfabb54852", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-pmf1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-pmf1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-pmf1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-pmf1.C?ref=7d75ea04cf6d9c8960d5c6119d6203568b7069e9", "patch": "@@ -1,6 +1,6 @@\n // PR c++/77775\n-// { dg-options -fdump-tree-gimple }\n-// { dg-final { scan-tree-dump \"== viewAdded\" \"gimple\" { target c++11 } } }\n+// { dg-options \"-fdump-tree-fre1 -O1\" }\n+// { dg-final { scan-tree-dump \"== viewAdded\" \"fre1\" { target c++11 } } }\n \n namespace Sublime {\n struct View;"}, {"sha": "a2f5dab8b59b764685f21b99719162448f95a1d3", "filename": "gcc/testsuite/g++.dg/cpp0x/pr85437-1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr85437-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr85437-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr85437-1.C?ref=7d75ea04cf6d9c8960d5c6119d6203568b7069e9", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/85437\n+// { dg-do compile { target c++11 } }\n+\n+struct A { int a; constexpr A() : a(0) {} };\n+struct B : A { int x; constexpr B() : x(0) {} };\n+struct X { int z; constexpr X() : z(0) {} };\n+struct C : X, B {};\n+constexpr int C::*cbx = &B::x;\n+constexpr int B::*bx = &B::x;\n+constexpr int A::*abx = static_cast<int(A::*)>(&B::x);\t// { dg-bogus \"not a constant expression\" }\n+\n+constexpr const C y;\n+constexpr const B& yb = y;\n+constexpr const A& ya = y;\n+constexpr int const *pcbx = &(y.*cbx);\n+constexpr int const *pbx = &(y.*bx);\n+constexpr int const *pabx = &(ya.*abx);"}, {"sha": "a059e43b770fd3f7c24d4106fbd53038dfc65ebe", "filename": "gcc/testsuite/g++.dg/cpp0x/pr85437-2.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr85437-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr85437-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr85437-2.C?ref=7d75ea04cf6d9c8960d5c6119d6203568b7069e9", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/85437\n+// { dg-do compile { target c++11 } }\n+\n+struct A { };\n+struct B : A { int x; };\n+\n+constexpr int A::*abx\n+= reinterpret_cast<int(A::*)>(&B::x); // { dg-error \"reinterpret.*constant\" }"}, {"sha": "eb0fd559c4de12ee6d329829df5ba04b66407357", "filename": "gcc/testsuite/g++.dg/cpp0x/pr85437-3.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr85437-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr85437-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr85437-3.C?ref=7d75ea04cf6d9c8960d5c6119d6203568b7069e9", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/85437\n+// { dg-do compile { target c++11 } }\n+\n+struct A { int y; };\n+struct B { int x; };\n+struct C : A, B {};\n+constexpr int C::*pci = &B::x;\n+constexpr int A::*pai = static_cast<int A::*>(static_cast<int C::*>(&B::x)); // { dg-bogus \"not a constant expression\" }"}, {"sha": "e69607de51a9b7841c7f28f02a5a67a6c70f366c", "filename": "gcc/testsuite/g++.dg/cpp0x/pr85437-4.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr85437-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d75ea04cf6d9c8960d5c6119d6203568b7069e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr85437-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr85437-4.C?ref=7d75ea04cf6d9c8960d5c6119d6203568b7069e9", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/85437\n+// { dg-do compile { target c++11 } }\n+\n+struct A { };\n+struct B { int x; };\n+struct C : A, B {};\n+constexpr int C::*pci = &B::x;\n+constexpr int A::*pai = static_cast<int A::*>(pci);\t// { dg-bogus \"not a constant expression\" }"}]}