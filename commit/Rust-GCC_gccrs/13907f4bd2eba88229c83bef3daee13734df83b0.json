{"sha": "13907f4bd2eba88229c83bef3daee13734df83b0", "node_id": "C_kwDOANBUbNoAKDEzOTA3ZjRiZDJlYmE4ODIyOWM4M2JlZjNkYWVlMTM3MzRkZjgzYjA", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-10T06:26:07Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T10:31:41Z"}, "message": "RISC-V: Add vssrl.vv C API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/vssrl_vv-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vssrl_vv-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vssrl_vv-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vssrl_vv_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vssrl_vv_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vssrl_vv_m-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vssrl_vv_mu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vssrl_vv_mu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vssrl_vv_mu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vssrl_vv_tu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vssrl_vv_tu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vssrl_vv_tu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vssrl_vv_tum-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vssrl_vv_tum-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vssrl_vv_tum-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vssrl_vv_tumu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vssrl_vv_tumu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vssrl_vv_tumu-3.c: New test.", "tree": {"sha": "c7fd948cfb45965b0795871a1580275174d93720", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7fd948cfb45965b0795871a1580275174d93720"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13907f4bd2eba88229c83bef3daee13734df83b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13907f4bd2eba88229c83bef3daee13734df83b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13907f4bd2eba88229c83bef3daee13734df83b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13907f4bd2eba88229c83bef3daee13734df83b0/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71a1c2c67aa13ae59eef8f2b37fd364d1d18916e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71a1c2c67aa13ae59eef8f2b37fd364d1d18916e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71a1c2c67aa13ae59eef8f2b37fd364d1d18916e"}], "stats": {"total": 2880, "additions": 2880, "deletions": 0}, "files": [{"sha": "8e38ad6096f4fbbde3d7bef3dd33a2d3287c6511", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vssrl_vv-1.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv-1.c?ref=13907f4bd2eba88229c83bef3daee13734df83b0", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vssrl_vv_u8mf8(vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf8(op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vssrl_vv_u8mf4(vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf4(op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vssrl_vv_u8mf2(vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf2(op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vssrl_vv_u8m1(vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m1(op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vssrl_vv_u8m2(vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m2(op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vssrl_vv_u8m4(vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m4(op1,shift,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vssrl_vv_u8m8(vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m8(op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vssrl_vv_u16mf4(vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf4(op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vssrl_vv_u16mf2(vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf2(op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vssrl_vv_u16m1(vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m1(op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vssrl_vv_u16m2(vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m2(op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vssrl_vv_u16m4(vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m4(op1,shift,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vssrl_vv_u16m8(vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m8(op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vssrl_vv_u32mf2(vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32mf2(op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vssrl_vv_u32m1(vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m1(op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vssrl_vv_u32m2(vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m2(op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vssrl_vv_u32m4(vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m4(op1,shift,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vssrl_vv_u32m8(vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m8(op1,shift,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vssrl_vv_u64m1(vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m1(op1,shift,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vssrl_vv_u64m2(vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m2(op1,shift,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vssrl_vv_u64m4(vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m4(op1,shift,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vssrl_vv_u64m8(vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m8(op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "39a28ee828df8873337a61cbc714b89d4c4a3d15", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vssrl_vv-2.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv-2.c?ref=13907f4bd2eba88229c83bef3daee13734df83b0", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vssrl_vv_u8mf8(vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf8(op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vssrl_vv_u8mf4(vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf4(op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vssrl_vv_u8mf2(vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf2(op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vssrl_vv_u8m1(vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m1(op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vssrl_vv_u8m2(vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m2(op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vssrl_vv_u8m4(vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m4(op1,shift,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vssrl_vv_u8m8(vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m8(op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vssrl_vv_u16mf4(vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf4(op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vssrl_vv_u16mf2(vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf2(op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vssrl_vv_u16m1(vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m1(op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vssrl_vv_u16m2(vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m2(op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vssrl_vv_u16m4(vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m4(op1,shift,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vssrl_vv_u16m8(vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m8(op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vssrl_vv_u32mf2(vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32mf2(op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vssrl_vv_u32m1(vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m1(op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vssrl_vv_u32m2(vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m2(op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vssrl_vv_u32m4(vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m4(op1,shift,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vssrl_vv_u32m8(vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m8(op1,shift,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vssrl_vv_u64m1(vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m1(op1,shift,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vssrl_vv_u64m2(vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m2(op1,shift,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vssrl_vv_u64m4(vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m4(op1,shift,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vssrl_vv_u64m8(vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m8(op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "0a8ea53fa0ec3635ff35dd01536b97be90bb3544", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vssrl_vv-3.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv-3.c?ref=13907f4bd2eba88229c83bef3daee13734df83b0", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vssrl_vv_u8mf8(vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf8(op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vssrl_vv_u8mf4(vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf4(op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vssrl_vv_u8mf2(vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf2(op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vssrl_vv_u8m1(vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m1(op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vssrl_vv_u8m2(vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m2(op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vssrl_vv_u8m4(vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m4(op1,shift,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vssrl_vv_u8m8(vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m8(op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vssrl_vv_u16mf4(vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf4(op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vssrl_vv_u16mf2(vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf2(op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vssrl_vv_u16m1(vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m1(op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vssrl_vv_u16m2(vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m2(op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vssrl_vv_u16m4(vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m4(op1,shift,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vssrl_vv_u16m8(vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m8(op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vssrl_vv_u32mf2(vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32mf2(op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vssrl_vv_u32m1(vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m1(op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vssrl_vv_u32m2(vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m2(op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vssrl_vv_u32m4(vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m4(op1,shift,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vssrl_vv_u32m8(vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m8(op1,shift,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vssrl_vv_u64m1(vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m1(op1,shift,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vssrl_vv_u64m2(vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m2(op1,shift,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vssrl_vv_u64m4(vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m4(op1,shift,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vssrl_vv_u64m8(vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m8(op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "998a70976cb604c921ea75fd11dff5936734b2a4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vssrl_vv_m-1.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_m-1.c?ref=13907f4bd2eba88229c83bef3daee13734df83b0", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vssrl_vv_u8mf8_m(vbool64_t mask,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf8_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vssrl_vv_u8mf4_m(vbool32_t mask,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vssrl_vv_u8mf2_m(vbool16_t mask,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vssrl_vv_u8m1_m(vbool8_t mask,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m1_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vssrl_vv_u8m2_m(vbool4_t mask,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vssrl_vv_u8m4_m(vbool2_t mask,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vssrl_vv_u8m8_m(vbool1_t mask,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m8_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vssrl_vv_u16mf4_m(vbool64_t mask,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vssrl_vv_u16mf2_m(vbool32_t mask,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vssrl_vv_u16m1_m(vbool16_t mask,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m1_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vssrl_vv_u16m2_m(vbool8_t mask,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vssrl_vv_u16m4_m(vbool4_t mask,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vssrl_vv_u16m8_m(vbool2_t mask,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m8_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vssrl_vv_u32mf2_m(vbool64_t mask,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32mf2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vssrl_vv_u32m1_m(vbool32_t mask,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m1_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vssrl_vv_u32m2_m(vbool16_t mask,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vssrl_vv_u32m4_m(vbool8_t mask,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vssrl_vv_u32m8_m(vbool4_t mask,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m8_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vssrl_vv_u64m1_m(vbool64_t mask,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m1_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vssrl_vv_u64m2_m(vbool32_t mask,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vssrl_vv_u64m4_m(vbool16_t mask,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vssrl_vv_u64m8_m(vbool8_t mask,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m8_m(mask,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "6715b0f3e7bcebda07becfffad34a14322322c80", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vssrl_vv_m-2.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_m-2.c?ref=13907f4bd2eba88229c83bef3daee13734df83b0", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vssrl_vv_u8mf8_m(vbool64_t mask,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf8_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vssrl_vv_u8mf4_m(vbool32_t mask,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf4_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vssrl_vv_u8mf2_m(vbool16_t mask,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf2_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vssrl_vv_u8m1_m(vbool8_t mask,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m1_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vssrl_vv_u8m2_m(vbool4_t mask,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m2_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vssrl_vv_u8m4_m(vbool2_t mask,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m4_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vssrl_vv_u8m8_m(vbool1_t mask,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m8_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vssrl_vv_u16mf4_m(vbool64_t mask,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf4_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vssrl_vv_u16mf2_m(vbool32_t mask,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf2_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vssrl_vv_u16m1_m(vbool16_t mask,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m1_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vssrl_vv_u16m2_m(vbool8_t mask,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m2_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vssrl_vv_u16m4_m(vbool4_t mask,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m4_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vssrl_vv_u16m8_m(vbool2_t mask,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m8_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vssrl_vv_u32mf2_m(vbool64_t mask,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32mf2_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vssrl_vv_u32m1_m(vbool32_t mask,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m1_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vssrl_vv_u32m2_m(vbool16_t mask,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m2_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vssrl_vv_u32m4_m(vbool8_t mask,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m4_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vssrl_vv_u32m8_m(vbool4_t mask,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m8_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vssrl_vv_u64m1_m(vbool64_t mask,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m1_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vssrl_vv_u64m2_m(vbool32_t mask,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m2_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vssrl_vv_u64m4_m(vbool16_t mask,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m4_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vssrl_vv_u64m8_m(vbool8_t mask,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m8_m(mask,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "23184a190bd4ceb49ba3c1a14ca298ca0eabd415", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vssrl_vv_m-3.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_m-3.c?ref=13907f4bd2eba88229c83bef3daee13734df83b0", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vssrl_vv_u8mf8_m(vbool64_t mask,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf8_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vssrl_vv_u8mf4_m(vbool32_t mask,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf4_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vssrl_vv_u8mf2_m(vbool16_t mask,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf2_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vssrl_vv_u8m1_m(vbool8_t mask,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m1_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vssrl_vv_u8m2_m(vbool4_t mask,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m2_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vssrl_vv_u8m4_m(vbool2_t mask,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m4_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vssrl_vv_u8m8_m(vbool1_t mask,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m8_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vssrl_vv_u16mf4_m(vbool64_t mask,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf4_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vssrl_vv_u16mf2_m(vbool32_t mask,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf2_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vssrl_vv_u16m1_m(vbool16_t mask,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m1_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vssrl_vv_u16m2_m(vbool8_t mask,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m2_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vssrl_vv_u16m4_m(vbool4_t mask,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m4_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vssrl_vv_u16m8_m(vbool2_t mask,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m8_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vssrl_vv_u32mf2_m(vbool64_t mask,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32mf2_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vssrl_vv_u32m1_m(vbool32_t mask,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m1_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vssrl_vv_u32m2_m(vbool16_t mask,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m2_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vssrl_vv_u32m4_m(vbool8_t mask,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m4_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vssrl_vv_u32m8_m(vbool4_t mask,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m8_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vssrl_vv_u64m1_m(vbool64_t mask,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m1_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vssrl_vv_u64m2_m(vbool32_t mask,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m2_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vssrl_vv_u64m4_m(vbool16_t mask,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m4_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vssrl_vv_u64m8_m(vbool8_t mask,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m8_m(mask,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "4e24cc7b2f348992f3cca7ba85d1488bae096b87", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vssrl_vv_mu-1.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_mu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_mu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_mu-1.c?ref=13907f4bd2eba88229c83bef3daee13734df83b0", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vssrl_vv_u8mf8_mu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf8_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vssrl_vv_u8mf4_mu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vssrl_vv_u8mf2_mu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vssrl_vv_u8m1_mu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m1_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vssrl_vv_u8m2_mu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vssrl_vv_u8m4_mu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vssrl_vv_u8m8_mu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m8_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vssrl_vv_u16mf4_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vssrl_vv_u16mf2_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vssrl_vv_u16m1_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m1_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vssrl_vv_u16m2_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vssrl_vv_u16m4_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vssrl_vv_u16m8_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m8_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vssrl_vv_u32mf2_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32mf2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vssrl_vv_u32m1_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m1_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vssrl_vv_u32m2_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vssrl_vv_u32m4_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vssrl_vv_u32m8_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m8_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vssrl_vv_u64m1_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m1_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vssrl_vv_u64m2_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vssrl_vv_u64m4_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vssrl_vv_u64m8_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m8_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "e76b6f6e60a3b0fc6814959e22e69e831241166b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vssrl_vv_mu-2.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_mu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_mu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_mu-2.c?ref=13907f4bd2eba88229c83bef3daee13734df83b0", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vssrl_vv_u8mf8_mu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf8_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vssrl_vv_u8mf4_mu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vssrl_vv_u8mf2_mu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vssrl_vv_u8m1_mu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m1_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vssrl_vv_u8m2_mu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vssrl_vv_u8m4_mu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vssrl_vv_u8m8_mu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m8_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vssrl_vv_u16mf4_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vssrl_vv_u16mf2_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vssrl_vv_u16m1_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m1_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vssrl_vv_u16m2_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vssrl_vv_u16m4_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vssrl_vv_u16m8_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m8_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vssrl_vv_u32mf2_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32mf2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vssrl_vv_u32m1_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m1_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vssrl_vv_u32m2_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vssrl_vv_u32m4_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vssrl_vv_u32m8_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m8_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vssrl_vv_u64m1_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m1_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vssrl_vv_u64m2_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vssrl_vv_u64m4_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vssrl_vv_u64m8_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m8_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "12981e220faad0849a564f7ecc258533181b25a5", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vssrl_vv_mu-3.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_mu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_mu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_mu-3.c?ref=13907f4bd2eba88229c83bef3daee13734df83b0", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vssrl_vv_u8mf8_mu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf8_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vssrl_vv_u8mf4_mu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vssrl_vv_u8mf2_mu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vssrl_vv_u8m1_mu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m1_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vssrl_vv_u8m2_mu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vssrl_vv_u8m4_mu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vssrl_vv_u8m8_mu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m8_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vssrl_vv_u16mf4_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vssrl_vv_u16mf2_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vssrl_vv_u16m1_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m1_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vssrl_vv_u16m2_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vssrl_vv_u16m4_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vssrl_vv_u16m8_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m8_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vssrl_vv_u32mf2_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32mf2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vssrl_vv_u32m1_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m1_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vssrl_vv_u32m2_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vssrl_vv_u32m4_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vssrl_vv_u32m8_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m8_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vssrl_vv_u64m1_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m1_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vssrl_vv_u64m2_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vssrl_vv_u64m4_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vssrl_vv_u64m8_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m8_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "40513603d4ec6c4fedc7cff3a7c08e7e53317d32", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vssrl_vv_tu-1.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tu-1.c?ref=13907f4bd2eba88229c83bef3daee13734df83b0", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vssrl_vv_u8mf8_tu(vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf8_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vssrl_vv_u8mf4_tu(vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vssrl_vv_u8mf2_tu(vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vssrl_vv_u8m1_tu(vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m1_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vssrl_vv_u8m2_tu(vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vssrl_vv_u8m4_tu(vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vssrl_vv_u8m8_tu(vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m8_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vssrl_vv_u16mf4_tu(vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vssrl_vv_u16mf2_tu(vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vssrl_vv_u16m1_tu(vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m1_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vssrl_vv_u16m2_tu(vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vssrl_vv_u16m4_tu(vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vssrl_vv_u16m8_tu(vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m8_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vssrl_vv_u32mf2_tu(vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32mf2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vssrl_vv_u32m1_tu(vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m1_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vssrl_vv_u32m2_tu(vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vssrl_vv_u32m4_tu(vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vssrl_vv_u32m8_tu(vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m8_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vssrl_vv_u64m1_tu(vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m1_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vssrl_vv_u64m2_tu(vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vssrl_vv_u64m4_tu(vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vssrl_vv_u64m8_tu(vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m8_tu(merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "f13c3c0d08ca8fc68bbcd1fe85c90c95fab2d7de", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vssrl_vv_tu-2.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tu-2.c?ref=13907f4bd2eba88229c83bef3daee13734df83b0", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vssrl_vv_u8mf8_tu(vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf8_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vssrl_vv_u8mf4_tu(vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vssrl_vv_u8mf2_tu(vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vssrl_vv_u8m1_tu(vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m1_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vssrl_vv_u8m2_tu(vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vssrl_vv_u8m4_tu(vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vssrl_vv_u8m8_tu(vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m8_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vssrl_vv_u16mf4_tu(vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vssrl_vv_u16mf2_tu(vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vssrl_vv_u16m1_tu(vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m1_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vssrl_vv_u16m2_tu(vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vssrl_vv_u16m4_tu(vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vssrl_vv_u16m8_tu(vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m8_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vssrl_vv_u32mf2_tu(vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32mf2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vssrl_vv_u32m1_tu(vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m1_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vssrl_vv_u32m2_tu(vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vssrl_vv_u32m4_tu(vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vssrl_vv_u32m8_tu(vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m8_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vssrl_vv_u64m1_tu(vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m1_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vssrl_vv_u64m2_tu(vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vssrl_vv_u64m4_tu(vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vssrl_vv_u64m8_tu(vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m8_tu(merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "4177750f1d62020bd1e63b028f93931d2ceab804", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vssrl_vv_tu-3.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tu-3.c?ref=13907f4bd2eba88229c83bef3daee13734df83b0", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vssrl_vv_u8mf8_tu(vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf8_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vssrl_vv_u8mf4_tu(vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vssrl_vv_u8mf2_tu(vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vssrl_vv_u8m1_tu(vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m1_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vssrl_vv_u8m2_tu(vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vssrl_vv_u8m4_tu(vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vssrl_vv_u8m8_tu(vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m8_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vssrl_vv_u16mf4_tu(vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vssrl_vv_u16mf2_tu(vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vssrl_vv_u16m1_tu(vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m1_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vssrl_vv_u16m2_tu(vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vssrl_vv_u16m4_tu(vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vssrl_vv_u16m8_tu(vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m8_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vssrl_vv_u32mf2_tu(vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32mf2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vssrl_vv_u32m1_tu(vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m1_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vssrl_vv_u32m2_tu(vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vssrl_vv_u32m4_tu(vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vssrl_vv_u32m8_tu(vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m8_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vssrl_vv_u64m1_tu(vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m1_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vssrl_vv_u64m2_tu(vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vssrl_vv_u64m4_tu(vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vssrl_vv_u64m8_tu(vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m8_tu(merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "d4973e1f2eb52b3cff1cd766560633d767eb13b1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vssrl_vv_tum-1.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tum-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tum-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tum-1.c?ref=13907f4bd2eba88229c83bef3daee13734df83b0", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vssrl_vv_u8mf8_tum(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf8_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vssrl_vv_u8mf4_tum(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vssrl_vv_u8mf2_tum(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vssrl_vv_u8m1_tum(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m1_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vssrl_vv_u8m2_tum(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vssrl_vv_u8m4_tum(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vssrl_vv_u8m8_tum(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m8_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vssrl_vv_u16mf4_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vssrl_vv_u16mf2_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vssrl_vv_u16m1_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m1_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vssrl_vv_u16m2_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vssrl_vv_u16m4_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vssrl_vv_u16m8_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m8_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vssrl_vv_u32mf2_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32mf2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vssrl_vv_u32m1_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m1_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vssrl_vv_u32m2_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vssrl_vv_u32m4_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vssrl_vv_u32m8_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m8_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vssrl_vv_u64m1_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m1_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vssrl_vv_u64m2_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vssrl_vv_u64m4_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vssrl_vv_u64m8_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m8_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "c7633c93af623fd043dc8889569c53cf08d7e1b5", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vssrl_vv_tum-2.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tum-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tum-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tum-2.c?ref=13907f4bd2eba88229c83bef3daee13734df83b0", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vssrl_vv_u8mf8_tum(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf8_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vssrl_vv_u8mf4_tum(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vssrl_vv_u8mf2_tum(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vssrl_vv_u8m1_tum(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m1_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vssrl_vv_u8m2_tum(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vssrl_vv_u8m4_tum(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vssrl_vv_u8m8_tum(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m8_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vssrl_vv_u16mf4_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vssrl_vv_u16mf2_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vssrl_vv_u16m1_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m1_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vssrl_vv_u16m2_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vssrl_vv_u16m4_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vssrl_vv_u16m8_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m8_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vssrl_vv_u32mf2_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32mf2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vssrl_vv_u32m1_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m1_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vssrl_vv_u32m2_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vssrl_vv_u32m4_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vssrl_vv_u32m8_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m8_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vssrl_vv_u64m1_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m1_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vssrl_vv_u64m2_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vssrl_vv_u64m4_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vssrl_vv_u64m8_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m8_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "aec1417af54c234ef838510eb2d387448730131a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vssrl_vv_tum-3.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tum-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tum-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tum-3.c?ref=13907f4bd2eba88229c83bef3daee13734df83b0", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vssrl_vv_u8mf8_tum(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf8_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vssrl_vv_u8mf4_tum(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vssrl_vv_u8mf2_tum(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vssrl_vv_u8m1_tum(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m1_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vssrl_vv_u8m2_tum(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vssrl_vv_u8m4_tum(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vssrl_vv_u8m8_tum(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m8_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vssrl_vv_u16mf4_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vssrl_vv_u16mf2_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vssrl_vv_u16m1_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m1_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vssrl_vv_u16m2_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vssrl_vv_u16m4_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vssrl_vv_u16m8_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m8_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vssrl_vv_u32mf2_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32mf2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vssrl_vv_u32m1_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m1_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vssrl_vv_u32m2_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vssrl_vv_u32m4_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vssrl_vv_u32m8_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m8_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vssrl_vv_u64m1_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m1_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vssrl_vv_u64m2_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vssrl_vv_u64m4_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vssrl_vv_u64m8_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m8_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "ee2b1947af8f16e2c5d3829018955185789a6ebe", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vssrl_vv_tumu-1.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tumu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tumu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tumu-1.c?ref=13907f4bd2eba88229c83bef3daee13734df83b0", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vssrl_vv_u8mf8_tumu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf8_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vssrl_vv_u8mf4_tumu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vssrl_vv_u8mf2_tumu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vssrl_vv_u8m1_tumu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m1_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vssrl_vv_u8m2_tumu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vssrl_vv_u8m4_tumu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vssrl_vv_u8m8_tumu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m8_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vssrl_vv_u16mf4_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vssrl_vv_u16mf2_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vssrl_vv_u16m1_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m1_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vssrl_vv_u16m2_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vssrl_vv_u16m4_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vssrl_vv_u16m8_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m8_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vssrl_vv_u32mf2_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32mf2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vssrl_vv_u32m1_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m1_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vssrl_vv_u32m2_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vssrl_vv_u32m4_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vssrl_vv_u32m8_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m8_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vssrl_vv_u64m1_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m1_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vssrl_vv_u64m2_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vssrl_vv_u64m4_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vssrl_vv_u64m8_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m8_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "94915256e9fb35aaae6c984b43c1d8be22c6eec6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vssrl_vv_tumu-2.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tumu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tumu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tumu-2.c?ref=13907f4bd2eba88229c83bef3daee13734df83b0", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vssrl_vv_u8mf8_tumu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf8_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vssrl_vv_u8mf4_tumu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vssrl_vv_u8mf2_tumu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vssrl_vv_u8m1_tumu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m1_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vssrl_vv_u8m2_tumu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vssrl_vv_u8m4_tumu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vssrl_vv_u8m8_tumu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m8_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vssrl_vv_u16mf4_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vssrl_vv_u16mf2_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vssrl_vv_u16m1_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m1_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vssrl_vv_u16m2_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vssrl_vv_u16m4_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vssrl_vv_u16m8_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m8_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vssrl_vv_u32mf2_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32mf2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vssrl_vv_u32m1_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m1_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vssrl_vv_u32m2_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vssrl_vv_u32m4_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vssrl_vv_u32m8_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m8_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vssrl_vv_u64m1_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m1_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vssrl_vv_u64m2_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vssrl_vv_u64m4_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vssrl_vv_u64m8_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m8_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "6046f35db4a4f9817d14323fd1e9690f150c9c2f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vssrl_vv_tumu-3.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tumu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13907f4bd2eba88229c83bef3daee13734df83b0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tumu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvssrl_vv_tumu-3.c?ref=13907f4bd2eba88229c83bef3daee13734df83b0", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vssrl_vv_u8mf8_tumu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf8_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vssrl_vv_u8mf4_tumu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vssrl_vv_u8mf2_tumu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8mf2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vssrl_vv_u8m1_tumu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m1_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vssrl_vv_u8m2_tumu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vssrl_vv_u8m4_tumu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vssrl_vv_u8m8_tumu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u8m8_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vssrl_vv_u16mf4_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vssrl_vv_u16mf2_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16mf2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vssrl_vv_u16m1_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m1_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vssrl_vv_u16m2_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vssrl_vv_u16m4_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vssrl_vv_u16m8_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u16m8_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vssrl_vv_u32mf2_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32mf2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vssrl_vv_u32m1_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m1_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vssrl_vv_u32m2_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vssrl_vv_u32m4_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vssrl_vv_u32m8_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u32m8_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vssrl_vv_u64m1_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m1_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vssrl_vv_u64m2_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vssrl_vv_u64m4_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vssrl_vv_u64m8_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssrl_vv_u64m8_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vssrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}]}