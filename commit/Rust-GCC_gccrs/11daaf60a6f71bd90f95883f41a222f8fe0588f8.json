{"sha": "11daaf60a6f71bd90f95883f41a222f8fe0588f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFkYWFmNjBhNmY3MWJkOTBmOTU4ODNmNDFhMjIyZjhmZTA1ODhmOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2006-01-24T15:17:22Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2006-01-24T15:17:22Z"}, "message": "genextract.c (VEC_safe_set_locstr): Take VEC by reference; update all callers.\n\n\t* genextract.c (VEC_safe_set_locstr): Take VEC by reference;\n\tupdate all callers.\n\nFrom-SVN: r110171", "tree": {"sha": "210eafbf92830401b1c33956085c896dbbc91330", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/210eafbf92830401b1c33956085c896dbbc91330"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11daaf60a6f71bd90f95883f41a222f8fe0588f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11daaf60a6f71bd90f95883f41a222f8fe0588f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11daaf60a6f71bd90f95883f41a222f8fe0588f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11daaf60a6f71bd90f95883f41a222f8fe0588f8/comments", "author": null, "committer": null, "parents": [{"sha": "81162f97bf4d974352a6eb1b091cd7e25faa751e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81162f97bf4d974352a6eb1b091cd7e25faa751e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81162f97bf4d974352a6eb1b091cd7e25faa751e"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "4d284e25ad3c6f8d435c6dcbf541a7fee22aa36b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11daaf60a6f71bd90f95883f41a222f8fe0588f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11daaf60a6f71bd90f95883f41a222f8fe0588f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11daaf60a6f71bd90f95883f41a222f8fe0588f8", "patch": "@@ -1,3 +1,8 @@\n+2006-01-24  Richard Henderson  <rth@redhat.com>\n+\n+\t* genextract.c (VEC_safe_set_locstr): Take VEC by reference;\n+\tupdate all callers.\n+\n 2006-01-23  Paolo Bonzini  <bonzini@gnu.org>\n \n         PR rtl-optimization/25890"}, {"sha": "4ef4d982ca69f8b3c20113b332bc60fa420e05af", "filename": "gcc/genextract.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11daaf60a6f71bd90f95883f41a222f8fe0588f8/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11daaf60a6f71bd90f95883f41a222f8fe0588f8/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=11daaf60a6f71bd90f95883f41a222f8fe0588f8", "patch": "@@ -187,18 +187,18 @@ gen_insn (rtx insn, int insn_code_number)\n    exist and be NULL, or not yet exist within the vector.  In the latter\n    case the vector is enlarged as appropriate.  */\n static void\n-VEC_safe_set_locstr (VEC(locstr,heap) *v, unsigned int ix, char *str)\n+VEC_safe_set_locstr (VEC(locstr,heap) **vp, unsigned int ix, char *str)\n {\n-  if (ix < VEC_length (locstr, v))\n+  if (ix < VEC_length (locstr, *vp))\n     {\n-      gcc_assert (VEC_index (locstr, v, ix) == 0);\n-      VEC_replace (locstr, v, ix, str);\n+      gcc_assert (VEC_index (locstr, *vp, ix) == 0);\n+      VEC_replace (locstr, *vp, ix, str);\n     }\n   else\n     {\n-      while (ix > VEC_length (locstr, v))\n-\tVEC_safe_push (locstr,heap, v, 0);\n-      VEC_safe_push (locstr,heap, v, str);\n+      while (ix > VEC_length (locstr, *vp))\n+\tVEC_safe_push (locstr, heap, *vp, 0);\n+      VEC_safe_push (locstr, heap, *vp, str);\n     }\n }\n \n@@ -235,13 +235,13 @@ walk_rtx (rtx x, struct accum_extract *acc)\n \n     case MATCH_OPERAND:\n     case MATCH_SCRATCH:\n-      VEC_safe_set_locstr (acc->oplocs, XINT (x, 0),\n+      VEC_safe_set_locstr (&acc->oplocs, XINT (x, 0),\n \t\t\t   VEC_char_to_string (acc->pathstr));\n       break;\n \n     case MATCH_OPERATOR:\n     case MATCH_PARALLEL:\n-      VEC_safe_set_locstr (acc->oplocs, XINT (x, 0),\n+      VEC_safe_set_locstr (&acc->oplocs, XINT (x, 0),\n \t\t\t   VEC_char_to_string (acc->pathstr));\n \n       base = (code == MATCH_OPERATOR ? '0' : 'a');"}]}