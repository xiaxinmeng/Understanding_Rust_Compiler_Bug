{"sha": "0f15adbd845cc9952d7de02e5efceb2a096ec4d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYxNWFkYmQ4NDVjYzk5NTJkN2RlMDJlNWVmY2ViMmEwOTZlYzRkMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-03-06T18:48:51Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-03-06T18:48:51Z"}, "message": "alpha.h (MASK_LONG_DOUBLE_128): New.\n\n        * config/alpha/alpha.h (MASK_LONG_DOUBLE_128): New.\n        (TARGET_LONG_DOUBLE_128): New.\n        (TARGET_SWITCHES): Add long-double-{128,64}.\n        (TARGET_HAS_XFLOATING_LIBS): Default to TARGET_LONG_DOUBLE_128.\n        (LONG_DOUBLE_TYPE_SIZE): Honor TARGET_LONG_DOUBLE_128.\n        (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): New.\n        (WIDEST_HARDWARE_FP_SIZE): New.\n        (TARGET_CPU_CPP_BUILTINS): Define __LONG_DOUBLE_128__.\n        * config/alpha/alpha.c (override_options): Clear MASK_LONG_DOUBLE_128\n        if TARGET_VAX_FLOAT.\n        * config/alpha/osf5.h (LONG_DOUBLE_TYPE_SIZE): Remove.\n        (TARGET_DEFAULT): Set MASK_LONG_DOUBLE_128.\n\nFrom-SVN: r79026", "tree": {"sha": "febc46fb42116b0f9dc5b175d20c05bddc1187e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/febc46fb42116b0f9dc5b175d20c05bddc1187e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f15adbd845cc9952d7de02e5efceb2a096ec4d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f15adbd845cc9952d7de02e5efceb2a096ec4d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f15adbd845cc9952d7de02e5efceb2a096ec4d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f15adbd845cc9952d7de02e5efceb2a096ec4d0/comments", "author": null, "committer": null, "parents": [{"sha": "b9c685aecdb00afe0bddc8e752e716b507ded638", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9c685aecdb00afe0bddc8e752e716b507ded638", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9c685aecdb00afe0bddc8e752e716b507ded638"}], "stats": {"total": 53, "additions": 45, "deletions": 8}, "files": [{"sha": "774621e66c8d3fe7ad05f8cb166eca24ffb1512f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f15adbd845cc9952d7de02e5efceb2a096ec4d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f15adbd845cc9952d7de02e5efceb2a096ec4d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f15adbd845cc9952d7de02e5efceb2a096ec4d0", "patch": "@@ -1,3 +1,18 @@\n+2004-03-06  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.h (MASK_LONG_DOUBLE_128): New.\n+\t(TARGET_LONG_DOUBLE_128): New.\n+\t(TARGET_SWITCHES): Add long-double-{128,64}.\n+\t(TARGET_HAS_XFLOATING_LIBS): Default to TARGET_LONG_DOUBLE_128.\n+\t(LONG_DOUBLE_TYPE_SIZE): Honor TARGET_LONG_DOUBLE_128.\n+\t(LIBGCC2_LONG_DOUBLE_TYPE_SIZE): New.\n+\t(WIDEST_HARDWARE_FP_SIZE): New.\n+\t(TARGET_CPU_CPP_BUILTINS): Define __LONG_DOUBLE_128__.\n+\t* config/alpha/alpha.c (override_options): Clear MASK_LONG_DOUBLE_128\n+\tif TARGET_VAX_FLOAT.\n+\t* config/alpha/osf5.h (LONG_DOUBLE_TYPE_SIZE): Remove.\n+\t(TARGET_DEFAULT): Set MASK_LONG_DOUBLE_128.\n+\n 2004-03-06  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.c (alpha_swapped_comparison_operator): Fix"}, {"sha": "8c9945b8fdc1a732b1e62d7d363f5e4b8d42501c", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f15adbd845cc9952d7de02e5efceb2a096ec4d0/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f15adbd845cc9952d7de02e5efceb2a096ec4d0/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=0f15adbd845cc9952d7de02e5efceb2a096ec4d0", "patch": "@@ -390,6 +390,9 @@ override_options (void)\n \t  warning (\"trap mode not supported for VAX floats\");\n \t  alpha_fptm = ALPHA_FPTM_SU;\n \t}\n+      if (target_flags_explicit & MASK_LONG_DOUBLE_128)\n+\twarning (\"128-bit long double not supported for VAX floats\");\n+      target_flags &= ~MASK_LONG_DOUBLE_128;\n     }\n \n   {"}, {"sha": "bf92842dafdbd91938cb0f3f5c659d0aecd9df47", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f15adbd845cc9952d7de02e5efceb2a096ec4d0/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f15adbd845cc9952d7de02e5efceb2a096ec4d0/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=0f15adbd845cc9952d7de02e5efceb2a096ec4d0", "patch": "@@ -67,6 +67,8 @@ Boston, MA 02111-1307, USA.  */\n \t  builtin_define (\"_IEEE_FP\");\t\t\t\\\n \tif (TARGET_IEEE_WITH_INEXACT)\t\t\t\\\n \t  builtin_define (\"_IEEE_FP_INEXACT\");\t\t\\\n+\tif (TARGET_LONG_DOUBLE_128)\t\t\t\\\n+\t  builtin_define (\"__LONG_DOUBLE_128__\");\t\\\n \t\t\t\t\t\t\t\\\n \t/* Macros dependent on the C dialect.  */\t\\\n \tSUBTARGET_LANGUAGE_CPP_BUILTINS();\t\t\\\n@@ -229,6 +231,11 @@ extern int alpha_tls_size;\n #define MASK_SMALL_TEXT (1 << 15)\n #define TARGET_SMALL_TEXT (target_flags & MASK_SMALL_TEXT)\n \n+/* This means use IEEE quad-format for long double.  Assumes the \n+   presence of the GEM support library routines.  */\n+#define MASK_LONG_DOUBLE_128 (1 << 16)\n+#define TARGET_LONG_DOUBLE_128 (target_flags & MASK_LONG_DOUBLE_128)\n+\n /* This means that the processor is an EV5, EV56, or PCA56.\n    Unlike alpha_cpu this is not affected by -mtune= setting.  */\n #define MASK_CPU_EV5\t(1 << 28)\n@@ -261,7 +268,7 @@ extern int alpha_tls_size;\n #define TARGET_CAN_FAULT_IN_PROLOGUE 0\n #endif\n #ifndef TARGET_HAS_XFLOATING_LIBS\n-#define TARGET_HAS_XFLOATING_LIBS 0\n+#define TARGET_HAS_XFLOATING_LIBS TARGET_LONG_DOUBLE_128\n #endif\n #ifndef TARGET_PROFILING_NEEDS_GP\n #define TARGET_PROFILING_NEEDS_GP 0\n@@ -322,6 +329,10 @@ extern int alpha_tls_size;\n     {\"large-text\", -MASK_SMALL_TEXT, \"\"},\t\t\t\t\\\n     {\"tls-kernel\", MASK_TLS_KERNEL,\t\t\t\t\t\\\n      N_(\"Emit rdval instead of rduniq for thread pointer\")},\t\t\\\n+    {\"long-double-128\", MASK_LONG_DOUBLE_128,\t\t\t\t\\\n+     N_(\"Use 128-bit long double\")},\t\t\t\t\t\\\n+    {\"long-double-64\", -MASK_LONG_DOUBLE_128,\t\t\t\t\\\n+     N_(\"Use 64-bit long double\")},\t\t\t\t\t\\\n     {\"\", TARGET_DEFAULT | TARGET_CPU_DEFAULT\t\t\t\t\\\n \t | TARGET_DEFAULT_EXPLICIT_RELOCS, \"\"} }\n \n@@ -438,7 +449,18 @@ extern const char *alpha_tls_size_string; /* For -mtls-size= */\n \n #define FLOAT_TYPE_SIZE 32\n #define DOUBLE_TYPE_SIZE 64\n-#define LONG_DOUBLE_TYPE_SIZE 64\n+#define LONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_128 ? 128 : 64)\n+\n+/* Define this to set long double type size to use in libgcc2.c, which can\n+   not depend on target_flags.  */\n+#ifdef __LONG_DOUBLE_128__\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 128\n+#else\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n+#endif\n+\n+/* Work around target_flags dependency in ada/targtyps.c.  */\n+#define WIDEST_HARDWARE_FP_SIZE 64\n \n #define\tWCHAR_TYPE \"unsigned int\"\n #define\tWCHAR_TYPE_SIZE 32"}, {"sha": "e96ae7e2212569278cbb06000a34cd49acfd0563", "filename": "gcc/config/alpha/osf5.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f15adbd845cc9952d7de02e5efceb2a096ec4d0/gcc%2Fconfig%2Falpha%2Fosf5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f15adbd845cc9952d7de02e5efceb2a096ec4d0/gcc%2Fconfig%2Falpha%2Fosf5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fosf5.h?ref=0f15adbd845cc9952d7de02e5efceb2a096ec4d0", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for DEC Alpha on Tru64 5.\n-   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2004 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -19,11 +19,8 @@\n    Boston, MA 02111-1307, USA.  */\n \n /* Tru64 5.1 uses IEEE QUAD format.  */\n-/* ??? However, since there is no support for VAX H_floating, we must\n-   drop back to a 64-bit long double to avoid a crash looking for the\n-   format associated with TFmode.  */\n-#undef LONG_DOUBLE_TYPE_SIZE\n-#define LONG_DOUBLE_TYPE_SIZE  (TARGET_FLOAT_VAX ? 64 : 128)\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT\tMASK_FP | MASK_FPREGS | MASK_LONG_DOUBLE_128\n \n /* In Tru64 UNIX V5.1, Compaq introduced a new assembler\n    (/usr/lib/cmplrs/cc/adu) which currently (versions between 3.04.29 and"}]}