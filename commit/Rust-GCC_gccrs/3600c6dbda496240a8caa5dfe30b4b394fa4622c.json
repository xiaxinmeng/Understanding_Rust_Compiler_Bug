{"sha": "3600c6dbda496240a8caa5dfe30b4b394fa4622c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYwMGM2ZGJkYTQ5NjI0MGE4Y2FhNWRmZTMwYjRiMzk0ZmE0NjIyYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-12-19T08:07:19Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-12-19T08:07:19Z"}, "message": "i386.md (SSEINT16): New.\n\n        * config/i386/i386.md (SSEINT16): New.\n        (movv16qi, movv8hi, movv4si, movv2di): Compress via macros.\n        (movv16qi_internal, movv8hi_internal, movv4si_internal,\n        movv2di_internal): Compress via macros.  Add SSE zero alternative.\n        Fix pure SSE alternatives to use 'x' instead of 'Y'.\n        (MMXINT8): New.\n        (movv8qi, movv4hi, movv2si, movv8qi_internal, movv4hi_internal,\n        movv2si_internal): Compress via macros.\n        (SSEPUSH, MMXPUSH): New.\n        (pushv18qi, pushv8hi, pushv4si, pushv2di, pushti, pushv4sf, pushv2df,\n        pushv8qi, pushv4hi, pushv2si, pushv2sf): Compress via macros.\n\nFrom-SVN: r92374", "tree": {"sha": "d435e7df451016f03355c01c8b005173ff5c94eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d435e7df451016f03355c01c8b005173ff5c94eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3600c6dbda496240a8caa5dfe30b4b394fa4622c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3600c6dbda496240a8caa5dfe30b4b394fa4622c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3600c6dbda496240a8caa5dfe30b4b394fa4622c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3600c6dbda496240a8caa5dfe30b4b394fa4622c/comments", "author": null, "committer": null, "parents": [{"sha": "4744afba0fa727eb34cc673ce51f17648a5731e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4744afba0fa727eb34cc673ce51f17648a5731e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4744afba0fa727eb34cc673ce51f17648a5731e3"}], "stats": {"total": 529, "additions": 154, "deletions": 375}, "files": [{"sha": "46a60630eb6f1bf3ec909cd5d049ad34c8521510", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3600c6dbda496240a8caa5dfe30b4b394fa4622c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3600c6dbda496240a8caa5dfe30b4b394fa4622c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3600c6dbda496240a8caa5dfe30b4b394fa4622c", "patch": "@@ -1,3 +1,17 @@\n+2004-12-18  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.md (SSEINT16): New.\n+\t(movv16qi, movv8hi, movv4si, movv2di): Compress via macros.\n+\t(movv16qi_internal, movv8hi_internal, movv4si_internal,\n+\tmovv2di_internal): Compress via macros.  Add SSE zero alternative.\n+\tFix pure SSE alternatives to use 'x' instead of 'Y'.\n+\t(MMXINT8): New.\n+\t(movv8qi, movv4hi, movv2si, movv8qi_internal, movv4hi_internal,\n+\tmovv2si_internal): Compress via macros.\n+\t(SSEPUSH, MMXPUSH): New.\n+\t(pushv18qi, pushv8hi, pushv4si, pushv2di, pushti, pushv4sf, pushv2df,\n+\tpushv8qi, pushv4hi, pushv2si, pushv2sf): Compress via macros.\n+\n 2004-12-18  Richard Henderson  <rth@redhat.com>\n \n \tPR middle-end/16417"}, {"sha": "b575d42d8b9223addacc3a7cf46d5d0c2e07668f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 140, "deletions": 375, "changes": 515, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3600c6dbda496240a8caa5dfe30b4b394fa4622c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3600c6dbda496240a8caa5dfe30b4b394fa4622c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3600c6dbda496240a8caa5dfe30b4b394fa4622c", "patch": "@@ -19807,6 +19807,15 @@\n \n ;; Moves for SSE/MMX regs.\n \n+(define_expand \"movv4sf\"\n+  [(set (match_operand:V4SF 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:V4SF 1 \"nonimmediate_operand\" \"\"))]\n+  \"TARGET_SSE\"\n+{\n+  ix86_expand_vector_move (V4SFmode, operands);\n+  DONE;\n+})\n+\n (define_insn \"*movv4sf_internal\"\n   [(set (match_operand:V4SF 0 \"nonimmediate_operand\" \"=x,x,m\")\n \t(match_operand:V4SF 1 \"vector_move_operand\" \"C,xm,x\"))]\n@@ -19832,50 +19841,90 @@\n   operands[2] = CONST0_RTX (V4SFmode);\n })\n \n-(define_insn \"*movv4si_internal\"\n-  [(set (match_operand:V4SI 0 \"nonimmediate_operand\" \"=x,x,m\")\n-\t(match_operand:V4SI 1 \"vector_move_operand\" \"C,xm,x\"))]\n+(define_expand \"movv2df\"\n+  [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:V2DF 1 \"nonimmediate_operand\" \"\"))]\n   \"TARGET_SSE\"\n+{\n+  ix86_expand_vector_move (V2DFmode, operands);\n+  DONE;\n+})\n+\n+(define_insn \"*movv2df_internal\"\n+  [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"=x,x,m\")\n+\t(match_operand:V2DF 1 \"vector_move_operand\" \"C,xm,x\"))]\n+  \"TARGET_SSE\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n {\n   switch (which_alternative)\n     {\n     case 0:\n       if (get_attr_mode (insn) == MODE_V4SF)\n \treturn \"xorps\\t%0, %0\";\n       else\n-\treturn \"pxor\\t%0, %0\";\n+\treturn \"xorpd\\t%0, %0\";\n     case 1:\n     case 2:\n       if (get_attr_mode (insn) == MODE_V4SF)\n \treturn \"movaps\\t{%1, %0|%0, %1}\";\n       else\n-\treturn \"movdqa\\t{%1, %0|%0, %1}\";\n+\treturn \"movapd\\t{%1, %0|%0, %1}\";\n     default:\n       abort ();\n     }\n }\n   [(set_attr \"type\" \"ssemov\")\n    (set (attr \"mode\")\n-        (cond [(eq_attr \"alternative\" \"0,1\")\n+        (cond [(eq (symbol_ref \"TARGET_SSE2\") (const_int 0))\n+\t\t (const_string \"V4SF\")\n+\t       (eq_attr \"alternative\" \"0,1\")\n \t\t (if_then_else\n \t\t   (ne (symbol_ref \"optimize_size\")\n \t\t       (const_int 0))\n \t\t   (const_string \"V4SF\")\n-\t\t   (const_string \"TI\"))\n+\t\t   (const_string \"V2DF\"))\n \t       (eq_attr \"alternative\" \"2\")\n \t\t (if_then_else\n \t\t   (ior (ne (symbol_ref \"TARGET_SSE_TYPELESS_STORES\")\n \t\t\t    (const_int 0))\n \t\t\t(ne (symbol_ref \"optimize_size\")\n \t\t\t    (const_int 0)))\n \t\t   (const_string \"V4SF\")\n-\t\t   (const_string \"TI\"))]\n-\t       (const_string \"TI\")))])\n+\t\t   (const_string \"V2DF\"))]\n+\t       (const_string \"V2DF\")))])\n \n-(define_insn \"*movv2di_internal\"\n-  [(set (match_operand:V2DI 0 \"nonimmediate_operand\" \"=x,x,m\")\n-\t(match_operand:V2DI 1 \"vector_move_operand\" \"C,xm,x\"))]\n+(define_split\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"\")\n+\t(match_operand:V2DF 1 \"zero_extended_scalar_load_operand\" \"\"))]\n+  \"TARGET_SSE2 && reload_completed\"\n+  [(set (match_dup 0)\n+\t(vec_merge:V2DF\n+\t (vec_duplicate:V2DF (match_dup 1))\n+\t (match_dup 2)\n+\t (const_int 1)))]\n+{\n+  operands[1] = simplify_gen_subreg (DFmode, operands[1], V2DFmode, 0);\n+  operands[2] = CONST0_RTX (V2DFmode);\n+})\n+\n+;; 16 byte integral modes handled by SSE, minus TImode, which gets\n+;; special-cased for TARGET_64BIT.\n+(define_mode_macro SSEINT16 [V16QI V8HI V4SI V2DI])\n+\n+(define_expand \"mov<mode>\"\n+  [(set (match_operand:SSEINT16 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:SSEINT16 1 \"nonimmediate_operand\" \"\"))]\n   \"TARGET_SSE\"\n+{\n+  ix86_expand_vector_move (<MODE>mode, operands);\n+  DONE;\n+})\n+\n+(define_insn \"*mov<mode>_internal\"\n+  [(set (match_operand:SSEINT16 0 \"nonimmediate_operand\" \"=x,x ,m\")\n+\t(match_operand:SSEINT16 1 \"vector_move_operand\"  \"C ,xm,x\"))]\n+  \"TARGET_SSE\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n {\n   switch (which_alternative)\n     {\n@@ -19912,23 +19961,23 @@\n \t\t   (const_string \"TI\"))]\n \t       (const_string \"TI\")))])\n \n-(define_split\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"\")\n-\t(match_operand:V2DF 1 \"zero_extended_scalar_load_operand\" \"\"))]\n-  \"TARGET_SSE2 && reload_completed\"\n-  [(set (match_dup 0)\n-\t(vec_merge:V2DF\n-\t (vec_duplicate:V2DF (match_dup 1))\n-\t (match_dup 2)\n-\t (const_int 1)))]\n+;; 8 byte integral modes handled by MMX (and by extension, SSE)\n+(define_mode_macro MMXINT8 [V8QI V4HI V2SI])\n+\n+(define_expand \"mov<mode>\"\n+  [(set (match_operand:MMXINT8 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:MMXINT8 1 \"nonimmediate_operand\" \"\"))]\n+  \"TARGET_MMX\"\n {\n-  operands[1] = simplify_gen_subreg (DFmode, operands[1], V2DFmode, 0);\n-  operands[2] = CONST0_RTX (V2DFmode);\n+  ix86_expand_vector_move (<MODE>mode, operands);\n+  DONE;\n })\n \n-(define_insn \"*movv8qi_internal\"\n-  [(set (match_operand:V8QI 0 \"nonimmediate_operand\" \"=y,y,m,!y,!*Y,?*Y,?m\")\n-\t(match_operand:V8QI 1 \"vector_move_operand\" \"C,ym,y,*Y,y,*Ym,*Y\"))]\n+(define_insn \"*mov<mode>_internal\"\n+  [(set (match_operand:MMXINT8 0 \"nonimmediate_operand\"\n+\t\t\t\t\t\"=y,y ,m,!y,!*Y,*x,?*x,?m\")\n+\t(match_operand:MMXINT8 1 \"vector_move_operand\"\n+\t\t\t\t\t\"C ,ym,y,*Y,y  ,C ,*xm,*x\"))]\n   \"TARGET_MMX\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"@\n@@ -19937,46 +19986,26 @@\n     movq\\t{%1, %0|%0, %1}\n     movdq2q\\t{%1, %0|%0, %1}\n     movq2dq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,ssemov,ssemov\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"*movv4hi_internal\"\n-  [(set (match_operand:V4HI 0 \"nonimmediate_operand\" \"=y,y,m,!y,!*Y,?*Y,?m\")\n-\t(match_operand:V4HI 1 \"vector_move_operand\" \"C,ym,y,*Y,y,*Ym,*Y\"))]\n-  \"TARGET_MMX\n-   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n-  \"@\n     pxor\\t%0, %0\n     movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    movdq2q\\t{%1, %0|%0, %1}\n-    movq2dq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n     movq\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,ssemov,ssemov\")\n+  [(set_attr \"type\" \"mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,ssemov,ssemov,ssemov\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"*movv2si_internal\"\n-  [(set (match_operand:V2SI 0 \"nonimmediate_operand\" \"=y,y,m,!y,!*Y,?*Y,?m\")\n-\t(match_operand:V2SI 1 \"vector_move_operand\" \"C,ym,y,*Y,y,*Ym,*Y\"))]\n-  \"TARGET_MMX\n-   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n-  \"@\n-    pxor\\t%0, %0\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    movdq2q\\t{%1, %0|%0, %1}\n-    movq2dq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,ssemov,ssemov\")\n-   (set_attr \"mode\" \"DI\")])\n+(define_expand \"movv2sf\"\n+  [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:V2SF 1 \"nonimmediate_operand\" \"\"))]\n+  \"TARGET_MMX\"\n+{\n+  ix86_expand_vector_move (V2SFmode, operands);\n+  DONE;\n+})\n \n (define_insn \"*movv2sf_internal\"\n-  [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"=y,y,m,!y,!*Y,?*x,?m\")\n-        (match_operand:V2SF 1 \"vector_move_operand\" \"C,ym,y,*Y,y,*xm,*x\"))]\n+  [(set (match_operand:V2SF 0 \"nonimmediate_operand\"\n+\t\t\t\t\t\"=y,y ,m,!y,!*Y,*x,?*x,?m\")\n+        (match_operand:V2SF 1 \"vector_move_operand\"\n+\t\t\t\t\t\"C ,ym,y,*Y,y  ,C ,*xm,*x\"))]\n   \"TARGET_MMX\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"@\n@@ -19985,10 +20014,11 @@\n     movq\\t{%1, %0|%0, %1}\n     movdq2q\\t{%1, %0|%0, %1}\n     movq2dq\\t{%1, %0|%0, %1}\n+    xorps\\t%0, %0\n     movlps\\t{%1, %0|%0, %1}\n     movlps\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,ssemov,ssemov\")\n-   (set_attr \"mode\" \"DI,DI,DI,DI,DI,V2SF,V2SF\")])\n+  [(set_attr \"type\" \"mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,ssemov,ssemov,ssemov\")\n+   (set_attr \"mode\" \"DI,DI,DI,DI,DI,V4SF,V2SF,V2SF\")])\n \n (define_expand \"movti\"\n   [(set (match_operand:TI 0 \"nonimmediate_operand\" \"\")\n@@ -20002,319 +20032,6 @@\n   DONE;\n })\n \n-(define_expand \"movtf\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:TF 1 \"nonimmediate_operand\" \"\"))]\n-  \"TARGET_64BIT\"\n-{\n-  ix86_expand_move (TFmode, operands);\n-  DONE;\n-})\n-\n-(define_insn \"*movv2df_internal\"\n-  [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"=x,x,m\")\n-\t(match_operand:V2DF 1 \"vector_move_operand\" \"C,xm,x\"))]\n-  \"TARGET_SSE\n-   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n-{\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      if (get_attr_mode (insn) == MODE_V4SF)\n-\treturn \"xorps\\t%0, %0\";\n-      else\n-\treturn \"xorpd\\t%0, %0\";\n-    case 1:\n-    case 2:\n-      if (get_attr_mode (insn) == MODE_V4SF)\n-\treturn \"movaps\\t{%1, %0|%0, %1}\";\n-      else\n-\treturn \"movapd\\t{%1, %0|%0, %1}\";\n-    default:\n-      abort ();\n-    }\n-}\n-  [(set_attr \"type\" \"ssemov\")\n-   (set (attr \"mode\")\n-        (cond [(eq (symbol_ref \"TARGET_SSE2\") (const_int 0))\n-\t\t (const_string \"V4SF\")\n-\t       (eq_attr \"alternative\" \"0,1\")\n-\t\t (if_then_else\n-\t\t   (ne (symbol_ref \"optimize_size\")\n-\t\t       (const_int 0))\n-\t\t   (const_string \"V4SF\")\n-\t\t   (const_string \"V2DF\"))\n-\t       (eq_attr \"alternative\" \"2\")\n-\t\t (if_then_else\n-\t\t   (ior (ne (symbol_ref \"TARGET_SSE_TYPELESS_STORES\")\n-\t\t\t    (const_int 0))\n-\t\t\t(ne (symbol_ref \"optimize_size\")\n-\t\t\t    (const_int 0)))\n-\t\t   (const_string \"V4SF\")\n-\t\t   (const_string \"V2DF\"))]\n-\t       (const_string \"V2DF\")))])\n-\n-(define_insn \"*movv8hi_internal\"\n-  [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"=x,x,m\")\n-\t(match_operand:V8HI 1 \"vector_move_operand\" \"C,xm,x\"))]\n-  \"TARGET_SSE\n-   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n-{\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      if (get_attr_mode (insn) == MODE_V4SF)\n-\treturn \"xorps\\t%0, %0\";\n-      else\n-\treturn \"pxor\\t%0, %0\";\n-    case 1:\n-    case 2:\n-      if (get_attr_mode (insn) == MODE_V4SF)\n-\treturn \"movaps\\t{%1, %0|%0, %1}\";\n-      else\n-\treturn \"movdqa\\t{%1, %0|%0, %1}\";\n-    default:\n-      abort ();\n-    }\n-}\n-  [(set_attr \"type\" \"ssemov\")\n-   (set (attr \"mode\")\n-        (cond [(eq_attr \"alternative\" \"0,1\")\n-\t\t (if_then_else\n-\t\t   (ne (symbol_ref \"optimize_size\")\n-\t\t       (const_int 0))\n-\t\t   (const_string \"V4SF\")\n-\t\t   (const_string \"TI\"))\n-\t       (eq_attr \"alternative\" \"2\")\n-\t\t (if_then_else\n-\t\t   (ior (ne (symbol_ref \"TARGET_SSE_TYPELESS_STORES\")\n-\t\t\t    (const_int 0))\n-\t\t\t(ne (symbol_ref \"optimize_size\")\n-\t\t\t    (const_int 0)))\n-\t\t   (const_string \"V4SF\")\n-\t\t   (const_string \"TI\"))]\n-\t       (const_string \"TI\")))])\n-\n-(define_insn \"*movv16qi_internal\"\n-  [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"=x,x,m\")\n-\t(match_operand:V16QI 1 \"vector_move_operand\" \"C,xm,x\"))]\n-  \"TARGET_SSE\n-   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n-{\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      if (get_attr_mode (insn) == MODE_V4SF)\n-\treturn \"xorps\\t%0, %0\";\n-      else\n-\treturn \"pxor\\t%0, %0\";\n-    case 1:\n-    case 2:\n-      if (get_attr_mode (insn) == MODE_V4SF)\n-\treturn \"movaps\\t{%1, %0|%0, %1}\";\n-      else\n-\treturn \"movdqa\\t{%1, %0|%0, %1}\";\n-    default:\n-      abort ();\n-    }\n-}\n-  [(set_attr \"type\" \"ssemov\")\n-   (set (attr \"mode\")\n-        (cond [(eq_attr \"alternative\" \"0,1\")\n-\t\t (if_then_else\n-\t\t   (ne (symbol_ref \"optimize_size\")\n-\t\t       (const_int 0))\n-\t\t   (const_string \"V4SF\")\n-\t\t   (const_string \"TI\"))\n-\t       (eq_attr \"alternative\" \"2\")\n-\t\t (if_then_else\n-\t\t   (ior (ne (symbol_ref \"TARGET_SSE_TYPELESS_STORES\")\n-\t\t\t    (const_int 0))\n-\t\t\t(ne (symbol_ref \"optimize_size\")\n-\t\t\t    (const_int 0)))\n-\t\t   (const_string \"V4SF\")\n-\t\t   (const_string \"TI\"))]\n-\t       (const_string \"TI\")))])\n-\n-(define_expand \"movv2df\"\n-  [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:V2DF 1 \"nonimmediate_operand\" \"\"))]\n-  \"TARGET_SSE\"\n-{\n-  ix86_expand_vector_move (V2DFmode, operands);\n-  DONE;\n-})\n-\n-(define_expand \"movv8hi\"\n-  [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:V8HI 1 \"nonimmediate_operand\" \"\"))]\n-  \"TARGET_SSE\"\n-{\n-  ix86_expand_vector_move (V8HImode, operands);\n-  DONE;\n-})\n-\n-(define_expand \"movv16qi\"\n-  [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:V16QI 1 \"nonimmediate_operand\" \"\"))]\n-  \"TARGET_SSE\"\n-{\n-  ix86_expand_vector_move (V16QImode, operands);\n-  DONE;\n-})\n-\n-(define_expand \"movv4sf\"\n-  [(set (match_operand:V4SF 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:V4SF 1 \"nonimmediate_operand\" \"\"))]\n-  \"TARGET_SSE\"\n-{\n-  ix86_expand_vector_move (V4SFmode, operands);\n-  DONE;\n-})\n-\n-(define_expand \"movv4si\"\n-  [(set (match_operand:V4SI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:V4SI 1 \"nonimmediate_operand\" \"\"))]\n-  \"TARGET_SSE\"\n-{\n-  ix86_expand_vector_move (V4SImode, operands);\n-  DONE;\n-})\n-\n-(define_expand \"movv2di\"\n-  [(set (match_operand:V2DI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:V2DI 1 \"nonimmediate_operand\" \"\"))]\n-  \"TARGET_SSE\"\n-{\n-  ix86_expand_vector_move (V2DImode, operands);\n-  DONE;\n-})\n-\n-(define_expand \"movv2si\"\n-  [(set (match_operand:V2SI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:V2SI 1 \"nonimmediate_operand\" \"\"))]\n-  \"TARGET_MMX\"\n-{\n-  ix86_expand_vector_move (V2SImode, operands);\n-  DONE;\n-})\n-\n-(define_expand \"movv4hi\"\n-  [(set (match_operand:V4HI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:V4HI 1 \"nonimmediate_operand\" \"\"))]\n-  \"TARGET_MMX\"\n-{\n-  ix86_expand_vector_move (V4HImode, operands);\n-  DONE;\n-})\n-\n-(define_expand \"movv8qi\"\n-  [(set (match_operand:V8QI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:V8QI 1 \"nonimmediate_operand\" \"\"))]\n-  \"TARGET_MMX\"\n-{\n-  ix86_expand_vector_move (V8QImode, operands);\n-  DONE;\n-})\n-\n-(define_expand \"movv2sf\"\n-  [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:V2SF 1 \"nonimmediate_operand\" \"\"))]\n-  \"TARGET_MMX\"\n-{\n-  ix86_expand_vector_move (V2SFmode, operands);\n-  DONE;\n-})\n-\n-(define_insn \"*pushti\"\n-  [(set (match_operand:TI 0 \"push_operand\" \"=<\")\n-\t(match_operand:TI 1 \"register_operand\" \"x\"))]\n-  \"TARGET_SSE\"\n-  \"#\")\n-\n-(define_insn \"*pushv2df\"\n-  [(set (match_operand:V2DF 0 \"push_operand\" \"=<\")\n-\t(match_operand:V2DF 1 \"register_operand\" \"x\"))]\n-  \"TARGET_SSE\"\n-  \"#\")\n-\n-(define_insn \"*pushv2di\"\n-  [(set (match_operand:V2DI 0 \"push_operand\" \"=<\")\n-\t(match_operand:V2DI 1 \"register_operand\" \"x\"))]\n-  \"TARGET_SSE\"\n-  \"#\")\n-\n-(define_insn \"*pushv8hi\"\n-  [(set (match_operand:V8HI 0 \"push_operand\" \"=<\")\n-\t(match_operand:V8HI 1 \"register_operand\" \"x\"))]\n-  \"TARGET_SSE\"\n-  \"#\")\n-\n-(define_insn \"*pushv16qi\"\n-  [(set (match_operand:V16QI 0 \"push_operand\" \"=<\")\n-\t(match_operand:V16QI 1 \"register_operand\" \"x\"))]\n-  \"TARGET_SSE\"\n-  \"#\")\n-\n-(define_insn \"*pushv4sf\"\n-  [(set (match_operand:V4SF 0 \"push_operand\" \"=<\")\n-\t(match_operand:V4SF 1 \"register_operand\" \"x\"))]\n-  \"TARGET_SSE\"\n-  \"#\")\n-\n-(define_insn \"*pushv4si\"\n-  [(set (match_operand:V4SI 0 \"push_operand\" \"=<\")\n-\t(match_operand:V4SI 1 \"register_operand\" \"x\"))]\n-  \"TARGET_SSE\"\n-  \"#\")\n-\n-(define_insn \"*pushv2si\"\n-  [(set (match_operand:V2SI 0 \"push_operand\" \"=<\")\n-\t(match_operand:V2SI 1 \"register_operand\" \"y\"))]\n-  \"TARGET_MMX\"\n-  \"#\")\n-\n-(define_insn \"*pushv4hi\"\n-  [(set (match_operand:V4HI 0 \"push_operand\" \"=<\")\n-\t(match_operand:V4HI 1 \"register_operand\" \"y\"))]\n-  \"TARGET_MMX\"\n-  \"#\")\n-\n-(define_insn \"*pushv8qi\"\n-  [(set (match_operand:V8QI 0 \"push_operand\" \"=<\")\n-\t(match_operand:V8QI 1 \"register_operand\" \"y\"))]\n-  \"TARGET_MMX\"\n-  \"#\")\n-\n-(define_insn \"*pushv2sf\"\n-  [(set (match_operand:V2SF 0 \"push_operand\" \"=<\")\n-\t(match_operand:V2SF 1 \"register_operand\" \"y\"))]\n-  \"TARGET_MMX\"\n-  \"#\")\n-\n-(define_split\n-  [(set (match_operand 0 \"push_operand\" \"\")\n-\t(match_operand 1 \"register_operand\" \"\"))]\n-  \"!TARGET_64BIT && reload_completed\n-   && (SSE_REG_P (operands[1]) || MMX_REG_P (operands[1]))\"\n-  [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (match_dup 3)))\n-   (set (match_dup 2) (match_dup 1))]\n-  \"operands[2] = change_address (operands[0], GET_MODE (operands[0]),\n-\t\t\t\t stack_pointer_rtx);\n-   operands[3] = GEN_INT (-GET_MODE_SIZE (GET_MODE (operands[0])));\")\n-\n-(define_split\n-  [(set (match_operand 0 \"push_operand\" \"\")\n-\t(match_operand 1 \"register_operand\" \"\"))]\n-  \"TARGET_64BIT && reload_completed\n-   && (SSE_REG_P (operands[1]) || MMX_REG_P (operands[1]))\"\n-  [(set (reg:DI SP_REG) (plus:DI (reg:DI SP_REG) (match_dup 3)))\n-   (set (match_dup 2) (match_dup 1))]\n-  \"operands[2] = change_address (operands[0], GET_MODE (operands[0]),\n-\t\t\t\t stack_pointer_rtx);\n-   operands[3] = GEN_INT (-GET_MODE_SIZE (GET_MODE (operands[0])));\")\n-\n-\n (define_insn \"*movti_internal\"\n   [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=x,x,m\")\n \t(match_operand:TI 1 \"vector_move_operand\" \"C,xm,x\"))]\n@@ -20398,7 +20115,16 @@\n \t\t   (const_string \"TI\"))]\n \t       (const_string \"DI\")))])\n \n-(define_insn \"*movtf_rex64\"\n+(define_expand \"movtf\"\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:TF 1 \"nonimmediate_operand\" \"\"))]\n+  \"TARGET_64BIT\"\n+{\n+  ix86_expand_move (TFmode, operands);\n+  DONE;\n+})\n+\n+(define_insn \"*movtf_internal\"\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=r,o,x,x,xm\")\n \t(match_operand:TF 1 \"general_operand\" \"riFo,riF,C,xm,x\"))]\n   \"TARGET_64BIT\n@@ -20442,6 +20168,45 @@\n \t\t   (const_string \"TI\"))]\n \t       (const_string \"DI\")))])\n \n+(define_mode_macro SSEPUSH [V16QI V8HI V4SI V2DI TI V4SF V2DF])\n+\n+(define_insn \"*push<mode>\"\n+  [(set (match_operand:SSEPUSH 0 \"push_operand\" \"=<\")\n+\t(match_operand:SSEPUSH 1 \"register_operand\" \"x\"))]\n+  \"TARGET_SSE\"\n+  \"#\")\n+\n+(define_mode_macro MMXPUSH [V8QI V4HI V2SI V2SF])\n+\n+(define_insn \"*push<mode>\"\n+  [(set (match_operand:MMXPUSH 0 \"push_operand\" \"=<\")\n+\t(match_operand:MMXPUSH 1 \"register_operand\" \"xy\"))]\n+  \"TARGET_MMX\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand 0 \"push_operand\" \"\")\n+\t(match_operand 1 \"register_operand\" \"\"))]\n+  \"!TARGET_64BIT && reload_completed\n+   && (SSE_REG_P (operands[1]) || MMX_REG_P (operands[1]))\"\n+  [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (match_dup 3)))\n+   (set (match_dup 2) (match_dup 1))]\n+  \"operands[2] = change_address (operands[0], GET_MODE (operands[0]),\n+\t\t\t\t stack_pointer_rtx);\n+   operands[3] = GEN_INT (-GET_MODE_SIZE (GET_MODE (operands[0])));\")\n+\n+(define_split\n+  [(set (match_operand 0 \"push_operand\" \"\")\n+\t(match_operand 1 \"register_operand\" \"\"))]\n+  \"TARGET_64BIT && reload_completed\n+   && (SSE_REG_P (operands[1]) || MMX_REG_P (operands[1]))\"\n+  [(set (reg:DI SP_REG) (plus:DI (reg:DI SP_REG) (match_dup 3)))\n+   (set (match_dup 2) (match_dup 1))]\n+  \"operands[2] = change_address (operands[0], GET_MODE (operands[0]),\n+\t\t\t\t stack_pointer_rtx);\n+   operands[3] = GEN_INT (-GET_MODE_SIZE (GET_MODE (operands[0])));\")\n+\n+\n (define_split\n   [(set (match_operand:TI 0 \"nonimmediate_operand\" \"\")\n         (match_operand:TI 1 \"general_operand\" \"\"))]"}]}