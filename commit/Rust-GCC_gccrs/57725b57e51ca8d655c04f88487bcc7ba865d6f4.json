{"sha": "57725b57e51ca8d655c04f88487bcc7ba865d6f4", "node_id": "C_kwDOANBUbNoAKDU3NzI1YjU3ZTUxY2E4ZDY1NWMwNGY4ODQ4N2JjYzdiYTg2NWQ2ZjQ", "commit": {"author": {"name": "liushuyu", "email": "liushuyu011@gmail.com", "date": "2022-04-24T05:44:57Z"}, "committer": {"name": "liushuyu", "email": "liushuyu011@gmail.com", "date": "2022-04-26T22:30:14Z"}, "message": "rust-session-manager: handle crate_name attribute\n\nSigned-off-by: Zixing Liu <liushuyu011@gmail.com>", "tree": {"sha": "ccfe915181d7c33d477ddab5d88e2b37201b0f5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccfe915181d7c33d477ddab5d88e2b37201b0f5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57725b57e51ca8d655c04f88487bcc7ba865d6f4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE6x/rcKrl3aOwzUVJI9HORTRBlDcFAmJocncACgkQI9HORTRB\nlDf2ghAAspW9/izcVVfmtDPoY9weHEY2Hx78PTu3gaNtIeu6wAWpesEGPbv2JyeQ\n31Tgxtyxmh8GffAXlDaUSoxhTQhF5C4up39EHDIh7d5nleMJFwZ4k6RaKb+5VRwy\nHNqcn3kDBXFD7fDa14x7twIm8lRPy6oP5EsOXuWT/j+m6Ojm/CIPypdI8LWWOHbX\n2kjfbLtsrmyz4V3W3yuh9i/Q8ap3DQ6sANjB9nRo65lsUyyqFFwZ6iPeJd8Mdqoi\nfgqdSMQNv2nwUj4MXKTXZDVm8P0F5rX2e5c2SAl49X1bU/bmYI/6m2dQIYXhFYom\n7kjOqr3o6ypB6i4OPY6I2akuzoVOHRiImnT832fdHoS3R29gAst0PNll3sSeqbO1\n1ZYcZfGva08Kzok/L2vsNNVlP9AZxBlLS8fDA+p0iugQe2olnxtZR+UGWvSkt/Qc\nyGShfW2g5tEtvhRQjhTCDviZsXxWLGaXS4V0x5xYQii8tYC9K5df3PZv5eJg9ule\nhOY/H9FjeKXAQEOKOyroEMR33RN4UDtU1QR3tpNVi8cPHxsLijBmvYWo76yxdb2x\nXgLqhZSsnLxJqPD1WF+9Euqr0K+4gjJjALg6ThMEhWUjS3s8BsDlWLur9h17/ZPH\nxvd5HvntIZtukA3XEsUtLokDO0ArJ7wyXsfRn7FlVxpCaWxpTnU=\n=AsVd\n-----END PGP SIGNATURE-----", "payload": "tree ccfe915181d7c33d477ddab5d88e2b37201b0f5c\nparent d69dd650367fa7fcfac38001b6406c1bff2601e1\nauthor liushuyu <liushuyu011@gmail.com> 1650779097 -0600\ncommitter liushuyu <liushuyu011@gmail.com> 1651012214 -0600\n\nrust-session-manager: handle crate_name attribute\n\nSigned-off-by: Zixing Liu <liushuyu011@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57725b57e51ca8d655c04f88487bcc7ba865d6f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57725b57e51ca8d655c04f88487bcc7ba865d6f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57725b57e51ca8d655c04f88487bcc7ba865d6f4/comments", "author": {"login": "liushuyu", "id": 6829345, "node_id": "MDQ6VXNlcjY4MjkzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6829345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liushuyu", "html_url": "https://github.com/liushuyu", "followers_url": "https://api.github.com/users/liushuyu/followers", "following_url": "https://api.github.com/users/liushuyu/following{/other_user}", "gists_url": "https://api.github.com/users/liushuyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/liushuyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liushuyu/subscriptions", "organizations_url": "https://api.github.com/users/liushuyu/orgs", "repos_url": "https://api.github.com/users/liushuyu/repos", "events_url": "https://api.github.com/users/liushuyu/events{/privacy}", "received_events_url": "https://api.github.com/users/liushuyu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "liushuyu", "id": 6829345, "node_id": "MDQ6VXNlcjY4MjkzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6829345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liushuyu", "html_url": "https://github.com/liushuyu", "followers_url": "https://api.github.com/users/liushuyu/followers", "following_url": "https://api.github.com/users/liushuyu/following{/other_user}", "gists_url": "https://api.github.com/users/liushuyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/liushuyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liushuyu/subscriptions", "organizations_url": "https://api.github.com/users/liushuyu/orgs", "repos_url": "https://api.github.com/users/liushuyu/repos", "events_url": "https://api.github.com/users/liushuyu/events{/privacy}", "received_events_url": "https://api.github.com/users/liushuyu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d69dd650367fa7fcfac38001b6406c1bff2601e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d69dd650367fa7fcfac38001b6406c1bff2601e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d69dd650367fa7fcfac38001b6406c1bff2601e1"}], "stats": {"total": 96, "additions": 83, "deletions": 13}, "files": [{"sha": "845a66ae04c8cc0dda80c3d824b2c2660e835c4d", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 60, "deletions": 13, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57725b57e51ca8d655c04f88487bcc7ba865d6f4/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57725b57e51ca8d655c04f88487bcc7ba865d6f4/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=57725b57e51ca8d655c04f88487bcc7ba865d6f4", "patch": "@@ -405,7 +405,10 @@ Session::handle_option (\n \t{\n \t  auto error = Error (Location (), std::string ());\n \t  if ((ret = validate_crate_name (arg, error)))\n-\t    options.set_crate_name (arg);\n+\t    {\n+\t      options.set_crate_name (arg);\n+\t      options.crate_name_set_manually = true;\n+\t    }\n \t  else\n \t    {\n \t      rust_assert (!error.message.empty ());\n@@ -553,19 +556,9 @@ Session::parse_files (int num_files, const char **files)\n \tfilename = files[0];\n \n       auto crate_name = infer_crate_name (filename);\n-      Error error ((Location ()), std::string ());\n       rust_debug (\"inferred crate name: %s\", crate_name.c_str ());\n-      if (!validate_crate_name (crate_name, error))\n-\t{\n-\t  // fake a linemapping so that we can show the filename\n-\t  linemap->start_file (filename, 0);\n-\t  linemap->start_line (0, 1);\n-\t  error.emit_error ();\n-\t  rust_inform (linemap->get_location (0),\n-\t\t       \"crate name inferred from this file\");\n-\t  linemap->stop ();\n-\t  return;\n-\t}\n+      // set the preliminary crate name here\n+      // we will figure out the real crate name in `handle_crate_name`\n       options.set_crate_name (crate_name);\n     }\n \n@@ -582,6 +575,57 @@ Session::parse_files (int num_files, const char **files)\n    * per-file. */\n }\n \n+void\n+Session::handle_crate_name (AST::Crate parsed_crate)\n+{\n+  auto mappings = Analysis::Mappings::get ();\n+  auto crate_name_changed = false;\n+  auto error = Error (Location (), std::string ());\n+\n+  for (const auto &attr : parsed_crate.inner_attrs)\n+    {\n+      if (attr.get_path () != \"crate_name\")\n+\tcontinue;\n+      if (!attr.has_attr_input ())\n+\t{\n+\t  rust_error_at (attr.get_locus (),\n+\t\t\t \"%<crate_name%> accepts one argument\");\n+\t  continue;\n+\t}\n+\n+      auto &literal\n+\t= static_cast<AST::AttrInputLiteral &> (attr.get_attr_input ());\n+      const auto &msg_str = literal.get_literal ().as_string ();\n+      if (!validate_crate_name (msg_str, error))\n+\t{\n+\t  error.locus = attr.get_locus ();\n+\t  error.emit_error ();\n+\t  continue;\n+\t}\n+\n+      auto options = Session::get_instance ().options;\n+      if (options.crate_name_set_manually && (options.crate_name != msg_str))\n+\t{\n+\t  rust_error_at (attr.get_locus (),\n+\t\t\t \"%<-frust-crate-name%> and %<#[crate_name]%> are \"\n+\t\t\t \"required to match, but %qs does not match %qs\",\n+\t\t\t options.crate_name.c_str (), msg_str.c_str ());\n+\t}\n+      crate_name_changed = true;\n+      options.set_crate_name (msg_str);\n+      mappings->set_crate_name (mappings->get_current_crate (), msg_str);\n+    }\n+\n+  options.crate_name_set_manually |= crate_name_changed;\n+  if (!options.crate_name_set_manually\n+      && !validate_crate_name (options.crate_name, error))\n+    {\n+      error.emit_error ();\n+      rust_inform (linemap->get_location (0),\n+\t\t   \"crate name inferred from this file\");\n+    }\n+}\n+\n // Parses a single file with filename filename.\n void\n Session::parse_file (const char *filename)\n@@ -606,6 +650,9 @@ Session::parse_file (const char *filename)\n   auto mappings = Analysis::Mappings::get ();\n   mappings->insert_ast_crate (&parsed_crate);\n \n+  // handle crate name\n+  handle_crate_name (parsed_crate);\n+\n   if (options.dump_option_enabled (CompileOptions::LEXER_DUMP))\n     {\n       dump_lex (parser);"}, {"sha": "97b546922cf1bd34aa2cee94d7a6adbe66df1948", "filename": "gcc/rust/rust-session-manager.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57725b57e51ca8d655c04f88487bcc7ba865d6f4/gcc%2Frust%2Frust-session-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57725b57e51ca8d655c04f88487bcc7ba865d6f4/gcc%2Frust%2Frust-session-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.h?ref=57725b57e51ca8d655c04f88487bcc7ba865d6f4", "patch": "@@ -182,6 +182,7 @@ struct CompileOptions\n    * pointer width, vendor */\n   TargetOptions target_data;\n   std::string crate_name;\n+  bool crate_name_set_manually = false;\n   bool enable_test = false;\n   bool debug_assertions = false;\n   bool proc_macro = false;\n@@ -270,6 +271,7 @@ struct Session\n \t\t      const struct cl_option_handlers *handlers);\n   void parse_files (int num_files, const char **files);\n   void init_options ();\n+  void handle_crate_name (AST::Crate parsed_crate);\n \n   /* This function saves the filename data into the session manager using the\n    * `move` semantics, and returns a C-style string referencing the input"}, {"sha": "61b8c26c9b9662a65754f619d14d397b89799d45", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57725b57e51ca8d655c04f88487bcc7ba865d6f4/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57725b57e51ca8d655c04f88487bcc7ba865d6f4/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=57725b57e51ca8d655c04f88487bcc7ba865d6f4", "patch": "@@ -88,6 +88,19 @@ class Mappings\n     return true;\n   }\n \n+  // set crate name mid-compilation\n+  // don't use this if setting crate name before Session::parse_files\n+  bool set_crate_name (CrateNum crate_num, std::string name)\n+  {\n+    rust_assert (!name.empty ());\n+    auto it = crate_names.find (crate_num);\n+    if (it == crate_names.end ())\n+      return false;\n+\n+    it->second.assign (name);\n+    return true;\n+  }\n+\n   std::string get_current_crate_name () const\n   {\n     std::string name;"}, {"sha": "1d406031fee8ea65375e230f8ac223bf35ec13de", "filename": "gcc/testsuite/rust/compile/attr-mismatch-crate-name.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57725b57e51ca8d655c04f88487bcc7ba865d6f4/gcc%2Ftestsuite%2Frust%2Fcompile%2Fattr-mismatch-crate-name.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57725b57e51ca8d655c04f88487bcc7ba865d6f4/gcc%2Ftestsuite%2Frust%2Fcompile%2Fattr-mismatch-crate-name.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fattr-mismatch-crate-name.rs?ref=57725b57e51ca8d655c04f88487bcc7ba865d6f4", "patch": "@@ -0,0 +1,4 @@\n+// { dg-additional-options \"-fdump-tree-gimple\" }\n+#![crate_name = \"specified_name\"]\n+// { dg-final { scan-tree-dump-times {specified_name::main} 1 gimple } }\n+fn main() {}"}, {"sha": "e259b9e46ccb29e19d3d92e8d24fa655b25d6611", "filename": "gcc/testsuite/rust/compile/mismatch-crate-name.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57725b57e51ca8d655c04f88487bcc7ba865d6f4/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmismatch-crate-name.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57725b57e51ca8d655c04f88487bcc7ba865d6f4/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmismatch-crate-name.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmismatch-crate-name.rs?ref=57725b57e51ca8d655c04f88487bcc7ba865d6f4", "patch": "@@ -0,0 +1,4 @@\n+// { dg-additional-options \"-frust-crate=another_name\" }\n+#![crate_name = \"legit_name\"]\n+// { dg-error \".-frust-crate-name. and .#.crate_name.. are required to match, but .another_name. does not match .legit_name.\" \"\" { target *-*-* } .-1 }\n+fn main() {}"}]}