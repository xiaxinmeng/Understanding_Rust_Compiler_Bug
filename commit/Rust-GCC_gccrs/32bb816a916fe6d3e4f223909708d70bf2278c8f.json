{"sha": "32bb816a916fe6d3e4f223909708d70bf2278c8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJiYjgxNmE5MTZmZTZkM2U0ZjIyMzkwOTcwOGQ3MGJmMjI3OGM4Zg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-08-30T20:55:37Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-08-30T20:55:37Z"}, "message": "re PR libstdc++/58148 (Fails to insert iterator range into sequence container with -D_GLIBCXX_DEBUG when conversion is needed)\n\n2013-08-30  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\tPR libstdc++/58148\n\t* include/debug/functions.h (__foreign_iterator_aux4): Use\n\tsequence const_pointer as common type to compare pointers. Add a\n\tfallback overload in case pointers cannot be cast to sequence\n\tconst_pointer.\n\t* testsuite/23_containers/vector/modifiers/insert/58148.cc: New.\n\nFrom-SVN: r202121", "tree": {"sha": "abdc94081f8c6075d64ba9ed54dbdd2100f880e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abdc94081f8c6075d64ba9ed54dbdd2100f880e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32bb816a916fe6d3e4f223909708d70bf2278c8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32bb816a916fe6d3e4f223909708d70bf2278c8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32bb816a916fe6d3e4f223909708d70bf2278c8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32bb816a916fe6d3e4f223909708d70bf2278c8f/comments", "author": null, "committer": null, "parents": [{"sha": "8915a229adfb159acfe5a41ecd11177792fbc3b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8915a229adfb159acfe5a41ecd11177792fbc3b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8915a229adfb159acfe5a41ecd11177792fbc3b1"}], "stats": {"total": 83, "additions": 65, "deletions": 18}, "files": [{"sha": "898f0319a20b82f04b24a5c8343ea95fe3063363", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32bb816a916fe6d3e4f223909708d70bf2278c8f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32bb816a916fe6d3e4f223909708d70bf2278c8f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=32bb816a916fe6d3e4f223909708d70bf2278c8f", "patch": "@@ -1,3 +1,12 @@\n+2013-08-30  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tPR libstdc++/58148\n+\t* include/debug/functions.h (__foreign_iterator_aux4): Use\n+\tsequence const_pointer as common type to compare pointers. Add a\n+\tfallback overload in case pointers cannot be cast to sequence\n+\tconst_pointer.\n+\t* testsuite/23_containers/vector/modifiers/insert/58148.cc: New.\n+\n 2013-08-30  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tPR libstdc++/58191"}, {"sha": "8e76b7f2ee5106feb37d2bea2d8ea0247492c368", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32bb816a916fe6d3e4f223909708d70bf2278c8f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32bb816a916fe6d3e4f223909708d70bf2278c8f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=32bb816a916fe6d3e4f223909708d70bf2278c8f", "patch": "@@ -36,7 +36,7 @@\n #include <bits/move.h>                    // for __addressof and addressof\n #if __cplusplus >= 201103L\n # include <bits/stl_function.h>\t\t  // for less and greater_equal\n-# include <type_traits>\t\t\t  // for common_type\n+# include <type_traits>\t\t\t  // for is_lvalue_reference and __and_\n #endif\n #include <debug/formatter.h>\n \n@@ -172,27 +172,30 @@ namespace __gnu_debug\n     }\n \n #if __cplusplus >= 201103L\n-  template<typename _Iterator, typename _Sequence,\n-\t   typename _InputIterator,\n-\t   typename _PointerType1,\n-\t   typename _PointerType2>\n+  // Default implementation.\n+  template<typename _Iterator, typename _Sequence>\n     inline bool\n     __foreign_iterator_aux4(const _Safe_iterator<_Iterator, _Sequence>& __it,\n-\t\t\t    _InputIterator __other,\n-\t\t\t    _PointerType1, _PointerType2)\n+\t\t\t    typename _Sequence::const_pointer __begin,\n+\t\t\t    typename _Sequence::const_pointer __other)\n     {\n-      typedef typename std::common_type<_PointerType1,\n-\t\t\t\t\t_PointerType2>::type _PointerType;\n+      typedef typename _Sequence::const_pointer _PointerType;\n       constexpr std::less<_PointerType> __l{};\n-      constexpr std::greater_equal<_PointerType> __ge{};\n \n-      return (__l(std::addressof(*__other),\n-\t\t  std::addressof(*(__it._M_get_sequence()->_M_base().begin())))\n-\t      || __ge(std::addressof(*__other),\n-\t\t      std::addressof(*(__it._M_get_sequence()->_M_base().end()\n-\t\t\t\t       - 1)) + 1));\n+      return (__l(__other, __begin)\n+\t      || __l(std::addressof(*(__it._M_get_sequence()->_M_base().end()\n+\t\t\t\t      - 1)), __other));\n     }\n-\t\t\t  \n+\n+  // Fallback when address type cannot be implicitely casted to sequence\n+  // const_pointer.\n+  template<typename _Iterator, typename _Sequence,\n+\t   typename _InputIterator>\n+    inline bool\n+    __foreign_iterator_aux4(const _Safe_iterator<_Iterator, _Sequence>&,\n+\t\t\t    _InputIterator, ...)\n+    { return true; }\n+\n   template<typename _Iterator, typename _Sequence, typename _InputIterator>\n     inline bool\n     __foreign_iterator_aux3(const _Safe_iterator<_Iterator, _Sequence>& __it,\n@@ -209,7 +212,7 @@ namespace __gnu_debug\n \t    - std::addressof(*(__it._M_get_sequence()->_M_base().begin()))\n \t    == __it._M_get_sequence()->size() - 1)\n \t  return (__foreign_iterator_aux4\n-\t\t  (__it, __other,\n+\t\t  (__it,\n \t\t   std::addressof(*(__it._M_get_sequence()->_M_base().begin())),\n \t\t   std::addressof(*__other)));\n       return true;\n@@ -223,7 +226,7 @@ namespace __gnu_debug\n \t\t\t    std::false_type)\n     { return true; }\n #endif\n-\t\t\t   \n+\n   /** Checks that iterators do not belong to the same sequence. */\n   template<typename _Iterator, typename _Sequence, typename _OtherIterator>\n     inline bool"}, {"sha": "bfb2c0959c83c425f91979180d946c227058725d", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/insert/58148.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32bb816a916fe6d3e4f223909708d70bf2278c8f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Finsert%2F58148.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32bb816a916fe6d3e4f223909708d70bf2278c8f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Finsert%2F58148.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Finsert%2F58148.cc?ref=32bb816a916fe6d3e4f223909708d70bf2278c8f", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+#include <vector>\n+\n+void\n+test01()\n+{\n+  std::vector<wchar_t> v;\n+  char c = 'a';\n+  v.insert(v.begin(), &c, &c);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}