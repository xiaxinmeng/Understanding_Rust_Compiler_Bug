{"sha": "90ef15352701c6880faee83a46031d7837ab9d27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBlZjE1MzUyNzAxYzY4ODBmYWVlODNhNDYwMzFkNzgzN2FiOWQyNw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-05T10:44:41Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-05T11:43:51Z"}, "message": "Add an unreachable_path_p method to path_range_query.\n\nKeeping track of unreachable calculations while traversing a path is\nuseful to determine edge reachability, among other things.  We've been\ndoing this ad-hoc in the backwards threader, so this provides a cleaner\nway of accessing the information.\n\nThis patch also makes it easier to compare different threading\nimplementations, in some upcoming work.  For example, it's currently\ndifficult to gague how good we're doing compared to the forward threader,\nbecause it can thread paths that are obviously unreachable.  This\nprovides a way of discarding those paths.\n\nNote that I've opted to keep unreachable_path_p() out-of-line, because I\nhave local changes that will enhance this method.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* gimple-range-path.cc (path_range_query::range_of_expr): Set\n\tm_undefined_path when appropriate.\n\t(path_range_query::internal_range_of_expr): Copy from range_of_expr.\n\t(path_range_query::unreachable_path_p): New.\n\t(path_range_query::precompute_ranges): Set m_undefined_path.\n\t* gimple-range-path.h (path_range_query::unreachable_path_p): New.\n\t(path_range_query::internal_range_of_expr): New.\n\t* tree-ssa-threadbackward.c (back_threader::find_taken_edge_cond):\n\tUse unreachable_path_p.", "tree": {"sha": "e18207c6fd09f3dd67335e1a264e5fdb236993c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e18207c6fd09f3dd67335e1a264e5fdb236993c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90ef15352701c6880faee83a46031d7837ab9d27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90ef15352701c6880faee83a46031d7837ab9d27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90ef15352701c6880faee83a46031d7837ab9d27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90ef15352701c6880faee83a46031d7837ab9d27/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbeeadff4c041c09a6335105d596019b6d583880", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbeeadff4c041c09a6335105d596019b6d583880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbeeadff4c041c09a6335105d596019b6d583880"}], "stats": {"total": 42, "additions": 31, "deletions": 11}, "files": [{"sha": "f4509b5a726145be446569b49f4b5ed377df3246", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ef15352701c6880faee83a46031d7837ab9d27/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ef15352701c6880faee83a46031d7837ab9d27/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=90ef15352701c6880faee83a46031d7837ab9d27", "patch": "@@ -115,7 +115,7 @@ path_range_query::debug ()\n // Return the range of NAME at the end of the path being analyzed.\n \n bool\n-path_range_query::range_of_expr (irange &r, tree name, gimple *stmt)\n+path_range_query::internal_range_of_expr (irange &r, tree name, gimple *stmt)\n {\n   if (!irange::supports_type_p (TREE_TYPE (name)))\n     return false;\n@@ -135,6 +135,25 @@ path_range_query::range_of_expr (irange &r, tree name, gimple *stmt)\n   return true;\n }\n \n+bool\n+path_range_query::range_of_expr (irange &r, tree name, gimple *stmt)\n+{\n+  if (internal_range_of_expr (r, name, stmt))\n+    {\n+      if (r.undefined_p ())\n+\tm_undefined_path = true;\n+\n+      return true;\n+    }\n+  return false;\n+}\n+\n+bool\n+path_range_query::unreachable_path_p ()\n+{\n+  return m_undefined_path;\n+}\n+\n // Return the range of STMT at the end of the path being analyzed.\n // Anything but the final conditional in a BB will return VARYING.\n \n@@ -345,6 +364,7 @@ path_range_query::precompute_ranges (const vec<basic_block> &path,\n {\n   set_path (path);\n   m_imports = imports;\n+  m_undefined_path = false;\n \n   if (DEBUG_SOLVER)\n     {"}, {"sha": "c75721f6dc0244a88b9d10ceede6a6e3d784ca50", "filename": "gcc/gimple-range-path.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ef15352701c6880faee83a46031d7837ab9d27/gcc%2Fgimple-range-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ef15352701c6880faee83a46031d7837ab9d27/gcc%2Fgimple-range-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.h?ref=90ef15352701c6880faee83a46031d7837ab9d27", "patch": "@@ -41,10 +41,13 @@ class path_range_query : public range_query\n \t\t\t  const bitmap_head *imports);\n   bool range_of_expr (irange &r, tree name, gimple * = NULL) override;\n   bool range_of_stmt (irange &r, gimple *, tree name = NULL) override;\n+  bool unreachable_path_p ();\n   void dump (FILE *) override;\n   void debug ();\n \n private:\n+  bool internal_range_of_expr (irange &r, tree name, gimple *);\n+\n   // Cache manipulation.\n   void set_cache (const irange &r, tree name);\n   bool get_cache (irange &r, tree name);\n@@ -82,6 +85,9 @@ class path_range_query : public range_query\n   const bitmap_head *m_imports;\n   gimple_ranger &m_ranger;\n   non_null_ref m_non_null;\n+\n+  // Set if there were any undefined expressions while pre-calculating path.\n+  bool m_undefined_path;\n };\n \n #endif // GCC_TREE_SSA_THREADSOLVER_H"}, {"sha": "449232c771536152f821706b6a1dd60adba9c5b8", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ef15352701c6880faee83a46031d7837ab9d27/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ef15352701c6880faee83a46031d7837ab9d27/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=90ef15352701c6880faee83a46031d7837ab9d27", "patch": "@@ -213,20 +213,14 @@ edge\n back_threader::find_taken_edge_cond (const vec<basic_block> &path,\n \t\t\t\t     gcond *cond)\n {\n-  m_solver.precompute_ranges (path, m_imports);\n-\n-  // Check if either operand is unreachable since this knowledge could\n-  // help the caller cut down the search space.\n   int_range_max r;\n-  m_solver.range_of_expr (r, gimple_cond_lhs (cond));\n-  if (r.undefined_p ())\n-    return UNREACHABLE_EDGE;\n-  m_solver.range_of_expr (r, gimple_cond_rhs (cond));\n-  if (r.undefined_p ())\n-    return UNREACHABLE_EDGE;\n \n+  m_solver.precompute_ranges (path, m_imports);\n   m_solver.range_of_stmt (r, cond);\n \n+  if (m_solver.unreachable_path_p ())\n+    return UNREACHABLE_EDGE;\n+\n   int_range<2> true_range (boolean_true_node, boolean_true_node);\n   int_range<2> false_range (boolean_false_node, boolean_false_node);\n "}]}