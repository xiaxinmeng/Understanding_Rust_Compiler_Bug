{"sha": "6037d88d58ffcacc4ee354f4300910589dc5ce47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAzN2Q4OGQ1OGZmY2FjYzRlZTM1NGY0MzAwOTEwNTg5ZGM1Y2U0Nw==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2005-03-12T06:37:46Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2005-03-12T06:37:46Z"}, "message": "c-tree.h (struct c_declarator): New id_loc field.\n\n\n\t* c-tree.h (struct c_declarator): New id_loc field.\n\t* c-pragma.h (c_lex_with_flags): Take position reference.\n\t* c-lex.c (c_lex_with_flags): Set passed-in location from cpp token,\n\tiff USE_MAPPED_LOCATION. (Type doesn't match otherwise.)\n\t(c_lex): Pass dummy location to c_lex_with_flags.\n\t* c-parser.c (c_lex_one_token): Set c_token's location using\n\tc_lex_with_flags, instead of input_location, which might be \"ahead\".\n\t(c_parser_direct_declarator): Set declarator's id_loc from\n\tc_token's id_loc.\n\t* c-decl.c (grokdeclarator): Set DECL_SOURCE_LOCATION from\n\tdeclarator's id_loc, rather than probably-imprecise input_location.\n\t(build_id_declarator): Initialize c_declarator's id_loc field.\n\nFrom-SVN: r96329", "tree": {"sha": "65b4a8dab5e3ade6d18469d0c871b15a2a066e5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65b4a8dab5e3ade6d18469d0c871b15a2a066e5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6037d88d58ffcacc4ee354f4300910589dc5ce47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6037d88d58ffcacc4ee354f4300910589dc5ce47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6037d88d58ffcacc4ee354f4300910589dc5ce47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6037d88d58ffcacc4ee354f4300910589dc5ce47/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "210e185272bc34731909e0a53fb982d3ae434516", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/210e185272bc34731909e0a53fb982d3ae434516", "html_url": "https://github.com/Rust-GCC/gccrs/commit/210e185272bc34731909e0a53fb982d3ae434516"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "5d85aba3b129864e516755fd12f5dfcd39f12ddc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6037d88d58ffcacc4ee354f4300910589dc5ce47/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6037d88d58ffcacc4ee354f4300910589dc5ce47/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6037d88d58ffcacc4ee354f4300910589dc5ce47", "patch": "@@ -1,3 +1,18 @@\n+2005-03-11  Per Bothner  <per@bothner.com>\n+\n+\t* c-tree.h (struct c_declarator): New id_loc field.\n+\t* c-pragma.h (c_lex_with_flags): Take position reference.\n+\t* c-lex.c (c_lex_with_flags): Set passed-in location from cpp token,\n+\tiff USE_MAPPED_LOCATION. (Type doesn't match otherwise.)\n+\t(c_lex): Pass dummy location to c_lex_with_flags.\n+\t* c-parser.c (c_lex_one_token): Set c_token's location using\n+\tc_lex_with_flags, instead of input_location, which might be \"ahead\".\n+\t(c_parser_direct_declarator): Set declarator's id_loc from\n+\tc_token's id_loc.\n+\t* c-decl.c (grokdeclarator): Set DECL_SOURCE_LOCATION from\n+\tdeclarator's id_loc, rather than probably-imprecise input_location.\n+\t(build_id_declarator): Initialize c_declarator's id_loc field.\n+\n 2005-03-11  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/20419"}, {"sha": "070a94b8bc984dd56f00209d3d4b787f76454126", "filename": "gcc/c-decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6037d88d58ffcacc4ee354f4300910589dc5ce47/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6037d88d58ffcacc4ee354f4300910589dc5ce47/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=6037d88d58ffcacc4ee354f4300910589dc5ce47", "patch": "@@ -4584,6 +4584,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t  }\n \n \tdecl = build_decl (VAR_DECL, declarator->u.id, type);\n+\tDECL_SOURCE_LOCATION (decl) = declarator->id_loc;\n \tif (size_varies)\n \t  C_DECL_VARIABLE_SIZE (decl) = 1;\n \n@@ -6709,6 +6710,8 @@ build_id_declarator (tree ident)\n   ret->kind = cdk_id;\n   ret->declarator = 0;\n   ret->u.id = ident;\n+  /* Default value - may get reset to a more precise location. */\n+  ret->id_loc = input_location;\n   return ret;\n }\n "}, {"sha": "fdc1ff6e311c634f2a4a10cbbdb8d1de37feee42", "filename": "gcc/c-lex.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6037d88d58ffcacc4ee354f4300910589dc5ce47/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6037d88d58ffcacc4ee354f4300910589dc5ce47/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=6037d88d58ffcacc4ee354f4300910589dc5ce47", "patch": "@@ -332,7 +332,7 @@ cb_undef (cpp_reader * ARG_UNUSED (pfile), source_location loc,\n    non-NULL.  */\n \n enum cpp_ttype\n-c_lex_with_flags (tree *value, unsigned char *cpp_flags)\n+c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags)\n {\n   static bool no_more_pch;\n   const cpp_token *tok;\n@@ -344,6 +344,11 @@ c_lex_with_flags (tree *value, unsigned char *cpp_flags)\n   type = tok->type;\n   \n  retry_after_at:\n+#ifdef USE_MAPPED_LOCATION\n+  *loc = tok->src_loc;\n+#else\n+  *loc = input_location;\n+#endif\n   switch (type)\n     {\n     case CPP_PADDING:\n@@ -487,7 +492,8 @@ c_lex_with_flags (tree *value, unsigned char *cpp_flags)\n enum cpp_ttype\n c_lex (tree *value)\n {\n-  return c_lex_with_flags (value, NULL);\n+  location_t loc;\n+  return c_lex_with_flags (value, &loc, NULL);\n }\n \n /* Returns the narrowest C-visible unsigned type, starting with the"}, {"sha": "6fd09b94be0b27dae583532260acdcdc8c90125e", "filename": "gcc/c-parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6037d88d58ffcacc4ee354f4300910589dc5ce47/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6037d88d58ffcacc4ee354f4300910589dc5ce47/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=6037d88d58ffcacc4ee354f4300910589dc5ce47", "patch": "@@ -295,8 +295,7 @@ static void\n c_lex_one_token (c_token *token)\n {\n   timevar_push (TV_LEX);\n-  token->type = c_lex (&token->value);\n-  token->location = input_location;\n+  token->type = c_lex_with_flags (&token->value, &token->location, NULL);\n   token->in_system_header = in_system_header;\n   switch (token->type)\n     {\n@@ -2179,6 +2178,7 @@ c_parser_direct_declarator (c_parser *parser, bool type_seen_p, c_dtr_syn kind,\n       struct c_declarator *inner\n \t= build_id_declarator (c_parser_peek_token (parser)->value);\n       *seen_id = true;\n+      inner->id_loc = c_parser_peek_token (parser)->location;\n       c_parser_consume_token (parser);\n       return c_parser_direct_declarator_inner (parser, *seen_id, inner);\n     }"}, {"sha": "9a7895a43fc579a2f4a4146b1b7eb2020193d93d", "filename": "gcc/c-pragma.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6037d88d58ffcacc4ee354f4300910589dc5ce47/gcc%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6037d88d58ffcacc4ee354f4300910589dc5ce47/gcc%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.h?ref=6037d88d58ffcacc4ee354f4300910589dc5ce47", "patch": "@@ -65,7 +65,7 @@ extern tree maybe_apply_renaming_pragma (tree, tree);\n extern void add_to_renaming_pragma_list (tree, tree);\n \n extern enum cpp_ttype c_lex (tree *);\n-extern enum cpp_ttype c_lex_with_flags (tree *, unsigned char *);\n+extern enum cpp_ttype c_lex_with_flags (tree *, location_t *, unsigned char *);\n \n /* If 1, then lex strings into the execution character set.  \n    If 0, lex strings into the host character set."}, {"sha": "adace275c3838e1db8cc76a8cf82c49a91abe63a", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6037d88d58ffcacc4ee354f4300910589dc5ce47/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6037d88d58ffcacc4ee354f4300910589dc5ce47/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=6037d88d58ffcacc4ee354f4300910589dc5ce47", "patch": "@@ -287,6 +287,7 @@ struct c_declarator {\n   enum c_declarator_kind kind;\n   /* Except for cdk_id, the contained declarator.  For cdk_id, NULL.  */\n   struct c_declarator *declarator;\n+  location_t id_loc; /* Currently only set for cdk_id. */\n   union {\n     /* For identifiers, an IDENTIFIER_NODE or NULL_TREE if an abstract\n        declarator.  */"}]}