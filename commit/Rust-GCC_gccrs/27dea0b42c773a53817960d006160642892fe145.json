{"sha": "27dea0b42c773a53817960d006160642892fe145", "node_id": "C_kwDOANBUbNoAKDI3ZGVhMGI0MmM3NzNhNTM4MTc5NjBkMDA2MTYwNjQyODkyZmUxNDU", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-10-14T13:00:46Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-10-14T13:43:41Z"}, "message": "Add FIXME note to backward threader.\n\nThere's a limitation in the path discovery bits in the backward\nthreader that I ran into recently and I'd like to document it so we\ndon't lose track of it.\n\nBasically we stop looking if we find a threadable path through a PHI,\nwithout taking into account that there could be multiple\npaths through a PHI that resolve the path.  For example:\n\n\tx_5 = PHI <10(4), 20(5), ...>\n\tif (x_5 > 5)\n\nI don't remember how we ended up skipping this, but it could existing\nbehavior from the old bits.  It probably skipped multiple threads\nthrough a PHI since the generic copier couldn't re-using existing\nthreading paths anyhow.\n\nDocumenting for later fixing.\n\ngcc/ChangeLog:\n\n\t* tree-ssa-threadbackward.c (back_threader::resolve_phi): Add\n\tFIXME note.", "tree": {"sha": "f6cc4ef30055858562d1725a793b99b4e41b3aa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6cc4ef30055858562d1725a793b99b4e41b3aa2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27dea0b42c773a53817960d006160642892fe145", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27dea0b42c773a53817960d006160642892fe145", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27dea0b42c773a53817960d006160642892fe145", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27dea0b42c773a53817960d006160642892fe145/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebdf180e15d0ae18bfcb2bd822d7f096743cd4fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebdf180e15d0ae18bfcb2bd822d7f096743cd4fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebdf180e15d0ae18bfcb2bd822d7f096743cd4fb"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "496b68e0a823e35efe1d4dbbf59856c157b5ec8d", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27dea0b42c773a53817960d006160642892fe145/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27dea0b42c773a53817960d006160642892fe145/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=27dea0b42c773a53817960d006160642892fe145", "patch": "@@ -282,6 +282,13 @@ back_threader::resolve_phi (gphi *phi, bitmap interesting)\n \t  continue;\n \t}\n \n+      // FIXME: We currently stop looking if we find a threadable path\n+      // through a PHI.  This is pessimistic, as there can be multiple\n+      // paths that can resolve the path.  For example:\n+      //\n+      // x_5 = PHI <10(4), 20(5), ...>\n+      // if (x_5 > 5)\n+\n       tree arg = gimple_phi_arg_def (phi, i);\n       if (TREE_CODE (arg) == SSA_NAME)\n \t{"}]}