{"sha": "d090f47ae0be3487c1b74ac1198e3d06900214d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA5MGY0N2FlMGJlMzQ4N2MxYjc0YWMxMTk4ZTNkMDY5MDAyMTRkMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-10-20T16:43:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-10-20T16:43:28Z"}, "message": "2008-10-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/tr1_impl/hashtable_policy.h (_Hash_node<>::_Hash_node<>\n\t(_Args&&...)): Add in C++0x mode.\n\t* include/tr1_impl/hashtable (_Hashtable<>::_M_allocate_node,\n\t_Hashtable<>::_M_deallocate_node): Use _M_get_Node_allocator in\n\tC++0x mode.\n\n\t* include/tr1_impl/hashtable (_Hashtable<>::max_size): Use\n\tNode_allocator for improved accuracy.\n\t* testsuite/tr1/6_containers/unordered_multimap/capacity/\n\t29134-multimap.cc: Adjust.\n\t* testsuite/tr1/6_containers/unordered_multimap/capacity/\n\t29134-map.cc: Likewise.\n\t* testsuite/tr1/6_containers/unordered_multimap/capacity/\n\t29134-multiset.cc: Adjust.\n\t* testsuite/tr1/6_containers/unordered_multimap/capacity/\n\t29134-set.cc: Likewise.\n\nFrom-SVN: r141242", "tree": {"sha": "fed959c0e6d060f3059bb81789ff1e54dee307be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fed959c0e6d060f3059bb81789ff1e54dee307be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d090f47ae0be3487c1b74ac1198e3d06900214d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d090f47ae0be3487c1b74ac1198e3d06900214d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d090f47ae0be3487c1b74ac1198e3d06900214d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d090f47ae0be3487c1b74ac1198e3d06900214d3/comments", "author": null, "committer": null, "parents": [{"sha": "c02c7cb1e3dee5a182dbd6ba90e1d3ca899e42f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c02c7cb1e3dee5a182dbd6ba90e1d3ca899e42f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c02c7cb1e3dee5a182dbd6ba90e1d3ca899e42f4"}], "stats": {"total": 63, "additions": 54, "deletions": 9}, "files": [{"sha": "4531127d7ec7a51f0ca6a4d4f8939d53995c2619", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d090f47ae0be3487c1b74ac1198e3d06900214d3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d090f47ae0be3487c1b74ac1198e3d06900214d3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d090f47ae0be3487c1b74ac1198e3d06900214d3", "patch": "@@ -1,3 +1,22 @@\n+2008-10-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/tr1_impl/hashtable_policy.h (_Hash_node<>::_Hash_node<>\n+\t(_Args&&...)): Add in C++0x mode.\n+\t* include/tr1_impl/hashtable (_Hashtable<>::_M_allocate_node,\n+\t_Hashtable<>::_M_deallocate_node): Use _M_get_Node_allocator in\n+\tC++0x mode.\n+\n+\t* include/tr1_impl/hashtable (_Hashtable<>::max_size): Use\n+\tNode_allocator for improved accuracy.\n+\t* testsuite/tr1/6_containers/unordered_multimap/capacity/\n+\t29134-multimap.cc: Adjust.\n+\t* testsuite/tr1/6_containers/unordered_multimap/capacity/\n+\t29134-map.cc: Likewise.\n+\t* testsuite/tr1/6_containers/unordered_multimap/capacity/\n+\t29134-multiset.cc: Adjust.\n+\t* testsuite/tr1/6_containers/unordered_multimap/capacity/\n+\t29134-set.cc: Likewise.\n+\n 2008-10-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_tree.h (_Rb_tree_node<>::_Rb_tree_node<>"}, {"sha": "c6f1ac7aff6df1b124d261ee71f54e4d1ed65835", "filename": "libstdc++-v3/include/tr1_impl/hashtable", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d090f47ae0be3487c1b74ac1198e3d06900214d3/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d090f47ae0be3487c1b74ac1198e3d06900214d3/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable?ref=d090f47ae0be3487c1b74ac1198e3d06900214d3", "patch": "@@ -296,7 +296,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \n       size_type\n       max_size() const\n-      { return _M_get_Value_allocator().max_size(); }\n+      { return _M_node_allocator.max_size(); }\n \n       // Observers\n       key_equal\n@@ -484,7 +484,11 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       _Node* __n = _M_node_allocator.allocate(1);\n       try\n \t{\n+#ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n+\t  _M_node_allocator.construct(__n, __v);\n+#else\n \t  _M_get_Value_allocator().construct(&__n->_M_v, __v);\n+#endif\n \t  __n->_M_next = 0;\n \t  return __n;\n \t}\n@@ -504,7 +508,11 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \t       _H1, _H2, _Hash, _RehashPolicy, __chc, __cit, __uk>::\n     _M_deallocate_node(_Node* __n)\n     {\n+#ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n+      _M_node_allocator.destroy(__n);\n+#else\n       _M_get_Value_allocator().destroy(&__n->_M_v);\n+#endif\n       _M_node_allocator.deallocate(__n, 1);\n     }\n "}, {"sha": "1468ee8e989e5851e2f8731ae5dbd28cfa67f9d5", "filename": "libstdc++-v3/include/tr1_impl/hashtable_policy.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d090f47ae0be3487c1b74ac1198e3d06900214d3/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d090f47ae0be3487c1b74ac1198e3d06900214d3/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable_policy.h?ref=d090f47ae0be3487c1b74ac1198e3d06900214d3", "patch": "@@ -99,13 +99,27 @@ namespace __detail\n       _Value       _M_v;\n       std::size_t  _M_hash_code;\n       _Hash_node*  _M_next;\n+\n+#ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n+      template<typename... _Args>\n+        _Hash_node(_Args&&... __args)\n+\t  : _M_v(std::forward<_Args>(__args)...),\n+\t    _M_hash_code(), _M_next() { }\n+#endif\n     };\n \n   template<typename _Value>\n     struct _Hash_node<_Value, false>\n     {\n       _Value       _M_v;\n       _Hash_node*  _M_next;\n+\n+#ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n+      template<typename... _Args>\n+        _Hash_node(_Args&&... __args)\n+\t  : _M_v(std::forward<_Args>(__args)...),\n+\t    _M_next() { }\n+#endif\n     };\n \n   // Local iterators, used to iterate within a bucket but not between"}, {"sha": "24d51ef508e74f658f2c871739b0b2b6673f5666", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered_map/capacity/29134-map.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d090f47ae0be3487c1b74ac1198e3d06900214d3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_map%2Fcapacity%2F29134-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d090f47ae0be3487c1b74ac1198e3d06900214d3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_map%2Fcapacity%2F29134-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_map%2Fcapacity%2F29134-map.cc?ref=d090f47ae0be3487c1b74ac1198e3d06900214d3", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,7 +28,8 @@ void test01()\n \n   std::tr1::unordered_map<int, int> um;\n \n-  VERIFY( um.max_size() == um.get_allocator().max_size() );\n+  VERIFY( (um.max_size() == std::allocator<std::tr1::__detail::_Hash_node<\n+ \t   std::pair<const int, int>, false> >().max_size()));\n }\n \n int main()"}, {"sha": "dc1db5088115da18c33d3dfe8527e6c45d2b2622", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered_multimap/capacity/29134-multimap.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d090f47ae0be3487c1b74ac1198e3d06900214d3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multimap%2Fcapacity%2F29134-multimap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d090f47ae0be3487c1b74ac1198e3d06900214d3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multimap%2Fcapacity%2F29134-multimap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multimap%2Fcapacity%2F29134-multimap.cc?ref=d090f47ae0be3487c1b74ac1198e3d06900214d3", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,7 +28,8 @@ void test01()\n \n   std::tr1::unordered_multimap<int, int> umm;\n \n-  VERIFY( umm.max_size() == umm.get_allocator().max_size() );\n+  VERIFY( (umm.max_size() == std::allocator<std::tr1::__detail::_Hash_node<\n+ \t   std::pair<const int, int>, false> >().max_size()) );\n }\n \n int main()"}, {"sha": "f4e2f6a1c2507633d7ccc8f699cfe9bd8e7f87fe", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered_multiset/capacity/29134-multiset.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d090f47ae0be3487c1b74ac1198e3d06900214d3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multiset%2Fcapacity%2F29134-multiset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d090f47ae0be3487c1b74ac1198e3d06900214d3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multiset%2Fcapacity%2F29134-multiset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multiset%2Fcapacity%2F29134-multiset.cc?ref=d090f47ae0be3487c1b74ac1198e3d06900214d3", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,7 +28,8 @@ void test01()\n \n   std::tr1::unordered_multiset<int> ums;\n \n-  VERIFY( ums.max_size() == ums.get_allocator().max_size() );\n+  VERIFY( (ums.max_size() == std::allocator<std::tr1::__detail::_Hash_node<\n+ \t   int, false> >().max_size()) );\n }\n \n int main()"}, {"sha": "ca8333e42f6acfa7ea4e194a1cc767bd60cbf4dd", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered_set/capacity/29134-set.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d090f47ae0be3487c1b74ac1198e3d06900214d3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_set%2Fcapacity%2F29134-set.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d090f47ae0be3487c1b74ac1198e3d06900214d3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_set%2Fcapacity%2F29134-set.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_set%2Fcapacity%2F29134-set.cc?ref=d090f47ae0be3487c1b74ac1198e3d06900214d3", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,7 +28,8 @@ void test01()\n \n   std::tr1::unordered_set<int> us;\n \n-  VERIFY( us.max_size() == us.get_allocator().max_size() );\n+  VERIFY( (us.max_size() == std::allocator<std::tr1::__detail::_Hash_node<\n+ \t   int, false> >().max_size()) );\n }\n \n int main()"}]}