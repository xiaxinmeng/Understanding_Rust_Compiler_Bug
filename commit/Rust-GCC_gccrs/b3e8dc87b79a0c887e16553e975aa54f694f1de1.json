{"sha": "b3e8dc87b79a0c887e16553e975aa54f694f1de1", "node_id": "C_kwDOANBUbNoAKGIzZThkYzg3Yjc5YTBjODg3ZTE2NTUzZTk3NWFhNTRmNjk0ZjFkZTE", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-10T10:36:46Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-11T13:52:09Z"}, "message": "[range-ops] Use existing tree code for *DIV_EXPR entries.\n\nThere is no need for a special tree code in the *DIV_EXPR entries, as\nthe parent class has one.\n\ngcc/ChangeLog:\n\n\t* range-op.cc (class operator_div): Remove tree code.\n\t(operator_div::wi_op_overflows): Handle EXACT_DIV_EXPR as\n\tTRUNC_DIV_EXPR.", "tree": {"sha": "8c89615f139b89f503b9021f7c87bc22878dd9ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c89615f139b89f503b9021f7c87bc22878dd9ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3e8dc87b79a0c887e16553e975aa54f694f1de1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3e8dc87b79a0c887e16553e975aa54f694f1de1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3e8dc87b79a0c887e16553e975aa54f694f1de1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3e8dc87b79a0c887e16553e975aa54f694f1de1/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17586bdc34ba7c23e4af1277649c59e5308f843d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17586bdc34ba7c23e4af1277649c59e5308f843d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17586bdc34ba7c23e4af1277649c59e5308f843d"}], "stats": {"total": 21, "additions": 6, "deletions": 15}, "files": [{"sha": "00a736e983df3a3b4354cf14a9910ef505c1976b", "filename": "gcc/range-op.cc", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3e8dc87b79a0c887e16553e975aa54f694f1de1/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3e8dc87b79a0c887e16553e975aa54f694f1de1/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=b3e8dc87b79a0c887e16553e975aa54f694f1de1", "patch": "@@ -1971,7 +1971,6 @@ operator_mult::wi_fold (irange &r, tree type,\n class operator_div : public cross_product_operator\n {\n public:\n-  operator_div (enum tree_code c)  { code = c; }\n   virtual void wi_fold (irange &r, tree type,\n \t\t        const wide_int &lh_lb,\n \t\t        const wide_int &lh_ub,\n@@ -1983,8 +1982,6 @@ class operator_div : public cross_product_operator\n   virtual bool fold_range (irange &r, tree type,\n \t\t\t   const irange &lh, const irange &rh,\n \t\t\t   relation_trio trio) const final override;\n-private:\n-  enum tree_code code;\n };\n \n bool\n@@ -1995,7 +1992,7 @@ operator_div::fold_range (irange &r, tree type,\n   if (!cross_product_operator::fold_range (r, type, lh, rh, trio))\n     return false;\n \n-  update_known_bitmask (r, code, lh, rh);\n+  update_known_bitmask (r, m_code, lh, rh);\n   return true;\n }\n \n@@ -2009,13 +2006,9 @@ operator_div::wi_op_overflows (wide_int &res, tree type,\n   wi::overflow_type overflow = wi::OVF_NONE;\n   signop sign = TYPE_SIGN (type);\n \n-  switch (code)\n+  switch (m_code)\n     {\n     case EXACT_DIV_EXPR:\n-      // EXACT_DIV_EXPR is implemented as TRUNC_DIV_EXPR in\n-      // operator_exact_divide.  No need to handle it here.\n-      gcc_unreachable ();\n-      break;\n     case TRUNC_DIV_EXPR:\n       res = wi::div_trunc (w0, w1, sign, &overflow);\n       break;\n@@ -2091,17 +2084,11 @@ operator_div::wi_fold (irange &r, tree type,\n   gcc_checking_assert (!r.undefined_p ());\n }\n \n-operator_div op_trunc_div (TRUNC_DIV_EXPR);\n-operator_div op_floor_div (FLOOR_DIV_EXPR);\n-operator_div op_round_div (ROUND_DIV_EXPR);\n-operator_div op_ceil_div (CEIL_DIV_EXPR);\n-\n \n class operator_exact_divide : public operator_div\n {\n   using range_operator::op1_range;\n public:\n-  operator_exact_divide () : operator_div (TRUNC_DIV_EXPR) { }\n   virtual bool op1_range (irange &r, tree type,\n \t\t\t  const irange &lhs,\n \t\t\t  const irange &op2,\n@@ -4382,6 +4369,10 @@ static operator_cast op_nop, op_convert;\n static operator_identity op_ssa, op_paren, op_obj_type;\n static operator_unknown op_realpart, op_imagpart;\n static pointer_min_max_operator op_ptr_min, op_ptr_max;\n+static operator_div op_trunc_div;\n+static operator_div op_floor_div;\n+static operator_div op_round_div;\n+static operator_div op_ceil_div;\n \n // Instantiate a range op table for integral operations.\n "}]}