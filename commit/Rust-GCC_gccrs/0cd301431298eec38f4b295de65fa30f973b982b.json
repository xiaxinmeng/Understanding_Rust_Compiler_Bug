{"sha": "0cd301431298eec38f4b295de65fa30f973b982b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNkMzAxNDMxMjk4ZWVjMzhmNGIyOTVkZTY1ZmEzMGY5NzNiOTgyYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-09T21:48:23Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-09T21:48:23Z"}, "message": "(rs6000_convert_preincs): New function.\n\nFrom-SVN: r7013", "tree": {"sha": "e54ee0282361f708bfb89171877173f9f1c34a2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e54ee0282361f708bfb89171877173f9f1c34a2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cd301431298eec38f4b295de65fa30f973b982b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd301431298eec38f4b295de65fa30f973b982b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cd301431298eec38f4b295de65fa30f973b982b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd301431298eec38f4b295de65fa30f973b982b/comments", "author": null, "committer": null, "parents": [{"sha": "9894a29157c45b6f6a0237c96729a1ad5de4183d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9894a29157c45b6f6a0237c96729a1ad5de4183d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9894a29157c45b6f6a0237c96729a1ad5de4183d"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "04a3c3d6ea1a34b708fdd34d6e58cc8ada2be867", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd301431298eec38f4b295de65fa30f973b982b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd301431298eec38f4b295de65fa30f973b982b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=0cd301431298eec38f4b295de65fa30f973b982b", "patch": "@@ -157,6 +157,34 @@ rs6000_override_options ()\n     }\n }\n \f\n+/* Look for an PRE_INC address in X that are marked as dying in INSN.\n+   Convert the addresses to a PLUS form if one is found.  */\n+\n+void\n+rs6000_convert_preincs (x, insn)\n+     rtx x;\n+     rtx insn;\n+{\n+  enum rtx_code code = GET_CODE (x);\n+  char *fmt;\n+  int i, j;\n+\n+  if (code == MEM && GET_CODE (XEXP (x, 0)) == PRE_INC\n+      && find_reg_note (insn, REG_DEAD, XEXP (XEXP (x, 0), 0)))\n+    XEXP (x, 0) = plus_constant (XEXP (XEXP (x, 0), 0),\n+\t\t\t\t GET_MODE_SIZE (GET_MODE (x)));\n+  else\n+    for (i = GET_RTX_LENGTH (code) - 1, fmt = GET_RTX_FORMAT (code);\n+\t i >= 0; i--)\n+      {\n+\tif (fmt[i] == 'e')\n+\t  rs6000_convert_preincs (XEXP (x, i), insn);\n+\telse if (fmt[i] == 'E')\n+\t  for (j = XVECLEN (x, i) - 1; j >= 0; j--)\n+\t    rs6000_convert_preincs (XVECEXP (x, i, j), insn);\n+      }\n+}\n+\f\n /* Return non-zero if this function is known to have a null epilogue.  */\n \n int"}]}