{"sha": "5744faa9851c86d018f32de7363b1064d5348d26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc0NGZhYTk4NTFjODZkMDE4ZjMyZGU3MzYzYjEwNjRkNTM0OGQyNg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-07-20T17:28:37Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-07-20T17:28:37Z"}, "message": "rs6000: New predicate any_memory_operand\n\nThe new predicate accepts both memory_operand and volatile_mem_operand.\n\n\n\t* config/rs6000/predicates.md (volatile_mem_operand): Modernize syntax.\n\t(any_memory_operand): New predicate.\n\t(reg_or_mem_operand): Use it.\n\nFrom-SVN: r273630", "tree": {"sha": "a3dcfae9ff95828f8da328596b4908ad3ef007e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3dcfae9ff95828f8da328596b4908ad3ef007e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5744faa9851c86d018f32de7363b1064d5348d26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5744faa9851c86d018f32de7363b1064d5348d26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5744faa9851c86d018f32de7363b1064d5348d26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5744faa9851c86d018f32de7363b1064d5348d26/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b3df2657401475f94a7fc60e4e7f8ed6bbe2610", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b3df2657401475f94a7fc60e4e7f8ed6bbe2610", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b3df2657401475f94a7fc60e4e7f8ed6bbe2610"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "58220e6d264b3162859f942094985c7afa026a62", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5744faa9851c86d018f32de7363b1064d5348d26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5744faa9851c86d018f32de7363b1064d5348d26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5744faa9851c86d018f32de7363b1064d5348d26", "patch": "@@ -1,3 +1,9 @@\n+2019-07-20  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/predicates.md (volatile_mem_operand): Modernize syntax.\n+\t(any_memory_operand): New predicate.\n+\t(reg_or_mem_operand): Use it.\n+\n 2019-07-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/91204"}, {"sha": "13c7c02f27aab695a04671fcf576a3adbbf8d72e", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5744faa9851c86d018f32de7363b1064d5348d26/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5744faa9851c86d018f32de7363b1064d5348d26/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=5744faa9851c86d018f32de7363b1064d5348d26", "patch": "@@ -703,12 +703,17 @@\n ;; memory references.  So this function allows us to recognize volatile\n ;; references where it's safe.\n (define_predicate \"volatile_mem_operand\"\n-  (and (and (match_code \"mem\")\n-\t    (match_test \"MEM_VOLATILE_P (op)\"))\n+  (and (match_code \"mem\")\n+       (match_test \"MEM_VOLATILE_P (op)\")\n        (if_then_else (match_test \"reload_completed\")\n \t (match_operand 0 \"memory_operand\")\n \t (match_test \"memory_address_p (mode, XEXP (op, 0))\"))))\n \n+;; Return 1 if the operand is a volatile or non-volatile memory operand.\n+(define_predicate \"any_memory_operand\"\n+  (ior (match_operand 0 \"memory_operand\")\n+       (match_operand 0 \"volatile_mem_operand\")))\n+\n ;; Return 1 if the operand is an offsettable memory operand.\n (define_predicate \"offsettable_mem_operand\"\n   (and (match_operand 0 \"memory_operand\")\n@@ -891,11 +896,10 @@\n \n ;; Return 1 if the operand is a general non-special register or memory operand.\n (define_predicate \"reg_or_mem_operand\"\n-  (ior (match_operand 0 \"memory_operand\")\n+  (ior (match_operand 0 \"gpc_reg_operand\")\n+       (match_operand 0 \"any_memory_operand\")\n        (and (match_code \"mem\")\n-\t    (match_test \"macho_lo_sum_memory_operand (op, mode)\"))\n-       (match_operand 0 \"volatile_mem_operand\")\n-       (match_operand 0 \"gpc_reg_operand\")))\n+\t    (match_test \"macho_lo_sum_memory_operand (op, mode)\"))))\n \n ;; Return 1 if the operand is CONST_DOUBLE 0, register or memory operand.\n (define_predicate \"zero_reg_mem_operand\""}]}