{"sha": "fc6827fe9fe4d3c72013462bf2d9d658bf73d7bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM2ODI3ZmU5ZmU0ZDNjNzIwMTM0NjJiZjJkOWQ2NThiZjczZDdiYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2007-04-17T05:33:38Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2007-04-17T05:33:38Z"}, "message": "re PR tree-optimization/31522 (False overflow warning with phi nodes)\n\n./:\tPR tree-optimization/31522\n\t* tree-vrp.c (vr_phi_edge_counts): New static variable.\n\t(vrp_initialize): Allocate vr_phi_edge_counts.\n\t(vrp_visit_phi_node): Don't push to infinity if we saw a new\n\texecutable edge.  Drop test for all constants.\n\t(vrp_finalize): Free vrp_phi_edge_counts.\ntestsuite/:\n\tPR tree-optimization/31522\n\t* gcc.dg/Wstrict-overflow-16.c: New test.\n\nFrom-SVN: r123908", "tree": {"sha": "260efc901363034c740d1c84a2d888987c09e4ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/260efc901363034c740d1c84a2d888987c09e4ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc6827fe9fe4d3c72013462bf2d9d658bf73d7bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6827fe9fe4d3c72013462bf2d9d658bf73d7bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc6827fe9fe4d3c72013462bf2d9d658bf73d7bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6827fe9fe4d3c72013462bf2d9d658bf73d7bb/comments", "author": null, "committer": null, "parents": [{"sha": "4075e2319853586499e3d059ff514151deca2396", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4075e2319853586499e3d059ff514151deca2396", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4075e2319853586499e3d059ff514151deca2396"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "2003af8c52155693e41043a42e8346b200a00476", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6827fe9fe4d3c72013462bf2d9d658bf73d7bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6827fe9fe4d3c72013462bf2d9d658bf73d7bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc6827fe9fe4d3c72013462bf2d9d658bf73d7bb", "patch": "@@ -1,5 +1,12 @@\n 2007-04-16  Ian Lance Taylor  <iant@google.com>\n \n+\tPR tree-optimization/31522\n+\t* tree-vrp.c (vr_phi_edge_counts): New static variable.\n+\t(vrp_initialize): Allocate vr_phi_edge_counts.\n+\t(vrp_visit_phi_node): Don't push to infinity if we saw a new\n+\texecutable edge.  Drop test for all constants.\n+\t(vrp_finalize): Free vrp_phi_edge_counts.\n+\n \t* doc/cpp.texi (Common Predefined Macros): Clarify description of\n \t__GNUC_GNU_INLINE__ and __GNUC_STDC_INLINE__.\n "}, {"sha": "ea93fccaaeed9d73a441a801814aef69101eefad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6827fe9fe4d3c72013462bf2d9d658bf73d7bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6827fe9fe4d3c72013462bf2d9d658bf73d7bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fc6827fe9fe4d3c72013462bf2d9d658bf73d7bb", "patch": "@@ -1,3 +1,8 @@\n+2007-04-16  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR tree-optimization/31522\n+\t* gcc.dg/Wstrict-overflow-16.c: New test.\n+\n 2007-04-17  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* gcc.dg/cpp/_Pragma6.c: Skip on fido-*-* and m68k-*-*."}, {"sha": "e8c31cf5046524f47325941f336182be86a017e8", "filename": "gcc/testsuite/gcc.dg/Wstrict-overflow-16.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6827fe9fe4d3c72013462bf2d9d658bf73d7bb/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-overflow-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6827fe9fe4d3c72013462bf2d9d658bf73d7bb/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-overflow-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-overflow-16.c?ref=fc6827fe9fe4d3c72013462bf2d9d658bf73d7bb", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fstrict-overflow -O2 -Wstrict-overflow\" } */\n+\n+/* From PR 31522.  */\n+\n+int f (int x) {\n+  int y;\n+  if (x <= 4) y = 1;\n+  else y = x / 4;\n+  return y <= 0;\n+}"}, {"sha": "43cd0eb967f78e51361ff0482b5db7a2bfde0dbf", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6827fe9fe4d3c72013462bf2d9d658bf73d7bb/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6827fe9fe4d3c72013462bf2d9d658bf73d7bb/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=fc6827fe9fe4d3c72013462bf2d9d658bf73d7bb", "patch": "@@ -95,6 +95,11 @@ static sbitmap blocks_visited;\n    of values that SSA name N_I may take.  */\n static value_range_t **vr_value;\n \n+/* For a PHI node which sets SSA name N_I, VR_COUNTS[I] holds the\n+   number of executable edges we saw the last time we visited the\n+   node.  */\n+static int *vr_phi_edge_counts;\n+\n \n /* Return whether TYPE should use an overflow infinity distinct from\n    TYPE_{MIN,MAX}_VALUE.  We use an overflow infinity value to\n@@ -4433,6 +4438,7 @@ vrp_initialize (void)\n   basic_block bb;\n \n   vr_value = XCNEWVEC (value_range_t *, num_ssa_names);\n+  vr_phi_edge_counts = XCNEWVEC (int, num_ssa_names);\n \n   FOR_EACH_BB (bb)\n     {\n@@ -5185,7 +5191,7 @@ vrp_visit_phi_node (tree phi)\n   tree lhs = PHI_RESULT (phi);\n   value_range_t *lhs_vr = get_value_range (lhs);\n   value_range_t vr_result = { VR_UNDEFINED, NULL_TREE, NULL_TREE, NULL };\n-  bool all_const = true;\n+  int edges, old_edges;\n \n   copy_value_range (&vr_result, lhs_vr);\n \n@@ -5195,6 +5201,7 @@ vrp_visit_phi_node (tree phi)\n       print_generic_expr (dump_file, phi, dump_flags);\n     }\n \n+  edges = 0;\n   for (i = 0; i < PHI_NUM_ARGS (phi); i++)\n     {\n       edge e = PHI_ARG_EDGE (phi, i);\n@@ -5212,10 +5219,11 @@ vrp_visit_phi_node (tree phi)\n \t  tree arg = PHI_ARG_DEF (phi, i);\n \t  value_range_t vr_arg;\n \n+\t  ++edges;\n+\n \t  if (TREE_CODE (arg) == SSA_NAME)\n \t    {\n \t      vr_arg = *(get_value_range (arg));\n-\t      all_const = false;\n \t    }\n \t  else\n \t    {\n@@ -5244,11 +5252,16 @@ vrp_visit_phi_node (tree phi)\n   if (vr_result.type == VR_VARYING)\n     goto varying;\n \n+  old_edges = vr_phi_edge_counts[SSA_NAME_VERSION (lhs)];\n+  vr_phi_edge_counts[SSA_NAME_VERSION (lhs)] = edges;\n+\n   /* To prevent infinite iterations in the algorithm, derive ranges\n      when the new value is slightly bigger or smaller than the\n-     previous one.  */\n+     previous one.  We don't do this if we have seen a new executable\n+     edge; this helps us avoid an overflow infinity for conditionals\n+     which are not in a loop.  */\n   if (lhs_vr->type == VR_RANGE && vr_result.type == VR_RANGE\n-      && !all_const)\n+      && edges <= old_edges)\n     {\n       if (!POINTER_TYPE_P (TREE_TYPE (lhs)))\n \t{\n@@ -5827,10 +5840,12 @@ vrp_finalize (void)\n \n   free (single_val_range);\n   free (vr_value);\n+  free (vr_phi_edge_counts);\n \n   /* So that we can distinguish between VRP data being available\n      and not available.  */\n   vr_value = NULL;\n+  vr_phi_edge_counts = NULL;\n }\n \n "}]}