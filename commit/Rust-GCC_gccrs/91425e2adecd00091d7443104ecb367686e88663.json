{"sha": "91425e2adecd00091d7443104ecb367686e88663", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE0MjVlMmFkZWNkMDAwOTFkNzQ0MzEwNGVjYjM2NzY4NmU4ODY2Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-07-31T07:19:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-07-31T07:19:32Z"}, "message": "i386: Improve extensions of __builtin_clz and constant - __builtin_clz for -mno-lzcnt [PR78103]\n\nThis patch improves emitted code for the non-TARGET_LZCNT case.\nAs __builtin_clz* is UB on 0 argument and for !TARGET_LZCNT\nCLZ_VALUE_DEFINED_AT_ZERO is 0, it is UB even at RTL time and so we\ncan take advantage of that and assume the result will be 0 to 31 or\n0 to 63.\nGiven that, sign or zero extension of that result are the same and\nare actually already performed by bsrl or xorl instructions.\nAnd constant - __builtin_clz* can be simplified into\nbsr + constant - bitmask.\nFor TARGET_LZCNT, a lot of this is already fine as is (e.g. the sign or\nzero extensions), and other optimizations are IMHO not possible\n(if we have lzcnt, we've lost information on whether it is UB at\nzero or not and so can't transform it into bsr even when that is\n1-2 insns shorter).\nThe changes on the 3 testcases between unpatched and patched gcc\nare for -m64:\npr78103-1.s:\n        bsrq    %rdi, %rax\n-       xorq    $63, %rax\n-       cltq\n+       xorl    $63, %eax\n...\n        bsrq    %rdi, %rax\n-       xorq    $63, %rax\n-       cltq\n+       xorl    $63, %eax\n...\n        bsrl    %edi, %eax\n        xorl    $31, %eax\n-       cltq\n...\n        bsrl    %edi, %eax\n        xorl    $31, %eax\n-       cltq\npr78103-2.s:\n        bsrl    %edi, %edi\n-       movl    $32, %eax\n-       xorl    $31, %edi\n-       subl    %edi, %eax\n+       leal    1(%rdi), %eax\n...\n-       bsrl    %edi, %edi\n-       movl    $31, %eax\n-       xorl    $31, %edi\n-       subl    %edi, %eax\n+       bsrl    %edi, %eax\n...\n        bsrq    %rdi, %rdi\n-       movl    $64, %eax\n-       xorq    $63, %rdi\n-       subl    %edi, %eax\n+       leal    1(%rdi), %eax\n...\n-       bsrq    %rdi, %rdi\n-       movl    $63, %eax\n-       xorq    $63, %rdi\n-       subl    %edi, %eax\n+       bsrq    %rdi, %rax\npr78103-3.s:\n        bsrl    %edi, %edi\n-       movl    $32, %eax\n-       xorl    $31, %edi\n-       movslq  %edi, %rdi\n-       subq    %rdi, %rax\n+       leaq    1(%rdi), %rax\n...\n-       bsrl    %edi, %edi\n-       movl    $31, %eax\n-       xorl    $31, %edi\n-       movslq  %edi, %rdi\n-       subq    %rdi, %rax\n+       bsrl    %edi, %eax\n...\n        bsrq    %rdi, %rdi\n-       movl    $64, %eax\n-       xorq    $63, %rdi\n-       movslq  %edi, %rdi\n-       subq    %rdi, %rax\n+       leaq    1(%rdi), %rax\n...\n-       bsrq    %rdi, %rdi\n-       movl    $63, %eax\n-       xorq    $63, %rdi\n-       movslq  %edi, %rdi\n-       subq    %rdi, %rax\n+       bsrq    %rdi, %rax\n\nMost of the changes are done with combine splitters, but for\n*bsr_rex64_2 and *bsr_2 I had to use define_insn_and_split, because\nas mentioned in the PR the combiner unfortunately doesn't create LOG_LINKS\nin between the two insns created by combine splitter, so it can't be\ncombined further with following instructions.\n\n2021-07-31  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/78103\n\t* config/i386/i386.md (bsr_rex64_1, bsr_1, bsr_zext_1): New\n\tdefine_insn patterns.\n\t(*bsr_rex64_2, *bsr_2): New define_insn_and_split patterns.\n\tAdd combine splitters for constant - clz.\n\t(clz<mode>2): Use a temporary pseudo for bsr result.\n\n\t* gcc.target/i386/pr78103-1.c: New test.\n\t* gcc.target/i386/pr78103-2.c: New test.\n\t* gcc.target/i386/pr78103-3.c: New test.", "tree": {"sha": "a9eb18242a9509751f6bb18e605009123400850b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9eb18242a9509751f6bb18e605009123400850b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91425e2adecd00091d7443104ecb367686e88663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91425e2adecd00091d7443104ecb367686e88663", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91425e2adecd00091d7443104ecb367686e88663", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91425e2adecd00091d7443104ecb367686e88663/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfd60b39cdc576177c4a327897be55f3bf3f449e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfd60b39cdc576177c4a327897be55f3bf3f449e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfd60b39cdc576177c4a327897be55f3bf3f449e"}], "stats": {"total": 303, "additions": 298, "deletions": 5}, "files": [{"sha": "c9787d73262a4bb891e1023f0180451acda83e30", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 205, "deletions": 5, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91425e2adecd00091d7443104ecb367686e88663/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91425e2adecd00091d7443104ecb367686e88663/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=91425e2adecd00091d7443104ecb367686e88663", "patch": "@@ -14784,6 +14784,18 @@\n    (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"DI\")])\n \n+(define_insn \"bsr_rex64_1\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(minus:DI (const_int 63)\n+\t\t  (clz:DI (match_operand:DI 1 \"nonimmediate_operand\" \"rm\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"!TARGET_LZCNT && TARGET_64BIT\"\n+  \"bsr{q}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"znver1_decode\" \"vector\")\n+   (set_attr \"mode\" \"DI\")])\n+\n (define_insn \"bsr\"\n   [(set (reg:CCZ FLAGS_REG)\n \t(compare:CCZ (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n@@ -14798,17 +14810,204 @@\n    (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"bsr_1\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(minus:SI (const_int 31)\n+\t\t  (clz:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"!TARGET_LZCNT\"\n+  \"bsr{l}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"znver1_decode\" \"vector\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"bsr_zext_1\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (minus:SI\n+\t    (const_int 31)\n+\t    (clz:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"!TARGET_LZCNT && TARGET_64BIT\"\n+  \"bsr{l}\\t{%1, %k0|%k0, %1}\"\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"znver1_decode\" \"vector\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+; As bsr is undefined behavior on zero and for other input\n+; values it is in range 0 to 63, we can optimize away sign-extends.\n+(define_insn_and_split \"*bsr_rex64_2\"\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(xor:DI\n+\t  (sign_extend:DI\n+\t    (minus:SI\n+\t      (const_int 63)\n+\t      (subreg:SI (clz:DI (match_operand:DI 1 \"nonimmediate_operand\"))\n+\t\t\t 0)))\n+\t  (const_int 63)))\n+    (clobber (reg:CC FLAGS_REG))]\n+  \"!TARGET_LZCNT && TARGET_64BIT && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel [(set (reg:CCZ FLAGS_REG)\n+\t\t   (compare:CCZ (match_dup 1) (const_int 0)))\n+\t      (set (match_dup 2)\n+\t\t   (minus:DI (const_int 63) (clz:DI (match_dup 1))))])\n+   (parallel [(set (match_dup 0)\n+\t\t   (zero_extend:DI (xor:SI (match_dup 3) (const_int 63))))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  operands[2] = gen_reg_rtx (DImode);\n+  operands[3] = lowpart_subreg (SImode, operands[2], DImode);\n+})\n+\n+(define_insn_and_split \"*bsr_2\"\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(sign_extend:DI\n+\t  (xor:SI\n+\t    (minus:SI\n+\t      (const_int 31)\n+\t      (clz:SI (match_operand:SI 1 \"nonimmediate_operand\")))\n+\t    (const_int 31))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"!TARGET_LZCNT && TARGET_64BIT && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel [(set (reg:CCZ FLAGS_REG)\n+\t\t   (compare:CCZ (match_dup 1) (const_int 0)))\n+\t      (set (match_dup 2)\n+\t\t   (minus:SI (const_int 31) (clz:SI (match_dup 1))))])\n+   (parallel [(set (match_dup 0)\n+\t\t   (zero_extend:DI (xor:SI (match_dup 2) (const_int 31))))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+  \"operands[2] = gen_reg_rtx (SImode);\")\n+\n+; Splitters to optimize 64 - __builtin_clzl (x) or 32 - __builtin_clz (x).\n+; Again, as for !TARGET_LZCNT CLZ is UB at zero, CLZ is guaranteed to be\n+; in [0, 63] or [0, 31] range.\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(minus:SI\n+\t  (match_operand:SI 2 \"const_int_operand\")\n+\t  (xor:SI\n+\t    (minus:SI (const_int 63)\n+\t\t      (subreg:SI\n+\t\t\t(clz:DI (match_operand:DI 1 \"nonimmediate_operand\"))\n+\t\t\t0))\n+\t    (const_int 63))))]\n+  \"!TARGET_LZCNT && TARGET_64BIT && ix86_pre_reload_split ()\"\n+  [(set (match_dup 3)\n+\t(minus:DI (const_int 63) (clz:DI (match_dup 1))))\n+   (set (match_dup 0)\n+\t(plus:SI (match_dup 5) (match_dup 4)))]\n+{\n+  operands[3] = gen_reg_rtx (DImode);\n+  operands[5] = lowpart_subreg (SImode, operands[3], DImode);\n+  if (INTVAL (operands[2]) == 63)\n+    {\n+      emit_insn (gen_bsr_rex64_1 (operands[3], operands[1]));\n+      emit_move_insn (operands[0], operands[5]);\n+      DONE;\n+    }\n+  operands[4] = gen_int_mode (UINTVAL (operands[2]) - 63, SImode);\n+})\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(minus:SI\n+\t  (match_operand:SI 2 \"const_int_operand\")\n+\t  (xor:SI\n+\t    (minus:SI (const_int 31)\n+\t\t      (clz:SI (match_operand:SI 1 \"nonimmediate_operand\")))\n+\t    (const_int 31))))]\n+  \"!TARGET_LZCNT && ix86_pre_reload_split ()\"\n+  [(set (match_dup 3)\n+\t(minus:SI (const_int 31) (clz:SI (match_dup 1))))\n+   (set (match_dup 0)\n+\t(plus:SI (match_dup 3) (match_dup 4)))]\n+{\n+  if (INTVAL (operands[2]) == 31)\n+    {\n+      emit_insn (gen_bsr_1 (operands[0], operands[1]));\n+      DONE;\n+    }\n+  operands[3] = gen_reg_rtx (SImode);\n+  operands[4] = gen_int_mode (UINTVAL (operands[2]) - 31, SImode);\n+})\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(minus:DI\n+\t  (match_operand:DI 2 \"const_int_operand\")\n+\t  (xor:DI\n+\t    (sign_extend:DI\n+\t      (minus:SI (const_int 63)\n+\t\t\t(subreg:SI\n+\t\t\t  (clz:DI (match_operand:DI 1 \"nonimmediate_operand\"))\n+\t\t\t  0)))\n+\t    (const_int 63))))]\n+  \"!TARGET_LZCNT\n+   && TARGET_64BIT\n+   && ix86_pre_reload_split ()\n+   && ((unsigned HOST_WIDE_INT)\n+       trunc_int_for_mode (UINTVAL (operands[2]) - 63, SImode)\n+       == UINTVAL (operands[2]) - 63)\"\n+  [(set (match_dup 3)\n+\t(minus:DI (const_int 63) (clz:DI (match_dup 1))))\n+   (set (match_dup 0)\n+\t(plus:DI (match_dup 3) (match_dup 4)))]\n+{\n+  if (INTVAL (operands[2]) == 63)\n+    {\n+      emit_insn (gen_bsr_rex64_1 (operands[0], operands[1]));\n+      DONE;\n+    }\n+  operands[3] = gen_reg_rtx (DImode);\n+  operands[4] = GEN_INT (UINTVAL (operands[2]) - 63);\n+})\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(minus:DI\n+\t  (match_operand:DI 2 \"const_int_operand\")\n+\t  (sign_extend:DI\n+\t    (xor:SI\n+\t      (minus:SI (const_int 31)\n+\t\t\t(clz:SI (match_operand:SI 1 \"nonimmediate_operand\")))\n+\t      (const_int 31)))))]\n+  \"!TARGET_LZCNT\n+   && TARGET_64BIT\n+   && ix86_pre_reload_split ()\n+   && ((unsigned HOST_WIDE_INT)\n+       trunc_int_for_mode (UINTVAL (operands[2]) - 31, SImode)\n+       == UINTVAL (operands[2]) - 31)\"\n+  [(set (match_dup 3)\n+\t(zero_extend:DI (minus:SI (const_int 31) (clz:SI (match_dup 1)))))\n+   (set (match_dup 0)\n+\t(plus:DI (match_dup 3) (match_dup 4)))]\n+{\n+  if (INTVAL (operands[2]) == 31)\n+    {\n+      emit_insn (gen_bsr_zext_1 (operands[0], operands[1]));\n+      DONE;\n+    }\n+  operands[3] = gen_reg_rtx (DImode);\n+  operands[4] = GEN_INT (UINTVAL (operands[2]) - 31);\n+})\n+\n (define_expand \"clz<mode>2\"\n   [(parallel\n      [(set (reg:CCZ FLAGS_REG)\n \t(compare:CCZ (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n \t\t     (const_int 0)))\n-      (set (match_operand:SWI48 0 \"register_operand\")\n-\t   (minus:SWI48\n-\t     (match_dup 2)\n-\t     (clz:SWI48 (match_dup 1))))])\n+      (set (match_dup 3) (minus:SWI48\n+\t\t\t   (match_dup 2)\n+\t\t\t   (clz:SWI48 (match_dup 1))))])\n    (parallel\n-     [(set (match_dup 0) (xor:SWI48 (match_dup 0) (match_dup 2)))\n+     [(set (match_operand:SWI48 0 \"register_operand\")\n+\t   (xor:SWI48 (match_dup 3) (match_dup 2)))\n       (clobber (reg:CC FLAGS_REG))])]\n   \"\"\n {\n@@ -14818,6 +15017,7 @@\n       DONE;\n     }\n   operands[2] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode)-1);\n+  operands[3] = gen_reg_rtx (<MODE>mode);\n })\n \n (define_insn_and_split \"clz<mode>2_lzcnt\""}, {"sha": "95aea694c45a3574ffcd3eb637ceae277eecab7c", "filename": "gcc/testsuite/gcc.target/i386/pr78103-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91425e2adecd00091d7443104ecb367686e88663/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78103-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91425e2adecd00091d7443104ecb367686e88663/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78103-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78103-1.c?ref=91425e2adecd00091d7443104ecb367686e88663", "patch": "@@ -0,0 +1,28 @@\n+/* PR target/78103 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mno-lzcnt\" } */\n+/* { dg-final { scan-assembler-not {\\mcltq\\M} } } */\n+\n+long long\n+foo (long long x)\n+{\n+  return __builtin_clzll (x);\n+}\n+\n+long long\n+bar (long long x)\n+{\n+  return (unsigned int) __builtin_clzll (x);\n+}\n+\n+long long\n+baz (int x)\n+{\n+  return __builtin_clz (x);\n+}\n+\n+long long\n+qux (int x)\n+{\n+  return (unsigned int) __builtin_clz (x);\n+}"}, {"sha": "b35233829261c61ed66e82a563eb023ee0f10b2c", "filename": "gcc/testsuite/gcc.target/i386/pr78103-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91425e2adecd00091d7443104ecb367686e88663/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78103-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91425e2adecd00091d7443104ecb367686e88663/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78103-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78103-2.c?ref=91425e2adecd00091d7443104ecb367686e88663", "patch": "@@ -0,0 +1,33 @@\n+/* PR target/78103 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-lzcnt\" } */\n+/* { dg-final { scan-assembler-not {\\mmovl\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mxor[lq]\\M} } } */\n+/* { dg-final { scan-assembler-not {\\msubl\\M} } } */\n+/* { dg-final { scan-assembler {\\m(leal|addl)\\M} } } */\n+\n+unsigned int\n+foo (unsigned int x)\n+{\n+  return __CHAR_BIT__ * sizeof (unsigned int) - __builtin_clz (x);\n+}\n+\n+unsigned int\n+bar (unsigned int x)\n+{\n+  return __CHAR_BIT__ * sizeof (unsigned int) - 1 - __builtin_clz (x);\n+}\n+\n+#ifdef __x86_64__\n+unsigned int\n+baz (unsigned long long x)\n+{\n+  return __CHAR_BIT__ * sizeof (unsigned long long) - __builtin_clzll (x);\n+}\n+\n+unsigned int\n+qux (unsigned long long x)\n+{\n+  return __CHAR_BIT__ * sizeof (unsigned long long) - 1 - __builtin_clzll (x);\n+}\n+#endif"}, {"sha": "49a36eccf4d1672a81887941c6a3012c9ef15621", "filename": "gcc/testsuite/gcc.target/i386/pr78103-3.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91425e2adecd00091d7443104ecb367686e88663/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78103-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91425e2adecd00091d7443104ecb367686e88663/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78103-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78103-3.c?ref=91425e2adecd00091d7443104ecb367686e88663", "patch": "@@ -0,0 +1,32 @@\n+/* PR target/78103 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mno-lzcnt\" } */\n+/* { dg-final { scan-assembler-not {\\mmovl\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mmovslq\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mxor[lq]\\M} } } */\n+/* { dg-final { scan-assembler-not {\\msubq\\M} } } */\n+/* { dg-final { scan-assembler {\\m(leaq|addq)\\M} } } */\n+\n+unsigned long long\n+foo (unsigned int x)\n+{\n+  return __CHAR_BIT__ * sizeof (unsigned int) - __builtin_clz (x);\n+}\n+\n+unsigned long long\n+bar (unsigned int x)\n+{\n+  return __CHAR_BIT__ * sizeof (unsigned int) - 1 - __builtin_clz (x);\n+}\n+\n+unsigned long long\n+baz (unsigned long long x)\n+{\n+  return __CHAR_BIT__ * sizeof (unsigned long long) - __builtin_clzll (x);\n+}\n+\n+unsigned long long\n+qux (unsigned long long x)\n+{\n+  return __CHAR_BIT__ * sizeof (unsigned long long) - 1 - __builtin_clzll (x);\n+}"}]}