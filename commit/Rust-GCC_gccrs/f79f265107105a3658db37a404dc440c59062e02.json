{"sha": "f79f265107105a3658db37a404dc440c59062e02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc5ZjI2NTEwNzEwNWEzNjU4ZGIzN2E0MDRkYzQ0MGM1OTA2MmUwMg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-02-28T18:51:14Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-02-28T18:51:14Z"}, "message": "c-parse.in (STATIC): New terminal.\n\n\t* c-parse.in (STATIC): New terminal.\n\t(scspec): New non-terminal.  Update productions accordingly.\n\t(program): Remove bogus ifc / end ifc.\n\t(array_declarator): Simplify production using STATIC.\n\nFrom-SVN: r50155", "tree": {"sha": "2243c7a0b1d7e4ced64a5a18ca4083f462757e95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2243c7a0b1d7e4ced64a5a18ca4083f462757e95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f79f265107105a3658db37a404dc440c59062e02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f79f265107105a3658db37a404dc440c59062e02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f79f265107105a3658db37a404dc440c59062e02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f79f265107105a3658db37a404dc440c59062e02/comments", "author": null, "committer": null, "parents": [{"sha": "001e3fee0decd0ebf7a10270cce0ef93b94fa772", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/001e3fee0decd0ebf7a10270cce0ef93b94fa772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/001e3fee0decd0ebf7a10270cce0ef93b94fa772"}], "stats": {"total": 92, "additions": 47, "deletions": 45}, "files": [{"sha": "9bd59b1bba9f0b9baeab1597b9ca3120c943eb7d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79f265107105a3658db37a404dc440c59062e02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79f265107105a3658db37a404dc440c59062e02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f79f265107105a3658db37a404dc440c59062e02", "patch": "@@ -1,3 +1,10 @@\n+2002-02-28  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* c-parse.in (STATIC): New terminal.\n+\t(scspec): New non-terminal.  Update productions accordingly.\n+\t(program): Remove bogus ifc / end ifc.\n+\t(array_declarator): Simplify production using STATIC.\n+\n 2002-02-28  Jim Meyering  <meyering@lucent.com>\n \n \t* cpplex.c (cpp_parse_escape): Restore mistakenly-removed code:"}, {"sha": "80e4ca862194270958c2dd70d740c08c9ef8c55f", "filename": "gcc/c-parse.in", "status": "modified", "additions": 40, "deletions": 45, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79f265107105a3658db37a404dc440c59062e02/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79f265107105a3658db37a404dc440c59062e02/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=f79f265107105a3658db37a404dc440c59062e02", "patch": "@@ -85,7 +85,8 @@ end ifobjc\n \n /* Reserved words that specify storage class.\n    yylval contains an IDENTIFIER_NODE which indicates which one.  */\n-%token SCSPEC\n+%token SCSPEC\t\t\t/* Storage class other than static.  */\n+%token STATIC\t\t\t/* Static storage class.  */\n \n /* Reserved words that specify type.\n    yylval contains an IDENTIFIER_NODE which indicates which one.  */\n@@ -167,7 +168,7 @@ end ifobjc\n %type <ttype> typespec_reserved_nonattr typespec_reserved_attr\n %type <ttype> typespec_nonreserved_nonattr\n \n-%type <ttype> SCSPEC TYPESPEC TYPE_QUAL maybe_type_qual\n+%type <ttype> scspec SCSPEC STATIC TYPESPEC TYPE_QUAL maybe_type_qual\n %type <ttype> initdecls notype_initdecls initdcl notype_initdcl\n %type <ttype> init maybeasm\n %type <ttype> asm_operands nonnull_asm_operands asm_operand asm_clobbers\n@@ -329,9 +330,10 @@ program: /* empty */\n \t\t     get us back to the global binding level.  */\n \t\t  while (! global_bindings_p ())\n \t\t    poplevel (0, 0, 0);\n-ifc\n+\t\t  /* __FUNCTION__ is defined at file scope (\"\").  This\n+\t\t     call may not be necessary as my tests indicate it\n+\t\t     still works without it.  */\n \t\t  finish_fname_decls ();\n-end ifc\n                   finish_file ();\n \t\t}\n \t;\n@@ -854,7 +856,7 @@ decl:\n \n /* A list of declaration specifiers.  These are:\n \n-   - Storage class specifiers (SCSPEC), which for GCC currently include\n+   - Storage class specifiers (scspec), which for GCC currently includes\n    function specifiers (\"inline\").\n \n    - Type specifiers (typespec_*).\n@@ -1025,7 +1027,7 @@ declspecs_nosc_ts_sa_ea:\n \t;\n \n declspecs_sc_nots_nosa_noea:\n-\t  SCSPEC\n+\t  scspec\n \t\t{ $$ = tree_cons (NULL_TREE, $1, NULL_TREE);\n \t\t  TREE_STATIC ($$) = 0; }\n \t| declspecs_sc_nots_nosa_noea TYPE_QUAL\n@@ -1034,25 +1036,25 @@ declspecs_sc_nots_nosa_noea:\n \t| declspecs_sc_nots_nosa_ea TYPE_QUAL\n \t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n \t\t  TREE_STATIC ($$) = 1; }\n-\t| declspecs_nosc_nots_nosa_noea SCSPEC\n+\t| declspecs_nosc_nots_nosa_noea scspec\n \t\t{ if (extra_warnings && TREE_STATIC ($1))\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER ($2));\n \t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n \t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n-\t| declspecs_nosc_nots_nosa_ea SCSPEC\n+\t| declspecs_nosc_nots_nosa_ea scspec\n \t\t{ if (extra_warnings && TREE_STATIC ($1))\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER ($2));\n \t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n \t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n-\t| declspecs_sc_nots_nosa_noea SCSPEC\n+\t| declspecs_sc_nots_nosa_noea scspec\n \t\t{ if (extra_warnings && TREE_STATIC ($1))\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER ($2));\n \t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n \t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n-\t| declspecs_sc_nots_nosa_ea SCSPEC\n+\t| declspecs_sc_nots_nosa_ea scspec\n \t\t{ if (extra_warnings && TREE_STATIC ($1))\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER ($2));\n@@ -1073,25 +1075,25 @@ declspecs_sc_nots_sa_noea:\n \t| declspecs_sc_nots_sa_ea TYPE_QUAL\n \t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n \t\t  TREE_STATIC ($$) = 1; }\n-\t| declspecs_nosc_nots_sa_noea SCSPEC\n+\t| declspecs_nosc_nots_sa_noea scspec\n \t\t{ if (extra_warnings && TREE_STATIC ($1))\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER ($2));\n \t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n \t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n-\t| declspecs_nosc_nots_sa_ea SCSPEC\n+\t| declspecs_nosc_nots_sa_ea scspec\n \t\t{ if (extra_warnings && TREE_STATIC ($1))\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER ($2));\n \t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n \t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n-\t| declspecs_sc_nots_sa_noea SCSPEC\n+\t| declspecs_sc_nots_sa_noea scspec\n \t\t{ if (extra_warnings && TREE_STATIC ($1))\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER ($2));\n \t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n \t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n-\t| declspecs_sc_nots_sa_ea SCSPEC\n+\t| declspecs_sc_nots_sa_ea scspec\n \t\t{ if (extra_warnings && TREE_STATIC ($1))\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER ($2));\n@@ -1124,25 +1126,25 @@ declspecs_sc_ts_nosa_noea:\n \t| declspecs_sc_nots_nosa_ea typespec_nonattr\n \t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n \t\t  TREE_STATIC ($$) = 1; }\n-\t| declspecs_nosc_ts_nosa_noea SCSPEC\n+\t| declspecs_nosc_ts_nosa_noea scspec\n \t\t{ if (extra_warnings && TREE_STATIC ($1))\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER ($2));\n \t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n \t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n-\t| declspecs_nosc_ts_nosa_ea SCSPEC\n+\t| declspecs_nosc_ts_nosa_ea scspec\n \t\t{ if (extra_warnings && TREE_STATIC ($1))\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER ($2));\n \t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n \t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n-\t| declspecs_sc_ts_nosa_noea SCSPEC\n+\t| declspecs_sc_ts_nosa_noea scspec\n \t\t{ if (extra_warnings && TREE_STATIC ($1))\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER ($2));\n \t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n \t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n-\t| declspecs_sc_ts_nosa_ea SCSPEC\n+\t| declspecs_sc_ts_nosa_ea scspec\n \t\t{ if (extra_warnings && TREE_STATIC ($1))\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER ($2));\n@@ -1187,25 +1189,25 @@ declspecs_sc_ts_sa_noea:\n \t| declspecs_sc_nots_sa_ea typespec_nonattr\n \t\t{ $$ = tree_cons (NULL_TREE, $2, $1);\n \t\t  TREE_STATIC ($$) = 1; }\n-\t| declspecs_nosc_ts_sa_noea SCSPEC\n+\t| declspecs_nosc_ts_sa_noea scspec\n \t\t{ if (extra_warnings && TREE_STATIC ($1))\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER ($2));\n \t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n \t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n-\t| declspecs_nosc_ts_sa_ea SCSPEC\n+\t| declspecs_nosc_ts_sa_ea scspec\n \t\t{ if (extra_warnings && TREE_STATIC ($1))\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER ($2));\n \t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n \t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n-\t| declspecs_sc_ts_sa_noea SCSPEC\n+\t| declspecs_sc_ts_sa_noea scspec\n \t\t{ if (extra_warnings && TREE_STATIC ($1))\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER ($2));\n \t\t  $$ = tree_cons (NULL_TREE, $2, $1);\n \t\t  TREE_STATIC ($$) = TREE_STATIC ($1); }\n-\t| declspecs_sc_ts_sa_ea SCSPEC\n+\t| declspecs_sc_ts_sa_ea scspec\n \t\t{ if (extra_warnings && TREE_STATIC ($1))\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER ($2));\n@@ -1479,10 +1481,15 @@ attrib:\n \n any_word:\n \t  identifier\n-\t| SCSPEC\n+\t| scspec\n \t| TYPESPEC\n \t| TYPE_QUAL\n \t;\n+\n+scspec:\n+\t  STATIC\n+\t| SCSPEC\n+\t;\n \f\n /* Initializers.  `init' is the entry point.  */\n \n@@ -1972,30 +1979,17 @@ direct_absdcl1:\n /* The [...] part of a declarator for an array type.  */\n \n array_declarator:\n-\t  '[' expr ']'\n-\t\t{ $$ = build_array_declarator ($2, NULL_TREE, 0, 0); }\n-\t| '[' declspecs_nosc expr ']'\n+\t'[' maybe_type_quals_attrs expr ']'\n \t\t{ $$ = build_array_declarator ($3, $2, 0, 0); }\n-\t| '[' ']'\n-\t\t{ $$ = build_array_declarator (NULL_TREE, NULL_TREE, 0, 0); }\n-\t| '[' declspecs_nosc ']'\n+\t| '[' maybe_type_quals_attrs ']'\n \t\t{ $$ = build_array_declarator (NULL_TREE, $2, 0, 0); }\n-\t| '[' '*' ']'\n-\t\t{ $$ = build_array_declarator (NULL_TREE, NULL_TREE, 0, 1); }\n-\t| '[' declspecs_nosc '*' ']'\n+\t| '[' maybe_type_quals_attrs '*' ']'\n \t\t{ $$ = build_array_declarator (NULL_TREE, $2, 0, 1); }\n-\t| '[' SCSPEC expr ']'\n-\t\t{ if (C_RID_CODE ($2) != RID_STATIC)\n-\t\t    error (\"storage class specifier in array declarator\");\n-\t\t  $$ = build_array_declarator ($3, NULL_TREE, 1, 0); }\n-\t| '[' SCSPEC declspecs_nosc expr ']'\n-\t\t{ if (C_RID_CODE ($2) != RID_STATIC)\n-\t\t    error (\"storage class specifier in array declarator\");\n-\t\t  $$ = build_array_declarator ($4, $3, 1, 0); }\n-\t| '[' declspecs_nosc SCSPEC expr ']'\n-\t\t{ if (C_RID_CODE ($3) != RID_STATIC)\n-\t\t    error (\"storage class specifier in array declarator\");\n-\t\t  $$ = build_array_declarator ($4, $2, 1, 0); }\n+\t| '[' STATIC maybe_type_quals_attrs expr ']'\n+\t\t{ $$ = build_array_declarator ($4, $3, 1, 0); }\n+\t/* declspecs_nosc_nots is a synonym for type_quals_attrs.  */\n+\t| '[' declspecs_nosc_nots STATIC expr ']'\n+\t\t{ $$ = build_array_declarator ($4, $2, 1, 0); }\n \t;\n \n /* A nonempty series of declarations and statements (possibly followed by\n@@ -3402,7 +3396,7 @@ end ifobjc\n    three languages.  */\n static const short rid_to_yy[RID_MAX] =\n {\n-  /* RID_STATIC */\tSCSPEC,\n+  /* RID_STATIC */\tSTATIC,\n   /* RID_UNSIGNED */\tTYPESPEC,\n   /* RID_LONG */\tTYPESPEC,\n   /* RID_CONST */\tTYPE_QUAL,\n@@ -3835,6 +3829,7 @@ yyprint (file, yychar, yyl)\n     case TYPESPEC:\n     case TYPE_QUAL:\n     case SCSPEC:\n+    case STATIC:\n       if (IDENTIFIER_POINTER (t))\n \tfprintf (file, \" `%s'\", IDENTIFIER_POINTER (t));\n       break;"}]}