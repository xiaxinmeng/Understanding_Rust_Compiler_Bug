{"sha": "0bfa1541fa2bc1b422babce2a6c272de36ecdad5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJmYTE1NDFmYTJiYzFiNDIyYmFiY2UyYTZjMjcyZGUzNmVjZGFkNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-10-21T19:55:07Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-10-21T19:55:07Z"}, "message": "builtins.c (expand_builtin_int_roundingfn_2): New function.\n\n2006-10-21  Richard Guenther  <rguenther@suse.de>\n\n\t* builtins.c (expand_builtin_int_roundingfn_2): New function.\n\t(expand_builtin): Use it to expand lrint instead of\n\texpand_builtin_mathfn.\n\nFrom-SVN: r117936", "tree": {"sha": "36ba716805e51699c3568ec72d0dd4c5d550e7db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36ba716805e51699c3568ec72d0dd4c5d550e7db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bfa1541fa2bc1b422babce2a6c272de36ecdad5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bfa1541fa2bc1b422babce2a6c272de36ecdad5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bfa1541fa2bc1b422babce2a6c272de36ecdad5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bfa1541fa2bc1b422babce2a6c272de36ecdad5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "962ef7fea28a33a5257ae4155e96edc357fb189b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962ef7fea28a33a5257ae4155e96edc357fb189b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/962ef7fea28a33a5257ae4155e96edc357fb189b"}], "stats": {"total": 105, "additions": 99, "deletions": 6}, "files": [{"sha": "42b4dedc4f49d4b2aa152d43f263532243f46659", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfa1541fa2bc1b422babce2a6c272de36ecdad5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfa1541fa2bc1b422babce2a6c272de36ecdad5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0bfa1541fa2bc1b422babce2a6c272de36ecdad5", "patch": "@@ -1,3 +1,9 @@\n+2006-10-21  Richard Guenther  <rguenther@suse.de>\n+\n+\t* builtins.c (expand_builtin_int_roundingfn_2): New function.\n+\t(expand_builtin): Use it to expand lrint instead of\n+\texpand_builtin_mathfn.\n+\n 2006-10-21  Uros Bizjak  <uros@kss-loka.si>\n \n \tPR target/19398"}, {"sha": "c1996dc44b182fa07efb2f05cefe0fcced88933d", "filename": "gcc/builtins.c", "status": "modified", "additions": 93, "deletions": 6, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfa1541fa2bc1b422babce2a6c272de36ecdad5/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfa1541fa2bc1b422babce2a6c272de36ecdad5/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=0bfa1541fa2bc1b422babce2a6c272de36ecdad5", "patch": "@@ -95,6 +95,7 @@ static rtx expand_builtin_mathfn_2 (tree, rtx, rtx);\n static rtx expand_builtin_mathfn_3 (tree, rtx, rtx);\n static rtx expand_builtin_sincos (tree);\n static rtx expand_builtin_int_roundingfn (tree, rtx, rtx);\n+static rtx expand_builtin_int_roundingfn_2 (tree, rtx, rtx);\n static rtx expand_builtin_args_info (tree);\n static rtx expand_builtin_next_arg (void);\n static rtx expand_builtin_va_start (tree);\n@@ -1835,9 +1836,6 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n       builtin_optab = nearbyint_optab; break;\n     CASE_FLT_FN (BUILT_IN_RINT):\n       builtin_optab = rint_optab; break;\n-    CASE_FLT_FN (BUILT_IN_LRINT):\n-    CASE_FLT_FN (BUILT_IN_LLRINT):\n-      builtin_optab = lrint_optab; break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -2210,7 +2208,9 @@ expand_builtin_sincos (tree exp)\n   return const0_rtx;\n }\n \n-/* Expand a call to one of the builtin rounding functions (lfloor).\n+/* Expand a call to one of the builtin rounding functions gcc defines\n+   as an extension (lfloor and lceil).  As these are gcc extensions we\n+   do not need to worry about setting errno to EDOM.\n    If expanding via optab fails, lower expression to (int)(floor(x)).\n    EXP is the expression that is a call to the builtin function;\n    if convenient, the result should be placed in TARGET.  SUBTARGET may\n@@ -2309,6 +2309,88 @@ expand_builtin_int_roundingfn (tree exp, rtx target, rtx subtarget)\n   return target;\n }\n \n+/* Expand a call to one of the builtin math functions doing integer\n+   conversion (lrint).\n+   Return 0 if a normal call should be emitted rather than expanding the\n+   function in-line.  EXP is the expression that is a call to the builtin\n+   function; if convenient, the result should be placed in TARGET.\n+   SUBTARGET may be used as the target for computing one of EXP's operands.  */\n+\n+static rtx\n+expand_builtin_int_roundingfn_2 (tree exp, rtx target, rtx subtarget)\n+{\n+  optab builtin_optab;\n+  rtx op0, insns;\n+  tree fndecl = get_callee_fndecl (exp);\n+  tree arglist = TREE_OPERAND (exp, 1);\n+  enum machine_mode mode;\n+  tree arg, narg;\n+\n+  /* There's no easy way to detect the case we need to set EDOM.  */\n+  if (flag_errno_math)\n+    return NULL_RTX;\n+\n+  if (!validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n+    return NULL_RTX;\n+\n+  arg = TREE_VALUE (arglist);\n+\n+  switch (DECL_FUNCTION_CODE (fndecl))\n+    {\n+    CASE_FLT_FN (BUILT_IN_LRINT):\n+    CASE_FLT_FN (BUILT_IN_LLRINT):\n+      builtin_optab = lrint_optab; break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  /* Make a suitable register to place result in.  */\n+  mode = TYPE_MODE (TREE_TYPE (exp));\n+\n+  /* Before working hard, check whether the instruction is available.  */\n+  if (builtin_optab->handlers[(int) mode].insn_code != CODE_FOR_nothing)\n+    {\n+      target = gen_reg_rtx (mode);\n+\n+      /* Wrap the computation of the argument in a SAVE_EXPR, as we may\n+\t need to expand the argument again.  This way, we will not perform\n+\t side-effects more the once.  */\n+      narg = builtin_save_expr (arg);\n+      if (narg != arg)\n+\t{\n+\t  arg = narg;\n+\t  arglist = build_tree_list (NULL_TREE, arg);\n+\t  exp = build_function_call_expr (fndecl, arglist);\n+\t}\n+\n+      op0 = expand_expr (arg, subtarget, VOIDmode, 0);\n+\n+      start_sequence ();\n+\n+      /* Compute into TARGET.\n+\t Set TARGET to wherever the result comes back.  */\n+      target = expand_unop (mode, builtin_optab, op0, target, 0);\n+\n+      if (target != 0)\n+\t{\n+\t  /* Output the entire sequence.  */\n+\t  insns = get_insns ();\n+\t  end_sequence ();\n+\t  emit_insn (insns);\n+\t  return target;\n+\t}\n+\n+      /* If we were unable to expand via the builtin, stop the sequence\n+\t (without outputting the insns) and call to the library function\n+\t with the stabilized argument list.  */\n+      end_sequence ();\n+    }\n+\n+  target = expand_call (exp, target, target == const0_rtx);\n+\n+  return target;\n+}\n+\n /* To evaluate powi(x,n), the floating point value x raised to the\n    constant integer exponent n, we use a hybrid algorithm that\n    combines the \"window method\" with look-up tables.  For an\n@@ -5718,8 +5800,6 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     CASE_FLT_FN (BUILT_IN_ROUND):\n     CASE_FLT_FN (BUILT_IN_NEARBYINT):\n     CASE_FLT_FN (BUILT_IN_RINT):\n-    CASE_FLT_FN (BUILT_IN_LRINT):\n-    CASE_FLT_FN (BUILT_IN_LLRINT):\n       target = expand_builtin_mathfn (exp, target, subtarget);\n       if (target)\n \treturn target;\n@@ -5734,6 +5814,13 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \treturn target;\n       break;\n \n+    CASE_FLT_FN (BUILT_IN_LRINT):\n+    CASE_FLT_FN (BUILT_IN_LLRINT):\n+      target = expand_builtin_int_roundingfn_2 (exp, target, subtarget);\n+      if (target)\n+\treturn target;\n+      break;\n+\n     CASE_FLT_FN (BUILT_IN_POW):\n       target = expand_builtin_pow (exp, target, subtarget);\n       if (target)"}]}