{"sha": "af2682ef56012ce8df2dfefe0e9c98105e83e2c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYyNjgyZWY1NjAxMmNlOGRmMmRmZWZlMGU5Yzk4MTA1ZTgzZTJjMw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-26T02:15:45Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-26T02:15:45Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r836", "tree": {"sha": "82f925dac4b1e09aefdd08a3dee7e7f44344cb5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82f925dac4b1e09aefdd08a3dee7e7f44344cb5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af2682ef56012ce8df2dfefe0e9c98105e83e2c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af2682ef56012ce8df2dfefe0e9c98105e83e2c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af2682ef56012ce8df2dfefe0e9c98105e83e2c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af2682ef56012ce8df2dfefe0e9c98105e83e2c3/comments", "author": null, "committer": null, "parents": [{"sha": "88d3b7f03d06f58d34f4b8fbaa25e469bec792c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88d3b7f03d06f58d34f4b8fbaa25e469bec792c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88d3b7f03d06f58d34f4b8fbaa25e469bec792c1"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "3f085971db6b57524c7946a2bc5bbf33c4ebf005", "filename": "gcc/stmt.c", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af2682ef56012ce8df2dfefe0e9c98105e83e2c3/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af2682ef56012ce8df2dfefe0e9c98105e83e2c3/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=af2682ef56012ce8df2dfefe0e9c98105e83e2c3", "patch": "@@ -3657,7 +3657,6 @@ expand_end_case (orig_index)\n \n \t      use_cost_table\n \t\t= (TREE_CODE (TREE_TYPE (orig_index)) != ENUMERAL_TYPE\n-\t\t   && default_label != 0\n \t\t   && estimate_case_costs (thiscase->data.case_stmt.case_list));\n \t      balance_case_nodes (&thiscase->data.case_stmt.case_list, 0);\n \t      emit_case_nodes (index, thiscase->data.case_stmt.case_list,\n@@ -3678,14 +3677,26 @@ expand_end_case (orig_index)\n \t      if (GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (index_expr)))\n \t\t  > GET_MODE_BITSIZE (index_mode))\n \t\t{\n+\t\t  enum machine_mode omode = TYPE_MODE (TREE_TYPE (index_expr));\n+\t\t  rtx rangertx = expand_expr (range, 0, VOIDmode, 0);\n+\n+\t\t  /* We must handle the endpoints in the original mode.  */\n \t\t  index_expr = build (MINUS_EXPR, TREE_TYPE (index_expr),\n \t\t\t\t      index_expr, minval);\n \t\t  minval = integer_zero_node;\n+\t\t  index = expand_expr (index_expr, 0, VOIDmode, 0);\n+\t\t  emit_cmp_insn (rangertx, index, LTU, 0, omode, 0, 0);\n+\t\t  emit_jump_insn (gen_bltu (default_label));\n+\t\t  /* Now we can safely truncate.  */\n+\t\t  index = convert_to_mode (index_mode, index, 0);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  if (TYPE_MODE (TREE_TYPE (index_expr)) != index_mode)\n+\t\t    index_expr = convert (type_for_size (index_bits, 0),\n+\t\t\t\t\t  index_expr);\n+\t\t  index = expand_expr (index_expr, 0, VOIDmode, 0);\n \t\t}\n-\t      if (TYPE_MODE (TREE_TYPE (index_expr)) != index_mode)\n-\t\tindex_expr = convert (type_for_size (index_bits, 0),\n-\t\t\t\t      index_expr);\n-\t      index = expand_expr (index_expr, 0, VOIDmode, 0);\n \t      emit_queue ();\n \t      index = protect_from_queue (index, 0);\n \t      do_pending_stack_adjust ();\n@@ -3705,13 +3716,11 @@ expand_end_case (orig_index)\n \t\t\t\t\t\t index_expr, minval)));\n \t      index = expand_expr (index_expr, 0, VOIDmode, 0);\n \t      emit_queue ();\n-\t      /* convert_to_mode calls protect_from_queue.  */\n-\t      index = convert_to_mode (Pmode, index, 1);\n+\t      index = protect_from_queue (index, 0);\n \t      do_pending_stack_adjust ();\n \n-\t      do_tablejump (index, Pmode,\n-\t\t\t    gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t     TREE_INT_CST_LOW (range)),\n+\t      do_tablejump (index, TYPE_MODE (TREE_TYPE (index_expr)),\n+\t\t\t    expand_expr (range, 0, VOIDmode, 0),\n \t\t\t    table_label, default_label);\n \t      win = 1;\n \t    }"}]}