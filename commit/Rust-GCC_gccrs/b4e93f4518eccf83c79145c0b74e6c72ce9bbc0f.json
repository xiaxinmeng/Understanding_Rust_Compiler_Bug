{"sha": "b4e93f4518eccf83c79145c0b74e6c72ce9bbc0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRlOTNmNDUxOGVjY2Y4M2M3OTE0NWMwYjc0ZTZjNzJjZTliYmMwZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2012-03-22T14:33:27Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-03-22T14:33:27Z"}, "message": "re PR tree-optimization/51737 (g++ crashes (internal compiler error: Segmentation fault) when compiling quickbook)\n\n\tPR middle-end/51737\n\t* cgraph.c (cgraph_remove_node_and_inline_clones): Add FORBIDDEN_NODE\n\tparameter.\n\t* cgraph.h (cgraph_remove_node_and_inline_clones): Update prototype.\n\t* ipa-inline-transform.c (save_inline_function_body): Remove copied clone\n\tif needed.\n\t* tree-inline.c (delete_unreachable_blocks_update_callgraph): Update.\n\n\tPR middle-end/51737\n\t* g++.dg/torture/pr51737.C: New testcase\n\nFrom-SVN: r185694", "tree": {"sha": "03738d0312372fd214a53bbb313ffd06dbb04d03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03738d0312372fd214a53bbb313ffd06dbb04d03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4e93f4518eccf83c79145c0b74e6c72ce9bbc0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e93f4518eccf83c79145c0b74e6c72ce9bbc0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4e93f4518eccf83c79145c0b74e6c72ce9bbc0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e93f4518eccf83c79145c0b74e6c72ce9bbc0f/comments", "author": null, "committer": null, "parents": [{"sha": "e45381b354ce6eac6cbcbf8a83f818c82ac52ac7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e45381b354ce6eac6cbcbf8a83f818c82ac52ac7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e45381b354ce6eac6cbcbf8a83f818c82ac52ac7"}], "stats": {"total": 50, "additions": 42, "deletions": 8}, "files": [{"sha": "a3e966fa5ea29a450c9cc1cbf0816ef05b6d569f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e93f4518eccf83c79145c0b74e6c72ce9bbc0f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e93f4518eccf83c79145c0b74e6c72ce9bbc0f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4e93f4518eccf83c79145c0b74e6c72ce9bbc0f", "patch": "@@ -1,3 +1,13 @@\n+2012-03-22  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/51737\n+\t* cgraph.c (cgraph_remove_node_and_inline_clones): Add FORBIDDEN_NODE\n+\tparameter.\n+\t* cgraph.h (cgraph_remove_node_and_inline_clones): Update prototype.\n+\t* ipa-inline-transform.c (save_inline_function_body): Remove copied clone\n+\tif needed.\n+\t* tree-inline.c (delete_unreachable_blocks_update_callgraph): Update.\n+\n 2012-03-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/52666"}, {"sha": "7c44c0592457f49eabfd8f79d340a23478a06c6f", "filename": "gcc/cgraph.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e93f4518eccf83c79145c0b74e6c72ce9bbc0f/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e93f4518eccf83c79145c0b74e6c72ce9bbc0f/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=b4e93f4518eccf83c79145c0b74e6c72ce9bbc0f", "patch": "@@ -1639,19 +1639,27 @@ cgraph_add_to_same_comdat_group (struct cgraph_node *new_,\n     }\n }\n \n-/* Remove the node from cgraph.  */\n+/* Remove the node from cgraph and all inline clones inlined into it.\n+   Skip however removal of FORBIDDEN_NODE and return true if it needs to be\n+   removed.  This allows to call the function from outer loop walking clone\n+   tree.  */\n \n-void\n-cgraph_remove_node_and_inline_clones (struct cgraph_node *node)\n+bool\n+cgraph_remove_node_and_inline_clones (struct cgraph_node *node, struct cgraph_node *forbidden_node)\n {\n   struct cgraph_edge *e, *next;\n+  bool found = false;\n+\n+  if (node == forbidden_node)\n+    return true;\n   for (e = node->callees; e; e = next)\n     {\n       next = e->next_callee;\n       if (!e->inline_failed)\n-        cgraph_remove_node_and_inline_clones (e->callee);\n+        found |= cgraph_remove_node_and_inline_clones (e->callee, forbidden_node);\n     }\n   cgraph_remove_node (node);\n+  return found;\n }\n \n /* Notify finalize_compilation_unit that given node is reachable.  */"}, {"sha": "db4bcea1fc437c754af02aa9404918b37e9f5131", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e93f4518eccf83c79145c0b74e6c72ce9bbc0f/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e93f4518eccf83c79145c0b74e6c72ce9bbc0f/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=b4e93f4518eccf83c79145c0b74e6c72ce9bbc0f", "patch": "@@ -478,7 +478,7 @@ void cgraph_insert_node_to_hashtable (struct cgraph_node *node);\n void cgraph_remove_edge (struct cgraph_edge *);\n void cgraph_remove_node (struct cgraph_node *);\n void cgraph_add_to_same_comdat_group (struct cgraph_node *, struct cgraph_node *);\n-void cgraph_remove_node_and_inline_clones (struct cgraph_node *);\n+bool cgraph_remove_node_and_inline_clones (struct cgraph_node *, struct cgraph_node *);\n void cgraph_release_function_body (struct cgraph_node *);\n void cgraph_node_remove_callees (struct cgraph_node *node);\n struct cgraph_edge *cgraph_create_edge (struct cgraph_node *,"}, {"sha": "32d8c167be17c493bd9e08a36394b6c89c3b9869", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e93f4518eccf83c79145c0b74e6c72ce9bbc0f/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e93f4518eccf83c79145c0b74e6c72ce9bbc0f/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=b4e93f4518eccf83c79145c0b74e6c72ce9bbc0f", "patch": "@@ -336,8 +336,19 @@ save_inline_function_body (struct cgraph_node *node)\n             first_clone->ipa_transforms_to_apply);\n   first_clone->ipa_transforms_to_apply = NULL;\n \n+  /* When doing recursive inlining, the clone may become unnecessary.\n+     This is possible i.e. in the case when the recursive function is proved to be\n+     non-throwing and the recursion happens only in the EH landing pad.\n+     We can not remove the clone until we are done with saving the body.\n+     Remove it now.  */\n+  if (!first_clone->callers)\n+    {\n+      cgraph_remove_node_and_inline_clones (first_clone, NULL);\n+      first_clone = NULL;\n+    }\n #ifdef ENABLE_CHECKING\n-  verify_cgraph_node (first_clone);\n+  else\n+    verify_cgraph_node (first_clone);\n #endif\n   return first_clone;\n }"}, {"sha": "0e668832be3d7abd67a4e60889d98773de88953d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e93f4518eccf83c79145c0b74e6c72ce9bbc0f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e93f4518eccf83c79145c0b74e6c72ce9bbc0f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b4e93f4518eccf83c79145c0b74e6c72ce9bbc0f", "patch": "@@ -1,3 +1,8 @@\n+2012-03-22  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/51737\n+\t* g++.dg/torture/pr51737.C: New testcase\n+\n 2012-03-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/52548"}, {"sha": "5d58c5169bb5aa53c0e03dd6db7331df1b722279", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e93f4518eccf83c79145c0b74e6c72ce9bbc0f/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e93f4518eccf83c79145c0b74e6c72ce9bbc0f/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=b4e93f4518eccf83c79145c0b74e6c72ce9bbc0f", "patch": "@@ -4955,7 +4955,7 @@ delete_unreachable_blocks_update_callgraph (copy_body_data *id)\n \t        if ((e = cgraph_edge (id->dst_node, gsi_stmt (bsi))) != NULL)\n \t\t  {\n \t\t    if (!e->inline_failed)\n-\t\t      cgraph_remove_node_and_inline_clones (e->callee);\n+\t\t      cgraph_remove_node_and_inline_clones (e->callee, id->dst_node);\n \t\t    else\n \t              cgraph_remove_edge (e);\n \t\t  }\n@@ -4966,7 +4966,7 @@ delete_unreachable_blocks_update_callgraph (copy_body_data *id)\n \t              if ((e = cgraph_edge (node, gsi_stmt (bsi))) != NULL)\n \t\t\t{\n \t\t          if (!e->inline_failed)\n-\t\t            cgraph_remove_node_and_inline_clones (e->callee);\n+\t\t            cgraph_remove_node_and_inline_clones (e->callee, id->dst_node);\n \t\t\t  else\n \t                    cgraph_remove_edge (e);\n \t\t\t}"}]}