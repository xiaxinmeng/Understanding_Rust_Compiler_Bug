{"sha": "2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYzY2E5ZTdmNGJjMjljNjQ1ZGY4YTUxMDIzZWNlNmVjZThmYWY5ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-09-27T18:16:15Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-09-27T18:16:15Z"}, "message": "c-decl.c (init_decl_processing): Add __builtin_dwarf_reg_size.\n\n\t* c-decl.c (init_decl_processing): Add __builtin_dwarf_reg_size.\n\t* tree.h (built_in_function): Likewise.\n\t* expr.c (expand_builtin): Likewise.\n\t* except.h: Likewise.\n\t* dwarf2out.c (expand_builtin_dwarf_reg_size): New fn.\n\t* libgcc2.c (copy_reg): New fn.\n\t(__throw): Use it.\n\nFrom-SVN: r15750", "tree": {"sha": "a5a4bcb347df37e58a470806a1587b469f81d6af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5a4bcb347df37e58a470806a1587b469f81d6af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d/comments", "author": null, "committer": null, "parents": [{"sha": "faf199a62194ffea2487c131c0ef8efc2c6127f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faf199a62194ffea2487c131c0ef8efc2c6127f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faf199a62194ffea2487c131c0ef8efc2c6127f5"}], "stats": {"total": 117, "additions": 111, "deletions": 6}, "files": [{"sha": "bcf67e3d422f25d9d1aca5d3e5b9dd898554c710", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d", "patch": "@@ -1,3 +1,13 @@\n+Sat Sep 27 11:02:38 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* c-decl.c (init_decl_processing): Add __builtin_dwarf_reg_size.\n+\t* tree.h (built_in_function): Likewise.\n+\t* expr.c (expand_builtin): Likewise.\n+\t* except.h: Likewise.\n+\t* dwarf2out.c (expand_builtin_dwarf_reg_size): New fn.\n+\t* libgcc2.c (copy_reg): New fn.\n+\t(__throw): Use it.\n+\n Fri Sep 26 08:54:59 1997  Paul Eggert  <eggert@twinsun.com>\n \n \t* c-typeck.c (build_binary_op): Warn about comparing signed vs"}, {"sha": "5774f755b032c5ed56b625d19d2876bc8413183e", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d", "patch": "@@ -3200,6 +3200,8 @@ init_decl_processing ()\n   builtin_function (\"__builtin_dwarf_fp_regnum\",\n \t\t    build_function_type (unsigned_type_node, endlink),\n \t\t    BUILT_IN_DWARF_FP_REGNUM, NULL_PTR);\n+  builtin_function (\"__builtin_dwarf_reg_size\", int_ftype_int,\n+\t\t    BUILT_IN_DWARF_REG_SIZE, NULL_PTR);\t\t    \n   builtin_function (\"__builtin_frob_return_addr\", ptr_ftype_ptr,\n \t\t    BUILT_IN_FROB_RETURN_ADDR, NULL_PTR);\n   builtin_function (\"__builtin_extract_return_addr\", ptr_ftype_ptr,"}, {"sha": "6ad1c1b0ae9c6057038a6634c787bd3e6054464f", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d", "patch": "@@ -502,6 +502,83 @@ reg_number (rtl)\n   return regno;\n }\n \n+struct reg_size_range\n+{\n+  int beg;\n+  int end;\n+  int size;\n+};\n+\n+/* Given a register number in REG_TREE, return an rtx for its size in bytes.\n+   We do this in kind of a roundabout way, by building up a list of\n+   register size ranges and seeing where our register falls in one of those\n+   ranges.  We need to do it this way because REG_TREE is not a constant,\n+   and the target macros were not designed to make this task easy.  */\n+\n+rtx\n+expand_builtin_dwarf_reg_size (reg_tree, target)\n+     tree reg_tree;\n+     rtx target;\n+{\n+  int i, n_ranges, size;\n+  struct reg_size_range ranges[5];\n+  tree t, t2;\n+\n+  ranges[0].beg = 0;\n+  ranges[0].size = GET_MODE_SIZE (reg_raw_mode[0]);\n+  n_ranges = 1;\n+\n+  for (i = 1; i < FIRST_PSEUDO_REGISTER; ++i)\n+    {\n+      size = GET_MODE_SIZE (reg_raw_mode[i]);\n+      if (size != ranges[n_ranges-1].size)\n+\t{\n+\t  ranges[n_ranges-1].end = i-1;\n+\t  ranges[n_ranges].beg = i;\n+\t  ranges[n_ranges].size = GET_MODE_SIZE (reg_raw_mode[i]);\n+\t  ++n_ranges;\n+\t  assert (n_ranges < 5);\n+\t}\n+    }\n+  ranges[n_ranges-1].end = i-1;\n+\n+  /* The usual case: fp regs surrounded by general regs.  */\n+  if (n_ranges == 3 && ranges[0].size == ranges[2].size)\n+    {\n+      assert ((DWARF_FRAME_REGNUM (ranges[1].end)\n+\t       - DWARF_FRAME_REGNUM (ranges[1].beg))\n+\t      == ranges[1].end - ranges[1].beg);\n+      t  = fold (build (GE_EXPR, integer_type_node, reg_tree,\n+\t\t\tbuild_int_2 (DWARF_FRAME_REGNUM (ranges[1].beg), 0)));\n+      t2 = fold (build (LE_EXPR, integer_type_node, reg_tree,\n+\t\t\tbuild_int_2 (DWARF_FRAME_REGNUM (ranges[1].end), 0)));\n+      t = fold (build (TRUTH_ANDIF_EXPR, integer_type_node, t, t2));\n+      t = fold (build (COND_EXPR, integer_type_node, t,\n+\t\t       build_int_2 (ranges[1].size, 0),\n+\t\t       build_int_2 (ranges[0].size, 0)));\n+    }\n+  else\n+    {\n+      --n_ranges;\n+      t = build_int_2 (ranges[n_ranges].size, 0);\n+      size = DWARF_FRAME_REGNUM (ranges[n_ranges].beg);\n+      for (; n_ranges--; )\n+\t{\n+\t  assert ((DWARF_FRAME_REGNUM (ranges[n_ranges].end)\n+\t\t   - DWARF_FRAME_REGNUM (ranges[n_ranges].beg))\n+\t\t  == ranges[n_ranges].end - ranges[n_ranges].beg);\n+\t  assert (DWARF_FRAME_REGNUM (ranges[n_ranges].beg) < size);\n+\t  size = DWARF_FRAME_REGNUM (ranges[n_ranges].beg);\n+\t  t2 = fold (build (LE_EXPR, integer_type_node, reg_tree,\n+\t\t\t    build_int_2 (DWARF_FRAME_REGNUM\n+\t\t\t\t\t (ranges[n_ranges].end), 0)));\n+\t  t = fold (build (COND_EXPR, integer_type_node, t2,\n+\t\t\t   build_int_2 (ranges[n_ranges].size, 0), t));\n+\t}\n+    }\n+  return expand_expr (t, target, Pmode, 0);\n+}\n+\n /* Convert a DWARF call frame info. operation to its string name */\n \n static char *"}, {"sha": "fc2c37b3dbb11b915450aff7cb1e7dc361f06565", "filename": "gcc/except.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d", "patch": "@@ -292,4 +292,5 @@ rtx expand_builtin_frob_return_addr\tPROTO((tree));\n rtx expand_builtin_extract_return_addr\tPROTO((tree));\n void expand_builtin_set_return_addr_reg PROTO((tree));\n void expand_builtin_set_eh_regs\t\tPROTO((tree, tree));\n+rtx expand_builtin_dwarf_reg_size\tPROTO((tree, rtx));\n #endif"}, {"sha": "1b5d5091c0281ad8412bcbe73b08ddf07a1c16b5", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d", "patch": "@@ -9159,6 +9159,8 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n #ifdef DWARF2_UNWIND_INFO\n     case BUILT_IN_DWARF_FP_REGNUM:\n       return expand_builtin_dwarf_fp_regnum ();\n+    case BUILT_IN_DWARF_REG_SIZE:\n+      return expand_builtin_dwarf_reg_size (TREE_VALUE (arglist), target);\n #endif\n     case BUILT_IN_FROB_RETURN_ADDR:\n       return expand_builtin_frob_return_addr (TREE_VALUE (arglist));"}, {"sha": "6a49a1b2acb5e7a048c6ecaf19489f00b0881d9a", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d", "patch": "@@ -3556,6 +3556,22 @@ put_reg (unsigned reg, void *val, frame_state *udata)\n     abort ();\n }\n \n+/* Copy the saved value for register REG from frame UDATA to frame\n+   TARGET_UDATA.  Unlike the previous two functions, this can handle\n+   registers that are not one word large.  */\n+\n+static void\n+copy_reg (unsigned reg, frame_state *udata, frame_state *target_udata)\n+{\n+  if (udata->saved[reg] == REG_SAVED_OFFSET\n+      && target_udata->saved[reg] == REG_SAVED_OFFSET)\n+    memcpy (target_udata->cfa + target_udata->reg_or_offset[reg],\n+\t    udata->cfa + udata->reg_or_offset[reg],\n+\t    __builtin_dwarf_reg_size (reg));\n+  else\n+    abort ();\n+}\n+\n /* Retrieve the return address for frame UDATA, where SUB_UDATA is a\n    frame called by UDATA or 0.  */\n \n@@ -3729,8 +3745,7 @@ __throw ()\n \t\t    && udata->reg_or_offset[udata->retaddr_column] == i)\n \t\t  continue;\n #endif\n-\t\tval = get_reg (i, udata, sub_udata);\n-\t\tput_reg (i, val, my_udata);\n+\t\tcopy_reg (i, udata, my_udata);\n \t      }\n \n \t  pc = get_return_addr (udata, sub_udata) - 1;\n@@ -3744,10 +3759,7 @@ __throw ()\n \t{\n \t  i = udata->reg_or_offset[udata->retaddr_column];\n \t  if (in_reg_window (i, udata))\n-\t    {\n-\t      val = get_reg (i, udata, sub_udata);\n-\t      put_reg (i, val, my_udata);\n-\t    }\n+\t    copy_reg (i, udata, sub_udata);\n \t}\n #endif\n     }"}, {"sha": "4f43f6ffe6a446986145bd50ca8bff392ae6042e", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=2f3ca9e7f4bc29c645df8a51023ece6ece8faf9d", "patch": "@@ -105,6 +105,7 @@ enum built_in_function\n   BUILT_IN_FP, BUILT_IN_SP,\n   BUILT_IN_UNWIND_INIT,\n   BUILT_IN_DWARF_FP_REGNUM,\n+  BUILT_IN_DWARF_REG_SIZE,\n   BUILT_IN_FROB_RETURN_ADDR,\n   BUILT_IN_EXTRACT_RETURN_ADDR,\n   BUILT_IN_SET_RETURN_ADDR_REG,"}]}