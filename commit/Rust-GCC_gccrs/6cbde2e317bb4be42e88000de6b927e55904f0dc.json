{"sha": "6cbde2e317bb4be42e88000de6b927e55904f0dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNiZGUyZTMxN2JiNGJlNDJlODgwMDBkZTZiOTI3ZTU1OTA0ZjBkYw==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2014-11-26T18:10:29Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2014-11-26T18:10:29Z"}, "message": "re PR ipa/61190 (g++.old-deja/g++.mike/p4736b.C FAILs at -O2/-Os/-O3)\n\n2014-11-26  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR ipa/61190\n        * cgraph.h (symtab_node::call_for_symbol_and_aliases): Fix comment.\n        (cgraph_node::function_or_virtual_thunk_symbol): New function.\n        (cgraph_node::call_for_symbol_and_aliases): Fix comment.\n        (cgraph_node::call_for_symbol_thunks_and_aliases): Adjust comment.\n        Add new optional parameter exclude_virtual_thunks.\n        * cgraph.c (cgraph_node::call_for_symbol_thunks_and_aliases): Add new\n        optional parameter exclude_virtual_thunks.\n        (cgraph_node::set_const_flag): Don't propagate to virtual thunks.\n        (cgraph_node::set_pure_flag): Likewise.\n        (cgraph_node::function_symbol): Simplified.\n        (cgraph_node::function_or_virtual_thunk_symbol): New function.\n        * ipa-pure-const.c (analyze_function): For virtual thunks set\n        pure_const_state to IPA_NEITHER.\n        (propagate_pure_const): Use function_or_virtual_thunk_symbol.\n\ntestsuite/ChangeLog:\n2014-11-26  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR ipa/61190\n        * g++.old-deja/g++.mike/p4736b.C: Use -O2.\n\nFrom-SVN: r218091", "tree": {"sha": "6293fca73098e7b3f8d1ab85fb4e3532798064e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6293fca73098e7b3f8d1ab85fb4e3532798064e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cbde2e317bb4be42e88000de6b927e55904f0dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cbde2e317bb4be42e88000de6b927e55904f0dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cbde2e317bb4be42e88000de6b927e55904f0dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cbde2e317bb4be42e88000de6b927e55904f0dc/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "69d7fa342c0ff1932ad451d1ebd5aab53e79dd10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69d7fa342c0ff1932ad451d1ebd5aab53e79dd10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69d7fa342c0ff1932ad451d1ebd5aab53e79dd10"}], "stats": {"total": 135, "additions": 100, "deletions": 35}, "files": [{"sha": "62dcb381af711db96f80ceffd5099fb0b31f08bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbde2e317bb4be42e88000de6b927e55904f0dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbde2e317bb4be42e88000de6b927e55904f0dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6cbde2e317bb4be42e88000de6b927e55904f0dc", "patch": "@@ -1,3 +1,21 @@\n+2014-11-26  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR ipa/61190\n+\t* cgraph.h (symtab_node::call_for_symbol_and_aliases): Fix comment.\n+\t(cgraph_node::function_or_virtual_thunk_symbol): New function.\n+\t(cgraph_node::call_for_symbol_and_aliases): Fix comment.\n+\t(cgraph_node::call_for_symbol_thunks_and_aliases): Adjust comment.\n+\tAdd new optional parameter exclude_virtual_thunks.\n+\t* cgraph.c (cgraph_node::call_for_symbol_thunks_and_aliases): Add new\n+\toptional parameter exclude_virtual_thunks.\n+\t(cgraph_node::set_const_flag): Don't propagate to virtual thunks.\n+\t(cgraph_node::set_pure_flag): Likewise.\n+\t(cgraph_node::function_symbol): Simplified.\n+\t(cgraph_node::function_or_virtual_thunk_symbol): New function.\n+\t* ipa-pure-const.c (analyze_function): For virtual thunks set\n+\tpure_const_state to IPA_NEITHER.\n+\t(propagate_pure_const): Use function_or_virtual_thunk_symbol.\n+\n 2014-11-26  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/63738"}, {"sha": "6aecb14823c6fe1d67306dbd58f58192d125a856", "filename": "gcc/cgraph.c", "status": "modified", "additions": 52, "deletions": 25, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbde2e317bb4be42e88000de6b927e55904f0dc/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbde2e317bb4be42e88000de6b927e55904f0dc/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=6cbde2e317bb4be42e88000de6b927e55904f0dc", "patch": "@@ -2193,15 +2193,16 @@ cgraph_node::can_be_local_p (void)\n \t\t\t\t\t\tNULL, true));\n }\n \n-/* Call calback on cgraph_node, thunks and aliases associated to cgraph_node.\n+/* Call callback on cgraph_node, thunks and aliases associated to cgraph_node.\n    When INCLUDE_OVERWRITABLE is false, overwritable aliases and thunks are\n-   skipped. */\n-\n+   skipped.  When EXCLUDE_VIRTUAL_THUNKS is true, virtual thunks are\n+   skipped.  */\n bool\n cgraph_node::call_for_symbol_thunks_and_aliases (bool (*callback)\n \t\t\t\t\t\t   (cgraph_node *, void *),\n \t\t\t\t\t\t void *data,\n-\t\t\t\t\t\t bool include_overwritable)\n+\t\t\t\t\t\t bool include_overwritable,\n+\t\t\t\t\t\t bool exclude_virtual_thunks)\n {\n   cgraph_edge *e;\n   ipa_ref *ref;\n@@ -2211,9 +2212,12 @@ cgraph_node::call_for_symbol_thunks_and_aliases (bool (*callback)\n   for (e = callers; e; e = e->next_caller)\n     if (e->caller->thunk.thunk_p\n \t&& (include_overwritable\n-\t    || e->caller->get_availability () > AVAIL_INTERPOSABLE))\n+\t    || e->caller->get_availability () > AVAIL_INTERPOSABLE)\n+\t&& !(exclude_virtual_thunks\n+\t     && e->caller->thunk.virtual_offset_p))\n       if (e->caller->call_for_symbol_thunks_and_aliases (callback, data,\n-\t\t\t\t\t\t       include_overwritable))\n+\t\t\t\t\t\t       include_overwritable,\n+\t\t\t\t\t\t       exclude_virtual_thunks))\n \treturn true;\n \n   FOR_EACH_ALIAS (this, ref)\n@@ -2222,15 +2226,16 @@ cgraph_node::call_for_symbol_thunks_and_aliases (bool (*callback)\n       if (include_overwritable\n \t  || alias->get_availability () > AVAIL_INTERPOSABLE)\n \tif (alias->call_for_symbol_thunks_and_aliases (callback, data,\n-\t\t\t\t\t\t     include_overwritable))\n+\t\t\t\t\t\t     include_overwritable,\n+\t\t\t\t\t\t     exclude_virtual_thunks))\n \t  return true;\n     }\n   return false;\n }\n \n-/* Call calback on function and aliases associated to the function.\n+/* Call callback on function and aliases associated to the function.\n    When INCLUDE_OVERWRITABLE is false, overwritable aliases and thunks are\n-   skipped. */\n+   skipped.  */\n \n bool\n cgraph_node::call_for_symbol_and_aliases (bool (*callback) (cgraph_node *,\n@@ -2338,7 +2343,7 @@ cgraph_node::set_const_flag (bool readonly, bool looping)\n {\n   call_for_symbol_thunks_and_aliases (cgraph_set_const_flag_1,\n \t\t\t\t    (void *)(size_t)(readonly + (int)looping * 2),\n-\t\t\t\t      false);\n+\t\t\t\t    false, true);\n }\n \n /* Worker to set pure flag.  */\n@@ -2368,7 +2373,7 @@ cgraph_node::set_pure_flag (bool pure, bool looping)\n {\n   call_for_symbol_thunks_and_aliases (cgraph_set_pure_flag_1,\n \t\t\t\t    (void *)(size_t)(pure + (int)looping * 2),\n-\t\t\t\t    false);\n+\t\t\t\t    false, true);\n }\n \n /* Return true when cgraph_node can not return or throw and thus\n@@ -3118,30 +3123,52 @@ cgraph_node::verify_cgraph_nodes (void)\n }\n \n /* Walk the alias chain to return the function cgraph_node is alias of.\n-   Walk through thunk, too.\n+   Walk through thunks, too.\n    When AVAILABILITY is non-NULL, get minimal availability in the chain.  */\n \n cgraph_node *\n cgraph_node::function_symbol (enum availability *availability)\n {\n-  cgraph_node *node = this;\n+  cgraph_node *node = ultimate_alias_target (availability);\n \n-  do\n+  while (node->thunk.thunk_p)\n     {\n+      node = node->callees->callee;\n+      if (availability)\n+\t{\n+\t  enum availability a;\n+\t  a = node->get_availability ();\n+\t  if (a < *availability)\n+\t    *availability = a;\n+\t}\n       node = node->ultimate_alias_target (availability);\n-      if (node->thunk.thunk_p)\n+    }\n+  return node;\n+}\n+\n+/* Walk the alias chain to return the function cgraph_node is alias of.\n+   Walk through non virtual thunks, too.  Thus we return either a function\n+   or a virtual thunk node.\n+   When AVAILABILITY is non-NULL, get minimal availability in the chain.  */\n+\n+cgraph_node *\n+cgraph_node::function_or_virtual_thunk_symbol\n+\t\t\t\t(enum availability *availability)\n+{\n+  cgraph_node *node = ultimate_alias_target (availability);\n+\n+  while (node->thunk.thunk_p && !node->thunk.virtual_offset_p)\n+    {\n+      node = node->callees->callee;\n+      if (availability)\n \t{\n-\t  node = node->callees->callee;\n-\t  if (availability)\n-\t    {\n-\t      enum availability a;\n-\t      a = node->get_availability ();\n-\t      if (a < *availability)\n-\t\t*availability = a;\n-\t    }\n-\t  node = node->ultimate_alias_target (availability);\n+\t  enum availability a;\n+\t  a = node->get_availability ();\n+\t  if (a < *availability)\n+\t    *availability = a;\n \t}\n-    } while (node && node->thunk.thunk_p);\n+      node = node->ultimate_alias_target (availability);\n+    }\n   return node;\n }\n "}, {"sha": "04318f58c7a5e74a561073f33f46c705e4aecd31", "filename": "gcc/cgraph.h", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbde2e317bb4be42e88000de6b927e55904f0dc/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbde2e317bb4be42e88000de6b927e55904f0dc/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=6cbde2e317bb4be42e88000de6b927e55904f0dc", "patch": "@@ -254,9 +254,9 @@ class GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n      body aliases.  */\n   void fixup_same_cpp_alias_visibility (symtab_node *target);\n \n-  /* Call calback on symtab node and aliases associated to this node.\n+  /* Call callback on symtab node and aliases associated to this node.\n      When INCLUDE_OVERWRITABLE is false, overwritable aliases and thunks are\n-     skipped. */\n+     skipped.  */\n   bool call_for_symbol_and_aliases (bool (*callback) (symtab_node *, void *),\n \t\t\t\t  void *data,\n \t\t\t\t  bool include_overwrite);\n@@ -793,6 +793,13 @@ struct GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node {\n      When AVAILABILITY is non-NULL, get minimal availability in the chain.  */\n   cgraph_node *function_symbol (enum availability *avail = NULL);\n \n+  /* Walk the alias chain to return the function cgraph_node is alias of.\n+     Walk through non virtual thunks, too.  Thus we return either a function\n+     or a virtual thunk node.\n+     When AVAILABILITY is non-NULL, get minimal availability in the chain.  */\n+  cgraph_node *function_or_virtual_thunk_symbol\n+\t\t\t\t(enum availability *avail = NULL);\n+\n   /* Create node representing clone of N executed COUNT times.  Decrease\n      the execution counts from original node too.\n      The new clone will have decl set to DECL that may or may not be the same\n@@ -1015,21 +1022,23 @@ struct GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node {\n      if any to PURE.  */\n   void set_pure_flag (bool pure, bool looping);\n \n-  /* Call calback on function and aliases associated to the function.\n+  /* Call callback on function and aliases associated to the function.\n      When INCLUDE_OVERWRITABLE is false, overwritable aliases and thunks are\n      skipped. */\n \n   bool call_for_symbol_and_aliases (bool (*callback) (cgraph_node *,\n \t\t\t\t\t\t      void *),\n \t\t\t\t    void *data, bool include_overwritable);\n \n-  /* Call calback on cgraph_node, thunks and aliases associated to NODE.\n+  /* Call callback on cgraph_node, thunks and aliases associated to NODE.\n      When INCLUDE_OVERWRITABLE is false, overwritable aliases and thunks are\n+     skipped.  When EXCLUDE_VIRTUAL_THUNKS is true, virtual thunks are\n      skipped.  */\n   bool call_for_symbol_thunks_and_aliases (bool (*callback) (cgraph_node *node,\n-\t\t\t\t\t\t\t   void *data),\n-\t\t\t\t\t void *data,\n-\t\t\t\t\t bool include_overwritable);\n+\t\t\t\t\t\t\t     void *data),\n+\t\t\t\t\t   void *data,\n+\t\t\t\t\t   bool include_overwritable,\n+\t\t\t\t\t   bool exclude_virtual_thunks = false);\n \n   /* Likewise indicate that a node is needed, i.e. reachable via some\n      external means.  */"}, {"sha": "13e3a258c9b048ec92a61fb44ba75af3e897342d", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbde2e317bb4be42e88000de6b927e55904f0dc/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbde2e317bb4be42e88000de6b927e55904f0dc/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=6cbde2e317bb4be42e88000de6b927e55904f0dc", "patch": "@@ -806,6 +806,8 @@ analyze_function (struct cgraph_node *fn, bool ipa)\n     {\n       /* Thunk gets propagated through, so nothing interesting happens.  */\n       gcc_assert (ipa);\n+      if (fn->thunk.thunk_p && fn->thunk.virtual_offset_p)\n+\tl->pure_const_state = IPA_NEITHER;\n       return l;\n     }\n \n@@ -1247,7 +1249,8 @@ propagate_pure_const (void)\n \t  for (e = w->callees; e; e = e->next_callee)\n \t    {\n \t      enum availability avail;\n-\t      struct cgraph_node *y = e->callee->function_symbol (&avail);\n+\t      struct cgraph_node *y = e->callee->\n+\t\t\t\tfunction_or_virtual_thunk_symbol (&avail);\n \t      enum pure_const_state_e edge_state = IPA_CONST;\n \t      bool edge_looping = false;\n \n@@ -1387,7 +1390,8 @@ propagate_pure_const (void)\n \t  for (e = w->callees; e && !can_free; e = e->next_callee)\n \t    {\n \t      enum availability avail;\n-\t      struct cgraph_node *y = e->callee->function_symbol (&avail);\n+\t      struct cgraph_node *y = e->callee->\n+\t\t\t\tfunction_or_virtual_thunk_symbol (&avail);\n \n \t      if (avail > AVAIL_INTERPOSABLE)\n \t\tcan_free = get_function_state (y)->can_free;\n@@ -1517,7 +1521,8 @@ propagate_nothrow (void)\n \t  for (e = w->callees; e && !can_throw; e = e->next_callee)\n \t    {\n \t      enum availability avail;\n-\t      struct cgraph_node *y = e->callee->function_symbol (&avail);\n+\t      struct cgraph_node *y = e->callee->\n+\t\t\t\tfunction_or_virtual_thunk_symbol (&avail);\n \n \t      if (avail > AVAIL_INTERPOSABLE)\n \t\t{"}, {"sha": "c3dcfd2cbf466bf63d157bde889c94b76cc141d6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbde2e317bb4be42e88000de6b927e55904f0dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbde2e317bb4be42e88000de6b927e55904f0dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6cbde2e317bb4be42e88000de6b927e55904f0dc", "patch": "@@ -1,3 +1,8 @@\n+2014-11-26  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR ipa/61190\n+\t* g++.old-deja/g++.mike/p4736b.C: Use -O2.\n+\n 2014-11-26  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/59114"}, {"sha": "e76bd74040c776344b1d4675f02e87e83be81deb", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p4736b.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbde2e317bb4be42e88000de6b927e55904f0dc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp4736b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbde2e317bb4be42e88000de6b927e55904f0dc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp4736b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp4736b.C?ref=6cbde2e317bb4be42e88000de6b927e55904f0dc", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run  }\n+// { dg-options \"-O2\" }\n // prms-id: 4736\n \n class Rep {"}]}