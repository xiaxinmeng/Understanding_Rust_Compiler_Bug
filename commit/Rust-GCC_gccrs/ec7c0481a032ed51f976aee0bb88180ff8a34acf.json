{"sha": "ec7c0481a032ed51f976aee0bb88180ff8a34acf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM3YzA0ODFhMDMyZWQ1MWY5NzZhZWUwYmI4ODE4MGZmOGEzNGFjZg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-01-12T22:48:35Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-01-12T22:48:35Z"}, "message": "Reinstated part of the patch that is safe\n\nFrom-SVN: r38966", "tree": {"sha": "e3680344ad8de8ddec092eab7f5a4265815e2ed8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3680344ad8de8ddec092eab7f5a4265815e2ed8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec7c0481a032ed51f976aee0bb88180ff8a34acf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec7c0481a032ed51f976aee0bb88180ff8a34acf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec7c0481a032ed51f976aee0bb88180ff8a34acf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec7c0481a032ed51f976aee0bb88180ff8a34acf/comments", "author": null, "committer": null, "parents": [{"sha": "c6ca5c693e3af78bff4028b8de916eb33cfaa734", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6ca5c693e3af78bff4028b8de916eb33cfaa734", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6ca5c693e3af78bff4028b8de916eb33cfaa734"}], "stats": {"total": 48, "additions": 45, "deletions": 3}, "files": [{"sha": "7ae8ae971325e43df30f27f25734a855f6135916", "filename": "gcc/ChangeLog", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec7c0481a032ed51f976aee0bb88180ff8a34acf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec7c0481a032ed51f976aee0bb88180ff8a34acf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec7c0481a032ed51f976aee0bb88180ff8a34acf", "patch": "@@ -3,8 +3,7 @@\n \t* calls.c (emit_library_call_value_1): Add USEs and CLOBBERs\n \tto function usage for arguments passed by reference.  Optimize\n \tcallee-copied arguments.\n-\t* regmove.c (find_related_toplev): Find uses in function usage.\n-\t(replace_in_call_usage): New function.\n+\t* regmove.c (replace_in_call_usage): New function.\n \t(fixup_match_1): Call it.\n \t* cse.c (cse_insn): Canonicalize registers in function usage.\n \t* reload1.c (replace_pseudos_in_call_usage): New function."}, {"sha": "879941f0e5a79bd62b2541eac0d8b6c2db3ac5db", "filename": "gcc/regmove.c", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec7c0481a032ed51f976aee0bb88180ff8a34acf/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec7c0481a032ed51f976aee0bb88180ff8a34acf/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=ec7c0481a032ed51f976aee0bb88180ff8a34acf", "patch": "@@ -1,6 +1,6 @@\n /* Move registers around to reduce number of move instructions needed.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1571,6 +1571,45 @@ find_matches (insn, matchp)\n   return any_matches;\n }\n \n+/* Try to replace all occurrences of DST_REG with SRC in LOC, that is\n+   assumed to be in INSN.  */\n+\n+static void\n+replace_in_call_usage (loc, dst_reg, src, insn)\n+     rtx *loc;\n+     int dst_reg;\n+     rtx src;\n+     rtx insn;\n+{\n+  rtx x = *loc;\n+  enum rtx_code code;\n+  const char *fmt;\n+  int i, j;\n+\n+  if (! x)\n+    return;\n+  \n+  code = GET_CODE (x);\n+  if (code == REG)\n+    {\n+      if (REGNO (x) != dst_reg)\n+\treturn;\n+\t\n+      validate_change (insn, loc, src, 1);\n+\n+      return;\n+    }\n+  \n+  /* Process each of our operands recursively.  */\n+  fmt = GET_RTX_FORMAT (code);\n+  for (i = 0; i < GET_RTX_LENGTH (code); i++, fmt++)\n+    if (*fmt == 'e')\n+      replace_in_call_usage (&XEXP (x, i), dst_reg, src, insn);\n+    else if (*fmt == 'E')\n+      for (j = 0; j < XVECLEN (x, i); j++)\n+\treplace_in_call_usage (& XVECEXP (x, i, j), dst_reg, src, insn);\n+}\n+\n /* Try to replace output operand DST in SET, with input operand SRC.  SET is\n    the only set in INSN.  INSN has just been recognized and constrained.\n    SRC is operand number OPERAND_NUMBER in INSN.\n@@ -1643,6 +1682,10 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n \n   for (length = s_length = 0, p = NEXT_INSN (insn); p; p = NEXT_INSN (p))\n     {\n+      if (GET_CODE (p) == CALL_INSN)\n+\treplace_in_call_usage (& CALL_INSN_FUNCTION_USAGE (p),\n+\t\t\t       REGNO (dst), src, p);\n+\t  \n       /* ??? We can't scan past the end of a basic block without updating\n \t the register lifetime info (REG_DEAD/basic_block_live_at_start).  */\n       if (perhaps_ends_bb_p (p))"}]}