{"sha": "d8db0bca7bcac3aca1f485a92d13b7b70edafdf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhkYjBiY2E3YmNhYzNhY2ExZjQ4NWE5MmQxM2I3YjcwZWRhZmRmNw==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2005-07-07T09:46:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-07-07T09:46:16Z"}, "message": "freeze.adb (Freeze_Entity): Check wrong uses of tag incomplete types.\n\n2005-07-07  Javier Miranda  <miranda@adacore.com>\n\n\t* freeze.adb (Freeze_Entity): Check wrong uses of tag incomplete types.\n\n\t* par-ch3.adb (P_Type_Declaration): Give support to tagged incomplete\n\ttypes:\n\t--\n\t  type DEFINING_IDENTIFIER [DISCRIMINANT_PART] [IS TAGGED];\n\t--\n\n\t* sem_attr.adb (Check_Not_Incomplete_Type): Additional checks for wrong\n\tuse of tag incomplete types.\n\n\t* sem_ch3.adb (Analyze_Incomplete_Type): Add mininum decoration to\n\tgive support to tagged incomplete types.\n\n\t* sem_ch5.adb (Analyze_Case_Statement): In generated code, if the\n\texpression is a discriminant reference and its type is private, as can\n\thappen within a stream operation for a mutable record, use the full\n\tview of the type to resolve the case alternatives.\n\t(Analyze_Assignment): Check wrong dereference of incomplete types.\n\n\t* sem_ch6.adb (Process_Formals): Allow the use of tagged incomplete\n\ttypes.\n\n\t* sem_res.adb (Resolve_Explicit_Dereference): Allow the use of tagged\n\tincomplete types.\n\n\t* sinfo.adb (Taggged_Present/Set_Taggged_Present): Applicable to\n\tN_Incomplete_Type_Declaration nodes.\n\n\t* sinfo.ads (N_Incomplete_Type_Declaration): Addition of attribute\n\tTag_Present to give support to tagged incomplete types:\n\t--\n\t  type DEFINING_IDENTIFIER [DISCRIMINANT_PART] [IS TAGGED];\n\t--\n\nFrom-SVN: r101695", "tree": {"sha": "cb60a98bd8b2a8eee5b74c882cddea07b285a3ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb60a98bd8b2a8eee5b74c882cddea07b285a3ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8db0bca7bcac3aca1f485a92d13b7b70edafdf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8db0bca7bcac3aca1f485a92d13b7b70edafdf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8db0bca7bcac3aca1f485a92d13b7b70edafdf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8db0bca7bcac3aca1f485a92d13b7b70edafdf7/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ca505dc9c40cdb738dc6acec445a31b32a950e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ca505dc9c40cdb738dc6acec445a31b32a950e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ca505dc9c40cdb738dc6acec445a31b32a950e7"}], "stats": {"total": 381, "additions": 305, "deletions": 76}, "files": [{"sha": "316c34e7903a1d2d9b06e4585931ca441067847e", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 85, "deletions": 5, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8db0bca7bcac3aca1f485a92d13b7b70edafdf7/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8db0bca7bcac3aca1f485a92d13b7b70edafdf7/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=d8db0bca7bcac3aca1f485a92d13b7b70edafdf7", "patch": "@@ -2235,6 +2235,32 @@ package body Freeze is\n                         Error_Msg_Qual_Level := 0;\n                      end if;\n \n+                     --  Ada 2005 (AI-326): Check wrong use of tag incomplete\n+                     --  types with unknown discriminants. For example:\n+\n+                     --    type T (<>) is tagged;\n+                     --    procedure P (X : access T); -- ERROR\n+                     --    procedure P (X : T);        -- ERROR\n+\n+                     if not From_With_Type (F_Type) then\n+                        if Is_Access_Type (F_Type) then\n+                           F_Type := Designated_Type (F_Type);\n+                        end if;\n+\n+                        if Ekind (F_Type) = E_Incomplete_Type\n+                          and then Is_Tagged_Type (F_Type)\n+                          and then not Is_Class_Wide_Type (F_Type)\n+                          and then No (Full_View (F_Type))\n+                          and then Unknown_Discriminants_Present\n+                                     (Parent (F_Type))\n+                          and then No (Stored_Constraint (F_Type))\n+                        then\n+                           Error_Msg_N\n+                             (\"(Ada 2005): invalid use of unconstrained tagged\"\n+                              & \" incomplete type\", E);\n+                        end if;\n+                     end if;\n+\n                      Next_Formal (Formal);\n                   end loop;\n \n@@ -2259,6 +2285,20 @@ package body Freeze is\n                         Error_Msg_N\n                           (\"?foreign convention function& should not \" &\n                            \"return unconstrained array\", E);\n+\n+                     --  Ada 2005 (AI-326): Check wrong use of tagged\n+                     --  incomplete type\n+                     --\n+                     --    type T is tagged;\n+                     --    function F (X : Boolean) return T; -- ERROR\n+\n+                     elsif Ekind (Etype (E)) = E_Incomplete_Type\n+                       and then Is_Tagged_Type (Etype (E))\n+                       and then No (Full_View (Etype (E)))\n+                     then\n+                        Error_Msg_N\n+                          (\"(Ada 2005): invalid use of tagged incomplete type\",\n+                           E);\n                      end if;\n                   end if;\n                end;\n@@ -2948,15 +2988,55 @@ package body Freeze is\n \n             Freeze_Subprogram (E);\n \n+            --  AI-326: Check wrong use of tag incomplete type\n+            --\n+            --    type T is tagged;\n+            --    type Acc is access function (X : T) return T; -- ERROR\n+\n+            if Ekind (Etype (E)) = E_Incomplete_Type\n+              and then Is_Tagged_Type (Etype (E))\n+              and then No (Full_View (Etype (E)))\n+            then\n+               Error_Msg_N\n+                 (\"(Ada 2005): invalid use of tagged incomplete type\", E);\n+            end if;\n+\n          --  For access to a protected subprogram, freeze the equivalent\n          --  type (however this is not set if we are not generating code)\n          --  or if this is an anonymous type used just for resolution).\n \n-         elsif Ekind (E) = E_Access_Protected_Subprogram_Type\n-           and then Operating_Mode = Generate_Code\n-           and then Present (Equivalent_Type (E))\n-         then\n-            Freeze_And_Append (Equivalent_Type (E), Loc, Result);\n+         elsif Ekind (E) = E_Access_Protected_Subprogram_Type then\n+\n+            --  AI-326: Check wrong use of tagged incomplete types\n+\n+            --    type T is tagged;\n+            --    type As3D is access protected\n+            --      function (X : Float) return T; -- ERROR\n+\n+            declare\n+               Etyp : Entity_Id;\n+\n+            begin\n+               Etyp := Etype (Directly_Designated_Type (E));\n+\n+               if Is_Class_Wide_Type (Etyp) then\n+                  Etyp := Etype (Etyp);\n+               end if;\n+\n+               if Ekind (Etyp) = E_Incomplete_Type\n+                 and then Is_Tagged_Type (Etyp)\n+                 and then No (Full_View (Etyp))\n+               then\n+                  Error_Msg_N\n+                    (\"(Ada 2005): invalid use of tagged incomplete type\", E);\n+               end if;\n+            end;\n+\n+            if Operating_Mode = Generate_Code\n+              and then Present (Equivalent_Type (E))\n+            then\n+               Freeze_And_Append (Equivalent_Type (E), Loc, Result);\n+            end if;\n          end if;\n \n          --  Generic types are never seen by the back-end, and are also not"}, {"sha": "695e89d3c9b6040bdbea2d90a1946f373b04c7a9", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8db0bca7bcac3aca1f485a92d13b7b70edafdf7/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8db0bca7bcac3aca1f485a92d13b7b70edafdf7/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=d8db0bca7bcac3aca1f485a92d13b7b70edafdf7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -26,7 +26,7 @@\n \n pragma Style_Checks (All_Checks);\n --  Turn off subprogram body ordering check. Subprograms are in order\n---  by RM section rather than alphabetical\n+--  by RM section rather than alphabetical.\n \n with Sinfo.CN; use Sinfo.CN;\n \n@@ -228,7 +228,7 @@ package body Ch3 is\n    --  | CONCURRENT_TYPE_DECLARATION\n \n    --  INCOMPLETE_TYPE_DECLARATION ::=\n-   --    type DEFINING_IDENTIFIER [DISCRIMINANT_PART];\n+   --    type DEFINING_IDENTIFIER [DISCRIMINANT_PART] [IS TAGGED];\n \n    --  PRIVATE_TYPE_DECLARATION ::=\n    --    type DEFINING_IDENTIFIER [DISCRIMINANT_PART]\n@@ -518,6 +518,24 @@ package body Ch3 is\n             when Tok_Tagged =>\n                Scan; -- past TAGGED\n \n+               --  Ada 2005 (AI-326): If the words IS TAGGED appear, the type\n+               --  is a tagged incomplete type.\n+\n+               if Ada_Version >= Ada_05\n+                 and then Token = Tok_Semicolon\n+               then\n+                  Scan; -- past ;\n+\n+                  Decl_Node :=\n+                    New_Node (N_Incomplete_Type_Declaration, Type_Loc);\n+                  Set_Defining_Identifier           (Decl_Node, Ident_Node);\n+                  Set_Tagged_Present                (Decl_Node);\n+                  Set_Unknown_Discriminants_Present (Decl_Node, Unknown_Dis);\n+                  Set_Discriminant_Specifications   (Decl_Node, Discr_List);\n+\n+                  return Decl_Node;\n+               end if;\n+\n                if Token = Tok_Abstract then\n                   Error_Msg_SC (\"ABSTRACT must come before TAGGED\");\n                   Abstract_Present := True;\n@@ -1480,7 +1498,7 @@ package body Ch3 is\n                Not_Null_Present := P_Null_Exclusion; --  Ada 2005 (AI-231)\n                Set_Null_Exclusion_Present (Decl_Node, Not_Null_Present);\n \n-               --  Access definition (AI-406) or subtype indication.\n+               --  Access definition (AI-406) or subtype indication\n \n                if Token = Tok_Access then\n                   if Ada_Version < Ada_05 then\n@@ -1589,7 +1607,7 @@ package body Ch3 is\n \n             Acc_Node := P_Access_Definition (Null_Exclusion_Present => False);\n \n-            --  Object declaration with access definition, or renaming.\n+            --  Object declaration with access definition, or renaming\n \n             if Token /= Tok_Renames then\n                Decl_Node := New_Node (N_Object_Declaration, Ident_Sloc);\n@@ -4183,7 +4201,7 @@ package body Ch3 is\n \n       SIS_Entry_Active := False;\n \n-      --  Test for assorted illegal declarations not diagnosed elsewhere.\n+      --  Test for assorted illegal declarations not diagnosed elsewhere\n \n       Decl := First (Decls);\n "}, {"sha": "23ad5fcfbfe320fdcd576ae7ba800ee88c6d7b68", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8db0bca7bcac3aca1f485a92d13b7b70edafdf7/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8db0bca7bcac3aca1f485a92d13b7b70edafdf7/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=d8db0bca7bcac3aca1f485a92d13b7b70edafdf7", "patch": "@@ -1101,13 +1101,64 @@ package body Sem_Attr is\n       -------------------------------\n \n       procedure Check_Not_Incomplete_Type is\n+         E   : Entity_Id;\n+         Typ : Entity_Id;\n+\n       begin\n+         --  Ada 2005 (AI-50217, AI-326): If the prefix is an explicit\n+         --  dereference we have to check wrong uses of incomplete types\n+         --  (other wrong uses are checked at their freezing point).\n+\n+         --  Example 1: Limited-with\n+\n+         --    limited with Pkg;\n+         --    package P is\n+         --       type Acc is access Pkg.T;\n+         --       X : Acc;\n+         --       S : Integer := X.all'Size;                    -- ERROR\n+         --    end P;\n+\n+         --  Example 2: Tagged incomplete\n+\n+         --     type T is tagged;\n+         --     type Acc is access all T;\n+         --     X : Acc;\n+         --     S : constant Integer := X.all'Size;             -- ERROR\n+         --     procedure Q (Obj : Integer := X.all'Alignment); -- ERROR\n+\n+         if Ada_Version >= Ada_05\n+           and then Nkind (P) = N_Explicit_Dereference\n+         then\n+            E := P;\n+            while Nkind (E) = N_Explicit_Dereference loop\n+               E := Prefix (E);\n+            end loop;\n+\n+            if From_With_Type (Etype (E)) then\n+               Error_Attr\n+                 (\"prefix of % attribute cannot be an incomplete type\", P);\n+\n+            else\n+               if Is_Access_Type (Etype (E)) then\n+                  Typ := Directly_Designated_Type (Etype (E));\n+               else\n+                  Typ := Etype (E);\n+               end if;\n+\n+               if Ekind (Typ) = E_Incomplete_Type\n+                 and then not Present (Full_View (Typ))\n+               then\n+                  Error_Attr\n+                    (\"prefix of % attribute cannot be an incomplete type\", P);\n+               end if;\n+            end if;\n+         end if;\n+\n          if not Is_Entity_Name (P)\n            or else not Is_Type (Entity (P))\n            or else In_Default_Expression\n          then\n             return;\n-\n          else\n             Check_Fully_Declared (P_Type, P);\n          end if;"}, {"sha": "bc60d9d401292100612d934a53566af6a979369b", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8db0bca7bcac3aca1f485a92d13b7b70edafdf7/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8db0bca7bcac3aca1f485a92d13b7b70edafdf7/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=d8db0bca7bcac3aca1f485a92d13b7b70edafdf7", "patch": "@@ -1529,6 +1529,16 @@ package body Sem_Ch3 is\n       Init_Size_Align (T);\n       Set_Is_First_Subtype (T, True);\n       Set_Etype (T, T);\n+\n+      --  Ada 2005 (AI-326): Mininum decoration to give support to tagged\n+      --  incomplete types\n+\n+      if Tagged_Present (N) then\n+         Set_Is_Tagged_Type (T);\n+         Make_Class_Wide_Type (T);\n+         Set_Primitive_Operations (T, New_Elmt_List);\n+      end if;\n+\n       New_Scope (T);\n \n       Set_Stored_Constraint (T, No_Elist);\n@@ -7535,10 +7545,10 @@ package body Sem_Ch3 is\n \n          while Present (I) loop\n \n-            --  Protect against wrong usages. Example:\n+            --  Protect against wrong uses. For example:\n             --    type I is interface;\n             --    type O is tagged null record;\n-            --    type Wrong is new I and O with null record;\n+            --    type Wrong is new I and O with null record; -- ERROR\n \n             if Is_Interface (Etype (I)) then\n \n@@ -14131,7 +14141,7 @@ package body Sem_Ch3 is\n          H    : Entity_Id;\n \n       begin\n-         --  If there is a previous partial view, no need to create a new one.\n+         --  If there is a previous partial view, no need to create a new one\n \n          if Prev /= T then\n             return;"}, {"sha": "b07389a8f36a0ea1e2e1b6d8275eecbc7dabdd37", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 65, "deletions": 10, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8db0bca7bcac3aca1f485a92d13b7b70edafdf7/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8db0bca7bcac3aca1f485a92d13b7b70edafdf7/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=d8db0bca7bcac3aca1f485a92d13b7b70edafdf7", "patch": "@@ -339,6 +339,29 @@ package body Sem_Ch5 is\n       --  to avoid scoping issues in the back-end.\n \n       T1 := Etype (Lhs);\n+\n+      --  Ada 2005 (AI-50217, AI-326): Check wrong dereference of incomplete\n+      --  type. For example:\n+\n+      --    limited with P;\n+      --    package Pkg is\n+      --      type Acc is access P.T;\n+      --    end Pkg;\n+\n+      --    with Pkg; use Acc;\n+      --    procedure Example is\n+      --       A, B : Acc;\n+      --    begin\n+      --       A.all := B.all;  -- ERROR\n+      --    end Example;\n+\n+      if Nkind (Lhs) = N_Explicit_Dereference\n+        and then Ekind (T1) = E_Incomplete_Type\n+      then\n+         Error_Msg_N (\"invalid use of incomplete type\", Lhs);\n+         return;\n+      end if;\n+\n       Set_Assignment_Type (Lhs, T1);\n \n       Resolve (Rhs, T1);\n@@ -359,6 +382,17 @@ package body Sem_Ch5 is\n          return;\n       end if;\n \n+      --  Ada 2005 (AI-326): In case of explicit dereference of incomplete\n+      --  types, use the non-limited view if available\n+\n+      if Nkind (Rhs) = N_Explicit_Dereference\n+        and then Ekind (T2) = E_Incomplete_Type\n+        and then Is_Tagged_Type (T2)\n+        and then Present (Non_Limited_View (T2))\n+      then\n+         T2 := Non_Limited_View (T2);\n+      end if;\n+\n       Set_Assignment_Type (Rhs, T2);\n \n       if Total_Errors_Detected /= 0 then\n@@ -752,9 +786,30 @@ package body Sem_Ch5 is\n    begin\n       Unblocked_Exit_Count := 0;\n       Exp := Expression (N);\n-      Analyze_And_Resolve (Exp, Any_Discrete);\n+      Analyze (Exp);\n+\n+      --  The expression must be of any discrete type. In rare cases, the\n+      --  expander constructs a case statement whose expression has a private\n+      --  type whose full view is discrete. This can happen when generating\n+      --  a stream operation for a variant type after the type is frozen,\n+      --  when the partial of view of the type of the discriminant is private.\n+      --  In that case, use the full view to analyze case alternatives.\n+\n+      if not Is_Overloaded (Exp)\n+        and then not Comes_From_Source (N)\n+        and then Is_Private_Type (Etype (Exp))\n+        and then Present (Full_View (Etype (Exp)))\n+        and then Is_Discrete_Type (Full_View (Etype (Exp)))\n+      then\n+         Resolve (Exp, Etype (Exp));\n+         Exp_Type := Full_View (Etype (Exp));\n+\n+      else\n+         Analyze_And_Resolve (Exp, Any_Discrete);\n+         Exp_Type := Etype (Exp);\n+      end if;\n+\n       Check_Unset_Reference (Exp);\n-      Exp_Type  := Etype (Exp);\n       Exp_Btype := Base_Type (Exp_Type);\n \n       --  The expression must be of a discrete type which must be determinable\n@@ -1124,8 +1179,8 @@ package body Sem_Ch5 is\n       --  assignment statements block to capture the bounds and perform\n       --  required finalization actions in case a bound includes a function\n       --  call that uses the temporary stack. We first pre-analyze a copy of\n-      --  the range in order to determine the expected type, and analyze\n-      --  and resolve the original bounds.\n+      --  the range in order to determine the expected type, and analyze and\n+      --  resolve the original bounds.\n \n       procedure Check_Controlled_Array_Attribute (DS : Node_Id);\n       --  If the bounds are given by a 'Range reference on a function call\n@@ -1167,12 +1222,12 @@ package body Sem_Ch5 is\n             Decl   : Node_Id;\n \n          begin\n-            --  If the bound is a constant or an object, no need for a\n-            --  separate declaration. If the bound is the result of previous\n-            --  expansion it is already analyzed and should not be modified.\n-            --  Note that the Bound will be resolved later, if needed, as\n-            --  part of the call to Make_Index (literal bounds may need to\n-            --  be resolved to type Integer).\n+            --  If the bound is a constant or an object, no need for a separate\n+            --  declaration. If the bound is the result of previous expansion\n+            --  it is already analyzed and should not be modified. Note that\n+            --  the Bound will be resolved later, if needed, as part of the\n+            --  call to Make_Index (literal bounds may need to be resolved to\n+            --  type Integer).\n \n             if Analyzed (Original_Bound) then\n                return Original_Bound;"}, {"sha": "cf687473feccd57750fa23cf993b9b782304f381", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8db0bca7bcac3aca1f485a92d13b7b70edafdf7/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8db0bca7bcac3aca1f485a92d13b7b70edafdf7/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=d8db0bca7bcac3aca1f485a92d13b7b70edafdf7", "patch": "@@ -5271,12 +5271,9 @@ package body Sem_Ch6 is\n                         and then Ekind (Root_Type (Formal_Type)) =\n                                                          E_Incomplete_Type)\n             then\n-               --  Ada 2005 (AI-50217): Incomplete tagged types that are made\n-               --  visible by a limited with_clause are valid formal types.\n+               --  Ada 2005 (AI-326): Tagged incomplete types allowed\n \n-               if From_With_Type (Formal_Type)\n-                 and then Is_Tagged_Type (Formal_Type)\n-               then\n+               if Is_Tagged_Type (Formal_Type) then\n                   null;\n \n                elsif Nkind (Parent (T)) /= N_Access_Function_Definition\n@@ -5292,8 +5289,8 @@ package body Sem_Ch6 is\n \n             --  Ada 2005 (AI-231): Create and decorate an internal subtype\n             --  declaration corresponding to the null-excluding type of the\n-            --  formal in the enclosing scope. Finally, replace the\n-            --  parameter type of the formal with the internal subtype.\n+            --  formal in the enclosing scope. Finally, replace the parameter\n+            --  type of the formal with the internal subtype.\n \n             if Null_Exclusion_Present (Param_Spec) then\n                declare\n@@ -5396,11 +5393,12 @@ package body Sem_Ch6 is\n \n             Analyze_Per_Use_Expression (Default, Formal_Type);\n \n-            --  Check that the designated type of an access parameter's\n-            --  default is not a class-wide type unless the parameter's\n-            --  designated type is also class-wide.\n+            --  Check that the designated type of an access parameter's default\n+            --  is not a class-wide type unless the parameter's designated type\n+            --  is also class-wide.\n \n             if Ekind (Formal_Type) = E_Anonymous_Access_Type\n+              and then not From_With_Type (Formal_Type)\n               and then Is_Class_Wide_Default (Default)\n               and then not Is_Class_Wide_Type (Designated_Type (Formal_Type))\n             then\n@@ -5531,18 +5529,19 @@ package body Sem_Ch6 is\n          elsif Is_Array_Type (T) then\n             AS_Needed := True;\n \n-         --  The only other case which needs an actual subtype is an\n-         --  unconstrained record type which is an IN parameter (we cannot\n-         --  generate actual subtypes for the OUT or IN OUT case, since an\n-         --  assignment can change the discriminant values. However we exclude\n-         --  the case of initialization procedures, since discriminants are\n-         --  handled very specially in this context, see the section entitled\n-         --  \"Handling of Discriminants\" in Einfo. We also exclude the case of\n-         --  Discrim_SO_Functions (functions used in front end layout mode for\n-         --  size/offset values), since in such functions only discriminants\n-         --  are referenced, and not only are such subtypes not needed, but\n-         --  they cannot always be generated, because of order of elaboration\n-         --  issues.\n+         --  The only other case needing an actual subtype is an unconstrained\n+         --  record type which is an IN parameter (we cannot generate actual\n+         --  subtypes for the OUT or IN OUT case, since an assignment can\n+         --  change the discriminant values. However we exclude the case of\n+         --  initialization procedures, since discriminants are handled very\n+         --  specially in this context, see the section entitled \"Handling of\n+         --  Discriminants\" in Einfo.\n+\n+         --  We also exclude the case of Discrim_SO_Functions (functions used\n+         --  in front end layout mode for size/offset values), since in such\n+         --  functions only discriminants are referenced, and not only are such\n+         --  subtypes not needed, but they cannot always be generated, because\n+         --  of order of elaboration issues.\n \n          elsif Is_Record_Type (T)\n            and then Ekind (Formal) = E_In_Parameter"}, {"sha": "285ab115a087ea37ad385e82c06a3549b9ed5363", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8db0bca7bcac3aca1f485a92d13b7b70edafdf7/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8db0bca7bcac3aca1f485a92d13b7b70edafdf7/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=d8db0bca7bcac3aca1f485a92d13b7b70edafdf7", "patch": "@@ -4924,6 +4924,19 @@ package body Sem_Res is\n         and then Ekind (Entity (Prefix (N))) = E_In_Parameter\n       then\n          null;\n+\n+      --  Ada 2005 (AI-326): Tagged incomplete types allowed. The wrong usages\n+      --  are handled by Analyze_Access_Attribute, Analyze_Assignment, Analyze_\n+      --  Object_Renaming, and Freeze_Entity.\n+\n+      elsif Ada_Version >= Ada_05\n+        and then Is_Entity_Name (Prefix (N))\n+        and then Ekind (Directly_Designated_Type (Etype (Prefix (N))))\n+                   = E_Incomplete_Type\n+        and then Is_Tagged_Type (Directly_Designated_Type (Etype (Prefix (N))))\n+      then\n+         null;\n+\n       else\n          Check_Fully_Declared (Typ, N);\n       end if;"}, {"sha": "553e7891086f273eb7e3e501b45523225d68f6e1", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8db0bca7bcac3aca1f485a92d13b7b70edafdf7/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8db0bca7bcac3aca1f485a92d13b7b70edafdf7/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=d8db0bca7bcac3aca1f485a92d13b7b70edafdf7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2450,6 +2450,7 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Formal_Private_Type_Definition\n+        or else NT (N).Nkind = N_Incomplete_Type_Declaration\n         or else NT (N).Nkind = N_Private_Type_Declaration\n         or else NT (N).Nkind = N_Record_Definition\n         or else NT (N).Nkind = N_With_Type_Clause);\n@@ -5001,6 +5002,7 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Formal_Private_Type_Definition\n+        or else NT (N).Nkind = N_Incomplete_Type_Declaration\n         or else NT (N).Nkind = N_Private_Type_Declaration\n         or else NT (N).Nkind = N_Record_Definition\n         or else NT (N).Nkind = N_With_Type_Clause);"}, {"sha": "5172e55a35e94f238e7acbb383324f514a21561b", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8db0bca7bcac3aca1f485a92d13b7b70edafdf7/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8db0bca7bcac3aca1f485a92d13b7b70edafdf7/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=d8db0bca7bcac3aca1f485a92d13b7b70edafdf7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2762,7 +2762,7 @@ package Sinfo is\n       -----------------------------------------\n \n       --  INCOMPLETE_TYPE_DECLARATION ::=\n-      --    type DEFINING_IDENTIFIER [DISCRIMINANT_PART];\n+      --    type DEFINING_IDENTIFIER [DISCRIMINANT_PART] [IS TAGGED];\n \n       --  N_Incomplete_Type_Declaration\n       --  Sloc points to TYPE\n@@ -2771,6 +2771,7 @@ package Sinfo is\n       --   discriminant part, or if the discriminant part is an\n       --   unknown discriminant part)\n       --  Unknown_Discriminants_Present (Flag13) set if (<>) discriminant\n+      --  Tagged_Present (Flag15)\n \n       ----------------------------\n       -- 3.11  Declarative Part --\n@@ -3947,7 +3948,7 @@ package Sinfo is\n       --   parent library unit package name is present.\n       --  Identifier (Node1)\n \n-      --  Note that the identifier can also be an operator symbol here.\n+      --  Note that the identifier can also be an operator symbol here\n \n       ------------------------------\n       -- 6.1  Defining Designator --\n@@ -4534,7 +4535,7 @@ package Sinfo is\n       --      HANDLED_SEQUENCE_OF_STATEMENTS\n       --    end [task_IDENTIFIER];\n \n-      --  Gigi restriction: This node never appears.\n+      --  Gigi restriction: This node never appears\n \n       --  N_Task_Body\n       --  Sloc points to TASK\n@@ -4625,7 +4626,7 @@ package Sinfo is\n \n       --  Note: protected bodies are not allowed in Ada 83 mode\n \n-      --  Gigi restriction: This node never appears.\n+      --  Gigi restriction: This node never appears\n \n       --  N_Protected_Body\n       --  Sloc points to PROTECTED\n@@ -4675,7 +4676,7 @@ package Sinfo is\n       --        HANDLED_SEQUENCE_OF_STATEMENTS\n       --    end [entry_IDENTIFIER]];\n \n-      --  Gigi restriction: This node never appears.\n+      --  Gigi restriction: This node never appears\n \n       --  Note: there are no explicit declarations allowed in an accept\n       --  statement. However, the implicit declarations for any statement\n@@ -4714,7 +4715,7 @@ package Sinfo is\n       --  the ENTRY_BODY_FORMAL_PART to avoid the N_Entry_Body node getting\n       --  too full (it would otherwise have too many fields)\n \n-      --  Gigi restriction: This node never appears.\n+      --  Gigi restriction: This node never appears\n \n       --  N_Entry_Body\n       --  Sloc points to ENTRY\n@@ -4737,7 +4738,7 @@ package Sinfo is\n       --  formal part itself. Also this means that the barrier condition\n       --  always has somewhere to be stored.\n \n-      --  Gigi restriction: This node never appears.\n+      --  Gigi restriction: This node never appears\n \n       --  N_Entry_Body_Formal_Part\n       --  Sloc points to first token\n@@ -4758,7 +4759,7 @@ package Sinfo is\n       --  ENTRY_INDEX_SPECIFICATION ::=\n       --    for DEFINING_IDENTIFIER in DISCRETE_SUBTYPE_DEFINITION\n \n-      --  Gigi restriction: This node never appears.\n+      --  Gigi restriction: This node never appears\n \n       --  N_Entry_Index_Specification\n       --  Sloc points to FOR\n@@ -4774,7 +4775,7 @@ package Sinfo is\n       --  The parser may generate a procedure call for this construct. The\n       --  semantic pass must correct this misidentification where needed.\n \n-      --  Gigi restriction: This node never appears.\n+      --  Gigi restriction: This node never appears\n \n       --  N_Entry_Call_Statement\n       --  Sloc points to first token of name\n@@ -4791,7 +4792,7 @@ package Sinfo is\n \n       --  Note: requeue statements are not permitted in Ada 83 mode\n \n-      --  Gigi restriction: This node never appears.\n+      --  Gigi restriction: This node never appears\n \n       --  N_Requeue_Statement\n       --  Sloc points to REQUEUE\n@@ -4814,7 +4815,7 @@ package Sinfo is\n \n       --  Note: delay until statements are not permitted in Ada 83 mode\n \n-      --  Gigi restriction: This node never appears.\n+      --  Gigi restriction: This node never appears\n \n       --  N_Delay_Until_Statement\n       --  Sloc points to DELAY\n@@ -4826,7 +4827,7 @@ package Sinfo is\n \n       --  DELAY_RELATIVE_STATEMENT ::= delay delay_EXPRESSION;\n \n-      --  Gigi restriction: This node never appears.\n+      --  Gigi restriction: This node never appears\n \n       --  N_Delay_Relative_Statement\n       --  Sloc points to DELAY\n@@ -4857,7 +4858,7 @@ package Sinfo is\n       --      SEQUENCE_OF_STATEMENTS]\n       --    end select;\n \n-      --  Gigi restriction: This node never appears.\n+      --  Gigi restriction: This node never appears\n \n       --  Note: the guard expression, if present, appears in the node for\n       --  the select alternative.\n@@ -4892,7 +4893,7 @@ package Sinfo is\n       --  ACCEPT_ALTERNATIVE ::=\n       --    ACCEPT_STATEMENT [SEQUENCE_OF_STATEMENTS]\n \n-      --  Gigi restriction: This node never appears.\n+      --  Gigi restriction: This node never appears\n \n       --  N_Accept_Alternative\n       --  Sloc points to ACCEPT\n@@ -4909,7 +4910,7 @@ package Sinfo is\n       --  DELAY_ALTERNATIVE ::=\n       --    DELAY_STATEMENT [SEQUENCE_OF_STATEMENTS]\n \n-      --  Gigi restriction: This node never appears.\n+      --  Gigi restriction: This node never appears\n \n       --  N_Delay_Alternative\n       --  Sloc points to DELAY\n@@ -4924,7 +4925,7 @@ package Sinfo is\n \n       --  TERMINATE_ALTERNATIVE ::= terminate;\n \n-      --  Gigi restriction: This node never appears.\n+      --  Gigi restriction: This node never appears\n \n       --  N_Terminate_Alternative\n       --  Sloc points to TERMINATE\n@@ -4943,7 +4944,7 @@ package Sinfo is\n       --      DELAY_ALTERNATIVE\n       --    end select;\n \n-      --  Gigi restriction: This node never appears.\n+      --  Gigi restriction: This node never appears\n \n       --  N_Timed_Entry_Call\n       --  Sloc points to SELECT\n@@ -4957,7 +4958,7 @@ package Sinfo is\n       --  ENTRY_CALL_ALTERNATIVE ::=\n       --    ENTRY_CALL_STATEMENT [SEQUENCE_OF_STATEMENTS]\n \n-      --  Gigi restriction: This node never appears.\n+      --  Gigi restriction: This node never appears\n \n       --  N_Entry_Call_Alternative\n       --  Sloc points to first token of entry call statement\n@@ -4976,7 +4977,7 @@ package Sinfo is\n       --      SEQUENCE_OF_STATEMENTS\n       --    end select;\n \n-      --  Gigi restriction: This node never appears.\n+      --  Gigi restriction: This node never appears\n \n       --  N_Conditional_Entry_Call\n       --  Sloc points to SELECT\n@@ -4996,7 +4997,7 @@ package Sinfo is\n \n       --  Note: asynchronous select is not permitted in Ada 83 mode\n \n-      --  Gigi restriction: This node never appears.\n+      --  Gigi restriction: This node never appears\n \n       --  N_Asynchronous_Select\n       --  Sloc points to SELECT\n@@ -5010,7 +5011,7 @@ package Sinfo is\n       --  TRIGGERING_ALTERNATIVE ::=\n       --    TRIGGERING_STATEMENT [SEQUENCE_OF_STATEMENTS]\n \n-      --  Gigi restriction: This node never appears.\n+      --  Gigi restriction: This node never appears\n \n       --  N_Triggering_Alternative\n       --  Sloc points to first token of triggering statement\n@@ -5030,7 +5031,7 @@ package Sinfo is\n \n       --  ABORTABLE_PART ::= SEQUENCE_OF_STATEMENTS\n \n-      --  Gigi restriction: This node never appears.\n+      --  Gigi restriction: This node never appears\n \n       --  N_Abortable_Part\n       --  Sloc points to ABORT\n@@ -5042,7 +5043,7 @@ package Sinfo is\n \n       --  ABORT_STATEMENT ::= abort task_NAME {, task_NAME};\n \n-      --  Gigi restriction: This node never appears.\n+      --  Gigi restriction: This node never appears\n \n       --  N_Abort_Statement\n       --  Sloc points to ABORT\n@@ -5390,7 +5391,7 @@ package Sinfo is\n       --  is true even in the case of an accept statement (see description of\n       --  the N_Accept_Statement node).\n \n-      --  End_Label refers to the containing construct.\n+      --  End_Label refers to the containing construct\n \n       -----------------------------\n       -- 11.2  Exception Handler --\n@@ -6192,7 +6193,7 @@ package Sinfo is\n       --  an expanded name node to a selected component node to be done\n       --  easily, see Sinfo.CN.Change_Selected_Component_To_Expanded_Name.\n \n-      --  There is no special sprint syntax for an expanded name.\n+      --  There is no special sprint syntax for an expanded name\n \n       --  N_Expanded_Name\n       --  Sloc points to the period\n@@ -6448,7 +6449,7 @@ package Sinfo is\n       --  with all checks off, regardless of the current setting of scope\n       --  suppress flags.\n \n-      --  Sprint syntax: `(expression).\n+      --  Sprint syntax: `(expression)\n \n       --  Note: this node is always removed from the tree (and replaced by\n       --  its constituent expression) on completion of analysis, so it only\n@@ -6478,7 +6479,7 @@ package Sinfo is\n       --  clearly a function call to an instantiation of Unchecked_Conversion\n       --  is not a variable in any case.\n \n-      --  Sprint syntax: subtype-mark!(expression).\n+      --  Sprint syntax: subtype-mark!(expression)\n \n       --  N_Unchecked_Type_Conversion\n       --  Sloc points to related node in source"}]}