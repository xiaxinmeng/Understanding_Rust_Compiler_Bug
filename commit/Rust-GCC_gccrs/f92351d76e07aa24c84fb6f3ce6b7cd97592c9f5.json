{"sha": "f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkyMzUxZDc2ZTA3YWEyNGM4NGZiNmYzY2U2YjdjZDk3NTkyYzlmNQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-11-01T17:00:02Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-11-01T17:00:02Z"}, "message": "encodings.pl: Added `ASCII' alias.\n\n\t* scripts/encodings.pl: Added `ASCII' alias.\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (convert_source_files): Added new files.\n\t* gnu/gcj/convert/Input_ASCII.java: New file.\n\t* gnu/gcj/convert/Output_ASCII.java: New file.\n\t* gnu/gcj/convert/Output_8859_1.java (write): Use `?' to represent\n\tout-of-range characters.\n\t* gnu/gcj/convert/natIconv.cc (iconv_init): New method.\n\t(read): Swap bytes if required.  Treat `count' as character count,\n\tnot byte count.\n\t(write): Likewise.  Also, handle case where iconv fails on a given\n\tcharacter.\n\t(init): Put encoding into exception.\n\t* gnu/gcj/convert/IOConverter.java (iconv_byte_swap): New global.\n\t(static): Call iconv_init.  Rebuilt alias list.\n\t(iconv_init): New private method.\n\nFrom-SVN: r37190", "tree": {"sha": "eb0fff5301aba42e99bf81089d2c71311deab8ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb0fff5301aba42e99bf81089d2c71311deab8ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5/comments", "author": null, "committer": null, "parents": [{"sha": "347b93640a0f52c452ba575de200ce3c5f8a06e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/347b93640a0f52c452ba575de200ce3c5f8a06e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/347b93640a0f52c452ba575de200ce3c5f8a06e6"}], "stats": {"total": 267, "additions": 246, "deletions": 21}, "files": [{"sha": "1901cfce861d67110e19be7df0845949f6de9878", "filename": "libjava/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5", "patch": "@@ -1,3 +1,22 @@\n+2000-11-01  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* scripts/encodings.pl: Added `ASCII' alias.\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (convert_source_files): Added new files.\n+\t* gnu/gcj/convert/Input_ASCII.java: New file.\n+\t* gnu/gcj/convert/Output_ASCII.java: New file.\n+\t* gnu/gcj/convert/Output_8859_1.java (write): Use `?' to represent\n+\tout-of-range characters.\n+\t* gnu/gcj/convert/natIconv.cc (iconv_init): New method.\n+\t(read): Swap bytes if required.  Treat `count' as character count,\n+\tnot byte count.\n+\t(write): Likewise.  Also, handle case where iconv fails on a given\n+\tcharacter.\n+\t(init): Put encoding into exception.\n+\t* gnu/gcj/convert/IOConverter.java (iconv_byte_swap): New global.\n+\t(static): Call iconv_init.  Rebuilt alias list.\n+\t(iconv_init): New private method.\n+\n 2000-11-01  Tom Tromey  <tromey@cygnus.com>\n \n \t* Makefile.in: Rebuilt."}, {"sha": "d3fcd9b014ccb1e759d5a1679685a3d55752ac55", "filename": "libjava/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5", "patch": "@@ -506,13 +506,15 @@ convert_source_files = \\\n gnu/gcj/convert/BytesToUnicode.java \\\n gnu/gcj/convert/Convert.java \\\n gnu/gcj/convert/Input_8859_1.java \\\n+gnu/gcj/convert/Input_ASCII.java \\\n gnu/gcj/convert/Input_EUCJIS.java \\\n gnu/gcj/convert/Input_JavaSrc.java \\\n gnu/gcj/convert/Input_SJIS.java \\\n gnu/gcj/convert/Input_UTF8.java\t\\\n gnu/gcj/convert/Input_iconv.java \\\n gnu/gcj/convert/IOConverter.java \\\n gnu/gcj/convert/Output_8859_1.java \\\n+gnu/gcj/convert/Output_ASCII.java \\\n gnu/gcj/convert/Output_EUCJIS.java \\\n gnu/gcj/convert/Output_JavaSrc.java \\\n gnu/gcj/convert/Output_SJIS.java \\"}, {"sha": "7ebd6cebe939ff22f68d65e60502ddc16fe266a1", "filename": "libjava/Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5", "patch": "@@ -280,13 +280,15 @@ convert_source_files = \\\n gnu/gcj/convert/BytesToUnicode.java \\\n gnu/gcj/convert/Convert.java \\\n gnu/gcj/convert/Input_8859_1.java \\\n+gnu/gcj/convert/Input_ASCII.java \\\n gnu/gcj/convert/Input_EUCJIS.java \\\n gnu/gcj/convert/Input_JavaSrc.java \\\n gnu/gcj/convert/Input_SJIS.java \\\n gnu/gcj/convert/Input_UTF8.java\t\\\n gnu/gcj/convert/Input_iconv.java \\\n gnu/gcj/convert/IOConverter.java \\\n gnu/gcj/convert/Output_8859_1.java \\\n+gnu/gcj/convert/Output_ASCII.java \\\n gnu/gcj/convert/Output_EUCJIS.java \\\n gnu/gcj/convert/Output_JavaSrc.java \\\n gnu/gcj/convert/Output_SJIS.java \\\n@@ -1197,13 +1199,15 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/gcj/convert/BytesToUnicode.P .deps/gnu/gcj/convert/Convert.P \\\n .deps/gnu/gcj/convert/IOConverter.P \\\n .deps/gnu/gcj/convert/Input_8859_1.P \\\n+.deps/gnu/gcj/convert/Input_ASCII.P \\\n .deps/gnu/gcj/convert/Input_EUCJIS.P \\\n .deps/gnu/gcj/convert/Input_JavaSrc.P \\\n .deps/gnu/gcj/convert/Input_SJIS.P .deps/gnu/gcj/convert/Input_UTF8.P \\\n .deps/gnu/gcj/convert/Input_iconv.P \\\n .deps/gnu/gcj/convert/JIS0208_to_Unicode.P \\\n .deps/gnu/gcj/convert/JIS0212_to_Unicode.P \\\n .deps/gnu/gcj/convert/Output_8859_1.P \\\n+.deps/gnu/gcj/convert/Output_ASCII.P \\\n .deps/gnu/gcj/convert/Output_EUCJIS.P \\\n .deps/gnu/gcj/convert/Output_JavaSrc.P \\\n .deps/gnu/gcj/convert/Output_SJIS.P .deps/gnu/gcj/convert/Output_UTF8.P \\"}, {"sha": "9b5fbad00f46ce823515f0124f25cf54a52d78cf", "filename": "libjava/gnu/gcj/convert/IOConverter.java", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5/libjava%2Fgnu%2Fgcj%2Fconvert%2FIOConverter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5/libjava%2Fgnu%2Fgcj%2Fconvert%2FIOConverter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FIOConverter.java?ref=f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5", "patch": "@@ -18,13 +18,28 @@\n   // Map encoding aliases to our canonical form.\n   static private Hashtable hash = new Hashtable ();\n \n+  // True if we have to do byte-order conversions on iconv()\n+  // arguments.\n+  static protected boolean iconv_byte_swap;\n+\n   static\n   {\n     // Manually maintained aliases.  Note that the value must be our\n     // canonical name.\n     hash.put (\"ISO-Latin-1\", \"8859_1\");\n     // All aliases after this point are automatically generated by the\n     // `encodings.pl' script.  Run it to make any corrections.\n+    hash.put (\"ANSI_X3.4-1968\", \"ASCII\");\n+    hash.put (\"iso-ir-6\", \"ASCII\");\n+    hash.put (\"ANSI_X3.4-1986\", \"ASCII\");\n+    hash.put (\"ISO_646.irv:1991\", \"ASCII\");\n+    hash.put (\"ASCII\", \"ASCII\");\n+    hash.put (\"ISO646-US\", \"ASCII\");\n+    hash.put (\"US-ASCII\", \"ASCII\");\n+    hash.put (\"us\", \"ASCII\");\n+    hash.put (\"IBM367\", \"ASCII\");\n+    hash.put (\"cp367\", \"ASCII\");\n+    hash.put (\"csASCII\", \"ASCII\");\n     hash.put (\"ISO_8859-1:1987\", \"8859_1\");\n     hash.put (\"iso-ir-100\", \"8859_1\");\n     hash.put (\"ISO_8859-1\", \"8859_1\");\n@@ -41,8 +56,12 @@\n     hash.put (\"Extended_UNIX_Code_Packed_Format_for_Japanese\", \"EUCJIS\");\n     hash.put (\"csEUCPkdFmtJapanese\", \"EUCJIS\");\n     hash.put (\"EUC-JP\", \"EUCJIS\");\n+\n+    iconv_byte_swap = iconv_init ();\n   }\n \n+  private static native boolean iconv_init ();\n+\n   // Turn an alias into the canonical form.\n   protected static final String canonicalize (String name)\n   {"}, {"sha": "bd5f7798086a41f52d5030bbc7b153fd53060232", "filename": "libjava/gnu/gcj/convert/Input_8859_1.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_8859_1.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_8859_1.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_8859_1.java?ref=f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -9,7 +9,7 @@\n package gnu.gcj.convert;\n \n /**\n- * Convert ISO-Latin-1 (8851-1) text to Unicode.\n+ * Convert ISO-Latin-1 (8859-1) text to Unicode.\n  * @author Per Bothner <bothner@cygnus.com>\n  * @date March 1999.\n  */"}, {"sha": "cb531e980d087c61ebba51d1596d6597a338752f", "filename": "libjava/gnu/gcj/convert/Input_ASCII.java", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_ASCII.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_ASCII.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_ASCII.java?ref=f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5", "patch": "@@ -0,0 +1,37 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package gnu.gcj.convert;\n+\n+/**\n+ * Convert ASCII text to Unicode.\n+ * @date October 2000\n+ */\n+\n+public class Input_ASCII extends BytesToUnicode\n+{\n+  public String getName() { return \"ASCII\"; }\n+\n+  public int read (char[] outbuffer, int outpos, int count)\n+  {\n+    int origpos = outpos;\n+    // Make sure fields of this are in registers.\n+    int inpos = this.inpos;\n+    byte[] inbuffer = this.inbuffer;\n+    int inavail = this.inlength - inpos;\n+    int outavail = count;\n+    if (outavail > inavail)\n+      outavail = inavail;\n+    while (--outavail >= 0)\n+      {\n+\toutbuffer[outpos++] = (char) (inbuffer[inpos++] & 0x7f);\n+      }\n+    this.inpos = inpos;\n+    return outpos - origpos;\n+  }\n+}"}, {"sha": "7ae6a615f2306306dda2d0ad7d3e5ac7a9cf2739", "filename": "libjava/gnu/gcj/convert/Output_8859_1.java", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5/libjava%2Fgnu%2Fgcj%2Fconvert%2FOutput_8859_1.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5/libjava%2Fgnu%2Fgcj%2Fconvert%2FOutput_8859_1.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FOutput_8859_1.java?ref=f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -10,9 +10,9 @@\n  \n /**\n  * Convert Unicode ISO-Latin-1 (8851-1) text.\n- * The high-order byte of each character is truncated.\n+ * Unrecognized characters are printed as `?'.\n  * @author Per Bothner <bothner@cygnus.com>\n- * @date Match 1999.\n+ * @date March 1999.\n  */\n \n public class Output_8859_1 extends UnicodeToBytes\n@@ -30,7 +30,8 @@ public int write (char[] inbuffer, int inpos, int inlength)\n       inlength = avail;\n     for (int i = inlength;  --i >= 0;  )\n       {\n-\tbuf[count++] = (byte) inbuffer[inpos++];\n+\tchar c = inbuffer[inpos++];\n+\tbuf[count++] = (byte) ((c > 0xff) ? '?' : c);\n       }\n     this.count = count;\n     return inlength;\n@@ -45,7 +46,8 @@ public int write (String str, int inpos, int inlength, char[] work)\n       inlength = avail;\n     for (int i = inlength;  --i >= 0;  )\n       {\n-\tbuf[count++] = (byte) str.charAt(inpos++);\n+\tchar c = str.charAt(inpos++);\n+\tbuf[count++] = (byte) ((c > 0xff) ? '?' : c);\n       }\n     this.count = count;\n     return inlength;"}, {"sha": "9f336452501b2977ce0a5ee8d21c6b2a58c704ef", "filename": "libjava/gnu/gcj/convert/Output_ASCII.java", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5/libjava%2Fgnu%2Fgcj%2Fconvert%2FOutput_ASCII.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5/libjava%2Fgnu%2Fgcj%2Fconvert%2FOutput_ASCII.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FOutput_ASCII.java?ref=f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5", "patch": "@@ -0,0 +1,54 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package gnu.gcj.convert; \n+ \n+/**\n+ * Convert Unicode ASCII\n+ * Unrecognized characters are printed as `?'.\n+ * @date October 2000\n+ */\n+\n+public class Output_ASCII extends UnicodeToBytes\n+{\n+  public String getName() { return \"ASCII\"; }\n+\n+  /**\n+   * @return number of chars converted. */\n+  public int write (char[] inbuffer, int inpos, int inlength)\n+  {\n+    int count = this.count;\n+    byte[] buf = this.buf;\n+    int avail = buf.length - count;\n+    if (inlength > avail)\n+      inlength = avail;\n+    for (int i = inlength;  --i >= 0;  )\n+      {\n+\tchar c = inbuffer[inpos++];\n+\tbuf[count++] = (byte) ((c > 0x7f) ? '?' : c);\n+      }\n+    this.count = count;\n+    return inlength;\n+  }\n+\n+  public int write (String str, int inpos, int inlength, char[] work)\n+  {\n+    int count = this.count;\n+    byte[] buf = this.buf;\n+    int avail = buf.length - count;\n+    if (inlength > avail)\n+      inlength = avail;\n+    for (int i = inlength;  --i >= 0;  )\n+      {\n+\tchar c = str.charAt(inpos++);\n+\tbuf[count++] = (byte) ((c > 0x7f) ? '?' : c);\n+      }\n+    this.count = count;\n+    return inlength;\n+  }\n+}"}, {"sha": "d346b1488f25f036b6c69bcfd48d1276f08ea553", "filename": "libjava/gnu/gcj/convert/natIconv.cc", "status": "modified", "additions": 101, "deletions": 14, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5/libjava%2Fgnu%2Fgcj%2Fconvert%2FnatIconv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5/libjava%2Fgnu%2Fgcj%2Fconvert%2FnatIconv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FnatIconv.cc?ref=f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5", "patch": "@@ -44,13 +44,13 @@ gnu::gcj::convert::Input_iconv::init (jstring encoding)\n \n   iconv_t h = iconv_open (\"UCS-2\", buffer);\n   if (h == (iconv_t) -1)\n-    JvThrow (new java::io::UnsupportedEncodingException);\n+    throw new java::io::UnsupportedEncodingException (encoding);\n \n   JvAssert (h != NULL);\n   handle = reinterpret_cast<gnu::gcj::RawData *> (h);\n #else /* HAVE_ICONV */\n   // If no iconv, just throw an exception.\n-  JvThrow (new java::io::UnsupportedEncodingException);\n+  throw new java::io::UnsupportedEncodingException (encoding);\n #endif /* HAVE_ICONV */\n }\n \n@@ -75,7 +75,7 @@ gnu::gcj::convert::Input_iconv::read (jcharArray outbuffer,\n   jchar *out = elements (outbuffer);\n   size_t inavail = inlength - inpos;\n   size_t old_in = inavail;\n-  size_t outavail = count;\n+  size_t outavail = count * sizeof (jchar);\n   size_t old_out = outavail;\n \n   char *inbuf = (char *) &bytes[inpos];\n@@ -86,8 +86,20 @@ gnu::gcj::convert::Input_iconv::read (jcharArray outbuffer,\n \t\t\t    &outbuf, &outavail);\n   // FIXME: what if R==-1?\n \n+  if (iconv_byte_swap)\n+    {\n+      size_t max = (old_out - outavail) / sizeof (jchar);\n+      for (size_t i = 0; i < max; ++i)\n+\t{\n+\t  // Byte swap.\n+\t  jchar c = (((out[outpos + i] & 0xff) << 8)\n+\t\t     | ((out[outpos + i] >> 8) & 0xff));\n+\t  outbuf[i] = c;\n+\t}\n+    }\n+\n   inpos += old_in - inavail;\n-  return old_out - outavail;\n+  return (old_out - outavail) / sizeof (jchar);\n #else /* HAVE_ICONV */\n   return -1;\n #endif /* HAVE_ICONV */\n@@ -104,13 +116,13 @@ gnu::gcj::convert::Output_iconv::init (jstring encoding)\n \n   iconv_t h = iconv_open (buffer, \"UCS-2\");\n   if (h == (iconv_t) -1)\n-    JvThrow (new java::io::UnsupportedEncodingException);\n+    throw new java::io::UnsupportedEncodingException (encoding);\n \n   JvAssert (h != NULL);\n   handle = reinterpret_cast<gnu::gcj::RawData *> (h);\n #else /* HAVE_ICONV */\n   // If no iconv, just throw an exception.\n-  JvThrow (new java::io::UnsupportedEncodingException);\n+  throw new java::io::UnsupportedEncodingException (encoding);\n #endif /* HAVE_ICONV */\n }\n \n@@ -128,29 +140,104 @@ gnu::gcj::convert::Output_iconv::finalize (void)\n \n jint\n gnu::gcj::convert::Output_iconv::write (jcharArray inbuffer,\n-\t\t\t\t\tjint inpos, jint count)\n+\t\t\t\t\tjint inpos, jint inlength)\n {\n #ifdef HAVE_ICONV\n   jchar *chars = elements (inbuffer);\n   jbyte *out = elements (buf);\n+  jchar *temp_buffer = NULL;\n \n-  size_t inavail = count;\n-  size_t old_in = count;\n+  size_t inavail = inlength * sizeof (jchar);\n+  size_t old_in = inavail;\n \n   size_t outavail = buf->length - count;\n   size_t old_out = outavail;\n \n   char *inbuf = (char *) &chars[inpos];\n   char *outbuf = (char *) &out[count];\n \n-  size_t r = iconv_adapter (iconv, (iconv_t) handle,\n-\t\t\t    &inbuf, &inavail,\n-\t\t\t    &outbuf, &outavail);\n-  // FIXME: what if R==-1?\n+  if (iconv_byte_swap)\n+    {\n+      // Ugly performance penalty -- don't use losing systems!\n+      temp_buffer = (jchar *) _Jv_Malloc (inlength * sizeof (jchar));\n+      for (int i = 0; i < inlength; ++i)\n+\t{\n+\t  // Byte swap.\n+\t  jchar c = (((chars[inpos + i] & 0xff) << 8)\n+\t\t     | ((chars[inpos + i] >> 8) & 0xff));\n+\t  temp_buffer[i] = c;\n+\t}\n+      inbuf = (char *) temp_buffer;\n+    }\n+\n+  // If the conversion fails on the very first character, then we\n+  // assume that the character can't be represented in the output\n+  // encoding.  There's nothing useful we can do here, so we simply\n+  // omit that character.  Note that we can't check `errno' because\n+  // glibc 2.1.3 doesn't set it correctly.  We could check it if we\n+  // really needed to, but we'd have to disable support for 2.1.3.\n+  size_t loop_old_in = old_in;\n+  while (1)\n+    {\n+      size_t r = iconv_adapter (iconv, (iconv_t) handle,\n+\t\t\t\t&inbuf, &inavail,\n+\t\t\t\t&outbuf, &outavail);\n+      if (r == -1 && inavail == loop_old_in)\n+\t{\n+\t  inavail -= 2;\n+\t  if (inavail == 0)\n+\t    break;\n+\t  loop_old_in -= 2;\n+\t  inbuf += 2;\n+\t}\n+      else\n+\tbreak;\n+    }\n+\n+  if (temp_buffer != NULL)\n+    _Jv_Free (temp_buffer);\n \n   count += old_out - outavail;\n-  return old_in - inavail;\n+  return (old_in - inavail) / sizeof (jchar);\n #else /* HAVE_ICONV */\n   return -1;\n #endif /* HAVE_ICONV */\n }\n+\n+jboolean\n+gnu::gcj::convert::IOConverter::iconv_init (void)\n+{\n+  // Some versions of iconv() always return their UCS-2 results in\n+  // big-endian order, and they also require UCS-2 inputs to be in\n+  // big-endian order.  For instance, glibc 2.1.3 does this.  If the\n+  // UTF-8=>UCS-2 iconv converter has this feature, then we assume\n+  // that all UCS-2 converters do.  (This might not be the best\n+  // heuristic, but is is all we've got.)\n+  jboolean result = false;\n+#ifdef HAVE_ICONV\n+  iconv_t handle = iconv_open (\"UCS-2\", \"UTF-8\");\n+  if (handle != (iconv_t) -1)\n+    {\n+      jchar c;\n+      unsigned char in[3];\n+      char *inp, *outp;\n+      size_t inc, outc, r;\n+\n+      // This is the UTF-8 encoding of \\ufeff.\n+      in[0] = 0xef;\n+      in[1] = 0xbb;\n+      in[2] = 0xbf;\n+\n+      inp = (char *) in;\n+      inc = 3;\n+      outp = (char *) &c;\n+      outc = 2;\n+\n+      r = iconv_adapter (iconv, handle, &inp, &inc, &outp, &outc);\n+      // Conversion must be complete for us to use the result.\n+      if (r != (size_t) -1 && inc == 0 && outc == 0)\n+\tresult = (c != 0xfeff);\n+    }\n+#endif /* HAVE_ICONV */\n+  return result;\n+}"}, {"sha": "4c7f0579534e750ff63ccd8c5125bb3e294908a1", "filename": "libjava/scripts/encodings.pl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5/libjava%2Fscripts%2Fencodings.pl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5/libjava%2Fscripts%2Fencodings.pl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fscripts%2Fencodings.pl?ref=f92351d76e07aa24c84fb6f3ce6b7cd97592c9f5", "patch": "@@ -4,6 +4,7 @@\n \n # Map IANA canonical names onto our canonical names.\n %map = (\n+\t'ANSI_X3.4-1968' => 'ASCII',\n \t'ISO_8859-1:1987' => '8859_1',\n \t'UTF-8' => 'UTF8',\n \t'Shift_JIS' => 'SJIS',"}]}