{"sha": "e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTEyMzNhN2RjMGIyYWIyZTdkOWNiNWYwMTM4YTlkZThmNjUxMjVlNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-03-30T20:46:57Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-03-30T20:46:57Z"}, "message": "cfgbuild.c (make_edges): Use tablejump_p.\n\n        * cfgbuild.c (make_edges): Use tablejump_p.\n        * cfgcleanup.c (label_is_jump_target_p): Likewise.\n        * cfglayout.c (cfg_layout_can_duplicate_bb_p): Likewise.\n        * cfgrtl.c (flow_delete_block_noexpunge): Likewise.\n        (try_redirect_by_replacing_jump): Likewise.\n        (redirect_edge_and_branch): Likewise.\n        * cse.c (fold_rtx): Likewise.\n        * jump.c (delete_related_insns): Likewise.\n        * rtlanal.c (get_jump_table_offset): Likewise.\n        * ssa-ccp.c (ssa_ccp_df_delete_unreachable_insns): Likewise.\n\nFrom-SVN: r65054", "tree": {"sha": "1f8da9ec73c4ebabe1b0846460e0317b29ff02a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f8da9ec73c4ebabe1b0846460e0317b29ff02a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5/comments", "author": null, "committer": null, "parents": [{"sha": "9b703090abb0b72c28ddfe1804d93bc6af5ec6a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b703090abb0b72c28ddfe1804d93bc6af5ec6a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b703090abb0b72c28ddfe1804d93bc6af5ec6a0"}], "stats": {"total": 104, "additions": 32, "deletions": 72}, "files": [{"sha": "3b02fd168b1692bf58a4688fda10c66b0f2b6343", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5", "patch": "@@ -1,3 +1,16 @@\n+2003-03-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* cfgbuild.c (make_edges): Use tablejump_p.\n+\t* cfgcleanup.c (label_is_jump_target_p): Likewise.\n+\t* cfglayout.c (cfg_layout_can_duplicate_bb_p): Likewise.\n+\t* cfgrtl.c (flow_delete_block_noexpunge): Likewise.\n+\t(try_redirect_by_replacing_jump): Likewise.\n+\t(redirect_edge_and_branch): Likewise.\n+\t* cse.c (fold_rtx): Likewise.\n+\t* jump.c (delete_related_insns): Likewise.\n+\t* rtlanal.c (get_jump_table_offset): Likewise.\n+\t* ssa-ccp.c (ssa_ccp_df_delete_unreachable_insns): Likewise.\n+\n 2003-03-30  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n         * Makefile.in (STRICT_WARN): Don't warn for ISO C constructs."}, {"sha": "889ae9da23ddaf37ca10cf209c0fb3855ad8595a", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5", "patch": "@@ -343,12 +343,8 @@ make_edges (label_value_list, min, max, update_p)\n \t  else if (find_reg_note (insn, REG_NON_LOCAL_GOTO, NULL_RTX))\n \t    ;\n \n-\t  /* ??? Recognize a tablejump and do the right thing.  */\n-\t  else if ((tmp = JUMP_LABEL (insn)) != NULL_RTX\n-\t\t   && (tmp = NEXT_INSN (tmp)) != NULL_RTX\n-\t\t   && GET_CODE (tmp) == JUMP_INSN\n-\t\t   && (GET_CODE (PATTERN (tmp)) == ADDR_VEC\n-\t\t       || GET_CODE (PATTERN (tmp)) == ADDR_DIFF_VEC))\n+\t  /* Recognize a tablejump and do the right thing.  */\n+\t  else if (tablejump_p (insn, NULL, &tmp))\n \t    {\n \t      rtvec vec;\n \t      int j;"}, {"sha": "8ca6c41c3f21d639a43b0d2797f2e27ff702b27a", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5", "patch": "@@ -656,12 +656,7 @@ label_is_jump_target_p (label, jump_insn)\n   if (label == tmp)\n     return true;\n \n-  if (tmp != NULL_RTX\n-      && (tmp = NEXT_INSN (tmp)) != NULL_RTX\n-      && GET_CODE (tmp) == JUMP_INSN\n-      && (tmp = PATTERN (tmp),\n-\t  GET_CODE (tmp) == ADDR_VEC\n-\t  || GET_CODE (tmp) == ADDR_DIFF_VEC))\n+  if (tablejump_p (jump_insn, NULL, &tmp))\n     {\n       rtvec vec = XVEC (tmp, GET_CODE (tmp) == ADDR_DIFF_VEC);\n       int i, veclen = GET_NUM_ELEM (vec);"}, {"sha": "b5be7ca29b32f67a498149e8761cb091607f60bb", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5", "patch": "@@ -760,7 +760,6 @@ bool\n cfg_layout_can_duplicate_bb_p (bb)\n      basic_block bb;\n {\n-  rtx next;\n   edge s;\n \n   if (bb == EXIT_BLOCK_PTR || bb == ENTRY_BLOCK_PTR)\n@@ -775,11 +774,7 @@ cfg_layout_can_duplicate_bb_p (bb)\n   /* Do not attempt to duplicate tablejumps, as we need to unshare\n      the dispatch table.  This is difficult to do, as the instructions\n      computing jump destination may be hoisted outside the basic block.  */\n-  if (GET_CODE (bb->end) == JUMP_INSN && JUMP_LABEL (bb->end)\n-      && (next = next_nonnote_insn (JUMP_LABEL (bb->end)))\n-      && GET_CODE (next) == JUMP_INSN\n-      && (GET_CODE (PATTERN (next)) == ADDR_VEC\n-\t  || GET_CODE (PATTERN (next)) == ADDR_DIFF_VEC))\n+  if (tablejump_p (bb->end, NULL, NULL))\n     return false;\n \n   /* Do not duplicate blocks containing insns that can't be copied.  */"}, {"sha": "c7194b56c4a4e5ffd2c504655b946cdd81aaf027", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5", "patch": "@@ -383,12 +383,7 @@ flow_delete_block_noexpunge (b)\n \n   /* Include any jump table following the basic block.  */\n   end = b->end;\n-  if (GET_CODE (end) == JUMP_INSN\n-      && (tmp = JUMP_LABEL (end)) != NULL_RTX\n-      && (tmp = NEXT_INSN (tmp)) != NULL_RTX\n-      && GET_CODE (tmp) == JUMP_INSN\n-      && (GET_CODE (PATTERN (tmp)) == ADDR_VEC\n-\t  || GET_CODE (PATTERN (tmp)) == ADDR_DIFF_VEC))\n+  if (tablejump_p (end, NULL, &tmp))\n     end = tmp;\n \n   /* Include any barrier that may follow the basic block.  */\n@@ -674,7 +669,7 @@ try_redirect_by_replacing_jump (e, target)\n   basic_block src = e->src;\n   rtx insn = src->end, kill_from;\n   edge tmp;\n-  rtx set, table;\n+  rtx set;\n   int fallthru = 0;\n \n   /* Verify that all targets will be TARGET.  */\n@@ -684,11 +679,7 @@ try_redirect_by_replacing_jump (e, target)\n \n   if (tmp || !onlyjump_p (insn))\n     return false;\n-  if (flow2_completed && JUMP_LABEL (insn)\n-      && (table = NEXT_INSN (JUMP_LABEL (insn))) != NULL_RTX\n-      && GET_CODE (table) == JUMP_INSN\n-      && (GET_CODE (PATTERN (table)) == ADDR_VEC\n-\t  || GET_CODE (PATTERN (table)) == ADDR_DIFF_VEC))\n+  if ((!optimize || flow2_completed) && tablejump_p (insn, NULL, NULL))\n     return false;\n \n   /* Avoid removing branch with side effects.  */\n@@ -739,7 +730,7 @@ try_redirect_by_replacing_jump (e, target)\n   else\n     {\n       rtx target_label = block_label (target);\n-      rtx barrier, tmp;\n+      rtx barrier, label, table;\n \n       emit_jump_insn_after (gen_jump (target_label), insn);\n       JUMP_LABEL (src->end) = target_label;\n@@ -754,14 +745,8 @@ try_redirect_by_replacing_jump (e, target)\n       /* Recognize a tablejump that we are converting to a\n \t simple jump and remove its associated CODE_LABEL\n \t and ADDR_VEC or ADDR_DIFF_VEC.  */\n-      if ((tmp = JUMP_LABEL (insn)) != NULL_RTX\n-\t  && (tmp = NEXT_INSN (tmp)) != NULL_RTX\n-\t  && GET_CODE (tmp) == JUMP_INSN\n-\t  && (GET_CODE (PATTERN (tmp)) == ADDR_VEC\n-\t      || GET_CODE (PATTERN (tmp)) == ADDR_DIFF_VEC))\n-\t{\n-\t  delete_insn_chain (JUMP_LABEL (insn), tmp);\n-\t}\n+      if (tablejump_p (insn, &label, &table))\n+\tdelete_insn_chain (label, table);\n \n       barrier = next_nonnote_insn (src->end);\n       if (!barrier || GET_CODE (barrier) != BARRIER)\n@@ -854,11 +839,7 @@ redirect_edge_and_branch (e, target)\n     return false;\n \n   /* Recognize a tablejump and adjust all matching cases.  */\n-  if ((tmp = JUMP_LABEL (insn)) != NULL_RTX\n-      && (tmp = NEXT_INSN (tmp)) != NULL_RTX\n-      && GET_CODE (tmp) == JUMP_INSN\n-      && (GET_CODE (PATTERN (tmp)) == ADDR_VEC\n-\t  || GET_CODE (PATTERN (tmp)) == ADDR_DIFF_VEC))\n+  if (tablejump_p (insn, NULL, &tmp))\n     {\n       rtvec vec;\n       int j;"}, {"sha": "94eb8d0018806c9ca9a8e0b61344958d1a1606bd", "filename": "gcc/cse.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5", "patch": "@@ -3352,17 +3352,11 @@ fold_rtx (x, insn)\n       /* If the next insn is a CODE_LABEL followed by a jump table,\n \t PC's value is a LABEL_REF pointing to that label.  That\n \t lets us fold switch statements on the VAX.  */\n-      if (insn && GET_CODE (insn) == JUMP_INSN)\n-\t{\n-\t  rtx next = next_nonnote_insn (insn);\n-\n-\t  if (next && GET_CODE (next) == CODE_LABEL\n-\t      && NEXT_INSN (next) != 0\n-\t      && GET_CODE (NEXT_INSN (next)) == JUMP_INSN\n-\t      && (GET_CODE (PATTERN (NEXT_INSN (next))) == ADDR_VEC\n-\t\t  || GET_CODE (PATTERN (NEXT_INSN (next))) == ADDR_DIFF_VEC))\n-\t    return gen_rtx_LABEL_REF (Pmode, next);\n-\t}\n+      {\n+\trtx next;\n+\tif (tablejump_p (insn, &next, NULL))\n+\t  return gen_rtx_LABEL_REF (Pmode, next);\n+      }\n       break;\n \n     case SUBREG:"}, {"sha": "6e0479081581193ee679bea570eb496ecd9c6439", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5", "patch": "@@ -1757,10 +1757,7 @@ delete_related_insns (insn)\n \t    next = NEXT_INSN (next);\n \t  return next;\n \t}\n-      else if ((lab_next = next_nonnote_insn (lab)) != NULL\n-\t       && GET_CODE (lab_next) == JUMP_INSN\n-\t       && (GET_CODE (PATTERN (lab_next)) == ADDR_VEC\n-\t\t   || GET_CODE (PATTERN (lab_next)) == ADDR_DIFF_VEC))\n+      else if (tablejump_p (insn, NULL, &lab_next))\n \t{\n \t  /* If we're deleting the tablejump, delete the dispatch table.\n \t     We may not be able to kill the label immediately preceding"}, {"sha": "f7923c2a87dbea55087c0498834e7c67cc1c25e3", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5", "patch": "@@ -466,13 +466,7 @@ get_jump_table_offset (insn, earliest)\n   rtx old_y;\n   int i;\n \n-  if (GET_CODE (insn) != JUMP_INSN\n-      || ! (label = JUMP_LABEL (insn))\n-      || ! (table = NEXT_INSN (label))\n-      || GET_CODE (table) != JUMP_INSN\n-      || (GET_CODE (PATTERN (table)) != ADDR_VEC\n-\t  && GET_CODE (PATTERN (table)) != ADDR_DIFF_VEC)\n-      || ! (set = single_set (insn)))\n+  if (!tablejump_p (insn, &label, &table) || !(set = single_set (insn)))\n     return NULL_RTX;\n \n   x = SET_SRC (set);"}, {"sha": "abd557e3242576c07df2934a18b62efc85875221", "filename": "gcc/ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5/gcc%2Fssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5/gcc%2Fssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa-ccp.c?ref=e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5", "patch": "@@ -948,12 +948,7 @@ ssa_ccp_df_delete_unreachable_insns ()\n \n \t  /* Include any jump table following the basic block.  */\n \t  end = b->end;\n-\t  if (GET_CODE (end) == JUMP_INSN\n-\t      && (tmp = JUMP_LABEL (end)) != NULL_RTX\n-\t      && (tmp = NEXT_INSN (tmp)) != NULL_RTX\n-\t      && GET_CODE (tmp) == JUMP_INSN\n-\t      && (GET_CODE (PATTERN (tmp)) == ADDR_VEC\n-\t          || GET_CODE (PATTERN (tmp)) == ADDR_DIFF_VEC))\n+\t  if (tablejump_p (end, NULL, &tmp))\n \t    end = tmp;\n \n \t  while (1)"}]}