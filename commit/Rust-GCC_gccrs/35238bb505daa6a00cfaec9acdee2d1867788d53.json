{"sha": "35238bb505daa6a00cfaec9acdee2d1867788d53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUyMzhiYjUwNWRhYTZhMDBjZmFlYzlhY2RlZTJkMTg2Nzc4OGQ1Mw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-04-01T17:36:24Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-04-01T17:36:24Z"}, "message": "sync.md (UNSPEC_MOVA): Remove.\n\n\t* config/i386/sync.md (UNSPEC_MOVA): Remove.\n\t(atomic_load<mode>): Change operand 0 predicate to\n\tnonimmediate_operand and fix up the destination when needed.\n\tUse UNSPEC_LDA.\n\t(atomic_loaddi_fpu): Use UNSPEC_LDA.\n\t(atomic_store<mode>): Change operand 1 predicate to\n\tnonimmendate_operand and move the source to register when needed.\n\tUse UNSPEC_STA.\n\t(atomic_store<mode>_1): Use UNSPEC_STA.\n\t(atomic_storedi_fpu): Change operand 1 to nonimmediate_operand.\n\tFix moves from memory operand.  Use UNSPEC_STA.\n\nFrom-SVN: r221811", "tree": {"sha": "74f4612e2c9894fb6ae621deb44775d526db9c32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74f4612e2c9894fb6ae621deb44775d526db9c32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35238bb505daa6a00cfaec9acdee2d1867788d53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35238bb505daa6a00cfaec9acdee2d1867788d53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35238bb505daa6a00cfaec9acdee2d1867788d53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35238bb505daa6a00cfaec9acdee2d1867788d53/comments", "author": null, "committer": null, "parents": [{"sha": "f87cb0b73403b26113c52b5efa70e93332053dfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f87cb0b73403b26113c52b5efa70e93332053dfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f87cb0b73403b26113c52b5efa70e93332053dfe"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "e2e8b555d976a7fb6f2d2b46e7efbfb770effc29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35238bb505daa6a00cfaec9acdee2d1867788d53/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35238bb505daa6a00cfaec9acdee2d1867788d53/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35238bb505daa6a00cfaec9acdee2d1867788d53", "patch": "@@ -1,3 +1,17 @@\n+2015-04-01  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sync.md (UNSPEC_MOVA): Remove.\n+\t(atomic_load<mode>): Change operand 0 predicate to\n+\tnonimmediate_operand and fix up the destination when needed.\n+\tUse UNSPEC_LDA.\n+\t(atomic_loaddi_fpu): Use UNSPEC_LDA.\n+\t(atomic_store<mode>): Change operand 1 predicate to\n+\tnonimmendate_operand and move the source to register when needed.\n+\tUse UNSPEC_STA.\n+\t(atomic_store<mode>_1): Use UNSPEC_STA.\n+\t(atomic_storedi_fpu): Change operand 1 to nonimmediate_operand.\n+\tFix moves from memory operand.  Use UNSPEC_STA.\n+\n 2015-04-01  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* expmed.c (strict_volatile_bitfield_p): Check that the access will\n@@ -8,8 +22,8 @@\n 2015-04-01  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n \n \tPR target/65624\n-\t* config/aarch64/aarch64-builtins.c (aarch64_simd_expand_builtin): Increase\n-\targs array size by one to avoid buffer overflow.\n+\t* config/aarch64/aarch64-builtins.c (aarch64_simd_expand_builtin):\n+\tIncrease args array size by one to avoid buffer overflow.\n \n 2015-03-31  Jan Hubicka  <hubicka@ucw.cz>\n "}, {"sha": "3ef580be94dd26b0cebc9b40c000d3433b2df04f", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35238bb505daa6a00cfaec9acdee2d1867788d53/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35238bb505daa6a00cfaec9acdee2d1867788d53/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=35238bb505daa6a00cfaec9acdee2d1867788d53", "patch": "@@ -21,7 +21,8 @@\n   UNSPEC_LFENCE\n   UNSPEC_SFENCE\n   UNSPEC_MFENCE\n-  UNSPEC_MOVA\t; For __atomic support\n+\n+  ;; __atomic support\n   UNSPEC_LDA\n   UNSPEC_STA\n ])\n@@ -140,10 +141,10 @@\n    ])\n \n (define_expand \"atomic_load<mode>\"\n-  [(set (match_operand:ATOMIC 0 \"register_operand\")\n+  [(set (match_operand:ATOMIC 0 \"nonimmediate_operand\")\n \t(unspec:ATOMIC [(match_operand:ATOMIC 1 \"memory_operand\")\n \t\t\t(match_operand:SI 2 \"const_int_operand\")]\n-\t\t       UNSPEC_MOVA))]\n+\t\t       UNSPEC_LDA))]\n   \"\"\n {\n   /* For DImode on 32-bit, we can use the FPU to perform the load.  */\n@@ -152,14 +153,25 @@\n \t       (operands[0], operands[1],\n \t        assign_386_stack_local (DImode, SLOT_TEMP)));\n   else\n-    emit_move_insn (operands[0], operands[1]);\n+    {\n+      rtx dst = operands[0];\n+\n+      if (MEM_P (dst))\n+\tdst = gen_reg_rtx (<MODE>mode);\n+\n+      emit_move_insn (dst, operands[1]);\n+\n+      /* Fix up the destination if needed.  */\n+      if (dst != operands[0])\n+\temit_move_insn (operands[0], dst);\n+    }\n   DONE;\n })\n \n (define_insn_and_split \"atomic_loaddi_fpu\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=x,m,?r\")\n \t(unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m,m,m\")]\n-\t\t   UNSPEC_MOVA))\n+\t\t   UNSPEC_LDA))\n    (clobber (match_operand:DI 2 \"memory_operand\" \"=X,X,m\"))\n    (clobber (match_scratch:DF 3 \"=X,xf,xf\"))]\n   \"!TARGET_64BIT && (TARGET_80387 || TARGET_SSE)\"\n@@ -197,9 +209,9 @@\n \n (define_expand \"atomic_store<mode>\"\n   [(set (match_operand:ATOMIC 0 \"memory_operand\")\n-\t(unspec:ATOMIC [(match_operand:ATOMIC 1 \"register_operand\")\n+\t(unspec:ATOMIC [(match_operand:ATOMIC 1 \"nonimmediate_operand\")\n \t\t\t(match_operand:SI 2 \"const_int_operand\")]\n-\t\t       UNSPEC_MOVA))]\n+\t\t       UNSPEC_STA))]\n   \"\"\n {\n   enum memmodel model = (enum memmodel) (INTVAL (operands[2]) & MEMMODEL_MASK);\n@@ -215,6 +227,8 @@\n     }\n   else\n     {\n+      operands[1] = force_reg (<MODE>mode, operands[1]);\n+\n       /* For seq-cst stores, when we lack MFENCE, use XCHG.  */\n       if (model == MEMMODEL_SEQ_CST && !(TARGET_64BIT || TARGET_SSE2))\n \t{\n@@ -238,14 +252,14 @@\n   [(set (match_operand:SWI 0 \"memory_operand\" \"=m\")\n \t(unspec:SWI [(match_operand:SWI 1 \"<nonmemory_operand>\" \"<r><i>\")\n \t\t     (match_operand:SI 2 \"const_int_operand\")]\n-\t\t    UNSPEC_MOVA))]\n+\t\t    UNSPEC_STA))]\n   \"\"\n   \"%K2mov{<imodesuffix>}\\t{%1, %0|%0, %1}\")\n \n (define_insn_and_split \"atomic_storedi_fpu\"\n   [(set (match_operand:DI 0 \"memory_operand\" \"=m,m,m\")\n-\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"x,m,?r\")]\n-\t\t   UNSPEC_MOVA))\n+\t(unspec:DI [(match_operand:DI 1 \"nonimmediate_operand\" \"x,m,?r\")]\n+\t\t   UNSPEC_STA))\n    (clobber (match_operand:DI 2 \"memory_operand\" \"=X,X,m\"))\n    (clobber (match_scratch:DF 3 \"=X,xf,xf\"))]\n   \"!TARGET_64BIT && (TARGET_80387 || TARGET_SSE)\"\n@@ -273,7 +287,7 @@\n       else\n \t{\n \t  adjust_reg_mode (tmp, DImode);\n-\t  emit_move_insn (tmp, mem);\n+\t  emit_move_insn (tmp, src);\n \t  src = tmp;\n \t}\n     }"}]}