{"sha": "67340b0310b5f62fe9e6ff0316cf8cbe556278d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjczNDBiMDMxMGI1ZjYyZmU5ZTZmZjAzMTZjZjhjYmU1NTYyNzhkMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-08-26T10:56:12Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-08-26T10:56:12Z"}, "message": "(push_secondary_reload): If X is a paradoxical SUBREG, get mode and\nthing to reload from inside.\n\nFrom-SVN: r10283", "tree": {"sha": "a7250e4e0257c92dbe0df2e4b2adcd5e6ab9fa71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7250e4e0257c92dbe0df2e4b2adcd5e6ab9fa71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67340b0310b5f62fe9e6ff0316cf8cbe556278d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67340b0310b5f62fe9e6ff0316cf8cbe556278d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67340b0310b5f62fe9e6ff0316cf8cbe556278d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67340b0310b5f62fe9e6ff0316cf8cbe556278d1/comments", "author": null, "committer": null, "parents": [{"sha": "e5cfb88fc9232c09e0578ee2d72e9b74dc2b6ba4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5cfb88fc9232c09e0578ee2d72e9b74dc2b6ba4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5cfb88fc9232c09e0578ee2d72e9b74dc2b6ba4"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "4f0a9ae2cf876bb84df6427ee255214be1fd5c10", "filename": "gcc/reload.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67340b0310b5f62fe9e6ff0316cf8cbe556278d1/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67340b0310b5f62fe9e6ff0316cf8cbe556278d1/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=67340b0310b5f62fe9e6ff0316cf8cbe556278d1", "patch": "@@ -356,6 +356,16 @@ push_secondary_reload (in_p, x, opnum, optional, reload_class, reload_mode,\n \n   *picode = CODE_FOR_nothing;\n \n+  /* If X is a paradoxical SUBREG, use the inner value to determine both the\n+     mode and object being reloaded.  */\n+  if (GET_CODE (x) == SUBREG\n+      && (GET_MODE_SIZE (GET_MODE (x))\n+\t  > GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)))))\n+    {\n+      x = SUBREG_REG (x);\n+      reload_mode = GET_MODE (x);\n+    }\n+\n   /* If X is a pseudo-register that has an equivalent MEM (actually, if it\n      is still a pseudo-register by now, it *must* have an equivalent MEM\n      but we don't want to assume that), use that equivalent when seeing if"}]}