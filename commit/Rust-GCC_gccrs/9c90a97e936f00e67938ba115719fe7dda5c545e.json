{"sha": "9c90a97e936f00e67938ba115719fe7dda5c545e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM5MGE5N2U5MzZmMDBlNjc5MzhiYTExNTcxOWZlN2RkYTVjNTQ1ZQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2005-03-09T22:05:15Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-03-09T22:05:15Z"}, "message": "s390.c (s390_secondary_output_reload_class): Adapt check for non-offsettable memory references to cope with outstanding...\n\n\n\t* config/s390/s390.c (s390_secondary_output_reload_class): Adapt check\n\tfor non-offsettable memory references to cope with outstanding reload\n\treplacements.\n\t* config/s390/s390.md (\"reload_outti\"): Call find_replacement to\n\tavoid losing outstanding address reloads.\n\t(\"reload_outdi\", \"reload_outdf\"): Likewise.\n\ntestsuite/ChangeLog:\n\n\t* gcc.dg/20050309-1.c: New test.\n\nFrom-SVN: r96214", "tree": {"sha": "56c006a0cbf0b0960bd6af36008012859012f8b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56c006a0cbf0b0960bd6af36008012859012f8b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c90a97e936f00e67938ba115719fe7dda5c545e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c90a97e936f00e67938ba115719fe7dda5c545e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c90a97e936f00e67938ba115719fe7dda5c545e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c90a97e936f00e67938ba115719fe7dda5c545e/comments", "author": null, "committer": null, "parents": [{"sha": "6af8bd502d0da8302ce87d178c27b8dbc054396a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af8bd502d0da8302ce87d178c27b8dbc054396a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6af8bd502d0da8302ce87d178c27b8dbc054396a"}], "stats": {"total": 64, "additions": 59, "deletions": 5}, "files": [{"sha": "421d5c04403d41eceab3d71572fcc7b393f0ec36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c90a97e936f00e67938ba115719fe7dda5c545e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c90a97e936f00e67938ba115719fe7dda5c545e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c90a97e936f00e67938ba115719fe7dda5c545e", "patch": "@@ -1,3 +1,12 @@\n+2005-03-09  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390.c (s390_secondary_output_reload_class): Adapt check\n+\tfor non-offsettable memory references to cope with outstanding reload\n+\treplacements.\n+\t* config/s390/s390.md (\"reload_outti\"): Call find_replacement to\n+\tavoid losing outstanding address reloads.\n+\t(\"reload_outdi\", \"reload_outdf\"): Likewise.\n+\n 2005-03-09  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtins.c (fold_builtin_cbrt, fold_builtin_pow): Rearrange"}, {"sha": "3358f28909bd41c54e5d298d4ea2993c0096089f", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c90a97e936f00e67938ba115719fe7dda5c545e/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c90a97e936f00e67938ba115719fe7dda5c545e/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=9c90a97e936f00e67938ba115719fe7dda5c545e", "patch": "@@ -2553,12 +2553,16 @@ enum reg_class\n s390_secondary_output_reload_class (enum reg_class class,\n \t\t\t\t    enum machine_mode mode, rtx out)\n {\n+  struct s390_address addr;\n+\n   if ((TARGET_64BIT ? mode == TImode\n                     : (mode == DImode || mode == DFmode))\n       && reg_classes_intersect_p (GENERAL_REGS, class)\n       && GET_CODE (out) == MEM\n-      && !offsettable_memref_p (out)\n-      && !s_operand (out, VOIDmode))\n+      && s390_decompose_address (XEXP (out, 0), &addr)\n+      && addr.base && addr.indx\n+      && addr.disp && GET_CODE (addr.disp) == CONST_INT\n+      && !DISP_IN_RANGE (INTVAL (addr.disp) + GET_MODE_SIZE (mode) - 1))\n     return ADDR_REGS;\n \n   if (reg_classes_intersect_p (CC_REGS, class))"}, {"sha": "5bb9d4c24aa779a42fc390d125b2477549115409", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c90a97e936f00e67938ba115719fe7dda5c545e/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c90a97e936f00e67938ba115719fe7dda5c545e/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=9c90a97e936f00e67938ba115719fe7dda5c545e", "patch": "@@ -833,7 +833,7 @@\n   \"TARGET_64BIT\"\n {\n   gcc_assert (MEM_P (operands[0]));\n-  s390_load_address (operands[2], XEXP (operands[0], 0));\n+  s390_load_address (operands[2], find_replacement (&XEXP (operands[0], 0)));\n   operands[0] = replace_equiv_address (operands[0], operands[2]);\n   emit_move_insn (operands[0], operands[1]);\n   DONE;\n@@ -992,7 +992,7 @@\n   \"!TARGET_64BIT\"\n {\n   gcc_assert (MEM_P (operands[0]));\n-  s390_load_address (operands[2], XEXP (operands[0], 0));\n+  s390_load_address (operands[2], find_replacement (&XEXP (operands[0], 0)));\n   operands[0] = replace_equiv_address (operands[0], operands[2]);\n   emit_move_insn (operands[0], operands[1]);\n   DONE;\n@@ -1451,7 +1451,7 @@\n   \"!TARGET_64BIT\"\n {\n   gcc_assert (MEM_P (operands[0]));\n-  s390_load_address (operands[2], XEXP (operands[0], 0));\n+  s390_load_address (operands[2], find_replacement (&XEXP (operands[0], 0)));\n   operands[0] = replace_equiv_address (operands[0], operands[2]);\n   emit_move_insn (operands[0], operands[1]);\n   DONE;"}, {"sha": "2f2a43171e8b34481f79674bc004cd44a3a05dda", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c90a97e936f00e67938ba115719fe7dda5c545e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c90a97e936f00e67938ba115719fe7dda5c545e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c90a97e936f00e67938ba115719fe7dda5c545e", "patch": "@@ -1,3 +1,7 @@\n+2005-03-09  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* gcc.dg/20050309-1.c: New test.\n+\n 2005-03-09  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/builtins-10.c: Reactivate disabled test."}, {"sha": "413930f86f86c2a22bd72ecf501545561ca81b0b", "filename": "gcc/testsuite/gcc.dg/20050309-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c90a97e936f00e67938ba115719fe7dda5c545e/gcc%2Ftestsuite%2Fgcc.dg%2F20050309-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c90a97e936f00e67938ba115719fe7dda5c545e/gcc%2Ftestsuite%2Fgcc.dg%2F20050309-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20050309-1.c?ref=9c90a97e936f00e67938ba115719fe7dda5c545e", "patch": "@@ -0,0 +1,37 @@\n+/* This caused an ICE on s390 due to incorrect secondary\n+   output reloads.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fprofile-generate\" } */\n+\n+char *\n+test(char *ret, int *counter, void *schema,\n+     const char* name, const char *namespace,\n+     void *node, int topLevel)\n+{\n+  char buf[30];\n+  int val;\n+\n+  if (counter == 0) return 0;\n+  if (schema == 0) return 0;\n+  if (name == 0) return 0;\n+\n+  __builtin_memset (ret, 0, 100);\n+  lookup (schema, name, -1);\n+  val = hash (schema, name, namespace, name, ret);\n+  if (val == 0) return ret;\n+\n+  if (topLevel != 0)\n+    {\n+      error (1, 0, 0, node, \"%s\", name);\n+      return 0;\n+    }\n+\n+  __snprintf_chk (buf, 29, 1, 30, \"#eCont %d\", ++*counter);\n+  val = hash (schema, name, buf, namespace, ret);\n+  if (val == 0) return ret;\n+\n+  error (1, 0, 0, node, \"%s\", name);\n+  return 0;\n+}\n+"}]}