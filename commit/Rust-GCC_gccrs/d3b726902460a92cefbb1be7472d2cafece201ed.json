{"sha": "d3b726902460a92cefbb1be7472d2cafece201ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNiNzI2OTAyNDYwYTkyY2VmYmIxYmU3NDcyZDJjYWZlY2UyMDFlZA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2006-02-28T20:32:20Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2006-02-28T20:32:20Z"}, "message": "rtl.h (truncated_to_mode): Declare it.\n\n\t* rtl.h (truncated_to_mode): Declare it.\n\t(struct rtl_hooks): Add reg_truncated_to_mode hook.\n\t* rtlhooks-def.h (RTL_HOOKS_REG_TRUNCATED_TO_MODE): New macro.\n\t(RTL_HOOKS_INITIALIZER): Include it.\n\t* rtlhooks.c (reg_truncated_to_mode_general): New function.\n\t* combine.c (RTL_HOOKS_REG_TRUNCATED_TO_MODE): Override to\n\treg_truncated_to_mode.\n\t* rtlanal.c (truncated_to_mode): Define it.\n\t* simplify-rtx.c (simplify_unary_operation_1): Use it.\n\nCo-Authored-By: Adam Nemet <anemet@caviumnetworks.com>\n\nFrom-SVN: r111573", "tree": {"sha": "b59a2ff0c0c65abbe656b96ae1d8a37028083f6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b59a2ff0c0c65abbe656b96ae1d8a37028083f6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3b726902460a92cefbb1be7472d2cafece201ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3b726902460a92cefbb1be7472d2cafece201ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3b726902460a92cefbb1be7472d2cafece201ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3b726902460a92cefbb1be7472d2cafece201ed/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e5c7f9f582b4148974efae8c9289652601909753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5c7f9f582b4148974efae8c9289652601909753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5c7f9f582b4148974efae8c9289652601909753"}], "stats": {"total": 57, "additions": 49, "deletions": 8}, "files": [{"sha": "d37067c114234c635a980c48f288896d412b3c9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3b726902460a92cefbb1be7472d2cafece201ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3b726902460a92cefbb1be7472d2cafece201ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d3b726902460a92cefbb1be7472d2cafece201ed", "patch": "@@ -1,3 +1,16 @@\n+2006-02-28  Paolo Bonzini  <bonzini@gnu.org>\n+\t    Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* rtl.h (truncated_to_mode): Declare it.\n+\t(struct rtl_hooks): Add reg_truncated_to_mode hook.\n+\t* rtlhooks-def.h (RTL_HOOKS_REG_TRUNCATED_TO_MODE): New macro.\n+\t(RTL_HOOKS_INITIALIZER): Include it.\n+\t* rtlhooks.c (reg_truncated_to_mode_general): New function.\n+\t* combine.c (RTL_HOOKS_REG_TRUNCATED_TO_MODE): Override to\n+\treg_truncated_to_mode.\n+\t* rtlanal.c (truncated_to_mode): Define it.\n+\t* simplify-rtx.c (simplify_unary_operation_1): Use it.\n+\n 2006-02-28  Jeff Law  <law@redhat.com>\n \n \t* tree-chrec.c (chrec_convert_aggressive): Do not eliminate"}, {"sha": "32d3f67df4fc2d5c6f38be9ec9f3fbfbd50a718a", "filename": "gcc/combine.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3b726902460a92cefbb1be7472d2cafece201ed/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3b726902460a92cefbb1be7472d2cafece201ed/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=d3b726902460a92cefbb1be7472d2cafece201ed", "patch": "@@ -457,6 +457,9 @@ static rtx gen_lowpart_or_truncate (enum machine_mode, rtx);\n #undef RTL_HOOKS_REG_NUM_SIGN_BIT_COPIES\n #define RTL_HOOKS_REG_NUM_SIGN_BIT_COPIES  reg_num_sign_bit_copies_for_combine\n \n+#undef RTL_HOOKS_REG_TRUNCATED_TO_MODE\n+#define RTL_HOOKS_REG_TRUNCATED_TO_MODE    reg_truncated_to_mode\n+\n static const struct rtl_hooks combine_rtl_hooks = RTL_HOOKS_INITIALIZER;\n \n \f"}, {"sha": "9c088e92598d90875b91616d2669258485f0bed3", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3b726902460a92cefbb1be7472d2cafece201ed/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3b726902460a92cefbb1be7472d2cafece201ed/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=d3b726902460a92cefbb1be7472d2cafece201ed", "patch": "@@ -1047,6 +1047,7 @@ extern unsigned int subreg_regno (rtx);\n extern unsigned HOST_WIDE_INT nonzero_bits (rtx, enum machine_mode);\n extern unsigned int num_sign_bit_copies (rtx, enum machine_mode);\n extern bool constant_pool_constant_p (rtx);\n+extern bool truncated_to_mode (enum machine_mode, rtx);\n \n \n /* 1 if RTX is a subreg containing a reg that is already known to be\n@@ -2277,8 +2278,9 @@ struct rtl_hooks\n \t\t\t   unsigned HOST_WIDE_INT, unsigned HOST_WIDE_INT *);\n   rtx (*reg_num_sign_bit_copies) (rtx, enum machine_mode, rtx, enum machine_mode,\n \t\t\t\t  unsigned int, unsigned int *);\n+  bool (*reg_truncated_to_mode) (enum machine_mode, rtx);\n \n-  /* Whenever you add entries here, make sure you adjust hosthooks-def.h.  */\n+  /* Whenever you add entries here, make sure you adjust rtlhooks-def.h.  */\n };\n \n /* Each pass can provide its own.  */"}, {"sha": "bbf7e71bf736349f9dc4812a0675eee14a703913", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3b726902460a92cefbb1be7472d2cafece201ed/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3b726902460a92cefbb1be7472d2cafece201ed/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=d3b726902460a92cefbb1be7472d2cafece201ed", "patch": "@@ -4808,6 +4808,16 @@ get_condition (rtx jump, rtx *earliest, int allow_cc_mode, int valid_at_insn_p)\n \t\t\t\t allow_cc_mode, valid_at_insn_p);\n }\n \n+/* Suppose that truncation from the machine mode of X to MODE is not a\n+   no-op.  See if there is anything special about X so that we can\n+   assume it already contains a truncated value of MODE.  */\n+\n+bool\n+truncated_to_mode (enum machine_mode mode, rtx x)\n+{\n+  return REG_P (x) && rtl_hooks.reg_truncated_to_mode (mode, x);\n+}\n+\n \f\n /* Initialize non_rtx_starting_operands, which is used to speed up\n    for_each_rtx.  */"}, {"sha": "748666c2dd0d9d498bea22cc1f8349b5722f2a9a", "filename": "gcc/rtlhooks-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3b726902460a92cefbb1be7472d2cafece201ed/gcc%2Frtlhooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3b726902460a92cefbb1be7472d2cafece201ed/gcc%2Frtlhooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlhooks-def.h?ref=d3b726902460a92cefbb1be7472d2cafece201ed", "patch": "@@ -27,13 +27,15 @@ Boston, MA 02110-1301, USA.  */\n #define RTL_HOOKS_GEN_LOWPART_NO_EMIT gen_lowpart_no_emit_general\n #define RTL_HOOKS_REG_NONZERO_REG_BITS reg_nonzero_bits_general\n #define RTL_HOOKS_REG_NUM_SIGN_BIT_COPIES reg_num_sign_bit_copies_general\n+#define RTL_HOOKS_REG_TRUNCATED_TO_MODE reg_truncated_to_mode_general\n \n /* The structure is defined in rtl.h.  */\n #define RTL_HOOKS_INITIALIZER {\t\t\t\\\n   RTL_HOOKS_GEN_LOWPART,\t\t\t\\\n   RTL_HOOKS_GEN_LOWPART_NO_EMIT,\t\t\\\n   RTL_HOOKS_REG_NONZERO_REG_BITS,\t\t\\\n   RTL_HOOKS_REG_NUM_SIGN_BIT_COPIES,\t\t\\\n+  RTL_HOOKS_REG_TRUNCATED_TO_MODE,\t\t\\\n }\n \n extern rtx gen_lowpart_general (enum machine_mode, rtx);\n@@ -45,5 +47,6 @@ extern rtx reg_nonzero_bits_general (rtx, enum machine_mode, rtx,\n extern rtx reg_num_sign_bit_copies_general (rtx, enum machine_mode, rtx,\n \t\t\t\t\t    enum machine_mode,\n \t\t\t\t\t    unsigned int, unsigned int *);\n+extern bool reg_truncated_to_mode_general (enum machine_mode, rtx);\n \n #endif /* GCC_RTL_HOOKS_DEF_H */"}, {"sha": "ece7198f9a2fc1a12130cfa7b104304a716131ca", "filename": "gcc/rtlhooks.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3b726902460a92cefbb1be7472d2cafece201ed/gcc%2Frtlhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3b726902460a92cefbb1be7472d2cafece201ed/gcc%2Frtlhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlhooks.c?ref=d3b726902460a92cefbb1be7472d2cafece201ed", "patch": "@@ -117,6 +117,13 @@ reg_nonzero_bits_general (rtx x ATTRIBUTE_UNUSED,\n   return NULL;\n }\n \n+bool\n+reg_truncated_to_mode_general (enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t       rtx x ATTRIBUTE_UNUSED)\n+{\n+  return false;\n+}\n+\n /* Assuming that X is an rtx (e.g., MEM, REG or SUBREG) for a fixed-point\n    number, return an rtx (MEM, SUBREG, or CONST_INT) that refers to the\n    least-significant part of X."}, {"sha": "aded68e52df9943dc33ed5a705e8f73e0bafa4a4", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3b726902460a92cefbb1be7472d2cafece201ed/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3b726902460a92cefbb1be7472d2cafece201ed/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=d3b726902460a92cefbb1be7472d2cafece201ed", "patch": "@@ -631,14 +631,17 @@ simplify_unary_operation_1 (enum rtx_code code, enum machine_mode mode, rtx op)\n \t\t\t\t   GET_MODE (XEXP (SUBREG_REG (op), 0)));\n \n       /* If we know that the value is already truncated, we can\n-         replace the TRUNCATE with a SUBREG if TRULY_NOOP_TRUNCATION\n-         is nonzero for the corresponding modes.  But don't do this\n-         for an (LSHIFTRT (MULT ...)) since this will cause problems\n-         with the umulXi3_highpart patterns.  */\n-      if (TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (mode),\n+         replace the TRUNCATE with a SUBREG.  Note that this is also\n+         valid if TRULY_NOOP_TRUNCATION is false for the corresponding\n+         modes we just have to apply a different definition for\n+         truncation.  But don't do this for an (LSHIFTRT (MULT ...)) \n+         since this will cause problems with the umulXi3_highpart\n+         patterns.  */\n+      if ((TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (mode),\n \t\t\t\t GET_MODE_BITSIZE (GET_MODE (op)))\n-\t  && num_sign_bit_copies (op, GET_MODE (op))\n-\t     >= (unsigned int) (GET_MODE_BITSIZE (mode) + 1)\n+\t   ? (num_sign_bit_copies (op, GET_MODE (op))\n+\t      >= (unsigned int) (GET_MODE_BITSIZE (mode) + 1))\n+\t   : truncated_to_mode (mode, op))\n \t  && ! (GET_CODE (op) == LSHIFTRT\n \t\t&& GET_CODE (XEXP (op, 0)) == MULT))\n \treturn rtl_hooks.gen_lowpart_no_emit (mode, op);"}]}