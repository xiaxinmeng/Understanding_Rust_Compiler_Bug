{"sha": "1d5c46dc84de0ede6101ea332d0709e3f543baee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ1YzQ2ZGM4NGRlMGVkZTYxMDFlYTMzMmQwNzA5ZTNmNTQzYmFlZQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2003-01-04T03:53:00Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2003-01-04T03:53:00Z"}, "message": "FileDescriptor.java (position): New private field.\n\n        * java/io/FileDescriptor.java (position): New private field.\n        * java/io/natFileDescriptorPosix.cc (write): Up position.\n        (setLength): Use and set position.\n        (seek): Set position.\n        (getFilePointer): Return position.\n        (read): Up position.\n\nFrom-SVN: r60869", "tree": {"sha": "811a371fe09b7145653683c7fcbae2efc3991a98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/811a371fe09b7145653683c7fcbae2efc3991a98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d5c46dc84de0ede6101ea332d0709e3f543baee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d5c46dc84de0ede6101ea332d0709e3f543baee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d5c46dc84de0ede6101ea332d0709e3f543baee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d5c46dc84de0ede6101ea332d0709e3f543baee/comments", "author": null, "committer": null, "parents": [{"sha": "3aa0cc4e82a3f0455704a262e0b715f127ca019b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aa0cc4e82a3f0455704a262e0b715f127ca019b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aa0cc4e82a3f0455704a262e0b715f127ca019b"}], "stats": {"total": 63, "additions": 42, "deletions": 21}, "files": [{"sha": "221fa2100e34bc7b391c83431a2935b5d300d4f6", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5c46dc84de0ede6101ea332d0709e3f543baee/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5c46dc84de0ede6101ea332d0709e3f543baee/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1d5c46dc84de0ede6101ea332d0709e3f543baee", "patch": "@@ -1,3 +1,12 @@\n+2003-01-03  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/io/FileDescriptor.java (position): New private field.\n+\t* java/io/natFileDescriptorPosix.cc (write): Up position.\n+\t(setLength): Use and set position.\n+\t(seek): Set position.\n+\t(getFilePointer): Return position.\n+\t(read): Up position.\n+\n 2003-01-03  Mark Wielaard  <mark@klomp.org>\n \n \tMerge with Classpath:"}, {"sha": "f105c6f8ab0576e849438d2710e999238e328efc", "filename": "libjava/java/io/FileDescriptor.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5c46dc84de0ede6101ea332d0709e3f543baee/libjava%2Fjava%2Fio%2FFileDescriptor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5c46dc84de0ede6101ea332d0709e3f543baee/libjava%2Fjava%2Fio%2FFileDescriptor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileDescriptor.java?ref=1d5c46dc84de0ede6101ea332d0709e3f543baee", "patch": "@@ -1,6 +1,6 @@\n // FileDescriptor.java - Open file or device\n \n-/* Copyright (C) 1998, 1999, 2000, 2001, 2002  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -101,4 +101,6 @@ protected void finalize () throws IOException\n   // we want to make sure this has the value -1.  This is the most\n   // efficient way to accomplish that.\n   private int fd = -1;\n+\n+  private long position = 0;\n }"}, {"sha": "e8ec9a7e733b9d8f856fec2246c3046f0013830f", "filename": "libjava/java/io/natFileDescriptorPosix.cc", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5c46dc84de0ede6101ea332d0709e3f543baee/libjava%2Fjava%2Fio%2FnatFileDescriptorPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5c46dc84de0ede6101ea332d0709e3f543baee/libjava%2Fjava%2Fio%2FnatFileDescriptorPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFileDescriptorPosix.cc?ref=1d5c46dc84de0ede6101ea332d0709e3f543baee", "patch": "@@ -1,6 +1,6 @@\n // natFileDescriptor.cc - Native part of FileDescriptor class.\n \n-/* Copyright (C) 1998, 1999, 2000, 2001, 2002  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -147,6 +147,7 @@ java::io::FileDescriptor::write (jint b)\n \t  throw new IOException (JvNewStringLatin1 (strerror (errno)));\n \t}\n     }\n+  position++;\n }\n \n void\n@@ -177,6 +178,7 @@ java::io::FileDescriptor::write (jbyteArray b, jint offset, jint len)\n       written += r;\n       len -= r;\n       bytes += r;\n+      position += r;\n     }\n }\n \n@@ -193,7 +195,6 @@ void\n java::io::FileDescriptor::setLength (jlong pos)\n {\n   struct stat sb;\n-  off_t orig;\n \n #ifdef HAVE_FTRUNCATE\n   if (::fstat (fd, &sb))\n@@ -202,10 +203,6 @@ java::io::FileDescriptor::setLength (jlong pos)\n   if ((jlong) sb.st_size == pos) \n     return;\n \n-  orig = ::lseek (fd, (off_t) 0, SEEK_CUR);\n-  if (orig == -1)\n-    throw new IOException (JvNewStringLatin1 (strerror (errno)));\n-\n   // If the file is too short, we extend it.  We can't rely on\n   // ftruncate() extending the file.  So we lseek() to 1 byte less\n   // than we want, and then we write a single byte at the end.\n@@ -215,11 +212,15 @@ java::io::FileDescriptor::setLength (jlong pos)\n \tthrow new IOException (JvNewStringLatin1 (strerror (errno)));\n       char out = '\\0';\n       int r = ::write (fd, &out, 1);\n-      if (r <= 0 || ::lseek (fd, orig, SEEK_SET) == -1)\n+      if (r <= 0 || ::lseek (fd, position, SEEK_SET) == -1)\n \tthrow new IOException (JvNewStringLatin1 (strerror (errno)));\n     }\n-  else if (::ftruncate (fd, (off_t) pos))\n-    throw new IOException (JvNewStringLatin1 (strerror (errno)));\n+  else\n+    {\n+      if (::ftruncate (fd, (off_t) pos))\n+\tthrow new IOException (JvNewStringLatin1 (strerror (errno)));\n+      position = pos;\n+    }\n #else /* HAVE_FTRUNCATE */\n   throw new IOException (JvNewStringLatin1 (\"FileDescriptor.setLength not implemented\"));\n #endif /* HAVE_FTRUNCATE */\n@@ -230,19 +231,29 @@ java::io::FileDescriptor::seek (jlong pos, jint whence, jboolean eof_trunc)\n {\n   JvAssert (whence == SET || whence == CUR);\n \n-  jlong len = length ();\n-  jlong here = getFilePointer ();\n-\n-  if (eof_trunc\n-      && ((whence == SET && pos > len) || (whence == CUR && here + pos > len)))\n+  if (eof_trunc)\n     {\n-      whence = SET;\n-      pos = len;\n+      jlong len = length ();\n+      if (whence == SET)\n+\t{\n+\t  if (pos > len)\n+\t    pos = len;\n+\t}\n+      else\n+\t{\n+\t  jlong here = getFilePointer ();\n+\t  if (here + pos > len)\n+\t    {\n+\t      pos = len;\n+\t      whence = SET;\n+\t    }\n+\t}\n     }\n \n   off_t r = ::lseek (fd, (off_t) pos, whence == SET ? SEEK_SET : SEEK_CUR);\n   if (r == -1)\n     throw new IOException (JvNewStringLatin1 (strerror (errno)));\n+  position = r;\n   return r;\n }\n \n@@ -258,10 +269,7 @@ java::io::FileDescriptor::length (void)\n jlong\n java::io::FileDescriptor::getFilePointer (void)\n {\n-  off_t r = ::lseek (fd, 0, SEEK_CUR);\n-  if (r == -1)\n-    throw new IOException (JvNewStringLatin1 (strerror (errno)));\n-  return r;\n+  return position;\n }\n \n jint\n@@ -282,6 +290,7 @@ java::io::FileDescriptor::read (void)\n \t}\n       throw new IOException (JvNewStringLatin1 (strerror (errno)));\n     }\n+  position++;\n   return b & 0xFF;\n }\n \n@@ -313,6 +322,7 @@ java::io::FileDescriptor::read (jbyteArray buffer, jint offset, jint count)\n \t}\n       throw new IOException (JvNewStringLatin1 (strerror (errno)));\n     }\n+  position += r;\n   return r;\n }\n "}]}