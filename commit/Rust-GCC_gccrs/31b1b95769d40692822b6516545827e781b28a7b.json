{"sha": "31b1b95769d40692822b6516545827e781b28a7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFiMWI5NTc2OWQ0MDY5MjgyMmI2NTE2NTQ1ODI3ZTc4MWIyOGE3Yg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-11-30T16:51:54Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-11-30T16:51:54Z"}, "message": "method.c (do_build_copy_constructor): Preserve cv qualifications when accessing source object members.\n\ncp:\n\t* method.c (do_build_copy_constructor): Preserve cv\n\tqualifications when accessing source object members.\n\t(do_build_assign_ref): Likewise. Remove separate diagnostics for\n\tunnamed fields.\ntestsuite:\n\t* g++.old-deja/g++.other/op3.C: New test.\n\nFrom-SVN: r37896", "tree": {"sha": "446d4fb260622f5bf21fc136f96641455eac063d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/446d4fb260622f5bf21fc136f96641455eac063d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31b1b95769d40692822b6516545827e781b28a7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31b1b95769d40692822b6516545827e781b28a7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31b1b95769d40692822b6516545827e781b28a7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31b1b95769d40692822b6516545827e781b28a7b/comments", "author": null, "committer": null, "parents": [{"sha": "039df8c7c71068e2ace9d1f8e8b26b8413b8c271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/039df8c7c71068e2ace9d1f8e8b26b8413b8c271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/039df8c7c71068e2ace9d1f8e8b26b8413b8c271"}], "stats": {"total": 97, "additions": 85, "deletions": 12}, "files": [{"sha": "8c3934fca20b724285185c6b9838b9c912110b48", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b1b95769d40692822b6516545827e781b28a7b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b1b95769d40692822b6516545827e781b28a7b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=31b1b95769d40692822b6516545827e781b28a7b", "patch": "@@ -1,3 +1,10 @@\n+2000-11-30  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* method.c (do_build_copy_constructor): Preserve cv\n+\tqualifications when accessing source object members.\n+\t(do_build_assign_ref): Likewise. Remove separate diagnostics for\n+\tunnamed fields.\n+\n 2000-11-30  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* method.c (do_build_assign_ref): Construct appropriately"}, {"sha": "4f2e58d463d9bf638e1e9c19f941baec38ebf651", "filename": "gcc/cp/method.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b1b95769d40692822b6516545827e781b28a7b/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b1b95769d40692822b6516545827e781b28a7b/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=31b1b95769d40692822b6516545827e781b28a7b", "patch": "@@ -2341,6 +2341,7 @@ do_build_copy_constructor (fndecl)\n       tree binfos = TYPE_BINFO_BASETYPES (current_class_type);\n       tree member_init_list = NULL_TREE;\n       tree base_init_list = NULL_TREE;\n+      int cvquals = CP_TYPE_QUALS (TREE_TYPE (parm));\n       int i;\n \n       /* Initialize all the base-classes.  */\n@@ -2387,7 +2388,9 @@ do_build_copy_constructor (fndecl)\n \t  else\n \t    continue;\n \n-\t  init = build (COMPONENT_REF, TREE_TYPE (field), init, field);\n+\t  init = build (COMPONENT_REF,\n+\t                build_qualified_type (TREE_TYPE (field), cvquals),\n+\t                init, field);\n \t  init = build_tree_list (NULL_TREE, init);\n \n \t  member_init_list\n@@ -2423,13 +2426,13 @@ do_build_assign_ref (fndecl)\n       tree fields = TYPE_FIELDS (current_class_type);\n       int n_bases = CLASSTYPE_N_BASECLASSES (current_class_type);\n       tree binfos = TYPE_BINFO_BASETYPES (current_class_type);\n+      int cvquals = CP_TYPE_QUALS (TREE_TYPE (parm));\n       int i;\n \n       for (i = 0; i < n_bases; ++i)\n \t{\n \t  tree basetype = BINFO_TYPE (TREE_VEC_ELT (binfos, i));\n-\t  tree p = build_qualified_type\n-\t      (basetype, CP_TYPE_QUALS (TREE_TYPE (parm)));\n+\t  tree p = build_qualified_type (basetype, cvquals);\n \n \t  p = convert_to_reference\n \t    (build_reference_type (p), parm,\n@@ -2449,18 +2452,12 @@ do_build_assign_ref (fndecl)\n \n \t  if (CP_TYPE_CONST_P (TREE_TYPE (field)))\n \t    {\n-\t      if (DECL_NAME (field))\n-\t\tcp_error (\"non-static const member `%#D', can't use default assignment operator\", field);\n-\t      else\n-\t\tcp_error (\"non-static const member in type `%T', can't use default assignment operator\", current_class_type);\n+              cp_error (\"non-static const member `%#D', can't use default assignment operator\", field);\n \t      continue;\n \t    }\n \t  else if (TREE_CODE (TREE_TYPE (field)) == REFERENCE_TYPE)\n \t    {\n-\t      if (DECL_NAME (field))\n-\t\tcp_error (\"non-static reference member `%#D', can't use default assignment operator\", field);\n-\t      else\n-\t\tcp_error (\"non-static reference member in type `%T', can't use default assignment operator\", current_class_type);\n+\t      cp_error (\"non-static reference member `%#D', can't use default assignment operator\", field);\n \t      continue;\n \t    }\n \n@@ -2487,7 +2484,9 @@ do_build_assign_ref (fndecl)\n \t    continue;\n \n \t  comp = build (COMPONENT_REF, TREE_TYPE (field), comp, field);\n-\t  init = build (COMPONENT_REF, TREE_TYPE (field), init, field);\n+\t  init = build (COMPONENT_REF,\n+\t                build_qualified_type (TREE_TYPE (field), cvquals),\n+\t                init, field);\n \n \t  finish_expr_stmt (build_modify_expr (comp, NOP_EXPR, init));\n \t}"}, {"sha": "ca0fc26f196a1b959dd7ddb75bfc0b1b9182297f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b1b95769d40692822b6516545827e781b28a7b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b1b95769d40692822b6516545827e781b28a7b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=31b1b95769d40692822b6516545827e781b28a7b", "patch": "@@ -1,3 +1,7 @@\n+2000-11-30  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.other/op3.C: New test.\n+\n 2000-11-30  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.other/op2.C: New test."}, {"sha": "957b4d32fd3ef1ce360e2ae152b8b19a9e1ea993", "filename": "gcc/testsuite/g++.old-deja/g++.other/op3.C", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b1b95769d40692822b6516545827e781b28a7b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fop3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b1b95769d40692822b6516545827e781b28a7b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fop3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fop3.C?ref=31b1b95769d40692822b6516545827e781b28a7b", "patch": "@@ -0,0 +1,63 @@\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 28 Nov 2000 <nathan@codesourcery.com>\n+\n+// Related to bug 91. We'd not preserve constness accessing a member of the\n+// source type in copy ctor and assignment op.\n+\n+#include <stdio.h>\n+\n+int glob = 0;\n+\n+struct A\n+{\n+  A() {}\n+\n+  A( A& arg) \n+  { printf (\"%s\\n\", __PRETTY_FUNCTION__); glob = 1;}\n+\n+  A( const A& arg)\n+  { printf (\"%s\\n\", __PRETTY_FUNCTION__); glob = 2;}\n+\n+  A& operator=( A& ) \n+  { printf (\"%s\\n\", __PRETTY_FUNCTION__); glob = 3; return *this; }\n+\n+  A& operator=( const A& ) \n+  { printf (\"%s\\n\", __PRETTY_FUNCTION__); glob = 4; return *this; }\n+};\n+\n+struct B\n+{\n+  A a;\n+  B () {}\n+};\n+\n+void foo( A& )\n+{\n+  printf (\"%s\\n\", __PRETTY_FUNCTION__); glob = 5;\n+}\n+\n+void foo( const A& )\n+{\n+ printf (\"%s\\n\", __PRETTY_FUNCTION__); glob = 6;\n+}\n+\n+int main()\n+{\n+  const A a0;\n+  glob = 0; printf (\"A(cA) : \");  A a1(a0); if (glob != 2) return 1;\n+  glob = 0; printf (\"A(A ) : \");  A a2(a1); if (glob != 1) return 2;\n+  \n+  const B b0;\n+  glob = 0; printf (\"B(cB) : \");  B b1(b0); if (glob != 2) return 3;\n+  glob = 0; printf (\"B(B ) : \");  B b2(b1); if (glob != 2) return 4;\n+\n+  glob = 0; printf (\"A= cA : \");  a1 = a0; if (glob != 4) return 5;\n+  glob = 0; printf (\"A= A : \");   a1 = a2; if (glob != 3) return 6;\n+  glob = 0; printf (\"B= cB : \");  b1 = b0; if (glob != 4) return 7;\n+  glob = 0; printf (\"B= B : \");   b1 = b2; if (glob != 4) return 8;\n+\n+  glob = 0; printf (\"foo(cB): \"); foo(b0.a); if (glob != 6) return 9;\n+  glob = 0; printf (\"foo(B ): \"); foo(b2.a); if (glob != 5) return 10;\n+\n+  return 0;\n+}"}]}