{"sha": "c75e82cd60a1479c1c8539296cd2e91ea9063526", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc1ZTgyY2Q2MGExNDc5YzFjODUzOTI5NmNkMmU5MWVhOTA2MzUyNg==", "commit": {"author": {"name": "Jerome Lambourg", "email": "lambourg@adacore.com", "date": "2019-12-30T22:22:34Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2019-12-30T22:22:34Z"}, "message": "Adapt libstdc++ os_defines for VxWorks to more recent versions\n\nThis change reworks the VxWorks specific os_defines.h internal\nlisbstdc++ header to help fix build and runtime failures of various\nkinds in environments from 6.4/6.9 to 7 SR640, based on experiments\nand observations conducted against real installs of these OSes for\ndifferent CPU architectures.\n\n2019-12-30  Jerome Lambourg  <lambourg@adacore.com>\n           Olivier Hainque  <hainque@adacore.com>\n\n\tlibstdc++\n\t* config/os/vxworks/os_defines.h\n\t(NOMINMAX): Always redefine to 1.\n\t(_NO_CPP_INLINES): Likewise.\n\t(_GLIBCXX_USE_WEAK_REF): Define to 1 for RTP on\n\tVxWorks >= 7, to 0 otherwise.\n\t(_GLIBCXX_HAVE_TLS): Define to 1.\n\tFor VxWorks >= 7:\n\t(_GLIBCXX_USE_C99_MATH): Define to 1.\n\t(_GLIBCXX_USE_C99_MATH_FP_MACROS_DYNAMIC): Define to 0.\n\t(_HAS_TR1_DECLARATIONS): Redefine to 0.\n\tFor VxWorks < 7, RTP:\n\t(_GLIBCXX_INCLUDE_NEXT_C_HEADERS): Define to 1.\n\t(_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC): Redefine to 1.\n\t(__CORRECT_ISO_CPP11_MATH_H_PROTO_FP): Define.\n\tFor VxWorks < 7, kernel: #include <vxWorks.h>\n\nCo-Authored-By: Olivier Hainque <hainque@adacore.com>\n\nFrom-SVN: r279792", "tree": {"sha": "2966972a2bffe5e6f714070e819a806cf721c091", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2966972a2bffe5e6f714070e819a806cf721c091"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c75e82cd60a1479c1c8539296cd2e91ea9063526", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c75e82cd60a1479c1c8539296cd2e91ea9063526", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c75e82cd60a1479c1c8539296cd2e91ea9063526", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c75e82cd60a1479c1c8539296cd2e91ea9063526/comments", "author": {"login": "lambourg", "id": 480233, "node_id": "MDQ6VXNlcjQ4MDIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/480233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambourg", "html_url": "https://github.com/lambourg", "followers_url": "https://api.github.com/users/lambourg/followers", "following_url": "https://api.github.com/users/lambourg/following{/other_user}", "gists_url": "https://api.github.com/users/lambourg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambourg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambourg/subscriptions", "organizations_url": "https://api.github.com/users/lambourg/orgs", "repos_url": "https://api.github.com/users/lambourg/repos", "events_url": "https://api.github.com/users/lambourg/events{/privacy}", "received_events_url": "https://api.github.com/users/lambourg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bbbc05957e55777805cef2d7ea39f1a73604c91a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbbc05957e55777805cef2d7ea39f1a73604c91a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbbc05957e55777805cef2d7ea39f1a73604c91a"}], "stats": {"total": 86, "additions": 82, "deletions": 4}, "files": [{"sha": "c9b4922dc96138714906758253e5b3779b8d5ea0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75e82cd60a1479c1c8539296cd2e91ea9063526/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75e82cd60a1479c1c8539296cd2e91ea9063526/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c75e82cd60a1479c1c8539296cd2e91ea9063526", "patch": "@@ -1,3 +1,22 @@\n+2019-12-30  Jerome Lambourg  <lambourg@adacore.com>\n+            Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/os/vxworks/os_defines.h\n+\t(NOMINMAX): Always redefine to 1.\n+\t(_NO_CPP_INLINES): Likewise.\n+\t(_GLIBCXX_USE_WEAK_REF): Define to 1 for RTP on\n+\tVxWorks >= 7, to 0 otherwise.\n+\t(_GLIBCXX_HAVE_TLS): Define to 1.\n+\tFor VxWorks >= 7:\n+\t(_GLIBCXX_USE_C99_MATH): Define to 1.\n+\t(_GLIBCXX_USE_C99_MATH_FP_MACROS_DYNAMIC): Define to 0.\n+\t(_HAS_TR1_DECLARATIONS): Redefine to 0.\n+\tFor VxWorks < 7, RTP:\n+\t(_GLIBCXX_INCLUDE_NEXT_C_HEADERS): Define to 1.\n+\t(_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC): Redefine to 1.\n+\t(__CORRECT_ISO_CPP11_MATH_H_PROTO_FP): Define.\n+\tFor VxWorks < 7, kernel: #include <vxWorks.h>\n+\n 2019-12-25  Alexandre Oliva <oliva@adacore.com>\n \n \t* crossconfig.m4 (GLIBCXX_CROSSCONFIG) [*-vxworks*]: Define"}, {"sha": "c5573a40b0dcb98d6a801b2ff66ca700504818dd", "filename": "libstdc++-v3/config/os/vxworks/os_defines.h", "status": "modified", "additions": 63, "deletions": 4, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75e82cd60a1479c1c8539296cd2e91ea9063526/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75e82cd60a1479c1c8539296cd2e91ea9063526/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fos_defines.h?ref=c75e82cd60a1479c1c8539296cd2e91ea9063526", "patch": "@@ -33,10 +33,69 @@\n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others.\n \n-//Keep vxWorks from defining min()/max() as macros\n-#ifdef NOMINMAX\n-#undef NOMINMAX\n+// The system environment we can rely on varies across VxWorks\n+// versions.\n+#include <_vxworks-versions.h>\n+\n+// Weak refs are supported starting with VxWorks 7, in RTP mode only\n+\n+#if _VXWORKS_MAJOR_GE(7) && defined(__RTP__)\n+#define _GLIBCXX_USE_WEAK_REF 1\n+#else\n+#define _GLIBCXX_USE_WEAK_REF 0\n #endif\n+\n+// We support TLS on VxWorks (either directly or with emutls)\n+#define _GLIBCXX_HAVE_TLS 1\n+\n+// VxWorks7 comes with a DinkumWare library and the system headers which we\n+// are going to include for libstdc++ have a few related intrinsic\n+// assumptions.  We control our own configuration here to best integrate with\n+// this environment: use C99 math headers, do not use the FP macros for\n+// dynamic cast by default (overriden for RTPs below) and arrange to disable\n+// the system TR1 declarations as we'll provide ours.\n+\n+#if _VXWORKS_MAJOR_GE(7)\n+\n+#define _GLIBCXX_USE_C99_MATH 1\n+#define _GLIBCXX_USE_C99_FP_MACROS_DYNAMIC 0\n+\n+#undef _HAS_TR1_DECLARATIONS\n+#define _HAS_TR1_DECLARATIONS 0\n+\n+#else  // VXWORKS_MAJOR < 7\n+\n+// For RTPs, use the VxWorks headers as a basis, from which we can use\n+// C99 dynamic FP macros and expect (after fixincludes) accurate c++11\n+// prototypes for FP.\n+\n+#ifdef __RTP__\n+\n+#define _GLIBCXX_INCLUDE_NEXT_C_HEADERS 1\n+\n+#undef _GLIBCXX_USE_C99_FP_MACROS_DYNAMIC\n+#define _GLIBCXX_USE_C99_FP_MACROS_DYNAMIC 1\n+\n+#define __CORRECT_ISO_CPP11_MATH_H_PROTO_FP\n+\n+#else // !__RTP__\n+\n+// libstdc++ will include system headers and vxWorks.h ought to have\n+// been included ahead for VxWorks kernel modules prior to VxWorks 7\n+#include <vxWorks.h>\n+\n+#endif // __RTP__\n+\n+#endif // _VXWORKS_MAJOR >= 7\n+\n+// The min/max \"functions\" may be refered to with a namespace prefix.\n+// Prevent possible redefinitions as macros from VxWorks headers.\n+#undef NOMINMAX\n #define NOMINMAX 1\n \n-#endif\n+// Do not include the inline definitions from VxWorks headers, as we'll\n+// want to use the ones from libstdc++ instead.\n+#undef _NO_CPP_INLINES\n+#define _NO_CPP_INLINES 1\n+\n+#endif // _GLIBCXX_OS_DEFINES"}]}