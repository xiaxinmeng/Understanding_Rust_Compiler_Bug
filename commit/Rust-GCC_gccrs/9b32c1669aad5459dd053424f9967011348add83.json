{"sha": "9b32c1669aad5459dd053424f9967011348add83", "node_id": "C_kwDOANBUbNoAKDliMzJjMTY2OWFhZDU0NTlkZDA1MzQyNGY5OTY3MDExMzQ4YWRkODM", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-12-16T21:02:37Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-01-13T09:42:17Z"}, "message": "OpenACC 'kernels' decomposition: Mark variables used in synthesized data clauses as addressable [PR100280]\n\n... as otherwise 'gcc/omp-low.c:lower_omp_target' has to create a temporary:\n\n    13073\t\t\telse if (is_gimple_reg (var))\n    13074\t\t\t  {\n    13075\t\t\t    gcc_assert (offloaded);\n    13076\t\t\t    tree avar = create_tmp_var (TREE_TYPE (var));\n    13077\t\t\t    mark_addressable (avar);\n\n..., which (a) is only implemented for actualy *offloaded* regions (but not\ndata regions), and (b) the subsequently synthesized code for writing to and\nlater reading back from the temporary fundamentally conflicts with OpenACC\n'async' (as used by OpenACC 'kernels' decomposition).  That's all not trivial\nto make work, so let's just avoid this case.\n\n\tgcc/\n\tPR middle-end/100280\n\t* omp-oacc-kernels-decompose.cc (maybe_build_inner_data_region):\n\tMark variables used in synthesized data clauses as addressable.\n\tgcc/testsuite/\n\tPR middle-end/100280\n\t* c-c++-common/goacc/kernels-decompose-pr100280-1.c: New.\n\t* c-c++-common/goacc/classify-kernels-parloops.c: Likewise.\n\t* c-c++-common/goacc/classify-kernels-unparallelized-parloops.c:\n\tLikewise.\n\t* c-c++-common/goacc/classify-kernels-unparallelized.c: Test\n\t'--param openacc-kernels=decompose'.\n\t* c-c++-common/goacc/classify-kernels.c: Likewise.\n\t* c-c++-common/goacc/kernels-decompose-2.c: Update.\n\t* c-c++-common/goacc/kernels-decompose-ice-1.c: Remove.\n\t* c-c++-common/goacc/kernels-decompose-ice-2.c: Likewise.\n\t* gfortran.dg/goacc/classify-kernels-parloops.f95: New.\n\t* gfortran.dg/goacc/classify-kernels-unparallelized-parloops.f95:\n\tLikewise.\n\t* gfortran.dg/goacc/classify-kernels-unparallelized.f95: Test\n\t'--param openacc-kernels=decompose'.\n\t* gfortran.dg/goacc/classify-kernels.f95: Likewise.\n\tlibgomp/\n\tPR middle-end/100280\n\t* testsuite/libgomp.oacc-c-c++-common/declare-vla-kernels-decompose-ice-1.c:\n\tUpdate.\n\t* testsuite/libgomp.oacc-c-c++-common/f-asyncwait-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-decompose-1.c:\n\tLikewise.\n\nSuggested-by: Julian Brown <julian@codesourcery.com>", "tree": {"sha": "75b0716cca2cbd3fe6b09190ba32f3cca10da61b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75b0716cca2cbd3fe6b09190ba32f3cca10da61b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b32c1669aad5459dd053424f9967011348add83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b32c1669aad5459dd053424f9967011348add83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b32c1669aad5459dd053424f9967011348add83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b32c1669aad5459dd053424f9967011348add83/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "862e5f398b7e0a62460e8bc3fe4045e9da6cbf3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/862e5f398b7e0a62460e8bc3fe4045e9da6cbf3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/862e5f398b7e0a62460e8bc3fe4045e9da6cbf3b"}], "stats": {"total": 434, "additions": 264, "deletions": 170}, "files": [{"sha": "4ca899d5ece318f1b3fa562b7396060d099ab9de", "filename": "gcc/omp-oacc-kernels-decompose.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b32c1669aad5459dd053424f9967011348add83/gcc%2Fomp-oacc-kernels-decompose.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b32c1669aad5459dd053424f9967011348add83/gcc%2Fomp-oacc-kernels-decompose.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-oacc-kernels-decompose.cc?ref=9b32c1669aad5459dd053424f9967011348add83", "patch": "@@ -793,7 +793,8 @@ make_data_region_try_statement (location_t loc, gimple *body)\n \n /* If INNER_BIND_VARS holds variables, build an OpenACC data region with\n    location LOC containing BODY and having 'create (var)' clauses for each\n-   variable.  If INNER_CLEANUP is present, add a try-finally statement with\n+   variable (as a side effect, such variables also get TREE_ADDRESSABLE set).\n+   If INNER_CLEANUP is present, add a try-finally statement with\n    this cleanup code in the finally block.  Return the new data region, or\n    the original BODY if no data region was needed.  */\n \n@@ -842,6 +843,9 @@ maybe_build_inner_data_region (location_t loc, gimple *body,\n \t  inner_data_clauses = new_clause;\n \n \t  prev_mapped_var = v;\n+\n+\t  /* See <https://gcc.gnu.org/PR100280>.  */\n+\t  TREE_ADDRESSABLE (v) = 1;\n \t}\n     }\n "}, {"sha": "f3685f2e8c5e05ed858c56323a34f066142f8471", "filename": "gcc/testsuite/c-c++-common/goacc/classify-kernels-parloops.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b32c1669aad5459dd053424f9967011348add83/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b32c1669aad5459dd053424f9967011348add83/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-parloops.c?ref=9b32c1669aad5459dd053424f9967011348add83", "patch": "@@ -0,0 +1,41 @@\n+/* Check offloaded function's attributes and classification for OpenACC\n+   kernels.  */\n+\n+/* { dg-additional-options \"--param openacc-kernels=parloops\" } */\n+\n+/* { dg-additional-options \"-O2\" }\n+   { dg-additional-options \"-fopt-info-optimized-omp\" }\n+   { dg-additional-options \"-fdump-tree-ompexp\" }\n+   { dg-additional-options \"-fdump-tree-parloops1-all\" }\n+   { dg-additional-options \"-fdump-tree-oaccloops\" } */\n+\n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n+#define N 1024\n+\n+extern unsigned int *__restrict a;\n+extern unsigned int *__restrict b;\n+extern unsigned int *__restrict c;\n+\n+void KERNELS ()\n+{\n+#pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N]) /* { dg-message \"optimized: assigned OpenACC gang loop parallelism\" } */\n+  for (unsigned int i = 0; i < N; i++)\n+    c[i] = a[i] + b[i];\n+}\n+\n+/* Check the offloaded function's attributes.\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"ompexp\" } } */\n+\n+/* Check that exactly one OpenACC kernels construct is analyzed, and that it\n+   can be parallelized.\n+   { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } }\n+   { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n+\n+/* Check the offloaded function's classification and compute dimensions (will\n+   always be 1 x 1 x 1 for non-offloading compilation).\n+   { dg-final { scan-tree-dump-times \"(?n)Function is parallelized OpenACC kernels offload\" 1 \"oaccloops\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccloops\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"oaccloops\" } } */"}, {"sha": "6522caf91353edb07038dff89fc38aeb0f76a3a8", "filename": "gcc/testsuite/c-c++-common/goacc/classify-kernels-unparallelized-parloops.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b32c1669aad5459dd053424f9967011348add83/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b32c1669aad5459dd053424f9967011348add83/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized-parloops.c?ref=9b32c1669aad5459dd053424f9967011348add83", "patch": "@@ -0,0 +1,45 @@\n+/* Check offloaded function's attributes and classification for unparallelized\n+   OpenACC kernels.  */\n+\n+/* { dg-additional-options \"--param openacc-kernels=parloops\" } */\n+\n+/* { dg-additional-options \"-O2\" }\n+   { dg-additional-options \"-fopt-info-optimized-omp\" }\n+   { dg-additional-options \"-fdump-tree-ompexp\" }\n+   { dg-additional-options \"-fdump-tree-parloops1-all\" }\n+   { dg-additional-options \"-fdump-tree-oaccloops\" } */\n+\n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n+#define N 1024\n+\n+extern unsigned int *__restrict a;\n+extern unsigned int *__restrict b;\n+extern unsigned int *__restrict c;\n+\n+/* An \"extern\"al mapping of loop iterations/array indices makes the loop\n+   unparallelizable.  */\n+extern unsigned int f (unsigned int);\n+\n+void KERNELS ()\n+{\n+#pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N]) /* { dg-message \"optimized: assigned OpenACC seq loop parallelism\" } */\n+  for (unsigned int i = 0; i < N; i++)\n+    c[i] = a[f (i)] + b[f (i)];\n+}\n+\n+/* Check the offloaded function's attributes.\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"ompexp\" } } */\n+\n+/* Check that exactly one OpenACC kernels construct is analyzed, and that it\n+   can't be parallelized.\n+   { dg-final { scan-tree-dump-times \"FAILED:\" 1 \"parloops1\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } }\n+   { dg-final { scan-tree-dump-not \"SUCCESS: may be parallelized\" \"parloops1\" } } */\n+\n+/* Check the offloaded function's classification and compute dimensions (will\n+   always be 1 x 1 x 1 for non-offloading compilation).\n+   { dg-final { scan-tree-dump-times \"(?n)Function is unparallelized OpenACC kernels offload\" 1 \"oaccloops\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccloops\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"oaccloops\" } } */"}, {"sha": "daa8fcb76623bd5606487a011b58006c33481bab", "filename": "gcc/testsuite/c-c++-common/goacc/classify-kernels-unparallelized.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b32c1669aad5459dd053424f9967011348add83/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b32c1669aad5459dd053424f9967011348add83/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized.c?ref=9b32c1669aad5459dd053424f9967011348add83", "patch": "@@ -1,8 +1,10 @@\n /* Check offloaded function's attributes and classification for unparallelized\n    OpenACC kernels.  */\n \n+/* { dg-additional-options \"--param openacc-kernels=decompose\" } */\n+\n /* { dg-additional-options \"-O2\" }\n-   { dg-additional-options \"-fopt-info-optimized-omp\" }\n+   { dg-additional-options \"-fopt-info-all-omp\" }\n    { dg-additional-options \"-fdump-tree-ompexp\" }\n    { dg-additional-options \"-fdump-tree-parloops1-all\" }\n    { dg-additional-options \"-fdump-tree-oaccloops\" } */\n@@ -23,6 +25,7 @@ extern unsigned int f (unsigned int);\n void KERNELS ()\n {\n #pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N]) /* { dg-message \"optimized: assigned OpenACC seq loop parallelism\" } */\n+  /* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n   for (unsigned int i = 0; i < N; i++)\n     c[i] = a[f (i)] + b[f (i)];\n }"}, {"sha": "b54a71e788ae610cf814c56f9a32c888dadfc2a7", "filename": "gcc/testsuite/c-c++-common/goacc/classify-kernels.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b32c1669aad5459dd053424f9967011348add83/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b32c1669aad5459dd053424f9967011348add83/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels.c?ref=9b32c1669aad5459dd053424f9967011348add83", "patch": "@@ -1,8 +1,10 @@\n /* Check offloaded function's attributes and classification for OpenACC\n    kernels.  */\n \n+/* { dg-additional-options \"--param openacc-kernels=decompose\" } */\n+\n /* { dg-additional-options \"-O2\" }\n-   { dg-additional-options \"-fopt-info-optimized-omp\" }\n+   { dg-additional-options \"-fopt-info-all-omp\" }\n    { dg-additional-options \"-fdump-tree-ompexp\" }\n    { dg-additional-options \"-fdump-tree-parloops1-all\" }\n    { dg-additional-options \"-fdump-tree-oaccloops\" } */\n@@ -19,6 +21,7 @@ extern unsigned int *__restrict c;\n void KERNELS ()\n {\n #pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N]) /* { dg-message \"optimized: assigned OpenACC gang loop parallelism\" } */\n+  /* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n   for (unsigned int i = 0; i < N; i++)\n     c[i] = a[i] + b[i];\n }"}, {"sha": "64ce8943a02bb1f6092a896b233739573dd6bd46", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-2.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b32c1669aad5459dd053424f9967011348add83/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b32c1669aad5459dd053424f9967011348add83/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-2.c?ref=9b32c1669aad5459dd053424f9967011348add83", "patch": "@@ -55,7 +55,7 @@ main ()\n     ;\n   }\n \n-  { /*TODO Instead of using 'for (int i = 0; [...])', move 'int i' outside, to work around for ICE detailed in 'kernels-decompose-ice-1.c'.  */\n+  {\n     int i;\n #pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n     /* { dg-optimized {assigned OpenACC gang loop parallelism} {} { target *-*-* } l_compute$c_compute } */\n@@ -64,6 +64,20 @@ main ()\n     a[i] = 0;\n   }\n \n+#pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 'i' declared in block is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute$c_compute } */\n+  {\n+    int i;\n+  }\n+\n+#pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {variable 'i' declared in block is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute$c_compute } */\n+  /* { dg-optimized {assigned OpenACC gang loop parallelism} {} { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n+  for (int i = 0; i < N; i++)\n+    a[i] = 0;\n+\n #pragma acc kernels loop /* { dg-line l_loop_i[incr c_loop_i] } */\n   /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_loop_i$c_loop_i } */\n   /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */"}, {"sha": "e83b451f2b8edd0ab509a4eaa5cec4852cccad5f", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-ice-1.c", "status": "removed", "additions": 0, "deletions": 114, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862e5f398b7e0a62460e8bc3fe4045e9da6cbf3b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-ice-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862e5f398b7e0a62460e8bc3fe4045e9da6cbf3b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-ice-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-ice-1.c?ref=862e5f398b7e0a62460e8bc3fe4045e9da6cbf3b", "patch": "@@ -1,114 +0,0 @@\n-/* Test OpenACC 'kernels' construct decomposition.  */\n-\n-/* { dg-additional-options \"-fopt-info-omp-all\" } */\n-\n-/* { dg-additional-options \"-fchecking --param=openacc-kernels=decompose\" } */\n-/* { dg-ice \"TODO\" }\n-   { dg-prune-output \"during GIMPLE pass: omplower\" } */\n-\n-/* { dg-additional-options \"--param=openacc-privatization=noisy\" } */\n-\n-/* Reduced from 'kernels-decompose-2.c'.\n-   (Hopefully) similar instances:\n-     - 'kernels-decompose-ice-2.c'\n-     - 'libgomp.oacc-c-c++-common/declare-vla-kernels-decompose-ice-1.c'\n-     - 'libgomp.oacc-c-c++-common/kernels-decompose-1.c'\n-*/\n-\n-int\n-main ()\n-{\n-#define N 10\n-\n-#pragma acc kernels\n-  /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } .-1 } */\n-  /* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n-  for (int i = 0; i < N; i++)\n-    ;\n-\n-  return 0;\n-}\n-\n-/*\n-  In 'gimple' we've got:\n-\n-      main ()\n-      {\n-        int D.2087;\n-      \n-        {\n-          int a[10];\n-      \n-          try\n-            {\n-              #pragma omp target oacc_kernels map(tofrom:a [len: 40])\n-                {\n-                  {\n-                    int i;\n-      \n-                    i = 0;\n-                    goto <D.2085>;\n-      [...]\n-\n-  ..., which in 'omp_oacc_kernels_decompose' we turn into:\n-\n-      main ()\n-      {\n-        int D.2087;\n-      \n-        {\n-          int a[10];\n-      \n-          try\n-            {\n-              #pragma omp target oacc_data_kernels map(tofrom:a [len: 40])\n-                {\n-                  try\n-                    {\n-                      {\n-                        int i;\n-      \n-                        #pragma omp target oacc_data_kernels map(alloc:i [len: 4])\n-                          {\n-                            try\n-                              {\n-                                {\n-                                  #pragma omp target oacc_kernels async(-1) map(force_present:i [len: 4]) map(force_present:a [len: 40])\n-                                    {\n-                                      i = 0;\n-                                      goto <D.2085>;\n-      [...]\n-\n-  ..., which results in ICE in:\n-\n-    #1  0x0000000000d2247b in lower_omp_target (gsi_p=gsi_p@entry=0x7fffffffbc90, ctx=ctx@entry=0x2c994c0) at [...]/gcc/omp-low.c:11981\n-    11981                       gcc_assert (offloaded);\n-    (gdb) list\n-    11976                         talign = TYPE_ALIGN_UNIT (TREE_TYPE (TREE_TYPE (ovar)));\n-    11977                       gimplify_assign (x, var, &ilist);\n-    11978                     }\n-    11979                   else if (is_gimple_reg (var))\n-    11980                     {\n-    11981                       gcc_assert (offloaded);\n-    11982                       tree avar = create_tmp_var (TREE_TYPE (var));\n-    11983                       mark_addressable (avar);\n-    11984                       enum gomp_map_kind map_kind = OMP_CLAUSE_MAP_KIND (c);\n-    11985                       if (GOMP_MAP_COPY_TO_P (map_kind)\n-    (gdb) call debug_tree(var)\n-     <var_decl 0x7ffff7feebd0 i\n-        type <integer_type 0x7ffff67be5e8 int sizes-gimplified public SI\n-            size <integer_cst 0x7ffff67a5f18 constant 32>\n-            unit-size <integer_cst 0x7ffff67a5f30 constant 4>\n-            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7ffff67be5e8 precision:32 min <integer_cst 0x7ffff67a5ed0 -2147483648> max <integer_cst 0x7ffff67a5ee8 2147483647>\n-            pointer_to_this <pointer_type 0x7ffff67c69d8>>\n-        used read SI [...]:15:12 size <integer_cst 0x7ffff67a5f18 32> unit-size <integer_cst 0x7ffff67a5f30 4>\n-        align:32 warn_if_not_align:0 context <function_decl 0x7ffff68eea00 main>>\n-\n-  Just defusing the 'assert' is not sufficient:\n-\n-      libgomp: present clause: !acc_is_present (0x7ffe29cba3ec, 4 (0x4))\n-\n-  TODO Can't the 'omp_oacc_kernels_decompose' transformation be much simpler, such that we avoid the intermediate 'data' if we've got just one compute construct inside it?\n-  TODO But it's not clear if that'd just resolve one simple instance of the general problem?\n-\n-*/"}, {"sha": "16af57d5f8748119568d0d354357dd1d3aa25f7f", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-ice-2.c", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862e5f398b7e0a62460e8bc3fe4045e9da6cbf3b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-ice-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862e5f398b7e0a62460e8bc3fe4045e9da6cbf3b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-ice-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-ice-2.c?ref=862e5f398b7e0a62460e8bc3fe4045e9da6cbf3b", "patch": "@@ -1,22 +0,0 @@\n-/* Test OpenACC 'kernels' construct decomposition.  */\n-\n-/* { dg-additional-options \"-fopt-info-omp-all\" } */\n-\n-/* { dg-additional-options \"-fchecking --param=openacc-kernels=decompose\" } */\n-/* { dg-ice \"TODO\" }\n-   { dg-prune-output \"during GIMPLE pass: omplower\" } */\n-\n-/* { dg-additional-options \"--param=openacc-privatization=noisy\" } */\n-\n-/* Reduced from 'kernels-decompose-ice-1.c'.  */\n-\n-int\n-main ()\n-{\n-#pragma acc kernels\n-  /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .-1 } */\n-  /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } .-2 } */\n-  {\n-    int i;\n-  }\n-}"}, {"sha": "b497af298bcbb9583d2fbc5b7f7374b9d08906e3", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr100280-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b32c1669aad5459dd053424f9967011348add83/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100280-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b32c1669aad5459dd053424f9967011348add83/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100280-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100280-1.c?ref=9b32c1669aad5459dd053424f9967011348add83", "patch": "@@ -0,0 +1,19 @@\n+/* Reduced from 'libgomp.oacc-c-c++-common/kernels-loop-2.c'.  */\n+\n+/* { dg-additional-options \"--param openacc-kernels=decompose\" } */\n+\n+/* { dg-additional-options \"-fopt-info-all-omp\" } */\n+\n+/* { dg-additional-options \"--param=openacc-privatization=noisy\" } */\n+\n+void\n+foo (void) /* { dg-line l_f_1 } */\n+{\n+#pragma acc kernels /* { dg-line l_k_1 } */\n+  /* { dg-note {variable 'i' declared in block is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_k_1 } */\n+  /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_k_1 } */\n+  /* { dg-bogus {note: beginning 'parloops' part in OpenACC 'kernels' region} {TODO location} { xfail *-*-* } l_f_1 }\n+     { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} TODO { xfail *-*-* } .+1 } */\n+  for (int i;;)\n+    ;\n+}"}, {"sha": "b8c2d99a8a459f9e856028abd3a447eb841de6e0", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-kernels-parloops.f95", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b32c1669aad5459dd053424f9967011348add83/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-parloops.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b32c1669aad5459dd053424f9967011348add83/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-parloops.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-parloops.f95?ref=9b32c1669aad5459dd053424f9967011348add83", "patch": "@@ -0,0 +1,43 @@\n+! Check offloaded function's attributes and classification for OpenACC\n+! kernels.\n+\n+! { dg-additional-options \"--param openacc-kernels=parloops\" }\n+\n+! { dg-additional-options \"-O2\" }\n+! { dg-additional-options \"-fopt-info-optimized-omp\" }\n+! { dg-additional-options \"-fdump-tree-ompexp\" }\n+! { dg-additional-options \"-fdump-tree-parloops1-all\" }\n+! { dg-additional-options \"-fdump-tree-oaccloops\" }\n+\n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+\n+program main\n+  implicit none\n+  integer, parameter :: n = 1024\n+  integer, dimension (0:n-1) :: a, b, c\n+  integer :: i\n+\n+  call setup(a, b)\n+\n+  !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+  do i = 0, n - 1\n+     c(i) = a(i) + b(i)\n+  end do\n+  !$acc end kernels\n+end program main\n+\n+! Check the offloaded function's attributes.\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"ompexp\" } }\n+\n+! Check that exactly one OpenACC kernels construct is analyzed, and that it\n+! can be parallelized.\n+! { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } }\n+\n+! Check the offloaded function's classification and compute dimensions (will\n+! always be 1 x 1 x 1 for non-offloading compilation).\n+! { dg-final { scan-tree-dump-times \"(?n)Function is parallelized OpenACC kernels offload\" 1 \"oaccloops\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccloops\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"oaccloops\" } }"}, {"sha": "37733273440cb3d0911be427b24d67c337a4b074", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-kernels-unparallelized-parloops.f95", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b32c1669aad5459dd053424f9967011348add83/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized-parloops.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b32c1669aad5459dd053424f9967011348add83/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized-parloops.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized-parloops.f95?ref=9b32c1669aad5459dd053424f9967011348add83", "patch": "@@ -0,0 +1,47 @@\n+! Check offloaded function's attributes and classification for unparallelized\n+! OpenACC kernels.\n+\n+! { dg-additional-options \"--param openacc-kernels=parloops\" }\n+\n+! { dg-additional-options \"-O2\" }\n+! { dg-additional-options \"-fopt-info-optimized-omp\" }\n+! { dg-additional-options \"-fdump-tree-ompexp\" }\n+! { dg-additional-options \"-fdump-tree-parloops1-all\" }\n+! { dg-additional-options \"-fdump-tree-oaccloops\" }\n+\n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+\n+program main\n+  implicit none\n+  integer, parameter :: n = 1024\n+  integer, dimension (0:n-1) :: a, b, c\n+  integer :: i\n+\n+  ! An \"external\" mapping of loop iterations/array indices makes the loop\n+  ! unparallelizable.\n+  integer, external :: f\n+\n+  call setup(a, b)\n+\n+  !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+  do i = 0, n - 1\n+     c(i) = a(f (i)) + b(f (i))\n+  end do\n+  !$acc end kernels\n+end program main\n+\n+! Check the offloaded function's attributes.\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"ompexp\" } }\n+\n+! Check that exactly one OpenACC kernels construct is analyzed, and that it\n+! can't be parallelized.\n+! { dg-final { scan-tree-dump-times \"FAILED:\" 1 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-not \"SUCCESS: may be parallelized\" \"parloops1\" } }\n+\n+! Check the offloaded function's classification and compute dimensions (will\n+! always be 1 x 1 x 1 for non-offloading compilation).\n+! { dg-final { scan-tree-dump-times \"(?n)Function is unparallelized OpenACC kernels offload\" 1 \"oaccloops\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccloops\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"oaccloops\" } }"}, {"sha": "ee8e2899a8a866588b3501199e57c3e243c07619", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-kernels-unparallelized.f95", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b32c1669aad5459dd053424f9967011348add83/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b32c1669aad5459dd053424f9967011348add83/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95?ref=9b32c1669aad5459dd053424f9967011348add83", "patch": "@@ -1,8 +1,10 @@\n ! Check offloaded function's attributes and classification for unparallelized\n ! OpenACC kernels.\n \n+! { dg-additional-options \"--param openacc-kernels=decompose\" }\n+\n ! { dg-additional-options \"-O2\" }\n-! { dg-additional-options \"-fopt-info-optimized-omp\" }\n+! { dg-additional-options \"-fopt-info-all-omp\" }\n ! { dg-additional-options \"-fdump-tree-ompexp\" }\n ! { dg-additional-options \"-fdump-tree-parloops1-all\" }\n ! { dg-additional-options \"-fdump-tree-oaccloops\" }\n@@ -23,6 +25,7 @@ program main\n   call setup(a, b)\n \n   !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+  ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 }\n   do i = 0, n - 1\n      c(i) = a(f (i)) + b(f (i))\n   end do"}, {"sha": "a4bcca05cc118f1308a451e39c58ba44c903cede", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-kernels.f95", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b32c1669aad5459dd053424f9967011348add83/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b32c1669aad5459dd053424f9967011348add83/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95?ref=9b32c1669aad5459dd053424f9967011348add83", "patch": "@@ -1,8 +1,10 @@\n ! Check offloaded function's attributes and classification for OpenACC\n ! kernels.\n \n+! { dg-additional-options \"--param openacc-kernels=decompose\" }\n+\n ! { dg-additional-options \"-O2\" }\n-! { dg-additional-options \"-fopt-info-optimized-omp\" }\n+! { dg-additional-options \"-fopt-info-all-omp\" }\n ! { dg-additional-options \"-fdump-tree-ompexp\" }\n ! { dg-additional-options \"-fdump-tree-parloops1-all\" }\n ! { dg-additional-options \"-fdump-tree-oaccloops\" }\n@@ -19,6 +21,7 @@ program main\n   call setup(a, b)\n \n   !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+  ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 }\n   do i = 0, n - 1\n      c(i) = a(i) + b(i)\n   end do"}, {"sha": "3e5b6bab2339b44f735f0f6ec59b2e3cdc5c1a1b", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/declare-vla-kernels-decompose-ice-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b32c1669aad5459dd053424f9967011348add83/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-vla-kernels-decompose-ice-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b32c1669aad5459dd053424f9967011348add83/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-vla-kernels-decompose-ice-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-vla-kernels-decompose-ice-1.c?ref=9b32c1669aad5459dd053424f9967011348add83", "patch": "@@ -1,5 +1,5 @@\n /* { dg-additional-options \"--param=openacc-kernels=decompose\" } */\n-/* Hopefully, this is the same issue as '../../../gcc/testsuite/c-c++-common/goacc/kernels-decompose-ice-1.c'.\n+/* ICE similar to PR100280, but not the same.\n    { dg-ice \"TODO\" }\n    TODO { dg-prune-output \"during GIMPLE pass: omplower\" }\n    TODO { dg-do link } */"}, {"sha": "f7ccecbf4b4b1386203afdc7b0ecdb8b95d7ebe6", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/f-asyncwait-1.c", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b32c1669aad5459dd053424f9967011348add83/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ff-asyncwait-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b32c1669aad5459dd053424f9967011348add83/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ff-asyncwait-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ff-asyncwait-1.c?ref=9b32c1669aad5459dd053424f9967011348add83", "patch": "@@ -3,7 +3,7 @@\n /* Based on '../libgomp.oacc-fortran/asyncwait-1.f90'.  */\n \n /* { dg-additional-options \"--param=openacc-kernels=decompose\" } */\n-/* TODO To avoid PR100280 ICE { dg-additional-options \"--param=openacc-kernels=parloops\" } */\n+/* { dg-xfail-run-if TODO { openacc_radeon_accel_selected } } */\n \n /* { dg-additional-options \"-fopt-info-all-omp\" }\n    { dg-additional-options \"-foffload=-fopt-info-all-omp\" } */\n@@ -202,11 +202,12 @@ main (void)\n #pragma acc data copy (a[0:N]) copy (b[0:N])\n   {\n \n-#pragma acc kernels async /* { dg-line l_compute[incr c_compute] } */\n-    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n-    /* { dg-optimized \"assigned OpenACC seq loop parallelism\" \"\" { target *-*-* } l_compute$c_compute } */\n+#pragma acc kernels async\n #pragma acc loop /* { dg-line l_loop_i[incr c_loop_i] } */\n+    /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_loop_i$c_loop_i } */\n+    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop_i$c_loop_i } */\n     /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop_i$c_loop_i } */\n+    /* { dg-optimized \"assigned OpenACC seq loop parallelism\" \"\" { target *-*-* } l_loop_i$c_loop_i } */\n     for (int i = 0; i < N; ++i)\n       b[i] = a[i];\n \n@@ -229,11 +230,12 @@ main (void)\n \n #pragma acc data copy (a[0:N]) copy (b[0:N])\n   {\n-#pragma acc kernels async (1) /* { dg-line l_compute[incr c_compute] } */\n-    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n-    /* { dg-optimized \"assigned OpenACC seq loop parallelism\" \"\" { target *-*-* } l_compute$c_compute } */\n+#pragma acc kernels async (1)\n #pragma acc loop /* { dg-line l_loop_i[incr c_loop_i] } */\n+    /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_loop_i$c_loop_i } */\n+    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop_i$c_loop_i } */\n     /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop_i$c_loop_i } */\n+    /* { dg-optimized \"assigned OpenACC seq loop parallelism\" \"\" { target *-*-* } l_loop_i$c_loop_i } */\n     for (int i = 0; i < N; ++i)\n       b[i] = a[i];\n \n@@ -259,24 +261,27 @@ main (void)\n #pragma acc data copy (a[0:N]) copy (b[0:N]) copy (c[0:N]) copy (d[0:N])\n   {\n #pragma acc kernels async (1) /* { dg-line l_compute[incr c_compute] } */\n-    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {variable 'i' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_compute$c_compute } */\n     /* { dg-optimized \"assigned OpenACC seq loop parallelism\" \"\" { target { ! __OPTIMIZE__ } } l_compute$c_compute }\n        { dg-optimized \"assigned OpenACC gang loop parallelism\" \"\" { target { __OPTIMIZE__ } } l_compute$c_compute } */\n+    /* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n     for (int i = 0; i < N; ++i)\n       b[i] = (a[i] * a[i] * a[i]) / a[i];\n \n #pragma acc kernels async (1) /* { dg-line l_compute[incr c_compute] } */\n-    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {variable 'i' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_compute$c_compute } */\n     /* { dg-optimized \"assigned OpenACC seq loop parallelism\" \"\" { target { ! __OPTIMIZE__ } } l_compute$c_compute }\n        { dg-optimized \"assigned OpenACC gang loop parallelism\" \"\" { target { __OPTIMIZE__ } } l_compute$c_compute } */\n+    /* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n     for (int i = 0; i < N; ++i)\n       c[i] = (a[i] * 4) / a[i];\n \n-#pragma acc kernels async (1) /* { dg-line l_compute[incr c_compute] } */\n-    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n-    /* { dg-optimized \"assigned OpenACC seq loop parallelism\" \"\" { target *-*-* } l_compute$c_compute } */\n+#pragma acc kernels async (1)\n #pragma acc loop /* { dg-line l_loop_i[incr c_loop_i] } */\n+    /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_loop_i$c_loop_i } */\n+    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop_i$c_loop_i } */\n     /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop_i$c_loop_i } */\n+    /* { dg-optimized \"assigned OpenACC seq loop parallelism\" \"\" { target *-*-* } l_loop_i$c_loop_i } */\n     for (int i = 0; i < N; ++i)\n       d[i] = ((a[i] * a[i] + a[i]) / a[i]) - a[i];\n \n@@ -307,33 +312,37 @@ main (void)\n #pragma acc data copy (a[0:N], b[0:N], c[0:N], d[0:N], e[0:N])\n   {\n #pragma acc kernels async (1) /* { dg-line l_compute[incr c_compute] } */\n-    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {variable 'i' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_compute$c_compute } */\n     /* { dg-optimized \"assigned OpenACC seq loop parallelism\" \"\" { target { ! __OPTIMIZE__ } } l_compute$c_compute }\n        { dg-optimized \"assigned OpenACC gang loop parallelism\" \"\" { target { __OPTIMIZE__ } } l_compute$c_compute } */\n+    /* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n     for (int i = 0; i < N; ++i)\n       b[i] = (a[i] * a[i] * a[i]) / a[i];\n \n-#pragma acc kernels async (1) /* { dg-line l_compute[incr c_compute] } */\n-    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n-    /* { dg-optimized \"assigned OpenACC seq loop parallelism\" \"\" { target *-*-* } l_compute$c_compute } */\n+#pragma acc kernels async (1)\n #pragma acc loop /* { dg-line l_loop_i[incr c_loop_i] } */\n+    /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_loop_i$c_loop_i } */\n+    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop_i$c_loop_i } */\n     /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop_i$c_loop_i } */\n+    /* { dg-optimized \"assigned OpenACC seq loop parallelism\" \"\" { target *-*-* } l_loop_i$c_loop_i } */\n     for (int i = 0; i < N; ++i)\n       c[i] = (a[i] * 4) / a[i];\n \n-#pragma acc kernels async (1) /* { dg-line l_compute[incr c_compute] } */\n-    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n-    /* { dg-optimized \"assigned OpenACC seq loop parallelism\" \"\" { target *-*-* } l_compute$c_compute } */\n+#pragma acc kernels async (1)\n #pragma acc loop /* { dg-line l_loop_i[incr c_loop_i] } */\n+    /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_loop_i$c_loop_i } */\n+    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop_i$c_loop_i } */\n     /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop_i$c_loop_i } */\n+    /* { dg-optimized \"assigned OpenACC seq loop parallelism\" \"\" { target *-*-* } l_loop_i$c_loop_i } */\n     for (int i = 0; i < N; ++i)\n       d[i] = ((a[i] * a[i] + a[i]) / a[i]) - a[i];\n \n-#pragma acc kernels wait (1) async (1) /* { dg-line l_compute[incr c_compute] } */\n-    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n-    /* { dg-optimized \"assigned OpenACC seq loop parallelism\" \"\" { target *-*-* } l_compute$c_compute } */\n+#pragma acc kernels wait (1) async (1)\n #pragma acc loop /* { dg-line l_loop_i[incr c_loop_i] } */\n+    /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_loop_i$c_loop_i } */\n+    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop_i$c_loop_i } */\n     /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop_i$c_loop_i } */\n+    /* { dg-optimized \"assigned OpenACC seq loop parallelism\" \"\" { target *-*-* } l_loop_i$c_loop_i } */\n     for (int i = 0; i < N; ++i)\n       e[i] = a[i] + b[i] + c[i] + d[i];\n "}, {"sha": "57e75f6d399c514b7c8517eb28580356cc02e20b", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-decompose-1.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b32c1669aad5459dd053424f9967011348add83/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-decompose-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b32c1669aad5459dd053424f9967011348add83/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-decompose-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-decompose-1.c?ref=9b32c1669aad5459dd053424f9967011348add83", "patch": "@@ -32,11 +32,7 @@ int main()\n   {\n     /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n     int c = 234;\n-    /* { dg-note {variable 'c' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_compute$c_compute }\n-       { dg-note {variable 'c\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n-\n-    /*TODO Hopefully, this is the same issue as '../../../gcc/testsuite/c-c++-common/goacc/kernels-decompose-ice-1.c'.  */\n-    (volatile int *) &c;\n+    /* { dg-note {variable 'c' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_compute$c_compute } */\n \n #pragma acc loop independent gang /* { dg-line l_loop_i[incr c_loop_i] } */\n     /* { dg-note {parallelized loop nest in OpenACC 'kernels' region} {} { target *-*-* } l_loop_i$c_loop_i } */"}]}