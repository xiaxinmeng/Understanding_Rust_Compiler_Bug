{"sha": "405af656bcbddb0f655aa7744220478b80df09d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA1YWY2NTZiY2JkZGIwZjY1NWFhNzc0NDIyMDQ3OGI4MGRmMDlkNw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-04-11T14:02:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-04-11T14:02:26Z"}, "message": "re PR target/52918 (ICE: Invalid bb->loop_father (NULL) in add_bb_to_loop)\n\n2012-04-11  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/52918\n\t* except.c (sjlj_emit_dispatch_table): Properly update loop\n\tstructure.\n\n\t* g++.dg/torture/pr52918-1.C: New testcase.\n\t* g++.dg/torture/pr52918-2.C: Likewise.\n\nFrom-SVN: r186320", "tree": {"sha": "8d818b24c6d556017465b882562342d6e6bdb7fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d818b24c6d556017465b882562342d6e6bdb7fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/405af656bcbddb0f655aa7744220478b80df09d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/405af656bcbddb0f655aa7744220478b80df09d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/405af656bcbddb0f655aa7744220478b80df09d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/405af656bcbddb0f655aa7744220478b80df09d7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e9184c9ece086653c99b6ffb439aac9aa2e6dbbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9184c9ece086653c99b6ffb439aac9aa2e6dbbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9184c9ece086653c99b6ffb439aac9aa2e6dbbb"}], "stats": {"total": 131, "additions": 131, "deletions": 0}, "files": [{"sha": "945e9046de84f9ba336cfa4aafcebffd675130c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405af656bcbddb0f655aa7744220478b80df09d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405af656bcbddb0f655aa7744220478b80df09d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=405af656bcbddb0f655aa7744220478b80df09d7", "patch": "@@ -1,3 +1,9 @@\n+2012-04-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/52918\n+\t* except.c (sjlj_emit_dispatch_table): Properly update loop\n+\tstructure.\n+\n 2012-04-11  Nick Clifton  <nickc@redhat.com>\n \n \t* config/rl78/rl78.c (rl78_expand_prologue): Set stack use"}, {"sha": "e6e7794f246494bb9be52a13533f6cbdd60c417e", "filename": "gcc/except.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405af656bcbddb0f655aa7744220478b80df09d7/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405af656bcbddb0f655aa7744220478b80df09d7/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=405af656bcbddb0f655aa7744220478b80df09d7", "patch": "@@ -1344,6 +1344,28 @@ sjlj_emit_dispatch_table (rtx dispatch_label, int num_dispatch)\n \te = make_edge (bb, bb->next_bb, EDGE_FALLTHRU);\n \te->count = bb->count;\n \te->probability = REG_BR_PROB_BASE;\n+\tif (current_loops)\n+\t  {\n+\t    struct loop *loop = bb->next_bb->loop_father;\n+\t    /* If we created a pre-header block, add the new block to the\n+\t       outer loop, otherwise to the loop itself.  */\n+\t    if (bb->next_bb == loop->header)\n+\t      add_bb_to_loop (bb, loop_outer (loop));\n+\t    else\n+\t      add_bb_to_loop (bb, loop);\n+\t    /* ???  For multiple dispatches we will end up with edges\n+\t       from the loop tree root into this loop, making it a\n+\t       multiple-entry loop.  Discard all affected loops.  */\n+\t    if (num_dispatch > 1)\n+\t      {\n+\t\tfor (loop = bb->loop_father;\n+\t\t     loop_outer (loop); loop = loop_outer (loop))\n+\t\t  {\n+\t\t    loop->header = NULL;\n+\t\t    loop->latch = NULL;\n+\t\t  }\n+\t      }\n+\t  }\n \n \tdisp_index++;\n       }\n@@ -1364,6 +1386,24 @@ sjlj_emit_dispatch_table (rtx dispatch_label, int num_dispatch)\n       e = make_edge (bb, bb->next_bb, EDGE_FALLTHRU);\n       e->count = bb->count;\n       e->probability = REG_BR_PROB_BASE;\n+      if (current_loops)\n+\t{\n+\t  struct loop *loop = bb->next_bb->loop_father;\n+\t  /* If we created a pre-header block, add the new block to the\n+\t     outer loop, otherwise to the loop itself.  */\n+\t  if (bb->next_bb == loop->header)\n+\t    add_bb_to_loop (bb, loop_outer (loop));\n+\t  else\n+\t    add_bb_to_loop (bb, loop);\n+\t}\n+    }\n+  else\n+    {\n+      /* We are not wiring up edges here, but as the dispatcher call\n+         is at function begin simply associate the block with the\n+\t outermost (non-)loop.  */\n+      if (current_loops)\n+\tadd_bb_to_loop (bb, current_loops->tree_root);\n     }\n }\n "}, {"sha": "7e2a1c30b8e4dc638d3ef27ffbfa963735ac0682", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405af656bcbddb0f655aa7744220478b80df09d7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405af656bcbddb0f655aa7744220478b80df09d7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=405af656bcbddb0f655aa7744220478b80df09d7", "patch": "@@ -1,3 +1,9 @@\n+2012-04-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/52918\n+\t* g++.dg/torture/pr52918-1.C: New testcase.\n+\t* g++.dg/torture/pr52918-2.C: Likewise.\n+\n 2012-04-11  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/52729"}, {"sha": "9e7b21ba6a367f7b3e2a267f0c1aa2712710cccf", "filename": "gcc/testsuite/g++.dg/torture/pr52918-1.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405af656bcbddb0f655aa7744220478b80df09d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr52918-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405af656bcbddb0f655aa7744220478b80df09d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr52918-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr52918-1.C?ref=405af656bcbddb0f655aa7744220478b80df09d7", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do compile }\n+\n+typedef __SIZE_TYPE__ size_t;\n+class bad_alloc   { };\n+typedef struct {\n+} __gthread_mutex_t;\n+int __gthread_mutex_unlock (__gthread_mutex_t *__mutex);\n+class __concurrence_unlock_error   {\n+};\n+inline void   __throw_concurrence_unlock_error()   {\n+    throw __concurrence_unlock_error();\n+}\n+class __mutex   {\n+    __gthread_mutex_t _M_mutex;\n+public:\n+    void unlock()     {\n+\tif (__gthread_mutex_unlock(&_M_mutex) != 0)\n+\t  __throw_concurrence_unlock_error();  \t   \n+    }\n+};\n+class free_list   {\n+    typedef __mutex __mutex_type;\n+    __mutex_type&     _M_get_mutex();\n+    void _M_get(size_t __sz) throw(bad_alloc);\n+};\n+void  free_list::_M_get(size_t __sz) throw(bad_alloc)\n+{\n+  __mutex_type& __bfl_mutex = _M_get_mutex();\n+  __bfl_mutex.unlock();\n+  int __ctr = 2;\n+  while (__ctr)  {\n+      size_t* __ret = 0;\n+      --__ctr;\n+      try {\n+\t  __ret = (size_t*) (::operator new(__sz + sizeof(size_t)));       \n+      }\n+      catch(const bad_alloc&) { }\n+  }\n+}"}, {"sha": "ba31295e41eff39334e7de3ef2e535ca969373f5", "filename": "gcc/testsuite/g++.dg/torture/pr52918-2.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405af656bcbddb0f655aa7744220478b80df09d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr52918-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405af656bcbddb0f655aa7744220478b80df09d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr52918-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr52918-2.C?ref=405af656bcbddb0f655aa7744220478b80df09d7", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+\n+typedef __SIZE_TYPE__ size_t;\n+void*   __cxa_allocate_exception(size_t) throw();\n+typedef struct { } __gthread_mutex_t;\n+extern int __gthr_win32_mutex_unlock (__gthread_mutex_t *);\n+int __gthread_mutex_lock (__gthread_mutex_t *__mutex);\n+int __gthread_mutex_unlock (__gthread_mutex_t *__mutex);\n+void   __throw_concurrence_lock_error();\n+void   __throw_concurrence_unlock_error();\n+class __mutex   {\n+    __gthread_mutex_t _M_mutex;\n+public:\n+    void lock()     {\n+\tif (__gthread_mutex_lock(&_M_mutex) != 0)\n+\t  __throw_concurrence_lock_error();\n+    }\n+    void unlock()     {\n+\tif (__gthread_mutex_unlock(&_M_mutex) != 0) \n+\t  __throw_concurrence_unlock_error();\n+    }\n+};\n+class __scoped_lock   {\n+    typedef __mutex __mutex_type;\n+    __mutex_type& _M_device;\n+public:\n+    explicit __scoped_lock(__mutex_type& __name) : _M_device(__name)     {\n+\t_M_device.lock();\n+    }\n+    ~__scoped_lock() throw()    {\n+\t_M_device.unlock();\n+    }\n+};\n+__mutex emergency_mutex;\n+void * __cxa_allocate_exception(size_t thrown_size) throw()\n+{\n+  void *ret;\n+  if (! ret)     \n+    __scoped_lock sentry(emergency_mutex);\n+}"}]}