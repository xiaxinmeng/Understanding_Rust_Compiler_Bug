{"sha": "2ff619482da2a22a0099aacfd9e3118e25256aac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZmNjE5NDgyZGEyYTIyYTAwOTlhYWNmZDllMzExOGUyNTI1NmFhYw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-04-16T21:46:59Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-04-16T21:46:59Z"}, "message": "re PR target/24076 ((vector char){x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x} code gen is not that good)\n\n2006-04-15  Roger Sayle  <roger@eyesopen.com>\n\t    Andrew Pinski  <pinskia@gcc.gnu.org>\n\t    Dale Johannesen  <dalej@apple.com>\n\n\tPR target/24076\n\t* config/i386/i386.c (ix86_expand_vector_init_duplicate): Add\n\tspecial case code to implement V8HImode and V16QImode with SSE2.\n\n\t* gcc.target/i386/vecinit-3.c: New testcase.\n\t* gcc.target/i386/vecinit-4.c: Likewise.\n\t* gcc.target/i386/sse-18.c: Likewise.\n\t* gcc.target/i386/sse-19.c: Likewise.\n\n\nCo-Authored-By: Andrew Pinski <pinskia@gcc.gnu.org>\nCo-Authored-By: Dale Johannesen <dalej@apple.com>\n\nFrom-SVN: r112990", "tree": {"sha": "b6b0e1ede375a1e186941f57d26fa43ea68e93cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6b0e1ede375a1e186941f57d26fa43ea68e93cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ff619482da2a22a0099aacfd9e3118e25256aac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ff619482da2a22a0099aacfd9e3118e25256aac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ff619482da2a22a0099aacfd9e3118e25256aac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ff619482da2a22a0099aacfd9e3118e25256aac/comments", "author": null, "committer": null, "parents": [{"sha": "3c86fb4e17941da9eb4026bda6301bf0a74a96fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c86fb4e17941da9eb4026bda6301bf0a74a96fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c86fb4e17941da9eb4026bda6301bf0a74a96fe"}], "stats": {"total": 155, "additions": 154, "deletions": 1}, "files": [{"sha": "9fbdca0a9017660cc2b3f046555a66d8632d5236", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ff619482da2a22a0099aacfd9e3118e25256aac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ff619482da2a22a0099aacfd9e3118e25256aac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ff619482da2a22a0099aacfd9e3118e25256aac", "patch": "@@ -1,3 +1,11 @@\n+2006-04-16  Roger Sayle  <roger@eyesopen.com>\n+\t    Andrew Pinski  <pinskia@gcc.gnu.org>\n+\t    Dale Johannesen  <dalej@apple.com>\n+\n+\tPR target/24076\n+\t* config/i386/i386.c (ix86_expand_vector_init_duplicate): Add\n+\tspecial case code to implement V8HImode and V16QImode with SSE2.\n+\n 2006-04-15  Roger Sayle  <roger@eyesopen.com>\n \n \t* config/i386/i386.c (ix86_va_start): Ensure all integer constant"}, {"sha": "3fc19bf67372eb8564ebab508cdc75864ac35e9d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ff619482da2a22a0099aacfd9e3118e25256aac/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ff619482da2a22a0099aacfd9e3118e25256aac/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2ff619482da2a22a0099aacfd9e3118e25256aac", "patch": "@@ -17856,11 +17856,66 @@ ix86_expand_vector_init_duplicate (bool mmx_ok, enum machine_mode mode,\n       wvmode = V4HImode;\n       goto widen;\n     case V8HImode:\n+      if (TARGET_SSE2)\n+\t{\n+\t  rtx tmp1, tmp2;\n+\t  /* Extend HImode to SImode using a paradoxical SUBREG.  */\n+\t  tmp1 = gen_reg_rtx (SImode);\n+\t  emit_move_insn (tmp1, gen_lowpart (SImode, val));\n+\t  /* Insert the SImode value as low element of V4SImode vector. */\n+\t  tmp2 = gen_reg_rtx (V4SImode);\n+\t  tmp1 = gen_rtx_VEC_MERGE (V4SImode,\n+\t\t\t\t    gen_rtx_VEC_DUPLICATE (V4SImode, tmp1),\n+\t\t\t\t    CONST0_RTX (V4SImode),\n+\t\t\t\t    const1_rtx);\n+\t  emit_insn (gen_rtx_SET (VOIDmode, tmp2, tmp1));\n+\t  /* Cast the V4SImode vector back to a V8HImode vector.  */\n+\t  tmp1 = gen_reg_rtx (V8HImode);\n+\t  emit_move_insn (tmp1, gen_lowpart (V8HImode, tmp2));\n+\t  /* Duplicate the low short through the whole low SImode word.  */\n+\t  emit_insn (gen_sse2_punpcklwd (tmp1, tmp1, tmp1));\n+\t  /* Cast the V8HImode vector back to a V4SImode vector.  */\n+\t  tmp2 = gen_reg_rtx (V4SImode);\n+\t  emit_move_insn (tmp2, gen_lowpart (V4SImode, tmp1));\n+\t  /* Replicate the low element of the V4SImode vector.  */\n+\t  emit_insn (gen_sse2_pshufd (tmp2, tmp2, const0_rtx));\n+\t  /* Cast the V2SImode back to V8HImode, and store in target.  */\n+\t  emit_move_insn (target, gen_lowpart (V8HImode, tmp2));\n+\t  return true;\n+\t}\n       smode = HImode;\n       wsmode = SImode;\n       wvmode = V4SImode;\n       goto widen;\n     case V16QImode:\n+      if (TARGET_SSE2)\n+\t{\n+\t  rtx tmp1, tmp2;\n+\t  /* Extend QImode to SImode using a paradoxical SUBREG.  */\n+\t  tmp1 = gen_reg_rtx (SImode);\n+\t  emit_move_insn (tmp1, gen_lowpart (SImode, val));\n+\t  /* Insert the SImode value as low element of V4SImode vector. */\n+\t  tmp2 = gen_reg_rtx (V4SImode);\n+\t  tmp1 = gen_rtx_VEC_MERGE (V4SImode,\n+\t\t\t\t    gen_rtx_VEC_DUPLICATE (V4SImode, tmp1),\n+\t\t\t\t    CONST0_RTX (V4SImode),\n+\t\t\t\t    const1_rtx);\n+\t  emit_insn (gen_rtx_SET (VOIDmode, tmp2, tmp1));\n+\t  /* Cast the V4SImode vector back to a V16QImode vector.  */\n+\t  tmp1 = gen_reg_rtx (V16QImode);\n+\t  emit_move_insn (tmp1, gen_lowpart (V16QImode, tmp2));\n+\t  /* Duplicate the low byte through the whole low SImode word.  */\n+\t  emit_insn (gen_sse2_punpcklbw (tmp1, tmp1, tmp1));\n+\t  emit_insn (gen_sse2_punpcklbw (tmp1, tmp1, tmp1));\n+\t  /* Cast the V16QImode vector back to a V4SImode vector.  */\n+\t  tmp2 = gen_reg_rtx (V4SImode);\n+\t  emit_move_insn (tmp2, gen_lowpart (V4SImode, tmp1));\n+\t  /* Replicate the low element of the V4SImode vector.  */\n+\t  emit_insn (gen_sse2_pshufd (tmp2, tmp2, const0_rtx));\n+\t  /* Cast the V2SImode back to V16QImode, and store in target.  */\n+\t  emit_move_insn (target, gen_lowpart (V16QImode, tmp2));\n+\t  return true;\n+\t}\n       smode = QImode;\n       wsmode = HImode;\n       wvmode = V8HImode;"}, {"sha": "313a7fc7dce604e1344a9373c49386ebeec056bc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ff619482da2a22a0099aacfd9e3118e25256aac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ff619482da2a22a0099aacfd9e3118e25256aac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2ff619482da2a22a0099aacfd9e3118e25256aac", "patch": "@@ -1,8 +1,16 @@\n+2006-04-16  Roger Sayle  <roger@eyesopen.com>\n+\t    Dale Johannesen  <dalej@apple.com>\n+\n+\tPR target/24076\n+\t* gcc.target/i386/vecinit-3.c: New testcase.\n+\t* gcc.target/i386/vecinit-4.c: Likewise.\n+\t* gcc.target/i386/sse-18.c: Likewise.\n+\t* gcc.target/i386/sse-19.c: Likewise.\n+\n 2006-04-16  Thomas Koenig  <Thomas.Koenig@online.de>\n \n         * gfortran.dg/allocate_zerosize_1.f90:  New test.\n \n-\n 2006-04-16  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/26365"}, {"sha": "61026a110d7a6a3e439ea2d83b3c6aaa19a44a22", "filename": "gcc/testsuite/gcc.target/i386/sse-18.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ff619482da2a22a0099aacfd9e3118e25256aac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ff619482da2a22a0099aacfd9e3118e25256aac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-18.c?ref=2ff619482da2a22a0099aacfd9e3118e25256aac", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -msse2\" } */\n+extern void abort(void);\n+#include <emmintrin.h>\n+#include \"../../gcc.dg/i386-cpuid.h\"\n+__m128i foo (char) __attribute__((noinline));\n+__m128i foo (char x) {\n+  return _mm_set1_epi8(x);\n+}\n+__m128i bar (char) __attribute__((noinline));\n+__m128i bar (char x) {\n+  return _mm_set_epi8 (x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x);\n+}\n+\n+main() {\n+  int i, j;\n+  union u { __m128i v; char c[16]; };\n+  union u x, y;\n+  unsigned long cpu_facilities;\n+\n+  cpu_facilities = i386_cpuid ();\n+\n+  if ((cpu_facilities & (bit_MMX | bit_SSE | bit_CMOV))\n+      != (bit_MMX | bit_SSE | bit_CMOV))\n+    /* If host has no vector support, pass.  */\n+    return 0;\n+\n+  for (i = -128; i <= 127; i++)\n+    {\n+      x.v = foo ((char)i);\n+      y.v = bar ((char)i);\n+      for (j=0; j<16; j++)\n+\tif (x.c[j] != y.c[j])\n+\t  abort();\n+    }\n+  return 0;\n+}\n+"}, {"sha": "43c090bd4e1e25b71520ce89ff307e45e81334b7", "filename": "gcc/testsuite/gcc.target/i386/sse-19.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ff619482da2a22a0099aacfd9e3118e25256aac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ff619482da2a22a0099aacfd9e3118e25256aac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-19.c?ref=2ff619482da2a22a0099aacfd9e3118e25256aac", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -msse2\" } */\n+/* { dg-final { scan-assembler \"punpcklbw\" } } */\n+extern void abort();\n+#include <emmintrin.h>\n+__m128i foo (char) __attribute__((noinline));\n+__m128i foo (char x) {\n+  return _mm_set1_epi8(x);\n+}\n+__m128i bar (char) __attribute__((noinline));\n+__m128i bar (char x) {\n+  return _mm_set_epi8 (x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x);\n+}\n+\n+main() {\n+  int i, j;\n+  union u { __m128i v; char c[16]; };\n+  union u x, y;\n+  for (i = -128; i <= 127; i++)\n+    {\n+      x.v = foo ((char)i);\n+      y.v = bar ((char)i);\n+      for (j=0; j<16; j++)\n+\tif (x.c[j] != y.c[j])\n+\t  abort();\n+    }\n+  return 0;\n+}\n+"}, {"sha": "4cbf52133b4e06540f439f9ab2a088fd6e7efe61", "filename": "gcc/testsuite/gcc.target/i386/vecinit-3.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ff619482da2a22a0099aacfd9e3118e25256aac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvecinit-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ff619482da2a22a0099aacfd9e3118e25256aac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvecinit-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvecinit-3.c?ref=2ff619482da2a22a0099aacfd9e3118e25256aac", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+#define vector __attribute__((vector_size(16)))\n+\n+char a;\n+vector char f(void) { return (vector char){ a, a, a, a, a, a, a, a,\n+\t\t\t\t\t    a, a, a, a, a, a, a, a }; }\n+/* { dg-final { scan-assembler-not \"sall\" } } */"}, {"sha": "7a8c1d0f6c1e72a65f60658f391181e664cc9a74", "filename": "gcc/testsuite/gcc.target/i386/vecinit-4.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ff619482da2a22a0099aacfd9e3118e25256aac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvecinit-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ff619482da2a22a0099aacfd9e3118e25256aac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvecinit-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvecinit-4.c?ref=2ff619482da2a22a0099aacfd9e3118e25256aac", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+#define vector __attribute__((vector_size(16)))\n+\n+short a;\n+vector short f(void) { return (vector short){ a, a, a, a, a, a, a, a }; }\n+/* { dg-final { scan-assembler-not \"sall\" } } */"}]}