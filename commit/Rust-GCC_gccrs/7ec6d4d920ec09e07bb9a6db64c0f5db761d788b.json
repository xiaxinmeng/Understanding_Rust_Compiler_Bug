{"sha": "7ec6d4d920ec09e07bb9a6db64c0f5db761d788b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VjNmQ0ZDkyMGVjMDllMDdiYjlhNmRiNjRjMGY1ZGI3NjFkNzg4Yg==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-02-01T22:47:21Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-02-01T22:47:21Z"}, "message": "(HANDLE_PRAGMA): Change to expression with terminating character as result.\n\nFrom-SVN: r11154", "tree": {"sha": "347d0a49a28790f2f7032b0b80879c283949abf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/347d0a49a28790f2f7032b0b80879c283949abf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ec6d4d920ec09e07bb9a6db64c0f5db761d788b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ec6d4d920ec09e07bb9a6db64c0f5db761d788b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ec6d4d920ec09e07bb9a6db64c0f5db761d788b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ec6d4d920ec09e07bb9a6db64c0f5db761d788b/comments", "author": null, "committer": null, "parents": [{"sha": "20be034b3ad21d8ce339c72bae1e6ad7a4a7fe10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20be034b3ad21d8ce339c72bae1e6ad7a4a7fe10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20be034b3ad21d8ce339c72bae1e6ad7a4a7fe10"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "c67c01059b0e55ca99c2e89ef4530f90c4bf8e21", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec6d4d920ec09e07bb9a6db64c0f5db761d788b/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec6d4d920ec09e07bb9a6db64c0f5db761d788b/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=7ec6d4d920ec09e07bb9a6db64c0f5db761d788b", "patch": "@@ -119,7 +119,7 @@ Boston, MA 02111-1307, USA.  */\n   fprintf (asm_out_file, \"\\t.type\\t0x%x;\", (A & 0xf) + 2 * (A & ~0xf))\n \n /* Handle pragmas for compatibility with Intel's compilers.  */\n-#define HANDLE_PRAGMA(FILE, CH) return process_pragma (FILE, CH)\n+#define HANDLE_PRAGMA(FILE, CH) process_pragma (FILE, CH)\n \n /* Run-time compilation parameters selecting different hardware subsets.  */\n "}, {"sha": "4937c99fbb3f474ec3a52f6e959725b916136c93", "filename": "gcc/config/nextstep.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec6d4d920ec09e07bb9a6db64c0f5db761d788b/gcc%2Fconfig%2Fnextstep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec6d4d920ec09e07bb9a6db64c0f5db761d788b/gcc%2Fconfig%2Fnextstep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnextstep.h?ref=7ec6d4d920ec09e07bb9a6db64c0f5db761d788b", "patch": "@@ -241,7 +241,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef\tHANDLE_PRAGMA\n #define HANDLE_PRAGMA(finput, ch) \\\n-  return handle_pragma (finput, ch, &get_directive_line)\n+  handle_pragma (finput, ch, &get_directive_line)\n \n /* Give methods pretty symbol names on NeXT. */\n "}, {"sha": "236aaa61eaa83195164fb487750c665b62ab85e9", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec6d4d920ec09e07bb9a6db64c0f5db761d788b/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec6d4d920ec09e07bb9a6db64c0f5db761d788b/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=7ec6d4d920ec09e07bb9a6db64c0f5db761d788b", "patch": "@@ -1511,10 +1511,10 @@ extern char *output_far_jump();\n #define TARGET_MEM_FUNCTIONS\n \n /* Define this macro if you want to implement any pragmas.  If defined, it\n-   should be a C statement to be executed when #pragma is seen.  The\n+   is a C expression to be executed when #pragma is seen.  The\n    argument STREAM is the stdio input stream from which the source\n    text can be read.  CH is the first character after the #pragma.  The\n-   statement should execute a `return' with the terminating character found\n+   result of the expression is the terminating character found\n    (newline or EOF).  */\n #define HANDLE_PRAGMA(FILE, CH) return handle_pragma (FILE, CH)\n "}]}