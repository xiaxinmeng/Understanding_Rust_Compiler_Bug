{"sha": "973bce0fb50bbfd91f47238b82b99935525716ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTczYmNlMGZiNTBiYmZkOTFmNDcyMzhiODJiOTk5MzU1MjU3MTZhZA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-06-06T16:44:34Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-06-17T21:46:15Z"}, "message": "[HSA] Avoid ICE when \"HSA does not implement indirect calls\"\n\nMade apparent by recent commit dc703151d4f4560e647649506d5b4ceb0ee11e90\n\"openmp: Implement discovery of implicit declare target to clauses\":\n\n    +FAIL: libgomp.c/target-39.c (internal compiler error)\n    +FAIL: libgomp.c/target-39.c (test for excess errors)\n    +UNRESOLVED: libgomp.c/target-39.c compilation failed to produce executable\n\nThis is in a '--enable-offload-targets=[...],hsa' build, with '-foffload=hsa'\nenabled (by default).\n\n    during GIMPLE pass: hsagen\n    source-gcc/libgomp/testsuite/libgomp.c/target-39.c: In function \u2018main._omp_fn.0.hsa.0\u2019:\n    source-gcc/libgomp/testsuite/libgomp.c/target-39.c:23:11: internal compiler error: Segmentation fault\n       23 |   #pragma omp target map(from:err)\n          |           ^~~\n    [...]\n\nGDB:\n\n    Program received signal SIGSEGV, Segmentation fault.\n    fndecl_built_in_p (node=0x0, name=BUILT_IN_PREFETCH) at [...]/source-gcc/gcc/tree.h:6267\n    6267      return (fndecl_built_in_p (node, BUILT_IN_NORMAL)\n    (gdb) bt\n    #0  fndecl_built_in_p (node=0x0, name=BUILT_IN_PREFETCH) at [...]/source-gcc/gcc/tree.h:6267\n    #1  0x0000000000b19739 in gen_hsa_insns_for_call (stmt=stmt@entry=0x7ffff693b200, hbb=hbb@entry=0x2b152c0) at [...]/source-gcc/gcc/hsa-gen.c:5304\n    #2  0x0000000000b1aca7 in gen_hsa_insns_for_gimple_stmt (stmt=0x7ffff693b200, hbb=hbb@entry=0x2b152c0) at [...]/source-gcc/gcc/hsa-gen.c:5770\n    #3  0x0000000000b1bd21 in gen_body_from_gimple () at [...]/source-gcc/gcc/hsa-gen.c:5999\n    #4  0x0000000000b1dbd2 in generate_hsa (kernel=<optimized out>) at [...]/source-gcc/gcc/hsa-gen.c:6596\n    #5  0x0000000000b1de66 in (anonymous namespace)::pass_gen_hsail::execute (this=0x2a2aac0) at [...]/source-gcc/gcc/hsa-gen.c:6680\n    #6  0x0000000000d06f90 in execute_one_pass (pass=pass@entry=0x2a2aac0) at [...]/source-gcc/gcc/passes.c:2502\n    [...]\n    (gdb) up\n    #1  0x0000000000b19739 in gen_hsa_insns_for_call (stmt=stmt@entry=0x7ffff693b200, hbb=hbb@entry=0x2b152c0) at /home/thomas/tmp/source/gcc/build/track-slim-omp/source-gcc/gcc/hsa-gen.c:5304\n    5304          if (fndecl_built_in_p (function_decl, BUILT_IN_PREFETCH))\n    (gdb) print function_decl\n    $1 = (tree) 0x0\n    (gdb) list\n    5299      if (!gimple_call_builtin_p (stmt, BUILT_IN_NORMAL))\n    5300        {\n    5301          tree function_decl = gimple_call_fndecl (stmt);\n    5302          /* Prefetch pass can create type-mismatching prefetch builtin calls which\n    5303             fail the gimple_call_builtin_p test above.  Handle them here.  */\n    5304          if (fndecl_built_in_p (function_decl, BUILT_IN_PREFETCH))\n    5305            return;\n    5306\n    5307          if (function_decl == NULL_TREE)\n    5308            {\n\nThe problem is present already since 2016-11-23 commit\n56b1c60e412fcf1245b4780871553cbdebb956a3 (r242761) \"Merge from HSA branch to\ntrunk\", and the fix obvious enough.\n\n\tgcc/\n\t* hsa-gen.c (gen_hsa_insns_for_call): Move 'function_decl ==\n\tNULL_TREE' check earlier.\n\tgcc/testsuite/\n\t* c-c++-common/gomp/hsa-indirect-call-1.c: New file.", "tree": {"sha": "7afeb355f03448a05e88373a8faff4ebe62553e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7afeb355f03448a05e88373a8faff4ebe62553e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/973bce0fb50bbfd91f47238b82b99935525716ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/973bce0fb50bbfd91f47238b82b99935525716ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/973bce0fb50bbfd91f47238b82b99935525716ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/973bce0fb50bbfd91f47238b82b99935525716ad/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4df94a0330e25efdd9707087fd7365722a47d51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4df94a0330e25efdd9707087fd7365722a47d51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4df94a0330e25efdd9707087fd7365722a47d51"}], "stats": {"total": 33, "additions": 29, "deletions": 4}, "files": [{"sha": "2af999048b22014c43494775d7c30c65ae85ab17", "filename": "gcc/hsa-gen.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973bce0fb50bbfd91f47238b82b99935525716ad/gcc%2Fhsa-gen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973bce0fb50bbfd91f47238b82b99935525716ad/gcc%2Fhsa-gen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-gen.c?ref=973bce0fb50bbfd91f47238b82b99935525716ad", "patch": "@@ -5299,10 +5299,6 @@ gen_hsa_insns_for_call (gimple *stmt, hsa_bb *hbb)\n   if (!gimple_call_builtin_p (stmt, BUILT_IN_NORMAL))\n     {\n       tree function_decl = gimple_call_fndecl (stmt);\n-      /* Prefetch pass can create type-mismatching prefetch builtin calls which\n-\t fail the gimple_call_builtin_p test above.  Handle them here.  */\n-      if (fndecl_built_in_p (function_decl, BUILT_IN_PREFETCH))\n-\treturn;\n \n       if (function_decl == NULL_TREE)\n \t{\n@@ -5311,6 +5307,11 @@ gen_hsa_insns_for_call (gimple *stmt, hsa_bb *hbb)\n \t  return;\n \t}\n \n+      /* Prefetch pass can create type-mismatching prefetch builtin calls which\n+\t fail the gimple_call_builtin_p test above.  Handle them here.  */\n+      if (fndecl_built_in_p (function_decl, BUILT_IN_PREFETCH))\n+\treturn;\n+\n       if (hsa_callable_function_p (function_decl))\n \tgen_hsa_insns_for_direct_call (stmt, hbb);\n       else if (!gen_hsa_insns_for_known_library_call (stmt, hbb))"}, {"sha": "67ee6af309a8e0b6ff87d7f2c35f6f44e5a8b84c", "filename": "gcc/testsuite/c-c++-common/gomp/hsa-indirect-call-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973bce0fb50bbfd91f47238b82b99935525716ad/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fhsa-indirect-call-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973bce0fb50bbfd91f47238b82b99935525716ad/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fhsa-indirect-call-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fhsa-indirect-call-1.c?ref=973bce0fb50bbfd91f47238b82b99935525716ad", "patch": "@@ -0,0 +1,24 @@\n+/* Instead of ICE, we'd like \"HSA does not implement indirect calls\".  */\n+\n+/* Reduced from 'libgomp.c/target-39.c'.  */\n+\n+/* { dg-require-effective-target offload_hsa } */\n+/* { dg-additional-options \"-Whsa\" } to override '{gcc,g++}.dg/gomp/gomp.exp'.  */\n+\n+typedef void (*fnp) (void);\n+void f1 (void) { }\n+fnp f2 (void) { return f1; }\n+#pragma omp declare target to (f1, f2)\n+\n+int\n+main ()\n+{\n+  #pragma omp target\n+  {\n+    fnp fnp = f2 ();\n+    fnp (); /* { dg-message \"note: support for HSA does not implement indirect calls\" } */\n+  }\n+  return 0;\n+}\n+\n+/* { dg-warning \"could not emit HSAIL for the function\" \"\" { target *-*-* } 0 } */"}]}