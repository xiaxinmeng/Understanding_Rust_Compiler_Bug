{"sha": "643e0a30873598350e984f7391a2cbabb9f24706", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQzZTBhMzA4NzM1OTgzNTBlOTg0ZjczOTFhMmNiYWJiOWYyNDcwNg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-06-10T07:57:34Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-06-10T07:57:34Z"}, "message": "Fix BITMAP identifier clash.\n\n\tPR bootstrap/66471\n\t* mem-stats-traits.h (enum mem_alloc_origin): Add _ORIGIN suffix for\n\tall enum values in mem_alloc_origin.\n\t* alloc-pool.c (dump_alloc_pool_statistics): Use newly changed enum\n\tname.\n\t* alloc-pool.h (pool_allocator::pool_allocator): Likewise.\n\t* bitmap.c (bitmap_register): Likewise.\n\t(dump_bitmap_statistics): Likewise.\n\t* ggc-common.c (dump_ggc_loc_statistics): Likewise.\n\t(ggc_record_overhead): Likewise.\n\t* hash-map.h: Likewise.\n\t* hash-set.h: Likewise.\n\t* hash-table.c (void dump_hash_table_loc_statistics): Likewise.\n\t* hash-table.h: Likewise.\n\t* vec.c (vec_prefix::register_overhead): Likewise.\n\t(vec_prefix::release_overhead): Likewise.\n\t(dump_vec_loc_statistics): Likewise.\n\nFrom-SVN: r224315", "tree": {"sha": "2c5a813f6081fa75e5c459fbf46f682f864e756b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c5a813f6081fa75e5c459fbf46f682f864e756b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/643e0a30873598350e984f7391a2cbabb9f24706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/643e0a30873598350e984f7391a2cbabb9f24706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/643e0a30873598350e984f7391a2cbabb9f24706", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/643e0a30873598350e984f7391a2cbabb9f24706/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d5524d521efc91c4b8d8efe2ebace3176aa092e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5524d521efc91c4b8d8efe2ebace3176aa092e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5524d521efc91c4b8d8efe2ebace3176aa092e5"}], "stats": {"total": 65, "additions": 44, "deletions": 21}, "files": [{"sha": "3d97a8d08c32f44a892a8b8d27841b2fd3c9a7c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643e0a30873598350e984f7391a2cbabb9f24706/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643e0a30873598350e984f7391a2cbabb9f24706/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=643e0a30873598350e984f7391a2cbabb9f24706", "patch": "@@ -1,3 +1,23 @@\n+2015-06-10  Martin Liska  <mliska@suse.cz>\n+\n+\tPR bootstrap/66471\n+\t* mem-stats-traits.h (enum mem_alloc_origin): Add _ORIGIN suffix for\n+\tall enum values in mem_alloc_origin.\n+\t* alloc-pool.c (dump_alloc_pool_statistics): Use newly changed enum\n+\tname.\n+\t* alloc-pool.h (pool_allocator::pool_allocator): Likewise.\n+\t* bitmap.c (bitmap_register): Likewise.\n+\t(dump_bitmap_statistics): Likewise.\n+\t* ggc-common.c (dump_ggc_loc_statistics): Likewise.\n+\t(ggc_record_overhead): Likewise.\n+\t* hash-map.h: Likewise.\n+\t* hash-set.h: Likewise.\n+\t* hash-table.c (void dump_hash_table_loc_statistics): Likewise.\n+\t* hash-table.h: Likewise.\n+\t* vec.c (vec_prefix::register_overhead): Likewise.\n+\t(vec_prefix::release_overhead): Likewise.\n+\t(dump_vec_loc_statistics): Likewise.\n+\n 2015-06-09  Christian Bruel  <christian.bruel@st.com>\n \n \tPR target/52144"}, {"sha": "7e25915ca6bb112e916a3092b687c25e8d87f607", "filename": "gcc/alloc-pool.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643e0a30873598350e984f7391a2cbabb9f24706/gcc%2Falloc-pool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643e0a30873598350e984f7391a2cbabb9f24706/gcc%2Falloc-pool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.c?ref=643e0a30873598350e984f7391a2cbabb9f24706", "patch": "@@ -33,5 +33,5 @@ dump_alloc_pool_statistics (void)\n   if (! GATHER_STATISTICS)\n     return;\n \n-  pool_allocator_usage.dump (ALLOC_POOL);\n+  pool_allocator_usage.dump (ALLOC_POOL_ORIGIN);\n }"}, {"sha": "1785df5c2ce2c9740cc6faab90a36ac0f7d6d3ba", "filename": "gcc/alloc-pool.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643e0a30873598350e984f7391a2cbabb9f24706/gcc%2Falloc-pool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643e0a30873598350e984f7391a2cbabb9f24706/gcc%2Falloc-pool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.h?ref=643e0a30873598350e984f7391a2cbabb9f24706", "patch": "@@ -232,7 +232,7 @@ pool_allocator<T>::pool_allocator (const char *name, size_t num,\n   m_elts_free (0), m_blocks_allocated (0), m_block_list (NULL),\n   m_block_size (0), m_ignore_type_size (ignore_type_size),\n   m_extra_size (extra_size), m_initialized (false),\n-  m_location (ALLOC_POOL, false PASS_MEM_STAT) {}\n+  m_location (ALLOC_POOL_ORIGIN, false PASS_MEM_STAT) {}\n \n /* Initialize a pool allocator.  */\n "}, {"sha": "733c76727cddc3eb89d0a126151a75017f146a10", "filename": "gcc/bitmap.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643e0a30873598350e984f7391a2cbabb9f24706/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643e0a30873598350e984f7391a2cbabb9f24706/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=643e0a30873598350e984f7391a2cbabb9f24706", "patch": "@@ -30,7 +30,8 @@ mem_alloc_description<bitmap_usage> bitmap_mem_desc;\n void\n bitmap_register (bitmap b MEM_STAT_DECL)\n {\n-  bitmap_mem_desc.register_descriptor (b, BITMAP, false FINAL_PASS_MEM_STAT);\n+  bitmap_mem_desc.register_descriptor (b, BITMAP_ORIGIN, false\n+\t\t\t\t       FINAL_PASS_MEM_STAT);\n }\n \n /* Account the overhead.  */\n@@ -2076,7 +2077,7 @@ dump_bitmap_statistics (void)\n   if (! GATHER_STATISTICS)\n     return;\n \n-  bitmap_mem_desc.dump (BITMAP);\n+  bitmap_mem_desc.dump (BITMAP_ORIGIN);\n }\n \n DEBUG_FUNCTION void"}, {"sha": "60d427f8f11af262beeffa54cac5c402b5fe7776", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643e0a30873598350e984f7391a2cbabb9f24706/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643e0a30873598350e984f7391a2cbabb9f24706/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=643e0a30873598350e984f7391a2cbabb9f24706", "patch": "@@ -977,7 +977,7 @@ dump_ggc_loc_statistics (bool final)\n   ggc_force_collect = true;\n   ggc_collect ();\n \n-  ggc_mem_desc.dump (GGC, final ? ggc_usage::compare_final : NULL);\n+  ggc_mem_desc.dump (GGC_ORIGIN, final ? ggc_usage::compare_final : NULL);\n \n   ggc_force_collect = false;\n }\n@@ -986,7 +986,7 @@ dump_ggc_loc_statistics (bool final)\n void\n ggc_record_overhead (size_t allocated, size_t overhead, void *ptr MEM_STAT_DECL)\n {\n-  ggc_usage *usage = ggc_mem_desc.register_descriptor (ptr, GGC, false\n+  ggc_usage *usage = ggc_mem_desc.register_descriptor (ptr, GGC_ORIGIN, false\n \t\t\t\t\t\t       FINAL_PASS_MEM_STAT);\n \n   ggc_mem_desc.register_object_overhead (usage, allocated + overhead, ptr);"}, {"sha": "2f1bca4d950fefd3f48b79f9ea15bab1afb4eb9d", "filename": "gcc/hash-map.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643e0a30873598350e984f7391a2cbabb9f24706/gcc%2Fhash-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643e0a30873598350e984f7391a2cbabb9f24706/gcc%2Fhash-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-map.h?ref=643e0a30873598350e984f7391a2cbabb9f24706", "patch": "@@ -107,7 +107,7 @@ class GTY((user)) hash_map\n public:\n   explicit hash_map (size_t n = 13, bool ggc = false,\n \t\t     bool gather_mem_stats = true CXX_MEM_STAT_INFO)\n-    : m_table (n, ggc, gather_mem_stats, HASH_MAP PASS_MEM_STAT) {}\n+    : m_table (n, ggc, gather_mem_stats, HASH_MAP_ORIGIN PASS_MEM_STAT) {}\n \n   /* Create a hash_map in ggc memory.  */\n   static hash_map *create_ggc (size_t size, bool gather_mem_stats = true"}, {"sha": "3ec0b1591d1950fbe8837ce17c779ca132f3f077", "filename": "gcc/hash-set.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643e0a30873598350e984f7391a2cbabb9f24706/gcc%2Fhash-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643e0a30873598350e984f7391a2cbabb9f24706/gcc%2Fhash-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-set.h?ref=643e0a30873598350e984f7391a2cbabb9f24706", "patch": "@@ -179,7 +179,7 @@ class hash_set\n \n public:\n   explicit hash_set (size_t n = 13, bool ggc = false CXX_MEM_STAT_INFO)\n-    : m_table (n, ggc, true, HASH_SET PASS_MEM_STAT) {}\n+    : m_table (n, ggc, true, HASH_SET_ORIGIN PASS_MEM_STAT) {}\n \n   /* Create a hash_set in gc memory with space for at least n elements.  */\n "}, {"sha": "a42b884189d8abd9a5e3e69194ed73828f098bc9", "filename": "gcc/hash-table.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643e0a30873598350e984f7391a2cbabb9f24706/gcc%2Fhash-table.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643e0a30873598350e984f7391a2cbabb9f24706/gcc%2Fhash-table.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-table.c?ref=643e0a30873598350e984f7391a2cbabb9f24706", "patch": "@@ -103,7 +103,7 @@ mem_alloc_description<mem_usage> hash_table_usage;\n /* Support function for statistics.  */\n void dump_hash_table_loc_statistics (void)\n {\n-  for (unsigned i = HASH_TABLE; i <= HASH_SET; i++)\n+  for (unsigned i = HASH_TABLE_ORIGIN; i <= HASH_SET_ORIGIN; i++)\n     {\n       mem_alloc_origin origin = (mem_alloc_origin) i;\n       hash_table_usage.dump (origin);"}, {"sha": "1b9322d2c54124a051ed2fbd7fcec3a851c61550", "filename": "gcc/hash-table.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643e0a30873598350e984f7391a2cbabb9f24706/gcc%2Fhash-table.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643e0a30873598350e984f7391a2cbabb9f24706/gcc%2Fhash-table.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-table.h?ref=643e0a30873598350e984f7391a2cbabb9f24706", "patch": "@@ -590,7 +590,7 @@ class hash_table\n \n public:\n   explicit hash_table (size_t, bool ggc = false, bool gather_mem_stats = true,\n-\t\t       mem_alloc_origin origin = HASH_TABLE\n+\t\t       mem_alloc_origin origin = HASH_TABLE_ORIGIN\n \t\t       CXX_MEM_STAT_INFO);\n   ~hash_table ();\n \n@@ -600,7 +600,7 @@ class hash_table\n   create_ggc (size_t n CXX_MEM_STAT_INFO)\n   {\n     hash_table *table = ggc_alloc<hash_table> ();\n-    new (table) hash_table (n, true, true, HASH_TABLE PASS_MEM_STAT);\n+    new (table) hash_table (n, true, true, HASH_TABLE_ORIGIN PASS_MEM_STAT);\n     return table;\n   }\n "}, {"sha": "5d270474fc4775cff9f74f88ed6197fb06cd8c9b", "filename": "gcc/mem-stats-traits.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643e0a30873598350e984f7391a2cbabb9f24706/gcc%2Fmem-stats-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643e0a30873598350e984f7391a2cbabb9f24706/gcc%2Fmem-stats-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmem-stats-traits.h?ref=643e0a30873598350e984f7391a2cbabb9f24706", "patch": "@@ -4,13 +4,13 @@\n /* Memory allocation origin.  */\n enum mem_alloc_origin\n {\n-  HASH_TABLE,\n-  HASH_MAP,\n-  HASH_SET,\n-  VEC,\n-  BITMAP,\n-  GGC,\n-  ALLOC_POOL,\n+  HASH_TABLE_ORIGIN,\n+  HASH_MAP_ORIGIN,\n+  HASH_SET_ORIGIN,\n+  VEC_ORIGIN,\n+  BITMAP_ORIGIN,\n+  GGC_ORIGIN,\n+  ALLOC_POOL_ORIGIN,\n   MEM_ALLOC_ORIGIN_LENGTH\n };\n "}, {"sha": "b6c31785cc4b74d09b94f973674e265a3f2cc5e3", "filename": "gcc/vec.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643e0a30873598350e984f7391a2cbabb9f24706/gcc%2Fvec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643e0a30873598350e984f7391a2cbabb9f24706/gcc%2Fvec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.c?ref=643e0a30873598350e984f7391a2cbabb9f24706", "patch": "@@ -136,7 +136,8 @@ void\n vec_prefix::register_overhead (void *ptr, size_t size, size_t elements\n \t\t\t       MEM_STAT_DECL)\n {\n-  vec_mem_desc.register_descriptor (ptr, VEC, false FINAL_PASS_MEM_STAT);\n+  vec_mem_desc.register_descriptor (ptr, VEC_ORIGIN, false\n+\t\t\t\t    FINAL_PASS_MEM_STAT);\n   vec_usage *usage = vec_mem_desc.register_instance_overhead (size, ptr);\n   usage->m_items += elements;\n   if (usage->m_items_peak < usage->m_items)\n@@ -150,7 +151,8 @@ vec_prefix::release_overhead (void *ptr, size_t size, bool in_dtor\n \t\t\t      MEM_STAT_DECL)\n {\n   if (!vec_mem_desc.contains_descriptor_for_instance (ptr))\n-    vec_mem_desc.register_descriptor (ptr, VEC, false FINAL_PASS_MEM_STAT);\n+    vec_mem_desc.register_descriptor (ptr, VEC_ORIGIN,\n+\t\t\t\t      false FINAL_PASS_MEM_STAT);\n   vec_mem_desc.release_instance_overhead (ptr, size, in_dtor);\n }\n \n@@ -185,5 +187,5 @@ vec_prefix::calculate_allocation_1 (unsigned alloc, unsigned desired)\n void\n dump_vec_loc_statistics (void)\n {\n-  vec_mem_desc.dump (VEC);\n+  vec_mem_desc.dump (VEC_ORIGIN);\n }"}]}