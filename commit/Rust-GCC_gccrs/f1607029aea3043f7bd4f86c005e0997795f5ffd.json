{"sha": "f1607029aea3043f7bd4f86c005e0997795f5ffd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE2MDcwMjlhZWEzMDQzZjdiZDRmODZjMDA1ZTA5OTc3OTVmNWZmZA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-02T00:16:26Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-02T00:16:26Z"}, "message": "Daily bump.", "tree": {"sha": "2dda3d6e1c0aeec01c371b9e576a687d0d6bd098", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dda3d6e1c0aeec01c371b9e576a687d0d6bd098"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1607029aea3043f7bd4f86c005e0997795f5ffd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1607029aea3043f7bd4f86c005e0997795f5ffd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1607029aea3043f7bd4f86c005e0997795f5ffd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1607029aea3043f7bd4f86c005e0997795f5ffd/comments", "author": null, "committer": null, "parents": [{"sha": "6e943d5a2e3c581e40ccab46bec986a1f22c70c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e943d5a2e3c581e40ccab46bec986a1f22c70c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e943d5a2e3c581e40ccab46bec986a1f22c70c2"}], "stats": {"total": 201, "additions": 200, "deletions": 1}, "files": [{"sha": "05cee5c8b9c37ac6a48cbeb0b0fe021a418c5368", "filename": "c++tools/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1607029aea3043f7bd4f86c005e0997795f5ffd/c%2B%2Btools%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1607029aea3043f7bd4f86c005e0997795f5ffd/c%2B%2Btools%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/c%2B%2Btools%2FChangeLog?ref=f1607029aea3043f7bd4f86c005e0997795f5ffd", "patch": "@@ -1,3 +1,8 @@\n+2021-04-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* resolver.h: Do not include std headers directly when\n+\tbuilding in GCC.\n+\n 2021-02-25  Nathan Sidwell  <nathan@acm.org>\n \n \t* server.cc: Use #if NETWORKING not #ifdef, to be consistent"}, {"sha": "46e8cf4fbe02c3b613e6b68fe7f6bc7558cfc5dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1607029aea3043f7bd4f86c005e0997795f5ffd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1607029aea3043f7bd4f86c005e0997795f5ffd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1607029aea3043f7bd4f86c005e0997795f5ffd", "patch": "@@ -1,3 +1,38 @@\n+2021-04-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/98481\n+\t* common.opt: Document v15 and v16.\n+\n+2021-04-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99863\n+\t* gimplify.c (gimplify_init_constructor): Recompute vector\n+\tconstructor flags.\n+\n+2021-04-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* doc/extend.texi (symver attribute): Fix up syntax errors\n+\tin the examples.\n+\n+2021-04-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96573\n+\t* gimple-ssa-store-merging.c (init_symbolic_number): Handle\n+\talso pointer types.\n+\n+2021-04-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99856\n+\t* tree-vect-patterns.c (vect_recog_over_widening_pattern): Promote\n+\tprecision to vector element precision.\n+\n+2021-04-01  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/97009\n+\t* tree-sra.c (access_or_its_child_written): New function.\n+\t(propagate_subaccesses_from_rhs): Use it instead of a simple grp_write\n+\ttest.\n+\n 2021-03-31  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/98265"}, {"sha": "f05935b69b1f562e8f082ed1ac06a987b6d70271", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1607029aea3043f7bd4f86c005e0997795f5ffd/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1607029aea3043f7bd4f86c005e0997795f5ffd/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=f1607029aea3043f7bd4f86c005e0997795f5ffd", "patch": "@@ -1 +1 @@\n-20210401\n+20210402"}, {"sha": "fadf9d35490c4af97a0534d3cbedc196c80581b9", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1607029aea3043f7bd4f86c005e0997795f5ffd/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1607029aea3043f7bd4f86c005e0997795f5ffd/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=f1607029aea3043f7bd4f86c005e0997795f5ffd", "patch": "@@ -1,3 +1,59 @@\n+2021-04-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-manager.cc (diagnostic_manager::add_diagnostic): Make\n+\tenode param non-constant, and call add_diagnostic on it.  Add\n+\tenode index to log message.\n+\t(diagnostic_manager::add_diagnostic): Make enode param\n+\tnon-constant.\n+\t* diagnostic-manager.h (diagnostic_manager::add_diagnostic):\n+\tLikewise for both decls.\n+\t* engine.cc\n+\t(impl_region_model_context::impl_region_model_context): Likewise\n+\tfor enode_for_diag.\n+\t(impl_sm_context::impl_sm_context): Likewise.\n+\t(impl_sm_context::m_enode_for_diag): Likewise.\n+\t(exploded_node::dump_dot): Don't pass the diagnostic manager\n+\tto dump_saved_diagnostics.\n+\t(exploded_node::dump_saved_diagnostics): Drop param.  Iterate\n+\tdirectly through all saved diagnostics for the enode, rather\n+\tthan all saved diagnostics in the diagnostic_manager and\n+\tfiltering.\n+\t(exploded_node::on_stmt): Make non-const.\n+\t(exploded_node::on_edge): Likewise.\n+\t(exploded_node::on_longjmp): Likewise.\n+\t(exploded_node::detect_leaks): Likewise.\n+\t(exploded_graph::get_or_create_node): Make enode_for_diag param\n+\tnon-const.\n+\t(exploded_graph_annotator::print_enode): Iterate\n+\tdirectly through all saved diagnostics for the enode, rather\n+\tthan all saved diagnostics in the diagnostic_manager and\n+\tfiltering.\n+\t* exploded-graph.h\n+\t(impl_region_model_context::impl_region_model_context): Make\n+\tenode_for_diag param non-constant.\n+\t(impl_region_model_context::m_enode_for_diag): Likewise.\n+\t(exploded_node::dump_saved_diagnostics): Drop param.\n+\t(exploded_node::on_stmt): Make non-const.\n+\t(exploded_node::on_edge): Likewise.\n+\t(exploded_node::on_longjmp): Likewise.\n+\t(exploded_node::detect_leaks): Likewise.\n+\t(exploded_node::add_diagnostic): New.\n+\t(exploded_node::get_num_diagnostics): New.\n+\t(exploded_node::get_saved_diagnostic): New.\n+\t(exploded_node::m_saved_diagnostics): New.\n+\t(exploded_graph::get_or_create_node): Make enode_for_diag param\n+\tnon-constant.\n+\t* feasible-graph.cc (feasible_node::dump_dot): Drop\n+\tdiagnostic_manager from call to dump_saved_diagnostics.\n+\t* program-state.cc (program_state::on_edge): Convert enode param\n+\tto non-const pointer.\n+\t(program_state::prune_for_point): Likewise for enode_for_diag\n+\tparam.\n+\t* program-state.h (program_state::on_edge): Convert enode param\n+\tto non-const pointer.\n+\t(program_state::prune_for_point): Likewise for enode_for_diag\n+\tparam.\n+\n 2021-03-31  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/99771"}, {"sha": "6c727e379df4d398af67bd4442738a31ceabd4b6", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1607029aea3043f7bd4f86c005e0997795f5ffd/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1607029aea3043f7bd4f86c005e0997795f5ffd/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f1607029aea3043f7bd4f86c005e0997795f5ffd", "patch": "@@ -1,3 +1,8 @@\n+2021-04-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/98481\n+\t* c-opts.c (c_common_post_options): Bump latest_abi_version.\n+\n 2021-03-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/99565"}, {"sha": "d0aa8a545e521bd84a698d91b36b305bfb2075c6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1607029aea3043f7bd4f86c005e0997795f5ffd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1607029aea3043f7bd4f86c005e0997795f5ffd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f1607029aea3043f7bd4f86c005e0997795f5ffd", "patch": "@@ -1,3 +1,39 @@\n+2021-04-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/99831\n+\t* method.c (defaulted_late_check): ++ and -- function_depth around\n+\tthe call to synthesize_method.\n+\t* pt.c: Remove the saved_trees global.\n+\n+2021-04-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/99583\n+\tPR c++/99584\n+\t* tree.c (cp_walk_subtrees) [FUNCTION_TYPE]: Walk into\n+\tTYPE_RAISES_EXCEPTIONS.\n+\n+2021-04-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* mapper-client.cc (INCLUDE_MAP): New; require map to be\n+\tincluded from system.h.\n+\t* mapper-resolver.cc (INCLUDE_MAP): Likewise.\n+\n+2021-04-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/98481\n+\t* mangle.c (write_expression): Adjust.\n+\t* class.c (find_abi_tags_r): Disable PR98481 fix for ABI v14.\n+\t(mark_abi_tags_r): Likewise.\n+\n+2021-04-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99283\n+\t* module.cc (trees_out::decl_node): Adjust importedness reference\n+\tassert.\n+\t(module_state::intercluster_seed): New.  Seed both imports and\n+\tinter-cluster references.  Broken out of ...\n+\t(module_state::write_cluster): ... here.  Call it.\n+\n 2021-03-31  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/99445"}, {"sha": "d8ca13f9399ee407eec6c9741e4d5d9016296b4b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1607029aea3043f7bd4f86c005e0997795f5ffd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1607029aea3043f7bd4f86c005e0997795f5ffd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f1607029aea3043f7bd4f86c005e0997795f5ffd", "patch": "@@ -1,3 +1,9 @@\n+2021-04-01  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/99840\n+\t* simplify.c (gfc_simplify_transpose): Properly initialize\n+\tresulting shape.\n+\n 2021-03-28  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/99602"}, {"sha": "de21a1d640c372fdd00096f29a0b749ba71ce085", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1607029aea3043f7bd4f86c005e0997795f5ffd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1607029aea3043f7bd4f86c005e0997795f5ffd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f1607029aea3043f7bd4f86c005e0997795f5ffd", "patch": "@@ -1,3 +1,59 @@\n+2021-04-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/99831\n+\t* g++.dg/other/gc6.C: New test.\n+\n+2021-04-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/99583\n+\t* g++.dg/cpp0x/lambda/lambda-variadic12.C: New test.\n+\n+2021-04-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/98481\n+\t* g++.dg/abi/abi-tag24a.C: New test.\n+\t* g++.dg/abi/macro0.C: Adjust expected value.\n+\n+2021-04-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99283\n+\t* g++.dg/modules/pr99283-6.h: New.\n+\t* g++.dg/modules/pr99283-6_a.H: New.\n+\t* g++.dg/modules/pr99283-6_b.H: New.\n+\t* g++.dg/modules/pr99283-6_c.C: New.\n+\t* g++.dg/modules/hdr-init-1_c.C: Adjust scan.\n+\t* g++.dg/modules/indirect-3_c.C: Adjust scan.\n+\t* g++.dg/modules/indirect-4_c.C: Adjust scan.\n+\t* g++.dg/modules/lambda-3_b.C: Adjust scan.\n+\t* g++.dg/modules/late-ret-3_c.C: Adjust scan.\n+\t* g++.dg/modules/pr99425-1_b.H: Adjust scan.\n+\t* g++.dg/modules/pr99425-1_c.C: Adjust scan.\n+\n+2021-04-01  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/98265\n+\t* gcc.dg/tree-ssa/pr98265.C: New test.\n+\n+2021-04-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96573\n+\t* gcc.dg/pr96573.c: New test.\n+\n+2021-04-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99856\n+\t* gcc.dg/vect/pr99856.c: New testcase.\n+\n+2021-04-01  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/97009\n+\t* gcc.dg/tree-ssa/pr97009.c: New test.\n+\n+2021-04-01  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/99840\n+\t* gfortran.dg/transpose_5.f90: New test.\n+\n 2021-03-31  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/99771"}]}