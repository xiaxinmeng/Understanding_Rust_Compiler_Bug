{"sha": "30afe5e7638cb4233692978365e4ceb4f8d2dc84", "node_id": "C_kwDOANBUbNoAKDMwYWZlNWU3NjM4Y2I0MjMzNjkyOTc4MzY1ZTRjZWI0ZjhkMmRjODQ", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-08-19T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-08-19T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "599410a1360bbe8c7e85e3cba292df7331951809", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/599410a1360bbe8c7e85e3cba292df7331951809"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30afe5e7638cb4233692978365e4ceb4f8d2dc84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30afe5e7638cb4233692978365e4ceb4f8d2dc84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30afe5e7638cb4233692978365e4ceb4f8d2dc84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30afe5e7638cb4233692978365e4ceb4f8d2dc84/comments", "author": null, "committer": null, "parents": [{"sha": "d7c3000147c1d8090f66a2baf4623d2c0dfe8eb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7c3000147c1d8090f66a2baf4623d2c0dfe8eb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7c3000147c1d8090f66a2baf4623d2c0dfe8eb6"}], "stats": {"total": 358, "additions": 357, "deletions": 1}, "files": [{"sha": "eccdff9358b6a1935225ffaa3ac6fe10c3b9fd96", "filename": "ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30afe5e7638cb4233692978365e4ceb4f8d2dc84/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30afe5e7638cb4233692978365e4ceb4f8d2dc84/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=30afe5e7638cb4233692978365e4ceb4f8d2dc84", "patch": "@@ -1,3 +1,17 @@\n+2022-08-18  Sergei Trofimovich  <siarheit@google.com>\n+\n+\t* Makefile.def: Drop libelf module and gcc-configure dependency\n+\ton it.\n+\t* Makefile.in: Regenerate with 'autogen Makefile.def'.\n+\t* Makefile.tpl (HOST_EXPORTS): Drop unused LIBELFLIBS and\n+\tLIBELFINC.\n+\t* configure: Regenrate.\n+\t* configure.ac (host_libs): Drop unused libelf.\n+\n+2022-08-18  Sergei Trofimovich  <siarheit@google.com>\n+\n+\t* Makefile.in: Regenerate.\n+\n 2022-08-04  Eugene Rozenfeld  <erozen@microsoft.com>\n \n \t* MAINTAINERS: Add myself as AutoFDO maintainer."}, {"sha": "f4184ee07b3f1ccbe2f28869c9c89eac6d24bbd7", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30afe5e7638cb4233692978365e4ceb4f8d2dc84/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30afe5e7638cb4233692978365e4ceb4f8d2dc84/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=30afe5e7638cb4233692978365e4ceb4f8d2dc84", "patch": "@@ -1,3 +1,7 @@\n+2022-08-18  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* git-fetch-vendor.sh : Fix typo.\n+\n 2022-08-02  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_commit.py: Do not deduce changelog for root ChangeLog."}, {"sha": "0500118daedb9256d8ad8c68ca393eba39c5b154", "filename": "gcc/ChangeLog", "status": "modified", "additions": 243, "deletions": 0, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30afe5e7638cb4233692978365e4ceb4f8d2dc84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30afe5e7638cb4233692978365e4ceb4f8d2dc84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30afe5e7638cb4233692978365e4ceb4f8d2dc84", "patch": "@@ -1,3 +1,246 @@\n+2022-08-18  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* config/xtensa/xtensa.h\n+\t(enum reg_class, REG_CLASS_NAMES, REG_CLASS_CONTENTS):\n+\tAdd new register class \"ISC_REGS\".\n+\t* config/xtensa/constraints.md (c): Add new register constraint.\n+\t* config/xtensa/xtensa.md (define_constants): Remove \"A11_REG\".\n+\t(sibcall_internal, sibcall_value_internal):\n+\tChange to use the new register constraint, and remove two split\n+\tpatterns for fixups that are no longer needed.\n+\n+2022-08-18  Maciej W. Rozycki  <macro@embecosm.com>\n+\n+\t* config/riscv/riscv.md (*mov<GPR:mode><X:mode>cc): Fix output\n+\tpattern formatting.\n+\n+2022-08-18  Tim Lange  <mail@tim-lange.me>\n+\n+\tPR analyzer/106181\n+\t* doc/invoke.texi: Add Wanalyzer-imprecise-fp-arithmetic.\n+\n+2022-08-18  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-path.cc (path_range_query::path_range_query): Add\n+\tvarious constructors to take a path.\n+\t(path_range_query::~path_range_query): Remove m_alloced_ranger.\n+\t(path_range_query::range_on_path_entry): Adjust for m_ranger being\n+\ta reference.\n+\t(path_range_query::set_path): Rename to...\n+\t(path_range_query::reset_path): ...this and call compute_ranges.\n+\t(path_range_query::ssa_range_in_phi): Adjust for m_ranger\n+\treference.\n+\t(path_range_query::range_defined_in_block): Same.\n+\t(path_range_query::compute_ranges_in_block): Same.\n+\t(path_range_query::adjust_for_non_null_uses): Same.\n+\t(path_range_query::compute_exit_dependencies): Use m_path instead\n+\tof argument.\n+\t(path_range_query::compute_ranges): Remove path argument.\n+\t(path_range_query::range_of_stmt): Adjust for m_ranger reference.\n+\t(path_range_query::compute_outgoing_relations): Same.\n+\t* gimple-range-path.h (class path_range_query): Add various\n+\tconstructors.\n+\tMake compute_ranges and compute_exit_dependencies private.\n+\tRename set_path to reset_path.\n+\tMake m_ranger a reference.\n+\tRemove m_alloced_ranger.\n+\t* tree-ssa-dom.cc (pass_dominator::execute): Adjust constructor to\n+\tpath_range_query.\n+\t* tree-ssa-loop-ch.cc (entry_loop_condition_is_static): Take a\n+\tranger and instantiate a new path_range_query every time.\n+\t(ch_base::copy_headers): Pass ranger instead of path_range_query.\n+\t* tree-ssa-threadbackward.cc (class back_threader): Remove m_solver.\n+\t(back_threader::~back_threader): Remove m_solver.\n+\t(back_threader::find_taken_edge_switch): Adjust for m_ranger\n+\treference.\n+\t(back_threader::find_taken_edge_cond): Same.\n+\t(back_threader::dump): Remove m_solver.\n+\t(back_threader::back_threader): Move verify_marked_backedges\n+\there from the path_range_query constructor.\n+\t* tree-ssa-threadedge.cc (hybrid_jt_simplifier::simplify): Move\n+\tsome code from compute_ranges_from_state here.\n+\t(hybrid_jt_simplifier::compute_ranges_from_state): Rename...\n+\t(hybrid_jt_simplifier::compute_exit_dependencies): ...to this.\n+\t* tree-ssa-threadedge.h (class hybrid_jt_simplifier): Rename\n+\tcompute_ranges_from_state to compute_exit_dependencies.\n+\tRemove m_path.\n+\n+2022-08-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/106617\n+\t* match.pd ((a ? b : c) > d -> a ? (b > d) : (c > d)): Fix\n+\tguard, disable on GENERIC to not cause quadratic behavior\n+\twith the fold-const.cc implementation and the use of !\n+\n+2022-08-18  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR gcov-profile/106659\n+\t* gcov-dump.cc (INCLUDE_VECTOR): Include vector.h with\n+\t  INCLUDE_VECTOR.\n+\n+2022-08-18  konglin1  <lingling.kong@intel.com>\n+\n+\t* config/i386/i386-expand.cc (ix86_expand_sse_movcc): Handle vector\n+\tBFmode.\n+\t(ix86_expand_vector_init_duplicate): Support vector BFmode.\n+\t(ix86_expand_vector_init_one_nonzero): Ditto.\n+\t(ix86_expand_vector_init_one_var): Ditto.\n+\t(ix86_expand_vector_init_concat): Ditto.\n+\t(ix86_expand_vector_init_interleave): Ditto.\n+\t(ix86_expand_vector_init_general): Ditto.\n+\t(ix86_expand_vector_init): Ditto.\n+\t(ix86_expand_vector_set_var): Ditto.\n+\t(ix86_expand_vector_set): Ditto.\n+\t(ix86_expand_vector_extract): Ditto.\n+\t* config/i386/i386.cc (classify_argument): Add BF vector modes.\n+\t(function_arg_64): Ditto.\n+\t(ix86_gimplify_va_arg): Ditto.\n+\t(ix86_get_ssemov): Ditto.\n+\t* config/i386/i386.h (VALID_AVX256_REG_MODE): Add BF vector modes.\n+\t(VALID_AVX512F_REG_MODE): Ditto.\n+\t(host_detect_local_cpu): Ditto.\n+\t(VALID_SSE2_REG_MODE): Ditto.\n+\t* config/i386/i386.md: Add BF vector modes.\n+\t(MODE_SIZE): Ditto.\n+\t(ssemodesuffix): Add bf suffix for BF vector modes.\n+\t(ssevecmode): Ditto.\n+\t* config/i386/sse.md (VMOVE): Adjust for BF vector modes.\n+\t(VI12HFBF_AVX512VL): Ditto.\n+\t(V_256_512): Ditto.\n+\t(VF_AVX512HFBF16): Ditto.\n+\t(VF_AVX512BWHFBF16): Ditto.\n+\t(VIHFBF): Ditto.\n+\t(avx512): Ditto.\n+\t(VIHFBF_256): Ditto.\n+\t(VIHFBF_AVX512BW): Ditto.\n+\t(VI2F_256_512):Ditto.\n+\t(V8_128):Ditto.\n+\t(V16_256): Ditto.\n+\t(V32_512): Ditto.\n+\t(sseinsnmode): Ditto.\n+\t(sseconstm1): Ditto.\n+\t(sseintmodesuffix): New mode_attr.\n+\t(avx512fmaskmode): Ditto.\n+\t(avx512fmaskmodelower): Ditto.\n+\t(ssedoublevecmode): Ditto.\n+\t(ssehalfvecmode): Ditto.\n+\t(ssehalfvecmodelower): Ditto.\n+\t(ssescalarmode): Add vector BFmode mapping.\n+\t(ssescalarmodelower): Ditto.\n+\t(ssexmmmode): Ditto.\n+\t(ternlogsuffix): Ditto.\n+\t(ssescalarsize): Ditto.\n+\t(sseintprefix): Ditto.\n+\t(i128): Ditto.\n+\t(xtg_mode): Ditto.\n+\t(bcstscalarsuff): Ditto.\n+\t(<avx512>_blendm<mode>): New define_insn for BFmode.\n+\t(<avx512>_store<mode>_mask): Ditto.\n+\t(vcond_mask_<mode><avx512fmaskmodelower>): Ditto.\n+\t(vec_set<mode>_0): New define_insn for BF vector set.\n+\t(V8BFH_128): New mode_iterator for BFmode.\n+\t(avx512fp16_mov<mode>): Ditto.\n+\t(vec_set<mode>): New define_insn for BF vector set.\n+\t(@vec_extract_hi_<mode>): Ditto.\n+\t(@vec_extract_lo_<mode>): Ditto.\n+\t(vec_set_hi_<mode>): Ditto.\n+\t(vec_set_lo_<mode>): Ditto.\n+\t(*vec_extract<mode>_0): New define_insn_and_split for BF\n+\tvector extract.\n+\t(*vec_extract<mode>): New define_insn.\n+\t(VEC_EXTRACT_MODE): Add BF vector modes.\n+\t(PINSR_MODE): Add V8BF.\n+\t(sse2p4_1): Ditto.\n+\t(pinsr_evex_isa): Ditto.\n+\t(<sse2p4_1>_pinsr<ssemodesuffix>): Adjust to support\n+\tinsert for V8BFmode.\n+\t(pbroadcast_evex_isa): Add BF vector modes.\n+\t(AVX2_VEC_DUP_MODE): Ditto.\n+\t(VEC_INIT_MODE): Ditto.\n+\t(VEC_INIT_HALF_MODE): Ditto.\n+\t(avx2_pbroadcast<mode>): Adjust to support BF vector mode\n+\tbroadcast.\n+\t(avx2_pbroadcast<mode>_1): Ditto.\n+\t(<avx512>_vec_dup<mode>_1): Ditto.\n+\t(<mask_codefor><avx512>_vec_dup_gpr<mode><mask_name>):\n+\tDitto.\n+\n+2022-08-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* configure: Regenerate.\n+\n+2022-08-18  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\tPR target/103109\n+\t* config/rs6000/rs6000.md (<u>maddditi4): New pattern for multiply-add.\n+\t(<u>madddi4_highpart): New.\n+\t(<u>madddi4_highpart_le): New.\n+\n+2022-08-18  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-path.cc\n+\t(path_range_query::compute_exit_dependencies): Use\n+\tgimple_range_ssa_names.\n+\n+2022-08-18  zhongjuzhe  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/predicates.md: Adjust runtime invariant.\n+\t* config/riscv/riscv-modes.def (MAX_BITSIZE_MODE_ANY_MODE): New.\n+\t(NUM_POLY_INT_COEFFS): New.\n+\t* config/riscv/riscv-protos.h (riscv_initial_elimination_offset):Adjust\n+\truntime invariant.\n+\t* config/riscv/riscv-sr.cc (riscv_remove_unneeded_save_restore_calls):\n+\tAdjust runtime invariant.\n+\t* config/riscv/riscv.cc (struct riscv_frame_info): Adjust runtime\n+\tinvariant.\n+\t(enum riscv_microarchitecture_type): Ditto.\n+\t(riscv_valid_offset_p): Ditto.\n+\t(riscv_valid_lo_sum_p): Ditto.\n+\t(riscv_address_insns): Ditto.\n+\t(riscv_load_store_insns): Ditto.\n+\t(riscv_legitimize_move): Ditto.\n+\t(riscv_binary_cost): Ditto.\n+\t(riscv_rtx_costs): Ditto.\n+\t(riscv_output_move): Ditto.\n+\t(riscv_extend_comparands): Ditto.\n+\t(riscv_flatten_aggregate_field): Ditto.\n+\t(riscv_get_arg_info): Ditto.\n+\t(riscv_pass_by_reference): Ditto.\n+\t(riscv_elf_select_rtx_section): Ditto.\n+\t(riscv_stack_align): Ditto.\n+\t(riscv_compute_frame_info): Ditto.\n+\t(riscv_initial_elimination_offset): Ditto.\n+\t(riscv_set_return_address): Ditto.\n+\t(riscv_for_each_saved_reg): Ditto.\n+\t(riscv_first_stack_step): Ditto.\n+\t(riscv_expand_prologue): Ditto.\n+\t(riscv_expand_epilogue): Ditto.\n+\t(riscv_can_use_return_insn): Ditto.\n+\t(riscv_secondary_memory_needed): Ditto.\n+\t(riscv_hard_regno_nregs): Ditto.\n+\t(riscv_convert_vector_bits): New.\n+\t(riscv_option_override): Adjust runtime invariant.\n+\t(riscv_promote_function_mode): Ditto.\n+\t* config/riscv/riscv.h (POLY_SMALL_OPERAND_P): New.\n+\t(BITS_PER_RISCV_VECTOR): New.\n+\t(BYTES_PER_RISCV_VECTOR): New.\n+\t* config/riscv/riscv.md: Adjust runtime invariant.\n+\n+2022-08-18  Lulu Cheng  <chenglulu@loongson.cn>\n+\n+\t* config/loongarch/loongarch.cc (loongarch_call_tls_get_addr):\n+\tGet __tls_get_addr address through got table when disable plt.\n+\n+2022-08-18  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* config/xtensa/xtensa.cc (xtensa_expand_prologue):\n+\tUse an \"addmi\" machine instruction for updating the stack pointer\n+\trather than addition/subtraction via hard register A9, if the amount\n+\tof change satisfies the literal value conditions of that instruction\n+\twhen the CALL0 ABI is used.\n+\t(xtensa_expand_epilogue): Ditto.\n+\tAnd also inhibit the stack pointer addition of constant zero.\n+\n 2022-08-17  Roger Sayle  <roger@nextmovesoftware.com>\n \n \tPR target/106640"}, {"sha": "918be360b5780ddbb3966a604003b92c7916a858", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30afe5e7638cb4233692978365e4ceb4f8d2dc84/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30afe5e7638cb4233692978365e4ceb4f8d2dc84/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=30afe5e7638cb4233692978365e4ceb4f8d2dc84", "patch": "@@ -1 +1 @@\n-20220818\n+20220819"}, {"sha": "ae77b7eb7ae32f2366ea7994ebb6257b3db1e626", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30afe5e7638cb4233692978365e4ceb4f8d2dc84/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30afe5e7638cb4233692978365e4ceb4f8d2dc84/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=30afe5e7638cb4233692978365e4ceb4f8d2dc84", "patch": "@@ -1,3 +1,21 @@\n+2022-08-18  Tim Lange  <mail@tim-lange.me>\n+\n+\tPR analyzer/106181\n+\t* analyzer.opt: Add Wanalyzer-imprecise-floating-point-arithmetic.\n+\t* region-model.cc (is_any_cast_p): Formatting.\n+\t(region_model::check_region_size): Ensure precondition.\n+\t(class imprecise_floating_point_arithmetic): New abstract\n+\tdiagnostic class for all floating-point related warnings.\n+\t(class float_as_size_arg): Concrete diagnostic class to complain\n+\tabout floating-point operands inside the size argument.\n+\t(class contains_floating_point_visitor):\n+\tNew visitor to find floating-point operands inside svalues.\n+\t(region_model::check_dynamic_size_for_floats): New function.\n+\t(region_model::set_dynamic_extents):\n+\tCall to check_dynamic_size_for_floats.\n+\t* region-model.h (class region_model):\n+\tAdd region_model::check_dynamic_size_for_floats.\n+\n 2022-08-16  Martin Liska  <mliska@suse.cz>\n \n \t* region-model.cc: Fix -Winconsistent-missing-override clang"}, {"sha": "a46ee46211f29893d1315be5e1ed8ba2e54ee93a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30afe5e7638cb4233692978365e4ceb4f8d2dc84/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30afe5e7638cb4233692978365e4ceb4f8d2dc84/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=30afe5e7638cb4233692978365e4ceb4f8d2dc84", "patch": "@@ -1,3 +1,13 @@\n+2022-08-18  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tRevert:\n+\t2022-07-31  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/77652\n+\t* check.cc (gfc_check_associated): Make the rank check of POINTER\n+\tvs. TARGET match the allowed forms of pointer assignment for the\n+\tselected Fortran standard.\n+\n 2022-08-17  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "fe374ba9719bb12492248b56c98761552b0efe53", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30afe5e7638cb4233692978365e4ceb4f8d2dc84/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30afe5e7638cb4233692978365e4ceb4f8d2dc84/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30afe5e7638cb4233692978365e4ceb4f8d2dc84", "patch": "@@ -1,3 +1,60 @@\n+2022-08-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/cpp/c11-warning-1.c, gcc.dg/cpp/c11-warning-2.c,\n+\tgcc.dg/cpp/c11-warning-3.c, gcc.dg/cpp/c11-warning-4.c,\n+\tgcc.dg/cpp/c2x-warning-1.c, gcc.dg/cpp/c2x-warning-2.c,\n+\tgcc.dg/cpp/gnu11-warning-1.c, gcc.dg/cpp/gnu11-warning-2.c,\n+\tgcc.dg/cpp/gnu11-warning-3.c, gcc.dg/cpp/gnu11-warning-4.c,\n+\tgcc.dg/cpp/gnu2x-warning-1.c, gcc.dg/cpp/gnu2x-warning-2.c: New\n+\ttests.\n+\n+2022-08-18  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* gcc.target/xtensa/sibcalls.c: Add a new test function to ensure\n+\tthat registers for arguments (occupy from A2 to A7) and for indirect\n+\tsibcall (should be assigned to A8) neither conflict nor spill out.\n+\n+2022-08-18  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tRevert:\n+\t2022-08-18  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/77652\n+\t* gfortran.dg/associated_target_9a.f90: New test.\n+\t* gfortran.dg/associated_target_9b.f90: New test.\n+\n+2022-08-18  Tim Lange  <mail@tim-lange.me>\n+\n+\tPR analyzer/106181\n+\t* gcc.dg/analyzer/allocation-size-1.c: New test.\n+\t* gcc.dg/analyzer/imprecise-floating-point-1.c: New test.\n+\t* gcc.dg/analyzer/pr106181.c: New test.\n+\n+2022-08-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/106617\n+\t* gcc.dg/pr106617.c: New testcase.\n+\n+2022-08-18  konglin1  <lingling.kong@intel.com>\n+\n+\t* g++.target/i386/vect-bfloat16-1.C: New test.\n+\t* gcc.target/i386/vect-bfloat16-1.c: New test.\n+\t* gcc.target/i386/vect-bfloat16-2a.c: New test.\n+\t* gcc.target/i386/vect-bfloat16-2b.c: New test.\n+\t* gcc.target/i386/vect-bfloat16-typecheck_1.c: New test.\n+\t* gcc.target/i386/vect-bfloat16-typecheck_2.c: New test.\n+\n+2022-08-18  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\tPR target/103109\n+\t* gcc.target/powerpc/pr103109.h: New.\n+\t* gcc.target/powerpc/pr103109-1.c: New.\n+\t* gcc.target/powerpc/pr103109-2.c: New.\n+\n+2022-08-18  Lulu Cheng  <chenglulu@loongson.cn>\n+\n+\t* gcc.target/loongarch/tls-gd-noplt.c: New test.\n+\n 2022-08-17  Maciej W. Rozycki  <macro@embecosm.com>\n \n \t* gcc.target/riscv/fmax-snan.c: Add `dg-require-effective-target"}, {"sha": "6b5158474f444029eaa5e167103452a9d758323a", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30afe5e7638cb4233692978365e4ceb4f8d2dc84/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30afe5e7638cb4233692978365e4ceb4f8d2dc84/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=30afe5e7638cb4233692978365e4ceb4f8d2dc84", "patch": "@@ -1,3 +1,13 @@\n+2022-08-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* include/cpplib.h (struct cpp_options): Add warning_directive.\n+\t* init.cc (struct lang_flags, lang_defaults): Add\n+\twarning_directive.\n+\t* directives.cc (DIRECTIVE_TABLE): Mark #warning as STDC2X not\n+\tEXTENSION.\n+\t(directive_diagnostics): Diagnose #warning with -Wc11-c2x-compat,\n+\tor with -pedantic for a standard not supporting #warning.\n+\n 2022-08-16  Tom Honermann  <tom@honermann.net>\n \n \tPR c++/106423"}]}