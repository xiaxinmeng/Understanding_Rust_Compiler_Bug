{"sha": "2017035a605bee47b3f4fdf6723fa7dabed2763c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAxNzAzNWE2MDViZWU0N2IzZjRmZGY2NzIzZmE3ZGFiZWQyNzYzYw==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2013-10-30T09:07:24Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-10-30T09:07:24Z"}, "message": "c-common.c (handle_bnd_variable_size_attribute): New.\n\n        * c-family/c-common.c (handle_bnd_variable_size_attribute): New.\n        (handle_bnd_legacy): New.\n        (c_common_attribute_table): Add bnd_variable_size and bnd_legacy.\n        * doc/extend.texi: Document bnd_variable_size and bnd_legacy\n        attributes.\n\nFrom-SVN: r204197", "tree": {"sha": "3b28cf27a2fb6ecfa36d092e1583be30b7f0a778", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b28cf27a2fb6ecfa36d092e1583be30b7f0a778"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2017035a605bee47b3f4fdf6723fa7dabed2763c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2017035a605bee47b3f4fdf6723fa7dabed2763c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2017035a605bee47b3f4fdf6723fa7dabed2763c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2017035a605bee47b3f4fdf6723fa7dabed2763c/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "109719ebd4ee99f377256bd262941358c89a9635", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/109719ebd4ee99f377256bd262941358c89a9635", "html_url": "https://github.com/Rust-GCC/gccrs/commit/109719ebd4ee99f377256bd262941358c89a9635"}], "stats": {"total": 93, "additions": 87, "deletions": 6}, "files": [{"sha": "dc9bbf85d98e69c1804eb90acaf12babc5e63c3c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2017035a605bee47b3f4fdf6723fa7dabed2763c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2017035a605bee47b3f4fdf6723fa7dabed2763c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2017035a605bee47b3f4fdf6723fa7dabed2763c", "patch": "@@ -1,3 +1,11 @@\n+2013-10-30  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* c-family/c-common.c (handle_bnd_variable_size_attribute): New.\n+\t(handle_bnd_legacy): New.\n+\t(c_common_attribute_table): Add bnd_variable_size and bnd_legacy.\n+\t* doc/extend.texi: Document bnd_variable_size and bnd_legacy\n+\tattributes.\n+\n 2013-10-29  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* builtin-types.def (BT_FN_VOID_CONST_PTR): New."}, {"sha": "b01b9d01e6d0c44ff1633a56fa6d6ff1dfdcafcf", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2017035a605bee47b3f4fdf6723fa7dabed2763c/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2017035a605bee47b3f4fdf6723fa7dabed2763c/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=2017035a605bee47b3f4fdf6723fa7dabed2763c", "patch": "@@ -375,6 +375,8 @@ static tree handle_omp_declare_simd_attribute (tree *, tree, tree, int,\n \t\t\t\t\t       bool *);\n static tree handle_omp_declare_target_attribute (tree *, tree, tree, int,\n \t\t\t\t\t\t bool *);\n+static tree handle_bnd_variable_size_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_bnd_legacy (tree *, tree, tree, int, bool *);\n \n static void check_function_nonnull (tree, int, tree *);\n static void check_nonnull_arg (void *, tree, unsigned HOST_WIDE_INT);\n@@ -759,6 +761,10 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_omp_declare_simd_attribute, false },\n   { \"omp declare target\",     0, 0, true, false, false,\n \t\t\t      handle_omp_declare_target_attribute, false },\n+  { \"bnd_variable_size\",      0, 0, true,  false, false,\n+\t\t\t      handle_bnd_variable_size_attribute, false },\n+  { \"bnd_legacy\",             0, 0, true, false, false,\n+\t\t\t      handle_bnd_legacy, false },\n   { NULL,                     0, 0, false, false, false, NULL, false }\n };\n \n@@ -8018,6 +8024,38 @@ handle_fnspec_attribute (tree *node ATTRIBUTE_UNUSED, tree ARG_UNUSED (name),\n   return NULL_TREE;\n }\n \n+/* Handle a \"bnd_variable_size\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_bnd_variable_size_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n+\t\t\t\t    int ARG_UNUSED (flags), bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) != FIELD_DECL)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+/* Handle a \"bnd_legacy\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_bnd_legacy (tree *node, tree name, tree ARG_UNUSED (args),\n+\t\t   int ARG_UNUSED (flags), bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) != FUNCTION_DECL)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"warn_unused\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "1d52e425e33b8c25bea414021c21af3f4e5bfd2d", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2017035a605bee47b3f4fdf6723fa7dabed2763c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2017035a605bee47b3f4fdf6723fa7dabed2763c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=2017035a605bee47b3f4fdf6723fa7dabed2763c", "patch": "@@ -2138,7 +2138,7 @@ attributes are currently defined for functions on all targets:\n @code{returns_nonnull}, @code{gnu_inline},\n @code{externally_visible}, @code{hot}, @code{cold}, @code{artificial},\n @code{no_sanitize_address}, @code{no_address_safety_analysis},\n-@code{no_sanitize_undefined},\n+@code{no_sanitize_undefined}, @code{bnd_legacy},\n @code{error} and @code{warning}.\n Several other attributes are defined for functions on particular\n target systems.  Other attributes, including @code{section} are\n@@ -3549,6 +3549,12 @@ The @code{no_sanitize_undefined} attribute on functions is used\n to inform the compiler that it should not check for undefined behavior\n in the function when compiling with the @option{-fsanitize=undefined} option.\n \n+@item bnd_legacy\n+@cindex @code{bnd_legacy} function attribute\n+The @code{bnd_legacy} attribute on functions is used to inform\n+compiler that function should not be instrumented when compiled\n+with @option{-fcheck-pointers} option.\n+\n @item regparm (@var{number})\n @cindex @code{regparm} attribute\n @cindex functions that are passed arguments in registers on the 386\n@@ -5321,12 +5327,12 @@ placed in either the @code{.bss_below100} section or the\n The keyword @code{__attribute__} allows you to specify special\n attributes of @code{struct} and @code{union} types when you define\n such types.  This keyword is followed by an attribute specification\n-inside double parentheses.  Seven attributes are currently defined for\n+inside double parentheses.  Eight attributes are currently defined for\n types: @code{aligned}, @code{packed}, @code{transparent_union},\n-@code{unused}, @code{deprecated}, @code{visibility}, and\n-@code{may_alias}.  Other attributes are defined for functions\n-(@pxref{Function Attributes}) and for variables (@pxref{Variable\n-Attributes}).\n+@code{unused}, @code{deprecated}, @code{visibility}, @code{may_alias}\n+and @code{bnd_variable_size}.  Other attributes are defined for\n+functions (@pxref{Function Attributes}) and for variables\n+(@pxref{Variable Attributes}).\n \n You may also specify any one of these attributes with @samp{__}\n preceding and following its keyword.  This allows you to use these\n@@ -5618,6 +5624,35 @@ and caught in another, the class must have default visibility.\n Otherwise the two shared objects are unable to use the same\n typeinfo node and exception handling will break.\n \n+@item bnd_variable_size\n+When applied to a structure field, this attribute tells Pointer\n+Bounds Checker that the size of this field should not be computed\n+using static type information.  It may be used to mark variable\n+sized static array fields placed at the end of a structure.\n+\n+@smallexample\n+struct S\n+@{\n+  int size;\n+  char data[1];\n+@}\n+S *p = (S *)malloc (sizeof(S) + 100);\n+p->data[10] = 0; //Bounds violation\n+@end smallexample\n+\n+By using an attribute for a field we may avoid bound violation\n+we most probably do not want to see:\n+\n+@smallexample\n+struct S\n+@{\n+  int size;\n+  char data[1] __attribute__((bnd_variable_size));\n+@}\n+S *p = (S *)malloc (sizeof(S) + 100);\n+p->data[10] = 0; //OK\n+@end smallexample\n+\n @end table\n \n To specify multiple attributes, separate them by commas within the"}]}