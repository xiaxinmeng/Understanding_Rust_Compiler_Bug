{"sha": "d6c397b0ffe06e3008d3c82330bf8cf63962b328", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZjMzk3YjBmZmUwNmUzMDA4ZDNjODIzMzBiZjhjZjYzOTYyYjMyOA==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2007-01-04T23:13:55Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2007-01-04T23:13:55Z"}, "message": "arm.md (arm_mulsi3, [...]): Make conditional on !arm_arch6.\n\n2007-01-04  Paul Brook  <paul@codesourcery.com>\n\n\t* config/arm/arm.md (arm_mulsi3, thumb_mulsi3, mulsi3_compare0,\n\tmulsi_compare0_scratch, mulsi3addsi, mulsi3addsi_compare0,\n\tmulsi3addsi_compare0_scratch, mulsidi3adddi, mulsidi3,\n\tumulsidi3, umulsidi3adddi, smulsi3_highpart,\n\tumulsi3_highpart): Make conditional on !arm_arch6.\n\t(arm_mulsi3_v6, thumb_mulsi3_v6, mulsi3_compare0_v6,\n\tmulsi_compare0_scratch_v6, mulsi3addsi_v6, mulsi3addsi_compare0_v6,\n\tmulsi3addsi_compare0_scratch_v6, mulsidi3adddi_v6, mulsidi3_v6,\n\tumulsidi3_v6, umulsidi3adddi_v6, smulsi3_highpart_v6,\n\tumulsi3_highpart_v6): New insns.\n\nFrom-SVN: r120453", "tree": {"sha": "2a7d9f0095886d287441f20bc230c1821db64ef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a7d9f0095886d287441f20bc230c1821db64ef2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6c397b0ffe06e3008d3c82330bf8cf63962b328", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6c397b0ffe06e3008d3c82330bf8cf63962b328", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6c397b0ffe06e3008d3c82330bf8cf63962b328", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6c397b0ffe06e3008d3c82330bf8cf63962b328/comments", "author": null, "committer": null, "parents": [{"sha": "6d413586e00892fd85f6688eda364b545ee1bee2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d413586e00892fd85f6688eda364b545ee1bee2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d413586e00892fd85f6688eda364b545ee1bee2"}], "stats": {"total": 211, "additions": 198, "deletions": 13}, "files": [{"sha": "f752ca82e15352f38cdb074698bdd5d2b026d44e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6c397b0ffe06e3008d3c82330bf8cf63962b328/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6c397b0ffe06e3008d3c82330bf8cf63962b328/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6c397b0ffe06e3008d3c82330bf8cf63962b328", "patch": "@@ -1,3 +1,16 @@\n+2007-01-04  Paul Brook  <paul@codesourcery.com>\n+\n+\t* config/arm/arm.md (arm_mulsi3, thumb_mulsi3, mulsi3_compare0,\n+\tmulsi_compare0_scratch, mulsi3addsi, mulsi3addsi_compare0,\n+\tmulsi3addsi_compare0_scratch, mulsidi3adddi, mulsidi3,\n+\tumulsidi3, umulsidi3adddi, smulsi3_highpart,\n+\tumulsi3_highpart): Make conditional on !arm_arch6.\n+\t(arm_mulsi3_v6, thumb_mulsi3_v6, mulsi3_compare0_v6,\n+\tmulsi_compare0_scratch_v6, mulsi3addsi_v6, mulsi3addsi_compare0_v6,\n+\tmulsi3addsi_compare0_scratch_v6, mulsidi3adddi_v6, mulsidi3_v6,\n+\tumulsidi3_v6, umulsidi3adddi_v6, smulsi3_highpart_v6,\n+\tumulsi3_highpart_v6): New insns.\n+\n 2007-01-04  Roger Sayle  <roger@eyesopen.com>\n \n \t* fold-const.c (fold_convert): When casting an expression to void,"}, {"sha": "14a98623c8ebc62b6b8a3f7c82f1ec6f50a5a0a2", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 185, "deletions": 13, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6c397b0ffe06e3008d3c82330bf8cf63962b328/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6c397b0ffe06e3008d3c82330bf8cf63962b328/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=d6c397b0ffe06e3008d3c82330bf8cf63962b328", "patch": "@@ -1101,12 +1101,22 @@\n   [(set (match_operand:SI          0 \"s_register_operand\" \"=&r,&r\")\n \t(mult:SI (match_operand:SI 2 \"s_register_operand\" \"r,r\")\n \t\t (match_operand:SI 1 \"s_register_operand\" \"%?r,0\")))]\n-  \"TARGET_32BIT\"\n+  \"TARGET_32BIT && !arm_arch6\"\n   \"mul%?\\\\t%0, %2, %1\"\n   [(set_attr \"insn\" \"mul\")\n    (set_attr \"predicable\" \"yes\")]\n )\n \n+(define_insn \"*arm_mulsi3_v6\"\n+  [(set (match_operand:SI          0 \"s_register_operand\" \"=r\")\n+\t(mult:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t (match_operand:SI 2 \"s_register_operand\" \"r\")))]\n+  \"TARGET_32BIT && arm_arch6\"\n+  \"mul%?\\\\t%0, %1, %2\"\n+  [(set_attr \"insn\" \"mul\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n+\n ; Unfortunately with the Thumb the '&'/'0' trick can fails when operands \n ; 1 and 2; are the same, because reload will make operand 0 match \n ; operand 1 without realizing that this conflicts with operand 2.  We fix \n@@ -1116,7 +1126,7 @@\n   [(set (match_operand:SI          0 \"register_operand\" \"=&l,&l,&l\")\n \t(mult:SI (match_operand:SI 1 \"register_operand\" \"%l,*h,0\")\n \t\t (match_operand:SI 2 \"register_operand\" \"l,l,l\")))]\n-  \"TARGET_THUMB1\"\n+  \"TARGET_THUMB1 && !arm_arch6\"\n   \"*\n   if (which_alternative < 2)\n     return \\\"mov\\\\t%0, %1\\;mul\\\\t%0, %2\\\";\n@@ -1127,6 +1137,19 @@\n    (set_attr \"insn\" \"mul\")]\n )\n \n+(define_insn \"*thumb_mulsi3_v6\"\n+  [(set (match_operand:SI          0 \"register_operand\" \"=l,l,l\")\n+\t(mult:SI (match_operand:SI 1 \"register_operand\" \"0,l,0\")\n+\t\t (match_operand:SI 2 \"register_operand\" \"l,0,0\")))]\n+  \"TARGET_THUMB1 && arm_arch6\"\n+  \"@\n+   mul\\\\t%0, %2 \n+   mul\\\\t%0, %1 \n+   mul\\\\t%0, %1\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"insn\" \"mul\")]\n+)\n+\n (define_insn \"*mulsi3_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV (mult:SI\n@@ -1135,7 +1158,21 @@\n \t\t\t (const_int 0)))\n    (set (match_operand:SI 0 \"s_register_operand\" \"=&r,&r\")\n \t(mult:SI (match_dup 2) (match_dup 1)))]\n-  \"TARGET_ARM\"\n+  \"TARGET_ARM && !arm_arch6\"\n+  \"mul%.\\\\t%0, %2, %1\"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"insn\" \"muls\")]\n+)\n+\n+(define_insn \"*mulsi3_compare0_v6\"\n+  [(set (reg:CC_NOOV CC_REGNUM)\n+\t(compare:CC_NOOV (mult:SI\n+\t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t\t\t  (match_operand:SI 1 \"s_register_operand\" \"r\"))\n+\t\t\t (const_int 0)))\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(mult:SI (match_dup 2) (match_dup 1)))]\n+  \"TARGET_ARM && arm_arch6 && optimize_size\"\n   \"mul%.\\\\t%0, %2, %1\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"insn\" \"muls\")]\n@@ -1148,7 +1185,20 @@\n \t\t\t  (match_operand:SI 1 \"s_register_operand\" \"%?r,0\"))\n \t\t\t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=&r,&r\"))]\n-  \"TARGET_ARM\"\n+  \"TARGET_ARM && !arm_arch6\"\n+  \"mul%.\\\\t%0, %2, %1\"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"insn\" \"muls\")]\n+)\n+\n+(define_insn \"*mulsi_compare0_scratch_v6\"\n+  [(set (reg:CC_NOOV CC_REGNUM)\n+\t(compare:CC_NOOV (mult:SI\n+\t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t\t\t  (match_operand:SI 1 \"s_register_operand\" \"r\"))\n+\t\t\t (const_int 0)))\n+   (clobber (match_scratch:SI 0 \"=r\"))]\n+  \"TARGET_ARM && arm_arch6 && optimize_size\"\n   \"mul%.\\\\t%0, %2, %1\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"insn\" \"muls\")]\n@@ -1162,7 +1212,19 @@\n \t  (mult:SI (match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\")\n \t\t   (match_operand:SI 1 \"s_register_operand\" \"%r,0,r,0\"))\n \t  (match_operand:SI 3 \"s_register_operand\" \"?r,r,0,0\")))]\n-  \"TARGET_32BIT\"\n+  \"TARGET_32BIT && !arm_arch6\"\n+  \"mla%?\\\\t%0, %2, %1, %3\"\n+  [(set_attr \"insn\" \"mla\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n+\n+(define_insn \"*mulsi3addsi_v6\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(plus:SI\n+\t  (mult:SI (match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t\t   (match_operand:SI 1 \"s_register_operand\" \"r\"))\n+\t  (match_operand:SI 3 \"s_register_operand\" \"r\")))]\n+  \"TARGET_32BIT && arm_arch6\"\n   \"mla%?\\\\t%0, %2, %1, %3\"\n   [(set_attr \"insn\" \"mla\")\n    (set_attr \"predicable\" \"yes\")]\n@@ -1179,7 +1241,24 @@\n    (set (match_operand:SI 0 \"s_register_operand\" \"=&r,&r,&r,&r\")\n \t(plus:SI (mult:SI (match_dup 2) (match_dup 1))\n \t\t (match_dup 3)))]\n-  \"TARGET_ARM\"\n+  \"TARGET_ARM && arm_arch6\"\n+  \"mla%.\\\\t%0, %2, %1, %3\"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"insn\" \"mlas\")]\n+)\n+\n+(define_insn \"*mulsi3addsi_compare0_v6\"\n+  [(set (reg:CC_NOOV CC_REGNUM)\n+\t(compare:CC_NOOV\n+\t (plus:SI (mult:SI\n+\t\t   (match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t\t   (match_operand:SI 1 \"s_register_operand\" \"r\"))\n+\t\t  (match_operand:SI 3 \"s_register_operand\" \"r\"))\n+\t (const_int 0)))\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(plus:SI (mult:SI (match_dup 2) (match_dup 1))\n+\t\t (match_dup 3)))]\n+  \"TARGET_ARM && arm_arch6 && optimize_size\"\n   \"mla%.\\\\t%0, %2, %1, %3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"insn\" \"mlas\")]\n@@ -1194,7 +1273,22 @@\n \t\t  (match_operand:SI 3 \"s_register_operand\" \"?r,r,0,0\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=&r,&r,&r,&r\"))]\n-  \"TARGET_ARM\"\n+  \"TARGET_ARM && !arm_arch6\"\n+  \"mla%.\\\\t%0, %2, %1, %3\"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"insn\" \"mlas\")]\n+)\n+\n+(define_insn \"*mulsi3addsi_compare0_scratch_v6\"\n+  [(set (reg:CC_NOOV CC_REGNUM)\n+\t(compare:CC_NOOV\n+\t (plus:SI (mult:SI\n+\t\t   (match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t\t   (match_operand:SI 1 \"s_register_operand\" \"r\"))\n+\t\t  (match_operand:SI 3 \"s_register_operand\" \"r\"))\n+\t (const_int 0)))\n+   (clobber (match_scratch:SI 0 \"=r\"))]\n+  \"TARGET_ARM && arm_arch6 && optimize_size\"\n   \"mla%.\\\\t%0, %2, %1, %3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"insn\" \"mlas\")]\n@@ -1209,7 +1303,20 @@\n \t  (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"%r\"))\n \t  (sign_extend:DI (match_operand:SI 3 \"s_register_operand\" \"r\")))\n \t (match_operand:DI 1 \"s_register_operand\" \"0\")))]\n-  \"TARGET_32BIT && arm_arch3m\"\n+  \"TARGET_32BIT && arm_arch3m && !arm_arch6\"\n+  \"smlal%?\\\\t%Q0, %R0, %3, %2\"\n+  [(set_attr \"insn\" \"smlal\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n+\n+(define_insn \"*mulsidi3adddi_v6\"\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(plus:DI\n+\t (mult:DI\n+\t  (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r\"))\n+\t  (sign_extend:DI (match_operand:SI 3 \"s_register_operand\" \"r\")))\n+\t (match_operand:DI 1 \"s_register_operand\" \"0\")))]\n+  \"TARGET_32BIT && arm_arch6\"\n   \"smlal%?\\\\t%Q0, %R0, %3, %2\"\n   [(set_attr \"insn\" \"smlal\")\n    (set_attr \"predicable\" \"yes\")]\n@@ -1220,7 +1327,18 @@\n \t(mult:DI\n \t (sign_extend:DI (match_operand:SI 1 \"s_register_operand\" \"%r\"))\n \t (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r\"))))]\n-  \"TARGET_32BIT && arm_arch3m\"\n+  \"TARGET_32BIT && arm_arch3m && !arm_arch6\"\n+  \"smull%?\\\\t%Q0, %R0, %1, %2\"\n+  [(set_attr \"insn\" \"smull\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n+\n+(define_insn \"mulsidi3_v6\"\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(mult:DI\n+\t (sign_extend:DI (match_operand:SI 1 \"s_register_operand\" \"r\"))\n+\t (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r\"))))]\n+  \"TARGET_32BIT && arm_arch6\"\n   \"smull%?\\\\t%Q0, %R0, %1, %2\"\n   [(set_attr \"insn\" \"smull\")\n    (set_attr \"predicable\" \"yes\")]\n@@ -1231,7 +1349,18 @@\n \t(mult:DI\n \t (zero_extend:DI (match_operand:SI 1 \"s_register_operand\" \"%r\"))\n \t (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r\"))))]\n-  \"TARGET_32BIT && arm_arch3m\"\n+  \"TARGET_32BIT && arm_arch3m && !arm_arch6\"\n+  \"umull%?\\\\t%Q0, %R0, %1, %2\"\n+  [(set_attr \"insn\" \"umull\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n+\n+(define_insn \"umulsidi3_v6\"\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(mult:DI\n+\t (zero_extend:DI (match_operand:SI 1 \"s_register_operand\" \"r\"))\n+\t (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r\"))))]\n+  \"TARGET_32BIT && arm_arch6\"\n   \"umull%?\\\\t%Q0, %R0, %1, %2\"\n   [(set_attr \"insn\" \"umull\")\n    (set_attr \"predicable\" \"yes\")]\n@@ -1246,7 +1375,20 @@\n \t  (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"%r\"))\n \t  (zero_extend:DI (match_operand:SI 3 \"s_register_operand\" \"r\")))\n \t (match_operand:DI 1 \"s_register_operand\" \"0\")))]\n-  \"TARGET_32BIT && arm_arch3m\"\n+  \"TARGET_32BIT && arm_arch3m && !arm_arch6\"\n+  \"umlal%?\\\\t%Q0, %R0, %3, %2\"\n+  [(set_attr \"insn\" \"umlal\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n+\n+(define_insn \"*umulsidi3adddi_v6\"\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(plus:DI\n+\t (mult:DI\n+\t  (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r\"))\n+\t  (zero_extend:DI (match_operand:SI 3 \"s_register_operand\" \"r\")))\n+\t (match_operand:DI 1 \"s_register_operand\" \"0\")))]\n+  \"TARGET_32BIT && arm_arch6\"\n   \"umlal%?\\\\t%Q0, %R0, %3, %2\"\n   [(set_attr \"insn\" \"umlal\")\n    (set_attr \"predicable\" \"yes\")]\n@@ -1261,7 +1403,22 @@\n \t   (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r,r\")))\n \t  (const_int 32))))\n    (clobber (match_scratch:SI 3 \"=&r,&r\"))]\n-  \"TARGET_32BIT && arm_arch3m\"\n+  \"TARGET_32BIT && arm_arch3m && !arm_arch6\"\n+  \"smull%?\\\\t%3, %0, %2, %1\"\n+  [(set_attr \"insn\" \"smull\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n+\n+(define_insn \"smulsi3_highpart_v6\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(truncate:SI\n+\t (lshiftrt:DI\n+\t  (mult:DI\n+\t   (sign_extend:DI (match_operand:SI 1 \"s_register_operand\" \"r\"))\n+\t   (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r\")))\n+\t  (const_int 32))))\n+   (clobber (match_scratch:SI 3 \"=r\"))]\n+  \"TARGET_32BIT && arm_arch6\"\n   \"smull%?\\\\t%3, %0, %2, %1\"\n   [(set_attr \"insn\" \"smull\")\n    (set_attr \"predicable\" \"yes\")]\n@@ -1276,7 +1433,22 @@\n \t   (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r,r\")))\n \t  (const_int 32))))\n    (clobber (match_scratch:SI 3 \"=&r,&r\"))]\n-  \"TARGET_32BIT && arm_arch3m\"\n+  \"TARGET_32BIT && arm_arch3m && !arm_arch6\"\n+  \"umull%?\\\\t%3, %0, %2, %1\"\n+  [(set_attr \"insn\" \"umull\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n+\n+(define_insn \"umulsi3_highpart_v6\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(truncate:SI\n+\t (lshiftrt:DI\n+\t  (mult:DI\n+\t   (zero_extend:DI (match_operand:SI 1 \"s_register_operand\" \"r\"))\n+\t   (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r\")))\n+\t  (const_int 32))))\n+   (clobber (match_scratch:SI 3 \"=r\"))]\n+  \"TARGET_32BIT && arm_arch6\"\n   \"umull%?\\\\t%3, %0, %2, %1\"\n   [(set_attr \"insn\" \"umull\")\n    (set_attr \"predicable\" \"yes\")]"}]}