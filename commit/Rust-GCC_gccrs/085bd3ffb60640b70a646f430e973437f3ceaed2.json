{"sha": "085bd3ffb60640b70a646f430e973437f3ceaed2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg1YmQzZmZiNjA2NDBiNzBhNjQ2ZjQzMGU5NzM0MzdmM2NlYWVkMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-12-17T03:30:19Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-12-17T03:30:19Z"}, "message": "re PR target/11012 ([m32r-elf] wrong code with -O at branch of conditional)\n\n\tPR target/11012\n\t* config/m32r/m32r.c (gen_compare): Call gen_addsi3 instead of\n\tgen_cmp_ne_small_const_insn.\n\t* config/m32r/m32r.md (cmp_ne_small_const_insn): Remove.\n\nFrom-SVN: r74726", "tree": {"sha": "eabca0720f4114a6cb3eba860ea0099428e6a274", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eabca0720f4114a6cb3eba860ea0099428e6a274"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/085bd3ffb60640b70a646f430e973437f3ceaed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/085bd3ffb60640b70a646f430e973437f3ceaed2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/085bd3ffb60640b70a646f430e973437f3ceaed2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/085bd3ffb60640b70a646f430e973437f3ceaed2/comments", "author": null, "committer": null, "parents": [{"sha": "2ff7cce4f2a5dcc3ad18e1eed20f83a814c21be0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ff7cce4f2a5dcc3ad18e1eed20f83a814c21be0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ff7cce4f2a5dcc3ad18e1eed20f83a814c21be0"}], "stats": {"total": 36, "additions": 13, "deletions": 23}, "files": [{"sha": "40a362fe10b6f05315be70804c93348b5b486257", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/085bd3ffb60640b70a646f430e973437f3ceaed2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/085bd3ffb60640b70a646f430e973437f3ceaed2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=085bd3ffb60640b70a646f430e973437f3ceaed2", "patch": "@@ -1,3 +1,10 @@\n+2003-12-16  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\tPR target/11012\n+\t* config/m32r/m32r.c (gen_compare): Call gen_addsi3 instead of\n+\tgen_cmp_ne_small_const_insn.\n+\t* config/m32r/m32r.md (cmp_ne_small_const_insn): Remove.\n+\n 2003-12-17  Neil Booth  <neil@daikokuya.co.uk>\n             Joseph S. Myers  <jsm@polyomino.org.uk>\n "}, {"sha": "a5a2b26cf09ac7210b80395a4480ce3ec3c98fbf", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/085bd3ffb60640b70a646f430e973437f3ceaed2/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/085bd3ffb60640b70a646f430e973437f3ceaed2/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=085bd3ffb60640b70a646f430e973437f3ceaed2", "patch": "@@ -1000,7 +1000,7 @@ gen_compare (enum rtx_code code, rtx x, rtx y, int need_compare)\n \t    {\n \t      rtx tmp = gen_reg_rtx (SImode);\t\t\n \t      \n-\t      emit_insn (gen_cmp_ne_small_const_insn (tmp, x, y));\n+\t      emit_insn (gen_addsi3 (tmp, x, GEN_INT (-INTVAL (y))));\n \t      x = tmp;\n \t      y = const0_rtx;\n \t    }\n@@ -1035,15 +1035,15 @@ gen_compare (enum rtx_code code, rtx x, rtx y, int need_compare)\n \t\t  if (y == const0_rtx)\n \t\t    tmp = const1_rtx;\n \t\t  else\n-\t\t    emit_insn (gen_cmp_ne_small_const_insn (tmp, y, const1_rtx));\n+\t\t    emit_insn (gen_addsi3 (tmp, y, constm1_rtx));\n \t\t  emit_insn (gen_cmp_ltsi_insn (x, tmp));\n \t\t  code = EQ;\n \t\t  break;\n \t\tcase GT:\n \t\t  if (GET_CODE (y) == CONST_INT)\n \t\t    tmp = gen_rtx (PLUS, SImode, y, const1_rtx);\n \t\t  else\n-\t\t    emit_insn (gen_cmp_ne_small_const_insn (tmp, y, const1_rtx));\n+\t\t    emit_insn (gen_addsi3 (tmp, y, constm1_rtx));\n \t\t  emit_insn (gen_cmp_ltsi_insn (x, tmp));\n \t\t  code = NE;\n \t\t  break;\n@@ -1075,15 +1075,15 @@ gen_compare (enum rtx_code code, rtx x, rtx y, int need_compare)\n \t\t  if (y == const0_rtx)\n \t\t    tmp = const1_rtx;\n \t\t  else\n-\t\t    emit_insn (gen_cmp_ne_small_const_insn (tmp, y, const1_rtx));\n+\t\t    emit_insn (gen_addsi3 (tmp, y, constm1_rtx));\n \t\t  emit_insn (gen_cmp_ltusi_insn (x, tmp));\n \t\t  code = EQ;\n \t\t  break;\n \t\tcase GTU:\n \t\t  if (GET_CODE (y) == CONST_INT)\n \t\t    tmp = gen_rtx (PLUS, SImode, y, const1_rtx);\n \t\t  else\n-\t\t    emit_insn (gen_cmp_ne_small_const_insn (tmp, y, const1_rtx));\n+\t\t    emit_insn (gen_addsi3 (tmp, y, constm1_rtx));\n \t\t  emit_insn (gen_cmp_ltusi_insn (x, tmp));\n \t\t  code = NE;\n \t\t  break;\n@@ -1122,7 +1122,7 @@ gen_compare (enum rtx_code code, rtx x, rtx y, int need_compare)\n \t{\n \t  rtx tmp = gen_reg_rtx (SImode);\n \n-\t  emit_insn (gen_cmp_ne_small_const_insn (tmp, x, y));\n+\t  emit_insn (gen_addsi3 (tmp, x, GEN_INT (-INTVAL (y))));\n \t  return gen_rtx (code, CCmode, tmp, const0_rtx);\n \t}\n       "}, {"sha": "709c194fb460c032099360cf517ac2b1fd56f83a", "filename": "gcc/config/m32r/m32r.md", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/085bd3ffb60640b70a646f430e973437f3ceaed2/gcc%2Fconfig%2Fm32r%2Fm32r.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/085bd3ffb60640b70a646f430e973437f3ceaed2/gcc%2Fconfig%2Fm32r%2Fm32r.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.md?ref=085bd3ffb60640b70a646f430e973437f3ceaed2", "patch": "@@ -1241,23 +1241,6 @@\n    cmpui %0,%#%1\"\n   [(set_attr \"type\" \"int2,int4\")\n    (set_attr \"length\" \"2,4\")])\n-\n-\n-;; reg == small constant comparisons are best handled by putting the result\n-;; of the comparison in a tmp reg and then using beqz/bnez.\n-;; ??? The result register doesn't contain 0/STORE_FLAG_VALUE,\n-;; it contains 0/nonzero.\n-\n-(define_insn \"cmp_ne_small_const_insn\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(ne:SI (match_operand:SI 1 \"register_operand\" \"0,r\")\n-\t       (match_operand:SI 2 \"cmp_int16_operand\" \"N,P\")))]\n-  \"\"\n-  \"@\n-   addi %0,%#%N2\n-   add3 %0,%1,%#%N2\"\n-  [(set_attr \"type\" \"int2,int4\")\n-   (set_attr \"length\" \"2,4\")])\n \f\n ;; These control RTL generation for conditional jump insns.\n "}]}