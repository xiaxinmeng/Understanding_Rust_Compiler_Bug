{"sha": "0bc0e6173f517bea7b80913199a8a7286d5a5347", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJjMGU2MTczZjUxN2JlYTdiODA5MTMxOTlhOGE3Mjg2ZDVhNTM0Nw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-06-04T11:12:02Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-06-06T17:05:46Z"}, "message": "genhooks: remove dead code\n\ngcc/ChangeLog:\n\n\t* genhooks.c (emit_findices): Remove unused function.\n\t(emit_documentation): Do not call emit_findices\n\tand do not search for @Fcode directives.", "tree": {"sha": "a2f951fa76982d5462c8a8c2d18f552fbc7f839b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2f951fa76982d5462c8a8c2d18f552fbc7f839b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bc0e6173f517bea7b80913199a8a7286d5a5347", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bc0e6173f517bea7b80913199a8a7286d5a5347", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bc0e6173f517bea7b80913199a8a7286d5a5347", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bc0e6173f517bea7b80913199a8a7286d5a5347/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e65bf5ace0437e1c5f182dba056d846829c0c33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e65bf5ace0437e1c5f182dba056d846829c0c33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e65bf5ace0437e1c5f182dba056d846829c0c33"}], "stats": {"total": 33, "additions": 3, "deletions": 30}, "files": [{"sha": "ebe0d0954e69c828bf73a8dc407d411f7ecb8bab", "filename": "gcc/genhooks.c", "status": "modified", "additions": 3, "deletions": 30, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bc0e6173f517bea7b80913199a8a7286d5a5347/gcc%2Fgenhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bc0e6173f517bea7b80913199a8a7286d5a5347/gcc%2Fgenhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenhooks.c?ref=0bc0e6173f517bea7b80913199a8a7286d5a5347", "patch": "@@ -38,26 +38,6 @@ static struct hook_desc hook_array[] = {\n #undef DEFHOOK\n };\n \n-/* For each @Fcode in the first paragraph of the documentation string DOC,\n-   print an @findex directive.  HOOK_NAME is the name of the hook this bit of\n-   documentation pertains to.  */\n-static void\n-emit_findices (const char *doc, const char *hook_name)\n-{\n-  const char *end = strstr (doc, \"\\n\\n\");\n-  const char *fcode;\n-\n-  while ((fcode = strstr (doc, \"@Fcode{\")) && (!end || fcode < end))\n-    {\n-      fcode += strlen (\"@Fcode{\");\n-      doc = strchr (fcode, '}');\n-      if (!doc)\n-\tfatal (\"Malformed @Fcode for hook %s\\n\", hook_name);\n-      printf (\"@findex %.*s\\n\", (int) (doc - fcode), fcode);\n-      doc = fcode;\n-    }\n-}\n-\n /* Return an upper-case copy of IN.  */\n static char *\n upstrdup (const char *in)\n@@ -99,8 +79,8 @@ s_hook_eq_p (const void *p1, const void *p2)\n    signature, followed by the string from the doc field.\n    The documentation is bracketed in @deftypefn / @deftypevr and a matching\n    @end.\n-   While emitting the doc field, @Fcode is translated to @code, and an\n-   @findex entry is added to the affected paragraph.\n+   While emitting the doc field, an @findex entry is added\n+   to the affected paragraph.\n    If the doc field starts with '*', the leading '*' is stripped, and the doc\n    field is otherwise emitted unaltered; no function signature/\n    @deftypefn/deftypevr/@end is emitted.\n@@ -206,7 +186,7 @@ emit_documentation (const char *in_fname)\n \t{\n \t  const char *q, *e;\n \t  const char *deftype;\n-\t  const char *doc, *fcode, *p_end;\n+\t  const char *doc, *p_end;\n \n \t  /* A leading '*' means to output the documentation string without\n \t     further processing.  */\n@@ -216,7 +196,6 @@ emit_documentation (const char *in_fname)\n \t    {\n \t      if (i != shp->pos)\n \t\tprintf (\"\\n\\n\");\n-\t      emit_findices (hook_array[i].doc, name);\n \n \t      /* Print header.  Function-valued hooks have a parameter list, \n \t\t unlike POD-valued ones.  */\n@@ -262,13 +241,7 @@ emit_documentation (const char *in_fname)\n \t\t      /* Find paragraph end.  */\n \t\t      p_end = strstr (doc, \"\\n\\n\");\n \t\t      p_end = (p_end ? p_end + 2 : doc + strlen (doc));\n-\t\t      /* Print paragraph, emitting @Fcode as @code.  */\n-\t\t      for (; (fcode = strstr (doc, \"@Fcode{\")) && fcode < p_end;\n-\t\t\t   doc = fcode + 2)\n-\t\t\tprintf (\"%.*s@\", (int) (fcode - doc), doc);\n \t\t      printf (\"%.*s\", (int) (p_end - doc), doc);\n-\t\t      /* Emit function indices for next paragraph.  */\n-\t\t      emit_findices (p_end, name);\n \t\t    }\n \t\t  printf (\"\\n@end %s\", deftype);\n \t\t}"}]}