{"sha": "b176f389161bbe30237ff29063697f8e0ccaa513", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE3NmYzODkxNjFiYmUzMDIzN2ZmMjkwNjM2OTdmOGUwY2NhYTUxMw==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-26T21:16:21Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-27T11:32:25Z"}, "message": "Add flags for FnType FNTYPE_IS_METHOD_FLAG FNTYPE_IS_EXTERN_FLAG", "tree": {"sha": "b8d6da12bb614669c11d0b3a6b91bfb7c518ab1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8d6da12bb614669c11d0b3a6b91bfb7c518ab1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b176f389161bbe30237ff29063697f8e0ccaa513", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b176f389161bbe30237ff29063697f8e0ccaa513", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b176f389161bbe30237ff29063697f8e0ccaa513", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b176f389161bbe30237ff29063697f8e0ccaa513/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "defe97ea4dfd5d0e77ec2a8401c987772d96884f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/defe97ea4dfd5d0e77ec2a8401c987772d96884f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/defe97ea4dfd5d0e77ec2a8401c987772d96884f"}], "stats": {"total": 141, "additions": 125, "deletions": 16}, "files": [{"sha": "02e5ef19aecc28a4944b02bd07b7a606b788202f", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 100, "deletions": 5, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b176f389161bbe30237ff29063697f8e0ccaa513/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b176f389161bbe30237ff29063697f8e0ccaa513/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=b176f389161bbe30237ff29063697f8e0ccaa513", "patch": "@@ -28,6 +28,101 @@\n namespace Rust {\n namespace Resolver {\n \n+class TypeCheckTopLevelExternItem : public TypeCheckBase\n+{\n+  using Rust::Resolver::TypeCheckBase::visit;\n+\n+public:\n+  static void Resolve (HIR::ExternalItem *item)\n+  {\n+    TypeCheckTopLevelExternItem resolver;\n+    item->accept_vis (resolver);\n+  }\n+\n+  void visit (HIR::ExternalStaticItem &item) override\n+  {\n+    TyTy::BaseType *actual_type\n+      = TypeCheckType::Resolve (item.get_item_type ().get ());\n+\n+    context->insert_type (item.get_mappings (), actual_type);\n+  }\n+\n+  void visit (HIR::ExternalFunctionItem &function) override\n+  {\n+    std::vector<TyTy::SubstitutionParamMapping> substitutions;\n+    if (function.has_generics ())\n+      {\n+\tfor (auto &generic_param : function.get_generic_params ())\n+\t  {\n+\t    switch (generic_param.get ()->get_kind ())\n+\t      {\n+\t      case HIR::GenericParam::GenericKind::LIFETIME:\n+\t\t// Skipping Lifetime completely until better handling.\n+\t\tbreak;\n+\n+\t\tcase HIR::GenericParam::GenericKind::TYPE: {\n+\t\t  auto param_type\n+\t\t    = TypeResolveGenericParam::Resolve (generic_param.get ());\n+\t\t  context->insert_type (generic_param->get_mappings (),\n+\t\t\t\t\tparam_type);\n+\n+\t\t  substitutions.push_back (TyTy::SubstitutionParamMapping (\n+\t\t    static_cast<HIR::TypeParam &> (*generic_param),\n+\t\t    param_type));\n+\t\t}\n+\t\tbreak;\n+\t      }\n+\t  }\n+      }\n+\n+    TyTy::BaseType *ret_type = nullptr;\n+    if (!function.has_return_type ())\n+      ret_type = new TyTy::TupleType (function.get_mappings ().get_hirid ());\n+    else\n+      {\n+\tauto resolved\n+\t  = TypeCheckType::Resolve (function.get_return_type ().get ());\n+\tif (resolved == nullptr)\n+\t  {\n+\t    rust_error_at (function.get_locus (),\n+\t\t\t   \"failed to resolve return type\");\n+\t    return;\n+\t  }\n+\n+\tret_type = resolved->clone ();\n+\tret_type->set_ref (\n+\t  function.get_return_type ()->get_mappings ().get_hirid ());\n+      }\n+\n+    std::vector<std::pair<HIR::Pattern *, TyTy::BaseType *> > params;\n+    for (auto &param : function.get_function_params ())\n+      {\n+\t// get the name as well required for later on\n+\tauto param_tyty = TypeCheckType::Resolve (param.get_type ().get ());\n+\n+\tHIR::IdentifierPattern *param_pattern = new HIR::IdentifierPattern (\n+\t  param.get_param_name (), Location (), false, false,\n+\t  std::unique_ptr<HIR::Pattern> (nullptr));\n+\n+\tparams.push_back (\n+\t  std::pair<HIR::Pattern *, TyTy::BaseType *> (param_pattern,\n+\t\t\t\t\t\t       param_tyty));\n+\n+\tcontext->insert_type (param.get_mappings (), param_tyty);\n+      }\n+\n+    auto fnType = new TyTy::FnType (function.get_mappings ().get_hirid (),\n+\t\t\t\t    function.get_mappings ().get_defid (),\n+\t\t\t\t    function.get_item_name (),\n+\t\t\t\t    FNTYPE_IS_EXTERN_FLAG, std::move (params),\n+\t\t\t\t    ret_type, std::move (substitutions));\n+    context->insert_type (function.get_mappings (), fnType);\n+  }\n+\n+private:\n+  TypeCheckTopLevelExternItem () : TypeCheckBase () {}\n+};\n+\n class TypeCheckTopLevelImplItem : public TypeCheckBase\n {\n   using Rust::Resolver::TypeCheckBase::visit;\n@@ -134,11 +229,11 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \tcontext->insert_type (param.get_mappings (), param_tyty);\n       }\n \n-    auto fnType = new TyTy::FnType (function.get_mappings ().get_hirid (),\n-\t\t\t\t    function.get_mappings ().get_defid (),\n-\t\t\t\t    function.get_function_name (),\n-\t\t\t\t    function.is_method (), std::move (params),\n-\t\t\t\t    ret_type, std::move (substitutions));\n+    auto fnType = new TyTy::FnType (\n+      function.get_mappings ().get_hirid (),\n+      function.get_mappings ().get_defid (), function.get_function_name (),\n+      function.is_method () ? FNTYPE_IS_METHOD_FLAG : FNTYPE_DEFAULT_FLAGS,\n+      std::move (params), ret_type, std::move (substitutions));\n     context->insert_type (function.get_mappings (), fnType);\n   }\n "}, {"sha": "18f3e7254164c3cdcfefea3a15e6e900e9db5103", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b176f389161bbe30237ff29063697f8e0ccaa513/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b176f389161bbe30237ff29063697f8e0ccaa513/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=b176f389161bbe30237ff29063697f8e0ccaa513", "patch": "@@ -230,9 +230,9 @@ class TypeCheckTopLevel : public TypeCheckBase\n \n     auto fnType = new TyTy::FnType (function.get_mappings ().get_hirid (),\n \t\t\t\t    function.get_mappings ().get_defid (),\n-\t\t\t\t    function.get_function_name (), false,\n-\t\t\t\t    std::move (params), ret_type,\n-\t\t\t\t    std::move (substitutions));\n+\t\t\t\t    function.get_function_name (),\n+\t\t\t\t    FNTYPE_DEFAULT_FLAGS, std::move (params),\n+\t\t\t\t    ret_type, std::move (substitutions));\n     context->insert_type (function.get_mappings (), fnType);\n   }\n \n@@ -274,6 +274,14 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t\t\t\t\t  substitutions);\n   }\n \n+  void visit (HIR::ExternBlock &extern_block) override\n+  {\n+    for (auto &item : extern_block.get_extern_items ())\n+      {\n+\tTypeCheckTopLevelExternItem::Resolve (item.get ());\n+      }\n+  }\n+\n private:\n   TypeCheckTopLevel () : TypeCheckBase () {}\n };"}, {"sha": "64587daf2e55832434c66e94b3a9de13c5caa2da", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b176f389161bbe30237ff29063697f8e0ccaa513/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b176f389161bbe30237ff29063697f8e0ccaa513/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=b176f389161bbe30237ff29063697f8e0ccaa513", "patch": "@@ -816,7 +816,7 @@ FnType::clone ()\n       std::pair<HIR::Pattern *, BaseType *> (p.first, p.second->clone ()));\n \n   return new FnType (get_ref (), get_ty_ref (), get_id (), get_identifier (),\n-\t\t     is_method_flag, std::move (cloned_params),\n+\t\t     flags, std::move (cloned_params),\n \t\t     get_return_type ()->clone (), clone_substs (),\n \t\t     get_combined_refs ());\n }"}, {"sha": "0a087dfd40e8d07fe40ad0f14329aa6c8b99bcb7", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b176f389161bbe30237ff29063697f8e0ccaa513/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b176f389161bbe30237ff29063697f8e0ccaa513/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=b176f389161bbe30237ff29063697f8e0ccaa513", "patch": "@@ -970,30 +970,34 @@ class ADTType : public BaseType, public SubstitutionRef\n class FnType : public BaseType, public SubstitutionRef\n {\n public:\n-  FnType (HirId ref, DefId id, std::string identifier, bool is_method,\n+#define FNTYPE_DEFAULT_FLAGS 0x00\n+#define FNTYPE_IS_METHOD_FLAG 0x01\n+#define FNTYPE_IS_EXTERN_FLAG 0x02\n+\n+  FnType (HirId ref, DefId id, std::string identifier, uint8_t flags,\n \t  std::vector<std::pair<HIR::Pattern *, BaseType *> > params,\n \t  BaseType *type, std::vector<SubstitutionParamMapping> subst_refs,\n \t  std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::FNDEF, refs),\n       SubstitutionRef (std::move (subst_refs),\n \t\t       SubstitutionArgumentMappings::error ()),\n-      params (std::move (params)), type (type), is_method_flag (is_method),\n+      params (std::move (params)), type (type), flags (flags),\n       identifier (identifier), id (id)\n   {\n     LocalDefId local_def_id = id & DEF_ID_LOCAL_DEF_MASK;\n     rust_assert (local_def_id != UNKNOWN_LOCAL_DEFID);\n   }\n \n   FnType (HirId ref, HirId ty_ref, DefId id, std::string identifier,\n-\t  bool is_method,\n+\t  uint8_t flags,\n \t  std::vector<std::pair<HIR::Pattern *, BaseType *> > params,\n \t  BaseType *type, std::vector<SubstitutionParamMapping> subst_refs,\n \t  std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::FNDEF, refs),\n       SubstitutionRef (std::move (subst_refs),\n \t\t       SubstitutionArgumentMappings::error ()),\n-      params (params), type (type), is_method_flag (is_method),\n-      identifier (identifier), id (id)\n+      params (params), type (type), flags (flags), identifier (identifier),\n+      id (id)\n   {\n     LocalDefId local_def_id = id & DEF_ID_LOCAL_DEF_MASK;\n     rust_assert (local_def_id != UNKNOWN_LOCAL_DEFID);\n@@ -1022,9 +1026,11 @@ class FnType : public BaseType, public SubstitutionRef\n     if (num_params () == 0)\n       return false;\n \n-    return is_method_flag;\n+    return (flags & FNTYPE_IS_METHOD_FLAG) != 0;\n   }\n \n+  bool is_extern () const { return (flags & FNTYPE_IS_EXTERN_FLAG) != 0; }\n+\n   DefId get_id () const { return id; }\n \n   // get the Self type for the method\n@@ -1077,7 +1083,7 @@ class FnType : public BaseType, public SubstitutionRef\n private:\n   std::vector<std::pair<HIR::Pattern *, BaseType *> > params;\n   BaseType *type;\n-  bool is_method_flag;\n+  uint8_t flags;\n   std::string identifier;\n   DefId id;\n };"}]}