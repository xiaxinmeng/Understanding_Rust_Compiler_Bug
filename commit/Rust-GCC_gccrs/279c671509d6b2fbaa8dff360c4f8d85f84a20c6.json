{"sha": "279c671509d6b2fbaa8dff360c4f8d85f84a20c6", "node_id": "C_kwDOANBUbNoAKDI3OWM2NzE1MDlkNmIyZmJhYThkZmYzNjBjNGY4ZDg1Zjg0YTIwYzY", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-23T00:18:01Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-23T00:18:01Z"}, "message": "Daily bump.", "tree": {"sha": "277a540190aacff21f9e6d51b4d5d43abb20af3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/277a540190aacff21f9e6d51b4d5d43abb20af3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/279c671509d6b2fbaa8dff360c4f8d85f84a20c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/279c671509d6b2fbaa8dff360c4f8d85f84a20c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/279c671509d6b2fbaa8dff360c4f8d85f84a20c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/279c671509d6b2fbaa8dff360c4f8d85f84a20c6/comments", "author": null, "committer": null, "parents": [{"sha": "94ccaf62c378c3737f7e4b6a80e1160157119171", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ccaf62c378c3737f7e4b6a80e1160157119171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94ccaf62c378c3737f7e4b6a80e1160157119171"}], "stats": {"total": 421, "additions": 420, "deletions": 1}, "files": [{"sha": "6986721ee61aa540f3e4a03c3ba45fa2065ceade", "filename": "gcc/ChangeLog", "status": "modified", "additions": 224, "deletions": 0, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279c671509d6b2fbaa8dff360c4f8d85f84a20c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279c671509d6b2fbaa8dff360c4f8d85f84a20c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=279c671509d6b2fbaa8dff360c4f8d85f84a20c6", "patch": "@@ -1,3 +1,227 @@\n+2022-09-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-fold.cc (range_of_range_op): Handle no operands.\n+\t(range_of_call): Do not check for builtins.\n+\t(fold_using_range::range_of_builtin_call): Delete.\n+\t(fold_using_range::range_of_builtin_int_call): Delete.\n+\t* gimple-range-fold.h: Adjust prototypes.\n+\t* gimple-range-op.cc (class cfn_parity): New.\n+\t(gimple_range_op_handler::maybe_builtin_call): Set arguments.\n+\n+2022-09-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-fold.cc (range_of_builtin_int_call): Remove case\n+\tfor CFN_GOACC_DIM_*.\n+\t* gimple-range-op.cc (class cfn_goacc_dim): New.\n+\t(gimple_range_op_handler::maybe_builtin_call): Set arguments.\n+\n+2022-09-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-fold.cc (range_of_builtin_int_call): Remove case\n+\tfor CFN_BUILT_IN_STRLEN.\n+\t* gimple-range-op.cc (class cfn_strlen): New.\n+\t(gimple_range_op_handler::maybe_builtin_call): Set arguments.\n+\n+2022-09-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-fold.cc (range_of_builtin_ubsan_call): Delete.\n+\t(range_of_builtin_int_call): Remove cases for\n+\tCFN_BUILT_IN_UBSAN_CHECK.\n+\t* gimple-range-op.cc (class cfn_ubsan): New.\n+\t(gimple_range_op_handler::maybe_builtin_call): Set arguments.\n+\n+2022-09-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-fold.cc (range_of_builtin_int_call): Remove case\n+\tfor CFN_BUILT_IN_CLRSB.\n+\t* gimple-range-op.cc (class cfn_clrsb): New.\n+\t(gimple_range_op_handler::maybe_builtin_call): Set arguments.\n+\n+2022-09-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-fold.cc (range_of_builtin_int_call): Remove case\n+\tfor CFN_CTZ.\n+\t* gimple-range-op.cc (class cfn_ctz): New.\n+\t(gimple_range_op_handler::maybe_builtin_call): Set arguments.\n+\n+2022-09-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-fold.cc (range_of_builtin_int_call): Remove case\n+\tfor CFN_CLZ.\n+\t* gimple-range-op.cc (class cfn_clz): New.\n+\t(gimple_range_op_handler::maybe_builtin_call): Set arguments.\n+\n+2022-09-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-fold.cc (range_of_builtin_int_call): Remove case\n+\tfor CFN_FFS and CFN_POPCOUNT.\n+\t* gimple-range-op.cc (class cfn_pocount): New.\n+\t(gimple_range_op_handler::maybe_builtin_call): Set arguments.\n+\n+2022-09-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-fold.cc (get_letter_range): Move to new class.\n+\t(range_of_builtin_int_call): Remove case for CFN_BUILT_IN_TOUPPER\n+\tand CFN_BUILT_IN_TOLOWER.\n+\t* gimple-range-op.cc (class cfn_toupper_tolower): New.\n+\t(gimple_range_op_handler::maybe_builtin_call): Set arguments.\n+\n+2022-09-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-fold.cc (range_of_builtin_int_call): Remove case\n+\tfor CFN_BUILT_IN_SIGNBIT.\n+\t* gimple-range-op.cc (class cfn_signbit): New.\n+\t(gimple_range_op_handler::maybe_builtin_call): Set arguments.\n+\n+2022-09-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-fold.cc\n+\t(fold_using_range::range_of_builtin_int_call): Remove case for\n+\tCFN_BUILT_IN_CONSTANT_P.\n+\t* gimple-range-op.cc (gimple_range_op_handler::supported_p):\n+\tCheck if a call also creates a range-op object.\n+\t(gimple_range_op_handler): Also check builtin calls.\n+\t(class cfn_constant_float_p): New.  Float CFN_BUILT_IN_CONSTANT_P.\n+\t(class cfn_constant_p): New.  Integral CFN_BUILT_IN_CONSTANT_P.\n+\t(gimple_range_op_handler::maybe_builtin_call): Set arguments and\n+\thandler for supported built-in calls.\n+\t* gimple-range-op.h (maybe_builtin_call): New prototype.\n+\n+2022-09-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-fold.cc (range_of_range_op): Set result to\n+\tVARYING if the call to fold_range fails.\n+\t* tree-data-ref.cc (compute_distributive_range): Ditto.\n+\t* tree-vrp.cc (range_fold_binary_expr): Ditto.\n+\t(range_fold_unary_expr): Ditto.\n+\t* value-query.cc (range_query::get_tree_range): Ditto.\n+\n+2022-09-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* range-op-float.cc (range_operator_float::fold_range): New base\n+\t  method for \"int = float op int\".\n+\t* range-op.cc (range_op_handler::fold_range): New case.\n+\t* range-op.h: Update prototypes.\n+\n+2022-09-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-op.cc (gimple_range_op_handler::calc_op1): Use\n+\t  operand 1 for second range if there is no operand 2.\n+\n+2022-09-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* Makefile.in (OBJS): Add gimple-range-op.o.\n+\t* gimple-range-edge.cc (gimple_outgoing_range_stmt_p): Use\n+\tgimple_range_op_handler.\n+\t* gimple-range-fold.cc (gimple_range_base_of_assignment): Move\n+\tto a method in gimple_range_op_handler.\n+\t(gimple_range_operand1): Ditto.\n+\t(gimple_range_operand2): Ditto.\n+\t(fold_using_range::fold_stmt): Use gimple_range_op_handler.\n+\t(fold_using_range::range_of_range_op): Ditto.\n+\t(fold_using_range::relation_fold_and_or): Ditto.\n+\t(fur_source::register_outgoing_edges): Ditto.\n+\t(gimple_range_ssa_names): Relocate to gimple-range-op.cc.\n+\t* gimple-range-fold.h: Adjust prototypes.\n+\t* gimple-range-gori.cc (gimple_range_calc_op1): Move\n+\tto a method in gimple_range_op_handler.\n+\t(gimple_range_calc_op2): Ditto.\n+\t(gori_compute::compute_operand_range): Use\n+\tgimple_range_op_handler.\n+\t(gori_compute::compute_logical_operands): Ditto.\n+\t(compute_operand1_range): Ditto.\n+\t(gori_compute::compute_operand2_range): Ditto.\n+\t(gori_compute::compute_operand1_and_operand2_range): Ditto.\n+\t* gimple-range-gori.h: Adjust protoypes.\n+\t* gimple-range-op.cc: New.  Supply gimple_range_op_handler methods.\n+\t* gimple-range-op.h: New.  Supply gimple_range_op_handler class.\n+\t* gimple-range.cc (gimple_ranger::prefill_name): Use\n+\tgimple_range_op_handler.\n+\t(gimple_ranger::prefill_stmt_dependencies): Ditto.\n+\t* gimple-range.h: Include gimple-range-op.h.\n+\t* range-op.cc (range_op_handler::range_op_handler): Adjust and\n+\tremove gimple * parameter option.\n+\t* range-op.h: Adjust prototypes.\n+\n+2022-09-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* range-op.cc (range_op_handler::set_op_handler): Set new fields.\n+\t(ange_op_handler::range_op_handler): Likewise.\n+\t(range_op_handler::operator bool): Remove.\n+\t(range_op_handler::fold_range): Use appropriate handler.\n+\t(range_op_handler::op1_range): Likewise.\n+\t(range_op_handler::op2_range): Likewise.\n+\t(range_op_handler::lhs_op1_relation): Likewise.\n+\t(range_op_handler::lhs_op2_relation): Likewise.\n+\t(range_op_handler::op1_op2_relation): Likewise.\n+\t* range-op.h (class range_op_handler): Store handler pointers.\n+\t(range_op_handler:: operator bool): Inline.\n+\n+2022-09-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* tree-ssa-threadbackward.cc\n+\t  (back_threader::find_paths_to_names): Replace sequence with\n+\t  a call to gimple_range_ssa_names.\n+\n+2022-09-22  Martin Liska  <mliska@suse.cz>\n+\t    Fangrui Song  <i@maskray.me>\n+\n+\t* configure: Regenerate.\n+\t* configure.ac: Simplify to gcc_cv_ld_compress_debug={0,1}\n+\tand gcc_cv_as_compress_debug={0,1}.\n+\t* doc/invoke.texi: Document the removal.\n+\t* gcc.cc (LINK_COMPRESS_DEBUG_SPEC): Simplify and ignore\n+\t  zlib-gnu.\n+\t(ASM_COMPRESS_DEBUG_SPEC): Likewise.\n+\n+2022-09-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106922\n+\t* tree-ssa-sccvn.cc (vn_walk_cb_data::same_val): New member.\n+\t(vn_walk_cb_data::finish): Perform delayed verification of\n+\ta skipped may-alias.\n+\t(vn_reference_lookup_pieces): Likewise.\n+\t(vn_reference_lookup): Likewise.\n+\t(vn_reference_lookup_3): When skipping stores of the same\n+\tvalue also handle constant stores that are more than a\n+\tsingle VDEF away by delaying the verification.\n+\n+2022-09-22  Max Filippov  <jcmvbkbc@gmail.com>\n+\n+\t* config/xtensa/xtensa.cc (TARGET_MAX_ANCHOR_OFFSET): New\n+\tdefinition.\n+\n+2022-09-22  Max Filippov  <jcmvbkbc@gmail.com>\n+\n+\t* config/xtensa/xtensa.cc (xtensa_can_output_mi_thunk)\n+\t(xtensa_output_mi_thunk): New functions.\n+\t(TARGET_ASM_CAN_OUTPUT_MI_THUNK)\n+\t(TARGET_ASM_OUTPUT_MI_THUNK): New macro definitions.\n+\t(xtensa_prepare_expand_call): Use fixed register a8 as temporary\n+\twhen called with reload_completed set to 1.\n+\n+2022-09-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99407\n+\t* tree-ssa-dse.cc (dse_stmt_to_dr_map): New global.\n+\t(dse_classify_store): Use data-ref analysis to disambiguate more uses.\n+\t(pass_dse::use_dr_analysis_p): New pass parameter.\n+\t(pass_dse::set_pass_param): Implement.\n+\t(pass_dse::execute): Allocate and deallocate dse_stmt_to_dr_map.\n+\t* passes.def: Allow DR analysis for the DSE pass before loop.\n+\n+2022-09-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.cc (can_track_predicate_on_edge): New\n+\tfunction split out from ...\n+\t(vn_nary_op_insert_pieces_predicated): ... here.\n+\n+2022-09-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/106994\n+\t* config/i386/mmx.md (floorv2sf2): Fix typo, use\n+\tregister_operand instead of vector_operand for operands[1].\n+\n 2022-09-21  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR tree-optimization/106967"}, {"sha": "44f77519800c47263479370efa261fb09130b7e5", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279c671509d6b2fbaa8dff360c4f8d85f84a20c6/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279c671509d6b2fbaa8dff360c4f8d85f84a20c6/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=279c671509d6b2fbaa8dff360c4f8d85f84a20c6", "patch": "@@ -1 +1 @@\n-20220922\n+20220923"}, {"sha": "248490e9f19b09e2df31febb50737c911e1c930d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279c671509d6b2fbaa8dff360c4f8d85f84a20c6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279c671509d6b2fbaa8dff360c4f8d85f84a20c6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=279c671509d6b2fbaa8dff360c4f8d85f84a20c6", "patch": "@@ -1,3 +1,9 @@\n+2022-09-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/106830\n+\t* c-warn.cc (check_for_xor_used_as_pow): Don't try checking\n+\tvalues that don't fit in uhwi.\n+\n 2022-09-15  Richard Biener  <rguenther@suse.de>\n \n \t* c-common.h (build_void_list_node): Remove."}, {"sha": "21248d35b31652a209d2e7762b2b1cae6d29ba63", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279c671509d6b2fbaa8dff360c4f8d85f84a20c6/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279c671509d6b2fbaa8dff360c4f8d85f84a20c6/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=279c671509d6b2fbaa8dff360c4f8d85f84a20c6", "patch": "@@ -1,3 +1,22 @@\n+2022-09-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/106830\n+\t* c-parser.cc (c_parser_initelt): Initialize m_decimal.\n+\t(c_parser_cast_expression): Likewise.\n+\t(c_parser_alignof_expression): Likewise.\n+\t(c_parser_postfix_expression_after_paren_type): Likewise.\n+\t(c_parser_postfix_expression_after_primary): Likewise.\n+\t(c_parser_expression): Likewise.\n+\t(c_parser_omp_variable_list): Likewise.\n+\t(c_parser_transaction_expression): Likewise.\n+\t* c-tree.h (c_expr::set_error): Likewise.\n+\t* c-typeck.cc (c_expr_sizeof_expr): Likewise.\n+\t(parser_build_unary_op): Likewise.\n+\t(parser_build_binary_op): Likewise.\n+\t(digest_init): Likewise.\n+\t(pop_init_level): Likewise.\n+\t* gimple-parser.cc (c_parser_gimple_call_internal): Likewise.\n+\n 2022-09-19  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/106947"}, {"sha": "f2af297b68b5edc23d0edfa61f678a20b0d3fef2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279c671509d6b2fbaa8dff360c4f8d85f84a20c6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279c671509d6b2fbaa8dff360c4f8d85f84a20c6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=279c671509d6b2fbaa8dff360c4f8d85f84a20c6", "patch": "@@ -1,3 +1,15 @@\n+2022-09-22  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/106826\n+\t* module.cc (trees_out::decl_value): Use get_template_info in\n+\tthe MK_partial case to handle both VAR_DECL and TYPE_DECL.\n+\t(trees_out::key_mergeable): Likewise.\n+\t(trees_in::key_mergeable): Likewise.\n+\t(has_definition): Consider DECL_INITIAL of a partial variable\n+\ttemplate specialization.\n+\t(depset::hash::make_dependency): Handle partial variable template\n+\tspecializations too.\n+\n 2022-09-20  Patrick Palka  <ppalka@redhat.com>\n \n \t* decl.cc (cp_finish_decl): After updating the deduced type of a"}, {"sha": "998fb1b74cf790de837f8e954d5d857130dcbc37", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279c671509d6b2fbaa8dff360c4f8d85f84a20c6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279c671509d6b2fbaa8dff360c4f8d85f84a20c6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=279c671509d6b2fbaa8dff360c4f8d85f84a20c6", "patch": "@@ -1,3 +1,16 @@\n+2022-09-22  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n+\n+\tPR fortran/100103\n+\t* trans-array.cc (gfc_is_reallocatable_lhs): Add select rank\n+\ttemporary associate names as possible targets of automatic\n+\treallocation.\n+\n+2022-09-22  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/82868\n+\t* trans-decl.cc (generate_coarray_sym_init): Skip symbol\n+\tif attr.associate_var.\n+\n 2022-09-20  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/104143"}, {"sha": "55d13c7bb57cf446ccfdfdfca9a082a1acece3fe", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279c671509d6b2fbaa8dff360c4f8d85f84a20c6/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279c671509d6b2fbaa8dff360c4f8d85f84a20c6/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=279c671509d6b2fbaa8dff360c4f8d85f84a20c6", "patch": "@@ -1,3 +1,7 @@\n+2022-09-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* fr.po: Update.\n+\n 2022-08-30  Joseph Myers  <joseph@codesourcery.com>\n \n \t* sv.po: Update."}, {"sha": "7430fa9b32df1f6438ead6fc95b0a03c47ac0d58", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279c671509d6b2fbaa8dff360c4f8d85f84a20c6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279c671509d6b2fbaa8dff360c4f8d85f84a20c6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=279c671509d6b2fbaa8dff360c4f8d85f84a20c6", "patch": "@@ -1,3 +1,44 @@\n+2022-09-22  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n+\n+\tPR fortran/100103\n+\t* gfortran.dg/PR100103.f90: New test.\n+\n+2022-09-22  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/82868\n+\t* gfortran.dg/associate_26a.f90: New test.\n+\n+2022-09-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102801\n+\t* g++.dg/warn/Wuninitialized-33.C: New testcase.\n+\n+2022-09-22  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/106826\n+\t* g++.dg/modules/partial-2_a.C: New test.\n+\t* g++.dg/modules/partial-2_b.C: New test.\n+\n+2022-09-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/106830\n+\t* gcc.dg/Wxor-used-as-pow-pr106830.c: New test.\n+\n+2022-09-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106922\n+\t* gcc.dg/tree-ssa/ssa-fre-100.c: New testcase.\n+\t* g++.dg/tree-ssa/pr106922.C: Adjust.\n+\n+2022-09-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99407\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s243.c: Remove XFAIL.\n+\n+2022-09-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr106994.c: New test.\n+\n 2022-09-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/106984"}, {"sha": "9ebfaa0ad3df9e9c650ace0c8e0ca388f1ce178d", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279c671509d6b2fbaa8dff360c4f8d85f84a20c6/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279c671509d6b2fbaa8dff360c4f8d85f84a20c6/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=279c671509d6b2fbaa8dff360c4f8d85f84a20c6", "patch": "@@ -1,3 +1,10 @@\n+2022-09-22  Thomas Neumann  <tneumann@users.sourceforge.net>\n+\n+\t* unwind-dw2-fde.c: (release_register_frames) Remember\n+\twhen the btree has been destroyed.\n+\t(__deregister_frame_info_bases) Disable the assert when\n+\tshutting down.\n+\n 2022-09-18  Thomas Neumann  <tneumann@users.sourceforge.net>\n \n \t* unwind-dw2-fde.c: Replace uintptr_t with typedef"}, {"sha": "f5373727b79726fe45b73e27db50b57f0115ade4", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279c671509d6b2fbaa8dff360c4f8d85f84a20c6/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279c671509d6b2fbaa8dff360c4f8d85f84a20c6/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=279c671509d6b2fbaa8dff360c4f8d85f84a20c6", "patch": "@@ -1,3 +1,7 @@\n+2022-09-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* README: Replace gcc-bugs email address with Bugzilla URL.\n+\n 2022-08-25  Martin Liska  <mliska@suse.cz>\n \n \t* configure: Regenerate."}, {"sha": "3890e53de649d401255e88fac531559451b14491", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279c671509d6b2fbaa8dff360c4f8d85f84a20c6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279c671509d6b2fbaa8dff360c4f8d85f84a20c6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=279c671509d6b2fbaa8dff360c4f8d85f84a20c6", "patch": "@@ -1,3 +1,92 @@\n+2022-09-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/bitset (bitset): Add constexpr for C++23. Guard\n+\tmembers using std::string with _GLIBCXX_HOSTED.\n+\t* include/std/version (__cpp_lib_constexpr_bitset): Define.\n+\t* testsuite/20_util/bitset/access/constexpr.cc: New test.\n+\t* testsuite/20_util/bitset/cons/constexpr_c++23.cc: New test.\n+\t* testsuite/20_util/bitset/count/constexpr.cc: New test.\n+\t* testsuite/20_util/bitset/ext/constexpr.cc: New test.\n+\t* testsuite/20_util/bitset/operations/constexpr_c++23.cc: New test.\n+\t* testsuite/20_util/bitset/version.cc: New test.\n+\n+2022-09-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/23_containers/bitset/18604.cc: Moved to...\n+\t* testsuite/20_util/bitset/18604.cc: ...here.\n+\t* testsuite/23_containers/bitset/45713.cc: Moved to...\n+\t* testsuite/20_util/bitset/45713.cc: ...here.\n+\t* testsuite/23_containers/bitset/to_string/dr396.cc: Moved to...\n+\t* testsuite/20_util/bitset/access/dr396.cc: ...here.\n+\t* testsuite/23_containers/bitset/to_string/1.cc: Moved to...\n+\t* testsuite/20_util/bitset/access/to_string.cc: ...here.\n+\t* testsuite/23_containers/bitset/to_ullong/1.cc: Moved to...\n+\t* testsuite/20_util/bitset/access/to_ullong.cc: ...here.\n+\t* testsuite/23_containers/bitset/to_ulong/1.cc: Moved to...\n+\t* testsuite/20_util/bitset/access/to_ulong.cc: ...here.\n+\t* testsuite/23_containers/bitset/cons/1.cc: Moved to...\n+\t* testsuite/20_util/bitset/cons/1.cc: ...here.\n+\t* testsuite/23_containers/bitset/cons/16020.cc: Moved to...\n+\t* testsuite/20_util/bitset/cons/16020.cc: ...here.\n+\t* testsuite/23_containers/bitset/cons/2.cc: Moved to...\n+\t* testsuite/20_util/bitset/cons/2.cc: ...here.\n+\t* testsuite/23_containers/bitset/cons/3.cc: Moved to...\n+\t* testsuite/20_util/bitset/cons/3.cc: ...here.\n+\t* testsuite/23_containers/bitset/cons/38244.cc: Moved to...\n+\t* testsuite/20_util/bitset/cons/38244.cc: ...here.\n+\t* testsuite/23_containers/bitset/cons/50268.cc: Moved to...\n+\t* testsuite/20_util/bitset/cons/50268.cc: ...here.\n+\t* testsuite/23_containers/bitset/cons/6282.cc: Moved to...\n+\t* testsuite/20_util/bitset/cons/6282.cc: ...here.\n+\t* testsuite/23_containers/bitset/cons/constexpr.cc: Moved to...\n+\t* testsuite/20_util/bitset/cons/constexpr.cc: ...here.\n+\t* testsuite/23_containers/bitset/cons/dr1325-1.cc: Moved to...\n+\t* testsuite/20_util/bitset/cons/dr1325-1.cc: ...here.\n+\t* testsuite/23_containers/bitset/cons/dr1325-2.cc: Moved to...\n+\t* testsuite/20_util/bitset/cons/dr1325-2.cc: ...here.\n+\t* testsuite/23_containers/bitset/cons/dr396.cc: Moved to...\n+\t* testsuite/20_util/bitset/cons/dr396.cc: ...here.\n+\t* testsuite/23_containers/bitset/debug/invalidation/1.cc: Moved to...\n+\t* testsuite/20_util/bitset/debug/invalidation/1.cc: ...here.\n+\t* testsuite/23_containers/bitset/ext/15361.cc: Moved to...\n+\t* testsuite/20_util/bitset/ext/15361.cc: ...here.\n+\t* testsuite/23_containers/bitset/hash/1.cc: Moved to...\n+\t* testsuite/20_util/bitset/hash/1.cc: ...here.\n+\t* testsuite/23_containers/bitset/input/1.cc: Moved to...\n+\t* testsuite/20_util/bitset/io/input.cc: ...here.\n+\t* testsuite/23_containers/bitset/count/6124.cc: Moved to...\n+\t* testsuite/20_util/bitset/observers/6124.cc: ...here.\n+\t* testsuite/23_containers/bitset/all/1.cc: Moved to...\n+\t* testsuite/20_util/bitset/observers/all.cc: ...here.\n+\t* testsuite/23_containers/bitset/test/1.cc: Moved to...\n+\t* testsuite/20_util/bitset/observers/test.cc: ...here.\n+\t* testsuite/23_containers/bitset/operations/1.cc: Moved to...\n+\t* testsuite/20_util/bitset/operations/1.cc: ...here.\n+\t* testsuite/23_containers/bitset/operations/13838.cc: Moved to...\n+\t* testsuite/20_util/bitset/operations/13838.cc: ...here.\n+\t* testsuite/23_containers/bitset/operations/2.cc: Moved to...\n+\t* testsuite/20_util/bitset/operations/2.cc: ...here.\n+\t* testsuite/23_containers/bitset/operations/96303.cc: Moved to...\n+\t* testsuite/20_util/bitset/operations/96303.cc: ...here.\n+\t* testsuite/23_containers/bitset/operations/constexpr-2.cc: Moved to...\n+\t* testsuite/20_util/bitset/operations/constexpr-2.cc: ...here.\n+\t* testsuite/23_containers/bitset/operations/constexpr.cc: Moved to...\n+\t* testsuite/20_util/bitset/operations/constexpr.cc: ...here.\n+\t* testsuite/23_containers/bitset/requirements/constexpr_functions.cc: Moved to...\n+\t* testsuite/20_util/bitset/requirements/constexpr_functions.cc: ...here.\n+\t* testsuite/23_containers/bitset/requirements/explicit_instantiation/1.cc: Moved to...\n+\t* testsuite/20_util/bitset/requirements/explicit_instantiation/1.cc: ...here.\n+\t* testsuite/23_containers/bitset/requirements/explicit_instantiation/1_c++0x.cc: Moved to...\n+\t* testsuite/20_util/bitset/requirements/explicit_instantiation/1_c++0x.cc: ...here.\n+\t* testsuite/23_containers/headers/bitset/synopsis.cc: Moved to...\n+\t* testsuite/20_util/headers/bitset/synopsis.cc: ...here.\n+\n+2022-09-22  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* python/libstdcxx/v6/printers.py: Remove ptinter registration for non-existing\n+\ttypes std::__debug::unique_ptr, std::__debug::stack, std::__debug::queue,\n+\tstd::__debug::priority_queue.\n+\n 2022-09-21  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/91456"}]}