{"sha": "3362d76470c5b397b53a699130406f422b83bba7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM2MmQ3NjQ3MGM1YjM5N2I1M2E2OTkxMzA0MDZmNDIyYjgzYmJhNw==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2016-05-16T11:01:36Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2016-05-16T11:01:36Z"}, "message": "This patch fixes the attributes of integer immediate shifts which were...\n\nThis patch fixes the attributes of integer immediate shifts which were\nincorrectly modelled as register controlled shifts.  Also change EXTR\nattribute to being a rotate.\n\n\t* gcc/config/aarch64/aarch64.md (aarch64_ashl_sisd_or_int_<mode>3):\n\tSplit integer shifts into shift_reg and bfm.\n\t(aarch64_lshr_sisd_or_int_<mode>3): Likewise.\n\t(aarch64_ashr_sisd_or_int_<mode>3): Likewise.\n\t(ror<mode>3_insn): Likewise.\n\t(<optab>si3_insn_uxtw): Likewise.\n\t(<optab><mode>3_insn): Change to rotate_imm.\n\t(extr<mode>5_insn_alt): Likewise.\n\t(extrsi5_insn_uxtw): Likewise.\n\t(extrsi5_insn_uxtw_alt): Likewise.\n\nFrom-SVN: r236278", "tree": {"sha": "e84132de7f1aaa6bdec02d372ef377a9142f64f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e84132de7f1aaa6bdec02d372ef377a9142f64f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3362d76470c5b397b53a699130406f422b83bba7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3362d76470c5b397b53a699130406f422b83bba7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3362d76470c5b397b53a699130406f422b83bba7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3362d76470c5b397b53a699130406f422b83bba7/comments", "author": null, "committer": null, "parents": [{"sha": "6232acb724db1be226fc653096ca23201b60b8ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6232acb724db1be226fc653096ca23201b60b8ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6232acb724db1be226fc653096ca23201b60b8ee"}], "stats": {"total": 78, "additions": 49, "deletions": 29}, "files": [{"sha": "da58116d841c2e424f182eeddeafdb8453ec2a53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3362d76470c5b397b53a699130406f422b83bba7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3362d76470c5b397b53a699130406f422b83bba7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3362d76470c5b397b53a699130406f422b83bba7", "patch": "@@ -1,3 +1,16 @@\n+2016-05-16  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t * gcc/config/aarch64/aarch64.md (aarch64_ashl_sisd_or_int_<mode>3):\n+\tSplit integer shifts into shift_reg and bfm.\n+\t(aarch64_lshr_sisd_or_int_<mode>3): Likewise.\n+\t(aarch64_ashr_sisd_or_int_<mode>3): Likewise.\n+\t(ror<mode>3_insn): Likewise.\n+\t(<optab>si3_insn_uxtw): Likewise.\n+\t(<optab><mode>3_insn): Change to rotate_imm.\n+\t(extr<mode>5_insn_alt): Likewise.\n+\t(extrsi5_insn_uxtw): Likewise.\n+\t(extrsi5_insn_uxtw_alt): Likewise.\n+\n 2016-05-16  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* doc/tm.texi: Regenerate."}, {"sha": "f6bc12dd2efb5fcb104c92b23b9125caec7abf47", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 36, "deletions": 29, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3362d76470c5b397b53a699130406f422b83bba7/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3362d76470c5b397b53a699130406f422b83bba7/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=3362d76470c5b397b53a699130406f422b83bba7", "patch": "@@ -3936,33 +3936,35 @@\n \n ;; Logical left shift using SISD or Integer instruction\n (define_insn \"*aarch64_ashl_sisd_or_int_<mode>3\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=r,w,w\")\n-        (ashift:GPI\n-          (match_operand:GPI 1 \"register_operand\" \"r,w,w\")\n-          (match_operand:QI 2 \"aarch64_reg_or_shift_imm_<mode>\" \"rUs<cmode>,Us<cmode>,w\")))]\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r,r,w,w\")\n+\t(ashift:GPI\n+\t  (match_operand:GPI 1 \"register_operand\" \"r,r,w,w\")\n+\t  (match_operand:QI 2 \"aarch64_reg_or_shift_imm_<mode>\" \"Us<cmode>,r,Us<cmode>,w\")))]\n   \"\"\n   \"@\n+   lsl\\t%<w>0, %<w>1, %2\n    lsl\\t%<w>0, %<w>1, %<w>2\n    shl\\t%<rtn>0<vas>, %<rtn>1<vas>, %2\n    ushl\\t%<rtn>0<vas>, %<rtn>1<vas>, %<rtn>2<vas>\"\n-  [(set_attr \"simd\" \"no,yes,yes\")\n-   (set_attr \"type\" \"shift_reg,neon_shift_imm<q>, neon_shift_reg<q>\")]\n+  [(set_attr \"simd\" \"no,no,yes,yes\")\n+   (set_attr \"type\" \"bfm,shift_reg,neon_shift_imm<q>, neon_shift_reg<q>\")]\n )\n \n ;; Logical right shift using SISD or Integer instruction\n (define_insn \"*aarch64_lshr_sisd_or_int_<mode>3\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=r,w,&w,&w\")\n-        (lshiftrt:GPI\n-          (match_operand:GPI 1 \"register_operand\" \"r,w,w,w\")\n-          (match_operand:QI 2 \"aarch64_reg_or_shift_imm_<mode>\" \"rUs<cmode>,Us<cmode>,w,0\")))]\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r,r,w,&w,&w\")\n+\t(lshiftrt:GPI\n+\t (match_operand:GPI 1 \"register_operand\" \"r,r,w,w,w\")\n+\t (match_operand:QI 2 \"aarch64_reg_or_shift_imm_<mode>\" \"Us<cmode>,r,Us<cmode>,w,0\")))]\n   \"\"\n   \"@\n+   lsr\\t%<w>0, %<w>1, %2\n    lsr\\t%<w>0, %<w>1, %<w>2\n    ushr\\t%<rtn>0<vas>, %<rtn>1<vas>, %2\n    #\n    #\"\n-  [(set_attr \"simd\" \"no,yes,yes,yes\")\n-   (set_attr \"type\" \"shift_reg,neon_shift_imm<q>,neon_shift_reg<q>,neon_shift_reg<q>\")]\n+  [(set_attr \"simd\" \"no,no,yes,yes,yes\")\n+   (set_attr \"type\" \"bfm,shift_reg,neon_shift_imm<q>,neon_shift_reg<q>,neon_shift_reg<q>\")]\n )\n \n (define_split\n@@ -3997,18 +3999,19 @@\n \n ;; Arithmetic right shift using SISD or Integer instruction\n (define_insn \"*aarch64_ashr_sisd_or_int_<mode>3\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=r,w,&w,&w\")\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r,r,w,&w,&w\")\n         (ashiftrt:GPI\n-          (match_operand:GPI 1 \"register_operand\" \"r,w,w,w\")\n-          (match_operand:QI 2 \"aarch64_reg_or_shift_imm_di\" \"rUs<cmode>,Us<cmode>,w,0\")))]\n+          (match_operand:GPI 1 \"register_operand\" \"r,r,w,w,w\")\n+          (match_operand:QI 2 \"aarch64_reg_or_shift_imm_di\" \"Us<cmode>,r,Us<cmode>,w,0\")))]\n   \"\"\n   \"@\n+   asr\\t%<w>0, %<w>1, %2\n    asr\\t%<w>0, %<w>1, %<w>2\n    sshr\\t%<rtn>0<vas>, %<rtn>1<vas>, %2\n    #\n    #\"\n-  [(set_attr \"simd\" \"no,yes,yes,yes\")\n-   (set_attr \"type\" \"shift_reg,neon_shift_imm<q>,neon_shift_reg<q>,neon_shift_reg<q>\")]\n+  [(set_attr \"simd\" \"no,no,yes,yes,yes\")\n+   (set_attr \"type\" \"bfm,shift_reg,neon_shift_imm<q>,neon_shift_reg<q>,neon_shift_reg<q>\")]\n )\n \n (define_split\n@@ -4100,21 +4103,25 @@\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r,r\")\n      (rotatert:GPI\n        (match_operand:GPI 1 \"register_operand\" \"r,r\")\n-       (match_operand:QI 2 \"aarch64_reg_or_shift_imm_<mode>\" \"r,Us<cmode>\")))]\n+       (match_operand:QI 2 \"aarch64_reg_or_shift_imm_<mode>\" \"Us<cmode>,r\")))]\n   \"\"\n-  \"ror\\\\t%<w>0, %<w>1, %<w>2\"\n-  [(set_attr \"type\" \"shift_reg, rotate_imm\")]\n+  \"@\n+   ror\\\\t%<w>0, %<w>1, %2\n+   ror\\\\t%<w>0, %<w>1, %<w>2\"\n+  [(set_attr \"type\" \"rotate_imm,shift_reg\")]\n )\n \n ;; zero_extend version of above\n (define_insn \"*<optab>si3_insn_uxtw\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:DI (SHIFT:SI\n-\t (match_operand:SI 1 \"register_operand\" \"r\")\n-\t (match_operand:QI 2 \"aarch64_reg_or_shift_imm_si\" \"rUss\"))))]\n+\t (match_operand:SI 1 \"register_operand\" \"r,r\")\n+\t (match_operand:QI 2 \"aarch64_reg_or_shift_imm_si\" \"Uss,r\"))))]\n   \"\"\n-  \"<shift>\\\\t%w0, %w1, %w2\"\n-  [(set_attr \"type\" \"shift_reg\")]\n+  \"@\n+   <shift>\\\\t%w0, %w1, %2\n+   <shift>\\\\t%w0, %w1, %w2\"\n+  [(set_attr \"type\" \"bfm,shift_reg\")]\n )\n \n (define_insn \"*<optab><mode>3_insn\"\n@@ -4138,7 +4145,7 @@\n   \"UINTVAL (operands[3]) < GET_MODE_BITSIZE (<MODE>mode) &&\n    (UINTVAL (operands[3]) + UINTVAL (operands[4]) == GET_MODE_BITSIZE (<MODE>mode))\"\n   \"extr\\\\t%<w>0, %<w>1, %<w>2, %4\"\n-  [(set_attr \"type\" \"shift_imm\")]\n+  [(set_attr \"type\" \"rotate_imm\")]\n )\n \n ;; There are no canonicalisation rules for ashift and lshiftrt inside an ior\n@@ -4153,7 +4160,7 @@\n    && (UINTVAL (operands[3]) + UINTVAL (operands[4])\n        == GET_MODE_BITSIZE (<MODE>mode))\"\n   \"extr\\\\t%<w>0, %<w>1, %<w>2, %4\"\n-  [(set_attr \"type\" \"shift_imm\")]\n+  [(set_attr \"type\" \"rotate_imm\")]\n )\n \n ;; zero_extend version of the above\n@@ -4167,7 +4174,7 @@\n   \"UINTVAL (operands[3]) < 32 &&\n    (UINTVAL (operands[3]) + UINTVAL (operands[4]) == 32)\"\n   \"extr\\\\t%w0, %w1, %w2, %4\"\n-  [(set_attr \"type\" \"shift_imm\")]\n+  [(set_attr \"type\" \"rotate_imm\")]\n )\n \n (define_insn \"*extrsi5_insn_uxtw_alt\"\n@@ -4180,7 +4187,7 @@\n   \"UINTVAL (operands[3]) < 32 &&\n    (UINTVAL (operands[3]) + UINTVAL (operands[4]) == 32)\"\n   \"extr\\\\t%w0, %w1, %w2, %4\"\n-  [(set_attr \"type\" \"shift_imm\")]\n+  [(set_attr \"type\" \"rotate_imm\")]\n )\n \n (define_insn \"*ror<mode>3_insn\""}]}