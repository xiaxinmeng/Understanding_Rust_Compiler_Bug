{"sha": "9e79a25b66cb7e0ddbd1410ecc86cec25588d172", "node_id": "C_kwDOANBUbNoAKDllNzlhMjViNjZjYjdlMGRkYmQxNDEwZWNjODZjZWMyNTU4OGQxNzI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-29T00:16:38Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-29T00:16:38Z"}, "message": "Daily bump.", "tree": {"sha": "07831ba1acc15a3ce2b600306a79416b0c969af6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07831ba1acc15a3ce2b600306a79416b0c969af6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e79a25b66cb7e0ddbd1410ecc86cec25588d172", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e79a25b66cb7e0ddbd1410ecc86cec25588d172", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e79a25b66cb7e0ddbd1410ecc86cec25588d172", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e79a25b66cb7e0ddbd1410ecc86cec25588d172/comments", "author": null, "committer": null, "parents": [{"sha": "d01f112de4a54db6d2abef836e6dff3a08167389", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d01f112de4a54db6d2abef836e6dff3a08167389", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d01f112de4a54db6d2abef836e6dff3a08167389"}], "stats": {"total": 255, "additions": 254, "deletions": 1}, "files": [{"sha": "25721e8af62be5ca080222197fd1ed96bdad4458", "filename": "gcc/ChangeLog", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e79a25b66cb7e0ddbd1410ecc86cec25588d172/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e79a25b66cb7e0ddbd1410ecc86cec25588d172/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e79a25b66cb7e0ddbd1410ecc86cec25588d172", "patch": "@@ -1,3 +1,109 @@\n+2022-09-28  Eugene Rozenfeld  <erozen@microsoft.com>\n+\n+\t* basic-block.h: Remove discriminator from basic blocks.\n+\t* cfghooks.cc (split_block_1): Remove discriminator from basic blocks.\n+\t* final.cc (final_start_function_1): Switch from per-bb to per statement\n+\tdiscriminator.\n+\t(final_scan_insn_1): Don't keep track of basic block discriminators.\n+\t(compute_discriminator): Switch from basic block discriminators to\n+\tinstruction discriminators.\n+\t(insn_discriminator): New function to return instruction discriminator.\n+\t(notice_source_line): Use insn_discriminator.\n+\t* gimple-pretty-print.cc (dump_gimple_bb_header): Remove dumping of\n+\tbasic block discriminators.\n+\t* gimple-streamer-in.cc (input_bb): Remove reading of basic block\n+\tdiscriminators.\n+\t* gimple-streamer-out.cc (output_bb): Remove writing of basic block\n+\tdiscriminators.\n+\t* input.cc (make_location): Pass 0 discriminator to COMBINE_LOCATION_DATA.\n+\t(location_with_discriminator): New function to combine locus with\n+\ta discriminator.\n+\t(has_discriminator): New function to check if a location has a discriminator.\n+\t(get_discriminator_from_loc): New function to get the discriminator\n+\tfrom a location.\n+\t* input.h: Declarations of new functions.\n+\t* lto-streamer-in.cc (cmp_loc): Use discriminators in location comparison.\n+\t(apply_location_cache): Keep track of current discriminator.\n+\t(input_location_and_block): Read discriminator from stream.\n+\t* lto-streamer-out.cc (clear_line_info): Set current discriminator to\n+\tUINT_MAX.\n+\t(lto_output_location_1): Write discriminator to stream.\n+\t* lto-streamer.h: Add discriminator to cached_location.\n+\tAdd current_discr to lto_location_cache.\n+\tAdd current_discr to output_block.\n+\t* print-rtl.cc (print_rtx_operand_code_i): Print discriminator.\n+\t* rtl.h: Add extern declaration of insn_discriminator.\n+\t* tree-cfg.cc (assign_discriminator): New function to assign a unique\n+\tdiscriminator value to all statements in a basic block that have the given\n+\tline number.\n+\t(assign_discriminators): Assign discriminators to statement locations.\n+\t* tree-pretty-print.cc (dump_location): Dump discriminators.\n+\t* tree.cc (set_block): Preserve discriminator when setting block.\n+\t(set_source_range): Preserve discriminator when setting source range.\n+\n+2022-09-28  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/107061\n+\t* config/i386/predicates.md (encodekey128_operation): Check\n+\tXMM4-XMM6 as clobbered.\n+\t(encodekey256_operation): Likewise.\n+\t* config/i386/sse.md (encodekey128u32): Clobber XMM4-XMM6.\n+\t(encodekey256u32): Likewise.\n+\n+2022-09-28  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config.gcc: Add riscv-vector-builtins.o.\n+\t* config/riscv/riscv-builtins.cc (riscv_init_builtins): Add RVV builtin function.\n+\t* config/riscv/riscv-protos.h (riscv_v_ext_enabled_vector_mode_p): New function.\n+\t* config/riscv/riscv.cc (ENTRY): New macro.\n+\t(riscv_v_ext_enabled_vector_mode_p): New function.\n+\t(riscv_mangle_type): Add RVV mangle.\n+\t(riscv_vector_mode_supported_p): Adjust RVV machine mode.\n+\t(riscv_verify_type_context): Add context check for RVV.\n+\t(riscv_vector_alignment): Add RVV alignment target hook support.\n+\t(TARGET_VECTOR_MODE_SUPPORTED_P): New target hook support.\n+\t(TARGET_VERIFY_TYPE_CONTEXT): Ditto.\n+\t(TARGET_VECTOR_ALIGNMENT): Ditto.\n+\t* config/riscv/t-riscv: Add riscv-vector-builtins.o\n+\t* config/riscv/riscv-vector-builtins.cc: New file.\n+\t* config/riscv/riscv-vector-builtins.def: New file.\n+\t* config/riscv/riscv-vector-builtins.h: New file.\n+\t* config/riscv/riscv-vector-switch.def: New file.\n+\n+2022-09-28  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* var-tracking.cc (vt_add_function_parameter): Add entry values\n+\tup to maximal register mode.\n+\n+2022-09-28  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* cselib.cc (new_cselib_val): Keep track of further subvalue\n+\trelations.\n+\n+2022-09-28  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config/arm/arm-c.cc (arm_cpu_builtins): Define\n+\t__ARM_FEATURE_AES and __ARM_FEATURE_SHA2.\n+\n+2022-09-28  Xi Ruoyao  <xry111@xry111.site>\n+\n+\tPR tree-optimization/105414\n+\t* config/loongarch/loongarch.md (UNSPEC_FMAX): New unspec.\n+\t(UNSPEC_FMIN): Likewise.\n+\t(fmax<mode>3): Use UNSPEC_FMAX instead of smax.\n+\t(fmin<mode>3): Use UNSPEC_FMIN instead of smin.\n+\n+2022-09-28  Lulu Cheng  <chenglulu@loongson.cn>\n+\n+\t* config/loongarch/loongarch.cc (loongarch_asan_shadow_offset):\n+\tFixed typo in \"asan_mapping.h\".\n+\n+2022-09-28  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR middle-end/58245\n+\t* calls.cc: Include \"tree-eh.h\".\n+\t(expand_call): Check stack canary before throwing exception.\n+\n 2022-09-27  Eugene Rozenfeld  <erozen@microsoft.com>\n \n \t* ipa-cp.cc (good_cloning_opportunity_p): Fix profile count comparison."}, {"sha": "ea4b4d1bd3bde79acf7b65e3feef5cb82f0a2f7d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e79a25b66cb7e0ddbd1410ecc86cec25588d172/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e79a25b66cb7e0ddbd1410ecc86cec25588d172/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=9e79a25b66cb7e0ddbd1410ecc86cec25588d172", "patch": "@@ -1 +1 @@\n-20220928\n+20220929"}, {"sha": "3f512c6ccde266b82b53bf6f6465ab20ac2afc51", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e79a25b66cb7e0ddbd1410ecc86cec25588d172/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e79a25b66cb7e0ddbd1410ecc86cec25588d172/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9e79a25b66cb7e0ddbd1410ecc86cec25588d172", "patch": "@@ -1,3 +1,20 @@\n+2022-09-28  Eugene Rozenfeld  <erozen@microsoft.com>\n+\n+\t* module.cc (write_location): Write discriminator.\n+\t(read_location): Read discriminator.\n+\n+2022-09-28  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (DECL_NTTP_OBJECT_P): New.\n+\t(template_parm_object_p): Delete.\n+\t(build_template_parm_object): Declare.\n+\t* cxx-pretty-print.cc (pp_cx_template_argument_list): Use DECL_NTTP_OBJECT_P.\n+\t* error.cc (dump_simple_decl): Likewise.\n+\t* mangle.cc (write_template_arg): Likewise.\n+\t* pt.cc (template_parm_object_p): Delete.\n+\t(create_template_parm_object): Separated out checking from ...\n+\t(get_template_parm_object): ... this, new external entry point.\n+\n 2022-09-27  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/101165"}, {"sha": "9007c43f4386ba810f2338231a9bea017ffdf64f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e79a25b66cb7e0ddbd1410ecc86cec25588d172/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e79a25b66cb7e0ddbd1410ecc86cec25588d172/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9e79a25b66cb7e0ddbd1410ecc86cec25588d172", "patch": "@@ -1,3 +1,54 @@\n+2022-09-28  Eugene Rozenfeld  <erozen@microsoft.com>\n+\n+\t* c-c++-common/ubsan/pr85213.c: Pass -gno-statement-frontiers.\n+\n+2022-09-28  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/107061\n+\t* gcc.target/i386/keylocker-encodekey128.c: Don't check\n+\tXMM4-XMM6.\n+\t* gcc.target/i386/keylocker-encodekey256.c: Likewise.\n+\n+2022-09-28  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/abi-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/abi-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/abi-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/abi-4.c: New test.\n+\t* gcc.target/riscv/rvv/base/abi-5.c: New test.\n+\t* gcc.target/riscv/rvv/base/abi-6.c: New test.\n+\t* gcc.target/riscv/rvv/base/abi-7.c: New test.\n+\t* gcc.target/riscv/rvv/rvv.exp: New test.\n+\n+2022-09-28  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/attr-crypto.c: Update test.\n+\n+2022-09-28  Torbj\u00f6rn SVENSSON  <torbjorn.svensson@foss.st.com>\n+\t    Yvan ROUX   <yvan.roux@foss.st.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld1x2.c: Rephrase\n+\tto unimplemented.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld1x3.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld1x4.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vst1x2.c: Replace\n+\tdg-xfail-if with dg-skip-if.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vst1x3.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vst1x4.c: Likewise.\n+\n+2022-09-28  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR middle-end/58245\n+\t* g++.dg/fstack-protector-strong.C: Adjusted.\n+\t* g++.dg/pr58245-1.C: New test.\n+\n+2022-09-28  Eugene Rozenfeld  <erozen@microsoft.com>\n+\n+\t* gcc.dg/tree-prof/cold_partition_label.c: Don't check for hot/cold splitting with AutoFDO.\n+\t* gcc.dg/tree-prof/section-attr-1.c: Don't check for hot/cold splitting with AutoFDO.\n+\t* gcc.dg/tree-prof/section-attr-2.c: Don't check for hot/cold splitting with AutoFDO.\n+\t* gcc.dg/tree-prof/section-attr-3.c: Don't check for hot/cold splitting with AutoFDO.\n+\n 2022-09-27  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/101165"}, {"sha": "3b41845eee7accbd6d45f6c651a2d87945ea126b", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e79a25b66cb7e0ddbd1410ecc86cec25588d172/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e79a25b66cb7e0ddbd1410ecc86cec25588d172/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=9e79a25b66cb7e0ddbd1410ecc86cec25588d172", "patch": "@@ -1,3 +1,28 @@\n+2022-09-28  Eugene Rozenfeld  <erozen@microsoft.com>\n+\n+\t* include/line-map.h: Add discriminator to location_adhoc_data.\n+\t(get_combined_adhoc_loc): Add discriminator parameter.\n+\t(get_discriminator_from_adhoc_loc): Add external declaration.\n+\t(get_discriminator_from_loc): Add external declaration.\n+\t(COMBINE_LOCATION_DATA): Add discriminator parameter.\n+\t* lex.cc (get_location_for_byte_range_in_cur_line) Pass 0 discriminator\n+\tin a call to COMBINE_LOCATION_DATA.\n+\t(warn_about_normalization): Pass 0 discriminator in a call to\n+\tCOMBINE_LOCATION_DATA.\n+\t(_cpp_lex_direct): Pass 0 discriminator in a call to\n+\tCOMBINE_LOCATION_DATA.\n+\t* line-map.cc (location_adhoc_data_hash): Use discriminator compute\n+\tlocation_adhoc_data hash.\n+\t(location_adhoc_data_eq): Use discriminator when comparing\n+\tlocation_adhoc_data.\n+\t(can_be_stored_compactly_p): Check discriminator to determine\n+\tcompact storage.\n+\t(get_combined_adhoc_loc): Add discriminator parameter.\n+\t(get_discriminator_from_adhoc_loc): New function to get the discriminator\n+\tfrom an ad-hoc location.\n+\t(get_discriminator_from_loc): New function to get the discriminator\n+\tfrom a location.\n+\n 2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/106652"}, {"sha": "97ae4b290543153370b6fd4cabbe6d27be6da18c", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e79a25b66cb7e0ddbd1410ecc86cec25588d172/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e79a25b66cb7e0ddbd1410ecc86cec25588d172/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=9e79a25b66cb7e0ddbd1410ecc86cec25588d172", "patch": "@@ -1,3 +1,8 @@\n+2022-09-28  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* libgomp.texi (OpenMP 5.1): Mark 'assume' as implemented\n+\tfor C/C++. Remove duplicated 'begin declare target' entry.\n+\n 2022-09-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/106981"}, {"sha": "9796ef159cef926edc947097d34f67b09a9eae03", "filename": "libitm/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e79a25b66cb7e0ddbd1410ecc86cec25588d172/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e79a25b66cb7e0ddbd1410ecc86cec25588d172/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=9e79a25b66cb7e0ddbd1410ecc86cec25588d172", "patch": "@@ -1,3 +1,11 @@\n+2022-09-28  Lulu Cheng  <chenglulu@loongson.cn>\n+\t    Yang Yujie  <yangyujie@loongson.cn>\n+\n+\t* configure.tgt: Add loongarch support.\n+\t* config/loongarch/asm.h: New file.\n+\t* config/loongarch/sjlj.S: New file.\n+\t* config/loongarch/target.h: New file.\n+\n 2022-08-31  Martin Liska  <mliska@suse.cz>\n \n \t* configure: Regenerate."}, {"sha": "a1585d80dfa76bbb798502794672005da4185ce6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e79a25b66cb7e0ddbd1410ecc86cec25588d172/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e79a25b66cb7e0ddbd1410ecc86cec25588d172/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9e79a25b66cb7e0ddbd1410ecc86cec25588d172", "patch": "@@ -1,3 +1,44 @@\n+2022-09-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/evolution.xml: Document std::bind API\n+\tchanges.\n+\t* doc/xml/manual/intro.xml: Document LWG 2487 status.\n+\t* doc/xml/manual/using.xml: Clarify default value of\n+\t_GLIBCXX_USE_DEPRECATED.\n+\t* doc/html/*: Regenerate.\n+\t* include/std/functional (_Bind::operator()(Args&&...) volatile)\n+\t(_Bind::operator()(Args&&...) const volatile)\n+\t(_Bind_result::operator()(Args&&...) volatile)\n+\t(_Bind_result::operator()(Args&&...) const volatile): Replace\n+\twith deleted overload for C++20 and later.\n+\t* testsuite/20_util/bind/cv_quals.cc: Check for deprecated\n+\twarnings in C++17.\n+\t* testsuite/20_util/bind/cv_quals_2.cc: Likewise, and check for\n+\till-formed in C++20.\n+\n+2022-09-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/70692\n+\t* include/bits/invoke.h [__cplusplus < 201703] (__invoke_r):\n+\tRemove is_invocable and is_convertible constraints.\n+\t* include/std/type_traits (__is_invocable_impl::_S_conv): Use\n+\tnon-deduced context for parameter.\n+\t(__is_invocable_impl::_S_test): Remove _Check_noex template\n+\tparameter and use deduced noexcept value in its place. Add bool\n+\tparameter to detect dangling references.\n+\t(__is_invocable_impl::type): Adjust call to _S_test to avoid\n+\tdeducing unnecessary noexcept property..\n+\t(__is_invocable_impl::__nothrow_type): Rename to ...\n+\t(__is_invocable_impl::__nothrow_conv): ... this. Adjust call\n+\tto _S_test to deduce noexcept property.\n+\t* testsuite/20_util/bind/dangling_ref.cc: New test.\n+\t* testsuite/20_util/function/cons/70692.cc: New test.\n+\t* testsuite/20_util/function_objects/invoke/dangling_ref.cc:\n+\tNew test.\n+\t* testsuite/20_util/is_invocable/dangling_ref.cc: New test.\n+\t* testsuite/30_threads/packaged_task/cons/dangling_ref.cc:\n+\tNew test.\n+\n 2022-09-27  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c++/107049"}]}