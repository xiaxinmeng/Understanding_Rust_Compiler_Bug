{"sha": "963024335a5ad4d219d0feedc4e08149822438ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYzMDI0MzM1YTVhZDRkMjE5ZDBmZWVkYzRlMDgxNDk4MjI0MzhiYQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-01-07T15:17:07Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-01-07T15:17:07Z"}, "message": "c-lang.c (c_post_options): Call cpp_post_options.\n\n        * c-lang.c (c_post_options): Call cpp_post_options.\n        * cppmain.c (main): Similarly.\n        * fix-header.c (read_scan_file): Similarly.\n        * cp/decl2.c (cxx_post_options): Similarly.\n        * objc/objc-act.c (objc_post_options): Similarly.\n        * cppinit.c (cpp_start_read): Move option consistency checks\n        to cpp_post_options.  Don't call init_dependency_output.\n        If needed, add default target and main file dependency.\n        (OPT_MD, OPT_MMD): Remove.\n        (OPT_MF): New.\n        (cpp_handle_option): Update for OPT_* changes.\n        (cpp_post_options): New.\n        (init_dependency_output): Command line -MF overrides environment\n        variables.  Don't set default target etc.  Suppress output\n        if dependencies are going to stdout.\n        (print_help): Update.\n        * cpplib.h (cpp_post_options): New.\n        * gcc.c (cpp_options): Update for -MD, -MMD, -MF.\n\nFrom-SVN: r38777", "tree": {"sha": "c1c9be83692efba34fd6a681a9cf6a699a78a8c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1c9be83692efba34fd6a681a9cf6a699a78a8c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/963024335a5ad4d219d0feedc4e08149822438ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/963024335a5ad4d219d0feedc4e08149822438ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/963024335a5ad4d219d0feedc4e08149822438ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/963024335a5ad4d219d0feedc4e08149822438ba/comments", "author": null, "committer": null, "parents": [{"sha": "b34878a37be4bd942b0460be0e5f9b3c8cbe0b17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b34878a37be4bd942b0460be0e5f9b3c8cbe0b17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b34878a37be4bd942b0460be0e5f9b3c8cbe0b17"}], "stats": {"total": 170, "additions": 105, "deletions": 65}, "files": [{"sha": "589a2b7719e47cbfc760fec296f85a8af40b409b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/963024335a5ad4d219d0feedc4e08149822438ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/963024335a5ad4d219d0feedc4e08149822438ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=963024335a5ad4d219d0feedc4e08149822438ba", "patch": "@@ -1,3 +1,23 @@\n+2001-01-07  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * c-lang.c (c_post_options): Call cpp_post_options.\n+\t* objc/objc-act.c (objc_post_options): Similarly.\n+\t* cppmain.c (main): Similarly.\n+        * fix-header.c (read_scan_file): Similarly.\n+        * cppinit.c (cpp_start_read): Move option consistency checks\n+        to cpp_post_options.  Don't call init_dependency_output.\n+        If needed, add default target and main file dependency.\n+        (OPT_MD, OPT_MMD): Remove.\n+        (OPT_MF): New.\n+        (cpp_handle_option): Update for OPT_* changes.\n+        (cpp_post_options): New.\n+        (init_dependency_output): Command line -MF overrides environment\n+        variables.  Don't set default target etc.  Suppress output\n+        if dependencies are going to stdout.\n+        (print_help): Update.\n+        * cpplib.h (cpp_post_options): New.\n+        * gcc.c (cpp_options): Update for -MD, -MMD, -MF.\n+\t\n Sun Jan  7 14:44:19 MET 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* jump.c (comparison_dominates_p): Support unordered compares."}, {"sha": "5b08679c5e1087380f036db1bfea440cb3398b61", "filename": "gcc/c-lang.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/963024335a5ad4d219d0feedc4e08149822438ba/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/963024335a5ad4d219d0feedc4e08149822438ba/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=963024335a5ad4d219d0feedc4e08149822438ba", "patch": "@@ -47,6 +47,7 @@ struct lang_hooks lang_hooks = {c_post_options};\n static void\n c_post_options ()\n {\n+  cpp_post_options (parse_in);\n }\n \n /* Each of the functions defined here"}, {"sha": "c0ca59daf3ae64d2140c0274fe5fe85688589cf3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/963024335a5ad4d219d0feedc4e08149822438ba/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/963024335a5ad4d219d0feedc4e08149822438ba/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=963024335a5ad4d219d0feedc4e08149822438ba", "patch": "@@ -1,3 +1,7 @@\n+2001-01-07  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * cp/decl2.c (cxx_post_options): Call cpp_post_options.\n+\n 2001-01-05  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* parse.y (template_datadef): Check for error_mark_node."}, {"sha": "bac8a6d4f241e86c9025b1dbc1149fb9613e0088", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/963024335a5ad4d219d0feedc4e08149822438ba/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/963024335a5ad4d219d0feedc4e08149822438ba/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=963024335a5ad4d219d0feedc4e08149822438ba", "patch": "@@ -551,6 +551,7 @@ struct lang_hooks lang_hooks = {cxx_post_options};\n static void\n cxx_post_options ()\n {\n+  cpp_post_options (parse_in);\n }\n \n /* Compare two option strings, pointed two by P1 and P2, for use with"}, {"sha": "85a351ca3e47a6307c5589ae5080b8d056b5b58c", "filename": "gcc/cppinit.c", "status": "modified", "additions": 62, "deletions": 62, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/963024335a5ad4d219d0feedc4e08149822438ba/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/963024335a5ad4d219d0feedc4e08149822438ba/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=963024335a5ad4d219d0feedc4e08149822438ba", "patch": "@@ -867,25 +867,6 @@ cpp_start_read (pfile, fname)\n {\n   struct pending_option *p, *q;\n \n-  /* -MG doesn't select the form of output and must be specified with one of\n-     -M or -MM.  -MG doesn't make sense with -MD or -MMD since they don't\n-     inhibit compilation.  */\n-  if (CPP_OPTION (pfile, print_deps_missing_files)\n-      && (CPP_OPTION (pfile, print_deps) == 0\n-\t  || !CPP_OPTION (pfile, no_output)))\n-    {\n-      cpp_fatal (pfile, \"-MG must be specified with one of -M or -MM\");\n-      return 0;\n-    }\n-\n-  /* -Wtraditional is not useful in C++ mode.  */\n-  if (CPP_OPTION (pfile, cplusplus))\n-    CPP_OPTION (pfile, warn_traditional) = 0;\n-\n-  /* Set this if it hasn't been set already. */\n-  if (CPP_OPTION (pfile, user_label_prefix) == NULL)\n-    CPP_OPTION (pfile, user_label_prefix) = USER_LABEL_PREFIX;\n-\n   /* Set up the include search path now.  */\n   if (! CPP_OPTION (pfile, no_standard_includes))\n     init_standard_includes (pfile);\n@@ -906,8 +887,6 @@ cpp_start_read (pfile, fname)\n       fprintf (stderr, _(\"End of search list.\\n\"));\n     }\n \n-  /* Open the main input file.  This must be done early, so we have a\n-     buffer to stand on.  */\n   if (CPP_OPTION (pfile, in_fname) == NULL\n       || *CPP_OPTION (pfile, in_fname) == 0)\n     {\n@@ -918,11 +897,20 @@ cpp_start_read (pfile, fname)\n   if (CPP_OPTION (pfile, out_fname) == NULL)\n     CPP_OPTION (pfile, out_fname) = \"\";\n \n+  if (CPP_OPTION (pfile, print_deps))\n+    {\n+      /* Set the default target (if there is none already).  */\n+      deps_add_default_target (pfile->deps, CPP_OPTION (pfile, in_fname));\n+\n+      if (CPP_OPTION (pfile, in_fname))\n+\tdeps_add_dep (pfile->deps, CPP_OPTION (pfile, in_fname));\n+    }\n+\n+  /* Open the main input file.  This must be done early, so we have a\n+     buffer to stand on.  */\n   if (!_cpp_read_file (pfile, fname))\n     return 0;\n \n-  init_dependency_output (pfile);\n-\n   /* Install __LINE__, etc.  */\n   init_builtins (pfile);\n \n@@ -1050,10 +1038,9 @@ new_pending_directive (pend, text, handler)\n   DEF_OPT(\"H\",                        0,      OPT_H)                          \\\n   DEF_OPT(\"I\",                        no_dir, OPT_I)                          \\\n   DEF_OPT(\"M\",                        0,      OPT_M)                          \\\n-  DEF_OPT(\"MD\",                       no_fil, OPT_MD)                         \\\n+  DEF_OPT(\"MF\",                       no_fil, OPT_MF)                         \\\n   DEF_OPT(\"MG\",                       0,      OPT_MG)                         \\\n   DEF_OPT(\"MM\",                       0,      OPT_MM)                         \\\n-  DEF_OPT(\"MMD\",                      no_fil, OPT_MMD)                        \\\n   DEF_OPT(\"MP\",                       0,      OPT_MP)                         \\\n   DEF_OPT(\"MQ\",                       no_tgt, OPT_MQ)                         \\\n   DEF_OPT(\"MT\",                       no_tgt, OPT_MT)                         \\\n@@ -1448,43 +1435,22 @@ cpp_handle_option (pfile, argc, argv)\n \t\t}\n \t  }\n \t  break;\n-\t  /* The style of the choices here is a bit mixed.\n-\t     The chosen scheme is a hybrid of keeping all options in one string\n-\t     and specifying each option in a separate argument:\n-\t     -M|-MM|-MD file|-MMD file [-MG].  An alternative is:\n-\t     -M|-MM|-MD file|-MMD file|-MG|-MMG; or more concisely:\n-\t     -M[M][G][D file].  This is awkward to handle in specs, and is not\n-\t     as extensible.  */\n-\t  /* ??? -MG must be specified in addition to one of -M or -MM.\n-\t     This can be relaxed in the future without breaking anything.\n-\t     The converse isn't true.  */\n-\n-\t  /* -MG isn't valid with -MD or -MMD.  This is checked for later.  */\n+\n \tcase OPT_MG:\n \t  CPP_OPTION (pfile, print_deps_missing_files) = 1;\n \t  break;\n \tcase OPT_M:\n-\tcase OPT_MD:\n+\t  CPP_OPTION (pfile, print_deps) = 2;\n+\t  break;\n \tcase OPT_MM:\n-\tcase OPT_MMD:\n-\t  if (opt_code == OPT_M || opt_code == OPT_MD)\n-\t    CPP_OPTION (pfile, print_deps) = 2;\n- \t  else\n-\t    CPP_OPTION (pfile, print_deps) = 1;\n-\n-\t  /* For -MD and -MMD, write deps on file named by next arg.  */\n-\t  /* For -M and -MM, write deps on standard output and\n-\t     suppress the usual output.  */\n-\t  if (opt_code == OPT_MD || opt_code == OPT_MMD)\n-\t      CPP_OPTION (pfile, deps_file) = arg;\n- \t  else\n-\t      CPP_OPTION (pfile, no_output) = 1;\n+\t  CPP_OPTION (pfile, print_deps) = 1;\n \t  break;\n-\n-\tcase OPT_MP:\n+\tcase OPT_MF:\n+\t  CPP_OPTION (pfile, deps_file) = arg;\n+\t  break;\n+ \tcase OPT_MP:\n \t  CPP_OPTION (pfile, deps_phony_targets) = 1;\n \t  break;\n-\n \tcase OPT_MQ:\n \tcase OPT_MT:\n \t  /* Add a target.  -MQ quotes for Make.  */\n@@ -1680,9 +1646,37 @@ cpp_handle_options (pfile, argc, argv)\n       if (strings_processed == 0)\n \tbreak;\n     }\n+\n   return i;\n }\n \n+/* Extra processing when all options are parsed, after all calls to\n+   cpp_handle_option[s].  Consistency checks etc.  */\n+void\n+cpp_post_options (pfile)\n+     cpp_reader *pfile;\n+{\n+  /* -Wtraditional is not useful in C++ mode.  */\n+  if (CPP_OPTION (pfile, cplusplus))\n+    CPP_OPTION (pfile, warn_traditional) = 0;\n+\n+  /* Set this if it hasn't been set already. */\n+  if (CPP_OPTION (pfile, user_label_prefix) == NULL)\n+    CPP_OPTION (pfile, user_label_prefix) = USER_LABEL_PREFIX;\n+\n+  /* We need to do this after option processing and before\n+     cpp_start_read, as cppmain.c relies on the options->no_output to\n+     set its callbacks correctly before calling cpp_start_read.  */\n+  init_dependency_output (pfile);\n+\n+  /* -MG doesn't select the form of output and must be specified with\n+     one of -M or -MM.  -MG doesn't make sense unless preprocessed\n+     output (and compilation) is inhibited.  */\n+  if (CPP_OPTION (pfile, print_deps_missing_files)\n+      && CPP_OPTION (pfile, print_deps) == 0)\n+    cpp_fatal (pfile, \"-MG must be specified with one of -M or -MM\");\n+}\n+\n /* Set up dependency-file output.  */\n static void\n init_dependency_output (pfile)\n@@ -1722,15 +1716,17 @@ init_dependency_output (pfile)\n       else\n \toutput_file = spec;\n \n-      CPP_OPTION (pfile, deps_file) = output_file;\n+      /* Command line overrides environment variables.  */\n+      if (CPP_OPTION (pfile, deps_file) == 0)\n+\tCPP_OPTION (pfile, deps_file) = output_file;\n       CPP_OPTION (pfile, print_deps_append) = 1;\n     }\n \n-  /* Set the default target (if there is none already).  */\n-  deps_add_default_target (pfile->deps, CPP_OPTION (pfile, in_fname));\n-\n-  if (CPP_OPTION (pfile, in_fname))\n-    deps_add_dep (pfile->deps, CPP_OPTION (pfile, in_fname));\n+  /* If dependencies go to standard output, we need to suppress\n+     output.  The user may be requesting other stuff to stdout, with\n+     -dM, -v etc.  We let them shoot themselves in the foot.  */\n+  if (CPP_OPTION (pfile, deps_file) == 0)\n+    CPP_OPTION (pfile, no_output) = 1;\n }\n \n static void\n@@ -1799,9 +1795,13 @@ Switches:\\n\\\n   fputs (_(\"\\\n   -M                        Generate make dependencies\\n\\\n   -MM                       As -M, but ignore system header files\\n\\\n-  -MD                       As -M, but put output in a .d file\\n\\\n-  -MMD                      As -MD, but ignore system header files\\n\\\n+  -MF <file>                Write dependency output to the given file\\n\\\n   -MG                       Treat missing header file as generated files\\n\\\n+\"), stdout);\n+  fputs (_(\"\\\n+  -MP\t\t\t    Generate phony targets for all headers\\n\\\n+  -MQ <target>              Add a MAKE-quoted target\\n\\\n+  -MT <target>              Add an unquoted target\\n\\\n   -g3                       Include #define and #undef directives in the output\\n\\\n \"), stdout);\n   fputs (_(\"\\"}, {"sha": "d5063b96c26122985a13dc7e69a2241f12e95427", "filename": "gcc/cpplib.h", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/963024335a5ad4d219d0feedc4e08149822438ba/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/963024335a5ad4d219d0feedc4e08149822438ba/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=963024335a5ad4d219d0feedc4e08149822438ba", "patch": "@@ -704,14 +704,25 @@ struct cpp_hashnode\n   union tree_node *fe_value;\t\t/* Front end value.  */\n };\n \n+/* Call this first to get a handle to pass to other functions.  */\n extern cpp_reader *cpp_create_reader PARAMS ((enum c_lang));\n+\n+/* Now call cpp_handle_option[s] to handle 1[or more] switches.  The\n+   return value is the number of arguments used.  If\n+   cpp_handle_options returns without using all arguments, it couldn't\n+   understand the next switch.  When there are no switches left, you\n+   must call cpp_post_options before calling cpp_start_read.  Only\n+   after cpp_post_options are the contents of the cpp_options\n+   structure reliable.  */\n+extern int cpp_handle_options PARAMS ((cpp_reader *, int, char **));\n+extern int cpp_handle_option PARAMS ((cpp_reader *, int, char **));\n+extern void cpp_post_options PARAMS ((cpp_reader *));\n+\n extern unsigned int cpp_token_len PARAMS ((const cpp_token *));\n extern unsigned char *cpp_token_as_text PARAMS ((cpp_reader *,\n \t\t\t\t\t\t const cpp_token *));\n extern unsigned char *cpp_spell_token PARAMS ((cpp_reader *, const cpp_token *,\n \t\t\t\t\t       unsigned char *));\n-extern int cpp_handle_options PARAMS ((cpp_reader *, int, char **));\n-extern int cpp_handle_option PARAMS ((cpp_reader *, int, char **));\n extern void cpp_register_pragma PARAMS ((cpp_reader *,\n \t\t\t\t\t const char *, const char *,\n \t\t\t\t\t void (*) PARAMS ((cpp_reader *))));"}, {"sha": "81fdac9ada3373a4f0bd8233206250e361eb7b05", "filename": "gcc/cppmain.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/963024335a5ad4d219d0feedc4e08149822438ba/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/963024335a5ad4d219d0feedc4e08149822438ba/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=963024335a5ad4d219d0feedc4e08149822438ba", "patch": "@@ -79,6 +79,7 @@ main (argc, argv)\n   argi += cpp_handle_options (pfile, argc - argi , argv + argi);\n   if (argi < argc && ! CPP_FATAL_ERRORS (pfile))\n     cpp_fatal (pfile, \"Invalid option %s\", argv[argi]);\n+  cpp_post_options (pfile);\n   if (CPP_FATAL_ERRORS (pfile))\n     return (FATAL_EXIT_CODE);\n "}, {"sha": "05485592d5f404c53c033207531d87b19ffc144b", "filename": "gcc/fix-header.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/963024335a5ad4d219d0feedc4e08149822438ba/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/963024335a5ad4d219d0feedc4e08149822438ba/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=963024335a5ad4d219d0feedc4e08149822438ba", "patch": "@@ -629,6 +629,7 @@ read_scan_file (in_fname, argc, argv)\n   i = cpp_handle_options (scan_in, argc, argv);\n   if (i < argc && ! CPP_FATAL_ERRORS (scan_in))\n     cpp_fatal (scan_in, \"Invalid option `%s'\", argv[i]);\n+  cpp_post_options (pfile);\n   if (CPP_FATAL_ERRORS (scan_in))\n     exit (FATAL_EXIT_CODE);\n "}, {"sha": "7a3c3640a467e976fa4c6f2416a3bd34998131de", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/963024335a5ad4d219d0feedc4e08149822438ba/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/963024335a5ad4d219d0feedc4e08149822438ba/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=963024335a5ad4d219d0feedc4e08149822438ba", "patch": "@@ -586,7 +586,7 @@ static const char *cpp_options =\n \"%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n  %{std*} %{nostdinc*}\\\n  %{C} %{v} %{I*} %{P} %{$} %I\\\n- %{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG} %{MP} %{MQ} %{MT}\\\n+ %{M} %{MM} %{MD:-M -MF %b.d} %{MMD:-MM -MF %b.d} %{MF} %{MG} %{MP} %{MQ} %{MT}\\\n  %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2 -D__GNUC_PATCHLEVEL__=%v3}\\\n  %{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n  %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\"}, {"sha": "e2daab1651c27a74ce1ea4c0ab1ca665607f6384", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/963024335a5ad4d219d0feedc4e08149822438ba/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/963024335a5ad4d219d0feedc4e08149822438ba/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=963024335a5ad4d219d0feedc4e08149822438ba", "patch": "@@ -634,6 +634,7 @@ struct lang_hooks lang_hooks = {objc_post_options};\n static void\n objc_post_options ()\n {\n+  cpp_post_options (parse_in);\n }\n \n /* Some platforms pass small structures through registers versus through"}]}