{"sha": "22718afe53695be38b6d9b7de6edec7c8dda734e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI3MThhZmU1MzY5NWJlMzhiNmQ5YjdkZTZlZGVjN2M4ZGRhNzM0ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-04-23T11:25:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-04-23T11:25:27Z"}, "message": "re PR tree-optimization/60903 (ICE: in verify_loop_structure, at cfgloop.c:1647: : edge from 13 to 14 should be marked irreducible)\n\n2014-04-23  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/60903\n\t* tree-ssa-loop-im.c (analyze_memory_references): Remove\n\tcommented code block.\n\t(execute_sm_if_changed): Properly apply IRREDUCIBLE_LOOP\n\tloop flags to newly created BBs and edges.\n\n\t* gcc.dg/torture/pr60903.c: New testcase.\n\nFrom-SVN: r209694", "tree": {"sha": "9ae08ec445ede14894095e6d590b4253594875c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ae08ec445ede14894095e6d590b4253594875c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22718afe53695be38b6d9b7de6edec7c8dda734e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22718afe53695be38b6d9b7de6edec7c8dda734e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22718afe53695be38b6d9b7de6edec7c8dda734e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22718afe53695be38b6d9b7de6edec7c8dda734e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c07d7c02d7aeac5de56066286c54a137518a98d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c07d7c02d7aeac5de56066286c54a137518a98d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c07d7c02d7aeac5de56066286c54a137518a98d6"}], "stats": {"total": 59, "additions": 45, "deletions": 14}, "files": [{"sha": "0a6cb55e9424dcf8fddf28e8dc2f3d70eb554ff5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22718afe53695be38b6d9b7de6edec7c8dda734e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22718afe53695be38b6d9b7de6edec7c8dda734e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22718afe53695be38b6d9b7de6edec7c8dda734e", "patch": "@@ -1,3 +1,11 @@\n+2014-04-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/60903\n+\t* tree-ssa-loop-im.c (analyze_memory_references): Remove\n+\tcommented code block.\n+\t(execute_sm_if_changed): Properly apply IRREDUCIBLE_LOOP\n+\tloop flags to newly created BBs and edges.\n+\n 2014-04-23  Nick Clifton  <nickc@redhat.com>\n \n \t* config/msp430/msp430.c (msp430_handle_option): Move function"}, {"sha": "e74096c9ddc0eaf770219592137252ac6728a5b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22718afe53695be38b6d9b7de6edec7c8dda734e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22718afe53695be38b6d9b7de6edec7c8dda734e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=22718afe53695be38b6d9b7de6edec7c8dda734e", "patch": "@@ -1,3 +1,8 @@\n+2014-04-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/60903\n+\t* gcc.dg/torture/pr60903.c: New testcase.\n+\n 2014-04-23  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/60895"}, {"sha": "5d93ae3ee978c015faf51df7b9137d918779a9b7", "filename": "gcc/testsuite/gcc.dg/torture/pr60903.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22718afe53695be38b6d9b7de6edec7c8dda734e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr60903.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22718afe53695be38b6d9b7de6edec7c8dda734e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr60903.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr60903.c?ref=22718afe53695be38b6d9b7de6edec7c8dda734e", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+\n+extern int a, b, k, q;\n+\n+void\n+foo ()\n+{\n+  if (a)\n+    {\n+      while (q)\n+\t{\n+\tlbl:\n+\t  if (a)\n+\t    {\n+\t      a = 0;\n+\t      goto lbl;\n+\t    }\n+\t}\n+      b = k;\n+    }\n+  goto lbl;\n+}"}, {"sha": "54156d7118b78c6f61c18707b93380c9c58f45e9", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22718afe53695be38b6d9b7de6edec7c8dda734e/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22718afe53695be38b6d9b7de6edec7c8dda734e/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=22718afe53695be38b6d9b7de6edec7c8dda734e", "patch": "@@ -1544,15 +1544,6 @@ analyze_memory_references (void)\n   struct loop *loop, *outer;\n   unsigned i, n;\n \n-#if 0\n-  /* Initialize bb_loop_postorder with a mapping from loop->num to\n-     its postorder index.  */\n-  i = 0;\n-  bb_loop_postorder = XNEWVEC (unsigned, number_of_loops (cfun));\n-  FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n-    bb_loop_postorder[loop->num] = i++;\n-#endif\n-\n   /* Collect all basic-blocks in loops and sort them after their\n      loops postorder.  */\n   i = 0;\n@@ -1807,6 +1798,7 @@ execute_sm_if_changed (edge ex, tree mem, tree tmp_var, tree flag)\n   gimple_stmt_iterator gsi;\n   gimple stmt;\n   struct prev_flag_edges *prev_edges = (struct prev_flag_edges *) ex->aux;\n+  bool irr = ex->flags & EDGE_IRREDUCIBLE_LOOP;\n \n   /* ?? Insert store after previous store if applicable.  See note\n      below.  */\n@@ -1821,8 +1813,9 @@ execute_sm_if_changed (edge ex, tree mem, tree tmp_var, tree flag)\n   old_dest = ex->dest;\n   new_bb = split_edge (ex);\n   then_bb = create_empty_bb (new_bb);\n-  if (current_loops && new_bb->loop_father)\n-    add_bb_to_loop (then_bb, new_bb->loop_father);\n+  if (irr)\n+    then_bb->flags = BB_IRREDUCIBLE_LOOP;\n+  add_bb_to_loop (then_bb, new_bb->loop_father);\n \n   gsi = gsi_start_bb (new_bb);\n   stmt = gimple_build_cond (NE_EXPR, flag, boolean_false_node,\n@@ -1834,9 +1827,12 @@ execute_sm_if_changed (edge ex, tree mem, tree tmp_var, tree flag)\n   stmt = gimple_build_assign (unshare_expr (mem), tmp_var);\n   gsi_insert_after (&gsi, stmt, GSI_CONTINUE_LINKING);\n \n-  make_edge (new_bb, then_bb, EDGE_TRUE_VALUE);\n-  make_edge (new_bb, old_dest, EDGE_FALSE_VALUE);\n-  then_old_edge = make_edge (then_bb, old_dest, EDGE_FALLTHRU);\n+  make_edge (new_bb, then_bb,\n+\t     EDGE_TRUE_VALUE | (irr ? EDGE_IRREDUCIBLE_LOOP : 0));\n+  make_edge (new_bb, old_dest,\n+\t     EDGE_FALSE_VALUE | (irr ? EDGE_IRREDUCIBLE_LOOP : 0));\n+  then_old_edge = make_edge (then_bb, old_dest,\n+\t\t\t     EDGE_FALLTHRU | (irr ? EDGE_IRREDUCIBLE_LOOP : 0));\n \n   set_immediate_dominator (CDI_DOMINATORS, then_bb, new_bb);\n "}]}