{"sha": "f92f17e6e943377eb2e7b43f5de31ceda409c6cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkyZjE3ZTZlOTQzMzc3ZWIyZTdiNDNmNWRlMzFjZWRhNDA5YzZjYw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2007-06-06T10:40:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:40:12Z"}, "message": "par-ch12.adb (P_Generic_Associations): The source position of an Others association is that of the others keyword...\n\n2007-04-20  Ed Schonberg  <schonberg@adacore.com>\n\t    Robert Dewar  <dewar@adacore.com>\n\n\t* par-ch12.adb (P_Generic_Associations): The source position of an\n\tOthers association is that of the others keyword, not that of the token\n\tthat follows the box.\n\t(P_Formal_Type_Definition): Handle formal access types that carry a\n\tnot null indicator.\n\n\t* par-ch3.adb (P_Known_Discriminant_Part_Opt, P_Component_Items): If\n\tmultiple identifier are present, save Scan_State before scanning the\n\tcolon, to ensure that separate trees are constructed for each\n\tdeclaration.\n\t(P_Identifier_Declarations): For object declaration, set new flag\n\tHas_Init_Expression if initialization expression present.\n\t(P_Null_Exclusion): Properly diagnose NOT NULL coming before NULL\n\tImprove NOT NULL error messages\n\nFrom-SVN: r125439", "tree": {"sha": "703cfa5351f121ff7972a45622d5f73f9630e489", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/703cfa5351f121ff7972a45622d5f73f9630e489"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f92f17e6e943377eb2e7b43f5de31ceda409c6cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f92f17e6e943377eb2e7b43f5de31ceda409c6cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f92f17e6e943377eb2e7b43f5de31ceda409c6cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f92f17e6e943377eb2e7b43f5de31ceda409c6cc/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c7ce71c2263051ea52654243916c7e61640a8a03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ce71c2263051ea52654243916c7e61640a8a03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7ce71c2263051ea52654243916c7e61640a8a03"}], "stats": {"total": 56, "additions": 39, "deletions": 17}, "files": [{"sha": "d71b40d8f8e91a2711654967b755e8bd57084397", "filename": "gcc/ada/par-ch12.adb", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92f17e6e943377eb2e7b43f5de31ceda409c6cc/gcc%2Fada%2Fpar-ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92f17e6e943377eb2e7b43f5de31ceda409c6cc/gcc%2Fada%2Fpar-ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch12.adb?ref=f92f17e6e943377eb2e7b43f5de31ceda409c6cc", "patch": "@@ -338,7 +338,7 @@ package body Ch12 is\n          if Ada_Version < Ada_05 then\n             Error_Msg_SP\n               (\"partial parametrization of formal packages\" &\n-                \"  is an Ada 2005 extension\");\n+                \" is an Ada 2005 extension\");\n             Error_Msg_SP\n               (\"\\unit must be compiled with -gnat05 switch\");\n          end if;\n@@ -357,7 +357,9 @@ package body Ch12 is\n             Scan;  --  past box\n          end if;\n \n-         return New_Node (N_Others_Choice, Token_Ptr);\n+         --  Source position of the others choice is beginning of construct\n+\n+         return New_Node (N_Others_Choice, Sloc (Generic_Assoc_Node));\n       end if;\n \n       if Token in Token_Class_Desig then\n@@ -679,6 +681,18 @@ package body Ch12 is\n          when Tok_New =>\n             return P_Formal_Derived_Type_Definition;\n \n+         when Tok_Not =>\n+            if P_Null_Exclusion then\n+               Typedef_Node :=  P_Access_Type_Definition;\n+               Set_Null_Exclusion_Present (Typedef_Node);\n+               return Typedef_Node;\n+\n+            else\n+               Error_Msg_SC (\"expect valid formal access definition!\");\n+               Resync_Past_Semicolon;\n+               return Error;\n+            end if;\n+\n          when Tok_Private |\n               Tok_Tagged  =>\n             return P_Formal_Private_Type_Definition;"}, {"sha": "54c514911f655ff789cfd5b9fd018f69e9871936", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92f17e6e943377eb2e7b43f5de31ceda409c6cc/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92f17e6e943377eb2e7b43f5de31ceda409c6cc/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=f92f17e6e943377eb2e7b43f5de31ceda409c6cc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -941,11 +941,12 @@ package body Ch3 is\n \n             --  Ada 2005 (AI-441, AI-447): null_exclusion is illegal in Ada 95,\n             --  except in the case of anonymous access types.\n-            --  Allow_Anonymous_In_95 will be True if we're parsing a\n-            --  formal parameter or discriminant, which are the only places\n-            --  where anonymous access types occur in Ada 95. \"Formal : not\n-            --  null access ...\" is legal in Ada 95, whereas \"Formal : not\n-            --  null Named_Access_Type\" is not.\n+\n+            --  Allow_Anonymous_In_95 will be True if we're parsing a formal\n+            --  parameter or discriminant, which are the only places where\n+            --  anonymous access types occur in Ada 95. \"Formal : not null\n+            --  access ...\" is legal in Ada 95, whereas \"Formal : not null\n+            --  Named_Access_Type\" is not.\n \n             if Ada_Version >= Ada_05\n               or else (Ada_Version >= Ada_95\n@@ -956,7 +957,7 @@ package body Ch3 is\n \n             else\n                Error_Msg\n-                 (\"null-excluding access is an Ada 2005 extension\", Not_Loc);\n+                 (\"`NOT NULL` access type is an Ada 2005 extension\", Not_Loc);\n                Error_Msg\n                  (\"\\unit should be compiled with -gnat05 switch\", Not_Loc);\n             end if;\n@@ -965,6 +966,10 @@ package body Ch3 is\n             Error_Msg_SP (\"NULL expected\");\n          end if;\n \n+         if Token = Tok_New then\n+            Error_Msg (\"`NOT NULL` comes after NEW, not before\", Not_Loc);\n+         end if;\n+\n          return True;\n       end if;\n    end P_Null_Exclusion;\n@@ -1014,7 +1019,7 @@ package body Ch3 is\n          return Subtype_Mark;\n       else\n          if Not_Null_Present then\n-            Error_Msg_SP (\"constrained null-exclusion not allowed\");\n+            Error_Msg_SP (\"`NOT NULL` not allowed if constraint given\");\n          end if;\n \n          Indic_Node := New_Node (N_Subtype_Indication, Sloc (Subtype_Mark));\n@@ -1471,8 +1476,8 @@ package body Ch3 is\n \n             if Present (Init_Expr) then\n                if Not_Null_Present then\n-                  Error_Msg_SP (\"null-exclusion not allowed in \"\n-                                & \"numeric expression\");\n+                  Error_Msg_SP\n+                    (\"`NOT NULL` not allowed in numeric expression\");\n                end if;\n \n                Decl_Node := New_Node (N_Number_Declaration, Ident_Sloc);\n@@ -1638,7 +1643,7 @@ package body Ch3 is\n                if Token_Is_Renames then\n                   if Ada_Version < Ada_05 then\n                      Error_Msg_SP\n-                       (\"null-exclusion not allowed in object renaming\");\n+                       (\"`NOT NULL` not allowed in object renaming\");\n                      raise Error_Resync;\n \n                   --  Ada 2005 (AI-423): Object renaming declaration with\n@@ -1745,6 +1750,7 @@ package body Ch3 is\n          if Present (Init_Expr) then\n             if Nkind (Decl_Node) = N_Object_Declaration then\n                Set_Expression (Decl_Node, Init_Expr);\n+               Set_Has_Init_Expression (Decl_Node);\n             else\n                Error_Msg (\"initialization not allowed here\", Init_Loc);\n             end if;\n@@ -2782,8 +2788,6 @@ package body Ch3 is\n                Idents (Num_Idents) := P_Defining_Identifier (C_Comma_Colon);\n             end loop;\n \n-            T_Colon;\n-\n             --  If there are multiple identifiers, we repeatedly scan the\n             --  type and initialization expression information by resetting\n             --  the scan pointer (so that we get completely separate trees\n@@ -2793,6 +2797,8 @@ package body Ch3 is\n                Save_Scan_State (Scan_State);\n             end if;\n \n+            T_Colon;\n+\n             --  Loop through defining identifiers in list\n \n             Ident := 1;\n@@ -2836,6 +2842,7 @@ package body Ch3 is\n                exit Ident_Loop when Ident = Num_Idents;\n                Ident := Ident + 1;\n                Restore_Scan_State (Scan_State);\n+               T_Colon;\n             end loop Ident_Loop;\n \n             exit Specification_Loop when Token /= Tok_Semicolon;\n@@ -3261,8 +3268,6 @@ package body Ch3 is\n          Idents (Num_Idents) := P_Defining_Identifier (C_Comma_Colon);\n       end loop;\n \n-      T_Colon;\n-\n       --  If there are multiple identifiers, we repeatedly scan the\n       --  type and initialization expression information by resetting\n       --  the scan pointer (so that we get completely separate trees\n@@ -3272,6 +3277,8 @@ package body Ch3 is\n          Save_Scan_State (Scan_State);\n       end if;\n \n+      T_Colon;\n+\n       --  Loop through defining identifiers in list\n \n       Ident := 1;\n@@ -3359,6 +3366,7 @@ package body Ch3 is\n          exit Ident_Loop when Ident = Num_Idents;\n          Ident := Ident + 1;\n          Restore_Scan_State (Scan_State);\n+         T_Colon;\n \n       end loop Ident_Loop;\n "}]}