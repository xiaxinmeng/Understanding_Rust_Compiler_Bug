{"sha": "4b63ff589443463a8ad12d3ad814867dc1d51fb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI2M2ZmNTg5NDQzNDYzYThhZDEyZDNhZDgxNDg2N2RjMWQ1MWZiNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-05-24T15:42:17Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-05-24T15:42:17Z"}, "message": "i386.c (ix86_preferred_reload_class): Use IS_STACK_MODE, INTEGER_CLASS_P, FLOAT_CLASS_P and Q_CLASS_P macros.\n\n\t* config/i386/i386.c (ix86_preferred_reload_class): Use\n\tIS_STACK_MODE, INTEGER_CLASS_P, FLOAT_CLASS_P and Q_CLASS_P macros.\n\nFrom-SVN: r236645", "tree": {"sha": "e2bdbb1ca57f286d157b90c7ce41f9284e7ae8aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2bdbb1ca57f286d157b90c7ce41f9284e7ae8aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b63ff589443463a8ad12d3ad814867dc1d51fb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b63ff589443463a8ad12d3ad814867dc1d51fb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b63ff589443463a8ad12d3ad814867dc1d51fb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b63ff589443463a8ad12d3ad814867dc1d51fb7/comments", "author": null, "committer": null, "parents": [{"sha": "b556ea3b4653c99c2c8b5ecce5565f1b4963078b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b556ea3b4653c99c2c8b5ecce5565f1b4963078b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b556ea3b4653c99c2c8b5ecce5565f1b4963078b"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "0ca7e794ef78e9471d2b036f8de563775e63ad60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b63ff589443463a8ad12d3ad814867dc1d51fb7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b63ff589443463a8ad12d3ad814867dc1d51fb7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b63ff589443463a8ad12d3ad814867dc1d51fb7", "patch": "@@ -124,8 +124,8 @@\n 2016-05-24  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \tPR middle-end/71252\n-\t* tree-ssa-reassoc.c (rewrite_expr_tree_parallel): Add stmt_to_insert after\n-\tbuild_and_add_sum creates new use stmt.\n+\t* tree-ssa-reassoc.c (rewrite_expr_tree_parallel): Add stmt_to_insert\n+\tafter build_and_add_sum creates new use stmt.\n \n 2016-05-24  Richard Sandiford  <richard.sandiford@arm.com>\n \n@@ -157,7 +157,8 @@\n \t(add_to_ops_vec): Add stmt_to_insert.\n \t(add_repeat_to_ops_vec): Init stmt_to_insert.\n \t(insert_stmt_before_use): New.\n-\t(transform_add_to_multiply): Remove mult_stmt insertion and add it to ops vector.\n+\t(transform_add_to_multiply): Remove mult_stmt insertion and add it\n+\tto ops vector.\n \t(get_ops): Init stmt_to_insert.\n \t(maybe_optimize_range_tests): Likewise.\n \t(rewrite_expr_tree): Insert stmt_to_insert before use stmt.\n@@ -190,8 +191,8 @@\n \tTARGET_MIX_SSE_I387.  Rewrite using X87_FLOAT_MODE_P and\n \tSSE_FLOAT_MODE_P macros.\n \t* config/i386/i386.c (ix86_preferred_reload_class): Use\n-\tIS_STACK_MODE, INTEGER_CLASS_P and FLOAT_CLASS_P macros.  Cleanup\n-\tregclass processing for CONST_DOUBLE_P.\n+\tIS_STACK_MODE, INTEGER_CLASS_P, FLOAT_CLASS_P and Q_CLASS_P macros.\n+\tCleanup regclass processing for CONST_DOUBLE_P.\n \t(ix86_preferred_output_reload_class): Use IS_STACK_MODE macro.\n \t(ix86_rtx_costs): Remove redundant TARGET_80387 check\n \twith IS_STACK_MODE macro.\n@@ -278,9 +279,9 @@\n 2016-05-22  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \tPR middle-end/40921\n-        * tree-ssa-reassoc.c (try_special_add_to_ops): New.\n-        (linearize_expr_tree): Call try_special_add_to_ops.\n-        (reassociate_bb): Convert MULT_EXPR by (-1) to NEGATE_EXPR.\n+\t* tree-ssa-reassoc.c (try_special_add_to_ops): New.\n+\t(linearize_expr_tree): Call try_special_add_to_ops.\n+\t(reassociate_bb): Convert MULT_EXPR by (-1) to NEGATE_EXPR.\n \n 2016-05-21  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n "}, {"sha": "51364f3f50fc907782416112d02a90720cfd47e3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b63ff589443463a8ad12d3ad814867dc1d51fb7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b63ff589443463a8ad12d3ad814867dc1d51fb7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4b63ff589443463a8ad12d3ad814867dc1d51fb7", "patch": "@@ -43334,17 +43334,18 @@ ix86_preferred_reload_class (rtx x, reg_class_t regclass)\n      (plus soft-fp const_int).  Which can only be computed into general\n      regs.  */\n   if (GET_CODE (x) == PLUS)\n-    return reg_class_subset_p (regclass, GENERAL_REGS) ? regclass : NO_REGS;\n+    return INTEGER_CLASS_P (regclass) ? regclass : NO_REGS;\n \n   /* QImode constants are easy to load, but non-constant QImode data\n      must go into Q_REGS.  */\n   if (GET_MODE (x) == QImode && !CONSTANT_P (x))\n     {\n-      if (reg_class_subset_p (regclass, Q_REGS))\n+      if (Q_CLASS_P (regclass))\n \treturn regclass;\n-      if (reg_class_subset_p (Q_REGS, regclass))\n+      else if (reg_class_subset_p (Q_REGS, regclass))\n \treturn Q_REGS;\n-      return NO_REGS;\n+      else\n+\treturn NO_REGS;\n     }\n \n   return regclass;"}]}