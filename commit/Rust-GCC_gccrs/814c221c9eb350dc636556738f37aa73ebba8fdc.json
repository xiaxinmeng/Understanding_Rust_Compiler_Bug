{"sha": "814c221c9eb350dc636556738f37aa73ebba8fdc", "node_id": "C_kwDOANBUbNoAKDgxNGMyMjFjOWViMzUwZGM2MzY1NTY3MzhmMzdhYTczZWJiYThmZGM", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-12-14T15:22:25Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-03T11:48:59Z"}, "message": "testsuite: fix ASAN errors in i386.exp tests\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx2-i32gatherpd256-4.c: Fix ASAN errors.\n\t* gcc.target/i386/avx2-i32gatherq256-4.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherpd256-4.c: Likewise.\n\t* gcc.target/i386/avx2-i64gatherq256-4.c: Likewise.\n\t* gcc.target/i386/avx2-vpabsb256-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpabsd256-2.c: Likewise.\n\t* gcc.target/i386/avx2-vpabsw256-2.c: Likewise.\n\t* gcc.target/i386/avx256-unaligned-load-7.c: Likewise.\n\t* gcc.target/i386/avx256-unaligned-store-7.c: Likewise.\n\t* gcc.target/i386/pr64291-1.c: Likewise.", "tree": {"sha": "7aafe05a0127a5f84f781a1bb05d44379f9160eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7aafe05a0127a5f84f781a1bb05d44379f9160eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/814c221c9eb350dc636556738f37aa73ebba8fdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/814c221c9eb350dc636556738f37aa73ebba8fdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/814c221c9eb350dc636556738f37aa73ebba8fdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/814c221c9eb350dc636556738f37aa73ebba8fdc/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b043d4f93ee8f5237c05aa8ca02df9d934556f74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b043d4f93ee8f5237c05aa8ca02df9d934556f74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b043d4f93ee8f5237c05aa8ca02df9d934556f74"}], "stats": {"total": 76, "additions": 46, "deletions": 30}, "files": [{"sha": "17b0c40e4d4370c668cf4792268cdbd0cdbbaa92", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherpd256-4.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814c221c9eb350dc636556738f37aa73ebba8fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd256-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814c221c9eb350dc636556738f37aa73ebba8fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd256-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherpd256-4.c?ref=814c221c9eb350dc636556738f37aa73ebba8fdc", "patch": "@@ -25,15 +25,19 @@ avx2_test (void)\n   int i;\n   union128i_d idx;\n   union256d res, src, mask;\n-  double s1[4], res_ref[4] = { 0 };\n+  double s1[16], res_ref[4] = { 0 };\n+  double *s1_ptr = s1 + 8;\n \n-  for (i = 0; i < 4; ++i)\n+  for (i = 0; i < ARRAY_SIZE (s1); i++)\n     {\n       /* Set some stuff */\n       s1[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+    }\n \n+  for (i = 0; i < 4; ++i)\n+    {\n       /* Set src as something different from s1 */\n-      src.a[i] = -s1[i];\n+      src.a[i] = -s1_ptr[i];\n \n       /* Mask out evens */\n       ((long long *) mask.a)[i] = i % 2 ? 0 : -1;\n@@ -43,9 +47,9 @@ avx2_test (void)\n       idx.a[i] = (16 - (i + 1) * 8) >> 1;\n     }\n \n-  res.x = _mm256_mask_i32gather_pd (src.x, s1, idx.x, mask.x, 2);\n+  res.x = _mm256_mask_i32gather_pd (src.x, s1_ptr, idx.x, mask.x, 2);\n \n-  compute_i32gatherpd256 (src.a, s1, idx.a, mask.a, 2, res_ref);\n+  compute_i32gatherpd256 (src.a, s1_ptr, idx.a, mask.a, 2, res_ref);\n \n   if (check_union256d (res, res_ref) != 0)\n     abort ();"}, {"sha": "77ebf1fc1985ccabe55203955dd4159e8dc44de2", "filename": "gcc/testsuite/gcc.target/i386/avx2-i32gatherq256-4.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814c221c9eb350dc636556738f37aa73ebba8fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq256-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814c221c9eb350dc636556738f37aa73ebba8fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq256-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i32gatherq256-4.c?ref=814c221c9eb350dc636556738f37aa73ebba8fdc", "patch": "@@ -25,15 +25,19 @@ avx2_test (void)\n   long long i;\n   union128i_d idx;\n   union256i_q res, src, mask;\n-  long long s1[4], res_ref[4] = { 0 };\n+  long long s1[16], res_ref[4] = { 0 };\n+  long long *s1_ptr = s1 + 8;\n \n-  for (i = 0; i < 4; ++i)\n+  for (i = 0; i < ARRAY_SIZE (s1); i++)\n     {\n       /* Set some stuff */\n       s1[i] = 1983 * (i + 1) * (i + 2);\n+    }\n \n+  for (i = 0; i < 4; ++i)\n+    {\n       /* Set src as something different from s1 */\n-      src.a[i] = -s1[i];\n+      src.a[i] = -s1_ptr[i];\n \n       /* Mask out evens */\n       mask.a[i] = i % 2 ? 0 : -1;\n@@ -44,10 +48,10 @@ avx2_test (void)\n     }\n \n   res.x = _mm256_mask_i32gather_epi64 (src.x,\n-\t\t\t\t       (long long int *) s1,\n+\t\t\t\t       (long long int *) s1_ptr,\n \t\t\t\t       idx.x, mask.x, 2);\n \n-  compute_i32gatherpd256 (src.a, s1, idx.a, mask.a, 2, res_ref);\n+  compute_i32gatherpd256 (src.a, s1_ptr, idx.a, mask.a, 2, res_ref);\n \n   if (check_union256i_q (res, res_ref) != 0)\n     abort ();"}, {"sha": "cf94256e1dad8e993ed757e51e2e93ca5ec2ba60", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherpd256-4.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814c221c9eb350dc636556738f37aa73ebba8fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd256-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814c221c9eb350dc636556738f37aa73ebba8fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd256-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherpd256-4.c?ref=814c221c9eb350dc636556738f37aa73ebba8fdc", "patch": "@@ -25,15 +25,19 @@ avx2_test (void)\n   int i;\n   union256i_q idx;\n   union256d res, src, mask;\n-  double s1[4], res_ref[4] = { 0 };\n+  double s1[16], res_ref[4] = { 0 };\n+  double *s1_ptr = s1 + 8;\n \n-  for (i = 0; i < 4; ++i)\n+  for (i = 0; i < ARRAY_SIZE (s1); i++)\n     {\n       /* Set some stuff */\n       s1[i] = 2.718281828459045 * (i + 1) * (i + 2);\n+    }\n \n+  for (i = 0; i < 4; ++i)\n+    {\n       /* Set src as something different from s1 */\n-      src.a[i] = -s1[i];\n+      src.a[i] = -s1_ptr[i];\n \n       /* Mask out evens */\n       ((long long *) mask.a)[i] = i % 2 ? 0 : -1;\n@@ -43,9 +47,9 @@ avx2_test (void)\n       idx.a[i] = (16 - (i + 1) * 8) >> 1;\n     }\n \n-  res.x = _mm256_mask_i64gather_pd (src.x, s1, idx.x, mask.x, 2);\n+  res.x = _mm256_mask_i64gather_pd (src.x, s1_ptr, idx.x, mask.x, 2);\n \n-  compute_i64gatherpd256 (src.a, s1, idx.a, mask.a, 2, res_ref);\n+  compute_i64gatherpd256 (src.a, s1_ptr, idx.a, mask.a, 2, res_ref);\n \n   if (check_union256d (res, res_ref) != 0)\n     abort ();"}, {"sha": "396ffb45961eb204a58e9fcf1d6feb6fb997cb39", "filename": "gcc/testsuite/gcc.target/i386/avx2-i64gatherq256-4.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814c221c9eb350dc636556738f37aa73ebba8fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq256-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814c221c9eb350dc636556738f37aa73ebba8fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq256-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-i64gatherq256-4.c?ref=814c221c9eb350dc636556738f37aa73ebba8fdc", "patch": "@@ -26,15 +26,19 @@ avx2_test (void)\n   long long i;\n   union256i_q idx;\n   union256i_q res, src, mask;\n-  long long s1[4], res_ref[4] = { 0 };\n+  long long s1[16], res_ref[4] = { 0 };\n+  long long *s1_ptr = s1 + 8;\n \n-  for (i = 0; i < 4; ++i)\n+  for (i = 0; i < ARRAY_SIZE (s1); i++)\n     {\n       /* Set some stuff */\n       s1[i] = 1983 * (i + 1) * (i + 2);\n+    }\n \n+  for (i = 0; i < 4; ++i)\n+    {\n       /* Set src as something different from s1 */\n-      src.a[i] = -s1[i];\n+      src.a[i] = -s1_ptr[i];\n \n       /* Mask out evens */\n       ((long long *) mask.a)[i] = i % 2 ? 0 : -1;\n@@ -45,10 +49,10 @@ avx2_test (void)\n     }\n \n   res.x = _mm256_mask_i64gather_epi64 (src.x,\n-\t\t\t\t       (long long int *) s1,\n+\t\t\t\t       (long long int *) s1_ptr,\n \t\t\t\t       idx.x, mask.x, 2);\n \n-  compute_i64gatherq256 (src.a, s1, idx.a, mask.a, 2, res_ref);\n+  compute_i64gatherq256 (src.a, s1_ptr, idx.a, mask.a, 2, res_ref);\n \n   if (check_union256i_q (res, res_ref) != 0)\n     abort ();"}, {"sha": "9b732af50c875e043096af564ce95e337ee59f7c", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpabsb256-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814c221c9eb350dc636556738f37aa73ebba8fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsb256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814c221c9eb350dc636556738f37aa73ebba8fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsb256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsb256-2.c?ref=814c221c9eb350dc636556738f37aa73ebba8fdc", "patch": "@@ -28,7 +28,7 @@ avx2_test (void)\n \n   union256i_b s, d;\n \n-  for (i = 0; i < 256; ++i)\n+  for (i = 0; i < 256 - 7; ++i)\n     {\n       /* Recompute the results for 256-bits */\n       compute_pabs256 (&vals[i], ck);"}, {"sha": "caf1a58067498ec9291a80e30ef2f3285a32b777", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpabsd256-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814c221c9eb350dc636556738f37aa73ebba8fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsd256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814c221c9eb350dc636556738f37aa73ebba8fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsd256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsd256-2.c?ref=814c221c9eb350dc636556738f37aa73ebba8fdc", "patch": "@@ -27,7 +27,7 @@ avx2_test (void)\n \n   union256i_d s, d;\n \n-  for (i = 0; i < 256; ++i)\n+  for (i = 0; i < 256 - 7; ++i)\n     {\n       /* Recompute the results for 256-bits */\n       compute_pabs256 (&vals[i], ck);"}, {"sha": "299323de3d602979f061fc574003e4481f967396", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpabsw256-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814c221c9eb350dc636556738f37aa73ebba8fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsw256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814c221c9eb350dc636556738f37aa73ebba8fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsw256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpabsw256-2.c?ref=814c221c9eb350dc636556738f37aa73ebba8fdc", "patch": "@@ -28,7 +28,7 @@ avx2_test (void)\n \n   union256i_w s, d;\n \n-  for (i = 0; i < 256; ++i)\n+  for (i = 0; i < 256 - 7; ++i)\n     {\n       /* Using only first 2 bytes of int */\n       /* Recompute the results for 256-bits */"}, {"sha": "de30ddba348551999b47a7ec7b876837da3cffb8", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-load-7.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814c221c9eb350dc636556738f37aa73ebba8fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814c221c9eb350dc636556738f37aa73ebba8fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-7.c?ref=814c221c9eb350dc636556738f37aa73ebba8fdc", "patch": "@@ -16,10 +16,10 @@ __attribute__ ((noinline))\n void\n foo (void)\n {\n-  mp = (char **) malloc (N);\n-  lp = (char **) malloc (N);\n-  ep = (char **) malloc (N);\n-  fp = (char **) malloc (N);\n+  mp = (char **) malloc (N * sizeof (char **));\n+  lp = (char **) malloc (N * sizeof (char **));\n+  ep = (char **) malloc (N * sizeof (char **));\n+  fp = (char **) malloc (N * sizeof (char **));\n }\n \n void"}, {"sha": "2752e7fbec11414b60596b687dd73bc422af135a", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-store-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814c221c9eb350dc636556738f37aa73ebba8fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814c221c9eb350dc636556738f37aa73ebba8fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-7.c?ref=814c221c9eb350dc636556738f37aa73ebba8fdc", "patch": "@@ -14,8 +14,8 @@ __attribute__ ((noinline))\n void\n foo (void)\n {\n-  ep = (char **) malloc (N);\n-  fp = (char **) malloc (N);\n+  ep = (char **) malloc (N * sizeof (char **));\n+  fp = (char **) malloc (N * sizeof (char **));\n }\n \n void"}, {"sha": "85f1e04e7240313d7e368a38f94e1ac05ef4495a", "filename": "gcc/testsuite/gcc.target/i386/pr64291-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814c221c9eb350dc636556738f37aa73ebba8fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr64291-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814c221c9eb350dc636556738f37aa73ebba8fdc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr64291-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr64291-1.c?ref=814c221c9eb350dc636556738f37aa73ebba8fdc", "patch": "@@ -24,7 +24,7 @@ int main ()\n   f (n);\n   h (d);\n   qp = (unsigned long*)__builtin_alloca(4099*8) + 1;\n-  dnp = (unsigned long*)__builtin_alloca (2049*8);\n+  dnp = (unsigned long*)__builtin_alloca (2049*8) + 1;\n   alloc = 1;\n   for (test = 0; test < 1; test++)\n     {"}]}