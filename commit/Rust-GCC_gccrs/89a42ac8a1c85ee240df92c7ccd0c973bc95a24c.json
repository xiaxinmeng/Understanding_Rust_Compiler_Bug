{"sha": "89a42ac8a1c85ee240df92c7ccd0c973bc95a24c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlhNDJhYzhhMWM4NWVlMjQwZGY5MmM3Y2NkMGM5NzNiYzk1YTI0Yw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2006-01-29T03:30:47Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2006-01-29T03:30:47Z"}, "message": "c.opt: Add -W(no-)overlength-strings.\n\ngcc:\n\t* c.opt: Add -W(no-)overlength-strings.\n\t* doc/invoke.texi: Document it.\n\t* c-opts.c (c_common_handle_option): -pedantic implies\n\t-Woverlength-strings, if not explicitly disabled already.\n\t(c_common_post_options): -Woverlength-strings defaults to off, and\n\tis always off for C++.\n\t* c-common.c (fix_string_type): Issue warning about strings longer\n\tthan is portable only if warn_overlength_strings.  Rearrange code\n\ta little for clarity.\n\t* configure.in: Check for -Wno-overlength-strings as well before\n\tenabling -pedantic in stage 1.\n\t* Makefile.in (STRICT2_WARN): Add -Wno-overlength-strings.\n\t(gcc.o-warn, insn-automata.o-warn, build/gencondmd.o-warn): Delete.\n\n\t* genconditions.c (write_header, write_one_condition)\n\t(write_conditions, write_writer): Consolidate very long strings\n\tthat were broken up to fit in C89 portable limit.  Don't use\n\tprintf when fputs will do.\n\ngcc/testsuite:\n\t* gcc.dg/Woverlength-strings.c\n\t* gcc.dg/Woverlength-strings-pedantic-c89.c\n\t* gcc.dg/Woverlength-strings-pedantic-c89-no.c\n\t* gcc.dg/Woverlength-strings-pedantic-c99.c\n\t* gcc.dg/Woverlength-strings-pedantic-c99-no.c: New tests.\n\n==================================================================\n\nFrom-SVN: r110360", "tree": {"sha": "d4a553c734fb691a872f7a7a3de2bf60d8a30c00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4a553c734fb691a872f7a7a3de2bf60d8a30c00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/comments", "author": null, "committer": null, "parents": [{"sha": "0f7868fed2674fab28566ce47b388c5a48a9c8aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f7868fed2674fab28566ce47b388c5a48a9c8aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f7868fed2674fab28566ce47b388c5a48a9c8aa"}], "stats": {"total": 348, "additions": 285, "deletions": 63}, "files": [{"sha": "f40c03114961cdf458c84ee7f11fffcbe9443c86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89a42ac8a1c85ee240df92c7ccd0c973bc95a24c", "patch": "@@ -1,12 +1,33 @@\n+2006-01-28  Zack Weinberg  <zackw@panix.com>\n+\n+\t* c.opt: Add -W(no-)overlength-strings.\n+\t* doc/invoke.texi: Document it.\n+\t* c-opts.c (c_common_handle_option): -pedantic implies\n+\t-Woverlength-strings, if not explicitly disabled already.\n+\t(c_common_post_options): -Woverlength-strings defaults to off, and\n+\tis always off for C++.\n+\t* c-common.c (fix_string_type): Issue warning about strings longer\n+\tthan is portable only if warn_overlength_strings.  Rearrange code\n+\ta little for clarity.\n+\t* configure.in: Check for -Wno-overlength-strings as well before\n+\tenabling -pedantic in stage 1.\n+\t* Makefile.in (STRICT2_WARN): Add -Wno-overlength-strings.\n+\t(gcc.o-warn, insn-automata.o-warn, build/gencondmd.o-warn): Delete.\n+\n+\t* genconditions.c (write_header, write_one_condition)\n+\t(write_conditions, write_writer): Consolidate very long strings\n+\tthat were broken up to fit in C89 portable limit.  Don't use\n+\tprintf when fputs will do.\n+\n 2006-01-28  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* combine.c (simplify_comparison <AND>): Check\n \tTRULY_NOOP_TRUNCATION before start using a subreg.\n-\t\n-\t* config/mips/mips.md (*branch_zero<mode>, \n-\t*branch_zero<mode>_inverted, *branch_equality<mode>, \n-\t*branch_equality<mode>_inverted, *branch_equality<mode>_mips16): \n-\tRemove mode check from comparisons. \n+\n+\t* config/mips/mips.md (*branch_zero<mode>,\n+\t*branch_zero<mode>_inverted, *branch_equality<mode>,\n+\t*branch_equality<mode>_inverted, *branch_equality<mode>_mips16):\n+\tRemove mode check from comparisons.\n \n 2006-01-28  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n@@ -72,7 +93,7 @@\n 2006-01-27  Daniel Berlin  <dberlin@dberlin.org>\n \t    Kenneth Zadeck <zadeck@naturalbridge.com>\n \n-\tPR rtl-optimization/24762 \n+\tPR rtl-optimization/24762\n \t* doc/tm.texi: Added TARGET_EXTRA_LIVE_ON_ENTRY.\n \t* targhooks.c (hook_void_bitmap): New hook prototype.\n \t* targhoohs.h (hook_void_bitmap): Ditto."}, {"sha": "40c18a19f5952c1ea6f7681fe8e321e6b6a6d233", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=89a42ac8a1c85ee240df92c7ccd0c973bc95a24c", "patch": "@@ -177,7 +177,8 @@ LOOSE_WARN = -W -Wall -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes\n STRICT_WARN = @strict1_warn@\n WERROR_FLAGS = @WERROR@\n STRICT2_WARN = -pedantic -Wno-long-long -Wno-variadic-macros \\\n-  -Wold-style-definition -Wmissing-format-attribute $(WERROR_FLAGS)\n+  -Wno-overlength-strings -Wold-style-definition -Wmissing-format-attribute \\\n+  $(WERROR_FLAGS)\n \n # This is set by --enable-checking.  The idea is to catch forgotten\n # \"extern\" tags in header files.\n@@ -195,11 +196,8 @@ VALGRIND_DRIVER_DEFINES = @valgrind_path_defines@\n build-warn = $(STRICT_WARN)\n GCC_WARN_CFLAGS = $(LOOSE_WARN) $($(@D)-warn) $(NOCOMMON_FLAG) $($@-warn)\n \n-# These files are to have -Werror bypassed in stage2:\n-# These are very hard to completely clean due to target complexities.\n-gcc.o-warn = -Wno-error\n-insn-automata.o-warn = -Wno-error\n-build/gencondmd.o-warn = -Wno-error\n+# These files are to have specific diagnostics suppressed, or are not to\n+# be subject to -Werror:\n # Bison-1.75 output often yields (harmless) -Wtraditional warnings\n build/gengtype-yacc.o-warn = -Wno-error\n # flex output may yield harmless \"no previous prototype\" warnings"}, {"sha": "5be3363521651df1dfe6147d20248a87457d6d0f", "filename": "gcc/c-common.c", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=89a42ac8a1c85ee240df92c7ccd0c973bc95a24c", "patch": "@@ -844,19 +844,31 @@ fix_string_type (tree value)\n {\n   const int wchar_bytes = TYPE_PRECISION (wchar_type_node) / BITS_PER_UNIT;\n   const int wide_flag = TREE_TYPE (value) == wchar_array_type_node;\n-  const int nchars_max = flag_isoc99 ? 4095 : 509;\n   int length = TREE_STRING_LENGTH (value);\n   int nchars;\n   tree e_type, i_type, a_type;\n \n   /* Compute the number of elements, for the array type.  */\n   nchars = wide_flag ? length / wchar_bytes : length;\n \n-  if (pedantic && nchars - 1 > nchars_max && !c_dialect_cxx ())\n-    pedwarn (\"string length %qd is greater than the length %qd ISO C%d compilers are required to support\",\n-\t     nchars - 1, nchars_max, flag_isoc99 ? 99 : 89);\n+  /* C89 2.2.4.1, C99 5.2.4.1 (Translation limits).  The analogous\n+     limit in C++98 Annex B is very large (65536) and is not normative,\n+     so we do not diagnose it (warn_overlength_strings is forced off\n+     in c_common_post_options).  */\n+  if (warn_overlength_strings)\n+    {\n+      const int nchars_max = flag_isoc99 ? 4095 : 509;\n+      const int relevant_std = flag_isoc99 ? 99 : 90;\n+      if (nchars - 1 > nchars_max)\n+\t/* Translators: The %d after 'ISO C' will be 90 or 99.  Do not\n+\t   separate the %d from the 'C'.  'ISO' should not be\n+\t   translated, but it may be moved after 'C%d' in languages\n+\t   where modifiers follow nouns.  */\n+\tpedwarn (\"string length %qd is greater than the length %qd \"\n+\t\t \"ISO C%d compilers are required to support\",\n+\t\t nchars - 1, nchars_max, relevant_std);\n+    }\n \n-  e_type = wide_flag ? wchar_type_node : char_type_node;\n   /* Create the array type for the string constant.  flag_const_strings\n      says make the string constant an array of const char so that\n      copying it to a non-const pointer will get a warning.  For C++,\n@@ -868,6 +880,7 @@ fix_string_type (tree value)\n      construct the matching unqualified array type first.  The C front\n      end does not require this, but it does no harm, so we do it\n      unconditionally.  */\n+  e_type = wide_flag ? wchar_type_node : char_type_node;\n   i_type = build_index_type (build_int_cst (NULL_TREE, nchars - 1));\n   a_type = build_array_type (e_type, i_type);\n   if (flag_const_strings)"}, {"sha": "8c5827a39595a02560cfcb6f93ba91291cc3f7c6", "filename": "gcc/c-opts.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=89a42ac8a1c85ee240df92c7ccd0c973bc95a24c", "patch": "@@ -893,6 +893,8 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       cpp_opts->warn_endif_labels = 1;\n       if (warn_pointer_sign == -1)\n \twarn_pointer_sign = 1;\n+      if (warn_overlength_strings == -1)\n+\twarn_overlength_strings = 1;\n       break;\n \n     case OPT_print_objc_runtime_info:\n@@ -1018,6 +1020,12 @@ c_common_post_options (const char **pfilename)\n   if (warn_pointer_sign == -1)\n     warn_pointer_sign = 0;\n \n+  /* -Woverlength-strings is off by default, but is enabled by -pedantic.\n+     It is never enabled in C++, as the minimum limit is not normative\n+     in that standard.  */\n+  if (warn_overlength_strings == -1 || c_dialect_cxx ())\n+    warn_overlength_strings = 0;\n+\n   /* Special format checking options don't work without -Wformat; warn if\n      they are used.  */\n   if (!warn_format)"}, {"sha": "4ce9b9fed891eaf262cd290d4d93ed9080a81302", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=89a42ac8a1c85ee240df92c7ccd0c973bc95a24c", "patch": "@@ -311,6 +311,10 @@ Wold-style-definition\n C ObjC Var(warn_old_style_definition)\n Warn if an old-style parameter definition is used\n \n+Woverlength-strings\n+C ObjC C++ ObjC++ Var(warn_overlength_strings) Init(-1)\n+Warn if a string is longer than the maximum portable length specified by the standard\n+\n Woverloaded-virtual\n C++ ObjC++ Var(warn_overloaded_virtual)\n Warn about overloaded virtual function names"}, {"sha": "14ee2ba54f68810ff4209dc5a259133e35aa267b", "filename": "gcc/configure", "status": "modified", "additions": 55, "deletions": 3, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=89a42ac8a1c85ee240df92c7ccd0c973bc95a24c", "patch": "@@ -6000,6 +6000,7 @@ fi\n # We want to use -pedantic, but we don't want warnings about\n # * 'long long'\n # * variadic macros\n+# * overlong strings\n # So, we only use -pedantic if we can disable those warnings.\n \n echo \"$as_me:$LINENO: checking whether ${CC} accepts -Wno-long-long\" >&5\n@@ -6102,10 +6103,61 @@ fi\n echo \"$as_me:$LINENO: result: $ac_cv_prog_cc_w_no_variadic_macros\" >&5\n echo \"${ECHO_T}$ac_cv_prog_cc_w_no_variadic_macros\" >&6\n \n+echo \"$as_me:$LINENO: checking whether ${CC} accepts -Wno-overlength-strings\" >&5\n+echo $ECHO_N \"checking whether ${CC} accepts -Wno-overlength-strings... $ECHO_C\" >&6\n+if test \"${ac_cv_prog_cc_w_no_overlength_strings+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  save_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"-Wno-overlength-strings\"\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_prog_cc_w_no_overlength_strings=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_prog_cc_w_no_overlength_strings=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+  CFLAGS=\"$save_CFLAGS\"\n+\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_prog_cc_w_no_overlength_strings\" >&5\n+echo \"${ECHO_T}$ac_cv_prog_cc_w_no_overlength_strings\" >&6\n+\n strict1_warn=\n if test $ac_cv_prog_cc_w_no_long_long = yes \\\n-   && test $ac_cv_prog_cc_w_no_variadic_macros = yes ; then\n-  strict1_warn=\"-pedantic -Wno-long-long -Wno-variadic-macros\"\n+   && test $ac_cv_prog_cc_w_no_variadic_macros = yes \\\n+   && test $ac_cv_prog_cc_w_no_overlength_strings = yes ; then\n+  strict1_warn=\"-pedantic -Wno-long-long -Wno-variadic-macros -Wno-overlength-strings\"\n fi\n \n # Add -Wold-style-definition if it's accepted\n@@ -7468,7 +7520,7 @@ if test \"${gcc_cv_prog_makeinfo_modern+set}\" = set; then\n else\n     ac_prog_version=`$MAKEINFO --version 2>&1 |\n                    sed -n 's/^.*GNU texinfo.* \\([0-9][0-9.]*\\).*$/\\1/p'`\n-  echo \"configure:7471: version of makeinfo is $ac_prog_version\" >&5\n+  echo \"configure:7523: version of makeinfo is $ac_prog_version\" >&5\n   case $ac_prog_version in\n     '')     gcc_cv_prog_makeinfo_modern=no;;\n     4.[4-9]*)"}, {"sha": "dd3823ffb66ec9e72a388e5710ce44078af2dde4", "filename": "gcc/configure.ac", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=89a42ac8a1c85ee240df92c7ccd0c973bc95a24c", "patch": "@@ -301,6 +301,7 @@ AC_CHECK_TYPES([__int64], [AC_CHECK_SIZEOF(__int64)])\n # We want to use -pedantic, but we don't want warnings about\n # * 'long long'\n # * variadic macros\n+# * overlong strings\n # So, we only use -pedantic if we can disable those warnings.\n \n AC_CACHE_CHECK(\n@@ -325,10 +326,22 @@ AC_CACHE_CHECK(\n   CFLAGS=\"$save_CFLAGS\"\n   ])\n \n+AC_CACHE_CHECK(\n+  [whether ${CC} accepts -Wno-overlength-strings],\n+  [ac_cv_prog_cc_w_no_overlength_strings],\n+  [save_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"-Wno-overlength-strings\"\n+  AC_COMPILE_IFELSE([AC_LANG_SOURCE([[]])],\n+                    [ac_cv_prog_cc_w_no_overlength_strings=yes],\n+                    [ac_cv_prog_cc_w_no_overlength_strings=no])\n+  CFLAGS=\"$save_CFLAGS\"\n+  ])\n+\n strict1_warn=\n if test $ac_cv_prog_cc_w_no_long_long = yes \\\n-   && test $ac_cv_prog_cc_w_no_variadic_macros = yes ; then\n-  strict1_warn=\"-pedantic -Wno-long-long -Wno-variadic-macros\"\n+   && test $ac_cv_prog_cc_w_no_variadic_macros = yes \\\n+   && test $ac_cv_prog_cc_w_no_overlength_strings = yes ; then\n+  strict1_warn=\"-pedantic -Wno-long-long -Wno-variadic-macros -Wno-overlength-strings\"\n fi\n \n # Add -Wold-style-definition if it's accepted"}, {"sha": "d8f69e8e17301195b5cdc14c967b1d115abf970c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=89a42ac8a1c85ee240df92c7ccd0c973bc95a24c", "patch": "@@ -238,7 +238,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wmain  -Wmissing-braces  -Wmissing-field-initializers @gol\n -Wmissing-format-attribute  -Wmissing-include-dirs @gol\n -Wmissing-noreturn @gol\n--Wno-multichar  -Wnonnull  -Wpacked  -Wpadded @gol\n+-Wno-multichar  -Wnonnull  -Woverlength-strings  -Wpacked  -Wpadded @gol\n -Wparentheses  -Wpointer-arith  -Wno-pointer-to-int-cast @gol\n -Wredundant-decls @gol\n -Wreturn-type  -Wsequence-point  -Wshadow @gol\n@@ -3444,6 +3444,21 @@ even when intentional, result in unspecified behavior and are not portable.\n Usually these warnings alert that the programmer intended to use\n @code{strcmp}.  This warning is enabled by @option{-Wall}.\n \n+@item -Woverlength-strings\n+@opindex Woverlength-strings\n+Warn about string constants which are longer than the ``minimum\n+maximum'' length specified in the C standard.  Modern compilers\n+generally allow string constants which are much longer than the\n+standard's minimum limit, but very portable programs should avoid\n+using longer strings.\n+\n+The limit applies @emph{after} string constant concatenation, and does\n+not count the trailing NUL@.  In C89, the limit was 509 characters; in\n+C99, it was raised to 4095.  C++98 does not specify a normative\n+minimum maximum, so we do not diagnose overlength strings in C++@.\n+\n+This option is implied by @option{-pedantic}, and can be disabled with\n+@option{-Wno-overlength-strings}.\n @end table\n \n @node Debugging Options"}, {"sha": "ae9a67e305c1b2c308cfaac0b03379f402d225de", "filename": "gcc/genconditions.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Fgenconditions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Fgenconditions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconditions.c?ref=89a42ac8a1c85ee240df92c7ccd0c973bc95a24c", "patch": "@@ -52,9 +52,8 @@ write_header (void)\n    machine description file.  */\\n\\\n \\n\\\n #include \\\"bconfig.h\\\"\\n\\\n-#include \\\"system.h\\\"\\n\");\n-\n-  puts (\"\\\n+#include \\\"system.h\\\"\\n\\\n+\\n\\\n /* It is necessary, but not entirely safe, to include the headers below\\n\\\n    in a generator program.  As a defensive measure, don't do so when the\\n\\\n    table isn't going to have anything in it.  */\\n\\\n@@ -66,23 +65,20 @@ write_header (void)\n #undef ENABLE_RTL_CHECKING\\n\\\n #undef ENABLE_RTL_FLAG_CHECKING\\n\\\n #undef ENABLE_GC_CHECKING\\n\\\n-#undef ENABLE_GC_ALWAYS_COLLECT\\n\");\n-\n-  puts (\"\\\n+#undef ENABLE_GC_ALWAYS_COLLECT\\n\\\n+\\n\\\n #include \\\"coretypes.h\\\"\\n\\\n #include \\\"tm.h\\\"\\n\\\n #include \\\"insn-constants.h\\\"\\n\\\n #include \\\"rtl.h\\\"\\n\\\n #include \\\"tm_p.h\\\"\\n\\\n-#include \\\"function.h\\\"\\n\");\n-\n-  puts (\"\\\n+#include \\\"function.h\\\"\\n\\\n+\\n\\\n /* Fake - insn-config.h doesn't exist yet.  */\\n\\\n #define MAX_RECOG_OPERANDS 10\\n\\\n #define MAX_DUP_OPERANDS 10\\n\\\n-#define MAX_INSNS_PER_SPLIT 5\\n\");\n-\n-  puts (\"\\\n+#define MAX_INSNS_PER_SPLIT 5\\n\\\n+\\n\\\n #include \\\"regs.h\\\"\\n\\\n #include \\\"recog.h\\\"\\n\\\n #include \\\"real.h\\\"\\n\\\n@@ -134,11 +130,11 @@ write_one_condition (void **slot, void * ARG_UNUSED (dummy))\n       putchar (*p);\n     }\n \n-  printf (\"\\\",\\n    __builtin_constant_p \");\n+  fputs (\"\\\",\\n    __builtin_constant_p \", stdout);\n   print_c_condition (test->expr);\n-  printf (\"\\n    ? (int) \");\n+  fputs (\"\\n    ? (int) \", stdout);\n   print_c_condition (test->expr);\n-  printf (\"\\n    : -1 },\\n\");\n+  fputs (\"\\n    : -1 },\\n\", stdout);\n   return 1;\n }\n \n@@ -154,9 +150,8 @@ struct c_test\\n\\\n {\\n\\\n   const char *expr;\\n\\\n   int value;\\n\\\n-};\\n\");\n-\n-  puts (\"\\\n+};\\n\\\n+\\n\\\n /* This table lists each condition found in the machine description.\\n\\\n    Each condition is mapped to its truth value (0 or 1), or -1 if that\\n\\\n    cannot be calculated at compile time.\\n\\\n@@ -200,8 +195,8 @@ write_writer (void)\n \t\"          putchar (*p);\\n\"\n \t\"        }\\n\"\n         \"      puts (\\\"\\\\\\\")\\\");\\n\"\n-        \"    }\");\n-  puts (\"  puts (\\\"])\\\");\\n\"\n+        \"    }\\n\"\n+\t\"  puts (\\\"])\\\");\\n\"\n         \"  fflush (stdout);\\n\"\n         \"return ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE;\\n\"\n \t\"}\");"}, {"sha": "a5aba92a37be26ff2b7e7233f9b68b42e884caeb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=89a42ac8a1c85ee240df92c7ccd0c973bc95a24c", "patch": "@@ -1,6 +1,14 @@\n+2006-01-28  Zack Weinberg  <zackw@panix.com>\n+\n+\t* gcc.dg/Woverlength-strings.c\n+\t* gcc.dg/Woverlength-strings-pedantic-c89.c\n+\t* gcc.dg/Woverlength-strings-pedantic-c89-no.c\n+\t* gcc.dg/Woverlength-strings-pedantic-c99.c\n+\t* gcc.dg/Woverlength-strings-pedantic-c99-no.c: New tests.\n+\n 2006-01-28  Adam Nemet  <anemet@caviumnetworks.com>\n \n-\t* gcc.c-torture/execute/20060127-1.c: New test. \n+\t* gcc.c-torture/execute/20060127-1.c: New test.\n \n 2006-01-28  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -32,12 +40,12 @@\n \n 2006-01-26  Laurent GUERBY <laurent@guerby.net>\n \n-        PR ada/21317\n-        * ada/acats/support/impdef.a: Add One_Long_Second.\n-        * ada/acats/tests/c9/c94025.a: Use One_Long_Second.\n-        * ada/acats/tests/c9/c94026.a: Likewise.\n-        * ada/acats/tests/c9/c97305c.ada: Likewise.\n-        * ada/acats/tests/c9/c99004a.ada: Likewise.\n+\tPR ada/21317\n+\t* ada/acats/support/impdef.a: Add One_Long_Second.\n+\t* ada/acats/tests/c9/c94025.a: Use One_Long_Second.\n+\t* ada/acats/tests/c9/c94026.a: Likewise.\n+\t* ada/acats/tests/c9/c97305c.ada: Likewise.\n+\t* ada/acats/tests/c9/c99004a.ada: Likewise.\n \n 2005-01-26  Paul Thomas  <pault@gcc.gnu.org>\n \n@@ -68,7 +76,7 @@\n \n \tPR C/25861\n \t* gcc.c-torture/compile/pr25861.c: New test.\n-\t\n+\n 2006-01-26  Paul Brook  <paul@codesourcery.com>\n \n \t* gcc.dg/compat/struct-layout-1.exp: Pass -e to generator program\n@@ -124,7 +132,7 @@\n \t* gfortran.dg/read_eof_1.f90: Rename from read_eof.f90.\n \t* gfortran.dg/read_eof_2.f90: New test.\n \t* gfortran.dg/read_eof_3.f90: New test.\n-\t\n+\n 2006-01-24  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR tree-opt/25860\n@@ -231,8 +239,8 @@\n \n 2006-01-20  Dirk Mueller  <dmueller@suse.com>\n \n-        PR c++/5520\n-        * g++.dg/warn/empty-body.C: New.\n+\tPR c++/5520\n+\t* g++.dg/warn/empty-body.C: New.\n \n 2006-01-19  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -482,7 +490,7 @@\n \tto LD_LIBRARY_PATH.\n \n 2006-01-16  Eric Botcazou  <ebotcazou@adacore.com>\n-            Andrew Pinski  <pinskia@physics.uc.edu>\n+\t    Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* gcc.dg/minmax-1.c: New test.\n \n@@ -674,15 +682,15 @@\n \n 2006-01-11  Paolo Bonzini  <bonzini@gnu.org>\n \n-        PR tree-optimization/23109\n-        PR tree-optimization/23948\n-        PR tree-optimization/24123\n+\tPR tree-optimization/23109\n+\tPR tree-optimization/23948\n+\tPR tree-optimization/24123\n \n-        * gcc.dg/tree-ssa/recip-3.c, gcc.dg/tree-ssa/recip-4.c,\n-        gcc.dg/tree-ssa/recip-5.c, gcc.dg/tree-ssa/recip-6.c,\n-        gcc.dg/tree-ssa/recip-7.c, gcc.dg/tree-ssa/pr23109.c,\n-        g++.dg/tree-ssa/pr23948.C: New testcases.\n-        * gcc.dg/tree-ssa/recip-2.c, gcc.dg/tree-ssa/pr23234.c: Provide\n+\t* gcc.dg/tree-ssa/recip-3.c, gcc.dg/tree-ssa/recip-4.c,\n+\tgcc.dg/tree-ssa/recip-5.c, gcc.dg/tree-ssa/recip-6.c,\n+\tgcc.dg/tree-ssa/recip-7.c, gcc.dg/tree-ssa/pr23109.c,\n+\tg++.dg/tree-ssa/pr23948.C: New testcases.\n+\t* gcc.dg/tree-ssa/recip-2.c, gcc.dg/tree-ssa/pr23234.c: Provide\n \tthree divisions in order to do the optimization.\n \n 2006-01-11  Zdenek Dvorak <dvorakz@suse.cz>"}, {"sha": "a2ccbddf2569f9dd7d7c87c503fe242394b269c9", "filename": "gcc/testsuite/gcc.dg/Woverlength-strings-pedantic-c89-no.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Ftestsuite%2Fgcc.dg%2FWoverlength-strings-pedantic-c89-no.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Ftestsuite%2Fgcc.dg%2FWoverlength-strings-pedantic-c89-no.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWoverlength-strings-pedantic-c89-no.c?ref=89a42ac8a1c85ee240df92c7ccd0c973bc95a24c", "patch": "@@ -0,0 +1,19 @@\n+/* -Woverlength-strings complains about string constants which are too long\n+   for the C standard's \"minimum maximum\" limits.  It is off by default,\n+   but implied by -pedantic.  */\n+\n+/* { dg-options \"-std=c89 -pedantic -Wno-overlength-strings\" } */\n+\n+#define TEN \"xxxxxxxxxx\"\n+#define HUN TEN TEN TEN TEN TEN  TEN TEN TEN TEN TEN\n+#define THO HUN HUN HUN HUN HUN  HUN HUN HUN HUN HUN\n+\n+/* C89's minimum-maximum is 509. */\n+const char x510[] = HUN HUN HUN HUN HUN TEN;\n+\n+/* C99's minimum-maximum is 4095.  */\n+const char x4096[] =\n+  THO THO THO THO     /* 4000 */\n+  TEN TEN TEN TEN TEN /* 4050 */\n+  TEN TEN TEN TEN     /* 4090 */\n+  \"123456\";"}, {"sha": "9370acf84404fe708a64276008fabaa9fdacce70", "filename": "gcc/testsuite/gcc.dg/Woverlength-strings-pedantic-c89.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Ftestsuite%2Fgcc.dg%2FWoverlength-strings-pedantic-c89.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Ftestsuite%2Fgcc.dg%2FWoverlength-strings-pedantic-c89.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWoverlength-strings-pedantic-c89.c?ref=89a42ac8a1c85ee240df92c7ccd0c973bc95a24c", "patch": "@@ -0,0 +1,19 @@\n+/* -Woverlength-strings complains about string constants which are too long\n+   for the C standard's \"minimum maximum\" limits.  It is off by default,\n+   but implied by -pedantic.  */\n+\n+/* { dg-options \"-std=c89 -pedantic\" } */\n+\n+#define TEN \"xxxxxxxxxx\"\n+#define HUN TEN TEN TEN TEN TEN  TEN TEN TEN TEN TEN\n+#define THO HUN HUN HUN HUN HUN  HUN HUN HUN HUN HUN\n+\n+/* C89's minimum-maximum is 509. */\n+const char x510[] = HUN HUN HUN HUN HUN TEN; /* { dg-warning \"greater than\" } */\n+\n+/* C99's minimum-maximum is 4095.  */\n+const char x4096[] =\n+  THO THO THO THO     /* 4000 */\n+  TEN TEN TEN TEN TEN /* 4050 */\n+  TEN TEN TEN TEN     /* 4090 */\n+  \"123456\";  /* { dg-warning \"greater than\" } */"}, {"sha": "a44a21409bdbf54ca9af5b95bf2b26fc769ac696", "filename": "gcc/testsuite/gcc.dg/Woverlength-strings-pedantic-c99-no.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Ftestsuite%2Fgcc.dg%2FWoverlength-strings-pedantic-c99-no.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Ftestsuite%2Fgcc.dg%2FWoverlength-strings-pedantic-c99-no.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWoverlength-strings-pedantic-c99-no.c?ref=89a42ac8a1c85ee240df92c7ccd0c973bc95a24c", "patch": "@@ -0,0 +1,19 @@\n+/* -Woverlength-strings complains about string constants which are too long\n+   for the C standard's \"minimum maximum\" limits.  It is off by default,\n+   but implied by -pedantic.  */\n+\n+/* { dg-options \"-std=c99 -pedantic -Wno-overlength-strings\" } */\n+\n+#define TEN \"xxxxxxxxxx\"\n+#define HUN TEN TEN TEN TEN TEN  TEN TEN TEN TEN TEN\n+#define THO HUN HUN HUN HUN HUN  HUN HUN HUN HUN HUN\n+\n+/* C89's minimum-maximum is 509. */\n+const char x510[] = HUN HUN HUN HUN HUN TEN;\n+\n+/* C99's minimum-maximum is 4095.  */\n+const char x4096[] =\n+  THO THO THO THO     /* 4000 */\n+  TEN TEN TEN TEN TEN /* 4050 */\n+  TEN TEN TEN TEN     /* 4090 */\n+  \"123456\";"}, {"sha": "e7f512192fdafef46f3217d0bab63742ae063c6e", "filename": "gcc/testsuite/gcc.dg/Woverlength-strings-pedantic-c99.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Ftestsuite%2Fgcc.dg%2FWoverlength-strings-pedantic-c99.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Ftestsuite%2Fgcc.dg%2FWoverlength-strings-pedantic-c99.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWoverlength-strings-pedantic-c99.c?ref=89a42ac8a1c85ee240df92c7ccd0c973bc95a24c", "patch": "@@ -0,0 +1,19 @@\n+/* -Woverlength-strings complains about string constants which are too long\n+   for the C standard's \"minimum maximum\" limits.  It is off by default,\n+   but implied by -pedantic.  */\n+\n+/* { dg-options \"-std=c99 -pedantic\" } */\n+\n+#define TEN \"xxxxxxxxxx\"\n+#define HUN TEN TEN TEN TEN TEN  TEN TEN TEN TEN TEN\n+#define THO HUN HUN HUN HUN HUN  HUN HUN HUN HUN HUN\n+\n+/* C89's minimum-maximum is 509. */\n+const char x510[] = HUN HUN HUN HUN HUN TEN;\n+\n+/* C99's minimum-maximum is 4095.  */\n+const char x4096[] =\n+  THO THO THO THO     /* 4000 */\n+  TEN TEN TEN TEN TEN /* 4050 */\n+  TEN TEN TEN TEN     /* 4090 */\n+  \"123456\";  /* { dg-warning \"greater than\" } */"}, {"sha": "d02e18ea298680442a289975d20b2faae16e1379", "filename": "gcc/testsuite/gcc.dg/Woverlength-strings.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Ftestsuite%2Fgcc.dg%2FWoverlength-strings.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a42ac8a1c85ee240df92c7ccd0c973bc95a24c/gcc%2Ftestsuite%2Fgcc.dg%2FWoverlength-strings.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWoverlength-strings.c?ref=89a42ac8a1c85ee240df92c7ccd0c973bc95a24c", "patch": "@@ -0,0 +1,19 @@\n+/* -Woverlength-strings complains about string constants which are too long\n+   for the C standard's \"minimum maximum\" limits.  It is off by default,\n+   but implied by -pedantic.  */\n+\n+/* { dg-options \"\" } */\n+\n+#define TEN \"xxxxxxxxxx\"\n+#define HUN TEN TEN TEN TEN TEN  TEN TEN TEN TEN TEN\n+#define THO HUN HUN HUN HUN HUN  HUN HUN HUN HUN HUN\n+\n+/* C89's minimum-maximum is 509. */\n+const char x510[] = HUN HUN HUN HUN HUN TEN;\n+\n+/* C99's minimum-maximum is 4095.  */\n+const char x4096[] =\n+  THO THO THO THO     /* 4000 */\n+  TEN TEN TEN TEN TEN /* 4050 */\n+  TEN TEN TEN TEN     /* 4090 */\n+  \"123456\";"}]}