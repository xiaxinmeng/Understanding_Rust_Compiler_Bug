{"sha": "8070c91a53e4f058080e610b9d18c7c2c7d6fdfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA3MGM5MWE1M2U0ZjA1ODA4MGU2MTBiOWQxOGM3YzJjN2Q2ZmRmZQ==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@codesourcery.com", "date": "2007-09-04T13:46:47Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2007-09-04T13:46:47Z"}, "message": "rs6000.c (rs6000_stack_info): Allocate space for the GOT pointer only if there is a constant pool.\n\n\t* config/rs6000/rs6000.c (rs6000_stack_info): Allocate space for the\n\tGOT pointer only if there is a constant pool.  Use the allocated space\n\tfor SPE also.\n\nFrom-SVN: r128080", "tree": {"sha": "5de5225e6cf574779bfffc5e25d4dd51947db225", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5de5225e6cf574779bfffc5e25d4dd51947db225"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8070c91a53e4f058080e610b9d18c7c2c7d6fdfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8070c91a53e4f058080e610b9d18c7c2c7d6fdfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8070c91a53e4f058080e610b9d18c7c2c7d6fdfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8070c91a53e4f058080e610b9d18c7c2c7d6fdfe/comments", "author": null, "committer": null, "parents": [{"sha": "1e0890ae3c09d0f8885fd4917e76268a44071e35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e0890ae3c09d0f8885fd4917e76268a44071e35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e0890ae3c09d0f8885fd4917e76268a44071e35"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "1dd19c04c985ad4274b6bd538cb10529df32a7c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8070c91a53e4f058080e610b9d18c7c2c7d6fdfe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8070c91a53e4f058080e610b9d18c7c2c7d6fdfe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8070c91a53e4f058080e610b9d18c7c2c7d6fdfe", "patch": "@@ -1,3 +1,9 @@\n+2007-09-04  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_stack_info): Allocate space for the\n+\tGOT pointer only if there is a constant pool.  Use the allocated space\n+\tfor SPE also.\n+\n 2007-09-04  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \t* config/rs6000/linux-unwind.h (ppc_fallback_frame_state): Correct"}, {"sha": "9768a3f4909c38517ced90033412b0cc846e5284", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8070c91a53e4f058080e610b9d18c7c2c7d6fdfe/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8070c91a53e4f058080e610b9d18c7c2c7d6fdfe/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8070c91a53e4f058080e610b9d18c7c2c7d6fdfe", "patch": "@@ -13910,6 +13910,7 @@ rs6000_stack_info (void)\n   int reg_size = TARGET_32BIT ? 4 : 8;\n   int ehrd_size;\n   int save_align;\n+  int first_gp;\n   HOST_WIDE_INT non_fixed_size;\n \n   memset (&info, 0, sizeof (info));\n@@ -13929,14 +13930,19 @@ rs6000_stack_info (void)\n   /* Calculate which registers need to be saved & save area size.  */\n   info_ptr->first_gp_reg_save = first_reg_to_save ();\n   /* Assume that we will have to save RS6000_PIC_OFFSET_TABLE_REGNUM,\n-     even if it currently looks like we won't.  */\n+     even if it currently looks like we won't.  Reload may need it to\n+     get at a constant; if so, it will have already created a constant\n+     pool entry for it.  */\n   if (((TARGET_TOC && TARGET_MINIMAL_TOC)\n        || (flag_pic == 1 && DEFAULT_ABI == ABI_V4)\n        || (flag_pic && DEFAULT_ABI == ABI_DARWIN))\n+      && current_function_uses_const_pool\n       && info_ptr->first_gp_reg_save > RS6000_PIC_OFFSET_TABLE_REGNUM)\n-    info_ptr->gp_size = reg_size * (32 - RS6000_PIC_OFFSET_TABLE_REGNUM);\n+    first_gp = RS6000_PIC_OFFSET_TABLE_REGNUM;\n   else\n-    info_ptr->gp_size = reg_size * (32 - info_ptr->first_gp_reg_save);\n+    first_gp = info_ptr->first_gp_reg_save;\n+\n+  info_ptr->gp_size = reg_size * (32 - first_gp);\n \n   /* For the SPE, we have an additional upper 32-bits on each GPR.\n      Ideally we should save the entire 64-bits only when the upper\n@@ -14024,7 +14030,7 @@ rs6000_stack_info (void)\n \t    + info_ptr->parm_size);\n \n   if (TARGET_SPE_ABI && info_ptr->spe_64bit_regs_used != 0)\n-    info_ptr->spe_gp_size = 8 * (32 - info_ptr->first_gp_reg_save);\n+    info_ptr->spe_gp_size = 8 * (32 - first_gp);\n   else\n     info_ptr->spe_gp_size = 0;\n "}]}