{"sha": "b26c1f617c02b9a25f65a34abed58bfded990501", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI2YzFmNjE3YzAyYjlhMjVmNjVhMzRhYmVkNThiZmRlZDk5MDUwMQ==", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-05-21T16:54:29Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:15Z"}, "message": "compile locals per block", "tree": {"sha": "34391c32ffdb61d7e961aa7f00d3b1fe2fb4bb0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34391c32ffdb61d7e961aa7f00d3b1fe2fb4bb0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b26c1f617c02b9a25f65a34abed58bfded990501", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b26c1f617c02b9a25f65a34abed58bfded990501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b26c1f617c02b9a25f65a34abed58bfded990501", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b26c1f617c02b9a25f65a34abed58bfded990501/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3cb8c3cd9278693db8737614bdc2deaa6b5d3cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3cb8c3cd9278693db8737614bdc2deaa6b5d3cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3cb8c3cd9278693db8737614bdc2deaa6b5d3cc"}], "stats": {"total": 87, "additions": 63, "deletions": 24}, "files": [{"sha": "dfd1ac5a6ce226fefb6095266de3db4df7d41477", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 57, "deletions": 20, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b26c1f617c02b9a25f65a34abed58bfded990501/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b26c1f617c02b9a25f65a34abed58bfded990501/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=b26c1f617c02b9a25f65a34abed58bfded990501", "patch": "@@ -36,6 +36,30 @@ Compilation::go ()\n   return true;\n }\n \n+bool\n+Compilation::compileVarDecl (AST::LetStmt *stmt, std::vector<Bvariable *> &vars)\n+{\n+  AST::Type *type = stmt->has_type () ? stmt->type.get () : stmt->inferedType;\n+  translatedType = NULL;\n+  type->accept_vis (*this);\n+  if (translatedType == NULL)\n+    {\n+      rust_error_at (stmt->locus, \"failed to compile type for var decl\");\n+      return false;\n+    }\n+\n+  stmt->variables_pattern->accept_vis (*this);\n+  for (auto &pattern : patternBuffer)\n+    {\n+      auto var = backend->local_variable (currentFndecl, pattern.variable_ident,\n+\t\t\t\t\t  translatedType, NULL /*decl_var*/,\n+\t\t\t\t\t  false /*address_taken*/, stmt->locus);\n+      vars.push_back (var);\n+    }\n+  patternBuffer.clear ();\n+  return true;\n+}\n+\n void\n Compilation::visit (AST::Token &tok)\n {}\n@@ -412,19 +436,19 @@ Compilation::visit (AST::Function &function)\n \t  return;\n \t}\n \n-      auto before = letPatternBuffer.size ();\n+      auto before = patternBuffer.size ();\n       param.param_name->accept_vis (*this);\n-      if (letPatternBuffer.size () <= before)\n+      if (patternBuffer.size () <= before)\n \t{\n \t  rust_error_at (param.locus, \"failed to analyse parameter name\");\n \t  return;\n \t}\n \n-      auto numParamsPerType = letPatternBuffer.size () - before;\n+      auto numParamsPerType = patternBuffer.size () - before;\n       for (auto i = 0; i < numParamsPerType; i++)\n \t{\n-\t  auto paramName = letPatternBuffer.back ();\n-\t  letPatternBuffer.pop_back ();\n+\t  auto paramName = patternBuffer.back ();\n+\t  patternBuffer.pop_back ();\n \t  scope.Insert (paramName.variable_ident, param.type.get ());\n \n \t  parameters.push_back (\n@@ -451,6 +475,7 @@ Compilation::visit (AST::Function &function)\n   Bfunction *fndecl\n     = backend->function (fntype, function.function_name, \"\" /* asm_name */,\n \t\t\t 0 /* flags */, function.locus);\n+  currentFndecl = fndecl;\n \n   // setup the params\n   std::vector<Bvariable *> param_vars;\n@@ -467,22 +492,43 @@ Compilation::visit (AST::Function &function)\n       return;\n     }\n \n-  // walk the expression body\n   std::vector<Bvariable *> vars;\n-  auto code_block\n-    = backend->block (fndecl, NULL, vars, function.locus, Location ());\n-  for (auto &stmt : function.function_body->statements)\n+  for (auto &decl : function.locals)\n     {\n-      stmt->accept_vis (*this);\n+      if (!compileVarDecl (decl, vars))\n+\t{\n+\t  rust_error_at (decl->locus, \"failed to compile var decl\");\n+\t  return;\n+\t}\n+      // TODO add to scope\n     }\n \n+  // is null for top level functions - nested functions will have an enclosing\n+  // scope\n+  Bblock *enclosingScope = NULL;\n+  Location start_location = function.locus;\n+  Location end_location;\n+  if (function.function_body->statements.size () > 0)\n+    {\n+      end_location\n+\t= function.function_body->statements.back ()->get_locus_slow ();\n+    }\n+\n+  auto code_block = backend->block (fndecl, enclosingScope, vars,\n+\t\t\t\t    start_location, end_location);\n   auto body = backend->block_statement (code_block);\n+\n   if (!backend->function_set_body (fndecl, body))\n     {\n       rust_error_at (function.locus, \"failed to set body to function\");\n       return;\n     }\n \n+  for (auto &stmt : function.function_body->statements)\n+    {\n+      stmt->accept_vis (*this);\n+    }\n+\n   func_decls.push_back (fndecl);\n   scope.Pop ();\n }\n@@ -598,7 +644,7 @@ void\n Compilation::visit (AST::IdentifierPattern &pattern)\n {\n   printf (\"IdentifierPattern: %s\\n\", pattern.as_string ().c_str ());\n-  letPatternBuffer.push_back (pattern);\n+  patternBuffer.push_back (pattern);\n }\n \n void\n@@ -669,15 +715,6 @@ void\n Compilation::visit (AST::LetStmt &stmt)\n {\n   printf (\"Within LetStmt: %s\\n\", stmt.as_string ().c_str ());\n-\n-  stmt.variables_pattern->accept_vis (*this);\n-\n-  for (auto it = letPatternBuffer.begin (); it != letPatternBuffer.end (); it++)\n-    {\n-      // scope.Insert (it->first., stmt.type.get ());\n-    }\n-\n-  letPatternBuffer.clear ();\n }\n \n void"}, {"sha": "2bc77d1e2f8f0bdd5271bf94ebd92e60d74908b1", "filename": "gcc/rust/backend/rust-compile.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b26c1f617c02b9a25f65a34abed58bfded990501/gcc%2Frust%2Fbackend%2Frust-compile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b26c1f617c02b9a25f65a34abed58bfded990501/gcc%2Frust%2Fbackend%2Frust-compile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.h?ref=b26c1f617c02b9a25f65a34abed58bfded990501", "patch": "@@ -223,19 +223,21 @@ class Compilation : public AST::ASTVisitor\n \n private:\n   Compilation (AST::Crate &crate, Backend *backend);\n-\n   bool go ();\n \n-  Analysis::Scope<AST::Type *> scope;\n   AST::Crate &crate;\n   Backend *backend;\n \n-  /* we need lots of members to be buffers for translation of the AST */\n-  std::vector<AST::IdentifierPattern> letPatternBuffer;\n+  // utils\n+  bool compileVarDecl (AST::LetStmt *stmt, std::vector<Bvariable *> &vars);\n \n+  // state\n+  Analysis::Scope<AST::Type *> scope;\n+  std::vector<AST::IdentifierPattern> patternBuffer;\n   ::Bfunction *currentFndecl;\n   ::Btype *translatedType;\n \n+  // careful these are the vectors we pass into the GCC middle-end\n   std::vector< ::Btype *> type_decls;\n   std::vector< ::Bvariable *> var_decls;\n   std::vector< ::Bexpression *> const_decls;"}]}