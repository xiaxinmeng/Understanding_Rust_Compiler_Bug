{"sha": "bf44d792784d0c44eba481754702916ed95c0469", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY0NGQ3OTI3ODRkMGM0NGViYTQ4MTc1NDcwMjkxNmVkOTVjMDQ2OQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-05-26T17:12:20Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-05-26T17:12:20Z"}, "message": "sparc.h (FUNCTION_VALUE, [...]): Remove macros.\n\n\t* config/sparc/sparc.h (FUNCTION_VALUE, FUNCTION_OUTGOING_VALUE,\n\tLIBCALL_VALUE, FUNCTION_VALUE_REGNO_P): Remove macros.\n\t* config/sparc/sparc-protos.h (function_value): Remove declaration.\n\t* config/sparc/sparc.c (sparc_function_value, sparc_libcall_value,\n\tsparc_function_value_regno_p): New functions.\n\t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE,\n\tTARGET_FUNCTION_VALUE_REGNO_P): Define.\n\t(function_value): Rename to...\n\t(sparc_function_value_1): ... this. Make static. Change 'incoming_p'\n\targument to 'outgoing'.\n\t(function_arg_record_value, function_arg_union_value,\n\tfunction_arg_vector_value): Update comment.\n\nFrom-SVN: r159890", "tree": {"sha": "0cbb420c61f566d435de8b6b2279467462a0a435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cbb420c61f566d435de8b6b2279467462a0a435"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf44d792784d0c44eba481754702916ed95c0469", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf44d792784d0c44eba481754702916ed95c0469", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf44d792784d0c44eba481754702916ed95c0469", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf44d792784d0c44eba481754702916ed95c0469/comments", "author": null, "committer": null, "parents": [{"sha": "4ad2e1ec08ab363f5137a84169040792844b56c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ad2e1ec08ab363f5137a84169040792844b56c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ad2e1ec08ab363f5137a84169040792844b56c5"}], "stats": {"total": 117, "additions": 73, "deletions": 44}, "files": [{"sha": "a6da7120eb5cff135d11fdbf08e0ad2b168bb4fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf44d792784d0c44eba481754702916ed95c0469/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf44d792784d0c44eba481754702916ed95c0469/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf44d792784d0c44eba481754702916ed95c0469", "patch": "@@ -1,3 +1,18 @@\n+2010-05-26  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/sparc/sparc.h (FUNCTION_VALUE, FUNCTION_OUTGOING_VALUE,\n+\tLIBCALL_VALUE, FUNCTION_VALUE_REGNO_P): Remove macros.\n+\t* config/sparc/sparc-protos.h (function_value): Remove declaration.\n+\t* config/sparc/sparc.c (sparc_function_value, sparc_libcall_value,\n+\tsparc_function_value_regno_p): New functions.\n+\t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE,\n+\tTARGET_FUNCTION_VALUE_REGNO_P): Define.\n+\t(function_value): Rename to...\n+\t(sparc_function_value_1): ... this. Make static. Change 'incoming_p'\n+\targument to 'outgoing'.\n+\t(function_arg_record_value, function_arg_union_value,\n+\tfunction_arg_vector_value): Update comment.\n+\n 2010-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* dwarf2out.c (struct dw_fde_struct): Reorder flags."}, {"sha": "fd602ccd200e1e844e0dc06765cc50e9ec812a62", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf44d792784d0c44eba481754702916ed95c0469/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf44d792784d0c44eba481754702916ed95c0469/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=bf44d792784d0c44eba481754702916ed95c0469", "patch": "@@ -25,7 +25,6 @@ along with GCC; see the file COPYING3.  If not see\n #define __SPARC_PROTOS_H__\n \n #ifdef TREE_CODE\n-extern struct rtx_def *function_value (const_tree, enum machine_mode, int);\n extern void function_arg_advance (CUMULATIVE_ARGS *,\n \t\t\t\t  enum machine_mode, tree, int);\n extern struct rtx_def *function_arg (const CUMULATIVE_ARGS *,"}, {"sha": "9e33c740b01501c0eab82f121de6c19673653a9c", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 58, "deletions": 15, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf44d792784d0c44eba481754702916ed95c0469/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf44d792784d0c44eba481754702916ed95c0469/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=bf44d792784d0c44eba481754702916ed95c0469", "patch": "@@ -400,6 +400,9 @@ static const char *get_some_local_dynamic_name (void);\n static int get_some_local_dynamic_name_1 (rtx *, void *);\n static bool sparc_rtx_costs (rtx, int, int, int *, bool);\n static bool sparc_promote_prototypes (const_tree);\n+static rtx sparc_function_value (const_tree, const_tree, bool);\n+static rtx sparc_libcall_value (enum machine_mode, const_rtx);\n+static bool sparc_function_value_regno_p (const unsigned int);\n static rtx sparc_struct_value_rtx (tree, int);\n static enum machine_mode sparc_promote_function_mode (const_tree, enum machine_mode,\n \t\t\t\t\t\t      int *, const_tree, int);\n@@ -532,6 +535,13 @@ static bool fpu_option_set = false;\n #undef TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES sparc_promote_prototypes\n \n+#undef TARGET_FUNCTION_VALUE\n+#define TARGET_FUNCTION_VALUE sparc_function_value\n+#undef TARGET_LIBCALL_VALUE\n+#define TARGET_LIBCALL_VALUE sparc_libcall_value\n+#undef TARGET_FUNCTION_VALUE_REGNO_P\n+#define TARGET_FUNCTION_VALUE_REGNO_P sparc_function_value_regno_p\n+\n #undef TARGET_STRUCT_VALUE_RTX\n #define TARGET_STRUCT_VALUE_RTX sparc_struct_value_rtx\n #undef TARGET_RETURN_IN_MEMORY\n@@ -5150,10 +5160,10 @@ function_arg_record_value_2 (const_tree type, HOST_WIDE_INT startbitpos,\n     }\n }\n \n-/* Used by function_arg and function_value to implement the complex\n+/* Used by function_arg and sparc_function_value_1 to implement the complex\n    conventions of the 64-bit ABI for passing and returning structures.\n-   Return an expression valid as a return value for the two macros\n-   FUNCTION_ARG and FUNCTION_VALUE.\n+   Return an expression valid as a return value for the FUNCTION_ARG\n+   and TARGET_FUNCTION_VALUE.\n \n    TYPE is the data type of the argument (as a tree).\n     This is null for libcalls where that information may\n@@ -5251,10 +5261,10 @@ function_arg_record_value (const_tree type, enum machine_mode mode,\n   return parms.ret;\n }\n \n-/* Used by function_arg and function_value to implement the conventions\n+/* Used by function_arg and sparc_function_value_1 to implement the conventions\n    of the 64-bit ABI for passing and returning unions.\n-   Return an expression valid as a return value for the two macros\n-   FUNCTION_ARG and FUNCTION_VALUE.\n+   Return an expression valid as a return value for the FUNCTION_ARG\n+   and TARGET_FUNCTION_VALUE.\n \n    SIZE is the size in bytes of the union.\n    MODE is the argument's machine mode.\n@@ -5289,10 +5299,10 @@ function_arg_union_value (int size, enum machine_mode mode, int slotno,\n   return regs;\n }\n \n-/* Used by function_arg and function_value to implement the conventions\n+/* Used by function_arg and sparc_function_value_1 to implement the conventions\n    for passing and returning large (BLKmode) vectors.\n-   Return an expression valid as a return value for the two macros\n-   FUNCTION_ARG and FUNCTION_VALUE.\n+   Return an expression valid as a return value for the FUNCTION_ARG\n+   and TARGET_FUNCTION_VALUE.\n \n    SIZE is the size in bytes of the vector (at least 8 bytes).\n    REGNO is the FP hard register the vector will be passed in.  */\n@@ -5747,17 +5757,18 @@ sparc_struct_value_rtx (tree fndecl, int incoming)\n     }\n }\n \n-/* Handle FUNCTION_VALUE, FUNCTION_OUTGOING_VALUE, and LIBCALL_VALUE macros.\n+/* Handle TARGET_FUNCTION_VALUE, and TARGET_LIBCALL_VALUE target hook.\n    For v9, function return values are subject to the same rules as arguments,\n    except that up to 32 bytes may be returned in registers.  */\n \n-rtx\n-function_value (const_tree type, enum machine_mode mode, int incoming_p)\n+static rtx\n+sparc_function_value_1 (const_tree type, enum machine_mode mode,\n+\t\t\tbool outgoing)\n {\n   /* Beware that the two values are swapped here wrt function_arg.  */\n-  int regbase = (incoming_p\n-\t\t ? SPARC_OUTGOING_INT_ARG_FIRST\n-\t\t : SPARC_INCOMING_INT_ARG_FIRST);\n+  int regbase = (outgoing\n+\t\t ? SPARC_INCOMING_INT_ARG_FIRST\n+\t\t : SPARC_OUTGOING_INT_ARG_FIRST);\n   enum mode_class mclass = GET_MODE_CLASS (mode);\n   int regno;\n \n@@ -5840,6 +5851,38 @@ function_value (const_tree type, enum machine_mode mode, int incoming_p)\n   return gen_rtx_REG (mode, regno);\n }\n \n+/* Handle TARGET_FUNCTION_VALUE.\n+\n+   On SPARC the value is found in the first \"output\" register, but the called\n+   function leaves it in the first \"input\" register.  */\n+\n+static rtx\n+sparc_function_value (const_tree valtype,\n+\t\t      const_tree fn_decl_or_type ATTRIBUTE_UNUSED,\n+\t\t      bool outgoing)\n+{\n+  return sparc_function_value_1 (valtype, TYPE_MODE (valtype), outgoing);\n+}\n+\n+/* Handle TARGET_LIBCALL_VALUE.  */\n+\n+static rtx\n+sparc_libcall_value (enum machine_mode mode,\n+\t\t     const_rtx fun ATTRIBUTE_UNUSED)\n+{\n+  return sparc_function_value_1 (NULL_TREE, mode, false);\n+}\n+\n+/* Handle FUNCTION_VALUE_REGNO_P.  \n+   On SPARC, the first \"output\" reg is used for integer values, and\n+   the first floating point register is used for floating point values.  */\n+\n+static bool\n+sparc_function_value_regno_p (const unsigned int regno)\n+{\n+  return (regno == 8 || regno == 32);\n+}\n+\n /* Do what is necessary for `va_start'.  We look at the current function\n    to determine if stdarg or varargs is used and return the address of\n    the first unnamed parameter.  */"}, {"sha": "6c28e9838c8a59b71ba21a0af11bb17524e17c49", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf44d792784d0c44eba481754702916ed95c0469/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf44d792784d0c44eba481754702916ed95c0469/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=bf44d792784d0c44eba481754702916ed95c0469", "patch": "@@ -1419,34 +1419,6 @@ extern char leaf_reg_remap[];\n #define LOCAL_REGNO(REGNO) \\\n   ((REGNO) >= 16 && (REGNO) <= 31)\n \n-/* Define how to find the value returned by a function.\n-   VALTYPE is the data type of the value (as a tree).\n-   If the precise function being called is known, FUNC is its FUNCTION_DECL;\n-   otherwise, FUNC is 0.  */\n-\n-/* On SPARC the value is found in the first \"output\" register.  */\n-\n-#define FUNCTION_VALUE(VALTYPE, FUNC) \\\n-  function_value ((VALTYPE), TYPE_MODE (VALTYPE), 1)\n-\n-/* But the called function leaves it in the first \"input\" register.  */\n-\n-#define FUNCTION_OUTGOING_VALUE(VALTYPE, FUNC) \\\n-  function_value ((VALTYPE), TYPE_MODE (VALTYPE), 0)\n-\n-/* Define how to find the value returned by a library function\n-   assuming the value has mode MODE.  */\n-\n-#define LIBCALL_VALUE(MODE) \\\n-  function_value (NULL_TREE, (MODE), 1)\n-\n-/* 1 if N is a possible register number for a function value\n-   as seen by the caller.\n-   On SPARC, the first \"output\" reg is used for integer values,\n-   and the first floating point register is used for floating point values.  */\n-\n-#define FUNCTION_VALUE_REGNO_P(N) ((N) == 8 || (N) == 32)\n-\n /* Define the size of space to allocate for the return value of an\n    untyped_call.  */\n "}]}