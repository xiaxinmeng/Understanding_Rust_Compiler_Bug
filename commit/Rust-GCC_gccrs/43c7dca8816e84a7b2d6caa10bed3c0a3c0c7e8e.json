{"sha": "43c7dca8816e84a7b2d6caa10bed3c0a3c0c7e8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNjN2RjYTg4MTZlODRhN2IyZDZjYWExMGJlZDNjMGEzYzBjN2U4ZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-07-05T07:49:16Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-07-05T07:49:16Z"}, "message": "target-insns.def (untyped_call, [...]): New targetm instruction patterns.\n\ngcc/\n\t* target-insns.def (untyped_call, untyped_return): New targetm\n\tinstruction patterns.\n\t* builtins.c (expand_builtin_apply): Use them instead of\n\tHAVE_*/gen_* interface.\n\t(result_vector): Define unconditionally.\n\nFrom-SVN: r225423", "tree": {"sha": "6995c7c2cbb0c52c8f244f7d0153fd5b54927567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6995c7c2cbb0c52c8f244f7d0153fd5b54927567"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43c7dca8816e84a7b2d6caa10bed3c0a3c0c7e8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43c7dca8816e84a7b2d6caa10bed3c0a3c0c7e8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43c7dca8816e84a7b2d6caa10bed3c0a3c0c7e8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43c7dca8816e84a7b2d6caa10bed3c0a3c0c7e8e/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "95a3fb9de80862675c209a5db85fb8bffd1640e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95a3fb9de80862675c209a5db85fb8bffd1640e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95a3fb9de80862675c209a5db85fb8bffd1640e6"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "da88d10d24a12c70cef6807fc616c4acb32f778e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43c7dca8816e84a7b2d6caa10bed3c0a3c0c7e8e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43c7dca8816e84a7b2d6caa10bed3c0a3c0c7e8e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43c7dca8816e84a7b2d6caa10bed3c0a3c0c7e8e", "patch": "@@ -1,3 +1,11 @@\n+2015-07-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* target-insns.def (untyped_call, untyped_return): New targetm\n+\tinstruction patterns.\n+\t* builtins.c (expand_builtin_apply): Use them instead of\n+\tHAVE_*/gen_* interface.\n+\t(result_vector): Define unconditionally.\n+\n 2015-07-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* target-insns.def (builtin_longjmp, builtin_setjmp_receiver)"}, {"sha": "f35469493d6e6f2cffb55776612c08b194b862c3", "filename": "gcc/builtins.c", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43c7dca8816e84a7b2d6caa10bed3c0a3c0c7e8e/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43c7dca8816e84a7b2d6caa10bed3c0a3c0c7e8e/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=43c7dca8816e84a7b2d6caa10bed3c0a3c0c7e8e", "patch": "@@ -104,9 +104,7 @@ static int target_char_cast (tree, char *);\n static rtx get_memory_rtx (tree, tree);\n static int apply_args_size (void);\n static int apply_result_size (void);\n-#if defined (HAVE_untyped_call) || defined (HAVE_untyped_return)\n static rtx result_vector (int, rtx);\n-#endif\n static void expand_builtin_prefetch (tree);\n static rtx expand_builtin_apply_args (void);\n static rtx expand_builtin_apply_args_1 (void);\n@@ -1448,7 +1446,6 @@ apply_result_size (void)\n   return size;\n }\n \n-#if defined (HAVE_untyped_call) || defined (HAVE_untyped_return)\n /* Create a vector describing the result block RESULT.  If SAVEP is true,\n    the result block is used to save the values; otherwise it is used to\n    restore the values.  */\n@@ -1477,7 +1474,6 @@ result_vector (int savep, rtx result)\n       }\n   return gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (nelts, savevec));\n }\n-#endif /* HAVE_untyped_call or HAVE_untyped_return */\n \n /* Save the state required to perform an untyped call with the same\n    arguments as were passed to the current function.  */\n@@ -1698,12 +1694,13 @@ expand_builtin_apply (rtx function, rtx arguments, rtx argsize)\n     function = memory_address (FUNCTION_MODE, function);\n \n   /* Generate the actual call instruction and save the return value.  */\n-#ifdef HAVE_untyped_call\n-  if (HAVE_untyped_call)\n-    emit_call_insn (gen_untyped_call (gen_rtx_MEM (FUNCTION_MODE, function),\n-\t\t\t\t      result, result_vector (1, result)));\n+  if (targetm.have_untyped_call ())\n+    {\n+      rtx mem = gen_rtx_MEM (FUNCTION_MODE, function);\n+      emit_call_insn (targetm.gen_untyped_call (mem, result,\n+\t\t\t\t\t\tresult_vector (1, result)));\n+    }\n   else\n-#endif\n #ifdef HAVE_call_value\n   if (HAVE_call_value)\n     {\n@@ -1767,14 +1764,13 @@ expand_builtin_return (rtx result)\n   apply_result_size ();\n   result = gen_rtx_MEM (BLKmode, result);\n \n-#ifdef HAVE_untyped_return\n-  if (HAVE_untyped_return)\n+  if (targetm.have_untyped_return ())\n     {\n-      emit_jump_insn (gen_untyped_return (result, result_vector (0, result)));\n+      rtx vector = result_vector (0, result);\n+      emit_jump_insn (targetm.gen_untyped_return (result, vector));\n       emit_barrier ();\n       return;\n     }\n-#endif\n \n   /* Restore the return value and note that each value is used.  */\n   size = 0;"}, {"sha": "61ec9a7de3b56d80c888d68281c8ae518fc8aefb", "filename": "gcc/target-insns.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43c7dca8816e84a7b2d6caa10bed3c0a3c0c7e8e/gcc%2Ftarget-insns.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43c7dca8816e84a7b2d6caa10bed3c0a3c0c7e8e/gcc%2Ftarget-insns.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-insns.def?ref=43c7dca8816e84a7b2d6caa10bed3c0a3c0c7e8e", "patch": "@@ -50,3 +50,5 @@ DEF_TARGET_INSN (sibcall_epilogue, (void))\n DEF_TARGET_INSN (simple_return, (void))\n DEF_TARGET_INSN (store_multiple, (rtx x0, rtx x1, rtx x2))\n DEF_TARGET_INSN (tablejump, (rtx x0, rtx x1))\n+DEF_TARGET_INSN (untyped_call, (rtx x0, rtx x1, rtx x2))\n+DEF_TARGET_INSN (untyped_return, (rtx x0, rtx x1))"}]}