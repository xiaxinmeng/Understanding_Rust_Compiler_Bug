{"sha": "66e5d61fba14cd936e0183ba014703c196269590", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZlNWQ2MWZiYTE0Y2Q5MzZlMDE4M2JhMDE0NzAzYzE5NjI2OTU5MA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-11-25T10:09:48Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-11-25T10:09:48Z"}, "message": "2003-11-25  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/DatagramSocket.java\n\t(factory): Made private.\n\t(closed): Removed.\n\t(DatagramSocket): Check impl argument, use constructor with\n\tSocketAddress argument.\n\t(close): Set impl to null, use isClosed().\n\t(isClosed): Check for impl == null.\n\t(getLocalAddress): Use isClosed().\n\t(getLocalPort): Check if socket is closed.\n\t(getSoTimeout): Likewise.\n\t(setSoTimeout): Likewise.\n\t(getSendBufferSize): Likewise.\n\t(setSendBufferSize): Likewise.\n\t(getReceiveBufferSize): Likewise.\n\t(setReceiveBufferSize): Likewise.\n\t(receive): Likewise.\n\t(send): Likewise.\n\t(bind): Likewise.\n\t(connect): Likewise.\n\t(setReuseAddress): Likewise.\n\t(getReuseAddress): Likewise.\n\t(setBroadcast): Likewise.\n\t(getBroadcast): Likewise.\n\t(setTrafficClass): Likewise.\n\t(getTrafficClass): Likewise.\n\t* java/net/MulticastSocket.java\n\t(getInterface): Check if socket is closed.\n\t(getTTL): Likewise.\n\t(getTimeToLive): Likewise.\n\t(setInterface): Likewise.\n\t(setNetworkInterface): Likewise.\n\t(getNetworkInterface): Likewise.\n\t(setLoopbackMode): Likewise.\n\t(setTTL): Likewise.\n\t(setTimeToLive): Likewise.\n\t(joinGroup): Likewise.\n\t(leaveGroup): Likewise.\n\t(send): Likewise.\n\t* java/net/ServerSocket.java\n\t(closed): Removed.\n\t(close): Check if socket is closed, set impl to null.\n\t(isClosed): Check impl == null;\n\t(ServerSocket): Check impl argument.\n\t(getInetAddress): Check if socket is bound.\n\t(getLocalPort): Likewise.\n\t(getLocalSocketAddress): Likewise.\n\t(bind): Check if socket is closed.\n\t(implAccept): Likewise.\n\t(setSoTimeout): Likewise.\n\t(getSoTimeout): Likewise.\n\t(setReuseAddress): Likewise.\n\t(getReuseAddress): Likewise.\n\t(setReceiveBufferSize): Likewise.\n\t(getReceiveBufferSize): Likewise.\n\t(toString): Make output compliant to JDK 1.4.2.\n\t* java/net/Socket.java\n\t(closed): Removed.\n\t(Socket): Fixed documentation.\n\t(connect): Check if socket is closed, changed exception text,\n\tfixed documentation.\n\t(getInputStream): Check of socket is closed  and connected.\n\t(getOutputStream): Likewise.\n\t(bind): Check if socket is closed.\n\t(setTcpNoDelay): Likewise.\n\t(getTcpNoDelay): Likewise.\n\t(setSoLinger): Likewise.\n\t(getSoLinger): Likewise.\n\t(sendUrgentData): Likewise.\n\t(setOOBInline): Likewise.\n\t(getOOBInline): Likewise.\n\t(setSoTimeout): Likewise.\n\t(getSoTimeout): Likewise.\n\t(setSendBufferSize): Likewise.\n\t(getSendBufferSize): Likewise.\n\t(setReceiveBufferSize): Likewise.\n\t(getReceiveBufferSize): Likewise.\n\t(setKeepAlive): Likewise.\n\t(getKeepAlive): Likewise.\n\t(close): Likewise.\n\t(shutdownInput): Likewise.\n\t(shutdownOutput): Likewise.\n\t(getReuseAddress): Likewise.\n\t(getTrafficClass): Likewise.\n\t(setTrafficClass): Likewise.\n\t(isClosed): Check impl == null.\n\t(toString): Added missing ']'.\n\nFrom-SVN: r73918", "tree": {"sha": "5913f733c032c45af5ae571b8e9319e4d4101b1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5913f733c032c45af5ae571b8e9319e4d4101b1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66e5d61fba14cd936e0183ba014703c196269590", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66e5d61fba14cd936e0183ba014703c196269590", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66e5d61fba14cd936e0183ba014703c196269590", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66e5d61fba14cd936e0183ba014703c196269590/comments", "author": null, "committer": null, "parents": [{"sha": "dcb5fe8b43cd9eaddbfe4bfae93653e817867420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcb5fe8b43cd9eaddbfe4bfae93653e817867420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcb5fe8b43cd9eaddbfe4bfae93653e817867420"}], "stats": {"total": 461, "additions": 354, "deletions": 107}, "files": [{"sha": "660c471058c83025405e4e3c73c0a15f3fc523c5", "filename": "libjava/ChangeLog", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e5d61fba14cd936e0183ba014703c196269590/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e5d61fba14cd936e0183ba014703c196269590/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=66e5d61fba14cd936e0183ba014703c196269590", "patch": "@@ -1,3 +1,92 @@\n+2003-11-25  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/DatagramSocket.java\n+\t(factory): Made private.\n+\t(closed): Removed.\n+\t(DatagramSocket): Check impl argument, use constructor with\n+\tSocketAddress argument.\n+\t(close): Set impl to null, use isClosed().\n+\t(isClosed): Check for impl == null.\n+\t(getLocalAddress): Use isClosed().\n+\t(getLocalPort): Check if socket is closed.\n+\t(getSoTimeout): Likewise.\n+\t(setSoTimeout): Likewise.\n+\t(getSendBufferSize): Likewise.\n+\t(setSendBufferSize): Likewise.\n+\t(getReceiveBufferSize): Likewise.\n+\t(setReceiveBufferSize): Likewise.\n+\t(receive): Likewise.\n+\t(send): Likewise.\n+\t(bind): Likewise.\n+\t(connect): Likewise.\n+\t(setReuseAddress): Likewise.\n+\t(getReuseAddress): Likewise.\n+\t(setBroadcast): Likewise.\n+\t(getBroadcast): Likewise.\n+\t(setTrafficClass): Likewise.\n+\t(getTrafficClass): Likewise.\n+\t* java/net/MulticastSocket.java\n+\t(getInterface): Check if socket is closed.\n+\t(getTTL): Likewise.\n+\t(getTimeToLive): Likewise.\n+\t(setInterface): Likewise.\n+\t(setNetworkInterface): Likewise.\n+\t(getNetworkInterface): Likewise.\n+\t(setLoopbackMode): Likewise.\n+\t(setTTL): Likewise.\n+\t(setTimeToLive): Likewise.\n+\t(joinGroup): Likewise.\n+\t(leaveGroup): Likewise.\n+\t(send): Likewise.\n+\t* java/net/ServerSocket.java\n+\t(closed): Removed.\n+\t(close): Check if socket is closed, set impl to null.\n+\t(isClosed): Check impl == null;\n+\t(ServerSocket): Check impl argument.\n+\t(getInetAddress): Check if socket is bound.\n+\t(getLocalPort): Likewise.\n+\t(getLocalSocketAddress): Likewise.\n+\t(bind): Check if socket is closed.\n+\t(implAccept): Likewise.\n+\t(setSoTimeout): Likewise.\n+\t(getSoTimeout): Likewise.\n+\t(setReuseAddress): Likewise.\n+\t(getReuseAddress): Likewise.\n+\t(setReceiveBufferSize): Likewise.\n+\t(getReceiveBufferSize): Likewise.\n+\t(toString): Make output compliant to JDK 1.4.2.\n+\t* java/net/Socket.java\n+\t(closed): Removed.\n+\t(Socket): Fixed documentation.\n+\t(connect): Check if socket is closed, changed exception text,\n+\tfixed documentation.\n+\t(getInputStream): Check of socket is closed  and connected.\n+\t(getOutputStream): Likewise.\n+\t(bind): Check if socket is closed.\n+\t(setTcpNoDelay): Likewise.\n+\t(getTcpNoDelay): Likewise.\n+\t(setSoLinger): Likewise.\n+\t(getSoLinger): Likewise.\n+\t(sendUrgentData): Likewise.\n+\t(setOOBInline): Likewise.\n+\t(getOOBInline): Likewise.\n+\t(setSoTimeout): Likewise.\n+\t(getSoTimeout): Likewise.\n+\t(setSendBufferSize): Likewise.\n+\t(getSendBufferSize): Likewise.\n+\t(setReceiveBufferSize): Likewise.\n+\t(getReceiveBufferSize): Likewise.\n+\t(setKeepAlive): Likewise.\n+\t(getKeepAlive): Likewise.\n+\t(close): Likewise.\n+\t(shutdownInput): Likewise.\n+\t(shutdownOutput): Likewise.\n+\t(getReuseAddress): Likewise.\n+\t(getTrafficClass): Likewise.\n+\t(setTrafficClass): Likewise.\n+\t(isClosed): Check impl == null.\n+\t(toString): Added missing ']'.\n+\n 2003-11-24  Tom Tromey  <tromey@redhat.com>\n \n \t* Makefile.in: Rebuilt."}, {"sha": "766c717111a8d20bec8e82cfe9d7c740034b6b94", "filename": "libjava/java/net/DatagramSocket.java", "status": "modified", "additions": 54, "deletions": 39, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e5d61fba14cd936e0183ba014703c196269590/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e5d61fba14cd936e0183ba014703c196269590/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramSocket.java?ref=66e5d61fba14cd936e0183ba014703c196269590", "patch": "@@ -67,7 +67,7 @@\n    * This is the user DatagramSocketImplFactory for this class.  If this\n    * variable is null, a default factory is used.\n    */\n-  static DatagramSocketImplFactory factory;\n+  private static DatagramSocketImplFactory factory;\n \t  \n   /**\n    * This is the implementation object used by this socket.\n@@ -84,11 +84,6 @@\n    */\n   private int remotePort = -1;\n \n-  /**\n-   * Indicates when the socket is closed.\n-   */\n-  private boolean closed = false;\n-\n   /**\n    * Creates a <code>DatagramSocket</code> from a specified \n    * <code>DatagramSocketImpl</code> instance\n@@ -100,6 +95,9 @@\n    */\n   protected DatagramSocket (DatagramSocketImpl impl)\n   {\n+    if (impl == null)\n+      throw new NullPointerException(\"impl may not be null\");\n+\n     this.impl = impl;\n     this.remoteAddress = null;\n     this.remotePort = -1;\n@@ -115,7 +113,7 @@ protected DatagramSocket (DatagramSocketImpl impl)\n    */\n   public DatagramSocket() throws SocketException\n   {\n-    this(0, null);\n+    this(new InetSocketAddress(0));\n   }\n \n   /**\n@@ -130,7 +128,7 @@ public DatagramSocket() throws SocketException\n    */\n   public DatagramSocket(int port) throws SocketException\n   {\n-    this(port, null);\n+    this(new InetSocketAddress(port));\n   }\n \n   /**\n@@ -226,12 +224,12 @@ public DatagramSocket (SocketAddress address) throws SocketException\n    */\n   public void close()\n   {\n-    if (!closed)\n+    if (!isClosed())\n       {\n         impl.close();\n+        impl = null;\n         remoteAddress = null;\n         remotePort = -1;\n-        closed = true;\n       }\n   }\n \n@@ -270,8 +268,7 @@ public int getPort()\n    */\n   public InetAddress getLocalAddress()\n   {\n-    if (impl == null\n-\t|| closed)\n+    if (isClosed())\n       return null;\n     \n     InetAddress localAddr;\n@@ -303,6 +300,9 @@ public InetAddress getLocalAddress()\n    */\n   public int getLocalPort()\n   {\n+    if (isClosed())\n+      return -1;\n+\t      \n     return impl.getLocalPort();\n   }\n \n@@ -318,8 +318,8 @@ public int getLocalPort()\n    */\n   public synchronized int getSoTimeout() throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException (\"Cannot initialize Socket implementation\");\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n \n     Object timeout = impl.getOption(SocketOptions.SO_TIMEOUT);\n \n@@ -342,6 +342,9 @@ public synchronized int getSoTimeout() throws SocketException\n    */\n   public synchronized void setSoTimeout(int timeout) throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n     if (timeout < 0)\n       throw new IllegalArgumentException(\"Invalid timeout: \" + timeout);\n \n@@ -361,8 +364,8 @@ public synchronized void setSoTimeout(int timeout) throws SocketException\n    */\n   public int getSendBufferSize() throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException (\"Cannot initialize Socket implementation\");\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n \n     Object obj = impl.getOption(SocketOptions.SO_SNDBUF);\n \n@@ -386,6 +389,9 @@ public int getSendBufferSize() throws SocketException\n    */\n   public void setSendBufferSize(int size) throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n     if (size < 0)\n       throw new IllegalArgumentException(\"Buffer size is less than 0\");\n   \n@@ -405,8 +411,8 @@ public void setSendBufferSize(int size) throws SocketException\n    */\n   public int getReceiveBufferSize() throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException (\"Cannot initialize Socket implementation\");\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n \n     Object obj = impl.getOption(SocketOptions.SO_RCVBUF);\n   \n@@ -430,8 +436,8 @@ public int getReceiveBufferSize() throws SocketException\n    */\n   public void setReceiveBufferSize(int size) throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException (\"Cannot initialize Socket implementation\");\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n \n     if (size < 0)\n       throw new IllegalArgumentException(\"Buffer size is less than 0\");\n@@ -514,12 +520,13 @@ public void disconnect()\n    */\n   public synchronized void receive(DatagramPacket p) throws IOException\n   {\n-    if (impl == null)\n-      throw new IOException (\"Cannot initialize Socket implementation\");\n-\n-    if (remoteAddress != null && remoteAddress.isMulticastAddress ())\n-      throw new IOException (\n-        \"Socket connected to a multicast address my not receive\");\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n+    if (remoteAddress != null\n+        && remoteAddress.isMulticastAddress())\n+      throw new IOException\n+        (\"Socket connected to a multicast address my not receive\");\n \n     if (getChannel() != null\n         && !getChannel().isBlocking ())\n@@ -549,6 +556,9 @@ public synchronized void receive(DatagramPacket p) throws IOException\n    */\n   public void send(DatagramPacket p) throws IOException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n     // JDK1.2: Don't do security checks if socket is connected; see jdk1.2 api.\n     SecurityManager s = System.getSecurityManager();\n     if (s != null && !isConnected ())\n@@ -593,6 +603,9 @@ public void send(DatagramPacket p) throws IOException\n   public void bind (SocketAddress address)\n     throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n     if (! (address instanceof InetSocketAddress))\n       throw new IllegalArgumentException ();\n \n@@ -612,7 +625,7 @@ public void bind (SocketAddress address)\n    */\n   public boolean isClosed()\n   {\n-    return closed;\n+    return impl == null;\n   }\n \n   /**\n@@ -637,6 +650,8 @@ public DatagramChannel getChannel()\n    */\n   public void connect (SocketAddress address) throws SocketException\n   {\n+    if (isClosed())\n+    \n     if ( !(address instanceof InetSocketAddress) )\n       throw new IllegalArgumentException (\n \t\t      \"SocketAddress is not InetSocketAddress\");\n@@ -721,8 +736,8 @@ public SocketAddress getLocalSocketAddress()\n    */\n   public void setReuseAddress(boolean on) throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException (\"Cannot initialize Socket implementation\");\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n \n     impl.setOption (SocketOptions.SO_REUSEADDR, new Boolean (on));\n   }\n@@ -736,8 +751,8 @@ public void setReuseAddress(boolean on) throws SocketException\n    */\n   public boolean getReuseAddress() throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException (\"Cannot initialize Socket implementation\");\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n \n     Object obj = impl.getOption (SocketOptions.SO_REUSEADDR);\n   \n@@ -758,8 +773,8 @@ public boolean getReuseAddress() throws SocketException\n    */\n   public void setBroadcast(boolean on) throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException (\"Cannot initialize Socket implementation\");\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n \n     impl.setOption (SocketOptions.SO_BROADCAST, new Boolean (on));\n   }\n@@ -773,8 +788,8 @@ public void setBroadcast(boolean on) throws SocketException\n    */\n   public boolean getBroadcast() throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException (\"Cannot initialize Socket implementation\");\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n \n     Object obj = impl.getOption (SocketOptions.SO_BROADCAST);\n   \n@@ -799,8 +814,8 @@ public boolean getBroadcast() throws SocketException\n   public void setTrafficClass(int tc)\n     throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException (\"Cannot initialize Socket implementation\");\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n \n     if (tc < 0 || tc > 255)\n       throw new IllegalArgumentException();\n@@ -819,8 +834,8 @@ public void setTrafficClass(int tc)\n    */\n   public int getTrafficClass() throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException( \"Cannot initialize Socket implementation\");\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n \n     Object obj = impl.getOption(SocketOptions.IP_TOS);\n "}, {"sha": "9c4d3e20490d45152d7e87d2a191d1ac6b81da9b", "filename": "libjava/java/net/MulticastSocket.java", "status": "modified", "additions": 42, "deletions": 9, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e5d61fba14cd936e0183ba014703c196269590/libjava%2Fjava%2Fnet%2FMulticastSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e5d61fba14cd936e0183ba014703c196269590/libjava%2Fjava%2Fnet%2FMulticastSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FMulticastSocket.java?ref=66e5d61fba14cd936e0183ba014703c196269590", "patch": "@@ -125,6 +125,9 @@ public MulticastSocket(SocketAddress address) throws IOException\n    */\n   public InetAddress getInterface() throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+\n     return (InetAddress) impl.getOption(SocketOptions.IP_MULTICAST_IF);\n   }\n \n@@ -143,6 +146,9 @@ public InetAddress getInterface() throws SocketException\n    */\n   public byte getTTL() throws IOException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+\n     // Use getTTL here rather than getTimeToLive in case we're using an impl\n     // other than the default PlainDatagramSocketImpl and it doesn't have\n     // getTimeToLive yet.\n@@ -161,6 +167,9 @@ public byte getTTL() throws IOException\n    */\n   public int getTimeToLive() throws IOException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+\n     return impl.getTimeToLive();\n   }\n \n@@ -175,6 +184,9 @@ public int getTimeToLive() throws IOException\n    */\n   public void setInterface(InetAddress addr) throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+\n     impl.setOption(SocketOptions.IP_MULTICAST_IF, addr);\n   }\n \n@@ -192,9 +204,8 @@ public void setInterface(InetAddress addr) throws SocketException\n   public void setNetworkInterface(NetworkInterface netIf)\n     throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException (\n-\t\t      \"MulticastSocket: Cant access socket implementation\");\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n \n     Enumeration e = netIf.getInetAddresses ();\n \n@@ -219,9 +230,8 @@ public void setNetworkInterface(NetworkInterface netIf)\n   public NetworkInterface getNetworkInterface()\n     throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException (\n-\t\t      \"MulticastSocket: Cant access socket implementation\");\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n \n     InetAddress address =\n \t    (InetAddress) impl.getOption (SocketOptions.IP_MULTICAST_IF);\n@@ -246,9 +256,8 @@ public NetworkInterface getNetworkInterface()\n    */\n   public void setLoopbackMode(boolean disable) throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException (\n-\t\t      \"MulticastSocket: Cant access socket implementation\");\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n \n     impl.setOption (SocketOptions.IP_MULTICAST_LOOP, new Boolean (disable));\n   }\n@@ -262,6 +271,9 @@ public void setLoopbackMode(boolean disable) throws SocketException\n    */\n   public boolean getLoopbackMode() throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+\n     Object obj = impl.getOption (SocketOptions.IP_MULTICAST_LOOP);\n \n     if (obj instanceof Boolean)\n@@ -284,6 +296,9 @@ public boolean getLoopbackMode() throws SocketException\n    */\n   public void setTTL(byte ttl) throws IOException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+\n     // Use setTTL here rather than setTimeToLive in case we're using an impl\n     // other than the default PlainDatagramSocketImpl and it doesn't have\n     // setTimeToLive yet.\n@@ -302,6 +317,9 @@ public void setTTL(byte ttl) throws IOException\n    */\n   public void setTimeToLive(int ttl) throws IOException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+\n     if (ttl <= 0 || ttl > 255)\n       throw new IllegalArgumentException(\"Invalid ttl: \" + ttl);\n \n@@ -319,6 +337,9 @@ public void setTimeToLive(int ttl) throws IOException\n    */\n   public void joinGroup(InetAddress mcastaddr) throws IOException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+\n     if (! mcastaddr.isMulticastAddress())\n       throw new IOException(\"Not a Multicast address\");\n \n@@ -340,6 +361,9 @@ public void joinGroup(InetAddress mcastaddr) throws IOException\n    */\n   public void leaveGroup(InetAddress mcastaddr) throws IOException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+\n     if (! mcastaddr.isMulticastAddress())\n       throw new IOException(\"Not a Multicast address\");\n \n@@ -371,6 +395,9 @@ public void leaveGroup(InetAddress mcastaddr) throws IOException\n   public void joinGroup(SocketAddress mcastaddr, NetworkInterface netIf)\n     throws IOException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+\n     if (! (mcastaddr instanceof InetSocketAddress))\n       throw new IllegalArgumentException (\"SocketAddress type not supported\");\n \n@@ -406,6 +433,9 @@ public void joinGroup(SocketAddress mcastaddr, NetworkInterface netIf)\n   public void leaveGroup(SocketAddress mcastaddr, NetworkInterface netIf)\n     throws IOException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+\n     InetSocketAddress tmp = (InetSocketAddress) mcastaddr;\n     \n     if (! tmp.getAddress ().isMulticastAddress ())\n@@ -434,6 +464,9 @@ public void leaveGroup(SocketAddress mcastaddr, NetworkInterface netIf)\n    */\n   public synchronized void send(DatagramPacket p, byte ttl) throws IOException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+\n     SecurityManager s = System.getSecurityManager();\n     if (s != null)\n       {"}, {"sha": "d1ea4d6c2baeac49373829a6ba7922a17fcd2c74", "filename": "libjava/java/net/ServerSocket.java", "status": "modified", "additions": 57, "deletions": 24, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e5d61fba14cd936e0183ba014703c196269590/libjava%2Fjava%2Fnet%2FServerSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e5d61fba14cd936e0183ba014703c196269590/libjava%2Fjava%2Fnet%2FServerSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FServerSocket.java?ref=66e5d61fba14cd936e0183ba014703c196269590", "patch": "@@ -73,15 +73,16 @@\n    */\n   private SocketImpl impl;\n \n-  private boolean closed = false;\n-\n   /*\n    * This constructor is only used by java.nio.\n    */\n   // FIXME: Workaround a bug in gcj.\n   //ServerSocket (PlainSocketImpl impl) throws IOException\n   ServerSocket (SocketImpl impl) throws IOException\n   {\n+    if (impl == null)\n+      throw new NullPointerException(\"impl may not be null\");\n+\n     this.impl = impl;\n     this.impl.create (true);\n   }\n@@ -208,8 +209,8 @@ public void bind (SocketAddress endpoint)\n    */\n   public void bind (SocketAddress endpoint, int backlog) throws IOException\n   {\n-    if (closed)\n-      throw new SocketException (\"ServerSocket is closed\");\n+    if (isClosed())\n+      throw new SocketException(\"ServerSocket is closed\");\n     \n     if (! (endpoint instanceof InetSocketAddress))\n       throw new IllegalArgumentException (\"Address type not supported\");\n@@ -249,12 +250,16 @@ public void bind (SocketAddress endpoint, int backlog) throws IOException\n    */\n   public InetAddress getInetAddress()\n   {\n+    if (!isBound())\n+      return null;\n+    \n     try\n       {\n         return (InetAddress) impl.getOption (SocketOptions.SO_BINDADDR);\n       }\n     catch (SocketException e)\n       {\n+        // This never happens as we are bound.\n         return null;\n       }\n   }\n@@ -266,6 +271,9 @@ public InetAddress getInetAddress()\n    */\n   public int getLocalPort()\n   {\n+    if (!isBound())\n+      return -1;\n+    \n     return impl.getLocalPort();\n   }\n \n@@ -276,12 +284,10 @@ public int getLocalPort()\n    */\n   public SocketAddress getLocalSocketAddress()\n   {\n-    InetAddress addr = getInetAddress();\n-\n-    if (addr != null)\n-      return new InetSocketAddress (getInetAddress(), getLocalPort());\n-\n-    return null;\n+    if (!isBound())\n+      return null;\n+    \n+    return new InetSocketAddress(getInetAddress(), getLocalPort());\n   }\n \n   /**\n@@ -303,10 +309,9 @@ public Socket accept () throws IOException\n     if (sm != null)\n       sm.checkListen (impl.getLocalPort ());\n \n-    Socket s = new Socket();\n-    implAccept (s);\n-\n-    return s;\n+    Socket socket = new Socket();\n+    implAccept (socket);\n+    return socket;\n   }\n \n   /**\n@@ -322,14 +327,17 @@ public Socket accept () throws IOException\n    *\n    * @since 1.1\n    */\n-  protected final void implAccept (Socket s)\n+  protected final void implAccept (Socket socket)\n     throws IOException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"ServerSocket is closed\");\n+    \n     if (getChannel() != null\n         && !getChannel().isBlocking())\n       throw new IllegalBlockingModeException();\n \t    \n-    impl.accept(s.impl);\n+    impl.accept(socket.getImpl());\n   }\n \n   /**\n@@ -339,12 +347,15 @@ protected final void implAccept (Socket s)\n    */\n   public void close () throws IOException\n   {\n-    impl.close ();\n+    if (!isClosed())\n+      {\n+\timpl.close();\n \n-    if (getChannel() != null)\n-      getChannel().close ();\n+\tif (getChannel() != null)\n+\t  getChannel().close();\n     \n-    closed = true;\n+\timpl = null;\n+      }\n   }\n \n   /**\n@@ -387,7 +398,7 @@ public boolean isBound()\n    */\n   public boolean isClosed()\n   {\n-    return closed;\n+    return impl == null;\n   }\n \n   /**\n@@ -404,6 +415,9 @@ public boolean isClosed()\n    */\n   public void setSoTimeout (int timeout) throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"ServerSocket is closed\");\n+    \n     if (timeout < 0)\n       throw new IllegalArgumentException(\"SO_TIMEOUT value must be >= 0\");\n \n@@ -424,6 +438,9 @@ public void setSoTimeout (int timeout) throws SocketException\n    */\n   public int getSoTimeout () throws IOException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"ServerSocket is closed\");\n+    \n     Object timeout = impl.getOption(SocketOptions.SO_TIMEOUT);\n \n     if (!(timeout instanceof Integer))\n@@ -442,6 +459,9 @@ public int getSoTimeout () throws IOException\n   public void setReuseAddress (boolean on)\n     throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"ServerSocket is closed\");\n+    \n     impl.setOption (SocketOptions.SO_REUSEADDR, new Boolean (on));\n   }\n \n@@ -455,6 +475,9 @@ public void setReuseAddress (boolean on)\n   public boolean getReuseAddress()\n     throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"ServerSocket is closed\");\n+    \n     Object reuseaddr = impl.getOption (SocketOptions.SO_REUSEADDR);\n \n     if (!(reuseaddr instanceof Boolean))\n@@ -478,6 +501,9 @@ public boolean getReuseAddress()\n   public void setReceiveBufferSize (int size)\n     throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"ServerSocket is closed\");\n+    \n     if (size <= 0)\n       throw new IllegalArgumentException (\"SO_RCVBUF value must be > 0\");\n \n@@ -498,6 +524,9 @@ public void setReceiveBufferSize (int size)\n   public int getReceiveBufferSize ()\n     throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"ServerSocket is closed\");\n+    \n     Object buf = impl.getOption (SocketOptions.SO_RCVBUF);\n \n     if (!(buf instanceof Integer))\n@@ -513,11 +542,15 @@ public int getReceiveBufferSize ()\n    */\n   public String toString ()\n   {\n-    return \"ServerSocket\" + impl.toString();\n+    if (!isBound())\n+      return \"ServerSocket[unbound]\";\n+    \n+    return (\"ServerSocket[addr=\" + impl.getInetAddress()\n+\t    + \",port=\" + impl.getPort()\n+\t    + \",localport=\" + impl.getLocalPort()\n+\t    + \"]\");\n   }\n \n-  // Class methods\n-\n   /**\n    * Sets the <code>SocketImplFactory</code> for all \n    * <code>ServerSocket</code>'s.  This may only be done"}, {"sha": "1b443d08a1ebf941196af4a28d249f6644b85136", "filename": "libjava/java/net/Socket.java", "status": "modified", "additions": 112, "deletions": 35, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e5d61fba14cd936e0183ba014703c196269590/libjava%2Fjava%2Fnet%2FSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e5d61fba14cd936e0183ba014703c196269590/libjava%2Fjava%2Fnet%2FSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocket.java?ref=66e5d61fba14cd936e0183ba014703c196269590", "patch": "@@ -68,29 +68,22 @@\n  */\n public class Socket\n {\n-\n-  // Class Variables\n-\n   /**\n    * This is the user SocketImplFactory for this class.  If this variable is\n    * null, a default factory is used.\n    */\n   static SocketImplFactory factory;\n \n-  // Instance Variables\n-\n   /**\n    * The implementation object to which calls are redirected\n    */\n-  SocketImpl impl;\n+  private SocketImpl impl;\n \n   private boolean implCreated = false;\n \n   private boolean inputShutdown = false;\n   private boolean outputShutdown = false;\n \n-  private boolean closed = false;\n-\n   /**\n    * Initializes a new instance of <code>Socket</code> object without \n    * connecting to a remote host.  This useful for subclasses of socket that \n@@ -175,7 +168,7 @@ public Socket (InetAddress address, int port)\n    *\n    * @param host The name of the remote host to connect to.\n    * @param port The remote port to connect to.\n-   * @param loadAddr The local address to bind to.\n+   * @param localAddr The local address to bind to.\n    * @param localPort The local port to bind to.\n    *\n    * @exception SecurityException If the <code>SecurityManager</code>\n@@ -298,7 +291,8 @@ private Socket(InetAddress raddr, int rport, InetAddress laddr, int lport,\n     // that default.  JDK 1.2 doc infers not to do a bind.\n   }\n \n-  private SocketImpl getImpl()\n+  // This has to be accessible from java.net.ServerSocket.\n+  SocketImpl getImpl()\n     throws SocketException\n   {\n     try\n@@ -331,8 +325,8 @@ private SocketImpl getImpl()\n    */\n   public void bind (SocketAddress bindpoint) throws IOException\n   {\n-    if (closed)\n-      throw new SocketException (\"Socket is closed\");\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n \n     // XXX: JDK 1.4.1 API documentation says that if bindpoint is null the\n     // socket will be bound to an ephemeral port and a valid local address.\n@@ -390,6 +384,8 @@ public void connect (SocketAddress endpoint)\n    * until established or an error occurs.\n    *\n    * @param endpoint The address to connect to\n+   * @param timeout The length of the timeout in milliseconds, or \n+   * 0 to indicate no timeout.\n    *\n    * @exception IOException If an error occurs\n    * @exception IllegalArgumentException If the address type is not supported\n@@ -402,11 +398,11 @@ public void connect (SocketAddress endpoint)\n   public void connect (SocketAddress endpoint, int timeout)\n     throws IOException\n   {\n-    if (closed)\n-      throw new SocketException (\"Socket is closed\");\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n     \n     if (! (endpoint instanceof InetSocketAddress))\n-      throw new IllegalArgumentException (\"Address type not supported\");\n+      throw new IllegalArgumentException(\"unsupported address type\");\n \n     if (getChannel() != null\n         && !getChannel().isBlocking ())\n@@ -598,10 +594,13 @@ public SocketAddress getRemoteSocketAddress()\n    */\n   public InputStream getInputStream () throws IOException\n   {\n-    if (getImpl() != null)\n-      return getImpl().getInputStream();\n-\n-    throw new IOException(\"Not connected\");\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n+    if (!isConnected())\n+      throw new IOException(\"not connected\");\n+\t    \n+    return getImpl().getInputStream();\n   }\n \n   /**\n@@ -613,10 +612,13 @@ public InputStream getInputStream () throws IOException\n    */\n   public OutputStream getOutputStream () throws IOException\n   {\n-    if (getImpl() != null)\n-      return getImpl().getOutputStream();\n-\n-    throw new IOException(\"Not connected\");\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n+    if (!isConnected())\n+      throw new IOException(\"not connected\");\n+    \n+    return getImpl().getOutputStream();\n   }\n \n   /**\n@@ -630,6 +632,9 @@ public OutputStream getOutputStream () throws IOException\n    */\n   public void setTcpNoDelay (boolean on)  throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n     getImpl().setOption(SocketOptions.TCP_NODELAY, new Boolean(on));\n   }\n \n@@ -647,6 +652,9 @@ public void setTcpNoDelay (boolean on)  throws SocketException\n    */\n   public boolean getTcpNoDelay() throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n     Object on = getImpl().getOption(SocketOptions.TCP_NODELAY);\n   \n     if (on instanceof Boolean)\n@@ -674,6 +682,9 @@ public boolean getTcpNoDelay() throws SocketException\n    */\n   public void setSoLinger(boolean on, int linger) throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n     if (on == true)\n       {\n         if (linger < 0)\n@@ -708,6 +719,9 @@ public void setSoLinger(boolean on, int linger) throws SocketException\n    */\n   public int getSoLinger() throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n     Object linger = getImpl().getOption(SocketOptions.SO_LINGER);\n \n     if (linger instanceof Integer)\n@@ -728,6 +742,9 @@ public int getSoLinger() throws SocketException\n    */\n   public void sendUrgentData (int data) throws IOException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n     getImpl().sendUrgentData (data);\n   }\n \n@@ -742,18 +759,26 @@ public void sendUrgentData (int data) throws IOException\n    */\n   public void setOOBInline (boolean on) throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n     getImpl().setOption(SocketOptions.SO_OOBINLINE, new Boolean(on));\n   }\n \n   /**\n    * Returns the current setting of the SO_OOBINLINE option for this socket\n    * \n+   * @return True if SO_OOBINLINE is set, false otherwise.\n+   *\n    * @exception SocketException If an error occurs\n    * \n    * @since 1.4\n    */\n   public boolean getOOBInline () throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n     Object buf = getImpl().getOption(SocketOptions.SO_OOBINLINE);\n \n     if (buf instanceof Boolean)\n@@ -781,6 +806,9 @@ public boolean getOOBInline () throws SocketException\n    */\n   public synchronized void setSoTimeout (int timeout) throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n     if (timeout < 0)\n       throw new IllegalArgumentException(\"SO_TIMEOUT value must be >= 0\");\n       \n@@ -806,6 +834,9 @@ public synchronized void setSoTimeout (int timeout) throws SocketException\n    */\n   public synchronized int getSoTimeout () throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n     Object timeout = getImpl().getOption(SocketOptions.SO_TIMEOUT);\n     if (timeout instanceof Integer)\n       return(((Integer)timeout).intValue());\n@@ -827,6 +858,9 @@ public synchronized int getSoTimeout () throws SocketException\n    */\n   public void setSendBufferSize (int size) throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n     if (size <= 0)\n       throw new IllegalArgumentException(\"SO_SNDBUF value must be > 0\");\n     \n@@ -846,6 +880,9 @@ public void setSendBufferSize (int size) throws SocketException\n    */\n   public int getSendBufferSize () throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n     Object buf = getImpl().getOption(SocketOptions.SO_SNDBUF);\n \n     if (buf instanceof Integer)\n@@ -868,6 +905,9 @@ public int getSendBufferSize () throws SocketException\n    */\n   public void setReceiveBufferSize (int size) throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n     if (size <= 0)\n       throw new IllegalArgumentException(\"SO_RCVBUF value must be > 0\");\n       \n@@ -887,6 +927,9 @@ public void setReceiveBufferSize (int size) throws SocketException\n    */\n   public int getReceiveBufferSize () throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n     Object buf = getImpl().getOption(SocketOptions.SO_RCVBUF);\n \n     if (buf instanceof Integer)\n@@ -907,6 +950,9 @@ public int getReceiveBufferSize () throws SocketException\n    */\n   public void setKeepAlive (boolean on) throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n     getImpl().setOption(SocketOptions.SO_KEEPALIVE, new Boolean(on));\n   }\n \n@@ -922,6 +968,9 @@ public void setKeepAlive (boolean on) throws SocketException\n    */\n   public boolean getKeepAlive () throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n     Object buf = getImpl().getOption(SocketOptions.SO_KEEPALIVE);\n \n     if (buf instanceof Boolean)\n@@ -937,13 +986,15 @@ public boolean getKeepAlive () throws SocketException\n    */\n   public synchronized void close ()  throws IOException\n   {\n-    if (getImpl() != null)\n-      getImpl().close();\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n+    getImpl().close();\n \n     if (getChannel() != null)\n       getChannel().close();\n     \n-    closed = true;\n+    impl = null;\n   }\n \n   /**\n@@ -958,7 +1009,8 @@ public String toString ()\n \tif (isConnected())\n \t  return (\"Socket[addr=\" + getImpl().getInetAddress()\n \t\t  + \",port=\" + getImpl().getPort()\n-\t\t  + \",localport=\" + getImpl().getLocalPort());\n+\t\t  + \",localport=\" + getImpl().getLocalPort()\n+\t\t  + \"]\");\n       }\n     catch (SocketException e)\n       {\n@@ -968,8 +1020,6 @@ public String toString ()\n     return \"Socket[unconnected]\";\n   }\n \n-  // Class Methods\n-\n   /**\n    * Sets the <code>SocketImplFactory</code>.  This may be done only once per \n    * virtual machine.  Subsequent attempts will generate a \n@@ -1010,9 +1060,10 @@ public static synchronized void setSocketImplFactory (SocketImplFactory fac)\n    */\n   public void shutdownInput() throws IOException\n   {\n-    if (getImpl() != null)\n-      getImpl().shutdownInput();\n-\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n+    getImpl().shutdownInput();\n     inputShutdown = true;\n   }\n \n@@ -1025,9 +1076,10 @@ public void shutdownInput() throws IOException\n    */\n   public void shutdownOutput() throws IOException\n   {\n-    if (getImpl() != null)\n-      getImpl().shutdownOutput();\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n     \n+    getImpl().shutdownOutput();\n     outputShutdown = true;\n   }\n \n@@ -1046,12 +1098,17 @@ public SocketChannel getChannel()\n   /**\n    * Checks if the SO_REUSEADDR option is enabled\n    *\n+   * @return True if SO_REUSEADDR is set, false otherwise.\n+   *\n    * @exception SocketException If an error occurs\n    *\n    * @since 1.4\n    */\n   public boolean getReuseAddress () throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n     Object reuseaddr = getImpl().getOption (SocketOptions.SO_REUSEADDR);\n \n     if (!(reuseaddr instanceof Boolean))\n@@ -1063,6 +1120,8 @@ public boolean getReuseAddress () throws SocketException\n   /**\n    * Enables/Disables the SO_REUSEADDR option\n    *\n+   * @param reuseAddress True if SO_REUSEADDR should be set.\n+   * \n    * @exception SocketException If an error occurs\n    *\n    * @since 1.4\n@@ -1075,6 +1134,8 @@ public void setReuseAddress (boolean on) throws SocketException\n   /**\n    * Returns the current traffic class\n    *\n+   * @return The current traffic class.\n+   * \n    * @exception SocketException If an error occurs\n    *\n    * @see Socket#setTrafficClass(int tc)\n@@ -1083,6 +1144,9 @@ public void setReuseAddress (boolean on) throws SocketException\n    */\n   public int getTrafficClass () throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n     Object obj = getImpl().getOption(SocketOptions.IP_TOS);\n \n     if (obj instanceof Integer)\n@@ -1105,6 +1169,9 @@ public int getTrafficClass () throws SocketException\n    */\n   public void setTrafficClass (int tc) throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+    \n     if (tc < 0 || tc > 255)\n       throw new IllegalArgumentException();\n \n@@ -1114,6 +1181,8 @@ public void setTrafficClass (int tc) throws SocketException\n   /**\n    * Checks if the socket is connected\n    *\n+   * @return True if socket is connected, false otherwise.\n+   *\n    * @since 1.4\n    */\n   public boolean isConnected ()\n@@ -1131,6 +1200,8 @@ public boolean isConnected ()\n   /**\n    * Checks if the socket is already bound.\n    *\n+   * @return True if socket is bound, false otherwise.\n+   *\n    * @since 1.4\n    */\n   public boolean isBound ()\n@@ -1141,16 +1212,20 @@ public boolean isBound ()\n   /**\n    * Checks if the socket is closed.\n    * \n+   * @return True if socket is closed, false otherwise.\n+   *\n    * @since 1.4\n    */\n   public boolean isClosed ()\n   {\n-    return closed;\n+    return impl == null;\n   }\n \n   /**\n    * Checks if the socket's input stream is shutdown\n    *\n+   * @return True if input is shut down.\n+   * \n    * @since 1.4\n    */\n   public boolean isInputShutdown ()\n@@ -1161,6 +1236,8 @@ public boolean isInputShutdown ()\n   /**\n    * Checks if the socket's output stream is shutdown\n    *\n+   * @return True if output is shut down.\n+   * \n    * @since 1.4\n    */\n   public boolean isOutputShutdown ()"}]}