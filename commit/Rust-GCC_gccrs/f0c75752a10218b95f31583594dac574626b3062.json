{"sha": "f0c75752a10218b95f31583594dac574626b3062", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBjNzU3NTJhMTAyMThiOTVmMzE1ODM1OTRkYWM1NzQ2MjZiMzA2Mg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-02-03T06:23:37Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-02-03T06:23:37Z"}, "message": "class.c (add_field): Mark static fields external.\n\n        * class.c (add_field): Mark static fields external.\n        (build_class_ref): Remove redundant set.\n        * parse.y (java_expand_classes): Mark static fields of classes\n        to be compiled as local.\n        * jcf-parse.c (parse_class_file): Likewise.\n\nFrom-SVN: r49458", "tree": {"sha": "d3081a1b3cb01da65223cdcd03a5fd55ecdecda2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3081a1b3cb01da65223cdcd03a5fd55ecdecda2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0c75752a10218b95f31583594dac574626b3062", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0c75752a10218b95f31583594dac574626b3062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0c75752a10218b95f31583594dac574626b3062", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0c75752a10218b95f31583594dac574626b3062/comments", "author": null, "committer": null, "parents": [{"sha": "d74697b84d79ac7f863e9a65b445ac2e72b59090", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74697b84d79ac7f863e9a65b445ac2e72b59090", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d74697b84d79ac7f863e9a65b445ac2e72b59090"}], "stats": {"total": 64, "additions": 48, "deletions": 16}, "files": [{"sha": "3bd83c7acff6c353a3af2b191bfad973e6af3de5", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c75752a10218b95f31583594dac574626b3062/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c75752a10218b95f31583594dac574626b3062/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=f0c75752a10218b95f31583594dac574626b3062", "patch": "@@ -1,3 +1,11 @@\n+2002-02-02  Richard Henderson  <rth@redhat.com>\n+\n+\t* class.c (add_field): Mark static fields external.\n+\t(build_class_ref): Remove redundant set.\n+\t* parse.y (java_expand_classes): Mark static fields of classes\n+\tto be compiled as local.\n+\t* jcf-parse.c (parse_class_file): Likewise.\n+\n 2002-02-02  Nic Ferrier  <nferrier@tapsellferrier.co.uk>\n \n \t* gcj.texi (About CNI): New node.\n@@ -89,22 +97,22 @@\n \t(Invoking jv-convert): New node.\n \n 2001-01-10  Jeff Sturm  <jsturm@one-point.com>\n-            Martin Kahlert  <martin.kahlert@infineon.com>\n+\t    Martin Kahlert  <martin.kahlert@infineon.com>\n \n \t* jcf-parse.c (get_constant): Don't swap lo/hi for big\n \tendian targets when HOST_BITS_PER_WIDE_INT >= 64.\n \n 2002-01-03  Graham Stott  <grahams@redhat.com>\n \n-        * class.c (compile_resource_file): Update copyright date.\n-        Constify filename parameter.\n-        (java-tree.h): Update copyright date.\n-        (compile_resource_file): Constify filename parameter.\n+\t* class.c (compile_resource_file): Update copyright date.\n+\tConstify filename parameter.\n+\t(java-tree.h): Update copyright date.\n+\t(compile_resource_file): Constify filename parameter.\n \n 2002-01-03  Graham Stott  <grahams@redhat.com>\n \n-        * gcc/jcf-parse.c: Update copyright date.\n-        (yyparse): Constify resource_filename.\n+\t* gcc/jcf-parse.c: Update copyright date.\n+\t(yyparse): Constify resource_filename.\n \n 2002-01-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n "}, {"sha": "2e70081e095bb66ad99fcc56796ac5d0d2d95a48", "filename": "gcc/java/class.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c75752a10218b95f31583594dac574626b3062/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c75752a10218b95f31583594dac574626b3062/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=f0c75752a10218b95f31583594dac574626b3062", "patch": "@@ -773,7 +773,11 @@ add_field (class, name, field_type, flags)\n       /* Always make field externally visible.  This is required so\n \t that native methods can always access the field.  */\n       TREE_PUBLIC (field) = 1;\n+      /* Considered external until we know what classes are being\n+\t compiled into this object file.  */\n+      DECL_EXTERNAL (field) = 1;\n     }\n+\n   return field;\n }\n \n@@ -1095,8 +1099,6 @@ build_class_ref (type)\n \t      DECL_EXTERNAL (decl) = 1;\n \t      make_decl_rtl (decl, NULL);\n \t      pushdecl_top_level (decl);\n-\t      if (is_compiled == 1)\n-\t\tDECL_EXTERNAL (decl) = 1;\n \t    }\n \t}\n "}, {"sha": "e85b5781f83967b00c87648d71cf9cc0f747c853", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c75752a10218b95f31583594dac574626b3062/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c75752a10218b95f31583594dac574626b3062/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=f0c75752a10218b95f31583594dac574626b3062", "patch": "@@ -793,7 +793,7 @@ init_outgoing_cpool ()\n static void\n parse_class_file ()\n {\n-  tree method;\n+  tree method, field;\n   const char *save_input_filename = input_filename;\n   int save_lineno = lineno;\n \n@@ -808,8 +808,13 @@ parse_class_file ()\n      compiling from class files.  */\n   always_initialize_class_p = 1;\n \n-  for ( method = TYPE_METHODS (CLASS_TO_HANDLE_TYPE (current_class));\n-\tmethod != NULL_TREE; method = TREE_CHAIN (method))\n+  for (field = TYPE_FIELDS (CLASS_TO_HANDLE_TYPE (current_class));\n+       field != NULL_TREE; field = TREE_CHAIN (field))\n+    if (FIELD_STATIC (field))\n+      DECL_EXTERNAL (field) = 0;\n+\n+  for (method = TYPE_METHODS (CLASS_TO_HANDLE_TYPE (current_class));\n+       method != NULL_TREE; method = TREE_CHAIN (method))\n     {\n       JCF *jcf = current_jcf;\n "}, {"sha": "328a18e3d122191561b848ebc7c16b64a10f3204", "filename": "gcc/java/parse.y", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c75752a10218b95f31583594dac574626b3062/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c75752a10218b95f31583594dac574626b3062/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=f0c75752a10218b95f31583594dac574626b3062", "patch": "@@ -8963,8 +8963,7 @@ java_expand_classes ()\n   java_layout_classes ();\n   java_parse_abort_on_error ();\n \n-  cur_ctxp = ctxp_for_generation;\n-  for (; cur_ctxp; cur_ctxp = cur_ctxp->next)\n+  for (cur_ctxp = ctxp_for_generation; cur_ctxp; cur_ctxp = cur_ctxp->next)\n     {\n       ctxp = cur_ctxp;\n       input_filename = ctxp->filename;\n@@ -8976,7 +8975,7 @@ java_expand_classes ()\n \n   /* Find anonymous classes and expand their constructor, now they\n      have been fixed. */\n-  for (cur_ctxp = ctxp_for_generation;  cur_ctxp;  cur_ctxp = cur_ctxp->next)\n+  for (cur_ctxp = ctxp_for_generation; cur_ctxp; cur_ctxp = cur_ctxp->next)\n     {\n       tree current;\n       ctxp = cur_ctxp;\n@@ -9009,7 +9008,25 @@ java_expand_classes ()\n     return;\n \n   /* Now things are stable, go for generation of the class data. */\n-  for (cur_ctxp = ctxp_for_generation;  cur_ctxp;  cur_ctxp = cur_ctxp->next)\n+\n+  /* We pessimistically marked all fields external until we knew\n+     what set of classes we were planning to compile.  Now mark\n+     those that will be generated locally as not external.  */\n+  for (cur_ctxp = ctxp_for_generation; cur_ctxp; cur_ctxp = cur_ctxp->next)\n+    {\n+      tree current;\n+      for (current = ctxp->class_list; current; current = TREE_CHAIN (current))\n+\t{\n+\t  tree class = TREE_TYPE (current);\n+\t  tree field;\n+\t  for (field = TYPE_FIELDS (class); field ; field = TREE_CHAIN (field))\n+\t    if (FIELD_STATIC (field))\n+\t      DECL_EXTERNAL (field) = 0;\n+\t}\n+    }\n+\n+  /* Compile the classes.  */\n+  for (cur_ctxp = ctxp_for_generation; cur_ctxp; cur_ctxp = cur_ctxp->next)\n     {\n       tree current;\n       ctxp = cur_ctxp;"}]}