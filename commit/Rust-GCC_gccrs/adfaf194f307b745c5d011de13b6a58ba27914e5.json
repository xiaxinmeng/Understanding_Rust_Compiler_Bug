{"sha": "adfaf194f307b745c5d011de13b6a58ba27914e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRmYWYxOTRmMzA3Yjc0NWM1ZDAxMWRlMTNiNmE1OGJhMjc5MTRlNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-04-13T21:04:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-04-13T21:04:06Z"}, "message": "c-common.c (default_valid_lang_attribute): New fn.\n\n\t* c-common.c (default_valid_lang_attribute): New fn.\n\t(valid_lang_attribute): New callback ptr.\n\t(decl_attributes): Call it.  Move init_priority support into\n\tC++ frontend.\n\nFrom-SVN: r26419", "tree": {"sha": "b97b1ca01292a434eab3d70b5a41eea7592ebc8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b97b1ca01292a434eab3d70b5a41eea7592ebc8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adfaf194f307b745c5d011de13b6a58ba27914e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adfaf194f307b745c5d011de13b6a58ba27914e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adfaf194f307b745c5d011de13b6a58ba27914e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adfaf194f307b745c5d011de13b6a58ba27914e5/comments", "author": null, "committer": null, "parents": [{"sha": "b35a5374834025a8c84ab0e1f0eaaeb8cdbc7c9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b35a5374834025a8c84ab0e1f0eaaeb8cdbc7c9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b35a5374834025a8c84ab0e1f0eaaeb8cdbc7c9e"}], "stats": {"total": 93, "additions": 30, "deletions": 63}, "files": [{"sha": "b47cfbdec5d69e96db24776072daaee38f238e6e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adfaf194f307b745c5d011de13b6a58ba27914e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adfaf194f307b745c5d011de13b6a58ba27914e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=adfaf194f307b745c5d011de13b6a58ba27914e5", "patch": "@@ -1,3 +1,10 @@\n+Tue Apr 13 21:01:36 1999  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* c-common.c (default_valid_lang_attribute): New fn.\n+\t(valid_lang_attribute): New callback ptr.\n+\t(decl_attributes): Call it.  Move init_priority support into\n+\tC++ frontend.\n+\n Tue Apr 13 17:47:14 1999  John Wehle  (john@feith.com)\n \n \t* i386.md (movdi): Add splitter."}, {"sha": "1ec3842010b4a7153015275c3e37e9a424aa9c4a", "filename": "gcc/c-common.c", "status": "modified", "additions": 23, "deletions": 63, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adfaf194f307b745c5d011de13b6a58ba27914e5/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adfaf194f307b745c5d011de13b6a58ba27914e5/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=adfaf194f307b745c5d011de13b6a58ba27914e5", "patch": "@@ -54,8 +54,7 @@ int skip_evaluation;\n enum attrs {A_PACKED, A_NOCOMMON, A_COMMON, A_NORETURN, A_CONST, A_T_UNION,\n \t    A_NO_CHECK_MEMORY_USAGE, A_NO_INSTRUMENT_FUNCTION,\n \t    A_CONSTRUCTOR, A_DESTRUCTOR, A_MODE, A_SECTION, A_ALIGNED,\n-\t    A_UNUSED, A_FORMAT, A_FORMAT_ARG, A_WEAK, A_ALIAS,\n-\t    A_INIT_PRIORITY};\n+\t    A_UNUSED, A_FORMAT, A_FORMAT_ARG, A_WEAK, A_ALIAS};\n \n enum format_type { printf_format_type, scanf_format_type,\n \t\t   strftime_format_type };\n@@ -68,6 +67,7 @@ static void record_function_format\tPROTO((tree, tree, enum format_type,\n \t\t\t\t\t       int, int));\n static void record_international_format\tPROTO((tree, tree, int));\n static tree c_find_base_decl            PROTO((tree));\n+static int default_valid_lang_attribute PROTO ((tree, tree, tree, tree));\n \n /* Keep a stack of if statements.  We record the number of compound\n    statements seen up to the if keyword, as well as the line number\n@@ -94,12 +94,6 @@ static int if_stack_pointer = 0;\n /* Generate RTL for the start of an if-then, and record the start of it\n    for ambiguous else detection.  */\n \n-/* A list of objects which have constructors or destructors which\n-   reside in the global scope, and have an init_priority attribute\n-   associated with them.  The decl is stored in the TREE_VALUE slot\n-   and the priority number is stored in the TREE_PURPOSE slot.  */\n-tree static_aggregates_initp;\n-\n void\n c_expand_start_cond (cond, exitflag, compstmt_count)\n      tree cond;\n@@ -398,11 +392,29 @@ init_attributes ()\n   add_attribute (A_FORMAT_ARG, \"format_arg\", 1, 1, 1);\n   add_attribute (A_WEAK, \"weak\", 0, 0, 1);\n   add_attribute (A_ALIAS, \"alias\", 1, 1, 1);\n-  add_attribute (A_INIT_PRIORITY, \"init_priority\", 0, 1, 0);\n   add_attribute (A_NO_INSTRUMENT_FUNCTION, \"no_instrument_function\", 0, 0, 1);\n   add_attribute (A_NO_CHECK_MEMORY_USAGE, \"no_check_memory_usage\", 0, 0, 1);\n }\n \f\n+/* Default implementation of valid_lang_attribute, below.  By default, there\n+   are no language-specific attributes.  */\n+\n+static int\n+default_valid_lang_attribute (attr_name, attr_args, decl, type)\n+  tree attr_name ATTRIBUTE_UNUSED;\n+  tree attr_args ATTRIBUTE_UNUSED;\n+  tree decl ATTRIBUTE_UNUSED;\n+  tree type ATTRIBUTE_UNUSED;\n+{\n+  return 0;\n+}\n+\n+/* Return a 1 if ATTR_NAME and ATTR_ARGS denote a valid language-specific\n+   attribute for either declaration DECL or type TYPE and 0 otherwise.  */\n+\n+int (*valid_lang_attribute) PROTO ((tree, tree, tree, tree))\n+     = default_valid_lang_attribute;\n+\n /* Process the attributes listed in ATTRIBUTES and PREFIX_ATTRIBUTES\n    and install them in NODE, which is either a DECL (including a TYPE_DECL)\n    or a TYPE.  PREFIX_ATTRIBUTES can appear after the declaration specifiers\n@@ -455,7 +467,8 @@ decl_attributes (node, attributes, prefix_attributes)\n \n       if (i == attrtab_idx)\n \t{\n-\t  if (! valid_machine_attribute (name, args, decl, type))\n+\t  if (! valid_machine_attribute (name, args, decl, type)\n+\t      && ! (* valid_lang_attribute) (name, args, decl, type))\n \t    warning (\"`%s' attribute directive ignored\",\n \t\t     IDENTIFIER_POINTER (name));\n \t  else if (decl != 0)\n@@ -914,59 +927,6 @@ decl_attributes (node, attributes, prefix_attributes)\n \t    DECL_NO_CHECK_MEMORY_USAGE (decl) = 1;\n \t  break;\n \n-\tcase A_INIT_PRIORITY:\n-\t  {\n-\t    tree initp_expr = (args ? TREE_VALUE (args): NULL_TREE);\n-\t    int pri;\n-\n-\t    if (initp_expr)\n-\t      STRIP_NOPS (initp_expr);\n-\t  \n-\t    if (!initp_expr || TREE_CODE (initp_expr) != INTEGER_CST)\n-\t      {\n-\t\terror (\"requested init_priority is not an integer constant\");\n-\t\tcontinue;\n-\t      }\n-\n-\t    pri = TREE_INT_CST_LOW (initp_expr);\n-\t\n-\t    while (TREE_CODE (type) == ARRAY_TYPE)\n-\t      type = TREE_TYPE (type);\n-\n-\t    if (is_type || TREE_CODE (decl) != VAR_DECL\n-\t\t|| ! TREE_STATIC (decl)\n-\t\t|| DECL_EXTERNAL (decl)\n-\t\t|| (TREE_CODE (type) != RECORD_TYPE\n-\t\t    && TREE_CODE (type) != UNION_TYPE)\n-\t\t/* Static objects in functions are initialized the\n-                   first time control passes through that\n-                   function. This is not precise enough to pin down an\n-                   init_priority value, so don't allow it. */\n-\t\t|| current_function_decl) \n-\t      {\n-\t\terror (\"can only use init_priority attribute on file-scope definitions of objects of class type\");\n-\t\tcontinue; \n-\t      }\n-\n-\t    if (pri > MAX_INIT_PRIORITY || pri <= 0)\n-\t      {\n-\t\terror (\"requested init_priority is out of range\");\n-\t\tcontinue;\n-\t      }\n-\n-\t    /* Check for init_priorities that are reserved for\n-               language and runtime support implementations.*/\n-\t    if (pri <= MAX_RESERVED_INIT_PRIORITY)\n-\t      {\n-\t\twarning \n-\t\t  (\"requested init_priority is reserved for internal use\");\n-\t      }\n-\n-\t    static_aggregates_initp\n-\t      = perm_tree_cons (initp_expr, decl, static_aggregates_initp);\n-\t    break;\n-\t  }\n-\n \tcase A_NO_INSTRUMENT_FUNCTION:\n \t  if (TREE_CODE (decl) != FUNCTION_DECL)\n \t    {"}]}