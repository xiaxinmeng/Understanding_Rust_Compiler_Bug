{"sha": "12194c388f00739381f3c75737275d6a2862cb37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIxOTRjMzg4ZjAwNzM5MzgxZjNjNzU3MzcyNzVkNmEyODYyY2IzNw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-03T22:53:46Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-03T22:53:46Z"}, "message": "(immed_real_const_1): Check explicitly for NaNs.\n\nFrom-SVN: r4626", "tree": {"sha": "b4f588c77a815ef5ed2aeba86adbe242ef346f56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4f588c77a815ef5ed2aeba86adbe242ef346f56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12194c388f00739381f3c75737275d6a2862cb37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12194c388f00739381f3c75737275d6a2862cb37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12194c388f00739381f3c75737275d6a2862cb37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12194c388f00739381f3c75737275d6a2862cb37/comments", "author": null, "committer": null, "parents": [{"sha": "0a8305859d2da1e7619cfda38dc3e5c45f01b65e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a8305859d2da1e7619cfda38dc3e5c45f01b65e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a8305859d2da1e7619cfda38dc3e5c45f01b65e"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "67954442233e556d50b70ea2726ed9b2b9627615", "filename": "gcc/varasm.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12194c388f00739381f3c75737275d6a2862cb37/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12194c388f00739381f3c75737275d6a2862cb37/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=12194c388f00739381f3c75737275d6a2862cb37", "patch": "@@ -1418,7 +1418,11 @@ immed_real_const_1 (d, mode)\n   /* Avoid REAL_VALUES_EQUAL here in order to distinguish minus zero.  */\n   if (!bcmp (&dconst0, &d, sizeof d))\n     return CONST0_RTX (mode);\n-  else if (REAL_VALUES_EQUAL (dconst1, d))\n+  /* Check for NaN first, because some ports (specifically the i386) do not\n+     emit correct ieee-fp code by default, and thus will generate a core\n+     dump here if we pass a NaN to REAL_VALUES_EQUAL and if REAL_VALUES_EQUAL\n+     does a floating point comparison.  */\n+  else if (! REAL_VALUE_ISNAN (d) && REAL_VALUES_EQUAL (dconst1, d))\n     return CONST1_RTX (mode);\n \n   if (sizeof u == 2 * sizeof (HOST_WIDE_INT))"}]}