{"sha": "28d31e407447df98a843559b204bc01c40577555", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhkMzFlNDA3NDQ3ZGY5OGE4NDM1NTliMjA0YmMwMWM0MDU3NzU1NQ==", "commit": {"author": {"name": "Balaji V. Iyer", "email": "balaji.v.iyer@intel.com", "date": "2013-11-06T14:55:46Z"}, "committer": {"name": "Balaji V. Iyer", "email": "bviyer@gcc.gnu.org", "date": "2013-11-06T14:55:46Z"}, "message": "fib.c: Reduced the iteration from 40 to 30.\n\n2013-11-05  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n\n        * c-c++-common/cilk-plus/CK/fib.c: Reduced the iteration from\n        40 to 30.  Replaced iteration variable with a #define.  Instead of\n        returning non-zero value for error, called __builtin_abort ().  Fixed\n        a bug of calling fib_serial in serial case instead of fib.\n        * c-c++-common/cilk-plus/CK/fib_init_expr_xy.c: Likewise.\n        * c-c++-common/cilk-plus/CK/fib_no_return.c: Likewise.\n        * c-c++-common/cilk-plus/CK/fib_no_sync.c: Likewise.\n        * gcc.dg/cilk-plus/cilk-plus.exp: Removed duplicate/un-necessary\n        compiler flag testing.\n\nFrom-SVN: r204457", "tree": {"sha": "ef8651daa209b4ca62223e3c3d964ca2958257f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef8651daa209b4ca62223e3c3d964ca2958257f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28d31e407447df98a843559b204bc01c40577555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28d31e407447df98a843559b204bc01c40577555", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28d31e407447df98a843559b204bc01c40577555", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28d31e407447df98a843559b204bc01c40577555/comments", "author": null, "committer": null, "parents": [{"sha": "3e89949e1b58a23c3fc27b489c5f9e207099d690", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e89949e1b58a23c3fc27b489c5f9e207099d690", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e89949e1b58a23c3fc27b489c5f9e207099d690"}], "stats": {"total": 178, "additions": 89, "deletions": 89}, "files": [{"sha": "8cad9e1637fabce1c29df118ec4906e175e7b94b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d31e407447df98a843559b204bc01c40577555/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d31e407447df98a843559b204bc01c40577555/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=28d31e407447df98a843559b204bc01c40577555", "patch": "@@ -1,3 +1,15 @@\n+2013-11-05  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+\t* c-c++-common/cilk-plus/CK/fib.c: Reduced the iteration from\n+\t40 to 30.  Replaced iteration variable with a #define.  Instead of\n+\treturning non-zero value for error, called __builtin_abort ().  Fixed\n+\ta bug of calling fib_serial in serial case instead of fib.\n+\t* c-c++-common/cilk-plus/CK/fib_init_expr_xy.c: Likewise.\n+\t* c-c++-common/cilk-plus/CK/fib_no_return.c: Likewise.\n+\t* c-c++-common/cilk-plus/CK/fib_no_sync.c: Likewise.\n+\t* gcc.dg/cilk-plus/cilk-plus.exp: Removed duplicate/un-necessary\n+\tcompiler flag testing.\n+\n 2013-11-06  Dodji Seketeli  <dodji@redhat.com>\n \n \tpreprocessor/58580"}, {"sha": "a8849fb9e6c9483af2651cb32291c3b890304f62", "filename": "gcc/testsuite/c-c++-common/cilk-plus/CK/fib.c", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d31e407447df98a843559b204bc01c40577555/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Ffib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d31e407447df98a843559b204bc01c40577555/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Ffib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Ffib.c?ref=28d31e407447df98a843559b204bc01c40577555", "patch": "@@ -9,41 +9,34 @@\n int fib        (int);\n int fib_serial (int);\n \n+#define FIB_ITERATION  30\n+\n int main(void)\n {\n-  int ii = 0, error = 0;\n-  int fib_result[41], fib_serial_result[41];\n+  int ii = 0;\n+  int fib_result[FIB_ITERATION+1], fib_serial_result[FIB_ITERATION+1];\n #if HAVE_IO\n \n-  for (ii = 0; ii <= 40; ii++)\n+  for (ii = 0; ii <= FIB_ITERATION; ii++)\n     printf(\"fib (%2d) = %10d\\n\", ii, fib (ii));\n #else\n-  for (ii = 0; ii <= 40; ii++)\n+  for (ii = 0; ii <= FIB_ITERATION; ii++)\n     {\n       fib_result[ii]        = fib (ii);\n-      fib_serial_result[ii] = fib_serial (ii);\n     }\n \n-  for (ii = 0; ii <= 40; ii++)\n+  fib_serial_result[0] = 0;\n+  fib_serial_result[1] = 1;\n+  for (ii = 2; ii <= FIB_ITERATION; ii++)\n+    fib_serial_result[ii] = fib_serial_result[ii-1] + fib_serial_result[ii-2];\n+  \n+  for (ii = 0; ii <= FIB_ITERATION; ii++)\n     {\n       if (fib_result[ii] != fib_serial_result[ii])\n-\terror = 1;\n+\t__builtin_abort ();\n     }\n #endif\n-  return error;\n-}\n-\n-int fib_serial (int n)\n-{\n-  int x = 0, y = 0;\n-  if (n < 2)\n-    return n;\n-  else\n-    {\n-      x = fib (n-1);\n-      y = fib (n-2);\n-      return (x+y);\n-    }\n+  return 0;\n }\n \n int fib(int n)"}, {"sha": "0196a8daba8eaaa6c02078ee7f77d91853608dcc", "filename": "gcc/testsuite/c-c++-common/cilk-plus/CK/fib_init_expr_xy.c", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d31e407447df98a843559b204bc01c40577555/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Ffib_init_expr_xy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d31e407447df98a843559b204bc01c40577555/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Ffib_init_expr_xy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Ffib_init_expr_xy.c?ref=28d31e407447df98a843559b204bc01c40577555", "patch": "@@ -9,28 +9,36 @@\n int fib        (int);\n int fib_serial (int);\n \n+#define FIB_ITERATION 30\n+\n int main(void)\n {\n-  int ii = 0, error = 0;\n-  int fib_result[41], fib_serial_result[41];\n+  int ii = 0;\n+  int fib_result[FIB_ITERATION+1], fib_serial_result[FIB_ITERATION+1];\n #if HAVE_IO\n \n-  for (ii = 0; ii <= 40; ii++)\n+  for (ii = 0; ii <= FIB_ITERATION; ii++)\n     printf(\"fib (%2d) = %10d\\n\", ii, fib (ii));\n #else\n-  for (ii = 0; ii <= 40; ii++)\n+    for (ii = 0; ii <= FIB_ITERATION; ii++)\n     {\n       fib_result[ii]        = fib (ii);\n-      fib_serial_result[ii] = fib_serial (ii);\n     }\n \n-  for (ii = 0; ii <= 40; ii++)\n+  fib_serial_result[0] = 0;\n+  fib_serial_result[1] = 1;\n+  \n+  for (ii = 2; ii <= FIB_ITERATION; ii++)\n+    fib_serial_result[ii] = fib_serial_result[ii-1] + fib_serial_result[ii-2];\n+  \n+  for (ii = 0; ii <= FIB_ITERATION; ii++)\n     {\n       if (fib_result[ii] != fib_serial_result[ii])\n-\terror = 1;\n+\t__builtin_abort ();\n     }\n+\n #endif\n-  return error;\n+  return 0;\n }\n \n int fib_serial (int n)\n@@ -40,8 +48,8 @@ int fib_serial (int n)\n     return n;\n   else\n     {\n-      x = fib (n-1);\n-      y = fib (n-2);\n+      x = fib_serial (n-1);\n+      y = fib_serial (n-2);\n       return (x+y);\n     }\n }"}, {"sha": "47ebef52030c0cc725461aa3ea9e715b7fc1bcc3", "filename": "gcc/testsuite/c-c++-common/cilk-plus/CK/fib_no_return.c", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d31e407447df98a843559b204bc01c40577555/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Ffib_no_return.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d31e407447df98a843559b204bc01c40577555/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Ffib_no_return.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Ffib_no_return.c?ref=28d31e407447df98a843559b204bc01c40577555", "patch": "@@ -6,35 +6,43 @@\n #include <stdio.h>\n #endif\n \n+#define FIB_ITERATION 30\n+\n void fib        (int *, int);\n int fib_serial (int);\n \n int main(void)\n {\n   int ii = 0, error = 0;\n-  int fib_result[41], fib_serial_result[41];\n+  int fib_result[FIB_ITERATION+1], fib_serial_result[FIB_ITERATION+1];\n \n #if HAVE_IO\n-  for (ii = 0; ii <= 40; ii++)\n+  for (ii = 0; ii <= FIB_ITERATION; ii++)\n     {\n       int result = 0;\n       fib (&result, ii); \n       printf(\"fib (%2d) = %10d\\n\", ii, result);\n     }\n #else\n-  for (ii = 0; ii <= 40; ii++)\n+  for (ii = 0; ii <= FIB_ITERATION; ii++)\n     {\n       fib (&fib_result[ii], ii);\n-      fib_serial_result[ii] = fib_serial (ii);\n     }\n-\n-  for (ii = 0; ii <= 40; ii++)\n+  \n+  fib_serial_result[0] = 0;\n+  fib_serial_result[1] = 1;\n+  \n+  for (ii = 2; ii <= FIB_ITERATION; ii++)\n+    fib_serial_result[ii] = fib_serial_result[ii-1] + fib_serial_result[ii-2];\n+  \n+  for (ii = 0; ii <= FIB_ITERATION; ii++)\n     {\n       if (fib_result[ii] != fib_serial_result[ii])\n-\terror = 1;\n+\t__builtin_abort ();\n     }\n #endif\n-  return error;\n+  \n+  return 0;\n }\n \n int fib_serial (int n)\n@@ -44,8 +52,8 @@ int fib_serial (int n)\n     return n;\n   else\n     {\n-      fib (&x, n-1);\n-      fib (&y, n-2);\n+      x = fib_serial (n-1);\n+      y = fib_serial (n-2);\n       return (x+y);\n     }\n }"}, {"sha": "a23051d48199f4e373245c9ebf3aed287aa02512", "filename": "gcc/testsuite/c-c++-common/cilk-plus/CK/fib_no_sync.c", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d31e407447df98a843559b204bc01c40577555/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Ffib_no_sync.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d31e407447df98a843559b204bc01c40577555/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Ffib_no_sync.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Ffib_no_sync.c?ref=28d31e407447df98a843559b204bc01c40577555", "patch": "@@ -6,31 +6,39 @@\n #include <stdio.h>\n #endif\n \n+#define FIB_ITERATION 30\n+\n int fib        (int);\n int fib_serial (int);\n \n int main(void)\n {\n-  int ii = 0, error = 0;\n-  int fib_result[41], fib_serial_result[41];\n+  int ii = 0;\n+  int fib_result[FIB_ITERATION+1], fib_serial_result[FIB_ITERATION+1];\n #if HAVE_IO\n \n-  for (ii = 0; ii <= 40; ii++)\n+  for (ii = 0; ii <= FIB_ITERATION; ii++)\n     printf(\"fib (%2d) = %10d\\n\", ii, fib (ii));\n #else\n-  for (ii = 0; ii <= 40; ii++)\n+  for (ii = 0; ii <= FIB_ITERATION; ii++)\n     {\n       fib_result[ii]        = fib (ii);\n-      fib_serial_result[ii] = fib_serial (ii);\n     }\n \n-  for (ii = 0; ii <= 40; ii++)\n+  fib_serial_result[0] = 0;\n+  fib_serial_result[1] = 1;\n+  \n+  for (ii = 2; ii <= FIB_ITERATION; ii++)\n+    fib_serial_result[ii] = fib_serial_result[ii-1] + fib_serial_result[ii-2];\n+  \n+  for (ii = 0; ii <= FIB_ITERATION; ii++)\n     {\n       if (fib_result[ii] != fib_serial_result[ii])\n-\terror = 1;\n+\t__builtin_abort ();\n     }\n+\n #endif\n-  return error;\n+  return 0;\n }\n \n int fib_serial (int n)\n@@ -40,8 +48,8 @@ int fib_serial (int n)\n     return n;\n   else\n     {\n-      x = fib (n-1);\n-      y = fib (n-2);\n+      x = fib_serial (n-1);\n+      y = fib_serial (n-2);\n       return (x+y);\n     }\n }"}, {"sha": "3a3cba80a702c51bd82556290914716a28b6ebb2", "filename": "gcc/testsuite/gcc.dg/cilk-plus/cilk-plus.exp", "status": "modified", "additions": 9, "deletions": 38, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d31e407447df98a843559b204bc01c40577555/gcc%2Ftestsuite%2Fgcc.dg%2Fcilk-plus%2Fcilk-plus.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d31e407447df98a843559b204bc01c40577555/gcc%2Ftestsuite%2Fgcc.dg%2Fcilk-plus%2Fcilk-plus.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcilk-plus%2Fcilk-plus.exp?ref=28d31e407447df98a843559b204bc01c40577555", "patch": "@@ -33,52 +33,23 @@ lappend ALWAYS_CFLAGS \"-L${library_var}/libcilkrts/.libs\"\n \n dg-init\n dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -O0 -fcilkplus\" \" \"\n dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -O1 -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -O2 -ftree-vectorize -fcilkplus\" \" \"\n+dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -O2 -fcilkplus\" \" \"\n dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -O3 -fcilkplus\" \" \"\n dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -g -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -g -O0 -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -g -O1 -fcilkplus\" \" \"\n dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -g -O2 -ftree-vectorize -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -g -O3 -fcilkplus\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -O3 -ftree-vectorize -fcilkplus -g\" \" \"\n dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -fcilkplus -std=c99\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -fcilkplus -O0 -std=c99\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -fcilkplus -O1 -std=c99\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -fcilkplus -O2 -ftree-vectorize -std=c99\" \" \"\n+dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -fcilkplus -O2 -std=c99\" \" \"\n dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -fcilkplus -O3 -std=c99\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -fcilkplus -g -std=c99\" \" \"\n dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -fcilkplus -g -O0 -std=c99\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -fcilkplus -g -O1 -std=c99\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -fcilkplus -g -O2 -ftree-vectorize -std=c99\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -fcilkplus -g -O3 -std=c99\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/AN/*.c]] \" -O3 -ftree-vectorize -std=c99 -g -fcilkplus\" \" \"\n \n-\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -fcilkplus $ALWAYS_CFLAGS \" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O0 -fcilkplus $ALWAYS_CFLAGS\" \" \"\n+dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -g -fcilkplus $ALWAYS_CFLAGS \" \" \"\n dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O1 -fcilkplus $ALWAYS_CFLAGS\" \" \"\n+dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O2 -std=c99 -fcilkplus $ALWAYS_CFLAGS\" \" \"\n dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O2 -ftree-vectorize -fcilkplus $ALWAYS_CFLAGS\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O3 -fcilkplus $ALWAYS_CFLAGS\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -g -fcilkplus $ALWAYS_CFLAGS\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -g -O0 -fcilkplus $ALWAYS_CFLAGS\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -g -O1 -fcilkplus $ALWAYS_CFLAGS\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -g -O2 -ftree-vectorize -fcilkplus $ALWAYS_CFLAGS\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -g -O3 -fcilkplus $ALWAYS_CFLAGS\"  \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O3 -ftree-vectorize -fcilkplus -g $ALWAYS_CFLAGS\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -fcilkplus -std=c99 $ALWAYS_CFLAGS\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -fcilkplus -O0 -std=c99 $ALWAYS_CFLAGS\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -fcilkplus -O1 -std=c99 $ALWAYS_CFLAGS\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -fcilkplus -O2 -ftree-vectorize -std=c99 $ALWAYS_CFLAGS\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -fcilkplus -O3 -std=c99 $ALWAYS_CFLAGS\"  \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -fcilkplus -g -std=c99 $ALWAYS_CFLAGS\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -fcilkplus -g -O0 -std=c99 $ALWAYS_CFLAGS\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -fcilkplus -g -O1 -std=c99 $ALWAYS_CFLAGS\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -fcilkplus -g -O2 -ftree-vectorize -std=c99 $ALWAYS_CFLAGS\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -fcilkplus -g -O3 -std=c99 $ALWAYS_CFLAGS\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O3 -ftree-vectorize -std=c99 -g -fcilkplus $ALWAYS_CFLAGS\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O0 -flto -g -fcilkplus $ALWAYS_CFLAGS\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O2 -flto -g -fcilkplus $ALWAYS_CFLAGS\" \" \"\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O3  -flto -g -fcilkplus $ALWAYS_CFLAGS\" \" \"\n+dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O3 -g -fcilkplus $ALWAYS_CFLAGS\" \" \"\n+dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O3 -flto -g -fcilkplus $ALWAYS_CFLAGS\" \" \"\n+\n+\n+\n dg-finish"}]}