{"sha": "c6b7f68bfd61fcd02842e672476f9924d5ba1d3c", "node_id": "C_kwDOANBUbNoAKGM2YjdmNjhiZmQ2MWZjZDAyODQyZTY3MjQ3NmY5OTI0ZDViYTFkM2M", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2021-12-12T00:01:15Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2021-12-12T00:01:15Z"}, "message": "libgccjit: Add support for TLS variable [PR95415]\n\n2021-12-11  Antoni Boucher  <bouanto@zoho.com>\n\ngcc/jit/\n\tPR target/95415\n\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_17): New ABI\n\ttag.\n\t* docs/topics/expressions.rst: Add document for the function\n\tgcc_jit_lvalue_set_tls_model.\n\t* jit-playback.h: New function (set_tls_model).\n\t* jit-recording.c: New function (set_tls_model), new\n\tvariables (tls_models and tls_model_enum_strings) and support\n\tfor setting the tls model.\n\t* jit-recording.h: New function (set_tls_model) and new\n\tfield m_tls_model.\n\t* libgccjit.c: New function (gcc_jit_lvalue_set_tls_model).\n\t* libgccjit.h: New function (gcc_jit_lvalue_set_tls_model)\n\tand new enum (gcc_jit_tls_model).\n\t* libgccjit.map (LIBGCCJIT_ABI_17): New ABI tag.\n\ngcc/testsuite/\n\tPR target/95415\n\t* jit.dg/all-non-failing-tests.h: Add test-tls.c.\n\t* jit.dg/test-tls.c: New test.", "tree": {"sha": "ee9a6a1ee8b03fc90e4ea5493336cdd407988975", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee9a6a1ee8b03fc90e4ea5493336cdd407988975"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6b7f68bfd61fcd02842e672476f9924d5ba1d3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b7f68bfd61fcd02842e672476f9924d5ba1d3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6b7f68bfd61fcd02842e672476f9924d5ba1d3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b7f68bfd61fcd02842e672476f9924d5ba1d3c/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "611fdb0fc5b95ee15215e2e3679834f311919096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/611fdb0fc5b95ee15215e2e3679834f311919096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/611fdb0fc5b95ee15215e2e3679834f311919096"}], "stats": {"total": 216, "additions": 212, "deletions": 4}, "files": [{"sha": "2ad6e4232f73529c082d2e0b5f362afbf87503b6", "filename": "gcc/jit/docs/topics/compatibility.rst", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b7f68bfd61fcd02842e672476f9924d5ba1d3c/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b7f68bfd61fcd02842e672476f9924d5ba1d3c/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst?ref=c6b7f68bfd61fcd02842e672476f9924d5ba1d3c", "patch": "@@ -284,3 +284,12 @@ entrypoints:\n   * :func:`gcc_jit_struct_get_field`\n \n   * :func:`gcc_jit_struct_get_field_count`\n+\n+.. _LIBGCCJIT_ABI_17:\n+\n+``LIBGCCJIT_ABI_17``\n+-----------------------\n+``LIBGCCJIT_ABI_17`` covers the addition of an API entrypoint to set the\n+thread-local storage model of a variable:\n+\n+  * :func:`gcc_jit_lvalue_set_tls_model`"}, {"sha": "386b80d8f8b34374e953b88007f20e5622402ab9", "filename": "gcc/jit/docs/topics/expressions.rst", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b7f68bfd61fcd02842e672476f9924d5ba1d3c/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b7f68bfd61fcd02842e672476f9924d5ba1d3c/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst?ref=c6b7f68bfd61fcd02842e672476f9924d5ba1d3c", "patch": "@@ -539,6 +539,43 @@ where the rvalue is computed by reading from the storage area.\n \n    in C.\n \n+.. function:: void\\\n+              gcc_jit_lvalue_set_tls_model (gcc_jit_lvalue *lvalue,\\\n+                                            enum gcc_jit_tls_model model)\n+\n+   Make a variable a thread-local variable.\n+\n+   The \"model\" parameter determines the thread-local storage model of the \"lvalue\":\n+\n+   .. type:: enum gcc_jit_tls_model\n+\n+   .. c:macro:: GCC_JIT_TLS_MODEL_NONE\n+\n+      Don't set the TLS model.\n+\n+   .. c:macro:: GCC_JIT_TLS_MODEL_GLOBAL_DYNAMIC\n+\n+   .. c:macro:: GCC_JIT_TLS_MODEL_LOCAL_DYNAMIC\n+\n+   .. c:macro:: GCC_JIT_TLS_MODEL_INITIAL_EXEC\n+\n+   .. c:macro:: GCC_JIT_TLS_MODEL_LOCAL_EXEC\n+\n+   This is analogous to:\n+\n+   .. code-block:: c\n+\n+     _Thread_local int foo __attribute__ ((tls_model(\"MODEL\")));\n+\n+   in C.\n+\n+   This entrypoint was added in :ref:`LIBGCCJIT_ABI_17`; you can test for\n+   its presence using\n+\n+   .. code-block:: c\n+\n+      #ifdef LIBGCCJIT_HAVE_gcc_jit_lvalue_set_tls_model\n+\n Global variables\n ****************\n "}, {"sha": "c9839c21a66439552f4afc2bcd81a974296936de", "filename": "gcc/jit/jit-playback.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b7f68bfd61fcd02842e672476f9924d5ba1d3c/gcc%2Fjit%2Fjit-playback.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b7f68bfd61fcd02842e672476f9924d5ba1d3c/gcc%2Fjit%2Fjit-playback.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.h?ref=c6b7f68bfd61fcd02842e672476f9924d5ba1d3c", "patch": "@@ -675,6 +675,12 @@ class lvalue : public rvalue\n   rvalue *\n   get_address (location *loc);\n \n+  void\n+  set_tls_model (enum tls_model tls_model)\n+  {\n+    set_decl_tls_model (as_tree (), tls_model);\n+  }\n+\n private:\n   bool mark_addressable (location *loc);\n };"}, {"sha": "5ba35bda44c4421a1af460f4ed98346ba10180ee", "filename": "gcc/jit/jit-recording.c", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b7f68bfd61fcd02842e672476f9924d5ba1d3c/gcc%2Fjit%2Fjit-recording.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b7f68bfd61fcd02842e672476f9924d5ba1d3c/gcc%2Fjit%2Fjit-recording.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.c?ref=c6b7f68bfd61fcd02842e672476f9924d5ba1d3c", "patch": "@@ -3718,6 +3718,12 @@ recording::lvalue::get_address (recording::location *loc)\n   return result;\n }\n \n+void\n+recording::lvalue::set_tls_model (enum gcc_jit_tls_model model)\n+{\n+    m_tls_model = model;\n+}\n+\n /* The implementation of class gcc::jit::recording::param.  */\n \n /* Implementation of pure virtual hook recording::memento::replay_into\n@@ -4544,6 +4550,16 @@ recording::block::dump_edges_to_dot (pretty_printer *pp)\n #  pragma GCC diagnostic pop\n #endif\n \n+namespace recording {\n+static const enum tls_model tls_models[] = {\n+  TLS_MODEL_NONE, /* GCC_JIT_TLS_MODEL_NONE */\n+  TLS_MODEL_GLOBAL_DYNAMIC, /* GCC_JIT_TLS_MODEL_GLOBAL_DYNAMIC */\n+  TLS_MODEL_LOCAL_DYNAMIC, /* GCC_JIT_TLS_MODEL_LOCAL_DYNAMIC */\n+  TLS_MODEL_INITIAL_EXEC, /* GCC_JIT_TLS_MODEL_INITIAL_EXEC */\n+  TLS_MODEL_LOCAL_EXEC, /* GCC_JIT_TLS_MODEL_LOCAL_EXEC */\n+};\n+} /* namespace recording */\n+\n /* The implementation of class gcc::jit::recording::global.  */\n \n /* Implementation of pure virtual hook recording::memento::replay_into\n@@ -4552,8 +4568,7 @@ recording::block::dump_edges_to_dot (pretty_printer *pp)\n void\n recording::global::replay_into (replayer *r)\n {\n-  set_playback_obj (\n-    m_initializer\n+    playback::lvalue *global = m_initializer\n     ? r->new_global_initialized (playback_location (r, m_loc),\n \t\t\t\t m_kind,\n \t\t\t\t m_type->playback_type (),\n@@ -4565,7 +4580,11 @@ recording::global::replay_into (replayer *r)\n     : r->new_global (playback_location (r, m_loc),\n \t\t     m_kind,\n \t\t     m_type->playback_type (),\n-\t\t     playback_string (m_name)));\n+\t\t     playback_string (m_name));\n+  if (m_tls_model != GCC_JIT_TLS_MODEL_NONE)\n+    global->set_tls_model (recording::tls_models[m_tls_model]);\n+\n+  set_playback_obj (global);\n }\n \n /* Override the default implementation of\n@@ -4663,6 +4682,14 @@ recording::global::write_initializer_reproducer (const char *id, reproducer &r)\n \n /* Implementation of recording::memento::write_reproducer for globals. */\n \n+static const char * const tls_model_enum_strings[] = {\n+  \"GCC_JIT_TLS_MODEL_NONE\",\n+  \"GCC_JIT_TLS_MODEL_GLOBAL_DYNAMIC\",\n+  \"GCC_JIT_TLS_MODEL_LOCAL_DYNAMIC\",\n+  \"GCC_JIT_TLS_MODEL_INITIAL_EXEC\",\n+  \"GCC_JIT_TLS_MODEL_LOCAL_EXEC\",\n+};\n+\n void\n recording::global::write_reproducer (reproducer &r)\n {\n@@ -4680,6 +4707,12 @@ recording::global::write_reproducer (reproducer &r)\n     r.get_identifier_as_type (get_type ()),\n     m_name->get_debug_string ());\n \n+  if (m_tls_model != GCC_JIT_TLS_MODEL_NONE)\n+    r.write (\"  gcc_jit_lvalue_set_tls_model (%s, /* gcc_jit_lvalue *lvalue */\\n\"\n+\t     \"                                %s); /* enum gcc_jit_tls_model model */\\n\",\n+\t     id,\n+\t     tls_model_enum_strings[m_tls_model]);\n+\n   if (m_initializer)\n     switch (m_type->dereference ()->get_size ())\n       {"}, {"sha": "72fa30c631e3a06f77290ef8cf708f6d04d49a77", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b7f68bfd61fcd02842e672476f9924d5ba1d3c/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b7f68bfd61fcd02842e672476f9924d5ba1d3c/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=c6b7f68bfd61fcd02842e672476f9924d5ba1d3c", "patch": "@@ -1132,7 +1132,8 @@ class lvalue : public rvalue\n   lvalue (context *ctxt,\n \t  location *loc,\n \t  type *type_)\n-    : rvalue (ctxt, loc, type_)\n+    : rvalue (ctxt, loc, type_),\n+    m_tls_model (GCC_JIT_TLS_MODEL_NONE)\n     {}\n \n   playback::lvalue *\n@@ -1154,6 +1155,10 @@ class lvalue : public rvalue\n   const char *access_as_rvalue (reproducer &r) OVERRIDE;\n   virtual const char *access_as_lvalue (reproducer &r);\n   virtual bool is_global () const { return false; }\n+  void set_tls_model (enum gcc_jit_tls_model model);\n+\n+protected:\n+  enum gcc_jit_tls_model m_tls_model;\n };\n \n class param : public lvalue"}, {"sha": "7ccb76a6a194aa395c4f78eba886696bfa64ce1d", "filename": "gcc/jit/libgccjit.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b7f68bfd61fcd02842e672476f9924d5ba1d3c/gcc%2Fjit%2Flibgccjit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b7f68bfd61fcd02842e672476f9924d5ba1d3c/gcc%2Fjit%2Flibgccjit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.c?ref=c6b7f68bfd61fcd02842e672476f9924d5ba1d3c", "patch": "@@ -2217,6 +2217,24 @@ gcc_jit_lvalue_get_address (gcc_jit_lvalue *lvalue,\n   return (gcc_jit_rvalue *)lvalue->get_address (loc);\n }\n \n+/* Public entrypoint.  See description in libgccjit.h.\n+\n+   After error-checking, the real work is done by the\n+   gcc::jit::recording::lvalue::set_tls_model method in jit-recording.c.  */\n+\n+void\n+gcc_jit_lvalue_set_tls_model (gcc_jit_lvalue *lvalue,\n+\t\t\t    enum gcc_jit_tls_model model)\n+{\n+  RETURN_IF_FAIL (lvalue, NULL, NULL, \"NULL lvalue\");\n+  JIT_LOG_FUNC (lvalue->get_context ()->get_logger ());\n+  RETURN_IF_FAIL_PRINTF1 (lvalue->is_global (), lvalue->get_context (), NULL,\n+\t\t\t       \"lvalue \\\"%s\\\" not a global\",\n+\t\t\t       lvalue->get_debug_string ());\n+\n+  lvalue->set_tls_model (model);\n+}\n+\n /* Public entrypoint.  See description in libgccjit.h.\n \n    After error-checking, the real work is done by the"}, {"sha": "5aa2e40c7a4cbee74de0c3c8f03cbe1306d41bc8", "filename": "gcc/jit/libgccjit.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b7f68bfd61fcd02842e672476f9924d5ba1d3c/gcc%2Fjit%2Flibgccjit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b7f68bfd61fcd02842e672476f9924d5ba1d3c/gcc%2Fjit%2Flibgccjit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.h?ref=c6b7f68bfd61fcd02842e672476f9924d5ba1d3c", "patch": "@@ -739,6 +739,16 @@ enum gcc_jit_function_kind\n   GCC_JIT_FUNCTION_ALWAYS_INLINE\n };\n \n+/* Thread local storage model.  */\n+enum gcc_jit_tls_model\n+{\n+  GCC_JIT_TLS_MODEL_NONE,\n+  GCC_JIT_TLS_MODEL_GLOBAL_DYNAMIC,\n+  GCC_JIT_TLS_MODEL_LOCAL_DYNAMIC,\n+  GCC_JIT_TLS_MODEL_INITIAL_EXEC,\n+  GCC_JIT_TLS_MODEL_LOCAL_EXEC,\n+};\n+\n /* Create a function.  */\n extern gcc_jit_function *\n gcc_jit_context_new_function (gcc_jit_context *ctxt,\n@@ -1089,6 +1099,17 @@ extern gcc_jit_rvalue *\n gcc_jit_lvalue_get_address (gcc_jit_lvalue *lvalue,\n \t\t\t    gcc_jit_location *loc);\n \n+#define LIBGCCJIT_HAVE_gcc_jit_lvalue_set_tls_model\n+\n+/* Set the thread-local storage model of a global variable\n+\n+   This API entrypoint was added in LIBGCCJIT_ABI_17; you can test for its\n+   presence using\n+     #ifdef LIBGCCJIT_HAVE_gcc_jit_lvalue_set_tls_model  */\n+extern void\n+gcc_jit_lvalue_set_tls_model (gcc_jit_lvalue *lvalue,\n+\t\t\t    enum gcc_jit_tls_model model);\n+\n extern gcc_jit_lvalue *\n gcc_jit_function_new_local (gcc_jit_function *func,\n \t\t\t    gcc_jit_location *loc,"}, {"sha": "98d693fd00ce86205e05d2ad725fa12e5d002a00", "filename": "gcc/jit/libgccjit.map", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b7f68bfd61fcd02842e672476f9924d5ba1d3c/gcc%2Fjit%2Flibgccjit.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b7f68bfd61fcd02842e672476f9924d5ba1d3c/gcc%2Fjit%2Flibgccjit.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.map?ref=c6b7f68bfd61fcd02842e672476f9924d5ba1d3c", "patch": "@@ -226,3 +226,8 @@ LIBGCCJIT_ABI_16 {\n     gcc_jit_type_is_struct;\n     gcc_jit_struct_get_field_count;\n } LIBGCCJIT_ABI_15;\n+\n+LIBGCCJIT_ABI_17 {\n+  global:\n+    gcc_jit_lvalue_set_tls_model;\n+} LIBGCCJIT_ABI_16;"}, {"sha": "350a30b3328270d586ff00a2478bd8c241130fe0", "filename": "gcc/testsuite/jit.dg/all-non-failing-tests.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b7f68bfd61fcd02842e672476f9924d5ba1d3c/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b7f68bfd61fcd02842e672476f9924d5ba1d3c/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h?ref=c6b7f68bfd61fcd02842e672476f9924d5ba1d3c", "patch": "@@ -195,6 +195,13 @@\n #undef create_code\n #undef verify_code\n \n+/* test-tls.c */\n+#define create_code create_code_tls\n+#define verify_code verify_code_tls\n+#include \"test-tls.c\"\n+#undef create_code\n+#undef verify_code\n+\n /* test-hello-world.c */\n #define create_code create_code_hello_world\n #define verify_code verify_code_hello_world\n@@ -466,6 +473,9 @@ const struct testcase testcases[] = {\n   {\"switch\",\n    create_code_switch,\n    verify_code_switch},\n+  {\"tls\",\n+   create_code_tls,\n+   verify_code_tls},\n   {\"types\",\n    create_code_types,\n    verify_code_types},"}, {"sha": "3b20182ac1071142111919dca41d576a1e09602b", "filename": "gcc/testsuite/jit.dg/test-tls.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b7f68bfd61fcd02842e672476f9924d5ba1d3c/gcc%2Ftestsuite%2Fjit.dg%2Ftest-tls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b7f68bfd61fcd02842e672476f9924d5ba1d3c/gcc%2Ftestsuite%2Fjit.dg%2Ftest-tls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-tls.c?ref=c6b7f68bfd61fcd02842e672476f9924d5ba1d3c", "patch": "@@ -0,0 +1,64 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include <time.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* Let's try to inject the equivalent of:\n+\n+     _Thread_local int foo;\n+\n+     int test_using_tls()\n+     {\n+      foo = 42;\n+      return foo;\n+     }\n+  */\n+  gcc_jit_type *int_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+\n+  gcc_jit_lvalue *foo =\n+    gcc_jit_context_new_global (\n+      ctxt, NULL, GCC_JIT_GLOBAL_EXPORTED, int_type, \"foo\");\n+  gcc_jit_lvalue_set_tls_model (foo, GCC_JIT_TLS_MODEL_GLOBAL_DYNAMIC);\n+\n+  /* Build the test_fn.  */\n+  gcc_jit_function *test_fn =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t  int_type,\n+\t\t\t\t  \"test_using_tls\",\n+\t\t\t\t  0, NULL,\n+\t\t\t\t  0);\n+  gcc_jit_block *block = gcc_jit_function_new_block (test_fn, NULL);\n+  gcc_jit_block_add_assignment (\n+    block, NULL,\n+    foo,\n+    gcc_jit_context_new_rvalue_from_int (ctxt, int_type, 42));\n+  gcc_jit_block_end_with_return (block,\n+\t\t\t\t NULL,\n+\t\t\t\t gcc_jit_lvalue_as_rvalue (foo));\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  typedef int (*fn_type) (void);\n+  CHECK_NON_NULL (result);\n+\n+  fn_type test_using_tls =\n+    (fn_type)gcc_jit_result_get_code (result, \"test_using_tls\");\n+  CHECK_NON_NULL (test_using_tls);\n+  int return_value = test_using_tls();\n+  CHECK_VALUE (return_value, 42);\n+\n+  int *foo = (int *)gcc_jit_result_get_global (result, \"foo\");\n+  CHECK_NON_NULL (foo);\n+  CHECK_VALUE (*foo, 42);\n+}"}]}