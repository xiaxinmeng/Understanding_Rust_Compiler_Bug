{"sha": "d5ae0ba6636d9d5e8b24b0859b860365aa4d943c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVhZTBiYTY2MzZkOWQ1ZThiMjRiMDg1OWI4NjAzNjVhYTRkOTQzYw==", "commit": {"author": {"name": "Teresa Johnson", "email": "tejohnson@google.com", "date": "2012-12-20T14:31:09Z"}, "committer": {"name": "Teresa Johnson", "email": "tejohnson@gcc.gnu.org", "date": "2012-12-20T14:31:09Z"}, "message": "Fix PR gcov-profile/55734 by using methods from hwint.c instead of builtins...\n\nFix PR gcov-profile/55734 by using methods from hwint.c instead of\nbuiltins, to handle non-GCC and older versions of GCC. When building\nlibgcov.a, however, hwint.c is not available, but we are always using\nthe bootstrapped compiler and can therefore use the builtins.\n\nUse __builtin_popcount instead of __builtin_popcountll, since we\nare operating on an int.\n\nUse floor_log2 directly, instead of clz_hwi for the non-libgcov case,\nand handle situations where the size of the gcov_type is bigger than\nHOST_WIDE_INT. Verified that the various cases compiled by forcing\ndifferent HOST_BITS_PER_WIDE_INT values.\n\n2012-12-20  Teresa Johnson  <tejohnson@google.com>\n            Jakub Jelinek  <jakub@redhat.com>\n\n        PR gcov-profile/55734\n\t* gcov-io.c (gcov_read_summary): Use __builtin_popcount instead\n        of __builtin_popcountll when building libgcov.a, otherwise use\n        popcount_hwi.\n\t(gcov_histo_index): When not building libgcov.a, use floor_log2\n        instead of __builtin_clzll.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r194634", "tree": {"sha": "e5a6383c98a0438b7479e18dbadac925bec0cc5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5a6383c98a0438b7479e18dbadac925bec0cc5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5ae0ba6636d9d5e8b24b0859b860365aa4d943c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5ae0ba6636d9d5e8b24b0859b860365aa4d943c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5ae0ba6636d9d5e8b24b0859b860365aa4d943c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5ae0ba6636d9d5e8b24b0859b860365aa4d943c/comments", "author": {"login": "teresajohnson", "id": 20446403, "node_id": "MDQ6VXNlcjIwNDQ2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/20446403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teresajohnson", "html_url": "https://github.com/teresajohnson", "followers_url": "https://api.github.com/users/teresajohnson/followers", "following_url": "https://api.github.com/users/teresajohnson/following{/other_user}", "gists_url": "https://api.github.com/users/teresajohnson/gists{/gist_id}", "starred_url": "https://api.github.com/users/teresajohnson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teresajohnson/subscriptions", "organizations_url": "https://api.github.com/users/teresajohnson/orgs", "repos_url": "https://api.github.com/users/teresajohnson/repos", "events_url": "https://api.github.com/users/teresajohnson/events{/privacy}", "received_events_url": "https://api.github.com/users/teresajohnson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "63f2ff0f23d633aad769997ec617ce2177c311ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63f2ff0f23d633aad769997ec617ce2177c311ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63f2ff0f23d633aad769997ec617ce2177c311ec"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "ca9844f4b44db77df9a2727a055deb9a8f339fbe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ae0ba6636d9d5e8b24b0859b860365aa4d943c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ae0ba6636d9d5e8b24b0859b860365aa4d943c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5ae0ba6636d9d5e8b24b0859b860365aa4d943c", "patch": "@@ -1,3 +1,13 @@\n+2012-12-20  Teresa Johnson  <tejohnson@google.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR gcov-profile/55734\n+\t* gcov-io.c (gcov_read_summary): Use __builtin_popcount instead\n+\tof __builtin_popcountll when building libgcov.a, otherwise use\n+\tpopcount_hwi.\n+\t(gcov_histo_index): When not building libgcov.a, use floor_log2\n+\tinstead of __builtin_clzll.\n+\n 2012-12-20  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/55740"}, {"sha": "f4cb0acc1a7a7746f233770a1a6f68866539267a", "filename": "gcc/gcov-io.c", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ae0ba6636d9d5e8b24b0859b860365aa4d943c/gcc%2Fgcov-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ae0ba6636d9d5e8b24b0859b860365aa4d943c/gcc%2Fgcov-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.c?ref=d5ae0ba6636d9d5e8b24b0859b860365aa4d943c", "patch": "@@ -538,7 +538,15 @@ gcov_read_summary (struct gcov_summary *summary)\n       for (bv_ix = 0; bv_ix < GCOV_HISTOGRAM_BITVECTOR_SIZE; bv_ix++)\n         {\n           histo_bitvector[bv_ix] = gcov_read_unsigned ();\n-          h_cnt += __builtin_popcountll (histo_bitvector[bv_ix]);\n+#if IN_LIBGCOV\n+          /* When building libgcov we don't include system.h, which includes\n+             hwint.h (where popcount_hwi is declared). However, libgcov.a\n+             is built by the bootstrapped compiler and therefore the builtins\n+             are always available.  */\n+          h_cnt += __builtin_popcount (histo_bitvector[bv_ix]);\n+#else\n+          h_cnt += popcount_hwi (histo_bitvector[bv_ix]);\n+#endif\n         }\n       bv_ix = 0;\n       h_ix = 0;\n@@ -642,7 +650,31 @@ gcov_histo_index (gcov_type value)\n \n   /* Find the place of the most-significant bit set.  */\n   if (v > 0)\n-    r = 63 - __builtin_clzll (v);\n+    {\n+#if IN_LIBGCOV\n+      /* When building libgcov we don't include system.h, which includes\n+         hwint.h (where floor_log2 is declared). However, libgcov.a\n+         is built by the bootstrapped compiler and therefore the builtins\n+         are always available.  */\n+      r = sizeof (long long) * __CHAR_BIT__ - 1 - __builtin_clzll (v);\n+#else\n+      /* We use floor_log2 from hwint.c, which takes a HOST_WIDE_INT\n+         that is either 32 or 64 bits, and gcov_type_unsigned may be 64 bits.\n+         Need to check for the case where gcov_type_unsigned is 64 bits\n+         and HOST_WIDE_INT is 32 bits and handle it specially.  */\n+#if HOST_BITS_PER_WIDEST_INT == HOST_BITS_PER_WIDE_INT\n+      r = floor_log2 (v);\n+#elif HOST_BITS_PER_WIDEST_INT == 2 * HOST_BITS_PER_WIDE_INT\n+      HOST_WIDE_INT hwi_v = v >> HOST_BITS_PER_WIDE_INT;\n+      if (hwi_v)\n+        r = floor_log2 (hwi_v) + HOST_BITS_PER_WIDE_INT;\n+      else\n+        r = floor_log2 ((HOST_WIDE_INT)v);\n+#else\n+      gcc_unreachable ();\n+#endif\n+#endif\n+    }\n \n   /* If at most the 2 least significant bits are set (value is\n      0 - 3) then that value is our index into the lowest set of"}]}