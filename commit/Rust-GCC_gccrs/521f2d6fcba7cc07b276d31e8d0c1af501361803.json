{"sha": "521f2d6fcba7cc07b276d31e8d0c1af501361803", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIxZjJkNmZjYmE3Y2MwN2IyNzZkMzFlOGQwYzFhZjUwMTM2MTgwMw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-03-20T02:17:20Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-03-20T02:17:20Z"}, "message": "Add prototypes.\n\nFrom-SVN: r3794", "tree": {"sha": "ca321d72ba838fd9f30b00fc2dfa9cc47c34cc20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca321d72ba838fd9f30b00fc2dfa9cc47c34cc20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/521f2d6fcba7cc07b276d31e8d0c1af501361803", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/521f2d6fcba7cc07b276d31e8d0c1af501361803", "html_url": "https://github.com/Rust-GCC/gccrs/commit/521f2d6fcba7cc07b276d31e8d0c1af501361803", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/521f2d6fcba7cc07b276d31e8d0c1af501361803/comments", "author": null, "committer": null, "parents": [{"sha": "d3379e9151ffd3974cf50aaf3e37033ab579c610", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3379e9151ffd3974cf50aaf3e37033ab579c610", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3379e9151ffd3974cf50aaf3e37033ab579c610"}], "stats": {"total": 101, "additions": 58, "deletions": 43}, "files": [{"sha": "240a483f54b7f6bc0029419ed4cba89ca1eca55b", "filename": "gcc/function.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521f2d6fcba7cc07b276d31e8d0c1af501361803/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521f2d6fcba7cc07b276d31e8d0c1af501361803/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=521f2d6fcba7cc07b276d31e8d0c1af501361803", "patch": "@@ -183,15 +183,15 @@ extern rtx stack_slot_list;\n \n /* Given a function decl for a containing function,\n    return the `struct function' for it.  */\n-struct function *find_function_data ();\n+struct function *find_function_data PROTO((tree));\n \n /* Pointer to chain of `struct function' for containing functions.  */\n extern struct function *outer_function_chain;\n \n /* Put all this function's BLOCK nodes into a vector and return it.\n    Also store in each NOTE for the beginning or end of a block\n    the index of that block in the vector.  */\n-tree *identify_blocks ();\n+tree *identify_blocks PROTO((tree, rtx));\n \n #ifdef rtx\n #undef rtx"}, {"sha": "d6102ccfd566c58072e0e359b4643be7e433e786", "filename": "gcc/halfpic.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521f2d6fcba7cc07b276d31e8d0c1af501361803/gcc%2Fhalfpic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521f2d6fcba7cc07b276d31e8d0c1af501361803/gcc%2Fhalfpic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhalfpic.h?ref=521f2d6fcba7cc07b276d31e8d0c1af501361803", "patch": "@@ -31,12 +31,12 @@ int (*ptr_half_pic_address_p) ();\t/* ptr to half_pic_address_p () */\n \n extern int  half_pic_number_ptrs;\t/* # distinct pointers found */\n extern int  half_pic_number_refs;\t/* # half-pic references */\n-extern void half_pic_encode ();\t\t/* encode whether half-pic */\n-extern void half_pic_declare ();\t/* declare object local */\n-extern void half_pic_init ();\t\t/* half_pic initialization */\n-extern void half_pic_finish ();\t\t/* half_pic termination */\n-extern int  half_pic_address_p ();\t/* true if an address is half-pic */\n-extern struct rtx_def *half_pic_ptr ();\t/* return RTX for half-pic pointer */\n+extern void half_pic_encode PROTO((tree));\t/* encode whether half-pic */\n+extern void half_pic_declare PROTO((char *));\t/* declare object local */\n+extern void half_pic_init PROTO((void));\t/* half_pic initialization */\n+extern void half_pic_finish PROTO((FILE *));\t/* half_pic termination */\n+extern int  half_pic_address_p PROTO((rtx));\t/* true if an address is half-pic */\n+extern struct rtx_def *half_pic_ptr PROTO((rtx));\t/* return RTX for half-pic pointer */\n \n /* Macros to provide access to the half-pic stuff (so they can easily\n    be stubbed out.  */"}, {"sha": "0f59ba255df9c3fe01121f5cb1b48b05ab471268", "filename": "gcc/integrate.h", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521f2d6fcba7cc07b276d31e8d0c1af501361803/gcc%2Fintegrate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521f2d6fcba7cc07b276d31e8d0c1af501361803/gcc%2Fintegrate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.h?ref=521f2d6fcba7cc07b276d31e8d0c1af501361803", "patch": "@@ -107,15 +107,10 @@ struct inline_remap\n \n /* Return a copy of an rtx (as needed), substituting pseudo-register,\n    labels, and frame-pointer offsets as necessary.  */\n-extern rtx copy_rtx_and_substitute ();\n+extern rtx copy_rtx_and_substitute PROTO((rtx, struct inline_remap *));\n \n-extern void try_constants ();\n+extern void try_constants PROTO((rtx, struct inline_remap *));\n \n-extern void mark_stores ();\n-\n-/* We do some simple constant folding optimization.  This optimization\n-   really exists primarily to save time inlining a function.  It\n-   also helps users who ask for inline functions without -O.  */\n-extern rtx try_fold_condition ();\n+extern void mark_stores PROTO((rtx, rtx));\n \n extern rtx *global_const_equiv_map;"}, {"sha": "bb219c32d210b72f6ae9f41b196ac372b11398f7", "filename": "gcc/loop.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521f2d6fcba7cc07b276d31e8d0c1af501361803/gcc%2Floop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521f2d6fcba7cc07b276d31e8d0c1af501361803/gcc%2Floop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.h?ref=521f2d6fcba7cc07b276d31e8d0c1af501361803", "patch": "@@ -153,17 +153,17 @@ extern struct iv_class *loop_iv_list;\n \n /* Forward declarations for non-static functions declared in loop.c and\n    unroll.c.  */\n-int invariant_p ();\n-rtx get_condition_for_loop ();\n-void emit_iv_add_mult ();\n+int invariant_p PROTO((rtx));\n+rtx get_condition_for_loop PROTO((rtx));\n+void emit_iv_add_mult PROTO((rtx, rtx, rtx, rtx, rtx));\n \n /* Forward declarations for non-static functions declared in stmt.c.  */\n-void find_loop_tree_blocks ();\n-void unroll_block_trees ();\n-\n-void unroll_loop ();\n-rtx biv_total_increment ();\n-unsigned HOST_WIDE_INT loop_iterations ();\n-rtx final_biv_value ();\n-rtx final_giv_value ();\n-void emit_unrolled_add ();\n+void find_loop_tree_blocks PROTO((void));\n+void unroll_block_trees PROTO((void));\n+\n+void unroll_loop PROTO((rtx, int, rtx, rtx, int));\n+rtx biv_total_increment PROTO((struct iv_class *, rtx, rtx));\n+unsigned HOST_WIDE_INT loop_iterations PROTO((rtx, rtx));\n+rtx final_biv_value PROTO((struct iv_class *, rtx, rtx));\n+rtx final_giv_value PROTO((struct induction *, rtx, rtx));\n+void emit_unrolled_add PROTO((rtx, rtx, rtx));"}, {"sha": "240bd5725f302fcd63f035a8a1c2791b4125c4b9", "filename": "gcc/machmode.h", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521f2d6fcba7cc07b276d31e8d0c1af501361803/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521f2d6fcba7cc07b276d31e8d0c1af501361803/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=521f2d6fcba7cc07b276d31e8d0c1af501361803", "patch": "@@ -18,6 +18,15 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n \n+/* Add prototype support.  */\n+#ifndef PROTO\n+#if defined (USE_PROTOTYPES) ? USE_PROTOTYPES : defined (__STDC__)\n+#define PROTO(ARGS) ARGS\n+#else\n+#define PROTO(ARGS) ()\n+#endif\n+#endif\n+\n #ifndef HAVE_MACHINE_MODES\n \n /* Strictly speaking, this isn't the proper place to include these definitions,\n@@ -131,11 +140,11 @@ extern enum machine_mode mode_wider_mode[];\n    If LIMIT is nonzero, then don't use modes bigger than MAX_FIXED_MODE_SIZE.\n    The value is BLKmode if no other mode is found.  */\n \n-extern enum machine_mode mode_for_size ();\n+extern enum machine_mode mode_for_size PROTO((unsigned int, enum mode_class, int));\n \n /* Find the best mode to use to access a bit field.  */\n \n-extern enum machine_mode get_best_mode ();\n+extern enum machine_mode get_best_mode PROTO((int, int, int, enum machine_mode, int));\n \n /* Determine alignment, 1<=result<=BIGGEST_ALIGNMENT.  */\n "}, {"sha": "15e910631f821008f6aa632d21302e0cd053e4e7", "filename": "gcc/output.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521f2d6fcba7cc07b276d31e8d0c1af501361803/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521f2d6fcba7cc07b276d31e8d0c1af501361803/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=521f2d6fcba7cc07b276d31e8d0c1af501361803", "patch": "@@ -20,23 +20,25 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n /* Output a string of assembler code, substituting insn operands.\n    Defined in final.c.  */\n-extern void output_asm_insn ();\n+extern void output_asm_insn PROTO((char *, rtx *));\n \n /* Output a string of assembler code, substituting numbers, strings\n    and fixed syntactic prefixes.  */\n extern void asm_fprintf ();\n \n+#ifdef FILE\n /* Print an integer constant expression in assembler syntax.\n    Addition and subtraction are the only arithmetic\n    that may appear in these expressions.  */\n-extern void output_addr_const ();\n+extern void output_addr_const PROTO((FILE *, rtx));\n \n /* Output a name (as found inside a symbol_ref) in assembler syntax.  */\n-extern void assemble_name ();\n+extern void assemble_name PROTO((FILE *, char *));\n+#endif\n \n /* Replace a SUBREG with a REG or a MEM, based on the thing it is a\n    subreg of.  */\n-extern rtx alter_subreg ();\n+extern rtx alter_subreg PROTO((rtx));\n \n /* When outputting assembler code, indicates which alternative\n    of the constraints was actually satisfied.  */"}, {"sha": "4aaec8bb0b2797669055f26e2e6ad114570b4dee", "filename": "gcc/reload.h", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521f2d6fcba7cc07b276d31e8d0c1af501361803/gcc%2Freload.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521f2d6fcba7cc07b276d31e8d0c1af501361803/gcc%2Freload.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.h?ref=521f2d6fcba7cc07b276d31e8d0c1af501361803", "patch": "@@ -18,6 +18,15 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n \n+/* Add prototype support.  */\n+#ifndef PROTO\n+#if defined (USE_PROTOTYPES) ? USE_PROTOTYPES : defined (__STDC__)\n+#define PROTO(ARGS) ARGS\n+#else\n+#define PROTO(ARGS) ()\n+#endif\n+#endif\n+\n /* If secondary reloads are the same for inputs and outputs, define those\n    macros here.  */\n \n@@ -106,10 +115,10 @@ extern enum insn_code reload_in_optab[];\n extern enum insn_code reload_out_optab[];\n #endif\n \n-extern void init_reload ();\n-extern void find_reloads ();\n-extern void subst_reloads ();\n-extern rtx get_secondary_mem ();\n-extern rtx eliminate_regs ();\n-extern rtx gen_input_reload ();\n-extern rtx find_replacement ();\n+extern void init_reload PROTO((void));\n+extern void find_reloads PROTO((rtx, int, int, int, short *));\n+extern void subst_reloads PROTO((void));\n+extern rtx get_secondary_mem PROTO((rtx, enum machine_mode));\n+extern rtx eliminate_regs PROTO((rtx, enum machine_mode, rtx));\n+extern rtx gen_input_reload PROTO((rtx, rtx, rtx));\n+extern rtx find_replacement PROTO((rtx *));"}, {"sha": "c5d9a2512a91d7527e68e1fa0f79b26207588d33", "filename": "gcc/stack.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521f2d6fcba7cc07b276d31e8d0c1af501361803/gcc%2Fstack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521f2d6fcba7cc07b276d31e8d0c1af501361803/gcc%2Fstack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstack.h?ref=521f2d6fcba7cc07b276d31e8d0c1af501361803", "patch": "@@ -37,5 +37,5 @@ struct stack_level\n   int limit;\n };\n \n-struct stack_level *push_stack_level ();\n-struct stack_level *pop_stack_level ();\n+struct stack_level *push_stack_level PROTO((struct obstack *, char *, int));\n+struct stack_level *pop_stack_level PROTO((struct stack_level *));"}]}