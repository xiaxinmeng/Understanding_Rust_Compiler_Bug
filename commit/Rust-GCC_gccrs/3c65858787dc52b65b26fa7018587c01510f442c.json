{"sha": "3c65858787dc52b65b26fa7018587c01510f442c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M2NTg1ODc4N2RjNTJiNjViMjZmYTcwMTg1ODdjMDE1MTBmNDQyYw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-04-19T06:24:11Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-05-01T07:28:33Z"}, "message": "Add GTY support for irange.\n\nRight now we have GTY support for static storage iranges\n(int_range<>).  However, there's no reason why the base\nclass can't be used with GC, other than it was an oversight.\n\nFor that matter, the base class has a pointer to the sub-range\nstorage, so we can use the same implementation for both.  This\npatch does so.\n\nI have also removed the DEFINE_INT_RANGE_GC_STUBS\nstuff, and have documented why we need a separate\ngt_pch_nx (int_range<1> *&) version.  This has to do with\nhash-traits.h, which ipa-prop.c is using to store a value_range.\nThe header file hash-traits.h is defining an extern of\ngt_pch_nx (int_range<1> *&) etc, instead of calling the\nmore generic (int_range<1> *) which is already available.\n\nIt seems suspect that has-traits.h has their own externs\nfor GC functions, and if someone has a better solution, I'd\nbe glad to hear it.\n\ngcc/ChangeLog:\n\n\t* value-range.cc (DEFINE_INT_RANGE_GC_STUBS): Remove.\n\t(gt_pch_nx (int_range<1> *&)): New.\n\t(gt_ggc_mx (int_range<1> *&)): New.\n\t* value-range.h (class irange): Add GTY support for\n\tthe base class.", "tree": {"sha": "c41a7763618c9c97b881b87ad6688b0ac51af83d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c41a7763618c9c97b881b87ad6688b0ac51af83d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c65858787dc52b65b26fa7018587c01510f442c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c65858787dc52b65b26fa7018587c01510f442c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c65858787dc52b65b26fa7018587c01510f442c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c65858787dc52b65b26fa7018587c01510f442c/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69c426b89579312af91035c26fb1e270bfbcad00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69c426b89579312af91035c26fb1e270bfbcad00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69c426b89579312af91035c26fb1e270bfbcad00"}], "stats": {"total": 98, "additions": 56, "deletions": 42}, "files": [{"sha": "865344fcc3e7b0a2e6b063c5905d18faaa2c859f", "filename": "gcc/value-range.cc", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c65858787dc52b65b26fa7018587c01510f442c/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c65858787dc52b65b26fa7018587c01510f442c/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=3c65858787dc52b65b26fa7018587c01510f442c", "patch": "@@ -2044,26 +2044,20 @@ vrp_operand_equal_p (const_tree val1, const_tree val2)\n   return true;\n }\n \n-#define DEFINE_INT_RANGE_GC_STUBS(N)\t\t\\\n-  void\t\t\t\t\t\t\\\n-  gt_pch_nx (int_range<N> *&x)\t\t\t\\\n-  {\t\t\t\t\t\t\\\n-    for (unsigned i = 0; i < N; ++i)\t\t\\\n-      {\t\t\t\t\t\t\\\n-\tgt_pch_nx (x->m_ranges[i * 2]);\t\t\\\n-\tgt_pch_nx (x->m_ranges[i * 2 + 1]);\t\\\n-      }\t\t  \t\t       \t\t\\\n-  }\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\\\n-  void\t\t\t\t\t\t\\\n-  gt_ggc_mx (int_range<N> *&x)\t\t\t\\\n-  {\t    \t       \t\t\t\t\\\n-    for (unsigned i = 0; i < N; ++i)\t\t\\\n-      {\t\t\t\t\t\t\\\n-\t  gt_ggc_mx (x->m_ranges[i * 2]);\t\\\n-\t  gt_ggc_mx (x->m_ranges[i * 2 + 1]);\t\\\n-      }\t\t\t\t\t\t\\\n-  }\n+// ?? These stubs are for ipa-prop.c which use a value_range in a\n+// hash_traits.  hash-traits.h defines an extern of gt_ggc_mx (T &)\n+// instead of picking up the gt_ggc_mx (T *) version.\n+void\n+gt_pch_nx (int_range<1> *&x)\n+{\n+  return gt_pch_nx ((irange *) x);\n+}\n+\n+void\n+gt_ggc_mx (int_range<1> *&x)\n+{\n+  return gt_ggc_mx ((irange *) x);\n+}\n \n #define DEFINE_INT_RANGE_INSTANCE(N)\t\t\t\t\t\\\n   template int_range<N>::int_range(tree, tree, value_range_kind);\t\\\n@@ -2080,7 +2074,6 @@ DEFINE_INT_RANGE_INSTANCE(1)\n DEFINE_INT_RANGE_INSTANCE(2)\n DEFINE_INT_RANGE_INSTANCE(3)\n DEFINE_INT_RANGE_INSTANCE(255)\n-DEFINE_INT_RANGE_GC_STUBS(1)\n \n #if CHECKING_P\n #include \"selftest.h\""}, {"sha": "f63433a4e14e30b4ef60da28289d1f4b80d000fa", "filename": "gcc/value-range.h", "status": "modified", "additions": 42, "deletions": 21, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c65858787dc52b65b26fa7018587c01510f442c/gcc%2Fvalue-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c65858787dc52b65b26fa7018587c01510f442c/gcc%2Fvalue-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.h?ref=3c65858787dc52b65b26fa7018587c01510f442c", "patch": "@@ -41,7 +41,7 @@ enum value_range_kind\n //\n // This is the base class without any storage.\n \n-class irange\n+class GTY((user)) irange\n {\n   friend class irange_allocator;\n public:\n@@ -126,6 +126,10 @@ class irange\n   void copy_legacy_to_multi_range (const irange &);\n \n private:\n+  friend void gt_ggc_mx (irange *);\n+  friend void gt_pch_nx (irange *);\n+  friend void gt_pch_nx (irange *, gt_pointer_operator, void *);\n+\n   void irange_set_1bit_anti_range (tree, tree);\n   bool varying_compatible_p () const;\n \n@@ -155,11 +159,10 @@ class GTY((user)) int_range : public irange\n   template <unsigned X> friend void gt_pch_nx (int_range<X> *);\n   template <unsigned X> friend void gt_pch_nx (int_range<X> *,\n \t\t\t\t\t       gt_pointer_operator, void *);\n-  // ?? hash-traits.h has its own extern for these, which is causing\n-  // them to never be picked up by the templates.  For now, define\n-  // elsewhere.\n-  //template<unsigned X> friend void gt_ggc_mx (int_range<X> *&);\n-  //template<unsigned X> friend void gt_pch_nx (int_range<X> *&);\n+\n+  // ?? These stubs are for ipa-prop.c which use a value_range in a\n+  // hash_traits.  hash-traits.h defines an extern of gt_ggc_mx (T &)\n+  // instead of picking up the gt_ggc_mx (T *) version.\n   friend void gt_ggc_mx (int_range<1> *&);\n   friend void gt_pch_nx (int_range<1> *&);\n \n@@ -335,39 +338,57 @@ range_includes_zero_p (const irange *vr)\n   return vr->may_contain_p (build_zero_cst (vr->type ()));\n }\n \n-template<unsigned N>\n inline void\n-gt_ggc_mx (int_range<N> *x)\n+gt_ggc_mx (irange *x)\n {\n-  for (unsigned i = 0; i < N; ++i)\n+  for (unsigned i = 0; i < x->m_num_ranges; ++i)\n     {\n-      gt_ggc_mx (x->m_ranges[i * 2]);\n-      gt_ggc_mx (x->m_ranges[i * 2 + 1]);\n+      gt_ggc_mx (x->m_base[i * 2]);\n+      gt_ggc_mx (x->m_base[i * 2 + 1]);\n     }\n }\n \n-template<unsigned N>\n inline void\n-gt_pch_nx (int_range<N> *x)\n+gt_pch_nx (irange *x)\n {\n-  for (unsigned i = 0; i < N; ++i)\n+  for (unsigned i = 0; i < x->m_num_ranges; ++i)\n     {\n-      gt_pch_nx (x->m_ranges[i * 2]);\n-      gt_pch_nx (x->m_ranges[i * 2 + 1]);\n+      gt_pch_nx (x->m_base[i * 2]);\n+      gt_pch_nx (x->m_base[i * 2 + 1]);\n     }\n }\n \n-template<unsigned N>\n inline void\n-gt_pch_nx (int_range<N> *x, gt_pointer_operator op, void *cookie)\n+gt_pch_nx (irange *x, gt_pointer_operator op, void *cookie)\n {\n-  for (unsigned i = 0; i < N; ++i)\n+  for (unsigned i = 0; i < x->m_num_ranges; ++i)\n     {\n-      op (&x->m_ranges[i * 2], cookie);\n-      op (&x->m_ranges[i * 2 + 1], cookie);\n+      op (&x->m_base[i * 2], cookie);\n+      op (&x->m_base[i * 2 + 1], cookie);\n     }\n }\n \n+template<unsigned N>\n+inline void\n+gt_ggc_mx (int_range<N> *x)\n+{\n+  gt_ggc_mx ((irange *) x);\n+}\n+\n+template<unsigned N>\n+inline void\n+gt_pch_nx (int_range<N> *x)\n+{\n+  gt_pch_nx ((irange *) x);\n+}\n+\n+template<unsigned N>\n+inline void\n+gt_pch_nx (int_range<N> *x, gt_pointer_operator op, void *cookie)\n+{\n+  gt_pch_nx ((irange *) x, op, cookie);\n+}\n+\n // Constructors for irange\n \n inline"}]}