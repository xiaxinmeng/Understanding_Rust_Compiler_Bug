{"sha": "5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMyNzY2YzFhN2E2ZWNmODY2ZDRhYWE3MmUyZTJhNDk3ZmNjNzk5NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-02-26T21:01:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-02-26T21:01:59Z"}, "message": "re PR tree-optimization/65215 (Bswap load miscompilation)\n\n\tPR tree-optimization/65215\n\t* tree-ssa-math-opts.c (find_bswap_or_nop_load): Return false\n\tfor PDP endian targets.\n\t(perform_symbolic_merge, find_bswap_or_nop_1, find_bswap_or_nop):\n\tFix up formatting issues.\n\t(bswap_replace): Likewise.  For BYTES_BIG_ENDIAN, if the final access\n\tsize is smaller than the original, adjust MEM_REF offset by the\n\tdifference of sizes.  Use is_gimple_mem_ref_addr instead of\n\tis_gimple_min_invariant test to avoid adding address temporaries.\n\n\t* gcc.c-torture/execute/pr65215-1.c: New test.\n\t* gcc.c-torture/execute/pr65215-2.c: New test.\n\t* gcc.c-torture/execute/pr65215-3.c: New test.\n\t* gcc.c-torture/execute/pr65215-4.c: New test.\n\t* gcc.c-torture/execute/pr65215-5.c: New test.\n\nFrom-SVN: r221033", "tree": {"sha": "86a2f160641fe594a9c3923f37dc58e31456bcc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86a2f160641fe594a9c3923f37dc58e31456bcc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "890d89bcd74358bf0063635dc45571ed25ad2f93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/890d89bcd74358bf0063635dc45571ed25ad2f93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/890d89bcd74358bf0063635dc45571ed25ad2f93"}], "stats": {"total": 214, "additions": 197, "deletions": 17}, "files": [{"sha": "1bbd014bd16f289cf38a2baa319a16fe841c29c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995", "patch": "@@ -1,3 +1,15 @@\n+2015-02-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/65215\n+\t* tree-ssa-math-opts.c (find_bswap_or_nop_load): Return false\n+\tfor PDP endian targets.\n+\t(perform_symbolic_merge, find_bswap_or_nop_1, find_bswap_or_nop):\n+\tFix up formatting issues.\n+\t(bswap_replace): Likewise.  For BYTES_BIG_ENDIAN, if the final access\n+\tsize is smaller than the original, adjust MEM_REF offset by the\n+\tdifference of sizes.  Use is_gimple_mem_ref_addr instead of\n+\tis_gimple_min_invariant test to avoid adding address temporaries.\n+\n 2015-02-26  Martin Liska  <mliska@suse.cz>\n \t    Jan Hubicka  <hubicka@ucw.cz>\n "}, {"sha": "1852d25fce97f51fe0bf4057aa4efe4597246fa3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995", "patch": "@@ -1,3 +1,12 @@\n+2015-02-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/65215\n+\t* gcc.c-torture/execute/pr65215-1.c: New test.\n+\t* gcc.c-torture/execute/pr65215-2.c: New test.\n+\t* gcc.c-torture/execute/pr65215-3.c: New test.\n+\t* gcc.c-torture/execute/pr65215-4.c: New test.\n+\t* gcc.c-torture/execute/pr65215-5.c: New test.\n+\n 2015-02-26  Tom de Vries  <tom@codesourcery.com>\n \n \t* go.test/go-test.exp (go-gc-tests): Add missing cleanup for cmpout."}, {"sha": "07b89fc8fb7e3a409b6dd78ea0691eef9982ab9f", "filename": "gcc/testsuite/gcc.c-torture/execute/pr65215-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr65215-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr65215-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr65215-1.c?ref=5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995", "patch": "@@ -0,0 +1,24 @@\n+/* PR tree-optimization/65215 */\n+\n+static inline unsigned int\n+foo (unsigned int x)\n+{\n+  return (x >> 24) | ((x >> 8) & 0xff00) | ((x << 8) & 0xff0000) | (x << 24);\n+}\n+\n+__attribute__((noinline, noclone)) unsigned int\n+bar (unsigned long long *x)\n+{\n+  return foo (*x);\n+}\n+\n+int\n+main ()\n+{\n+  if (__CHAR_BIT__ != 8 || sizeof (unsigned int) != 4 || sizeof (unsigned long long) != 8)\n+    return 0;\n+  unsigned long long l = foo (0xdeadbeefU) | 0xfeedbea800000000ULL;\n+  if (bar (&l) != 0xdeadbeefU)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "a2842057c50a8eff0e2d683fbe5c0d38c38a61fb", "filename": "gcc/testsuite/gcc.c-torture/execute/pr65215-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr65215-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr65215-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr65215-2.c?ref=5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995", "patch": "@@ -0,0 +1,24 @@\n+/* PR tree-optimization/65215 */\n+\n+static inline unsigned int\n+foo (unsigned int x)\n+{\n+  return (x >> 24) | ((x >> 8) & 0xff00) | ((x << 8) & 0xff0000) | (x << 24);\n+}\n+\n+__attribute__((noinline, noclone)) unsigned long long\n+bar (unsigned long long *x)\n+{\n+  return ((unsigned long long) foo (*x) << 32) | foo (*x >> 32);\n+}\n+\n+int\n+main ()\n+{\n+  if (__CHAR_BIT__ != 8 || sizeof (unsigned int) != 4 || sizeof (unsigned long long) != 8)\n+    return 0;\n+  unsigned long long l = foo (0xfeedbea8U) | ((unsigned long long) foo (0xdeadbeefU) << 32);\n+  if (bar (&l) != 0xfeedbea8deadbeefULL)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "0874e193b9db3430ff567b7abd1fa12db4816f00", "filename": "gcc/testsuite/gcc.c-torture/execute/pr65215-3.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr65215-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr65215-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr65215-3.c?ref=5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995", "patch": "@@ -0,0 +1,31 @@\n+/* PR tree-optimization/65215 */\n+\n+struct S { unsigned long long l1 : 24, l2 : 8, l3 : 32; };\n+\n+static inline unsigned int\n+foo (unsigned int x)\n+{\n+  return (x >> 24) | ((x >> 8) & 0xff00) | ((x << 8) & 0xff0000) | (x << 24);\n+}\n+\n+__attribute__((noinline, noclone)) unsigned long long\n+bar (struct S *x)\n+{\n+  unsigned long long x1 = foo (((unsigned int) x->l1 << 8) | x->l2);\n+  unsigned long long x2 = foo (x->l3);\n+  return (x2 << 32) | x1;\n+}\n+\n+int\n+main ()\n+{\n+  if (__CHAR_BIT__ != 8 || sizeof (unsigned int) != 4 || sizeof (unsigned long long) != 8)\n+    return 0;\n+  struct S s = { 0xdeadbeU, 0xefU, 0xfeedbea8U };\n+  unsigned long long l = bar (&s);\n+  if (foo (l >> 32) != s.l3\n+      || (foo (l) >> 8) != s.l1\n+      || (foo (l) & 0xff) != s.l2)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "8044d123ae029b571d3093551bcea7abca51e45c", "filename": "gcc/testsuite/gcc.c-torture/execute/pr65215-4.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr65215-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr65215-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr65215-4.c?ref=5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995", "patch": "@@ -0,0 +1,27 @@\n+/* PR tree-optimization/65215 */\n+\n+struct S { unsigned long long l1 : 48; };\n+\n+static inline unsigned int\n+foo (unsigned int x)\n+{\n+  return (x >> 24) | ((x >> 8) & 0xff00) | ((x << 8) & 0xff0000) | (x << 24);\n+}\n+\n+__attribute__((noinline, noclone)) unsigned int\n+bar (struct S *x)\n+{\n+  return foo (x->l1);\n+}\n+\n+int\n+main ()\n+{\n+  if (__CHAR_BIT__ != 8 || sizeof (unsigned int) != 4 || sizeof (unsigned long long) != 8)\n+    return 0;\n+  struct S s;\n+  s.l1 = foo (0xdeadbeefU) | (0xfeedULL << 32);\n+  if (bar (&s) != 0xdeadbeefU)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "c30d11f19ad9c4231a25f8decbfb2f34996d4260", "filename": "gcc/testsuite/gcc.c-torture/execute/pr65215-5.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr65215-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr65215-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr65215-5.c?ref=5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995", "patch": "@@ -0,0 +1,27 @@\n+/* PR tree-optimization/65215 */\n+\n+__attribute__((noinline, noclone)) unsigned int\n+foo (unsigned char *p)\n+{\n+  return ((unsigned int) p[0] << 24) | (p[1] << 16) | (p[2] << 8) | p[3];\n+}\n+\n+__attribute__((noinline, noclone)) unsigned int\n+bar (unsigned char *p)\n+{\n+  return ((unsigned int) p[3] << 24) | (p[2] << 16) | (p[1] << 8) | p[0];\n+}\n+\n+struct S { unsigned int a; unsigned char b[5]; };\n+\n+int\n+main ()\n+{\n+  struct S s = { 1, { 2, 3, 4, 5, 6 } };\n+  if (__CHAR_BIT__ != 8 || sizeof (unsigned int) != 4)\n+    return 0;\n+  if (foo (&s.b[1]) != 0x03040506U\n+      || bar (&s.b[1]) != 0x06050403U)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "c22a677e80c4044f008c8b07406127bffed964b2", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 43, "deletions": 17, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=5c2766c1a7a6ecf866d4aaa72e2e2a497fcc7995", "patch": "@@ -1780,6 +1780,10 @@ find_bswap_or_nop_load (gimple stmt, tree ref, struct symbolic_number *n)\n   int unsignedp, volatilep;\n   tree offset, base_addr;\n \n+  /* Not prepared to handle PDP endian.  */\n+  if (BYTES_BIG_ENDIAN != WORDS_BIG_ENDIAN)\n+    return false;\n+\n   if (!gimple_assign_load_p (stmt) || gimple_has_volatile_ops (stmt))\n     return false;\n \n@@ -1860,8 +1864,8 @@ perform_symbolic_merge (gimple source_stmt1, struct symbolic_number *n1,\n \t  || !operand_equal_p (n1->base_addr, n2->base_addr, 0))\n \treturn NULL;\n \n-      if (!n1->offset != !n2->offset ||\n-          (n1->offset && !operand_equal_p (n1->offset, n2->offset, 0)))\n+      if (!n1->offset != !n2->offset\n+\t  || (n1->offset && !operand_equal_p (n1->offset, n2->offset, 0)))\n \treturn NULL;\n \n       if (n1->bytepos < n2->bytepos)\n@@ -1912,8 +1916,8 @@ perform_symbolic_merge (gimple source_stmt1, struct symbolic_number *n1,\n       size = TYPE_PRECISION (n1->type) / BITS_PER_UNIT;\n       for (i = 0; i < size; i++, inc <<= BITS_PER_MARKER)\n \t{\n-\t  unsigned marker =\n-\t    (toinc_n_ptr->n >> (i * BITS_PER_MARKER)) & MARKER_MASK;\n+\t  unsigned marker\n+\t    = (toinc_n_ptr->n >> (i * BITS_PER_MARKER)) & MARKER_MASK;\n \t  if (marker && marker != MARKER_BYTE_UNKNOWN)\n \t    toinc_n_ptr->n += inc;\n \t}\n@@ -2032,7 +2036,7 @@ find_bswap_or_nop_1 (gimple stmt, struct symbolic_number *n, int limit)\n \tcase RSHIFT_EXPR:\n \tcase LROTATE_EXPR:\n \tcase RROTATE_EXPR:\n-\t  if (!do_shift_rotate (code, n, (int)TREE_INT_CST_LOW (rhs2)))\n+\t  if (!do_shift_rotate (code, n, (int) TREE_INT_CST_LOW (rhs2)))\n \t    return NULL;\n \t  break;\n \tCASE_CONVERT:\n@@ -2104,12 +2108,12 @@ find_bswap_or_nop_1 (gimple stmt, struct symbolic_number *n, int limit)\n \t  if (TYPE_PRECISION (n1.type) != TYPE_PRECISION (n2.type))\n \t    return NULL;\n \n-\t  if (!n1.vuse != !n2.vuse ||\n-\t  (n1.vuse && !operand_equal_p (n1.vuse, n2.vuse, 0)))\n+\t  if (!n1.vuse != !n2.vuse\n+\t      || (n1.vuse && !operand_equal_p (n1.vuse, n2.vuse, 0)))\n \t    return NULL;\n \n-\t  source_stmt =\n-\t    perform_symbolic_merge (source_stmt1, &n1, source_stmt2, &n2, n);\n+\t  source_stmt\n+\t    = perform_symbolic_merge (source_stmt1, &n1, source_stmt2, &n2, n);\n \n \t  if (!source_stmt)\n \t    return NULL;\n@@ -2153,12 +2157,12 @@ find_bswap_or_nop (gimple stmt, struct symbolic_number *n, bool *bswap)\n      in libgcc, and for initial shift/and operation of the src operand.  */\n   limit = TREE_INT_CST_LOW (TYPE_SIZE_UNIT (gimple_expr_type (stmt)));\n   limit += 1 + (int) ceil_log2 ((unsigned HOST_WIDE_INT) limit);\n-  source_stmt =  find_bswap_or_nop_1 (stmt, n, limit);\n+  source_stmt = find_bswap_or_nop_1 (stmt, n, limit);\n \n   if (!source_stmt)\n     return NULL;\n \n-  /* Find real size of result (highest non zero byte).  */\n+  /* Find real size of result (highest non-zero byte).  */\n   if (n->base_addr)\n     {\n       int rsize;\n@@ -2261,8 +2265,30 @@ bswap_replace (gimple cur_stmt, gimple src_stmt, tree fndecl, tree bswap_type,\n       tree load_offset_ptr, aligned_load_type;\n       gimple addr_stmt, load_stmt;\n       unsigned align;\n+      HOST_WIDE_INT load_offset = 0;\n \n       align = get_object_alignment (src);\n+      /* If the new access is smaller than the original one, we need\n+\t to perform big endian adjustment.  */\n+      if (BYTES_BIG_ENDIAN)\n+\t{\n+\t  HOST_WIDE_INT bitsize, bitpos;\n+\t  machine_mode mode;\n+\t  int unsignedp, volatilep;\n+\t  tree offset;\n+\n+\t  get_inner_reference (src, &bitsize, &bitpos, &offset, &mode,\n+\t\t\t       &unsignedp, &volatilep, false);\n+\t  if (n->range < (unsigned HOST_WIDE_INT) bitsize)\n+\t    {\n+\t      load_offset = (bitsize - n->range) / BITS_PER_UNIT;\n+\t      unsigned HOST_WIDE_INT l\n+\t\t= (load_offset * BITS_PER_UNIT) & (align - 1);\n+\t      if (l)\n+\t\talign = l & -l;\n+\t    }\n+\t}\n+\n       if (bswap\n \t  && align < GET_MODE_ALIGNMENT (TYPE_MODE (load_type))\n \t  && SLOW_UNALIGNED_ACCESS (TYPE_MODE (load_type), align))\n@@ -2274,10 +2300,10 @@ bswap_replace (gimple cur_stmt, gimple src_stmt, tree fndecl, tree bswap_type,\n       gsi_move_before (&gsi, &gsi_ins);\n       gsi = gsi_for_stmt (cur_stmt);\n \n-      /*  Compute address to load from and cast according to the size\n-\t  of the load.  */\n+      /* Compute address to load from and cast according to the size\n+\t of the load.  */\n       addr_expr = build_fold_addr_expr (unshare_expr (src));\n-      if (is_gimple_min_invariant (addr_expr))\n+      if (is_gimple_mem_ref_addr (addr_expr))\n \taddr_tmp = addr_expr;\n       else\n \t{\n@@ -2291,7 +2317,7 @@ bswap_replace (gimple cur_stmt, gimple src_stmt, tree fndecl, tree bswap_type,\n       aligned_load_type = load_type;\n       if (align < TYPE_ALIGN (load_type))\n \taligned_load_type = build_aligned_type (load_type, align);\n-      load_offset_ptr = build_int_cst (n->alias_set, 0);\n+      load_offset_ptr = build_int_cst (n->alias_set, load_offset);\n       val_expr = fold_build2 (MEM_REF, aligned_load_type, addr_tmp,\n \t\t\t      load_offset_ptr);\n \n@@ -2328,7 +2354,7 @@ bswap_replace (gimple cur_stmt, gimple src_stmt, tree fndecl, tree bswap_type,\n \t    {\n \t      fprintf (dump_file,\n \t\t       \"%d bit load in target endianness found at: \",\n-\t\t       (int)n->range);\n+\t\t       (int) n->range);\n \t      print_gimple_stmt (dump_file, cur_stmt, 0, 0);\n \t    }\n \t  return true;\n@@ -2395,7 +2421,7 @@ bswap_replace (gimple cur_stmt, gimple src_stmt, tree fndecl, tree bswap_type,\n   if (dump_file)\n     {\n       fprintf (dump_file, \"%d bit bswap implementation found at: \",\n-\t       (int)n->range);\n+\t       (int) n->range);\n       print_gimple_stmt (dump_file, cur_stmt, 0, 0);\n     }\n "}]}