{"sha": "d044dd177fb67db8cf20c986c0431b42be1aa71d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA0NGRkMTc3ZmI2N2RiOGNmMjBjOTg2YzA0MzFiNDJiZTFhYTcxZA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2012-11-06T17:39:37Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2012-11-06T17:39:37Z"}, "message": "ipa-prop.c (ipa_get_param_decl_index_1): New function.\n\n2012-11-06  Martin Jambor  <mjambor@suse.cz>\n\n\t* ipa-prop.c (ipa_get_param_decl_index_1): New function.\n\t(ipa_get_param_decl_index): Just call ipa_get_param_decl_index_1.\n\t(ipa_populate_param_decls): Accept descriptors parameter rather\n\tthan the whole info.\n\t(load_from_unmodified_param): Likewise.\n\t(ipa_load_from_parm_agg_1): Likewise.\n\t(ipa_load_from_parm_agg): Extract descriptors from info.\n\t(compute_complex_assign_jump_func): Likewise.\n\t(ipa_analyze_indirect_call_uses): Likewise.\n\nFrom-SVN: r193250", "tree": {"sha": "0d35dffae7b21bd9c2b526540aeaaf3157276a8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d35dffae7b21bd9c2b526540aeaaf3157276a8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d044dd177fb67db8cf20c986c0431b42be1aa71d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d044dd177fb67db8cf20c986c0431b42be1aa71d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d044dd177fb67db8cf20c986c0431b42be1aa71d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d044dd177fb67db8cf20c986c0431b42be1aa71d/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d3669566a7295676de7ae64cba01e8c3258321f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3669566a7295676de7ae64cba01e8c3258321f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3669566a7295676de7ae64cba01e8c3258321f5"}], "stats": {"total": 63, "additions": 42, "deletions": 21}, "files": [{"sha": "0e7143b5191098eb96ffafb70a83a4f9e1ee4f8d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d044dd177fb67db8cf20c986c0431b42be1aa71d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d044dd177fb67db8cf20c986c0431b42be1aa71d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d044dd177fb67db8cf20c986c0431b42be1aa71d", "patch": "@@ -1,3 +1,15 @@\n+2012-11-06  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-prop.c (ipa_get_param_decl_index_1): New function.\n+\t(ipa_get_param_decl_index): Just call ipa_get_param_decl_index_1.\n+\t(ipa_populate_param_decls): Accept descriptors parameter rather\n+\tthan the whole info.\n+\t(load_from_unmodified_param): Likewise.\n+\t(ipa_load_from_parm_agg_1): Likewise.\n+\t(ipa_load_from_parm_agg): Extract descriptors from info.\n+\t(compute_complex_assign_jump_func): Likewise.\n+\t(ipa_analyze_indirect_call_uses): Likewise.\n+\n 2012-11-06  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-inline.c (compute_uninlined_call_time): Return gcov_type."}, {"sha": "458860b0c9eeaba9d3db56fd5356abdc795bcd45", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d044dd177fb67db8cf20c986c0431b42be1aa71d/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d044dd177fb67db8cf20c986c0431b42be1aa71d/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=d044dd177fb67db8cf20c986c0431b42be1aa71d", "patch": "@@ -65,25 +65,35 @@ static struct cgraph_node_hook_list *function_insertion_hook_holder;\n /* Return index of the formal whose tree is PTREE in function which corresponds\n    to INFO.  */\n \n-int\n-ipa_get_param_decl_index (struct ipa_node_params *info, tree ptree)\n+static int\n+ipa_get_param_decl_index_1 (VEC (ipa_param_descriptor_t, heap) *descriptors,\n+\t\t\t    tree ptree)\n {\n   int i, count;\n \n-  count = ipa_get_param_count (info);\n+  count = VEC_length (ipa_param_descriptor_t, descriptors);\n   for (i = 0; i < count; i++)\n-    if (ipa_get_param (info, i) == ptree)\n+    if (VEC_index (ipa_param_descriptor_t, descriptors, i).decl == ptree)\n       return i;\n \n   return -1;\n }\n \n-/* Populate the param_decl field in parameter descriptors of INFO that\n-   corresponds to NODE.  */\n+/* Return index of the formal whose tree is PTREE in function which corresponds\n+   to INFO.  */\n+\n+int\n+ipa_get_param_decl_index (struct ipa_node_params *info, tree ptree)\n+{\n+  return ipa_get_param_decl_index_1 (info->descriptors, ptree);\n+}\n+\n+/* Populate the param_decl field in parameter DESCRIPTORS that correspond to\n+   NODE.  */\n \n static void\n ipa_populate_param_decls (struct cgraph_node *node,\n-\t\t\t  struct ipa_node_params *info)\n+\t\t\t  VEC (ipa_param_descriptor_t, heap) *descriptors)\n {\n   tree fndecl;\n   tree fnargs;\n@@ -95,8 +105,7 @@ ipa_populate_param_decls (struct cgraph_node *node,\n   param_num = 0;\n   for (parm = fnargs; parm; parm = DECL_CHAIN (parm))\n     {\n-      VEC_index (ipa_param_descriptor_t,\n-\t\t info->descriptors, param_num).decl = parm;\n+      VEC_index (ipa_param_descriptor_t, descriptors, param_num).decl = parm;\n       param_num++;\n     }\n }\n@@ -133,7 +142,7 @@ ipa_initialize_node_params (struct cgraph_node *node)\n \t{\n \t  VEC_safe_grow_cleared (ipa_param_descriptor_t, heap,\n \t\t\t\t info->descriptors, param_count);\n-\t  ipa_populate_param_decls (node, info);\n+\t  ipa_populate_param_decls (node, info->descriptors);\n \t}\n     }\n }\n@@ -662,7 +671,7 @@ parm_preserved_before_stmt_p (struct param_analysis_info *parm_ainfo,\n    modified.  Otherwise return -1.  */\n \n static int\n-load_from_unmodified_param (struct ipa_node_params *info,\n+load_from_unmodified_param (VEC (ipa_param_descriptor_t, heap) *descriptors,\n \t\t\t    struct param_analysis_info *parms_ainfo,\n \t\t\t    gimple stmt)\n {\n@@ -676,7 +685,7 @@ load_from_unmodified_param (struct ipa_node_params *info,\n   if (TREE_CODE (op1) != PARM_DECL)\n     return -1;\n \n-  index = ipa_get_param_decl_index (info, op1);\n+  index = ipa_get_param_decl_index_1 (descriptors, op1);\n   if (index < 0\n       || !parm_preserved_before_stmt_p (parms_ainfo ? &parms_ainfo[index]\n \t\t\t\t\t: NULL, stmt, op1))\n@@ -750,7 +759,7 @@ parm_ref_data_pass_through_p (struct param_analysis_info *parm_ainfo,\n    reference respectively.  */\n \n static bool\n-ipa_load_from_parm_agg_1 (struct ipa_node_params *info,\n+ipa_load_from_parm_agg_1 (VEC (ipa_param_descriptor_t, heap) *descriptors,\n \t\t\t  struct param_analysis_info *parms_ainfo, gimple stmt,\n \t\t\t  tree op, int *index_p, HOST_WIDE_INT *offset_p,\n \t\t\t  bool *by_ref_p)\n@@ -764,7 +773,7 @@ ipa_load_from_parm_agg_1 (struct ipa_node_params *info,\n \n   if (DECL_P (base))\n     {\n-      int index = ipa_get_param_decl_index (info, base);\n+      int index = ipa_get_param_decl_index_1 (descriptors, base);\n       if (index >= 0\n \t  && parm_preserved_before_stmt_p (parms_ainfo ? &parms_ainfo[index]\n \t\t\t\t\t   : NULL, stmt, op))\n@@ -784,7 +793,7 @@ ipa_load_from_parm_agg_1 (struct ipa_node_params *info,\n   if (SSA_NAME_IS_DEFAULT_DEF (TREE_OPERAND (base, 0)))\n     {\n       tree parm = SSA_NAME_VAR (TREE_OPERAND (base, 0));\n-      index = ipa_get_param_decl_index (info, parm);\n+      index = ipa_get_param_decl_index_1 (descriptors, parm);\n     }\n   else\n     {\n@@ -804,7 +813,7 @@ ipa_load_from_parm_agg_1 (struct ipa_node_params *info,\n       */\n \n       gimple def = SSA_NAME_DEF_STMT (TREE_OPERAND (base, 0));\n-      index = load_from_unmodified_param (info, parms_ainfo, def);\n+      index = load_from_unmodified_param (descriptors, parms_ainfo, def);\n     }\n \n   if (index >= 0\n@@ -826,8 +835,8 @@ ipa_load_from_parm_agg (struct ipa_node_params *info, gimple stmt,\n \t\t\ttree op, int *index_p, HOST_WIDE_INT *offset_p,\n \t\t\tbool *by_ref_p)\n {\n-  return ipa_load_from_parm_agg_1 (info, NULL, stmt, op, index_p, offset_p,\n-\t\t\t\t   by_ref_p);\n+  return ipa_load_from_parm_agg_1 (info->descriptors, NULL, stmt, op, index_p,\n+\t\t\t\t   offset_p, by_ref_p);\n }\n \n /* Given that an actual argument is an SSA_NAME (given in NAME) and is a result\n@@ -900,13 +909,13 @@ compute_complex_assign_jump_func (struct ipa_node_params *info,\n       if (SSA_NAME_IS_DEFAULT_DEF (op1))\n \tindex = ipa_get_param_decl_index (info, SSA_NAME_VAR (op1));\n       else\n-\tindex = load_from_unmodified_param (info, parms_ainfo,\n+\tindex = load_from_unmodified_param (info->descriptors, parms_ainfo,\n \t\t\t\t\t    SSA_NAME_DEF_STMT (op1));\n       tc_ssa = op1;\n     }\n   else\n     {\n-      index = load_from_unmodified_param (info, parms_ainfo, stmt);\n+      index = load_from_unmodified_param (info->descriptors, parms_ainfo, stmt);\n       tc_ssa = gimple_assign_lhs (stmt);\n     }\n \n@@ -1649,7 +1658,7 @@ ipa_analyze_indirect_call_uses (struct cgraph_node *node,\n \n   def = SSA_NAME_DEF_STMT (target);\n   if (gimple_assign_single_p (def)\n-      && ipa_load_from_parm_agg_1 (info, parms_ainfo, def,\n+      && ipa_load_from_parm_agg_1 (info->descriptors, parms_ainfo, def,\n \t\t\t\t   gimple_assign_rhs1 (def), &index, &offset,\n \t\t\t\t   &by_ref))\n     {"}]}