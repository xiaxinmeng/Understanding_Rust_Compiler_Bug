{"sha": "1deba98bd23b18dbaf4da0e42ee3d5d6c48fe758", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRlYmE5OGJkMjNiMThkYmFmNGRhMGU0MmVlM2Q1ZDZjNDhmZTc1OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-03-07T22:06:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-03-07T22:06:28Z"}, "message": "re PR libstdc++/9182 (basic_filebuf<> does not report errors in codecvt<>::out)\n\n2003-03-07  Paolo Carlini  <pcarlini@unitus.it>\n\n\tPR libstdc++/9182\n\t* include/bits/fstream.tcc (_M_really_overflow): Check\n\tfor _M_convert_to_external possible failures.\n\t* include/std/std_fstream.h (sync): Check _M_really_overflow\n\treturn value and return -1 in case of failure.\n\t* testsuite/27_io/filebuf_virtuals.cc (test13, test14): Add.\n\n2003-03-07  Paolo Carlini  <pcarlini@unitus.it>\n\n\tPR libstdc++/9826\n\t* include/bits/istream.tcc (operator>>(_CharT*),\n\toperator>>(basic_string&), ws): Pass a char_type to __ctype.is.\n\t* testsuite/27_io/stringstream.cc (test02): Add.\n\n\t* include/bits/istream.tcc (operator>>(_CharT*)):\n\tAssign a char_type to *__s.\n\nFrom-SVN: r63953", "tree": {"sha": "3af598b249b9920d009caed9e0797f741dabbc00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3af598b249b9920d009caed9e0797f741dabbc00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1deba98bd23b18dbaf4da0e42ee3d5d6c48fe758", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1deba98bd23b18dbaf4da0e42ee3d5d6c48fe758", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1deba98bd23b18dbaf4da0e42ee3d5d6c48fe758", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1deba98bd23b18dbaf4da0e42ee3d5d6c48fe758/comments", "author": null, "committer": null, "parents": [{"sha": "50aac998d41d566b358f8421c5e55188435422d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50aac998d41d566b358f8421c5e55188435422d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50aac998d41d566b358f8421c5e55188435422d7"}], "stats": {"total": 145, "additions": 125, "deletions": 20}, "files": [{"sha": "5298239337aa420d1776c77dad23b5a9f5fce84d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1deba98bd23b18dbaf4da0e42ee3d5d6c48fe758/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1deba98bd23b18dbaf4da0e42ee3d5d6c48fe758/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1deba98bd23b18dbaf4da0e42ee3d5d6c48fe758", "patch": "@@ -1,3 +1,22 @@\n+2003-03-07  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\tPR libstdc++/9182\n+\t* include/bits/fstream.tcc (_M_really_overflow): Check\n+\tfor _M_convert_to_external possible failures.\n+\t* include/std/std_fstream.h (sync): Check _M_really_overflow\n+\treturn value and return -1 in case of failure.\n+\t* testsuite/27_io/filebuf_virtuals.cc (test13, test14): Add.\n+\n+2003-03-07  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\tPR libstdc++/9826\n+\t* include/bits/istream.tcc (operator>>(_CharT*),\n+\toperator>>(basic_string&), ws): Pass a char_type to __ctype.is.\n+\t* testsuite/27_io/stringstream.cc (test02): Add.\n+\n+\t* include/bits/istream.tcc (operator>>(_CharT*)):\n+\tAssign a char_type to *__s.\n+\n 2003-03-07  Petur Runolfsson  <peturr02@ru.is>\n \n \tPR libstdc++/9817"}, {"sha": "484ed7be057f8efafd20e9479826485119291308", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1deba98bd23b18dbaf4da0e42ee3d5d6c48fe758/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1deba98bd23b18dbaf4da0e42ee3d5d6c48fe758/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=1deba98bd23b18dbaf4da0e42ee3d5d6c48fe758", "patch": "@@ -362,26 +362,31 @@ namespace std\n \t\t\t\t   this->_M_out_lim - this->_M_out_beg, \n \t\t\t\t   __elen, __plen);\n \n-\t  // Convert pending sequence to external representation, output.\n-\t  // If eof, then just attempt sync.\n-\t  if (!traits_type::eq_int_type(__c, traits_type::eof()))\n+\t  // Checks for codecvt.out failures and _M_file.xsputn failures,\n+\t  // respectively, inside _M_convert_to_external.\n+\t  if (__testunbuffered || (__elen && __elen == __plen))\n \t    {\n-\t      char_type __pending = traits_type::to_char_type(__c);\n-\t      _M_convert_to_external(&__pending, 1, __elen, __plen);\n+\t      // Convert pending sequence to external representation, output.\n+\t      // If eof, then just attempt sync.\n+\t      if (!traits_type::eq_int_type(__c, traits_type::eof()))\n+\t\t{\n+\t\t  char_type __pending = traits_type::to_char_type(__c);\n+\t\t  _M_convert_to_external(&__pending, 1, __elen, __plen);\n \n-\t      // User code must flush when switching modes (thus don't sync).\n-\t      if (__elen == __plen)\n+\t\t  // User code must flush when switching modes (thus don't sync).\n+\t\t  if (__elen == __plen && __elen)\n+\t\t    {\n+\t\t      _M_set_indeterminate();\n+\t\t      __ret = traits_type::not_eof(__c);\n+\t\t    }\n+\t\t}\n+\t      else if (!_M_file.sync())\n \t\t{\n \t\t  _M_set_indeterminate();\n \t\t  __ret = traits_type::not_eof(__c);\n \t\t}\n \t    }\n-\t  else if (!_M_file.sync())\n-\t    {\n-\t      _M_set_indeterminate();\n-\t      __ret = traits_type::not_eof(__c);\n-\t    }\n-\t}\t      \n+\t}\n       _M_last_overflowed = true;\t\n       return __ret;\n     }"}, {"sha": "0bd7fff51da7763ec9868cf6745b2669969a97bf", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1deba98bd23b18dbaf4da0e42ee3d5d6c48fe758/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1deba98bd23b18dbaf4da0e42ee3d5d6c48fe758/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=1deba98bd23b18dbaf4da0e42ee3d5d6c48fe758", "patch": "@@ -1036,9 +1036,9 @@ namespace std\n \t      \n \t      while (__extracted < __num - 1 \n \t\t     && !_Traits::eq_int_type(__c, __eof)\n-\t\t     && !__ctype.is(ctype_base::space, __c))\n+\t\t     && !__ctype.is(ctype_base::space, _Traits::to_char_type(__c)))\n \t\t{\n-\t\t  *__s++ = __c;\n+\t\t  *__s++ = _Traits::to_char_type(__c);\n \t\t  ++__extracted;\n \t\t  __c = __sb->snextc();\n \t\t}\n@@ -1081,7 +1081,7 @@ namespace std\n       __int_type __c = __sb->sgetc();\n \n       while (!_Traits::eq_int_type(__c, __eof) \n-\t     && __ctype.is(ctype_base::space, __c))\n+\t     && __ctype.is(ctype_base::space, _Traits::to_char_type(__c)))\n \t__c = __sb->snextc();\n \n        if (_Traits::eq_int_type(__c, __eof))\n@@ -1119,7 +1119,7 @@ namespace std\n \t  \n \t  while (__extracted < __n \n \t\t && !_Traits::eq_int_type(__c, __eof)\n-\t\t && !__ctype.is(ctype_base::space, __c))\n+\t\t && !__ctype.is(ctype_base::space, _Traits::to_char_type(__c)))\n \t    {\n \t      __str += _Traits::to_char_type(__c);\n \t      ++__extracted;"}, {"sha": "34b32a157c31eb70aca6eb02d30188af67c63a1d", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1deba98bd23b18dbaf4da0e42ee3d5d6c48fe758/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1deba98bd23b18dbaf4da0e42ee3d5d6c48fe758/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=1deba98bd23b18dbaf4da0e42ee3d5d6c48fe758", "patch": "@@ -311,6 +311,7 @@ namespace std\n       virtual int\n       sync()\n       {\n+\tint __ret = 0;\n \tbool __testput = this->_M_out_cur\n \t  && this->_M_out_beg < this->_M_out_lim;\n \n@@ -320,14 +321,19 @@ namespace std\n \t  {\n \t    // Need to restore current position after the write.\n \t    off_type __off = this->_M_out_cur - this->_M_out_lim;\n-\t    _M_really_overflow(); // _M_file.sync() will be called within\n-\t    if (__off)\n+\n+\t    // _M_file.sync() will be called within\n+\t    if (traits_type::eq_int_type(_M_really_overflow(),\n+\t\t\t\t\t traits_type::eof()))\n+\t      __ret = -1;\n+\t    else if (__off)\n \t      _M_file.seekoff(__off, ios_base::cur);\n \t  }\n \telse\n \t  _M_file.sync();\n+\n \t_M_last_overflowed = false;\n-\treturn 0;\n+\treturn __ret;\n       }\n \n       // [documentation is inherited]"}, {"sha": "fd459636049672aecb8a063857c8a0d45b27f6b1", "filename": "libstdc++-v3/testsuite/27_io/filebuf_virtuals.cc", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1deba98bd23b18dbaf4da0e42ee3d5d6c48fe758/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_virtuals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1deba98bd23b18dbaf4da0e42ee3d5d6c48fe758/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_virtuals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_virtuals.cc?ref=1deba98bd23b18dbaf4da0e42ee3d5d6c48fe758", "patch": "@@ -74,6 +74,7 @@ const char name_03[] = \"filebuf_virtuals-3.txt\"; // empty file, need to create\n const char name_04[] = \"filebuf_virtuals-4.txt\"; // empty file, need to create\n const char name_05[] = \"filebuf_virtuals-5.txt\"; // empty file, need to create\n const char name_06[] = \"filebuf_virtuals-6.txt\"; // empty file, need to create\n+const char name_07[] = \"filebuf_virtuals-7.txt\"; // empty file, need to create\n \n class derived_filebuf: public std::filebuf\n {\n@@ -704,6 +705,60 @@ void test12()\n   fbuf.close();  \n }\n \n+class errorcvt : public std::codecvt<char, char, mbstate_t>\n+{\n+protected:\n+  std::codecvt_base::result\n+  do_out(mbstate_t&, const char* from, const char*,\n+\t const char*& from_next, char* to, char*,\n+\t char*& to_next) const\n+  {\n+    from_next = from;\n+    to_next = to;\n+    return std::codecvt<char, char, mbstate_t>::error;\n+  }\n+  \n+  virtual bool do_always_noconv() const throw()\n+  {\n+    return false;\n+  }\n+};\n+\n+// libstdc++/9182\n+void test13()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  locale loc;\n+  loc = locale(loc, new errorcvt);\n+  \n+  filebuf fbuf1;\n+  fbuf1.pubimbue(loc);\n+  fbuf1.open(name_07, ios_base::out | ios_base::trunc);\n+  fbuf1.sputn(\"ison\", 4); \n+  int r = fbuf1.pubsync();\n+  VERIFY( r == -1 );\n+  fbuf1.close();\n+}\n+\n+void test14()\n+{\n+  using namespace std;\n+  bool test = true;\n+  \n+  locale loc;\n+  loc = locale(loc, new errorcvt);\n+  \n+  filebuf fbuf1;\n+  fbuf1.pubimbue(loc);\n+  fbuf1.pubsetbuf(0, 0);\n+  fbuf1.open(name_07, ios_base::out | ios_base::trunc);\n+  streamsize n = fbuf1.sputn(\"onne\", 4);\n+  VERIFY( n == 0 );\n+  fbuf1.close();\n+}\n+\n main() \n {\n   test01();\n@@ -720,5 +775,7 @@ main()\n   test10();\n   test11();\n   test12();\n+  test13();\n+  test14();\n   return 0;\n }"}, {"sha": "a9778952d90d64b6e8b7dfd2951853aeff3343ed", "filename": "libstdc++-v3/testsuite/27_io/stringstream.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1deba98bd23b18dbaf4da0e42ee3d5d6c48fe758/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1deba98bd23b18dbaf4da0e42ee3d5d6c48fe758/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringstream.cc?ref=1deba98bd23b18dbaf4da0e42ee3d5d6c48fe758", "patch": "@@ -56,8 +56,26 @@ namespace test\n   template class basic_stringstream<pod_char, char_traits<pod_char> >;\n } // test\n \n+// libstdc++/9826\n+void test02()\n+{\n+  using namespace std;\n+  using __gnu_cxx_test::pod_char;\n+\n+  basic_stringstream<pod_char, char_traits<pod_char> > sstr;\n+  // 1\n+  basic_string<pod_char, char_traits<pod_char> > str;\n+  sstr >> str;\n+  // 2\n+  pod_char*  chr;\n+  sstr >> chr;\n+  // 3\n+  sstr >> ws;\n+}\n+\n int main() \n {\n   test01();\n+  test02();\n   return 0;\n }"}]}