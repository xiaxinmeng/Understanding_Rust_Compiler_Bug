{"sha": "d656a3d3ce88d402a14e8c120f1b0e78a3979deb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY1NmEzZDNjZTg4ZDQwMmExNGU4YzEyMGYxYjBlNzhhMzk3OWRlYg==", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-07-02T02:00:26Z"}, "committer": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-07-30T21:53:39Z"}, "message": "rs6000: Add tests for SSE4.1 \"ceil\" intrinsics\n\nAdd the tests for _mm_ceil_pd, _mm_ceil_ps, _mm_ceil_sd, _mm_ceil_ss.\n\nCopy a test for _mm_ceil_pd and _mm_ceil_ps from\ngcc/testsuite/gcc.target/i386.\n\nDefine __VSX_SSE2__ to pick up some union definitions in\nm128-check.h.\n\n2021-07-30  Paul A. Clarke  <pc@us.ibm.com>\n\ngcc/testsuite\n\t* gcc.target/powerpc/sse4_1-ceilpd.c: New.\n\t* gcc.target/powerpc/sse4_1-ceilps.c: New.\n\t* gcc.target/powerpc/sse4_1-ceilsd.c: New.\n\t* gcc.target/powerpc/sse4_1-ceilss.c: New.\n\t* gcc.target/powerpc/sse4_1-round-data.h: New.\n\t* gcc.target/powerpc/sse4_1-round.h: New.\n\t* gcc.target/powerpc/sse4_1-round2.h: New.\n\t* gcc.target/powerpc/sse4_1-roundpd-3.c: Copy from gcc.target/i386\n\tand adjust dg directives to suit.\n\t* gcc.target/powerpc/sse4_1-check.h (__VSX_SSE2__): Define.", "tree": {"sha": "0e25dbe9dc85531c9322fe7deabd65cfb800158f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e25dbe9dc85531c9322fe7deabd65cfb800158f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d656a3d3ce88d402a14e8c120f1b0e78a3979deb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d656a3d3ce88d402a14e8c120f1b0e78a3979deb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d656a3d3ce88d402a14e8c120f1b0e78a3979deb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d656a3d3ce88d402a14e8c120f1b0e78a3979deb/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd9a8737d478f7f1d01a9d5f1cc4309ffbb53103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd9a8737d478f7f1d01a9d5f1cc4309ffbb53103", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd9a8737d478f7f1d01a9d5f1cc4309ffbb53103"}], "stats": {"total": 420, "additions": 420, "deletions": 0}, "files": [{"sha": "f532fdb9c28520b4d050c3601fdb9ba4f75d6d9f", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-ceilpd.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d656a3d3ce88d402a14e8c120f1b0e78a3979deb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-ceilpd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d656a3d3ce88d402a14e8c120f1b0e78a3979deb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-ceilpd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-ceilpd.c?ref=d656a3d3ce88d402a14e8c120f1b0e78a3979deb", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target p8vector_hw } */\n+/* { dg-options \"-O2 -mpower8-vector -Wno-psabi\" } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <smmintrin.h>\n+\n+#define VEC_T __m128d\n+#define FP_T double\n+\n+#define ROUND_INTRIN(x, mode) _mm_ceil_pd (x)\n+\n+#include \"sse4_1-round-data.h\"\n+\n+static struct data data[] = {\n+  { .value = { .f = {  0.00,  0.25 } }, .answer = {  0.0,  1.0 } },\n+  { .value = { .f = {  0.50,  0.75 } }, .answer = {  1.0,  1.0 } },\n+\n+  { { .f = {  0x1.ffffffffffffcp+50,  0x1.ffffffffffffdp+50 } },\n+           {  0x1.ffffffffffffcp+50,  0x1.0000000000000p+51 } },\n+  { { .f = {  0x1.ffffffffffffep+50,  0x1.fffffffffffffp+50 } },\n+           {  0x1.0000000000000p+51,  0x1.0000000000000p+51 } },\n+  { { .f = {  0x1.0000000000000p+51,  0x1.0000000000001p+51 } },\n+           {  0x1.0000000000000p+51,  0x1.0000000000002p+51 } },\n+  { { .f = {  0x1.0000000000002p+51,  0x1.0000000000003p+51 } },\n+           {  0x1.0000000000002p+51,  0x1.0000000000004p+51 } },\n+\n+  { { .f = {  0x1.ffffffffffffep+51,  0x1.fffffffffffffp+51 } },\n+           {  0x1.ffffffffffffep+51,  0x1.0000000000000p+52 } },\n+  { { .f = {  0x1.0000000000000p+52,  0x1.0000000000001p+52 } },\n+           {  0x1.0000000000000p+52,  0x1.0000000000001p+52 } },\n+\n+  { { .f = { -0x1.0000000000001p+52, -0x1.0000000000000p+52 } },\n+           { -0x1.0000000000001p+52, -0x1.0000000000000p+52 } },\n+  { { .f = { -0x1.fffffffffffffp+51, -0x1.ffffffffffffep+51 } },\n+           { -0x1.ffffffffffffep+51, -0x1.ffffffffffffep+51 } },\n+\n+  { { .f = { -0x1.0000000000003p+51, -0x1.0000000000002p+51 } },\n+           { -0x1.0000000000002p+51, -0x1.0000000000002p+51 } },\n+  { { .f = { -0x1.0000000000001p+51, -0x1.0000000000000p+51 } },\n+           { -0x1.0000000000000p+51, -0x1.0000000000000p+51 } },\n+  { { .f = { -0x1.fffffffffffffp+50, -0x1.ffffffffffffep+50 } },\n+           { -0x1.ffffffffffffcp+50, -0x1.ffffffffffffcp+50 } },\n+  { { .f = { -0x1.ffffffffffffdp+50, -0x1.ffffffffffffcp+50 } },\n+           { -0x1.ffffffffffffcp+50, -0x1.ffffffffffffcp+50 } },\n+\n+  { { .f = { -1.00, -0.75 } }, { -1.0,  0.0 } },\n+  { { .f = { -0.50, -0.25 } }, {  0.0,  0.0 } }\n+};\n+\n+#include \"sse4_1-round.h\""}, {"sha": "1e29999a57d85dd195535cd800d12da590af5712", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-ceilps.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d656a3d3ce88d402a14e8c120f1b0e78a3979deb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-ceilps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d656a3d3ce88d402a14e8c120f1b0e78a3979deb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-ceilps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-ceilps.c?ref=d656a3d3ce88d402a14e8c120f1b0e78a3979deb", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target p8vector_hw } */\n+/* { dg-options \"-O2 -mpower8-vector -Wno-psabi\" } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <smmintrin.h>\n+\n+#define VEC_T __m128\n+#define FP_T float\n+\n+#define ROUND_INTRIN(x, mode) _mm_ceil_ps (x)\n+\n+#include \"sse4_1-round-data.h\"\n+\n+static struct data data[] = {\n+  { { .f = {  0.00,  0.25,  0.50,  0.75 } }, {  0.0,  1.0,  1.0,  1.0 } },\n+\n+  { { .f = {  0x1.fffff8p+21,  0x1.fffffap+21,\n+\t      0x1.fffffcp+21,  0x1.fffffep+21 } },\n+           {  0x1.fffff8p+21,  0x1.000000p+22,\n+\t      0x1.000000p+22,  0x1.000000p+22 } },\n+\n+  { { .f = {  0x1.fffffap+22,  0x1.fffffcp+22,\n+\t      0x1.fffffep+22,  0x1.fffffep+23 } },\n+           {  0x1.fffffcp+22,  0x1.fffffcp+22,\n+\t      0x1.000000p+23,  0x1.fffffep+23 } },\n+\n+  { { .f = { -0x1.fffffep+23, -0x1.fffffep+22,\n+\t     -0x1.fffffcp+22, -0x1.fffffap+22 } },\n+           { -0x1.fffffep+23, -0x1.fffffcp+22,\n+\t     -0x1.fffffcp+22, -0x1.fffff8p+22 } },\n+\n+  { { .f = { -0x1.fffffep+21, -0x1.fffffcp+21,\n+\t     -0x1.fffffap+21, -0x1.fffff8p+21 } },\n+           { -0x1.fffff8p+21, -0x1.fffff8p+21,\n+\t     -0x1.fffff8p+21, -0x1.fffff8p+21 } },\n+\n+  { { .f = { -1.00, -0.75, -0.50, -0.25 } }, { -1.0,  0.0,  0.0,  0.0 } }\n+};\n+\n+#include \"sse4_1-round.h\""}, {"sha": "cc0d9c1d0afeeed60866040a3e3213b3861271f9", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-ceilsd.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d656a3d3ce88d402a14e8c120f1b0e78a3979deb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-ceilsd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d656a3d3ce88d402a14e8c120f1b0e78a3979deb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-ceilsd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-ceilsd.c?ref=d656a3d3ce88d402a14e8c120f1b0e78a3979deb", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target p8vector_hw } */\n+/* { dg-options \"-O2 -mpower8-vector -Wno-psabi\" } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <smmintrin.h>\n+\n+#define VEC_T __m128d\n+#define FP_T double\n+\n+#define ROUND_INTRIN(x, y) _mm_ceil_sd (x, y)\n+\n+#include \"sse4_1-round-data.h\"\n+\n+static struct data2 data[] = {\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0.00, IGNORED } },\n+    .answer = {  0.0, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0.25, IGNORED } },\n+    .answer = {  1.0, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0.50, IGNORED } },\n+    .answer = {  1.0, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0.75, IGNORED } },\n+    .answer = {  1.0, PASSTHROUGH } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.ffffffffffffcp+50, IGNORED } },\n+    .answer = {  0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.ffffffffffffdp+50, IGNORED } },\n+    .answer = {  0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.ffffffffffffep+50, IGNORED } },\n+    .answer = {  0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffffffffffp+50, IGNORED } },\n+    .answer = {  0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.0000000000000p+51, IGNORED } },\n+    .answer = {  0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.0000000000001p+51, IGNORED } },\n+    .answer = {  0x1.0000000000002p+51, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.0000000000002p+51, IGNORED } },\n+    .answer = {  0x1.0000000000002p+51, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.0000000000003p+51, IGNORED } },\n+    .answer = {  0x1.0000000000004p+51, PASSTHROUGH } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.ffffffffffffep+51, IGNORED } },\n+    .answer = {  0x1.ffffffffffffep+51, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffffffffffp+51, IGNORED } },\n+    .answer = {  0x1.0000000000000p+52, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.0000000000000p+52, IGNORED } },\n+    .answer = {  0x1.0000000000000p+52, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.0000000000001p+52, IGNORED } },\n+    .answer = {  0x1.0000000000001p+52, PASSTHROUGH } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.0000000000001p+52, IGNORED } },\n+    .answer = { -0x1.0000000000001p+52, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.0000000000000p+52, IGNORED } },\n+    .answer = { -0x1.0000000000000p+52, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffffffffffffp+51, IGNORED } },\n+    .answer = { -0x1.ffffffffffffep+51, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.ffffffffffffep+51, IGNORED } },\n+    .answer = { -0x1.ffffffffffffep+51, PASSTHROUGH } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.0000000000003p+51, IGNORED } },\n+    .answer = { -0x1.0000000000002p+51, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.0000000000002p+51, IGNORED } },\n+    .answer = { -0x1.0000000000002p+51, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.0000000000001p+51, IGNORED } },\n+    .answer = { -0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.0000000000000p+51, IGNORED } },\n+    .answer = { -0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.ffffffffffffcp+50, IGNORED } },\n+    .answer = { -0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.ffffffffffffep+50, IGNORED } },\n+    .answer = { -0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.ffffffffffffdp+50, IGNORED } },\n+    .answer = { -0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.ffffffffffffcp+50, IGNORED } },\n+    .answer = { -0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -1.00, IGNORED } },\n+    .answer = { -1.0, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0.75, IGNORED } },\n+    .answer = { -0.0, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0.50, IGNORED } },\n+    .answer = { -0.0, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0.25, IGNORED } },\n+    .answer = { -0.0, PASSTHROUGH } }\n+};\n+\n+#include \"sse4_1-round2.h\""}, {"sha": "cf1a0392990eeede4143023109fc0a6bf502d031", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-ceilss.c", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d656a3d3ce88d402a14e8c120f1b0e78a3979deb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-ceilss.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d656a3d3ce88d402a14e8c120f1b0e78a3979deb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-ceilss.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-ceilss.c?ref=d656a3d3ce88d402a14e8c120f1b0e78a3979deb", "patch": "@@ -0,0 +1,95 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target p8vector_hw } */\n+/* { dg-options \"-O2 -mpower8-vector -Wno-psabi\" } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <smmintrin.h>\n+\n+#define VEC_T __m128\n+#define FP_T float\n+\n+#define ROUND_INTRIN(x, y) _mm_ceil_ss (x, y)\n+\n+#include \"sse4_1-round-data.h\"\n+\n+static struct data2 data[] = {\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0.00,  IGNORED, IGNORED, IGNORED } },\n+    .answer = {  0.0, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0.25, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  1.0, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0.50, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  1.0, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0.75, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  1.0, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffff8p+21, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffap+21, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  0x1.000000p+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffcp+21, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  0x1.000000p+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffep+21, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  0x1.000000p+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffap+22, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  0x1.fffffcp+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffcp+22, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  0x1.fffffcp+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffep+22, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  0x1.000000p+23, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffep+23, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  0x1.fffffep+23, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffffep+23, IGNORED, IGNORED, IGNORED } },\n+    .answer = { -0x1.fffffep+23, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffffep+22, IGNORED, IGNORED, IGNORED } },\n+    .answer = { -0x1.fffffcp+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffffcp+22, IGNORED, IGNORED, IGNORED } },\n+    .answer = { -0x1.fffffcp+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffffap+22, IGNORED, IGNORED, IGNORED } },\n+    .answer = { -0x1.fffff8p+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffffep+21, IGNORED, IGNORED, IGNORED } },\n+    .answer = { -0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffffcp+21, IGNORED, IGNORED, IGNORED } },\n+    .answer = { -0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffffap+21, IGNORED, IGNORED, IGNORED } },\n+    .answer = { -0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffff8p+21, IGNORED, IGNORED, IGNORED } },\n+    .answer = { -0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -1.00, IGNORED, IGNORED, IGNORED } },\n+    .answer = { -1.0, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0.75, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  0.0, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0.50, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  0.0, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0.25, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  0.0, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } }\n+};\n+\n+#include \"sse4_1-round2.h\""}, {"sha": "16330533e50a50345b5d87a76a575b86c2c57069", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-check.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d656a3d3ce88d402a14e8c120f1b0e78a3979deb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d656a3d3ce88d402a14e8c120f1b0e78a3979deb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-check.h?ref=d656a3d3ce88d402a14e8c120f1b0e78a3979deb", "patch": "@@ -1,6 +1,10 @@\n #include <stdio.h>\n #include <stdlib.h>\n \n+/* Define this to enable the combination of VSX vector double and\n+   SSE2 data types.  */\n+#define __VSX_SSE2__ 1\n+\n #include \"m128-check.h\"\n \n //#define DEBUG 1"}, {"sha": "543f5bc2181b4113eabbbb741af0e58dbde3a036", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-round-data.h", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d656a3d3ce88d402a14e8c120f1b0e78a3979deb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-round-data.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d656a3d3ce88d402a14e8c120f1b0e78a3979deb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-round-data.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-round-data.h?ref=d656a3d3ce88d402a14e8c120f1b0e78a3979deb", "patch": "@@ -0,0 +1,20 @@\n+/* Pick a few numbers at random which are not in the input data and\n+   unlikely to show up naturally.  */\n+#define PASSTHROUGH -29.5\n+#define IGNORED -61.5\n+\n+union value {\n+  VEC_T x;\n+  FP_T f[sizeof (VEC_T) / sizeof (FP_T)];\n+};\n+\n+struct data {\n+  union value value;\n+  double answer[sizeof (VEC_T) / sizeof (FP_T)];\n+};\n+\n+struct data2 {\n+  union value value1;\n+  union value value2;\n+  double answer[sizeof (VEC_T) / sizeof (FP_T)];\n+};"}, {"sha": "33409094818093561bc81697f54dcb52bacccf59", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-round.h", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d656a3d3ce88d402a14e8c120f1b0e78a3979deb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-round.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d656a3d3ce88d402a14e8c120f1b0e78a3979deb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-round.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-round.h?ref=d656a3d3ce88d402a14e8c120f1b0e78a3979deb", "patch": "@@ -0,0 +1,27 @@\n+#include <fenv.h>\n+#include <smmintrin.h>\n+#include \"sse4_1-check.h\"\n+\n+#define DIM(a) (sizeof (a) / sizeof (a)[0])\n+\n+static int modes[] = { FE_TONEAREST, FE_UPWARD, FE_DOWNWARD, FE_TOWARDZERO };\n+\n+static void\n+TEST (void)\n+{\n+  int i, j, ri, round_save;\n+\n+  round_save = fegetround ();\n+  for (ri = 0; ri < DIM (modes); ri++) {\n+    fesetround (modes[ri]);\n+    for (i = 0; i < DIM (data); i++) {\n+      union value guess;\n+      guess.x = ROUND_INTRIN (data[i].value.x, /* Ignored.  */);\n+      for (j = 0; j < DIM (data[i].value.f); j++) {\n+        if (guess.f[j] != data[i].answer[j])\n+          abort ();\n+      }\n+    }\n+  }\n+  fesetround (round_save);\n+}"}, {"sha": "68a2fdcb736b5275226b06588ff942f2cc6d209a", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-round2.h", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d656a3d3ce88d402a14e8c120f1b0e78a3979deb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-round2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d656a3d3ce88d402a14e8c120f1b0e78a3979deb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-round2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-round2.h?ref=d656a3d3ce88d402a14e8c120f1b0e78a3979deb", "patch": "@@ -0,0 +1,27 @@\n+#include <fenv.h>\n+#include <smmintrin.h>\n+#include \"sse4_1-check.h\"\n+\n+#define DIM(a) (sizeof (a) / sizeof (a)[0])\n+\n+static int modes[] = { FE_TONEAREST, FE_UPWARD, FE_DOWNWARD, FE_TOWARDZERO };\n+\n+static void\n+TEST (void)\n+{\n+  int i, j, ri, round_save;\n+\n+  round_save = fegetround ();\n+  for (ri = 0; ri < DIM (modes); ri++) {\n+    fesetround (modes[ri]);\n+    for (i = 0; i < DIM (data); i++) {\n+      union value guess;\n+      guess.x = ROUND_INTRIN (data[i].value1.x, data[i].value2.x);\n+      for (j = 0; j < DIM (data[i].value1.f); j++) {\n+        if (guess.f[j] != data[i].answer[j])\n+          abort ();\n+      }\n+    }\n+  }\n+  fesetround (round_save);\n+}"}, {"sha": "88a5f0718ebb167674e7aaba675a02ed693dd68a", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-roundpd-3.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d656a3d3ce88d402a14e8c120f1b0e78a3979deb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-roundpd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d656a3d3ce88d402a14e8c120f1b0e78a3979deb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-roundpd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-roundpd-3.c?ref=d656a3d3ce88d402a14e8c120f1b0e78a3979deb", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target p8vector_hw } */\n+/* { dg-options \"-O2 -mpower8-vector -Wno-psabi\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s;\n+  double e[2] = {0.0};\n+  int i;\n+\n+  s.x = _mm_set_pd (1.1234, -2.3478);\n+  u.x = _mm_ceil_pd (s.x);\n+\n+  for (i = 0; i < 2; i++)\n+    {\n+      __m128d tmp = _mm_load_sd (&s.a[i]);\n+      tmp = _mm_ceil_sd (tmp, tmp);\n+      _mm_store_sd (&e[i], tmp);\n+    }\n+  \n+  if (check_union128d (u, e))\n+    abort ();\n+} "}]}