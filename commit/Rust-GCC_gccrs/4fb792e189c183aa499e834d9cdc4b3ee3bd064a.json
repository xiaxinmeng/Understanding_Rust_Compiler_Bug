{"sha": "4fb792e189c183aa499e834d9cdc4b3ee3bd064a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZiNzkyZTE4OWMxODNhYTQ5OWU4MzRkOWNkYzRiM2VlM2JkMDY0YQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-09-25T14:51:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-09-25T14:51:39Z"}, "message": "re PR debug/83941 (Debug info generated with -flto contains useless forwarders)\n\n2018-09-25  Richard Biener  <rguenther@suse.de>\n\n\tPR debug/83941\n\t* dwarf2out.c (add_AT_external_die_ref): Remove now redundant\n\tGC-ification.\n\t(maybe_create_die_with_external_ref): Do not create\n\tDW_TAG_imported_unit here.\n\t(add_abstract_origin_attribute): Handle external BLOCK refs.\n\t(dwarf2out_abstract_function): Simplify LTO case.\n\t(dwarf2out_early_finish): Create DW_TAG_imported_unit explicitely\n\trather than using maybe_create_die_with_external_ref.\n\nFrom-SVN: r264573", "tree": {"sha": "843caed21202ecfd5a8d636551059034a18b5bfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/843caed21202ecfd5a8d636551059034a18b5bfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fb792e189c183aa499e834d9cdc4b3ee3bd064a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fb792e189c183aa499e834d9cdc4b3ee3bd064a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fb792e189c183aa499e834d9cdc4b3ee3bd064a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fb792e189c183aa499e834d9cdc4b3ee3bd064a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f5ec13f15ddaa6dc61b81d5c14cd8b30df896b40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5ec13f15ddaa6dc61b81d5c14cd8b30df896b40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5ec13f15ddaa6dc61b81d5c14cd8b30df896b40"}], "stats": {"total": 67, "additions": 40, "deletions": 27}, "files": [{"sha": "6be143e9f18545f2036e7ca5825716d22cc56dd9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fb792e189c183aa499e834d9cdc4b3ee3bd064a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fb792e189c183aa499e834d9cdc4b3ee3bd064a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4fb792e189c183aa499e834d9cdc4b3ee3bd064a", "patch": "@@ -1,3 +1,15 @@\n+2018-09-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/83941\n+\t* dwarf2out.c (add_AT_external_die_ref): Remove now redundant\n+\tGC-ification.\n+\t(maybe_create_die_with_external_ref): Do not create\n+\tDW_TAG_imported_unit here.\n+\t(add_abstract_origin_attribute): Handle external BLOCK refs.\n+\t(dwarf2out_abstract_function): Simplify LTO case.\n+\t(dwarf2out_early_finish): Create DW_TAG_imported_unit explicitely\n+\trather than using maybe_create_die_with_external_ref.\n+\n 2018-09-25  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (frndintxf2_mask_pm): Remove."}, {"sha": "160726930bd873b0bb36b6c436d9cdfd2e75961d", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 28, "deletions": 27, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fb792e189c183aa499e834d9cdc4b3ee3bd064a/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fb792e189c183aa499e834d9cdc4b3ee3bd064a/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=4fb792e189c183aa499e834d9cdc4b3ee3bd064a", "patch": "@@ -5868,7 +5868,7 @@ add_AT_external_die_ref (dw_die_ref die, enum dwarf_attribute attr_kind,\n   /* ???  We probably want to share these, thus put a ref to the DIE\n      we create here to the external_die_map entry.  */\n   dw_die_ref ref = new_die_raw (die->die_tag);\n-  ref->die_id.die_symbol = IDENTIFIER_POINTER (get_identifier (symbol));\n+  ref->die_id.die_symbol = symbol;\n   ref->die_offset = offset;\n   ref->with_offset = 1;\n   add_AT_die_ref (die, attr_kind, ref);\n@@ -5966,8 +5966,6 @@ maybe_create_die_with_external_ref (tree decl)\n     case TRANSLATION_UNIT_DECL:\n       {\n \tdie = comp_unit_die ();\n-\tdw_die_ref import = new_die (DW_TAG_imported_unit, die, NULL_TREE);\n-\tadd_AT_external_die_ref (import, DW_AT_import, sym, off);\n \t/* We re-target all CU decls to the LTRANS CU DIE, so no need\n \t   to create a DIE for the original CUs.  */\n \treturn die;\n@@ -21134,19 +21132,21 @@ add_abstract_origin_attribute (dw_die_ref die, tree origin)\n {\n   dw_die_ref origin_die = NULL;\n \n-  if (DECL_P (origin))\n+  /* For late LTO debug output we want to refer directly to the abstract\n+     DIE in the early debug rather to the possibly existing concrete\n+     instance and avoid creating that just for this purpose.  */\n+  sym_off_pair *desc;\n+  if (in_lto_p\n+      && external_die_map\n+      && (desc = external_die_map->get (origin)))\n     {\n-      sym_off_pair *desc;\n-      if (in_lto_p\n-\t  && external_die_map\n-\t  && (desc = external_die_map->get (origin)))\n-\t{\n-\t  add_AT_external_die_ref (die, DW_AT_abstract_origin,\n-\t\t\t\t   desc->sym, desc->off);\n-\t  return;\n-\t}\n-      origin_die = lookup_decl_die (origin);\n+      add_AT_external_die_ref (die, DW_AT_abstract_origin,\n+\t\t\t       desc->sym, desc->off);\n+      return;\n     }\n+\n+  if (DECL_P (origin))\n+    origin_die = lookup_decl_die (origin);\n   else if (TYPE_P (origin))\n     origin_die = lookup_type_die (origin);\n   else if (TREE_CODE (origin) == BLOCK)\n@@ -22458,21 +22458,15 @@ dwarf2out_abstract_function (tree decl)\n   if (DECL_IGNORED_P (decl))\n     return;\n \n-  /* Do not lazily create a DIE for decl here just because we\n-     got called via debug_hooks->outlining_inline_function.  */\n-  if (in_lto_p\n-      && external_die_map\n-      && external_die_map->get (decl))\n+  /* In LTO we're all set.  We already created abstract instances\n+     early and we want to avoid creating a concrete instance of that\n+     if we don't output it.  */\n+  if (in_lto_p)\n     return;\n \n   old_die = lookup_decl_die (decl);\n-  /* With early debug we always have an old DIE unless we are in LTO\n-     and the user did not compile but only link with debug.  */\n-  if (in_lto_p && ! old_die)\n-    return;\n   gcc_assert (old_die != NULL);\n-  if (get_AT (old_die, DW_AT_inline)\n-      || get_AT (old_die, DW_AT_abstract_origin))\n+  if (get_AT (old_die, DW_AT_inline))\n     /* We've already generated the abstract instance.  */\n     return;\n \n@@ -31907,8 +31901,15 @@ dwarf2out_early_finish (const char *filename)\n \t{\n \t  unsigned i;\n \t  tree tu;\n-\t  FOR_EACH_VEC_SAFE_ELT (all_translation_units, i, tu)\n-\t    maybe_create_die_with_external_ref (tu);\n+\t  if (external_die_map)\n+\t    FOR_EACH_VEC_SAFE_ELT (all_translation_units, i, tu)\n+\t      if (sym_off_pair *desc = external_die_map->get (tu))\n+\t\t{\n+\t\t  dw_die_ref import = new_die (DW_TAG_imported_unit,\n+\t\t\t\t\t       comp_unit_die (), NULL_TREE);\n+\t\t  add_AT_external_die_ref (import, DW_AT_import,\n+\t\t\t\t\t   desc->sym, desc->off);\n+\t\t}\n \t}\n \n       early_dwarf_finished = true;"}]}