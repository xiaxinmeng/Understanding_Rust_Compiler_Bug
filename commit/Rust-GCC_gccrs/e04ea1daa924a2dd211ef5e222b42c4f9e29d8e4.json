{"sha": "e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA0ZWExZGFhOTI0YTJkZDIxMWVmNWUyMjJiNDJjNGY5ZTI5ZDhlNA==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2016-12-16T12:56:21Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2016-12-16T12:56:21Z"}, "message": "[ARC] Rework code for profiling.\n\ngcc/\n2016-12-16  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc.h (LINK_SPEC): Tidy up.\n\t(ENDFILE_SPEC): Likewise.\n\t(LIB_SPEC): Likewise.\n\t(STARTFILE_SPEC): Include gcrt0 when profiling.\n\t(FUNCTION_PROFILER): Use __mcount.\n\t* config/arc/arc.opt (mucb-mcount): Remove.\n\t* doc/invoke.texi (ARC): Remove mucb-mcount doc.\n\t* arc/arc-protos.h (arc_profile_call): Remove.\n\t* config/arc/arc.c (write_profile_sections): Likewise.\n\t(arc_profile_call): Likewise.\n\t(unspec_prof_hash): Likewise.\n\t(unspec_prof_htab_eq): Likewise.\n\t(arc_legitimate_constant_p): Remove UNSPEC_PROF.\n\t(arc_reorg): Remove call to write_profile_sections.\n\t* config/arc/arc.md (call): Remove call to arc_profile_call.\n\t(call_value): Likewise.\n\t(sibcall): Likewise.\n\t(sibcall_value): Likewise.\n\t(define_constants): Remove UNSPEC_PROF.\n\nlibgcc/\n\t* config.host (arc*-*-linux-uclibc*): Remove libgmon, crtg, and\n\tcrtgend.\n\t(arc*-*-elf*): Likewise.\n\t* config/arc/t-arc: Remove old gmon lib targets.\n\t* config/arc/crtg.S: Remove.\n\t* config/arc/crtgend.S: Likewise.\n\t* config/arc/gmon/atomic.h: Likewise.\n\t* config/arc/gmon/auxreg.h: Likewise.\n\t* config/arc/gmon/dcache_linesz.S: Likewise.\n\t* config/arc/gmon/gmon.c: Likewise.\n\t* config/arc/gmon/machine-gmon.h: Likewise.\n\t* config/arc/gmon/mcount.c: Likewise.\n\t* config/arc/gmon/prof-freq-stub.S: Likewise.\n\t* config/arc/gmon/prof-freq.c: Likewise.\n\t* config/arc/gmon/profil.S: Likewise.\n\t* config/arc/gmon/sys/gmon.h: Likewise.\n\t* config/arc/gmon/sys/gmon_out.h: Likewise.\n\t* config/arc/t-arc-newlib: Likewise.\n\t* config/arc/t-arc700-uClibc: Renamed to t-arc-uClibc.\n\nFrom-SVN: r243742", "tree": {"sha": "a94285599d8bd451e45d16b1e609c3f8ed57acb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a94285599d8bd451e45d16b1e609c3f8ed57acb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d476b53c3651786fa283f89ad9434731f4f902e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d476b53c3651786fa283f89ad9434731f4f902e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d476b53c3651786fa283f89ad9434731f4f902e9"}], "stats": {"total": 1802, "additions": 66, "deletions": 1736}, "files": [{"sha": "e5f92a41f185a547fc62aa3b2bdcc97f5f3d8e8a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4", "patch": "@@ -1,3 +1,25 @@\n+2016-12-16  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.h (LINK_SPEC): Tidy up.\n+\t(ENDFILE_SPEC): Likewise.\n+\t(LIB_SPEC): Likewise.\n+\t(STARTFILE_SPEC): Include gcrt0 when profiling.\n+\t(FUNCTION_PROFILER): Use __mcount.\n+\t* config/arc/arc.opt (mucb-mcount): Remove.\n+\t* doc/invoke.texi (ARC): Remove mucb-mcount doc.\n+\t* arc/arc-protos.h (arc_profile_call): Remove.\n+\t* config/arc/arc.c (write_profile_sections): Likewise.\n+\t(arc_profile_call): Likewise.\n+\t(unspec_prof_hash): Likewise.\n+\t(unspec_prof_htab_eq): Likewise.\n+\t(arc_legitimate_constant_p): Remove UNSPEC_PROF.\n+\t(arc_reorg): Remove call to write_profile_sections.\n+\t* config/arc/arc.md (call): Remove call to arc_profile_call.\n+\t(call_value): Likewise.\n+\t(sibcall): Likewise.\n+\t(sibcall_value): Likewise.\n+\t(define_constants): Remove UNSPEC_PROF.\n+\n 2016-12-16  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.md (mulsidi_600): Change to insn_and_split,"}, {"sha": "d896fe95a815346c0b203027cb0beaa1cd914790", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4", "patch": "@@ -70,7 +70,6 @@ extern bool arc_raw_symbolic_reference_mentioned_p (rtx, bool);\n extern bool arc_legitimate_pic_operand_p (rtx);\n extern bool arc_is_longcall_p (rtx);\n extern bool arc_is_shortcall_p (rtx);\n-extern bool arc_profile_call (rtx callee);\n extern bool valid_brcc_with_delay_p (rtx *);\n extern bool small_data_pattern (rtx , machine_mode);\n extern rtx arc_rewrite_small_data (rtx);"}, {"sha": "9a72786e00f538e3fbb016019520a14c656edccd", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 0, "deletions": 152, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4", "patch": "@@ -3610,97 +3610,6 @@ arc_print_operand_address (FILE *file , rtx addr)\n     }\n }\n \n-/* Called via walk_stores.  DATA points to a hash table we can use to\n-   establish a unique SYMBOL_REF for each counter, which corresponds to\n-   a caller-callee pair.\n-   X is a store which we want to examine for an UNSPEC_PROF, which\n-   would be an address loaded into a register, or directly used in a MEM.\n-   If we found an UNSPEC_PROF, if we encounter a new counter the first time,\n-   write out a description and a data allocation for a 32 bit counter.\n-   Also, fill in the appropriate symbol_ref into each UNSPEC_PROF instance.  */\n-\n-static void\n-write_profile_sections (rtx dest ATTRIBUTE_UNUSED, rtx x, void *data)\n-{\n-  rtx *srcp, src;\n-  htab_t htab = (htab_t) data;\n-  rtx *slot;\n-\n-  if (GET_CODE (x) != SET)\n-    return;\n-  srcp = &SET_SRC (x);\n-  if (MEM_P (*srcp))\n-    srcp = &XEXP (*srcp, 0);\n-  else if (MEM_P (SET_DEST (x)))\n-    srcp = &XEXP (SET_DEST (x), 0);\n-  src = *srcp;\n-  if (GET_CODE (src) != CONST)\n-    return;\n-  src = XEXP (src, 0);\n-  if (GET_CODE (src) != UNSPEC || XINT (src, 1) != UNSPEC_PROF)\n-    return;\n-\n-  gcc_assert (XVECLEN (src, 0) == 3);\n-  if (!htab_elements (htab))\n-    {\n-      output_asm_insn (\".section .__arc_profile_desc, \\\"a\\\"\\n\"\n-\t\t       \"\\t.long %0 + 1\\n\",\n-\t\t       &XVECEXP (src, 0, 0));\n-    }\n-  slot = (rtx *) htab_find_slot (htab, src, INSERT);\n-  if (*slot == HTAB_EMPTY_ENTRY)\n-    {\n-      static int count_nr;\n-      char buf[24];\n-      rtx count;\n-\n-      *slot = src;\n-      sprintf (buf, \"__prof_count%d\", count_nr++);\n-      count = gen_rtx_SYMBOL_REF (Pmode, xstrdup (buf));\n-      XVECEXP (src, 0, 2) = count;\n-      output_asm_insn (\".section\\t.__arc_profile_desc, \\\"a\\\"\\n\"\n-\t\t       \"\\t.long\\t%1\\n\"\n-\t\t       \"\\t.section\\t.__arc_profile_counters, \\\"aw\\\"\\n\"\n-\t\t       \"\\t.type\\t%o2, @object\\n\"\n-\t\t       \"\\t.size\\t%o2, 4\\n\"\n-\t\t       \"%o2:\\t.zero 4\",\n-\t\t       &XVECEXP (src, 0, 0));\n-      *srcp = count;\n-    }\n-  else\n-    *srcp = XVECEXP (*slot, 0, 2);\n-}\n-\n-/* Hash function for UNSPEC_PROF htab.  Use both the caller's name and\n-   the callee's name (if known).  */\n-\n-static hashval_t\n-unspec_prof_hash (const void *x)\n-{\n-  const_rtx u = (const_rtx) x;\n-  const_rtx s1 = XVECEXP (u, 0, 1);\n-\n-  return (htab_hash_string (XSTR (XVECEXP (u, 0, 0), 0))\n-\t  ^ (s1->code == SYMBOL_REF ? htab_hash_string (XSTR (s1, 0)) : 0));\n-}\n-\n-/* Equality function for UNSPEC_PROF htab.  Two pieces of UNSPEC_PROF rtl\n-   shall refer to the same counter if both caller name and callee rtl\n-   are identical.  */\n-\n-static int\n-unspec_prof_htab_eq (const void *x, const void *y)\n-{\n-  const_rtx u0 = (const_rtx) x;\n-  const_rtx u1 = (const_rtx) y;\n-  const_rtx s01 = XVECEXP (u0, 0, 1);\n-  const_rtx s11 = XVECEXP (u1, 0, 1);\n-\n-  return (!strcmp (XSTR (XVECEXP (u0, 0, 0), 0),\n-\t\t   XSTR (XVECEXP (u1, 0, 0), 0))\n-\t  && rtx_equal_p (s01, s11));\n-}\n-\n /* Conditional execution support.\n \n    This is based on the ARM port but for now is much simpler.\n@@ -5438,7 +5347,6 @@ arc_legitimate_constant_p (machine_mode mode, rtx x)\n \t  case UNSPEC_TLS_GD:\n \t  case UNSPEC_TLS_IE:\n \t  case UNSPEC_TLS_OFF:\n-\t  case UNSPEC_PROF:\n \t    return true;\n \n \t  default:\n@@ -6359,47 +6267,6 @@ arc_is_shortcall_p (rtx sym_ref)\n \n }\n \n-/* Emit profiling code for calling CALLEE.  Return true if a special\n-   call pattern needs to be generated.  */\n-\n-bool\n-arc_profile_call (rtx callee)\n-{\n-  rtx from = XEXP (DECL_RTL (current_function_decl), 0);\n-\n-  if (TARGET_UCB_MCOUNT)\n-    /* Profiling is done by instrumenting the callee.  */\n-    return false;\n-\n-  if (CONSTANT_P (callee))\n-    {\n-      rtx count_ptr\n-\t= gen_rtx_CONST (Pmode,\n-\t\t\t gen_rtx_UNSPEC (Pmode,\n-\t\t\t\t\t gen_rtvec (3, from, callee,\n-\t\t\t\t\t\t    CONST0_RTX (Pmode)),\n-\t\t\t\t\t UNSPEC_PROF));\n-      rtx counter = gen_rtx_MEM (SImode, count_ptr);\n-      /* ??? The increment would better be done atomically, but as there is\n-\t no proper hardware support, that would be too expensive.  */\n-      emit_move_insn (counter,\n-\t\t      force_reg (SImode, plus_constant (SImode, counter, 1)));\n-      return false;\n-    }\n-  else\n-    {\n-      rtx count_list_ptr\n-\t= gen_rtx_CONST (Pmode,\n-\t\t\t gen_rtx_UNSPEC (Pmode,\n-\t\t\t\t\t gen_rtvec (3, from, CONST0_RTX (Pmode),\n-\t\t\t\t\t\t    CONST0_RTX (Pmode)),\n-\t\t\t\t\t UNSPEC_PROF));\n-      emit_move_insn (gen_rtx_REG (Pmode, 8), count_list_ptr);\n-      emit_move_insn (gen_rtx_REG (Pmode, 9), callee);\n-      return true;\n-    }\n-}\n-\n /* Worker function for TARGET_RETURN_IN_MEMORY.  */\n \n static bool\n@@ -6621,25 +6488,6 @@ arc_reorg (void)\n   cfun->machine->arc_reorg_started = 1;\n   arc_reorg_in_progress = 1;\n \n-  /* Emit special sections for profiling.  */\n-  if (crtl->profile)\n-    {\n-      section *save_text_section;\n-      rtx_insn *insn;\n-      int size = get_max_uid () >> 4;\n-      htab_t htab = htab_create (size, unspec_prof_hash, unspec_prof_htab_eq,\n-\t\t\t\t NULL);\n-\n-      save_text_section = in_section;\n-      for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n-\tif (NONJUMP_INSN_P (insn))\n-\t  walk_stores (PATTERN (insn), write_profile_sections, htab);\n-      if (htab_elements (htab))\n-\tin_section = 0;\n-      switch_to_section (save_text_section);\n-      htab_delete (htab);\n-    }\n-\n   /* Link up loop ends with their loop start.  */\n   {\n     for (insn = get_insns (); insn; insn = NEXT_INSN (insn))"}, {"sha": "87a2e11129494ead04f605eecd1caa89ff49a178", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4", "patch": "@@ -121,12 +121,11 @@ extern const char *arc_cpu_to_as (int argc, const char **argv);\n \t\t   -X %{mbig-endian:-EB} \\\n \t\t   %{EB} %{EL} \\\n \t\t   %{marclinux*} \\\n-\t\t   %{!marclinux*: %{pg|p|profile:-marclinux_prof;: -marclinux}} \\\n+\t\t   %{!marclinux*: -marclinux} \\\n \t\t   %{!z:-z max-page-size=0x2000 -z common-page-size=0x2000} \\\n \t\t   %{shared:-shared}\"\n #else\n-#define LINK_SPEC \"%{mbig-endian:-EB} %{EB} %{EL}\\\n-  %{pg|p:-marcelf_prof;mA7|mARC700|mcpu=arc700|mcpu=ARC700: -marcelf}\"\n+#define LINK_SPEC \"%{mbig-endian:-EB} %{EB} %{EL}\"\n #endif\n \n #if DEFAULT_LIBC != LIBC_UCLIBC\n@@ -135,15 +134,15 @@ extern const char *arc_cpu_to_as (int argc, const char **argv);\n #define EXTRA_SPECS \\\n   { \"arc_tls_extra_start_spec\", ARC_TLS_EXTRA_START_SPEC }, \\\n \n-#define STARTFILE_SPEC \"%{!shared:crt0.o%s} crti%O%s %{pg|p:crtg.o%s} \" \\\n+#define STARTFILE_SPEC \"%{pg|p:gcrt0.o%s}%{!pg:%{!p:crt0.o%s}} crti%O%s \" \\\n   \"%(arc_tls_extra_start_spec) crtbegin.o%s\"\n #else\n #define STARTFILE_SPEC\t\t\t\t\t\t\t\\\n   LINUX_OR_ANDROID_LD (GNU_USER_TARGET_STARTFILE_SPEC, ANDROID_STARTFILE_SPEC)\n #endif\n \n #if DEFAULT_LIBC != LIBC_UCLIBC\n-#define ENDFILE_SPEC \"%{pg|p:crtgend.o%s} crtend.o%s crtn%O%s\"\n+#define ENDFILE_SPEC \"crtend.o%s crtn%O%s\"\n #else\n #define ENDFILE_SPEC\t\t\t\t\t\t\t\\\n   LINUX_OR_ANDROID_LD (GNU_USER_TARGET_ENDFILE_SPEC, ANDROID_ENDFILE_SPEC)\n@@ -154,12 +153,11 @@ extern const char *arc_cpu_to_as (int argc, const char **argv);\n #define LIB_SPEC  \\\n   \"%{pthread:-lpthread} \\\n    %{shared:-lc} \\\n-   %{!shared:%{pg|p|profile:-lgmon -u profil --defsym __profil=profil} -lc}\"\n+   %{!shared:%{profile:-lc_p}%{!profile:-lc}}\"\n #define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n #else\n #undef LIB_SPEC\n-/* -lc_p not present for arc-elf32-* : ashwin */\n-#define LIB_SPEC \"%{!shared:%{g*:-lg} %{pg|p:-lgmon} -lc}\"\n+#define LIB_SPEC \"%{!shared:%{g*:-lg} -lc}\"\n #endif\n \n #ifndef DRIVER_ENDIAN_SELF_SPECS\n@@ -916,12 +914,14 @@ extern int arc_initial_elimination_offset(int from, int to);\n   (OFFSET) = arc_initial_elimination_offset ((FROM), (TO))\n \n /* Output assembler code to FILE to increment profiler label # LABELNO\n-   for profiling a function entry.\n-   We actually emit the profiler code at the call site, so leave this one\n-   empty.  */\n-#define FUNCTION_PROFILER(FILE, LABELNO) \\\n-  if (TARGET_UCB_MCOUNT) \\\n-    fprintf (FILE, \"\\t%s\\n\", arc_output_libcall (\"__mcount\"))\n+   for profiling a function entry.  */\n+#define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+  if (flag_pic)\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\tbl\\t__mcount@plt\\n\");\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\tbl\\t__mcount\\n\");\t\t\t\t\\\n+  } while (0);\n \n #define NO_PROFILE_COUNTERS  1\n "}, {"sha": "2d3e19bade10840e93b18f84627b07541c980bd6", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4", "patch": "@@ -9,7 +9,7 @@\n ;;    Saurabh Verma (saurabh.verma@codito.com)\n ;;    Ramana Radhakrishnan(ramana.radhakrishnan@codito.com)\n ;;\n-;;    Profiling support and performance improvements by\n+;;    Performance improvements by\n ;;    Joern Rennecke (joern.rennecke@embecosm.com)\n ;;\n \n@@ -165,9 +165,7 @@\n   ])\n \n (define_constants\n-  [(UNSPEC_PROF 18) ; profile callgraph counter\n-\n-   (R0_REG 0)\n+  [(R0_REG 0)\n    (R1_REG 1)\n    (R2_REG 2)\n    (R3_REG 3)\n@@ -4108,13 +4106,6 @@\n \n     gcc_assert (MEM_P (operands[0]));\n     callee  = XEXP (operands[0], 0);\n-    if (crtl->profile && arc_profile_call (callee))\n-      {\n-\temit_call_insn (gen_call_prof (gen_rtx_SYMBOL_REF (Pmode,\n-\t\t\t\t\t\t\t   \\\"_mcount_call\\\"),\n-\t\t\t\t       operands[1]));\n-\tDONE;\n-      }\n     /* This is to decide if we should generate indirect calls by loading the\n        32 bit address of the callee into a register before performing the\n        branch and link - this exposes cse opportunities.\n@@ -4177,14 +4168,6 @@\n \n     gcc_assert (MEM_P (operands[1]));\n     callee = XEXP (operands[1], 0);\n-    if (crtl->profile && arc_profile_call (callee))\n-      {\n-\temit_call_insn (gen_call_value_prof (operands[0],\n-\t\t\t\t\t     gen_rtx_SYMBOL_REF (Pmode,\n-\t\t\t\t\t\t\t    \\\"_mcount_call\\\"),\n-\t\t\t\t\t     operands[2]));\n-\tDONE;\n-      }\n      /* See the comment in define_expand \\\"call\\\".  */\n     if (GET_CODE (callee) != REG\n \t&& (GET_CODE (callee) == PLUS || arc_is_longcall_p (callee)))\n@@ -4667,13 +4650,6 @@\n \n     if (operands[2] == NULL_RTX)\n       operands[2] = const0_rtx;\n-    if (crtl->profile && arc_profile_call (callee))\n-      {\n-\temit_insn (gen_sibcall_prof\n-\t\t    (gen_rtx_SYMBOL_REF (Pmode, \\\"_mcount_call\\\"),\n-\t\t     operands[1], operands[2]));\n-\tDONE;\n-      }\n     if (GET_CODE (callee) != REG\n \t&& (GET_CODE (callee) == PLUS || arc_is_longcall_p (callee)))\n       XEXP (operands[0], 0) = force_reg (Pmode, callee);\n@@ -4693,13 +4669,6 @@\n \n     if (operands[3] == NULL_RTX)\n       operands[3] = const0_rtx;\n-    if (crtl->profile && arc_profile_call (XEXP (operands[1], 0)))\n-      {\n-\temit_insn (gen_sibcall_value_prof\n-\t\t    (operands[0], gen_rtx_SYMBOL_REF (Pmode, \\\"_mcount_call\\\"),\n-\t\t     operands[2], operands[3]));\n-\tDONE;\n-      }\n     if (GET_CODE (callee) != REG && arc_is_longcall_p (callee))\n       XEXP (operands[1], 0) = force_reg (Pmode, callee);\n   }\""}, {"sha": "ec4f05532b8aae70fc07619ece2c84c97e9647e6", "filename": "gcc/config/arc/arc.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4/gcc%2Fconfig%2Farc%2Farc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4/gcc%2Fconfig%2Farc%2Farc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.opt?ref=e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4", "patch": "@@ -409,10 +409,6 @@ mlra-priority-noncompact\n Target RejectNegative Var(arc_lra_prioritytag, ARC_LRA_PRIORITY_NONCOMPACT)\n Reduce priority for r0..r3 / r12..r15 with TARGET_REGISTER_PRIORITY.\n \n-mucb-mcount\n-Target Report Var(TARGET_UCB_MCOUNT)\n-instrument with mcount calls as in the ucb code.\n-\n ; backward-compatibility aliases, translated by DRIVER_SELF_SPECS\n \n mEA"}, {"sha": "b72996488799be17e7371bc0cea8b2da3bcb192d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4", "patch": "@@ -611,7 +611,7 @@ Objective-C and Objective-C++ Dialects}.\n -mcrc -mdsp-packa -mdvbf -mlock -mmac-d16 -mmac-24 -mrtsc -mswape @gol\n -mtelephony -mxy -misize -mannotate-align -marclinux -marclinux_prof @gol\n -mlong-calls -mmedium-calls -msdata @gol\n--mucb-mcount -mvolatile-cache -mtp-regno=@var{regno} @gol\n+-mvolatile-cache -mtp-regno=@var{regno} @gol\n -malign-call -mauto-modify-reg -mbbit-peephole -mno-brcc @gol\n -mcase-vector-pcrel -mcompact-casesi -mno-cond-exec -mearly-cbranchsi @gol\n -mexpand-adddi -mindexed-loads -mlra -mlra-priority-none @gol\n@@ -14726,12 +14726,6 @@ Do not generate sdata references.  This is the default for tool chains\n built for @w{@code{arc-linux-uclibc}} and @w{@code{arceb-linux-uclibc}}\n targets.\n \n-@item -mucb-mcount\n-@opindex mucb-mcount\n-Instrument with mcount calls as used in UCB code.  I.e. do the\n-counting in the callee, not the caller.  By default ARC instrumentation\n-counts in the caller.\n-\n @item -mvolatile-cache\n @opindex mvolatile-cache\n Use ordinarily cached memory accesses for volatile references.  This is the"}, {"sha": "8ab5d24ba19cb2a1f45dd2df4359aadc6ffd59cb", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4", "patch": "@@ -1,3 +1,25 @@\n+2016-12-16  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config.host (arc*-*-linux-uclibc*): Remove libgmon, crtg, and\n+\tcrtgend.\n+\t(arc*-*-elf*): Likewise.\n+\t* config/arc/t-arc: Remove old gmon lib targets.\n+\t* config/arc/crtg.S: Remove.\n+\t* config/arc/crtgend.S: Likewise.\n+\t* config/arc/gmon/atomic.h: Likewise.\n+\t* config/arc/gmon/auxreg.h: Likewise.\n+\t* config/arc/gmon/dcache_linesz.S: Likewise.\n+\t* config/arc/gmon/gmon.c: Likewise.\n+\t* config/arc/gmon/machine-gmon.h: Likewise.\n+\t* config/arc/gmon/mcount.c: Likewise.\n+\t* config/arc/gmon/prof-freq-stub.S: Likewise.\n+\t* config/arc/gmon/prof-freq.c: Likewise.\n+\t* config/arc/gmon/profil.S: Likewise.\n+\t* config/arc/gmon/sys/gmon.h: Likewise.\n+\t* config/arc/gmon/sys/gmon_out.h: Likewise.\n+\t* config/arc/t-arc-newlib: Likewise.\n+\t* config/arc/t-arc700-uClibc: Renamed to t-arc-uClibc.\n+\n 2016-12-12  George Spelvin  <linux@sciencehorizons.net>\n \n \t* config/avr/lib1funcs.S (__ashrdi3): Fix typo from r243545."}, {"sha": "a659bb57f6a0ebb05d0454459ab7f24612e5b359", "filename": "libgcc/config.host", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4", "patch": "@@ -368,13 +368,13 @@ alpha*-dec-*vms*)\n \tmd_unwind_header=alpha/vms-unwind.h\n \t;;\n arc*-*-elf*)\n-\ttmake_file=\"arc/t-arc-newlib arc/t-arc\"\n-\textra_parts=\"crti.o crtn.o crtend.o crtbegin.o crtendS.o crtbeginS.o libgmon.a crtg.o crtgend.o\"\n-\textra_parts=\"${extra_parts} crttls.o\"\n+\ttmake_file=\"arc/t-arc\"\n+\textra_parts=\"crti.o crtn.o crtend.o crtbegin.o crtendS.o crtbeginS.o\"\n+\textra_parts=\"$extra_parts crttls.o\"\n \t;;\n arc*-*-linux-uclibc*)\n-\ttmake_file=\"${tmake_file} t-slibgcc-libgcc t-slibgcc-nolc-override arc/t-arc700-uClibc arc/t-arc\"\n-\textra_parts=\"$extra_parts crti.o crtn.o libgmon.a crtg.o crtgend.o\"\n+\ttmake_file=\"${tmake_file} t-slibgcc-libgcc t-slibgcc-nolc-override arc/t-arc-uClibc arc/t-arc\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n \textra_parts=\"$extra_parts crttls.o\"\n \t;;\n arm-wrs-vxworks)"}, {"sha": "ca3cfb6a9cbeeebf3ad6b3b57ea80292c36ca4bd", "filename": "libgcc/config/arc/crtg.S", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fcrtg.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fcrtg.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fcrtg.S?ref=d476b53c3651786fa283f89ad9434731f4f902e9", "patch": "@@ -1,51 +0,0 @@\n-/* Code to start and stop profiling for the Synopsys DesignWare ARC CPU.\n-\n-   Copyright (C) 1994-2016 Free Software Foundation, Inc.\n-   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n-\t\ton behalf of Synopsys Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-\t.section .init\n-\t.global _init\n-\t.global _fini\n-\t.global __monstartup\n-\tmov_s\tr0,_init\n-\tmov_s\tr1,_fini\n-\tjl\t__monstartup\n-\n-\t.section .__arc_profile_desc, \"a\"\n-\t.global __arc_profile_desc_secstart\n-\t.balign\t4\n-__arc_profile_desc_secstart:\n-\t.section .__arc_profile_forward, \"a\"\n-\t.global __arc_profile_forward_secstart\n-\t.balign 4\n-__arc_profile_forward_secstart:\n-\t.section .__arc_profile_counters, \"aw\"\n-\t.global __arc_profile_counters_secstart\n-\t.balign\t4\n-__arc_profile_counters_secstart:\n-\n-\t.section .fini\n-\t.global _mcleanup\n-\tjl\t_mcleanup"}, {"sha": "fad630f139e5be635b55d08c0f25acd461b59602", "filename": "libgcc/config/arc/crtgend.S", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fcrtgend.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fcrtgend.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fcrtgend.S?ref=d476b53c3651786fa283f89ad9434731f4f902e9", "patch": "@@ -1,33 +0,0 @@\n-/* Code to start and stop profiling for the Synopsys DesignWare ARC CPU.\n-\n-   Copyright (C) 1994-2016 Free Software Foundation, Inc.\n-   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n-\t\ton behalf of Synopsys Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-\t.section .__arc_profile_desc, \"a\"\n-\t.global __arc_profile_desc_secend\n-__arc_profile_desc_secend:\n-\t.section .__arc_profile_forward, \"a\"\n-\t.global __arc_profile_forward_secend\n-__arc_profile_forward_secend:"}, {"sha": "049aa523b5b9e3d805097f3b191f3c4627b85970", "filename": "libgcc/config/arc/gmon/atomic.h", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fgmon%2Fatomic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fgmon%2Fatomic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fgmon%2Fatomic.h?ref=d476b53c3651786fa283f89ad9434731f4f902e9", "patch": "@@ -1,26 +0,0 @@\n-/* Copyright (C) 2007-2016 Free Software Foundation, Inc.\n-   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n-\t\ton behalf of Synopsys Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* File deliberately left blank. */"}, {"sha": "5210ea02ccc8f4ab68740712d59ece81c42619b0", "filename": "libgcc/config/arc/gmon/auxreg.h", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fgmon%2Fauxreg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fgmon%2Fauxreg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fgmon%2Fauxreg.h?ref=d476b53c3651786fa283f89ad9434731f4f902e9", "patch": "@@ -1,35 +0,0 @@\n-/* Copyright (C) 2007-2016 Free Software Foundation, Inc.\n-   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n-\t\ton behalf of Synopsys Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#define\tLP_START\t0x02\n-#define\tLP_END\t\t0x03\n-#define IDENTITY\t0x04\n-#define STATUS32\t0x0a\n-#define\tCOUNT0\t\t0x21 /* Timer 0 count */\n-#define\tCONTROL0\t0x22 /* Timer 0 control */\n-#define\tLIMIT0\t\t0x23 /* Timer 0 limit */\n-#define INT_VECTOR_BASE\t0x25\n-#define D_CACHE_BUILD\t0x72\n-#define DC_FLDL\t\t0x4c"}, {"sha": "29572aefc8e92c00d1864c75affd42775366eaa8", "filename": "libgcc/config/arc/gmon/dcache_linesz.S", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fgmon%2Fdcache_linesz.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fgmon%2Fdcache_linesz.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fgmon%2Fdcache_linesz.S?ref=d476b53c3651786fa283f89ad9434731f4f902e9", "patch": "@@ -1,57 +0,0 @@\n-/* This file contains code to do profiling.\n-\n-   Copyright (C) 2007-2016 Free Software Foundation, Inc.\n-   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n-\t\ton behalf of Synopsys Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#include \"../asm.h\"\n-#include \"auxreg.h\"\n-/*  This file contains code to do profiling.  */\n-\t.weak\t__profile_timer_cycles\n-\t.global __profile_timer_cycles\n-\t.set\t__profile_timer_cycles, 200\n-\t.text\n-\t; For Arctangent-A5, if no data cache is present, a read of the\n-\t; cache build register returns the ID register.  For ARC600 and\n-\t; later, the version field will be zero.\n-\t.global\t__dcache_linesz\n-\t.balign\t4\n-__dcache_linesz:\n-#if !defined (__EM__) && !defined (__HS__)\n-\tlr\tr12,[D_CACHE_BUILD]\n-\textb_s\tr0,r12\n-\tbreq_s\tr0,0,.Lsz_nocache\n-\tbrge\tr0,0x20,.Lsz_havecache\n-\tlr\tr0,[IDENTITY]\n-\tbreq\tr12,r0,.Lsz_nocache\n-.Lsz_havecache:\n-\tlsr_s\tr12,r12,16\n-\tmov_s\tr0,16\n-\tbmsk_s\tr12,r12,3\n-\tasl_s\tr0,r0,r12\n-\tj_s\t[blink]\n-.Lsz_nocache:\n-#endif /* !__EM__  && !__HS__ */\n-\tmov_s\tr0,1\n-\tj_s\t[blink]"}, {"sha": "82c09b0a1a2d836ca798910462d234f7969cd5dd", "filename": "libgcc/config/arc/gmon/gmon.c", "status": "removed", "additions": 0, "deletions": 450, "changes": 450, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fgmon%2Fgmon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fgmon%2Fgmon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fgmon%2Fgmon.c?ref=d476b53c3651786fa283f89ad9434731f4f902e9", "patch": "@@ -1,450 +0,0 @@\n-/*-\n- * Copyright (c) 1983, 1992, 1993\n- *\tThe Regents of the University of California.  All rights reserved.\n- * Copyright (C) 2007-2016 Free Software Foundation, Inc.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in the\n- *    documentation and/or other materials provided with the distribution.\n- * 4. Neither the name of the University nor the names of its contributors\n- *    may be used to endorse or promote products derived from this software\n- *    without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n- * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\n- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- */\n-#if 0\n-#include <sys/param.h>\n-#include <sys/time.h>\n-#endif\n-#include <sys/gmon.h>\n-#include <sys/gmon_out.h>\n-\n-#include <stddef.h>\n-#include <errno.h>\n-#include <stdio.h>\n-#include <fcntl.h>\n-#include <unistd.h>\n-\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <string.h>\n-#include <unistd.h>\n-#if 0\n-#include <libc-internal.h>\n-#include <not-cancel.h>\n-\n-#ifdef USE_IN_LIBIO\n-# include <wchar.h>\n-#endif\n-#endif\n-#define internal_function\n-#define weak_alias(fun,aliasid) extern __typeof(fun) aliasid __attribute__ ((weak, alias (#fun)));\n-#define __libc_enable_secure 0\n-\n-/*  Head of basic-block list or NULL. */\n-struct __bb *__bb_head attribute_hidden;\n-\n-struct gmonparam _gmonparam attribute_hidden = { GMON_PROF_OFF };\n-\n-/*\n- * See profil(2) where this is described:\n- */\n-static int\ts_scale;\n-#define\t\tSCALE_1_TO_1\t0x10000L\n-\n-#define ERR(s) write (STDERR_FILENO, s, sizeof (s) - 1)\n-\n-void moncontrol (int mode);\n-void __moncontrol (int mode);\n-static void write_hist (int fd) internal_function;\n-static void write_call_graph (int fd) internal_function;\n-static void write_bb_counts (int fd) internal_function;\n-\n-/*\n- * Control profiling\n- *\tprofiling is what mcount checks to see if\n- *\tall the data structures are ready.\n- */\n-void\n-__moncontrol (int mode)\n-{\n-  struct gmonparam *p = &_gmonparam;\n-\n-  /* Don't change the state if we ran into an error.  */\n-  if (p->state == GMON_PROF_ERROR)\n-    return;\n-\n-  if (mode)\n-    {\n-      /* start */\n-      __profil((void *) p->kcount, p->kcountsize, p->lowpc, s_scale);\n-      p->state = GMON_PROF_ON;\n-    }\n-  else\n-    {\n-      /* stop */\n-      __profil(NULL, 0, 0, 0);\n-      p->state = GMON_PROF_OFF;\n-    }\n-}\n-weak_alias (__moncontrol, moncontrol)\n-\n-\n-void\n-__monstartup (u_long lowpc, u_long highpc)\n-{\n-  register int o;\n-  char *cp;\n-  struct gmonparam *p = &_gmonparam;\n-  int linesz;\n-\n-  /*\n-   * round lowpc and highpc to multiples of the density we're using\n-   * so the rest of the scaling (here and in gprof) stays in ints.\n-   */\n-  p->lowpc = ROUNDDOWN(lowpc, HISTFRACTION * sizeof(HISTCOUNTER));\n-  if (sizeof *p->froms % sizeof(HISTCOUNTER) != 0)\n-    {\n-      p->highpc = ROUNDUP(highpc, HISTFRACTION * sizeof(HISTCOUNTER));\n-      p->textsize = p->highpc - p->lowpc;\n-      p->kcountsize = ROUNDUP((p->textsize + HISTFRACTION - 1) / HISTFRACTION,\n-\t\t\t      sizeof (*p->froms));\n-    }\n-  else\n-    {\n-      /* Avoid odd scales by rounding up highpc to get kcountsize rounded.  */\n-      p->textsize = ROUNDUP (highpc - p->lowpc,\n-\t\t\t     HISTFRACTION * sizeof (*p->froms));\n-      p->highpc = p->lowpc + p->textsize;\n-      p->kcountsize = p->textsize / HISTFRACTION;\n-    }\n-  p->hashfraction = HASHFRACTION;\n-  p->log_hashfraction = -1;\n-  /* The following test must be kept in sync with the corresponding\n-     test in mcount.c.  */\n-  if ((HASHFRACTION & (HASHFRACTION - 1)) == 0) {\n-      /* if HASHFRACTION is a power of two, mcount can use shifting\n-\t instead of integer division.  Precompute shift amount. */\n-      p->log_hashfraction = ffs(p->hashfraction * sizeof(*p->froms)) - 1;\n-  }\n-  p->tolimit = p->textsize * ARCDENSITY / 100;\n-  if (p->tolimit < MINARCS)\n-    p->tolimit = MINARCS;\n-  else if (p->tolimit > MAXARCS)\n-    p->tolimit = MAXARCS;\n-  p->tossize = p->tolimit * sizeof(struct tostruct);\n-\n-  /* p->kcount must not share cache lines with the adjacent data, because\n-     we use uncached accesses while profiling.  */\n-  linesz = __dcache_linesz ();\n-  cp = calloc (ROUNDUP (p->kcountsize, linesz) + p->tossize\n-\t       + (linesz - 1), 1);\n-  if (! cp)\n-    {\n-      ERR(\"monstartup: out of memory\\n\");\n-      p->tos = NULL;\n-      p->state = GMON_PROF_ERROR;\n-      /* In case we loose the error state due to a race,\n-\t prevent invalid writes also by clearing tolimit.  */\n-      p->tolimit = 0;\n-      return;\n-    }\n-  p->tos = (struct tostruct *)cp;\n-  cp += p->tossize;\n-  cp = (char *) ROUNDUP ((ptrdiff_t) cp, linesz);\n-  p->kcount = (HISTCOUNTER *)cp;\n-  cp += ROUNDUP (p->kcountsize, linesz);\n-\n-  p->tos[0].link = 0;\n-\n-  o = p->highpc - p->lowpc;\n-  if (p->kcountsize < (u_long) o)\n-    {\n-#ifndef hp300\n-      s_scale = ((float)p->kcountsize / o ) * SCALE_1_TO_1;\n-#else\n-      /* avoid floating point operations */\n-      int quot = o / p->kcountsize;\n-\n-      if (quot >= 0x10000)\n-\ts_scale = 1;\n-      else if (quot >= 0x100)\n-\ts_scale = 0x10000 / quot;\n-      else if (o >= 0x800000)\n-\ts_scale = 0x1000000 / (o / (p->kcountsize >> 8));\n-      else\n-\ts_scale = 0x1000000 / ((o << 8) / p->kcountsize);\n-#endif\n-    } else\n-      s_scale = SCALE_1_TO_1;\n-\n-  __moncontrol(1);\n-}\n-weak_alias (__monstartup, monstartup)\n-\n-\n-static void\n-internal_function\n-write_hist (int fd)\n-{\n-  u_char tag = GMON_TAG_TIME_HIST;\n-  struct arc_gmon_hist_hdr thdr __attribute__ ((aligned (__alignof__ (char *))));\n-  int r;\n-\n-  if (_gmonparam.kcountsize > 0)\n-    {\n-      *(char **) thdr.low_pc = (char *) _gmonparam.lowpc;\n-      *(char **) thdr.high_pc = (char *) _gmonparam.highpc;\n-      *(int32_t *) thdr.hist_size = (_gmonparam.kcountsize\n-\t\t\t\t     / sizeof (HISTCOUNTER));\n-      *(int32_t *) thdr.prof_rate = __profile_frequency ();\n-      strncpy (thdr.dimen, \"seconds\", sizeof (thdr.dimen));\n-      thdr.dimen_abbrev = 's';\n-\n-      r = write (fd, &tag, sizeof tag);\n-      if (r != sizeof tag)\n-\treturn;\n-      r = write (fd, &thdr, sizeof thdr);\n-      if (r != sizeof thdr)\n-\treturn;\n-      r = write (fd,_gmonparam.kcount, _gmonparam.kcountsize);\n-      if ((unsigned) r != _gmonparam.kcountsize)\n-\treturn;\n-    }\n-}\n-\n-\n-static void\n-internal_function\n-write_call_graph (int fd)\n-{\n-#define NARCS_PER_WRITE\t64\n-#define BYTES_PER_ARC (1 + sizeof (struct gmon_cg_arc_record))\n-#define BYTES_PER_WRITE (BYTES_PER_ARC * NARCS_PER_WRITE)\n-  ARCINDEX to_index;\n-  u_long frompc, selfpc, count;\n-  char buffer[BYTES_PER_WRITE], *p;\n-  u_long *prof_desc = __arc_profile_desc_secstart;\n-  u_long *prof_count = __arc_profile_counters_secstart;\n-  u_long *prof_desc_end = __arc_profile_desc_secend;\n-  u_long *prof_forward = __arc_profile_forward_secstart;\n-\n-  for (p = buffer; p < buffer + BYTES_PER_WRITE; p += BYTES_PER_ARC)\n-    *p = GMON_TAG_CG_ARC;\n-  p = buffer;\n-  frompc = *prof_desc++ & -2;\n-  while (prof_desc < prof_desc_end)\n-    {\n-      selfpc = *prof_desc++;\n-      if (selfpc & 1)\n-\t{\n-\t  frompc = selfpc & -2;\n-\t  selfpc = *prof_desc++;\n-\t}\n-      count = *prof_count++;\n-      if (selfpc)\n-\t{\n-\t  struct arc\n-\t    {\n-\t      char *frompc;\n-\t      char *selfpc;\n-\t      int32_t count;\n-\t    }\n-\t  arc;\n-\n-\t  if (!count)\n-\t    continue;\n-\t  arc.frompc = (char *) frompc;\n-\t  arc.selfpc = (char *) selfpc;\n-\t  arc.count  = count;\n-\t  memcpy (p + 1, &arc, sizeof arc);\n-\t  p += 1 + sizeof arc;\n-\n-\t  if (p == buffer + BYTES_PER_WRITE)\n-\t    {\n-\t      write (fd, buffer, BYTES_PER_WRITE);\n-\t      p = buffer;\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  for (to_index = count;\n-\t       to_index != 0;\n-\t       to_index = _gmonparam.tos[to_index].link)\n-\t    {\n-\t      struct arc\n-\t\t{\n-\t\t  char *frompc;\n-\t\t  char *selfpc;\n-\t\t  int32_t count;\n-\t\t}\n-\t      arc;\n-\n-\t      arc.frompc = (char *) frompc;\n-\t      arc.selfpc = (char *) _gmonparam.tos[to_index].selfpc;\n-\t      arc.count  = _gmonparam.tos[to_index].count;\n-\t      memcpy (p + 1, &arc, sizeof arc);\n-\t      p += 1 + sizeof arc;\n-\n-\t      if (p == buffer + BYTES_PER_WRITE)\n-\t\t{\n-\t\t  write (fd, buffer, BYTES_PER_WRITE);\n-\t\t  p = buffer;\n-\t\t}\n-\t    }\n-\t}\n-    }\n-  while (prof_forward < __arc_profile_forward_secend)\n-    {\n-      /* ??? The 'call count' is actually supposed to be a fixed point\n-\t factor, with 16 bits each before and after the point.\n-\t It would be much nicer if we figured out the actual number\n-\t of calls to the caller, and multiplied that with the fixed point\n-\t factor to arrive at the estimated calls for the callee.  */\n-      memcpy (p + 1, prof_forward, 3 * sizeof *prof_forward);\n-      prof_forward += 3;\n-      p += 1 + 3 * sizeof *prof_forward;\n-      if (p == buffer + BYTES_PER_WRITE)\n-\t{\n-\t  write (fd, buffer, BYTES_PER_WRITE);\n-\t  p = buffer;\n-\t}\n-    }\n-  if (p != buffer)\n-    write (fd, buffer, p - buffer);\n-}\n-\n-\n-static void\n-internal_function\n-write_bb_counts (int fd)\n-{\n-  struct __bb *grp;\n-  u_char tag = GMON_TAG_BB_COUNT;\n-  size_t ncounts;\n-  size_t i;\n-\n-  struct { unsigned long address; long count; } bbbody[8];\n-  size_t nfilled;\n-\n-  /* Write each group of basic-block info (all basic-blocks in a\n-     compilation unit form a single group). */\n-\n-  for (grp = __bb_head; grp; grp = grp->next)\n-    {\n-      ncounts = grp->ncounts;\n-      write (fd, &tag, 1);\n-      write (fd, &ncounts, sizeof ncounts);\n-      for (nfilled = i = 0; i < ncounts; ++i)\n-\t{\n-\t  if (nfilled == sizeof (bbbody) / sizeof (bbbody[0]))\n-\t    {\n-\t      write (fd, bbbody, sizeof bbbody);\n-\t      nfilled = 0;\n-\t    }\n-\n-\t  bbbody[nfilled].address = grp->addresses[i];\n-\t  bbbody[nfilled++].count = grp->counts[i];\n-\t}\n-      if (nfilled > 0)\n-\twrite (fd, bbbody, nfilled * sizeof bbbody[0]);\n-    }\n-}\n-\n-\n-static void\n-write_gmon (void)\n-{\n-    struct gmon_hdr ghdr __attribute__ ((aligned (__alignof__ (int))));\n-    int fd = -1;\n-    char *env;\n-\n-#ifndef O_NOFOLLOW\n-# define O_NOFOLLOW\t0\n-#endif\n-\n-    env = getenv (\"GMON_OUT_PREFIX\");\n-    if (env != NULL && !__libc_enable_secure)\n-      {\n-\tsize_t len = strlen (env);\n-\tchar buf[len + 20];\n-\tsnprintf (buf, sizeof (buf), \"%s.%u\", env, getpid ());\n-\tfd = open (buf, O_CREAT|O_TRUNC|O_WRONLY|O_NOFOLLOW, 0666);\n-      }\n-\n-    if (fd == -1)\n-      {\n-\tfd = open (\"gmon.out\", O_CREAT|O_TRUNC|O_WRONLY|O_NOFOLLOW,\n-\t\t\t      0666);\n-\tif (fd < 0)\n-\t  {\n-\t    perror (\"_mcleanup: gmon.out\");\n-\t    return;\n-\t  }\n-      }\n-\n-    /* write gmon.out header: */\n-    memset (&ghdr, '\\0', sizeof (struct gmon_hdr));\n-    memcpy (&ghdr.cookie[0], GMON_MAGIC, sizeof (ghdr.cookie));\n-    *(int32_t *) ghdr.version = GMON_VERSION;\n-    write (fd, &ghdr, sizeof (struct gmon_hdr));\n-\n-    /* write PC histogram: */\n-    write_hist (fd);\n-\n-    /* write call-graph: */\n-    write_call_graph (fd);\n-\n-    /* write basic-block execution counts: */\n-    write_bb_counts (fd);\n-\n-    close (fd);\n-}\n-\n-\n-void\n-__write_profiling (void)\n-{\n-  int save = _gmonparam.state;\n-  _gmonparam.state = GMON_PROF_OFF;\n-  if (save == GMON_PROF_ON)\n-    write_gmon ();\n-  _gmonparam.state = save;\n-}\n-#ifndef SHARED\n-/* This symbol isn't used anywhere in the DSO and it is not exported.\n-   This would normally mean it should be removed to get the same API\n-   in static libraries.  But since profiling is special in static libs\n-   anyway we keep it.  But not when building the DSO since some\n-   quality assurance tests will otherwise trigger.  */\n-weak_alias (__write_profiling, write_profiling)\n-#endif\n-\n-\n-void\n-_mcleanup (void)\n-{\n-  __moncontrol (0);\n-\n-  if (_gmonparam.state != GMON_PROF_ERROR)\n-    write_gmon ();\n-\n-  /* free the memory. */\n-  if (_gmonparam.tos != NULL)\n-    free (_gmonparam.tos);\n-}"}, {"sha": "e7549aedb7cfc30235524d386c78087958acbaf8", "filename": "libgcc/config/arc/gmon/machine-gmon.h", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fgmon%2Fmachine-gmon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fgmon%2Fmachine-gmon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fgmon%2Fmachine-gmon.h?ref=d476b53c3651786fa283f89ad9434731f4f902e9", "patch": "@@ -1,65 +0,0 @@\n-/* Copyright (C) 2007-2016 Free Software Foundation, Inc.\n-   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n-\t\ton behalf of Synopsys Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#ifndef MACHINE_GMON_H\n-#define MACHINE_GMON_H\n-\n-/* We can't fake out own <sys/types.h> header because the newlib / uclibc\n-   headers in GCC_FOR_TARGET take precedence.  */\n-\n-#define __BEGIN_DECLS\n-#define __END_DECLS\n-\n-#define __THROW\n-\n-extern int __dcache_linesz (void);\n-\n-#define _MCOUNT_DECL(countp, selfpc) \\\n-  static inline void _mcount_internal (void *countp, u_long selfpc)\n-\n-extern void _mcount (void);\n-extern void _mcount_call (void);\n-\n-/* N.B.: the calling point might be a sibcall, thus blink does not necessarily\n-  hold the caller's address.  r8 doesn't hold the caller's address, either,\n-  but rather a pointer to the counter data structure associated with the\n-  caller.\n-  This function must be compiled with optimization turned on in order to\n-  enable a sibcall for the final call to selfpc; this is important when trying\n-  to profile a program with deep tail-recursion that would get a stack\n-  overflow otherwise.  */\n-#define MCOUNT \\\n-void \\\n-_mcount_call (void) \\\n-{ \\\n-  register void *countp __asm(\"r8\"); \\\n-  register u_long selfpc __asm(\"r9\"); \\\n-  _mcount_internal (countp, selfpc); \\\n-  ((void (*)(void)) selfpc) (); \\\n-}\n-\n-extern int __profil (u_short *,size_t, size_t, u_int);\n-\n-#endif /* MACHINE_GMON_H */"}, {"sha": "8afca36b88c9ddc6d1d8aa18e06a5b7b60ca4f9e", "filename": "libgcc/config/arc/gmon/mcount.c", "status": "removed", "additions": 0, "deletions": 206, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fgmon%2Fmcount.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fgmon%2Fmcount.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fgmon%2Fmcount.c?ref=d476b53c3651786fa283f89ad9434731f4f902e9", "patch": "@@ -1,206 +0,0 @@\n-/*-\n- * Copyright (c) 1983, 1992, 1993\n- *\tThe Regents of the University of California.  All rights reserved.\n- *\n- * Copyright (C) 2007-2016 Free Software Foundation, Inc.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in the\n- *    documentation and/or other materials provided with the distribution.\n- * 4. Neither the name of the University nor the names of its contributors\n- *    may be used to endorse or promote products derived from this software\n- *    without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n- * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\n- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- */\n-\n-#if !defined(lint) && !defined(KERNEL) && defined(LIBC_SCCS)\n-static char sccsid[] = \"@(#)mcount.c\t8.1 (Berkeley) 6/4/93\";\n-#endif\n-\n-#if 0\n-#include <unistd.h>\n-#include <sys/param.h>\n-#endif\n-#include <sys/gmon.h>\n-\n-/* This file provides the machine-dependent definitions of the _MCOUNT_DECL\n-   and MCOUNT macros.  */\n-#include <machine-gmon.h>\n-\n-#include <atomic.h>\n-\n-/*\n- * mcount is called on entry to each function compiled with the profiling\n- * switch set.  _mcount(), which is declared in a machine-dependent way\n- * with _MCOUNT_DECL, does the actual work and is either inlined into a\n- * C routine or called by an assembly stub.  In any case, this magic is\n- * taken care of by the MCOUNT definition in <machine/profile.h>.\n- *\n- * _mcount updates data structures that represent traversals of the\n- * program's call graph edges.  frompc and selfpc are the return\n- * address and function address that represents the given call graph edge.\n- *\n- * Note: the original BSD code used the same variable (frompcindex) for\n- * both frompcindex and frompc.  Any reasonable, modern compiler will\n- * perform this optimization.\n- */\n-_MCOUNT_DECL(count_ptr, selfpc)\t/* _mcount; may be static, inline, etc */\n-{\n-\tregister ARCINDEX *frompcindex;\n-\tregister struct tostruct *top, *prevtop;\n-\tregister struct gmonparam *p;\n-\tregister ARCINDEX toindex;\n-\n-\t/* Check for nested function trampoline.  */\n-\tif (selfpc & 2)\n-\t  selfpc = *(u_long *) (selfpc + 10);\n-\n-\tp = &_gmonparam;\n-\t/*\n-\t * check that we are profiling\n-\t * and that we aren't recursively invoked.\n-\t */\n-#if 0\n-\tif (catomic_compare_and_exchange_bool_acq (&p->state, GMON_PROF_BUSY,\n-\t\t\t\t\t\t   GMON_PROF_ON))\n-\t  return;\n-#elif defined (__ARC700__)\n-/* ??? This could temporarily lose the ERROR / OFF condition in a race,\n-   but doing an actual compare_and_exchange would be too costly.  It would\n-   be better if we had a semaphore independent of the 'sticky' state, but\n-   then we could run into ABI compatibility problems with the size of struct\n-   gmonparam.  */\n-\t{\n-\t  u_long old_state;\n-\n-\t  __asm (\"ex %0,%1\": \"=r\" (old_state), \"+m\" (p->state)\n-\t\t : \"0\" (GMON_PROF_BUSY));\n-\t  if (old_state != GMON_PROF_ON)\n-\t    {\n-\t      switch (old_state)\n-\t\t{\n-\t\tcase GMON_PROF_OFF:\n-\t\t  __asm (\"ex %0,%1\": \"+r\" (old_state), \"+m\" (p->state));\n-\t\t  if (old_state == GMON_PROF_BUSY\n-\t\t      /* Switching off while we say we are busy while profiling\n-\t\t\t was actually already switched off is all right.  */\n-\t\t      || old_state == GMON_PROF_OFF)\n-\t\t    break;\n-\t\t  /* It is not clear if we should allow switching on\n-\t\t     profiling at this point, and how to handle further races.\n-\t\t     For now, record an error in this case.  */\n-\t\t  /* Fall through.  */\n-\t\tdefault: /* We expect here only GMON_PROF_ERROR.  */\n-\t\t  p->state = GMON_PROF_ERROR;\n-\t\t  break;\n-\t\tcase GMON_PROF_BUSY: break;\n-\t\t}\n-\t      return;\n-\t    }\n-\t}\n-#else /* ??? No semaphore primitives available.  */\n-\tif (p->state != GMON_PROF_ON)\n-\t  return;\n-\tp->state = GMON_PROF_BUSY;\n-#endif\n-\n-\tfrompcindex = count_ptr;\n-\ttoindex = *frompcindex;\n-\tif (toindex == 0) {\n-\t\t/*\n-\t\t *\tfirst time traversing this arc\n-\t\t */\n-\t\ttoindex = ++p->tos[0].link;\n-\t\tif (toindex >= (ARCINDEX) p->tolimit)\n-\t\t\t/* halt further profiling */\n-\t\t\tgoto overflow;\n-\n-\t\t*frompcindex = toindex;\n-\t\ttop = &p->tos[toindex];\n-\t\ttop->selfpc = selfpc;\n-\t\ttop->count = 1;\n-\t\ttop->link = 0;\n-\t\tgoto done;\n-\t}\n-\ttop = &p->tos[toindex];\n-\tif (top->selfpc == selfpc) {\n-\t\t/*\n-\t\t * arc at front of chain; usual case.\n-\t\t */\n-\t\ttop->count++;\n-\t\tgoto done;\n-\t}\n-\t/*\n-\t * have to go looking down chain for it.\n-\t * top points to what we are looking at,\n-\t * prevtop points to previous top.\n-\t * we know it is not at the head of the chain.\n-\t */\n-\tfor (; /* goto done */; ) {\n-\t\tif (top->link == 0) {\n-\t\t\t/*\n-\t\t\t * top is end of the chain and none of the chain\n-\t\t\t * had top->selfpc == selfpc.\n-\t\t\t * so we allocate a new tostruct\n-\t\t\t * and link it to the head of the chain.\n-\t\t\t */\n-\t\t\ttoindex = ++p->tos[0].link;\n-\t\t\tif (toindex >= (ARCINDEX) p->tolimit)\n-\t\t\t\tgoto overflow;\n-\n-\t\t\ttop = &p->tos[toindex];\n-\t\t\ttop->selfpc = selfpc;\n-\t\t\ttop->count = 1;\n-\t\t\ttop->link = *frompcindex;\n-\t\t\t*frompcindex = toindex;\n-\t\t\tgoto done;\n-\t\t}\n-\t\t/*\n-\t\t * otherwise, check the next arc on the chain.\n-\t\t */\n-\t\tprevtop = top;\n-\t\ttop = &p->tos[top->link];\n-\t\tif (top->selfpc == selfpc) {\n-\t\t\t/*\n-\t\t\t * there it is.\n-\t\t\t * increment its count\n-\t\t\t * move it to the head of the chain.\n-\t\t\t */\n-\t\t\ttop->count++;\n-\t\t\ttoindex = prevtop->link;\n-\t\t\tprevtop->link = top->link;\n-\t\t\ttop->link = *frompcindex;\n-\t\t\t*frompcindex = toindex;\n-\t\t\tgoto done;\n-\t\t}\n-\n-\t}\n-done:\n-\tp->state = GMON_PROF_ON;\n-\treturn;\n-overflow:\n-\tp->state = GMON_PROF_ERROR;\n-\treturn;\n-}\n-\n-/*\n- * Actual definition of mcount function.  Defined in <machine/profile.h>,\n- * which is included by <sys/gmon.h>.\n- */\n-MCOUNT"}, {"sha": "9ffb30b9736d4430c79a394d4629c48b7eaf4289", "filename": "libgcc/config/arc/gmon/prof-freq-stub.S", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fgmon%2Fprof-freq-stub.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fgmon%2Fprof-freq-stub.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fgmon%2Fprof-freq-stub.S?ref=d476b53c3651786fa283f89ad9434731f4f902e9", "patch": "@@ -1,40 +0,0 @@\n-/* This file contains code to do profiling.\n-\n-   Copyright (C) 2007-2016 Free Software Foundation, Inc.\n-   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n-\t\ton behalf of Synopsys Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#include \"../asm.h\"\n-/*  This file contains code to do profiling.  */\n-\t.weak\t__profile_frequency_value\n-\t.global __profile_frequency_value\n-\t.set\t__profile_frequency_value, 1000\n-\t.text\n-\t.balign\t4\n-\t.global __profile_frequency\n-\tFUNC(__profile_frequency)\n-__profile_frequency:\n-\tmov_s\tr0,__profile_frequency_value\n-\tj_s\t[blink]\n-\tENDFUNC(__profile_frequency)"}, {"sha": "4437a37d80a886d4ab28e878337f64a1e032015c", "filename": "libgcc/config/arc/gmon/prof-freq.c", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fgmon%2Fprof-freq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fgmon%2Fprof-freq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fgmon%2Fprof-freq.c?ref=d476b53c3651786fa283f89ad9434731f4f902e9", "patch": "@@ -1,60 +0,0 @@\n-/* Return frequency of ticks reported by profil.  Generic version. */\n-/*-\n- * Copyright (c) 1983, 1992, 1993\n- *\tThe Regents of the University of California.  All rights reserved.\n- *\n- * Copyright (C) 2007-2016 Free Software Foundation, Inc.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in the\n- *    documentation and/or other materials provided with the distribution.\n- * 4. Neither the name of the University nor the names of its contributors\n- *    may be used to endorse or promote products derived from this software\n- *    without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n- * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\n- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- */\n-\n-\n-#include <sys/types.h>\n-#include <sys/time.h>\n-#if 0\n-#include <libc-internal.h>\n-#else\n-#include \"sys/gmon.h\"\n-#endif\n-\n-int\n-__profile_frequency (void)\n-{\n-  /*\n-   * Discover the tick frequency of the machine if something goes wrong,\n-   * we return 0, an impossible hertz.\n-   */\n-  struct itimerval tim;\n-\n-  tim.it_interval.tv_sec = 0;\n-  tim.it_interval.tv_usec = 1;\n-  tim.it_value.tv_sec = 0;\n-  tim.it_value.tv_usec = 0;\n-  setitimer(ITIMER_REAL, &tim, 0);\n-  setitimer(ITIMER_REAL, 0, &tim);\n-  if (tim.it_interval.tv_usec < 2)\n-    return 0;\n-  return (1000000 / tim.it_interval.tv_usec);\n-}"}, {"sha": "807e9fe60cc7993a146f8e45a6783d4c736c9043", "filename": "libgcc/config/arc/gmon/profil.S", "status": "removed", "additions": 0, "deletions": 164, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fgmon%2Fprofil.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fgmon%2Fprofil.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fgmon%2Fprofil.S?ref=d476b53c3651786fa283f89ad9434731f4f902e9", "patch": "@@ -1,164 +0,0 @@\n-/* This file contains code to do profiling.\n-\n-   Copyright (C) 2007-2016 Free Software Foundation, Inc.\n-   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n-\t\ton behalf of Synopsys Inc.\n-\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#include \"../asm.h\"\n-#include \"auxreg.h\"\n-/*  This file contains code to do profiling.  */\n-\t.weak\t__profile_timer_cycles\n-\t.global __profile_timer_cycles\n-\t.set\t__profile_timer_cycles, 200\n-\n-        .section .bss\n-        .global __profil_offset\n-        .align 4\n-        .type\t__profil_offset, @object\n-        .size\t__profil_offset, 4\n-__profil_offset:\n-        .zero   4\n-\n-\t.text\n-\t.global\t__dcache_linesz\n-\t.global __profil\n-\tFUNC(__profil)\n-#if !defined (__EM__) && !defined (__HS__)\n-.Lstop_profiling:\n-\tsr\tr0,[CONTROL0]\n-\tj_s\t[blink]\n-\t.balign\t4\n-__profil:\n-.Lprofil:\n-\tbreq_s\tr0,0,.Lstop_profiling\n-\t; r0: buf r1: bufsiz r2: offset r3: scale\n-\tbxor.f\tr3,r3,15; scale must be 0x8000, i.e. 1/2; generate 0.\n-\tpush_s\tblink\n-\tlsr_s\tr2,r2,1\n-\tmov_s\tr8,r0\n-\tflag.ne\t1\t; halt if wrong scale\n-\tsub_s\tr0,r0,r2\n-\tst\tr0,[__profil_offset]\n-\tbl\t__dcache_linesz\n-\tpop_s\tblink\n-\tbbit1.d\tr0,0,nocache\n-\tmov_s\tr0,r8\n-#ifdef __ARC700__\n-\tadd_s\tr1,r1,31\n-\tlsr.f\tlp_count,r1,5\n-\tlpne\t2f\n-\tsr\tr0,[DC_FLDL]\n-\tadd_s\tr0,r0,32\n-#else /* !__ARC700__ */\n-# FIX ME: set up loop according to cache line size\n-\tlr\tr12,[D_CACHE_BUILD]\n-\tsub_s\tr0,r0,16\n-\tsub_s\tr1,r1,1\n-\tlsr_s\tr12,r12,16\n-\tasr_s\tr1,r1,4\n-\tbmsk_s\tr12,r12,3\n-\tasr_s\tr1,r1,r12\n-\tadd.f\tlp_count,r1,1\n-\tmov_s\tr1,16\n-\tasl_s\tr1,r1,r12\n-\tlpne\t2f\n-\tadd\tr0,r0,r1\n-\tsr\tr0,[DC_FLDL]\n-#endif /* __ARC700__ */\n-2:\tb_s\t.Lcounters_cleared\n-nocache:\n-.Lcounters_cleared:\n-\tlr\tr1,[INT_VECTOR_BASE] ; disable timer0 interrupts\n-\tsr\tr3,[CONTROL0]\n-\tsr\tr3,[COUNT0]\n-0:\tld_s\tr0,[pcl,1f-0b+((0b-.Lprofil) & 2)] ; 1f@GOTOFF\n-0:\tld_s\tr12,[pcl,1f+4-0b+((0b-.Lprofil) & 2)] ; 1f@GOTOFF + 4\n-\tst_s\tr0,[r1,24]; timer0 uses vector3\n-\tst_s\tr12,[r1,24+4]; timer0 uses vector3\n-\t;sr\t10000,[LIMIT0]\n-\tsr\t__profile_timer_cycles,[LIMIT0]\n-\tmov_s\tr12,3\t; enable timer interrupts; count only when not halted.\n-\tsr\tr12,[CONTROL0]\n-\tlr\tr12,[STATUS32]\n-\tbset_s\tr12,r12,1 ; allow level 1 interrupts\n-\tflag\tr12\n-\tmov_s\tr0,0\n-\tj_s\t[blink]\n-\t.balign\t4\n-1:\tj\t__profil_irq\n-#else\n-__profil:\n-\t.balign\t4\n-\tmov_s\tr0,-1\n-\tj_s\t[blink]\n-#endif /* !__EM__ && !__HS__ */\n-\tENDFUNC(__profil)\n-\n-\tFUNC(__profil_irq)\n-\t.balign 4\t; make final jump unaligned to avoid delay penalty\n-\t.balign 32,0,12\t; make sure the code spans no more that two cache lines\n-\tnop_s\n-__profil_irq:\n-#if !defined (__EM__) && !defined (__HS__)\n-\tpush_s\tr0\n-\tld\tr0,[__profil_offset]\n-\tpush_s\tr1\n-\tlsr\tr1,ilink1,2\n-\tpush_s\tr2\n-\tldw.as.di r2,[r0,r1]\n-\tadd1\tr0,r0,r1\n-\tld_s\tr1,[sp,4]\n-\tadd_s\tr2,r2,1\n-\tbbit1\tr2,16,nostore\n-\tstw.di\tr2,[r0]\n-nostore:ld.ab\tr2,[sp,8]\n-\tpop_s\tr0\n-\tj.f\t[ilink1]\n-#else\n-\trtie\n-#endif /* !__EM__  && !__HS__ */\n-\tENDFUNC(__profil_irq)\n-\n-; could save one cycle if the counters were allocated at link time and\n-; the contents of __profil_offset were pre-computed at link time, like this:\n-#if 0\n-; __profil_offset needs to be PROVIDEd as __profile_base-text/4\n-\t.global\t__profil_offset\n-\t.balign 4\n-__profil_irq:\n-\tpush_s\tr0\n-\tlsr\tr0,ilink1,2\n-\tadd1\tr0,__profil_offset,r0\n-\tpush_s\tr1\n-\tldw.di\tr1,[r0]\n-\n-\n-\tadd_s\tr1,r1,1\n-\tbbit1\tr1,16,nostore\n-\tstw.di\tr1,[r0]\n-nostore:pop_s\tr1\n-\tpop_s\tr0\n-\tj\t[ilink1]\n-#endif /* 0 */"}, {"sha": "f17165a3a82320db5cd18b28960e6e548a396462", "filename": "libgcc/config/arc/gmon/sys/gmon.h", "status": "removed", "additions": 0, "deletions": 217, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fgmon%2Fsys%2Fgmon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fgmon%2Fsys%2Fgmon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fgmon%2Fsys%2Fgmon.h?ref=d476b53c3651786fa283f89ad9434731f4f902e9", "patch": "@@ -1,217 +0,0 @@\n-/*-\n- * Copyright (c) 1982, 1986, 1992, 1993\n- *\tThe Regents of the University of California.  All rights reserved.\n- * Copyright (C) 2007-2016 Free Software Foundation, Inc.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in the\n- *    documentation and/or other materials provided with the distribution.\n- * 4. Neither the name of the University nor the names of its contributors\n- *    may be used to endorse or promote products derived from this software\n- *    without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n- * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\n- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- *\n- *\t@(#)gmon.h\t8.2 (Berkeley) 1/4/94\n- */\n-\n-#ifndef\t_SYS_GMON_H\n-#define\t_SYS_GMON_H\t1\n-\n-#if 0\n-#include <features.h>\n-#include <sys/types.h>\n-#else\n-#include <sys/types.h>\n-#include \"machine-gmon.h\"\n-#define attribute_hidden __attribute__ ((visibility(\"hidden\")))\n-#endif\n-\n-#include <stdint.h>\n-\n-/*\n- * See gmon_out.h for gmon.out format.\n- */\n-\n-/* structure emitted by \"gcc -a\".  This must match struct bb in\n-   gcc/libgcc2.c.  It is OK for gcc to declare a longer structure as\n-   long as the members below are present.  */\n-struct __bb\n-{\n-  long\t\t\tzero_word;\n-  const char\t\t*filename;\n-  long\t\t\t*counts;\n-  long\t\t\tncounts;\n-  struct __bb\t\t*next;\n-  const unsigned long\t*addresses;\n-};\n-\n-extern struct __bb *__bb_head;\n-\n-/*\n- * histogram counters are unsigned shorts (according to the kernel).\n- */\n-#define\tHISTCOUNTER\tunsigned short\n-\n-/*\n- * fraction of text space to allocate for histogram counters here, 1/2\n- */\n-#define\tHISTFRACTION\t2\n-\n-/*\n- * Fraction of text space to allocate for from hash buckets.\n- * The value of HASHFRACTION is based on the minimum number of bytes\n- * of separation between two subroutine call points in the object code.\n- * Given MIN_SUBR_SEPARATION bytes of separation the value of\n- * HASHFRACTION is calculated as:\n- *\n- *\tHASHFRACTION = MIN_SUBR_SEPARATION / (2 * sizeof(short) - 1);\n- *\n- * For example, on the VAX, the shortest two call sequence is:\n- *\n- *\tcalls\t$0,(r0)\n- *\tcalls\t$0,(r0)\n- *\n- * which is separated by only three bytes, thus HASHFRACTION is\n- * calculated as:\n- *\n- *\tHASHFRACTION = 3 / (2 * 2 - 1) = 1\n- *\n- * Note that the division above rounds down, thus if MIN_SUBR_FRACTION\n- * is less than three, this algorithm will not work!\n- *\n- * In practice, however, call instructions are rarely at a minimal\n- * distance.  Hence, we will define HASHFRACTION to be 2 across all\n- * architectures.  This saves a reasonable amount of space for\n- * profiling data structures without (in practice) sacrificing\n- * any granularity.\n- */\n-#define\tHASHFRACTION\t2\n-\n-/*\n- * Percent of text space to allocate for tostructs.\n- * This is a heuristic; we will fail with a warning when profiling programs\n- * with a very large number of very small functions, but that's\n- * normally OK.\n- * 2 is probably still a good value for normal programs.\n- * Profiling a test case with 64000 small functions will work if\n- * you raise this value to 3 and link statically (which bloats the\n- * text size, thus raising the number of arcs expected by the heuristic).\n- */\n-#define ARCDENSITY\t3\n-\n-/*\n- * Always allocate at least this many tostructs.  This\n- * hides the inadequacy of the ARCDENSITY heuristic, at least\n- * for small programs.\n- */\n-#define MINARCS\t\t50\n-\n-/*\n- * The type used to represent indices into gmonparam.tos[].\n- */\n-#define\tARCINDEX\tu_long\n-\n-/* \n- * Maximum number of arcs we want to allow.\n- * Used to be max representable value of ARCINDEX minus 2, but now \n- * that ARCINDEX is a long, that's too large; we don't really want \n- * to allow a 48 gigabyte table.\n- * The old value of 1<<16 wasn't high enough in practice for large C++\n- * programs; will 1<<20 be adequate for long?  FIXME\n- */\n-#define MAXARCS\t\t(1 << 20)\n-\n-struct tostruct {\n-\tu_long\t\tselfpc;\n-\tlong\t\tcount;\n-\tARCINDEX\tlink;\n-};\n-\n-/*\n- * a raw arc, with pointers to the calling site and\n- * the called site and a count.\n- */\n-struct rawarc {\n-\tu_long\traw_frompc;\n-\tu_long\traw_selfpc;\n-\tlong\traw_count;\n-};\n-\n-/*\n- * general rounding functions.\n- */\n-#define ROUNDDOWN(x,y)\t(((x)/(y))*(y))\n-#define ROUNDUP(x,y)\t((((x)+(y)-1)/(y))*(y))\n-\n-/*\n- * The profiling data structures are housed in this structure.\n- */\n-struct gmonparam {\n-\tlong int\tstate;\n-\tu_short\t\t*kcount;\n-\tu_long\t\tkcountsize;\n-\tARCINDEX\t*froms;\n-\tu_long\t\tfromssize;\n-\tstruct tostruct\t*tos;\n-\tu_long\t\ttossize;\n-\tlong\t\ttolimit;\n-\tu_long\t\tlowpc;\n-\tu_long\t\thighpc;\n-\tu_long\t\ttextsize;\n-\tu_long\t\thashfraction;\n-\tlong\t\tlog_hashfraction;\n-};\n-extern struct gmonparam _gmonparam;\n-\n-/*\n- * Possible states of profiling.\n- */\n-#define\tGMON_PROF_ON\t0\n-#define\tGMON_PROF_BUSY\t1\n-#define\tGMON_PROF_ERROR\t2\n-#define\tGMON_PROF_OFF\t3\n-\n-/*\n- * Sysctl definitions for extracting profiling information from the kernel.\n- */\n-#define\tGPROF_STATE\t0\t/* int: profiling enabling variable */\n-#define\tGPROF_COUNT\t1\t/* struct: profile tick count buffer */\n-#define\tGPROF_FROMS\t2\t/* struct: from location hash bucket */\n-#define\tGPROF_TOS\t3\t/* struct: destination/count structure */\n-#define\tGPROF_GMONPARAM\t4\t/* struct: profiling parameters (see above) */\n-\n-__BEGIN_DECLS\n-\n-/* Set up data structures and start profiling.  */\n-extern void __monstartup (u_long __lowpc, u_long __highpc) __THROW;\n-extern void monstartup (u_long __lowpc, u_long __highpc) __THROW;\n-\n-/* Clean up profiling and write out gmon.out.  */\n-extern void _mcleanup (void) __THROW;\n-\n-extern void __write_profiling (void);\n-extern int attribute_hidden __profile_frequency (void);\n-\n-extern u_long __arc_profile_desc_secstart[], __arc_profile_desc_secend[];\n-extern u_long __arc_profile_forward_secstart[], __arc_profile_forward_secend[];\n-extern u_long __arc_profile_counters_secstart[];\n-\n-__END_DECLS\n-\n-#endif /* sys/gmon.h */"}, {"sha": "d1f3b058a815ac60bf0f180b520693d5af4e3cc6", "filename": "libgcc/config/arc/gmon/sys/gmon_out.h", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fgmon%2Fsys%2Fgmon_out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Fgmon%2Fsys%2Fgmon_out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fgmon%2Fsys%2Fgmon_out.h?ref=d476b53c3651786fa283f89ad9434731f4f902e9", "patch": "@@ -1,55 +0,0 @@\n-/* Copyright (C) 2007-2016 Free Software Foundation, Inc.\n-   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n-\t\ton behalf of Synopsys Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#define GMON_TAG_TIME_HIST 0\n-#define GMON_TAG_CG_ARC 1\n-#define GMON_TAG_BB_COUNT 2\n-\n-#define GMON_MAGIC \"gmon\"\n-#define GMON_VERSION 1\n-\n-struct arc_gmon_hist_hdr\n-{\n-  char low_pc[4];\n-  char high_pc[4];\n-  char hist_size[4];\n-  char prof_rate[4];\n-  char dimen[15];\n-  char dimen_abbrev;\n-};\n-\n-struct gmon_cg_arc_record\n-{\n-  char afrompc[4];\n-  char selfpc[4];\n-  char count[4];\n-};\n-\n-struct gmon_hdr\n-{\n-  char cookie[4];\n-  char version[4];\n-  char c[12];\n-};"}, {"sha": "51a9273ec23b75e97d72551c9ca1ca6b013ce667", "filename": "libgcc/config/arc/t-arc", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4/libgcc%2Fconfig%2Farc%2Ft-arc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4/libgcc%2Fconfig%2Farc%2Ft-arc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Ft-arc?ref=e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4", "patch": "@@ -62,42 +62,5 @@ fp-bit.c: $(srcdir)/fp-bit.c\n \n # .init/.fini section routines\n \n-crtg.o: $(srcdir)/config/arc/crtg.S\n-\t$(crt_compile) -c -x assembler-with-cpp $<\n-\n-crtgend.o: $(srcdir)/config/arc/crtgend.S\n-\t$(crt_compile) -c -x assembler-with-cpp $<\n-\n crttls.o: $(srcdir)/config/arc/crttls.S\n \t$(crt_compile) -c -x assembler-with-cpp $<\n-\n-mcount.o: $(srcdir)/config/arc/gmon/mcount.c\n-\t$(gcc_compile) -isystem $(srcdir)/config/arc/gmon -c $< \\\n-\t-fcall-saved-r0 -fcall-saved-r1 -fcall-saved-r2 -fcall-saved-r3 \\\n-\t-fcall-saved-r4 -fcall-saved-r5 -fcall-saved-r6 -fcall-saved-r7 \\\n-\t-fomit-frame-pointer\n-\n-gmon.o: $(srcdir)/config/arc/gmon/gmon.c\n-\t$(gcc_compile) -isystem $(srcdir)/config/arc/gmon -mno-sdata -c $< \\\n-\t-fno-strict-aliasing \\\n-\t-Wno-extra # suppress inane warning about missing initializer.\n-\t# Adding initializers for the remaining elements of gmonparam would\n-\t# make the code more brittle.\n-\n-prof-freq-stub.o: $(srcdir)/config/arc/gmon/prof-freq-stub.S\n-\t$(gcc_compile) -isystem $(srcdir)/config/arc/gmon -c $<\n-\n-prof-freq.o: $(srcdir)/config/arc/gmon/prof-freq.c\n-\t$(gcc_compile) -isystem $(srcdir)/config/arc/gmon -c $<\n-\n-dcache_linesz.o: $(srcdir)/config/arc/gmon/dcache_linesz.S\n-\t$(gcc_compile) -isystem $(srcdir)/config/arc/gmon -c $<\n-\n-profil.o: $(srcdir)/config/arc/gmon/profil.S\n-\t$(gcc_compile) -isystem $(srcdir)/config/arc/gmon -c $<\n-\n-profil-uclibc.o: $(srcdir)/config/arc/gmon/profil-uclibc.c\n-\t$(gcc_compile) -isystem $(srcdir)/config/arc/gmon -c $<\n-\n-libgmon.a: mcount.o gmon.o dcache_linesz.o $(PROFILE_OSDEP)\n-\t$(AR_CREATE_FOR_TARGET) $@ $^"}, {"sha": "f56b05259f033342af7721d5e837a3249ce8dba5", "filename": "libgcc/config/arc/t-arc-newlib", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Ft-arc-newlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d476b53c3651786fa283f89ad9434731f4f902e9/libgcc%2Fconfig%2Farc%2Ft-arc-newlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Ft-arc-newlib?ref=d476b53c3651786fa283f89ad9434731f4f902e9", "patch": "@@ -1,22 +0,0 @@\n-# GCC Makefile fragment for the Synopsys DesignWare ARC CPU with newlib.\n-\n-# Copyright (C) 2007-2016 Free Software Foundation, Inc.\n-# Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n-#              on behalf of Synopsys Inc.\n-\n-# This file is part of GCC.\n-\n-# GCC is free software; you can redistribute it and/or modify it under the\n-# terms of the GNU General Public License as published by the Free Software\n-# Foundation; either version 3, or (at your option) any later version.\n-\n-# GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n-# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n-# details.\n-\n-# You should have received a copy of the GNU General Public License along\n-# with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-\n-PROFILE_OSDEP = prof-freq-stub.o profil.o"}, {"sha": "81156e8dc550a67afcec8319fe3709f7bf2ba155", "filename": "libgcc/config/arc/t-arc-uClibc", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4/libgcc%2Fconfig%2Farc%2Ft-arc-uClibc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4/libgcc%2Fconfig%2Farc%2Ft-arc-uClibc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Ft-arc-uClibc?ref=e04ea1daa924a2dd211ef5e222b42c4f9e29d8e4", "patch": "@@ -33,8 +33,6 @@ CRTSTUFF_T_CFLAGS_S = $(CRTSTUFF_T_CFLAGS) -fPIC\n # Compile libgcc2.a with pic.\n TARGET_LIBGCC2_CFLAGS = -fPIC\n \n-PROFILE_OSDEP = prof-freq.o\n-\n # Override t-slibgcc-elf-ver to hide some lib1func\n # routines which should not be called via PLT.\n SHLIB_MAPFILES = libgcc-std.ver $(srcdir)/config/arc/libgcc-excl.ver", "previous_filename": "libgcc/config/arc/t-arc700-uClibc"}]}