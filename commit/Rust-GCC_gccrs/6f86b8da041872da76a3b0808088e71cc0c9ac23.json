{"sha": "6f86b8da041872da76a3b0808088e71cc0c9ac23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY4NmI4ZGEwNDE4NzJkYTc2YTNiMDgwODA4OGU3MWNjMGM5YWMyMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-10-28T11:18:40Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-10-28T11:18:40Z"}, "message": "sse.md (sse_cvtss2si<rex64namesuffix>_2): Remove %k operand modifier.\n\n\t* config/i386/sse.md (sse_cvtss2si<rex64namesuffix>_2):\n\tRemove %k operand modifier.\n\t(*vec_extractv2df_1_sse): Remove %q operand modifier.\n\nFrom-SVN: r277509", "tree": {"sha": "2035b09dba567fb0c5633d99a99abbb7893cabc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2035b09dba567fb0c5633d99a99abbb7893cabc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f86b8da041872da76a3b0808088e71cc0c9ac23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f86b8da041872da76a3b0808088e71cc0c9ac23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f86b8da041872da76a3b0808088e71cc0c9ac23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f86b8da041872da76a3b0808088e71cc0c9ac23/comments", "author": null, "committer": null, "parents": [{"sha": "5869faffd32c442675220851f371cc0173f6529b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5869faffd32c442675220851f371cc0173f6529b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5869faffd32c442675220851f371cc0173f6529b"}], "stats": {"total": 234, "additions": 120, "deletions": 114}, "files": [{"sha": "10302d60aa78c3f5fe3462d7915fe06bde8a4322", "filename": "gcc/ChangeLog", "status": "modified", "additions": 118, "deletions": 112, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f86b8da041872da76a3b0808088e71cc0c9ac23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f86b8da041872da76a3b0808088e71cc0c9ac23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f86b8da041872da76a3b0808088e71cc0c9ac23", "patch": "@@ -1,3 +1,9 @@\n+2019-10-28  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (sse_cvtss2si<rex64namesuffix>_2):\n+\tRemove %k operand modifier.\n+\t(*vec_extractv2df_1_sse): Remove %q operand modifier.\n+\n 2019-10-28  Ilya Leoshkevich  <iii@linux.ibm.com>\n \n \tPR rtl-optimization/92007\n@@ -19,7 +25,7 @@\n \tfor missing EDGE_REF\n \t* ipa-prop.c (update_jump_functions_after_inlining): Likewise.\n \n-2019-10-25  Jiufu Guo  <guojiufu@linux.ibm.com>\t    \n+2019-10-25  Jiufu Guo  <guojiufu@linux.ibm.com>\n \n \tPR tree-optimization/88760\n \t* config/rs6000/rs6000-common.c (rs6000_option_optimization_table):\n@@ -2630,7 +2636,7 @@\n \n 2019-10-04  Rafael Tsuha  <rafael.tsuha@usp.br>\n \n-        * match.pd (sinh (x) / cosh (x)): New simplification rule.\n+\t* match.pd (sinh (x) / cosh (x)): New simplification rule.\n \n 2019-10-04  Martin Jambor  <mjambor@suse.cz>\n \n@@ -5131,7 +5137,7 @@\n \tDefine to speculation_safe_value_not_needed.\n \n 2019-09-20  Richard Biener  <rguenther@suse.de>\n-\tUros Bizjak  <ubizjak@gmail.com>\n+\t    Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/91814\n \t* config/i386/i386-features.c (gen_gpr_to_xmm_move_src): Revert\n@@ -5179,98 +5185,98 @@\n \n 2019-09-20  Martin Jambor  <mjambor@suse.cz>\n \n-        * coretypes.h (cgraph_edge): Declare.\n-        * ipa-param-manipulation.c: Rewrite.\n-        * ipa-param-manipulation.h: Likewise.\n-        * Makefile.in (GTFILES): Added ipa-param-manipulation.h and ipa-sra.c.\n-        (OBJS): Added ipa-sra.o.\n-        * cgraph.h (ipa_replace_map): Removed fields old_tree, replace_p\n-        and ref_p, added fields param_adjustments and performed_splits.\n-        (struct cgraph_clone_info): Remove ags_to_skip and\n-        combined_args_to_skip, new field param_adjustments.\n-        (cgraph_node::create_clone): Changed parameters to use\n-        ipa_param_adjustments.\n-        (cgraph_node::create_virtual_clone): Likewise.\n-        (cgraph_node::create_virtual_clone_with_body): Likewise.\n-        (tree_function_versioning): Likewise.\n-        (cgraph_build_function_type_skip_args): Removed.\n-        * cgraph.c (cgraph_edge::redirect_call_stmt_to_callee): Convert to\n-        using ipa_param_adjustments.\n-        (clone_of_p): Likewise.\n-        * cgraphclones.c (cgraph_build_function_type_skip_args): Removed.\n-        (build_function_decl_skip_args): Likewise.\n-        (duplicate_thunk_for_node): Adjust parameters using\n-        ipa_param_body_adjustments, copy param_adjustments instead of\n-        args_to_skip.\n-        (cgraph_node::create_clone): Convert to using ipa_param_adjustments.\n-        (cgraph_node::create_virtual_clone): Likewise.\n-        (cgraph_node::create_version_clone_with_body): Likewise.\n-        (cgraph_materialize_clone): Likewise.\n-        (symbol_table::materialize_all_clones): Likewise.\n-        * ipa-fnsummary.c (ipa_fn_summary_t::duplicate): Simplify\n-        ipa_replace_map check.\n-        * ipa-cp.c (get_replacement_map): Do not initialize removed fields.\n-        (initialize_node_lattices): Make aware that some parameters might have\n-        already been removed.\n-        (want_remove_some_param_p): New function.\n-        (create_specialized_node): Convert to using ipa_param_adjustments and\n-        deal with possibly pre-existing adjustments.\n-        * lto-cgraph.c (output_cgraph_opt_summary_p): Likewise.\n-        (output_node_opt_summary): Do not stream removed fields.  Stream\n-        parameter adjustments instead of argumetns to skip.\n-        (input_node_opt_summary): Likewise.\n-        (input_node_opt_summary): Likewise.\n-        * lto-section-in.c (lto_section_name): Added ipa-sra section.\n-        * lto-streamer.h (lto_section_type): Likewise.\n-        * tree-inline.h (copy_body_data): New fields killed_new_ssa_names and\n+\t* coretypes.h (cgraph_edge): Declare.\n+\t* ipa-param-manipulation.c: Rewrite.\n+\t* ipa-param-manipulation.h: Likewise.\n+\t* Makefile.in (GTFILES): Added ipa-param-manipulation.h and ipa-sra.c.\n+\t(OBJS): Added ipa-sra.o.\n+\t* cgraph.h (ipa_replace_map): Removed fields old_tree, replace_p\n+\tand ref_p, added fields param_adjustments and performed_splits.\n+\t(struct cgraph_clone_info): Remove ags_to_skip and\n+\tcombined_args_to_skip, new field param_adjustments.\n+\t(cgraph_node::create_clone): Changed parameters to use\n+\tipa_param_adjustments.\n+\t(cgraph_node::create_virtual_clone): Likewise.\n+\t(cgraph_node::create_virtual_clone_with_body): Likewise.\n+\t(tree_function_versioning): Likewise.\n+\t(cgraph_build_function_type_skip_args): Removed.\n+\t* cgraph.c (cgraph_edge::redirect_call_stmt_to_callee): Convert to\n+\tusing ipa_param_adjustments.\n+\t(clone_of_p): Likewise.\n+\t* cgraphclones.c (cgraph_build_function_type_skip_args): Removed.\n+\t(build_function_decl_skip_args): Likewise.\n+\t(duplicate_thunk_for_node): Adjust parameters using\n+\tipa_param_body_adjustments, copy param_adjustments instead of\n+\targs_to_skip.\n+\t(cgraph_node::create_clone): Convert to using ipa_param_adjustments.\n+\t(cgraph_node::create_virtual_clone): Likewise.\n+\t(cgraph_node::create_version_clone_with_body): Likewise.\n+\t(cgraph_materialize_clone): Likewise.\n+\t(symbol_table::materialize_all_clones): Likewise.\n+\t* ipa-fnsummary.c (ipa_fn_summary_t::duplicate): Simplify\n+\tipa_replace_map check.\n+\t* ipa-cp.c (get_replacement_map): Do not initialize removed fields.\n+\t(initialize_node_lattices): Make aware that some parameters might have\n+\talready been removed.\n+\t(want_remove_some_param_p): New function.\n+\t(create_specialized_node): Convert to using ipa_param_adjustments and\n+\tdeal with possibly pre-existing adjustments.\n+\t* lto-cgraph.c (output_cgraph_opt_summary_p): Likewise.\n+\t(output_node_opt_summary): Do not stream removed fields.  Stream\n+\tparameter adjustments instead of argumetns to skip.\n+\t(input_node_opt_summary): Likewise.\n+\t(input_node_opt_summary): Likewise.\n+\t* lto-section-in.c (lto_section_name): Added ipa-sra section.\n+\t* lto-streamer.h (lto_section_type): Likewise.\n+\t* tree-inline.h (copy_body_data): New fields killed_new_ssa_names and\n \tparam_body_adjs.\n-        (copy_decl_to_var): Declare.\n-        * tree-inline.c (update_clone_info): Do not remap old_tree.\n-        (remap_gimple_stmt): Use ipa_param_body_adjustments to modify gimple\n-        statements, walk all extra generated statements and remap their\n-        operands.\n-        (redirect_all_calls): Add killed SSA names to a hash set.\n-        (remap_ssa_name): Do not remap killed SSA names.\n-        (copy_arguments_for_versioning): Renames to copy_arguments_nochange,\n-        half of functionality moved to ipa_param_body_adjustments.\n-        (copy_decl_to_var): Make exported.\n-        (copy_body): Destroy killed_new_ssa_names hash set.\n-        (expand_call_inline): Remap performed splits.\n-        (update_clone_info): Likewise.\n-        (tree_function_versioning): Simplify tree_map processing.  Updated to\n-        accept ipa_param_adjustments and use ipa_param_body_adjustments.\n-        * omp-simd-clone.c (simd_clone_vector_of_formal_parm_types): Adjust\n-        for the new interface.\n-        (simd_clone_clauses_extract): Likewise, make args an auto_vec.\n-        (simd_clone_compute_base_data_type): Likewise.\n-        (simd_clone_init_simd_arrays): Adjust for the new interface.\n-        (simd_clone_adjust_argument_types): Likewise.\n-        (struct modify_stmt_info): Likewise.\n-        (ipa_simd_modify_stmt_ops): Likewise.\n-        (ipa_simd_modify_function_body): Likewise.\n-        (simd_clone_adjust): Likewise.\n-        * tree-sra.c: Removed IPA-SRA.  Include tree-sra.h.\n-        (type_internals_preclude_sra_p): Make public.\n-        * tree-sra.h: New file.\n-        * ipa-inline-transform.c (save_inline_function_body): Update to\n-        refelct new tree_function_versioning signature.\n-        * ipa-prop.c (adjust_agg_replacement_values): Use a helper from\n-        ipa_param_adjustments to get current parameter indices.\n-        (ipcp_modif_dom_walker::before_dom_children): Likewise.\n-        (ipcp_update_bits): Likewise.\n-        (ipcp_update_vr): Likewise.\n-        * ipa-split.c (split_function): Convert to using ipa_param_adjustments.\n-        * ipa-sra.c: New file.\n-        * multiple_target.c (create_target_clone): Update to reflet new type\n-        of create_version_clone_with_body.\n-        * trans-mem.c (ipa_tm_create_version): Update to reflect new type of\n-        tree_function_versioning.\n+\t(copy_decl_to_var): Declare.\n+\t* tree-inline.c (update_clone_info): Do not remap old_tree.\n+\t(remap_gimple_stmt): Use ipa_param_body_adjustments to modify gimple\n+\tstatements, walk all extra generated statements and remap their\n+\toperands.\n+\t(redirect_all_calls): Add killed SSA names to a hash set.\n+\t(remap_ssa_name): Do not remap killed SSA names.\n+\t(copy_arguments_for_versioning): Renames to copy_arguments_nochange,\n+\thalf of functionality moved to ipa_param_body_adjustments.\n+\t(copy_decl_to_var): Make exported.\n+\t(copy_body): Destroy killed_new_ssa_names hash set.\n+\t(expand_call_inline): Remap performed splits.\n+\t(update_clone_info): Likewise.\n+\t(tree_function_versioning): Simplify tree_map processing.  Updated to\n+\taccept ipa_param_adjustments and use ipa_param_body_adjustments.\n+\t* omp-simd-clone.c (simd_clone_vector_of_formal_parm_types): Adjust\n+\tfor the new interface.\n+\t(simd_clone_clauses_extract): Likewise, make args an auto_vec.\n+\t(simd_clone_compute_base_data_type): Likewise.\n+\t(simd_clone_init_simd_arrays): Adjust for the new interface.\n+\t(simd_clone_adjust_argument_types): Likewise.\n+\t(struct modify_stmt_info): Likewise.\n+\t(ipa_simd_modify_stmt_ops): Likewise.\n+\t(ipa_simd_modify_function_body): Likewise.\n+\t(simd_clone_adjust): Likewise.\n+\t* tree-sra.c: Removed IPA-SRA.  Include tree-sra.h.\n+\t(type_internals_preclude_sra_p): Make public.\n+\t* tree-sra.h: New file.\n+\t* ipa-inline-transform.c (save_inline_function_body): Update to\n+\trefelct new tree_function_versioning signature.\n+\t* ipa-prop.c (adjust_agg_replacement_values): Use a helper from\n+\tipa_param_adjustments to get current parameter indices.\n+\t(ipcp_modif_dom_walker::before_dom_children): Likewise.\n+\t(ipcp_update_bits): Likewise.\n+\t(ipcp_update_vr): Likewise.\n+\t* ipa-split.c (split_function): Convert to using ipa_param_adjustments.\n+\t* ipa-sra.c: New file.\n+\t* multiple_target.c (create_target_clone): Update to reflet new type\n+\tof create_version_clone_with_body.\n+\t* trans-mem.c (ipa_tm_create_version): Update to reflect new type of\n+\ttree_function_versioning.\n \t(modify_function): Update to reflect new type of\n \ttree_function_versioning.\n-        * params.def (PARAM_IPA_SRA_MAX_REPLACEMENTS): New.\n-        * passes.def: Remove old IPA-SRA and add new one.\n-        * tree-pass.h (make_pass_early_ipa_sra): Remove declaration.\n-        (make_pass_ipa_sra): Declare.\n+\t* params.def (PARAM_IPA_SRA_MAX_REPLACEMENTS): New.\n+\t* passes.def: Remove old IPA-SRA and add new one.\n+\t* tree-pass.h (make_pass_early_ipa_sra): Remove declaration.\n+\t(make_pass_ipa_sra): Declare.\n \t* dbgcnt.def: Remove eipa_sra.  Added ipa_sra_params and\n \tipa_sra_retvalues.\n \t* doc/invoke.texi (ipa-sra-max-replacements): New.\n@@ -7495,7 +7501,7 @@\n \t(convert_scalars_to_vector): Do not call it.\n \n 2019-08-26  Tejas Joshi  <tejasjoshi9673@gmail.com>\n-            Uros Bizjak  <ubizjak@gmail.com>\n+\t    Uros Bizjak  <ubizjak@gmail.com>\n \n \t* builtins.c (mathfn_built_in_2): Change CASE_MATHFN to\n \tCASE_MATHFN_FLOATN for roundeven.\n@@ -7521,25 +7527,25 @@\n \n 2019-08-26  Tejas Joshi  <tejasjoshi9673@gmail.com>\n \n-        * builtins.c (mathfn_built_in_2): Added CASE_MATHFN_FLOATN\n-        for ROUNDEVEN.\n-        * builtins.def: Added function definitions for roundeven function\n-        variants.\n-        * fold-const-call.c (fold_const_call_ss): Added case for roundeven\n-        function call.  Adjust condition for floor, ceil, trunc and round.\n-        * fold-const.c (negate_mathfn_p): Added case for roundeven function.\n-        (tree_call_nonnegative_warnv_p): Added case for roundeven function.\n-        (integer_valued_real_call_p): Added case for roundeven function.\n-        * real.c (is_even): New function. Returns true if real number is even,\n-        otherwise returns false.\n-        (is_halfway_below): New function. Returns true if real number is\n-        halfway between two integers, else return false.\n-        (real_roundeven): New function. Round real number to nearest integer,\n-        rounding halfway cases towards even.\n-        * real.h (real_value): Added descriptive comments.  Added function\n-        declaration for roundeven function.\n-        * doc/extend.texi (Other Builtins): List roundeven variants among\n-        functions which can be handled as builtins.\n+\t* builtins.c (mathfn_built_in_2): Added CASE_MATHFN_FLOATN\n+\tfor ROUNDEVEN.\n+\t* builtins.def: Added function definitions for roundeven function\n+\tvariants.\n+\t* fold-const-call.c (fold_const_call_ss): Added case for roundeven\n+\tfunction call.  Adjust condition for floor, ceil, trunc and round.\n+\t* fold-const.c (negate_mathfn_p): Added case for roundeven function.\n+\t(tree_call_nonnegative_warnv_p): Added case for roundeven function.\n+\t(integer_valued_real_call_p): Added case for roundeven function.\n+\t* real.c (is_even): New function. Returns true if real number is even,\n+\totherwise returns false.\n+\t(is_halfway_below): New function. Returns true if real number is\n+\thalfway between two integers, else return false.\n+\t(real_roundeven): New function. Round real number to nearest integer,\n+\trounding halfway cases towards even.\n+\t* real.h (real_value): Added descriptive comments.  Added function\n+\tdeclaration for roundeven function.\n+\t* doc/extend.texi (Other Builtins): List roundeven variants among\n+\tfunctions which can be handled as builtins.\n \n 2019-08-26  Richard Biener  <rguenther@suse.de>\n "}, {"sha": "1eeb85aa62a2037a89829273358ffba11c3f8b70", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f86b8da041872da76a3b0808088e71cc0c9ac23/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f86b8da041872da76a3b0808088e71cc0c9ac23/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=6f86b8da041872da76a3b0808088e71cc0c9ac23", "patch": "@@ -5324,7 +5324,7 @@\n \t(unspec:SWI48 [(match_operand:SF 1 \"nonimmediate_operand\" \"v,m\")]\n \t\t      UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE\"\n-  \"%vcvtss2si<rex64suffix>\\t{%1, %0|%0, %k1}\"\n+  \"%vcvtss2si<rex64suffix>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"amdfam10_decode\" \"double,double\")\n@@ -10147,7 +10147,7 @@\n   \"!TARGET_SSE2 && TARGET_SSE\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n-   movhps\\t{%1, %0|%q0, %1}\n+   movhps\\t{%1, %0|%0, %1}\n    movhlps\\t{%1, %0|%0, %1}\n    movlps\\t{%H1, %0|%0, %H1}\"\n   [(set_attr \"type\" \"ssemov\")"}]}