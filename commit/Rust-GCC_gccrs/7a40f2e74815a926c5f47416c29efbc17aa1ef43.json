{"sha": "7a40f2e74815a926c5f47416c29efbc17aa1ef43", "node_id": "C_kwDOANBUbNoAKDdhNDBmMmU3NDgxNWE5MjZjNWY0NzQxNmMyOWVmYmMxN2FhMWVmNDM", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2021-09-20T00:32:03Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2021-09-23T00:10:57Z"}, "message": "Fortran: Fixes for F2018 C838 (PR fortran/101334)\n\nThe compiler was failing to diagnose the error required by F2018 C838\nwhen passing an assumed-rank array argument to a non-assumed-rank dummy.\nIt was also incorrectly giving an error for calls to the 2-argument form\nof the ASSOCIATED intrinsic, which is supposed to be permitted by C838.\n\n2021-09-19  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tPR fortran/101334\n\ngcc/fortran/\n\t* check.c (gfc_check_associated): Allow an assumed-rank\n\tarray for the pointer argument.\n\t* interface.c (compare_parameter): Also give rank mismatch\n\terror on assumed-rank array.\n\ngcc/testsuite/\n\t* gfortran.dg/c-interop/c535b-2.f90: Remove xfails.\n\t* gfortran.dg/c-interop/c535b-3.f90: Likewise.", "tree": {"sha": "238a5383e85a53e0a48351506c0a2fc9aeb8106e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/238a5383e85a53e0a48351506c0a2fc9aeb8106e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a40f2e74815a926c5f47416c29efbc17aa1ef43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a40f2e74815a926c5f47416c29efbc17aa1ef43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a40f2e74815a926c5f47416c29efbc17aa1ef43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a40f2e74815a926c5f47416c29efbc17aa1ef43/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fa9e73e6db0ff05447f5547df925fdcb4733d05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fa9e73e6db0ff05447f5547df925fdcb4733d05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fa9e73e6db0ff05447f5547df925fdcb4733d05"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "f31ad68053b36c1920f8a225d5628c9699182c6f", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a40f2e74815a926c5f47416c29efbc17aa1ef43/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a40f2e74815a926c5f47416c29efbc17aa1ef43/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=7a40f2e74815a926c5f47416c29efbc17aa1ef43", "patch": "@@ -1520,7 +1520,9 @@ gfc_check_associated (gfc_expr *pointer, gfc_expr *target)\n   t = true;\n   if (!same_type_check (pointer, 0, target, 1, true))\n     t = false;\n-  if (!rank_check (target, 0, pointer->rank))\n+  /* F2018 C838 explicitly allows an assumed-rank variable as the first\n+     argument of intrinsic inquiry functions.  */\n+  if (pointer->rank != -1 && !rank_check (target, 0, pointer->rank))\n     t = false;\n   if (target->rank > 0)\n     {"}, {"sha": "f9a7c9ca6f8c73b6ecd16e0c4574e2dbaabb6a15", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a40f2e74815a926c5f47416c29efbc17aa1ef43/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a40f2e74815a926c5f47416c29efbc17aa1ef43/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=7a40f2e74815a926c5f47416c29efbc17aa1ef43", "patch": "@@ -2634,7 +2634,9 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n \t\t   && formal->as->type == AS_ASSUMED_SHAPE))\n \t  && actual->expr_type != EXPR_NULL)\n       || (actual->rank == 0 && formal->attr.dimension\n-\t  && gfc_is_coindexed (actual)))\n+\t  && gfc_is_coindexed (actual))\n+      /* Assumed-rank actual argument; F2018 C838.  */\n+      || actual->rank == -1)\n     {\n       if (where\n \t  && (!formal->attr.artificial || (!formal->maybe_array"}, {"sha": "2dafd4490c3bf357674102d03aea2ab954ddd4ae", "filename": "gcc/testsuite/gfortran.dg/c-interop/c535b-2.f90", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a40f2e74815a926c5f47416c29efbc17aa1ef43/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a40f2e74815a926c5f47416c29efbc17aa1ef43/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-2.f90?ref=7a40f2e74815a926c5f47416c29efbc17aa1ef43", "patch": "@@ -61,15 +61,14 @@ subroutine test_calls (x, y)\n   ! assumed-rank dummies\n   call g (x, y)  ! OK\n   ! assumed-size dummies\n-  call h (x, &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101334\" { xfail *-*-* } }\n+  call h (x, &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101334\" }\n           y)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n   ! assumed-shape dummies\n   call i (x, &  ! { dg-error \"(A|a)ssumed.rank\" }\n           y)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n  ! fixed-size array dummies\n-  call j (x, &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101334\" { xfail *-*-* } }\n+  call j (x, &  ! { dg-error \"(A|a)ssumed.rank\" \"pr101334\" }\n           y)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337, failure to diagnose both operands\" { xfail *-*-*} }\n- ! { dg-bogus \"Actual argument contains too few elements\" \"pr101334\" { xfail *-*-* } .-2 }\n end subroutine\n \n ! Check that you can't use an assumed-rank array variable in an array"}, {"sha": "23862e54d748d53bdec65d6a25f058e85cb2e39c", "filename": "gcc/testsuite/gfortran.dg/c-interop/c535b-3.f90", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a40f2e74815a926c5f47416c29efbc17aa1ef43/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a40f2e74815a926c5f47416c29efbc17aa1ef43/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-3.f90?ref=7a40f2e74815a926c5f47416c29efbc17aa1ef43", "patch": "@@ -29,7 +29,7 @@ function test_associated3 (a, b)\n   integer, target :: b\n   logical :: test_associated3\n \n-  test_associated3 = associated (a, b) ! { dg-bogus \"must be of rank -1\" \"pr101334\" { xfail *-*-* } }\n+  test_associated3 = associated (a, b) ! { dg-bogus \"must be of rank -1\" \"pr101334\" }\n end function\n \n function test_associated4 (a, b)\n@@ -38,7 +38,7 @@ function test_associated4 (a, b)\n   integer, target :: b(:)\n   logical :: test_associated4\n \n-  test_associated4 = associated (a, b) ! { dg-bogus \"must be of rank -1\" \"pr101334\" { xfail *-*-* } }\n+  test_associated4 = associated (a, b) ! { dg-bogus \"must be of rank -1\" \"pr101334\" }\n end function\n \n function test_associated5 (a, b)\n@@ -47,7 +47,7 @@ function test_associated5 (a, b)\n   integer, target :: b(20)\n   logical :: test_associated5\n \n-  test_associated5 = associated (a, b) ! { dg-bogus \"must be of rank -1\" \"pr101334\" { xfail *-*-* } }\n+  test_associated5 = associated (a, b) ! { dg-bogus \"must be of rank -1\" \"pr101334\" }\n end function\n \n function test_associated6 (a, b)\n@@ -65,7 +65,7 @@ function test_associated7 (a, b)\n   integer, pointer :: b\n   logical :: test_associated7\n \n-  test_associated7 = associated (a, b) ! { dg-bogus \"must be of rank -1\" \"pr101334\" { xfail *-*-* } }\n+  test_associated7 = associated (a, b) ! { dg-bogus \"must be of rank -1\" \"pr101334\" }\n end function\n \n function test_associated8 (a, b)\n@@ -74,6 +74,6 @@ function test_associated8 (a, b)\n   integer, pointer :: b(:)\n   logical :: test_associated8\n \n-  test_associated8 = associated (a, b) ! { dg-bogus \"must be of rank -1\" \"pr101334\" { xfail *-*-* } }\n+  test_associated8 = associated (a, b) ! { dg-bogus \"must be of rank -1\" \"pr101334\" }\n end function\n "}]}