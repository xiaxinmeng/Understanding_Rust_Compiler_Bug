{"sha": "c18b00c0d3d51780b2842f3cad567feb1a9b9d9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE4YjAwYzBkM2Q1MTc4MGIyODQyZjNjYWQ1NjdmZWIxYTliOWQ5Zg==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-07-14T16:56:03Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-07-14T16:56:03Z"}, "message": "[multiple changes]\n\n2003-07-14  Douglas Rupp  <rupp@gnat.com>\n\n\t* fixinc/server.c (server_setup): Don't use non-POSIX NULL first\n\targument to getcwd; use fixed buffer instead.\n\n2003-07-14  Nathanael Nerode  <neroden@gcc.gnu.org>\n\n\t* fixinc/mkfixinc.sh: Treat OpenBSD normally.\n\t* fixinc/fixinc.wrap: Delete.\n\nFrom-SVN: r69339", "tree": {"sha": "3baf5158214bf487485c2c11f6100d9af30b29f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3baf5158214bf487485c2c11f6100d9af30b29f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c18b00c0d3d51780b2842f3cad567feb1a9b9d9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c18b00c0d3d51780b2842f3cad567feb1a9b9d9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c18b00c0d3d51780b2842f3cad567feb1a9b9d9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c18b00c0d3d51780b2842f3cad567feb1a9b9d9f/comments", "author": null, "committer": null, "parents": [{"sha": "98ed39062babbe39fe4845956697c111d0659113", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ed39062babbe39fe4845956697c111d0659113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98ed39062babbe39fe4845956697c111d0659113"}], "stats": {"total": 154, "additions": 13, "deletions": 141}, "files": [{"sha": "aa09fb323fbfbf549bdfe0df70595f28984a4013", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18b00c0d3d51780b2842f3cad567feb1a9b9d9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18b00c0d3d51780b2842f3cad567feb1a9b9d9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c18b00c0d3d51780b2842f3cad567feb1a9b9d9f", "patch": "@@ -1,3 +1,13 @@\n+2003-07-14  Douglas Rupp  <rupp@gnat.com>\n+\n+\t* fixinc/server.c (server_setup): Don't use non-POSIX NULL first\n+\targument to getcwd; use fixed buffer instead.\n+\n+2003-07-14  Nathanael Nerode  <neroden@gcc.gnu.org>\n+\n+\t* fixinc/mkfixinc.sh: Treat OpenBSD normally.\n+\t* fixinc/fixinc.wrap: Delete.\n+\n 2003-07-14  Dan Nicolaescu  <dann@ics.uci.edu>\n \n \t* ggc-page.c (extra_order_size_table): Insns have 9 slots. Regs"}, {"sha": "e242d5aa5cf3a10d3393daf2a05a9071620d0978", "filename": "gcc/fixinc/fixinc.wrap", "status": "removed", "additions": 0, "deletions": 136, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ed39062babbe39fe4845956697c111d0659113/gcc%2Ffixinc%2Ffixinc.wrap", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ed39062babbe39fe4845956697c111d0659113/gcc%2Ffixinc%2Ffixinc.wrap", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixinc.wrap?ref=98ed39062babbe39fe4845956697c111d0659113", "patch": "@@ -1,136 +0,0 @@\n-#! /bin/sh\n-# Create wrappers for include files instead of replacing them.\n-#\n-# This script is designed for systems whose include files can be fixed\n-# by creating small wrappers around them.\n-# An advantage of this method is that if the system include files are changed\n-# (e.g. by OS upgrade), you need not re-run fixincludes.\n-#\n-# See README-fixinc for more information.\n-\n-# Directory in which to store the results.\n-LIB=${1?\"fixincludes: output directory not specified\"}\n-\n-# Make sure it exists.\n-if [ ! -d $LIB ]; then\n-  mkdir $LIB || exit 1\n-fi\n-\n-ORIG_DIR=`${PWDCMD-pwd}`\n-\n-# Make LIB absolute if it is relative.\n-# Don't do this if not necessary, since may screw up automounters.\n-case $LIB in\n-/*)\n-\t;;\n-*)\n-\tcd $LIB; LIB=`${PWDCMD-pwd}`\n-\t;;\n-esac\n-\n-echo Building fixed headers in ${LIB}\n-# Directory containing the original header files.\n-shift\n-if [ $# -eq 0 ] ; then\n-  set /usr/include\n-fi\n-\n-INLIST=\"$@\"\n-\n-for INPUT in ${INLIST} ; do\n-cd ${ORIG_DIR}\n-cd ${INPUT}\n-\n-# Some math.h files define struct exception, which conflicts with\n-# the class exception defined in the C++ file std/stdexcept.h.  We\n-# redefine it to __math_exception.  This is not a great fix, but I\n-# haven't been able to think of anything better.\n-file=math.h\n-if [ -r $INPUT/$file ]; then\n-  echo Checking $INPUT/$file\n-  if grep 'struct exception' $INPUT/$file >/dev/null\n-  then\n-    echo Fixed $file\n-    rm -f $LIB/$file\n-    cat <<'__EOF__' >$LIB/$file\n-#ifndef _MATH_H_WRAPPER\n-#ifdef __cplusplus\n-# define exception __math_exception\n-#endif\n- #include_next <math.h>\n-#ifdef __cplusplus\n-# undef exception\n-#endif\n-#define _MATH_H_WRAPPER\n-#endif /* _MATH_H_WRAPPER */\n-__EOF__\n-    # Define _MATH_H_WRAPPER at the end of the wrapper, not the start,\n-    # so that if #include_next gets another instance of the wrapper,\n-    # this will follow the #include_next chain until we arrive at\n-    # the real <math.h>.\n-    chmod a+r $LIB/$file\n-  fi\n-fi\n-\n-# Similarly for struct queue in sys/stream.h.\n-file=sys/stream.h\n-if [ -r $INPUT/$file ]; then\n-  echo Checking $INPUT/$file\n-  if grep 'struct[ \t]*queue' $INPUT/$file >/dev/null\n-  then\n-    echo Fixed $file\n-    mkdir -p $LIB/`dirname $file`\n-    rm -f $LIB/$file\n-    cat <<'__EOF__' >$LIB/$file\n-#ifndef _SYS_STREAM_H_WRAPPER\n-#ifdef __cplusplus\n-# define queue __stream_queue\n-#endif\n- #include_next <sys/stream.h>\n-#ifdef __cplusplus\n-# undef queue\n-#endif\n-#define _SYS_STREAM_H_WRAPPER\n-#endif /* _SYS_STREAM_H_WRAPPER */\n-__EOF__\n-    # Define _SYS_STREAM_H_WRAPPER at the end of the wrapper, not the start,\n-    # so that if #include_next gets another instance of the wrapper,\n-    # this will follow the #include_next chain until we arrive at\n-    # the real <sys/stream.h>.\n-    chmod a+r $LIB/$file\n-  fi\n-fi\n-\n-# Avoid the definition of the bool type in the Solaris 2.x curses.h when using\n-# g++, since it's now an official type in the C++ language.\n-file=curses.h\n-if [ -r $INPUT/$file ]; then\n-  echo Checking $INPUT/$file\n-  w='[\t ]'\n-  if grep \"typedef$w$w*char$w$w*bool$w*;\" $INPUT/$file >/dev/null\n-  then\n-    echo Fixed $file\n-    rm -f $LIB/$file\n-    cat <<'__EOF__' >$LIB/$file\n-#ifndef _CURSES_H_WRAPPER\n-#ifdef __cplusplus\n-# define bool __curses_bool_t\n-#endif\n- #include_next <curses.h>\n-#ifdef __cplusplus\n-# undef bool\n-#endif\n-#define _CURSES_H_WRAPPER\n-#endif /* _CURSES_H_WRAPPER */\n-__EOF__\n-    # Define _CURSES_H_WRAPPER at the end of the wrapper, not the start,\n-    # so that if #include_next gets another instance of the wrapper,\n-    # this will follow the #include_next chain until we arrive at\n-    # the real <curses.h>.\n-    chmod a+r $LIB/$file\n-  fi\n-fi\n-\n-done\n-\n-exit 0"}, {"sha": "ff178b9b0d2108650454927829ae75fc09b4c40d", "filename": "gcc/fixinc/mkfixinc.sh", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18b00c0d3d51780b2842f3cad567feb1a9b9d9f/gcc%2Ffixinc%2Fmkfixinc.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18b00c0d3d51780b2842f3cad567feb1a9b9d9f/gcc%2Ffixinc%2Fmkfixinc.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fmkfixinc.sh?ref=c18b00c0d3d51780b2842f3cad567feb1a9b9d9f", "patch": "@@ -42,10 +42,6 @@ case $machine in\n         fixincludes=fixinc.svr4\n         ;;\n \n-    i?86-*-openbsd*)\n-        fixincludes=fixinc.wrap\n-        ;;\n-\n     i?86-sequent-ptx* | i?86-sequent-sysv[34]*)\n         fixincludes=fixinc.ptx\n         ;;"}, {"sha": "4cb581086cdcba67bab25b1921dcc325f6a35888", "filename": "gcc/fixinc/server.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18b00c0d3d51780b2842f3cad567feb1a9b9d9f/gcc%2Ffixinc%2Fserver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18b00c0d3d51780b2842f3cad567feb1a9b9d9f/gcc%2Ffixinc%2Fserver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fserver.c?ref=c18b00c0d3d51780b2842f3cad567feb1a9b9d9f", "patch": "@@ -183,6 +183,7 @@ static void\n server_setup ()\n {\n   static int atexit_done = 0;\n+  char buff [MAXPATHLEN + 1];\n   \n   if (atexit_done++ == 0)\n     atexit (close_server);\n@@ -196,7 +197,8 @@ server_setup ()\n \n   fputs (\"trap : 1\\n\", server_pair.pf_write);\n   fflush (server_pair.pf_write);\n-  p_cur_dir = getcwd ((char *) NULL, MAXPATHLEN + 1);\n+  getcwd (buff, MAXPATHLEN + 1);\n+  p_cur_dir = xstrdup (buff);\n }\n \n /*"}]}