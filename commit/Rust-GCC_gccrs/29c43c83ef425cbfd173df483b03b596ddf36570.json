{"sha": "29c43c83ef425cbfd173df483b03b596ddf36570", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjljNDNjODNlZjQyNWNiZmQxNzNkZjQ4M2IwM2I1OTZkZGYzNjU3MA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-10-05T17:40:28Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-10-05T17:40:28Z"}, "message": "ipa-polymorphic-call.c (possible_placement_new): Fix condition on size.\n\n\n\t* ipa-polymorphic-call.c (possible_placement_new): Fix condition\n\ton size.\n\t(ipa_polymorphic_call_context::restrict_to_inner_type): Do not walk\n\tinto vptr pointer.\n\t(ipa_polymorphic_call_context::dump): Fix formating.\n\t(walk_ssa_copies): Add logic avoiding loops; update uses.\n\t* ipa-prop.c (ipa_analyze_call_uses): Compute vptr_changed.\n\t* g++.dg/ipa/devirt-42.C: Update template.\n\t* g++.dg/ipa/devirt-44.C: Update template.\n\t* g++.dg/ipa/devirt-45.C: Update template.\n\t* g++.dg/ipa/devirt-46.C: Update template.\n\t* g++.dg/ipa/devirt-47.C: Update template.\n\t* g++.dg/ipa/devirt-48.C: New testcase.\n\nFrom-SVN: r215902", "tree": {"sha": "2798c6a743942ce9aae14e3e6423cb4e162dcdea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2798c6a743942ce9aae14e3e6423cb4e162dcdea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29c43c83ef425cbfd173df483b03b596ddf36570", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29c43c83ef425cbfd173df483b03b596ddf36570", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29c43c83ef425cbfd173df483b03b596ddf36570", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29c43c83ef425cbfd173df483b03b596ddf36570/comments", "author": null, "committer": null, "parents": [{"sha": "f50592234cdef68ddc9b98b65a88a443e2c4523f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f50592234cdef68ddc9b98b65a88a443e2c4523f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f50592234cdef68ddc9b98b65a88a443e2c4523f"}], "stats": {"total": 135, "additions": 108, "deletions": 27}, "files": [{"sha": "59223877fea01579c116ed412affe231a65a8b72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c43c83ef425cbfd173df483b03b596ddf36570/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c43c83ef425cbfd173df483b03b596ddf36570/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29c43c83ef425cbfd173df483b03b596ddf36570", "patch": "@@ -1,3 +1,13 @@\n+2014-10-04  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-polymorphic-call.c (possible_placement_new): Fix condition\n+\ton size.\n+\t(ipa_polymorphic_call_context::restrict_to_inner_type): Do not walk\n+\tinto vptr pointer.\n+\t(ipa_polymorphic_call_context::dump): Fix formating.\n+\t(walk_ssa_copies): Add logic avoiding loops; update uses.\n+\t* ipa-prop.c (ipa_analyze_call_uses): Compute vptr_changed.\n+\n 2014-10-02  Mark Wielaard  <mjw@redhat.com>\n \n \tPR debug/63239"}, {"sha": "3e4aa042c3cd8800665b13f3e8db838a90d8ce35", "filename": "gcc/ipa-polymorphic-call.c", "status": "modified", "additions": 47, "deletions": 12, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c43c83ef425cbfd173df483b03b596ddf36570/gcc%2Fipa-polymorphic-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c43c83ef425cbfd173df483b03b596ddf36570/gcc%2Fipa-polymorphic-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-polymorphic-call.c?ref=29c43c83ef425cbfd173df483b03b596ddf36570", "patch": "@@ -97,7 +97,7 @@ possible_placement_new (tree type, tree expected_type,\n \t      || !tree_fits_shwi_p (TYPE_SIZE (type))\n \t      || (cur_offset\n \t\t  + (expected_type ? tree_to_uhwi (TYPE_SIZE (expected_type))\n-\t\t     : 1)\n+\t\t     : GET_MODE_BITSIZE (Pmode))\n \t\t  <= tree_to_uhwi (TYPE_SIZE (type)))));\n }\n \n@@ -278,6 +278,14 @@ ipa_polymorphic_call_context::restrict_to_inner_class (tree otr_type,\n \t      pos = int_bit_position (fld);\n \t      if (pos > (unsigned HOST_WIDE_INT)cur_offset)\n \t\tcontinue;\n+\n+\t      /* Do not consider vptr itself.  Not even for placement new.  */\n+\t      if (!pos && DECL_ARTIFICIAL (fld)\n+\t\t  && POINTER_TYPE_P (TREE_TYPE (fld))\n+\t\t  && TYPE_BINFO (type)\n+\t\t  && polymorphic_type_binfo_p (TYPE_BINFO (type)))\n+\t\tcontinue;\n+\n \t      if (!DECL_SIZE (fld) || !tree_fits_uhwi_p (DECL_SIZE (fld)))\n \t\tgoto no_useful_type_info;\n \t      size = tree_to_uhwi (DECL_SIZE (fld));\n@@ -583,7 +591,7 @@ ipa_polymorphic_call_context::dump (FILE *f) const\n {\n   fprintf (f, \"    \");\n   if (invalid)\n-    fprintf (f, \"Call is known to be undefined\\n\");\n+    fprintf (f, \"Call is known to be undefined\");\n   else\n     {\n       if (useless_p ())\n@@ -751,18 +759,35 @@ ipa_polymorphic_call_context::set_by_invariant (tree cst,\n }\n \n /* See if OP is SSA name initialized as a copy or by single assignment.\n-   If so, walk the SSA graph up.  */\n+   If so, walk the SSA graph up.  Because simple PHI conditional is considered\n+   copy, GLOBAL_VISITED may be used to avoid infinite loop walking the SSA\n+   graph.  */\n \n static tree\n-walk_ssa_copies (tree op)\n+walk_ssa_copies (tree op, hash_set<tree> **global_visited = NULL)\n {\n+  hash_set <tree> *visited = NULL;\n   STRIP_NOPS (op);\n   while (TREE_CODE (op) == SSA_NAME\n \t && !SSA_NAME_IS_DEFAULT_DEF (op)\n \t && SSA_NAME_DEF_STMT (op)\n \t && (gimple_assign_single_p (SSA_NAME_DEF_STMT (op))\n \t     || gimple_code (SSA_NAME_DEF_STMT (op)) == GIMPLE_PHI))\n     {\n+      if (global_visited)\n+\t{\n+\t  if (!*global_visited)\n+\t    *global_visited = new hash_set<tree>;\n+\t  if ((*global_visited)->add (op))\n+\t    goto done;\n+\t}\t\n+      else\n+\t{\n+\t  if (!visited)\n+\t    visited = new hash_set<tree>;\n+\t  if (visited->add (op))\n+\t    goto done;\n+\t}\n       /* Special case\n \t if (ptr == 0)\n \t   ptr = 0;\n@@ -776,23 +801,28 @@ walk_ssa_copies (tree op)\n \t{\n \t  gimple phi = SSA_NAME_DEF_STMT (op);\n \n-\t  if (gimple_phi_num_args (phi) != 2)\n-\t    return op;\n-\t  if (integer_zerop (gimple_phi_arg_def (phi, 0)))\n+\t  if (gimple_phi_num_args (phi) > 2)\n+\t    goto done;\n+\t  if (gimple_phi_num_args (phi) == 1)\n+\t    op = gimple_phi_arg_def (phi, 0);\n+\t  else if (integer_zerop (gimple_phi_arg_def (phi, 0)))\n \t    op = gimple_phi_arg_def (phi, 1);\n \t  else if (integer_zerop (gimple_phi_arg_def (phi, 1)))\n \t    op = gimple_phi_arg_def (phi, 0);\n \t  else\n-\t    return op;\n+\t    goto done;\n \t}\n       else\n \t{\n \t  if (gimple_assign_load_p (SSA_NAME_DEF_STMT (op)))\n-\t    return op;\n+\t    goto done;\n \t  op = gimple_assign_rhs1 (SSA_NAME_DEF_STMT (op));\n \t}\n       STRIP_NOPS (op);\n     }\n+done:\n+  if (visited)\n+    delete (visited);\n   return op;\n }\n \n@@ -820,6 +850,7 @@ ipa_polymorphic_call_context::ipa_polymorphic_call_context (tree fndecl,\n {\n   tree otr_type = NULL;\n   tree base_pointer;\n+  hash_set <tree> *visited = NULL;\n \n   if (TREE_CODE (ref) == OBJ_TYPE_REF)\n     {\n@@ -835,9 +866,9 @@ ipa_polymorphic_call_context::ipa_polymorphic_call_context (tree fndecl,\n   invalid = false;\n \n   /* Walk SSA for outer object.  */\n-  do \n+  while (true)\n     {\n-      base_pointer = walk_ssa_copies (base_pointer);\n+      base_pointer = walk_ssa_copies (base_pointer, &visited);\n       if (TREE_CODE (base_pointer) == ADDR_EXPR)\n \t{\n \t  HOST_WIDE_INT size, max_size;\n@@ -869,6 +900,8 @@ ipa_polymorphic_call_context::ipa_polymorphic_call_context (tree fndecl,\n \t\t is known.  */\n \t      else if (DECL_P (base))\n \t\t{\n+\t\t  if (visited)\n+\t\t    delete (visited);\n \t\t  /* Only type inconsistent programs can have otr_type that is\n \t\t     not part of outer type.  */\n \t\t  if (otr_type\n@@ -907,7 +940,9 @@ ipa_polymorphic_call_context::ipa_polymorphic_call_context (tree fndecl,\n       else\n \tbreak;\n     }\n-  while (true);\n+\n+  if (visited)\n+    delete (visited);\n \n   /* Try to determine type of the outer object.  */\n   if (TREE_CODE (base_pointer) == SSA_NAME"}, {"sha": "743ea805b6dbb65fab47151ec8b9b693cb971d88", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c43c83ef425cbfd173df483b03b596ddf36570/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c43c83ef425cbfd173df483b03b596ddf36570/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=29c43c83ef425cbfd173df483b03b596ddf36570", "patch": "@@ -2371,9 +2371,10 @@ ipa_analyze_call_uses (struct func_body_info *fbi, gimple call)\n       gcc_checking_assert (cs->indirect_info->otr_token\n \t\t\t   == tree_to_shwi (OBJ_TYPE_REF_TOKEN (target)));\n \n-      context.get_dynamic_type (instance,\n-\t\t\t\tOBJ_TYPE_REF_OBJECT (target),\n-\t\t\t\tobj_type_ref_class (target), call);\n+      cs->indirect_info->vptr_changed\n+\t= !context.get_dynamic_type (instance,\n+\t\t\t\t     OBJ_TYPE_REF_OBJECT (target),\n+\t\t\t\t     obj_type_ref_class (target), call);\n       cs->indirect_info->context = context;\n     }\n \n@@ -3263,7 +3264,7 @@ try_make_edge_direct_virtual_call (struct cgraph_edge *ie,\n     {\n       if (!possible_polymorphic_call_target_p (ie, cgraph_node::get_create (target)))\n \t{\n-\t  if (!speculative)\n+\t  if (speculative)\n \t    return NULL;\n \t  target = ipa_impossible_devirt_target (ie, target);\n \t}"}, {"sha": "bd7055c53729365f3368fad348e756885d889d4f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c43c83ef425cbfd173df483b03b596ddf36570/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c43c83ef425cbfd173df483b03b596ddf36570/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=29c43c83ef425cbfd173df483b03b596ddf36570", "patch": "@@ -1,3 +1,12 @@\n+2014-10-04  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* g++.dg/ipa/devirt-42.C: Update template.\n+\t* g++.dg/ipa/devirt-44.C: Update template.\n+\t* g++.dg/ipa/devirt-45.C: Update template.\n+\t* g++.dg/ipa/devirt-46.C: Update template.\n+\t* g++.dg/ipa/devirt-47.C: Update template.\n+\t* g++.dg/ipa/devirt-48.C: New testcase.\n+\n 2014-10-02  Mark Wielaard  <mjw@redhat.com>\n \n \tPR debug/63239"}, {"sha": "e5544eff598166ab85da1da7bc9ced5bf7199666", "filename": "gcc/testsuite/g++.dg/ipa/devirt-42.C", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c43c83ef425cbfd173df483b03b596ddf36570/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-42.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c43c83ef425cbfd173df483b03b596ddf36570/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-42.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-42.C?ref=29c43c83ef425cbfd173df483b03b596ddf36570", "patch": "@@ -26,13 +26,9 @@ main()\n /* Inlining everything into main makes type clear from type of variable b.\n    However devirtualization is also possible for offline copy of A::barbar. Invoking\n    B's barbar makes it clear the type is at least B and B is an anonymous\n-   namespace type and therefore we know it has no derivations.\n-   FIXME: Currently we devirtualize speculatively only because we do not track\n-   dynamic type changes well.  */\n-/* { dg-final { scan-ipa-dump-times \"First type is base of second\" 1 \"inline\"  } } */\n-/* { dg-final { scan-ipa-dump-times \"Outer types match, merging flags\" 2 \"inline\"  } } */\n-/* { dg-final { scan-ipa-dump-times \"Discovered a virtual call to a known target\" 1 \"inline\"  } } */\n-/* { dg-final { scan-ipa-dump-times \"Discovered a virtual call to a speculative target\" 1 \"inline\"  } } */\n+   namespace type and therefore we know it has no derivations.  */\n+/* { dg-final { scan-ipa-dump-times \"First type is base of second\" 3 \"inline\"  } } */\n+/* { dg-final { scan-ipa-dump-times \"Discovered a virtual call to a known target\" 2 \"inline\"  } } */\n \n /* Verify that speculation is optimized by late optimizers.  */\n /* { dg-final { scan-ipa-dump-times \"return 2\" 2 \"optimized\"  } } */"}, {"sha": "bd6c198d8315769882d3c62bbd2bd4110a1a2947", "filename": "gcc/testsuite/g++.dg/ipa/devirt-44.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c43c83ef425cbfd173df483b03b596ddf36570/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c43c83ef425cbfd173df483b03b596ddf36570/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-44.C?ref=29c43c83ef425cbfd173df483b03b596ddf36570", "patch": "@@ -27,7 +27,6 @@ main()\n    Check that we handle that.  */\n \n /* { dg-final { scan-ipa-dump-times \"First type is base of second\" 1 \"inline\"  } } */\n-/* { dg-final { scan-ipa-dump \"(maybe in construction)\" \"inline\"  } } */\n /* { dg-final { scan-ipa-dump-times \"Discovered a virtual call to a known target\\[^\\\\n\\]*A::foo\" 1 \"inline\"  } } */\n /* { dg-final { scan-ipa-dump-times \"Discovered a virtual call to a known target\\[^\\\\n\\]*B::foo\" 1 \"inline\"  } } */\n /* { dg-final { cleanup-ipa-dump \"inline\" } } */"}, {"sha": "5c47e080bf57395977f36648b24592df50111591", "filename": "gcc/testsuite/g++.dg/ipa/devirt-45.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c43c83ef425cbfd173df483b03b596ddf36570/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-45.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c43c83ef425cbfd173df483b03b596ddf36570/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-45.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-45.C?ref=29c43c83ef425cbfd173df483b03b596ddf36570", "patch": "@@ -37,7 +37,6 @@ main()\n }\n \n /* One invocation is A::foo () other is B::foo () even though the type is destroyed and rebuilt in test() */\n-/* { dg-final { scan-ipa-dump \"(maybe in construction)\" \"inline\"  } } */\n /* { dg-final { scan-ipa-dump-times \"Discovered a virtual call to a known target\\[^\\\\n\\]*A::foo\" 1 \"inline\"  } } */\n /* { dg-final { scan-ipa-dump-times \"Discovered a virtual call to a known target\\[^\\\\n\\]*B::foo\" 1 \"inline\"  } } */\n /* { dg-final { cleanup-ipa-dump \"inline\" } } */"}, {"sha": "2648fa9cf3aaf23c622c3619e98454a8ed107a6f", "filename": "gcc/testsuite/g++.dg/ipa/devirt-46.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c43c83ef425cbfd173df483b03b596ddf36570/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-46.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c43c83ef425cbfd173df483b03b596ddf36570/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-46.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-46.C?ref=29c43c83ef425cbfd173df483b03b596ddf36570", "patch": "@@ -20,7 +20,7 @@ m()\n   return 0;\n }\n \n-/* { dg-final { scan-ipa-dump-times \"Discovered a virtual call to a speculative target\\[^\\\\n\\]*B::foo\" 1 \"inline\"  } } */\n+/* { dg-final { scan-ipa-dump-times \"Discovered a virtual call to a known target\\[^\\\\n\\]*B::foo\" 1 \"inline\"  } } */\n /* { dg-final { scan-ipa-dump-not \"OBJ_TYPE_REF\" \"optimized\"  } } */\n /* { dg-final { scan-ipa-dump-not \"abort\" \"optimized\"  } } */\n /* { dg-final { cleanup-ipa-dump \"inline\" } } */"}, {"sha": "364a9ab085eb03aeea7a6a8541a01a8c7b3ad96b", "filename": "gcc/testsuite/g++.dg/ipa/devirt-47.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c43c83ef425cbfd173df483b03b596ddf36570/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-47.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c43c83ef425cbfd173df483b03b596ddf36570/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-47.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-47.C?ref=29c43c83ef425cbfd173df483b03b596ddf36570", "patch": "@@ -23,7 +23,7 @@ m()\n   return 0;\n }\n \n-/* { dg-final { scan-ipa-dump-times \"Discovered a virtual call to a speculative target\\[^\\\\n\\]*C::_ZTh\" 1 \"inline\"  } } */\n+/* { dg-final { scan-ipa-dump-times \"Discovered a virtual call to a known target\\[^\\\\n\\]*C::_ZTh\" 1 \"inline\"  } } */\n /* { dg-final { scan-ipa-dump-not \"OBJ_TYPE_REF\" \"optimized\"  } } */\n /* FIXME: We ought to inline thunk.  */\n /* { dg-final { scan-ipa-dump \"C::_ZThn\" \"optimized\"  } } */"}, {"sha": "e1ed27477a01ad6623be5d9f83d20530d9c024ee", "filename": "gcc/testsuite/g++.dg/ipa/devirt-48.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c43c83ef425cbfd173df483b03b596ddf36570/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-48.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c43c83ef425cbfd173df483b03b596ddf36570/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-48.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-48.C?ref=29c43c83ef425cbfd173df483b03b596ddf36570", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fno-ipa-cp -fdump-ipa-inline-details -fno-early-inlining\" } */\n+struct A {\n+   virtual int foo(){return 1;}\n+};\n+struct B:A {\n+   virtual int foo(){return 2;}\n+   int callfoo(){foo();}\n+};\n+struct C:A {\n+   virtual int foo(){return 3;}\n+};\n+struct D:B {\n+   virtual int foo(){return 4;}\n+   int callfoo(){foo();}\n+};\n+static void\n+test (struct A *a)\n+{\n+  if (a->foo() != 2)\n+   __builtin_abort ();\n+}\n+int\n+m()\n+{\n+  struct A *a = new C;\n+  static_cast<B*>(a)->callfoo();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump-times \"Discovered a virtual call to a known target\\[^\\\\n\\]*__builtin_unreachable\" 1 \"inline\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"inline\" } } */"}]}