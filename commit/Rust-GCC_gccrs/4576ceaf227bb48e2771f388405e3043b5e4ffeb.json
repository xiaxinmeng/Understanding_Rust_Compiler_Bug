{"sha": "4576ceaf227bb48e2771f388405e3043b5e4ffeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU3NmNlYWYyMjdiYjQ4ZTI3NzFmMzg4NDA1ZTMwNDNiNWU0ZmZlYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2006-11-21T09:41:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2006-11-21T09:41:27Z"}, "message": "re PR c++/29734 (ICE with vector in switch condition)\n\n\tPR c++/29734\n\t* cp-tree.h (WANT_VECTOR): Define.\n\t(WANT_ARITH): Add WANT_VECTOR.\n\t* cvt.c (build_expr_type_conversion): Handle vector types.\n\t* typeck.c (build_unary_op): Add WANT_VECTOR to\n\tbuild_expr_type_conversion flags.\n\n\t* g++.dg/conversion/simd4.C: New test.\n\nFrom-SVN: r119044", "tree": {"sha": "dfda9b44bba52234a55d6932d2b7e09d01cdb2bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfda9b44bba52234a55d6932d2b7e09d01cdb2bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4576ceaf227bb48e2771f388405e3043b5e4ffeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4576ceaf227bb48e2771f388405e3043b5e4ffeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4576ceaf227bb48e2771f388405e3043b5e4ffeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4576ceaf227bb48e2771f388405e3043b5e4ffeb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b509487e8855a198e2fd7b40316b6d124ef3afc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b509487e8855a198e2fd7b40316b6d124ef3afc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b509487e8855a198e2fd7b40316b6d124ef3afc4"}], "stats": {"total": 89, "additions": 86, "deletions": 3}, "files": [{"sha": "295ed765dc462aae0ede992b8238dbaf8ecf46d4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4576ceaf227bb48e2771f388405e3043b5e4ffeb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4576ceaf227bb48e2771f388405e3043b5e4ffeb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4576ceaf227bb48e2771f388405e3043b5e4ffeb", "patch": "@@ -1,3 +1,12 @@\n+2006-11-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/29734\n+\t* cp-tree.h (WANT_VECTOR): Define.\n+\t(WANT_ARITH): Add WANT_VECTOR.\n+\t* cvt.c (build_expr_type_conversion): Handle vector types.\n+\t* typeck.c (build_unary_op): Add WANT_VECTOR to\n+\tbuild_expr_type_conversion flags.\n+\n 2006-11-20  Simon Martin  <simartin@users.sourceforge.net>\n \n \tPR c++/29475"}, {"sha": "43e6e29d0cec945f40a5d570c2cda8436a5363c3", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4576ceaf227bb48e2771f388405e3043b5e4ffeb/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4576ceaf227bb48e2771f388405e3043b5e4ffeb/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4576ceaf227bb48e2771f388405e3043b5e4ffeb", "patch": "@@ -3468,7 +3468,8 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, OP_FLAG, TYPENAME_FLAG };\n #define WANT_ENUM\t4 /* enumerated types */\n #define WANT_POINTER\t8 /* pointer types */\n #define WANT_NULL      16 /* null pointer constant */\n-#define WANT_ARITH\t(WANT_INT | WANT_FLOAT)\n+#define WANT_VECTOR    32 /* vector types */\n+#define WANT_ARITH\t(WANT_INT | WANT_FLOAT | WANT_VECTOR)\n \n /* Used with comptypes, and related functions, to guide type\n    comparison.  */"}, {"sha": "f09f70860697b7e5c9a5555ec1ea298d907bafb9", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4576ceaf227bb48e2771f388405e3043b5e4ffeb/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4576ceaf227bb48e2771f388405e3043b5e4ffeb/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=4576ceaf227bb48e2771f388405e3043b5e4ffeb", "patch": "@@ -1103,7 +1103,6 @@ build_expr_type_conversion (int desires, tree expr, bool complain)\n \t  return expr;\n \t/* else fall through...  */\n \n-      case VECTOR_TYPE:\n       case BOOLEAN_TYPE:\n \treturn (desires & WANT_INT) ? expr : NULL_TREE;\n       case ENUMERAL_TYPE:\n@@ -1117,6 +1116,23 @@ build_expr_type_conversion (int desires, tree expr, bool complain)\n       case ARRAY_TYPE:\n \treturn (desires & WANT_POINTER) ? decay_conversion (expr)\n \t\t\t\t\t: NULL_TREE;\n+\n+      case VECTOR_TYPE:\n+\tif ((desires & WANT_VECTOR) == 0)\n+\t  return NULL_TREE;\n+\tswitch (TREE_CODE (TREE_TYPE (basetype)))\n+\t  {\n+\t  case INTEGER_TYPE:\n+\t  case BOOLEAN_TYPE:\n+\t    return (desires & WANT_INT) ? expr : NULL_TREE;\n+\t  case ENUMERAL_TYPE:\n+\t    return (desires & WANT_ENUM) ? expr : NULL_TREE;\n+\t  case REAL_TYPE:\n+\t    return (desires & WANT_FLOAT) ? expr : NULL_TREE;\n+\t  default:\n+\t    return NULL_TREE;\n+\t  }\n+\n       default:\n \treturn NULL_TREE;\n       }\n@@ -1151,6 +1167,23 @@ build_expr_type_conversion (int desires, tree expr, bool complain)\n \tcase POINTER_TYPE:\n \t  win = (desires & WANT_POINTER); break;\n \n+\tcase VECTOR_TYPE:\n+\t  if ((desires & WANT_VECTOR) == 0)\n+\t    break;\n+\t  switch (TREE_CODE (TREE_TYPE (candidate)))\n+\t    {\n+\t    case BOOLEAN_TYPE:\n+\t    case INTEGER_TYPE:\n+\t      win = (desires & WANT_INT); break;\n+\t    case ENUMERAL_TYPE:\n+\t      win = (desires & WANT_ENUM); break;\n+\t    case REAL_TYPE:\n+\t      win = (desires & WANT_FLOAT); break;\n+\t    default:\n+\t      break;\n+\t    }\n+\t  break;\n+\n \tdefault:\n \t  break;\n \t}"}, {"sha": "4146bf0e5970ba286cfee7e96d6e656fb4d847b3", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4576ceaf227bb48e2771f388405e3043b5e4ffeb/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4576ceaf227bb48e2771f388405e3043b5e4ffeb/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=4576ceaf227bb48e2771f388405e3043b5e4ffeb", "patch": "@@ -3995,7 +3995,8 @@ build_unary_op (enum tree_code code, tree xarg, int noconvert)\n \t  if (!noconvert)\n \t    arg = default_conversion (arg);\n \t}\n-      else if (!(arg = build_expr_type_conversion (WANT_INT | WANT_ENUM,\n+      else if (!(arg = build_expr_type_conversion (WANT_INT | WANT_ENUM\n+\t\t\t\t\t\t   | WANT_VECTOR,\n \t\t\t\t\t\t   arg, true)))\n \terrstring = \"wrong type argument to bit-complement\";\n       else if (!noconvert && CP_INTEGRAL_TYPE_P (TREE_TYPE (arg)))"}, {"sha": "99e57c7ac70402188ea8ef529aaab1ae722b6c54", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4576ceaf227bb48e2771f388405e3043b5e4ffeb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4576ceaf227bb48e2771f388405e3043b5e4ffeb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4576ceaf227bb48e2771f388405e3043b5e4ffeb", "patch": "@@ -1,3 +1,8 @@\n+2006-11-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/29734\n+\t* g++.dg/conversion/simd4.C: New test.\n+\n 2006-11-20  Simon Martin  <simartin@users.sourceforge.net>\n \n \tPR c++/29475"}, {"sha": "f8f7f2e4501d5d68182426b60b71630b84b56f78", "filename": "gcc/testsuite/g++.dg/conversion/simd4.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4576ceaf227bb48e2771f388405e3043b5e4ffeb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fsimd4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4576ceaf227bb48e2771f388405e3043b5e4ffeb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fsimd4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fsimd4.C?ref=4576ceaf227bb48e2771f388405e3043b5e4ffeb", "patch": "@@ -0,0 +1,34 @@\n+// PR c++/29734\n+// { dg-do compile }\n+// { dg-options \"\" }\n+\n+int t;\n+float u;\n+int __attribute__((vector_size (8))) v;\n+float __attribute__((vector_size (8))) w;\n+int b[10];\n+\n+void\n+foo ()\n+{\n+  b[t];\n+  b[u];\t\t// { dg-error \"invalid types\" }\n+  b[v];\t\t// { dg-error \"invalid types\" }\n+  b[w];\t\t// { dg-error \"invalid types\" }\n+  t[b];\n+  u[b];\t\t// { dg-error \"invalid types\" }\n+  v[b];\t\t// { dg-error \"invalid types\" }\n+  w[b];\t\t// { dg-error \"invalid types\" }\n+  new int[t];\n+  new int[u];\t// { dg-error \"new-declarator must have integral\" }\n+  new int[v];\t// { dg-error \"new-declarator must have integral\" }\n+  new int[w];\t// { dg-error \"new-declarator must have integral\" }\n+  switch (t) { default: break; }\n+  switch (u) { default: break; }\t// { dg-error \"switch quantity not an integer\" }\n+  switch (v) { default: break; }\t// { dg-error \"switch quantity not an integer\" }\n+  switch (w) { default: break; }\t// { dg-error \"switch quantity not an integer\" }\n+  t = ~t;\n+  u = ~u;\t// { dg-error \"wrong type argument to bit-complement\" }\n+  v = ~v;\n+  w = ~w;\t// { dg-error \"wrong type argument to bit-complement\" }\n+}"}]}