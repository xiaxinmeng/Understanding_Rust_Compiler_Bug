{"sha": "7368cfa4986d83317fbfb839b1eeb249a9ef7199", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM2OGNmYTQ5ODZkODMzMTdmYmZiODM5YjFlZWIyNDlhOWVmNzE5OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-09-10T09:11:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-09-10T09:11:40Z"}, "message": "A partially initialized variable isn't constant.\n\n\t* constexpr.c (reduced_constant_expression_p): If\n\tCONSTRUCTOR_NO_IMPLICIT_ZERO, check that all fields are initialized.\n\nFrom-SVN: r251948", "tree": {"sha": "6ba2f4cbb11bda04c8d43bca61729bb1c8e59303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ba2f4cbb11bda04c8d43bca61729bb1c8e59303"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7368cfa4986d83317fbfb839b1eeb249a9ef7199", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7368cfa4986d83317fbfb839b1eeb249a9ef7199", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7368cfa4986d83317fbfb839b1eeb249a9ef7199", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7368cfa4986d83317fbfb839b1eeb249a9ef7199/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84284f026469ddbede86d164c37924a1f8fe80d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84284f026469ddbede86d164c37924a1f8fe80d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84284f026469ddbede86d164c37924a1f8fe80d3"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "8395862620b60073d6b1232769d25f78e6461669", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7368cfa4986d83317fbfb839b1eeb249a9ef7199/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7368cfa4986d83317fbfb839b1eeb249a9ef7199/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7368cfa4986d83317fbfb839b1eeb249a9ef7199", "patch": "@@ -1,3 +1,8 @@\n+2017-09-09  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.c (reduced_constant_expression_p): If\n+\tCONSTRUCTOR_NO_IMPLICIT_ZERO, check that all fields are initialized.\n+\n 2017-09-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR bootstrap/81926"}, {"sha": "2d2f3b854ba72b3f35adc68a37ed5b9092962029", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7368cfa4986d83317fbfb839b1eeb249a9ef7199/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7368cfa4986d83317fbfb839b1eeb249a9ef7199/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=7368cfa4986d83317fbfb839b1eeb249a9ef7199", "patch": "@@ -1732,15 +1732,30 @@ reduced_constant_expression_p (tree t)\n \n     case CONSTRUCTOR:\n       /* And we need to handle PTRMEM_CST wrapped in a CONSTRUCTOR.  */\n-      tree elt; unsigned HOST_WIDE_INT idx;\n-      FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (t), idx, elt)\n+      tree idx, val, field; unsigned HOST_WIDE_INT i;\n+      if (CONSTRUCTOR_NO_IMPLICIT_ZERO (t))\n+\tfield = next_initializable_field (TYPE_FIELDS (TREE_TYPE (t)));\n+      else\n+\tfield = NULL_TREE;\n+      FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (t), i, idx, val)\n \t{\n-\t  if (!elt)\n+\t  if (!val)\n \t    /* We're in the middle of initializing this element.  */\n \t    return false;\n-\t  if (!reduced_constant_expression_p (elt))\n+\t  if (!reduced_constant_expression_p (val))\n \t    return false;\n+\t  if (field)\n+\t    {\n+\t      if (idx != field)\n+\t\treturn false;\n+\t      field = next_initializable_field (DECL_CHAIN (field));\n+\t    }\n \t}\n+      if (field)\n+\treturn false;\n+      else if (CONSTRUCTOR_NO_IMPLICIT_ZERO (t))\n+\t/* All the fields are initialized.  */\n+\tCONSTRUCTOR_NO_IMPLICIT_ZERO (t) = false;\n       return true;\n \n     default:"}]}