{"sha": "3bb5de61eb6b1008cb560be1a769f316860fe930", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JiNWRlNjFlYjZiMTAwOGNiNTYwYmUxYTc2OWYzMTY4NjBmZTkzMA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-03-07T05:46:30Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-03-07T05:46:30Z"}, "message": "gmon-sol2.c: Include config.h and system.h.\n\n        * gmon-sol2.c: Include config.h and system.h.  Don't redundantly\n        include system header files.\n        (sccsid): Remove.\n        (moncontrol, monstartup, _mcleanup, internal_mcount): Prototype.\n        (_mcleanup): Add the `const' keyword to a char*.\n        (internal_mcount): Declare `etext' as a char[] not a function.\n        Cast `etext' to char* when calling `monstartup'.\n        * sparc.c (frame_base_name, save_regs, restore_regs,\n        build_big_number, sparc_cmodel_string, sparc_align_loops_string,\n        sparc_align_jumps_string, sparc_align_funcs_string, code_model,\n        cpu_default, cpu_table, output_function_prologue,\n        output_function_epilogue, output_return,\n        sparc_flat_output_function_prologue, ultra_code_names,\n        sparc_flat_output_function_epilogue): Constify a char*.\n        (hypersparc_adjust_cost): Add a default case in a switch.\n        * sparc.h (sparc_cmodel_string, OVERRIDE_OPTIONS,\n        sparc_cpu_select, sparc_align_loops_string,\n        sparc_align_jumps_string, sparc_align_funcs_string,\n        output_return): Constify a char*.\n        * sparc.md (movdi): Change the comparison of HOST_BITS_PER_WIDE_INT\n        so that we check \"== 32\", instead of \"!= 64\".  Cast a value to\n        HOST_WIDE_INT when comparing against one.  Hide the declaration\n        for variable `chain'.\n\nFrom-SVN: r25627", "tree": {"sha": "e750714112ade3305dbee6b5b734542942face4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e750714112ade3305dbee6b5b734542942face4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bb5de61eb6b1008cb560be1a769f316860fe930", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bb5de61eb6b1008cb560be1a769f316860fe930", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bb5de61eb6b1008cb560be1a769f316860fe930", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bb5de61eb6b1008cb560be1a769f316860fe930/comments", "author": null, "committer": null, "parents": [{"sha": "366453bf4b050c61e1f3fc3a663264466dcb251d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/366453bf4b050c61e1f3fc3a663264466dcb251d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/366453bf4b050c61e1f3fc3a663264466dcb251d"}], "stats": {"total": 119, "additions": 74, "deletions": 45}, "files": [{"sha": "e3ceaf233520ffa2d9f80a56936840091c28ad4c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb5de61eb6b1008cb560be1a769f316860fe930/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb5de61eb6b1008cb560be1a769f316860fe930/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3bb5de61eb6b1008cb560be1a769f316860fe930", "patch": "@@ -1,3 +1,32 @@\n+Sun Mar  7 08:30:37 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gmon-sol2.c: Include config.h and system.h.  Don't redundantly\n+\tinclude system header files.\n+\t(sccsid): Remove.\n+\t(moncontrol, monstartup, _mcleanup, internal_mcount): Prototype.\n+\t(_mcleanup): Add the `const' keyword to a char*.\n+\t(internal_mcount): Declare `etext' as a char[] not a function.\n+\tCast `etext' to char* when calling `monstartup'.\n+\n+\t* sparc.c (frame_base_name, save_regs, restore_regs,\n+\tbuild_big_number, sparc_cmodel_string, sparc_align_loops_string,\n+\tsparc_align_jumps_string, sparc_align_funcs_string, code_model,\n+\tcpu_default, cpu_table, output_function_prologue,\n+\toutput_function_epilogue, output_return,\n+\tsparc_flat_output_function_prologue, ultra_code_names,\n+\tsparc_flat_output_function_epilogue): Constify a char*.\n+\t(hypersparc_adjust_cost): Add a default case in a switch.\n+\n+\t* sparc.h (sparc_cmodel_string, OVERRIDE_OPTIONS,\n+\tsparc_cpu_select, sparc_align_loops_string,\n+\tsparc_align_jumps_string, sparc_align_funcs_string,\n+\toutput_return): Constify a char*.\n+\n+\t* sparc.md (movdi): Change the comparison of HOST_BITS_PER_WIDE_INT\n+\tso that we check \"== 32\", instead of \"!= 64\".  Cast a value to\n+ \tHOST_WIDE_INT when comparing against one.  Hide the declaration\n+ \tfor variable `chain'.\n+\n Sun Mar  7 08:05:27 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* system.h (const, inline): Move the stage2 handling of these"}, {"sha": "a6abcabcc51fa48efcaf67cebe41c0e5613e05bb", "filename": "gcc/config/sparc/gmon-sol2.c", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb5de61eb6b1008cb560be1a769f316860fe930/gcc%2Fconfig%2Fsparc%2Fgmon-sol2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb5de61eb6b1008cb560be1a769f316860fe930/gcc%2Fconfig%2Fsparc%2Fgmon-sol2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fgmon-sol2.c?ref=3bb5de61eb6b1008cb560be1a769f316860fe930", "patch": "@@ -35,16 +35,8 @@\n  * for Cygnus Support, July 1992.\n  */\n \n-#ifndef lint\n-static char sccsid[] = \"@(#)gmon.c\t5.3 (Berkeley) 5/22/91\";\n-#endif /* not lint */\n-\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <string.h>\n-#include <limits.h>\n-#include <unistd.h>\n-#include <fcntl.h>\n+#include \"config.h\"\n+#include \"system.h\"\n \n #if 0\n #include \"sparc/gmon.h\"\n@@ -96,7 +88,9 @@ static int\ts_scale;\n \n #define\tMSG \"No space for profiling buffer(s)\\n\"\n \n-static void moncontrol();\n+static void moncontrol\tPROTO ((int));\n+extern void monstartup\tPROTO ((char *, char *));\n+extern void _mcleanup\tPROTO ((void));\n \n void monstartup(lowpc, highpc)\n     char\t*lowpc;\n@@ -185,7 +179,7 @@ _mcleanup()\n     int\t\t\ttoindex;\n     struct rawarc\trawarc;\n     char\t\t*profdir;\n-    char\t\t*proffile;\n+    const char\t\t*proffile;\n     char\t\t*progname;\n     char\t\t buf[PATH_MAX];\n     extern char\t       **___Argv;\n@@ -275,6 +269,8 @@ _mcleanup()\n  * -- [eichin:19920702.1107EST]\n  */\n \n+static void internal_mcount PROTO((char *, unsigned short *)) ATTRIBUTE_UNUSED;\n+\n /* i7 == last ret, -> frompcindex */\n /* o7 == current ret, -> selfpc */\n /* Solaris 2 libraries use _mcount.  */\n@@ -297,9 +293,9 @@ static void internal_mcount(selfpc, frompcindex)\n \t */\n \n \tif(!already_setup) {\n-          extern etext();\n+          extern char etext[];\n \t  already_setup = 1;\n-\t  monstartup(0, etext);\n+\t  monstartup(0, (char *)etext);\n #ifdef USE_ONEXIT\n \t  on_exit(_mcleanup, 0);\n #else"}, {"sha": "05affdd528974e55b011194d405b097d2e00b436", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb5de61eb6b1008cb560be1a769f316860fe930/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb5de61eb6b1008cb560be1a769f316860fe930/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=3bb5de61eb6b1008cb560be1a769f316860fe930", "patch": "@@ -98,15 +98,15 @@ char leaf_reg_remap[] =\n    this is \"%sp+something\".  We record \"something\" separately as it may be\n    too big for reg+constant addressing.  */\n \n-static char *frame_base_name;\n+static const char *frame_base_name;\n static int frame_base_offset;\n \n static rtx pic_setup_code\tPROTO((void));\n static void sparc_init_modes\tPROTO((void));\n-static int save_regs\t\tPROTO((FILE *, int, int, char *,\n+static int save_regs\t\tPROTO((FILE *, int, int, const char *,\n \t\t\t\t       int, int, int));\n-static int restore_regs\t\tPROTO((FILE *, int, int, char *, int, int));\n-static void build_big_number\tPROTO((FILE *, int, char *));\n+static int restore_regs\t\tPROTO((FILE *, int, int, const char *, int, int));\n+static void build_big_number\tPROTO((FILE *, int, const char *));\n static int function_arg_slotno\tPROTO((const CUMULATIVE_ARGS *,\n \t\t\t\t       enum machine_mode, tree, int, int,\n \t\t\t\t       int *, int *));\n@@ -127,14 +127,14 @@ extern char *dwarf2out_cfi_label ();\n /* Option handling.  */\n \n /* Code model option as passed by user.  */\n-char *sparc_cmodel_string;\n+const char *sparc_cmodel_string;\n /* Parsed value.  */\n enum cmodel sparc_cmodel;\n \n /* Record alignment options as passed by user.  */\n-char *sparc_align_loops_string;\n-char *sparc_align_jumps_string;\n-char *sparc_align_funcs_string;\n+const char *sparc_align_loops_string;\n+const char *sparc_align_jumps_string;\n+const char *sparc_align_funcs_string;\n \n /* Parsed values, as a power of two.  */\n int sparc_align_loops;\n@@ -160,7 +160,7 @@ void\n sparc_override_options ()\n {\n   static struct code_model {\n-    char *name;\n+    const char *name;\n     int value;\n   } cmodels[] = {\n     { \"32\", CM_32 },\n@@ -174,7 +174,7 @@ sparc_override_options ()\n   /* Map TARGET_CPU_DEFAULT to value for -m{arch,tune}=.  */\n   static struct cpu_default {\n     int cpu;\n-    char *name;\n+    const char *name;\n   } cpu_default[] = {\n     /* There must be one entry here for each TARGET_CPU value.  */\n     { TARGET_CPU_sparc, \"cypress\" },\n@@ -191,7 +191,7 @@ sparc_override_options ()\n   struct cpu_default *def;\n   /* Table of values for -m{cpu,tune}=.  */\n   static struct cpu_table {\n-    char *name;\n+    const char *name;\n     enum processor_type processor;\n     int disable;\n     int enable;\n@@ -2886,7 +2886,7 @@ static int\n save_regs (file, low, high, base, offset, n_regs, real_offset)\n      FILE *file;\n      int low, high;\n-     char *base;\n+     const char *base;\n      int offset;\n      int n_regs;\n      int real_offset;\n@@ -2959,7 +2959,7 @@ static int\n restore_regs (file, low, high, base, offset, n_regs)\n      FILE *file;\n      int low, high;\n-     char *base;\n+     const char *base;\n      int offset;\n      int n_regs;\n {\n@@ -3074,7 +3074,7 @@ static void\n build_big_number (file, num, reg)\n      FILE *file;\n      int num;\n-     char *reg;\n+     const char *reg;\n {\n   if (num >= 0 || ! TARGET_ARCH64)\n     {\n@@ -3206,7 +3206,7 @@ output_function_prologue (file, size, leaf_function)\n   if (num_gfregs)\n     {\n       int offset, real_offset, n_regs;\n-      char *base;\n+      const char *base;\n \n       real_offset = -apparent_fsize;\n       offset = -apparent_fsize + frame_base_offset;\n@@ -3257,7 +3257,7 @@ output_function_epilogue (file, size, leaf_function)\n      int size ATTRIBUTE_UNUSED;\n      int leaf_function;\n {\n-  char *ret;\n+  const char *ret;\n \n   if (leaf_label)\n     {\n@@ -3287,7 +3287,7 @@ output_function_epilogue (file, size, leaf_function)\n   if (num_gfregs)\n     {\n       int offset, n_regs;\n-      char *base;\n+      const char *base;\n \n       offset = -apparent_fsize + frame_base_offset;\n       if (offset < -4096 || offset + num_gfregs * 4 > 4096 - 8 /*double*/)\n@@ -4675,7 +4675,7 @@ epilogue_renumber (where)\n \n /* Output assembler code to return from a function.  */\n \n-char *\n+const char *\n output_return (operands)\n      rtx *operands;\n {\n@@ -5876,7 +5876,7 @@ sparc_flat_output_function_prologue (file, size)\n     {\n       unsigned int reg_offset = current_frame_info.reg_offset;\n       char *fp_str = reg_names[FRAME_POINTER_REGNUM];\n-      char *t1_str = \"%g1\";\n+      const char *t1_str = \"%g1\";\n \n       /* Things get a little tricky if local variables take up more than ~4096\n \t bytes and outgoing arguments take up more than ~4096 bytes.  When that\n@@ -6055,7 +6055,7 @@ sparc_flat_output_function_epilogue (file, size)\n       unsigned int size1;\n       char *sp_str = reg_names[STACK_POINTER_REGNUM];\n       char *fp_str = reg_names[FRAME_POINTER_REGNUM];\n-      char *t1_str = \"%g1\";\n+      const char *t1_str = \"%g1\";\n \n       /* In the reload sequence, we don't need to fill the load delay\n \t slots for most of the loads, also see if we can fill the final\n@@ -6331,6 +6331,8 @@ hypersparc_adjust_cost (insn, link, dep_insn, cost)\n \t  if (dep_type == TYPE_FPCMP)\n \t    return cost - 1;\n \t  break;\n+\tdefault:\n+\t  break;\n \t}\n \tbreak;\n \n@@ -6540,7 +6542,7 @@ enum ultra_code { NONE=0, /* no insn at all\t\t\t\t*/\n \t\t  SINGLE, /* single issue instructions\t\t\t*/\n \t\t  NUM_ULTRA_CODES };\n \n-static char *ultra_code_names[NUM_ULTRA_CODES] = {\n+static const char *ultra_code_names[NUM_ULTRA_CODES] = {\n   \"NONE\", \"IEU0\", \"IEU1\", \"IEUN\", \"LSU\", \"CTI\",\n   \"FPM\", \"FPA\", \"SINGLE\" };\n "}, {"sha": "2954539d3062e0b0bd10fc7e1031c0a61eacd6d9", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb5de61eb6b1008cb560be1a769f316860fe930/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb5de61eb6b1008cb560be1a769f316860fe930/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=3bb5de61eb6b1008cb560be1a769f316860fe930", "patch": "@@ -87,7 +87,7 @@ enum cmodel {\n };\n \n /* Value of -mcmodel specified by user.  */\n-extern char *sparc_cmodel_string;\n+extern const char *sparc_cmodel_string;\n /* One of CM_FOO.  */\n extern enum cmodel sparc_cmodel;\n \n@@ -389,7 +389,7 @@ void sparc_override_options ();\n       {\t\t\t\t\t\t\t\t\t\\\n \tif (flag_pic)\t\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n-\t    char *pic_string = (flag_pic == 1) ? \"-fpic\" : \"-fPIC\";\t\\\n+\t    const char *pic_string = (flag_pic == 1) ? \"-fpic\" : \"-fPIC\";\\\n \t    warning (\"%s and profiling conflict: disabling %s\",\t\t\\\n \t\t     pic_string, pic_string);\t\t\t\t\\\n \t    flag_pic = 0;\t\t\t\t\t\t\\\n@@ -675,18 +675,18 @@ extern enum processor_type sparc_cpu;\n /* sparc_select[0] is reserved for the default cpu.  */\n struct sparc_cpu_select\n {\n-  char *string;\n-  char *name;\n+  const char *string;\n+  const char *name;\n   int set_tune_p;\n   int set_arch_p;\n };\n \n extern struct sparc_cpu_select sparc_select[];\n \n /* Variables to record values the user passes.  */\n-extern char *sparc_align_loops_string;\n-extern char *sparc_align_jumps_string;\n-extern char *sparc_align_funcs_string;\n+extern const char *sparc_align_loops_string;\n+extern const char *sparc_align_jumps_string;\n+extern const char *sparc_align_funcs_string;\n /* Parsed values as a power of two.  */\n extern int sparc_align_loops;\n extern int sparc_align_jumps;\n@@ -3400,7 +3400,7 @@ extern int sparc_splitdi_legitimate ();\n extern int sparc_absnegfloat_split_legitimate ();\n \n extern char *output_cbranch ();\n-extern char *output_return ();\n+extern const char *output_return ();\n extern char *output_v9branch ();\n \n extern void emit_v9_brxx_insn ();"}, {"sha": "c1adf93bbda1a379dc50b1bf45096a1cb4167428", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb5de61eb6b1008cb560be1a769f316860fe930/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb5de61eb6b1008cb560be1a769f316860fe930/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=3bb5de61eb6b1008cb560be1a769f316860fe930", "patch": "@@ -2285,10 +2285,10 @@\n {\n   /* Where possible, convert CONST_DOUBLE into a CONST_INT.  */\n   if (GET_CODE (operands[1]) == CONST_DOUBLE\n-#if HOST_BITS_PER_WIDE_INT != 64\n+#if HOST_BITS_PER_WIDE_INT == 32\n       && ((CONST_DOUBLE_HIGH (operands[1]) == 0\n \t   && (CONST_DOUBLE_LOW (operands[1]) & 0x80000000) == 0)\n-\t  || (CONST_DOUBLE_HIGH (operands[1]) == 0xffffffff\n+\t  || (CONST_DOUBLE_HIGH (operands[1]) == (HOST_WIDE_INT) 0xffffffff\n \t      && (CONST_DOUBLE_LOW (operands[1]) & 0x80000000) != 0))\n #endif\n       )\n@@ -7704,7 +7704,9 @@\n   \"\"\n   \"\n {\n+#if 0\n   rtx chain = operands[0];\n+#endif\n   rtx fp = operands[1];\n   rtx stack = operands[2];\n   rtx lab = operands[3];"}]}