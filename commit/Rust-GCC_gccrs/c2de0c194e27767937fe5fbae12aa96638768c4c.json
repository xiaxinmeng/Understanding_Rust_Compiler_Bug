{"sha": "c2de0c194e27767937fe5fbae12aa96638768c4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJkZTBjMTk0ZTI3NzY3OTM3ZmU1ZmJhZTEyYWE5NjYzODc2OGM0Yw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-05-27T21:24:48Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-05-27T21:24:48Z"}, "message": "re PR fortran/32088 (ICE (doesn't occur if given function standalone instead on internal))\n\nfortran/\n2007-05-27 Paul Thomas  <pault@gcc.gnu.org>\n\t   Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/32088\n\t* symbol.c (gfc_check_function_type): Copy dimensions of\n\t  result variable.\n\t* resolve.c (resolve_contained_fntype): Improve symbol output in\n \t  the error message.\n\ntestsuite/\n2007-05-27  Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/32088\n\t* gfortran.dg/func_result_3.f90: New.\n\n-- Diese und die falgenden Zeilen werden ignoriert --\n\nM    gcc/testsuite/ChangeLog\nA    gcc/testsuite/gfortran.dg/func_result_3.f90\nM    gcc/fortran/symbol.c\nM    gcc/fortran/ChangeLog\nM    gcc/fortran/resolve.c\n\nFrom-SVN: r125118", "tree": {"sha": "44d4899ece2a7f09a5f6ba1d7b653a90f7a1c394", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44d4899ece2a7f09a5f6ba1d7b653a90f7a1c394"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2de0c194e27767937fe5fbae12aa96638768c4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2de0c194e27767937fe5fbae12aa96638768c4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2de0c194e27767937fe5fbae12aa96638768c4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2de0c194e27767937fe5fbae12aa96638768c4c/comments", "author": null, "committer": null, "parents": [{"sha": "bcb2d7014243ff98890679761404ba7648c98450", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcb2d7014243ff98890679761404ba7648c98450", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcb2d7014243ff98890679761404ba7648c98450"}], "stats": {"total": 76, "additions": 61, "deletions": 15}, "files": [{"sha": "11b6e925108de548ab888d412ae9e75f3d7f0320", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2de0c194e27767937fe5fbae12aa96638768c4c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2de0c194e27767937fe5fbae12aa96638768c4c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c2de0c194e27767937fe5fbae12aa96638768c4c", "patch": "@@ -1,3 +1,12 @@\n+2007-05-27 Paul Thomas  <pault@gcc.gnu.org>\n+\t   Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/32088\n+\t* symbol.c (gfc_check_function_type): Copy dimensions of\n+\t  result variable.\n+\t* resolve.c (resolve_contained_fntype): Improve symbol output in\n+\t  the error message.\n+\n 2007-05-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/31813"}, {"sha": "6142081ec40a4c8c4b8cda0aa0680427f1a2d0bd", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2de0c194e27767937fe5fbae12aa96638768c4c/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2de0c194e27767937fe5fbae12aa96638768c4c/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=c2de0c194e27767937fe5fbae12aa96638768c4c", "patch": "@@ -289,18 +289,20 @@ resolve_contained_fntype (gfc_symbol *sym, gfc_namespace *ns)\n     return;\n \n   /* Try to find out of what the return type is.  */\n-  if (sym->result != NULL)\n-    sym = sym->result;\n-\n-  if (sym->ts.type == BT_UNKNOWN)\n+  if (sym->result->ts.type == BT_UNKNOWN)\n     {\n-      t = gfc_set_default_type (sym, 0, ns);\n+      t = gfc_set_default_type (sym->result, 0, ns);\n \n-      if (t == FAILURE && !sym->attr.untyped)\n+      if (t == FAILURE && !sym->result->attr.untyped)\n \t{\n-\t  gfc_error (\"Contained function '%s' at %L has no IMPLICIT type\",\n-\t\t     sym->name, &sym->declared_at); /* FIXME */\n-\t  sym->attr.untyped = 1;\n+\t  if (sym->result == sym)\n+\t    gfc_error (\"Contained function '%s' at %L has no IMPLICIT type\",\n+\t\t       sym->name, &sym->declared_at);\n+\t  else\n+\t    gfc_error (\"Result '%s' of contained function '%s' at %L has \"\n+\t\t       \"no IMPLICIT type\", sym->result->name, sym->name,\n+\t\t       &sym->result->declared_at);\n+\t  sym->result->attr.untyped = 1;\n \t}\n     }\n \n@@ -310,9 +312,9 @@ resolve_contained_fntype (gfc_symbol *sym, gfc_namespace *ns)\n      in external functions.  Internal function results are not on that list;\n      ergo, not permitted.  */\n \n-  if (sym->ts.type == BT_CHARACTER)\n+  if (sym->result->ts.type == BT_CHARACTER)\n     {\n-      gfc_charlen *cl = sym->ts.cl;\n+      gfc_charlen *cl = sym->result->ts.cl;\n       if (!cl || !cl->length)\n \tgfc_error (\"Character-valued internal function '%s' at %L must \"\n \t\t   \"not be assumed length\", sym->name, &sym->declared_at);"}, {"sha": "ba48e547a1cfe64114020c5cbe9a4272c5db66ad", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2de0c194e27767937fe5fbae12aa96638768c4c/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2de0c194e27767937fe5fbae12aa96638768c4c/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=c2de0c194e27767937fe5fbae12aa96638768c4c", "patch": "@@ -271,13 +271,18 @@ gfc_check_function_type (gfc_namespace *ns)\n \t\t== SUCCESS)\n \t{\n \t  if (proc->result != proc)\n-\t    proc->ts = proc->result->ts;\n+\t    {\n+\t      proc->ts = proc->result->ts;\n+\t      proc->as = gfc_copy_array_spec (proc->result->as);\n+\t      proc->attr.dimension = proc->result->attr.dimension;\n+\t      proc->attr.pointer = proc->result->attr.pointer;\n+\t      proc->attr.allocatable = proc->result->attr.allocatable;\n+\t    }\n \t}\n       else\n \t{\n-\t  gfc_error (\"unable to implicitly type the function result \"\n-\t\t     \"'%s' at %L\", proc->result->name,\n-\t\t     &proc->result->declared_at);\n+\t  gfc_error (\"Function result '%s' at %L has no IMPLICIT type\",\n+\t\t     proc->result->name, &proc->result->declared_at);\n \t  proc->result->attr.untyped = 1;\n \t}\n     }"}, {"sha": "710c62c5fdab0aedb727936ff5b4b259c5f9dd3e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2de0c194e27767937fe5fbae12aa96638768c4c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2de0c194e27767937fe5fbae12aa96638768c4c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c2de0c194e27767937fe5fbae12aa96638768c4c", "patch": "@@ -1,3 +1,8 @@\n+2007-05-27  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/32088\n+\t* gfortran.dg/func_result_3.f90: New.\n+\n 2007-05-27  Tobias Burnus  <burnus@net-b.de>\n \n \tPR middle-end/32083"}, {"sha": "d0f8c7192cd8b30ae686e8404266e9458431c6ec", "filename": "gcc/testsuite/gfortran.dg/func_result_3.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2de0c194e27767937fe5fbae12aa96638768c4c/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_result_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2de0c194e27767937fe5fbae12aa96638768c4c/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_result_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_result_3.f90?ref=c2de0c194e27767937fe5fbae12aa96638768c4c", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do compile }\n+! PR fortran/32088\n+!\n+! Test implicitly defined result variables\n+!\n+subroutine dummy\n+contains\n+  function quadric(a,b) result(c)\n+  intent(in) a,b; dimension a(0:3),b(0:3),c(0:9)\n+    c(0)=a(0)*b(0); c(1:3)=a(1:)*b(0)+a(0)*b(1:); c(4:6)=a(1:)*b(1:)\n+    c(7:9)=(/a(1)*b(2)+b(1)*a(2),a(1)*b(3)+b(1)*a(3),a(2)*b(3)+b(2)*a(3)/)\n+  end function\n+end subroutine dummy\n+\n+subroutine dummy2\n+implicit none\n+contains\n+  function quadric(a,b) result(c) ! { dg-error \"no IMPLICIT type\" }\n+  real :: a, b\n+  intent(in) a,b; dimension a(0:3),b(0:3),c(0:9)\n+    c(0)=a(0)*b(0); c(1:3)=a(1:)*b(0)+a(0)*b(1:); c(4:6)=a(1:)*b(1:)\n+    c(7:9)=(/a(1)*b(2)+b(1)*a(2),a(1)*b(3)+b(1)*a(3),a(2)*b(3)+b(2)*a(3)/)\n+  end function\n+end subroutine dummy2\n+end"}]}