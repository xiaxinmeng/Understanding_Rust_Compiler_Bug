{"sha": "300d83d9de11381aa48273d5bdacb006955aa85f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAwZDgzZDlkZTExMzgxYWE0ODI3M2Q1YmRhY2IwMDY5NTVhYTg1Zg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-03-31T22:37:14Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-03-31T22:37:14Z"}, "message": "opts.h (cl_option): Add comments to fields.\n\n\t* opts.h (cl_option): Add comments to fields.  Add bit-fields for\n\tvarious flags.\n\t(CL_SEPARATE_NARGS_SHIFT, CL_SEPARATE_NARGS_MASK,\n\tCL_SEPARATE_ALIAS, CL_NO_DRIVER_ARG, CL_REJECT_DRIVER, CL_SAVE,\n\tCL_DISABLED, CL_REPOR, CL_REJECT_NEGATIVE, CL_MISSING_OK,\n\tCL_UINTEGER, CL_NEGATIVE_ALIAS): Remove.\n\t(CL_JOINED, CL_SEPARATE, CL_UNDOCUMENTED): Update bit positions.\n\t* opt-functions.awk (flag_init, switch_bit_fields): New.\n\t(switch_flags): Don't handle flags moved to bit-fields.  Don't\n\tgenerate CL_MISSING_OK or CL_SAVE.\n\t* optc-gen.awk: Update to generate bit-field output as well as\n\tflags field.\n\t* gcc.c (driver_wrong_lang_callback): Use cl_reject_driver\n\tbit-field instead of CL_REJECT_DRIVER flag.\n\t* opts-common.c (generate_canonical_option,\n\tdecode_cmdline_option): Use bit-fields instead of CL_* flags.\n\t* opts.c (maybe_default_option): Use cl_reject_negative bit-field\n\tinstead of CL_REJECT_NEGATIVE flag.\n\t* toplev.c (print_switch_values): Use cl_report bit-field instead\n\tof CL_REPORT flag.\n\nFrom-SVN: r171804", "tree": {"sha": "329a018906d50347a718b59278baff52475262ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/329a018906d50347a718b59278baff52475262ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/300d83d9de11381aa48273d5bdacb006955aa85f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/300d83d9de11381aa48273d5bdacb006955aa85f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/300d83d9de11381aa48273d5bdacb006955aa85f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/300d83d9de11381aa48273d5bdacb006955aa85f/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bce572db2a654c9f17bb798b8469df11d3147e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bce572db2a654c9f17bb798b8469df11d3147e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bce572db2a654c9f17bb798b8469df11d3147e3"}], "stats": {"total": 193, "additions": 133, "deletions": 60}, "files": [{"sha": "b293750ee09dd20953be6fe6951340c78a0ccacd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300d83d9de11381aa48273d5bdacb006955aa85f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300d83d9de11381aa48273d5bdacb006955aa85f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=300d83d9de11381aa48273d5bdacb006955aa85f", "patch": "@@ -1,3 +1,26 @@\n+2011-03-31  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* opts.h (cl_option): Add comments to fields.  Add bit-fields for\n+\tvarious flags.\n+\t(CL_SEPARATE_NARGS_SHIFT, CL_SEPARATE_NARGS_MASK,\n+\tCL_SEPARATE_ALIAS, CL_NO_DRIVER_ARG, CL_REJECT_DRIVER, CL_SAVE,\n+\tCL_DISABLED, CL_REPOR, CL_REJECT_NEGATIVE, CL_MISSING_OK,\n+\tCL_UINTEGER, CL_NEGATIVE_ALIAS): Remove.\n+\t(CL_JOINED, CL_SEPARATE, CL_UNDOCUMENTED): Update bit positions.\n+\t* opt-functions.awk (flag_init, switch_bit_fields): New.\n+\t(switch_flags): Don't handle flags moved to bit-fields.  Don't\n+\tgenerate CL_MISSING_OK or CL_SAVE.\n+\t* optc-gen.awk: Update to generate bit-field output as well as\n+\tflags field.\n+\t* gcc.c (driver_wrong_lang_callback): Use cl_reject_driver\n+\tbit-field instead of CL_REJECT_DRIVER flag.\n+\t* opts-common.c (generate_canonical_option,\n+\tdecode_cmdline_option): Use bit-fields instead of CL_* flags.\n+\t* opts.c (maybe_default_option): Use cl_reject_negative bit-field\n+\tinstead of CL_REJECT_NEGATIVE flag.\n+\t* toplev.c (print_switch_values): Use cl_report bit-field instead\n+\tof CL_REPORT flag.\n+\n 2011-03-31  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-ssa-pre.c (create_component_ref_by_pieces_1) <ARRAY_REF>: Drop"}, {"sha": "7ad959aa8da79d867db9d9641ff94dc668120d7d", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300d83d9de11381aa48273d5bdacb006955aa85f/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300d83d9de11381aa48273d5bdacb006955aa85f/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=300d83d9de11381aa48273d5bdacb006955aa85f", "patch": "@@ -3115,7 +3115,7 @@ driver_wrong_lang_callback (const struct cl_decoded_option *decoded,\n      options.  */\n   const struct cl_option *option = &cl_options[decoded->opt_index];\n \n-  if (option->flags & CL_REJECT_DRIVER)\n+  if (option->cl_reject_driver)\n     error (\"unrecognized command line option %qs\",\n \t   decoded->orig_option_with_args_text);\n   else"}, {"sha": "19bdf3afb06873cced64cae7b1089e1cc6741ae9", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 36, "deletions": 15, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300d83d9de11381aa48273d5bdacb006955aa85f/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300d83d9de11381aa48273d5bdacb006955aa85f/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=300d83d9de11381aa48273d5bdacb006955aa85f", "patch": "@@ -42,6 +42,16 @@ function test_flag(regex, flags, string)\n \treturn \"\"\n }\n \n+# Return a field initializer, with trailing comma, for a field that is\n+# 1 if FLAGS contains a flag matching REGEX and 0 otherwise.\n+function flag_init(regex, flags)\n+{\n+\tif (flag_set_p(regex, flags))\n+\t\treturn \"1 /* \" regex \" */, \"\n+\telse\n+\t\treturn \"0, \"\n+}\n+\n # If FLAGS contains a \"NAME(...argument...)\" flag, return the value\n # of the argument.  Return the empty string otherwise.\n function opt_args(name, flags)\n@@ -87,27 +97,38 @@ function switch_flags (flags)\n \t  test_flag(\"Common\", flags, \" | CL_COMMON\") \\\n \t  test_flag(\"Target\", flags, \" | CL_TARGET\") \\\n \t  test_flag(\"Driver\", flags, \" | CL_DRIVER\") \\\n-\t  test_flag(\"RejectDriver\", flags, \" | CL_REJECT_DRIVER\") \\\n-\t  test_flag(\"NoDriverArg\", flags, \" | CL_NO_DRIVER_ARG\") \\\n-\t  test_flag(\"SeparateAlias\", flags, \" | CL_SEPARATE_ALIAS\") \\\n-\t  test_flag(\"NegativeAlias\", flags, \" | CL_NEGATIVE_ALIAS\") \\\n-\t  test_flag(\"Save\", flags, \" | CL_SAVE\") \\\n \t  test_flag(\"Joined\", flags, \" | CL_JOINED\") \\\n-\t  test_flag(\"JoinedOrMissing\", flags, \" | CL_JOINED | CL_MISSING_OK\") \\\n+\t  test_flag(\"JoinedOrMissing\", flags, \" | CL_JOINED\") \\\n \t  test_flag(\"Separate\", flags, \" | CL_SEPARATE\") \\\n-\t  test_flag(\"RejectNegative\", flags, \" | CL_REJECT_NEGATIVE\") \\\n-\t  test_flag(\"UInteger\", flags, \" | CL_UINTEGER\") \\\n \t  test_flag(\"Undocumented\", flags,  \" | CL_UNDOCUMENTED\") \\\n \t  test_flag(\"Warning\", flags,  \" | CL_WARNING\") \\\n-\t  test_flag(\"Optimization\", flags,  \" | CL_OPTIMIZATION\") \\\n-\t  test_flag(\"Report\", flags, \" | CL_REPORT\")\n+\t  test_flag(\"Optimization\", flags,  \" | CL_OPTIMIZATION\")\n+\tsub( \"^0 \\\\| \", \"\", result )\n+\treturn result\n+}\n+\n+# Return bit-field initializers for option flags FLAGS.\n+function switch_bit_fields (flags)\n+{\n+\tresult = \"\"\n \tsep_args = opt_args(\"Args\", flags)\n-\tif (sep_args != \"\") {\n+\tif (sep_args == \"\")\n+\t\tsep_args = 0\n+\telse\n \t\tsep_args--\n-\t\tresult = result \" | (\" sep_args \\\n-\t\t    \" << CL_SEPARATE_NARGS_SHIFT)\"\n-\t}\n-\tsub( \"^0 \\\\| \", \"\", result )\n+\tresult = result sep_args \", \"\n+\n+\tresult = result \\\n+\t  flag_init(\"SeparateAlias\", flags) \\\n+\t  flag_init(\"NegativeAlias\", flags) \\\n+\t  flag_init(\"NoDriverArg\", flags) \\\n+\t  flag_init(\"RejectDriver\", flags) \\\n+\t  flag_init(\"RejectNegative\", flags) \\\n+\t  flag_init(\"JoinedOrMissing\", flags) \\\n+\t  flag_init(\"UInteger\", flags) \\\n+\t  flag_init(\"Report\", flags)\n+\n+\tsub(\", $\", \"\", result)\n \treturn result\n }\n "}, {"sha": "a821c648d37d8fee336ebe043d7dd405e77c729a", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300d83d9de11381aa48273d5bdacb006955aa85f/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300d83d9de11381aa48273d5bdacb006955aa85f/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=300d83d9de11381aa48273d5bdacb006955aa85f", "patch": "@@ -401,15 +401,21 @@ for (i = 0; i < n_opts; i++) {\n \tprintf(\" %d,\\n\", idx)\n \tcondition = opt_args(\"Condition\", flags[i])\n \tcl_flags = switch_flags(flags[i])\n+\tcl_bit_fields = switch_bit_fields(flags[i])\n+\tcl_zero_bit_fields = switch_bit_fields(\"\")\n \tif (condition != \"\")\n \t\tprintf(\"#if %s\\n\" \\\n \t\t       \"    %s,\\n\" \\\n+\t\t       \"    0, %s,\\n\" \\\n \t\t       \"#else\\n\" \\\n-\t\t       \"    CL_DISABLED,\\n\" \\\n+\t\t       \"    0,\\n\" \\\n+\t\t       \"    1 /* Disabled.  */, %s,\\n\" \\\n \t\t       \"#endif\\n\",\n-\t\t       condition, cl_flags, cl_flags)\n+\t\t       condition, cl_flags, cl_bit_fields, cl_zero_bit_fields)\n \telse\n-\t\tprintf(\"    %s,\\n\", cl_flags)\n+\t\tprintf(\"    %s,\\n\" \\\n+\t\t       \"    0, %s,\\n\",\n+\t\t       cl_flags, cl_bit_fields)\n \tprintf(\"    %s, %s }%s\\n\", var_ref(opts[i], flags[i]),\n \t       var_set(flags[i]), comma)\n }"}, {"sha": "f54d64aff2810e77dad3796c3a6f3b1e4690b190", "filename": "gcc/opts-common.c", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300d83d9de11381aa48273d5bdacb006955aa85f/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300d83d9de11381aa48273d5bdacb006955aa85f/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=300d83d9de11381aa48273d5bdacb006955aa85f", "patch": "@@ -257,7 +257,7 @@ generate_canonical_option (size_t opt_index, const char *arg, int value,\n   const char *opt_text = option->opt_text;\n \n   if (value == 0\n-      && !(option->flags & CL_REJECT_NEGATIVE)\n+      && !option->cl_reject_negative\n       && (opt_text[1] == 'W' || opt_text[1] == 'f' || opt_text[1] == 'm'))\n     {\n       char *t = XNEWVEC (char, option->opt_len + 5);\n@@ -276,7 +276,7 @@ generate_canonical_option (size_t opt_index, const char *arg, int value,\n   if (arg)\n     {\n       if ((option->flags & CL_SEPARATE)\n-\t  && !(option->flags & CL_SEPARATE_ALIAS))\n+\t  && !option->cl_separate_alias)\n \t{\n \t  decoded->canonical_option[0] = opt_text;\n \t  decoded->canonical_option[1] = arg;\n@@ -412,7 +412,7 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n \n   /* Reject negative form of switches that don't take negatives as\n      unrecognized.  */\n-  if (!value && (option->flags & CL_REJECT_NEGATIVE))\n+  if (!value && option->cl_reject_negative)\n     {\n       opt_index = OPT_SPECIAL_unknown;\n       errors |= CL_ERR_NEGATIVE;\n@@ -424,18 +424,17 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n   warn_message = option->warn_message;\n \n   /* Check to see if the option is disabled for this configuration.  */\n-  if (option->flags & CL_DISABLED)\n+  if (option->cl_disabled)\n     errors |= CL_ERR_DISABLED;\n \n   /* Determine whether there may be a separate argument based on\n      whether this option is being processed for the driver, and, if\n      so, how many such arguments.  */\n   separate_arg_flag = ((option->flags & CL_SEPARATE)\n-\t\t       && !((option->flags & CL_NO_DRIVER_ARG)\n+\t\t       && !(option->cl_no_driver_arg\n \t\t\t    && (lang_mask & CL_DRIVER)));\n   separate_args = (separate_arg_flag\n-\t\t   ? ((option->flags & CL_SEPARATE_NARGS_MASK)\n-\t\t      >> CL_SEPARATE_NARGS_SHIFT) + 1\n+\t\t   ? option->cl_separate_nargs + 1\n \t\t   : 0);\n   joined_arg_flag = (option->flags & CL_JOINED) != 0;\n \n@@ -447,7 +446,7 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n \t argument to be persistent until the program exits.  */\n       arg = argv[extra_args] + cl_options[opt_index].opt_len + 1 + adjust_len;\n \n-      if (*arg == '\\0' && !(option->flags & CL_MISSING_OK))\n+      if (*arg == '\\0' && !option->cl_missing_ok)\n \t{\n \t  if (separate_arg_flag)\n \t    {\n@@ -483,7 +482,7 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n   /* Is this option an alias (or an ignored option, marked as an alias\n      of OPT_SPECIAL_ignore)?  */\n   if (option->alias_target != N_OPTS\n-      && (!(option->flags & CL_SEPARATE_ALIAS) || have_separate_arg))\n+      && (!option->cl_separate_alias || have_separate_arg))\n     {\n       size_t new_opt_index = option->alias_target;\n \n@@ -501,13 +500,13 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n \n \t  /* The new option must not be an alias itself.  */\n \t  gcc_assert (new_option->alias_target == N_OPTS\n-\t\t      || (new_option->flags & CL_SEPARATE_ALIAS));\n+\t\t      || new_option->cl_separate_alias);\n \n \t  if (option->neg_alias_arg)\n \t    {\n \t      gcc_assert (option->alias_arg != NULL);\n \t      gcc_assert (arg == NULL);\n-\t      gcc_assert (!(option->flags & CL_NEGATIVE_ALIAS));\n+\t      gcc_assert (!option->cl_negative_alias);\n \t      if (value)\n \t\targ = option->alias_arg;\n \t      else\n@@ -518,35 +517,34 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n \t    {\n \t      gcc_assert (value == 1);\n \t      gcc_assert (arg == NULL);\n-\t      gcc_assert (!(option->flags & CL_NEGATIVE_ALIAS));\n+\t      gcc_assert (!option->cl_negative_alias);\n \t      arg = option->alias_arg;\n \t    }\n \n-\t  if (option->flags & CL_NEGATIVE_ALIAS)\n+\t  if (option->cl_negative_alias)\n \t    value = !value;\n \n \t  opt_index = new_opt_index;\n \t  option = new_option;\n \n \t  if (value == 0)\n-\t    gcc_assert (!(option->flags & CL_REJECT_NEGATIVE));\n+\t    gcc_assert (!option->cl_reject_negative);\n \n \t  /* Recompute what arguments are allowed.  */\n \t  separate_arg_flag = ((option->flags & CL_SEPARATE)\n-\t\t\t       && !((option->flags & CL_NO_DRIVER_ARG)\n+\t\t\t       && !(option->cl_no_driver_arg\n \t\t\t\t    && (lang_mask & CL_DRIVER)));\n \t  joined_arg_flag = (option->flags & CL_JOINED) != 0;\n \n-\t  if (separate_args > 1 || (option->flags & CL_SEPARATE_NARGS_MASK))\n+\t  if (separate_args > 1 || option->cl_separate_nargs)\n \t    gcc_assert (separate_args\n-\t\t\t== ((option->flags & CL_SEPARATE_NARGS_MASK)\n-\t\t\t    >> CL_SEPARATE_NARGS_SHIFT) + 1);\n+\t\t\t== (unsigned int) option->cl_separate_nargs + 1);\n \n \t  if (!(errors & CL_ERR_MISSING_ARG))\n \t    {\n \t      if (separate_arg_flag || joined_arg_flag)\n \t\t{\n-\t\t  if ((option->flags & CL_MISSING_OK) && arg == NULL)\n+\t\t  if (option->cl_missing_ok && arg == NULL)\n \t\t    arg = \"\";\n \t\t  gcc_assert (arg != NULL);\n \t\t}\n@@ -560,7 +558,7 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n \t      gcc_assert (warn_message == NULL);\n \t      warn_message = option->warn_message;\n \t    }\n-\t  if (option->flags & CL_DISABLED)\n+\t  if (option->cl_disabled)\n \t    errors |= CL_ERR_DISABLED;\n \t}\n     }\n@@ -570,7 +568,7 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n     errors |= CL_ERR_WRONG_LANG;\n \n   /* If the switch takes an integer, convert it.  */\n-  if (arg && (option->flags & CL_UINTEGER))\n+  if (arg && option->cl_uinteger)\n     {\n       value = integral_argument (arg);\n       if (value == -1)"}, {"sha": "cd581f6ce6926c424e4e10e37c8705e0076895f0", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300d83d9de11381aa48273d5bdacb006955aa85f/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300d83d9de11381aa48273d5bdacb006955aa85f/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=300d83d9de11381aa48273d5bdacb006955aa85f", "patch": "@@ -382,7 +382,7 @@ maybe_default_option (struct gcc_options *opts,\n \t\t\t     lang_mask, DK_UNSPECIFIED, loc,\n \t\t\t     handlers, dc);\n   else if (default_opt->arg == NULL\n-\t   && !(option->flags & CL_REJECT_NEGATIVE))\n+\t   && !option->cl_reject_negative)\n     handle_generated_option (opts, opts_set, default_opt->opt_index,\n \t\t\t     default_opt->arg, !default_opt->value,\n \t\t\t     lang_mask, DK_UNSPECIFIED, loc,"}, {"sha": "15e717da0d945d79ea6816821906da61ec6e38af", "filename": "gcc/opts.h", "status": "modified", "additions": 43, "deletions": 18, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300d83d9de11381aa48273d5bdacb006955aa85f/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300d83d9de11381aa48273d5bdacb006955aa85f/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=300d83d9de11381aa48273d5bdacb006955aa85f", "patch": "@@ -53,20 +53,60 @@ enum cl_var_type {\n \n struct cl_option\n {\n+  /* Text of the option, including initial '-'.  */\n   const char *opt_text;\n+  /* Help text for --help, or NULL.  */\n   const char *help;\n+  /* Error message for missing argument, or NULL.  */\n   const char *missing_argument_error;\n+  /* Warning to give when this option is used, or NULL.  */\n   const char *warn_message;\n+  /* Argument of alias target when positive option given, or NULL.  */\n   const char *alias_arg;\n+  /* Argument of alias target when negative option given, or NULL.  */\n   const char *neg_alias_arg;\n+  /* Alias target, or N_OPTS if not an alias.  */\n   unsigned short alias_target;\n+  /* Previous option that is an initial substring of this one, or\n+     N_OPTS if none.  */\n   unsigned short back_chain;\n+  /* Option length, not including initial '-'.  */\n   unsigned char opt_len;\n+  /* Next option in a sequence marked with Negative, or -1 if none.  */\n   int neg_index;\n+  /* CL_* flags for this option.  */\n   unsigned int flags;\n+  /* Disabled in this configuration.  */\n+  BOOL_BITFIELD cl_disabled : 1;\n+  /* Options marked with CL_SEPARATE take a number of separate\n+     arguments (1 to 4) that is one more than the number in this\n+     bit-field.  */\n+  unsigned int cl_separate_nargs : 2;\n+  /* Option is an alias when used with separate argument.  */\n+  BOOL_BITFIELD cl_separate_alias : 1;\n+  /* Alias to negative form of option.  */\n+  BOOL_BITFIELD cl_negative_alias : 1;\n+  /* Option takes no argument in the driver.  */\n+  BOOL_BITFIELD cl_no_driver_arg : 1;\n+  /* Reject this option in the driver.  */\n+  BOOL_BITFIELD cl_reject_driver : 1;\n+  /* Reject no- form.  */\n+  BOOL_BITFIELD cl_reject_negative : 1;\n+  /* Missing argument OK (joined).  */\n+  BOOL_BITFIELD cl_missing_ok : 1;\n+  /* Argument is an integer >=0.  */\n+  BOOL_BITFIELD cl_uinteger : 1;\n+  /* Report argument with -fverbose-asm  */\n+  BOOL_BITFIELD cl_report : 1;\n+  /* Offset of field for this option in struct gcc_options, or\n+     (unsigned short) -1 if none.  */\n   unsigned short flag_var_offset;\n+  /* Index in cl_enums of enum used for this option's arguments, for\n+     CLVC_ENUM options.  */\n   unsigned short var_enum;\n+  /* How this option's value is determined and sets a field.  */\n   enum cl_var_type var_type;\n+  /* Value or bit-mask with which to set a field.  */\n   int var_value;\n };\n \n@@ -98,24 +138,9 @@ extern const unsigned int cl_lang_count;\n    This distinction is important because --help will not list options\n    which only have these higher bits set.  */\n \n-/* Options marked with CL_SEPARATE take a number of separate arguments\n-   (1 to 4) that is one more than the number in this bit-field.  */\n-#define CL_SEPARATE_NARGS_SHIFT\t17\n-#define CL_SEPARATE_NARGS_MASK\t(3U << CL_SEPARATE_NARGS_SHIFT)\n-\n-#define CL_SEPARATE_ALIAS\t(1U << 19) /* Option is an alias when used with separate argument.  */\n-#define CL_NO_DRIVER_ARG\t(1U << 20) /* Option takes no argument in the driver.  */\n-#define CL_REJECT_DRIVER\t(1U << 21) /* Reject this option in the driver.  */\n-#define CL_SAVE\t\t\t(1U << 22) /* Target-specific option for attribute.  */\n-#define CL_DISABLED\t\t(1U << 23) /* Disabled in this configuration.  */\n-#define CL_REPORT\t\t(1U << 24) /* Report argument with -fverbose-asm  */\n-#define CL_JOINED\t\t(1U << 25) /* If takes joined argument.  */\n-#define CL_SEPARATE\t\t(1U << 26) /* If takes a separate argument.  */\n-#define CL_REJECT_NEGATIVE\t(1U << 27) /* Reject no- form.  */\n-#define CL_MISSING_OK\t\t(1U << 28) /* Missing argument OK (joined).  */\n-#define CL_UINTEGER\t\t(1U << 29) /* Argument is an integer >=0.  */\n-#define CL_UNDOCUMENTED\t\t(1U << 30) /* Do not output with --help.  */\n-#define CL_NEGATIVE_ALIAS\t(1U << 31) /* Alias to negative form of option.  */\n+#define CL_JOINED\t\t(1U << 17) /* If takes joined argument.  */\n+#define CL_SEPARATE\t\t(1U << 18) /* If takes a separate argument.  */\n+#define CL_UNDOCUMENTED\t\t(1U << 19) /* Do not output with --help.  */\n \n /* Flags for an enumerated option argument.  */\n #define CL_ENUM_CANONICAL\t(1 << 0) /* Canonical for this value.  */"}, {"sha": "3b154a6255ed06f0e90c4c03068143c6308250b0", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300d83d9de11381aa48273d5bdacb006955aa85f/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300d83d9de11381aa48273d5bdacb006955aa85f/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=300d83d9de11381aa48273d5bdacb006955aa85f", "patch": "@@ -891,7 +891,7 @@ print_switch_values (print_switch_fn_type print_fn)\n \t\t\t     SWITCH_TYPE_DESCRIPTIVE, _(\"options enabled: \"));\n \n   for (j = 0; j < cl_options_count; j++)\n-    if ((cl_options[j].flags & CL_REPORT)\n+    if (cl_options[j].cl_report\n \t&& option_enabled (j, &global_options) > 0)\n       pos = print_single_switch (print_fn, pos,\n \t\t\t\t SWITCH_TYPE_ENABLED, cl_options[j].opt_text);"}]}