{"sha": "6715d47bba944ef7b268ef54fde1c918013f480b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcxNWQ0N2JiYTk0NGVmN2IyNjhlZjU0ZmRlMWM5MTgwMTNmNDgwYg==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2012-03-15T20:27:07Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2012-03-15T20:27:07Z"}, "message": "Enable BUILT_IN_IROUND.\n\n2012-03-15  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\t* f95-lang.c (gfc_init_builtin_functions): Initialize\n\tBUILT_IN_IROUND.\n\t* mathbuiltins.def: Add IROUND.\n\t* trans-intrinsic.c (build_round_expr): Use BUILT_IN_IROUND if\n\ttype size matches.\n\t(gfc_build_intrinsic_lib_fndecls): Build iround functions.\n\nFrom-SVN: r185442", "tree": {"sha": "9579173dd828b7321d6ff0bd81d503222d4a0b19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9579173dd828b7321d6ff0bd81d503222d4a0b19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6715d47bba944ef7b268ef54fde1c918013f480b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6715d47bba944ef7b268ef54fde1c918013f480b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6715d47bba944ef7b268ef54fde1c918013f480b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6715d47bba944ef7b268ef54fde1c918013f480b/comments", "author": null, "committer": null, "parents": [{"sha": "28eccf2d94aa9a1e3c11db6f7ebcbaf8968718b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28eccf2d94aa9a1e3c11db6f7ebcbaf8968718b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28eccf2d94aa9a1e3c11db6f7ebcbaf8968718b6"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "a03df3aed00f5036284a62e7e3695d7f4f80e434", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6715d47bba944ef7b268ef54fde1c918013f480b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6715d47bba944ef7b268ef54fde1c918013f480b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6715d47bba944ef7b268ef54fde1c918013f480b", "patch": "@@ -1,3 +1,12 @@\n+2012-03-15  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* f95-lang.c (gfc_init_builtin_functions): Initialize\n+\tBUILT_IN_IROUND.\n+\t* mathbuiltins.def: Add IROUND.\n+\t* trans-intrinsic.c (build_round_expr): Use BUILT_IN_IROUND if\n+\ttype size matches.\n+\t(gfc_build_intrinsic_lib_fndecls): Build iround functions.\n+\n 2012-03-12  Richard Guenther  <rguenther@suse.de>\n \n \t* f95-lang.c (builtin_type_for_size): Use gfc_type_for_size."}, {"sha": "3f28e67759f0663f5f1b12158ae9f164aae012dd", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6715d47bba944ef7b268ef54fde1c918013f480b/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6715d47bba944ef7b268ef54fde1c918013f480b/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=6715d47bba944ef7b268ef54fde1c918013f480b", "patch": "@@ -773,7 +773,11 @@ gfc_init_builtin_functions (void)\n   gfc_define_builtin (\"__builtin_fmodf\", mfunc_float[1], \n \t\t      BUILT_IN_FMODF, \"fmodf\", ATTR_CONST_NOTHROW_LEAF_LIST);\n \n-  /* lround{f,,l} and llround{f,,l} */\n+  /* iround{f,,l}, lround{f,,l} and llround{f,,l} */\n+  ftype = build_function_type_list (integer_type_node,\n+                                    float_type_node, NULL_TREE); \n+  gfc_define_builtin(\"__builtin_iroundf\", ftype, BUILT_IN_IROUNDF,\n+\t\t     \"iroundf\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   ftype = build_function_type_list (long_integer_type_node,\n                                     float_type_node, NULL_TREE); \n   gfc_define_builtin (\"__builtin_lroundf\", ftype, BUILT_IN_LROUNDF,\n@@ -783,6 +787,10 @@ gfc_init_builtin_functions (void)\n   gfc_define_builtin (\"__builtin_llroundf\", ftype, BUILT_IN_LLROUNDF,\n \t\t      \"llroundf\", ATTR_CONST_NOTHROW_LEAF_LIST);\n \n+  ftype = build_function_type_list (integer_type_node,\n+                                    double_type_node, NULL_TREE); \n+  gfc_define_builtin(\"__builtin_iround\", ftype, BUILT_IN_IROUND,\n+\t\t     \"iround\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   ftype = build_function_type_list (long_integer_type_node,\n                                     double_type_node, NULL_TREE); \n   gfc_define_builtin (\"__builtin_lround\", ftype, BUILT_IN_LROUND,\n@@ -792,6 +800,10 @@ gfc_init_builtin_functions (void)\n   gfc_define_builtin (\"__builtin_llround\", ftype, BUILT_IN_LLROUND,\n \t\t      \"llround\", ATTR_CONST_NOTHROW_LEAF_LIST);\n \n+  ftype = build_function_type_list (integer_type_node,\n+                                    long_double_type_node, NULL_TREE); \n+  gfc_define_builtin(\"__builtin_iroundl\", ftype, BUILT_IN_IROUNDL,\n+\t\t     \"iroundl\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   ftype = build_function_type_list (long_integer_type_node,\n                                     long_double_type_node, NULL_TREE); \n   gfc_define_builtin (\"__builtin_lroundl\", ftype, BUILT_IN_LROUNDL,"}, {"sha": "b3998568b5f4804155a1da92dda7417cb6807a94", "filename": "gcc/fortran/mathbuiltins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6715d47bba944ef7b268ef54fde1c918013f480b/gcc%2Ffortran%2Fmathbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6715d47bba944ef7b268ef54fde1c918013f480b/gcc%2Ffortran%2Fmathbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmathbuiltins.def?ref=6715d47bba944ef7b268ef54fde1c918013f480b", "patch": "@@ -64,6 +64,7 @@ OTHER_BUILTIN (FMOD,      \"fmod\",      2,       true)\n OTHER_BUILTIN (FREXP,     \"frexp\",     frexp,   false)\n OTHER_BUILTIN (LLROUND,   \"llround\",   llround, true)\n OTHER_BUILTIN (LROUND,    \"lround\",    lround,  true)\n+OTHER_BUILTIN (IROUND,    \"iround\",    iround,  true)\n OTHER_BUILTIN (NEXTAFTER, \"nextafter\", 2,       true)\n OTHER_BUILTIN (POW,       \"pow\",       1,       true)\n OTHER_BUILTIN (ROUND,     \"round\",     1,       true)"}, {"sha": "5e54d8e019e0bbe687912ec88bafe7a047e11448", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6715d47bba944ef7b268ef54fde1c918013f480b/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6715d47bba944ef7b268ef54fde1c918013f480b/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=6715d47bba944ef7b268ef54fde1c918013f480b", "patch": "@@ -376,28 +376,24 @@ build_round_expr (tree arg, tree restype)\n {\n   tree argtype;\n   tree fn;\n-  bool longlong;\n   int argprec, resprec;\n \n   argtype = TREE_TYPE (arg);\n   argprec = TYPE_PRECISION (argtype);\n   resprec = TYPE_PRECISION (restype);\n \n-  /* Depending on the type of the result, choose the long int intrinsic\n-     (lround family) or long long intrinsic (llround).  We might also\n-     need to convert the result afterwards.  */\n-  if (resprec <= LONG_TYPE_SIZE)\n-    longlong = false;\n+  /* Depending on the type of the result, choose the int intrinsic\n+     (iround, available only as a builtin), long int intrinsic (lround\n+     family) or long long intrinsic (llround).  We might also need to\n+     convert the result afterwards.  */\n+  if (resprec <= INT_TYPE_SIZE)\n+    fn = builtin_decl_for_precision (BUILT_IN_IROUND, argprec);\n+  else if (resprec <= LONG_TYPE_SIZE)\n+    fn = builtin_decl_for_precision (BUILT_IN_LROUND, argprec);\n   else if (resprec <= LONG_LONG_TYPE_SIZE)\n-    longlong = true;\n-  else\n-    gcc_unreachable ();\n-\n-  /* Now, depending on the argument type, we choose between intrinsics.  */\n-  if (longlong)\n     fn = builtin_decl_for_precision (BUILT_IN_LLROUND, argprec);\n   else\n-    fn = builtin_decl_for_precision (BUILT_IN_LROUND, argprec);\n+    gcc_unreachable ();\n \n   return fold_convert (restype, build_call_expr_loc (input_location,\n \t\t\t\t\t\t fn, 1, arg));\n@@ -623,14 +619,17 @@ gfc_build_intrinsic_lib_fndecls (void)\n        q-suffixed functions.  */\n \n     tree type, complex_type, func_1, func_2, func_cabs, func_frexp;\n-    tree func_lround, func_llround, func_scalbn, func_cpow;\n+    tree func_iround, func_lround, func_llround, func_scalbn, func_cpow;\n \n     memset (quad_decls, 0, sizeof(tree) * (END_BUILTINS + 1));\n \n     type = float128_type_node;\n     complex_type = complex_float128_type_node;\n     /* type (*) (type) */\n     func_1 = build_function_type_list (type, type, NULL_TREE);\n+    /* int (*) (type) */\n+    func_iround = build_function_type_list (integer_type_node,\n+\t\t\t\t\t    type, NULL_TREE);\n     /* long (*) (type) */\n     func_lround = build_function_type_list (long_integer_type_node,\n \t\t\t\t\t    type, NULL_TREE);"}]}