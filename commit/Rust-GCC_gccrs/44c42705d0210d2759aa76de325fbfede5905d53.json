{"sha": "44c42705d0210d2759aa76de325fbfede5905d53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRjNDI3MDVkMDIxMGQyNzU5YWE3NmRlMzI1ZmJmZWRlNTkwNWQ1Mw==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2015-06-12T05:59:31Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2015-06-12T05:59:31Z"}, "message": "lto-lang.c (lto_type_for_size): Include intN types.\n\n* lto-lang.c (lto_type_for_size): Include intN types.\n(lto_type_for_mode): Likewise.\n\nFrom-SVN: r224408", "tree": {"sha": "6d2d376897e616c704b816e61e2d7c8868c884cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d2d376897e616c704b816e61e2d7c8868c884cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44c42705d0210d2759aa76de325fbfede5905d53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44c42705d0210d2759aa76de325fbfede5905d53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44c42705d0210d2759aa76de325fbfede5905d53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44c42705d0210d2759aa76de325fbfede5905d53/comments", "author": null, "committer": null, "parents": [{"sha": "1b92614483f4393a90e4359c5b0365eb9d366927", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b92614483f4393a90e4359c5b0365eb9d366927", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b92614483f4393a90e4359c5b0365eb9d366927"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "9665bf096b28c4adb0015bb96f788e0bd0d957a8", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c42705d0210d2759aa76de325fbfede5905d53/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c42705d0210d2759aa76de325fbfede5905d53/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=44c42705d0210d2759aa76de325fbfede5905d53", "patch": "@@ -1,3 +1,8 @@\n+2015-06-12  DJ Delorie  <dj@redhat.com>\n+\n+\t* lto-lang.c (lto_type_for_size): Include intN types.\n+\t(lto_type_for_mode): Likewise.\n+\n 2015-06-08  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* lto.c (hash_canonical_type): Drop hashing of TYPE_STRING_FLAG."}, {"sha": "349abef5b86a678f9e98ad2879eb54f80920c5a9", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c42705d0210d2759aa76de325fbfede5905d53/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c42705d0210d2759aa76de325fbfede5905d53/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=44c42705d0210d2759aa76de325fbfede5905d53", "patch": "@@ -830,6 +830,8 @@ lto_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n static tree\n lto_type_for_size (unsigned precision, int unsignedp)\n {\n+  int i;\n+\n   if (precision == TYPE_PRECISION (integer_type_node))\n     return unsignedp ? unsigned_type_node : integer_type_node;\n \n@@ -847,6 +849,12 @@ lto_type_for_size (unsigned precision, int unsignedp)\n \t   ? long_long_unsigned_type_node\n \t   : long_long_integer_type_node;\n \n+  for (i = 0; i < NUM_INT_N_ENTS; i ++)\n+    if (int_n_enabled_p[i]\n+\t&& precision == int_n_data[i].bitsize)\n+      return (unsignedp ? int_n_trees[i].unsigned_type\n+\t      : int_n_trees[i].signed_type);\n+\n   if (precision <= TYPE_PRECISION (intQI_type_node))\n     return unsignedp ? unsigned_intQI_type_node : intQI_type_node;\n \n@@ -876,6 +884,7 @@ static tree\n lto_type_for_mode (machine_mode mode, int unsigned_p)\n {\n   tree t;\n+  int i;\n \n   if (mode == TYPE_MODE (integer_type_node))\n     return unsigned_p ? unsigned_type_node : integer_type_node;\n@@ -892,6 +901,12 @@ lto_type_for_mode (machine_mode mode, int unsigned_p)\n   if (mode == TYPE_MODE (long_long_integer_type_node))\n     return unsigned_p ? long_long_unsigned_type_node : long_long_integer_type_node;\n \n+  for (i = 0; i < NUM_INT_N_ENTS; i ++)\n+    if (int_n_enabled_p[i]\n+\t&& mode == int_n_data[i].m)\n+      return (unsigned_p ? int_n_trees[i].unsigned_type\n+\t      : int_n_trees[i].signed_type);\n+\n   if (mode == QImode)\n     return unsigned_p ? unsigned_intQI_type_node : intQI_type_node;\n "}]}