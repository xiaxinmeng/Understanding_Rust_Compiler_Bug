{"sha": "8bc700f4c3fbe405413db02281ef2918bfa831fc", "node_id": "C_kwDOANBUbNoAKDhiYzcwMGY0YzNmYmU0MDU0MTNkYjAyMjgxZWYyOTE4YmZhODMxZmM", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-01-17T02:47:46Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-01-20T08:51:10Z"}, "message": "Enhance vec_pack_trunc for integral mode mask.\n\nFor testcase in PR, the patch supports QI:4 -> HI:16 pack with\nmulti steps(first pack QI:4 -> QI:8 through vec_pack_sbool_trunc_qi,\nthen pack QI:8 -> HI:16 through vec_pack_trunc_hi).\nSimilar for QI:2 -> HI:16 which is test4 in mask-pack-prefer-128.c.\n\ngcc/ChangeLog:\n\n\tPR target/103771\n\t* tree-vect-stmts.cc (supportable_narrowing_operation): Enhance\n\tintegral mode mask pack by multi steps which takes\n\tvec_pack_sbool_trunc_optab as start when elements number is\n\tless than BITS_PER_UNITS.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/mask-pack-prefer128.c: New test.\n\t* gcc.target/i386/mask-pack-prefer256.c: New test.\n\t* gcc.target/i386/pr103771.c: New test.", "tree": {"sha": "02d82c92a7bc07f91bbf78f037849a625a26be80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02d82c92a7bc07f91bbf78f037849a625a26be80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bc700f4c3fbe405413db02281ef2918bfa831fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bc700f4c3fbe405413db02281ef2918bfa831fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bc700f4c3fbe405413db02281ef2918bfa831fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bc700f4c3fbe405413db02281ef2918bfa831fc/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad4188f8385f86cc04806fb0e26c7da1f5f655b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad4188f8385f86cc04806fb0e26c7da1f5f655b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad4188f8385f86cc04806fb0e26c7da1f5f655b8"}], "stats": {"total": 45, "additions": 41, "deletions": 4}, "files": [{"sha": "c9ea37c7ed3f8eda0e38738c5531dbc0675260be", "filename": "gcc/testsuite/gcc.target/i386/mask-pack-prefer128.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc700f4c3fbe405413db02281ef2918bfa831fc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmask-pack-prefer128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc700f4c3fbe405413db02281ef2918bfa831fc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmask-pack-prefer128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmask-pack-prefer128.c?ref=8bc700f4c3fbe405413db02281ef2918bfa831fc", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=skylake-avx512 -O3 -fopenmp-simd -fdump-tree-vect-details -mprefer-vector-width=128\" } */\n+/* Disabling epilogues until we find a better way to deal with scans.  */\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 10 \"vect\" } } */\n+/* { dg-final { scan-assembler-not \"maskmov\" } } */\n+\n+#include \"mask-pack.c\""}, {"sha": "841f51b4041840e825d22bae524eddf21add47fd", "filename": "gcc/testsuite/gcc.target/i386/mask-pack-prefer256.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc700f4c3fbe405413db02281ef2918bfa831fc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmask-pack-prefer256.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc700f4c3fbe405413db02281ef2918bfa831fc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmask-pack-prefer256.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmask-pack-prefer256.c?ref=8bc700f4c3fbe405413db02281ef2918bfa831fc", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=skylake-avx512 -O3 -fopenmp-simd -fdump-tree-vect-details -mprefer-vector-width=256\" } */\n+/* Disabling epilogues until we find a better way to deal with scans.  */\n+/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 10 \"vect\" } } */\n+/* { dg-final { scan-assembler-not \"maskmov\" } } */\n+\n+#include \"mask-pack.c\""}, {"sha": "a1a9952b6a8d6cc8aa9efd3db81363d60b4716a5", "filename": "gcc/testsuite/gcc.target/i386/pr103771.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc700f4c3fbe405413db02281ef2918bfa831fc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103771.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc700f4c3fbe405413db02281ef2918bfa831fc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103771.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103771.c?ref=8bc700f4c3fbe405413db02281ef2918bfa831fc", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=cascadelake -O3 -fdump-tree-vect-details -mprefer-vector-width=128\" } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+\n+typedef unsigned char uint8_t;\n+\n+static uint8_t x264_clip_uint8 (int x)\n+{\n+  return x & (~255) ? (-x) >> 31 : x;\n+}\n+\n+void\n+mc_weight (uint8_t* __restrict dst, uint8_t* __restrict src,\n+\t   int i_width,int i_scale)\n+{\n+  for(int x = 0; x < i_width; x++)\n+    dst[x] = x264_clip_uint8 (src[x] * i_scale);\n+}"}, {"sha": "824ebb6354b4986c4330edbbc575357ab7aa7169", "filename": "gcc/tree-vect-stmts.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc700f4c3fbe405413db02281ef2918bfa831fc/gcc%2Ftree-vect-stmts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc700f4c3fbe405413db02281ef2918bfa831fc/gcc%2Ftree-vect-stmts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.cc?ref=8bc700f4c3fbe405413db02281ef2918bfa831fc", "patch": "@@ -12124,6 +12124,7 @@ supportable_narrowing_operation (enum tree_code code,\n   tree intermediate_type, prev_type;\n   machine_mode intermediate_mode, prev_mode;\n   int i;\n+  unsigned HOST_WIDE_INT n_elts;\n   bool uns;\n \n   *multi_step_cvt = 0;\n@@ -12133,8 +12134,9 @@ supportable_narrowing_operation (enum tree_code code,\n       c1 = VEC_PACK_TRUNC_EXPR;\n       if (VECTOR_BOOLEAN_TYPE_P (narrow_vectype)\n \t  && VECTOR_BOOLEAN_TYPE_P (vectype)\n-\t  && TYPE_MODE (narrow_vectype) == TYPE_MODE (vectype)\n-\t  && SCALAR_INT_MODE_P (TYPE_MODE (vectype)))\n+\t  && SCALAR_INT_MODE_P (TYPE_MODE (vectype))\n+\t  && TYPE_VECTOR_SUBPARTS (vectype).is_constant (&n_elts)\n+\t  && n_elts < BITS_PER_UNIT)\n \toptab1 = vec_pack_sbool_trunc_optab;\n       else\n \toptab1 = optab_for_tree_code (c1, vectype, optab_default);\n@@ -12225,8 +12227,9 @@ supportable_narrowing_operation (enum tree_code code,\n \t  = lang_hooks.types.type_for_mode (intermediate_mode, uns);\n       if (VECTOR_BOOLEAN_TYPE_P (intermediate_type)\n \t  && VECTOR_BOOLEAN_TYPE_P (prev_type)\n-\t  && intermediate_mode == prev_mode\n-\t  && SCALAR_INT_MODE_P (prev_mode))\n+\t  && SCALAR_INT_MODE_P (prev_mode)\n+\t  && TYPE_VECTOR_SUBPARTS (intermediate_type).is_constant (&n_elts)\n+\t  && n_elts < BITS_PER_UNIT)\n \tinterm_optab = vec_pack_sbool_trunc_optab;\n       else\n \tinterm_optab"}]}