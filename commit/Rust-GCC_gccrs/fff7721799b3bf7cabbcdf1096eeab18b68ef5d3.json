{"sha": "fff7721799b3bf7cabbcdf1096eeab18b68ef5d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZmNzcyMTc5OWIzYmY3Y2FiYmNkZjEwOTZlZWFiMThiNjhlZjVkMw==", "commit": {"author": {"name": "Kirill Yukhin", "email": "kirill.yukhin@intel.com", "date": "2015-11-16T13:14:57Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2015-11-16T13:14:57Z"}, "message": "Add __attribute__((__simd__)) to GCC.\n\ngcc/\n\t* omp-low.c (pass_omp_simd_clone::gate): If target allows - call\n\twithout additional conditions.\n\t* doc/extend.texi (@item simd): New.\ngcc/c-family/\n\t* c-common.c (handle_simd_attribute): New.\n\t(struct attribute_spec): Add entry for \"simd\".\n\t(handle_simd_attribute): New.\ngcc/c/\n\t* c-parser.c (c_finish_omp_declare_simd): Look for\n\t\"simd\" attribute as well. Update error message.\ngcc/cp/\n\t* parser.c (cp_parser_late_parsing_cilk_simd_fn_info): Look for\n\t\"simd\" attribute as well. Update error message.\ngcc/testsuite/\n\t* c-c++-common/attr-simd.c: New test.\n\t* c-c++-common/attr-simd-2.c: New test.\n\t* c-c++-common/attr-simd-3.c: New test.\n\nFrom-SVN: r230422", "tree": {"sha": "5731243bcaf252b767216c4d28809a9959258645", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5731243bcaf252b767216c4d28809a9959258645"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/comments", "author": null, "committer": null, "parents": [{"sha": "56b08a5894fd02a502b2b40897a2aa892f70caec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b08a5894fd02a502b2b40897a2aa892f70caec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56b08a5894fd02a502b2b40897a2aa892f70caec"}], "stats": {"total": 176, "additions": 164, "deletions": 12}, "files": [{"sha": "8fb0728c49f383d1787764babe393e2729499336", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fff7721799b3bf7cabbcdf1096eeab18b68ef5d3", "patch": "@@ -1,3 +1,9 @@\n+2015-11-16  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* omp-low.c (pass_omp_simd_clone::gate): If target allows - call\n+\twithout additional conditions.\n+\t* doc/extend.texi (@item simd): New.\n+\n 2015-11-16  Tom de Vries  <tom@codesourcery.com>\n \n \t* passes.c (first_pass_instance): Remove variable."}, {"sha": "518c5ef229bee4a84318da0736dc5bd95fc5f80e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=fff7721799b3bf7cabbcdf1096eeab18b68ef5d3", "patch": "@@ -1,3 +1,9 @@\n+2015-11-16  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* c-common.c (handle_simd_attribute): New.\n+\t(struct attribute_spec): Add entry for \"simd\".\n+\t(handle_simd_attribute): New.\n+\n 2015-11-13  Kai Tietz  <ktietz70@googlemail.com>\n \n \t* c-lex.c (interpret_float): Use fold_convert."}, {"sha": "f8ccb6d62c0b3c2b53d3ec345feff7b9341689da", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=fff7721799b3bf7cabbcdf1096eeab18b68ef5d3", "patch": "@@ -387,6 +387,7 @@ static tree handle_warn_unused_attribute (tree *, tree, tree, int, bool *);\n static tree handle_returns_nonnull_attribute (tree *, tree, tree, int, bool *);\n static tree handle_omp_declare_simd_attribute (tree *, tree, tree, int,\n \t\t\t\t\t       bool *);\n+static tree handle_simd_attribute (tree *, tree, tree, int, bool *);\n static tree handle_omp_declare_target_attribute (tree *, tree, tree, int,\n \t\t\t\t\t\t bool *);\n static tree handle_designated_init_attribute (tree *, tree, tree, int, bool *);\n@@ -817,6 +818,8 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_omp_declare_simd_attribute, false },\n   { \"cilk simd function\",     0, -1, true,  false, false,\n \t\t\t      handle_omp_declare_simd_attribute, false },\n+  { \"simd\",\t\t      0, 0, true,  false, false,\n+\t\t\t      handle_simd_attribute, false },\n   { \"omp declare target\",     0, 0, true, false, false,\n \t\t\t      handle_omp_declare_target_attribute, false },\n   { \"alloc_align\",\t      1, 1, false, true, true,\n@@ -9021,6 +9024,35 @@ handle_omp_declare_simd_attribute (tree *, tree, tree, int, bool *)\n   return NULL_TREE;\n }\n \n+/* Handle a \"simd\" attribute.  */\n+\n+static tree\n+handle_simd_attribute (tree *node, tree name, tree, int, bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) == FUNCTION_DECL)\n+    {\n+      if (lookup_attribute (\"cilk simd function\",\n+\t\t\t    DECL_ATTRIBUTES (*node)) != NULL)\n+\t{\n+\t  error_at (DECL_SOURCE_LOCATION (*node),\n+\t\t    \"%<__simd__%> attribute cannot be used in the same \"\n+\t\t    \"function marked as a Cilk Plus SIMD-enabled function\");\n+\t  *no_add_attrs = true;\n+\t}\n+      else\n+\tDECL_ATTRIBUTES (*node)\n+\t  = tree_cons (get_identifier (\"omp declare simd\"),\n+\t\t       NULL_TREE, DECL_ATTRIBUTES (*node));\n+    }\n+  else\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle an \"omp declare target\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "386877156462c8c387dcf9d3fd4811d000aa1b01", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=fff7721799b3bf7cabbcdf1096eeab18b68ef5d3", "patch": "@@ -1,3 +1,8 @@\n+2015-11-16  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* c-parser.c (c_finish_omp_declare_simd): Look for\n+\t\"simd\" attribute as well. Update error message.\n+\n 2015-11-14  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* c-parser.c (c_parser_omp_declare_target): Adjust."}, {"sha": "e63148e3330b5d25f2559743b79b68f96d370f83", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=fff7721799b3bf7cabbcdf1096eeab18b68ef5d3", "patch": "@@ -16141,10 +16141,13 @@ c_finish_omp_declare_simd (c_parser *parser, tree fndecl, tree parms,\n \t\t\t   vec<c_token> clauses)\n {\n   if (flag_cilkplus\n-      && clauses.exists () && !vec_safe_is_empty (parser->cilk_simd_fn_tokens))\n+      && (clauses.exists ()\n+\t  || lookup_attribute (\"simd\", DECL_ATTRIBUTES (fndecl)))\n+      && !vec_safe_is_empty (parser->cilk_simd_fn_tokens))\n     {\n-      error (\"%<#pragma omp declare simd%> cannot be used in the same \"\n-\t     \"function marked as a Cilk Plus SIMD-enabled function\");\n+      error (\"%<#pragma omp declare simd%> or %<simd%> attribute cannot be \"\n+\t     \"used in the same function marked as a Cilk Plus SIMD-enabled \"\n+\t     \"function\");\n       vec_free (parser->cilk_simd_fn_tokens);\n       return;\n     }\n@@ -16182,6 +16185,16 @@ c_finish_omp_declare_simd (c_parser *parser, tree fndecl, tree parms,\n       parser->tokens = parser->cilk_simd_fn_tokens->address ();\n       parser->tokens_avail = vec_safe_length (parser->cilk_simd_fn_tokens);\n       is_cilkplus_cilk_simd_fn = true;\n+\n+      if (lookup_attribute (\"simd\", DECL_ATTRIBUTES (fndecl)) != NULL)\n+\t{\n+\t  error_at (DECL_SOURCE_LOCATION (fndecl),\n+\t\t    \"%<__simd__%> attribute cannot be used in the same \"\n+\t\t    \"function marked as a Cilk Plus SIMD-enabled function\");\n+\t  vec_free (parser->cilk_simd_fn_tokens);\n+\t  return;\n+\t}\n+\n     }\n   else\n     {\n@@ -16213,12 +16226,12 @@ c_finish_omp_declare_simd (c_parser *parser, tree fndecl, tree parms,\n       if (c != NULL_TREE)\n \tc = tree_cons (NULL_TREE, c, NULL_TREE);\n       if (is_cilkplus_cilk_simd_fn) \n-\t{ \n+\t{\n \t  tree k = build_tree_list (get_identifier (\"cilk simd function\"), \n \t\t\t\t    NULL_TREE);\n \t  TREE_CHAIN (k) = DECL_ATTRIBUTES (fndecl);\n \t  DECL_ATTRIBUTES (fndecl) = k;\n-\t} \n+\t}\n       c = build_tree_list (get_identifier (\"omp declare simd\"), c);\n       TREE_CHAIN (c) = DECL_ATTRIBUTES (fndecl);\n       DECL_ATTRIBUTES (fndecl) = c;"}, {"sha": "7027d937acf6b8a7f3479284c6629348fe86e9ff", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fff7721799b3bf7cabbcdf1096eeab18b68ef5d3", "patch": "@@ -1,3 +1,8 @@\n+2015-11-16  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* parser.c (cp_parser_late_parsing_cilk_simd_fn_info): Look for\n+\t\"simd\" attribute as well. Update error message.\n+\n 2015-11-14  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* parser.c (cp_parser_omp_declare_target): Adjust."}, {"sha": "286c8db54c9507c84d43709c85924f27585b777a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=fff7721799b3bf7cabbcdf1096eeab18b68ef5d3", "patch": "@@ -35049,10 +35049,12 @@ cp_parser_late_parsing_cilk_simd_fn_info (cp_parser *parser, tree attrs)\n   cp_omp_declare_simd_data *info = parser->cilk_simd_fn_info;\n   int ii = 0;\n \n-  if (parser->omp_declare_simd != NULL)\n+  if (parser->omp_declare_simd != NULL\n+      || lookup_attribute (\"simd\", attrs))\n     {\n-      error (\"%<#pragma omp declare simd%> cannot be used in the same function\"\n-\t     \" marked as a Cilk Plus SIMD-enabled function\");\n+      error (\"%<#pragma omp declare simd%> of %<simd%> attribute cannot be \"\n+\t     \"used in the same function marked as a Cilk Plus SIMD-enabled \"\n+\t     \" function\");\n       XDELETE (parser->cilk_simd_fn_info);\n       parser->cilk_simd_fn_info = NULL;\n       return attrs;"}, {"sha": "f5c2fdf32dd8ca84f4967414b46e83031e83ad2c", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=fff7721799b3bf7cabbcdf1096eeab18b68ef5d3", "patch": "@@ -3143,6 +3143,22 @@ one compiled with @option{-msse4.1} and another with @option{-mavx}.\n At the function call it will create resolver @code{ifunc}, that will\n dynamically call a clone suitable for current architecture.\n \n+@item simd\n+@cindex @code{simd} function attribute.\n+This attribute enables creation of one or more function versions that\n+can process multiple arguments using SIMD instructions from a\n+single invocation.  Specifying this attribute allows compiler to\n+assume that such versions are available at link time (provided\n+in the same or another translation unit).  Generated versions are\n+target dependent and described in corresponding Vector ABI document.  For\n+x86_64 target this document can be found\n+@w{@uref{https://sourceware.org/glibc/wiki/libmvec?action=AttachFile&do=view&target=VectorABI.txt,here}}.\n+The attribute should not be used together with Cilk Plus @code{vector}\n+attribute on the same function.\n+If the attribute is specified and @code{#pragma omp declare simd}\n+present on a declaration and @code{-fopenmp} or @code{-fopenmp-simd}\n+switch is specified, then the attribute is ignored.\n+\n @item target (@var{options})\n @cindex @code{target} function attribute\n Multiple target back ends implement the @code{target} attribute"}, {"sha": "efcc971b98a384b37ffd8ac68e5e1129660b9bc1", "filename": "gcc/omp-low.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=fff7721799b3bf7cabbcdf1096eeab18b68ef5d3", "patch": "@@ -18407,10 +18407,7 @@ class pass_omp_simd_clone : public simple_ipa_opt_pass\n bool\n pass_omp_simd_clone::gate (function *)\n {\n-  return ((flag_openmp || flag_openmp_simd\n-\t   || flag_cilkplus\n-\t   || (in_lto_p && !flag_wpa))\n-\t  && (targetm.simd_clone.compute_vecsize_and_simdlen != NULL));\n+  return targetm.simd_clone.compute_vecsize_and_simdlen != NULL;\n }\n \n } // anon namespace"}, {"sha": "6b9370e7e89b0f38fb3c3afd924998fe3d341f7e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fff7721799b3bf7cabbcdf1096eeab18b68ef5d3", "patch": "@@ -1,3 +1,9 @@\n+2015-11-16  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* c-c++-common/attr-simd.c: New test.\n+\t* c-c++-common/attr-simd-2.c: New test.\n+\t* c-c++-common/attr-simd-3.c: New test.\n+\n 2015-11-16  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* gcc.target/aarch64/vclz.c: Correctly place INHIB_OPTIMIZATION."}, {"sha": "dd08d1865fd5363c8385d661b25369078d4c4da3", "filename": "gcc/testsuite/c-c++-common/attr-simd-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-simd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-simd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-simd-2.c?ref=fff7721799b3bf7cabbcdf1096eeab18b68ef5d3", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-optimized -fopenmp-simd\" } */\n+\n+#pragma omp declare simd\n+extern\n+#ifdef __cplusplus\n+\"C\"\n+#endif\n+__attribute__((__simd__))\n+int simd_attr (void)\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"omp declare simd\" \"optimized\" } } */\n+/* { dg-final { scan-assembler-times \"_ZGVbN4_simd_attr:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVbM4_simd_attr:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVcN4_simd_attr:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVcM4_simd_attr:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVdN8_simd_attr:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVdM8_simd_attr:\" 1 { target { i?86-*-* x86_64-*-* } } } } */"}, {"sha": "2bbdf04d17acd4a54c42d689705d316c63a5bb97", "filename": "gcc/testsuite/c-c++-common/attr-simd-3.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-simd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-simd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-simd-3.c?ref=fff7721799b3bf7cabbcdf1096eeab18b68ef5d3", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fcilkplus\" } */\n+/* { dg-prune-output \"undeclared here \\\\(not in a function\\\\)|\\[^\\n\\r\\]* was not declared in this scope\" } */\n+\n+void f () __attribute__((__simd__, __vector__)); /* { dg-error \"in the same function marked as a Cilk Plus\" } */"}, {"sha": "61974e3f1a955696d1510dc8b7d2a06bfaaf27b8", "filename": "gcc/testsuite/c-c++-common/attr-simd.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-simd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff7721799b3bf7cabbcdf1096eeab18b68ef5d3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-simd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-simd.c?ref=fff7721799b3bf7cabbcdf1096eeab18b68ef5d3", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-optimized\" } */\n+\n+extern\n+#ifdef __cplusplus\n+\"C\"\n+#endif\n+__attribute__((__simd__))\n+int simd_attr (void)\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"simd_attr\\[ \\\\t\\]simdclone|vector\" \"optimized\" } } */\n+/* { dg-final { scan-assembler-times \"_ZGVbN4_simd_attr:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVbM4_simd_attr:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVcN4_simd_attr:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVcM4_simd_attr:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVdN8_simd_attr:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVdM8_simd_attr:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+\n+extern\n+#ifdef __cplusplus\n+\"C\"\n+#endif\n+__attribute__((simd))\n+int simd_attr2 (void)\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"simd_attr2\\[ \\\\t\\]simdclone|vector\" \"optimized\" } } */\n+/* { dg-final { scan-assembler-times \"_ZGVbN4_simd_attr2:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVbM4_simd_attr2:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVcN4_simd_attr2:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVcM4_simd_attr2:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVdN8_simd_attr2:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVdM8_simd_attr2:\" 1 { target { i?86-*-* x86_64-*-* } } } } */"}]}