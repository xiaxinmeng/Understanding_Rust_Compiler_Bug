{"sha": "93f1d8555d8bf181de1a8d302144e19770687889", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNmMWQ4NTU1ZDhiZjE4MWRlMWE4ZDMwMjE0NGUxOTc3MDY4Nzg4OQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-07-20T09:44:01Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-07-20T09:44:01Z"}, "message": "[multiple changes]\n\n2010-07-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* libsupc++/unwind-cxx.h: Minor formatting / stylistic tweaks.\n\n2010-07-20  Mikael Pettersson  <mikpe@it.uu.se>\n\n\tPR libstdc++/44902\n\t* libsupc++/unwind-cxx.h (__cxa_type_match): Correct prototype.\n\t(__cxa_begin_cleanup): Likewise.\n\nFrom-SVN: r162328", "tree": {"sha": "84b872ca38133978741749dd4b39d66259e19b2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84b872ca38133978741749dd4b39d66259e19b2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93f1d8555d8bf181de1a8d302144e19770687889", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93f1d8555d8bf181de1a8d302144e19770687889", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93f1d8555d8bf181de1a8d302144e19770687889", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93f1d8555d8bf181de1a8d302144e19770687889/comments", "author": null, "committer": null, "parents": [{"sha": "547f963b5a77e253a81de517b0d137e2a083f776", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/547f963b5a77e253a81de517b0d137e2a083f776", "html_url": "https://github.com/Rust-GCC/gccrs/commit/547f963b5a77e253a81de517b0d137e2a083f776"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "ac0c6183571a02ffa1ea73594ad5b29811498c79", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f1d8555d8bf181de1a8d302144e19770687889/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f1d8555d8bf181de1a8d302144e19770687889/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=93f1d8555d8bf181de1a8d302144e19770687889", "patch": "@@ -1,3 +1,13 @@\n+2010-07-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* libsupc++/unwind-cxx.h: Minor formatting / stylistic tweaks.\n+\n+2010-07-20  Mikael Pettersson  <mikpe@it.uu.se>\n+\n+\tPR libstdc++/44902\n+\t* libsupc++/unwind-cxx.h (__cxa_type_match): Correct prototype.\n+\t(__cxa_begin_cleanup): Likewise.\n+\n 2010-07-19  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/Makefile.am (doc-texinfo): New rule."}, {"sha": "e62ea7c38be7c7593c4cecdb8b77caea5d78571d", "filename": "libstdc++-v3/libsupc++/unwind-cxx.h", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f1d8555d8bf181de1a8d302144e19770687889/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f1d8555d8bf181de1a8d302144e19770687889/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h?ref=93f1d8555d8bf181de1a8d302144e19770687889", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- Exception handling and frame unwind runtime interface routines.\n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n@@ -148,8 +148,10 @@ struct __cxa_eh_globals\n // either of the following functions.  The \"fast\" version assumes at least\n // one prior call of __cxa_get_globals has been made from the current\n // thread, so no initialization is necessary.\n-extern \"C\" __cxa_eh_globals *__cxa_get_globals () throw() __attribute__ ((__const__));\n-extern \"C\" __cxa_eh_globals *__cxa_get_globals_fast () throw() __attribute__ ((__const__));\n+extern \"C\" __cxa_eh_globals *__cxa_get_globals () throw() \n+  __attribute__ ((__const__));\n+extern \"C\" __cxa_eh_globals *__cxa_get_globals_fast () throw() \n+  __attribute__ ((__const__));\n \n // Allocate memory for the primary exception plus the thrown object.\n extern \"C\" void *__cxa_allocate_exception(std::size_t thrown_size) throw();\n@@ -169,13 +171,14 @@ __cxa_free_dependent_exception(__cxa_dependent_exception *ex) throw();\n extern \"C\" void __cxa_throw (void *thrown_exception,\n \t\t\t     std::type_info *tinfo,\n \t\t\t     void (*dest) (void *))\n-     __attribute__((noreturn));\n+  __attribute__((__noreturn__));\n \n // Used to implement exception handlers.\n-extern \"C\" void *__cxa_get_exception_ptr (void *) throw() __attribute__ ((__pure__));\n+extern \"C\" void *__cxa_get_exception_ptr (void *) throw()\n+  __attribute__ ((__pure__));\n extern \"C\" void *__cxa_begin_catch (void *) throw();\n extern \"C\" void __cxa_end_catch ();\n-extern \"C\" void __cxa_rethrow () __attribute__((noreturn));\n+extern \"C\" void __cxa_rethrow () __attribute__((__noreturn__));\n \n // These facilitate code generation for recurring situations.\n extern \"C\" void __cxa_bad_cast () __attribute__((__noreturn__));\n@@ -186,8 +189,9 @@ extern \"C\" void __cxa_bad_typeid () __attribute__((__noreturn__));\n // Handles re-checking the exception specification if unexpectedHandler\n // throws, and if bad_exception needs to be thrown.  Called from the\n // compiler.\n-extern \"C\" void __cxa_call_unexpected (void *) __attribute__((noreturn));\n-extern \"C\" void __cxa_call_terminate (_Unwind_Exception*) throw () __attribute__((noreturn));\n+extern \"C\" void __cxa_call_unexpected (void *) __attribute__((__noreturn__));\n+extern \"C\" void __cxa_call_terminate (_Unwind_Exception*) throw ()\n+  __attribute__((__noreturn__));\n \n #ifdef __ARM_EABI_UNWINDER__\n // Arm EABI specified routines.\n@@ -196,16 +200,19 @@ typedef enum {\n   ctm_succeeded = 1,\n   ctm_succeeded_with_ptr_to_base = 2\n } __cxa_type_match_result;\n-extern \"C\" bool __cxa_type_match(_Unwind_Exception*, const std::type_info*,\n-\t\t\t\t bool, void**);\n-extern \"C\" void __cxa_begin_cleanup (_Unwind_Exception*);\n+extern \"C\" __cxa_type_match_result __cxa_type_match(_Unwind_Exception*,\n+\t\t\t\t\t\t    const std::type_info*,\n+\t\t\t\t\t\t    bool, void**);\n+extern \"C\" bool __cxa_begin_cleanup (_Unwind_Exception*);\n extern \"C\" void __cxa_end_cleanup (void);\n #endif\n \n // Invokes given handler, dying appropriately if the user handler was\n // so inconsiderate as to return.\n-extern void __terminate(std::terminate_handler) throw () __attribute__((__noreturn__));\n-extern void __unexpected(std::unexpected_handler) __attribute__((noreturn));\n+extern void __terminate(std::terminate_handler) throw () \n+  __attribute__((__noreturn__));\n+extern void __unexpected(std::unexpected_handler)\n+  __attribute__((__noreturn__));\n \n // The current installed user handlers.\n extern std::terminate_handler __terminate_handler;"}]}