{"sha": "4c7c486a4e03b5d1e78ba3680bab4aa89c2f50c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM3YzQ4NmE0ZTAzYjVkMWU3OGJhMzY4MGJhYjRhYTg5YzJmNTBjNA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2009-04-22T16:52:17Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2009-04-22T16:52:17Z"}, "message": "arm.c (arm_rtx_costs_1): Use power_of_two_operand where appropriate.\n\n\t* config/arm/arm.c (arm_rtx_costs_1): Use power_of_two_operand\n\twhere appropriate.\n\nFrom-SVN: r146602", "tree": {"sha": "71be1caa5bb9e86626e798622f26c78fea6a9429", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71be1caa5bb9e86626e798622f26c78fea6a9429"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c7c486a4e03b5d1e78ba3680bab4aa89c2f50c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c7c486a4e03b5d1e78ba3680bab4aa89c2f50c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c7c486a4e03b5d1e78ba3680bab4aa89c2f50c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c7c486a4e03b5d1e78ba3680bab4aa89c2f50c4/comments", "author": null, "committer": null, "parents": [{"sha": "d5df9a20dbe9eade3bae0b12d042b4958416c3d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5df9a20dbe9eade3bae0b12d042b4958416c3d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5df9a20dbe9eade3bae0b12d042b4958416c3d8"}], "stats": {"total": 29, "additions": 11, "deletions": 18}, "files": [{"sha": "14d6774a0e1ff21e88719bff0efb37e8f5eb521f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7c486a4e03b5d1e78ba3680bab4aa89c2f50c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7c486a4e03b5d1e78ba3680bab4aa89c2f50c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c7c486a4e03b5d1e78ba3680bab4aa89c2f50c4", "patch": "@@ -1,3 +1,8 @@\n+2009-04-22  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* config/arm/arm.c (arm_rtx_costs_1): Use power_of_two_operand\n+\twhere appropriate.\n+\n 2009-04-22  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* config/arm/arm.c (arm_size_rtx_costs): Treat a PLUS with a shift"}, {"sha": "38ab142caccfe18013646411234e7cbd3a895489", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7c486a4e03b5d1e78ba3680bab4aa89c2f50c4/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7c486a4e03b5d1e78ba3680bab4aa89c2f50c4/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=4c7c486a4e03b5d1e78ba3680bab4aa89c2f50c4", "patch": "@@ -5141,19 +5141,15 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n \n       /* A shift as a part of RSB costs no more than RSB itself.  */\n       if (GET_CODE (XEXP (x, 0)) == MULT\n-\t  && GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST_INT\n-\t  && ((INTVAL (XEXP (XEXP (x, 0), 1))\n-\t       & (INTVAL (XEXP (XEXP (x, 0), 1)) - 1)) == 0))\n+\t  && power_of_two_operand (XEXP (XEXP (x, 0), 1), SImode))\n \t{\n \t  *total += rtx_cost (XEXP (XEXP (x, 0), 0), code, speed);\n \t  *total += rtx_cost (XEXP (x, 1), code, speed);\n \t  return true;\n \t}\n \n       if (subcode == MULT\n-\t  && GET_CODE (XEXP (XEXP (x, 1), 1)) == CONST_INT\n-\t  && ((INTVAL (XEXP (XEXP (x, 1), 1)) &\n-\t       (INTVAL (XEXP (XEXP (x, 1), 1)) - 1)) == 0))\n+\t  && power_of_two_operand (XEXP (XEXP (x, 1), 1), SImode))\n \t{\n \t  *total += rtx_cost (XEXP (x, 0), code, speed);\n \t  *total += rtx_cost (XEXP (XEXP (x, 1), 0), subcode, speed);\n@@ -5189,9 +5185,7 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n \t multiplication by a power of two, so that we fall down into\n \t the code below.  */\n       if (GET_CODE (XEXP (x, 0)) == MULT\n-\t  && ! (GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST_INT\n-\t\t&& ((INTVAL (XEXP (XEXP (x, 0), 1)) &\n-\t\t     (INTVAL (XEXP (XEXP (x, 0), 1)) - 1)) == 0)))\n+\t  && !power_of_two_operand (XEXP (XEXP (x, 0), 1), SImode))\n \t{\n \t  /* The cost comes from the cost of the multiply.  */\n \t  return false;\n@@ -5274,9 +5268,7 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n \t}\n \n       if (subcode == MULT\n-\t  && GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST_INT\n-\t  && ((INTVAL (XEXP (XEXP (x, 0), 1)) &\n-\t       (INTVAL (XEXP (XEXP (x, 0), 1)) - 1)) == 0))\n+\t  && power_of_two_operand (XEXP (XEXP (x, 0), 1), SImode))\n \t{\n \t  *total += rtx_cost (XEXP (x, 1), code, speed);\n \t  *total += rtx_cost (XEXP (XEXP (x, 0), 0), subcode, speed);\n@@ -5333,9 +5325,7 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n \t      || subcode == LSHIFTRT\n \t      || subcode == ROTATE || subcode == ROTATERT\n \t      || (subcode == MULT\n-\t\t  && GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST_INT\n-\t\t  && ((INTVAL (XEXP (XEXP (x, 0), 1)) & \n-\t\t       (INTVAL (XEXP (XEXP (x, 0), 1)) - 1)) == 0)))\n+\t\t  && power_of_two_operand (XEXP (XEXP (x, 0), 1), SImode)))\n \t    {\n \t      *total += rtx_cost (XEXP (XEXP (x, 0), 0), subcode, speed);\n \t      /* Register shifts cost an extra cycle.  */\n@@ -5443,9 +5433,7 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n \t}\n \n       if (subcode == MULT\n-\t  && GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST_INT\n-\t  && ((INTVAL (XEXP (XEXP (x, 0), 1)) &\n-\t       (INTVAL (XEXP (XEXP (x, 0), 1)) - 1)) == 0))\n+\t  && power_of_two_operand (XEXP (XEXP (x, 0), 1), SImode))\n \t{\n \t  *total += rtx_cost (XEXP (x, 1), code, speed);\n \t  *total += rtx_cost (XEXP (XEXP (x, 0), 0), subcode, speed);"}]}