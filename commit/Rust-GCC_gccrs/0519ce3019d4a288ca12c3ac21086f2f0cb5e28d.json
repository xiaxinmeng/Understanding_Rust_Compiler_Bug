{"sha": "0519ce3019d4a288ca12c3ac21086f2f0cb5e28d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUxOWNlMzAxOWQ0YTI4OGNhMTJjM2FjMjEwODZmMmYwY2I1ZTI4ZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-05-25T23:43:43Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-05-25T23:43:43Z"}, "message": "except.h (can_throw): Declare it.\n\n\t* except.h (can_throw): Declare it.\n\t* except.c (can_throw): Give it external linkage.\n\t* resource.c (find_dead_or_set_registers): Use can_throw.\n\nFrom-SVN: r34178", "tree": {"sha": "6156335a45a8824c4127a4a8fb96fa8c5f78b50c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6156335a45a8824c4127a4a8fb96fa8c5f78b50c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0519ce3019d4a288ca12c3ac21086f2f0cb5e28d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0519ce3019d4a288ca12c3ac21086f2f0cb5e28d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0519ce3019d4a288ca12c3ac21086f2f0cb5e28d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0519ce3019d4a288ca12c3ac21086f2f0cb5e28d/comments", "author": null, "committer": null, "parents": [{"sha": "3ec6bad360a051793659af054b5ecf41318a2a8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ec6bad360a051793659af054b5ecf41318a2a8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ec6bad360a051793659af054b5ecf41318a2a8b"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "80e638c5918880f8706f63ec65843bbe2a77fd9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0519ce3019d4a288ca12c3ac21086f2f0cb5e28d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0519ce3019d4a288ca12c3ac21086f2f0cb5e28d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0519ce3019d4a288ca12c3ac21086f2f0cb5e28d", "patch": "@@ -1,3 +1,9 @@\n+2000-05-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* except.h (can_throw): Declare it.\n+\t* except.c (can_throw): Give it external linkage.\n+\t* resource.c (find_dead_or_set_registers): Use can_throw.\n+\t\n 2000-05-25  Richard Henderson  <rth@cygnus.com>\n \n \t* flow.c (mark_set_1): Don't record conditionally dead memory."}, {"sha": "db9a58f98512c47ef1a10aebc69829547b6856f0", "filename": "gcc/except.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0519ce3019d4a288ca12c3ac21086f2f0cb5e28d/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0519ce3019d4a288ca12c3ac21086f2f0cb5e28d/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=0519ce3019d4a288ca12c3ac21086f2f0cb5e28d", "patch": "@@ -463,7 +463,6 @@ static void start_dynamic_cleanup\tPARAMS ((tree, tree));\n static void start_dynamic_handler\tPARAMS ((void));\n static void expand_rethrow\tPARAMS ((rtx));\n static void output_exception_table_entry\tPARAMS ((FILE *, int));\n-static int can_throw\t\tPARAMS ((rtx));\n static rtx scan_region\t\tPARAMS ((rtx, int, int *));\n static void eh_regs\t\tPARAMS ((rtx *, rtx *, rtx *, int));\n static void set_insn_eh_region\tPARAMS ((rtx *, int));\n@@ -2688,12 +2687,11 @@ free_eh_status (f)\n }\n \f\n /* This section is for the exception handling specific optimization\n-   pass.  First are the internal routines, and then the main\n-   optimization pass.  */\n+   pass.  */\n \n /* Determine if the given INSN can throw an exception.  */\n \n-static int\n+int\n can_throw (insn)\n      rtx insn;\n {"}, {"sha": "f4db7d2ba03150b642d540bf9563f136b6beef4b", "filename": "gcc/except.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0519ce3019d4a288ca12c3ac21086f2f0cb5e28d/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0519ce3019d4a288ca12c3ac21086f2f0cb5e28d/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=0519ce3019d4a288ca12c3ac21086f2f0cb5e28d", "patch": "@@ -439,6 +439,10 @@ extern struct label_node *outer_context_label_stack;\n \n extern rtx exception_handler_labels;\n \n+/* Determine if the given INSN can throw an exception.  */\n+\n+extern int can_throw                            PARAMS ((rtx));\n+\n /* Return nonzero if nothing in this function can throw.  */\n \n extern int nothrow_function_p\t\t\tPARAMS ((void));"}, {"sha": "d84fabeee1d2d06b8d05b235d4698244302e6f0e", "filename": "gcc/resource.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0519ce3019d4a288ca12c3ac21086f2f0cb5e28d/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0519ce3019d4a288ca12c3ac21086f2f0cb5e28d/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=0519ce3019d4a288ca12c3ac21086f2f0cb5e28d", "patch": "@@ -422,6 +422,14 @@ find_dead_or_set_registers (target, res, jump_target, jump_count, set, needed)\n       rtx this_jump_insn = insn;\n \n       next = NEXT_INSN (insn);\n+\n+      /* If this instruction can throw an exception, then we don't\n+\t know where we might end up next.  That means that we have to\n+\t assume that whatever we have already marked as live really is\n+\t live.  */\n+      if (can_throw (insn))\n+\tbreak;\n+\n       switch (GET_CODE (insn))\n \t{\n \tcase CODE_LABEL:"}]}