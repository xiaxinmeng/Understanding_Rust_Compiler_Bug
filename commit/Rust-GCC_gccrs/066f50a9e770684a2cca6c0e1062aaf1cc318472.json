{"sha": "066f50a9e770684a2cca6c0e1062aaf1cc318472", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY2ZjUwYTllNzcwNjg0YTJjY2E2YzBlMTA2MmFhZjFjYzMxODQ3Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2003-05-27T22:53:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-05-27T22:53:01Z"}, "message": "tree.c (expr_first, [...]): New fns.\n\n        * tree.c (expr_first, expr_length): New fns.\n        * tree.h: Declare them.\n\n        * tree.c (iterative_hash_expr): Hash commutative expressions\n        consistently.\n\nFrom-SVN: r67201", "tree": {"sha": "0854be3944c723522290b358ba36543e20a49806", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0854be3944c723522290b358ba36543e20a49806"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/066f50a9e770684a2cca6c0e1062aaf1cc318472", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/066f50a9e770684a2cca6c0e1062aaf1cc318472", "html_url": "https://github.com/Rust-GCC/gccrs/commit/066f50a9e770684a2cca6c0e1062aaf1cc318472", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/066f50a9e770684a2cca6c0e1062aaf1cc318472/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f85716e06e7fdf16123e5db3101dfc81b71afe09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f85716e06e7fdf16123e5db3101dfc81b71afe09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f85716e06e7fdf16123e5db3101dfc81b71afe09"}], "stats": {"total": 65, "additions": 60, "deletions": 5}, "files": [{"sha": "08805e7c02912b937b8bb0223215acbbf24e273c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/066f50a9e770684a2cca6c0e1062aaf1cc318472/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/066f50a9e770684a2cca6c0e1062aaf1cc318472/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=066f50a9e770684a2cca6c0e1062aaf1cc318472", "patch": "@@ -1,3 +1,11 @@\n+2003-05-27  Jason Merrill  <jason@redhat.com>\n+\n+\t* tree.c (expr_first, expr_length): New fns.\n+\t* tree.h: Declare them.\n+\n+\t* tree.c (iterative_hash_expr): Hash commutative expressions\n+\tconsistently.\n+\n 2003-05027  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* tree.h (contains_placeholder_p): Now returns bool."}, {"sha": "ad4f51c973addf9f93133590346376017b51b090", "filename": "gcc/tree.c", "status": "modified", "additions": 50, "deletions": 5, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/066f50a9e770684a2cca6c0e1062aaf1cc318472/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/066f50a9e770684a2cca6c0e1062aaf1cc318472/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=066f50a9e770684a2cca6c0e1062aaf1cc318472", "patch": "@@ -1123,18 +1123,44 @@ tree_cons (purpose, value, chain)\n   return node;\n }\n \n+/* Return the first expression in a sequence of COMPOUND_EXPRs.  */\n+\n+tree\n+expr_first (tree expr)\n+{\n+  if (expr == NULL_TREE)\n+    return expr;\n+  while (TREE_CODE (expr) == COMPOUND_EXPR)\n+    expr = TREE_OPERAND (expr, 0);\n+  return expr;\n+}\n+\n /* Return the last expression in a sequence of COMPOUND_EXPRs.  */\n \n tree\n-expr_last (expr)\n-     tree expr;\n+expr_last (tree expr)\n {\n   if (expr == NULL_TREE)\n     return expr;\n   while (TREE_CODE (expr) == COMPOUND_EXPR)\n     expr = TREE_OPERAND (expr, 1);\n   return expr;\n }\n+\n+/* Return the number of subexpressions in a sequence of COMPOUND_EXPRs.  */\n+\n+int\n+expr_length (tree expr)\n+{\n+  int len = 0;\n+  \n+  if (expr == NULL_TREE)\n+    return 0;\n+  for (; TREE_CODE (expr) == COMPOUND_EXPR; expr = TREE_OPERAND (expr, 1))\n+    len += expr_length (TREE_OPERAND (expr, 0));\n+  ++len;\n+  return len;\n+}\n \f\n /* Return the size nominally occupied by an object of type TYPE\n    when it resides in memory.  The value is measured in units of bytes,\n@@ -3653,9 +3679,28 @@ iterative_hash_expr (tree t, hashval_t val)\n       if (code == NOP_EXPR || code == CONVERT_EXPR\n \t  || code == NON_LVALUE_EXPR)\n \tval = iterative_hash_object (TREE_TYPE (t), val);\n-  \n-      for (i = first_rtl_op (code) - 1; i >= 0; --i)\n-\tval = iterative_hash_expr (TREE_OPERAND (t, i), val);\n+\n+      if (code == PLUS_EXPR || code == MULT_EXPR || code == MIN_EXPR\n+\t  || code == MAX_EXPR || code == BIT_IOR_EXPR || code == BIT_XOR_EXPR\n+\t  || code == BIT_AND_EXPR || code == NE_EXPR || code == EQ_EXPR)\n+\t{\n+\t  /* It's a commutative expression.  We want to hash it the same\n+\t     however it appears.  We do this by first hashing both operands\n+\t     and then rehashing based on the order of their independent\n+\t     hashes.  */\n+\t  hashval_t one = iterative_hash_expr (TREE_OPERAND (t, 0), 0);\n+\t  hashval_t two = iterative_hash_expr (TREE_OPERAND (t, 1), 0);\n+\t  hashval_t t;\n+\n+\t  if (one > two)\n+\t    t = one, one = two, two = t;\n+\n+\t  val = iterative_hash_object (one, val);\n+\t  val = iterative_hash_object (two, val);\n+\t}\n+      else\n+\tfor (i = first_rtl_op (code) - 1; i >= 0; --i)\n+\t  val = iterative_hash_expr (TREE_OPERAND (t, i), val);\n     }\n   else if (code == TREE_LIST)\n     {"}, {"sha": "446e42fa5a834d7444ab23be437fa8ddc1a3aa89", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/066f50a9e770684a2cca6c0e1062aaf1cc318472/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/066f50a9e770684a2cca6c0e1062aaf1cc318472/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=066f50a9e770684a2cca6c0e1062aaf1cc318472", "patch": "@@ -2349,7 +2349,9 @@ extern tree pedantic_non_lvalue\t\tPARAMS ((tree));\n \n extern tree convert\t\t\tPARAMS ((tree, tree));\n extern unsigned int expr_align\t\tPARAMS ((tree));\n+extern tree expr_first\t\t\tPARAMS ((tree));\n extern tree expr_last\t\t\tPARAMS ((tree));\n+extern int expr_length\t\t\tPARAMS ((tree));\n extern tree size_in_bytes\t\tPARAMS ((tree));\n extern HOST_WIDE_INT int_size_in_bytes\tPARAMS ((tree));\n extern tree bit_position\t\tPARAMS ((tree));"}]}