{"sha": "0b3deaafebd053f8bc5f52c38d64909068f27d03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIzZGVhYWZlYmQwNTNmOGJjNWY1MmMzOGQ2NDkwOTA2OGYyN2QwMw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-03-23T16:45:45Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-03-23T16:45:45Z"}, "message": "target-supports.exp (check_iconv_available): Default libiconv to -liconv, if there is no definition.\n\n\t* lib/target-supports.exp (check_iconv_available): Default\n\tlibiconv to -liconv, if there is no definition.\n\n\t* testsuite/lib/libstdc++.exp (libstdc++_init): Improve handling\n\tof compilers not in the build directory.\n\t(libstdc++_wchar_t): New variable.\n\t(libstdc++_threads): Likewise.\n\t(libstdc++_test_objs): Likewise.\n\t(v3_target_compile): Use libstdc++_test_objs.\n\t(v3-list-tests): Remove.\n\t(listdc++_build_support): New function.\n\t* testsuite/libstdc++-dg/normal.exp: Rework to dynamically\n\tgenerate list of tests.\n\nFrom-SVN: r96934", "tree": {"sha": "b99d5b20a5e77f6a8312c03317a424ec844ed67b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b99d5b20a5e77f6a8312c03317a424ec844ed67b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b3deaafebd053f8bc5f52c38d64909068f27d03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b3deaafebd053f8bc5f52c38d64909068f27d03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b3deaafebd053f8bc5f52c38d64909068f27d03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b3deaafebd053f8bc5f52c38d64909068f27d03/comments", "author": null, "committer": null, "parents": [{"sha": "17ac08e2fb86675af83171afbeccfe7936c48709", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17ac08e2fb86675af83171afbeccfe7936c48709", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17ac08e2fb86675af83171afbeccfe7936c48709"}], "stats": {"total": 192, "additions": 140, "deletions": 52}, "files": [{"sha": "d39269f7e00dcda015b4714e907e24e2c27099bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3deaafebd053f8bc5f52c38d64909068f27d03/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3deaafebd053f8bc5f52c38d64909068f27d03/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0b3deaafebd053f8bc5f52c38d64909068f27d03", "patch": "@@ -1,3 +1,8 @@\n+2005-03-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* lib/target-supports.exp (check_iconv_available): Default\n+\tlibiconv to -liconv, if there is no definition.\n+\n 2005-03-23  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* gcc.dg/torture/cris-asm-mof-1.c: New test."}, {"sha": "d37fd2d6b8ff30137928fed644cc463b82da8215", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3deaafebd053f8bc5f52c38d64909068f27d03/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3deaafebd053f8bc5f52c38d64909068f27d03/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=0b3deaafebd053f8bc5f52c38d64909068f27d03", "patch": "@@ -303,6 +303,10 @@ proc check_iconv_available { test_what } {\n     puts $f \"return 0;\\n}\"\n     close $f\n \n+    # If the tool configuration file has not set libiconv, try \"-liconv\"\n+    if { ![info exists libiconv] } {\n+\tset libiconv \"-liconv\"\n+    }\n     set lines [${tool}_target_compile $src $exe executable \"libs=$libiconv\" ]\n     file delete $src\n "}, {"sha": "c62add61d43086b8058c6d24aeb543a9b5a47038", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3deaafebd053f8bc5f52c38d64909068f27d03/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3deaafebd053f8bc5f52c38d64909068f27d03/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0b3deaafebd053f8bc5f52c38d64909068f27d03", "patch": "@@ -1,3 +1,16 @@\n+2005-03-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* testsuite/lib/libstdc++.exp (libstdc++_init): Improve handling\n+\tof compilers not in the build directory.\n+\t(libstdc++_wchar_t): New variable.\n+\t(libstdc++_threads): Likewise.\n+\t(libstdc++_test_objs): Likewise.\n+\t(v3_target_compile): Use libstdc++_test_objs.\n+\t(v3-list-tests): Remove.\n+\t(listdc++_build_support): New function.\n+\t* testsuite/libstdc++-dg/normal.exp: Rework to dynamically\n+\tgenerate list of tests.\n+\t\n 2005-03-21  Chris Jefferson  <chris@bubblescope.net>\n \n \tPR libstdc++/20577"}, {"sha": "5d7b642db17f2adc165fd6d872a0f1df3e0095de", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 79, "deletions": 50, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3deaafebd053f8bc5f52c38d64909068f27d03/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3deaafebd053f8bc5f52c38d64909068f27d03/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=0b3deaafebd053f8bc5f52c38d64909068f27d03", "patch": "@@ -134,27 +134,32 @@ proc libstdc++_init { testfile } {\n     v3track gccdir 3\n \n     # Compute what needs to be added to the existing LD_LIBRARY_PATH.\n-    set ld_library_path \"\"\n-    append ld_library_path \":${gccdir}\"\n-    set compiler ${gccdir}/g++\n-    if { [is_remote host] == 0 && [which $compiler] != 0 } {\n-      foreach i \"[exec $compiler --print-multi-lib]\" {\n-        set mldir \"\"\n-        regexp -- \"\\[a-z0-9=/\\.-\\]*;\" $i mldir\n-        set mldir [string trimright $mldir \"\\;@\"]\n-        if { \"$mldir\" == \".\" } {\n-          continue\n-        }\n-        if { [llength [glob -nocomplain ${gccdir}/${mldir}/libgcc_s*.so.*]] >= 1 } {\n-          append ld_library_path \":${gccdir}/${mldir}\"\n-        }\n-      }\n-    }\n-    append ld_library_path \":${blddir}/src/.libs\"\n+    if {$gccdir != \"\"} {\n+\tset ld_library_path \"\"\n+\tappend ld_library_path \":${gccdir}\"\n+\tset compiler ${gccdir}/g++\n+\tappend ld_library_path \":${blddir}/src/.libs\"\n+\n+\tif { [is_remote host] == 0 && [which $compiler] != 0 } {\n+\t  foreach i \"[exec $compiler --print-multi-lib]\" {\n+\t    set mldir \"\"\n+\t    regexp -- \"\\[a-z0-9=/\\.-\\]*;\" $i mldir\n+\t    set mldir [string trimright $mldir \"\\;@\"]\n+\t    if { \"$mldir\" == \".\" } {\n+\t      continue\n+\t    }\n+\t    if { [llength [glob -nocomplain ${gccdir}/${mldir}/libgcc_s*.so.*]] >= 1 } {\n+\t      append ld_library_path \":${gccdir}/${mldir}\"\n+\t    }\n+\t  }\n+\t}\n \n-    set_ld_library_path_env_vars\n-    if [info exists env(LD_LIBRARY_PATH)] {\n-      verbose -log \"LD_LIBRARY_PATH = $env(LD_LIBRARY_PATH)\"\n+\tset_ld_library_path_env_vars\n+\tif [info exists env(LD_LIBRARY_PATH)] {\n+\t  verbose -log \"LD_LIBRARY_PATH = $env(LD_LIBRARY_PATH)\"\n+\t}\n+    } else {\n+\tset compiler [transform \"g++\"]\n     }\n \n     # Do a bunch of handstands and backflips for cross compiling and\n@@ -176,7 +181,7 @@ proc libstdc++_init { testfile } {\n             set includes [exec sh $flags_file --build-includes]\n         } else {\n             set cxx [transform \"g++\"]\n-            set cxxflags \"-ggdb3\"\n+            set cxxflags \"-g -O2 -D_GLIBCXX_ASSERT -fmessage-length=0\" \n             set includes \"-I${srcdir}\"\n         }\n     }\n@@ -242,6 +247,15 @@ proc libstdc++-dg-test { prog do_what extra_tool_flags } {\n     return [list $comp_output $output_file]\n }\n \n+# True if the library supports wchar_t.\n+set libstdc++_wchar_t 0\n+\n+# True if the library supports threads.\n+set libstdc++_threads 0\n+\n+# A string naming object files to be linked into all tests.\n+set libstdc++_test_objs \"\"\n+\n # Called from libstdc++-dg-test above.  Calls back into system's\n # target_compile to actually do the work.\n proc v3_target_compile { source dest type options } {\n@@ -251,6 +265,7 @@ proc v3_target_compile { source dest type options } {\n     global cxxflags\n     global includes\n     global blddir\n+    global libstdc++_test_objs\n \n     if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n         lappend options \"libs=${gluefile}\"\n@@ -262,42 +277,56 @@ proc v3_target_compile { source dest type options } {\n     set cxx_final [concat $cxx_final $cxxlibglossflags]\n     set cxx_final [concat $cxx_final $cxxflags]\n     set cxx_final [concat $cxx_final $includes]\n+    # Link the support objects into executables.\n+    if { $type == \"executable\" } {\n+\tset cxx_final [concat $cxx_final ${libstdc++_test_objs}]\n+    }\n \n     lappend options \"compiler=$cxx_final\"\n \n-    # Picks up the freshly-built testsuite library corresponding to the\n-    # multilib under test.\n-    lappend options \"ldflags=-L${blddir}/testsuite\"\n-    lappend options \"libs=-lv3test\"\n-\n     return [target_compile $source $dest $type $options]\n }\n \n-\n-# Called once, from libstdc++/normal.exp.\n-proc v3-list-tests { filename } {\n+# Build the support objects linked in with the libstdc++ tests.  In\n+# addition, set libstdc++_wchar_t, libstdc++_threads, and libstdc++_test_objs\n+# appropriately.\n+proc libstdc++_build_support {} {\n     global srcdir\n-    global blddir\n-\n-    set tests_file \"${blddir}/testsuite/${filename}\"\n-    set sfiles \"\"\n-\n-    verbose -log \"In v3-list-tests\"\n-    verbose -log \"blddir = ${blddir}\"\n-    verbose -log \"tests_file = $tests_file\"\n+    global libstdc++_wchar_t\n+    global libstdc++_threads\n+    global libstdc++_test_objs\n+\n+    # Figure out whether or not the library supports certain features.\n+    set libstdc++_wchar_t 0\n+    set libstdc++_threads 0\n+    set libstdc++_test_objs \"\"\n+\n+    set config_src \"config.cc\"\n+    set f [open $config_src \"w\"]\n+    puts $f \"#include <bits/c++config.h>\"\n+    close $f\n+    set preprocessed [v3_target_compile $config_src \"\" \\\n+\t    \t       preprocess \"additional_flags=-dN\"]\n+    foreach l $preprocessed {\n+\tif { [string first \"_GLIBCXX_USE_WCHAR_T\" $l] != -1 } {\n+\t    verbose -log \"wchar_t support detected\"\n+\t    set libstdc++_wchar_t 1\n+\t} elseif { [string first \"_GLIBCXX_HAVE_GTHR_DEFAULT\" $l] != -1 } {\n+\t    verbose -log \"thread support detected\"\n+\t    set libstdc++_threads 1\n+\t}\n+    }\n \n-    # If there is a testsuite_file, use it. \n-    if { [file exists $tests_file] } {\n-        set f [open $tests_file]\n-        while { ! [eof $f] } {\n-            set t [gets $f]\n-            if { [string length \"$t\"] != 0 } {\n-                lappend sfiles  ${srcdir}/${t}\n-            }\n-        } \n-        close $f\n-    } else {\n-        verbose \"cannot open $tests_file\"\n+    # Build the support objects.\n+    set source_files \\\n+\t[list testsuite_abi.cc testsuite_allocator.cc testsuite_hooks.cc]\n+    foreach f $source_files {\n+\tset object_file [file rootname $f].o\n+\tif { [v3_target_compile $srcdir/$f $object_file \"object\" \\\n+               \"incdir=$srcdir\"] \n+\t     != \"\" } {\n+\t    error \"could not compile $f\"\n+\t}\n+\tappend libstdc++_test_objs \"$object_file \"\n     }\n-    return $sfiles\n }"}, {"sha": "67f4920eb1089432212843f4a719752efd455245", "filename": "libstdc++-v3/testsuite/libstdc++-dg/normal.exp", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3deaafebd053f8bc5f52c38d64909068f27d03/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-dg%2Fnormal.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3deaafebd053f8bc5f52c38d64909068f27d03/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-dg%2Fnormal.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-dg%2Fnormal.exp?ref=0b3deaafebd053f8bc5f52c38d64909068f27d03", "patch": "@@ -21,10 +21,47 @@\n # Initialization.\n dg-init\n \n+# Build the support objects.\n+libstdc++_build_support\n+\n+# Find directories that might have tests.\n+set subdirs [glob \"$srcdir/\\[0-9\\]\\[0-9\\]*\"]\n+foreach d [glob \"$srcdir/\\[a-z\\]*\"] {\n+    if {[file isdirectory $d]} { \n+\tlappend subdirs $d\n+    }\n+}\n+\n+# Find all the tests.\n+set tests [list]\n+foreach s $subdirs {\n+    set subdir_tests [find $s *.cc]\n+    # Filter out tests that should not be run.\n+    foreach t $subdir_tests {\n+\t# The DejaGNU \"find\" procedure sometimes returns a list \n+\t# containing an empty string, when it should realy return\n+\t# an empty list.\n+\tif { $t == \"\" } {\n+\t    continue\n+\t}\n+\t# Filter out:\n+\t# 1. interactive tests.\n+\t# 2. performance tests.\n+\t# 3. wchar_t tests, if not supported.\n+\t# 4. thread tests, if not supported. \n+\tif { [string first _xin $t] == -1\n+\t     && [string first performance $t] == -1\n+\t     && (${libstdc++_wchar_t} || [string first wchar_t $t] == -1) \n+             && (${libstdc++_threads} || [string first thread $t] == -1) } {\n+\t    lappend tests $t\n+\t}\n+    }\n+}\n+set tests [lsort $tests]\n+\n # Main loop.\n global DEFAULT_CXXFLAGS\n-dg-runtest [v3-list-tests testsuite_files] \"\" $DEFAULT_CXXFLAGS\n-#dg-runtest [v3-list-tests testsuite_files_interactive] \"\" $DEFAULT_CXXFLAGS\n+dg-runtest $tests \"\" $DEFAULT_CXXFLAGS\n \n # All done.\n dg-finish"}]}