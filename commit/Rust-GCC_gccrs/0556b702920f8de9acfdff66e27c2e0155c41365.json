{"sha": "0556b702920f8de9acfdff66e27c2e0155c41365", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU1NmI3MDI5MjBmOGRlOWFjZmRmZjY2ZTI3YzJlMDE1NWM0MTM2NQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2005-07-04T13:26:02Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-07-04T13:26:02Z"}, "message": "s-mastop-tru64.adb (Pop_Frame): Use exc_lookup_function_entry to fetch a code-range descriptor associated with...\n\n2005-07-04  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* s-mastop-tru64.adb (Pop_Frame): Use exc_lookup_function_entry to\n\tfetch a code-range descriptor associated with the machine state. On\n\tfailure set the machine state's PC to 0; on success, pass the\n\tdescriptor to exc_virtual_unwind.\n\n\t* init.c (Tru64 section): New function __gnat_set_code_loc.\n\nFrom-SVN: r101572", "tree": {"sha": "a2137301ffb797629f27212c2560ce0b25c26ccc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2137301ffb797629f27212c2560ce0b25c26ccc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0556b702920f8de9acfdff66e27c2e0155c41365", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0556b702920f8de9acfdff66e27c2e0155c41365", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0556b702920f8de9acfdff66e27c2e0155c41365", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0556b702920f8de9acfdff66e27c2e0155c41365/comments", "author": null, "committer": null, "parents": [{"sha": "1a79be3c0024007e40e7b8ffb1cfcd5382358fc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a79be3c0024007e40e7b8ffb1cfcd5382358fc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a79be3c0024007e40e7b8ffb1cfcd5382358fc7"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "fb08c8bff1517c320662810a30100cf1b5e791f9", "filename": "gcc/ada/init.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0556b702920f8de9acfdff66e27c2e0155c41365/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0556b702920f8de9acfdff66e27c2e0155c41365/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=0556b702920f8de9acfdff66e27c2e0155c41365", "patch": "@@ -404,6 +404,7 @@ __gnat_install_handler (void)\n \n static void __gnat_error_handler (int, siginfo_t *, struct sigcontext *);\n extern char *__gnat_get_code_loc (struct sigcontext *);\n+extern void __gnat_set_code_loc (struct sigcontext *, char *);\n extern void __gnat_enter_handler (struct sigcontext *, char *);\n extern size_t __gnat_machine_state_length (void);\n \n@@ -518,6 +519,13 @@ __gnat_get_code_loc (struct sigcontext *context)\n   return (char *) context->sc_pc;\n }\n \n+void\n+__gnat_set_code_loc (struct sigcontext *context, char *pc)\n+{\n+  context->sc_pc = (long) pc;\n+}\n+\n+\n void\n __gnat_enter_handler (struct sigcontext *context, char *pc)\n {"}, {"sha": "c788817272c1014fa7ad18ed632e955a918881c1", "filename": "gcc/ada/s-mastop-tru64.adb", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0556b702920f8de9acfdff66e27c2e0155c41365/gcc%2Fada%2Fs-mastop-tru64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0556b702920f8de9acfdff66e27c2e0155c41365/gcc%2Fada%2Fs-mastop-tru64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-mastop-tru64.adb?ref=0556b702920f8de9acfdff66e27c2e0155c41365", "patch": "@@ -7,7 +7,7 @@\n --                                 B o d y                                  --\n --                         (Version for Alpha/Dec Unix)                     --\n --                                                                          --\n---           Copyright (C) 1999-2003 Ada Core Technologies, Inc.            --\n+--           Copyright (C) 1999-2005 Ada Core Technologies, Inc.            --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -141,13 +141,32 @@ package body System.Machine_State_Operations is\n    is\n       pragma Warnings (Off, Info);\n \n-      procedure exc_virtual_unwind\n-        (Fcn  : System.Address;\n-         M    : Machine_State);\n+      procedure exc_virtual_unwind (Fcn : System.Address; M : Machine_State);\n       pragma Import (C, exc_virtual_unwind, \"exc_virtual_unwind\");\n \n+      function exc_lookup_function (Loc : Code_Loc) return System.Address;\n+      pragma Import (C, exc_lookup_function, \"exc_lookup_function_entry\");\n+\n+      procedure c_set_code_loc (M : Machine_State; Loc : Code_Loc);\n+      pragma Import (C, c_set_code_loc, \"__gnat_set_code_loc\");\n+\n+      --  Look for a code-range descriptor table containing the PC of the\n+      --  specified machine state. If we don't find any, attempting to unwind\n+      --  further would fail so we set the machine state's code location to a\n+      --  value indicating that the top of the call chain is reached. This\n+      --  happens when the function at the address pointed to by PC has not\n+      --  been registered with the unwinding machinery, as with the __istart\n+      --  functions generated by the linker in presence of initialization\n+      --  routines for example.\n+\n+      Prf : constant System.Address := exc_lookup_function (Get_Code_Loc (M));\n+\n    begin\n-      exc_virtual_unwind (System.Null_Address, M);\n+      if (Prf = System.Null_Address) then\n+         c_set_code_loc (M, 0);\n+      else\n+         exc_virtual_unwind (Prf, M);\n+      end if;\n    end Pop_Frame;\n \n    -----------------------\n@@ -157,7 +176,6 @@ package body System.Machine_State_Operations is\n    procedure Set_Machine_State (M : Machine_State) is\n       procedure c_capture_context (M : Machine_State);\n       pragma Import (C, c_capture_context, \"exc_capture_context\");\n-\n    begin\n       c_capture_context (M);\n       Pop_Frame (M, System.Null_Address);\n@@ -173,7 +191,6 @@ package body System.Machine_State_Operations is\n    is\n       pragma Warnings (Off, M);\n       pragma Warnings (Off, Context);\n-\n    begin\n       null;\n    end Set_Signal_Machine_State;"}]}