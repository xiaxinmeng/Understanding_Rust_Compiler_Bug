{"sha": "464b6c1117aa4b95cc4c7389cdb145461fc945be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY0YjZjMTExN2FhNGI5NWNjNGM3Mzg5Y2RiMTQ1NDYxZmM5NDViZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-10-13T17:32:07Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-10-13T17:32:07Z"}, "message": "dwarf2cfi.c (struct dw_trace_info): Add args_size_defined_for_eh.\n\n\t* dwarf2cfi.c (struct dw_trace_info): Add args_size_defined_for_eh.\n\t(notice_args_size): Set it in the current trace if no insn that can\n\tthrow internally has been seen yet.\n\t(connect_traces): When connecting args_size between traces, allow the\n\tincoming values not to match if there is an insn setting it before the\n\tfirst insn that can throw internally; in that case, force the creation\n\tof a CFI note on this latter insn.\n\nFrom-SVN: r265142", "tree": {"sha": "020b9b1990641df80764fa9e680a14a7be7999c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/020b9b1990641df80764fa9e680a14a7be7999c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/464b6c1117aa4b95cc4c7389cdb145461fc945be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/464b6c1117aa4b95cc4c7389cdb145461fc945be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/464b6c1117aa4b95cc4c7389cdb145461fc945be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/464b6c1117aa4b95cc4c7389cdb145461fc945be/comments", "author": null, "committer": null, "parents": [{"sha": "f77bca9ac3942b830c1e508bc5ac6fd0df2056f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f77bca9ac3942b830c1e508bc5ac6fd0df2056f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f77bca9ac3942b830c1e508bc5ac6fd0df2056f7"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "49770e78a8539480743ada9f6ac5155a82b4930a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464b6c1117aa4b95cc4c7389cdb145461fc945be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464b6c1117aa4b95cc4c7389cdb145461fc945be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=464b6c1117aa4b95cc4c7389cdb145461fc945be", "patch": "@@ -1,3 +1,13 @@\n+2018-10-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* dwarf2cfi.c (struct dw_trace_info): Add args_size_defined_for_eh.\n+\t(notice_args_size): Set it in the current trace if no insn that can\n+\tthrow internally has been seen yet.\n+\t(connect_traces): When connecting args_size between traces, allow the\n+\tincoming values not to match if there is an insn setting it before the\n+\tfirst insn that can throw internally; in that case, force the creation\n+\tof a CFI note on this latter insn.\n+\n 2018-10-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* opt-problem.h (opt_wrapper): Use template-argument-list when naming"}, {"sha": "162d9f64f188f4f4a1a11c7c788cc3b514270018", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464b6c1117aa4b95cc4c7389cdb145461fc945be/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464b6c1117aa4b95cc4c7389cdb145461fc945be/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=464b6c1117aa4b95cc4c7389cdb145461fc945be", "patch": "@@ -147,6 +147,9 @@ struct dw_trace_info\n \n   /* True if we've seen different values incoming to beg_true_args_size.  */\n   bool args_size_undefined;\n+\n+  /* True if we've seen an insn with a REG_ARGS_SIZE note before EH_HEAD.  */\n+  bool args_size_defined_for_eh;\n };\n \n \n@@ -942,6 +945,9 @@ notice_args_size (rtx_insn *insn)\n   if (note == NULL)\n     return;\n \n+  if (!cur_trace->eh_head)\n+    cur_trace->args_size_defined_for_eh = true;\n+\n   args_size = get_args_size (note);\n   delta = args_size - cur_trace->end_true_args_size;\n   if (known_eq (delta, 0))\n@@ -2820,11 +2826,17 @@ connect_traces (void)\n \n \t  if (ti->switch_sections)\n \t    prev_args_size = 0;\n+\n \t  if (ti->eh_head == NULL)\n \t    continue;\n-\t  gcc_assert (!ti->args_size_undefined);\n \n-\t  if (maybe_ne (ti->beg_delay_args_size, prev_args_size))\n+\t  /* We require either the incoming args_size values to match or the\n+\t     presence of an insn setting it before the first EH insn.  */\n+\t  gcc_assert (!ti->args_size_undefined || ti->args_size_defined_for_eh);\n+\n+\t  /* In the latter case, we force the creation of a CFI note.  */\n+\t  if (ti->args_size_undefined\n+\t      || maybe_ne (ti->beg_delay_args_size, prev_args_size))\n \t    {\n \t      /* ??? Search back to previous CFI note.  */\n \t      add_cfi_insn = PREV_INSN (ti->eh_head);"}]}