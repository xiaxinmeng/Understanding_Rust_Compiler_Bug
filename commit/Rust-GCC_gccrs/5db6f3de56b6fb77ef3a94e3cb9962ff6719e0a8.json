{"sha": "5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRiNmYzZGU1NmI2ZmI3N2VmM2E5NGUzY2I5OTYyZmY2NzE5ZTBhOA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-04-26T02:23:52Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-04-26T02:23:52Z"}, "message": "std_cmath.h (std): Explicitly inject c99 names.\n\n\n2001-04-25  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/c_std/bits/std_cmath.h (std): Explicitly inject c99 names.\n\t* include/c_std/bits/std_cstdlib.h (std): Same, except for llabs.\n\t* include/c_std/bits/std_cwchar.h (std): Same.\n\t* acconfig.h (std): Remove c99 injection into std.\n\t* config.h.in: Regenerate.\n\n\t* testsuite/README: Fix typo.\n\n\t* include/bits/codecvt.h: Remove warnings.\n\nFrom-SVN: r41568", "tree": {"sha": "90cb7664605cb51966af7586d487d9d26ffc94ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90cb7664605cb51966af7586d487d9d26ffc94ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8/comments", "author": null, "committer": null, "parents": [{"sha": "0cd99be7377980b537d5b3a5c1b2903f6b114d9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd99be7377980b537d5b3a5c1b2903f6b114d9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cd99be7377980b537d5b3a5c1b2903f6b114d9b"}], "stats": {"total": 110, "additions": 70, "deletions": 40}, "files": [{"sha": "342c0be75186c02b58492f8b664f2cd9bbb0c89c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8", "patch": "@@ -1,3 +1,15 @@\n+2001-04-25  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/c_std/bits/std_cmath.h (std): Explicitly inject c99 names.\n+\t* include/c_std/bits/std_cstdlib.h (std): Same, except for llabs.\n+\t* include/c_std/bits/std_cwchar.h (std): Same.\n+\t* acconfig.h (std): Remove c99 injection into std.\n+\t* config.h.in: Regenerate.\n+\t\n+\t* testsuite/README: Fix typo.\n+\n+\t* include/bits/codecvt.h: Remove warnings.\n+\t\n 2001-04-24  Peter Schmid  <schmid@snake.iap.physik.tu-darmstadt.de>\n \n         * include/ext/slist: Include required header files. "}, {"sha": "d1c674a9b292faaa638a4655364328a36ab6beac", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8", "patch": "@@ -98,16 +98,6 @@\n // Systems that have certain non-standard functions prefixed with an\n // underscore, we'll handle those here. Must come after config.h.in.\n //\n-\n-#if defined(_GLIBCPP_USE_C99) && defined(__cplusplus)\n-// Placeholder for declarations in c99 namespace.\n-namespace std\n-{\n-  namespace c99 { }\n-  using namespace c99;\n-}\n-#endif\n-\n #if defined (HAVE__ISNAN) && ! defined (HAVE_ISNAN)\n # define HAVE_ISNAN 1\n # define isnan _isnan"}, {"sha": "4aef4005467c463d03472731b2c1363743d29836", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8", "patch": "@@ -559,16 +559,6 @@\n // Systems that have certain non-standard functions prefixed with an\n // underscore, we'll handle those here. Must come after config.h.in.\n //\n-\n-#if defined(_GLIBCPP_USE_C99) && defined(__cplusplus)\n-// Placeholder for declarations in c99 namespace.\n-namespace std\n-{\n-  namespace c99 { }\n-  using namespace c99;\n-}\n-#endif\n-\n #if defined (HAVE__ISNAN) && ! defined (HAVE_ISNAN)\n # define HAVE_ISNAN 1\n # define isnan _isnan"}, {"sha": "badc7fbf1294d5092cbe66a675492efb50866b76", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8", "patch": "@@ -442,7 +442,7 @@\n \t    }\n \t  else \n \t    {\n-\t      if (__flen < __from_end - __from)\n+\t      if (__flen < static_cast<size_t>(__from_end - __from))\n \t\t{\n \t\t  __from_next = reinterpret_cast<const intern_type*>(__cfrom);\n \t\t  __to_next = reinterpret_cast<extern_type*>(__cto);\n@@ -548,7 +548,7 @@\n \t    }\n \t  else \n \t    {\n-\t      if (__flen < __from_end - __from)\n+\t      if (__flen < static_cast<size_t>(__from_end - __from))\n \t\t{\n \t\t  __from_next = reinterpret_cast<const extern_type*>(__cfrom);\n \t\t  __to_next = reinterpret_cast<intern_type*>(__cto);\n@@ -576,7 +576,7 @@\n   template<typename _InternT, typename _ExternT>\n     int \n     codecvt<_InternT, _ExternT, __enc_traits>::\n-    do_length(const state_type& __state, const extern_type* __from, \n+    do_length(const state_type&, const extern_type* __from, \n \t      const extern_type* __end, size_t __max) const\n     { return min(__max, static_cast<size_t>(__end - __from)); }\n "}, {"sha": "d37f900c13920230fd5047d95ee72d8d7a919478", "filename": "libstdc++-v3/include/c_std/bits/std_cmath.h", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cmath.h?ref=5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8", "patch": "@@ -722,13 +722,30 @@ namespace c99\n \n   template<typename _Tp>\n     int \n-    islessgreater(_Tp __f) { return __capture_islessgreater(__f); }\n+    islessgreater(_Tp __f1, _Tp __f2) \n+    { return __capture_islessgreater(__f1, __f2); }\n \n   template<typename _Tp>\n     int \n     isunordered(_Tp __f1, _Tp __f2) \n     { return __capture_isunordered(__f1, __f2); }\n }\n+\n+namespace std\n+{\n+  using c99::fpclassify;\n+  using c99::isfinite;\n+  using c99::isinf;\n+  using c99::isnan;\n+  using c99::isnormal;\n+  using c99::signbit;\n+  using c99::isgreater;\n+  using c99::isgreaterequal;\n+  using c99::isless;\n+  using c99::islessequal;\n+  using c99::islessgreater;\n+  using c99::isunordered;\n+}\n #endif\n   \n #ifdef _GLIBCPP_NO_TEMPLATE_EXPORT"}, {"sha": "50ef5830ba9bc795448d8f039e3ee7de787c5f87", "filename": "libstdc++-v3/include/c_std/bits/std_cstdlib.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdlib.h?ref=5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8", "patch": "@@ -152,6 +152,21 @@ namespace c99\n   extern \"C\" long double strtold(const char*, char**); \n #endif\n } // namespace c99\n+\n+namespace std\n+{\n+  using c99::lldiv_t;\n+  using c99::abs;\n+  //using c99::llabs; // XXX ???\n+  using c99::div;\n+  using c99::lldiv;\n+  using c99::atoll;\n+  using c99::strtoll;\n+  using c99::strtoull;\n+#ifdef _GLIBCPP_HAVE_STRTOLD\n+  using c99::strtold;\n+#endif\n+}\n #endif\n \n #endif "}, {"sha": "0919ab0d5bf8a14c5e7ddc1c26fcecb7f074b5a1", "filename": "libstdc++-v3/include/c_std/bits/std_cwchar.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h?ref=5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8", "patch": "@@ -204,6 +204,13 @@ namespace c99\n   extern \"C\" long long int wcstoll(const wchar_t*, wchar_t**, int); \n   extern \"C\" unsigned long long int wcstoull(const wchar_t*, wchar_t**, int); \n }\n+\n+namespace std\n+{\n+  using c99::wcstold;\n+  using c99::wcstoll;\n+  using c99::wcstoull;\n+}\n #endif\n \n #endif //_GLIBCPP_USE_WCHAR_T"}, {"sha": "132cebf5ab7c9e31b473e8fee0262f64c1be01d1", "filename": "libstdc++-v3/testsuite/26_numerics/c99_classification_macros_c++.cc", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fc99_classification_macros_c%2B%2B.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fc99_classification_macros_c%2B%2B.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fc99_classification_macros_c%2B%2B.cc?ref=5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8", "patch": "@@ -59,34 +59,33 @@ void isunordered() { }\n template <typename _Tp>\n   void test_c99_classify()\n   {\n-    using namespace std;\n-    test = bool;\n+    bool test = true;\n \n     typedef _Tp fp_type;\n     fp_type f1 = 1.0;\n     fp_type f2 = 3.0;\n     int res = 0;\n     \n-    res = fpclassify(f1);\n-    res = isfinite(f2);\n-    res = isinf(f1);\n-    res = isnan(f2);\n-    res = isnormal(f1);\n-    res = signbit(f2);\n-    res = isgreater(f1, f2);\n-    res = isgreaterequal(f1, f2);\n-    res = isless(f1, f2);\n-    res = islessequal(f1,f2);\n-    res = islessgreater(f1, f2);\n-    res = isunordered(f1, f2);\n+    res = std::fpclassify(f1);\n+    res = std::isfinite(f2);\n+    res = std::isinf(f1);\n+    res = std::isnan(f2);\n+    res = std::isnormal(f1);\n+    res = std::signbit(f2);\n+    res = std::isgreater(f1, f2);\n+    res = std::isgreaterequal(f1, f2);\n+    res = std::isless(f1, f2);\n+    res = std::islessequal(f1,f2);\n+    res = std::islessgreater(f1, f2);\n+    res = std::isunordered(f1, f2);\n   }\n #endif\n \n int main()\n {\n #if _GLIBCPP_USE_C99\n   test_c99_classify<float>();\n-  test_c99_classify<double>();\n+  //test_c99_classify<double>();\n #endif\n   return 0;\n }"}, {"sha": "61c6bd2168474aca200ef3b3e5af0234832fa27c", "filename": "libstdc++-v3/testsuite/README", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8/libstdc%2B%2B-v3%2Ftestsuite%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8/libstdc%2B%2B-v3%2Ftestsuite%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FREADME?ref=5db6f3de56b6fb77ef3a94e3cb9962ff6719e0a8", "patch": "@@ -8,7 +8,7 @@ testcases should be written with the new style DejaGnu framework in\n mind.\n \n To ease transition, here is the list of dg-keyword documentation\n-lifted from dg.exp -- eventuaklly we should improve DejaGnu\n+lifted from dg.exp -- eventually we should improve DejaGnu\n documentation, but getting checkin account currently demands Pyrrhic\n effort. \n "}]}