{"sha": "117fdbfa24eaad74ae3b80bce79f0152fe2e776a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE3ZmRiZmEyNGVhYWQ3NGFlM2I4MGJjZTc5ZjAxNTJmZTJlNzc2YQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-03-22T22:46:13Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-03-22T22:46:13Z"}, "message": "sh.c (sh_handle_option): Access target_flags via opts pointer.\n\n\t* config/sh/sh.c (sh_handle_option): Access target_flags via opts\n\tpointer.  Don't assert that global structures are in use.\n\nFrom-SVN: r171326", "tree": {"sha": "6c31f2d4d861d2085bf0de89892bf03178d71b7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c31f2d4d861d2085bf0de89892bf03178d71b7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/117fdbfa24eaad74ae3b80bce79f0152fe2e776a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/117fdbfa24eaad74ae3b80bce79f0152fe2e776a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/117fdbfa24eaad74ae3b80bce79f0152fe2e776a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/117fdbfa24eaad74ae3b80bce79f0152fe2e776a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d715091c4551d42e0620989c526abf9d2d12aeff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d715091c4551d42e0620989c526abf9d2d12aeff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d715091c4551d42e0620989c526abf9d2d12aeff"}], "stats": {"total": 72, "additions": 45, "deletions": 27}, "files": [{"sha": "88c6de6139931badad1b15f8832b9cacd465e9df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117fdbfa24eaad74ae3b80bce79f0152fe2e776a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117fdbfa24eaad74ae3b80bce79f0152fe2e776a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=117fdbfa24eaad74ae3b80bce79f0152fe2e776a", "patch": "@@ -1,3 +1,8 @@\n+2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/sh/sh.c (sh_handle_option): Access target_flags via opts\n+\tpointer.  Don't assert that global structures are in use.\n+\n 2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/pdp11/pdp11.c (pdp11_handle_option): Access target_flags"}, {"sha": "926c2f59ddc45496710f16f9ddee627b6355b696", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 40, "deletions": 27, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117fdbfa24eaad74ae3b80bce79f0152fe2e776a/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117fdbfa24eaad74ae3b80bce79f0152fe2e776a/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=117fdbfa24eaad74ae3b80bce79f0152fe2e776a", "patch": "@@ -606,58 +606,59 @@ struct gcc_target targetm = TARGET_INITIALIZER;\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-sh_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+sh_handle_option (struct gcc_options *opts,\n+\t\t  struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n \t\t  const struct cl_decoded_option *decoded,\n \t\t  location_t loc ATTRIBUTE_UNUSED)\n {\n   size_t code = decoded->opt_index;\n \n-  gcc_assert (opts == &global_options);\n-  gcc_assert (opts_set == &global_options_set);\n-\n   switch (code)\n     {\n     case OPT_m1:\n-      target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH1;\n+      opts->x_target_flags = (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH1;\n       return true;\n \n     case OPT_m2:\n-      target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH2;\n+      opts->x_target_flags = (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH2;\n       return true;\n \n     case OPT_m2a:\n-      target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH2A;\n+      opts->x_target_flags = (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH2A;\n       return true;\n \n     case OPT_m2a_nofpu:\n-      target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH2A_NOFPU;\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH2A_NOFPU;\n       return true;\n \n     case OPT_m2a_single:\n-      target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH2A_SINGLE;\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH2A_SINGLE;\n       return true;\n \n     case OPT_m2a_single_only:\n-      target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH2A_SINGLE_ONLY;\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH2A_SINGLE_ONLY;\n       return true;\n \n     case OPT_m2e:\n-      target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH2E;\n+      opts->x_target_flags = (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH2E;\n       return true;\n \n     case OPT_m3:\n-      target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH3;\n+      opts->x_target_flags = (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH3;\n       return true;\n \n     case OPT_m3e:\n-      target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH3E;\n+      opts->x_target_flags = (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH3E;\n       return true;\n \n     case OPT_m4:\n     case OPT_m4_100:\n     case OPT_m4_200:\n     case OPT_m4_300:\n-      target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH4;\n+      opts->x_target_flags = (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH4;\n       return true;\n \n     case OPT_m4_nofpu:\n@@ -667,62 +668,74 @@ sh_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n     case OPT_m4_340:\n     case OPT_m4_400:\n     case OPT_m4_500:\n-      target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH4_NOFPU;\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH4_NOFPU;\n       return true;\n \n     case OPT_m4_single:\n     case OPT_m4_100_single:\n     case OPT_m4_200_single:\n     case OPT_m4_300_single:\n-      target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH4_SINGLE;\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH4_SINGLE;\n       return true;\n \n     case OPT_m4_single_only:\n     case OPT_m4_100_single_only:\n     case OPT_m4_200_single_only:\n     case OPT_m4_300_single_only:\n-      target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH4_SINGLE_ONLY;\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH4_SINGLE_ONLY;\n       return true;\n \n     case OPT_m4a:\n-      target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH4A;\n+      opts->x_target_flags = (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH4A;\n       return true;\n \n     case OPT_m4a_nofpu:\n     case OPT_m4al:\n-      target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH4A_NOFPU;\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH4A_NOFPU;\n       return true;\n \n     case OPT_m4a_single:\n-      target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH4A_SINGLE;\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH4A_SINGLE;\n       return true;\n \n     case OPT_m4a_single_only:\n-      target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH4A_SINGLE_ONLY;\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH4A_SINGLE_ONLY;\n       return true;\n \n     case OPT_m5_32media:\n-      target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH5_32MEDIA;\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH5_32MEDIA;\n       return true;\n \n     case OPT_m5_32media_nofpu:\n-      target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH5_32MEDIA_NOFPU;\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH5_32MEDIA_NOFPU;\n       return true;\n \n     case OPT_m5_64media:\n-      target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH5_64MEDIA;\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH5_64MEDIA;\n       return true;\n \n     case OPT_m5_64media_nofpu:\n-      target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH5_64MEDIA_NOFPU;\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH5_64MEDIA_NOFPU;\n       return true;\n \n     case OPT_m5_compact:\n-      target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH5_COMPACT;\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH5_COMPACT;\n       return true;\n \n     case OPT_m5_compact_nofpu:\n-      target_flags = (target_flags & ~MASK_ARCH) | SELECT_SH5_COMPACT_NOFPU;\n+      opts->x_target_flags\n+\t= (opts->x_target_flags & ~MASK_ARCH) | SELECT_SH5_COMPACT_NOFPU;\n       return true;\n \n     default:"}]}