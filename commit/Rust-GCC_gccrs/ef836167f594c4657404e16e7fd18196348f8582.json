{"sha": "ef836167f594c4657404e16e7fd18196348f8582", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY4MzYxNjdmNTk0YzQ2NTc0MDRlMTZlN2ZkMTgxOTYzNDhmODU4Mg==", "commit": {"author": {"name": "Michael Meissner", "email": "Michael Meissner meissner@linux.ibm.com", "date": "2020-05-05T18:01:48Z"}, "committer": {"name": "Michael Meissner", "email": "Michael Meissner meissner@linux.ibm.com", "date": "2020-05-05T18:03:30Z"}, "message": "Delete changes meant for a private branch.\n\n2020-05-05  Michael Meissner  <meissner@linux.ibm.com>\n\n\t* config/rs6000/rs6000-builtin.def: Delete changes meant for a\n\tprivate branch.\n\t* config/rs6000/rs6000-c.c: Likewise.\n\t* config/rs6000/rs6000-call.c: Likewise.\n\t* gcc/config/rs6000/rs6000.c: Likewise.\n\n2020-05-05  Michael Meissner  <meissner@linux.ibm.com>\n\n\t* gcc.dg/nextafter-2.c: Delete changes meant for a private branch.\n\t* gcc.target/powerpc/pr70117.c: Likewise.\n\n2020-05-05  Michael Meissner  <meissner@linux.ibm.com>\n\n\t* config.host: Delete changes meant for a private branch.\n\t* config/rs6000/t-float128: Likewise.\n\t* configure.ac: Likewise.\n\t* configure: Likewise.", "tree": {"sha": "f3e1892ee75c9fdfe5293a7aa27434f0860e4c03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3e1892ee75c9fdfe5293a7aa27434f0860e4c03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef836167f594c4657404e16e7fd18196348f8582", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef836167f594c4657404e16e7fd18196348f8582", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef836167f594c4657404e16e7fd18196348f8582", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef836167f594c4657404e16e7fd18196348f8582/comments", "author": null, "committer": null, "parents": [{"sha": "3338afa4a3416f5d9a77c8d888f4a46052af186a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3338afa4a3416f5d9a77c8d888f4a46052af186a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3338afa4a3416f5d9a77c8d888f4a46052af186a"}], "stats": {"total": 418, "additions": 62, "deletions": 356}, "files": [{"sha": "15ac1c3c4df634ec1ef2f9d7ef7a06c04ec3fafc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef836167f594c4657404e16e7fd18196348f8582/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef836167f594c4657404e16e7fd18196348f8582/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef836167f594c4657404e16e7fd18196348f8582", "patch": "@@ -1,3 +1,11 @@\n+2020-05-05  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtin.def: Delete changes meant for a\n+\tprivate branch.\n+\t* config/rs6000/rs6000-c.c: Likewise.\n+\t* config/rs6000/rs6000-call.c: Likewise.\n+\t* gcc/config/rs6000/rs6000.c: Likewise.\n+\n 2020-05-05  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \t* config/rtems.h (RTEMS_STARTFILE_SPEC): Define if undefined."}, {"sha": "54f750c8384c8905267910e5eb08544906d83b1d", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef836167f594c4657404e16e7fd18196348f8582/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef836167f594c4657404e16e7fd18196348f8582/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=ef836167f594c4657404e16e7fd18196348f8582", "patch": "@@ -2154,11 +2154,8 @@ BU_P9V_64BIT_VSX_1 (VSESDP,\t\"scalar_extract_sig\",\tCONST,\txsxsigdp)\n \n BU_FLOAT128_HW_VSX_1 (VSEEQP,\t\"scalar_extract_expq\",\tCONST,\txsxexpqp_kf)\n BU_FLOAT128_HW_VSX_1 (VSESQP,\t\"scalar_extract_sigq\",\tCONST,\txsxsigqp_kf)\n-BU_FLOAT128_HW_VSX_1 (VSEETF,\t\"scalar_extract_exptf\",\tCONST,\txsxexpqp_tf)\n-BU_FLOAT128_HW_VSX_1 (VSESTF,\t\"scalar_extract_sigtf\",\tCONST,\txsxsigqp_tf)\n \n BU_FLOAT128_HW_VSX_1 (VSTDCNQP, \"scalar_test_neg_qp\",\tCONST,\txststdcnegqp_kf)\n-BU_FLOAT128_HW_VSX_1 (VSTDCNTF, \"scalar_test_neg_tf\",\tCONST,\txststdcnegqp_tf)\n BU_P9V_VSX_1 (VSTDCNDP,\t\"scalar_test_neg_dp\",\tCONST,\txststdcnegdp)\n BU_P9V_VSX_1 (VSTDCNSP,\t\"scalar_test_neg_sp\",\tCONST,\txststdcnegsp)\n \n@@ -2176,8 +2173,6 @@ BU_P9V_64BIT_VSX_2 (VSIEDPF,\t\"scalar_insert_exp_dp\",\tCONST,\txsiexpdpf)\n \n BU_FLOAT128_HW_VSX_2 (VSIEQP,\t\"scalar_insert_exp_q\",\tCONST,\txsiexpqp_kf)\n BU_FLOAT128_HW_VSX_2 (VSIEQPF,\t\"scalar_insert_exp_qp\",\tCONST,\txsiexpqpf_kf)\n-BU_FLOAT128_HW_VSX_2 (VSIETF,\t\"scalar_insert_exp_tf\",\tCONST,\txsiexpqp_tf)\n-BU_FLOAT128_HW_VSX_2 (VSIETFF,\t\"scalar_insert_exp_tfp\", CONST,\txsiexpqpf_tf)\n \n BU_P9V_VSX_2 (VSCEDPGT,\t\"scalar_cmp_exp_dp_gt\",\tCONST,\txscmpexpdp_gt)\n BU_P9V_VSX_2 (VSCEDPLT,\t\"scalar_cmp_exp_dp_lt\",\tCONST,\txscmpexpdp_lt)\n@@ -2189,13 +2184,7 @@ BU_P9V_VSX_2 (VSCEQPLT,\t\"scalar_cmp_exp_qp_lt\",\tCONST,\txscmpexpqp_lt_kf)\n BU_P9V_VSX_2 (VSCEQPEQ,\t\"scalar_cmp_exp_qp_eq\",\tCONST,\txscmpexpqp_eq_kf)\n BU_P9V_VSX_2 (VSCEQPUO,\t\"scalar_cmp_exp_qp_unordered\",\tCONST,\txscmpexpqp_unordered_kf)\n \n-BU_P9V_VSX_2 (VSCETFGT,\t\"scalar_cmp_exp_tf_gt\",\tCONST,\txscmpexpqp_gt_tf)\n-BU_P9V_VSX_2 (VSCETFLT,\t\"scalar_cmp_exp_tf_lt\",\tCONST,\txscmpexpqp_lt_tf)\n-BU_P9V_VSX_2 (VSCETFEQ,\t\"scalar_cmp_exp_tf_eq\",\tCONST,\txscmpexpqp_eq_tf)\n-BU_P9V_VSX_2 (VSCETFUO,\t\"scalar_cmp_exp_tf_unordered\", CONST, xscmpexpqp_unordered_tf)\n-\n BU_FLOAT128_HW_VSX_2 (VSTDCQP, \"scalar_test_data_class_qp\",\tCONST,\txststdcqp_kf)\n-BU_FLOAT128_HW_VSX_2 (VSTDCTF, \"scalar_test_data_class_tf\",\tCONST,\txststdcqp_tf)\n BU_P9V_VSX_2 (VSTDCDP,\t\"scalar_test_data_class_dp\",\tCONST,\txststdcdp)\n BU_P9V_VSX_2 (VSTDCSP,\t\"scalar_test_data_class_sp\",\tCONST,\txststdcsp)\n "}, {"sha": "e59eff95cf4b11cd13f78b6bc97aac380525ed44", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 7, "deletions": 31, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef836167f594c4657404e16e7fd18196348f8582/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef836167f594c4657404e16e7fd18196348f8582/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=ef836167f594c4657404e16e7fd18196348f8582", "patch": "@@ -675,39 +675,15 @@ rs6000_cpu_cpp_builtins (cpp_reader *pfile)\n       builtin_define (\"__builtin_vsx_xvnmsubmsp=__builtin_vsx_xvnmsubsp\");\n     }\n \n-  /* Map the old _Float128 'q' builtins into the new 'f128' builtins if long\n-     double is IBM or 64-bit.\n-\n-     However, if long double is IEEE 128-bit, map both sets of built-in\n-     functions to the normal long double version.  This shows up in nansf128\n-     vs. nanf128.  */\n+  /* Map the old _Float128 'q' builtins into the new 'f128' builtins.  */\n   if (TARGET_FLOAT128_TYPE)\n     {\n-      if (FLOAT128_IEEE_P (TFmode))\n-\t{\n-\t  builtin_define (\"__builtin_fabsq=__builtin_fabsl\");\n-\t  builtin_define (\"__builtin_copysignq=__builtin_copysignl\");\n-\t  builtin_define (\"__builtin_nanq=__builtin_nanl\");\n-\t  builtin_define (\"__builtin_nansq=__builtin_nansl\");\n-\t  builtin_define (\"__builtin_infq=__builtin_infl\");\n-\t  builtin_define (\"__builtin_huge_valq=__builtin_huge_vall\");\n-\n-\t  builtin_define (\"__builtin_fabsf128=__builtin_fabsl\");\n-\t  builtin_define (\"__builtin_copysignf128=__builtin_copysignl\");\n-\t  builtin_define (\"__builtin_nanf128=__builtin_nanl\");\n-\t  builtin_define (\"__builtin_nansf128=__builtin_nansl\");\n-\t  builtin_define (\"__builtin_inff128=__builtin_infl\");\n-\t  builtin_define (\"__builtin_huge_valf128=__builtin_huge_vall\");\n-\t}\n-      else\n-\t{\n-\t  builtin_define (\"__builtin_fabsq=__builtin_fabsf128\");\n-\t  builtin_define (\"__builtin_copysignq=__builtin_copysignf128\");\n-\t  builtin_define (\"__builtin_nanq=__builtin_nanf128\");\n-\t  builtin_define (\"__builtin_nansq=__builtin_nansf128\");\n-\t  builtin_define (\"__builtin_infq=__builtin_inff128\");\n-\t  builtin_define (\"__builtin_huge_valq=__builtin_huge_valf128\");\n-\t}\n+      builtin_define (\"__builtin_fabsq=__builtin_fabsf128\");\n+      builtin_define (\"__builtin_copysignq=__builtin_copysignf128\");\n+      builtin_define (\"__builtin_nanq=__builtin_nanf128\");\n+      builtin_define (\"__builtin_nansq=__builtin_nansf128\");\n+      builtin_define (\"__builtin_infq=__builtin_inff128\");\n+      builtin_define (\"__builtin_huge_valq=__builtin_huge_valf128\");\n     }\n \n   /* Tell users they can use __builtin_bswap{16,64}.  */"}, {"sha": "68164b912f066c0b4e16f92d599bb37600cdfa9e", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef836167f594c4657404e16e7fd18196348f8582/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef836167f594c4657404e16e7fd18196348f8582/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=ef836167f594c4657404e16e7fd18196348f8582", "patch": "@@ -4565,49 +4565,37 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_bool_int, RS6000_BTI_double, RS6000_BTI_INTSI, 0 },\n   { P9V_BUILTIN_VEC_VSTDC, P9V_BUILTIN_VSTDCQP,\n     RS6000_BTI_bool_int, RS6000_BTI_ieee128_float, RS6000_BTI_INTSI, 0 },\n-  { P9V_BUILTIN_VEC_VSTDC, P9V_BUILTIN_VSTDCTF,\n-    RS6000_BTI_bool_int, RS6000_BTI_long_double, RS6000_BTI_INTSI, 0 },\n \n   { P9V_BUILTIN_VEC_VSTDCSP, P9V_BUILTIN_VSTDCSP,\n     RS6000_BTI_bool_int, RS6000_BTI_float, RS6000_BTI_INTSI, 0 },\n   { P9V_BUILTIN_VEC_VSTDCDP, P9V_BUILTIN_VSTDCDP,\n     RS6000_BTI_bool_int, RS6000_BTI_double, RS6000_BTI_INTSI, 0 },\n   { P9V_BUILTIN_VEC_VSTDCQP, P9V_BUILTIN_VSTDCQP,\n     RS6000_BTI_bool_int, RS6000_BTI_ieee128_float, RS6000_BTI_INTSI, 0 },\n-  { P9V_BUILTIN_VEC_VSTDCQP, P9V_BUILTIN_VSTDCTF,\n-    RS6000_BTI_bool_int, RS6000_BTI_long_double, RS6000_BTI_INTSI, 0 },\n \n   { P9V_BUILTIN_VEC_VSTDCN, P9V_BUILTIN_VSTDCNSP,\n     RS6000_BTI_bool_int, RS6000_BTI_float, 0, 0 },\n   { P9V_BUILTIN_VEC_VSTDCN, P9V_BUILTIN_VSTDCNDP,\n     RS6000_BTI_bool_int, RS6000_BTI_double, 0, 0 },\n   { P9V_BUILTIN_VEC_VSTDCN, P9V_BUILTIN_VSTDCNQP,\n     RS6000_BTI_bool_int, RS6000_BTI_ieee128_float, 0, 0 },\n-  { P9V_BUILTIN_VEC_VSTDCN, P9V_BUILTIN_VSTDCNTF,\n-    RS6000_BTI_bool_int, RS6000_BTI_long_double, 0, 0 },\n \n   { P9V_BUILTIN_VEC_VSTDCNSP, P9V_BUILTIN_VSTDCNSP,\n     RS6000_BTI_bool_int, RS6000_BTI_float, 0, 0 },\n   { P9V_BUILTIN_VEC_VSTDCNDP, P9V_BUILTIN_VSTDCNDP,\n     RS6000_BTI_bool_int, RS6000_BTI_double, 0, 0 },\n   { P9V_BUILTIN_VEC_VSTDCNQP, P9V_BUILTIN_VSTDCNQP,\n     RS6000_BTI_bool_int, RS6000_BTI_ieee128_float, 0, 0 },\n-  { P9V_BUILTIN_VEC_VSTDCNQP, P9V_BUILTIN_VSTDCNTF,\n-    RS6000_BTI_bool_int, RS6000_BTI_long_double, 0, 0 },\n \n   { P9V_BUILTIN_VEC_VSEEDP, P9V_BUILTIN_VSEEDP,\n     RS6000_BTI_UINTSI, RS6000_BTI_double, 0, 0 },\n   { P9V_BUILTIN_VEC_VSEEDP, P9V_BUILTIN_VSEEQP,\n     RS6000_BTI_UINTDI, RS6000_BTI_ieee128_float, 0, 0 },\n-  { P9V_BUILTIN_VEC_VSEEDP, P9V_BUILTIN_VSEETF,\n-    RS6000_BTI_UINTDI, RS6000_BTI_long_double, 0, 0 },\n \n   { P9V_BUILTIN_VEC_VSESDP, P9V_BUILTIN_VSESDP,\n     RS6000_BTI_UINTDI, RS6000_BTI_double, 0, 0 },\n   { P9V_BUILTIN_VEC_VSESDP, P9V_BUILTIN_VSESQP,\n     RS6000_BTI_UINTTI, RS6000_BTI_ieee128_float, 0, 0 },\n-  { P9V_BUILTIN_VEC_VSESDP, P9V_BUILTIN_VSESTF,\n-    RS6000_BTI_UINTTI, RS6000_BTI_long_double, 0, 0 },\n \n   { P9V_BUILTIN_VEC_VSIEDP, P9V_BUILTIN_VSIEDP,\n     RS6000_BTI_double, RS6000_BTI_UINTDI, RS6000_BTI_UINTDI, 0 },\n@@ -4616,37 +4604,25 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n \n   { P9V_BUILTIN_VEC_VSIEDP, P9V_BUILTIN_VSIEQP,\n     RS6000_BTI_ieee128_float, RS6000_BTI_UINTTI, RS6000_BTI_UINTDI, 0 },\n-  { P9V_BUILTIN_VEC_VSIEDP, P9V_BUILTIN_VSIETF,\n-    RS6000_BTI_long_double, RS6000_BTI_UINTTI, RS6000_BTI_UINTDI, 0 },\n   { P9V_BUILTIN_VEC_VSIEDP, P9V_BUILTIN_VSIEQPF,\n     RS6000_BTI_ieee128_float, RS6000_BTI_ieee128_float, RS6000_BTI_UINTDI, 0 },\n-  { P9V_BUILTIN_VEC_VSIEDP, P9V_BUILTIN_VSIETFF,\n-    RS6000_BTI_long_double, RS6000_BTI_long_double, RS6000_BTI_UINTDI, 0 },\n \n   { P9V_BUILTIN_VEC_VSCEGT, P9V_BUILTIN_VSCEDPGT,\n     RS6000_BTI_INTSI, RS6000_BTI_double, RS6000_BTI_double, 0 },\n   { P9V_BUILTIN_VEC_VSCEGT, P9V_BUILTIN_VSCEQPGT,\n     RS6000_BTI_INTSI, RS6000_BTI_ieee128_float, RS6000_BTI_ieee128_float, 0 },\n-  { P9V_BUILTIN_VEC_VSCEGT, P9V_BUILTIN_VSCETFGT,\n-    RS6000_BTI_INTSI, RS6000_BTI_long_double, RS6000_BTI_long_double, 0 },\n   { P9V_BUILTIN_VEC_VSCELT, P9V_BUILTIN_VSCEDPLT,\n     RS6000_BTI_INTSI, RS6000_BTI_double, RS6000_BTI_double, 0 },\n   { P9V_BUILTIN_VEC_VSCELT, P9V_BUILTIN_VSCEQPLT,\n     RS6000_BTI_INTSI, RS6000_BTI_ieee128_float, RS6000_BTI_ieee128_float, 0 },\n-  { P9V_BUILTIN_VEC_VSCELT, P9V_BUILTIN_VSCETFLT,\n-    RS6000_BTI_INTSI, RS6000_BTI_long_double, RS6000_BTI_long_double, 0 },\n   { P9V_BUILTIN_VEC_VSCEEQ, P9V_BUILTIN_VSCEDPEQ,\n     RS6000_BTI_INTSI, RS6000_BTI_double, RS6000_BTI_double, 0 },\n   { P9V_BUILTIN_VEC_VSCEEQ, P9V_BUILTIN_VSCEQPEQ,\n     RS6000_BTI_INTSI, RS6000_BTI_ieee128_float, RS6000_BTI_ieee128_float, 0 },\n-  { P9V_BUILTIN_VEC_VSCEEQ, P9V_BUILTIN_VSCETFEQ,\n-    RS6000_BTI_INTSI, RS6000_BTI_long_double, RS6000_BTI_long_double, 0 },\n   { P9V_BUILTIN_VEC_VSCEUO, P9V_BUILTIN_VSCEDPUO,\n     RS6000_BTI_INTSI, RS6000_BTI_double, RS6000_BTI_double, 0 },\n   { P9V_BUILTIN_VEC_VSCEUO, P9V_BUILTIN_VSCEQPUO,\n     RS6000_BTI_INTSI, RS6000_BTI_ieee128_float, RS6000_BTI_ieee128_float, 0 },\n-  { P9V_BUILTIN_VEC_VSCEUO, P9V_BUILTIN_VSCETFUO,\n-    RS6000_BTI_INTSI, RS6000_BTI_long_double, RS6000_BTI_long_double, 0 },\n \n   { P9V_BUILTIN_VEC_XL_LEN_R, P9V_BUILTIN_XL_LEN_R,\n     RS6000_BTI_unsigned_V16QI, ~RS6000_BTI_UINTQI,\n@@ -11584,22 +11560,6 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       case CODE_FOR_xsiexpqp_kf:\ticode = CODE_FOR_xsiexpqp_tf;\tbreak;\n       case CODE_FOR_xsiexpqpf_kf:\ticode = CODE_FOR_xsiexpqpf_tf;\tbreak;\n       case CODE_FOR_xststdcqp_kf:\ticode = CODE_FOR_xststdcqp_tf;\tbreak;\n-\n-      case CODE_FOR_xscmpexpqp_eq_kf:\n-\ticode = CODE_FOR_xscmpexpqp_eq_tf;\n-\tbreak;\n-\n-      case CODE_FOR_xscmpexpqp_lt_kf:\n-\ticode = CODE_FOR_xscmpexpqp_lt_tf;\n-\tbreak;\n-\n-      case CODE_FOR_xscmpexpqp_gt_kf:\n-\ticode = CODE_FOR_xscmpexpqp_gt_tf;\n-\tbreak;\n-\n-      case CODE_FOR_xscmpexpqp_unordered_kf:\n-\ticode = CODE_FOR_xscmpexpqp_unordered_tf;\n-\tbreak;\n       }\n \n   if (TARGET_DEBUG_BUILTIN)"}, {"sha": "355aea8628def909bef27e6baaed8bbeae887207", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 31, "deletions": 98, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef836167f594c4657404e16e7fd18196348f8582/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef836167f594c4657404e16e7fd18196348f8582/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ef836167f594c4657404e16e7fd18196348f8582", "patch": "@@ -26326,122 +26326,55 @@ rs6000_globalize_decl_name (FILE * stream, tree decl)\n    library before you can switch the real*16 type at compile time.\n \n    We use the TARGET_MANGLE_DECL_ASSEMBLER_NAME hook to change this name.  We\n-   only do this transformation if the __float128 type is enabled.  This\n-   prevents us from doing the transformation on older 32-bit parts that might\n-   have enabled using IEEE 128-bit floating point as the default long double\n-   type.  */\n+   only do this if the default is that long double is IBM extended double, and\n+   the user asked for IEEE 128-bit.  */\n \n static tree\n rs6000_mangle_decl_assembler_name (tree decl, tree id)\n {\n-  if (TARGET_FLOAT128_TYPE && TARGET_IEEEQUAD && TARGET_LONG_DOUBLE_128\n-      && TREE_CODE (decl) == FUNCTION_DECL\n-      && fndecl_built_in_p (decl, BUILT_IN_NORMAL))\n+  if (!TARGET_IEEEQUAD_DEFAULT && TARGET_IEEEQUAD && TARGET_LONG_DOUBLE_128\n+      && TREE_CODE (decl) == FUNCTION_DECL && DECL_IS_BUILTIN (decl) )\n     {\n       size_t len = IDENTIFIER_LENGTH (id);\n       const char *name = IDENTIFIER_POINTER (id);\n-      const char *newname = NULL;\n \n-      /* See if it is one of the built-in functions with an unusual name.  */\n-      switch (DECL_FUNCTION_CODE (decl))\n+      if (name[len - 1] == 'l')\n \t{\n-\tdefault:\n-\t  break;\n-\n-\tcase BUILT_IN_GAMMAL_R:\n-\tcase BUILT_IN_LGAMMAL_R:\n-\t  newname = \"__lgammaieee128_r\";\n-\t  break;\n-\n-\tcase BUILT_IN_NEXTTOWARD:\n-\t  newname = \"__nexttoward_to_ieee128\";\n-\t  break;\n-\n-\tcase BUILT_IN_NEXTTOWARDF:\n-\t  newname = \"__nexttowardf_to_ieee128\";\n-\t  break;\n-\n-\tcase BUILT_IN_NEXTTOWARDL:\n-\t  newname = \"__nexttowardieee128\";\n-\t  break;\n-\t}\n-\n-      /* Update the __builtin_*printf && __builtin_*scanf functions.  */\n-      if (!newname)\n-\t{\n-\t  const size_t printf_len = sizeof (\"printf\") - 1;\n-\t  const size_t scanf_len = sizeof (\"scanf\") - 1;\n-\t  const size_t printf_extra\n-\t    = sizeof (\"__\") - 1 + sizeof (\"ieee128\") - 1;\n-\t  const size_t scanf_extra\n-\t    = sizeof (\"__isoc99_\") - 1 + sizeof (\"ieee128\") - 1;\n-\n-\t  if (len >= printf_len\n-\t      && strcmp (name + len - printf_len, \"printf\") == 0)\n-\t    {\n-\t      char *name2 = (char *) alloca (len + 1 + printf_extra);\n-\t      strcpy (name2, \"__\");\n-\t      memcpy (name2 + 2, name, len);\n-\t      strcpy (name2 + 2 + len, \"ieee128\");\n-\t      newname = (const char *) name2;\n-\t    }\n+\t  bool uses_ieee128_p = false;\n+\t  tree type = TREE_TYPE (decl);\n+\t  machine_mode ret_mode = TYPE_MODE (type);\n \n-\t  else if (len >= scanf_len\n-\t\t   && strcmp (name + len - scanf_len, \"scanf\") == 0)\n+\t  /* See if the function returns a IEEE 128-bit floating point type or\n+\t     complex type.  */\n+\t  if (ret_mode == TFmode || ret_mode == TCmode)\n+\t    uses_ieee128_p = true;\n+\t  else\n \t    {\n-\t      char *name2 = (char *) alloca (len + 1 + scanf_extra);\n-\t      strcpy (name2, \"__isoc99_\");\n-\t      memcpy (name2 + sizeof (\"__isoc99\") - 1, name, len);\n-\t      strcpy (name2 + sizeof (\"__isoc99\") - 1 + len, \"ieee128\");\n-\t      newname = (const char *) name2;\n-\t    }\n+\t      function_args_iterator args_iter;\n+\t      tree arg;\n \n-\t  else if (name[len - 1] == 'l')\n-\t    {\n-\t      bool uses_ieee128_p = false;\n-\t      tree type = TREE_TYPE (decl);\n-\t      machine_mode ret_mode = TYPE_MODE (type);\n-\n-\t      /* See if the function returns a IEEE 128-bit floating point type or\n-\t\t complex type.  */\n-\t      if (ret_mode == TFmode || ret_mode == TCmode)\n-\t\tuses_ieee128_p = true;\n-\t      else\n+\t      /* See if the function passes a IEEE 128-bit floating point type\n+\t\t or complex type.  */\n+\t      FOREACH_FUNCTION_ARGS (type, arg, args_iter)\n \t\t{\n-\t\t  function_args_iterator args_iter;\n-\t\t  tree arg;\n-\n-\t\t  /* See if the function passes a IEEE 128-bit floating point type\n-\t\t     or complex type.  */\n-\t\t  FOREACH_FUNCTION_ARGS (type, arg, args_iter)\n+\t\t  machine_mode arg_mode = TYPE_MODE (arg);\n+\t\t  if (arg_mode == TFmode || arg_mode == TCmode)\n \t\t    {\n-\t\t      machine_mode arg_mode = TYPE_MODE (arg);\n-\t\t      if (arg_mode == TFmode || arg_mode == TCmode)\n-\t\t\t{\n-\t\t\t  uses_ieee128_p = true;\n-\t\t\t  break;\n-\t\t\t}\n+\t\t      uses_ieee128_p = true;\n+\t\t      break;\n \t\t    }\n \t\t}\n-\n-\t      /* If we passed or returned an IEEE 128-bit floating point type,\n-\t\t change the name.  */\n-\t      if (uses_ieee128_p)\n-\t\t{\n-\t\t  char *name2 = (char *) alloca (len + 4);\n-\t\t  memcpy (name2, name, len - 1);\n-\t\t  strcpy (name2 + len - 1, \"f128\");\n-\t\t  newname = (const char *) name2;\n-\t\t}\n \t    }\n-\t}\n \n-      if (newname)\n-\t{\n-\t  if (TARGET_DEBUG_BUILTIN)\n-\t    fprintf (stderr, \"Map %s => %s\\n\", name, newname);\n-\n-\t  id = get_identifier (newname);\n+\t  /* If we passed or returned an IEEE 128-bit floating point type,\n+\t     change the name.  */\n+\t  if (uses_ieee128_p)\n+\t    {\n+\t      char *name2 = (char *) alloca (len + 4);\n+\t      memcpy (name2, name, len - 1);\n+\t      strcpy (name2 + len - 1, \"f128\");\n+\t      id = get_identifier (name2);\n+\t    }\n \t}\n     }\n "}, {"sha": "eeb502b3c2db58e25728d7548161929a90969508", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef836167f594c4657404e16e7fd18196348f8582/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef836167f594c4657404e16e7fd18196348f8582/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ef836167f594c4657404e16e7fd18196348f8582", "patch": "@@ -1,3 +1,8 @@\n+2020-05-05  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* gcc.dg/nextafter-2.c: Delete changes meant for a private branch.\n+\t* gcc.target/powerpc/pr70117.c: Likewise.\n+\n 2020-05-05  Dimitar Dimitrov  <dimitar@dinux.eu>\n \n \t* gcc.target/pru/clobber-sp.c: New test."}, {"sha": "e51ae94be0c27d9d025efba81ebb057d0ad54baa", "filename": "gcc/testsuite/gcc.dg/nextafter-2.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef836167f594c4657404e16e7fd18196348f8582/gcc%2Ftestsuite%2Fgcc.dg%2Fnextafter-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef836167f594c4657404e16e7fd18196348f8582/gcc%2Ftestsuite%2Fgcc.dg%2Fnextafter-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnextafter-2.c?ref=ef836167f594c4657404e16e7fd18196348f8582", "patch": "@@ -13,14 +13,4 @@\n #  define NO_LONG_DOUBLE 1\n # endif\n #endif\n-\n-#if defined(_ARCH_PPC) && defined(__LONG_DOUBLE_IEEE128__)\n-/* On PowerPC systems, long double uses either the IBM long double format, or\n-   IEEE 128-bit format.  The compiler switches the long double built-in\n-   function names and glibc switches the names when math.h is included.\n-   Because this test is run with -fno-builtin, include math.h so that the\n-   appropriate nextafter functions are called.  */\n-#include <math.h>\n-#endif\n-\n #include \"nextafter-1.c\""}, {"sha": "3bbd2c595e0426d55e782a77097385eb081db125", "filename": "gcc/testsuite/gcc.target/powerpc/pr70117.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef836167f594c4657404e16e7fd18196348f8582/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70117.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef836167f594c4657404e16e7fd18196348f8582/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70117.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70117.c?ref=ef836167f594c4657404e16e7fd18196348f8582", "patch": "@@ -9,11 +9,9 @@\n    128-bit floating point, because the type is not enabled on those\n    systems.  */\n #define LDOUBLE __ibm128\n-#define IBM128_MAX ((__ibm128) 1.79769313486231580793728971405301199e+308L)\n \n #elif defined(__LONG_DOUBLE_IBM128__)\n #define LDOUBLE long double\n-#define IBM128_MAX LDBL_MAX\n \n #else\n #error \"long double must be either IBM 128-bit or IEEE 128-bit\"\n@@ -77,10 +75,10 @@ main (void)\n   if (__builtin_isnormal (ld))\n     __builtin_abort ();\n \n-  ld = IBM128_MAX;\n+  ld = LDBL_MAX;\n   if (!__builtin_isnormal (ld))\n     __builtin_abort ();\n-  ld = -IBM128_MAX;\n+  ld = -LDBL_MAX;\n   if (!__builtin_isnormal (ld))\n     __builtin_abort ();\n "}, {"sha": "49d757f9061fa5fe0eea428205a19c7540b551d6", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef836167f594c4657404e16e7fd18196348f8582/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef836167f594c4657404e16e7fd18196348f8582/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=ef836167f594c4657404e16e7fd18196348f8582", "patch": "@@ -1,3 +1,10 @@\n+2020-05-05  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* config.host: Delete changes meant for a private branch.\n+\t* config/rs6000/t-float128: Likewise.\n+\t* configure.ac: Likewise.\n+\t* configure: Likewise.\n+\n 2020-05-05  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/93623"}, {"sha": "1ff41592337e2fea20ebaaaaeb489e08c723eacc", "filename": "libgcc/config.host", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef836167f594c4657404e16e7fd18196348f8582/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef836167f594c4657404e16e7fd18196348f8582/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=ef836167f594c4657404e16e7fd18196348f8582", "patch": "@@ -1220,9 +1220,6 @@ powerpc*-*-linux*)\n \n \tif test $libgcc_cv_powerpc_float128 = yes; then\n \t\ttmake_file=\"${tmake_file} rs6000/t-float128\"\n-\t\tif test $libgcc_cv_powerpc_float128_dec = no; then\n-\t\t\ttmake_file=\"${tmake_file} rs6000/t-float128-decimal\"\n-\t\tfi\n \tfi\n \n \tif test $libgcc_cv_powerpc_float128_hw = yes; then"}, {"sha": "d541344518902cbcf200a454c5efdf2fbe200d22", "filename": "libgcc/config/rs6000/t-float128", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef836167f594c4657404e16e7fd18196348f8582/libgcc%2Fconfig%2Frs6000%2Ft-float128", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef836167f594c4657404e16e7fd18196348f8582/libgcc%2Fconfig%2Frs6000%2Ft-float128", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-float128?ref=ef836167f594c4657404e16e7fd18196348f8582", "patch": "@@ -69,13 +69,6 @@ $(fp128_ppc_obj)\t : INTERNAL_CFLAGS += $(FP128_CFLAGS_SW)\n $(fp128_obj)\t\t : $(fp128_includes)\n $(fp128_obj)\t\t : $(srcdir)/config/rs6000/quad-float128.h\n \n-\n-# If we are switching the default long double type, we need to use\n-# -mno-gnu-attribute so that the __ibm128 support functions don't signal a\n-# linker error since the default long double is now IEEE 128-bit instead of IBM\n-# 128-bit.\n-ibm-ldouble$(objext)\t: INTERNAL_CFLAGS += -mno-gnu-attribute\n-\n $(fp128_softfp_src) : $(srcdir)/soft-fp/$(subst -sw,,$(subst kf,tf,$@)) $(fp128_dep)\n \t@src=\"$(srcdir)/soft-fp/$(subst -sw,,$(subst kf,tf,$@))\"; \\\n \techo \"Create $@\"; \\"}, {"sha": "26bf75789e0d999fd5edbdc6e93d356474b298be", "filename": "libgcc/configure", "status": "modified", "additions": 1, "deletions": 107, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef836167f594c4657404e16e7fd18196348f8582/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef836167f594c4657404e16e7fd18196348f8582/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=ef836167f594c4657404e16e7fd18196348f8582", "patch": "@@ -1801,52 +1801,6 @@ $as_echo \"$ac_res\" >&6; }\n   eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n \n } # ac_fn_c_check_header_preproc\n-\n-# ac_fn_c_try_link LINENO\n-# -----------------------\n-# Try to link conftest.$ac_ext, and return whether this succeeded.\n-ac_fn_c_try_link ()\n-{\n-  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n-  rm -f conftest.$ac_objext conftest$ac_exeext\n-  if { { ac_try=\"$ac_link\"\n-case \"(($ac_try\" in\n-  *\\\"* | *\\`* | *\\\\*) ac_try_echo=\\$ac_try;;\n-  *) ac_try_echo=$ac_try;;\n-esac\n-eval ac_try_echo=\"\\\"\\$as_me:${as_lineno-$LINENO}: $ac_try_echo\\\"\"\n-$as_echo \"$ac_try_echo\"; } >&5\n-  (eval \"$ac_link\") 2>conftest.err\n-  ac_status=$?\n-  if test -s conftest.err; then\n-    grep -v '^ *+' conftest.err >conftest.er1\n-    cat conftest.er1 >&5\n-    mv -f conftest.er1 conftest.err\n-  fi\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; } && {\n-\t test -z \"$ac_c_werror_flag\" ||\n-\t test ! -s conftest.err\n-       } && test -s conftest$ac_exeext && {\n-\t test \"$cross_compiling\" = yes ||\n-\t test -x conftest$ac_exeext\n-       }; then :\n-  ac_retval=0\n-else\n-  $as_echo \"$as_me: failed program was:\" >&5\n-sed 's/^/| /' conftest.$ac_ext >&5\n-\n-\tac_retval=1\n-fi\n-  # Delete the IPA/IPO (Inter Procedural Analysis/Optimization) information\n-  # created by the PGI compiler (conftest_ipa8_conftest.oo), as it would\n-  # interfere with the next link command; also delete a directory that is\n-  # left behind by Apple's compiler.  We do this before executing the actions.\n-  rm -rf conftest.dSYM conftest_ipa8_conftest.oo\n-  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n-  as_fn_set_status $ac_retval\n-\n-} # ac_fn_c_try_link\n cat >config.log <<_ACEOF\n This file contains any messages produced by compilers while\n running configure, to aid debugging if configure makes a mistake.\n@@ -5247,9 +5201,7 @@ case ${host} in\n # At present, we cannot turn -mfloat128 on via #pragma GCC target, so just\n # check if we have VSX (ISA 2.06) support to build the software libraries, and\n # whether the assembler can handle xsaddqp for hardware support.  Also check if\n-# a new glibc is being used so that __builtin_cpu_supports can be used.  Check\n-# to see if glibc provides the necessary decimal <-> IEEE 128 function, and\n-# arrange to build our own version if they are not provided.\n+# a new glibc is being used so that __builtin_cpu_supports can be used.\n powerpc*-*-linux*)\n   saved_CFLAGS=\"$CFLAGS\"\n   CFLAGS=\"$CFLAGS -mabi=altivec -mvsx -mfloat128\"\n@@ -5306,64 +5258,6 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgcc_cv_powerpc_float128_hw\" >&5\n $as_echo \"$libgcc_cv_powerpc_float128_hw\" >&6; }\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for PowerPC convert __float128 to/from _Decimal libraries\" >&5\n-$as_echo_n \"checking for PowerPC convert __float128 to/from _Decimal libraries... \" >&6; }\n-if ${libgcc_cv_powerpc_float128_dec+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  if test x$gcc_no_link = xyes; then\n-  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n-fi\n-cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-#include <stdlib.h>\n-     __attribute__((noinline)) __float128 f128_from_d128 (_Decimal128 d128)\n-     {\n-       return (__float128)d128;\n-     }\n-     __attribute__((noinline)) __float128 f128_from_d64 (_Decimal128 d64)\n-     {\n-       return (__float128)d64;\n-     }\n-     __attribute__((noinline)) __float128 f128_from_d32 (_Decimal128 d32)\n-     {\n-       return (__float128)d32;\n-     }\n-     __attribute__((noinline)) _Decimal128 d128_from_f128 (__float128 f128)\n-     {\n-       return (_Decimal128)f128;\n-     }\n-     __attribute__((noinline)) _Decimal64 d64_from_f128 (__float128 f128)\n-     {\n-       return (_Decimal64)f128;\n-     }\n-     __attribute__((noinline)) _Decimal32 d32_from_f128 (__float128 f128)\n-     {\n-       return (_Decimal32)f128;\n-     }\n-     int main (void)\n-     {\n-       __float128 five = 5.0;\n-       if (f128_from_d128 (5.0dl) != five\n-           || f128_from_d64 (5.0dd) != five\n-           || f128_from_d32 (5.0df) != five\n-           || d128_from_f128 (five) != 5.0dl\n-           || d64_from_f128 (five) != 5.0dd\n-           || d32_from_f128 (five) != 5.0df)\n-         abort ();\n-       return 0;\n-     }\n-_ACEOF\n-if ac_fn_c_try_link \"$LINENO\"; then :\n-  libgcc_cv_powerpc_float128_dec=yes\n-else\n-  libgcc_cv_powerpc_float128_dec=no\n-fi\n-rm -f core conftest.err conftest.$ac_objext \\\n-    conftest$ac_exeext conftest.$ac_ext\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgcc_cv_powerpc_float128_dec\" >&5\n-$as_echo \"$libgcc_cv_powerpc_float128_dec\" >&6; }\n   CFLAGS=\"$saved_CFLAGS\"\n esac\n "}, {"sha": "bff6e54f22e019f4703f3f7dec9b49b581d317c3", "filename": "libgcc/configure.ac", "status": "modified", "additions": 1, "deletions": 45, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef836167f594c4657404e16e7fd18196348f8582/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef836167f594c4657404e16e7fd18196348f8582/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=ef836167f594c4657404e16e7fd18196348f8582", "patch": "@@ -424,9 +424,7 @@ case ${host} in\n # At present, we cannot turn -mfloat128 on via #pragma GCC target, so just\n # check if we have VSX (ISA 2.06) support to build the software libraries, and\n # whether the assembler can handle xsaddqp for hardware support.  Also check if\n-# a new glibc is being used so that __builtin_cpu_supports can be used.  Check\n-# to see if glibc provides the necessary decimal <-> IEEE 128 function, and\n-# arrange to build our own version if they are not provided.\n+# a new glibc is being used so that __builtin_cpu_supports can be used.\n powerpc*-*-linux*)\n   saved_CFLAGS=\"$CFLAGS\"\n   CFLAGS=\"$CFLAGS -mabi=altivec -mvsx -mfloat128\"\n@@ -459,48 +457,6 @@ powerpc*-*-linux*)\n \t__attribute__ ((__ifunc__ (\"add_resolver\")));])],\n     [libgcc_cv_powerpc_float128_hw=yes],\n     [libgcc_cv_powerpc_float128_hw=no])])\n-  AC_CACHE_CHECK([for PowerPC convert __float128 to/from _Decimal libraries],\n-\t\t [libgcc_cv_powerpc_float128_dec],\n-\t\t [AC_LINK_IFELSE(\n-    [AC_LANG_SOURCE([#include <stdlib.h>\n-     __attribute__((noinline)) __float128 f128_from_d128 (_Decimal128 d128)\n-     {\n-       return (__float128)d128;\n-     }\n-     __attribute__((noinline)) __float128 f128_from_d64 (_Decimal128 d64)\n-     {\n-       return (__float128)d64;\n-     }\n-     __attribute__((noinline)) __float128 f128_from_d32 (_Decimal128 d32)\n-     {\n-       return (__float128)d32;\n-     }\n-     __attribute__((noinline)) _Decimal128 d128_from_f128 (__float128 f128)\n-     {\n-       return (_Decimal128)f128;\n-     }\n-     __attribute__((noinline)) _Decimal64 d64_from_f128 (__float128 f128)\n-     {\n-       return (_Decimal64)f128;\n-     }\n-     __attribute__((noinline)) _Decimal32 d32_from_f128 (__float128 f128)\n-     {\n-       return (_Decimal32)f128;\n-     }\n-     int main (void)\n-     {\n-       __float128 five = 5.0;\n-       if (f128_from_d128 (5.0dl) != five\n-           || f128_from_d64 (5.0dd) != five\n-           || f128_from_d32 (5.0df) != five\n-           || d128_from_f128 (five) != 5.0dl\n-           || d64_from_f128 (five) != 5.0dd\n-           || d32_from_f128 (five) != 5.0df)\n-         abort ();\n-       return 0;\n-     }])],\n-    [libgcc_cv_powerpc_float128_dec=yes],\n-    [libgcc_cv_powerpc_float128_dec=no])])\n   CFLAGS=\"$saved_CFLAGS\"\n esac\n "}]}