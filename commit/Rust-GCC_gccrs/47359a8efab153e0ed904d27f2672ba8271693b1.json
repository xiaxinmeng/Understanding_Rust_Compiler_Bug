{"sha": "47359a8efab153e0ed904d27f2672ba8271693b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDczNTlhOGVmYWIxNTNlMGVkOTA0ZDI3ZjI2NzJiYTgyNzE2OTNiMQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@TechFak.Uni-Bielefeld.DE", "date": "1999-08-17T22:46:02Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "1999-08-17T22:46:02Z"}, "message": "gc_priv.h: Merged IRIX thread changes from include/private/gc_priv.h.\n\nTue Aug 10 00:08:29 1999  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n\n\t* gc_priv.h: Merged IRIX thread changes from\n\tinclude/private/gc_priv.h.\n\nFrom-SVN: r28740", "tree": {"sha": "2b9e2010b6a08d12e3d9ad5ec5d770ef37f0adf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b9e2010b6a08d12e3d9ad5ec5d770ef37f0adf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47359a8efab153e0ed904d27f2672ba8271693b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47359a8efab153e0ed904d27f2672ba8271693b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47359a8efab153e0ed904d27f2672ba8271693b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47359a8efab153e0ed904d27f2672ba8271693b1/comments", "author": null, "committer": null, "parents": [{"sha": "cfe507bee830d9c451bbbdc1f1a5cc36dfc89616", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfe507bee830d9c451bbbdc1f1a5cc36dfc89616", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfe507bee830d9c451bbbdc1f1a5cc36dfc89616"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "8a55a5be30087c0b2a16d56372b624032a9fcae3", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47359a8efab153e0ed904d27f2672ba8271693b1/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47359a8efab153e0ed904d27f2672ba8271693b1/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=47359a8efab153e0ed904d27f2672ba8271693b1", "patch": "@@ -1,3 +1,8 @@\n+Tue Aug 10 00:08:29 1999  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\n+\t* gc_priv.h: Merged IRIX thread changes from\n+\tinclude/private/gc_priv.h.\n+\n Mon Aug  9 18:33:38 1999  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* Makefile.in: Rebuilt."}, {"sha": "cda9c23bacb98eaeff349c67a112b9e10bc2b67f", "filename": "boehm-gc/gc_priv.h", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47359a8efab153e0ed904d27f2672ba8271693b1/boehm-gc%2Fgc_priv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47359a8efab153e0ed904d27f2672ba8271693b1/boehm-gc%2Fgc_priv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fgc_priv.h?ref=47359a8efab153e0ed904d27f2672ba8271693b1", "patch": "@@ -520,14 +520,15 @@ void GC_print_callers (/* struct callinfo info[NFRAMES] */);\n \t\t}\n #    define EXIT_GC() GC_collecting = 0;\n #  endif /* LINUX_THREADS */\n-#  ifdef IRIX_THREADS\n+#  if defined(IRIX_THREADS) || defined(IRIX_JDK_THREADS)\n #    include <pthread.h>\n #    include <mutex.h>\n \n-#    if __mips < 3 || !(defined (_ABIN32) || defined(_ABI64))\n+#    if __mips < 3 || !(defined (_ABIN32) || defined(_ABI64)) \\\n+\t|| !defined(_COMPILER_VERSION) || _COMPILER_VERSION < 700\n #        define GC_test_and_set(addr, v) test_and_set(addr,v)\n #    else\n-#\t  define GC_test_and_set(addr, v) __test_and_set(addr,v)\n+#\t define GC_test_and_set(addr, v) __test_and_set(addr,v)\n #    endif\n      extern unsigned long GC_allocate_lock;\n \t/* This is not a mutex because mutexes that obey the (optional) \t*/\n@@ -546,10 +547,17 @@ void GC_print_callers (/* struct callinfo info[NFRAMES] */);\n #    \tdefine UNLOCK() pthread_mutex_unlock(&GC_allocate_ml)\n #    else\n #\tdefine LOCK() { if (GC_test_and_set(&GC_allocate_lock, 1)) GC_lock(); }\n-#       if __mips >= 3 && (defined (_ABIN32) || defined(_ABI64))\n+#       if __mips >= 3 && (defined (_ABIN32) || defined(_ABI64)) \\\n+\t   && defined(_COMPILER_VERSION) && _COMPILER_VERSION >= 700\n #\t    define UNLOCK() __lock_release(&GC_allocate_lock)\n #\telse\n-#           define UNLOCK() GC_allocate_lock = 0\n+\t    /* The function call in the following should prevent the\t*/\n+\t    /* compiler from moving assignments to below the UNLOCK.\t*/\n+\t    /* This is probably not necessary for ucode or gcc 2.8.\t*/\n+\t    /* It may be necessary for Ragnarok and future gcc\t\t*/\n+\t    /* versions.\t\t\t\t\t\t*/\n+#           define UNLOCK() { GC_noop1(&GC_allocate_lock); \\\n+\t\t\t*(volatile unsigned long *)(&GC_allocate_lock) = 0; }\n #\tendif\n #    endif\n      extern GC_bool GC_collecting;\n@@ -558,7 +566,7 @@ void GC_print_callers (/* struct callinfo info[NFRAMES] */);\n \t\t    GC_collecting = 1; \\\n \t\t}\n #    define EXIT_GC() GC_collecting = 0;\n-#  endif /* IRIX_THREADS */\n+#  endif /* IRIX_THREADS || IRIX_JDK_THREADS */\n #  ifdef WIN32_THREADS\n #    include <windows.h>\n      GC_API CRITICAL_SECTION GC_allocate_ml;\n@@ -616,7 +624,7 @@ void GC_print_callers (/* struct callinfo info[NFRAMES] */);\n #   if defined(SRC_M3) || defined(AMIGA) || defined(SOLARIS_THREADS) \\\n \t|| defined(MSWIN32) || defined(MACOS) || defined(DJGPP) \\\n \t|| defined(NO_SIGNALS) || defined(IRIX_THREADS) \\\n-\t|| defined(LINUX_THREADS)\n+\t|| defined(IRIX_JDK_THREADS) || defined(LINUX_THREADS) \n \t\t\t/* Also useful for debugging.\t\t*/\n \t/* Should probably use thr_sigsetmask for SOLARIS_THREADS. */\n #     define DISABLE_SIGNALS()\n@@ -644,7 +652,8 @@ void GC_print_callers (/* struct callinfo info[NFRAMES] */);\n  \t\t\t\t   PCR_waitForever);\n # else\n #   if defined(SOLARIS_THREADS) || defined(WIN32_THREADS) \\\n-\t|| defined(IRIX_THREADS) || defined(LINUX_THREADS)\n+\t|| defined(IRIX_THREADS) || defined(LINUX_THREADS) \\\n+\t|| defined(IRIX_JDK_THREADS)\n       void GC_stop_world();\n       void GC_start_world();\n #     define STOP_WORLD() GC_stop_world()"}]}