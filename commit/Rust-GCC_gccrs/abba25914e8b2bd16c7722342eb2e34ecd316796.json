{"sha": "abba25914e8b2bd16c7722342eb2e34ecd316796", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJiYTI1OTE0ZThiMmJkMTZjNzcyMjM0MmViMmUzNGVjZDMxNjc5Ng==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-05T00:16:39Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-05T00:16:39Z"}, "message": "Daily bump.", "tree": {"sha": "2f2bda94daa08b552f2ebe1f7a41a07937b5e2af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f2bda94daa08b552f2ebe1f7a41a07937b5e2af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abba25914e8b2bd16c7722342eb2e34ecd316796", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abba25914e8b2bd16c7722342eb2e34ecd316796", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abba25914e8b2bd16c7722342eb2e34ecd316796", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abba25914e8b2bd16c7722342eb2e34ecd316796/comments", "author": null, "committer": null, "parents": [{"sha": "fd28c11a1e492ff32e38cdfd2ab3c3d4745042d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd28c11a1e492ff32e38cdfd2ab3c3d4745042d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd28c11a1e492ff32e38cdfd2ab3c3d4745042d3"}], "stats": {"total": 319, "additions": 318, "deletions": 1}, "files": [{"sha": "ffff1d4bb13072be049f6580c4e23ce113209d4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abba25914e8b2bd16c7722342eb2e34ecd316796/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abba25914e8b2bd16c7722342eb2e34ecd316796/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=abba25914e8b2bd16c7722342eb2e34ecd316796", "patch": "@@ -1,3 +1,166 @@\n+2020-08-04  Jim Wilson  <jimw@sifive.com>\n+\n+\t* doc/invoke.texi (AArch64 Options): Delete duplicate\n+\t-mstack-protector-guard docs.\n+\n+2020-08-04  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/nvptx/nvptx.md (smulhi3_highpart, smulsi3_highpart)\n+\t(umulhi3_highpart, umulsi3_highpart): New instructions.\n+\n+2020-08-04  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-run.c (R_AMDGPU_NONE): Delete.\n+\t(R_AMDGPU_ABS32_LO): Delete.\n+\t(R_AMDGPU_ABS32_HI): Delete.\n+\t(R_AMDGPU_ABS64): Delete.\n+\t(R_AMDGPU_REL32): Delete.\n+\t(R_AMDGPU_REL64): Delete.\n+\t(R_AMDGPU_ABS32): Delete.\n+\t(R_AMDGPU_GOTPCREL): Delete.\n+\t(R_AMDGPU_GOTPCREL32_LO): Delete.\n+\t(R_AMDGPU_GOTPCREL32_HI): Delete.\n+\t(R_AMDGPU_REL32_LO): Delete.\n+\t(R_AMDGPU_REL32_HI): Delete.\n+\t(reserved): Delete.\n+\t(R_AMDGPU_RELATIVE64): Delete.\n+\n+2020-08-04  Omar Tahir  <omar.tahir@arm.com>\n+\n+\t* config/arm/arm-cpus.in (armv8.1-m.main): Tune for Cortex-M55.\n+\n+2020-08-04  Hu Jiangping  <hujiangping@cn.fujitsu.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_if_then_else_costs): Delete\n+\tredundant extra_cost variable.\n+\n+2020-08-04  Zhiheng Xie  <xiezhiheng@huawei.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (aarch64_call_properties):\n+\tUse FLOAT_MODE_P macro instead of enumerating all floating-point\n+\tmodes and add global flag FLAG_AUTO_FP.\n+\n+2020-08-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* doc/extend.texi (symver): Add @cindex for symver function attribute.\n+\n+2020-08-04  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR tree-optimization/95433\n+\t* match.pd (X * C1 == C2): New transformation.\n+\n+2020-08-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-ssa-sprintf.c (get_int_range): Adjust for irange API.\n+\t(format_integer): Same.\n+\t(handle_printf_call): Same.\n+\n+2020-08-04  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn.md (\"<expander>ti3\"): New.\n+\n+2020-08-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88240\n+\t* tree-ssa-sccvn.h (vn_reference_s::punned): New flag.\n+\t* tree-ssa-sccvn.c (vn_reference_insert): Initialize punned.\n+\t(vn_reference_insert_pieces): Likewise.\n+\t(visit_reference_op_call): Likewise.\n+\t(visit_reference_op_load): Track whether a ref was punned.\n+\t* tree-ssa-pre.c (do_hoist_insertion): Refuse to perform hoist\n+\tinsertion on punned floating point loads.\n+\n+2020-08-04  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_gen_store_pair): Add case\n+\tfor E_V4SImode.\n+\t(aarch64_gen_load_pair): Likewise.\n+\t(aarch64_copy_one_block_and_progress_pointers): Handle 256 bit copy.\n+\t(aarch64_expand_cpymem): Expand copy_limit to 256bits where\n+\tappropriate.\n+\n+2020-08-04  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config/aarch64/aarch64.md (aarch64_fjcvtzs): Add missing\n+\tclobber.\n+\t* doc/sourcebuild.texi (aarch64_fjcvtzs_hw) Document new\n+\ttarget supports option.\n+\n+2020-08-04  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/96428\n+\t* config/nvptx/nvptx.c (nvptx_gen_shuffle): Handle V2SI/V2DI.\n+\n+2020-08-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/96426\n+\t* tree-vect-generic.c (expand_vector_conversion): Replace .VEC_CONVERT\n+\tcall with GIMPLE_NOP if there is no lhs.\n+\n+2020-08-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/96354\n+\t* gimple-fold.c (maybe_canonicalize_mem_ref_addr): Add IS_DEBUG\n+\targument.  Return false instead of gcc_unreachable if it is true and\n+\tget_addr_base_and_unit_offset returns NULL.\n+\t(fold_stmt_1) <case GIMPLE_DEBUG>: Adjust caller.\n+\n+2020-08-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* vr-values.c (simplify_using_ranges::vrp_evaluate_conditional):\n+\tCall is_gimple_min_invariant dropped from previous patch.\n+\n+2020-08-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp-expand.c (expand_omp_for_init_counts): For triangular loops\n+\tcompute number of iterations at runtime more efficiently.\n+\t(expand_omp_for_init_vars): Adjust immediate dominators.\n+\t(extract_omp_for_update_vars): Likewise.\n+\n+2020-08-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* vr-values.c (simplify_using_ranges::two_valued_val_range_p):\n+\tUse irange API.\n+\n+2020-08-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* vr-values.c (simplify_conversion_using_ranges): Convert to irange API.\n+\n+2020-08-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* vr-values.c (test_for_singularity): Use irange API.\n+\t(simplify_using_ranges::simplify_cond_using_ranges_1): Do not\n+\tspecial case VR_RANGE.\n+\n+2020-08-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* vr-values.c (simplify_using_ranges::vrp_evaluate_conditional): Adjust\n+\tfor irange API.\n+\n+2020-08-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* vr-values.c (simplify_using_ranges::op_with_boolean_value_range_p): Adjust\n+\tfor irange API.\n+\n+2020-08-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssanames.c (get_range_info): Use irange instead of value_range.\n+\t* tree-ssanames.h (get_range_info): Same.\n+\n+2020-08-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* fold-const.c (expr_not_equal_to): Adjust for irange API.\n+\n+2020-08-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* builtins.c (determine_block_size): Remove ad-hoc range canonicalization.\n+\n+2020-08-04  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\tPR rtl-optimization/71309\n+\t* dse.c (find_shift_sequence): Use subreg of shifted from high part\n+\tregister to avoid loading from address.\n+\n 2020-08-03  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/cpp.texi (Variadic Macros): Use the exact ... token in"}, {"sha": "3a7230a5cf250067083ccb32f217807069bc3a93", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abba25914e8b2bd16c7722342eb2e34ecd316796/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abba25914e8b2bd16c7722342eb2e34ecd316796/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=abba25914e8b2bd16c7722342eb2e34ecd316796", "patch": "@@ -1 +1 @@\n-20200804\n+20200805"}, {"sha": "bd99f38c05b9210ce2ae81f509dc45e3e2f2c89e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abba25914e8b2bd16c7722342eb2e34ecd316796/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abba25914e8b2bd16c7722342eb2e34ecd316796/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=abba25914e8b2bd16c7722342eb2e34ecd316796", "patch": "@@ -1,3 +1,27 @@\n+2020-08-04  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/96082\n+\t* parser.c (cp_parser_elaborated_type_specifier): Allow\n+\t'template' following ::.\n+\n+2020-08-04  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* parser.c (cp_parser_explicit_specialization): Refactor\n+\tto avoid leak of num_template_parameter_lists value.\n+\n+2020-08-04  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/94024\n+\t* init.c (sort_mem_initializers): Preserve TREE_TYPE of the\n+\tmember initializer list node.\n+\t(emit_mem_initializers): Set input_location when performing each\n+\tmember initialization.\n+\t* parser.c (cp_parser_mem_initializer): Attach the source\n+\tlocation of this initializer to a dummy EMPTY_CLASS_EXPR\n+\twithin the TREE_TYPE of the list node.\n+\t* pt.c (tsubst_initializer_list): Preserve TREE_TYPE of the\n+\tmember initializer list node.\n+\n 2020-08-03  Marek Polacek  <polacek@redhat.com>\n \n \t* cp-tree.h (after_nsdmi_defaulted_late_checks): Remove."}, {"sha": "1962dd62016c70b450d63c6365588b5720fe2ca0", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abba25914e8b2bd16c7722342eb2e34ecd316796/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abba25914e8b2bd16c7722342eb2e34ecd316796/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=abba25914e8b2bd16c7722342eb2e34ecd316796", "patch": "@@ -1,3 +1,28 @@\n+2020-08-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/96153\n+\t* d-tree.h (build_expr): Add literalp argument.\n+\t* expr.cc (ExprVisitor): Add literalp_ field.\n+\t(ExprVisitor::ExprVisitor): Initialize literalp_.\n+\t(ExprVisitor::visit (AssignExp *)): Call memset() on blits where RHS\n+\tis a struct literal.  Elide assignment if initializer is all zeroes.\n+\t(ExprVisitor::visit (CastExp *)): Forward literalp_ to generation of\n+\tsubexpression.\n+\t(ExprVisitor::visit (AddrExp *)): Likewise.\n+\t(ExprVisitor::visit (ArrayLiteralExp *)): Use memset() to pre-fill\n+\tobject with zeroes.  Set literalp in subexpressions.\n+\t(ExprVisitor::visit (StructLiteralExp *)): Likewise.\n+\t(ExprVisitor::visit (TupleExp *)): Set literalp in subexpressions.\n+\t(ExprVisitor::visit (VectorExp *)): Likewise.\n+\t(ExprVisitor::visit (VectorArrayExp *)): Likewise.\n+\t(build_expr): Forward literal_p to ExprVisitor.\n+\n+2020-08-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/96429\n+\t* expr.cc (ExprVisitor::visit (BinExp*)): Use EXACT_DIV_EXPR for\n+\tpointer diff expressions.\n+\n 2020-08-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/96254"}, {"sha": "023791b4cac0258e298f159e5746a35fded51acb", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abba25914e8b2bd16c7722342eb2e34ecd316796/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abba25914e8b2bd16c7722342eb2e34ecd316796/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=abba25914e8b2bd16c7722342eb2e34ecd316796", "patch": "@@ -1,3 +1,12 @@\n+2020-08-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* openmp.c (resolve_omp_do): Detect not perfectly\n+\tnested loop with innermost collapse.\n+\n+2020-08-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* trans-openmp.c (gfc_trans_omp_do): Fix 'lastprivate(conditional:'.\n+\n 2020-08-03  Julian Brown  <julian@codesourcery.com>\n \t    Thomas Schwinge  <thomas@codesourcery.com>\n "}, {"sha": "41e2fb8ecfee5c76d646f8c00e10b1192147fd19", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abba25914e8b2bd16c7722342eb2e34ecd316796/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abba25914e8b2bd16c7722342eb2e34ecd316796/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=abba25914e8b2bd16c7722342eb2e34ecd316796", "patch": "@@ -1,3 +1,93 @@\n+2020-08-04  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/nvptx/mul-hi.c: New test.\n+\t* gcc.target/nvptx/umul-hi.c: New test.\n+\n+2020-08-04  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/96082\n+\t* g++.dg/template/template-keyword3.C: New test.\n+\n+2020-08-04  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/template/pr39425.C: Adjust errors, (unbounded\n+\ttemplate recursion).\n+\t* g++.old-deja/g++.pt/spec20.C: Remove fallout diagnostics.\n+\n+2020-08-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/collapse1.f90: Add dg-error.\n+\t* gfortran.dg/gomp/collapse2.f90: New test.\n+\n+2020-08-04  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR rtl-optimization/60473\n+\t* gcc.target/i386/pr60473.c: New test.\n+\n+2020-08-04  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR tree-optimization/95433\n+\t* gcc.c-torture/execute/pr23135.c: Add -fwrapv to avoid\n+\tundefined behavior.\n+\t* gcc.dg/tree-ssa/pr95433.c: New file.\n+\n+2020-08-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/96153\n+\t* gdc.dg/pr96153.d: New test.\n+\n+2020-08-04  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/94024\n+\t* g++.dg/diagnostic/mem-init1.C: New test.\n+\n+2020-08-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88240\n+\t* gcc.target/i386/pr88240.c: New testcase.\n+\n+2020-08-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/lastprivate-conditional-3.f90: Enable some\n+\tpreviously disabled 'lastprivate(conditional:' dg-warnings.\n+\n+2020-08-04  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* gcc.target/aarch64/cpymem-q-reg_1.c: New test.\n+\t* gcc.target/aarch64/large_struct_copy_2.c: Update for ldp q regs.\n+\n+2020-08-04  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/aarch64/acle/jcvt_2.c: New testcase.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_aarch64_fjcvtzs_hw): Add new check for\n+\tFJCVTZS hw.\n+\n+2020-08-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/96426\n+\t* gcc.c-torture/compile/pr96426.c: New test.\n+\n+2020-08-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/96354\n+\t* g++.dg/opt/pr96354.C: New test.\n+\n+2020-08-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/96429\n+\t* gdc.dg/pr96429.d: New test.\n+\n+2020-08-04  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/96325\n+\t* gfortran.dg/pr96325.f90: Change from run to compile.\n+\n+2020-08-04  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\tPR rtl-optimization/71309\n+\t* gcc.target/powerpc/pr71309.c: New test.\n+\n 2020-08-03  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* gcc.target/powerpc/vector_float.c: Skip if not lp64."}, {"sha": "d531e5118ea3d25969e244fbd3391309cedd6d95", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abba25914e8b2bd16c7722342eb2e34ecd316796/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abba25914e8b2bd16c7722342eb2e34ecd316796/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=abba25914e8b2bd16c7722342eb2e34ecd316796", "patch": "@@ -1,3 +1,9 @@\n+2020-08-04  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/96428\n+\t* testsuite/libgomp.oacc-fortran/pr96628-part1.f90: New test.\n+\t* testsuite/libgomp.oacc-fortran/pr96628-part2.f90: New test.\n+\n 2020-08-03  Julian Brown  <julian@codesourcery.com>\n \t    Thomas Schwinge  <thomas@codesourcery.com>\n "}]}