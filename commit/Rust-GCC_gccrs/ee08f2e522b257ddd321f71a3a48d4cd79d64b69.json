{"sha": "ee08f2e522b257ddd321f71a3a48d4cd79d64b69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUwOGYyZTUyMmIyNTdkZGQzMjFmNzFhM2E0OGQ0Y2Q3OWQ2NGI2OQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-07-11T21:29:30Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-07-11T21:29:30Z"}, "message": "tob@archimedes:~/scratch/gcc> head -n 15 ../intrinsic_use.diff\n2010-07-11  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/44702\n        * module.c (sort_iso_c_rename_list): Remove.\n        (import_iso_c_binding_module,use_iso_fortran_env_module):\n        Allow multiple imports of the same symbol.\n\n2010-07-11  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/44702\n        * gfortran.dg/use_rename_6.f90: New.\n        * gfortran.dg/use_iso_c_binding.f90: Update dg-error.\n\nFrom-SVN: r162061", "tree": {"sha": "99cb3c0521b6a6244572b8f182aab36db17ef23d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99cb3c0521b6a6244572b8f182aab36db17ef23d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee08f2e522b257ddd321f71a3a48d4cd79d64b69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee08f2e522b257ddd321f71a3a48d4cd79d64b69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee08f2e522b257ddd321f71a3a48d4cd79d64b69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee08f2e522b257ddd321f71a3a48d4cd79d64b69/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5bf935c3c802f43abc4774da415099faf600eeb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bf935c3c802f43abc4774da415099faf600eeb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bf935c3c802f43abc4774da415099faf600eeb2"}], "stats": {"total": 267, "additions": 113, "deletions": 154}, "files": [{"sha": "af17f5c0ddf75aede91ca0a187e7f463dfd72f04", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee08f2e522b257ddd321f71a3a48d4cd79d64b69/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee08f2e522b257ddd321f71a3a48d4cd79d64b69/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ee08f2e522b257ddd321f71a3a48d4cd79d64b69", "patch": "@@ -1,3 +1,10 @@\n+2010-07-11  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/44702\n+\t* module.c (sort_iso_c_rename_list): Remove.\n+\t(import_iso_c_binding_module,use_iso_fortran_env_module):\n+\tAllow multiple imports of the same symbol.\n+\n 2010-07-11  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* arith.c (gfc_arith_done_1): Release mpfr internal caches."}, {"sha": "426a17c5cdff78336641acc94f33af7de202f3de", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 58, "deletions": 152, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee08f2e522b257ddd321f71a3a48d4cd79d64b69/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee08f2e522b257ddd321f71a3a48d4cd79d64b69/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=ee08f2e522b257ddd321f71a3a48d4cd79d64b69", "patch": "@@ -5201,53 +5201,6 @@ gfc_dump_module (const char *name, int dump_flag)\n }\n \n \n-static void\n-sort_iso_c_rename_list (void)\n-{\n-  gfc_use_rename *tmp_list = NULL;\n-  gfc_use_rename *curr;\n-  gfc_use_rename *kinds_used[ISOCBINDING_NUMBER] = {NULL};\n-  int c_kind;\n-  int i;\n-\n-  for (curr = gfc_rename_list; curr; curr = curr->next)\n-    {\n-      c_kind = get_c_kind (curr->use_name, c_interop_kinds_table);\n-      if (c_kind == ISOCBINDING_INVALID || c_kind == ISOCBINDING_LAST)\n-\t{\n-\t  gfc_error (\"Symbol '%s' referenced at %L does not exist in \"\n-\t\t     \"intrinsic module ISO_C_BINDING.\", curr->use_name,\n-\t\t     &curr->where);\n-\t}\n-      else\n-\t/* Put it in the list.  */\n-\tkinds_used[c_kind] = curr;\n-    }\n-\n-  /* Make a new (sorted) rename list.  */\n-  i = 0;\n-  while (i < ISOCBINDING_NUMBER && kinds_used[i] == NULL)\n-    i++;\n-\n-  if (i < ISOCBINDING_NUMBER)\n-    {\n-      tmp_list = kinds_used[i];\n-\n-      i++;\n-      curr = tmp_list;\n-      for (; i < ISOCBINDING_NUMBER; i++)\n-\tif (kinds_used[i] != NULL)\n-\t  {\n-\t    curr->next = kinds_used[i];\n-\t    curr = curr->next;\n-\t    curr->next = NULL;\n-\t  }\n-    }\n-\n-  gfc_rename_list = tmp_list;\n-}\n-\n-\n /* Import the intrinsic ISO_C_BINDING module, generating symbols in\n    the current namespace for all named constants, pointer types, and\n    procedures in the module unless the only clause was used or a rename\n@@ -5261,7 +5214,6 @@ import_iso_c_binding_module (void)\n   const char *iso_c_module_name = \"__iso_c_binding\";\n   gfc_use_rename *u;\n   int i;\n-  char *local_name;\n \n   /* Look only in the current namespace.  */\n   mod_symtree = gfc_find_symtree (gfc_current_ns->sym_root, iso_c_module_name);\n@@ -5286,57 +5238,32 @@ import_iso_c_binding_module (void)\n \n   /* Generate the symbols for the named constants representing\n      the kinds for intrinsic data types.  */\n-  if (only_flag)\n+  for (i = 0; i < ISOCBINDING_NUMBER; i++)\n     {\n-      /* Sort the rename list because there are dependencies between types\n-\t and procedures (e.g., c_loc needs c_ptr).  */\n-      sort_iso_c_rename_list ();\n-      \n+      bool found = false;\n       for (u = gfc_rename_list; u; u = u->next)\n-\t{\n-\t  i = get_c_kind (u->use_name, c_interop_kinds_table);\n+\tif (strcmp (c_interop_kinds_table[i].name, u->use_name) == 0)\n+\t  {\n+\t    u->found = 1;\n+\t    found = true;\n+\t    generate_isocbinding_symbol (iso_c_module_name,\n+\t\t\t\t\t (iso_c_binding_symbol) i,\n+\t\t\t\t\t u->local_name);\n+\t  }\n \n-\t  if (i == ISOCBINDING_INVALID || i == ISOCBINDING_LAST)\n-\t    {\n-\t      gfc_error (\"Symbol '%s' referenced at %L does not exist in \"\n-\t\t\t \"intrinsic module ISO_C_BINDING.\", u->use_name,\n-\t\t\t &u->where);\n-\t      continue;\n-\t    }\n-\t  \n-\t  generate_isocbinding_symbol (iso_c_module_name,\n-\t\t\t\t       (iso_c_binding_symbol) i,\n-\t\t\t\t       u->local_name);\n-\t}\n-    }\n-  else\n-    {\n-      for (i = 0; i < ISOCBINDING_NUMBER; i++)\n-\t{\n-\t  local_name = NULL;\n-\t  for (u = gfc_rename_list; u; u = u->next)\n-\t    {\n-\t      if (strcmp (c_interop_kinds_table[i].name, u->use_name) == 0)\n-\t\t{\n-\t\t  local_name = u->local_name;\n-\t\t  u->found = 1;\n-\t\t  break;\n-\t\t}\n-\t    }\n-\t  generate_isocbinding_symbol (iso_c_module_name,\n-\t\t\t\t       (iso_c_binding_symbol) i,\n-\t\t\t\t       local_name);\n-\t}\n+      if (!found && !only_flag)\n+\tgenerate_isocbinding_symbol (iso_c_module_name,\n+\t\t\t\t     (iso_c_binding_symbol) i, NULL);\n+   }\n \n-      for (u = gfc_rename_list; u; u = u->next)\n-\t{\n-\t  if (u->found)\n-\t    continue;\n+   for (u = gfc_rename_list; u; u = u->next)\n+     {\n+      if (u->found)\n+\tcontinue;\n \n-\t  gfc_error (\"Symbol '%s' referenced at %L not found in intrinsic \"\n-\t\t     \"module ISO_C_BINDING\", u->use_name, &u->where);\n-\t}\n-    }\n+      gfc_error (\"Symbol '%s' referenced at %L not found in intrinsic \"\n+\t\t \"module ISO_C_BINDING\", u->use_name, &u->where);\n+     }\n }\n \n \n@@ -5378,7 +5305,6 @@ static void\n use_iso_fortran_env_module (void)\n {\n   static char mod[] = \"iso_fortran_env\";\n-  const char *local_name;\n   gfc_use_rename *u;\n   gfc_symbol *mod_sym;\n   gfc_symtree *mod_symtree;\n@@ -5414,60 +5340,41 @@ use_iso_fortran_env_module (void)\n \t\t \"non-intrinsic module name used previously\", mod);\n \n   /* Generate the symbols for the module integer named constants.  */\n-  if (only_flag)\n-    for (u = gfc_rename_list; u; u = u->next)\n-      {\n-\tfor (i = 0; symbol[i].name; i++)\n-\t  if (strcmp (symbol[i].name, u->use_name) == 0)\n-\t    break;\n \n-\tif (symbol[i].name == NULL)\n-\t  {\n-\t    gfc_error (\"Symbol '%s' referenced at %L does not exist in \"\n-\t\t       \"intrinsic module ISO_FORTRAN_ENV\", u->use_name,\n-\t\t       &u->where);\n-\t    continue;\n-\t  }\n-\n-\tif ((gfc_option.flag_default_integer || gfc_option.flag_default_real)\n-\t    && symbol[i].id == ISOFORTRANENV_NUMERIC_STORAGE_SIZE)\n-\t  gfc_warning_now (\"Use of the NUMERIC_STORAGE_SIZE named constant \"\n-\t\t\t   \"from intrinsic module ISO_FORTRAN_ENV at %L is \"\n-\t\t\t   \"incompatible with option %s\", &u->where,\n-\t\t\t   gfc_option.flag_default_integer\n-\t\t\t     ? \"-fdefault-integer-8\" : \"-fdefault-real-8\");\n-\n-        if (gfc_notify_std (symbol[i].standard, \"The symbol '%s', referrenced \"\n-\t\t\t    \"at %C, is not in the selected standard\",\n-\t\t\t    symbol[i].name) == FAILURE)\n-\t  continue;\n-\n-\tcreate_int_parameter (u->local_name[0] ? u->local_name\n-\t\t\t\t\t       : symbol[i].name,\n-\t\t\t      symbol[i].value, mod, INTMOD_ISO_FORTRAN_ENV,\n-\t\t\t      symbol[i].id);\n-      }\n-  else\n+  for (i = 0; symbol[i].name; i++)\n     {\n-      for (i = 0; symbol[i].name; i++)\n+      bool found = false;\n+      for (u = gfc_rename_list; u; u = u->next)\n \t{\n-\t  local_name = NULL;\n-\n-\t  for (u = gfc_rename_list; u; u = u->next)\n+\t  if (strcmp (symbol[i].name, u->use_name) == 0)\n \t    {\n-\t      if (strcmp (symbol[i].name, u->use_name) == 0)\n-\t\t{\n-\t\t  local_name = u->local_name;\n-\t\t  u->found = 1;\n-\t\t  break;\n-\t\t}\n+\t      found = true;\n+\t      u->found = 1;\n+\n+\t      if (gfc_notify_std (symbol[i].standard, \"The symbol '%s', \"\n+\t\t\t\t  \"referrenced at %C, is not in the selected \"\n+\t\t\t\t  \"standard\", symbol[i].name) == FAILURE)\n+\t        continue;\n+\n+\t      if ((gfc_option.flag_default_integer || gfc_option.flag_default_real)\n+\t\t  && symbol[i].id == ISOFORTRANENV_NUMERIC_STORAGE_SIZE)\n+\t\tgfc_warning_now (\"Use of the NUMERIC_STORAGE_SIZE named \"\n+\t\t\t\t \"constant from intrinsic module \"\n+\t\t\t\t \"ISO_FORTRAN_ENV at %C is incompatible with \"\n+\t\t\t\t \"option %s\",\n+\t\t\t\t gfc_option.flag_default_integer\n+\t\t\t\t   ? \"-fdefault-integer-8\"\n+\t\t\t\t   : \"-fdefault-real-8\");\n+\n+\t      create_int_parameter (u->local_name[0] ? u->local_name : u->use_name,\n+\t\t\t\t    symbol[i].value, mod,\n+\t\t\t\t    INTMOD_ISO_FORTRAN_ENV, symbol[i].id);\n \t    }\n+\t}\n \n-\t  if (u && gfc_notify_std (symbol[i].standard, \"The symbol '%s', \"\n-\t\t\t\t   \"referrenced at %C, is not in the selected \"\n-\t\t\t\t   \"standard\", symbol[i].name) == FAILURE)\n-\t    continue;\n-\t  else if ((gfc_option.allow_std & symbol[i].standard) == 0)\n+      if (!found && !only_flag)\n+\t{\n+\t  if ((gfc_option.allow_std & symbol[i].standard) == 0)\n \t    continue;\n \n \t  if ((gfc_option.flag_default_integer || gfc_option.flag_default_real)\n@@ -5478,19 +5385,18 @@ use_iso_fortran_env_module (void)\n \t\t\t     gfc_option.flag_default_integer\n \t\t\t\t? \"-fdefault-integer-8\" : \"-fdefault-real-8\");\n \n-\t  create_int_parameter (local_name ? local_name : symbol[i].name,\n-\t\t\t\tsymbol[i].value, mod, INTMOD_ISO_FORTRAN_ENV,\n-\t\t\t\tsymbol[i].id);\n+\t  create_int_parameter (symbol[i].name, symbol[i].value, mod,\n+\t\t\t\tINTMOD_ISO_FORTRAN_ENV, symbol[i].id);\n \t}\n+    }\n \n-      for (u = gfc_rename_list; u; u = u->next)\n-\t{\n-\t  if (u->found)\n-\t    continue;\n+  for (u = gfc_rename_list; u; u = u->next)\n+    {\n+      if (u->found)\n+\tcontinue;\n \n-\t  gfc_error (\"Symbol '%s' referenced at %L not found in intrinsic \"\n+      gfc_error (\"Symbol '%s' referenced at %L not found in intrinsic \"\n \t\t     \"module ISO_FORTRAN_ENV\", u->use_name, &u->where);\n-\t}\n     }\n }\n "}, {"sha": "1182677f4daf7dec63f7e326c0b8cd96a3ab7f44", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee08f2e522b257ddd321f71a3a48d4cd79d64b69/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee08f2e522b257ddd321f71a3a48d4cd79d64b69/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee08f2e522b257ddd321f71a3a48d4cd79d64b69", "patch": "@@ -1,3 +1,9 @@\n+2010-07-11  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/44702\n+\t* gfortran.dg/use_rename_6.f90: New.\n+\t* gfortran.dg/use_iso_c_binding.f90: Update dg-error.\n+\n 2010-07-11  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/44869"}, {"sha": "8a28490f7b2d97c31b563699635103a0d5d48958", "filename": "gcc/testsuite/gfortran.dg/use_iso_c_binding.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee08f2e522b257ddd321f71a3a48d4cd79d64b69/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_iso_c_binding.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee08f2e522b257ddd321f71a3a48d4cd79d64b69/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_iso_c_binding.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_iso_c_binding.f90?ref=ee08f2e522b257ddd321f71a3a48d4cd79d64b69", "patch": "@@ -7,12 +7,12 @@\n ! intrinsic one.  --Rickett, 09.26.06\n module use_stmt_0\n   ! this is an error because c_ptr_2 does not exist \n-  use, intrinsic :: iso_c_binding, only: c_ptr_2 ! { dg-error \"Symbol 'c_ptr_2' referenced at \\\\(1\\\\) does not exist\" }\n+  use, intrinsic :: iso_c_binding, only: c_ptr_2 ! { dg-error \"Symbol 'c_ptr_2' referenced at \\\\(1\\\\) not found\" }\n end module use_stmt_0\n \n module use_stmt_1\n   ! this is an error because c_ptr_2 does not exist \n-  use iso_c_binding, only: c_ptr_2 ! { dg-error \"Symbol 'c_ptr_2' referenced at \\\\(1\\\\) does not exist\" }\n+  use iso_c_binding, only: c_ptr_2 ! { dg-error \"Symbol 'c_ptr_2' referenced at \\\\(1\\\\) not found\" }\n end module use_stmt_1\n \n module use_stmt_2"}, {"sha": "02f25c36e979dd3e5df48923c70fa6e5f2385f23", "filename": "gcc/testsuite/gfortran.dg/use_rename_6.f90", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee08f2e522b257ddd321f71a3a48d4cd79d64b69/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_rename_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee08f2e522b257ddd321f71a3a48d4cd79d64b69/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_rename_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_rename_6.f90?ref=ee08f2e522b257ddd321f71a3a48d4cd79d64b69", "patch": "@@ -0,0 +1,40 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! PR fortran/44702\n+!\n+! Based on a test case by Joe Krahn.\n+!\n+! Multiple import of the same symbol was failing for\n+! intrinsic modules.\n+!\n+subroutine one()\n+  use iso_c_binding, only: a => c_ptr, b => c_ptr, c_ptr\n+  implicit none\n+  type(a) :: x\n+  type(b) :: y\n+  type(c_ptr) :: z\n+end subroutine one\n+\n+subroutine two()\n+  use iso_c_binding, a => c_ptr, b => c_ptr\n+  implicit none\n+  type(a) :: x\n+  type(b) :: y\n+end subroutine two\n+\n+subroutine three()\n+  use iso_fortran_env, only: a => error_unit, b => error_unit, error_unit\n+  implicit none\n+  if(a /= b) call shall_not_be_there()\n+  if(a /= error_unit) call shall_not_be_there()\n+end subroutine three\n+\n+subroutine four()\n+  use iso_fortran_env, a => error_unit, b => error_unit\n+  implicit none\n+  if(a /= b) call shall_not_be_there()\n+end subroutine four\n+\n+! { dg-final { scan-tree-dump-times \"shall_not_be_there\" 0 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}