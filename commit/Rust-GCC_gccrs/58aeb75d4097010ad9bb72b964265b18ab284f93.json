{"sha": "58aeb75d4097010ad9bb72b964265b18ab284f93", "node_id": "C_kwDOANBUbNoAKDU4YWViNzVkNDA5NzAxMGFkOWJiNzJiOTY0MjY1YjE4YWIyODRmOTM", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-02-13T01:12:41Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-02-13T19:03:45Z"}, "message": "runtime: call timer functions via syscall\n\nIt turns out to be painful to require linking against -lrt on\nGNU/Linux, as that makes it harder to link Go code into C programs.\nInstead just call the timer syscalls directly.  That is what the\nupstream library does anyhow.\n\ngcc/go/\n\t* gospec.cc: Revert 2022-02-09 change:\n\t(RTLIB, RT_LIBRARY): Don't define.\n\t(lang_specific_driver): Don't add -lrt if linking statically\n\ton GNU/Linux.\n\ngotools/\n\t* configure.ac: Revert 2022-02-09 change:\n\t(RT_LIBS): Don't define.\n\t* Makefile.am (check-runtime): Don't set GOLIBS to $(RT_LIBS).\n\t* configure, Makefile.in: Regenerate.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/385475", "tree": {"sha": "849876c3156f676db4c951f9b9f6a77e452b6a06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/849876c3156f676db4c951f9b9f6a77e452b6a06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58aeb75d4097010ad9bb72b964265b18ab284f93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58aeb75d4097010ad9bb72b964265b18ab284f93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58aeb75d4097010ad9bb72b964265b18ab284f93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58aeb75d4097010ad9bb72b964265b18ab284f93/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "033ec967ec5583ea978d16ca83f9563c518e6dc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/033ec967ec5583ea978d16ca83f9563c518e6dc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/033ec967ec5583ea978d16ca83f9563c518e6dc6"}], "stats": {"total": 122, "additions": 26, "deletions": 96}, "files": [{"sha": "745132a3d9d16a93be2a66c7d474dfb63d313671", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58aeb75d4097010ad9bb72b964265b18ab284f93/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58aeb75d4097010ad9bb72b964265b18ab284f93/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=58aeb75d4097010ad9bb72b964265b18ab284f93", "patch": "@@ -1,4 +1,4 @@\n-7f8fee099d6de4a5a857765e0ddfae356ead554c\n+0af68c0552341a44f1fb12301f9eff954b9dde88\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "df92b62d8e6e8e7381828712820d0114482a651d", "filename": "gcc/go/gospec.cc", "status": "modified", "additions": 5, "deletions": 37, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58aeb75d4097010ad9bb72b964265b18ab284f93/gcc%2Fgo%2Fgospec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58aeb75d4097010ad9bb72b964265b18ab284f93/gcc%2Fgo%2Fgospec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgospec.cc?ref=58aeb75d4097010ad9bb72b964265b18ab284f93", "patch": "@@ -29,12 +29,10 @@ along with GCC; see the file COPYING3.  If not see\n #define MATHLIB\t\t(1<<2)\n /* This bit is set if they did `-lpthread'.  */\n #define THREADLIB\t(1<<3)\n-/* This bit is set if they did `-lrt'.  */\n-#define RTLIB\t\t(1<<4)\n /* This bit is set if they did `-lc'.  */\n-#define WITHLIBC\t(1<<5)\n+#define WITHLIBC\t(1<<4)\n /* Skip this option.  */\n-#define SKIPOPT\t\t(1<<6)\n+#define SKIPOPT\t\t(1<<5)\n \n #ifndef MATH_LIBRARY\n #define MATH_LIBRARY \"m\"\n@@ -46,8 +44,6 @@ along with GCC; see the file COPYING3.  If not see\n #define THREAD_LIBRARY \"pthread\"\n #define THREAD_LIBRARY_PROFILE THREAD_LIBRARY\n \n-#define RT_LIBRARY \"rt\"\n-\n #define LIBGO \"go\"\n #define LIBGO_PROFILE LIBGO\n #define LIBGOBEGIN \"gobegin\"\n@@ -78,9 +74,6 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   /* \"-lpthread\" if it appears on the command line.  */\n   const struct cl_decoded_option *saw_thread = 0;\n \n-  /* \"-lrt\" if it appears on the command line.  */\n-  const struct cl_decoded_option *saw_rt = 0;\n-\n   /* \"-lc\" if it appears on the command line.  */\n   const struct cl_decoded_option *saw_libc = 0;\n \n@@ -91,9 +84,6 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   /* Whether we need the thread library.  */\n   int need_thread = 0;\n \n-  /* Whether we need the rt library.  */\n-  int need_rt = 0;\n-\n   /* By default, we throw on the math library if we have one.  */\n   int need_math = (MATH_LIBRARY[0] != '\\0');\n \n@@ -166,8 +156,6 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t    }\n \t  else if (strcmp (arg, THREAD_LIBRARY) == 0)\n \t    args[i] |= THREADLIB;\n-\t  else if (strcmp (arg, RT_LIBRARY) == 0)\n-\t    args[i] |= RTLIB;\n \t  else if (strcmp (arg, \"c\") == 0)\n \t    args[i] |= WITHLIBC;\n \t  else\n@@ -272,7 +260,7 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n #endif\n \n   /* Make sure to have room for the trailing NULL argument.  */\n-  num_args = argc + need_math + shared_libgcc + (library > 0) * 6 + 10;\n+  num_args = argc + need_math + shared_libgcc + (library > 0) * 5 + 10;\n   new_decoded_options = XNEWVEC (struct cl_decoded_option, num_args);\n \n   i = 0;\n@@ -326,12 +314,6 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t  saw_thread = &decoded_options[i];\n \t}\n \n-      if (!saw_rt && (args[i] & RTLIB) && library > 0)\n-\t{\n-\t  --j;\n-\t  saw_rt = &decoded_options[i];\n-\t}\n-\n       if (!saw_libc && (args[i] & WITHLIBC) && library > 0)\n \t{\n \t  --j;\n@@ -413,23 +395,9 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n #endif\n \n       /* When linking libgo statically we also need to link with the\n-\t pthread and (on GNU/Linux) the rt library.  */\n+\t pthread library.  */\n       if (library > 1 || static_link)\n-\t{\n-\t  need_thread = 1;\n-\t  if (strstr (DEFAULT_TARGET_MACHINE, \"linux\") != NULL)\n-\t    need_rt = 1;\n-\t}\n-    }\n-\n-  if (saw_rt)\n-    new_decoded_options[j++] = *saw_rt;\n-  else if (library > 0 && need_rt)\n-    {\n-      generate_option (OPT_l, RT_LIBRARY, 1, CL_DRIVER,\n-\t\t       &new_decoded_options[j]);\n-      added_libraries++;\n-      j++;\n+\tneed_thread = 1;\n     }\n \n   if (saw_thread)"}, {"sha": "7b5302990f83985aa426d13f3cd30ac8aa5bd999", "filename": "gotools/Makefile.am", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58aeb75d4097010ad9bb72b964265b18ab284f93/gotools%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58aeb75d4097010ad9bb72b964265b18ab284f93/gotools%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gotools%2FMakefile.am?ref=58aeb75d4097010ad9bb72b964265b18ab284f93", "patch": "@@ -248,14 +248,12 @@ check-runtime: go$(EXEEXT) $(noinst_PROGRAMS) check-head check-gccgo check-gcc\n \tGOARCH=`$(abs_builddir)/go$(EXEEXT) env GOARCH`; \\\n \tGOOS=`$(abs_builddir)/go$(EXEEXT) env GOOS`; \\\n \tfiles=`$(SHELL) $(libgosrcdir)/../match.sh --goarch=$${GOARCH} --goos=$${GOOS} --srcdir=$(libgosrcdir)/runtime --extrafiles=\"$(libgodir)/runtime_linknames.go $(libgodir)/runtime_sysinfo.go $(libgodir)/sigtab.go $(libgodir)/goroot.go\" --tag=libffi`; \\\n-\techo \"$(ECHO_ENV) GC='$(abs_builddir)/check-gccgo -fgo-compiling-runtime' GOARCH=$${GOARCH} GOOS=$${GOOS} GOLIBS='$(RT_LIBS)' $(SHELL) $(libgosrcdir)/../testsuite/gotest --goarch=$${GOARCH} --goos=$${GOOS} --basedir=$(libgosrcdir)/.. --srcdir=$(libgosrcdir)/runtime --pkgpath=runtime --pkgfiles='$${files}' $(GOTESTFLAGS) -test.timeout=$(GOTOOLS_TEST_TIMEOUT)s -test.v\" > runtime-testlog\n+\techo \"$(ECHO_ENV) GC='$(abs_builddir)/check-gccgo -fgo-compiling-runtime' GOARCH=$${GOARCH} GOOS=$${GOOS} $(SHELL) $(libgosrcdir)/../testsuite/gotest --goarch=$${GOARCH} --goos=$${GOOS} --basedir=$(libgosrcdir)/.. --srcdir=$(libgosrcdir)/runtime --pkgpath=runtime --pkgfiles='$${files}' $(GOTESTFLAGS) -test.timeout=$(GOTOOLS_TEST_TIMEOUT)s -test.v\" > runtime-testlog\n \t$(CHECK_ENV) \\\n \tGC=\"$${GCCGO} -fgo-compiling-runtime\"; \\\n \texport GC; \\\n \tGOARCH=`$(abs_builddir)/go$(EXEEXT) env GOARCH`; \\\n \tGOOS=`$(abs_builddir)/go$(EXEEXT) env GOOS`; \\\n-\tGOLIBS=\"$(RT_LIBS)\"; \\\n-\texport GOLIBS; \\\n \tfiles=`$(SHELL) $(libgosrcdir)/../match.sh --goarch=$${GOARCH} --goos=$${GOOS} --srcdir=$(libgosrcdir)/runtime --extrafiles=\"$(libgodir)/runtime_linknames.go $(libgodir)/runtime_sysinfo.go $(libgodir)/sigtab.go $(libgodir)/goroot.go\" --tag=libffi`; \\\n \t$(SHELL) $(libgosrcdir)/../testsuite/gotest --goarch=$${GOARCH} --goos=$${GOOS} --basedir=$(libgosrcdir)/.. --srcdir=$(libgosrcdir)/runtime --pkgpath=runtime --pkgfiles=\"$${files}\" $(GOTESTFLAGS) -test.timeout=$(GOTOOLS_TEST_TIMEOUT)s -test.v >> runtime-testlog 2>&1 || echo \"--- $${fl}: go test runtime (0.00s)\" >> runtime-testlog\n \tgrep '^--- ' runtime-testlog | sed -e 's/^--- \\(.*\\) ([^)]*)$$/\\1/' | sort -k 2"}, {"sha": "2783b91ef4be4d9acf676acb3a48a14c0d0879e9", "filename": "gotools/Makefile.in", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58aeb75d4097010ad9bb72b964265b18ab284f93/gotools%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58aeb75d4097010ad9bb72b964265b18ab284f93/gotools%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gotools%2FMakefile.in?ref=58aeb75d4097010ad9bb72b964265b18ab284f93", "patch": "@@ -269,7 +269,6 @@ PACKAGE_TARNAME = @PACKAGE_TARNAME@\n PACKAGE_URL = @PACKAGE_URL@\n PACKAGE_VERSION = @PACKAGE_VERSION@\n PATH_SEPARATOR = @PATH_SEPARATOR@\n-RT_LIBS = @RT_LIBS@\n SET_MAKE = @SET_MAKE@\n SHELL = @SHELL@\n STRIP = @STRIP@\n@@ -920,14 +919,12 @@ mostlyclean-local:\n @NATIVE_TRUE@\tGOARCH=`$(abs_builddir)/go$(EXEEXT) env GOARCH`; \\\n @NATIVE_TRUE@\tGOOS=`$(abs_builddir)/go$(EXEEXT) env GOOS`; \\\n @NATIVE_TRUE@\tfiles=`$(SHELL) $(libgosrcdir)/../match.sh --goarch=$${GOARCH} --goos=$${GOOS} --srcdir=$(libgosrcdir)/runtime --extrafiles=\"$(libgodir)/runtime_linknames.go $(libgodir)/runtime_sysinfo.go $(libgodir)/sigtab.go $(libgodir)/goroot.go\" --tag=libffi`; \\\n-@NATIVE_TRUE@\techo \"$(ECHO_ENV) GC='$(abs_builddir)/check-gccgo -fgo-compiling-runtime' GOARCH=$${GOARCH} GOOS=$${GOOS} GOLIBS='$(RT_LIBS)' $(SHELL) $(libgosrcdir)/../testsuite/gotest --goarch=$${GOARCH} --goos=$${GOOS} --basedir=$(libgosrcdir)/.. --srcdir=$(libgosrcdir)/runtime --pkgpath=runtime --pkgfiles='$${files}' $(GOTESTFLAGS) -test.timeout=$(GOTOOLS_TEST_TIMEOUT)s -test.v\" > runtime-testlog\n+@NATIVE_TRUE@\techo \"$(ECHO_ENV) GC='$(abs_builddir)/check-gccgo -fgo-compiling-runtime' GOARCH=$${GOARCH} GOOS=$${GOOS} $(SHELL) $(libgosrcdir)/../testsuite/gotest --goarch=$${GOARCH} --goos=$${GOOS} --basedir=$(libgosrcdir)/.. --srcdir=$(libgosrcdir)/runtime --pkgpath=runtime --pkgfiles='$${files}' $(GOTESTFLAGS) -test.timeout=$(GOTOOLS_TEST_TIMEOUT)s -test.v\" > runtime-testlog\n @NATIVE_TRUE@\t$(CHECK_ENV) \\\n @NATIVE_TRUE@\tGC=\"$${GCCGO} -fgo-compiling-runtime\"; \\\n @NATIVE_TRUE@\texport GC; \\\n @NATIVE_TRUE@\tGOARCH=`$(abs_builddir)/go$(EXEEXT) env GOARCH`; \\\n @NATIVE_TRUE@\tGOOS=`$(abs_builddir)/go$(EXEEXT) env GOOS`; \\\n-@NATIVE_TRUE@\tGOLIBS=\"$(RT_LIBS)\"; \\\n-@NATIVE_TRUE@\texport GOLIBS; \\\n @NATIVE_TRUE@\tfiles=`$(SHELL) $(libgosrcdir)/../match.sh --goarch=$${GOARCH} --goos=$${GOOS} --srcdir=$(libgosrcdir)/runtime --extrafiles=\"$(libgodir)/runtime_linknames.go $(libgodir)/runtime_sysinfo.go $(libgodir)/sigtab.go $(libgodir)/goroot.go\" --tag=libffi`; \\\n @NATIVE_TRUE@\t$(SHELL) $(libgosrcdir)/../testsuite/gotest --goarch=$${GOARCH} --goos=$${GOOS} --basedir=$(libgosrcdir)/.. --srcdir=$(libgosrcdir)/runtime --pkgpath=runtime --pkgfiles=\"$${files}\" $(GOTESTFLAGS) -test.timeout=$(GOTOOLS_TEST_TIMEOUT)s -test.v >> runtime-testlog 2>&1 || echo \"--- $${fl}: go test runtime (0.00s)\" >> runtime-testlog\n @NATIVE_TRUE@\tgrep '^--- ' runtime-testlog | sed -e 's/^--- \\(.*\\) ([^)]*)$$/\\1/' | sort -k 2"}, {"sha": "ff71d2ae88085ff1ad3f5d7f671dd96b08bdd0ef", "filename": "gotools/configure", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58aeb75d4097010ad9bb72b964265b18ab284f93/gotools%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58aeb75d4097010ad9bb72b964265b18ab284f93/gotools%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gotools%2Fconfigure?ref=58aeb75d4097010ad9bb72b964265b18ab284f93", "patch": "@@ -586,7 +586,6 @@ ac_subst_vars='am__EXEEXT_FALSE\n am__EXEEXT_TRUE\n LTLIBOBJS\n LIBOBJS\n-RT_LIBS\n NET_LIBS\n NATIVE_FALSE\n NATIVE_TRUE\n@@ -4212,12 +4211,6 @@ if test \"$ac_res\" != no; then :\n fi\n \n \n-RT_LIBS=\n-case ${target} in\n-  *-*-linux*) RT_LIBS=-lrt ;;\n-esac\n-\n-\n ac_config_files=\"$ac_config_files Makefile\"\n \n "}, {"sha": "f0a73eca782c949491757d26d3ecdafea80c6fa6", "filename": "gotools/configure.ac", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58aeb75d4097010ad9bb72b964265b18ab284f93/gotools%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58aeb75d4097010ad9bb72b964265b18ab284f93/gotools%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gotools%2Fconfigure.ac?ref=58aeb75d4097010ad9bb72b964265b18ab284f93", "patch": "@@ -85,15 +85,6 @@ dnl Test if -lrt is required for sched_yield and/or nanosleep.\n AC_SEARCH_LIBS([sched_yield], [rt])\n AC_SEARCH_LIBS([nanosleep], [rt])\n \n-dnl On GNU/Linux we need to link the runtime package against -lrt.\n-dnl This is a target test, unlike sched_yield/nanosleep above\n-dnl which is a host test.\n-RT_LIBS=\n-case ${target} in\n-  *-*-linux*) RT_LIBS=-lrt ;;\n-esac\n-AC_SUBST(RT_LIBS)\n-\n AC_CONFIG_FILES(Makefile)\n \n AC_OUTPUT"}, {"sha": "9318f38714a9ae7fe73c56539ee8caad3e1e6779", "filename": "libgo/Makefile.am", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58aeb75d4097010ad9bb72b964265b18ab284f93/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58aeb75d4097010ad9bb72b964265b18ab284f93/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=58aeb75d4097010ad9bb72b964265b18ab284f93", "patch": "@@ -832,8 +832,7 @@ libgo_ldflags = \\\n \n libgo_libadd = \\\n \t$(libgo_go_objs) ../libbacktrace/libbacktrace.la \\\n-\t$(LIBATOMIC) $(LIBFFI) $(PTHREAD_LIBS) $(MATH_LIBS) \\\n-\t$(NET_LIBS) $(RT_LIBS)\n+\t$(LIBATOMIC) $(LIBFFI) $(PTHREAD_LIBS) $(MATH_LIBS) $(NET_LIBS)\n \n libgo_la_SOURCES = $(runtime_files)\n libgo_la_LDFLAGS = $(libgo_ldflags)\n@@ -924,7 +923,7 @@ GOBENCH =\n CHECK = \\\n \tGC=\"$(GOC) $(GOCFLAGS) $($(subst /,_,$@)_GOCFLAGS) -L `${PWD_COMMAND}` -L `${PWD_COMMAND}`/.libs\"; \\\n \texport GC; \\\n-\tGOLIBS=\"$(extra_check_libs_$(subst .,_,$(subst /,_,$(@D)))) $(PTHREAD_LIBS) $(MATH_LIBS) $(NET_LIBS) $(RT_LIBS) $(LIBS)\"; \\\n+\tGOLIBS=\"$(extra_check_libs_$(subst .,_,$(subst /,_,$(@D)))) $(PTHREAD_LIBS) $(MATH_LIBS) $(NET_LIBS) $(LIBS)\"; \\\n \texport GOLIBS; \\\n \tRUNTESTFLAGS=\"$(RUNTESTFLAGS)\"; \\\n \texport RUNTESTFLAGS; \\"}, {"sha": "642688e9daed427239cfc3204cf8b5f9b1bd6819", "filename": "libgo/Makefile.in", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58aeb75d4097010ad9bb72b964265b18ab284f93/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58aeb75d4097010ad9bb72b964265b18ab284f93/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=58aeb75d4097010ad9bb72b964265b18ab284f93", "patch": "@@ -233,8 +233,7 @@ am__DEPENDENCIES_4 =\n am__DEPENDENCIES_5 = $(am__DEPENDENCIES_3) \\\n \t../libbacktrace/libbacktrace.la $(am__DEPENDENCIES_4) \\\n \t$(am__DEPENDENCIES_4) $(am__DEPENDENCIES_4) \\\n-\t$(am__DEPENDENCIES_4) $(am__DEPENDENCIES_4) \\\n-\t$(am__DEPENDENCIES_4)\n+\t$(am__DEPENDENCIES_4) $(am__DEPENDENCIES_4)\n libgo_llgo_la_DEPENDENCIES = $(am__DEPENDENCIES_5)\n @LIBGO_IS_LINUX_TRUE@@LIBGO_IS_X86_TRUE@am__objects_1 =  \\\n @LIBGO_IS_LINUX_TRUE@@LIBGO_IS_X86_TRUE@\truntime/go-context.lo\n@@ -466,7 +465,6 @@ PATH_SEPARATOR = @PATH_SEPARATOR@\n PTHREAD_CFLAGS = @PTHREAD_CFLAGS@\n PTHREAD_LIBS = @PTHREAD_LIBS@\n RANLIB = @RANLIB@\n-RT_LIBS = @RT_LIBS@\n SED = @SED@\n SET_MAKE = @SET_MAKE@\n SHELL = @SHELL@\n@@ -972,8 +970,7 @@ libgo_ldflags = \\\n \n libgo_libadd = \\\n \t$(libgo_go_objs) ../libbacktrace/libbacktrace.la \\\n-\t$(LIBATOMIC) $(LIBFFI) $(PTHREAD_LIBS) $(MATH_LIBS) \\\n-\t$(NET_LIBS) $(RT_LIBS)\n+\t$(LIBATOMIC) $(LIBFFI) $(PTHREAD_LIBS) $(MATH_LIBS) $(NET_LIBS)\n \n libgo_la_SOURCES = $(runtime_files)\n libgo_la_LDFLAGS = $(libgo_ldflags)\n@@ -1047,7 +1044,7 @@ GOBENCH =\n CHECK = \\\n \tGC=\"$(GOC) $(GOCFLAGS) $($(subst /,_,$@)_GOCFLAGS) -L `${PWD_COMMAND}` -L `${PWD_COMMAND}`/.libs\"; \\\n \texport GC; \\\n-\tGOLIBS=\"$(extra_check_libs_$(subst .,_,$(subst /,_,$(@D)))) $(PTHREAD_LIBS) $(MATH_LIBS) $(NET_LIBS) $(RT_LIBS) $(LIBS)\"; \\\n+\tGOLIBS=\"$(extra_check_libs_$(subst .,_,$(subst /,_,$(@D)))) $(PTHREAD_LIBS) $(MATH_LIBS) $(NET_LIBS) $(LIBS)\"; \\\n \texport GOLIBS; \\\n \tRUNTESTFLAGS=\"$(RUNTESTFLAGS)\"; \\\n \texport RUNTESTFLAGS; \\"}, {"sha": "ffe17c9be55db14336293f3e3ac9bfdcef6d7b66", "filename": "libgo/configure", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58aeb75d4097010ad9bb72b964265b18ab284f93/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58aeb75d4097010ad9bb72b964265b18ab284f93/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=58aeb75d4097010ad9bb72b964265b18ab284f93", "patch": "@@ -649,7 +649,6 @@ HAVE_SYS_MMAN_H_FALSE\n HAVE_SYS_MMAN_H_TRUE\n PTHREAD_LIBS\n PTHREAD_CFLAGS\n-RT_LIBS\n NET_LIBS\n MATH_LIBS\n GOC_IS_LLGO_FALSE\n@@ -11545,7 +11544,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11548 \"configure\"\n+#line 11547 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11651,7 +11650,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11654 \"configure\"\n+#line 11653 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14748,12 +14747,6 @@ $as_echo \"$libgo_cv_lib_sockets\" >&6; }\n NET_LIBS=\"$libgo_cv_lib_sockets\"\n \n \n-RT_LIBS=\n-case ${host} in\n-  *-*-linux*) RT_LIBS=-lrt ;;\n-esac\n-\n-\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether -pthread is supported\" >&5\n $as_echo_n \"checking whether -pthread is supported... \" >&6; }\n if ${libgo_cv_lib_pthread+:} false; then :"}, {"sha": "7e2b98ba67c83d5cb5179edb68a8deb20331b39c", "filename": "libgo/configure.ac", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58aeb75d4097010ad9bb72b964265b18ab284f93/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58aeb75d4097010ad9bb72b964265b18ab284f93/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=58aeb75d4097010ad9bb72b964265b18ab284f93", "patch": "@@ -549,12 +549,6 @@ AC_CACHE_CHECK([for socket libraries], libgo_cv_lib_sockets,\n NET_LIBS=\"$libgo_cv_lib_sockets\"\n AC_SUBST(NET_LIBS)\n \n-RT_LIBS=\n-case ${host} in\n-  *-*-linux*) RT_LIBS=-lrt ;;\n-esac\n-AC_SUBST(RT_LIBS)\n-\n dnl Test whether the compiler supports the -pthread option.\n AC_CACHE_CHECK([whether -pthread is supported],\n [libgo_cv_lib_pthread],"}, {"sha": "96fb178870e674ead97b4ee4c00f4d567952ca1f", "filename": "libgo/go/runtime/os_linux.go", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58aeb75d4097010ad9bb72b964265b18ab284f93/libgo%2Fgo%2Fruntime%2Fos_linux.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58aeb75d4097010ad9bb72b964265b18ab284f93/libgo%2Fgo%2Fruntime%2Fos_linux.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fos_linux.go?ref=58aeb75d4097010ad9bb72b964265b18ab284f93", "patch": "@@ -18,7 +18,7 @@ type mOS struct {\n \t// creates and manages its own timer, and these fields are read and written\n \t// only by this thread. But because some of the reads on profileTimerValid\n \t// are in signal handling code, access to that field uses atomic operations.\n-\tprofileTimer      uintptr\n+\tprofileTimer      int32\n \tprofileTimerValid uint32\n }\n \n@@ -243,16 +243,17 @@ func osinit() {\n \tphysHugePageSize = getHugePageSize()\n }\n \n-//go:noescape\n-//extern-sysinfo timer_create\n-func timer_create(clockid int32, sevp *_sigevent, timerid *uintptr) int32\n+func timer_create(clockid int32, sevp *_sigevent, timerid *int32) int32 {\n+\treturn int32(syscall(_SYS_timer_create, uintptr(clockid), uintptr(unsafe.Pointer(sevp)), uintptr(unsafe.Pointer(timerid)), 0, 0, 0))\n+}\n \n-//go:noescape\n-//extern-sysinfo timer_settime\n-func timer_settime(timerid uintptr, flags int32, new, old *_itimerspec) int32\n+func timer_settime(timerid int32, flags int32, new, old *_itimerspec) int32 {\n+\treturn int32(syscall(_SYS_timer_settime, uintptr(timerid), uintptr(flags), uintptr(unsafe.Pointer(new)), uintptr(unsafe.Pointer(old)), 0, 0))\n+}\n \n-//extern-sysinfo timer_delete\n-func timer_delete(timerid uintptr) int32\n+func timer_delete(timerid int32) int32 {\n+\treturn int32(syscall(_SYS_timer_delete, uintptr(timerid), 0, 0, 0, 0, 0))\n+}\n \n // go118UseTimerCreateProfiler enables the per-thread CPU profiler.\n const go118UseTimerCreateProfiler = true\n@@ -360,7 +361,7 @@ func setThreadCPUProfiler(hz int32) {\n \tspec.it_value.setNsec(1 + int64(fastrandn(uint32(1e9/hz))))\n \tspec.it_interval.setNsec(1e9 / int64(hz))\n \n-\tvar timerid uintptr\n+\tvar timerid int32\n \tvar sevp _sigevent\n \tsevp.sigev_notify = _SIGEV_THREAD_ID\n \tsevp.sigev_signo = _SIGPROF"}, {"sha": "7869265851cb5f1b41f218f5811b7c6d584e9473", "filename": "libgo/testsuite/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58aeb75d4097010ad9bb72b964265b18ab284f93/libgo%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58aeb75d4097010ad9bb72b964265b18ab284f93/libgo%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Ftestsuite%2FMakefile.in?ref=58aeb75d4097010ad9bb72b964265b18ab284f93", "patch": "@@ -215,7 +215,6 @@ PATH_SEPARATOR = @PATH_SEPARATOR@\n PTHREAD_CFLAGS = @PTHREAD_CFLAGS@\n PTHREAD_LIBS = @PTHREAD_LIBS@\n RANLIB = @RANLIB@\n-RT_LIBS = @RT_LIBS@\n SED = @SED@\n SET_MAKE = @SET_MAKE@\n SHELL = @SHELL@"}]}