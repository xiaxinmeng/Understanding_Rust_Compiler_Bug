{"sha": "6960bf558f2e6076c901cd57f2c24b5462d8d311", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk2MGJmNTU4ZjJlNjA3NmM5MDFjZDU3ZjJjMjRiNTQ2MmQ4ZDMxMQ==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-09-15T12:11:27Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-09-15T12:11:27Z"}, "message": "[AArch64 array_mode 2/8] Remove VSTRUCT_DREG, use BLKmode for d-reg aarch64_st/ld expands\n\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_ld2<mode>_dreg VD & DX, aarch64_st2<mode>_dreg VD & DX ):\n\tChange all TImode operands to BLKmode.\n\t(aarch64_ld3<mode>_dreg VD & DX, aarch64_st3<mode>_dreg VD & DX):\n\tChange all EImode operands to BLKmode.\n\t(aarch64_ld4<mode>_dreg VD & DX, aarch64_st4<mode>_dreg VD & DX):\n\tChange all OImode operands to BLKmode.\n\n\t(aarch64_ld<VSTRUCT:nregs><VDC:mode>): Generate MEM rtx with BLKmode\n\tand call set_mem_size.\n\t(aarch64_st<VSTRUCT:nregs><VDC:mode>): Likewise\n\n\t* config/aarch64/iterators.md (VSTRUCT_DREG): Remove.\n\nFrom-SVN: r227782", "tree": {"sha": "a3dd3904fb1ec78bf08ec166c70a1a908bad89a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3dd3904fb1ec78bf08ec166c70a1a908bad89a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6960bf558f2e6076c901cd57f2c24b5462d8d311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6960bf558f2e6076c901cd57f2c24b5462d8d311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6960bf558f2e6076c901cd57f2c24b5462d8d311", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6960bf558f2e6076c901cd57f2c24b5462d8d311/comments", "author": null, "committer": null, "parents": [{"sha": "d30ab8e0b79a37150f0bbcc8b0d7c390ee47f042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d30ab8e0b79a37150f0bbcc8b0d7c390ee47f042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d30ab8e0b79a37150f0bbcc8b0d7c390ee47f042"}], "stats": {"total": 80, "additions": 50, "deletions": 30}, "files": [{"sha": "affc5bac428166cd817501a7fb19c60d20854c1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6960bf558f2e6076c901cd57f2c24b5462d8d311/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6960bf558f2e6076c901cd57f2c24b5462d8d311/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6960bf558f2e6076c901cd57f2c24b5462d8d311", "patch": "@@ -1,3 +1,19 @@\n+2015-09-15  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_ld2<mode>_dreg VD & DX, aarch64_st2<mode>_dreg VD & DX ):\n+\tChange all TImode operands to BLKmode.\n+\t(aarch64_ld3<mode>_dreg VD & DX, aarch64_st3<mode>_dreg VD & DX):\n+\tChange all EImode operands to BLKmode.\n+\t(aarch64_ld4<mode>_dreg VD & DX, aarch64_st4<mode>_dreg VD & DX):\n+\tChange all OImode operands to BLKmode.\n+\n+\t(aarch64_ld<VSTRUCT:nregs><VDC:mode>): Generate MEM rtx with BLKmode\n+\tand call set_mem_size.\n+\t(aarch64_st<VSTRUCT:nregs><VDC:mode>): Likewise.\n+\n+\t* config/aarch64/iterators.md (VSTRUCT_DREG): Remove.\n+\n 2015-09-15  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (vec_store_lanesoi_lane<mode>): Rename"}, {"sha": "20b9be9fd155fe144ece5c90691da6a34898d5cc", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 34, "deletions": 28, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6960bf558f2e6076c901cd57f2c24b5462d8d311/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6960bf558f2e6076c901cd57f2c24b5462d8d311/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=6960bf558f2e6076c901cd57f2c24b5462d8d311", "patch": "@@ -4425,8 +4425,9 @@\n \t(subreg:OI\n \t  (vec_concat:<VRL2>\n \t    (vec_concat:<VDBL>\n-\t     (unspec:VD [(match_operand:TI 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n-\t\t\tUNSPEC_LD2)\n+\t     (unspec:VD\n+\t\t[(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n+\t\tUNSPEC_LD2)\n \t     (vec_duplicate:VD (const_int 0)))\n \t    (vec_concat:<VDBL>\n \t     (unspec:VD [(match_dup 1)]\n@@ -4442,8 +4443,9 @@\n \t(subreg:OI\n \t  (vec_concat:<VRL2>\n \t    (vec_concat:<VDBL>\n-\t     (unspec:DX [(match_operand:TI 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n-\t\t\tUNSPEC_LD2)\n+\t     (unspec:DX\n+\t\t[(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n+\t\tUNSPEC_LD2)\n \t     (const_int 0))\n \t    (vec_concat:<VDBL>\n \t     (unspec:DX [(match_dup 1)]\n@@ -4460,8 +4462,9 @@\n \t (vec_concat:<VRL3>\n \t  (vec_concat:<VRL2>\n \t    (vec_concat:<VDBL>\n-\t     (unspec:VD [(match_operand:EI 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n-\t\t\tUNSPEC_LD3)\n+\t     (unspec:VD\n+\t\t[(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n+\t\tUNSPEC_LD3)\n \t     (vec_duplicate:VD (const_int 0)))\n \t    (vec_concat:<VDBL>\n \t     (unspec:VD [(match_dup 1)]\n@@ -4482,8 +4485,9 @@\n \t (vec_concat:<VRL3>\n \t  (vec_concat:<VRL2>\n \t    (vec_concat:<VDBL>\n-\t     (unspec:DX [(match_operand:EI 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n-\t\t\tUNSPEC_LD3)\n+\t     (unspec:DX\n+\t\t[(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n+\t\tUNSPEC_LD3)\n \t     (const_int 0))\n \t    (vec_concat:<VDBL>\n \t     (unspec:DX [(match_dup 1)]\n@@ -4504,8 +4508,9 @@\n \t (vec_concat:<VRL4>\n \t   (vec_concat:<VRL2>\n \t     (vec_concat:<VDBL>\n-\t       (unspec:VD [(match_operand:OI 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n-\t\t\t  UNSPEC_LD4)\n+\t       (unspec:VD\n+\t\t[(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n+\t\tUNSPEC_LD4)\n \t       (vec_duplicate:VD (const_int 0)))\n \t      (vec_concat:<VDBL>\n \t        (unspec:VD [(match_dup 1)]\n@@ -4531,8 +4536,9 @@\n \t (vec_concat:<VRL4>\n \t   (vec_concat:<VRL2>\n \t     (vec_concat:<VDBL>\n-\t       (unspec:DX [(match_operand:OI 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n-\t\t\t  UNSPEC_LD4)\n+\t       (unspec:DX\n+\t\t[(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n+\t\tUNSPEC_LD4)\n \t       (const_int 0))\n \t      (vec_concat:<VDBL>\n \t        (unspec:DX [(match_dup 1)]\n@@ -4558,8 +4564,8 @@\n   (unspec:VDC [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_SIMD\"\n {\n-  machine_mode mode = <VSTRUCT:VSTRUCT_DREG>mode;\n-  rtx mem = gen_rtx_MEM (mode, operands[1]);\n+  rtx mem = gen_rtx_MEM (BLKmode, operands[1]);\n+  set_mem_size (mem, <VSTRUCT:nregs> * 8);\n \n   emit_insn (gen_aarch64_ld<VSTRUCT:nregs><VDC:mode>_dreg (operands[0], mem));\n   DONE;\n@@ -4791,8 +4797,8 @@\n )\n \n (define_insn \"aarch64_st2<mode>_dreg\"\n-  [(set (match_operand:TI 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n-\t(unspec:TI [(match_operand:OI 1 \"register_operand\" \"w\")\n+  [(set (match_operand:BLK 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n+\t(unspec:BLK [(match_operand:OI 1 \"register_operand\" \"w\")\n                     (unspec:VD [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_ST2))]\n   \"TARGET_SIMD\"\n@@ -4801,8 +4807,8 @@\n )\n \n (define_insn \"aarch64_st2<mode>_dreg\"\n-  [(set (match_operand:TI 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n-\t(unspec:TI [(match_operand:OI 1 \"register_operand\" \"w\")\n+  [(set (match_operand:BLK 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n+\t(unspec:BLK [(match_operand:OI 1 \"register_operand\" \"w\")\n                     (unspec:DX [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_ST2))]\n   \"TARGET_SIMD\"\n@@ -4811,8 +4817,8 @@\n )\n \n (define_insn \"aarch64_st3<mode>_dreg\"\n-  [(set (match_operand:EI 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n-\t(unspec:EI [(match_operand:CI 1 \"register_operand\" \"w\")\n+  [(set (match_operand:BLK 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n+\t(unspec:BLK [(match_operand:CI 1 \"register_operand\" \"w\")\n                     (unspec:VD [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_ST3))]\n   \"TARGET_SIMD\"\n@@ -4821,8 +4827,8 @@\n )\n \n (define_insn \"aarch64_st3<mode>_dreg\"\n-  [(set (match_operand:EI 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n-\t(unspec:EI [(match_operand:CI 1 \"register_operand\" \"w\")\n+  [(set (match_operand:BLK 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n+\t(unspec:BLK [(match_operand:CI 1 \"register_operand\" \"w\")\n                     (unspec:DX [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_ST3))]\n   \"TARGET_SIMD\"\n@@ -4831,8 +4837,8 @@\n )\n \n (define_insn \"aarch64_st4<mode>_dreg\"\n-  [(set (match_operand:OI 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n-\t(unspec:OI [(match_operand:XI 1 \"register_operand\" \"w\")\n+  [(set (match_operand:BLK 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n+\t(unspec:BLK [(match_operand:XI 1 \"register_operand\" \"w\")\n                     (unspec:VD [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_ST4))]\n   \"TARGET_SIMD\"\n@@ -4841,8 +4847,8 @@\n )\n \n (define_insn \"aarch64_st4<mode>_dreg\"\n-  [(set (match_operand:OI 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n-\t(unspec:OI [(match_operand:XI 1 \"register_operand\" \"w\")\n+  [(set (match_operand:BLK 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n+\t(unspec:BLK [(match_operand:XI 1 \"register_operand\" \"w\")\n                     (unspec:DX [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_ST4))]\n   \"TARGET_SIMD\"\n@@ -4856,8 +4862,8 @@\n   (unspec:VDC [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_SIMD\"\n {\n-  machine_mode mode = <VSTRUCT:VSTRUCT_DREG>mode;\n-  rtx mem = gen_rtx_MEM (mode, operands[0]);\n+  rtx mem = gen_rtx_MEM (BLKmode, operands[0]);\n+  set_mem_size (mem, <VSTRUCT:nregs> * 8);\n \n   emit_insn (gen_aarch64_st<VSTRUCT:nregs><VDC:mode>_dreg (mem, operands[1]));\n   DONE;"}, {"sha": "e311b88c3f8538cd648a40c718e04a3d64bfb9e6", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6960bf558f2e6076c901cd57f2c24b5462d8d311/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6960bf558f2e6076c901cd57f2c24b5462d8d311/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=6960bf558f2e6076c901cd57f2c24b5462d8d311", "patch": "@@ -594,8 +594,6 @@\n \t\t\t(V2SI \"V16SI\")  (V2SF \"V16SF\")\n \t\t\t(DI   \"V8DI\")  (DF   \"V8DF\")])\n \n-(define_mode_attr VSTRUCT_DREG [(OI \"TI\") (CI \"EI\") (XI \"OI\")])\n-\n ;; Mode of pair of elements for each vector mode, to define transfer\n ;; size for structure lane/dup loads and stores.\n (define_mode_attr V_TWO_ELEM [(V8QI \"HI\")   (V16QI \"HI\")"}]}