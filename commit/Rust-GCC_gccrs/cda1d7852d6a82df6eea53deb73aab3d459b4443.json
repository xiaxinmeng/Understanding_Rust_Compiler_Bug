{"sha": "cda1d7852d6a82df6eea53deb73aab3d459b4443", "node_id": "C_kwDOANBUbNoAKGNkYTFkNzg1MmQ2YTgyZGY2ZWVhNTNkZWI3M2FhYjNkNDU5YjQ0NDM", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-02-21T12:51:54Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-02-24T11:01:27Z"}, "message": "macro_invoc_lexer: Add `split_current_token` implementation\n\ngcc/rust/ChangeLog:\n\n\t* expand/rust-macro-invoc-lexer.cc (MacroInvocLexer::split_current_token):\n\tAdd proper implementation.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/expand_macro_qual_path_in_type.rs: New test.", "tree": {"sha": "c194322056777d7e0cb75baf6be2c546e07902d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c194322056777d7e0cb75baf6be2c546e07902d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cda1d7852d6a82df6eea53deb73aab3d459b4443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cda1d7852d6a82df6eea53deb73aab3d459b4443", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cda1d7852d6a82df6eea53deb73aab3d459b4443", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cda1d7852d6a82df6eea53deb73aab3d459b4443/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53059c7e103baabf76a927e016f8cf79f412327a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53059c7e103baabf76a927e016f8cf79f412327a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53059c7e103baabf76a927e016f8cf79f412327a"}], "stats": {"total": 83, "additions": 78, "deletions": 5}, "files": [{"sha": "66a3a6922fc989c9518381b89a0028036944ef86", "filename": "gcc/rust/expand/rust-macro-invoc-lexer.cc", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda1d7852d6a82df6eea53deb73aab3d459b4443/gcc%2Frust%2Fexpand%2Frust-macro-invoc-lexer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda1d7852d6a82df6eea53deb73aab3d459b4443/gcc%2Frust%2Fexpand%2Frust-macro-invoc-lexer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-invoc-lexer.cc?ref=cda1d7852d6a82df6eea53deb73aab3d459b4443", "patch": "@@ -1,4 +1,5 @@\n #include \"rust-macro-invoc-lexer.h\"\n+#include \"rust-token.h\"\n \n namespace Rust {\n \n@@ -19,12 +20,22 @@ MacroInvocLexer::skip_token (int n)\n }\n \n void\n-MacroInvocLexer::split_current_token (TokenId new_left __attribute__ ((unused)),\n-\t\t\t\t      TokenId new_right\n-\t\t\t\t      __attribute__ ((unused)))\n+MacroInvocLexer::split_current_token (TokenId new_left, TokenId new_right)\n {\n-  // FIXME\n-  gcc_unreachable ();\n+  auto &current_token = token_stream.at (offs);\n+  auto current_pos = token_stream.begin () + offs;\n+\n+  auto l_tok = Token::make (new_left, current_token->get_locus ());\n+  auto r_tok = Token::make (new_right, current_token->get_locus ());\n+\n+  token_stream.erase (current_pos);\n+\n+  // `insert` inserts before the specified position, so we insert the right one\n+  // then the left\n+  token_stream.insert (current_pos,\n+\t\t       std::unique_ptr<AST::Token> (new AST::Token (r_tok)));\n+  token_stream.insert (current_pos,\n+\t\t       std::unique_ptr<AST::Token> (new AST::Token (l_tok)));\n }\n \n std::vector<std::unique_ptr<AST::Token>>"}, {"sha": "2d60197e15c0236826578018a88ca6ea48872f4b", "filename": "gcc/testsuite/rust/compile/expand_macro_qual_path_in_type.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda1d7852d6a82df6eea53deb73aab3d459b4443/gcc%2Ftestsuite%2Frust%2Fcompile%2Fexpand_macro_qual_path_in_type.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda1d7852d6a82df6eea53deb73aab3d459b4443/gcc%2Ftestsuite%2Frust%2Fcompile%2Fexpand_macro_qual_path_in_type.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fexpand_macro_qual_path_in_type.rs?ref=cda1d7852d6a82df6eea53deb73aab3d459b4443", "patch": "@@ -0,0 +1,62 @@\n+// this SEGVs in lowering for now\n+// { dg-additional-options \"-frust-compile-until=nameresolution\" }\n+\n+macro_rules! forward_ref_binop {\n+    (impl $imp:ident, $method:ident for $t:ty, $u:ty) => {\n+        forward_ref_binop!(impl $imp, $method for $t, $u,\n+                #[stable(feature = \"rust1\", since = \"1.0.0\")]);\n+    };\n+    (impl $imp:ident, $method:ident for $t:ty, $u:ty, #[$attr:meta]) => {\n+        #[$attr]\n+        impl<'a> $imp<$u> for &'a $t {\n+            type Output = <$t as $imp<$u>>::Output;\n+\n+            #[inline]\n+            fn $method(self, other: $u) -> <$t as $imp<$u>>::Output {\n+                $imp::$method(*self, other)\n+            }\n+        }\n+\n+        #[$attr]\n+        impl<'a> $imp<&'a $u> for $t {\n+            type Output = <$t as $imp<$u>>::Output;\n+\n+            #[inline]\n+            fn $method(self, other: &'a $u) -> <$t as $imp<$u>>::Output {\n+                $imp::$method(self, *other)\n+            }\n+        }\n+\n+        #[$attr]\n+        impl<'a, 'b> $imp<&'a $u> for &'b $t {\n+            type Output = <$t as $imp<$u>>::Output;\n+\n+            #[inline]\n+            fn $method(self, other: &'a $u) -> <$t as $imp<$u>>::Output {\n+                $imp::$method(*self, *other)\n+            }\n+        }\n+    }\n+}\n+\n+#[lang = \"add\"]\n+pub trait Add<RHS = Self> {\n+    type Output;\n+\n+    fn add(self, rhs: RHS) -> Self::Output;\n+}\n+\n+macro_rules! add_impl {\n+    ($($t:ty)*) => ($(\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl Add for $t {\n+            type Output = $t;\n+\n+            fn add(self, other: $t) -> $t { self + other }\n+        }\n+\n+        forward_ref_binop! { impl Add, add for $t, $t }\n+    )*)\n+}\n+\n+add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }"}]}