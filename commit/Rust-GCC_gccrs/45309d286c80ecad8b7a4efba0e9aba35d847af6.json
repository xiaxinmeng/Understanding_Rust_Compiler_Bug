{"sha": "45309d286c80ecad8b7a4efba0e9aba35d847af6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUzMDlkMjg2YzgwZWNhZDhiN2E0ZWZiYTBlOWFiYTM1ZDg0N2FmNg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-06-27T10:25:21Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-06-27T10:25:21Z"}, "message": "Remove quite obvious dead assignments.\n\n2019-06-27  Martin Liska  <mliska@suse.cz>\n\n\t* asan.c (asan_emit_allocas_unpoison): Remove obviously\n\tdead assignments.\n\t* bt-load.c (move_btr_def): Likewise.\n\t* builtins.c (expand_builtin_apply_args_1): Likewise.\n\t(expand_builtin_apply): Likewise.\n\t* cfgexpand.c (expand_asm_stmt): Likewise.\n\t(construct_init_block): Likewise.\n\t* cfghooks.c (verify_flow_info): Likewise.\n\t* cfgloopmanip.c (remove_path): Likewise.\n\t* cfgrtl.c (rtl_verify_bb_layout): Likewise.\n\t* cgraph.c (cgraph_node::set_pure_flag): Likewise.\n\t* combine.c (simplify_if_then_else): Likewise.\n\t* config/i386/i386.c (ix86_setup_incoming_vararg_bounds): Likewise.\n\t(choose_basereg): Likewise.\n\t(ix86_expand_prologue): Likewise.\n\t(ix86_preferred_output_reload_class): Likewise.\n\t* cselib.c (cselib_record_sets): Likewise.\n\t* df-scan.c (df_scan_alloc): Likewise.\n\t* dojump.c (do_jump_by_parts_greater_rtx): Likewise.\n\t* early-remat.c (early_remat::record_equiv_candidates): Likewise.\n\t* emit-rtl.c (try_split): Likewise.\n\t* graphite-scop-detection.c (assign_parameter_index_in_region): Likewise.\n\t* ipa-cp.c (cgraph_edge_brings_all_agg_vals_for_node): Likewise.\n\t* ira-color.c (setup_profitable_hard_regs): Likewise.\n\t* ira.c (rtx_moveable_p): Likewise.\n\t* lra-eliminations.c (eliminate_regs_in_insn): Likewise.\n\t* read-rtl.c (read_subst_mapping): Likewise.\n\t* regrename.c (scan_rtx): Likewise.\n\t* reorg.c (fill_slots_from_thread): Likewise.\n\t* tree-inline.c (tree_function_versioning): Likewise.\n\t* tree-ssa-reassoc.c (optimize_ops_list): Likewise.\n\t* tree-ssa-sink.c (statement_sink_location): Likewise.\n\t* tree-ssa-threadedge.c (thread_across_edge): Likewise.\n\t* tree-vect-loop.c (vect_get_loop_niters): Likewise.\n\t(vect_create_epilog_for_reduction): Likewise.\n\t* tree.c (build_nonstandard_integer_type): Likewise.\n2019-06-27  Martin Liska  <mliska@suse.cz>\n\n\t* class.c (adjust_clone_args): Remove obviously\n\tdead assignments.\n\t(dump_class_hierarchy_r): Likewise.\n\t* decl.c (check_initializer): Likewise.\n\t* parser.c (cp_parser_lambda_expression): Likewise.\n\t* pt.c (unify_bound_ttp_args): Likewise.\n\t(convert_template_argument): Likewise.\n\t* rtti.c (build_headof): Likewise.\n\t* typeck.c (convert_for_initialization): Likewise.\n2019-06-27  Martin Liska  <mliska@suse.cz>\n\n\t* libgcov-driver-system.c (gcov_exit_open_gcda_file): Remove obviously\n\tdead assignments.\n\t* libgcov-util.c: Likewise.\n\nFrom-SVN: r272744", "tree": {"sha": "528d9923fdd0aac57cb59c10dd7c7b84be1713b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/528d9923fdd0aac57cb59c10dd7c7b84be1713b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45309d286c80ecad8b7a4efba0e9aba35d847af6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45309d286c80ecad8b7a4efba0e9aba35d847af6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45309d286c80ecad8b7a4efba0e9aba35d847af6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45309d286c80ecad8b7a4efba0e9aba35d847af6/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "57e088f5ed204ebc3cc43a432320ef85e69d4657", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e088f5ed204ebc3cc43a432320ef85e69d4657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57e088f5ed204ebc3cc43a432320ef85e69d4657"}], "stats": {"total": 173, "additions": 85, "deletions": 88}, "files": [{"sha": "a366de95455515a693b166865e9fb6f95e51c940", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -1,3 +1,42 @@\n+2019-06-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* asan.c (asan_emit_allocas_unpoison): Remove obviously\n+\tdead assignments.\n+\t* bt-load.c (move_btr_def): Likewise.\n+\t* builtins.c (expand_builtin_apply_args_1): Likewise.\n+\t(expand_builtin_apply): Likewise.\n+\t* cfgexpand.c (expand_asm_stmt): Likewise.\n+\t(construct_init_block): Likewise.\n+\t* cfghooks.c (verify_flow_info): Likewise.\n+\t* cfgloopmanip.c (remove_path): Likewise.\n+\t* cfgrtl.c (rtl_verify_bb_layout): Likewise.\n+\t* cgraph.c (cgraph_node::set_pure_flag): Likewise.\n+\t* combine.c (simplify_if_then_else): Likewise.\n+\t* config/i386/i386.c (ix86_setup_incoming_vararg_bounds): Likewise.\n+\t(choose_basereg): Likewise.\n+\t(ix86_expand_prologue): Likewise.\n+\t(ix86_preferred_output_reload_class): Likewise.\n+\t* cselib.c (cselib_record_sets): Likewise.\n+\t* df-scan.c (df_scan_alloc): Likewise.\n+\t* dojump.c (do_jump_by_parts_greater_rtx): Likewise.\n+\t* early-remat.c (early_remat::record_equiv_candidates): Likewise.\n+\t* emit-rtl.c (try_split): Likewise.\n+\t* graphite-scop-detection.c (assign_parameter_index_in_region): Likewise.\n+\t* ipa-cp.c (cgraph_edge_brings_all_agg_vals_for_node): Likewise.\n+\t* ira-color.c (setup_profitable_hard_regs): Likewise.\n+\t* ira.c (rtx_moveable_p): Likewise.\n+\t* lra-eliminations.c (eliminate_regs_in_insn): Likewise.\n+\t* read-rtl.c (read_subst_mapping): Likewise.\n+\t* regrename.c (scan_rtx): Likewise.\n+\t* reorg.c (fill_slots_from_thread): Likewise.\n+\t* tree-inline.c (tree_function_versioning): Likewise.\n+\t* tree-ssa-reassoc.c (optimize_ops_list): Likewise.\n+\t* tree-ssa-sink.c (statement_sink_location): Likewise.\n+\t* tree-ssa-threadedge.c (thread_across_edge): Likewise.\n+\t* tree-vect-loop.c (vect_get_loop_niters): Likewise.\n+\t(vect_create_epilog_for_reduction): Likewise.\n+\t* tree.c (build_nonstandard_integer_type): Likewise.\n+\n 2019-06-27  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-sccvn.c (vn_reference_lookup_3): Encode valueized RHS."}, {"sha": "605d04f87f7b9997129aa9122b0ad53d1aa27668", "filename": "gcc/asan.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -1713,8 +1713,8 @@ asan_emit_allocas_unpoison (rtx top, rtx bot, rtx_insn *before)\n   rtx ret = init_one_libfunc (\"__asan_allocas_unpoison\");\n   top = convert_memory_address (ptr_mode, top);\n   bot = convert_memory_address (ptr_mode, bot);\n-  ret = emit_library_call_value (ret, NULL_RTX, LCT_NORMAL, ptr_mode,\n-\t\t\t\t top, ptr_mode, bot, ptr_mode);\n+  emit_library_call (ret, LCT_NORMAL, ptr_mode,\n+\t\t     top, ptr_mode, bot, ptr_mode);\n \n   do_pending_stack_adjust ();\n   rtx_insn *insns = get_insns ();"}, {"sha": "f68879ca49a848ee0adb431129e21ed1f1d811bd", "filename": "gcc/bt-load.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -1169,7 +1169,6 @@ move_btr_def (basic_block new_def_bb, int btr, btr_def *def, bitmap live_range,\n \n   if (def->other_btr_uses_before_def)\n     {\n-      insp = BB_END (b);\n       for (insp = BB_END (b); ! INSN_P (insp); insp = PREV_INSN (insp))\n \tgcc_assert (insp != BB_HEAD (b));\n "}, {"sha": "c53afe8b033c4bddd9ce6e536e862bb3987b5d1c", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -1638,11 +1638,8 @@ expand_builtin_apply_args_1 (void)\n   /* Save the structure value address unless this is passed as an\n      \"invisible\" first argument.  */\n   if (struct_incoming_value)\n-    {\n-      emit_move_insn (adjust_address (registers, Pmode, size),\n-\t\t      copy_to_reg (struct_incoming_value));\n-      size += GET_MODE_SIZE (Pmode);\n-    }\n+    emit_move_insn (adjust_address (registers, Pmode, size),\n+\t\t    copy_to_reg (struct_incoming_value));\n \n   /* Return the address of the block.  */\n   return copy_addr_to_reg (XEXP (registers, 0));\n@@ -1791,7 +1788,6 @@ expand_builtin_apply (rtx function, rtx arguments, rtx argsize)\n       emit_move_insn (struct_value, value);\n       if (REG_P (struct_value))\n \tuse_reg (&call_fusage, struct_value);\n-      size += GET_MODE_SIZE (Pmode);\n     }\n \n   /* All arguments and registers used for the call are set up by now!  */"}, {"sha": "4e1ee7096e0c6cde53caf97e14e389f66d28d287", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -3044,7 +3044,6 @@ expand_asm_stmt (gasm *stmt)\n \t      }\n \t}\n     }\n-  unsigned nclobbers = clobber_rvec.length();\n \n   /* First pass over inputs and outputs checks validity and sets\n      mark_addressable if needed.  */\n@@ -3317,7 +3316,7 @@ expand_asm_stmt (gasm *stmt)\n   gcc_assert (constraints.length() == noutputs + ninputs);\n \n   /* But it certainly can adjust the clobbers.  */\n-  nclobbers = clobber_rvec.length();\n+  unsigned nclobbers = clobber_rvec.length ();\n \n   /* Third pass checks for easy conflicts.  */\n   /* ??? Why are we doing this on trees instead of rtx.  */\n@@ -5997,11 +5996,11 @@ construct_init_block (void)\n     {\n       first_block = e->dest;\n       redirect_edge_succ (e, init_block);\n-      e = make_single_succ_edge (init_block, first_block, flags);\n+      make_single_succ_edge (init_block, first_block, flags);\n     }\n   else\n-    e = make_single_succ_edge (init_block, EXIT_BLOCK_PTR_FOR_FN (cfun),\n-\t\t\t       EDGE_FALLTHRU);\n+    make_single_succ_edge (init_block, EXIT_BLOCK_PTR_FOR_FN (cfun),\n+\t\t\t   EDGE_FALLTHRU);\n \n   update_bb_for_insn (init_block);\n   return init_block;"}, {"sha": "76183ecf6ae3cfe08062b4e17bdb26bae20f8081", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -259,8 +259,6 @@ verify_flow_info (void)\n \terr = 1;\n       }\n \n-  last_bb_seen = ENTRY_BLOCK_PTR_FOR_FN (cfun);\n-\n   /* Clean up.  */\n   free (last_visited);\n   free (edge_checksum);"}, {"sha": "b5f6a47fb80553a2b083df636370d6d159381d42", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -364,7 +364,6 @@ remove_path (edge e, bool *irred_invalidated,\n \n   for (i = 0; i < nrem; i++)\n     {\n-      bb = rem_bbs[i];\n       FOR_EACH_EDGE (ae, ei, rem_bbs[i]->succs)\n \tif (ae->dest != EXIT_BLOCK_PTR_FOR_FN (cfun)\n \t    && !bitmap_bit_p (seen, ae->dest->index))"}, {"sha": "a6e4c1bf57262b5973bacb925599893b7e89481b", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -2968,7 +2968,6 @@ rtl_verify_bb_layout (void)\n   basic_block last_bb_seen = ENTRY_BLOCK_PTR_FOR_FN (cfun), curr_bb = NULL;\n \n   num_bb_notes = 0;\n-  last_bb_seen = ENTRY_BLOCK_PTR_FOR_FN (cfun);\n \n   for (x = rtx_first; x; x = NEXT_INSN (x))\n     {"}, {"sha": "d161db96f14de9c9b64598c711cef4e9aaad60c1", "filename": "gcc/cgraph.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -2714,8 +2714,6 @@ bool\n cgraph_node::set_pure_flag (bool pure, bool looping)\n {\n   struct set_pure_flag_info info = {pure, looping, false};\n-  if (!pure)\n-    looping = false;\n   call_for_symbol_thunks_and_aliases (set_pure_flag_1, &info, !pure, true);\n   return info.changed;\n }"}, {"sha": "1be922df614237dfe4050a2082b697aa2608b0cf", "filename": "gcc/combine.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -6592,7 +6592,6 @@ simplify_if_then_else (rtx x)\n \t  || reg_mentioned_p (true_rtx, false_rtx)\n \t  || rtx_equal_p (false_rtx, XEXP (cond, 0))))\n     {\n-      true_code = reversed_comparison_code (cond, NULL);\n       SUBST (XEXP (x, 0), reversed_comparison (cond, GET_MODE (cond)));\n       SUBST (XEXP (x, 1), false_rtx);\n       SUBST (XEXP (x, 2), true_rtx);"}, {"sha": "49f49c5f8d0883da28de1f8b93ab348a21d7a668", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -4136,7 +4136,6 @@ ix86_setup_incoming_vararg_bounds (cumulative_args_t cum_v,\n   CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);\n   CUMULATIVE_ARGS next_cum;\n   tree fntype;\n-  int max;\n \n   gcc_assert (!no_rtl);\n \n@@ -4152,10 +4151,6 @@ ix86_setup_incoming_vararg_bounds (cumulative_args_t cum_v,\n   if (stdarg_p (fntype))\n     ix86_function_arg_advance (pack_cumulative_args (&next_cum), mode, type,\n \t\t\t       true);\n-\n-  max = cum->regno + cfun->va_list_gpr_size / UNITS_PER_WORD;\n-  if (max > X86_64_REGPARM_MAX)\n-    max = X86_64_REGPARM_MAX;\n }\n \n \n@@ -6291,7 +6286,6 @@ choose_basereg (HOST_WIDE_INT cfa_offset, rtx &base_reg,\n \t    {\n \t      base_reg = hard_frame_pointer_rtx;\n \t      base_offset = toffset;\n-\t      len = tlen;\n \t    }\n \t}\n     }\n@@ -8003,8 +7997,7 @@ ix86_expand_prologue (void)\n \t\t\t\t   GEN_INT (-allocate), -1, false);\n \n       /* Align the stack.  */\n-      insn = emit_insn (gen_and2_insn (stack_pointer_rtx,\n-\t\t\t\t       GEN_INT (-align_bytes)));\n+      emit_insn (gen_and2_insn (stack_pointer_rtx, GEN_INT (-align_bytes)));\n       m->fs.sp_offset = ROUND_UP (m->fs.sp_offset, align_bytes);\n       m->fs.sp_realigned_offset = m->fs.sp_offset\n \t\t\t\t\t      - frame.stack_realign_allocate;\n@@ -18176,12 +18169,10 @@ ix86_preferred_reload_class (rtx x, reg_class_t regclass)\n static reg_class_t\n ix86_preferred_output_reload_class (rtx x, reg_class_t regclass)\n {\n-  machine_mode mode = GET_MODE (x);\n-\n   /* Restrict the output reload class to the register bank that we are doing\n      math on.  If we would like not to return a subset of CLASS, reject this\n      alternative: if reload cannot do this, it will still use its choice.  */\n-  mode = GET_MODE (x);\n+  machine_mode mode = GET_MODE (x);\n   if (SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH)\n     return MAYBE_SSE_CLASS_P (regclass) ? ALL_SSE_REGS : NO_REGS;\n "}, {"sha": "8314b9762f66c040ace4852c266a1917d661d9f8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -1,3 +1,15 @@\n+2019-06-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* class.c (adjust_clone_args): Remove obviously\n+\tdead assignments.\n+\t(dump_class_hierarchy_r): Likewise.\n+\t* decl.c (check_initializer): Likewise.\n+\t* parser.c (cp_parser_lambda_expression): Likewise.\n+\t* pt.c (unify_bound_ttp_args): Likewise.\n+\t(convert_template_argument): Likewise.\n+\t* rtti.c (build_headof): Likewise.\n+\t* typeck.c (convert_for_initialization): Likewise.\n+\n 2019-06-25  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/70462 - unnecessary base ctor variant with final."}, {"sha": "18e7db08c8df5541f5872fba6065d6cbd5f771fa", "filename": "gcc/cp/class.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -4718,8 +4718,6 @@ adjust_clone_args (tree decl)\n       tree orig_decl_parms = TYPE_ARG_TYPES (TREE_TYPE (decl));\n       tree decl_parms, clone_parms;\n \n-      clone_parms = orig_clone_parms;\n-\n       /* Skip the 'this' parameter.  */\n       orig_clone_parms = TREE_CHAIN (orig_clone_parms);\n       orig_decl_parms = TREE_CHAIN (orig_decl_parms);\n@@ -8549,7 +8547,6 @@ dump_class_hierarchy_r (FILE *stream,\n   tree base_binfo;\n   int i;\n \n-  indented = maybe_indent_hierarchy (stream, indent, 0);\n   fprintf (stream, \"%s (0x\" HOST_WIDE_INT_PRINT_HEX \") \",\n \t   type_as_string (BINFO_TYPE (binfo), TFF_PLAIN_IDENTIFIER),\n \t   (HOST_WIDE_INT) (uintptr_t) binfo);\n@@ -8570,7 +8567,6 @@ dump_class_hierarchy_r (FILE *stream,\n     fprintf (stream, \" virtual\");\n   fprintf (stream, \"\\n\");\n \n-  indented = 0;\n   if (BINFO_PRIMARY_P (binfo))\n     {\n       indented = maybe_indent_hierarchy (stream, indent + 3, indented);"}, {"sha": "bb9d19a81725a165ba59220a48f45c8e5649d91b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -6401,7 +6401,7 @@ build_aggr_init_full_exprs (tree decl, tree init, int flags)\n static tree\n check_initializer (tree decl, tree init, int flags, vec<tree, va_gc> **cleanups)\n {\n-  tree type = TREE_TYPE (decl);\n+  tree type;\n   tree init_code = NULL;\n   tree core_type;\n "}, {"sha": "0a3edb3229d051fbd4bfc72f9090e108cc1f9e2a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -10478,7 +10478,7 @@ cp_parser_lambda_expression (cp_parser* parser)\n     if (ok)\n       maybe_add_lambda_conv_op (type);\n \n-    type = finish_struct (type, /*attributes=*/NULL_TREE);\n+    finish_struct (type, /*attributes=*/NULL_TREE);\n \n     parser->num_template_parameter_lists = saved_num_template_parameter_lists;\n     parser->in_statement = in_statement;"}, {"sha": "cc306fcaa89ae8cf85322eac21832dbbeeed45c5", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -7457,8 +7457,7 @@ unify_bound_ttp_args (tree tparms, tree targs, tree parm, tree& arg,\n     {\n       /* In keeping with P0522R0, adjust P's template arguments\n \t to apply to A's template; then flatten it again.  */\n-      tree nparmvec = parmvec;\n-      nparmvec = coerce_ttp_args_for_tta (arg, parmvec, tf_none);\n+      tree nparmvec = coerce_ttp_args_for_tta (arg, parmvec, tf_none);\n       nparmvec = expand_template_argument_pack (nparmvec);\n \n       if (unify (tparms, targs, nparmvec, argvec,\n@@ -7885,7 +7884,6 @@ convert_template_argument (tree parm,\n \t invalid, but static members are OK.  In any\n \t case, grab the underlying fields/functions\n \t and issue an error later if required.  */\n-      orig_arg = TREE_VALUE (arg);\n       TREE_TYPE (arg) = unknown_type_node;\n     }\n "}, {"sha": "eb1b062a49b04df23b30f4536bd81260b4510a66", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -209,8 +209,8 @@ build_headof (tree exp)\n   offset = build_vtbl_ref (cp_build_fold_indirect_ref (exp),\n                            index);\n \n-  type = cp_build_qualified_type (ptr_type_node,\n-\t\t\t\t  cp_type_quals (TREE_TYPE (exp)));\n+  cp_build_qualified_type (ptr_type_node,\n+\t\t\t   cp_type_quals (TREE_TYPE (exp)));\n   return fold_build_pointer_plus (exp, offset);\n }\n "}, {"sha": "dd76ebe3dbfc546dc2a09825b2f8d48097cd7a50", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -9189,8 +9189,6 @@ convert_for_initialization (tree exp, tree type, tree rhs, int flags,\n   if (exp == error_mark_node)\n     return error_mark_node;\n \n-  rhstype = non_reference (rhstype);\n-\n   type = complete_type (type);\n \n   if (DIRECT_INIT_EXPR_P (type, rhs))"}, {"sha": "7b0545e779cad61b6b6b43b524dd7d9f3125eb9d", "filename": "gcc/cselib.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -2518,13 +2518,12 @@ cselib_record_sets (rtx_insn *insn)\n   int n_sets = 0;\n   int i;\n   struct cselib_set sets[MAX_SETS];\n-  rtx body = PATTERN (insn);\n   rtx cond = 0;\n   int n_sets_before_autoinc;\n   int n_strict_low_parts = 0;\n   struct cselib_record_autoinc_data data;\n \n-  body = PATTERN (insn);\n+  rtx body = PATTERN (insn);\n   if (GET_CODE (body) == COND_EXEC)\n     {\n       cond = COND_EXEC_TEST (body);"}, {"sha": "81e221ee38fbcc4fa6034b18006df59182074454", "filename": "gcc/df-scan.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -229,7 +229,6 @@ void\n df_scan_alloc (bitmap all_blocks ATTRIBUTE_UNUSED)\n {\n   struct df_scan_problem_data *problem_data;\n-  unsigned int insn_num = get_max_uid () + 1;\n   basic_block bb;\n \n   /* Given the number of pools, this is really faster than tearing\n@@ -257,7 +256,6 @@ df_scan_alloc (bitmap all_blocks ATTRIBUTE_UNUSED)\n   bitmap_obstack_initialize (&problem_data->reg_bitmaps);\n   bitmap_obstack_initialize (&problem_data->insn_bitmaps);\n \n-  insn_num += insn_num / 4;\n   df_grow_reg_info ();\n \n   df_grow_insn_info ();"}, {"sha": "bac37a357a9fec50aa07feeee8bf8b1bccdbf95a", "filename": "gcc/dojump.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -668,8 +668,6 @@ do_jump_by_parts_greater_rtx (scalar_int_mode mode, int unsignedp, rtx op0,\n       code = LE;\n       if_true_label = if_false_label;\n       if_false_label = drop_through_label;\n-      drop_through_if_true = false;\n-      drop_through_if_false = true;\n       prob = prob.invert ();\n     }\n "}, {"sha": "0396f16babfd140dd4a79be70e1b4221110834de", "filename": "gcc/early-remat.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fearly-remat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fearly-remat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fearly-remat.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -1123,7 +1123,6 @@ early_remat::record_equiv_candidates (unsigned int cand1_index,\n       ec->representative = cand1_index;\n       cand1->equiv_class = ec;\n     }\n-  cand1 = &m_candidates[ec->representative];\n   cand2->equiv_class = ec;\n   bitmap_set_bit (ec->members, cand2_index);\n   if (cand2_index > ec->representative)"}, {"sha": "e265fa68bce43959f4b020081bd0364f70db1366", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -4017,7 +4017,7 @@ try_split (rtx pat, rtx_insn *trial, int last)\n   before = PREV_INSN (trial);\n   after = NEXT_INSN (trial);\n \n-  tem = emit_insn_after_setloc (seq, trial, INSN_LOCATION (trial));\n+  emit_insn_after_setloc (seq, trial, INSN_LOCATION (trial));\n \n   delete_insn (trial);\n "}, {"sha": "489d0b93b42f02a02be7051896fb390914b8c6ac", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -1105,14 +1105,12 @@ assign_parameter_index_in_region (tree name, sese_info_p region)\n   gcc_assert (TREE_CODE (name) == SSA_NAME\n \t      && INTEGRAL_TYPE_P (TREE_TYPE (name))\n \t      && ! defined_in_sese_p (name, region->region));\n-\n   int i;\n   tree p;\n   FOR_EACH_VEC_ELT (region->params, i, p)\n     if (p == name)\n       return;\n \n-  i = region->params.length ();\n   region->params.safe_push (name);\n }\n "}, {"sha": "b6e781f74509137547f39bb9e89f3efbe180992a", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -4445,7 +4445,6 @@ static bool\n cgraph_edge_brings_all_agg_vals_for_node (struct cgraph_edge *cs,\n \t\t\t\t\t  struct cgraph_node *node)\n {\n-  struct ipa_node_params *orig_caller_info = IPA_NODE_REF (cs->caller);\n   struct ipa_node_params *orig_node_info;\n   struct ipa_agg_replacement_value *aggval;\n   int i, ec, count;\n@@ -4462,8 +4461,6 @@ cgraph_edge_brings_all_agg_vals_for_node (struct cgraph_edge *cs,\n \treturn false;\n \n   orig_node_info = IPA_NODE_REF (IPA_NODE_REF (node)->ipcp_orig_node);\n-  if (orig_caller_info->ipcp_orig_node)\n-    orig_caller_info = IPA_NODE_REF (orig_caller_info->ipcp_orig_node);\n \n   for (i = 0; i < count; i++)\n     {"}, {"sha": "8a90ae1b4e6c10c2efa3239a48cd7b4edb7e5950", "filename": "gcc/ira-color.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -1108,7 +1108,6 @@ setup_profitable_hard_regs (void)\n \t  || empty_profitable_hard_regs (a))\n \tcontinue;\n       data = ALLOCNO_COLOR_DATA (a);\n-      mode = ALLOCNO_MODE (a);\n       if ((costs = ALLOCNO_UPDATED_HARD_REG_COSTS (a)) != NULL\n \t  || (costs = ALLOCNO_HARD_REG_COSTS (a)) != NULL)\n \t{"}, {"sha": "d4ea68f17c078c15ff8fe09e5276a5570497ba6c", "filename": "gcc/ira.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -4414,10 +4414,9 @@ rtx_moveable_p (rtx *loc, enum op_type type)\n {\n   const char *fmt;\n   rtx x = *loc;\n-  enum rtx_code code = GET_CODE (x);\n   int i, j;\n \n-  code = GET_CODE (x);\n+  enum rtx_code code = GET_CODE (x);\n   switch (code)\n     {\n     case CONST:"}, {"sha": "f344e127cfeeb9490ea502f05e57a8926be38b00", "filename": "gcc/lra-eliminations.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Flra-eliminations.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Flra-eliminations.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-eliminations.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -1054,7 +1054,6 @@ eliminate_regs_in_insn (rtx_insn *insn, bool replace_p, bool first_p,\n      single_set without having put new body into the insn and the\n      re-recognition won't hurt in this rare case.  */\n   id = lra_update_insn_recog_data (insn);\n-  static_id = id->insn_static_data;\n }\n \n /* Spill pseudos which are assigned to hard registers in SET.  Add"}, {"sha": "6b1b811cbfeaba05bf7492fe91f06baac4578606", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -1295,15 +1295,15 @@ read_subst_mapping (htab_t subst_iters_table, htab_t subst_attrs_table,\n       m = add_mapping (&substs, subst_iters_table, attr_operands[1]);\n       end_ptr = &m->values;\n       end_ptr = add_map_value (end_ptr, 1, \"\");\n-      end_ptr = add_map_value (end_ptr, 2, \"\");\n+      add_map_value (end_ptr, 2, \"\");\n \n       add_define_attr_for_define_subst (attr_operands[1], queue);\n     }\n \n   m = add_mapping (&substs, subst_attrs_table, attr_operands[0]);\n   end_ptr = &m->values;\n   end_ptr = add_map_value (end_ptr, 1, attr_operands[2]);\n-  end_ptr = add_map_value (end_ptr, 2, attr_operands[3]);\n+  add_map_value (end_ptr, 2, attr_operands[3]);\n }\n \n /* Check newly-created code iterator ITERATOR to see whether every code has the"}, {"sha": "5259d565e582730d59108f9d8a7de718bc04d1ab", "filename": "gcc/regrename.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -1426,10 +1426,9 @@ scan_rtx (rtx_insn *insn, rtx *loc, enum reg_class cl, enum scan_actions action,\n {\n   const char *fmt;\n   rtx x = *loc;\n-  enum rtx_code code = GET_CODE (x);\n   int i, j;\n \n-  code = GET_CODE (x);\n+  enum rtx_code code = GET_CODE (x);\n   switch (code)\n     {\n     case CONST:"}, {"sha": "bdfcf8851cd4eb48e08779afae686691f4b539e7", "filename": "gcc/reorg.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -2708,14 +2708,13 @@ fill_slots_from_thread (rtx_jump_insn *insn, rtx condition,\n       && GET_CODE (PATTERN (new_thread)) != ASM_INPUT\n       && asm_noperands (PATTERN (new_thread)) < 0)\n     {\n-      rtx pat = PATTERN (new_thread);\n       rtx dest;\n       rtx src;\n \n       /* We know \"new_thread\" is an insn due to NONJUMP_INSN_P (new_thread)\n \t above.  */\n       trial = as_a <rtx_insn *> (new_thread);\n-      pat = PATTERN (trial);\n+      rtx pat = PATTERN (trial);\n \n       if (!NONJUMP_INSN_P (trial)\n \t  || GET_CODE (pat) != SET"}, {"sha": "450af460dd04f45d92474540aa0c35d47d3c5bb7", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -6241,11 +6241,11 @@ tree_function_versioning (tree old_decl, tree new_decl,\n \t     in the debug info that var (whole DECL_ORIGIN is the parm\n \t     PARM_DECL) is optimized away, but could be looked up at the\n \t     call site as value of D#X there.  */\n-\t  tree var = vars, vexpr;\n+\t  tree vexpr;\n \t  gimple_stmt_iterator cgsi\n \t    = gsi_after_labels (single_succ (ENTRY_BLOCK_PTR_FOR_FN (cfun)));\n \t  gimple *def_temp;\n-\t  var = vars;\n+\t  tree var = vars;\n \t  i = vec_safe_length (*debug_args);\n \t  do\n \t    {"}, {"sha": "9c1a9a651fe626952f75af88165a80c5192a1473", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -2039,9 +2039,6 @@ optimize_ops_list (enum tree_code opcode,\n       i++;\n     }\n \n-  length = ops->length ();\n-  oelast = ops->last ();\n-\n   if (iterate)\n     optimize_ops_list (opcode, ops);\n }"}, {"sha": "3bfad0f90ed3bcc860e45381682eca23df2b693d", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -433,7 +433,6 @@ statement_sink_location (gimple *stmt, basic_block frombb,\n \n       if (gimple_code (use) != GIMPLE_PHI)\n \t{\n-\t  sinkbb = gimple_bb (use);\n \t  sinkbb = select_best_block (frombb, gimple_bb (use), stmt);\n \n \t  if (sinkbb == frombb)"}, {"sha": "39ea22f0554143d4e49810de15c8ef7919c3786d", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -1361,7 +1361,6 @@ thread_across_edge (gcond *dummy_cond,\n \n         x = new jump_thread_edge (taken_edge, EDGE_COPY_SRC_JOINER_BLOCK);\n \tpath->safe_push (x);\n-\tfound = false;\n \tfound = thread_around_empty_blocks (taken_edge,\n \t\t\t\t\t    dummy_cond,\n \t\t\t\t\t    avail_exprs_stack,"}, {"sha": "95c2d8203ac30621c26979c68220fed4c4892d29", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -730,9 +730,7 @@ vect_get_loop_niters (struct loop *loop, tree *assumptions,\n   if (!exit)\n     return cond;\n \n-  niter = chrec_dont_know;\n   may_be_zero = NULL_TREE;\n-  niter_assumptions = boolean_true_node;\n   if (!number_of_iterations_exit_assumptions (loop, exit, &niter_desc, NULL)\n       || chrec_contains_undetermined (niter_desc.niter))\n     return cond;\n@@ -5113,7 +5111,6 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs,\n \t  if (off != 0)\n \t    {\n \t      tree new_idx_val = idx_val;\n-\t      tree new_val = val;\n \t      if (off != v_size - el_size)\n \t\t{\n \t\t  new_idx_val = make_ssa_name (idx_eltype);\n@@ -5122,7 +5119,7 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs,\n \t\t\t\t\t\t     old_idx_val);\n \t\t  gsi_insert_before (&exit_gsi, epilog_stmt, GSI_SAME_STMT);\n \t\t}\n-\t      new_val = make_ssa_name (data_eltype);\n+\t      tree new_val = make_ssa_name (data_eltype);\n \t      epilog_stmt = gimple_build_assign (new_val,\n \t\t\t\t\t\t COND_EXPR,\n \t\t\t\t\t\t build2 (GT_EXPR,\n@@ -5303,14 +5300,13 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs,\n \t in a vector mode of smaller size and first reduce upper/lower\n \t halves against each other.  */\n       enum machine_mode mode1 = mode;\n-      tree vectype1 = vectype;\n       unsigned sz = tree_to_uhwi (TYPE_SIZE_UNIT (vectype));\n       unsigned sz1 = sz;\n       if (!slp_reduc\n \t  && (mode1 = targetm.vectorize.split_reduction (mode)) != mode)\n \tsz1 = GET_MODE_SIZE (mode1).to_constant ();\n \n-      vectype1 = get_vectype_for_scalar_type_and_size (scalar_type, sz1);\n+      tree vectype1 = get_vectype_for_scalar_type_and_size (scalar_type, sz1);\n       reduce_with_shift = have_whole_vector_shift (mode1);\n       if (!VECTOR_MODE_P (mode1))\n \treduce_with_shift = false;"}, {"sha": "2032a936973ddbc96c041f4c72897d006d250d69", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -8212,8 +8212,6 @@ build_nonstandard_integer_type (unsigned HOST_WIDE_INT precision,\n   else\n     fixup_signed_type (itype);\n \n-  ret = itype;\n-\n   inchash::hash hstate;\n   inchash::add_expr (TYPE_MAX_VALUE (itype), hstate);\n   ret = type_hash_canon (hstate.end (), itype);"}, {"sha": "5b560e803b1fb5b205a0695508a5543c78365788", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -1,3 +1,9 @@\n+2019-06-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* libgcov-driver-system.c (gcov_exit_open_gcda_file): Remove obviously\n+\tdead assignments.\n+\t* libgcov-util.c: Likewise.\n+\n 2019-06-27  Martin Liska  <mliska@suse.cz>\n \n \t* libgcov-util.c (gcov_profile_merge): Release allocated"}, {"sha": "7d48a1f87d887a068dc90ef29027586998ce71ea", "filename": "libgcc/libgcov-driver-system.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/libgcc%2Flibgcov-driver-system.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/libgcc%2Flibgcov-driver-system.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-driver-system.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -263,10 +263,8 @@ static int\n gcov_exit_open_gcda_file (struct gcov_info *gi_ptr,\n \t\t\t  struct gcov_filename *gf)\n {\n-  const char *fname = gi_ptr->filename;\n   int append_slash = 0;\n-\n-  fname = gi_ptr->filename;\n+  const char *fname = gi_ptr->filename;\n \n   /* Build relocated filename, stripping off leading\n      directories from the initial filename if requested. */"}, {"sha": "94d4575c9298d704a39c994d3eec626103aecbd8", "filename": "libgcc/libgcov-util.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45309d286c80ecad8b7a4efba0e9aba35d847af6/libgcc%2Flibgcov-util.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45309d286c80ecad8b7a4efba0e9aba35d847af6/libgcc%2Flibgcov-util.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-util.c?ref=45309d286c80ecad8b7a4efba0e9aba35d847af6", "patch": "@@ -461,10 +461,9 @@ gcov_read_profile_dir (const char* dir_name, int recompute_summary ATTRIBUTE_UNU\n #ifdef HAVE_FTW_H\n   ftw (\".\", ftw_read_file, 50);\n #endif\n-  ret = chdir (pwd);\n+  chdir (pwd);\n   free (pwd);\n \n-\n   return gcov_info_head;;\n }\n "}]}