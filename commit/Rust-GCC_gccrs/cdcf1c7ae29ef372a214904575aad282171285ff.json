{"sha": "cdcf1c7ae29ef372a214904575aad282171285ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RjZjFjN2FlMjllZjM3MmEyMTQ5MDQ1NzVhYWQyODIxNzEyODVmZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-09-10T15:05:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-09-10T15:05:40Z"}, "message": "[multiple changes]\n\n2013-09-10  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* aspects.adb: Add entries in the Has_Aspect_Specifications_Flag\n\ttable for package body and body stubs.\n\t(Move_Or_Merge_Aspects): New routine.\n\t(Remove_Aspects): New routine.\n\t* aspects.ads (Move_Aspects): Update comment on usage.\n\t(Move_Or_Merge_Aspects): New routine.\n\t(Remove_Aspects): New routine.\n\t* par-ch3.adb: Update the grammar of private_type_declaration,\n\tprivate_extension_declaration, object_renaming_declaration,\n\tand exception_renaming_declaration.\n\t(P_Subprogram): Parse the\n\taspect specifications that apply to a body stub.\n\t* par-ch6.adb: Update the grammar of subprogram_body_stub and\n\tgeneric_instantiation.\n\t* par-ch7.adb: Update the grammar of package_declaration,\n\tpackage_specification, package_body, package_renaming_declaration,\n\tpackage_body_stub.\n\t(P_Package): Parse the aspect specifications\n\tthat apply to a body, a body stub and package renaming.\n\t* par-ch9.adb: Update the grammar of entry_declaration,\n\tprotected_body, protected_body_stub, task_body,\n\tand task_body_stub.\n\t(P_Protected): Add local variable\n\tAspect_Sloc. Add local constant Dummy_Node.  Parse the aspect\n\tspecifications that apply to a protected body and a protected\n\tbody stub.\n\t(P_Task): Add local variable Aspect_Sloc. Add local\n\tconstant Dummy_Node. Parse the aspect specifications that apply\n\tto a task body and a task body stub.\n\t* par-ch12.adb: Update the grammar of\n\tgeneric_renaming_declaration.\n\t(P_Generic): Parse the aspect\n\tspecifications that apply to a generic renaming.\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Do not emit\n\tan error when analyzing aspects that apply to a body stub. Such\n\taspects are relocated to the proper body.\n\t* sem_ch7.adb (Analyze_Package_Body_Helper): Analyze the aspect\n\tspecifications that apply to a body.\n\t* sem_ch9.adb (Analyze_Protected_Body): Warn about user-defined\n\taspects not being supported on protected bodies. Remove the\n\taspect specifications.\t(Analyze_Single_Protected_Declaration):\n\tAnalyze the aspects that apply to a single protected declaration.\n\t(Analyze_Task_Body): Warn about user-defined aspects not being\n\tsupported on task bodies. Remove the aspect specifications.\n\t* sem_ch10.adb: Add with and use clause for Aspects.\n\t(Analyze_Package_Body_Stub): Propagate the aspect specifications\n\tfrom the stub to the proper body.\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Insert the\n\tcorresponding pragma of an aspect that applies to a body in the\n\tdeclarations of the body.\n\t* sinfo.ads: Update the gramma of expression_function,\n\tprivate_type_declaration, private_extension_declaration,\n\tobject_renaming_declaration, exception_renaming_declaration,\n\tpackage_renaming_declaration, subprogram_renaming_declaration,\n\tgeneric_renaming_declaration, entry_declaration,\n\tsubprogram_body_stub, package_body_stub, task_body_stub,\n\tgeneric_subprogram_declaration.\n\n2013-09-10  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma): Add processing\n\tfor aspect/pragma SPARK_Mode when it applies to a [library-level]\n\tsubprogram or package [body].\n\n2013-09-10  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Document that -gnatc and -gnatR cannot be\n\tgiven together.\n\t* switch-c.adb (Scan_Front_End_Switches): Give error if both\n\t-gnatR and -gnatc given.\n\n2013-09-10  Robert Dewar  <dewar@adacore.com>\n\n\t* g-table.ads, g-table.adb (For_Each): New generic procedure\n\t(Sort_Table): New generic procedure.\n\nFrom-SVN: r202460", "tree": {"sha": "054f0d78e3bf4bb0e53238efe06d4c199c493e06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/054f0d78e3bf4bb0e53238efe06d4c199c493e06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdcf1c7ae29ef372a214904575aad282171285ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdcf1c7ae29ef372a214904575aad282171285ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdcf1c7ae29ef372a214904575aad282171285ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdcf1c7ae29ef372a214904575aad282171285ff/comments", "author": null, "committer": null, "parents": [{"sha": "3699edc41f1cc0acb60c6656baa3d08dddedc3e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3699edc41f1cc0acb60c6656baa3d08dddedc3e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3699edc41f1cc0acb60c6656baa3d08dddedc3e7"}], "stats": {"total": 649, "additions": 556, "deletions": 93}, "files": [{"sha": "159bdd19e02b67f2be542e53b5aebd06cc1a1d87", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cdcf1c7ae29ef372a214904575aad282171285ff", "patch": "@@ -1,3 +1,81 @@\n+2013-09-10  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* aspects.adb: Add entries in the Has_Aspect_Specifications_Flag\n+\ttable for package body and body stubs.\n+\t(Move_Or_Merge_Aspects): New routine.\n+\t(Remove_Aspects): New routine.\n+\t* aspects.ads (Move_Aspects): Update comment on usage.\n+\t(Move_Or_Merge_Aspects): New routine.\n+\t(Remove_Aspects): New routine.\n+\t* par-ch3.adb: Update the grammar of private_type_declaration,\n+\tprivate_extension_declaration, object_renaming_declaration,\n+\tand exception_renaming_declaration.\n+\t(P_Subprogram): Parse the\n+\taspect specifications that apply to a body stub.\n+\t* par-ch6.adb: Update the grammar of subprogram_body_stub and\n+\tgeneric_instantiation.\n+\t* par-ch7.adb: Update the grammar of package_declaration,\n+\tpackage_specification, package_body, package_renaming_declaration,\n+\tpackage_body_stub.\n+\t(P_Package): Parse the aspect specifications\n+\tthat apply to a body, a body stub and package renaming.\n+\t* par-ch9.adb: Update the grammar of entry_declaration,\n+\tprotected_body, protected_body_stub, task_body,\n+\tand task_body_stub.\n+\t(P_Protected): Add local variable\n+\tAspect_Sloc. Add local constant Dummy_Node.  Parse the aspect\n+\tspecifications that apply to a protected body and a protected\n+\tbody stub.\n+\t(P_Task): Add local variable Aspect_Sloc. Add local\n+\tconstant Dummy_Node. Parse the aspect specifications that apply\n+\tto a task body and a task body stub.\n+\t* par-ch12.adb: Update the grammar of\n+\tgeneric_renaming_declaration.\n+\t(P_Generic): Parse the aspect\n+\tspecifications that apply to a generic renaming.\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Do not emit\n+\tan error when analyzing aspects that apply to a body stub. Such\n+\taspects are relocated to the proper body.\n+\t* sem_ch7.adb (Analyze_Package_Body_Helper): Analyze the aspect\n+\tspecifications that apply to a body.\n+\t* sem_ch9.adb (Analyze_Protected_Body): Warn about user-defined\n+\taspects not being supported on protected bodies. Remove the\n+\taspect specifications.\t(Analyze_Single_Protected_Declaration):\n+\tAnalyze the aspects that apply to a single protected declaration.\n+\t(Analyze_Task_Body): Warn about user-defined aspects not being\n+\tsupported on task bodies. Remove the aspect specifications.\n+\t* sem_ch10.adb: Add with and use clause for Aspects.\n+\t(Analyze_Package_Body_Stub): Propagate the aspect specifications\n+\tfrom the stub to the proper body.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Insert the\n+\tcorresponding pragma of an aspect that applies to a body in the\n+\tdeclarations of the body.\n+\t* sinfo.ads: Update the gramma of expression_function,\n+\tprivate_type_declaration, private_extension_declaration,\n+\tobject_renaming_declaration, exception_renaming_declaration,\n+\tpackage_renaming_declaration, subprogram_renaming_declaration,\n+\tgeneric_renaming_declaration, entry_declaration,\n+\tsubprogram_body_stub, package_body_stub, task_body_stub,\n+\tgeneric_subprogram_declaration.\n+\n+2013-09-10  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Add processing\n+\tfor aspect/pragma SPARK_Mode when it applies to a [library-level]\n+\tsubprogram or package [body].\n+\n+2013-09-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Document that -gnatc and -gnatR cannot be\n+\tgiven together.\n+\t* switch-c.adb (Scan_Front_End_Switches): Give error if both\n+\t-gnatR and -gnatc given.\n+\n+2013-09-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* g-table.ads, g-table.adb (For_Each): New generic procedure\n+\t(Sort_Table): New generic procedure.\n+\n 2013-09-10  Thomas Quinot  <quinot@adacore.com>\n \n \t* adaint.c (__gnat_is_executable_file_attr): Should be true"}, {"sha": "111b407867b1b96c5e7a55261aa589f847f771c2", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=cdcf1c7ae29ef372a214904575aad282171285ff", "patch": "@@ -271,6 +271,31 @@ package body Aspects is\n       end if;\n    end Move_Aspects;\n \n+   ---------------------------\n+   -- Move_Or_Merge_Aspects --\n+   ---------------------------\n+\n+   procedure Move_Or_Merge_Aspects (From : Node_Id; To : Node_Id) is\n+   begin\n+      if Has_Aspects (From) then\n+\n+         --  Merge the aspects of From into To. Make sure that From has no\n+         --  aspects after the merge takes place.\n+\n+         if Has_Aspects (To) then\n+            Append_List\n+              (List => Aspect_Specifications (From),\n+               To   => Aspect_Specifications (To));\n+            Remove_Aspects (From);\n+\n+         --  Otherwise simply move the aspects\n+\n+         else\n+            Move_Aspects (From => From, To => To);\n+         end if;\n+      end if;\n+   end Move_Or_Merge_Aspects;\n+\n    -----------------------------------\n    -- Permits_Aspect_Specifications --\n    -----------------------------------\n@@ -294,6 +319,8 @@ package body Aspects is\n       N_Generic_Subprogram_Declaration         => True,\n       N_Object_Declaration                     => True,\n       N_Object_Renaming_Declaration            => True,\n+      N_Package_Body                           => True,\n+      N_Package_Body_Stub                      => True,\n       N_Package_Declaration                    => True,\n       N_Package_Instantiation                  => True,\n       N_Package_Specification                  => True,\n@@ -302,6 +329,7 @@ package body Aspects is\n       N_Private_Type_Declaration               => True,\n       N_Procedure_Instantiation                => True,\n       N_Protected_Body                         => True,\n+      N_Protected_Body_Stub                    => True,\n       N_Protected_Type_Declaration             => True,\n       N_Single_Protected_Declaration           => True,\n       N_Single_Task_Declaration                => True,\n@@ -311,6 +339,7 @@ package body Aspects is\n       N_Subprogram_Body_Stub                   => True,\n       N_Subtype_Declaration                    => True,\n       N_Task_Body                              => True,\n+      N_Task_Body_Stub                         => True,\n       N_Task_Type_Declaration                  => True,\n       others                                   => False);\n \n@@ -319,6 +348,18 @@ package body Aspects is\n       return Has_Aspect_Specifications_Flag (Nkind (N));\n    end Permits_Aspect_Specifications;\n \n+   --------------------\n+   -- Remove_Aspects --\n+   --------------------\n+\n+   procedure Remove_Aspects (N : Node_Id) is\n+   begin\n+      if Has_Aspects (N) then\n+         Aspect_Specifications_Hash_Table.Remove (N);\n+         Set_Has_Aspects (N, False);\n+      end if;\n+   end Remove_Aspects;\n+\n    -----------------\n    -- Same_Aspect --\n    -----------------"}, {"sha": "25c178f77726d8b601c2d4cf45ed1eb50e2febca", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=cdcf1c7ae29ef372a214904575aad282171285ff", "patch": "@@ -698,16 +698,24 @@ package Aspects is\n    --  Determine whether entity Id has aspect A\n \n    procedure Move_Aspects (From : Node_Id; To : Node_Id);\n-   --  Moves aspects from 'From' node to 'To' node. Has_Aspects (To) must be\n-   --  False on entry. If Has_Aspects (From) is False, the call has no effect.\n-   --  Otherwise the aspects are moved and on return Has_Aspects (To) is True,\n-   --  and Has_Aspects (From) is False.\n+   --  Relocate the aspect specifications of node From to node To. On entry it\n+   --  is assumed that To does not have aspect specifications. If From has no\n+   --  aspects, the routine has no effect.\n+\n+   procedure Move_Or_Merge_Aspects (From : Node_Id; To : Node_Id);\n+   --  Relocate the aspect specifications of node From to node To. If To has\n+   --  aspects, the aspects of From are added to the aspects of To. If From has\n+   --  no aspects, the routine has no effect.\n \n    function Permits_Aspect_Specifications (N : Node_Id) return Boolean;\n    --  Returns True if the node N is a declaration node that permits aspect\n    --  specifications in the grammar. It is possible for other nodes to have\n    --  aspect specifications as a result of Rewrite or Replace calls.\n \n+   procedure Remove_Aspects (N : Node_Id);\n+   --  Delete the aspect specifications associated with node N. If the node has\n+   --  no aspects, the routine has no effect.\n+\n    function Same_Aspect (A1 : Aspect_Id; A2 : Aspect_Id) return Boolean;\n    --  Returns True if A1 and A2 are (essentially) the same aspect. This is not\n    --  a simple equality test because e.g. Post and Postcondition are the same."}, {"sha": "9b3692bbe06547390fb7648f7bc4e96cff6cea64", "filename": "gcc/ada/g-table.adb", "status": "modified", "additions": 95, "deletions": 12, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fg-table.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fg-table.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-table.adb?ref=cdcf1c7ae29ef372a214904575aad282171285ff", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1998-2010, AdaCore                     --\n+--                     Copyright (C) 1998-2013, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,6 +29,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with GNAT.Heap_Sort_G;\n+\n with System;        use System;\n with System.Memory; use System.Memory;\n \n@@ -114,6 +116,19 @@ package body GNAT.Table is\n       Last_Val := Last_Val - 1;\n    end Decrement_Last;\n \n+   --------------\n+   -- For_Each --\n+   --------------\n+\n+   procedure For_Each is\n+      Quit : Boolean := False;\n+   begin\n+      for Index in Table_Low_Bound .. Table_Index_Type (Last_Val) loop\n+         Action (Index, Table (Index), Quit);\n+         exit when Quit;\n+      end loop;\n+   end For_Each;\n+\n    ----------\n    -- Free --\n    ----------\n@@ -259,17 +274,17 @@ package body GNAT.Table is\n       pragma Import (Ada, Allocated_Table);\n       pragma Suppress (Range_Check, On => Allocated_Table);\n       for Allocated_Table'Address use Allocated_Table_Address;\n-      --  Allocated_Table represents the currently allocated array, plus\n-      --  one element (the supplementary element is used to have a\n-      --  convenient way of computing the address just past the end of the\n-      --  current allocation). Range checks are suppressed because this unit\n-      --  uses direct calls to System.Memory for allocation, and this can\n-      --  yield misaligned storage (and we cannot rely on the bootstrap\n-      --  compiler supporting specifically disabling alignment checks, so we\n-      --  need to suppress all range checks). It is safe to suppress this check\n-      --  here because we know that a (possibly misaligned) object of that type\n-      --  does actually exist at that address.\n-      --  ??? We should really improve the allocation circuitry here to\n+      --  Allocated_Table represents the currently allocated array, plus one\n+      --  element (the supplementary element is used to have a convenient\n+      --  way of computing the address just past the end of the current\n+      --  allocation). Range checks are suppressed because this unit uses\n+      --  direct calls to System.Memory for allocation, and this can yield\n+      --  misaligned storage (and we cannot rely on the bootstrap compiler\n+      --  supporting specifically disabling alignment checks, so we need to\n+      --  suppress all range checks). It is safe to suppress this check here\n+      --  because we know that a (possibly misaligned) object of that type\n+      --  does actually exist at that address. ??? We should really improve\n+      --  the allocation circuitry here to\n       --  guarantee proper alignment.\n \n       Need_Realloc : constant Boolean := Integer (Index) > Max;\n@@ -324,6 +339,74 @@ package body GNAT.Table is\n       end if;\n    end Set_Last;\n \n+   ----------------\n+   -- Sort_Table --\n+   ----------------\n+\n+   procedure Sort_Table is\n+\n+      Temp : Table_Component_Type;\n+      --  A temporary position to simulate index 0\n+\n+      --  Local subprograms\n+\n+      function Index_Of (Idx : Natural) return Table_Index_Type;\n+      --  Return index of Idx'th element of table\n+\n+      function Lower_Than (Op1, Op2 : Natural) return Boolean;\n+      --  Compare two components\n+\n+      procedure Move (From : Natural; To : Natural);\n+      --  Move one component\n+\n+      package Heap_Sort is new GNAT.Heap_Sort_G (Move, Lower_Than);\n+\n+      --------------\n+      -- Index_Of --\n+      --------------\n+\n+      function Index_Of (Idx : Natural) return Table_Index_Type is\n+         J : constant Integer'Base := Table_Index_Type'Pos (First) + Idx - 1;\n+      begin\n+         return Table_Index_Type'Val (J);\n+      end Index_Of;\n+\n+      ----------\n+      -- Move --\n+      ----------\n+\n+      procedure Move (From : Natural; To : Natural) is\n+      begin\n+         if From = 0 then\n+            Table (Index_Of (To)) := Temp;\n+         elsif To = 0 then\n+            Temp := Table (Index_Of (From));\n+         else\n+            Table (Index_Of (To)) := Table (Index_Of (From));\n+         end if;\n+      end Move;\n+\n+      ----------------\n+      -- Lower_Than --\n+      ----------------\n+\n+      function Lower_Than (Op1, Op2 : Natural) return Boolean is\n+      begin\n+         if Op1 = 0 then\n+            return Lt (Temp, Table (Index_Of (Op2)));\n+         elsif Op2 = 0 then\n+            return Lt (Table (Index_Of (Op1)), Temp);\n+         else\n+            return Lt (Table (Index_Of (Op1)), Table (Index_Of (Op2)));\n+         end if;\n+      end Lower_Than;\n+\n+   --  Start of processing for Sort_Table\n+\n+   begin\n+      Heap_Sort.Sort (Natural (Last - First) + 1);\n+   end Sort_Table;\n+\n begin\n    Init;\n end GNAT.Table;"}, {"sha": "c9b75f61648efd707a551b2ae9e21f995040b52c", "filename": "gcc/ada/g-table.ads", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fg-table.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fg-table.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-table.ads?ref=cdcf1c7ae29ef372a214904575aad282171285ff", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 1998-2010, AdaCore                     --\n+--                     Copyright (C) 1998-2013, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -201,4 +201,25 @@ package GNAT.Table is\n    --  This means that a reference X.Table (X.Allocate) is incorrect, since\n    --  the call to X.Allocate may modify the results of calling X.Table.\n \n+   generic\n+     with procedure Action\n+       (Index : Table_Index_Type;\n+        Item  : Table_Component_Type;\n+        Quit  : in out Boolean) is <>;\n+   procedure For_Each;\n+   --  Calls procedure Action for each component of the table, or until\n+   --  one of these calls set Quit to True.\n+\n+   generic\n+     with function Lt (Comp1, Comp2 : Table_Component_Type) return Boolean;\n+   procedure Sort_Table;\n+   --  This procedure sorts the components of the table into ascending\n+   --  order making calls to Lt to do required comparisons, and using\n+   --  assignments to move components around. The Lt function returns True\n+   --  if Comp1 is less than Comp2 (in the sense of the desired sort), and\n+   --  False if Comp1 is greater than Comp2. For equal objects it does not\n+   --  matter if True or False is returned (it is slightly more efficient\n+   --  to return False). The sort is not stable (the order of equal items\n+   --  in the table is not preserved).\n+\n end GNAT.Table;"}, {"sha": "4bf45940ae463c10566ca53f4c206e8cc6d2f7ad", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=cdcf1c7ae29ef372a214904575aad282171285ff", "patch": "@@ -3697,7 +3697,9 @@ object file after compilation. If @command{gnatmake} is called with\n @option{-gnatc} as a builder switch (before @option{-cargs} or in package\n Builder of the project file) then @command{gnatmake} will not fail because\n it will not look for the object files after compilation, and it will not try\n-to build and link.\n+to build and link. This switch may not be given if a previous @code{-gnatR}\n+switch has been given, since @code{-gnatR} requires that the code generator\n+be called to complete determination of representation information.\n \n @item -gnatC\n @cindex @option{-gnatC} (@command{gcc})\n@@ -4006,8 +4008,10 @@ Treat pragma Restrictions as Restriction_Warnings.\n @item ^-gnatR@r{[}0@r{/}1@r{/}2@r{/}3@r{[}s@r{]]}^/REPRESENTATION_INFO^\n @cindex @option{-gnatR} (@command{gcc})\n Output representation information for declared types and objects.\n-Note that this switch is not allowed if a previous\n--gnatD switch has been given, since these two switches are not compatible.\n+Note that this switch is not allowed if a previous @code{-gnatD} switch has\n+been given, since these two switches are not compatible. It is also not allowed\n+if a previous @code{-gnatc} switch has been given, since we must be generating\n+code to be able to determine representation information.\n \n @item -gnats\n @cindex @option{-gnats} (@command{gcc})"}, {"sha": "ed6e314dca00cd4873fe5e1abe9b3615c1445099", "filename": "gcc/ada/par-ch12.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fpar-ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fpar-ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch12.adb?ref=cdcf1c7ae29ef372a214904575aad282171285ff", "patch": "@@ -74,10 +74,13 @@ package body Ch12 is\n    --  GENERIC_RENAMING_DECLARATION ::=\n    --    generic package DEFINING_PROGRAM_UNIT_NAME\n    --      renames generic_package_NAME\n+   --        [ASPECT_SPECIFICATIONS];\n    --  | generic procedure DEFINING_PROGRAM_UNIT_NAME\n    --      renames generic_procedure_NAME\n+   --        [ASPECT_SPECIFICATIONS];\n    --  | generic function DEFINING_PROGRAM_UNIT_NAME\n    --      renames generic_function_NAME\n+   --        [ASPECT_SPECIFICATIONS];\n \n    --  GENERIC_FORMAL_PARAMETER_DECLARATION ::=\n    --    FORMAL_OBJECT_DECLARATION\n@@ -140,6 +143,8 @@ package body Ch12 is\n                Scan; -- past RENAMES\n                Set_Defining_Unit_Name (Decl_Node, Def_Unit);\n                Set_Name (Decl_Node, P_Name);\n+\n+               P_Aspect_Specifications (Decl_Node, Semicolon => False);\n                TF_Semicolon;\n                return Decl_Node;\n             end if;\n@@ -211,7 +216,6 @@ package body Ch12 is\n \n       else\n          Gen_Decl := New_Node (N_Generic_Subprogram_Declaration, Gen_Sloc);\n-\n          Set_Specification (Gen_Decl, P_Subprogram_Specification);\n \n          if Nkind (Defining_Unit_Name (Specification (Gen_Decl))) ="}, {"sha": "29126152d43cde3d7ab0c2e0b0343b186944a34e", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=cdcf1c7ae29ef372a214904575aad282171285ff", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -275,13 +275,14 @@ package body Ch3 is\n \n    --  PRIVATE_TYPE_DECLARATION ::=\n    --    type DEFINING_IDENTIFIER [DISCRIMINANT_PART]\n-   --      is [abstract] [tagged] [limited] private;\n+   --      is [abstract] [tagged] [limited] private\n+   --        [ASPECT_SPECIFICATIONS];\n \n    --  PRIVATE_EXTENSION_DECLARATION ::=\n    --    type DEFINING_IDENTIFIER [DISCRIMINANT_PART] is\n    --      [abstract] [limited | synchronized]\n    --        new ancestor_SUBTYPE_INDICATION [and INTERFACE_LIST]\n-   --          with private;\n+   --          with private [ASPECT_SPECIFICATIONS];\n \n    --  TYPE_DEFINITION ::=\n    --    ENUMERATION_TYPE_DEFINITION  | INTEGER_TYPE_DEFINITION\n@@ -1277,12 +1278,15 @@ package body Ch3 is\n \n    --  OBJECT_RENAMING_DECLARATION ::=\n    --    DEFINING_IDENTIFIER :\n-   --      [NULL_EXCLUSION] SUBTYPE_MARK renames object_NAME;\n+   --      [NULL_EXCLUSION] SUBTYPE_MARK renames object_NAME\n+   --        [ASPECT_SPECIFICATIONS];\n    --  | DEFINING_IDENTIFIER :\n-   --      ACCESS_DEFINITION renames object_NAME;\n+   --      ACCESS_DEFINITION renames object_NAME\n+   --        [ASPECT_SPECIFICATIONS];\n \n    --  EXCEPTION_RENAMING_DECLARATION ::=\n-   --    DEFINING_IDENTIFIER : exception renames exception_NAME;\n+   --    DEFINING_IDENTIFIER : exception renames exception_NAME\n+   --      [ASPECT_SPECIFICATIONS];\n \n    --  EXCEPTION_DECLARATION ::=\n    --    DEFINING_IDENTIFIER_LIST : exception\n@@ -1669,15 +1673,19 @@ package body Ch3 is\n \n             --  OBJECT_DECLARATION ::=\n             --    DEFINING_IDENTIFIER_LIST : [aliased] [constant]\n-            --      [NULL_EXCLUSION] SUBTYPE_INDICATION [:= EXPRESSION];\n+            --      [NULL_EXCLUSION] SUBTYPE_INDICATION [:= EXPRESSION]\n+            --        [ASPECT_SPECIFICATIONS];\n             --  | DEFINING_IDENTIFIER_LIST : [aliased] [constant]\n-            --      ACCESS_DEFINITION [:= EXPRESSION];\n+            --      ACCESS_DEFINITION [:= EXPRESSION]\n+            --        [ASPECT_SPECIFICATIONS];\n \n             --  OBJECT_RENAMING_DECLARATION ::=\n             --    DEFINING_IDENTIFIER :\n-            --      [NULL_EXCLUSION] SUBTYPE_MARK renames object_NAME;\n+            --      [NULL_EXCLUSION] SUBTYPE_MARK renames object_NAME\n+            --        [ASPECT_SPECIFICATIONS];\n             --  | DEFINING_IDENTIFIER :\n-            --      ACCESS_DEFINITION renames object_NAME;\n+            --      ACCESS_DEFINITION renames object_NAME\n+            --        [ASPECT_SPECIFICATIONS];\n \n             Not_Null_Present := P_Null_Exclusion;  --  Ada 2005 (AI-231/423)\n \n@@ -1893,7 +1901,7 @@ package body Ch3 is\n    --     type DEFINING_IDENTIFIER [DISCRIMINANT_PART] is\n    --       [abstract] [limited | synchronized]\n    --          new ancestor_SUBTYPE_INDICATION [and INTERFACE_LIST]\n-   --            with private;\n+   --            with private [ASPECT_SPECIFICATIONS];\n \n    --  RECORD_EXTENSION_PART ::= with RECORD_DEFINITION\n "}, {"sha": "f6aacd1405759d28174fa8a34d70ac3790c306d9", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=cdcf1c7ae29ef372a214904575aad282171285ff", "patch": "@@ -161,13 +161,16 @@ package body Ch6 is\n    --      [ASPECT_SPECIFICATIONS];\n \n    --  SUBPROGRAM_BODY_STUB ::=\n-   --    SUBPROGRAM_SPECIFICATION is separate;\n+   --    SUBPROGRAM_SPECIFICATION is separate\n+   --      [ASPECT_SPECIFICATIONS];\n \n    --  GENERIC_INSTANTIATION ::=\n    --    procedure DEFINING_PROGRAM_UNIT_NAME is\n-   --      new generic_procedure_NAME [GENERIC_ACTUAL_PART];\n+   --      new generic_procedure_NAME [GENERIC_ACTUAL_PART]\n+   --        [ASPECT_SPECIFICATIONS];\n    --  | function DEFINING_DESIGNATOR is\n-   --      new generic_function_NAME [GENERIC_ACTUAL_PART];\n+   --      new generic_function_NAME [GENERIC_ACTUAL_PART]\n+   --        [ASPECT_SPECIFICATIONS];\n \n    --  NULL_PROCEDURE_DECLARATION ::=\n    --    SUBPROGRAM_SPECIFICATION is null;\n@@ -394,8 +397,8 @@ package body Ch6 is\n       if Token = Tok_Identifier\n         and then not Token_Is_At_Start_Of_Line\n       then\n-            T_Left_Paren; -- to generate message\n-            Fpart_List := P_Formal_Part;\n+         T_Left_Paren; -- to generate message\n+         Fpart_List := P_Formal_Part;\n \n       --  Otherwise scan out an optional formal part in the usual manner\n \n@@ -681,21 +684,21 @@ package body Ch6 is\n                   Sloc (Name_Node));\n             end if;\n \n+            Scan; -- past SEPARATE\n+\n             Stub_Node :=\n               New_Node (N_Subprogram_Body_Stub, Sloc (Specification_Node));\n             Set_Specification (Stub_Node, Specification_Node);\n \n-            --  The specification has been parsed as part of a subprogram\n-            --  declaration, and aspects have already been collected.\n-\n             if Is_Non_Empty_List (Aspects) then\n-               Set_Parent (Aspects, Stub_Node);\n-               Set_Aspect_Specifications (Stub_Node, Aspects);\n+               Error_Msg\n+                 (\"aspect specifications must come after SEPARATE\",\n+                  Sloc (First (Aspects)));\n             end if;\n \n-            Scan; -- past SEPARATE\n-            Pop_Scope_Stack;\n+            P_Aspect_Specifications (Stub_Node, Semicolon => False);\n             TF_Semicolon;\n+            Pop_Scope_Stack;\n             return Stub_Node;\n \n          --  Subprogram body or expression function case"}, {"sha": "0a658c963e177cfdeb9067b5ffc1dff0e3d87411", "filename": "gcc/ada/par-ch7.adb", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fpar-ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fpar-ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch7.adb?ref=cdcf1c7ae29ef372a214904575aad282171285ff", "patch": "@@ -38,28 +38,33 @@ package body Ch7 is\n    --  renaming declaration or generic instantiation starting with PACKAGE\n \n    --  PACKAGE_DECLARATION ::=\n-   --    PACKAGE_SPECIFICATION\n-   --      [ASPECT_SPECIFICATIONS];\n+   --    PACKAGE_SPECIFICATION;\n \n    --  PACKAGE_SPECIFICATION ::=\n-   --    package DEFINING_PROGRAM_UNIT_NAME is\n+   --    package DEFINING_PROGRAM_UNIT_NAME\n+   --      [ASPECT_SPECIFICATIONS]\n+   --    is\n    --      {BASIC_DECLARATIVE_ITEM}\n    --    [private\n    --      {BASIC_DECLARATIVE_ITEM}]\n    --    end [[PARENT_UNIT_NAME .] IDENTIFIER]\n \n    --  PACKAGE_BODY ::=\n-   --    package body DEFINING_PROGRAM_UNIT_NAME is\n+   --    package body DEFINING_PROGRAM_UNIT_NAME\n+   --      [ASPECT_SPECIFICATIONS]\n+   --    is\n    --      DECLARATIVE_PART\n    --    [begin\n    --      HANDLED_SEQUENCE_OF_STATEMENTS]\n    --    end [[PARENT_UNIT_NAME .] IDENTIFIER]\n \n    --  PACKAGE_RENAMING_DECLARATION ::=\n-   --    package DEFINING_IDENTIFIER renames package_NAME;\n+   --    package DEFINING_IDENTIFIER renames package_NAME\n+   --      [ASPECT_SPECIFICATIONS];\n \n    --  PACKAGE_BODY_STUB ::=\n-   --    package body DEFINING_IDENTIFIER is separate;\n+   --    package body DEFINING_IDENTIFIER is separate\n+   --      [ASPECT_SPECIFICATIONS];\n \n    --  PACKAGE_INSTANTIATION ::=\n    --    package DEFINING_PROGRAM_UNIT_NAME is\n@@ -141,6 +146,12 @@ package body Ch7 is\n          Scope.Table (Scope.Last).Sloc := Token_Ptr;\n          Name_Node := P_Defining_Program_Unit_Name;\n          Scope.Table (Scope.Last).Labl := Name_Node;\n+\n+         if Aspect_Specifications_Present then\n+            Aspect_Sloc := Token_Ptr;\n+            P_Aspect_Specifications (Dummy_Node, Semicolon => False);\n+         end if;\n+\n          TF_Is;\n \n          if Separate_Present then\n@@ -149,16 +160,30 @@ package body Ch7 is\n             end if;\n \n             Scan; -- past SEPARATE\n-            TF_Semicolon;\n-            Pop_Scope_Stack;\n \n             Package_Node := New_Node (N_Package_Body_Stub, Package_Sloc);\n             Set_Defining_Identifier (Package_Node, Name_Node);\n \n+            if Has_Aspects (Dummy_Node) then\n+               Error_Msg\n+                 (\"aspect specifications must come after SEPARATE\",\n+                  Aspect_Sloc);\n+            end if;\n+\n+            P_Aspect_Specifications (Package_Node, Semicolon => False);\n+            TF_Semicolon;\n+            Pop_Scope_Stack;\n+\n          else\n             Package_Node := New_Node (N_Package_Body, Package_Sloc);\n             Set_Defining_Unit_Name (Package_Node, Name_Node);\n \n+            --  Move the aspect specifications to the body node\n+\n+            if Has_Aspects (Dummy_Node) then\n+               Move_Aspects (From => Dummy_Node, To => Package_Node);\n+            end if;\n+\n             --  In SPARK, a HIDE directive can be placed at the beginning of a\n             --  package implementation, thus hiding the package body from SPARK\n             --  tool-set. No violation of the SPARK restriction should be\n@@ -204,6 +229,7 @@ package body Ch7 is\n             Set_Name (Package_Node, P_Qualified_Simple_Name);\n \n             No_Constraint;\n+            P_Aspect_Specifications (Package_Node, Semicolon => False);\n             TF_Semicolon;\n             Pop_Scope_Stack;\n "}, {"sha": "e1692c4a11b7caab43dfb09d3cf9b30731188923", "filename": "gcc/ada/par-ch9.adb", "status": "modified", "additions": 62, "deletions": 10, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fpar-ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fpar-ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch9.adb?ref=cdcf1c7ae29ef372a214904575aad282171285ff", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -61,14 +61,15 @@ package body Ch9 is\n    --      [is [new INTERFACE_LIST with] TASK_DEFINITION];\n \n    --  TASK_BODY ::=\n-   --    task body DEFINING_IDENTIFIER is\n+   --    task body DEFINING_IDENTIFIER [ASPECT_SPECIFICATIONS] is\n    --      DECLARATIVE_PART\n    --    begin\n    --      HANDLED_SEQUENCE_OF_STATEMENTS\n    --    end [task_IDENTIFIER]\n \n    --  TASK_BODY_STUB ::=\n-   --    task body DEFINING_IDENTIFIER is separate;\n+   --    task body DEFINING_IDENTIFIER is separate\n+   --      [ASPECT_SPECIFICATIONS];\n \n    --  This routine scans out a task declaration, task body, or task stub\n \n@@ -78,9 +79,15 @@ package body Ch9 is\n    --  Error recovery: cannot raise Error_Resync\n \n    function P_Task return Node_Id is\n-      Name_Node  : Node_Id;\n-      Task_Node  : Node_Id;\n-      Task_Sloc  : Source_Ptr;\n+      Aspect_Sloc : Source_Ptr;\n+      Name_Node   : Node_Id;\n+      Task_Node   : Node_Id;\n+      Task_Sloc   : Source_Ptr;\n+\n+      Dummy_Node : constant Node_Id := New_Node (N_Task_Body, Token_Ptr);\n+      --  Placeholder node used to hold legal or prematurely declared aspect\n+      --  specifications. Depending on the context, the aspect specifications\n+      --  may be moved to a new node.\n \n    begin\n       Push_Scope_Stack;\n@@ -100,6 +107,11 @@ package body Ch9 is\n             Discard_Junk_List (P_Known_Discriminant_Part_Opt);\n          end if;\n \n+         if Aspect_Specifications_Present then\n+            Aspect_Sloc := Token_Ptr;\n+            P_Aspect_Specifications (Dummy_Node, Semicolon => False);\n+         end if;\n+\n          TF_Is;\n \n          --  Task stub\n@@ -108,6 +120,14 @@ package body Ch9 is\n             Scan; -- past SEPARATE\n             Task_Node := New_Node (N_Task_Body_Stub, Task_Sloc);\n             Set_Defining_Identifier (Task_Node, Name_Node);\n+\n+            if Has_Aspects (Dummy_Node) then\n+               Error_Msg\n+                 (\"aspect specifications must come after SEPARATE\",\n+                  Aspect_Sloc);\n+            end if;\n+\n+            P_Aspect_Specifications (Task_Node, Semicolon => False);\n             TF_Semicolon;\n             Pop_Scope_Stack; -- remove unused entry\n \n@@ -116,6 +136,13 @@ package body Ch9 is\n          else\n             Task_Node := New_Node (N_Task_Body, Task_Sloc);\n             Set_Defining_Identifier (Task_Node, Name_Node);\n+\n+            --  Move the aspect specifications to the body node\n+\n+            if Has_Aspects (Dummy_Node) then\n+               Move_Aspects (From => Dummy_Node, To => Task_Node);\n+            end if;\n+\n             Parse_Decls_Begin_End (Task_Node);\n          end if;\n \n@@ -367,12 +394,15 @@ package body Ch9 is\n    --    is [new INTERFACE_LIST with] PROTECTED_DEFINITION;\n \n    --  PROTECTED_BODY ::=\n-   --    protected body DEFINING_IDENTIFIER is\n+   --    protected body DEFINING_IDENTIFIER\n+   --      [ASPECT_SPECIFICATIONS]\n+   --    is\n    --      {PROTECTED_OPERATION_ITEM}\n    --    end [protected_IDENTIFIER];\n \n    --  PROTECTED_BODY_STUB ::=\n-   --    protected body DEFINING_IDENTIFIER is separate;\n+   --    protected body DEFINING_IDENTIFIER is separate\n+   --      [ASPECT_SPECIFICATIONS];\n \n    --  This routine scans out a protected declaration, protected body\n    --  or a protected stub.\n@@ -383,11 +413,17 @@ package body Ch9 is\n    --  Error recovery: cannot raise Error_Resync\n \n    function P_Protected return Node_Id is\n+      Aspect_Sloc    : Source_Ptr;\n       Name_Node      : Node_Id;\n       Protected_Node : Node_Id;\n       Protected_Sloc : Source_Ptr;\n       Scan_State     : Saved_Scan_State;\n \n+      Dummy_Node : constant Node_Id := New_Node (N_Protected_Body, Token_Ptr);\n+      --  Placeholder node used to hold legal or prematurely declared aspect\n+      --  specifications. Depending on the context, the aspect specifications\n+      --  may be moved to a new node.\n+\n    begin\n       Push_Scope_Stack;\n       Scope.Table (Scope.Last).Etyp := E_Name;\n@@ -405,14 +441,28 @@ package body Ch9 is\n             Discard_Junk_List (P_Known_Discriminant_Part_Opt);\n          end if;\n \n+         if Aspect_Specifications_Present then\n+            Aspect_Sloc := Token_Ptr;\n+            P_Aspect_Specifications (Dummy_Node, Semicolon => False);\n+         end if;\n+\n          TF_Is;\n \n          --  Protected stub\n \n          if Token = Tok_Separate then\n             Scan; -- past SEPARATE\n+\n             Protected_Node := New_Node (N_Protected_Body_Stub, Protected_Sloc);\n             Set_Defining_Identifier (Protected_Node, Name_Node);\n+\n+            if Has_Aspects (Dummy_Node) then\n+               Error_Msg\n+                 (\"aspect specifications must come after SEPARATE\",\n+                  Aspect_Sloc);\n+            end if;\n+\n+            P_Aspect_Specifications (Protected_Node, Semicolon => False);\n             TF_Semicolon;\n             Pop_Scope_Stack; -- remove unused entry\n \n@@ -421,6 +471,8 @@ package body Ch9 is\n          else\n             Protected_Node := New_Node (N_Protected_Body, Protected_Sloc);\n             Set_Defining_Identifier (Protected_Node, Name_Node);\n+\n+            Move_Aspects (From => Dummy_Node, To => Protected_Node);\n             Set_Declarations (Protected_Node, P_Protected_Operation_Items);\n             End_Statements (Protected_Node);\n          end if;\n@@ -800,8 +852,8 @@ package body Ch9 is\n \n    --  ENTRY_DECLARATION ::=\n    --    [OVERRIDING_INDICATOR]\n-   --    entry DEFINING_IDENTIFIER [(DISCRETE_SUBTYPE_DEFINITION)]\n-   --      PARAMETER_PROFILE;\n+   --    entry DEFINING_IDENTIFIER\n+   --      [(DISCRETE_SUBTYPE_DEFINITION)] PARAMETER_PROFILE\n    --        [ASPECT_SPECIFICATIONS];\n \n    --  The caller has checked that the initial token is ENTRY, NOT or"}, {"sha": "6c36bf2cdb75096fa151654532192f0f15d61039", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=cdcf1c7ae29ef372a214904575aad282171285ff", "patch": "@@ -23,6 +23,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Aspects;  use Aspects;\n with Atree;    use Atree;\n with Debug;    use Debug;\n with Einfo;    use Einfo;\n@@ -1555,8 +1556,8 @@ package body Sem_Ch10 is\n    -------------------------------\n \n    procedure Analyze_Package_Body_Stub (N : Node_Id) is\n-      Id   : constant Entity_Id := Defining_Identifier (N);\n-      Nam  : Entity_Id;\n+      Id  : constant Entity_Id := Defining_Identifier (N);\n+      Nam : Entity_Id;\n \n    begin\n       --  The package declaration must be in the current declarative part\n@@ -1844,6 +1845,12 @@ package body Sem_Ch10 is\n                         SCO_Record (Unum);\n                      end if;\n \n+                     --  Propagate any aspect specifications associated with\n+                     --  with the stub to the proper body.\n+\n+                     Move_Or_Merge_Aspects\n+                       (From => N, To => Proper_Body (Unit (Comp_Unit)));\n+\n                      --  Analyze the unit if semantics active\n \n                      if not Fatal_Error (Unum) or else Try_Semantics then\n@@ -2327,8 +2334,8 @@ package body Sem_Ch10 is\n    ----------------------------\n \n    procedure Analyze_Task_Body_Stub (N : Node_Id) is\n-      Nam : Entity_Id := Current_Entity_In_Scope (Defining_Identifier (N));\n       Loc : constant Source_Ptr := Sloc (N);\n+      Nam : Entity_Id := Current_Entity_In_Scope (Defining_Identifier (N));\n \n    begin\n       Check_Stub_Level (N);"}, {"sha": "ac9e736a8c06237450251c63ac18c5d57a0f24fb", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=cdcf1c7ae29ef372a214904575aad282171285ff", "patch": "@@ -1781,7 +1781,6 @@ package body Sem_Ch13 is\n                --  Warnings\n \n                when Aspect_Warnings =>\n-\n                   Make_Aitem_Pragma\n                     (Pragma_Argument_Associations => New_List (\n                        Make_Pragma_Argument_Association (Sloc (Expr),\n@@ -2434,6 +2433,18 @@ package body Sem_Ch13 is\n                Set_Has_Delayed_Aspects (E);\n                Record_Rep_Item (E, Aspect);\n \n+            --  When delay is not required and the context is a package body,\n+            --  insert the pragma in the declarations of the body.\n+\n+            elsif Nkind (N) = N_Package_Body then\n+               if No (Declarations (N)) then\n+                  Set_Declarations (N, New_List);\n+               end if;\n+\n+               --  The pragma is added before source declarations\n+\n+               Prepend_To (Declarations (N), Aitem);\n+\n             --  When delay is not required and the context is not a compilation\n             --  unit, we simply insert the pragma/attribute definition clause\n             --  in sequence."}, {"sha": "44ce304363be946a2d2e1ff65aa553afa93ac9a2", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=cdcf1c7ae29ef372a214904575aad282171285ff", "patch": "@@ -2680,7 +2680,14 @@ package body Sem_Ch6 is\n       --  a corresponding spec, but for which there may also be a spec_id.\n \n       if Has_Aspects (N) then\n-         if Present (Spec_Id) then\n+\n+         --  Aspects that apply to a body stub are relocated to the proper\n+         --  body. Do not emit an error in this case.\n+\n+         if Present (Spec_Id)\n+           and then Nkind (N) not in N_Body_Stub\n+           and then Nkind (Parent (N)) /= N_Subunit\n+         then\n             Error_Msg_N\n               (\"aspect specifications must appear in subprogram declaration\",\n                 N);"}, {"sha": "e06b6b997cf0453eddc2803eacad095e4c627b31", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=cdcf1c7ae29ef372a214904575aad282171285ff", "patch": "@@ -219,11 +219,15 @@ package body Sem_Ch7 is\n       --  the later is never used for name resolution. In this fashion there\n       --  is only one visible entity that denotes the package.\n \n-      --  Set Body_Id. Note that this Will be reset to point to the generic\n+      --  Set Body_Id. Note that this will be reset to point to the generic\n       --  copy later on in the generic case.\n \n       Body_Id := Defining_Entity (N);\n \n+      if Has_Aspects (N) then\n+         Analyze_Aspect_Specifications (N, Body_Id);\n+      end if;\n+\n       if Present (Corresponding_Spec (N)) then\n \n          --  Body is body of package instantiation. Corresponding spec has\n@@ -766,7 +770,7 @@ package body Sem_Ch7 is\n       --  True when this package declaration is not a nested declaration\n \n    begin\n-      --  Analye aspect specifications immediately, since we need to recognize\n+      --  Analyze aspect specifications immediately, since we need to recognize\n       --  things like Pure early enough to diagnose violations during analysis.\n \n       if Has_Aspects (N) then"}, {"sha": "52dcb90d18447b811a3c26ec86dd7643461527b8", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=cdcf1c7ae29ef372a214904575aad282171285ff", "patch": "@@ -1734,6 +1734,22 @@ package body Sem_Ch9 is\n       Set_Ekind (Body_Id, E_Protected_Body);\n       Spec_Id := Find_Concurrent_Spec (Body_Id);\n \n+      --  Protected bodies are currently removed by the expander. Since there\n+      --  are no language-defined aspects that apply to a protected body, it is\n+      --  not worth changing the whole expansion to accomodate user-defined\n+      --  aspects. Plus we cannot possibly known the semantics of user-defined\n+      --  aspects in order to plan ahead.\n+\n+      if Has_Aspects (N) then\n+         Error_Msg_N\n+           (\"?user-defined aspects on protected bodies are not supported\", N);\n+\n+         --  The aspects are removed for now to prevent cascading errors down\n+         --  stream.\n+\n+         Remove_Aspects (N);\n+      end if;\n+\n       if Present (Spec_Id)\n         and then Ekind (Spec_Id) = E_Protected_Type\n       then\n@@ -2606,6 +2622,10 @@ package body Sem_Ch9 is\n       --  disastrous result.\n \n       Analyze_Protected_Type_Declaration (N);\n+\n+      if Has_Aspects (N) then\n+         Analyze_Aspect_Specifications (N, Id);\n+      end if;\n    end Analyze_Single_Protected_Declaration;\n \n    -------------------------------------\n@@ -2703,6 +2723,22 @@ package body Sem_Ch9 is\n       Set_Scope (Body_Id, Current_Scope);\n       Spec_Id := Find_Concurrent_Spec (Body_Id);\n \n+      --  Task bodies are transformed into a subprogram spec and body pair by\n+      --  the expander. Since there are no language-defined aspects that apply\n+      --  to a task body, it is not worth changing the whole expansion to\n+      --  accomodate user-defined aspects. Plus we cannot possibly known the\n+      --  semantics of user-defined aspects in order to plan ahead.\n+\n+      if Has_Aspects (N) then\n+         Error_Msg_N\n+           (\"?user-defined aspects on task bodies are not supported\", N);\n+\n+         --  The aspects are removed for now to prevent cascading errors down\n+         --  stream.\n+\n+         Remove_Aspects (N);\n+      end if;\n+\n       --  The spec is either a task type declaration, or a single task\n       --  declaration for which we have created an anonymous type.\n "}, {"sha": "901ce4f8292b526be87dca0223cc6aa292bf7290", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 49, "deletions": 10, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=cdcf1c7ae29ef372a214904575aad282171285ff", "patch": "@@ -16633,11 +16633,52 @@ package body Sem_Prag is\n                   Stmt := Prev (Stmt);\n                end loop;\n \n-               --  If we get here, then we ran out of preceding statements. The\n-               --  pragma is immediately within a body.\n+               --  Handle all cases where the pragma is actually an aspect and\n+               --  applies to a library-level package spec, body or subprogram.\n \n-               if Nkind_In (Context, N_Package_Body,\n-                                     N_Subprogram_Body)\n+               --    function F ... with SPARK_Mode => ...;\n+               --    package P with SPARK_Mode => ...;\n+               --    package body P with SPARK_Mode => ... is\n+\n+               --  The following circuitry simply prepares the proper context\n+               --  for the general pragma processing mechanism below.\n+\n+               if Nkind (Context) = N_Compilation_Unit_Aux then\n+                  Context := Unit (Parent (Context));\n+\n+                  if Nkind_In (Context, N_Package_Declaration,\n+                                        N_Subprogram_Declaration)\n+                  then\n+                     Context := Specification (Context);\n+                  end if;\n+               end if;\n+\n+               --  The pragma is at the top level of a package spec or appears\n+               --  as an aspect on a subprogram.\n+\n+               --    function F ... with SPARK_Mode => ...;\n+\n+               --    package P is\n+               --       pragma SPARK_Mode;\n+\n+               if Nkind_In (Context, N_Function_Specification,\n+                                     N_Package_Specification,\n+                                     N_Procedure_Specification)\n+               then\n+                  Spec_Id := Defining_Unit_Name (Context);\n+                  Chain_Pragma (Spec_Id, N);\n+\n+               --  The pragma is immediately within a package or subprogram\n+               --  body.\n+\n+               --    function F ... is\n+               --       pragma SPARK_Mode;\n+\n+               --    package body P is\n+               --       pragma SPARK_Mode;\n+\n+               elsif Nkind_In (Context, N_Package_Body,\n+                                        N_Subprogram_Body)\n                then\n                   Spec_Id := Corresponding_Spec (Context);\n \n@@ -16650,14 +16691,12 @@ package body Sem_Prag is\n                   Chain_Pragma (Body_Id, N);\n                   Check_Conformance (Spec_Id, Body_Id);\n \n-               --  The pragma is at the top level of a package spec\n-\n-               elsif Nkind (Context) = N_Package_Specification then\n-                  Spec_Id := Defining_Unit_Name (Context);\n-                  Chain_Pragma (Spec_Id, N);\n-\n                --  The pragma applies to the statements of a package body\n \n+               --    package body P is\n+               --    begin\n+               --       pragma SPARK_Mode;\n+\n                elsif Nkind (Context) = N_Handled_Sequence_Of_Statements\n                  and then Nkind (Parent (Context)) = N_Package_Body\n                then"}, {"sha": "5af10be736e7d129e1204e0d796c027b70cdf2a4", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=cdcf1c7ae29ef372a214904575aad282171285ff", "patch": "@@ -4775,7 +4775,8 @@ package Sinfo is\n       --  and put in its proper section when we know exactly where that is!\n \n       --  EXPRESSION_FUNCTION ::=\n-      --    FUNCTION SPECIFICATION IS (EXPRESSION);\n+      --    FUNCTION SPECIFICATION IS (EXPRESSION)\n+      --      [ASPECT_SPECIFICATIONS];\n \n       --  N_Expression_Function\n       --  Sloc points to FUNCTION\n@@ -5010,7 +5011,8 @@ package Sinfo is\n \n       --  PRIVATE_TYPE_DECLARATION ::=\n       --    type DEFINING_IDENTIFIER [DISCRIMINANT_PART]\n-      --      is [[abstract] tagged] [limited] private;\n+      --      is [[abstract] tagged] [limited] private\n+      --        [ASPECT_SPECIFICATIONS];\n \n       --  Note: TAGGED is not permitted in Ada 83 mode\n \n@@ -5032,7 +5034,7 @@ package Sinfo is\n       --    type DEFINING_IDENTIFIER [DISCRIMINANT_PART] is\n       --      [abstract] [limited | synchronized]\n       --        new ancestor_SUBTYPE_INDICATION [and INTERFACE_LIST]\n-      --           with private;\n+      --           with private [ASPECT_SPECIFICATIONS];\n \n       --  Note: LIMITED, and private extension declarations are not allowed\n       --        in Ada 83 mode.\n@@ -5102,9 +5104,11 @@ package Sinfo is\n \n       --  OBJECT_RENAMING_DECLARATION ::=\n       --    DEFINING_IDENTIFIER :\n-      --      [NULL_EXCLUSION] SUBTYPE_MARK renames object_NAME;\n+      --      [NULL_EXCLUSION] SUBTYPE_MARK renames object_NAME\n+      --        [ASPECT_SPECIFICATIONS];\n       --  | DEFINING_IDENTIFIER :\n-      --      ACCESS_DEFINITION renames object_NAME;\n+      --      ACCESS_DEFINITION renames object_NAME\n+      --        [ASPECT_SPECIFICATIONS];\n \n       --  Note: Access_Definition is an optional field that gives support to\n       --  Ada 2005 (AI-230). The parser generates nodes that have either the\n@@ -5124,7 +5128,8 @@ package Sinfo is\n       -----------------------------------------\n \n       --  EXCEPTION_RENAMING_DECLARATION ::=\n-      --    DEFINING_IDENTIFIER : exception renames exception_NAME;\n+      --    DEFINING_IDENTIFIER : exception renames exception_NAME\n+      --      [ASPECT_SPECIFICATIONS];\n \n       --  N_Exception_Renaming_Declaration\n       --  Sloc points to first identifier\n@@ -5136,7 +5141,8 @@ package Sinfo is\n       ---------------------------------------\n \n       --  PACKAGE_RENAMING_DECLARATION ::=\n-      --    package DEFINING_PROGRAM_UNIT_NAME renames package_NAME;\n+      --    package DEFINING_PROGRAM_UNIT_NAME renames package_NAME\n+      --      [ASPECT_SPECIFICATIONS];\n \n       --  N_Package_Renaming_Declaration\n       --  Sloc points to PACKAGE\n@@ -5149,7 +5155,8 @@ package Sinfo is\n       ------------------------------------------\n \n       --  SUBPROGRAM_RENAMING_DECLARATION ::=\n-      --    SUBPROGRAM_SPECIFICATION renames callable_entity_NAME;\n+      --    SUBPROGRAM_SPECIFICATION renames callable_entity_NAME\n+      --      [ASPECT_SPECIFICATIONS];\n \n       --  N_Subprogram_Renaming_Declaration\n       --  Sloc points to RENAMES\n@@ -5167,10 +5174,13 @@ package Sinfo is\n       --  GENERIC_RENAMING_DECLARATION ::=\n       --    generic package DEFINING_PROGRAM_UNIT_NAME\n       --      renames generic_package_NAME\n+      --        [ASPECT_SPECIFICATIONS];\n       --  | generic procedure DEFINING_PROGRAM_UNIT_NAME\n       --      renames generic_procedure_NAME\n+      --        [ASPECT_SPECIFICATIONS];\n       --  | generic function DEFINING_PROGRAM_UNIT_NAME\n       --      renames generic_function_NAME\n+      --        [ASPECT_SPECIFICATIONS];\n \n       --  N_Generic_Package_Renaming_Declaration\n       --  Sloc points to GENERIC\n@@ -5384,7 +5394,8 @@ package Sinfo is\n       --  ENTRY_DECLARATION ::=\n       --    [[not] overriding]\n       --    entry DEFINING_IDENTIFIER\n-      --      [(DISCRETE_SUBTYPE_DEFINITION)] PARAMETER_PROFILE;\n+      --      [(DISCRETE_SUBTYPE_DEFINITION)] PARAMETER_PROFILE\n+      --        [ASPECT_SPECIFICATIONS];\n \n       --  N_Entry_Declaration\n       --  Sloc points to ENTRY\n@@ -5985,7 +5996,8 @@ package Sinfo is\n       ----------------------------------\n \n       --  SUBPROGRAM_BODY_STUB ::=\n-      --    SUBPROGRAM_SPECIFICATION is separate;\n+      --    SUBPROGRAM_SPECIFICATION is separate\n+      --      [ASPECT_SPECIFICATION];\n \n       --  N_Subprogram_Body_Stub\n       --  Sloc points to FUNCTION or PROCEDURE\n@@ -5998,7 +6010,8 @@ package Sinfo is\n       -------------------------------\n \n       --  PACKAGE_BODY_STUB ::=\n-      --    package body DEFINING_IDENTIFIER is separate;\n+      --    package body DEFINING_IDENTIFIER is separate\n+      --      [ASPECT_SPECIFICATION];\n \n       --  N_Package_Body_Stub\n       --  Sloc points to PACKAGE\n@@ -6011,7 +6024,8 @@ package Sinfo is\n       ----------------------------\n \n       --  TASK_BODY_STUB ::=\n-      --    task body DEFINING_IDENTIFIER is separate;\n+      --    task body DEFINING_IDENTIFIER is separate\n+      --      [ASPECT_SPECIFICATION];\n \n       --  N_Task_Body_Stub\n       --  Sloc points to TASK\n@@ -6024,7 +6038,8 @@ package Sinfo is\n       ---------------------------------\n \n       --  PROTECTED_BODY_STUB ::=\n-      --    protected body DEFINING_IDENTIFIER is separate;\n+      --    protected body DEFINING_IDENTIFIER is separate\n+      --      [ASPECT_SPECIFICATION];\n \n       --  Note: protected body stubs are not allowed in Ada 83 mode\n \n@@ -6225,7 +6240,8 @@ package Sinfo is\n       ------------------------------------------\n \n       --  GENERIC_SUBPROGRAM_DECLARATION ::=\n-      --    GENERIC_FORMAL_PART SUBPROGRAM_SPECIFICATION;\n+      --    GENERIC_FORMAL_PART SUBPROGRAM_SPECIFICATION\n+      --      [ASPECT_SPECIFICATIONS];\n \n       --  Note: Generic_Formal_Declarations can include pragmas\n "}, {"sha": "cd647da818cb33bc230707dc25b59dcc43d5751d", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcf1c7ae29ef372a214904575aad282171285ff/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=cdcf1c7ae29ef372a214904575aad282171285ff", "patch": "@@ -310,6 +310,13 @@ package body Switch.C is\n                     (\"-gnatc must be first if combined with other switches\");\n                end if;\n \n+               --  Not allowed if previous -gnatR given\n+\n+               if List_Representation_Info /= 0 then\n+                  Osint.Fail\n+                    (\"-gnatc not allowed since -gnatR given previously\");\n+               end if;\n+\n                Ptr := Ptr + 1;\n                Operating_Mode := Check_Semantics;\n \n@@ -1013,6 +1020,14 @@ package body Switch.C is\n                     (\"-gnatR not permitted since -gnatD given previously\");\n                end if;\n \n+               --  Not allowed if previous -gnatc was given, since we must\n+               --  call the code generator to determine rep information.\n+\n+               if Operating_Mode = Check_Semantics then\n+                  Osint.Fail\n+                    (\"-gnatR not permitted since -gnatc given previously\");\n+               end if;\n+\n                --  Set to annotate rep info, and set default -gnatR mode\n \n                Back_Annotate_Rep_Info := True;"}]}