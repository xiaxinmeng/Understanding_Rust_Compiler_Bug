{"sha": "2a013f05202113a3ed42f06db21b6197ba61cd5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEwMTNmMDUyMDIxMTNhM2VkNDJmMDZkYjIxYjYxOTdiYTYxY2Q1Zg==", "commit": {"author": {"name": "Michael J. Eager", "email": "eager@eagercon.com", "date": "2008-09-24T15:20:45Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2008-09-24T15:20:45Z"}, "message": "predicates.md (easy_fp_constant): Single FP consts are easy.\n\n2008-09-24  Michael J. Eager  <eager@eagercon.com>\n\n        * config/rs6000/predicates.md (easy_fp_constant): Single FP consts\n        are easy.\n        * config/rs6000/rs6000.c (rs6000_override_options): Move\n        rs6000_init_hard_regno_mode_ok after all options changed.\n        Set rs6000_single_float, rs6000_double_float if TARGET_HARD_FLOAT.\n        (rs6000_handle_option): Process -msingle-float, -mdouble-float,\n        -msimple-fpu flags.  Add warning messages if single FP not configured.\n        (rs6000_file_start): Output gnu_attribute for single-float.\n        (legitimate_lo_sum_address_p): Condition on TARGET_DOUBLE_FLOAT.\n        (rs6000_legitimize_address): Likewise.\n        (rs6000_legitimize_reload_address): Likewise.\n        (rs6000_emit_move): Condition on TARGET_DOUBLE_FLOAT,\n        TARGET_SINGLE_FLOAT.\n        (function_arg_advance): Likewise.\n        (function_arg): Likewise.\n        (setup_incoming_varargs): Condition on TARGET_DOUBLE_FLOAT.\n        (rs6000_gimplify_va_arg): Condition on TARGET_DOUBLE_FLOAT,\n        TARGET_SINGLE_FLOAT.\n        (rs6000_split_multireg_move): Condition on TARGET_DOUBLE_FLOAT.\n        (rs6000_emit_prologue): Likewise.\n        (rs6000_function_value): Condition on TARGET_DOUBLE_FLOAT,\n        TARGET_SINGLE_FLOAT.\n        (rs6000_libcall_value): Likewise.\n        * config/rs6000/rs6000.h (TARGET_SINGLE_FLOAT): New default to 1.\n        (TARGET_DOUBLE_FLOAT): New default to 1\n        (TARGET_SIMPLE_FPU): New default to 0\n        (TARGET_SINGLE_FPU): New default to 0\n        (TARGET_SINGLE_FLOAT_MODE): New.\n        (TARGET_DOUBLE_FLOAT_MODE): New.\n        * config/rs6000/singlefp.h: New; redefine TARGET_SINGLE_FLOAT,\n        TARGET_DOUBLE_FLOAT, TARGET_SIMPLE_FPU, TARGET_SINGLE_FPU,\n        UNITS_PER_FP_WORD\n        * config/rs6000/rs6000.md (define_mode_iterator): Condition on\n        TARGET_DOUBLE_FLOAT, TARGET_SINGLE_FLOAT.\n        (extendsfdf2, extendsfdf2_fpr, truncdfsf2, truncdfsf2_fpr,\n        copysigndf3,fseldfsf4, negdf2, negdf2_fpr, absdf2, absdf2_fpr,\n        nabsdf2_fpr, adddf3, adddf3_fpr, subdf3, subdf3_fpr, muldf3,\n        muldf3_fpr, divdf3, divdf3_fpr, sqrtdf2, smaxdf3, smindf3,\n        movdfcc, *fseldfdf4, floatsidf2, *floatsidf2_internal,\n        floatunssidf2, *floatunssidf2_internal, fix_truncdfsi2,\n        *fix_truncdfsi2_internal, fix_truncdfsi2_internal_gfxopt,\n        fix_truncdfsi2_mfpgpr, fctiwz, btruncdf2, ceildf2, floordf2,\n        rounddf2, floatdidf2, floatsidf_ppc64_mfpgpr, floatsidf_ppc64,\n        floatunssidf_ppc64, fix_truncdfdi2, movdf_hardfloat32,\n        movdf_hardfloat64_mfpgpr, movdf_hardfloat64, extenddftf2_fprs,\n        extenddftf2_internal, trunctfdf2_internal2, fix_trunc_helper,\n        abstf2_internal, movdf_update1, movdf_update2, cmpdf_internal1,\n        cmptf_internal1, *cmptf_internal2): Condition on\n        TARGET_DOUBLE_FLOAT.\n        (aux_truncdfsf2, negsf2, *negsf2, abssf2, *abssf2, addsf3, subsf3,\n        mulsf3, divsf3, sqrtsf2, copysignsf3, smaxsf3, sminsf3, movsfcc,\n        *fselsfsf4, fixuns_truncsfsi2, fix_truncsfsi2, floatunssisf2,\n        btruncsf2, ceilsf2, floorsf2, roundsf2, floatdisf2_internal1,\n        floatdisf2_internal2, *movsf_hardfloat, trunctfsf2_fprs,\n        *movsf_update1, *movsf_update2, *cmpsf_internal1): Condition on\n        TARGET_SINGLE_FLOAT.\n        (divsf3, sqrtsf2, divdf3, divdf3_fpr): Condition on TARGET_SIMPLE_FPU.\n        * config/rs6000/rs6000.opt (-msingle-float): New.\n        (-mdouble-float): New.\n        (-msimple-fpu): New.\n        * doc/invoke.texi (RS/6000 and PowerPC Options): Add\n        -msingle-float, -mdouble-float, -msimple-fpu options.\n        * config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Set\n        _SOFT_DOUBLE for -msingle-float.\n        * config.gcc: New config for target=powerpc-xilinx-eabi.\n\nFrom-SVN: r140632", "tree": {"sha": "c5b5ff70d5b5a1084900f1a4b78ca165721153e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5b5ff70d5b5a1084900f1a4b78ca165721153e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a013f05202113a3ed42f06db21b6197ba61cd5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a013f05202113a3ed42f06db21b6197ba61cd5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a013f05202113a3ed42f06db21b6197ba61cd5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a013f05202113a3ed42f06db21b6197ba61cd5f/comments", "author": {"login": "eagerm", "id": 945532, "node_id": "MDQ6VXNlcjk0NTUzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/945532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eagerm", "html_url": "https://github.com/eagerm", "followers_url": "https://api.github.com/users/eagerm/followers", "following_url": "https://api.github.com/users/eagerm/following{/other_user}", "gists_url": "https://api.github.com/users/eagerm/gists{/gist_id}", "starred_url": "https://api.github.com/users/eagerm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eagerm/subscriptions", "organizations_url": "https://api.github.com/users/eagerm/orgs", "repos_url": "https://api.github.com/users/eagerm/repos", "events_url": "https://api.github.com/users/eagerm/events{/privacy}", "received_events_url": "https://api.github.com/users/eagerm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5fb41e29c618d963914e53c0b364c7717b47ac40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fb41e29c618d963914e53c0b364c7717b47ac40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fb41e29c618d963914e53c0b364c7717b47ac40"}], "stats": {"total": 600, "additions": 432, "deletions": 168}, "files": [{"sha": "95a932ef902232367631b9d37f40b185084f932e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 74, "deletions": 6, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a013f05202113a3ed42f06db21b6197ba61cd5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a013f05202113a3ed42f06db21b6197ba61cd5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a013f05202113a3ed42f06db21b6197ba61cd5f", "patch": "@@ -1,3 +1,71 @@\n+2008-09-24  Michael J. Eager  <eager@eagercon.com>\n+\n+\t* config/rs6000/predicates.md (easy_fp_constant): Single FP consts\n+\tare easy.\n+\t* config/rs6000/rs6000.c (rs6000_override_options): Move\n+\trs6000_init_hard_regno_mode_ok after all options changed.\n+\tSet rs6000_single_float, rs6000_double_float if TARGET_HARD_FLOAT.\n+\t(rs6000_handle_option): Process -msingle-float, -mdouble-float,\n+\t-msimple-fpu flags.  Add warning messages if single FP not configured.\n+\t(rs6000_file_start): Output gnu_attribute for single-float.\n+\t(legitimate_lo_sum_address_p): Condition on TARGET_DOUBLE_FLOAT.\n+\t(rs6000_legitimize_address): Likewise.\n+\t(rs6000_legitimize_reload_address): Likewise.\n+\t(rs6000_emit_move): Condition on TARGET_DOUBLE_FLOAT,\n+\tTARGET_SINGLE_FLOAT.\n+\t(function_arg_advance): Likewise.\n+\t(function_arg): Likewise.\n+\t(setup_incoming_varargs): Condition on TARGET_DOUBLE_FLOAT.\n+\t(rs6000_gimplify_va_arg): Condition on TARGET_DOUBLE_FLOAT,\n+\tTARGET_SINGLE_FLOAT.\n+\t(rs6000_split_multireg_move): Condition on TARGET_DOUBLE_FLOAT.\n+\t(rs6000_emit_prologue): Likewise.\n+\t(rs6000_function_value): Condition on TARGET_DOUBLE_FLOAT,\n+\tTARGET_SINGLE_FLOAT.\n+\t(rs6000_libcall_value): Likewise.\n+\t* config/rs6000/rs6000.h (TARGET_SINGLE_FLOAT): New default to 1.\n+\t(TARGET_DOUBLE_FLOAT): New default to 1\n+\t(TARGET_SIMPLE_FPU): New default to 0\n+\t(TARGET_SINGLE_FPU): New default to 0\n+\t(TARGET_SINGLE_FLOAT_MODE): New.\n+\t(TARGET_DOUBLE_FLOAT_MODE): New.\n+\t* config/rs6000/singlefp.h: New; redefine TARGET_SINGLE_FLOAT,\n+\tTARGET_DOUBLE_FLOAT, TARGET_SIMPLE_FPU, TARGET_SINGLE_FPU,\n+\tUNITS_PER_FP_WORD\n+\t* config/rs6000/rs6000.md (define_mode_iterator): Condition on\n+\tTARGET_DOUBLE_FLOAT, TARGET_SINGLE_FLOAT.\n+\t(extendsfdf2, extendsfdf2_fpr, truncdfsf2, truncdfsf2_fpr,\n+\tcopysigndf3,fseldfsf4, negdf2, negdf2_fpr, absdf2, absdf2_fpr,\n+\tnabsdf2_fpr, adddf3, adddf3_fpr, subdf3, subdf3_fpr, muldf3,\n+\tmuldf3_fpr, divdf3, divdf3_fpr, sqrtdf2, smaxdf3, smindf3,\n+\tmovdfcc, *fseldfdf4, floatsidf2, *floatsidf2_internal,\n+\tfloatunssidf2, *floatunssidf2_internal, fix_truncdfsi2,\n+\t*fix_truncdfsi2_internal, fix_truncdfsi2_internal_gfxopt,\n+\tfix_truncdfsi2_mfpgpr, fctiwz, btruncdf2, ceildf2, floordf2,\n+\trounddf2, floatdidf2, floatsidf_ppc64_mfpgpr, floatsidf_ppc64,\n+\tfloatunssidf_ppc64, fix_truncdfdi2, movdf_hardfloat32,\n+\tmovdf_hardfloat64_mfpgpr, movdf_hardfloat64, extenddftf2_fprs,\n+\textenddftf2_internal, trunctfdf2_internal2, fix_trunc_helper,\n+\tabstf2_internal, movdf_update1, movdf_update2, cmpdf_internal1,\n+\tcmptf_internal1, *cmptf_internal2): Condition on\n+\tTARGET_DOUBLE_FLOAT.\n+\t(aux_truncdfsf2, negsf2, *negsf2, abssf2, *abssf2, addsf3, subsf3,\n+\tmulsf3, divsf3, sqrtsf2, copysignsf3, smaxsf3, sminsf3, movsfcc,\n+\t*fselsfsf4, fixuns_truncsfsi2, fix_truncsfsi2, floatunssisf2,\n+\tbtruncsf2, ceilsf2, floorsf2, roundsf2, floatdisf2_internal1,\n+\tfloatdisf2_internal2, *movsf_hardfloat, trunctfsf2_fprs,\n+\t*movsf_update1, *movsf_update2, *cmpsf_internal1): Condition on\n+\tTARGET_SINGLE_FLOAT.\n+\t(divsf3, sqrtsf2, divdf3, divdf3_fpr): Condition on TARGET_SIMPLE_FPU.\n+\t* config/rs6000/rs6000.opt (-msingle-float): New.\n+\t(-mdouble-float): New.\n+\t(-msimple-fpu): New.\n+\t* doc/invoke.texi (RS/6000 and PowerPC Options): Add\n+\t-msingle-float, -mdouble-float, -msimple-fpu options.\n+\t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Set\n+\t_SOFT_DOUBLE for -msingle-float.\n+\t* config.gcc: New config for target=powerpc-xilinx-eabi.\n+\n 2008-09-23  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/constraints.md: New file.\n@@ -7008,7 +7076,7 @@\n \tPR ada/36554\n \t* dwarf2out.c (is_subrange_type): Deal with BOOLEAN_TYPE.\n \n-2008-07-30  Rafael \u00c1vila de Esp\u00edndola  <espindola@google.com>\n+2008-07-30  Rafael \ufffdvila de Esp\u00edndola  <espindola@google.com>\n \n \tPR 36974\n \t* final.c (call_from_call_insn): Handle COND_EXEC.\n@@ -7220,7 +7288,7 @@\n \t* config/rs6000/rs6000.h (SLOW_UNALIGNED_ACCESS): Add clause for\n \tvector modes.\n \n-2008-07-30  Rafael \u00c1vila de Esp\u00edndola  <espindola@google.com>\n+2008-07-30  Rafael \ufffdvila de Esp\u00edndola  <espindola@google.com>\n \n \t* final.c (call_from_call_insn): New.\n \t(final_scan_insn): Call assemble_external on FUNCTION_DECLs.\n@@ -8338,7 +8406,7 @@\n \t(TARGET_OPTION_PRINT): Ditto.\n \t(TARGET_CAN_INLINE_P): Ditto.\n \n-2008-07-22  Rafael \u00c1vila de Esp\u00edndola  <espindola@google.com>\n+2008-07-22  Rafael \ufffdvila de Esp\u00edndola  <espindola@google.com>\n \n \t* c-typeck.c (build_external_ref): Don't call assemble_external.\n \t* final.c (output_operand): Call assemble_external.\n@@ -8359,7 +8427,7 @@\n \thighest magnitude if this is still less or equal to the true\n \tquotient in magnitude.\n \n-2008-07-21  Rafael \u00c1vila de Esp\u00edndola  <espindola@google.com>\n+2008-07-21  Rafael \ufffdvila de Esp\u00edndola  <espindola@google.com>\n \n \t* Makefile.in: Replace toplev.h with TOPLEV_H.\n \t* c-decl.c (merge_decls): Don't set DECL_IN_SYSTEM_HEADER.\n@@ -8662,7 +8730,7 @@\n \t(m32c_legitimate_address_p): Handle \"++rii\" addresses created by\n \tm32c_legitimize_reload_address.\n \n-2007-07-16  Rafael \u00c1vila de Esp\u00edndola  <espindola@google.com>\n+2007-07-16  Rafael \ufffdvila de Esp\u00edndola  <espindola@google.com>\n \n \t* c-decl.c (merge_decls): Keep DECL_SOURCE_LOCATION and\n \tDECL_IN_SYSTEM_HEADER in sync.\n@@ -8752,7 +8820,7 @@\n \n \t* emit-rtl.c (set_mem_attributes_minus_bitpos): Improve comment.\n \n-2007-07-14  Rafael \u00c1vila de Esp\u00edndola  <espindola@google.com>\n+2007-07-14  Rafael \ufffdvila de Esp\u00edndola  <espindola@google.com>\n \n \t* c-decl.c (diagnose_mismatched_decls): Don't warn if TREE_NO_WARNING\n \tis set."}, {"sha": "e3d170aad95e338733264c2cdf79027a11af381b", "filename": "gcc/config.gcc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a013f05202113a3ed42f06db21b6197ba61cd5f/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a013f05202113a3ed42f06db21b6197ba61cd5f/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=2a013f05202113a3ed42f06db21b6197ba61cd5f", "patch": "@@ -1791,6 +1791,11 @@ powerpc-*-eabialtivec*)\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcendian rs6000/t-ppccomm\"\n \t;;\n+powerpc-xilinx-eabi*)\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/eabi.h rs6000/singlefp.h\"\n+\textra_options=\"${extra_options} rs6000/sysv4.opt\"\n+\ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcgas rs6000/t-ppccomm\"\n+\t;;\n powerpc-*-eabi*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/eabi.h rs6000/e500.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\""}, {"sha": "90ab0810fc1901632cd0309943667fc098a21097", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a013f05202113a3ed42f06db21b6197ba61cd5f/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a013f05202113a3ed42f06db21b6197ba61cd5f/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=2a013f05202113a3ed42f06db21b6197ba61cd5f", "patch": "@@ -192,7 +192,8 @@\n     return 0;\n \n   /* Consider all constants with -msoft-float to be easy.  */\n-  if ((TARGET_SOFT_FLOAT || TARGET_E500_SINGLE)\n+  if ((TARGET_SOFT_FLOAT || TARGET_E500_SINGLE \n+      || (TARGET_HARD_FLOAT && (TARGET_SINGLE_FLOAT && ! TARGET_DOUBLE_FLOAT)))\n       && mode != DImode)\n     return 1;\n "}, {"sha": "10589bdc8e766f8eb5aeb4a5e50dcf67c5f2656c", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a013f05202113a3ed42f06db21b6197ba61cd5f/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a013f05202113a3ed42f06db21b6197ba61cd5f/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=2a013f05202113a3ed42f06db21b6197ba61cd5f", "patch": "@@ -297,7 +297,8 @@ rs6000_cpu_cpp_builtins (cpp_reader *pfile)\n     builtin_define (\"__PAIRED__\");\n   if (TARGET_SOFT_FLOAT)\n     builtin_define (\"_SOFT_FLOAT\");\n-  if (!(TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)))\n+  if ((!(TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)))\n+      ||(TARGET_HARD_FLOAT && TARGET_FPRS && !TARGET_DOUBLE_FLOAT))\n     builtin_define (\"_SOFT_DOUBLE\");\n   /* Used by lwarx/stwcx. errata work-around.  */\n   if (rs6000_cpu == PROCESSOR_PPC405)"}, {"sha": "8cb3e7d15715b29cedab96ff5b3e843b7357cf17", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 117, "deletions": 40, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a013f05202113a3ed42f06db21b6197ba61cd5f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a013f05202113a3ed42f06db21b6197ba61cd5f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=2a013f05202113a3ed42f06db21b6197ba61cd5f", "patch": "@@ -1556,8 +1556,6 @@ rs6000_override_options (const char *default_cpu)\n \t\t     | MASK_DLMZB | MASK_CMPB | MASK_MFPGPR | MASK_DFP)\n   };\n \n-  rs6000_init_hard_regno_mode_ok ();\n-\n   set_masks = POWER_MASKS | POWERPC_MASKS | MASK_SOFT_FLOAT;\n #ifdef OS_MISSING_POWERPC64\n   if (OS_MISSING_POWERPC64)\n@@ -1968,6 +1966,25 @@ rs6000_override_options (const char *default_cpu)\n      can be optimized to ap = __builtin_next_arg (0).  */\n   if (DEFAULT_ABI != ABI_V4)\n     targetm.expand_builtin_va_start = NULL;\n+\n+  /* Set up single/double float flags.  \n+     If TARGET_HARD_FLOAT is set, but neither single or double is set, \n+     then set both flags. */\n+  if (TARGET_HARD_FLOAT && TARGET_FPRS \n+      && rs6000_single_float == 0 && rs6000_double_float == 0)\n+    rs6000_single_float = rs6000_double_float = 1;\n+\n+  /* Reset single and double FP flags if target is E500. */\n+  if (TARGET_E500) \n+  {\n+    rs6000_single_float = rs6000_double_float = 0;\n+    if (TARGET_E500_SINGLE)\n+      rs6000_single_float = 1; \n+    if (TARGET_E500_DOUBLE)\n+      rs6000_single_float = rs6000_double_float = 1;\n+  }\n+\n+  rs6000_init_hard_regno_mode_ok ();\n }\n \n /* Implement targetm.vectorize.builtin_mask_for_load.  */\n@@ -2477,6 +2494,37 @@ rs6000_handle_option (size_t code, const char *arg, int value)\n \t  return false;\n \t}\n       break;\n+\n+    case OPT_msingle_float:\n+      if (!TARGET_SINGLE_FPU) \n+\twarning (0, \"-msingle-float option equivalent to -mhard-float\");\n+      /* -msingle-float implies -mno-double-float and TARGET_HARD_FLOAT. */\n+      rs6000_double_float = 0;\n+      target_flags &= ~MASK_SOFT_FLOAT;\n+      target_flags_explicit |= MASK_SOFT_FLOAT;\n+      break;\n+\n+    case OPT_mdouble_float:\n+      /* -mdouble-float implies -msingle-float and TARGET_HARD_FLOAT. */\n+      rs6000_single_float = 1;\n+      target_flags &= ~MASK_SOFT_FLOAT;\n+      target_flags_explicit |= MASK_SOFT_FLOAT;\n+      break;\n+\n+    case OPT_msimple_fpu:\n+      if (!TARGET_SINGLE_FPU) \n+\twarning (0, \"-msimple-fpu option ignored\");\n+      break;\n+\n+    case OPT_mhard_float:\n+      /* -mhard_float implies -msingle-float and -mdouble-float. */\n+      rs6000_single_float = rs6000_double_float = 1;\n+      break;\n+\n+    case OPT_msoft_float:\n+      /* -msoft_float implies -mnosingle-float and -mnodouble-float. */\n+      rs6000_single_float = rs6000_double_float = 0;\n+      break;\n     }\n   return true;\n }\n@@ -2546,7 +2594,9 @@ rs6000_file_start (void)\n   if (TARGET_32BIT && DEFAULT_ABI == ABI_V4)\n     {\n       fprintf (file, \"\\t.gnu_attribute 4, %d\\n\",\n-\t       (TARGET_HARD_FLOAT && TARGET_FPRS) ? 1 : 2);\n+\t       ((TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT) ? 1 \n+\t        : (TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT) ? 3 \n+\t        : 2));\n       fprintf (file, \"\\t.gnu_attribute 8, %d\\n\",\n \t       (TARGET_ALTIVEC_ABI ? 2\n \t\t: TARGET_SPE_ABI ? 3\n@@ -3691,7 +3741,7 @@ legitimate_lo_sum_address_p (enum machine_mode mode, rtx x, int strict)\n \treturn false;\n       if (GET_MODE_BITSIZE (mode) > 64\n \t  || (GET_MODE_BITSIZE (mode) > 32 && !TARGET_POWERPC64\n-\t      && !(TARGET_HARD_FLOAT && TARGET_FPRS\n+\t      && !(TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\n \t\t   && (mode == DFmode || mode == DDmode))))\n \treturn false;\n \n@@ -3758,7 +3808,7 @@ rs6000_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n \t   && GET_CODE (XEXP (x, 0)) == REG\n \t   && GET_CODE (XEXP (x, 1)) != CONST_INT\n \t   && GET_MODE_NUNITS (mode) == 1\n-\t   && ((TARGET_HARD_FLOAT && TARGET_FPRS)\n+\t   && ((TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT)\n \t       || TARGET_POWERPC64\n \t       || ((mode != DImode && mode != DFmode && mode != DDmode)\n \t\t   || (TARGET_E500_DOUBLE && mode != DDmode)))\n@@ -3827,7 +3877,7 @@ rs6000_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n \t   && CONSTANT_P (x)\n \t   && GET_MODE_NUNITS (mode) == 1\n \t   && (GET_MODE_BITSIZE (mode) <= 32\n-\t       || ((TARGET_HARD_FLOAT && TARGET_FPRS)\n+\t       || ((TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT)\n \t\t   && (mode == DFmode || mode == DDmode))))\n     {\n       rtx reg = gen_reg_rtx (Pmode);\n@@ -3842,7 +3892,7 @@ rs6000_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n \t   && GET_CODE (x) != CONST_INT\n \t   && GET_CODE (x) != CONST_DOUBLE\n \t   && CONSTANT_P (x)\n-\t   && ((TARGET_HARD_FLOAT && TARGET_FPRS)\n+\t   && ((TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT)\n \t       || (mode != DFmode && mode != DDmode))\n \t   && mode != DImode\n \t   && mode != TImode)\n@@ -4259,7 +4309,7 @@ rs6000_legitimize_reload_address (rtx x, enum machine_mode mode,\n       && mode != TDmode\n       && (mode != DImode || TARGET_POWERPC64)\n       && ((mode != DFmode && mode != DDmode) || TARGET_POWERPC64\n-\t  || (TARGET_FPRS && TARGET_HARD_FLOAT)))\n+\t  || (TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT)))\n     {\n #if TARGET_MACHO\n       if (flag_pic)\n@@ -4384,7 +4434,7 @@ rs6000_legitimate_address (enum machine_mode mode, rtx x, int reg_ok_strict)\n       && mode != TImode\n       && mode != TFmode\n       && mode != TDmode\n-      && ((TARGET_HARD_FLOAT && TARGET_FPRS)\n+      && ((TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT)\n \t  || TARGET_POWERPC64\n \t  || ((mode != DFmode && mode != DDmode) || TARGET_E500_DOUBLE))\n       && (TARGET_POWERPC64 || mode != DImode)\n@@ -4839,7 +4889,7 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n     operands[1] = force_reg (mode, operands[1]);\n \n   if (mode == SFmode && ! TARGET_POWERPC\n-      && TARGET_HARD_FLOAT && TARGET_FPRS\n+      && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n       && GET_CODE (operands[0]) == MEM)\n     {\n       int regnum;\n@@ -5200,7 +5250,9 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n #define USE_FP_FOR_ARG_P(CUM,MODE,TYPE)\t\t\\\n   (SCALAR_FLOAT_MODE_P (MODE)\t\t\t\\\n    && (CUM)->fregno <= FP_ARG_MAX_REG\t\t\\\n-   && TARGET_HARD_FLOAT && TARGET_FPRS)\n+   && TARGET_HARD_FLOAT && TARGET_FPRS \t\t\\\n+   && (TARGET_DOUBLE_FLOAT_MODE (MODE)\t\t\\\n+       || TARGET_SINGLE_FLOAT_MODE (MODE)))\n \n /* Nonzero if we can use an AltiVec register to pass this arg.  */\n #define USE_ALTIVEC_FOR_ARG_P(CUM,MODE,TYPE,NAMED)\t\\\n@@ -5677,9 +5729,10 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   else if (DEFAULT_ABI == ABI_V4)\n     {\n       if (TARGET_HARD_FLOAT && TARGET_FPRS\n-\t  && (mode == SFmode || mode == DFmode\n-\t      || mode == SDmode || mode == DDmode || mode == TDmode\n-\t      || (mode == TFmode && !TARGET_IEEEQUAD)))\n+          && (TARGET_SINGLE_FLOAT_MODE (mode)\n+              || (TARGET_DOUBLE_FLOAT \n+                  && (mode == DFmode || mode == DDmode || mode == TDmode))\n+              || (mode == TFmode && !TARGET_IEEEQUAD)))\n \t{\n \t  /* _Decimal128 must use an even/odd register pair.  This assumes\n \t     that the register number is odd when fregno is odd.  */\n@@ -5745,7 +5798,8 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n       cum->words = align_words + n_words;\n \n       if (SCALAR_FLOAT_MODE_P (mode)\n-\t  && TARGET_HARD_FLOAT && TARGET_FPRS)\n+\t  && TARGET_HARD_FLOAT && TARGET_FPRS\n+ \t  && (TARGET_DOUBLE_FLOAT_MODE (mode) || TARGET_SINGLE_FLOAT_MODE (mode)))\n \t{\n \t  /* _Decimal128 must be passed in an even/odd float register pair.\n \t     This assumes that the register number is odd when fregno is\n@@ -6239,9 +6293,10 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   else if (abi == ABI_V4)\n     {\n       if (TARGET_HARD_FLOAT && TARGET_FPRS\n-\t  && (mode == SFmode || mode == DFmode\n-\t      || (mode == TFmode && !TARGET_IEEEQUAD)\n-\t      || mode == SDmode || mode == DDmode || mode == TDmode))\n+\t  && (TARGET_SINGLE_FLOAT_MODE(mode)\n+\t       || (TARGET_DOUBLE_FLOAT && (mode == SFmode || mode == DFmode))\n+\t  && ((mode == TFmode && !TARGET_IEEEQUAD)\n+\t     || mode == SDmode || mode == DDmode || mode == TDmode)))\n \t{\n \t  /* _Decimal128 must use an even/odd register pair.  This assumes\n \t     that the register number is odd when fregno is odd.  */\n@@ -6701,11 +6756,17 @@ setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t   fregno <= FP_ARG_V4_MAX_REG && nregs < cfun->va_list_fpr_size;\n \t   fregno++, off += UNITS_PER_FP_WORD, nregs++)\n \t{\n-\t  mem = gen_rtx_MEM (DFmode, plus_constant (save_area, off));\n-\t  MEM_NOTRAP_P (mem) = 1;\n-\t  set_mem_alias_set (mem, set);\n-\t  set_mem_align (mem, GET_MODE_ALIGNMENT (DFmode));\n-\t  emit_move_insn (mem, gen_rtx_REG (DFmode, fregno));\n+\t  mem = gen_rtx_MEM ((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n+\t\t\t      ? DFmode : SFmode, \n+                             plus_constant (save_area, off));\n+  \t  MEM_NOTRAP_P (mem) = 1;\n+  \t  set_mem_alias_set (mem, set);\n+\t  set_mem_align (mem, GET_MODE_ALIGNMENT (\n+\t\t\t (TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n+\t\t\t  ? DFmode : SFmode));\n+\t  emit_move_insn (mem, gen_rtx_REG (\n+                          (TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n+\t\t\t   ? DFmode : SFmode, fregno));\n \t}\n \n       emit_label (lab);\n@@ -6920,18 +6981,19 @@ rs6000_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   align = 1;\n \n   if (TARGET_HARD_FLOAT && TARGET_FPRS\n-      && (TYPE_MODE (type) == SFmode\n-\t  || TYPE_MODE (type) == DFmode\n-\t  || TYPE_MODE (type) == TFmode\n-\t  || TYPE_MODE (type) == SDmode\n-\t  || TYPE_MODE (type) == DDmode\n-\t  || TYPE_MODE (type) == TDmode))\n+      && (TARGET_SINGLE_FLOAT_MODE (TYPE_MODE (type))\n+          || (TARGET_DOUBLE_FLOAT \n+              && (TYPE_MODE (type) == DFmode \n+ \t          || TYPE_MODE (type) == TFmode\n+\t          || TYPE_MODE (type) == SDmode\n+\t          || TYPE_MODE (type) == DDmode\n+\t          || TYPE_MODE (type) == TDmode))))\n     {\n       /* FP args go in FP registers, if present.  */\n       reg = fpr;\n       n_reg = (size + 7) / 8;\n-      sav_ofs = 8*4;\n-      sav_scale = 8;\n+      sav_ofs = ((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT) ? 8 : 4) * 4;\n+      sav_scale = ((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT) ? 8 : 4);\n       if (TYPE_MODE (type) != SFmode && TYPE_MODE (type) != SDmode)\n \talign = 8;\n     }\n@@ -14127,7 +14189,8 @@ rs6000_split_multireg_move (rtx dst, rtx src)\n   mode = GET_MODE (dst);\n   nregs = hard_regno_nregs[reg][mode];\n   if (FP_REGNO_P (reg))\n-    reg_mode = DECIMAL_FLOAT_MODE_P (mode) ? DDmode : DFmode;\n+    reg_mode = DECIMAL_FLOAT_MODE_P (mode) ? DDmode : \n+\t((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT) ? DFmode : SFmode);\n   else if (ALTIVEC_REGNO_P (reg))\n     reg_mode = V16QImode;\n   else if (TARGET_E500_DOUBLE && mode == TFmode)\n@@ -16079,11 +16142,14 @@ rs6000_emit_prologue (void)\n \t properly.  */\n       for (i = 0; i < 64 - info->first_fp_reg_save; i++)\n \t{\n-\t  rtx reg = gen_rtx_REG (DFmode, info->first_fp_reg_save + i);\n+ \t  rtx reg = gen_rtx_REG (((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n+\t\t\t\t   ? DFmode : SFmode), \n+\t\t\t         info->first_fp_reg_save + i);\n \t  rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t\t   GEN_INT (info->fp_save_offset\n \t\t\t\t\t    + sp_offset + 8 * i));\n-\t  rtx mem = gen_frame_mem (DFmode, addr);\n+ \t  rtx mem = gen_frame_mem (((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n+\t\t\t\t     ? DFmode : SFmode), addr);\n \n \t  RTVEC_ELT (p, j++) = gen_rtx_SET (VOIDmode, mem, reg);\n \t}\n@@ -16190,7 +16256,9 @@ rs6000_emit_prologue (void)\n       for (i = 0; i < 64 - info->first_fp_reg_save; i++)\n \tif ((df_regs_ever_live_p (info->first_fp_reg_save+i)\n \t     && ! call_used_regs[info->first_fp_reg_save+i]))\n-\t  emit_frame_save (frame_reg_rtx, frame_ptr_rtx, DFmode,\n+\t  emit_frame_save (frame_reg_rtx, frame_ptr_rtx, \n+\t\t\t   (TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n+\t\t\t    ? DFmode : SFmode,\n \t\t\t   info->first_fp_reg_save + i,\n \t\t\t   info->fp_save_offset + sp_offset + 8 * i,\n \t\t\t   info->total_size);\n@@ -16835,11 +16903,14 @@ rs6000_emit_epilogue (int sibcall)\n \t}\n       for (i = 0; info->first_fp_reg_save + i <= 63; i++)\n \t{\n-\t  rtx reg = gen_rtx_REG (DFmode, info->first_fp_reg_save + i);\n+ \t  rtx reg = gen_rtx_REG (((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n+\t\t\t\t   ? DFmode : SFmode), \n+ \t\t\t         info->first_fp_reg_save + i);\n \t  rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t\t   GEN_INT (info->fp_save_offset\n \t\t\t\t\t    + 8 * i));\n-\t  rtx mem = gen_frame_mem (DFmode, addr);\n+ \t  rtx mem = gen_frame_mem (((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n+\t\t\t\t     ? DFmode : SFmode), addr);\n \n \t  RTVEC_ELT (p, j++) = gen_rtx_SET (VOIDmode, reg, mem);\n \t}\n@@ -17244,9 +17315,12 @@ rs6000_emit_epilogue (int sibcall)\n \t\t\t       GEN_INT (info->fp_save_offset\n \t\t\t\t\t+ sp_offset\n \t\t\t\t\t+ 8 * i));\n-\t  mem = gen_frame_mem (DFmode, addr);\n+\t  mem = gen_frame_mem (((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n+\t\t\t\t ? DFmode : SFmode), addr);\n \n-\t  emit_move_insn (gen_rtx_REG (DFmode,\n+ \t  emit_move_insn (gen_rtx_REG (((TARGET_HARD_FLOAT \n+\t\t\t\t\t && TARGET_DOUBLE_FLOAT)\n+\t\t\t\t        ? DFmode : SFmode),\n \t\t\t\t       info->first_fp_reg_save + i),\n \t\t\t  mem);\n \t}\n@@ -22386,7 +22460,10 @@ rs6000_function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED)\n   if (DECIMAL_FLOAT_MODE_P (mode) && TARGET_HARD_FLOAT && TARGET_FPRS)\n     /* _Decimal128 must use an even/odd register pair.  */\n     regno = (mode == TDmode) ? FP_ARG_RETURN + 1 : FP_ARG_RETURN;\n-  else if (SCALAR_FLOAT_TYPE_P (valtype) && TARGET_HARD_FLOAT && TARGET_FPRS)\n+  else if (SCALAR_FLOAT_TYPE_P (valtype) && TARGET_FPRS \n+           && (TARGET_HARD_FLOAT \n+\t       && (TARGET_SINGLE_FLOAT_MODE (mode) \n+\t            || TARGET_DOUBLE_FLOAT)))\n     regno = FP_ARG_RETURN;\n   else if (TREE_CODE (valtype) == COMPLEX_TYPE\n \t   && targetm.calls.split_complex_arg)"}, {"sha": "ce1b5559ddca662e8ef55de448078a67c3faccff", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a013f05202113a3ed42f06db21b6197ba61cd5f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a013f05202113a3ed42f06db21b6197ba61cd5f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=2a013f05202113a3ed42f06db21b6197ba61cd5f", "patch": "@@ -298,6 +298,17 @@ enum processor_type\n    PROCESSOR_CELL\n };\n \n+/* FPU operations supported. \n+   Each use of TARGET_SINGLE_FLOAT or TARGET_DOUBLE_FLOAT must \n+   also test TARGET_HARD_FLOAT.  */\n+#define TARGET_SINGLE_FLOAT 1\n+#define TARGET_DOUBLE_FLOAT 1\n+#define TARGET_SINGLE_FPU   0\n+#define TARGET_SIMPLE_FPU   0\n+\n+#define TARGET_SINGLE_FLOAT_MODE(MODE) (TARGET_SINGLE_FLOAT && (MODE) == SFmode)\n+#define TARGET_DOUBLE_FLOAT_MODE(MODE) (TARGET_DOUBLE_FLOAT && (MODE) == DFmode)\n+\n extern enum processor_type rs6000_cpu;\n \n /* Recast the processor type to the cpu attribute.  */"}, {"sha": "ca615e5693cdb86a39ba5b4a0bb175d1fb311017", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 155, "deletions": 119, "changes": 274, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a013f05202113a3ed42f06db21b6197ba61cd5f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a013f05202113a3ed42f06db21b6197ba61cd5f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=2a013f05202113a3ed42f06db21b6197ba61cd5f", "patch": "@@ -202,8 +202,11 @@\n (define_mode_iterator P [(SI \"TARGET_32BIT\") (DI \"TARGET_64BIT\")])\n \n ; Any hardware-supported floating-point mode\n-(define_mode_iterator FP [(SF \"TARGET_HARD_FLOAT\")\n-  (DF \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\")\n+(define_mode_iterator FP [\n+  (SF \"TARGET_HARD_FLOAT \n+   && ((TARGET_FPRS && TARGET_SINGLE_FLOAT) || TARGET_E500_SINGLE)\")\n+  (DF \"TARGET_HARD_FLOAT \n+   && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) || TARGET_E500_DOUBLE)\")\n   (TF \"!TARGET_IEEEQUAD\n    && TARGET_HARD_FLOAT\n    && (TARGET_FPRS || TARGET_E500_DOUBLE)\n@@ -5059,13 +5062,13 @@\n (define_expand \"extendsfdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(float_extend:DF (match_operand:SF 1 \"reg_or_none500mem_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n+  \"TARGET_HARD_FLOAT && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) || TARGET_E500_DOUBLE)\"\n   \"\")\n \n (define_insn_and_split \"*extendsfdf2_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f,?f,f\")\n \t(float_extend:DF (match_operand:SF 1 \"reg_or_mem_operand\" \"0,f,m\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"@\n    #\n    fmr %0,%1\n@@ -5081,145 +5084,147 @@\n (define_expand \"truncdfsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(float_truncate:SF (match_operand:DF 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n+  \"TARGET_HARD_FLOAT && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) || TARGET_E500_DOUBLE)\"\n   \"\")\n \n (define_insn \"*truncdfsf2_fpr\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(float_truncate:SF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"frsp %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"aux_truncdfsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRSP))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"frsp %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"negsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(neg:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_SINGLE_FLOAT\"\n   \"\")\n \n (define_insn \"*negsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"fneg %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"abssf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(abs:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_SINGLE_FLOAT\"\n   \"\")\n \n (define_insn \"*abssf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(abs:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"fabs %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:SF (abs:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"fnabs %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"addsf3\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(plus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_SINGLE_FLOAT\"\n   \"\")\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(plus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+\"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"fadds %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(plus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"{fa|fadd} %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"subsf3\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(minus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n \t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_SINGLE_FLOAT\"\n   \"\")\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(minus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"fsubs %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(minus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"{fs|fsub} %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"mulsf3\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_SINGLE_FLOAT\"\n   \"\")\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"fmuls %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"{fm|fmul} %0,%1,%2\"\n   [(set_attr \"type\" \"dmul\")])\n \n (define_expand \"divsf3\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(div:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n \t\t(match_operand:SF 2 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_SINGLE_FLOAT && !TARGET_SIMPLE_FPU\"\n   \"\")\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(div:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t(match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS \n+   && TARGET_SINGLE_FLOAT && !TARGET_SIMPLE_FPU\"\n   \"fdivs %0,%1,%2\"\n   [(set_attr \"type\" \"sdiv\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(div:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t(match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS \n+   && TARGET_SINGLE_FLOAT && !TARGET_SIMPLE_FPU\"\n   \"{fd|fdiv} %0,%1,%2\"\n   [(set_attr \"type\" \"ddiv\")])\n \n@@ -5247,7 +5252,8 @@\n \t(plus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS \n+   && TARGET_SINGLE_FLOAT && TARGET_FUSED_MADD\"\n   \"fmadds %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5256,7 +5262,8 @@\n \t(plus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS \n+   && TARGET_SINGLE_FLOAT && TARGET_FUSED_MADD\"\n   \"{fma|fmadd} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -5265,7 +5272,8 @@\n \t(minus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS \n+   && TARGET_SINGLE_FLOAT && TARGET_FUSED_MADD\"\n   \"fmsubs %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5274,7 +5282,8 @@\n \t(minus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS \n+   && TARGET_SINGLE_FLOAT && TARGET_FUSED_MADD\"\n   \"{fms|fmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -5284,7 +5293,7 @@\n \t\t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n   \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n-   && HONOR_SIGNED_ZEROS (SFmode)\"\n+   && TARGET_SINGLE_FLOAT && ! HONOR_SIGNED_ZEROS (SFmode)\"\n   \"fnmadds %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5293,7 +5302,7 @@\n \t(minus:SF (mult:SF (neg:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\"))\n \t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n+  \"TARGET_POWERPC && TARGET_SINGLE_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n    && ! HONOR_SIGNED_ZEROS (SFmode)\"\n   \"fnmadds %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n@@ -5303,7 +5312,8 @@\n \t(neg:SF (plus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS \n+   && TARGET_SINGLE_FLOAT && TARGET_FUSED_MADD\"\n   \"{fnma|fnmadd} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -5313,7 +5323,7 @@\n \t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n   \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n-   && ! HONOR_SIGNED_ZEROS (SFmode)\"\n+   && TARGET_SINGLE_FLOAT && ! HONOR_SIGNED_ZEROS (SFmode)\"\n   \"{fnma|fnmadd} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -5323,7 +5333,7 @@\n \t\t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n   \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n-   && HONOR_SIGNED_ZEROS (SFmode)\"\n+   && TARGET_SINGLE_FLOAT && HONOR_SIGNED_ZEROS (SFmode)\"\n   \"fnmsubs %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5333,7 +5343,7 @@\n \t\t  (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))))]\n   \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n-   && ! HONOR_SIGNED_ZEROS (SFmode)\"\n+   && TARGET_SINGLE_FLOAT && ! HONOR_SIGNED_ZEROS (SFmode)\"\n   \"fnmsubs %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5342,7 +5352,8 @@\n \t(neg:SF (minus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS \n+   && TARGET_SINGLE_FLOAT && TARGET_FUSED_MADD\"\n   \"{fnms|fnmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -5352,27 +5363,31 @@\n \t\t  (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))))]\n   \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n-   && ! HONOR_SIGNED_ZEROS (SFmode)\"\n+   && TARGET_SINGLE_FLOAT && ! HONOR_SIGNED_ZEROS (SFmode)\"\n   \"{fnms|fnmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n (define_expand \"sqrtsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(sqrt:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n-  \"(TARGET_PPC_GPOPT || TARGET_POWER2) && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"(TARGET_PPC_GPOPT || TARGET_POWER2) \n+   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT \n+   && !TARGET_SIMPLE_FPU\"\n   \"\")\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(sqrt:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PPC_GPOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_PPC_GPOPT && TARGET_HARD_FLOAT \n+   && TARGET_FPRS && TARGET_SINGLE_FLOAT && !TARGET_SIMPLE_FPU\"\n   \"fsqrts %0,%1\"\n   [(set_attr \"type\" \"ssqrt\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(sqrt:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWER2 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_POWER2 && TARGET_HARD_FLOAT && TARGET_FPRS \n+   && TARGET_SINGLE_FLOAT && !TARGET_SIMPLE_FPU\"\n   \"fsqrt %0,%1\"\n   [(set_attr \"type\" \"dsqrt\")])\n \n@@ -5405,7 +5420,7 @@\n \t                     (match_dup 5))\n \t\t\t (match_dup 3)\n \t\t\t (match_dup 4)))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\n    && !HONOR_NANS (SFmode) && !HONOR_SIGNED_ZEROS (SFmode)\"\n   {\n      operands[3] = gen_reg_rtx (SFmode);\n@@ -5423,7 +5438,7 @@\n \t                     (match_dup 5))\n \t\t\t (match_dup 3)\n \t\t\t (match_dup 4)))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\n    && !HONOR_NANS (DFmode) && !HONOR_SIGNED_ZEROS (DFmode)\"\n   {\n      operands[3] = gen_reg_rtx (DFmode);\n@@ -5441,7 +5456,8 @@\n \t\t\t     (match_operand:SF 2 \"gpc_reg_operand\" \"\"))\n \t\t\t (match_dup 1)\n \t\t\t (match_dup 2)))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && !flag_trapping_math\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS \n+   && TARGET_SINGLE_FLOAT && !flag_trapping_math\"\n   \"{ rs6000_emit_minmax (operands[0], SMAX, operands[1], operands[2]); DONE;}\")\n \n (define_expand \"sminsf3\"\n@@ -5450,15 +5466,17 @@\n \t\t\t     (match_operand:SF 2 \"gpc_reg_operand\" \"\"))\n \t\t\t (match_dup 2)\n \t\t\t (match_dup 1)))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && !flag_trapping_math\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS \n+   && TARGET_SINGLE_FLOAT && !flag_trapping_math\"\n   \"{ rs6000_emit_minmax (operands[0], SMIN, operands[1], operands[2]); DONE;}\")\n \n (define_split\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(match_operator:SF 3 \"min_max_operator\"\n \t [(match_operand:SF 1 \"gpc_reg_operand\" \"\")\n \t  (match_operand:SF 2 \"gpc_reg_operand\" \"\")]))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && !flag_trapping_math\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS \n+   && TARGET_SINGLE_FLOAT && !flag_trapping_math\"\n   [(const_int 0)]\n   \"\n { rs6000_emit_minmax (operands[0], GET_CODE (operands[3]),\n@@ -5519,7 +5537,7 @@\n \t (if_then_else:SF (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"\")\n \t\t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"\n {\n   if (rs6000_emit_cmove (operands[0], operands[1], operands[2], operands[3]))\n@@ -5534,7 +5552,7 @@\n \t\t\t     (match_operand:SF 4 \"zero_fp_constant\" \"F\"))\n \t\t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")\n \t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"fsel %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5544,100 +5562,100 @@\n \t\t\t     (match_operand:DF 4 \"zero_fp_constant\" \"F\"))\n \t\t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")\n \t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"fsel %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"negdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(neg:DF (match_operand:DF 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n+  \"TARGET_HARD_FLOAT && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) || TARGET_E500_DOUBLE)\"\n   \"\")\n \n (define_insn \"*negdf2_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"fneg %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"absdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(abs:DF (match_operand:DF 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n+  \"TARGET_HARD_FLOAT && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) || TARGET_E500_DOUBLE)\"\n   \"\")\n \n (define_insn \"*absdf2_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(abs:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"fabs %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"*nabsdf2_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:DF (abs:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"fnabs %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"adddf3\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(plus:DF (match_operand:DF 1 \"gpc_reg_operand\" \"\")\n \t\t (match_operand:DF 2 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n+  \"TARGET_HARD_FLOAT && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) || TARGET_E500_DOUBLE)\"\n   \"\")\n \n (define_insn \"*adddf3_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(plus:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:DF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"{fa|fadd} %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"subdf3\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(minus:DF (match_operand:DF 1 \"gpc_reg_operand\" \"\")\n \t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n+  \"TARGET_HARD_FLOAT && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) || TARGET_E500_DOUBLE)\"\n   \"\")\n \n (define_insn \"*subdf3_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(minus:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")\n \t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"{fs|fsub} %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"muldf3\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"\")\n \t\t (match_operand:DF 2 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n+  \"TARGET_HARD_FLOAT && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) || TARGET_E500_DOUBLE)\"\n   \"\")\n \n (define_insn \"*muldf3_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:DF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"{fm|fmul} %0,%1,%2\"\n   [(set_attr \"type\" \"dmul\")])\n \n (define_expand \"divdf3\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(div:DF (match_operand:DF 1 \"gpc_reg_operand\" \"\")\n \t\t(match_operand:DF 2 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n+  \"TARGET_HARD_FLOAT && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) || TARGET_E500_DOUBLE) && !TARGET_SIMPLE_FPU\"\n   \"\")\n \n (define_insn \"*divdf3_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(div:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")\n \t\t(match_operand:DF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT && !TARGET_SIMPLE_FPU\"\n   \"{fd|fdiv} %0,%1,%2\"\n   [(set_attr \"type\" \"ddiv\")])\n \n@@ -5665,7 +5683,7 @@\n \t(plus:DF (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))\n \t\t (match_operand:DF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD && TARGET_DOUBLE_FLOAT\"\n   \"{fma|fmadd} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -5674,7 +5692,7 @@\n \t(minus:DF (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t   (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))\n \t\t  (match_operand:DF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD && TARGET_DOUBLE_FLOAT\"\n   \"{fms|fmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -5683,7 +5701,7 @@\n \t(neg:DF (plus:DF (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t (match_operand:DF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD && TARGET_DOUBLE_FLOAT\n    && HONOR_SIGNED_ZEROS (DFmode)\"\n   \"{fnma|fnmadd} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n@@ -5693,7 +5711,7 @@\n \t(minus:DF (mult:DF (neg:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\"))\n \t\t\t   (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))\n \t\t  (match_operand:DF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD && TARGET_DOUBLE_FLOAT\n    && ! HONOR_SIGNED_ZEROS (DFmode)\"\n   \"{fnma|fnmadd} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n@@ -5703,7 +5721,7 @@\n \t(neg:DF (minus:DF (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t\t   (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t  (match_operand:DF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD && TARGET_DOUBLE_FLOAT\n    && HONOR_SIGNED_ZEROS (DFmode)\"\n   \"{fnms|fnmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n@@ -5713,15 +5731,16 @@\n \t(minus:DF (match_operand:DF 3 \"gpc_reg_operand\" \"f\")\n \t          (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t   (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD && TARGET_DOUBLE_FLOAT\n    && ! HONOR_SIGNED_ZEROS (DFmode)\"\n   \"{fnms|fnmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n (define_insn \"sqrtdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(sqrt:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"(TARGET_PPC_GPOPT || TARGET_POWER2) && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"(TARGET_PPC_GPOPT || TARGET_POWER2) && TARGET_HARD_FLOAT && TARGET_FPRS \n+   && TARGET_DOUBLE_FLOAT\"\n   \"fsqrt %0,%1\"\n   [(set_attr \"type\" \"dsqrt\")])\n \n@@ -5734,7 +5753,8 @@\n \t\t\t     (match_operand:DF 2 \"gpc_reg_operand\" \"\"))\n \t\t\t (match_dup 1)\n \t\t\t (match_dup 2)))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && !flag_trapping_math\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n+   && !flag_trapping_math\"\n   \"{ rs6000_emit_minmax (operands[0], SMAX, operands[1], operands[2]); DONE;}\")\n \n (define_expand \"smindf3\"\n@@ -5743,15 +5763,17 @@\n \t\t\t     (match_operand:DF 2 \"gpc_reg_operand\" \"\"))\n \t\t\t (match_dup 2)\n \t\t\t (match_dup 1)))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && !flag_trapping_math\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n+   && !flag_trapping_math\"\n   \"{ rs6000_emit_minmax (operands[0], SMIN, operands[1], operands[2]); DONE;}\")\n \n (define_split\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(match_operator:DF 3 \"min_max_operator\"\n \t [(match_operand:DF 1 \"gpc_reg_operand\" \"\")\n \t  (match_operand:DF 2 \"gpc_reg_operand\" \"\")]))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && !flag_trapping_math\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n+   && !flag_trapping_math\"\n   [(const_int 0)]\n   \"\n { rs6000_emit_minmax (operands[0], GET_CODE (operands[3]),\n@@ -5764,7 +5786,7 @@\n \t (if_then_else:DF (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"\")\n \t\t\t  (match_operand:DF 3 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"\n {\n   if (rs6000_emit_cmove (operands[0], operands[1], operands[2], operands[3]))\n@@ -5779,7 +5801,7 @@\n \t\t\t     (match_operand:DF 4 \"zero_fp_constant\" \"F\"))\n \t\t\t (match_operand:DF 2 \"gpc_reg_operand\" \"f\")\n \t\t\t (match_operand:DF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"fsel %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5798,13 +5820,13 @@\n (define_expand \"fixuns_truncsfsi2\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(unsigned_fix:SI (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"\")\n \n (define_expand \"fix_truncsfsi2\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(fix:SI (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"\")\n \n ; For each of these conversions, there is a define_expand, a define_insn\n@@ -5820,7 +5842,8 @@\n \t      (clobber (match_dup 4))\n \t      (clobber (match_dup 5))\n \t      (clobber (match_dup 6))])]\n-  \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n+  \"TARGET_HARD_FLOAT \n+   && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) || TARGET_E500_DOUBLE)\"\n   \"\n {\n   if (TARGET_E500_DOUBLE)\n@@ -5850,7 +5873,7 @@\n    (clobber (match_operand:DF 4 \"offsettable_mem_operand\" \"=o\"))\n    (clobber (match_operand:DF 5 \"gpc_reg_operand\" \"=&f\"))\n    (clobber (match_operand:SI 6 \"gpc_reg_operand\" \"=&r\"))]\n-  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"#\"\n   \"&& (can_create_pseudo_p () || offsettable_nonstrict_memref_p (operands[4]))\"\n   [(pc)]\n@@ -5879,7 +5902,7 @@\n (define_expand \"floatunssisf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n         (unsigned_float:SF (match_operand:SI 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"\")\n \n (define_expand \"floatunssidf2\"\n@@ -5889,7 +5912,7 @@\n \t      (use (match_dup 3))\n \t      (clobber (match_dup 4))\n \t      (clobber (match_dup 5))])]\n-  \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n+  \"TARGET_HARD_FLOAT && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) || TARGET_E500_DOUBLE)\"\n   \"\n {\n   if (TARGET_E500_DOUBLE)\n@@ -5917,7 +5940,7 @@\n    (use (match_operand:DF 3 \"gpc_reg_operand\" \"f\"))\n    (clobber (match_operand:DF 4 \"offsettable_mem_operand\" \"=o\"))\n    (clobber (match_operand:DF 5 \"gpc_reg_operand\" \"=&f\"))]\n-  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"#\"\n   \"&& (can_create_pseudo_p () || offsettable_nonstrict_memref_p (operands[4]))\"\n   [(pc)]\n@@ -5947,7 +5970,7 @@\n \t      (clobber (match_dup 2))\n \t      (clobber (match_dup 3))])]\n   \"(TARGET_POWER2 || TARGET_POWERPC)\n-   && TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n+   && TARGET_HARD_FLOAT && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) || TARGET_E500_DOUBLE)\"\n   \"\n {\n   if (TARGET_E500_DOUBLE)\n@@ -5983,7 +6006,8 @@\n \t(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))\n    (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"=f\"))\n    (clobber (match_operand:DI 3 \"offsettable_mem_operand\" \"=o\"))]\n-  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS \n+   && TARGET_DOUBLE_FLOAT\"\n   \"#\"\n   \"&& (can_create_pseudo_p () || offsettable_nonstrict_memref_p (operands[3]))\"\n   [(pc)]\n@@ -6004,7 +6028,8 @@\n   [(set (match_operand:SI 0 \"memory_operand\" \"=Z\")\n \t(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))\n    (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"=f\"))]\n-  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS\n+  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS \n+   && TARGET_DOUBLE_FLOAT \n    && TARGET_PPC_GFXOPT\"\n   \"#\"\n   \"&& 1\"\n@@ -6022,7 +6047,8 @@\n \t(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))\n    (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"=f\"))\n    (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"=r\"))]\n-  \"TARGET_POWERPC64 && TARGET_MFPGPR && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_POWERPC64 && TARGET_MFPGPR && TARGET_HARD_FLOAT && TARGET_FPRS \n+   && TARGET_DOUBLE_FLOAT\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 2) (unspec:DI [(fix:SI (match_dup 1))] UNSPEC_FCTIWZ))\n@@ -6039,63 +6065,64 @@\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec:DI [(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"f\"))]\n \t\t   UNSPEC_FCTIWZ))]\n-  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS \n+   && TARGET_DOUBLE_FLOAT\"\n   \"{fcirz|fctiwz} %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"btruncdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec:DF [(match_operand:DF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRIZ))]\n-  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"friz %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"btruncsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRIZ))]\n-  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT \"\n   \"friz %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"ceildf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec:DF [(match_operand:DF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRIP))]\n-  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"frip %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"ceilsf2\"\n  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRIP))]\n-  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT \"\n   \"frip %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"floordf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec:DF [(match_operand:DF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRIM))]\n-  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"frim %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"floorsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRIM))]\n-  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT \"\n   \"frim %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"rounddf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec:DF [(match_operand:DF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRIN))]\n-  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"frin %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"roundsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRIN))]\n-  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT \"\n   \"frin %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -6111,27 +6138,27 @@\n (define_expand \"floatsisf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n         (float:SF (match_operand:SI 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n+  \"TARGET_HARD_FLOAT && (!TARGET_FPRS || TARGET_SINGLE_FPU)\"\n   \"\")\n \n (define_insn \"floatdidf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(float:DF (match_operand:DI 1 \"gpc_reg_operand\" \"!f#r\")))]\n-  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"fcfid %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"fix_truncdfdi2\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=!f#r\")\n \t(fix:DI (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"fctidz %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"floatdisf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n         (float:SF (match_operand:DI 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT \"\n   \"\n {\n   rtx val = operands[1];\n@@ -6153,7 +6180,7 @@\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n         (float:SF (match_operand:DI 1 \"gpc_reg_operand\" \"!f#r\")))\n    (clobber (match_scratch:DF 2 \"=f\"))]\n-  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2)\n@@ -6187,7 +6214,7 @@\n \t\t\t   (label_ref (match_operand:DI 2 \"\" \"\"))\n \t\t\t   (pc)))\n    (set (match_dup 0) (match_dup 1))]\n-  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"\n {\n   operands[3] = gen_reg_rtx (DImode);\n@@ -8219,7 +8246,7 @@\n \t(match_operand:SF 1 \"input_operand\" \"r,m,r,f,m,f,r,r,h,0,G,Fn\"))]\n   \"(gpc_reg_operand (operands[0], SFmode)\n    || gpc_reg_operand (operands[1], SFmode))\n-   && (TARGET_HARD_FLOAT && TARGET_FPRS)\"\n+   && (TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT)\"\n   \"@\n    mr %0,%1\n    {l%U1%X1|lwz%U1%X1} %0,%1\n@@ -8357,7 +8384,7 @@\n (define_insn \"*movdf_hardfloat32\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=!r,??r,m,f,f,m,!r,!r,!r\")\n \t(match_operand:DF 1 \"input_operand\" \"r,m,r,f,m,f,G,H,F\"))]\n-  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\n+  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n    && (gpc_reg_operand (operands[0], DFmode)\n        || gpc_reg_operand (operands[1], DFmode))\"\n   \"*\n@@ -8452,7 +8479,9 @@\n (define_insn \"*movdf_softfloat32\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=r,r,m,r,r,r\")\n \t(match_operand:DF 1 \"input_operand\" \"r,m,r,G,H,F\"))]\n-  \"! TARGET_POWERPC64 && (TARGET_SOFT_FLOAT || TARGET_E500_SINGLE)\n+  \"! TARGET_POWERPC64 \n+   && ((TARGET_FPRS && !TARGET_DOUBLE_FLOAT) \n+       || TARGET_SOFT_FLOAT || TARGET_E500_SINGLE)\n    && (gpc_reg_operand (operands[0], DFmode)\n        || gpc_reg_operand (operands[1], DFmode))\"\n   \"*\n@@ -8495,7 +8524,8 @@\n (define_insn \"*movdf_hardfloat64_mfpgpr\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=Y,r,!r,f,f,m,*c*l,!r,*h,!r,!r,!r,r,f\")\n \t(match_operand:DF 1 \"input_operand\" \"r,Y,r,f,m,f,r,h,0,G,H,F,f,r\"))]\n-  \"TARGET_POWERPC64 && TARGET_MFPGPR && TARGET_HARD_FLOAT && TARGET_FPRS\n+  \"TARGET_POWERPC64 && TARGET_MFPGPR && TARGET_HARD_FLOAT && TARGET_FPRS \n+   && TARGET_DOUBLE_FLOAT \n    && (gpc_reg_operand (operands[0], DFmode)\n        || gpc_reg_operand (operands[1], DFmode))\"\n   \"@\n@@ -8521,7 +8551,8 @@\n (define_insn \"*movdf_hardfloat64\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=Y,r,!r,f,f,m,*c*l,!r,*h,!r,!r,!r\")\n \t(match_operand:DF 1 \"input_operand\" \"r,Y,r,f,m,f,r,h,0,G,H,F\"))]\n-  \"TARGET_POWERPC64 && !TARGET_MFPGPR && TARGET_HARD_FLOAT && TARGET_FPRS\n+  \"TARGET_POWERPC64 && !TARGET_MFPGPR && TARGET_HARD_FLOAT && TARGET_FPRS \n+   && TARGET_DOUBLE_FLOAT \n    && (gpc_reg_operand (operands[0], DFmode)\n        || gpc_reg_operand (operands[1], DFmode))\"\n   \"@\n@@ -8614,7 +8645,8 @@\n \t\t   (float_extend:TF (match_operand:DF 1 \"input_operand\" \"\")))\n \t      (use (match_dup 2))])]\n   \"!TARGET_IEEEQUAD\n-   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n+   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n+   && TARGET_LONG_DOUBLE_128\"\n {\n   operands[2] = CONST0_RTX (DFmode);\n   /* Generate GOT reference early for SVR4 PIC.  */\n@@ -8627,7 +8659,8 @@\n        (float_extend:TF (match_operand:DF 1 \"input_operand\" \"fr,mf,mf,rmGHF\")))\n    (use (match_operand:DF 2 \"zero_reg_mem_operand\" \"rf,m,f,n\"))]\n   \"!TARGET_IEEEQUAD\n-   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n+   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n+   && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n   \"&& reload_completed\"\n   [(pc)]\n@@ -8684,7 +8717,8 @@\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(float_truncate:DF (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))]\n   \"!TARGET_IEEEQUAD && TARGET_XL_COMPAT\n-   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n+   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n+   && TARGET_LONG_DOUBLE_128\"\n   \"fadd %0,%1,%L1\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -8708,7 +8742,8 @@\n \t(float_truncate:SF (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))\n    (clobber (match_scratch:DF 2 \"=f\"))]\n   \"!TARGET_IEEEQUAD\n-   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n+   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT \n+   && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2)\n@@ -8738,7 +8773,7 @@\n \t(unspec:DF [(match_operand:TF 1 \"gpc_reg_operand\" \"f\")]\n \t\t   UNSPEC_FIX_TRUNC_TF))\n    (clobber (match_operand:DF 2 \"gpc_reg_operand\" \"=&f\"))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"mffs %2\\n\\tmtfsb1 31\\n\\tmtfsb0 30\\n\\tfadd %0,%1,%L1\\n\\tmtfsf 1,%2\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"length\" \"20\")])\n@@ -8859,7 +8894,8 @@\n \t\t\t   (pc)))\n    (set (match_dup 6) (neg:DF (match_dup 6)))]\n   \"!TARGET_IEEEQUAD\n-   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n+   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n+   && TARGET_LONG_DOUBLE_128\"\n   \"\n {\n   const int hi_word = FLOAT_WORDS_BIG_ENDIAN ? 0 : GET_MODE_SIZE (DFmode);\n@@ -10010,7 +10046,7 @@\n \t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_UPDATE\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT && TARGET_UPDATE\"\n   \"@\n    lfsux %3,%0,%2\n    lfsu %3,%2(%0)\"\n@@ -10022,7 +10058,7 @@\n \t(match_operand:SF 3 \"gpc_reg_operand\" \"f,f\"))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_UPDATE\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT && TARGET_UPDATE\"\n   \"@\n    stfsux %3,%0,%2\n    stfsu %3,%2(%0)\"\n@@ -10058,7 +10094,7 @@\n \t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_UPDATE\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT && TARGET_UPDATE\"\n   \"@\n    lfdux %3,%0,%2\n    lfdu %3,%2(%0)\"\n@@ -10070,7 +10106,7 @@\n \t(match_operand:DF 3 \"gpc_reg_operand\" \"f,f\"))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_UPDATE\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT && TARGET_UPDATE\"\n   \"@\n    stfdux %3,%0,%2\n    stfdu %3,%2(%0)\"\n@@ -10091,7 +10127,7 @@\n    (set (match_operand:DF 2 \"gpc_reg_operand\" \"\")\n \t(match_operand:DF 3 \"memory_operand\" \"\"))]\n   \"TARGET_POWER2\n-   && TARGET_HARD_FLOAT && TARGET_FPRS\n+   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n    && registers_ok_for_quad_peep (operands[0], operands[2])\n    && mems_ok_for_quad_peep (operands[1], operands[3])\"\n   [(set (match_dup 0)\n@@ -10113,7 +10149,7 @@\n    (set (match_operand:DF 2 \"memory_operand\" \"\")\n \t(match_operand:DF 3 \"gpc_reg_operand\" \"\"))]\n   \"TARGET_POWER2\n-   && TARGET_HARD_FLOAT && TARGET_FPRS\n+   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n    && registers_ok_for_quad_peep (operands[1], operands[3])\n    && mems_ok_for_quad_peep (operands[0], operands[2])\"\n   [(set (match_dup 0)\n@@ -11899,15 +11935,15 @@\n   [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n \t(compare:CCFP (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t      (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"fcmpu %0,%1,%2\"\n   [(set_attr \"type\" \"fpcompare\")])\n \n (define_insn \"*cmpdf_internal1\"\n   [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n \t(compare:CCFP (match_operand:DF 1 \"gpc_reg_operand\" \"f\")\n \t\t      (match_operand:DF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"fcmpu %0,%1,%2\"\n   [(set_attr \"type\" \"fpcompare\")])\n \n@@ -11917,7 +11953,7 @@\n \t(compare:CCFP (match_operand:TF 1 \"gpc_reg_operand\" \"f\")\n \t\t      (match_operand:TF 2 \"gpc_reg_operand\" \"f\")))]\n   \"!TARGET_IEEEQUAD && !TARGET_XL_COMPAT\n-   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n+   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT && TARGET_LONG_DOUBLE_128\"\n   \"fcmpu %0,%1,%2\\;bne %0,$+8\\;fcmpu %0,%L1,%L2\"\n   [(set_attr \"type\" \"fpcompare\")\n    (set_attr \"length\" \"12\")])\n@@ -11935,7 +11971,7 @@\n     (clobber (match_scratch:DF 9 \"=f\"))\n     (clobber (match_scratch:DF 10 \"=f\"))]\n   \"!TARGET_IEEEQUAD && TARGET_XL_COMPAT\n-   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n+   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 3) (match_dup 13))"}, {"sha": "c036aeca4414d219fb632add834fb4cf9cceff48", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a013f05202113a3ed42f06db21b6197ba61cd5f/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a013f05202113a3ed42f06db21b6197ba61cd5f/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=2a013f05202113a3ed42f06db21b6197ba61cd5f", "patch": "@@ -260,3 +260,15 @@ Specify alignment of structure fields default/natural\n mprioritize-restricted-insns=\n Target RejectNegative Joined UInteger Var(rs6000_sched_restricted_insns_priority)\n Specify scheduling priority for dispatch slot restricted insns\n+\n+msingle-float\n+Target RejectNegative Var(rs6000_single_float)\n+Single-precision floating point unit\n+\n+mdouble-float\n+Target RejectNegative Var(rs6000_double_float)\n+Double-precision floating point unit\n+\n+msimple-fpu\n+Target RejectNegative Var(rs6000_simple_fpu)\n+Floating point unit does not support divide & sqrt"}, {"sha": "36e093c1a39b7ceade87ad71773f38280fb43ae9", "filename": "gcc/config/rs6000/singlefp.h", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a013f05202113a3ed42f06db21b6197ba61cd5f/gcc%2Fconfig%2Frs6000%2Fsinglefp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a013f05202113a3ed42f06db21b6197ba61cd5f/gcc%2Fconfig%2Frs6000%2Fsinglefp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsinglefp.h?ref=2a013f05202113a3ed42f06db21b6197ba61cd5f", "patch": "@@ -0,0 +1,40 @@\n+/* Definitions for PowerPC single-precision floating point unit\n+   such as Xilinx PowerPC 405/440 APU.\n+\n+   Copyright (C) 2008 Free Software Foundation, Inc.\n+   Contributed by Michael Eager (eager@eagercon.com)\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+\n+/* Undefine definitions from rs6000.h. */\n+#undef TARGET_SINGLE_FLOAT\n+#undef TARGET_DOUBLE_FLOAT\n+#undef TARGET_SINGLE_FPU\n+#undef TARGET_SIMPLE_FPU\n+#undef UNITS_PER_FP_WORD\n+\n+/* FPU operations supported. \n+   If TARGET_SINGLE_FPU set, processor supports single fp options. */\n+#define TARGET_SINGLE_FLOAT (rs6000_single_float)\n+#define TARGET_DOUBLE_FLOAT (rs6000_double_float)\n+#define TARGET_SINGLE_FPU   1\n+#define TARGET_SIMPLE_FPU   (rs6000_simple_fpu)\n+\n+/* FP word width depends on single/double fp support. */\n+#define UNITS_PER_FP_WORD ((TARGET_SOFT_FLOAT || TARGET_DOUBLE_FLOAT) ? 8 : 4)\n+"}, {"sha": "a289830a465dc0b7e28229e1098e2af44f229e8a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a013f05202113a3ed42f06db21b6197ba61cd5f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a013f05202113a3ed42f06db21b6197ba61cd5f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2a013f05202113a3ed42f06db21b6197ba61cd5f", "patch": "@@ -715,6 +715,7 @@ See RS/6000 and PowerPC Options.\n -m64  -m32  -mxl-compat  -mno-xl-compat  -mpe @gol\n -malign-power  -malign-natural @gol\n -msoft-float  -mhard-float  -mmultiple  -mno-multiple @gol\n+-msingle-float -mdouble-float -msimple-fpu @gol\n -mstring  -mno-string  -mupdate  -mno-update @gol\n -mfused-madd  -mno-fused-madd  -mbit-align  -mno-bit-align @gol\n -mstrict-align  -mno-strict-align  -mrelocatable @gol\n@@ -13419,7 +13420,8 @@ following options:\n \n @gccoptlist{-maltivec  -mfprnd  -mhard-float  -mmfcrf  -mmultiple @gol\n -mnew-mnemonics  -mpopcntb  -mpower  -mpower2  -mpowerpc64 @gol\n--mpowerpc-gpopt  -mpowerpc-gfxopt  -mstring  -mmulhw  -mdlmzb  -mmfpgpr}\n+-mpowerpc-gpopt  -mpowerpc-gfxopt  -msingle-float -mdouble-float @gol\n+-msimple-fpu -mstring  -mmulhw  -mdlmzb  -mmfpgpr}\n \n The particular options set for any particular CPU will vary between\n compiler versions, depending on what setting seems to produce optimal\n@@ -13636,6 +13638,17 @@ Generate code that does not use (uses) the floating-point register set.\n Software floating point emulation is provided if you use the\n @option{-msoft-float} option, and pass the option to GCC when linking.\n \n+@item -msingle-float\n+@itemx -mdouble-float\n+@opindex msingle-float\n+@opindex mdouble-float\n+Generate code for single or double-precision floating point operations. \n+@option{-mdouble-float} implies @option{-msingle-float}. \n+\n+@item -msimple-fpu\n+@opindex msimple-fpu\n+Do not generate sqrt and div instructions for hardware floating point unit.\n+\n @item -mmultiple\n @itemx -mno-multiple\n @opindex mmultiple"}]}