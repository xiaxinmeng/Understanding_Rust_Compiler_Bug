{"sha": "02bfa7081ea12b31860fb211321f31be67834a11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJiZmE3MDgxZWExMmIzMTg2MGZiMjExMzIxZjMxYmU2NzgzNGExMQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2012-11-24T15:00:16Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2012-11-24T15:00:16Z"}, "message": "re PR fortran/55314 (Rejects some valid ALLOCATE statements)\n\n2012-11-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/55314\n\t* resolve.c (resolve_allocate_deallocate):  Compare all\n\tsubscripts when deciding if to reject a (de)allocate\n\tstatement.\n\n2012-11-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/55314\n\t* gfortran.dg/allocate_error_4.f90:  New test.\n\nFrom-SVN: r193778", "tree": {"sha": "647da4ddf3174be79b16c0e83b853a74358c3df5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/647da4ddf3174be79b16c0e83b853a74358c3df5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02bfa7081ea12b31860fb211321f31be67834a11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02bfa7081ea12b31860fb211321f31be67834a11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02bfa7081ea12b31860fb211321f31be67834a11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02bfa7081ea12b31860fb211321f31be67834a11/comments", "author": null, "committer": null, "parents": [{"sha": "59ad52e0fbbab029cf9f5084555c48a8219229e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ad52e0fbbab029cf9f5084555c48a8219229e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59ad52e0fbbab029cf9f5084555c48a8219229e1"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "7f8e6dc8289d7e282b08d4ce1f5c467e9016d49a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02bfa7081ea12b31860fb211321f31be67834a11/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02bfa7081ea12b31860fb211321f31be67834a11/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=02bfa7081ea12b31860fb211321f31be67834a11", "patch": "@@ -1,3 +1,10 @@\n+2012-11-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/55314\n+\t* resolve.c (resolve_allocate_deallocate):  Compare all\n+\tsubscripts when deciding if to reject a (de)allocate\n+\tstatement.\n+\n 2012-11-21  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/55352"}, {"sha": "f3d3beb85954605736ceb1e5aea80b26780eabe4", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02bfa7081ea12b31860fb211321f31be67834a11/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02bfa7081ea12b31860fb211321f31be67834a11/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=02bfa7081ea12b31860fb211321f31be67834a11", "patch": "@@ -7622,12 +7622,18 @@ resolve_allocate_deallocate (gfc_code *code, const char *fcn)\n \n \t\t      if (pr->next && qr->next)\n \t\t\t{\n+\t\t\t  int i;\n \t\t\t  gfc_array_ref *par = &(pr->u.ar);\n \t\t\t  gfc_array_ref *qar = &(qr->u.ar);\n-\t\t\t  if ((par->start[0] != NULL || qar->start[0] != NULL)\n-\t\t\t      && gfc_dep_compare_expr (par->start[0],\n-\t\t\t\t\t\t       qar->start[0]) != 0)\n-\t\t\t    break;\n+\n+\t\t\t  for (i=0; i<par->dimen; i++)\n+\t\t\t    {\n+\t\t\t      if ((par->start[i] != NULL\n+\t\t\t\t   || qar->start[i] != NULL)\n+\t\t\t\t  && gfc_dep_compare_expr (par->start[i],\n+\t\t\t\t\t\t\t   qar->start[i]) != 0)\n+\t\t\t\tgoto break_label;\n+\t\t\t    }\n \t\t\t}\n \t\t    }\n \t\t  else\n@@ -7639,6 +7645,8 @@ resolve_allocate_deallocate (gfc_code *code, const char *fcn)\n \t\t  pr = pr->next;\n \t\t  qr = qr->next;\n \t\t}\n+\t    break_label:\n+\t      ;\n \t    }\n \t}\n     }"}, {"sha": "f962907f98beec45e100fbdc0ba99ba144298655", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02bfa7081ea12b31860fb211321f31be67834a11/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02bfa7081ea12b31860fb211321f31be67834a11/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=02bfa7081ea12b31860fb211321f31be67834a11", "patch": "@@ -1,3 +1,8 @@\n+2012-11-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/55314\n+\t* gfortran.dg/allocate_error_4.f90:  New test.\n+\n 2012-11-24  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* lib/gcc-gdb-test.exp (gdb-test): Pass -- as first argument"}, {"sha": "6652b472f49c44880c48f83aec01fb4158a03e43", "filename": "gcc/testsuite/gfortran.dg/allocate_error_4.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02bfa7081ea12b31860fb211321f31be67834a11/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_error_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02bfa7081ea12b31860fb211321f31be67834a11/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_error_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_error_4.f90?ref=02bfa7081ea12b31860fb211321f31be67834a11", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+! PR fortran/55314 - the second allocate statement was rejected.\n+\n+program main\n+  implicit none\n+  integer :: max_nb\n+  type comm_mask\n+    integer(4), pointer :: mask(:)\n+  end type comm_mask\n+  type (comm_mask), allocatable, save :: encode(:,:)\n+  max_nb=2\n+  allocate( encode(1:1,1:max_nb))\n+  allocate( encode(1,1)%mask(1),encode(1,2)%mask(1))\n+  deallocate( encode(1,1)%mask,encode(1,2)%mask)\n+  allocate( encode(1,1)%mask(1),encode(1,1)%mask(1))  ! { dg-error \"also appears at\" }\n+end program main"}]}