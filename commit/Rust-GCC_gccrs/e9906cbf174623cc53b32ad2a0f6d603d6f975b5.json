{"sha": "e9906cbf174623cc53b32ad2a0f6d603d6f975b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk5MDZjYmYxNzQ2MjNjYzUzYjMyYWQyYTBmNmQ2MDNkNmY5NzViNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-01-03T15:42:23Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-01-03T15:42:23Z"}, "message": "s-tasini.ads, [...] (Undefer_Abortion): Handle case of Self_Id.Deferral_Level = 0.\n\n\t* s-tasini.ads, s-tasini.adb (Undefer_Abortion): Handle case of\n\tSelf_Id.Deferral_Level = 0.\n\t(Do_Pending_Action): Move this function to the spec.\n\n\t* s-tasren.adb (Selective_Wait [Terminate_Selected]): Call\n\tDo_Pending_Action explicitely when needed, in case we're using\n\tNo_Abort restrictions.\n\n\t* s-tassta.adb (Create_Task): If Abort is not allowed, reset the\n\tdeferral level since it will not get changed by the generated code.\n\tKeeping a default value of 1 would prevent some operations (e.g.\n\tselect or delay) to proceed successfully.\n\nFrom-SVN: r92851", "tree": {"sha": "a567f37d6620f7897e8162479e2d462ff14e3131", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a567f37d6620f7897e8162479e2d462ff14e3131"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9906cbf174623cc53b32ad2a0f6d603d6f975b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9906cbf174623cc53b32ad2a0f6d603d6f975b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9906cbf174623cc53b32ad2a0f6d603d6f975b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9906cbf174623cc53b32ad2a0f6d603d6f975b5/comments", "author": null, "committer": null, "parents": [{"sha": "b558cbe01bfc2ace6f0ca6a38637c5bc02d4ff00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b558cbe01bfc2ace6f0ca6a38637c5bc02d4ff00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b558cbe01bfc2ace6f0ca6a38637c5bc02d4ff00"}], "stats": {"total": 60, "additions": 53, "deletions": 7}, "files": [{"sha": "c2bee15dc0f8c9243972d73dba1950128c24bd85", "filename": "gcc/ada/s-tasini.adb", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9906cbf174623cc53b32ad2a0f6d603d6f975b5/gcc%2Fada%2Fs-tasini.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9906cbf174623cc53b32ad2a0f6d603d6f975b5/gcc%2Fada%2Fs-tasini.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasini.adb?ref=e9906cbf174623cc53b32ad2a0f6d603d6f975b5", "patch": "@@ -128,10 +128,6 @@ package body System.Tasking.Initialization is\n    --  Local Subprograms --\n    ------------------------\n \n-   procedure Do_Pending_Action (Self_ID : Task_Id);\n-   --  This is introduced to allow more efficient\n-   --  in-line expansion of Undefer_Abort.\n-\n    ----------------------------\n    -- Tasking Initialization --\n    ----------------------------\n@@ -777,8 +773,24 @@ package body System.Tasking.Initialization is\n       end if;\n \n       Self_ID := STPO.Self;\n-      pragma Assert (Self_ID.Deferral_Level > 0);\n \n+      if Self_ID.Deferral_Level = 0 then\n+\n+         --  In case there are different views on whether Abort is supported\n+         --  between the expander and the run time, we may end up with\n+         --  Self_ID.Deferral_Level being equal to zero, when called from\n+         --  the procedure created by the expander that corresponds to a\n+         --  task body.\n+\n+         --  In this case, there's nothing to be done\n+\n+         --  See related code in System.Tasking.Stages.Create_Task resetting\n+         --  Deferral_Level when System.Restrictions.Abort_Allowed is False.\n+\n+         return;\n+      end if;\n+\n+      pragma Assert (Self_ID.Deferral_Level > 0);\n       Self_ID.Deferral_Level := Self_ID.Deferral_Level - 1;\n \n       if Self_ID.Deferral_Level = 0 then"}, {"sha": "62bfc0c3463b7fdbed741ff44cff44ae13a7f809", "filename": "gcc/ada/s-tasini.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9906cbf174623cc53b32ad2a0f6d603d6f975b5/gcc%2Fada%2Fs-tasini.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9906cbf174623cc53b32ad2a0f6d603d6f975b5/gcc%2Fada%2Fs-tasini.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasini.ads?ref=e9906cbf174623cc53b32ad2a0f6d603d6f975b5", "patch": "@@ -131,6 +131,14 @@ package System.Tasking.Initialization is\n    --  ?????\n    --  Try to phase out all uses of the above versions.\n \n+   procedure Do_Pending_Action (Self_ID : Task_Id);\n+   --  Only call with no locks, and when Self_ID.Pending_Action = True\n+   --  Perform necessary pending actions (e.g. abortion, priority change).\n+   --  This procedure is usually called when needed as a result of\n+   --  calling Undefer_Abort, although in the case of e.g. No_Abort\n+   --  restriction, it can be necessary to force execution of pending\n+   --  actions.\n+\n    function Check_Abort_Status return Integer;\n    --  Returns Boolean'Pos (True) iff abort signal should raise\n    --  Standard.Abort_Signal. Only used by IRIX currently."}, {"sha": "9002eeeb03134da64c29fa56bdcf0a702d166e2f", "filename": "gcc/ada/s-tasren.adb", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9906cbf174623cc53b32ad2a0f6d603d6f975b5/gcc%2Fada%2Fs-tasren.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9906cbf174623cc53b32ad2a0f6d603d6f975b5/gcc%2Fada%2Fs-tasren.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasren.adb?ref=e9906cbf174623cc53b32ad2a0f6d603d6f975b5", "patch": "@@ -55,6 +55,7 @@ with System.Tasking.Initialization;\n --  used for Defer_Abort\n --           Undefer_Abort\n --           Poll_Base_Priority_Change\n+--           Do_Pending_Action\n \n with System.Tasking.Queuing;\n --  used for Enqueue\n@@ -972,8 +973,20 @@ package body System.Tasking.Rendezvous is\n                pragma Assert (Self_Id.Pending_ATC_Level = 0);\n                pragma Assert (Self_Id.Awake_Count = 0);\n \n-               --  Trust that it is OK to fall through.\n-               null;\n+               STPO.Unlock (Self_Id);\n+\n+               if Single_Lock then\n+                  Unlock_RTS;\n+               end if;\n+\n+               Index := Self_Id.Chosen_Index;\n+               Initialization.Undefer_Abort_Nestable (Self_Id);\n+\n+               if Self_Id.Pending_Action then\n+                  Initialization.Do_Pending_Action (Self_Id);\n+               end if;\n+\n+               return;\n \n             else\n                --  Self_Id.Common.Call and Self_Id.Chosen_Index"}, {"sha": "e09b6a56459f38d6ac2df829f4943f80768d8e06", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9906cbf174623cc53b32ad2a0f6d603d6f975b5/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9906cbf174623cc53b32ad2a0f6d603d6f975b5/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=e9906cbf174623cc53b32ad2a0f6d603d6f975b5", "patch": "@@ -103,6 +103,9 @@ with System.Secondary_Stack;\n with System.Storage_Elements;\n --  used for Storage_Array\n \n+with System.Restrictions;\n+--  used for Abort_Allowed\n+\n with System.Standard_Library;\n --  used for Exception_Trace\n \n@@ -614,6 +617,16 @@ package body System.Tasking.Stages is\n            (Storage_Error'Identity, \"Failed to initialize task\");\n       end if;\n \n+      if not System.Restrictions.Abort_Allowed then\n+\n+         --  If Abort is not allowed, reset the deferral level since it will\n+         --  not get changed by the generated code. Keeping a default value\n+         --  of one would prevent some operations (e.g. select or delay) to\n+         --  proceed successfully.\n+\n+         T.Deferral_Level := 0;\n+      end if;\n+\n       T.Master_of_Task := Master;\n       T.Master_Within := T.Master_of_Task + 1;\n "}]}