{"sha": "0d4a1197ba24d4f95b5c5f1face695806075a0c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ0YTExOTdiYTI0ZDRmOTViNWM1ZjFmYWNlNjk1ODA2MDc1YTBjNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T11:08:14Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:08:14Z"}, "message": "[1/77] Add an E_ prefix to mode names\n\nLater patches will add wrapper types for specific classes\nof mode.  E.g. SImode will be a scalar_int_mode, SFmode will be a\nscalar_float_mode, etc.  This patch prepares for that change by adding\nan E_ prefix to the mode enum values.  It also adds #defines that map\nthe unprefixed names to the prefixed names; e.g:\n\n  #define QImode E_QImode\n\nLater patches will change this to use things like scalar_int_mode\nwhere appropriate.\n\nThe patch continues to use enum values to initialise static data.\nThis isn't necessary for correctness, but it cuts down on the amount\nof load-time initialisation and shouldn't have any downsides.\n\nThe patch also changes things like:\n\n  cmp_mode == DImode ? DFmode : DImode\n\nto:\n\n  cmp_mode == DImode ? E_DFmode : E_DImode\n\nThis is because DImode and DFmode will eventually be different\nclasses, so the original ?: wouldn't be well-formed.\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* genmodes.c (mode_size_inline): Add an E_ prefix to mode names.\n\t(mode_nunits_inline): Likewise.\n\t(mode_inner_inline): Likewise.\n\t(mode_unit_size_inline): Likewise.\n\t(mode_unit_precision_inline): Likewise.\n\t(emit_insn_modes_h): Likewise.  Also emit a #define of the\n\tunprefixed name.\n\t(emit_mode_wider): Add an E_ prefix to mode names.\n\t(emit_mode_complex): Likewise.\n\t(emit_mode_inner): Likewise.\n\t(emit_mode_adjustments): Likewise.\n\t(emit_mode_int_n): Likewise.\n\t* config/aarch64/aarch64-builtins.c (v8qi_UP, v4hi_UP, v4hf_UP)\n\t(v2si_UP, v2sf_UP, v1df_UP, di_UP, df_UP, v16qi_UP, v8hi_UP, v8hf_UP)\n\t(v4si_UP, v4sf_UP, v2di_UP, v2df_UP, ti_UP, oi_UP, ci_UP, xi_UP)\n\t(si_UP, sf_UP, hi_UP, hf_UP, qi_UP): Likewise.\n\t(CRC32_BUILTIN, ENTRY): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_push_regs): Likewise.\n\t(aarch64_pop_regs): Likewise.\n\t(aarch64_process_components): Likewise.\n\t* config/alpha/alpha.c (alpha_emit_conditional_move): Likewise.\n\t* config/arm/arm-builtins.c (v8qi_UP, v4hi_UP, v4hf_UP, v2si_UP)\n\t(v2sf_UP, di_UP, v16qi_UP, v8hi_UP, v8hf_UP, v4si_UP, v4sf_UP)\n\t(v2di_UP, ti_UP, ei_UP, oi_UP, hf_UP, si_UP, void_UP): Likewise.\n\t* config/arm/arm.c (arm_init_libfuncs): Likewise.\n\t* config/i386/i386-builtin-types.awk (ix86_builtin_type_vect_mode):\n\tLikewise.\n\t* config/i386/i386-builtin.def (pcmpestr): Likewise.\n\t(pcmpistr): Likewise.\n\t* config/microblaze/microblaze.c (double_memory_operand): Likewise.\n\t* config/mmix/mmix.c (mmix_output_condition): Likewise.\n\t* config/powerpcspe/powerpcspe.c (rs6000_init_hard_regno_mode_ok):\n\tLikewise.\n\t* config/rl78/rl78.c (mduc_regs): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok): Likewise.\n\t(htm_expand_builtin): Likewise.\n\t* config/sh/sh.h (REGISTER_NATURAL_MODE): Likewise.\n\t* config/sparc/sparc.c (emit_save_or_restore_regs): Likewise.\n\t* config/xtensa/xtensa.c (print_operand): Likewise.\n\t* expmed.h (NUM_MODE_PARTIAL_INT): Likewise.\n\t(NUM_MODE_VECTOR_INT): Likewise.\n\t* genoutput.c (null_operand): Likewise.\n\t(output_operand_data): Likewise.\n\t* genrecog.c (print_parameter_value): Likewise.\n\t* lra.c (debug_operand_data): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251452", "tree": {"sha": "476ff68998ea4b53577993e27e03100cf3381f16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/476ff68998ea4b53577993e27e03100cf3381f16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d4a1197ba24d4f95b5c5f1face695806075a0c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d4a1197ba24d4f95b5c5f1face695806075a0c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d4a1197ba24d4f95b5c5f1face695806075a0c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d4a1197ba24d4f95b5c5f1face695806075a0c6/comments", "author": null, "committer": null, "parents": [{"sha": "8afacf2c365afa9c3b084728d3bbc5d1fa2fb69e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8afacf2c365afa9c3b084728d3bbc5d1fa2fb69e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8afacf2c365afa9c3b084728d3bbc5d1fa2fb69e"}], "stats": {"total": 432, "additions": 243, "deletions": 189}, "files": [{"sha": "b627f49c2ba87f5cbe09a0045c9cfc71a0f4b16e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d4a1197ba24d4f95b5c5f1face695806075a0c6", "patch": "@@ -1,3 +1,53 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* genmodes.c (mode_size_inline): Add an E_ prefix to mode names.\n+\t(mode_nunits_inline): Likewise.\n+\t(mode_inner_inline): Likewise.\n+\t(mode_unit_size_inline): Likewise.\n+\t(mode_unit_precision_inline): Likewise.\n+\t(emit_insn_modes_h): Likewise.  Also emit a #define of the\n+\tunprefixed name.\n+\t(emit_mode_wider): Add an E_ prefix to mode names.\n+\t(emit_mode_complex): Likewise.\n+\t(emit_mode_inner): Likewise.\n+\t(emit_mode_adjustments): Likewise.\n+\t(emit_mode_int_n): Likewise.\n+\t* config/aarch64/aarch64-builtins.c (v8qi_UP, v4hi_UP, v4hf_UP)\n+\t(v2si_UP, v2sf_UP, v1df_UP, di_UP, df_UP, v16qi_UP, v8hi_UP, v8hf_UP)\n+\t(v4si_UP, v4sf_UP, v2di_UP, v2df_UP, ti_UP, oi_UP, ci_UP, xi_UP)\n+\t(si_UP, sf_UP, hi_UP, hf_UP, qi_UP): Likewise.\n+\t(CRC32_BUILTIN, ENTRY): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_push_regs): Likewise.\n+\t(aarch64_pop_regs): Likewise.\n+\t(aarch64_process_components): Likewise.\n+\t* config/alpha/alpha.c (alpha_emit_conditional_move): Likewise.\n+\t* config/arm/arm-builtins.c (v8qi_UP, v4hi_UP, v4hf_UP, v2si_UP)\n+\t(v2sf_UP, di_UP, v16qi_UP, v8hi_UP, v8hf_UP, v4si_UP, v4sf_UP)\n+\t(v2di_UP, ti_UP, ei_UP, oi_UP, hf_UP, si_UP, void_UP): Likewise.\n+\t* config/arm/arm.c (arm_init_libfuncs): Likewise.\n+\t* config/i386/i386-builtin-types.awk (ix86_builtin_type_vect_mode):\n+\tLikewise.\n+\t* config/i386/i386-builtin.def (pcmpestr): Likewise.\n+\t(pcmpistr): Likewise.\n+\t* config/microblaze/microblaze.c (double_memory_operand): Likewise.\n+\t* config/mmix/mmix.c (mmix_output_condition): Likewise.\n+\t* config/powerpcspe/powerpcspe.c (rs6000_init_hard_regno_mode_ok):\n+\tLikewise.\n+\t* config/rl78/rl78.c (mduc_regs): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok): Likewise.\n+\t(htm_expand_builtin): Likewise.\n+\t* config/sh/sh.h (REGISTER_NATURAL_MODE): Likewise.\n+\t* config/sparc/sparc.c (emit_save_or_restore_regs): Likewise.\n+\t* config/xtensa/xtensa.c (print_operand): Likewise.\n+\t* expmed.h (NUM_MODE_PARTIAL_INT): Likewise.\n+\t(NUM_MODE_VECTOR_INT): Likewise.\n+\t* genoutput.c (null_operand): Likewise.\n+\t(output_operand_data): Likewise.\n+\t* genrecog.c (print_parameter_value): Likewise.\n+\t* lra.c (debug_operand_data): Likewise.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* dwarf2out.c (scompare_loc_descriptor_wide)"}, {"sha": "ae9a339f73ae4079bed95c4b2dbe407ce1ca961d", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=0d4a1197ba24d4f95b5c5f1face695806075a0c6", "patch": "@@ -41,30 +41,30 @@\n #include \"gimple-iterator.h\"\n #include \"case-cfn-macros.h\"\n \n-#define v8qi_UP  V8QImode\n-#define v4hi_UP  V4HImode\n-#define v4hf_UP  V4HFmode\n-#define v2si_UP  V2SImode\n-#define v2sf_UP  V2SFmode\n-#define v1df_UP  V1DFmode\n-#define di_UP    DImode\n-#define df_UP    DFmode\n-#define v16qi_UP V16QImode\n-#define v8hi_UP  V8HImode\n-#define v8hf_UP  V8HFmode\n-#define v4si_UP  V4SImode\n-#define v4sf_UP  V4SFmode\n-#define v2di_UP  V2DImode\n-#define v2df_UP  V2DFmode\n-#define ti_UP\t TImode\n-#define oi_UP\t OImode\n-#define ci_UP\t CImode\n-#define xi_UP\t XImode\n-#define si_UP    SImode\n-#define sf_UP    SFmode\n-#define hi_UP    HImode\n-#define hf_UP    HFmode\n-#define qi_UP    QImode\n+#define v8qi_UP  E_V8QImode\n+#define v4hi_UP  E_V4HImode\n+#define v4hf_UP  E_V4HFmode\n+#define v2si_UP  E_V2SImode\n+#define v2sf_UP  E_V2SFmode\n+#define v1df_UP  E_V1DFmode\n+#define di_UP    E_DImode\n+#define df_UP    E_DFmode\n+#define v16qi_UP E_V16QImode\n+#define v8hi_UP  E_V8HImode\n+#define v8hf_UP  E_V8HFmode\n+#define v4si_UP  E_V4SImode\n+#define v4sf_UP  E_V4SFmode\n+#define v2di_UP  E_V2DImode\n+#define v2df_UP  E_V2DFmode\n+#define ti_UP\t E_TImode\n+#define oi_UP\t E_OImode\n+#define ci_UP\t E_CImode\n+#define xi_UP\t E_XImode\n+#define si_UP    E_SImode\n+#define sf_UP    E_SFmode\n+#define hi_UP    E_HImode\n+#define hf_UP    E_HFmode\n+#define qi_UP    E_QImode\n #define UP(X) X##_UP\n \n #define SIMD_MAX_BUILTIN_ARGS 5\n@@ -385,7 +385,7 @@ enum aarch64_builtins\n \n #undef CRC32_BUILTIN\n #define CRC32_BUILTIN(N, M) \\\n-  {\"__builtin_aarch64_\"#N, M##mode, CODE_FOR_aarch64_##N, AARCH64_BUILTIN_##N},\n+  {\"__builtin_aarch64_\"#N, E_##M##mode, CODE_FOR_aarch64_##N, AARCH64_BUILTIN_##N},\n \n static aarch64_crc_builtin_datum aarch64_crc_builtin_data[] = {\n   AARCH64_CRC32_BUILTINS\n@@ -464,7 +464,7 @@ struct aarch64_simd_type_info\n };\n \n #define ENTRY(E, M, Q, G)  \\\n-  {E, \"__\" #E, #G \"__\" #E, NULL_TREE, NULL_TREE, M##mode, qualifier_##Q},\n+  {E, \"__\" #E, #G \"__\" #E, NULL_TREE, NULL_TREE, E_##M##mode, qualifier_##Q},\n static struct aarch64_simd_type_info aarch64_simd_types [] = {\n #include \"aarch64-simd-builtin-types.def\"\n };"}, {"sha": "64c6a7b07334e58ec93d0c5ce5ba571f91ac1616", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=0d4a1197ba24d4f95b5c5f1face695806075a0c6", "patch": "@@ -3106,7 +3106,7 @@ static void\n aarch64_push_regs (unsigned regno1, unsigned regno2, HOST_WIDE_INT adjustment)\n {\n   rtx_insn *insn;\n-  machine_mode mode = (regno1 <= R30_REGNUM) ? DImode : DFmode;\n+  machine_mode mode = (regno1 <= R30_REGNUM) ? E_DImode : E_DFmode;\n \n   if (regno2 == INVALID_REGNUM)\n     return aarch64_pushwb_single_reg (mode, regno1, adjustment);\n@@ -3149,7 +3149,7 @@ static void\n aarch64_pop_regs (unsigned regno1, unsigned regno2, HOST_WIDE_INT adjustment,\n \t\t  rtx *cfi_ops)\n {\n-  machine_mode mode = (regno1 <= R30_REGNUM) ? DImode : DFmode;\n+  machine_mode mode = (regno1 <= R30_REGNUM) ? E_DImode : E_DFmode;\n   rtx reg1 = gen_rtx_REG (mode, regno1);\n \n   *cfi_ops = alloc_reg_note (REG_CFA_RESTORE, reg1, *cfi_ops);\n@@ -3483,7 +3483,7 @@ aarch64_process_components (sbitmap components, bool prologue_p)\n     {\n       /* AAPCS64 section 5.1.2 requires only the bottom 64 bits to be saved\n \t so DFmode for the vector registers is enough.  */\n-      machine_mode mode = GP_REGNUM_P (regno) ? DImode : DFmode;\n+      machine_mode mode = GP_REGNUM_P (regno) ? E_DImode : E_DFmode;\n       rtx reg = gen_rtx_REG (mode, regno);\n       HOST_WIDE_INT offset = cfun->machine->frame.reg_offset[regno];\n       if (!frame_pointer_needed)"}, {"sha": "b2875eaddfa2b4417c13cd57b810d9c0d6fd7664", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=0d4a1197ba24d4f95b5c5f1face695806075a0c6", "patch": "@@ -2783,7 +2783,7 @@ alpha_emit_conditional_move (rtx cmp, machine_mode mode)\n       emit_insn (gen_rtx_SET (tem, gen_rtx_fmt_ee (cmp_code, cmp_mode,\n \t\t\t\t\t\t   op0, op1)));\n \n-      cmp_mode = cmp_mode == DImode ? DFmode : DImode;\n+      cmp_mode = cmp_mode == DImode ? E_DFmode : E_DImode;\n       op0 = gen_lowpart (cmp_mode, tem);\n       op1 = CONST0_RTX (cmp_mode);\n       cmp = gen_rtx_fmt_ee (code, VOIDmode, op0, op1);"}, {"sha": "dc1248fc972e30b8690219dff66256b2b2cc62bb", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=0d4a1197ba24d4f95b5c5f1face695806075a0c6", "patch": "@@ -255,24 +255,24 @@ arm_storestruct_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n       qualifier_none, qualifier_struct_load_store_lane_index };\n #define STORE1LANE_QUALIFIERS (arm_storestruct_lane_qualifiers)\n \n-#define v8qi_UP  V8QImode\n-#define v4hi_UP  V4HImode\n-#define v4hf_UP  V4HFmode\n-#define v2si_UP  V2SImode\n-#define v2sf_UP  V2SFmode\n-#define di_UP    DImode\n-#define v16qi_UP V16QImode\n-#define v8hi_UP  V8HImode\n-#define v8hf_UP  V8HFmode\n-#define v4si_UP  V4SImode\n-#define v4sf_UP  V4SFmode\n-#define v2di_UP  V2DImode\n-#define ti_UP\t TImode\n-#define ei_UP\t EImode\n-#define oi_UP\t OImode\n-#define hf_UP\t HFmode\n-#define si_UP\t SImode\n-#define void_UP\t VOIDmode\n+#define v8qi_UP  E_V8QImode\n+#define v4hi_UP  E_V4HImode\n+#define v4hf_UP  E_V4HFmode\n+#define v2si_UP  E_V2SImode\n+#define v2sf_UP  E_V2SFmode\n+#define di_UP    E_DImode\n+#define v16qi_UP E_V16QImode\n+#define v8hi_UP  E_V8HImode\n+#define v8hf_UP  E_V8HFmode\n+#define v4si_UP  E_V4SImode\n+#define v4sf_UP  E_V4SFmode\n+#define v2di_UP  E_V2DImode\n+#define ti_UP\t E_TImode\n+#define ei_UP\t E_EImode\n+#define oi_UP\t E_OImode\n+#define hf_UP\t E_HFmode\n+#define si_UP\t E_SImode\n+#define void_UP\t E_VOIDmode\n \n #define UP(X) X##_UP\n "}, {"sha": "764b0bb6fb3dc3a2ca57bccc56bfafe330d19442", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=0d4a1197ba24d4f95b5c5f1face695806075a0c6", "patch": "@@ -2553,52 +2553,52 @@ arm_init_libfuncs (void)\n   {\n     const arm_fixed_mode_set fixed_arith_modes[] =\n       {\n-\t{ QQmode, \"qq\" },\n-\t{ UQQmode, \"uqq\" },\n-\t{ HQmode, \"hq\" },\n-\t{ UHQmode, \"uhq\" },\n-\t{ SQmode, \"sq\" },\n-\t{ USQmode, \"usq\" },\n-\t{ DQmode, \"dq\" },\n-\t{ UDQmode, \"udq\" },\n-\t{ TQmode, \"tq\" },\n-\t{ UTQmode, \"utq\" },\n-\t{ HAmode, \"ha\" },\n-\t{ UHAmode, \"uha\" },\n-\t{ SAmode, \"sa\" },\n-\t{ USAmode, \"usa\" },\n-\t{ DAmode, \"da\" },\n-\t{ UDAmode, \"uda\" },\n-\t{ TAmode, \"ta\" },\n-\t{ UTAmode, \"uta\" }\n+\t{ E_QQmode, \"qq\" },\n+\t{ E_UQQmode, \"uqq\" },\n+\t{ E_HQmode, \"hq\" },\n+\t{ E_UHQmode, \"uhq\" },\n+\t{ E_SQmode, \"sq\" },\n+\t{ E_USQmode, \"usq\" },\n+\t{ E_DQmode, \"dq\" },\n+\t{ E_UDQmode, \"udq\" },\n+\t{ E_TQmode, \"tq\" },\n+\t{ E_UTQmode, \"utq\" },\n+\t{ E_HAmode, \"ha\" },\n+\t{ E_UHAmode, \"uha\" },\n+\t{ E_SAmode, \"sa\" },\n+\t{ E_USAmode, \"usa\" },\n+\t{ E_DAmode, \"da\" },\n+\t{ E_UDAmode, \"uda\" },\n+\t{ E_TAmode, \"ta\" },\n+\t{ E_UTAmode, \"uta\" }\n       };\n     const arm_fixed_mode_set fixed_conv_modes[] =\n       {\n-\t{ QQmode, \"qq\" },\n-\t{ UQQmode, \"uqq\" },\n-\t{ HQmode, \"hq\" },\n-\t{ UHQmode, \"uhq\" },\n-\t{ SQmode, \"sq\" },\n-\t{ USQmode, \"usq\" },\n-\t{ DQmode, \"dq\" },\n-\t{ UDQmode, \"udq\" },\n-\t{ TQmode, \"tq\" },\n-\t{ UTQmode, \"utq\" },\n-\t{ HAmode, \"ha\" },\n-\t{ UHAmode, \"uha\" },\n-\t{ SAmode, \"sa\" },\n-\t{ USAmode, \"usa\" },\n-\t{ DAmode, \"da\" },\n-\t{ UDAmode, \"uda\" },\n-\t{ TAmode, \"ta\" },\n-\t{ UTAmode, \"uta\" },\n-\t{ QImode, \"qi\" },\n-\t{ HImode, \"hi\" },\n-\t{ SImode, \"si\" },\n-\t{ DImode, \"di\" },\n-\t{ TImode, \"ti\" },\n-\t{ SFmode, \"sf\" },\n-\t{ DFmode, \"df\" }\n+\t{ E_QQmode, \"qq\" },\n+\t{ E_UQQmode, \"uqq\" },\n+\t{ E_HQmode, \"hq\" },\n+\t{ E_UHQmode, \"uhq\" },\n+\t{ E_SQmode, \"sq\" },\n+\t{ E_USQmode, \"usq\" },\n+\t{ E_DQmode, \"dq\" },\n+\t{ E_UDQmode, \"udq\" },\n+\t{ E_TQmode, \"tq\" },\n+\t{ E_UTQmode, \"utq\" },\n+\t{ E_HAmode, \"ha\" },\n+\t{ E_UHAmode, \"uha\" },\n+\t{ E_SAmode, \"sa\" },\n+\t{ E_USAmode, \"usa\" },\n+\t{ E_DAmode, \"da\" },\n+\t{ E_UDAmode, \"uda\" },\n+\t{ E_TAmode, \"ta\" },\n+\t{ E_UTAmode, \"uta\" },\n+\t{ E_QImode, \"qi\" },\n+\t{ E_HImode, \"hi\" },\n+\t{ E_SImode, \"si\" },\n+\t{ E_DImode, \"di\" },\n+\t{ E_TImode, \"ti\" },\n+\t{ E_SFmode, \"sf\" },\n+\t{ E_DFmode, \"df\" }\n       };\n     unsigned int i, j;\n "}, {"sha": "3b61af388b21963ddb3cf6369e3c987c1fec530f", "filename": "gcc/config/i386/i386-builtin-types.awk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.awk?ref=0d4a1197ba24d4f95b5c5f1face695806075a0c6", "patch": "@@ -187,7 +187,7 @@ END {\n \t    printf \",\\n  \"\n \telse\n \t    printf \", \"\n-\tprintf vect_mode[i] \"mode\"\n+\tprintf \"E_\" vect_mode[i] \"mode\"\n     }\n     print \"\\n};\\n\\n\"\n "}, {"sha": "7ff1bb1a7e04e50018a0248274880ea004399127", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=0d4a1197ba24d4f95b5c5f1face695806075a0c6", "patch": "@@ -66,23 +66,23 @@ BDESC_END (COMI, PCMPESTR)\n BDESC_FIRST (pcmpestr, PCMPESTR,\n        OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestri128\", IX86_BUILTIN_PCMPESTRI128, UNKNOWN, 0)\n BDESC (OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestrm128\", IX86_BUILTIN_PCMPESTRM128, UNKNOWN, 0)\n-BDESC (OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestria128\", IX86_BUILTIN_PCMPESTRA128, UNKNOWN, (int) CCAmode)\n-BDESC (OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestric128\", IX86_BUILTIN_PCMPESTRC128, UNKNOWN, (int) CCCmode)\n-BDESC (OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestrio128\", IX86_BUILTIN_PCMPESTRO128, UNKNOWN, (int) CCOmode)\n-BDESC (OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestris128\", IX86_BUILTIN_PCMPESTRS128, UNKNOWN, (int) CCSmode)\n-BDESC (OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestriz128\", IX86_BUILTIN_PCMPESTRZ128, UNKNOWN, (int) CCZmode)\n+BDESC (OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestria128\", IX86_BUILTIN_PCMPESTRA128, UNKNOWN, (int) E_CCAmode)\n+BDESC (OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestric128\", IX86_BUILTIN_PCMPESTRC128, UNKNOWN, (int) E_CCCmode)\n+BDESC (OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestrio128\", IX86_BUILTIN_PCMPESTRO128, UNKNOWN, (int) E_CCOmode)\n+BDESC (OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestris128\", IX86_BUILTIN_PCMPESTRS128, UNKNOWN, (int) E_CCSmode)\n+BDESC (OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestriz128\", IX86_BUILTIN_PCMPESTRZ128, UNKNOWN, (int) E_CCZmode)\n \n BDESC_END (PCMPESTR, PCMPISTR)\n \n /* SSE4.2 */\n BDESC_FIRST (pcmpistr, PCMPISTR,\n        OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistri128\", IX86_BUILTIN_PCMPISTRI128, UNKNOWN, 0)\n BDESC (OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistrm128\", IX86_BUILTIN_PCMPISTRM128, UNKNOWN, 0)\n-BDESC (OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistria128\", IX86_BUILTIN_PCMPISTRA128, UNKNOWN, (int) CCAmode)\n-BDESC (OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistric128\", IX86_BUILTIN_PCMPISTRC128, UNKNOWN, (int) CCCmode)\n-BDESC (OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistrio128\", IX86_BUILTIN_PCMPISTRO128, UNKNOWN, (int) CCOmode)\n-BDESC (OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistris128\", IX86_BUILTIN_PCMPISTRS128, UNKNOWN, (int) CCSmode)\n-BDESC (OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistriz128\", IX86_BUILTIN_PCMPISTRZ128, UNKNOWN, (int) CCZmode)\n+BDESC (OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistria128\", IX86_BUILTIN_PCMPISTRA128, UNKNOWN, (int) E_CCAmode)\n+BDESC (OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistric128\", IX86_BUILTIN_PCMPISTRC128, UNKNOWN, (int) E_CCCmode)\n+BDESC (OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistrio128\", IX86_BUILTIN_PCMPISTRO128, UNKNOWN, (int) E_CCOmode)\n+BDESC (OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistris128\", IX86_BUILTIN_PCMPISTRS128, UNKNOWN, (int) E_CCSmode)\n+BDESC (OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistriz128\", IX86_BUILTIN_PCMPISTRZ128, UNKNOWN, (int) E_CCZmode)\n \n BDESC_END (PCMPISTR, SPECIAL_ARGS)\n "}, {"sha": "0a5ae604ae3743af5484bed4f0aae635b0956db4", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=0d4a1197ba24d4f95b5c5f1face695806075a0c6", "patch": "@@ -376,7 +376,7 @@ double_memory_operand (rtx op, machine_mode mode)\n     return 1;\n \n   return memory_address_p ((GET_MODE_CLASS (mode) == MODE_INT\n-\t\t\t    ? SImode : SFmode),\n+\t\t\t    ? E_SImode : E_SFmode),\n \t\t\t   plus_constant (Pmode, addr, 4));\n }\n "}, {"sha": "90a465160c1f4a212f6fc238ea8c5c51190eacfc", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=0d4a1197ba24d4f95b5c5f1face695806075a0c6", "patch": "@@ -2648,12 +2648,12 @@ mmix_output_condition (FILE *stream, const_rtx x, int reversed)\n #undef CCEND\n \n   static const struct cc_type_conv cc_convs[]\n-    = {{CC_FUNmode, cc_fun_convs},\n-       {CC_FPmode, cc_fp_convs},\n-       {CC_FPEQmode, cc_fpeq_convs},\n-       {CC_UNSmode, cc_uns_convs},\n-       {CCmode, cc_signed_convs},\n-       {DImode, cc_di_convs}};\n+    = {{E_CC_FUNmode, cc_fun_convs},\n+       {E_CC_FPmode, cc_fp_convs},\n+       {E_CC_FPEQmode, cc_fpeq_convs},\n+       {E_CC_UNSmode, cc_uns_convs},\n+       {E_CCmode, cc_signed_convs},\n+       {E_DImode, cc_di_convs}};\n \n   size_t i;\n   int j;"}, {"sha": "4cb10d1cb4bdcde8d75480d5a6a0df5620aadb38", "filename": "gcc/config/powerpcspe/powerpcspe.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c?ref=0d4a1197ba24d4f95b5c5f1face695806075a0c6", "patch": "@@ -3544,67 +3544,67 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n       };\n \n       static const struct fuse_insns addis_insns[] = {\n-\t{ SFmode, DImode, RELOAD_REG_FPR,\n+\t{ E_SFmode, E_DImode, RELOAD_REG_FPR,\n \t  CODE_FOR_fusion_vsx_di_sf_load,\n \t  CODE_FOR_fusion_vsx_di_sf_store },\n \n-\t{ SFmode, SImode, RELOAD_REG_FPR,\n+\t{ E_SFmode, E_SImode, RELOAD_REG_FPR,\n \t  CODE_FOR_fusion_vsx_si_sf_load,\n \t  CODE_FOR_fusion_vsx_si_sf_store },\n \n-\t{ DFmode, DImode, RELOAD_REG_FPR,\n+\t{ E_DFmode, E_DImode, RELOAD_REG_FPR,\n \t  CODE_FOR_fusion_vsx_di_df_load,\n \t  CODE_FOR_fusion_vsx_di_df_store },\n \n-\t{ DFmode, SImode, RELOAD_REG_FPR,\n+\t{ E_DFmode, E_SImode, RELOAD_REG_FPR,\n \t  CODE_FOR_fusion_vsx_si_df_load,\n \t  CODE_FOR_fusion_vsx_si_df_store },\n \n-\t{ DImode, DImode, RELOAD_REG_FPR,\n+\t{ E_DImode, E_DImode, RELOAD_REG_FPR,\n \t  CODE_FOR_fusion_vsx_di_di_load,\n \t  CODE_FOR_fusion_vsx_di_di_store },\n \n-\t{ DImode, SImode, RELOAD_REG_FPR,\n+\t{ E_DImode, E_SImode, RELOAD_REG_FPR,\n \t  CODE_FOR_fusion_vsx_si_di_load,\n \t  CODE_FOR_fusion_vsx_si_di_store },\n \n-\t{ QImode, DImode, RELOAD_REG_GPR,\n+\t{ E_QImode, E_DImode, RELOAD_REG_GPR,\n \t  CODE_FOR_fusion_gpr_di_qi_load,\n \t  CODE_FOR_fusion_gpr_di_qi_store },\n \n-\t{ QImode, SImode, RELOAD_REG_GPR,\n+\t{ E_QImode, E_SImode, RELOAD_REG_GPR,\n \t  CODE_FOR_fusion_gpr_si_qi_load,\n \t  CODE_FOR_fusion_gpr_si_qi_store },\n \n-\t{ HImode, DImode, RELOAD_REG_GPR,\n+\t{ E_HImode, E_DImode, RELOAD_REG_GPR,\n \t  CODE_FOR_fusion_gpr_di_hi_load,\n \t  CODE_FOR_fusion_gpr_di_hi_store },\n \n-\t{ HImode, SImode, RELOAD_REG_GPR,\n+\t{ E_HImode, E_SImode, RELOAD_REG_GPR,\n \t  CODE_FOR_fusion_gpr_si_hi_load,\n \t  CODE_FOR_fusion_gpr_si_hi_store },\n \n-\t{ SImode, DImode, RELOAD_REG_GPR,\n+\t{ E_SImode, E_DImode, RELOAD_REG_GPR,\n \t  CODE_FOR_fusion_gpr_di_si_load,\n \t  CODE_FOR_fusion_gpr_di_si_store },\n \n-\t{ SImode, SImode, RELOAD_REG_GPR,\n+\t{ E_SImode, E_SImode, RELOAD_REG_GPR,\n \t  CODE_FOR_fusion_gpr_si_si_load,\n \t  CODE_FOR_fusion_gpr_si_si_store },\n \n-\t{ SFmode, DImode, RELOAD_REG_GPR,\n+\t{ E_SFmode, E_DImode, RELOAD_REG_GPR,\n \t  CODE_FOR_fusion_gpr_di_sf_load,\n \t  CODE_FOR_fusion_gpr_di_sf_store },\n \n-\t{ SFmode, SImode, RELOAD_REG_GPR,\n+\t{ E_SFmode, E_SImode, RELOAD_REG_GPR,\n \t  CODE_FOR_fusion_gpr_si_sf_load,\n \t  CODE_FOR_fusion_gpr_si_sf_store },\n \n-\t{ DImode, DImode, RELOAD_REG_GPR,\n+\t{ E_DImode, E_DImode, RELOAD_REG_GPR,\n \t  CODE_FOR_fusion_gpr_di_di_load,\n \t  CODE_FOR_fusion_gpr_di_di_store },\n \n-\t{ DFmode, DImode, RELOAD_REG_GPR,\n+\t{ E_DFmode, E_DImode, RELOAD_REG_GPR,\n \t  CODE_FOR_fusion_gpr_di_df_load,\n \t  CODE_FOR_fusion_gpr_di_df_store },\n       };\n@@ -15457,7 +15457,7 @@ htm_expand_builtin (tree exp, rtx target, bool * expandedp)\n \n \tif (nonvoid)\n \t  {\n-\t    machine_mode tmode = (uses_spr) ? insn_op->mode : SImode;\n+\t    machine_mode tmode = (uses_spr) ? insn_op->mode : E_SImode;\n \t    if (!target\n \t\t|| GET_MODE (target) != tmode\n \t\t|| (uses_spr && !(*insn_op->predicate) (target, tmode)))"}, {"sha": "01e0591c5fe3ed46532ba3af9929b5b78c0ed61d", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=0d4a1197ba24d4f95b5c5f1face695806075a0c6", "patch": "@@ -87,12 +87,12 @@ struct mduc_reg_type\n \n struct mduc_reg_type  mduc_regs[] =\n {\n-  {0xf00e8, QImode},\n-  {0xffff0, HImode},\n-  {0xffff2, HImode},\n-  {0xf2224, HImode},\n-  {0xf00e0, HImode},\n-  {0xf00e2, HImode}\n+  {0xf00e8, E_QImode},\n+  {0xffff0, E_HImode},\n+  {0xffff2, E_HImode},\n+  {0xf2224, E_HImode},\n+  {0xf00e0, E_HImode},\n+  {0xf00e2, E_HImode}\n };\n \n struct GTY(()) machine_function"}, {"sha": "92cd0b4c79ee29c3ae2cd1d0bdc821dcc7b2a98a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=0d4a1197ba24d4f95b5c5f1face695806075a0c6", "patch": "@@ -3460,67 +3460,67 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n       };\n \n       static const struct fuse_insns addis_insns[] = {\n-\t{ SFmode, DImode, RELOAD_REG_FPR,\n+\t{ E_SFmode, E_DImode, RELOAD_REG_FPR,\n \t  CODE_FOR_fusion_vsx_di_sf_load,\n \t  CODE_FOR_fusion_vsx_di_sf_store },\n \n-\t{ SFmode, SImode, RELOAD_REG_FPR,\n+\t{ E_SFmode, E_SImode, RELOAD_REG_FPR,\n \t  CODE_FOR_fusion_vsx_si_sf_load,\n \t  CODE_FOR_fusion_vsx_si_sf_store },\n \n-\t{ DFmode, DImode, RELOAD_REG_FPR,\n+\t{ E_DFmode, E_DImode, RELOAD_REG_FPR,\n \t  CODE_FOR_fusion_vsx_di_df_load,\n \t  CODE_FOR_fusion_vsx_di_df_store },\n \n-\t{ DFmode, SImode, RELOAD_REG_FPR,\n+\t{ E_DFmode, E_SImode, RELOAD_REG_FPR,\n \t  CODE_FOR_fusion_vsx_si_df_load,\n \t  CODE_FOR_fusion_vsx_si_df_store },\n \n-\t{ DImode, DImode, RELOAD_REG_FPR,\n+\t{ E_DImode, E_DImode, RELOAD_REG_FPR,\n \t  CODE_FOR_fusion_vsx_di_di_load,\n \t  CODE_FOR_fusion_vsx_di_di_store },\n \n-\t{ DImode, SImode, RELOAD_REG_FPR,\n+\t{ E_DImode, E_SImode, RELOAD_REG_FPR,\n \t  CODE_FOR_fusion_vsx_si_di_load,\n \t  CODE_FOR_fusion_vsx_si_di_store },\n \n-\t{ QImode, DImode, RELOAD_REG_GPR,\n+\t{ E_QImode, E_DImode, RELOAD_REG_GPR,\n \t  CODE_FOR_fusion_gpr_di_qi_load,\n \t  CODE_FOR_fusion_gpr_di_qi_store },\n \n-\t{ QImode, SImode, RELOAD_REG_GPR,\n+\t{ E_QImode, E_SImode, RELOAD_REG_GPR,\n \t  CODE_FOR_fusion_gpr_si_qi_load,\n \t  CODE_FOR_fusion_gpr_si_qi_store },\n \n-\t{ HImode, DImode, RELOAD_REG_GPR,\n+\t{ E_HImode, E_DImode, RELOAD_REG_GPR,\n \t  CODE_FOR_fusion_gpr_di_hi_load,\n \t  CODE_FOR_fusion_gpr_di_hi_store },\n \n-\t{ HImode, SImode, RELOAD_REG_GPR,\n+\t{ E_HImode, E_SImode, RELOAD_REG_GPR,\n \t  CODE_FOR_fusion_gpr_si_hi_load,\n \t  CODE_FOR_fusion_gpr_si_hi_store },\n \n-\t{ SImode, DImode, RELOAD_REG_GPR,\n+\t{ E_SImode, E_DImode, RELOAD_REG_GPR,\n \t  CODE_FOR_fusion_gpr_di_si_load,\n \t  CODE_FOR_fusion_gpr_di_si_store },\n \n-\t{ SImode, SImode, RELOAD_REG_GPR,\n+\t{ E_SImode, E_SImode, RELOAD_REG_GPR,\n \t  CODE_FOR_fusion_gpr_si_si_load,\n \t  CODE_FOR_fusion_gpr_si_si_store },\n \n-\t{ SFmode, DImode, RELOAD_REG_GPR,\n+\t{ E_SFmode, E_DImode, RELOAD_REG_GPR,\n \t  CODE_FOR_fusion_gpr_di_sf_load,\n \t  CODE_FOR_fusion_gpr_di_sf_store },\n \n-\t{ SFmode, SImode, RELOAD_REG_GPR,\n+\t{ E_SFmode, E_SImode, RELOAD_REG_GPR,\n \t  CODE_FOR_fusion_gpr_si_sf_load,\n \t  CODE_FOR_fusion_gpr_si_sf_store },\n \n-\t{ DImode, DImode, RELOAD_REG_GPR,\n+\t{ E_DImode, E_DImode, RELOAD_REG_GPR,\n \t  CODE_FOR_fusion_gpr_di_di_load,\n \t  CODE_FOR_fusion_gpr_di_di_store },\n \n-\t{ DFmode, DImode, RELOAD_REG_GPR,\n+\t{ E_DFmode, E_DImode, RELOAD_REG_GPR,\n \t  CODE_FOR_fusion_gpr_di_df_load,\n \t  CODE_FOR_fusion_gpr_di_df_store },\n       };\n@@ -14693,7 +14693,7 @@ htm_expand_builtin (tree exp, rtx target, bool * expandedp)\n \n \tif (nonvoid)\n \t  {\n-\t    machine_mode tmode = (uses_spr) ? insn_op->mode : SImode;\n+\t    machine_mode tmode = (uses_spr) ? insn_op->mode : E_SImode;\n \t    if (!target\n \t\t|| GET_MODE (target) != tmode\n \t\t|| (uses_spr && !(*insn_op->predicate) (target, tmode)))"}, {"sha": "d90e8574ac9c1383c3ff2e9530da54bf2a1345e3", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=0d4a1197ba24d4f95b5c5f1face695806075a0c6", "patch": "@@ -689,7 +689,8 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n /* The mode that should be generally used to store a register by\n    itself in the stack, or to load it back.  */\n #define REGISTER_NATURAL_MODE(REGNO) \\\n-  (FP_REGISTER_P (REGNO) ? SFmode : XD_REGISTER_P (REGNO) ? DFmode : SImode)\n+  (FP_REGISTER_P (REGNO) ? E_SFmode \\\n+   : XD_REGISTER_P (REGNO) ? E_DFmode : E_SImode)\n \n \n #define FIRST_PSEUDO_REGISTER 156"}, {"sha": "5885288796a0401fb90a077e739d2474ed169478", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=0d4a1197ba24d4f95b5c5f1face695806075a0c6", "patch": "@@ -5512,17 +5512,17 @@ emit_save_or_restore_regs (unsigned int low, unsigned int high, rtx base,\n \n \t  if (reg0 && reg1)\n \t    {\n-\t      mode = SPARC_INT_REG_P (i) ? DImode : DFmode;\n+\t      mode = SPARC_INT_REG_P (i) ? E_DImode : E_DFmode;\n \t      regno = i;\n \t    }\n \t  else if (reg0)\n \t    {\n-\t      mode = SPARC_INT_REG_P (i) ? SImode : SFmode;\n+\t      mode = SPARC_INT_REG_P (i) ? E_SImode : E_SFmode;\n \t      regno = i;\n \t    }\n \t  else if (reg1)\n \t    {\n-\t      mode = SPARC_INT_REG_P (i) ? SImode : SFmode;\n+\t      mode = SPARC_INT_REG_P (i) ? E_SImode : E_SFmode;\n \t      regno = i + 1;\n \t      offset += 4;\n \t    }"}, {"sha": "2ef74092553ce50a4183d10a9e4989bfd025bbae", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=0d4a1197ba24d4f95b5c5f1face695806075a0c6", "patch": "@@ -2332,7 +2332,8 @@ print_operand (FILE *file, rtx x, int letter)\n       if (GET_CODE (x) == MEM\n \t  && (GET_MODE (x) == DFmode || GET_MODE (x) == DImode))\n \t{\n-\t  x = adjust_address (x, GET_MODE (x) == DFmode ? SFmode : SImode, 4);\n+\t  x = adjust_address (x, GET_MODE (x) == DFmode ? E_SFmode : E_SImode,\n+\t\t\t      4);\n \t  output_address (GET_MODE (x), XEXP (x, 0));\n \t}\n       else"}, {"sha": "a1940a55264e83744f0840bbd2bf09ed21838c78", "filename": "gcc/expmed.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fexpmed.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fexpmed.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.h?ref=0d4a1197ba24d4f95b5c5f1face695806075a0c6", "patch": "@@ -136,10 +136,10 @@ struct alg_hash_entry {\n #define NUM_MODE_INT \\\n   (MAX_MODE_INT - MIN_MODE_INT + 1)\n #define NUM_MODE_PARTIAL_INT \\\n-  (MIN_MODE_PARTIAL_INT == VOIDmode ? 0 \\\n+  (MIN_MODE_PARTIAL_INT == E_VOIDmode ? 0 \\\n    : MAX_MODE_PARTIAL_INT - MIN_MODE_PARTIAL_INT + 1)\n #define NUM_MODE_VECTOR_INT \\\n-  (MIN_MODE_VECTOR_INT == VOIDmode ? 0 \\\n+  (MIN_MODE_VECTOR_INT == E_VOIDmode ? 0 \\\n    : MAX_MODE_VECTOR_INT - MIN_MODE_VECTOR_INT + 1)\n \n #define NUM_MODE_IP_INT (NUM_MODE_INT + NUM_MODE_PARTIAL_INT)"}, {"sha": "4cd0dc1bfcf9a7ef94a409655472232a4a1a577f", "filename": "gcc/genmodes.c", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=0d4a1197ba24d4f95b5c5f1face695806075a0c6", "patch": "@@ -983,7 +983,7 @@ mode_size_inline (machine_mode mode)\\n\\\n \n   for_all_modes (c, m)\n     if (!m->need_bytesize_adj)\n-      printf (\"    case %smode: return %u;\\n\", m->name, m->bytesize);\n+      printf (\"    case E_%smode: return %u;\\n\", m->name, m->bytesize);\n \n   puts (\"\\\n     default: return mode_size[mode];\\n\\\n@@ -1013,7 +1013,7 @@ mode_nunits_inline (machine_mode mode)\\n\\\n     {\");\n \n   for_all_modes (c, m)\n-    printf (\"    case %smode: return %u;\\n\", m->name, m->ncomponents);\n+    printf (\"    case E_%smode: return %u;\\n\", m->name, m->ncomponents);\n \n   puts (\"\\\n     default: return mode_nunits[mode];\\n\\\n@@ -1043,7 +1043,7 @@ mode_inner_inline (machine_mode mode)\\n\\\n     {\");\n \n   for_all_modes (c, m)\n-    printf (\"    case %smode: return %smode;\\n\", m->name,\n+    printf (\"    case E_%smode: return E_%smode;\\n\", m->name,\n \t    c != MODE_PARTIAL_INT && m->component\n \t    ? m->component->name : m->name);\n \n@@ -1082,7 +1082,7 @@ mode_unit_size_inline (machine_mode mode)\\n\\\n       if (c != MODE_PARTIAL_INT && m2->component)\n \tm2 = m2->component;\n       if (!m2->need_bytesize_adj)\n-\tprintf (\"    case %smode: return %u;\\n\", name, m2->bytesize);\n+\tprintf (\"    case E_%smode: return %u;\\n\", name, m2->bytesize);\n     }\n \n   puts (\"\\\n@@ -1117,9 +1117,9 @@ mode_unit_precision_inline (machine_mode mode)\\n\\\n       struct mode_data *m2\n \t= (c != MODE_PARTIAL_INT && m->component) ? m->component : m;\n       if (m2->precision != (unsigned int)-1)\n-\tprintf (\"    case %smode: return %u;\\n\", m->name, m2->precision);\n+\tprintf (\"    case E_%smode: return %u;\\n\", m->name, m2->precision);\n       else\n-\tprintf (\"    case %smode: return %u*BITS_PER_UNIT;\\n\",\n+\tprintf (\"    case E_%smode: return %u*BITS_PER_UNIT;\\n\",\n \t\tm->name, m2->bytesize);\n     }\n \n@@ -1151,10 +1151,12 @@ enum machine_mode\\n{\");\n   for (c = 0; c < MAX_MODE_CLASS; c++)\n     for (m = modes[c]; m; m = m->next)\n       {\n-\tint count_ = printf (\"  %smode,\", m->name);\n+\tint count_ = printf (\"  E_%smode,\", m->name);\n \tprintf (\"%*s/* %s:%d */\\n\", 27 - count_, \"\",\n \t\t trim_filename (m->file), m->line);\n \tprintf (\"#define HAVE_%smode\\n\", m->name);\n+\tprintf (\"#define %smode E_%smode\\n\",\n+\t\tm->name, m->name);\n       }\n \n   puts (\"  MAX_MACHINE_MODE,\\n\");\n@@ -1174,11 +1176,11 @@ enum machine_mode\\n{\");\n \tfirst = first->next;\n \n       if (first && last)\n-\tprintf (\"  MIN_%s = %smode,\\n  MAX_%s = %smode,\\n\\n\",\n+\tprintf (\"  MIN_%s = E_%smode,\\n  MAX_%s = E_%smode,\\n\\n\",\n \t\t mode_class_names[c], first->name,\n \t\t mode_class_names[c], last->name);\n       else\n-\tprintf (\"  MIN_%s = %smode,\\n  MAX_%s = %smode,\\n\\n\",\n+\tprintf (\"  MIN_%s = E_%smode,\\n  MAX_%s = E_%smode,\\n\\n\",\n \t\t mode_class_names[c], void_mode->name,\n \t\t mode_class_names[c], void_mode->name);\n     }\n@@ -1350,7 +1352,7 @@ emit_mode_wider (void)\n   print_decl (\"unsigned char\", \"mode_wider\", \"NUM_MACHINE_MODES\");\n \n   for_all_modes (c, m)\n-    tagged_printf (\"%smode\",\n+    tagged_printf (\"E_%smode\",\n \t\t   m->wider ? m->wider->name : void_mode->name,\n \t\t   m->name);\n \n@@ -1397,7 +1399,7 @@ emit_mode_wider (void)\n \t}\n       if (m2 == void_mode)\n \tm2 = 0;\n-      tagged_printf (\"%smode\",\n+      tagged_printf (\"E_%smode\",\n \t\t     m2 ? m2->name : void_mode->name,\n \t\t     m->name);\n     }\n@@ -1414,7 +1416,7 @@ emit_mode_complex (void)\n   print_decl (\"unsigned char\", \"mode_complex\", \"NUM_MACHINE_MODES\");\n \n   for_all_modes (c, m)\n-    tagged_printf (\"%smode\",\n+    tagged_printf (\"E_%smode\",\n \t\t   m->complex ? m->complex->name : void_mode->name,\n \t\t   m->name);\n \n@@ -1454,7 +1456,7 @@ emit_mode_inner (void)\n   print_decl (\"unsigned char\", \"mode_inner\", \"NUM_MACHINE_MODES\");\n \n   for_all_modes (c, m)\n-    tagged_printf (\"%smode\",\n+    tagged_printf (\"E_%smode\",\n \t\t   c != MODE_PARTIAL_INT && m->component\n \t\t   ? m->component->name : m->name,\n \t\t   m->name);\n@@ -1597,9 +1599,9 @@ emit_mode_adjustments (void)\n     {\n       printf (\"\\n  /* %s:%d */\\n  s = %s;\\n\",\n \t      a->file, a->line, a->adjustment);\n-      printf (\"  mode_size[%smode] = s;\\n\", a->mode->name);\n-      printf (\"  mode_unit_size[%smode] = s;\\n\", a->mode->name);\n-      printf (\"  mode_base_align[%smode] = s & (~s + 1);\\n\",\n+      printf (\"  mode_size[E_%smode] = s;\\n\", a->mode->name);\n+      printf (\"  mode_unit_size[E_%smode] = s;\\n\", a->mode->name);\n+      printf (\"  mode_base_align[E_%smode] = s & (~s + 1);\\n\",\n \t      a->mode->name);\n \n       for (m = a->mode->contained; m; m = m->next_cont)\n@@ -1608,9 +1610,9 @@ emit_mode_adjustments (void)\n \t    {\n \t    case MODE_COMPLEX_INT:\n \t    case MODE_COMPLEX_FLOAT:\n-\t      printf (\"  mode_size[%smode] = 2*s;\\n\", m->name);\n-\t      printf (\"  mode_unit_size[%smode] = s;\\n\", m->name);\n-\t      printf (\"  mode_base_align[%smode] = s & (~s + 1);\\n\",\n+\t      printf (\"  mode_size[E_%smode] = 2*s;\\n\", m->name);\n+\t      printf (\"  mode_unit_size[E_%smode] = s;\\n\", m->name);\n+\t      printf (\"  mode_base_align[E_%smode] = s & (~s + 1);\\n\",\n \t\t      m->name);\n \t      break;\n \n@@ -1620,10 +1622,10 @@ emit_mode_adjustments (void)\n \t    case MODE_VECTOR_UFRACT:\n \t    case MODE_VECTOR_ACCUM:\n \t    case MODE_VECTOR_UACCUM:\n-\t      printf (\"  mode_size[%smode] = %d*s;\\n\",\n+\t      printf (\"  mode_size[E_%smode] = %d*s;\\n\",\n \t\t      m->name, m->ncomponents);\n-\t      printf (\"  mode_unit_size[%smode] = s;\\n\", m->name);\n-\t      printf (\"  mode_base_align[%smode] = (%d*s) & (~(%d*s)+1);\\n\",\n+\t      printf (\"  mode_unit_size[E_%smode] = s;\\n\", m->name);\n+\t      printf (\"  mode_base_align[E_%smode] = (%d*s) & (~(%d*s)+1);\\n\",\n \t\t      m->name, m->ncomponents, m->ncomponents);\n \t      break;\n \n@@ -1642,15 +1644,15 @@ emit_mode_adjustments (void)\n     {\n       printf (\"\\n  /* %s:%d */\\n  s = %s;\\n\",\n \t      a->file, a->line, a->adjustment);\n-      printf (\"  mode_base_align[%smode] = s;\\n\", a->mode->name);\n+      printf (\"  mode_base_align[E_%smode] = s;\\n\", a->mode->name);\n \n       for (m = a->mode->contained; m; m = m->next_cont)\n \t{\n \t  switch (m->cl)\n \t    {\n \t    case MODE_COMPLEX_INT:\n \t    case MODE_COMPLEX_FLOAT:\n-\t      printf (\"  mode_base_align[%smode] = s;\\n\", m->name);\n+\t      printf (\"  mode_base_align[E_%smode] = s;\\n\", m->name);\n \t      break;\n \n \t    case MODE_VECTOR_INT:\n@@ -1659,7 +1661,7 @@ emit_mode_adjustments (void)\n \t    case MODE_VECTOR_UFRACT:\n \t    case MODE_VECTOR_ACCUM:\n \t    case MODE_VECTOR_UACCUM:\n-\t      printf (\"  mode_base_align[%smode] = %d*s;\\n\",\n+\t      printf (\"  mode_base_align[E_%smode] = %d*s;\\n\",\n \t\t      m->name, m->ncomponents);\n \t      break;\n \n@@ -1677,20 +1679,20 @@ emit_mode_adjustments (void)\n     {\n       printf (\"\\n  /* %s:%d */\\n  s = %s;\\n\",\n \t      a->file, a->line, a->adjustment);\n-      printf (\"  mode_ibit[%smode] = s;\\n\", a->mode->name);\n+      printf (\"  mode_ibit[E_%smode] = s;\\n\", a->mode->name);\n     }\n \n   /* Fbit adjustments don't have to propagate.  */\n   for (a = adj_fbit; a; a = a->next)\n     {\n       printf (\"\\n  /* %s:%d */\\n  s = %s;\\n\",\n \t      a->file, a->line, a->adjustment);\n-      printf (\"  mode_fbit[%smode] = s;\\n\", a->mode->name);\n+      printf (\"  mode_fbit[E_%smode] = s;\\n\", a->mode->name);\n     }\n \n   /* Real mode formats don't have to propagate anywhere.  */\n   for (a = adj_format; a; a = a->next)\n-    printf (\"\\n  /* %s:%d */\\n  REAL_MODE_FORMAT (%smode) = %s;\\n\",\n+    printf (\"\\n  /* %s:%d */\\n  REAL_MODE_FORMAT (E_%smode) = %s;\\n\",\n \t    a->file, a->line, a->mode->name, a->adjustment);\n \n   puts (\"}\");\n@@ -1768,7 +1770,7 @@ emit_mode_int_n (void)\n       m = mode_sort[i];\n       printf(\" {\\n\");\n       tagged_printf (\"%u\", m->int_n, m->name);\n-      printf (\"%smode,\", m->name);\n+      printf (\"E_%smode,\", m->name);\n       printf(\" },\\n\");\n     }\n "}, {"sha": "d447455c6a6629b25ce531f9e96d79755002aa59", "filename": "gcc/genoutput.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=0d4a1197ba24d4f95b5c5f1face695806075a0c6", "patch": "@@ -127,7 +127,7 @@ struct operand_data\n \n static struct operand_data null_operand =\n {\n-  0, 0, \"\", \"\", VOIDmode, 0, 0, 0, 0, 0\n+  0, 0, \"\", \"\", E_VOIDmode, 0, 0, 0, 0, 0\n };\n \n static struct operand_data *odata = &null_operand;\n@@ -253,7 +253,7 @@ output_operand_data (void)\n \n       printf (\"    \\\"%s\\\",\\n\", d->constraint ? d->constraint : \"\");\n \n-      printf (\"    %smode,\\n\", GET_MODE_NAME (d->mode));\n+      printf (\"    E_%smode,\\n\", GET_MODE_NAME (d->mode));\n \n       printf (\"    %d,\\n\", d->strict_low);\n "}, {"sha": "902762fbc57379c598e1068a7a6d0b060723cb11", "filename": "gcc/genrecog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=0d4a1197ba24d4f95b5c5f1face695806075a0c6", "patch": "@@ -4489,7 +4489,7 @@ print_parameter_value (const parameter &param)\n \tbreak;\n \n       case parameter::MODE:\n-\tprintf (\"%smode\", GET_MODE_NAME ((machine_mode) param.value));\n+\tprintf (\"E_%smode\", GET_MODE_NAME ((machine_mode) param.value));\n \tbreak;\n \n       case parameter::INT:"}, {"sha": "affec0c5948daad7f680fed684017e1214d5f79e", "filename": "gcc/lra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a1197ba24d4f95b5c5f1face695806075a0c6/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=0d4a1197ba24d4f95b5c5f1face695806075a0c6", "patch": "@@ -596,7 +596,7 @@ static struct lra_operand_data debug_operand_data =\n   {\n     NULL, /* alternative  */\n     0, /* early_clobber_alts */\n-    VOIDmode, /* We are not interesting in the operand mode.  */\n+    E_VOIDmode, /* We are not interesting in the operand mode.  */\n     OP_IN,\n     0, 0, 0, 0\n   };"}]}