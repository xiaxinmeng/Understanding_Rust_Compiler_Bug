{"sha": "09176201ec6a21c25b1edb07f19f83be22a123f9", "node_id": "C_kwDOANBUbNoAKDA5MTc2MjAxZWM2YTIxYzI1YjFlZGIwN2YxOWY4M2JlMjJhMTIzZjk", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-26T16:21:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-26T16:28:17Z"}, "message": "frange: Fix up foperator_{,not_}equal::fold_range for signed zeros [PR108540]\n\nThe following testcases are miscompiled, because threader sees some\nSSA_NAME would have -0.0 value and when computing range of SSA_NAME == 0.0\nfoperator_equal::fold_range sees one operand has [-0.0, -0.0] singleton\nrange, the other [0.0, 0.0], they aren't equal (frange operator== uses\nreal_identical etc. rather than real comparisons) and so it thinks they\ncompare unequal.  With signed zeros -0.0 == 0.0 is true though, so we\nneed to special case the both ranges singleton code.\nSimilarly, if we see op1 range being say [-42.0, -0.0] and op2 range\n[0.0, 42.0], we'd check that the intersection of the two ranges is empty\n(that is correct) and fold the result of == between such operands to\n[0, 0] which is wrong, because -0.0 == 0.0, it needs to be [0, 1].\nSimilarly for foperator_not_equal::fold_range.\n\n2023-01-26  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/108540\n\t* range-op-float.cc (foperator_equal::fold_range): If both op1 and op2\n\tare singletons, use range_true even if op1 != op2\n\twhen one range is [-0.0, -0.0] and another [0.0, 0.0].  Similarly,\n\teven if intersection of the ranges is empty and one has\n\tzero low bound and another zero high bound, use range_true_and_false\n\trather than range_false.\n\t(foperator_not_equal::fold_range): If both op1 and op2\n\tare singletons, use range_false even if op1 != op2\n\twhen one range is [-0.0, -0.0] and another [0.0, 0.0].  Similarly,\n\teven if intersection of the ranges is empty and one has\n\tzero low bound and another zero high bound, use range_true_and_false\n\trather than range_true.\n\n\t* gcc.c-torture/execute/ieee/pr108540-1.c: New test.\n\t* gcc.c-torture/execute/ieee/pr108540-2.c: New test.", "tree": {"sha": "5095ca59b6ff2a1cf939627442f91a3bdd0cee36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5095ca59b6ff2a1cf939627442f91a3bdd0cee36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09176201ec6a21c25b1edb07f19f83be22a123f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09176201ec6a21c25b1edb07f19f83be22a123f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09176201ec6a21c25b1edb07f19f83be22a123f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09176201ec6a21c25b1edb07f19f83be22a123f9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cdb609f43eb6131053fb88e32fdc5490f4ef293", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cdb609f43eb6131053fb88e32fdc5490f4ef293", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cdb609f43eb6131053fb88e32fdc5490f4ef293"}], "stats": {"total": 147, "additions": 142, "deletions": 5}, "files": [{"sha": "2db83aeb2fce3e1834aef23e0c1d9117aafa27dd", "filename": "gcc/range-op-float.cc", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09176201ec6a21c25b1edb07f19f83be22a123f9/gcc%2Frange-op-float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09176201ec6a21c25b1edb07f19f83be22a123f9/gcc%2Frange-op-float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op-float.cc?ref=09176201ec6a21c25b1edb07f19f83be22a123f9", "patch": "@@ -607,6 +607,10 @@ foperator_equal::fold_range (irange &r, tree type,\n     {\n       if (op1 == op2)\n \tr = range_true (type);\n+      // If one operand is -0.0 and other 0.0, they are still equal.\n+      else if (real_iszero (&op1.lower_bound ())\n+\t       && real_iszero (&op2.lower_bound ()))\n+\tr = range_true (type);\n       else\n \tr = range_false (type);\n     }\n@@ -617,7 +621,18 @@ foperator_equal::fold_range (irange &r, tree type,\n       frange tmp = op1;\n       tmp.intersect (op2);\n       if (tmp.undefined_p ())\n-\tr = range_false (type);\n+\t{\n+\t  // If one range is [whatever, -0.0] and another\n+\t  // [0.0, whatever2], we don't know anything either,\n+\t  // because -0.0 == 0.0.\n+\t  if ((real_iszero (&op1.upper_bound ())\n+\t       && real_iszero (&op2.lower_bound ()))\n+\t      || (real_iszero (&op1.lower_bound ())\n+\t\t  && real_iszero (&op2.upper_bound ())))\n+\t    r = range_true_and_false (type);\n+\t  else\n+\t    r = range_false (type);\n+\t}\n       else\n \tr = range_true_and_false (type);\n     }\n@@ -708,10 +723,14 @@ foperator_not_equal::fold_range (irange &r, tree type,\n   // consist of a single value, and then compare them.\n   else if (op1.singleton_p () && op2.singleton_p ())\n     {\n-      if (op1 != op2)\n-\tr = range_true (type);\n-      else\n+      if (op1 == op2)\n \tr = range_false (type);\n+      // If one operand is -0.0 and other 0.0, they are still equal.\n+      else if (real_iszero (&op1.lower_bound ())\n+\t       && real_iszero (&op2.lower_bound ()))\n+\tr = range_false (type);\n+      else\n+\tr = range_true (type);\n     }\n   else if (!maybe_isnan (op1, op2))\n     {\n@@ -720,7 +739,18 @@ foperator_not_equal::fold_range (irange &r, tree type,\n       frange tmp = op1;\n       tmp.intersect (op2);\n       if (tmp.undefined_p ())\n-\tr = range_true (type);\n+\t{\n+\t  // If one range is [whatever, -0.0] and another\n+\t  // [0.0, whatever2], we don't know anything either,\n+\t  // because -0.0 == 0.0.\n+\t  if ((real_iszero (&op1.upper_bound ())\n+\t       && real_iszero (&op2.lower_bound ()))\n+\t      || (real_iszero (&op1.lower_bound ())\n+\t\t  && real_iszero (&op2.upper_bound ())))\n+\t    r = range_true_and_false (type);\n+\t  else\n+\t    r = range_true (type);\n+\t}\n       else\n \tr = range_true_and_false (type);\n     }"}, {"sha": "ebd4c502ee5d039b37460f15481fd01c8e718b74", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/pr108540-1.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09176201ec6a21c25b1edb07f19f83be22a123f9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fpr108540-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09176201ec6a21c25b1edb07f19f83be22a123f9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fpr108540-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fpr108540-1.c?ref=09176201ec6a21c25b1edb07f19f83be22a123f9", "patch": "@@ -0,0 +1,84 @@\n+/* PR tree-optimization/108540 */\n+\n+__attribute__((noipa)) void\n+bar (const char *cp, unsigned long size, char sign, int dsgn)\n+{\n+  if (__builtin_strcmp (cp, \"ZERO\") != 0 || size != 4 || sign != '-' || dsgn != 1)\n+    __builtin_abort ();\n+}\n+\n+__attribute__((noipa)) void\n+foo (int x, int ch, double d)\n+{\n+  const char *cp = \"\";\n+  unsigned long size = 0;\n+  char sign = '\\0';\n+  switch (x)\n+    {\n+    case 42:\n+      if (__builtin_isinf (d))\n+\t{\n+\t  if (d < 0)\n+\t    sign = '-';\n+\t  cp = \"Inf\";\n+\t  size = 3;\n+\t  break;\n+\t}\n+      if (__builtin_isnan (d))\n+\t{\n+\t  cp = \"NaN\";\n+\t  size = 3;\n+\t  break;\n+\t}\n+      if (d < 0)\n+\t{\n+\t  d = -d;\n+\t  sign = '-';\n+\t}\n+      else if (d == 0.0 && __builtin_signbit (d))\n+\tsign = '-';\n+      else\n+\tsign = '\\0';\n+      if (ch == 'a' || ch == 'A')\n+\t{\n+\t  union U { long long l; double d; } u;\n+\t  int dsgn;\n+\t  u.d = d;\n+\t  if (u.l < 0)\n+\t    {\n+\t      dsgn = 1;\n+\t      u.l &= 0x7fffffffffffffffLL;\n+\t    }\n+\t  else\n+\t    dsgn = 0;\n+\t  if (__builtin_isinf (d))\n+\t    {\n+\t      cp = \"INF\";\n+\t      size = 3;\n+\t    }\n+\t  else if (__builtin_isnan (d))\n+\t    {\n+\t      cp = \"NAN\";\n+\t      size = 3;\n+\t    }\n+\t  else if (d == 0)\n+\t    {\n+\t      cp = \"ZERO\";\n+\t      size = 4;\n+\t    }\n+\t  else\n+\t    {\n+\t      cp = \"WRONG\";\n+\t      size = 5;\n+\t    }\n+\t  bar (cp, size, sign, dsgn);\n+\t}\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  foo (42, 'a', -0.0);\n+  return 0;\n+}"}, {"sha": "f1b13c9060ab1de83e026f9c4499a45c38721c41", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/pr108540-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09176201ec6a21c25b1edb07f19f83be22a123f9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fpr108540-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09176201ec6a21c25b1edb07f19f83be22a123f9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fpr108540-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fpr108540-2.c?ref=09176201ec6a21c25b1edb07f19f83be22a123f9", "patch": "@@ -0,0 +1,23 @@\n+/* PR tree-optimization/108540 */\n+\n+__attribute__((noipa)) int\n+foo (int x, double d)\n+{\n+  if (x == 42)\n+    d = -0.0;\n+  if (d == 0.0)\n+    return 42;\n+  return 12;\n+}\n+\n+int\n+main ()\n+{\n+  if (foo (42, 5.0) != 42\n+      || foo (42, 0.0) != 42\n+      || foo (42, -0.0) != 42\n+      || foo (10, 5.0) != 12\n+      || foo (10, 0.0) != 42\n+      || foo (10, -0.0) != 42)\n+    __builtin_abort ();\n+}"}]}