{"sha": "c8a715894d9192f33d526b5c2b058ce937303b79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhhNzE1ODk0ZDkxOTJmMzNkNTI2YjVjMmIwNThjZTkzNzMwM2I3OQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2016-06-08T19:31:55Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2016-06-08T19:31:55Z"}, "message": "decl.c (maybe_deduce_size_from_array_init): Use DECL_SOURCE_LOCATION in error_at.\n\n/cp\n2016-06-08  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (maybe_deduce_size_from_array_init): Use\n\tDECL_SOURCE_LOCATION in error_at.\n\t(layout_var_decl): Likewise.\n\t(check_array_initializer): Likewise.\n\t(check_initializer): Likewise.\n\t(duplicate_decls, check_elaborated_type_specifier): Tidy.\n\n/testsuite\n2016-06-08  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/init/array42.C: New.\n\t* g++.dg/init/array43.C: Likewise.\n\t* g++.dg/init/array44.C: Likewise.\n\t* g++.dg/init/array45.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-ice10.C: Test column number too.\n\t* g++.dg/cpp0x/constexpr-incomplete1.C: Likewise.\n\t* g++.dg/cpp1y/auto-fn27.C: Likewise.\n\t* g++.dg/gomp/pr35751.C: Likewise.\n\t* g++.dg/init/array23.C: Likewise.\n\t* g++.dg/init/brace2.C: Likewise.\n\t* g++.dg/init/brace6.C: Likewise.\n\nFrom-SVN: r237240", "tree": {"sha": "0c2b709c39db8197464e104e86d12be5a7e3f8c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c2b709c39db8197464e104e86d12be5a7e3f8c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8a715894d9192f33d526b5c2b058ce937303b79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8a715894d9192f33d526b5c2b058ce937303b79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8a715894d9192f33d526b5c2b058ce937303b79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8a715894d9192f33d526b5c2b058ce937303b79/comments", "author": null, "committer": null, "parents": [{"sha": "44a845ca0e592ca187fbab07ac9e055b20fb11cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44a845ca0e592ca187fbab07ac9e055b20fb11cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44a845ca0e592ca187fbab07ac9e055b20fb11cc"}], "stats": {"total": 93, "additions": 67, "deletions": 26}, "files": [{"sha": "54c838bfeaa340865d7cc0ca5aa2925fed86b487", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c8a715894d9192f33d526b5c2b058ce937303b79", "patch": "@@ -1,3 +1,12 @@\n+2016-06-08  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (maybe_deduce_size_from_array_init): Use\n+\tDECL_SOURCE_LOCATION in error_at.\n+\t(layout_var_decl): Likewise.\n+\t(check_array_initializer): Likewise.\n+\t(check_initializer): Likewise.\n+\t(duplicate_decls, check_elaborated_type_specifier): Tidy.\n+\n 2016-06-08  Martin Sebor  <msebor@redhat.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "ca36171d4f5b39fd2931964fdd58f62eedc29766", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 30, "deletions": 17, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c8a715894d9192f33d526b5c2b058ce937303b79", "patch": "@@ -1393,7 +1393,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n     {\n       if (DECL_INITIAL (olddecl))\n \tinform (DECL_SOURCE_LOCATION (olddecl),\n-\t\t\"previous definition of %q+D was here\", olddecl);\n+\t\t\"previous definition of %qD was here\", olddecl);\n       else\n \tinform (DECL_SOURCE_LOCATION (olddecl),\n \t\t\"previous declaration of %qD was here\", olddecl);\n@@ -5266,13 +5266,16 @@ maybe_deduce_size_from_array_init (tree decl, tree init)\n \t\t\t\t\t    do_default);\n \t  if (failure == 1)\n \t    {\n-\t      error (\"initializer fails to determine size of %qD\", decl);\n+\t      error_at (EXPR_LOC_OR_LOC (initializer,\n+\t\t\t\t\t DECL_SOURCE_LOCATION (decl)),\n+\t\t\t\"initializer fails to determine size of %qD\", decl);\n \t    }\n \t  else if (failure == 2)\n \t    {\n \t      if (do_default)\n \t\t{\n-\t\t  error (\"array size missing in %qD\", decl);\n+\t\t  error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\t    \"array size missing in %qD\", decl);\n \t\t}\n \t      /* If a `static' var's size isn't known, make it extern as\n \t\t well as static, so it does not get allocated.  If it's not\n@@ -5283,7 +5286,8 @@ maybe_deduce_size_from_array_init (tree decl, tree init)\n \t    }\n \t  else if (failure == 3)\n \t    {\n-\t      error (\"zero-size array %qD\", decl);\n+\t      error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\t\"zero-size array %qD\", decl);\n \t    }\n \t}\n \n@@ -5322,7 +5326,8 @@ layout_var_decl (tree decl)\n       /* An automatic variable with an incomplete type: that is an error.\n \t Don't talk about array types here, since we took care of that\n \t message in grokdeclarator.  */\n-      error (\"storage size of %qD isn%'t known\", decl);\n+      error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\"storage size of %qD isn%'t known\", decl);\n       TREE_TYPE (decl) = error_mark_node;\n     }\n #if 0\n@@ -5345,7 +5350,8 @@ layout_var_decl (tree decl)\n \tconstant_expression_warning (DECL_SIZE (decl));\n       else\n \t{\n-\t  error (\"storage size of %qD isn%'t constant\", decl);\n+\t  error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t    \"storage size of %qD isn%'t constant\", decl);\n \t  TREE_TYPE (decl) = error_mark_node;\n \t}\n     }\n@@ -5954,7 +5960,8 @@ check_array_initializer (tree decl, tree type, tree init)\n   if (!COMPLETE_TYPE_P (complete_type (element_type)))\n     {\n       if (decl)\n-\terror (\"elements of array %q#D have incomplete type\", decl);\n+\terror_at (DECL_SOURCE_LOCATION (decl),\n+\t\t  \"elements of array %q#D have incomplete type\", decl);\n       else\n \terror (\"elements of array %q#T have incomplete type\", type);\n       return true;\n@@ -6018,7 +6025,8 @@ check_initializer (tree decl, tree init, int flags, vec<tree, va_gc> **cleanups)\n     }\n   else if (!COMPLETE_TYPE_P (type))\n     {\n-      error (\"%q#D has incomplete type\", decl);\n+      error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\"%q#D has incomplete type\", decl);\n       TREE_TYPE (decl) = error_mark_node;\n       return NULL_TREE;\n     }\n@@ -6038,8 +6046,9 @@ check_initializer (tree decl, tree init, int flags, vec<tree, va_gc> **cleanups)\n \t    }\n \t  else if (init_len != 1 && TREE_CODE (type) != COMPLEX_TYPE)\n \t    {\n-\t      error (\"scalar object %qD requires one element in initializer\",\n-\t\t     decl);\n+\t      error_at (EXPR_LOC_OR_LOC (init, DECL_SOURCE_LOCATION (decl)),\n+\t\t\t\"scalar object %qD requires one element in \"\n+\t\t\t\"initializer\", decl);\n \t      TREE_TYPE (decl) = error_mark_node;\n \t      return NULL_TREE;\n \t    }\n@@ -6081,9 +6090,10 @@ check_initializer (tree decl, tree init, int flags, vec<tree, va_gc> **cleanups)\n \t    {\n \t      /* Don't reshape if the class has constructors.  */\n \t      if (cxx_dialect == cxx98)\n-\t\terror (\"in C++98 %qD must be initialized by constructor, \"\n-\t\t       \"not by %<{...}%>\",\n-\t\t       decl);\n+\t\terror_at (EXPR_LOC_OR_LOC (init, DECL_SOURCE_LOCATION (decl)),\n+\t\t\t  \"in C++98 %qD must be initialized by \"\n+\t\t\t  \"constructor, not by %<{...}%>\",\n+\t\t\t  decl);\n \t    }\n \t  else if (VECTOR_TYPE_P (type) && TYPE_VECTOR_OPAQUE (type))\n \t    {\n@@ -6175,8 +6185,11 @@ check_initializer (tree decl, tree init, int flags, vec<tree, va_gc> **cleanups)\n \t      && DECL_INITIAL (decl)\n \t      && TREE_CODE (DECL_INITIAL (decl)) == STRING_CST\n \t      && PAREN_STRING_LITERAL_P (DECL_INITIAL (decl)))\n-\t    warning (0, \"array %qD initialized by parenthesized string literal %qE\",\n-\t\t     decl, DECL_INITIAL (decl));\n+\t    warning_at (EXPR_LOC_OR_LOC (DECL_INITIAL (decl),\n+\t\t\t\t\t DECL_SOURCE_LOCATION (decl)),\n+\t\t\t0, \"array %qD initialized by parenthesized \"\n+\t\t\t\"string literal %qE\",\n+\t\t\tdecl, DECL_INITIAL (decl));\n \t  init = NULL;\n \t}\n     }\n@@ -12528,14 +12541,14 @@ check_elaborated_type_specifier (enum tag_types tag_code,\n \t   && tag_code != typename_type)\n     {\n       error (\"%qT referred to as %qs\", type, tag_name (tag_code));\n-      inform (input_location, \"%q+T has a previous declaration here\", type);\n+      inform (location_of (type), \"%qT has a previous declaration here\", type);\n       return error_mark_node;\n     }\n   else if (TREE_CODE (type) != ENUMERAL_TYPE\n \t   && tag_code == enum_type)\n     {\n       error (\"%qT referred to as enum\", type);\n-      inform (input_location, \"%q+T has a previous declaration here\", type);\n+      inform (location_of (type), \"%qT has a previous declaration here\", type);\n       return error_mark_node;\n     }\n   else if (!allow_template_p"}, {"sha": "ab6395e905184ccac8e1c8be2f08ca235310f10f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c8a715894d9192f33d526b5c2b058ce937303b79", "patch": "@@ -1,3 +1,17 @@\n+2016-06-08  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/init/array42.C: New.\n+\t* g++.dg/init/array43.C: Likewise.\n+\t* g++.dg/init/array44.C: Likewise.\n+\t* g++.dg/init/array45.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-ice10.C: Test column number too.\n+\t* g++.dg/cpp0x/constexpr-incomplete1.C: Likewise.\n+\t* g++.dg/cpp1y/auto-fn27.C: Likewise.\n+\t* g++.dg/gomp/pr35751.C: Likewise.\n+\t* g++.dg/init/array23.C: Likewise.\n+\t* g++.dg/init/brace2.C: Likewise.\n+\t* g++.dg/init/brace6.C: Likewise.\n+\n 2016-06-08  Martin Sebor  <msebor@redhat.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "51612737847315d75797e5d2bcaaed1f067e4e56", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ice10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice10.C?ref=c8a715894d9192f33d526b5c2b058ce937303b79", "patch": "@@ -4,5 +4,5 @@\n struct A\n {\n   constexpr A() {}\n-  static constexpr A a[2] = {};  // { dg-error \"incomplete\" }\n+  static constexpr A a[2] = {};  // { dg-error \"22:elements of array 'constexpr const A A::a \\\\\\[2\\\\\\]' have incomplete type\" }\n };"}, {"sha": "7b0d83e608d8b9d5687390fe0e4b8dae66496893", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-incomplete1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-incomplete1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-incomplete1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-incomplete1.C?ref=c8a715894d9192f33d526b5c2b058ce937303b79", "patch": "@@ -2,6 +2,6 @@\n \n struct A\n {\n-  static constexpr A a = 1;\t// { dg-error \"incomplete\" }\n+  static constexpr A a = 1;  // { dg-error \"22:'constexpr const A A::a' has incomplete type\" }\n   constexpr A(int i) { }\n };"}, {"sha": "b114df2fdd5f8966d7a004796bcd26bb85628da7", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn27.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn27.C?ref=c8a715894d9192f33d526b5c2b058ce937303b79", "patch": "@@ -31,7 +31,7 @@ F<T>::bar (const G &)\n {\n   auto s = I;\n   typedef decltype (s) L;\n-  auto u =[&](L) { auto t = foo (J::K (), 0); }; // { dg-error \"\" }\n+  auto u =[&](L) { auto t = foo (J::K (), 0); }; // { dg-error \"25:'void t' has incomplete type\" }\n }\n struct B {\n   typedef int G;"}, {"sha": "a8acce05f519bc105d70140c0da369eef38e5b49", "filename": "gcc/testsuite/g++.dg/gomp/pr35751.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr35751.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr35751.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr35751.C?ref=c8a715894d9192f33d526b5c2b058ce937303b79", "patch": "@@ -5,8 +5,8 @@\n void\n foo (int i)\n {\n-  extern int a[i];\t// { dg-error \"storage size of\" }\n-  static int b[i];\t// { dg-error \"storage size of\" }\n+  extern int a[i];\t// { dg-error \"14:storage size of\" }\n+  static int b[i];\t// { dg-error \"14:storage size of\" }\n \n #pragma omp parallel\n   {"}, {"sha": "fbcd39e2c3a79bd308c9562063539c450056b95f", "filename": "gcc/testsuite/g++.dg/init/array23.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray23.C?ref=c8a715894d9192f33d526b5c2b058ce937303b79", "patch": "@@ -3,4 +3,4 @@\n //  array\n \n struct A {A();int A::* t;};\n-A x[]; // { dg-error \"size\" }\n+A x[]; // { dg-error \"3:array size missing\" }"}, {"sha": "d16a9ea11ce67041be5d428e2e393f2923760971", "filename": "gcc/testsuite/g++.dg/init/array42.C", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray42.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray42.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray42.C?ref=c8a715894d9192f33d526b5c2b058ce937303b79", "patch": "@@ -0,0 +1 @@\n+char a[] = (\"abc\");  // { dg-warning \"6:array 'a' initialized by parenthesized string literal\" }"}, {"sha": "37ef24115185b8f8befae8f28bf38ef7866c84ae", "filename": "gcc/testsuite/g++.dg/init/array43.C", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray43.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray43.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray43.C?ref=c8a715894d9192f33d526b5c2b058ce937303b79", "patch": "@@ -0,0 +1,2 @@\n+int a[] = 0;  // { dg-error \"5:initializer fails to determine size\" }\n+// { dg-error \"11:array must be initialized\" \"\" { target *-*-* } 1 }"}, {"sha": "5643c81f2184804e9b26812988551fe808964dfa", "filename": "gcc/testsuite/g++.dg/init/array44.C", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray44.C?ref=c8a715894d9192f33d526b5c2b058ce937303b79", "patch": "@@ -0,0 +1 @@\n+int a[] = { };  // { dg-error \"5:zero-size array\" } "}, {"sha": "ee4451df5ff174e504bf3064a1fe81cbddbafe0d", "filename": "gcc/testsuite/g++.dg/init/array45.C", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray45.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray45.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray45.C?ref=c8a715894d9192f33d526b5c2b058ce937303b79", "patch": "@@ -0,0 +1 @@\n+int a[];  // { dg-error \"5:storage size\" }"}, {"sha": "e6307525fbf8a5689f11a0e261dfe725ea8d7fe4", "filename": "gcc/testsuite/g++.dg/init/brace2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fbrace2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fbrace2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fbrace2.C?ref=c8a715894d9192f33d526b5c2b058ce937303b79", "patch": "@@ -3,6 +3,6 @@\n int x = { 2 };\n const char * y = { \"hello\" };\n int a = 2;\n-int b = { 2,3 }; // { dg-error \"requires one element in initializer\" }\n+int b = { 2,3 }; // { dg-error \"5:scalar object 'b' requires one element in initializer\" }\n int c = { { 2 } } ; // { dg-error \"braces around scalar initializer\" }\n int d = {}; // { dg-error \"initializer\" \"\" { target { ! c++11 } } }"}, {"sha": "f8452351d12f5cbf9c4c749037fc6e7f36542fdc", "filename": "gcc/testsuite/g++.dg/init/brace6.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fbrace6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a715894d9192f33d526b5c2b058ce937303b79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fbrace6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fbrace6.C?ref=c8a715894d9192f33d526b5c2b058ce937303b79", "patch": "@@ -17,8 +17,8 @@ struct D { int c; };\n int main()\n {\n    int i = { 1 };\n-   int j = { 1, 2 }; /* { dg-error \"requires one element\" } */\n-   A a = { 6 }; /* { dg-error \"initialize\" \"\" { target { ! c++11 } } } */\n+   int j = { 1, 2 }; /* { dg-error \"8:scalar object 'j' requires one element\" } */\n+   A a = { 6 }; /* { dg-error \"6:in C\\\\+\\\\+98 'a' must be initialized\" \"\" { target { ! c++11 } } } */\n    B b = { 6 }; /* { dg-error \"\" } */\n    C c = { 6 }; /* { dg-error \"too many initializers\" } */\n    D d = { 6 };"}]}