{"sha": "f458d1d5d7bd85e412689858ea5d5de681608fbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ1OGQxZDVkN2JkODVlNDEyNjg5ODU4ZWE1ZDVkZTY4MTYwOGZiYg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2002-02-27T18:48:07Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-02-27T18:48:07Z"}, "message": "c-common.c, [...]: Delete code implementing -traditional mode.\n\n\t* c-common.c, c-common.h, c-decl.c, c-lex.c, c-parse.in,\n\tc-tree.h, c-typeck.c, cppexp.c, cpplex.c, cpplib.c, cpplib.h,\n\tcppmacro.c, objc/lang-specs.h, objc/objc-act.c,\n\tbuiltin-types.def, builtins.def, dwarf2out.c, dwarfout.c,\n\tgcc.c, toplev.c: Delete code implementing -traditional mode.\n\n\t* ada/misc.c, ch/ch-tree.h, ch/decl.c, cp/decl2.c, f/com.c,\n\tf/lex.c, f/top.c, java/builtins.c, java/decl.c: Delete\n\ttraditional-mode-related code copied from the C front end\n\tbut not used, or used only to permit the compiler to link.\n\n\t* doc/bugreport.texi, doc/cpp.texi, doc/extend.texi,\n\tdoc/invoke.texi, doc/standards.texi, doc/trouble.texi:\n\tDocument removal of -traditional mode for compilation, and\n\tremove documentation only relevant to that mode.\n\n\t* config/nextstep.h, config/ptx4.h, config/svr4.h,\n\tconfig/convex/convex.h, config/d30v/d30v.h,\n\tconfig/i386/dgux.h, config/i386/osf1elf.h,\n\tconfig/i386/osfelf.h, config/i386/osfrose.h,\n\tconfig/i386/sco5.h, config/i386/sol2.h, config/m68k/a-ux.h,\n\tconfig/m68k/hp310.h, config/m88k/dgux.h,\n\tconfig/m88k/dguxbcs.h, config/m88k/luna.h, config/m88k/m88k.c,\n\tconfig/m88k/m88k.h, config/m88k/openbsd.h,\n\tconfig/mips/abi64.h, config/mips/osfrose.h,\n\tconfig/mips/svr4-5.h, config/mips/svr4-t.h,\n\tconfig/sparc/sol2-sld-64.h, config/sparc/sol2.h,\n\tconfig/stormy16/stormy16.h: Remove all references to\n\t-traditional from target specs.  Delete all mention of the\n\tno-longer-necessary TRADITIONAL_RETURN_FLOAT macro.  Also\n\tdelete a couple of commented-out definitions of\n\tDOLLARS_IN_IDENTIFIERS, with (incorrect) commentary referring\n\tto -traditional.\n\n\t* system.h: Poison TRADITIONAL_RETURN_FLOAT.\n\t* doc/tm.texi: Remove mention of TRADITIONAL_RETURN_FLOAT macro.\n\n\t* testsuite/gcc.c-torture/execute/920730-1t.c,\n\ttestsuite/gcc.c-torture/execute/920730-1t.x,\n\ttestsuite/gcc.dg/ext-glob.c: Delete test cases, only relevant\n\tto -traditional.\n\nFrom-SVN: r50110", "tree": {"sha": "aff434354f9eafe5065d231d996385e95f0669b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aff434354f9eafe5065d231d996385e95f0669b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f458d1d5d7bd85e412689858ea5d5de681608fbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f458d1d5d7bd85e412689858ea5d5de681608fbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f458d1d5d7bd85e412689858ea5d5de681608fbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f458d1d5d7bd85e412689858ea5d5de681608fbb/comments", "author": null, "committer": null, "parents": [{"sha": "e0b3a8ff40c97c0b633185e6d0872468504a7a1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0b3a8ff40c97c0b633185e6d0872468504a7a1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0b3a8ff40c97c0b633185e6d0872468504a7a1a"}], "stats": {"total": 1279, "additions": 371, "deletions": 908}, "files": [{"sha": "e7abb1659a3bca771642822c3ddf8519f460c352", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -1,3 +1,37 @@\n+2002-02-27  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* c-common.c, c-common.h, c-decl.c, c-lex.c, c-parse.in,\n+\tc-tree.h, c-typeck.c, cppexp.c, cpplex.c, cpplib.c, cpplib.h,\n+\tcppmacro.c, objc/lang-specs.h, objc/objc-act.c,\n+\tbuiltin-types.def, builtins.def, dwarf2out.c, dwarfout.c,\n+\tgcc.c, toplev.c: Delete code implementing -traditional mode.\n+\n+\t* doc/bugreport.texi, doc/cpp.texi, doc/extend.texi,\n+\tdoc/invoke.texi, doc/standards.texi, doc/trouble.texi:\n+\tDocument removal of -traditional mode for compilation, and\n+\tremove documentation only relevant to that mode.\n+\n+\t* config/nextstep.h, config/ptx4.h, config/svr4.h,\n+\tconfig/convex/convex.h, config/d30v/d30v.h,\n+\tconfig/i386/dgux.h, config/i386/osf1elf.h,\n+\tconfig/i386/osfelf.h, config/i386/osfrose.h,\n+\tconfig/i386/sco5.h, config/i386/sol2.h, config/m68k/a-ux.h,\n+\tconfig/m68k/hp310.h, config/m88k/dgux.h,\n+\tconfig/m88k/dguxbcs.h, config/m88k/luna.h, config/m88k/m88k.c,\n+\tconfig/m88k/m88k.h, config/m88k/openbsd.h,\n+\tconfig/mips/abi64.h, config/mips/osfrose.h,\n+\tconfig/mips/svr4-5.h, config/mips/svr4-t.h,\n+\tconfig/sparc/sol2-sld-64.h, config/sparc/sol2.h,\n+\tconfig/stormy16/stormy16.h: Remove all references to\n+\t-traditional from target specs.  Delete all mention of the\n+\tno-longer-necessary TRADITIONAL_RETURN_FLOAT macro.  Also\n+\tdelete a couple of commented-out definitions of\n+\tDOLLARS_IN_IDENTIFIERS, with (incorrect) commentary referring\n+\tto -traditional.\n+\n+\t* system.h: Poison TRADITIONAL_RETURN_FLOAT.\n+\t* doc/tm.texi: Remove mention of TRADITIONAL_RETURN_FLOAT macro.\n+\n 2002-02-27  Zack Weinberg  <zack@codesourcery.com>\n \n \t* mklibgcc.in: Don't use \\n in a line subject to"}, {"sha": "1443a9052cd45f5463d2497dcc1550570d4ae927", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -1,3 +1,9 @@\n+2002-02-27  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* misc.c: Delete traditional-mode-related code copied from the\n+\tC front end but not used, or used only to permit the compiler\n+\tto link.\n+\n 2002-02-07  Richard Henderson  <rth@redhat.com>\n \n \t* adaint.c (__gnat_to_gm_time): First arg is int, not time_t."}, {"sha": "c4da9226dd8bb7a5739d920800c21b107919c980", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                           C Implementation File                          *\n  *                                                                          *\n- *                             $Revision$\n+ *                             $Revision: 1.17 $\n  *                                                                          *\n  *          Copyright (C) 1992-2001 Free Software Foundation, Inc.          *\n  *                                                                          *\n@@ -152,7 +152,6 @@ extern char **gnat_argv;\n \n /* Global Variables Expected by gcc: */\n \n-int flag_traditional;\t\t/* Used by dwarfout.c.  */\n int ggc_p = 1;\n \n static void internal_error_function\tPARAMS ((const char *, va_list *));"}, {"sha": "24b87d30cfa3e22bdd70a9563ec1a4ecd028537b", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -73,13 +73,10 @@ DEF_PRIMITIVE_TYPE (BT_COMPLEX_LONG_DOUBLE, complex_long_double_type_node)\n \n DEF_PRIMITIVE_TYPE (BT_PTR, ptr_type_node)\n DEF_PRIMITIVE_TYPE (BT_CONST_PTR, const_ptr_type_node)\n-DEF_PRIMITIVE_TYPE (BT_TRAD_PTR, traditional_ptr_type_node)\n-DEF_PRIMITIVE_TYPE (BT_TRAD_CONST_PTR, traditional_cptr_type_node)\n DEF_PRIMITIVE_TYPE (BT_PTRMODE, type_for_mode (ptr_mode, 0))\n DEF_PRIMITIVE_TYPE (BT_SIZE, c_size_type_node)\n DEF_PRIMITIVE_TYPE (BT_STRING, string_type_node)\n DEF_PRIMITIVE_TYPE (BT_CONST_STRING, const_string_type_node)\n-DEF_PRIMITIVE_TYPE (BT_LEN, traditional_len_type_node)\n \n DEF_PRIMITIVE_TYPE (BT_VALIST_REF, va_list_ref_type_node)\n DEF_PRIMITIVE_TYPE (BT_VALIST_ARG, va_list_arg_type_node)\n@@ -112,7 +109,7 @@ DEF_FUNCTION_TYPE_1 (BT_FN_PTR_SIZE, BT_PTR, BT_SIZE)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_INT, BT_INT, BT_INT)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_PTR, BT_INT, BT_PTR)\n DEF_FUNCTION_TYPE_1 (BT_FN_VOID_PTR, BT_VOID, BT_PTR)\n-DEF_FUNCTION_TYPE_1 (BT_FN_LEN_CONST_STRING, BT_LEN, BT_CONST_STRING)\n+DEF_FUNCTION_TYPE_1 (BT_FN_SIZE_CONST_STRING, BT_SIZE, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_CONST_STRING, BT_INT, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_1 (BT_FN_PTR_PTR, BT_PTR, BT_PTR)\n DEF_FUNCTION_TYPE_1 (BT_FN_VOID_VALIST_REF, BT_VOID, BT_VALIST_REF)\n@@ -141,21 +138,19 @@ DEF_FUNCTION_TYPE_2 (BT_FN_LONG_LONG_LONG,\n \t\t     BT_LONG, BT_LONG, BT_LONG)\n DEF_FUNCTION_TYPE_2 (BT_FN_INT_PTR_CONST_STRING,\n \t\t     BT_INT, BT_PTR, BT_CONST_STRING)\n-DEF_FUNCTION_TYPE_2 (BT_FN_VOID_TRAD_PTR_LEN,\n-\t\t     BT_VOID, BT_TRAD_PTR, BT_LEN)\n+DEF_FUNCTION_TYPE_2 (BT_FN_VOID_PTR_SIZE,\n+\t\t     BT_VOID, BT_PTR, BT_SIZE)\n \n DEF_FUNCTION_TYPE_3 (BT_FN_STRING_STRING_CONST_STRING_SIZE,\n \t\t     BT_STRING, BT_STRING, BT_CONST_STRING, BT_SIZE)\n DEF_FUNCTION_TYPE_3 (BT_FN_INT_CONST_STRING_CONST_STRING_SIZE,\n \t\t     BT_INT, BT_CONST_STRING, BT_CONST_STRING, BT_SIZE)\n-DEF_FUNCTION_TYPE_3 (BT_FN_TRAD_PTR_PTR_CONST_PTR_SIZE,\n-\t\t     BT_TRAD_PTR, BT_PTR, BT_CONST_PTR, BT_SIZE)\n+DEF_FUNCTION_TYPE_3 (BT_FN_PTR_PTR_CONST_PTR_SIZE,\n+\t\t     BT_PTR, BT_PTR, BT_CONST_PTR, BT_SIZE)\n DEF_FUNCTION_TYPE_3 (BT_FN_INT_CONST_PTR_CONST_PTR_SIZE,\n \t             BT_INT, BT_CONST_PTR, BT_CONST_PTR, BT_SIZE)\n-DEF_FUNCTION_TYPE_3 (BT_FN_TRAD_PTR_PTR_INT_SIZE,\n-\t             BT_TRAD_PTR, BT_PTR, BT_INT, BT_SIZE)\n-DEF_FUNCTION_TYPE_3 (BT_FN_INT_TRAD_CONST_PTR_TRAD_CONST_PTR_LEN,\n-\t\t     BT_INT, BT_TRAD_CONST_PTR, BT_TRAD_CONST_PTR, BT_LEN)\n+DEF_FUNCTION_TYPE_3 (BT_FN_PTR_PTR_INT_SIZE,\n+\t             BT_PTR, BT_PTR, BT_INT, BT_SIZE)\n DEF_FUNCTION_TYPE_3 (BT_FN_VOID_PTR_INT_INT, BT_VOID, BT_PTR, BT_INT, BT_INT)\n \n DEF_FUNCTION_TYPE_4 (BT_FN_SIZE_CONST_PTR_SIZE_SIZE_PTR,"}, {"sha": "7bfe7c2a1585f1d8a56db92449b755e7aee83647", "filename": "gcc/builtins.def", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -211,13 +211,13 @@ DEF_UNUSED_BUILTIN(BUILT_IN_FREM)\n DEF_BUILTIN (BUILT_IN_BZERO,\n \t     \"__builtin_bzero\",\n \t     BUILT_IN_NORMAL,\n-\t     BT_FN_VOID_TRAD_PTR_LEN, \n+\t     BT_FN_VOID_PTR_SIZE, \n \t     BT_FN_VOID_VAR,\n \t     true, true, true)\n DEF_BUILTIN (BUILT_IN_BCMP,\n \t     \"__builtin_bcmp\",\n \t     BUILT_IN_NORMAL,\n-\t     BT_FN_INT_TRAD_CONST_PTR_TRAD_CONST_PTR_LEN,\n+\t     BT_FN_INT_CONST_PTR_CONST_PTR_SIZE,\n \t     BT_FN_INT_VAR,\n \t     true, true, true)\n \n@@ -233,13 +233,13 @@ DEF_EXT_LIB_BUILTIN(BUILT_IN_RINDEX,\n \n DEF_LIB_BUILTIN(BUILT_IN_MEMCPY,\n \t\t\"__builtin_memcpy\",\n-\t\tBT_FN_TRAD_PTR_PTR_CONST_PTR_SIZE)\n+\t\tBT_FN_PTR_PTR_CONST_PTR_SIZE)\n DEF_LIB_BUILTIN(BUILT_IN_MEMCMP,\n \t\t\"__builtin_memcmp\",\n \t\tBT_FN_INT_CONST_PTR_CONST_PTR_SIZE)\n DEF_LIB_BUILTIN(BUILT_IN_MEMSET,\n \t\t\"__builtin_memset\",\n-\t\tBT_FN_TRAD_PTR_PTR_INT_SIZE)\n+\t\tBT_FN_PTR_PTR_INT_SIZE)\n \n DEF_LIB_BUILTIN(BUILT_IN_STRCAT,\n \t\t\"__builtin_strcat\",\n@@ -261,7 +261,7 @@ DEF_LIB_BUILTIN(BUILT_IN_STRNCMP,\n \t\tBT_FN_INT_CONST_STRING_CONST_STRING_SIZE)\n DEF_LIB_BUILTIN(BUILT_IN_STRLEN,\n \t\t\"__builtin_strlen\",\n-\t\tBT_FN_LEN_CONST_STRING)\n+\t\tBT_FN_SIZE_CONST_STRING)\n DEF_LIB_BUILTIN(BUILT_IN_STRSTR,\n \t\t\"__builtin_strstr\",\n \t\tBT_FN_STRING_CONST_STRING_CONST_STRING)"}, {"sha": "ed67bb05b9109cc54e429e1011d637d76ae6475f", "filename": "gcc/c-common.c", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -663,8 +663,7 @@ combine_strings (strings)\n      -Wwrite-strings says make the string constant an array of const char\n      so that copying it to a non-const pointer will get a warning.\n      For C++, this is the standard behavior.  */\n-  if (flag_const_strings\n-      && (! flag_traditional  && ! flag_writable_strings))\n+  if (flag_const_strings && ! flag_writable_strings)\n     {\n       tree elements\n \t= build_type_variant (wide_flag ? wchar_type_node : char_type_node,\n@@ -2529,11 +2528,6 @@ c_common_nodes_and_builtins ()\n   tree builtin_types[(int) BT_LAST];\n   int wchar_type_size;\n   tree array_domain_type;\n-  /* Either char* or void*.  */\n-  tree traditional_ptr_type_node;\n-  /* Either const char* or const void*.  */\n-  tree traditional_cptr_type_node;\n-  tree traditional_len_type_node;\n   tree va_list_ref_type_node;\n   tree va_list_arg_type_node;\n \n@@ -2607,8 +2601,6 @@ c_common_nodes_and_builtins ()\n   c_size_type_node =\n     TREE_TYPE (identifier_global_value (get_identifier (SIZE_TYPE)));\n   signed_size_type_node = signed_type (c_size_type_node);\n-  if (flag_traditional)\n-    c_size_type_node = signed_size_type_node;\n   set_sizetype (c_size_type_node);\n \n   build_common_tree_nodes_2 (flag_short_double);\n@@ -2655,13 +2647,6 @@ c_common_nodes_and_builtins ()\n     = build_pointer_type (build_qualified_type\n \t\t\t  (char_type_node, TYPE_QUAL_CONST));\n \n-  traditional_ptr_type_node = ((flag_traditional && \n-\t\t\t\tc_language != clk_cplusplus)\n-\t\t\t       ? string_type_node : ptr_type_node);\n-  traditional_cptr_type_node = ((flag_traditional && \n-\t\t\t\t c_language != clk_cplusplus)\n-\t\t\t       ? const_string_type_node : const_ptr_type_node);\n-\n   (*targetm.init_builtins) ();\n \n   /* This is special for C++ so functions can be overloaded.  */\n@@ -2721,10 +2706,6 @@ c_common_nodes_and_builtins ()\n       va_list_ref_type_node = build_reference_type (va_list_type_node);\n     }\n  \n-  traditional_len_type_node = ((flag_traditional && \n-\t\t\t\tc_language != clk_cplusplus)\n-\t\t\t       ? integer_type_node : sizetype);\n-\n #define DEF_PRIMITIVE_TYPE(ENUM, VALUE) \\\n   builtin_types[(int) ENUM] = VALUE;\n #define DEF_FUNCTION_TYPE_0(ENUM, RETURN)\t\t\\\n@@ -3020,11 +3001,9 @@ simple_type_promotes_to (type)\n \n   if (c_promoting_integer_type_p (type))\n     {\n-      /* Traditionally, unsignedness is preserved in default promotions.\n-         Also preserve unsignedness if not really getting any wider.  */\n+      /* Preserve unsignedness if not really getting any wider.  */\n       if (TREE_UNSIGNED (type)\n-          && (flag_traditional\n-              || TYPE_PRECISION (type) == TYPE_PRECISION (integer_type_node)))\n+          && (TYPE_PRECISION (type) == TYPE_PRECISION (integer_type_node)))\n         return unsigned_type_node;\n       return integer_type_node;\n     }"}, {"sha": "a7581df696eb79a47c86ffa61778d2cfd48e82d7", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -420,10 +420,6 @@ extern int warn_pointer_arith;\n /* Nonzero means to warn about compile-time division by zero.  */\n extern int warn_div_by_zero;\n \n-/* Nonzero means do some things the same way PCC does.  */\n-\n-extern int flag_traditional;\n-\n /* Nonzero means enable C89 Amendment 1 features.  */\n \n extern int flag_isoc94;"}, {"sha": "177bcea5744c302f7b2b2e5113e40ab6ad0e9bc0", "filename": "gcc/c-decl.c", "status": "modified", "additions": 16, "deletions": 145, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -299,10 +299,6 @@ int flag_cond_mismatch;\n \n int flag_no_asm;\n \n-/* Nonzero means do some things the same way PCC does.  */\n-\n-int flag_traditional;\n-\n /* Nonzero means enable C89 Amendment 1 features.  */\n \n int flag_isoc94 = 0;\n@@ -320,10 +316,6 @@ int flag_hosted = 1;\n \n int flag_noniso_default_format_attributes = 1;\n \n-/* Nonzero means to allow single precision math even if we're generally\n-   being traditional.  */\n-int flag_allow_single_precision = 0;\n-\n /* Nonzero means to treat bitfields as signed unless they say `unsigned'.  */\n \n int flag_signed_bitfields = 1;\n@@ -470,15 +462,7 @@ c_decode_option (argc, argv)\n \n   strings_processed = cpp_handle_option (parse_in, argc, argv, 0);\n \n-  if (!strcmp (p, \"-ftraditional\") || !strcmp (p, \"-traditional\"))\n-    {\n-      warning (\"-traditional is deprecated and may be removed\");\n-      flag_traditional = 1;\n-      flag_writable_strings = 1;\n-    }\n-  else if (!strcmp (p, \"-fallow-single-precision\"))\n-    flag_allow_single_precision = 1;\n-  else if (!strcmp (p, \"-fhosted\") || !strcmp (p, \"-fno-freestanding\"))\n+  if (!strcmp (p, \"-fhosted\") || !strcmp (p, \"-fno-freestanding\"))\n     {\n       flag_hosted = 1;\n       flag_no_builtin = 0;\n@@ -491,11 +475,6 @@ c_decode_option (argc, argv)\n       if (warn_main == 2)\n \twarn_main = 0;\n     }\n-  else if (!strcmp (p, \"-fnotraditional\") || !strcmp (p, \"-fno-traditional\"))\n-    {\n-      flag_traditional = 0;\n-      flag_writable_strings = 0;\n-    }\n   else if (!strncmp (p, \"-std=\", 5))\n     {\n       /* Select the appropriate language standard.  We currently\n@@ -516,7 +495,6 @@ c_decode_option (argc, argv)\n \tiso_1990:\n \t  flag_isoc94 = 0;\n \tiso_1994:\n-\t  flag_traditional = 0;\n \t  flag_writable_strings = 0;\n \t  flag_no_asm = 1;\n \t  flag_no_nonansi_builtin = 1;\n@@ -533,7 +511,6 @@ c_decode_option (argc, argv)\n \t       || !strcmp (argstart, \"c9x\")\n \t       || !strcmp (argstart, \"c99\"))\n \t{\n-\t  flag_traditional = 0;\n \t  flag_writable_strings = 0;\n \t  flag_no_asm = 1;\n \t  flag_no_nonansi_builtin = 1;\n@@ -543,7 +520,6 @@ c_decode_option (argc, argv)\n \t}\n       else if (!strcmp (argstart, \"gnu89\"))\n \t{\n-\t  flag_traditional = 0;\n \t  flag_writable_strings = 0;\n \t  flag_no_asm = 0;\n \t  flag_no_nonansi_builtin = 0;\n@@ -553,7 +529,6 @@ c_decode_option (argc, argv)\n \t}\n       else if (!strcmp (argstart, \"gnu9x\") || !strcmp (argstart, \"gnu99\"))\n \t{\n-\t  flag_traditional = 0;\n \t  flag_writable_strings = 0;\n \t  flag_no_asm = 0;\n \t  flag_no_nonansi_builtin = 0;\n@@ -1482,14 +1457,7 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n      match enough.  Ultimately, copy most of the information from the new\n      decl to the old one, and keep using the old one.  */\n \n-  if (flag_traditional && TREE_CODE (newdecl) == FUNCTION_DECL\n-      && IDENTIFIER_IMPLICIT_DECL (DECL_NAME (newdecl)) == olddecl\n-      && DECL_INITIAL (olddecl) == 0)\n-    /* If -traditional, avoid error for redeclaring fcn\n-       after implicit decl.  */\n-    ;\n-  else if (TREE_CODE (olddecl) == FUNCTION_DECL\n-\t   && DECL_BUILT_IN (olddecl))\n+  if (TREE_CODE (olddecl) == FUNCTION_DECL && DECL_BUILT_IN (olddecl))\n     {\n       /* A function declaration for a built-in function.  */\n       if (!TREE_PUBLIC (newdecl))\n@@ -1738,12 +1706,7 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \t\t}\n \t      /* Type for passing arg must be consistent\n \t\t with that declared for the arg.  */\n-\t      if (! comptypes (TREE_VALUE (parm), TREE_VALUE (type))\n-\t\t  /* If -traditional, allow `unsigned int' instead of `int'\n-\t\t     in the prototype.  */\n-\t\t  && (! (flag_traditional\n-\t\t\t && TYPE_MAIN_VARIANT (TREE_VALUE (parm)) == integer_type_node\n-\t\t\t && TYPE_MAIN_VARIANT (TREE_VALUE (type)) == unsigned_type_node)))\n+\t      if (! comptypes (TREE_VALUE (parm), TREE_VALUE (type)))\n \t\t{\n \t\t  error_with_decl (newdecl,\n \t\t\t\t   \"prototype for `%s' follows and argument %d doesn't match\",\n@@ -2194,10 +2157,7 @@ pushdecl (x)\n \t\t IDENTIFIER_POINTER (name));\n \n       t = lookup_name_current_level (name);\n-      /* Don't type check externs here when -traditional.  This is so that\n-\t code with conflicting declarations inside blocks will get warnings\n-\t not errors.  X11 for instance depends on this.  */\n-      if (! t && DECL_EXTERNAL (x) && TREE_PUBLIC (x) && ! flag_traditional)\n+      if (! t && DECL_EXTERNAL (x) && TREE_PUBLIC (x))\n \t{\n \t  t = IDENTIFIER_GLOBAL_VALUE (name);\n \t  /* Type decls at global scope don't conflict with externs declared\n@@ -2216,9 +2176,8 @@ pushdecl (x)\n \t}\n \n       /* If this decl is `static' and an implicit decl was seen previously,\n-\t warn.  But don't complain if -traditional,\n-\t since traditional compilers don't complain.  */\n-      if (! flag_traditional && TREE_PUBLIC (name)\n+\t warn.  */\n+      if (TREE_PUBLIC (name)\n \t  /* Don't test for DECL_EXTERNAL, because grokdeclarator\n \t     sets this for all functions.  */\n \t  && ! TREE_PUBLIC (x)\n@@ -2312,21 +2271,14 @@ pushdecl (x)\n \t}\n \n       /* Multiple external decls of the same identifier ought to match.\n-\t Check against both global declarations (when traditional) and out of\n-\t scope (limbo) block level declarations.\n-\n \t We get warnings about inline functions where they are defined.\n \t Avoid duplicate warnings where they are used.  */\n       if (TREE_PUBLIC (x)\n \t  && ! (TREE_CODE (x) == FUNCTION_DECL && DECL_INLINE (x)))\n \t{\n \t  tree decl;\n \n-\t  if (flag_traditional && IDENTIFIER_GLOBAL_VALUE (name) != 0\n-\t      && (DECL_EXTERNAL (IDENTIFIER_GLOBAL_VALUE (name))\n-\t\t  || TREE_PUBLIC (IDENTIFIER_GLOBAL_VALUE (name))))\n-\t    decl = IDENTIFIER_GLOBAL_VALUE (name);\n-\t  else if (IDENTIFIER_LIMBO_VALUE (name) != 0)\n+\t  if (IDENTIFIER_LIMBO_VALUE (name) != 0)\n \t    /* Decls in limbo are always extern, so no need to check that.  */\n \t    decl = IDENTIFIER_LIMBO_VALUE (name);\n \t  else\n@@ -2356,39 +2308,6 @@ pushdecl (x)\n \t\t\t     \"previous implicit declaration of `%s'\");\n \t}\n \n-      /* In PCC-compatibility mode, extern decls of vars with no current decl\n-\t take effect at top level no matter where they are.  */\n-      if (flag_traditional && DECL_EXTERNAL (x)\n-\t  && lookup_name (name) == 0)\n-\t{\n-\t  tree type = TREE_TYPE (x);\n-\n-\t  /* But don't do this if the type contains temporary nodes.  */\n-\t  while (type)\n-\t    {\n-\t      if (type == error_mark_node)\n-\t\tbreak;\n-\t      if (TYPE_CONTEXT (type))\n-\t\t{\n-\t\t  warning_with_decl (x, \"type of external `%s' is not global\");\n-\t\t  /* By exiting the loop early, we leave TYPE nonzero,\n-\t\t     and thus prevent globalization of the decl.  */\n-\t\t  break;\n-\t\t}\n-\t      else if (TREE_CODE (type) == FUNCTION_TYPE\n-\t\t       && TYPE_ARG_TYPES (type) != 0)\n-\t\t/* The types might not be truly local,\n-\t\t   but the list of arg types certainly is temporary.\n-\t\t   Since prototypes are nontraditional,\n-\t\t   ok not to do the traditional thing.  */\n-\t\tbreak;\n-\t      type = TREE_TYPE (type);\n-\t    }\n-\n-\t  if (type == 0)\n-\t    b = global_binding_level;\n-\t}\n-\n       /* This name is new in its binding level.\n \t Install the new declaration and return it.  */\n       if (b == global_binding_level)\n@@ -2622,8 +2541,7 @@ implicitly_declare (functionid)\n   IDENTIFIER_IMPLICIT_DECL (functionid) = decl;\n \n   /* ANSI standard says implicit declarations are in the innermost block.\n-     So we record the decl in the standard fashion.\n-     If flag_traditional is set, pushdecl does it top-level.  */\n+     So we record the decl in the standard fashion.  */\n   pushdecl (decl);\n \n   /* This is a no-op in c-lang.c or something real in objc-actions.c.  */\n@@ -2671,17 +2589,8 @@ redeclaration_error_message (newdecl, olddecl)\n {\n   if (TREE_CODE (newdecl) == TYPE_DECL)\n     {\n-      if (flag_traditional && TREE_TYPE (newdecl) == TREE_TYPE (olddecl))\n-\treturn 0;\n-      /* pushdecl creates distinct types for TYPE_DECLs by calling\n-\t build_type_copy, so the above comparison generally fails.  We do\n-\t another test against the TYPE_MAIN_VARIANT of the olddecl, which\n-\t is equivalent to what this code used to do before the build_type_copy\n-\t call.  The variant type distinction should not matter for traditional\n-\t code, because it doesn't have type qualifiers.  */\n-      if (flag_traditional\n-\t  && TYPE_MAIN_VARIANT (TREE_TYPE (olddecl)) == TREE_TYPE (newdecl))\n-\treturn 0;\n+      /* Do not complain about type redeclarations where at least one\n+\t declaration was in a system header.  */\n       if (DECL_IN_SYSTEM_HEADER (olddecl) || DECL_IN_SYSTEM_HEADER (newdecl))\n \treturn 0;\n       return 1;\n@@ -3226,11 +3135,6 @@ builtin_function (name, type, function_code, class, library_name)\n   tree decl = build_decl (FUNCTION_DECL, get_identifier (name), type);\n   DECL_EXTERNAL (decl) = 1;\n   TREE_PUBLIC (decl) = 1;\n-  /* If -traditional, permit redefining a builtin function any way you like.\n-     (Though really, if the program redefines these functions,\n-     it probably won't work right unless compiled with -fno-builtin.)  */\n-  if (flag_traditional && name[0] != '_')\n-    DECL_BUILT_IN_NONANSI (decl) = 1;\n   if (library_name)\n     SET_DECL_ASSEMBLER_NAME (decl, get_identifier (library_name));\n   make_decl_rtl (decl, NULL);\n@@ -4319,9 +4223,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n   /* Decide whether an integer type is signed or not.\n      Optionally treat bitfields as signed by default.  */\n   if (specbits & 1 << (int) RID_UNSIGNED\n-      /* Traditionally, all bitfields are unsigned.  */\n-      || (bitfield && flag_traditional\n-\t  && (! explicit_flag_signed_bitfields || !flag_signed_bitfields))\n       || (bitfield && ! flag_signed_bitfields\n \t  && (explicit_int || defaulted_int || explicit_char\n \t      /* A typedef for plain `int' without `signed'\n@@ -4735,13 +4636,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t      type = integer_type_node;\n \t    }\n \n-#ifndef TRADITIONAL_RETURN_FLOAT\n-\t  /* Traditionally, declaring return type float means double.  */\n-\n-\t  if (flag_traditional && TYPE_MAIN_VARIANT (type) == float_type_node)\n-\t    type = double_type_node;\n-#endif /* TRADITIONAL_RETURN_FLOAT */\n-\n \t  /* Construct the function type and go to the next\n \t     inner layer of declarator.  */\n \n@@ -5634,7 +5528,7 @@ finish_struct (t, fieldlist, attributes)\n \tif (pedantic)\n \t  pedwarn (\"%s defined inside parms\",\n \t\t   TREE_CODE (t) == UNION_TYPE ? _(\"union\") : _(\"structure\"));\n-\telse if (! flag_traditional)\n+\telse\n \t  warning (\"%s defined inside parms\",\n \t\t   TREE_CODE (t) == UNION_TYPE ? _(\"union\") : _(\"structure\"));\n       }\n@@ -6172,8 +6066,7 @@ build_enumerator (name, value)\n   type = TREE_TYPE (value);\n   type = type_for_size (MAX (TYPE_PRECISION (type),\n \t\t\t     TYPE_PRECISION (integer_type_node)),\n-\t\t\t((flag_traditional\n-\t\t\t  || TYPE_PRECISION (type) >= TYPE_PRECISION (integer_type_node))\n+\t\t\t(TYPE_PRECISION (type) >= TYPE_PRECISION (integer_type_node)\n \t\t\t && TREE_UNSIGNED (type)));\n \n   decl = build_decl (CONST_DECL, name, type);\n@@ -6402,12 +6295,10 @@ start_function (declspecs, declarator, attributes)\n   /* Promote the value to int before returning it.  */\n   if (c_promoting_integer_type_p (restype))\n     {\n-      /* It retains unsignedness if traditional\n-\t or if not really getting wider.  */\n+      /* It retains unsignedness if not really getting wider.  */\n       if (TREE_UNSIGNED (restype)\n-\t  && (flag_traditional\n-\t      || (TYPE_PRECISION (restype)\n-\t\t  == TYPE_PRECISION (integer_type_node))))\n+\t  && (TYPE_PRECISION (restype)\n+\t\t  == TYPE_PRECISION (integer_type_node)))\n \trestype = unsigned_type_node;\n       else\n \trestype = integer_type_node;\n@@ -6626,15 +6517,6 @@ store_parm_decls ()\n \t      layout_decl (found, 0);\n \t    }\n \n-\t  /* Traditionally, a parm declared float is actually a double.  */\n-\t  if (found && flag_traditional\n-\t      && TYPE_MAIN_VARIANT (TREE_TYPE (found)) == float_type_node)\n-\t    {\n-\t      TREE_TYPE (found) = double_type_node;\n-\t      DECL_ARG_TYPE (found) = double_type_node;\n-\t      layout_decl (found, 0);\n-\t    }\n-\n \t  /* If no declaration found, default to int.  */\n \t  if (!found)\n \t    {\n@@ -6768,11 +6650,7 @@ store_parm_decls ()\n \t\t\t     \"prototype declaration\");\n \t\t\t}\n \t\t    }\n-\t\t  /* If -traditional, allow `int' argument to match\n-\t\t     `unsigned' prototype.  */\n-\t\t  else if (! (flag_traditional\n-\t\t\t      && TYPE_MAIN_VARIANT (TREE_TYPE (parm)) == integer_type_node\n-\t\t\t      && TYPE_MAIN_VARIANT (TREE_VALUE (type)) == unsigned_type_node))\n+\t\t  else\n \t\t    {\n \t\t      error (\"argument `%s' doesn't match prototype\",\n \t\t\t     IDENTIFIER_POINTER (DECL_NAME (parm)));\n@@ -6903,13 +6781,6 @@ finish_function (nested)\n \n   DECL_CONTEXT (DECL_RESULT (fndecl)) = fndecl;\n \n-  /* Obey `register' declarations if `setjmp' is called in this fn.  */\n-  if (flag_traditional && current_function_calls_setjmp)\n-    {\n-      setjmp_protect (DECL_INITIAL (fndecl));\n-      setjmp_protect_args ();\n-    }\n-\n   if (MAIN_NAME_P (DECL_NAME (fndecl)) && flag_hosted)\n     {\n       if (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (fndecl)))"}, {"sha": "8c5c3e7e0b8a6a2dc410d3284affc9d3f8d68e62", "filename": "gcc/c-lex.c", "status": "modified", "additions": 38, "deletions": 54, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -1065,7 +1065,7 @@ lex_number (str, len)\n #ifdef ERANGE\n       /* ERANGE is also reported for underflow,\n \t so test the value to distinguish overflow from that.  */\n-      if (conversion_errno == ERANGE && !flag_traditional && pedantic\n+      if (conversion_errno == ERANGE && pedantic\n \t  && (REAL_VALUES_LESS (dconst1, real)\n \t      || REAL_VALUES_LESS (real, dconstm1)))\n \twarning (\"floating point number exceeds range of 'double'\");\n@@ -1080,7 +1080,7 @@ lex_number (str, len)\n     }\n   else\n     {\n-      tree trad_type, ansi_type, type;\n+      tree trad_type, type;\n       HOST_WIDE_INT high, low;\n       int spec_unsigned = 0;\n       int spec_long = 0;\n@@ -1089,7 +1089,7 @@ lex_number (str, len)\n       int suffix_lu = 0;\n       int warn = 0, i;\n \n-      trad_type = ansi_type = type = NULL_TREE;\n+      trad_type = type = NULL_TREE;\n       while (p < str + len)\n \t{\n \t  c = *p++;\n@@ -1161,11 +1161,9 @@ lex_number (str, len)\n       TREE_TYPE (value) = long_long_unsigned_type_node;\n \n       /* If warn_traditional, calculate both the ISO type and the\n-\t traditional type, then see if they disagree.\n-\t Otherwise, calculate only the type for the dialect in use.  */\n-      if (warn_traditional || flag_traditional)\n+\t traditional type, then see if they disagree.  */\n+      if (warn_traditional)\n \t{\n-\t  /* Calculate the traditional type.  */\n \t  /* Traditionally, any constant is signed; but if unsigned is\n \t     specified explicitly, obey that.  Use the smallest size\n \t     with the right number of bits, except for one special\n@@ -1195,50 +1193,46 @@ lex_number (str, len)\n \t\t\t ? widest_unsigned_literal_type_node\n \t\t\t : widest_integer_literal_type_node);\n \t}\n-      if (warn_traditional || ! flag_traditional)\n-\t{\n-\t  /* Calculate the ISO type.  */\n-\t  if (! spec_long && ! spec_unsigned\n-\t      && int_fits_type_p (value, integer_type_node))\n-\t    ansi_type = integer_type_node;\n-\t  else if (! spec_long && (base != 10 || spec_unsigned)\n-\t\t   && int_fits_type_p (value, unsigned_type_node))\n-\t    ansi_type = unsigned_type_node;\n-\t  else if (! spec_unsigned && !spec_long_long\n-\t\t   && int_fits_type_p (value, long_integer_type_node))\n-\t    ansi_type = long_integer_type_node;\n-\t  else if (! spec_long_long\n-\t\t   && int_fits_type_p (value, long_unsigned_type_node))\n-\t    ansi_type = long_unsigned_type_node;\n-\t  else if (! spec_unsigned\n-\t\t   && int_fits_type_p (value, long_long_integer_type_node))\n-\t    ansi_type = long_long_integer_type_node;\n-\t  else if (int_fits_type_p (value, long_long_unsigned_type_node))\n-\t    ansi_type = long_long_unsigned_type_node;\n-\t  else if (! spec_unsigned\n-\t\t   && int_fits_type_p (value, widest_integer_literal_type_node))\n-\t    ansi_type = widest_integer_literal_type_node;\n-\t  else\n-\t    ansi_type = widest_unsigned_literal_type_node;\n-\t}\n-\n-      type = flag_traditional ? trad_type : ansi_type;\n+\t\n+\t/* Calculate the ISO type.  */\n+\tif (! spec_long && ! spec_unsigned\n+\t    && int_fits_type_p (value, integer_type_node))\n+\t  type = integer_type_node;\n+\telse if (! spec_long && (base != 10 || spec_unsigned)\n+\t\t && int_fits_type_p (value, unsigned_type_node))\n+\t  type = unsigned_type_node;\n+\telse if (! spec_unsigned && !spec_long_long\n+\t\t && int_fits_type_p (value, long_integer_type_node))\n+\t  type = long_integer_type_node;\n+\telse if (! spec_long_long\n+\t\t && int_fits_type_p (value, long_unsigned_type_node))\n+\t  type = long_unsigned_type_node;\n+\telse if (! spec_unsigned\n+\t\t && int_fits_type_p (value, long_long_integer_type_node))\n+\t  type = long_long_integer_type_node;\n+\telse if (int_fits_type_p (value, long_long_unsigned_type_node))\n+\t  type = long_long_unsigned_type_node;\n+\telse if (! spec_unsigned\n+\t\t && int_fits_type_p (value, widest_integer_literal_type_node))\n+\t  type = widest_integer_literal_type_node;\n+\telse\n+\t  type = widest_unsigned_literal_type_node;\n \n       /* We assume that constants specified in a non-decimal\n \t base are bit patterns, and that the programmer really\n \t meant what they wrote.  */\n       if (warn_traditional && !in_system_header\n-\t  && base == 10 && trad_type != ansi_type)\n+\t  && base == 10 && trad_type != type)\n \t{\n-\t  if (TYPE_PRECISION (trad_type) != TYPE_PRECISION (ansi_type))\n-\t    warning (\"width of integer constant changes with -traditional\");\n-\t  else if (TREE_UNSIGNED (trad_type) != TREE_UNSIGNED (ansi_type))\n-\t    warning (\"integer constant is unsigned in ISO C, signed with -traditional\");\n+\t  if (TYPE_PRECISION (trad_type) != TYPE_PRECISION (type))\n+\t    warning (\"width of integer constant is different in traditional C\");\n+\t  else if (TREE_UNSIGNED (trad_type) != TREE_UNSIGNED (type))\n+\t    warning (\"integer constant is unsigned in ISO C, signed in traditional C\");\n \t  else\n-\t    warning (\"width of integer constant may change on other systems with -traditional\");\n+\t    warning (\"width of integer constant may change on other systems in traditional C\");\n \t}\n \n-      if (pedantic && !flag_traditional && (flag_isoc99 || !spec_long_long)\n+      if (pedantic && (flag_isoc99 || !spec_long_long)\n \t  && !warn\n \t  && ((flag_isoc99\n \t       ? TYPE_PRECISION (long_long_integer_type_node)\n@@ -1265,15 +1259,6 @@ lex_number (str, len)\n \t  else\n \t    ERROR (\"complex integer constant is too wide for 'complex int'\");\n \t}\n-      else if (flag_traditional && !int_fits_type_p (value, type))\n-\t/* The traditional constant 0x80000000 is signed\n-\t   but doesn't fit in the range of int.\n-\t   This will change it to -0x80000000, which does fit.  */\n-\t{\n-\t  TREE_TYPE (value) = unsigned_type (type);\n-\t  value = convert (type, value);\n-\t  TREE_OVERFLOW (value) = TREE_CONSTANT_OVERFLOW (value) = 0;\n-\t}\n       else\n \tTREE_TYPE (value) = type;\n \n@@ -1345,8 +1330,7 @@ lex_string (str, len, wide)\n \t  else\n \t    mask = ~0;\n \t  c = cpp_parse_escape (parse_in, (const unsigned char **) &p,\n-\t\t\t\t(const unsigned char *) limit,\n-\t\t\t\tmask, flag_traditional);\n+\t\t\t\t(const unsigned char *) limit, mask);\n \t}\n \t\n       /* Add this single character into the buffer either as a wchar_t\n@@ -1409,7 +1393,7 @@ lex_charconst (token)\n   unsigned int chars_seen;\n  \n   result = cpp_interpret_charconst (parse_in, token, warn_multichar,\n- \t\t\t\t    flag_traditional, &chars_seen);\n+ \t\t\t\t    &chars_seen);\n   if (token->type == CPP_WCHAR)\n     {\n       value = build_int_2 (result, 0);"}, {"sha": "bae43d5761db1db2c3a918f647e5ffb45a2d4076", "filename": "gcc/c-parse.in", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -367,7 +367,7 @@ datadef:\n \t  setspecs notype_initdecls ';'\n \t\t{ if (pedantic)\n \t\t    error (\"ISO C forbids data definition with no type or storage class\");\n-\t\t  else if (!flag_traditional)\n+\t\t  else\n \t\t    warning (\"data definition has no type or storage class\"); \n \n \t\t  POP_DECLSPEC_STACK; }\n@@ -3280,11 +3280,10 @@ struct resword\n \n /* Disable mask.  Keywords are disabled if (reswords[i].disable & mask) is\n    _true_.  */\n-#define D_TRAD\t0x01\t/* not in traditional C */\n-#define D_C89\t0x02\t/* not in C89 */\n-#define D_EXT\t0x04\t/* GCC extension */\n-#define D_EXT89\t0x08\t/* GCC extension incorporated in C99 */\n-#define D_OBJC\t0x10\t/* Objective C only */\n+#define D_C89\t0x01\t/* not in C89 */\n+#define D_EXT\t0x02\t/* GCC extension */\n+#define D_EXT89\t0x04\t/* GCC extension incorporated in C99 */\n+#define D_OBJC\t0x08\t/* Objective C only */\n \n static const struct resword reswords[] =\n {\n@@ -3337,7 +3336,7 @@ static const struct resword reswords[] =\n   { \"break\",\t\tRID_BREAK,\t0 },\n   { \"case\",\t\tRID_CASE,\t0 },\n   { \"char\",\t\tRID_CHAR,\t0 },\n-  { \"const\",\t\tRID_CONST,\tD_TRAD },\n+  { \"const\",\t\tRID_CONST,\t0 },\n   { \"continue\",\t\tRID_CONTINUE,\t0 },\n   { \"default\",\t\tRID_DEFAULT,\t0 },\n   { \"do\",\t\tRID_DO,\t\t0 },\n@@ -3349,24 +3348,24 @@ static const struct resword reswords[] =\n   { \"for\",\t\tRID_FOR,\t0 },\n   { \"goto\",\t\tRID_GOTO,\t0 },\n   { \"if\",\t\tRID_IF,\t\t0 },\n-  { \"inline\",\t\tRID_INLINE,\tD_TRAD|D_EXT89 },\n+  { \"inline\",\t\tRID_INLINE,\tD_EXT89 },\n   { \"int\",\t\tRID_INT,\t0 },\n   { \"long\",\t\tRID_LONG,\t0 },\n   { \"register\",\t\tRID_REGISTER,\t0 },\n-  { \"restrict\",\t\tRID_RESTRICT,\tD_TRAD|D_C89 },\n+  { \"restrict\",\t\tRID_RESTRICT,\tD_C89 },\n   { \"return\",\t\tRID_RETURN,\t0 },\n   { \"short\",\t\tRID_SHORT,\t0 },\n-  { \"signed\",\t\tRID_SIGNED,\tD_TRAD },\n+  { \"signed\",\t\tRID_SIGNED,\t0 },\n   { \"sizeof\",\t\tRID_SIZEOF,\t0 },\n   { \"static\",\t\tRID_STATIC,\t0 },\n   { \"struct\",\t\tRID_STRUCT,\t0 },\n   { \"switch\",\t\tRID_SWITCH,\t0 },\n   { \"typedef\",\t\tRID_TYPEDEF,\t0 },\n-  { \"typeof\",\t\tRID_TYPEOF,\tD_TRAD|D_EXT },\n+  { \"typeof\",\t\tRID_TYPEOF,\tD_EXT },\n   { \"union\",\t\tRID_UNION,\t0 },\n   { \"unsigned\",\t\tRID_UNSIGNED,\t0 },\n   { \"void\",\t\tRID_VOID,\t0 },\n-  { \"volatile\",\t\tRID_VOLATILE,\tD_TRAD },\n+  { \"volatile\",\t\tRID_VOLATILE,\t0 },\n   { \"while\",\t\tRID_WHILE,\t0 },\n ifobjc\n   { \"id\",\t\tRID_ID,\t\t\tD_OBJC },\n@@ -3545,7 +3544,6 @@ init_reswords ()\n   unsigned int i;\n   tree id;\n   int mask = (flag_isoc99 ? 0 : D_C89)\n-\t      | (flag_traditional ? D_TRAD : 0)\n \t      | (flag_no_asm ? (flag_isoc99 ? D_EXT : D_EXT|D_EXT89) : 0);\n \n   if (c_language != clk_objective_c)"}, {"sha": "064ee0889a9e26018a3bc27ea03563ce6ac3cbca", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -348,10 +348,6 @@ extern int warn_char_subscripts;\n \n extern int warn_main;\n \n-/* Nonzero means to allow single precision math even if we're generally\n-   being traditional.  */\n-extern int flag_allow_single_precision;\n-\n /* Warn if initializer is not completely bracketed.  */\n \n extern int warn_missing_braces;"}, {"sha": "780a3f2ce821e1ff031f0e786654603bdfd17f82", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 30, "deletions": 93, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -996,9 +996,8 @@ default_conversion (exp)\n     {\n       type = type_for_size (MAX (TYPE_PRECISION (type),\n \t\t\t\t TYPE_PRECISION (integer_type_node)),\n-\t\t\t    ((flag_traditional\n-\t\t\t      || (TYPE_PRECISION (type)\n-\t\t\t\t  >= TYPE_PRECISION (integer_type_node)))\n+\t\t\t    ((TYPE_PRECISION (type)\n+\t\t\t      >= TYPE_PRECISION (integer_type_node))\n \t\t\t     && TREE_UNSIGNED (type)));\n \n       return convert (type, exp);\n@@ -1010,26 +1009,18 @@ default_conversion (exp)\n \t c_promoting_integer_type_p, otherwise leave it alone.  */\n       && 0 > compare_tree_int (DECL_SIZE (TREE_OPERAND (exp, 1)),\n \t\t\t       TYPE_PRECISION (integer_type_node)))\n-    return convert (flag_traditional && TREE_UNSIGNED (type)\n-\t\t    ? unsigned_type_node : integer_type_node,\n-\t\t    exp);\n+    return convert (integer_type_node, exp);\n \n   if (c_promoting_integer_type_p (type))\n     {\n-      /* Traditionally, unsignedness is preserved in default promotions.\n-         Also preserve unsignedness if not really getting any wider.  */\n+      /* Preserve unsignedness if not really getting any wider.  */\n       if (TREE_UNSIGNED (type)\n-\t  && (flag_traditional\n-\t      || TYPE_PRECISION (type) == TYPE_PRECISION (integer_type_node)))\n+\t  && TYPE_PRECISION (type) == TYPE_PRECISION (integer_type_node))\n \treturn convert (unsigned_type_node, exp);\n \n       return convert (integer_type_node, exp);\n     }\n \n-  if (flag_traditional && !flag_allow_single_precision\n-      && TYPE_MAIN_VARIANT (type) == float_type_node)\n-    return convert (double_type_node, exp);\n-\n   if (code == VOID_TYPE)\n     {\n       error (\"void value not ignored as it ought to be\");\n@@ -2120,18 +2111,14 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t\t}\n \t    }\n \n-\t  /* Use the type of the value to be shifted.\n-\t     This is what most traditional C compilers do.  */\n+\t  /* Use the type of the value to be shifted.  */\n \t  result_type = type0;\n-\t  /* Unless traditional, convert the shift-count to an integer,\n-\t     regardless of size of value being shifted.  */\n-\t  if (! flag_traditional)\n-\t    {\n-\t      if (TYPE_MAIN_VARIANT (TREE_TYPE (op1)) != integer_type_node)\n-\t\top1 = convert (integer_type_node, op1);\n-\t      /* Avoid converting op1 to result_type later.  */\n-\t      converted = 1;\n-\t    }\n+\t  /* Convert the shift-count to an integer, regardless of size\n+\t     of value being shifted.  */\n+\t  if (TYPE_MAIN_VARIANT (TREE_TYPE (op1)) != integer_type_node)\n+\t    op1 = convert (integer_type_node, op1);\n+\t  /* Avoid converting op1 to result_type later.  */\n+\t  converted = 1;\n \t}\n       break;\n \n@@ -2147,18 +2134,14 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t\twarning (\"left shift count >= width of type\");\n \t    }\n \n-\t  /* Use the type of the value to be shifted.\n-\t     This is what most traditional C compilers do.  */\n+\t  /* Use the type of the value to be shifted.  */\n \t  result_type = type0;\n-\t  /* Unless traditional, convert the shift-count to an integer,\n-\t     regardless of size of value being shifted.  */\n-\t  if (! flag_traditional)\n-\t    {\n-\t      if (TYPE_MAIN_VARIANT (TREE_TYPE (op1)) != integer_type_node)\n-\t\top1 = convert (integer_type_node, op1);\n-\t      /* Avoid converting op1 to result_type later.  */\n-\t      converted = 1;\n-\t    }\n+\t  /* Convert the shift-count to an integer, regardless of size\n+\t     of value being shifted.  */\n+\t  if (TYPE_MAIN_VARIANT (TREE_TYPE (op1)) != integer_type_node)\n+\t    op1 = convert (integer_type_node, op1);\n+\t  /* Avoid converting op1 to result_type later.  */\n+\t  converted = 1;\n \t}\n       break;\n \n@@ -2174,18 +2157,14 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t\twarning (\"shift count >= width of type\");\n \t    }\n \n-\t  /* Use the type of the value to be shifted.\n-\t     This is what most traditional C compilers do.  */\n+\t  /* Use the type of the value to be shifted.  */\n \t  result_type = type0;\n-\t  /* Unless traditional, convert the shift-count to an integer,\n-\t     regardless of size of value being shifted.  */\n-\t  if (! flag_traditional)\n-\t    {\n-\t      if (TYPE_MAIN_VARIANT (TREE_TYPE (op1)) != integer_type_node)\n-\t\top1 = convert (integer_type_node, op1);\n-\t      /* Avoid converting op1 to result_type later.  */\n-\t      converted = 1;\n-\t    }\n+\t  /* Convert the shift-count to an integer, regardless of size\n+\t     of value being shifted.  */\n+\t  if (TYPE_MAIN_VARIANT (TREE_TYPE (op1)) != integer_type_node)\n+\t    op1 = convert (integer_type_node, op1);\n+\t  /* Avoid converting op1 to result_type later.  */\n+\t  converted = 1;\n \t}\n       break;\n \n@@ -2239,14 +2218,12 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n       else if (code0 == POINTER_TYPE && code1 == INTEGER_TYPE)\n \t{\n \t  result_type = type0;\n-\t  if (! flag_traditional)\n-\t    pedwarn (\"comparison between pointer and integer\");\n+\t  pedwarn (\"comparison between pointer and integer\");\n \t}\n       else if (code0 == INTEGER_TYPE && code1 == POINTER_TYPE)\n \t{\n \t  result_type = type1;\n-\t  if (! flag_traditional)\n-\t    pedwarn (\"comparison between pointer and integer\");\n+\t  pedwarn (\"comparison between pointer and integer\");\n \t}\n       break;\n \n@@ -2315,14 +2292,12 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n       else if (code0 == POINTER_TYPE && code1 == INTEGER_TYPE)\n \t{\n \t  result_type = type0;\n-\t  if (! flag_traditional)\n-\t    pedwarn (\"comparison between pointer and integer\");\n+\t  pedwarn (\"comparison between pointer and integer\");\n \t}\n       else if (code0 == INTEGER_TYPE && code1 == POINTER_TYPE)\n \t{\n \t  result_type = type1;\n-\t  if (! flag_traditional)\n-\t    pedwarn (\"comparison between pointer and integer\");\n+\t  pedwarn (\"comparison between pointer and integer\");\n \t}\n       break;\n \n@@ -4818,44 +4793,6 @@ digest_init (type, init, require_constant, constructor_constant)\n       return error_mark_node;\n     }\n \n-  /* Traditionally, you can write  struct foo x = 0;\n-     and it initializes the first element of x to 0.  */\n-  if (flag_traditional)\n-    {\n-      tree top = 0, prev = 0, otype = type;\n-      while (TREE_CODE (type) == RECORD_TYPE\n-\t     || TREE_CODE (type) == ARRAY_TYPE\n-\t     || TREE_CODE (type) == QUAL_UNION_TYPE\n-\t     || TREE_CODE (type) == UNION_TYPE)\n-\t{\n-\t  tree temp = build (CONSTRUCTOR, type, NULL_TREE, NULL_TREE);\n-\t  if (prev == 0)\n-\t    top = temp;\n-\t  else\n-\t    TREE_OPERAND (prev, 1) = build_tree_list (NULL_TREE, temp);\n-\t  prev = temp;\n-\t  if (TREE_CODE (type) == ARRAY_TYPE)\n-\t    type = TREE_TYPE (type);\n-\t  else if (TYPE_FIELDS (type))\n-\t    type = TREE_TYPE (TYPE_FIELDS (type));\n-\t  else\n-\t    {\n-\t      error_init (\"invalid initializer\");\n-\t      return error_mark_node;\n-\t    }\n-\t}\n-\n-      if (otype != type)\n-\t{\n-\t  TREE_OPERAND (prev, 1)\n-\t    = build_tree_list (NULL_TREE,\n-\t\t\t       digest_init (type, init, require_constant,\n-\t\t\t\t\t    constructor_constant));\n-\t  return top;\n-\t}\n-      else\n-\treturn error_mark_node;\n-    }\n   error_init (\"invalid initializer\");\n   return error_mark_node;\n }"}, {"sha": "da5796e8c31235ca93d8968f1a0d351e34fa61b7", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -1,3 +1,9 @@\n+2002-02-27  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* ch-tree.h, decl.c: Delete traditional-mode-related code\n+\tcopied from the C front end but not used, or used only to\n+\tpermit the compiler to link.\n+\n 2002-01-11  Craig Rodrigues  <rodrigc@gcc.gnu.org>\n \n \tPR other/5299"}, {"sha": "4b26e006c954fba7ebb32eccd23e75b50bb277d7", "filename": "gcc/ch/ch-tree.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fch%2Fch-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fch%2Fch-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fch-tree.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -427,10 +427,6 @@ extern int warn_nested_externs;\n \n extern int warn_cast_qual;\n \n-/* Warn about traditional constructs whose meanings changed in ANSI C.  */\n-\n-extern int warn_traditional;\n-\n /* Warn about *printf or *scanf format/argument anomalies. */\n \n extern int warn_format;\n@@ -447,10 +443,6 @@ extern int warn_conversion;\n \n extern int warn_switch;\n \n-/* Nonzero means do some things the same way PCC does.  */\n-\n-extern int flag_traditional;\n-\n /* Nonzero means warn about suggesting putting in ()'s.  */\n \n extern int warn_parentheses;"}, {"sha": "02070baffdd2bce281efb3775ba77fffd4453ec0", "filename": "gcc/ch/decl.c", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fch%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fch%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fdecl.c?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -462,14 +462,6 @@ int flag_no_builtin;\n \n int flag_no_nonansi_builtin;\n \n-/* Nonzero means do some things the same way PCC does.  */\n-\n-int flag_traditional;\n-\n-/* Nonzero means to allow single precision math even if we're generally\n-   being traditional. */\n-int flag_allow_single_precision = 0;\n-\n /* Nonzero means to treat bitfields as signed unless they say `unsigned'.  */\n \n int flag_signed_bitfields = 1;\n@@ -617,21 +609,8 @@ c_decode_option (argc, argv)\n      char **argv;\n {\n   char *p = argv[0];\n-  if (!strcmp (p, \"-ftraditional\") || !strcmp (p, \"-traditional\"))\n-    {\n-      flag_traditional = 1;\n-      flag_writable_strings = 1;\n-#if DOLLARS_IN_IDENTIFIERS > 0\n-      dollars_in_ident = 1;\n-#endif\n-    }\n-  else if (!strcmp (p, \"-fnotraditional\") || !strcmp (p, \"-fno-traditional\"))\n-    {\n-      flag_traditional = 0;\n-      flag_writable_strings = 0;\n-      dollars_in_ident = DOLLARS_IN_IDENTIFIERS > 1;\n-    }\n-  else if (!strcmp (p, \"-fsigned-char\"))\n+\n+  if (!strcmp (p, \"-fsigned-char\"))\n     flag_signed_char = 1;\n   else if (!strcmp (p, \"-funsigned-char\"))\n     flag_signed_char = 0;\n@@ -4071,11 +4050,6 @@ builtin_function (name, type, function_code, class, library_name)\n   tree decl = build_decl (FUNCTION_DECL, get_identifier (name), type);\n   DECL_EXTERNAL (decl) = 1;\n   TREE_PUBLIC (decl) = 1;\n-  /* If -traditional, permit redefining a builtin function any way you like.\n-     (Though really, if the program redefines these functions,\n-     it probably won't work right unless compiled with -fno-builtin.)  */\n-  if (flag_traditional && name[0] != '_')\n-    DECL_BUILT_IN_NONANSI (decl) = 1;\n   if (library_name)\n     DECL_ASSEMBLER_NAME (decl) = get_identifier (library_name);\n   make_decl_rtl (decl, NULL_PTR, 1);"}, {"sha": "8c0fffabadce23bce1da38fd96f8b5eada4da5c8", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 56, "deletions": 68, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -126,9 +126,8 @@ extern int target_flags;\n  -D__NO_INLINE_MATH -D__NO_INLINE_STDLIB\t\t\t\t\\\n  -D_IEEE_FLOAT_\t\t\t\t\t\t\t\t\\\n  %{.S:-P}\t\t\t\t\t\t\t\t\\\n- %{!traditional:-D__stdc__}\t\t\t\t\t\t\\\n- %{!traditional:-D_LONGLONG}\t\t\t\t\t\t\\\n- %{!traditional:-Ds64_t=long\\\\ long -Du64_t=unsigned\\\\ long\\\\ long}\t\\\n+ -D__stdc__ -D_LONGLONG\t\t\t\t\t\t\t\\\n+ -Ds64_t=long\\\\ long -Du64_t=unsigned\\\\ long\\\\ long\t\t\t\\\n  %{!ansi:-D_POSIX_SOURCE}\t\t\t\t\t\t\\\n  %{!ansi:-D_CONVEX_SOURCE}\"\n \n@@ -144,21 +143,20 @@ extern int target_flags;\n  -D__NO_INLINE_MATH -D__NO_INLINE_STDLIB\t\t\t\t\\\n  -D_CONVEX_FLOAT_\t\t\t\t\t\t\t\\\n  %{.S:-P}\t\t\t\t\t\t\t\t\\\n- %{!traditional:-D__stdc__}\t\t\t\t\t\t\\\n- %{!traditional:-D_LONGLONG}\t\t\t\t\t\t\\\n- %{!traditional:-Ds64_t=long\\\\ long -Du64_t=unsigned\\\\ long\\\\ long}\t\\\n+ -D__stdc__ -D_LONGLONG\t\t\t\t\t\t\t\\\n+ -Ds64_t=long\\\\ long -Du64_t=unsigned\\\\ long\\\\ long\t\t\t\\\n  %{!ansi:-D_POSIX_SOURCE}\t\t\t\t\t\t\\\n  %{!ansi:-D_CONVEX_SOURCE}\"\n \n #endif\n \n #define LIB_SPEC\t\t\t\t\t\t\t\\\n-\"%{!mc2:%{!mc32:%{!mc34:%{!mc38:-lC1%{traditional:_old}%{p:_p}%{pg:_p}}}}} \\\n- %{mc2:-lC2%{traditional:_old}%{p:_p}%{pg:_p}}\t\t\t\t\\\n- %{mc32:-lC2%{traditional:_old}%{p:_p}%{pg:_p}}\t\t\t\t\\\n- %{mc34:-lC2%{traditional:_old}%{p:_p}%{pg:_p}}\t\t\t\t\\\n- %{mc38:-lC2%{traditional:_old}%{p:_p}%{pg:_p}}\t\t\t\t\\\n- -lc%{traditional:_old}%{p:_p}%{pg:_p}\"\n+\"%{!mc2:%{!mc32:%{!mc34:%{!mc38:-lC1%{p:_p}%{pg:_p}}}}} \\\n+ %{mc2:-lC2%{p:_p}%{pg:_p}}\t\t\t\t\\\n+ %{mc32:-lC2%{p:_p}%{pg:_p}}\t\t\t\t\\\n+ %{mc34:-lC2%{p:_p}%{pg:_p}}\t\t\t\t\\\n+ %{mc38:-lC2%{p:_p}%{pg:_p}}\t\t\t\t\\\n+ -lc%{p:_p}%{pg:_p}\"\n \n #endif\n \n@@ -178,9 +176,8 @@ extern int target_flags;\n  -D__NO_INLINE_MATH -D__NO_INLINE_STDLIB\t\t\t\t\\\n  -D_IEEE_FLOAT_\t\t\t\t\t\t\t\t\\\n  %{.S:-P}\t\t\t\t\t\t\t\t\\\n- %{!traditional:-D__stdc__}\t\t\t\t\t\t\\\n- %{!traditional:-D_LONGLONG}\t\t\t\t\t\t\\\n- %{!traditional:-Ds64_t=long\\\\ long -Du64_t=unsigned\\\\ long\\\\ long}\t\\\n+ -D__stdc__ -D_LONGLONG\t\t\t\t\t\t\t\\\n+ -Ds64_t=long\\\\ long -Du64_t=unsigned\\\\ long\\\\ long\t\t\t\\\n  %{!ansi:-D_POSIX_SOURCE}\t\t\t\t\t\t\\\n  %{!ansi:-D_CONVEX_SOURCE}\"\n \n@@ -196,21 +193,20 @@ extern int target_flags;\n  -D__NO_INLINE_MATH -D__NO_INLINE_STDLIB\t\t\t\t\\\n  -D_CONVEX_FLOAT_\t\t\t\t\t\t\t\\\n  %{.S:-P}\t\t\t\t\t\t\t\t\\\n- %{!traditional:-D__stdc__}\t\t\t\t\t\t\\\n- %{!traditional:-D_LONGLONG}\t\t\t\t\t\t\\\n- %{!traditional:-Ds64_t=long\\\\ long -Du64_t=unsigned\\\\ long\\\\ long}\t\\\n+ -D__stdc__ -D_LONGLONG\t\t\t\t\t\t\t\\\n+ -Ds64_t=long\\\\ long -Du64_t=unsigned\\\\ long\\\\ long\t\t\t\\\n  %{!ansi:-D_POSIX_SOURCE}\t\t\t\t\t\t\\\n  %{!ansi:-D_CONVEX_SOURCE}\"\n \n #endif\n \n #define LIB_SPEC\t\t\t\t\t\t\t\\\n-\"%{mc1:-lC1%{traditional:_old}%{p:_p}%{pg:_p}}\t\t\t\t\\\n- %{!mc1:%{!mc32:%{!mc34:%{!mc38:-lC2%{traditional:_old}%{p:_p}%{pg:_p}}}}} \\\n- %{mc32:-lC2%{traditional:_old}%{p:_p}%{pg:_p}}\t\t\t\t\\\n- %{mc34:-lC2%{traditional:_old}%{p:_p}%{pg:_p}}\t\t\t\t\\\n- %{mc38:-lC2%{traditional:_old}%{p:_p}%{pg:_p}}\t\t\t\t\\\n- -lc%{traditional:_old}%{p:_p}%{pg:_p}\"\n+\"%{mc1:-lC1%{p:_p}%{pg:_p}}\t\t\t\t\\\n+ %{!mc1:%{!mc32:%{!mc34:%{!mc38:-lC2%{p:_p}%{pg:_p}}}}} \\\n+ %{mc32:-lC2%{p:_p}%{pg:_p}}\t\t\t\t\\\n+ %{mc34:-lC2%{p:_p}%{pg:_p}}\t\t\t\t\\\n+ %{mc38:-lC2%{p:_p}%{pg:_p}}\t\t\t\t\\\n+ -lc%{p:_p}%{pg:_p}\"\n \n #endif\n \n@@ -230,9 +226,8 @@ extern int target_flags;\n  -D__NO_INLINE_MATH -D__NO_INLINE_STDLIB\t\t\t\t\\\n  -D_IEEE_FLOAT_\t\t\t\t\t\t\t\t\\\n  %{.S:-P}\t\t\t\t\t\t\t\t\\\n- %{!traditional:-D__stdc__}\t\t\t\t\t\t\\\n- %{!traditional:-D_LONGLONG}\t\t\t\t\t\t\\\n- %{!traditional:-Ds64_t=long\\\\ long -Du64_t=unsigned\\\\ long\\\\ long}\t\\\n+ -D__stdc__ -D_LONGLONG\t\t\t\t\t\t\t\\\n+ -Ds64_t=long\\\\ long -Du64_t=unsigned\\\\ long\\\\ long\t\t\t\\\n  %{!ansi:-D_POSIX_SOURCE}\t\t\t\t\t\t\\\n  %{!ansi:-D_CONVEX_SOURCE}\"\n \n@@ -248,21 +243,20 @@ extern int target_flags;\n  -D__NO_INLINE_MATH -D__NO_INLINE_STDLIB\t\t\t\t\\\n  -D_CONVEX_FLOAT_\t\t\t\t\t\t\t\\\n  %{.S:-P}\t\t\t\t\t\t\t\t\\\n- %{!traditional:-D__stdc__}\t\t\t\t\t\t\\\n- %{!traditional:-D_LONGLONG}\t\t\t\t\t\t\\\n- %{!traditional:-Ds64_t=long\\\\ long -Du64_t=unsigned\\\\ long\\\\ long}\t\\\n+ -D__stdc__ -D_LONGLONG\t\t\t\t\t\t\t\\\n+ -Ds64_t=long\\\\ long -Du64_t=unsigned\\\\ long\\\\ long\t\t\t\\\n  %{!ansi:-D_POSIX_SOURCE}\t\t\t\t\t\t\\\n  %{!ansi:-D_CONVEX_SOURCE}\"\n \n #endif\n \n #define LIB_SPEC\t\t\t\t\t\t\t\\\n-\"%{mc1:-lC1%{traditional:_old}%{p:_p}%{pg:_p}}\t\t\t\t\\\n- %{mc2:-lC2%{traditional:_old}%{p:_p}%{pg:_p}}\t\t\t\t\\\n- %{!mc1:%{!mc2:%{!mc34:%{!mc38:-lC2%{traditional:_old}%{p:_p}%{pg:_p}}}}} \\\n- %{mc34:-lC2%{traditional:_old}%{p:_p}%{pg:_p}}\t\t\t\t\\\n- %{mc38:-lC2%{traditional:_old}%{p:_p}%{pg:_p}}\t\t\t\t\\\n- -lc%{traditional:_old}%{p:_p}%{pg:_p}\"\n+\"%{mc1:-lC1%{p:_p}%{pg:_p}}\t\t\t\t\\\n+ %{mc2:-lC2%{p:_p}%{pg:_p}}\t\t\t\t\\\n+ %{!mc1:%{!mc2:%{!mc34:%{!mc38:-lC2%{p:_p}%{pg:_p}}}}} \\\n+ %{mc34:-lC2%{p:_p}%{pg:_p}}\t\t\t\t\\\n+ %{mc38:-lC2%{p:_p}%{pg:_p}}\t\t\t\t\\\n+ -lc%{p:_p}%{pg:_p}\"\n \n #endif\n \n@@ -282,9 +276,8 @@ extern int target_flags;\n  -D__NO_INLINE_MATH -D__NO_INLINE_STDLIB\t\t\t\t\\\n  -D_IEEE_FLOAT_\t\t\t\t\t\t\t\t\\\n  %{.S:-P}\t\t\t\t\t\t\t\t\\\n- %{!traditional:-D__stdc__}\t\t\t\t\t\t\\\n- %{!traditional:-D_LONGLONG}\t\t\t\t\t\t\\\n- %{!traditional:-Ds64_t=long\\\\ long -Du64_t=unsigned\\\\ long\\\\ long}\t\\\n+ -D__stdc__ -D_LONGLONG\t\t\t\t\t\t\t\\\n+ -Ds64_t=long\\\\ long -Du64_t=unsigned\\\\ long\\\\ long\t\t\t\\\n  %{!ansi:-D_POSIX_SOURCE}\t\t\t\t\t\t\\\n  %{!ansi:-D_CONVEX_SOURCE}\"\n \n@@ -300,21 +293,20 @@ extern int target_flags;\n  -D__NO_INLINE_MATH -D__NO_INLINE_STDLIB\t\t\t\t\\\n  -D_CONVEX_FLOAT_\t\t\t\t\t\t\t\\\n  %{.S:-P}\t\t\t\t\t\t\t\t\\\n- %{!traditional:-D__stdc__}\t\t\t\t\t\t\\\n- %{!traditional:-D_LONGLONG}\t\t\t\t\t\t\\\n- %{!traditional:-Ds64_t=long\\\\ long -Du64_t=unsigned\\\\ long\\\\ long}\t\\\n+ -D__stdc__ -D_LONGLONG\t\t\t\t\t\t\t\\\n+ -Ds64_t=long\\\\ long -Du64_t=unsigned\\\\ long\\\\ long\t\t\t\\\n  %{!ansi:-D_POSIX_SOURCE}\t\t\t\t\t\t\\\n  %{!ansi:-D_CONVEX_SOURCE}\"\n \n #endif\n \n #define LIB_SPEC\t\t\t\t\t\t\t\\\n-\"%{mc1:-lC1%{traditional:_old}%{p:_p}%{pg:_p}}\t\t\t\t\\\n- %{mc2:-lC2%{traditional:_old}%{p:_p}%{pg:_p}}\t\t\t\t\\\n- %{mc32:-lC2%{traditional:_old}%{p:_p}%{pg:_p}}\t\t\t\t\\\n- %{!mc1:%{!mc2:%{!mc32:%{!mc38:-lC2%{traditional:_old}%{p:_p}%{pg:_p}}}}} \\\n- %{mc38:-lC2%{traditional:_old}%{p:_p}%{pg:_p}}\t\t\t\t\\\n- -lc%{traditional:_old}%{p:_p}%{pg:_p}\"\n+\"%{mc1:-lC1%{p:_p}%{pg:_p}}\t\t\t\t\\\n+ %{mc2:-lC2%{p:_p}%{pg:_p}}\t\t\t\t\\\n+ %{mc32:-lC2%{p:_p}%{pg:_p}}\t\t\t\t\\\n+ %{!mc1:%{!mc2:%{!mc32:%{!mc38:-lC2%{p:_p}%{pg:_p}}}}} \\\n+ %{mc38:-lC2%{p:_p}%{pg:_p}}\t\t\t\t\\\n+ -lc%{p:_p}%{pg:_p}\"\n \n #endif\n \n@@ -334,9 +326,8 @@ extern int target_flags;\n  -D_IEEE_FLOAT_\t\t\t\t\t\t\t\t\\\n  %{!mc1:%{!mc2:%{!mc32:%{!mc34:-D__convex_c38__}}}}\t\t\t\\\n  %{.S:-P}\t\t\t\t\t\t\t\t\\\n- %{!traditional:-D__stdc__}\t\t\t\t\t\t\\\n- %{!traditional:-D_LONGLONG}\t\t\t\t\t\t\\\n- %{!traditional:-Ds64_t=long\\\\ long -Du64_t=unsigned\\\\ long\\\\ long}\t\\\n+ -D__stdc__ -D_LONGLONG\t\t\t\t\t\t\t\\\n+ -Ds64_t=long\\\\ long -Du64_t=unsigned\\\\ long\\\\ long\t\t\t\\\n  %{!ansi:-D_POSIX_SOURCE}\t\t\t\t\t\t\\\n  %{!ansi:-D_CONVEX_SOURCE}\"\n \n@@ -352,21 +343,20 @@ extern int target_flags;\n  -D_CONVEX_FLOAT_\t\t\t\t\t\t\t\\\n  %{!mc1:%{!mc2:%{!mc32:%{!mc34:-D__convex_c38__}}}}\t\t\t\\\n  %{.S:-P}\t\t\t\t\t\t\t\t\\\n- %{!traditional:-D__stdc__}\t\t\t\t\t\t\\\n- %{!traditional:-D_LONGLONG}\t\t\t\t\t\t\\\n- %{!traditional:-Ds64_t=long\\\\ long -Du64_t=unsigned\\\\ long\\\\ long}\t\\\n+ -D__stdc__ -D_LONGLONG\t\t\t\t\t\t\t\\\n+ -Ds64_t=long\\\\ long -Du64_t=unsigned\\\\ long\\\\ long\t\t\t\\\n  %{!ansi:-D_POSIX_SOURCE}\t\t\t\t\t\t\\\n  %{!ansi:-D_CONVEX_SOURCE}\"\n \n #endif\n \n-#define LIB_SPEC\t\t\t\t\t\t\t\\\n-\"%{mc1:-lC1%{traditional:_old}%{p:_p}%{pg:_p}}\t\t\t\t\\\n- %{mc2:-lC2%{traditional:_old}%{p:_p}%{pg:_p}}\t\t\t\t\\\n- %{mc32:-lC2%{traditional:_old}%{p:_p}%{pg:_p}}\t\t\t\t\\\n- %{mc34:-lC2%{traditional:_old}%{p:_p}%{pg:_p}}\t\t\t\t\\\n- %{!mc1:%{!mc2:%{!mc32:%{!mc34:-lC2%{traditional:_old}%{p:_p}%{pg:_p}}}}} \\\n- -lc%{traditional:_old}%{p:_p}%{pg:_p}\"\n+#define LIB_SPEC\t\t\t\t\t\\\n+\"%{mc1:-lC1%{p:_p}%{pg:_p}}\t\t\t\t\\\n+ %{mc2:-lC2%{p:_p}%{pg:_p}}\t\t\t\t\\\n+ %{mc32:-lC2%{p:_p}%{pg:_p}}\t\t\t\t\\\n+ %{mc34:-lC2%{p:_p}%{pg:_p}}\t\t\t\t\\\n+ %{!mc1:%{!mc2:%{!mc32:%{!mc34:-lC2%{p:_p}%{pg:_p}}}}}\t\\\n+ -lc%{p:_p}%{pg:_p}\"\n \n #endif\n \n@@ -377,14 +367,13 @@ extern int target_flags;\n #define ASM_SPEC \"-fi\"\n \n #define LINK_SPEC\t\t\t\t\t\t\t\\\n-\"-E%{traditional:no}posix\t\t\t\t\t\t\\\n+\"-Eposix\t\t\t\t\t\t\t\t\\\n  -X\t\t\t\t\t\t\t\t\t\\\n  %{F} %{M*} %{y*}\t\t\t\t\t\t\t\\\n  -fi\t\t\t\t\t\t\t\t\t\\\n  -A__iob=___ap$iob\t\t\t\t\t\t\t\\\n  -A_use_libc_sema=___ap$use_libc_sema\t\t\t\t\t\\\n- %{traditional:-A___gcc_cleanup=__cleanup}\t\t\t\t\\\n- %{!traditional:-A___gcc_cleanup=___ap$do_registered_functions}\t\t\\\n+ %-A___gcc_cleanup=___ap$do_registered_functions\t\t\t\\\n  -L/usr/lib\"\n \n #define STARTFILE_SPEC\t\t\t\t\t\t\t\\\n@@ -400,14 +389,13 @@ extern int target_flags;\n #define ASM_SPEC \"-fn\"\n \n #define LINK_SPEC\t\t\t\t\t\t\t\\\n-\"-E%{traditional:no}posix\t\t\t\t\t\t\\\n+\"-Eposix\t\t\t\t\t\t\t\t\\\n  -X\t\t\t\t\t\t\t\t\t\\\n  %{F} %{M*} %{y*}\t\t\t\t\t\t\t\\\n  -fn\t\t\t\t\t\t\t\t\t\\\n  -A__iob=___ap$iob\t\t\t\t\t\t\t\\\n  -A_use_libc_sema=___ap$use_libc_sema\t\t\t\t\t\\\n- %{traditional:-A___gcc_cleanup=__cleanup}\t\t\t\t\\\n- %{!traditional:-A___gcc_cleanup=___ap$do_registered_functions}\t\t\\\n+ -A___gcc_cleanup=___ap$do_registered_functions\t\t\t\t\\\n  -L/usr/lib\"\n \n #define STARTFILE_SPEC\t\t\t\t\t\t\t\\\n@@ -1342,7 +1330,7 @@ enum reg_class {\n #define FASCIST_ASSEMBLER\n \n /* __gcc_cleanup is loader-aliased to __ap$do_registered_functions if we\n-   are linking against standard libc, 0 if old (-traditional) libc.  */\n+   are linking against standard libc.   */\n \n #define EXIT_BODY \\\n {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "37dd1cfee51d2fea33348ea113e33cb529007d3a", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -1700,10 +1700,6 @@ typedef int CUMULATIVE_ARGS;\n \f\n /* How Scalar Function Values are Returned */\n \n-/* Define this macro if `-traditional' should not cause functions declared to\n-   return `float' to convert the value to `double'.  */ /* #define\n-   TRADITIONAL_RETURN_FLOAT */\n-\n /* A C expression to create an RTX representing the place where a function\n    returns a value of data type VALTYPE.  VALTYPE is a tree node representing a\n    data type.  Write `TYPE_MODE (VALTYPE)' to get the machine mode used to\n@@ -4606,13 +4602,6 @@ fprintf (STREAM, \"\\t.word .L%d\\n\", VALUE)\n    must also be defined).  */\n /* #define HANDLE_WEAK_PRAGMA */\n \n-/* Define this macro to control use of the character `$' in identifier names.\n-   The value should be 0, 1, or 2.  0 means `$' is not allowed by default; 1\n-   means it is allowed by default if `-traditional' is used; 2 means it is\n-   allowed by default provided `-ansi' is not used.  1 is the default; there is\n-   no need to define this macro in that case.  */\n-/* #define DOLLARS_IN_IDENTIFIERS */\n-\n /* Define this macro if the assembler does not accept the character `$' in\n    label names.  By default constructors and destructors in G++ have `$' in the\n    identifiers.  If this macro is defined, `.' is used instead."}, {"sha": "cd344f4b2c2f6114f93ea9df95dc4ab85d984739", "filename": "gcc/config/i386/dgux.h", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fi386%2Fdgux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fi386%2Fdgux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdgux.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -25,7 +25,7 @@ Boston, MA 02111-1307, USA.  */\n */\n \n #ifndef VERSION_INFO2\n-#define VERSION_INFO2   \"$Revision: 1.15 $\"\n+#define VERSION_INFO2   \"$Revision: 1.16 $\"\n #endif\n \n #ifndef VERSION_STRING\n@@ -157,18 +157,17 @@ Boston, MA 02111-1307, USA.  */\n    -Asystem=unix -Asystem=svr4\"\n \n    /*\n-     If not -ansi, -traditional, or restricting include files to one\n+     If not -ansi, or restricting include files to one\n      specific source target, specify full DG/UX features.\n    */\n #undef\tCPP_SPEC\n-#define\tCPP_SPEC \"%(cpp_cpu) %{!ansi:%{!traditional:-D__OPEN_NAMESPACE__}}\"\n+#define\tCPP_SPEC \"%(cpp_cpu) %{!ansi:-D__OPEN_NAMESPACE__}\"\n \n /* Assembler support (legends for mxdb).  */\n #undef\tASM_SPEC\n #define ASM_SPEC \"\\\n %{mno-legend:%{mstandard:-Wc,off}}\\\n-%{g:%{!mno-legend:-Wc,-fix-bb,-s\\\"%i\\\"\\\n-%{traditional:,-lc}%{!traditional:,-lansi-c}\\\n+%{g:%{!mno-legend:-Wc,-fix-bb,-s\\\"%i\\\",-lansi-c\\\n %{mstandard:,-keep-std}\\\n %{mexternal-legend:,-external}}}\"\n \n@@ -205,8 +204,7 @@ Boston, MA 02111-1307, USA.  */\n \t\t\t %{pg:gcrti.o%s}%{!pg:crti.o%s} \t\t\\\n \t\t\t crtbegin.o%s \t\t\t\t\t\\\n \t\t\t %{ansi:values-Xc.o%s} \t\t\t\t\\\n-\t\t\t %{!ansi:%{traditional:values-Xt.o%s} \t\t\\\n-\t\t\t         %{!traditional:values-Xa.o%s}}\"\n+\t\t\t %{!ansi:values-Xa.o%s}\"\n \n #undef  ENDFILE_SPEC\n #define ENDFILE_SPEC \"crtend.o%s %{pg:gcrtn.o}%{!pg:crtn.o%s}\"\n@@ -220,8 +218,7 @@ Boston, MA 02111-1307, USA.  */\n \t\t       %{pg:gcrti.o%s}%{!pg:/lib/crti.o%s}\t     \\\n \t\t\tcrtbegin.o%s \t\t\t\t\t\\\n \t\t\t%{ansi:/lib/values-Xc.o%s} \t\t\t\\\n-\t\t\t%{!ansi:%{traditional:/lib/values-Xt.o%s} \t\\\n-\t\t\t        %{!traditional:/lib/values-Xa.o%s}}\"\n+\t\t\t%{!ansi:/lib/values-Xa.o%s}\"\n \n #undef  ENDFILE_SPEC\n #define ENDFILE_SPEC \"crtend.o%s %{pg:gcrtn.o}%{!pg:/lib/crtn.o}\""}, {"sha": "1f0c635730af6abb1ce40746fd4496fecea9b31e", "filename": "gcc/config/i386/osf1elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fi386%2Fosf1elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fi386%2Fosf1elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosf1elf.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -22,7 +22,7 @@\n #define CPP_SPEC \"\\\n %(cpp_cpu) \\\n %{fpic: -D__SHARED__} %{fPIC: %{!fpic: -D__SHARED__}} \\\n-%{.S:\t%{!ansi:%{!traditional:%{!traditional-cpp:%{!ftraditional: -traditional}}}}} \\\n+%{.S:\t%{!ansi:%{!traditional-cpp: -traditional}}} \\\n %{.S:\t-D__LANGUAGE_ASSEMBLY %{!ansi:-DLANGUAGE_ASSEMBLY}} \\\n %{.cc:\t-D__LANGUAGE_C_PLUS_PLUS} \\\n %{.cxx:\t-D__LANGUAGE_C_PLUS_PLUS} \\"}, {"sha": "886dd1a4c2969c8df24ec9d1e172b9985b2da6ba", "filename": "gcc/config/i386/osfelf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fi386%2Fosfelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fi386%2Fosfelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfelf.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -30,7 +30,7 @@ Boston, MA 02111-1307, USA.  */\n %{!mrose: -D__ELF__ %{fpic: -D__SHARED__}} \\\n %{mno-underscores: -D__NO_UNDERSCORES__} \\\n %{!mrose: %{!munderscores: -D__NO_UNDERSCORES__}} \\\n-%{.S:\t%{!ansi:%{!traditional:%{!traditional-cpp:%{!ftraditional: -traditional}}}}} \\\n+%{.S:\t%{!ansi:%{!traditional-cpp: -traditional}}} \\\n %{.S:\t-D__LANGUAGE_ASSEMBLY %{!ansi:-DLANGUAGE_ASSEMBLY}} \\\n %{.cc:\t-D__LANGUAGE_C_PLUS_PLUS} \\\n %{.cxx:\t-D__LANGUAGE_C_PLUS_PLUS} \\"}, {"sha": "4580e0ef56d02fca8b68c010b882e059aba83a92", "filename": "gcc/config/i386/osfrose.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -101,7 +101,7 @@ Boston, MA 02111-1307, USA.  */\n %{melf: -D__ELF__ %{fpic: -D__SHARED__}} \\\n %{mno-underscores: -D__NO_UNDERSCORES__} \\\n %{melf: %{!munderscores: -D__NO_UNDERSCORES__}} \\\n-%{.S:\t%{!ansi:%{!traditional:%{!traditional-cpp:%{!ftraditional: -traditional}}}}} \\\n+%{.S:\t%{!ansi:%{!traditional-cpp: -traditional}}} \\\n %{.S:\t-D__LANGUAGE_ASSEMBLY %{!ansi:-DLANGUAGE_ASSEMBLY}} \\\n %{.cc:\t-D__LANGUAGE_C_PLUS_PLUS} \\\n %{.cxx:\t-D__LANGUAGE_C_PLUS_PLUS} \\"}, {"sha": "e449e866e9c9ac670dc3f0a4e10d9975a760adc0", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -676,13 +676,11 @@ init_section ()\t\t\t\t\t\t\t\t\\\n     %{pg:gcrt.o%s}%{!pg:%{p:mcrt1.o%s}%{!p:crt1.o%s}}}} \\\n   %{ansi:values-Xc.o%s} \\\n   %{!ansi: \\\n-   %{traditional:values-Xt.o%s} \\\n-    %{!traditional: \\\n-     %{Xa:values-Xa.o%s} \\\n-      %{!Xa:%{Xc:values-Xc.o%s} \\\n-       %{!Xc:%{Xk:values-Xk.o%s} \\\n-        %{!Xk:%{Xt:values-Xt.o%s} \\\n-         %{!Xt:values-Xa.o%s}}}}}} \\\n+   %{Xa:values-Xa.o%s} \\\n+    %{!Xa:%{Xc:values-Xc.o%s} \\\n+     %{!Xc:%{Xk:values-Xk.o%s} \\\n+      %{!Xk:%{Xt:values-Xt.o%s} \\\n+       %{!Xt:values-Xa.o%s}}}}} \\\n   %{mcoff:crtbeginS.o%s} %{!mcoff:crtbegin.o%s}\"\n \n #undef ENDFILE_SPEC\n@@ -719,7 +717,6 @@ init_section ()\t\t\t\t\t\t\t\t\\\n                       -DM_BITFIELDS -DM_SYS5 -DM_SYSV -DM_INTERNAT -DM_SYSIII \\\n                       -DM_WORDSWAP}}}} \\\n   %{scointl:-DM_INTERNAT -D_M_INTERNAT} \\\n-  %{traditional:-D_KR -D_SVID -D_NO_PROTOTYPE} \\\n   %{!mcoff:-D_SCO_ELF} \\\n   %{mcoff:-D_M_COFF -D_SCO_COFF} \\\n   %{!mcoff:%{fpic:-D__PIC__ -D__pic__} \\\n@@ -728,8 +725,7 @@ init_section ()\t\t\t\t\t\t\t\t\\\n   %{!Xa:%{Xc:-D_SCO_C_DIALECT=3} \\\n    %{!Xc:%{Xk:-D_SCO_C_DIALECT=4} \\\n     %{!Xk:%{Xt:-D_SCO_C_DIALECT=2} \\\n-     %{!Xt:-D_SCO_C_DIALECT=1}}}} \\\n-  %{traditional:-traditional -D_KR -D_NO_PROTOTYPE}\"\n+     %{!Xt:-D_SCO_C_DIALECT=1}}}}\"\n \n #undef LINK_SPEC\n #define LINK_SPEC \\"}, {"sha": "6fb2eb598f0bb3299f2bd5de3ead147c689768cf", "filename": "gcc/config/i386/sol2.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fi386%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fi386%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -113,9 +113,7 @@ Boston, MA 02111-1307, USA.  */\n \t\t\t  %{pg:gcrt1.o%s}%{!pg:%{p:mcrt1.o%s}%{!p:crt1.o%s}}}}\\\n \t\t\t%{pg:gmon.o%s} crti.o%s \\\n \t\t\t%{ansi:values-Xc.o%s} \\\n-\t\t\t%{!ansi: \\\n-\t\t\t %{traditional:values-Xt.o%s} \\\n-\t\t\t %{!traditional:values-Xa.o%s}} \\\n+\t\t\t%{!ansi:values-Xa.o%s} \\\n  \t\t\tcrtbegin.o%s\"\n   \n /* This should be the same as in svr4.h, except with -R added.  */"}, {"sha": "c4c6c448b5280e314ba9b105d3a934035dae7c44", "filename": "gcc/config/m68k/a-ux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fm68k%2Fa-ux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fm68k%2Fa-ux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fa-ux.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -35,7 +35,7 @@ Boston, MA 02111-1307, USA.  */\n %{!mc68000:%{!m68000:-Acpu=mc68020 -D__mc68020__ %{!ansi:-Dmc68020 }}}\\\n %{m68030:-Acpu=mc68030 -D__mc68030__ %{!ansi:-Dmc68030 }}\\\n %{m68040:-Acpu=mc68040 -D__mc68040__ %{!ansi:-Dmc68040 }}\\\n-%{!ansi:%{!traditional:-D__STDC__=2 }}\\\n+%{!ansi:-D__STDC__=2 }\\\n %{sbsd:-D_BSD_SOURCE -DBSD }%{ZB:-D_BSD_SOURCE -DBSD }\\\n %{ssysv:-D_SYSV_SOURCE -DSYSV -DUSG }%{ZS:-D_SYSV_SOURCE -DSYSV -DUSG }\\\n %{sposix:-D_POSIX_SOURCE -DPOSIX }%{ZP:-D_POSIX_SOURCE -DPOSIX }\\"}, {"sha": "4c765b89f55a157916a4fd4417bf9ecdd182df06", "filename": "gcc/config/m68k/hp310.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fm68k%2Fhp310.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fm68k%2Fhp310.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fhp310.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -19,16 +19,14 @@\n #ifdef HPUX_ASM\n \n #define CPP_SPEC \"-D__HPUX_ASM__ %{m68881: -D__HAVE_68881__}\\\n-%{m68020: -Dmc68020}%{mc68020: -Dmc68020}\\\n-%{!traditional:-D_INCLUDE__STDC__}\"\n+%{m68020: -Dmc68020}%{mc68020: -Dmc68020} -D_INCLUDE__STDC__\"\n \n #define ASM_SPEC \"%{!m68020:%{!mc68020:+X}}\"\n \n #else\t/* not HPUX_ASM */\n \n #define CPP_SPEC \"%{m68881: -D__HAVE_68881__}\\\n-%{m68020: -Dmc68020}%{mc68020: -Dmc68020}\\\n-%{!traditional:-D_INCLUDE__STDC__}\"\n+%{m68020: -Dmc68020}%{mc68020: -Dmc68020} -D_INCLUDE__STDC__\"\n \n #define ASM_SPEC \\\n  \"%{m68000:-mc68000}%{mc68000:-mc68000}%{!mc68000:%{!m68000:-mc68020}}\""}, {"sha": "b7d134d4e6abfffd450dc93b3099ba55140072ee", "filename": "gcc/config/m88k/dgux.h", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fm88k%2Fdgux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fm88k%2Fdgux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fdgux.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -80,7 +80,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* If -m88100 is in effect, add -Dm88100; similarly for -m88110.\n    Here, the CPU_DEFAULT is assumed to be -m88000.  If not -ansi,\n-   -traditional, or restricting include files to one specific source\n+   or restricting include files to one specific source\n    target, specify full DG/UX features.  */\n #undef\tCPP_SPEC\n #define\tCPP_SPEC \"%(cpp_cpu) %{msvr3:-D_M88KBCS_TARGET} %{!msvr3:-D_DGUX_TARGET}\"\n@@ -140,25 +140,22 @@ Boston, MA 02111-1307, USA.  */\n \t\t  %{v:-V}\\\n \t\t  %{g:\\\n %{mno-legend:-Wc,off}\\\n-%{!mno-legend:-Wc,-fix-bb,-s\\\"%i\\\"\\\n-%{traditional:,-lc}\\\n-%{!traditional:,-lansi-c}\\\n+%{!mno-legend:-Wc,-fix-bb,-s\\\"%i\\\",-lansi-c\\\n %{mstandard:,-keep-std}\\\n %{mexternal-legend:,-external}\\\n %{mocs-frame-position:,-ocs}}}\"\n \n #define CPP_CPU_SPEC \"\\\n                   %{!m88000:%{!m88100:%{m88110:-D__m88110__}}} \\\n \t\t  %{!m88000:%{!m88110:%{m88100:-D__m88100__}}} \\\n-\t\t  %{!ansi:%{!traditional:-D__OPEN_NAMESPACE__}}\"\n+\t\t  %{!ansi:-D__OPEN_NAMESPACE__}\"\n \n #define STARTFILE_DEFAULT_SPEC \"\\\n                         %{!shared:%{!symbolic:%{pg:gcrt0.o%s} \\\n \t\t\t %{!pg:%{p:/lib/mcrt0.o}%{!p:/lib/crt0.o}} \\\n \t\t\t  %(startfile_crtbegin) \\\n \t\t\t %{svr4:%{ansi:/lib/values-Xc.o} \\\n-\t\t\t  %{!ansi:%{traditional:/lib/values-Xt.o} \\\n-\t\t\t   %{!traditional:/usr/lib/values-Xa.o}}}}}\"\n+\t\t\t  %{!ansi:/usr/lib/values-Xa.o}}}}\"\n \n #define STARTFILE_CRTBEGIN_SPEC \"\\\n \t\t\t %{msvr3:m88kdgux.ld%s bcscrtbegin.o%s} \\\n@@ -189,7 +186,7 @@ Boston, MA 02111-1307, USA.  */\n       {\t\t\t\t\t\t\t\t\t\\\n \tfprintf (FILE, \";legend_info -fix-bb -h\\\"gcc-%s\\\" -s\\\"%s\\\"\",\t\\\n \t\t version_string, main_input_filename);\t\t\t\\\n-\tfputs (flag_traditional ? \" -lc\" : \" -lansi-c\", FILE);\t\t\\\n+\tfputs (\" -lansi-c\", FILE);\t\t\t\t\t\\\n \tif (TARGET_STANDARD)\t\t\t\t\t\t\\\n \t  fputs (\" -keep-std\", FILE);\t\t\t\t\t\\\n \tif (TARGET_EXTERNAL_LEGEND)\t\t\t\t\t\\"}, {"sha": "92109c0f8ae784b0a51cc0ce4c0fe1ccb2c65a4d", "filename": "gcc/config/m88k/dguxbcs.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fm88k%2Fdguxbcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fm88k%2Fdguxbcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fdguxbcs.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -41,9 +41,7 @@ Boston, MA 02111-1307, USA.  */\n \t\t  %(asm_cpu)\"\n \n /* If -m88100 is in effect, add -Dm88100; similarly for -m88110.\n-   Here, the CPU_DEFAULT is assumed to be -m88000.  If not -ansi,\n-   -traditional, or restricting include files to one specific source\n-   target, specify full DG/UX features.  */\n+   Here, the CPU_DEFAULT is assumed to be -m88000.  */\n #undef\tCPP_SPEC\n #define\tCPP_SPEC \"%(cpp_cpu) \\\n \t\t  %{!msvr4:-D_M88KBCS_TARGET} %{msvr4:-D_DGUX_TARGET}\""}, {"sha": "ca2e683ee224d4ee51689c7cbfff762e8b7a44f0", "filename": "gcc/config/m88k/luna.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fm88k%2Fluna.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fm88k%2Fluna.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fluna.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -46,13 +46,8 @@ Boston, MA 02111-1307, USA.  */\n #define\tCPP_SPEC \"%{m88000:-D__mc88000__} \\\n \t\t  %{!m88000:%{m88100:%{m88110:-D__mc88000__}}} \\\n \t\t  %{!m88000:%{!m88100:%{m88110:-D__mc88110__}}} \\\n-\t\t  %{!m88000:%{!m88110:%{!ansi:%{traditional:-Dmc88100}} \\\n-\t\t\t\t      -D__mc88100__ -D__mc88100}}\"\n+\t\t  %{!m88000:%{!m88110:-D__mc88100__ -D__mc88100}}\"\n \n /* Specify extra dir to search for include files.  */\n #undef\tSYSTEM_INCLUDE_DIR\n #define SYSTEM_INCLUDE_DIR \"/usr/mach/include\"\n-\n-/* For the Omron Luna/88k, a float function returns a double in traditional\n-   mode (and a float in ansi mode).  */\n-#undef TRADITIONAL_RETURN_FLOAT"}, {"sha": "d53bffdfffb18b315356be8415aa490367bf4c08", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -43,7 +43,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"target.h\"\n #include \"target-def.h\"\n \n-extern int flag_traditional;\n extern FILE *asm_out_file;\n \n const char *m88k_pound_sign = \"\"; /* Either # for SVR4 or empty for SVR3 */\n@@ -1567,8 +1566,6 @@ output_options (file, f_options, f_len, W_options, W_len,\n     pos = output_option (file, sep, \"-O\", \"\", indent, pos, max);\n   if (write_symbols != NO_DEBUG)\n     pos = output_option (file, sep, \"-g\", \"\", indent, pos, max);\n-  if (flag_traditional)\n-    pos = output_option (file, sep, \"-traditional\", \"\", indent, pos, max);\n   if (profile_flag)\n     pos = output_option (file, sep, \"-p\", \"\", indent, pos, max);\n   for (j = 0; j < f_len; j++)"}, {"sha": "c002809ec94ec6e95c17cf10ca18d950ddec1634", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -1516,10 +1516,6 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n    mismatch, it also makes for better code on certain machines.  */\n #define PROMOTE_PROTOTYPES 1\n \n-/* Define this macro if a float function always returns float\n-   (even in traditional mode).  Redefined in luna.h.  */\n-#define TRADITIONAL_RETURN_FLOAT\n-\n /* We assume that the store-condition-codes instructions store 0 for false\n    and some other value for true.  This is the value stored for true.  */\n #define STORE_FLAG_VALUE (-1)"}, {"sha": "56891e8f0837bd9af5fe91fbd79afac81822e76f", "filename": "gcc/config/m88k/openbsd.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fm88k%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fm88k%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fopenbsd.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -33,14 +33,10 @@ Boston, MA 02111-1307, USA.  */\n #define\tCPP_SPEC \"%{m88000:-D__mc88000__} \\\n \t\t  %{!m88000:%{m88100:%{m88110:-D__mc88000__}}} \\\n \t\t  %{!m88000:%{!m88100:%{m88110:-D__mc88110__}}} \\\n-\t\t  %{!m88000:%{!m88110:%{!ansi:%{traditional:-Dmc88100}} \\\n-\t\t  -D__mc88100__ -D__mc88100}} %{posix:-D_POSIX_SOURCE} \\\n+\t\t  %{!m88000:%{!m88110:-D__mc88100__ -D__mc88100}} \\\n+\t\t  %{posix:-D_POSIX_SOURCE} \\\n \t\t  %{pthread:-D_POSIX_THREADS}\"\n \n-/* For the Omron Luna/88k, a float function returns a double in traditional\n-   mode (and a float in ansi mode).  */\n-#undef TRADITIONAL_RETURN_FLOAT\n-\n /* Layout of source language data types. */\n \n /* This must agree with <machine/ansi.h> */"}, {"sha": "13581a3a712d763fe6b1ae86e298454effef6f64", "filename": "gcc/config/mips/abi64.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fmips%2Fabi64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fmips%2Fabi64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fabi64.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -209,11 +209,7 @@ Boston, MA 02111-1307, USA.  */\n    does not make a copy.  Instead, it passes a pointer to the \"live\"\n    value.  The called function must not modify this value.  If it can\n    be determined that the value won't be modified, it need not make a\n-   copy; otherwise a copy must be made.\n-\n-   ??? The MIPS EABI says that the caller should copy in ``K&R mode.''\n-   I don't know how to detect that here, since flag_traditional is not\n-   a back end flag.  */\n+   copy; otherwise a copy must be made.  */\n #define FUNCTION_ARG_CALLEE_COPIES(CUM, MODE, TYPE, NAMED)\t\t\\\n   (mips_abi == ABI_EABI && (NAMED)\t\t\t\t\t\\\n    && FUNCTION_ARG_PASS_BY_REFERENCE (CUM, MODE, TYPE, NAMED))"}, {"sha": "aa9a585d2b87616ca1e4e5b68d9bf8a46f61d019", "filename": "gcc/config/mips/osfrose.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fmips%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fmips%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fosfrose.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -39,8 +39,7 @@ Boston, MA 02111-1307, USA.  */\n %{!mlong64:-D__PTRDIFF_TYPE__=int}\"\n \n #define SUBTARGET_CPP_SPEC \"\\\n-%{.S:\t%{!ansi:%{!traditional:%{!traditional-cpp:%{!ftraditional: -traditional}}}}} \\\n-%{.s:\t%{!ansi:%{!traditional:%{!traditional-cpp:%{!ftraditional: -traditional}}}}}\"\n+%{.S:\t%{!ansi:%{!traditional-cpp: -traditional}}}\"\n \n /* ??? This assumes that GNU as is always used with GNU ld, and MIPS as is\n    always used with MIPS ld.  */"}, {"sha": "d432b42e17af390f757d30c2b4b9660eb02e6966", "filename": "gcc/config/mips/svr4-5.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fmips%2Fsvr4-5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fmips%2Fsvr4-5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsvr4-5.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -40,9 +40,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define STARTFILE_SPEC \"%{pg:gcrt0.o%s}%{!pg:%{p:mcrt0.o%s}%{!p:crt1.o%s}}\\\n \t%{ansi:/svr4/usr/ccs/lib/values-Xc.o%s} \\\n-                          %{!ansi: \\\n-                           %{traditional:/svr4/usr/ccs/lib/values-Xt.o%s} \\\n-                           %{!traditional:/svr4/usr/ccs/lib/values-Xa.o%s}}\"\n+        %{!ansi:/svr4/usr/ccs/lib/values-Xa.o%s}\"\n \n #define MACHINE_TYPE \"RISC-OS System V.4 Mips\"\n "}, {"sha": "62bf664feb9dc730d64eb53ee89923610d71fc12", "filename": "gcc/config/mips/svr4-t.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fmips%2Fsvr4-t.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fmips%2Fsvr4-t.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsvr4-t.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -17,9 +17,7 @@\n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \"%{pg:gcrt0.o%s}%{!pg:%{p:mcrt0.o%s}%{!p:crt1.o%s}}\\\n \t%{ansi:/usr/lib/values-Xc.o%s} \\\n-                          %{!ansi: \\\n-                           %{traditional:/usr/lib/values-Xt.o%s} \\\n-                           %{!traditional:/usr/lib/values-Xa.o%s}}\"\n+        %{!ansi:/usr/lib/values-Xa.o%s}\"\n \n #undef LINK_SPEC\n #define LINK_SPEC \"\\"}, {"sha": "850f0e64137ae94406ecc04ecd192600449f4a25", "filename": "gcc/config/nextstep.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fnextstep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fnextstep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnextstep.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -129,8 +129,7 @@ Boston, MA 02111-1307, USA.  */\n /* Machine dependent ccp options.  */\n \n #undef\tCPP_SPEC\n-#define CPP_SPEC \"%{!traditional: -D__STDC__}            \\\n-                  %{posixstrict:-D_POSIX_SOURCE}         \\\n+#define CPP_SPEC \"%{posixstrict:-D_POSIX_SOURCE}         \\\n                   %{!posixstrict:%{bsd:-D__STRICT_BSD__} \\\n                   %{posix:-D_POSIX_SOURCE}               \\\n                   %{!ansi:-D_NEXT_SOURCE}}               \\"}, {"sha": "c30f3a55332b4e61907ec8e89e0e88b6336a3cf7", "filename": "gcc/config/ptx4.h", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fptx4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fptx4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fptx4.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -160,16 +160,15 @@ Boston, MA 02111-1307, USA.\n \t\t    %{!p:-Y P,/lib:/usr/lib}} \\\n \t\t   %{Qy:} %{!Qn:-Qy}\"\n \n-/* Gcc automatically adds in one of the files /lib/values-Xc.o,\n-   /lib/values-Xa.o, or /lib/values-Xt.o for each final link\n-   step (depending upon the other gcc options selected, such as\n-   -traditional and -ansi).  These files each contain one (initialized)\n-   copy of a special variable called `_lib_version'.  Each one of these\n-   files has `_lib_version' initialized to a different (enum) value.\n-   The SVR4 library routines query the value of `_lib_version' at run\n-   to decide how they should behave.  Specifically, they decide (based\n-   upon the value of `_lib_version') if they will act in a strictly ANSI\n-   conforming manner or not.\n+/* Gcc automatically adds in one of the files /lib/values-Xc.o\n+   or /lib/values-Xa.o, for each final link step (depending upon the other\n+   gcc options selected, such as -ansi).  These files each contain one\n+   (initialized) copy of a special variable called `_lib_version'.  Each\n+   one of these files has `_lib_version' initialized to a different (enum)\n+   value.  The SVR4 library routines query the value of `_lib_version'\n+   at run to decide how they should behave.  Specifically, they decide\n+   (based upon the value of `_lib_version') if they will act in a strictly\n+   ANSI conforming manner or not.\n */\n \n #undef\tSTARTFILE_SPEC\n@@ -178,9 +177,7 @@ Boston, MA 02111-1307, USA.\n \t\t\t  %{pg:gcrt1.o%s}%{!pg:%{p:mcrt1.o%s}%{!p:crt1.o%s}}}}\\\n \t\t\t%{pg:gcrti.o%s}%{!pg:crti.o%s} \\\n \t\t\t%{ansi:values-Xc.o%s} \\\n-\t\t\t%{!ansi: \\\n-\t\t\t %{traditional:values-Xt.o%s} \\\n-\t\t\t %{!traditional:values-Xa.o%s}} \\\n+\t\t\t%{!ansi:values-Xa.o%s} \\\n  \t\t\tcrtbegin.o%s\"\n \n /* Allow #sccs in preprocessor.  */"}, {"sha": "73b0822400feed8aeea2fa835c363b1244ec1623", "filename": "gcc/config/sparc/sol2-sld-64.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -101,15 +101,11 @@\n \n #define STARTFILE_SPEC32 \"\\\n %{ansi:values-Xc.o%s} \\\n-%{!ansi: \\\n- %{traditional:values-Xt.o%s} \\\n- %{!traditional:values-Xa.o%s}}\"\n+%{!ansi:values-Xa.o%s}\"\n \n #define STARTFILE_SPEC64 \"\\\n %{ansi:/usr/lib/sparcv9/values-Xc.o%s} \\\n-%{!ansi: \\\n- %{traditional:/usr/lib/sparcv9/values-Xt.o%s} \\\n- %{!traditional:/usr/lib/sparcv9/values-Xa.o%s}}\"\n+%{!ansi:/usr/lib/sparcv9/values-Xa.o%s}\"\n  \n #ifdef SPARC_BI_ARCH\n "}, {"sha": "1f86a50f5fddc18ef8cc23dc907ae7307848d5cf", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -131,9 +131,7 @@ Boston, MA 02111-1307, USA.  */\n                             %{!pg:crt1.o%s}}}} \\\n \t\t\tcrti.o%s \\\n \t\t\t%{ansi:values-Xc.o%s} \\\n-\t\t\t%{!ansi: \\\n-\t\t\t %{traditional:values-Xt.o%s} \\\n-\t\t\t %{!traditional:values-Xa.o%s}} \\\n+\t\t\t%{!ansi:values-Xa.o%s} \\\n \t\t\tcrtbegin.o%s\"\n \n /* ??? Note: in order for -compat-bsd to work fully,"}, {"sha": "b2a2ad1e3d4035ae121143ad956b08e5a3c8e495", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -1415,10 +1415,6 @@ typedef int CUMULATIVE_ARGS;\n    function call.  */\n #define RETURN_VALUE_REGNUM\tFIRST_ARGUMENT_REGISTER\n      \n-/* Define this macro if `-traditional' should not cause functions declared to\n-   return `float' to convert the value to `double'.  */\n-/* #define TRADITIONAL_RETURN_FLOAT */\n-\n /* A C expression to create an RTX representing the place where a function\n    returns a value of data type VALTYPE.  VALTYPE is a tree node representing a\n    data type.  Write `TYPE_MODE (VALTYPE)' to get the machine mode used to\n@@ -4138,13 +4134,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    #pragma pack(push,<n>) and #pragma pack(pop).  */\n /* HANDLE_PRAGMA_PACK_PUSH_POP 1 */\n    \n-/* Define this macro to control use of the character `$' in identifier names.\n-   The value should be 0, 1, or 2.  0 means `$' is not allowed by default; 1\n-   means it is allowed by default if `-traditional' is used; 2 means it is\n-   allowed by default provided `-ansi' is not used.  1 is the default; there is\n-   no need to define this macro in that case.  */\n-/* #define DOLLARS_IN_IDENTIFIERS */\n-\n /* Define this macro if the assembler does not accept the character `$' in\n    label names.  By default constructors and destructors in G++ have `$' in the\n    identifiers.  If this macro is defined, `.' is used instead."}, {"sha": "09646775129bd9c25ef61c89a89878dfde1d877a", "filename": "gcc/config/svr4.h", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fsvr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fconfig%2Fsvr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr4.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -173,26 +173,23 @@ Boston, MA 02111-1307, USA.\n \t\t   %{Qy:} %{!Qn:-Qy}\"\n #endif\n \n-/* Gcc automatically adds in one of the files /usr/ccs/lib/values-Xc.o,\n-   /usr/ccs/lib/values-Xa.o, or /usr/ccs/lib/values-Xt.o for each final\n-   link step (depending upon the other gcc options selected, such as\n-   -traditional and -ansi).  These files each contain one (initialized)\n-   copy of a special variable called `_lib_version'.  Each one of these\n-   files has `_lib_version' initialized to a different (enum) value.\n-   The SVR4 library routines query the value of `_lib_version' at run\n-   to decide how they should behave.  Specifically, they decide (based\n-   upon the value of `_lib_version') if they will act in a strictly ANSI\n-   conforming manner or not.  */\n+/* Gcc automatically adds in one of the files /usr/ccs/lib/values-Xc.o\n+   or /usr/ccs/lib/values-Xa.o for each final link step (depending\n+   upon the other gcc options selected, such as -ansi).  These files\n+   each contain one (initialized) copy of a special variable called\n+   `_lib_version'.  Each one of these files has `_lib_version' initialized\n+   to a different (enum) value.  The SVR4 library routines query the\n+   value of `_lib_version' at run to decide how they should behave.\n+   Specifically, they decide (based upon the value of `_lib_version')\n+   if they will act in a strictly ANSI conforming manner or not.  */\n \n #undef\tSTARTFILE_SPEC\n #define STARTFILE_SPEC \"%{!shared: \\\n \t\t\t %{!symbolic: \\\n \t\t\t  %{pg:gcrt1.o%s}%{!pg:%{p:mcrt1.o%s}%{!p:crt1.o%s}}}}\\\n \t\t\t%{pg:gcrti.o%s}%{!pg:crti.o%s} \\\n \t\t\t%{ansi:values-Xc.o%s} \\\n-\t\t\t%{!ansi: \\\n-\t\t\t %{traditional:values-Xt.o%s} \\\n-\t\t\t %{!traditional:values-Xa.o%s}} \\\n+\t\t\t%{!ansi:values-Xa.o%s} \\\n  \t\t\tcrtbegin.o%s\"\n \n /* Allow #sccs in preprocessor.  */"}, {"sha": "d2c80e0302fe47cd482d1375e22f7374858f2966", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -1,3 +1,9 @@\n+2002-02-27  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* decl2.c: Delete traditional-mode-related code copied from\n+\tthe C front end but not used, or used only to permit the\n+\tcompiler to link.\n+\n 2002-02-24 Craig Rodrigues  <rodrigc@gcc.gnu.org> \n \n \tPR c++/4093"}, {"sha": "ff6ae1ecd7c1a989301a5dfa1fe3d343db45d333", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -131,11 +131,6 @@ int flag_no_asm;\n \n int flag_no_gnu_keywords;\n \n-/* Nonzero means do some things the same way PCC does.  Only provided so\n-   the compiler will link.  */\n-\n-int flag_traditional;\n-\n /* Nonzero means to treat bitfields as unsigned unless they say `signed'.  */\n \n int flag_signed_bitfields = 1;\n@@ -495,9 +490,7 @@ cxx_decode_option (argc, argv)\n \n   strings_processed = cpp_handle_option (parse_in, argc, argv, 0);\n \n-  if (!strcmp (p, \"-ftraditional\") || !strcmp (p, \"-traditional\"))\n-    /* ignore */;\n-  else if (p[0] == '-' && p[1] == 'f')\n+  if (p[0] == '-' && p[1] == 'f')\n     {\n       /* Some kind of -f option.\n \t P's value is the option sans `-f'."}, {"sha": "5a58556ead48289e0b827d2dacedeac3f48d1f33", "filename": "gcc/cppexp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -298,7 +298,7 @@ lex (pfile, skip_evaluation)\n \telse\n \t  op.unsignedp = WCHAR_UNSIGNED;\n \top.op = CPP_NUMBER;\n-\top.value = cpp_interpret_charconst (pfile, token, 1, 0, &chars_seen);\n+\top.value = cpp_interpret_charconst (pfile, token, 1, &chars_seen);\n \treturn op;\n       }\n "}, {"sha": "1a602885d18dd5c9f75e2c5bea2e7693f880e55e", "filename": "gcc/cpplex.c", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -1635,7 +1635,7 @@ maybe_read_ucs (pfile, pstr, limit, pc)\n     return 1;\n \n   if (CPP_WTRADITIONAL (pfile))\n-    cpp_warning (pfile, \"the meaning of '\\\\%c' varies with -traditional\", c);\n+    cpp_warning (pfile, \"the meaning of '\\\\%c' is different in traditional C\", c);\n \n   length = (c == 'u' ? 4: 8);\n \n@@ -1688,17 +1688,15 @@ maybe_read_ucs (pfile, pstr, limit, pc)\n /* Interpret an escape sequence, and return its value.  PSTR points to\n    the input pointer, which is just after the backslash.  LIMIT is how\n    much text we have.  MASK is a bitmask for the precision for the\n-   destination type (char or wchar_t).  TRADITIONAL, if true, does not\n-   interpret escapes that did not exist in traditional C.\n+   destination type (char or wchar_t).\n \n    Handles all relevant diagnostics.  */\n unsigned int\n-cpp_parse_escape (pfile, pstr, limit, mask, traditional)\n+cpp_parse_escape (pfile, pstr, limit, mask)\n      cpp_reader *pfile;\n      const unsigned char **pstr;\n      const unsigned char *limit;\n      unsigned HOST_WIDE_INT mask;\n-     int traditional;\n {\n   int unknown = 0;\n   const unsigned char *str = *pstr;\n@@ -1722,9 +1720,7 @@ cpp_parse_escape (pfile, pstr, limit, mask, traditional)\n \n     case 'a':\n       if (CPP_WTRADITIONAL (pfile))\n-\tcpp_warning (pfile, \"the meaning of '\\\\a' varies with -traditional\");\n-      if (!traditional)\n-\tc = TARGET_BELL;\n+\tcpp_warning (pfile, \"the meaning of '\\\\a' is different in traditional C\");\n       break;\n \n     case 'e': case 'E':\n@@ -1739,9 +1735,8 @@ cpp_parse_escape (pfile, pstr, limit, mask, traditional)\n \n     case 'x':\n       if (CPP_WTRADITIONAL (pfile))\n-\tcpp_warning (pfile, \"the meaning of '\\\\x' varies with -traditional\");\n+\tcpp_warning (pfile, \"the meaning of '\\\\x' is different in traditional C\");\n \n-      if (!traditional)\n \t{\n \t  unsigned int i = 0, overflow = 0;\n \t  int digits_found = 0;\n@@ -1822,16 +1817,13 @@ cpp_parse_escape (pfile, pstr, limit, mask, traditional)\n #endif\n \n /* Interpret a (possibly wide) character constant in TOKEN.\n-   WARN_MULTI warns about multi-character charconsts, if not\n-   TRADITIONAL.  TRADITIONAL also indicates not to interpret escapes\n-   that did not exist in traditional C.  PCHARS_SEEN points to a\n-   variable that is filled in with the number of characters seen.  */\n+   WARN_MULTI warns about multi-character charconsts.  PCHARS_SEEN points\n+   to a variable that is filled in with the number of characters seen.  */\n HOST_WIDE_INT\n-cpp_interpret_charconst (pfile, token, warn_multi, traditional, pchars_seen)\n+cpp_interpret_charconst (pfile, token, warn_multi, pchars_seen)\n      cpp_reader *pfile;\n      const cpp_token *token;\n      int warn_multi;\n-     int traditional;\n      unsigned int *pchars_seen;\n {\n   const unsigned char *str = token->val.str.text;\n@@ -1886,7 +1878,7 @@ cpp_interpret_charconst (pfile, token, warn_multi, traditional, pchars_seen)\n #endif\n \n       if (c == '\\\\')\n-\tc = cpp_parse_escape (pfile, &str, limit, mask, traditional);\n+\tc = cpp_parse_escape (pfile, &str, limit, mask);\n \n #ifdef MAP_CHARACTER\n       if (ISPRINT (c))\n@@ -1910,7 +1902,7 @@ cpp_interpret_charconst (pfile, token, warn_multi, traditional, pchars_seen)\n       chars_seen = max_chars;\n       cpp_warning (pfile, \"character constant too long\");\n     }\n-  else if (chars_seen > 1 && !traditional && warn_multi)\n+  else if (chars_seen > 1 && warn_multi)\n     cpp_warning (pfile, \"multi-character character constant\");\n \n   /* If relevant type is signed, sign-extend the constant.  */"}, {"sha": "b6c3805b2dc08818a5fa76f5cf78e63a3b901111", "filename": "gcc/cpplib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -287,7 +287,7 @@ directive_diagnostics (pfile, dir, indented)\n \t compilers, directives added by C89 must have their #\n \t indented, and directives present in traditional C must not.\n \t This is true even of directives in skipped conditional\n-\t blocks.  */\n+\t blocks.  #elif cannot be used at all.  */\n       if (CPP_WTRADITIONAL (pfile))\n \t{\n \t  if (dir == &dtable[T_ELIF])"}, {"sha": "de5dd54bacfd2d5d531cad6fea08941d1ba7d7ef", "filename": "gcc/cpplib.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -527,7 +527,7 @@ extern void _cpp_backup_tokens PARAMS ((cpp_reader *, unsigned int));\n /* Evaluate a CPP_CHAR or CPP_WCHAR token.  */\n extern HOST_WIDE_INT\n cpp_interpret_charconst PARAMS ((cpp_reader *, const cpp_token *,\n-\t\t\t\t int, int, unsigned int *));\n+\t\t\t\t int, unsigned int *));\n \n extern void cpp_define PARAMS ((cpp_reader *, const char *));\n extern void cpp_assert PARAMS ((cpp_reader *, const char *));\n@@ -575,7 +575,7 @@ extern const char *cpp_type2name\tPARAMS ((enum cpp_ttype));\n extern unsigned int cpp_parse_escape\tPARAMS ((cpp_reader *,\n \t\t\t\t\t\t const unsigned char **,\n \t\t\t\t\t\t const unsigned char *,\n-\t\t\t\t\t\t unsigned HOST_WIDE_INT, int));\n+\t\t\t\t\t\t unsigned HOST_WIDE_INT));\n \n /* In cpphash.c */\n "}, {"sha": "302e0bd421b3bf5162f49ec9dcaff40766c8086d", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -1478,7 +1478,7 @@ check_trad_stringification (pfile, macro, string)\n \t      && !memcmp (p, NODE_NAME (node), len))\n \t    {\n \t      cpp_warning (pfile,\n-\t   \"macro argument \\\"%s\\\" would be stringified with -traditional\",\n+\t   \"macro argument \\\"%s\\\" would be stringified in traditional C\",\n \t\t\t   NODE_NAME (node));\n \t      break;\n \t    }"}, {"sha": "b6e5ef1e752107451f1f9accc827316bc88bfb7a", "filename": "gcc/doc/bugreport.texi", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fdoc%2Fbugreport.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fdoc%2Fbugreport.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fbugreport.texi?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -64,13 +64,9 @@ prevent the assembler from being run.\n If the compiler produces valid assembly code that does not correctly\n execute the input source code, that is a compiler bug.\n \n-However, you must double-check to make sure, because you may have run\n-into an incompatibility between GNU C and traditional C\n-(@pxref{Incompatibilities}).  These incompatibilities might be considered\n-bugs, but they are inescapable consequences of valuable features.\n-\n-Or you may have a program whose behavior is undefined, which happened\n-by chance to give the desired results with another C or C++ compiler.\n+However, you must double-check to make sure, because you may have a\n+program whose behavior is undefined, which happened by chance to give\n+the desired results with another C or C++ compiler.\n \n For example, in many nonoptimizing compilers, you can write @samp{x;}\n at the end of a function instead of @samp{return x;}, with the same"}, {"sha": "5e11ff8faae5d23f2a44d1eb7744bbdede0dc6e6", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -3343,8 +3343,8 @@ preprocessor.  We do not guarantee that GCC's behavior under\n \n Traditional mode exists only for backward compatibility.  We have no\n plans to augment it in any way nor will we change it except to fix\n-catastrophic bugs.  You should be aware that modern C libraries often\n-have header files which are incompatible with traditional mode.\n+catastrophic bugs.  As of GCC 3.2, traditional mode is not supported for\n+compilation, only preprocessing.\n \n This is a list of the differences.  It may not be complete, and may not\n correspond exactly to the behavior of either GCC or a true traditional\n@@ -4351,8 +4351,8 @@ Define the macros @sc{__gnuc__}, @sc{__gnuc_minor__} and\n @option{-no-gcc}.\n \n @item -traditional\n-Try to imitate the behavior of old-fashioned C, as opposed to ISO\n-C@.  @xref{Traditional Mode}.\n+Try to imitate the behavior of the old-fashioned C preprocessor, as\n+opposed to the behavior specified by ISO C@.  @xref{Traditional Mode}.\n \n @item -trigraphs\n Process trigraph sequences.  @xref{Initial processing}."}, {"sha": "96db4ad944e16f817eadfdab4eb6bf2a96c1dde8", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -1453,8 +1453,8 @@ argument, these arguments are not macro expanded.\n @cindex escaped newlines\n @cindex newlines (escaped)\n \n-Recently, the non-traditional preprocessor has relaxed its treatment of\n-escaped newlines.  Previously, the newline had to immediately follow a\n+Recently, the preprocessor has relaxed its treatment of escaped\n+newlines.  Previously, the newline had to immediately follow a\n backslash.  The current implementation allows whitespace in the form of\n spaces, horizontal and vertical tabs, and form feeds between the\n backslash and the subsequent newline.  The preprocessor issues a\n@@ -2732,11 +2732,10 @@ extension is irrelevant.\n \n In GNU C, you may use C++ style comments, which start with @samp{//} and\n continue until the end of the line.  Many other C implementations allow\n-such comments, and they are likely to be in a future C standard.\n-However, C++ style comments are not recognized if you specify\n-@w{@option{-ansi}}, a @option{-std} option specifying a version of ISO C\n-before C99, or @w{@option{-traditional}}, since they are incompatible\n-with traditional constructs like @code{dividend//*comment*/divisor}.\n+such comments, and they are included in the 1999 C standard.  However,\n+C++ style comments are not recognized if you specify an @option{-std}\n+option specifying a version of ISO C before C99, or @option{-ansi}\n+(equivalent to @option{-std=c89}).\n \n @node Dollar Signs\n @section Dollar Signs in Identifier Names\n@@ -4055,25 +4054,20 @@ be deleted or moved or simplified.\n @cindex alternate keywords\n @cindex keywords, alternate\n \n-The option @option{-traditional} disables certain keywords;\n @option{-ansi} and the various @option{-std} options disable certain\n-others.  This causes trouble when you want to use GNU C extensions, or\n-ISO C features, in a general-purpose header file that should be usable\n-by all programs, including ISO C programs and traditional ones.  The\n-keywords @code{asm}, @code{typeof} and @code{inline} cannot be used\n-since they won't work in a program compiled with @option{-ansi}\n-(although @code{inline} can be used in a program compiled with\n-@option{-std=c99}), while the keywords @code{const}, @code{volatile},\n-@code{signed}, @code{typeof} and @code{inline} won't work in a program\n-compiled with @option{-traditional}.  The ISO C99 keyword\n+keywords.  This causes trouble when you want to use GNU C extensions, or\n+a general-purpose header file that should be usable by all programs,\n+including ISO C programs.  The keywords @code{asm}, @code{typeof} and\n+@code{inline} are not available in programs compiled with\n+@option{-ansi} or @option{-std} (although @code{inline} can be used in a\n+program compiled with @option{-std=c99}).  The ISO C99 keyword\n @code{restrict} is only available when @option{-std=gnu99} (which will\n eventually be the default) or @option{-std=c99} (or the equivalent\n @option{-std=iso9899:1999}) is used.\n \n The way to solve these problems is to put @samp{__} at the beginning and\n end of each problematical keyword.  For example, use @code{__asm__}\n-instead of @code{asm}, @code{__const__} instead of @code{const}, and\n-@code{__inline__} instead of @code{inline}.\n+instead of @code{asm}, and @code{__inline__} instead of @code{inline}.\n \n Other C compilers won't accept these alternative keywords; if you want to\n compile with another compiler, you can define the alternate keywords as"}, {"sha": "90df7de7361dc32a8d0fac59cef070b1955d3d4c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 86, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -1144,75 +1144,13 @@ options for strict ISO C conformance) implies @option{-trigraphs}.\n @cindex traditional C language\n @cindex C language, traditional\n @item -traditional\n-@opindex traditional\n-Attempt to support some aspects of traditional C compilers.\n-Specifically:\n-\n-@itemize @bullet\n-@item\n-All @code{extern} declarations take effect globally even if they\n-are written inside of a function definition.  This includes implicit\n-declarations of functions.\n-\n-@item\n-The newer keywords @code{typeof}, @code{inline}, @code{signed}, @code{const}\n-and @code{volatile} are not recognized.  (You can still use the\n-alternative keywords such as @code{__typeof__}, @code{__inline__}, and\n-so on.)\n-\n-@item\n-Comparisons between pointers and integers are always allowed.\n-\n-@item\n-Integer types @code{unsigned short} and @code{unsigned char} promote\n-to @code{unsigned int}.\n-\n-@item\n-Out-of-range floating point literals are not an error.\n-\n-@item\n-Certain constructs which ISO regards as a single invalid preprocessing\n-number, such as @samp{0xe-0xd}, are treated as expressions instead.\n-\n-@item\n-String ``constants'' are not necessarily constant; they are stored in\n-writable space, and identical looking constants are allocated\n-separately.  (This is the same as the effect of\n-@option{-fwritable-strings}.)\n-\n-@cindex @code{longjmp} and automatic variables\n-@item\n-All automatic variables not declared @code{register} are preserved by\n-@code{longjmp}.  Ordinarily, GNU C follows ISO C: automatic variables\n-not declared @code{volatile} may be clobbered.\n-\n-@item\n-@cindex @samp{\\x}\n-@cindex @samp{\\a}\n-@cindex escape sequences, traditional\n-The character escape sequences @samp{\\x} and @samp{\\a} evaluate as the\n-literal characters @samp{x} and @samp{a} respectively.  Without\n-@w{@option{-traditional}}, @samp{\\x} is a prefix for the hexadecimal\n-representation of a character, and @samp{\\a} produces a bell.\n-@end itemize\n-\n-This option is deprecated and may be removed.\n-\n-You may wish to use @option{-fno-builtin} as well as @option{-traditional}\n-if your program uses names that are normally GNU C built-in functions for\n-other purposes of its own.\n-\n-You cannot use @option{-traditional} if you include any header files that\n-rely on ISO C features.  Some vendors are starting to ship systems with\n-ISO C header files and you cannot use @option{-traditional} on such\n-systems to compile files that include any system headers.\n-\n-The @option{-traditional} option also enables @option{-traditional-cpp}.\n-\n-@item -traditional-cpp\n+@itemx -traditional-cpp\n @opindex traditional-cpp\n-Attempt to support some aspects of traditional C preprocessors.\n-See the GNU CPP manual for details.\n+@opindex traditional\n+Formerly, these options caused GCC to attempt to emulate a pre-standard\n+C compiler.  They are now only supported with the @option{-E} switch.\n+The preprocessor continues to support a pre-standard mode.  See the GNU\n+CPP manual for details.\n \n @item -fcond-mismatch\n @opindex fcond-mismatch\n@@ -1260,32 +1198,15 @@ declaration does not use either @code{signed} or @code{unsigned}.  By\n default, such a bit-field is signed, because this is consistent: the\n basic integer types such as @code{int} are signed types.\n \n-However, when @option{-traditional} is used, bit-fields are all unsigned\n-no matter what.\n-\n @item -fwritable-strings\n @opindex fwritable-strings\n Store string constants in the writable data segment and don't uniquize\n them.  This is for compatibility with old programs which assume they can\n-write into string constants.  The option @option{-traditional} also has\n-this effect.\n+write into string constants.\n \n Writing into string constants is a very bad idea; ``constants'' should\n be constant.\n \n-@item -fallow-single-precision\n-@opindex fallow-single-precision\n-Do not promote single precision math operations to double precision,\n-even when compiling with @option{-traditional}.\n-\n-Traditional K&R C promotes all floating point operations to double\n-precision, regardless of the sizes of the operands.   On the\n-architecture for which you are compiling, single precision may be faster\n-than double precision.   If you must use @option{-traditional}, but want\n-to use single precision operations when the operands are single\n-precision, use this option.   This option has no effect when compiling\n-with ISO or GNU C conventions (the default).\n-\n @item -fshort-wchar\n @opindex fshort-wchar\n Override the underlying type for @samp{wchar_t} to be @samp{short"}, {"sha": "4e9720c87e7e9f4df0568a1c3cbcf4a312e5282b", "filename": "gcc/doc/standards.texi", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fdoc%2Fstandards.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fdoc%2Fstandards.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fstandards.texi?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -89,13 +89,6 @@ Errors in the 1999 ISO C standard were corrected in a Technical\n Corrigendum published in 2001.  GCC does not support the uncorrected\n version.\n \n-@opindex traditional\n-GCC also has some limited support for traditional (pre-ISO) C with the\n-@option{-traditional} option.  This support may be of use for compiling\n-some very old programs that have not been updated to ISO C, but should\n-not be used for new programs.  It will not work with some modern C\n-libraries such as the GNU C library.\n-\n By default, GCC provides some extensions to the C language that on\n rare occasions conflict with the C standard.  @xref{C\n Extensions,,Extensions to the C Language Family}.  Use of the"}, {"sha": "0a9e842d4554caf4722ed0d5cf2e7eb03a8d52b2", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -3560,11 +3560,6 @@ This section discusses the macros that control returning scalars as\n values---values that can fit in registers.\n \n @table @code\n-@findex TRADITIONAL_RETURN_FLOAT\n-@item TRADITIONAL_RETURN_FLOAT\n-Define this macro if @option{-traditional} should not cause functions\n-declared to return @code{float} to convert the value to @code{double}.\n-\n @findex FUNCTION_VALUE\n @item FUNCTION_VALUE (@var{valtype}, @var{func})\n A C expression to create an RTX representing the place where a"}, {"sha": "7cc7e8a53c9fd7a75959cd624c55ab2f0e7e799c", "filename": "gcc/doc/trouble.texi", "status": "modified", "additions": 17, "deletions": 40, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fdoc%2Ftrouble.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fdoc%2Ftrouble.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftrouble.texi?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -443,8 +443,7 @@ Parse errors may occur compiling X11 on a Decstation running Ultrix 4.2\n because of problems in DEC's versions of the X11 header files\n @file{X11/Xlib.h} and @file{X11/Xutil.h}.  People recommend adding\n @option{-I/usr/include/mit} to use the MIT versions of the header files,\n-using the @option{-traditional} switch to turn off ISO C, or fixing the\n-header files by adding this:\n+or fixing the header files by adding this:\n \n @example\n #ifdef __STDC__\n@@ -484,9 +483,7 @@ MALLOC=gmalloc.o\n @opindex traditional\n \n There are several noteworthy incompatibilities between GNU C and K&R\n-(non-ISO) versions of C@.  The @option{-traditional} option\n-eliminates many of these incompatibilities, @emph{but not all}, by\n-telling GCC to behave like a K&R C compiler.\n+(non-ISO) versions of C@.\n \n @itemize @bullet\n @cindex string constants\n@@ -516,7 +513,6 @@ The best solution to these problems is to change the program to use\n purposes instead of string constants.  But if this is not possible,\n you can use the @option{-fwritable-strings} flag, which directs GCC\n to handle string constants the same way most C compilers do.\n-@option{-traditional} also has this effect, among others.\n \n @item\n @code{-2147483648} is positive.\n@@ -536,9 +532,6 @@ string constants.  For example, the following macro in GCC\n @noindent\n will produce output @code{\"a\"} regardless of what the argument @var{a} is.\n \n-The @option{-traditional} option directs GCC to handle such cases\n-(among others) in the old-fashioned (non-ISO) fashion.\n-\n @cindex @code{setjmp} incompatibilities\n @cindex @code{longjmp} incompatibilities\n @item\n@@ -573,11 +566,6 @@ in it.\n If you use the @option{-W} option with the @option{-O} option, you will\n get a warning when GCC thinks such a problem might be possible.\n \n-The @option{-traditional} option directs GCC to put variables in\n-the stack by default, rather than in registers, in functions that\n-call @code{setjmp}.  This results in the behavior found in\n-traditional C compilers.\n-\n @item\n Programs that use preprocessing directives in the middle of macro\n arguments do not work with GCC@.  For example, a program like this\n@@ -591,9 +579,7 @@ foobar (\n @end group\n @end example\n \n-ISO C does not permit such a construct.  It would make sense to support\n-it when @option{-traditional} is used, but it is too much work to\n-implement.\n+ISO C does not permit such a construct.\n \n @item\n K&R compilers allow comments to cross over an inclusion boundary\n@@ -611,9 +597,6 @@ have the same scope as any other declaration in the same place.\n In some other C compilers, a @code{extern} declaration affects all the\n rest of the file even if it happens within a block.\n \n-The @option{-traditional} option directs GCC to treat all @code{extern}\n-declarations as global, like traditional compilers.\n-\n @item\n In traditional C, you can combine @code{long}, etc., with a typedef name,\n as shown here:\n@@ -624,38 +607,34 @@ typedef long foo bar;\n @end example\n \n In ISO C, this is not allowed: @code{long} and other type modifiers\n-require an explicit @code{int}.  Because this criterion is expressed\n-by Bison grammar rules rather than C code, the @option{-traditional}\n-flag cannot alter it.\n+require an explicit @code{int}.\n \n @cindex typedef names as function parameters\n @item\n-PCC allows typedef names to be used as function parameters.  The\n-difficulty described immediately above applies here too.\n+PCC allows typedef names to be used as function parameters.\n \n @item\n-When in @option{-traditional} mode, GCC allows the following erroneous\n-pair of declarations to appear together in a given scope:\n+Traditional C allows the following erroneous pair of declarations to\n+appear together in a given scope:\n \n @example\n typedef int foo;\n typedef foo foo;\n @end example\n \n @item\n-GCC treats all characters of identifiers as significant, even when in\n-@option{-traditional} mode.  According to K&R-1 (2.2), ``No more than the\n-first eight characters are significant, although more may be used.''.\n-Also according to K&R-1 (2.2), ``An identifier is a sequence of letters\n-and digits; the first character must be a letter.  The underscore _\n-counts as a letter.'', but GCC also allows dollar signs in identifiers.\n+GCC treats all characters of identifiers as significant.  According to\n+K&R-1 (2.2), ``No more than the first eight characters are significant,\n+although more may be used.''.  Also according to K&R-1 (2.2), ``An\n+identifier is a sequence of letters and digits; the first character must\n+be a letter.  The underscore _ counts as a letter.'', but GCC also\n+allows dollar signs in identifiers.\n \n @cindex whitespace\n @item\n PCC allows whitespace in the middle of compound assignment operators\n such as @samp{+=}.  GCC, following the ISO standard, does not\n-allow this.  The difficulty described immediately above applies here\n-too.\n+allow this.\n \n @cindex apostrophes\n @cindex '\n@@ -673,8 +652,7 @@ You can't expect this to work.\n @end example\n \n The best solution to such a problem is to put the text into an actual\n-C comment delimited by @samp{/*@dots{}*/}.  However,\n-@option{-traditional} suppresses these error messages.\n+C comment delimited by @samp{/*@dots{}*/}.\n \n @item\n Many user programs contain the declaration @samp{long time ();}.  In the\n@@ -1296,12 +1274,11 @@ they write programs which have the same meaning in both C dialects.)\n \n @item\n @opindex ansi\n-@opindex traditional\n @opindex std\n Undefining @code{__STDC__} when @option{-ansi} is not used.\n \n-Currently, GCC defines @code{__STDC__} as long as you don't use\n-@option{-traditional}.  This provides good results in practice.\n+Currently, GCC defines @code{__STDC__} unconditionally.  This provides\n+good results in practice.\n \n Programmers normally use conditionals on @code{__STDC__} to ask whether\n it is safe to use certain features of ISO C, such as function"}, {"sha": "315ac3a61fbcf0ca30bcdb5043733f6c83154e70", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -3234,8 +3234,6 @@ limbo_die_node;\n /* Information concerning the compilation unit's programming\n    language, and compiler version.  */\n \n-extern int flag_traditional;\n-\n /* Fixed size portion of the DWARF compilation unit header.  */\n #define DWARF_COMPILE_UNIT_HEADER_SIZE (2 * DWARF_OFFSET_SIZE + 3)\n \n@@ -10756,8 +10754,6 @@ gen_compile_unit_die (filename)\n     language = DW_LANG_Pascal83;\n   else if (strcmp (language_string, \"GNU Java\") == 0)\n     language = DW_LANG_Java;\n-  else if (flag_traditional)\n-    language = DW_LANG_C;\n   else\n     language = DW_LANG_C89;\n "}, {"sha": "ad715cda2dc9d062cfd2f2abc9e2f9deaf159da6", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -631,8 +631,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n        && is_tagged_type (TREE_TYPE (decl))\t\t\\\n        && decl == TYPE_STUB_DECL (TREE_TYPE (decl))))\n \n-extern int flag_traditional;\n-\n /* Maximum size (in bytes) of an artificially generated label.\t*/\n \n #define MAX_ARTIFICIAL_LABEL_BYTES\t30\n@@ -4152,8 +4150,6 @@ output_compile_unit_die (arg)\n     language_attribute (LANG_PASCAL83);\n   else if (strcmp (language_string, \"GNU Java\") == 0)\n     language_attribute (LANG_JAVA);\n-  else if (flag_traditional)\n-    language_attribute (LANG_C);\n   else\n     language_attribute (LANG_C89);\n   low_pc_attribute (TEXT_BEGIN_LABEL);"}, {"sha": "3809a19b637eb2194535f0eead0a81e97e55a924", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -1,3 +1,9 @@\n+2002-02-27  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* com.c, lex.c, top.c: Delete traditional-mode-related code\n+\tcopied from the C front end but not used, or used only to\n+\tpermit the compiler to link.\n+\n 2002-02-13  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n \t* news.texi: List Problem Reports fixed in 3.1."}, {"sha": "3c4a1d5d370d904e0a297d36c1c335e6a7eeef75", "filename": "gcc/f/com.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -16197,7 +16197,7 @@ typedef doublereal E_f; // real function with -R not specified //\n \n // (No such symbols should be defined in a strict ANSI C compiler.\n    We can avoid trouble with f2c-translated code by using\n-   gcc -ansi [-traditional].) //\n+   gcc -ansi.) //\n \n \n "}, {"sha": "b3e57ba2d74b6f240d164487c4133ba0e103ed6e", "filename": "gcc/f/lex.c", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Ff%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Ff%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flex.c?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -246,8 +246,6 @@ ffelex_backslash_ (int c, ffewhereColumnNumber col)\n      hollerith constants.  */\n \n #define wide_flag 0\n-#define warn_traditional 0\n-#define flag_traditional 0\n \n   switch (state)\n     {\n@@ -268,18 +266,6 @@ ffelex_backslash_ (int c, ffewhereColumnNumber col)\n       switch (c)\n \t{\n \tcase 'x':\n-\t  if (warn_traditional)\n-\t    {\n-\t      /* xgettext:no-c-format */\n-\t      ffebad_start_msg_lex (\"The meaning of `\\\\x' (at %0) varies with -traditional\",\n-\t\t\t\t    FFEBAD_severityWARNING);\n-\t      ffelex_bad_here_ (0, line, column);\n-\t      ffebad_finish ();\n-\t    }\n-\n-\t  if (flag_traditional)\n-\t    return c;\n-\n \t  code = 0;\n \t  count = 0;\n \t  nonnull = 0;\n@@ -319,24 +305,9 @@ ffelex_backslash_ (int c, ffewhereColumnNumber col)\n \t  return TARGET_BS;\n \n \tcase 'a':\n-\t  if (warn_traditional)\n-\t    {\n-\t      /* xgettext:no-c-format */\n-\t      ffebad_start_msg_lex (\"The meaning of `\\\\a' (at %0) varies with -traditional\",\n-\t\t\t\t    FFEBAD_severityWARNING);\n-\t      ffelex_bad_here_ (0, line, column);\n-\t      ffebad_finish ();\n-\t    }\n-\n-\t  if (flag_traditional)\n-\t    return c;\n \t  return TARGET_BELL;\n \n \tcase 'v':\n-#if 0 /* Vertical tab is present in common usage compilers.  */\n-\t  if (flag_traditional)\n-\t    return c;\n-#endif\n \t  return TARGET_VT;\n \n \tcase 'e':\n@@ -589,12 +560,6 @@ ffelex_cfebackslash_ (int *use_d, int *d, FILE *finput)\n   switch (c)\n     {\n     case 'x':\n-      if (warn_traditional)\n-\twarning (\"the meaning of `\\\\x' varies with -traditional\");\n-\n-      if (flag_traditional)\n-\treturn c;\n-\n       code = 0;\n       count = 0;\n       nonnull = 0;\n@@ -672,18 +637,9 @@ ffelex_cfebackslash_ (int *use_d, int *d, FILE *finput)\n       return TARGET_BS;\n \n     case 'a':\n-      if (warn_traditional)\n-\twarning (\"the meaning of `\\\\a' varies with -traditional\");\n-\n-      if (flag_traditional)\n-\treturn c;\n       return TARGET_BELL;\n \n     case 'v':\n-#if 0 /* Vertical tab is present in common usage compilers.  */\n-      if (flag_traditional)\n-\treturn c;\n-#endif\n       return TARGET_VT;\n \n     case 'e':"}, {"sha": "6a789e3ed01feec7f6c43bba0c87b3e65bd09673", "filename": "gcc/f/top.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Ff%2Ftop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Ff%2Ftop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftop.c?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -58,7 +58,6 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n /* Externals defined here. */\n \n-int flag_traditional;\t\t/* Shouldn't need this (C front end only)! */\n bool ffe_is_do_internal_checks_ = FALSE;\n bool ffe_is_90_ = FFETARGET_defaultIS_90;\n bool ffe_is_automatic_ = FFETARGET_defaultIS_AUTOMATIC;"}, {"sha": "4001c0df4643359e163413b6401ff249eb64d8a2", "filename": "gcc/gcc.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -691,7 +691,7 @@ static const char *cc1_options =\n \"%{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n  %1 %{!Q:-quiet} -dumpbase %B %{d*} %{m*} %{a*}\\\n  %{g*} %{O*} %{W*} %{w} %{pedantic*} %{std*} %{ansi}\\\n- %{traditional} %{v:-version} %{pg:-p} %{p} %{f*}\\\n+ %{v:-version} %{pg:-p} %{p} %{f*}\\\n  %{Qn:-fno-ident} %{--help:--help}\\\n  %{--target-help:--target-help}\\\n  %{!fsyntax-only:%{S:%W{o*}%{!o*:-o %b.s}}}\\\n@@ -822,18 +822,16 @@ static const struct compiler default_compilers[] =\n   {\".c\", \"@c\", 0},\n   {\"@c\",\n    /* cc1 has an integrated ISO C preprocessor.  We should invoke the\n-      external preprocessor if -save-temps or -traditional is given.  */\n+      external preprocessor if -save-temps is given.  */\n      \"%{E|M|MM:%(trad_capable_cpp) -lang-c %{ansi:-std=c89} %(cpp_options)}\\\n       %{!E:%{!M:%{!MM:\\\n-\t  %{save-temps:%(trad_capable_cpp) -lang-c %{ansi:-std=c89}\\\n-\t\t%(cpp_options) %b.i \\n\\\n+          %{traditional|ftraditional:\\\n+%eGNU C no longer supports -traditional without -E}\\\n+\t  %{save-temps|traditional-cpp:%(trad_capable_cpp) \\\n+\t\t-lang-c %{ansi:-std=c89} %(cpp_options) %b.i \\n\\\n \t\t    cc1 -fpreprocessed %b.i %(cc1_options)}\\\n-\t  %{!save-temps:\\\n-\t    %{traditional|ftraditional|traditional-cpp:\\\n-\t\ttradcpp0 -lang-c %{ansi:-std=c89} %(cpp_options) %{!pipe:%g.i} |\\n\\\n-\t\t    cc1 -fpreprocessed %{!pipe:%g.i} %(cc1_options)}\\\n-\t    %{!traditional:%{!ftraditional:%{!traditional-cpp:\\\n-\t\tcc1 -lang-c %{ansi:-std=c89} %(cpp_unique_options) %(cc1_options)}}}}\\\n+\t  %{!save-temps:%{!traditional-cpp:\\\n+\t\tcc1 -lang-c %{ansi:-std=c89} %(cpp_unique_options) %(cc1_options)}}\\\n         %{!fsyntax-only:%(invoke_as)}}}}\", 0},\n   {\"-\",\n    \"%{!E:%e-E required when input is from standard input}\\"}, {"sha": "4076a77b78df1273db52c420ea6f5d8ae4adeb0e", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -1,3 +1,9 @@\n+2002-02-27  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* builtins.c, decl.c: Delete traditional-mode-related code\n+\tcopied from the C front end but not used, or used only to\n+\tpermit the compiler to link.\n+\n 2002-02-22  Tom Tromey  <tromey@redhat.com>\n \n \tFix for PR java/2369:"}, {"sha": "832e6435aa6f98b1a2887fb33e2cd895a868302d", "filename": "gcc/java/builtins.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fjava%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fjava%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuiltins.c?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -281,11 +281,8 @@ initialize_builtins ()\n \n   /* Work around C-specific junk in builtin-types.def.  */\n #define intmax_type_node NULL_TREE\n-#define traditional_ptr_type_node NULL_TREE\n-#define traditional_cptr_type_node NULL_TREE\n #define c_size_type_node NULL_TREE\n #define const_string_type_node NULL_TREE\n-#define traditional_len_type_node NULL_TREE\n #define va_list_ref_type_node NULL_TREE\n #define va_list_arg_type_node NULL_TREE\n #define flag_isoc99 0"}, {"sha": "f9bbc9f672bc599044b1530c045fe4abfed8812b", "filename": "gcc/java/decl.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -323,8 +323,6 @@ static tree named_labels;\n static tree shadowed_labels;\n #endif\n \n-int flag_traditional;\n-\n tree java_global_trees[JTI_MAX];\n   \n /* Build (and pushdecl) a \"promoted type\" for all standard"}, {"sha": "c6e2eb8808cf9d433727d810ed998c11eef215c8", "filename": "gcc/objc/lang-specs.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fobjc%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fobjc%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Flang-specs.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -27,15 +27,13 @@ Boston, MA 02111-1307, USA.  */\n       external preprocessor if -save-temps or -traditional is given.  */\n      \"%{E|M|MM:%(trad_capable_cpp) -lang-objc %{ansi:-std=c89} %(cpp_options)}\\\n       %{!E:%{!M:%{!MM:\\\n-\t%{save-temps:%(trad_capable_cpp) -lang-objc %{ansi:-std=c89}\\\n+\t%{traditional|ftraditional|traditional-cpp:\\\n+%eGNU Objective C no longer supports traditional compilation}\\\n+\t%{save-temps:cpp0 -lang-objc %{ansi:-std=c89}\\\n \t  %(cpp_options) %b.mi \\n\\\n \t    cc1obj -fpreprocessed %b.mi %(cc1_options) %{gen-decls}}\\\n \t%{!save-temps:\\\n-\t  %{traditional|ftraditional|traditional-cpp:\\\n-\t    tradcpp0 -lang-objc %{ansi:-std=c89} %(cpp_options) %{!pipe:%g.mi} |\\n\\\n-\t    cc1obj -fpreprocessed %{!pipe:%g.mi} %(cc1_options) %{gen-decls}}\\\n-\t  %{!traditional:%{!ftraditional:%{!traditional-cpp:\\\n-\t    cc1obj %{ansi:-std=c89} %(cpp_unique_options) %(cc1_options) %{gen-decls}}}}}\\\n+\t    cc1obj %{ansi:-std=c89} %(cpp_unique_options) %(cc1_options) %{gen-decls}}\\\n         %{!fsyntax-only:%(invoke_as)}}}}\", 0},\n   {\".mi\", \"@objc-cpp-output\", 0},\n   {\"@objc-cpp-output\","}, {"sha": "73e7c80bf6afb4b2bf2262134a0577bb7ce69639", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -1131,9 +1131,6 @@ synth_module_prologue ()\n       DECL_INLINE (umsg_decl) = 1;\n       DECL_ARTIFICIAL (umsg_decl) = 1;\n \n-      if (flag_traditional && TAG_MSGSEND[0] != '_')\n-\tDECL_BUILT_IN_NONANSI (umsg_decl) = 1;\n-\n       make_decl_rtl (umsg_decl, NULL);\n       pushdecl (umsg_decl);\n     }"}, {"sha": "55914f05f45e31ab987fa3bd0f387a2d9b26e7df", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -605,7 +605,8 @@ typedef char _Bool;\n \tOMIT_EH_TABLE EASY_DIV_EXPR IMPLICIT_FIX_EXPR\t\t\t   \\\n \tLONGJMP_RESTORE_FROM_STACK MAX_INT_TYPE_SIZE ASM_IDENTIFY_GCC\t   \\\n \tSTDC_VALUE TRAMPOLINE_ALIGN ASM_IDENTIFY_GCC_AFTER_SOURCE\t   \\\n-\tSLOW_ZERO_EXTEND SUBREG_REGNO_OFFSET DWARF_LINE_MIN_INSTR_LENGTH\n+\tSLOW_ZERO_EXTEND SUBREG_REGNO_OFFSET DWARF_LINE_MIN_INSTR_LENGTH   \\\n+\tTRADITIONAL_RETURN_FLOAT\n \n #endif /* IN_GCC */\n "}, {"sha": "b2820d62bab7831095a733be23fa08084be30603", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -1,3 +1,9 @@\n+2002-02-27  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* gcc.c-torture/execute/920730-1t.c,\n+\tgcc.c-torture/execute/920730-1t.x, gcc.dg/ext-glob.c:\n+\tDelete test cases, only relevant to -traditional.\n+\n 2002-02-27  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* gcc.dg/cpp/undef1.c: Remove."}, {"sha": "7467f35753c8fd91c6f71b8be1c3bc430e935f06", "filename": "gcc/testsuite/gcc.c-torture/execute/920730-1t.c", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b3a8ff40c97c0b633185e6d0872468504a7a1a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F920730-1t.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b3a8ff40c97c0b633185e6d0872468504a7a1a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F920730-1t.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F920730-1t.c?ref=e0b3a8ff40c97c0b633185e6d0872468504a7a1a", "patch": "@@ -1,8 +0,0 @@\n-/* This is just 920730-1.c compiled with -traditional.\n-   See 920730-1t.x.  */\n-\n-/* It is necessary to undefine __GNUC__ in order to prevent glibc 2.2's\n-   sys/cdefs.h from issuing an #error.  Do Not Ask.  */\n-#undef __GNUC__\n-\n-#include \"920730-1.c\""}, {"sha": "cf05b31d54e5e0e349eda6f4d83fc38f6d022882", "filename": "gcc/testsuite/gcc.c-torture/execute/920730-1t.x", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b3a8ff40c97c0b633185e6d0872468504a7a1a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F920730-1t.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b3a8ff40c97c0b633185e6d0872468504a7a1a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F920730-1t.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F920730-1t.x?ref=e0b3a8ff40c97c0b633185e6d0872468504a7a1a", "patch": "@@ -1,2 +0,0 @@\n-set additional_flags \"-traditional\"\n-return 0"}, {"sha": "deb51f50ea4866d7096a884fcf9cefad45a9a35e", "filename": "gcc/testsuite/gcc.dg/ext-glob.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b3a8ff40c97c0b633185e6d0872468504a7a1a/gcc%2Ftestsuite%2Fgcc.dg%2Fext-glob.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b3a8ff40c97c0b633185e6d0872468504a7a1a/gcc%2Ftestsuite%2Fgcc.dg%2Fext-glob.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fext-glob.c?ref=e0b3a8ff40c97c0b633185e6d0872468504a7a1a", "patch": "@@ -1,19 +0,0 @@\n-/* Test for the warning about external functions with non-global\n-   types.  In -traditional mode, these functions are globally visible\n-   even if declared in an inner scope, so their return types should\n-   also be visible.  */\n-\n-/* { dg-do compile } */\n-/* { dg-options -traditional } */\n-/* { dg-warning \"-traditional is deprecated\" \"deprecation warning\" { target *-*-* } 0 } */\n-\n-int\n-main ()\n-{\n-  struct foo { int a, b; };\n-\n-  extern struct foo *bar();  /* { dg-warning \"type of external\" \"good warn\" } */\n-  extern int baz();\t     /* { dg-bogus   \"type of external\" \"bad warn\"  } */\n-\n-  return 0;\n-}"}, {"sha": "9676dcde5a026c734c77509da44444dc60c0fbc9", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f458d1d5d7bd85e412689858ea5d5de681608fbb/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=f458d1d5d7bd85e412689858ea5d5de681608fbb", "patch": "@@ -1182,8 +1182,6 @@ documented_lang_options[] =\n \n   { \"-ansi\", \n     N_(\"Compile just for ISO C89\") },\n-  { \"-fallow-single-precision\",\n-    N_(\"Do not promote floats to double if using -traditional\") },\n   { \"-std= \", \n     N_(\"Determine language standard\") },\n \n@@ -1199,12 +1197,6 @@ documented_lang_options[] =\n   { \"-fno-signed-char\", \"\" },\n   { \"-fno-unsigned-char\", \"\" },\n \n-  { \"-ftraditional\", \"\" },\n-  { \"-traditional\", \n-    N_(\"Attempt to support traditional K&R style C\") },\n-  { \"-fnotraditional\", \"\" },\n-  { \"-fno-traditional\", \"\" },\n-\n   { \"-fasm\", \"\" },\n   { \"-fno-asm\", \n     N_(\"Do not recognize the 'asm' keyword\") },\n@@ -1332,7 +1324,7 @@ documented_lang_options[] =\n     N_(\"Warn about non-prototyped function decls\") },\n   { \"-Wno-strict-prototypes\", \"\" },\n   { \"-Wtraditional\", \n-    N_(\"Warn about constructs whose meaning change in ISO C\") },\n+    N_(\"Warn about constructs whose meanings change in ISO C\") },\n   { \"-Wno-traditional\", \"\" },\n   { \"-Wtrigraphs\", \n     N_(\"Warn when trigraphs are encountered\") },"}]}