{"sha": "2e2accf8ae33c76c34ba3a44463590cbacbb96d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUyYWNjZjhhZTMzYzc2YzM0YmEzYTQ0NDYzNTkwY2JhY2JiOTZkOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-10-14T16:55:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-10-14T16:55:25Z"}, "message": "sse.md (vec_interleave_high<mode>, [...]): Add AVX2 expanders for VI_256 modes.\n\n\t* config/i386/sse.md (vec_interleave_high<mode>,\n\tvec_interleave_low<mode>): Add AVX2 expanders for VI_256\n\tmodes.\n\t* config/i386/i386.c (expand_vec_perm_interleave3): New function.\n\t(ix86_expand_vec_perm_builtin_1): Call it.\n\nFrom-SVN: r179995", "tree": {"sha": "faecf208b72a27e032bd66b324fd355fee04b505", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/faecf208b72a27e032bd66b324fd355fee04b505"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e2accf8ae33c76c34ba3a44463590cbacbb96d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e2accf8ae33c76c34ba3a44463590cbacbb96d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e2accf8ae33c76c34ba3a44463590cbacbb96d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e2accf8ae33c76c34ba3a44463590cbacbb96d8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a08147527bf87029235b2468194f3522f9296e4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a08147527bf87029235b2468194f3522f9296e4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a08147527bf87029235b2468194f3522f9296e4a"}], "stats": {"total": 119, "additions": 119, "deletions": 0}, "files": [{"sha": "d43a5cf3e5a8f9c74998062023a7636091b0d768", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e2accf8ae33c76c34ba3a44463590cbacbb96d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e2accf8ae33c76c34ba3a44463590cbacbb96d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e2accf8ae33c76c34ba3a44463590cbacbb96d8", "patch": "@@ -1,3 +1,11 @@\n+2011-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/sse.md (vec_interleave_high<mode>,\n+\tvec_interleave_low<mode>): Add AVX2 expanders for VI_256\n+\tmodes.\n+\t* config/i386/i386.c (expand_vec_perm_interleave3): New function.\n+\t(ix86_expand_vec_perm_builtin_1): Call it.\n+\n 2011-10-14  Georg-Johann Lay  <avr@gjlay.de>\n \n \tFix thinko from r179765"}, {"sha": "f09a37277faa133f2a2fbbc5b4dfb0bdfdd124bd", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e2accf8ae33c76c34ba3a44463590cbacbb96d8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e2accf8ae33c76c34ba3a44463590cbacbb96d8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2e2accf8ae33c76c34ba3a44463590cbacbb96d8", "patch": "@@ -35474,6 +35474,82 @@ expand_vec_perm_interleave2 (struct expand_vec_perm_d *d)\n   return true;\n }\n \n+/* A subroutine of ix86_expand_vec_perm_builtin_1.  Try to simplify\n+   a two vector permutation using 2 intra-lane interleave insns\n+   and cross-lane shuffle for 32-byte vectors.  */\n+\n+static bool\n+expand_vec_perm_interleave3 (struct expand_vec_perm_d *d)\n+{\n+  unsigned i, nelt;\n+  rtx (*gen) (rtx, rtx, rtx);\n+\n+  if (d->op0 == d->op1)\n+    return false;\n+  if (TARGET_AVX2 && GET_MODE_SIZE (d->vmode) == 32)\n+    ;\n+  else if (TARGET_AVX && (d->vmode == V8SFmode || d->vmode == V4DFmode))\n+    ;\n+  else\n+    return false;\n+\n+  nelt = d->nelt;\n+  if (d->perm[0] != 0 && d->perm[0] != nelt / 2)\n+    return false;\n+  for (i = 0; i < nelt; i += 2)\n+    if (d->perm[i] != d->perm[0] + i / 2\n+\t|| d->perm[i + 1] != d->perm[0] + i / 2 + nelt)\n+      return false;\n+\n+  if (d->testing_p)\n+    return true;\n+\n+  switch (d->vmode)\n+    {\n+    case V32QImode:\n+      if (d->perm[0])\n+\tgen = gen_vec_interleave_highv32qi;\n+      else\n+\tgen = gen_vec_interleave_lowv32qi;\n+      break;\n+    case V16HImode:\n+      if (d->perm[0])\n+\tgen = gen_vec_interleave_highv16hi;\n+      else\n+\tgen = gen_vec_interleave_lowv16hi;\n+      break;\n+    case V8SImode:\n+      if (d->perm[0])\n+\tgen = gen_vec_interleave_highv8si;\n+      else\n+\tgen = gen_vec_interleave_lowv8si;\n+      break;\n+    case V4DImode:\n+      if (d->perm[0])\n+\tgen = gen_vec_interleave_highv4di;\n+      else\n+\tgen = gen_vec_interleave_lowv4di;\n+      break;\n+    case V8SFmode:\n+      if (d->perm[0])\n+\tgen = gen_vec_interleave_highv8sf;\n+      else\n+\tgen = gen_vec_interleave_lowv8sf;\n+      break;\n+    case V4DFmode:\n+      if (d->perm[0])\n+\tgen = gen_vec_interleave_highv4df;\n+      else\n+\tgen = gen_vec_interleave_lowv4df;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  emit_insn (gen (d->target, d->op0, d->op1));\n+  return true;\n+}\n+\n /* A subroutine of expand_vec_perm_even_odd_1.  Implement the double-word\n    permutation with two pshufb insns and an ior.  We should have already\n    failed all two instruction sequences.  */\n@@ -35972,6 +36048,9 @@ ix86_expand_vec_perm_builtin_1 (struct expand_vec_perm_d *d)\n   if (expand_vec_perm_pshufb2 (d))\n     return true;\n \n+  if (expand_vec_perm_interleave3 (d))\n+    return true;\n+\n   /* Try sequences of four instructions.  */\n \n   if (expand_vec_perm_vpshufb2_vpermq (d))"}, {"sha": "016eae2d371925a76b26405478b23aba2ce31e63", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e2accf8ae33c76c34ba3a44463590cbacbb96d8/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e2accf8ae33c76c34ba3a44463590cbacbb96d8/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=2e2accf8ae33c76c34ba3a44463590cbacbb96d8", "patch": "@@ -6848,6 +6848,38 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_expand \"vec_interleave_high<mode>\"\n+  [(match_operand:VI_256 0 \"register_operand\" \"=x\")\n+   (match_operand:VI_256 1 \"register_operand\" \"x\")\n+   (match_operand:VI_256 2 \"nonimmediate_operand\" \"xm\")]\n+ \"TARGET_AVX2\"\n+{\n+  rtx t1 = gen_reg_rtx (<MODE>mode);\n+  rtx t2 = gen_reg_rtx (<MODE>mode);\n+  emit_insn (gen_avx2_interleave_low<mode> (t1, operands[1], operands[2]));\n+  emit_insn (gen_avx2_interleave_high<mode> (t2,  operands[1], operands[2]));\n+  emit_insn (gen_avx2_permv2ti (gen_lowpart (V4DImode, operands[0]),\n+\t\t\t\tgen_lowpart (V4DImode, t1),\n+\t\t\t\tgen_lowpart (V4DImode, t2), GEN_INT (1 + (3 << 4))));\n+  DONE;\n+})\n+\n+(define_expand \"vec_interleave_low<mode>\"\n+  [(match_operand:VI_256 0 \"register_operand\" \"=x\")\n+   (match_operand:VI_256 1 \"register_operand\" \"x\")\n+   (match_operand:VI_256 2 \"nonimmediate_operand\" \"xm\")]\n+ \"TARGET_AVX2\"\n+{\n+  rtx t1 = gen_reg_rtx (<MODE>mode);\n+  rtx t2 = gen_reg_rtx (<MODE>mode);\n+  emit_insn (gen_avx2_interleave_low<mode> (t1, operands[1], operands[2]));\n+  emit_insn (gen_avx2_interleave_high<mode> (t2, operands[1], operands[2]));\n+  emit_insn (gen_avx2_permv2ti (gen_lowpart (V4DImode, operands[0]),\n+\t\t\t\tgen_lowpart (V4DImode, t1),\n+\t\t\t\tgen_lowpart (V4DImode, t2), GEN_INT (0 + (2 << 4))));\n+  DONE;\n+})\n+\n ;; Modes handled by pinsr patterns.\n (define_mode_iterator PINSR_MODE\n   [(V16QI \"TARGET_SSE4_1\") V8HI"}]}