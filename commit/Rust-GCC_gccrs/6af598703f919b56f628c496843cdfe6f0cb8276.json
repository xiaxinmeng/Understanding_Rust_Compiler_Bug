{"sha": "6af598703f919b56f628c496843cdfe6f0cb8276", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFmNTk4NzAzZjkxOWI1NmY2MjhjNDk2ODQzY2RmZTZmMGNiODI3Ng==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-06-16T14:55:55Z"}, "committer": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-06-16T14:56:16Z"}, "message": "[PATCH][GCC] arm: Fix MVE scalar shift intrinsics code-gen.\n\nThis patch modifies the MVE scalar shift RTL patterns. The current patterns\nhave wrong constraints and predicates due to which the values returned from\nMVE scalar shift instructions are overwritten in the code-gen.\n\nexample:\n$ cat x.c\nint32_t  foo(int64_t acc, int shift)\n{\n  return sqrshrl_sat48 (acc, shift);\n}\n\nCode-gen before applying this patch:\n$ arm-none-eabi-gcc -march=armv8.1-m.main+mve -mfloat-abi=hard -O2 -S\n$  cat x.s\nfoo:\n   push    {r4, r5}\n   sqrshrl r0, r1, #48, r2   ----> (a)\n   mov     r0, r4  ----> (b)\n   pop     {r4, r5}\n   bx      lr\n\nCode-gen after applying this patch:\nfoo:\n   sqrshrl r0, r1, #48, r2\n   bx      lr\n\nIn the current compiler the return value (r0) from sqrshrl (a) is getting\noverwritten by the mov statement (b).\nThis patch fixes above issue.\n\n2020-06-12  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\ngcc/\n\t* config/arm/mve.md (mve_uqrshll_sat<supf>_di): Correct the predicate\n\tand constraint of all the operands.\n\t(mve_sqrshrl_sat<supf>_di): Likewise.\n\t(mve_uqrshl_si): Likewise.\n\t(mve_sqrshr_si): Likewise.\n\t(mve_uqshll_di): Likewise.\n\t(mve_urshrl_di): Likewise.\n\t(mve_uqshl_si): Likewise.\n\t(mve_urshr_si): Likewise.\n\t(mve_sqshl_si): Likewise.\n\t(mve_srshr_si): Likewise.\n\t(mve_srshrl_di): Likewise.\n\t(mve_sqshll_di): Likewise.\n\t* config/arm/predicates.md (arm_low_register_operand): Define.\n\ngcc/testsuite/\n\t* gcc.target/arm/mve/intrinsics/mve_scalar_shifts1.c: New test.\n\t* gcc.target/arm/mve/intrinsics/mve_scalar_shifts2.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_scalar_shifts3.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_scalar_shifts4.c: Likewise.", "tree": {"sha": "56ff889c05c1b7c3dbec65dfec9ac0f238e9c784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56ff889c05c1b7c3dbec65dfec9ac0f238e9c784"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6af598703f919b56f628c496843cdfe6f0cb8276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af598703f919b56f628c496843cdfe6f0cb8276", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6af598703f919b56f628c496843cdfe6f0cb8276", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af598703f919b56f628c496843cdfe6f0cb8276/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1160ec9a141faf1c4c0496c7412c8febeb623962", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1160ec9a141faf1c4c0496c7412c8febeb623962", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1160ec9a141faf1c4c0496c7412c8febeb623962"}], "stats": {"total": 221, "additions": 185, "deletions": 36}, "files": [{"sha": "9758862ac2bb40805dc5b66c9b05466fffcf91df", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af598703f919b56f628c496843cdfe6f0cb8276/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af598703f919b56f628c496843cdfe6f0cb8276/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=6af598703f919b56f628c496843cdfe6f0cb8276", "patch": "@@ -11344,9 +11344,9 @@\n ;; [uqrshll_di]\n ;;\n (define_insn \"mve_uqrshll_sat<supf>_di\"\n-  [(set (match_operand:DI 0 \"arm_general_register_operand\" \"+r\")\n-\t(unspec:DI [(match_operand:DI 1 \"arm_general_register_operand\" \"r\")\n-\t\t    (match_operand:SI 2 \"s_register_operand\" \"r\")]\n+  [(set (match_operand:DI 0 \"arm_low_register_operand\" \"=l\")\n+\t(unspec:DI [(match_operand:DI 1 \"arm_low_register_operand\" \"0\")\n+\t\t    (match_operand:SI 2 \"register_operand\" \"r\")]\n \t UQRSHLLQ))]\n   \"TARGET_HAVE_MVE\"\n   \"uqrshll%?\\\\t%Q1, %R1, #<supf>, %2\"\n@@ -11356,9 +11356,9 @@\n ;; [sqrshrl_di]\n ;;\n (define_insn \"mve_sqrshrl_sat<supf>_di\"\n-  [(set (match_operand:DI 0 \"arm_general_register_operand\" \"+r\")\n-\t(unspec:DI [(match_operand:DI 1 \"arm_general_register_operand\" \"r\")\n-\t\t    (match_operand:SI 2 \"s_register_operand\" \"r\")]\n+  [(set (match_operand:DI 0 \"arm_low_register_operand\" \"=l\")\n+\t(unspec:DI [(match_operand:DI 1 \"arm_low_register_operand\" \"0\")\n+\t\t    (match_operand:SI 2 \"register_operand\" \"r\")]\n \t SQRSHRLQ))]\n   \"TARGET_HAVE_MVE\"\n   \"sqrshrl%?\\\\t%Q1, %R1, #<supf>, %2\"\n@@ -11368,9 +11368,9 @@\n ;; [uqrshl_si]\n ;;\n (define_insn \"mve_uqrshl_si\"\n-  [(set (match_operand:SI 0 \"arm_general_register_operand\" \"+r\")\n-\t(unspec:SI [(match_operand:SI 1 \"arm_general_register_operand\" \"r\")\n-\t\t    (match_operand:SI 2 \"s_register_operand\" \"r\")]\n+  [(set (match_operand:SI 0 \"arm_general_register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:SI 1 \"arm_general_register_operand\" \"0\")\n+\t\t    (match_operand:SI 2 \"register_operand\" \"r\")]\n \t UQRSHL))]\n   \"TARGET_HAVE_MVE\"\n   \"uqrshl%?\\\\t%1, %2\"\n@@ -11380,9 +11380,9 @@\n ;; [sqrshr_si]\n ;;\n (define_insn \"mve_sqrshr_si\"\n-  [(set (match_operand:SI 0 \"arm_general_register_operand\" \"+r\")\n-\t(unspec:SI [(match_operand:SI 1 \"arm_general_register_operand\" \"r\")\n-\t\t    (match_operand:SI 2 \"s_register_operand\" \"r\")]\n+  [(set (match_operand:SI 0 \"arm_general_register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:SI 1 \"arm_general_register_operand\" \"0\")\n+\t\t    (match_operand:SI 2 \"register_operand\" \"r\")]\n \t SQRSHR))]\n   \"TARGET_HAVE_MVE\"\n   \"sqrshr%?\\\\t%1, %2\"\n@@ -11392,9 +11392,9 @@\n ;; [uqshll_di]\n ;;\n (define_insn \"mve_uqshll_di\"\n-  [(set (match_operand:DI 0 \"arm_general_register_operand\" \"+r\")\n-\t(us_ashift:DI (match_operand:DI 1 \"arm_general_register_operand\" \"r\")\n-\t\t      (match_operand:SI 2 \"arm_reg_or_long_shift_imm\" \"rPg\")))]\n+  [(set (match_operand:DI 0 \"arm_low_register_operand\" \"=l\")\n+\t(us_ashift:DI (match_operand:DI 1 \"arm_low_register_operand\" \"0\")\n+\t\t      (match_operand:SI 2 \"immediate_operand\" \"Pg\")))]\n   \"TARGET_HAVE_MVE\"\n   \"uqshll%?\\\\t%Q1, %R1, %2\"\n   [(set_attr \"predicable\" \"yes\")])\n@@ -11403,9 +11403,9 @@\n ;; [urshrl_di]\n ;;\n (define_insn \"mve_urshrl_di\"\n-  [(set (match_operand:DI 0 \"arm_general_register_operand\" \"+r\")\n-\t(unspec:DI [(match_operand:DI 1 \"arm_general_register_operand\" \"r\")\n-\t\t    (match_operand:SI 2 \"arm_reg_or_long_shift_imm\" \"rPg\")]\n+  [(set (match_operand:DI 0 \"arm_low_register_operand\" \"=l\")\n+\t(unspec:DI [(match_operand:DI 1 \"arm_low_register_operand\" \"0\")\n+\t\t    (match_operand:SI 2 \"immediate_operand\" \"Pg\")]\n \t URSHRL))]\n   \"TARGET_HAVE_MVE\"\n   \"urshrl%?\\\\t%Q1, %R1, %2\"\n@@ -11415,9 +11415,9 @@\n ;; [uqshl_si]\n ;;\n (define_insn \"mve_uqshl_si\"\n-  [(set (match_operand:SI 0 \"arm_general_register_operand\" \"+r\")\n-\t(us_ashift:SI (match_operand:SI 1 \"arm_general_register_operand\" \"r\")\n-\t\t      (match_operand:SI 2 \"arm_reg_or_long_shift_imm\" \"rPg\")))]\n+  [(set (match_operand:SI 0 \"arm_general_register_operand\" \"=r\")\n+\t(us_ashift:SI (match_operand:SI 1 \"arm_general_register_operand\" \"0\")\n+\t\t      (match_operand:SI 2 \"immediate_operand\" \"Pg\")))]\n   \"TARGET_HAVE_MVE\"\n   \"uqshl%?\\\\t%1, %2\"\n   [(set_attr \"predicable\" \"yes\")])\n@@ -11426,9 +11426,9 @@\n ;; [urshr_si]\n ;;\n (define_insn \"mve_urshr_si\"\n-  [(set (match_operand:SI 0 \"arm_general_register_operand\" \"+r\")\n-\t(unspec:SI [(match_operand:SI 1 \"arm_general_register_operand\" \"r\")\n-\t\t    (match_operand:SI 2 \"arm_reg_or_long_shift_imm\" \"rPg\")]\n+  [(set (match_operand:SI 0 \"arm_general_register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:SI 1 \"arm_general_register_operand\" \"0\")\n+\t\t    (match_operand:SI 2 \"immediate_operand\" \"Pg\")]\n \t URSHR))]\n   \"TARGET_HAVE_MVE\"\n   \"urshr%?\\\\t%1, %2\"\n@@ -11438,9 +11438,9 @@\n ;; [sqshl_si]\n ;;\n (define_insn \"mve_sqshl_si\"\n-  [(set (match_operand:SI 0 \"arm_general_register_operand\" \"+r\")\n-\t(ss_ashift:SI (match_operand:DI 1 \"arm_general_register_operand\" \"r\")\n-\t\t      (match_operand:SI 2 \"arm_reg_or_long_shift_imm\" \"rPg\")))]\n+  [(set (match_operand:SI 0 \"arm_general_register_operand\" \"=r\")\n+\t(ss_ashift:SI (match_operand:DI 1 \"arm_general_register_operand\" \"0\")\n+\t\t      (match_operand:SI 2 \"immediate_operand\" \"Pg\")))]\n   \"TARGET_HAVE_MVE\"\n   \"sqshl%?\\\\t%1, %2\"\n   [(set_attr \"predicable\" \"yes\")])\n@@ -11449,9 +11449,9 @@\n ;; [srshr_si]\n ;;\n (define_insn \"mve_srshr_si\"\n-  [(set (match_operand:SI 0 \"arm_general_register_operand\" \"+r\")\n-\t(unspec:SI [(match_operand:DI 1 \"arm_general_register_operand\" \"r\")\n-\t\t    (match_operand:SI 2 \"arm_reg_or_long_shift_imm\" \"rPg\")]\n+  [(set (match_operand:SI 0 \"arm_general_register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:DI 1 \"arm_general_register_operand\" \"0\")\n+\t\t    (match_operand:SI 2 \"immediate_operand\" \"Pg\")]\n \t SRSHR))]\n   \"TARGET_HAVE_MVE\"\n   \"srshr%?\\\\t%1, %2\"\n@@ -11461,9 +11461,9 @@\n ;; [srshrl_di]\n ;;\n (define_insn \"mve_srshrl_di\"\n-  [(set (match_operand:DI 0 \"arm_general_register_operand\" \"+r\")\n-\t(unspec:DI [(match_operand:DI 1 \"arm_general_register_operand\" \"r\")\n-\t\t    (match_operand:SI 2 \"arm_reg_or_long_shift_imm\" \"rPg\")]\n+  [(set (match_operand:DI 0 \"arm_low_register_operand\" \"=l\")\n+\t(unspec:DI [(match_operand:DI 1 \"arm_low_register_operand\" \"0\")\n+\t\t    (match_operand:SI 2 \"immediate_operand\" \"Pg\")]\n \t SRSHRL))]\n   \"TARGET_HAVE_MVE\"\n   \"srshrl%?\\\\t%Q1, %R1, %2\"\n@@ -11473,9 +11473,9 @@\n ;; [sqshll_di]\n ;;\n (define_insn \"mve_sqshll_di\"\n-  [(set (match_operand:DI 0 \"arm_general_register_operand\" \"+r\")\n-\t(ss_ashift:DI (match_operand:DI 1 \"arm_general_register_operand\" \"r\")\n-\t\t      (match_operand:SI 2 \"arm_reg_or_long_shift_imm\" \"rPg\")))]\n+  [(set (match_operand:DI 0 \"arm_low_register_operand\" \"=l\")\n+\t(ss_ashift:DI (match_operand:DI 1 \"arm_low_register_operand\" \"0\")\n+\t\t      (match_operand:SI 2 \"immediate_operand\" \"Pg\")))]\n   \"TARGET_HAVE_MVE\"\n   \"sqshll%?\\\\t%Q1, %R1, %2\"\n   [(set_attr \"predicable\" \"yes\")])"}, {"sha": "981eec520babba45d268cd5d43862549ce1df973", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af598703f919b56f628c496843cdfe6f0cb8276/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af598703f919b56f628c496843cdfe6f0cb8276/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=6af598703f919b56f628c496843cdfe6f0cb8276", "patch": "@@ -155,6 +155,18 @@\n \t      || REGNO (op) >= FIRST_PSEUDO_REGISTER));\n })\n \n+;; Low core register, or any pseudo.\n+(define_predicate \"arm_low_register_operand\"\n+  (match_code \"reg,subreg\")\n+{\n+  if (GET_CODE (op) == SUBREG)\n+    op = SUBREG_REG (op);\n+\n+  return (REG_P (op)\n+\t  && (REGNO (op) <= LAST_LO_REGNUM\n+\t      || REGNO (op) >= FIRST_PSEUDO_REGISTER));\n+})\n+\n (define_predicate \"arm_general_adddi_operand\"\n   (ior (match_operand 0 \"arm_general_register_operand\")\n        (and (match_code \"const_int\")"}, {"sha": "e1c136e7f302c1824f0b00b5e7bc468ff5fcfe27", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_scalar_shifts1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af598703f919b56f628c496843cdfe6f0cb8276/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_scalar_shifts1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af598703f919b56f628c496843cdfe6f0cb8276/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_scalar_shifts1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_scalar_shifts1.c?ref=6af598703f919b56f628c496843cdfe6f0cb8276", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+\n+#include \"arm_mve.h\"\n+#include \"stdio.h\"\n+#include <stdlib.h>\n+\n+void\n+foo (int64_t acc, int shift)\n+{\n+  acc = sqrshrl_sat48 (acc, shift);\n+  if (acc != 16)\n+    abort();\n+  acc = sqrshrl (acc, shift);\n+  if (acc != 2)\n+    abort();\n+}\n+\n+void\n+foo1 (uint64_t acc, int shift)\n+{\n+  acc = uqrshll_sat48 (acc, shift);\n+  if (acc != 16)\n+    abort();\n+  acc = uqrshll (acc, shift);\n+  if (acc != 128)\n+    abort();\n+}\n+\n+int main()\n+{\n+  int64_t acc = 128;\n+  uint64_t acc1 = 2;\n+  int shift = 3;\n+  foo (acc, shift);\n+  foo1 (acc1, shift);\n+  return 0;\n+}"}, {"sha": "0b5a8edb15849913d4f2849ab86decb286692386", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_scalar_shifts2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af598703f919b56f628c496843cdfe6f0cb8276/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_scalar_shifts2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af598703f919b56f628c496843cdfe6f0cb8276/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_scalar_shifts2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_scalar_shifts2.c?ref=6af598703f919b56f628c496843cdfe6f0cb8276", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+\n+#include \"arm_mve.h\"\n+#include \"stdio.h\"\n+#include <stdlib.h>\n+\n+#define IMM 3\n+\n+void\n+foo (int64_t acc, uint64_t acc1)\n+{\n+  acc = sqshll (acc, IMM);\n+  if (acc != 128)\n+    abort();\n+  acc = srshrl (acc, IMM);\n+  if (acc != 16)\n+    abort();\n+  acc1 = uqshll (acc1, IMM);\n+  if (acc1 != 128)\n+    abort();\n+  acc1 = urshrl (acc1, IMM);\n+  if (acc1 != 16)\n+    abort();\n+}\n+\n+int main()\n+{\n+  int64_t acc = 16;\n+  uint64_t acc1 = 16;\n+  foo (acc, acc1);\n+  return 0;\n+}"}, {"sha": "7e3da54f5e62467e2cdaabd85df3db127f608802", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_scalar_shifts3.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af598703f919b56f628c496843cdfe6f0cb8276/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_scalar_shifts3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af598703f919b56f628c496843cdfe6f0cb8276/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_scalar_shifts3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_scalar_shifts3.c?ref=6af598703f919b56f628c496843cdfe6f0cb8276", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+\n+#include \"arm_mve.h\"\n+#include \"stdio.h\"\n+#include <stdlib.h>\n+\n+void\n+foo (int32_t acc, uint32_t acc1, int shift)\n+{\n+  acc = sqrshr (acc, shift);\n+  if (acc != 16)\n+    abort();\n+  acc1 = uqrshl (acc1, shift);\n+  if (acc1 != 128)\n+    abort();\n+}\n+\n+int main()\n+{\n+  int32_t acc = 128;\n+  uint32_t acc1 = 16;\n+  int shift = 3;\n+  foo (acc, acc1, shift);\n+  return 0;\n+}"}, {"sha": "8bee12f7fdfaef51daf7e2f5d3c1e284115d2649", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_scalar_shifts4.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af598703f919b56f628c496843cdfe6f0cb8276/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_scalar_shifts4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af598703f919b56f628c496843cdfe6f0cb8276/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_scalar_shifts4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_scalar_shifts4.c?ref=6af598703f919b56f628c496843cdfe6f0cb8276", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+\n+#include \"arm_mve.h\"\n+#include <stdlib.h>\n+\n+#define IMM 3\n+\n+void\n+foo (int32_t acc,  uint32_t acc1)\n+{\n+  acc = sqshl (acc, IMM);\n+  if (acc != 128)\n+    abort();\n+  acc = srshr (acc, IMM);\n+  if (acc != 16)\n+    abort();\n+  acc1 = uqshl (acc1, IMM);\n+  if (acc1 != 128)\n+    abort();\n+  acc1 = urshr (acc1, IMM);\n+  if (acc1 != 16)\n+    abort();\n+}\n+\n+int main()\n+{\n+  int32_t acc = 16;\n+  uint32_t acc1 = 16;\n+  foo (acc, acc1);\n+  return 0;\n+}"}]}