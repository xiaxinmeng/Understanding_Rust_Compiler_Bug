{"sha": "bfab56e7ab02ea2616f98cdd1681a5dcc078e189", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZhYjU2ZTdhYjAyZWEyNjE2Zjk4Y2RkMTY4MWE1ZGNjMDc4ZTE4OQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-04-02T22:50:55Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-04-02T22:50:55Z"}, "message": "cppinit.c (cpp_start_read): Turn off -Wtraditional if processing C++.\n\n\t* cppinit.c (cpp_start_read): Turn off -Wtraditional if\n\tprocessing C++.\n\t* cpplib.c (_cpp_handle_directive): Improve warnings for\n\ttraditional C and indented directives.\n\n\t* enquire.c, gsyslimits.h, limity.h, config/convex/fixinc.convex,\n\tfixinc/fixinc.irix, fixinc/fixinc.sco, fixinc/fixinc.wrap,\n\tfixinc/inclhack.def: Indent the # of #include_next one space.\n\t* cp/rtti.c: Un-indent #if and #endif.\n\n\t* cppexp.c (_cpp_parse_expr): If lex returns '#', it's a\n\tsyntax error, but an error has already been printed.\n\t* cpplex.c (_cpp_parse_assertion): Give a more specific error\n\tmessage when called with nothing remaining on the line.\n\t(_cpp_lex_token): If _cpp_parse_assertion fails, return an\n\tOTHER token, not an ASSERTION.\n\t* cpplib.c (do_assert): When we create a 'base' node, clear\n\tits aschain pointer.\n\n\t* gcc.c-torture/compile/981211-1.c: Move to...\n\t* gcc.dg/cpp-as1.c: ...here.\n\t* gcc.dg/cpp-as2.c: New file.\n\n\t* gcc.dg/cpp-tradwarn1.c: Change warning regexps to match the\n\tcompiler.\n\nFrom-SVN: r32870", "tree": {"sha": "b00fb305180d6ad00464b0f8d26982c399a9faa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b00fb305180d6ad00464b0f8d26982c399a9faa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfab56e7ab02ea2616f98cdd1681a5dcc078e189", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfab56e7ab02ea2616f98cdd1681a5dcc078e189", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfab56e7ab02ea2616f98cdd1681a5dcc078e189", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/comments", "author": null, "committer": null, "parents": [{"sha": "7c3bb1deecbcda27683c0fccca91987b32eb292e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c3bb1deecbcda27683c0fccca91987b32eb292e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c3bb1deecbcda27683c0fccca91987b32eb292e"}], "stats": {"total": 170, "additions": 122, "deletions": 48}, "files": [{"sha": "acb203488c75cc12b830bc40bacac30f1c473a8d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bfab56e7ab02ea2616f98cdd1681a5dcc078e189", "patch": "@@ -1,3 +1,24 @@\n+2000-04-02  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cppinit.c (cpp_start_read): Turn off -Wtraditional if\n+\tprocessing C++.\n+\t* cpplib.c (_cpp_handle_directive): Improve warnings for\n+\ttraditional C and indented directives.\n+\n+\t* enquire.c, gsyslimits.h, limity.h, config/convex/fixinc.convex,\n+\tfixinc/fixinc.irix, fixinc/fixinc.sco, fixinc/fixinc.wrap,\n+\tfixinc/inclhack.def: Indent the # of #include_next one space.\n+\t* cp/rtti.c: Un-indent #if and #endif.\n+\n+\t* cppexp.c (_cpp_parse_expr): If lex returns '#', it's a\n+\tsyntax error, but an error has already been printed.\n+\t* cpplex.c (_cpp_parse_assertion): Give a more specific error\n+\tmessage when called with nothing remaining on the line.\n+\t(_cpp_lex_token): If _cpp_parse_assertion fails, return an\n+\tOTHER token, not an ASSERTION.\n+\t* cpplib.c (do_assert): When we create a 'base' node, clear\n+\tits aschain pointer.\n+\n 2000-04-02  Neil Booth <NeilB@earthling.net>\n \n \t* cppexp.c:  New typedef op_t.  struct operation and struct "}, {"sha": "c14dcd42b03f85025f6a3a878492fa46e61783ed", "filename": "gcc/config/convex/fixinc.convex", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Fconfig%2Fconvex%2Ffixinc.convex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Fconfig%2Fconvex%2Ffixinc.convex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Ffixinc.convex?ref=bfab56e7ab02ea2616f98cdd1681a5dcc078e189", "patch": "@@ -15,7 +15,7 @@ sed 's/^@//' > \"include/limits.h\" <<'@//E*O*F include/limits.h//'\n #ifndef _LIMITS_H\n #define _LIMITS_H\n \n-#include_next <limits.h>\n+ #include_next <limits.h>\n \n /* Minimum and maximum values a `char' can hold.  */\n #ifdef __CHAR_UNSIGNED__\n@@ -34,7 +34,7 @@ sed 's/^@//' > \"include/math.h\" <<'@//E*O*F include/math.h//'\n #ifndef _MATH_H\n #define _MATH_H\n \n-#include_next <math.h>\n+ #include_next <math.h>\n \n #undef HUGE_VAL\n \n@@ -386,7 +386,7 @@ typedef __WCHAR_TYPE__ wchar_t;\n \n #endif /* __WCHAR_T */\n \n-#include_next <stddef.h>\n+ #include_next <stddef.h>\n \n #endif /* _STDDEF_H */\n @//E*O*F include/stddef.h//\n@@ -400,12 +400,12 @@ sed 's/^@//' > \"include/stdlib.h\" <<'@//E*O*F include/stdlib.h//'\n #if _CONVEX_SOURCE\n \n #define alloca __non_builtin_alloca\n-#include_next <stdlib.h>\n+ #include_next <stdlib.h>\n #undef alloca\n \n #else\n \n-#include_next <stdlib.h>\n+ #include_next <stdlib.h>\n \n #endif  /* _CONVEX_SOURCE */\n "}, {"sha": "e9873ba9718c50f1b41661c763067e9248530507", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=bfab56e7ab02ea2616f98cdd1681a5dcc078e189", "patch": "@@ -1816,9 +1816,9 @@ emit_support_tinfos ()\n     &void_type_node,\n     &boolean_type_node,\n     &wchar_type_node,\n-    #if 0\n+#if 0\n     &signed_wchar_type_node, &unsigned_wchar_type_node,\n-    #endif\n+#endif\n     &char_type_node, &signed_char_type_node, &unsigned_char_type_node,\n     &short_integer_type_node, &short_unsigned_type_node,\n     &integer_type_node, &unsigned_type_node,\n@@ -1827,11 +1827,11 @@ emit_support_tinfos ()\n     &float_type_node, &double_type_node, &long_double_type_node,\n \n     /* GCC extension types */\n-    #if 0\n+#if 0\n     &complex_integer_type_node,\n     &complex_float_type_node, &complex_double_type_node,\n     &complex_long_double_type_node,\n-    #endif\n+#endif\n     \n     0\n   };"}, {"sha": "b89eca8e58e85224884bf8d715ccd10f0fe48bd9", "filename": "gcc/cppexp.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=bfab56e7ab02ea2616f98cdd1681a5dcc078e189", "patch": "@@ -785,6 +785,11 @@ _cpp_parse_expr (pfile)\n \t  cpp_ice (pfile, \"lex returns a NAME\");\n \tcase ERROR:\n \t  goto syntax_error;\n+\tcase '#':\n+\t  /* We get '#' when get_directive_token hits a syntactically\n+\t     invalid assertion predicate.  _cpp_parse_assertion has\n+\t     already issued an error.  */\n+\t  goto syntax_error;\n \tdefault:\n \t  cpp_error (pfile, \"invalid character in #if\");\n \t  goto syntax_error;"}, {"sha": "62da1f34238dadecb734d4ff6b6e007ca503afdf", "filename": "gcc/cppinit.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=bfab56e7ab02ea2616f98cdd1681a5dcc078e189", "patch": "@@ -852,6 +852,10 @@ cpp_start_read (pfile, fname)\n       CPP_OPTION (pfile, trigraphs) = 0;\n     }\n \n+  /* -Wtraditional is not useful in C++ mode.  */\n+  if (CPP_OPTION (pfile, cplusplus))\n+    CPP_OPTION (pfile, warn_traditional) = 0;\n+\n   /* Set this if it hasn't been set already. */\n   if (user_label_prefix == NULL)\n     user_label_prefix = USER_LABEL_PREFIX;"}, {"sha": "a57eb8b7f476c2ce5932e82b30879a9442b7c66f", "filename": "gcc/cpplex.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=bfab56e7ab02ea2616f98cdd1681a5dcc078e189", "patch": "@@ -604,7 +604,12 @@ _cpp_parse_assertion (pfile)\n   int c, dropwhite;\n   _cpp_skip_hspace (pfile);\n   c = PEEKC();\n-  if (! is_idstart(c))\n+  if (c == '\\n')\n+    {\n+      cpp_error (pfile, \"assertion without predicate\");\n+      return 0;\n+    }\n+  else if (! is_idstart(c))\n     {\n       cpp_error (pfile, \"assertion predicate is not an identifier\");\n       return 0;\n@@ -709,8 +714,9 @@ _cpp_lex_token (pfile)\n       if (pfile->parsing_if_directive)\n \t{\n \t  _cpp_skip_hspace (pfile);\n-\t  _cpp_parse_assertion (pfile);\n-\t  return CPP_ASSERTION;\n+\t  if (_cpp_parse_assertion (pfile))\n+\t    return CPP_ASSERTION;\n+\t  goto randomchar;\n \t}\n \n       if (pfile->parsing_define_directive && ! CPP_TRADITIONAL (pfile))"}, {"sha": "2c24de8598ed222542be43ba8b23b0d2d8a0b17d", "filename": "gcc/cpplib.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=bfab56e7ab02ea2616f98cdd1681a5dcc078e189", "patch": "@@ -232,11 +232,11 @@ _cpp_handle_directive (pfile)\n   if (CPP_WTRADITIONAL (pfile))\n     {\n       if (!hash_at_bol && dtable[i].origin == KANDR)\n-\tcpp_warning (pfile, \"the # in #%s should be at the left margin\",\n+\tcpp_warning (pfile, \"traditional C ignores #%s with the # indented\",\n \t\t     dtable[i].name);\n       else if (hash_at_bol && dtable[i].origin != KANDR)\n \tcpp_warning (pfile,\n-\t\t     \"the # in #%s should not be at the left margin\",\n+\t\t     \"traditional C rejects #%s unless the # is indented\",\n \t\t     dtable[i].name);\n     }\n \n@@ -1658,7 +1658,10 @@ do_assert (pfile)\n \n   bslot = _cpp_lookup_slot (pfile, sym, blen, 1, &bhash);\n   if (! *bslot)\n-    *bslot = base = _cpp_make_hashnode (sym, blen, T_ASSERT, bhash);\n+    {\n+      *bslot = base = _cpp_make_hashnode (sym, blen, T_ASSERT, bhash);\n+      base->value.aschain = 0;\n+    }\n   else\n     {\n       base = *bslot;"}, {"sha": "8b4bdda3d52e8f51c69e6f2fd9cdcedf1e582d7d", "filename": "gcc/enquire.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Fenquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Fenquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fenquire.c?ref=bfab56e7ab02ea2616f98cdd1681a5dcc078e189", "patch": "@@ -716,7 +716,7 @@ int main(argc, argv) int argc; char *argv[]; {\n \t\tprintf (\"#ifndef _FLOAT_H___\\n\");\n \t\tprintf (\"#define _FLOAT_H___\\n\");\n \t\tif (SYS_FLOAT_H_WRAP)\n-\t\t\tprintf (\"#include_next <float.h>\\n\");\n+\t\t\tprintf (\" #include_next <float.h>\\n\");\n \t}\n #ifdef ID\n \tprintf(\"%sProduced on %s by enquire version %s, CWI, Amsterdam%s\\n\","}, {"sha": "3eab1a6619edb2b1c7f5a157772c5d889494d340", "filename": "gcc/fixinc/fixinc.irix", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Ffixinc%2Ffixinc.irix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Ffixinc%2Ffixinc.irix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixinc.irix?ref=bfab56e7ab02ea2616f98cdd1681a5dcc078e189", "patch": "@@ -90,7 +90,7 @@ if [ -r $INPUT/$file ]; then\n #ifdef __cplusplus\n # define exception __math_exception\n #endif\n-#include_next <math.h>\n+ #include_next <math.h>\n #ifdef __cplusplus\n # undef exception\n #endif\n@@ -123,7 +123,7 @@ if [ -r $INPUT/$file ]; then\n #ifdef __cplusplus\n # define bool __curses_bool_t\n #endif\n-#include_next <curses.h>\n+ #include_next <curses.h>\n #ifdef __cplusplus\n # undef bool\n #endif"}, {"sha": "77d96e34f411141d5576592083020023e42e0e3f", "filename": "gcc/fixinc/fixinc.sco", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Ffixinc%2Ffixinc.sco", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Ffixinc%2Ffixinc.sco", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixinc.sco?ref=bfab56e7ab02ea2616f98cdd1681a5dcc078e189", "patch": "@@ -394,7 +394,7 @@ do\n #ifdef __cplusplus\n # define bool __curses_bool_t\n #endif\n-#include_next <$file>\n+ #include_next <$file>\n #ifdef __cplusplus\n # undef bool\n #endif"}, {"sha": "46318967c70a319a1437fdd3fe657b16147bd300", "filename": "gcc/fixinc/fixinc.wrap", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Ffixinc%2Ffixinc.wrap", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Ffixinc%2Ffixinc.wrap", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixinc.wrap?ref=bfab56e7ab02ea2616f98cdd1681a5dcc078e189", "patch": "@@ -57,7 +57,7 @@ if [ -r $INPUT/$file ]; then\n #ifdef __cplusplus\n # define exception __math_exception\n #endif\n-#include_next <math.h>\n+ #include_next <math.h>\n #ifdef __cplusplus\n # undef exception\n #endif\n@@ -86,7 +86,7 @@ if [ -r $INPUT/$file ]; then\n #ifdef __cplusplus\n # define queue __stream_queue\n #endif\n-#include_next <sys/stream.h>\n+ #include_next <sys/stream.h>\n #ifdef __cplusplus\n # undef queue\n #endif\n@@ -116,7 +116,7 @@ if [ -r $INPUT/$file ]; then\n #ifdef __cplusplus\n # define bool __curses_bool_t\n #endif\n-#include_next <curses.h>\n+ #include_next <curses.h>\n #ifdef __cplusplus\n # undef bool\n #endif"}, {"sha": "1196ebb18c088a852c3f7612f53023b855497746", "filename": "gcc/fixinc/fixincl.x", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Ffixinc%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Ffixinc%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.x?ref=bfab56e7ab02ea2616f98cdd1681a5dcc078e189", "patch": "@@ -352,7 +352,7 @@ const char* apzAab_Fd_Zero_Asm_Posix_Types_HPatch[] = {\n    for older versions of the Linux kernel. */\\n\\\n #ifndef _POSIX_TYPES_H_WRAPPER\\n\\\n #include <features.h>\\n\\\n-#include_next <asm/posix_types.h>\\n\\\n+ #include_next <asm/posix_types.h>\\n\\\n \\n\\\n #if defined(__FD_ZERO) && !defined(__GLIBC__)\\n\\\n #undef __FD_ZERO\\n\\\n@@ -399,7 +399,7 @@ const char* apzAab_Fd_Zero_Gnu_Types_HPatch[] = {\n \"/* This file fixes a bug in the __FD_ZERO macro present in glibc 1.x. */\\n\\\n #ifndef _TYPES_H_WRAPPER\\n\\\n #include <features.h>\\n\\\n-#include_next <gnu/types.h>\\n\\\n+ #include_next <gnu/types.h>\\n\\\n \\n\\\n #if defined(__FD_ZERO) && !defined(__GLIBC__)\\n\\\n #undef __FD_ZERO\\n\\\n@@ -446,7 +446,7 @@ const char* apzAab_Fd_Zero_Selectbits_HPatch[] = {\n \"/* This file fixes a bug in the __FD_ZERO macro present in glibc 2.0.x. */\\n\\\n #ifndef _SELECTBITS_H_WRAPPER\\n\\\n #include <features.h>\\n\\\n-#include_next <selectbits.h>\\n\\\n+ #include_next <selectbits.h>\\n\\\n \\n\\\n #if defined(__FD_ZERO) && defined(__GLIBC__) \\\\\\n\\\n \\t&& defined(__GLIBC_MINOR__) && __GLIBC__ == 2 \\\\\\n\\"}, {"sha": "a49771b94ffc1fcdd990465658d4758f1b6cfa5c", "filename": "gcc/fixinc/inclhack.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Ffixinc%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Ffixinc%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.def?ref=bfab56e7ab02ea2616f98cdd1681a5dcc078e189", "patch": "@@ -180,7 +180,7 @@ fix = {\n    for older versions of the Linux kernel. */\n \\#ifndef _POSIX_TYPES_H_WRAPPER\n \\#include <features.h>\n-\\#include_next <asm/posix_types.h>\n+ \\#include_next <asm/posix_types.h>\n \n \\#if defined(__FD_ZERO) && !defined(__GLIBC__)\n \\#undef __FD_ZERO\n@@ -219,7 +219,7 @@ fix = {\n '/* This file fixes a bug in the __FD_ZERO macro present in glibc 1.x. */\n \\#ifndef _TYPES_H_WRAPPER\n \\#include <features.h>\n-\\#include_next <gnu/types.h>\n+ \\#include_next <gnu/types.h>\n \n \\#if defined(__FD_ZERO) && !defined(__GLIBC__)\n \\#undef __FD_ZERO\n@@ -258,7 +258,7 @@ fix = {\n '/* This file fixes a bug in the __FD_ZERO macro present in glibc 2.0.x. */\n \\#ifndef _SELECTBITS_H_WRAPPER\n \\#include <features.h>\n-\\#include_next <selectbits.h>\n+ \\#include_next <selectbits.h>\n \n \\#if defined(__FD_ZERO) && defined(__GLIBC__) \\\\\n \t&& defined(__GLIBC_MINOR__) && __GLIBC__ == 2 \\\\"}, {"sha": "74fc8533980ab49ef631c14747661c5547a2c6b9", "filename": "gcc/fixinc/inclhack.sh", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Ffixinc%2Finclhack.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Ffixinc%2Finclhack.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.sh?ref=bfab56e7ab02ea2616f98cdd1681a5dcc078e189", "patch": "@@ -563,7 +563,7 @@ _EOF_\n    for older versions of the Linux kernel. */\n #ifndef _POSIX_TYPES_H_WRAPPER\n #include <features.h>\n-#include_next <asm/posix_types.h>\n+ #include_next <asm/posix_types.h>\n \n #if defined(__FD_ZERO) && !defined(__GLIBC__)\n #undef __FD_ZERO\n@@ -600,7 +600,7 @@ _EOF_\n /* This file fixes a bug in the __FD_ZERO macro present in glibc 1.x. */\n #ifndef _TYPES_H_WRAPPER\n #include <features.h>\n-#include_next <gnu/types.h>\n+ #include_next <gnu/types.h>\n \n #if defined(__FD_ZERO) && !defined(__GLIBC__)\n #undef __FD_ZERO\n@@ -636,7 +636,7 @@ _EOF_\n /* This file fixes a bug in the __FD_ZERO macro present in glibc 2.0.x. */\n #ifndef _SELECTBITS_H_WRAPPER\n #include <features.h>\n-#include_next <selectbits.h>\n+ #include_next <selectbits.h>\n \n #if defined(__FD_ZERO) && defined(__GLIBC__) \\\n \t&& defined(__GLIBC_MINOR__) && __GLIBC__ == 2 \\"}, {"sha": "cc7b3fb877aee2b883afea90936e358761a293a7", "filename": "gcc/gsyslimits.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Fgsyslimits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Fgsyslimits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgsyslimits.h?ref=bfab56e7ab02ea2616f98cdd1681a5dcc078e189", "patch": "@@ -4,5 +4,5 @@\n    instead of this text.  */\n \n #define _GCC_NEXT_LIMITS_H\t\t/* tell gcc's limits.h to recurse */\n-#include_next <limits.h>\n+ #include_next <limits.h>\n #undef _GCC_NEXT_LIMITS_H"}, {"sha": "b2831fc459ba8d16cb977d692cbbc020564d1960", "filename": "gcc/limity.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Flimity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Flimity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flimity.h?ref=bfab56e7ab02ea2616f98cdd1681a5dcc078e189", "patch": "@@ -4,7 +4,7 @@\n #else /* not _GCC_LIMITS_H_ */\n \n #ifdef _GCC_NEXT_LIMITS_H\n-#include_next <limits.h>\t\t/* recurse down to the real one */\n+ #include_next <limits.h>\t\t/* recurse down to the real one */\n #endif\n \n #endif /* not _GCC_LIMITS_H_ */"}, {"sha": "f36a7c422e49f5750797326b93b09cb7c5da76c3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bfab56e7ab02ea2616f98cdd1681a5dcc078e189", "patch": "@@ -1,3 +1,12 @@\n+2000-04-02  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* gcc.c-torture/compile/981211-1.c: Move to...\n+\t* gcc.dg/cpp-as1.c: ...here.\n+\t* gcc.dg/cpp-as2.c: New file.\n+\n+\t* gcc.dg/cpp-tradwarn1.c: Change warning regexps to match the\n+\tcompiler.\n+\n 2000-04-02  Neil Booth  <NeilB@earthling.net>\n \n \t* gcc.dg/cpp-cond.c  New tests."}, {"sha": "6e8c0f827be34594d654c01a0e163fb854ff36ea", "filename": "gcc/testsuite/gcc.dg/cpp-as1.c", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-as1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-as1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-as1.c?ref=bfab56e7ab02ea2616f98cdd1681a5dcc078e189", "patch": "@@ -1,4 +1,6 @@\n /* Basic tests of the #assert preprocessor extension. */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n \n #define fail  int fail\n ", "previous_filename": "gcc/testsuite/gcc.c-torture/compile/981211-1.c"}, {"sha": "a69627027d359cc3d7da079cd7f1a4e6d4d55b2a", "filename": "gcc/testsuite/gcc.dg/cpp-as2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-as2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-as2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-as2.c?ref=bfab56e7ab02ea2616f98cdd1681a5dcc078e189", "patch": "@@ -0,0 +1,24 @@\n+/* Malformed assertion tests.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"\" } */\n+\n+#assert\t\t/* { dg-error \"without predicate\" \"assert w/o predicate\" } */\n+#assert %\t/* { dg-error \"not an identifier\" \"assert punctuation\" } */\n+#assert 12\t/* { dg-error \"not an identifier\" \"assert number\" } */\n+#assert abc\t/* { dg-error \"missing token-sequence\" \"assert w/o answer\" } */\n+\n+#if #\t\t/* { dg-error \"without predicate\" \"test w/o predicate\" } */\n+#endif\n+\n+#if #%\t\t/* { dg-error \"not an identifier\" \"test punctuation\" } */\n+#endif\n+\n+#if #12\t\t/* { dg-error \"not an identifier\" \"test number\" } */\n+#endif\n+\n+#if #abc\n+#error\t\t/* { dg-bogus \"error\" \"test w/o answer\" } */\n+#endif\n+\n+#if #abc[def]\t/* { dg-error \"invalid char\" \"test with malformed answer\" } */\n+#endif"}, {"sha": "9085ea6791f959cad44992607385e4064a664d7b", "filename": "gcc/testsuite/gcc.dg/cpp-tradwarn1.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-tradwarn1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfab56e7ab02ea2616f98cdd1681a5dcc078e189/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-tradwarn1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-tradwarn1.c?ref=bfab56e7ab02ea2616f98cdd1681a5dcc078e189", "patch": "@@ -2,27 +2,27 @@\n /* { dg-do preprocess } */\n /* { dg-options \"-pedantic -Wtraditional\" } */\n \n-/* Block 1: K+R directives should have the # at the left margin.  */\n+/* Block 1: K+R directives should have the # indented.  */\n \n-#define foo bar\t\t/* { dg-bogus \"left margin\" \"^#kandr\"     } */\n-# define foo bar\t/* { dg-bogus \"left margin\" \"^# kandr\"    } */\n- #define foo bar\t/* { dg-warning \"left margin\" \"^ #kandr\"  } */\n- # define foo bar\t/* { dg-warning \"left margin\" \"^ # kandr\" } */\n+#define foo bar\t\t/* { dg-bogus \"indented\" \"^#kandr\"     } */\n+# define foo bar\t/* { dg-bogus \"indented\" \"^# kandr\"    } */\n+ #define foo bar\t/* { dg-warning \"indented\" \"^ #kandr\"  } */\n+ # define foo bar\t/* { dg-warning \"indented\" \"^ # kandr\" } */\n \n-/* Block 2: C89 directives should not have the # at the left margin.  */\n+/* Block 2: C89 directives should not have the # indented.  */\n \n-#pragma whatever\t/* { dg-warning \"left margin\" \"^#c89\"     } */\n-# pragma whatever\t/* { dg-warning \"left margin\" \"^# c89\"    } */\n- #pragma whatever\t/* { dg-bogus \"left margin\" \"^ #c89\"      } */\n- # pragma whatever\t/* { dg-bogus \"left margin\" \"^ # c89\"     } */\n+#pragma whatever\t/* { dg-warning \"indented\" \"^#c89\"     } */\n+# pragma whatever\t/* { dg-warning \"indented\" \"^# c89\"    } */\n+ #pragma whatever\t/* { dg-bogus \"indented\" \"^ #c89\"      } */\n+ # pragma whatever\t/* { dg-bogus \"indented\" \"^ # c89\"     } */\n \n-/* Block 3: Extensions should not have the # at the left margin,\n+/* Block 3: Extensions should not have the # indented,\n    _and_ they should get a -pedantic warning. */\n \n-#assert foo(bar)\t/* { dg-warning \"left margin\" \"^#ext\"    } */\n-# assert bar(baz)\t/* { dg-warning \"left margin\" \"^# ext\"   } */\n- #assert baz(quux)\t/* { dg-bogus \"left margin\" \"^ #ext\"     } */\n- # assert quux(weeble)\t/* { dg-bogus \"left margin\" \"^ # ext\"    } */\n+#assert foo(bar)\t/* { dg-warning \"indented\" \"^#ext\"    } */\n+# assert bar(baz)\t/* { dg-warning \"indented\" \"^# ext\"   } */\n+ #assert baz(quux)\t/* { dg-bogus \"indented\" \"^ #ext\"     } */\n+ # assert quux(weeble)\t/* { dg-bogus \"indented\" \"^ # ext\"    } */\n \n /* { dg-warning \"ISO C does not\" \"extension warning\" { target native } 22 } */\n /* { dg-warning \"ISO C does not\" \"extension warning\" { target native } 23 } */"}]}