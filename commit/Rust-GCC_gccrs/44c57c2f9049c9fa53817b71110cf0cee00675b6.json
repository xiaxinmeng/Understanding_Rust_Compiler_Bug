{"sha": "44c57c2f9049c9fa53817b71110cf0cee00675b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRjNTdjMmY5MDQ5YzlmYTUzODE3YjcxMTEwY2YwY2VlMDA2NzViNg==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2015-04-10T11:29:53Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2015-04-10T11:29:53Z"}, "message": "re PR fortran/56674 (ICE in check_sym_interfaces)\n\n\tPR fortran/56674\n\tPR fortran/58813\n\tPR fortran/59016\n\tPR fortran/59024\nfortran/\n\t* symbol.c (save_symbol_data, gfc_save_symbol_data): Rename the\n\tformer to the latter and make it non-static.  Update callers.\n\t* gfortran.h (gfc_save_symbol_data): New prototype.\n\t* decl.c (gfc_match_decl_type_spec): Call 'gfc_save_symbol_data'\n\tbefore modifying symbols 'sym' and 'dt_sym'.\ntestsuite/\n\t* gfortran.dg/used_types_27.f90: New.\n\nFrom-SVN: r221972", "tree": {"sha": "b5b49b95711b85f24d871a5d6f80a3a141d8a305", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5b49b95711b85f24d871a5d6f80a3a141d8a305"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44c57c2f9049c9fa53817b71110cf0cee00675b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44c57c2f9049c9fa53817b71110cf0cee00675b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44c57c2f9049c9fa53817b71110cf0cee00675b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44c57c2f9049c9fa53817b71110cf0cee00675b6/comments", "author": null, "committer": null, "parents": [{"sha": "c3d71b62c66f81b95213b88897cdd75f840e2fae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3d71b62c66f81b95213b88897cdd75f840e2fae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3d71b62c66f81b95213b88897cdd75f840e2fae"}], "stats": {"total": 50, "additions": 46, "deletions": 4}, "files": [{"sha": "d3fa35985ff3b4b53a2a5e490abcef352d6ece8d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c57c2f9049c9fa53817b71110cf0cee00675b6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c57c2f9049c9fa53817b71110cf0cee00675b6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=44c57c2f9049c9fa53817b71110cf0cee00675b6", "patch": "@@ -1,3 +1,15 @@\n+2015-04-10  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/56674\n+\tPR fortran/58813\n+\tPR fortran/59016\n+\tPR fortran/59024\n+\t* symbol.c (save_symbol_data, gfc_save_symbol_data): Rename the\n+\tformer to the latter and make it non-static.  Update callers.\n+\t* gfortran.h (gfc_save_symbol_data): New prototype.\n+\t* decl.c (gfc_match_decl_type_spec): Call 'gfc_save_symbol_data'\n+\tbefore modifying symbols 'sym' and 'dt_sym'.\n+\n 2013-04-09  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/56852"}, {"sha": "037a8cc47c3aabe5633888aebbba4691151c5e71", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c57c2f9049c9fa53817b71110cf0cee00675b6/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c57c2f9049c9fa53817b71110cf0cee00675b6/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=44c57c2f9049c9fa53817b71110cf0cee00675b6", "patch": "@@ -2876,6 +2876,7 @@ gfc_match_decl_type_spec (gfc_typespec *ts, int implicit_flag)\n       return MATCH_ERROR;\n     }\n \n+  gfc_save_symbol_data (sym);\n   gfc_set_sym_referenced (sym);\n   if (!sym->attr.generic\n       && !gfc_add_generic (&sym->attr, sym->name, NULL))\n@@ -2900,6 +2901,8 @@ gfc_match_decl_type_spec (gfc_typespec *ts, int implicit_flag)\n       sym->generic = intr;\n       sym->attr.if_source = IFSRC_DECL;\n     }\n+  else\n+    gfc_save_symbol_data (dt_sym);\n \n   gfc_set_sym_referenced (dt_sym);\n "}, {"sha": "9d09de6c53b14634d1e64a5fba940d0544bb12d4", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c57c2f9049c9fa53817b71110cf0cee00675b6/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c57c2f9049c9fa53817b71110cf0cee00675b6/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=44c57c2f9049c9fa53817b71110cf0cee00675b6", "patch": "@@ -2819,6 +2819,7 @@ bool verify_bind_c_derived_type (gfc_symbol *);\n bool verify_com_block_vars_c_interop (gfc_common_head *);\n gfc_symtree *generate_isocbinding_symbol (const char *, iso_c_binding_symbol,\n \t\t\t\t\t  const char *, gfc_symtree *, bool);\n+void gfc_save_symbol_data (gfc_symbol *);\n int gfc_get_sym_tree (const char *, gfc_namespace *, gfc_symtree **, bool);\n int gfc_get_ha_symbol (const char *, gfc_symbol **);\n int gfc_get_ha_sym_tree (const char *, gfc_symtree **);"}, {"sha": "44392e8d19104d14a36fb047bba7a7f92a6b9809", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c57c2f9049c9fa53817b71110cf0cee00675b6/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c57c2f9049c9fa53817b71110cf0cee00675b6/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=44c57c2f9049c9fa53817b71110cf0cee00675b6", "patch": "@@ -2758,8 +2758,8 @@ single_undo_checkpoint_p (void)\n \n /* Save symbol with the information necessary to back it out.  */\n \n-static void\n-save_symbol_data (gfc_symbol *sym)\n+void\n+gfc_save_symbol_data (gfc_symbol *sym)\n {\n   gfc_symbol *s;\n   unsigned i;\n@@ -2860,7 +2860,7 @@ gfc_get_sym_tree (const char *name, gfc_namespace *ns, gfc_symtree **result,\n       p->mark = 1;\n \n       /* Copy in case this symbol is changed.  */\n-      save_symbol_data (p);\n+      gfc_save_symbol_data (p);\n     }\n \n   *result = st;\n@@ -2899,7 +2899,7 @@ gfc_get_ha_sym_tree (const char *name, gfc_symtree **result)\n \n   if (st != NULL)\n     {\n-      save_symbol_data (st->n.sym);\n+      gfc_save_symbol_data (st->n.sym);\n       *result = st;\n       return i;\n     }"}, {"sha": "337ef1aa8c224ea9a84fda689765fe02312b4f6d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c57c2f9049c9fa53817b71110cf0cee00675b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c57c2f9049c9fa53817b71110cf0cee00675b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=44c57c2f9049c9fa53817b71110cf0cee00675b6", "patch": "@@ -1,3 +1,11 @@\n+2015-04-10  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/56674\n+\tPR fortran/58813\n+\tPR fortran/59016\n+\tPR fortran/59024\n+\t* gfortran.dg/used_types_27.f90: New.\n+\n 2015-04-09  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \tPR target/65671"}, {"sha": "4797f855cac17224e1de817a2efcb879d2b4dbba", "filename": "gcc/testsuite/gfortran.dg/used_types_27.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c57c2f9049c9fa53817b71110cf0cee00675b6/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_27.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c57c2f9049c9fa53817b71110cf0cee00675b6/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_27.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_27.f90?ref=44c57c2f9049c9fa53817b71110cf0cee00675b6", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+!\n+! PR fortran/56674\n+! PR fortran/58813\n+! PR fortran/59016\n+! PR fortran/59024\n+! The generic name 'atomic_kind_types' was keeping pointers to freed\n+! symbols, leading to random error-recovery ICEs.\n+!\n+! Original test case from Joost VandeVondele <Joost.VandeVondele@mat.ethz.ch>.\n+\n+MODULE atomic_kind_types\n+  PUBLIC :: atomic_kind_type\n+CONTAINS\n+  INTEGER FUNCTION is_hydrogen(atomic_kind)\n+    TYPE(atomic_kind_type), pointer :: atomic_kind ! { dg-error \"used before it is defined\" }\n+  END FUNCTION\n+END MODULE"}]}