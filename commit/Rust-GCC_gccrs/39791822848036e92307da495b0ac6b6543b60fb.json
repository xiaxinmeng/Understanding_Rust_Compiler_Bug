{"sha": "39791822848036e92307da495b0ac6b6543b60fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk3OTE4MjI4NDgwMzZlOTIzMDdkYTQ5NWIwYWM2YjY1NDNiNjBmYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-06-24T10:53:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-06-24T10:53:53Z"}, "message": "genmatch.c (enum tree_code): Add VIEW_CONVERT[012].\n\n2015-06-24  Richard Biener  <rguenther@suse.de>\n\n\t* genmatch.c (enum tree_code): Add VIEW_CONVERT[012].\n\t(main): Likewise.\n\t(lower_opt_convert): Support lowering of conditional view_convert.\n\t(parser::parse_operation): Likewise.\n\t(parser::parse_for): Likewise.\n\nFrom-SVN: r224893", "tree": {"sha": "612d75ab141553362b80b61c6f5a8b6b4832bd15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/612d75ab141553362b80b61c6f5a8b6b4832bd15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39791822848036e92307da495b0ac6b6543b60fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39791822848036e92307da495b0ac6b6543b60fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39791822848036e92307da495b0ac6b6543b60fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39791822848036e92307da495b0ac6b6543b60fb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "72e839ca6ba1a268d1bc840e7c35b674e9731309", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72e839ca6ba1a268d1bc840e7c35b674e9731309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72e839ca6ba1a268d1bc840e7c35b674e9731309"}], "stats": {"total": 68, "additions": 53, "deletions": 15}, "files": [{"sha": "b4694b14da07925db144be20c94d5c54dbcf751e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39791822848036e92307da495b0ac6b6543b60fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39791822848036e92307da495b0ac6b6543b60fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39791822848036e92307da495b0ac6b6543b60fb", "patch": "@@ -1,3 +1,11 @@\n+2015-06-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* genmatch.c (enum tree_code): Add VIEW_CONVERT[012].\n+\t(main): Likewise.\n+\t(lower_opt_convert): Support lowering of conditional view_convert.\n+\t(parser::parse_operation): Likewise.\n+\t(parser::parse_for): Likewise.\n+\n 2015-06-24  Renlin Li  <renlin.li@arm.com>\n \n \t* varasm.c (emit_local): Use unsigned int for align variable."}, {"sha": "e7e0ed7ebc5217065a3c77e9df82caec11e953ce", "filename": "gcc/genmatch.c", "status": "modified", "additions": 45, "deletions": 15, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39791822848036e92307da495b0ac6b6543b60fb/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39791822848036e92307da495b0ac6b6543b60fb/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=39791822848036e92307da495b0ac6b6543b60fb", "patch": "@@ -161,6 +161,9 @@ enum tree_code {\n CONVERT0,\n CONVERT1,\n CONVERT2,\n+VIEW_CONVERT0,\n+VIEW_CONVERT1,\n+VIEW_CONVERT2,\n MAX_TREE_CODES\n };\n #undef DEFTREECODE\n@@ -749,12 +752,14 @@ lower_commutative (simplify *s, vec<simplify *>& simplifiers)\n    children if STRIP, else replace them with an unconditional convert.  */\n \n operand *\n-lower_opt_convert (operand *o, enum tree_code oper, bool strip)\n+lower_opt_convert (operand *o, enum tree_code oper,\n+\t\t   enum tree_code to_oper, bool strip)\n {\n   if (capture *c = dyn_cast<capture *> (o))\n     {\n       if (c->what)\n-\treturn new capture (c->where, lower_opt_convert (c->what, oper, strip));\n+\treturn new capture (c->where,\n+\t\t\t    lower_opt_convert (c->what, oper, to_oper, strip));\n       else\n \treturn c;\n     }\n@@ -766,16 +771,18 @@ lower_opt_convert (operand *o, enum tree_code oper, bool strip)\n   if (*e->operation == oper)\n     {\n       if (strip)\n-\treturn lower_opt_convert (e->ops[0], oper, strip);\n+\treturn lower_opt_convert (e->ops[0], oper, to_oper, strip);\n \n-      expr *ne = new expr (get_operator (\"CONVERT_EXPR\"));\n-      ne->append_op (lower_opt_convert (e->ops[0], oper, strip));\n+      expr *ne = new expr (to_oper == CONVERT_EXPR\n+\t\t\t   ? get_operator (\"CONVERT_EXPR\")\n+\t\t\t   : get_operator (\"VIEW_CONVERT_EXPR\"));\n+      ne->append_op (lower_opt_convert (e->ops[0], oper, to_oper, strip));\n       return ne;\n     }\n \n   expr *ne = new expr (e->operation, e->is_commutative);\n   for (unsigned i = 0; i < e->ops.length (); ++i)\n-    ne->append_op (lower_opt_convert (e->ops[i], oper, strip));\n+    ne->append_op (lower_opt_convert (e->ops[i], oper, to_oper, strip));\n \n   return ne;\n }\n@@ -818,20 +825,28 @@ lower_opt_convert (operand *o)\n \n   v1.safe_push (o);\n \n-  enum tree_code opers[] = { CONVERT0, CONVERT1, CONVERT2 };\n+  enum tree_code opers[]\n+    = { CONVERT0, CONVERT_EXPR,\n+\tCONVERT1, CONVERT_EXPR,\n+\tCONVERT2, CONVERT_EXPR,\n+\tVIEW_CONVERT0, VIEW_CONVERT_EXPR,\n+\tVIEW_CONVERT1, VIEW_CONVERT_EXPR,\n+\tVIEW_CONVERT2, VIEW_CONVERT_EXPR };\n \n   /* Conditional converts are lowered to a pattern with the\n      conversion and one without.  The three different conditional\n      convert codes are lowered separately.  */\n \n-  for (unsigned i = 0; i < 3; ++i)\n+  for (unsigned i = 0; i < sizeof (opers) / sizeof (enum tree_code); i += 2)\n     {\n       v2 = vNULL;\n       for (unsigned j = 0; j < v1.length (); ++j)\n \tif (has_opt_convert (v1[j], opers[i]))\n \t  {\n-\t    v2.safe_push (lower_opt_convert (v1[j], opers[i], false));\n-\t    v2.safe_push (lower_opt_convert (v1[j], opers[i], true));\n+\t    v2.safe_push (lower_opt_convert (v1[j],\n+\t\t\t\t\t     opers[i], opers[i+1], false));\n+\t    v2.safe_push (lower_opt_convert (v1[j],\n+\t\t\t\t\t     opers[i], opers[i+1], true));\n \t  }\n \n       if (v2 != vNULL)\n@@ -2890,14 +2905,22 @@ parser::parse_operation ()\n   const cpp_token *token = peek ();\n   if (strcmp (id, \"convert0\") == 0)\n     fatal_at (id_tok, \"use 'convert?' here\");\n+  else if (strcmp (id, \"view_convert0\") == 0)\n+    fatal_at (id_tok, \"use 'view_convert?' here\");\n   if (token->type == CPP_QUERY\n       && !(token->flags & PREV_WHITE))\n     {\n       if (strcmp (id, \"convert\") == 0)\n \tid = \"convert0\";\n-      else if (strcmp  (id, \"convert1\") == 0)\n+      else if (strcmp (id, \"convert1\") == 0)\n \t;\n-      else if (strcmp  (id, \"convert2\") == 0)\n+      else if (strcmp (id, \"convert2\") == 0)\n+\t;\n+      else if (strcmp (id, \"view_convert\") == 0)\n+\tid = \"view_convert0\";\n+      else if (strcmp (id, \"view_convert1\") == 0)\n+\t;\n+      else if (strcmp (id, \"view_convert2\") == 0)\n \t;\n       else\n \tfatal_at (id_tok, \"non-convert operator conditionalized\");\n@@ -2907,8 +2930,10 @@ parser::parse_operation ()\n \t\t  \"match expression\");\n       eat_token (CPP_QUERY);\n     }\n-  else if (strcmp  (id, \"convert1\") == 0\n-\t   || strcmp  (id, \"convert2\") == 0)\n+  else if (strcmp (id, \"convert1\") == 0\n+\t   || strcmp (id, \"convert2\") == 0\n+\t   || strcmp (id, \"view_convert1\") == 0\n+\t   || strcmp (id, \"view_convert2\") == 0)\n     fatal_at (id_tok, \"expected '?' after conditional operator\");\n   id_base *op = get_operator (id);\n   if (!op)\n@@ -3325,7 +3350,9 @@ parser::parse_for (source_location)\n \t  id_base *idb = get_operator (oper);\n \t  if (idb == NULL)\n \t    fatal_at (token, \"no such operator '%s'\", oper);\n-\t  if (*idb == CONVERT0 || *idb == CONVERT1 || *idb == CONVERT2)\n+\t  if (*idb == CONVERT0 || *idb == CONVERT1 || *idb == CONVERT2\n+\t      || *idb == VIEW_CONVERT0 || *idb == VIEW_CONVERT1\n+\t      || *idb == VIEW_CONVERT2)\n \t    fatal_at (token, \"conditional operators cannot be used inside for\");\n \n \t  if (arity == -1)\n@@ -3661,6 +3688,9 @@ main (int argc, char **argv)\n add_operator (CONVERT0, \"CONVERT0\", \"tcc_unary\", 1);\n add_operator (CONVERT1, \"CONVERT1\", \"tcc_unary\", 1);\n add_operator (CONVERT2, \"CONVERT2\", \"tcc_unary\", 1);\n+add_operator (VIEW_CONVERT0, \"VIEW_CONVERT0\", \"tcc_unary\", 1);\n+add_operator (VIEW_CONVERT1, \"VIEW_CONVERT1\", \"tcc_unary\", 1);\n+add_operator (VIEW_CONVERT2, \"VIEW_CONVERT2\", \"tcc_unary\", 1);\n #undef END_OF_BASE_TREE_CODES\n #undef DEFTREECODE\n "}]}