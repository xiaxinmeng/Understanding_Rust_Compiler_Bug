{"sha": "cc06c7f652d7fede4844eb1cc21b65d5c8e4efcc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MwNmM3ZjY1MmQ3ZmVkZTQ4NDRlYjFjYzIxYjY1ZDVjOGU0ZWZjYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-13T10:19:24Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-13T10:19:24Z"}, "message": "Fix exception-specifications for std::_Not_fn\n\n\t* include/std/functional (_Not_fn): Make exception specifications\n\tdepend on whether negating the result can throw.\n\t* testsuite/20_util/not_fn/1.cc: Move to ...\n\t* testsuite/20_util/function_objects/not_fn/1.cc: ... here. Add tests\n\tfor types that can throw when negated and that cannot be negated.\n\nFrom-SVN: r241091", "tree": {"sha": "e4fb0f98937daac4b0a52cdba15d6ed65d72cfe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4fb0f98937daac4b0a52cdba15d6ed65d72cfe8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc06c7f652d7fede4844eb1cc21b65d5c8e4efcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc06c7f652d7fede4844eb1cc21b65d5c8e4efcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc06c7f652d7fede4844eb1cc21b65d5c8e4efcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc06c7f652d7fede4844eb1cc21b65d5c8e4efcc/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27947670631d8a44fd8c2984da601154b614fa81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27947670631d8a44fd8c2984da601154b614fa81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27947670631d8a44fd8c2984da601154b614fa81"}], "stats": {"total": 55, "additions": 51, "deletions": 4}, "files": [{"sha": "ffb78ea2f919152c5500633c31adda78b011986a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc06c7f652d7fede4844eb1cc21b65d5c8e4efcc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc06c7f652d7fede4844eb1cc21b65d5c8e4efcc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cc06c7f652d7fede4844eb1cc21b65d5c8e4efcc", "patch": "@@ -1,5 +1,11 @@\n 2016-10-13  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/functional (_Not_fn): Make exception specifications\n+\tdepend on whether negating the result can throw.\n+\t* testsuite/20_util/not_fn/1.cc: Move to ...\n+\t* testsuite/20_util/function_objects/not_fn/1.cc: ... here. Add tests\n+\tfor types that can throw when negated and that cannot be negated.\n+\n \t* include/bits/invoke.h (__invoke): Fix exception-specification.\n \t* include/std/functional (invoke): Likewise.\n \t* testsuite/20_util/function_objects/invoke/1.cc: New test."}, {"sha": "58134b7a0e5eeb864417fd2709df3566a09f5cb5", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc06c7f652d7fede4844eb1cc21b65d5c8e4efcc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc06c7f652d7fede4844eb1cc21b65d5c8e4efcc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=cc06c7f652d7fede4844eb1cc21b65d5c8e4efcc", "patch": "@@ -2140,6 +2140,16 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n   template<typename _Fn>\n     class _Not_fn\n     {\n+      template<typename _Tp>\n+\tusing __is_nothrow_negatable\n+\t  = __bool_constant<noexcept(!std::declval<_Tp>())>;\n+\n+      template<typename _Fn2, typename... _Args>\n+\tusing __noexcept_cond = __and_<\n+\t  __is_nothrow_callable<_Fn2(_Args&&...)>,\n+\t  __is_nothrow_negatable<result_of_t<_Fn2(_Args&&...)>>\n+\t>;\n+\n     public:\n       template<typename _Fn2>\n \t_Not_fn(_Fn2&& __fn, int)\n@@ -2152,21 +2162,21 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n       template<typename... _Args>\n \tauto\n \toperator()(_Args&&... __args) &\n-\tnoexcept(__is_nothrow_callable<_Fn&(_Args&&...)>::value)\n+\tnoexcept(__noexcept_cond<_Fn&, _Args&&...>::value)\n \t-> decltype(!std::declval<result_of_t<_Fn&(_Args&&...)>>())\n \t{ return !std::__invoke(_M_fn, std::forward<_Args>(__args)...); }\n \n       template<typename... _Args>\n \tauto\n \toperator()(_Args&&... __args) const &\n-\tnoexcept(__is_nothrow_callable<const _Fn&(_Args&&...)>::value)\n+\tnoexcept(__noexcept_cond<const _Fn&, _Args&&...>::value)\n \t-> decltype(!std::declval<result_of_t<const _Fn&(_Args&&...)>>())\n \t{ return !std::__invoke(_M_fn, std::forward<_Args>(__args)...); }\n \n       template<typename... _Args>\n \tauto\n \toperator()(_Args&&... __args) &&\n-\tnoexcept(__is_nothrow_callable<_Fn&&(_Args&&...)>::value)\n+\tnoexcept(__noexcept_cond<_Fn&&, _Args&&...>::value)\n \t-> decltype(!std::declval<result_of_t<_Fn&&(_Args&&...)>>())\n \t{\n \t  return !std::__invoke(std::move(_M_fn),\n@@ -2176,7 +2186,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n       template<typename... _Args>\n \tauto\n \toperator()(_Args&&... __args) const &&\n-\tnoexcept(__is_nothrow_callable<const _Fn&&(_Args&&...)>::value)\n+\tnoexcept(__noexcept_cond<const _Fn&&, _Args&&...>::value)\n \t-> decltype(!std::declval<result_of_t<const _Fn&&(_Args&&...)>>())\n \t{\n \t  return !std::__invoke(std::move(_M_fn),"}, {"sha": "246b962bc46f93b74649db0b6ff5a1d088658588", "filename": "libstdc++-v3/testsuite/20_util/function_objects/not_fn/1.cc", "status": "renamed", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc06c7f652d7fede4844eb1cc21b65d5c8e4efcc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fnot_fn%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc06c7f652d7fede4844eb1cc21b65d5c8e4efcc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fnot_fn%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fnot_fn%2F1.cc?ref=cc06c7f652d7fede4844eb1cc21b65d5c8e4efcc", "patch": "@@ -91,6 +91,35 @@ test05()\n   auto copy(nf); // PR libstdc++/70564\n }\n \n+void\n+test06()\n+{\n+  struct Boolean {\n+    Boolean operator!() noexcept(false) { return *this; }\n+  };\n+  struct F {\n+    Boolean operator()() { return {}; }\n+  };\n+  F f;\n+  auto notf = std::not_fn(f);\n+  using NotF = decltype(notf);\n+  static_assert( std::is_callable<NotF()>::value, \"cannot negate\" );\n+  static_assert( !noexcept(notf()), \"conversion to bool affects noexcept\" );\n+}\n+\n+void\n+test07()\n+{\n+  struct NonNegatable { };\n+  struct F {\n+    NonNegatable operator()() { return {}; }\n+  };\n+  F f;\n+  auto notf = std::not_fn(f);\n+  using NotF = decltype(notf);\n+  static_assert( !std::is_callable<NotF()>::value, \"cannot negate\" );\n+}\n+\n int\n main()\n {\n@@ -99,4 +128,6 @@ main()\n   test03();\n   test04();\n   test05();\n+  test06();\n+  test07();\n }", "previous_filename": "libstdc++-v3/testsuite/20_util/not_fn/1.cc"}]}