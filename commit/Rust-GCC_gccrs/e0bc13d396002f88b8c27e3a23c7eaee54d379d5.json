{"sha": "e0bc13d396002f88b8c27e3a23c7eaee54d379d5", "node_id": "C_kwDOANBUbNoAKGUwYmMxM2QzOTYwMDJmODhiOGMyN2UzYTIzYzdlYWVlNTRkMzc5ZDU", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2023-02-02T10:01:30Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2023-02-02T10:01:30Z"}, "message": "arm: Fix MVE predicates synthesis [PR 108443]\n\nThis patch fixes the way we synthesize MVE predicate immediates and fixes some\nother inconsistencies around predicates. For instance this patch fixes the modes\nused in the vctp intrinsics, to couple them with predicate modes with the\nappropriate lane numbers. For this V2QI is added to represent a predicate\ncreated by vctp64q. The reason we use V2QI and not for instance a V2BI with\n8-bit boolean modes is because we are trying to avoid having two 'INT' modes of\nthe same size. We make sure we use the V2QI mode instead of HI for any\ninstruction working on two lanes of 64-bits consuming a predicate.\n\ngcc/ChangeLog:\n\n\tPR target/108443\n\t* config/arm/arm.h (VALID_MVE_PRED_MODE): Add V2QI.\n\t* config/arm/arm.cc (thumb2_legitimate_address_p): Use HImode for\n\taddressing MVE predicate modes.\n\t(mve_bool_vec_to_const): Change to represent correct MVE predicate\n\tformat.\n\t(arm_hard_regno_mode_ok): Use VALID_MVE_PRED_MODE instead of checking\n\tmodes.\n\t(arm_vector_mode_supported_p): Likewise.\n\t(arm_mode_to_pred_mode): Add V2QI.\n\t* config/arm/arm-builtins.cc (UNOP_PRED_UNONE_QUALIFIERS): New\n\tqualifier.\n\t(UNOP_PRED_PRED_QUALIFIERS): New qualifier\n\t(BINOP_PRED_UNONE_PRED_QUALIFIERS): New qualifier.\n\t(v2qi_UP): New macro.\n\t(v4bi_UP): New macro.\n\t(v8bi_UP): New macro.\n\t(v16bi_UP): New macro.\n\t(arm_expand_builtin_args): Make it able to expand the new predicate\n\tmodes.\n\t* config/arm/arm-modes.def (V2QI): New mode.\n\t* config/arm/arm-simd-builtin-types.def (Pred1x16_t, Pred2x8_t\n\tPred4x4_t): Remove unused predicate builtin types.\n\t* config/arm/arm_mve.h (__arm_vctp16q, __arm_vctp32q, __arm_vctp64q,\n\t__arm_vctp8q, __arm_vpnot, __arm_vctp8q_m, __arm_vctp64q_m,\n\t__arm_vctp32q_m, __arm_vctp16q_m): Use predicate modes.\n\t* config/arm/arm_mve_builtins.def (vctp16q, vctp32q, vctp64q, vctp8q,\n\tvpnot, vctp8q_m, vctp16q_m, vctp32q_m, vctp64q_m): Likewise.\n\t* config/arm/constraints.md (DB): Check for VALID_MVE_PRED_MODE instead\n\tof MODE_VECTOR_BOOL.\n\t* config/arm/iterators.md (MVE_7, MVE_7_HI): Add V2QI\n\t(MVE_VPRED): Likewise.\n\t(MVE_vpred): Add V2QI and map upper case predicate modes to lower case.\n\t(MVE_vctp): New mode attribute.\n\t(mode1): Remove.\n\t(VCTPQ): Remove.\n\t(VCTPQ_M): Remove.\n\t* config/arm/mve.md (mve_vctp<mode1>qhi): Rename this...\n\t(mve_vctp<MVE_vctp>q<MVE_vpred>): ... to this. And use new mode\n\tattributes.\n\t(mve_vpnothi): Rename this...\n\t(mve_vpnotv16bi): ... to this.\n\t(mve_vctp<mode1>q_mhi): Rename this...\n\t(mve_vctp<MVE_vctp>q_m<MVE_vpred>):... to this.\n\t(mve_vldrdq_gather_base_z_<supf>v2di,\n\tmve_vldrdq_gather_offset_z_<supf>v2di,\n\tmve_vldrdq_gather_shifted_offset_z_<supf>v2di,\n\tmve_vstrdq_scatter_base_p_<supf>v2di,\n\tmve_vstrdq_scatter_offset_p_<supf>v2di,\n\tmve_vstrdq_scatter_offset_p_<supf>v2di_insn,\n\tmve_vstrdq_scatter_shifted_offset_p_<supf>v2di,\n\tmve_vstrdq_scatter_shifted_offset_p_<supf>v2di_insn,\n\tmve_vstrdq_scatter_base_wb_p_<supf>v2di,\n\tmve_vldrdq_gather_base_wb_z_<supf>v2di,\n\tmve_vldrdq_gather_base_nowb_z_<supf>v2di,\n\tmve_vldrdq_gather_base_wb_z_<supf>v2di_insn):  Use V2QI insead of HI for\n\tpredicates.\n\t* config/arm/unspecs.md (VCTP8Q, VCTP16Q, VCTP32Q, VCTP64Q): Replace\n\tthese...\n\t(VCTP): ... with this.\n\t(VCTP8Q_M, VCTP16Q_M, VCTP32Q_M, VCTP64Q_M): Replace these...\n\t(VCTP_M): ... with this.\n\t* config/arm/vfp.md (*thumb2_movhi_vfp, *thumb2_movhi_fp16): Use\n\tVALID_MVE_PRED_MODE instead of checking for MODE_VECTOR_BOOL class.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/pr108443-run.c: New test.\n\t* gcc.target/arm/mve/pr108443.c: New test.", "tree": {"sha": "b92d40d0cecfc2f946a7e333b3601d37f421cd49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b92d40d0cecfc2f946a7e333b3601d37f421cd49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0bc13d396002f88b8c27e3a23c7eaee54d379d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0bc13d396002f88b8c27e3a23c7eaee54d379d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0bc13d396002f88b8c27e3a23c7eaee54d379d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d45ec8a732f449647afa89e46b80a4e0614ec28d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d45ec8a732f449647afa89e46b80a4e0614ec28d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d45ec8a732f449647afa89e46b80a4e0614ec28d"}], "stats": {"total": 249, "additions": 160, "deletions": 89}, "files": [{"sha": "9f5c568cbc3389daebcfad8ac79babdb02025039", "filename": "gcc/config/arm/arm-builtins.cc", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Fconfig%2Farm%2Farm-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Fconfig%2Farm%2Farm-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.cc?ref=e0bc13d396002f88b8c27e3a23c7eaee54d379d5", "patch": "@@ -384,6 +384,19 @@ arm_unop_unone_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define UNOP_UNONE_IMM_QUALIFIERS \\\n   (arm_unop_unone_imm_qualifiers)\n \n+static enum arm_type_qualifiers\n+arm_unop_pred_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_predicate, qualifier_unsigned };\n+#define UNOP_PRED_UNONE_QUALIFIERS \\\n+  (arm_unop_pred_unone_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_unop_pred_pred_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_predicate, qualifier_predicate };\n+#define UNOP_PRED_PRED_QUALIFIERS \\\n+  (arm_unop_pred_pred_qualifiers)\n+\n+\n static enum arm_type_qualifiers\n arm_binop_none_none_none_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_none, qualifier_none };\n@@ -426,6 +439,12 @@ arm_binop_pred_unone_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define BINOP_PRED_UNONE_UNONE_QUALIFIERS \\\n   (arm_binop_pred_unone_unone_qualifiers)\n \n+static enum arm_type_qualifiers\n+arm_binop_pred_unone_pred_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_predicate, qualifier_unsigned, qualifier_predicate };\n+#define BINOP_PRED_UNONE_PRED_QUALIFIERS \\\n+  (arm_binop_pred_unone_pred_qualifiers)\n+\n static enum arm_type_qualifiers\n arm_binop_unone_none_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_unsigned, qualifier_none, qualifier_immediate };\n@@ -851,6 +870,10 @@ arm_set_sat_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_void, qualifier_none };\n #define SET_SAT_QUALIFIERS (arm_set_sat_qualifiers)\n \n+#define v2qi_UP  E_V2QImode\n+#define v4bi_UP  E_V4BImode\n+#define v8bi_UP  E_V8BImode\n+#define v16bi_UP E_V16BImode\n #define v8qi_UP  E_V8QImode\n #define v4hi_UP  E_V4HImode\n #define v4hf_UP  E_V4HFmode\n@@ -2989,11 +3012,14 @@ arm_expand_builtin_args (rtx target, machine_mode map_mode, int fcode,\n \t\top[argc] = convert_memory_address (Pmode, op[argc]);\n \n \t      /* MVE uses mve_pred16_t (aka HImode) for vectors of\n-\t\t predicates.  */\n-\t      if (GET_MODE_CLASS (mode[argc]) == MODE_VECTOR_BOOL)\n+\t\t predicates, but internally we use V16BI/V8BI/V4BI/V2QI for\n+\t\t MVE predicate modes.  */\n+\t      if (TARGET_HAVE_MVE && VALID_MVE_PRED_MODE (mode[argc]))\n \t\top[argc] = gen_lowpart (mode[argc], op[argc]);\n \n-\t      /*gcc_assert (GET_MODE (op[argc]) == mode[argc]); */\n+\t      gcc_assert (GET_MODE (op[argc]) == mode[argc]\n+\t\t\t  || (GET_MODE(op[argc]) == E_VOIDmode\n+\t\t\t      && CONSTANT_P (op[argc])));\n \t      if (!(*insn_data[icode].operand[opno].predicate)\n \t\t  (op[argc], mode[argc]))\n \t\top[argc] = copy_to_mode_reg (mode[argc], op[argc]);\n@@ -3198,7 +3224,7 @@ arm_expand_builtin_args (rtx target, machine_mode map_mode, int fcode,\n   else\n     emit_insn (insn);\n \n-  if (GET_MODE_CLASS (tmode) == MODE_VECTOR_BOOL)\n+  if (TARGET_HAVE_MVE && VALID_MVE_PRED_MODE (tmode))\n     {\n       rtx HItarget = gen_reg_rtx (HImode);\n       emit_move_insn (HItarget, gen_lowpart (HImode, target));"}, {"sha": "c7645c480f63ab4d85cad207099c318f8e69a07d", "filename": "gcc/config/arm/arm-modes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Fconfig%2Farm%2Farm-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Fconfig%2Farm%2Farm-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-modes.def?ref=e0bc13d396002f88b8c27e3a23c7eaee54d379d5", "patch": "@@ -91,6 +91,7 @@ BOOL_MODE (B4I, 4, 1);\n VECTOR_BOOL_MODE (V16BI, 16, BI, 2);\n VECTOR_BOOL_MODE (V8BI, 8, B2I, 2);\n VECTOR_BOOL_MODE (V4BI, 4, B4I, 2);\n+VECTOR_MODE (INT, QI, 2);\n \n /* Fraction and accumulator vector modes.  */\n VECTOR_MODES (FRACT, 4);      /* V4QQ  V2HQ */"}, {"sha": "daa4bd95e307973e88a8590e5231fc410c840d4f", "filename": "gcc/config/arm/arm-simd-builtin-types.def", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Fconfig%2Farm%2Farm-simd-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Fconfig%2Farm%2Farm-simd-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-simd-builtin-types.def?ref=e0bc13d396002f88b8c27e3a23c7eaee54d379d5", "patch": "@@ -51,7 +51,3 @@\n   ENTRY (Bfloat16x2_t, V2BF, none, 32, bfloat16, 20)\n   ENTRY (Bfloat16x4_t, V4BF, none, 64, bfloat16, 20)\n   ENTRY (Bfloat16x8_t, V8BF, none, 128, bfloat16, 20)\n-\n-  ENTRY (Pred1x16_t, V16BI, predicate, 16, pred1, 16)\n-  ENTRY (Pred2x8_t, V8BI, predicate, 8, pred1, 15)\n-  ENTRY (Pred4x4_t, V4BI, predicate, 4, pred1, 15)"}, {"sha": "1d285051fa6d8e6c05813801eb678e58da25714d", "filename": "gcc/config/arm/arm.cc", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Fconfig%2Farm%2Farm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Fconfig%2Farm%2Farm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.cc?ref=e0bc13d396002f88b8c27e3a23c7eaee54d379d5", "patch": "@@ -8682,6 +8682,11 @@ thumb2_legitimate_address_p (machine_mode mode, rtx x, int strict_p)\n   bool use_ldrd;\n   enum rtx_code code = GET_CODE (x);\n \n+  /* If we are dealing with a MVE predicate mode, then treat it as a HImode as\n+     can store and load it like any other 16-bit value.  */\n+  if (TARGET_HAVE_MVE && VALID_MVE_PRED_MODE (mode))\n+    mode = HImode;\n+\n   if (TARGET_HAVE_MVE && VALID_MVE_MODE (mode))\n     return mve_vector_mem_operand (mode, x, strict_p);\n \n@@ -12960,7 +12965,7 @@ simd_valid_immediate (rtx op, machine_mode mode, int inverse,\n   /* Only support 128-bit vectors for MVE.  */\n   if (TARGET_HAVE_MVE\n       && (!vector\n-\t  || (GET_MODE_CLASS (mode) == MODE_VECTOR_BOOL)\n+\t  || VALID_MVE_PRED_MODE (mode)\n \t  || n_elts * innersize != 16))\n     return -1;\n \n@@ -13333,9 +13338,15 @@ neon_vdup_constant (rtx vals, bool generate)\n rtx\n mve_bool_vec_to_const (rtx const_vec)\n {\n-  int n_elts = GET_MODE_NUNITS ( GET_MODE (const_vec));\n-  int repeat = 16 / n_elts;\n-  int i;\n+  machine_mode mode = GET_MODE (const_vec);\n+\n+  if (!VECTOR_MODE_P (mode))\n+    return const_vec;\n+\n+  unsigned n_elts = GET_MODE_NUNITS (mode);\n+  unsigned el_prec = GET_MODE_PRECISION (GET_MODE_INNER (mode));\n+  unsigned shift_c = 16 / n_elts;\n+  unsigned i;\n   int hi_val = 0;\n \n   for (i = 0; i < n_elts; i++)\n@@ -13344,12 +13355,16 @@ mve_bool_vec_to_const (rtx const_vec)\n       unsigned HOST_WIDE_INT elpart;\n \n       gcc_assert (CONST_INT_P (el));\n-      elpart = INTVAL (el);\n+      elpart = INTVAL (el) & ((1U << el_prec) - 1);\n+\n+      unsigned index = BYTES_BIG_ENDIAN ? n_elts - i - 1 : i;\n \n-      for (int j = 0; j < repeat; j++)\n-\thi_val |= elpart << (i * repeat + j);\n+      hi_val |= elpart << (index * shift_c);\n     }\n-  return gen_int_mode (hi_val, HImode);\n+  /* We are using mov immediate to encode this constant which writes 32-bits\n+     so we need to make sure the top 16-bits are all 0, otherwise we can't\n+     guarantee we can actually write this immediate.  */\n+  return gen_int_mode (hi_val, SImode);\n }\n \n /* Return a non-NULL RTX iff VALS, which is a PARALLEL containing only\n@@ -13392,7 +13407,7 @@ neon_make_constant (rtx vals, bool generate)\n       && simd_immediate_valid_for_move (const_vec, mode, NULL, NULL))\n     /* Load using VMOV.  On Cortex-A8 this takes one cycle.  */\n     return const_vec;\n-  else if (TARGET_HAVE_MVE && (GET_MODE_CLASS (mode) == MODE_VECTOR_BOOL))\n+  else if (TARGET_HAVE_MVE && VALID_MVE_PRED_MODE(mode))\n     return mve_bool_vec_to_const (const_vec);\n   else if ((target = neon_vdup_constant (vals, generate)) != NULL_RTX)\n     /* Loaded using VDUP.  On Cortex-A8 the VDUP takes one NEON\n@@ -29583,14 +29598,12 @@ arm_vector_mode_supported_p (machine_mode mode)\n     return true;\n \n   if (TARGET_HAVE_MVE\n-      && (mode == V2DImode || mode == V4SImode || mode == V8HImode\n-\t  || mode == V16QImode\n-\t  || mode == V16BImode || mode == V8BImode || mode == V4BImode))\n-      return true;\n+      && (VALID_MVE_SI_MODE (mode) || VALID_MVE_PRED_MODE (mode)))\n+    return true;\n \n   if (TARGET_HAVE_MVE_FLOAT\n       && (mode == V2DFmode || mode == V4SFmode || mode == V8HFmode))\n-      return true;\n+    return true;\n \n   return false;\n }\n@@ -31409,6 +31422,7 @@ arm_mode_to_pred_mode (machine_mode mode)\n     case 16: return V16BImode;\n     case 8: return V8BImode;\n     case 4: return V4BImode;\n+    case 2: return V2QImode;\n     }\n   return opt_machine_mode ();\n }"}, {"sha": "7d40b8b7e00bc3b4dcff7ec685ba864ca3885052", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=e0bc13d396002f88b8c27e3a23c7eaee54d379d5", "patch": "@@ -1106,7 +1106,8 @@ extern const int arm_arch_cde_coproc_bits[];\n \n #define VALID_MVE_PRED_MODE(MODE) \\\n   ((MODE) == HImode\t\t\t\t\t\t\t\\\n-   || (MODE) == V16BImode || (MODE) == V8BImode || (MODE) == V4BImode)\n+   || (MODE) == V16BImode || (MODE) == V8BImode || (MODE) == V4BImode\t\\\n+   || (MODE) == V2QImode)\n \n #define VALID_MVE_SI_MODE(MODE) \\\n   ((MODE) == V2DImode ||(MODE) == V4SImode || (MODE) == V8HImode \\"}, {"sha": "1262d66812102e1d47d591ccccae0c24008dad60", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=e0bc13d396002f88b8c27e3a23c7eaee54d379d5", "patch": "@@ -3528,35 +3528,35 @@ __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vctp16q (uint32_t __a)\n {\n-  return __builtin_mve_vctp16qhi (__a);\n+  return __builtin_mve_vctp16qv8bi (__a);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vctp32q (uint32_t __a)\n {\n-  return __builtin_mve_vctp32qhi (__a);\n+  return __builtin_mve_vctp32qv4bi (__a);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vctp64q (uint32_t __a)\n {\n-  return __builtin_mve_vctp64qhi (__a);\n+  return __builtin_mve_vctp64qv2qi (__a);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vctp8q (uint32_t __a)\n {\n-  return __builtin_mve_vctp8qhi (__a);\n+  return __builtin_mve_vctp8qv16bi (__a);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vpnot (mve_pred16_t __a)\n {\n-  return __builtin_mve_vpnothi (__a);\n+  return __builtin_mve_vpnotv16bi (__a);\n }\n \n __extension__ extern __inline uint8x16_t\n@@ -6696,28 +6696,28 @@ __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vctp8q_m (uint32_t __a, mve_pred16_t __p)\n {\n-  return __builtin_mve_vctp8q_mhi (__a, __p);\n+  return __builtin_mve_vctp8q_mv16bi (__a, __p);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vctp64q_m (uint32_t __a, mve_pred16_t __p)\n {\n-  return __builtin_mve_vctp64q_mhi (__a, __p);\n+  return __builtin_mve_vctp64q_mv2qi (__a, __p);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vctp32q_m (uint32_t __a, mve_pred16_t __p)\n {\n-  return __builtin_mve_vctp32q_mhi (__a, __p);\n+  return __builtin_mve_vctp32q_mv4bi (__a, __p);\n }\n \n __extension__ extern __inline mve_pred16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vctp16q_m (uint32_t __a, mve_pred16_t __p)\n {\n-  return __builtin_mve_vctp16q_mhi (__a, __p);\n+  return __builtin_mve_vctp16q_mv8bi (__a, __p);\n }\n \n __extension__ extern __inline uint64_t"}, {"sha": "5e5510f6e37f197ffc4c08a1166bd0d80262f65a", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=e0bc13d396002f88b8c27e3a23c7eaee54d379d5", "patch": "@@ -71,11 +71,11 @@ VAR2 (UNOP_UNONE_NONE, vcvtaq_u, v8hi, v4si)\n VAR2 (UNOP_UNONE_IMM, vmvnq_n_u, v8hi, v4si)\n VAR1 (UNOP_UNONE_UNONE, vrev16q_u, v16qi)\n VAR1 (UNOP_UNONE_UNONE, vaddlvq_u, v4si)\n-VAR1 (UNOP_UNONE_UNONE, vctp16q, hi)\n-VAR1 (UNOP_UNONE_UNONE, vctp32q, hi)\n-VAR1 (UNOP_UNONE_UNONE, vctp64q, hi)\n-VAR1 (UNOP_UNONE_UNONE, vctp8q, hi)\n-VAR1 (UNOP_UNONE_UNONE, vpnot, hi)\n+VAR1 (UNOP_PRED_UNONE, vctp16q, v8bi)\n+VAR1 (UNOP_PRED_UNONE, vctp32q, v4bi)\n+VAR1 (UNOP_PRED_UNONE, vctp64q, v2qi)\n+VAR1 (UNOP_PRED_UNONE, vctp8q, v16bi)\n+VAR1 (UNOP_PRED_PRED, vpnot, v16bi)\n VAR2 (BINOP_NONE_NONE_NONE, vsubq_n_f, v8hf, v4sf)\n VAR2 (BINOP_NONE_NONE_NONE, vbrsrq_n_f, v8hf, v4sf)\n VAR2 (BINOP_NONE_NONE_IMM, vcvtq_n_to_f_s, v8hf, v4sf)\n@@ -265,10 +265,10 @@ VAR2 (BINOP_NONE_NONE_IMM, vshllbq_n_s, v16qi, v8hi)\n VAR2 (BINOP_NONE_NONE_IMM, vorrq_n_s, v8hi, v4si)\n VAR2 (BINOP_NONE_NONE_IMM, vbicq_n_s, v8hi, v4si)\n VAR1 (BINOP_UNONE_UNONE_UNONE, vrmlaldavhq_u, v4si)\n-VAR1 (BINOP_UNONE_UNONE_UNONE, vctp8q_m, hi)\n-VAR1 (BINOP_UNONE_UNONE_UNONE, vctp64q_m, hi)\n-VAR1 (BINOP_UNONE_UNONE_UNONE, vctp32q_m, hi)\n-VAR1 (BINOP_UNONE_UNONE_UNONE, vctp16q_m, hi)\n+VAR1 (BINOP_PRED_UNONE_PRED, vctp8q_m, v16bi)\n+VAR1 (BINOP_PRED_UNONE_PRED, vctp64q_m, v2qi)\n+VAR1 (BINOP_PRED_UNONE_PRED, vctp32q_m, v4bi)\n+VAR1 (BINOP_PRED_UNONE_PRED, vctp16q_m, v8bi)\n VAR1 (BINOP_UNONE_UNONE_UNONE, vaddlvaq_u, v4si)\n VAR1 (BINOP_NONE_NONE_NONE, vrmlsldavhxq_s, v4si)\n VAR1 (BINOP_NONE_NONE_NONE, vrmlsldavhq_s, v4si)"}, {"sha": "504cd938b26e2629183a883383a81bb4e775bb92", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=e0bc13d396002f88b8c27e3a23c7eaee54d379d5", "patch": "@@ -316,7 +316,7 @@\n  \"@internal\n   In ARM/Thumb-2 state with MVE a constant vector of booleans.\"\n  (and (match_code \"const_vector\")\n-      (match_test \"TARGET_HAVE_MVE && GET_MODE_CLASS (mode) == MODE_VECTOR_BOOL\")))\n+      (match_test \"TARGET_HAVE_MVE && VALID_MVE_PRED_MODE (mode)\")))\n \n (define_constraint \"Da\"\n  \"@internal"}, {"sha": "39895ad62aa3afd55d3cbc92c55b45bc56710bcb", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=e0bc13d396002f88b8c27e3a23c7eaee54d379d5", "patch": "@@ -272,8 +272,8 @@\n (define_mode_iterator MVE_2 [V16QI V8HI V4SI])\n (define_mode_iterator MVE_5 [V8HI V4SI])\n (define_mode_iterator MVE_6 [V8HI V4SI])\n-(define_mode_iterator MVE_7 [V16BI V8BI V4BI])\n-(define_mode_iterator MVE_7_HI [HI V16BI V8BI V4BI])\n+(define_mode_iterator MVE_7 [V16BI V8BI V4BI V2QI])\n+(define_mode_iterator MVE_7_HI [HI V16BI V8BI V4BI V2QI])\n \n ;;----------------------------------------------------------------------------\n ;; Code iterators\n@@ -949,9 +949,12 @@\n (define_mode_attr earlyclobber_32 [(V16QI \"=w\") (V8HI \"=w\") (V4SI \"=&w\")\n \t\t\t\t\t\t(V8HF \"=w\") (V4SF \"=&w\")])\n (define_mode_attr MVE_VPRED [(V16QI \"V16BI\") (V8HI \"V8BI\") (V4SI \"V4BI\")\n-                             (V2DI \"HI\") (V8HF \"V8BI\")   (V4SF \"V4BI\")])\n+\t\t\t     (V8HF \"V8BI\")   (V4SF \"V4BI\") (V2DI \"V2QI\")])\n (define_mode_attr MVE_vpred [(V16QI \"v16bi\") (V8HI \"v8bi\") (V4SI \"v4bi\")\n-                             (V2DI \"hi\") (V8HF \"v8bi\")   (V4SF \"v4bi\")])\n+\t\t\t     (V8HF \"v8bi\")   (V4SF \"v4bi\")\n+\t\t\t     (V16BI \"v16bi\") (V8BI \"v8bi\") (V4BI \"v4bi\")\n+\t\t\t     (V2QI \"v2qi\")])\n+(define_mode_attr MVE_vctp [(V16BI \"8\") (V8BI \"16\") (V4BI \"32\") (V2QI \"64\")])\n \n ;;----------------------------------------------------------------------------\n ;; Code attributes\n@@ -1461,11 +1464,6 @@\n \t\t       (VADCIQ_M_S \"s\") (SQRSHRL_64 \"64\") (SQRSHRL_48 \"48\")\n \t\t       (UQRSHLL_64 \"64\") (UQRSHLL_48 \"48\") (VSHLCQ_M_S \"s\")\n \t\t       (VSHLCQ_M_U \"u\")])\n-\n-(define_int_attr mode1 [(VCTP8Q \"8\") (VCTP16Q \"16\") (VCTP32Q \"32\")\n-\t\t\t(VCTP64Q \"64\") (VCTP8Q_M \"8\") (VCTP16Q_M \"16\")\n-\t\t\t(VCTP32Q_M \"32\") (VCTP64Q_M \"64\")])\n-\n ;; Both kinds of return insn.\n (define_code_iterator RETURNS [return simple_return])\n (define_code_attr return_str [(return \"\") (simple_return \"simple_\")])\n@@ -1557,8 +1555,6 @@\n (define_int_iterator VCVTNQ [VCVTNQ_S VCVTNQ_U])\n (define_int_iterator VCVTMQ [VCVTMQ_S VCVTMQ_U])\n (define_int_iterator VADDLVQ [VADDLVQ_U VADDLVQ_S])\n-(define_int_iterator VCTPQ [VCTP8Q VCTP16Q VCTP32Q VCTP64Q])\n-(define_int_iterator VCTPQ_M [VCTP8Q_M VCTP16Q_M VCTP32Q_M VCTP64Q_M])\n (define_int_iterator VCVTQ_N_TO_F [VCVTQ_N_TO_F_S VCVTQ_N_TO_F_U])\n (define_int_iterator VCREATEQ [VCREATEQ_U VCREATEQ_S])\n (define_int_iterator VSHRQ_N [VSHRQ_N_S VSHRQ_N_U])"}, {"sha": "74523f49356a9fb06afd47e2a19a98caba17937d", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=e0bc13d396002f88b8c27e3a23c7eaee54d379d5", "patch": "@@ -643,24 +643,24 @@\n ;;\n ;; [vctp8q vctp16q vctp32q vctp64q])\n ;;\n-(define_insn \"mve_vctp<mode1>qhi\"\n+(define_insn \"mve_vctp<MVE_vctp>q<MVE_vpred>\"\n   [\n-   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n-\t(unspec:HI [(match_operand:SI 1 \"s_register_operand\" \"r\")]\n-\tVCTPQ))\n+   (set (match_operand:MVE_7 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:MVE_7 [(match_operand:SI 1 \"s_register_operand\" \"r\")]\n+\tVCTP))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vctp.<mode1> %1\"\n+  \"vctp.<MVE_vctp> %1\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n \n ;;\n ;; [vpnot])\n ;;\n-(define_insn \"mve_vpnothi\"\n+(define_insn \"mve_vpnotv16bi\"\n   [\n-   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n-\t(unspec:HI [(match_operand:HI 1 \"vpr_register_operand\" \"0\")]\n+   (set (match_operand:V16BI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:V16BI [(match_operand:V16BI 1 \"vpr_register_operand\" \"0\")]\n \t VPNOT))\n   ]\n   \"TARGET_HAVE_MVE\"\n@@ -1959,15 +1959,15 @@\n ;;\n ;; [vctp8q_m vctp16q_m vctp32q_m vctp64q_m])\n ;;\n-(define_insn \"mve_vctp<mode1>q_mhi\"\n+(define_insn \"mve_vctp<MVE_vctp>q_m<MVE_vpred>\"\n   [\n-   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n-\t(unspec:HI [(match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t    (match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n-\t VCTPQ_M))\n+   (set (match_operand:MVE_7 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:MVE_7 [(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t    (match_operand:MVE_7 2 \"vpr_register_operand\" \"Up\")]\n+\t VCTP_M))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vpst\\;vctpt.<mode1> %1\"\n+  \"vpst\\;vctpt.<MVE_vctp> %1\"\n   [(set_attr \"type\" \"mve_move\")\n    (set_attr \"length\"\"8\")])\n \n@@ -7664,7 +7664,7 @@\n   [(set (match_operand:V2DI 0 \"s_register_operand\" \"=&w\")\n \t(unspec:V2DI [(match_operand:V2DI 1 \"s_register_operand\" \"w\")\n \t\t      (match_operand:SI 2 \"immediate_operand\" \"i\")\n-\t\t      (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t\t      (match_operand:V2QI 3 \"vpr_register_operand\" \"Up\")]\n \t VLDRDGBQ))\n   ]\n   \"TARGET_HAVE_MVE\"\n@@ -7705,7 +7705,7 @@\n  [(set (match_operand:V2DI 0 \"s_register_operand\" \"=&w\")\n        (unspec:V2DI [(match_operand:V2DI 1 \"memory_operand\" \"Us\")\n \t\t     (match_operand:V2DI 2 \"s_register_operand\" \"w\")\n-\t\t     (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t\t     (match_operand:V2QI 3 \"vpr_register_operand\" \"Up\")]\n \tVLDRDGOQ))\n  ]\n  \"TARGET_HAVE_MVE\"\n@@ -7746,7 +7746,7 @@\n   [(set (match_operand:V2DI 0 \"s_register_operand\" \"=&w\")\n \t(unspec:V2DI [(match_operand:V2DI 1 \"memory_operand\" \"Us\")\n \t\t      (match_operand:V2DI 2 \"s_register_operand\" \"w\")\n-\t\t      (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t\t      (match_operand:V2QI 3 \"vpr_register_operand\" \"Up\")]\n \t VLDRDGSOQ))\n   ]\n   \"TARGET_HAVE_MVE\"\n@@ -8364,7 +8364,7 @@\n \t\t[(match_operand:V2DI 0 \"s_register_operand\" \"w\")\n \t\t (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n \t\t (match_operand:V2DI 2 \"s_register_operand\" \"w\")\n-\t\t (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t\t (match_operand:V2QI 3 \"vpr_register_operand\" \"Up\")]\n \t VSTRDSBQ))\n   ]\n   \"TARGET_HAVE_MVE\"\n@@ -8407,7 +8407,7 @@\n   [(match_operand:V2DI 0 \"mve_scatter_memory\")\n    (match_operand:V2DI 1 \"s_register_operand\")\n    (match_operand:V2DI 2 \"s_register_operand\")\n-   (match_operand:HI 3 \"vpr_register_operand\")\n+   (match_operand:V2QI 3 \"vpr_register_operand\")\n    (unspec:V4SI [(const_int 0)] VSTRDSOQ)]\n   \"TARGET_HAVE_MVE\"\n {\n@@ -8425,7 +8425,7 @@\n \t  [(match_operand:SI 0 \"register_operand\" \"r\")\n \t   (match_operand:V2DI 1 \"s_register_operand\" \"w\")\n \t   (match_operand:V2DI 2 \"s_register_operand\" \"w\")\n-\t   (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t   (match_operand:V2QI 3 \"vpr_register_operand\" \"Up\")]\n \t  VSTRDSOQ))]\n   \"TARGET_HAVE_MVE\"\n   \"vpst\\;vstrdt.64\\t%q2, [%0, %q1]\"\n@@ -8466,7 +8466,7 @@\n   [(match_operand:V2DI 0 \"mve_scatter_memory\")\n    (match_operand:V2DI 1 \"s_register_operand\")\n    (match_operand:V2DI 2 \"s_register_operand\")\n-   (match_operand:HI 3 \"vpr_register_operand\")\n+   (match_operand:V2QI 3 \"vpr_register_operand\")\n    (unspec:V4SI [(const_int 0)] VSTRDSSOQ)]\n   \"TARGET_HAVE_MVE\"\n {\n@@ -8485,7 +8485,7 @@\n \t  [(match_operand:SI 0 \"register_operand\" \"r\")\n \t   (match_operand:V2DI 1 \"s_register_operand\" \"w\")\n \t   (match_operand:V2DI 2 \"s_register_operand\" \"w\")\n-\t   (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t   (match_operand:V2QI 3 \"vpr_register_operand\" \"Up\")]\n \t  VSTRDSSOQ))]\n   \"TARGET_HAVE_MVE\"\n   \"vpst\\;vstrdt.64\\t%q2, [%0, %q1, UXTW #3]\"\n@@ -9457,7 +9457,7 @@\n \t\t[(match_operand:V2DI 1 \"s_register_operand\" \"0\")\n \t\t (match_operand:SI 2 \"mve_vldrd_immediate\" \"Ri\")\n \t\t (match_operand:V2DI 3 \"s_register_operand\" \"w\")\n-\t\t (match_operand:HI 4 \"vpr_register_operand\")]\n+\t\t (match_operand:V2QI 4 \"vpr_register_operand\")]\n \t VSTRDSBWBQ))\n    (set (match_operand:V2DI 0 \"s_register_operand\" \"=w\")\n \t(unspec:V2DI [(match_dup 1) (match_dup 2)]\n@@ -9748,7 +9748,7 @@\n   [(match_operand:V2DI 0 \"s_register_operand\")\n    (match_operand:V2DI 1 \"s_register_operand\")\n    (match_operand:SI 2 \"mve_vldrd_immediate\")\n-   (match_operand:HI 3 \"vpr_register_operand\")\n+   (match_operand:V2QI 3 \"vpr_register_operand\")\n    (unspec:V2DI [(const_int 0)] VLDRDGBWBQ)]\n   \"TARGET_HAVE_MVE\"\n {\n@@ -9764,7 +9764,7 @@\n   [(match_operand:V2DI 0 \"s_register_operand\")\n    (match_operand:V2DI 1 \"s_register_operand\")\n    (match_operand:SI 2 \"mve_vldrd_immediate\")\n-   (match_operand:HI 3 \"vpr_register_operand\")\n+   (match_operand:V2QI 3 \"vpr_register_operand\")\n    (unspec:V2DI [(const_int 0)] VLDRDGBWBQ)]\n   \"TARGET_HAVE_MVE\"\n {\n@@ -9798,7 +9798,7 @@\n   [(set (match_operand:V2DI 0 \"s_register_operand\" \"=&w\")\n \t(unspec:V2DI [(match_operand:V2DI 2 \"s_register_operand\" \"1\")\n \t\t      (match_operand:SI 3 \"mve_vldrd_immediate\" \"Ri\")\n-\t\t      (match_operand:HI 4 \"vpr_register_operand\" \"Up\")\n+\t\t      (match_operand:V2QI 4 \"vpr_register_operand\" \"Up\")\n \t\t      (mem:BLK (scratch))]\n \t VLDRDGBWBQ))\n    (set (match_operand:V2DI 1 \"s_register_operand\" \"=&w\")"}, {"sha": "84384ee798de363b874c41a16dc5daae34eccb94", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=e0bc13d396002f88b8c27e3a23c7eaee54d379d5", "patch": "@@ -579,10 +579,8 @@\n   VCVTMQ_S\n   VCVTMQ_U\n   VADDLVQ_U\n-  VCTP8Q\n-  VCTP16Q\n-  VCTP32Q\n-  VCTP64Q\n+  VCTP\n+  VCTP_M\n   VPNOT\n   VCREATEQ_F\n   VCVTQ_N_TO_F_S\n@@ -706,10 +704,6 @@\n   VADDLVAQ_S\n   VBICQ_N_U\n   VBICQ_N_S\n-  VCTP8Q_M\n-  VCTP16Q_M\n-  VCTP32Q_M\n-  VCTP64Q_M\n   VCVTBQ_F16_F32\n   VCVTTQ_F16_F32\n   VMLALDAVQ_U"}, {"sha": "f34f35e1185e2b0974df965affb113772ea9282d", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=e0bc13d396002f88b8c27e3a23c7eaee54d379d5", "patch": "@@ -88,7 +88,7 @@\n     case 2:\n       return \"mov%?\\t%0, %1\\t%@ movhi\";\n     case 1:\n-      if (GET_MODE_CLASS (GET_MODE (operands[1])) == MODE_VECTOR_BOOL)\n+      if (VALID_MVE_PRED_MODE (<MODE>mode))\n         operands[1] = mve_bool_vec_to_const (operands[1]);\n       else\n         operands[1] = gen_lowpart (HImode, operands[1]);\n@@ -192,7 +192,7 @@\n     case 2:\n       return \"mov%?\\t%0, %1\\t%@ movhi\";\n     case 1:\n-      if (GET_MODE_CLASS (GET_MODE (operands[1])) == MODE_VECTOR_BOOL)\n+      if (VALID_MVE_PRED_MODE (<MODE>mode))\n         operands[1] = mve_bool_vec_to_const (operands[1]);\n       else\n         operands[1] = gen_lowpart (HImode, operands[1]);"}, {"sha": "cb4b45bd30563c536a5cdc08147970e077abbf37", "filename": "gcc/testsuite/gcc.target/arm/mve/pr108443-run.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fpr108443-run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fpr108443-run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fpr108443-run.c?ref=e0bc13d396002f88b8c27e3a23c7eaee54d379d5", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target arm_mve_hw } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+#include \"pr108443.c\"\n+\n+extern void abort (void);\n+\n+void __attribute__ ((noipa)) partial_write_cst (uint32_t *, uint32x4_t);\n+\n+void\n+__attribute__ ((noipa)) partial_write (uint32_t *a, uint32x4_t v, unsigned short p)\n+{\n+  vstrwq_p_u32 (a, v, p);\n+}\n+\n+int main (void)\n+{\n+  unsigned short p = 0x00CC;\n+  uint32_t a[] = {0, 0, 0, 0};\n+  uint32_t b[] = {0, 0, 0, 0};\n+  uint32x4_t v = vdupq_n_u32 (0xFFFFFFFFU);\n+  partial_write_cst (&a[0], v);\n+  partial_write (&b[0], v, p);\n+  if (__builtin_memcmp (&a[0], &b[0], 16) != 0)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "c5fbfa4a1bb72313bd820f5f0859b3f13464e0c3", "filename": "gcc/testsuite/gcc.target/arm/mve/pr108443.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fpr108443.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bc13d396002f88b8c27e3a23c7eaee54d379d5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fpr108443.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fpr108443.c?ref=e0bc13d396002f88b8c27e3a23c7eaee54d379d5", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+#include <arm_mve.h>\n+\n+void\n+__attribute__ ((noipa)) partial_write_cst (uint32_t *a, uint32x4_t v)\n+{\n+  vstrwq_p_u32 (a, v, 0x00CC);\n+}\n+\n+/* { dg-final { scan-assembler {mov\\tr[0-9]+, #204} } } */\n+"}]}