{"sha": "3ca588d3e21439abfa36302defba9aaae83f9860", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NhNTg4ZDNlMjE0MzlhYmZhMzYzMDJkZWZiYTlhYWFlODNmOTg2MA==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@codesourcery.com", "date": "2014-07-07T15:48:23Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@gcc.gnu.org", "date": "2014-07-07T15:48:23Z"}, "message": "rs6000.c (output_vec_const_move): Handle little-endian code generation.\n\n\tgcc/\n\t* config/rs6000/rs6000.c (output_vec_const_move): Handle\n\tlittle-endian code generation.\n\t* config/rs6000/spe.md (spe_evmergehi): Rename to...\n\t(vec_perm00_v2si): ... this.  Handle little-endian code \n\tgeneration.\n\t(spe_evmergehilo): Rename to...\n\t(vec_perm01_v2si): ... this.  Handle little-endian code\n\tgeneration.\n\t(spe_evmergelo): Rename to...\n\t(vec_perm11_v2si): ... this.  Handle little-endian code\n\tgeneration.\n\t(spe_evmergelohi): Rename to...\n\t(vec_perm10_v2si): ... this.  Handle little-endian code\n\tgeneration.\n\t(spe_evmergehi, spe_evmergehilo): New expanders.\n\t(spe_evmergelo, spe_evmergelohi): Likewise.\n\t(*frob_<SPE64:mode>_<DITI:mode>): Handle little-endian code\n\tgeneration.\n\t(*frob_tf_ti): Likewise.\n\t(*frob_<mode>_di_2): Likewise.\n\t(*frob_tf_di_8_2): Likewise.\n\t(*frob_di_<mode>): Likewise.\n\t(*frob_ti_tf): Likewise.\n\t(*frob_<DITI:mode>_<SPE64:mode>_2): Likewise.\n\t(*frob_ti_<mode>_8_2): Likewise.\n\t(*frob_ti_tf_2): Likewise.\n\t(mov_si<mode>_e500_subreg0): Rename to...\n\t(mov_si<mode>_e500_subreg0_be): ... this.  Restrict to the big\n\tendianness only.\n\t(*mov_si<mode>_e500_subreg0_le): New instruction pattern.\n\t(*mov_si<mode>_e500_subreg0_elf_low): Rename to...\n\t(*mov_si<mode>_e500_subreg0_elf_low_be): ... this.  Restrict to \n\tthe big endianness only.\n\t(*mov_si<mode>_e500_subreg0_elf_low_le): New instruction pattern.\n\t(*mov_si<mode>_e500_subreg0_2): Rename to...\n\t(*mov_si<mode>_e500_subreg0_2_be): ... this.  Restrict to the\n\tbig big endianness only.\n\t(*mov_si<mode>_e500_subreg0_2_le): New instruction pattern.\n\t(*mov_si<mode>_e500_subreg4): Rename to...\n\t(*mov_si<mode>_e500_subreg4_be): ... this.  Restrict to the big\n\tendianness only.\n\t(mov_si<mode>_e500_subreg4_le): New instruction pattern.\n\t(*mov_si<mode>_e500_subreg4_elf_low): Rename to...\n\t(*mov_si<mode>_e500_subreg4_elf_low_be): ... this.  Restrict to\n\tthe big endianness only.\n\t(*mov_si<mode>_e500_subreg4_elf_low_le): New instruction/splitter\n\tpattern.\n\t(*mov_si<mode>_e500_subreg4_2): Rename to...\n\t(*mov_si<mode>_e500_subreg4_2_be): ... this.  Restrict to the big\n\tendianness only.\n\t(*mov_si<mode>_e500_subreg4_2_le): New instruction pattern.\n\t(*mov_sitf_e500_subreg8): Rename to...\n\t(*mov_sitf_e500_subreg8_be): ... this.  Restrict to the big\n\tendianness only.\n\t(*mov_sitf_e500_subreg8_le): New instruction pattern.\n\t(*mov_sitf_e500_subreg8_2): Rename to...\n\t(*mov_sitf_e500_subreg8_2_be): ... this.  Restrict to the big\n\tendianness only.\n\t(*mov_sitf_e500_subreg8_2_le): New instruction pattern.\n\t(*mov_sitf_e500_subreg12): Rename to...\n\t(*mov_sitf_e500_subreg12_be): ... this.  Restrict to the big\n\tendianness only.\n\t(*mov_sitf_e500_subreg12_le): New instruction pattern.\n\t(*mov_sitf_e500_subreg12_2): Rename to...\n\t(*mov_sitf_e500_subreg12_2_be): ... this.  Restrict to the big\n\tendianness only.\n\t(*mov_sitf_e500_subreg12_2_le): New instruction pattern.\n\n\tgcc/testsuite/\n\t* gcc.target/powerpc/spe-evmerge.c: New file.\n\nFrom-SVN: r212335", "tree": {"sha": "8324bd8033fe2c94fb06a3c775eac47f21722307", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8324bd8033fe2c94fb06a3c775eac47f21722307"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ca588d3e21439abfa36302defba9aaae83f9860", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ca588d3e21439abfa36302defba9aaae83f9860", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ca588d3e21439abfa36302defba9aaae83f9860", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ca588d3e21439abfa36302defba9aaae83f9860/comments", "author": null, "committer": null, "parents": [{"sha": "e7623929189c96c7e22ec65f3f79cb4987ebd2ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7623929189c96c7e22ec65f3f79cb4987ebd2ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7623929189c96c7e22ec65f3f79cb4987ebd2ed"}], "stats": {"total": 544, "additions": 485, "deletions": 59}, "files": [{"sha": "8eec9325cfbcfc700bb06f2504a8f89529df902b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ca588d3e21439abfa36302defba9aaae83f9860/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ca588d3e21439abfa36302defba9aaae83f9860/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ca588d3e21439abfa36302defba9aaae83f9860", "patch": "@@ -1,3 +1,73 @@\n+2014-07-07  Maciej W. Rozycki  <macro@codesourcery.com>\n+\n+\t* config/rs6000/rs6000.c (output_vec_const_move): Handle\n+\tlittle-endian code generation.\n+\t* config/rs6000/spe.md (spe_evmergehi): Rename to...\n+\t(vec_perm00_v2si): ... this.  Handle little-endian code \n+\tgeneration.\n+\t(spe_evmergehilo): Rename to...\n+\t(vec_perm01_v2si): ... this.  Handle little-endian code\n+\tgeneration.\n+\t(spe_evmergelo): Rename to...\n+\t(vec_perm11_v2si): ... this.  Handle little-endian code\n+\tgeneration.\n+\t(spe_evmergelohi): Rename to...\n+\t(vec_perm10_v2si): ... this.  Handle little-endian code\n+\tgeneration.\n+\t(spe_evmergehi, spe_evmergehilo): New expanders.\n+\t(spe_evmergelo, spe_evmergelohi): Likewise.\n+\t(*frob_<SPE64:mode>_<DITI:mode>): Handle little-endian code\n+\tgeneration.\n+\t(*frob_tf_ti): Likewise.\n+\t(*frob_<mode>_di_2): Likewise.\n+\t(*frob_tf_di_8_2): Likewise.\n+\t(*frob_di_<mode>): Likewise.\n+\t(*frob_ti_tf): Likewise.\n+\t(*frob_<DITI:mode>_<SPE64:mode>_2): Likewise.\n+\t(*frob_ti_<mode>_8_2): Likewise.\n+\t(*frob_ti_tf_2): Likewise.\n+\t(mov_si<mode>_e500_subreg0): Rename to...\n+\t(mov_si<mode>_e500_subreg0_be): ... this.  Restrict to the big\n+\tendianness only.\n+\t(*mov_si<mode>_e500_subreg0_le): New instruction pattern.\n+\t(*mov_si<mode>_e500_subreg0_elf_low): Rename to...\n+\t(*mov_si<mode>_e500_subreg0_elf_low_be): ... this.  Restrict to \n+\tthe big endianness only.\n+\t(*mov_si<mode>_e500_subreg0_elf_low_le): New instruction pattern.\n+\t(*mov_si<mode>_e500_subreg0_2): Rename to...\n+\t(*mov_si<mode>_e500_subreg0_2_be): ... this.  Restrict to the\n+\tbig big endianness only.\n+\t(*mov_si<mode>_e500_subreg0_2_le): New instruction pattern.\n+\t(*mov_si<mode>_e500_subreg4): Rename to...\n+\t(*mov_si<mode>_e500_subreg4_be): ... this.  Restrict to the big\n+\tendianness only.\n+\t(mov_si<mode>_e500_subreg4_le): New instruction pattern.\n+\t(*mov_si<mode>_e500_subreg4_elf_low): Rename to...\n+\t(*mov_si<mode>_e500_subreg4_elf_low_be): ... this.  Restrict to\n+\tthe big endianness only.\n+\t(*mov_si<mode>_e500_subreg4_elf_low_le): New instruction/splitter\n+\tpattern.\n+\t(*mov_si<mode>_e500_subreg4_2): Rename to...\n+\t(*mov_si<mode>_e500_subreg4_2_be): ... this.  Restrict to the big\n+\tendianness only.\n+\t(*mov_si<mode>_e500_subreg4_2_le): New instruction pattern.\n+\t(*mov_sitf_e500_subreg8): Rename to...\n+\t(*mov_sitf_e500_subreg8_be): ... this.  Restrict to the big\n+\tendianness only.\n+\t(*mov_sitf_e500_subreg8_le): New instruction pattern.\n+\t(*mov_sitf_e500_subreg8_2): Rename to...\n+\t(*mov_sitf_e500_subreg8_2_be): ... this.  Restrict to the big\n+\tendianness only.\n+\t(*mov_sitf_e500_subreg8_2_le): New instruction pattern.\n+\t(*mov_sitf_e500_subreg12): Rename to...\n+\t(*mov_sitf_e500_subreg12_be): ... this.  Restrict to the big\n+\tendianness only.\n+\t(*mov_sitf_e500_subreg12_le): New instruction pattern.\n+\t(*mov_sitf_e500_subreg12_2): Rename to...\n+\t(*mov_sitf_e500_subreg12_2_be): ... this.  Restrict to the big\n+\tendianness only.\n+\t(*mov_sitf_e500_subreg12_2_le): New instruction pattern.\n+\n 2014-07-07  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n \n \t* asan.c (instrument_strlen_call): Do not instrument first byte in strlen"}, {"sha": "1c8c9922ed913d762babcbe5ad06798d33893b91", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ca588d3e21439abfa36302defba9aaae83f9860/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ca588d3e21439abfa36302defba9aaae83f9860/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3ca588d3e21439abfa36302defba9aaae83f9860", "patch": "@@ -5300,8 +5300,10 @@ output_vec_const_move (rtx *operands)\n   operands[2] = CONST_VECTOR_ELT (vec, 1);\n   if (cst == cst2)\n     return \"li %0,%1\\n\\tevmergelo %0,%0,%0\";\n-  else\n+  else if (WORDS_BIG_ENDIAN)\n     return \"li %0,%1\\n\\tevmergelo %0,%0,%0\\n\\tli %0,%2\";\n+  else\n+    return \"li %0,%2\\n\\tevmergelo %0,%0,%0\\n\\tli %0,%1\";\n }\n \n /* Initialize TARGET of vector PAIRED to VALS.  */"}, {"sha": "8eec7b71ed3ac84539dc1e34c7ad385716bb5a94", "filename": "gcc/config/rs6000/spe.md", "status": "modified", "additions": 337, "deletions": 58, "changes": 395, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ca588d3e21439abfa36302defba9aaae83f9860/gcc%2Fconfig%2Frs6000%2Fspe.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ca588d3e21439abfa36302defba9aaae83f9860/gcc%2Fconfig%2Frs6000%2Fspe.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fspe.md?ref=3ca588d3e21439abfa36302defba9aaae83f9860", "patch": "@@ -438,51 +438,76 @@\n   [(set_attr \"type\" \"vecload\")\n    (set_attr  \"length\" \"4\")])\n \n-(define_insn \"spe_evmergehi\"\n+;; Integer vector permutation instructions.  The pairs of digits in the\n+;; names of these instructions indicate the indices, in the memory vector\n+;; element ordering, of the vector elements permuted to the output vector\n+;; from the first and the second input vector respectively.\n+\n+(define_insn \"vec_perm00_v2si\"\n   [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n \t(vec_select:V2SI\n \t  (vec_concat:V4SI\n \t    (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n \t    (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n \t  (parallel [(const_int 0) (const_int 2)])))]\n   \"TARGET_SPE\"\n-  \"evmergehi %0,%1,%2\"\n+{\n+  if (WORDS_BIG_ENDIAN)\n+    return \"evmergehi %0,%1,%2\";\n+  else\n+    return \"evmergelo %0,%2,%1\";\n+}\n   [(set_attr \"type\" \"vecsimple\")\n    (set_attr  \"length\" \"4\")])\n \n-(define_insn \"spe_evmergehilo\"\n+(define_insn \"vec_perm01_v2si\"\n   [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n \t(vec_select:V2SI\n \t  (vec_concat:V4SI\n \t    (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n \t    (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n \t  (parallel [(const_int 0) (const_int 3)])))]\n   \"TARGET_SPE\"\n-  \"evmergehilo %0,%1,%2\"\n+{\n+  if (WORDS_BIG_ENDIAN)\n+    return \"evmergehilo %0,%1,%2\";\n+  else\n+    return \"evmergehilo %0,%2,%1\";\n+}\n   [(set_attr \"type\" \"vecsimple\")\n    (set_attr  \"length\" \"4\")])\n \n-(define_insn \"spe_evmergelo\"\n+(define_insn \"vec_perm11_v2si\"\n   [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n \t(vec_select:V2SI\n \t  (vec_concat:V4SI\n \t    (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n \t    (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n \t  (parallel [(const_int 1) (const_int 3)])))]\n   \"TARGET_SPE\"\n-  \"evmergelo %0,%1,%2\"\n+{\n+  if (WORDS_BIG_ENDIAN)\n+    return \"evmergelo %0,%1,%2\";\n+  else\n+    return \"evmergehi %0,%2,%1\";\n+}\n   [(set_attr \"type\" \"vecsimple\")\n    (set_attr  \"length\" \"4\")])\n \n-(define_insn \"spe_evmergelohi\"\n+(define_insn \"vec_perm10_v2si\"\n   [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n \t(vec_select:V2SI\n \t  (vec_concat:V4SI\n \t    (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n \t    (match_operand:V2SI 2 \"gpc_reg_operand\" \"r\"))\n \t  (parallel [(const_int 1) (const_int 2)])))]\n   \"TARGET_SPE\"\n-  \"evmergelohi %0,%1,%2\"\n+{\n+  if (WORDS_BIG_ENDIAN)\n+    return \"evmergelohi %0,%1,%2\";\n+  else\n+    return \"evmergelohi %0,%2,%1\";\n+}\n   [(set_attr \"type\" \"vecsimple\")\n    (set_attr  \"length\" \"4\")])\n \n@@ -499,6 +524,60 @@\n     FAIL;\n })\n \n+(define_expand \"spe_evmergehi\"\n+  [(match_operand:V2SI 0 \"register_operand\" \"\")\n+   (match_operand:V2SI 1 \"register_operand\" \"\")\n+   (match_operand:V2SI 2 \"register_operand\" \"\")]\n+  \"TARGET_SPE\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    emit_insn (gen_vec_perm00_v2si (operands[0], operands[1], operands[2]));\n+  else\n+    emit_insn (gen_vec_perm11_v2si (operands[0], operands[2], operands[1]));\n+  DONE;\n+})\n+\n+(define_expand \"spe_evmergehilo\"\n+  [(match_operand:V2SI 0 \"register_operand\" \"\")\n+   (match_operand:V2SI 1 \"register_operand\" \"\")\n+   (match_operand:V2SI 2 \"register_operand\" \"\")]\n+  \"TARGET_SPE\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    emit_insn (gen_vec_perm01_v2si (operands[0], operands[1], operands[2]));\n+  else\n+    emit_insn (gen_vec_perm01_v2si (operands[0], operands[2], operands[1]));\n+  DONE;\n+})\n+\n+(define_expand \"spe_evmergelo\"\n+  [(match_operand:V2SI 0 \"register_operand\" \"\")\n+   (match_operand:V2SI 1 \"register_operand\" \"\")\n+   (match_operand:V2SI 2 \"register_operand\" \"\")]\n+  \"TARGET_SPE\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    emit_insn (gen_vec_perm11_v2si (operands[0], operands[1], operands[2]));\n+  else\n+    emit_insn (gen_vec_perm00_v2si (operands[0], operands[2], operands[1]));\n+  DONE;\n+})\n+\n+(define_expand \"spe_evmergelohi\"\n+  [(match_operand:V2SI 0 \"register_operand\" \"\")\n+   (match_operand:V2SI 1 \"register_operand\" \"\")\n+   (match_operand:V2SI 2 \"register_operand\" \"\")]\n+  \"TARGET_SPE\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    emit_insn (gen_vec_perm10_v2si (operands[0], operands[1], operands[2]));\n+  else\n+    emit_insn (gen_vec_perm10_v2si (operands[0], operands[2], operands[1]));\n+  DONE;\n+})\n+\n+;; End of integer vector permutation instructions.\n+\n (define_insn \"spe_evnand\"\n   [(set (match_operand:V2SI 0 \"gpc_reg_operand\" \"=r\")\n         (not:V2SI (and:V2SI (match_operand:V2SI 1 \"gpc_reg_operand\" \"r\")\n@@ -2220,47 +2299,95 @@\n         (subreg:SPE64 (match_operand:DITI 1 \"input_operand\" \"r,m\") 0))]\n   \"(TARGET_E500_DOUBLE && <SPE64:MODE>mode == DFmode)\n    || (TARGET_SPE && <SPE64:MODE>mode != DFmode)\"\n-  \"@\n-   evmergelo %0,%1,%L1\n-   evldd%X1 %0,%y1\")\n+{\n+  switch (which_alternative)\n+    {\n+    default:\n+      gcc_unreachable ();\n+    case 0:\n+      if (WORDS_BIG_ENDIAN)\n+\treturn \"evmergelo %0,%1,%L1\";\n+      else\n+\treturn \"evmergelo %0,%L1,%1\";\n+    case 1:\n+      return \"evldd%X1 %0,%y1\";\n+    }\n+})\n \n (define_insn \"*frob_tf_ti\"\n   [(set (match_operand:TF 0 \"gpc_reg_operand\" \"=r\")\n         (subreg:TF (match_operand:TI 1 \"gpc_reg_operand\" \"r\") 0))]\n   \"TARGET_E500_DOUBLE\"\n-  \"evmergelo %0,%1,%L1\\;evmergelo %L0,%Y1,%Z1\"\n+{\n+  if (WORDS_BIG_ENDIAN)\n+    return \"evmergelo %0,%1,%L1\\;evmergelo %L0,%Y1,%Z1\";\n+  else\n+    return \"evmergelo %L0,%Z1,%Y1\\;evmergelo %0,%L1,%1\";\n+}\n   [(set_attr \"length\" \"8\")])\n \n (define_insn \"*frob_<mode>_di_2\"\n   [(set (subreg:DI (match_operand:SPE64TF 0 \"nonimmediate_operand\" \"+&r,r\") 0)\n         (match_operand:DI 1 \"input_operand\" \"r,m\"))]\n   \"(TARGET_E500_DOUBLE && (<MODE>mode == DFmode || <MODE>mode == TFmode))\n    || (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode)\"\n-  \"@\n-   evmergelo %0,%1,%L1\n-   evldd%X1 %0,%y1\")\n+{\n+  switch (which_alternative)\n+    {\n+    default:\n+      gcc_unreachable ();\n+    case 0:\n+      if (WORDS_BIG_ENDIAN)\n+\treturn \"evmergelo %0,%1,%L1\";\n+      else\n+\treturn \"evmergelo %0,%L1,%1\";\n+    case 1:\n+      return \"evldd%X1 %0,%y1\";\n+    }\n+})\n \n (define_insn \"*frob_tf_di_8_2\"\n   [(set (subreg:DI (match_operand:TF 0 \"nonimmediate_operand\" \"+&r,r\") 8)\n         (match_operand:DI 1 \"input_operand\" \"r,m\"))]\n   \"TARGET_E500_DOUBLE\"\n-  \"@\n-   evmergelo %L0,%1,%L1\n-   evldd%X1 %L0,%y1\")\n+{\n+  switch (which_alternative)\n+    {\n+    default:\n+      gcc_unreachable ();\n+    case 0:\n+      if (WORDS_BIG_ENDIAN)\n+\treturn \"evmergelo %L0,%1,%L1\";\n+      else\n+\treturn \"evmergelo %L0,%L1,%1\";\n+    case 1:\n+      return \"evldd%X1 %L0,%y1\";\n+    }\n+})\n \n (define_insn \"*frob_di_<mode>\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=&r\")\n         (subreg:DI (match_operand:SPE64TF 1 \"input_operand\" \"r\") 0))]\n   \"(TARGET_E500_DOUBLE && (<MODE>mode == DFmode || <MODE>mode == TFmode))\n    || (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode)\"\n-  \"evmergehi %0,%1,%1\\;mr %L0,%1\"\n+{\n+  if (WORDS_BIG_ENDIAN)\n+    return \"evmergehi %0,%1,%1\\;mr %L0,%1\";\n+  else\n+    return \"evmergehi %L0,%1,%1\\;mr %0,%1\";\n+}\n   [(set_attr \"length\" \"8\")])\n \n (define_insn \"*frob_ti_tf\"\n   [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=&r\")\n         (subreg:TI (match_operand:TF 1 \"input_operand\" \"r\") 0))]\n   \"TARGET_E500_DOUBLE\"\n-  \"evmergehi %0,%1,%1\\;mr %L0,%1\\;evmergehi %Y0,%L1,%L1\\;mr %Z0,%L1\"\n+{\n+  if (WORDS_BIG_ENDIAN)\n+    return \"evmergehi %0,%1,%1\\;mr %L0,%1\\;evmergehi %Y0,%L1,%L1\\;mr %Z0,%L1\";\n+  else\n+    return \"evmergehi %Z0,%L1,%L1\\;mr %Y0,%L1\\;evmergehi %L0,%1,%1\\;mr %0,%1\";\n+}\n   [(set_attr \"length\" \"16\")])\n \n (define_insn \"*frob_<DITI:mode>_<SPE64:mode>_2\"\n@@ -2275,22 +2402,40 @@\n     default: \n       gcc_unreachable ();\n     case 0:\n-      return \\\"evmergehi %0,%1,%1\\;mr %L0,%1\\\";\n+      if (WORDS_BIG_ENDIAN)\n+\treturn \\\"evmergehi %0,%1,%1\\;mr %L0,%1\\\";\n+      else\n+\treturn \\\"evmergehi %L0,%1,%1\\;mr %0,%1\\\";\n     case 1:\n       /* If the address is not offsettable we need to load the whole\n \t doubleword into a 64-bit register and then copy the high word\n \t to form the correct output layout.  */\n       if (!offsettable_nonstrict_memref_p (operands[1]))\n-\treturn \\\"evldd%X1 %L0,%y1\\;evmergehi %0,%L0,%L0\\\";\n+\t{\n+\t  if (WORDS_BIG_ENDIAN)\n+\t    return \\\"evldd%X1 %L0,%y1\\;evmergehi %0,%L0,%L0\\\";\n+\t  else\n+\t    return \\\"evldd%X1 %0,%y1\\;evmergehi %L0,%0,%0\\\";\n+\t}\n       /* If the low-address word is used in the address, we must load\n \tit last.  Otherwise, load it first.  Note that we cannot have\n \tauto-increment in that case since the address register is\n \tknown to be dead.  */\n       if (refers_to_regno_p (REGNO (operands[0]), REGNO (operands[0]) + 1,\n \t\t\t     operands[1], 0))\n-\treturn \\\"lwz %L0,%L1\\;lwz %0,%1\\\";\n+\t{\n+\t  if (WORDS_BIG_ENDIAN)\n+\t    return \\\"lwz %L0,%L1\\;lwz %0,%1\\\";\n+\t  else\n+\t    return \\\"lwz %0,%1\\;lwz %L0,%L1\\\";\n+\t}\n       else\n-        return \\\"lwz%U1%X1 %0,%1\\;lwz %L0,%L1\\\";\n+\t{\n+\t  if (WORDS_BIG_ENDIAN)\n+\t    return \\\"lwz%U1%X1 %0,%1\\;lwz %L0,%L1\\\";\n+\t  else\n+\t    return \\\"lwz%U1%X1 %L0,%L1\\;lwz %0,%1\\\";\n+\t}\n     }\n }\"\n   [(set_attr \"length\" \"8,8\")])\n@@ -2308,15 +2453,33 @@\n     default: \n       gcc_unreachable ();\n     case 0:\n-      return \\\"evmergehi %Y0,%1,%1\\;mr %Z0,%1\\\";\n+      if (WORDS_BIG_ENDIAN)\n+\treturn \\\"evmergehi %Y0,%1,%1\\;mr %Z0,%1\\\";\n+      else\n+\treturn \\\"evmergehi %Z0,%1,%1\\;mr %Y0,%1\\\";\n     case 1:\n       if (!offsettable_nonstrict_memref_p (operands[1]))\n-\treturn \\\"evldd%X1 %Z0,%y1\\;evmergehi %Y0,%Z0,%Z0\\\";\n+\t{\n+\t  if (WORDS_BIG_ENDIAN)\n+\t    return \\\"evldd%X1 %Z0,%y1\\;evmergehi %Y0,%Z0,%Z0\\\";\n+\t  else\n+\t    return \\\"evldd%X1 %Y0,%y1\\;evmergehi %Z0,%Y0,%Y0\\\";\n+\t}\n       if (refers_to_regno_p (REGNO (operands[0]), REGNO (operands[0]) + 1,\n \t\t\t     operands[1], 0))\n-\treturn \\\"lwz %Z0,%L1\\;lwz %Y0,%1\\\";\n+\t{\n+\t  if (WORDS_BIG_ENDIAN)\n+\t    return \\\"lwz %Z0,%L1\\;lwz %Y0,%1\\\";\n+\t  else\n+\t    return \\\"lwz %Y0,%1\\;lwz %Z0,%L1\\\";\n+\t}\n       else\n-        return \\\"lwz%U1%X1 %Y0,%1\\;lwz %Z0,%L1\\\";\n+\t{\n+\t  if (WORDS_BIG_ENDIAN)\n+\t    return \\\"lwz%U1%X1 %Y0,%1\\;lwz %Z0,%L1\\\";\n+\t  else\n+\t    return \\\"lwz%U1%X1 %Z0,%L1\\;lwz %Y0,%1\\\";\n+\t}\n     }\n }\"\n   [(set_attr \"length\" \"8,8\")])\n@@ -2325,110 +2488,226 @@\n   [(set (subreg:TF (match_operand:TI 0 \"gpc_reg_operand\" \"=&r\") 0)\n \t(match_operand:TF 1 \"input_operand\" \"r\"))]\n   \"TARGET_E500_DOUBLE\"\n-  \"evmergehi %0,%1,%1\\;mr %L0,%1\\;evmergehi %Y0,%L1,%L1\\;mr %Z0,%L1\"\n+{\n+  if (WORDS_BIG_ENDIAN)\n+    return \"evmergehi %0,%1,%1\\;mr %L0,%1\\;evmergehi %Y0,%L1,%L1\\;mr %Z0,%L1\";\n+  else\n+    return \"evmergehi %Z0,%L1,%L1\\;mr %Y0,%L1\\;evmergehi %L0,%1,%1\\;mr %0,%1\";\n+}\n   [(set_attr \"length\" \"16\")])\n \n-(define_insn \"mov_si<mode>_e500_subreg0\"\n+(define_insn \"mov_si<mode>_e500_subreg0_be\"\n   [(set (subreg:SI (match_operand:SPE64TF 0 \"register_operand\" \"+r,&r\") 0)\n \t(match_operand:SI 1 \"input_operand\" \"r,m\"))]\n-  \"(TARGET_E500_DOUBLE && (<MODE>mode == DFmode || <MODE>mode == TFmode))\n-   || (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode)\"\n+  \"WORDS_BIG_ENDIAN\n+   && ((TARGET_E500_DOUBLE && (<MODE>mode == DFmode || <MODE>mode == TFmode))\n+       || (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode))\"\n   \"@\n    evmergelo %0,%1,%0\n    evmergelohi %0,%0,%0\\;lwz%U1%X1 %0,%1\\;evmergelohi %0,%0,%0\"\n   [(set_attr \"length\" \"4,12\")])\n \n-(define_insn_and_split \"*mov_si<mode>_e500_subreg0_elf_low\"\n+(define_insn \"*mov_si<mode>_e500_subreg0_le\"\n+  [(set (subreg:SI (match_operand:SPE64TF 0 \"register_operand\" \"+r,r\") 0)\n+\t(match_operand:SI 1 \"input_operand\" \"r,m\"))]\n+  \"!WORDS_BIG_ENDIAN\n+   && ((TARGET_E500_DOUBLE && (<MODE>mode == DFmode || <MODE>mode == TFmode))\n+       || (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode))\"\n+  \"@\n+   mr %0,%1\n+   lwz%U1%X1 %0,%1\")\n+\n+(define_insn_and_split \"*mov_si<mode>_e500_subreg0_elf_low_be\"\n   [(set (subreg:SI (match_operand:SPE64TF 0 \"register_operand\" \"+r\") 0)\n \t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t   (match_operand 2 \"\" \"\")))]\n-  \"((TARGET_E500_DOUBLE && (<MODE>mode == DFmode || <MODE>mode == TFmode))\n-    || (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode))\n-   && TARGET_ELF && !TARGET_64BIT && can_create_pseudo_p ()\"\n+  \"WORDS_BIG_ENDIAN\n+   && (((TARGET_E500_DOUBLE && (<MODE>mode == DFmode || <MODE>mode == TFmode))\n+\t|| (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode))\n+       && TARGET_ELF && !TARGET_64BIT && can_create_pseudo_p ())\"\n   \"#\"\n   \"&& 1\"\n   [(pc)]\n {\n   rtx tmp = gen_reg_rtx (SImode);\n   emit_insn (gen_elf_low (tmp, operands[1], operands[2]));\n-  emit_insn (gen_mov_si<mode>_e500_subreg0 (operands[0], tmp));\n+  emit_insn (gen_mov_si<mode>_e500_subreg0_be (operands[0], tmp));\n   DONE;\n }\n   [(set_attr \"length\" \"8\")])\n \n+(define_insn \"*mov_si<mode>_e500_subreg0_elf_low_le\"\n+  [(set (subreg:SI (match_operand:SPE64TF 0 \"register_operand\" \"+r\") 0)\n+\t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t   (match_operand 2 \"\" \"\")))]\n+  \"!WORDS_BIG_ENDIAN\n+   && (((TARGET_E500_DOUBLE && (<MODE>mode == DFmode || <MODE>mode == TFmode))\n+\t|| (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode))\n+       && TARGET_ELF && !TARGET_64BIT)\"\n+  \"addic %0,%1,%K2\")\n+\n ;; ??? Could use evstwwe for memory stores in some cases, depending on\n ;; the offset.\n-(define_insn \"*mov_si<mode>_e500_subreg0_2\"\n+(define_insn \"*mov_si<mode>_e500_subreg0_2_be\"\n   [(set (match_operand:SI 0 \"rs6000_nonimmediate_operand\" \"+r,m\")\n \t(subreg:SI (match_operand:SPE64TF 1 \"register_operand\" \"+r,&r\") 0))]\n-  \"(TARGET_E500_DOUBLE && (<MODE>mode == DFmode || <MODE>mode == TFmode))\n-   || (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode)\"\n+  \"WORDS_BIG_ENDIAN\n+   && ((TARGET_E500_DOUBLE && (<MODE>mode == DFmode || <MODE>mode == TFmode))\n+       || (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode))\"\n   \"@\n    evmergehi %0,%0,%1\n    evmergelohi %1,%1,%1\\;stw%U0%X0 %1,%0\"\n   [(set_attr \"length\" \"4,8\")])\n \n-(define_insn \"*mov_si<mode>_e500_subreg4\"\n+(define_insn \"*mov_si<mode>_e500_subreg0_2_le\"\n+  [(set (match_operand:SI 0 \"rs6000_nonimmediate_operand\" \"+r,m\")\n+\t(subreg:SI (match_operand:SPE64TF 1 \"register_operand\" \"+r,r\") 0))]\n+  \"!WORDS_BIG_ENDIAN\n+   && ((TARGET_E500_DOUBLE && (<MODE>mode == DFmode || <MODE>mode == TFmode))\n+       || (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode))\"\n+  \"@\n+   mr %0,%1\n+   stw%U0%X0 %1,%0\")\n+\n+(define_insn \"*mov_si<mode>_e500_subreg4_be\"\n   [(set (subreg:SI (match_operand:SPE64TF 0 \"register_operand\" \"+r,r\") 4)\n \t(match_operand:SI 1 \"input_operand\" \"r,m\"))]\n-  \"(TARGET_E500_DOUBLE && (<MODE>mode == DFmode || <MODE>mode == TFmode))\n-   || (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode)\"\n+  \"WORDS_BIG_ENDIAN\n+   && ((TARGET_E500_DOUBLE && (<MODE>mode == DFmode || <MODE>mode == TFmode))\n+       || (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode))\"\n   \"@\n    mr %0,%1\n    lwz%U1%X1 %0,%1\")\n \n-(define_insn \"*mov_si<mode>_e500_subreg4_elf_low\"\n+(define_insn \"mov_si<mode>_e500_subreg4_le\"\n+  [(set (subreg:SI (match_operand:SPE64TF 0 \"register_operand\" \"+r,&r\") 4)\n+\t(match_operand:SI 1 \"input_operand\" \"r,m\"))]\n+  \"!WORDS_BIG_ENDIAN\n+   && ((TARGET_E500_DOUBLE && (<MODE>mode == DFmode || <MODE>mode == TFmode))\n+       || (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode))\"\n+  \"@\n+   evmergelo %0,%1,%0\n+   evmergelohi %0,%0,%0\\;lwz%U1%X1 %0,%1\\;evmergelohi %0,%0,%0\"\n+  [(set_attr \"length\" \"4,12\")])\n+\n+(define_insn \"*mov_si<mode>_e500_subreg4_elf_low_be\"\n   [(set (subreg:SI (match_operand:SPE64TF 0 \"register_operand\" \"+r\") 4)\n \t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t   (match_operand 2 \"\" \"\")))]\n-  \"((TARGET_E500_DOUBLE && (<MODE>mode == DFmode || <MODE>mode == TFmode))\n-    || (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode))\n-   && TARGET_ELF && !TARGET_64BIT\"\n+  \"WORDS_BIG_ENDIAN\n+   && (((TARGET_E500_DOUBLE && (<MODE>mode == DFmode || <MODE>mode == TFmode))\n+\t|| (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode))\n+       && TARGET_ELF && !TARGET_64BIT)\"\n   \"addic %0,%1,%K2\")\n \n-(define_insn \"*mov_si<mode>_e500_subreg4_2\"\n+(define_insn_and_split \"*mov_si<mode>_e500_subreg4_elf_low_le\"\n+  [(set (subreg:SI (match_operand:SPE64TF 0 \"register_operand\" \"+r\") 4)\n+\t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t   (match_operand 2 \"\" \"\")))]\n+  \"!WORDS_BIG_ENDIAN\n+   && (((TARGET_E500_DOUBLE && (<MODE>mode == DFmode || <MODE>mode == TFmode))\n+\t|| (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode))\n+       && TARGET_ELF && !TARGET_64BIT && can_create_pseudo_p ())\"\n+  \"#\"\n+  \"&& 1\"\n+  [(pc)]\n+{\n+  rtx tmp = gen_reg_rtx (SImode);\n+  emit_insn (gen_elf_low (tmp, operands[1], operands[2]));\n+  emit_insn (gen_mov_si<mode>_e500_subreg4_le (operands[0], tmp));\n+  DONE;\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+(define_insn \"*mov_si<mode>_e500_subreg4_2_be\"\n   [(set (match_operand:SI 0 \"rs6000_nonimmediate_operand\" \"+r,m\")\n \t(subreg:SI (match_operand:SPE64TF 1 \"register_operand\" \"r,r\") 4))]\n-  \"(TARGET_E500_DOUBLE && (<MODE>mode == DFmode || <MODE>mode == TFmode))\n-   || (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode)\"\n+  \"WORDS_BIG_ENDIAN\n+   && ((TARGET_E500_DOUBLE && (<MODE>mode == DFmode || <MODE>mode == TFmode))\n+       || (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode))\"\n   \"@\n    mr %0,%1\n    stw%U0%X0 %1,%0\")\n \n-(define_insn \"*mov_sitf_e500_subreg8\"\n+(define_insn \"*mov_si<mode>_e500_subreg4_2_le\"\n+  [(set (match_operand:SI 0 \"rs6000_nonimmediate_operand\" \"+r,m\")\n+\t(subreg:SI (match_operand:SPE64TF 1 \"register_operand\" \"+r,&r\") 4))]\n+  \"!WORDS_BIG_ENDIAN\n+   && ((TARGET_E500_DOUBLE && (<MODE>mode == DFmode || <MODE>mode == TFmode))\n+       || (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode))\"\n+  \"@\n+   evmergehi %0,%0,%1\n+   evmergelohi %1,%1,%1\\;stw%U0%X0 %1,%0\"\n+  [(set_attr \"length\" \"4,8\")])\n+\n+(define_insn \"*mov_sitf_e500_subreg8_be\"\n   [(set (subreg:SI (match_operand:TF 0 \"register_operand\" \"+r,&r\") 8)\n \t(match_operand:SI 1 \"input_operand\" \"r,m\"))]\n-  \"TARGET_E500_DOUBLE\"\n+  \"WORDS_BIG_ENDIAN && TARGET_E500_DOUBLE\"\n   \"@\n    evmergelo %L0,%1,%L0\n    evmergelohi %L0,%L0,%L0\\;lwz%U1%X1 %L0,%1\\;evmergelohi %L0,%L0,%L0\"\n   [(set_attr \"length\" \"4,12\")])\n \n-(define_insn \"*mov_sitf_e500_subreg8_2\"\n+(define_insn \"*mov_sitf_e500_subreg8_le\"\n+  [(set (subreg:SI (match_operand:TF 0 \"register_operand\" \"+r,r\") 8)\n+\t(match_operand:SI 1 \"input_operand\" \"r,m\"))]\n+  \"!WORDS_BIG_ENDIAN && TARGET_E500_DOUBLE\"\n+  \"@\n+   mr %L0,%1\n+   lwz%U1%X1 %L0,%1\")\n+\n+(define_insn \"*mov_sitf_e500_subreg8_2_be\"\n   [(set (match_operand:SI 0 \"rs6000_nonimmediate_operand\" \"+r,m\")\n \t(subreg:SI (match_operand:TF 1 \"register_operand\" \"+r,&r\") 8))]\n-  \"TARGET_E500_DOUBLE\"\n+  \"WORDS_BIG_ENDIAN && TARGET_E500_DOUBLE\"\n   \"@\n    evmergehi %0,%0,%L1\n    evmergelohi %L1,%L1,%L1\\;stw%U0%X0 %L1,%0\"\n   [(set_attr \"length\" \"4,8\")])\n \n-(define_insn \"*mov_sitf_e500_subreg12\"\n+(define_insn \"*mov_sitf_e500_subreg8_2_le\"\n+  [(set (match_operand:SI 0 \"rs6000_nonimmediate_operand\" \"+r,m\")\n+\t(subreg:SI (match_operand:TF 1 \"register_operand\" \"r,r\") 8))]\n+  \"!WORDS_BIG_ENDIAN && TARGET_E500_DOUBLE\"\n+  \"@\n+   mr %0,%L1\n+   stw%U0%X0 %L1,%0\")\n+\n+(define_insn \"*mov_sitf_e500_subreg12_be\"\n   [(set (subreg:SI (match_operand:TF 0 \"register_operand\" \"+r,r\") 12)\n \t(match_operand:SI 1 \"input_operand\" \"r,m\"))]\n-  \"TARGET_E500_DOUBLE\"\n+  \"WORDS_BIG_ENDIAN && TARGET_E500_DOUBLE\"\n   \"@\n    mr %L0,%1\n    lwz%U1%X1 %L0,%1\")\n \n-(define_insn \"*mov_sitf_e500_subreg12_2\"\n+(define_insn \"*mov_sitf_e500_subreg12_le\"\n+  [(set (subreg:SI (match_operand:TF 0 \"register_operand\" \"+r,&r\") 12)\n+\t(match_operand:SI 1 \"input_operand\" \"r,m\"))]\n+  \"!WORDS_BIG_ENDIAN && TARGET_E500_DOUBLE\"\n+  \"@\n+   evmergelo %L0,%1,%L0\n+   evmergelohi %L0,%L0,%L0\\;lwz%U1%X1 %L0,%1\\;evmergelohi %L0,%L0,%L0\"\n+  [(set_attr \"length\" \"4,12\")])\n+\n+(define_insn \"*mov_sitf_e500_subreg12_2_be\"\n   [(set (match_operand:SI 0 \"rs6000_nonimmediate_operand\" \"+r,m\")\n \t(subreg:SI (match_operand:TF 1 \"register_operand\" \"r,r\") 12))]\n-  \"TARGET_E500_DOUBLE\"\n+  \"WORDS_BIG_ENDIAN && TARGET_E500_DOUBLE\"\n   \"@\n    mr %0,%L1\n    stw%U0%X0 %L1,%0\")\n \n+(define_insn \"*mov_sitf_e500_subreg12_2_le\"\n+  [(set (match_operand:SI 0 \"rs6000_nonimmediate_operand\" \"+r,m\")\n+\t(subreg:SI (match_operand:TF 1 \"register_operand\" \"+r,&r\") 12))]\n+  \"!WORDS_BIG_ENDIAN && TARGET_E500_DOUBLE\"\n+  \"@\n+   evmergehi %0,%0,%L1\n+   evmergelohi %L1,%L1,%L1\\;stw%U0%X0 %L1,%0\"\n+  [(set_attr \"length\" \"4,8\")])\n+\n ;; FIXME: Allow r=CONST0.\n (define_insn \"*movdf_e500_double\"\n   [(set (match_operand:DF 0 \"rs6000_nonimmediate_operand\" \"=r,r,m\")"}, {"sha": "62b13fcf5f495b562ef66e25eabe6d2fa20f9a17", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ca588d3e21439abfa36302defba9aaae83f9860/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ca588d3e21439abfa36302defba9aaae83f9860/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ca588d3e21439abfa36302defba9aaae83f9860", "patch": "@@ -1,3 +1,7 @@\n+2014-07-07  Maciej W. Rozycki  <macro@codesourcery.com>\n+\n+\t* gcc.target/powerpc/spe-evmerge.c: New file.\n+\n 2014-07-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/cpp0x/override1.C: Tweak expected error messages."}, {"sha": "df0a33e40095f76659c2ecb3f7b289d838bb219c", "filename": "gcc/testsuite/gcc.target/powerpc/spe-evmerge.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ca588d3e21439abfa36302defba9aaae83f9860/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe-evmerge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ca588d3e21439abfa36302defba9aaae83f9860/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe-evmerge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe-evmerge.c?ref=3ca588d3e21439abfa36302defba9aaae83f9860", "patch": "@@ -0,0 +1,71 @@\n+/* Verify SPE vector permute builtins.  */\n+/* { dg-do run { target { powerpc*-*-* && powerpc_spe } } } */\n+/* Remove `-ansi' from options so that <spe.h> compiles.  */\n+/* { dg-options \"\" } */\n+\n+#include <spe.h>\n+#include <stdlib.h>\n+\n+#define vector __attribute__ ((vector_size (8)))\n+\n+#define WORDS_BIG_ENDIAN (__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)\n+\n+int\n+main (void)\n+{\n+  vector int a = { 0x11111111, 0x22222222 };\n+  vector int b = { 0x33333333, 0x44444444 };\n+  vector int c;\n+\n+  /* c[hi] = a[hi], c[lo] = b[hi]  */\n+  c = __ev_mergehi (a, b);\n+  if (c[0] != (WORDS_BIG_ENDIAN ? 0x11111111 : 0x44444444))\n+    abort ();\n+  if (c[1] != (WORDS_BIG_ENDIAN ? 0x33333333 : 0x22222222))\n+    abort ();\n+  /* c[hi] = a[lo], c[lo] = b[lo]  */\n+  c = __ev_mergelo (a, b);\n+  if (c[0] != (WORDS_BIG_ENDIAN ? 0x22222222 : 0x33333333))\n+    abort ();\n+  if (c[1] != (WORDS_BIG_ENDIAN ? 0x44444444 : 0x11111111))\n+    abort ();\n+  /* c[hi] = a[lo], c[lo] = b[hi]  */\n+  c = __ev_mergelohi (a, b);\n+  if (c[0] != (WORDS_BIG_ENDIAN ? 0x22222222 : 0x44444444))\n+    abort ();\n+  if (c[1] != (WORDS_BIG_ENDIAN ? 0x33333333 : 0x11111111))\n+    abort ();\n+  /* c[hi] = a[hi], c[lo] = b[lo]  */\n+  c = __ev_mergehilo (a, b);\n+  if (c[0] != (WORDS_BIG_ENDIAN ? 0x11111111 : 0x33333333))\n+    abort ();\n+  if (c[1] != (WORDS_BIG_ENDIAN ? 0x44444444 : 0x22222222))\n+    abort ();\n+\n+  /* c[hi] = a[hi], c[lo] = b[hi]  */\n+  c = __builtin_spe_evmergehi (a, b);\n+  if (c[0] != (WORDS_BIG_ENDIAN ? 0x11111111 : 0x44444444))\n+    abort ();\n+  if (c[1] != (WORDS_BIG_ENDIAN ? 0x33333333 : 0x22222222))\n+    abort ();\n+  /* c[hi] = a[lo], c[lo] = b[lo]  */\n+  c = __builtin_spe_evmergelo (a, b);\n+  if (c[0] != (WORDS_BIG_ENDIAN ? 0x22222222 : 0x33333333))\n+    abort ();\n+  if (c[1] != (WORDS_BIG_ENDIAN ? 0x44444444 : 0x11111111))\n+    abort ();\n+  /* c[hi] = a[lo], c[lo] = b[hi]  */\n+  c = __builtin_spe_evmergelohi (a, b);\n+  if (c[0] != (WORDS_BIG_ENDIAN ? 0x22222222 : 0x44444444))\n+    abort ();\n+  if (c[1] != (WORDS_BIG_ENDIAN ? 0x33333333 : 0x11111111))\n+    abort ();\n+  /* c[hi] = a[hi], c[lo] = b[lo]  */\n+  c = __builtin_spe_evmergehilo (a, b);\n+  if (c[0] != (WORDS_BIG_ENDIAN ? 0x11111111 : 0x33333333))\n+    abort ();\n+  if (c[1] != (WORDS_BIG_ENDIAN ? 0x44444444 : 0x22222222))\n+    abort ();\n+\n+  return 0;\n+}"}]}