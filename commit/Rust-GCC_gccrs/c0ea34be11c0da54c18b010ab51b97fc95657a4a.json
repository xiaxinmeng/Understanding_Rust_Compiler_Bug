{"sha": "c0ea34be11c0da54c18b010ab51b97fc95657a4a", "node_id": "C_kwDOANBUbNoAKGMwZWEzNGJlMTFjMGRhNTRjMThiMDEwYWI1MWI5N2ZjOTU2NTdhNGE", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-09T21:57:13Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T07:26:33Z"}, "message": "RISC-V: Add vmerge C API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/vmerge-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge-4.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge_vvm-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge_vvm-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge_vvm-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge_vvm-4.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge_vvm-5.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge_vvm-6.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge_vvm_tu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge_vvm_tu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge_vvm_tu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge_vvm_tu-4.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge_vvm_tu-5.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge_vvm_tu-6.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge_vxm_rv32-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge_vxm_rv32-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge_vxm_rv32-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge_vxm_rv64-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge_vxm_rv64-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge_vxm_rv64-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge_vxm_tu_rv32-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge_vxm_tu_rv32-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge_vxm_tu_rv32-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge_vxm_tu_rv64-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge_vxm_tu_rv64-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vmerge_vxm_tu_rv64-3.c: New test.", "tree": {"sha": "07882279ae116a80db87be84729c9773f0db94f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07882279ae116a80db87be84729c9773f0db94f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0ea34be11c0da54c18b010ab51b97fc95657a4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0ea34be11c0da54c18b010ab51b97fc95657a4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0ea34be11c0da54c18b010ab51b97fc95657a4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0ea34be11c0da54c18b010ab51b97fc95657a4a/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4852c719a1adccf9f6b41d5cb2b542f579b9c06f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4852c719a1adccf9f6b41d5cb2b542f579b9c06f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4852c719a1adccf9f6b41d5cb2b542f579b9c06f"}], "stats": {"total": 5883, "additions": 5883, "deletions": 0}, "files": [{"sha": "8248a0d4d6041b36ba1ab54ee93863a8b8b27357", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge-1.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void *out)\n+{\n+  vbool32_t mask = __riscv_vlm_v_b32 (in + 100, 4);\n+  vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+  vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+  vint32m1_t v3 = __riscv_vmerge_vvm_i32m1 (v2, v2, mask, 4);\n+  vint32m1_t v4 = __riscv_vmerge_vvm_i32m1_tu (v3, v2, v2, mask, 4);\n+  __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+void f2 (void * in, void *out)\n+{\n+  vbool32_t mask = *(vbool32_t*)in;\n+  asm volatile (\"\":::\"memory\");\n+  vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+  vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+  vint32m1_t v3 = __riscv_vmerge_vvm_i32m1 (v2, v2, mask, 4);\n+  vint32m1_t v4 = __riscv_vmerge_vvm_i32m1_tu (v3, v2, v2, mask, 4);\n+  __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 4 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "460699d2652ad2849c1100010bdfcd74ac64ed1d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge-2.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge-2.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void *out, int32_t x)\n+{\n+  vbool32_t mask = __riscv_vlm_v_b32 (in + 100, 4);\n+  vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+  vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+  vint32m1_t v3 = __riscv_vmerge_vxm_i32m1 (v2, -16, mask, 4);\n+  vint32m1_t v4 = __riscv_vmerge_vxm_i32m1_tu (v3, v2, -16, mask, 4);\n+  __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+void f2 (void * in, void *out, int32_t x)\n+{\n+  vbool32_t mask = __riscv_vlm_v_b32 (in + 100, 4);\n+  vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+  vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+  vint32m1_t v3 = __riscv_vmerge_vxm_i32m1 (v2, 15, mask, 4);\n+  vint32m1_t v4 = __riscv_vmerge_vxm_i32m1_tu (v3, v2, 15, mask, 4);\n+  __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+void f3 (void * in, void *out, int32_t x)\n+{\n+  vbool32_t mask = __riscv_vlm_v_b32 (in + 100, 4);\n+  vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+  vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+  vint32m1_t v3 = __riscv_vmerge_vxm_i32m1 (v2, -17, mask, 4);\n+  vint32m1_t v4 = __riscv_vmerge_vxm_i32m1_tu (v3, v2, -17, mask, 4);\n+  __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+void f4 (void * in, void *out, int32_t x)\n+{\n+  vbool32_t mask = __riscv_vlm_v_b32 (in + 100, 4);\n+  vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+  vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+  vint32m1_t v3 = __riscv_vmerge_vxm_i32m1 (v2, 16, mask, 4);\n+  vint32m1_t v4 = __riscv_vmerge_vxm_i32m1_tu (v3, v2, 16, mask, 4);\n+  __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmerge\\.vim\\s+v[0-9]+,\\s*v[0-9]+,\\s*-16,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmerge\\.vim\\s+v[0-9]+,\\s*v[0-9]+,\\s*15,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmerge\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 4 } } */"}, {"sha": "7aaf12d65d1d79b5a460dc1202dc5136cb9aa5ac", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge-3.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge-3.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmerge_vxm_i64m1 (v2, -16, mask, 4);\n+  vint64m1_t v4 = __riscv_vmerge_vxm_i64m1 (v3, -16, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmerge_vxm_i64m1 (v2, 15, mask, 4);\n+  vint64m1_t v4 = __riscv_vmerge_vxm_i64m1 (v3, 15, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmerge_vxm_i64m1 (v2, -17, mask, 4);\n+  vint64m1_t v4 = __riscv_vmerge_vxm_i64m1 (v3, -17, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmerge_vxm_i64m1 (v2, 16, mask, 4);\n+  vint64m1_t v4 = __riscv_vmerge_vxm_i64m1 (v3, 16, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmerge_vxm_i64m1 (v2, 0xAAAAAAAA, mask, 4);\n+  vint64m1_t v4 = __riscv_vmerge_vxm_i64m1 (v3, 0xAAAAAAAA, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmerge_vxm_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, mask, 4);\n+  vint64m1_t v4 = __riscv_vmerge_vxm_i64m1 (v3, 0xAAAAAAAAAAAAAAAA, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmerge_vxm_i64m1 (v2, x, mask, 4);\n+  vint64m1_t v4 = __riscv_vmerge_vxm_i64m1 (v3, x, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmerge\\.vim\\s+v[0-9]+,\\s*v[0-9]+,\\s*-16,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmerge\\.vim\\s+v[0-9]+,\\s*v[0-9]+,\\s*15,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmerge\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 10 } } */"}, {"sha": "0db880a00842fbf6ee5071d49662d1d1c7c075d0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge-4.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge-4.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmerge_vxm_i64m1 (v2, -16, mask, 4);\n+  vint64m1_t v4 = __riscv_vmerge_vxm_i64m1 (v3, -16, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmerge_vxm_i64m1 (v2, 15, mask, 4);\n+  vint64m1_t v4 = __riscv_vmerge_vxm_i64m1 (v3, 15, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmerge_vxm_i64m1 (v2, -17, mask, 4);\n+  vint64m1_t v4 = __riscv_vmerge_vxm_i64m1 (v3, -17, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmerge_vxm_i64m1 (v2, 16, mask, 4);\n+  vint64m1_t v4 = __riscv_vmerge_vxm_i64m1 (v3, 16, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmerge_vxm_i64m1 (v2, 0xAAAAAAA, mask, 4);\n+  vint64m1_t v4 = __riscv_vmerge_vxm_i64m1 (v3, 0xAAAAAAA, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmerge_vxm_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, mask, 4);\n+  vint64m1_t v4 = __riscv_vmerge_vxm_i64m1 (v3, 0xAAAAAAAAAAAAAAAA, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmerge_vxm_i64m1 (v2, x, mask, 4);\n+  vint64m1_t v4 = __riscv_vmerge_vxm_i64m1 (v3, x, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmerge\\.vim\\s+v[0-9]+,\\s*v[0-9]+,\\s*-16,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmerge\\.vim\\s+v[0-9]+,\\s*v[0-9]+,\\s*15,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmerge\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 6 } } */\n+/* { dg-final { scan-assembler-times {vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 4 } } */"}, {"sha": "5186164680ebe38df22cd8d5428e847d94d25bc5", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge_vvm-1.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-1.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vfloat32mf2_t test___riscv_vmerge_vvm_f32mf2(vfloat32mf2_t op1,vfloat32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32mf2(op1,op2,selector,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vmerge_vvm_f32m1(vfloat32m1_t op1,vfloat32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32m1(op1,op2,selector,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vmerge_vvm_f32m2(vfloat32m2_t op1,vfloat32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32m2(op1,op2,selector,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vmerge_vvm_f32m4(vfloat32m4_t op1,vfloat32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32m4(op1,op2,selector,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vmerge_vvm_f32m8(vfloat32m8_t op1,vfloat32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32m8(op1,op2,selector,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vmerge_vvm_f64m1(vfloat64m1_t op1,vfloat64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f64m1(op1,op2,selector,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vmerge_vvm_f64m2(vfloat64m2_t op1,vfloat64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f64m2(op1,op2,selector,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vmerge_vvm_f64m4(vfloat64m4_t op1,vfloat64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f64m4(op1,op2,selector,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vmerge_vvm_f64m8(vfloat64m8_t op1,vfloat64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f64m8(op1,op2,selector,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "a080e26d5d89c65b8e58ed6b61e43cb402f0cefd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge_vvm-2.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-2.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vfloat32mf2_t test___riscv_vmerge_vvm_f32mf2(vfloat32mf2_t op1,vfloat32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32mf2(op1,op2,selector,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vmerge_vvm_f32m1(vfloat32m1_t op1,vfloat32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32m1(op1,op2,selector,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vmerge_vvm_f32m2(vfloat32m2_t op1,vfloat32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32m2(op1,op2,selector,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vmerge_vvm_f32m4(vfloat32m4_t op1,vfloat32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32m4(op1,op2,selector,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vmerge_vvm_f32m8(vfloat32m8_t op1,vfloat32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32m8(op1,op2,selector,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vmerge_vvm_f64m1(vfloat64m1_t op1,vfloat64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f64m1(op1,op2,selector,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vmerge_vvm_f64m2(vfloat64m2_t op1,vfloat64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f64m2(op1,op2,selector,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vmerge_vvm_f64m4(vfloat64m4_t op1,vfloat64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f64m4(op1,op2,selector,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vmerge_vvm_f64m8(vfloat64m8_t op1,vfloat64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f64m8(op1,op2,selector,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "8a4b56f36bb167a93f51917fedbb4ba8eebd4e5a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge_vvm-3.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-3.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vfloat32mf2_t test___riscv_vmerge_vvm_f32mf2(vfloat32mf2_t op1,vfloat32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32mf2(op1,op2,selector,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vmerge_vvm_f32m1(vfloat32m1_t op1,vfloat32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32m1(op1,op2,selector,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vmerge_vvm_f32m2(vfloat32m2_t op1,vfloat32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32m2(op1,op2,selector,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vmerge_vvm_f32m4(vfloat32m4_t op1,vfloat32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32m4(op1,op2,selector,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vmerge_vvm_f32m8(vfloat32m8_t op1,vfloat32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32m8(op1,op2,selector,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vmerge_vvm_f64m1(vfloat64m1_t op1,vfloat64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f64m1(op1,op2,selector,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vmerge_vvm_f64m2(vfloat64m2_t op1,vfloat64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f64m2(op1,op2,selector,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vmerge_vvm_f64m4(vfloat64m4_t op1,vfloat64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f64m4(op1,op2,selector,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vmerge_vvm_f64m8(vfloat64m8_t op1,vfloat64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f64m8(op1,op2,selector,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "de77b2c8757312ccd992a522d6d71ea3e4502d86", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge_vvm-4.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-4.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_vvm_i8mf8(vint8mf8_t op1,vint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8mf8(op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_vvm_i8mf4(vint8mf4_t op1,vint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8mf4(op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_vvm_i8mf2(vint8mf2_t op1,vint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8mf2(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_vvm_i8m1(vint8m1_t op1,vint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8m1(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_vvm_i8m2(vint8m2_t op1,vint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8m2(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_vvm_i8m4(vint8m4_t op1,vint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8m4(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_vvm_i8m8(vint8m8_t op1,vint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8m8(op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_vvm_i16mf4(vint16mf4_t op1,vint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16mf4(op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_vvm_i16mf2(vint16mf2_t op1,vint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16mf2(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_vvm_i16m1(vint16m1_t op1,vint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16m1(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_vvm_i16m2(vint16m2_t op1,vint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16m2(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_vvm_i16m4(vint16m4_t op1,vint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16m4(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_vvm_i16m8(vint16m8_t op1,vint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16m8(op1,op2,selector,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_vvm_i32mf2(vint32mf2_t op1,vint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32mf2(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_vvm_i32m1(vint32m1_t op1,vint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32m1(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_vvm_i32m2(vint32m2_t op1,vint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32m2(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_vvm_i32m4(vint32m4_t op1,vint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32m4(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_vvm_i32m8(vint32m8_t op1,vint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32m8(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_vvm_i64m1(vint64m1_t op1,vint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i64m1(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_vvm_i64m2(vint64m2_t op1,vint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i64m2(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_vvm_i64m4(vint64m4_t op1,vint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i64m4(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_vvm_i64m8(vint64m8_t op1,vint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i64m8(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_vvm_u8mf8(vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8mf8(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_vvm_u8mf4(vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8mf4(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_vvm_u8mf2(vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8mf2(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_vvm_u8m1(vuint8m1_t op1,vuint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8m1(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_vvm_u8m2(vuint8m2_t op1,vuint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8m2(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_vvm_u8m4(vuint8m4_t op1,vuint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8m4(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_vvm_u8m8(vuint8m8_t op1,vuint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8m8(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_vvm_u16mf4(vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16mf4(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_vvm_u16mf2(vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16mf2(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_vvm_u16m1(vuint16m1_t op1,vuint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16m1(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_vvm_u16m2(vuint16m2_t op1,vuint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16m2(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_vvm_u16m4(vuint16m4_t op1,vuint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16m4(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_vvm_u16m8(vuint16m8_t op1,vuint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16m8(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_vvm_u32mf2(vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32mf2(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_vvm_u32m1(vuint32m1_t op1,vuint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32m1(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_vvm_u32m2(vuint32m2_t op1,vuint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32m2(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_vvm_u32m4(vuint32m4_t op1,vuint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32m4(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_vvm_u32m8(vuint32m8_t op1,vuint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32m8(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_vvm_u64m1(vuint64m1_t op1,vuint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u64m1(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_vvm_u64m2(vuint64m2_t op1,vuint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u64m2(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_vvm_u64m4(vuint64m4_t op1,vuint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u64m4(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_vvm_u64m8(vuint64m8_t op1,vuint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u64m8(op1,op2,selector,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "3c11c7f0f987a6418476d1ddc685fd254dc03a0a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge_vvm-5.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-5.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_vvm_i8mf8(vint8mf8_t op1,vint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8mf8(op1,op2,selector,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_vvm_i8mf4(vint8mf4_t op1,vint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8mf4(op1,op2,selector,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_vvm_i8mf2(vint8mf2_t op1,vint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8mf2(op1,op2,selector,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_vvm_i8m1(vint8m1_t op1,vint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8m1(op1,op2,selector,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_vvm_i8m2(vint8m2_t op1,vint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8m2(op1,op2,selector,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_vvm_i8m4(vint8m4_t op1,vint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8m4(op1,op2,selector,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_vvm_i8m8(vint8m8_t op1,vint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8m8(op1,op2,selector,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_vvm_i16mf4(vint16mf4_t op1,vint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16mf4(op1,op2,selector,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_vvm_i16mf2(vint16mf2_t op1,vint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16mf2(op1,op2,selector,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_vvm_i16m1(vint16m1_t op1,vint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16m1(op1,op2,selector,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_vvm_i16m2(vint16m2_t op1,vint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16m2(op1,op2,selector,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_vvm_i16m4(vint16m4_t op1,vint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16m4(op1,op2,selector,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_vvm_i16m8(vint16m8_t op1,vint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16m8(op1,op2,selector,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_vvm_i32mf2(vint32mf2_t op1,vint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32mf2(op1,op2,selector,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_vvm_i32m1(vint32m1_t op1,vint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32m1(op1,op2,selector,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_vvm_i32m2(vint32m2_t op1,vint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32m2(op1,op2,selector,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_vvm_i32m4(vint32m4_t op1,vint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32m4(op1,op2,selector,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_vvm_i32m8(vint32m8_t op1,vint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32m8(op1,op2,selector,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_vvm_i64m1(vint64m1_t op1,vint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i64m1(op1,op2,selector,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_vvm_i64m2(vint64m2_t op1,vint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i64m2(op1,op2,selector,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_vvm_i64m4(vint64m4_t op1,vint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i64m4(op1,op2,selector,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_vvm_i64m8(vint64m8_t op1,vint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i64m8(op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_vvm_u8mf8(vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8mf8(op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_vvm_u8mf4(vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8mf4(op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_vvm_u8mf2(vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8mf2(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_vvm_u8m1(vuint8m1_t op1,vuint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8m1(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_vvm_u8m2(vuint8m2_t op1,vuint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8m2(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_vvm_u8m4(vuint8m4_t op1,vuint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8m4(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_vvm_u8m8(vuint8m8_t op1,vuint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8m8(op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_vvm_u16mf4(vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16mf4(op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_vvm_u16mf2(vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16mf2(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_vvm_u16m1(vuint16m1_t op1,vuint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16m1(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_vvm_u16m2(vuint16m2_t op1,vuint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16m2(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_vvm_u16m4(vuint16m4_t op1,vuint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16m4(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_vvm_u16m8(vuint16m8_t op1,vuint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16m8(op1,op2,selector,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_vvm_u32mf2(vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32mf2(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_vvm_u32m1(vuint32m1_t op1,vuint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32m1(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_vvm_u32m2(vuint32m2_t op1,vuint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32m2(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_vvm_u32m4(vuint32m4_t op1,vuint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32m4(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_vvm_u32m8(vuint32m8_t op1,vuint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32m8(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_vvm_u64m1(vuint64m1_t op1,vuint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u64m1(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_vvm_u64m2(vuint64m2_t op1,vuint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u64m2(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_vvm_u64m4(vuint64m4_t op1,vuint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u64m4(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_vvm_u64m8(vuint64m8_t op1,vuint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u64m8(op1,op2,selector,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "9ac153d5facad38103bcf30a18e93ca031b10aa2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge_vvm-6.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-6.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_vvm_i8mf8(vint8mf8_t op1,vint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8mf8(op1,op2,selector,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_vvm_i8mf4(vint8mf4_t op1,vint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8mf4(op1,op2,selector,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_vvm_i8mf2(vint8mf2_t op1,vint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8mf2(op1,op2,selector,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_vvm_i8m1(vint8m1_t op1,vint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8m1(op1,op2,selector,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_vvm_i8m2(vint8m2_t op1,vint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8m2(op1,op2,selector,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_vvm_i8m4(vint8m4_t op1,vint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8m4(op1,op2,selector,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_vvm_i8m8(vint8m8_t op1,vint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8m8(op1,op2,selector,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_vvm_i16mf4(vint16mf4_t op1,vint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16mf4(op1,op2,selector,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_vvm_i16mf2(vint16mf2_t op1,vint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16mf2(op1,op2,selector,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_vvm_i16m1(vint16m1_t op1,vint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16m1(op1,op2,selector,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_vvm_i16m2(vint16m2_t op1,vint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16m2(op1,op2,selector,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_vvm_i16m4(vint16m4_t op1,vint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16m4(op1,op2,selector,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_vvm_i16m8(vint16m8_t op1,vint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16m8(op1,op2,selector,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_vvm_i32mf2(vint32mf2_t op1,vint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32mf2(op1,op2,selector,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_vvm_i32m1(vint32m1_t op1,vint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32m1(op1,op2,selector,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_vvm_i32m2(vint32m2_t op1,vint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32m2(op1,op2,selector,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_vvm_i32m4(vint32m4_t op1,vint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32m4(op1,op2,selector,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_vvm_i32m8(vint32m8_t op1,vint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32m8(op1,op2,selector,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_vvm_i64m1(vint64m1_t op1,vint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i64m1(op1,op2,selector,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_vvm_i64m2(vint64m2_t op1,vint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i64m2(op1,op2,selector,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_vvm_i64m4(vint64m4_t op1,vint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i64m4(op1,op2,selector,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_vvm_i64m8(vint64m8_t op1,vint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i64m8(op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_vvm_u8mf8(vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8mf8(op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_vvm_u8mf4(vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8mf4(op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_vvm_u8mf2(vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8mf2(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_vvm_u8m1(vuint8m1_t op1,vuint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8m1(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_vvm_u8m2(vuint8m2_t op1,vuint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8m2(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_vvm_u8m4(vuint8m4_t op1,vuint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8m4(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_vvm_u8m8(vuint8m8_t op1,vuint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8m8(op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_vvm_u16mf4(vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16mf4(op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_vvm_u16mf2(vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16mf2(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_vvm_u16m1(vuint16m1_t op1,vuint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16m1(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_vvm_u16m2(vuint16m2_t op1,vuint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16m2(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_vvm_u16m4(vuint16m4_t op1,vuint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16m4(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_vvm_u16m8(vuint16m8_t op1,vuint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16m8(op1,op2,selector,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_vvm_u32mf2(vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32mf2(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_vvm_u32m1(vuint32m1_t op1,vuint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32m1(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_vvm_u32m2(vuint32m2_t op1,vuint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32m2(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_vvm_u32m4(vuint32m4_t op1,vuint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32m4(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_vvm_u32m8(vuint32m8_t op1,vuint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32m8(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_vvm_u64m1(vuint64m1_t op1,vuint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u64m1(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_vvm_u64m2(vuint64m2_t op1,vuint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u64m2(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_vvm_u64m4(vuint64m4_t op1,vuint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u64m4(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_vvm_u64m8(vuint64m8_t op1,vuint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u64m8(op1,op2,selector,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "20a7ac99481d6b5158bbf89cdb923a92c8460530", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge_vvm_tu-1.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-1.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vfloat32mf2_t test___riscv_vmerge_vvm_f32mf2_tu(vfloat32mf2_t merge,vfloat32mf2_t op1,vfloat32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32mf2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vmerge_vvm_f32m1_tu(vfloat32m1_t merge,vfloat32m1_t op1,vfloat32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vmerge_vvm_f32m2_tu(vfloat32m2_t merge,vfloat32m2_t op1,vfloat32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vmerge_vvm_f32m4_tu(vfloat32m4_t merge,vfloat32m4_t op1,vfloat32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vmerge_vvm_f32m8_tu(vfloat32m8_t merge,vfloat32m8_t op1,vfloat32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vmerge_vvm_f64m1_tu(vfloat64m1_t merge,vfloat64m1_t op1,vfloat64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f64m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vmerge_vvm_f64m2_tu(vfloat64m2_t merge,vfloat64m2_t op1,vfloat64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f64m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vmerge_vvm_f64m4_tu(vfloat64m4_t merge,vfloat64m4_t op1,vfloat64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f64m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vmerge_vvm_f64m8_tu(vfloat64m8_t merge,vfloat64m8_t op1,vfloat64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f64m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "ac2870c04516ddb704dec37e62c1e9b720bd8bd1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge_vvm_tu-2.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-2.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vfloat32mf2_t test___riscv_vmerge_vvm_f32mf2_tu(vfloat32mf2_t merge,vfloat32mf2_t op1,vfloat32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32mf2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vmerge_vvm_f32m1_tu(vfloat32m1_t merge,vfloat32m1_t op1,vfloat32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vmerge_vvm_f32m2_tu(vfloat32m2_t merge,vfloat32m2_t op1,vfloat32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vmerge_vvm_f32m4_tu(vfloat32m4_t merge,vfloat32m4_t op1,vfloat32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vmerge_vvm_f32m8_tu(vfloat32m8_t merge,vfloat32m8_t op1,vfloat32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vmerge_vvm_f64m1_tu(vfloat64m1_t merge,vfloat64m1_t op1,vfloat64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f64m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vmerge_vvm_f64m2_tu(vfloat64m2_t merge,vfloat64m2_t op1,vfloat64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f64m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vmerge_vvm_f64m4_tu(vfloat64m4_t merge,vfloat64m4_t op1,vfloat64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f64m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vmerge_vvm_f64m8_tu(vfloat64m8_t merge,vfloat64m8_t op1,vfloat64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f64m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "442806f62c2f81049d4956ceee7f9bc7f8ea5ae2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge_vvm_tu-3.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-3.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vfloat32mf2_t test___riscv_vmerge_vvm_f32mf2_tu(vfloat32mf2_t merge,vfloat32mf2_t op1,vfloat32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32mf2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vmerge_vvm_f32m1_tu(vfloat32m1_t merge,vfloat32m1_t op1,vfloat32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vmerge_vvm_f32m2_tu(vfloat32m2_t merge,vfloat32m2_t op1,vfloat32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vmerge_vvm_f32m4_tu(vfloat32m4_t merge,vfloat32m4_t op1,vfloat32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vmerge_vvm_f32m8_tu(vfloat32m8_t merge,vfloat32m8_t op1,vfloat32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f32m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vmerge_vvm_f64m1_tu(vfloat64m1_t merge,vfloat64m1_t op1,vfloat64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f64m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vmerge_vvm_f64m2_tu(vfloat64m2_t merge,vfloat64m2_t op1,vfloat64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f64m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vmerge_vvm_f64m4_tu(vfloat64m4_t merge,vfloat64m4_t op1,vfloat64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f64m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vmerge_vvm_f64m8_tu(vfloat64m8_t merge,vfloat64m8_t op1,vfloat64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_f64m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "dfa4111913ca9dc3cc5e7242006d8a2f43cd3492", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge_vvm_tu-4.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-4.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_vvm_i8mf8_tu(vint8mf8_t merge,vint8mf8_t op1,vint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8mf8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_vvm_i8mf4_tu(vint8mf4_t merge,vint8mf4_t op1,vint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8mf4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_vvm_i8mf2_tu(vint8mf2_t merge,vint8mf2_t op1,vint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8mf2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_vvm_i8m1_tu(vint8m1_t merge,vint8m1_t op1,vint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_vvm_i8m2_tu(vint8m2_t merge,vint8m2_t op1,vint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_vvm_i8m4_tu(vint8m4_t merge,vint8m4_t op1,vint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_vvm_i8m8_tu(vint8m8_t merge,vint8m8_t op1,vint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_vvm_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,vint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16mf4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_vvm_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,vint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16mf2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_vvm_i16m1_tu(vint16m1_t merge,vint16m1_t op1,vint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_vvm_i16m2_tu(vint16m2_t merge,vint16m2_t op1,vint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_vvm_i16m4_tu(vint16m4_t merge,vint16m4_t op1,vint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_vvm_i16m8_tu(vint16m8_t merge,vint16m8_t op1,vint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_vvm_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,vint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32mf2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_vvm_i32m1_tu(vint32m1_t merge,vint32m1_t op1,vint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_vvm_i32m2_tu(vint32m2_t merge,vint32m2_t op1,vint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_vvm_i32m4_tu(vint32m4_t merge,vint32m4_t op1,vint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_vvm_i32m8_tu(vint32m8_t merge,vint32m8_t op1,vint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_vvm_i64m1_tu(vint64m1_t merge,vint64m1_t op1,vint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i64m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_vvm_i64m2_tu(vint64m2_t merge,vint64m2_t op1,vint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i64m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_vvm_i64m4_tu(vint64m4_t merge,vint64m4_t op1,vint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i64m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_vvm_i64m8_tu(vint64m8_t merge,vint64m8_t op1,vint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i64m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_vvm_u8mf8_tu(vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8mf8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_vvm_u8mf4_tu(vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8mf4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_vvm_u8mf2_tu(vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8mf2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_vvm_u8m1_tu(vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_vvm_u8m2_tu(vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_vvm_u8m4_tu(vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_vvm_u8m8_tu(vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_vvm_u16mf4_tu(vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16mf4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_vvm_u16mf2_tu(vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16mf2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_vvm_u16m1_tu(vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_vvm_u16m2_tu(vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_vvm_u16m4_tu(vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_vvm_u16m8_tu(vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_vvm_u32mf2_tu(vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32mf2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_vvm_u32m1_tu(vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_vvm_u32m2_tu(vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_vvm_u32m4_tu(vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_vvm_u32m8_tu(vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_vvm_u64m1_tu(vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u64m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_vvm_u64m2_tu(vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u64m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_vvm_u64m4_tu(vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u64m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_vvm_u64m8_tu(vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u64m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "d2e9348d8d1b818ffbcf69f71f82ecd1d258ef53", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge_vvm_tu-5.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-5.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_vvm_i8mf8_tu(vint8mf8_t merge,vint8mf8_t op1,vint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8mf8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_vvm_i8mf4_tu(vint8mf4_t merge,vint8mf4_t op1,vint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8mf4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_vvm_i8mf2_tu(vint8mf2_t merge,vint8mf2_t op1,vint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8mf2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_vvm_i8m1_tu(vint8m1_t merge,vint8m1_t op1,vint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_vvm_i8m2_tu(vint8m2_t merge,vint8m2_t op1,vint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_vvm_i8m4_tu(vint8m4_t merge,vint8m4_t op1,vint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_vvm_i8m8_tu(vint8m8_t merge,vint8m8_t op1,vint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_vvm_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,vint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16mf4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_vvm_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,vint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16mf2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_vvm_i16m1_tu(vint16m1_t merge,vint16m1_t op1,vint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_vvm_i16m2_tu(vint16m2_t merge,vint16m2_t op1,vint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_vvm_i16m4_tu(vint16m4_t merge,vint16m4_t op1,vint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_vvm_i16m8_tu(vint16m8_t merge,vint16m8_t op1,vint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_vvm_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,vint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32mf2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_vvm_i32m1_tu(vint32m1_t merge,vint32m1_t op1,vint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_vvm_i32m2_tu(vint32m2_t merge,vint32m2_t op1,vint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_vvm_i32m4_tu(vint32m4_t merge,vint32m4_t op1,vint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_vvm_i32m8_tu(vint32m8_t merge,vint32m8_t op1,vint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_vvm_i64m1_tu(vint64m1_t merge,vint64m1_t op1,vint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i64m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_vvm_i64m2_tu(vint64m2_t merge,vint64m2_t op1,vint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i64m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_vvm_i64m4_tu(vint64m4_t merge,vint64m4_t op1,vint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i64m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_vvm_i64m8_tu(vint64m8_t merge,vint64m8_t op1,vint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i64m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_vvm_u8mf8_tu(vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8mf8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_vvm_u8mf4_tu(vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8mf4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_vvm_u8mf2_tu(vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8mf2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_vvm_u8m1_tu(vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_vvm_u8m2_tu(vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_vvm_u8m4_tu(vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_vvm_u8m8_tu(vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_vvm_u16mf4_tu(vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16mf4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_vvm_u16mf2_tu(vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16mf2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_vvm_u16m1_tu(vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_vvm_u16m2_tu(vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_vvm_u16m4_tu(vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_vvm_u16m8_tu(vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_vvm_u32mf2_tu(vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32mf2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_vvm_u32m1_tu(vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_vvm_u32m2_tu(vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_vvm_u32m4_tu(vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_vvm_u32m8_tu(vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_vvm_u64m1_tu(vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u64m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_vvm_u64m2_tu(vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u64m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_vvm_u64m4_tu(vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u64m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_vvm_u64m8_tu(vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u64m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "a0b8780493fc41effef57c8b51594a01a2801cce", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge_vvm_tu-6.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-6.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_vvm_i8mf8_tu(vint8mf8_t merge,vint8mf8_t op1,vint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8mf8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_vvm_i8mf4_tu(vint8mf4_t merge,vint8mf4_t op1,vint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8mf4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_vvm_i8mf2_tu(vint8mf2_t merge,vint8mf2_t op1,vint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8mf2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_vvm_i8m1_tu(vint8m1_t merge,vint8m1_t op1,vint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_vvm_i8m2_tu(vint8m2_t merge,vint8m2_t op1,vint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_vvm_i8m4_tu(vint8m4_t merge,vint8m4_t op1,vint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_vvm_i8m8_tu(vint8m8_t merge,vint8m8_t op1,vint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i8m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_vvm_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,vint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16mf4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_vvm_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,vint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16mf2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_vvm_i16m1_tu(vint16m1_t merge,vint16m1_t op1,vint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_vvm_i16m2_tu(vint16m2_t merge,vint16m2_t op1,vint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_vvm_i16m4_tu(vint16m4_t merge,vint16m4_t op1,vint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_vvm_i16m8_tu(vint16m8_t merge,vint16m8_t op1,vint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i16m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_vvm_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,vint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32mf2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_vvm_i32m1_tu(vint32m1_t merge,vint32m1_t op1,vint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_vvm_i32m2_tu(vint32m2_t merge,vint32m2_t op1,vint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_vvm_i32m4_tu(vint32m4_t merge,vint32m4_t op1,vint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_vvm_i32m8_tu(vint32m8_t merge,vint32m8_t op1,vint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i32m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_vvm_i64m1_tu(vint64m1_t merge,vint64m1_t op1,vint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i64m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_vvm_i64m2_tu(vint64m2_t merge,vint64m2_t op1,vint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i64m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_vvm_i64m4_tu(vint64m4_t merge,vint64m4_t op1,vint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i64m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_vvm_i64m8_tu(vint64m8_t merge,vint64m8_t op1,vint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_i64m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_vvm_u8mf8_tu(vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8mf8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_vvm_u8mf4_tu(vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8mf4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_vvm_u8mf2_tu(vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8mf2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_vvm_u8m1_tu(vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_vvm_u8m2_tu(vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_vvm_u8m4_tu(vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_vvm_u8m8_tu(vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u8m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_vvm_u16mf4_tu(vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16mf4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_vvm_u16mf2_tu(vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16mf2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_vvm_u16m1_tu(vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_vvm_u16m2_tu(vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_vvm_u16m4_tu(vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_vvm_u16m8_tu(vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u16m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_vvm_u32mf2_tu(vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32mf2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_vvm_u32m1_tu(vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_vvm_u32m2_tu(vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_vvm_u32m4_tu(vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_vvm_u32m8_tu(vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u32m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_vvm_u64m1_tu(vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u64m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_vvm_u64m2_tu(vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u64m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_vvm_u64m4_tu(vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u64m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_vvm_u64m8_tu(vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vvm_u64m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "15f0c3a45f078246e1f483b655aa8876d6528c9b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge_vxm_rv32-1.c", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv32-1.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_vxm_i8mf8(vint8mf8_t op1,int8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf8(op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_vxm_i8mf4(vint8mf4_t op1,int8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf4(op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_vxm_i8mf2(vint8mf2_t op1,int8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf2(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_vxm_i8m1(vint8m1_t op1,int8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m1(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_vxm_i8m2(vint8m2_t op1,int8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m2(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_vxm_i8m4(vint8m4_t op1,int8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m4(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_vxm_i8m8(vint8m8_t op1,int8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m8(op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_vxm_i16mf4(vint16mf4_t op1,int16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16mf4(op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_vxm_i16mf2(vint16mf2_t op1,int16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16mf2(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_vxm_i16m1(vint16m1_t op1,int16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m1(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_vxm_i16m2(vint16m2_t op1,int16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m2(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_vxm_i16m4(vint16m4_t op1,int16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m4(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_vxm_i16m8(vint16m8_t op1,int16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m8(op1,op2,selector,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_vxm_i32mf2(vint32mf2_t op1,int32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32mf2(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_vxm_i32m1(vint32m1_t op1,int32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m1(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_vxm_i32m2(vint32m2_t op1,int32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m2(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_vxm_i32m4(vint32m4_t op1,int32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m4(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_vxm_i32m8(vint32m8_t op1,int32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m8(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_vxm_i64m1(vint64m1_t op1,int64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m1(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_vxm_i64m2(vint64m2_t op1,int64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m2(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_vxm_i64m4(vint64m4_t op1,int64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m4(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_vxm_i64m8(vint64m8_t op1,int64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m8(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_vxm_u8mf8(vuint8mf8_t op1,uint8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf8(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_vxm_u8mf4(vuint8mf4_t op1,uint8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf4(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_vxm_u8mf2(vuint8mf2_t op1,uint8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf2(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_vxm_u8m1(vuint8m1_t op1,uint8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m1(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_vxm_u8m2(vuint8m2_t op1,uint8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m2(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_vxm_u8m4(vuint8m4_t op1,uint8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m4(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_vxm_u8m8(vuint8m8_t op1,uint8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m8(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_vxm_u16mf4(vuint16mf4_t op1,uint16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16mf4(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_vxm_u16mf2(vuint16mf2_t op1,uint16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16mf2(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_vxm_u16m1(vuint16m1_t op1,uint16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m1(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_vxm_u16m2(vuint16m2_t op1,uint16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m2(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_vxm_u16m4(vuint16m4_t op1,uint16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m4(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_vxm_u16m8(vuint16m8_t op1,uint16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m8(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_vxm_u32mf2(vuint32mf2_t op1,uint32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32mf2(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_vxm_u32m1(vuint32m1_t op1,uint32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m1(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_vxm_u32m2(vuint32m2_t op1,uint32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m2(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_vxm_u32m4(vuint32m4_t op1,uint32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m4(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_vxm_u32m8(vuint32m8_t op1,uint32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m8(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_vxm_u64m1(vuint64m1_t op1,uint64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m1(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_vxm_u64m2(vuint64m2_t op1,uint64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m2(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_vxm_u64m4(vuint64m4_t op1,uint64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m4(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_vxm_u64m8(vuint64m8_t op1,uint64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m8(op1,op2,selector,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 8 } } */"}, {"sha": "7a1db71dec5c88c3e3c5391b4271eb58412f1c10", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge_vxm_rv32-2.c", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv32-2.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_vxm_i8mf8(vint8mf8_t op1,int8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf8(op1,op2,selector,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_vxm_i8mf4(vint8mf4_t op1,int8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf4(op1,op2,selector,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_vxm_i8mf2(vint8mf2_t op1,int8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf2(op1,op2,selector,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_vxm_i8m1(vint8m1_t op1,int8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m1(op1,op2,selector,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_vxm_i8m2(vint8m2_t op1,int8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m2(op1,op2,selector,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_vxm_i8m4(vint8m4_t op1,int8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m4(op1,op2,selector,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_vxm_i8m8(vint8m8_t op1,int8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m8(op1,op2,selector,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_vxm_i16mf4(vint16mf4_t op1,int16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16mf4(op1,op2,selector,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_vxm_i16mf2(vint16mf2_t op1,int16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16mf2(op1,op2,selector,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_vxm_i16m1(vint16m1_t op1,int16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m1(op1,op2,selector,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_vxm_i16m2(vint16m2_t op1,int16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m2(op1,op2,selector,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_vxm_i16m4(vint16m4_t op1,int16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m4(op1,op2,selector,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_vxm_i16m8(vint16m8_t op1,int16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m8(op1,op2,selector,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_vxm_i32mf2(vint32mf2_t op1,int32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32mf2(op1,op2,selector,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_vxm_i32m1(vint32m1_t op1,int32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m1(op1,op2,selector,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_vxm_i32m2(vint32m2_t op1,int32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m2(op1,op2,selector,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_vxm_i32m4(vint32m4_t op1,int32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m4(op1,op2,selector,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_vxm_i32m8(vint32m8_t op1,int32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m8(op1,op2,selector,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_vxm_i64m1(vint64m1_t op1,int64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m1(op1,op2,selector,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_vxm_i64m2(vint64m2_t op1,int64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m2(op1,op2,selector,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_vxm_i64m4(vint64m4_t op1,int64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m4(op1,op2,selector,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_vxm_i64m8(vint64m8_t op1,int64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m8(op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_vxm_u8mf8(vuint8mf8_t op1,uint8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf8(op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_vxm_u8mf4(vuint8mf4_t op1,uint8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf4(op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_vxm_u8mf2(vuint8mf2_t op1,uint8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf2(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_vxm_u8m1(vuint8m1_t op1,uint8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m1(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_vxm_u8m2(vuint8m2_t op1,uint8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m2(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_vxm_u8m4(vuint8m4_t op1,uint8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m4(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_vxm_u8m8(vuint8m8_t op1,uint8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m8(op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_vxm_u16mf4(vuint16mf4_t op1,uint16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16mf4(op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_vxm_u16mf2(vuint16mf2_t op1,uint16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16mf2(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_vxm_u16m1(vuint16m1_t op1,uint16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m1(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_vxm_u16m2(vuint16m2_t op1,uint16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m2(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_vxm_u16m4(vuint16m4_t op1,uint16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m4(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_vxm_u16m8(vuint16m8_t op1,uint16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m8(op1,op2,selector,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_vxm_u32mf2(vuint32mf2_t op1,uint32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32mf2(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_vxm_u32m1(vuint32m1_t op1,uint32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m1(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_vxm_u32m2(vuint32m2_t op1,uint32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m2(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_vxm_u32m4(vuint32m4_t op1,uint32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m4(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_vxm_u32m8(vuint32m8_t op1,uint32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m8(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_vxm_u64m1(vuint64m1_t op1,uint64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m1(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_vxm_u64m2(vuint64m2_t op1,uint64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m2(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_vxm_u64m4(vuint64m4_t op1,uint64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m4(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_vxm_u64m8(vuint64m8_t op1,uint64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m8(op1,op2,selector,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 8 } } */"}, {"sha": "5b3426d00abfc46d408ca4c9744f6920399da77e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge_vxm_rv32-3.c", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv32-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv32-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv32-3.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_vxm_i8mf8(vint8mf8_t op1,int8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf8(op1,op2,selector,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_vxm_i8mf4(vint8mf4_t op1,int8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf4(op1,op2,selector,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_vxm_i8mf2(vint8mf2_t op1,int8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf2(op1,op2,selector,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_vxm_i8m1(vint8m1_t op1,int8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m1(op1,op2,selector,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_vxm_i8m2(vint8m2_t op1,int8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m2(op1,op2,selector,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_vxm_i8m4(vint8m4_t op1,int8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m4(op1,op2,selector,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_vxm_i8m8(vint8m8_t op1,int8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m8(op1,op2,selector,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_vxm_i16mf4(vint16mf4_t op1,int16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16mf4(op1,op2,selector,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_vxm_i16mf2(vint16mf2_t op1,int16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16mf2(op1,op2,selector,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_vxm_i16m1(vint16m1_t op1,int16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m1(op1,op2,selector,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_vxm_i16m2(vint16m2_t op1,int16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m2(op1,op2,selector,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_vxm_i16m4(vint16m4_t op1,int16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m4(op1,op2,selector,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_vxm_i16m8(vint16m8_t op1,int16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m8(op1,op2,selector,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_vxm_i32mf2(vint32mf2_t op1,int32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32mf2(op1,op2,selector,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_vxm_i32m1(vint32m1_t op1,int32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m1(op1,op2,selector,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_vxm_i32m2(vint32m2_t op1,int32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m2(op1,op2,selector,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_vxm_i32m4(vint32m4_t op1,int32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m4(op1,op2,selector,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_vxm_i32m8(vint32m8_t op1,int32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m8(op1,op2,selector,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_vxm_i64m1(vint64m1_t op1,int64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m1(op1,op2,selector,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_vxm_i64m2(vint64m2_t op1,int64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m2(op1,op2,selector,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_vxm_i64m4(vint64m4_t op1,int64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m4(op1,op2,selector,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_vxm_i64m8(vint64m8_t op1,int64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m8(op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_vxm_u8mf8(vuint8mf8_t op1,uint8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf8(op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_vxm_u8mf4(vuint8mf4_t op1,uint8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf4(op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_vxm_u8mf2(vuint8mf2_t op1,uint8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf2(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_vxm_u8m1(vuint8m1_t op1,uint8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m1(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_vxm_u8m2(vuint8m2_t op1,uint8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m2(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_vxm_u8m4(vuint8m4_t op1,uint8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m4(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_vxm_u8m8(vuint8m8_t op1,uint8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m8(op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_vxm_u16mf4(vuint16mf4_t op1,uint16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16mf4(op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_vxm_u16mf2(vuint16mf2_t op1,uint16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16mf2(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_vxm_u16m1(vuint16m1_t op1,uint16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m1(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_vxm_u16m2(vuint16m2_t op1,uint16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m2(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_vxm_u16m4(vuint16m4_t op1,uint16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m4(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_vxm_u16m8(vuint16m8_t op1,uint16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m8(op1,op2,selector,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_vxm_u32mf2(vuint32mf2_t op1,uint32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32mf2(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_vxm_u32m1(vuint32m1_t op1,uint32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m1(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_vxm_u32m2(vuint32m2_t op1,uint32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m2(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_vxm_u32m4(vuint32m4_t op1,uint32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m4(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_vxm_u32m8(vuint32m8_t op1,uint32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m8(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_vxm_u64m1(vuint64m1_t op1,uint64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m1(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_vxm_u64m2(vuint64m2_t op1,uint64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m2(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_vxm_u64m4(vuint64m4_t op1,uint64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m4(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_vxm_u64m8(vuint64m8_t op1,uint64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m8(op1,op2,selector,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 8 } } */"}, {"sha": "6990a3abddeede3f9f3c28d1335c120b9034ebe9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge_vxm_rv64-1.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv64-1.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_vxm_i8mf8(vint8mf8_t op1,int8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf8(op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_vxm_i8mf4(vint8mf4_t op1,int8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf4(op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_vxm_i8mf2(vint8mf2_t op1,int8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf2(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_vxm_i8m1(vint8m1_t op1,int8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m1(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_vxm_i8m2(vint8m2_t op1,int8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m2(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_vxm_i8m4(vint8m4_t op1,int8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m4(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_vxm_i8m8(vint8m8_t op1,int8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m8(op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_vxm_i16mf4(vint16mf4_t op1,int16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16mf4(op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_vxm_i16mf2(vint16mf2_t op1,int16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16mf2(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_vxm_i16m1(vint16m1_t op1,int16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m1(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_vxm_i16m2(vint16m2_t op1,int16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m2(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_vxm_i16m4(vint16m4_t op1,int16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m4(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_vxm_i16m8(vint16m8_t op1,int16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m8(op1,op2,selector,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_vxm_i32mf2(vint32mf2_t op1,int32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32mf2(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_vxm_i32m1(vint32m1_t op1,int32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m1(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_vxm_i32m2(vint32m2_t op1,int32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m2(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_vxm_i32m4(vint32m4_t op1,int32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m4(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_vxm_i32m8(vint32m8_t op1,int32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m8(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_vxm_i64m1(vint64m1_t op1,int64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m1(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_vxm_i64m2(vint64m2_t op1,int64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m2(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_vxm_i64m4(vint64m4_t op1,int64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m4(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_vxm_i64m8(vint64m8_t op1,int64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m8(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_vxm_u8mf8(vuint8mf8_t op1,uint8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf8(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_vxm_u8mf4(vuint8mf4_t op1,uint8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf4(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_vxm_u8mf2(vuint8mf2_t op1,uint8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf2(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_vxm_u8m1(vuint8m1_t op1,uint8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m1(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_vxm_u8m2(vuint8m2_t op1,uint8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m2(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_vxm_u8m4(vuint8m4_t op1,uint8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m4(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_vxm_u8m8(vuint8m8_t op1,uint8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m8(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_vxm_u16mf4(vuint16mf4_t op1,uint16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16mf4(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_vxm_u16mf2(vuint16mf2_t op1,uint16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16mf2(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_vxm_u16m1(vuint16m1_t op1,uint16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m1(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_vxm_u16m2(vuint16m2_t op1,uint16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m2(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_vxm_u16m4(vuint16m4_t op1,uint16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m4(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_vxm_u16m8(vuint16m8_t op1,uint16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m8(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_vxm_u32mf2(vuint32mf2_t op1,uint32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32mf2(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_vxm_u32m1(vuint32m1_t op1,uint32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m1(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_vxm_u32m2(vuint32m2_t op1,uint32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m2(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_vxm_u32m4(vuint32m4_t op1,uint32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m4(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_vxm_u32m8(vuint32m8_t op1,uint32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m8(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_vxm_u64m1(vuint64m1_t op1,uint64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m1(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_vxm_u64m2(vuint64m2_t op1,uint64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m2(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_vxm_u64m4(vuint64m4_t op1,uint64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m4(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_vxm_u64m8(vuint64m8_t op1,uint64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m8(op1,op2,selector,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "27ec79a3cc1069b28578fc5e5f4496f5150d748e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge_vxm_rv64-2.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv64-2.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_vxm_i8mf8(vint8mf8_t op1,int8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf8(op1,op2,selector,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_vxm_i8mf4(vint8mf4_t op1,int8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf4(op1,op2,selector,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_vxm_i8mf2(vint8mf2_t op1,int8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf2(op1,op2,selector,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_vxm_i8m1(vint8m1_t op1,int8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m1(op1,op2,selector,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_vxm_i8m2(vint8m2_t op1,int8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m2(op1,op2,selector,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_vxm_i8m4(vint8m4_t op1,int8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m4(op1,op2,selector,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_vxm_i8m8(vint8m8_t op1,int8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m8(op1,op2,selector,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_vxm_i16mf4(vint16mf4_t op1,int16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16mf4(op1,op2,selector,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_vxm_i16mf2(vint16mf2_t op1,int16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16mf2(op1,op2,selector,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_vxm_i16m1(vint16m1_t op1,int16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m1(op1,op2,selector,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_vxm_i16m2(vint16m2_t op1,int16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m2(op1,op2,selector,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_vxm_i16m4(vint16m4_t op1,int16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m4(op1,op2,selector,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_vxm_i16m8(vint16m8_t op1,int16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m8(op1,op2,selector,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_vxm_i32mf2(vint32mf2_t op1,int32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32mf2(op1,op2,selector,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_vxm_i32m1(vint32m1_t op1,int32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m1(op1,op2,selector,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_vxm_i32m2(vint32m2_t op1,int32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m2(op1,op2,selector,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_vxm_i32m4(vint32m4_t op1,int32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m4(op1,op2,selector,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_vxm_i32m8(vint32m8_t op1,int32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m8(op1,op2,selector,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_vxm_i64m1(vint64m1_t op1,int64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m1(op1,op2,selector,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_vxm_i64m2(vint64m2_t op1,int64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m2(op1,op2,selector,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_vxm_i64m4(vint64m4_t op1,int64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m4(op1,op2,selector,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_vxm_i64m8(vint64m8_t op1,int64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m8(op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_vxm_u8mf8(vuint8mf8_t op1,uint8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf8(op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_vxm_u8mf4(vuint8mf4_t op1,uint8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf4(op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_vxm_u8mf2(vuint8mf2_t op1,uint8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf2(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_vxm_u8m1(vuint8m1_t op1,uint8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m1(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_vxm_u8m2(vuint8m2_t op1,uint8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m2(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_vxm_u8m4(vuint8m4_t op1,uint8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m4(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_vxm_u8m8(vuint8m8_t op1,uint8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m8(op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_vxm_u16mf4(vuint16mf4_t op1,uint16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16mf4(op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_vxm_u16mf2(vuint16mf2_t op1,uint16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16mf2(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_vxm_u16m1(vuint16m1_t op1,uint16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m1(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_vxm_u16m2(vuint16m2_t op1,uint16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m2(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_vxm_u16m4(vuint16m4_t op1,uint16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m4(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_vxm_u16m8(vuint16m8_t op1,uint16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m8(op1,op2,selector,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_vxm_u32mf2(vuint32mf2_t op1,uint32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32mf2(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_vxm_u32m1(vuint32m1_t op1,uint32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m1(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_vxm_u32m2(vuint32m2_t op1,uint32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m2(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_vxm_u32m4(vuint32m4_t op1,uint32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m4(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_vxm_u32m8(vuint32m8_t op1,uint32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m8(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_vxm_u64m1(vuint64m1_t op1,uint64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m1(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_vxm_u64m2(vuint64m2_t op1,uint64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m2(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_vxm_u64m4(vuint64m4_t op1,uint64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m4(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_vxm_u64m8(vuint64m8_t op1,uint64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m8(op1,op2,selector,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "5a9accaa4eee319255258af0a88e147c54836a86", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge_vxm_rv64-3.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv64-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv64-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv64-3.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_vxm_i8mf8(vint8mf8_t op1,int8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf8(op1,op2,selector,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_vxm_i8mf4(vint8mf4_t op1,int8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf4(op1,op2,selector,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_vxm_i8mf2(vint8mf2_t op1,int8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf2(op1,op2,selector,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_vxm_i8m1(vint8m1_t op1,int8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m1(op1,op2,selector,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_vxm_i8m2(vint8m2_t op1,int8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m2(op1,op2,selector,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_vxm_i8m4(vint8m4_t op1,int8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m4(op1,op2,selector,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_vxm_i8m8(vint8m8_t op1,int8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m8(op1,op2,selector,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_vxm_i16mf4(vint16mf4_t op1,int16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16mf4(op1,op2,selector,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_vxm_i16mf2(vint16mf2_t op1,int16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16mf2(op1,op2,selector,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_vxm_i16m1(vint16m1_t op1,int16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m1(op1,op2,selector,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_vxm_i16m2(vint16m2_t op1,int16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m2(op1,op2,selector,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_vxm_i16m4(vint16m4_t op1,int16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m4(op1,op2,selector,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_vxm_i16m8(vint16m8_t op1,int16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m8(op1,op2,selector,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_vxm_i32mf2(vint32mf2_t op1,int32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32mf2(op1,op2,selector,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_vxm_i32m1(vint32m1_t op1,int32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m1(op1,op2,selector,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_vxm_i32m2(vint32m2_t op1,int32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m2(op1,op2,selector,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_vxm_i32m4(vint32m4_t op1,int32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m4(op1,op2,selector,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_vxm_i32m8(vint32m8_t op1,int32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m8(op1,op2,selector,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_vxm_i64m1(vint64m1_t op1,int64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m1(op1,op2,selector,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_vxm_i64m2(vint64m2_t op1,int64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m2(op1,op2,selector,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_vxm_i64m4(vint64m4_t op1,int64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m4(op1,op2,selector,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_vxm_i64m8(vint64m8_t op1,int64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m8(op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_vxm_u8mf8(vuint8mf8_t op1,uint8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf8(op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_vxm_u8mf4(vuint8mf4_t op1,uint8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf4(op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_vxm_u8mf2(vuint8mf2_t op1,uint8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf2(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_vxm_u8m1(vuint8m1_t op1,uint8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m1(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_vxm_u8m2(vuint8m2_t op1,uint8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m2(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_vxm_u8m4(vuint8m4_t op1,uint8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m4(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_vxm_u8m8(vuint8m8_t op1,uint8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m8(op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_vxm_u16mf4(vuint16mf4_t op1,uint16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16mf4(op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_vxm_u16mf2(vuint16mf2_t op1,uint16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16mf2(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_vxm_u16m1(vuint16m1_t op1,uint16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m1(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_vxm_u16m2(vuint16m2_t op1,uint16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m2(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_vxm_u16m4(vuint16m4_t op1,uint16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m4(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_vxm_u16m8(vuint16m8_t op1,uint16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m8(op1,op2,selector,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_vxm_u32mf2(vuint32mf2_t op1,uint32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32mf2(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_vxm_u32m1(vuint32m1_t op1,uint32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m1(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_vxm_u32m2(vuint32m2_t op1,uint32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m2(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_vxm_u32m4(vuint32m4_t op1,uint32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m4(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_vxm_u32m8(vuint32m8_t op1,uint32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m8(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_vxm_u64m1(vuint64m1_t op1,uint64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m1(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_vxm_u64m2(vuint64m2_t op1,uint64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m2(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_vxm_u64m4(vuint64m4_t op1,uint64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m4(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_vxm_u64m8(vuint64m8_t op1,uint64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m8(op1,op2,selector,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "a3021804200f8b9c5e15040997ca4d2659092c5c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge_vxm_tu_rv32-1.c", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv32-1.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_vxm_i8mf8_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_vxm_i8mf4_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_vxm_i8mf2_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_vxm_i8m1_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_vxm_i8m2_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_vxm_i8m4_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_vxm_i8m8_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_vxm_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16mf4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_vxm_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16mf2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_vxm_i16m1_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_vxm_i16m2_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_vxm_i16m4_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_vxm_i16m8_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_vxm_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32mf2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_vxm_i32m1_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_vxm_i32m2_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_vxm_i32m4_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_vxm_i32m8_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_vxm_i64m1_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_vxm_i64m2_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_vxm_i64m4_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_vxm_i64m8_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_vxm_u8mf8_tu(vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_vxm_u8mf4_tu(vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_vxm_u8mf2_tu(vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_vxm_u8m1_tu(vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_vxm_u8m2_tu(vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_vxm_u8m4_tu(vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_vxm_u8m8_tu(vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_vxm_u16mf4_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16mf4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_vxm_u16mf2_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16mf2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_vxm_u16m1_tu(vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_vxm_u16m2_tu(vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_vxm_u16m4_tu(vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_vxm_u16m8_tu(vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_vxm_u32mf2_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32mf2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_vxm_u32m1_tu(vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_vxm_u32m2_tu(vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_vxm_u32m4_tu(vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_vxm_u32m8_tu(vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_vxm_u64m1_tu(vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_vxm_u64m2_tu(vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_vxm_u64m4_tu(vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_vxm_u64m8_tu(vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 8 } } */"}, {"sha": "0c63c1fbed0e26584e870e6660d6867ca208a88c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge_vxm_tu_rv32-2.c", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv32-2.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_vxm_i8mf8_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_vxm_i8mf4_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_vxm_i8mf2_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_vxm_i8m1_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_vxm_i8m2_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_vxm_i8m4_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_vxm_i8m8_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_vxm_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16mf4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_vxm_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16mf2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_vxm_i16m1_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_vxm_i16m2_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_vxm_i16m4_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_vxm_i16m8_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_vxm_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32mf2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_vxm_i32m1_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_vxm_i32m2_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_vxm_i32m4_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_vxm_i32m8_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_vxm_i64m1_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_vxm_i64m2_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_vxm_i64m4_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_vxm_i64m8_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_vxm_u8mf8_tu(vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_vxm_u8mf4_tu(vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_vxm_u8mf2_tu(vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_vxm_u8m1_tu(vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_vxm_u8m2_tu(vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_vxm_u8m4_tu(vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_vxm_u8m8_tu(vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_vxm_u16mf4_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16mf4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_vxm_u16mf2_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16mf2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_vxm_u16m1_tu(vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_vxm_u16m2_tu(vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_vxm_u16m4_tu(vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_vxm_u16m8_tu(vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_vxm_u32mf2_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32mf2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_vxm_u32m1_tu(vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_vxm_u32m2_tu(vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_vxm_u32m4_tu(vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_vxm_u32m8_tu(vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_vxm_u64m1_tu(vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_vxm_u64m2_tu(vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_vxm_u64m4_tu(vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_vxm_u64m8_tu(vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 8 } } */"}, {"sha": "25fa997f63704b72f7399687142a3e4ebcaa5b79", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge_vxm_tu_rv32-3.c", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv32-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv32-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv32-3.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_vxm_i8mf8_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_vxm_i8mf4_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_vxm_i8mf2_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_vxm_i8m1_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_vxm_i8m2_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_vxm_i8m4_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_vxm_i8m8_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_vxm_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16mf4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_vxm_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16mf2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_vxm_i16m1_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_vxm_i16m2_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_vxm_i16m4_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_vxm_i16m8_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_vxm_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32mf2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_vxm_i32m1_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_vxm_i32m2_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_vxm_i32m4_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_vxm_i32m8_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_vxm_i64m1_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_vxm_i64m2_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_vxm_i64m4_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_vxm_i64m8_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_vxm_u8mf8_tu(vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_vxm_u8mf4_tu(vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_vxm_u8mf2_tu(vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_vxm_u8m1_tu(vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_vxm_u8m2_tu(vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_vxm_u8m4_tu(vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_vxm_u8m8_tu(vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_vxm_u16mf4_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16mf4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_vxm_u16mf2_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16mf2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_vxm_u16m1_tu(vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_vxm_u16m2_tu(vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_vxm_u16m4_tu(vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_vxm_u16m8_tu(vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_vxm_u32mf2_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32mf2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_vxm_u32m1_tu(vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_vxm_u32m2_tu(vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_vxm_u32m4_tu(vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_vxm_u32m8_tu(vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_vxm_u64m1_tu(vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_vxm_u64m2_tu(vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_vxm_u64m4_tu(vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_vxm_u64m8_tu(vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 8 } } */"}, {"sha": "0489578f02119f1228a73c00d5a5af9510614338", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge_vxm_tu_rv64-1.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv64-1.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_vxm_i8mf8_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_vxm_i8mf4_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_vxm_i8mf2_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_vxm_i8m1_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_vxm_i8m2_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_vxm_i8m4_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_vxm_i8m8_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_vxm_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16mf4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_vxm_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16mf2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_vxm_i16m1_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_vxm_i16m2_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_vxm_i16m4_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_vxm_i16m8_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_vxm_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32mf2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_vxm_i32m1_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_vxm_i32m2_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_vxm_i32m4_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_vxm_i32m8_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_vxm_i64m1_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_vxm_i64m2_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_vxm_i64m4_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_vxm_i64m8_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_vxm_u8mf8_tu(vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_vxm_u8mf4_tu(vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_vxm_u8mf2_tu(vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_vxm_u8m1_tu(vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_vxm_u8m2_tu(vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_vxm_u8m4_tu(vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_vxm_u8m8_tu(vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_vxm_u16mf4_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16mf4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_vxm_u16mf2_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16mf2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_vxm_u16m1_tu(vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_vxm_u16m2_tu(vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_vxm_u16m4_tu(vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_vxm_u16m8_tu(vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_vxm_u32mf2_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32mf2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_vxm_u32m1_tu(vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_vxm_u32m2_tu(vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_vxm_u32m4_tu(vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_vxm_u32m8_tu(vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_vxm_u64m1_tu(vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m1_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_vxm_u64m2_tu(vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m2_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_vxm_u64m4_tu(vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m4_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_vxm_u64m8_tu(vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m8_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "a2ac7d69bf2da7f58d70129fc6ab4cc731427ca0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge_vxm_tu_rv64-2.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv64-2.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_vxm_i8mf8_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_vxm_i8mf4_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_vxm_i8mf2_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_vxm_i8m1_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_vxm_i8m2_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_vxm_i8m4_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_vxm_i8m8_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_vxm_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16mf4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_vxm_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16mf2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_vxm_i16m1_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_vxm_i16m2_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_vxm_i16m4_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_vxm_i16m8_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_vxm_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32mf2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_vxm_i32m1_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_vxm_i32m2_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_vxm_i32m4_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_vxm_i32m8_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_vxm_i64m1_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_vxm_i64m2_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_vxm_i64m4_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_vxm_i64m8_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_vxm_u8mf8_tu(vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_vxm_u8mf4_tu(vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_vxm_u8mf2_tu(vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_vxm_u8m1_tu(vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_vxm_u8m2_tu(vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_vxm_u8m4_tu(vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_vxm_u8m8_tu(vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_vxm_u16mf4_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16mf4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_vxm_u16mf2_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16mf2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_vxm_u16m1_tu(vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_vxm_u16m2_tu(vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_vxm_u16m4_tu(vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_vxm_u16m8_tu(vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_vxm_u32mf2_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32mf2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_vxm_u32m1_tu(vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_vxm_u32m2_tu(vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_vxm_u32m4_tu(vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_vxm_u32m8_tu(vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_vxm_u64m1_tu(vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m1_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_vxm_u64m2_tu(vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m2_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_vxm_u64m4_tu(vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m4_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_vxm_u64m8_tu(vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m8_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "f1df0e40da58c2550663db3003707e5f31c7de2f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vmerge_vxm_tu_rv64-3.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv64-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ea34be11c0da54c18b010ab51b97fc95657a4a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv64-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv64-3.c?ref=c0ea34be11c0da54c18b010ab51b97fc95657a4a", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_vxm_i8mf8_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_vxm_i8mf4_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_vxm_i8mf2_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8mf2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_vxm_i8m1_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_vxm_i8m2_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_vxm_i8m4_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_vxm_i8m8_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i8m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_vxm_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16mf4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_vxm_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16mf2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_vxm_i16m1_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_vxm_i16m2_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_vxm_i16m4_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_vxm_i16m8_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i16m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_vxm_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32mf2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_vxm_i32m1_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_vxm_i32m2_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_vxm_i32m4_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_vxm_i32m8_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i32m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_vxm_i64m1_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_vxm_i64m2_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_vxm_i64m4_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_vxm_i64m8_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_i64m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_vxm_u8mf8_tu(vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_vxm_u8mf4_tu(vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_vxm_u8mf2_tu(vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8mf2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_vxm_u8m1_tu(vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_vxm_u8m2_tu(vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_vxm_u8m4_tu(vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_vxm_u8m8_tu(vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u8m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_vxm_u16mf4_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16mf4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_vxm_u16mf2_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16mf2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_vxm_u16m1_tu(vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_vxm_u16m2_tu(vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_vxm_u16m4_tu(vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_vxm_u16m8_tu(vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u16m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_vxm_u32mf2_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32mf2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_vxm_u32m1_tu(vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_vxm_u32m2_tu(vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_vxm_u32m4_tu(vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_vxm_u32m8_tu(vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u32m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_vxm_u64m1_tu(vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m1_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_vxm_u64m2_tu(vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m2_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_vxm_u64m4_tu(vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m4_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_vxm_u64m8_tu(vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_vxm_u64m8_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */"}]}