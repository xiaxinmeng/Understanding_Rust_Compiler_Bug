{"sha": "076fecad0db4fb76524af6785b146491d4060dd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc2ZmVjYWQwZGI0ZmI3NjUyNGFmNjc4NWIxNDY0OTFkNDA2MGRkNA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2015-06-13T16:11:15Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2015-06-13T16:11:15Z"}, "message": "Emit -Waddress warnings for comparing address of reference against NULL\n\ngcc/c-family/ChangeLog:\n\n\tPR c++/65168\n\t* c-common.c (c_common_truthvalue_conversion): Warn when\n\tconverting an address of a reference to a truth value.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/65168\n\t* typeck.c (cp_build_binary_op): Warn when comparing an address\n\tof a reference against NULL.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/65168\n\tg++.dg/warn/Walways-true-3.C: New test.\n\nFrom-SVN: r224455", "tree": {"sha": "e76304d58d1deaf94d7fd2dc50a09d6c2979c651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e76304d58d1deaf94d7fd2dc50a09d6c2979c651"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/076fecad0db4fb76524af6785b146491d4060dd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/076fecad0db4fb76524af6785b146491d4060dd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/076fecad0db4fb76524af6785b146491d4060dd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/076fecad0db4fb76524af6785b146491d4060dd4/comments", "author": null, "committer": null, "parents": [{"sha": "313d38e359bfcd8b56c946233294061c66ae21dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/313d38e359bfcd8b56c946233294061c66ae21dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/313d38e359bfcd8b56c946233294061c66ae21dc"}], "stats": {"total": 111, "additions": 111, "deletions": 0}, "files": [{"sha": "80c3e48e13dea093a930478ebcef10629f183c86", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076fecad0db4fb76524af6785b146491d4060dd4/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076fecad0db4fb76524af6785b146491d4060dd4/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=076fecad0db4fb76524af6785b146491d4060dd4", "patch": "@@ -1,3 +1,9 @@\n+2015-06-13  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/65168\n+\t* c-common.c (c_common_truthvalue_conversion): Warn when\n+\tconverting an address of a reference to a truth value.\n+\n 2015-06-08  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* array-notation-common.c : Adjust include files."}, {"sha": "b1af682cf622f99ff8424a74c3c7f3c855530b0d", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076fecad0db4fb76524af6785b146491d4060dd4/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076fecad0db4fb76524af6785b146491d4060dd4/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=076fecad0db4fb76524af6785b146491d4060dd4", "patch": "@@ -4973,6 +4973,20 @@ c_common_truthvalue_conversion (location_t location, tree expr)\n \ttree totype = TREE_TYPE (expr);\n \ttree fromtype = TREE_TYPE (TREE_OPERAND (expr, 0));\n \n+\tif (POINTER_TYPE_P (totype)\n+\t    && TREE_CODE (fromtype) == REFERENCE_TYPE)\n+\t  {\n+\t    tree inner = expr;\n+\t    STRIP_NOPS (inner);\n+\n+\t    if (DECL_P (inner))\n+\t      warning_at (location,\n+\t\t\t  OPT_Waddress,\n+\t\t\t  \"the compiler can assume that the address of \"\n+\t\t\t  \"%qD will always evaluate to %<true%>\",\n+\t\t\t  inner);\n+\t  }\n+\n \t/* Don't cancel the effect of a CONVERT_EXPR from a REFERENCE_TYPE,\n \t   since that affects how `default_conversion' will behave.  */\n \tif (TREE_CODE (totype) == REFERENCE_TYPE"}, {"sha": "c091617f960a60128d43a856ee3bb4b2b2cd5dbf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076fecad0db4fb76524af6785b146491d4060dd4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076fecad0db4fb76524af6785b146491d4060dd4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=076fecad0db4fb76524af6785b146491d4060dd4", "patch": "@@ -1,3 +1,9 @@\n+2015-06-13  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/65168\n+\t* typeck.c (cp_build_binary_op): Warn when comparing an address\n+\tof a reference against NULL.\n+\n 2015-06-12  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/65719"}, {"sha": "7716c2154250179fc5ea628e249f6580d4e5f931", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076fecad0db4fb76524af6785b146491d4060dd4/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076fecad0db4fb76524af6785b146491d4060dd4/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=076fecad0db4fb76524af6785b146491d4060dd4", "patch": "@@ -4430,6 +4430,23 @@ cp_build_binary_op (location_t location,\n \t\twarning (OPT_Waddress, \"the address of %qD will never be NULL\",\n \t\t\t TREE_OPERAND (op0, 0));\n \t    }\n+\n+\t  if (CONVERT_EXPR_P (op0)\n+\t      && TREE_CODE (TREE_TYPE (TREE_OPERAND (op0, 0)))\n+\t\t == REFERENCE_TYPE)\n+\t    {\n+\t      tree inner_op0 = op0;\n+\t      STRIP_NOPS (inner_op0);\n+\n+\t      if ((complain & tf_warning)\n+\t\t  && c_inhibit_evaluation_warnings == 0\n+\t\t  && !TREE_NO_WARNING (op0)\n+\t\t  && DECL_P (inner_op0))\n+\t\twarning_at (location, OPT_Waddress,\n+\t\t\t    \"the compiler can assume that the address of \"\n+\t\t\t    \"%qD will never be NULL\",\n+\t\t\t    inner_op0);\n+\t    }\n \t}\n       else if (((code1 == POINTER_TYPE || TYPE_PTRDATAMEM_P (type1))\n \t\t&& null_ptr_cst_p (op0))\n@@ -4452,6 +4469,23 @@ cp_build_binary_op (location_t location,\n \t\twarning (OPT_Waddress, \"the address of %qD will never be NULL\",\n \t\t\t TREE_OPERAND (op1, 0));\n \t    }\n+\n+\t  if (CONVERT_EXPR_P (op1)\n+\t      && TREE_CODE (TREE_TYPE (TREE_OPERAND (op1, 0)))\n+\t\t == REFERENCE_TYPE)\n+\t    {\n+\t      tree inner_op1 = op1;\n+\t      STRIP_NOPS (inner_op1);\n+\n+\t      if ((complain & tf_warning)\n+\t\t  && c_inhibit_evaluation_warnings == 0\n+\t\t  && !TREE_NO_WARNING (op1)\n+\t\t  && DECL_P (inner_op1))\n+\t\twarning_at (location, OPT_Waddress,\n+\t\t\t    \"the compiler can assume that the address of \"\n+\t\t\t    \"%qD will never be NULL\",\n+\t\t\t    inner_op1);\n+\t    }\n \t}\n       else if ((code0 == POINTER_TYPE && code1 == POINTER_TYPE)\n \t       || (TYPE_PTRDATAMEM_P (type0) && TYPE_PTRDATAMEM_P (type1)))"}, {"sha": "b9b96e7e1b32af547e96ee730a8a29460573ed9b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076fecad0db4fb76524af6785b146491d4060dd4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076fecad0db4fb76524af6785b146491d4060dd4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=076fecad0db4fb76524af6785b146491d4060dd4", "patch": "@@ -1,3 +1,8 @@\n+2015-06-13  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/65168\n+\tg++.dg/warn/Walways-true-3.C: New test.\n+\n 2015-06-13  Tom de Vries  <tom@codesourcery.com>\n \n \t* gcc.dg/parloops-exit-first-loop-alt-4.c: New test."}, {"sha": "d6e9df4a6b976fbbfa9a20b12514020dbfe6772c", "filename": "gcc/testsuite/g++.dg/warn/Walways-true-3.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076fecad0db4fb76524af6785b146491d4060dd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076fecad0db4fb76524af6785b146491d4060dd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-3.C?ref=076fecad0db4fb76524af6785b146491d4060dd4", "patch": "@@ -0,0 +1,46 @@\n+// PR c++/65168\n+// { dg-options \"-Waddress\" }\n+\n+void foo (void);\n+\n+int d;\n+int &c = d;\n+\n+void\n+bar (int &a)\n+{\n+  int &b = a;\n+\n+  if ((int *)&a) // { dg-warning \"address of\" }\n+    foo ();\n+\n+  if (&b) // { dg-warning \"address of\" }\n+    foo ();\n+\n+  if (!&c) // { dg-warning \"address of\" }\n+    foo ();\n+\n+  if (!&(int &)(int &)a) // { dg-warning \"address of\" }\n+    foo ();\n+\n+  if (&a == 0) // { dg-warning \"never be NULL\" }\n+    foo ();\n+\n+  if (&b != 0) // { dg-warning \"never be NULL\" }\n+    foo ();\n+\n+  if (0 == &(int &)(int &)c) // { dg-warning \"never be NULL\" }\n+    foo ();\n+\n+  if (&a != (int *)0) // { dg-warning \"never be NULL\" }\n+    foo ();\n+}\n+\n+bool\n+bar_1 (int &a)\n+{\n+  if (d == 5)\n+    return &a; // { dg-warning \"address of\" }\n+  else\n+    return !&(int &)(int &)a; // { dg-warning \"address of\" }\n+}"}]}