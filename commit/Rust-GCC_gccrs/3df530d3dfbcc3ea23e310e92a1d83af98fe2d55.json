{"sha": "3df530d3dfbcc3ea23e310e92a1d83af98fe2d55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RmNTMwZDNkZmJjYzNlYTIzZTMxMGU5MmExZDgzYWY5OGZlMmQ1NQ==", "commit": {"author": {"name": "David Wohlferd", "email": "dw@LimeGreenSocks.com", "date": "2016-04-12T13:04:44Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2016-04-12T13:04:44Z"}, "message": "Executable test case for asm flags, by David Wohlferd.\n\n\t* gcc.target/i386/asm-flag-6.c: New test.\n\nFrom-SVN: r234900", "tree": {"sha": "ab082cf2edbdd87e4de10d55040731307b688239", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab082cf2edbdd87e4de10d55040731307b688239"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3df530d3dfbcc3ea23e310e92a1d83af98fe2d55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df530d3dfbcc3ea23e310e92a1d83af98fe2d55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3df530d3dfbcc3ea23e310e92a1d83af98fe2d55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df530d3dfbcc3ea23e310e92a1d83af98fe2d55/comments", "author": null, "committer": null, "parents": [{"sha": "d97633ef656271d68473d65267902dfe0b0956d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d97633ef656271d68473d65267902dfe0b0956d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d97633ef656271d68473d65267902dfe0b0956d4"}], "stats": {"total": 280, "additions": 280, "deletions": 0}, "files": [{"sha": "64753aa4e32371ddb1f2fd4504647b6aa2ba8ea7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df530d3dfbcc3ea23e310e92a1d83af98fe2d55/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df530d3dfbcc3ea23e310e92a1d83af98fe2d55/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3df530d3dfbcc3ea23e310e92a1d83af98fe2d55", "patch": "@@ -1,3 +1,7 @@\n+2016-04-12  David Wohlferd  <dw@LimeGreenSocks.com>\n+\n+\t* gcc.target/i386/asm-flag-6.c: New test.\n+\n 2016-04-12  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/68756"}, {"sha": "458587ec9dc2f0dc6f2e8617f2e2ca4a3648d531", "filename": "gcc/testsuite/gcc.target/i386/asm-flag-6.c", "status": "added", "additions": 276, "deletions": 0, "changes": 276, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df530d3dfbcc3ea23e310e92a1d83af98fe2d55/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-flag-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df530d3dfbcc3ea23e310e92a1d83af98fe2d55/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-flag-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-flag-6.c?ref=3df530d3dfbcc3ea23e310e92a1d83af98fe2d55", "patch": "@@ -0,0 +1,276 @@\n+/* Executable testcase for 'output flags.'  */\n+/* { dg-do run } */\n+\n+char TestC ()\n+{\n+  char r;\n+\n+  __asm__ (\"stc\" : \"=@ccc\"(r));\n+  if (r)\n+  {\n+    __asm__ (\"clc\" : \"=@ccnc\"(r));\n+    if (r)\n+      return 1;\n+  }\n+  return 0;\n+}\n+\n+char TestE ()\n+{\n+  char r;\n+\n+  /* 1 equals 1.  */\n+  __asm__ (\"cmp $1, %1\" : \"=@cce\"(r) : \"r\" (1));\n+  if (r)\n+  {\n+    /* 1 not equals 2.  */\n+    __asm__ (\"cmp $2, %1\" : \"=@ccne\"(r) : \"r\" (1));\n+    if (r)\n+      return 1;\n+  }\n+  return 0;\n+}\n+\n+char TestZ ()\n+{\n+  char r;\n+\n+  /* 1 equals 1.  */\n+  __asm__ (\"cmp $1, %1\" : \"=@ccz\"(r) : \"r\" (1));\n+  if (r)\n+  {\n+    /* 1 not equals 2.  */\n+    __asm__ (\"cmp $2, %1\" : \"=@ccnz\"(r) : \"r\" (1));\n+    if (r)\n+      return 1;\n+  }\n+  return 0;\n+}\n+\n+char TestA ()\n+{\n+  char r;\n+\n+  /* 1 a 0.  */\n+  __asm__ (\"cmp $0, %1\" : \"=@cca\"(r) : \"r\" (1));\n+  if (r)\n+  {\n+    /* 1 na 2.  */\n+    __asm__ (\"cmp $2, %1\" : \"=@ccna\"(r) : \"r\" (1));\n+    if (r)\n+    {\n+      /* 1 na 1.  */\n+      __asm__ (\"cmp $1, %1\" : \"=@ccna\"(r) : \"r\" (1));\n+      if (r)\n+\treturn 1;\n+    }\n+  }\n+  return 0;\n+}\n+\n+char TestAE ()\n+{\n+  char r;\n+\n+  /* 1 ae 0.  */\n+  __asm__ (\"cmp $0, %1\" : \"=@ccae\"(r) : \"r\" (1));\n+  if (r)\n+  {\n+    /* 1 nae 2.  */\n+    __asm__ (\"cmp $2, %1\" : \"=@ccnae\"(r) : \"r\" (1));\n+    if (r)\n+    {\n+      /* 1 ae 1.  */\n+      __asm__ (\"cmp $1, %1\" : \"=@ccae\"(r) : \"r\" (1));\n+      if (r)\n+\treturn 1;\n+    }\n+  }\n+  return 0;\n+}\n+\n+char TestB ()\n+{\n+  char r;\n+\n+  /* 1 b 2.  */\n+  __asm__ (\"cmp $2, %1\" : \"=@ccb\"(r) : \"r\" (1));\n+  if (r)\n+  {\n+    /* 1 nb 0.  */\n+    __asm__ (\"cmp $0, %1\" : \"=@ccnb\"(r) : \"r\" (1));\n+    if (r)\n+    {\n+      /* 1 nb 1.  */\n+      __asm__ (\"cmp $1, %1\" : \"=@ccnb\"(r) : \"r\" (1));\n+      if (r)\n+\treturn 1;\n+    }\n+  }\n+  return 0;\n+}\n+\n+char TestBE ()\n+{\n+  char r;\n+\n+  /* 1 be 2.  */\n+  __asm__ (\"cmp $2, %1\" : \"=@ccbe\"(r) : \"r\" (1));\n+  if (r)\n+  {\n+    /* 1 nbe 0.  */\n+    __asm__ (\"cmp $0, %1\" : \"=@ccnbe\"(r) : \"r\" (1));\n+    if (r)\n+    {\n+      /* 1 be 1.  */\n+      __asm__ (\"cmp $1, %1\" : \"=@ccbe\"(r) : \"r\" (1));\n+      if (r)\n+\treturn 1;\n+    }\n+  }\n+  return 0;\n+}\n+\n+char TestG ()\n+{\n+  char r;\n+\n+  /* 1 g 0.  */\n+  __asm__ (\"cmp $0, %1\" : \"=@ccg\"(r) : \"r\" (1));\n+  if (r)\n+  {\n+    /* 1 ng 2.  */\n+    __asm__ (\"cmp $2, %1\" : \"=@ccng\"(r) : \"r\" (1));\n+    if (r)\n+    {\n+      /* 1 ng 1.  */\n+      __asm__ (\"cmp $1, %1\" : \"=@ccng\"(r) : \"r\" (1));\n+      if (r)\n+\treturn 1;\n+    }\n+  }\n+  return 0;\n+}\n+\n+char TestGE ()\n+{\n+  char r;\n+\n+  /* 1 ge 0.  */\n+  __asm__ (\"cmp $0, %1\" : \"=@ccge\"(r) : \"r\" (1));\n+  if (r)\n+  {\n+    /* 1 nge 2.  */\n+    __asm__ (\"cmp $2, %1\" : \"=@ccnge\"(r) : \"r\" (1));\n+    if (r)\n+    {\n+      /* 1 ge 1.  */\n+      __asm__ (\"cmp $1, %1\" : \"=@ccge\"(r) : \"r\" (1));\n+      if (r)\n+\treturn 1;\n+    }\n+  }\n+  return 0;\n+}\n+\n+char TestL ()\n+{\n+  char r;\n+\n+  /* 1 l 2.  */\n+  __asm__ (\"cmp $2, %1\" : \"=@ccl\"(r) : \"r\" (1));\n+  if (r)\n+  {\n+    /* 1 nl 0.  */\n+    __asm__ (\"cmp $0, %1\" : \"=@ccnl\"(r) : \"r\" (1));\n+    if (r)\n+    {\n+      /* 1 nl 1.  */\n+      __asm__ (\"cmp $1, %1\" : \"=@ccnl\"(r) : \"r\" (1));\n+      if (r)\n+\treturn 1;\n+    }\n+  }\n+  return 0;\n+}\n+\n+char TestLE ()\n+{\n+  char r;\n+\n+  /* 1 le 2.  */\n+  __asm__ (\"cmp $2, %1\" : \"=@ccle\"(r) : \"r\" (1));\n+  if (r)\n+  {\n+    /* 1 nle 0.  */\n+    __asm__ (\"cmp $0, %1\" : \"=@ccnle\"(r) : \"r\" (1));\n+    if (r)\n+    {\n+      /* 1 le 1.  */\n+      __asm__ (\"cmp $1, %1\" : \"=@ccle\"(r) : \"r\" (1));\n+      if (r)\n+\treturn 1;\n+    }\n+  }\n+  return 0;\n+}\n+\n+char TestO ()\n+{\n+  char r;\n+  unsigned char res = 128;\n+\n+  /* overflow.  */\n+  __asm__ (\"addb $128, %1\" : \"=@cco\"(r), \"+r\"(res));\n+  if (r)\n+  {\n+    /* not overflow.  */\n+    __asm__ (\"addb $1, %1\" : \"=@ccno\"(r), \"+r\"(res));\n+    if (r)\n+      return 1;\n+  }\n+  return 0;\n+}\n+\n+char TestP ()\n+{\n+  char r, res = 1;\n+\n+  /* even # bits.  */\n+  __asm__ (\"addb $2, %1\" : \"=@ccp\"(r), \"+r\"(res));\n+  if (r)\n+  {\n+    /* odd # bits.  */\n+    __asm__ (\"addb $1, %1\" : \"=@ccnp\"(r), \"+r\"(res));\n+    if (r)\n+      return 1;\n+  }\n+  return 0;\n+}\n+\n+char TestS ()\n+{\n+  char r, res = 1;\n+\n+  /* sign bit set.  */\n+  __asm__ (\"addb $128, %1\" : \"=@ccs\"(r), \"+r\"(res));\n+  if (r)\n+  {\n+    /* sign bit not set.  */\n+    __asm__ (\"subb $128, %1\" : \"=@ccns\"(r), \"+r\"(res));\n+    if (r)\n+      return 1;\n+  }\n+  return 0;\n+}\n+\n+/* dg-do treats exit code of 0 as success.  */\n+int main ()\n+{\n+  if (TestC () && TestE () && TestZ () && TestA ()\n+      && TestAE () && TestB () && TestBE () && TestG ()\n+      && TestGE () && TestL () && TestLE () && TestO ()\n+      && TestP ()  && TestS ())\n+    return 0;\n+  __builtin_abort ();\n+}"}]}