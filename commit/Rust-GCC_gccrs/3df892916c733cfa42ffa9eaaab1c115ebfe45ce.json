{"sha": "3df892916c733cfa42ffa9eaaab1c115ebfe45ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RmODkyOTE2YzczM2NmYTQyZmZhOWVhYWFiMWMxMTVlYmZlNDVjZQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-05-09T22:48:36Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-05-09T22:48:36Z"}, "message": "Makefile.in: Update.\n\n\t* Makefile.in: Update.\n\t* c-common.c (flag_iso, flag_undef, cb_register_builtins,\n\tbuiltin_define_std): New.\n\t(c_common_init): Register CPP builtins callback.\n\t* c-common.h (flag_iso, flag_undef): New.\n\t* c-decl.c (c_decode_option): Set flag_iso and flag_undef.\n\t* c-lex.c: Don't include target.h.\n\t(cb_register_builtins): Move to c-common.c.\n\t(init_c_lex): Don't register hook here.\n\t* c-lex.h (builtin_define, builtin_assert, builtin_define_std): New.\n\t(cpp_define, cpp_assert): Remove.\n\t* gcc.c (cc1_options): Pass -undef to front end.\n\t* target-def.h (TARGET_REGISTER_CPP_BUILTINS): Remove.\n\t(TARGET_INITIALIZER): Update.\n\t* target.h (struct cpp_reader): Don't predeclare.\n\t(struct gcc_target): Remove cpp builtin hook.\n\t* tree.c (default_register_cpp_builtins): Remove.\ncp:\n\t* cp-tree.h (flag_ansi): Remove.\n\t* decl2.c (flag_ansi): Remove.\n\t(cxx_decode_option): Set flag_iso and flag_undef.\ndoc:\n\t* tm.texi: Update.\n\nFrom-SVN: r53349", "tree": {"sha": "8450e93598f1089a0cde24353bf2a3ffbbdee87e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8450e93598f1089a0cde24353bf2a3ffbbdee87e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3df892916c733cfa42ffa9eaaab1c115ebfe45ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df892916c733cfa42ffa9eaaab1c115ebfe45ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3df892916c733cfa42ffa9eaaab1c115ebfe45ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/comments", "author": null, "committer": null, "parents": [{"sha": "32fa4565a7d89525a0577f2bffed598f1d1d9194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32fa4565a7d89525a0577f2bffed598f1d1d9194", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32fa4565a7d89525a0577f2bffed598f1d1d9194"}], "stats": {"total": 231, "additions": 165, "deletions": 66}, "files": [{"sha": "307bdaefaf61b6b0e037d072addf9848f0626c85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3df892916c733cfa42ffa9eaaab1c115ebfe45ce", "patch": "@@ -1,3 +1,25 @@\n+2002-05-09  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* Makefile.in: Update.\n+\t* c-common.c (flag_iso, flag_undef, cb_register_builtins,\n+\tbuiltin_define_std): New.\n+\t(c_common_init): Register CPP builtins callback.\n+\t* c-common.h (flag_iso, flag_undef): New.\n+\t* c-decl.c (c_decode_option): Set flag_iso and flag_undef.\n+\t* c-lex.c: Don't include target.h.\n+\t(cb_register_builtins): Move to c-common.c.\n+\t(init_c_lex): Don't register hook here.\n+\t* c-lex.h (builtin_define, builtin_assert, builtin_define_std): New.\n+\t(cpp_define, cpp_assert): Remove.\n+\t* gcc.c (cc1_options): Pass -undef to front end.\n+\t* target-def.h (TARGET_REGISTER_CPP_BUILTINS): Remove.\n+\t(TARGET_INITIALIZER): Update.\n+\t* target.h (struct cpp_reader): Don't predeclare.\n+\t(struct gcc_target): Remove cpp builtin hook.\n+\t* tree.c (default_register_cpp_builtins): Remove.\n+doc:\n+\t* tm.texi: Update.\n+\n 2002-05-09  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cppexp.c (_cpp_expand_op_stack): Set op_limit."}, {"sha": "092f1ea11144579ba9bf7095c5657af83f9cf199", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3df892916c733cfa42ffa9eaaab1c115ebfe45ce", "patch": "@@ -1158,7 +1158,7 @@ c-typeck.o : c-typeck.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n c-lang.o : c-lang.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n     langhooks.h langhooks-def.h c-common.h\n c-lex.o : c-lex.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) c-lex.h \\\n-    debug.h $(C_TREE_H) c-common.h $(TARGET_H) \\\n+    debug.h $(C_TREE_H) c-common.h \\\n     c-pragma.h input.h intl.h flags.h toplev.h output.h \\\n     mbchar.h $(CPPLIB_H) $(EXPR_H) $(TM_P_H)\n c-objc-common.o : c-objc-common.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\"}, {"sha": "59a0b7f9f93e3fb2b0b6161dd4be9787c7e97111", "filename": "gcc/c-common.c", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=3df892916c733cfa42ffa9eaaab1c115ebfe45ce", "patch": "@@ -184,6 +184,14 @@ tree c_global_trees[CTI_MAX];\n /* Nonzero if prepreprocessing only.  */\n int flag_preprocess_only;\n \n+/* Nonzero if an ISO standard was selected.  It rejects macros in the\n+   user's namespace.  */\n+int flag_iso;\n+\n+/* Nonzero if -undef was given.  It suppresses target built-in macros\n+   and assertions.  */\n+int flag_undef;\n+\n /* Nonzero means don't recognize the non-ANSI builtin functions.  */\n \n int flag_no_builtin;\n@@ -275,6 +283,8 @@ static int if_stack_space = 0;\n /* Stack pointer.  */\n static int if_stack_pointer = 0;\n \n+static void cb_register_builtins PARAMS ((cpp_reader *));\n+\n static tree handle_packed_attribute\tPARAMS ((tree *, tree, tree, int,\n \t\t\t\t\t\t bool *));\n static tree handle_nocommon_attribute\tPARAMS ((tree *, tree, tree, int,\n@@ -4298,6 +4308,73 @@ c_common_post_options ()\n     warning (\"-Wmissing-format-attribute ignored without -Wformat\");\n }\n \n+/* Hook that registers front end and target-specific built-ins.  */\n+static void\n+cb_register_builtins (pfile)\n+     cpp_reader *pfile;\n+{\n+  /* -undef turns off target-specific built-ins.  */\n+  if (flag_undef)\n+    return;\n+\n+  if (c_language == clk_cplusplus)\n+    {\n+      if (SUPPORTS_ONE_ONLY)\n+\tcpp_define (pfile, \"__GXX_WEAK__\");\n+      else\n+\tcpp_define (pfile, \"__GXX_WEAK__=0\");\n+    }\n+\n+  /* A straightforward target hook doesn't work, because of problems\n+     linking that hook's body when part of non-C front ends.  */\n+#ifdef TARGET_REGISTER_CPP_BUILTINS\n+  TARGET_REGISTER_CPP_BUILTINS;\n+#endif\n+}\n+\n+/* Pass an object-like macro.  If it doesn't lie in the user's\n+   namespace, defines it unconditionally.  Otherwise define a version\n+   with two leading underscores, and another version with two leading\n+   and trailing underscores, and define the original only if an ISO\n+   standard was not nominated.\n+\n+   e.g. passing \"unix\" defines \"__unix\", \"__unix__\" and possibly\n+   \"unix\".  Passing \"_mips\" defines \"__mips\", \"__mips__\" and possibly\n+   \"_mips\".  */\n+void\n+builtin_define_std (macro)\n+     const char *macro;\n+{\n+  size_t len = strlen (macro);\n+  char *buff = alloca (len + 5);\n+  char *p = buff + 2;\n+  char *q = p + len;\n+\n+  /* prepend __ (or maybe just _) if in user's namespace.  */\n+  memcpy (p, macro, len + 1);\n+  if (*p != '_')\n+    *--p = '_';\n+  if (p[1] != '_' && !ISUPPER (p[1]))\n+    *--p = '_';\n+  cpp_define (parse_in, p);\n+\n+  /* If it was in user's namespace...  */\n+  if (p != buff + 2)\n+    {\n+      /* Define the original macro if permitted.  */\n+      if (!flag_iso)\n+\tcpp_define (parse_in, macro);\n+\n+      /* Define the macro with leading and following __.  */\n+      if (q[-1] != '_')\n+\t*q++ = '_';\n+      if (q[-2] != '_')\n+\t*q++ = '_';\n+      *q = '\\0';\n+      cpp_define (parse_in, p);\n+    }\n+}\n+\n /* Front end initialization common to C, ObjC and C++.  */\n const char *\n c_common_init (filename)\n@@ -4322,6 +4399,10 @@ c_common_init (filename)\n \n   options->warn_multichar = warn_multichar;\n \n+  /* Register preprocessor built-ins before calls to\n+     cpp_main_file.  */\n+  cpp_get_callbacks (parse_in)->register_builtins = cb_register_builtins;\n+\n   /* NULL is passed up to toplev.c and we exit quickly.  */\n   if (flag_preprocess_only)\n     {"}, {"sha": "7c5c30dab9ddf038105a389ba7beb05343109a25", "filename": "gcc/c-common.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=3df892916c733cfa42ffa9eaaab1c115ebfe45ce", "patch": "@@ -378,6 +378,14 @@ extern c_language_kind c_language;\n /* Nonzero if prepreprocessing only.  */\n extern int flag_preprocess_only;\n \n+/* Nonzero if an ISO standard was selected.  It rejects macros in the\n+   user's namespace.  */\n+extern int flag_iso;\n+\n+/* Nonzero if -undef was given.  It suppresses target built-in macros\n+   and assertions.  */\n+extern int flag_undef;\n+\n /* Nonzero means give string constants the type `const char *', rather\n    than `char *'.  */\n "}, {"sha": "854cd7309fd9960adefc28ffdda1cca6f4376816", "filename": "gcc/c-decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=3df892916c733cfa42ffa9eaaab1c115ebfe45ce", "patch": "@@ -541,6 +541,7 @@ c_decode_option (argc, argv)\n \t  flag_no_nonansi_builtin = 1;\n \t  flag_noniso_default_format_attributes = 0;\n \t  flag_isoc99 = 0;\n+\t  flag_iso = 1;\n \t}\n       else if (!strcmp (argstart, \"iso9899:199409\"))\n \t{\n@@ -558,6 +559,7 @@ c_decode_option (argc, argv)\n \t  flag_noniso_default_format_attributes = 0;\n \t  flag_isoc99 = 1;\n \t  flag_isoc94 = 1;\n+\t  flag_iso = 1;\n \t}\n       else if (!strcmp (argstart, \"gnu89\"))\n \t{\n@@ -636,6 +638,8 @@ c_decode_option (argc, argv)\n     ;\n   else if (!strcmp (p, \"-ansi\"))\n     goto iso_1990;\n+  else if (!strcmp (p, \"-undef\"))\n+    flag_undef = 1;\n   else if (!strcmp (p, \"-Werror-implicit-function-declaration\"))\n     mesg_implicit_function_declaration = 2;\n   else if (!strncmp (p, \"-Wformat=\", 9))"}, {"sha": "357017c9ca09cd7eb6ff5e036831db26b44425da", "filename": "gcc/c-lex.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=3df892916c733cfa42ffa9eaaab1c115ebfe45ce", "patch": "@@ -39,7 +39,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tm_p.h\"\n #include \"splay-tree.h\"\n #include \"debug.h\"\n-#include \"target.h\"\n \n #ifdef MULTIBYTE_CHARS\n #include \"mbchar.h\"\n@@ -81,7 +80,6 @@ static tree lex_string\t\tPARAMS ((const unsigned char *, unsigned int,\n static tree lex_charconst\tPARAMS ((const cpp_token *));\n static void update_header_times\tPARAMS ((const char *));\n static int dump_one_header\tPARAMS ((splay_tree_node, void *));\n-static void cb_register_builtins PARAMS ((cpp_reader *));\n static void cb_line_change     PARAMS ((cpp_reader *, const cpp_token *, int));\n static void cb_ident\t\tPARAMS ((cpp_reader *, unsigned int,\n \t\t\t\t\t const cpp_string *));\n@@ -123,7 +121,6 @@ init_c_lex (filename)\n   cb->ident = cb_ident;\n   cb->file_change = cb_file_change;\n   cb->def_pragma = cb_def_pragma;\n-  cb->register_builtins = cb_register_builtins;\n \n   /* Set the debug callbacks if we can use them.  */\n   if (debug_info_level == DINFO_LEVEL_VERBOSE\n@@ -228,25 +225,6 @@ dump_time_statistics ()\n   splay_tree_foreach (file_info_tree, dump_one_header, 0);\n }\n \n-/* Register preprocessor built-ins.  */\n-static void\n-cb_register_builtins (pfile)\n-     cpp_reader *pfile;\n-{\n-  if (c_language == clk_cplusplus)\n-    {\n-      if (SUPPORTS_ONE_ONLY)\n-\tcpp_define (pfile, \"__GXX_WEAK__\");\n-      else\n-\tcpp_define (pfile, \"__GXX_WEAK__=0\");\n-    }\n-\n-  (*targetm.register_cpp_builtins) (pfile);\n-}\n-\n-/* Not yet handled: #pragma, #define, #undef.\n-   No need to deal with linemarkers under normal conditions.  */\n-\n static void\n cb_ident (pfile, line, str)\n      cpp_reader *pfile ATTRIBUTE_UNUSED;"}, {"sha": "049bf6b36235eadf01be44821b770ac10b53fd4a", "filename": "gcc/c-lex.h", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Fc-lex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Fc-lex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.h?ref=3df892916c733cfa42ffa9eaaab1c115ebfe45ce", "patch": "@@ -34,9 +34,19 @@ extern int indent_level;\n \n struct cpp_reader;\n extern struct cpp_reader* parse_in;\n-/* Copied from cpplib.h to avoid target code having to pull in all of\n-   cpplib.h.  */\n-extern void cpp_define PARAMS ((struct cpp_reader *, const char *));\n-extern void cpp_assert PARAMS ((struct cpp_reader *, const char *));\n+\n+#define builtin_define(TXT) cpp_define (parse_in, TXT)\n+#define builtin_assert(TXT) cpp_assert (parse_in, TXT)\n+\n+/* Pass an object-like macro.  If it doesn't lie in the user's\n+   namespace, defines it unconditionally.  Otherwise define a version\n+   with two leading underscores, and another version with two leading\n+   and trailing underscores, and define the original only if an ISO\n+   standard was not nominated.\n+\n+   e.g. passing \"unix\" defines \"__unix\", \"__unix__\" and possibly\n+   \"unix\".  Passing \"_mips\" defines \"__mips\", \"__mips__\" and possibly\n+   \"_mips\".  */\n+extern void builtin_define_std PARAMS ((const char *));\n \n #endif /* ! GCC_C_LEX_H */"}, {"sha": "167df4e8d58fe7dbc5f2b9feb1f334298fb6bb41", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3df892916c733cfa42ffa9eaaab1c115ebfe45ce", "patch": "@@ -1,3 +1,9 @@\n+2002-05-09  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cp-tree.h (flag_ansi): Remove.\n+\t* decl2.c (flag_ansi): Remove.\n+\t(cxx_decode_option): Set flag_iso and flag_undef.\n+\n 2002-05-09  Jason Merrill  <jason@redhat.com>\n \n \t* typeck.c (get_member_function_from_ptrfunc): Reorganize."}, {"sha": "0f2ad7ca80be515900b50b4733c37762fc242e97", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3df892916c733cfa42ffa9eaaab1c115ebfe45ce", "patch": "@@ -1021,12 +1021,6 @@ extern int interface_only, interface_unknown;\n \n extern int flag_elide_constructors;\n \n-/* Nonzero means enable obscure standard features and disable GNU\n-   extensions that might cause standard-compliant code to be\n-   miscompiled.  */\n-\n-extern int flag_ansi;\n-\n /* Nonzero means that member functions defined in class scope are\n    inline by default.  */\n "}, {"sha": "2054a37e545208b5264f54d7336994ca50fdc40f", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=3df892916c733cfa42ffa9eaaab1c115ebfe45ce", "patch": "@@ -136,12 +136,6 @@ int flag_no_gnu_keywords;\n \n int flag_signed_bitfields = 1;\n \n-/* Nonzero means enable obscure standard features and disable GNU\n-   extensions that might cause standard-compliant code to be\n-   miscompiled.  */\n-\n-int flag_ansi;\n-\n /* Nonzero means do emit exported implementations of functions even if\n    they can be inlined.  */\n \n@@ -699,8 +693,10 @@ cxx_decode_option (argc, argv)\n     }\n   else if (!strcmp (p, \"-E\"))\n     flag_preprocess_only = 1;\n+  else if (!strcmp (p, \"-undef\"))\n+    flag_undef = 1;\n   else if (!strcmp (p, \"-ansi\"))\n-    flag_no_nonansi_builtin = 1, flag_ansi = 1,\n+    flag_no_nonansi_builtin = 1, flag_iso = 1,\n     flag_noniso_default_format_attributes = 0, flag_no_gnu_keywords = 1;\n #ifdef SPEW_DEBUG\n   /* Undocumented, only ever used when you're invoking cc1plus by hand, since"}, {"sha": "f382796937a5aa8e2e427c9b76754e403f91e646", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=3df892916c733cfa42ffa9eaaab1c115ebfe45ce", "patch": "@@ -622,19 +622,32 @@ The macro @code{STANDARD_STARTFILE_PREFIX}.\n @c prevent bad page break with this line\n Here are run-time target specifications.\n \n-@deftypefn {Target Hook} void TARGET_REGISTER_CPP_BUILTINS (cpp_reader *@var{pfile})\n-This macro expands to a target-specific function, called by the C\n-family of front ends, that allows you to define preprocessor built-in\n-macros and assertions at run-time.\n-\n-Pass the argument (a preprocessor handle) as the first argument to the\n-functions @code{cpp_define} and @code{cpp_assert}, declared in\n-@file{c-lex.h}.  The second argument is the same as the argument to\n-the respective command-line option, for example @code{__mips__} for\n-@code{cpp_define}, and @code{cpu=mips} for @code{cpp_assert}.\n-@end deftypefn\n-\n @table @code\n+@findex TARGET_REGISTER_CPP_BUILTINS\n+@item TARGET_REGISTER_CPP_BUILTINS\n+This macro expands to a block of code that defines target-specific\n+built-in preprocessor macros and assertions, using the functions\n+@code{builtin_macro}, @code{builtin_macro_std} and\n+@code{builtin_assert} declared in @file{c-lex.h}.\n+\n+@code{builtin_assert} takes a string in the form you pass to the\n+command-line option @option{-A}, such as @code{cpu=mips}, and creates\n+the assertion.  @code{builtin_macro} takes a string in the form\n+accepted by option @option{-D} and unconditionally defines the macro.\n+\n+@code{builtin_macro_std} takes a string representing the name of an\n+object-like macro.  If it doesn't lie in the user's namespace,\n+@code{builtin_macro_std} defines it unconditionally.  Otherwise, it\n+defines a version with two leading underscores, and another version\n+with two leading and trailing underscores, and defines the original\n+only if an ISO standard was not requested on the command line.  For\n+example, passing @code{unix} defines @code{__unix}, @code{__unix__}\n+and possibly @code{unix}; passing @code{_mips} defines @code{__mips},\n+@code{__mips__} and possibly @code{_mips}, and passing @code{_ABI64}\n+defines only @code{_ABI64}.\n+\n+This macro obsoletes the @code{CPP_PREDEFINES} target macro.\n+\n @findex CPP_PREDEFINES\n @item CPP_PREDEFINES\n Define this to be a string constant containing @option{-D} options to"}, {"sha": "3e5a430a364017f322e963ddbcb6314c268f5ebe", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=3df892916c733cfa42ffa9eaaab1c115ebfe45ce", "patch": "@@ -701,7 +701,7 @@ static const char *cc1_options =\n \"%{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n  %1 %{!Q:-quiet} -dumpbase %B %{d*} %{m*} %{a*}\\\n  %{g*} %{O*} %{W*&pedantic*} %{w} %{std*} %{ansi}\\\n- %{v:-version} %{pg:-p} %{p} %{f*}\\\n+ %{v:-version} %{pg:-p} %{p} %{f*} %{undef}\\\n  %{Qn:-fno-ident} %{--help:--help}\\\n  %{--target-help:--target-help}\\\n  %{!fsyntax-only:%{S:%W{o*}%{!o*:-o %b.s}}}\\"}, {"sha": "76d238e07267b6584bc8c5afdd97ae528ef5d269", "filename": "gcc/target-def.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=3df892916c733cfa42ffa9eaaab1c115ebfe45ce", "patch": "@@ -179,7 +179,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_SET_DEFAULT_TYPE_ATTRIBUTES default_set_default_type_attributes\n #define TARGET_INSERT_ATTRIBUTES default_insert_attributes\n #define TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P default_function_attribute_inlinable_p\n-#define TARGET_REGISTER_CPP_BUILTINS default_register_cpp_builtins\n #define TARGET_MS_BITFIELD_LAYOUT_P default_ms_bitfield_layout_p\n \n /* In builtins.c.  */\n@@ -206,7 +205,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_SET_DEFAULT_TYPE_ATTRIBUTES,\t\t\\\n   TARGET_INSERT_ATTRIBUTES,\t\t\t\\\n   TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P,\t\\\n-  TARGET_REGISTER_CPP_BUILTINS,\t\t\t\\\n   TARGET_MS_BITFIELD_LAYOUT_P,\t\t\t\\\n   TARGET_INIT_BUILTINS,\t\t\t\t\\\n   TARGET_EXPAND_BUILTIN,\t\t\t\\"}, {"sha": "1f294126ae9434412b9a100bb20594a856f322b9", "filename": "gcc/target.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=3df892916c733cfa42ffa9eaaab1c115ebfe45ce", "patch": "@@ -44,8 +44,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n    to gradually reduce the amount of conditional compilation that is\n    scattered throughout GCC.  */\n \n-struct cpp_reader;\n-\n struct gcc_target\n {\n   /* Functions that output assembler for the target.  */\n@@ -200,8 +198,6 @@ struct gcc_target\n      can be inlined despite its machine attributes, false otherwise.  */\n   bool (* function_attribute_inlinable_p) PARAMS ((tree fndecl));\n \n-  void (* register_cpp_builtins) PARAMS ((struct cpp_reader *));\n-\n   /* Return true if bitfields in RECORD_TYPE should follow the\n      Microsoft Visual C++ bitfield layout rules.  */\n   bool (* ms_bitfield_layout_p) PARAMS ((tree record_type));"}, {"sha": "945f3a15eca873884ff82a2aaaa5afab71c083b7", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df892916c733cfa42ffa9eaaab1c115ebfe45ce/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=3df892916c733cfa42ffa9eaaab1c115ebfe45ce", "patch": "@@ -2543,13 +2543,6 @@ build_type_attribute_variant (ttype, attribute)\n   return ttype;\n }\n \n-/* Default registration of target-specific CPP built-ins.  */\n-void\n-default_register_cpp_builtins (pfile)\n-     struct cpp_reader *pfile ATTRIBUTE_UNUSED;\n-{\n-}\n-\n /* Default value of targetm.comp_type_attributes that always returns 1.  */\n \n int"}]}