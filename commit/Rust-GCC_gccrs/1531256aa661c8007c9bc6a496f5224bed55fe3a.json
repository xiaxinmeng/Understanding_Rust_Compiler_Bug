{"sha": "1531256aa661c8007c9bc6a496f5224bed55fe3a", "node_id": "C_kwDOANBUbNoAKDE1MzEyNTZhYTY2MWM4MDA3YzliYzZhNDk2ZjUyMjRiZWQ1NWZlM2E", "commit": {"author": {"name": "Dave", "email": "dme2223@gmail.com", "date": "2022-11-10T05:17:50Z"}, "committer": {"name": "Dave", "email": "dme2223@gmail.com", "date": "2022-11-10T05:17:50Z"}, "message": "add Location to AST::Visibility", "tree": {"sha": "7e4361ca5e074a22a7b8b7a42fc006ae85b3ec75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e4361ca5e074a22a7b8b7a42fc006ae85b3ec75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1531256aa661c8007c9bc6a496f5224bed55fe3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1531256aa661c8007c9bc6a496f5224bed55fe3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1531256aa661c8007c9bc6a496f5224bed55fe3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1531256aa661c8007c9bc6a496f5224bed55fe3a/comments", "author": {"login": "dme2", "id": 22139936, "node_id": "MDQ6VXNlcjIyMTM5OTM2", "avatar_url": "https://avatars.githubusercontent.com/u/22139936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dme2", "html_url": "https://github.com/dme2", "followers_url": "https://api.github.com/users/dme2/followers", "following_url": "https://api.github.com/users/dme2/following{/other_user}", "gists_url": "https://api.github.com/users/dme2/gists{/gist_id}", "starred_url": "https://api.github.com/users/dme2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dme2/subscriptions", "organizations_url": "https://api.github.com/users/dme2/orgs", "repos_url": "https://api.github.com/users/dme2/repos", "events_url": "https://api.github.com/users/dme2/events{/privacy}", "received_events_url": "https://api.github.com/users/dme2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dme2", "id": 22139936, "node_id": "MDQ6VXNlcjIyMTM5OTM2", "avatar_url": "https://avatars.githubusercontent.com/u/22139936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dme2", "html_url": "https://github.com/dme2", "followers_url": "https://api.github.com/users/dme2/followers", "following_url": "https://api.github.com/users/dme2/following{/other_user}", "gists_url": "https://api.github.com/users/dme2/gists{/gist_id}", "starred_url": "https://api.github.com/users/dme2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dme2/subscriptions", "organizations_url": "https://api.github.com/users/dme2/orgs", "repos_url": "https://api.github.com/users/dme2/repos", "events_url": "https://api.github.com/users/dme2/events{/privacy}", "received_events_url": "https://api.github.com/users/dme2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9606dc92b996d3c56c84d93d8ea9ec3e5bc7893d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9606dc92b996d3c56c84d93d8ea9ec3e5bc7893d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9606dc92b996d3c56c84d93d8ea9ec3e5bc7893d"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "e9826bd0e152e00aa74c15eb83b783c2ccc92ab8", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1531256aa661c8007c9bc6a496f5224bed55fe3a/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1531256aa661c8007c9bc6a496f5224bed55fe3a/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=1531256aa661c8007c9bc6a496f5224bed55fe3a", "patch": "@@ -625,14 +625,14 @@ struct Visibility\n   VisType vis_type;\n   // Only assigned if vis_type is IN_PATH\n   SimplePath in_path;\n+  Location locus;\n \n   // should this store location info?\n \n public:\n   // Creates a Visibility - TODO make constructor protected or private?\n-  Visibility (VisType vis_type, SimplePath in_path)\n-    : vis_type (vis_type), in_path (std::move (in_path))\n-  {}\n+  Visibility(VisType vis_type, SimplePath in_path, Location locus = Location())\n+      : vis_type(vis_type), in_path(std::move(in_path)), locus(locus) {}\n \n   VisType get_vis_type () const { return vis_type; }\n \n@@ -648,6 +648,8 @@ struct Visibility\n   // Returns whether visibility is public or not.\n   bool is_public () const { return vis_type != PRIV && !is_error (); }\n \n+  Location get_locus() const { return locus; }\n+\n   // Creates an error visibility.\n   static Visibility create_error ()\n   {\n@@ -671,22 +673,24 @@ struct Visibility\n   // Creates a public visibility with crate-relative paths\n   static Visibility create_crate (Location crate_tok_location)\n   {\n-    return Visibility (PUB_CRATE,\n-\t\t       SimplePath::from_str (\"crate\", crate_tok_location));\n+    return Visibility(PUB_CRATE,\n+                      SimplePath::from_str(\"crate\", crate_tok_location),\n+                      crate_tok_location);\n   }\n \n   // Creates a public visibility with self-relative paths\n   static Visibility create_self (Location self_tok_location)\n   {\n-    return Visibility (PUB_SELF,\n-\t\t       SimplePath::from_str (\"self\", self_tok_location));\n+    return Visibility(PUB_SELF, SimplePath::from_str(\"self\", self_tok_location),\n+                      self_tok_location);\n   }\n \n   // Creates a public visibility with parent module-relative paths\n   static Visibility create_super (Location super_tok_location)\n   {\n-    return Visibility (PUB_SUPER,\n-\t\t       SimplePath::from_str (\"super\", super_tok_location));\n+    return Visibility(PUB_SUPER,\n+                      SimplePath::from_str(\"super\", super_tok_location),\n+                      super_tok_location);\n   }\n \n   // Creates a private visibility\n@@ -698,7 +702,7 @@ struct Visibility\n   // Creates a public visibility with a given path or whatever.\n   static Visibility create_in_path (SimplePath in_path)\n   {\n-    return Visibility (PUB_IN_PATH, std::move (in_path));\n+    return Visibility(PUB_IN_PATH, std::move(in_path), in_path.get_locus());\n   }\n \n   std::string as_string () const;\n@@ -3836,8 +3840,8 @@ class ExternalItem\n public:\n   virtual ~ExternalItem () {}\n \n-  /* TODO: spec syntax rules state that \"MacroInvocationSemi\" can be used as \n-   * ExternalItem, but text body isn't so clear. Adding MacroInvocationSemi \n+  /* TODO: spec syntax rules state that \"MacroInvocationSemi\" can be used as\n+   * ExternalItem, but text body isn't so clear. Adding MacroInvocationSemi\n    * support would require a lot of refactoring. */\n \n   // Returns whether item has outer attributes."}, {"sha": "9ac3674faa77008db9b6fcf08ebcc03526ae6ef1", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1531256aa661c8007c9bc6a496f5224bed55fe3a/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1531256aa661c8007c9bc6a496f5224bed55fe3a/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=1531256aa661c8007c9bc6a496f5224bed55fe3a", "patch": "@@ -49,8 +49,9 @@ translate_visibility (const AST::Visibility &vis)\n     case AST::Visibility::PUB_CRATE:\n     case AST::Visibility::PUB_SUPER:\n     case AST::Visibility::PUB_IN_PATH:\n-      return Visibility (Visibility::VisType::RESTRICTED,\n-\t\t\t ASTLoweringSimplePath::translate (vis.get_path ()));\n+      return Visibility(Visibility::VisType::RESTRICTED,\n+                        ASTLoweringSimplePath::translate(vis.get_path()),\n+                        vis.get_locus());\n       break;\n     }\n "}, {"sha": "0a8e688d3918c1cfada62f97de5441e81ae11531", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1531256aa661c8007c9bc6a496f5224bed55fe3a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1531256aa661c8007c9bc6a496f5224bed55fe3a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=1531256aa661c8007c9bc6a496f5224bed55fe3a", "patch": "@@ -571,14 +571,15 @@ struct Visibility\n private:\n   VisType vis_type;\n   HIR::SimplePath path;\n+  Location locus;\n \n   // should this store location info?\n \n public:\n-  Visibility (VisType vis_type,\n-\t      HIR::SimplePath path = HIR::SimplePath::create_empty ())\n-    : vis_type (vis_type), path (std::move (path))\n-  {}\n+  Visibility(VisType vis_type,\n+             HIR::SimplePath path = HIR::SimplePath::create_empty(),\n+             Location locus = Location())\n+      : vis_type(vis_type), path(std::move(path)), locus(locus) {}\n \n   // Returns whether visibility is in an error state.\n   bool is_error () const { return vis_type == ERROR; }"}]}