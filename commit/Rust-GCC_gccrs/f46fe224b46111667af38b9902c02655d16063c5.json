{"sha": "f46fe224b46111667af38b9902c02655d16063c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ2ZmUyMjRiNDYxMTE2NjdhZjM4Yjk5MDJjMDI2NTVkMTYwNjNjNQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-02-14T21:32:14Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-02-14T21:32:14Z"}, "message": "tree-dump.c (dump_files): Update to reflect new member of dump_file_info.\n\n2005-02-14  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-dump.c (dump_files): Update to reflect new member\n\tof dump_file_info.\n\t(dump_register): Add new argument.\n\tSet glob name.\n\t(dump_switch_p_1): Check against glob name if doglob was passed.\n\t(dump_switch_p): Check against regular first, then glob if\n\twe didn't have any hits on the dump name.\n\t* tree-optimize.c (register_one_dump_file):\n\tPass in glob name as well.\n\t* tree-pass.h (struct dump_file_info): Add glob\n\tmember.\n\nFrom-SVN: r95048", "tree": {"sha": "486b7eae9e3ea288b6c260c42a958d851be929ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/486b7eae9e3ea288b6c260c42a958d851be929ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f46fe224b46111667af38b9902c02655d16063c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f46fe224b46111667af38b9902c02655d16063c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f46fe224b46111667af38b9902c02655d16063c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f46fe224b46111667af38b9902c02655d16063c5/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c36eda5462a917b6b23c07fa0ac1752cf830a29d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c36eda5462a917b6b23c07fa0ac1752cf830a29d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c36eda5462a917b6b23c07fa0ac1752cf830a29d"}], "stats": {"total": 152, "additions": 92, "deletions": 60}, "files": [{"sha": "740a3887e50318c54cb9ceb40a318a4daffbf8be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46fe224b46111667af38b9902c02655d16063c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46fe224b46111667af38b9902c02655d16063c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f46fe224b46111667af38b9902c02655d16063c5", "patch": "@@ -1,3 +1,17 @@\n+2005-02-14  Daniel Berlin  <dberlin@dberlin.org>\n+\t\n+\t* tree-dump.c (dump_files): Update to reflect new member\n+\tof dump_file_info.\n+\t(dump_register): Add new argument.\n+\tSet glob name.\n+\t(dump_switch_p_1): Check against glob name if doglob was passed.\n+\t(dump_switch_p): Check against regular first, then glob if\n+\twe didn't have any hits on the dump name.\n+\t* tree-optimize.c (register_one_dump_file):\n+\tPass in glob name as well.\n+\t* tree-pass.h (struct dump_file_info): Add glob\n+\tmember.\n+\n 2005-02-14  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR preprocessor/16323"}, {"sha": "828ed0c58154ac8aaa95d89a691ffbc20bd9d071", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 70, "deletions": 56, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46fe224b46111667af38b9902c02655d16063c5/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46fe224b46111667af38b9902c02655d16063c5/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=f46fe224b46111667af38b9902c02655d16063c5", "patch": "@@ -667,56 +667,56 @@ dump_node (tree t, int flags, FILE *stream)\n    TREE_DUMP_INDEX enumeration in tree.h */\n static struct dump_file_info dump_files[TDI_end] =\n {\n-  {NULL, NULL, 0, 0, 0, 0},\n-  {\".tu\", \"translation-unit\", TDF_TREE, 0, 0, 0},\n-  {\".class\", \"class-hierarchy\", TDF_TREE, 0, 1, 0},\n-  {\".original\", \"tree-original\", TDF_TREE, 0, 2, 0},\n-  {\".generic\", \"tree-generic\", TDF_TREE, 0, 3, 0},\n-  {\".nested\", \"tree-nested\", TDF_TREE, 0, 4, 0},\n-  {\".inlined\", \"tree-inlined\", TDF_TREE, 0, 5, 0},\n-  {\".vcg\", \"tree-vcg\", TDF_TREE, 0, 6, 0},\n-  {NULL, \"tree-all\", TDF_TREE, 0, 0, 0},\n-  {NULL, \"rtl-all\", TDF_RTL, 0, 0, 0},\n-  {NULL, \"ipa-all\", TDF_IPA, 0, 0, 0},\n-\n-  { \".cgraph\", \"ipa-cgraph\",\t\tTDF_IPA, 0,  1, 0},\n-\n-  { \".sibling\", \"rtl-sibling\",\t\tTDF_RTL, 0,  1, 'i'},\n-  { \".eh\", \"rtl-eh\",\t\t\tTDF_RTL, 0,  2, 'h'},\n-  { \".jump\", \"rtl-jump\",\t\tTDF_RTL, 0,  3, 'j'},\n-  { \".cse\", \"rtl-cse\",\t\t\tTDF_RTL, 0,  4, 's'},\n-  { \".gcse\", \"rtl-gcse\",\t\tTDF_RTL, 0,  5, 'G'},\n-  { \".loop\", \"rtl-loop\",\t\tTDF_RTL, 0,  6, 'L'},\n-  { \".bypass\", \"rtl-bypass\",\t\tTDF_RTL, 0,  7, 'G'},\n-  { \".cfg\", \"rtl-cfg\",\t\t\tTDF_RTL, 0,  8, 'f'},\n-  { \".bp\", \"rtl-bp\",\t\t\tTDF_RTL, 0,  9, 'b'},\n-  { \".vpt\", \"rtl-vpt\",\t\t\tTDF_RTL, 0, 10, 'V'},\n-  { \".ce1\", \"rtl-ce1\",\t\t\tTDF_RTL, 0, 11, 'C'},\n-  { \".tracer\", \"rtl-tracer\",\t\tTDF_RTL, 0, 12, 'T'},\n-  { \".loop2\", \"rtl-loop2\",\t\tTDF_RTL, 0, 13, 'L'},\n-  { \".web\", \"rtl-web\",\t\t\tTDF_RTL, 0, 14, 'Z'},\n-  { \".cse2\", \"rtl-cse2\",\t\tTDF_RTL, 0, 15, 't'},\n-  { \".life\", \"rtl-life\",\t\tTDF_RTL, 0, 16, 'f'},\n-  { \".combine\", \"rtl-combine\",\t\tTDF_RTL, 0, 17, 'c'},\n-  { \".ce2\", \"rtl-ce2\",\t\t\tTDF_RTL, 0, 18, 'C'},\n-  { \".regmove\", \"rtl-regmove\",\t\tTDF_RTL, 0, 19, 'N'},\n-  { \".sms\", \"rtl-sms\",\t\t\tTDF_RTL, 0, 20, 'm'},\n-  { \".sched\", \"rtl-sched\",\t\tTDF_RTL, 0, 21, 'S'},\n-  { \".lreg\", \"rtl-lreg\",\t\tTDF_RTL, 0, 22, 'l'},\n-  { \".greg\", \"rtl-greg\",\t\tTDF_RTL, 0, 23, 'g'},\n-  { \".postreload\", \"rtl-postreload\",\tTDF_RTL, 0, 24, 'o'},\n-  { \".gcse2\", \"rtl-gcse2\",\t\tTDF_RTL, 0, 25, 'J'},\n-  { \".flow2\", \"rtl-flow2\",\t\tTDF_RTL, 0, 26, 'w'},\n-  { \".peephole2\", \"rtl-peephole2\",\tTDF_RTL, 0, 27, 'z'},\n-  { \".ce3\", \"rtl-ce3\",\t\t\tTDF_RTL, 0, 28, 'E'},\n-  { \".rnreg\", \"rtl-rnreg\",\t\tTDF_RTL, 0, 29, 'n'},\n-  { \".bbro\", \"rtl-bbro\",\t\tTDF_RTL, 0, 30, 'B'},\n-  { \".btl\", \"rtl-btl\",\t\t\tTDF_RTL, 0, 31, 'd'},\n-  { \".sched2\", \"rtl-sched2\",\t\tTDF_RTL, 0, 32, 'R'},\n-  { \".stack\", \"rtl-stack\",\t\tTDF_RTL, 0, 33, 'k'},\n-  { \".vartrack\", \"rtl-vartrack\",\tTDF_RTL, 0, 34, 'V'},\n-  { \".mach\", \"rtl-mach\",\t\tTDF_RTL, 0, 35, 'M'},\n-  { \".dbr\", \"rtl-dbr\",\t\t\tTDF_RTL, 0, 36, 'd'}\n+  {NULL, NULL, NULL, 0, 0, 0, 0},\n+  {\".tu\", \"translation-unit\", NULL, TDF_TREE, 0, 0, 0},\n+  {\".class\", \"class-hierarchy\", NULL, TDF_TREE, 0, 1, 0},\n+  {\".original\", \"tree-original\", NULL, TDF_TREE, 0, 2, 0},\n+  {\".generic\", \"tree-generic\", NULL, TDF_TREE, 0, 3, 0},\n+  {\".nested\", \"tree-nested\", NULL, TDF_TREE, 0, 4, 0},\n+  {\".inlined\", \"tree-inlined\", NULL, TDF_TREE, 0, 5, 0},\n+  {\".vcg\", \"tree-vcg\", NULL, TDF_TREE, 0, 6, 0},\n+  {NULL, \"tree-all\", NULL, TDF_TREE, 0, 0, 0},\n+  {NULL, \"rtl-all\", NULL, TDF_RTL, 0, 0, 0},\n+  {NULL, \"ipa-all\", NULL, TDF_IPA, 0, 0, 0},\n+\n+  { \".cgraph\", \"ipa-cgraph\", NULL,\tTDF_IPA, 0,  1, 0},\n+\n+  { \".sibling\", \"rtl-sibling\", NULL,\tTDF_RTL, 0,  1, 'i'},\n+  { \".eh\", \"rtl-eh\", NULL,\t\tTDF_RTL, 0,  2, 'h'},\n+  { \".jump\", \"rtl-jump\", NULL,\t\tTDF_RTL, 0,  3, 'j'},\n+  { \".cse\", \"rtl-cse\", NULL,    \t TDF_RTL, 0,  4, 's'},\n+  { \".gcse\", \"rtl-gcse\", NULL,\t\tTDF_RTL, 0,  5, 'G'},\n+  { \".loop\", \"rtl-loop\", NULL,\t\tTDF_RTL, 0,  6, 'L'},\n+  { \".bypass\", \"rtl-bypass\", NULL,\t\tTDF_RTL, 0,  7, 'G'},\n+  { \".cfg\", \"rtl-cfg\", NULL,\t\t\tTDF_RTL, 0,  8, 'f'},\n+  { \".bp\", \"rtl-bp\", NULL,\t\t\tTDF_RTL, 0,  9, 'b'},\n+  { \".vpt\", \"rtl-vpt\", NULL,\t\t\tTDF_RTL, 0, 10, 'V'},\n+  { \".ce1\", \"rtl-ce1\", NULL,\t\t\tTDF_RTL, 0, 11, 'C'},\n+  { \".tracer\", \"rtl-tracer\", NULL,\t\tTDF_RTL, 0, 12, 'T'},\n+  { \".loop2\", \"rtl-loop2\", NULL,\t\tTDF_RTL, 0, 13, 'L'},\n+  { \".web\", \"rtl-web\", NULL,\t\t\tTDF_RTL, 0, 14, 'Z'},\n+  { \".cse2\", \"rtl-cse2\", NULL,\t\tTDF_RTL, 0, 15, 't'},\n+  { \".life\", \"rtl-life\", NULL,\t\tTDF_RTL, 0, 16, 'f'},\n+  { \".combine\", \"rtl-combine\", NULL,\t\tTDF_RTL, 0, 17, 'c'},\n+  { \".ce2\", \"rtl-ce2\", NULL,\t\t\tTDF_RTL, 0, 18, 'C'},\n+  { \".regmove\", \"rtl-regmove\", NULL,\t\tTDF_RTL, 0, 19, 'N'},\n+  { \".sms\", \"rtl-sms\", NULL,\t\t\tTDF_RTL, 0, 20, 'm'},\n+  { \".sched\", \"rtl-sched\", NULL,\t\tTDF_RTL, 0, 21, 'S'},\n+  { \".lreg\", \"rtl-lreg\", NULL,\t\tTDF_RTL, 0, 22, 'l'},\n+  { \".greg\", \"rtl-greg\", NULL,\t\tTDF_RTL, 0, 23, 'g'},\n+  { \".postreload\", \"rtl-postreload\", NULL,\tTDF_RTL, 0, 24, 'o'},\n+  { \".gcse2\", \"rtl-gcse2\", NULL,\t\tTDF_RTL, 0, 25, 'J'},\n+  { \".flow2\", \"rtl-flow2\", NULL,\t\tTDF_RTL, 0, 26, 'w'},\n+  { \".peephole2\", \"rtl-peephole2\", NULL,\tTDF_RTL, 0, 27, 'z'},\n+  { \".ce3\", \"rtl-ce3\", NULL,\t\t\tTDF_RTL, 0, 28, 'E'},\n+  { \".rnreg\", \"rtl-rnreg\", NULL,\t\tTDF_RTL, 0, 29, 'n'},\n+  { \".bbro\", \"rtl-bbro\", NULL,\t\tTDF_RTL, 0, 30, 'B'},\n+  { \".btl\", \"rtl-btl\", NULL,\t\t\tTDF_RTL, 0, 31, 'd'},\n+  { \".sched2\", \"rtl-sched2\", NULL,\t\tTDF_RTL, 0, 32, 'R'},\n+  { \".stack\", \"rtl-stack\", NULL,\t\tTDF_RTL, 0, 33, 'k'},\n+  { \".vartrack\", \"rtl-vartrack\", NULL,\tTDF_RTL, 0, 34, 'V'},\n+  { \".mach\", \"rtl-mach\", NULL,\t\tTDF_RTL, 0, 35, 'M'},\n+  { \".dbr\", \"rtl-dbr\", NULL,\t\t\tTDF_RTL, 0, 36, 'd'}\n };\n \n /* Dynamically registered tree dump files and switches.  */\n@@ -749,8 +749,8 @@ static const struct dump_option_value_info dump_options[] =\n };\n \n unsigned int\n-dump_register (const char *suffix, const char *swtch, int flags,\n-\t       unsigned int num, int letter)\n+dump_register (const char *suffix, const char *swtch, const char *glob,\n+\t       int flags, unsigned int num, int letter)\n {\n   size_t this = extra_dump_files_in_use++;\n \n@@ -768,6 +768,7 @@ dump_register (const char *suffix, const char *swtch, int flags,\n   memset (&extra_dump_files[this], 0, sizeof (struct dump_file_info));\n   extra_dump_files[this].suffix = suffix;\n   extra_dump_files[this].swtch = swtch;\n+  extra_dump_files[this].glob = glob;\n   extra_dump_files[this].flags = flags;\n   extra_dump_files[this].num = num;\n   extra_dump_files[this].letter = letter;\n@@ -924,13 +925,16 @@ dump_enable_all (int flags, int letter)\n    relevant details in the dump_files array.  */\n \n static int\n-dump_switch_p_1 (const char *arg, struct dump_file_info *dfi)\n+dump_switch_p_1 (const char *arg, struct dump_file_info *dfi, bool doglob)\n {\n   const char *option_value;\n   const char *ptr;\n   int flags;\n+  \n+  if (doglob && !dfi->glob)\n+    return 0;\n \n-  option_value = skip_leading_substring (arg, dfi->swtch);\n+  option_value = skip_leading_substring (arg, doglob ? dfi->glob : dfi->swtch);\n   if (!option_value)\n     return 0;\n \n@@ -981,10 +985,20 @@ dump_switch_p (const char *arg)\n   int any = 0;\n \n   for (i = TDI_none + 1; i != TDI_end; i++)\n-    any |= dump_switch_p_1 (arg, &dump_files[i]);\n+    any |= dump_switch_p_1 (arg, &dump_files[i], false);\n+\n+  /* Don't glob if we got a hit already */\n+  if (!any)\n+    for (i = TDI_none + 1; i != TDI_end; i++)\n+      any |= dump_switch_p_1 (arg, &dump_files[i], true);\n \n   for (i = 0; i < extra_dump_files_in_use; i++)\n-    any |= dump_switch_p_1 (arg, &extra_dump_files[i]);\n+    any |= dump_switch_p_1 (arg, &extra_dump_files[i], false);\n+  \n+  if (!any)\n+    for (i = 0; i < extra_dump_files_in_use; i++)\n+      any |= dump_switch_p_1 (arg, &extra_dump_files[i], true);\n+\n \n   return any;\n }"}, {"sha": "033ca1971339711046d6f48e6fc88870b63ae881", "filename": "gcc/tree-dump.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46fe224b46111667af38b9902c02655d16063c5/gcc%2Ftree-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46fe224b46111667af38b9902c02655d16063c5/gcc%2Ftree-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.h?ref=f46fe224b46111667af38b9902c02655d16063c5", "patch": "@@ -88,6 +88,7 @@ extern void queue_and_dump_type (dump_info_p, tree);\n extern void dump_function (enum tree_dump_index, tree);\n extern void dump_function_to_file (tree, FILE *, int);\n \n-extern unsigned int dump_register (const char *, const char *, int, unsigned int, int);\n+extern unsigned int dump_register (const char *, const char *, const char *, \n+\t\t\t\t   int, unsigned int, int);\n \n #endif /* ! GCC_TREE_DUMP_H */"}, {"sha": "8006a2cdac66c401a75a79297b9faa3e7b2dcdd1", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46fe224b46111667af38b9902c02655d16063c5/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46fe224b46111667af38b9902c02655d16063c5/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=f46fe224b46111667af38b9902c02655d16063c5", "patch": "@@ -212,7 +212,7 @@ static struct tree_opt_pass pass_init_datastructures =\n static void\n register_one_dump_file (struct tree_opt_pass *pass, int n)\n {\n-  char *dot_name, *flag_name;\n+  char *dot_name, *flag_name, *glob_name;\n   char num[10];\n \n   /* See below in next_pass_1.  */\n@@ -225,13 +225,15 @@ register_one_dump_file (struct tree_opt_pass *pass, int n)\n   if (pass->properties_provided & PROP_trees)\n     {\n       flag_name = concat (\"tree-\", pass->name, num, NULL);\n-      pass->static_pass_number = dump_register (dot_name, flag_name,\n+      glob_name = concat (\"tree-\", pass->name, NULL);\n+      pass->static_pass_number = dump_register (dot_name, flag_name, glob_name,\n                                                 TDF_TREE, n + TDI_tree_all, 0);\n     }\n   else\n     {\n       flag_name = concat (\"rtl-\", pass->name, num, NULL);\n-      pass->static_pass_number = dump_register (dot_name, flag_name,\n+      glob_name = concat (\"rtl-\", pass->name, NULL);\n+      pass->static_pass_number = dump_register (dot_name, flag_name, glob_name,\n                                                 TDF_RTL, n, pass->letter);\n     }\n }"}, {"sha": "6bedfcb94d1e4c42cd8dabaf4efdf1e4056d19c8", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46fe224b46111667af38b9902c02655d16063c5/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46fe224b46111667af38b9902c02655d16063c5/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=f46fe224b46111667af38b9902c02655d16063c5", "patch": "@@ -78,6 +78,7 @@ struct dump_file_info\n {\n   const char *suffix;           /* suffix to give output file.  */\n   const char *swtch;            /* command line switch */\n+  const char *glob;             /* command line glob  */\n   int flags;                    /* user flags */\n   int state;                    /* state of play */\n   int num;                      /* dump file number */"}]}