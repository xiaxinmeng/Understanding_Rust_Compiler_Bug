{"sha": "3fd9d606f3f68b72f7645400a79a8b09cc10a9e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZkOWQ2MDZmM2Y2OGI3MmY3NjQ1NDAwYTc5YThiMDljYzEwYTllOQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2002-09-11T19:58:02Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-09-11T19:58:02Z"}, "message": "Makefile.in: Remove all references to s-under and underscore.c.\n\ngcc:\n\t* Makefile.in: Remove all references to s-under and underscore.c.\n\t* collect2.c, tlink.c: Change all uses of prepends_underscore\n\tto look directly at USER_LABEL_PREFIX.\n\ngcc/cp:\n\t* Make-lang.in: Build cp/cxxfilt.o from $(srcdir)/cp/cxxfilt.c,\n\tand c++filt from cxxfilt.o + version.o + $(LIBDEPS).\n\t* cxxfilt.c: New file: split from libiberty/cplus-dem.c, with\n\tminor adjustments (use version_string, eliminate yet another\n\tduplicate of xmalloc)\n\nlibiberty:\n\t* cplus-dem.c: Code code under #ifdef MAIN moved to gcc/cp/cxxfilt.c.\n\t* testsuite/Makefile.in: Adjust for test-demangle.\n\t* testsuite/regress-demangle: Deleted.\n\t* testsuite/test-demangle.c: New file.\n\t* testsuite/demangle-expected: Change \\$ to $ throughout, now that\n\tthis file is not being read by a shell script.\n\nFrom-SVN: r57037", "tree": {"sha": "6bbcd2c0a0f2af2f4a8beb06f20dc3cdb8866ba7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bbcd2c0a0f2af2f4a8beb06f20dc3cdb8866ba7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/comments", "author": null, "committer": null, "parents": [{"sha": "6e471ea7b847f2a8bf4ee0673dc64a4156ec694e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e471ea7b847f2a8bf4ee0673dc64a4156ec694e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e471ea7b847f2a8bf4ee0673dc64a4156ec694e"}], "stats": {"total": 969, "additions": 539, "deletions": 430}, "files": [{"sha": "c11b6247ce29bc23ada1b609681d327efc604b31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3fd9d606f3f68b72f7645400a79a8b09cc10a9e9", "patch": "@@ -1,3 +1,9 @@\n+2002-09-11  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* Makefile.in: Remove all references to s-under and underscore.c.\n+\t* collect2.c, tlink.c: Change all uses of prepends_underscore\n+\tto look directly at USER_LABEL_PREFIX.\n+\n 2002-09-11  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.c (rs6000_xcoff_asm_named_section): Append"}, {"sha": "52167f9864e56cb5b7a25677b359679b96f1bae8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3fd9d606f3f68b72f7645400a79a8b09cc10a9e9", "patch": "@@ -759,7 +759,7 @@ STAGESTUFF = *$(objext) insn-flags.h insn-config.h insn-codes.h \\\n  insn-output.c insn-recog.c insn-emit.c insn-extract.c insn-peep.c \\\n  insn-attr.h insn-attrtab.c insn-opinit.c insn-constants.h tm-preds.h \\\n  tree-check.h insn-conditions.c \\\n- s-flags s-config s-codes s-mlib s-under s-genrtl s-gtype gtyp-gen.h \\\n+ s-flags s-config s-codes s-mlib s-genrtl s-gtype gtyp-gen.h \\\n  s-output s-recog s-emit s-extract s-peep s-check s-conditions \\\n  s-attr s-attrtab s-opinit s-preds s-constants s-crt0 \\\n  genemit$(build_exeext) genoutput$(build_exeext) genrecog$(build_exeext) \\\n@@ -772,7 +772,7 @@ STAGESTUFF = *$(objext) insn-flags.h insn-config.h insn-codes.h \\\n  xgcc$(exeext) cpp$(exeext) cc1$(exeext) $(EXTRA_PASSES) \\\n  $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross$(exeext) cc1obj$(exeext) \\\n  protoize$(exeext) unprotoize$(exeext) \\\n- specs collect2$(exeext) $(USE_COLLECT2) underscore.c \\\n+ specs collect2$(exeext) $(USE_COLLECT2) \\\n  gcov$(exeext) *.[0-9][0-9].* *.[si] libcpp.a libbackend.a libgcc.mk \\\n  $(LANG_STAGESTUFF)\n \n@@ -1202,7 +1202,7 @@ graph.o: graph.c $(CONFIG_H) $(SYSTEM_H) toplev.h flags.h output.h $(RTL_H) \\\n sbitmap.o: sbitmap.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) flags.h hard-reg-set.h \\\n     $(BASIC_BLOCK_H)\n \n-COLLECT2_OBJS = collect2.o tlink.o intl.o underscore.o version.o\n+COLLECT2_OBJS = collect2.o tlink.o intl.o version.o\n COLLECT2_LIBS = @COLLECT2_LIBS@\n collect2$(exeext): $(COLLECT2_OBJS) $(LIBDEPS)\n # Don't try modifying collect2 (aka ld) in place--it might be linking this.\n@@ -1219,21 +1219,6 @@ collect2.o : collect2.c $(CONFIG_H) $(SYSTEM_H) gstab.h intl.h \\\n tlink.o: tlink.c $(DEMANGLE_H) $(HASHTAB_H) $(CONFIG_H) $(SYSTEM_H) \\\n     $(OBSTACK_H) collect2.h intl.h\n \n-underscore.c: s-under ; @true\n-\n-s-under: $(GCC_PASSES)\n-\techo \"int xxy_us_dummy;\" >tmp-dum.c\n-\t$(GCC_FOR_TARGET) -S tmp-dum.c\n-\techo '/*WARNING: This file is automatically generated!*/' >tmp-under.c\n-\tif grep _xxy_us_dummy tmp-dum.s > /dev/null ; then \\\n-\t  echo \"int prepends_underscore = 1;\" >>tmp-under.c; \\\n-\telse \\\n-\t  echo \"int prepends_underscore = 0;\" >>tmp-under.c; \\\n-\tfi\n-\t$(SHELL) $(srcdir)/move-if-change tmp-under.c underscore.c\n-\t-rm -f tmp-dum.c tmp-dum.s\n-\t$(STAMP) s-under\n-\n # A file used by all variants of C.\n \n c-common.o : c-common.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(OBSTACK_H) \\"}, {"sha": "4345e3a754e4a7fc258125519925f0965ad2a8c4", "filename": "gcc/collect2.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=3fd9d606f3f68b72f7645400a79a8b09cc10a9e9", "patch": "@@ -236,9 +236,6 @@ char * temporary_firstobj;\n /* Holds the return value of pexecute.  */\n int pexecute_pid;\n \n-/* Defined in the automatically-generated underscore.c.  */\n-extern int prepends_underscore;\n-\n /* Structure to hold all the directories in which to search for files to\n    execute.  */\n \n@@ -515,8 +512,8 @@ dump_file (name)\n \t  if (*word == '.')\n \t    ++word, putc ('.', stderr);\n \t  p = word;\n-\t  if (*p == '_' && prepends_underscore)\n-\t    ++p;\n+\t  if (!strncmp (p, USER_LABEL_PREFIX, strlen (USER_LABEL_PREFIX)))\n+\t    p += strlen (USER_LABEL_PREFIX);\n \n \t  if (no_demangle)\n \t    result = 0;"}, {"sha": "429c029dd34118c9a7260518cd9b34dcc3a0187b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3fd9d606f3f68b72f7645400a79a8b09cc10a9e9", "patch": "@@ -1,3 +1,11 @@\n+2002-09-11  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* Make-lang.in: Build cp/cxxfilt.o from $(srcdir)/cp/cxxfilt.c,\n+\tand c++filt from cxxfilt.o + version.o + $(LIBDEPS).\n+\t* cxxfilt.c: New file: split from libiberty/cplus-dem.c, with\n+\tminor adjustments (use version_string, eliminate yet another\n+\tduplicate of xmalloc)\n+\n 2002-09-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* cp-tree.h (require_complete_eh_spec_types): Add prototype."}, {"sha": "a189b41048595fdcbd16e3ea6504796835303c72", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=3fd9d606f3f68b72f7645400a79a8b09cc10a9e9", "patch": "@@ -82,16 +82,12 @@ g++-cross$(exeext): g++$(exeext)\n \tcp g++$(exeext) g++-cross$(exeext)\n \n # The demangler.\n-cxxmain.o: $(srcdir)/../libiberty/cplus-dem.c $(DEMANGLE_H) $(CONFIG_H)\n-\trm -f cxxmain.c\n-\t$(LN_S) $(srcdir)/../libiberty/cplus-dem.c cxxmain.c\n-\t$(CC) -c -DMAIN $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t  -DVERSION=\\\"$(version)\\\" cxxmain.c\n+cp/cxxfilt.o: cp/cxxfilt.c $(DEMANGLE_H) $(CONFIG_H) $(SYSTEM_H) version.h\n \n # Apparently OpenVM needs the -o to be at the beginning of the link line.\n-$(DEMANGLER_PROG): cxxmain.o underscore.o $(LIBDEPS)\n+$(DEMANGLER_PROG): cp/cxxfilt.o version.o $(LIBDEPS)\n \t$(CC) -o $@ $(ALL_CFLAGS) $(LDFLAGS) \\\n-\t  cxxmain.o underscore.o $(LIBS)\n+\t  cp/cxxfilt.o version.o $(LIBS)\n \n # The compiler itself.\n # Shared with C front end:"}, {"sha": "c9ae0e4902550798114b979ea6d90ec32a277406", "filename": "gcc/cp/cxxfilt.c", "status": "added", "additions": 302, "deletions": 0, "changes": 302, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/gcc%2Fcp%2Fcxxfilt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/gcc%2Fcp%2Fcxxfilt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxxfilt.c?ref=3fd9d606f3f68b72f7645400a79a8b09cc10a9e9", "patch": "@@ -0,0 +1,302 @@\n+/* Demangler for GNU C++ - main program\n+   Copyright 1989, 1991, 1994, 1995, 1996, 1997, 1998, 1999,\n+   2000, 2001, 2002 Free Software Foundation, Inc.\n+   Written by James Clark (jjc@jclark.uucp)\n+   Rewritten by Fred Fish (fnf@cygnus.com) for ARM and Lucid demangling\n+   Modified by Satish Pai (pai@apollo.hp.com) for HP demangling\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"demangle.h\"\n+#include \"getopt.h\"\n+#include \"version.h\"\n+\n+static const char *program_name;\n+static int flags = DMGL_PARAMS | DMGL_ANSI | DMGL_VERBOSE;\n+\n+static void demangle_it PARAMS ((char *));\n+static void usage PARAMS ((FILE *, int)) ATTRIBUTE_NORETURN;\n+static void fatal PARAMS ((const char *)) ATTRIBUTE_NORETURN;\n+static void print_demangler_list PARAMS ((FILE *));\n+\n+static void\n+demangle_it (mangled_name)\n+     char *mangled_name;\n+{\n+  char *result;\n+\n+  /* For command line args, also try to demangle type encodings.  */\n+  result = cplus_demangle (mangled_name, flags | DMGL_TYPES);\n+  if (result == NULL)\n+    {\n+      printf (\"%s\\n\", mangled_name);\n+    }\n+  else\n+    {\n+      printf (\"%s\\n\", result);\n+      free (result);\n+    }\n+}\n+\n+static void \n+print_demangler_list (stream)\n+     FILE *stream;\n+{\n+  const struct demangler_engine *demangler; \n+\n+  fprintf (stream, \"{%s\", libiberty_demanglers->demangling_style_name);\n+  \n+  for (demangler = libiberty_demanglers + 1;\n+       demangler->demangling_style != unknown_demangling;\n+       ++demangler)\n+    fprintf (stream, \",%s\", demangler->demangling_style_name);\n+\n+  fprintf (stream, \"}\");\n+}\n+\n+static void\n+usage (stream, status)\n+     FILE *stream;\n+     int status;\n+{\n+  fprintf (stream, \"\\\n+Usage: %s [-_] [-n] [--strip-underscores] [--no-strip-underscores] \\n\",\n+\t   program_name);\n+\n+  fprintf (stream, \"\\\n+       [-s \");\n+  print_demangler_list (stream);\n+  fprintf (stream, \"]\\n\");\n+\n+  fprintf (stream, \"\\\n+       [--format \");\n+  print_demangler_list (stream);\n+  fprintf (stream, \"]\\n\");\n+\n+  fprintf (stream, \"\\\n+       [--help] [--version] [arg...]\\n\");\n+  exit (status);\n+}\n+\n+#define MBUF_SIZE 32767\n+char mbuffer[MBUF_SIZE];\n+\n+int strip_underscore = 0;\n+\n+static const struct option long_options[] = {\n+  {\"strip-underscores\", no_argument, 0, '_'},\n+  {\"format\", required_argument, 0, 's'},\n+  {\"help\", no_argument, 0, 'h'},\n+  {\"no-strip-underscores\", no_argument, 0, 'n'},\n+  {\"version\", no_argument, 0, 'v'},\n+  {0, no_argument, 0, 0}\n+};\n+\n+static const char *\n+standard_symbol_characters PARAMS ((void));\n+\n+static const char *\n+hp_symbol_characters PARAMS ((void));\n+\n+/* Return the string of non-alnum characters that may occur \n+   as a valid symbol component, in the standard assembler symbol\n+   syntax.  */\n+\n+static const char *\n+standard_symbol_characters ()\n+{\n+  return \"_$.\";\n+}\n+\n+\n+/* Return the string of non-alnum characters that may occur\n+   as a valid symbol name component in an HP object file.\n+\n+   Note that, since HP's compiler generates object code straight from\n+   C++ source, without going through an assembler, its mangled\n+   identifiers can use all sorts of characters that no assembler would\n+   tolerate, so the alphabet this function creates is a little odd.\n+   Here are some sample mangled identifiers offered by HP:\n+\n+\ttypeid*__XT24AddressIndExpClassMember_\n+\t[Vftptr]key:__dt__32OrdinaryCompareIndExpClassMemberFv\n+\t__ct__Q2_9Elf64_Dyn18{unnamed.union.#1}Fv\n+\n+   This still seems really weird to me, since nowhere else in this\n+   file is there anything to recognize curly brackets, parens, etc.\n+   I've talked with Srikanth <srikanth@cup.hp.com>, and he assures me\n+   this is right, but I still strongly suspect that there's a\n+   misunderstanding here.\n+\n+   If we decide it's better for c++filt to use HP's assembler syntax\n+   to scrape identifiers out of its input, here's the definition of\n+   the symbol name syntax from the HP assembler manual:\n+\n+       Symbols are composed of uppercase and lowercase letters, decimal\n+       digits, dollar symbol, period (.), ampersand (&), pound sign(#) and\n+       underscore (_). A symbol can begin with a letter, digit underscore or\n+       dollar sign. If a symbol begins with a digit, it must contain a\n+       non-digit character.\n+\n+   So have fun.  */\n+static const char *\n+hp_symbol_characters ()\n+{\n+  return \"_$.<>#,*&[]:(){}\";\n+}\n+\n+extern int main PARAMS ((int, char **));\n+\n+int\n+main (argc, argv)\n+     int argc;\n+     char **argv;\n+{\n+  char *result;\n+  int c;\n+  const char *valid_symbols;\n+  enum demangling_styles style = auto_demangling;\n+\n+  program_name = argv[0];\n+\n+  strip_underscore = (USER_LABEL_PREFIX[0] == '_');\n+\n+  while ((c = getopt_long (argc, argv, \"_ns:\", long_options, (int *) 0)) != EOF)\n+    {\n+      switch (c)\n+\t{\n+\tcase '?':\n+\t  usage (stderr, 1);\n+\t  break;\n+\tcase 'h':\n+\t  usage (stdout, 0);\n+\tcase 'n':\n+\t  strip_underscore = 0;\n+\t  break;\n+\tcase 'v':\n+\t  printf (\"GNU %s (C++ demangler), version %s\\n\",\n+\t\t  program_name, version_string);\n+\t  return (0);\n+\tcase '_':\n+\t  strip_underscore = 1;\n+\t  break;\n+\tcase 's':\n+\t  {\n+\t    style = cplus_demangle_name_to_style (optarg);\n+\t    if (style == unknown_demangling)\n+\t      {\n+\t\tfprintf (stderr, \"%s: unknown demangling style `%s'\\n\",\n+\t\t\t program_name, optarg);\n+\t\treturn (1);\n+\t      }\n+\t    else\n+\t      cplus_demangle_set_style (style);\n+\t  }\n+\t  break;\n+\t}\n+    }\n+\n+  if (optind < argc)\n+    {\n+      for ( ; optind < argc; optind++)\n+\t{\n+\t  demangle_it (argv[optind]);\n+\t}\n+    }\n+  else\n+    {\n+      switch (current_demangling_style)\n+\t{\n+\tcase gnu_demangling:\n+\tcase lucid_demangling:\n+\tcase arm_demangling:\n+\tcase java_demangling:\n+\tcase edg_demangling:\n+\tcase gnat_demangling:\n+\tcase gnu_v3_demangling:\n+\tcase auto_demangling:\n+\t  valid_symbols = standard_symbol_characters ();\n+\t  break;\n+\tcase hp_demangling:\n+\t  valid_symbols = hp_symbol_characters ();\n+\t  break;\n+\tdefault:\n+\t  /* Folks should explicitly indicate the appropriate alphabet for\n+\t     each demangling.  Providing a default would allow the\n+\t     question to go unconsidered.  */\n+\t  fatal (\"Internal error: no symbol alphabet for current style\");\n+\t}\n+\n+      for (;;)\n+\t{\n+\t  int i = 0;\n+\t  c = getchar ();\n+\t  /* Try to read a label.  */\n+\t  while (c != EOF && (ISALNUM (c) || strchr (valid_symbols, c)))\n+\t    {\n+\t      if (i >= MBUF_SIZE-1)\n+\t\tbreak;\n+\t      mbuffer[i++] = c;\n+\t      c = getchar ();\n+\t    }\n+\t  if (i > 0)\n+\t    {\n+\t      int skip_first = 0;\n+\n+\t      mbuffer[i] = 0;\n+\t      if (mbuffer[0] == '.' || mbuffer[0] == '$')\n+\t\t++skip_first;\n+\t      if (strip_underscore && mbuffer[skip_first] == '_')\n+\t\t++skip_first;\n+\n+\t      if (skip_first > i)\n+\t\tskip_first = i;\n+\n+\t      flags |= (int) style;\n+\t      result = cplus_demangle (mbuffer + skip_first, flags);\n+\t      if (result)\n+\t\t{\n+\t\t  if (mbuffer[0] == '.')\n+\t\t    putc ('.', stdout);\n+\t\t  fputs (result, stdout);\n+\t\t  free (result);\n+\t\t}\n+\t      else\n+\t\tfputs (mbuffer, stdout);\n+\n+\t      fflush (stdout);\n+\t    }\n+\t  if (c == EOF)\n+\t    break;\n+\t  putchar (c);\n+\t  fflush (stdout);\n+\t}\n+    }\n+\n+  return (0);\n+}\n+\n+static void\n+fatal (str)\n+     const char *str;\n+{\n+  fprintf (stderr, \"%s: %s\\n\", program_name, str);\n+  exit (1);\n+}"}, {"sha": "4a56d4849b9841ca2ed9a2bea6b397c35d535b19", "filename": "gcc/tlink.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/gcc%2Ftlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/gcc%2Ftlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftlink.c?ref=3fd9d606f3f68b72f7645400a79a8b09cc10a9e9", "patch": "@@ -595,8 +595,8 @@ scan_linker_output (fname)\n       /* Try the first word on the line.  */\n       if (*p == '.')\n \t++p;\n-      if (*p == '_' && prepends_underscore)\n-\t++p;\n+      if (!strncmp (p, USER_LABEL_PREFIX, strlen (USER_LABEL_PREFIX)))\n+\tp += strlen (USER_LABEL_PREFIX);\n \n       end = ! *q;\n       *q = 0;\n@@ -611,8 +611,8 @@ scan_linker_output (fname)\n \t  p++;\n \t  if (*p == '.')\n \t    p++;\n-\t  if (*p == '_' && prepends_underscore)\n-\t    p++;\n+\t  if (!strncmp (p, USER_LABEL_PREFIX, strlen (USER_LABEL_PREFIX)))\n+\t    p += strlen (USER_LABEL_PREFIX);\n \t  sym = symbol_hash_lookup (p, false);\n \t}\n \n@@ -649,8 +649,9 @@ scan_linker_output (fname)\n \t\tsym = symbol_hash_lookup (dem->mangled, false);\n \t      else\n \t\t{\n-\t\t  if (*p == '_' && prepends_underscore)\n-\t\t    ++p;\n+\t\t  if (!strncmp (p, USER_LABEL_PREFIX,\n+\t\t\t\tstrlen (USER_LABEL_PREFIX)))\n+\t\t    p += strlen (USER_LABEL_PREFIX);\n \t\t  sym = symbol_hash_lookup (p, false);\n \t\t}\n \t    }"}, {"sha": "a2c1b7d81ecc1101918311c2ae7592d69aaf8b0c", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=3fd9d606f3f68b72f7645400a79a8b09cc10a9e9", "patch": "@@ -1,3 +1,12 @@\n+2002-09-11  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* cplus-dem.c: Code code under #ifdef MAIN moved to gcc/cp/cxxfilt.c.\n+\t* testsuite/Makefile.in: Adjust for test-demangle.\n+\t* testsuite/regress-demangle: Deleted.\n+\t* testsuite/test-demangle.c: New file.\n+\t* testsuite/demangle-expected: Change \\$ to $ throughout, now that\n+\tthis file is not being read by a shell script.\n+\n 2002-09-05  Roger Sayle  <roger@eyesopen.com>\n \n \t* regex.c: Only use \"#pragma alloca\" on AIX when not using gcc."}, {"sha": "63858986c6c205db9ec1ffde9ac91564d28171e4", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 0, "deletions": 334, "changes": 334, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=3fd9d606f3f68b72f7645400a79a8b09cc10a9e9", "patch": "@@ -4878,337 +4878,3 @@ string_append_template_idx (s, idx)\n   sprintf(buf, \"T%d\", idx);\n   string_append (s, buf);\n }\n-\n-/* To generate a standalone demangler program for testing purposes,\n-   just compile and link this file with -DMAIN and libiberty.a.  When\n-   run, it demangles each command line arg, or each stdin string, and\n-   prints the result on stdout.  */\n-\n-#ifdef MAIN\n-\n-#include \"getopt.h\"\n-\n-static const char *program_name;\n-static const char *program_version = VERSION;\n-static int flags = DMGL_PARAMS | DMGL_ANSI | DMGL_VERBOSE;\n-\n-static void demangle_it PARAMS ((char *));\n-static void usage PARAMS ((FILE *, int)) ATTRIBUTE_NORETURN;\n-static void fatal PARAMS ((const char *)) ATTRIBUTE_NORETURN;\n-static void print_demangler_list PARAMS ((FILE *));\n-\n-static void\n-demangle_it (mangled_name)\n-     char *mangled_name;\n-{\n-  char *result;\n-\n-  /* For command line args, also try to demangle type encodings.  */\n-  result = cplus_demangle (mangled_name, flags | DMGL_TYPES);\n-  if (result == NULL)\n-    {\n-      printf (\"%s\\n\", mangled_name);\n-    }\n-  else\n-    {\n-      printf (\"%s\\n\", result);\n-      free (result);\n-    }\n-}\n-\n-static void \n-print_demangler_list (stream)\n-     FILE *stream;\n-{\n-  const struct demangler_engine *demangler; \n-\n-  fprintf (stream, \"{%s\", libiberty_demanglers->demangling_style_name);\n-  \n-  for (demangler = libiberty_demanglers + 1;\n-       demangler->demangling_style != unknown_demangling;\n-       ++demangler)\n-    fprintf (stream, \",%s\", demangler->demangling_style_name);\n-\n-  fprintf (stream, \"}\");\n-}\n-\n-static void\n-usage (stream, status)\n-     FILE *stream;\n-     int status;\n-{\n-  fprintf (stream, \"\\\n-Usage: %s [-_] [-n] [--strip-underscores] [--no-strip-underscores] \\n\",\n-\t   program_name);\n-\n-  fprintf (stream, \"\\\n-       [-s \");\n-  print_demangler_list (stream);\n-  fprintf (stream, \"]\\n\");\n-\n-  fprintf (stream, \"\\\n-       [--format \");\n-  print_demangler_list (stream);\n-  fprintf (stream, \"]\\n\");\n-\n-  fprintf (stream, \"\\\n-       [--help] [--version] [arg...]\\n\");\n-  exit (status);\n-}\n-\n-#define MBUF_SIZE 32767\n-char mbuffer[MBUF_SIZE];\n-\n-/* Defined in the automatically-generated underscore.c.  */\n-extern int prepends_underscore;\n-\n-int strip_underscore = 0;\n-\n-static const struct option long_options[] = {\n-  {\"strip-underscores\", no_argument, 0, '_'},\n-  {\"format\", required_argument, 0, 's'},\n-  {\"help\", no_argument, 0, 'h'},\n-  {\"no-strip-underscores\", no_argument, 0, 'n'},\n-  {\"version\", no_argument, 0, 'v'},\n-  {0, no_argument, 0, 0}\n-};\n-\n-/* More 'friendly' abort that prints the line and file.\n-   config.h can #define abort fancy_abort if you like that sort of thing.  */\n-\n-void\n-fancy_abort ()\n-{\n-  fatal (\"Internal gcc abort.\");\n-}\n-\n-\n-static const char *\n-standard_symbol_characters PARAMS ((void));\n-\n-static const char *\n-hp_symbol_characters PARAMS ((void));\n-\n-static const char *\n-gnu_v3_symbol_characters PARAMS ((void));\n-\n-/* Return the string of non-alnum characters that may occur \n-   as a valid symbol component, in the standard assembler symbol\n-   syntax.  */\n-\n-static const char *\n-standard_symbol_characters ()\n-{\n-  return \"_$.\";\n-}\n-\n-\n-/* Return the string of non-alnum characters that may occur\n-   as a valid symbol name component in an HP object file.\n-\n-   Note that, since HP's compiler generates object code straight from\n-   C++ source, without going through an assembler, its mangled\n-   identifiers can use all sorts of characters that no assembler would\n-   tolerate, so the alphabet this function creates is a little odd.\n-   Here are some sample mangled identifiers offered by HP:\n-\n-\ttypeid*__XT24AddressIndExpClassMember_\n-\t[Vftptr]key:__dt__32OrdinaryCompareIndExpClassMemberFv\n-\t__ct__Q2_9Elf64_Dyn18{unnamed.union.#1}Fv\n-\n-   This still seems really weird to me, since nowhere else in this\n-   file is there anything to recognize curly brackets, parens, etc.\n-   I've talked with Srikanth <srikanth@cup.hp.com>, and he assures me\n-   this is right, but I still strongly suspect that there's a\n-   misunderstanding here.\n-\n-   If we decide it's better for c++filt to use HP's assembler syntax\n-   to scrape identifiers out of its input, here's the definition of\n-   the symbol name syntax from the HP assembler manual:\n-\n-       Symbols are composed of uppercase and lowercase letters, decimal\n-       digits, dollar symbol, period (.), ampersand (&), pound sign(#) and\n-       underscore (_). A symbol can begin with a letter, digit underscore or\n-       dollar sign. If a symbol begins with a digit, it must contain a\n-       non-digit character.\n-\n-   So have fun.  */\n-static const char *\n-hp_symbol_characters ()\n-{\n-  return \"_$.<>#,*&[]:(){}\";\n-}\n-\n-\n-/* Return the string of non-alnum characters that may occur \n-   as a valid symbol component in the GNU C++ V3 ABI mangling\n-   scheme.  */\n-\n-static const char *\n-gnu_v3_symbol_characters ()\n-{\n-  return \"_$.\";\n-}\n-\n-\n-extern int main PARAMS ((int, char **));\n-\n-int\n-main (argc, argv)\n-     int argc;\n-     char **argv;\n-{\n-  char *result;\n-  int c;\n-  const char *valid_symbols;\n-  enum demangling_styles style = auto_demangling;\n-\n-  program_name = argv[0];\n-\n-  strip_underscore = prepends_underscore;\n-\n-  while ((c = getopt_long (argc, argv, \"_ns:\", long_options, (int *) 0)) != EOF)\n-    {\n-      switch (c)\n-\t{\n-\tcase '?':\n-\t  usage (stderr, 1);\n-\t  break;\n-\tcase 'h':\n-\t  usage (stdout, 0);\n-\tcase 'n':\n-\t  strip_underscore = 0;\n-\t  break;\n-\tcase 'v':\n-\t  printf (\"GNU %s (C++ demangler), version %s\\n\", program_name, program_version);\n-\t  return (0);\n-\tcase '_':\n-\t  strip_underscore = 1;\n-\t  break;\n-\tcase 's':\n-\t  {\n-\t    style = cplus_demangle_name_to_style (optarg);\n-\t    if (style == unknown_demangling)\n-\t      {\n-\t\tfprintf (stderr, \"%s: unknown demangling style `%s'\\n\",\n-\t\t\t program_name, optarg);\n-\t\treturn (1);\n-\t      }\n-\t    else\n-\t      cplus_demangle_set_style (style);\n-\t  }\n-\t  break;\n-\t}\n-    }\n-\n-  if (optind < argc)\n-    {\n-      for ( ; optind < argc; optind++)\n-\t{\n-\t  demangle_it (argv[optind]);\n-\t}\n-    }\n-  else\n-    {\n-      switch (current_demangling_style)\n-\t{\n-\tcase gnu_demangling:\n-\tcase lucid_demangling:\n-\tcase arm_demangling:\n-\tcase java_demangling:\n-\tcase edg_demangling:\n-\tcase gnat_demangling:\n-\tcase auto_demangling:\n-\t  valid_symbols = standard_symbol_characters ();\n-\t  break;\n-\tcase hp_demangling:\n-\t  valid_symbols = hp_symbol_characters ();\n-\t  break;\n-\tcase gnu_v3_demangling:\n-\t  valid_symbols = gnu_v3_symbol_characters ();\n-\t  break;\n-\tdefault:\n-\t  /* Folks should explicitly indicate the appropriate alphabet for\n-\t     each demangling.  Providing a default would allow the\n-\t     question to go unconsidered.  */\n-\t  abort ();\n-\t}\n-\n-      for (;;)\n-\t{\n-\t  int i = 0;\n-\t  c = getchar ();\n-\t  /* Try to read a label.  */\n-\t  while (c != EOF && (ISALNUM (c) || strchr (valid_symbols, c)))\n-\t    {\n-\t      if (i >= MBUF_SIZE-1)\n-\t\tbreak;\n-\t      mbuffer[i++] = c;\n-\t      c = getchar ();\n-\t    }\n-\t  if (i > 0)\n-\t    {\n-\t      int skip_first = 0;\n-\n-\t      if (mbuffer[0] == '.' || mbuffer[0] == '$')\n-\t\t++skip_first;\n-\t      if (strip_underscore && mbuffer[skip_first] == '_')\n-\t\t++skip_first;\n-\n-\t      if (skip_first > i)\n-\t\tskip_first = i;\n-\n-\t      mbuffer[i] = 0;\n-\t      flags |= (int) style;\n-\t      result = cplus_demangle (mbuffer + skip_first, flags);\n-\t      if (result)\n-\t\t{\n-\t\t  if (mbuffer[0] == '.')\n-\t\t    putc ('.', stdout);\n-\t\t  fputs (result, stdout);\n-\t\t  free (result);\n-\t\t}\n-\t      else\n-\t\tfputs (mbuffer, stdout);\n-\n-\t      fflush (stdout);\n-\t    }\n-\t  if (c == EOF)\n-\t    break;\n-\t  putchar (c);\n-\t  fflush (stdout);\n-\t}\n-    }\n-\n-  return (0);\n-}\n-\n-static void\n-fatal (str)\n-     const char *str;\n-{\n-  fprintf (stderr, \"%s: %s\\n\", program_name, str);\n-  exit (1);\n-}\n-\n-PTR\n-xmalloc (size)\n-  size_t size;\n-{\n-  register PTR value = (PTR) malloc (size);\n-  if (value == 0)\n-    fatal (\"virtual memory exhausted\");\n-  return value;\n-}\n-\n-PTR\n-xrealloc (ptr, size)\n-  PTR ptr;\n-  size_t size;\n-{\n-  register PTR value = (PTR) realloc (ptr, size);\n-  if (value == 0)\n-    fatal (\"virtual memory exhausted\");\n-  return value;\n-}\n-#endif\t/* main */"}, {"sha": "515dcd56b7ee01c4a7675a6d14511879f64e1f6a", "filename": "libiberty/testsuite/Makefile.in", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/libiberty%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/libiberty%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2FMakefile.in?ref=3fd9d606f3f68b72f7645400a79a8b09cc10a9e9", "patch": "@@ -1,6 +1,6 @@\n #\n # Makefile\n-#   Copyright (C) 1999\n+#   Copyright (C) 1999, 2002\n #   Free Software Foundation\n #\n # This file is part of the libiberty library.\n@@ -45,31 +45,25 @@ all:\n check: @CHECK@\n \n # Run some tests of the demangler.\n-check-cplus-dem: test-filter $(srcdir)/demangle-expected\n-\t$(SHELL) $(srcdir)/regress-demangle $(srcdir)/demangle-expected\n+check-cplus-dem: test-demangle $(srcdir)/demangle-expected\n+\t./test-demangle < $(srcdir)/demangle-expected\n \n-# Note that we just hard-code prepends_underscore to 0.  This doesn't\n-# matter since any particular test can override the default if need\n-# be.\n TEST_COMPILE = $(CC) @DEFS@ $(LIBCFLAGS) -I.. -I$(INCDIR) $(HDEFINES)\n-test-filter: $(srcdir)/../cplus-dem.c\n-\techo 'int prepends_underscore = 0;' > test-us.c\n-\t$(TEST_COMPILE) -o test-filter -DMAIN -DVERSION='\"none\"' @DEFS@ \\\n-\t\t$(srcdir)/../cplus-dem.c test-us.c -L.. -liberty\n-\n+test-demangle: $(srcdir)/test-demangle.c\n+\t$(TEST_COMPILE) -o test-demangle \\\n+\t\t$(srcdir)/test-demangle.c ../libiberty.a\n \n # Standard (either GNU or Cygnus) rules we don't use.\n info install-info clean-info dvi install etags tags installcheck:\n \n # The standard clean rules.\n mostlyclean:\n-\trm -f test-us.c test-filter\n+\trm -f test-demangle\n clean: mostlyclean\n distclean: clean\n \trm -f Makefile\n maintainer-clean realclean: distclean\n \n-\n Makefile: $(srcdir)/Makefile.in ../config.status\n \tCONFIG_FILES=testsuite/Makefile CONFIG_HEADERS= \\\n \t  cd .. && $(SHELL) ./config.status"}, {"sha": "c048318823940f4fdba7b463e49b9de92328b3e1", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=3fd9d606f3f68b72f7645400a79a8b09cc10a9e9", "patch": "@@ -127,31 +127,31 @@ VOrder__9ivTSolverUiRP12ivInteractorT2\n ivTSolver::VOrder(unsigned int, ivInteractor *&, ivInteractor *&)\n #\n --format=gnu\n-_10PageButton\\$__both\n+_10PageButton$__both\n PageButton::__both\n #\n --format=gnu\n-_3RNG\\$singleMantissa\n+_3RNG$singleMantissa\n RNG::singleMantissa\n #\n --format=gnu\n-_5IComp\\$_release\n+_5IComp$_release\n IComp::_release\n #\n --format=gnu\n-_\\$_10BitmapComp\n+_$_10BitmapComp\n BitmapComp::~BitmapComp(void)\n #\n --format=gnu\n-_\\$_9__io_defs\n+_$_9__io_defs\n __io_defs::~__io_defs(void)\n #\n --format=gnu\n-_\\$_Q23foo3bar\n+_$_Q23foo3bar\n foo::bar::~bar(void)\n #\n --format=gnu\n-_\\$_Q33foo3bar4bell\n+_$_Q33foo3bar4bell\n foo::bar::bell::~bell(void)\n #\n --format=gnu\n@@ -435,11 +435,11 @@ _vt.foo.bar\n foo::bar virtual table\n #\n --format=gnu\n-_vt\\$foo\n+_vt$foo\n foo virtual table\n #\n --format=gnu\n-_vt\\$foo\\$bar\n+_vt$foo$bar\n foo::bar virtual table\n #\n --format=gnu\n@@ -647,11 +647,11 @@ zero__8osMemoryPvUi\n osMemory::zero(void *, unsigned int)\n #\n --format=gnu\n-_2T4\\$N\n+_2T4$N\n T4::N\n #\n --format=gnu\n-_Q22T42t1\\$N\n+_Q22T42t1$N\n T4::t1::N\n #\n --format=gnu\n@@ -727,11 +727,11 @@ __t6vector1Zii\n vector<int>::vector(int)\n #\n --format=gnu\n-_\\$_t6vector1Zdi\n+_$_t6vector1Zdi\n vector<double>::~vector(int)\n #\n --format=gnu\n-_\\$_t6vector1Zii\n+_$_t6vector1Zii\n vector<int>::~vector(int)\n #\n --format=gnu\n@@ -827,11 +827,11 @@ next__Ct4List1Z10VHDLEntityRQ2t4List1Z10VHDLEntity3Pix\n List<VHDLEntity>::next(List<VHDLEntity>::Pix &) const\n #\n --format=gnu\n-_GLOBAL_\\$D\\$set\n+_GLOBAL_$D$set\n global destructors keyed to set\n #\n --format=gnu\n-_GLOBAL_\\$I\\$set\n+_GLOBAL_$I$set\n global constructors keyed to set\n #\n --format=gnu\n@@ -875,7 +875,7 @@ __t8BDDHookV1ZPcRCPc\n BDDHookV<char *>::BDDHookV(char *const &)\n #\n --format=gnu\n-_vt\\$t8BDDHookV1ZPc\n+_vt$t8BDDHookV1ZPc\n BDDHookV<char *> virtual table\n #\n --format=gnu\n@@ -2564,7 +2564,7 @@ _27_GLOBAL_.N.__12burst_app_ct.app_instance\n {anonymous}::app_instance\n #\n --format=gnu\n-_26_GLOBAL_\\$N\\$_tmp_n.iilg4Gya\\$app_instance\n+_26_GLOBAL_$N$_tmp_n.iilg4Gya$app_instance\n {anonymous}::app_instance\n #\n --format=java"}, {"sha": "303dda54e0cf4333c95a1434c43ecc92d43107f8", "filename": "libiberty/testsuite/regress-demangle", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e471ea7b847f2a8bf4ee0673dc64a4156ec694e/libiberty%2Ftestsuite%2Fregress-demangle", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e471ea7b847f2a8bf4ee0673dc64a4156ec694e/libiberty%2Ftestsuite%2Fregress-demangle", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fregress-demangle?ref=6e471ea7b847f2a8bf4ee0673dc64a4156ec694e", "patch": "@@ -1,30 +0,0 @@\n-#! /bin/sh\n-\n-# Run a regression test for the demangler.\n-# Usage: regress-demangle TEST-FILE\n-\n-failures=0\n-count=0\n-sed -e '/^#/ d' \"$1\" | (\n-  while read type; do\n-     read mangled\n-     read demangled\n-\n-     x=\"`./test-filter $type $mangled`\"\n-     count=`expr $count + 1`\n-     if test \"x$x\" != \"x$demangled\"; then\n-\tfailures=`expr $failures + 1`\n-\techo \"FAIL: $type $mangled\"\n-\techo \"   result: $x\"\n-\techo \" expected: $demangled\"\n-     fi\n-  done\n-\n-  if test $failures -eq 0; then\n-     echo \"All $count tests passed\"\n-  else\n-     echo \"$failures of $count tests failed\"\n-  fi\n-\n-  test $failures -eq 0\n-)"}, {"sha": "82f263e88af2afcbde787393b30e1e2c95eb79aa", "filename": "libiberty/testsuite/test-demangle.c", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/libiberty%2Ftestsuite%2Ftest-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd9d606f3f68b72f7645400a79a8b09cc10a9e9/libiberty%2Ftestsuite%2Ftest-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Ftest-demangle.c?ref=3fd9d606f3f68b72f7645400a79a8b09cc10a9e9", "patch": "@@ -0,0 +1,175 @@\n+/* Demangler test program,\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Written by Zack Weinberg <zack@codesourcery.com\n+\n+   This file is part of GNU libiberty.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software\n+   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. \n+*/\n+\n+#ifdef HAVE_CONFIG_H\n+#include \"config.h\"\n+#endif\n+#include \"ansidecl.h\"\n+#include <stdio.h>\n+#include \"libiberty.h\"\n+#include \"demangle.h\"\n+\n+struct line\n+{\n+  size_t alloced;\n+  char *data;\n+};\n+\n+static unsigned int lineno;\n+\n+/* Safely read a single line of arbitrary length from standard input.  */\n+\n+#define LINELEN 80\n+\n+static void\n+getline(buf)\n+     struct line *buf;\n+{\n+  char *data = buf->data;\n+  size_t alloc = buf->alloced;\n+  size_t count = 0;\n+  int c;\n+\n+  if (data == 0)\n+    {\n+      data = xmalloc (LINELEN);\n+      alloc = LINELEN;\n+    }\n+\n+  /* Skip comment lines.  */\n+  while ((c = getchar()) == '#')\n+    {\n+      while ((c = getchar()) != EOF && c != '\\n');\n+      lineno++;\n+    }\n+\n+  /* c is the first character on the line, and it's not a comment\n+     line: copy this line into the buffer and return.  */\n+  while (c != EOF && c != '\\n')\n+    {\n+      if (count >= alloc)\n+\t{\n+\t  alloc *= 2;\n+\t  data = xrealloc (data, alloc);\n+\t}\n+      data[count++] = c;\n+      c = getchar();\n+    }\n+  lineno++;\n+  data[count] = '\\0';\n+\n+  buf->data = data;\n+  buf->alloced = alloc;\n+}\n+\n+/* The tester operates on a data file consisting of triples of lines:\n+   format switch\n+   input to be demangled\n+   expected output\n+\n+   The format switch is expected to be either the empty string, a\n+   line of the form --format=<name>, or just <name> by itself.  */\n+\n+#define FORMATS \"--format=\"\n+#define FORMATL (sizeof FORMATS - 1)\n+\n+int\n+main(argc, argv)\n+     int argc;\n+     char **argv;\n+{\n+  enum demangling_styles style;\n+  struct line format;\n+  struct line input;\n+  struct line expect;\n+  char *fstyle;\n+  char *result;\n+  int failures = 0;\n+  int tests = 0;\n+\n+  if (argc > 1)\n+    {\n+      fprintf (stderr, \"usage: %s < test-set\\n\", argv[0]);\n+      return 2;\n+    }\n+\n+  format.data = 0;\n+  input.data = 0;\n+  expect.data = 0;\n+\n+  for (;;)\n+    {\n+      getline (&format);\n+      if (feof (stdin))\n+\tbreak;\n+\n+      getline (&input);\n+      getline (&expect);\n+\n+      tests++;\n+\n+      fstyle = format.data;\n+      if (!strncmp (fstyle, FORMATS, FORMATL))\n+\tfstyle += FORMATL;\n+\n+      if (fstyle[0] == '\\0')\n+\tstyle = auto_demangling;\n+      else\n+\tstyle = cplus_demangle_name_to_style (fstyle);\n+\n+      if (style == unknown_demangling)\n+\t{\n+\t  printf (\"FAIL at line %d: unknown demangling style %s\\n\",\n+\t\t  lineno, fstyle);\n+\t  failures++;\n+\t  continue;\n+\t}\n+\n+      cplus_demangle_set_style (style);\n+\n+      result = cplus_demangle (input.data,\n+\t\t\t       DMGL_PARAMS|DMGL_ANSI|DMGL_VERBOSE|DMGL_TYPES);\n+\n+      if (result\n+\t  ? strcmp (result, expect.data)\n+\t  : strcmp (input.data, expect.data))\n+\t{\n+\t  printf (\"\\\n+FAIL at line %d, style %s:\\n\\\n+in:  %s\\n\\\n+out: %s\\n\\\n+exp: %s\\n\",\n+\t\t   lineno, fstyle,\n+\t\t   input.data,\n+\t\t   result,\n+\t\t   expect.data);\n+\t  failures++;\n+\t}\n+      free (result);\n+    }\n+\n+  free (format.data);\n+  free (input.data);\n+  free (expect.data);\n+\n+  printf (\"%s: %d tests, %d failures\\n\", argv[0], tests, failures);\n+  return failures ? 1 : 0;\n+}"}]}