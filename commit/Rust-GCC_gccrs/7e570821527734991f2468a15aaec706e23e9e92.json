{"sha": "7e570821527734991f2468a15aaec706e23e9e92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U1NzA4MjE1Mjc3MzQ5OTFmMjQ2OGExNWFhZWM3MDZlMjNlOWU5Mg==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2013-09-11T07:21:15Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-09-11T07:21:15Z"}, "message": "*\u00b7doc/invoke.texi:\u00b7Document\u00b7fxsr,\u00b7xsave\u00b7and\u00b7xsaveopt\u00b7options.\n\n*\u00b7doc/extend.texi:\u00b7Document\u00b7fxsr,\u00b7xsave\u00b7and\u00b7xsaveopt\u00b7builtins.\n\nFrom-SVN: r202490", "tree": {"sha": "e70e7c084c5c97f3e3b432d275ac38644ef32d7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e70e7c084c5c97f3e3b432d275ac38644ef32d7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e570821527734991f2468a15aaec706e23e9e92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e570821527734991f2468a15aaec706e23e9e92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e570821527734991f2468a15aaec706e23e9e92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e570821527734991f2468a15aaec706e23e9e92/comments", "author": null, "committer": null, "parents": [{"sha": "9e1376e94de56d624eb99bdcb5dff7a0bb03fc21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e1376e94de56d624eb99bdcb5dff7a0bb03fc21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e1376e94de56d624eb99bdcb5dff7a0bb03fc21"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "e0f7d07ed17f23e958783188fdf237685a7896b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e570821527734991f2468a15aaec706e23e9e92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e570821527734991f2468a15aaec706e23e9e92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e570821527734991f2468a15aaec706e23e9e92", "patch": "@@ -1,3 +1,8 @@\n+2013-09-11  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\n+\t* doc/invoke.texi: Document fxsr, xsave and xsaveopt options.\n+\t* doc/extend.texi: Document fxsr, xsave and xsaveopt builtins.\n+\n 2013-09-10  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/58380"}, {"sha": "eb0946b1cb4eb095f25fd1943c8018de32937933", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e570821527734991f2468a15aaec706e23e9e92/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e570821527734991f2468a15aaec706e23e9e92/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=7e570821527734991f2468a15aaec706e23e9e92", "patch": "@@ -10958,6 +10958,31 @@ unsigned int __builtin_ia32_lzcnt_u32(unsigned int);\n unsigned long long __builtin_ia32_lzcnt_u64 (unsigned long long);\n @end smallexample\n \n+The following built-in functions are available when @option{-mfxsr} is used.\n+All of them generate the machine instruction that is part of the name.\n+@smallexample\n+void __builtin_ia32_fxsave (void *)\n+void __builtin_ia32_fxrstor (void *)\n+void __builtin_ia32_fxsave64 (void *)\n+void __builtin_ia32_fxrstor64 (void *)\n+@end smallexample\n+\n+The following built-in functions are available when @option{-mxsave} is used.\n+All of them generate the machine instruction that is part of the name.\n+@smallexample\n+void __builtin_ia32_xsave (void *, long long)\n+void __builtin_ia32_xrstor (void *, long long)\n+void __builtin_ia32_xsave64 (void *, long long)\n+void __builtin_ia32_xrstor64 (void *, long long)\n+@end smallexample\n+\n+The following built-in functions are available when @option{-mxsaveopt} is used.\n+All of them generate the machine instruction that is part of the name.\n+@smallexample\n+void __builtin_ia32_xsaveopt (void *, long long)\n+void __builtin_ia32_xsaveopt64 (void *, long long)\n+@end smallexample\n+\n The following built-in functions are available when @option{-mtbm} is used.\n Both of them generate the immediate form of the bextr machine instruction.\n @smallexample"}, {"sha": "bb6338ed47ba5930c4569a7a249ecd649bbdbd80", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e570821527734991f2468a15aaec706e23e9e92/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e570821527734991f2468a15aaec706e23e9e92/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7e570821527734991f2468a15aaec706e23e9e92", "patch": "@@ -651,10 +651,10 @@ Objective-C and Objective-C++ Dialects}.\n -mavx2 -mavx512f -mavx512pf -mavx512er -mavx512cd @gol\n -maes -mpclmul -mfsgsbase -mrdrnd -mf16c -mfma @gol\n -msse4a -m3dnow -mpopcnt -mabm -mbmi -mtbm -mfma4 -mxop -mlzcnt @gol\n--mbmi2 -mrtm -mlwp -mthreads @gol\n+-mbmi2 -mfxsr -mxsave -mxsaveopt -mrtm -mlwp -mthreads @gol\n -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically -mstringop-strategy=@var{alg} @gol\n--mmemcpy-strategy=@var{strategy} -mmemset-strategy=@var{strategy} \n+-mmemcpy-strategy=@var{strategy} -mmemset-strategy=@var{strategy}\n -mpush-args  -maccumulate-outgoing-args  -m128bit-long-double @gol\n -m96bit-long-double -mlong-double-64 -mlong-double-80 @gol\n -mregparm=@var{num}  -msseregparm @gol\n@@ -14451,6 +14451,9 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mno-bmi2\n @itemx -mlzcnt\n @itemx -mno-lzcnt\n+@itemx -mfxsr\n+@itemx -mxsave\n+@itemx -mxsaveopt\n @itemx -mrtm\n @itemx -mtbm\n @itemx -mno-tbm\n@@ -14463,7 +14466,7 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n These switches enable or disable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4.1, AVX, AVX2, AVX512F, AVX512PF, AVX512ER, AVX512CD,\n AES, PCLMUL, FSGSBASE, RDRND, F16C, FMA, SSE4A, FMA4, XOP, LWP, ABM, BMI, BMI2,\n-LZCNT, RTM or 3DNow!@:\n+FXSR, XSAVE, XSAVEOPT, LZCNT, RTM or 3DNow!@:\n extended instruction sets.\n These extensions are also available as built-in functions: see\n @ref{X86 Built-in Functions}, for details of the functions enabled and"}]}