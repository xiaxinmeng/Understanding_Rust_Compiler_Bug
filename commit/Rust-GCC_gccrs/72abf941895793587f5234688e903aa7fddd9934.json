{"sha": "72abf941895793587f5234688e903aa7fddd9934", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJhYmY5NDE4OTU3OTM1ODdmNTIzNDY4OGU5MDNhYTdmZGRkOTkzNA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-03-21T03:44:15Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-03-21T03:44:15Z"}, "message": "pa.h (INSN_SETS_ARE_DELAYED): Define for the PA.\n\n\t* pa.h (INSN_SETS_ARE_DELAYED): Define for the PA.  Sets and\n\tclobbers that occur in millicode insns are delayed effects.\n\t(INSN_REFERENCES_ARE_DELAYED): Likewise but for argument references\n\toccuring in millicode insns.\n\nFrom-SVN: r3809", "tree": {"sha": "534e52ca664a929a42d26016bc42ccd649ce7fb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/534e52ca664a929a42d26016bc42ccd649ce7fb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72abf941895793587f5234688e903aa7fddd9934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72abf941895793587f5234688e903aa7fddd9934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72abf941895793587f5234688e903aa7fddd9934", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72abf941895793587f5234688e903aa7fddd9934/comments", "author": null, "committer": null, "parents": [{"sha": "742920c7bdb178d4d6e5eb5baf7f93ba9e2112b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/742920c7bdb178d4d6e5eb5baf7f93ba9e2112b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/742920c7bdb178d4d6e5eb5baf7f93ba9e2112b6"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "f9381eb8c03e9622c305c713d4793ae4156bc358", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72abf941895793587f5234688e903aa7fddd9934/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72abf941895793587f5234688e903aa7fddd9934/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=72abf941895793587f5234688e903aa7fddd9934", "patch": "@@ -1431,6 +1431,36 @@ while (0)\n   if (GET_CODE (INSN) == CALL_INSN\t\t\t\t\t\\\n       || (GET_CODE (INSN) == JUMP_INSN && ! simplejump_p (insn)))\t\\\n     LENGTH += 1;\n+\n+/* Millicode insns are actually function calls with some special\n+   constraints on arguments and register usage.\n+\n+   Millicode calls always expect their arguments in the integer argument\n+   registers, and always return their result in %r29 (ret1).  They\n+   are expected to clobber their arguments, %r1, %r29, and %r31 and\n+   nothing else.\n+\n+   These macros tell reorg that the references to arguments and \n+   register clobbers for millicode calls do not appear to happen \n+   until after the millicode call.  This allows reorg to put insns\n+   which set the argument registers into the delay slot of the millicode\n+   call -- thus they act more like traditional CALL_INSNs.\n+\n+   get_attr_type will try to recognize the given insn, so make sure to\n+   filter out things it will not accept.  SEQUENCE and USE insns in \n+   particular.  */\n+#define INSN_SETS_ARE_DELAYED(X) \\\n+  ((GET_CODE (X) == INSN\t\t\t\\\n+    && GET_CODE (PATTERN (X)) != SEQUENCE\t\\\n+    && GET_CODE (PATTERN (X)) != USE\t\t\\\n+    && get_attr_type (X) == TYPE_MILLI))\n+\n+#define INSN_REFERENCES_ARE_DELAYED(X) \\\n+  ((GET_CODE (X) == INSN\t\t\t\\\n+    && GET_CODE (PATTERN (X)) != SEQUENCE\t\\\n+    && GET_CODE (PATTERN (X)) != USE\t\t\\\n+    && get_attr_type (X) == TYPE_MILLI))\t\n+\n \f\n /* Control the assembler format that we output.  */\n "}]}