{"sha": "5d9d834de228faac2d1da267f818b4d91d8b7235", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ5ZDgzNGRlMjI4ZmFhYzJkMWRhMjY3ZjgxOGI0ZDkxZDhiNzIzNQ==", "commit": {"author": {"name": "Daniel Santos", "email": "dansan@gcc.gnu.org", "date": "2017-08-01T22:33:16Z"}, "committer": {"name": "Daniel Santos", "email": "dansan@gcc.gnu.org", "date": "2017-08-01T22:33:16Z"}, "message": "[i386] Remove ix86_frame::outlined_save_offset and machine_function::call_ms2sysv_pad_out\n\nix86_frame::outlined_save_offset isn't used and\nmachine_function::call_ms2sysv_pad_out is an ineffective strategy.\n\n2017-08-01  Daniel Santos  <daniel.santos@pobox.com>\n\n        * config/i386/i386.h (ix86_frame::outlined_save_offset): Remove field.\n        (machine_function::call_ms2sysv_pad_out): Remove field.\n        * config/i386/i386.c (xlogue_layout::get_stack_space_used): Modify.\n        (ix86_compute_frame_layout): Likewise.\n\nFrom-SVN: r250803", "tree": {"sha": "049b1fd43d9d40d3d3ae2eb702a790ac86cf61f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/049b1fd43d9d40d3d3ae2eb702a790ac86cf61f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d9d834de228faac2d1da267f818b4d91d8b7235", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9d834de228faac2d1da267f818b4d91d8b7235", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d9d834de228faac2d1da267f818b4d91d8b7235", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9d834de228faac2d1da267f818b4d91d8b7235/comments", "author": null, "committer": null, "parents": [{"sha": "9f2cb25e3f332d2f409455e818a2046fa6089b2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f2cb25e3f332d2f409455e818a2046fa6089b2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f2cb25e3f332d2f409455e818a2046fa6089b2d"}], "stats": {"total": 42, "additions": 16, "deletions": 26}, "files": [{"sha": "7bd462a972b06341885327896fc868df4895b633", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d834de228faac2d1da267f818b4d91d8b7235/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d834de228faac2d1da267f818b4d91d8b7235/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d9d834de228faac2d1da267f818b4d91d8b7235", "patch": "@@ -1,3 +1,10 @@\n+2017-08-01  Daniel Santos  <daniel.santos@pobox.com>\n+\n+\t* config/i386/i386.h (ix86_frame::outlined_save_offset): Remove field.\n+\t(machine_function::call_ms2sysv_pad_out): Remove field.\n+\t* config/i386/i386.c (xlogue_layout::get_stack_space_used): Modify.\n+\t(ix86_compute_frame_layout): Likewise.\n+\n 2017-08-01  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/81654\n@@ -47,8 +54,8 @@\n \tcalls.\n \n 2017-08-01  Jerome Lambourg  <lambourg@adacore.com>\n-            Doug Rupp  <rupp@adacore.com>\n-            Olivier Hainque  <hainque@adacore.com>\n+\t    Doug Rupp  <rupp@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n \n \t* config.gcc (arm-wrs-vxworks*): Rework to handle arm-wrs-vxworks7 as\n \twell as arm-wrs-vxworks. Update target_cpu_name from arm6 (arch v3) to"}, {"sha": "cd20b1be6ec09d2b3973b2684d3a42c8b4ff44a6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d834de228faac2d1da267f818b4d91d8b7235/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d834de228faac2d1da267f818b4d91d8b7235/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5d9d834de228faac2d1da267f818b4d91d8b7235", "patch": "@@ -2492,9 +2492,7 @@ class xlogue_layout {\n     unsigned last_reg = m->call_ms2sysv_extra_regs + MIN_REGS - 1;\n \n     gcc_assert (m->call_ms2sysv_extra_regs <= MAX_EXTRA_REGS);\n-    return m_regs[last_reg].offset\n-\t   + (m->call_ms2sysv_pad_out ? 8 : 0)\n-\t   + STUB_INDEX_OFFSET;\n+    return m_regs[last_reg].offset + STUB_INDEX_OFFSET;\n   }\n \n   /* Returns the offset for the base pointer used by the stub.  */\n@@ -12865,13 +12863,12 @@ ix86_compute_frame_layout (void)\n \t{\n \t  unsigned count = xlogue_layout::count_stub_managed_regs ();\n \t  m->call_ms2sysv_extra_regs = count - xlogue_layout::MIN_REGS;\n+\t  m->call_ms2sysv_pad_in = 0;\n \t}\n     }\n \n   frame->nregs = ix86_nsaved_regs ();\n   frame->nsseregs = ix86_nsaved_sseregs ();\n-  m->call_ms2sysv_pad_in = 0;\n-  m->call_ms2sysv_pad_out = 0;\n \n   /* 64-bit MS ABI seem to require stack alignment to be always 16,\n      except for function prologues, leaf functions and when the defult\n@@ -12973,16 +12970,7 @@ ix86_compute_frame_layout (void)\n       gcc_assert (!frame->nsseregs);\n \n       m->call_ms2sysv_pad_in = !!(offset & UNITS_PER_WORD);\n-\n-      /* Select an appropriate layout for incoming stack offset.  */\n-      const struct xlogue_layout &xlogue = xlogue_layout::get_instance ();\n-\n-      if ((offset + xlogue.get_stack_space_used ()) & UNITS_PER_WORD)\n-\tm->call_ms2sysv_pad_out = 1;\n-\n-      offset += xlogue.get_stack_space_used ();\n-      gcc_assert (!(offset & 0xf));\n-      frame->outlined_save_offset = offset;\n+      offset += xlogue_layout::get_instance ().get_stack_space_used ();\n     }\n \n   /* Align and set SSE register save area.  */\n@@ -13010,6 +12998,7 @@ ix86_compute_frame_layout (void)\n \n   /* Align start of frame for local function.  */\n   if (stack_realign_fp\n+      || m->call_ms2sysv\n       || offset != frame->sse_reg_save_offset\n       || size != 0\n       || !crtl->is_leaf"}, {"sha": "e8ae3e3b3cc955ba4d23e68941c4f5e82c233433", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d834de228faac2d1da267f818b4d91d8b7235/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d834de228faac2d1da267f818b4d91d8b7235/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=5d9d834de228faac2d1da267f818b4d91d8b7235", "patch": "@@ -2484,8 +2484,7 @@ enum avx_u128_state\n \t\t\t<- end of stub-saved/restored regs\n      [padding1]\n    ]\n-\t\t\t\t\t<- outlined_save_offset\n-\t\t\t\t\t<- sse_regs_save_offset\n+\t\t\t\t\t<- sse_reg_save_offset\n    [padding2]\n \t\t       |\t\t<- FRAME_POINTER\n    [va_arg registers]  |\n@@ -2511,7 +2510,6 @@ struct GTY(()) ix86_frame\n   HOST_WIDE_INT reg_save_offset;\n   HOST_WIDE_INT stack_realign_allocate_offset;\n   HOST_WIDE_INT stack_realign_offset;\n-  HOST_WIDE_INT outlined_save_offset;\n   HOST_WIDE_INT sse_reg_save_offset;\n \n   /* When save_regs_using_mov is set, emit prologue using\n@@ -2647,17 +2645,13 @@ struct GTY(()) machine_function {\n   BOOL_BITFIELD arg_reg_available : 1;\n \n   /* If true, we're out-of-lining reg save/restore for regs clobbered\n-     by ms_abi functions calling a sysv function.  */\n+     by 64-bit ms_abi functions calling a sysv_abi function.  */\n   BOOL_BITFIELD call_ms2sysv : 1;\n \n   /* If true, the incoming 16-byte aligned stack has an offset (of 8) and\n-     needs padding.  */\n+     needs padding prior to out-of-line stub save/restore area.  */\n   BOOL_BITFIELD call_ms2sysv_pad_in : 1;\n \n-  /* If true, the size of the stub save area plus inline int reg saves will\n-     result in an 8 byte offset, so needs padding.  */\n-  BOOL_BITFIELD call_ms2sysv_pad_out : 1;\n-\n   /* This is the number of extra registers saved by stub (valid range is\n      0-6). Each additional register is only saved/restored by the stubs\n      if all successive ones are. (Will always be zero when using a hard"}]}