{"sha": "943cf9cf629016365473adf17f42df2a61792394", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQzY2Y5Y2Y2MjkwMTYzNjU0NzNhZGYxN2Y0MmRmMmE2MTc5MjM5NA==", "commit": {"author": {"name": "Chris Manghane", "email": "cmang@google.com", "date": "2014-12-19T20:17:42Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-19T20:17:42Z"}, "message": "go-gcc.cc (array_constructor_expression): Don't construct arrays of zero-sized values.\n\n\t* go-gcc.cc (array_constructor_expression): Don't construct arrays\n\tof zero-sized values.\n\nFrom-SVN: r218974", "tree": {"sha": "ee367f74244d4fbd85ad50718a33ce496bb30439", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee367f74244d4fbd85ad50718a33ce496bb30439"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/943cf9cf629016365473adf17f42df2a61792394", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/943cf9cf629016365473adf17f42df2a61792394", "html_url": "https://github.com/Rust-GCC/gccrs/commit/943cf9cf629016365473adf17f42df2a61792394", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/943cf9cf629016365473adf17f42df2a61792394/comments", "author": null, "committer": null, "parents": [{"sha": "82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "7df6cbfffd4db2ce359e2ae1ccc6336d68c143fe", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943cf9cf629016365473adf17f42df2a61792394/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943cf9cf629016365473adf17f42df2a61792394/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=943cf9cf629016365473adf17f42df2a61792394", "patch": "@@ -1,3 +1,8 @@\n+2014-12-19  Chris Manghane  <cmang@google.com>\n+\n+\t* go-gcc.cc (array_constructor_expression): Don't construct arrays\n+\tof zero-sized values.\n+\n 2014-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* go-lang.c: Remove redundant enum from machine_mode."}, {"sha": "c1006303cb6eda479846443336593869a4b7c906", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943cf9cf629016365473adf17f42df2a61792394/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943cf9cf629016365473adf17f42df2a61792394/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=943cf9cf629016365473adf17f42df2a61792394", "patch": "@@ -1688,16 +1688,20 @@ Gcc_backend::constructor_expression(Btype* btype,\n Bexpression*\n Gcc_backend::array_constructor_expression(\n     Btype* array_btype, const std::vector<unsigned long>& indexes,\n-    const std::vector<Bexpression*>& vals, Location)\n+    const std::vector<Bexpression*>& vals, Location location)\n {\n   tree type_tree = array_btype->get_tree();\n   if (type_tree == error_mark_node)\n     return this->error_expression();\n \n   gcc_assert(indexes.size() == vals.size());\n+\n+  tree element_type = TREE_TYPE(type_tree);\n+  HOST_WIDE_INT element_size = int_size_in_bytes(element_type);\n   vec<constructor_elt, va_gc> *init;\n-  vec_alloc(init, vals.size());\n+  vec_alloc(init, element_size == 0 ? 0 : vals.size());\n \n+  tree sink = NULL_TREE;\n   bool is_constant = true;\n   for (size_t i = 0; i < vals.size(); ++i)\n     {\n@@ -1708,6 +1712,16 @@ Gcc_backend::array_constructor_expression(\n           || val == error_mark_node)\n         return this->error_expression();\n \n+      if (element_size == 0)\n+       {\n+         // GIMPLE cannot represent arrays of zero-sized types so trying\n+         // to construct an array of zero-sized values might lead to errors.\n+         // Instead, we evaluate each expression that would have been added as\n+         // an array value for its side-effects and construct an empty array.\n+\t append_to_statement_list(val, &sink);\n+         continue;\n+       }\n+\n       if (!TREE_CONSTANT(val))\n         is_constant = false;\n \n@@ -1720,6 +1734,9 @@ Gcc_backend::array_constructor_expression(\n   tree ret = build_constructor(type_tree, init);\n   if (is_constant)\n     TREE_CONSTANT(ret) = 1;\n+  if (sink != NULL_TREE)\n+    ret = fold_build2_loc(location.gcc_location(), COMPOUND_EXPR,\n+                         type_tree, sink, ret);\n   return this->make_expression(ret);\n }\n "}]}