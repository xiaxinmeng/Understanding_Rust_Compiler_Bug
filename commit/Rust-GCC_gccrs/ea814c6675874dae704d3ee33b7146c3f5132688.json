{"sha": "ea814c6675874dae704d3ee33b7146c3f5132688", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE4MTRjNjY3NTg3NGRhZTcwNGQzZWUzM2I3MTQ2YzNmNTEzMjY4OA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-07-25T19:43:15Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-07-25T19:43:15Z"}, "message": "expr.c (expand_expr_real_1): Do not expand operand #1 and #2 of BIT_FIELD_REF for ignored results.\n\n\t* expr.c (expand_expr_real_1): Do not expand operand #1 and #2\n\tof BIT_FIELD_REF for ignored results.\n\t* fold-const.c (fold_ternary_loc) <BIT_FIELD_REF>: Check that the\n\tCONSTRUCTOR has vector type before using vector accessors on it.\n\t* gimplify.c (gimplify_compound_lval): Do not gimplify operand #1 and\n\t#2 of BIT_FIELD_REF.\n\t(gimplify_expr) <BIT_FIELD_REF>: Likewise.\n\t* tree-nested.c (convert_nonlocal_reference_op) <BIT_FIELD_REF>: Do\n\tnot process operand #1 and #2.\n\t(convert_local_reference_op): Likewise.\n\t* tree-ssa-pre.c (create_component_ref_by_pieces_1): Remove superfluous\n\tbreaks throughout.\n\t<BIT_FIELD_REF>: Reuse operand #1 and #2 directly.\n\t* tree.c (stabilize_reference) <BIT_FIELD_REF>: Do not stabilize\n\toperand #1 and #2.\n\t(UPDATE_FLAGS): Do not consider operand #2 of BIT_FIELD_REF.\n\t(build6_stat): Delete.\n\t* tree.h (build6_stat, build6, build6_stat_loc, build6_loc): Likewise.\nada/\n\t* gcc-interface/utils2.c (gnat_stabilize_reference) <BIT_FIELD_REF>: Do\n\tnot stabilize operand #1 and #2.\n\nFrom-SVN: r189864", "tree": {"sha": "bc5598b0791be6690f4675fc60b70ba3484f2c18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc5598b0791be6690f4675fc60b70ba3484f2c18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea814c6675874dae704d3ee33b7146c3f5132688", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea814c6675874dae704d3ee33b7146c3f5132688", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea814c6675874dae704d3ee33b7146c3f5132688", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea814c6675874dae704d3ee33b7146c3f5132688/comments", "author": null, "committer": null, "parents": [{"sha": "2514d7f1ffa6049efcf198c373c4d13cef266b03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2514d7f1ffa6049efcf198c373c4d13cef266b03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2514d7f1ffa6049efcf198c373c4d13cef266b03"}], "stats": {"total": 181, "additions": 51, "deletions": 130}, "files": [{"sha": "d8f220782c0384b9ff18bed570f1b7412a252af6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea814c6675874dae704d3ee33b7146c3f5132688/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea814c6675874dae704d3ee33b7146c3f5132688/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea814c6675874dae704d3ee33b7146c3f5132688", "patch": "@@ -1,3 +1,24 @@\n+2012-07-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* expr.c (expand_expr_real_1): Do not expand operand #1 and #2\n+\tof BIT_FIELD_REF for ignored results.\n+\t* fold-const.c (fold_ternary_loc) <BIT_FIELD_REF>: Check that the\n+\tCONSTRUCTOR has vector type before using vector accessors on it.\n+\t* gimplify.c (gimplify_compound_lval): Do not gimplify operand #1 and\n+\t#2 of BIT_FIELD_REF.\n+\t(gimplify_expr) <BIT_FIELD_REF>: Likewise.\n+\t* tree-nested.c (convert_nonlocal_reference_op) <BIT_FIELD_REF>: Do\n+\tnot process operand #1 and #2.\n+\t(convert_local_reference_op): Likewise.\n+\t* tree-ssa-pre.c (create_component_ref_by_pieces_1): Remove superfluous\n+\tbreaks throughout.\n+\t<BIT_FIELD_REF>: Reuse operand #1 and #2 directly.\n+\t* tree.c (stabilize_reference) <BIT_FIELD_REF>: Do not stabilize\n+\toperand #1 and #2.\n+\t(UPDATE_FLAGS): Do not consider operand #2 of BIT_FIELD_REF.\n+\t(build6_stat): Delete.\n+\t* tree.h (build6_stat, build6, build6_stat_loc, build6_loc): Likewise.\n+\n 2012-07-25 Marc Glisse <marc.glisse@inria.fr>\n \n \tPR tree-optimization/30318"}, {"sha": "d7662e73091a0b49f48c6cdfb39d30f7c323a527", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea814c6675874dae704d3ee33b7146c3f5132688/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea814c6675874dae704d3ee33b7146c3f5132688/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ea814c6675874dae704d3ee33b7146c3f5132688", "patch": "@@ -1,3 +1,8 @@\n+2012-07-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils2.c (gnat_stabilize_reference) <BIT_FIELD_REF>: Do\n+\tnot stabilize operand #1 and #2.\n+\n 2012-07-23  Tristan Gingold  <gingold@adacore.com>\n \n \t* gcc-interface/trans.c (Handled_Sequence_Of_Statements_to_gnu): Use"}, {"sha": "a8a21a6f869d077f943e79aba248a97e73c0db1f", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea814c6675874dae704d3ee33b7146c3f5132688/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea814c6675874dae704d3ee33b7146c3f5132688/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=ea814c6675874dae704d3ee33b7146c3f5132688", "patch": "@@ -2644,10 +2644,7 @@ gnat_stabilize_reference (tree ref, bool force, bool *success)\n       result = build3 (BIT_FIELD_REF, type,\n \t\t       gnat_stabilize_reference (TREE_OPERAND (ref, 0), force,\n \t\t\t\t\t\t success),\n-\t\t       gnat_stabilize_reference_1 (TREE_OPERAND (ref, 1),\n-\t\t\t\t\t\t   force),\n-\t\t       gnat_stabilize_reference_1 (TREE_OPERAND (ref, 2),\n-\t\t\t\t\t\t   force));\n+\t\t       TREE_OPERAND (ref, 1), TREE_OPERAND (ref, 2));\n       break;\n \n     case ARRAY_REF:"}, {"sha": "e2dd4d2597a73f4a01c0562fef9613afe666e84b", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea814c6675874dae704d3ee33b7146c3f5132688/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea814c6675874dae704d3ee33b7146c3f5132688/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ea814c6675874dae704d3ee33b7146c3f5132688", "patch": "@@ -9111,7 +9111,9 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t}\n \n       if (TREE_CODE_CLASS (code) == tcc_unary\n-\t  || code == COMPONENT_REF || code == INDIRECT_REF)\n+\t  || code == BIT_FIELD_REF\n+\t  || code == COMPONENT_REF\n+\t  || code == INDIRECT_REF)\n \treturn expand_expr (treeop0, const0_rtx, VOIDmode,\n \t\t\t    modifier);\n \n@@ -9123,13 +9125,6 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t  expand_expr (treeop1, const0_rtx, VOIDmode, modifier);\n \t  return const0_rtx;\n \t}\n-      else if (code == BIT_FIELD_REF)\n-\t{\n-\t  expand_expr (treeop0, const0_rtx, VOIDmode, modifier);\n-\t  expand_expr (treeop1, const0_rtx, VOIDmode, modifier);\n-\t  expand_expr (treeop2, const0_rtx, VOIDmode, modifier);\n-\t  return const0_rtx;\n-\t}\n \n       target = 0;\n     }"}, {"sha": "c1369601fff4be783c8bb5602d618b1d713e2e02", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea814c6675874dae704d3ee33b7146c3f5132688/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea814c6675874dae704d3ee33b7146c3f5132688/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=ea814c6675874dae704d3ee33b7146c3f5132688", "patch": "@@ -14043,7 +14043,8 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \n     case BIT_FIELD_REF:\n       if ((TREE_CODE (arg0) == VECTOR_CST\n-\t   || TREE_CODE (arg0) == CONSTRUCTOR)\n+\t   || (TREE_CODE (arg0) == CONSTRUCTOR\n+\t       && TREE_CODE (TREE_TYPE (arg0)) == VECTOR_TYPE))\n \t  && (type == TREE_TYPE (TREE_TYPE (arg0))\n \t      || (TREE_CODE (type) == VECTOR_TYPE\n \t\t  && TREE_TYPE (type) == TREE_TYPE (TREE_TYPE (arg0)))))"}, {"sha": "f48b81f4b5377e1b50a3c6259e4e93ee5250dbda", "filename": "gcc/gimplify.c", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea814c6675874dae704d3ee33b7146c3f5132688/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea814c6675874dae704d3ee33b7146c3f5132688/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=ea814c6675874dae704d3ee33b7146c3f5132688", "patch": "@@ -2257,7 +2257,7 @@ gimplify_compound_lval (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t\t\tfallback | fb_lvalue);\n   ret = MIN (ret, tret);\n \n-  /* And finally, the indices and operands to BIT_FIELD_REF.  During this\n+  /* And finally, the indices and operands of ARRAY_REF.  During this\n      loop we also remove any useless conversions.  */\n   for (; VEC_length (tree, stack) > 0; )\n     {\n@@ -2273,15 +2273,6 @@ gimplify_compound_lval (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t      ret = MIN (ret, tret);\n \t    }\n \t}\n-      else if (TREE_CODE (t) == BIT_FIELD_REF)\n-\t{\n-\t  tret = gimplify_expr (&TREE_OPERAND (t, 1), pre_p, post_p,\n-\t\t\t\tis_gimple_val, fb_rvalue);\n-\t  ret = MIN (ret, tret);\n-\t  tret = gimplify_expr (&TREE_OPERAND (t, 2), pre_p, post_p,\n-\t\t\t\tis_gimple_val, fb_rvalue);\n-\t  ret = MIN (ret, tret);\n-\t}\n \n       STRIP_USELESS_TYPE_CONVERSION (TREE_OPERAND (t, 0));\n \n@@ -7406,19 +7397,9 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t  break;\n \n \tcase BIT_FIELD_REF:\n-\t  {\n-\t    enum gimplify_status r0, r1, r2;\n-\n-\t    r0 = gimplify_expr (&TREE_OPERAND (*expr_p, 0), pre_p,\n-\t\t\t\tpost_p, is_gimple_lvalue, fb_either);\n-\t    r1 = gimplify_expr (&TREE_OPERAND (*expr_p, 1), pre_p,\n-\t\t\t\tpost_p, is_gimple_val, fb_rvalue);\n-\t    r2 = gimplify_expr (&TREE_OPERAND (*expr_p, 2), pre_p,\n-\t\t\t\tpost_p, is_gimple_val, fb_rvalue);\n-\t    recalculate_side_effects (*expr_p);\n-\n-\t    ret = MIN (r0, MIN (r1, r2));\n-\t  }\n+\t  ret = gimplify_expr (&TREE_OPERAND (*expr_p, 0), pre_p,\n+\t\t\t       post_p, is_gimple_lvalue, fb_either);\n+\t  recalculate_side_effects (*expr_p);\n \t  break;\n \n \tcase TARGET_MEM_REF:"}, {"sha": "c0a6250fe587ba13dfb9bb9436e816768b7393ce", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea814c6675874dae704d3ee33b7146c3f5132688/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea814c6675874dae704d3ee33b7146c3f5132688/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=ea814c6675874dae704d3ee33b7146c3f5132688", "patch": "@@ -1013,13 +1013,6 @@ convert_nonlocal_reference_op (tree *tp, int *walk_subtrees, void *data)\n \t      walk_tree (&TREE_OPERAND (t, 3), convert_nonlocal_reference_op,\n \t\t\t wi, NULL);\n \t    }\n-\t  else if (TREE_CODE (t) == BIT_FIELD_REF)\n-\t    {\n-\t      walk_tree (&TREE_OPERAND (t, 1), convert_nonlocal_reference_op,\n-\t\t\t wi, NULL);\n-\t      walk_tree (&TREE_OPERAND (t, 2), convert_nonlocal_reference_op,\n-\t\t\t wi, NULL);\n-\t    }\n \t}\n       wi->val_only = false;\n       walk_tree (tp, convert_nonlocal_reference_op, wi, NULL);\n@@ -1491,13 +1484,6 @@ convert_local_reference_op (tree *tp, int *walk_subtrees, void *data)\n \t      walk_tree (&TREE_OPERAND (t, 3), convert_local_reference_op, wi,\n \t\t\t NULL);\n \t    }\n-\t  else if (TREE_CODE (t) == BIT_FIELD_REF)\n-\t    {\n-\t      walk_tree (&TREE_OPERAND (t, 1), convert_local_reference_op, wi,\n-\t\t\t NULL);\n-\t      walk_tree (&TREE_OPERAND (t, 2), convert_local_reference_op, wi,\n-\t\t\t NULL);\n-\t    }\n \t}\n       wi->val_only = false;\n       walk_tree (tp, convert_local_reference_op, wi, NULL);"}, {"sha": "8c34c9ba9a698efadc5d7c4a88a2104676e6f219", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea814c6675874dae704d3ee33b7146c3f5132688/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea814c6675874dae704d3ee33b7146c3f5132688/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=ea814c6675874dae704d3ee33b7146c3f5132688", "patch": "@@ -2667,7 +2667,7 @@ create_component_ref_by_pieces_1 (basic_block block, vn_reference_t ref,\n \t  CALL_EXPR_STATIC_CHAIN (folded) = sc;\n \treturn folded;\n       }\n-      break;\n+\n     case MEM_REF:\n       {\n \ttree baseop = create_component_ref_by_pieces_1 (block, ref, operand,\n@@ -2690,7 +2690,7 @@ create_component_ref_by_pieces_1 (basic_block block, vn_reference_t ref,\n \t  }\n \treturn fold_build2 (MEM_REF, currop->type, baseop, offset);\n       }\n-      break;\n+\n     case TARGET_MEM_REF:\n       {\n \tpre_expr op0expr, op1expr;\n@@ -2720,7 +2720,7 @@ create_component_ref_by_pieces_1 (basic_block block, vn_reference_t ref,\n \treturn build5 (TARGET_MEM_REF, currop->type,\n \t\t       baseop, currop->op2, genop0, currop->op1, genop1);\n       }\n-      break;\n+\n     case ADDR_EXPR:\n       if (currop->op0)\n \t{\n@@ -2732,17 +2732,15 @@ create_component_ref_by_pieces_1 (basic_block block, vn_reference_t ref,\n     case IMAGPART_EXPR:\n     case VIEW_CONVERT_EXPR:\n       {\n-\ttree folded;\n \ttree genop0 = create_component_ref_by_pieces_1 (block, ref,\n \t\t\t\t\t\t\toperand,\n \t\t\t\t\t\t\tstmts, domstmt);\n \tif (!genop0)\n \t  return NULL_TREE;\n-\tfolded = fold_build1 (currop->opcode, currop->type,\n-\t\t\t      genop0);\n-\treturn folded;\n+\n+\treturn fold_build1 (currop->opcode, currop->type, genop0);\n       }\n-      break;\n+\n     case WITH_SIZE_EXPR:\n       {\n \ttree genop0 = create_component_ref_by_pieces_1 (block, ref, operand,\n@@ -2759,28 +2757,18 @@ create_component_ref_by_pieces_1 (basic_block block, vn_reference_t ref,\n \n \treturn fold_build2 (currop->opcode, currop->type, genop0, genop1);\n       }\n-      break;\n+\n     case BIT_FIELD_REF:\n       {\n-\ttree folded;\n \ttree genop0 = create_component_ref_by_pieces_1 (block, ref, operand,\n \t\t\t\t\t\t\tstmts, domstmt);\n-\tpre_expr op1expr = get_or_alloc_expr_for (currop->op0);\n-\tpre_expr op2expr = get_or_alloc_expr_for (currop->op1);\n-\ttree genop1;\n-\ttree genop2;\n+\ttree op1 = currop->op0;\n+\ttree op2 = currop->op1;\n \n \tif (!genop0)\n \t  return NULL_TREE;\n-\tgenop1 = find_or_generate_expression (block, op1expr, stmts, domstmt);\n-\tif (!genop1)\n-\t  return NULL_TREE;\n-\tgenop2 = find_or_generate_expression (block, op2expr, stmts, domstmt);\n-\tif (!genop2)\n-\t  return NULL_TREE;\n-\tfolded = fold_build3 (BIT_FIELD_REF, currop->type, genop0, genop1,\n-\t\t\t      genop2);\n-\treturn folded;\n+\n+\treturn fold_build3 (BIT_FIELD_REF, currop->type, genop0, op1, op2);\n       }\n \n       /* For array ref vn_reference_op's, operand 1 of the array ref\n@@ -2866,10 +2854,9 @@ create_component_ref_by_pieces_1 (basic_block block, vn_reference_t ref,\n \t      return NULL_TREE;\n \t  }\n \n-\treturn fold_build3 (COMPONENT_REF, TREE_TYPE (op1), op0, op1,\n-\t\t\t    genop2);\n+\treturn fold_build3 (COMPONENT_REF, TREE_TYPE (op1), op0, op1, genop2);\n       }\n-      break;\n+\n     case SSA_NAME:\n       {\n \tpre_expr op0expr = get_or_alloc_expr_for (currop->op0);"}, {"sha": "6f9c91d109ecf3d5403be4a672b0813270d5bafb", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea814c6675874dae704d3ee33b7146c3f5132688/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea814c6675874dae704d3ee33b7146c3f5132688/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ea814c6675874dae704d3ee33b7146c3f5132688", "patch": "@@ -3525,8 +3525,7 @@ stabilize_reference (tree ref)\n     case BIT_FIELD_REF:\n       result = build_nt (BIT_FIELD_REF,\n \t\t\t stabilize_reference (TREE_OPERAND (ref, 0)),\n-\t\t\t stabilize_reference_1 (TREE_OPERAND (ref, 1)),\n-\t\t\t stabilize_reference_1 (TREE_OPERAND (ref, 2)));\n+\t\t\t TREE_OPERAND (ref, 1), TREE_OPERAND (ref, 2));\n       break;\n \n     case ARRAY_REF:\n@@ -3696,8 +3695,6 @@ do { tree _node = (NODE); \\\n \t  if (TREE_OPERAND (node, 2))\n \t    UPDATE_FLAGS (TREE_OPERAND (node, 2));\n \t}\n-      else if (TREE_CODE (node) == BIT_FIELD_REF)\n-\tUPDATE_FLAGS (TREE_OPERAND (node, 2));\n     }\n \n   node = lang_hooks.expr_to_decl (node, &tc, &se);\n@@ -3969,37 +3966,6 @@ build5_stat (enum tree_code code, tree tt, tree arg0, tree arg1,\n   return t;\n }\n \n-tree\n-build6_stat (enum tree_code code, tree tt, tree arg0, tree arg1,\n-\t     tree arg2, tree arg3, tree arg4, tree arg5 MEM_STAT_DECL)\n-{\n-  bool constant, read_only, side_effects;\n-  tree t;\n-\n-  gcc_assert (code == TARGET_MEM_REF);\n-\n-  t = make_node_stat (code PASS_MEM_STAT);\n-  TREE_TYPE (t) = tt;\n-\n-  side_effects = TREE_SIDE_EFFECTS (t);\n-\n-  PROCESS_ARG(0);\n-  PROCESS_ARG(1);\n-  PROCESS_ARG(2);\n-  PROCESS_ARG(3);\n-  PROCESS_ARG(4);\n-  if (code == TARGET_MEM_REF)\n-    side_effects = 0;\n-  PROCESS_ARG(5);\n-\n-  TREE_SIDE_EFFECTS (t) = side_effects;\n-  TREE_THIS_VOLATILE (t)\n-    = (code == TARGET_MEM_REF\n-       && arg5 && TREE_THIS_VOLATILE (arg5));\n-\n-  return t;\n-}\n-\n /* Build a simple MEM_REF tree with the sematics of a plain INDIRECT_REF\n    on the pointer PTR.  */\n "}, {"sha": "cf3b2cdbcd64e756bccdd1917dce688009e47f8f", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea814c6675874dae704d3ee33b7146c3f5132688/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea814c6675874dae704d3ee33b7146c3f5132688/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ea814c6675874dae704d3ee33b7146c3f5132688", "patch": "@@ -4245,12 +4245,8 @@ extern tree build4_stat (enum tree_code, tree, tree, tree, tree,\n extern tree build5_stat (enum tree_code, tree, tree, tree, tree, tree,\n \t\t\t tree MEM_STAT_DECL);\n #define build5(c,t1,t2,t3,t4,t5,t6) build5_stat (c,t1,t2,t3,t4,t5,t6 MEM_STAT_INFO)\n-extern tree build6_stat (enum tree_code, tree, tree, tree, tree, tree,\n-\t\t\t tree, tree MEM_STAT_DECL);\n-#define build6(c,t1,t2,t3,t4,t5,t6,t7) \\\n-  build6_stat (c,t1,t2,t3,t4,t5,t6,t7 MEM_STAT_INFO)\n \n-/* _loc versions of build[1-6].  */\n+/* _loc versions of build[1-5].  */\n \n static inline tree\n build1_stat_loc (location_t loc, enum tree_code code, tree type,\n@@ -4311,20 +4307,6 @@ build5_stat_loc (location_t loc, enum tree_code code, tree type, tree arg0,\n #define build5_loc(l,c,t1,t2,t3,t4,t5,t6) \\\n   build5_stat_loc (l,c,t1,t2,t3,t4,t5,t6 MEM_STAT_INFO)\n \n-static inline tree\n-build6_stat_loc (location_t loc, enum tree_code code, tree type, tree arg0,\n-\t\t tree arg1, tree arg2, tree arg3, tree arg4,\n-\t\t tree arg5 MEM_STAT_DECL)\n-{\n-  tree t = build6_stat (code, type, arg0, arg1, arg2, arg3, arg4,\n-\t\t\targ5 PASS_MEM_STAT);\n-  if (CAN_HAVE_LOCATION_P (t))\n-    SET_EXPR_LOCATION (t, loc);\n-  return t;\n-}\n-#define build6_loc(l,c,t1,t2,t3,t4,t5,t6,t7) \\\n-  build6_stat_loc (l,c,t1,t2,t3,t4,t5,t6,t7 MEM_STAT_INFO)\n-\n extern tree build_var_debug_value_stat (tree, tree MEM_STAT_DECL);\n #define build_var_debug_value(t1,t2) \\\n   build_var_debug_value_stat (t1,t2 MEM_STAT_INFO)"}]}