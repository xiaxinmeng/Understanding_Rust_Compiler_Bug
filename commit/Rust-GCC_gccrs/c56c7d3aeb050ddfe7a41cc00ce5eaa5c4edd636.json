{"sha": "c56c7d3aeb050ddfe7a41cc00ce5eaa5c4edd636", "node_id": "C_kwDOANBUbNoAKGM1NmM3ZDNhZWIwNTBkZGZlN2E0MWNjMDBjZTVlYWE1YzRlZGQ2MzY", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2022-08-10T21:04:29Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-09-06T07:14:21Z"}, "message": "[Ada] Cope with scalar subtypes that have a non-scalar basetype.\n\nIn some cases, the compiler builds a subtype entity Typ such that\nIs_Scalar (Typ) is True and Is_Scalar (Base_Type (Typ)) is False.\nThis comes up in some cases involving a subtype of a private type,\nwhere the full view of the private type is a scalar type. In such a\nsituation, it may also be the case that Is_Enumeration_Type (Typ) is True\nand Is_Enumeration_Type (Base_Type (Typ)) is False. Some code incorrectly\nassumed that if a subtype is known to be a scalar (respectively, enumeration)\ntype, then the same must be true of the base type of that subtype. Fix that\ncode to handle the case where that assumption does not hold.\n\ngcc/ada/\n\n\t* exp_attr.adb\n\t(Attribute_Valid): Ensure that PBtyp is initialized to a value for\n\twhich Is_Scalar_Type is True.\n\t* checks.adb\n\t(Determine_Range): Call Implemention_Base_Type instead of\n\tBase_Type in order to ensure that result is suitable for passing\n\tto Enum_Pos_To_Rep.", "tree": {"sha": "b1359d98e90bbce8161e9765f3eec774d86a51c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1359d98e90bbce8161e9765f3eec774d86a51c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c56c7d3aeb050ddfe7a41cc00ce5eaa5c4edd636", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c56c7d3aeb050ddfe7a41cc00ce5eaa5c4edd636", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c56c7d3aeb050ddfe7a41cc00ce5eaa5c4edd636", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c56c7d3aeb050ddfe7a41cc00ce5eaa5c4edd636/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d16658d7d0aa0b3d1cede5d7a5853b2d62caf1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d16658d7d0aa0b3d1cede5d7a5853b2d62caf1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d16658d7d0aa0b3d1cede5d7a5853b2d62caf1c"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "26d5a4e220e31b050a3198e7086c82e52c8db205", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56c7d3aeb050ddfe7a41cc00ce5eaa5c4edd636/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56c7d3aeb050ddfe7a41cc00ce5eaa5c4edd636/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=c56c7d3aeb050ddfe7a41cc00ce5eaa5c4edd636", "patch": "@@ -5094,7 +5094,8 @@ package body Checks is\n         --  Don't deal with enumerated types with non-standard representation\n \n         or else (Is_Enumeration_Type (Typ)\n-                   and then Present (Enum_Pos_To_Rep (Base_Type (Typ))))\n+                   and then Present (Enum_Pos_To_Rep\n+                                       (Implementation_Base_Type (Typ))))\n \n         --  Ignore type for which an error has been posted, since range in\n         --  this case may well be a bogosity deriving from the error. Also"}, {"sha": "c4187c9f5d6318839647f6b1397890d46b09cc6a", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56c7d3aeb050ddfe7a41cc00ce5eaa5c4edd636/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56c7d3aeb050ddfe7a41cc00ce5eaa5c4edd636/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=c56c7d3aeb050ddfe7a41cc00ce5eaa5c4edd636", "patch": "@@ -7103,7 +7103,10 @@ package body Exp_Attr is\n       --  See separate sections below for the generated code in each case.\n \n       when Attribute_Valid => Valid : declare\n-         PBtyp : Entity_Id := Base_Type (Validated_View (Ptyp));\n+         PBtyp : Entity_Id := Implementation_Base_Type (Validated_View (Ptyp));\n+         pragma Assert (Is_Scalar_Type (PBtyp)\n+                          or else Serious_Errors_Detected > 0);\n+\n          --  The scalar base type, looking through private types\n \n          Save_Validity_Checks_On : constant Boolean := Validity_Checks_On;"}]}