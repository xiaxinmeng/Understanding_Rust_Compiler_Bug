{"sha": "ac8258565ca9f2f9345a19080d549a6bc2b42a68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM4MjU4NTY1Y2E5ZjJmOTM0NWExOTA4MGQ1NDlhNmJjMmI0MmE2OA==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "1998-12-07T16:23:02Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "1998-12-07T16:23:02Z"}, "message": "parse.y (array_initializer): Tagged <node>.\n\nMon Dec  7 15:13:52 1998  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\t* parse.y (array_initializer): Tagged <node>.\n\t(variable_initializer:): Use default rule.\n\t(array_initializer:): Defined actions.\n\t(variable_initializers:): Likewise.\n\t(resolve_qualified_expression_name): Use DECL_CONTEXT to build\n \tnon-static field accesses.\n\t(patch_invoke): Fixed indentation typo.\n\t(java_complete_tree): Likewise.\n\t(build_labeled_block): Changed leading comment. Generate an error\n \tin case of duplicate loop labels.\n\t(patch_conditional_expr): Patch results of string concatenation\n \toperations.\nFixes a ?: bug when string concatenation operator are in\noperands. Makes duplicate loop label declaration an error. Fixes\nrandom bugs.\n\nFrom-SVN: r24164", "tree": {"sha": "7dc985392762cb479d324696369810dc9581500b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7dc985392762cb479d324696369810dc9581500b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac8258565ca9f2f9345a19080d549a6bc2b42a68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac8258565ca9f2f9345a19080d549a6bc2b42a68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac8258565ca9f2f9345a19080d549a6bc2b42a68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac8258565ca9f2f9345a19080d549a6bc2b42a68/comments", "author": null, "committer": null, "parents": [{"sha": "89e09b9a23a170dfe36be100791e85fcc76d9f0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89e09b9a23a170dfe36be100791e85fcc76d9f0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89e09b9a23a170dfe36be100791e85fcc76d9f0c"}], "stats": {"total": 920, "additions": 469, "deletions": 451}, "files": [{"sha": "0c6a74ecc91a2c237f0a7a7579e14b9418b86d1d", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac8258565ca9f2f9345a19080d549a6bc2b42a68/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac8258565ca9f2f9345a19080d549a6bc2b42a68/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=ac8258565ca9f2f9345a19080d549a6bc2b42a68", "patch": "@@ -1,3 +1,18 @@\n+Mon Dec  7 15:13:52 1998  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* parse.y (array_initializer): Tagged <node>.\n+\t(variable_initializer:): Use default rule.\n+\t(array_initializer:): Defined actions.\n+\t(variable_initializers:): Likewise.\n+\t(resolve_qualified_expression_name): Use DECL_CONTEXT to build\n+ \tnon-static field accesses.\n+\t(patch_invoke): Fixed indentation typo.\n+\t(java_complete_tree): Likewise.\n+\t(build_labeled_block): Changed leading comment. Generate an error\n+ \tin case of duplicate loop labels.\n+\t(patch_conditional_expr): Patch results of string concatenation\n+ \toperations.\n+\n Sun Dec  6 13:45:00 1998  Per Bothner  <bothner@cygnus.com>\n \n \t* constants.c (find_methodref_index):  When the class is an interface,"}, {"sha": "59002a49b8ae5d8a1ae0f71b507e8e6d08b12e91", "filename": "gcc/java/parse.c", "status": "modified", "additions": 422, "deletions": 425, "changes": 847, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac8258565ca9f2f9345a19080d549a6bc2b42a68/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac8258565ca9f2f9345a19080d549a6bc2b42a68/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=ac8258565ca9f2f9345a19080d549a6bc2b42a68", "patch": "@@ -190,7 +190,7 @@ static tree maybe_create_class_interface_decl PROTO ((tree, tree, tree));\n static int check_class_interface_creation PROTO ((int, int, tree, \n \t\t\t\t\t\t  tree, tree, tree));\n static tree patch_method_invocation PROTO ((tree, tree, tree, \n-\t\t\t\t\t    int *, tree *, int));\n+\t\t\t\t\t    int *, tree *));\n static int breakdown_qualified PROTO ((tree *, tree *, tree));\n static tree resolve_and_layout PROTO ((tree, tree));\n static tree resolve_no_layout PROTO ((tree, tree));\n@@ -199,7 +199,7 @@ static tree find_applicable_accessible_methods_list PROTO ((int, tree,\n \t\t\t\t\t\t\t    tree, tree));\n static tree find_most_specific_methods_list PROTO ((tree));\n static int argument_types_convertible PROTO ((tree, tree));\n-static tree patch_invoke PROTO ((tree, tree, tree, int));\n+static tree patch_invoke PROTO ((tree, tree, tree));\n static tree lookup_method_invoke PROTO ((int, tree, tree, tree, tree));\n static tree register_incomplete_type PROTO ((int, tree, tree, tree));\n static tree obtain_incomplete_type PROTO ((tree));\n@@ -300,7 +300,6 @@ static int verify_constructor_super PROTO (());\n static tree create_artificial_method PROTO ((tree, int, tree, tree, tree));\n static void start_artificial_method_body PROTO ((tree));\n static void end_artificial_method_body PROTO ((tree));\n-static tree generate_field_initialization_code PROTO ((tree));\n static int check_method_redefinition PROTO ((tree, tree));\n static int reset_method_name PROTO ((tree));\n static void java_check_regular_methods PROTO ((tree));\n@@ -354,7 +353,7 @@ static tree wfl_append = NULL_TREE;\n /* The \"toString\" identifier used for String `+' operator. */\n static tree wfl_to_string = NULL_TREE;\n \n-#line 282 \"./parse.y\"\n+#line 281 \"./parse.y\"\n typedef union {\n   tree node;\n   int sub_token;\n@@ -668,46 +667,46 @@ static const short yyrline[] = { 0,\n    681,   688,   694,   699,   703,   706,   710,   712,   715,   717,\n    718,   719,   723,   725,   726,   728,   733,   736,   746,   749,\n    751,   755,   758,   765,   771,   779,   781,   783,   785,   787,\n-   791,   793,   798,   805,   806,   810,   813,   815,   817,   819,\n-   821,   823,   825,   827,   834,   837,   839,   848,   850,   854,\n-   859,   864,   868,   873,   875,   877,   884,   886,   888,   892,\n-   895,   897,   901,   903,   904,   909,   914,   920,   928,   935,\n-   938,   941,   945,   948,   952,   961,   963,   965,   970,   977,\n-   985,   987,   991,   999,  1010,  1014,  1017,  1020,  1023,  1026,\n-  1029,  1032,  1035,  1037,  1041,  1047,  1052,  1054,  1058,  1061,\n-  1065,  1067,  1070,  1072,  1073,  1075,  1079,  1083,  1089,  1094,\n-  1099,  1103,  1107,  1113,  1115,  1116,  1121,  1124,  1128,  1133,\n-  1141,  1143,  1146,  1148,  1150,  1154,  1158,  1161,  1165,  1167,\n-  1168,  1169,  1170,  1171,  1181,  1183,  1184,  1185,  1186,  1189,\n-  1191,  1192,  1193,  1194,  1195,  1196,  1197,  1198,  1199,  1200,\n-  1203,  1208,  1219,  1226,  1230,  1241,  1251,  1257,  1263,  1269,\n-  1271,  1277,  1279,  1285,  1287,  1289,  1291,  1293,  1297,  1299,\n-  1300,  1301,  1302,  1303,  1304,  1307,  1310,  1312,  1314,  1318,\n-  1323,  1328,  1334,  1343,  1349,  1351,  1353,  1357,  1359,  1360,\n-  1361,  1364,  1366,  1369,  1373,  1375,  1378,  1385,  1391,  1393,\n-  1395,  1399,  1407,  1410,  1412,  1414,  1418,  1423,  1432,  1437,\n-  1440,  1447,  1449,  1451,  1455,  1458,  1467,  1474,  1476,  1480,\n-  1493,  1495,  1501,  1507,  1511,  1513,  1517,  1520,  1522,  1526,\n-  1529,  1531,  1533,  1537,  1540,  1542,  1544,  1548,  1551,  1553,\n-  1555,  1559,  1565,  1567,  1571,  1578,  1580,  1582,  1584,  1588,\n-  1596,  1599,  1601,  1603,  1607,  1609,  1616,  1624,  1641,  1643,\n-  1645,  1649,  1655,  1660,  1662,  1665,  1667,  1669,  1671,  1672,\n-  1673,  1674,  1678,  1680,  1682,  1687,  1689,  1691,  1693,  1695,\n-  1699,  1702,  1707,  1709,  1714,  1715,  1716,  1717,  1718,  1720,\n-  1722,  1724,  1726,  1728,  1732,  1734,  1737,  1743,  1748,  1752,\n-  1755,  1757,  1759,  1763,  1765,  1767,  1769,  1773,  1776,  1780,\n-  1786,  1788,  1796,  1799,  1801,  1805,  1810,  1818,  1822,  1825,\n-  1827,  1838,  1849,  1854,  1863,  1865,  1869,  1872,  1874,  1879,\n-  1884,  1889,  1896,  1898,  1899,  1900,  1903,  1908,  1913,  1915,\n-  1916,  1918,  1920,  1921,  1923,  1927,  1930,  1934,  1937,  1941,\n-  1943,  1945,  1947,  1948,  1950,  1954,  1962,  1964,  1966,  1978,\n-  1980,  1986,  1988,  1990,  1994,  1996,  2001,  2006,  2011,  2013,\n-  2015,  2019,  2021,  2026,  2031,  2033,  2037,  2039,  2044,  2049,\n-  2054,  2056,  2058,  2062,  2064,  2069,  2074,  2079,  2084,  2086,\n-  2088,  2090,  2092,  2094,  2098,  2100,  2105,  2110,  2112,  2116,\n-  2118,  2123,  2127,  2129,  2134,  2138,  2140,  2145,  2149,  2151,\n-  2156,  2160,  2162,  2167,  2171,  2173,  2178,  2184,  2186,  2190,\n-  2192,  2195,  2198,  2206,  2208,  2209,  2212,  2214,  2217,  2221\n+   791,   793,   797,   804,   805,   809,   812,   814,   816,   818,\n+   820,   822,   824,   826,   833,   836,   838,   847,   849,   853,\n+   858,   863,   867,   872,   874,   876,   883,   885,   887,   891,\n+   894,   896,   900,   902,   903,   908,   913,   919,   927,   934,\n+   937,   940,   944,   947,   951,   960,   962,   964,   969,   976,\n+   984,   986,   990,   998,  1009,  1013,  1016,  1019,  1022,  1025,\n+  1028,  1031,  1034,  1036,  1040,  1046,  1051,  1053,  1057,  1060,\n+  1064,  1066,  1069,  1071,  1072,  1074,  1078,  1082,  1088,  1093,\n+  1096,  1098,  1100,  1104,  1107,  1109,  1114,  1117,  1121,  1126,\n+  1134,  1136,  1139,  1141,  1143,  1147,  1151,  1154,  1158,  1160,\n+  1161,  1162,  1163,  1164,  1174,  1176,  1177,  1178,  1179,  1182,\n+  1184,  1185,  1186,  1187,  1188,  1189,  1190,  1191,  1192,  1193,\n+  1196,  1201,  1212,  1219,  1223,  1234,  1244,  1250,  1256,  1262,\n+  1264,  1270,  1272,  1278,  1280,  1282,  1284,  1286,  1290,  1292,\n+  1293,  1294,  1295,  1296,  1297,  1300,  1303,  1305,  1307,  1311,\n+  1316,  1321,  1327,  1336,  1342,  1344,  1346,  1350,  1352,  1353,\n+  1354,  1357,  1359,  1362,  1366,  1368,  1371,  1378,  1384,  1386,\n+  1388,  1392,  1400,  1403,  1405,  1407,  1411,  1416,  1425,  1430,\n+  1433,  1440,  1442,  1444,  1448,  1451,  1460,  1467,  1469,  1473,\n+  1486,  1488,  1494,  1500,  1504,  1506,  1510,  1513,  1515,  1519,\n+  1522,  1524,  1526,  1530,  1533,  1535,  1537,  1541,  1544,  1546,\n+  1548,  1552,  1558,  1560,  1564,  1571,  1573,  1575,  1577,  1581,\n+  1589,  1592,  1594,  1596,  1600,  1602,  1609,  1617,  1634,  1636,\n+  1638,  1642,  1648,  1653,  1655,  1658,  1660,  1662,  1664,  1665,\n+  1666,  1667,  1671,  1673,  1675,  1680,  1682,  1684,  1686,  1688,\n+  1692,  1695,  1700,  1702,  1707,  1708,  1709,  1710,  1711,  1713,\n+  1715,  1717,  1719,  1721,  1725,  1727,  1730,  1736,  1741,  1745,\n+  1748,  1750,  1752,  1756,  1758,  1760,  1762,  1766,  1769,  1773,\n+  1779,  1781,  1789,  1792,  1794,  1798,  1803,  1811,  1815,  1818,\n+  1820,  1831,  1842,  1847,  1856,  1858,  1862,  1865,  1867,  1872,\n+  1877,  1882,  1889,  1891,  1892,  1893,  1896,  1901,  1906,  1908,\n+  1909,  1911,  1913,  1914,  1916,  1920,  1923,  1927,  1930,  1934,\n+  1936,  1938,  1940,  1941,  1943,  1947,  1955,  1957,  1959,  1971,\n+  1973,  1979,  1981,  1983,  1987,  1989,  1994,  1999,  2004,  2006,\n+  2008,  2012,  2014,  2019,  2024,  2026,  2030,  2032,  2037,  2042,\n+  2047,  2049,  2051,  2055,  2057,  2062,  2067,  2072,  2077,  2079,\n+  2081,  2083,  2085,  2087,  2091,  2093,  2098,  2103,  2105,  2109,\n+  2111,  2116,  2120,  2122,  2127,  2131,  2133,  2138,  2142,  2144,\n+  2149,  2153,  2155,  2160,  2164,  2166,  2171,  2177,  2179,  2183,\n+  2185,  2188,  2191,  2199,  2201,  2202,  2205,  2207,  2210,  2214\n };\n #endif\n \n@@ -3044,74 +3043,70 @@ case 100:\n #line 788 \"./parse.y\"\n {yyerror (\"Unbalanced ']'\"); DRECOVER(vdi);;\n     break;}\n-case 102:\n-#line 794 \"./parse.y\"\n-{ yyval.node = NULL; ;\n-    break;}\n case 103:\n-#line 800 \"./parse.y\"\n+#line 799 \"./parse.y\"\n {\n \t\t  current_function_decl = yyvsp[0].node;\n \t\t  source_start_java_method (current_function_decl);\n \t\t;\n     break;}\n case 104:\n-#line 805 \"./parse.y\"\n+#line 804 \"./parse.y\"\n { complete_method_declaration (yyvsp[0].node); ;\n     break;}\n case 105:\n-#line 807 \"./parse.y\"\n+#line 806 \"./parse.y\"\n {YYNOT_TWICE yyerror (\"'{' expected\"); RECOVER;;\n     break;}\n case 106:\n-#line 812 \"./parse.y\"\n+#line 811 \"./parse.y\"\n { yyval.node = method_header (0, yyvsp[-2].node, yyvsp[-1].node, yyvsp[0].node); ;\n     break;}\n case 107:\n-#line 814 \"./parse.y\"\n+#line 813 \"./parse.y\"\n { yyval.node = method_header (0, void_type_node, yyvsp[-1].node, yyvsp[0].node); ;\n     break;}\n case 108:\n-#line 816 \"./parse.y\"\n+#line 815 \"./parse.y\"\n { yyval.node = method_header (yyvsp[-3].value, yyvsp[-2].node, yyvsp[-1].node, yyvsp[0].node); ;\n     break;}\n case 109:\n-#line 818 \"./parse.y\"\n+#line 817 \"./parse.y\"\n { yyval.node = method_header (yyvsp[-3].value, void_type_node, yyvsp[-1].node, yyvsp[0].node); ;\n     break;}\n case 110:\n-#line 820 \"./parse.y\"\n+#line 819 \"./parse.y\"\n {RECOVER;;\n     break;}\n case 111:\n-#line 822 \"./parse.y\"\n+#line 821 \"./parse.y\"\n {RECOVER;;\n     break;}\n case 112:\n-#line 824 \"./parse.y\"\n+#line 823 \"./parse.y\"\n {yyerror (\"Identifier expected\"); RECOVER;;\n     break;}\n case 113:\n-#line 826 \"./parse.y\"\n+#line 825 \"./parse.y\"\n {yyerror (\"Identifier expected\"); RECOVER;;\n     break;}\n case 114:\n-#line 828 \"./parse.y\"\n+#line 827 \"./parse.y\"\n {\n \t\t  yyerror (\"Invalid method declaration, return type required\");\n \t\t  RECOVER;\n \t\t;\n     break;}\n case 115:\n-#line 836 \"./parse.y\"\n+#line 835 \"./parse.y\"\n { yyval.node = method_declarator (yyvsp[-2].node, NULL_TREE); ;\n     break;}\n case 116:\n-#line 838 \"./parse.y\"\n+#line 837 \"./parse.y\"\n { yyval.node = method_declarator (yyvsp[-3].node, yyvsp[-1].node); ;\n     break;}\n case 117:\n-#line 840 \"./parse.y\"\n+#line 839 \"./parse.y\"\n {\n \t\t  EXPR_WFL_LINECOL (wfl_operator) = yyvsp[-1].operator.location;\n \t\t  TREE_PURPOSE (yyvsp[-2].node) = \n@@ -3122,169 +3117,169 @@ case 117:\n \t\t;\n     break;}\n case 118:\n-#line 849 \"./parse.y\"\n+#line 848 \"./parse.y\"\n {yyerror (\"')' expected\"); DRECOVER(method_declarator);;\n     break;}\n case 119:\n-#line 851 \"./parse.y\"\n+#line 850 \"./parse.y\"\n {yyerror (\"']' expected\"); RECOVER;;\n     break;}\n case 120:\n-#line 856 \"./parse.y\"\n+#line 855 \"./parse.y\"\n {\n \t\t  ctxp->formal_parameter_number = 1;\n \t\t;\n     break;}\n case 121:\n-#line 860 \"./parse.y\"\n+#line 859 \"./parse.y\"\n {\n \t\t  ctxp->formal_parameter_number += 1;\n \t\t  yyval.node = chainon (yyvsp[-2].node, yyvsp[0].node);\n \t\t;\n     break;}\n case 122:\n-#line 865 \"./parse.y\"\n+#line 864 \"./parse.y\"\n {yyerror (\"Missing formal parameter term\"); RECOVER;;\n     break;}\n case 123:\n-#line 870 \"./parse.y\"\n+#line 869 \"./parse.y\"\n {\n \t\t  yyval.node = build_tree_list (yyvsp[0].node, yyvsp[-1].node);\n \t\t;\n     break;}\n case 124:\n-#line 874 \"./parse.y\"\n+#line 873 \"./parse.y\"\n { yyval.node = parse_jdk1_1_error (\"final parameters\"); ;\n     break;}\n case 125:\n-#line 876 \"./parse.y\"\n+#line 875 \"./parse.y\"\n {yyerror (\"Missing identifier\"); RECOVER;;\n     break;}\n case 126:\n-#line 878 \"./parse.y\"\n+#line 877 \"./parse.y\"\n {\n \t\t  SOURCE_FRONTEND_DEBUG ((\"Modifiers: %d\", yyvsp[-2].value));\n \t\t  yyerror (\"Missing identifier\"); RECOVER;\n \t\t;\n     break;}\n case 127:\n-#line 885 \"./parse.y\"\n+#line 884 \"./parse.y\"\n { yyval.node = NULL_TREE; ;\n     break;}\n case 128:\n-#line 887 \"./parse.y\"\n+#line 886 \"./parse.y\"\n { yyval.node = yyvsp[0].node; ;\n     break;}\n case 129:\n-#line 889 \"./parse.y\"\n+#line 888 \"./parse.y\"\n {yyerror (\"Missing class type term\"); RECOVER;;\n     break;}\n case 130:\n-#line 894 \"./parse.y\"\n+#line 893 \"./parse.y\"\n { yyval.node = build_tree_list (yyvsp[0].node, yyvsp[0].node); ;\n     break;}\n case 131:\n-#line 896 \"./parse.y\"\n+#line 895 \"./parse.y\"\n { yyval.node = tree_cons (yyvsp[0].node, yyvsp[0].node, yyvsp[-2].node); ;\n     break;}\n case 132:\n-#line 898 \"./parse.y\"\n+#line 897 \"./parse.y\"\n {yyerror (\"Missing class type term\"); RECOVER;;\n     break;}\n case 135:\n-#line 905 \"./parse.y\"\n+#line 904 \"./parse.y\"\n { yyval.node = NULL_TREE; ;\n     break;}\n case 136:\n-#line 911 \"./parse.y\"\n+#line 910 \"./parse.y\"\n {\n \t\t  RULE (\"STATIC_INITIALIZER\");\n \t\t;\n     break;}\n case 137:\n-#line 915 \"./parse.y\"\n+#line 914 \"./parse.y\"\n {\n \t\t  RULE (\"STATIC_INITIALIZER\");\n \t\t;\n     break;}\n case 138:\n-#line 922 \"./parse.y\"\n+#line 921 \"./parse.y\"\n {\n \t\t  SOURCE_FRONTEND_DEBUG ((\"Modifiers: %d\", yyvsp[0].value));\n \t\t;\n     break;}\n case 139:\n-#line 930 \"./parse.y\"\n+#line 929 \"./parse.y\"\n {\n \t\t  current_function_decl = yyvsp[0].node;\n \t\t  source_start_java_method (current_function_decl);\n \t\t;\n     break;}\n case 140:\n-#line 935 \"./parse.y\"\n+#line 934 \"./parse.y\"\n { complete_method_declaration (yyvsp[0].node); ;\n     break;}\n case 141:\n-#line 940 \"./parse.y\"\n+#line 939 \"./parse.y\"\n { yyval.node = method_header (0, NULL_TREE, yyvsp[-1].node, yyvsp[0].node); ;\n     break;}\n case 142:\n-#line 942 \"./parse.y\"\n+#line 941 \"./parse.y\"\n { yyval.node = method_header (yyvsp[-2].value, NULL_TREE, yyvsp[-1].node, yyvsp[0].node); ;\n     break;}\n case 143:\n-#line 947 \"./parse.y\"\n+#line 946 \"./parse.y\"\n { yyval.node = method_declarator (yyvsp[-2].node, NULL_TREE); ;\n     break;}\n case 144:\n-#line 949 \"./parse.y\"\n+#line 948 \"./parse.y\"\n { yyval.node = method_declarator (yyvsp[-3].node, yyvsp[-1].node); ;\n     break;}\n case 145:\n-#line 957 \"./parse.y\"\n+#line 956 \"./parse.y\"\n { \n \t\t  BLOCK_EXPR_BODY (yyvsp[0].node) = empty_stmt_node;\n \t\t  yyval.node = yyvsp[0].node;\n \t\t;\n     break;}\n case 146:\n-#line 962 \"./parse.y\"\n+#line 961 \"./parse.y\"\n { yyval.node = yyvsp[0].node; ;\n     break;}\n case 147:\n-#line 964 \"./parse.y\"\n+#line 963 \"./parse.y\"\n { yyval.node = yyvsp[0].node; ;\n     break;}\n case 148:\n-#line 966 \"./parse.y\"\n+#line 965 \"./parse.y\"\n { yyval.node = yyvsp[0].node; ;\n     break;}\n case 149:\n-#line 972 \"./parse.y\"\n+#line 971 \"./parse.y\"\n { \n \t\t  yyval.node = build_method_invocation (yyvsp[-3].node, NULL_TREE); \n \t\t  yyval.node = build_debugable_stmt (EXPR_WFL_LINECOL (yyvsp[-3].node), yyval.node);\n \t\t  yyval.node = java_method_add_stmt (current_function_decl, yyval.node);\n \t\t;\n     break;}\n case 150:\n-#line 978 \"./parse.y\"\n+#line 977 \"./parse.y\"\n { \n \t\t  yyval.node = build_method_invocation (yyvsp[-4].node, yyvsp[-2].node); \n \t\t  yyval.node = build_debugable_stmt (EXPR_WFL_LINECOL (yyvsp[-4].node), yyval.node);\n \t\t  yyval.node = java_method_add_stmt (current_function_decl, yyval.node);\n \t\t;\n     break;}\n case 151:\n-#line 986 \"./parse.y\"\n+#line 985 \"./parse.y\"\n {yyval.node = parse_jdk1_1_error (\"explicit constructor invocation\"); ;\n     break;}\n case 152:\n-#line 988 \"./parse.y\"\n+#line 987 \"./parse.y\"\n {yyval.node = parse_jdk1_1_error (\"explicit constructor invocation\"); ;\n     break;}\n case 153:\n-#line 993 \"./parse.y\"\n+#line 992 \"./parse.y\"\n {\n \t\t  tree wfl = build_wfl_node (this_identifier_node, \n \t\t\t\t\t     input_filename, 0, 0);\n@@ -3293,7 +3288,7 @@ case 153:\n \t\t;\n     break;}\n case 154:\n-#line 1000 \"./parse.y\"\n+#line 999 \"./parse.y\"\n {\n \t\t  tree wfl = build_wfl_node (super_identifier_node,\n \t\t\t\t\t     input_filename, 0, 0);\n@@ -3302,167 +3297,167 @@ case 154:\n \t\t;\n     break;}\n case 155:\n-#line 1012 \"./parse.y\"\n+#line 1011 \"./parse.y\"\n { create_interface (0, yyvsp[0].node, NULL_TREE); ;\n     break;}\n case 156:\n-#line 1014 \"./parse.y\"\n+#line 1013 \"./parse.y\"\n {\n \t\t  yyval.node = yyvsp[0].node;\n \t\t;\n     break;}\n case 157:\n-#line 1018 \"./parse.y\"\n+#line 1017 \"./parse.y\"\n { create_interface (yyvsp[-2].value, yyvsp[0].node, NULL_TREE); ;\n     break;}\n case 158:\n-#line 1020 \"./parse.y\"\n+#line 1019 \"./parse.y\"\n {\n \t\t  yyval.node = yyvsp[0].node;\n \t\t;\n     break;}\n case 159:\n-#line 1024 \"./parse.y\"\n+#line 1023 \"./parse.y\"\n { create_interface (0, yyvsp[-1].node, yyvsp[0].node);\t;\n     break;}\n case 160:\n-#line 1026 \"./parse.y\"\n+#line 1025 \"./parse.y\"\n {\n \t\t  yyval.node = yyvsp[0].node;\n \t\t;\n     break;}\n case 161:\n-#line 1030 \"./parse.y\"\n+#line 1029 \"./parse.y\"\n { create_interface (yyvsp[-3].value, yyvsp[-1].node, yyvsp[0].node); ;\n     break;}\n case 162:\n-#line 1032 \"./parse.y\"\n+#line 1031 \"./parse.y\"\n {\n \t\t  yyval.node = yyvsp[0].node;\n \t\t;\n     break;}\n case 163:\n-#line 1036 \"./parse.y\"\n+#line 1035 \"./parse.y\"\n {yyerror (\"(here)'{' expected\"); RECOVER;;\n     break;}\n case 164:\n-#line 1038 \"./parse.y\"\n+#line 1037 \"./parse.y\"\n {yyerror (\"(there)'{' expected\"); RECOVER;;\n     break;}\n case 165:\n-#line 1043 \"./parse.y\"\n+#line 1042 \"./parse.y\"\n { \n \t\t  ctxp->interface_number = 1;\n \t\t  yyval.node = build_tree_list (yyvsp[0].node, NULL_TREE);\n \t\t;\n     break;}\n case 166:\n-#line 1048 \"./parse.y\"\n+#line 1047 \"./parse.y\"\n { \n \t\t  ctxp->interface_number++;\n \t\t  yyval.node = chainon (yyvsp[-2].node, build_tree_list (yyvsp[0].node, NULL_TREE));\n \t\t;\n     break;}\n case 167:\n-#line 1053 \"./parse.y\"\n+#line 1052 \"./parse.y\"\n {yyerror (\"Invalid interface type\"); RECOVER;;\n     break;}\n case 168:\n-#line 1055 \"./parse.y\"\n+#line 1054 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 169:\n-#line 1060 \"./parse.y\"\n+#line 1059 \"./parse.y\"\n { yyval.node = NULL_TREE; ;\n     break;}\n case 170:\n-#line 1062 \"./parse.y\"\n+#line 1061 \"./parse.y\"\n { yyval.node = NULL_TREE; ;\n     break;}\n case 175:\n-#line 1074 \"./parse.y\"\n+#line 1073 \"./parse.y\"\n { yyval.node = parse_jdk1_1_error (\"inner class declaration\"); ;\n     break;}\n case 176:\n-#line 1076 \"./parse.y\"\n+#line 1075 \"./parse.y\"\n { yyval.node = parse_jdk1_1_error (\"inner interface declaration\"); ;\n     break;}\n case 178:\n-#line 1085 \"./parse.y\"\n+#line 1084 \"./parse.y\"\n { \n \t\t  check_abstract_method_header (yyvsp[-1].node);\n \t\t  current_function_decl = NULL_TREE; /* FIXME ? */\n \t\t;\n     break;}\n case 179:\n-#line 1090 \"./parse.y\"\n+#line 1089 \"./parse.y\"\n {yyerror (\"';' expected\"); RECOVER;;\n     break;}\n case 180:\n-#line 1096 \"./parse.y\"\n-{\n-\t\t  RULE (\"ARRAY_INITIALIZER (empty)\");\n-\t\t;\n+#line 1095 \"./parse.y\"\n+{ yyval.node = NULL_TREE; ;\n     break;}\n case 181:\n-#line 1100 \"./parse.y\"\n-{\n-\t\t  RULE (\"ARRAY_INITIALIZER (variable)\");\n-\t\t;\n+#line 1097 \"./parse.y\"\n+{ yyval.node = yyvsp[-1].node; ;\n     break;}\n case 182:\n-#line 1104 \"./parse.y\"\n-{\n-\t\t  RULE (\"ARRAY_INITIALIZER (,)\");\n-\t\t;\n+#line 1099 \"./parse.y\"\n+{ yyval.node = NULL_TREE; ;\n     break;}\n case 183:\n+#line 1101 \"./parse.y\"\n+{ yyval.node = yyvsp[-2].node; ;\n+    break;}\n+case 184:\n+#line 1106 \"./parse.y\"\n+{ yyval.node = tree_cons (NULL_TREE, yyvsp[0].node, NULL_TREE); ;\n+    break;}\n+case 185:\n #line 1108 \"./parse.y\"\n-{\n-\t\t  RULE (\"ARRAY_INITIALIZER (variable, ,)\");\n-\t\t;\n+{ yyval.node = tree_cons (NULL_TREE, yyvsp[0].node, yyvsp[-2].node); ;\n     break;}\n case 186:\n-#line 1117 \"./parse.y\"\n+#line 1110 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 187:\n-#line 1123 \"./parse.y\"\n+#line 1116 \"./parse.y\"\n { yyval.node = empty_stmt_node; ;\n     break;}\n case 188:\n-#line 1125 \"./parse.y\"\n+#line 1118 \"./parse.y\"\n { yyval.node = yyvsp[0].node; ;\n     break;}\n case 189:\n-#line 1130 \"./parse.y\"\n+#line 1123 \"./parse.y\"\n { enter_block (); ;\n     break;}\n case 190:\n-#line 1135 \"./parse.y\"\n+#line 1128 \"./parse.y\"\n { \n \t\t  maybe_absorb_scoping_blocks ();\n \t\t  yyval.node = exit_block ();\n \t\t;\n     break;}\n case 194:\n-#line 1149 \"./parse.y\"\n+#line 1142 \"./parse.y\"\n { java_method_add_stmt (current_function_decl, yyvsp[0].node); ;\n     break;}\n case 195:\n-#line 1151 \"./parse.y\"\n+#line 1144 \"./parse.y\"\n { parse_jdk1_1_error (\"inner class declaration\"); ;\n     break;}\n case 197:\n-#line 1160 \"./parse.y\"\n+#line 1153 \"./parse.y\"\n { declare_local_variables (0, yyvsp[-1].node, yyvsp[0].node); ;\n     break;}\n case 198:\n-#line 1162 \"./parse.y\"\n+#line 1155 \"./parse.y\"\n { declare_local_variables (yyvsp[-2].value, yyvsp[-1].node, yyvsp[0].node); ;\n     break;}\n case 204:\n-#line 1172 \"./parse.y\"\n+#line 1165 \"./parse.y\"\n { \n \t\t  /* If the for loop is unlabeled, we must return the\n \t\t     block it was defined it. It our last chance to\n@@ -3472,11 +3467,11 @@ case 204:\n \t\t;\n     break;}\n case 221:\n-#line 1205 \"./parse.y\"\n+#line 1198 \"./parse.y\"\n { yyval.node = empty_stmt_node; ;\n     break;}\n case 222:\n-#line 1210 \"./parse.y\"\n+#line 1203 \"./parse.y\"\n {\n \t\t  yyval.node = build_labeled_block (EXPR_WFL_LINECOL (yyvsp[-1].node), \n \t\t\t\t\t    EXPR_WFL_NODE (yyvsp[-1].node));\n@@ -3486,27 +3481,27 @@ case 222:\n \t\t;\n     break;}\n case 223:\n-#line 1221 \"./parse.y\"\n+#line 1214 \"./parse.y\"\n { \n \t\t  yyval.node = complete_labeled_statement (yyvsp[-1].node, yyvsp[0].node);\n \t\t  pop_labeled_block ();\n \t\t  POP_LABELED_BLOCK ();\n \t\t;\n     break;}\n case 224:\n-#line 1227 \"./parse.y\"\n+#line 1220 \"./parse.y\"\n {yyerror (\"':' expected\"); RECOVER;;\n     break;}\n case 225:\n-#line 1232 \"./parse.y\"\n+#line 1225 \"./parse.y\"\n { \n \t\t  yyval.node = complete_labeled_statement (yyvsp[-1].node, yyvsp[0].node);\n \t\t  pop_labeled_block ();\n \t\t  POP_LABELED_BLOCK ();\n \t\t;\n     break;}\n case 226:\n-#line 1243 \"./parse.y\"\n+#line 1236 \"./parse.y\"\n {\n \t\t  /* We have a statement. Generate a WFL around it so\n \t\t     we can debug it */\n@@ -3517,105 +3512,105 @@ case 226:\n \t\t;\n     break;}\n case 227:\n-#line 1252 \"./parse.y\"\n+#line 1245 \"./parse.y\"\n {\n \t\t  if (ctxp->prevent_ese != lineno)\n \t\t    yyerror (\"Invalid expression statement\");\n \t\t  DRECOVER (expr_stmt);\n \t\t;\n     break;}\n case 228:\n-#line 1258 \"./parse.y\"\n+#line 1251 \"./parse.y\"\n {\n \t\t  if (ctxp->prevent_ese != lineno)\n \t\t    yyerror (\"Invalid expression statement\");\n \t\t  DRECOVER (expr_stmt);\n \t\t;\n     break;}\n case 229:\n-#line 1264 \"./parse.y\"\n+#line 1257 \"./parse.y\"\n {\n \t\t  if (ctxp->prevent_ese != lineno)\n \t\t    yyerror (\"Invalid expression statement\");\n \t\t  DRECOVER (expr_stmt);\n \t\t;\n     break;}\n case 230:\n-#line 1270 \"./parse.y\"\n+#line 1263 \"./parse.y\"\n {yyerror (\"')' expected\"); RECOVER;;\n     break;}\n case 231:\n-#line 1272 \"./parse.y\"\n+#line 1265 \"./parse.y\"\n {\n \t\t  yyerror (\"Constructor invocation must be first \"\n \t\t\t   \"thing in a constructor\"); \n \t\t  RECOVER;\n \t\t;\n     break;}\n case 232:\n-#line 1278 \"./parse.y\"\n+#line 1271 \"./parse.y\"\n {yyerror (\"')' expected\"); RECOVER;;\n     break;}\n case 233:\n-#line 1280 \"./parse.y\"\n+#line 1273 \"./parse.y\"\n {\n \t\t  yyerror (\"Constructor invocation must be first \"\n \t\t\t   \"thing in a constructor\"); \n \t\t  RECOVER;\n \t\t;\n     break;}\n case 234:\n-#line 1286 \"./parse.y\"\n+#line 1279 \"./parse.y\"\n {yyerror (\"'(' expected\"); RECOVER;;\n     break;}\n case 235:\n-#line 1288 \"./parse.y\"\n+#line 1281 \"./parse.y\"\n {yyerror (\"')' expected\"); RECOVER;;\n     break;}\n case 236:\n-#line 1290 \"./parse.y\"\n+#line 1283 \"./parse.y\"\n {yyerror (\"')' expected\"); RECOVER;;\n     break;}\n case 237:\n-#line 1292 \"./parse.y\"\n+#line 1285 \"./parse.y\"\n {yyerror (\"';' expected\"); RECOVER;;\n     break;}\n case 238:\n-#line 1294 \"./parse.y\"\n+#line 1287 \"./parse.y\"\n {yyerror (\"';' expected\"); RECOVER;;\n     break;}\n case 246:\n-#line 1309 \"./parse.y\"\n+#line 1302 \"./parse.y\"\n { yyval.node = build_if_else_statement (yyvsp[-3].operator.location, yyvsp[-2].node, yyvsp[0].node, NULL_TREE); ;\n     break;}\n case 247:\n-#line 1311 \"./parse.y\"\n+#line 1304 \"./parse.y\"\n {yyerror (\"'(' expected\"); RECOVER;;\n     break;}\n case 248:\n-#line 1313 \"./parse.y\"\n+#line 1306 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 249:\n-#line 1315 \"./parse.y\"\n+#line 1308 \"./parse.y\"\n {yyerror (\"')' expected\"); RECOVER;;\n     break;}\n case 250:\n-#line 1320 \"./parse.y\"\n+#line 1313 \"./parse.y\"\n { yyval.node = build_if_else_statement (yyvsp[-5].operator.location, yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].node); ;\n     break;}\n case 251:\n-#line 1325 \"./parse.y\"\n+#line 1318 \"./parse.y\"\n { yyval.node = build_if_else_statement (yyvsp[-5].operator.location, yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].node); ;\n     break;}\n case 252:\n-#line 1330 \"./parse.y\"\n+#line 1323 \"./parse.y\"\n {\n \t\t  enter_block ();\n \t\t;\n     break;}\n case 253:\n-#line 1334 \"./parse.y\"\n+#line 1327 \"./parse.y\"\n { \n \t\t  /* Make into \"proper list\" of COMPOUND_EXPRs.\n \t\t     I.e. make the last statment also have its own COMPOUND_EXPR. */\n@@ -3625,96 +3620,96 @@ case 253:\n \t\t;\n     break;}\n case 254:\n-#line 1345 \"./parse.y\"\n+#line 1338 \"./parse.y\"\n { \n \t\t  yyval.node = build (SWITCH_EXPR, NULL_TREE, yyvsp[-1].node, NULL_TREE);\n \t\t  EXPR_WFL_LINECOL (yyval.node) = yyvsp[-2].operator.location;\n \t\t;\n     break;}\n case 255:\n-#line 1350 \"./parse.y\"\n+#line 1343 \"./parse.y\"\n {yyerror (\"'(' expected\"); RECOVER;;\n     break;}\n case 256:\n-#line 1352 \"./parse.y\"\n+#line 1345 \"./parse.y\"\n {yyerror (\"Missing term or ')'\"); DRECOVER(switch_statement);;\n     break;}\n case 257:\n-#line 1354 \"./parse.y\"\n+#line 1347 \"./parse.y\"\n {yyerror (\"'{' expected\"); RECOVER;;\n     break;}\n case 267:\n-#line 1380 \"./parse.y\"\n+#line 1373 \"./parse.y\"\n { \n \t\t  tree lab = build1 (CASE_EXPR, NULL_TREE, yyvsp[-1].node);\n \t\t  EXPR_WFL_LINECOL (lab) = yyvsp[-2].operator.location;\n \t\t  java_method_add_stmt (current_function_decl, lab);\n \t\t;\n     break;}\n case 268:\n-#line 1386 \"./parse.y\"\n+#line 1379 \"./parse.y\"\n { \n \t\t  tree lab = build1 (DEFAULT_EXPR, NULL_TREE, NULL_TREE);\n \t\t  EXPR_WFL_LINECOL (lab) = yyvsp[-1].operator.location;\n \t\t  java_method_add_stmt (current_function_decl, lab);\n \t\t;\n     break;}\n case 269:\n-#line 1392 \"./parse.y\"\n+#line 1385 \"./parse.y\"\n {yyerror (\"Missing or invalid constant expression\"); RECOVER;;\n     break;}\n case 270:\n-#line 1394 \"./parse.y\"\n+#line 1387 \"./parse.y\"\n {yyerror (\"':' expected\"); RECOVER;;\n     break;}\n case 271:\n-#line 1396 \"./parse.y\"\n+#line 1389 \"./parse.y\"\n {yyerror (\"':' expected\"); RECOVER;;\n     break;}\n case 272:\n-#line 1401 \"./parse.y\"\n+#line 1394 \"./parse.y\"\n { \n \t\t  tree body = build_loop_body (yyvsp[-2].operator.location, yyvsp[-1].node, 0);\n \t\t  yyval.node = build_new_loop (body);\n \t\t;\n     break;}\n case 273:\n-#line 1409 \"./parse.y\"\n+#line 1402 \"./parse.y\"\n { yyval.node = complete_loop_body (0, NULL_TREE, yyvsp[0].node, 0); ;\n     break;}\n case 274:\n-#line 1411 \"./parse.y\"\n+#line 1404 \"./parse.y\"\n {YYERROR_NOW; yyerror (\"'(' expected\"); RECOVER;;\n     break;}\n case 275:\n-#line 1413 \"./parse.y\"\n+#line 1406 \"./parse.y\"\n {yyerror (\"Missing term and ')' expected\"); RECOVER;;\n     break;}\n case 276:\n-#line 1415 \"./parse.y\"\n+#line 1408 \"./parse.y\"\n {yyerror (\"')' expected\"); RECOVER;;\n     break;}\n case 277:\n-#line 1420 \"./parse.y\"\n+#line 1413 \"./parse.y\"\n { yyval.node = complete_loop_body (0, NULL_TREE, yyvsp[0].node, 0); ;\n     break;}\n case 278:\n-#line 1425 \"./parse.y\"\n+#line 1418 \"./parse.y\"\n { \n \t\t  tree body = build_loop_body (0, NULL_TREE, 1);\n \t\t  yyval.node = build_new_loop (body);\n \t\t;\n     break;}\n case 279:\n-#line 1434 \"./parse.y\"\n+#line 1427 \"./parse.y\"\n { yyval.node = complete_loop_body (yyvsp[-3].operator.location, yyvsp[-2].node, yyvsp[-5].node, 1); ;\n     break;}\n case 280:\n-#line 1439 \"./parse.y\"\n+#line 1432 \"./parse.y\"\n { yyval.node = complete_for_loop (EXPR_WFL_LINECOL (yyvsp[-4].node), yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].node);;\n     break;}\n case 281:\n-#line 1441 \"./parse.y\"\n+#line 1434 \"./parse.y\"\n { \n \t\t  yyval.node = complete_for_loop (0, NULL_TREE, yyvsp[-2].node, yyvsp[0].node);\n \t\t  /* We have not condition, so we get rid of the EXIT_EXPR */\n@@ -3723,23 +3718,23 @@ case 281:\n \t\t;\n     break;}\n case 282:\n-#line 1448 \"./parse.y\"\n+#line 1441 \"./parse.y\"\n {yyerror (\"Invalid control expression\"); RECOVER;;\n     break;}\n case 283:\n-#line 1450 \"./parse.y\"\n+#line 1443 \"./parse.y\"\n {yyerror (\"Invalid update expression\"); RECOVER;;\n     break;}\n case 284:\n-#line 1452 \"./parse.y\"\n+#line 1445 \"./parse.y\"\n {yyerror (\"Invalid update expression\"); RECOVER;;\n     break;}\n case 285:\n-#line 1457 \"./parse.y\"\n+#line 1450 \"./parse.y\"\n { yyval.node = complete_for_loop (EXPR_WFL_LINECOL (yyvsp[-4].node), yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].node);;\n     break;}\n case 286:\n-#line 1459 \"./parse.y\"\n+#line 1452 \"./parse.y\"\n { \n \t\t  yyval.node = complete_for_loop (0, NULL_TREE, yyvsp[-2].node, yyvsp[0].node);\n \t\t  /* We have not condition, so we get rid of the EXIT_EXPR */\n@@ -3748,23 +3743,23 @@ case 286:\n \t\t;\n     break;}\n case 287:\n-#line 1469 \"./parse.y\"\n+#line 1462 \"./parse.y\"\n { \n \t\t  /* This scope defined for local variable that may be\n                      defined within the scope of the for loop */\n \t\t  enter_block (); \n \t\t;\n     break;}\n case 288:\n-#line 1475 \"./parse.y\"\n+#line 1468 \"./parse.y\"\n {yyerror (\"'(' expected\"); DRECOVER(for_1);;\n     break;}\n case 289:\n-#line 1477 \"./parse.y\"\n+#line 1470 \"./parse.y\"\n {yyerror (\"Invalid init statement\"); RECOVER;;\n     break;}\n case 290:\n-#line 1482 \"./parse.y\"\n+#line 1475 \"./parse.y\"\n { \n \t\t  /* We now declare the loop body. The loop is\n                      declared as a for loop. */\n@@ -3777,176 +3772,176 @@ case 290:\n \t\t;\n     break;}\n case 291:\n-#line 1494 \"./parse.y\"\n+#line 1487 \"./parse.y\"\n { yyval.node = empty_stmt_node; ;\n     break;}\n case 292:\n-#line 1496 \"./parse.y\"\n+#line 1489 \"./parse.y\"\n { \n \t\t  /* Init statement recorded within the previously\n                      defined block scope */\n \t\t  yyval.node = java_method_add_stmt (current_function_decl, yyvsp[0].node);\n \t\t;\n     break;}\n case 293:\n-#line 1502 \"./parse.y\"\n+#line 1495 \"./parse.y\"\n { \n \t\t  /* Local variable are recorded within the previously\n \t\t     defined block scope */\n \t\t  yyval.node = NULL_TREE;\n \t\t;\n     break;}\n case 294:\n-#line 1508 \"./parse.y\"\n+#line 1501 \"./parse.y\"\n {yyerror (\"';' expected\"); DRECOVER(for_init_1);;\n     break;}\n case 295:\n-#line 1512 \"./parse.y\"\n+#line 1505 \"./parse.y\"\n {yyval.node = empty_stmt_node;;\n     break;}\n case 296:\n-#line 1514 \"./parse.y\"\n+#line 1507 \"./parse.y\"\n { yyval.node = build_debugable_stmt (BUILD_LOCATION (), yyvsp[0].node); ;\n     break;}\n case 297:\n-#line 1519 \"./parse.y\"\n+#line 1512 \"./parse.y\"\n { yyval.node = add_stmt_to_compound (NULL_TREE, NULL_TREE, yyvsp[0].node); ;\n     break;}\n case 298:\n-#line 1521 \"./parse.y\"\n+#line 1514 \"./parse.y\"\n { yyval.node = add_stmt_to_compound (yyvsp[-2].node, NULL_TREE, yyvsp[0].node); ;\n     break;}\n case 299:\n-#line 1523 \"./parse.y\"\n+#line 1516 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 300:\n-#line 1528 \"./parse.y\"\n+#line 1521 \"./parse.y\"\n { yyval.node = build_bc_statement (yyvsp[-1].operator.location, 1, NULL_TREE); ;\n     break;}\n case 301:\n-#line 1530 \"./parse.y\"\n+#line 1523 \"./parse.y\"\n { yyval.node = build_bc_statement (yyvsp[-2].operator.location, 1, yyvsp[-1].node); ;\n     break;}\n case 302:\n-#line 1532 \"./parse.y\"\n+#line 1525 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 303:\n-#line 1534 \"./parse.y\"\n+#line 1527 \"./parse.y\"\n {yyerror (\"';' expected\"); RECOVER;;\n     break;}\n case 304:\n-#line 1539 \"./parse.y\"\n+#line 1532 \"./parse.y\"\n { yyval.node = build_bc_statement (yyvsp[-1].operator.location, 0, NULL_TREE); ;\n     break;}\n case 305:\n-#line 1541 \"./parse.y\"\n+#line 1534 \"./parse.y\"\n { yyval.node = build_bc_statement (yyvsp[-2].operator.location, 0, yyvsp[-1].node); ;\n     break;}\n case 306:\n-#line 1543 \"./parse.y\"\n+#line 1536 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 307:\n-#line 1545 \"./parse.y\"\n+#line 1538 \"./parse.y\"\n {yyerror (\"';' expected\"); RECOVER;;\n     break;}\n case 308:\n-#line 1550 \"./parse.y\"\n+#line 1543 \"./parse.y\"\n { yyval.node = build_return (yyvsp[-1].operator.location, NULL_TREE); ;\n     break;}\n case 309:\n-#line 1552 \"./parse.y\"\n+#line 1545 \"./parse.y\"\n { yyval.node = build_return (yyvsp[-2].operator.location, yyvsp[-1].node); ;\n     break;}\n case 310:\n-#line 1554 \"./parse.y\"\n+#line 1547 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 311:\n-#line 1556 \"./parse.y\"\n+#line 1549 \"./parse.y\"\n {yyerror (\"';' expected\"); RECOVER;;\n     break;}\n case 312:\n-#line 1561 \"./parse.y\"\n+#line 1554 \"./parse.y\"\n { \n \t\t  yyval.node = build1 (THROW_EXPR, NULL_TREE, yyvsp[-1].node);\n \t\t  EXPR_WFL_LINECOL (yyval.node) = yyvsp[-2].operator.location;\n \t\t;\n     break;}\n case 313:\n-#line 1566 \"./parse.y\"\n+#line 1559 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 314:\n-#line 1568 \"./parse.y\"\n+#line 1561 \"./parse.y\"\n {yyerror (\"';' expected\"); RECOVER;;\n     break;}\n case 315:\n-#line 1573 \"./parse.y\"\n+#line 1566 \"./parse.y\"\n { \n \t\t  yyval.node = build (SYNCHRONIZED_EXPR, NULL_TREE, yyvsp[-2].node, yyvsp[0].node);\n \t\t  EXPR_WFL_LINECOL (yyval.node) = \n \t\t    EXPR_WFL_LINECOL (MODIFIER_WFL (SYNCHRONIZED_TK));\n \t\t;\n     break;}\n case 316:\n-#line 1579 \"./parse.y\"\n+#line 1572 \"./parse.y\"\n {yyerror (\"'{' expected\"); RECOVER;;\n     break;}\n case 317:\n-#line 1581 \"./parse.y\"\n+#line 1574 \"./parse.y\"\n {yyerror (\"'(' expected\"); RECOVER;;\n     break;}\n case 318:\n-#line 1583 \"./parse.y\"\n+#line 1576 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 319:\n-#line 1585 \"./parse.y\"\n+#line 1578 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 320:\n-#line 1590 \"./parse.y\"\n+#line 1583 \"./parse.y\"\n {\n \t\t  if ((1 << yyvsp[0].value) != ACC_SYNCHRONIZED)\n \t\t    fatal (\"synchronized was '%d' - yyparse\", (1 << yyvsp[0].value));\n \t\t;\n     break;}\n case 321:\n-#line 1598 \"./parse.y\"\n+#line 1591 \"./parse.y\"\n { yyval.node = build_try_statement (yyvsp[-2].operator.location, yyvsp[-1].node, yyvsp[0].node, NULL_TREE); ;\n     break;}\n case 322:\n-#line 1600 \"./parse.y\"\n+#line 1593 \"./parse.y\"\n { yyval.node = build_try_statement (yyvsp[-2].operator.location, yyvsp[-1].node, NULL_TREE, yyvsp[0].node); ;\n     break;}\n case 323:\n-#line 1602 \"./parse.y\"\n+#line 1595 \"./parse.y\"\n { yyval.node = build_try_statement (yyvsp[-3].operator.location, yyvsp[-2].node, yyvsp[-1].node, yyvsp[0].node); ;\n     break;}\n case 324:\n-#line 1604 \"./parse.y\"\n+#line 1597 \"./parse.y\"\n {yyerror (\"'{' expected\"); DRECOVER (try_statement);;\n     break;}\n case 326:\n-#line 1610 \"./parse.y\"\n+#line 1603 \"./parse.y\"\n { \n \t\t  TREE_CHAIN (yyvsp[0].node) = yyvsp[-1].node;\n \t\t  yyval.node = yyvsp[0].node;\n \t\t;\n     break;}\n case 327:\n-#line 1618 \"./parse.y\"\n+#line 1611 \"./parse.y\"\n { \n \t\t  java_method_add_stmt (current_function_decl, yyvsp[0].node);\n \t\t  exit_block ();\n \t\t  yyval.node = yyvsp[-1].node;\n \t\t;\n     break;}\n case 328:\n-#line 1626 \"./parse.y\"\n+#line 1619 \"./parse.y\"\n { \n \t\t  /* We add a block to define a scope for\n \t\t     formal_parameter (CCBP). The formal parameter is\n@@ -3964,203 +3959,203 @@ case 328:\n \t\t;\n     break;}\n case 329:\n-#line 1642 \"./parse.y\"\n+#line 1635 \"./parse.y\"\n {yyerror (\"'(' expected\"); RECOVER;;\n     break;}\n case 330:\n-#line 1644 \"./parse.y\"\n+#line 1637 \"./parse.y\"\n {yyerror (\"Missing term or ')' expected\"); DRECOVER (2);;\n     break;}\n case 331:\n-#line 1646 \"./parse.y\"\n+#line 1639 \"./parse.y\"\n {yyerror (\"')' expected\"); DRECOVER (1);;\n     break;}\n case 332:\n-#line 1651 \"./parse.y\"\n+#line 1644 \"./parse.y\"\n { \n \t\t  yyval.node = build (FINALLY_EXPR, NULL_TREE,\n \t\t\t      create_label_decl (generate_name ()), yyvsp[0].node);\n \t\t;\n     break;}\n case 333:\n-#line 1656 \"./parse.y\"\n+#line 1649 \"./parse.y\"\n {yyerror (\"'{' expected\"); RECOVER; ;\n     break;}\n case 337:\n-#line 1668 \"./parse.y\"\n+#line 1661 \"./parse.y\"\n { yyval.node = build_this (yyvsp[0].operator.location); ;\n     break;}\n case 338:\n-#line 1670 \"./parse.y\"\n+#line 1663 \"./parse.y\"\n {yyval.node = yyvsp[-1].node;;\n     break;}\n case 343:\n-#line 1679 \"./parse.y\"\n+#line 1672 \"./parse.y\"\n { yyval.node = parse_jdk1_1_error (\"named class literals\"); ;\n     break;}\n case 344:\n-#line 1681 \"./parse.y\"\n+#line 1674 \"./parse.y\"\n { yyval.node = build_class_ref (yyvsp[-2].node); ;\n     break;}\n case 345:\n-#line 1683 \"./parse.y\"\n+#line 1676 \"./parse.y\"\n { yyval.node = build_class_ref (void_type_node); ;\n     break;}\n case 346:\n-#line 1688 \"./parse.y\"\n+#line 1681 \"./parse.y\"\n { yyval.node = parse_jdk1_1_error (\"class literals\"); ;\n     break;}\n case 347:\n-#line 1690 \"./parse.y\"\n+#line 1683 \"./parse.y\"\n {yyerror (\"')' expected\"); RECOVER;;\n     break;}\n case 348:\n-#line 1692 \"./parse.y\"\n+#line 1685 \"./parse.y\"\n {yyerror (\"'class' or 'this' expected\" ); RECOVER;;\n     break;}\n case 349:\n-#line 1694 \"./parse.y\"\n+#line 1687 \"./parse.y\"\n {yyerror (\"'class' expected\" ); RECOVER;;\n     break;}\n case 350:\n-#line 1696 \"./parse.y\"\n+#line 1689 \"./parse.y\"\n {yyerror (\"'class' expected\" ); RECOVER;;\n     break;}\n case 351:\n-#line 1701 \"./parse.y\"\n+#line 1694 \"./parse.y\"\n { yyval.node = build_new_invocation (yyvsp[-3].node, yyvsp[-1].node); ;\n     break;}\n case 352:\n-#line 1703 \"./parse.y\"\n+#line 1696 \"./parse.y\"\n { yyval.node = build_new_invocation (yyvsp[-2].node, NULL_TREE); ;\n     break;}\n case 353:\n-#line 1708 \"./parse.y\"\n+#line 1701 \"./parse.y\"\n { yyval.node = parse_jdk1_1_error (\"inner class instance creation\"); ;\n     break;}\n case 354:\n-#line 1710 \"./parse.y\"\n+#line 1703 \"./parse.y\"\n { yyval.node = parse_jdk1_1_error (\"inner class instance creation\"); ;\n     break;}\n case 359:\n-#line 1719 \"./parse.y\"\n+#line 1712 \"./parse.y\"\n {yyerror (\"'(' expected\"); DRECOVER(new_1);;\n     break;}\n case 360:\n-#line 1721 \"./parse.y\"\n+#line 1714 \"./parse.y\"\n {yyerror (\"'(' expected\"); RECOVER;;\n     break;}\n case 361:\n-#line 1723 \"./parse.y\"\n+#line 1716 \"./parse.y\"\n {yyerror (\"')' or term expected\"); RECOVER;;\n     break;}\n case 362:\n-#line 1725 \"./parse.y\"\n+#line 1718 \"./parse.y\"\n {yyerror (\"')' expected\"); RECOVER;;\n     break;}\n case 363:\n-#line 1727 \"./parse.y\"\n+#line 1720 \"./parse.y\"\n {YYERROR_NOW; yyerror (\"Identifier expected\"); RECOVER;;\n     break;}\n case 364:\n-#line 1729 \"./parse.y\"\n+#line 1722 \"./parse.y\"\n {yyerror (\"'(' expected\"); RECOVER;;\n     break;}\n case 367:\n-#line 1739 \"./parse.y\"\n+#line 1732 \"./parse.y\"\n { \n \t\t  yyval.node = tree_cons (NULL_TREE, yyvsp[0].node, NULL_TREE);\n \t\t  ctxp->formal_parameter_number = 1; \n \t\t;\n     break;}\n case 368:\n-#line 1744 \"./parse.y\"\n+#line 1737 \"./parse.y\"\n {\n \t\t  ctxp->formal_parameter_number += 1;\n \t\t  yyval.node = tree_cons (NULL_TREE, yyvsp[0].node, yyvsp[-2].node);\n \t\t;\n     break;}\n case 369:\n-#line 1749 \"./parse.y\"\n+#line 1742 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 370:\n-#line 1754 \"./parse.y\"\n+#line 1747 \"./parse.y\"\n { yyval.node = build_newarray_node (yyvsp[-1].node, yyvsp[0].node, 0); ;\n     break;}\n case 371:\n-#line 1756 \"./parse.y\"\n+#line 1749 \"./parse.y\"\n { yyval.node = build_newarray_node (yyvsp[-1].node, yyvsp[0].node, 0); ;\n     break;}\n case 372:\n-#line 1758 \"./parse.y\"\n+#line 1751 \"./parse.y\"\n { yyval.node = build_newarray_node (yyvsp[-2].node, yyvsp[-1].node, ctxp->osb_number); ;\n     break;}\n case 373:\n-#line 1760 \"./parse.y\"\n+#line 1753 \"./parse.y\"\n { yyval.node = build_newarray_node (yyvsp[-2].node, yyvsp[-1].node, ctxp->osb_number); ;\n     break;}\n case 374:\n-#line 1764 \"./parse.y\"\n+#line 1757 \"./parse.y\"\n { yyval.node = parse_jdk1_1_error (\"anonymous array\"); ;\n     break;}\n case 375:\n-#line 1766 \"./parse.y\"\n+#line 1759 \"./parse.y\"\n { yyval.node = parse_jdk1_1_error (\"anonymous array\"); ;\n     break;}\n case 376:\n-#line 1768 \"./parse.y\"\n+#line 1761 \"./parse.y\"\n {yyerror (\"'[' expected\"); DRECOVER (\"]\");;\n     break;}\n case 377:\n-#line 1770 \"./parse.y\"\n+#line 1763 \"./parse.y\"\n {yyerror (\"']' expected\"); RECOVER;;\n     break;}\n case 378:\n-#line 1775 \"./parse.y\"\n+#line 1768 \"./parse.y\"\n { yyval.node = build_tree_list (NULL_TREE, yyvsp[0].node); ;\n     break;}\n case 379:\n-#line 1777 \"./parse.y\"\n+#line 1770 \"./parse.y\"\n { yyval.node = tree_cons (NULL_TREE, yyvsp[0].node, yyval.node); ;\n     break;}\n case 380:\n-#line 1782 \"./parse.y\"\n+#line 1775 \"./parse.y\"\n { \n \t\t  EXPR_WFL_LINECOL (yyvsp[-1].node) = yyvsp[-2].operator.location;\n \t\t  yyval.node = yyvsp[-1].node;\n \t\t;\n     break;}\n case 381:\n-#line 1787 \"./parse.y\"\n+#line 1780 \"./parse.y\"\n {yyerror (\"']' expected\"); RECOVER;;\n     break;}\n case 382:\n-#line 1789 \"./parse.y\"\n+#line 1782 \"./parse.y\"\n {\n \t\t  yyerror (\"Missing term\");\n \t\t  yyerror (\"']' expected\");\n \t\t  RECOVER;\n \t\t;\n     break;}\n case 383:\n-#line 1798 \"./parse.y\"\n+#line 1791 \"./parse.y\"\n { ctxp->osb_number = 1; ;\n     break;}\n case 384:\n-#line 1800 \"./parse.y\"\n+#line 1793 \"./parse.y\"\n { ctxp->osb_number++; ;\n     break;}\n case 385:\n-#line 1802 \"./parse.y\"\n+#line 1795 \"./parse.y\"\n { yyerror (\"']' expected\"); RECOVER;;\n     break;}\n case 386:\n-#line 1807 \"./parse.y\"\n+#line 1800 \"./parse.y\"\n { yyval.node = make_qualified_primary (yyvsp[-2].node, yyvsp[0].node, yyvsp[-1].operator.location); ;\n     break;}\n case 387:\n-#line 1811 \"./parse.y\"\n+#line 1804 \"./parse.y\"\n {\n \t\t  tree super_wfl = \n \t\t    build_wfl_node (super_identifier_node, \n@@ -4170,19 +4165,19 @@ case 387:\n \t\t;\n     break;}\n case 388:\n-#line 1819 \"./parse.y\"\n+#line 1812 \"./parse.y\"\n {yyerror (\"Field expected\"); DRECOVER (super_field_acces);;\n     break;}\n case 389:\n-#line 1824 \"./parse.y\"\n+#line 1817 \"./parse.y\"\n { yyval.node = build_method_invocation (yyvsp[-2].node, NULL_TREE); ;\n     break;}\n case 390:\n-#line 1826 \"./parse.y\"\n+#line 1819 \"./parse.y\"\n { yyval.node = build_method_invocation (yyvsp[-3].node, yyvsp[-1].node); ;\n     break;}\n case 391:\n-#line 1828 \"./parse.y\"\n+#line 1821 \"./parse.y\"\n { \n \t\t  if (TREE_CODE (yyvsp[-4].node) == THIS_EXPR)\n \t\t    yyval.node = build_this_super_qualified_invocation \n@@ -4195,7 +4190,7 @@ case 391:\n \t\t;\n     break;}\n case 392:\n-#line 1839 \"./parse.y\"\n+#line 1832 \"./parse.y\"\n { \n \t\t  if (TREE_CODE (yyvsp[-5].node) == THIS_EXPR)\n \t\t    yyval.node = build_this_super_qualified_invocation \n@@ -4208,121 +4203,121 @@ case 392:\n \t\t;\n     break;}\n case 393:\n-#line 1850 \"./parse.y\"\n+#line 1843 \"./parse.y\"\n { \n \t\t  yyval.node = build_this_super_qualified_invocation \n \t\t    (0, yyvsp[-2].node, NULL_TREE, yyvsp[-4].operator.location, yyvsp[-3].operator.location);\n \t\t;\n     break;}\n case 394:\n-#line 1855 \"./parse.y\"\n+#line 1848 \"./parse.y\"\n {\n \t\t  yyval.node = build_this_super_qualified_invocation \n \t\t    (0, yyvsp[-3].node, yyvsp[-1].node, yyvsp[-5].operator.location, yyvsp[-4].operator.location);\n \t\t;\n     break;}\n case 395:\n-#line 1864 \"./parse.y\"\n+#line 1857 \"./parse.y\"\n { yyerror (\"'(' expected\"); DRECOVER (method_invocation); ;\n     break;}\n case 396:\n-#line 1866 \"./parse.y\"\n+#line 1859 \"./parse.y\"\n { yyerror (\"'(' expected\"); DRECOVER (method_invocation); ;\n     break;}\n case 397:\n-#line 1871 \"./parse.y\"\n+#line 1864 \"./parse.y\"\n { yyval.node = build_array_ref (yyvsp[-2].operator.location, yyvsp[-3].node, yyvsp[-1].node); ;\n     break;}\n case 398:\n-#line 1873 \"./parse.y\"\n+#line 1866 \"./parse.y\"\n { yyval.node = build_array_ref (yyvsp[-2].operator.location, yyvsp[-3].node, yyvsp[-1].node); ;\n     break;}\n case 399:\n-#line 1875 \"./parse.y\"\n+#line 1868 \"./parse.y\"\n {\n \t\t  yyerror (\"Missing term and ']' expected\");\n \t\t  DRECOVER(array_access);\n \t\t;\n     break;}\n case 400:\n-#line 1880 \"./parse.y\"\n+#line 1873 \"./parse.y\"\n {\n \t\t  yyerror (\"']' expected\");\n \t\t  DRECOVER(array_access);\n \t\t;\n     break;}\n case 401:\n-#line 1885 \"./parse.y\"\n+#line 1878 \"./parse.y\"\n {\n \t\t  yyerror (\"Missing term and ']' expected\");\n \t\t  DRECOVER(array_access);\n \t\t;\n     break;}\n case 402:\n-#line 1890 \"./parse.y\"\n+#line 1883 \"./parse.y\"\n {\n \t\t  yyerror (\"']' expected\");\n \t\t  DRECOVER(array_access);\n \t\t;\n     break;}\n case 407:\n-#line 1905 \"./parse.y\"\n+#line 1898 \"./parse.y\"\n { yyval.node = build_incdec (yyvsp[0].operator.token, yyvsp[0].operator.location, yyvsp[-1].node, 1); ;\n     break;}\n case 408:\n-#line 1910 \"./parse.y\"\n+#line 1903 \"./parse.y\"\n { yyval.node = build_incdec (yyvsp[0].operator.token, yyvsp[0].operator.location, yyvsp[-1].node, 1); ;\n     break;}\n case 411:\n-#line 1917 \"./parse.y\"\n+#line 1910 \"./parse.y\"\n {yyval.node = build_unaryop (yyvsp[-1].operator.token, yyvsp[-1].operator.location, yyvsp[0].node); ;\n     break;}\n case 412:\n-#line 1919 \"./parse.y\"\n+#line 1912 \"./parse.y\"\n {yyval.node = build_unaryop (yyvsp[-1].operator.token, yyvsp[-1].operator.location, yyvsp[0].node); ;\n     break;}\n case 414:\n-#line 1922 \"./parse.y\"\n+#line 1915 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;\n     break;}\n case 415:\n-#line 1924 \"./parse.y\"\n+#line 1917 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;\n     break;}\n case 416:\n-#line 1929 \"./parse.y\"\n+#line 1922 \"./parse.y\"\n {yyval.node = build_incdec (yyvsp[-1].operator.token, yyvsp[-1].operator.location, yyvsp[0].node, 0); ;\n     break;}\n case 417:\n-#line 1931 \"./parse.y\"\n+#line 1924 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;\n     break;}\n case 418:\n-#line 1936 \"./parse.y\"\n+#line 1929 \"./parse.y\"\n {yyval.node = build_incdec (yyvsp[-1].operator.token, yyvsp[-1].operator.location, yyvsp[0].node, 0); ;\n     break;}\n case 419:\n-#line 1938 \"./parse.y\"\n+#line 1931 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;\n     break;}\n case 421:\n-#line 1944 \"./parse.y\"\n+#line 1937 \"./parse.y\"\n {yyval.node = build_unaryop (yyvsp[-1].operator.token, yyvsp[-1].operator.location, yyvsp[0].node); ;\n     break;}\n case 422:\n-#line 1946 \"./parse.y\"\n+#line 1939 \"./parse.y\"\n {yyval.node = build_unaryop (yyvsp[-1].operator.token, yyvsp[-1].operator.location, yyvsp[0].node); ;\n     break;}\n case 424:\n-#line 1949 \"./parse.y\"\n+#line 1942 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;\n     break;}\n case 425:\n-#line 1951 \"./parse.y\"\n+#line 1944 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;\n     break;}\n case 426:\n-#line 1956 \"./parse.y\"\n+#line 1949 \"./parse.y\"\n { \n \t\t  tree type = yyvsp[-3].node;\n \t\t  while (ctxp->osb_number--)\n@@ -4331,15 +4326,15 @@ case 426:\n \t\t;\n     break;}\n case 427:\n-#line 1963 \"./parse.y\"\n+#line 1956 \"./parse.y\"\n { yyval.node = build_cast (yyvsp[-3].operator.location, yyvsp[-2].node, yyvsp[0].node); ;\n     break;}\n case 428:\n-#line 1965 \"./parse.y\"\n+#line 1958 \"./parse.y\"\n { yyval.node = build_cast (yyvsp[-3].operator.location, yyvsp[-2].node, yyvsp[0].node); ;\n     break;}\n case 429:\n-#line 1967 \"./parse.y\"\n+#line 1960 \"./parse.y\"\n { \n \t\t  char *ptr;\n \t\t  while (ctxp->osb_number--)\n@@ -4353,275 +4348,275 @@ case 429:\n \t\t;\n     break;}\n case 430:\n-#line 1979 \"./parse.y\"\n+#line 1972 \"./parse.y\"\n {yyerror (\"']' expected, invalid type expression\");;\n     break;}\n case 431:\n-#line 1981 \"./parse.y\"\n+#line 1974 \"./parse.y\"\n {\n \t          if (ctxp->prevent_ese != lineno)\n \t\t    yyerror (\"Invalid type expression\"); RECOVER;\n \t\t  RECOVER;\n \t\t;\n     break;}\n case 432:\n-#line 1987 \"./parse.y\"\n+#line 1980 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 433:\n-#line 1989 \"./parse.y\"\n+#line 1982 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 434:\n-#line 1991 \"./parse.y\"\n+#line 1984 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 436:\n-#line 1997 \"./parse.y\"\n+#line 1990 \"./parse.y\"\n { \n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), \n \t\t\t\t    yyvsp[-1].operator.location, yyvsp[-2].node, yyvsp[0].node);\n \t\t;\n     break;}\n case 437:\n-#line 2002 \"./parse.y\"\n+#line 1995 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 438:\n-#line 2007 \"./parse.y\"\n+#line 2000 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 439:\n-#line 2012 \"./parse.y\"\n+#line 2005 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 440:\n-#line 2014 \"./parse.y\"\n+#line 2007 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 441:\n-#line 2016 \"./parse.y\"\n+#line 2009 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 443:\n-#line 2022 \"./parse.y\"\n+#line 2015 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 444:\n-#line 2027 \"./parse.y\"\n+#line 2020 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 445:\n-#line 2032 \"./parse.y\"\n+#line 2025 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 446:\n-#line 2034 \"./parse.y\"\n+#line 2027 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 448:\n-#line 2040 \"./parse.y\"\n+#line 2033 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 449:\n-#line 2045 \"./parse.y\"\n+#line 2038 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 450:\n-#line 2050 \"./parse.y\"\n+#line 2043 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 451:\n-#line 2055 \"./parse.y\"\n+#line 2048 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 452:\n-#line 2057 \"./parse.y\"\n+#line 2050 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 453:\n-#line 2059 \"./parse.y\"\n+#line 2052 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 455:\n-#line 2065 \"./parse.y\"\n+#line 2058 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 456:\n-#line 2070 \"./parse.y\"\n+#line 2063 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 457:\n-#line 2075 \"./parse.y\"\n+#line 2068 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 458:\n-#line 2080 \"./parse.y\"\n+#line 2073 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 459:\n-#line 2085 \"./parse.y\"\n+#line 2078 \"./parse.y\"\n { yyval.node = build_binop (INSTANCEOF_EXPR, yyvsp[-1].operator.location, yyvsp[-2].node, yyvsp[0].node); ;\n     break;}\n case 460:\n-#line 2087 \"./parse.y\"\n+#line 2080 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 461:\n-#line 2089 \"./parse.y\"\n+#line 2082 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 462:\n-#line 2091 \"./parse.y\"\n+#line 2084 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 463:\n-#line 2093 \"./parse.y\"\n+#line 2086 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 464:\n-#line 2095 \"./parse.y\"\n+#line 2088 \"./parse.y\"\n {yyerror (\"Invalid reference type\"); RECOVER;;\n     break;}\n case 466:\n-#line 2101 \"./parse.y\"\n+#line 2094 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 467:\n-#line 2106 \"./parse.y\"\n+#line 2099 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 468:\n-#line 2111 \"./parse.y\"\n+#line 2104 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 469:\n-#line 2113 \"./parse.y\"\n+#line 2106 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 471:\n-#line 2119 \"./parse.y\"\n+#line 2112 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 472:\n-#line 2124 \"./parse.y\"\n+#line 2117 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 474:\n-#line 2130 \"./parse.y\"\n+#line 2123 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 475:\n-#line 2135 \"./parse.y\"\n+#line 2128 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 477:\n-#line 2141 \"./parse.y\"\n+#line 2134 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 478:\n-#line 2146 \"./parse.y\"\n+#line 2139 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 480:\n-#line 2152 \"./parse.y\"\n+#line 2145 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 481:\n-#line 2157 \"./parse.y\"\n+#line 2150 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 483:\n-#line 2163 \"./parse.y\"\n+#line 2156 \"./parse.y\"\n {\n \t\t  yyval.node = build_binop (BINOP_LOOKUP (yyvsp[-1].operator.token), yyvsp[-1].operator.location,\n \t\t\t\t    yyvsp[-2].node, yyvsp[0].node); \n \t\t;\n     break;}\n case 484:\n-#line 2168 \"./parse.y\"\n+#line 2161 \"./parse.y\"\n {yyerror (\"Missing term\"); RECOVER;;\n     break;}\n case 486:\n-#line 2174 \"./parse.y\"\n+#line 2167 \"./parse.y\"\n {\n \t\t  yyval.node = build (CONDITIONAL_EXPR, NULL_TREE, yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].node);\n \t\t  EXPR_WFL_LINECOL (yyval.node) = yyvsp[-3].operator.location;\n \t\t;\n     break;}\n case 487:\n-#line 2179 \"./parse.y\"\n+#line 2172 \"./parse.y\"\n {\n \t\t  YYERROR_NOW;\n \t\t  yyerror (\"Missing term\");\n \t\t  DRECOVER (1);\n \t\t;\n     break;}\n case 488:\n-#line 2185 \"./parse.y\"\n+#line 2178 \"./parse.y\"\n {yyerror (\"Missing term\"); DRECOVER (2);;\n     break;}\n case 489:\n-#line 2187 \"./parse.y\"\n+#line 2180 \"./parse.y\"\n {yyerror (\"Missing term\"); DRECOVER (3);;\n     break;}\n case 492:\n-#line 2197 \"./parse.y\"\n+#line 2190 \"./parse.y\"\n { yyval.node = build_assignment (yyvsp[-1].operator.token, yyvsp[-1].operator.location, yyvsp[-2].node, yyvsp[0].node); ;\n     break;}\n case 493:\n-#line 2199 \"./parse.y\"\n+#line 2192 \"./parse.y\"\n {\n \t\t  if (ctxp->prevent_ese != lineno)\n \t\t    yyerror (\"Missing term\");\n@@ -4826,7 +4821,7 @@ case 493:\n   yystate = yyn;\n   goto yynewstate;\n }\n-#line 2225 \"./parse.y\"\n+#line 2218 \"./parse.y\"\n \n \f\n \n@@ -5757,7 +5752,7 @@ register_fields (flags, type, variable_list)\n   lineno = saved_lineno;\n }\n \n-/* Generate the method <finit> that initializes fields initialized\n+/* Generate the method $finit$ that initializes fields initialized\n    upon declaration.  */\n \n static void\n@@ -5769,7 +5764,7 @@ maybe_generate_finit ()\n     return;\n \n   mdecl = create_artificial_method (TREE_TYPE (ctxp->current_parsed_class),\n-\t\t\t\t    ACC_PRIVATE|ACC_FINAL, void_type_node,\n+\t\t\t\t    ACC_PRIVATE, void_type_node,\n \t\t\t\t    finit_identifier_node, end_params_node);\n   start_artificial_method_body (mdecl);\n \n@@ -6974,7 +6969,7 @@ check_method_redefinition (class, method)\n   tree redef, name;\n   tree cl = DECL_NAME (method);\n   tree sig = TYPE_ARGUMENT_SIGNATURE (TREE_TYPE (method));\n-  /* decl name of artificial <clinit> and <finit> doesn't need to be fixed and\n+  /* decl name of artificial <clinit> and $finit$ doesn't need to be fixed and\n      checked */\n \n   /* Reset the method name before running the check. If it returns 1,\n@@ -8277,13 +8272,13 @@ fix_constructors (mdecl)\n      tree mdecl;\n {\n   tree body = DECL_FUNCTION_BODY (mdecl);\n-  tree field_init;\n \n-  /* The constructor body must be crafted by hand. It's the\n-     constructor we defined when we realize we didn't have the\n-     CLASSNAME() constructor */\n   if (!body)\n     {\n+      /* The constructor body must be crafted by hand. It's the\n+\t constructor we defined when we realize we didn't have the\n+\t CLASSNAME() constructor */\n+\n       tree compound;\n \n       /* It is an error for the compiler to generate a default\n@@ -8304,11 +8299,6 @@ fix_constructors (mdecl)\n \t compiling java.lang.Object. build_super_invocation takes care\n \t of that. */\n       compound = java_method_add_stmt (mdecl, build_super_invocation ());\n-      \n-      /* Takes care of non static field initialization */\n-      field_init = generate_field_initialization_code (current_class);\n-      if (field_init)\n-\tcompound = java_method_add_stmt (mdecl, field_init);\n \n       end_artificial_method_body (mdecl);\n     }\n@@ -8342,11 +8332,6 @@ fix_constructors (mdecl)\n \tcompound = add_stmt_to_compound (compound, NULL_TREE,\n \t\t\t\t\t build_super_invocation ());\n       \n-      /* Also fix its initialized fields initialization */\n-      field_init = generate_field_initialization_code (current_class);\n-      if (field_init)\n-\tcompound = add_stmt_to_compound (compound, NULL_TREE, field_init);\n-      \n       /* Fix the constructor main block if we're adding extra stmts */\n       if (compound)\n \t{\n@@ -8381,23 +8366,6 @@ verify_constructor_super ()\n   return 1;\n }\n \n-/* Generate the code used to initialize field declared with an\n-   initialization statement. For now, it returns a call the the\n-   artificial function <finit>, if required. Always returns NULL if\n-   nothing needs to be generated. */\n-\n-static tree\n-generate_field_initialization_code (class)\n-     tree class;\n-{\n-  if (CLASS_HAS_FINIT_P (class))\n-    return build_method_invocation (build_expr_wfl (finit_identifier_node, \n-\t\t\t\t\t\t    input_filename, 0, 0), \n-\t\t\t\t    NULL_TREE);\n-  else\n-    return NULL_TREE;\n-}\n-\n /* Expand finals.  */\n \n void\n@@ -8730,16 +8698,18 @@ resolve_qualified_expression_name (wfl, found_decl, where_found, type_found)\n \t     build the code to access it. */\n \t  if (DECL_P (decl) && !FIELD_STATIC (decl))\n \t    {\n-\t      decl = maybe_access_field (decl, *where_found, type);\n+\t      decl = maybe_access_field (decl, *where_found, \n+\t\t\t\t\t DECL_CONTEXT (decl));\n \t      if (decl == error_mark_node)\n \t\treturn 1;\n \t    }\n \t  /* And code for the function call */\n \t  if (complete_function_arguments (qual_wfl))\n \t    return 1;\n+\t  if (from_super && TREE_CODE (qual_wfl) == CALL_EXPR)\n+\t    CALL_USING_SUPER (qual_wfl) = 1;\n \t  *where_found = \n-\t    patch_method_invocation (qual_wfl, decl, type,\n-\t\t\t\t     &is_static, NULL, from_super);\n+\t    patch_method_invocation (qual_wfl, decl, type, &is_static, NULL);\n \t  if (*where_found == error_mark_node)\n \t    return 1;\n \t  *type_found = type = QUAL_DECL_TYPE (*where_found);\n@@ -9164,17 +9134,17 @@ maybe_access_field (decl, where, type)\n    used. IS_STATIC is set to 1 if the invoked function is static. */\n \n static tree\n-patch_method_invocation (patch, primary, where, is_static, ret_decl, super)\n+patch_method_invocation (patch, primary, where, is_static, ret_decl)\n      tree patch, primary, where;\n      int *is_static;\n      tree *ret_decl;\n-     int super;\n {\n   tree wfl = TREE_OPERAND (patch, 0);\n   tree args = TREE_OPERAND (patch, 1);\n   tree name = EXPR_WFL_NODE (wfl);\n   tree list;\n   int is_static_flag = 0;\n+  int is_super_init = 0;\n   \n   /* Should be overriden if everything goes well. Otherwise, if\n      something fails, it should keep this value. It stop the\n@@ -9295,6 +9265,7 @@ patch_method_invocation (patch, primary, where, is_static, ret_decl, super)\n \t  else if (EXPR_WFL_NODE (TREE_OPERAND (patch, 0)) ==\n \t\t   super_identifier_node)\n \t    {\n+\t      is_super_init = 1;\n \t      if (CLASSTYPE_SUPER (current_class))\n \t\tclass_to_search = \n \t\t  DECL_NAME (TYPE_NAME (CLASSTYPE_SUPER (current_class)));\n@@ -9413,7 +9384,22 @@ patch_method_invocation (patch, primary, where, is_static, ret_decl, super)\n      EH checking */\n   if (ret_decl)\n     *ret_decl = list;\n-  return patch_invoke (patch, list, args, super);\n+  patch = patch_invoke (patch, list, args);\n+  if (is_super_init && CLASS_HAS_FINIT_P (current_class))\n+    {\n+      /* Generate the code used to initialize fields declared with an\n+\t initialization statement. For now, it returns a call the the\n+\t artificial function $finit$, if required. */\n+\n+      tree finit_call =\n+\tbuild_method_invocation (build_expr_wfl (finit_identifier_node,  \n+\t\t\t\t\t\t input_filename, 0, 0),  \n+\t\t\t\t NULL_TREE);\n+      patch = build (COMPOUND_EXPR, void_type_node, patch,\n+\t\t     java_complete_tree (finit_call));\n+      CAN_COMPLETE_NORMALLY (patch) = 1;\n+    }\n+  return patch;\n }\n \n /* Check that we're not trying to do a static reference to a method in\n@@ -9441,11 +9427,9 @@ check_for_static_method_reference (wfl, node, method, where, primary)\n    mode.  */\n \n static tree\n-patch_invoke (patch, method, args, from_super)\n+patch_invoke (patch, method, args)\n      tree patch, method, args;\n-     int from_super;\n {\n-  int im;\n   tree dtable, func;\n   tree original_call, t, ta;\n \n@@ -9456,7 +9440,8 @@ patch_invoke (patch, method, args, from_super)\n   t = TYPE_ARG_TYPES (TREE_TYPE (method));\n   if (TREE_CODE (patch) == NEW_CLASS_EXPR)\n     t = TREE_CHAIN (t);\n-  for (ta = args; t != end_params_node && ta; t = TREE_CHAIN (t), ta = TREE_CHAIN (ta))\n+  for (ta = args; t != end_params_node && ta; \n+       t = TREE_CHAIN (t), ta = TREE_CHAIN (ta))\n     if (JPRIMITIVE_TYPE_P (TREE_TYPE (TREE_VALUE (ta))) &&\n \tTREE_TYPE (TREE_VALUE (ta)) != TREE_VALUE (t))\n       TREE_VALUE (ta) = convert (TREE_VALUE (t), TREE_VALUE (ta));\n@@ -9466,7 +9451,7 @@ patch_invoke (patch, method, args, from_super)\n   else\n     {\n       tree signature = build_java_signature (TREE_TYPE (method));\n-      switch ((im = invocation_mode (method, from_super)))\n+      switch (invocation_mode (method, CALL_USING_SUPER (patch)))\n \t{\n \tcase INVOKE_VIRTUAL:\n \t  dtable = invoke_build_dtable (0, args);\n@@ -9486,8 +9471,7 @@ patch_invoke (patch, method, args, from_super)\n \t  break;\n \n \tdefault:\n-\t  fatal (\"Unknown invocation mode `%d' - build_invoke\", im);\n-\t  return NULL_TREE;\n+\t  fatal (\"internal error - unknown invocation_mode result\");\n \t}\n \n       /* Ensure self_type is initialized, (invokestatic). FIXME */\n@@ -10044,7 +10028,8 @@ java_complete_tree (node)\n \t\t\tbreak;\n \t\t    }\n \t\t  if (TREE_CODE (wfl_op2) != CASE_EXPR\n-\t\t      && TREE_CODE (wfl_op2) != DEFAULT_EXPR)\n+\t\t      && TREE_CODE (wfl_op2) != DEFAULT_EXPR\n+\t\t      && wfl_op2 != empty_stmt_node)\n \t\t    unreachable_stmt_error (*ptr);\n \t\t}\n \t      ptr = next;\n@@ -10212,8 +10197,10 @@ java_complete_tree (node)\n       /* 3- Expression section */\n     case COMPOUND_EXPR:\n       wfl_op2 = TREE_OPERAND (node, 1);\n-      TREE_OPERAND (node, 0) = nn = java_complete_tree (TREE_OPERAND (node, 0));\n-      if (! CAN_COMPLETE_NORMALLY (nn) && TREE_CODE (nn) != ERROR_MARK)\n+      TREE_OPERAND (node, 0) = nn = \n+\tjava_complete_tree (TREE_OPERAND (node, 0));\n+      if (! CAN_COMPLETE_NORMALLY (nn) && TREE_CODE (nn) != ERROR_MARK\n+\t  && TREE_OPERAND (node, 1) != empty_stmt_node)\n \t{\n \t  SET_WFL_OPERATOR (wfl_operator, node, wfl_op2);\n \t  parse_error_context (wfl_operator, \"Unreachable statement\");\n@@ -10294,7 +10281,7 @@ java_complete_tree (node)\n \t  int in_this = CALL_THIS_CONSTRUCTOR_P (node);\n \n \t  node = patch_method_invocation (node, NULL_TREE, \n-\t\t\t\t\t  NULL_TREE, 0, &decl, 0);\n+\t\t\t\t\t  NULL_TREE, 0, &decl);\n \t  if (node == error_mark_node)\n \t    return error_mark_node;\n \n@@ -12466,20 +12453,20 @@ build_labeled_block (location, label)\n   tree label_name = merge_qualified_name (label_id, label);\n   tree label_decl, node;\n \n-  /* Issue a warning if we try to reuse a label that was previously\n+  /* Issue an error if we try to reuse a label that was previously\n      declared */\n   if (IDENTIFIER_LOCAL_VALUE (label_name))\n     {\n       EXPR_WFL_LINECOL (wfl_operator) = location;\n-      parse_warning_context (wfl_operator, \"Declaration of `%s' shadows \"\n-\t\t\t     \"a previous declaration\",\n+      parse_error_context (wfl_operator, \"Declaration of `%s' shadows \"\n+\t\t\t     \"a previous label declaration\",\n \t\t\t     IDENTIFIER_POINTER (label));\n       EXPR_WFL_LINECOL (wfl_operator) = \n         EXPR_WFL_LINECOL (IDENTIFIER_LOCAL_VALUE (label_name));\n-      parse_warning_context (wfl_operator, \"This is the location of the \"\n-\t\t\t     \"previous declaration of label `%s'\",\n-\t\t\t     IDENTIFIER_POINTER (label));\n-      java_warning_count--;\n+      parse_error_context (wfl_operator, \"This is the location of the \"\n+\t\t\t   \"previous declaration of label `%s'\",\n+\t\t\t   IDENTIFIER_POINTER (label));\n+      java_error_count--;\n     }\n \n   label_decl = create_label_decl (label_name);\n@@ -13334,11 +13321,20 @@ patch_conditional_expr (node, wfl_cond, wfl_op1)\n   tree cond = TREE_OPERAND (node, 0);\n   tree op1 = TREE_OPERAND (node, 1);\n   tree op2 = TREE_OPERAND (node, 2);\n-  tree t1 = TREE_TYPE (op1);\n-  tree t2 = TREE_TYPE (op2);\n   tree resulting_type = NULL_TREE;\n+  tree t1, t2, patched;\n   int error_found = 0;\n \n+  /* Operands of ?: might be StringBuffers crafted as a result of a\n+     string concatenation. Obtain a descent operand here.  */\n+  if ((patched = patch_string (op1)))\n+    TREE_OPERAND (node, 1) = op1 = patched;\n+  if ((patched = patch_string (op2)))\n+    TREE_OPERAND (node, 2) = op2 = patched;\n+\n+  t1 = TREE_TYPE (op1);\n+  t2 = TREE_TYPE (op2);\n+\n   /* The first expression must be a boolean */\n   if (TREE_TYPE (cond) != boolean_type_node)\n     {\n@@ -13429,3 +13425,4 @@ patch_conditional_expr (node, wfl_cond, wfl_op1)\n   CAN_COMPLETE_NORMALLY (node) = 1;\n   return node;\n }\n+"}, {"sha": "4ac3b7f8453d8e587cba54dbf2b0b13288c1216b", "filename": "gcc/java/parse.y", "status": "modified", "additions": 32, "deletions": 26, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac8258565ca9f2f9345a19080d549a6bc2b42a68/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac8258565ca9f2f9345a19080d549a6bc2b42a68/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=ac8258565ca9f2f9345a19080d549a6bc2b42a68", "patch": "@@ -368,6 +368,7 @@ static tree wfl_to_string = NULL_TREE;\n %type\t <node>\t\tvariable_declarator_id variable_declarator\n \t\t\tvariable_declarators variable_initializer\n \t\t\tvariable_initializers constructor_body\n+\t\t\tarray_initializer\n \n %type\t <node>\t\tclass_body block_end\n %type\t <node>\t\tstatement statement_without_trailing_substatement\n@@ -790,7 +791,6 @@ variable_declarator_id:\n variable_initializer:\n \texpression\n |\tarray_initializer\n-\t\t{ $$ = NULL; }\n ;\n \n /* 19.8.3 Productions from 8.4: Method Declarations  */\n@@ -1092,26 +1092,20 @@ abstract_method_declaration:\n /* 19.10 Productions from 10: Arrays  */\n array_initializer:\n \tOCB_TK CCB_TK\n-\t\t{\n-\t\t  RULE (\"ARRAY_INITIALIZER (empty)\");\n-\t\t}\n+\t\t{ $$ = NULL_TREE; }\n |\tOCB_TK variable_initializers CCB_TK\n-\t\t{\n-\t\t  RULE (\"ARRAY_INITIALIZER (variable)\");\n-\t\t}\n+\t\t{ $$ = $2; }\n |\tOCB_TK C_TK CCB_TK\n-\t\t{\n-\t\t  RULE (\"ARRAY_INITIALIZER (,)\");\n-\t\t}\n+\t\t{ $$ = NULL_TREE; }\n |\tOCB_TK variable_initializers C_TK CCB_TK\n-\t\t{\n-\t\t  RULE (\"ARRAY_INITIALIZER (variable, ,)\");\n-\t\t}\n+\t\t{ $$ = $2; }\n ;\n \n variable_initializers:\n \tvariable_initializer\n+\t\t{ $$ = tree_cons (NULL_TREE, $1, NULL_TREE); }\n |\tvariable_initializers C_TK variable_initializer\n+\t\t{ $$ = tree_cons (NULL_TREE, $3, $1); }\n |\tvariable_initializers C_TK error\n \t\t{yyerror (\"Missing term\"); RECOVER;}\n ;\n@@ -5671,7 +5665,6 @@ fix_constructors (mdecl)\n      tree mdecl;\n {\n   tree body = DECL_FUNCTION_BODY (mdecl);\n-  tree field_init;\n \n   if (!body)\n     {\n@@ -6098,7 +6091,8 @@ resolve_qualified_expression_name (wfl, found_decl, where_found, type_found)\n \t     build the code to access it. */\n \t  if (DECL_P (decl) && !FIELD_STATIC (decl))\n \t    {\n-\t      decl = maybe_access_field (decl, *where_found, type);\n+\t      decl = maybe_access_field (decl, *where_found, \n+\t\t\t\t\t DECL_CONTEXT (decl));\n \t      if (decl == error_mark_node)\n \t\treturn 1;\n \t    }\n@@ -6839,7 +6833,8 @@ patch_invoke (patch, method, args)\n   t = TYPE_ARG_TYPES (TREE_TYPE (method));\n   if (TREE_CODE (patch) == NEW_CLASS_EXPR)\n     t = TREE_CHAIN (t);\n-  for (ta = args; t != end_params_node && ta; t = TREE_CHAIN (t), ta = TREE_CHAIN (ta))\n+  for (ta = args; t != end_params_node && ta; \n+       t = TREE_CHAIN (t), ta = TREE_CHAIN (ta))\n     if (JPRIMITIVE_TYPE_P (TREE_TYPE (TREE_VALUE (ta))) &&\n \tTREE_TYPE (TREE_VALUE (ta)) != TREE_VALUE (t))\n       TREE_VALUE (ta) = convert (TREE_VALUE (t), TREE_VALUE (ta));\n@@ -7595,7 +7590,8 @@ java_complete_tree (node)\n       /* 3- Expression section */\n     case COMPOUND_EXPR:\n       wfl_op2 = TREE_OPERAND (node, 1);\n-      TREE_OPERAND (node, 0) = nn = java_complete_tree (TREE_OPERAND (node, 0));\n+      TREE_OPERAND (node, 0) = nn = \n+\tjava_complete_tree (TREE_OPERAND (node, 0));\n       if (! CAN_COMPLETE_NORMALLY (nn) && TREE_CODE (nn) != ERROR_MARK\n \t  && TREE_OPERAND (node, 1) != empty_stmt_node)\n \t{\n@@ -9850,20 +9846,20 @@ build_labeled_block (location, label)\n   tree label_name = merge_qualified_name (label_id, label);\n   tree label_decl, node;\n \n-  /* Issue a warning if we try to reuse a label that was previously\n+  /* Issue an error if we try to reuse a label that was previously\n      declared */\n   if (IDENTIFIER_LOCAL_VALUE (label_name))\n     {\n       EXPR_WFL_LINECOL (wfl_operator) = location;\n-      parse_warning_context (wfl_operator, \"Declaration of `%s' shadows \"\n-\t\t\t     \"a previous declaration\",\n+      parse_error_context (wfl_operator, \"Declaration of `%s' shadows \"\n+\t\t\t     \"a previous label declaration\",\n \t\t\t     IDENTIFIER_POINTER (label));\n       EXPR_WFL_LINECOL (wfl_operator) = \n         EXPR_WFL_LINECOL (IDENTIFIER_LOCAL_VALUE (label_name));\n-      parse_warning_context (wfl_operator, \"This is the location of the \"\n-\t\t\t     \"previous declaration of label `%s'\",\n-\t\t\t     IDENTIFIER_POINTER (label));\n-      java_warning_count--;\n+      parse_error_context (wfl_operator, \"This is the location of the \"\n+\t\t\t   \"previous declaration of label `%s'\",\n+\t\t\t   IDENTIFIER_POINTER (label));\n+      java_error_count--;\n     }\n \n   label_decl = create_label_decl (label_name);\n@@ -10718,11 +10714,20 @@ patch_conditional_expr (node, wfl_cond, wfl_op1)\n   tree cond = TREE_OPERAND (node, 0);\n   tree op1 = TREE_OPERAND (node, 1);\n   tree op2 = TREE_OPERAND (node, 2);\n-  tree t1 = TREE_TYPE (op1);\n-  tree t2 = TREE_TYPE (op2);\n   tree resulting_type = NULL_TREE;\n+  tree t1, t2, patched;\n   int error_found = 0;\n \n+  /* Operands of ?: might be StringBuffers crafted as a result of a\n+     string concatenation. Obtain a descent operand here.  */\n+  if ((patched = patch_string (op1)))\n+    TREE_OPERAND (node, 1) = op1 = patched;\n+  if ((patched = patch_string (op2)))\n+    TREE_OPERAND (node, 2) = op2 = patched;\n+\n+  t1 = TREE_TYPE (op1);\n+  t2 = TREE_TYPE (op2);\n+\n   /* The first expression must be a boolean */\n   if (TREE_TYPE (cond) != boolean_type_node)\n     {\n@@ -10813,3 +10818,4 @@ patch_conditional_expr (node, wfl_cond, wfl_op1)\n   CAN_COMPLETE_NORMALLY (node) = 1;\n   return node;\n }\n+"}]}