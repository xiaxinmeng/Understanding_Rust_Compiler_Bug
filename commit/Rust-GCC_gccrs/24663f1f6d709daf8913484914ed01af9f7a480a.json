{"sha": "24663f1f6d709daf8913484914ed01af9f7a480a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ2NjNmMWY2ZDcwOWRhZjg5MTM0ODQ5MTRlZDAxYWY5ZjdhNDgwYQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-29T09:29:25Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-29T09:29:25Z"}, "message": "Fix various limitations of git-backport.py.\n\nI've just tested the script and I'm going to install the patch\nto all active branches.\n\ncontrib/ChangeLog:\n\n\t* git-backport.py: The script did 'git co HEAD~' when\n\tthere was no modified ChangeLog file in a successful\n\tgit cherry pick.\n\tRun cherry-pick --continue without editor.", "tree": {"sha": "cf28908083f2297acdefc90a520ec07d79b53408", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf28908083f2297acdefc90a520ec07d79b53408"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24663f1f6d709daf8913484914ed01af9f7a480a", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl7Q1kYACgkQTcGC3A+n\nN4WvlAgAs1qnBsoxKXUl+VJvyDrx4SBO4DWO+/tlEl4689v5MEOwvgraQnvmta+o\nl+imp5ytaebfp3fGgo6JolxT/gCqwTtiRfBGuprtOr2bRQctTjb4TjckFKb4o2C2\natEMfIgZuplMyLqhgNaRewqBtBvivVhd0w9U+qAoLTYRuiMAJBoXVZkTJW1bKwLx\nXs4E9+p5/NhouwWaOZ2VSi3RQQ0netytTbRZuNbmJZrRsn8v5dyp7vRbzU3zct7n\nm7Xf+i1NJvngQC71sMbLzMGum1PYiqTKzDgvagLOlirDjGSmVprDFCNBwlSTneTl\nFbryKqeckTDH6mYlWTPJlhpsxL7JDQ==\n=/SsO\n-----END PGP SIGNATURE-----", "payload": "tree cf28908083f2297acdefc90a520ec07d79b53408\nparent 233ecb5e2c5a769429279afbbf7d275cb3940cde\nauthor Martin Liska <mliska@suse.cz> 1590744565 +0200\ncommitter Martin Liska <mliska@suse.cz> 1590744565 +0200\n\nFix various limitations of git-backport.py.\n\nI've just tested the script and I'm going to install the patch\nto all active branches.\n\ncontrib/ChangeLog:\n\n\t* git-backport.py: The script did 'git co HEAD~' when\n\tthere was no modified ChangeLog file in a successful\n\tgit cherry pick.\n\tRun cherry-pick --continue without editor.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24663f1f6d709daf8913484914ed01af9f7a480a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24663f1f6d709daf8913484914ed01af9f7a480a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24663f1f6d709daf8913484914ed01af9f7a480a/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "233ecb5e2c5a769429279afbbf7d275cb3940cde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/233ecb5e2c5a769429279afbbf7d275cb3940cde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/233ecb5e2c5a769429279afbbf7d275cb3940cde"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "3a9413dcd274637dd42e74587fdca8d64a4bb8d8", "filename": "contrib/git-backport.py", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24663f1f6d709daf8913484914ed01af9f7a480a/contrib%2Fgit-backport.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24663f1f6d709daf8913484914ed01af9f7a480a/contrib%2Fgit-backport.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgit-backport.py?ref=24663f1f6d709daf8913484914ed01af9f7a480a", "patch": "@@ -30,9 +30,13 @@\n \n     r = subprocess.run('git cherry-pick -x %s' % args.revision, shell=True)\n     if r.returncode == 0:\n-        cmd = 'git show --name-only --pretty=\"\" -- \"*ChangeLog\" |' \\\n-              'xargs git checkout HEAD~'\n-        subprocess.check_output(cmd, shell=True)\n+        cmd = 'git show --name-only --pretty=\"\" -- \"*ChangeLog\"'\n+        changelogs = subprocess.check_output(cmd, shell=True, encoding='utf8')\n+        changelogs = changelogs.strip()\n+        if changelogs:\n+            for changelog in changelogs.split('\\n'):\n+                subprocess.check_output('git checkout HEAD~ %s' % changelog,\n+                                        shell=True)\n         subprocess.check_output('git commit --amend --no-edit', shell=True)\n     else:\n         # 1) remove all ChangeLog files from conflicts\n@@ -55,6 +59,7 @@\n \n         # try to continue\n         if len(conflicts) == len(changelogs):\n-            subprocess.check_output('git cherry-pick --continue', shell=True)\n+            cmd = 'git -c core.editor=true cherry-pick --continue'\n+            subprocess.check_output(cmd, shell=True)\n         else:\n             print('Please resolve all remaining file conflicts.')"}]}