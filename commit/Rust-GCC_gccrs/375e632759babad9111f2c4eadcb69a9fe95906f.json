{"sha": "375e632759babad9111f2c4eadcb69a9fe95906f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc1ZTYzMjc1OWJhYmFkOTExMWYyYzRlYWRjYjY5YTlmZTk1OTA2Zg==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2015-03-14T12:23:27Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2015-03-14T12:23:27Z"}, "message": "re PR fortran/61138 (Wrong code with pointer-bounds remapping)\n\n\tPR fortran/61138\nfortran/\n\t* trans-expr.c (gfc_trans_pointer_assignment): Clear DESCRIPTOR_ONLY\n\tfield before reusing LSE.\ntestsuite/\n\tgfortran.dg/pointer_remapping_9.f90: New.\n\nFrom-SVN: r221436", "tree": {"sha": "dc76c5bb540c6def56c50e9ceb2ae6bb0cc715f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc76c5bb540c6def56c50e9ceb2ae6bb0cc715f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/375e632759babad9111f2c4eadcb69a9fe95906f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/375e632759babad9111f2c4eadcb69a9fe95906f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/375e632759babad9111f2c4eadcb69a9fe95906f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/375e632759babad9111f2c4eadcb69a9fe95906f/comments", "author": null, "committer": null, "parents": [{"sha": "d88981fc3e1d9b1394a45074ead47d0ced23212b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d88981fc3e1d9b1394a45074ead47d0ced23212b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d88981fc3e1d9b1394a45074ead47d0ced23212b"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "30107c977af8580872eac1e4e4f6a33e5366a50d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375e632759babad9111f2c4eadcb69a9fe95906f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375e632759babad9111f2c4eadcb69a9fe95906f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=375e632759babad9111f2c4eadcb69a9fe95906f", "patch": "@@ -1,3 +1,9 @@\n+2015-03-14  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/61138\n+\t* trans-expr.c (gfc_trans_pointer_assignment): Clear DESCRIPTOR_ONLY\n+\tfield before reusing LSE.\n+\n 2015-03-11  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR libfortran/65200"}, {"sha": "8af8be287eec825ae50ab2e48425a0c584706d94", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375e632759babad9111f2c4eadcb69a9fe95906f/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375e632759babad9111f2c4eadcb69a9fe95906f/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=375e632759babad9111f2c4eadcb69a9fe95906f", "patch": "@@ -7335,6 +7335,7 @@ gfc_trans_pointer_assignment (gfc_expr * expr1, gfc_expr * expr2)\n \t\t\t\t\t       bound, bound, 0,\n \t\t\t\t\t       GFC_ARRAY_POINTER_CONT, false);\n \t      tmp = gfc_create_var (tmp, \"ptrtemp\");\n+\t      lse.descriptor_only = 0;\n \t      lse.expr = tmp;\n \t      lse.direct_byref = 1;\n \t      gfc_conv_expr_descriptor (&lse, expr2);\n@@ -7350,6 +7351,7 @@ gfc_trans_pointer_assignment (gfc_expr * expr1, gfc_expr * expr2)\n       else if (expr2->expr_type == EXPR_VARIABLE)\n \t{\n \t  /* Assign directly to the LHS's descriptor.  */\n+\t  lse.descriptor_only = 0;\n \t  lse.direct_byref = 1;\n \t  gfc_conv_expr_descriptor (&lse, expr2);\n \t  strlen_rhs = lse.string_length;\n@@ -7401,6 +7403,7 @@ gfc_trans_pointer_assignment (gfc_expr * expr1, gfc_expr * expr2)\n \t  /* Assign to a temporary descriptor and then copy that\n \t     temporary to the pointer.  */\n \t  tmp = gfc_create_var (TREE_TYPE (desc), \"ptrtemp\");\n+\t  lse.descriptor_only = 0;\n \t  lse.expr = tmp;\n \t  lse.direct_byref = 1;\n \t  gfc_conv_expr_descriptor (&lse, expr2);"}, {"sha": "b4e8ac8aa895f4f91e8f54fa1eef35888e4ab4c0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375e632759babad9111f2c4eadcb69a9fe95906f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375e632759babad9111f2c4eadcb69a9fe95906f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=375e632759babad9111f2c4eadcb69a9fe95906f", "patch": "@@ -1,3 +1,8 @@\n+2015-03-14  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/61138\n+\tgfortran.dg/pointer_remapping_9.f90: New.\n+\n 2015-03-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/65369"}, {"sha": "7c1e2320b4b39fb927f56ef7eda0be792b5258de", "filename": "gcc/testsuite/gfortran.dg/pointer_remapping_9.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375e632759babad9111f2c4eadcb69a9fe95906f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_remapping_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375e632759babad9111f2c4eadcb69a9fe95906f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_remapping_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_remapping_9.f90?ref=375e632759babad9111f2c4eadcb69a9fe95906f", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do run }\n+!\n+! PR fortran/61138\n+! Wrong code with pointer-bounds remapping\n+!\n+! Contributed by Tobias Burnus <burnus@net-b.de>\n+\n+implicit none\n+integer, target :: tgt(10)\n+integer, target, allocatable :: tgt2(:)\n+integer, pointer :: ptr(:)\n+\n+tgt = [1,2,3,4,5,6,7,8,9,10]\n+tgt2 = [1,2,3,4,5,6,7,8,9,10]\n+\n+\n+ptr(-5:) => tgt(5:)  ! Okay\n+\n+if (size(ptr) /= 6 .or. lbound(ptr,1) /= -5) call abort()\n+if (any (ptr /= [5,6,7,8,9,10])) call abort()\n+\n+\n+ptr(-5:) => tgt2(5:)  ! wrongly associates the whole array\n+\n+print '(*(i4))', size(ptr), lbound(ptr)\n+print '(*(i4))', ptr\n+\n+if (size(ptr) /= 6 .or. lbound(ptr,1) /= -5) call abort()\n+if (any (ptr /= [5,6,7,8,9,10])) call abort()\n+end\n+"}]}