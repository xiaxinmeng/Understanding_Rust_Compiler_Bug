{"sha": "1230d7f8de706221a1b6f3d81a20efc2052b7e0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIzMGQ3ZjhkZTcwNjIyMWExYjZmM2Q4MWEyMGVmYzIwNTJiN2UwYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@nildram.co.uk", "date": "2008-01-26T11:34:41Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-01-26T11:34:41Z"}, "message": "re PR rtl-optimization/34959 (23_containers/bitset/ext/15361.cc fails for MIPS n64)\n\ngcc/\n\tPR rtl-optimization/34959\n\t* optabs.c (expand_unop): In libcall notes, give ffs, clz, ctz,\n\tpopcount and parity rtxes the same mode as their operand.\n\tTruncate or extend the result to the return value's mode\n\tif necessary.\n\nFrom-SVN: r131863", "tree": {"sha": "ccc383b0fca9cbb43bb4a0d4b1d7248771938176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccc383b0fca9cbb43bb4a0d4b1d7248771938176"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1230d7f8de706221a1b6f3d81a20efc2052b7e0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1230d7f8de706221a1b6f3d81a20efc2052b7e0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1230d7f8de706221a1b6f3d81a20efc2052b7e0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1230d7f8de706221a1b6f3d81a20efc2052b7e0a/comments", "author": null, "committer": null, "parents": [{"sha": "2f35df8c1423f258a7a61fb1e0eba242b5033b5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f35df8c1423f258a7a61fb1e0eba242b5033b5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f35df8c1423f258a7a61fb1e0eba242b5033b5a"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "b36bdcf817aba2a68db15ba8149dd25ad571cb5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1230d7f8de706221a1b6f3d81a20efc2052b7e0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1230d7f8de706221a1b6f3d81a20efc2052b7e0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1230d7f8de706221a1b6f3d81a20efc2052b7e0a", "patch": "@@ -1,3 +1,11 @@\n+2008-01-26  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\tPR rtl-optimization/34959\n+\t* optabs.c (expand_unop): In libcall notes, give ffs, clz, ctz,\n+\tpopcount and parity rtxes the same mode as their operand.\n+\tTruncate or extend the result to the return value's mode\n+\tif necessary.\n+\n 2008-01-26  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \tPR target/34981"}, {"sha": "448b799cb091a8866a59c875a6a7961534a25bbc", "filename": "gcc/optabs.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1230d7f8de706221a1b6f3d81a20efc2052b7e0a/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1230d7f8de706221a1b6f3d81a20efc2052b7e0a/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=1230d7f8de706221a1b6f3d81a20efc2052b7e0a", "patch": "@@ -3273,6 +3273,7 @@ expand_unop (enum machine_mode mode, optab unoptab, rtx op0, rtx target,\n     {\n       rtx insns;\n       rtx value;\n+      rtx eq_value;\n       enum machine_mode outmode = mode;\n \n       /* All of these functions return small values.  Thus we choose to\n@@ -3292,8 +3293,12 @@ expand_unop (enum machine_mode mode, optab unoptab, rtx op0, rtx target,\n       end_sequence ();\n \n       target = gen_reg_rtx (outmode);\n-      emit_libcall_block (insns, target, value,\n-\t\t\t  gen_rtx_fmt_e (unoptab->code, outmode, op0));\n+      eq_value = gen_rtx_fmt_e (unoptab->code, mode, op0);\n+      if (GET_MODE_SIZE (outmode) < GET_MODE_SIZE (mode))\n+\teq_value = simplify_gen_unary (TRUNCATE, outmode, eq_value, mode);\n+      else if (GET_MODE_SIZE (outmode) > GET_MODE_SIZE (mode))\n+\teq_value = simplify_gen_unary (ZERO_EXTEND, outmode, eq_value, mode);\n+      emit_libcall_block (insns, target, value, eq_value);\n \n       return target;\n     }"}]}