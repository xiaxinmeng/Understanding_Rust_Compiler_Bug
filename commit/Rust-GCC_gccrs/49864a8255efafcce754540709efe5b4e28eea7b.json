{"sha": "49864a8255efafcce754540709efe5b4e28eea7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk4NjRhODI1NWVmYWZjY2U3NTQ1NDA3MDllZmU1YjRlMjhlZWE3Yg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-08-07T13:48:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-08-07T13:48:31Z"}, "message": "c_locale.h (__convert_from_v): Don't use a default for __prec, assume __prec >= 0 and simplify.\n\n2004-08-07  Paolo Carlini  <pcarlini@suse.de>\n\n\t* config/locale/generic/c_locale.h (__convert_from_v): Don't\n\tuse a default for __prec, assume __prec >= 0 and simplify.\n\t* config/locale/gnu/c_locale.h (__convert_from_v): Likewise.\n\t* include/bits/locale_facets.tcc (money_put<>::do_put(long double)):\n\tPass format \"%.*Lf\" + precision == 0, equivalent to \"%.0Lf\".\n\nFrom-SVN: r85669", "tree": {"sha": "00ab173ce0375195be624ab5f464dffb7463aab0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00ab173ce0375195be624ab5f464dffb7463aab0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49864a8255efafcce754540709efe5b4e28eea7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49864a8255efafcce754540709efe5b4e28eea7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49864a8255efafcce754540709efe5b4e28eea7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49864a8255efafcce754540709efe5b4e28eea7b/comments", "author": null, "committer": null, "parents": [{"sha": "cbf8a6ab5dad4e5fc74cfe1688a17403b0abe2db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbf8a6ab5dad4e5fc74cfe1688a17403b0abe2db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbf8a6ab5dad4e5fc74cfe1688a17403b0abe2db"}], "stats": {"total": 48, "additions": 21, "deletions": 27}, "files": [{"sha": "597aa665d1ae557a2b2726047b38882714228eb7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49864a8255efafcce754540709efe5b4e28eea7b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49864a8255efafcce754540709efe5b4e28eea7b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=49864a8255efafcce754540709efe5b4e28eea7b", "patch": "@@ -1,3 +1,11 @@\n+2004-08-07  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* config/locale/generic/c_locale.h (__convert_from_v): Don't\n+\tuse a default for __prec, assume __prec >= 0 and simplify.\n+\t* config/locale/gnu/c_locale.h (__convert_from_v): Likewise.\n+\t* include/bits/locale_facets.tcc (money_put<>::do_put(long double)):\n+\tPass format \"%.*Lf\" + precision == 0, equivalent to \"%.0Lf\".\n+\n 2004-08-04  Phil Edwards  <phil@codesourcery.com>\n \n \t* docs/html/configopts.html:  Emphasize that options change."}, {"sha": "a1a568686136061afb2e9aa2cdb9cf6e891c97c5", "filename": "libstdc++-v3/config/locale/generic/c_locale.h", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49864a8255efafcce754540709efe5b4e28eea7b/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49864a8255efafcce754540709efe5b4e28eea7b/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h?ref=49864a8255efafcce754540709efe5b4e28eea7b", "patch": "@@ -57,24 +57,17 @@ namespace std\n     __convert_from_v(char* __out, \n \t\t     const int __size __attribute__((__unused__)),\n \t\t     const char* __fmt,\n-\t\t     _Tv __v, const __c_locale&, int __prec = -1)\n+\t\t     _Tv __v, const __c_locale&, int __prec)\n     {\n       char* __old = std::setlocale(LC_ALL, NULL);\n       char* __sav = new char[std::strlen(__old) + 1];\n       std::strcpy(__sav, __old);\n       std::setlocale(LC_ALL, \"C\");\n \n-      int __ret;\n #ifdef _GLIBCXX_USE_C99\n-      if (__prec >= 0)\n-        __ret = std::snprintf(__out, __size, __fmt, __prec, __v);\n-      else\n-        __ret = std::snprintf(__out, __size, __fmt, __v);\n+      const int __ret = std::snprintf(__out, __size, __fmt, __prec, __v);\n #else\n-      if (__prec >= 0)\n-        __ret = std::sprintf(__out, __fmt, __prec, __v);\n-      else\n-        __ret = std::sprintf(__out, __fmt, __v);\n+      const int __ret = std::sprintf(__out, __fmt, __prec, __v);\n #endif\n       std::setlocale(LC_ALL, __sav);\n       delete [] __sav;"}, {"sha": "b6082a2e3fc0d990cf8255377ea53d17c8092b30", "filename": "libstdc++-v3/config/locale/gnu/c_locale.h", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49864a8255efafcce754540709efe5b4e28eea7b/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49864a8255efafcce754540709efe5b4e28eea7b/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h?ref=49864a8255efafcce754540709efe5b4e28eea7b", "patch": "@@ -68,29 +68,22 @@ namespace std\n     int\n     __convert_from_v(char* __out, const int __size, const char* __fmt,\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n-\t\t     _Tv __v, const __c_locale& __cloc, int __prec = -1)\n+\t\t     _Tv __v, const __c_locale& __cloc, int __prec)\n     {\n       __c_locale __old = __gnu_cxx::__uselocale(__cloc);\n #else\n-\t\t     _Tv __v, const __c_locale&, int __prec = -1)\n+\t\t     _Tv __v, const __c_locale&, int __prec)\n     {\n       char* __old = std::setlocale(LC_ALL, NULL);\n       char* __sav = new char[std::strlen(__old) + 1];\n       std::strcpy(__sav, __old);\n       std::setlocale(LC_ALL, \"C\");\n #endif\n \n-      int __ret;\n #ifdef _GLIBCXX_USE_C99\n-      if (__prec >= 0)\n-        __ret = std::snprintf(__out, __size, __fmt, __prec, __v);\n-      else\n-        __ret = std::snprintf(__out, __size, __fmt, __v);\n+      const int __ret = std::snprintf(__out, __size, __fmt, __prec, __v);\n #else\n-      if (__prec >= 0)\n-        __ret = std::sprintf(__out, __fmt, __prec, __v);\n-      else\n-        __ret = std::sprintf(__out, __fmt, __v);\n+      const int __ret = std::sprintf(__out, __fmt, __prec, __v);\n #endif\n \n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)"}, {"sha": "f5fd21ba79622330dc93bd8fab61d2a157907249", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49864a8255efafcce754540709efe5b4e28eea7b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49864a8255efafcce754540709efe5b4e28eea7b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=49864a8255efafcce754540709efe5b4e28eea7b", "patch": "@@ -1689,22 +1689,22 @@ namespace std\n       char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 328. Bad sprintf format modifier in money_put<>::do_put()\n-      int __len = std::__convert_from_v(__cs, __cs_size, \"%.0Lf\", __units,\n-\t\t\t\t\t_S_get_c_locale());\n+      int __len = std::__convert_from_v(__cs, __cs_size, \"%.*Lf\", __units,\n+\t\t\t\t\t_S_get_c_locale(), 0);\n       // If the buffer was not large enough, try again with the correct size.\n       if (__len >= __cs_size)\n \t{\n \t  __cs_size = __len + 1;\n \t  __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-\t  __len = std::__convert_from_v(__cs, __cs_size, \"%.0Lf\", __units,\n-\t\t\t\t\t_S_get_c_locale());\n+\t  __len = std::__convert_from_v(__cs, __cs_size, \"%.*Lf\", __units,\n+\t\t\t\t\t_S_get_c_locale(), 0);\n \t}\n #else\n       // max_exponent10 + 1 for the integer part, + 2 for sign and '\\0'.\n       const int __cs_size = numeric_limits<long double>::max_exponent10 + 3;\n       char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-      int __len = std::__convert_from_v(__cs, 0, \"%.0Lf\", __units,\n-\t\t\t\t\t_S_get_c_locale());\n+      int __len = std::__convert_from_v(__cs, 0, \"%.*Lf\", __units,\n+\t\t\t\t\t_S_get_c_locale(), 0);\n #endif\n       _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\n \t\t\t\t\t\t\t   * __cs_size));"}]}