{"sha": "7c32b0d5ccd3dcd0358f4fa2207713754b768649", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MzMmIwZDVjY2QzZGNkMDM1OGY0ZmEyMjA3NzEzNzU0Yjc2ODY0OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-12-17T20:40:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-12-17T20:40:01Z"}, "message": "re PR target/92841 (Optimize -fstack-protector-strong code generation a bit)\n\n\tPR target/92841\n\t* config/i386/i386.md (@stack_protect_set_1_<mode>,\n\t@stack_protect_test_1_<mode>): Use output_asm_insn.\n\t(*stack_protect_set_2_<mode>, *stack_protect_set_3): New define_insns\n\tand corresponding define_peephole2s.\n\n\t* gcc.target/i386/pr92841.c: New test.\n\nFrom-SVN: r279468", "tree": {"sha": "14f941ea3662b18523571ab54307897d8492ed32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14f941ea3662b18523571ab54307897d8492ed32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c32b0d5ccd3dcd0358f4fa2207713754b768649", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c32b0d5ccd3dcd0358f4fa2207713754b768649", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c32b0d5ccd3dcd0358f4fa2207713754b768649", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c32b0d5ccd3dcd0358f4fa2207713754b768649/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7ec85098eb6e1660ee62aca3483112afbebded1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ec85098eb6e1660ee62aca3483112afbebded1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ec85098eb6e1660ee62aca3483112afbebded1e"}], "stats": {"total": 132, "additions": 130, "deletions": 2}, "files": [{"sha": "6267594928576aa92f5e12d94bad24571a7f399a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c32b0d5ccd3dcd0358f4fa2207713754b768649/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c32b0d5ccd3dcd0358f4fa2207713754b768649/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c32b0d5ccd3dcd0358f4fa2207713754b768649", "patch": "@@ -1,3 +1,11 @@\n+2019-12-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/92841\n+\t* config/i386/i386.md (@stack_protect_set_1_<mode>,\n+\t@stack_protect_test_1_<mode>): Use output_asm_insn.\n+\t(*stack_protect_set_2_<mode>, *stack_protect_set_3): New define_insns\n+\tand corresponding define_peephole2s.\n+\n 2019-12-17  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* symtab.c (symtab_node::get_partitioning_class): Aliases of external"}, {"sha": "672fd1c2749b59871f755fb12b1593d819fa6d1f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 100, "deletions": 2, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c32b0d5ccd3dcd0358f4fa2207713754b768649/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c32b0d5ccd3dcd0358f4fa2207713754b768649/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7c32b0d5ccd3dcd0358f4fa2207713754b768649", "patch": "@@ -19768,9 +19768,104 @@\n    (set (match_scratch:PTR 2 \"=&r\") (const_int 0))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n-  \"mov{<imodesuffix>}\\t{%1, %2|%2, %1}\\;mov{<imodesuffix>}\\t{%2, %0|%0, %2}\\;xor{l}\\t%k2, %k2\"\n+{\n+  output_asm_insn (\"mov{<imodesuffix>}\\t{%1, %2|%2, %1}\", operands);\n+  output_asm_insn (\"mov{<imodesuffix>}\\t{%2, %0|%0, %2}\", operands);\n+  return \"xor{l}\\t%k2, %k2\";\n+}\n   [(set_attr \"type\" \"multi\")])\n \n+;; Patterns and peephole2s to optimize stack_protect_set_1_<mode>\n+;; immediately followed by *mov{s,d}i_internal to the same register,\n+;; where we can avoid the xor{l} above.  We don't split this, so that\n+;; scheduling or anything else doesn't separate the *stack_protect_set*\n+;; pattern from the set of the register that overwrites the register\n+;; with a new value.\n+(define_insn \"*stack_protect_set_2_<mode>\"\n+  [(set (match_operand:PTR 0 \"memory_operand\" \"=m\")\n+\t(unspec:PTR [(match_operand:PTR 3 \"memory_operand\" \"m\")]\n+\t\t    UNSPEC_SP_SET))\n+   (set (match_operand:SI 1 \"register_operand\" \"=&r\")\n+\t(match_operand:SI 2 \"general_operand\" \"g\"))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"reload_completed\n+   && !reg_overlap_mentioned_p (operands[1], operands[2])\"\n+{\n+  output_asm_insn (\"mov{<imodesuffix>}\\t{%3, %<k>1|%<k>1, %3}\", operands);\n+  output_asm_insn (\"mov{<imodesuffix>}\\t{%<k>1, %0|%0, %<k>1}\", operands);\n+  if (pic_32bit_operand (operands[2], SImode)\n+      || ix86_use_lea_for_mov (insn, operands + 1))\n+    return \"lea{l}\\t{%E2, %1|%1, %E2}\";\n+  else\n+    return \"mov{l}\\t{%2, %1|%1, %2}\";\n+}\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"24\")])\n+\n+(define_peephole2\n+ [(parallel [(set (match_operand:PTR 0 \"memory_operand\")\n+\t\t  (unspec:PTR [(match_operand:PTR 1 \"memory_operand\")]\n+\t\t\t      UNSPEC_SP_SET))\n+\t     (set (match_operand:PTR 2 \"general_reg_operand\") (const_int 0))\n+\t     (clobber (reg:CC FLAGS_REG))])\n+  (set (match_operand:SI 3 \"general_reg_operand\")\n+       (match_operand:SI 4))]\n+ \"REGNO (operands[2]) == REGNO (operands[3])\n+  && (general_reg_operand (operands[4], SImode)\n+      || memory_operand (operands[4], SImode)\n+      || immediate_operand (operands[4], SImode))\n+  && !reg_overlap_mentioned_p (operands[3], operands[4])\"\n+ [(parallel [(set (match_dup 0)\n+\t\t  (unspec:PTR [(match_dup 1)] UNSPEC_SP_SET))\n+\t     (set (match_dup 3) (match_dup 4))\n+\t     (clobber (reg:CC FLAGS_REG))])])\n+\n+(define_insn \"*stack_protect_set_3\"\n+  [(set (match_operand:DI 0 \"memory_operand\" \"=m,m,m\")\n+\t(unspec:DI [(match_operand:DI 3 \"memory_operand\" \"m,m,m\")]\n+\t\t   UNSPEC_SP_SET))\n+   (set (match_operand:DI 1 \"register_operand\" \"=&r,r,r\")\n+\t(match_operand:DI 2 \"general_operand\" \"Z,rem,i\"))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT\n+   && reload_completed\n+   && !reg_overlap_mentioned_p (operands[1], operands[2])\"\n+{\n+  output_asm_insn (\"mov{q}\\t{%3, %1|%1, %3}\", operands);\n+  output_asm_insn (\"mov{q}\\t{%1, %0|%0, %1}\", operands);\n+  if (which_alternative == 0)\n+    return \"mov{l}\\t{%k2, %k1|%k1, %k2}\";\n+  else if (which_alternative == 2)\n+    return \"movabs{q}\\t{%2, %1|%1, %2}\";\n+  else if (pic_32bit_operand (operands[2], DImode)\n+\t   || ix86_use_lea_for_mov (insn, operands + 1))\n+    return \"lea{q}\\t{%E2, %1|%1, %E2}\";\n+  else\n+    return \"mov{q}\\t{%2, %1|%1, %2}\";\n+}\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"24\")])\n+\n+(define_peephole2\n+ [(parallel [(set (match_operand:DI 0 \"memory_operand\")\n+\t\t  (unspec:DI [(match_operand:DI 1 \"memory_operand\")]\n+\t\t\t     UNSPEC_SP_SET))\n+\t     (set (match_operand:DI 2 \"general_reg_operand\") (const_int 0))\n+\t     (clobber (reg:CC FLAGS_REG))])\n+  (set (match_dup 2) (match_operand:DI 3))]\n+ \"TARGET_64BIT\n+  && (general_reg_operand (operands[3], DImode)\n+      || memory_operand (operands[3], DImode)\n+      || x86_64_zext_immediate_operand (operands[3], DImode)\n+      || x86_64_immediate_operand (operands[3], DImode)\n+      || (CONSTANT_P (operands[3])\n+\t  && (!flag_pic || LEGITIMATE_PIC_OPERAND_P (operands[3]))))\n+  && !reg_overlap_mentioned_p (operands[2], operands[3])\"\n+ [(parallel [(set (match_dup 0)\n+\t\t  (unspec:PTR [(match_dup 1)] UNSPEC_SP_SET))\n+\t     (set (match_dup 2) (match_dup 3))\n+\t     (clobber (reg:CC FLAGS_REG))])])\n+\n (define_expand \"stack_protect_test\"\n   [(match_operand 0 \"memory_operand\")\n    (match_operand 1 \"memory_operand\")\n@@ -19794,7 +19889,10 @@\n \t\t    UNSPEC_SP_TEST))\n    (clobber (match_scratch:PTR 3 \"=&r\"))]\n   \"\"\n-  \"mov{<imodesuffix>}\\t{%1, %3|%3, %1}\\;sub{<imodesuffix>}\\t{%2, %3|%3, %2}\"\n+{\n+  output_asm_insn (\"mov{<imodesuffix>}\\t{%1, %3|%3, %1}\", operands);\n+  return \"sub{<imodesuffix>}\\t{%2, %3|%3, %2}\";\n+}\n   [(set_attr \"type\" \"multi\")])\n \n (define_insn \"sse4_2_crc32<mode>\""}, {"sha": "0ba27eba78b6c8247267561fe70c711361317183", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c32b0d5ccd3dcd0358f4fa2207713754b768649/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c32b0d5ccd3dcd0358f4fa2207713754b768649/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7c32b0d5ccd3dcd0358f4fa2207713754b768649", "patch": "@@ -1,3 +1,8 @@\n+2019-12-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/92841\n+\t* gcc.target/i386/pr92841.c: New test.\n+\n 2019-12-17  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/arm/pr45701-1.c: Adjust for -mpure-code."}, {"sha": "30be2b630766e5901a19738492088f682d84a56d", "filename": "gcc/testsuite/gcc.target/i386/pr92841.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c32b0d5ccd3dcd0358f4fa2207713754b768649/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92841.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c32b0d5ccd3dcd0358f4fa2207713754b768649/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92841.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92841.c?ref=7c32b0d5ccd3dcd0358f4fa2207713754b768649", "patch": "@@ -0,0 +1,17 @@\n+/* PR target/92841 */\n+/* { dg-do compile { target fstack_protector } } */\n+/* { dg-options \"-O2 -fstack-protector-strong -masm=att\" } */\n+/* { dg-final { scan-assembler-not \"xor\\[lq]\\t%(\\[re]\\[a-z0-9]*), %\\\\1\\[\\n\\r]*\\tmov\\[lq]\\t\\[^\\n\\r]*, %\\\\1\" } } */\n+\n+const struct S { int b; } c[] = {30, 12, 20, 0, 11};\n+void bar (int *);\n+\n+void\n+foo (void)\n+{\n+  int e[4];\n+  const struct S *a;\n+  for (a = c; a < c + sizeof (c) / sizeof (c[0]); a++)\n+    if (a->b)\n+      bar (e);\n+}"}]}