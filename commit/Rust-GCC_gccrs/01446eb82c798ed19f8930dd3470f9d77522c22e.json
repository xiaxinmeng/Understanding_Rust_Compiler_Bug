{"sha": "01446eb82c798ed19f8930dd3470f9d77522c22e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE0NDZlYjgyYzc5OGVkMTlmODkzMGRkMzQ3MGY5ZDc3NTIyYzIyZQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2013-03-30T10:19:02Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2013-03-30T10:19:02Z"}, "message": "trans-expr.c (build_memcmp_call): New function.\n\n2013-03-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\t* trans-expr.c (build_memcmp_call):  New function.\n\t(gfc_build_compare_string):  If the strings\n\tcompared have constant and equal lengths and\n\tthe strings are kind=1, or, for kind=4 strings,\n\tthe test is for (in)equality, use memcmp().\n\n2013-03-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\t* gfortran.dg/character_comparison_3.f90:  Adjust for use of memcmp\n\tfor constant and equal string lengths.\n\t* gfortran.dg/character_comparison_5.f90:  Likewise.\n\t* gfortran.dg/character_comparison_9.f90:  New test.\n\nFrom-SVN: r197261", "tree": {"sha": "2268fa99cea63797dc549729fa965505d884280a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2268fa99cea63797dc549729fa965505d884280a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01446eb82c798ed19f8930dd3470f9d77522c22e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01446eb82c798ed19f8930dd3470f9d77522c22e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01446eb82c798ed19f8930dd3470f9d77522c22e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01446eb82c798ed19f8930dd3470f9d77522c22e/comments", "author": null, "committer": null, "parents": [{"sha": "032951216cf00d9609fbba89186331bd7b4d9efd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/032951216cf00d9609fbba89186331bd7b4d9efd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/032951216cf00d9609fbba89186331bd7b4d9efd"}], "stats": {"total": 67, "additions": 65, "deletions": 2}, "files": [{"sha": "454755bddb7a2bdf5d35f612bc45b02229d417a6", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01446eb82c798ed19f8930dd3470f9d77522c22e/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01446eb82c798ed19f8930dd3470f9d77522c22e/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=01446eb82c798ed19f8930dd3470f9d77522c22e", "patch": "@@ -2689,6 +2689,32 @@ gfc_optimize_len_trim (tree len, tree str, int kind)\n   return -1;\n }\n \n+/* Helper to build a call to memcmp.  */\n+\n+static tree\n+build_memcmp_call (tree s1, tree s2, tree n)\n+{\n+  tree tmp;\n+\n+  if (!POINTER_TYPE_P (TREE_TYPE (s1)))\n+    s1 = gfc_build_addr_expr (pvoid_type_node, s1);\n+  else\n+    s1 = fold_convert (pvoid_type_node, s1);\n+\n+  if (!POINTER_TYPE_P (TREE_TYPE (s2)))\n+    s2 = gfc_build_addr_expr (pvoid_type_node, s2);\n+  else\n+    s2 = fold_convert (pvoid_type_node, s2);\n+\n+  n = fold_convert (size_type_node, n);\n+\n+  tmp = build_call_expr_loc (input_location,\n+\t\t\t     builtin_decl_explicit (BUILT_IN_MEMCMP),\n+\t\t\t     3, s1, s2, n);\n+\n+  return fold_convert (integer_type_node, tmp);\n+}\n+\n /* Compare two strings. If they are all single characters, the result is the\n    subtraction of them. Otherwise, we build a library call.  */\n \n@@ -2730,6 +2756,26 @@ gfc_build_compare_string (tree len1, tree str1, tree len2, tree str2, int kind,\n \treturn integer_one_node;\n     }\n \n+  /* We can compare via memcpy if the strings are known to be equal\n+     in length and they are\n+     - kind=1\n+     - kind=4 and the comparision is for (in)equality.  */\n+\n+  if (INTEGER_CST_P (len1) && INTEGER_CST_P (len2)\n+      && tree_int_cst_equal (len1, len2)\n+      && (kind == 1 || code == EQ_EXPR || code == NE_EXPR))\n+    {\n+      tree tmp;\n+      tree chartype;\n+\n+      chartype = gfc_get_char_type (kind);\n+      tmp = fold_build2_loc (input_location, MULT_EXPR, TREE_TYPE(len1),\n+\t\t\t     fold_convert (TREE_TYPE(len1),\n+\t\t\t\t\t   TYPE_SIZE_UNIT(chartype)),\n+\t\t\t     len1);\n+      return build_memcmp_call (str1, str2, tmp);\n+    }\n+\n   /* Build a call for the comparison.  */\n   if (kind == 1)\n     fndecl = gfor_fndecl_compare_string;"}, {"sha": "c5acace53a4bf73fdbfb60ac60043eaa0bc967ca", "filename": "gcc/testsuite/gfortran.dg/character_comparison_3.f90", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01446eb82c798ed19f8930dd3470f9d77522c22e/gcc%2Ftestsuite%2Fgfortran.dg%2Fcharacter_comparison_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01446eb82c798ed19f8930dd3470f9d77522c22e/gcc%2Ftestsuite%2Fgfortran.dg%2Fcharacter_comparison_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcharacter_comparison_3.f90?ref=01446eb82c798ed19f8930dd3470f9d77522c22e", "patch": "@@ -25,6 +25,7 @@ program main\n   if (c(:k3) == c(:k44)) call abort\n end program main\n \n-! { dg-final { scan-tree-dump-times \"gfortran_compare_string\" 8 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"gfortran_compare_string\" 6 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_memcmp\" 2 \"original\" } }\n ! { dg-final { cleanup-tree-dump \"original\" } }\n "}, {"sha": "08af59a579d469511ab9bc3116b10bdbc3aabbae", "filename": "gcc/testsuite/gfortran.dg/character_comparison_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01446eb82c798ed19f8930dd3470f9d77522c22e/gcc%2Ftestsuite%2Fgfortran.dg%2Fcharacter_comparison_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01446eb82c798ed19f8930dd3470f9d77522c22e/gcc%2Ftestsuite%2Fgfortran.dg%2Fcharacter_comparison_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcharacter_comparison_5.f90?ref=01446eb82c798ed19f8930dd3470f9d77522c22e", "patch": "@@ -16,6 +16,6 @@ program main\n end program main\n \n ! { dg-final { scan-tree-dump-times \"gfortran_concat_string\" 0 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"gfortran_compare_string\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_memcmp\" 2 \"original\" } }\n ! { dg-final { cleanup-tree-dump \"original\" } }\n "}, {"sha": "9d17b3c99c960c365af453e4e7eb463fcd436f3e", "filename": "gcc/testsuite/gfortran.dg/character_comparison_9.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01446eb82c798ed19f8930dd3470f9d77522c22e/gcc%2Ftestsuite%2Fgfortran.dg%2Fcharacter_comparison_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01446eb82c798ed19f8930dd3470f9d77522c22e/gcc%2Ftestsuite%2Fgfortran.dg%2Fcharacter_comparison_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcharacter_comparison_9.f90?ref=01446eb82c798ed19f8930dd3470f9d77522c22e", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do run }\n+! { dg-options \"-fdump-tree-original\" }\n+program main\n+  character (len=2) :: a, b\n+  character (kind=4,len=4) :: c,d\n+  a = 'ab'\n+  b = 'aa'\n+  if (a < b) call abort\n+  c = 4_\"aaaa\"\n+  d = 4_\"aaab\"\n+  if (c == d) call abort\n+  if (c > d) call abort\n+end program main\n+! { dg-final { scan-tree-dump-times \"_gfortran_compare_string_char4\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_memcmp\" 2 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}