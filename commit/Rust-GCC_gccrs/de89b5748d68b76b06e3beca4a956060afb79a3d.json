{"sha": "de89b5748d68b76b06e3beca4a956060afb79a3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU4OWI1NzQ4ZDY4Yjc2YjA2ZTNiZWNhNGE5NTYwNjBhZmI3OWEzZA==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2019-12-20T11:35:20Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2019-12-20T11:35:20Z"}, "message": "Fortran] PR 92996 \u2013 fix rank resolution EXPR_ARRAY\n\n        PR fortran/92996\n        gcc/fortran/\n        * expr.c (simplify_parameter_variable): Call gfc_resolve_ref and\n        gfc_expression_rank; fix location info.\n        * gfortran.h (gfc_resolve_ref, gfc_expression_rank): Declare.\n        * match.c (gfc_match_stopcode): Remove redundant setting of\n        gfc_init_expr_flag; early return if gfc_simplify_expr has an error.\n        * resolve.c (gfc_expression_rank): Renamed from expression_rank;\n        minor cleanup.\n        (gfc_resolve_ref): Removed static and renamed from resolve_ref.\n        (resolve_variable, resolve_typebound_function,\n        resolve_typebound_subroutine, resolve_ppc_call, resolve_expr_ppc,\n        gfc_resolve_expr, resolve_procedure): Update calls.\n\n        PR fortran/92996\n        gcc/testsuite/\n        * gfortran.dg/array_simplify_4.f90: New.\n        * gfortran.dg/pr91565.f90: Update dg-error.\n        * gfortran.dg/pr91801.f90: Likewise.\n\nFrom-SVN: r279638", "tree": {"sha": "ff72f1c042fa19182d5953447d3c03b1c2408fdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff72f1c042fa19182d5953447d3c03b1c2408fdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de89b5748d68b76b06e3beca4a956060afb79a3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de89b5748d68b76b06e3beca4a956060afb79a3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de89b5748d68b76b06e3beca4a956060afb79a3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de89b5748d68b76b06e3beca4a956060afb79a3d/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e565e49fb22cb466dc8af0dc09a061b30806cc04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e565e49fb22cb466dc8af0dc09a061b30806cc04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e565e49fb22cb466dc8af0dc09a061b30806cc04"}], "stats": {"total": 117, "additions": 86, "deletions": 31}, "files": [{"sha": "8d480c5ce125204fd7dd0542af9e5ffed527da76", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de89b5748d68b76b06e3beca4a956060afb79a3d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de89b5748d68b76b06e3beca4a956060afb79a3d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=de89b5748d68b76b06e3beca4a956060afb79a3d", "patch": "@@ -1,3 +1,18 @@\n+2019-12-20  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/92996\n+\t* expr.c (simplify_parameter_variable): Call gfc_resolve_ref and\n+\tgfc_expression_rank; fix location info.\n+\t* gfortran.h (gfc_resolve_ref, gfc_expression_rank): Declare.\n+\t* match.c (gfc_match_stopcode): Remove redundant setting of\n+\tgfc_init_expr_flag; early return if gfc_simplify_expr has an error.\n+\t* resolve.c (gfc_expression_rank): Renamed from expression_rank;\n+\tminor cleanup.\n+\t(gfc_resolve_ref): Removed static and renamed from resolve_ref.\n+\t(resolve_variable, resolve_typebound_function,\n+\tresolve_typebound_subroutine, resolve_ppc_call, resolve_expr_ppc,\n+\tgfc_resolve_expr, resolve_procedure): Update calls.\n+\n 2019-12-20  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* openmp.c (resolve_omp_clauses): Move is-coindexed check from here ..."}, {"sha": "fc67a9dd5b0e397447becdabcbaed1bf8d66b8cd", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de89b5748d68b76b06e3beca4a956060afb79a3d/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de89b5748d68b76b06e3beca4a956060afb79a3d/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=de89b5748d68b76b06e3beca4a956060afb79a3d", "patch": "@@ -2044,6 +2044,15 @@ simplify_parameter_variable (gfc_expr *p, int type)\n   gfc_expr *e;\n   bool t;\n \n+  /* Set rank and check array ref; as resolve_variable calls\n+     gfc_simplify_expr, call gfc_resolve_ref + gfc_expression_rank instead.  */\n+  if (!gfc_resolve_ref (p))\n+    {\n+      gfc_error_check ();\n+      return false;\n+    }\n+  gfc_expression_rank (p);\n+\n   if (gfc_is_size_zero_array (p))\n     {\n       if (p->expr_type == EXPR_ARRAY)\n@@ -2073,6 +2082,7 @@ simplify_parameter_variable (gfc_expr *p, int type)\n   if (e->expr_type != EXPR_CONSTANT && p->ref != NULL)\n     e->ref = gfc_copy_ref (p->ref);\n   t = gfc_simplify_expr (e, type);\n+  e->where = p->where;\n \n   /* Only use the simplification if it eliminated all subobject references.  */\n   if (t && !e->ref)"}, {"sha": "b38238a9faaea34888c0246f3bda8557b3ad5ec7", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de89b5748d68b76b06e3beca4a956060afb79a3d/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de89b5748d68b76b06e3beca4a956060afb79a3d/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=de89b5748d68b76b06e3beca4a956060afb79a3d", "patch": "@@ -3352,6 +3352,8 @@ void gfc_free_statements (gfc_code *);\n void gfc_free_association_list (gfc_association_list *);\n \n /* resolve.c */\n+void gfc_expression_rank (gfc_expr *);\n+bool gfc_resolve_ref (gfc_expr *);\n bool gfc_resolve_expr (gfc_expr *);\n void gfc_resolve (gfc_namespace *);\n void gfc_resolve_code (gfc_code *, gfc_namespace *);"}, {"sha": "d3e3abcb700f3fe374b1b18a7945739f60531fce", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de89b5748d68b76b06e3beca4a956060afb79a3d/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de89b5748d68b76b06e3beca4a956060afb79a3d/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=de89b5748d68b76b06e3beca4a956060afb79a3d", "patch": "@@ -3073,7 +3073,8 @@ gfc_match_stopcode (gfc_statement st)\n \n   if (e != NULL)\n     {\n-      gfc_simplify_expr (e, 0);\n+      if (!gfc_simplify_expr (e, 0))\n+\tgoto cleanup;\n \n       /* Test for F95 and F2003 style STOP stop-code.  */\n       if (e->expr_type != EXPR_CONSTANT && (f95 || f03))\n@@ -3085,9 +3086,7 @@ gfc_match_stopcode (gfc_statement st)\n \n       /* Use the machinery for an initialization expression to reduce the\n \t stop-code to a constant.  */\n-      gfc_init_expr_flag = true;\n       gfc_reduce_init_expr (e);\n-      gfc_init_expr_flag = false;\n \n       /* Test for F2008 style STOP stop-code.  */\n       if (e->expr_type != EXPR_CONSTANT && f08)"}, {"sha": "92ed413fe0a0b52eb6cb2d06f673b340719b44ff", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de89b5748d68b76b06e3beca4a956060afb79a3d/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de89b5748d68b76b06e3beca4a956060afb79a3d/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=de89b5748d68b76b06e3beca4a956060afb79a3d", "patch": "@@ -5189,8 +5189,8 @@ gfc_resolve_substring_charlen (gfc_expr *e)\n \n /* Resolve subtype references.  */\n \n-static bool\n-resolve_ref (gfc_expr *expr)\n+bool\n+gfc_resolve_ref (gfc_expr *expr)\n {\n   int current_part_dimension, n_components, seen_part_dimension;\n   gfc_ref *ref, **prev;\n@@ -5359,7 +5359,7 @@ expression_shape (gfc_expr *e)\n    examining the base symbol and any reference structures it may have.  */\n \n void\n-expression_rank (gfc_expr *e)\n+gfc_expression_rank (gfc_expr *e)\n {\n   gfc_ref *ref;\n   int i, rank;\n@@ -5374,14 +5374,8 @@ expression_rank (gfc_expr *e)\n \tgoto done;\n       /* Constructors can have a rank different from one via RESHAPE().  */\n \n-      if (e->symtree == NULL)\n-\t{\n-\t  e->rank = 0;\n-\t  goto done;\n-\t}\n-\n-      e->rank = (e->symtree->n.sym->as == NULL)\n-\t\t? 0 : e->symtree->n.sym->as->rank;\n+      e->rank = ((e->symtree == NULL || e->symtree->n.sym->as == NULL)\n+\t\t ? 0 : e->symtree->n.sym->as->rank);\n       goto done;\n     }\n \n@@ -5406,7 +5400,7 @@ expression_rank (gfc_expr *e)\n \t{\n \t  /* Figure out the rank of the section.  */\n \t  if (rank != 0)\n-\t    gfc_internal_error (\"expression_rank(): Two array specs\");\n+\t    gfc_internal_error (\"gfc_expression_rank(): Two array specs\");\n \n \t  for (i = 0; i < ref->u.ar.dimen; i++)\n \t    if (ref->u.ar.dimen_type[i] == DIMEN_RANGE\n@@ -5686,7 +5680,7 @@ resolve_variable (gfc_expr *e)\n \t}\n     }\n \n-  if (e->ref && !resolve_ref (e))\n+  if (e->ref && !gfc_resolve_ref (e))\n     return false;\n \n   if (sym->attr.flavor == FL_PROCEDURE\n@@ -5848,7 +5842,7 @@ resolve_variable (gfc_expr *e)\n     }\n \n   if (t)\n-    expression_rank (e);\n+    gfc_expression_rank (e);\n \n   if (t && flag_coarray == GFC_FCOARRAY_LIB && gfc_is_coindexed (e))\n     add_caf_get_intrinsic (e);\n@@ -6642,7 +6636,7 @@ resolve_typebound_function (gfc_expr* e)\n   if (st == NULL)\n     return resolve_compcall (e, NULL);\n \n-  if (!resolve_ref (e))\n+  if (!gfc_resolve_ref (e))\n     return false;\n \n   /* Get the CLASS declared type.  */\n@@ -6775,7 +6769,7 @@ resolve_typebound_subroutine (gfc_code *code)\n   if (st == NULL)\n     return resolve_typebound_call (code, NULL, NULL);\n \n-  if (!resolve_ref (code->expr1))\n+  if (!gfc_resolve_ref (code->expr1))\n     return false;\n \n   /* Get the CLASS declared type.  */\n@@ -6838,7 +6832,7 @@ resolve_ppc_call (gfc_code* c)\n   if (!comp->attr.subroutine)\n     gfc_add_subroutine (&comp->attr, comp->name, &c->expr1->where);\n \n-  if (!resolve_ref (c->expr1))\n+  if (!gfc_resolve_ref (c->expr1))\n     return false;\n \n   if (!update_ppc_arglist (c->expr1))\n@@ -6881,7 +6875,7 @@ resolve_expr_ppc (gfc_expr* e)\n   if (!comp->attr.function)\n     gfc_add_function (&comp->attr, comp->name, &e->where);\n \n-  if (!resolve_ref (e))\n+  if (!gfc_resolve_ref (e))\n     return false;\n \n   if (!resolve_actual_arglist (e->value.function.actual, comp->attr.proc,\n@@ -7011,7 +7005,7 @@ gfc_resolve_expr (gfc_expr *e)\n       break;\n \n     case EXPR_SUBSTRING:\n-      t = resolve_ref (e);\n+      t = gfc_resolve_ref (e);\n       break;\n \n     case EXPR_CONSTANT:\n@@ -7025,14 +7019,14 @@ gfc_resolve_expr (gfc_expr *e)\n \n     case EXPR_ARRAY:\n       t = false;\n-      if (!resolve_ref (e))\n+      if (!gfc_resolve_ref (e))\n \tbreak;\n \n       t = gfc_resolve_array_constructor (e);\n       /* Also try to expand a constructor.  */\n       if (t)\n \t{\n-\t  expression_rank (e);\n+\t  gfc_expression_rank (e);\n \t  if (gfc_is_constant_expr (e) || gfc_is_expandable_expr (e))\n \t    gfc_expand_constructor (e, false);\n \t}\n@@ -7051,7 +7045,7 @@ gfc_resolve_expr (gfc_expr *e)\n       break;\n \n     case EXPR_STRUCTURE:\n-      t = resolve_ref (e);\n+      t = gfc_resolve_ref (e);\n       if (!t)\n \tbreak;\n "}, {"sha": "d5bd666eec3a9507a7432b547f82a771e470a7ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de89b5748d68b76b06e3beca4a956060afb79a3d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de89b5748d68b76b06e3beca4a956060afb79a3d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de89b5748d68b76b06e3beca4a956060afb79a3d", "patch": "@@ -1,3 +1,10 @@\n+2019-12-20  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/92996\n+\t* gfortran.dg/array_simplify_4.f90: New.\n+\t* gfortran.dg/pr91565.f90: Update dg-error.\n+\t* gfortran.dg/pr91801.f90: Likewise.\n+\n 2019-12-20  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* gfortran.dg/goacc/coindexed-1.f90: New."}, {"sha": "2aa522be44dab63c9e85c97d9524b93c64e0199c", "filename": "gcc/testsuite/gfortran.dg/array_simplify_4.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de89b5748d68b76b06e3beca4a956060afb79a3d/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_simplify_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de89b5748d68b76b06e3beca4a956060afb79a3d/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_simplify_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_simplify_4.f90?ref=de89b5748d68b76b06e3beca4a956060afb79a3d", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do compile }\n+!\n+! PR fortran/92996\n+!\n+! Contributed by G. Steinmetz\n+!\n+\n+module m\n+  integer, parameter :: d(2) = [0,0]\n+end module m\n+\n+subroutine one\n+use m\n+print size([1,2],dim=d(1)) ! { dg-error \"'dim' argument of 'size' intrinsic at .1. is not a valid dimension index\" }\n+end\n+\n+subroutine two\n+complex, parameter :: x = 1\n+\n+stop x  ! { dg-error \"STOP code at .1. must be either INTEGER or CHARACTER type\" }\n+end\n+\n+program p\n+   integer, parameter :: a(2) = [1, 2]\n+   stop a(1) ! OK\n+   stop a ! { dg-error \"STOP code at .1. must be scalar\" }\n+   stop a(1,1) ! { dg-error \"Rank mismatch in array reference at .1. .2/1.\" }\n+end"}, {"sha": "e4e121c717acf5a4cabd1c8fdda45ed2b8091069", "filename": "gcc/testsuite/gfortran.dg/pr91565.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de89b5748d68b76b06e3beca4a956060afb79a3d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91565.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de89b5748d68b76b06e3beca4a956060afb79a3d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91565.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91565.f90?ref=de89b5748d68b76b06e3beca4a956060afb79a3d", "patch": "@@ -2,16 +2,16 @@\n ! PR fortran/91565\n ! Contributed by Gerhard Steinmetz\n program p\n-   integer, parameter :: a(2) = [2,2]              ! { dg-error \"\\(1\\)\" }\n-   print *, reshape([1,2,3,4,5,6], [2,3], order=a) ! { dg-error \"not a permutation\" }\n+   integer, parameter :: a(2) = [2,2]\n+   print *, reshape([1,2,3,4,5,6], [2,3], order=a) ! { dg-error \"ORDER at .1. is not a permutation of the size of SHAPE at .2.\" }\n end\n \n subroutine foo\n-   integer, parameter :: a(1) = 1                  ! { dg-error \"\\(1\\)\" }\n+   integer, parameter :: a(1) = 1\n    print *, reshape([1,2,3,4,5,6], [2,3], order=a) ! { dg-error \"are different\" }\n end\n \n subroutine bar\n-   integer, parameter :: a(1,2) = 1                ! { dg-error \"\\(1\\)\" }\n+   integer, parameter :: a(1,2) = 1\n    print *, reshape([1,2,3,4,5,6], [2,3], order=a) ! { dg-error \"are different\" }\n end"}, {"sha": "809068b9659410e1d0dd797b0916618e9d32b40e", "filename": "gcc/testsuite/gfortran.dg/pr91801.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de89b5748d68b76b06e3beca4a956060afb79a3d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91801.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de89b5748d68b76b06e3beca4a956060afb79a3d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91801.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91801.f90?ref=de89b5748d68b76b06e3beca4a956060afb79a3d", "patch": "@@ -2,6 +2,6 @@\n ! PR fortran/91801\n ! Code contributed by Gerhard Steinmetz\n program p\n-   integer, parameter :: a(2) = [2,0]              ! { dg-error \"Element with a value of\" }\n-   print *, reshape([1,2,3,4,5,6], [2,3], order=a) ! { dg-error \"for the RESHAPE intrinsic near\" }\n+   integer, parameter :: a(2) = [2,0]\n+   print *, reshape([1,2,3,4,5,6], [2,3], order=a) ! { dg-error \"Element with a value of 0 in ORDER at .1. must be in the range .1, ..., 2. for the RESHAPE intrinsic near .2.\" }\n end"}]}