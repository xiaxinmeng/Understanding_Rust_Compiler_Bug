{"sha": "cfbed37cf88d2cec79b5ed34c71ea3e40b2b2578", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZiZWQzN2NmODhkMmNlYzc5YjVlZDM0YzcxZWEzZTQwYjJiMjU3OA==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2004-01-18T01:15:30Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2004-01-18T01:15:30Z"}, "message": "objc-act.c (build_objc_method_call): Use target hooks instead of macros to determine if...\n\n[gcc/ChangeLog]\n2004-01-17  Ziemowit Laski  <zlaski@apple.com>\n\n        * objc/objc-act.c (build_objc_method_call): Use target\n        hooks instead of macros to determine if ..._stret\n        dispatchers should be used (NeXT runtime only).\n\n[gcc/testsuite/ChangeLog]\n2004-01-17  Ziemowit Laski  <zlaski@apple.com>\n\n        * objc.dg/stret-1.m: New.\n        * objc.dg/stret-2.m: New.\n\nFrom-SVN: r76072", "tree": {"sha": "c3595f57985b417613871b9f76d64f7fa7e654fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3595f57985b417613871b9f76d64f7fa7e654fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfbed37cf88d2cec79b5ed34c71ea3e40b2b2578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfbed37cf88d2cec79b5ed34c71ea3e40b2b2578", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfbed37cf88d2cec79b5ed34c71ea3e40b2b2578", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfbed37cf88d2cec79b5ed34c71ea3e40b2b2578/comments", "author": null, "committer": null, "parents": [{"sha": "cec403bcea4ea5736ecb2c92cd39ad4d5aac988d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cec403bcea4ea5736ecb2c92cd39ad4d5aac988d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cec403bcea4ea5736ecb2c92cd39ad4d5aac988d"}], "stats": {"total": 132, "additions": 124, "deletions": 8}, "files": [{"sha": "1f83435d33e91a00a9420edd59410a01dc12dd38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfbed37cf88d2cec79b5ed34c71ea3e40b2b2578/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfbed37cf88d2cec79b5ed34c71ea3e40b2b2578/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cfbed37cf88d2cec79b5ed34c71ea3e40b2b2578", "patch": "@@ -1,3 +1,9 @@\n+2004-01-17  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* objc/objc-act.c (build_objc_method_call): Use target\n+\thooks instead of macros to determine if ..._stret \n+\tdispatchers should be used (NeXT runtime only).\n+\n 2004-01-17  Roger Sayle  <roger@eyesopen.com>\n \n \t* builtins.c (expand_builtin_expect_jump): Fix mistake in my"}, {"sha": "c1352922c7ed1cb0727a89fddd4e55306b4cad0d", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfbed37cf88d2cec79b5ed34c71ea3e40b2b2578/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfbed37cf88d2cec79b5ed34c71ea3e40b2b2578/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=cfbed37cf88d2cec79b5ed34c71ea3e40b2b2578", "patch": "@@ -5890,21 +5890,18 @@ build_objc_method_call (int super_flag, tree method_prototype,\n \n   if (flag_next_runtime)\n     {\n-#ifdef STRUCT_VALUE\n       /* If we are returning a struct in memory, and the address\n \t of that memory location is passed as a hidden first\n \t argument, then change which messenger entry point this\n \t expr will call.  NB: Note that sender_cast remains\n \t unchanged (it already has a struct return type).  */\n-      if ((TREE_CODE (ret_type) == RECORD_TYPE\n-\t   || TREE_CODE (ret_type) == UNION_TYPE)\n-#if defined (DEFAULT_PCC_STRUCT_RETURN) && DEFAULT_PCC_STRUCT_RETURN == 0\n-\t   && RETURN_IN_MEMORY (ret_type)\n-#endif\n-\t   && STRUCT_VALUE == 0)\n+      if (!targetm.calls.struct_value_rtx (0, 0)\n+\t  && (TREE_CODE (ret_type) == RECORD_TYPE\n+\t      || TREE_CODE (ret_type) == UNION_TYPE)\n+\t  && targetm.calls.return_in_memory (ret_type, 0))\n \tsender = (super_flag ? umsg_super_stret_decl :\n \t\tflag_nil_receivers ? umsg_stret_decl : umsg_nonnil_stret_decl);\n-#endif\n+\n       method_params = tree_cons (NULL_TREE, lookup_object,\n \t\t\t\t tree_cons (NULL_TREE, selector,\n \t\t\t\t\t    method_params));"}, {"sha": "1847836d79e26b594dc4983df9e29081c07609af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfbed37cf88d2cec79b5ed34c71ea3e40b2b2578/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfbed37cf88d2cec79b5ed34c71ea3e40b2b2578/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cfbed37cf88d2cec79b5ed34c71ea3e40b2b2578", "patch": "@@ -1,3 +1,8 @@\n+2004-01-17  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* objc.dg/stret-1.m: New.\n+\t* objc.dg/stret-2.m: New.\n+\n 2004-01-17  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c++/11895"}, {"sha": "427b5574d7ebcb3f015cbf1e609fd1a7dfefb3c9", "filename": "gcc/testsuite/objc.dg/stret-1.m", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfbed37cf88d2cec79b5ed34c71ea3e40b2b2578/gcc%2Ftestsuite%2Fobjc.dg%2Fstret-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfbed37cf88d2cec79b5ed34c71ea3e40b2b2578/gcc%2Ftestsuite%2Fobjc.dg%2Fstret-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstret-1.m?ref=cfbed37cf88d2cec79b5ed34c71ea3e40b2b2578", "patch": "@@ -0,0 +1,62 @@\n+/* Test for handling of struct-returning methods.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+\n+extern void abort(void);\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+struct astruct {\n+  float a, b;\n+} glob = { 1.0, 2.0 };\n+\n+struct bstruct {\n+  float a, b, c, d, e, f;\n+} globb = { 1, 2, 3, 4, 5, 6 };\n+\n+@interface foo : Object\n+- (struct astruct) stret;\n+- (struct bstruct) stretb;\n+@end\n+\n+@implementation foo : Object\n+- (struct astruct) stret { return glob; }\n+- (struct bstruct) stretb { return globb; }\n+@end\n+\n+@interface bar: foo\n+- (struct astruct) stret;\n+- (struct bstruct) stretb;\n+@end\n+\n+@implementation bar\n+- (struct astruct) stret { struct astruct a = [super stret]; a.b = 77; return a; }\n+- (struct bstruct) stretb { struct bstruct b = [super stretb]; b.e = 99; return b; }\n+@end\n+\n+int main(void)\n+{\n+  foo *obj = [foo new];\n+  bar *obj2 = [bar new];\n+  struct astruct loc, loc2;\n+  struct bstruct locb, locb2;\n+\n+  loc = [obj stret];\n+  CHECK_IF(loc.a == 1.0 && loc.b == 2.0);\n+\n+  locb = [obj stretb];\n+  CHECK_IF(locb.f == 6 && locb.c == 3);\n+  CHECK_IF(locb.e == 5 && locb.b == 2);\n+  CHECK_IF(locb.d == 4 && locb.a == 1);\n+\n+  loc2 = [obj2 stret];\n+  CHECK_IF(loc2.a == 1.0 && loc2.b == 77);\n+  \n+  locb2 = [obj2 stretb];\n+  CHECK_IF(locb2.f == 6 && locb2.c == 3);\n+  CHECK_IF(locb2.e == 99 && locb2.b == 2);\n+  CHECK_IF(locb2.d == 4 && locb2.a == 1);\n+  \n+  return 0;\n+}"}, {"sha": "dd9a2e8e5b26db2436e8e196b3fad17e6cb79618", "filename": "gcc/testsuite/objc.dg/stret-2.m", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfbed37cf88d2cec79b5ed34c71ea3e40b2b2578/gcc%2Ftestsuite%2Fobjc.dg%2Fstret-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfbed37cf88d2cec79b5ed34c71ea3e40b2b2578/gcc%2Ftestsuite%2Fobjc.dg%2Fstret-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstret-2.m?ref=cfbed37cf88d2cec79b5ed34c71ea3e40b2b2578", "patch": "@@ -0,0 +1,46 @@\n+/* Test for handling of struct-returning methods\n+   for the Mac OS X (\"NeXT\") runtime (which uses specialized entry\n+   points).  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-do compile { target *-*-darwin* } } */\n+\n+#include <objc/Object.h>\n+\n+struct astruct {\n+  float a, b;\n+} glob = { 1.0, 2.0 };\n+\n+struct bstruct {\n+  float a, b, c, d, e, f;\n+} globb = { 1, 2, 3, 4, 5, 6 };\n+\n+@interface foo : Object\n+- (struct astruct) stret;\n+- (struct bstruct) stretb;\n+@end\n+\n+@implementation foo : Object\n+- (struct astruct) stret { return glob; }\n+- (struct bstruct) stretb { return globb; }\n+@end\n+\n+@interface bar: foo\n+- (struct astruct) stret;\n+- (struct bstruct) stretb;\n+@end\n+\n+@implementation bar\n+- (struct astruct) stret { return [super stret]; }\n+- (struct bstruct) stretb { return [super stretb]; }\n+@end\n+\n+struct astruct afunc(foo *foo_obj) {\n+  return [foo_obj stret];\n+}\n+\n+/* { dg-final { scan-assembler \"objc_msgSend_stret\" } } */\n+/* { dg-final { scan-assembler \"objc_msgSendSuper_stret\" } } */\n+\n+/* { dg-final { scan-assembler-not \"objc_msgSend\\[^_S\\]\" } } */\n+/* { dg-final { scan-assembler-not \"objc_msgSendSuper\\[^_\\]\" } } */\n+"}]}