{"sha": "68b0615be2aaff3a8ce91ba7cd0f69ebbd93702c", "node_id": "C_kwDOANBUbNoAKDY4YjA2MTViZTJhYWZmM2E4Y2U5MWJhN2NkMGY2OWViYmQ5MzcwMmM", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-08T22:42:04Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-09T06:56:35Z"}, "message": "[range-op-float] Set NAN possibility for INF + (-INF) and vice versa.\n\nSome combinations of operations can yield a NAN even if no operands\nhave the possiblity of a NAN.  For example, [-INF] + [+INF] = NAN and\nvice versa.\n\nFor [-INF,+INF] + [-INF,+INF], frange_arithmetic will not return a\nNAN, and since the operands have no possibility of a NAN, we will\nmistakenly assume the result cannot have a NAN.  This fixes the\noversight.\n\ngcc/ChangeLog:\n\n\t* range-op-float.cc (foperator_plus::fold_range): Set NAN for\n\taddition of different signed infinities.\n\t(range_op_float_tests): New test.", "tree": {"sha": "64cc83a874d962de4b3a4c937b0c224fd8b68e19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64cc83a874d962de4b3a4c937b0c224fd8b68e19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68b0615be2aaff3a8ce91ba7cd0f69ebbd93702c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68b0615be2aaff3a8ce91ba7cd0f69ebbd93702c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68b0615be2aaff3a8ce91ba7cd0f69ebbd93702c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68b0615be2aaff3a8ce91ba7cd0f69ebbd93702c/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b305793b985f4d3e0032b04d446b8baabcb3e8b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b305793b985f4d3e0032b04d446b8baabcb3e8b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b305793b985f4d3e0032b04d446b8baabcb3e8b7"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "8282c912fc48ed81949b13fe72db1a9e6712420b", "filename": "gcc/range-op-float.cc", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68b0615be2aaff3a8ce91ba7cd0f69ebbd93702c/gcc%2Frange-op-float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68b0615be2aaff3a8ce91ba7cd0f69ebbd93702c/gcc%2Frange-op-float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op-float.cc?ref=68b0615be2aaff3a8ce91ba7cd0f69ebbd93702c", "patch": "@@ -1863,7 +1863,21 @@ foperator_plus::fold_range (frange &r, tree type,\n \n   r.set (type, lb, ub);\n \n-  if (lb_nan || ub_nan)\n+  // Some combinations can yield a NAN even if no operands have the\n+  // possibility of a NAN.\n+  bool maybe_nan;\n+  // [-INF] + [+INF] = NAN\n+  if (real_isinf (&op1.lower_bound (), true)\n+      && real_isinf (&op2.upper_bound (), false))\n+    maybe_nan = true;\n+  // [+INF] + [-INF] = NAN\n+  else if (real_isinf (&op1.upper_bound (), false)\n+\t   && real_isinf (&op2.lower_bound (), true))\n+    maybe_nan = true;\n+  else\n+    maybe_nan = false;\n+\n+  if (lb_nan || ub_nan || maybe_nan)\n     // Keep the default NAN (with a varying sign) set by the setter.\n     ;\n   else if (!op1.maybe_isnan () && !op2.maybe_isnan ())\n@@ -1960,6 +1974,16 @@ range_op_float_tests ()\n   r1 = frange_float (\"-1\", \"-0\");\n   r1.update_nan (false);\n   ASSERT_EQ (r, r1);\n+\n+  // [-INF,+INF] + [-INF,+INF] could be a NAN.\n+  range_op_handler plus (PLUS_EXPR, float_type_node);\n+  r0.set_varying (float_type_node);\n+  r1.set_varying (float_type_node);\n+  r0.clear_nan ();\n+  r1.clear_nan ();\n+  plus.fold_range (r, float_type_node, r0, r1);\n+  if (HONOR_NANS (float_type_node))\n+    ASSERT_TRUE (r.maybe_isnan ());\n }\n \n } // namespace selftest"}]}