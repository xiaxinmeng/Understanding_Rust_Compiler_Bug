{"sha": "2dd68cddbc745de2c4a4b4982673122716c8231c", "node_id": "C_kwDOANBUbNoAKDJkZDY4Y2RkYmM3NDVkZTJjNGE0YjQ5ODI2NzMxMjI3MTZjODIzMWM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-02-23T10:56:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-02-24T15:41:36Z"}, "message": "Avoid default-initializing auto_vec<T, N> storage, fix vec<vl_embed>\n\nThe following avoids default-initializing auto_vec storage for\nnon-POD T since that's not what the allocated storage fallback\nwill do and it's also not expected for existing cases like\n\n  auto_vec<std::pair<unsigned, unsigned>, 64> elts;\n\nwhich exist to optimize the allocation.\n\nIt also fixes the array accesses done by vec<vl_embed> to not\nuse its own m_vecdata member but instead access the container\nprovided storage via pointer arithmetic.\n\n\t* vec.h (vec<T, A, vl_embed>::m_vecdata): Remove.\n\t(vec<T, A, vl_embed>::m_vecpfx): Align as T to avoid\n\tchanging alignment of vec<T, A, vl_embed> and simplifying\n\taddress.\n\t(vec<T, A, vl_embed>::address): Compute as this + 1.\n\t(vec<T, A, vl_embed>::embedded_size): Use sizeof the\n\tvector instead of the offset of the m_vecdata member.\n\t(auto_vec<T, N>::m_data): Turn storage into\n\tuninitialized unsigned char.\n\t(auto_vec<T, N>::auto_vec): Allow allocation of one\n\tstack member.  Initialize m_vec in a special way to\n\tavoid later stringop overflow diagnostics.\n\t* vec.cc (test_auto_alias): New.\n\t(vec_cc_tests): Call it.", "tree": {"sha": "2264d105a68d042dfa84ef637878e489323fcbe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2264d105a68d042dfa84ef637878e489323fcbe6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dd68cddbc745de2c4a4b4982673122716c8231c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dd68cddbc745de2c4a4b4982673122716c8231c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dd68cddbc745de2c4a4b4982673122716c8231c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dd68cddbc745de2c4a4b4982673122716c8231c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef22c3e90b5010a5229e70907ad2087f774fdfc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef22c3e90b5010a5229e70907ad2087f774fdfc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef22c3e90b5010a5229e70907ad2087f774fdfc0"}], "stats": {"total": 48, "additions": 37, "deletions": 11}, "files": [{"sha": "2128f6666b197edf2f615da463e092a73e18e887", "filename": "gcc/vec.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd68cddbc745de2c4a4b4982673122716c8231c/gcc%2Fvec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd68cddbc745de2c4a4b4982673122716c8231c/gcc%2Fvec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.cc?ref=2dd68cddbc745de2c4a4b4982673122716c8231c", "patch": "@@ -568,6 +568,22 @@ test_auto_delete_vec ()\n   ASSERT_EQ (dtor_count, 2);\n }\n \n+/* Verify accesses to m_vecdata are done indirectly.  */\n+\n+static void\n+test_auto_alias ()\n+{\n+  volatile int i = 1;\n+  auto_vec<int, 8> v;\n+  v.quick_grow (2);\n+  v[0] = 1;\n+  v[1] = 2;\n+  int val;\n+  for (int ix = i; v.iterate (ix, &val); ix++)\n+    ASSERT_EQ (val, 2);\n+  ASSERT_EQ (val, 0);\n+}\n+\n /* Run all of the selftests within this file.  */\n \n void\n@@ -587,6 +603,7 @@ vec_cc_tests ()\n   test_qsort ();\n   test_reverse ();\n   test_auto_delete_vec ();\n+  test_auto_alias ();\n }\n \n } // namespace selftest"}, {"sha": "36918915701f0299c814224f78d63c57e0be1313", "filename": "gcc/vec.h", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd68cddbc745de2c4a4b4982673122716c8231c/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd68cddbc745de2c4a4b4982673122716c8231c/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=2dd68cddbc745de2c4a4b4982673122716c8231c", "patch": "@@ -586,8 +586,9 @@ struct GTY((user)) vec<T, A, vl_embed>\n   unsigned allocated (void) const { return m_vecpfx.m_alloc; }\n   unsigned length (void) const { return m_vecpfx.m_num; }\n   bool is_empty (void) const { return m_vecpfx.m_num == 0; }\n-  T *address (void) { return m_vecdata; }\n-  const T *address (void) const { return m_vecdata; }\n+  T *address (void) { return reinterpret_cast <T *> (this + 1); }\n+  const T *address (void) const\n+    { return reinterpret_cast <const T *> (this + 1); }\n   T *begin () { return address (); }\n   const T *begin () const { return address (); }\n   T *end () { return address () + length (); }\n@@ -629,10 +630,10 @@ struct GTY((user)) vec<T, A, vl_embed>\n   friend struct va_gc_atomic;\n   friend struct va_heap;\n \n-  /* FIXME - These fields should be private, but we need to cater to\n+  /* FIXME - This field should be private, but we need to cater to\n \t     compilers that have stricter notions of PODness for types.  */\n-  vec_prefix m_vecpfx;\n-  T m_vecdata[1];\n+  /* Align m_vecpfx to simplify address ().  */\n+  alignas (T) alignas (vec_prefix) vec_prefix m_vecpfx;\n };\n \n \n@@ -1315,7 +1316,7 @@ vec<T, A, vl_embed>::embedded_size (unsigned alloc)\n \t\t\t\t    vec, vec_embedded>::type vec_stdlayout;\n   static_assert (sizeof (vec_stdlayout) == sizeof (vec), \"\");\n   static_assert (alignof (vec_stdlayout) == alignof (vec), \"\");\n-  return offsetof (vec_stdlayout, m_vecdata) + alloc * sizeof (T);\n+  return sizeof (vec_stdlayout) + alloc * sizeof (T);\n }\n \n \n@@ -1559,8 +1560,14 @@ class auto_vec : public vec<T, va_heap>\n public:\n   auto_vec ()\n   {\n-    m_auto.embedded_init (MAX (N, 2), 0, 1);\n-    this->m_vec = &m_auto;\n+    m_auto.embedded_init (N, 0, 1);\n+    /* ???  Instead of initializing m_vec from &m_auto directly use an\n+       expression that avoids refering to a specific member of 'this'\n+       to derail the -Wstringop-overflow diagnostic code, avoiding\n+       the impression that data accesses are supposed to be to the\n+       m_auto member storage.  */\n+    size_t off = (char *) &m_auto - (char *) this;\n+    this->m_vec = (vec<T, va_heap, vl_embed> *) ((char *) this + off);\n   }\n \n   auto_vec (size_t s CXX_MEM_STAT_INFO)\n@@ -1571,8 +1578,10 @@ class auto_vec : public vec<T, va_heap>\n \treturn;\n       }\n \n-    m_auto.embedded_init (MAX (N, 2), 0, 1);\n-    this->m_vec = &m_auto;\n+    m_auto.embedded_init (N, 0, 1);\n+    /* ???  See above.  */\n+    size_t off = (char *) &m_auto - (char *) this;\n+    this->m_vec = (vec<T, va_heap, vl_embed> *) ((char *) this + off);\n   }\n \n   ~auto_vec ()\n@@ -1590,7 +1599,7 @@ class auto_vec : public vec<T, va_heap>\n \n private:\n   vec<T, va_heap, vl_embed> m_auto;\n-  T m_data[MAX (N - 1, 1)];\n+  unsigned char m_data[sizeof (T) * N];\n };\n \n /* auto_vec is a sub class of vec whose storage is released when it is"}]}