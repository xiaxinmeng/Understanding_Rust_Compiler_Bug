{"sha": "92d9038e4fa2a9fa4ab4e5a73e243534c098764d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJkOTAzOGU0ZmEyYTlmYTRhYjRlNWE3M2UyNDM1MzRjMDk4NzY0ZA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-05-01T10:52:13Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-05-01T10:52:13Z"}, "message": "[AArch64] Add testcases for FAC, FCM changes.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/scalar-vca.c: New.\n\t* gcc.target/aarch64/vect-vca.c: Likewise.\n\nFrom-SVN: r198496", "tree": {"sha": "3ac471e126bfac043fb67a02831f136ce80eca56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ac471e126bfac043fb67a02831f136ce80eca56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92d9038e4fa2a9fa4ab4e5a73e243534c098764d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92d9038e4fa2a9fa4ab4e5a73e243534c098764d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92d9038e4fa2a9fa4ab4e5a73e243534c098764d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92d9038e4fa2a9fa4ab4e5a73e243534c098764d/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd11644e628be788a82889f3bbdb6864be52433a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd11644e628be788a82889f3bbdb6864be52433a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd11644e628be788a82889f3bbdb6864be52433a"}], "stats": {"total": 166, "additions": 166, "deletions": 0}, "files": [{"sha": "f6f7c3fad8dcd2e363ef6571a37c0cc136f63dbe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d9038e4fa2a9fa4ab4e5a73e243534c098764d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d9038e4fa2a9fa4ab4e5a73e243534c098764d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92d9038e4fa2a9fa4ab4e5a73e243534c098764d", "patch": "@@ -1,3 +1,8 @@\n+2013-05-01  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.target/aarch64/scalar-vca.c: New.\n+\t* gcc.target/aarch64/vect-vca.c: Likewise.\n+\n 2013-05-01  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* gcc.target/aarch64/scalar_intrinsics.c (force_simd): New."}, {"sha": "b1188146c9aed648eb858cdc354f190a392c6431", "filename": "gcc/testsuite/gcc.target/aarch64/scalar-vca.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d9038e4fa2a9fa4ab4e5a73e243534c098764d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar-vca.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d9038e4fa2a9fa4ab4e5a73e243534c098764d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar-vca.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar-vca.c?ref=92d9038e4fa2a9fa4ab4e5a73e243534c098764d", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#include <arm_neon.h>\n+\n+extern void abort (void);\n+extern float fabsf (float);\n+extern double fabs (double);\n+\n+#define NUM_TESTS 8\n+\n+float input_s1[] = {0.1f, -0.1f, 0.4f, 10.3f, 200.0f, -800.0f, -13.0f, -0.5f};\n+float input_s2[] = {-0.2f, 0.4f, 0.04f, -100.3f, 2.0f, -80.0f, 13.0f, -0.5f};\n+double input_d1[] = {0.1, -0.1, 0.4, 10.3, 200.0, -800.0, -13.0, -0.5};\n+double input_d2[] = {-0.2, 0.4, 0.04, -100.3, 2.0, -80.0, 13.0, -0.5};\n+\n+#define TEST(TEST, CMP, SUFFIX, WIDTH, F)\t\t\t\t\\\n+int\t\t\t\t\t\t\t\t\t\\\n+test_fca##TEST##SUFFIX##_float##WIDTH##_t (void)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  int ret = 0;\t\t\t\t\t\t\t\t\\\n+  int i = 0;\t\t\t\t\t\t\t\t\\\n+  uint##WIDTH##_t output[NUM_TESTS];\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  for (i = 0; i < NUM_TESTS; i++)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      float##WIDTH##_t f1 = fabs##F (input_##SUFFIX##1[i]);\t\t\\\n+      float##WIDTH##_t f2 = fabs##F (input_##SUFFIX##2[i]);\t\t\\\n+      /* Inhibit optimization of our linear test loop.  */\t\t\\\n+      asm volatile (\"\" : : : \"memory\");\t\t\t\t\t\\\n+      output[i] = f1 CMP f2 ? -1 : 0;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  for (i = 0; i < NUM_TESTS; i++)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      output[i] = vca##TEST##SUFFIX##_f##WIDTH (input_##SUFFIX##1[i],\t\\\n+\t\t\t\t\t\tinput_##SUFFIX##2[i])\t\\\n+\t\t\t\t\t\t  ^ output[i];\t\t\\\n+      /* Inhibit autovectorization of our scalar test loop.  */\t\t\\\n+      asm volatile (\"\" : : : \"memory\");\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  for (i = 0; i < NUM_TESTS; i++)\t\t\t\t\t\\\n+    ret |= output[i];\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  return ret;\t\t\t\t\t\t\t\t\\\n+}\n+\n+TEST (ge, >=, s, 32, f)\n+/* { dg-final { scan-assembler \"facge\\\\ts\\[0-9\\]+, s\\[0-9\\]+, s\\[0-9\\]+\" } } */\n+TEST (ge, >=, d, 64, )\n+/* { dg-final { scan-assembler \"facge\\\\td\\[0-9\\]+, d\\[0-9\\]+, d\\[0-9\\]+\" } } */\n+TEST (gt, >, s, 32, f)\n+/* { dg-final { scan-assembler \"facgt\\\\ts\\[0-9\\]+, s\\[0-9\\]+, s\\[0-9\\]+\" } } */\n+TEST (gt, >, d, 64, )\n+/* { dg-final { scan-assembler \"facgt\\\\td\\[0-9\\]+, d\\[0-9\\]+, d\\[0-9\\]+\" } } */\n+\n+int\n+main (int argc, char **argv)\n+{\n+  if (test_fcages_float32_t ())\n+    abort ();\n+  if (test_fcaged_float64_t ())\n+    abort ();\n+  if (test_fcagts_float32_t ())\n+    abort ();\n+  if (test_fcagtd_float64_t ())\n+    abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "c0cf2efdfb683642f73849b25683b1c13eee6681", "filename": "gcc/testsuite/gcc.target/aarch64/vect-vca.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d9038e4fa2a9fa4ab4e5a73e243534c098764d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vca.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d9038e4fa2a9fa4ab4e5a73e243534c098764d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vca.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vca.c?ref=92d9038e4fa2a9fa4ab4e5a73e243534c098764d", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#include <arm_neon.h>\n+\n+extern void abort (void);\n+extern float fabsf (float);\n+extern double fabs (double);\n+\n+#define NUM_TESTS 8\n+\n+float input_s1[] = {0.1f, -0.1f, 0.4f, 10.3f, 200.0f, -800.0f, -13.0f, -0.5f};\n+float input_s2[] = {-0.2f, 0.4f, 0.04f, -100.3f, 2.0f, -80.0f, 13.0f, -0.5f};\n+double input_d1[] = {0.1, -0.1, 0.4, 10.3, 200.0, -800.0, -13.0, -0.5};\n+double input_d2[] = {-0.2, 0.4, 0.04, -100.3, 2.0, -80.0, 13.0, -0.5};\n+\n+#define TEST(T, CMP, SUFFIX, WIDTH, LANES, Q, F)\t\t\t\\\n+int\t\t\t\t\t\t\t\t\t\\\n+test_vca##T##_float##WIDTH##x##LANES##_t (void)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  int ret = 0;\t\t\t\t\t\t\t\t\\\n+  int i = 0;\t\t\t\t\t\t\t\t\\\n+  uint##WIDTH##_t output[NUM_TESTS];\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  for (i = 0; i < NUM_TESTS; i++)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      float##WIDTH##_t f1 = fabs##F (input_##SUFFIX##1[i]);\t\t\\\n+      float##WIDTH##_t f2 = fabs##F (input_##SUFFIX##2[i]);\t\t\\\n+      /* Inhibit optimization of our linear test loop.  */\t\t\\\n+      asm volatile (\"\" : : : \"memory\");\t\t\t\t\t\\\n+      output[i] = f1 CMP f2 ? -1 : 0;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  for (i = 0; i < NUM_TESTS; i += LANES)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      float##WIDTH##x##LANES##_t in1 =\t\t\t\t\t\\\n+\tvld1##Q##_f##WIDTH (input_##SUFFIX##1 + i);\t\t\t\\\n+      float##WIDTH##x##LANES##_t in2 =\t\t\t\t\t\\\n+\tvld1##Q##_f##WIDTH (input_##SUFFIX##2 + i);\t\t\t\\\n+      uint##WIDTH##x##LANES##_t expected_out =\t\t\t\t\\\n+\tvld1##Q##_u##WIDTH (output + i);\t\t\t\t\\\n+      uint##WIDTH##x##LANES##_t out =\t\t\t\t\t\\\n+\tveor##Q##_u##WIDTH (vca##T##Q##_f##WIDTH (in1, in2),\t\t\\\n+\t\t\t    expected_out);\t\t\t\t\\\n+      vst1##Q##_u##WIDTH (output + i, out);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  for (i = 0; i < NUM_TESTS; i++)\t\t\t\t\t\\\n+    ret |= output[i];\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  return ret;\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define BUILD_VARIANTS(T, CMP)\t\\\n+TEST (T, CMP, s, 32, 2,  , f)\t\\\n+TEST (T, CMP, s, 32, 4, q, f)\t\\\n+TEST (T, CMP, d, 64, 2, q,  )\n+\n+BUILD_VARIANTS (ge, >=)\n+/* { dg-final { scan-assembler \"facge\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\" } } */\n+/* { dg-final { scan-assembler \"facge\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" } } */\n+/* { dg-final { scan-assembler \"facge\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" } } */\n+\n+BUILD_VARIANTS (gt, >)\n+/* { dg-final { scan-assembler \"facgt\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\" } } */\n+/* { dg-final { scan-assembler \"facgt\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" } } */\n+/* { dg-final { scan-assembler \"facgt\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" } } */\n+\n+/* No need for another scan-assembler as these tests\n+   also generate facge, facgt instructions.  */\n+BUILD_VARIANTS (le, <=)\n+BUILD_VARIANTS (lt, <)\n+\n+#undef TEST\n+#define TEST(T, CMP, SUFFIX, WIDTH, LANES, Q, F)\t\\\n+if (test_vca##T##_float##WIDTH##x##LANES##_t ())\t\\\n+  abort ();\n+\n+int\n+main (int argc, char **argv)\n+{\n+BUILD_VARIANTS (ge, >=)\n+BUILD_VARIANTS (gt, >)\n+BUILD_VARIANTS (le, <=)\n+BUILD_VARIANTS (lt, <)\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}