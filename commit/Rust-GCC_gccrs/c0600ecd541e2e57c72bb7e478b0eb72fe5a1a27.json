{"sha": "c0600ecd541e2e57c72bb7e478b0eb72fe5a1a27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA2MDBlY2Q1NDFlMmU1N2M3MmJiN2U0NzhiMGViNzJmZTVhMWEyNw==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2004-11-09T15:27:23Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2004-11-09T15:27:23Z"}, "message": "rs6000.c (rs6000_rtx_costs): Add EQ, GTU, and LTU.\n\n\t* config/rs6000/rs6000.c (rs6000_rtx_costs): Add EQ, GTU, and LTU.\n\t* config/rs6000/rs6000.md (sCC): Split GTU and LTU patterns.\n\nFrom-SVN: r90345", "tree": {"sha": "45ce8d17f7e095917fc59ce2cc6ead8a91c46df3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45ce8d17f7e095917fc59ce2cc6ead8a91c46df3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0600ecd541e2e57c72bb7e478b0eb72fe5a1a27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0600ecd541e2e57c72bb7e478b0eb72fe5a1a27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0600ecd541e2e57c72bb7e478b0eb72fe5a1a27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0600ecd541e2e57c72bb7e478b0eb72fe5a1a27/comments", "author": null, "committer": null, "parents": [{"sha": "5ae717192480a725e5bd7f55acefc10ca47bbc07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae717192480a725e5bd7f55acefc10ca47bbc07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ae717192480a725e5bd7f55acefc10ca47bbc07"}], "stats": {"total": 171, "additions": 121, "deletions": 50}, "files": [{"sha": "baaecc236e890efb6f644832dd2c95c592f18779", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0600ecd541e2e57c72bb7e478b0eb72fe5a1a27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0600ecd541e2e57c72bb7e478b0eb72fe5a1a27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0600ecd541e2e57c72bb7e478b0eb72fe5a1a27", "patch": "@@ -1,3 +1,8 @@\n+2004-11-09  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.c (rs6000_rtx_costs): Add EQ, GTU, and LTU.\n+\t* config/rs6000/rs6000.md (sCC): Split GTU and LTU patterns.\n+\n 2004-11-09  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-phinodes.c (phi_reverse): New."}, {"sha": "947ae2030e1ce76ed9ccbc9f6dc8676f2e3b8d7c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0600ecd541e2e57c72bb7e478b0eb72fe5a1a27/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0600ecd541e2e57c72bb7e478b0eb72fe5a1a27/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c0600ecd541e2e57c72bb7e478b0eb72fe5a1a27", "patch": "@@ -17984,9 +17984,32 @@ rs6000_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t  *total = rs6000_cost->fp;\n \t  return false;\n \t}\n-\n       break;\n \n+    case EQ:\n+    case GTU:\n+    case LTU:\n+      if (mode == Pmode)\n+\t{\n+\t  switch (outer_code)\n+\t    {\n+\t    case PLUS:\n+\t    case NEG:\n+\t      /* PLUS or NEG already counted so only add one more.  */\n+\t      *total = COSTS_N_INSNS (1);\n+\t      break;\n+\t    case SET:\n+\t      *total = COSTS_N_INSNS (3);\n+\t      break;\n+\t    case COMPARE:\n+\t      *total = 0;\n+\t      return true;\n+\t    default:\n+\t      break;\n+\t    }\n+\t  return false;\n+\t}\n+\n     default:\n       break;\n     }"}, {"sha": "87c442ff51131df861dc0195b43aa32d3269041a", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 92, "deletions": 49, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0600ecd541e2e57c72bb7e478b0eb72fe5a1a27/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0600ecd541e2e57c72bb7e478b0eb72fe5a1a27/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=c0600ecd541e2e57c72bb7e478b0eb72fe5a1a27", "patch": "@@ -12460,15 +12460,27 @@\n   \"doz%I2 %0,%1,%2\\;nabs %0,%0\\;{srai|srawi} %0,%0,31\"\n   [(set_attr \"length\" \"12\")])\n \n-(define_insn \"\"\n+(define_insn_and_split \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(ltu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n \t\t(match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,P\")))]\n   \"TARGET_32BIT\"\n-  \"@\n-   {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\\;neg %0,%0\n-   {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\\;neg %0,%0\"\n-  [(set_attr \"length\" \"12\")])\n+  \"#\"\n+  \"TARGET_32BIT\"\n+  [(set (match_dup 0) (neg:SI (ltu:SI (match_dup 1) (match_dup 2))))\n+   (set (match_dup 0) (neg:SI (match_dup 0)))]\n+  \"\")\n+\n+(define_insn_and_split \"\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(ltu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t(match_operand:DI 2 \"reg_or_neg_short_operand\" \"r,P\")))]\n+  \"TARGET_64BIT\"\n+  \"#\"\n+  \"TARGET_64BIT\"\n+  [(set (match_dup 0) (neg:DI (ltu:DI (match_dup 1) (match_dup 2))))\n+   (set (match_dup 0) (neg:DI (match_dup 0)))]\n+  \"\")\n \n (define_insn \"\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n@@ -12503,18 +12515,29 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,&r,&r,&r\")\n-\t(plus:SI (ltu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n-\t\t\t (match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,r,P,P\"))\n-\t\t (match_operand:SI 3 \"reg_or_short_operand\" \"r,I,r,I\")))]\n+(define_insn_and_split \"\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(plus:SI (ltu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t\t (match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,P\"))\n+\t\t (match_operand:SI 3 \"reg_or_short_operand\" \"rI,rI\")))]\n   \"TARGET_32BIT\"\n-  \"@\n-  {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\\;{sf|subf} %0,%0,%3\n-  {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\\;{sfi|subfic} %0,%0,%3\n-  {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\\;{sf|subf} %0,%0,%3\n-  {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\\;{sfi|subfic} %0,%0,%3\"\n- [(set_attr \"length\" \"12\")])\n+  \"#\"\n+  \"TARGET_32BIT\"\n+  [(set (match_dup 0) (neg:SI (ltu:SI (match_dup 1) (match_dup 2))))\n+   (set (match_dup 0) (minus:SI (match_dup 3) (match_dup 0)))]\n+  \"\")\n+\n+(define_insn_and_split \"\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(plus:DI (ltu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t\t (match_operand:DI 2 \"reg_or_neg_short_operand\" \"r,P\"))\n+\t\t (match_operand:DI 3 \"reg_or_short_operand\" \"rI,rI\")))]\n+  \"TARGET_64BIT\"\n+  \"#\"\n+  \"TARGET_64BIT\"\n+  [(set (match_dup 0) (neg:DI (ltu:DI (match_dup 1) (match_dup 2))))\n+   (set (match_dup 0) (minus:DI (match_dup 3) (match_dup 0)))]\n+  \"\")\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n@@ -12593,7 +12616,19 @@\n   \"@\n    {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\n    {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\"\n-  [(set_attr \"length\" \"8\")])\n+  [(set_attr \"type\" \"insert_word\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(neg:DI (ltu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t\t(match_operand:DI 2 \"reg_or_neg_short_operand\" \"r,P\"))))]\n+  \"TARGET_64BIT\"\n+  \"@\n+   {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\n+   {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\"\n+  [(set_attr \"type\" \"insert_word\")\n+   (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n@@ -13343,21 +13378,27 @@\n   \"doz %0,%2,%1\\;nabs %0,%0\\;{srai|srawi} %0,%0,31\"\n   [(set_attr \"length\" \"12\")])\n \n-(define_insn \"\"\n+(define_insn_and_split \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(gtu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t(match_operand:SI 2 \"reg_or_short_operand\" \"rI\")))]\n+        (gtu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n+                (match_operand:SI 2 \"reg_or_short_operand\" \"rI\")))]\n   \"TARGET_32BIT\"\n-  \"{sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\\;neg %0,%0\"\n-  [(set_attr \"length\" \"12\")])\n+  \"#\"\n+  \"TARGET_32BIT\"\n+  [(set (match_dup 0) (neg:SI (gtu:SI (match_dup 1) (match_dup 2))))\n+   (set (match_dup 0) (neg:SI (match_dup 0)))]\n+  \"\")\n \n-(define_insn \"\"\n+(define_insn_and_split \"\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(gtu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n-\t\t(match_operand:DI 2 \"reg_or_short_operand\" \"rI\")))]\n+        (gtu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+                (match_operand:DI 2 \"reg_or_short_operand\" \"rI\")))]\n   \"TARGET_64BIT\"\n-  \"subf%I2c %0,%1,%2\\;subfe %0,%0,%0\\;neg %0,%0\"\n-  [(set_attr \"length\" \"12\")])\n+  \"#\"\n+  \"TARGET_64BIT\"\n+  [(set (match_dup 0) (neg:DI (gtu:DI (match_dup 1) (match_dup 2))))\n+   (set (match_dup 0) (neg:DI (match_dup 0)))]\n+  \"\")\n \n (define_insn \"\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n@@ -13421,29 +13462,29 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,&r,&r\")\n-\t(plus:SI (gtu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"I,rI,rI\"))\n-\t\t (match_operand:SI 3 \"reg_or_short_operand\" \"r,r,I\")))]\n+(define_insn_and_split \"\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (plus:SI (gtu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n+                         (match_operand:SI 2 \"reg_or_short_operand\" \"rI\"))\n+                 (match_operand:SI 3 \"reg_or_short_operand\" \"rI\")))]\n   \"TARGET_32BIT\"\n-  \"@\n-   {ai|addic} %0,%1,%k2\\;{aze|addze} %0,%3\n-   {sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\\;{sf|subf} %0,%0,%3\n-   {sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\\;{sfi|subfic} %0,%0,%3\"\n-  [(set_attr \"length\" \"8,12,12\")])\n+  \"#\"\n+  \"TARGET_32BIT\"\n+  [(set (match_dup 0) (neg:SI (gtu:SI (match_dup 1) (match_dup 2))))\n+   (set (match_dup 0) (minus:SI (match_dup 3) (match_dup 0)))]\n+  \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r,&r,&r\")\n-\t(plus:DI (gtu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r,r\")\n-\t\t\t (match_operand:DI 2 \"reg_or_short_operand\" \"I,rI,rI\"))\n-\t\t (match_operand:DI 3 \"reg_or_short_operand\" \"r,r,I\")))]\n+(define_insn_and_split \"\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+        (plus:DI (gtu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+                         (match_operand:DI 2 \"reg_or_short_operand\" \"rI\"))\n+                 (match_operand:DI 3 \"reg_or_short_operand\" \"rI\")))]\n   \"TARGET_64BIT\"\n-  \"@\n-   addic %0,%1,%k2\\;addze %0,%3\n-   subf%I2c %0,%1,%2\\;subfe %0,%0,%0\\;subf %0,%0,%3\n-   subf%I2c %0,%1,%2\\;subfe %0,%0,%0\\;subfic %0,%0,%3\"\n-  [(set_attr \"length\" \"8,12,12\")])\n+  \"#\"\n+  \"TARGET_64BIT\"\n+  [(set (match_dup 0) (neg:DI (gtu:DI (match_dup 1) (match_dup 2))))\n+   (set (match_dup 0) (minus:DI (match_dup 3) (match_dup 0)))]\n+  \"\")\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n@@ -13589,15 +13630,17 @@\n \t\t\t(match_operand:SI 2 \"reg_or_short_operand\" \"rI\"))))]\n   \"TARGET_32BIT\"\n   \"{sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\"\n-  [(set_attr \"length\" \"8\")])\n+  [(set_attr \"type\" \"insert_word\")\n+   (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(neg:DI (gtu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t(match_operand:DI 2 \"reg_or_short_operand\" \"rI\"))))]\n   \"TARGET_64BIT\"\n   \"subf%I2c %0,%1,%2\\;subfe %0,%0,%0\"\n-  [(set_attr \"length\" \"8\")])\n+  [(set_attr \"type\" \"insert_word\")\n+   (set_attr \"length\" \"8\")])\n \f\n ;; Define both directions of branch and return.  If we need a reload\n ;; register, we'd rather use CR0 since it is much easier to copy a"}]}