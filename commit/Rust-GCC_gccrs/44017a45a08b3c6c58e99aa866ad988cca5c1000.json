{"sha": "44017a45a08b3c6c58e99aa866ad988cca5c1000", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQwMTdhNDVhMDhiM2M2YzU4ZTk5YWE4NjZhZDk4OGNjYTVjMTAwMA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2007-06-13T14:21:31Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2007-06-13T14:21:31Z"}, "message": "bfin.c (gen_one_bundle): Delete unused local variables.\n\n\t* config/bfin/bfin.c (gen_one_bundle): Delete unused local variables.\n\t(find_next_insn_start, find_load): New functions.\n\t(bfin_reorg): Use them to deal with the fact that parallel insns are\n\tno longer represented as a SEQUENCE.\n\nFrom-SVN: r125677", "tree": {"sha": "dcb38f649524d5b1f1ef082c1b06cd28d27e43fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcb38f649524d5b1f1ef082c1b06cd28d27e43fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44017a45a08b3c6c58e99aa866ad988cca5c1000", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44017a45a08b3c6c58e99aa866ad988cca5c1000", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44017a45a08b3c6c58e99aa866ad988cca5c1000", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44017a45a08b3c6c58e99aa866ad988cca5c1000/comments", "author": null, "committer": null, "parents": [{"sha": "06063fa227a70ca205543138499a3a024fefd3dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06063fa227a70ca205543138499a3a024fefd3dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06063fa227a70ca205543138499a3a024fefd3dd"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "509a0faf74069a5a11b43401a36ff718705365ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44017a45a08b3c6c58e99aa866ad988cca5c1000/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44017a45a08b3c6c58e99aa866ad988cca5c1000/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44017a45a08b3c6c58e99aa866ad988cca5c1000", "patch": "@@ -1,3 +1,10 @@\n+2007-06-13  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* config/bfin/bfin.c (gen_one_bundle): Delete unused local variables.\n+\t(find_next_insn_start, find_load): New functions.\n+\t(bfin_reorg): Use them to deal with the fact that parallel insns are\n+\tno longer represented as a SEQUENCE.\n+\n 2007-06-13  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sparc/sparc.c (sparc_override_options): Initialize"}, {"sha": "67c0710c881e3421dd2ed0fa1175256051ee2b44", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44017a45a08b3c6c58e99aa866ad988cca5c1000/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44017a45a08b3c6c58e99aa866ad988cca5c1000/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=44017a45a08b3c6c58e99aa866ad988cca5c1000", "patch": "@@ -4089,8 +4089,6 @@ bfin_reorg_loops (FILE *dump_file)\n static bool\n gen_one_bundle (rtx slot[3])\n {\n-  rtx bundle, insn;\n-\n   gcc_assert (slot[1] != NULL_RTX);\n \n   /* Verify that we really can do the multi-issue.  */\n@@ -4309,6 +4307,39 @@ trapping_loads_p (rtx insn)\n     return may_trap_p (SET_SRC (single_set (insn)));\n }\n \n+/* This function acts like NEXT_INSN, but is aware of three-insn bundles and\n+   skips all subsequent parallel instructions if INSN is the start of such\n+   a group.  */\n+static rtx\n+find_next_insn_start (rtx insn)\n+{\n+  if (GET_MODE (insn) == SImode)\n+    {\n+      while (GET_MODE (insn) != QImode)\n+\tinsn = NEXT_INSN (insn);\n+    }\n+  return NEXT_INSN (insn);\n+}\n+\n+/* Return INSN if it is of TYPE_MCLD.  Alternatively, if INSN is the start of\n+   a three-insn bundle, see if one of them is a load and return that if so.\n+   Return NULL_RTX if the insn does not contain loads.  */\n+static rtx\n+find_load (rtx insn)\n+{\n+  if (get_attr_type (insn) == TYPE_MCLD)\n+    return insn;\n+  if (GET_MODE (insn) != SImode)\n+    return NULL_RTX;\n+  do {\n+    insn = NEXT_INSN (insn);\n+    if ((GET_MODE (insn) == SImode || GET_MODE (insn) == QImode)\n+\t&& get_attr_type (insn) == TYPE_MCLD)\n+      return insn;\n+  } while (GET_MODE (insn) != QImode);\n+  return NULL_RTX;\n+}\n+\n /* We use the machine specific reorg pass for emitting CSYNC instructions\n    after conditional branches as needed.\n \n@@ -4332,7 +4363,8 @@ trapping_loads_p (rtx insn)\n static void\n bfin_reorg (void)\n {\n-  rtx insn, last_condjump = NULL_RTX;\n+  rtx insn, next;\n+  rtx last_condjump = NULL_RTX;\n   int cycles_since_jump = INT_MAX;\n \n   /* We are freeing block_for_insn in the toplev to keep compatibility\n@@ -4365,10 +4397,12 @@ bfin_reorg (void)\n \n   /* First pass: find predicted-false branches; if something after them\n      needs nops, insert them or change the branch to predict true.  */\n-  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n+  for (insn = get_insns (); insn; insn = next)\n     {\n       rtx pat;\n \n+      next = find_next_insn_start (insn);\n+      \n       if (NOTE_P (insn) || BARRIER_P (insn) || LABEL_P (insn))\n \tcontinue;\n \n@@ -4391,14 +4425,15 @@ bfin_reorg (void)\n \t}\n       else if (INSN_P (insn))\n \t{\n+\t  rtx load_insn = find_load (insn);\n \t  enum attr_type type = type_for_anomaly (insn);\n \t  int delay_needed = 0;\n \t  if (cycles_since_jump < INT_MAX)\n \t    cycles_since_jump++;\n \n-\t  if (type == TYPE_MCLD && TARGET_SPECLD_ANOMALY)\n+\t  if (load_insn && TARGET_SPECLD_ANOMALY)\n \t    {\n-\t      if (trapping_loads_p (insn))\n+\t      if (trapping_loads_p (load_insn))\n \t\tdelay_needed = 3;\n \t    }\n \t  else if (type == TYPE_SYNC && TARGET_CSYNC_ANOMALY)"}]}