{"sha": "c199ccf75867fa7287570ff1ec19ef76cc9d5ea6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE5OWNjZjc1ODY3ZmE3Mjg3NTcwZmYxZWMxOWVmNzZjYzlkNWVhNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-30T14:01:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-30T14:01:42Z"}, "message": "[multiple changes]\n\n2011-08-30  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_res.adb (Valid_Conversion): Revise test for implicit anonymous\n\taccess conversions to check that the conversion is a rewritten node,\n\trather than just having Comes_From_Source set to False, which wasn't\n\tsufficient.\n\n2011-08-30  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch9.adb, sem_ch9.adb, sem_ch6.adb, exp_disp.adb,\n\tg-socket.ads: Minor reformatting.\n\n2011-08-30  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_util.adb: Minor reformatting.\n\n2011-08-30  Tristan Gingold  <gingold@adacore.com>\n\n\t* raise-gcc.c: Never catch exception if _UA_FORCE_UNWIND flag is set,\n\tto be compliant with the ABI.\n\nFrom-SVN: r178310", "tree": {"sha": "1ba170de5f902002c4ad31be1aa6f3986ada28bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ba170de5f902002c4ad31be1aa6f3986ada28bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c199ccf75867fa7287570ff1ec19ef76cc9d5ea6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c199ccf75867fa7287570ff1ec19ef76cc9d5ea6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c199ccf75867fa7287570ff1ec19ef76cc9d5ea6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c199ccf75867fa7287570ff1ec19ef76cc9d5ea6/comments", "author": null, "committer": null, "parents": [{"sha": "dff99e1a52a750cb5c1be4e5f0ccb1567e0ca015", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dff99e1a52a750cb5c1be4e5f0ccb1567e0ca015", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dff99e1a52a750cb5c1be4e5f0ccb1567e0ca015"}], "stats": {"total": 157, "additions": 101, "deletions": 56}, "files": [{"sha": "27462db9f4060579f771a378d7274882894dbd49", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c199ccf75867fa7287570ff1ec19ef76cc9d5ea6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c199ccf75867fa7287570ff1ec19ef76cc9d5ea6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c199ccf75867fa7287570ff1ec19ef76cc9d5ea6", "patch": "@@ -1,3 +1,24 @@\n+2011-08-30  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_res.adb (Valid_Conversion): Revise test for implicit anonymous\n+\taccess conversions to check that the conversion is a rewritten node,\n+\trather than just having Comes_From_Source set to False, which wasn't\n+\tsufficient.\n+\n+2011-08-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch9.adb, sem_ch9.adb, sem_ch6.adb, exp_disp.adb,\n+\tg-socket.ads: Minor reformatting.\n+\n+2011-08-30  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_util.adb: Minor reformatting.\n+\n+2011-08-30  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* raise-gcc.c: Never catch exception if _UA_FORCE_UNWIND flag is set,\n+\tto be compliant with the ABI.\n+\n 2011-08-30  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch12.adb (Check_Private_View): Exchange the private and full view"}, {"sha": "db76edddf792551b9a940d1e82cd66be60f8ee71", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c199ccf75867fa7287570ff1ec19ef76cc9d5ea6/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c199ccf75867fa7287570ff1ec19ef76cc9d5ea6/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=c199ccf75867fa7287570ff1ec19ef76cc9d5ea6", "patch": "@@ -2279,12 +2279,10 @@ package body Exp_Ch9 is\n          then\n             First_Param :=\n               Make_Parameter_Specification (Loc,\n-                Defining_Identifier =>\n-                  Make_Defining_Identifier (Loc,\n-                    Chars => Name_uO),\n-                In_Present     => True,\n-                Out_Present    => False,\n-                Parameter_Type => New_Reference_To (Obj_Typ, Loc));\n+                Defining_Identifier => Make_Defining_Identifier (Loc, Name_uO),\n+                In_Present          => True,\n+                Out_Present         => False,\n+                Parameter_Type      => New_Reference_To (Obj_Typ, Loc));\n \n          --  For entries and procedures of protected types the mode of\n          --  the controlling argument must be in-out.\n@@ -4909,7 +4907,6 @@ package body Exp_Ch9 is\n       if Expander_Active\n         and then not ALFA_Mode\n       then\n-\n          --  If we have no handled statement sequence, we may need to build\n          --  a dummy sequence consisting of a null statement. This can be\n          --  skipped if the trivial accept optimization is permitted.\n@@ -4920,7 +4917,7 @@ package body Exp_Ch9 is\n          then\n             Set_Handled_Statement_Sequence (N,\n               Make_Handled_Sequence_Of_Statements (Loc,\n-                New_List (Make_Null_Statement (Loc))));\n+                Statements => New_List (Make_Null_Statement (Loc))));\n          end if;\n \n          --  Create and declare two labels to be placed at the end of the\n@@ -11598,7 +11595,6 @@ package body Exp_Ch9 is\n       elsif Expander_Active\n         and then not ALFA_Mode\n       then\n-\n          --  Associate discriminals with the first subprogram or entry body to\n          --  be expanded.\n "}, {"sha": "46db2dc192a9df0a2fec6185976bc156f945c804", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c199ccf75867fa7287570ff1ec19ef76cc9d5ea6/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c199ccf75867fa7287570ff1ec19ef76cc9d5ea6/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=c199ccf75867fa7287570ff1ec19ef76cc9d5ea6", "patch": "@@ -695,14 +695,18 @@ package body Exp_Disp is\n       end if;\n \n       --  Expand_Dispatching_Call is called directly from the semantics,\n-      --  so we need a check to see whether expansion is active before\n-      --  proceeding. In addition, there is no need to expand the call\n-      --  if we are compiling under restriction No_Dispatching_Calls;\n-      --  the semantic analyzer has previously notified the violation\n-      --  of this restriction.\n+      --  so we only proceed if the expander is active.\n \n       if not Expander_Active\n+\n+        --  And this expansion is not required in special ALFA mode expansion\n+\n         or else ALFA_Mode\n+\n+        --  And there is no need to expand the call if we are compiling under\n+        --  restriction No_Dispatching_Calls; the semantic analyzer has\n+        --  previously notified the violation of this restriction.\n+\n         or else Restriction_Active (No_Dispatching_Calls)\n       then\n          return;"}, {"sha": "0ac9889dd5b5f4c96625fe48a0871b511c3d9cba", "filename": "gcc/ada/g-socket.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c199ccf75867fa7287570ff1ec19ef76cc9d5ea6/gcc%2Fada%2Fg-socket.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c199ccf75867fa7287570ff1ec19ef76cc9d5ea6/gcc%2Fada%2Fg-socket.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.ads?ref=c199ccf75867fa7287570ff1ec19ef76cc9d5ea6", "patch": "@@ -435,8 +435,9 @@ package GNAT.Sockets is\n    Timeval_Forever : constant := 1.0 * SOSC.MAX_tv_sec;\n    Forever         : constant Duration :=\n                        Duration'Min (Duration'Last, Timeval_Forever);\n-\n    subtype Timeval_Duration is Duration range Immediate .. Forever;\n+   --  These needs commenting, in particular we should explain what these is\n+   --  used for, and how the Timeval_Forever value is chosen (see r176463) ???\n \n    subtype Selector_Duration is Timeval_Duration;\n    --  Timeout value for selector operations"}, {"sha": "729b76c25de26ef035732d178dfe7ff69c721ec0", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c199ccf75867fa7287570ff1ec19ef76cc9d5ea6/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c199ccf75867fa7287570ff1ec19ef76cc9d5ea6/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=c199ccf75867fa7287570ff1ec19ef76cc9d5ea6", "patch": "@@ -217,7 +217,7 @@ db (int db_code, char * msg_format, ...)\n static void\n db_phases (int phases)\n {\n-  phase_descriptor *a = phase_descriptors;\n+  const phase_descriptor *a = phase_descriptors;\n \n   if (! (db_accepted_codes() & DB_PHASES))\n     return;\n@@ -901,6 +901,7 @@ is_handled_by (_Unwind_Ptr choice, _GNAT_Exception * propagated_exception)\n static void\n get_action_description_for (_Unwind_Context *uw_context,\n                             _Unwind_Exception *uw_exception,\n+                            _Unwind_Action uw_phase,\n                             region_descriptor *region,\n                             action_descriptor *action)\n {\n@@ -965,17 +966,22 @@ get_action_description_for (_Unwind_Context *uw_context,\n \t  /* Positive filters are for regular handlers.  */\n \t  else if (ar_filter > 0)\n \t    {\n-\t      /* See if the filter we have is for an exception which matches\n-\t\t the one we are propagating.  */\n-\t      _Unwind_Ptr choice = get_ttype_entry_for (region, ar_filter);\n-\n-\t      if (is_handled_by (choice, gnat_exception))\n-\t\t{\n-\t\t  action->kind = handler;\n-\t\t  action->ttype_filter = ar_filter;\n-\t\t  action->ttype_entry = choice;\n-\t\t  return;\n-\t\t}\n+              /* Do not catch an exception if the _UA_FORCE_UNWIND flag is\n+                 passed (to follow the ABI).  */\n+              if (!(uw_phase & _UA_FORCE_UNWIND))\n+                {\n+                  /* See if the filter we have is for an exception which\n+                     matches the one we are propagating.  */\n+                  _Unwind_Ptr choice = get_ttype_entry_for (region, ar_filter);\n+\n+                  if (is_handled_by (choice, gnat_exception))\n+                    {\n+                      action->kind = handler;\n+                      action->ttype_filter = ar_filter;\n+                      action->ttype_entry = choice;\n+                      return;\n+                    }\n+                }\n \t    }\n \n \t  /* Negative filter values are for C++ exception specifications.\n@@ -1128,7 +1134,8 @@ PERSONALITY_FUNCTION (version_arg_t version_arg,\n \n   /* Search the call-site and action-record tables for the action associated\n      with this IP.  */\n-  get_action_description_for (uw_context, uw_exception, &region, &action);\n+  get_action_description_for (uw_context, uw_exception, uw_phases,\n+                              &region, &action);\n   db_action_for (&action, uw_context);\n \n   /* Whatever the phase, if there is nothing relevant in this frame,"}, {"sha": "9fe7fdfa678eb160851ec852c9641bc7934db321", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c199ccf75867fa7287570ff1ec19ef76cc9d5ea6/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c199ccf75867fa7287570ff1ec19ef76cc9d5ea6/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=c199ccf75867fa7287570ff1ec19ef76cc9d5ea6", "patch": "@@ -1601,8 +1601,7 @@ package body Sem_Ch6 is\n                   --  Taft amemdment types are identified.\n \n                   if Ekind (Scope (Current_Scope)) = E_Package\n-                    and then\n-                      In_Private_Part (Scope (Current_Scope))\n+                    and then In_Private_Part (Scope (Current_Scope))\n                   then\n                      Append_Elmt (Designator, Private_Dependents (Typ));\n                   end if;\n@@ -4241,10 +4240,10 @@ package body Sem_Ch6 is\n                  or else not Is_Primitive_Wrapper (New_Id)\n                then\n                   Conformance_Error (\"\\mode of & does not match!\", New_Formal);\n+\n                else\n                   declare\n-                     T : constant  Entity_Id :=\n-                           Find_Dispatching_Type (New_Id);\n+                     T : constant  Entity_Id := Find_Dispatching_Type (New_Id);\n                   begin\n                      if Is_Protected_Type\n                           (Corresponding_Concurrent_Type (T))\n@@ -8129,9 +8128,9 @@ package body Sem_Ch6 is\n                  and then Is_Protected_Type (Typ)\n                  and then\n                    (Is_Limited_Interface (Iface_Typ)\n-                      or else Is_Protected_Interface (Iface_Typ)\n-                      or else Is_Synchronized_Interface (Iface_Typ)\n-                      or else Is_Task_Interface (Iface_Typ))\n+                     or else Is_Protected_Interface (Iface_Typ)\n+                     or else Is_Synchronized_Interface (Iface_Typ)\n+                     or else Is_Task_Interface (Iface_Typ))\n                then\n                   Error_Msg_PT (Parent (Typ), Candidate);\n                end if;"}, {"sha": "4757560c59185ba6425eb57c0147ff4d580bb031", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c199ccf75867fa7287570ff1ec19ef76cc9d5ea6/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c199ccf75867fa7287570ff1ec19ef76cc9d5ea6/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=c199ccf75867fa7287570ff1ec19ef76cc9d5ea6", "patch": "@@ -1275,11 +1275,18 @@ package body Sem_Ch9 is\n          end if;\n \n          --  Create corresponding record now, because some private dependents\n-         --  may be subtypes of the partial view. Skip if errors are present,\n-         --  to prevent cascaded messages.\n+         --  may be subtypes of the partial view.\n+\n+         --  Skip if errors are present, to prevent cascaded messages\n \n          if Serious_Errors_Detected = 0\n+\n+           --  Also skip if expander is not active\n+\n            and then Expander_Active\n+\n+           --  Also skip if in ALFA mode, this expansion is not needed\n+\n            and then not ALFA_Mode\n          then\n             Expand_N_Protected_Type_Declaration (N);\n@@ -2079,11 +2086,17 @@ package body Sem_Ch9 is\n          end if;\n \n          --  Create corresponding record now, because some private dependents\n-         --  may be subtypes of the partial view. Skip if errors are present,\n-         --  to prevent cascaded messages.\n+         --  may be subtypes of the partial view.\n+\n+         --  Skip if errors are present, to prevent cascaded messages\n \n          if Serious_Errors_Detected = 0\n+\n+           --  Also skip if expander is not active\n+\n            and then Expander_Active\n+\n+           --  Or if in ALFA mode, this expansion is not needed\n            and then not ALFA_Mode\n          then\n             Expand_N_Task_Type_Declaration (N);"}, {"sha": "3844ff713f5866d70cde61899db21da2107fafec", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c199ccf75867fa7287570ff1ec19ef76cc9d5ea6/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c199ccf75867fa7287570ff1ec19ef76cc9d5ea6/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=c199ccf75867fa7287570ff1ec19ef76cc9d5ea6", "patch": "@@ -10648,10 +10648,16 @@ package body Sem_Res is\n             --  conversions from an anonymous access type to a named general\n             --  access type. Such conversions are not allowed in the case of\n             --  access parameters and stand-alone objects of an anonymous\n-            --  access type.\n+            --  access type. The implicit conversion case is recognized by\n+            --  testing that Comes_From_Source is False and that it's been\n+            --  rewritten. The Comes_From_Source test isn't sufficient because\n+            --  nodes in inlined calls to predefined library routines can have\n+            --  Comes_From_Source set to False. (Is there a better way to test\n+            --  for implicit conversions???)\n \n             if Ada_Version >= Ada_2012\n               and then not Comes_From_Source (N)\n+              and then N /= Original_Node (N)\n               and then Ekind (Target_Type) = E_General_Access_Type\n               and then Ekind (Opnd_Type) = E_Anonymous_Access_Type\n             then"}, {"sha": "1cbadaa4d0fee31805e32dc649fbeb424f86ad5c", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c199ccf75867fa7287570ff1ec19ef76cc9d5ea6/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c199ccf75867fa7287570ff1ec19ef76cc9d5ea6/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=c199ccf75867fa7287570ff1ec19ef76cc9d5ea6", "patch": "@@ -8470,7 +8470,7 @@ package body Sem_Util is\n               or else  K = E_In_Out_Parameter\n               or else  K = E_Generic_In_Out_Parameter\n \n-               --  Current instance of type:\n+               --  Current instance of type\n \n               or else (Is_Type (E) and then In_Open_Scopes (E))\n               or else (Is_Incomplete_Or_Private_Type (E)\n@@ -8714,8 +8714,8 @@ package body Sem_Util is\n \n          Kill_Current_Values_For_Entity_Chain (First_Entity (S));\n \n-         --  If scope is a package, also clear current values of all\n-         --  private entities in the scope.\n+         --  If scope is a package, also clear current values of all private\n+         --  entities in the scope.\n \n          if Is_Package_Or_Generic_Package (S)\n            or else Is_Concurrent_Type (S)\n@@ -9016,7 +9016,7 @@ package body Sem_Util is\n          --  is an lvalue, but the prefix is never an lvalue, since it is just\n          --  the scope where the name is found.\n \n-         when N_Expanded_Name        =>\n+         when N_Expanded_Name =>\n             if N = Prefix (P) then\n                return May_Be_Lvalue (P);\n             else\n@@ -9029,7 +9029,7 @@ package body Sem_Util is\n          --  it is. Note however that A is not an lvalue if it is of an access\n          --  type since this is an implicit dereference.\n \n-         when N_Selected_Component   =>\n+         when N_Selected_Component =>\n             if N = Prefix (P)\n               and then Present (Etype (N))\n               and then Is_Access_Type (Etype (N))\n@@ -9044,7 +9044,7 @@ package body Sem_Util is\n          --  or slice is an lvalue, except if it is an access type, where we\n          --  have an implicit dereference.\n \n-         when N_Indexed_Component | N_Slice    =>\n+         when N_Indexed_Component | N_Slice =>\n             if N /= Prefix (P)\n               or else (Present (Etype (N)) and then Is_Access_Type (Etype (N)))\n             then\n@@ -9055,7 +9055,7 @@ package body Sem_Util is\n \n          --  Prefix of a reference is an lvalue if the reference is an lvalue\n \n-         when N_Reference            =>\n+         when N_Reference =>\n             return May_Be_Lvalue (P);\n \n          --  Prefix of explicit dereference is never an lvalue\n@@ -9072,14 +9072,12 @@ package body Sem_Util is\n               N_Entry_Call_Statement     |\n               N_Accept_Statement\n          =>\n-            if Nkind (P) = N_Function_Call\n-              and then Ada_Version < Ada_2012\n-            then\n+            if Nkind (P) = N_Function_Call and then Ada_Version < Ada_2012 then\n                return False;\n             end if;\n \n-            --  The following mechanism is clumsy and fragile. A single\n-            --  flag set in Resolve_Actuals would be preferable ???\n+            --  The following mechanism is clumsy and fragile. A single flag\n+            --  set in Resolve_Actuals would be preferable ???\n \n             declare\n                Proc : Entity_Id;\n@@ -9093,8 +9091,8 @@ package body Sem_Util is\n                   return True;\n                end if;\n \n-               --  If we are not a list member, something is strange, so\n-               --  be conservative and return True.\n+               --  If we are not a list member, something is strange, so be\n+               --  conservative and return True.\n \n                if not Is_List_Member (N) then\n                   return True;\n@@ -9106,8 +9104,8 @@ package body Sem_Util is\n                Form := First_Formal (Proc);\n                Act  := N;\n                loop\n-                  --  If no formal, something is weird, so be conservative\n-                  --  and return True.\n+                  --  If no formal, something is weird, so be conservative and\n+                  --  return True.\n \n                   if No (Form) then\n                      return True;"}]}