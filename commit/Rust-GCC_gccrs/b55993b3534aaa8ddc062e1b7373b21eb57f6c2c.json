{"sha": "b55993b3534aaa8ddc062e1b7373b21eb57f6c2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU1OTkzYjM1MzRhYWE4ZGRjMDYyZTFiNzM3M2IyMWViNTdmNmMyYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-05-02T09:00:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-05-02T09:00:48Z"}, "message": "[multiple changes]\n\n2017-05-02  Justin Squirek  <squirek@adacore.com>\n\n\t* sem_ch4.adb (Analyze_Case_Expression): Add check for valid\n\talternative expression.\n\t* sem_res.adb (Resolve_Case_Expression): Ditto.\n\n2017-05-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_disp.adb (Set_All_DT_Position, In_Predef_Prim_DT):\n\tRefine predicate for the case where the primitive operation\n\tis a renaming of equality.  An overriding operation that is\n\ta user-defined renaming of predefined equality inherits its\n\tslot from the overridden operation. Otherwise it is treated\n\tas a predefined op and occupies the same predefined slot as\n\tequality. A call to it is transformed into a call to its alias,\n\twhich is the predefined equality. A dispatching call thus uses\n\tthe proper slot if operation is further inherited and called\n\twith class-wide arguments.\n\n2017-05-02  Justin Squirek  <squirek@adacore.com>\n\n\t* errout.adb (Set_Msg_Text): Add a case to switch the message\n\ttype when the character '[' is detected signifying a warning\n\tabout a run-time exception.\n\t* opt.ads Add a new Warning_Mode value for new switch\n\t* switch-b.adb (Scan_Binder_Switches): Add case for the binder\n\tto handle new warning mode\n\t* usage.adb (Usage): Add usage entry for -gnatwE\n\t* warnsw.adb (Set_Warning_Switch): Add case for the new switch\n\n2017-05-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Process_Conversion): Reject an intrinsic operator\n\tdeclaration that operates on some fixed point type.\n\n2017-05-02  Justin Squirek  <squirek@adacore.com>\n\n\t* a-crbtgo.adb, s-taasde.adb: Remove unused use-type clauses.\n\nFrom-SVN: r247478", "tree": {"sha": "a8e1b9fa2566543849ab2b43436be26261d8863f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8e1b9fa2566543849ab2b43436be26261d8863f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/comments", "author": null, "committer": null, "parents": [{"sha": "a6354842df32417f55a9635e98f7e00bd412e13a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6354842df32417f55a9635e98f7e00bd412e13a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6354842df32417f55a9635e98f7e00bd412e13a"}], "stats": {"total": 145, "additions": 113, "deletions": 32}, "files": [{"sha": "ffa39763488e418437d5968de56cb3a542df18a7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b55993b3534aaa8ddc062e1b7373b21eb57f6c2c", "patch": "@@ -1,3 +1,42 @@\n+2017-05-02  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Case_Expression): Add check for valid\n+\talternative expression.\n+\t* sem_res.adb (Resolve_Case_Expression): Ditto.\n+\n+2017-05-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_disp.adb (Set_All_DT_Position, In_Predef_Prim_DT):\n+\tRefine predicate for the case where the primitive operation\n+\tis a renaming of equality.  An overriding operation that is\n+\ta user-defined renaming of predefined equality inherits its\n+\tslot from the overridden operation. Otherwise it is treated\n+\tas a predefined op and occupies the same predefined slot as\n+\tequality. A call to it is transformed into a call to its alias,\n+\twhich is the predefined equality. A dispatching call thus uses\n+\tthe proper slot if operation is further inherited and called\n+\twith class-wide arguments.\n+\n+2017-05-02  Justin Squirek  <squirek@adacore.com>\n+\n+\t* errout.adb (Set_Msg_Text): Add a case to switch the message\n+\ttype when the character '[' is detected signifying a warning\n+\tabout a run-time exception.\n+\t* opt.ads Add a new Warning_Mode value for new switch\n+\t* switch-b.adb (Scan_Binder_Switches): Add case for the binder\n+\tto handle new warning mode\n+\t* usage.adb (Usage): Add usage entry for -gnatwE\n+\t* warnsw.adb (Set_Warning_Switch): Add case for the new switch\n+\n+2017-05-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Process_Conversion): Reject an intrinsic operator\n+\tdeclaration that operates on some fixed point type.\n+\n+2017-05-02  Justin Squirek  <squirek@adacore.com>\n+\n+\t* a-crbtgo.adb, s-taasde.adb: Remove unused use-type clauses.\n+\n 2017-05-02  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch6.adb (Analyze_Null_Procedure): Revert previous change."}, {"sha": "53fe273fd96277646f8c15fe6730259c27146dcf", "filename": "gcc/ada/a-crbtgo.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/gcc%2Fada%2Fa-crbtgo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/gcc%2Fada%2Fa-crbtgo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-crbtgo.adb?ref=b55993b3534aaa8ddc062e1b7373b21eb57f6c2c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -510,9 +510,9 @@ package body Ada.Containers.Red_Black_Trees.Generic_Operations is\n    --------------------\n \n    procedure Generic_Adjust (Tree : in out Tree_Type) is\n-      N    : constant Count_Type := Tree.Length;\n+      N    : constant Count_Type  := Tree.Length;\n       Root : constant Node_Access := Tree.Root;\n-      use type Helpers.Tamper_Counts;\n+\n    begin\n       --  If the counts are nonzero, execution is technically erroneous, but\n       --  it seems friendly to allow things like concurrent \"=\" on shared"}, {"sha": "3378190cc79e5c14bed2ed372d23bddcb4465911", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=b55993b3534aaa8ddc062e1b7373b21eb57f6c2c", "patch": "@@ -3097,6 +3097,17 @@ package body Errout is\n             --  '[' (will be/would have been raised at run time)\n \n             when '[' =>\n+\n+               --  Switch the message from a warning to an error if the flag\n+               --  -gnatwE is specified to treat run-time exception warnings\n+               --  as errors.\n+\n+               if Is_Warning_Msg\n+                 and then Warning_Mode = Treat_Run_Time_As_Error\n+               then\n+                  Is_Warning_Msg := False;\n+               end if;\n+\n                if Is_Warning_Msg then\n                   Set_Msg_Str (\"will be raised at run time\");\n                else"}, {"sha": "2b633778835f24175bf6e23f5f65226d819b2c87", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=b55993b3534aaa8ddc062e1b7373b21eb57f6c2c", "patch": "@@ -7430,8 +7430,6 @@ package body Exp_Disp is\n       ------------------------\n \n       function In_Predef_Prims_DT (Prim : Entity_Id) return Boolean is\n-         E : Entity_Id;\n-\n       begin\n          --  Predefined primitives\n \n@@ -7446,20 +7444,19 @@ package body Exp_Disp is\n             if Chars (Ultimate_Alias (Prim)) /= Name_Op_Eq then\n                return True;\n \n-            --  User-defined renamings of predefined equality have their own\n-            --  slot in the primary dispatch table\n+            --  An overriding operation that is a user-defined renaming of\n+            --  predefined equality inherits its slot from the overridden\n+            --  operation. Otherwise it is treated as a predefined op and\n+            --  occupies the same predefined slot as equality. A call to it is\n+            --  transformed into a call to its alias, which is the predefined\n+            --  equality op. A dispatching call thus uses the proper slot if\n+            --  operation is further inherited and called with class-wide\n+            --  arguments.\n \n             else\n-               E := Prim;\n-               while Present (Alias (E)) loop\n-                  if Comes_From_Source (E) then\n-                     return False;\n-                  end if;\n-\n-                  E := Alias (E);\n-               end loop;\n-\n-               return not Comes_From_Source (E);\n+               return\n+                 not Comes_From_Source (Prim)\n+                   or else No (Overridden_Operation (Prim));\n             end if;\n \n          --  User-defined primitives"}, {"sha": "2140d5e39fba9ea3e95827e017a998bdebeb5019", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=b55993b3534aaa8ddc062e1b7373b21eb57f6c2c", "patch": "@@ -1860,16 +1860,19 @@ package Opt is\n    --  or where no warning has been suppressed by the use of the pragma.\n    --  Modified by use of -gnatw.w/.W.\n \n-   type Warning_Mode_Type is (Suppress, Normal, Treat_As_Error);\n+   type Warning_Mode_Type is\n+     (Suppress, Normal, Treat_As_Error, Treat_Run_Time_As_Error);\n    Warning_Mode : Warning_Mode_Type := Normal;\n    --  GNAT, GNATBIND\n    --  Controls treatment of warning messages. If set to Suppress, warning\n    --  messages are not generated at all. In Normal mode, they are generated\n    --  but do not count as errors. In Treat_As_Error mode, warning messages are\n-   --  generated and are treated as errors. Note that Warning_Mode = Suppress\n-   --  causes pragma Warnings to be ignored (except for legality checks),\n-   --  unless we are in GNATprove_Mode, which requires pragma Warnings to\n-   --  be stored for the formal verification backend.\n+   --  generated and are treated as errors. In Treat_Run_Time_As_Error, warning\n+   --  messages regarding errors raised at run time are treated as errors. Note\n+   --  that Warning_Mode = Suppress causes pragma Warnings to be ignored\n+   --  (except for legality checks), unless we are in GNATprove_Mode, which\n+   --  requires pragma Warnings to be stored for the formal verification\n+   --  backend.\n \n    Warnings_As_Errors_Count : Natural;\n    --  GNAT"}, {"sha": "d7be38473eaff777f850015a35e3c261f972c757", "filename": "gcc/ada/s-taasde.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/gcc%2Fada%2Fs-taasde.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/gcc%2Fada%2Fs-taasde.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taasde.adb?ref=b55993b3534aaa8ddc062e1b7373b21eb57f6c2c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1998-2014, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1998-2017, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -203,9 +203,6 @@ package body System.Tasking.Async_Delays is\n       Self_Id : constant Task_Id  := STPO.Self;\n       Q       : Delay_Block_Access;\n \n-      use type ST.Task_Id;\n-      --  for visibility of operator \"=\"\n-\n    begin\n       pragma Debug (Debug.Trace (Self_Id, \"Async_Delay\", 'P'));\n       pragma Assert (Self_Id.Deferral_Level = 1,"}, {"sha": "9de32782dbc47d9a32262dca7a2dfd1ae3b5baa1", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=b55993b3534aaa8ddc062e1b7373b21eb57f6c2c", "patch": "@@ -1548,6 +1548,10 @@ package body Sem_Ch4 is\n \n       Alt := First (Alternatives (N));\n       while Present (Alt) loop\n+         if Error_Posted (Expression (Alt)) then\n+            return;\n+         end if;\n+\n          Analyze (Expression (Alt));\n \n          if No (FirstX) and then Etype (Expression (Alt)) /= Any_Type then\n@@ -2120,8 +2124,8 @@ package body Sem_Ch4 is\n \n          New_N :=\n            Make_Function_Call (Loc,\n-           Name => Make_Explicit_Dereference (Loc, P),\n-           Parameter_Associations => New_List);\n+             Name                   => Make_Explicit_Dereference (Loc, P),\n+             Parameter_Associations => New_List);\n \n          --  If the prefix is overloaded, remove operations that have formals,\n          --  we know that this is a parameterless call.\n@@ -2226,12 +2230,14 @@ package body Sem_Ch4 is\n          Check_Error_Detected;\n          return;\n       end if;\n+\n       Then_Expr := Next (Condition);\n \n       if No (Then_Expr) then\n          Check_Error_Detected;\n          return;\n       end if;\n+\n       Else_Expr := Next (Then_Expr);\n \n       if Comes_From_Source (N) then"}, {"sha": "6aad5d49a54d2dc17a30119ade58d124b07ef3c4", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=b55993b3534aaa8ddc062e1b7373b21eb57f6c2c", "patch": "@@ -7732,6 +7732,22 @@ package body Sem_Prag is\n             --  given entity, not its homonyms.\n \n             if From_Aspect_Specification (N) then\n+               if C = Convention_Intrinsic\n+                 and then Nkind (Ent) = N_Defining_Operator_Symbol\n+               then\n+                  if Is_Fixed_Point_Type (Etype (Ent))\n+                    or else Is_Fixed_Point_Type (Etype (First_Entity (Ent)))\n+                    or else Is_Fixed_Point_Type (Etype (Last_Entity (Ent)))\n+                  then\n+                     Error_Msg_N\n+                       (\"no intrinsic operator available for this fixed-point \"\n+                        & \"operation\", N);\n+                     Error_Msg_N\n+                       (\"\\use expression functions with the desired \"\n+                        & \"conversions made explicit\", N);\n+                  end if;\n+               end if;\n+\n                return;\n             end if;\n "}, {"sha": "cbafcd6582d2350535d3eefc2904c4e8129624aa", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=b55993b3534aaa8ddc062e1b7373b21eb57f6c2c", "patch": "@@ -6712,6 +6712,11 @@ package body Sem_Res is\n       Alt := First (Alternatives (N));\n       while Present (Alt) loop\n          Alt_Expr := Expression (Alt);\n+\n+         if Error_Posted (Alt_Expr) then\n+            return;\n+         end if;\n+\n          Resolve (Alt_Expr, Typ);\n          Alt_Typ := Etype (Alt_Expr);\n \n@@ -8252,11 +8257,13 @@ package body Sem_Res is\n       if No (Condition) then\n          return;\n       end if;\n+\n       Then_Expr := Next (Condition);\n \n       if No (Then_Expr) then\n          return;\n       end if;\n+\n       Else_Expr := Next (Then_Expr);\n \n       Resolve (Condition, Any_Boolean);\n@@ -8268,9 +8275,7 @@ package body Sem_Res is\n       --  a constraint check. The same is done for the else part below, again\n       --  comparing subtypes rather than base types.\n \n-      if Is_Scalar_Type (Then_Typ)\n-        and then Then_Typ /= Typ\n-      then\n+      if Is_Scalar_Type (Then_Typ) and then Then_Typ /= Typ then\n          Rewrite (Then_Expr, Convert_To (Typ, Then_Expr));\n          Analyze_And_Resolve (Then_Expr, Typ);\n       end if;"}, {"sha": "1e13f3c6b45f5c929f08bb3b4194adb15285c851", "filename": "gcc/ada/switch-b.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/gcc%2Fada%2Fswitch-b.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/gcc%2Fada%2Fswitch-b.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-b.adb?ref=b55993b3534aaa8ddc062e1b7373b21eb57f6c2c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -490,6 +490,9 @@ package body Switch.B is\n                when 'e' =>\n                   Warning_Mode := Treat_As_Error;\n \n+               when 'E' =>\n+                  Warning_Mode := Treat_Run_Time_As_Error;\n+\n                when 's' =>\n                   Warning_Mode := Suppress;\n "}, {"sha": "5e3ecbd8d80d401b0ecb59d904c0eceec4d152e2", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=b55993b3534aaa8ddc062e1b7373b21eb57f6c2c", "patch": "@@ -488,6 +488,7 @@ begin\n    Write_Line (\"        e    treat all warnings (but not info) as errors\");\n    Write_Line (\"        .e   turn on every optional info/warning \" &\n                                                   \"(no exceptions)\");\n+   Write_Line (\"        E    treat all run time warnings as errors\");\n    Write_Line (\"        f+   turn on warnings for unreferenced formal\");\n    Write_Line (\"        F*   turn off warnings for unreferenced formal\");\n    Write_Line (\"        .f   turn on warnings for suspicious Subp'Access\");"}, {"sha": "5165bf09eb6b9fb6066fae88040cdb4ea479f409", "filename": "gcc/ada/warnsw.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/gcc%2Fada%2Fwarnsw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55993b3534aaa8ddc062e1b7373b21eb57f6c2c/gcc%2Fada%2Fwarnsw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.adb?ref=b55993b3534aaa8ddc062e1b7373b21eb57f6c2c", "patch": "@@ -532,6 +532,9 @@ package body Warnsw is\n          when 'e' =>\n             Warning_Mode                        := Treat_As_Error;\n \n+         when 'E' =>\n+            Warning_Mode                        := Treat_Run_Time_As_Error;\n+\n          when 'f' =>\n             Check_Unreferenced_Formals          := True;\n "}]}