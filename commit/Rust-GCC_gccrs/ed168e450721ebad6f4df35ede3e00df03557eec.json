{"sha": "ed168e450721ebad6f4df35ede3e00df03557eec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQxNjhlNDUwNzIxZWJhZDZmNGRmMzVlZGUzZTAwZGYwMzU1N2VlYw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2002-01-21T02:24:02Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-01-21T02:24:02Z"}, "message": "h8300.h: Fix comment formatting.\n\n\t* config/h8300/h8300.h: Fix comment formatting.\n\t* config/ia64/aix.h: Likewise.\n\t* config/ia64/ia64-protos.h: Likewise.\n\t* config/ia64/ia64.c: Likewise.\n\t* config/ia64/ia64.h: Likewise.\n\t* config/ia64/ia64intrin.h: Likewise.\n\t* config/ia64/linux.h: Likewise.\n\t* config/ia64/unwind-aix.c: Likewise.\n\t* config/ia64/unwind-ia64.c: Likewise.\n\nFrom-SVN: r49031", "tree": {"sha": "2ca09ff1da702d34cc257d1e032b8dd00bcb658f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ca09ff1da702d34cc257d1e032b8dd00bcb658f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed168e450721ebad6f4df35ede3e00df03557eec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed168e450721ebad6f4df35ede3e00df03557eec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed168e450721ebad6f4df35ede3e00df03557eec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed168e450721ebad6f4df35ede3e00df03557eec/comments", "author": null, "committer": null, "parents": [{"sha": "005e3e053fb770c9a471c22f4dba447b532fe701", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/005e3e053fb770c9a471c22f4dba447b532fe701", "html_url": "https://github.com/Rust-GCC/gccrs/commit/005e3e053fb770c9a471c22f4dba447b532fe701"}], "stats": {"total": 79, "additions": 46, "deletions": 33}, "files": [{"sha": "5ebf50d5a822c6ab60d2a3e0528ce6a3f5002e93", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed168e450721ebad6f4df35ede3e00df03557eec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed168e450721ebad6f4df35ede3e00df03557eec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed168e450721ebad6f4df35ede3e00df03557eec", "patch": "@@ -1,3 +1,15 @@\n+2002-01-20  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/h8300/h8300.h: Fix comment formatting.\n+\t* config/ia64/aix.h: Likewise.\n+\t* config/ia64/ia64-protos.h: Likewise.\n+\t* config/ia64/ia64.c: Likewise.\n+\t* config/ia64/ia64.h: Likewise.\n+\t* config/ia64/ia64intrin.h: Likewise.\n+\t* config/ia64/linux.h: Likewise.\n+\t* config/ia64/unwind-aix.c: Likewise.\n+\t* config/ia64/unwind-ia64.c: Likewise.\n+\n 2002-01-20  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.c: Revise comments about shift code."}, {"sha": "8772242427cf691de0d98b0fc00ea22df2b9f227", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed168e450721ebad6f4df35ede3e00df03557eec/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed168e450721ebad6f4df35ede3e00df03557eec/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=ed168e450721ebad6f4df35ede3e00df03557eec", "patch": "@@ -397,7 +397,7 @@ enum reg_class {\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n-/* Give names of register classes as strings for dump file.   */\n+/* Give names of register classes as strings for dump file.  */\n \n #define REG_CLASS_NAMES \\\n { \"NO_REGS\", \"GENERAL_REGS\", \"MAC_REGS\", \"ALL_REGS\", \"LIM_REGS\" }"}, {"sha": "1e57c2b3f65c489ff714ff2ac47695f0f5eb0d1b", "filename": "gcc/config/ia64/aix.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed168e450721ebad6f4df35ede3e00df03557eec/gcc%2Fconfig%2Fia64%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed168e450721ebad6f4df35ede3e00df03557eec/gcc%2Fconfig%2Fia64%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Faix.h?ref=ed168e450721ebad6f4df35ede3e00df03557eec", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine GNU compiler.  IA-64/AIX version.\n-   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Timothy Wall (twall@cygnus.com)\n \n This file is part of GNU CC.\n@@ -20,7 +20,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n /* AIX5 (aka Monterey): a mix of AIX and UnixWare.  \n-   This file is loosely based on ia64/linux.h. */\n+   This file is loosely based on ia64/linux.h.  */\n \n /* This macro is a C statement to print on `stderr' a string describing the\n    particular machine description choice.  */\n@@ -51,7 +51,7 @@ Boston, MA 02111-1307, USA.  */\n /* Provide a STARTFILE_SPEC appropriate for AIX.  Here we add\n    the crti C++ startup files file which provide part of the support\n    for getting C++ file-scope static object constructed before entering\n-   `main'. */ \n+   `main'.  */ \n    \n #undef\tSTARTFILE_SPEC\n #define STARTFILE_SPEC \\\n@@ -63,7 +63,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Provide a ENDFILE_SPEC appropriate for AIX.  Here we tack on\n    the crtn file which provides termination of the support for getting C++\n-   file-scope static object constructed before entering `main'. */\n+   file-scope static object constructed before entering `main'.  */\n \n #undef  ENDFILE_SPEC\n #define ENDFILE_SPEC \"%{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s\"\n@@ -75,7 +75,7 @@ Boston, MA 02111-1307, USA.  */\n    CPP.  It can also specify how to translate options you give to GNU CC into\n    options for GNU CC to pass to the CPP.  */\n \n-/* If -ansi, we need to define _ANSI_C_SOURCE to get the right headers. */\n+/* If -ansi, we need to define _ANSI_C_SOURCE to get the right headers.  */\n #undef CPP_SPEC\n #define CPP_SPEC \"\\\n %{mcpu=itanium:-D__itanium__} %{mbig-endian:-D__BIG_ENDIAN__} \\\n@@ -90,7 +90,7 @@ Boston, MA 02111-1307, USA.  */\n -D__LP64__ -D__ELF__ -Asystem=unix -Asystem=aix -Acpu=ia64 -Amachine=ia64 \\\n -D__64BIT__ -D_LONG_LONG -D_IA64 -D__int128=__size128_t\"\n \n-/* The GNU C++ standard library requires that these macros be defined. */\n+/* The GNU C++ standard library requires that these macros be defined.  */\n #undef CPLUSPLUS_CPP_SPEC\n #define CPLUSPLUS_CPP_SPEC                      \\\n   \"-D_XOPEN_SOURCE=500                          \\\n@@ -104,7 +104,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_SPEC\n #define ASM_SPEC \"-x %{mconstant-gp} %{mauto-pic}\"\n \n-/* Define this for shared library support. */\n+/* Define this for shared library support.  */\n \n #undef LINK_SPEC\n #define LINK_SPEC \"\\\n@@ -135,7 +135,7 @@ Boston, MA 02111-1307, USA.  */\n do {\t\t\t\t\t\t\t\\\n } while (0)\n \n-/* Tell the linker where to find the crt*.o files. */\n+/* Tell the linker where to find the crt*.o files.  */\n \n #ifndef CROSS_COMPILE\n #undef STANDARD_STARTFILE_PREFIX\n@@ -240,7 +240,7 @@ extern unsigned int ia64_section_threshold;\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* Override ia64/sysv4.h setting with that used by AIX5. */\n+/* Override ia64/sysv4.h setting with that used by AIX5.  */\n #undef WCHAR_TYPE\n #ifdef __64BIT__\n #define WCHAR_TYPE \"unsigned int\""}, {"sha": "43538cc749309d24eb7761a2577e23aece7a2e2d", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed168e450721ebad6f4df35ede3e00df03557eec/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed168e450721ebad6f4df35ede3e00df03557eec/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=ed168e450721ebad6f4df35ede3e00df03557eec", "patch": "@@ -16,7 +16,7 @@ GNU General Public License for more details.\n You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA. */\n+Boston, MA 02111-1307, USA.  */\n \n /* Variables defined in ia64.c.  */\n "}, {"sha": "7ca060b68e70cc56acf512cf3dddd5815b956566", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed168e450721ebad6f4df35ede3e00df03557eec/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed168e450721ebad6f4df35ede3e00df03557eec/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=ed168e450721ebad6f4df35ede3e00df03557eec", "patch": "@@ -663,7 +663,7 @@ shladd_operand (op, mode)\n \t      || INTVAL (op) == 8 || INTVAL (op) == 16));\n }\n \n-/* Return 1 if OP is a -16, -8, -4, -1, 1, 4, 8, or 16 immediate operand. */\n+/* Return 1 if OP is a -16, -8, -4, -1, 1, 4, 8, or 16 immediate operand.  */\n \n int\n fetchadd_operand (op, mode)\n@@ -3578,7 +3578,7 @@ ia64_print_operand (file, x, code)\n     case POST_DEC:\n     case POST_MODIFY:\n       x = XEXP (x, 0);\n-      /* ... fall through ... */\n+      /* ... fall through ...  */\n \n     case REG:\n       fputs (reg_names [REGNO (x)], file);\n@@ -4175,7 +4175,7 @@ rws_access_regno (regno, flags, pred)\n \t      && ! rws_sum[regno].written_by_fp)\n \t    /* The predicates of a branch are available within the\n \t       same insn group as long as the predicate was written by\n-\t       something other than a floating-point instruction.   */\n+\t       something other than a floating-point instruction.  */\n \t    return 0;\n \t}\n \n@@ -4292,7 +4292,7 @@ update_set_flags (x, pflags, ppred, pcond)\n \t     type compares.  We do not generate such instructions\n \t     currently.  */\n \t}\n-      /* ... fall through ... */\n+      /* ... fall through ...  */\n \n     default:\n       if (GET_RTX_CLASS (GET_CODE (src)) == '<'\n@@ -6942,7 +6942,7 @@ ia64_encode_section_info (decl)\n   /* This decl is marked as being in small data/bss but it shouldn't\n      be; one likely explanation for this is that the decl has been\n      moved into a different section from the one it was in when\n-     ENCODE_SECTION_INFO was first called.  Remove the '@'.*/\n+     ENCODE_SECTION_INFO was first called.  Remove the '@'.  */\n   else if (symbol_str[0] == SDATA_NAME_FLAG_CHAR)\n     {\n       XSTR (XEXP (DECL_RTL (decl), 0), 0)\n@@ -7006,7 +7006,7 @@ process_set (asm_out_file, pat)\n       return 1;\n     }\n \n-  /* Look for SP = .... */\n+  /* Look for SP = ....  */\n   if (GET_CODE (dest) == REG && REGNO (dest) == STACK_POINTER_REGNUM)\n     {\n       if (GET_CODE (src) == PLUS)\n@@ -7803,14 +7803,14 @@ ia64_hpux_function_arg_padding (mode, type)\n      enum machine_mode mode;\n      tree type;\n {\n-   /* Exception to normal case for structures/unions/etc. */\n+   /* Exception to normal case for structures/unions/etc.  */\n \n    if (type && AGGREGATE_TYPE_P (type)\n        && int_size_in_bytes (type) < UNITS_PER_WORD)\n      return upward;\n \n    /* This is the standard FUNCTION_ARG_PADDING with !BYTES_BIG_ENDIAN\n-      hardwired to be true. */\n+      hardwired to be true.  */\n \n    return((mode == BLKmode\n        ? (type && TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST"}, {"sha": "c7797c87e0940b7b009a012dd7054e30d6775220", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed168e450721ebad6f4df35ede3e00df03557eec/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed168e450721ebad6f4df35ede3e00df03557eec/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=ed168e450721ebad6f4df35ede3e00df03557eec", "patch": "@@ -53,7 +53,7 @@ extern int target_flags;\n \n #define MASK_VOL_ASM_STOP 0x00000010\t/* Emit stop bits for vol ext asm.  */\n \n-#define MASK_ILP32      0x00000020      /* Generate ILP32 code. */\n+#define MASK_ILP32      0x00000020      /* Generate ILP32 code.  */\n \n #define MASK_B_STEP\t0x00000040\t/* Emit code for Itanium B step.  */\n \n@@ -1846,7 +1846,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* If a variable is weakened, made one only or moved into a different\n    section, it may be necessary to redo the section info to move the\n-   variable out of sdata. */\n+   variable out of sdata.  */\n \n #define REDO_SECTION_INFO_P(DECL)\t\t\t\t\t\\\n    ((TREE_CODE (DECL) == VAR_DECL)\t\t\t\t\t\\\n@@ -2370,7 +2370,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \f\n /* Cross Compilation and Floating Point.  */\n \n-/* Define to enable software floating point emulation. */\n+/* Define to enable software floating point emulation.  */\n #define REAL_ARITHMETIC\n \n \f\n@@ -2533,7 +2533,7 @@ struct machine_function\n   /* The new stack pointer when unwinding from EH.  */\n   struct rtx_def* ia64_eh_epilogue_sp;\n \n-  /* The new bsp value when unwinding from EH. */\n+  /* The new bsp value when unwinding from EH.  */\n   struct rtx_def* ia64_eh_epilogue_bsp;\n \n   /* The GP value save register.  */\n@@ -2598,7 +2598,7 @@ enum ia64_builtins\n   IA64_BUILTIN_FLUSHRS\n };\n \n-/* Codes for expand_compare_and_swap and expand_swap_and_compare. */\n+/* Codes for expand_compare_and_swap and expand_swap_and_compare.  */\n enum fetchop_code {\n   IA64_ADD_OP, IA64_SUB_OP, IA64_OR_OP, IA64_AND_OP, IA64_XOR_OP, IA64_NAND_OP\n };"}, {"sha": "c7bbd33e133951eef8bd4439c9c4165905464e1b", "filename": "gcc/config/ia64/ia64intrin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed168e450721ebad6f4df35ede3e00df03557eec/gcc%2Fconfig%2Fia64%2Fia64intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed168e450721ebad6f4df35ede3e00df03557eec/gcc%2Fconfig%2Fia64%2Fia64intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64intrin.h?ref=ed168e450721ebad6f4df35ede3e00df03557eec", "patch": "@@ -2,7 +2,7 @@\n #define _IA64INTRIN_H_INCLUDED\n \n /* Actually, everything is a compiler builtin, but just so\n-   there's no confusion... */\n+   there's no confusion...  */\n #ifdef __cplusplus\n extern \"C\" {\n #endif"}, {"sha": "1889ef6fa8a952fb57085d002f2bcddad5fc08a0", "filename": "gcc/config/ia64/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed168e450721ebad6f4df35ede3e00df03557eec/gcc%2Fconfig%2Fia64%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed168e450721ebad6f4df35ede3e00df03557eec/gcc%2Fconfig%2Fia64%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Flinux.h?ref=ed168e450721ebad6f4df35ede3e00df03557eec", "patch": "@@ -5,7 +5,7 @@\n \n #define TARGET_VERSION fprintf (stderr, \" (IA-64) Linux\");\n \n-/* This is for -profile to use -lc_p instead of -lc. */\n+/* This is for -profile to use -lc_p instead of -lc.  */\n #undef CC1_SPEC\n #define CC1_SPEC \"%{profile:-p} %{G*}\"\n "}, {"sha": "7e594060f3ec95205a4f1c79959a5025935736b4", "filename": "gcc/config/ia64/unwind-aix.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed168e450721ebad6f4df35ede3e00df03557eec/gcc%2Fconfig%2Fia64%2Funwind-aix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed168e450721ebad6f4df35ede3e00df03557eec/gcc%2Fconfig%2Fia64%2Funwind-aix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Funwind-aix.c?ref=ed168e450721ebad6f4df35ede3e00df03557eec", "patch": "@@ -1,5 +1,5 @@\n /* Implements unwind table entry lookup for AIX (cf. fde-glibc.c). \n-   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Timothy Wall <twall@redhat.com>\n \n    This file is part of GNU CC.\n@@ -63,7 +63,7 @@ find_fde_for_dso (Elf64_Addr pc, rt_link_map *map,\n         lo = mid + 1;\n       else {\n         /* AIX executables are *always* dynamic.  Look up GP for this\n-           object. */ \n+           object.  */ \n         Elf64_Dyn *dyn = map->l_ld;\n         *pgp = 0;\n         for (; dyn->d_tag != DT_NULL ; dyn++) \n@@ -82,7 +82,7 @@ find_fde_for_dso (Elf64_Addr pc, rt_link_map *map,\n }\n \n /* Return a pointer to the unwind table entry for the function containing\n-   PC. */  \n+   PC.  */  \n struct unw_table_entry *\n _Unwind_FindTableEntry (void *pc, unsigned long *pseg_base, unsigned long *pgp)\n {\n@@ -95,7 +95,7 @@ _Unwind_FindTableEntry (void *pc, unsigned long *pseg_base, unsigned long *pgp)\n   ret = find_fde_for_dso ((Elf64_Addr)pc, map, pseg_base, pgp);\n   if (ret) \n     {\n-      /* If we're in the main application, use the current GP value. */\n+      /* If we're in the main application, use the current GP value.  */\n       register unsigned long gp __asm__(\"gp\");\n       *pgp = gp;\n       return ret;"}, {"sha": "99923aa9b87cad3f856b68c7f22fb6ce126b236b", "filename": "gcc/config/ia64/unwind-ia64.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed168e450721ebad6f4df35ede3e00df03557eec/gcc%2Fconfig%2Fia64%2Funwind-ia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed168e450721ebad6f4df35ede3e00df03557eec/gcc%2Fconfig%2Fia64%2Funwind-ia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Funwind-ia64.c?ref=ed168e450721ebad6f4df35ede3e00df03557eec", "patch": "@@ -1,6 +1,7 @@\n /* Subroutines needed for unwinding IA-64 standard format stack frame\n    info for exception handling.\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+   Free Software Foundation, Inc.\n    Contributed by Andrew MacLeod  <amacleod@cygnus.com>\n \t          Andrew Haley  <aph@cygnus.com>\n \t\t  David Mosberger-Tang <davidm@hpl.hp.com>\n@@ -747,7 +748,7 @@ desc_spill_sprel_p (unsigned char qp, unw_word t, unsigned char abreg,\n #define UNW_DEC_PROLOGUE_GR(fmt,r,m,gr,arg)\tdesc_prologue(0,r,m,gr,arg)\n #define UNW_DEC_PROLOGUE(fmt,b,r,arg)\t\tdesc_prologue(b,r,0,32,arg)\n \n-/* Prologue descriptors. */\n+/* Prologue descriptors.  */\n #define UNW_DEC_ABI(fmt,a,c,arg)\t\tdesc_abi(a,c,arg)\n #define UNW_DEC_BR_GR(fmt,b,g,arg)\t\tdesc_br_gr(b,g,arg)\n #define UNW_DEC_BR_MEM(fmt,b,arg)\t\tdesc_br_mem(b,arg)\n@@ -1744,7 +1745,7 @@ static void\n uw_init_context_1 (struct _Unwind_Context *context, void *bsp)\n {\n   void *rp = __builtin_extract_return_addr (__builtin_return_address (0));\n-  /* Set psp to the caller's stack pointer. */\n+  /* Set psp to the caller's stack pointer.  */\n   void *psp = __builtin_dwarf_cfa () - 16;\n   _Unwind_FrameState fs;\n "}]}