{"sha": "883c9d4d1237863941b95b3e7b8dba71fb49a78e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgzYzlkNGQxMjM3ODYzOTQxYjk1YjNlN2I4ZGJhNzFmYjQ5YTc4ZQ==", "commit": {"author": {"name": "Victor Leikehman", "email": "lei@il.ibm.com", "date": "2004-08-09T14:34:39Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-08-09T14:34:39Z"}, "message": "matmul.m4, [...]: Allocate space if return value has NULL in its data field.\n\n2004-09-09  Victor Leikehman  <lei@il.ibm.com>\n\n\t* m4/matmul.m4, m4/matmull.m4, intrinsics/eoshift0.c,\n\tintrinsics/eoshift2.c, intrinsics/transpose_generic.c:\n\tAllocate space if return value has NULL in its data field.\n\t* generated/*.c: Regenerate.\n\nFrom-SVN: r85717", "tree": {"sha": "c587895dd83e037b88dc7cd3d97ecb67add9aa8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c587895dd83e037b88dc7cd3d97ecb67add9aa8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/883c9d4d1237863941b95b3e7b8dba71fb49a78e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/883c9d4d1237863941b95b3e7b8dba71fb49a78e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/883c9d4d1237863941b95b3e7b8dba71fb49a78e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/883c9d4d1237863941b95b3e7b8dba71fb49a78e/comments", "author": null, "committer": null, "parents": [{"sha": "705debec1e0d71c1d6c0c3e7f9346c8eed391111", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/705debec1e0d71c1d6c0c3e7f9346c8eed391111", "html_url": "https://github.com/Rust-GCC/gccrs/commit/705debec1e0d71c1d6c0c3e7f9346c8eed391111"}], "stats": {"total": 408, "additions": 387, "deletions": 21}, "files": [{"sha": "cc27e33325c05cf97103f5c7bcd49200f4d345b6", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=883c9d4d1237863941b95b3e7b8dba71fb49a78e", "patch": "@@ -1,3 +1,10 @@\n+2004-09-09  Victor Leikehman  <lei@il.ibm.com>\n+\n+\t* m4/matmul.m4, m4/matmull.m4, intrinsics/eoshift0.c,\n+\tintrinsics/eoshift2.c, intrinsics/transpose_generic.c:\n+\tAllocate space if return value has NULL in its data field.\n+\t* generated/*.c: Regenerate.\n+\n 2004-08-06  Janne Blomqvist  <jblomqvi@cc.hut.fi>\n \n \t* intrinsics/env.c: New file."}, {"sha": "7967e97064692965aab48b43d7fb9314743d0864", "filename": "libgfortran/generated/matmul_c4.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fgenerated%2Fmatmul_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fgenerated%2Fmatmul_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c4.c?ref=883c9d4d1237863941b95b3e7b8dba71fb49a78e", "patch": "@@ -2,7 +2,7 @@\n    Copyright 2002 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfor).\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n@@ -51,6 +51,36 @@ __matmul_c4 (gfc_array_c4 * retarray, gfc_array_c4 * a, gfc_array_c4 * b)\n \n   assert (GFC_DESCRIPTOR_RANK (a) == 2\n           || GFC_DESCRIPTOR_RANK (b) == 2);\n+\n+  if (retarray->data == NULL)\n+    {\n+      if (GFC_DESCRIPTOR_RANK (a) == 1)\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = b->dim[1].ubound - b->dim[1].lbound;\n+          retarray->dim[0].stride = 1;\n+        }\n+      else if (GFC_DESCRIPTOR_RANK (b) == 1)\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = a->dim[0].ubound - a->dim[0].lbound;\n+          retarray->dim[0].stride = 1;\n+        }\n+      else\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = a->dim[0].ubound - a->dim[0].lbound;\n+          retarray->dim[0].stride = 1;\n+          \n+          retarray->dim[1].lbound = 0;\n+          retarray->dim[1].ubound = b->dim[1].ubound - b->dim[1].lbound;\n+          retarray->dim[1].stride = retarray->dim[0].ubound+1;\n+        }\n+          \n+      retarray->data = internal_malloc (sizeof (GFC_COMPLEX_4) * size0 (retarray));\n+      retarray->base = 0;\n+    }\n+\n   abase = a->data;\n   bbase = b->data;\n   dest = retarray->data;"}, {"sha": "7ed46ec57a91ce91e0a6c0d4df175fb1955b3c41", "filename": "libgfortran/generated/matmul_c8.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fgenerated%2Fmatmul_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fgenerated%2Fmatmul_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c8.c?ref=883c9d4d1237863941b95b3e7b8dba71fb49a78e", "patch": "@@ -2,7 +2,7 @@\n    Copyright 2002 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfor).\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n@@ -51,6 +51,36 @@ __matmul_c8 (gfc_array_c8 * retarray, gfc_array_c8 * a, gfc_array_c8 * b)\n \n   assert (GFC_DESCRIPTOR_RANK (a) == 2\n           || GFC_DESCRIPTOR_RANK (b) == 2);\n+\n+  if (retarray->data == NULL)\n+    {\n+      if (GFC_DESCRIPTOR_RANK (a) == 1)\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = b->dim[1].ubound - b->dim[1].lbound;\n+          retarray->dim[0].stride = 1;\n+        }\n+      else if (GFC_DESCRIPTOR_RANK (b) == 1)\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = a->dim[0].ubound - a->dim[0].lbound;\n+          retarray->dim[0].stride = 1;\n+        }\n+      else\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = a->dim[0].ubound - a->dim[0].lbound;\n+          retarray->dim[0].stride = 1;\n+          \n+          retarray->dim[1].lbound = 0;\n+          retarray->dim[1].ubound = b->dim[1].ubound - b->dim[1].lbound;\n+          retarray->dim[1].stride = retarray->dim[0].ubound+1;\n+        }\n+          \n+      retarray->data = internal_malloc (sizeof (GFC_COMPLEX_8) * size0 (retarray));\n+      retarray->base = 0;\n+    }\n+\n   abase = a->data;\n   bbase = b->data;\n   dest = retarray->data;"}, {"sha": "0db573cf60c671760b39c3aa7b7a7a834d0c3d68", "filename": "libgfortran/generated/matmul_i4.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fgenerated%2Fmatmul_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fgenerated%2Fmatmul_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i4.c?ref=883c9d4d1237863941b95b3e7b8dba71fb49a78e", "patch": "@@ -2,7 +2,7 @@\n    Copyright 2002 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfor).\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n@@ -51,6 +51,36 @@ __matmul_i4 (gfc_array_i4 * retarray, gfc_array_i4 * a, gfc_array_i4 * b)\n \n   assert (GFC_DESCRIPTOR_RANK (a) == 2\n           || GFC_DESCRIPTOR_RANK (b) == 2);\n+\n+  if (retarray->data == NULL)\n+    {\n+      if (GFC_DESCRIPTOR_RANK (a) == 1)\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = b->dim[1].ubound - b->dim[1].lbound;\n+          retarray->dim[0].stride = 1;\n+        }\n+      else if (GFC_DESCRIPTOR_RANK (b) == 1)\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = a->dim[0].ubound - a->dim[0].lbound;\n+          retarray->dim[0].stride = 1;\n+        }\n+      else\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = a->dim[0].ubound - a->dim[0].lbound;\n+          retarray->dim[0].stride = 1;\n+          \n+          retarray->dim[1].lbound = 0;\n+          retarray->dim[1].ubound = b->dim[1].ubound - b->dim[1].lbound;\n+          retarray->dim[1].stride = retarray->dim[0].ubound+1;\n+        }\n+          \n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_4) * size0 (retarray));\n+      retarray->base = 0;\n+    }\n+\n   abase = a->data;\n   bbase = b->data;\n   dest = retarray->data;"}, {"sha": "1a8e8dcb6b954dffea74fc9d56b6746442b83180", "filename": "libgfortran/generated/matmul_i8.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fgenerated%2Fmatmul_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fgenerated%2Fmatmul_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i8.c?ref=883c9d4d1237863941b95b3e7b8dba71fb49a78e", "patch": "@@ -2,7 +2,7 @@\n    Copyright 2002 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfor).\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n@@ -51,6 +51,36 @@ __matmul_i8 (gfc_array_i8 * retarray, gfc_array_i8 * a, gfc_array_i8 * b)\n \n   assert (GFC_DESCRIPTOR_RANK (a) == 2\n           || GFC_DESCRIPTOR_RANK (b) == 2);\n+\n+  if (retarray->data == NULL)\n+    {\n+      if (GFC_DESCRIPTOR_RANK (a) == 1)\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = b->dim[1].ubound - b->dim[1].lbound;\n+          retarray->dim[0].stride = 1;\n+        }\n+      else if (GFC_DESCRIPTOR_RANK (b) == 1)\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = a->dim[0].ubound - a->dim[0].lbound;\n+          retarray->dim[0].stride = 1;\n+        }\n+      else\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = a->dim[0].ubound - a->dim[0].lbound;\n+          retarray->dim[0].stride = 1;\n+          \n+          retarray->dim[1].lbound = 0;\n+          retarray->dim[1].ubound = b->dim[1].ubound - b->dim[1].lbound;\n+          retarray->dim[1].stride = retarray->dim[0].ubound+1;\n+        }\n+          \n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_8) * size0 (retarray));\n+      retarray->base = 0;\n+    }\n+\n   abase = a->data;\n   bbase = b->data;\n   dest = retarray->data;"}, {"sha": "80e64823675535753fc73ca585fcdf15887362f7", "filename": "libgfortran/generated/matmul_l4.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fgenerated%2Fmatmul_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fgenerated%2Fmatmul_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_l4.c?ref=883c9d4d1237863941b95b3e7b8dba71fb49a78e", "patch": "@@ -50,6 +50,36 @@ __matmul_l4 (gfc_array_l4 * retarray, gfc_array_l4 * a, gfc_array_l4 * b)\n \n   assert (GFC_DESCRIPTOR_RANK (a) == 2\n           || GFC_DESCRIPTOR_RANK (b) == 2);\n+\n+  if (retarray->data == NULL)\n+    {\n+      if (GFC_DESCRIPTOR_RANK (a) == 1)\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = b->dim[1].ubound - b->dim[1].lbound;\n+          retarray->dim[0].stride = 1;\n+        }\n+      else if (GFC_DESCRIPTOR_RANK (b) == 1)\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = a->dim[0].ubound - a->dim[0].lbound;\n+          retarray->dim[0].stride = 1;\n+        }\n+      else\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = a->dim[0].ubound - a->dim[0].lbound;\n+          retarray->dim[0].stride = 1;\n+          \n+          retarray->dim[1].lbound = 0;\n+          retarray->dim[1].ubound = b->dim[1].ubound - b->dim[1].lbound;\n+          retarray->dim[1].stride = retarray->dim[0].ubound+1;\n+        }\n+          \n+      retarray->data = internal_malloc (sizeof (GFC_LOGICAL_4) * size0 (retarray));\n+      retarray->base = 0;\n+    }\n+\n   abase = a->data;\n   if (GFC_DESCRIPTOR_SIZE (a) != 4)\n     {"}, {"sha": "c842146e2d07e3d078bd1c5ffc07fa5c61496bc8", "filename": "libgfortran/generated/matmul_l8.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fgenerated%2Fmatmul_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fgenerated%2Fmatmul_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_l8.c?ref=883c9d4d1237863941b95b3e7b8dba71fb49a78e", "patch": "@@ -50,6 +50,36 @@ __matmul_l8 (gfc_array_l8 * retarray, gfc_array_l4 * a, gfc_array_l4 * b)\n \n   assert (GFC_DESCRIPTOR_RANK (a) == 2\n           || GFC_DESCRIPTOR_RANK (b) == 2);\n+\n+  if (retarray->data == NULL)\n+    {\n+      if (GFC_DESCRIPTOR_RANK (a) == 1)\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = b->dim[1].ubound - b->dim[1].lbound;\n+          retarray->dim[0].stride = 1;\n+        }\n+      else if (GFC_DESCRIPTOR_RANK (b) == 1)\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = a->dim[0].ubound - a->dim[0].lbound;\n+          retarray->dim[0].stride = 1;\n+        }\n+      else\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = a->dim[0].ubound - a->dim[0].lbound;\n+          retarray->dim[0].stride = 1;\n+          \n+          retarray->dim[1].lbound = 0;\n+          retarray->dim[1].ubound = b->dim[1].ubound - b->dim[1].lbound;\n+          retarray->dim[1].stride = retarray->dim[0].ubound+1;\n+        }\n+          \n+      retarray->data = internal_malloc (sizeof (GFC_LOGICAL_8) * size0 (retarray));\n+      retarray->base = 0;\n+    }\n+\n   abase = a->data;\n   if (GFC_DESCRIPTOR_SIZE (a) != 4)\n     {"}, {"sha": "7d111369b12ddb88ac00665c16abfefc99febdb2", "filename": "libgfortran/generated/matmul_r4.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fgenerated%2Fmatmul_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fgenerated%2Fmatmul_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r4.c?ref=883c9d4d1237863941b95b3e7b8dba71fb49a78e", "patch": "@@ -2,7 +2,7 @@\n    Copyright 2002 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfor).\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n@@ -51,6 +51,36 @@ __matmul_r4 (gfc_array_r4 * retarray, gfc_array_r4 * a, gfc_array_r4 * b)\n \n   assert (GFC_DESCRIPTOR_RANK (a) == 2\n           || GFC_DESCRIPTOR_RANK (b) == 2);\n+\n+  if (retarray->data == NULL)\n+    {\n+      if (GFC_DESCRIPTOR_RANK (a) == 1)\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = b->dim[1].ubound - b->dim[1].lbound;\n+          retarray->dim[0].stride = 1;\n+        }\n+      else if (GFC_DESCRIPTOR_RANK (b) == 1)\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = a->dim[0].ubound - a->dim[0].lbound;\n+          retarray->dim[0].stride = 1;\n+        }\n+      else\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = a->dim[0].ubound - a->dim[0].lbound;\n+          retarray->dim[0].stride = 1;\n+          \n+          retarray->dim[1].lbound = 0;\n+          retarray->dim[1].ubound = b->dim[1].ubound - b->dim[1].lbound;\n+          retarray->dim[1].stride = retarray->dim[0].ubound+1;\n+        }\n+          \n+      retarray->data = internal_malloc (sizeof (GFC_REAL_4) * size0 (retarray));\n+      retarray->base = 0;\n+    }\n+\n   abase = a->data;\n   bbase = b->data;\n   dest = retarray->data;"}, {"sha": "5ab66fe073dbb1a9b9f513cd35b1ccbc0e6bc2bf", "filename": "libgfortran/generated/matmul_r8.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fgenerated%2Fmatmul_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fgenerated%2Fmatmul_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r8.c?ref=883c9d4d1237863941b95b3e7b8dba71fb49a78e", "patch": "@@ -2,7 +2,7 @@\n    Copyright 2002 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfor).\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n@@ -51,6 +51,36 @@ __matmul_r8 (gfc_array_r8 * retarray, gfc_array_r8 * a, gfc_array_r8 * b)\n \n   assert (GFC_DESCRIPTOR_RANK (a) == 2\n           || GFC_DESCRIPTOR_RANK (b) == 2);\n+\n+  if (retarray->data == NULL)\n+    {\n+      if (GFC_DESCRIPTOR_RANK (a) == 1)\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = b->dim[1].ubound - b->dim[1].lbound;\n+          retarray->dim[0].stride = 1;\n+        }\n+      else if (GFC_DESCRIPTOR_RANK (b) == 1)\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = a->dim[0].ubound - a->dim[0].lbound;\n+          retarray->dim[0].stride = 1;\n+        }\n+      else\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = a->dim[0].ubound - a->dim[0].lbound;\n+          retarray->dim[0].stride = 1;\n+          \n+          retarray->dim[1].lbound = 0;\n+          retarray->dim[1].ubound = b->dim[1].ubound - b->dim[1].lbound;\n+          retarray->dim[1].stride = retarray->dim[0].ubound+1;\n+        }\n+          \n+      retarray->data = internal_malloc (sizeof (GFC_REAL_8) * size0 (retarray));\n+      retarray->base = 0;\n+    }\n+\n   abase = a->data;\n   bbase = b->data;\n   dest = retarray->data;"}, {"sha": "97eb1a0d140614cf92462f1ff467423f25fcbb59", "filename": "libgfortran/generated/transpose_i4.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fgenerated%2Ftranspose_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fgenerated%2Ftranspose_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_i4.c?ref=883c9d4d1237863941b95b3e7b8dba71fb49a78e", "patch": "@@ -40,9 +40,8 @@ __transpose_4 (gfc_array_i4 * ret, gfc_array_i4 * source)\n \n   if (ret->data == NULL)\n     {\n-      ret->data = internal_malloc (sizeof (GFC_INTEGER_4) * size0 (source));\n-      ret->base = 0;\n-      ret->dtype = source->dtype;\n+      assert (GFC_DESCRIPTOR_RANK (ret) == 2);\n+      assert (ret->dtype == source->dtype);\n \n       ret->dim[0].lbound = 0;\n       ret->dim[0].ubound = source->dim[1].ubound - source->dim[1].lbound;\n@@ -51,6 +50,9 @@ __transpose_4 (gfc_array_i4 * ret, gfc_array_i4 * source)\n       ret->dim[1].lbound = 0;\n       ret->dim[1].ubound = source->dim[0].ubound - source->dim[0].lbound;\n       ret->dim[1].stride = ret->dim[0].ubound+1;\n+\n+      ret->data = internal_malloc (sizeof (GFC_INTEGER_4) * size0 (ret));\n+      ret->base = 0;\n     }\n \n   if (ret->dim[0].stride == 0)"}, {"sha": "4c842d48520a819cd1cdce72c105ade6c8b60bff", "filename": "libgfortran/generated/transpose_i8.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fgenerated%2Ftranspose_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fgenerated%2Ftranspose_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_i8.c?ref=883c9d4d1237863941b95b3e7b8dba71fb49a78e", "patch": "@@ -40,9 +40,8 @@ __transpose_8 (gfc_array_i8 * ret, gfc_array_i8 * source)\n \n   if (ret->data == NULL)\n     {\n-      ret->data = internal_malloc (sizeof (GFC_INTEGER_8) * size0 (source));\n-      ret->base = 0;\n-      ret->dtype = source->dtype;\n+      assert (GFC_DESCRIPTOR_RANK (ret) == 2);\n+      assert (ret->dtype == source->dtype);\n \n       ret->dim[0].lbound = 0;\n       ret->dim[0].ubound = source->dim[1].ubound - source->dim[1].lbound;\n@@ -51,6 +50,9 @@ __transpose_8 (gfc_array_i8 * ret, gfc_array_i8 * source)\n       ret->dim[1].lbound = 0;\n       ret->dim[1].ubound = source->dim[0].ubound - source->dim[0].lbound;\n       ret->dim[1].stride = ret->dim[0].ubound+1;\n+\n+      ret->data = internal_malloc (sizeof (GFC_INTEGER_8) * size0 (ret));\n+      ret->base = 0;\n     }\n \n   if (ret->dim[0].stride == 0)"}, {"sha": "fca1ef08fff44a5660b953c7aa7b63f777cdcc1e", "filename": "libgfortran/intrinsics/eoshift0.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fintrinsics%2Feoshift0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fintrinsics%2Feoshift0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Feoshift0.c?ref=883c9d4d1237863941b95b3e7b8dba71fb49a78e", "patch": "@@ -1,4 +1,4 @@\n-/* Generic implementation of the RESHAPE intrinsic\n+/* Generic implementation of the EOSHIFT intrinsic\n    Copyright 2002 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n@@ -32,7 +32,7 @@ static const char zeros[16] =\n    sizeof(int) < sizeof (index_type).  */\n \n static void\n-__eoshift0 (const gfc_array_char * ret, const gfc_array_char * array,\n+__eoshift0 (gfc_array_char * ret, const gfc_array_char * array,\n     int shift, const char * pbound, int which)\n {\n   /* r.* indicates the return array.  */\n@@ -60,6 +60,25 @@ __eoshift0 (const gfc_array_char * ret, const gfc_array_char * array,\n \n   size = GFC_DESCRIPTOR_SIZE (ret);\n \n+  if (ret->data == NULL)\n+    {\n+      int i;\n+\n+      ret->data = internal_malloc (size * size0 ((array_t *)array));\n+      ret->base = 0;\n+      ret->dtype = array->dtype;\n+      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+        {\n+          ret->dim[i].lbound = 0;\n+          ret->dim[i].ubound = array->dim[i].ubound - array->dim[i].lbound;\n+\n+          if (i == 0)\n+            ret->dim[i].stride = 1;\n+          else\n+            ret->dim[i].stride = (ret->dim[i-1].ubound + 1) * ret->dim[i-1].stride;\n+        }\n+    }\n+\n   which = which - 1;\n \n   extent[0] = 1;\n@@ -170,7 +189,7 @@ __eoshift0 (const gfc_array_char * ret, const gfc_array_char * array,\n \n \n void\n-__eoshift0_4 (const gfc_array_char * ret, const gfc_array_char * array,\n+__eoshift0_4 (gfc_array_char * ret, const gfc_array_char * array,\n     const GFC_INTEGER_4 * pshift, const char * pbound,\n     const GFC_INTEGER_4 * pdim)\n {\n@@ -179,7 +198,7 @@ __eoshift0_4 (const gfc_array_char * ret, const gfc_array_char * array,\n \n \n void\n-__eoshift0_8 (const gfc_array_char * ret, const gfc_array_char * array,\n+__eoshift0_8 (gfc_array_char * ret, const gfc_array_char * array,\n     const GFC_INTEGER_8 * pshift, const char * pbound,\n     const GFC_INTEGER_8 * pdim)\n {"}, {"sha": "18c3f558ae0300158dce3cd0d6d6ee80eb04db5a", "filename": "libgfortran/intrinsics/eoshift2.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fintrinsics%2Feoshift2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fintrinsics%2Feoshift2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Feoshift2.c?ref=883c9d4d1237863941b95b3e7b8dba71fb49a78e", "patch": "@@ -1,4 +1,4 @@\n-/* Generic implementation of the RESHAPE intrinsic\n+/* Generic implementation of the EOSHIFT intrinsic\n    Copyright 2002 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n@@ -32,7 +32,7 @@ static const char zeros[16] =\n    sizeof(int) < sizeof (index_type).  */\n \n static void\n-__eoshift2 (const gfc_array_char * ret, const gfc_array_char * array,\n+__eoshift2 (gfc_array_char * ret, const gfc_array_char * array,\n     int shift, const gfc_array_char * bound, int which)\n {\n   /* r.* indicates the return array.  */\n@@ -61,6 +61,25 @@ __eoshift2 (const gfc_array_char * ret, const gfc_array_char * array,\n \n   size = GFC_DESCRIPTOR_SIZE (ret);\n \n+  if (ret->data == NULL)\n+    {\n+      int i;\n+\n+      ret->data = internal_malloc (size * size0 ((array_t *)array));\n+      ret->base = 0;\n+      ret->dtype = array->dtype;\n+      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+        {\n+          ret->dim[i].lbound = 0;\n+          ret->dim[i].ubound = array->dim[i].ubound - array->dim[i].lbound;\n+\n+          if (i == 0)\n+            ret->dim[i].stride = 1;\n+          else\n+            ret->dim[i].stride = (ret->dim[i-1].ubound + 1) * ret->dim[i-1].stride;\n+        }\n+    }\n+\n   which = which - 1;\n \n   extent[0] = 1;\n@@ -186,7 +205,7 @@ __eoshift2 (const gfc_array_char * ret, const gfc_array_char * array,\n \n \n void\n-__eoshift2_4 (const gfc_array_char * ret, const gfc_array_char * array,\n+__eoshift2_4 (gfc_array_char * ret, const gfc_array_char * array,\n     const GFC_INTEGER_4 * pshift, const gfc_array_char * bound,\n     const GFC_INTEGER_4 * pdim)\n {\n@@ -195,7 +214,7 @@ __eoshift2_4 (const gfc_array_char * ret, const gfc_array_char * array,\n \n \n void\n-__eoshift2_8 (const gfc_array_char * ret, const gfc_array_char * array,\n+__eoshift2_8 (gfc_array_char * ret, const gfc_array_char * array,\n     const GFC_INTEGER_8 * pshift, const gfc_array_char * bound,\n     const GFC_INTEGER_8 * pdim)\n {"}, {"sha": "b9bdbe4a04165cc3c9bc2280e920525235d64063", "filename": "libgfortran/intrinsics/transpose_generic.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fintrinsics%2Ftranspose_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fintrinsics%2Ftranspose_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Ftranspose_generic.c?ref=883c9d4d1237863941b95b3e7b8dba71fb49a78e", "patch": "@@ -43,6 +43,23 @@ __transpose (gfc_array_char * ret, gfc_array_char * source)\n           && GFC_DESCRIPTOR_RANK (ret) == 2);\n \n   size = GFC_DESCRIPTOR_SIZE (source);\n+\n+  if (ret->data == NULL)\n+    {\n+      assert (ret->dtype == source->dtype);\n+\n+      ret->dim[0].lbound = 0;\n+      ret->dim[0].ubound = source->dim[1].ubound - source->dim[1].lbound;\n+      ret->dim[0].stride = 1;\n+\n+      ret->dim[1].lbound = 0;\n+      ret->dim[1].ubound = source->dim[0].ubound - source->dim[0].lbound;\n+      ret->dim[1].stride = ret->dim[0].ubound+1;\n+\n+      ret->data = internal_malloc (size * size0 ((array_t*)ret));\n+      ret->base = 0;\n+    }\n+\n   sxstride = source->dim[0].stride * size;\n   if (sxstride == 0)\n     sxstride = size;"}, {"sha": "7a54b05595cacec5136b1982219ed3500665ab8e", "filename": "libgfortran/m4/matmul.m4", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fm4%2Fmatmul.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fm4%2Fmatmul.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fmatmul.m4?ref=883c9d4d1237863941b95b3e7b8dba71fb49a78e", "patch": "@@ -2,7 +2,7 @@\n    Copyright 2002 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfor).\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n@@ -52,6 +52,36 @@ void\n \n   assert (GFC_DESCRIPTOR_RANK (a) == 2\n           || GFC_DESCRIPTOR_RANK (b) == 2);\n+\n+  if (retarray->data == NULL)\n+    {\n+      if (GFC_DESCRIPTOR_RANK (a) == 1)\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = b->dim[1].ubound - b->dim[1].lbound;\n+          retarray->dim[0].stride = 1;\n+        }\n+      else if (GFC_DESCRIPTOR_RANK (b) == 1)\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = a->dim[0].ubound - a->dim[0].lbound;\n+          retarray->dim[0].stride = 1;\n+        }\n+      else\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = a->dim[0].ubound - a->dim[0].lbound;\n+          retarray->dim[0].stride = 1;\n+          \n+          retarray->dim[1].lbound = 0;\n+          retarray->dim[1].ubound = b->dim[1].ubound - b->dim[1].lbound;\n+          retarray->dim[1].stride = retarray->dim[0].ubound+1;\n+        }\n+          \n+      retarray->data = internal_malloc (sizeof (rtype_name) * size0 (retarray));\n+      retarray->base = 0;\n+    }\n+\n   abase = a->data;\n   bbase = b->data;\n   dest = retarray->data;"}, {"sha": "804127ec005527851ba388b0e7439582ffa7235c", "filename": "libgfortran/m4/matmull.m4", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fm4%2Fmatmull.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883c9d4d1237863941b95b3e7b8dba71fb49a78e/libgfortran%2Fm4%2Fmatmull.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fmatmull.m4?ref=883c9d4d1237863941b95b3e7b8dba71fb49a78e", "patch": "@@ -51,6 +51,36 @@ void\n \n   assert (GFC_DESCRIPTOR_RANK (a) == 2\n           || GFC_DESCRIPTOR_RANK (b) == 2);\n+\n+  if (retarray->data == NULL)\n+    {\n+      if (GFC_DESCRIPTOR_RANK (a) == 1)\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = b->dim[1].ubound - b->dim[1].lbound;\n+          retarray->dim[0].stride = 1;\n+        }\n+      else if (GFC_DESCRIPTOR_RANK (b) == 1)\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = a->dim[0].ubound - a->dim[0].lbound;\n+          retarray->dim[0].stride = 1;\n+        }\n+      else\n+        {\n+          retarray->dim[0].lbound = 0;\n+          retarray->dim[0].ubound = a->dim[0].ubound - a->dim[0].lbound;\n+          retarray->dim[0].stride = 1;\n+          \n+          retarray->dim[1].lbound = 0;\n+          retarray->dim[1].ubound = b->dim[1].ubound - b->dim[1].lbound;\n+          retarray->dim[1].stride = retarray->dim[0].ubound+1;\n+        }\n+          \n+      retarray->data = internal_malloc (sizeof (rtype_name) * size0 (retarray));\n+      retarray->base = 0;\n+    }\n+\n   abase = a->data;\n   if (GFC_DESCRIPTOR_SIZE (a) != 4)\n     {"}]}