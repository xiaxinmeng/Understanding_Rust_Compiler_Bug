{"sha": "bf3989207ee7c50926aa7ca28cf1e13983e809b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYzOTg5MjA3ZWU3YzUwOTI2YWE3Y2EyOGNmMWUxMzk4M2U4MDliNQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2018-04-12T07:17:29Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-04-12T07:17:29Z"}, "message": "[nvptx] Fix handling of extern var with flexible array member\n\n2018-04-12  Tom de Vries  <tom@codesourcery.com>\n\n\tPR target/85296\n\t* config/nvptx/nvptx.c (flexible_array_member_type_p): New function.\n\t(nvptx_assemble_decl_begin): Add undefined param.  Declare undefined\n\tarray with flexible array member as array without given dimension.\n\t(nvptx_assemble_undefined_decl): Set nvptx_assemble_decl_begin call\n\targument for undefined param to true.\n\nFrom-SVN: r259337", "tree": {"sha": "07fd5d3643a5bc3e26dd57f2e185e4c4f6885fab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07fd5d3643a5bc3e26dd57f2e185e4c4f6885fab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf3989207ee7c50926aa7ca28cf1e13983e809b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3989207ee7c50926aa7ca28cf1e13983e809b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf3989207ee7c50926aa7ca28cf1e13983e809b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3989207ee7c50926aa7ca28cf1e13983e809b5/comments", "author": null, "committer": null, "parents": [{"sha": "39c168bfda0657328496a9049317399ca0bf5a32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39c168bfda0657328496a9049317399ca0bf5a32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39c168bfda0657328496a9049317399ca0bf5a32"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "c4d0882950ab0e1cd27a9bdb861226431d621a4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3989207ee7c50926aa7ca28cf1e13983e809b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3989207ee7c50926aa7ca28cf1e13983e809b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf3989207ee7c50926aa7ca28cf1e13983e809b5", "patch": "@@ -1,3 +1,12 @@\n+2018-04-12  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR target/85296\n+\t* config/nvptx/nvptx.c (flexible_array_member_type_p): New function.\n+\t(nvptx_assemble_decl_begin): Add undefined param.  Declare undefined\n+\tarray with flexible array member as array without given dimension.\n+\t(nvptx_assemble_undefined_decl): Set nvptx_assemble_decl_begin call\n+\targument for undefined param to true.\n+\n 2018-04-11  Aaron Sawdey  <acsawdey@linux.ibm.com>\n \n \tPR target/85321"}, {"sha": "131b495098eaba1e99b17af74f1405c3a46f9e64", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3989207ee7c50926aa7ca28cf1e13983e809b5/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3989207ee7c50926aa7ca28cf1e13983e809b5/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=bf3989207ee7c50926aa7ca28cf1e13983e809b5", "patch": "@@ -2021,6 +2021,30 @@ nvptx_output_ascii (FILE *, const char *str, unsigned HOST_WIDE_INT size)\n     nvptx_assemble_value (str[i], 1);\n }\n \n+/* Return true if TYPE is a record type where the last field is an array without\n+   given dimension.  */\n+\n+static bool\n+flexible_array_member_type_p (const_tree type)\n+{\n+  if (TREE_CODE (type) != RECORD_TYPE)\n+    return false;\n+\n+  const_tree last_field = NULL_TREE;\n+  for (const_tree f = TYPE_FIELDS (type); f; f = TREE_CHAIN (f))\n+    last_field = f;\n+\n+  if (!last_field)\n+    return false;\n+\n+  const_tree last_field_type = TREE_TYPE (last_field);\n+  if (TREE_CODE (last_field_type) != ARRAY_TYPE)\n+    return false;\n+\n+  return (! TYPE_DOMAIN (last_field_type)\n+\t  || ! TYPE_MAX_VALUE (TYPE_DOMAIN (last_field_type)));\n+}\n+\n /* Emit a PTX variable decl and prepare for emission of its\n    initializer.  NAME is the symbol name and SETION the PTX data\n    area. The type is TYPE, object size SIZE and alignment is ALIGN.\n@@ -2031,11 +2055,18 @@ nvptx_output_ascii (FILE *, const char *str, unsigned HOST_WIDE_INT size)\n \n static void\n nvptx_assemble_decl_begin (FILE *file, const char *name, const char *section,\n-\t\t\t   const_tree type, HOST_WIDE_INT size, unsigned align)\n+\t\t\t   const_tree type, HOST_WIDE_INT size, unsigned align,\n+\t\t\t   bool undefined = false)\n {\n   bool atype = (TREE_CODE (type) == ARRAY_TYPE)\n     && (TYPE_DOMAIN (type) == NULL_TREE);\n \n+  if (undefined && flexible_array_member_type_p (type))\n+    {\n+      size = 0;\n+      atype = true;\n+    }\n+\n   while (TREE_CODE (type) == ARRAY_TYPE)\n     type = TREE_TYPE (type);\n \n@@ -2172,7 +2203,7 @@ nvptx_assemble_undefined_decl (FILE *file, const char *name, const_tree decl)\n   tree size = DECL_SIZE_UNIT (decl);\n   nvptx_assemble_decl_begin (file, name, section_for_decl (decl),\n \t\t\t     TREE_TYPE (decl), size ? tree_to_shwi (size) : 0,\n-\t\t\t     DECL_ALIGN (decl));\n+\t\t\t     DECL_ALIGN (decl), true);\n   nvptx_assemble_decl_end ();\n }\n "}]}