{"sha": "f854c12c083c5490168b6d80d053d498c3b8622d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg1NGMxMmMwODNjNTQ5MDE2OGI2ZDgwZDA1M2Q0OThjM2I4NjIyZA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-07-14T16:23:19Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-07-14T16:23:19Z"}, "message": "pa.md (uncond_branch): New type attribute.\n\n\t* pa.md (uncond_branch): New type attribute.  Explicitly disallow\n\tuncond_branch in most delay slots.\n\t(in_call_delay attribute): New test for delay slot of call insns.\n\tAllow uncond_branches in the delay slot if TARGET_JUMP_IN_DELAY.\n\t(define_delay for calls, millicode calls, branches, returns, etc):\n\tBroken up into two define delays.  One for calls and millicode\n\tcalls, a second for branches, returns, etc.\n\t(millicode insns): Pass the current insn down to\n\toutput_{mul,div,mod}_insn.\n\t(jump insn): Use \"uncond_branch\" type attribute.  Length of this\n\tinsn varies if it is in the delay slot of a call.\n\t(call_internal_symref): Use output_call.\n\t(call_value_internal_symref): Likewise.\n\t(call_internal_reg): Use %r syntax instead of just register numbers.\n\t(call_value_internal_reg): Likewise.\n\nFrom-SVN: r4916", "tree": {"sha": "e32efb204c36a5bc240461c2f9ebd9028418983f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e32efb204c36a5bc240461c2f9ebd9028418983f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f854c12c083c5490168b6d80d053d498c3b8622d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f854c12c083c5490168b6d80d053d498c3b8622d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f854c12c083c5490168b6d80d053d498c3b8622d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f854c12c083c5490168b6d80d053d498c3b8622d/comments", "author": null, "committer": null, "parents": [{"sha": "2c4ff308b9ddbf11cc47f4aec195c1f949fad377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c4ff308b9ddbf11cc47f4aec195c1f949fad377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c4ff308b9ddbf11cc47f4aec195c1f949fad377"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "80d2af58c099dfb6ab4fbcb71c0588887e28a95d", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 44, "deletions": 14, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f854c12c083c5490168b6d80d053d498c3b8622d/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f854c12c083c5490168b6d80d053d498c3b8622d/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=f854c12c083c5490168b6d80d053d498c3b8622d", "patch": "@@ -30,7 +30,7 @@\n ;; type \"binary\" insns have two input operands (1,2) and one output (0)\n \n (define_attr \"type\"\n-  \"move,unary,binary,compare,load,store,branch,cbranch,fbranch,call,dyncall,fpload,fpstore,fpalu,fpcc,fpmul,fpdivsgl,fpdivdbl,fpsqrtsgl,fpsqrtdbl,multi,misc,milli\"\n+  \"move,unary,binary,compare,load,store,uncond_branch,branch,cbranch,fbranch,call,dyncall,fpload,fpstore,fpalu,fpcc,fpmul,fpdivsgl,fpdivdbl,fpsqrtsgl,fpsqrtdbl,multi,misc,milli\"\n   (const_string \"binary\"))\n \n ;; Length (in # of insns).\n@@ -59,22 +59,42 @@\n \n ;; Attributes for instruction and branch scheduling\n \n+;; For conditional branches.\n (define_attr \"in_branch_delay\" \"false,true\"\n-  (if_then_else (and (eq_attr \"type\" \"!branch,cbranch,fbranch,call,dyncall,multi,milli\")\n+  (if_then_else (and (eq_attr \"type\" \"!uncond_branch,branch,cbranch,fbranch,call,dyncall,multi,milli\")\n \t\t     (eq_attr \"length\" \"4\"))\n \t\t(const_string \"true\")\n \t\t(const_string \"false\")))\n \n ;; Disallow instructions which use the FPU since they will tie up the FPU\n ;; even if the instruction is nullified.\n (define_attr \"in_nullified_branch_delay\" \"false,true\"\n-  (if_then_else (and (eq_attr \"type\" \"!branch,cbranch,fbranch,call,dyncall,multi,milli,fpcc,fpalu,fpmul,fpdivsgl,fpdivdbl,fpsqrtsgl,fpsqrtdbl\")\n+  (if_then_else (and (eq_attr \"type\" \"!uncond_branch,branch,cbranch,fbranch,call,dyncall,multi,milli,fpcc,fpalu,fpmul,fpdivsgl,fpdivdbl,fpsqrtsgl,fpsqrtdbl\")\n \t\t     (eq_attr \"length\" \"4\"))\n \t\t(const_string \"true\")\n \t\t(const_string \"false\")))\n \n+;; For calls and millicode calls.  Allow unconditional branches in the \n+;; delay slot.\n+(define_attr \"in_call_delay\" \"false,true\"\n+  (cond [(and (eq_attr \"type\" \"!uncond_branch,branch,cbranch,fbranch,call,dyncall,multi,milli\")\n+\t      (eq_attr \"length\" \"4\"))\n+\t   (const_string \"true\")\n+\t (eq_attr \"type\" \"uncond_branch\")\n+\t   (if_then_else (ne (symbol_ref \"TARGET_JUMP_IN_DELAY\")\n+\t\t\t     (const_int 0))\n+\t\t\t (const_string \"true\")\n+\t\t\t (const_string \"false\"))]\n+\t(const_string \"false\")))\n+\t\n+\n+\n ;; Unconditional branch, call, and millicode call delay slot description.\n-(define_delay (eq_attr \"type\" \"branch,call,milli\")\n+(define_delay (eq_attr \"type\" \"uncond_branch,branch,call,milli\")\n+  [(eq_attr \"in_call_delay\" \"true\") (nil) (nil)])\n+\n+;; Unconditional branch, return and other similar instructions.\n+(define_delay (eq_attr \"type\" \"uncond_branch,branch\")\n   [(eq_attr \"in_branch_delay\" \"true\") (nil) (nil)])\n \n ;; Floating point conditional branch delay slot description and\n@@ -1925,7 +1945,7 @@\n    (clobber (reg:SI 25))\n    (clobber (reg:SI 31))]\n   \"\"\n-  \"* return output_mul_insn (0);\"\n+  \"* return output_mul_insn (0, insn);\"\n   [(set_attr \"type\" \"milli\")])\n \n ;;; Division and mod.\n@@ -1971,7 +1991,7 @@\n    (clobber (reg:SI 31))]\n  \"\"\n  \"*\n- return output_div_insn (operands, 0);\"\n+ return output_div_insn (operands, 0, insn);\"\n  [(set_attr \"type\" \"milli\")])\n \n (define_expand \"udivsi3\"\n@@ -2016,7 +2036,7 @@\n    (clobber (reg:SI 31))]\n  \"\"\n  \"*\n- return output_div_insn (operands, 1);\"\n+ return output_div_insn (operands, 1, insn);\"\n  [(set_attr \"type\" \"milli\")])\n \n (define_expand \"modsi3\"\n@@ -2057,7 +2077,7 @@\n    (clobber (reg:SI 31))]\n   \"\"\n   \"*\n-  return output_mod_insn (0);\"\n+  return output_mod_insn (0, insn);\"\n   [(set_attr \"type\" \"milli\")])\n \n (define_expand \"umodsi3\"\n@@ -2098,7 +2118,7 @@\n    (clobber (reg:SI 31))]\n   \"\"\n   \"*\n-  return output_mod_insn (1);\"\n+  return output_mod_insn (1, insn);\"\n   [(set_attr \"type\" \"milli\")])\n \n ;;- and instructions\n@@ -2655,7 +2675,17 @@\n   [(set (pc) (label_ref (match_operand 0 \"\" \"\")))]\n   \"\"\n   \"bl%* %l0,0\"\n-  [(set_attr \"type\" \"branch\")])\n+  [(set_attr \"type\" \"uncond_branch\")\n+   (set (attr \"length\")\n+    (cond [(eq (symbol_ref \"jump_in_call_delay (insn)\") (const_int 0))\n+\t   (const_int 4)\n+;; If the jump is in the delay slot of a call, then its length depends \n+;; on whether or not we can add the proper offset to %r2 with an ldo\n+;; instruction.\n+\t   (lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))\n+\t\t    (const_int 8188))\n+           (const_int 4)]\n+\t  (const_int 8)))])\n \n ;; Subroutines of \"casesi\".\n ;; operand 0 is index\n@@ -2766,7 +2796,7 @@\n  \"*\n {\n   output_arg_descriptor (insn);\n-  return \\\"bl %0,2%#\\\";\n+  return output_call (insn, operands[0], gen_rtx (REG, SImode, 2));\n }\"\n  [(set_attr \"type\" \"call\")\n   (set_attr \"length\" \"4\")])\n@@ -2777,7 +2807,7 @@\n   (clobber (reg:SI 2))\n   (use (const_int 1))]\n  \"\"\n- \"copy %0,22\\;.CALL\\\\tARGW0=GR\\;bl $$dyncall,31\\;copy 31,2\"\n+ \"copy %r0,%%r22\\;.CALL\\\\tARGW0=GR\\;bl $$dyncall,%%r31\\;copy %%r31,%%r2\"\n  [(set_attr \"type\" \"dyncall\")\n   (set_attr \"length\" \"12\")])\n \n@@ -2829,7 +2859,7 @@\n   \"*\n {\n   output_arg_descriptor (insn);\n-  return \\\"bl %1,2%#\\\";\n+  return output_call (insn, operands[1], gen_rtx (REG, SImode, 2));\n }\"\n  [(set_attr \"type\" \"call\")\n   (set_attr \"length\" \"4\")])\n@@ -2842,7 +2872,7 @@\n    (use (const_int 1))]\n   ;;- Don't use operand 1 for most machines.\n   \"\"\n-  \"copy %1,22\\;.CALL\\\\tARGW0=GR\\;bl $$dyncall,31\\;copy 31,2\"\n+  \"copy %r1,%%r22\\;.CALL\\\\tARGW0=GR\\;bl $$dyncall,%%r31\\;copy %%r31,%%r2\"\n  [(set_attr \"type\" \"dyncall\")\n   (set_attr \"length\" \"12\")])\n "}]}