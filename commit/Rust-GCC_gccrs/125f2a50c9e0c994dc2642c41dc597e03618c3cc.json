{"sha": "125f2a50c9e0c994dc2642c41dc597e03618c3cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI1ZjJhNTBjOWUwYzk5NGRjMjY0MmM0MWRjNTk3ZTAzNjE4YzNjYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-12-24T08:51:05Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-12-24T08:51:05Z"}, "message": "re PR c++/23171 (ICE on pointer initialization with C99 initializer)\n\n\tPR c++/23171\n\t* varasm.c (initializer_constant_valid_p): An ADDR_EXPR of a\n\tCONSTRUCTOR is invalid.\n\n\tPR c++/23171\n\t* g++.dg/opt/init1.C: New test.\n\nFrom-SVN: r109035", "tree": {"sha": "4b42632a639078d9ef8f1062fdfbd875b99f3576", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b42632a639078d9ef8f1062fdfbd875b99f3576"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/125f2a50c9e0c994dc2642c41dc597e03618c3cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/125f2a50c9e0c994dc2642c41dc597e03618c3cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/125f2a50c9e0c994dc2642c41dc597e03618c3cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/125f2a50c9e0c994dc2642c41dc597e03618c3cc/comments", "author": null, "committer": null, "parents": [{"sha": "097d5d18f0c4993b69e79765f3ea44d7bc1d4c53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/097d5d18f0c4993b69e79765f3ea44d7bc1d4c53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/097d5d18f0c4993b69e79765f3ea44d7bc1d4c53"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "7a3fccff17500a38f1ef778ec49a15fd4ac4283e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/125f2a50c9e0c994dc2642c41dc597e03618c3cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/125f2a50c9e0c994dc2642c41dc597e03618c3cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=125f2a50c9e0c994dc2642c41dc597e03618c3cc", "patch": "@@ -1,3 +1,9 @@\n+2005-12-24  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/23171\n+\t* varasm.c (initializer_constant_valid_p): An ADDR_EXPR of a\n+\tCONSTRUCTOR is invalid.\n+\n 2005-12-23  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* tree-pass.h (pass_eliminate_useless_stores): Remove."}, {"sha": "46f37f0c96059a712291f6df695196241ec7fff7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/125f2a50c9e0c994dc2642c41dc597e03618c3cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/125f2a50c9e0c994dc2642c41dc597e03618c3cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=125f2a50c9e0c994dc2642c41dc597e03618c3cc", "patch": "@@ -1,3 +1,8 @@\n+2005-12-24  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/23171\n+\t* g++.dg/opt/init1.C: New test.\n+\n 2005-12-23  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/24671"}, {"sha": "d9a139e72a8584957f0b649a9439a1681b04b5bc", "filename": "gcc/testsuite/g++.dg/opt/init1.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/125f2a50c9e0c994dc2642c41dc597e03618c3cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finit1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/125f2a50c9e0c994dc2642c41dc597e03618c3cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finit1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finit1.C?ref=125f2a50c9e0c994dc2642c41dc597e03618c3cc", "patch": "@@ -0,0 +1,4 @@\n+// PR c++/23171\n+// { dg-options \"-O\" }\n+\n+int *p = (int*)(int[1]){0};"}, {"sha": "f39b07ccc9ae645eacc15e9971c5bb9e2d53c55a", "filename": "gcc/varasm.c", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/125f2a50c9e0c994dc2642c41dc597e03618c3cc/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/125f2a50c9e0c994dc2642c41dc597e03618c3cc/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=125f2a50c9e0c994dc2642c41dc597e03618c3cc", "patch": "@@ -3477,18 +3477,24 @@ initializer_constant_valid_p (tree value, tree endtype)\n     case ADDR_EXPR:\n     case FDESC_EXPR:\n       value = staticp (TREE_OPERAND (value, 0));\n-      /* \"&(*a).f\" is like unto pointer arithmetic.  If \"a\" turns out to\n-\t be a constant, this is old-skool offsetof-like nonsense.  */\n-      if (value\n-\t  && TREE_CODE (value) == INDIRECT_REF\n-\t  && TREE_CONSTANT (TREE_OPERAND (value, 0)))\n-\treturn null_pointer_node;\n-      /* Taking the address of a nested function involves a trampoline.  */\n-      if (value\n-\t  && TREE_CODE (value) == FUNCTION_DECL\n-\t  && ((decl_function_context (value) && !DECL_NO_STATIC_CHAIN (value))\n-\t      || DECL_DLLIMPORT_P (value)))\n-\treturn NULL_TREE;\n+      if (value)\n+\t{\n+\t  /* \"&(*a).f\" is like unto pointer arithmetic.  If \"a\" turns out to\n+\t     be a constant, this is old-skool offsetof-like nonsense.  */\n+\t  if (TREE_CODE (value) == INDIRECT_REF\n+\t      && TREE_CONSTANT (TREE_OPERAND (value, 0)))\n+\t    return null_pointer_node;\n+\t  /* Taking the address of a nested function involves a trampoline.  */\n+\t  if (TREE_CODE (value) == FUNCTION_DECL\n+\t      && ((decl_function_context (value) \n+\t\t   && !DECL_NO_STATIC_CHAIN (value))\n+\t\t  || DECL_DLLIMPORT_P (value)))\n+\t    return NULL_TREE;\n+\t  /* \"&{...}\" requires a temporary to hold the constructed\n+\t     object.  */\n+\t  if (TREE_CODE (value) == CONSTRUCTOR)\n+\t    return NULL_TREE;\n+\t}\n       return value;\n \n     case VIEW_CONVERT_EXPR:"}]}