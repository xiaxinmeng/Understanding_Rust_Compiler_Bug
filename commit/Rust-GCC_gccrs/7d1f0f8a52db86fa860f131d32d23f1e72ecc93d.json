{"sha": "7d1f0f8a52db86fa860f131d32d23f1e72ecc93d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QxZjBmOGE1MmRiODZmYTg2MGYxMzFkMzJkMjNmMWU3MmVjYzkzZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2010-06-04T17:55:54Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-06-04T17:55:54Z"}, "message": "i386.md (*addhi_1_lea): Assert that operand 0 and operand 1 are equal.\n\n\t* config/i386/i386.md (*addhi_1_lea) <TYPE_INCDEC, default>: Assert\n\tthat operand 0 and operand 1 are equal.\n\t(*addqi_1_lea) <TYPE_INCDEC, default>: Ditto.\n\t(*add<mode>_2) <TYPE_INCDEC>: Remove assert that operand 0\n\tand operand 1 are equal.\n\t<default>: Ditto. Remove ??? comment.\n\t(*add<mode>_3) <TYPE_INCDEC>: Remove assert that operand 0\n\tand operand 1 are equal.\n\t<default>: Ditto. Remove ??? comment.\n\t(*adddi_4) <default>:  Remove assert that operand 0 and operand 1\n\tare equal.\n\t(*add<mode>_4) <default>: Ditto.\n\t(*add<mode>_5) <TYPE_INCDEC, default>: Ditto.\n\nFrom-SVN: r160287", "tree": {"sha": "8a8dfd0cbc1b55683ab0090723cf34d134ebedc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a8dfd0cbc1b55683ab0090723cf34d134ebedc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d1f0f8a52db86fa860f131d32d23f1e72ecc93d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d1f0f8a52db86fa860f131d32d23f1e72ecc93d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d1f0f8a52db86fa860f131d32d23f1e72ecc93d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d1f0f8a52db86fa860f131d32d23f1e72ecc93d/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6b3c42ae60c718a0f9ad4ac29ca50d12361972a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b3c42ae60c718a0f9ad4ac29ca50d12361972a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b3c42ae60c718a0f9ad4ac29ca50d12361972a6"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "978b57af9061461f023ca7cdb49610392005c240", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d1f0f8a52db86fa860f131d32d23f1e72ecc93d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d1f0f8a52db86fa860f131d32d23f1e72ecc93d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d1f0f8a52db86fa860f131d32d23f1e72ecc93d", "patch": "@@ -1,3 +1,19 @@\n+2010-06-04  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*addhi_1_lea) <TYPE_INCDEC, default>: Assert\n+\tthat operand 0 and operand 1 are equal.\n+\t(*addqi_1_lea) <TYPE_INCDEC, default>: Ditto.\n+\t(*add<mode>_2) <TYPE_INCDEC>: Remove assert that operand 0\n+\tand operand 1 are equal.\n+\t<default>: Ditto. Remove ??? comment.\n+\t(*add<mode>_3) <TYPE_INCDEC>: Remove assert that operand 0\n+\tand operand 1 are equal.\n+\t<default>: Ditto. Remove ??? comment.\n+\t(*adddi_4) <default>:  Remove assert that operand 0 and operand 1\n+\tare equal.\n+\t(*add<mode>_4) <default>: Ditto.\n+\t(*add<mode>_5) <TYPE_INCDEC, default>: Ditto.\n+\n 2010-06-04  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/i386/i386-protos.h (ix86_print_operand): Declare.\n@@ -19,8 +35,8 @@\n \n 2010-06-04  Uros Bizjak  <ubizjak@gmail.com>\n \n-\t* config/i386/i386.md (*addqi_2): Do not assert operands[2] == 255\n-\tfor TYPE_INCDEC operands.\n+\t* config/i386/i386.md (*addqi_2) <TYPE_INCDEC>: Do not assert that\n+\toperands[2] == 255.\n \t(*addqi_3): Ditto.\n \t(*addqi_4): Ditto.\n \t(*addqi_5): Ditto."}, {"sha": "d446633aaa1bcd2cb0cfaaba886ce219d983c4fe", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d1f0f8a52db86fa860f131d32d23f1e72ecc93d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d1f0f8a52db86fa860f131d32d23f1e72ecc93d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7d1f0f8a52db86fa860f131d32d23f1e72ecc93d", "patch": "@@ -6232,7 +6232,9 @@\n     {\n     case TYPE_LEA:\n       return \"#\";\n+\n     case TYPE_INCDEC:\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (operands[2] == const1_rtx)\n \treturn \"inc{w}\\t%0\";\n       else\n@@ -6242,6 +6244,7 @@\n \t}\n \n     default:\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (x86_maybe_negate_const_int (&operands[2], HImode))\n \treturn \"sub{w}\\t{%2, %0|%0, %2}\";\n \n@@ -6320,7 +6323,9 @@\n     {\n     case TYPE_LEA:\n       return \"#\";\n+\n     case TYPE_INCDEC:\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (operands[2] == const1_rtx)\n \treturn widen ? \"inc{l}\\t%k0\" : \"inc{b}\\t%0\";\n       else\n@@ -6330,6 +6335,7 @@\n \t}\n \n     default:\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (x86_maybe_negate_const_int (&operands[2], QImode))\n \t{\n \t  if (widen)\n@@ -6407,7 +6413,6 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_INCDEC:\n-      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (operands[2] == const1_rtx)\n         return \"inc{<imodesuffix>}\\t%0\";\n       else\n@@ -6417,9 +6422,6 @@\n \t}\n \n     default:\n-      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n-      /* ???? In DImode, we ought to handle there the 32bit case too\n-\t - do we need new constraint?  */\n       if (x86_maybe_negate_const_int (&operands[2], <MODE>mode))\n         return \"sub{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n \n@@ -6490,7 +6492,6 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_INCDEC:\n-      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (operands[2] == const1_rtx)\n         return \"inc{<imodesuffix>}\\t%0\";\n       else\n@@ -6500,9 +6501,6 @@\n \t}\n \n     default:\n-      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n-      /* ???? In DImode, we ought to handle there the 32bit case too\n-\t - do we need new constraint?  */\n       if (x86_maybe_negate_const_int (&operands[2], <MODE>mode))\n         return \"sub{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n \n@@ -6588,7 +6586,6 @@\n \t}\n \n     default:\n-      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (x86_maybe_negate_const_int (&operands[2], DImode))\n \treturn \"add{q}\\t{%2, %0|%0, %2}\";\n \n@@ -6633,7 +6630,6 @@\n \t}\n \n     default:\n-      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (x86_maybe_negate_const_int (&operands[2], <MODE>mode))\n \treturn \"add{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n \n@@ -6665,7 +6661,6 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_INCDEC:\n-      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (operands[2] == const1_rtx)\n         return \"inc{<imodesuffix>}\\t%0\";\n       else\n@@ -6675,7 +6670,6 @@\n \t}\n \n     default:\n-      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (x86_maybe_negate_const_int (&operands[2], <MODE>mode))\n         return \"sub{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n "}]}