{"sha": "f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE2ZDNmMzkyZTFiNWEzMTdhYzc1ZGJlZDJiOWNiODFkNzliYzUwZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-11-23T16:06:37Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-11-23T16:06:37Z"}, "message": "tree.h (DECL_HAS_IMPLICIT_SECTION_NAME_P): New macro.\n\n\n\t* tree.h (DECL_HAS_IMPLICIT_SECTION_NAME_P): New macro.\n\t(tree_decl_with_vis): Add implicit_section_name_p.\n\t* targhooks.h (default_function_section): Declare.\n\t* target.def (function_section): New hook.\n\t* defaults.h (HOT_TEXT_SECTION_NAME,\n\tUNLIKELY_EXECUTED_TEXT_SECTION_NAME): Remove.\n\t* predict.c (choose_function_section): Remove.\n\t(estimate_bb_frequencies): Do not use choose_function_section.\n\t* coretypes.h (enum node_frequency): Move here from cgraph.h\n\t* cgraph.h (enum node_frequency): Remove.\n\t* varasm.c (initialize_cold_section_name, unlikely_text_section,\n\tunlikely_text_section_p): Remove.\n\t(named_subsection_entry): New structure.\n\t(get_text_section): New function.\n\t(default_function_section): New function.\n\t(function_section_1): Break out from ...; handle profile info.\n\t(function_section): ... here.\n\t(unlikely_text_section): Remove.\n\t(unlikely_text_section_p): Use function_section_1.\n\t(assemble_start_function): Do not initialize cold section.\n\t(default_section_type_flags): Do not special case cold subsection.\n\t(switch_to_section): Likewise.\n\t* output.h (get_text_section): Define.\n\t* config/i386/winnt.c: Do not special case cold section.\n\t* config/darwin-protos.h (darwin_function_section): Declare.\n\t* config/microblaze/microblaze.h (HOT_TEXT_SECTION_NAME,\n\tUNLIKELY_EXECUTED_TEXT_SECTION_NAME): Remove.\n\t* config/ia64/hpux.h (HOT_TEXT_SECTION_NAME,\n\tUNLIKELY_EXECUTED_TEXT_SECTION_NAME): Remove.\n\t(TARGET_ASM_FUNCTION_SECTION): Define to ia64_hpux_function_section.\n\t* config/ia64/ia64.c (ia64_hpux_function_section): New function.\n\t* config/darwin.c (machopic_select_section): Use\n\tdarwin_function_section.\n\t(darwin_function_section): New function.\n\t* config/darwin.h (HOT_TEXT_SECTION_NAME,\n\tUNLIKELY_EXECUTED_TEXT_SECTION_NAME): Remove.\n\t(TARGET_ASM_FUNCTION_SECTION): Define.\n\t* system.h (HOT_TEXT_SECTION_NAME,\n\tUNLIKELY_EXECUTED_TEXT_SECTION_NAME): Poison.\n\nFrom-SVN: r167085", "tree": {"sha": "152a6dc3dab8ba9ba276a0b044af0fa1b93bb32b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/152a6dc3dab8ba9ba276a0b044af0fa1b93bb32b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/comments", "author": null, "committer": null, "parents": [{"sha": "7f814c0bb0216cf3c6929ae28bffcc4620ea2fef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f814c0bb0216cf3c6929ae28bffcc4620ea2fef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f814c0bb0216cf3c6929ae28bffcc4620ea2fef"}], "stats": {"total": 561, "additions": 357, "deletions": 204}, "files": [{"sha": "67c3dfa0bfe7b4f0550f4f941d911a5a7f19e2b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "patch": "@@ -1,3 +1,45 @@\n+2010-11-23  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree.h (DECL_HAS_IMPLICIT_SECTION_NAME_P): New macro.\n+\t(tree_decl_with_vis): Add implicit_section_name_p.\n+\t* targhooks.h (default_function_section): Declare.\n+\t* target.def (function_section): New hook.\n+\t* defaults.h (HOT_TEXT_SECTION_NAME,\n+\tUNLIKELY_EXECUTED_TEXT_SECTION_NAME): Remove.\n+\t* predict.c (choose_function_section): Remove.\n+\t(estimate_bb_frequencies): Do not use choose_function_section.\n+\t* coretypes.h (enum node_frequency): Move here from cgraph.h\n+\t* cgraph.h (enum node_frequency): Remove.\n+\t* varasm.c (initialize_cold_section_name, unlikely_text_section,\n+\tunlikely_text_section_p): Remove.\n+\t(named_subsection_entry): New structure.\n+\t(get_text_section): New function.\n+\t(default_function_section): New function.\n+\t(function_section_1): Break out from ...; handle profile info.\n+\t(function_section): ... here.\n+\t(unlikely_text_section): Remove.\n+\t(unlikely_text_section_p): Use function_section_1.\n+\t(assemble_start_function): Do not initialize cold section.\n+\t(default_section_type_flags): Do not special case cold subsection.\n+\t(switch_to_section): Likewise.\n+\t* output.h (get_text_section): Define.\n+\t* config/i386/winnt.c: Do not special case cold section.\n+\t* config/darwin-protos.h (darwin_function_section): Declare.\n+\t* config/microblaze/microblaze.h (HOT_TEXT_SECTION_NAME,\n+\tUNLIKELY_EXECUTED_TEXT_SECTION_NAME): Remove.\n+\t* config/ia64/hpux.h (HOT_TEXT_SECTION_NAME,\n+\tUNLIKELY_EXECUTED_TEXT_SECTION_NAME): Remove.\n+\t(TARGET_ASM_FUNCTION_SECTION): Define to ia64_hpux_function_section.\n+\t* config/ia64/ia64.c (ia64_hpux_function_section): New function.\n+\t* config/darwin.c (machopic_select_section): Use\n+\tdarwin_function_section.\n+\t(darwin_function_section): New function.\n+\t* config/darwin.h (HOT_TEXT_SECTION_NAME,\n+\tUNLIKELY_EXECUTED_TEXT_SECTION_NAME): Remove.\n+\t(TARGET_ASM_FUNCTION_SECTION): Define.\n+\t* system.h (HOT_TEXT_SECTION_NAME,\n+\tUNLIKELY_EXECUTED_TEXT_SECTION_NAME): Poison.\n+\n 2010-11-23  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* config/darwin.h (LINK_COMMAND_SPEC_A): Use %(link_gcc_c_sequence)."}, {"sha": "99d549c328afc81ea25ae2582e2279fbb4abf864", "filename": "gcc/cgraph.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "patch": "@@ -180,20 +180,6 @@ struct GTY(()) cgraph_clone_info\n   bitmap combined_args_to_skip;\n };\n \n-enum node_frequency {\n-  /* This function most likely won't be executed at all.\n-     (set only when profile feedback is available or via function attribute). */\n-  NODE_FREQUENCY_UNLIKELY_EXECUTED,\n-  /* For functions that are known to be executed once (i.e. constructors, destructors\n-     and main function.  */\n-  NODE_FREQUENCY_EXECUTED_ONCE,\n-  /* The default value.  */\n-  NODE_FREQUENCY_NORMAL,\n-  /* Optimize this function hard\n-     (set only when profile feedback is available or via function attribute). */\n-  NODE_FREQUENCY_HOT\n-};\n-\n \n /* The cgraph data structure.\n    Each function decl has assigned cgraph_node listing callees and callers.  */"}, {"sha": "a31fc59d56605772f88905e2db28dfa150f33d67", "filename": "gcc/config.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "patch": "@@ -1142,6 +1142,10 @@\n #undef HAVE_LD_DEMANGLE\n #endif\n \n+/* Define if your linker supports plugin. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_LD_PLUGIN\n+#endif\n \n /* Define if your linker supports --eh-frame-hdr option. */\n #undef HAVE_LD_EH_FRAME_HDR"}, {"sha": "08cacc14234bfc2fbe63ab67e0f8e37923066201", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "patch": "@@ -57,6 +57,7 @@ extern section *machopic_select_section (tree, int, unsigned HOST_WIDE_INT);\n extern section *machopic_select_rtx_section (enum machine_mode, rtx,\n \t\t\t\t\t     unsigned HOST_WIDE_INT);\n \n+extern section *darwin_function_section (tree, enum node_frequency, bool, bool); \n extern void darwin_unique_section (tree decl, int reloc);\n extern void darwin_asm_named_section (const char *, unsigned int, tree);\n extern void darwin_non_lazy_pcrel (FILE *, rtx);"}, {"sha": "e8da4f1e6998db268dbcbe76e08c02e72fdbdf22", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "patch": "@@ -1233,12 +1233,22 @@ machopic_select_section (tree decl,\n \t       && DECL_WEAK (decl)\n \t       && !lookup_attribute (\"weak_import\",\n \t\t\t\t     DECL_ATTRIBUTES (decl)));\n-  section *base_section;\n+  section *base_section = NULL;\n \n   switch (categorize_decl_for_section (decl, reloc))\n     {\n     case SECCAT_TEXT:\n-      base_section = darwin_text_section (reloc, weak);\n+      {\n+\tstruct cgraph_node *node;\n+\tif (decl && TREE_CODE (decl) == FUNCTION_DECL\n+\t    && (node = cgraph_get_node (decl)) != NULL)\n+\t  base_section = darwin_function_section (decl,\n+\t\t\t\t\t\t  node->frequency,\n+\t\t\t\t\t\t  node->only_called_at_startup,\n+\t\t\t\t\t\t  node->only_called_at_exit);\n+\tif (!base_section)\n+          base_section = darwin_text_section (reloc, weak);\n+      }\n       break;\n \n     case SECCAT_RODATA:\n@@ -2362,4 +2372,38 @@ darwin_enter_string_into_cfstring_table (tree str)\n     }\n }\n \n+/* Choose named function section based on its frequency.  */\n+\n+section *\n+darwin_function_section (tree decl, enum node_frequency freq,\n+\t\t\t  bool startup, bool exit)\n+{\n+  /* Startup code should go to startup subsection unless it is\n+     unlikely executed (this happens especially with function splitting\n+     where we can split away unnecesary parts of static constructors.  */\n+  if (startup && freq != NODE_FREQUENCY_UNLIKELY_EXECUTED)\n+    return get_named_text_section\n+\t     (decl, \"__TEXT,__startup,regular,pure_instructions\", \"_startup\");\n+\n+  /* Similarly for exit.  */\n+  if (exit && freq != NODE_FREQUENCY_UNLIKELY_EXECUTED)\n+    return get_named_text_section (decl,\n+\t\t\t\t   \"__TEXT,__exit,regular,pure_instructions\",\n+\t\t\t\t   \"_exit\");\n+\n+  /* Group cold functions together, similarly for hot code.  */\n+  switch (freq)\n+    {\n+      case NODE_FREQUENCY_UNLIKELY_EXECUTED:\n+\treturn get_named_text_section\n+\t\t (decl,\n+\t          \"__TEXT,__unlikely,regular,pure_instructions\", \"_unlikely\");\n+      case NODE_FREQUENCY_HOT:\n+\treturn get_named_text_section\n+\t\t (decl, \"__TEXT,__hot,regular,pure_instructions\", \"_hot\");\n+      default:\n+\treturn NULL;\n+    }\n+}\n+\n #include \"gt-darwin.h\""}, {"sha": "854cb95b407741c3e863d30b73323c046168943e", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "patch": "@@ -664,11 +664,6 @@ int darwin_label_is_anonymous_local_objc_name (const char *name);\n /* The generic version, archs should over-ride where required.  */\n #define MACHOPIC_NL_SYMBOL_PTR_SECTION \".non_lazy_symbol_pointer\"\n \n-/* These are used by -fbranch-probabilities */\n-#define HOT_TEXT_SECTION_NAME \"__TEXT,__text,regular,pure_instructions\"\n-#define UNLIKELY_EXECUTED_TEXT_SECTION_NAME \\\n-                              \"__TEXT,__unlikely,regular,pure_instructions\"\n-\n /* Declare the section variables.  */\n #ifndef USED_FOR_TARGET\n enum darwin_section_enum {\n@@ -683,6 +678,8 @@ extern GTY(()) section * darwin_sections[NUM_DARWIN_SECTIONS];\n #undef\tTARGET_ASM_SELECT_SECTION\n #define TARGET_ASM_SELECT_SECTION machopic_select_section\n #define USE_SELECT_SECTION_FOR_FUNCTIONS\n+#undef\tTARGET_ASM_FUNCTION_SECTION\n+#define TARGET_ASM_FUNCTION_SECTION darwin_function_section\n \n #undef\tTARGET_ASM_SELECT_RTX_SECTION\n #define TARGET_ASM_SELECT_RTX_SECTION machopic_select_rtx_section"}, {"sha": "b8d6d69f5590a72831c09e6409c936e6447f67af", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "patch": "@@ -414,15 +414,6 @@ i386_pe_section_type_flags (tree decl, const char *name, int reloc)\n     flags = SECTION_CODE;\n   else if (decl && decl_readonly_section (decl, reloc))\n     flags = 0;\n-  else if (current_function_decl\n-\t   && cfun\n-\t   && crtl->subsections.unlikely_text_section_name\n-\t   && strcmp (name, crtl->subsections.unlikely_text_section_name) == 0)\n-    flags = SECTION_CODE;\n-  else if (!decl\n-\t   && (!current_function_decl || !cfun)\n-\t   && strcmp (name, UNLIKELY_EXECUTED_TEXT_SECTION_NAME) == 0)\n-    flags = SECTION_CODE;\n   else\n     {\n       flags = SECTION_WRITE;"}, {"sha": "38a005b06267adb11563d74a640a70e86212b79b", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "patch": "@@ -218,8 +218,4 @@ do {\t\t\t\t\t\t\t\t\\\n    it is fixed, prevent code from being put into .text.unlikely or\n    .text.hot.  */\n \n-#undef UNLIKELY_EXECUTED_TEXT_SECTION_NAME\n-#define UNLIKELY_EXECUTED_TEXT_SECTION_NAME \".text\"\n-\n-#undef HOT_TEXT_SECTION_NAME\n-#define HOT_TEXT_SECTION_NAME \".text\"\n+#define TARGET_ASM_FUNCTION_SECTION ia64_hpux_function_section"}, {"sha": "a007743e2e5a37b874b33b8c35c50bb1f7cafb74", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "patch": "@@ -336,6 +336,8 @@ static tree ia64_builtin_decl (unsigned, bool);\n \n static reg_class_t ia64_preferred_reload_class (rtx, reg_class_t);\n static enum machine_mode ia64_get_reg_raw_mode (int regno);\n+static section * ia64_hpux_function_section (tree, enum node_frequency,\n+\t\t\t\t\t     bool, bool);\n \f\n /* Table of valid machine attributes.  */\n static const struct attribute_spec ia64_attribute_table[] =\n@@ -11022,4 +11024,15 @@ ia64_get_reg_raw_mode (int regno)\n   return default_get_reg_raw_mode(regno);\n }\n \n+/* Always default to .text section until HP-UX linker is fixed.  */\n+\n+ATTRIBUTE_UNUSED static section *\n+ia64_hpux_function_section (tree decl ATTRIBUTE_UNUSED,\n+\t\t\t    enum node_frequency freq ATTRIBUTE_UNUSED,\n+\t\t\t    bool startup ATTRIBUTE_UNUSED,\n+\t\t\t    bool exit ATTRIBUTE_UNUSED)\n+{\n+  return NULL;\n+}\n+\n #include \"gt-ia64.h\""}, {"sha": "2fb438de30fb5b45e3b19bfd2a0bc6ace12c2cf3", "filename": "gcc/config/microblaze/microblaze.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h?ref=f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "patch": "@@ -880,10 +880,6 @@ do {\t\t\t\t\t\t\t\t\t \\\n #define SBSS_SECTION_ASM_OP     \"\\t.sbss\"\t/* Small RW uninitialized data */\n #define SBSS2_SECTION_ASM_OP    \"\\t.sbss2\"\t/* Small RO uninitialized data */\n \n-#define HOT_TEXT_SECTION_NAME   \".text.hot\"\n-#define UNLIKELY_EXECUTED_TEXT_SECTION_NAME \\\n-                                \".text.unlikely\"\n-\n /* We do this to save a few 10s of code space that would be taken up\n    by the call_FUNC () wrappers, used by the generic CRT_CALL_STATIC_FUNCTION\n    definition in crtstuff.c.  */"}, {"sha": "8d6d1649fa4fb36833486c90154a0c6b5e98815d", "filename": "gcc/configure.ac", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "patch": "@@ -3127,6 +3127,28 @@ if test x\"$demangler_in_ld\" = xyes; then\n   AC_MSG_RESULT($gcc_cv_ld_demangle)\n fi\n \n+if test x\"$linker_plugin_in_ld\" = xyes; then\n+  AC_MSG_CHECKING(linker support)\n+  gcc_cv_ld_plugin=no\n+  if test x\"$ld_is_gold\" = xyes; then\n+      gcc_cv_ld_plugin=yes\n+  else if test $in_tree_ld = yes; then\n+    if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 21 -o \"$gcc_cv_gld_major_version\" -gt 2; then \\\n+      gcc_cv_ld_plugin=yes\n+    fi\n+  elif test x$PLUGIN_LD != x -a x\"$gnu_ld\" = xyes; then\n+    # Check if the GNU linker supports --plugin-opt option\n+    if $gcc_cv_ld --help 2>/dev/null | grep no-demangle > /dev/null; then\n+      gcc_cv_ld_plugin=yes\n+    fi\n+  fi\n+  if test x\"$gcc_cv_ld_plugin\" = xyes; then\n+    AC_DEFINE(HAVE_LD_PLUGIN, 1,\n+[Define if your linker supports plugin.])\n+  fi\n+  AC_MSG_RESULT($gcc_cv_ld_plugin)\n+fi\n+\n case \"$target\" in\n   # All TARGET_ABI_OSF targets.\n   alpha*-*-osf* | alpha*-*-linux* | alpha*-*-*bsd*)"}, {"sha": "20932b8d9f3be1b7c08a494c38b101a0051454fe", "filename": "gcc/coretypes.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "patch": "@@ -121,6 +121,22 @@ enum unwind_info_type\n   UI_TARGET\n };\n \n+/* Callgraph node profile representation.  */\n+enum node_frequency {\n+  /* This function most likely won't be executed at all.\n+     (set only when profile feedback is available or via function attribute). */\n+  NODE_FREQUENCY_UNLIKELY_EXECUTED,\n+  /* For functions that are known to be executed once (i.e. constructors, destructors\n+     and main function.  */\n+  NODE_FREQUENCY_EXECUTED_ONCE,\n+  /* The default value.  */\n+  NODE_FREQUENCY_NORMAL,\n+  /* Optimize this function hard\n+     (set only when profile feedback is available or via function attribute). */\n+  NODE_FREQUENCY_HOT\n+};\n+\n+\n struct edge_def;\n typedef struct edge_def *edge;\n typedef const struct edge_def *const_edge;"}, {"sha": "fb4a8284422df88b41087c20deaf9fb348a44d97", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "patch": "@@ -897,14 +897,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_DEC_EVAL_METHOD 2\n #endif\n \n-#ifndef HOT_TEXT_SECTION_NAME\n-#define HOT_TEXT_SECTION_NAME \".text.hot\"\n-#endif\n-\n-#ifndef UNLIKELY_EXECUTED_TEXT_SECTION_NAME\n-#define UNLIKELY_EXECUTED_TEXT_SECTION_NAME \".text.unlikely\"\n-#endif\n-\n #ifndef HAS_LONG_COND_BRANCH\n #define HAS_LONG_COND_BRANCH 0\n #endif"}, {"sha": "b58ee7b3117b67eba4ceeb10bbbebc81fbc97b4e", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "patch": "@@ -7328,6 +7328,16 @@ is non-NULL, it is the @code{VAR_DECL} or @code{FUNCTION_DECL} with which\n this section is associated.\n @end deftypefn\n \n+@deftypefn {Target Hook} {section *} TARGET_ASM_FUNCTION_SECTION (tree @var{decl}, enum node_frequency @var{freq}, bool @var{startup}, bool @var{exit})\n+Return preferred text (sub)section for function @var{decl}.\n+Main purpose of this function is to separate cold, normal and hot\n+functions. @var{startup} is true when function is known to be used only \n+at startup (from static constructors or it is @code{main()}).\n+@var{exit} is true when function is known to be used only at exit\n+(from static destructors).\n+Return NULL if function should go to default text section.\n+@end deftypefn\n+\n @deftypevr {Target Hook} bool TARGET_HAVE_NAMED_SECTIONS\n This flag is true if the target supports @code{TARGET_ASM_NAMED_SECTION}.\n @end deftypevr"}, {"sha": "f230307cdaddf52051c85db1aafbd60762c46307", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "patch": "@@ -7303,6 +7303,16 @@ is non-NULL, it is the @code{VAR_DECL} or @code{FUNCTION_DECL} with which\n this section is associated.\n @end deftypefn\n \n+@hook TARGET_ASM_FUNCTION_SECTION\n+Return preferred text (sub)section for function @var{decl}.\n+Main purpose of this function is to separate cold, normal and hot\n+functions. @var{startup} is true when function is known to be used only \n+at startup (from static constructors or it is @code{main()}).\n+@var{exit} is true when function is known to be used only at exit\n+(from static destructors).\n+Return NULL if function should go to default text section.\n+@end deftypefn\n+\n @hook TARGET_HAVE_NAMED_SECTIONS\n This flag is true if the target supports @code{TARGET_ASM_NAMED_SECTION}.\n @end deftypevr"}, {"sha": "fcfa825e0a9b26bcc53fcbd0c8e6edafad7adea2", "filename": "gcc/function.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "patch": "@@ -226,11 +226,6 @@ struct GTY(()) function_subsections {\n   const char *cold_section_label;\n   const char *hot_section_end_label;\n   const char *cold_section_end_label;\n-\n-  /* String to be used for name of cold text sections, via\n-     targetm.asm_out.named_section.  */\n-\n-  const char *unlikely_text_section_name;\n };\n \n /* Describe an empty area of space in the stack frame.  These can be chained"}, {"sha": "928aa1f580f0820bf6cd3232d0258641e71a38a8", "filename": "gcc/output.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "patch": "@@ -269,6 +269,10 @@ extern bool default_assemble_integer (rtx, unsigned int, int);\n    be outputable. */\n extern bool assemble_integer (rtx, unsigned, unsigned, int);\n \n+/* Return section for TEXT_SECITON_NAME if DECL or DECL_SECTION_NAME (DECL)\n+   is NULL.  */\n+extern section *get_named_text_section (tree, const char *, const char *);\n+\n /* An interface to assemble_integer for the common case in which a value is\n    fully aligned and must be printed.  VALUE is the value of the integer\n    object and SIZE is the number of bytes it contains.  */"}, {"sha": "cb4edcd185fa59684086d4bacfaba2c9b7dead0c", "filename": "gcc/predict.c", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "patch": "@@ -78,7 +78,6 @@ static sreal real_zero, real_one, real_almost_one, real_br_prob_base,\n static void combine_predictions_for_insn (rtx, basic_block);\n static void dump_prediction (FILE *, enum br_predictor, int, basic_block, int);\n static void predict_paths_leading_to (basic_block, enum br_predictor, enum prediction);\n-static void choose_function_section (void);\n static bool can_predict_insn_p (const_rtx);\n \n /* Information we hold about each branch predictor.\n@@ -2185,8 +2184,6 @@ estimate_bb_frequencies (void)\n       free_aux_for_edges ();\n     }\n   compute_function_frequency ();\n-  if (flag_reorder_functions)\n-    choose_function_section ();\n }\n \n /* Decide whether function is hot, cold or unlikely executed.  */\n@@ -2232,35 +2229,6 @@ compute_function_frequency (void)\n     }\n }\n \n-/* Choose appropriate section for the function.  */\n-static void\n-choose_function_section (void)\n-{\n-  struct cgraph_node *node = cgraph_node (current_function_decl);\n-  if (DECL_SECTION_NAME (current_function_decl)\n-      || !targetm.have_named_sections\n-      /* Theoretically we can split the gnu.linkonce text section too,\n-\t but this requires more work as the frequency needs to match\n-\t for all generated objects so we need to merge the frequency\n-\t of all instances.  For now just never set frequency for these.  */\n-      || DECL_ONE_ONLY (current_function_decl))\n-    return;\n-\n-  /* If we are doing the partitioning optimization, let the optimization\n-     choose the correct section into which to put things.  */\n-\n-  if (flag_reorder_blocks_and_partition)\n-    return;\n-\n-  if (node->frequency == NODE_FREQUENCY_HOT)\n-    DECL_SECTION_NAME (current_function_decl) =\n-      build_string (strlen (HOT_TEXT_SECTION_NAME), HOT_TEXT_SECTION_NAME);\n-  if (node->frequency == NODE_FREQUENCY_UNLIKELY_EXECUTED)\n-    DECL_SECTION_NAME (current_function_decl) =\n-      build_string (strlen (UNLIKELY_EXECUTED_TEXT_SECTION_NAME),\n-\t\t    UNLIKELY_EXECUTED_TEXT_SECTION_NAME);\n-}\n-\n static bool\n gate_estimate_probability (void)\n {"}, {"sha": "4de117ec35f2019378036a144e47ce89695000b7", "filename": "gcc/system.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "patch": "@@ -725,8 +725,9 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tOPTIMIZATION_OPTIONS CLASS_LIKELY_SPILLED_P\t\t\t\\\n \tUSING_SJLJ_EXCEPTIONS TARGET_UNWIND_INFO\t\t\t\\\n \tLABEL_ALIGN_MAX_SKIP LOOP_ALIGN_MAX_SKIP\t\t\t\\\n-\tLABEL_ALIGN_AFTER_BARRIER_MAX_SKIP JUMP_ALIGN_MAX_SKIP \\\n-\tCAN_DEBUG_WITHOUT_FP\n+\tLABEL_ALIGN_AFTER_BARRIER_MAX_SKIP JUMP_ALIGN_MAX_SKIP \t\t\\\n+\tCAN_DEBUG_WITHOUT_FP UNLIKELY_EXECUTED_TEXT_SECTION_NAME\t\\\n+\tHOT_TEXT_SECTION_NAME\n \n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "22d5660b13d7493575a60bfd97c9fd3c24c90688", "filename": "gcc/target.def", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "patch": "@@ -281,6 +281,19 @@ DEFHOOK\n  void, (const char *name, unsigned int flags, tree decl),\n  default_no_named_section)\n \n+/* Return preferred text (sub)section for function DECL.\n+   Main purpose of this function is to separate cold, normal and hot\n+   functions. STARTUP is true when function is known to be used only \n+   at startup (from static constructors or it is main()).\n+   EXIT is true when function is known to be used only at exit\n+   (from static destructors).\n+   Return NULL if function should go to default text section.  */\n+DEFHOOK\n+(function_section,\n+ \"\",\n+ section *, (tree decl, enum node_frequency freq, bool startup, bool exit),\n+ default_function_section)\n+\n /* Return a mask describing how relocations should be treated when\n    selecting sections.  Bit 1 should be set if global relocations\n    should be placed in a read-write section; bit 0 should be set if"}, {"sha": "aff1b2745edae965a0b0ee91e4708f5b0245e28b", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "patch": "@@ -171,7 +171,8 @@ extern int default_label_align_after_barrier_max_skip (rtx);\n extern int default_loop_align_max_skip (rtx);\n extern int default_label_align_max_skip (rtx);\n extern int default_jump_align_max_skip (rtx);\n-\n+extern section * default_function_section(tree decl, enum node_frequency freq,\n+\t\t\t\t\t  bool startup, bool exit);\n extern enum machine_mode default_get_reg_raw_mode(int);\n \n extern const struct default_options empty_optimization_table[];"}, {"sha": "8bc52ec87e216fa7e9667152acb7850c3797def8", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "patch": "@@ -3107,6 +3107,11 @@ struct GTY(()) tree_parm_decl {\n #define DECL_HAS_INIT_PRIORITY_P(NODE) \\\n   (VAR_DECL_CHECK (NODE)->decl_with_vis.init_priority_p)\n \n+/* Specify whether the section name was set by user or by\n+   compiler via -ffunction-sections.  */\n+#define DECL_HAS_IMPLICIT_SECTION_NAME_P(NODE) \\\n+  (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.implicit_section_name_p)\n+\n struct GTY(()) tree_decl_with_vis {\n  struct tree_decl_with_rtl common;\n  tree assembler_name;\n@@ -3135,7 +3140,9 @@ struct GTY(()) tree_decl_with_vis {\n  unsigned init_priority_p : 1;\n  /* Used by C++ only.  Might become a generic decl flag.  */\n  unsigned shadowed_for_var_p : 1;\n- /* 14 unused bits. */\n+ /* When SECTION_NAME is implied by -ffunsection-section.  */\n+ unsigned implicit_section_name_p : 1;\n+ /* 13 unused bits. */\n };\n \n extern tree decl_debug_expr_lookup (tree);"}, {"sha": "fc996f1f8cd0f93835d5e5d28dfd9ed28e1da03b", "filename": "gcc/varasm.c", "status": "modified", "additions": 160, "deletions": 116, "changes": 276, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=f16d3f392e1b5a317ac75dbed2b9cb81d79bc50f", "patch": "@@ -368,69 +368,6 @@ create_block_symbol (const char *label, struct object_block *block,\n   return symbol;\n }\n \n-static void\n-initialize_cold_section_name (void)\n-{\n-  const char *stripped_name;\n-  char *name, *buffer;\n-  tree dsn;\n-\n-  gcc_assert (cfun && current_function_decl);\n-  if (crtl->subsections.unlikely_text_section_name)\n-    return;\n-\n-  dsn = DECL_SECTION_NAME (current_function_decl);\n-  if (flag_function_sections && dsn)\n-    {\n-      name = (char *) alloca (TREE_STRING_LENGTH (dsn) + 1);\n-      memcpy (name, TREE_STRING_POINTER (dsn), TREE_STRING_LENGTH (dsn) + 1);\n-\n-      stripped_name = targetm.strip_name_encoding (name);\n-\n-      buffer = ACONCAT ((stripped_name, \"_unlikely\", NULL));\n-      crtl->subsections.unlikely_text_section_name = ggc_strdup (buffer);\n-    }\n-  else\n-    crtl->subsections.unlikely_text_section_name =  UNLIKELY_EXECUTED_TEXT_SECTION_NAME;\n-}\n-\n-/* Tell assembler to switch to unlikely-to-be-executed text section.  */\n-\n-section *\n-unlikely_text_section (void)\n-{\n-  if (cfun)\n-    {\n-      if (!crtl->subsections.unlikely_text_section_name)\n-\tinitialize_cold_section_name ();\n-\n-      return get_named_section (NULL, crtl->subsections.unlikely_text_section_name, 0);\n-    }\n-  else\n-    return get_named_section (NULL, UNLIKELY_EXECUTED_TEXT_SECTION_NAME, 0);\n-}\n-\n-/* When called within a function context, return true if the function\n-   has been assigned a cold text section and if SECT is that section.\n-   When called outside a function context, return true if SECT is the\n-   default cold section.  */\n-\n-bool\n-unlikely_text_section_p (section *sect)\n-{\n-  const char *name;\n-\n-  if (cfun)\n-    name = crtl->subsections.unlikely_text_section_name;\n-  else\n-    name = UNLIKELY_EXECUTED_TEXT_SECTION_NAME;\n-\n-  return (name\n-\t  && sect\n-\t  && SECTION_STYLE (sect) == SECTION_NAMED\n-\t  && strcmp (name, sect->named.name) == 0);\n-}\n-\n /* Return a section with a particular name and with whatever SECTION_*\n    flags section_type_flags deems appropriate.  The name of the section\n    is taken from NAME if nonnull, otherwise it is taken from DECL's\n@@ -462,7 +399,10 @@ resolve_unique_section (tree decl, int reloc ATTRIBUTE_UNUSED,\n       && targetm.have_named_sections\n       && (flag_function_or_data_sections\n \t  || DECL_ONE_ONLY (decl)))\n-    targetm.asm_out.unique_section (decl, reloc);\n+    {\n+      targetm.asm_out.unique_section (decl, reloc);\n+      DECL_HAS_IMPLICIT_SECTION_NAME_P (decl) = true;\n+    }\n }\n \n #ifdef BSS_SECTION_ASM_OP\n@@ -539,49 +479,176 @@ hot_function_section (tree decl)\n }\n #endif\n \n+/* Return section for TEXT_SECTION_NAME if DECL or DECL_SECTION_NAME (DECL)\n+   is NULL.\n+\n+   When DECL_SECTION_NAME is non-NULL and it is implicit section and\n+   NAMED_SECTION_SUFFIX is non-NULL, then produce section called\n+   concatenate the name with NAMED_SECTION_SUFFIX.\n+   Otherwise produce \"TEXT_SECTION_NAME.IMPLICIT_NAME\".  */\n+\n+section *\n+get_named_text_section (tree decl,\n+\t\t        const char *text_section_name,\n+\t\t        const char *named_section_suffix)\n+{\n+  if (decl && DECL_SECTION_NAME (decl))\n+    {\n+      if (named_section_suffix)\n+\t{\n+\t  tree dsn = DECL_SECTION_NAME (decl);\n+\t  const char *stripped_name;\n+\t  char *name, *buffer;\n+\n+\t  name = (char *) alloca (TREE_STRING_LENGTH (dsn) + 1);\n+\t  memcpy (name, TREE_STRING_POINTER (dsn),\n+\t\t  TREE_STRING_LENGTH (dsn) + 1);\n+\n+\t  stripped_name = targetm.strip_name_encoding (name);\n+\n+\t  buffer = ACONCAT ((stripped_name, named_section_suffix, NULL));\n+\t  return get_named_section (decl, buffer, 0);\n+\t}\n+      else if (DECL_HAS_IMPLICIT_SECTION_NAME_P (decl))\n+\t{\n+\t  const char *name;\n+\n+\t  /* Do not try to split gnu_linkonce functions.  This gets somewhat\n+\t     slipperly.  */\n+\t  if (DECL_ONE_ONLY (decl) && !HAVE_COMDAT_GROUP)\n+\t    return NULL;\n+\t  name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+\t  name = targetm.strip_name_encoding (name);\n+\t  return get_named_section (decl, ACONCAT ((text_section_name, \".\",\n+\t\t\t\t                   name, NULL)), 0);\n+\t}\n+      else\n+\treturn NULL;\n+    }\n+  return get_named_section (decl, text_section_name, 0);\n+}\n+\n+/* Choose named function section based on its frequency.  */\n+\n+section *\n+default_function_section (tree decl, enum node_frequency freq,\n+\t\t\t  bool startup, bool exit)\n+{\n+  /* Startup code should go to startup subsection unless it is\n+     unlikely executed (this happens especially with function splitting\n+     where we can split away unnecesary parts of static constructors.  */\n+  if (startup && freq != NODE_FREQUENCY_UNLIKELY_EXECUTED)\n+    return get_named_text_section (decl, \".text.startup\", NULL);\n+\n+  /* Similarly for exit.  */\n+  if (exit && freq != NODE_FREQUENCY_UNLIKELY_EXECUTED)\n+    return get_named_text_section (decl, \".text.exit\", NULL);\n+\n+  /* Group cold functions together, similarly for hot code.  */\n+  switch (freq)\n+    {\n+      case NODE_FREQUENCY_UNLIKELY_EXECUTED:\n+\treturn get_named_text_section (decl, \".text.unlikely\", NULL);\n+      case NODE_FREQUENCY_HOT:\n+\treturn get_named_text_section (decl, \".text.hot\", NULL);\n+      default:\n+\treturn NULL;\n+    }\n+}\n+\n /* Return the section for function DECL.\n \n    If DECL is NULL_TREE, return the text section.  We can be passed\n-   NULL_TREE under some circumstances by dbxout.c at least.  */\n+   NULL_TREE under some circumstances by dbxout.c at least. \n \n-section *\n-function_section (tree decl)\n+   If FORCE_COLD is true, return cold function section ignoring\n+   the frequency info of cgraph_node.  */\n+\n+static section *\n+function_section_1 (tree decl, bool force_cold)\n {\n-  int reloc = 0;\n+  section *section = NULL;\n+  enum node_frequency freq = NODE_FREQUENCY_NORMAL;\n+  bool startup = false, exit = false;\n+\n+  if (decl)\n+    {\n+      struct cgraph_node *node = cgraph_node (decl);\n \n-  if (first_function_block_is_cold)\n-    reloc = 1;\n+      freq = node->frequency;\n+      startup = node->only_called_at_startup;\n+      exit = node->only_called_at_exit;\n+    }\n+  if (force_cold)\n+    freq = NODE_FREQUENCY_UNLIKELY_EXECUTED;\n \n #ifdef USE_SELECT_SECTION_FOR_FUNCTIONS\n   if (decl != NULL_TREE\n       && DECL_SECTION_NAME (decl) != NULL_TREE)\n-    return reloc ? unlikely_text_section ()\n-\t\t : get_named_section (decl, NULL, 0);\n+    {\n+      if (targetm.asm_out.function_section)\n+\tsection = targetm.asm_out.function_section (decl, freq,\n+\t\t\t\t\t\t    startup, exit);\n+      if (section)\n+\treturn section;\n+      return get_named_section (decl, NULL, 0);\n+    }\n   else\n-    return targetm.asm_out.select_section (decl, reloc, DECL_ALIGN (decl));\n+    return targetm.asm_out.select_section\n+\t    (decl, freq == NODE_FREQUENCY_UNLIKELY_EXECUTED,\n+\t     DECL_ALIGN (decl));\n #else\n-  return reloc ? unlikely_text_section () : hot_function_section (decl);\n+  if (targetm.asm_out.function_section)\n+    section = targetm.asm_out.function_section (decl, freq, startup, exit);\n+  if (section)\n+    return section;\n+  return hot_function_section (decl);\n #endif\n }\n \n+/* Return the section for function DECL.\n+\n+   If DECL is NULL_TREE, return the text section.  We can be passed\n+   NULL_TREE under some circumstances by dbxout.c at least.  */\n+\n+section *\n+function_section (tree decl)\n+{\n+  /* Handle cases where function splitting code decides\n+     to put function entry point into unlikely executed section\n+     despite the fact that the function itself is not cold\n+     (i.e. it is called rarely but contains a hot loop that is\n+     better to live in hot subsection for the code locality).  */\n+  return function_section_1 (decl,\n+\t\t\t     first_function_block_is_cold);\n+}\n+\n+/* Return the section for the current function, take IN_COLD_SECTION_P\n+   into account.  */\n+\n section *\n current_function_section (void)\n {\n-#ifdef USE_SELECT_SECTION_FOR_FUNCTIONS\n-  if (current_function_decl != NULL_TREE\n-      && DECL_SECTION_NAME (current_function_decl) != NULL_TREE)\n-    return in_cold_section_p ? unlikely_text_section ()\n-\t\t\t     : get_named_section (current_function_decl,\n-\t\t\t\t\t\t  NULL, 0);\n-  else\n-    return targetm.asm_out.select_section (current_function_decl,\n-\t\t\t\t\t   in_cold_section_p,\n-\t\t\t\t\t   DECL_ALIGN (current_function_decl));\n-#else\n-  return (in_cold_section_p\n-\t  ? unlikely_text_section ()\n-\t  : hot_function_section (current_function_decl));\n-#endif\n+  return function_section_1 (current_function_decl, in_cold_section_p);\n+}\n+\n+/* Tell assembler to switch to unlikely-to-be-executed text section.  */\n+\n+section *\n+unlikely_text_section (void)\n+{\n+  return function_section_1 (current_function_decl, true);\n+}\n+\n+/* When called within a function context, return true if the function\n+   has been assigned a cold text section and if SECT is that section.\n+   When called outside a function context, return true if SECT is the\n+   default cold section.  */\n+\n+bool\n+unlikely_text_section_p (section *sect)\n+{\n+  return sect == function_section_1 (current_function_decl, true);\n }\n \n /* Return the read-only data section associated with function DECL.  */\n@@ -1454,8 +1521,6 @@ assemble_start_function (tree decl, const char *fnname)\n   char tmp_label[100];\n   bool hot_label_written = false;\n \n-  crtl->subsections.unlikely_text_section_name = NULL;\n-\n   first_function_block_is_cold = false;\n   if (flag_reorder_blocks_and_partition)\n     {\n@@ -1513,16 +1578,10 @@ assemble_start_function (tree decl, const char *fnname)\n   else if (DECL_SECTION_NAME (decl))\n     {\n       /* Calls to function_section rely on first_function_block_is_cold\n-\t being accurate.  The first block may be cold even if we aren't\n-\t doing partitioning, if the entire function was decided by\n-\t choose_function_section (predict.c) to be cold.  */\n-\n-      initialize_cold_section_name ();\n-\n-      if (crtl->subsections.unlikely_text_section_name\n-\t  && strcmp (TREE_STRING_POINTER (DECL_SECTION_NAME (decl)),\n-\t\t     crtl->subsections.unlikely_text_section_name) == 0)\n-\tfirst_function_block_is_cold = true;\n+\t being accurate.  */\n+      first_function_block_is_cold\n+\t = (cgraph_node (current_function_decl)->frequency\n+\t    == NODE_FREQUENCY_UNLIKELY_EXECUTED);\n     }\n \n   in_cold_section_p = first_function_block_is_cold;\n@@ -5871,15 +5930,6 @@ default_section_type_flags (tree decl, const char *name, int reloc)\n     flags = SECTION_CODE;\n   else if (decl && decl_readonly_section (decl, reloc))\n     flags = 0;\n-  else if (current_function_decl\n-\t   && cfun\n-\t   && crtl->subsections.unlikely_text_section_name\n-\t   && strcmp (name, crtl->subsections.unlikely_text_section_name) == 0)\n-    flags = SECTION_CODE;\n-  else if (!decl\n-\t   && (!current_function_decl || !cfun)\n-\t   && strcmp (name, UNLIKELY_EXECUTED_TEXT_SECTION_NAME) == 0)\n-    flags = SECTION_CODE;\n   else\n     flags = SECTION_WRITE;\n \n@@ -6810,12 +6860,6 @@ switch_to_section (section *new_section)\n   switch (SECTION_STYLE (new_section))\n     {\n     case SECTION_NAMED:\n-      if (cfun\n-\t  && !crtl->subsections.unlikely_text_section_name\n-\t  && strcmp (new_section->named.name,\n-\t\t     UNLIKELY_EXECUTED_TEXT_SECTION_NAME) == 0)\n-\tcrtl->subsections.unlikely_text_section_name = UNLIKELY_EXECUTED_TEXT_SECTION_NAME;\n-\n       targetm.asm_out.named_section (new_section->named.name,\n \t\t\t\t     new_section->named.common.flags,\n \t\t\t\t     new_section->named.decl);"}]}