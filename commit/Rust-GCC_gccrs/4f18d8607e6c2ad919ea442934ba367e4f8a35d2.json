{"sha": "4f18d8607e6c2ad919ea442934ba367e4f8a35d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYxOGQ4NjA3ZTZjMmFkOTE5ZWE0NDI5MzRiYTM2N2U0ZjhhMzVkMg==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2009-04-20T12:42:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T12:42:34Z"}, "message": "sem.adb (Semantics, [...]): Include dependents of bodies that are not included.\n\n2009-04-20  Bob Duff  <duff@adacore.com>\n\n\t* sem.adb (Semantics, Walk_Library_Items): Include dependents of bodies\n\tthat are not included. This is necessary if the main unit is a generic\n\tinstantiation.\n\n\t* gnat1drv.adb (Gnat1drv): Comment out the call to Check_Library_Items,\n\tbecause it doesn't work if -gnatn is used.\n\nFrom-SVN: r146408", "tree": {"sha": "2ad41876022a0508ae7510191d1a543de776f747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ad41876022a0508ae7510191d1a543de776f747"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f18d8607e6c2ad919ea442934ba367e4f8a35d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f18d8607e6c2ad919ea442934ba367e4f8a35d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f18d8607e6c2ad919ea442934ba367e4f8a35d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f18d8607e6c2ad919ea442934ba367e4f8a35d2/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "451800a05775791230db1793e575296eae3b98bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/451800a05775791230db1793e575296eae3b98bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/451800a05775791230db1793e575296eae3b98bc"}], "stats": {"total": 160, "additions": 123, "deletions": 37}, "files": [{"sha": "21b28bb98971eaf611f08de2b6e38a4594b71ef9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f18d8607e6c2ad919ea442934ba367e4f8a35d2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f18d8607e6c2ad919ea442934ba367e4f8a35d2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4f18d8607e6c2ad919ea442934ba367e4f8a35d2", "patch": "@@ -1,3 +1,12 @@\n+2009-04-20  Bob Duff  <duff@adacore.com>\n+\n+\t* sem.adb (Semantics, Walk_Library_Items): Include dependents of bodies\n+\tthat are not included. This is necessary if the main unit is a generic\n+\tinstantiation.\n+\n+\t* gnat1drv.adb (Gnat1drv): Comment out the call to Check_Library_Items,\n+\tbecause it doesn't work if -gnatn is used.\n+\n 2009-04-20  Ed Schonberg  <schonberg@adacore.com>\n \n \t* rtsfind.adb (RTE, RTE_Record_Component): In"}, {"sha": "cb73edf64fd84d4b4c1d110f66583db8d61c1cc4", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f18d8607e6c2ad919ea442934ba367e4f8a35d2/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f18d8607e6c2ad919ea442934ba367e4f8a35d2/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=4f18d8607e6c2ad919ea442934ba367e4f8a35d2", "patch": "@@ -92,6 +92,8 @@ procedure Gnat1drv is\n \n    procedure Check_Library_Items;\n    --  For debugging -- checks the behavior of Walk_Library_Items\n+   pragma Warnings (Off, Check_Library_Items);\n+   --  In case the call below is commented out\n \n    --------------------\n    -- Check_Bad_Body --\n@@ -738,7 +740,9 @@ begin\n       Namet.Lock;\n       Stringt.Lock;\n \n-      pragma Debug (Check_Library_Items);\n+      --  ???pragma Debug (Check_Library_Items);\n+      --  Commented out, because it currently does not work if the -gnatn\n+      --  switch (back end inlining) is used.\n \n       --  Here we call the back end to generate the output code\n "}, {"sha": "478cb568e41ecef6fdcbe37f888595fea91177c2", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 109, "deletions": 36, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f18d8607e6c2ad919ea442934ba367e4f8a35d2/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f18d8607e6c2ad919ea442934ba367e4f8a35d2/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=4f18d8607e6c2ad919ea442934ba367e4f8a35d2", "patch": "@@ -63,6 +63,9 @@ pragma Warnings (Off, Sem_Util);\n \n package body Sem is\n \n+   Debug_Unit_Walk : constant Boolean := False;\n+   --  Set to True to print out debugging information for Walk_Library_Items\n+\n    Outer_Generic_Scope : Entity_Id := Empty;\n    --  Global reference to the outer scope that is generic. In a non\n    --  generic context, it is empty. At the moment, it is only used\n@@ -78,6 +81,12 @@ package body Sem is\n    --  If True, we suppress appending compilation units onto the\n    --  Comp_Unit_List.\n \n+   procedure Write_Unit_Info\n+     (Unit_Num : Unit_Number_Type;\n+      Item : Node_Id;\n+      Prefix : String := \"\");\n+   --  Print out debugging information about the unit\n+\n    -------------\n    -- Analyze --\n    -------------\n@@ -1345,9 +1354,18 @@ package body Sem is\n          Restore_Scope_Stack;\n       end Do_Analyze;\n \n+      Already_Analyzed : constant Boolean := Analyzed (Comp_Unit);\n+\n    --  Start of processing for Semantics\n \n    begin\n+      if Debug_Unit_Walk and then Already_Analyzed then\n+         Write_Str (\"(done)\");\n+         Write_Unit_Info (Get_Cunit_Unit_Number (Comp_Unit), Unit (Comp_Unit),\n+                          Prefix => \"--> \");\n+         Indent;\n+      end if;\n+\n       Compiler_State   := Analyzing;\n       Current_Sem_Unit := Get_Cunit_Unit_Number (Comp_Unit);\n \n@@ -1400,35 +1418,34 @@ package body Sem is\n          --  Do analysis, and then append the compilation unit onto the\n          --  Comp_Unit_List, if appropriate. This is done after analysis, so if\n          --  this unit depends on some others, they have already been\n-         --  appended. We ignore bodies, except for the main unit itself, and\n-         --  everything those bodies depend upon. We have also to guard against\n-         --  ill-formed subunits that have an improper context.\n+         --  appended. We ignore bodies, except for the main unit itself. We\n+         --  have also to guard against ill-formed subunits that have an\n+         --  improper context.\n+\n+         Do_Analyze;\n \n          if Ignore_Comp_Units then\n-            Do_Analyze;\n-            pragma Assert (Ignore_Comp_Units);  --  still\n+            null;\n \n          elsif Present (Comp_Unit)\n            and then  Nkind (Unit (Comp_Unit)) in N_Proper_Body\n            and then not In_Extended_Main_Source_Unit (Comp_Unit)\n          then\n-            Ignore_Comp_Units := True;\n-            Do_Analyze;\n-            pragma Assert (Ignore_Comp_Units);\n-            Ignore_Comp_Units := False;\n+            null;\n \n          else\n-            Do_Analyze;\n-            --  pragma Assert (not Ignore_Comp_Units);\n-            --  The above assertion is *almost* true. It fails only when a\n-            --  subunit with's its parent procedure body, which has no explicit\n-            --  spec.\n+            pragma Assert (not Ignore_Comp_Units);\n \n             if No (Comp_Unit_List) then  --  Initialize if first time\n                Comp_Unit_List := New_Elmt_List;\n             end if;\n-            if not Ignore_Comp_Units then  --  See above commented-out Assert\n-               Append_Elmt (Comp_Unit, Comp_Unit_List);\n+\n+            Append_Elmt (Comp_Unit, Comp_Unit_List);\n+\n+            if Debug_Unit_Walk then\n+               Write_Str (\"Appending \");\n+               Write_Unit_Info\n+                 (Get_Cunit_Unit_Number (Comp_Unit), Unit (Comp_Unit));\n             end if;\n \n             --  Ignore all units after main unit\n@@ -1456,15 +1473,22 @@ package body Sem is\n \n       Restore_Opt_Config_Switches (Save_Config_Switches);\n       Expander_Mode_Restore;\n+\n+      if Debug_Unit_Walk and then Already_Analyzed then\n+         Outdent;\n+         Write_Str (\"(done)\");\n+         Write_Unit_Info (Get_Cunit_Unit_Number (Comp_Unit), Unit (Comp_Unit),\n+                          Prefix => \"<-- \");\n+      end if;\n    end Semantics;\n \n    ------------------------\n    -- Walk_Library_Items --\n    ------------------------\n \n    procedure Walk_Library_Items is\n-      Enable_Output : constant Boolean := False;\n-      --  Set to True to print out the items as we go (for debugging)\n+      type Unit_Number_Set is array (Main_Unit .. Last_Unit) of Boolean;\n+      Seen : Unit_Number_Set := (others => False);\n \n       procedure Do_Action (CU : Node_Id; Item : Node_Id);\n       --  Calls Action, with some validity checks\n@@ -1478,6 +1502,8 @@ package body Sem is\n          --  This calls Action at the end. All the preceding code is just\n          --  assertions and debugging output.\n \n+         pragma Assert (No (CU) or else Nkind (CU) = N_Compilation_Unit);\n+\n          case Nkind (Item) is\n             when N_Generic_Subprogram_Declaration     |\n               N_Generic_Package_Declaration           |\n@@ -1515,28 +1541,24 @@ package body Sem is\n \n          if Present (CU) then\n             pragma Assert (Item /= Stand.Standard_Package_Node);\n+            pragma Assert (Item = Unit (CU));\n \n-            if Enable_Output then\n-               Write_Unit_Name (Unit_Name (Get_Cunit_Unit_Number (CU)));\n-               Write_Str (\", Unit_Number = \");\n-               Write_Int (Int (Get_Cunit_Unit_Number (CU)));\n-               Write_Str (\", \");\n-               Write_Str (Node_Kind'Image (Nkind (Item)));\n+            declare\n+               Unit_Num : constant Unit_Number_Type :=\n+                 Get_Cunit_Unit_Number (CU);\n+            begin\n+               Write_Unit_Info (Unit_Num, Item);\n \n-               if Item /= Original_Node (Item) then\n-                  Write_Str (\", orig = \");\n-                  Write_Str (Node_Kind'Image (Nkind (Original_Node (Item))));\n-               end if;\n-\n-               Write_Eol;\n-            end if;\n+               pragma Assert (not Seen (Unit_Num));\n+               Seen (Unit_Num) := True;\n+            end;\n \n          else\n             --  Must be Standard\n \n             pragma Assert (Item = Stand.Standard_Package_Node);\n \n-            if Enable_Output then\n+            if Debug_Unit_Walk then\n                Write_Line (\"Standard\");\n             end if;\n          end if;\n@@ -1551,7 +1573,7 @@ package body Sem is\n    --  Start of processing for Walk_Library_Items\n \n    begin\n-      if Enable_Output then\n+      if Debug_Unit_Walk then\n          Write_Line (\"Walk_Library_Items:\");\n          Indent;\n       end if;\n@@ -1572,7 +1594,8 @@ package body Sem is\n \n                --  If it's a body, then ignore it, unless it's an instance (in\n                --  which case we do the spec), or it's the main unit (in which\n-               --  case we do it). Note that it could be both.\n+               --  case we do it). Note that it could be both, in which case we\n+               --  do the spec first.\n \n                when N_Package_Body | N_Subprogram_Body =>\n                   declare\n@@ -1593,7 +1616,11 @@ package body Sem is\n                      end if;\n \n                      if Is_Generic_Instance (Entity) then\n-                        Do_Action (CU, Unit (Library_Unit (CU)));\n+                        declare\n+                           Spec_Unit : constant Node_Id := Library_Unit (CU);\n+                        begin\n+                           Do_Action (Spec_Unit, Unit (Spec_Unit));\n+                        end;\n                      end if;\n                   end;\n \n@@ -1616,10 +1643,56 @@ package body Sem is\n          Next_Elmt (Cur);\n       end loop;\n \n-      if Enable_Output then\n+      if Debug_Unit_Walk then\n+         if Seen /= (Seen'Range => True) then\n+            Write_Eol;\n+            Write_Line (\"Ignored units:\");\n+\n+            Indent;\n+            for Unit_Num in Seen'Range loop\n+               if not Seen (Unit_Num) then\n+                  Write_Unit_Info (Unit_Num, Unit (Cunit (Unit_Num)));\n+               end if;\n+            end loop;\n+            Outdent;\n+         end if;\n+      end if;\n+\n+      if Debug_Unit_Walk then\n          Outdent;\n          Write_Line (\"end Walk_Library_Items.\");\n       end if;\n    end Walk_Library_Items;\n \n+   ---------------------\n+   -- Write_Unit_Info --\n+   ---------------------\n+\n+   procedure Write_Unit_Info\n+     (Unit_Num : Unit_Number_Type;\n+      Item : Node_Id;\n+      Prefix : String := \"\")\n+   is\n+   begin\n+      if Debug_Unit_Walk then\n+         Write_Str (Prefix);\n+         Write_Unit_Name (Unit_Name (Unit_Num));\n+         Write_Str (\", unit \");\n+         Write_Int (Int (Unit_Num));\n+         Write_Str (\", \");\n+         Write_Int (Int (Item));\n+         Write_Str (\"=\");\n+         Write_Str (Node_Kind'Image (Nkind (Item)));\n+\n+         if Item /= Original_Node (Item) then\n+            Write_Str (\", orig = \");\n+            Write_Int (Int (Original_Node (Item)));\n+            Write_Str (\"=\");\n+            Write_Str (Node_Kind'Image (Nkind (Original_Node (Item))));\n+         end if;\n+\n+         Write_Eol;\n+      end if;\n+   end Write_Unit_Info;\n+\n end Sem;"}]}