{"sha": "4cea5b8cb715e40e10174e6de405f26202fa3d6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNlYTViOGNiNzE1ZTQwZTEwMTc0ZTZkZTQwNWYyNjIwMmZhM2Q2YQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-27T11:18:03Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-27T11:18:03Z"}, "message": "aarch64: Handle SVE attributes in comp_type_attributes [PR100270]\n\nEven though \"SVE type\" and \"SVE sizeless type\" are marked as\naffecting type identity, the middle end doesn't truly believe\nit unless we also handle them in comp_type_attributes.\n\ngcc/\n\tPR target/100270\n\t* config/aarch64/aarch64.c (aarch64_comp_type_attributes): Handle\n\tSVE attributes.\n\ngcc/testsuite/\n\tPR target/100270\n\t* gcc.target/aarch64/sve/acle/general-c/pr100270_1.c: New test.\n\t* gcc.target/aarch64/sve/acle/general-c/sizeless-2.c: Change\n\texpected error message when subtracting pointers to different\n\tvector types.  Expect warnings when mixing them elsewhere.\n\t* gcc.target/aarch64/sve/acle/general/attributes_7.c: Remove\n\tXFAILs.  Tweak error messages for some cases.", "tree": {"sha": "05f2e569e60ec054d0c9cf55a107897b71a8407b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05f2e569e60ec054d0c9cf55a107897b71a8407b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cea5b8cb715e40e10174e6de405f26202fa3d6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cea5b8cb715e40e10174e6de405f26202fa3d6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cea5b8cb715e40e10174e6de405f26202fa3d6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cea5b8cb715e40e10174e6de405f26202fa3d6a/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48d88cde0307aaba46f538359123c38f70052bd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48d88cde0307aaba46f538359123c38f70052bd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48d88cde0307aaba46f538359123c38f70052bd2"}], "stats": {"total": 215, "additions": 166, "deletions": 49}, "files": [{"sha": "dbaf6fbe4c8f988f7d59b2847ec6884bba530150", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cea5b8cb715e40e10174e6de405f26202fa3d6a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cea5b8cb715e40e10174e6de405f26202fa3d6a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=4cea5b8cb715e40e10174e6de405f26202fa3d6a", "patch": "@@ -25173,6 +25173,10 @@ aarch64_comp_type_attributes (const_tree type1, const_tree type2)\n     return 0;\n   if (!check_attr (\"Advanced SIMD type\"))\n     return 0;\n+  if (!check_attr (\"SVE type\"))\n+    return 0;\n+  if (!check_attr (\"SVE sizeless type\"))\n+    return 0;\n   return 1;\n }\n "}, {"sha": "05232d79325f58dd7411953f51155034c1f8828e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/pr100270_1.c", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cea5b8cb715e40e10174e6de405f26202fa3d6a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fpr100270_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cea5b8cb715e40e10174e6de405f26202fa3d6a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fpr100270_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fpr100270_1.c?ref=4cea5b8cb715e40e10174e6de405f26202fa3d6a", "patch": "@@ -0,0 +1,103 @@\n+/* { dg-options \"-msve-vector-bits=256\" } */\n+\n+#include <arm_sve.h>\n+\n+typedef svint32_t vls_svint32_t __attribute__((arm_sve_vector_bits(256)));\n+typedef svuint32_t vls_svuint32_t __attribute__((arm_sve_vector_bits(256)));\n+\n+typedef int32_t gnu_svint32_t __attribute__((vector_size(32)));\n+typedef uint32_t gnu_svuint32_t __attribute__((vector_size(32)));\n+\n+#define X_gnu_svint32_t 1\n+#define X_gnu_svuint32_t 2\n+#define X_vls_svint32_t 3\n+#define X_vls_svuint32_t 4\n+\n+#define CHECK(T) T: X_##T\n+\n+#define CHECK_TYPE(EXPR, TYPE) \\\n+  do { \\\n+    int x[_Generic (EXPR, \\\n+\t\t    CHECK (gnu_svint32_t), \\\n+\t\t    CHECK (gnu_svuint32_t), \\\n+\t\t    CHECK (vls_svint32_t), \\\n+\t\t    CHECK (vls_svuint32_t), \\\n+\t\t    default : 0) == X_##TYPE ? 1 : -1]; \\\n+  } while (0)\n+\n+void\n+f (gnu_svint32_t sg, gnu_svuint32_t ug, vls_svint32_t sn, vls_svuint32_t un, int c)\n+{\n+  CHECK_TYPE (sg, gnu_svint32_t);\n+  CHECK_TYPE (ug, gnu_svuint32_t);\n+  CHECK_TYPE (sn, vls_svint32_t);\n+  CHECK_TYPE (un, vls_svuint32_t);\n+\n+  CHECK_TYPE (sg + 1, gnu_svint32_t);\n+  CHECK_TYPE (ug + 1, gnu_svuint32_t);\n+  CHECK_TYPE (sn + 1, vls_svint32_t);\n+  CHECK_TYPE (un + 1, vls_svuint32_t);\n+\n+  CHECK_TYPE (1 + sg, gnu_svint32_t);\n+  CHECK_TYPE (1 + ug, gnu_svuint32_t);\n+  CHECK_TYPE (1 + sn, vls_svint32_t);\n+  CHECK_TYPE (1 + un, vls_svuint32_t);\n+\n+  CHECK_TYPE (sg + sg, gnu_svint32_t);\n+  CHECK_TYPE (ug + ug, gnu_svuint32_t);\n+  CHECK_TYPE (sn + sn, vls_svint32_t);\n+  CHECK_TYPE (un + un, vls_svuint32_t);\n+\n+  /* Traditional behavior for mixed signs is to pick the signedness of the\n+     first operand.  We don't have any Arm-specific reason for preferring that\n+     behavior.  */\n+  CHECK_TYPE (sg + ug, gnu_svint32_t);\n+  CHECK_TYPE (ug + sg, gnu_svuint32_t);\n+  CHECK_TYPE (sn + un, vls_svint32_t);\n+  CHECK_TYPE (un + sn, vls_svuint32_t);\n+\n+  CHECK_TYPE (c ? sg + sg : sg, gnu_svint32_t);\n+  CHECK_TYPE (c ? ug + ug : ug, gnu_svuint32_t);\n+  CHECK_TYPE (c ? sn + sn : sn, vls_svint32_t);\n+  CHECK_TYPE (c ? un + un : un, vls_svuint32_t);\n+\n+  CHECK_TYPE (c ? sg + 1 : sg, gnu_svint32_t);\n+  CHECK_TYPE (c ? ug + 1 : ug, gnu_svuint32_t);\n+  CHECK_TYPE (c ? sn + 1 : sn, vls_svint32_t);\n+  CHECK_TYPE (c ? un + 1 : un, vls_svuint32_t);\n+\n+  CHECK_TYPE (c ? 1 + sg : sg, gnu_svint32_t);\n+  CHECK_TYPE (c ? 1 + ug : ug, gnu_svuint32_t);\n+  CHECK_TYPE (c ? 1 + sn : sn, vls_svint32_t);\n+  CHECK_TYPE (c ? 1 + un : un, vls_svuint32_t);\n+\n+  CHECK_TYPE (c ? sg : sg + sg, gnu_svint32_t);\n+  CHECK_TYPE (c ? ug : ug + ug, gnu_svuint32_t);\n+  CHECK_TYPE (c ? sn : sn + sn, vls_svint32_t);\n+  CHECK_TYPE (c ? un : un + un, vls_svuint32_t);\n+\n+  CHECK_TYPE (c ? sg : sg + 1, gnu_svint32_t);\n+  CHECK_TYPE (c ? ug : ug + 1, gnu_svuint32_t);\n+  CHECK_TYPE (c ? sn : sn + 1, vls_svint32_t);\n+  CHECK_TYPE (c ? un : un + 1, vls_svuint32_t);\n+\n+  CHECK_TYPE (c ? sg : 1 + sg, gnu_svint32_t);\n+  CHECK_TYPE (c ? ug : 1 + ug, gnu_svuint32_t);\n+  CHECK_TYPE (c ? sn : 1 + sn, vls_svint32_t);\n+  CHECK_TYPE (c ? un : 1 + un, vls_svuint32_t);\n+\n+  CHECK_TYPE (c ? sg + sg : sg + sg, gnu_svint32_t);\n+  CHECK_TYPE (c ? ug + ug : ug + ug, gnu_svuint32_t);\n+  CHECK_TYPE (c ? sn + sn : sn + sn, vls_svint32_t);\n+  CHECK_TYPE (c ? un + un : un + un, vls_svuint32_t);\n+\n+  CHECK_TYPE (c ? sg + sg : sg + 1, gnu_svint32_t);\n+  CHECK_TYPE (c ? ug + ug : ug + 1, gnu_svuint32_t);\n+  CHECK_TYPE (c ? sn + sn : sn + 1, vls_svint32_t);\n+  CHECK_TYPE (c ? un + un : un + 1, vls_svuint32_t);\n+\n+  CHECK_TYPE (c ? 1 + sg : sg + sg, gnu_svint32_t);\n+  CHECK_TYPE (c ? 1 + ug : ug + ug, gnu_svuint32_t);\n+  CHECK_TYPE (c ? 1 + sn : sn + sn, vls_svint32_t);\n+  CHECK_TYPE (c ? 1 + un : un + un, vls_svuint32_t);\n+}"}, {"sha": "c575492c1f81002c6ca665f946839e3b86665e13", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/sizeless-2.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cea5b8cb715e40e10174e6de405f26202fa3d6a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fsizeless-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cea5b8cb715e40e10174e6de405f26202fa3d6a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fsizeless-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fsizeless-2.c?ref=4cea5b8cb715e40e10174e6de405f26202fa3d6a", "patch": "@@ -106,8 +106,8 @@ statements (int n)\n \n   /* Pointer assignment.  */\n \n-  gnu_sc_ptr = sve_sc_ptr;\n-  sve_sc_ptr = gnu_sc_ptr;\n+  gnu_sc_ptr = sve_sc_ptr; /* { dg-warning {incompatible pointer type} } */\n+  sve_sc_ptr = gnu_sc_ptr; /* { dg-warning {incompatible pointer type} } */\n \n   /* Pointer arithmetic.  */\n \n@@ -120,8 +120,8 @@ statements (int n)\n   sve_sc_ptr -= 0; /* { dg-error {arithmetic on pointer to SVE type 'svint8_t'} } */\n   sve_sc_ptr -= 1; /* { dg-error {arithmetic on pointer to SVE type 'svint8_t'} } */\n   sve_sc_ptr - sve_sc_ptr; /* { dg-error {arithmetic on pointer to SVE type 'svint8_t'} } */\n-  gnu_sc_ptr - sve_sc_ptr; /* { dg-error {arithmetic on pointer to SVE type 'svint8_t'} } */\n-  sve_sc_ptr - gnu_sc_ptr; /* { dg-error {arithmetic on pointer to SVE type 'svint8_t'} } */\n+  gnu_sc_ptr - sve_sc_ptr; /* { dg-error {invalid operands to binary -} } */\n+  sve_sc_ptr - gnu_sc_ptr; /* { dg-error {invalid operands to binary -} } */\n   sve_sc1 = sve_sc_ptr[0]; /* { dg-error {arithmetic on pointer to SVE type 'svint8_t'} } */\n   sve_sc1 = sve_sc_ptr[1]; /* { dg-error {arithmetic on pointer to SVE type 'svint8_t'} } */\n \n@@ -133,18 +133,18 @@ statements (int n)\n   sve_sc_ptr <= &sve_sc1;\n   sve_sc_ptr > &sve_sc1;\n   sve_sc_ptr >= &sve_sc1;\n-  gnu_sc_ptr == sve_sc_ptr;\n-  gnu_sc_ptr != sve_sc_ptr;\n-  gnu_sc_ptr < sve_sc_ptr;\n-  gnu_sc_ptr <= sve_sc_ptr;\n-  gnu_sc_ptr > sve_sc_ptr;\n-  gnu_sc_ptr >= sve_sc_ptr;\n-  sve_sc_ptr == gnu_sc_ptr;\n-  sve_sc_ptr != gnu_sc_ptr;\n-  sve_sc_ptr < gnu_sc_ptr;\n-  sve_sc_ptr <= gnu_sc_ptr;\n-  sve_sc_ptr > gnu_sc_ptr;\n-  sve_sc_ptr >= gnu_sc_ptr;\n+  gnu_sc_ptr == sve_sc_ptr; /* { dg-warning {comparison of distinct pointer types} } */\n+  gnu_sc_ptr != sve_sc_ptr; /* { dg-warning {comparison of distinct pointer types} } */\n+  gnu_sc_ptr < sve_sc_ptr; /* { dg-warning {comparison of distinct pointer types} } */\n+  gnu_sc_ptr <= sve_sc_ptr; /* { dg-warning {comparison of distinct pointer types} } */\n+  gnu_sc_ptr > sve_sc_ptr; /* { dg-warning {comparison of distinct pointer types} } */\n+  gnu_sc_ptr >= sve_sc_ptr; /* { dg-warning {comparison of distinct pointer types} } */\n+  sve_sc_ptr == gnu_sc_ptr; /* { dg-warning {comparison of distinct pointer types} } */\n+  sve_sc_ptr != gnu_sc_ptr; /* { dg-warning {comparison of distinct pointer types} } */\n+  sve_sc_ptr < gnu_sc_ptr; /* { dg-warning {comparison of distinct pointer types} } */\n+  sve_sc_ptr <= gnu_sc_ptr; /* { dg-warning {comparison of distinct pointer types} } */\n+  sve_sc_ptr > gnu_sc_ptr; /* { dg-warning {comparison of distinct pointer types} } */\n+  sve_sc_ptr >= gnu_sc_ptr; /* { dg-warning {comparison of distinct pointer types} } */\n \n   /* Conditional expressions.  */\n \n@@ -154,8 +154,8 @@ statements (int n)\n   0 ? 0 : sve_sc1; /* { dg-error {type mismatch in conditional expression} } */\n   0 ?: sve_sc1; /* { dg-error {type mismatch in conditional expression} } */\n   0 ? sve_sc_ptr : sve_sc_ptr;\n-  0 ? sve_sc_ptr : gnu_sc_ptr;\n-  0 ? gnu_sc_ptr : sve_sc_ptr;\n+  0 ? sve_sc_ptr : gnu_sc_ptr; /* { dg-warning {pointer type mismatch} } */\n+  0 ? gnu_sc_ptr : sve_sc_ptr; /* { dg-warning {pointer type mismatch} } */\n \n   /* Generic associations.  */\n "}, {"sha": "621666ce6c92a0e67ddfd5eeee630651f09eae42", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general/attributes_7.c", "status": "modified", "additions": 41, "deletions": 31, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cea5b8cb715e40e10174e6de405f26202fa3d6a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fattributes_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cea5b8cb715e40e10174e6de405f26202fa3d6a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fattributes_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fattributes_7.c?ref=4cea5b8cb715e40e10174e6de405f26202fa3d6a", "patch": "@@ -85,19 +85,19 @@ f (int c)\n \n   (void) (c ? fs8 : ss8); // { dg-error {type mismatch|different types} }\n   (void) (c ? fs8 : fs8);\n-  (void) (c ? fs8 : gs8); // { dg-error {type mismatch|different types} \"\" { xfail c++ } }\n+  (void) (c ? fs8 : gs8); // { dg-error {type mismatch|different types} }\n \n   (void) (c ? gs8 : ss8); // { dg-error {type mismatch|different types} }\n-  (void) (c ? gs8 : fs8); // { dg-error {type mismatch|different types} \"\" { xfail c++ } }\n+  (void) (c ? gs8 : fs8); // { dg-error {type mismatch|different types} }\n   (void) (c ? gs8 : gs8);\n \n   sb = fb;\n   fb = sb;\n \n   (void) (c ? sb : sb);\n-  (void) (c ? sb : fb); // { dg-error {type mismatch|different types} \"\" { xfail *-*-* } }\n+  (void) (c ? sb : fb); // { dg-error {type mismatch|different types} \"\" { xfail c } }\n \n-  (void) (c ? fb : sb); // { dg-error {type mismatch|different types} \"\" { xfail *-*-* } }\n+  (void) (c ? fb : sb); // { dg-error {type mismatch|different types} \"\" { xfail c } }\n   (void) (c ? fb : fb);\n }\n \n@@ -123,24 +123,22 @@ g (int c)\n   void *select __attribute__((unused));\n \n   diff = ss8 - ss8; // { dg-error {arithmetic on pointer to SVE type 'svint8_t'} }\n-  diff = ss8 - fs8; // { dg-error {invalid operands [^\\n]* binary[^\\n]*\\-} \"\" { xfail c } }\n-\t\t    // { dg-error {arithmetic on pointer to SVE type 'svint8_t'} \"bogus\" { target c } .-1 }\n-  diff = ss8 - gs8; // { dg-error {invalid operands [^\\n]* binary[^\\n]*\\-} \"\" { xfail c } }\n-\t\t    // { dg-error {arithmetic on pointer to SVE type 'svint8_t'} \"bogus\" { target c } .-1 }\n+  diff = ss8 - fs8; // { dg-error {invalid operands [^\\n]* binary[^\\n]*\\-} \"\" }\n+  diff = ss8 - gs8; // { dg-error {invalid operands [^\\n]* binary[^\\n]*\\-} \"\" }\n \n-  diff = fs8 - ss8; // { dg-error {invalid operands [^\\n]* binary[^\\n]*\\-} \"\" { xfail c } }\n-\t\t    // { dg-error {arithmetic on pointer to SVE type 'svint8_t'} \"bogus\" { target c } .-1 }\n+  diff = fs8 - ss8; // { dg-error {invalid operands [^\\n]* binary[^\\n]*\\-} \"\" }\n   diff = fs8 - fs8;\n-  diff = fs8 - gs8;\n+  diff = fs8 - gs8; // { dg-error {invalid operands [^\\n]* binary[^\\n]*\\-} \"\" }\n \n-  diff = gs8 - ss8; // { dg-error {invalid operands [^\\n]* binary[^\\n]*\\-} \"\" { xfail c } }\n-\t\t    // { dg-error {arithmetic on pointer to SVE type 'svint8_t'} \"bogus\" { target c } .-1 }\n-  diff = gs8 - fs8;\n+  diff = gs8 - ss8; // { dg-error {invalid operands [^\\n]* binary[^\\n]*\\-} \"\" }\n+  diff = gs8 - fs8; // { dg-error {invalid operands [^\\n]* binary[^\\n]*\\-} \"\" }\n   diff = gs8 - gs8;\n \n-  fs8 = ss8; // { dg-error {invalid conversion} \"\" { xfail c } }\n+  fs8 = ss8; // { dg-error {invalid conversion} \"\" { target c++ } }\n+\t     // { dg-warning {incompatible pointer type} \"c\" { target c } .-1 }\n   fs8 = fs8;\n-  fs8 = gs8;\n+  fs8 = gs8; // { dg-error {invalid conversion} \"\" { target c++ } }\n+\t     // { dg-warning {incompatible pointer type} \"c\" { target c } .-1 }\n \n   fs8 = su8; // { dg-error {cannot convert} \"c++\" { target c++ } }\n \t     // { dg-warning {incompatible pointer type} \"c\" { target c } .-1 }\n@@ -150,36 +148,48 @@ g (int c)\n \t     // { dg-warning {incompatible pointer type} \"c\" { target c } .-1 }\n \n   fs8 = ss16; // { dg-error {cannot convert} \"c++\" { target c++ } }\n-              // { dg-warning {incompatible pointer type} \"c\" { target c } .-1 }\n+\t      // { dg-warning {incompatible pointer type} \"c\" { target c } .-1 }\n   fs8 = fs16; // { dg-error {cannot convert} \"c++\" { target c++ } }\n-              // { dg-warning {incompatible pointer type} \"c\" { target c } .-1 }\n+\t      // { dg-warning {incompatible pointer type} \"c\" { target c } .-1 }\n   fs8 = gs16; // { dg-error {cannot convert} \"c++\" { target c++ } }\n-              // { dg-warning {incompatible pointer type} \"c\" { target c } .-1 }\n+\t      // { dg-warning {incompatible pointer type} \"c\" { target c } .-1 }\n \n   select = c ? ss8 : ss8;\n-  select = c ? ss8 : fs8; // { dg-error {distinct pointer types} \"\" { xfail c } }\n-  select = c ? ss8 : gs8; // { dg-error {distinct pointer types} \"\" { xfail c } }\n+  select = c ? ss8 : fs8; // { dg-error {distinct pointer types} \"\" { target c++ } }\n+\t\t\t  // { dg-warning {pointer type mismatch} \"c\" { target c } .-1 }\n+  select = c ? ss8 : gs8; // { dg-error {distinct pointer types} \"\" { target c++ } }\n+\t\t\t  // { dg-warning {pointer type mismatch} \"c\" { target c } .-1 }\n \n-  select = c ? fs8 : ss8; // { dg-error {distinct pointer types} \"\" { xfail c } }\n+  select = c ? fs8 : ss8; // { dg-error {distinct pointer types} \"\" { target c++ } }\n+\t\t\t  // { dg-warning {pointer type mismatch} \"c\" { target c } .-1 }\n   select = c ? fs8 : fs8;\n-  select = c ? fs8 : gs8; // { dg-error {distinct pointer types} \"\" { xfail *-*-* } }\n+  select = c ? fs8 : gs8; // { dg-error {distinct pointer types} \"\" { target c++ } }\n+\t\t\t  // { dg-warning {pointer type mismatch} \"c\" { target c } .-1 }\n \n-  select = c ? gs8 : ss8; // { dg-error {distinct pointer types} \"\" { xfail c } }\n-  select = c ? gs8 : fs8; // { dg-error {distinct pointer types} \"\" { xfail *-*-* } }\n+  select = c ? gs8 : ss8; // { dg-error {distinct pointer types} \"\" { target c++ } }\n+\t\t\t  // { dg-warning {pointer type mismatch} \"c\" { target c } .-1 }\n+  select = c ? gs8 : fs8; // { dg-error {distinct pointer types} \"\" { target c++ } }\n+\t\t\t  // { dg-warning {pointer type mismatch} \"c\" { target c } .-1 }\n   select = c ? gs8 : gs8;\n \n   diff = sb - sb; // { dg-error {arithmetic on pointer to SVE type 'svbool_t'} }\n-  diff = sb - fb; // { dg-error {arithmetic on pointer to SVE type 'svbool_t'} }\n+  diff = sb - fb; // { dg-error {invalid operands} \"\" { target c++ }  }\n+\t\t  // { dg-error {arithmetic on pointer to SVE type 'svbool_t'} \"c\" { target c } .-1 }\n \n-  diff = fb - sb; // { dg-error {arithmetic on pointer to SVE type 'svbool_t'} }\n+  diff = fb - sb; // { dg-error {invalid operands} \"\" { target c++ }  }\n+\t\t  // { dg-error {arithmetic on pointer to SVE type 'svbool_t'} \"c\" { target c } .-1 }\n   diff = fb - fb;\n \n-  sb = fb;\n-  fb = sb;\n+  sb = fb; // { dg-error {invalid conversion} \"\" { target c++ } }\n+\t   // { dg-warning {incompatible pointer type} \"c\" { target c xfail c } .-1 }\n+  fb = sb; // { dg-error {invalid conversion} \"\" { target c++ } }\n+\t   // { dg-warning {incompatible pointer type} \"c\" { target c xfail c } .-1 }\n \n   select = c ? sb : sb;\n-  select = c ? sb : fb; // { dg-error {type mismatch|different types} \"\" { xfail *-*-* } }\n+  select = c ? sb : fb; // { dg-error {distinct pointer types} \"\" { target c++ } }\n+\t\t\t// { dg-warning {pointer type mismatch} \"c\" { target c xfail c } .-1 }\n \n-  select = c ? fb : sb; // { dg-error {type mismatch|different types} \"\" { xfail *-*-* } }\n+  select = c ? fb : sb; // { dg-error {distinct pointer types} \"\" { target c++ } }\n+\t\t\t// { dg-warning {pointer type mismatch} \"c\" { target c xfail c } .-1 }\n   select = c ? fb : fb;\n }"}]}