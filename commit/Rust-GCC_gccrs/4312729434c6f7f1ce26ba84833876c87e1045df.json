{"sha": "4312729434c6f7f1ce26ba84833876c87e1045df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMxMjcyOTQzNGM2ZjdmMWNlMjZiYTg0ODMzODc2Yzg3ZTEwNDVkZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-10T11:23:17Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-10T11:23:17Z"}, "message": "(free_insn): New variable.\n\n(init_emit, restore_emit_status): Clear it.\n(gen_sequence): Store insn in free_insn when sequence length is 1.\n(make_insn_raw): Use free_insn if available and still in the rtl generation\nphase.\n\nFrom-SVN: r11508", "tree": {"sha": "fdeabbd8e923fd146bd2483387eff54d134696d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdeabbd8e923fd146bd2483387eff54d134696d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4312729434c6f7f1ce26ba84833876c87e1045df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4312729434c6f7f1ce26ba84833876c87e1045df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4312729434c6f7f1ce26ba84833876c87e1045df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4312729434c6f7f1ce26ba84833876c87e1045df/comments", "author": null, "committer": null, "parents": [{"sha": "935ddcf539e0aecc2b6da58f5b70d87d1ef43de8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/935ddcf539e0aecc2b6da58f5b70d87d1ef43de8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/935ddcf539e0aecc2b6da58f5b70d87d1ef43de8"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "66c24366c328230e2ffd225d296154ce04e9104d", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4312729434c6f7f1ce26ba84833876c87e1045df/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4312729434c6f7f1ce26ba84833876c87e1045df/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=4312729434c6f7f1ce26ba84833876c87e1045df", "patch": "@@ -249,6 +249,9 @@ struct sequence_stack *sequence_stack;\n static struct sequence_stack *sequence_element_free_list;\n static rtx sequence_result[SEQUENCE_RESULT_SIZE];\n \n+/* During RTL generation, we also keep a list of free INSN rtl codes. */\n+static rtx free_insn;\n+\n extern int rtx_equal_function_value_matters;\n \n /* Filename and line number of last line-number note,\n@@ -1494,6 +1497,8 @@ restore_emit_status (p)\n   sequence_element_free_list = 0;\n   for (i = 0; i < SEQUENCE_RESULT_SIZE; i++)\n     sequence_result[i] = 0;\n+\n+  free_insn = 0;\n }\n \f\n /* Go through all the RTL insn bodies and copy any invalid shared structure.\n@@ -2141,9 +2146,17 @@ make_insn_raw (pattern)\n {\n   register rtx insn;\n \n-  insn = rtx_alloc (INSN);\n-  INSN_UID (insn) = cur_insn_uid++;\n+  /* If in RTL generation phase, see if FREE_INSN can be used.  */\n+  if (free_insn != 0 && rtx_equal_function_value_matters)\n+    {\n+      insn = free_insn;\n+      free_insn = NEXT_INSN (free_insn);\n+      PUT_CODE (insn, INSN);\n+    }\n+  else\n+    insn = rtx_alloc (INSN);\n \n+  INSN_UID (insn) = cur_insn_uid++;\n   PATTERN (insn) = pattern;\n   INSN_CODE (insn) = -1;\n   LOG_LINKS (insn) = NULL;\n@@ -3115,7 +3128,11 @@ gen_sequence ()\n \t  /* Don't discard the call usage field.  */\n \t  || (GET_CODE (first_insn) == CALL_INSN\n \t      && CALL_INSN_FUNCTION_USAGE (first_insn) == NULL_RTX)))\n-    return PATTERN (first_insn);\n+    {\n+      NEXT_INSN (first_insn) = free_insn;\n+      free_insn = first_insn;\n+      return PATTERN (first_insn);\n+    }\n \n   /* Put them in a vector.  See if we already have a SEQUENCE of the\n      appropriate length around.  */\n@@ -3160,6 +3177,7 @@ init_emit ()\n   sequence_element_free_list = 0;\n   for (i = 0; i < SEQUENCE_RESULT_SIZE; i++)\n     sequence_result[i] = 0;\n+  free_insn = 0;\n \n   /* Init the tables that describe all the pseudo regs.  */\n "}]}