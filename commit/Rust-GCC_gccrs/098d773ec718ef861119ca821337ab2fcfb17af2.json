{"sha": "098d773ec718ef861119ca821337ab2fcfb17af2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk4ZDc3M2VjNzE4ZWY4NjExMTljYTgyMTMzN2FiMmZjZmIxN2FmMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-10-05T23:25:51Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-10-05T23:25:51Z"}, "message": "compiler: drop special handling of unexported func/var assembler names\n    \n    For example, for the package math/big, we used to generate unexported\n    names as `big.trim` and exported names as `math_big.NewInt`.  After\n    this change we will use `math_big` consistently.\n    \n    Reviewed-on: https://go-review.googlesource.com/68651\n\nFrom-SVN: r253468", "tree": {"sha": "7bca7e8c88034ca16055d658bbfa742d07fbfde3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bca7e8c88034ca16055d658bbfa742d07fbfde3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/098d773ec718ef861119ca821337ab2fcfb17af2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/098d773ec718ef861119ca821337ab2fcfb17af2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/098d773ec718ef861119ca821337ab2fcfb17af2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/098d773ec718ef861119ca821337ab2fcfb17af2/comments", "author": null, "committer": null, "parents": [{"sha": "b8888a0fe4a94e333a3add0804330ad337c1fd99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8888a0fe4a94e333a3add0804330ad337c1fd99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8888a0fe4a94e333a3add0804330ad337c1fd99"}], "stats": {"total": 59, "additions": 21, "deletions": 38}, "files": [{"sha": "acb1d9584a31affaba78e2aad10c39ec366101cb", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/098d773ec718ef861119ca821337ab2fcfb17af2/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/098d773ec718ef861119ca821337ab2fcfb17af2/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=098d773ec718ef861119ca821337ab2fcfb17af2", "patch": "@@ -1,4 +1,4 @@\n-048914caa26b34eebabd0423ed48ee3ac34c919c\n+adc6eb826f156d0980f0ad9f9efc5c919ec4905e\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "c986963f1b2a38dae51650b31f7237569e709048", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/098d773ec718ef861119ca821337ab2fcfb17af2/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/098d773ec718ef861119ca821337ab2fcfb17af2/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=098d773ec718ef861119ca821337ab2fcfb17af2", "patch": "@@ -5343,8 +5343,9 @@ Function::get_or_make_decl(Gogo* gogo, Named_object* no)\n {\n   if (this->fndecl_ == NULL)\n     {\n-      std::string asm_name;\n       bool is_visible = false;\n+      bool is_init_fn = false;\n+      Type* rtype = NULL;\n       if (no->package() != NULL)\n         ;\n       else if (this->enclosing_ != NULL || Gogo::is_thunk(no))\n@@ -5355,7 +5356,7 @@ Function::get_or_make_decl(Gogo* gogo, Named_object* no)\n       else if (no->name() == gogo->get_init_fn_name())\n \t{\n \t  is_visible = true;\n-\t  asm_name = no->name();\n+\t  is_init_fn = true;\n \t}\n       else if (Gogo::unpack_hidden_name(no->name()) == \"main\"\n                && gogo->is_main_package())\n@@ -5368,17 +5369,29 @@ Function::get_or_make_decl(Gogo* gogo, Named_object* no)\n         {\n \t  if (!this->is_unnamed_type_stub_method_)\n \t    is_visible = true;\n-\t  Type* rtype = NULL;\n \t  if (this->type_->is_method())\n \t    rtype = this->type_->receiver()->type();\n-\t  asm_name = gogo->function_asm_name(no->name(), NULL, rtype);\n         }\n \n+      std::string asm_name;\n       if (!this->asm_name_.empty())\n \t{\n \t  asm_name = this->asm_name_;\n+\n+\t  // If an assembler name is explicitly specified, there must\n+\t  // be some reason to refer to the symbol from a different\n+\t  // object file.\n \t  is_visible = true;\n \t}\n+      else if (is_init_fn)\n+\t{\n+\t  // These names appear in the export data and are used\n+\t  // directly in the assembler code.  If we change this here\n+\t  // we need to change Gogo::init_imports.\n+\t  asm_name = no->name();\n+\t}\n+      else\n+\tasm_name = gogo->function_asm_name(no->name(), NULL, rtype);\n \n       // If a function calls the predeclared recover function, we\n       // can't inline it, because recover behaves differently in a\n@@ -5409,10 +5422,6 @@ Function::get_or_make_decl(Gogo* gogo, Named_object* no)\n       if ((this->pragmas_ & GOPRAGMA_NOSPLIT) != 0)\n \tdisable_split_stack = true;\n \n-      // Encode name if asm_name not already set at this point\n-      if (asm_name.empty())\n-\tasm_name = gogo->unexported_function_asm_name(no->name());\n-\n       // This should go into a unique section if that has been\n       // requested elsewhere, or if this is a nointerface function.\n       // We want to put a nointerface function into a unique section"}, {"sha": "345a15df570f67034975c2a6a11ce4fc879b65fd", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/098d773ec718ef861119ca821337ab2fcfb17af2/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/098d773ec718ef861119ca821337ab2fcfb17af2/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=098d773ec718ef861119ca821337ab2fcfb17af2", "patch": "@@ -767,10 +767,6 @@ class Gogo\n   function_asm_name(const std::string& go_name, const Package*,\n \t\t    const Type* receiver);\n \n-  // Return the assembler name to use for an unexported function.\n-  std::string\n-  unexported_function_asm_name(const std::string& go_name);\n-\n   // Return the name to use for a function descriptor.\n   std::string\n   function_descriptor_name(Named_object*);"}, {"sha": "20f7c57ee499cd3465650e0afdcf68e3b7b5e55b", "filename": "gcc/go/gofrontend/names.cc", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/098d773ec718ef861119ca821337ab2fcfb17af2/gcc%2Fgo%2Fgofrontend%2Fnames.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/098d773ec718ef861119ca821337ab2fcfb17af2/gcc%2Fgo%2Fgofrontend%2Fnames.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fnames.cc?ref=098d773ec718ef861119ca821337ab2fcfb17af2", "patch": "@@ -54,19 +54,6 @@ Gogo::function_asm_name(const std::string& go_name, const Package* package,\n   return go_encode_id(ret);\n }\n \n-// Return the assembler name to use for an unexported function.\n-// FIXME: This should probably be removed and the callers changed to\n-// simply call function_name.\n-\n-std::string\n-Gogo::unexported_function_asm_name(const std::string& go_name)\n-{\n-  std::string ret = this->package_name();\n-  ret.append(1, '.');\n-  ret.append(Gogo::unpack_hidden_name(go_name));\n-  return go_encode_id(ret);\n-}\n-\n // Return the name to use for a function descriptor.  These symbols\n // are globally visible.\n \n@@ -171,18 +158,9 @@ Gogo::specific_type_function_names(const Type* type, const Named_type* name,\n std::string\n Gogo::global_var_asm_name(const std::string& go_name, const Package* package)\n {\n-  // FIXME: Using package_name for hidden names and pkgpath_symbol for\n-  // non-hidden names doesn't make sense, but it dates back to the\n-  // first public commit of the gofrontend repo.\n-  std::string ret;\n-  if (Gogo::is_hidden_name(go_name))\n-    ret = (package != NULL\n-\t   ? package->package_name()\n-\t   : this->package_name());\n-  else\n-    ret = (package != NULL\n-\t   ? package->pkgpath_symbol()\n-\t   : this->pkgpath_symbol());\n+  std::string ret = (package != NULL\n+\t\t     ? package->pkgpath_symbol()\n+\t\t     : this->pkgpath_symbol());\n   ret.push_back('.');\n   ret.append(Gogo::unpack_hidden_name(go_name));\n   return go_encode_id(ret);"}]}