{"sha": "49d1cc6cdaf18842be0bda9800a089874d4e141a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDlkMWNjNmNkYWYxODg0MmJlMGJkYTk4MDBhMDg5ODc0ZDRlMTQxYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-26T14:50:53Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-26T14:50:53Z"}, "message": "(fullword move): Call output_move_simode_const.\n\nFrom-SVN: r11620", "tree": {"sha": "c88664c39f84dea211c7e81cd87b4aac3dcd49e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c88664c39f84dea211c7e81cd87b4aac3dcd49e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49d1cc6cdaf18842be0bda9800a089874d4e141a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49d1cc6cdaf18842be0bda9800a089874d4e141a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49d1cc6cdaf18842be0bda9800a089874d4e141a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49d1cc6cdaf18842be0bda9800a089874d4e141a/comments", "author": null, "committer": null, "parents": [{"sha": "02ed0c07c543650bbcee9842fc5ed0a299f04d07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ed0c07c543650bbcee9842fc5ed0a299f04d07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02ed0c07c543650bbcee9842fc5ed0a299f04d07"}], "stats": {"total": 22, "additions": 1, "deletions": 21}, "files": [{"sha": "ac6c87e0126fbba2a1d67776ca6caa6f8876d002", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d1cc6cdaf18842be0bda9800a089874d4e141a/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d1cc6cdaf18842be0bda9800a089874d4e141a/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=49d1cc6cdaf18842be0bda9800a089874d4e141a", "patch": "@@ -824,27 +824,7 @@\n   if (FPA_REG_P (operands[1]) || FPA_REG_P (operands[0]))\n     return \\\"fpmove%.l %x1,%x0\\\";\n   if (GET_CODE (operands[1]) == CONST_INT)\n-    {\n-      if (operands[1] == const0_rtx\n-\t  && (DATA_REG_P (operands[0])\n-\t      || GET_CODE (operands[0]) == MEM)\n-\t  /* clr insns on 68000 read before writing.\n-\t     This isn't so on the 68010, but we have no alternative for it.  */\n-\t  && (TARGET_68020\n-\t      || !(GET_CODE (operands[0]) == MEM\n-\t\t   && MEM_VOLATILE_P (operands[0]))))\n-\treturn \\\"clr%.l %0\\\";\n-      else if (DATA_REG_P (operands[0]))\n-\treturn output_move_const_into_data_reg (operands);\n-      else if (ADDRESS_REG_P (operands[0])\n-\t       && INTVAL (operands[1]) < 0x8000\n-\t       && INTVAL (operands[1]) >= -0x8000)\n-\treturn \\\"move%.w %1,%0\\\";\n-      else if (push_operand (operands[0], SImode)\n-\t       && INTVAL (operands[1]) < 0x8000\n-\t       && INTVAL (operands[1]) >= -0x8000)\n-        return \\\"pea %a1\\\";\n-    }\n+    return output_move_simode_const (operands);\n   else if ((GET_CODE (operands[1]) == SYMBOL_REF\n \t    || GET_CODE (operands[1]) == CONST)\n \t   && push_operand (operands[0], SImode))"}]}