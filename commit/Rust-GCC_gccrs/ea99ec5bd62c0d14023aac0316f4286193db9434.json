{"sha": "ea99ec5bd62c0d14023aac0316f4286193db9434", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE5OWVjNWJkNjJjMGQxNDAyM2FhYzAzMTZmNDI4NjE5M2RiOTQzNA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-01-07T10:17:52Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-01-07T10:17:52Z"}, "message": "PR 78534, 83704 Handle large formatted I/O\n\nIn order to handle large characters when doing formatted I/O, use\nsize_t and ptrdiff_t for lengths.  Compared to the previous patch,\nbased on discussions on IRC use size_t for sizes that don't need to be\nnegative rather than ptrdiff_t everywhere.\n\nRegtested on x86_64-pc-linux-gnu, approved as part of the PR 78534\napproval, committed to trunk.\n\nlibgfortran/ChangeLog:\n\n2018-01-07  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/78534\n\tPR fortran/83704\n\t* io/fbuf.c (fbuf_init): Use size_t instead of int for length.\n\t(fbuf_debug): Convert debug output to unsigned long.\n\t(fbuf_reset): Use ptrdiff_t for return value.\n\t(fbuf_alloc): Use size_t for length argument.\n\t(fbuf_flush): Handle large buffers.\n\t(fbuf_flush_list): Likewise.\n\t(fbuf_seek): Use ptrdiff_t for offset and return value.\n\t(fbuf_read): Use size_t for length argument.\n\t(fbuf_getc_refill): Use size_t to match fbuf_read.\n\t* io/fbuf.h (struct fbuf): Use size_t for lengths.\n\t(fbuf_init): Use size_t instead of int for length.\n\t(fbuf_reset): Use ptrdiff_t for return value.\n\t(fbuf_alloc): Use size_t for length argument.\n\t(fbuf_seek): Use ptrdiff_t for offset and return value.\n\t(fbuf_read): Use size_t for length argument.\n\t* io/io.h (read_block_form): Likewise.\n\t(read_block_form4): Likewise.\n\t(write_block): Likewise.\n\t(read_a): Likewise.\n\t(read_a_char4): Likewise.\n\t(read_x): Likewise.\n\t(write_a): Likewise.\n\t(write_a_char4): Likewise.\n\t* io/list_read.c (list_formatted_read_scalar): Use size_t to\n\thandle large buffers.\n\t* io/read.c (read_l): Likewise.\n\t(read_utf8): Likewise.\n\t(read_utf8_char1): Likewise.\n\t(read_default_char1): Likewise.\n\t(read_utf8_char4): Likewise.\n\t(read_default_char4): Likewise.\n\t(read_a): Likewise.\n\t(read_a_char4): Likewise.\n\t(eat_leading_spaces): Likewise.\n\t(next_char): Likewise.\n\t(read_decimal): Likewise.\n\t(read_radix): Likewise.\n\t(read_f): Likewise.\n\t(read_x): Likewise.\n\t* io/transfer.c (read_sf_internal): Likewise.\n\t(read_sf): Likewise.\n\t(read_block_form): Likewise.\n\t(read_block_form4): Likewise.\n\t(write_block): Likewise.\n\t(formatted_transfer_scalar_write): Likewise.\n\t(next_record_w): Likewise.\n\t* io/unix.c (mem_alloc_r): Likewise.\n\t(mem_alloc_r4): Likewise.\n\t(mem_alloc_w): Likewise.\n\t(mem_alloc_w4): Likewise.\n\t(mem_read): Likewise.\n\t(mem_read4): Likewise.\n\t(mem_write): Likewise.\n\t(mem_write4): Likewise.\n\t(open_internal): Likewise.\n\t(open_internal4): Likewise.\n\t* io/unix.h (open_internal): Likewise.\n\t(open_internal4): Likewise.\n\t(mem_alloc_w): Likewise.\n\t(mem_alloc_r): Likewise.\n\t(mem_alloc_w4): Likewise.\n\t(mem_alloc_r4): Likewise.\n\t* io/write.c (write_check_cc): Likewise.\n\t(write_cc): Likewise.\n\t(write_a): Likewise.\n\t(write_a_char4): Likewise.\n\nFrom-SVN: r256322", "tree": {"sha": "36694f3e28c6ca161e719f0dc4e69779533ff1fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36694f3e28c6ca161e719f0dc4e69779533ff1fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea99ec5bd62c0d14023aac0316f4286193db9434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea99ec5bd62c0d14023aac0316f4286193db9434", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea99ec5bd62c0d14023aac0316f4286193db9434", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea99ec5bd62c0d14023aac0316f4286193db9434/comments", "author": null, "committer": null, "parents": [{"sha": "c7c9468a6c1e21bb140f62d97d427352d90556bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7c9468a6c1e21bb140f62d97d427352d90556bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7c9468a6c1e21bb140f62d97d427352d90556bc"}], "stats": {"total": 372, "additions": 224, "deletions": 148}, "files": [{"sha": "64f671b02e891a1a4705706678f3b4c98059c8f5", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea99ec5bd62c0d14023aac0316f4286193db9434/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea99ec5bd62c0d14023aac0316f4286193db9434/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=ea99ec5bd62c0d14023aac0316f4286193db9434", "patch": "@@ -1,3 +1,74 @@\n+2018-01-07  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/78534\n+\tPR fortran/83704\n+\t* io/fbuf.c (fbuf_init): Use size_t instead of int for length.\n+\t(fbuf_debug): Convert debug output to unsigned long.\n+\t(fbuf_reset): Use ptrdiff_t for return value.\n+\t(fbuf_alloc): Use size_t for length argument.\n+\t(fbuf_flush): Handle large buffers.\n+\t(fbuf_flush_list): Likewise.\n+\t(fbuf_seek): Use ptrdiff_t for offset and return value.\n+\t(fbuf_read): Use size_t for length argument.\n+\t(fbuf_getc_refill): Use size_t to match fbuf_read.\n+\t* io/fbuf.h (struct fbuf): Use size_t for lengths.\n+\t(fbuf_init): Use size_t instead of int for length.\n+\t(fbuf_reset): Use ptrdiff_t for return value.\n+\t(fbuf_alloc): Use size_t for length argument.\n+\t(fbuf_seek): Use ptrdiff_t for offset and return value.\n+\t(fbuf_read): Use size_t for length argument.\n+\t* io/io.h (read_block_form): Likewise.\n+\t(read_block_form4): Likewise.\n+\t(write_block): Likewise.\n+\t(read_a): Likewise.\n+\t(read_a_char4): Likewise.\n+\t(read_x): Likewise.\n+\t(write_a): Likewise.\n+\t(write_a_char4): Likewise.\n+\t* io/list_read.c (list_formatted_read_scalar): Use size_t to\n+\thandle large buffers.\n+\t* io/read.c (read_l): Likewise.\n+\t(read_utf8): Likewise.\n+\t(read_utf8_char1): Likewise.\n+\t(read_default_char1): Likewise.\n+\t(read_utf8_char4): Likewise.\n+\t(read_default_char4): Likewise.\n+\t(read_a): Likewise.\n+\t(read_a_char4): Likewise.\n+\t(eat_leading_spaces): Likewise.\n+\t(next_char): Likewise.\n+\t(read_decimal): Likewise.\n+\t(read_radix): Likewise.\n+\t(read_f): Likewise.\n+\t(read_x): Likewise.\n+\t* io/transfer.c (read_sf_internal): Likewise.\n+\t(read_sf): Likewise.\n+\t(read_block_form): Likewise.\n+\t(read_block_form4): Likewise.\n+\t(write_block): Likewise.\n+\t(formatted_transfer_scalar_write): Likewise.\n+\t(next_record_w): Likewise.\n+\t* io/unix.c (mem_alloc_r): Likewise.\n+\t(mem_alloc_r4): Likewise.\n+\t(mem_alloc_w): Likewise.\n+\t(mem_alloc_w4): Likewise.\n+\t(mem_read): Likewise.\n+\t(mem_read4): Likewise.\n+\t(mem_write): Likewise.\n+\t(mem_write4): Likewise.\n+\t(open_internal): Likewise.\n+\t(open_internal4): Likewise.\n+\t* io/unix.h (open_internal): Likewise.\n+\t(open_internal4): Likewise.\n+\t(mem_alloc_w): Likewise.\n+\t(mem_alloc_r): Likewise.\n+\t(mem_alloc_w4): Likewise.\n+\t(mem_alloc_r4): Likewise.\n+\t* io/write.c (write_check_cc): Likewise.\n+\t(write_cc): Likewise.\n+\t(write_a): Likewise.\n+\t(write_a_char4): Likewise.\n+\n 2018-01-06  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* io/write.c (namelist_write): Remove unused variable \"i\"."}, {"sha": "7ff9f09823196bc50f7b7ea9fcd367c4ab71fa8a", "filename": "libgfortran/io/fbuf.c", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea99ec5bd62c0d14023aac0316f4286193db9434/libgfortran%2Fio%2Ffbuf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea99ec5bd62c0d14023aac0316f4286193db9434/libgfortran%2Fio%2Ffbuf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ffbuf.c?ref=ea99ec5bd62c0d14023aac0316f4286193db9434", "patch": "@@ -33,7 +33,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n \n void\n-fbuf_init (gfc_unit *u, int len)\n+fbuf_init (gfc_unit *u, size_t len)\n {\n   if (len == 0)\n     len = 512;\t\t\t/* Default size.  */\n@@ -64,9 +64,9 @@ fbuf_debug (gfc_unit *u, const char *format, ...)\n   va_start(args, format);\n   vfprintf(stderr, format, args);\n   va_end(args);\n-  fprintf (stderr, \"fbuf_debug pos: %d, act: %d, buf: ''\", \n-           u->fbuf->pos, u->fbuf->act);\n-  for (int ii = 0; ii < u->fbuf->act; ii++)\n+  fprintf (stderr, \"fbuf_debug pos: %lu, act: %lu, buf: ''\",\n+           (long unsigned) u->fbuf->pos, (long unsigned) u->fbuf->act);\n+  for (size_t ii = 0; ii < u->fbuf->act; ii++)\n     {\n       putc (u->fbuf->buf[ii], stderr);\n     }\n@@ -84,10 +84,10 @@ fbuf_debug (gfc_unit *u __attribute__ ((unused)),\n    underlying device.  Returns how much the physical position was\n    modified.  */\n \n-int\n+ptrdiff_t\n fbuf_reset (gfc_unit *u)\n {\n-  int seekval = 0;\n+  ptrdiff_t seekval = 0;\n \n   if (!u->fbuf)\n     return 0;\n@@ -99,7 +99,7 @@ fbuf_reset (gfc_unit *u)\n   if (u->mode == READING && u->fbuf->act > u->fbuf->pos)\n     {\n       seekval = - (u->fbuf->act - u->fbuf->pos);\n-      fbuf_debug (u, \"fbuf_reset seekval %d, \", seekval);\n+      fbuf_debug (u, \"fbuf_reset seekval %ld, \", (long) seekval);\n     }\n   u->fbuf->act = u->fbuf->pos = 0;\n   return seekval;\n@@ -111,11 +111,11 @@ fbuf_reset (gfc_unit *u)\n    reallocating if necessary.  */\n \n char *\n-fbuf_alloc (gfc_unit *u, int len)\n+fbuf_alloc (gfc_unit *u, size_t len)\n {\n-  int newlen;\n+  size_t newlen;\n   char *dest;\n-  fbuf_debug (u, \"fbuf_alloc len %d, \", len);\n+  fbuf_debug (u, \"fbuf_alloc len %lu, \", (long unsigned) len);\n   if (u->fbuf->pos + len > u->fbuf->len)\n     {\n       /* Round up to nearest multiple of the current buffer length.  */\n@@ -138,8 +138,6 @@ fbuf_alloc (gfc_unit *u, int len)\n int\n fbuf_flush (gfc_unit *u, unit_mode mode)\n {\n-  int nwritten;\n-\n   if (!u->fbuf)\n     return 0;\n \n@@ -149,7 +147,7 @@ fbuf_flush (gfc_unit *u, unit_mode mode)\n     {\n       if (u->fbuf->pos > 0)\n \t{\n-\t  nwritten = swrite (u->s, u->fbuf->buf, u->fbuf->pos);\n+\t  ptrdiff_t nwritten = swrite (u->s, u->fbuf->buf, u->fbuf->pos);\n \t  if (nwritten < 0)\n \t    return -1;\n \t}\n@@ -177,8 +175,6 @@ fbuf_flush (gfc_unit *u, unit_mode mode)\n int\n fbuf_flush_list (gfc_unit *u, unit_mode mode)\n {\n-  int nwritten;\n-\n   if (!u->fbuf)\n     return 0;\n \n@@ -189,7 +185,7 @@ fbuf_flush_list (gfc_unit *u, unit_mode mode)\n \n   if (mode == LIST_WRITING)\n     {\n-      nwritten = swrite (u->s, u->fbuf->buf, u->fbuf->pos);\n+      ptrdiff_t nwritten = swrite (u->s, u->fbuf->buf, u->fbuf->pos);\n       if (nwritten < 0)\n \treturn -1;\n     }\n@@ -206,8 +202,8 @@ fbuf_flush_list (gfc_unit *u, unit_mode mode)\n }\n \n \n-int\n-fbuf_seek (gfc_unit *u, int off, int whence)\n+ptrdiff_t\n+fbuf_seek (gfc_unit *u, ptrdiff_t off, int whence)\n {\n   if (!u->fbuf)\n     return -1;\n@@ -226,15 +222,15 @@ fbuf_seek (gfc_unit *u, int off, int whence)\n       return -1;\n     }\n \n-  fbuf_debug (u, \"fbuf_seek, off %d \", off);\n+  fbuf_debug (u, \"fbuf_seek, off %ld \", (long) off);\n   /* The start of the buffer is always equal to the left tab\n      limit. Moving to the left past the buffer is illegal in C and\n      would also imply moving past the left tab limit, which is never\n      allowed in Fortran. Similarly, seeking past the end of the buffer\n      is not possible, in that case the user must make sure to allocate\n      space with fbuf_alloc().  So return error if that is\n      attempted.  */\n-  if (off < 0 || off > u->fbuf->act)\n+  if (off < 0 || off > (ptrdiff_t) u->fbuf->act)\n     return -1;\n   u->fbuf->pos = off;\n   return off;\n@@ -248,21 +244,22 @@ fbuf_seek (gfc_unit *u, int off, int whence)\n    of bytes actually processed. */\n \n char *\n-fbuf_read (gfc_unit *u, int *len)\n+fbuf_read (gfc_unit *u, size_t *len)\n {\n   char *ptr;\n-  int oldact, oldpos;\n-  int readlen = 0;\n+  size_t oldact, oldpos;\n+  ptrdiff_t readlen = 0;\n \n-  fbuf_debug (u, \"fbuf_read, len %d: \", *len);\n+  fbuf_debug (u, \"fbuf_read, len %lu: \", (unsigned long) *len);\n   oldact = u->fbuf->act;\n   oldpos = u->fbuf->pos;\n   ptr = fbuf_alloc (u, *len);\n   u->fbuf->pos = oldpos;\n   if (oldpos + *len > oldact)\n     {\n-      fbuf_debug (u, \"reading %d bytes starting at %d \", \n-                  oldpos + *len - oldact, oldact);\n+      fbuf_debug (u, \"reading %lu bytes starting at %lu \",\n+                  (long unsigned) oldpos + *len - oldact,\n+\t\t  (long unsigned) oldact);\n       readlen = sread (u->s, u->fbuf->buf + oldact, oldpos + *len - oldact);\n       if (readlen < 0)\n \treturn NULL;\n@@ -281,7 +278,6 @@ fbuf_read (gfc_unit *u, int *len)\n int\n fbuf_getc_refill (gfc_unit *u)\n {\n-  int nread;\n   char *p;\n \n   fbuf_debug (u, \"fbuf_getc_refill \");\n@@ -290,7 +286,7 @@ fbuf_getc_refill (gfc_unit *u)\n      between not needing to call the read() syscall all the time and\n      not having to memmove unnecessary stuff when switching to the\n      next record.  */\n-  nread = 80;\n+  size_t nread = 80;\n \n   p = fbuf_read (u, &nread);\n "}, {"sha": "71b6d0fcccf1f79773311566fd263fc7f437e155", "filename": "libgfortran/io/fbuf.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea99ec5bd62c0d14023aac0316f4286193db9434/libgfortran%2Fio%2Ffbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea99ec5bd62c0d14023aac0316f4286193db9434/libgfortran%2Fio%2Ffbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ffbuf.h?ref=ea99ec5bd62c0d14023aac0316f4286193db9434", "patch": "@@ -39,21 +39,21 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n struct fbuf\n {\n   char *buf;\t\t\t/* Start of buffer.  */\n-  int len;\t\t\t/* Length of buffer.  */\n-  int act;\t\t\t/* Active bytes in buffer.  */\n-  int pos;\t\t\t/* Current position in buffer.  */\n+  size_t len;\t\t\t/* Length of buffer.  */\n+  size_t act;\t\t\t/* Active bytes in buffer.  */\n+  size_t pos;\t\t\t/* Current position in buffer.  */\n };\n \n-extern void fbuf_init (gfc_unit *, int);\n+extern void fbuf_init (gfc_unit *, size_t);\n internal_proto(fbuf_init);\n \n extern void fbuf_destroy (gfc_unit *);\n internal_proto(fbuf_destroy);\n \n-extern int fbuf_reset (gfc_unit *);\n+extern ptrdiff_t fbuf_reset (gfc_unit *);\n internal_proto(fbuf_reset);\n \n-extern char *fbuf_alloc (gfc_unit *, int);\n+extern char *fbuf_alloc (gfc_unit *, size_t);\n internal_proto(fbuf_alloc);\n \n extern int fbuf_flush (gfc_unit *, unit_mode);\n@@ -62,10 +62,10 @@ internal_proto(fbuf_flush);\n extern int fbuf_flush_list (gfc_unit *, unit_mode);\n internal_proto(fbuf_flush_list);\n \n-extern int fbuf_seek (gfc_unit *, int, int);\n+extern ptrdiff_t fbuf_seek (gfc_unit *, ptrdiff_t, int);\n internal_proto(fbuf_seek);\n \n-extern char *fbuf_read (gfc_unit *, int *);\n+extern char *fbuf_read (gfc_unit *, size_t *);\n internal_proto(fbuf_read);\n \n /* Never call this function, only use fbuf_getc().  */"}, {"sha": "3c2a2cae38a3d1b5fe613626b3bac61dea985fb5", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea99ec5bd62c0d14023aac0316f4286193db9434/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea99ec5bd62c0d14023aac0316f4286193db9434/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=ea99ec5bd62c0d14023aac0316f4286193db9434", "patch": "@@ -794,13 +794,13 @@ internal_proto(new_unit);\n extern const char *type_name (bt);\n internal_proto(type_name);\n \n-extern void * read_block_form (st_parameter_dt *, int *);\n+extern void * read_block_form (st_parameter_dt *, size_t *);\n internal_proto(read_block_form);\n \n-extern void * read_block_form4 (st_parameter_dt *, int *);\n+extern void * read_block_form4 (st_parameter_dt *, size_t *);\n internal_proto(read_block_form4);\n \n-extern void *write_block (st_parameter_dt *, int);\n+extern void *write_block (st_parameter_dt *, size_t);\n internal_proto(write_block);\n \n extern gfc_offset next_array_record (st_parameter_dt *, array_loop_spec *,\n@@ -834,10 +834,10 @@ internal_proto(convert_real);\n extern int convert_infnan (st_parameter_dt *, void *, const char *, int);\n internal_proto(convert_infnan);\n \n-extern void read_a (st_parameter_dt *, const fnode *, char *, int);\n+extern void read_a (st_parameter_dt *, const fnode *, char *, size_t);\n internal_proto(read_a);\n \n-extern void read_a_char4 (st_parameter_dt *, const fnode *, char *, int);\n+extern void read_a_char4 (st_parameter_dt *, const fnode *, char *, size_t);\n internal_proto(read_a);\n \n extern void read_f (st_parameter_dt *, const fnode *, char *, int);\n@@ -846,7 +846,7 @@ internal_proto(read_f);\n extern void read_l (st_parameter_dt *, const fnode *, char *, int);\n internal_proto(read_l);\n \n-extern void read_x (st_parameter_dt *, int);\n+extern void read_x (st_parameter_dt *, size_t);\n internal_proto(read_x);\n \n extern void read_radix (st_parameter_dt *, const fnode *, char *, int, int);\n@@ -878,10 +878,10 @@ internal_proto(namelist_write);\n \n /* write.c */\n \n-extern void write_a (st_parameter_dt *, const fnode *, const char *, int);\n+extern void write_a (st_parameter_dt *, const fnode *, const char *, size_t);\n internal_proto(write_a);\n \n-extern void write_a_char4 (st_parameter_dt *, const fnode *, const char *, int);\n+extern void write_a_char4 (st_parameter_dt *, const fnode *, const char *, size_t);\n internal_proto(write_a_char4);\n \n extern void write_b (st_parameter_dt *, const fnode *, const char *, int);"}, {"sha": "fbd7dc27edff3420e1cda20dbf886149376ee70d", "filename": "libgfortran/io/list_read.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea99ec5bd62c0d14023aac0316f4286193db9434/libgfortran%2Fio%2Flist_read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea99ec5bd62c0d14023aac0316f4286193db9434/libgfortran%2Fio%2Flist_read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flist_read.c?ref=ea99ec5bd62c0d14023aac0316f4286193db9434", "patch": "@@ -2100,7 +2100,8 @@ list_formatted_read_scalar (st_parameter_dt *dtp, bt type, void *p,\n \t\t\t    int kind, size_t size)\n {\n   gfc_char4_t *q, *r;\n-  int c, i, m;\n+  size_t m;\n+  int c;\n   int err = 0;\n \n   /* Set the next_char and push_char worker functions.  */\n@@ -2255,35 +2256,35 @@ list_formatted_read_scalar (st_parameter_dt *dtp, bt type, void *p,\n     case BT_CHARACTER:\n       if (dtp->u.p.saved_string)\n \t{\n-\t  m = ((int) size < dtp->u.p.saved_used)\n-\t      ? (int) size : dtp->u.p.saved_used;\n+\t  m = (size < (size_t) dtp->u.p.saved_used)\n+\t    ? size : (size_t) dtp->u.p.saved_used;\n \n \t  q = (gfc_char4_t *) p;\n \t  r = (gfc_char4_t *) dtp->u.p.saved_string;\n \t  if (dtp->u.p.current_unit->flags.encoding == ENCODING_UTF8)\n-\t    for (i = 0; i < m; i++)\n+\t    for (size_t i = 0; i < m; i++)\n \t      *q++ = *r++;\n \t  else\n \t    {\n \t      if (kind == 1)\n \t\tmemcpy (p, dtp->u.p.saved_string, m);\n \t      else\n-\t\tfor (i = 0; i < m; i++)\n+\t\tfor (size_t i = 0; i < m; i++)\n \t\t  *q++ = *r++;\n \t    }\n \t}\n       else\n \t/* Just delimiters encountered, nothing to copy but SPACE.  */\n         m = 0;\n \n-      if (m < (int) size)\n+      if (m < size)\n \t{\n \t  if (kind == 1)\n \t    memset (((char *) p) + m, ' ', size - m);\n \t  else\n \t    {\n \t      q = (gfc_char4_t *) p;\n-\t      for (i = m; i < (int) size; i++)\n+\t      for (size_t i = m; i < size; i++)\n \t\tq[i] = (unsigned char) ' ';\n \t    }\n \t}"}, {"sha": "87adfb8a41db1c9f776aa292788ee8786af623d5", "filename": "libgfortran/io/read.c", "status": "modified", "additions": 51, "deletions": 44, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea99ec5bd62c0d14023aac0316f4286193db9434/libgfortran%2Fio%2Fread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea99ec5bd62c0d14023aac0316f4286193db9434/libgfortran%2Fio%2Fread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fread.c?ref=ea99ec5bd62c0d14023aac0316f4286193db9434", "patch": "@@ -272,7 +272,7 @@ void\n read_l (st_parameter_dt *dtp, const fnode *f, char *dest, int length)\n {\n   char *p;\n-  int w;\n+  size_t w;\n \n   w = f->u.w;\n \n@@ -316,11 +316,11 @@ read_l (st_parameter_dt *dtp, const fnode *f, char *dest, int length)\n \n \n static gfc_char4_t\n-read_utf8 (st_parameter_dt *dtp, int *nbytes) \n+read_utf8 (st_parameter_dt *dtp, size_t *nbytes)\n {\n   static const uchar masks[6] = { 0x7F, 0x1F, 0x0F, 0x07, 0x02, 0x01 };\n   static const uchar patns[6] = { 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };\n-  int i, nb, nread;\n+  size_t nb, nread;\n   gfc_char4_t c;\n   char *s;\n \n@@ -353,7 +353,7 @@ read_utf8 (st_parameter_dt *dtp, int *nbytes)\n   if (s == NULL)\n     return 0;\n   /* Decode the bytes read.  */\n-  for (i = 1; i < nb; i++)\n+  for (size_t i = 1; i < nb; i++)\n     {\n       gfc_char4_t n = *s++;\n \n@@ -383,12 +383,11 @@ read_utf8 (st_parameter_dt *dtp, int *nbytes)\n \n \n static void\n-read_utf8_char1 (st_parameter_dt *dtp, char *p, int len, int width)\n+read_utf8_char1 (st_parameter_dt *dtp, char *p, size_t len, size_t width)\n {\n   gfc_char4_t c;\n   char *dest;\n-  int nbytes;\n-  int i, j;\n+  size_t nbytes, j;\n \n   len = (width < len) ? len : width;\n \n@@ -407,16 +406,16 @@ read_utf8_char1 (st_parameter_dt *dtp, char *p, int len, int width)\n     }\n \n   /* If there was a short read, pad the remaining characters.  */\n-  for (i = j; i < len; i++)\n+  for (size_t i = j; i < len; i++)\n     *dest++ = ' ';\n   return;\n }\n \n static void\n-read_default_char1 (st_parameter_dt *dtp, char *p, int len, int width)\n+read_default_char1 (st_parameter_dt *dtp, char *p, size_t len, size_t width)\n {\n   char *s;\n-  int m, n;\n+  size_t m;\n \n   s = read_block_form (dtp, &width);\n   \n@@ -428,18 +427,16 @@ read_default_char1 (st_parameter_dt *dtp, char *p, int len, int width)\n   m = (width > len) ? len : width;\n   memcpy (p, s, m);\n \n-  n = len - width;\n-  if (n > 0)\n-    memset (p + m, ' ', n);\n+  if (len > width)\n+    memset (p + m, ' ', len - width);\n }\n \n \n static void\n-read_utf8_char4 (st_parameter_dt *dtp, void *p, int len, int width)\n+read_utf8_char4 (st_parameter_dt *dtp, void *p, size_t len, size_t width)\n {\n   gfc_char4_t *dest;\n-  int nbytes;\n-  int i, j;\n+  size_t nbytes, j;\n \n   len = (width < len) ? len : width;\n \n@@ -456,16 +453,16 @@ read_utf8_char4 (st_parameter_dt *dtp, void *p, int len, int width)\n     }\n \n   /* If there was a short read, pad the remaining characters.  */\n-  for (i = j; i < len; i++)\n+  for (size_t i = j; i < len; i++)\n     *dest++ = (gfc_char4_t) ' ';\n   return;\n }\n \n \n static void\n-read_default_char4 (st_parameter_dt *dtp, char *p, int len, int width)\n+read_default_char4 (st_parameter_dt *dtp, char *p, size_t len, size_t width)\n {\n-  int m, n;\n+  size_t m, n;\n   gfc_char4_t *dest;\n \n   if (is_char4_unit(dtp))\n@@ -479,15 +476,18 @@ read_default_char4 (st_parameter_dt *dtp, char *p, int len, int width)\n       if (width > len)\n \t s4 += (width - len);\n \n-      m = ((int) width > len) ? len : (int) width;\n+      m = (width > len) ? len : width;\n \n       dest = (gfc_char4_t *) p;\n \n       for (n = 0; n < m; n++)\n \t*dest++ = *s4++;\n \n-      for (n = 0; n < len - (int) width; n++)\n-\t*dest++ = (gfc_char4_t) ' ';\n+      if (len > width)\n+\t{\n+\t  for (n = 0; n < len - width; n++)\n+\t    *dest++ = (gfc_char4_t) ' ';\n+\t}\n     }\n   else\n     {\n@@ -500,15 +500,18 @@ read_default_char4 (st_parameter_dt *dtp, char *p, int len, int width)\n       if (width > len)\n \t s += (width - len);\n \n-      m = ((int) width > len) ? len : (int) width;\n+      m = (width > len) ? len : width;\n \n       dest = (gfc_char4_t *) p;\n \n       for (n = 0; n < m; n++, dest++, s++)\n \t*dest = (unsigned char ) *s;\n \n-      for (n = 0; n < len - (int) width; n++, dest++)\n-\t*dest = (unsigned char) ' ';\n+      if (len > width)\n+\t{\n+\t  for (n = 0; n < len - width; n++, dest++)\n+\t    *dest = (unsigned char) ' ';\n+\t}\n     }\n }\n \n@@ -517,15 +520,14 @@ read_default_char4 (st_parameter_dt *dtp, char *p, int len, int width)\n    processing UTF-8 encoding if necessary.  */\n \n void\n-read_a (st_parameter_dt *dtp, const fnode *f, char *p, int length)\n+read_a (st_parameter_dt *dtp, const fnode *f, char *p, size_t length)\n {\n-  int wi;\n-  int w;\n+  size_t w;\n \n-  wi = f->u.w;\n-  if (wi == -1) /* '(A)' edit descriptor  */\n-    wi = length;\n-  w = wi;\n+  if (f->u.w == -1) /* '(A)' edit descriptor  */\n+    w = length;\n+  else\n+    w = f->u.w;\n \n   /* Read in w characters, treating comma as not a separator.  */\n   dtp->u.p.sf_read_comma = 0;\n@@ -544,13 +546,14 @@ read_a (st_parameter_dt *dtp, const fnode *f, char *p, int length)\n    processing UTF-8 encoding if necessary.  */\n \n void\n-read_a_char4 (st_parameter_dt *dtp, const fnode *f, char *p, int length)\n+read_a_char4 (st_parameter_dt *dtp, const fnode *f, char *p, size_t length)\n {\n-  int w;\n+  size_t w;\n \n-  w = f->u.w;\n-  if (w == -1) /* '(A)' edit descriptor  */\n+  if (f->u.w == -1) /* '(A)' edit descriptor  */\n     w = length;\n+  else\n+    w = f->u.w;\n \n   /* Read in w characters, treating comma as not a separator.  */\n   dtp->u.p.sf_read_comma = 0;\n@@ -568,7 +571,7 @@ read_a_char4 (st_parameter_dt *dtp, const fnode *f, char *p, int length)\n    ignore the leading spaces.  */\n \n static char *\n-eat_leading_spaces (int *width, char *p)\n+eat_leading_spaces (size_t *width, char *p)\n {\n   for (;;)\n     {\n@@ -584,7 +587,7 @@ eat_leading_spaces (int *width, char *p)\n \n \n static char\n-next_char (st_parameter_dt *dtp, char **p, int *w)\n+next_char (st_parameter_dt *dtp, char **p, size_t *w)\n {\n   char c, *q;\n \n@@ -624,7 +627,8 @@ read_decimal (st_parameter_dt *dtp, const fnode *f, char *dest, int length)\n {\n   GFC_UINTEGER_LARGEST value, maxv, maxv_10;\n   GFC_INTEGER_LARGEST v;\n-  int w, negative; \n+  size_t w;\n+  int negative;\n   char c, *p;\n \n   w = f->u.w;\n@@ -732,7 +736,8 @@ read_radix (st_parameter_dt *dtp, const fnode *f, char *dest, int length,\n {\n   GFC_UINTEGER_LARGEST value, maxv, maxv_r;\n   GFC_INTEGER_LARGEST v;\n-  int w, negative;\n+  size_t w;\n+  int negative;\n   char c, *p;\n \n   w = f->u.w;\n@@ -882,7 +887,8 @@ read_f (st_parameter_dt *dtp, const fnode *f, char *dest, int length)\n #define READF_TMP 50\n   char tmp[READF_TMP];\n   size_t buf_size = 0;\n-  int w, seen_dp, exponent;\n+  size_t w;\n+  int seen_dp, exponent;\n   int exponent_sign;\n   const char *p;\n   char *buffer;\n@@ -1230,12 +1236,13 @@ read_f (st_parameter_dt *dtp, const fnode *f, char *dest, int length)\n    and never look at it. */\n \n void\n-read_x (st_parameter_dt *dtp, int n)\n+read_x (st_parameter_dt *dtp, size_t n)\n {\n-  int length, q, q2;\n+  size_t length;\n+  int q, q2;\n \n   if ((dtp->u.p.current_unit->pad_status == PAD_NO || is_internal_unit (dtp))\n-       && dtp->u.p.current_unit->bytes_left < n)\n+      && dtp->u.p.current_unit->bytes_left < (gfc_offset) n)\n     n = dtp->u.p.current_unit->bytes_left;\n     \n   if (n == 0)"}, {"sha": "f9c8696766f43b62e5f51bf3241f7fa7fccbbaa2", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea99ec5bd62c0d14023aac0316f4286193db9434/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea99ec5bd62c0d14023aac0316f4286193db9434/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=ea99ec5bd62c0d14023aac0316f4286193db9434", "patch": "@@ -223,11 +223,11 @@ current_mode (st_parameter_dt *dtp)\n /* Read sequential file - internal unit  */\n \n static char *\n-read_sf_internal (st_parameter_dt *dtp, int *length)\n+read_sf_internal (st_parameter_dt *dtp, size_t *length)\n {\n   static char *empty_string[0];\n   char *base = NULL;\n-  int lorig;\n+  size_t lorig;\n \n   /* Zero size array gives internal unit len of 0.  Nothing to read. */\n   if (dtp->internal_unit_len == 0\n@@ -256,11 +256,10 @@ read_sf_internal (st_parameter_dt *dtp, int *length)\n   lorig = *length;\n   if (is_char4_unit(dtp))\n     {\n-      int i;\n       gfc_char4_t *p = (gfc_char4_t *) mem_alloc_r4 (dtp->u.p.current_unit->s,\n \t\t\tlength);\n       base = fbuf_alloc (dtp->u.p.current_unit, lorig);\n-      for (i = 0; i < *length; i++, p++)\n+      for (size_t i = 0; i < *length; i++, p++)\n \tbase[i] = *p > 255 ? '?' : (unsigned char) *p;\n     }\n   else\n@@ -297,11 +296,12 @@ read_sf_internal (st_parameter_dt *dtp, int *length)\n /* Read sequential file - external unit */\n \n static char *\n-read_sf (st_parameter_dt *dtp, int *length)\n+read_sf (st_parameter_dt *dtp, size_t *length)\n {\n   static char *empty_string[0];\n+  size_t lorig, n;\n   int q, q2;\n-  int n, lorig, seen_comma;\n+  int seen_comma;\n \n   /* If we have seen an eor previously, return a length of 0.  The\n      caller is responsible for correctly padding the input field.  */\n@@ -439,10 +439,10 @@ read_sf (st_parameter_dt *dtp, int *length)\n    short reads.  */\n \n void *\n-read_block_form (st_parameter_dt *dtp, int *nbytes)\n+read_block_form (st_parameter_dt *dtp, size_t *nbytes)\n {\n   char *source;\n-  int norig;\n+  size_t norig;\n \n   if (!is_stream_io (dtp))\n     {\n@@ -534,11 +534,11 @@ read_block_form (st_parameter_dt *dtp, int *nbytes)\n    a character(kind=4) variable.  Note: Portions of this code borrowed from\n    read_sf_internal.  */\n void *\n-read_block_form4 (st_parameter_dt *dtp, int *nbytes)\n+read_block_form4 (st_parameter_dt *dtp, size_t *nbytes)\n {\n   static gfc_char4_t *empty_string[0];\n   gfc_char4_t *source;\n-  int lorig;\n+  size_t lorig;\n \n   if (dtp->u.p.current_unit->bytes_left < (gfc_offset) *nbytes)\n     *nbytes = dtp->u.p.current_unit->bytes_left;\n@@ -743,7 +743,7 @@ read_block_direct (st_parameter_dt *dtp, void *buf, size_t nbytes)\n    fill in.  Returns NULL on error.  */\n \n void *\n-write_block (st_parameter_dt *dtp, int length)\n+write_block (st_parameter_dt *dtp, size_t length)\n {\n   char *dest;\n \n@@ -1792,7 +1792,7 @@ static void\n formatted_transfer_scalar_write (st_parameter_dt *dtp, bt type, void *p, int kind,\n \t\t\t\t size_t size)\n {\n-  int pos, bytes_used;\n+  gfc_offset pos, bytes_used;\n   const fnode *f;\n   format_token t;\n   int n;\n@@ -1856,10 +1856,10 @@ formatted_transfer_scalar_write (st_parameter_dt *dtp, bt type, void *p, int kin\n \t{\n \t  if (dtp->u.p.skips > 0)\n \t    {\n-\t      int tmp;\n+\t      gfc_offset tmp;\n \t      write_x (dtp, dtp->u.p.skips, dtp->u.p.pending_spaces);\n-\t      tmp = (int)(dtp->u.p.current_unit->recl\n-\t\t\t  - dtp->u.p.current_unit->bytes_left);\n+\t      tmp = dtp->u.p.current_unit->recl\n+\t\t\t  - dtp->u.p.current_unit->bytes_left;\n \t      dtp->u.p.max_pos =\n \t\tdtp->u.p.max_pos > tmp ? dtp->u.p.max_pos : tmp;\n \t      dtp->u.p.skips = 0;\n@@ -1875,8 +1875,8 @@ formatted_transfer_scalar_write (st_parameter_dt *dtp, bt type, void *p, int kin\n \t  dtp->u.p.skips = dtp->u.p.pending_spaces = 0;\n \t}\n \n-      bytes_used = (int)(dtp->u.p.current_unit->recl\n-\t\t   - dtp->u.p.current_unit->bytes_left);\n+      bytes_used = dtp->u.p.current_unit->recl\n+\t\t   - dtp->u.p.current_unit->bytes_left;\n \n       if (is_stream_io(dtp))\n \tbytes_used = 0;\n@@ -2231,7 +2231,7 @@ formatted_transfer_scalar_write (st_parameter_dt *dtp, bt type, void *p, int kin\n \t  p = ((char *) p) + size;\n \t}\n \n-      pos = (int)(dtp->u.p.current_unit->recl - dtp->u.p.current_unit->bytes_left);\n+      pos = dtp->u.p.current_unit->recl - dtp->u.p.current_unit->bytes_left;\n       dtp->u.p.max_pos = (dtp->u.p.max_pos > pos) ? dtp->u.p.max_pos : pos;\n     }\n \n@@ -3691,8 +3691,8 @@ next_record_w (st_parameter_dt *dtp, int done)\n \t{\n \t  char *p;\n \t  /* Internal unit, so must fit in memory.  */\n-\t  ptrdiff_t length, m, record;\n-\t  ptrdiff_t max_pos = max_pos_off;\n+\t  size_t length, m, record;\n+\t  size_t max_pos = max_pos_off;\n \t  if (is_array_io (dtp))\n \t    {\n \t      int finished;\n@@ -3714,7 +3714,7 @@ next_record_w (st_parameter_dt *dtp, int done)\n \t\t      generate_error (&dtp->common, LIBERROR_INTERNAL_UNIT, NULL);\n \t\t      return;\n \t\t    }\n-\t\t  length = ((ptrdiff_t) dtp->u.p.current_unit->recl - max_pos);\n+\t\t  length = ((size_t) dtp->u.p.current_unit->recl - max_pos);\n \t\t}\n \n \t      p = write_block (dtp, length);\n@@ -3737,7 +3737,7 @@ next_record_w (st_parameter_dt *dtp, int done)\n \t\tdtp->u.p.current_unit->endfile = AT_ENDFILE;\n \n \t      /* Now seek to this record */\n-\t      record = record * ((ptrdiff_t) dtp->u.p.current_unit->recl);\n+\t      record = record * ((size_t) dtp->u.p.current_unit->recl);\n \n \t      if (sseek (dtp->u.p.current_unit->s, record, SEEK_SET) < 0)\n \t\t{\n@@ -3767,7 +3767,7 @@ next_record_w (st_parameter_dt *dtp, int done)\n \t\t\t  generate_error (&dtp->common, LIBERROR_INTERNAL_UNIT, NULL);\n \t\t\t  return;\n \t\t\t}\n-\t\t      length = (ptrdiff_t) dtp->u.p.current_unit->recl\n+\t\t      length = (size_t) dtp->u.p.current_unit->recl\n \t\t\t- max_pos;\n \t\t    }\n \t\t  else"}, {"sha": "a8fd07a5f3b92112df355ab7f0a26a59f4c0f2ba", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea99ec5bd62c0d14023aac0316f4286193db9434/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea99ec5bd62c0d14023aac0316f4286193db9434/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=ea99ec5bd62c0d14023aac0316f4286193db9434", "patch": "@@ -776,7 +776,7 @@ buf_init (unix_stream *s)\n *********************************************************************/\n \n char *\n-mem_alloc_r (stream *strm, int *len)\n+mem_alloc_r (stream *strm, size_t *len)\n {\n   unix_stream *s = (unix_stream *) strm;\n   gfc_offset n;\n@@ -786,7 +786,7 @@ mem_alloc_r (stream *strm, int *len)\n     return NULL;\n \n   n = s->buffer_offset + s->active - where;\n-  if (*len > n)\n+  if ((gfc_offset) *len > n)\n     *len = n;\n \n   s->logical_offset = where + *len;\n@@ -796,7 +796,7 @@ mem_alloc_r (stream *strm, int *len)\n \n \n char *\n-mem_alloc_r4 (stream *strm, int *len)\n+mem_alloc_r4 (stream *strm, size_t *len)\n {\n   unix_stream *s = (unix_stream *) strm;\n   gfc_offset n;\n@@ -806,7 +806,7 @@ mem_alloc_r4 (stream *strm, int *len)\n     return NULL;\n \n   n = s->buffer_offset + s->active - where;\n-  if (*len > n)\n+  if ((gfc_offset) *len > n)\n     *len = n;\n \n   s->logical_offset = where + *len;\n@@ -816,7 +816,7 @@ mem_alloc_r4 (stream *strm, int *len)\n \n \n char *\n-mem_alloc_w (stream *strm, int *len)\n+mem_alloc_w (stream *strm, size_t *len)\n {\n   unix_stream *s = (unix_stream *)strm;\n   gfc_offset m;\n@@ -837,7 +837,7 @@ mem_alloc_w (stream *strm, int *len)\n \n \n gfc_char4_t *\n-mem_alloc_w4 (stream *strm, int *len)\n+mem_alloc_w4 (stream *strm, size_t *len)\n {\n   unix_stream *s = (unix_stream *)strm;\n   gfc_offset m;\n@@ -863,7 +863,7 @@ static ssize_t\n mem_read (stream *s, void *buf, ssize_t nbytes)\n {\n   void *p;\n-  int nb = nbytes;\n+  size_t nb = nbytes;\n \n   p = mem_alloc_r (s, &nb);\n   if (p)\n@@ -882,7 +882,7 @@ static ssize_t\n mem_read4 (stream *s, void *buf, ssize_t nbytes)\n {\n   void *p;\n-  int nb = nbytes;\n+  size_t nb = nbytes;\n \n   p = mem_alloc_r4 (s, &nb);\n   if (p)\n@@ -901,7 +901,7 @@ static ssize_t\n mem_write (stream *s, const void *buf, ssize_t nbytes)\n {\n   void *p;\n-  int nb = nbytes;\n+  size_t nb = nbytes;\n \n   p = mem_alloc_w (s, &nb);\n   if (p)\n@@ -920,7 +920,7 @@ static ssize_t\n mem_write4 (stream *s, const void *buf, ssize_t nwords)\n {\n   gfc_char4_t *p;\n-  int nw = nwords;\n+  size_t nw = nwords;\n \n   p = mem_alloc_w4 (s, &nw);\n   if (p)\n@@ -1038,7 +1038,7 @@ static const struct stream_vtable mem4_vtable = {\n    internal file */\n \n stream *\n-open_internal (char *base, int length, gfc_offset offset)\n+open_internal (char *base, size_t length, gfc_offset offset)\n {\n   unix_stream *s;\n \n@@ -1058,7 +1058,7 @@ open_internal (char *base, int length, gfc_offset offset)\n    internal file */\n \n stream *\n-open_internal4 (char *base, int length, gfc_offset offset)\n+open_internal4 (char *base, size_t length, gfc_offset offset)\n {\n   unix_stream *s;\n "}, {"sha": "9ad6dfa3205f028d3539cf17fb4b50f80558317e", "filename": "libgfortran/io/unix.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea99ec5bd62c0d14023aac0316f4286193db9434/libgfortran%2Fio%2Funix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea99ec5bd62c0d14023aac0316f4286193db9434/libgfortran%2Fio%2Funix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.h?ref=ea99ec5bd62c0d14023aac0316f4286193db9434", "patch": "@@ -108,22 +108,22 @@ internal_proto(compare_files);\n extern stream *open_external (st_parameter_open *, unit_flags *);\n internal_proto(open_external);\n \n-extern stream *open_internal (char *, int, gfc_offset);\n+extern stream *open_internal (char *, size_t, gfc_offset);\n internal_proto(open_internal);\n \n-extern stream *open_internal4 (char *, int, gfc_offset);\n+extern stream *open_internal4 (char *, size_t, gfc_offset);\n internal_proto(open_internal4);\n \n-extern char *mem_alloc_w (stream *, int *);\n+extern char *mem_alloc_w (stream *, size_t *);\n internal_proto(mem_alloc_w);\n \n-extern char *mem_alloc_r (stream *, int *);\n+extern char *mem_alloc_r (stream *, size_t *);\n internal_proto(mem_alloc_r);\n \n-extern gfc_char4_t *mem_alloc_w4 (stream *, int *);\n+extern gfc_char4_t *mem_alloc_w4 (stream *, size_t *);\n internal_proto(mem_alloc_w4);\n \n-extern char *mem_alloc_r4 (stream *, int *);\n+extern char *mem_alloc_r4 (stream *, size_t *);\n internal_proto(mem_alloc_r4);\n \n extern stream *input_stream (void);"}, {"sha": "8021a1e9c4b0202e5a36293f9e8d3a15cf231670", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea99ec5bd62c0d14023aac0316f4286193db9434/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea99ec5bd62c0d14023aac0316f4286193db9434/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=ea99ec5bd62c0d14023aac0316f4286193db9434", "patch": "@@ -235,7 +235,7 @@ write_utf8_char4 (st_parameter_dt *dtp, gfc_char4_t *source,\n    is set to the appropriate size to allocate.  */\n \n static void\n-write_check_cc (st_parameter_dt *dtp, const char **source, int *alloc_len)\n+write_check_cc (st_parameter_dt *dtp, const char **source, size_t *alloc_len)\n {\n   /* Only valid for CARRIAGECONTROL=FORTRAN.  */\n   if (dtp->u.p.current_unit->flags.cc != CC_FORTRAN\n@@ -311,7 +311,7 @@ write_check_cc (st_parameter_dt *dtp, const char **source, int *alloc_len)\n    after the start-of-record string was inserted.  */\n \n static char *\n-write_cc (st_parameter_dt *dtp, char *p, int *source_len)\n+write_cc (st_parameter_dt *dtp, char *p, size_t *source_len)\n {\n   /* Only valid for CARRIAGECONTROL=FORTRAN.  */\n   if (dtp->u.p.current_unit->flags.cc != CC_FORTRAN || source_len == NULL)\n@@ -360,14 +360,15 @@ write_cc (st_parameter_dt *dtp, char *p, int *source_len)\n }\n \n void\n-write_a (st_parameter_dt *dtp, const fnode *f, const char *source, int len)\n+\n+write_a (st_parameter_dt *dtp, const fnode *f, const char *source, size_t len)\n {\n-  int wlen;\n+  size_t wlen;\n   char *p;\n \n   wlen = f->u.string.length < 0\n \t || (f->format == FMT_G && f->u.string.length == 0)\n-\t ? len : f->u.string.length;\n+    ? len : (size_t) f->u.string.length;\n \n #ifdef HAVE_CRLF\n   /* If this is formatted STREAM IO convert any embedded line feed characters\n@@ -376,7 +377,7 @@ write_a (st_parameter_dt *dtp, const fnode *f, const char *source, int len)\n   if (is_stream_io (dtp))\n     {\n       const char crlf[] = \"\\r\\n\";\n-      int i, q, bytes;\n+      size_t q, bytes;\n       q = bytes = 0;\n \n       /* Write out any padding if needed.  */\n@@ -389,7 +390,7 @@ write_a (st_parameter_dt *dtp, const fnode *f, const char *source, int len)\n \t}\n \n       /* Scan the source string looking for '\\n' and convert it if found.  */\n-      for (i = 0; i < wlen; i++)\n+      for (size_t i = 0; i < wlen; i++)\n \t{\n \t  if (source[i] == '\\n')\n \t    {\n@@ -471,14 +472,14 @@ write_a (st_parameter_dt *dtp, const fnode *f, const char *source, int len)\n    to the UTF-8 encoded string before writing out.  */\n \n void\n-write_a_char4 (st_parameter_dt *dtp, const fnode *f, const char *source, int len)\n+write_a_char4 (st_parameter_dt *dtp, const fnode *f, const char *source, size_t len)\n {\n-  int wlen;\n+  size_t wlen;\n   gfc_char4_t *q;\n \n   wlen = f->u.string.length < 0\n \t || (f->format == FMT_G && f->u.string.length == 0)\n-\t ? len : f->u.string.length;\n+    ? len : (size_t) f->u.string.length;\n \n   q = (gfc_char4_t *) source;\n #ifdef HAVE_CRLF\n@@ -488,7 +489,7 @@ write_a_char4 (st_parameter_dt *dtp, const fnode *f, const char *source, int len\n   if (is_stream_io (dtp))\n     {\n       const gfc_char4_t crlf[] = {0x000d,0x000a};\n-      int i, bytes;\n+      size_t bytes;\n       gfc_char4_t *qq;\n       bytes = 0;\n \n@@ -504,7 +505,7 @@ write_a_char4 (st_parameter_dt *dtp, const fnode *f, const char *source, int len\n \n       /* Scan the source string looking for '\\n' and convert it if found.  */\n       qq = (gfc_char4_t *) source;\n-      for (i = 0; i < wlen; i++)\n+      for (size_t i = 0; i < wlen; i++)\n \t{\n \t  if (qq[i] == '\\n')\n \t    {"}]}