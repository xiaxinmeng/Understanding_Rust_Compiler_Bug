{"sha": "4f44c5556fc384b57ea0c8c6908701bb5f1c4ed4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY0NGM1NTU2ZmMzODRiNTdlYTBjOGM2OTA4NzAxYmI1ZjFjNGVkNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-07-01T12:24:03Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-07-01T12:24:03Z"}, "message": "ptr_traits.h (__ptrtr_elt_type, [...]): Remove\n\n\t* include/bits/ptr_traits.h (__ptrtr_elt_type, __ptrtr_diff_type,\n\t__ptrtr_rebind, __ptrtr_not_void): Remove\n\t(__get_first_arg, __replace_first_arg, __make_not_void): Define new\n\ttransformations.\n\t(__detected_or_): New detection trait.\n\t(pointer_traits): Use new traits.\n\t* testsuite/20_util/pointer_traits/pointer_to.cc: Add rebind member.\n\t* testsuite/20_util/pointer_traits/requirements/\n\texplicit_instantiation.cc: Use valid arguments to pointer_traits.\n\nFrom-SVN: r225243", "tree": {"sha": "07cefa48a57eeb87367bb3ec232b90be86ab2afe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07cefa48a57eeb87367bb3ec232b90be86ab2afe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f44c5556fc384b57ea0c8c6908701bb5f1c4ed4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f44c5556fc384b57ea0c8c6908701bb5f1c4ed4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f44c5556fc384b57ea0c8c6908701bb5f1c4ed4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f44c5556fc384b57ea0c8c6908701bb5f1c4ed4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6af6bef4ac3175302efe92de9bdd423fbe4b40d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af6bef4ac3175302efe92de9bdd423fbe4b40d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6af6bef4ac3175302efe92de9bdd423fbe4b40d8"}], "stats": {"total": 175, "additions": 89, "deletions": 86}, "files": [{"sha": "f7ea9285cc039f5888479991149c04d5e4f963a9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f44c5556fc384b57ea0c8c6908701bb5f1c4ed4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f44c5556fc384b57ea0c8c6908701bb5f1c4ed4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4f44c5556fc384b57ea0c8c6908701bb5f1c4ed4", "patch": "@@ -1,5 +1,15 @@\n 2015-07-01  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/ptr_traits.h (__ptrtr_elt_type, __ptrtr_diff_type,\n+\t__ptrtr_rebind, __ptrtr_not_void): Remove\n+\t(__get_first_arg, __replace_first_arg, __make_not_void): Define new\n+\ttransformations.\n+\t(__detected_or_): New detection trait.\n+\t(pointer_traits): Use new traits.\n+\t* testsuite/20_util/pointer_traits/pointer_to.cc: Add rebind member.\n+\t* testsuite/20_util/pointer_traits/requirements/\n+\texplicit_instantiation.cc: Use valid arguments to pointer_traits.\n+\n \t* doc/xml/manual/status_cxx2017.xml: Update status table.\n \t* include/experimental/type_traits (void_t, is_detected,\n \tis_detected_v, detected_t, detected_or, detected_or_t,"}, {"sha": "84cc4da7b9ae10ed9236e2adf24e7ed8e2a22582", "filename": "libstdc++-v3/include/bits/ptr_traits.h", "status": "modified", "additions": 60, "deletions": 84, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f44c5556fc384b57ea0c8c6908701bb5f1c4ed4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f44c5556fc384b57ea0c8c6908701bb5f1c4ed4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h?ref=4f44c5556fc384b57ea0c8c6908701bb5f1c4ed4", "patch": "@@ -32,114 +32,86 @@\n \n #if __cplusplus >= 201103L\n \n-#include <type_traits> // For _GLIBCXX_HAS_NESTED_TYPE\n+#include <type_traits>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-_GLIBCXX_HAS_NESTED_TYPE(element_type)\n-_GLIBCXX_HAS_NESTED_TYPE(difference_type)\n-\n-  template<typename _Tp, bool = __has_element_type<_Tp>::value>\n-    struct __ptrtr_elt_type;\n+  class __undefined;\n \n+  // Given Template<T, ...> return T, otherwise invalid.\n   template<typename _Tp>\n-    struct __ptrtr_elt_type<_Tp, true>\n-    {\n-      typedef typename _Tp::element_type __type;\n-    };\n-\n-  template<template<typename, typename...> class _SomePtr, typename _Tp,\n-            typename... _Args>\n-    struct __ptrtr_elt_type<_SomePtr<_Tp, _Args...>, false>\n-    {\n-      typedef _Tp __type;\n-    };\n+    struct __get_first_arg\n+    { using type = __undefined; };\n \n-  template<typename _Tp, bool = __has_difference_type<_Tp>::value>\n-    struct __ptrtr_diff_type\n-    {\n-      typedef typename _Tp::difference_type __type;\n-    };\n+  template<template<typename, typename...> class _Template, typename _Tp,\n+           typename... _Types>\n+    struct __get_first_arg<_Template<_Tp, _Types...>>\n+    { using type = _Tp; };\n \n   template<typename _Tp>\n-    struct __ptrtr_diff_type<_Tp, false>\n-    {\n-      typedef ptrdiff_t __type;\n-    };\n-\n-  template<typename _Ptr, typename _Up>\n-    class __ptrtr_rebind_helper\n-    {\n-      template<typename _Ptr2, typename _Up2>\n-\tstatic constexpr true_type\n-\t_S_chk(typename _Ptr2::template rebind<_Up2>*);\n-\n-      template<typename, typename>\n-\tstatic constexpr false_type\n-\t_S_chk(...);\n-\n-    public:\n-      using __type = decltype(_S_chk<_Ptr, _Up>(nullptr));\n-    };\n-\n-  template<typename _Tp, typename _Up,\n-           bool = __ptrtr_rebind_helper<_Tp, _Up>::__type::value>\n-    struct __ptrtr_rebind;\n+    using __get_first_arg_t = typename __get_first_arg<_Tp>::type;\n \n+  // Given Template<T, ...> and U return Template<U, ...>, otherwise invalid.\n   template<typename _Tp, typename _Up>\n-    struct __ptrtr_rebind<_Tp, _Up, true>\n-    {\n-      typedef typename _Tp::template rebind<_Up> __type;\n-    };\n+    struct __replace_first_arg\n+    { using type = __undefined; };\n \n-  template<template<typename, typename...> class _SomePtr, typename _Up,\n-            typename _Tp, typename... _Args>\n-    struct __ptrtr_rebind<_SomePtr<_Tp, _Args...>, _Up, false>\n-    {\n-      typedef _SomePtr<_Up, _Args...> __type;\n-    };\n+  template<template<typename, typename...> class _Template, typename _Up,\n+           typename _Tp, typename... _Types>\n+    struct __replace_first_arg<_Template<_Tp, _Types...>, _Up>\n+    { using type = _Template<_Up, _Types...>; };\n \n-  template<typename _Tp, typename = typename remove_cv<_Tp>::type>\n-    struct __ptrtr_not_void\n-    {\n-      typedef _Tp __type;\n-    };\n+  template<typename _Tp, typename _Up>\n+    using __replace_first_arg_t = typename __replace_first_arg<_Tp, _Up>::type;\n \n   template<typename _Tp>\n-    struct __ptrtr_not_void<_Tp, void>\n-    {\n-      struct __type { };\n-    };\n-\n-  template<typename _Ptr>\n-    class __ptrtr_pointer_to\n-    {\n-      typedef typename __ptrtr_elt_type<_Ptr>::__type   __orig_type;\n-      typedef typename __ptrtr_not_void<__orig_type>::__type __element_type;\n-\n-    public:\n-      static _Ptr pointer_to(__element_type& __e)\n-      { return _Ptr::pointer_to(__e); }\n-    };\n+    using __make_not_void\n+      = typename conditional<is_void<_Tp>::value, __undefined, _Tp>::type;\n \n   /**\n    * @brief  Uniform interface to all pointer-like types\n    * @ingroup pointer_abstractions\n   */\n   template<typename _Ptr>\n-    struct pointer_traits : __ptrtr_pointer_to<_Ptr>\n+    struct pointer_traits\n     {\n-      /// The pointer type\n-      typedef _Ptr                                      pointer;\n-      /// The type pointed to\n-      typedef typename __ptrtr_elt_type<_Ptr>::__type   element_type;\n-      /// Type used to represent the difference between two pointers\n-      typedef typename __ptrtr_diff_type<_Ptr>::__type  difference_type;\n+    private:\n+      template<typename _Tp>\n+\tusing __element_type = typename _Tp::element_type;\n+\n+      template<typename _Tp>\n+\tusing __difference_type = typename _Tp::difference_type;\n+\n+      template<typename _Tp, typename _Up>\n+\tusing __rebind = typename _Tp::template rebind<_Up>;\n+\n+    public:\n+      /// The pointer type.\n+      using pointer = _Ptr;\n+\n+      /// The type pointed to.\n+      using element_type\n+\t= __detected_or_t_<__get_first_arg_t, __element_type, _Ptr>;\n \n+      /// The type used to represent the difference between two pointers.\n+      using difference_type\n+\t= __detected_or_t<ptrdiff_t, __difference_type, _Ptr>;\n+\n+      /// A pointer to a different type.\n       template<typename _Up>\n-        using rebind = typename __ptrtr_rebind<_Ptr, _Up>::__type;\n+        using rebind\n+\t  = __detected_or_t_<__replace_first_arg_t, __rebind, _Ptr, _Up>;\n+\n+      static _Ptr\n+      pointer_to(__make_not_void<element_type>& __e)\n+      { return _Ptr::pointer_to(__e); }\n+\n+      static_assert(!is_same<element_type, __undefined>::value,\n+\t  \"pointer type defines element_type or is like SomePointer<T, Args>\");\n+      static_assert(!is_same<rebind<element_type>, __undefined>::value,\n+\t  \"pointer type defines rebind<U> or is like SomePointer<T, Args>\");\n     };\n \n   /**\n@@ -165,10 +137,14 @@ _GLIBCXX_HAS_NESTED_TYPE(difference_type)\n        *  @return @c addressof(__r)\n       */\n       static pointer\n-      pointer_to(typename __ptrtr_not_void<element_type>::__type& __r) noexcept\n+      pointer_to(__make_not_void<element_type>& __r) noexcept\n       { return std::addressof(__r); }\n     };\n \n+  /// Convenience alias for rebinding pointers.\n+  template<typename _Ptr, typename _Tp>\n+    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "6782f79c5e29860126a2a42b831ba9e95b976de7", "filename": "libstdc++-v3/testsuite/20_util/pointer_traits/pointer_to.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f44c5556fc384b57ea0c8c6908701bb5f1c4ed4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpointer_traits%2Fpointer_to.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f44c5556fc384b57ea0c8c6908701bb5f1c4ed4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpointer_traits%2Fpointer_to.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpointer_traits%2Fpointer_to.cc?ref=4f44c5556fc384b57ea0c8c6908701bb5f1c4ed4", "patch": "@@ -26,6 +26,8 @@ struct Ptr\n   typedef bool element_type;\n   bool* value;\n \n+  template<typename> using rebind = Ptr;\n+\n   static Ptr pointer_to(bool& b) { return Ptr{&b}; }\n };\n "}, {"sha": "d9c808f1735c38bc317c8e2407e336cc4a4a4a4f", "filename": "libstdc++-v3/testsuite/20_util/pointer_traits/requirements/explicit_instantiation.cc", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f44c5556fc384b57ea0c8c6908701bb5f1c4ed4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpointer_traits%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f44c5556fc384b57ea0c8c6908701bb5f1c4ed4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpointer_traits%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpointer_traits%2Frequirements%2Fexplicit_instantiation.cc?ref=4f44c5556fc384b57ea0c8c6908701bb5f1c4ed4", "patch": "@@ -22,10 +22,25 @@\n \n #include <memory>\n \n+template<typename T>\n+struct P1\n+{\n+  using element_type = T;\n+  using difference_type = long;\n+  template<typename U> using rebind = P1<U>;\n+  static P1 pointer_to(T&) { return {}; }\n+};\n+\n+template<typename T>\n+struct P2\n+{\n+  static P2 pointer_to(T&) { return {}; }\n+};\n+\n namespace std\n {\n   typedef short test_type;\n   template struct pointer_traits<test_type*>;\n-  template struct pointer_traits<shared_ptr<test_type>>;\n-  template struct pointer_traits<unique_ptr<test_type>>;\n+  template struct pointer_traits<P1<test_type>>;\n+  template struct pointer_traits<P2<test_type>>;\n }"}]}