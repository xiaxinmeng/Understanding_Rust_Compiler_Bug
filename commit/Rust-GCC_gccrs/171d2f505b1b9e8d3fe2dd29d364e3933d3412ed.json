{"sha": "171d2f505b1b9e8d3fe2dd29d364e3933d3412ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTcxZDJmNTA1YjFiOWU4ZDNmZTJkZDI5ZDM2NGUzOTMzZDM0MTJlZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2002-09-16T19:09:05Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2002-09-16T19:09:05Z"}, "message": "Remove DR 295 implementation.\n\ncp:\n\tRemove DR 295 implementation.\n\t* pt.c (check_cv_quals_for_unify): Disable function & method cases.\n\t* tree.c (cp_build_qualified_type_real): Likewise. Don't warn\n\tabout ignoring volatile qualifiers.\n\n\t* search.c (lookup_member): Correct documentation.\ntestsuite:\n\t* g++.dg/template/qualttp20.C: Adjust expected errors.\n\t* g++.old-deja/g++.jason/report.C: Likewise.\n\t* g++.old-deja/g++.other/qual1.C: Likewise.\n\nFrom-SVN: r57209", "tree": {"sha": "86d1c4d6293cc1c33df7aaf0421d329757c253b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86d1c4d6293cc1c33df7aaf0421d329757c253b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/171d2f505b1b9e8d3fe2dd29d364e3933d3412ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/171d2f505b1b9e8d3fe2dd29d364e3933d3412ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/171d2f505b1b9e8d3fe2dd29d364e3933d3412ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/171d2f505b1b9e8d3fe2dd29d364e3933d3412ed/comments", "author": null, "committer": null, "parents": [{"sha": "0e9cab878b247613564e51cd98c3bac34411b628", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e9cab878b247613564e51cd98c3bac34411b628", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e9cab878b247613564e51cd98c3bac34411b628"}], "stats": {"total": 77, "additions": 49, "deletions": 28}, "files": [{"sha": "a405a9114ebc98f2a3a90250f8076355e6cd5778", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/171d2f505b1b9e8d3fe2dd29d364e3933d3412ed/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/171d2f505b1b9e8d3fe2dd29d364e3933d3412ed/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=171d2f505b1b9e8d3fe2dd29d364e3933d3412ed", "patch": "@@ -1,3 +1,12 @@\n+2002-09-16  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tRemove DR 295 implementation.\n+\t* pt.c (check_cv_quals_for_unify): Disable function & method cases.\n+\t* tree.c (cp_build_qualified_type_real): Likewise. Don't warn\n+\tabout ignoring volatile qualifiers.\n+\n+\t* search.c (lookup_member): Correct documentation.\n+\n 2002-09-16  Geoffrey Keating  <geoffk@apple.com>\n \n \t* cp-tree.h (union lang_tree_node): Add chain_next option."}, {"sha": "86b3fc20d8eddf425fe59537de12a323fee702f8", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/171d2f505b1b9e8d3fe2dd29d364e3933d3412ed/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/171d2f505b1b9e8d3fe2dd29d364e3933d3412ed/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=171d2f505b1b9e8d3fe2dd29d364e3933d3412ed", "patch": "@@ -8570,9 +8570,7 @@ check_cv_quals_for_unify (strict, arg, parm)\n     {\n       /* If the cvr quals of parm will not unify with ARG, they'll be\n \t ignored in instantiation, so we have to do the same here.  */\n-      if (TREE_CODE (arg) == REFERENCE_TYPE\n-\t  || TREE_CODE (arg) == FUNCTION_TYPE\n-\t  || TREE_CODE (arg) == METHOD_TYPE)\n+      if (TREE_CODE (arg) == REFERENCE_TYPE)\n \tparm_quals &= ~(TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE);\n       if (!POINTER_TYPE_P (arg) &&\n \t  TREE_CODE (arg) != TEMPLATE_TYPE_PARM)"}, {"sha": "0c4935149d21d1d145289a3841a791409c6a1441", "filename": "gcc/cp/search.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/171d2f505b1b9e8d3fe2dd29d364e3933d3412ed/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/171d2f505b1b9e8d3fe2dd29d364e3933d3412ed/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=171d2f505b1b9e8d3fe2dd29d364e3933d3412ed", "patch": "@@ -1400,15 +1400,16 @@ build_baselink (tree binfo, tree access_binfo, tree functions, tree optype)\n }\n \n /* Look for a member named NAME in an inheritance lattice dominated by\n-   XBASETYPE.  If PROTECT is 0 or two, we do not check access.  If it is\n-   1, we enforce accessibility.  If PROTECT is zero, then, for an\n-   ambiguous lookup, we return NULL.  If PROTECT is 1, we issue an\n-   error message.  If PROTECT is 2, we return a TREE_LIST whose\n-   TREE_TYPE is error_mark_node and whose TREE_VALUEs are the list of\n-   ambiguous candidates.\n-\n-   WANT_TYPE is 1 when we should only return TYPE_DECLs, if no\n-   TYPE_DECL can be found return NULL_TREE.  */\n+   XBASETYPE.  If PROTECT is 0 or two, we do not check access.  If it\n+   is 1, we enforce accessibility.  If PROTECT is zero, then, for an\n+   ambiguous lookup, we return NULL.  If PROTECT is 1, we issue error\n+   messages about inaccessible or ambiguous lookup.  If PROTECT is 2,\n+   we return a TREE_LIST whose TREE_TYPE is error_mark_node and whose\n+   TREE_VALUEs are the list of ambiguous candidates.\n+\n+   WANT_TYPE is 1 when we should only return TYPE_DECLs.\n+\n+   If nothing can be found return NULL_TREE and do not issue an error.  */\n \n tree\n lookup_member (xbasetype, name, protect, want_type)"}, {"sha": "ab7751b92532681fd22a766316d9210e9c626bc7", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/171d2f505b1b9e8d3fe2dd29d364e3933d3412ed/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/171d2f505b1b9e8d3fe2dd29d364e3933d3412ed/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=171d2f505b1b9e8d3fe2dd29d364e3933d3412ed", "patch": "@@ -577,6 +577,11 @@ cp_build_qualified_type_real (type, type_quals, complain)\n {\n   tree result;\n   int bad_quals = TYPE_UNQUALIFIED;\n+  /* We keep bad function qualifiers separate, so that we can decide\n+     whether to implement DR 295 or not. DR 295 break existing code,\n+     unfortunately. Remove this variable to implement the defect\n+     report.  */\n+  int bad_func_quals = TYPE_UNQUALIFIED;\n \n   if (type == error_mark_node)\n     return type;\n@@ -592,6 +597,8 @@ cp_build_qualified_type_real (type, type_quals, complain)\n \t  || TREE_CODE (type) == METHOD_TYPE))\n     {\n       bad_quals |= type_quals & (TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE);\n+      if (TREE_CODE (type) != REFERENCE_TYPE)\n+\tbad_func_quals |= type_quals & (TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE);\n       type_quals &= ~(TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE);\n     }\n   \n@@ -610,21 +617,23 @@ cp_build_qualified_type_real (type, type_quals, complain)\n     /*OK*/;\n   else if (!(complain & (tf_error | tf_ignore_bad_quals)))\n     return error_mark_node;\n+  else if (bad_func_quals && !(complain & tf_error))\n+    return error_mark_node;\n   else\n     {\n       if (complain & tf_ignore_bad_quals)\n  \t/* We're not going to warn about constifying things that can't\n  \t   be constified.  */\n  \tbad_quals &= ~TYPE_QUAL_CONST;\n+      bad_quals |= bad_func_quals;\n       if (bad_quals)\n  \t{\n  \t  tree bad_type = build_qualified_type (ptr_type_node, bad_quals);\n  \n- \t  if (!(complain & tf_ignore_bad_quals))\n+ \t  if (!(complain & tf_ignore_bad_quals)\n+\t      || bad_func_quals)\n  \t    error (\"`%V' qualifiers cannot be applied to `%T'\",\n \t\t   bad_type, type);\n- \t  else if (complain & tf_warning)\n- \t    warning (\"ignoring `%V' qualifiers on `%T'\", bad_type, type);\n  \t}\n     }\n   "}, {"sha": "6c68a3a2a8afc47e3c6d20565923ffd6485d0057", "filename": "gcc/testsuite/g++.dg/template/qualttp20.C", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/171d2f505b1b9e8d3fe2dd29d364e3933d3412ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/171d2f505b1b9e8d3fe2dd29d364e3933d3412ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp20.C?ref=171d2f505b1b9e8d3fe2dd29d364e3933d3412ed", "patch": "@@ -16,18 +16,20 @@ struct AS\n template <typename T> struct B1 : T\n {\n   typedef typename T::L __restrict__ r;// { dg-error \"`__restrict' qualifiers cannot\" \"\" }\n-  typedef typename T::myT __restrict__ p;// { dg-warning \"ignoring `__restrict'\" \"\" }\n-  \n-  typedef typename T::myT volatile *myvolatile; // { dg-warning \"ignoring `volatile'\" \"\" }\n-  typename T::myT volatile *a;    // { dg-warning \"ignoring `volatile'\" \"\" }\n-  myvolatile b;\t\t\t // { dg-bogus \"ignoring `volatile'\" \"\" { xfail *-*-* } }\n+  typedef typename T::myT __restrict__ p;// { dg-warning \"ignoring `__restrict'\" \"\" { xfail *-*-* } }\n+\n+  // The following are DR 295 dependent\n+  typedef typename T::myT volatile *myvolatile; // { dg-error \"qualifiers\" \"\"  }\n+  typename T::myT volatile *a;    // { dg-error \"qualifiers\" \"\" }\n+  myvolatile b;\t\t\t // { dg-error \"qualifiers\" \"\" }\n };\n template <typename T> struct B2 : T\n {\n-  typedef typename T::myT const *myconst;\n-  typename T::myT const *a;\n-  myconst b;\n+  // The following are DR 295 dependent\n+  typedef typename T::myT const *myconst; // { dg-error \"qualifiers\" \"\" }\n+  typename T::myT const *a; // { dg-error \"qualifiers\" \"\" }\n+  myconst b; // { dg-error \"qualifiers\" \"\" }\n };\n \n B1<AS> b1;\t// { dg-error \"instantiated\" \"\" }\n-B2<AS> b2;\n+B2<AS> b2;      // { dg-error \"instantiated\" \"\" }\t"}, {"sha": "73adee87c9c44519fd7621ca22aa25ef153eb4ed", "filename": "gcc/testsuite/g++.old-deja/g++.jason/report.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/171d2f505b1b9e8d3fe2dd29d364e3933d3412ed/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Freport.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/171d2f505b1b9e8d3fe2dd29d364e3933d3412ed/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Freport.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Freport.C?ref=171d2f505b1b9e8d3fe2dd29d364e3933d3412ed", "patch": "@@ -46,8 +46,9 @@ class X{\n };\n \n typedef int const * bart ();\n-typedef bart const * const * bar2; // ok - constifying qualifiers\n-typedef bart volatile * const * bar2v; // WARNING - qualifiers\n+//The following is DR295 dependant\n+typedef bart const * const * bar2; // ERROR - constifying qualifiers\n+typedef bart volatile * const * bar2v; // ERROR - qualifiers\n \n bar2 baz (X::Y y)\n {\t\t\t\t// ERROR - in this context"}, {"sha": "13f9bbe497a2ff5806d79eea4508efb6fab78415", "filename": "gcc/testsuite/g++.old-deja/g++.other/qual1.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/171d2f505b1b9e8d3fe2dd29d364e3933d3412ed/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fqual1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/171d2f505b1b9e8d3fe2dd29d364e3933d3412ed/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fqual1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fqual1.C?ref=171d2f505b1b9e8d3fe2dd29d364e3933d3412ed", "patch": "@@ -10,8 +10,9 @@ class\n {\n public:\n   func_type *Function;\n-  const func_type* function(void) { return Function; } // ok constifying\n-  volatile func_type* functionv(void); // WARNING - qualifier\n+  // The following is DR 295 dependent\n+  const func_type* function(void) { return Function; } // ERROR - constifying\n+  volatile func_type* functionv(void); // ERROR - qualifier\n } action;\n \n void work(const char *source)"}]}