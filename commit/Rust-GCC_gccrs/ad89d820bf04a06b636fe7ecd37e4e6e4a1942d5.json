{"sha": "ad89d820bf04a06b636fe7ecd37e4e6e4a1942d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ4OWQ4MjBiZjA0YTA2YjYzNmZlN2VjZDM3ZTRlNmU0YTE5NDJkNQ==", "commit": {"author": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2016-11-01T17:16:33Z"}, "committer": {"name": "Max Filippov", "email": "jcmvbkbc@gcc.gnu.org", "date": "2016-11-01T17:16:33Z"}, "message": "xtensa: Fix PR target/78118\n\nIt started failing after the following commit: 32e90dc6a0cda45 (\"PR\nrtl-optimization/61047\").\n\nThe change that made xtensa backend go ICE looks completely unrelated,\nand indeed, the issue is caused by the side effect of\ncompute_frame_size() function call hidden in the\nINITIAL_ELIMINATION_OFFSET macro. This call updates the value of the\nxtensa_current_frame_size static variable, used in \"return\" instruction\npredicate. Prior to the change the value of xtensa_current_frame_size was\nset to 0 after the end of epilogue generation, which enabled the \"return\"\ninstruction for the CALL0 ABI, but after the change the additional\nINITIAL_ELIMINATION_OFFSET calls make xtensa_current_frame_size non-zero\nand \"return\" pattern unavailable.\n\nGet rid of the global xtensa_current_frame_size and\nxtensa_callee_save_size variables by moving them into the\nmachine_function structure. Implement predicate for the \"return\" pattern\nas a function. Don't communicate completion of epilogue generation\nthrough zeroing of xtensa_current_frame_size, add explicit epilogue_done\nvariable to the machine_function structure. Don't update stack frame\nlayout after the completion of reload.\n\n2016-11-01  Max Filippov  <jcmvbkbc@gmail.com>\ngcc/\n\t* config/xtensa/xtensa-protos.h\n\t(xtensa_use_return_instruction_p): New prototype.\n\t* config/xtensa/xtensa.c (xtensa_current_frame_size,\n\txtensa_callee_save_size): Remove.\n\t(struct machine_function): Add new fields: current_frame_size,\n\tcallee_save_size, frame_laid_out and epilogue_done.\n\t(compute_frame_size, xtensa_expand_prologue,\n\txtensa_expand_epilogue): Replace xtensa_callee_save_size with\n\tcfun->machine->callee_save_size and xtensa_current_frame_size\n\twith cfun->machine->current_frame_size.\n\t(compute_frame_size): Update cfun->machine->frame_laid_out and\n\tdon't update frame layout after reload completion.\n\t(xtensa_expand_epilogue): Set cfun->machine->epilogue_done\n\tinstead of zeroing xtensa_current_frame_size.\n\t(xtensa_use_return_instruction_p): New function.\n\t* config/xtensa/xtensa.h (xtensa_current_frame_size): Remove\n\tdeclaration.\n\t(INITIAL_ELIMINATION_OFFSET): Use return value of\n\tcompute_frame_size instead of xtensa_current_frame_size value.\n\t* config/xtensa/xtensa.md (\"return\" pattern): Use new predicate\n\tfunction xtensa_use_return_instruction_p instead of inline code.\n\nFrom-SVN: r241748", "tree": {"sha": "bcd7af4c2659c69e60e6ea832ebe225bf5664f49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcd7af4c2659c69e60e6ea832ebe225bf5664f49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad89d820bf04a06b636fe7ecd37e4e6e4a1942d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad89d820bf04a06b636fe7ecd37e4e6e4a1942d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad89d820bf04a06b636fe7ecd37e4e6e4a1942d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad89d820bf04a06b636fe7ecd37e4e6e4a1942d5/comments", "author": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aaec3d850a73cd951ccec98f2f55d62832ca2ee2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaec3d850a73cd951ccec98f2f55d62832ca2ee2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaec3d850a73cd951ccec98f2f55d62832ca2ee2"}], "stats": {"total": 115, "additions": 79, "deletions": 36}, "files": [{"sha": "7d4fd69bf8f8492151ee52f98ffe6a0ba6b376ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad89d820bf04a06b636fe7ecd37e4e6e4a1942d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad89d820bf04a06b636fe7ecd37e4e6e4a1942d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad89d820bf04a06b636fe7ecd37e4e6e4a1942d5", "patch": "@@ -1,3 +1,27 @@\n+2016-11-01  Max Filippov  <jcmvbkbc@gmail.com>\n+\n+\t* config/xtensa/xtensa-protos.h\n+\t(xtensa_use_return_instruction_p): New prototype.\n+\t* config/xtensa/xtensa.c (xtensa_current_frame_size,\n+\txtensa_callee_save_size): Remove.\n+\t(struct machine_function): Add new fields: current_frame_size,\n+\tcallee_save_size, frame_laid_out and epilogue_done.\n+\t(compute_frame_size, xtensa_expand_prologue,\n+\txtensa_expand_epilogue): Replace xtensa_callee_save_size with\n+\tcfun->machine->callee_save_size and xtensa_current_frame_size\n+\twith cfun->machine->current_frame_size.\n+\t(compute_frame_size): Update cfun->machine->frame_laid_out and\n+\tdon't update frame layout after reload completion.\n+\t(xtensa_expand_epilogue): Set cfun->machine->epilogue_done\n+\tinstead of zeroing xtensa_current_frame_size.\n+\t(xtensa_use_return_instruction_p): New function.\n+\t* config/xtensa/xtensa.h (xtensa_current_frame_size): Remove\n+\tdeclaration.\n+\t(INITIAL_ELIMINATION_OFFSET): Use return value of\n+\tcompute_frame_size instead of xtensa_current_frame_size value.\n+\t* config/xtensa/xtensa.md (\"return\" pattern): Use new predicate\n+\tfunction xtensa_use_return_instruction_p instead of inline code.\n+\n 2016-11-01  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree.h (BLOCK_IN_COLD_SECTION_P): Define."}, {"sha": "873557f03f660095d306ac57decc5bd788394547", "filename": "gcc/config/xtensa/xtensa-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad89d820bf04a06b636fe7ecd37e4e6e4a1942d5/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad89d820bf04a06b636fe7ecd37e4e6e4a1942d5/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h?ref=ad89d820bf04a06b636fe7ecd37e4e6e4a1942d5", "patch": "@@ -68,6 +68,7 @@ extern rtx xtensa_return_addr (int, rtx);\n extern void xtensa_setup_frame_addresses (void);\n extern int xtensa_dbx_register_number (int);\n extern long compute_frame_size (int);\n+extern bool xtensa_use_return_instruction_p (void);\n extern void xtensa_expand_prologue (void);\n extern void xtensa_expand_epilogue (void);\n extern void order_regs_for_local_alloc (void);"}, {"sha": "2115b57096886dc62e4632ce22970ce266cf22d2", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 51, "deletions": 31, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad89d820bf04a06b636fe7ecd37e4e6e4a1942d5/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad89d820bf04a06b636fe7ecd37e4e6e4a1942d5/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=ad89d820bf04a06b636fe7ecd37e4e6e4a1942d5", "patch": "@@ -79,11 +79,6 @@ enum internal_test\n    can support a given mode.  */\n char xtensa_hard_regno_mode_ok[(int) MAX_MACHINE_MODE][FIRST_PSEUDO_REGISTER];\n \n-/* Current frame size calculated by compute_frame_size.  */\n-unsigned xtensa_current_frame_size;\n-/* Callee-save area size in the current frame calculated by compute_frame_size. */\n-int xtensa_callee_save_size;\n-\n /* Largest block move to handle in-line.  */\n #define LARGEST_MOVE_RATIO 15\n \n@@ -95,6 +90,13 @@ struct GTY(()) machine_function\n   bool vararg_a7;\n   rtx vararg_a7_copy;\n   rtx_insn *set_frame_ptr_insn;\n+  /* Current frame size calculated by compute_frame_size.  */\n+  unsigned current_frame_size;\n+  /* Callee-save area size in the current frame calculated by\n+     compute_frame_size.  */\n+  int callee_save_size;\n+  bool frame_laid_out;\n+  bool epilogue_done;\n };\n \n /* Vector, indexed by hard register number, which contains 1 for a\n@@ -2632,24 +2634,29 @@ compute_frame_size (int size)\n {\n   int regno;\n \n+  if (reload_completed && cfun->machine->frame_laid_out)\n+    return cfun->machine->current_frame_size;\n+\n   /* Add space for the incoming static chain value.  */\n   if (cfun->static_chain_decl != NULL)\n     size += (1 * UNITS_PER_WORD);\n \n-  xtensa_callee_save_size = 0;\n+  cfun->machine->callee_save_size = 0;\n   for (regno = 0; regno < FIRST_PSEUDO_REGISTER; ++regno)\n     {\n       if (xtensa_call_save_reg(regno))\n-\txtensa_callee_save_size += UNITS_PER_WORD;\n+\tcfun->machine->callee_save_size += UNITS_PER_WORD;\n     }\n \n-  xtensa_current_frame_size =\n+  cfun->machine->current_frame_size =\n     XTENSA_STACK_ALIGN (size\n-\t\t\t+ xtensa_callee_save_size\n+\t\t\t+ cfun->machine->callee_save_size\n \t\t\t+ crtl->outgoing_args_size\n \t\t\t+ (WINDOW_SIZE * UNITS_PER_WORD));\n-  xtensa_callee_save_size = XTENSA_STACK_ALIGN (xtensa_callee_save_size);\n-  return xtensa_current_frame_size;\n+  cfun->machine->callee_save_size =\n+    XTENSA_STACK_ALIGN (cfun->machine->callee_save_size);\n+  cfun->machine->frame_laid_out = true;\n+  return cfun->machine->current_frame_size;\n }\n \n \n@@ -2703,6 +2710,7 @@ xtensa_expand_prologue (void)\n     {\n       int regno;\n       HOST_WIDE_INT offset = 0;\n+      int callee_save_size = cfun->machine->callee_save_size;\n \n       /* -128 is a limit of single addi instruction. */\n       if (total_size > 0 && total_size <= 128)\n@@ -2716,21 +2724,21 @@ xtensa_expand_prologue (void)\n \t  add_reg_note (insn, REG_FRAME_RELATED_EXPR, note_rtx);\n \t  offset = total_size - UNITS_PER_WORD;\n \t}\n-      else if (xtensa_callee_save_size)\n+      else if (callee_save_size)\n \t{\n \t  /* 1020 is maximal s32i offset, if the frame is bigger than that\n \t   * we move sp to the end of callee-saved save area, save and then\n \t   * move it to its final location. */\n \t  if (total_size > 1024)\n \t    {\n \t      insn = emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t\t\t    GEN_INT (-xtensa_callee_save_size)));\n+\t\t\t\t\t    GEN_INT (-callee_save_size)));\n \t      RTX_FRAME_RELATED_P (insn) = 1;\n \t      note_rtx = gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t      plus_constant (Pmode, stack_pointer_rtx,\n-\t\t\t\t\t\t     -xtensa_callee_save_size));\n+\t\t\t\t\t\t     -callee_save_size));\n \t      add_reg_note (insn, REG_FRAME_RELATED_EXPR, note_rtx);\n-\t      offset = xtensa_callee_save_size - UNITS_PER_WORD;\n+\t      offset = callee_save_size - UNITS_PER_WORD;\n \t    }\n \t  else\n \t    {\n@@ -2766,13 +2774,13 @@ xtensa_expand_prologue (void)\n \t{\n \t  rtx tmp_reg = gen_rtx_REG (Pmode, A9_REG);\n \t  emit_move_insn (tmp_reg, GEN_INT (total_size -\n-\t\t\t\t\t    xtensa_callee_save_size));\n+\t\t\t\t\t    callee_save_size));\n \t  insn = emit_insn (gen_subsi3 (stack_pointer_rtx,\n \t\t\t\t\tstack_pointer_rtx, tmp_reg));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t  note_rtx = gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t  plus_constant (Pmode, stack_pointer_rtx,\n-\t\t\t\t\t\t xtensa_callee_save_size -\n+\t\t\t\t\t\t callee_save_size -\n \t\t\t\t\t\t total_size));\n \t  add_reg_note (insn, REG_FRAME_RELATED_EXPR, note_rtx);\n \t}\n@@ -2840,21 +2848,21 @@ xtensa_expand_epilogue (void)\n       int regno;\n       HOST_WIDE_INT offset;\n \n-      if (xtensa_current_frame_size > (frame_pointer_needed ? 127 : 1024))\n+      if (cfun->machine->current_frame_size > (frame_pointer_needed ? 127 : 1024))\n \t{\n \t  rtx tmp_reg = gen_rtx_REG (Pmode, A9_REG);\n-\t  emit_move_insn (tmp_reg, GEN_INT (xtensa_current_frame_size -\n-\t\t\t\t\t    xtensa_callee_save_size));\n+\t  emit_move_insn (tmp_reg, GEN_INT (cfun->machine->current_frame_size -\n+\t\t\t\t\t    cfun->machine->callee_save_size));\n \t  emit_insn (gen_addsi3 (stack_pointer_rtx, frame_pointer_needed ?\n \t\t\t\t hard_frame_pointer_rtx : stack_pointer_rtx,\n \t\t\t\t tmp_reg));\n-\t  offset = xtensa_callee_save_size - UNITS_PER_WORD;\n+\t  offset = cfun->machine->callee_save_size - UNITS_PER_WORD;\n \t}\n       else\n \t{\n \t  if (frame_pointer_needed)\n \t    emit_move_insn (stack_pointer_rtx, hard_frame_pointer_rtx);\n-\t  offset = xtensa_current_frame_size - UNITS_PER_WORD;\n+\t  offset = cfun->machine->current_frame_size - UNITS_PER_WORD;\n \t}\n \n       /* Prevent reordering of saved a0 update and loading it back from\n@@ -2874,16 +2882,16 @@ xtensa_expand_epilogue (void)\n \t    }\n \t}\n \n-      if (xtensa_current_frame_size > 0)\n+      if (cfun->machine->current_frame_size > 0)\n \t{\n \t  if (frame_pointer_needed || /* always reachable with addi */\n-\t      xtensa_current_frame_size > 1024 ||\n-\t      xtensa_current_frame_size <= 127)\n+\t      cfun->machine->current_frame_size > 1024 ||\n+\t      cfun->machine->current_frame_size <= 127)\n \t    {\n-\t      if (xtensa_current_frame_size <= 127)\n-\t\toffset = xtensa_current_frame_size;\n+\t      if (cfun->machine->current_frame_size <= 127)\n+\t\toffset = cfun->machine->current_frame_size;\n \t      else\n-\t\toffset = xtensa_callee_save_size;\n+\t\toffset = cfun->machine->callee_save_size;\n \n \t      emit_insn (gen_addsi3 (stack_pointer_rtx,\n \t\t\t\t     stack_pointer_rtx,\n@@ -2892,7 +2900,8 @@ xtensa_expand_epilogue (void)\n \t  else\n \t    {\n \t      rtx tmp_reg = gen_rtx_REG (Pmode, A9_REG);\n-\t      emit_move_insn (tmp_reg, GEN_INT (xtensa_current_frame_size));\n+\t      emit_move_insn (tmp_reg,\n+\t\t\t      GEN_INT (cfun->machine->current_frame_size));\n \t      emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,\n \t\t\t\t     tmp_reg));\n \t    }\n@@ -2903,11 +2912,22 @@ xtensa_expand_epilogue (void)\n \t\t\t\t  stack_pointer_rtx,\n \t\t\t\t  EH_RETURN_STACKADJ_RTX));\n     }\n-  xtensa_current_frame_size = 0;\n-  xtensa_callee_save_size = 0;\n+  cfun->machine->epilogue_done = true;\n   emit_jump_insn (gen_return ());\n }\n \n+bool\n+xtensa_use_return_instruction_p (void)\n+{\n+  if (!reload_completed)\n+    return false;\n+  if (TARGET_WINDOWED_ABI)\n+    return true;\n+  if (compute_frame_size (get_frame_size ()) == 0)\n+    return true;\n+  return cfun->machine->epilogue_done;\n+}\n+\n void\n xtensa_set_return_address (rtx address, rtx scratch)\n {"}, {"sha": "58eb1b2604a73a7db9530185f667fda6f8b0df13", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad89d820bf04a06b636fe7ecd37e4e6e4a1942d5/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad89d820bf04a06b636fe7ecd37e4e6e4a1942d5/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=ad89d820bf04a06b636fe7ecd37e4e6e4a1942d5", "patch": "@@ -23,8 +23,6 @@ along with GCC; see the file COPYING3.  If not see\n \n /* External variables defined in xtensa.c.  */\n \n-extern unsigned xtensa_current_frame_size;\n-\n /* Macros used in the machine description to select various Xtensa\n    configuration options.  */\n #ifndef XCHAL_HAVE_MUL32_HIGH\n@@ -477,14 +475,14 @@ enum reg_class\n /* Specify the initial difference between the specified pair of registers.  */\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    compute_frame_size (get_frame_size ());\t\t\t\t\\\n+    long frame_size = compute_frame_size (get_frame_size ());\t\t\\\n     switch (FROM)\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n       case FRAME_POINTER_REGNUM:\t\t\t\t\t\\\n         (OFFSET) = 0;\t\t\t\t\t\t\t\\\n \tbreak;\t\t\t\t\t\t\t\t\\\n       case ARG_POINTER_REGNUM:\t\t\t\t\t\t\\\n-        (OFFSET) = xtensa_current_frame_size;\t\t\t\t\\\n+        (OFFSET) = frame_size;\t\t\t\t\t\t\\\n \tbreak;\t\t\t\t\t\t\t\t\\\n       default:\t\t\t\t\t\t\t\t\\\n \tgcc_unreachable ();\t\t\t\t\t\t\\"}, {"sha": "fcdb6c8ecadf9065727cfe1102885f7decdf204c", "filename": "gcc/config/xtensa/xtensa.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad89d820bf04a06b636fe7ecd37e4e6e4a1942d5/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad89d820bf04a06b636fe7ecd37e4e6e4a1942d5/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.md?ref=ad89d820bf04a06b636fe7ecd37e4e6e4a1942d5", "patch": "@@ -1663,7 +1663,7 @@\n (define_insn \"return\"\n   [(return)\n    (use (reg:SI A0_REG))]\n-  \"(TARGET_WINDOWED_ABI || !xtensa_current_frame_size) && reload_completed\"\n+  \"xtensa_use_return_instruction_p ()\"\n {\n   return TARGET_WINDOWED_ABI ?\n       (TARGET_DENSITY ? \"retw.n\" : \"retw\") :"}]}