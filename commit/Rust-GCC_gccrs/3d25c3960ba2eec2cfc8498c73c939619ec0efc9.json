{"sha": "3d25c3960ba2eec2cfc8498c73c939619ec0efc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QyNWMzOTYwYmEyZWVjMmNmYzg0OThjNzNjOTM5NjE5ZWMwZWZjOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-06-11T09:38:59Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-06-11T09:38:59Z"}, "message": "i386.md (pro_epilogue_adjust_stack_1): Assert that operand 0 == operand 1.\n\n\t* config/i386/i386.md (pro_epilogue_adjust_stack_1) <TYPE_ALU>: Assert\n\tthat operand 0 == operand 1.  Use x86_maybe_negate_const_int to output\n\tinsn mnemonic.\n\t(pro_epilogue_adjust_stack_rex64) <TYPE_ALU>: Ditto.\n\nFrom-SVN: r160600", "tree": {"sha": "36aa62d4a138ab5c5321dd245cafdb56948e9a4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36aa62d4a138ab5c5321dd245cafdb56948e9a4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d25c3960ba2eec2cfc8498c73c939619ec0efc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d25c3960ba2eec2cfc8498c73c939619ec0efc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d25c3960ba2eec2cfc8498c73c939619ec0efc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d25c3960ba2eec2cfc8498c73c939619ec0efc9/comments", "author": null, "committer": null, "parents": [{"sha": "b66a8c5da87a3dd092752d9edf55d61589149aed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b66a8c5da87a3dd092752d9edf55d61589149aed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b66a8c5da87a3dd092752d9edf55d61589149aed"}], "stats": {"total": 126, "additions": 58, "deletions": 68}, "files": [{"sha": "561b0eed0f961b7a30d0b9419029af4eb10c6ef8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 48, "deletions": 42, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d25c3960ba2eec2cfc8498c73c939619ec0efc9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d25c3960ba2eec2cfc8498c73c939619ec0efc9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d25c3960ba2eec2cfc8498c73c939619ec0efc9", "patch": "@@ -1,3 +1,10 @@\n+2010-06-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (pro_epilogue_adjust_stack_1) <TYPE_ALU>: Assert\n+\tthat operand 0 == operand 1.  Use x86_maybe_negate_const_int to output\n+\tinsn mnemonic.\n+\t(pro_epilogue_adjust_stack_rex64) <TYPE_ALU>: Ditto.\n+\n 2010-06-10  Dodji Seketeli  <dodji@redhat.com>\n \n \tFix bootstap on mips\n@@ -469,8 +476,7 @@\n \t* gensupport.h (message_with_line, n_comma_elts, scan_comma_elt):\n \tMove to read-md.h.\n \t* gensupport.c: Include read-md.h.\n-\t(message_with_line, n_comma_elts, scan_comma_elt): Move to\n-\tread-md.c.\n+\t(message_with_line, n_comma_elts, scan_comma_elt): Move to read-md.c.\n \t* read-md.h, read-md.c: New files.\n \n 2010-06-10  Anatoly Sokolov  <aesok@post.ru>\n@@ -541,8 +547,8 @@\n 2010-06-10  Jan Hubicka  <jh@suse.cz>\n \n \tPR rtl-optimization/44460\n-\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Remove TYPE_NEEDS_CONSTRUCTING\n-\tsanity check.\n+\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Remove\n+\tTYPE_NEEDS_CONSTRUCTING sanity check.\n \n 2010-06-10  Gerald Pfeifer  <gerald@pfeifer.com>\n \n@@ -576,9 +582,9 @@\n \n 2010-06-09  Changpeng Fang  <changpeng.fang@amd.com>\n \n-        * tree-ssa-loop-prefetch.c (PREFETCH_MOD_TO_UNROLL_FACTOR_RATIO) :\n-        Change the PREFETCH_MOD_TO_UNROLL_FACTOR_RATIO threshold value from\n-        8 to 4.  Minor change of the related comments.\n+\t* tree-ssa-loop-prefetch.c (PREFETCH_MOD_TO_UNROLL_FACTOR_RATIO) :\n+\tChange the PREFETCH_MOD_TO_UNROLL_FACTOR_RATIO threshold value from\n+\t8 to 4.  Minor change of the related comments.\n \n 2010-06-09  Sebastian Pop  <sebastian.pop@amd.com>\n \n@@ -634,11 +640,12 @@\n \t* tree-vectorizer.h (vinfo_for_stmt): Remove check.\n \t(set_vinfo_for_stmt, get_earlier_stmt, is_loop_header_bb_p): Change\n \tgcc_assert to gcc_checking_assert.\n-\t* tree-flow-inline.h (gimple_vop, get_var_ann, relink_imm_use, phi_nodes\n-\tset_phi_nodes, phi_arg_index_from_use, op_iter_next_use,\n+\t* tree-flow-inline.h (gimple_vop, get_var_ann, relink_imm_use,\n+\tphi_nodes, set_phi_nodes, phi_arg_index_from_use, op_iter_next_use,\n \top_iter_next_def, op_iter_next_tree, op_iter_init, op_iter_init_use,\n-\top_iter_init_phiuse, op_iter_init_phidef, array_ref_contains_indirect_ref,\n-\tref_contains_array_ref): Use gcc_checking_assert.\n+\top_iter_init_phiuse, op_iter_init_phidef,\n+\tarray_ref_contains_indirect_ref, ref_contains_array_ref): Use\n+\tgcc_checking_assert.\n \t* emit-rtl.h (set_first_insn, set_last_insn): Likewise.\n \t* tree-ssa-live.h (var_to_partition, var_to_partition_to_var,\n \tpartition_is_global, live_on_entry, live_on_exit,\n@@ -653,24 +660,26 @@\n 2010-06-09  Jan Hubicka  <jh@suse.cz>\n \n \t* gimple.h (gcc_gimple_checking_assert): New macro.\n- \t(gimple_set_def_ops, gimple_set_use_ops,\n- \tgimple_set_vuse, gimple_set_vdef,\n- \tgimple_omp_subcode, gimple_omp_set_subcode, gimple_ops, gimple_op,\n- \tgimple_op_ptr, gimple_op_ptr, gimple_set_op, gimple_bind_set_block,\n- \tgimple_asm_input_op, gimple_asm_input_op_ptr, gimple_asm_set_input_op,\n- \tgimple_asm_output_op, gimple_asm_output_op_ptr,\n- \tgimple_asm_set_output_op, gimple_asm_clobber_op, \n- \tgimple_asm_set_clobber_op, gimple_asm_label_op,\n- \tgimple_asm_set_label_op, gimple_try_set_kind, gimple_try_catch_is_cleanup\n- \tgimple_try_set_catch_is_cleanup, gimple_phi_arg, \n- \tgimple_switch_num_labels, gimple_switch_set_index, gimple_switch_label,\n- \tgimple_switch_set_label, gimple_omp_for_index, gimple_omp_for_index_ptr,\n- \tgimple_omp_for_set_index, gimple_omp_for_initial, gimple_omp_for_initial_ptr,\n- \tgimple_omp_for_set_initial, gimple_omp_for_final, gimple_omp_for_final_ptr,\n- \tgimple_omp_for_set_final, gimple_omp_for_incr, gimple_omp_for_incr_ptr,\n- \tgimple_omp_for_set_incr, gimple_omp_for_set_cond, gimple_omp_for_cond): Make\n- \tchecking conditional with ENABLE_GIMPLE_CHECKING.\n- \t(gimple_phi_set_arg): Likewise; replace memcpy by assignment.\n+\t(gimple_set_def_ops, gimple_set_use_ops,\n+\tgimple_set_vuse, gimple_set_vdef,\n+\tgimple_omp_subcode, gimple_omp_set_subcode, gimple_ops, gimple_op,\n+\tgimple_op_ptr, gimple_op_ptr, gimple_set_op, gimple_bind_set_block,\n+\tgimple_asm_input_op, gimple_asm_input_op_ptr, gimple_asm_set_input_op,\n+\tgimple_asm_output_op, gimple_asm_output_op_ptr,\n+\tgimple_asm_set_output_op, gimple_asm_clobber_op,\n+\tgimple_asm_set_clobber_op, gimple_asm_label_op,\n+\tgimple_asm_set_label_op, gimple_try_set_kind,\n+\tgimple_try_catch_is_cleanup, gimple_try_set_catch_is_cleanup,\n+\tgimple_phi_arg, gimple_switch_num_labels, gimple_switch_set_index,\n+\tgimple_switch_label, gimple_switch_set_label, gimple_omp_for_index,\n+\tgimple_omp_for_index_ptr, gimple_omp_for_set_index,\n+\tgimple_omp_for_initial, gimple_omp_for_initial_ptr,\n+\tgimple_omp_for_set_initial, gimple_omp_for_final,\n+\tgimple_omp_for_final_ptr, gimple_omp_for_set_final,\n+\tgimple_omp_for_incr, gimple_omp_for_incr_ptr, gimple_omp_for_set_incr,\n+\tgimple_omp_for_set_cond, gimple_omp_for_cond): Make checking\n+\tconditional with ENABLE_GIMPLE_CHECKING.\n+\t(gimple_phi_set_arg): Likewise; replace memcpy by assignment.\n \n 2010-06-09  Sandra Loosemore  <sandra@codesourcery.com>\n \n@@ -927,8 +936,7 @@\n \n \t* tree-cfg.c (create_bb): Update comment to not reference\n \tggc_alloc_cleared.\n-\t* tree-ssa-structalias.c (struct heapvar_for_stmt): Fix param_is\n-\tvalue.\n+\t* tree-ssa-structalias.c (struct heapvar_for_stmt): Fix param_is value.\n \n \t* varpool.c (varpool_node): Use typed GC allocation.\n \t(varpool_extra_name_alias): Likewise.\n@@ -1157,7 +1165,7 @@\n \t(init_alias_analysis): Likewise.\n \n 2010-06-08  Shujing Zhao  <pearly.zhao@oracle.com>\n-\t\n+\n \t* fold-const.c (fold_comparison): Remove redundant parenthesis.\n \t* tree-inline.c (expand_call_inline): Pass translated return value of\n \tcgraph_inline_failed_string to diagnostic function.\n@@ -1230,8 +1238,7 @@\n \ttoplev.c.\n \t* flags.h (flag_signed_char, flag_short_enums,\n \tflag_pcc_struct_return, flag_ira_verbose,\n-\tflag_detailed_statistics, flag_remove_unreachable_functions):\n-\tRemove.\n+\tflag_detailed_statistics, flag_remove_unreachable_functions): Remove.\n \t* toplev.c (flag_detailed_statistics, flag_signed_char,\n \tflag_short_enums, flag_pcc_struct_return, flag_ira_verbose): Remove.\n \t(DEFAULT_PCC_STRUCT_RETURN): Move definition to defaults.h.\n@@ -1276,7 +1283,7 @@\n \n \tPR rtl-optimization/44404\n \t* auto-inc-dec.c (find_inc): Use reg_overlap_mentioned_p instead\n-\tof count_occurrences to see if it's safe to modify mem_insn.insn.\n+\tof count_occurrences to see if it's safe to modify mem_insn.\n \n 2010-06-07  Richard Guenther  <rguenther@suse.de>\n \n@@ -1457,8 +1464,7 @@\n \n \t* tree-into-ssa.c (insert_phi_nodes): Use bitmap heads\n \tfor dominance frontiers.\n-\t(rewrite_into_ssa): Update for bitmap heads in dominance\n-\tfrontiers.\n+\t(rewrite_into_ssa): Update for bitmap heads in dominance frontiers.\n \t(insert_updated_phi_nodes_for): Likewise.\n \t(update_ssa): Likewise.\n \t* cfganal.c (compute_dominance_frontiers_1): Likewise.\n@@ -2744,10 +2750,10 @@\n \n 2010-05-29  Steven Bosscher  <steven@gcc.gnu.org>\n \n- \t* c-lex.c: Do not include c-tree.h.\n- \t* c-pretty-print.c: Likewise.\n- \t* c-opts.c: Likewise.\n- \t* c-gimplify.c: Likewise.\n+\t* c-lex.c: Do not include c-tree.h.\n+\t* c-pretty-print.c: Likewise.\n+\t* c-opts.c: Likewise.\n+\t* c-gimplify.c: Likewise.\n \t* c-common.c: Likewise.\n \t* c-dump.c: Likewise.  Include c-common.h.\n \n@@ -8172,7 +8178,7 @@\n \t(next_operand_entry_id): New static variable.\n \t(sort_by_operand_rank): Stabilize qsort comparator by using unique IDs.\n \t(add_to_ops_vec): Assigned unique ID to operand entry.\n- \t(struct oecount_s): New field ID.\n+\t(struct oecount_s): New field ID.\n \t(oecount_cmp): Stabilize qsort comparotor by using unique IDs.\n \t(undistribute_ops_list): Assign unique IDs to oecounts.\n \t(init_reassoc): reset next_operand_entry_id."}, {"sha": "37f3f99b76abdc0374ca54d8c8ef464b0aec42d4", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 10, "deletions": 26, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d25c3960ba2eec2cfc8498c73c939619ec0efc9/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d25c3960ba2eec2cfc8498c73c939619ec0efc9/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3d25c3960ba2eec2cfc8498c73c939619ec0efc9", "patch": "@@ -16539,22 +16539,15 @@\n       return \"mov{l}\\t{%1, %0|%0, %1}\";\n \n     case TYPE_ALU:\n-      if (CONST_INT_P (operands[2])\n-          && (INTVAL (operands[2]) == 128\n-\t      || (INTVAL (operands[2]) < 0\n-\t          && INTVAL (operands[2]) != -128)))\n-\t{\n-\t  operands[2] = GEN_INT (-INTVAL (operands[2]));\n-\t  return \"sub{l}\\t{%2, %0|%0, %2}\";\n-\t}\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n+      if (x86_maybe_negate_const_int (&operands[2], SImode))\n+\treturn \"sub{l}\\t{%2, %0|%0, %2}\";\n+\n       return \"add{l}\\t{%2, %0|%0, %2}\";\n \n-    case TYPE_LEA:\n+    default:\n       operands[2] = SET_SRC (XVECEXP (PATTERN (insn), 0, 0));\n       return \"lea{l}\\t{%a2, %0|%0, %a2}\";\n-\n-    default:\n-      gcc_unreachable ();\n     }\n }\n   [(set (attr \"type\")\n@@ -16589,24 +16582,15 @@\n       return \"mov{q}\\t{%1, %0|%0, %1}\";\n \n     case TYPE_ALU:\n-      if (CONST_INT_P (operands[2])\n-\t  /* Avoid overflows.  */\n-\t  && ((INTVAL (operands[2]) & ((((unsigned int) 1) << 31) - 1)))\n-          && (INTVAL (operands[2]) == 128\n-\t      || (INTVAL (operands[2]) < 0\n-\t          && INTVAL (operands[2]) != -128)))\n-\t{\n-\t  operands[2] = GEN_INT (-INTVAL (operands[2]));\n-\t  return \"sub{q}\\t{%2, %0|%0, %2}\";\n-\t}\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n+      if (x86_maybe_negate_const_int (&operands[2], DImode))\n+\treturn \"sub{q}\\t{%2, %0|%0, %2}\";\n+\n       return \"add{q}\\t{%2, %0|%0, %2}\";\n \n-    case TYPE_LEA:\n+    default:\n       operands[2] = SET_SRC (XVECEXP (PATTERN (insn), 0, 0));\n       return \"lea{q}\\t{%a2, %0|%0, %a2}\";\n-\n-    default:\n-      gcc_unreachable ();\n     }\n }\n   [(set (attr \"type\")"}]}