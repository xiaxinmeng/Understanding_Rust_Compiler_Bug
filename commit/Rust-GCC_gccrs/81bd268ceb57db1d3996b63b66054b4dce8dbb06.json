{"sha": "81bd268ceb57db1d3996b63b66054b4dce8dbb06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFiZDI2OGNlYjU3ZGIxZDM5OTZiNjNiNjYwNTRiNGRjZThkYmIwNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-10-07T23:08:49Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-10-07T23:08:49Z"}, "message": "pt.c (fold_non_dependent_expr_sfinae): Remove static specifier.\n\n2012-10-07  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* pt.c (fold_non_dependent_expr_sfinae): Remove static specifier.\n\t(tsubst_copy_and_build): Use get_target_expr_sfinae.\n\t* call.c (build_conditional_expr_1, convert_like_real): Likewise.\n\t* cvt.c (build_up_reference): Likewise.\n\t(ocp_convert): Use abstract_virtuals_error_sfinae.\n\t(build_up_reference): Propagate complain to cp_build_addr_expr.\n\t* decl.c (compute_array_index_type): Use fold_non_dependent_expr_sfinae.\n\t* cp-tree.h: Update declarations.\n\n\t* cvt.c\t(build_expr_type_conversion): Tidy.\n\n\t* tree.c (stabilize_aggr_init): Change to static.\n\nFrom-SVN: r192188", "tree": {"sha": "533268d5a2c1921373458d7bde290aa546ce188c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/533268d5a2c1921373458d7bde290aa546ce188c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81bd268ceb57db1d3996b63b66054b4dce8dbb06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81bd268ceb57db1d3996b63b66054b4dce8dbb06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81bd268ceb57db1d3996b63b66054b4dce8dbb06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81bd268ceb57db1d3996b63b66054b4dce8dbb06/comments", "author": null, "committer": null, "parents": [{"sha": "a5061eed103e5e87e8416ac9e181423a8853ce0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5061eed103e5e87e8416ac9e181423a8853ce0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5061eed103e5e87e8416ac9e181423a8853ce0f"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "525efe4171270a9495ace01800e89a423cbae3e7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81bd268ceb57db1d3996b63b66054b4dce8dbb06/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81bd268ceb57db1d3996b63b66054b4dce8dbb06/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=81bd268ceb57db1d3996b63b66054b4dce8dbb06", "patch": "@@ -1,3 +1,18 @@\n+2012-10-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* pt.c (fold_non_dependent_expr_sfinae): Remove static specifier.\n+\t(tsubst_copy_and_build): Use get_target_expr_sfinae.\n+\t* call.c (build_conditional_expr_1, convert_like_real): Likewise.\n+\t* cvt.c (build_up_reference): Likewise.\n+\t(ocp_convert): Use abstract_virtuals_error_sfinae.\n+\t(build_up_reference): Propagate complain to cp_build_addr_expr.\n+\t* decl.c (compute_array_index_type): Use fold_non_dependent_expr_sfinae.\n+\t* cp-tree.h: Update declarations.\n+\n+\t* cvt.c\t(build_expr_type_conversion): Tidy.\n+\n+\t* tree.c (stabilize_aggr_init): Change to static.\n+\n 2012-10-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51422"}, {"sha": "f58dc8a52e070824c611bdcc5cf1088f26a189cd", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81bd268ceb57db1d3996b63b66054b4dce8dbb06/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81bd268ceb57db1d3996b63b66054b4dce8dbb06/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=81bd268ceb57db1d3996b63b66054b4dce8dbb06", "patch": "@@ -4777,7 +4777,7 @@ build_conditional_expr_1 (tree arg1, tree arg2, tree arg3,\n \t but now we sometimes wrap them in NOP_EXPRs so the test would\n \t fail.  */\n       if (CLASS_TYPE_P (TREE_TYPE (result)))\n-\tresult = get_target_expr (result);\n+\tresult = get_target_expr_sfinae (result, complain);\n       /* If this expression is an rvalue, but might be mistaken for an\n \t lvalue, we must add a NON_LVALUE_EXPR.  */\n       result = rvalue (result);\n@@ -5883,7 +5883,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \tfield = next_initializable_field (DECL_CHAIN (field));\n \tCONSTRUCTOR_APPEND_ELT (vec, field, size_int (len));\n \tnew_ctor = build_constructor (totype, vec);\n-\treturn get_target_expr (new_ctor);\n+\treturn get_target_expr_sfinae (new_ctor, complain);\n       }\n \n     case ck_aggr:\n@@ -5899,7 +5899,8 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t  return fold_if_not_in_template (expr);\n \t}\n       expr = reshape_init (totype, expr, complain);\n-      return get_target_expr (digest_init (totype, expr, complain));\n+      return get_target_expr_sfinae (digest_init (totype, expr, complain),\n+\t\t\t\t     complain);\n \n     default:\n       break;"}, {"sha": "00f2d4a255bc7d43382754a0e7fd473b9cc7d1ea", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81bd268ceb57db1d3996b63b66054b4dce8dbb06/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81bd268ceb57db1d3996b63b66054b4dce8dbb06/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=81bd268ceb57db1d3996b63b66054b4dce8dbb06", "patch": "@@ -5411,6 +5411,7 @@ extern tree build_non_dependent_expr\t\t(tree);\n extern void make_args_non_dependent\t\t(VEC(tree,gc) *);\n extern bool reregister_specialization\t\t(tree, tree, tree);\n extern tree fold_non_dependent_expr\t\t(tree);\n+extern tree fold_non_dependent_expr_sfinae\t(tree, tsubst_flags_t);\n extern bool alias_type_or_template_p            (tree);\n extern bool alias_template_specialization_p     (tree);\n extern bool explicit_class_specialization_p     (tree);\n@@ -5700,7 +5701,6 @@ extern void lang_check_failed\t\t\t(const char *, int,\n \t\t\t\t\t\t const char *) ATTRIBUTE_NORETURN;\n extern tree stabilize_expr\t\t\t(tree, tree *);\n extern void stabilize_call\t\t\t(tree, tree *);\n-extern void stabilize_aggr_init\t\t\t(tree, tree *);\n extern bool stabilize_init\t\t\t(tree, tree *);\n extern tree add_stmt_to_compound\t\t(tree, tree);\n extern void init_tree\t\t\t\t(void);"}, {"sha": "d30c7e5309e8cf63196ce2419cbd6afea90b1b0b", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81bd268ceb57db1d3996b63b66054b4dce8dbb06/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81bd268ceb57db1d3996b63b66054b4dce8dbb06/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=81bd268ceb57db1d3996b63b66054b4dce8dbb06", "patch": "@@ -339,12 +339,12 @@ build_up_reference (tree type, tree arg, int flags, tree decl,\n \t\t      LOOKUP_ONLYCONVERTING|DIRECT_BIND);\n     }\n   else if (!(flags & DIRECT_BIND) && ! lvalue_p (arg))\n-    return get_target_expr (arg);\n+    return get_target_expr_sfinae (arg, complain);\n \n   /* If we had a way to wrap this up, and say, if we ever needed its\n      address, transform all occurrences of the register, into a memory\n      reference we could win better.  */\n-  rval = cp_build_addr_expr (arg, tf_warning_or_error);\n+  rval = cp_build_addr_expr (arg, complain);\n   if (rval == error_mark_node)\n     return error_mark_node;\n \n@@ -842,7 +842,7 @@ ocp_convert (tree type, tree expr, int convtype, int flags,\n \n       ctor = e;\n \n-      if (abstract_virtuals_error (NULL_TREE, type))\n+      if (abstract_virtuals_error_sfinae (NULL_TREE, type, complain))\n \treturn error_mark_node;\n \n       if (BRACE_ENCLOSED_INITIALIZER_P (ctor))\n@@ -1514,8 +1514,6 @@ build_expr_type_conversion (int desires, tree expr, bool complain)\n \t\t  \"converting NULL to non-pointer type\");\n     }\n \n-  basetype = TREE_TYPE (expr);\n-\n   if (basetype == error_mark_node)\n     return error_mark_node;\n "}, {"sha": "c162734cd911b1fca2ac817797a4123282902cc4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81bd268ceb57db1d3996b63b66054b4dce8dbb06/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81bd268ceb57db1d3996b63b66054b4dce8dbb06/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=81bd268ceb57db1d3996b63b66054b4dce8dbb06", "patch": "@@ -7990,7 +7990,7 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n \t   NOP_EXPR with TREE_SIDE_EFFECTS; don't fold in that case.  */;\n       else\n \t{\n-\t  size = fold_non_dependent_expr (size);\n+\t  size = fold_non_dependent_expr_sfinae (size, complain);\n \n \t  if (CLASS_TYPE_P (type)\n \t      && CLASSTYPE_LITERAL_P (type))"}, {"sha": "1377b3eed5204573a7b361f10d39c0a35db2421e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81bd268ceb57db1d3996b63b66054b4dce8dbb06/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81bd268ceb57db1d3996b63b66054b4dce8dbb06/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=81bd268ceb57db1d3996b63b66054b4dce8dbb06", "patch": "@@ -5020,7 +5020,7 @@ redeclare_class_template (tree type, tree parms)\n /* Simplify EXPR if it is a non-dependent expression.  Returns the\n    (possibly simplified) expression.  */\n \n-static tree\n+tree\n fold_non_dependent_expr_sfinae (tree expr, tsubst_flags_t complain)\n {\n   if (expr == NULL_TREE)\n@@ -14287,7 +14287,8 @@ tsubst_copy_and_build (tree t,\n          FIXME stop folding in cp_parser_initializer_clause.  */\n       gcc_assert (TREE_CONSTANT (t));\n       {\n-\ttree r = get_target_expr (RECUR (TARGET_EXPR_INITIAL (t)));\n+\ttree r = get_target_expr_sfinae (RECUR (TARGET_EXPR_INITIAL (t)),\n+\t\t\t\t\t complain);\n \tTREE_CONSTANT (r) = true;\n \tRETURN (r);\n       }"}, {"sha": "e1af378645a47449cd89073b73980e06f75c98cf", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81bd268ceb57db1d3996b63b66054b4dce8dbb06/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81bd268ceb57db1d3996b63b66054b4dce8dbb06/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=81bd268ceb57db1d3996b63b66054b4dce8dbb06", "patch": "@@ -3557,7 +3557,7 @@ stabilize_call (tree call, tree *initp)\n    arguments, while, upon return, *INITP contains an expression to\n    compute the arguments.  */\n \n-void\n+static void\n stabilize_aggr_init (tree call, tree *initp)\n {\n   tree inits = NULL_TREE;"}]}