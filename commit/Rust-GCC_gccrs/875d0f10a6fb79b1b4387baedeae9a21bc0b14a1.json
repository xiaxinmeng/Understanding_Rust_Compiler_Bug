{"sha": "875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc1ZDBmMTBhNmZiNzliMWI0Mzg3YmFlZGVhZTlhMjFiYzBiMTRhMQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2009-05-20T04:05:21Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-05-20T04:05:21Z"}, "message": "14340.cc: Abstract list type.\n\n2009-05-19  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/23_containers/list/14340.cc: Abstract list type.\n\t* testsuite/23_containers/list/init-list.cc: Same.\n\t* testsuite/23_containers/list/pthread5.cc: Same.\n\t* testsuite/23_containers/list/invalidation/1.cc: Same.\n\t* testsuite/23_containers/list/invalidation/2.cc: Same.\n\t* testsuite/23_containers/list/invalidation/3.cc: Same.\n\t* testsuite/23_containers/list/invalidation/4.cc: Same.\n\t* testsuite/23_containers/list/modifiers/insert/25288.cc: Same.\n\t* testsuite/23_containers/list/modifiers/1.cc: Same.\n\t* testsuite/23_containers/list/modifiers/2.cc: Same.\n\t* testsuite/23_containers/list/modifiers/3.cc: Same.\n\t* testsuite/23_containers/list/modifiers/swap/1.cc: Same.\n\t* testsuite/23_containers/list/modifiers/swap/2.cc: Same.\n\t* testsuite/23_containers/list/modifiers/swap/3.cc: Same.\n\t* testsuite/23_containers/list/cons/1.cc: Same.\n\t* testsuite/23_containers/list/cons/2.cc: Same.\n\t* testsuite/23_containers/list/cons/3.cc: Same.\n\t* testsuite/23_containers/list/cons/4.cc: Same.\n\t* testsuite/23_containers/list/cons/5.cc: Same.\n\t* testsuite/23_containers/list/cons/6.cc: Same.\n\t* testsuite/23_containers/list/cons/7.cc: Same.\n\t* testsuite/23_containers/list/cons/clear_allocator.cc: Same.\n\t* testsuite/23_containers/list/cons/8.cc: Same.\n\t* testsuite/23_containers/list/cons/9.cc: Same.\n\t* testsuite/23_containers/list/operations/1.cc: Same.\n\t* testsuite/23_containers/list/operations/2.cc: Same.\n\t* testsuite/23_containers/list/operations/3.cc: Same.\n\t* testsuite/23_containers/list/operations/4.cc: Same.\n\t* testsuite/23_containers/list/operations/5.cc: Same.\n\t* testsuite/23_containers/list/requirements/citerators.cc: Same.\n\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc: Same.\n\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc: Same.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_1_neg.cc: Same.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_2_neg.cc: Same.\n\t* testsuite/23_containers/list/requirements/dr438/constructor.cc: Same.\n\t* testsuite/23_containers/list/requirements/\n\tpartial_specialization/1.cc: Same.\n\t* testsuite/23_containers/list/23781.cc: Same.\n\t* testsuite/23_containers/list/pthread1.cc: Same.\n\t* testsuite/23_containers/list/capacity/1.cc: Same.\n\t* testsuite/23_containers/list/capacity/29134.cc: Same.\n\t* testsuite/23_containers/list/check_construct_destroy.cc: Same.\n\t* testsuite/23_containers/list/moveable.cc: Same.\n\n\t* testsuite/util/common_type/assoc/common_type.hpp: Re-break lines.\n\nFrom-SVN: r147728", "tree": {"sha": "dc0ad6d2d060b0ec8282bd5937aebdc5b82254b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc0ad6d2d060b0ec8282bd5937aebdc5b82254b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/comments", "author": null, "committer": null, "parents": [{"sha": "e36dc33956a6d09220a9aaaf6a0046b658769bfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e36dc33956a6d09220a9aaaf6a0046b658769bfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e36dc33956a6d09220a9aaaf6a0046b658769bfd"}], "stats": {"total": 1001, "additions": 572, "deletions": 429}, "files": [{"sha": "80460d3a8d01bba918e6c689ae6089c3f694fad8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -1,3 +1,53 @@\n+2009-05-19  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/23_containers/list/14340.cc: Abstract list type.\n+\t* testsuite/23_containers/list/init-list.cc: Same.\n+\t* testsuite/23_containers/list/pthread5.cc: Same.\n+\t* testsuite/23_containers/list/invalidation/1.cc: Same.\n+\t* testsuite/23_containers/list/invalidation/2.cc: Same.\n+\t* testsuite/23_containers/list/invalidation/3.cc: Same.\n+\t* testsuite/23_containers/list/invalidation/4.cc: Same.\n+\t* testsuite/23_containers/list/modifiers/insert/25288.cc: Same.\n+\t* testsuite/23_containers/list/modifiers/1.cc: Same.\n+\t* testsuite/23_containers/list/modifiers/2.cc: Same.\n+\t* testsuite/23_containers/list/modifiers/3.cc: Same.\n+\t* testsuite/23_containers/list/modifiers/swap/1.cc: Same.\n+\t* testsuite/23_containers/list/modifiers/swap/2.cc: Same.\n+\t* testsuite/23_containers/list/modifiers/swap/3.cc: Same.\n+\t* testsuite/23_containers/list/cons/1.cc: Same.\n+\t* testsuite/23_containers/list/cons/2.cc: Same.\n+\t* testsuite/23_containers/list/cons/3.cc: Same.\n+\t* testsuite/23_containers/list/cons/4.cc: Same.\n+\t* testsuite/23_containers/list/cons/5.cc: Same.\n+\t* testsuite/23_containers/list/cons/6.cc: Same.\n+\t* testsuite/23_containers/list/cons/7.cc: Same.\n+\t* testsuite/23_containers/list/cons/clear_allocator.cc: Same.\n+\t* testsuite/23_containers/list/cons/8.cc: Same.\n+\t* testsuite/23_containers/list/cons/9.cc: Same.\n+\t* testsuite/23_containers/list/operations/1.cc: Same.\n+\t* testsuite/23_containers/list/operations/2.cc: Same.\n+\t* testsuite/23_containers/list/operations/3.cc: Same.\n+\t* testsuite/23_containers/list/operations/4.cc: Same.\n+\t* testsuite/23_containers/list/operations/5.cc: Same.\n+\t* testsuite/23_containers/list/requirements/citerators.cc: Same.\n+\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc: Same.\n+\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc: Same.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_1_neg.cc: Same.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_2_neg.cc: Same.\n+\t* testsuite/23_containers/list/requirements/dr438/constructor.cc: Same.\n+\t* testsuite/23_containers/list/requirements/\n+\tpartial_specialization/1.cc: Same.\n+\t* testsuite/23_containers/list/23781.cc: Same.\n+\t* testsuite/23_containers/list/pthread1.cc: Same.\n+\t* testsuite/23_containers/list/capacity/1.cc: Same.\n+\t* testsuite/23_containers/list/capacity/29134.cc: Same.\n+\t* testsuite/23_containers/list/check_construct_destroy.cc: Same.\n+\t* testsuite/23_containers/list/moveable.cc: Same.\n+\n+\t* testsuite/util/common_type/assoc/common_type.hpp: Re-break lines.\n+\n 2009-05-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/40184"}, {"sha": "26b5df6d05916b4120b112a51b41ca86ad522b6b", "filename": "libstdc++-v3/testsuite/23_containers/list/14340.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F14340.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F14340.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F14340.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -27,7 +27,7 @@\n // libstdc++/14340\n int main()\n {\n-  typedef std::list<int> container;\n-  __gnu_test::conversion<container>::iterator_to_const_iterator();\n+  typedef std::list<int> list_type;\n+  __gnu_test::conversion<list_type>::iterator_to_const_iterator();\n   return 0;\n }"}, {"sha": "ca275bda5ad1f3f06adcd16e565794de7e57c6ea", "filename": "libstdc++-v3/testsuite/23_containers/list/23781.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F23781.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F23781.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F23781.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -23,5 +23,6 @@\n // libstdc++/23781\n #include <list>\n \n-std::list<int>::iterator it = NULL; // { dg-error \"conversion\" }\n-std::list<int>::const_iterator cit = NULL; // { dg-error \"conversion\" }\n+typedef std::list<int> list_type;\n+list_type::iterator it = NULL; // { dg-error \"conversion\" }\n+list_type::const_iterator cit = NULL; // { dg-error \"conversion\" }"}, {"sha": "d820776e3a8c4881898b3112c22a6b6e9f215f6c", "filename": "libstdc++-v3/testsuite/23_containers/list/capacity/1.cc", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcapacity%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcapacity%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcapacity%2F1.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -20,8 +20,6 @@\n #include <list>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n // This test verifies the following.\n //\n // 23.2.2       bool empty() const\n@@ -32,10 +30,15 @@ bool test __attribute__((unused)) = true;\n // 23.2.2       size_type max_size() const\n // 23.2.2.2     void resize(size_type s, T c = T())\n //\n+template<typename _Tp>\n void\n-test01()\n+capacity01()\n {\n-  std::list<int> list0101;\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+  typedef typename list_type::iterator iterator_type;\n+\n+  list_type list0101;\n   VERIFY(list0101.empty());\n   VERIFY(list0101.size() == 0);\n \n@@ -47,7 +50,7 @@ test01()\n   VERIFY(!list0101.empty());\n   VERIFY(list0101.size() == 3);\n \n-  std::list<int>::iterator i = list0101.begin();\n+  iterator_type i = list0101.begin();\n   VERIFY(*i == 1); ++i;\n   VERIFY(*i == 2); ++i;\n   VERIFY(*i == 2); ++i;\n@@ -61,8 +64,6 @@ test01()\n int\n main()\n {\n-  test01();\n+  capacity01<std::list<int> >();\n   return 0;\n }\n-\n-// vi:set sw=2 ts=2:"}, {"sha": "48394079750f3ea006317060ec53cee435228142", "filename": "libstdc++-v3/testsuite/23_containers/list/capacity/29134.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcapacity%2F29134.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcapacity%2F29134.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcapacity%2F29134.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -25,7 +25,8 @@ void test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  std::list<int> l;\n+  typedef std::list<int> list_type;\n+  list_type l;\n \n #ifndef _GLIBCXX_DEBUG\n   using std::_List_node;"}, {"sha": "a223bc850074cce920590899d11bd62826d84888", "filename": "libstdc++-v3/testsuite/23_containers/list/check_construct_destroy.cc", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcheck_construct_destroy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcheck_construct_destroy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcheck_construct_destroy.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -22,51 +22,55 @@\n #include <iterator>\n #include <testsuite_allocator.h>\n \n-using namespace __gnu_test;\n \n-int main()\n+template<typename _Tp>\n+bool\n+construct_destroy()\n {\n-  typedef std::list<int, tracker_allocator<int> > Container;\n+  typedef _Tp list_type;\n+  typedef typename list_type::iterator iterator_type;\n+\n+  using namespace __gnu_test;\n   const int arr10[10] = { 2, 4, 1, 7, 3, 8, 10, 5, 9, 6 };\n   bool ok = true;\n \n   tracker_allocator_counter::reset();\n   {\n-    Container c;\n+    list_type c;\n     ok = check_construct_destroy(\"empty container\", 0, 0) && ok;\n   }\n   ok = check_construct_destroy(\"empty container\", 0, 0) && ok;\n \n \n   tracker_allocator_counter::reset();\n   {\n-    Container c(arr10, arr10 + 10);\n+    list_type c(arr10, arr10 + 10);\n     ok = check_construct_destroy(\"Construct from range\", 10, 0) && ok;\n   }\n   ok = check_construct_destroy(\"Construct from range\", 10, 10) && ok;\n \n   {\n-    Container c(arr10, arr10 + 10);\n+    list_type c(arr10, arr10 + 10);\n     tracker_allocator_counter::reset();\n     c.insert(c.begin(), arr10[0]);\n     ok = check_construct_destroy(\"Insert element\", 1, 0) && ok;\n   }\n   ok = check_construct_destroy(\"Insert element\", 1, 11) && ok;\n \n   {\n-    Container c(arr10, arr10 + 10);\n+    list_type c(arr10, arr10 + 10);\n     tracker_allocator_counter::reset();\n-    Container::iterator i5 = c.begin();\n+    iterator_type i5 = c.begin();\n     std::advance(i5, 5);\n     c.insert(i5, arr10, arr10+3);\n     ok = check_construct_destroy(\"Insert short range\", 3, 0) && ok;\n   }\n   ok = check_construct_destroy(\"Insert short range\", 3, 13) && ok;\n \n   {\n-    Container c(arr10, arr10 + 10);\n+    list_type c(arr10, arr10 + 10);\n     tracker_allocator_counter::reset();\n-    Container::iterator i7 = c.begin();\n+    iterator_type i7 = c.begin();\n     std::advance(i7, 5);\n     c.insert(i7, arr10, arr10+10);\n     ok = check_construct_destroy(\"Insert long range\", 10, 0) && ok;\n@@ -76,3 +80,8 @@ int main()\n   return ok ? 0 : 1;\n }\n \n+int main()\n+{\n+  construct_destroy<std::list<int, __gnu_test::tracker_allocator<int> > >();\n+  return 0;\n+}"}, {"sha": "2228a506fe9ac482f731c930300f64225131eef5", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/1.cc", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F1.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -20,22 +20,13 @@\n #include <list>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n // A nontrivial type.\n template<typename T>\n   struct A { };\n \n // Another nontrivial type\n struct B { };\n \n-// A nontrivial type convertible from an int\n-struct C {\n-  C(int i) : i_(i) { }\n-  bool operator==(const C& rhs) { return i_ == rhs.i_; }\n-  int i_;\n-};\n-\n // Default constructor, basic properties\n //\n // This test verifies the following.\n@@ -46,32 +37,36 @@ struct C {\n // 23.2.2       size_type size() const\n // 23.2.2\texistence of required typedefs\n //\n+template<typename _Tp>\n void\n-test01()\n+cons01()\n {\n-  std::list< A<B> > list0101;\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+\n+  list_type list0101;\n   VERIFY(list0101.begin() == list0101.end());\n   VERIFY(list0101.size() == 0);\n \n   // check type definitions -- will fail compile if missing\n-  typedef std::list< A<B> >::reference              reference;\n-  typedef std::list< A<B> >::const_reference        const_reference;\n-  typedef std::list< A<B> >::iterator               iterator;\n-  typedef std::list< A<B> >::const_iterator         const_iterator;\n-  typedef std::list< A<B> >::size_type              size_type;\n-  typedef std::list< A<B> >::difference_type        difference_type;\n-  typedef std::list< A<B> >::value_type             value_type;\n-  typedef std::list< A<B> >::allocator_type         allocator_type;\n-  typedef std::list< A<B> >::pointer                pointer;\n-  typedef std::list< A<B> >::const_pointer          const_pointer;\n-  typedef std::list< A<B> >::reverse_iterator       reverse_iterator;\n-  typedef std::list< A<B> >::const_reverse_iterator const_reverse_iterator;\n+  typedef typename list_type::reference              reference;\n+  typedef typename list_type::const_reference        const_reference;\n+  typedef typename list_type::iterator               iterator;\n+  typedef typename list_type::const_iterator         const_iterator;\n+  typedef typename list_type::size_type              size_type;\n+  typedef typename list_type::difference_type        difference_type;\n+  typedef typename list_type::value_type             value_type;\n+  typedef typename list_type::allocator_type         allocator_type;\n+  typedef typename list_type::pointer                pointer;\n+  typedef typename list_type::const_pointer          const_pointer;\n+  typedef typename list_type::reverse_iterator       reverse_iterator;\n+  typedef typename list_type::const_reverse_iterator const_reverse_iterator;\n \n   // allocator checks?\n }\n \n int main()\n {\n-  test01();\n+  cons01<std::list< A<B> > >();\n   return 0;\n }"}, {"sha": "a38cf7d1bba2417ac426a57dff747fa38169df1d", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/2.cc", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F2.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -20,43 +20,36 @@\n #include <list>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n // A nontrivial type.\n template<typename T>\n   struct A { };\n \n // Another nontrivial type\n struct B { };\n \n-// A nontrivial type convertible from an int\n-struct C {\n-  C(int i) : i_(i) { }\n-  bool operator==(const C& rhs) { return i_ == rhs.i_; }\n-  int i_;\n-};\n-\n // Fill constructor\n //\n // This test verifies the following.\n-// 23.2.2.1     explicit list(size_type n, const T& v = T(), const a& = Allocator())\n-// 23.2.2       const_iterator begin() const\n-// 23.2.2       const_iterator end() const\n-// 23.2.2       size_type size() const\n+// 23.2.2.1 explicit list(size_type n, const T& v = T(), const a& = Allocator())\n+// 23.2.2   const_iterator begin() const\n+// 23.2.2   const_iterator end() const\n+// 23.2.2   size_type size() const\n //\n+template<typename _Tp>\n void\n-test02()\n+cons021()\n {\n+  bool test __attribute__((unused)) = true;\n   const std::size_t LIST_SIZE = 5;\n   const int INIT_VALUE = 7;\n   std::size_t count;\n-  std::list<int>::const_iterator i;\n \n-  // nontrivial value_type\n-  std::list< A<B> > list0201(LIST_SIZE);\n+  typedef _Tp list_type;\n+  typedef typename list_type::const_iterator const_iterator;\n+  const_iterator i;\n \n   // default value\n-  std::list<int> list0202(LIST_SIZE);\n+  list_type list0202(LIST_SIZE);\n   for (i = list0202.begin(), count = 0;\n        i != list0202.end();\n        ++i, ++count)\n@@ -65,7 +58,7 @@ test02()\n   VERIFY(list0202.size() == LIST_SIZE);\n \n   // explicit value\n-  std::list<int> list0203(LIST_SIZE, INIT_VALUE);\n+  list_type list0203(LIST_SIZE, INIT_VALUE);\n   for (i = list0203.begin(), count = 0;\n        i != list0203.end();\n        ++i, ++count)\n@@ -74,8 +67,19 @@ test02()\n   VERIFY(list0203.size() == LIST_SIZE);\n }\n \n+template<typename _Tp>\n+void\n+cons022()\n+{\n+  // nontrivial value_type\n+  typedef _Tp list_type;\n+  const std::size_t LIST_SIZE = 5;\n+  list_type list0201(LIST_SIZE);\n+}\n+\n int main()\n {\n-  test02(); \n+  cons021<std::list<int> >();\n+  cons022<std::list< A<B> > >();\n   return 0;\n }"}, {"sha": "b067ee17bc2d4f7b9fd7cff53de2fdfc98d56360", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/3.cc", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F3.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -20,31 +20,28 @@\n #include <list>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n-// A nontrivial type.\n-template<typename T>\n-  struct A { };\n-\n-// Another nontrivial type\n-struct B { };\n-\n // A nontrivial type convertible from an int\n-struct C {\n+struct C\n+{\n   C(int i) : i_(i) { }\n   bool operator==(const C& rhs) { return i_ == rhs.i_; }\n   int i_;\n };\n \n // Fill constructor disguised as a range constructor\n+template<typename _Tp>\n void\n-test02D()\n+cons03()\n {\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+  typedef typename list_type::iterator iterator;\n+\n   const std::size_t LIST_SIZE = 5;\n   const int INIT_VALUE = 7;\n   std::size_t count = 0;\n-  std::list<C> list0204(LIST_SIZE, INIT_VALUE);\n-  std::list<C>::iterator i = list0204.begin();\n+  list_type list0204(LIST_SIZE, INIT_VALUE);\n+  iterator i = list0204.begin();\n   for (; i != list0204.end(); ++i, ++count)\n     VERIFY(*i == INIT_VALUE);\n   VERIFY(count == LIST_SIZE);\n@@ -53,7 +50,6 @@ test02D()\n \n int main()\n {\n-  test02D(); \n+  cons03<std::list<C> >();\n   return 0;\n }\n-// vi:set sw=2 ts=2:"}, {"sha": "0dde9e9eaf4c6c5340a61a3b479dcb4e6a82c948", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/4.cc", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F4.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -20,26 +20,30 @@\n #include <list>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n // Range constructor\n //\n // This test verifies the following.\n-// 23.2.2.1     template list(InputIterator f, InputIterator l, const Allocator& a = Allocator())\n+// 23.2.2.1     template list(InputIterator f, InputIterator l, \n+//                            const Allocator& a = Allocator())\n // 23.2.2       const_iterator begin() const\n // 23.2.2       const_iterator end() const\n // 23.2.2       size_type size() const\n //\n+template<typename _Tp>\n void\n-test03()\n+cons04()\n {\n+  bool test __attribute__((unused)) = true;\n   const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n   const std::size_t N = sizeof(A) / sizeof(int);\n   std::size_t count;\n-  std::list<int>::const_iterator i;\n+\n+  typedef std::list<int> list_type;\n+  typedef typename list_type::const_iterator const_iterator;\n+  const_iterator i;\n \n   // construct from a dissimilar range\n-  std::list<int> list0301(A, A + N);\n+  list_type list0301(A, A + N);\n   for (i = list0301.begin(), count = 0;\n        i != list0301.end();\n        ++i, ++count)\n@@ -48,7 +52,7 @@ test03()\n   VERIFY(list0301.size() == N);\n \n   // construct from a similar range\n-  std::list<int> list0302(list0301.begin(), list0301.end());\n+  list_type list0302(list0301.begin(), list0301.end());\n   for (i = list0302.begin(), count = 0;\n        i != list0302.end();\n        ++i, ++count)\n@@ -59,7 +63,7 @@ test03()\n \n int main()\n {\n-  test03();\n+  cons04<std::list<int> >();\n   return 0;\n }\n "}, {"sha": "be8b5921aebc7f55479c8358b48ed19a1343c91b", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/5.cc", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F5.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -20,8 +20,6 @@\n #include <list>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n // Copy constructor\n //\n // This test verifies the following.\n@@ -30,16 +28,21 @@ bool test __attribute__((unused)) = true;\n // 23.2.2       reverse_iterator rend()\n // 23.2.2       size_type size() const\n //\n+template<typename _Tp>\n void\n-test04()\n+cons05()\n {\n+  bool test __attribute__((unused)) = true;\n   const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n   const std::size_t N = sizeof(A) / sizeof(int);\n   int count;\n-  std::list<int>::reverse_iterator i;\n-  std::list<int> list0401(A, A + N);\n \n-  std::list<int> list0402(list0401);\n+  typedef _Tp list_type;\n+  typedef typename list_type::reverse_iterator reverse_iterator;\n+  reverse_iterator i;\n+  list_type list0401(A, A + N);\n+\n+  list_type list0402(list0401);\n   for (i = list0401.rbegin(), count = N - 1;\n        i != list0401.rend();\n        ++i, --count)\n@@ -50,7 +53,7 @@ test04()\n \n int main()\n {\n-  test04();\n+  cons05<std::list<int> >();\n   return 0;\n }\n "}, {"sha": "e0d62817e5b69cefcd9b63ba42f4b663cbed2473", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/6.cc", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F6.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -20,8 +20,6 @@\n #include <list>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n // Range assign\n //\n // This test verifies the following.\n@@ -30,17 +28,22 @@ bool test __attribute__((unused)) = true;\n // 23.2.2       const_iterator end() const\n // 23.2.2       size_type size() const\n //\n+template<typename _Tp>\n void\n-test05()\n+cons05()\n {\n+  bool test __attribute__((unused)) = true;\n   const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n   const int B[] = {101, 102, 103, 104, 105};\n   const std::size_t N = sizeof(A) / sizeof(int);\n   const std::size_t M = sizeof(B) / sizeof(int);\n   std::size_t count;\n-  std::list<int>::const_iterator i;\n \n-  std::list<int> list0501;\n+  typedef _Tp list_type;\n+  typedef typename list_type::const_iterator const_iterator;\n+  const_iterator i;\n+\n+  list_type list0501;\n \n   // make it bigger\n   list0501.assign(A, A + N);\n@@ -63,7 +66,7 @@ test05()\n \n int main()\n {\n-  test05();\n+  cons05<std::list<int> >();\n   return 0;\n }\n "}, {"sha": "9a626a6234f3a525181bce575a3c6c15a7c47fed", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/7.cc", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F7.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -20,8 +20,6 @@\n #include <list>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n // Fill assign\n //\n // This test verifies the following.\n@@ -30,17 +28,22 @@ bool test __attribute__((unused)) = true;\n // 23.2.2       const_iterator end() const\n // 23.2.2       size_type size() const\n //\n+template<typename _Tp>\n void\n-test06()\n+cons07()\n {\n+  bool test __attribute__((unused)) = true;\n   const std::size_t BIG_LIST_SIZE = 11;\n   const int BIG_INIT_VALUE = 7;\n   const std::size_t SMALL_LIST_SIZE = 5;\n   const int SMALL_INIT_VALUE = 17;\n   std::size_t count;\n-  std::list<int>::const_iterator i;\n \n-  std::list<int> list0601;\n+  typedef _Tp list_type;\n+  typedef typename list_type::const_iterator const_iterator;\n+  const_iterator i;\n+\n+  list_type list0601;\n   VERIFY(list0601.size() == 0);\n \n   // make it bigger\n@@ -64,7 +67,7 @@ test06()\n \n int main()\n {\n-  test06();\n+  cons07<std::list<int> >();\n   return 0;\n }\n "}, {"sha": "f93520c5406237fba236dcde311d4a4e1fc8f7e1", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/8.cc", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F8.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -20,35 +20,31 @@\n #include <list>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n-\n-// A nontrivial type.\n-template<typename T>\n-  struct A { };\n-\n-// Another nontrivial type\n-struct B { };\n-\n // A nontrivial type convertible from an int\n-struct C {\n+struct C \n+{\n   C(int i) : i_(i) { }\n   bool operator==(const C& rhs) { return i_ == rhs.i_; }\n   int i_;\n };\n \n // Fill Assignment disguised as a Range Assignment\n+template<typename _Tp>\n void\n-test06D()\n+cons08()\n {\n+  typedef _Tp list_type;\n+  typedef typename list_type::iterator iterator;\n+  bool test __attribute__((unused)) = true;\n   const std::size_t LIST_SIZE = 5;\n   const int INIT_VALUE = 7;\n   std::size_t count = 0;\n-  std::list<C> list0604;\n+\n+  list_type list0604;\n   VERIFY(list0604.size() == 0);\n   \n   list0604.assign(LIST_SIZE, INIT_VALUE);\n-  std::list<C>::iterator i = list0604.begin();\n+  iterator i = list0604.begin();\n   for (; i != list0604.end(); ++i, ++count)\n     VERIFY(*i == INIT_VALUE);\n   VERIFY(count == LIST_SIZE);\n@@ -57,7 +53,7 @@ test06D()\n \n int main()\n {\n-  test06D();\n+  cons08<std::list<C> >();\n   return 0;\n }\n "}, {"sha": "87cb0270c400fef57f63b2bfae2b49ec2f46b41b", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/9.cc", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F9.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F9.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F9.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -20,8 +20,6 @@\n #include <list>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n // Assignment operator\n //\n // This test verifies the following.\n@@ -31,18 +29,24 @@ bool test __attribute__((unused)) = true;\n // 23.2.2       size_type size() const\n // 23.2.2       bool operator==(const list& x, const list& y)\n //\n+template<typename _Tp>\n void\n-test07()\n+cons09()\n {\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+  typedef typename list_type::iterator iterator;\n+\n   const int A[] = {701, 702, 703, 704, 705};\n   const std::size_t N = sizeof(A) / sizeof(int);\n   std::size_t count;\n-  std::list<int>::iterator i;\n \n-  std::list<int> list0701(A, A + N);\n+  iterator i;\n+\n+  list_type list0701(A, A + N);\n   VERIFY(list0701.size() == N);\n \n-  std::list<int> list0702;\n+  list_type list0702;\n   VERIFY(list0702.size() == 0);\n \n   list0702 = list0701;\n@@ -57,7 +61,6 @@ test07()\n \n int main()\n {\n-  test07();\n+  cons09<std::list<int> >();\n   return 0;\n }\n-// vi:set sw=2 ts=2:"}, {"sha": "82a47ade754d087df8f44b78ab2d2e6c9b8a10d8", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/clear_allocator.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fclear_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fclear_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fclear_allocator.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -81,7 +81,8 @@ template<typename Container>\n \n int main()\n {\n-  Check_Container<std::list<int, clear_alloc<int> > >();\n+  typedef std::list<int, clear_alloc<int> > list_type;\n+  Check_Container<list_type>();\n   return 0;\n }\n "}, {"sha": "261ef084f097b76e9d5e54d66a9ad1949cfe5390", "filename": "libstdc++-v3/testsuite/23_containers/list/init-list.cc", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finit-list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finit-list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finit-list.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -21,28 +21,31 @@\n #include <list>\n #include <testsuite_allocator.h>\n \n-using namespace __gnu_test;\n-\n-int main()\n+template<typename _Tp>\n+bool\n+init_list()\n {\n-  typedef std::list<int, tracker_allocator<int> > Container;\n+  using namespace __gnu_test;\n+  typedef _Tp list_type;\n+  typedef typename list_type::iterator iterator;\n+\n   const int arr10[10] = { 2, 4, 1, 7, 3, 8, 10, 5, 9, 6 };\n   bool ok = true;\n \n   tracker_allocator_counter::reset();\n   {\n-    Container c({ 2, 4, 1 });\n+    list_type c({ 2, 4, 1 });\n     ok = check_construct_destroy(\"Construct from init-list\", 3, 0) && ok;\n-    Container::iterator i = c.begin();\n+    iterator i = c.begin();\n     ok &= (*i++ == 2);\n     ok &= (*i++ == 4);\n   }\n   ok = check_construct_destroy(\"Construct from init-list\", 3, 3) && ok;\n \n   {\n-    Container c(arr10, arr10 + 10);\n+    list_type c(arr10, arr10 + 10);\n     tracker_allocator_counter::reset();\n-    Container::iterator i = c.begin();\n+    iterator i = c.begin();\n     ++i; ++i; ++i; ++i; ++i; ++i; ++i;\n     c.insert(i, { 234, 42, 1 });\n     ok = check_construct_destroy(\"Insert init-list\", 3, 0) && ok;\n@@ -52,14 +55,23 @@ int main()\n   ok = check_construct_destroy(\"Insert init-list\", 3, 13) && ok;\n \n   {\n-    Container c;\n+    list_type c;\n     tracker_allocator_counter::reset();\n     c = { 13, 0, 42 };\n     ok = check_construct_destroy(\"Assign init-list\", 3, 0) && ok;\n-    Container::iterator i = c.begin();\n+    iterator i = c.begin();\n     ok &= (*i++ == 13);\n   }\n   ok = check_construct_destroy(\"Assign init-list\", 3, 3) && ok;\n \n-  return ok ? 0 : 1;;\n+  return ok ? 0 : 1;\n+}\n+\n+int main()\n+{\n+  typedef int value_type;\n+  typedef __gnu_test::tracker_allocator<int> allocator_type;\n+  typedef std::list<value_type, allocator_type> list_type;\n+  init_list<list_type>();\n+  return 0;\n }"}, {"sha": "04267c253c79feee5705fc6f7cd05b566465f7f7", "filename": "libstdc++-v3/testsuite/23_containers/list/invalidation/1.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finvalidation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finvalidation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finvalidation%2F1.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -21,21 +21,21 @@\n #include <iterator>\n #include <testsuite_hooks.h>\n \n-using __gnu_debug::list;\n-using std::advance;\n-\n-bool test = true;\n-\n // Assignment\n void test01()\n {\n-  list<int> v1;\n-  list<int> v2;\n+  using std::advance;\n+\n+  bool test = true;\n+\n+  typedef __gnu_debug::list<int> list_type;\n+  list_type v1;\n+  list_type v2;\n \n   v1.push_front(17);\n \n-  list<int>::iterator start = v1.begin();\n-  list<int>::iterator finish = v1.end();\n+  list_type::iterator start = v1.begin();\n+  list_type::iterator finish = v1.end();\n   VERIFY(start._M_dereferenceable());\n   VERIFY(!finish._M_dereferenceable() && !finish._M_singular());\n "}, {"sha": "a141f2cdc82a9a9268ee9f74aa8526f68cfbc161", "filename": "libstdc++-v3/testsuite/23_containers/list/invalidation/2.cc", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finvalidation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finvalidation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finvalidation%2F2.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -21,23 +21,24 @@\n #include <iterator>\n #include <testsuite_hooks.h>\n \n-using __gnu_debug::list;\n-using std::advance;\n-\n-bool test = true;\n-\n // Resize\n void test02()\n {\n-  list<int> v(10, 17);\n+  using std::advance;\n+  \n+  bool test = true;\n+ \n+  typedef __gnu_debug::list<int> list_type;\n+\n+  list_type v(10, 17);\n \n-  list<int>::iterator before = v.begin();\n+  list_type::iterator before = v.begin();\n   advance(before, 6);\n-  list<int>::iterator at = before;\n+  list_type::iterator at = before;\n   advance(at, 1);\n-  list<int>::iterator after = at;\n+  list_type::iterator after = at;\n   advance(after, 1);\n-  list<int>::iterator finish = v.end();\n+  list_type::iterator finish = v.end();\n \n   // Shrink\n   v.resize(7);"}, {"sha": "770d459748483c582d9fc42e08ac86c4d0964d21", "filename": "libstdc++-v3/testsuite/23_containers/list/invalidation/3.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finvalidation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finvalidation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finvalidation%2F3.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -21,21 +21,21 @@\n #include <iterator>\n #include <testsuite_hooks.h>\n \n-using __gnu_debug::list;\n-using std::advance;\n-\n-bool test = true;\n-\n // Erase\n void test03()\n {\n-  list<int> v(20, 42);\n+  using std::advance;\n+  \n+  bool test = true;\n+  typedef __gnu_debug::list<int> list_type;\n+\n+  list_type v(20, 42);\n \n   // Single element erase (middle)\n-  list<int>::iterator before = v.begin();\n-  list<int>::iterator at = before;\n+  list_type::iterator before = v.begin();\n+  list_type::iterator at = before;\n   advance(at, 3);\n-  list<int>::iterator after = at;\n+  list_type::iterator after = at;\n   at = v.erase(at);\n   VERIFY(before._M_dereferenceable());\n   VERIFY(at._M_dereferenceable());\n@@ -63,7 +63,7 @@ void test03()\n \n   // clear()\n   before = v.begin();\n-  list<int>::iterator finish = v.end();\n+  list_type::iterator finish = v.end();\n   VERIFY(before._M_dereferenceable());\n   v.clear();\n   VERIFY(before._M_singular());"}, {"sha": "11e4394fa7d3f6091847dd42d8739e3cc7a93b95", "filename": "libstdc++-v3/testsuite/23_containers/list/invalidation/4.cc", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finvalidation%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finvalidation%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finvalidation%2F4.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -21,21 +21,22 @@\n #include <iterator>\n #include <testsuite_hooks.h>\n \n-using __gnu_debug::list;\n-using std::advance;\n-\n-bool test = true;\n-\n // Splice\n void test04()\n {\n-  list<int> l1(10, 17);\n-  list<int> l2(10, 42);\n+  using std::advance;\n+  \n+  bool test = true;\n+\n+  typedef __gnu_debug::list<int>  list_type;\n+\n+  list_type l1(10, 17);\n+  list_type l2(10, 42);\n   \n-  list<int>::iterator start2 = l2.begin();\n-  list<int>::iterator end2 = start2;\n+  list_type::iterator start2 = l2.begin();\n+  list_type::iterator end2 = start2;\n   advance(end2, 5);\n-  list<int>::iterator after2 = end2;\n+  list_type::iterator after2 = end2;\n   advance(after2, 2);\n   \n   l1.splice(l1.begin(), l2, start2, end2);"}, {"sha": "b1c85f0511cd6cc7f126b5731cb5725c3c3788bd", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/1.cc", "status": "modified", "additions": 37, "deletions": 35, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F1.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -20,99 +20,101 @@\n #include <list>\n #include <testsuite_hooks.h>\n \n-typedef __gnu_test::copy_tracker  T;\n-\n-bool test __attribute__((unused)) = true;\n-\n // range and fill insert/erase + clear\n // missing: o  fill insert disguised as a range insert in all its variants\n //          o  exception effects\n+template<typename _Tp>\n void\n-test03()\n+modifiers1()\n {\n-  std::list<T> list0301;\n-  T::reset();\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+  typedef typename list_type::iterator iterator;\n+  typedef typename list_type::value_type value_type;\n+\n+  list_type list0301;\n+  value_type::reset();\n \n   // fill insert at beginning of list / empty list\n-  list0301.insert(list0301.begin(), 3, T(11)); // should be [11 11 11]\n+  list0301.insert(list0301.begin(), 3, value_type(11)); // should be [11 11 11]\n   VERIFY(list0301.size() == 3);\n-  VERIFY(T::copyCount() == 3);\n+  VERIFY(value_type::copyCount() == 3);\n \n   // save iterators to verify post-insert validity\n-  std::list<T>::iterator b = list0301.begin();          \n-  std::list<T>::iterator m = list0301.end(); --m;          \n-  std::list<T>::iterator e = list0301.end();\n+  iterator b = list0301.begin();\n+  iterator m = list0301.end(); --m;\n+  iterator e = list0301.end();\n \n   // fill insert at end of list\n-  T::reset();\n-  list0301.insert(list0301.end(), 3, T(13)); // should be [11 11 11 13 13 13]\n+  value_type::reset();\n+  list0301.insert(list0301.end(), 3, value_type(13)); // should be [11 11 11 13 13 13]\n   VERIFY(list0301.size() == 6);\n-  VERIFY(T::copyCount() == 3);\n+  VERIFY(value_type::copyCount() == 3);\n   VERIFY(b == list0301.begin() && b->id() == 11);\n   VERIFY(e == list0301.end());\n   VERIFY(m->id() == 11);\n \n   // fill insert in the middle of list\n   ++m;\n-  T::reset();\n-  list0301.insert(m, 3, T(12)); // should be [11 11 11 12 12 12 13 13 13]\n+  value_type::reset();\n+  list0301.insert(m, 3, value_type(12)); // should be [11 11 11 12 12 12 13 13 13]\n   VERIFY(list0301.size() == 9);\n-  VERIFY(T::copyCount() == 3);\n+  VERIFY(value_type::copyCount() == 3);\n   VERIFY(b == list0301.begin() && b->id() == 11);\n   VERIFY(e == list0301.end());\n   VERIFY(m->id() == 13);\n \n   // single erase\n-  T::reset();\n+  value_type::reset();\n   m = list0301.erase(m); // should be [11 11 11 12 12 12 13 13]\n   VERIFY(list0301.size() == 8);\n-  VERIFY(T::dtorCount() == 1);\n+  VERIFY(value_type::dtorCount() == 1);\n   VERIFY(b == list0301.begin() && b->id() == 11);\n   VERIFY(e == list0301.end());\n   VERIFY(m->id() == 13);\n \n   // range erase\n-  T::reset();\n+  value_type::reset();\n   m = list0301.erase(list0301.begin(), m); // should be [13 13]\n   VERIFY(list0301.size() == 2);\n-  VERIFY(T::dtorCount() == 6);\n+  VERIFY(value_type::dtorCount() == 6);\n   VERIFY(m->id() == 13);\n \n   // range fill at beginning\n   const int A[] = {321, 322, 333};\n   const int N = sizeof(A) / sizeof(int);\n-  T::reset();\n-  b = list0301.begin();          \n+  value_type::reset();\n+  b = list0301.begin();\n   list0301.insert(b, A, A + N); // should be [321 322 333 13 13]\n   VERIFY(list0301.size() == 5);\n-  VERIFY(T::copyCount() == 3);\n+  VERIFY(value_type::copyCount() == 3);\n   VERIFY(m->id() == 13);\n-  \n+\n   // range fill at end\n-  T::reset();\n+  value_type::reset();\n   list0301.insert(e, A, A + N); // should be [321 322 333 13 13 321 322 333]\n   VERIFY(list0301.size() == 8);\n-  VERIFY(T::copyCount() == 3);\n+  VERIFY(value_type::copyCount() == 3);\n   VERIFY(e == list0301.end());\n   VERIFY(m->id() == 13);\n-  \n+\n   // range fill in middle\n-  T::reset();\n-  list0301.insert(m, A, A + N); \n+  value_type::reset();\n+  list0301.insert(m, A, A + N);\n   VERIFY(list0301.size() == 11);\n-  VERIFY(T::copyCount() == 3);\n+  VERIFY(value_type::copyCount() == 3);\n   VERIFY(e == list0301.end());\n   VERIFY(m->id() == 13);\n \n-  T::reset();\n+  value_type::reset();\n   list0301.clear();\n   VERIFY(list0301.size() == 0);\n-  VERIFY(T::dtorCount() == 11);\n+  VERIFY(value_type::dtorCount() == 11);\n   VERIFY(e == list0301.end());\n }\n \n int main()\n {\n-  test03();\n+  modifiers1<std::list<__gnu_test::copy_tracker> >();\n   return 0;\n }"}, {"sha": "da39397d098b7b63fdd6b217e543c40012d9f694", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/2.cc", "status": "modified", "additions": 33, "deletions": 30, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F2.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -20,71 +20,74 @@\n #include <list>\n #include <testsuite_hooks.h>\n \n-typedef __gnu_test::copy_tracker  T;\n-\n-bool test __attribute__((unused)) = true;\n-\n // general single insert/erase + swap\n+template<typename _Tp>\n void\n-test02()\n+modifiers2()\n {\n-  std::list<T> list0201;\n-  T::reset();\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+  typedef typename list_type::value_type value_type;\n+  typedef typename list_type::iterator iterator;\n+  typedef typename list_type::const_iterator const_iterator;\n+\n+  list_type list0201;\n+  value_type::reset();\n \n-  list0201.insert(list0201.begin(), T(1));     // list should be [1]\n+  list0201.insert(list0201.begin(), value_type(1));     // list should be [1]\n   VERIFY(list0201.size() == 1);\n-  VERIFY(T::copyCount() == 1);\n+  VERIFY(value_type::copyCount() == 1);\n \n-  list0201.insert(list0201.end(), T(2));     // list should be [1 2]\n+  list0201.insert(list0201.end(), value_type(2));     // list should be [1 2]\n   VERIFY(list0201.size() == 2);\n-  VERIFY(T::copyCount() == 2);\n+  VERIFY(value_type::copyCount() == 2);\n \n-  std::list<T>::iterator i = list0201.begin();\n-  std::list<T>::const_iterator j = i;\n+  iterator i = list0201.begin();\n+  const_iterator j = i;\n   VERIFY(i->id() == 1); ++i;\n   VERIFY(i->id() == 2);\n \n-  list0201.insert(i, T(3));     // list should be [1 3 2]\n+  list0201.insert(i, value_type(3));     // list should be [1 3 2]\n   VERIFY(list0201.size() == 3);\n-  VERIFY(T::copyCount() == 3);\n+  VERIFY(value_type::copyCount() == 3);\n \n-  std::list<T>::const_iterator k = i;\n+  const_iterator k = i;\n   VERIFY(i->id() == 2); --i;\n   VERIFY(i->id() == 3); --i;\n-  VERIFY(i->id() == 1); \n-  VERIFY(j->id() == 1); \n+  VERIFY(i->id() == 1);\n+  VERIFY(j->id() == 1);\n \n   ++i; // will point to '3'\n-  T::reset();\n+  value_type::reset();\n   list0201.erase(i); // should be [1 2]\n   VERIFY(list0201.size() == 2);\n-  VERIFY(T::dtorCount() == 1);\n+  VERIFY(value_type::dtorCount() == 1);\n   VERIFY(k->id() == 2);\n-  VERIFY(j->id() == 1); \n+  VERIFY(j->id() == 1);\n \n-  std::list<T> list0202;\n-  T::reset();\n+  list_type list0202;\n+  value_type::reset();\n   VERIFY(list0202.size() == 0);\n-  VERIFY(T::copyCount() == 0);\n-  VERIFY(T::dtorCount() == 0);\n+  VERIFY(value_type::copyCount() == 0);\n+  VERIFY(value_type::dtorCount() == 0);\n \n   // member swap\n   list0202.swap(list0201);\n   VERIFY(list0201.size() == 0);\n   VERIFY(list0202.size() == 2);\n-  VERIFY(T::copyCount() == 0);\n-  VERIFY(T::dtorCount() == 0);\n+  VERIFY(value_type::copyCount() == 0);\n+  VERIFY(value_type::dtorCount() == 0);\n \n   // specialized swap\n   swap(list0201, list0202);\n   VERIFY(list0201.size() == 2);\n   VERIFY(list0202.size() == 0);\n-  VERIFY(T::copyCount() == 0);\n-  VERIFY(T::dtorCount() == 0);\n+  VERIFY(value_type::copyCount() == 0);\n+  VERIFY(value_type::dtorCount() == 0);\n }\n \n int main()\n {\n-  test02();\n+  modifiers2<std::list<__gnu_test::copy_tracker> >();\n   return 0;\n }"}, {"sha": "b6a41e3dc45a8c2e4e0a49de250fd7b9ea5b75bc", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/3.cc", "status": "modified", "additions": 32, "deletions": 29, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F3.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -20,70 +20,73 @@\n #include <list>\n #include <testsuite_hooks.h>\n \n-typedef __gnu_test::copy_tracker  T;\n-\n-bool test __attribute__((unused)) = true;\n-\n-\n // This test verifies the following.\n //\n // 23.2.2.3     void push_front(const T& x)\n // 23.2.2.3     void push_back(const T& x)\n-// 23.2.2.3 (1) iterator and reference non-invalidation \n+// 23.2.2.3 (1) iterator and reference non-invalidation\n // 23.2.2.3 (1) exception effects\n // 23.2.2.3 (2) complexity requirements\n //\n // 23.2.2.3     void pop_front()\n // 23.2.2.3     void pop_back()\n-// 23.2.2.3 (3) iterator and reference non-invalidation \n+// 23.2.2.3 (3) iterator and reference non-invalidation\n // 23.2.2.3 (5) complexity requirements\n //\n // 23.2.2       const_iterator begin() const\n-// 23.2.2       iterator end() \n+// 23.2.2       iterator end()\n // 23.2.2       const_reverse_iterator rbegin() const\n-// 23.2.2       _reference front() \n+// 23.2.2       _reference front()\n // 23.2.2       const_reference front() const\n-// 23.2.2       reference back() \n+// 23.2.2       reference back()\n // 23.2.2       const_reference back() const\n //\n+template<typename _Tp>\n void\n-test01()\n+modifiers3()\n {\n-  std::list<T> list0101;\n-  std::list<T>::const_iterator i;\n-  std::list<T>::const_reverse_iterator j;\n-  std::list<T>::iterator k;\n-  T::reset();\n-\n-  list0101.push_back(T(1));     // list should be [1]\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+  typedef typename list_type::iterator iterator;\n+  typedef typename list_type::value_type value_type;\n+  typedef typename list_type::const_iterator const_iterator;\n+  typedef typename list_type::const_reverse_iterator const_reverse_iterator;\n+\n+  list_type list0101;\n+  const_iterator i;\n+  const_reverse_iterator j;\n+  iterator k;\n+  value_type::reset();\n+\n+  list0101.push_back(value_type(1));     // list should be [1]\n   VERIFY(list0101.size() == 1);\n-  VERIFY(T::copyCount() == 1);\n+  VERIFY(value_type::copyCount() == 1);\n \n   k = list0101.end();\n   --k;\n   VERIFY(k->id() == 1);\n   VERIFY(k->id() == list0101.front().id());\n   VERIFY(k->id() == list0101.back().id());\n \n-  list0101.push_front(T(2));    // list should be [2 1]\n+  list0101.push_front(value_type(2));    // list should be [2 1]\n   VERIFY(list0101.size() == 2);\n-  VERIFY(T::copyCount() == 2);\n+  VERIFY(value_type::copyCount() == 2);\n   VERIFY(k->id() == 1);\n \n-  list0101.push_back(T(3));     // list should be [2 1 3]\n+  list0101.push_back(value_type(3));     // list should be [2 1 3]\n   VERIFY(list0101.size() == 3);\n-  VERIFY(T::copyCount() == 3);\n+  VERIFY(value_type::copyCount() == 3);\n   VERIFY(k->id() == 1);\n \n   try\n   {\n-    list0101.push_back(T(4, true));\n+    list0101.push_back(value_type(4, true));\n     VERIFY(false);\n   }\n   catch (...)\n   {\n     VERIFY(list0101.size() == 3);\n-    VERIFY(T::copyCount() == 4);\n+    VERIFY(value_type::copyCount() == 4);\n   }\n \n   i = list0101.begin();\n@@ -100,23 +103,23 @@ test01()\n   ++j;\n   VERIFY(j->id() == 1);\n \n-  T::reset();\n+  value_type::reset();\n \n   list0101.pop_back();          // list should be [2 1]\n   VERIFY(list0101.size() == 2);\n-  VERIFY(T::dtorCount() == 1);\n+  VERIFY(value_type::dtorCount() == 1);\n   VERIFY(i->id() == 1);\n   VERIFY(k->id() == 1);\n \n   list0101.pop_front();          // list should be [1]\n   VERIFY(list0101.size() == 1);\n-  VERIFY(T::dtorCount() == 2);\n+  VERIFY(value_type::dtorCount() == 2);\n   VERIFY(i->id() == 1);\n   VERIFY(k->id() == 1);\n }\n \n int main()\n {\n-  test01();\n+  modifiers3<std::list<__gnu_test::copy_tracker> >();\n   return 0;\n }"}, {"sha": "a41c6b15a23378ca799e8c674f4e7bff4c9d5310", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/insert/25288.cc", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2F25288.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2F25288.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2F25288.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -24,19 +24,21 @@\n #include <ext/throw_allocator.h>\n \n // libstdc++/25288\n-void test01()\n+template<typename _Tp>\n+void insert1()\n {\n   bool test __attribute__((unused)) = true;\n \n-  typedef int value_type;\n-  typedef __gnu_cxx::throw_allocator<value_type> allocator_type;\n-  typedef std::list<value_type, allocator_type> list_type;\n+  typedef _Tp list_type;\n+  typedef typename _Tp::value_type value_type;\n+  typedef typename _Tp::allocator_type allocator_type;\n+  typedef typename _Tp::size_type size_type;\n \n   for (int j = 0; j < 10; ++j)\n     for (int i = 0; i < 10; ++i)\n       {\n \tallocator_type alloc1;\n-\tallocator_type::zero_throw_prob_adjustor adjust1;\n+\ttypename allocator_type::zero_throw_prob_adjustor adjust1;\n \tlist_type list1(alloc1);\n \t\n \tfor (int k = 0; k < j; ++k)\n@@ -57,12 +59,12 @@ void test01()\n \t    VERIFY( false );\n \t  }\n \t\n-\tVERIFY( list1.size() == list_type::size_type(j) );\n+\tVERIFY( list1.size() == size_type(j) );\n \tVERIFY( list1.size() == 0 || list1.back() == -j );\n \tVERIFY( list1.size() == 0 || list1.front() == -1 );\n \n \tallocator_type alloc2;\n-\tallocator_type::zero_throw_prob_adjustor adjust2;\n+\ttypename allocator_type::zero_throw_prob_adjustor adjust2;\n \tlist_type list2(alloc2);\n \t\n \tconst int data[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n@@ -85,14 +87,18 @@ void test01()\n \t    VERIFY( false );\n \t  }\n \n-\tVERIFY( list2.size() == list_type::size_type(j) );\n+\tVERIFY( list2.size() == size_type(j) );\n \tVERIFY( list2.size() == 0 || list2.back() == -j );\n \tVERIFY( list2.size() == 0 || list2.front() == -1 );\n       }\n }\n \n int main()\n {\n-  test01();\n+  typedef int value_type;\n+  typedef __gnu_cxx::throw_allocator<value_type> allocator_type;\n+  typedef std::list<value_type, allocator_type> list_type;\n+\n+  insert1<list_type>();\n   return 0;\n }"}, {"sha": "c66ead57c765ecdbe4263aff4f698a3d85c0b5a6", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/swap/1.cc", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F1.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -31,23 +31,31 @@ namespace std\n }\n \n // Should use list specialization for swap.\n-void test01()\n+template<typename _Tp>\n+void \n+swap11()\n {\n   bool test __attribute__((unused)) = true;\n-  std::list<T> A;\n-  std::list<T> B;\n+  typedef _Tp list_type;\n+\n+  list_type A;\n+  list_type B;\n   swap_calls = 0;\n   std::swap(A, B);\n   VERIFY(1 == swap_calls);\n }\n \n // Should use list specialization for swap.\n-void test02()\n+template<typename _Tp>\n+void \n+swap12()\n {\n-  bool test __attribute__((unused)) = true;\n   using namespace std;\n-  list<T> A;\n-  list<T> B;\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+\n+  list_type A;\n+  list_type B;\n   swap_calls = 0;\n   swap(A, B);\n   VERIFY(1 == swap_calls);\n@@ -60,7 +68,7 @@ template class __gnu_cxx::__mt_alloc<std::_List_node<T> >;\n // See c++/13658 for background info.\n int main()\n {\n-  test01();\n-  test02();\n+  swap11<std::list<T> >();\n+  swap12<std::list<T> >();\n   return 0;\n }"}, {"sha": "e31c0fb5924f4f0256065191d410da2d97044dc5", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/swap/2.cc", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F2.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -24,14 +24,16 @@\n #include <testsuite_allocator.h>\n \n // uneq_allocator as a non-empty allocator.\n+template<typename _Tp>\n void\n-test01()\n+swap2()\n {\n   bool test __attribute__((unused)) = true;\n   using namespace std;\n \n-  typedef __gnu_test::uneq_allocator<char> my_alloc;\n-  typedef list<char, my_alloc> my_list;\n+  typedef _Tp list_type;\n+  typedef typename list_type::allocator_type allocator_type;\n+  typedef typename list_type::size_type size_type;\n \n   const char title01[] = \"Rivers of sand\";\n   const char title02[] = \"Concret PH\";\n@@ -43,13 +45,13 @@ test01()\n   const size_t N3 = sizeof(title03);\n   const size_t N4 = sizeof(title04);\n \n-  my_list::size_type size01, size02;\n+  size_type size01, size02;\n \n-  my_alloc alloc01(1);\n+  allocator_type alloc01(1);\n \n-  my_list lis01(alloc01);\n+  list_type lis01(alloc01);\n   size01 = lis01.size();\n-  my_list lis02(alloc01);\n+  list_type lis02(alloc01);\n   size02 = lis02.size();\n   \n   lis01.swap(lis02);\n@@ -58,9 +60,9 @@ test01()\n   VERIFY( lis02.size() == size01 );\n   VERIFY( lis02.empty() );\n \n-  my_list lis03(alloc01);\n+  list_type lis03(alloc01);\n   size01 = lis03.size();\n-  my_list lis04(title02, title02 + N2, alloc01);\n+  list_type lis04(title02, title02 + N2, alloc01);\n   size02 = lis04.size();\n   \n   lis03.swap(lis04);\n@@ -69,9 +71,9 @@ test01()\n   VERIFY( lis04.size() == size01 );\n   VERIFY( lis04.empty() );\n   \n-  my_list lis05(title01, title01 + N1, alloc01);\n+  list_type lis05(title01, title01 + N1, alloc01);\n   size01 = lis05.size();\n-  my_list lis06(title02, title02 + N2, alloc01);\n+  list_type lis06(title02, title02 + N2, alloc01);\n   size02 = lis06.size();\n   \n   lis05.swap(lis06);\n@@ -80,9 +82,9 @@ test01()\n   VERIFY( lis06.size() == size01 );\n   VERIFY( equal(lis06.begin(), lis06.end(), title01) );\n \n-  my_list lis07(title01, title01 + N1, alloc01);\n+  list_type lis07(title01, title01 + N1, alloc01);\n   size01 = lis07.size();\n-  my_list lis08(title03, title03 + N3, alloc01);\n+  list_type lis08(title03, title03 + N3, alloc01);\n   size02 = lis08.size();\n \n   lis07.swap(lis08);\n@@ -91,9 +93,9 @@ test01()\n   VERIFY( lis08.size() == size01 );\n   VERIFY( equal(lis08.begin(), lis08.end(), title01) );\n \n-  my_list lis09(title03, title03 + N3, alloc01);\n+  list_type lis09(title03, title03 + N3, alloc01);\n   size01 = lis09.size();\n-  my_list lis10(title04, title04 + N4, alloc01);\n+  list_type lis10(title04, title04 + N4, alloc01);\n   size02 = lis10.size();\n \n   lis09.swap(lis10);\n@@ -102,9 +104,9 @@ test01()\n   VERIFY( lis10.size() == size01 );\n   VERIFY( equal(lis10.begin(), lis10.end(), title03) );\n \n-  my_list lis11(title04, title04 + N4, alloc01);\n+  list_type lis11(title04, title04 + N4, alloc01);\n   size01 = lis11.size();\n-  my_list lis12(title01, title01 + N1, alloc01);\n+  list_type lis12(title01, title01 + N1, alloc01);\n   size02 = lis12.size();\n \n   lis11.swap(lis12);\n@@ -113,9 +115,9 @@ test01()\n   VERIFY( lis12.size() == size01 );\n   VERIFY( equal(lis12.begin(), lis12.end(), title04) );\n \n-  my_list lis13(title03, title03 + N3, alloc01);\n+  list_type lis13(title03, title03 + N3, alloc01);\n   size01 = lis13.size();\n-  my_list lis14(title03, title03 + N3, alloc01);\n+  list_type lis14(title03, title03 + N3, alloc01);\n   size02 = lis14.size();\n \n   lis13.swap(lis14);\n@@ -127,6 +129,10 @@ test01()\n \n int main()\n { \n-  test01();\n+  typedef char value_type;\n+  typedef __gnu_test::uneq_allocator<value_type> allocator_type;\n+  typedef std::list<value_type, allocator_type> list_type;\n+\n+  swap2<list_type>();\n   return 0;\n }"}, {"sha": "c0e0f65bf64e075c81b338d0fe41bf5eceb01c65", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/swap/3.cc", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F3.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -24,14 +24,16 @@\n #include <testsuite_allocator.h>\n \n // uneq_allocator, two different personalities.\n+template<typename _Tp>\n void\n-test01()\n+swap3()\n {\n   bool test __attribute__((unused)) = true;\n   using namespace std;\n \n-  typedef __gnu_test::uneq_allocator<char> my_alloc;\n-  typedef list<char, my_alloc> my_list;\n+  typedef _Tp list_type;\n+  typedef typename list_type::allocator_type allocator_type;\n+  typedef typename list_type::size_type size_type;\n \n   const char title01[] = \"Rivers of sand\";\n   const char title02[] = \"Concret PH\";\n@@ -43,15 +45,15 @@ test01()\n   const size_t N3 = sizeof(title03);\n   const size_t N4 = sizeof(title04);\n \n-  my_list::size_type size01, size02;\n+  size_type size01, size02;\n \n-  my_alloc alloc01(1), alloc02(2);\n+  allocator_type alloc01(1), alloc02(2);\n   int personality01, personality02;\n \n-  my_list lis01(alloc01);\n+  list_type lis01(alloc01);\n   size01 = lis01.size();\n   personality01 = lis01.get_allocator().get_personality();\n-  my_list lis02(alloc02);\n+  list_type lis02(alloc02);\n   size02 = lis02.size();\n   personality02 = lis02.get_allocator().get_personality();\n \n@@ -63,10 +65,10 @@ test01()\n   VERIFY( lis01.get_allocator().get_personality() == personality02 );\n   VERIFY( lis02.get_allocator().get_personality() == personality01 );\n \n-  my_list lis03(alloc02);\n+  list_type lis03(alloc02);\n   size01 = lis03.size();\n   personality01 = lis03.get_allocator().get_personality();\n-  my_list lis04(title02, title02 + N2, alloc01);\n+  list_type lis04(title02, title02 + N2, alloc01);\n   size02 = lis04.size();\n   personality02 = lis04.get_allocator().get_personality();\n \n@@ -78,10 +80,10 @@ test01()\n   VERIFY( lis03.get_allocator().get_personality() == personality02 );\n   VERIFY( lis04.get_allocator().get_personality() == personality01 );\n   \n-  my_list lis05(title01, title01 + N1, alloc01);\n+  list_type lis05(title01, title01 + N1, alloc01);\n   size01 = lis05.size();\n   personality01 = lis05.get_allocator().get_personality();\n-  my_list lis06(title02, title02 + N2, alloc02);\n+  list_type lis06(title02, title02 + N2, alloc02);\n   size02 = lis06.size();\n   personality02 = lis06.get_allocator().get_personality();\n \n@@ -93,10 +95,10 @@ test01()\n   VERIFY( lis05.get_allocator().get_personality() == personality02 );\n   VERIFY( lis06.get_allocator().get_personality() == personality01 );\n \n-  my_list lis07(title01, title01 + N1, alloc02);\n+  list_type lis07(title01, title01 + N1, alloc02);\n   size01 = lis07.size();\n   personality01 = lis07.get_allocator().get_personality();\n-  my_list lis08(title03, title03 + N3, alloc01);\n+  list_type lis08(title03, title03 + N3, alloc01);\n   size02 = lis08.size();\n   personality02 = lis08.get_allocator().get_personality();\n \n@@ -108,10 +110,10 @@ test01()\n   VERIFY( lis07.get_allocator().get_personality() == personality02 );\n   VERIFY( lis08.get_allocator().get_personality() == personality01 );\n \n-  my_list lis09(title03, title03 + N3, alloc01);\n+  list_type lis09(title03, title03 + N3, alloc01);\n   size01 = lis09.size();\n   personality01 = lis09.get_allocator().get_personality();\n-  my_list lis10(title04, title04 + N4, alloc02);\n+  list_type lis10(title04, title04 + N4, alloc02);\n   size02 = lis10.size();\n   personality02 = lis10.get_allocator().get_personality();\n \n@@ -123,10 +125,10 @@ test01()\n   VERIFY( lis09.get_allocator().get_personality() == personality02 );\n   VERIFY( lis10.get_allocator().get_personality() == personality01 );\n \n-  my_list lis11(title04, title04 + N4, alloc02);\n+  list_type lis11(title04, title04 + N4, alloc02);\n   size01 = lis11.size();\n   personality01 = lis11.get_allocator().get_personality();\n-  my_list lis12(title01, title01 + N1, alloc01);\n+  list_type lis12(title01, title01 + N1, alloc01);\n   size02 = lis12.size();\n   personality02 = lis12.get_allocator().get_personality();\n \n@@ -138,10 +140,10 @@ test01()\n   VERIFY( lis11.get_allocator().get_personality() == personality02 );\n   VERIFY( lis12.get_allocator().get_personality() == personality01 );\n \n-  my_list lis13(title03, title03 + N3, alloc01);\n+  list_type lis13(title03, title03 + N3, alloc01);\n   size01 = lis13.size();\n   personality01 = lis13.get_allocator().get_personality();\n-  my_list lis14(title03, title03 + N3, alloc02);\n+  list_type lis14(title03, title03 + N3, alloc02);\n   size02 = lis14.size();\n   personality02 = lis14.get_allocator().get_personality();\n \n@@ -156,6 +158,10 @@ test01()\n \n int main()\n { \n-  test01();\n+  typedef char value_type;\n+  typedef __gnu_test::uneq_allocator<value_type> allocator_type;\n+  typedef std::list<value_type, allocator_type> list_type;\n+\n+  swap3<list_type>();\n   return 0;\n }"}, {"sha": "dc245b1ca009bee3e09ac0bd22bac0e55f3fcff8", "filename": "libstdc++-v3/testsuite/23_containers/list/moveable.cc", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmoveable.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2005, 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -17,7 +17,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n // NOTE: This makes use of the fact that we know how moveable\n // is implemented on list (via swap). If the implementation changed\n // this test may begin to fail.\n@@ -26,17 +25,26 @@\n #include <utility>\n #include <testsuite_hooks.h>\n \n+template<typename _Tp>\n+  void\n+  test_moveable()\n+  {\n+    bool test __attribute__((unused)) = true;\n+\n+    typedef _Tp list_type;\n+    \n+    list_type a,b;\n+    a.push_back(1);\n+    b = std::move(a);\n+    VERIFY( b.size() == 1 && *b.begin() == 1 && a.size() == 0 );\n+    \n+    list_type c(std::move(b));\n+    VERIFY( c.size() == 1 && *c.begin() == 1 );\n+    VERIFY( b.size() == 0 );\n+  }\n+\n int main()\n {\n-  bool test __attribute__((unused)) = true;\n-\n-  std::list<int> a,b;\n-  a.push_back(1);\n-  b = std::move(a);\n-  VERIFY( b.size() == 1 && *b.begin() == 1 && a.size() == 0 );\n-\n-  std::list<int> c(std::move(b));\n-  VERIFY( c.size() == 1 && *c.begin() == 1 );\n-  VERIFY( b.size() == 0 );\n+  test_moveable<std::list<int> >();\n   return 0;\n }"}, {"sha": "d44e1c7061252a811bec2a798cc5a5a78fe159a3", "filename": "libstdc++-v3/testsuite/23_containers/list/operations/1.cc", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F1.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -20,21 +20,24 @@\n #include <list>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n // splice(p, x) + remove + reverse\n+template<typename _Tp>\n void\n-test01()\n+operations01()\n {\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+  typedef typename list_type::iterator iterator;\n+\n   const int K = 417;\n   const int A[] = {1, 2, 3, 4, 5};\n   const int B[] = {K, K, K, K, K};\n   const std::size_t N = sizeof(A) / sizeof(int);\n   const std::size_t M = sizeof(B) / sizeof(int);\n \n-  std::list<int> list0101(A, A + N);\n-  std::list<int> list0102(B, B + M);\n-  std::list<int>::iterator p = list0101.begin();\n+  list_type list0101(A, A + N);\n+  list_type list0102(B, B + M);\n+  iterator p = list0101.begin();\n \n   VERIFY(list0101.size() == N);\n   VERIFY(list0102.size() == M);\n@@ -65,9 +68,9 @@ test01()\n   VERIFY(p == list0101.end());\n }\n \n-int main(void)\n+int main()\n {\n-  test01();\n+  operations01<std::list<int> >();\n   return 0;\n }\n "}, {"sha": "743b176b38f33a516909c49516730494545c7e03", "filename": "libstdc++-v3/testsuite/23_containers/list/operations/2.cc", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F2.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -20,21 +20,24 @@\n #include <list>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n // splice(p, x, i) + remove_if + operator==\n+template<typename _Tp>\n void\n-test02()\n+operations02()\n {\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+  typedef typename list_type::iterator iterator;\n+\n   const int A[] = {1, 2, 3, 4, 5};\n   const int B[] = {2, 1, 3, 4, 5};\n   const int C[] = {1, 3, 4, 5, 2};\n   const int N = sizeof(A) / sizeof(int);\n-  std::list<int> list0201(A, A + N);\n-  std::list<int> list0202(A, A + N);\n-  std::list<int> list0203(B, B + N);\n-  std::list<int> list0204(C, C + N);\n-  std::list<int>::iterator i = list0201.begin();\n+  list_type list0201(A, A + N);\n+  list_type list0202(A, A + N);\n+  list_type list0203(B, B + N);\n+  list_type list0204(C, C + N);\n+  iterator i = list0201.begin();\n \n   // result should be unchanged\n   list0201.splice(list0201.begin(), list0201, i);\n@@ -53,6 +56,6 @@ test02()\n \n int main()\n {\n-  test02();\n+  operations02<std::list<int> >();\n   return 0;\n }"}, {"sha": "83d00133c494e5a114765cece6f7f32a8e19572c", "filename": "libstdc++-v3/testsuite/23_containers/list/operations/3.cc", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F3.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -20,12 +20,15 @@\n #include <list>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n // splice(p, x, f, l) + sort + merge + unique\n+template<typename _Tp>\n void\n-test03()\n+operations03()\n {\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+  typedef typename list_type::iterator iterator;\n+\n   const int A[] = {103, 203, 603, 303, 403, 503};\n   const int B[] = {417, 417, 417, 417, 417};\n   const int E[] = {103, 417, 417, 203, 603, 303, 403, 503};\n@@ -38,14 +41,14 @@ test03()\n   const int Q = sizeof(D) / sizeof(int);\n   const int R = sizeof(E) / sizeof(int);\n \n-  std::list<int> list0301(A, A + N);\n-  std::list<int> list0302(B, B + M);\n-  std::list<int> list0303(C, C + P);\n-  std::list<int> list0304(D, D + Q);\n-  std::list<int> list0305(E, E + R);\n-  std::list<int> list0306(F, F + R);\n-  std::list<int>::iterator p = list0301.begin();\n-  std::list<int>::iterator q = list0302.begin();\n+  list_type list0301(A, A + N);\n+  list_type list0302(B, B + M);\n+  list_type list0303(C, C + P);\n+  list_type list0304(D, D + Q);\n+  list_type list0305(E, E + R);\n+  list_type list0306(F, F + R);\n+  iterator p = list0301.begin();\n+  iterator q = list0302.begin();\n \n   ++p; ++q; ++q;\n   list0301.splice(p, list0302, list0302.begin(), q);\n@@ -67,6 +70,6 @@ test03()\n \n int main(void)\n {\n-  test03();\n+  operations03<std::list<int> >();\n   return 0;\n }"}, {"sha": "37b983a39a2e404b55383daf7d4fac06d3dc4faf", "filename": "libstdc++-v3/testsuite/23_containers/list/operations/4.cc", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F4.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -20,10 +20,8 @@\n #include <list>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n-// A comparison predicate to order by rightmost digit.  Tracks call counts for\n-// performance checks.\n+// A comparison predicate to order by rightmost digit.  Tracks call\n+// counts for performance checks.\n struct CompLastLt\n {\n   bool operator()(const int x, const int y) \n@@ -48,9 +46,13 @@ int CompLastEq::itsCount;\n \n // sort(pred) + merge(pred) + unique(pred)\n // also checks performance requirements\n+template<typename _Tp>\n void\n-test04()\n+operations04()\n {\n+  bool test __attribute__((unused)) = true;\n+  typedef _Tp list_type;\n+\n   const int A[] = {1, 2, 3, 4, 5, 6};\n   const int B[] = {12, 15, 13, 14, 11};\n   const int C[] = {11, 12, 13, 14, 15};\n@@ -59,11 +61,11 @@ test04()\n   const int M = sizeof(B) / sizeof(int);\n   const int Q = sizeof(D) / sizeof(int);\n \n-  std::list<int> list0401(A, A + N);\n-  std::list<int> list0402(B, B + M);\n-  std::list<int> list0403(C, C + M);\n-  std::list<int> list0404(D, D + Q);\n-  std::list<int> list0405(A, A + N);\n+  list_type list0401(A, A + N);\n+  list_type list0402(B, B + M);\n+  list_type list0403(C, C + M);\n+  list_type list0404(D, D + Q);\n+  list_type list0405(A, A + N);\n \n   // sort B\n   CompLastLt lt;\n@@ -91,7 +93,7 @@ test04()\n \n int main()\n {\n-  test04();\n+  operations04<std::list<int> >();\n   return 0;\n }\n "}, {"sha": "ae1939c8824f83bf9af2957a66da859cea6b62f3", "filename": "libstdc++-v3/testsuite/23_containers/list/operations/5.cc", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F5.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -25,26 +25,27 @@\n #include <testsuite_allocator.h>\n \n // Check the splice (and merge) bits of N1599.\n+template<typename _Tp>\n void\n-test01()\n+operations05()\n {\n   bool test __attribute__((unused)) = true;\n   \n-  typedef __gnu_test::uneq_allocator<int> my_alloc;\n-  typedef std::list<int, my_alloc> my_list;\n+  typedef _Tp list_type;\n+  typedef typename list_type::allocator_type allocator_type;\n \n   const int data1[] = {1, 2, 3, 4, 5};\n   const int data2[] = {6, 7, 8, 9, 10};\n   const size_t N1 = sizeof(data1) / sizeof(int);\n   const size_t N2 = sizeof(data2) / sizeof(int);\n   \n-  my_alloc alloc01(1), alloc02(2);\n+  allocator_type alloc01(1), alloc02(2);\n \n-  my_list l01(data1, data1 + N1, alloc01);\n-  const my_list l01_ref = l01;\n+  list_type l01(data1, data1 + N1, alloc01);\n+  const list_type l01_ref = l01;\n \n-  my_list l02(data2, data2 + N2, alloc02);\n-  const my_list l02_ref = l02;\n+  list_type l02(data2, data2 + N2, alloc02);\n+  const list_type l02_ref = l02;\n \n   bool catched = false;\n \n@@ -135,6 +136,10 @@ test01()\n \n int main()\n {\n-  test01();\n+  typedef int value_type;\n+  typedef __gnu_test::uneq_allocator<value_type> allocator_type;\n+  typedef std::list<value_type, allocator_type> list_type;\n+\n+  operations05<list_type>();\n   return 0;\n }"}, {"sha": "fcbb039dce3e460f90432430b7cdb4e8028fb8f9", "filename": "libstdc++-v3/testsuite/23_containers/list/pthread1.cc", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fpthread1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fpthread1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fpthread1.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -33,15 +33,15 @@\n #include <cstdlib>\n #include <pthread.h>\n \n-using namespace std;\n-\n const int thread_cycles = 10;\n const int thread_pairs = 10;\n const unsigned max_size = 100;\n const int iters = 10000;\n \n class task_queue\n {\n+  typedef std::list<int> list_type;\n+\n public:\n   task_queue ()\n   {\n@@ -55,14 +55,15 @@ class task_queue\n     pthread_cond_destroy (&fooCond1);\n     pthread_cond_destroy (&fooCond2);\n   }\n-  list<int> foo;\n-  pthread_mutex_t fooLock;\n-  pthread_cond_t fooCond1;\n-  pthread_cond_t fooCond2;\n+\n+  list_type\t\tfoo;\n+  pthread_mutex_t \tfooLock;\n+  pthread_cond_t \tfooCond1;\n+  pthread_cond_t \tfooCond2;\n };\n \n void*\n-produce (void* t)\n+produce(void* t)\n {\n   task_queue& tq = *(static_cast<task_queue*> (t));\n   int num = 0;\n@@ -79,7 +80,7 @@ produce (void* t)\n }\n \n void*\n-consume (void* t)\n+consume(void* t)\n {\n   task_queue& tq = *(static_cast<task_queue*> (t));\n   int num = 0;\n@@ -98,7 +99,7 @@ consume (void* t)\n }\n \n int\n-main ()\n+main()\n {\n   pthread_t prod[thread_pairs];\n   pthread_t cons[thread_pairs];"}, {"sha": "57411eef3f0ee5a4cd2816790d0ec736b2076cbe", "filename": "libstdc++-v3/testsuite/23_containers/list/pthread5.cc", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fpthread5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fpthread5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fpthread5.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -34,8 +34,6 @@\n #include <unistd.h>\t// To test for _POSIX_THREAD_PRIORITY_SCHEDULING\n #endif\n \n-using namespace std;\n-\n #define NTHREADS 8\n #define LOOPS 20\n \n@@ -48,19 +46,22 @@ struct tt_t\n void*\n thread_function (void* arg)\n {\n+  typedef std::vector<tt_t>\t\tvector_type;\n+  typedef std::list<std::string*>\tlist_type;\n+\n   int myid __attribute__((unused)) = *(int*) arg;\n   for (int i = 0; i < LOOPS; i++)\n     {\n-      vector<tt_t> myvect1;\n+      vector_type myvect1;\n \n       for (int j = 0; j < 2000; j++)\n \t{\n-\t  vector<tt_t> myvect2;\n+\t  vector_type myvect2;\n \t  tt_t v;\n \t  v.i = j;\n \t  myvect1.push_back (v);\n \t  myvect2.push_back (v);\n-\t  list<std::string *> mylist;\n+\t  list_type mylist;\n \t  std::string string_array[4];\n \t  string_array[0] = \"toto\";\n \t  string_array[1] = \"titi\";\n@@ -70,7 +71,7 @@ thread_function (void* arg)\n \t    {\n \t      if (mylist.size ())\n \t\t{\n-\t\t  list<std::string *>::iterator aIt;\n+\t\t  list_type::iterator aIt;\n \t\t  for (aIt = mylist.begin (); aIt != mylist.end (); ++aIt)\n \t\t    {\n \t\t      if ((*aIt) == &(string_array[k]))"}, {"sha": "6bcffbb05eea0deb75afcc77073f2bd14b92b7bc", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/citerators.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fciterators.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -28,7 +28,9 @@ test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  std::list<int> l(7);\n+  typedef std::list<int> list_type;\n+  list_type l(7);\n+\n   VERIFY( l.cbegin() == l.begin() );\n   VERIFY( l.cend() == l.end() );\n   VERIFY( l.crbegin() == l.rbegin() );"}, {"sha": "cd2b29948072c9e4e0e5857c5d29190b5059bd80", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -30,6 +30,7 @@ struct A\n \n void f()\n {\n-  std::list<A> l;\n+  typedef std::list<A> list_type;\n+  list_type l;\n   l.assign(10, 1);\n }"}, {"sha": "5c0bf6f72ce38165280ea9f1b7ceec54c666b9e6", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -23,5 +23,6 @@\n \n void f()\n {\n-  std::list<int> l(10, 1);\n+  typedef std::list<int> list_type;\n+  list_type l(10, 1);\n }"}, {"sha": "cc2b419bd4e190a38e83c8ed6ec705a2b1c442e7", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -25,5 +25,6 @@\n \n void f()\n {\n-  std::list<std::list<int> > l(10, 1);\n+  typedef std::list<std::list<int> > list_type;\n+  list_type l(10, 1);\n }"}, {"sha": "d650a9ec10280dfb3d0040c876e21dd6bf44d55f", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -26,5 +26,6 @@\n \n void f()\n {\n-  std::list<std::list<std::pair<char, char> > > l('a', 'b');\n+  typedef std::list<std::list<std::pair<char, char> > > list_type;\n+  list_type l('a', 'b');\n }"}, {"sha": "ae9e63f704ed39211e493c5566ef4341014d94bf", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -30,6 +30,7 @@ struct A\n \n void f()\n {\n-  std::list<A> l;\n+  typedef std::list<A> list_type;\n+  list_type l;\n   l.insert(l.begin(), 10, 1);\n }"}, {"sha": "69d25cf704eb5a81f210e2b9653054a5c8177c37", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/partial_specialization/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fpartial_specialization%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fpartial_specialization%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fpartial_specialization%2F1.cc?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -29,5 +29,5 @@ struct user_type {};\n namespace std \n {\n   template<typename Allocator>\n-    class list<user_type, Allocator> {};\n+    class list<user_type, Allocator> { };\n }"}, {"sha": "562f418fa22998f729967c0303e4f3b26ec80211", "filename": "libstdc++-v3/testsuite/util/common_type/assoc/common_type.hpp", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fassoc%2Fcommon_type.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875d0f10a6fb79b1b4387baedeae9a21bc0b14a1/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fassoc%2Fcommon_type.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fassoc%2Fcommon_type.hpp?ref=875d0f10a6fb79b1b4387baedeae9a21bc0b14a1", "patch": "@@ -674,28 +674,20 @@ namespace __gnu_pbds\n       typedef typename __gnu_cxx::typelist::create1<cnt_5_u>::type lu_policy1;\n \n       typedef\n-      typename __gnu_cxx::typelist::create2<\n-\tlu_policy0,\n-\tlu_policy1>::type\n+      typename __gnu_cxx::typelist::create2<lu_policy0, lu_policy1>::type\n       lu_policies;\n \n       template<typename Policy_Tl>\n       struct generic_list_update_t\n       {\n       private:\n         typedef\n-\ttypename __gnu_cxx::typelist::at_index<\n-\tPolicy_Tl, 0>::type\n+\ttypename __gnu_cxx::typelist::at_index<Policy_Tl, 0>::type\n \tupdate_policy_t;\n \n       public:\n         typedef\n-\t__gnu_pbds::list_update<\n-\tKey,\n-\tData,\n-\tEq_Fn,\n-\tupdate_policy_t,\n-\tAllocator>\n+\t__gnu_pbds::list_update<Key, Data, Eq_Fn, update_policy_t, Allocator>\n \ttype;\n       };\n "}]}