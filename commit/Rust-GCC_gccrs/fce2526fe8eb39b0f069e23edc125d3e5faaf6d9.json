{"sha": "fce2526fe8eb39b0f069e23edc125d3e5faaf6d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNlMjUyNmZlOGViMzliMGYwNjllMjNlZGMxMjVkM2U1ZmFhZjZkOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2007-06-06T10:16:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:16:27Z"}, "message": "decl.c (gnat_to_gnu_entity): Manually mark the top of the renamed expression of a full renaming at toplevel.\n\n2007-04-20  Eric Botcazou  <ebotcazou@adacore.com>\n\t    Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n\t    Olivier Hainque  <hainque@adacore.com>\n\n\t* decl.c (gnat_to_gnu_entity) <object>: Manually mark the top of the\n\trenamed expression of a full renaming at toplevel.\n\t(gnat_to_gnu_entity, case object): If not defining, do not look inside\n\tthe values the constant is initialized to if it is an N_Allocator.\n\t(gnat_to_gnu_entity) <E_Array_Subtype>: Manually mark the top of the\n\tTYPE_SIZE_UNIT of inner types after the stride is elaborated.\n\t(make_aligning_type): Accept an extra ROOM argument for storage to be\n\tmade available before the aligned field, and an extra BASE_ALIGN\n\targument for callers to pass the alignment guaranteed to be honored for\n\tthe whole aligning object. Avoid call to finish_record_type, which only\n\tinterferes with the sizes we want to set.\n\t(gnat_to_gnu_entity) <E_Variable>: Pass the required extra arguments to\n\tmake_aligning_type for super-aligned objects on stack.\n\t(components_to_record): Pass the adjusted size of the type when creating\n\tfields in the qualified union for the variant part.\n\t(gnat_substitute_in_type): Copy TYPE_USER_ALIGN.\n\t(gnat_to_gnu_entity, case E_Signed_Integer_Subtype): Likewise for\n\tpacked array type.\n\t(maybe_pad_type): Set TYPE_USER_ALIGN.\n\t(make_aligning_type): Likewise.\n\tALIGN argument is unsigned int.\n\t(gnat_to_gnu_entity, case E_Function): Back annotate return mechanism.\n\t(gnat_to_gnu_param): Likewise, for parameters.\n\t(gnat_to_gnu_entity) <object>: Always instantiate the renaming object\n\tif it is constant and stems from a function call.\n\t(gnat_to_gnu_entity) <E_Record_Type>: Set packed to -2 if the alignment\n\tof the record is specified.  Adjust accordingly.\n\t(adjust_packed): New static function.\n\t(gnat_to_gnu_field): Use it to adjust the packedness setting.\n\t(components_to_record): Likewise.\n\t(gnat_to_gnu_entity) <object>: Do not test the renamed expression for\n\tside-effects if the object is deemed constant.\n\t(gnat_to_gnu_entity) <E_Array_Type>: Create a name for the fat pointer\n\ttype instead of merely finalizing it.  Tidy.\n\t<E_Access_Subprogram_Type>: Retrieve the type from the TYPE_DECL.\n\t<E_Access_Type>: Likewise.\n\t(defer_debug_incomplete_list): Rename to defer_finalize_list.\n\t(defer_debug_level): Delete.\n\t(gnat_to_gnu_entity) <debug_deferred>: Likewise\n\t<E_Array_Type>: Call rest_of_record_type_compilation on the fat pointer\n\ttype.\n\t<E_Record_Type>: Do not explicitly defer finalizing the type.\n\tAdjust for write_record_type_debug_info renaming.\n\t<E_Subprogram_Type>: Likewise.\n\tFinalize deferred types right after deferred incomplete types are\n\texpanded.\n\t(rest_of_type_decl_compilation): New global function.\n\t(components_to_record): Rename defer_debug parameter to do_not_finalize.\n\t(components_to_record): Propagate the packedness to the fields of the\n\tqualified union type if there is a variant part.\n\t(gnat_to_gnu_entity) <E_Array_Type>: Use new function\n\tinstead of inline code to adjust the XUT field offsets.\n\t(gnat_to_gnu_entity): Adjust for new prototype of finish_record_type.\n\t<E_Record_Subtype>: Do not let finish_record_type compute the sizes\n\tand write the debug info if the type derives from a discriminated one.\n\t(gnat_to_gnu_entity) <E_Array_Type>: Adjust call to create_index_type.\n\t<E_Array_Subtype>: Likewise.\n\t<E_String_Literal_Subtype>: Likewise.\n\t(gnat_to_gnu_entity): Set TYPE_USER_ALIGN on types only if they have\n\tan alignment clause.\n\t(maybe_pad_type): Update ORIG_SIZE to the minimum required to meet ALIGN\n\tbefore giving warning.\n\t(prepend_one_attribute_to): New function, helper to prepend an attribute\n\tto an attribute list.\n\t(gnat_to_gnu_entity) <E_Procedure>: Use it.\n\t(prepend_attributes): Likewise.\n\t(gnat_to_gnu_entity) <E_Variable>: Use constants of the proper type.\n\t<E_Array_Type>: Declare the padding type for the element type, if any.\n\t<E_Array_Subtype>: Likewise.\n\t(defer_limited_with): New variable.\n\t(Gigi_Equivalent_Type): New function.\n\t(gnat_to_gnu_entity): Use it at start and use result throughout.\n\t(gnat_to_gnu_entity, case E_Access_Type): Rework to use\n\tGigi_Equivalent_Type, support Limited_With, allow two levels of\n\tindirection, precompute if unconstrained array to simplify logic, and\n\tuse defer_limited_with to defer elaboration of some types from limited\n\twith.\n\t(finalize_from_with_types): New function.\n\nFrom-SVN: r125370", "tree": {"sha": "c006dfb8719fcd3af52284c204a61aae265d4dd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c006dfb8719fcd3af52284c204a61aae265d4dd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fce2526fe8eb39b0f069e23edc125d3e5faaf6d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fce2526fe8eb39b0f069e23edc125d3e5faaf6d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fce2526fe8eb39b0f069e23edc125d3e5faaf6d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fce2526fe8eb39b0f069e23edc125d3e5faaf6d9/comments", "author": null, "committer": null, "parents": [{"sha": "0cb8d27cd3ab2935184bd54c917c980a60f11565", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cb8d27cd3ab2935184bd54c917c980a60f11565", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cb8d27cd3ab2935184bd54c917c980a60f11565"}], "stats": {"total": 1806, "additions": 1040, "deletions": 766}, "files": [{"sha": "1efc9fd730f14dd24699279f9f9a36a2348f921f", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 1040, "deletions": 766, "changes": 1806, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fce2526fe8eb39b0f069e23edc125d3e5faaf6d9/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fce2526fe8eb39b0f069e23edc125d3e5faaf6d9/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=fce2526fe8eb39b0f069e23edc125d3e5faaf6d9"}]}