{"sha": "4ebe7d9317b79fcd68fcec3e5cbdb502abe8152d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGViZTdkOTMxN2I3OWZjZDY4ZmNlYzNlNWNiZGI1MDJhYmU4MTUyZA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2005-06-27T18:40:16Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-06-27T18:40:16Z"}, "message": "PR java/21540, PR java/13788:\n\ngcc/java/:\n\tPR java/21540, PR java/13788:\n\t* parse.y (java_complete_lhs) <CASE_EXPR>: Use\n\tfold_constant_for_init.\n\t(patch_binop): Added 'folding' argument.  Updated all callers.\n\t(patch_unaryop) <NOP_EXPR>: New case.\n\t(fold_constant_for_init) <NOP_EXPR>: Likewise.\n\t(fold_constant_for_init) <COND_EXPR>: Fix sense of test.\nlibjava/:\n\tPR java/21540, PR java/13788:\n\t* testsuite/libjava.compile/pr21540.java: New file.\n\t* testsuite/libjava.compile/pr13788.java: New file.\n\t* testsuite/libjava.jacks/jacks.xfail: Updated.\n\nFrom-SVN: r101358", "tree": {"sha": "5bdfeb3073dddff148a77228a8e3565890e2e858", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bdfeb3073dddff148a77228a8e3565890e2e858"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ebe7d9317b79fcd68fcec3e5cbdb502abe8152d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ebe7d9317b79fcd68fcec3e5cbdb502abe8152d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ebe7d9317b79fcd68fcec3e5cbdb502abe8152d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ebe7d9317b79fcd68fcec3e5cbdb502abe8152d/comments", "author": null, "committer": null, "parents": [{"sha": "d994b336c8da5c111a9ebd095fad9e969be7f439", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d994b336c8da5c111a9ebd095fad9e969be7f439", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d994b336c8da5c111a9ebd095fad9e969be7f439"}], "stats": {"total": 97, "additions": 64, "deletions": 33}, "files": [{"sha": "239e2b7182bbeecdf90d6d05476e80c1a1f45ce2", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebe7d9317b79fcd68fcec3e5cbdb502abe8152d/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebe7d9317b79fcd68fcec3e5cbdb502abe8152d/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=4ebe7d9317b79fcd68fcec3e5cbdb502abe8152d", "patch": "@@ -1,3 +1,13 @@\n+2005-06-27  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR java/21540, PR java/13788:\n+\t* parse.y (java_complete_lhs) <CASE_EXPR>: Use\n+\tfold_constant_for_init.\n+\t(patch_binop): Added 'folding' argument.  Updated all callers.\n+\t(patch_unaryop) <NOP_EXPR>: New case.\n+\t(fold_constant_for_init) <NOP_EXPR>: Likewise.\n+\t(fold_constant_for_init) <COND_EXPR>: Fix sense of test.\n+\n 2005-06-25  Jan Hubicka  <jh@suse.cz>\n \n \t* builtins.c (define_builtin): Accept new flags parameter."}, {"sha": "0a513b1f92d85d4a71ed83e2af890dff0d690a29", "filename": "gcc/java/parse.y", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebe7d9317b79fcd68fcec3e5cbdb502abe8152d/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebe7d9317b79fcd68fcec3e5cbdb502abe8152d/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=4ebe7d9317b79fcd68fcec3e5cbdb502abe8152d", "patch": "@@ -161,7 +161,7 @@ static tree build_new_invocation (tree, tree);\n static tree build_assignment (int, int, tree, tree);\n static tree build_binop (enum tree_code, int, tree, tree);\n static tree patch_assignment (tree, tree);\n-static tree patch_binop (tree, tree, tree);\n+static tree patch_binop (tree, tree, tree, int);\n static tree build_unaryop (int, int, tree);\n static tree build_incdec (int, int, tree, int);\n static tree patch_unaryop (tree, tree);\n@@ -11791,8 +11791,13 @@ java_complete_lhs (tree node)\n \n       /* First, the case expression must be constant. Values of final\n          fields are accepted. */\n+      nn = fold_constant_for_init (cn, NULL_TREE);\n+      if (nn != NULL_TREE)\n+\tcn = nn;\n+\n       cn = fold (cn);\n-      if ((TREE_CODE (cn) == COMPOUND_EXPR || TREE_CODE (cn) == COMPONENT_REF)\n+      if ((TREE_CODE (cn) == COMPOUND_EXPR\n+\t   || TREE_CODE (cn) == COMPONENT_REF)\n \t  && JDECL_P (TREE_OPERAND (cn, 1))\n \t  && FIELD_FINAL (TREE_OPERAND (cn, 1))\n \t  && DECL_INITIAL (TREE_OPERAND (cn, 1)))\n@@ -12303,12 +12308,12 @@ java_complete_lhs (tree node)\n \n           TREE_OPERAND (node, 1) = nn;\n         }\n-      return patch_binop (node, wfl_op1, wfl_op2);\n+      return patch_binop (node, wfl_op1, wfl_op2, 0);\n \n     case INSTANCEOF_EXPR:\n       wfl_op1 = TREE_OPERAND (node, 0);\n       COMPLETE_CHECK_OP_0 (node);\n-      return patch_binop (node, wfl_op1, TREE_OPERAND (node, 1));\n+      return patch_binop (node, wfl_op1, TREE_OPERAND (node, 1), 0);\n \n     case UNARY_PLUS_EXPR:\n     case NEGATE_EXPR:\n@@ -13442,7 +13447,7 @@ java_refold (tree t)\n    of remaining nodes and detects more errors in certain cases.  */\n \n static tree\n-patch_binop (tree node, tree wfl_op1, tree wfl_op2)\n+patch_binop (tree node, tree wfl_op1, tree wfl_op2, int folding)\n {\n   tree op1 = TREE_OPERAND (node, 0);\n   tree op2 = TREE_OPERAND (node, 1);\n@@ -13624,16 +13629,14 @@ patch_binop (tree node, tree wfl_op1, tree wfl_op2)\n \t\t\t    build_int_cst (NULL_TREE, 0x3f)));\n \n       /* The >>> operator is a >> operating on unsigned quantities */\n-      if (code == URSHIFT_EXPR && ! flag_emit_class_files)\n+      if (code == URSHIFT_EXPR && (folding || ! flag_emit_class_files))\n \t{\n \t  tree to_return;\n           tree utype = java_unsigned_type (prom_type);\n           op1 = convert (utype, op1);\n-\t  TREE_SET_CODE (node, RSHIFT_EXPR);\n-          TREE_OPERAND (node, 0) = op1;\n-          TREE_OPERAND (node, 1) = op2;\n-          TREE_TYPE (node) = utype;\n-\t  to_return = convert (prom_type, node);\n+\n+\t  to_return = fold_build2 (RSHIFT_EXPR, utype, op1, op2);\n+\t  to_return = convert (prom_type, to_return);\n \t  /* Copy the original value of the COMPOUND_ASSIGN_P flag */\n \t  COMPOUND_ASSIGN_P (to_return) = COMPOUND_ASSIGN_P (node);\n \t  TREE_SIDE_EFFECTS (to_return)\n@@ -14413,6 +14416,12 @@ patch_unaryop (tree node, tree wfl_op)\n \t  return value;\n \t}\n       break;\n+\n+    case NOP_EXPR:\n+      /* This can only happen when the type is already known.  */\n+      gcc_assert (TREE_TYPE (node) != NULL_TREE);\n+      prom_type = TREE_TYPE (node);\n+      break;\n     }\n \n   if (error_found)\n@@ -16214,13 +16223,14 @@ fold_constant_for_init (tree node, tree context)\n       if (val == NULL_TREE || ! TREE_CONSTANT (val))\n \treturn NULL_TREE;\n       TREE_OPERAND (node, 1) = val;\n-      return patch_binop (node, op0, op1);\n+      return patch_binop (node, op0, op1, 1);\n \n     case UNARY_PLUS_EXPR:\n     case NEGATE_EXPR:\n     case TRUTH_NOT_EXPR:\n     case BIT_NOT_EXPR:\n     case CONVERT_EXPR:\n+    case NOP_EXPR:\n       op0 = TREE_OPERAND (node, 0);\n       val = fold_constant_for_init (op0, context);\n       if (val == NULL_TREE || ! TREE_CONSTANT (val))\n@@ -16246,8 +16256,8 @@ fold_constant_for_init (tree node, tree context)\n       if (val == NULL_TREE || ! TREE_CONSTANT (val))\n \treturn NULL_TREE;\n       TREE_OPERAND (node, 2) = val;\n-      return integer_zerop (TREE_OPERAND (node, 0)) ? TREE_OPERAND (node, 1)\n-\t: TREE_OPERAND (node, 2);\n+      return integer_zerop (TREE_OPERAND (node, 0)) ? TREE_OPERAND (node, 2)\n+\t: TREE_OPERAND (node, 1);\n \n     case VAR_DECL:\n     case FIELD_DECL:"}, {"sha": "0a400b1f3749c12d08c12025d2b391c31a1786b2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebe7d9317b79fcd68fcec3e5cbdb502abe8152d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebe7d9317b79fcd68fcec3e5cbdb502abe8152d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=4ebe7d9317b79fcd68fcec3e5cbdb502abe8152d", "patch": "@@ -1,3 +1,10 @@\n+2005-06-27  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR java/21540, PR java/13788:\n+\t* testsuite/libjava.compile/pr21540.java: New file.\n+\t* testsuite/libjava.compile/pr13788.java: New file.\n+\t* testsuite/libjava.jacks/jacks.xfail: Updated.\n+\n 2005-06-26  Andreas Tobler  <a.tobler@schweiz.ch>\n \n \t* testsuite/libjava.mauve/xfails: Updated to reflect current state"}, {"sha": "44f25ea1ccfa17c2de380694d407332ae5ad0b4d", "filename": "libjava/testsuite/libjava.compile/pr13788.java", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebe7d9317b79fcd68fcec3e5cbdb502abe8152d/libjava%2Ftestsuite%2Flibjava.compile%2Fpr13788.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebe7d9317b79fcd68fcec3e5cbdb502abe8152d/libjava%2Ftestsuite%2Flibjava.compile%2Fpr13788.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.compile%2Fpr13788.java?ref=4ebe7d9317b79fcd68fcec3e5cbdb502abe8152d", "patch": "@@ -0,0 +1,8 @@\n+class pr13788 {\n+  private static final int  DUMMY1 = 1 >>> 1;\n+\n+  public static void main(String [] args) {\n+    System.out.println(DUMMY1);\n+  }\n+}\n+"}, {"sha": "4d6841f8b38a9abb5ec41990137546df105591d9", "filename": "libjava/testsuite/libjava.compile/pr21540.java", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebe7d9317b79fcd68fcec3e5cbdb502abe8152d/libjava%2Ftestsuite%2Flibjava.compile%2Fpr21540.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebe7d9317b79fcd68fcec3e5cbdb502abe8152d/libjava%2Ftestsuite%2Flibjava.compile%2Fpr21540.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.compile%2Fpr21540.java?ref=4ebe7d9317b79fcd68fcec3e5cbdb502abe8152d", "patch": "@@ -0,0 +1,15 @@\n+public class pr21540\n+{\n+    public static final long xxx = 555;\n+    \n+    public boolean fn (int v)\n+    {\n+\tswitch (v)\n+\t    {\n+\t    case ((int) xxx >>> 32):\n+\t\treturn true;\n+\t    default:\n+\t\treturn false;\n+\t    }\n+    }\n+}"}, {"sha": "f5bff4ee07c5d76b3116c2fa300ce317ba2eb9a4", "filename": "libjava/testsuite/libjava.jacks/jacks.xfail", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebe7d9317b79fcd68fcec3e5cbdb502abe8152d/libjava%2Ftestsuite%2Flibjava.jacks%2Fjacks.xfail", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebe7d9317b79fcd68fcec3e5cbdb502abe8152d/libjava%2Ftestsuite%2Flibjava.jacks%2Fjacks.xfail", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jacks%2Fjacks.xfail?ref=4ebe7d9317b79fcd68fcec3e5cbdb502abe8152d", "patch": "@@ -274,9 +274,7 @@\n 15.28-null-1\n 15.28-null-3\n 15.28-primitive-15\n-15.28-primitive-16\n 15.28-primitive-17\n-15.28-primitive-9\n 15.28-qualified-name-10\n 15.28-qualified-name-5\n 15.28-qualified-name-6\n@@ -294,7 +292,6 @@\n 15.28-simple-namestr-4\n 15.28-string-11\n 15.28-string-15\n-15.28-string-16\n 15.28-string-17\n 15.28-string-18\n 15.28-string-2\n@@ -456,27 +453,11 @@\n 5.1.2-btf-1\n 5.1.2-btf-3\n 5.1.2-btf-5\n-5.1.2-bti-1\n-5.1.2-bti-3\n-5.1.2-bti-5\n-5.1.2-btl-1\n-5.1.2-btl-3\n-5.1.2-btl-5\n-5.1.2-bts-1\n-5.1.2-bts-2\n-5.1.2-bts-3\n-5.1.2-bts-4\n-5.1.2-bts-5\n 5.1.2-std-3\n 5.1.2-std-5\n 5.1.2-stf-1\n 5.1.2-stf-3\n 5.1.2-stf-5\n-5.1.2-sti-1\n-5.1.2-sti-5\n-5.1.2-stl-1\n-5.1.2-stl-3\n-5.1.2-stl-5\n 6.3-1\n 6.5.1-type-15\n 6.5.1-type-16"}]}