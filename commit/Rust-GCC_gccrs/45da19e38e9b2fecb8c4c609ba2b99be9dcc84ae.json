{"sha": "45da19e38e9b2fecb8c4c609ba2b99be9dcc84ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVkYTE5ZTM4ZTliMmZlY2I4YzRjNjA5YmEyYjk5YmU5ZGNjODRhZQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2004-06-28T13:11:44Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-06-28T13:11:44Z"}, "message": "combine.c (can_combine_p): Do not prevent building insns that use and clobber the same fixed hard register.\n\n\t* combine.c (can_combine_p): Do not prevent building insns that use\n\tand clobber the same fixed hard register.\n\t(reg_dead_at_p): Likewise.\n\nFrom-SVN: r83785", "tree": {"sha": "a3302f4c09b4eb6c793d19de6e01698e604bf91a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3302f4c09b4eb6c793d19de6e01698e604bf91a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45da19e38e9b2fecb8c4c609ba2b99be9dcc84ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45da19e38e9b2fecb8c4c609ba2b99be9dcc84ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45da19e38e9b2fecb8c4c609ba2b99be9dcc84ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45da19e38e9b2fecb8c4c609ba2b99be9dcc84ae/comments", "author": null, "committer": null, "parents": [{"sha": "03797ac58c0480e1221324d2532c5041f542fac2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03797ac58c0480e1221324d2532c5041f542fac2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03797ac58c0480e1221324d2532c5041f542fac2"}], "stats": {"total": 42, "additions": 32, "deletions": 10}, "files": [{"sha": "fa3ddd5f81a208f5b2a85f51907c80162e438b6f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45da19e38e9b2fecb8c4c609ba2b99be9dcc84ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45da19e38e9b2fecb8c4c609ba2b99be9dcc84ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45da19e38e9b2fecb8c4c609ba2b99be9dcc84ae", "patch": "@@ -1,3 +1,9 @@\n+2004-06-28  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* combine.c (can_combine_p): Do not prevent building insns that use\n+\tand clobber the same fixed hard register.\n+\t(reg_dead_at_p): Likewise.\n+\n 2004-06-28  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* tree-sra.c (is_sra_candidate_ref): Remove second arg; all callers"}, {"sha": "7ce6b32c59a68d895eb997c3e8b48ea795376772", "filename": "gcc/combine.c", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45da19e38e9b2fecb8c4c609ba2b99be9dcc84ae/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45da19e38e9b2fecb8c4c609ba2b99be9dcc84ae/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=45da19e38e9b2fecb8c4c609ba2b99be9dcc84ae", "patch": "@@ -1129,16 +1129,30 @@ can_combine_p (rtx insn, rtx i3, rtx pred ATTRIBUTE_UNUSED, rtx succ,\n   else if (GET_CODE (dest) != CC0)\n     return 0;\n \n-  /* Don't substitute for a register intended as a clobberable operand.\n-     Similarly, don't substitute an expression containing a register that\n-     will be clobbered in I3.  */\n+\n   if (GET_CODE (PATTERN (i3)) == PARALLEL)\n     for (i = XVECLEN (PATTERN (i3), 0) - 1; i >= 0; i--)\n-      if (GET_CODE (XVECEXP (PATTERN (i3), 0, i)) == CLOBBER\n-\t  && (reg_overlap_mentioned_p (XEXP (XVECEXP (PATTERN (i3), 0, i), 0),\n-\t\t\t\t       src)\n-\t      || rtx_equal_p (XEXP (XVECEXP (PATTERN (i3), 0, i), 0), dest)))\n-\treturn 0;\n+      if (GET_CODE (XVECEXP (PATTERN (i3), 0, i)) == CLOBBER)\n+\t{\n+          /* Don't substitute for a register intended as a clobberable\n+\t     operand. */\n+\t  rtx reg = XEXP (XVECEXP (PATTERN (i3), 0, i), 0);\n+\t  if (rtx_equal_p (reg, dest))\n+\t    return 0;\n+\n+\t  /* If the clobber represents an earlyclobber operand, we must not\n+\t     substitute an expression containing the clobbered register.\n+\t     As we do not analyse the constraint strings here, we have to\n+\t     make the conservative assumption.  However, if the register is\n+\t     a fixed hard reg, the clobber cannot represent any operand;\n+\t     we leave it up to the machine description to either accept or\n+\t     reject use-and-clobber patterns.  */\n+\t  if (!REG_P (reg)\n+\t      || REGNO (reg) >= FIRST_PSEUDO_REGISTER\n+\t      || !fixed_regs[REGNO (reg)])\n+\t    if (reg_overlap_mentioned_p (reg, src))\n+\t      return 0;\n+\t}\n \n   /* If INSN contains anything volatile, or is an `asm' (whether volatile\n      or not), reject, unless nothing volatile comes between it and I3 */\n@@ -11142,11 +11156,13 @@ reg_dead_at_p (rtx reg, rtx insn)\n \n   reg_dead_flag = 0;\n \n-  /* Check that reg isn't mentioned in NEWPAT_USED_REGS.  */\n+  /* Check that reg isn't mentioned in NEWPAT_USED_REGS.  For fixed registers\n+     we allow the machine description to decide whether use-and-clobber\n+     patterns are OK.  */\n   if (reg_dead_regno < FIRST_PSEUDO_REGISTER)\n     {\n       for (i = reg_dead_regno; i < reg_dead_endregno; i++)\n-\tif (TEST_HARD_REG_BIT (newpat_used_regs, i))\n+\tif (!fixed_regs[i] && TEST_HARD_REG_BIT (newpat_used_regs, i))\n \t  return 0;\n     }\n "}]}