{"sha": "a15908a410d8d7d2a20fb78bc95d9a17b10e5d72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE1OTA4YTQxMGQ4ZDdkMmEyMGZiNzhiYzk1ZDlhMTdiMTBlNWQ3Mg==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2007-01-04T00:09:48Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2007-01-04T00:09:48Z"}, "message": "re PR target/16634 (arm-elf-gcc problems when generating code for __attribute__ ((interrupt (\"IRQ\"))))\n\n2007-01-03  Paul Brook  <paul@codesourcery.com>\n\n\tPR target/16634\n\tgcc/\n\t* config/arm/arm.c (output_return_instruction): Pop PC in interrupt\n\tfunctions.\n\t(use_return_insn): Return 0 for Thumb interrupt functions.\n\t(print_multi_reg): Add rfe argument for IRQ returns.\n\t(arm_output_epilogue): Pop interrupt return address directly into PC.\n\t(arm_expand_prologue): Only adjust IRQ return address in Arm mode.\n\nFrom-SVN: r120413", "tree": {"sha": "406736e8a2c397ce1dc765f7a7440b8e5af7a24e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/406736e8a2c397ce1dc765f7a7440b8e5af7a24e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a15908a410d8d7d2a20fb78bc95d9a17b10e5d72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a15908a410d8d7d2a20fb78bc95d9a17b10e5d72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a15908a410d8d7d2a20fb78bc95d9a17b10e5d72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a15908a410d8d7d2a20fb78bc95d9a17b10e5d72/comments", "author": null, "committer": null, "parents": [{"sha": "019df41c9647937186705d54b57b72eaa0a82be7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019df41c9647937186705d54b57b72eaa0a82be7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/019df41c9647937186705d54b57b72eaa0a82be7"}], "stats": {"total": 57, "additions": 41, "deletions": 16}, "files": [{"sha": "f9c53fc21fea445efd56947388f1bd822bc64cc1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15908a410d8d7d2a20fb78bc95d9a17b10e5d72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15908a410d8d7d2a20fb78bc95d9a17b10e5d72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a15908a410d8d7d2a20fb78bc95d9a17b10e5d72", "patch": "@@ -1,3 +1,13 @@\n+2007-01-03  Paul Brook  <paul@codesourcery.com>\n+\n+\tPR target/16634\n+\t* config/arm/arm.c (output_return_instruction): Pop PC in interrupt\n+\tfunctions.\n+\t(use_return_insn): Return 0 for Thumb interrupt functions.\n+\t(print_multi_reg): Add rfe argument for IRQ returns.\n+\t(arm_output_epilogue): Pop interrupt return address directly into PC.\n+\t(arm_expand_prologue): Only adjust IRQ return address in Arm mode.\n+\n 2007-01-03  Paul Brook  <paul@codesourcery.com>\n \n \tMerge from sourcerygxx-4_1."}, {"sha": "d7fa19ce342fc96b38a45e4512d96d572aa443db", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15908a410d8d7d2a20fb78bc95d9a17b10e5d72/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15908a410d8d7d2a20fb78bc95d9a17b10e5d72/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=a15908a410d8d7d2a20fb78bc95d9a17b10e5d72", "patch": "@@ -1543,8 +1543,9 @@ use_return_insn (int iscond, rtx sibling)\n   if (func_type & (ARM_FT_VOLATILE | ARM_FT_NAKED | ARM_FT_STACKALIGN))\n     return 0;\n \n-  /* So do interrupt functions that use the frame pointer.  */\n-  if (IS_INTERRUPT (func_type) && frame_pointer_needed)\n+  /* So do interrupt functions that use the frame pointer and Thumb\n+     interrupt functions.  */\n+  if (IS_INTERRUPT (func_type) && (frame_pointer_needed || TARGET_THUMB))\n     return 0;\n \n   offsets = arm_get_frame_offsets ();\n@@ -1605,7 +1606,7 @@ use_return_insn (int iscond, rtx sibling)\n \n   /* Can't be done if interworking with Thumb, and any registers have been\n      stacked.  */\n-  if (TARGET_INTERWORK && saved_int_regs != 0)\n+  if (TARGET_INTERWORK && saved_int_regs != 0 && !IS_INTERRUPT(func_type))\n     return 0;\n \n   /* On StrongARM, conditional returns are expensive if they aren't\n@@ -8739,15 +8740,17 @@ fp_const_from_val (REAL_VALUE_TYPE *r)\n /* Output the operands of a LDM/STM instruction to STREAM.\n    MASK is the ARM register set mask of which only bits 0-15 are important.\n    REG is the base register, either the frame pointer or the stack pointer,\n-   INSTR is the possibly suffixed load or store instruction.  */\n+   INSTR is the possibly suffixed load or store instruction.\n+   RFE is nonzero if the instruction should also copy spsr to cpsr.  */\n \n static void\n print_multi_reg (FILE *stream, const char *instr, unsigned reg,\n-\t\t unsigned long mask)\n+\t\t unsigned long mask, int rfe)\n {\n   unsigned i;\n   bool not_first = FALSE;\n \n+  gcc_assert (!rfe || (mask & (1 << PC_REGNUM)));\n   fputc ('\\t', stream);\n   asm_fprintf (stream, instr, reg);\n   fputc ('{', stream);\n@@ -8762,7 +8765,10 @@ print_multi_reg (FILE *stream, const char *instr, unsigned reg,\n \tnot_first = TRUE;\n       }\n \n-  fprintf (stream, \"}\\n\");\n+  if (rfe)\n+    fprintf (stream, \"}^\\n\");\n+  else\n+    fprintf (stream, \"}\\n\");\n }\n \n \n@@ -9971,10 +9977,10 @@ output_return_instruction (rtx operand, int really_return, int reverse)\n       const char * return_reg;\n \n       /* If we do not have any special requirements for function exit\n-\t (e.g. interworking, or ISR) then we can load the return address\n+\t (e.g. interworking) then we can load the return address\n \t directly into the PC.  Otherwise we must load it into LR.  */\n       if (really_return\n-\t  && ! TARGET_INTERWORK)\n+\t  && (IS_INTERRUPT (func_type) || !TARGET_INTERWORK))\n \treturn_reg = reg_names[PC_REGNUM];\n       else\n \treturn_reg = reg_names[LR_REGNUM];\n@@ -10427,16 +10433,17 @@ arm_output_epilogue (rtx sibling)\n \t  || current_function_calls_alloca)\n \tasm_fprintf (f, \"\\tsub\\t%r, %r, #%d\\n\", SP_REGNUM, FP_REGNUM,\n \t\t     4 * bit_count (saved_regs_mask));\n-      print_multi_reg (f, \"ldmfd\\t%r, \", SP_REGNUM, saved_regs_mask);\n+      print_multi_reg (f, \"ldmfd\\t%r, \", SP_REGNUM, saved_regs_mask, 0);\n \n       if (IS_INTERRUPT (func_type))\n \t/* Interrupt handlers will have pushed the\n \t   IP onto the stack, so restore it now.  */\n-\tprint_multi_reg (f, \"ldmfd\\t%r!, \", SP_REGNUM, 1 << IP_REGNUM);\n+\tprint_multi_reg (f, \"ldmfd\\t%r!, \", SP_REGNUM, 1 << IP_REGNUM, 0);\n     }\n   else\n     {\n       HOST_WIDE_INT amount;\n+      int rfe;\n       /* Restore stack pointer if necessary.  */\n       if (frame_pointer_needed)\n \t{\n@@ -10527,7 +10534,8 @@ arm_output_epilogue (rtx sibling)\n \t    asm_fprintf (f, \"\\twldrd\\t%r, [%r], #8\\n\", reg, SP_REGNUM);\n \n       /* If we can, restore the LR into the PC.  */\n-      if (ARM_FUNC_TYPE (func_type) == ARM_FT_NORMAL\n+      if (ARM_FUNC_TYPE (func_type) != ARM_FT_INTERWORKED\n+\t  && (TARGET_ARM || ARM_FUNC_TYPE (func_type) == ARM_FT_NORMAL)\n \t  && !IS_STACKALIGN (func_type)\n \t  && really_return\n \t  && current_function_pretend_args_size == 0\n@@ -10536,12 +10544,16 @@ arm_output_epilogue (rtx sibling)\n \t{\n \t  saved_regs_mask &= ~ (1 << LR_REGNUM);\n \t  saved_regs_mask |=   (1 << PC_REGNUM);\n+\t  rfe = IS_INTERRUPT (func_type);\n \t}\n+      else\n+\trfe = 0;\n \n       /* Load the registers off the stack.  If we only have one register\n \t to load use the LDR instruction - it is faster.  For Thumb-2\n \t always use pop and the assembler will pick the best instruction.*/\n-      if (TARGET_ARM && saved_regs_mask == (1 << LR_REGNUM))\n+      if (TARGET_ARM && saved_regs_mask == (1 << LR_REGNUM)\n+\t  && !IS_INTERRUPT(func_type))\n \t{\n \t  asm_fprintf (f, \"\\tldr\\t%r, [%r], #4\\n\", LR_REGNUM, SP_REGNUM);\n \t}\n@@ -10552,11 +10564,13 @@ arm_output_epilogue (rtx sibling)\n \t       (i.e. \"ldmfd sp!...\").  We know that the stack pointer is\n \t       in the list of registers and if we add writeback the\n \t       instruction becomes UNPREDICTABLE.  */\n-\t    print_multi_reg (f, \"ldmfd\\t%r, \", SP_REGNUM, saved_regs_mask);\n+\t    print_multi_reg (f, \"ldmfd\\t%r, \", SP_REGNUM, saved_regs_mask,\n+\t\t\t     rfe);\n \t  else if (TARGET_ARM)\n-\t    print_multi_reg (f, \"ldmfd\\t%r!, \", SP_REGNUM, saved_regs_mask);\n+\t    print_multi_reg (f, \"ldmfd\\t%r!, \", SP_REGNUM, saved_regs_mask,\n+\t\t\t     rfe);\n \t  else\n-\t    print_multi_reg (f, \"pop\\t\", SP_REGNUM, saved_regs_mask);\n+\t    print_multi_reg (f, \"pop\\t\", SP_REGNUM, saved_regs_mask, 0);\n \t}\n \n       if (current_function_pretend_args_size)\n@@ -11389,7 +11403,8 @@ arm_expand_prologue (void)\n      can be done with a single instruction.  */\n   if ((func_type == ARM_FT_ISR || func_type == ARM_FT_FIQ)\n       && (live_regs_mask & (1 << LR_REGNUM)) != 0\n-      && ! frame_pointer_needed)\n+      && ! frame_pointer_needed\n+      && TARGET_ARM)\n     {\n       rtx lr = gen_rtx_REG (SImode, LR_REGNUM);\n       "}]}