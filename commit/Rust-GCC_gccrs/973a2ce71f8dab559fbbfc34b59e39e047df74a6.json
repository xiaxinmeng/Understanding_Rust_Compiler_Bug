{"sha": "973a2ce71f8dab559fbbfc34b59e39e047df74a6", "node_id": "C_kwDOANBUbNoAKDk3M2EyY2U3MWY4ZGFiNTU5ZmJiZmMzNGI1OWUzOWUwNDdkZjc0YTY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-07T07:10:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-07T07:10:58Z"}, "message": "tree.cc: Add tree_builtin_call_types_compatible_p [PR105150]\n\nAnd here is the follow-up patch that does the argument checking\non GENERIC.  It ensures TYPE_MAIN_VARIANT == TYPE_MAIN_VARIANT\ncompatibility on the arguments, except for pointer arguments\nwhere both builtin's prototype and actual arguments have to be\npointers and satisfy tree_nop_conversion_p, and for promoted\nchar/short arguments where argument need to have integral\nsigned type tree_nop_conversion_p compatible with integer_type_node.\n\n2022-04-07  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/105150\n\t* tree.cc (tree_builtin_call_types_compatible_p): New function.\n\t(get_call_combined_fn): Use it.\n\n\t* gcc.dg/pr105150.c: New test.", "tree": {"sha": "d64131cc4473fd71c8a1a1a06fb344f5f164baf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d64131cc4473fd71c8a1a1a06fb344f5f164baf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/973a2ce71f8dab559fbbfc34b59e39e047df74a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/973a2ce71f8dab559fbbfc34b59e39e047df74a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/973a2ce71f8dab559fbbfc34b59e39e047df74a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/973a2ce71f8dab559fbbfc34b59e39e047df74a6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54ed6563d22694aa3e1935f89641a4f696a3a9f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ed6563d22694aa3e1935f89641a4f696a3a9f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54ed6563d22694aa3e1935f89641a4f696a3a9f7"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "900460c1555cfe449e2112b1bf507ab1920a3b63", "filename": "gcc/testsuite/gcc.dg/pr105150.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973a2ce71f8dab559fbbfc34b59e39e047df74a6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105150.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973a2ce71f8dab559fbbfc34b59e39e047df74a6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105150.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105150.c?ref=973a2ce71f8dab559fbbfc34b59e39e047df74a6", "patch": "@@ -0,0 +1,8 @@\n+/* PR tree-optimization/105150 */\n+/* { dg-options \"-w -Ofast\" } */\n+\n+#define A(name) __typeof (__builtin_##name (0)) name (); \\\n+  float name##1 () { return !name (1); } \\\n+  double name##2 () { return name (1.0L); }\n+#define B(name) A(name) A(name##l)\n+B (sqrt)"}, {"sha": "8f83ea1aae30abfefe0873d903bd18272799c4f1", "filename": "gcc/tree.cc", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973a2ce71f8dab559fbbfc34b59e39e047df74a6/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973a2ce71f8dab559fbbfc34b59e39e047df74a6/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=973a2ce71f8dab559fbbfc34b59e39e047df74a6", "patch": "@@ -8406,6 +8406,59 @@ get_callee_fndecl (const_tree call)\n   return NULL_TREE;\n }\n \n+/* Return true when STMTs arguments and return value match those of FNDECL,\n+   a decl of a builtin function.  */\n+\n+static bool\n+tree_builtin_call_types_compatible_p (const_tree call, tree fndecl)\n+{\n+  gcc_checking_assert (DECL_BUILT_IN_CLASS (fndecl) != NOT_BUILT_IN);\n+\n+  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+    if (tree decl = builtin_decl_explicit (DECL_FUNCTION_CODE (fndecl)))\n+      fndecl = decl;\n+\n+  if (TYPE_MAIN_VARIANT (TREE_TYPE (call))\n+      != TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (fndecl))))\n+    return false;\n+\n+  tree targs = TYPE_ARG_TYPES (TREE_TYPE (fndecl));\n+  unsigned nargs = call_expr_nargs (call);\n+  for (unsigned i = 0; i < nargs; ++i, targs = TREE_CHAIN (targs))\n+    {\n+      /* Variadic args follow.  */\n+      if (!targs)\n+\treturn true;\n+      tree arg = CALL_EXPR_ARG (call, i);\n+      tree type = TREE_VALUE (targs);\n+      if (TYPE_MAIN_VARIANT (type) != TYPE_MAIN_VARIANT (TREE_TYPE (arg)))\n+\t{\n+\t  /* For pointer arguments be more forgiving, e.g. due to\n+\t     FILE * vs. fileptr_type_node, or say char * vs. const char *\n+\t     differences etc.  */\n+\t  if (POINTER_TYPE_P (type)\n+\t      && POINTER_TYPE_P (TREE_TYPE (arg))\n+\t      && tree_nop_conversion_p (type, TREE_TYPE (arg)))\n+\t    continue;\n+\t  /* char/short integral arguments are promoted to int\n+\t     by several frontends if targetm.calls.promote_prototypes\n+\t     is true.  Allow such promotion too.  */\n+\t  if (INTEGRAL_TYPE_P (type)\n+\t      && TYPE_PRECISION (type) < TYPE_PRECISION (integer_type_node)\n+\t      && INTEGRAL_TYPE_P (TREE_TYPE (arg))\n+\t      && !TYPE_UNSIGNED (TREE_TYPE (arg))\n+\t      && targetm.calls.promote_prototypes (TREE_TYPE (fndecl))\n+\t      && tree_nop_conversion_p (integer_type_node,\n+\t\t\t\t\tTREE_TYPE (arg)))\n+\t    continue;\n+\t  return false;\n+\t}\n+    }\n+  if (targs && !VOID_TYPE_P (TREE_VALUE (targs)))\n+    return false;\n+  return true;\n+}\n+\n /* If CALL_EXPR CALL calls a normal built-in function or an internal function,\n    return the associated function code, otherwise return CFN_LAST.  */\n \n@@ -8419,7 +8472,9 @@ get_call_combined_fn (const_tree call)\n     return as_combined_fn (CALL_EXPR_IFN (call));\n \n   tree fndecl = get_callee_fndecl (call);\n-  if (fndecl && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL))\n+  if (fndecl\n+      && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL)\n+      && tree_builtin_call_types_compatible_p (call, fndecl))\n     return as_combined_fn (DECL_FUNCTION_CODE (fndecl));\n \n   return CFN_LAST;"}]}