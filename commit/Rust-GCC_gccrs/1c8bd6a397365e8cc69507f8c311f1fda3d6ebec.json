{"sha": "1c8bd6a397365e8cc69507f8c311f1fda3d6ebec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM4YmQ2YTM5NzM2NWU4Y2M2OTUwN2Y4YzMxMWYxZmRhM2Q2ZWJlYw==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2008-02-20T14:10:40Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2008-02-20T14:10:40Z"}, "message": "re PR bootstrap/32009 (building gcc4-4.3/4.4.0-20070518 failed on OSX 10.3.9)\n\n2008-02-20  Paolo Bonzini  <bonzini@gnu.org>\n\n        PR bootstrap/32009\n        PR bootstrap/32161\n\n        * configure.ac (CFLAGS_FOR_TARGET, CXXFLAGS_FOR_TARGET): Compute here.\n        * configure: Regenerate.\n\n        * Makefile.def: Define stage_libcflags for all bootstrap stages.\n        * Makefile.tpl (STAGE1_LIBCFLAGS, STAGE2_LIBCFLAGS, STAGE3_LIBCFLAGS,\n        STAGE4_LIBCFLAGS): New.\n        (CFLAGS_FOR_TARGET, CXXFLAGS_FOR_TARGET): Subst from autoconf, without\n        $(SYSROOT_CFLAGS_FOR_TARGET) and $(DEBUG_PREFIX_CFLAGS_FOR_TARGET).\n        (BASE_TARGET_EXPORTS): Append them here to C{,XX}FLAGS.\n        (EXTRA_TARGET_FLAGS): Append them here to {LIB,}C{,XX}FLAGS.\n        (configure-stage[+id+]-[+prefix+][+module+]): Pass stage_libcflags\n        for target modules.  Don't export LIBCFLAGS.\n        (all-stage[+id+]-[+prefix+][+module+]): Pass stage_libcflags; pass\n        $(BASE_FLAGS_TO_PASS) where [+args+] was passed, and [+args+] after\n        the overridden CFLAGS_FOR_TARGET and CXXFLAGS_FOR_TARGET.\n        (invocations of `all'): Replace $(TARGET_FLAGS_TO_PASS) with\n        $(EXTRA_TARGET_FLAGS), $(FLAGS_TO_PASS) with $(EXTRA_HOST_FLAGS).\n        * Makefile.in: Regenerate.\n\n2008-02-20  Paolo Bonzini  <bonzini@gnu.org>\n\n        PR bootstrap/32009\n\n        * mh-ppc-darwin (BOOT_CFLAGS): Reenable.\n\t\t\n2008-02-20  Paolo Bonzini  <bonzini@gnu.org>\n\n        * doc/install.texi: Correct references to CFLAGS, replacing them\n        with BOOT_CFLAGS.  Document flags used during bootstrap for\n        target libraries.\n\nFrom-SVN: r132479", "tree": {"sha": "ff6c197dd4b6d512bf3dd43798820a3c00b0059d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff6c197dd4b6d512bf3dd43798820a3c00b0059d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d6023b50b76589447736d8c91cb4bde1a71e732f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6023b50b76589447736d8c91cb4bde1a71e732f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6023b50b76589447736d8c91cb4bde1a71e732f"}], "stats": {"total": 2036, "additions": 1292, "deletions": 744}, "files": [{"sha": "b2233f5c0d5f4d69dbf52a46c7513f46cff9a434", "filename": "ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=1c8bd6a397365e8cc69507f8c311f1fda3d6ebec", "patch": "@@ -1,3 +1,27 @@\n+2008-02-20  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        PR bootstrap/32009\n+        PR bootstrap/32161\n+\n+        * configure.ac (CFLAGS_FOR_TARGET, CXXFLAGS_FOR_TARGET): Compute here.\n+        * configure: Regenerate.\n+\n+        * Makefile.def: Define stage_libcflags for all bootstrap stages.\n+        * Makefile.tpl (BOOT_LIBCFLAGS, STAGE2_LIBCFLAGS, STAGE3_LIBCFLAGS,\n+        STAGE4_LIBCFLAGS): New.\n+        (CFLAGS_FOR_TARGET, CXXFLAGS_FOR_TARGET): Subst from autoconf, without\n+        $(SYSROOT_CFLAGS_FOR_TARGET) and $(DEBUG_PREFIX_CFLAGS_FOR_TARGET).\n+        (BASE_TARGET_EXPORTS): Append them here to C{,XX}FLAGS.\n+        (EXTRA_TARGET_FLAGS): Append them here to {LIB,}C{,XX}FLAGS.\n+        (configure-stage[+id+]-[+prefix+][+module+]): Pass stage_libcflags\n+        for target modules.  Don't export LIBCFLAGS.\n+        (all-stage[+id+]-[+prefix+][+module+]): Pass stage_libcflags; pass\n+        $(BASE_FLAGS_TO_PASS) where [+args+] was passed, and [+args+] after\n+        the overridden CFLAGS_FOR_TARGET and CXXFLAGS_FOR_TARGET.\n+        (invocations of `all'): Replace $(TARGET_FLAGS_TO_PASS) with\n+        $(EXTRA_TARGET_FLAGS), $(FLAGS_TO_PASS) with $(EXTRA_HOST_FLAGS).\n+        * Makefile.in: Regenerate.\n+\n 2008-02-16  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \tPR libgcj/33085"}, {"sha": "a68722598b83a8fcd2e64a2bf4263ee5f423a565", "filename": "Makefile.def", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec/Makefile.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec/Makefile.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.def?ref=1c8bd6a397365e8cc69507f8c311f1fda3d6ebec", "patch": "@@ -511,43 +511,51 @@ bootstrap_stage = {\n \t//   compiler probably has never heard of them.\n \tstage_configure_flags='--disable-intermodule $(STAGE1_CHECKING) \\\n \t  --disable-coverage --enable-languages=\"$(STAGE1_LANGUAGES)\"' ;\n-\tstage_cflags='$(STAGE1_CFLAGS)' ; };\n+\tstage_cflags='$(STAGE1_CFLAGS)' ;\n+\tstage_libcflags='$(STAGE1_LIBCFLAGS)' ; };\n bootstrap_stage = {\n \tid=2 ; prev=1 ;\n \tbootstrap_target=bootstrap2 ;\n \tstage_configure_flags=\"@stage2_werror_flag@\" ;\n-\tstage_cflags=\"$(STAGE2_CFLAGS)\" ; };\n+\tstage_cflags=\"$(STAGE2_CFLAGS)\" ;\n+\tstage_libcflags=\"$(STAGE2_LIBCFLAGS)\" ; };\n bootstrap_stage = {\n \tid=b2g0 ; prev=1 ;\n \tbootstrap_target=bootstrap2-debug ;\n \tstage_configure_flags=\"@stage2_werror_flag@\" ;\n-\tstage_cflags=\"$(STAGE2_CFLAGS) -g0\" ; };\n+\tstage_cflags=\"$(STAGE2_CFLAGS) -g0\" ;\n+\tstage_libcflags=\"$(STAGE2_LIBCFLAGS) -g0\" ; };\n bootstrap_stage = {\n \tid=3 ; prev=2 ; lean=1 ;\n \tcompare_target=compare ;\n \tbootstrap_target=bootstrap ;\n \tcleanstrap_target=cleanstrap ;\n \tstage_configure_flags=\"@stage2_werror_flag@\" ;\n-\tstage_cflags=\"$(STAGE3_CFLAGS)\" ; };\n+\tstage_cflags=\"$(STAGE3_CFLAGS)\" ;\n+\tstage_libcflags=\"$(STAGE3_LIBCFLAGS)\" ; };\n bootstrap_stage = {\n \tid=b3g2 ; prev=b2g0 ; lean=1 ;\n \tcompare_target=compare-debug ;\n \tbootstrap_target=bootstrap-debug ;\n \tcleanstrap_target=cleanstrap-debug ;\n \tstage_configure_flags=\"@stage2_werror_flag@\" ;\n-\tstage_cflags=\"$(STAGE3_CFLAGS) -g2\" ; };\n+\tstage_cflags=\"$(STAGE3_CFLAGS) -g2\" ;\n+\tstage_libcflags=\"$(STAGE3_LIBCFLAGS) -g2\" ; };\n bootstrap_stage = {\n \tid=4 ; prev=3 ; lean=2 ;\n \tcompare_target=compare3 ;\n \tbootstrap_target=bootstrap4 ;\n \tstage_configure_flags=\"@stage2_werror_flag@\" ;\n-\tstage_cflags=\"$(STAGE4_CFLAGS)\" ; };\n+\tstage_cflags=\"$(STAGE4_CFLAGS)\" ;\n+\tstage_libcflags=\"$(STAGE4_CFLAGS)\" ; };\n bootstrap_stage = {\n \tid=profile ; prev=1 ;\n \tstage_configure_flags=\"@stage2_werror_flag@\" ;\n-\tstage_cflags='$(STAGE2_CFLAGS) -fprofile-generate' ; };\n+\tstage_cflags='$(STAGE2_CFLAGS) -fprofile-generate' ;\n+\tstage_libcflags='$(STAGE2_LIBCFLAGS) -fprofile-generate' ; };\n bootstrap_stage = {\n \tid=feedback ; prev=profile ;\n \tbootstrap_target=profiledbootstrap ;\n \tstage_configure_flags=\"@stage2_werror_flag@\" ;\n-\tstage_cflags='$(STAGE3_CFLAGS) -fprofile-use' ; };\n+\tstage_cflags='$(STAGE3_CFLAGS) -fprofile-use' ;\n+\tstage_libcflags='$(STAGE3_LIBCFLAGS) -fprofile-use' ; };"}, {"sha": "981ce54af7f5787c786e921df926649ffdda8ee2", "filename": "Makefile.in", "status": "modified", "additions": 1117, "deletions": 684, "changes": 1801, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=1c8bd6a397365e8cc69507f8c311f1fda3d6ebec"}, {"sha": "6bc461bfddaa7acd4115ebf4ae167c809c6da5a4", "filename": "Makefile.tpl", "status": "modified", "additions": 31, "deletions": 26, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=1c8bd6a397365e8cc69507f8c311f1fda3d6ebec", "patch": "@@ -207,10 +207,10 @@ BASE_TARGET_EXPORTS = \\\n \tAR=\"$(AR_FOR_TARGET)\"; export AR; \\\n \tAS=\"$(COMPILER_AS_FOR_TARGET)\"; export AS; \\\n \tCC=\"$(CC_FOR_TARGET)\"; export CC; \\\n-\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n+\tCFLAGS=\"$(CFLAGS_FOR_TARGET) $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n \tCONFIG_SHELL=\"$(SHELL)\"; export CONFIG_SHELL; \\\n \tCPPFLAGS=\"$(CPPFLAGS_FOR_TARGET)\"; export CPPFLAGS; \\\n-\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n+\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET) $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n \tGCJ=\"$(GCJ_FOR_TARGET)\"; export GCJ; \\\n \tGFORTRAN=\"$(GFORTRAN_FOR_TARGET)\"; export GFORTRAN; \\\n \tDLLTOOL=\"$(DLLTOOL_FOR_TARGET)\"; export DLLTOOL; \\\n@@ -330,14 +330,19 @@ PICFLAG =\n # MAKEINFO and MAKEINFOFLAGS are explicitly passed here to make them\n # overrideable (for a bootstrap build stage1 also builds gcc.info).\n \n-STAGE1_CFLAGS=@stage1_cflags@\n STAGE1_CHECKING=@stage1_checking@\n STAGE1_LANGUAGES=@stage1_languages@\n \n+STAGE1_CFLAGS=@stage1_cflags@\n STAGE2_CFLAGS=$(BOOT_CFLAGS)\n STAGE3_CFLAGS=$(BOOT_CFLAGS)\n STAGE4_CFLAGS=$(BOOT_CFLAGS)\n \n+STAGE1_LIBCFLAGS=$(CFLAGS_FOR_TARGET)\n+STAGE2_LIBCFLAGS=$(CFLAGS_FOR_TARGET)\n+STAGE3_LIBCFLAGS=$(CFLAGS_FOR_TARGET)\n+STAGE4_LIBCFLAGS=$(CFLAGS_FOR_TARGET)\n+\n do-compare = @do_compare@\n do-compare3 = $(do-compare)\n do-compare-debug = $(SHELL) $(srcdir)/contrib/compare-debug $$f1 $$f2\n@@ -376,18 +381,11 @@ COMPILER_AS_FOR_TARGET=@COMPILER_AS_FOR_TARGET@\n COMPILER_LD_FOR_TARGET=@COMPILER_LD_FOR_TARGET@\n COMPILER_NM_FOR_TARGET=@COMPILER_NM_FOR_TARGET@\n \n-# During gcc bootstrap, if we use some random cc for stage1 then CFLAGS\n-# might be empty or \"-g\".  We don't require a C++ compiler, so CXXFLAGS\n-# might also be empty (or \"-g\", if a non-GCC C++ compiler is in the path).\n-# We want to ensure that TARGET libraries (which we know are built with\n-# gcc) are built with \"-O2 -g\", so prepend those options when setting\n-# CFLAGS_FOR_TARGET and CXXFLAGS_FOR_TARGET.\n-CFLAGS_FOR_TARGET = -O2 -g $(CFLAGS) $(SYSROOT_CFLAGS_FOR_TARGET) \\\n-\t$(DEBUG_PREFIX_CFLAGS_FOR_TARGET)\n+CFLAGS_FOR_TARGET = @CFLAGS_FOR_TARGET@\n+CXXFLAGS_FOR_TARGET = @CXXFLAGS_FOR_TARGET@\n SYSROOT_CFLAGS_FOR_TARGET = @SYSROOT_CFLAGS_FOR_TARGET@\n DEBUG_PREFIX_CFLAGS_FOR_TARGET = @DEBUG_PREFIX_CFLAGS_FOR_TARGET@\n-CXXFLAGS_FOR_TARGET = -O2 -g $(CXXFLAGS) $(SYSROOT_CFLAGS_FOR_TARGET) \\\n-\t$(DEBUG_PREFIX_CFLAGS_FOR_TARGET)\n+\n LIBCFLAGS_FOR_TARGET = $(CFLAGS_FOR_TARGET)\n LIBCXXFLAGS_FOR_TARGET = $(CXXFLAGS_FOR_TARGET) -fno-implicit-templates\n LDFLAGS_FOR_TARGET = \n@@ -491,19 +489,20 @@ POSTSTAGE1_FLAGS_TO_PASS = \\\n # Flags to pass down to makes which are built with the target environment.\n # The double $ decreases the length of the command line; those variables\n # are set in BASE_FLAGS_TO_PASS, and the sub-make will expand them.  The\n-# COMPILER_ prefixed variables are not passed down so we expand them here.\n+# *_CFLAGS_FOR_TARGET variables are not passed down and most often empty,\n+# so we expand them here.\n EXTRA_TARGET_FLAGS = \\\n \t'AR=$$(AR_FOR_TARGET)' \\\n \t'AS=$(COMPILER_AS_FOR_TARGET)' \\\n \t'CC=$$(CC_FOR_TARGET)' \\\n-\t'CFLAGS=$$(CFLAGS_FOR_TARGET)' \\\n+\t'CFLAGS=$$(CFLAGS_FOR_TARGET) $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)' \\\n \t'CXX=$$(CXX_FOR_TARGET)' \\\n-\t'CXXFLAGS=$$(CXXFLAGS_FOR_TARGET)' \\\n+\t'CXXFLAGS=$$(CXXFLAGS_FOR_TARGET) $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)' \\\n \t'DLLTOOL=$$(DLLTOOL_FOR_TARGET)' \\\n \t'LD=$(COMPILER_LD_FOR_TARGET)' \\\n \t'LDFLAGS=$$(LDFLAGS_FOR_TARGET)' \\\n-\t'LIBCFLAGS=$$(LIBCFLAGS_FOR_TARGET)' \\\n-\t'LIBCXXFLAGS=$$(LIBCXXFLAGS_FOR_TARGET)' \\\n+\t'LIBCFLAGS=$$(LIBCFLAGS_FOR_TARGET) $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)' \\\n+\t'LIBCXXFLAGS=$$(LIBCXXFLAGS_FOR_TARGET) $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)' \\\n \t'NM=$(COMPILER_NM_FOR_TARGET)' \\\n \t'OBJDUMP=$$(OBJDUMP_FOR_TARGET)' \\\n \t'RANLIB=$$(RANLIB_FOR_TARGET)' \\\n@@ -851,9 +850,11 @@ configure-stage[+id+]-[+prefix+][+module+]:\n \tfi; \\\n \t[+ ENDIF check_multilibs +]test ! -f [+subdir+]/[+module+]/Makefile || exit 0; \\\n \t[+exports+][+ IF prev +] \\\n-\t[+poststage1_exports+][+ ENDIF prev +] \\\n+\t[+poststage1_exports+][+ ENDIF prev +] [+ IF prefix +] \\\n+\tCFLAGS=\"[+stage_libcflags+] $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"[+stage_libcflags+] $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)\"; export CXXFLAGS; [+ ELSE +] \\\n \tCFLAGS=\"[+stage_cflags+]\"; export CFLAGS; \\\n-\tLIBCFLAGS=\"[+stage_cflags+]\"; export LIBCFLAGS; \\\n+\tCXXFLAGS=\"[+stage_cflags+]\"; export CXXFLAGS; [+ ENDIF +] \\\n \techo Configuring stage [+id+] in [+subdir+]/[+module+] ; \\\n \t$(SHELL) $(srcdir)/mkinstalldirs [+subdir+]/[+module+] ; \\\n \tcd [+subdir+]/[+module+] || exit 1; \\\n@@ -890,7 +891,8 @@ all-[+prefix+][+module+]: configure-[+prefix+][+module+][+ IF bootstrap +][+ ELS\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t[+exports+] \\\n \t(cd [+subdir+]/[+module+] && \\\n-\t  $(MAKE) [+args+] [+extra_make_flags+] $(TARGET-[+prefix+][+module+]))\n+\t  $(MAKE) $(BASE_FLAGS_TO_PASS) [+args+] [+extra_make_flags+] \\\n+\t\t$(TARGET-[+prefix+][+module+]))\n @endif [+prefix+][+module+]\n \n [+ IF bootstrap +]\n@@ -910,8 +912,11 @@ all-stage[+id+]-[+prefix+][+module+]: configure-stage[+id+]-[+prefix+][+module+]\n \t[+exports+][+ IF prev +] \\\n \t[+poststage1_exports+][+ ENDIF prev +] \\\n \tcd [+subdir+]/[+module+] && \\\n-\t$(MAKE) [+args+] \\\n-\t\tCFLAGS=\"[+stage_cflags+]\" LIBCFLAGS=\"[+stage_cflags+]\" [+\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"[+stage_cflags+]\" CXXFLAGS=\"[+stage_cflags+]\" \\\n+\t\tLIBCFLAGS=\"[+stage_libcflags+]\" \\\n+\t\tCFLAGS_FOR_TARGET=\"[+stage_libcflags+]\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"[+stage_libcflags+]\" [+args+] [+\n \t\tIF prev +][+poststage1_args+][+ ENDIF prev\n \t\t+] [+extra_make_flags+] \\\n \t\t$(TARGET-stage[+id+]-[+prefix+][+module+])\n@@ -961,7 +966,7 @@ clean-stage[+id+]-[+prefix+][+module+]:\n [+ all prefix=\"\" subdir=\"$(HOST_SUBDIR)\"\n        exports=\"$(HOST_EXPORTS)\"\n        poststage1_exports=\"$(POSTSTAGE1_HOST_EXPORTS)\"\n-       args=\"$(FLAGS_TO_PASS)\"\n+       args=\"$(EXTRA_HOST_FLAGS)\"\n        poststage1_args=\"$(POSTSTAGE1_FLAGS_TO_PASS)\" +]\n \n .PHONY: check-[+module+] maybe-check-[+module+]\n@@ -1059,7 +1064,7 @@ maybe-[+make_target+]-[+module+]: [+make_target+]-[+module+]\n \n [+ all prefix=\"target-\" subdir=\"$(TARGET_SUBDIR)\"\n        exports=\"$(RAW_CXX_TARGET_EXPORTS)\"\n-       args=\"$(TARGET_FLAGS_TO_PASS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'\" +]\n+       args=\"$(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'\" +]\n [+ ELSE +]\n [+ configure prefix=\"target-\" subdir=\"$(TARGET_SUBDIR)\"\n \t     check_multilibs=true\n@@ -1070,7 +1075,7 @@ maybe-[+make_target+]-[+module+]: [+make_target+]-[+module+]\n \n [+ all prefix=\"target-\" subdir=\"$(TARGET_SUBDIR)\"\n        exports=\"$(NORMAL_TARGET_EXPORTS)\"\n-       args=\"$(TARGET_FLAGS_TO_PASS)\" +]\n+       args=\"$(EXTRA_TARGET_FLAGS)\" +]\n [+ ENDIF +]\n \n .PHONY: check-target-[+module+] maybe-check-target-[+module+]"}, {"sha": "d6cc1b5073f22552d1ff4a69290a630c3a7f65ab", "filename": "config/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=1c8bd6a397365e8cc69507f8c311f1fda3d6ebec", "patch": "@@ -1,3 +1,8 @@\n+2008-02-20  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        PR bootstrap/32009\n+        * mh-ppc-darwin (BOOT_CFLAGS): Reenable.\n+\t\t\n 2008-01-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* futex.m4: New file."}, {"sha": "ad43bca6c0ac9fb8846081348b20977dd3c4473b", "filename": "config/mh-ppc-darwin", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec/config%2Fmh-ppc-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec/config%2Fmh-ppc-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-ppc-darwin?ref=1c8bd6a397365e8cc69507f8c311f1fda3d6ebec", "patch": "@@ -2,5 +2,4 @@\n # position-independent-code -- the usual default on Darwin. This fix speeds\n # compiles by 3-5%.\n \n-# Broken because of PR32009.\n-# BOOT_CFLAGS=-g -O2 -mdynamic-no-pic\n+BOOT_CFLAGS=-g -O2 -mdynamic-no-pic"}, {"sha": "1131e5abb6004aab476679cb1bdb0ccc1c9717a7", "filename": "configure", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=1c8bd6a397365e8cc69507f8c311f1fda3d6ebec", "patch": "@@ -272,7 +272,7 @@ PACKAGE_STRING=\n PACKAGE_BUGREPORT=\n \n ac_unique_file=\"move-if-change\"\n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os build_noncanonical host_noncanonical target_noncanonical host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA LN LN_S TOPLEVEL_CONFIGURE_ARGUMENTS build_libsubdir build_subdir host_subdir target_subdir CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT CXX CXXFLAGS ac_ct_CXX GNATBIND ac_ct_GNATBIND GNATMAKE ac_ct_GNATMAKE do_compare gmplibs gmpinc stage1_languages SYSROOT_CFLAGS_FOR_TARGET DEBUG_PREFIX_CFLAGS_FOR_TARGET RPATH_ENVVAR tooldir build_tooldir CONFIGURE_GDB_TK GDB_TK INSTALL_GDB_TK build_configargs build_configdirs host_configargs configdirs target_configargs AR_FOR_BUILD AS_FOR_BUILD CC_FOR_BUILD CFLAGS_FOR_BUILD CXXFLAGS_FOR_BUILD CXX_FOR_BUILD DLLTOOL_FOR_BUILD GCJ_FOR_BUILD GFORTRAN_FOR_BUILD LDFLAGS_FOR_BUILD LD_FOR_BUILD NM_FOR_BUILD RANLIB_FOR_BUILD WINDMC_FOR_BUILD WINDRES_FOR_BUILD config_shell YACC BISON M4 LEX FLEX MAKEINFO EXPECT RUNTEST AR AS DLLTOOL LD LIPO NM RANLIB STRIP WINDRES WINDMC OBJCOPY OBJDUMP CC_FOR_TARGET CXX_FOR_TARGET GCC_FOR_TARGET GCJ_FOR_TARGET GFORTRAN_FOR_TARGET AR_FOR_TARGET AS_FOR_TARGET DLLTOOL_FOR_TARGET LD_FOR_TARGET LIPO_FOR_TARGET NM_FOR_TARGET OBJDUMP_FOR_TARGET RANLIB_FOR_TARGET STRIP_FOR_TARGET WINDRES_FOR_TARGET WINDMC_FOR_TARGET RAW_CXX_FOR_TARGET FLAGS_FOR_TARGET COMPILER_AS_FOR_TARGET COMPILER_LD_FOR_TARGET COMPILER_NM_FOR_TARGET MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT stage1_cflags stage1_checking stage2_werror_flag datarootdir docdir pdfdir htmldir LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os build_noncanonical host_noncanonical target_noncanonical host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA LN LN_S TOPLEVEL_CONFIGURE_ARGUMENTS build_libsubdir build_subdir host_subdir target_subdir CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT CXX CXXFLAGS ac_ct_CXX GNATBIND ac_ct_GNATBIND GNATMAKE ac_ct_GNATMAKE do_compare gmplibs gmpinc stage1_languages SYSROOT_CFLAGS_FOR_TARGET DEBUG_PREFIX_CFLAGS_FOR_TARGET CFLAGS_FOR_TARGET CXXFLAGS_FOR_TARGET RPATH_ENVVAR tooldir build_tooldir CONFIGURE_GDB_TK GDB_TK INSTALL_GDB_TK build_configargs build_configdirs host_configargs configdirs target_configargs AR_FOR_BUILD AS_FOR_BUILD CC_FOR_BUILD CFLAGS_FOR_BUILD CXXFLAGS_FOR_BUILD CXX_FOR_BUILD DLLTOOL_FOR_BUILD GCJ_FOR_BUILD GFORTRAN_FOR_BUILD LDFLAGS_FOR_BUILD LD_FOR_BUILD NM_FOR_BUILD RANLIB_FOR_BUILD WINDMC_FOR_BUILD WINDRES_FOR_BUILD config_shell YACC BISON M4 LEX FLEX MAKEINFO EXPECT RUNTEST AR AS DLLTOOL LD LIPO NM RANLIB STRIP WINDRES WINDMC OBJCOPY OBJDUMP CC_FOR_TARGET CXX_FOR_TARGET GCC_FOR_TARGET GCJ_FOR_TARGET GFORTRAN_FOR_TARGET AR_FOR_TARGET AS_FOR_TARGET DLLTOOL_FOR_TARGET LD_FOR_TARGET LIPO_FOR_TARGET NM_FOR_TARGET OBJDUMP_FOR_TARGET RANLIB_FOR_TARGET STRIP_FOR_TARGET WINDRES_FOR_TARGET WINDMC_FOR_TARGET RAW_CXX_FOR_TARGET FLAGS_FOR_TARGET COMPILER_AS_FOR_TARGET COMPILER_LD_FOR_TARGET COMPILER_NM_FOR_TARGET MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT stage1_cflags stage1_checking stage2_werror_flag datarootdir docdir pdfdir htmldir LIBOBJS LTLIBOBJS'\n ac_subst_files='serialization_dependencies host_makefile_frag target_makefile_frag alphaieee_frag ospace_frag'\n \n # Initialize some variables set by options.\n@@ -5147,6 +5147,38 @@ else\n fi;\n \n \n+# During gcc bootstrap, if we use some random cc for stage1 then CFLAGS\n+# might be empty or \"-g\".  We don't require a C++ compiler, so CXXFLAGS\n+# might also be empty (or \"-g\", if a non-GCC C++ compiler is in the path).\n+# We want to ensure that TARGET libraries (which we know are built with\n+# gcc) are built with \"-O2 -g\", so include those options when setting\n+# CFLAGS_FOR_TARGET and CXXFLAGS_FOR_TARGET.\n+if test \"x$CFLAGS_FOR_TARGET\" = x; then\n+  CFLAGS_FOR_TARGET=$CFLAGS\n+  case \" $CFLAGS \" in\n+    *\" -O2 \"*) ;;\n+    *) CFLAGS_FOR_TARGET=\"-O2 $CFLAGS\" ;;\n+  esac\n+  case \" $CFLAGS \" in\n+    *\" -g \"* | *\" -g3 \"*) ;;\n+    *) CFLAGS_FOR_TARGET=\"-g $CFLAGS\" ;;\n+  esac\n+fi\n+\n+\n+if test \"x$CXXFLAGS_FOR_TARGET\" = x; then\n+  CXXFLAGS_FOR_TARGET=$CXXFLAGS\n+  case \" $CXXFLAGS \" in\n+    *\" -O2 \"*) ;;\n+    *) CXXFLAGS_FOR_TARGET=\"-O2 $CXXFLAGS\" ;;\n+  esac\n+  case \" $CXXFLAGS \" in\n+    *\" -g \"* | *\" -g3 \"*) ;;\n+    *) CXXFLAGS_FOR_TARGET=\"-g $CXXFLAGS\" ;;\n+  esac\n+fi\n+\n+\n # Handle --with-headers=XXX.  If the value is not \"yes\", the contents of\n # the named directory are copied to $(tooldir)/sys-include.\n if test x\"${with_headers}\" != x && test x\"${with_headers}\" != xno ; then\n@@ -12825,6 +12857,8 @@ s,@gmpinc@,$gmpinc,;t t\n s,@stage1_languages@,$stage1_languages,;t t\n s,@SYSROOT_CFLAGS_FOR_TARGET@,$SYSROOT_CFLAGS_FOR_TARGET,;t t\n s,@DEBUG_PREFIX_CFLAGS_FOR_TARGET@,$DEBUG_PREFIX_CFLAGS_FOR_TARGET,;t t\n+s,@CFLAGS_FOR_TARGET@,$CFLAGS_FOR_TARGET,;t t\n+s,@CXXFLAGS_FOR_TARGET@,$CXXFLAGS_FOR_TARGET,;t t\n s,@RPATH_ENVVAR@,$RPATH_ENVVAR,;t t\n s,@tooldir@,$tooldir,;t t\n s,@build_tooldir@,$build_tooldir,;t t"}, {"sha": "e81fcdbfe9ade2c11c01b925c5ae9911b1a00af5", "filename": "configure.ac", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=1c8bd6a397365e8cc69507f8c311f1fda3d6ebec", "patch": "@@ -1667,6 +1667,38 @@ AC_ARG_WITH([debug-prefix-map],\n   [DEBUG_PREFIX_CFLAGS_FOR_TARGET=])\n AC_SUBST(DEBUG_PREFIX_CFLAGS_FOR_TARGET)\n \n+# During gcc bootstrap, if we use some random cc for stage1 then CFLAGS\n+# might be empty or \"-g\".  We don't require a C++ compiler, so CXXFLAGS\n+# might also be empty (or \"-g\", if a non-GCC C++ compiler is in the path).\n+# We want to ensure that TARGET libraries (which we know are built with\n+# gcc) are built with \"-O2 -g\", so include those options when setting\n+# CFLAGS_FOR_TARGET and CXXFLAGS_FOR_TARGET.\n+if test \"x$CFLAGS_FOR_TARGET\" = x; then\n+  CFLAGS_FOR_TARGET=$CFLAGS\n+  case \" $CFLAGS \" in\n+    *\" -O2 \"*) ;;\n+    *) CFLAGS_FOR_TARGET=\"-O2 $CFLAGS\" ;;\n+  esac\n+  case \" $CFLAGS \" in\n+    *\" -g \"* | *\" -g3 \"*) ;;\n+    *) CFLAGS_FOR_TARGET=\"-g $CFLAGS\" ;;\n+  esac\n+fi\n+AC_SUBST(CFLAGS_FOR_TARGET)\n+\n+if test \"x$CXXFLAGS_FOR_TARGET\" = x; then\n+  CXXFLAGS_FOR_TARGET=$CXXFLAGS\n+  case \" $CXXFLAGS \" in\n+    *\" -O2 \"*) ;;\n+    *) CXXFLAGS_FOR_TARGET=\"-O2 $CXXFLAGS\" ;;\n+  esac\n+  case \" $CXXFLAGS \" in\n+    *\" -g \"* | *\" -g3 \"*) ;;\n+    *) CXXFLAGS_FOR_TARGET=\"-g $CXXFLAGS\" ;;\n+  esac\n+fi\n+AC_SUBST(CXXFLAGS_FOR_TARGET)\n+\n # Handle --with-headers=XXX.  If the value is not \"yes\", the contents of\n # the named directory are copied to $(tooldir)/sys-include.\n if test x\"${with_headers}\" != x && test x\"${with_headers}\" != xno ; then"}, {"sha": "50456696bcb848168c812dbb56e3b81efdd7f299", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c8bd6a397365e8cc69507f8c311f1fda3d6ebec", "patch": "@@ -1,3 +1,9 @@\n+2008-02-20  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        * doc/install.texi: Correct references to CFLAGS, replacing them\n+        with BOOT_CFLAGS.  Document flags used during bootstrap for\n+        target libraries.\n+\t\t\t\t\n 2008-02-20  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.h (SSE_VEC_FLOAT_MODE_P): New define."}, {"sha": "9569f9b21576e9f4f8eef3a5b1697206f50f6b72", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=1c8bd6a397365e8cc69507f8c311f1fda3d6ebec", "patch": "@@ -1762,33 +1762,35 @@ same described above, but object files from the stage1 and\n stage2 of the 3-stage bootstrap of the compiler are deleted as\n soon as they are no longer needed.\n \n-If you want to save additional space during the bootstrap and in\n-the final installation as well, you can build the compiler binaries\n-without debugging information as in the following example.  This will save\n-roughly 40% of disk space both for the bootstrap and the final installation.\n-(Libraries will still contain debugging information.)\n+If you wish to use non-default GCC flags when compiling the stage2\n+and stage3 compilers, set @code{BOOT_CFLAGS} on the command line when\n+doing @samp{make}.  For example, if you want to save additional space\n+during the bootstrap and in the final installation as well, you can\n+build the compiler binaries without debugging information as in the\n+following example.  This will save roughly 40% of disk space both for\n+the bootstrap and the final installation.  (Libraries will still contain\n+debugging information.)\n \n @smallexample\n-     make CFLAGS='-O' LIBCFLAGS='-g -O2' \\\n-       LIBCXXFLAGS='-g -O2 -fno-implicit-templates' bootstrap\n+     make BOOT_CFLAGS='-O' bootstrap\n @end smallexample\n \n-If you wish to use non-default GCC flags when compiling the stage2 and\n-stage3 compilers, set @code{BOOT_CFLAGS} on the command line when doing\n-@samp{make}.  Non-default optimization flags are less well\n-tested here than the default of @samp{-g -O2}, but should still work.\n-In a few cases, you may find that you need to specify special flags such\n-as @option{-msoft-float} here to complete the bootstrap; or, if the\n-native compiler miscompiles the stage1 compiler, you may need to work\n-around this, by choosing @code{BOOT_CFLAGS} to avoid the parts of the\n-stage1 compiler that were miscompiled, or by using @samp{make\n+You can place non-default optimization flags into @code{BOOT_CFLAGS}; they\n+are less well tested here than the default of @samp{-g -O2}, but should\n+still work.  In a few cases, you may find that you need to specify special\n+flags such as @option{-msoft-float} here to complete the bootstrap; or,\n+if the native compiler miscompiles the stage1 compiler, you may need\n+to work around this, by choosing @code{BOOT_CFLAGS} to avoid the parts\n+of the stage1 compiler that were miscompiled, or by using @samp{make\n bootstrap4} to increase the number of stages of bootstrap.\n \n-Note that using non-standard @code{CFLAGS} can cause bootstrap to fail\n-if these trigger a warning with the new compiler.  For example using\n-@samp{-O2 -g -mcpu=i686} on @code{i686-pc-linux-gnu} will cause bootstrap\n-failure as @option{-mcpu=} is deprecated in 3.4.0 and above.\n-\n+@code{BOOT_CFLAGS} does not apply to bootstrapped target libraries.\n+Since these are always compiled with the compiler currently being\n+bootstrapped, you can use @code{CFLAGS_FOR_TARGET} to modify their\n+compilation flags, as for non-bootstrapped target libraries.\n+Again, if the native compiler miscompiles the stage1 compiler, you may\n+need to work around this by avoiding non-working parts of the stage1\n+compiler.  Use @code{STAGE1_LIBCFLAGS} to this end.\n \n If you used the flag @option{--enable-languages=@dots{}} to restrict\n the compilers to be built, only those you've actually enabled will be\n@@ -2679,8 +2681,8 @@ cross-compilers on the Alpha for 32-bit machines has only been tested in\n a few cases and may not work properly.\n \n @samp{make compare} may fail on old versions of DEC Unix unless you add\n-@option{-save-temps} to @code{CFLAGS}.  On these systems, the name of the\n-assembler input file is stored in the object file, and that makes\n+@option{-save-temps} to @code{BOOT_CFLAGS}.  On these systems, the name\n+of the assembler input file is stored in the object file, and that makes\n comparison fail if it differs between the @code{stage1} and\n @code{stage2} compilations.  The option @option{-save-temps} forces a\n fixed name to be used for the assembler input file, instead of a"}]}