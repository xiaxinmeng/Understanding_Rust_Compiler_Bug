{"sha": "962584ea56fd1919d5f16782663e524af6885a74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYyNTg0ZWE1NmZkMTkxOWQ1ZjE2NzgyNjYzZTUyNGFmNjg4NWE3NA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-04-29T11:24:37Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-04-29T11:24:37Z"}, "message": "jcf-io.c (read_zip_member): Cast to long in comparison with signed value.\n\n\t* jcf-io.c (read_zip_member): Cast to long in comparison with\n\tsigned value.\n\n\t* jvspec.c (lang_specific_driver): Initialize variables.\n\n\t* mangle.c (find_compression_record_match): Likewise.\n\n\t* typeck.c (build_null_signature): Provide static prototype.  Mark\n\tparameter with ATTRIBUTE_UNUSED.\n\n\t* verify.c (verify_jvm_instructions): Initialize variable.\n\nFrom-SVN: r41671", "tree": {"sha": "fad43c4cf163205e8ae258a3f5f5ccc0f9af3e54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fad43c4cf163205e8ae258a3f5f5ccc0f9af3e54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/962584ea56fd1919d5f16782663e524af6885a74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962584ea56fd1919d5f16782663e524af6885a74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/962584ea56fd1919d5f16782663e524af6885a74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962584ea56fd1919d5f16782663e524af6885a74/comments", "author": null, "committer": null, "parents": [{"sha": "31e54bc5f4228c569b389e8130fd9948596dfcbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31e54bc5f4228c569b389e8130fd9948596dfcbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31e54bc5f4228c569b389e8130fd9948596dfcbf"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "163f988edd69111acae1c7b969c1d8d1250dfa27", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962584ea56fd1919d5f16782663e524af6885a74/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962584ea56fd1919d5f16782663e524af6885a74/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=962584ea56fd1919d5f16782663e524af6885a74", "patch": "@@ -1,3 +1,17 @@\n+2001-04-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* jcf-io.c (read_zip_member): Cast to long in comparison with\n+\tsigned value.\n+\n+\t* jvspec.c (lang_specific_driver): Initialize variables.\n+\n+\t* mangle.c (find_compression_record_match): Likewise.\n+\n+\t* typeck.c (build_null_signature): Provide static prototype.  Mark\n+\tparameter with ATTRIBUTE_UNUSED.\n+\n+\t* verify.c (verify_jvm_instructions): Initialize variable.\n+\n 2001-04-27  Per Bothner  <per@bothner.com>\n \n \t* parse.y (java_expand_classes):  Don't change ctxp_for_generation"}, {"sha": "f254438050667dd527c651c6f5b26a6d243efb0a", "filename": "gcc/java/jcf-io.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962584ea56fd1919d5f16782663e524af6885a74/gcc%2Fjava%2Fjcf-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962584ea56fd1919d5f16782663e524af6885a74/gcc%2Fjava%2Fjcf-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-io.c?ref=962584ea56fd1919d5f16782663e524af6885a74", "patch": "@@ -192,7 +192,7 @@ DEFUN(read_zip_member, (jcf, zipd, zipf),\n \t      jcf->read_ptr = jcf->buffer;\n \t      jcf->read_end = jcf->buffer_end;\n \t      if (lseek (zipf->fd, zipd->filestart, 0) < 0\n-\t\t  || read (zipf->fd, jcf->buffer, zipd->size) != zipd->size)\n+\t\t  || read (zipf->fd, jcf->buffer, zipd->size) != (long) zipd->size)\n \t        return -2;\n \t    }\n \t  else\n@@ -213,7 +213,7 @@ DEFUN(read_zip_member, (jcf, zipd, zipf),\n \t      d_stream.next_in = buffer;\n \t      d_stream.avail_in = zipd->size;\n \t      if (lseek (zipf->fd, zipd->filestart, 0) < 0\n-\t\t  || read (zipf->fd, buffer, zipd->size) != zipd->size)\n+\t\t  || read (zipf->fd, buffer, zipd->size) != (long) zipd->size)\n \t\treturn -2;\n \t      /* Handle NO_HEADER using undocumented zlib feature.\n                  This is a very common hack.  */"}, {"sha": "c02071ff3084590c163eadcdc77716c22ccfbc0d", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962584ea56fd1919d5f16782663e524af6885a74/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962584ea56fd1919d5f16782663e524af6885a74/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=962584ea56fd1919d5f16782663e524af6885a74", "patch": "@@ -126,9 +126,9 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n   int indirect_files_count = 0;\n \n   /* Name of file containing list of files to compile. */\n-  char *filelist_filename;\n+  char *filelist_filename = 0;\n \n-  FILE *filelist_file;\n+  FILE *filelist_file = 0;\n \n   /* The number of arguments being added to what's in argv, other than\n      libraries.  */"}, {"sha": "027eb5d5babc5bbc45a814c5849e600ce517a730", "filename": "gcc/java/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962584ea56fd1919d5f16782663e524af6885a74/gcc%2Fjava%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962584ea56fd1919d5f16782663e524af6885a74/gcc%2Fjava%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fmangle.c?ref=962584ea56fd1919d5f16782663e524af6885a74", "patch": "@@ -314,7 +314,7 @@ find_compression_record_match (type, next_current)\n      tree *next_current;\n {\n   int i, match;\n-  tree current, saved_current;\n+  tree current, saved_current = NULL_TREE;\n \n   /* Search from the beginning for something that matches TYPE, even\n      partially. */"}, {"sha": "b61a290c7ed756a71f752e92fc262cfd4c3dbf91", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962584ea56fd1919d5f16782663e524af6885a74/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962584ea56fd1919d5f16782663e524af6885a74/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=962584ea56fd1919d5f16782663e524af6885a74", "patch": "@@ -40,6 +40,7 @@ static tree convert_ieee_real_to_integer PARAMS ((tree, tree));\n static tree parse_signature_type PARAMS ((const unsigned char **,\n \t\t\t\t\t const unsigned char *));\n static tree lookup_do PARAMS ((tree, tree, tree, tree, tree (*)(tree)));\n+static tree build_null_signature PARAMS ((tree));\n \n tree * type_map;\n extern struct obstack permanent_obstack;\n@@ -579,9 +580,9 @@ get_type_from_signature (tree signature)\n   return type;\n }\n \n-tree\n+static tree\n build_null_signature (type)\n-     tree type;\n+     tree type ATTRIBUTE_UNUSED;\n {\n   return NULL_TREE;\n }"}, {"sha": "941484350c1daf591dd24484f4e744edb899e8b6", "filename": "gcc/java/verify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962584ea56fd1919d5f16782663e524af6885a74/gcc%2Fjava%2Fverify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962584ea56fd1919d5f16782663e524af6885a74/gcc%2Fjava%2Fverify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify.c?ref=962584ea56fd1919d5f16782663e524af6885a74", "patch": "@@ -411,7 +411,7 @@ verify_jvm_instructions (jcf, byte_ops, length)\n   int PC;\n   int oldpc = 0; /* PC of start of instruction. */\n   int prevpc = 0;  /* If >= 0, PC of previous instruction. */\n-  const char *message;\n+  const char *message = 0;\n   char *pmessage;\n   int i;\n   int index;"}]}