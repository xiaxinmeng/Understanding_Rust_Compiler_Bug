{"sha": "0498471be6e90c14f3fdf42789117bae39868f2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ5ODQ3MWJlNmU5MGMxNGYzZmRmNDI3ODkxMTdiYWUzOTg2OGYyYg==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2013-09-24T15:57:00Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2013-09-24T15:57:00Z"}, "message": "gimple-pretty-print.c: Various whitespace tweaks.\n\n2013-09-24  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gimple-pretty-print.c: Various whitespace tweaks.\n\t* tree-core.h: Likewise.\n\t* tree-pretty-print.c: Likewise.\n\t* tree-ssa-alias.c: Likewise.\n\t* tree-ssa-copy.c: Likewise.\n\t* tree-ssanames.c: Likewise.\n\t* tree-ssanames.h: Likewise.\n\t* tree-vrp.c: Likewise.\n\nFrom-SVN: r202869", "tree": {"sha": "561848f23b0bceeb7edb8e9b5b7a5d8bcb965f2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/561848f23b0bceeb7edb8e9b5b7a5d8bcb965f2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0498471be6e90c14f3fdf42789117bae39868f2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0498471be6e90c14f3fdf42789117bae39868f2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0498471be6e90c14f3fdf42789117bae39868f2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0498471be6e90c14f3fdf42789117bae39868f2b/comments", "author": null, "committer": null, "parents": [{"sha": "5a8c2b571c68cea56cab84c90bf407363c8a3587", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a8c2b571c68cea56cab84c90bf407363c8a3587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a8c2b571c68cea56cab84c90bf407363c8a3587"}], "stats": {"total": 169, "additions": 90, "deletions": 79}, "files": [{"sha": "47c31a07eb563fdc36951202d22dd42889927f25", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0498471be6e90c14f3fdf42789117bae39868f2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0498471be6e90c14f3fdf42789117bae39868f2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0498471be6e90c14f3fdf42789117bae39868f2b", "patch": "@@ -1,3 +1,14 @@\n+2013-09-24  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gimple-pretty-print.c: Various whitespace tweaks.\n+\t* tree-core.h: Likewise.\n+\t* tree-pretty-print.c: Likewise.\n+\t* tree-ssa-alias.c: Likewise.\n+\t* tree-ssa-copy.c: Likewise.\n+\t* tree-ssanames.c: Likewise.\n+\t* tree-ssanames.h: Likewise.\n+\t* tree-vrp.c: Likewise.\n+\n 2013-09-24  Alan Modra  <amodra@gmail.com>\n \n \tPR middle-end/57134"}, {"sha": "1599c804e7a2666490e6071ef253b08b7d58c2f8", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0498471be6e90c14f3fdf42789117bae39868f2b/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0498471be6e90c14f3fdf42789117bae39868f2b/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=0498471be6e90c14f3fdf42789117bae39868f2b", "patch": "@@ -1632,17 +1632,17 @@ dump_ssaname_info (pretty_printer *buffer, tree node, int spc)\n       value_range_type range_type = get_range_info (node, &min, &max);\n \n       if (range_type == VR_VARYING)\n-        pp_printf (buffer, \"# RANGE  VR_VARYING\");\n+\tpp_printf (buffer, \"# RANGE  VR_VARYING\");\n       else if (range_type == VR_RANGE || range_type == VR_ANTI_RANGE)\n-        {\n-          pp_printf (buffer, \"# RANGE \");\n-          pp_printf (buffer, \"%s[\", range_type == VR_RANGE ? \"\" : \"~\");\n-          pp_double_int (buffer, min, TYPE_UNSIGNED (TREE_TYPE (node)));\n-          pp_printf (buffer, \", \");\n-          pp_double_int (buffer, max, TYPE_UNSIGNED (TREE_TYPE (node)));\n-          pp_printf (buffer, \"]\");\n-          newline_and_indent (buffer, spc);\n-        }\n+\t{\n+\t  pp_printf (buffer, \"# RANGE \");\n+\t  pp_printf (buffer, \"%s[\", range_type == VR_RANGE ? \"\" : \"~\");\n+\t  pp_double_int (buffer, min, TYPE_UNSIGNED (TREE_TYPE (node)));\n+\t  pp_printf (buffer, \", \");\n+\t  pp_double_int (buffer, max, TYPE_UNSIGNED (TREE_TYPE (node)));\n+\t  pp_printf (buffer, \"]\");\n+\t  newline_and_indent (buffer, spc);\n+\t}\n     }\n }\n \n@@ -1661,8 +1661,8 @@ dump_gimple_phi (pretty_printer *buffer, gimple phi, int spc, int flags)\n     dump_ssaname_info (buffer, lhs, spc);\n \n   if (flags & TDF_RAW)\n-      dump_gimple_fmt (buffer, spc, flags, \"%G <%T, \", phi,\n-                       gimple_phi_result (phi));\n+    dump_gimple_fmt (buffer, spc, flags, \"%G <%T, \", phi,\n+\t\t     gimple_phi_result (phi));\n   else\n     {\n       dump_generic_node (buffer, lhs, spc, flags, false);"}, {"sha": "0b3314bc55e0ea88f6632e5c5dff4201353eb442", "filename": "gcc/tree-core.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0498471be6e90c14f3fdf42789117bae39868f2b/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0498471be6e90c14f3fdf42789117bae39868f2b/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=0498471be6e90c14f3fdf42789117bae39868f2b", "patch": "@@ -1058,7 +1058,7 @@ struct GTY(()) tree_ssa_name {\n     /* Value range attributes used for zero/sign extension elimination.  */\n     struct GTY ((tag (\"1\"))) range_info_def *range_info;\n   } GTY ((desc (\"%1.typed.type ?\" \\\n-                \"!POINTER_TYPE_P (TREE_TYPE ((tree)&%1)) : 2\"))) info;\n+\t\t\"!POINTER_TYPE_P (TREE_TYPE ((tree)&%1)) : 2\"))) info;\n \n   /* Immediate uses list for this SSA_NAME.  */\n   struct ssa_use_operand_d imm_uses;"}, {"sha": "bd6fd81d47e4439dce65f02ab65d1a80051d3f1c", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0498471be6e90c14f3fdf42789117bae39868f2b/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0498471be6e90c14f3fdf42789117bae39868f2b/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=0498471be6e90c14f3fdf42789117bae39868f2b", "patch": "@@ -1063,8 +1063,8 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t  pp_string (buffer, \"B\"); /* pseudo-unit */\n \t}\n       else\n-        pp_double_int (buffer, tree_to_double_int (node),\n-                       TYPE_UNSIGNED (TREE_TYPE (node)));\n+\tpp_double_int (buffer, tree_to_double_int (node),\n+\t\t       TYPE_UNSIGNED (TREE_TYPE (node)));\n       break;\n \n     case REAL_CST:\n@@ -3191,16 +3191,16 @@ pp_double_int (pretty_printer *pp, double_int d, bool uns)\n       unsigned HOST_WIDE_INT low = d.low;\n       HOST_WIDE_INT high = d.high;\n       if (!uns && d.is_negative ())\n-        {\n-          pp_minus (pp);\n-          high = ~high + !low;\n-          low = -low;\n-        }\n+\t{\n+\t  pp_minus (pp);\n+\t  high = ~high + !low;\n+\t  low = -low;\n+\t}\n       /* Would \"%x%0*x\" or \"%x%*0x\" get zero-padding on all\n-         systems?  */\n+\t systems?  */\n       sprintf (pp_buffer (pp)->digit_buffer,\n-               HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n-               (unsigned HOST_WIDE_INT) high, low);\n+\t       HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n+\t       (unsigned HOST_WIDE_INT) high, low);\n       pp_string (pp, pp_buffer (pp)->digit_buffer);\n     }\n }"}, {"sha": "0d3c15c447d3a040751a080c3f23f9af42a6cd13", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0498471be6e90c14f3fdf42789117bae39868f2b/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0498471be6e90c14f3fdf42789117bae39868f2b/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=0498471be6e90c14f3fdf42789117bae39868f2b", "patch": "@@ -404,7 +404,7 @@ dump_alias_info (FILE *file)\n       struct ptr_info_def *pi;\n \n       if (ptr == NULL_TREE\n-          || !POINTER_TYPE_P (TREE_TYPE (ptr))\n+\t  || !POINTER_TYPE_P (TREE_TYPE (ptr))\n \t  || SSA_NAME_IN_FREE_LIST (ptr))\n \tcontinue;\n "}, {"sha": "2172a9a12bf7e46182e833dd0391bb284da531d6", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0498471be6e90c14f3fdf42789117bae39868f2b/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0498471be6e90c14f3fdf42789117bae39868f2b/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=0498471be6e90c14f3fdf42789117bae39868f2b", "patch": "@@ -767,19 +767,19 @@ fini_copy_prop (void)\n \t of the representative to the first solution we find if\n \t it doesn't have one already.  */\n       if (copy_of[i].value != var\n-          && TREE_CODE (copy_of[i].value) == SSA_NAME)\n-        {\n-          if (POINTER_TYPE_P (TREE_TYPE (var))\n-              && SSA_NAME_PTR_INFO (var)\n-              && !SSA_NAME_PTR_INFO (copy_of[i].value))\n-            duplicate_ssa_name_ptr_info (copy_of[i].value,\n-                                         SSA_NAME_PTR_INFO (var));\n-          else if (!POINTER_TYPE_P (TREE_TYPE (var))\n-                   && SSA_NAME_RANGE_INFO (var)\n-                   && !SSA_NAME_RANGE_INFO (copy_of[i].value))\n-            duplicate_ssa_name_range_info (copy_of[i].value,\n-                                           SSA_NAME_RANGE_INFO (var));\n-        }\n+\t  && TREE_CODE (copy_of[i].value) == SSA_NAME)\n+\t{\n+\t  if (POINTER_TYPE_P (TREE_TYPE (var))\n+\t      && SSA_NAME_PTR_INFO (var)\n+\t      && !SSA_NAME_PTR_INFO (copy_of[i].value))\n+\t    duplicate_ssa_name_ptr_info (copy_of[i].value,\n+\t\t\t\t\t SSA_NAME_PTR_INFO (var));\n+\t  else if (!POINTER_TYPE_P (TREE_TYPE (var))\n+\t\t   && SSA_NAME_RANGE_INFO (var)\n+\t\t   && !SSA_NAME_RANGE_INFO (copy_of[i].value))\n+\t    duplicate_ssa_name_range_info (copy_of[i].value,\n+\t\t\t\t\t   SSA_NAME_RANGE_INFO (var));\n+\t}\n     }\n \n   /* Don't do DCE if SCEV is initialized.  It would destroy the scev cache.  */"}, {"sha": "d54d8c9e6de31a10bc418253692b925d61b4f6da", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0498471be6e90c14f3fdf42789117bae39868f2b/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0498471be6e90c14f3fdf42789117bae39868f2b/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=0498471be6e90c14f3fdf42789117bae39868f2b", "patch": "@@ -206,7 +206,7 @@ get_range_info (tree name, double_int *min, double_int *max)\n   /* Return VR_VARYING for SSA_NAMEs with NULL RANGE_INFO or SSA_NAMEs\n      with integral types width > 2 * HOST_BITS_PER_WIDE_INT precision.  */\n   if (!ri || (GET_MODE_PRECISION (TYPE_MODE (TREE_TYPE (name)))\n-              > 2 * HOST_BITS_PER_WIDE_INT))\n+\t      > 2 * HOST_BITS_PER_WIDE_INT))\n     return VR_VARYING;\n \n   /* If min > max, it is VR_ANTI_RANGE.  */\n@@ -455,14 +455,14 @@ duplicate_ssa_name_fn (struct function *fn, tree name, gimple stmt)\n       struct ptr_info_def *old_ptr_info = SSA_NAME_PTR_INFO (name);\n \n       if (old_ptr_info)\n-        duplicate_ssa_name_ptr_info (new_name, old_ptr_info);\n+\tduplicate_ssa_name_ptr_info (new_name, old_ptr_info);\n     }\n   else\n     {\n       struct range_info_def *old_range_info = SSA_NAME_RANGE_INFO (name);\n \n       if (old_range_info)\n-        duplicate_ssa_name_range_info (new_name, old_range_info);\n+\tduplicate_ssa_name_range_info (new_name, old_range_info);\n     }\n \n   return new_name;"}, {"sha": "f80e0b2ce33cee011e98209fa8f9ffcb9af49490", "filename": "gcc/tree-ssanames.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0498471be6e90c14f3fdf42789117bae39868f2b/gcc%2Ftree-ssanames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0498471be6e90c14f3fdf42789117bae39868f2b/gcc%2Ftree-ssanames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.h?ref=0498471be6e90c14f3fdf42789117bae39868f2b", "patch": "@@ -71,7 +71,7 @@ enum value_range_type { VR_UNDEFINED, VR_RANGE, VR_ANTI_RANGE, VR_VARYING };\n extern void set_range_info (tree ssa, double_int min, double_int max);\n /* Gets the value range from SSA.  */\n extern enum value_range_type  get_range_info (tree name, double_int *min,\n-                                              double_int *max);\n+\t\t\t\t\t      double_int *max);\n extern void init_ssanames (struct function *, int);\n extern void fini_ssanames (void);\n extern void ssanames_print_statistics (void);"}, {"sha": "0d50af708e8710ce985f038f6985ee9fe48c243f", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0498471be6e90c14f3fdf42789117bae39868f2b/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0498471be6e90c14f3fdf42789117bae39868f2b/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=0498471be6e90c14f3fdf42789117bae39868f2b", "patch": "@@ -9451,48 +9451,48 @@ vrp_finalize (void)\n \n   /* Set value range to non pointer SSA_NAMEs.  */\n   for (i  = 0; i < num_vr_values; i++)\n-   if (vr_value[i])\n-    {\n-      tree name = ssa_name (i);\n+    if (vr_value[i])\n+      {\n+\ttree name = ssa_name (i);\n \n       if (!name\n \t  || POINTER_TYPE_P (TREE_TYPE (name))\n-          || (vr_value[i]->type == VR_VARYING)\n-          || (vr_value[i]->type == VR_UNDEFINED))\n-        continue;\n+\t  || (vr_value[i]->type == VR_VARYING)\n+\t  || (vr_value[i]->type == VR_UNDEFINED))\n+\tcontinue;\n \n-      if ((TREE_CODE (vr_value[i]->min) == INTEGER_CST)\n-          && (TREE_CODE (vr_value[i]->max) == INTEGER_CST))\n-        {\n-          if (vr_value[i]->type == VR_RANGE)\n-            set_range_info (name,\n-                            tree_to_double_int (vr_value[i]->min),\n-                            tree_to_double_int (vr_value[i]->max));\n-          else if (vr_value[i]->type == VR_ANTI_RANGE)\n-            {\n-              /* VR_ANTI_RANGE ~[min, max] is encoded compactly as\n-                 [max + 1, min - 1] without additional attributes.\n-                 When min value > max value, we know that it is\n-                 VR_ANTI_RANGE; it is VR_RANGE otherwise.  */\n-\n-\t      /* ~[0,0] anti-range is represented as\n-                 range.  */\n-              if (TYPE_UNSIGNED (TREE_TYPE (name))\n-                  && integer_zerop (vr_value[i]->min)\n-                  && integer_zerop (vr_value[i]->max))\n-                set_range_info (name,\n-                                double_int_one,\n-                                double_int::max_value\n-                                (TYPE_PRECISION (TREE_TYPE (name)), true));\n-              else\n-                set_range_info (name,\n-                                tree_to_double_int (vr_value[i]->max)\n-                                + double_int_one,\n-                                tree_to_double_int (vr_value[i]->min)\n-                                - double_int_one);\n-            }\n-        }\n-    }\n+\tif ((TREE_CODE (vr_value[i]->min) == INTEGER_CST)\n+\t    && (TREE_CODE (vr_value[i]->max) == INTEGER_CST))\n+\t  {\n+\t    if (vr_value[i]->type == VR_RANGE)\n+\t      set_range_info (name,\n+\t\t\t      tree_to_double_int (vr_value[i]->min),\n+\t\t\t      tree_to_double_int (vr_value[i]->max));\n+\t    else if (vr_value[i]->type == VR_ANTI_RANGE)\n+\t      {\n+\t\t/* VR_ANTI_RANGE ~[min, max] is encoded compactly as\n+\t\t   [max + 1, min - 1] without additional attributes.\n+\t\t   When min value > max value, we know that it is\n+\t\t   VR_ANTI_RANGE; it is VR_RANGE otherwise.  */\n+\n+\t\t/* ~[0,0] anti-range is represented as\n+\t\t   range.  */\n+\t\tif (TYPE_UNSIGNED (TREE_TYPE (name))\n+\t\t    && integer_zerop (vr_value[i]->min)\n+\t\t    && integer_zerop (vr_value[i]->max))\n+\t\t  set_range_info (name,\n+\t\t\t\t  double_int_one,\n+\t\t\t\t  double_int::max_value\n+\t\t\t\t  (TYPE_PRECISION (TREE_TYPE (name)), true));\n+\t\telse\n+\t\t  set_range_info (name,\n+\t\t\t\t  tree_to_double_int (vr_value[i]->max)\n+\t\t\t\t  + double_int_one,\n+\t\t\t\t  tree_to_double_int (vr_value[i]->min)\n+\t\t\t\t  - double_int_one);\n+\t      }\n+\t  }\n+      }\n \n   /* Free allocated memory.  */\n   for (i = 0; i < num_vr_values; i++)"}]}