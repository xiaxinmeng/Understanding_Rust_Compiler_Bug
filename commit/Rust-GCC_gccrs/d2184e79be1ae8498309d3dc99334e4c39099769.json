{"sha": "d2184e79be1ae8498309d3dc99334e4c39099769", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIxODRlNzliZTFhZTg0OTgzMDlkM2RjOTkzMzRlNGMzOTA5OTc2OQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2003-03-15T19:54:10Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-03-15T19:54:10Z"}, "message": "Makefile.in (TEXI_GCCINT_FILES): Add libgcc.texi.\n\n2003-03-15  Aldy Hernandez <aldyh@redhat.com>\n\t    Zack Weinberg  <zack@codesourcery.com>\n\n\t* Makefile.in (TEXI_GCCINT_FILES): Add libgcc.texi.\n\t* doc/libgcc.texi: New file.\n\t* doc/interface.texi: Delete paragraph about libgcc interface.\n\t* doc/gccint.texi: Add libgcc menu entry and @include libgcc.texi.\n\nFrom-SVN: r64416", "tree": {"sha": "e7f396c4a9ab0711d7638802c2dab55e302b10ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7f396c4a9ab0711d7638802c2dab55e302b10ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2184e79be1ae8498309d3dc99334e4c39099769", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2184e79be1ae8498309d3dc99334e4c39099769", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2184e79be1ae8498309d3dc99334e4c39099769", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2184e79be1ae8498309d3dc99334e4c39099769/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de6a669be0c301912d3ff1b00aed3bf0e0a115f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de6a669be0c301912d3ff1b00aed3bf0e0a115f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de6a669be0c301912d3ff1b00aed3bf0e0a115f2"}], "stats": {"total": 475, "additions": 418, "deletions": 57}, "files": [{"sha": "3ef637f27433eba9c06160387d271e770385c79e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 48, "deletions": 40, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2184e79be1ae8498309d3dc99334e4c39099769/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2184e79be1ae8498309d3dc99334e4c39099769/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2184e79be1ae8498309d3dc99334e4c39099769", "patch": "@@ -1,3 +1,11 @@\n+2003-03-15  Aldy Hernandez <aldyh@redhat.com>\n+\t    Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* Makefile.in (TEXI_GCCINT_FILES): Add libgcc.texi.\n+\t* doc/libgcc.texi: New file.\n+\t* doc/interface.texi: Delete paragraph about libgcc interface.\n+\t* doc/gccint.texi: Add libgcc menu entry and @include libgcc.texi.\n+\n 2003-03-15  Jason Merrill  <jason@redhat.com>\n \n \tPR debug/9039\n@@ -231,15 +239,15 @@ Thu Mar 13 18:39:42 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-03-13  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/rs6000.c (rs6000_dwarf_register_span):\n-        Differentiate endianness.\n-        (s6000_override_options): Use cpu type instead of TARGET_SPE.\n+\t* config/rs6000/rs6000.c (rs6000_dwarf_register_span):\n+\tDifferentiate endianness.\n+\t(s6000_override_options): Use cpu type instead of TARGET_SPE.\n \n 2003-03-13  Nick Clifton  <nickc@redhat.com>\n \n \t* config/arm/arm.c (print_multi_reg): Do not generate a type 2\n-        LDM instructions with writeback enabled.\n-        (output_return_instruction): Likewise.\n+\tLDM instructions with writeback enabled.\n+\t(output_return_instruction): Likewise.\n \n \t* config/arm/pe.h (FIXED_REGISTERS): Remove definition.\n \t(CALL_USED_REGISTERS): Remove definition.\n@@ -372,9 +380,9 @@ Thu Mar 13 18:39:42 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-03-12  Bob Wilson  <bob.wilson@acm.org>\n \n-        * config/xtensa/xtensa.md (adddi3): Don't clobber source operand used\n+\t* config/xtensa/xtensa.md (adddi3): Don't clobber source operand used\n \tto detect carry.\n-        (subdi3): Reorder emitted instructions.\n+\t(subdi3): Reorder emitted instructions.\n \n 2003-03-12  Andreas Jaeger  <aj@suse.de>\n \n@@ -390,22 +398,22 @@ Thu Mar 13 18:39:42 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-03-12  Andreas Jaeger  <aj@suse.de>\n \n-        * c-cppbuiltin.c (cb_register_builtins): Define LP64 builtins for\n-        LP64 targets.\n+\t* c-cppbuiltin.c (cb_register_builtins): Define LP64 builtins for\n+\tLP64 targets.\n \n-        * doc/cpp.texi (Common Predefined Macros): Document __LP64__ and\n-        _LP64.\n+\t* doc/cpp.texi (Common Predefined Macros): Document __LP64__ and\n+\t_LP64.\n \n-        * config/ia64/ia64.h (TARGET_CPU_CPP_BUILTINS): Do not define\n-        _LP64 macros here.\n-        * config/pa/pa.h (TARGET_CPU_CPP_BUILTINS): Likewise.\n+\t* config/ia64/ia64.h (TARGET_CPU_CPP_BUILTINS): Do not define\n+\t_LP64 macros here.\n+\t* config/pa/pa.h (TARGET_CPU_CPP_BUILTINS): Likewise.\n \n-        * config/alpha/netbsd.h (TARGET_OS_CPP_BUILTINS): Remove call to\n-        NETBSD_OS_CPP_BUILTINS_LP64.\n-        * config/sh/netbsd-elf.h (TARGET_OS_CPP_BUILTINS): Likewise.\n-        * config/sparc/netbsd-elf.h (TARGET_OS_CPP_BUILTINS): Likewise.\n+\t* config/alpha/netbsd.h (TARGET_OS_CPP_BUILTINS): Remove call to\n+\tNETBSD_OS_CPP_BUILTINS_LP64.\n+\t* config/sh/netbsd-elf.h (TARGET_OS_CPP_BUILTINS): Likewise.\n+\t* config/sparc/netbsd-elf.h (TARGET_OS_CPP_BUILTINS): Likewise.\n \n-        * config/netbsd.h (NETBSD_OS_CPP_BUILTINS_LP64): Remove.\n+\t* config/netbsd.h (NETBSD_OS_CPP_BUILTINS_LP64): Remove.\n \n Wed Mar 12 19:04:39 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n@@ -466,7 +474,7 @@ Wed Mar 12 16:30:25 2003  J\"orn Rennecke <joern.rennecke@superh.com>\n \tDLL_IMPORT_EXPORT_PREFIX and \"i.\"\n \t(i386_pe_dllexport_name_p): Here.\n \t(i386_pe_dllimport_name_p): Here.\n-        (i386_pe_mark_dllexport): Here. Remove DLL_IMPORT_PREFIX,\n+\t(i386_pe_mark_dllexport): Here. Remove DLL_IMPORT_PREFIX,\n \tnot 9 chars when getting identifier name.\n \t(i386_pe_mark_dllimport): Here.\n \t(i386_pe_encode_section_info): Here. Remove DLL_IMPORT_PREFIX,\n@@ -510,10 +518,10 @@ Wed Mar 12 16:30:25 2003  J\"orn Rennecke <joern.rennecke@superh.com>\n \n 2003-03-11  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/rs6000.c (rs6000_stack_info): Remove\n-        insn_chain_scanned.  Use insn_chain_scanned_p in machine_function.\n+\t* config/rs6000/rs6000.c (rs6000_stack_info): Remove\n+\tinsn_chain_scanned.  Use insn_chain_scanned_p in machine_function.\n \n-        * config/rs6000/rs6000.h (machine_function): Add insn_chain_scanned_p.\n+\t* config/rs6000/rs6000.h (machine_function): Add insn_chain_scanned_p.\n \n Tue Mar 11 21:19:03 2003  Alexandre Oliva  <aoliva@redhat.com>\n \n@@ -545,8 +553,8 @@ Tue Mar 11 22:48:03 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-03-11  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/rs6000.c (rs6000_override_options): Disable string\n-        instructions for e500.\n+\t* config/rs6000/rs6000.c (rs6000_override_options): Disable string\n+\tinstructions for e500.\n \n 2003-03-11  Neil Booth  <neil@daikokuya.co.uk>\n \n@@ -555,23 +563,23 @@ Tue Mar 11 22:48:03 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-03-11  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * doc/tm.texi (Frame Registers): Document DWARF_REG_TO_UNWIND_COLUMN.\n+\t* doc/tm.texi (Frame Registers): Document DWARF_REG_TO_UNWIND_COLUMN.\n \n-        * unwind-dw2.c (DWARF_REG_TO_UNWIND_COLUMN): Define.\n-        (_Unwind_GetGR): Use DWARF_REG_TO_UNWIND_COLUMN.\n-        (_Unwind_SetGR): Same.\n-        (_Unwind_GetGRPtr): New.\n-        (_Unwind_SetGRPtr): New.\n-        (uw_update_context_1): Use accesor functions instead of accessing\n-        context->reg[] directly.\n-        (uw_install_context_1): Same.\n-        (execute_cfa_program): Same.\n-        (__frame_state_for): Same.\n+\t* unwind-dw2.c (DWARF_REG_TO_UNWIND_COLUMN): Define.\n+\t(_Unwind_GetGR): Use DWARF_REG_TO_UNWIND_COLUMN.\n+\t(_Unwind_SetGR): Same.\n+\t(_Unwind_GetGRPtr): New.\n+\t(_Unwind_SetGRPtr): New.\n+\t(uw_update_context_1): Use accesor functions instead of accessing\n+\tcontext->reg[] directly.\n+\t(uw_install_context_1): Same.\n+\t(execute_cfa_program): Same.\n+\t(__frame_state_for): Same.\n \n-        * config/rs6000/rs6000.c (spe_synthesize_frame_save): Use 1200 as\n-        the synthetic register offset.\n+\t* config/rs6000/rs6000.c (spe_synthesize_frame_save): Use 1200 as\n+\tthe synthetic register offset.\n \n-        * config/rs6000/rs6000.h (DWARF_REG_TO_UNWIND_COLUMN): New.\n+\t* config/rs6000/rs6000.h (DWARF_REG_TO_UNWIND_COLUMN): New.\n \n 2003-03-11  Hans-Peter Nilsson  <hp@axis.com>\n \n@@ -623,7 +631,7 @@ Tue Mar 11 22:48:03 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-03-10  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * dwarf2out.c (multiple_reg_loc_descriptor): Fix thinko.\n+\t* dwarf2out.c (multiple_reg_loc_descriptor): Fix thinko.\n \n 2003-03-10  Andrew Pinski  <apinski@apple.com>\n "}, {"sha": "e69f67fc87d017cbe1d23424cc64880ed9d0a768", "filename": "gcc/doc/gccint.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2184e79be1ae8498309d3dc99334e4c39099769/gcc%2Fdoc%2Fgccint.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2184e79be1ae8498309d3dc99334e4c39099769/gcc%2Fdoc%2Fgccint.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgccint.texi?ref=d2184e79be1ae8498309d3dc99334e4c39099769", "patch": "@@ -140,6 +140,7 @@ Additional tutorial information is linked to from\n * Contributing::    How to contribute to testing and developing GCC.\n * Portability::     Goals of GCC's portability features.\n * Interface::       Function-call interface of GCC output.\n+* Libgcc::          Low-level runtime library used by GCC.\n * Languages::       Languages for which GCC front ends are written.\n * Source Tree::     GCC source tree structure and build system.\n * Passes::          Order of passes, what they do, and what each file is for.\n@@ -168,6 +169,7 @@ Additional tutorial information is linked to from\n @include contribute.texi\n @include portability.texi\n @include interface.texi\n+@include libgcc.texi\n @include languages.texi\n @include sourcebuild.texi\n @include passes.texi"}, {"sha": "d2210e93865d3387c1633af573e4328cb23a86e9", "filename": "gcc/doc/interface.texi", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2184e79be1ae8498309d3dc99334e4c39099769/gcc%2Fdoc%2Finterface.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2184e79be1ae8498309d3dc99334e4c39099769/gcc%2Fdoc%2Finterface.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finterface.texi?ref=d2184e79be1ae8498309d3dc99334e4c39099769", "patch": "@@ -83,20 +83,3 @@ go in a register:\n   @dots{}\n @}\n @end example\n-\n-@cindex arithmetic libraries\n-@cindex math libraries\n-@opindex msoft-float\n-Code compiled with GCC may call certain library routines.  Most of\n-them handle arithmetic for which there are no instructions.  This\n-includes multiply and divide on some machines, and floating point\n-operations on any machine for which floating point support is disabled\n-with @option{-msoft-float}.  Some standard parts of the C library, such as\n-@code{bcopy} or @code{memcpy}, are also called automatically.  The usual\n-function call interface is used for calling the library routines.\n-\n-Some of these routines can be defined in mostly machine-independent C;\n-they appear in @file{libgcc2.c}.  Others must be hand-written in\n-assembly language for each processor.  Wherever they are defined, they\n-are compiled into the support library, @file{libgcc.a}, which is\n-automatically searched when you link programs with GCC@."}, {"sha": "19074ba985aa588a9de96a8f8c6656e6e59bd808", "filename": "gcc/doc/libgcc.texi", "status": "added", "additions": 368, "deletions": 0, "changes": 368, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2184e79be1ae8498309d3dc99334e4c39099769/gcc%2Fdoc%2Flibgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2184e79be1ae8498309d3dc99334e4c39099769/gcc%2Fdoc%2Flibgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Flibgcc.texi?ref=d2184e79be1ae8498309d3dc99334e4c39099769", "patch": "@@ -0,0 +1,368 @@\n+@c Copyright (C) 2003 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+@c Contributed by Aldy Hernandez <aldy@quesejoda.com>\n+\n+@node Libgcc\n+@chapter The GCC low-level runtime library\n+\n+GCC provides a low-level runtime library, @file{libgcc.a} or\n+@file{libgcc_s.so.1} on some platforms.  GCC generates calls to\n+routines in this library automatically, whenever it needs to perform\n+some operation that is too complicated to emit inline code for.\n+\n+Most of the routines in @code{libgcc} handle arithmetic operations\n+that the target processor cannot perform directly.  This includes\n+integer multiply and divide on some machines, and all floating-point\n+operations on other machines.  @code{libgcc} also includes routines\n+for exception handling, and a handful of miscellaneous operations.\n+\n+Some of these routines can be defined in mostly machine-independent C.\n+Others must be hand-written in assembly language for each processor\n+that needs them.\n+\n+GCC will also generate calls to C library routines, such as\n+@code{memcpy} and @code{memset}, in some cases.  The set of routines\n+that GCC may possibly use is documented in @ref{Other\n+Builtins,,,gcc, Using the GNU Compiler Collection (GCC)}.\n+\n+@menu\n+* Integer library routines::\n+* Soft float library routines::\n+* Exception handling routines::\n+* Miscellaneous routines:: \n+@end menu\n+\n+@node Integer library routines\n+@section Routines for integer arithmetic\n+\n+document me!\n+\n+@example\n+  __absvsi2\n+  __addvsi3\n+  __ashlsi3\n+  __ashrsi3\n+  __divsi3\n+  __lshrsi3\n+  __modsi3\n+  __mulsi3\n+  __mulvsi3\n+  __negvsi2\n+  __subvsi3\n+  __udivsi3\n+  __umodsi3\n+\n+  __absvdi2\n+  __addvdi3\n+  __ashldi3\n+  __ashrdi3\n+  __cmpdi2\n+  __divdi3\n+  __ffsdi2\n+  __fixdfdi\n+  __fixsfdi\n+  __fixtfdi\n+  __fixxfdi\n+  __fixunsdfdi\n+  __fixunsdfsi\n+  __fixunssfsi\n+  __fixunssfdi\n+  __fixunstfdi\n+  __fixunstfsi\n+  __fixunsxfdi\n+  __fixunsxfsi\n+  __floatdidf\n+  __floatdisf\n+  __floatdixf\n+  __floatditf\n+  __lshrdi3\n+  __moddi3\n+  __muldi3\n+  __mulvdi3\n+  __negdi2\n+  __negvdi2\n+  __subvdi3\n+  __ucmpdi2\n+  __udivdi3\n+  __udivmoddi4\n+  __umoddi3\n+\n+  __ashlti3\n+  __ashrti3\n+  __cmpti2\n+  __divti3\n+  __ffsti2\n+  __fixdfti\n+  __fixsfti\n+  __fixtfti\n+  __fixxfti\n+  __lshrti3\n+  __modti3\n+  __multi3\n+  __negti2\n+  __ucmpti2\n+  __udivmodti4\n+  __udivti3\n+  __umodti3\n+  __fixunsdfti\n+  __fixunssfti\n+  __fixunstfti\n+  __fixunsxfti\n+  __floattidf\n+  __floattisf\n+  __floattixf\n+  __floattitf\n+\n+  __clzsi2\n+  __clzdi2\n+  __clzti2\n+  __ctzsi2\n+  __ctzdi2\n+  __ctzti2\n+  __popcountsi2\n+  __popcountdi2\n+  __popcountti2\n+  __paritysi2\n+  __paritydi2\n+  __parityti2\n+@end example\n+\n+\n+@node Soft float library routines\n+@section Routines for floating point emulation\n+@cindex soft float library\n+@cindex arithmetic library\n+@cindex math library\n+@opindex msoft-float\n+\n+The software floating point library is used on machines which do not\n+have hardware support for floating point.  It is also used whenever\n+@option{-msoft-float} is used to disable generation of floating point\n+instructions.  (Not all targets support this switch.)\n+\n+For compatibility with other compilers, the floating point emulation\n+routines can be renamed with the @code{DECLARE_LIBRARY_RENAMES} macro\n+(@pxref{Library Calls}).  In this section, the default names are used.\n+\n+These routines take arguments and return values of a specific machine\n+mode, not a specific C type.  @xref{Machine Modes}, for an explanation\n+of this concept.  For illustrative purposes, in this section\n+@code{float} is assumed to correspond to @code{SFmode}; @code{double}\n+to @code{DFmode}; @code{@w{long double}} to @code{TFmode}; and\n+@code{int} to @code{SImode}.  This is a common mapping, but not the\n+only possibility.\n+\n+Presently the library does not support @code{XFmode}, which is used\n+for @code{long double} on some architectures.\n+\n+@subsection Arithmetic functions\n+\n+@deftypefn {Runtime Function} float __addsf3 (float @var{a}, float @var{b})\n+@deftypefnx {Runtime Function} double __adddf3 (double @var{a}, double @var{b})\n+@deftypefnx {Runtime Function} long double __addtf3 (long double @var{a}, long double @var{b})\n+These functions return the sum of @var{a} and @var{b}.\n+@end deftypefn\n+\n+@deftypefn {Runtime Function} float __subsf3 (float @var{a}, float @var{b})\n+@deftypefnx {Runtime Function} double __subdf3 (double @var{a}, double @var{b})\n+@deftypefnx {Runtime Function} long double __subtf3 (long double @var{a}, long double @var{b})\n+These functions return the difference between @var{b} and @var{a};\n+that is, @w{@math{@var{a} - @var{b}}}.\n+@end deftypefn\n+\n+@deftypefn {Runtime Function} float __mulsf3 (float @var{a}, float @var{b})\n+@deftypefnx {Runtime Function} double __muldf3 (double @var{a}, double @var{b})\n+@deftypefnx {Runtime Function} long double __multf3 (long double @var{a}, long double @var{b})\n+These functions return the product of @var{a} and @var{b}.\n+@end deftypefn\n+\n+@deftypefn {Runtime Function} float __divsf3 (float @var{a}, float @var{b})\n+@deftypefnx {Runtime Function} double __divdf3 (double @var{a}, double @var{b})\n+@deftypefnx {Runtime Function} long double __divtf3 (long double @var{a}, long double @var{b})\n+These functions return the quotient of @var{a} and @var{b}; that is,\n+@w{@math{@var{a} / @var{b}}}.\n+@end deftypefn\n+\n+@deftypefn {Runtime Function} double __negdf2 (double @var{a})\n+@deftypefnx {Runtime Function} long double __negtf2 (long double @var{a})\n+@deftypefnx {Runtime Function} float __negsf2 (float @var{a})\n+These functions return the negation of @var{a}.  They simply flip the\n+sign bit, so they can produce negative zero and negative NaN.\n+@end deftypefn\n+\n+@subsection Conversion functions\n+\n+@deftypefn {Runtime Function} double __extendsfdf2 (float @var{a})\n+@deftypefnx {Runtime Function} long double __extendsftf2 (float @var{a})\n+@deftypefnx {Runtime Function} long double __extenddftf2 (double @var{a})\n+These functions extend @var{a} to the wider mode of their return\n+type.\n+@end deftypefn\n+\n+@deftypefn {Runtime Function} double __trunctfdf2 (long double @var{a})\n+@deftypefnx {Runtime Function} float __trunctfsf2 (long double @var{a})\n+@deftypefnx {Runtime Function} float __truncdfsf2 (double @var{a})\n+These functions truncate @var{a} to the narrower mode of their return\n+type, rounding toward zero.\n+@end deftypefn\n+\n+@deftypefn {Runtime Function} int __fixsfsi (float @var{a})\n+@deftypefnx {Runtime Function} int __fixdfsi (double @var{a})\n+@deftypefnx {Runtime Function} int __fixtfsi (long double @var{a})\n+These functions convert @var{a} to a signed integer, rounding toward zero.\n+@end deftypefn\n+\n+@deftypefn {Runtime Function} unsigned int __fixunssfsi (float @var{a})\n+@deftypefnx {Runtime Function} unsigned int __fixunsdfsi (double @var{a})\n+@deftypefnx {Runtime Function} unsigned int __fixunstfsi (long double @var{a})\n+These functions convert @var{a} to an unsigned integer, rounding\n+toward zero.  Negative values all become zero.\n+@end deftypefn\n+\n+@deftypefn {Runtime Function} float __floatsisf (int @var{i})\n+@deftypefnx {Runtime Function} double __floatsidf (int @var{i})\n+@deftypefnx {Runtime Function} long double __floatsitf (int @var{i})\n+These functions convert @var{i}, a signed integer, to floating point.\n+@end deftypefn\n+\n+@deftypefn {Runtime Function} float __floatunsisf (unsigned int @var{n})\n+@deftypefnx {Runtime Function} double __floatunsidf (unsigned int @var{n})\n+@deftypefnx {Runtime Function} long double __floatunsitf (unsigned int @var{n})\n+These functions convert @var{n}, an unsigned integer, to floating point.\n+@end deftypefn\n+\n+There are no functions to convert @code{DImode} integers to or from\n+floating point; this reflects the fact that such conversions are rare,\n+and processors with native 64-bit arithmetic tend to have hardware\n+floating point support.  If such routines ever get added, they will be\n+named @code{__fixsfdi}, @code{__floatdisf}, and so on.\n+\n+@subsection Comparison functions\n+\n+There are two sets of basic comparison functions.\n+\n+@deftypefn {Runtime Function} int __cmpsf2 (float @var{a}, float @var{b})\n+@deftypefnx {Runtime Function} int __cmpdf2 (double @var{a}, double @var{b})\n+@deftypefnx {Runtime Function} int __cmptf2 (long double @var{a}, long double @var{b})\n+These functions calculate @math{a <=> b}.  That is, if @var{a} is less\n+than @var{b}, they return -1; if @var{a} is greater than @var{b}, they\n+return 1; and if @var{a} and @var{b} are equal they return 0.  If\n+either argument is NaN they return 1, but you should not rely on this;\n+if NaN is a possibility, use one of the higher-level comparison\n+functions.\n+@end deftypefn\n+\n+@deftypefn {Runtime Function} int __unordsf2 (float @var{a}, float @var{b})\n+@deftypefnx {Runtime Function} int __unorddf2 (double @var{a}, double @var{b})\n+@deftypefnx {Runtime Function} int __unordtf2 (long double @var{a}, long double @var{b})\n+These functions return 1 if either argument is NaN, otherwise 0.\n+@end deftypefn\n+\n+There is also a complete group of higher level functions which\n+correspond directly to comparison operators.  They implement the ISO@tie{}C\n+semantics for floating-point comparisons, taking NaN into account.\n+Pay careful attention to the return values defined for each set.\n+Under the hood, all of these routines are implemented as\n+\n+@smallexample\n+  if (__unord@var{X}f2 (a, b))\n+    return @var{E};\n+  return __cmp@var{X}f2 (a, b);\n+@end smallexample\n+\n+@noindent\n+where @var{E} is a constant chosen to give the proper behavior for\n+NaN.  Thus, the meaning of the return value is different for each set.\n+Do not rely on this implementation; only the semantics documented\n+below are guaranteed.\n+\n+@deftypefn {Runtime Function} int __eqsf2 (float @var{a}, float @var{b})\n+@deftypefnx {Runtime Function} int __eqdf2 (double @var{a}, double @var{b})\n+@deftypefnx {Runtime Function} int __eqtf2 (long double @var{a}, long double @var{b})\n+These functions return zero if neither argument is NaN, and @var{a} and\n+@var{b} are equal.\n+@end deftypefn\n+\n+@deftypefn {Runtime Function} int __nesf2 (float @var{a}, float @var{b})\n+@deftypefnx {Runtime Function} int __nedf2 (double @var{a}, double @var{b})\n+@deftypefnx {Runtime Function} int __netf2 (long double @var{a}, long double @var{b})\n+These functions return a nonzero value if either argument is NaN, or\n+if @var{a} and @var{b} are unequal.\n+@end deftypefn\n+\n+@deftypefn {Runtime Function} int __gesf2 (float @var{a}, float @var{b})\n+@deftypefnx {Runtime Function} int __gedf2 (double @var{a}, double @var{b})\n+@deftypefnx {Runtime Function} int __getf2 (long double @var{a}, long double @var{b})\n+These functions return a value greater than or equal to zero if\n+neither argument is NaN, and @var{a} is greater than or equal to\n+@var{b}.\n+@end deftypefn\n+\n+@deftypefn {Runtime Function} int __ltsf2 (float @var{a}, float @var{b})\n+@deftypefnx {Runtime Function} int __ltdf2 (double @var{a}, double @var{b})\n+@deftypefnx {Runtime Function} int __lttf2 (long double @var{a}, long double @var{b})\n+These functions return a value less than zero if neither argument is\n+NaN, and @var{a} is strictly less than @var{b}.\n+@end deftypefn\n+\n+@deftypefn {Runtime Function} int __lesf2 (float @var{a}, float @var{b})\n+@deftypefnx {Runtime Function} int __ledf2 (double @var{a}, double @var{b})\n+@deftypefnx {Runtime Function} int __letf2 (long double @var{a}, long double @var{b})\n+These functions return a value less than or equal to zero if neither\n+argument is NaN, and @var{a} is less than or equal to @var{b}.\n+@end deftypefn\n+\n+@deftypefn {Runtime Function} int __gtsf2 (float @var{a}, float @var{b})\n+@deftypefnx {Runtime Function} int __gtdf2 (double @var{a}, double @var{b})\n+@deftypefnx {Runtime Function} int __gttf2 (long double @var{a}, long double @var{b})\n+These functions return a value greater than zero if neither argument\n+is NaN, and @var{a} is strictly greater than @var{b}.\n+@end deftypefn\n+\n+@node Exception handling routines\n+@section Language-independent routines for exception handling\n+\n+document me!\n+\n+@example\n+  _Unwind_DeleteException\n+  _Unwind_Find_FDE\n+  _Unwind_ForcedUnwind\n+  _Unwind_GetGR\n+  _Unwind_GetIP\n+  _Unwind_GetLanguageSpecificData\n+  _Unwind_GetRegionStart\n+  _Unwind_GetTextRelBase\n+  _Unwind_GetDataRelBase\n+  _Unwind_RaiseException\n+  _Unwind_Resume\n+  _Unwind_SetGR\n+  _Unwind_SetIP\n+  _Unwind_FindEnclosingFunction\n+  _Unwind_SjLj_Register\n+  _Unwind_SjLj_Unregister\n+  _Unwind_SjLj_RaiseException\n+  _Unwind_SjLj_ForcedUnwind\n+  _Unwind_SjLj_Resume\n+  __deregister_frame\n+  __deregister_frame_info\n+  __deregister_frame_info_bases\n+  __register_frame\n+  __register_frame_info\n+  __register_frame_info_bases\n+  __register_frame_info_table\n+  __register_frame_info_table_bases\n+  __register_frame_table\n+@end example\n+\n+@node Miscellaneous routines\n+@section Miscellaneous runtime library routines\n+\n+document me!\n+\n+@example\n+  __clear_cache\n+@end example\n+\n+any others?"}]}