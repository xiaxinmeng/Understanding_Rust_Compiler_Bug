{"sha": "8ddae3488d9141bb94b8917e3c61c3e795833063", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRkYWUzNDg4ZDkxNDFiYjk0Yjg5MTdlM2M2MWMzZTc5NTgzMzA2Mw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-30T14:34:11Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-30T14:34:11Z"}, "message": "(significand_size): New function.\n\nFrom-SVN: r7387", "tree": {"sha": "d30eb18033636eb66546a5ee3a01ed00d24f2fce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d30eb18033636eb66546a5ee3a01ed00d24f2fce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ddae3488d9141bb94b8917e3c61c3e795833063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ddae3488d9141bb94b8917e3c61c3e795833063", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ddae3488d9141bb94b8917e3c61c3e795833063", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ddae3488d9141bb94b8917e3c61c3e795833063/comments", "author": null, "committer": null, "parents": [{"sha": "a48fb61b5bbb8ae2f821875a07d0ac8ceb334e02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a48fb61b5bbb8ae2f821875a07d0ac8ceb334e02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a48fb61b5bbb8ae2f821875a07d0ac8ceb334e02"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "49d88f77b55541ebf0a678d6dbe3bc751067f75a", "filename": "gcc/real.c", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddae3488d9141bb94b8917e3c61c3e795833063/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddae3488d9141bb94b8917e3c61c3e795833063/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=8ddae3488d9141bb94b8917e3c61c3e795833063", "patch": "@@ -5922,5 +5922,43 @@ esqrt (x, y)\n   emdnorm (sq, k, 0, exp, 64);\n   emovo (sq, y);\n }\n-\n #endif /* EMU_NON_COMPILE not defined */\n+\f\n+/* Return the binary precision of the significand for a given\n+   floating point mode.  The mode can hold an integer value\n+   that many bits wide, without losing any bits.  */\n+\n+int\n+significand_size (mode)\n+     enum machine_mode mode;\n+{\n+\n+switch (mode)\n+  {\n+  case SFmode:\n+    return 24;\n+\n+  case DFmode:\n+#if TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT\n+    return 53;\n+#else\n+#if TARGET_FLOAT_FORMAT == IBM_FLOAT_FORMAT\n+    return 56;\n+#else\n+#if TARGET_FLOAT_FORMAT == VAX_FLOAT_FORMAT\n+    return 56;\n+#else\n+    abort ();\n+#endif\n+#endif\n+#endif\n+\n+  case XFmode:\n+    return 64;\n+  case TFmode:\n+    return 113;\n+\n+  default:\n+    abort ();\n+  }\n+}"}]}