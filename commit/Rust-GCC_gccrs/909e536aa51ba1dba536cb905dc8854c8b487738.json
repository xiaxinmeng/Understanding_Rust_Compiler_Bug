{"sha": "909e536aa51ba1dba536cb905dc8854c8b487738", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA5ZTUzNmFhNTFiYTFkYmE1MzZjYjkwNWRjODg1NGM4YjQ4NzczOA==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-03-22T23:11:55Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-03-22T23:11:55Z"}, "message": "85th Cygnus<->FSF quick merge\n\nFrom-SVN: r11597", "tree": {"sha": "be761953f8502bf4503be31fb1298c410a2271e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be761953f8502bf4503be31fb1298c410a2271e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/909e536aa51ba1dba536cb905dc8854c8b487738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/909e536aa51ba1dba536cb905dc8854c8b487738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/909e536aa51ba1dba536cb905dc8854c8b487738", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/909e536aa51ba1dba536cb905dc8854c8b487738/comments", "author": null, "committer": null, "parents": [{"sha": "c7b1ed2b88ec0e8079c07ce759c73b83ded3b41c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7b1ed2b88ec0e8079c07ce759c73b83ded3b41c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7b1ed2b88ec0e8079c07ce759c73b83ded3b41c"}], "stats": {"total": 58, "additions": 46, "deletions": 12}, "files": [{"sha": "fd4720c7228ec086791ff6b3974069f39d01f160", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909e536aa51ba1dba536cb905dc8854c8b487738/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909e536aa51ba1dba536cb905dc8854c8b487738/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=909e536aa51ba1dba536cb905dc8854c8b487738", "patch": "@@ -1,3 +1,24 @@\n+Fri Mar 22 13:48:29 1996  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (tsubst, case TYPE_DECL): Set DECL_CONTEXT.\n+\n+\t* typeck.c (require_complete_type): Be sure to instantiate the\n+ \tMAIN_VARIANT of the type.\n+\n+\t* decl2.c (finish_file): Instantiate pending templates before\n+ \tprocessing static constructors and destructors.\n+\n+\t* pt.c (instantiate_decl): Don't instantiate functions at toplevel\n+ \tunless at_eof.\n+\n+Fri Mar 22 09:30:17 1996  Bob Manson  <manson@beauty.cygnus.com>\n+\n+\t* decl2.c (delete_sanity): If error_mark_node is passed\n+\tin as an expression, quit while we're ahead.\n+\n+\t* decl.c (grokdeclarator): Give an error message if `friend'\n+\tis combined with any storage class specifiers.\n+\n Wed Mar 20 14:51:55 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* parse.y (named_complex_class_head_sans_basetype): Don't crash on"}, {"sha": "10cf2a6504794cd8d415bf38aca1a9d6a22c895a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909e536aa51ba1dba536cb905dc8854c8b487738/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909e536aa51ba1dba536cb905dc8854c8b487738/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=909e536aa51ba1dba536cb905dc8854c8b487738", "patch": "@@ -8268,6 +8268,9 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, raises, attrli\n \terror (\"top-level declaration of `%s' specifies `auto'\", name);\n     }\n \n+  if (nclasses > 0 && friendp)\n+    error (\"storage class specifiers invalid in friend function declarations\");\n+\n   /* Now figure out the structure of the declarator proper.\n      Descend through it, creating more complex types, until we reach\n      the declared identifier (or NULL_TREE, in an absolute declarator).  */"}, {"sha": "8077b5b252cf02e8cb69702d8d77595d93cda075", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909e536aa51ba1dba536cb905dc8854c8b487738/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909e536aa51ba1dba536cb905dc8854c8b487738/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=909e536aa51ba1dba536cb905dc8854c8b487738", "patch": "@@ -1124,6 +1124,9 @@ delete_sanity (exp, size, doing_vec, use_global_delete)\n      this down as a NULL_TREE into build_vec_delete.  */\n   tree maxindex = NULL_TREE;\n \n+  if (exp == error_mark_node)\n+    return exp;\n+\n   if (current_template_parms)\n     {\n       t = build_min (DELETE_EXPR, void_type_node, exp, size);\n@@ -2822,17 +2825,23 @@ finish_file ()\n \n   start_time = get_run_time ();\n \n-  /* Push into C language context, because that's all\n-     we'll need here.  */\n-  push_lang_context (lang_name_c);\n-\n   /* Otherwise, GDB can get confused, because in only knows\n      about source for LINENO-1 lines.  */\n   lineno -= 1;\n \n   interface_unknown = 1;\n   interface_only = 0;\n \n+  for (fnname = pending_templates; fnname; fnname = TREE_CHAIN (fnname))\n+    {\n+      tree decl = TREE_VALUE (fnname);\n+      instantiate_decl (decl);\n+    }\n+\n+  /* Push into C language context, because that's all\n+     we'll need here.  */\n+  push_lang_context (lang_name_c);\n+\n #if 1\n   /* The reason for pushing garbage onto the global_binding_level is to\n      ensure that we can slice out _DECLs which pertain to virtual function\n@@ -3082,11 +3091,6 @@ finish_file ()\n   if (flag_handle_signatures)\n     walk_sigtables ((void (*)())0, finish_sigtable_vardecl);\n \n-  for (fnname = pending_templates; fnname; fnname = TREE_CHAIN (fnname))\n-    {\n-      tree decl = TREE_VALUE (fnname);\n-      instantiate_decl (decl);\n-    }\n   for (fnname = saved_inlines; fnname; fnname = TREE_CHAIN (fnname))\n     {\n       tree decl = TREE_VALUE (fnname);"}, {"sha": "5fedd5a94d0b3b22719393340800a0c9154782ac", "filename": "gcc/cp/gxxint.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909e536aa51ba1dba536cb905dc8854c8b487738/gcc%2Fcp%2Fgxxint.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909e536aa51ba1dba536cb905dc8854c8b487738/gcc%2Fcp%2Fgxxint.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fgxxint.texi?ref=909e536aa51ba1dba536cb905dc8854c8b487738", "patch": "@@ -1226,7 +1226,7 @@ stands.\n \n Only exact type matching or reference matching of throw types works when\n -fno-rtti is used.  Only works on a SPARC (like Suns), i386, arm,\n-rs6000, PowerPC, Alpha, mips, VAX, and m68k machines.  Partial support\n+rs6000, PowerPC, Alpha, mips, VAX, m68k and z8k machines.  Partial support\n is in for all other machines, but a stack unwinder called\n __unwind_function has to be written, and added to libgcc2 for them.  The\n new EH code doesn't rely upon the __unwind_function for C++ code,"}, {"sha": "f3307a1bb91f7326052f34285826c478daba8c0c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909e536aa51ba1dba536cb905dc8854c8b487738/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909e536aa51ba1dba536cb905dc8854c8b487738/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=909e536aa51ba1dba536cb905dc8854c8b487738", "patch": "@@ -1566,6 +1566,7 @@ tsubst (t, args, nargs, in_decl)\n       {\n \ttree r = copy_node (t);\n \tTREE_TYPE (r) = type;\n+\tDECL_CONTEXT (r) = current_class_type;\n \tset_nested_typename (r, current_class_name, DECL_NAME (r), type);\n \tTREE_CHAIN (r) = NULL_TREE;\n \treturn r;\n@@ -2935,7 +2936,12 @@ instantiate_decl (d)\n   if (! pattern_defined\n       || (TREE_CODE (d) == FUNCTION_DECL && ! DECL_INLINE (d)\n \t  && (! DECL_INTERFACE_KNOWN (d)\n-\t      || ! DECL_NOT_REALLY_EXTERN (d))))\n+\t      || ! DECL_NOT_REALLY_EXTERN (d)))\n+      /* Kludge: if we compile a constructor in the middle of processing a\n+         toplevel declaration, we blow away the declspecs in\n+         temp_decl_obstack when we call permanent_allocation in\n+         finish_function.  So don't compile it yet.  */\n+      || (TREE_CODE (d) == FUNCTION_DECL && ! nested && ! at_eof))\n     {\n       add_pending_template (d);\n       return d;"}, {"sha": "498f293c9c44122f117442efc74f8ff167570219", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909e536aa51ba1dba536cb905dc8854c8b487738/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909e536aa51ba1dba536cb905dc8854c8b487738/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=909e536aa51ba1dba536cb905dc8854c8b487738", "patch": "@@ -112,7 +112,7 @@ require_complete_type (value)\n \n   if (IS_AGGR_TYPE (type) && CLASSTYPE_TEMPLATE_INSTANTIATION (type))\n     {\n-      instantiate_class_template (type);\n+      instantiate_class_template (TYPE_MAIN_VARIANT (type));\n       if (TYPE_SIZE (type) != 0)\n \treturn value;\n     }"}]}