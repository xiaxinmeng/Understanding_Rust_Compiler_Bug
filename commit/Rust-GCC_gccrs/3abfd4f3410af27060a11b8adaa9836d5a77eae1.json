{"sha": "3abfd4f3410af27060a11b8adaa9836d5a77eae1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FiZmQ0ZjM0MTBhZjI3MDYwYTExYjhhZGFhOTgzNmQ1YTc3ZWFlMQ==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-02-21T11:07:55Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-02-21T11:56:20Z"}, "message": "amdgcn: Align VGPR pairs\n\nAligning the registers is not needed by the architecture, but doing so\nallows us to remove the requirement for bug-prone early-clobber\nconstraints from many split patterns (and avoid adding more in future).\n\n2020-02-21  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* config/gcn/gcn.c (gcn_hard_regno_mode_ok): Align VGPR pairs.\n\t* config/gcn/gcn-valu.md (addv64di3): Remove early-clobber.\n\t(addv64di3_exec): Likewise.\n\t(subv64di3): Likewise.\n\t(subv64di3_exec): Likewise.\n\t(addv64di3_zext): Likewise.\n\t(addv64di3_zext_exec): Likewise.\n\t(addv64di3_zext_dup): Likewise.\n\t(addv64di3_zext_dup_exec): Likewise.\n\t(addv64di3_zext_dup2): Likewise.\n\t(addv64di3_zext_dup2_exec): Likewise.\n\t(addv64di3_sext_dup2): Likewise.\n\t(addv64di3_sext_dup2_exec): Likewise.\n\t(<expander>v64di3): Likewise.\n\t(<expander>v64di3_exec): Likewise.\n\t(*<reduc_op>_dpp_shr_v64di): Likewise.\n\t(*plus_carry_dpp_shr_v64di): Likewise.\n\t* config/gcn/gcn.md (adddi3): Likewise.\n\t(addptrdi3): Likewise.\n\t(<expander>di3): Likewise.", "tree": {"sha": "8207446cffd4c3ec2a2b8b6ea7eaadeb72e5ebc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8207446cffd4c3ec2a2b8b6ea7eaadeb72e5ebc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3abfd4f3410af27060a11b8adaa9836d5a77eae1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3abfd4f3410af27060a11b8adaa9836d5a77eae1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3abfd4f3410af27060a11b8adaa9836d5a77eae1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3abfd4f3410af27060a11b8adaa9836d5a77eae1/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2291d1fd85744f26bf4943187266d28c3b89d200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2291d1fd85744f26bf4943187266d28c3b89d200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2291d1fd85744f26bf4943187266d28c3b89d200"}], "stats": {"total": 172, "additions": 98, "deletions": 74}, "files": [{"sha": "1845563d0bbb1b583d1df2ed4b05eb2a6c18a583", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3abfd4f3410af27060a11b8adaa9836d5a77eae1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3abfd4f3410af27060a11b8adaa9836d5a77eae1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3abfd4f3410af27060a11b8adaa9836d5a77eae1", "patch": "@@ -1,3 +1,26 @@\n+2020-02-21  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn.c (gcn_hard_regno_mode_ok): Align VGPR pairs.\n+\t* config/gcn/gcn-valu.md (addv64di3): Remove early-clobber.\n+\t(addv64di3_exec): Likewise.\n+\t(subv64di3): Likewise.\n+\t(subv64di3_exec): Likewise.\n+\t(addv64di3_zext): Likewise.\n+\t(addv64di3_zext_exec): Likewise.\n+\t(addv64di3_zext_dup): Likewise.\n+\t(addv64di3_zext_dup_exec): Likewise.\n+\t(addv64di3_zext_dup2): Likewise.\n+\t(addv64di3_zext_dup2_exec): Likewise.\n+\t(addv64di3_sext_dup2): Likewise.\n+\t(addv64di3_sext_dup2_exec): Likewise.\n+\t(<expander>v64di3): Likewise.\n+\t(<expander>v64di3_exec): Likewise.\n+\t(*<reduc_op>_dpp_shr_v64di): Likewise.\n+\t(*plus_carry_dpp_shr_v64di): Likewise.\n+\t* config/gcn/gcn.md (adddi3): Likewise.\n+\t(addptrdi3): Likewise.\n+\t(<expander>di3): Likewise.\n+\n 2020-02-21  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/gcn/gcn-valu.md (vec_seriesv64di): Use gen_vec_duplicatev64di."}, {"sha": "d5e6d0a625acd897b6f6882bf16eba37d1c8f678", "filename": "gcc/config/gcn/gcn-valu.md", "status": "modified", "additions": 49, "deletions": 52, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3abfd4f3410af27060a11b8adaa9836d5a77eae1/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3abfd4f3410af27060a11b8adaa9836d5a77eae1/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md?ref=3abfd4f3410af27060a11b8adaa9836d5a77eae1", "patch": "@@ -1171,10 +1171,10 @@\n    (set_attr \"length\" \"4,8,4,8\")])\n \n (define_insn_and_split \"addv64di3\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"   \"= &v,  &v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"   \"=  v\")\n \t(plus:V64DI\n-\t  (match_operand:V64DI 1 \"register_operand\" \"%vDb,vDb0\")\n-\t  (match_operand:V64DI 2 \"gcn_alu_operand\"  \"vDb0, vDb\")))\n+\t  (match_operand:V64DI 1 \"register_operand\" \"%vDb\")\n+\t  (match_operand:V64DI 2 \"gcn_alu_operand\"  \" vDb\")))\n    (clobber (reg:DI VCC_REG))]\n   \"\"\n   \"#\"\n@@ -1200,14 +1200,13 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"addv64di3_exec\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"\t     \"= &v,  &v, &v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"\t\t  \"=  v\")\n \t(vec_merge:V64DI\n \t  (plus:V64DI\n-\t    (match_operand:V64DI 1 \"register_operand\"\t     \"%vDb,vDb0,vDb\")\n-\t    (match_operand:V64DI 2 \"gcn_alu_operand\"\t     \"vDb0, vDb,vDb\"))\n-\t  (match_operand:V64DI 3 \"gcn_register_or_unspec_operand\"\n-\t\t\t\t\t\t\t     \"   U,   U,  0\")\n-\t  (match_operand:DI 4 \"gcn_exec_reg_operand\"\t     \"   e,   e,  e\")))\n+\t    (match_operand:V64DI 1 \"register_operand\"\t\t  \"%vDb\")\n+\t    (match_operand:V64DI 2 \"gcn_alu_operand\"\t\t  \" vDb\"))\n+\t  (match_operand:V64DI 3 \"gcn_register_or_unspec_operand\" \"  U0\")\n+\t  (match_operand:DI 4 \"gcn_exec_reg_operand\"\t\t  \"   e\")))\n    (clobber (reg:DI VCC_REG))]\n   \"\"\n   \"#\"\n@@ -1238,10 +1237,10 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"subv64di3\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"  \"=&v,  &v,  &v, &v\")\n-\t(minus:V64DI                                                 \n-\t  (match_operand:V64DI 1 \"gcn_alu_operand\" \"vDb,vDb0,   v, v0\")\n-\t  (match_operand:V64DI 2 \"gcn_alu_operand\" \" v0,   v,vDb0,vDb\")))\n+  [(set (match_operand:V64DI 0 \"register_operand\"  \"= v,  v\")\n+\t(minus:V64DI                                        \n+\t  (match_operand:V64DI 1 \"gcn_alu_operand\" \"vDb,  v\")\n+\t  (match_operand:V64DI 2 \"gcn_alu_operand\" \"  v,vDb\")))\n    (clobber (reg:DI VCC_REG))]\n   \"\"\n   \"#\"\n@@ -1267,14 +1266,13 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"subv64di3_exec\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"    \"= &v,   &v,   &v,  &v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"\t\t \"=  v,   v\")\n \t(vec_merge:V64DI                                                         \n \t  (minus:V64DI                                                           \n-\t    (match_operand:V64DI 1 \"gcn_alu_operand\" \"vSvB,vSvB0,    v,  v0\")\n-\t    (match_operand:V64DI 2 \"gcn_alu_operand\" \"  v0,    v,vSvB0,vSvB\"))\n-\t  (match_operand:V64DI 3 \"gcn_register_or_unspec_operand\"\n-\t\t\t\t\t\t     \"  U0,   U0,   U0,  U0\")\n-\t  (match_operand:DI 4 \"gcn_exec_reg_operand\" \"   e,    e,    e,   e\")))\n+\t    (match_operand:V64DI 1 \"gcn_alu_operand\"\t\t \"vSvB,   v\")\n+\t    (match_operand:V64DI 2 \"gcn_alu_operand\"\t\t \"   v,vSvB\"))\n+\t  (match_operand:V64DI 3 \"gcn_register_or_unspec_operand\" \" U0,  U0\")\n+\t  (match_operand:DI 4 \"gcn_exec_reg_operand\"\t\t \"   e,   e\")))\n    (clobber (reg:DI VCC_REG))]\n   \"register_operand (operands[1], VOIDmode)\n    || register_operand (operands[2], VOIDmode)\"\n@@ -1306,11 +1304,11 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"addv64di3_zext\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"    \"=&v, &v,  &v,  &v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"    \"= v,  v\")\n \t(plus:V64DI\n \t  (zero_extend:V64DI\n-\t    (match_operand:V64SI 1 \"gcn_alu_operand\" \"0vA,0vB,  vA,  vB\"))\n-\t  (match_operand:V64DI 2 \"gcn_alu_operand\"   \"vDb,vDA,0vDb,0vDA\")))\n+\t    (match_operand:V64SI 1 \"gcn_alu_operand\" \" vA, vB\"))\n+\t  (match_operand:V64DI 2 \"gcn_alu_operand\"   \"vDb,vDA\")))\n    (clobber (reg:DI VCC_REG))]\n   \"\"\n   \"#\"\n@@ -1334,15 +1332,14 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"addv64di3_zext_exec\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"\t \"=&v,  &v, &v,  &v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"\t\t  \"= v,  v\")\n \t(vec_merge:V64DI\n \t  (plus:V64DI\n \t    (zero_extend:V64DI\n-\t      (match_operand:V64SI 1 \"gcn_alu_operand\"\t \"0vA,  vA,0vB,  vB\"))\n-\t    (match_operand:V64DI 2 \"gcn_alu_operand\"\t \"vDb,0vDb,vDA,0vDA\"))\n-\t  (match_operand:V64DI 3 \"gcn_register_or_unspec_operand\"\n-\t\t\t\t\t\t\t \" U0,  U0, U0,  U0\")\n-\t  (match_operand:DI 4 \"gcn_exec_reg_operand\"\t \"  e,   e,  e,   e\")))\n+\t      (match_operand:V64SI 1 \"gcn_alu_operand\"\t\t  \" vA, vB\"))\n+\t    (match_operand:V64DI 2 \"gcn_alu_operand\"\t\t  \"vDb,vDA\"))\n+\t  (match_operand:V64DI 3 \"gcn_register_or_unspec_operand\" \" U0, U0\")\n+\t  (match_operand:DI 4 \"gcn_exec_reg_operand\"\t\t  \"  e,  e\")))\n    (clobber (reg:DI VCC_REG))]\n   \"\"\n   \"#\"\n@@ -1371,12 +1368,12 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"addv64di3_zext_dup\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"   \"= &v,  &v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"   \"= v,  v\")\n \t(plus:V64DI\n \t  (zero_extend:V64DI\n \t    (vec_duplicate:V64SI\n-\t      (match_operand:SI 1 \"gcn_alu_operand\" \" BSv, ASv\")))\n-\t  (match_operand:V64DI 2 \"gcn_alu_operand\"  \"vDA0,vDb0\")))\n+\t      (match_operand:SI 1 \"gcn_alu_operand\" \"BSv,ASv\")))\n+\t  (match_operand:V64DI 2 \"gcn_alu_operand\"  \"vDA,vDb\")))\n    (clobber (reg:DI VCC_REG))]\n   \"\"\n   \"#\"\n@@ -1400,15 +1397,15 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"addv64di3_zext_dup_exec\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"\t\t \"= &v,  &v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"\t\t  \"= v,  v\")\n \t(vec_merge:V64DI\n \t  (plus:V64DI\n \t    (zero_extend:V64DI\n \t      (vec_duplicate:V64SI\n-\t\t(match_operand:SI 1 \"gcn_alu_operand\"\t\t \" ASv, BSv\")))\n-\t    (match_operand:V64DI 2 \"gcn_alu_operand\"\t\t \"vDb0,vDA0\"))\n-\t  (match_operand:V64DI 3 \"gcn_register_or_unspec_operand\" \" U0,  U0\")\n-\t  (match_operand:DI 4 \"gcn_exec_reg_operand\"\t\t \"   e,   e\")))\n+\t\t(match_operand:SI 1 \"gcn_alu_operand\"\t\t  \"ASv,BSv\")))\n+\t    (match_operand:V64DI 2 \"gcn_alu_operand\"\t\t  \"vDb,vDA\"))\n+\t  (match_operand:V64DI 3 \"gcn_register_or_unspec_operand\" \" U0, U0\")\n+\t  (match_operand:DI 4 \"gcn_exec_reg_operand\"\t\t  \"  e,  e\")))\n    (clobber (reg:DI VCC_REG))]\n   \"\"\n   \"#\"\n@@ -1437,7 +1434,7 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"addv64di3_zext_dup2\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"\t\t     \"= &v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"\t\t     \"=  v\")\n \t(plus:V64DI\n \t  (zero_extend:V64DI (match_operand:V64SI 1 \"gcn_alu_operand\" \" vA\"))\n \t  (vec_duplicate:V64DI (match_operand:DI 2 \"gcn_alu_operand\" \"DbSv\"))))\n@@ -1463,7 +1460,7 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"addv64di3_zext_dup2_exec\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"\t\t       \"=&v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"\t\t       \"= v\")\n \t(vec_merge:V64DI\n \t  (plus:V64DI\n \t    (zero_extend:V64DI (match_operand:V64SI 1 \"gcn_alu_operand\"\n@@ -1500,7 +1497,7 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"addv64di3_sext_dup2\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"\t\t      \"=&v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"\t\t      \"= v\")\n \t(plus:V64DI\n \t  (sign_extend:V64DI (match_operand:V64SI 1 \"gcn_alu_operand\" \" vA\"))\n \t  (vec_duplicate:V64DI (match_operand:DI 2 \"gcn_alu_operand\"  \"BSv\"))))\n@@ -1528,7 +1525,7 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"addv64di3_sext_dup2_exec\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"\t\t       \"=&v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"\t\t       \"= v\")\n \t(vec_merge:V64DI\n \t  (plus:V64DI\n \t    (sign_extend:V64DI (match_operand:V64SI 1 \"gcn_alu_operand\"\n@@ -1935,10 +1932,10 @@\n    (set_attr \"length\" \"8,8\")])\n \n (define_insn_and_split \"<expander>v64di3\"\n-  [(set (match_operand:V64DI 0 \"gcn_valu_dst_operand\" \"=&v,RD\")\n+  [(set (match_operand:V64DI 0 \"gcn_valu_dst_operand\"\t    \"=  v,RD\")\n \t(bitop:V64DI\n-\t  (match_operand:V64DI 1 \"gcn_valu_src0_operand\"\t  \"%  v,RD\")\n-\t  (match_operand:V64DI 2 \"gcn_valu_src1com_operand\"\t  \"vSvB, v\")))]\n+\t  (match_operand:V64DI 1 \"gcn_valu_src0_operand\"    \"%  v,RD\")\n+\t  (match_operand:V64DI 2 \"gcn_valu_src1com_operand\" \"vSvB, v\")))]\n   \"\"\n   \"@\n    #\n@@ -1960,7 +1957,7 @@\n    (set_attr \"length\" \"16,8\")])\n \n (define_insn_and_split \"<expander>v64di3_exec\"\n-  [(set (match_operand:V64DI 0 \"gcn_valu_dst_operand\" \"=&v,RD\")\n+  [(set (match_operand:V64DI 0 \"gcn_valu_dst_operand\"\t\t  \"=  v,RD\")\n \t(vec_merge:V64DI\n \t  (bitop:V64DI\n \t    (match_operand:V64DI 1 \"gcn_valu_src0_operand\"\t  \"%  v,RD\")\n@@ -2999,11 +2996,11 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"*<reduc_op>_dpp_shr_v64di\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"   \"=&v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"   \"=v\")\n \t(unspec:V64DI\n-\t  [(match_operand:V64DI 1 \"register_operand\" \"v0\")\n-\t   (match_operand:V64DI 2 \"register_operand\" \"v0\")\n-\t   (match_operand:SI 3 \"const_int_operand\"    \"n\")]\n+\t  [(match_operand:V64DI 1 \"register_operand\" \"v\")\n+\t   (match_operand:V64DI 2 \"register_operand\" \"v\")\n+\t   (match_operand:SI 3 \"const_int_operand\"   \"n\")]\n \t  REDUC_2REG_UNSPEC))]\n   \"\"\n   \"#\"\n@@ -3065,11 +3062,11 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"*plus_carry_dpp_shr_v64di\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"   \"=&v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"   \"=v\")\n \t(unspec:V64DI\n-\t  [(match_operand:V64DI 1 \"register_operand\" \"v0\")\n-\t   (match_operand:V64DI 2 \"register_operand\" \"v0\")\n-\t   (match_operand:SI 3 \"const_int_operand\"    \"n\")]\n+\t  [(match_operand:V64DI 1 \"register_operand\" \"v\")\n+\t   (match_operand:V64DI 2 \"register_operand\" \"v\")\n+\t   (match_operand:SI 3 \"const_int_operand\"   \"n\")]\n \t  UNSPEC_PLUS_CARRY_DPP_SHR))\n    (clobber (reg:DI VCC_REG))]\n   \"\""}, {"sha": "531f47aff4c2a7415d3cb72870785619850cc7b9", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3abfd4f3410af27060a11b8adaa9836d5a77eae1/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3abfd4f3410af27060a11b8adaa9836d5a77eae1/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=3abfd4f3410af27060a11b8adaa9836d5a77eae1", "patch": "@@ -458,7 +458,15 @@ gcn_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n \t    || (!((regno - FIRST_SGPR_REG) & 1) && sgpr_2reg_mode_p (mode))\n \t    || (((regno - FIRST_SGPR_REG) & 3) == 0 && mode == TImode));\n   if (VGPR_REGNO_P (regno))\n-    return (vgpr_1reg_mode_p (mode) || vgpr_2reg_mode_p (mode)\n+    /* Vector instructions do not care about the alignment of register\n+       pairs, but where there is no 64-bit instruction, many of the\n+       define_split do not work if the input and output registers partially\n+       overlap.  We tried to fix this with early clobber and match\n+       constraints, but it was bug prone, added complexity, and conflicts\n+       with the 'U0' constraints on vec_merge.\n+       Therefore, we restrict ourselved to aligned registers.  */\n+    return (vgpr_1reg_mode_p (mode)\n+\t    || (!((regno - FIRST_VGPR_REG) & 1) && vgpr_2reg_mode_p (mode))\n \t    /* TImode is used by DImode compare_and_swap.  */\n \t    || mode == TImode);\n   return false;"}, {"sha": "b527d9a7a8bd626da6178eefb435e357c5e814dc", "filename": "gcc/config/gcn/gcn.md", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3abfd4f3410af27060a11b8adaa9836d5a77eae1/gcc%2Fconfig%2Fgcn%2Fgcn.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3abfd4f3410af27060a11b8adaa9836d5a77eae1/gcc%2Fconfig%2Fgcn%2Fgcn.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.md?ref=3abfd4f3410af27060a11b8adaa9836d5a77eae1", "patch": "@@ -1065,22 +1065,16 @@\n ; through some RTL optimisation passes, and means the CC reg we set isn't\n ; dependent on the constraint alternative (which doesn't seem to work well).\n \n-; There's an early clobber in the case where \"v[0:1]=v[1:2]+?\" but\n-; \"v[0:1]=v[0:1]+?\" is fine (as is \"v[1:2]=v[0:1]+?\", but that's trickier).\n-\n ; If v_addc_u32 is used to add with carry, a 32-bit literal constant cannot be\n ; used as an operand due to the read of VCC, so we restrict constants to the\n ; inlinable range for that alternative.\n \n (define_insn_and_split \"adddi3\"\n-  [(set (match_operand:DI 0 \"register_operand\"\t\t\n-\t\t\t\t\t      \"=&Sg,&Sg,&Sg,&Sg,&v,&v,&v,&v\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \n-\t\t\t\t\t      \"  Sg,  0,  0, Sg, v, 0, 0, v\")\n-\t\t (match_operand:DI 2 \"nonmemory_operand\"\n-\t\t\t\t\t      \"   0,SgB,  0,SgB, 0,vA, 0,vA\")))\n-   (clobber (match_scratch:BI 3\t\t      \"= cs, cs, cs, cs, X, X, X, X\"))\n-   (clobber (match_scratch:DI 4\t\t      \"=  X,  X,  X,  X,cV,cV,cV,cV\"))]\n+  [(set (match_operand:DI 0 \"register_operand\"\t\t \"=Sg, v\")\n+\t(plus:DI (match_operand:DI 1 \"register_operand\"  \" Sg, v\")\n+\t\t (match_operand:DI 2 \"nonmemory_operand\" \"SgB,vA\")))\n+   (clobber (match_scratch:BI 3\t\t\t\t \"=cs, X\"))\n+   (clobber (match_scratch:DI 4\t\t\t\t \"= X,cV\"))]\n   \"\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -1109,7 +1103,7 @@\n \t\t  cc));\n     DONE;\n   }\n-  [(set_attr \"type\" \"mult,mult,mult,mult,vmult,vmult,vmult,vmult\")\n+  [(set_attr \"type\" \"mult,vmult\")\n    (set_attr \"length\" \"8\")])\n \n (define_expand \"adddi3_scc\"\n@@ -1196,11 +1190,14 @@\n ; for this, so we use a custom VOP3 add with CC_SAVE_REG as a temp.\n ; Note that it is not safe to save/clobber/restore SCC because doing so will\n ; break data-flow analysis, so this must use vector registers.\n+;\n+; The \"v0\" should be just \"v\", but somehow the \"0\" helps LRA not loop forever\n+; on testcase pr54713-2.c with -O0. It's only an optimization hint anyway.\n \n (define_insn \"addptrdi3\"\n-  [(set (match_operand:DI 0 \"register_operand\"\t\t \"= &v\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\"\t \"  v0\")\n-\t\t (match_operand:DI 2 \"nonmemory_operand\" \"vDA0\")))]\n+  [(set (match_operand:DI 0 \"register_operand\"\t\t \"= v\")\n+\t(plus:DI (match_operand:DI 1 \"register_operand\"\t \" v0\")\n+\t\t (match_operand:DI 2 \"nonmemory_operand\" \"vDA\")))]\n   \"\"\n   {\n     rtx new_operands[4] = { operands[0], operands[1], operands[2],\n@@ -1470,15 +1467,14 @@\n (define_code_iterator vec_and_scalar64_com [and ior xor])\n \n (define_insn_and_split \"<expander>di3\"\n-   [(set (match_operand:DI 0 \"register_operand\"  \"= Sg,   &v,   &v\")\n+   [(set (match_operand:DI 0 \"register_operand\"  \"= Sg,    v\")\n \t (vec_and_scalar64_com:DI\n-\t  (match_operand:DI 1 \"gcn_alu_operand\"  \"%SgA,vSvDB,vSvDB\")\n-\t   (match_operand:DI 2 \"gcn_alu_operand\" \" SgC,    v,    0\")))\n-   (clobber (match_scratch:BI 3\t\t\t \"= cs,    X,    X\"))]\n+\t  (match_operand:DI 1 \"gcn_alu_operand\"  \"%SgA,vSvDB\")\n+\t   (match_operand:DI 2 \"gcn_alu_operand\" \" SgC,    v\")))\n+   (clobber (match_scratch:BI 3\t\t\t \"= cs,    X\"))]\n   \"\"\n   \"@\n    s_<mnemonic>0\\t%0, %1, %2\n-   #\n    #\"\n   \"reload_completed && gcn_vgpr_register_operand (operands[0], DImode)\"\n   [(parallel [(set (match_dup 4)\n@@ -1495,7 +1491,7 @@\n     operands[8] = gcn_operand_part (DImode, operands[1], 1);\n     operands[9] = gcn_operand_part (DImode, operands[2], 1);\n   }\n-  [(set_attr \"type\" \"sop2,vop2,vop2\")\n+  [(set_attr \"type\" \"sop2,vop2\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"<expander>di3\""}]}