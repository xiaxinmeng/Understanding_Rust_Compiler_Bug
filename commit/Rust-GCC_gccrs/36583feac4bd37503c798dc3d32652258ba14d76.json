{"sha": "36583feac4bd37503c798dc3d32652258ba14d76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY1ODNmZWFjNGJkMzc1MDNjNzk4ZGMzZDMyNjUyMjU4YmExNGQ3Ng==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@freesoft.cz", "date": "1999-10-01T01:22:24Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-10-01T01:22:24Z"}, "message": "Jan Hubicka  <hubicka@freesoft.cz>\n\n        * i386.c (ix86_expand_int_movcc): Convert LEU and GTU comparisons\n        to LTU and GEU.  Handle more cases using sbb.\n\nFrom-SVN: r29743", "tree": {"sha": "1a201cfa5751bcf37231d07b076c2ada52393145", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a201cfa5751bcf37231d07b076c2ada52393145"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36583feac4bd37503c798dc3d32652258ba14d76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36583feac4bd37503c798dc3d32652258ba14d76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36583feac4bd37503c798dc3d32652258ba14d76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36583feac4bd37503c798dc3d32652258ba14d76/comments", "author": null, "committer": null, "parents": [{"sha": "ca285e0794fc71079acf77d743b44f4a7a5aa12a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca285e0794fc71079acf77d743b44f4a7a5aa12a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca285e0794fc71079acf77d743b44f4a7a5aa12a"}], "stats": {"total": 103, "additions": 85, "deletions": 18}, "files": [{"sha": "2a610398a9cf71eb445d43a5b4b38e45bf0721f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36583feac4bd37503c798dc3d32652258ba14d76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36583feac4bd37503c798dc3d32652258ba14d76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36583feac4bd37503c798dc3d32652258ba14d76", "patch": "@@ -1,3 +1,8 @@\n+Thu Sep 30 18:21:30 1999  Jan Hubicka  <hubicka@freesoft.cz>\n+\n+\t* i386.c (ix86_expand_int_movcc): Convert LEU and GTU comparisons\n+\tto LTU and GEU.  Handle more cases using sbb.\n+\n Thu Sep 30 18:18:39 1999  Jan Hubicka  <hubicka@freesoft.cz>\n \n \t* i386.md (truncatexfdf splitters): Do not use subreg."}, {"sha": "34a68a78dd51b5c02028ff1a1295c5ded869866f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 80, "deletions": 18, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36583feac4bd37503c798dc3d32652258ba14d76/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36583feac4bd37503c798dc3d32652258ba14d76/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=36583feac4bd37503c798dc3d32652258ba14d76", "patch": "@@ -4288,6 +4288,23 @@ ix86_expand_int_movcc (operands)\n   enum rtx_code code = GET_CODE (operands[1]), compare_code;\n   rtx compare_seq, compare_op;\n \n+  /* When the compare code is not LTU or GEU, we can not use sbbl case.\n+     In case comparsion is done with immediate, we can convert it to LTU or\n+     GEU by altering the integer.  */\n+\n+  if ((code == LEU || code == GTU)\n+      && GET_CODE (ix86_compare_op1) == CONST_INT\n+      && GET_MODE (operands[0]) != HImode\n+      && (unsigned int)INTVAL (ix86_compare_op1) != 0xffffffff\n+      && GET_CODE (operands[2]) == CONST_INT \n+      && GET_CODE (operands[3]) == CONST_INT)\n+    {\n+      if (code == LEU)\n+\tcode = LTU;\n+      else\n+\tcode = GEU;\n+      ix86_compare_op1 = GEN_INT (INTVAL (ix86_compare_op1) + 1);\n+    }\n   start_sequence ();\n   compare_op = ix86_expand_compare (code, code == EQ || code == NE);\n   compare_seq = gen_sequence ();\n@@ -4307,36 +4324,81 @@ ix86_expand_int_movcc (operands)\n       HOST_WIDE_INT cf = INTVAL (operands[3]);\n       HOST_WIDE_INT diff;\n \n-      /* Special cases: */\n-      if (ct == 0)\n+      if (compare_code == LTU || compare_code == GEU)\n \t{\n-\t  ct = cf;\n-\t  cf = 0;\n-\t  compare_code = reverse_condition (compare_code);\n-\t  code = reverse_condition (code);\n-\t}\n-      if (cf == 0 && ct == -1 && (compare_code == LTU || compare_code == GEU))\n-\t{\n-\t  /*\n-\t   * xorl dest,dest\n-\t   * cmpl op0,op1\n-\t   * sbbl dest,dest\n-\t   *\n-\t   * Size 6.\n-\t   */\n \n \t  /* Detect overlap between destination and compare sources.  */\n \t  rtx tmp = out;\n \n+\t  /* To simplify rest of code, restrict to the GEU case. */\n+\t  if (compare_code == LTU)\n+\t    {\n+\t      int tmp = ct;\n+\t      ct = cf;\n+\t      cf = tmp;\n+\t      compare_code = reverse_condition (compare_code);\n+\t      code = reverse_condition (code);\n+\t    }\n+\t  diff = ct - cf;\n+\n \t  if (reg_overlap_mentioned_p (out, ix86_compare_op0)\n \t      || reg_overlap_mentioned_p (out, ix86_compare_op0))\n \t    tmp = gen_reg_rtx (SImode);\n \n \t  emit_insn (compare_seq);\n \t  emit_insn (gen_x86_movsicc_0_m1 (tmp));\n \n-\t  if (compare_code == GEU)\n-\t    emit_insn (gen_one_cmplsi2 (tmp, tmp));\n+\t  if (diff == 1)\n+\t    {\n+\t      /*\n+\t       * cmpl op0,op1\n+\t       * sbbl dest,dest\n+\t       * [addl dest, ct]\n+\t       *\n+\t       * Size 5 - 8.\n+\t       */\n+\t      if (ct)\n+\t        emit_insn (gen_addsi3 (out, out, GEN_INT (ct)));\n+\t    }\n+\t  else if (cf == -1)\n+\t    {\n+\t      /*\n+\t       * cmpl op0,op1\n+\t       * sbbl dest,dest\n+\t       * orl $ct, dest\n+\t       *\n+\t       * Size 8.\n+\t       */\n+\t      emit_insn (gen_iorsi3 (out, out, GEN_INT (ct)));\n+\t    }\n+\t  else if (diff == -1 && ct)\n+\t    {\n+\t      /*\n+\t       * cmpl op0,op1\n+\t       * sbbl dest,dest\n+\t       * xorl $-1, dest\n+\t       * [addl dest, cf]\n+\t       *\n+\t       * Size 8 - 11.\n+\t       */\n+\t      emit_insn (gen_one_cmplsi2 (tmp, tmp));\n+\t      if (cf)\n+\t        emit_insn (gen_addsi3 (out, out, GEN_INT (cf)));\n+\t    }\n+\t  else\n+\t    {\n+\t      /*\n+\t       * cmpl op0,op1\n+\t       * sbbl dest,dest\n+\t       * andl cf - ct, dest\n+\t       * [addl dest, ct]\n+\t       *\n+\t       * Size 8 - 11.\n+\t       */\n+\t      emit_insn (gen_andsi3 (out, out, GEN_INT (cf - ct)));\n+\t      if (ct)\n+\t        emit_insn (gen_addsi3 (out, out, GEN_INT (ct)));\n+\t    }\n \n \t  if (tmp != out)\n \t    emit_move_insn (out, tmp);"}]}