{"sha": "3cbc7af037de005ee1c45a07643e153375343cb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NiYzdhZjAzN2RlMDA1ZWUxYzQ1YTA3NjQzZTE1MzM3NTM0M2NiNA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2005-12-19T00:56:05Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2005-12-19T00:56:05Z"}, "message": "c++config: Add in revised namespace associations.\n\n2005-12-18  Benjamin Kosnik  <bkoz@redhat.com>\n\t\n\t* include/bits/c++config: Add in revised namespace associations.\n\t_GLIBCXX_BEGIN_NAMESPACE: New macro.\n\t_GLIBCXX_END_NAMESPACE: Same.\n\t_GLIBCXX_BEGIN_NESTED_NAMESPACE: Same.\n\t_GLIBCXX_END_NESTED_NAMESPACE: Same.\n\t* acinclude.m4 (GLIBCXX_ENABLE_SYMVERS]): Add gnu-versioned-namespace.\n\t* configure: Regenerated.\n\t* config.h.in: Same.\n\t* config/abi/pre/gnu-versioned-namespace.ver: New.\n\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.7): Add exports for nested\n\tdebug mode items. \n\t* include/Makefile.am (${host_builddir}/c++config.h): Fill in\n\tvalues for __GLIBCXX__ and _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION.\n\t* include/Makefile.in: Regnerate.\n\t* src/compatibility.cc: Alias new, nested definitions to exported\n\tsymbols from non-nested __gnu_debug.\n\t* src/Makefile.am:  Add in ENABLE_SYMVERS_GNU_NAMESPACE.\n\t* src/Makefile.in: Regenerate.\n\t\n\t* docs/html/debug_mode.html: Revise for nested design.\n\t* docs/html/debug.html: Use debug qualifications instead of\n\t__gnu_debug.\n\t* docs/html/configopts.html: Revise documentation for\n\t--enable-symvers.\n\t\n\t* include/debug/formatter: Simplify namespace qualifications for\n\tcurrent, nested-only reality. Add top-level namespace alias,\n\tnamespace debug, for debug-mode containers.\n\t* include/debug/safe_iterator.h: Same.\t\n\t* include/debug/set.h: Same.\n\t* include/debug/hash_multimap.h: Same.\n\t* include/debug/hash_set.h: Same.\n\t* include/debug/bitset\n\t* include/debug/safe_sequence.h: Same.\n\t* include/debug/multiset.h: Same.\n\t* include/debug/safe_base.h: Same.\n\t* include/debug/functions.h: Same.\n\t* include/debug/safe_iterator.tcc\n\t* include/debug/hash_multiset.h: Same.\n\t* include/debug/vector\n\t* include/debug/map.h: Same.\n\t* include/debug/deque\n\t* include/debug/hash_map.h: Same.\n\t* include/debug/string\n\t* include/debug/macros.h: Same.\n\t* include/debug/list\n\t* include/debug/debug.h: Same.\n\t* include/debug/multimap.h: Same.\t\n\t* src/debug.cc: Same.\n\t* testsuite/23_containers/vector/invalidation/1.cc: Cleanups.\n\t* testsuite/23_containers/vector/invalidation/2.cc: Same.\n\t* testsuite/23_containers/vector/invalidation/3.cc: Same.\n\t* testsuite/23_containers/vector/invalidation/4.cc: Same.\n\t* testsuite/23_containers/deque/invalidation/1.cc: Same.\n\t* testsuite/23_containers/deque/invalidation/2.cc: Same.\n\t* testsuite/23_containers/deque/invalidation/3.cc: Same.\n\t* testsuite/23_containers/deque/invalidation/4.cc: Same.\n\t* testsuite/23_containers/multiset/invalidation/1.cc: Same.\n\t* testsuite/23_containers/multiset/invalidation/2.cc: Same.\n\t* testsuite/23_containers/multimap/invalidation/1.cc: Same.\n\t* testsuite/23_containers/multimap/invalidation/2.cc: Same.\n\t* testsuite/23_containers/bitset/invalidation/1.cc: Same.\n\t* testsuite/23_containers/bitset/cons/16020.cc: Same.\n\t* testsuite/23_containers/bitset/operations/13838.cc: Same.\n\t* testsuite/23_containers/list/invalidation/1.cc: Same.\n\t* testsuite/23_containers/list/invalidation/2.cc: Same.\n\t* testsuite/23_containers/list/invalidation/3.cc: Same.\n\t* testsuite/23_containers/list/invalidation/4.cc: Same.\n\t* testsuite/23_containers/set/invalidation/1.cc: Same.\n\t* testsuite/23_containers/set/invalidation/2.cc: Same.\n\t* testsuite/23_containers/map/invalidation/1.cc: Same.\n\t* testsuite/23_containers/map/invalidation/2.cc: Same.\n\t* testsuite/23_containers/map/insert/16813.cc: Same.\n\t\n\t* include/bits/basic_ios.h: Use _GLIBCXX_BEGIN_NAMESPACE(std) and\n\tfriends.\t\n\t* include/bits/stl_list.h: Same.\n\t* include/bits/stl_map.h: Same.\n\t* include/bits/stl_algobase.h: Same.\n\t* include/bits/localefwd.h: Same.\n\t* include/bits/valarray_array.tcc: Same.\n\t* include/bits/valarray_after.h: Same.\n\t* include/bits/gslice_array.h: Same.\n\t* include/bits/stl_queue.h: Same.\n\t* include/bits/gslice.h: Same.\n\t* include/bits/locale_facets.tcc: Same.\n\t* include/bits/locale_classes.h: Same.\n\t* include/bits/stl_set.h: Same.\n\t* include/bits/locale_facets.h: Same.\n\t* include/bits/stl_stack.h: Same.\n\t* include/bits/stl_iterator_base_types.h: Same.\n\t* include/bits/stl_heap.h: Same.\n\t* include/bits/indirect_array.h: Same.\n\t* include/bits/atomicity.h: Same.\n\t* include/bits/stream_iterator.h: Same.\n\t* include/bits/concurrence.h: Same.\n\t* include/bits/basic_string.h: Same.\n\t* include/bits/stl_multimap.h: Same.\n\t* include/bits/stl_pair.h: Same.\n\t* include/bits/basic_ios.tcc: Same.\n\t* include/bits/stl_raw_storage_iter.h: Same.\n\t* include/bits/stl_vector.h: Same.\n\t* include/bits/stl_numeric.h: Same.\n\t* include/bits/ios_base.h: Same.\n\t* include/bits/stl_deque.h: Same.\n\t* include/bits/istream.tcc: Same.\n\t* include/bits/postypes.h: Same.\n\t* include/bits/stl_multiset.h: Same.\n\t* include/bits/mask_array.h: Same.\n\t* include/bits/stl_uninitialized.h: Same.\n\t* include/bits/ostream.tcc: Same.\n\t* include/bits/slice_array.h: Same.\n\t* include/bits/boost_concept_check.h: Same.\n\t* include/bits/sstream.tcc: Same.\n\t* include/bits/stl_iterator_base_funcs.h: Same.\n\t* include/bits/char_traits.h: Same.\n\t* include/bits/stl_algo.h: Same.\n\t* include/bits/stringfwd.h: Same.\n\t* include/bits/c++config\n\t* include/bits/stl_iterator.h: Same.\n\t* include/bits/valarray_array.h: Same.\n\t* include/bits/stl_tempbuf.h: Same.\n\t* include/bits/vector.tcc: Same.\n\t* include/bits/deque.tcc: Same.\n\t* include/bits/stl_bvector.h: Same.\n\t* include/bits/basic_string.tcc: Same.\n\t* include/bits/list.tcc: Same.\n\t* include/bits/streambuf_iterator.h: Same.\n\t* include/bits/valarray_before.h: Same.\n\t* include/bits/stl_construct.h: Same.\n\t* include/bits/stl_function.h: Same.\n\t* include/bits/cpp_type_traits.h: Same.\n\t* include/bits/streambuf.tcc: Same.\n\t* include/bits/allocator.h: Same.\n\t* include/bits/stl_tree.h: Same.\n\t* include/bits/fstream.tcc: Same.\n\t* include/bits/stl_relops.h: Same.\n\t* include/bits/functexcept.h: Same.\n\t* include/std/std_valarray.h: Same.\n\t* include/std/std_iostream.h: Same.\n\t* include/std/std_streambuf.h: Same.\n\t* include/std/std_bitset.h: Same.\n\t* include/std/std_iosfwd.h: Same.\n\t* include/std/std_iomanip.h: Same.\n\t* include/std/std_fstream.h: Same.\n\t* include/std/std_limits.h: Same.\n\t* include/std/std_stdexcept.h: Same.\n\t* include/std/std_istream.h: Same.\n\t* include/std/std_complex.h: Same.\n\t* include/std/std_memory.h: Same.\n\t* include/std/std_ostream.h: Same.\n\t* include/std/std_sstream.h: Same.\n\t* include/c_std/std_csignal.h: Same.\n\t* include/c_std/std_cstdlib.h: Same.\n\t* include/c_std/std_cstdio.h: Same.\n\t* include/c_std/std_cstdarg.h: Same.\n\t* include/c_std/std_cctype.h: Same.\n\t* include/c_std/std_cmath.h: Same.\n\t* include/c_std/std_ctime.h: Same.\n\t* include/c_std/std_clocale.h: Same.\n\t* include/c_std/std_csetjmp.h: Same.\n\t* include/c_std/std_cwchar.h: Same.\n\t* include/c_std/std_cstring.h: Same.\n\t* include/c_std/std_cstddef.h: Same.\n\t* include/c_std/std_cwctype.h: Same.\n\t* include/backward/iterator.h: Same.\n\t* include/backward/set.h: Same.\n\t* include/backward/hashtable.h: Same.\n\t* include/backward/fstream.h: Same.\n\t* include/backward/tempbuf.h: Same.\n\t* include/backward/istream.h: Same.\n\t* include/backward/bvector.h: Same.\n\t* include/backward/stack.h: Same.\n\t* include/backward/rope.h: Same.\n\t* include/backward/complex.h: Same.\n\t* include/backward/ostream.h: Same.\n\t* include/backward/heap.h: Same.\n\t* include/backward/iostream.h: Same.\n\t* include/backward/function.h: Same.\n\t* include/backward/multimap.h: Same.\n\t* include/backward/pair.h: Same.\n\t* include/backward/stream.h: Same.\n\t* include/backward/iomanip.h: Same.\n\t* include/backward/strstream\n\t* include/backward/slist.h: Same.\n\t* include/backward/tree.h: Same.\n\t* include/backward/vector.h: Same.\n\t* include/backward/deque.h: Same.\n\t* include/backward/multiset.h: Same.\n\t* include/backward/list.h: Same.\n\t* include/backward/map.h: Same.\n\t* include/backward/algobase.h: Same.\n\t* include/backward/hash_map.h: Same.\n\t* include/backward/algo.h: Same.\n\t* include/backward/queue.h: Same.\n\t* include/backward/streambuf.h: Same.\n\t* src/allocator-inst.cc: Same.\n\t* src/complex_io.cc: Same.\n\t* src/localename.cc: Same.\n\t* src/limits.cc: Same.\n\t* src/ios_failure.cc: Same.\n\t* src/locale-misc-inst.cc: Same.\n\t* src/streambuf-inst.cc: Same.\n\t* src/misc-inst.cc: Same.\n\t* src/concept-inst.cc: Same.\n\t* src/ios_locale.cc: Same.\n\t* src/pool_allocator.cc: Same.\n\t* src/fstream-inst.cc: Same.\n\t* src/istream-inst.cc: Same.\n\t* src/string-inst.cc: Same.\n\t* src/locale_init.cc: Same.\n\t* src/ctype.cc: Same.\n\t* src/strstream.cc: Same.\n\t* src/ostream-inst.cc: Same.\n\t* src/functexcept.cc: Same.\n\t* src/streambuf.cc: Same.\n\t* src/sstream-inst.cc: Same.\n\t* src/ios.cc: Same.\n\t* src/valarray-inst.cc: Same.\n\t* src/locale.cc: Same.\n\t* src/tree.cc: Same.\n\t* src/stdexcept.cc: Same.\n\t* src/istream.cc: Same.\n\t* src/compatibility.cc: Same.\n\t* src/locale-inst.cc: Same.\n\t* src/globals_io.cc: Same.\n\t* src/list.cc: Same.\n\t* src/ios_init.cc: Same.\n\t* src/locale_facets.cc: Same.\n\t* src/codecvt.cc: Same.\n\n\t* include/tr1/unordered_map: Use _GLIBCXX_BEGIN_NAMESPACE(tr1).\n\t* include/tr1/boost_shared_ptr.h: Same.\n\t* include/tr1/tuple\n\t* include/tr1/hashtable\n\t* include/tr1/type_traits_fwd.h: Same.\n\t* include/tr1/unordered_set\n\t* include/tr1/functional\n\t* include/tr1/ref_fwd.h: Same.\n\t* include/tr1/utility\n\t* include/tr1/type_traits\n\t* include/tr1/array\n\n\t* include/ext/hashtable.h: Use _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx).\n\t* include/ext/typelist.h: Same.\n\t* include/ext/hash_map: Same.\n\t* include/ext/rc_string_base.h: Same.\n\t* include/ext/pool_allocator.h: Same.\n\t* include/ext/iterator: Same.\n\t* include/ext/rb_tree: Same.\n\t* include/ext/numeric: Same.\n\t* include/ext/vstring.tcc: Same.\n\t* include/ext/sso_string_base.h: Same.\n\t* include/ext/stdio_filebuf.h: Same.\n\t* include/ext/algorithm: Same.\n\t* include/ext/codecvt_specializations.h: Same.\n\t* include/ext/new_allocator.h: Same.\n\t* include/ext/array_allocator.h: Same.\n\t* include/ext/vstring_util.h: Same.\n\t* include/ext/vstring_fwd.h: Same.\n\t* include/ext/mt_allocator.h: Same.\n\t* include/ext/debug_allocator.h: Same.\n\t* include/ext/slist: Same.\n\t* include/ext/stdio_sync_filebuf.h: Same.\n\t* include/ext/hash_fun.h: Same.\n\t* include/ext/malloc_allocator.h: Same.\n\t* include/ext/functional: Same.\n\t* include/ext/bitmap_allocator.h: Same.\n\t* include/ext/pod_char_traits.h: Same.\n\t* include/ext/vstring.h: Same.\n\t* include/ext/ropeimpl.h: Same.\n\t* include/ext/hash_set: Same.\n\t* include/ext/memory: Same.\n\t* include/ext/rope: Same.\n\t* include/bits/boost_concept_check.h: Same.\n\t* include/bits/stl_iterator.h: Same.\n\t* include/bits/char_traits.h: Same.\n\t* include/bits/cpp_type_traits.h: Same.\n\t* include/bits/concurrence.h: Same.\n\t* include/bits/atomicity.h: Same.\n\t* config/locale/gnu/numeric_members.cc: Same.\n\t* config/locale/gnu/collate_members.cc: Same.\n\t* config/locale/gnu/ctype_members.cc: Same.\n\t* config/locale/gnu/c_locale.cc: Same.\n\t* config/locale/gnu/codecvt_members.cc: Same.\n\t* config/locale/gnu/messages_members.cc: Same.\n\t* config/locale/gnu/c_locale.h: Same.\n\t* config/locale/gnu/monetary_members.cc: Same.\n\t* config/locale/gnu/time_members.cc: Same.\n\t* config/locale/ieee_1003.1-2001/c_locale.h: Same.\n\t* config/locale/generic/numeric_members.cc: Same.\n\t* config/locale/generic/collate_members.cc: Same.\n\t* config/locale/generic/ctype_members.cc: Same.\n\t* config/locale/generic/c_locale.cc: Same.\n\t* config/locale/generic/codecvt_members.cc: Same.\n\t* config/locale/generic/messages_members.cc: Same.\n\t* config/locale/generic/c_locale.h: Same.\n\t* config/locale/generic/monetary_members.cc: Same.\n\t* config/locale/generic/time_members.cc: Same.\n\t* config/os/aix/atomicity.h: Same.\n\t* config/os/irix/atomicity.h: Same.\n\t* config/cpu/powerpc/atomicity.h: Same.\n\t* config/cpu/cris/atomicity.h: Same.\n\t* config/cpu/ia64/atomicity.h: Same.\n\t* config/cpu/alpha/atomicity.h: Same.\n\t* config/cpu/m68k/atomicity.h: Same.\n\t* config/cpu/hppa/atomicity.h: Same.\n\t* config/cpu/mips/atomicity.h: Same.\n\t* config/cpu/sparc/atomicity.h: Same.\n\t* config/cpu/i386/atomicity.h: Same.\n\t* config/cpu/i486/atomicity.h: Same.\n\t* config/cpu/sh/atomicity.h: Same.\n\t* config/cpu/generic/atomicity.h: Same.\n\t* config/cpu/s390/atomicity.h: Same.\n\t* config/io/c_io_stdio.h: Same.\n\t* config/io/basic_file_stdio.cc: Same.\n\t* config/io/basic_file_stdio.h: Same.\t\n\t* src/misc-inst.cc: Same.\n\t* src/concept-inst.cc: Same.\n\t* src/ext-inst.cc: Same.\n\t* src/string-inst.cc: Same.\n\t* src/pool_allocator.cc: Same.\n\t* src/bitmap_allocator.cc: Same.\n\t* src/mt_allocator.cc: Same.\n\t* libsupc++/exception: Same.\n\t* libsupc++/vterminate.cc: Same.\n\t* testsuite/ext/hash_map/1.cc: Explicitly qualify __gnu_cxx::hash_map.\n\t* testsuite/ext/hash_map/14648.cc: Same.\t\n\n\t* libsupc++/eh_alloc.cc: Correct comment line spacing.\n\nFrom-SVN: r108775", "tree": {"sha": "827ba3eb885e93b2a058124da8547cb937b19a27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/827ba3eb885e93b2a058124da8547cb937b19a27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cbc7af037de005ee1c45a07643e153375343cb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cbc7af037de005ee1c45a07643e153375343cb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cbc7af037de005ee1c45a07643e153375343cb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cbc7af037de005ee1c45a07643e153375343cb4/comments", "author": null, "committer": null, "parents": [{"sha": "402840fd9b0ccfd8cbc0f638afe98509f925600d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/402840fd9b0ccfd8cbc0f638afe98509f925600d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/402840fd9b0ccfd8cbc0f638afe98509f925600d"}], "stats": {"total": 3563, "additions": 2234, "deletions": 1329}, "files": [{"sha": "90bfc9f195ab5fdc5f6102c29895e1525ac1c7a6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,3 +1,336 @@\n+2005-12-18  Benjamin Kosnik  <bkoz@redhat.com>\n+\t\n+\t* include/bits/c++config: Add in revised namespace associations.\n+\t_GLIBCXX_BEGIN_NAMESPACE: New macro.\n+\t_GLIBCXX_END_NAMESPACE: Same.\n+\t_GLIBCXX_BEGIN_NESTED_NAMESPACE: Same.\n+\t_GLIBCXX_END_NESTED_NAMESPACE: Same.\n+\t* acinclude.m4 (GLIBCXX_ENABLE_SYMVERS]): Add gnu-versioned-namespace.\n+\t* configure: Regenerated.\n+\t* config.h.in: Same.\n+\t* config/abi/pre/gnu-versioned-namespace.ver: New.\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.7): Add exports for nested\n+\tdebug mode items. \n+\t* include/Makefile.am (${host_builddir}/c++config.h): Fill in\n+\tvalues for __GLIBCXX__ and _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION.\n+\t* include/Makefile.in: Regnerate.\n+\t* src/compatibility.cc: Alias new, nested definitions to exported\n+\tsymbols from non-nested __gnu_debug.\n+\t* src/Makefile.am:  Add in ENABLE_SYMVERS_GNU_NAMESPACE.\n+\t* src/Makefile.in: Regenerate.\n+\t\n+\t* docs/html/debug_mode.html: Revise for nested design.\n+\t* docs/html/debug.html: Use debug qualifications instead of\n+\t__gnu_debug.\n+\t* docs/html/configopts.html: Revise documentation for\n+\t--enable-symvers.\n+\t\n+\t* include/debug/formatter: Simplify namespace qualifications for\n+\tcurrent, nested-only reality. Add top-level namespace alias,\n+\tnamespace debug, for debug-mode containers.\n+\t* include/debug/safe_iterator.h: Same.\t\n+\t* include/debug/set.h: Same.\n+\t* include/debug/hash_multimap.h: Same.\n+\t* include/debug/hash_set.h: Same.\n+\t* include/debug/bitset\n+\t* include/debug/safe_sequence.h: Same.\n+\t* include/debug/multiset.h: Same.\n+\t* include/debug/safe_base.h: Same.\n+\t* include/debug/functions.h: Same.\n+\t* include/debug/safe_iterator.tcc\n+\t* include/debug/hash_multiset.h: Same.\n+\t* include/debug/vector\n+\t* include/debug/map.h: Same.\n+\t* include/debug/deque\n+\t* include/debug/hash_map.h: Same.\n+\t* include/debug/string\n+\t* include/debug/macros.h: Same.\n+\t* include/debug/list\n+\t* include/debug/debug.h: Same.\n+\t* include/debug/multimap.h: Same.\t\n+\t* src/debug.cc: Same.\n+\t* testsuite/23_containers/vector/invalidation/1.cc: Cleanups.\n+\t* testsuite/23_containers/vector/invalidation/2.cc: Same.\n+\t* testsuite/23_containers/vector/invalidation/3.cc: Same.\n+\t* testsuite/23_containers/vector/invalidation/4.cc: Same.\n+\t* testsuite/23_containers/deque/invalidation/1.cc: Same.\n+\t* testsuite/23_containers/deque/invalidation/2.cc: Same.\n+\t* testsuite/23_containers/deque/invalidation/3.cc: Same.\n+\t* testsuite/23_containers/deque/invalidation/4.cc: Same.\n+\t* testsuite/23_containers/multiset/invalidation/1.cc: Same.\n+\t* testsuite/23_containers/multiset/invalidation/2.cc: Same.\n+\t* testsuite/23_containers/multimap/invalidation/1.cc: Same.\n+\t* testsuite/23_containers/multimap/invalidation/2.cc: Same.\n+\t* testsuite/23_containers/bitset/invalidation/1.cc: Same.\n+\t* testsuite/23_containers/bitset/cons/16020.cc: Same.\n+\t* testsuite/23_containers/bitset/operations/13838.cc: Same.\n+\t* testsuite/23_containers/list/invalidation/1.cc: Same.\n+\t* testsuite/23_containers/list/invalidation/2.cc: Same.\n+\t* testsuite/23_containers/list/invalidation/3.cc: Same.\n+\t* testsuite/23_containers/list/invalidation/4.cc: Same.\n+\t* testsuite/23_containers/set/invalidation/1.cc: Same.\n+\t* testsuite/23_containers/set/invalidation/2.cc: Same.\n+\t* testsuite/23_containers/map/invalidation/1.cc: Same.\n+\t* testsuite/23_containers/map/invalidation/2.cc: Same.\n+\t* testsuite/23_containers/map/insert/16813.cc: Same.\n+\t\n+\t* include/bits/basic_ios.h: Use _GLIBCXX_BEGIN_NAMESPACE(std) and\n+\tfriends.\t\n+\t* include/bits/stl_list.h: Same.\n+\t* include/bits/stl_map.h: Same.\n+\t* include/bits/stl_algobase.h: Same.\n+\t* include/bits/localefwd.h: Same.\n+\t* include/bits/valarray_array.tcc: Same.\n+\t* include/bits/valarray_after.h: Same.\n+\t* include/bits/gslice_array.h: Same.\n+\t* include/bits/stl_queue.h: Same.\n+\t* include/bits/gslice.h: Same.\n+\t* include/bits/locale_facets.tcc: Same.\n+\t* include/bits/locale_classes.h: Same.\n+\t* include/bits/stl_set.h: Same.\n+\t* include/bits/locale_facets.h: Same.\n+\t* include/bits/stl_stack.h: Same.\n+\t* include/bits/stl_iterator_base_types.h: Same.\n+\t* include/bits/stl_heap.h: Same.\n+\t* include/bits/indirect_array.h: Same.\n+\t* include/bits/atomicity.h: Same.\n+\t* include/bits/stream_iterator.h: Same.\n+\t* include/bits/concurrence.h: Same.\n+\t* include/bits/basic_string.h: Same.\n+\t* include/bits/stl_multimap.h: Same.\n+\t* include/bits/stl_pair.h: Same.\n+\t* include/bits/basic_ios.tcc: Same.\n+\t* include/bits/stl_raw_storage_iter.h: Same.\n+\t* include/bits/stl_vector.h: Same.\n+\t* include/bits/stl_numeric.h: Same.\n+\t* include/bits/ios_base.h: Same.\n+\t* include/bits/stl_deque.h: Same.\n+\t* include/bits/istream.tcc: Same.\n+\t* include/bits/postypes.h: Same.\n+\t* include/bits/stl_multiset.h: Same.\n+\t* include/bits/mask_array.h: Same.\n+\t* include/bits/stl_uninitialized.h: Same.\n+\t* include/bits/ostream.tcc: Same.\n+\t* include/bits/slice_array.h: Same.\n+\t* include/bits/boost_concept_check.h: Same.\n+\t* include/bits/sstream.tcc: Same.\n+\t* include/bits/stl_iterator_base_funcs.h: Same.\n+\t* include/bits/char_traits.h: Same.\n+\t* include/bits/stl_algo.h: Same.\n+\t* include/bits/stringfwd.h: Same.\n+\t* include/bits/c++config\n+\t* include/bits/stl_iterator.h: Same.\n+\t* include/bits/valarray_array.h: Same.\n+\t* include/bits/stl_tempbuf.h: Same.\n+\t* include/bits/vector.tcc: Same.\n+\t* include/bits/deque.tcc: Same.\n+\t* include/bits/stl_bvector.h: Same.\n+\t* include/bits/basic_string.tcc: Same.\n+\t* include/bits/list.tcc: Same.\n+\t* include/bits/streambuf_iterator.h: Same.\n+\t* include/bits/valarray_before.h: Same.\n+\t* include/bits/stl_construct.h: Same.\n+\t* include/bits/stl_function.h: Same.\n+\t* include/bits/cpp_type_traits.h: Same.\n+\t* include/bits/streambuf.tcc: Same.\n+\t* include/bits/allocator.h: Same.\n+\t* include/bits/stl_tree.h: Same.\n+\t* include/bits/fstream.tcc: Same.\n+\t* include/bits/stl_relops.h: Same.\n+\t* include/bits/functexcept.h: Same.\n+\t* include/std/std_valarray.h: Same.\n+\t* include/std/std_iostream.h: Same.\n+\t* include/std/std_streambuf.h: Same.\n+\t* include/std/std_bitset.h: Same.\n+\t* include/std/std_iosfwd.h: Same.\n+\t* include/std/std_iomanip.h: Same.\n+\t* include/std/std_fstream.h: Same.\n+\t* include/std/std_limits.h: Same.\n+\t* include/std/std_stdexcept.h: Same.\n+\t* include/std/std_istream.h: Same.\n+\t* include/std/std_complex.h: Same.\n+\t* include/std/std_memory.h: Same.\n+\t* include/std/std_ostream.h: Same.\n+\t* include/std/std_sstream.h: Same.\n+\t* include/c_std/std_csignal.h: Same.\n+\t* include/c_std/std_cstdlib.h: Same.\n+\t* include/c_std/std_cstdio.h: Same.\n+\t* include/c_std/std_cstdarg.h: Same.\n+\t* include/c_std/std_cctype.h: Same.\n+\t* include/c_std/std_cmath.h: Same.\n+\t* include/c_std/std_ctime.h: Same.\n+\t* include/c_std/std_clocale.h: Same.\n+\t* include/c_std/std_csetjmp.h: Same.\n+\t* include/c_std/std_cwchar.h: Same.\n+\t* include/c_std/std_cstring.h: Same.\n+\t* include/c_std/std_cstddef.h: Same.\n+\t* include/c_std/std_cwctype.h: Same.\n+\t* include/backward/iterator.h: Same.\n+\t* include/backward/set.h: Same.\n+\t* include/backward/hashtable.h: Same.\n+\t* include/backward/fstream.h: Same.\n+\t* include/backward/tempbuf.h: Same.\n+\t* include/backward/istream.h: Same.\n+\t* include/backward/bvector.h: Same.\n+\t* include/backward/stack.h: Same.\n+\t* include/backward/rope.h: Same.\n+\t* include/backward/complex.h: Same.\n+\t* include/backward/ostream.h: Same.\n+\t* include/backward/heap.h: Same.\n+\t* include/backward/iostream.h: Same.\n+\t* include/backward/function.h: Same.\n+\t* include/backward/multimap.h: Same.\n+\t* include/backward/pair.h: Same.\n+\t* include/backward/stream.h: Same.\n+\t* include/backward/iomanip.h: Same.\n+\t* include/backward/strstream\n+\t* include/backward/slist.h: Same.\n+\t* include/backward/tree.h: Same.\n+\t* include/backward/vector.h: Same.\n+\t* include/backward/deque.h: Same.\n+\t* include/backward/multiset.h: Same.\n+\t* include/backward/list.h: Same.\n+\t* include/backward/map.h: Same.\n+\t* include/backward/algobase.h: Same.\n+\t* include/backward/hash_map.h: Same.\n+\t* include/backward/algo.h: Same.\n+\t* include/backward/queue.h: Same.\n+\t* include/backward/streambuf.h: Same.\n+\t* src/allocator-inst.cc: Same.\n+\t* src/complex_io.cc: Same.\n+\t* src/localename.cc: Same.\n+\t* src/limits.cc: Same.\n+\t* src/ios_failure.cc: Same.\n+\t* src/locale-misc-inst.cc: Same.\n+\t* src/streambuf-inst.cc: Same.\n+\t* src/misc-inst.cc: Same.\n+\t* src/concept-inst.cc: Same.\n+\t* src/ios_locale.cc: Same.\n+\t* src/pool_allocator.cc: Same.\n+\t* src/fstream-inst.cc: Same.\n+\t* src/istream-inst.cc: Same.\n+\t* src/string-inst.cc: Same.\n+\t* src/locale_init.cc: Same.\n+\t* src/ctype.cc: Same.\n+\t* src/strstream.cc: Same.\n+\t* src/ostream-inst.cc: Same.\n+\t* src/functexcept.cc: Same.\n+\t* src/streambuf.cc: Same.\n+\t* src/sstream-inst.cc: Same.\n+\t* src/ios.cc: Same.\n+\t* src/valarray-inst.cc: Same.\n+\t* src/locale.cc: Same.\n+\t* src/tree.cc: Same.\n+\t* src/stdexcept.cc: Same.\n+\t* src/istream.cc: Same.\n+\t* src/compatibility.cc: Same.\n+\t* src/locale-inst.cc: Same.\n+\t* src/globals_io.cc: Same.\n+\t* src/list.cc: Same.\n+\t* src/ios_init.cc: Same.\n+\t* src/locale_facets.cc: Same.\n+\t* src/codecvt.cc: Same.\n+\n+\t* include/tr1/unordered_map: Use _GLIBCXX_BEGIN_NAMESPACE(tr1).\n+\t* include/tr1/boost_shared_ptr.h: Same.\n+\t* include/tr1/tuple\n+\t* include/tr1/hashtable\n+\t* include/tr1/type_traits_fwd.h: Same.\n+\t* include/tr1/unordered_set\n+\t* include/tr1/functional\n+\t* include/tr1/ref_fwd.h: Same.\n+\t* include/tr1/utility\n+\t* include/tr1/type_traits\n+\t* include/tr1/array\n+\n+\t* include/ext/hashtable.h: Use _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx).\n+\t* include/ext/typelist.h: Same.\n+\t* include/ext/hash_map: Same.\n+\t* include/ext/rc_string_base.h: Same.\n+\t* include/ext/pool_allocator.h: Same.\n+\t* include/ext/iterator: Same.\n+\t* include/ext/rb_tree: Same.\n+\t* include/ext/numeric: Same.\n+\t* include/ext/vstring.tcc: Same.\n+\t* include/ext/sso_string_base.h: Same.\n+\t* include/ext/stdio_filebuf.h: Same.\n+\t* include/ext/algorithm: Same.\n+\t* include/ext/codecvt_specializations.h: Same.\n+\t* include/ext/new_allocator.h: Same.\n+\t* include/ext/array_allocator.h: Same.\n+\t* include/ext/vstring_util.h: Same.\n+\t* include/ext/vstring_fwd.h: Same.\n+\t* include/ext/mt_allocator.h: Same.\n+\t* include/ext/debug_allocator.h: Same.\n+\t* include/ext/slist: Same.\n+\t* include/ext/stdio_sync_filebuf.h: Same.\n+\t* include/ext/hash_fun.h: Same.\n+\t* include/ext/malloc_allocator.h: Same.\n+\t* include/ext/functional: Same.\n+\t* include/ext/bitmap_allocator.h: Same.\n+\t* include/ext/pod_char_traits.h: Same.\n+\t* include/ext/vstring.h: Same.\n+\t* include/ext/ropeimpl.h: Same.\n+\t* include/ext/hash_set: Same.\n+\t* include/ext/memory: Same.\n+\t* include/ext/rope: Same.\n+\t* include/bits/boost_concept_check.h: Same.\n+\t* include/bits/stl_iterator.h: Same.\n+\t* include/bits/char_traits.h: Same.\n+\t* include/bits/cpp_type_traits.h: Same.\n+\t* include/bits/concurrence.h: Same.\n+\t* include/bits/atomicity.h: Same.\n+\t* config/locale/gnu/numeric_members.cc: Same.\n+\t* config/locale/gnu/collate_members.cc: Same.\n+\t* config/locale/gnu/ctype_members.cc: Same.\n+\t* config/locale/gnu/c_locale.cc: Same.\n+\t* config/locale/gnu/codecvt_members.cc: Same.\n+\t* config/locale/gnu/messages_members.cc: Same.\n+\t* config/locale/gnu/c_locale.h: Same.\n+\t* config/locale/gnu/monetary_members.cc: Same.\n+\t* config/locale/gnu/time_members.cc: Same.\n+\t* config/locale/ieee_1003.1-2001/c_locale.h: Same.\n+\t* config/locale/generic/numeric_members.cc: Same.\n+\t* config/locale/generic/collate_members.cc: Same.\n+\t* config/locale/generic/ctype_members.cc: Same.\n+\t* config/locale/generic/c_locale.cc: Same.\n+\t* config/locale/generic/codecvt_members.cc: Same.\n+\t* config/locale/generic/messages_members.cc: Same.\n+\t* config/locale/generic/c_locale.h: Same.\n+\t* config/locale/generic/monetary_members.cc: Same.\n+\t* config/locale/generic/time_members.cc: Same.\n+\t* config/os/aix/atomicity.h: Same.\n+\t* config/os/irix/atomicity.h: Same.\n+\t* config/cpu/powerpc/atomicity.h: Same.\n+\t* config/cpu/cris/atomicity.h: Same.\n+\t* config/cpu/ia64/atomicity.h: Same.\n+\t* config/cpu/alpha/atomicity.h: Same.\n+\t* config/cpu/m68k/atomicity.h: Same.\n+\t* config/cpu/hppa/atomicity.h: Same.\n+\t* config/cpu/mips/atomicity.h: Same.\n+\t* config/cpu/sparc/atomicity.h: Same.\n+\t* config/cpu/i386/atomicity.h: Same.\n+\t* config/cpu/i486/atomicity.h: Same.\n+\t* config/cpu/sh/atomicity.h: Same.\n+\t* config/cpu/generic/atomicity.h: Same.\n+\t* config/cpu/s390/atomicity.h: Same.\n+\t* config/io/c_io_stdio.h: Same.\n+\t* config/io/basic_file_stdio.cc: Same.\n+\t* config/io/basic_file_stdio.h: Same.\t\n+\t* src/misc-inst.cc: Same.\n+\t* src/concept-inst.cc: Same.\n+\t* src/ext-inst.cc: Same.\n+\t* src/string-inst.cc: Same.\n+\t* src/pool_allocator.cc: Same.\n+\t* src/bitmap_allocator.cc: Same.\n+\t* src/mt_allocator.cc: Same.\n+\t* libsupc++/exception: Same.\n+\t* libsupc++/vterminate.cc: Same.\n+\t* testsuite/ext/hash_map/1.cc: Explicitly qualify __gnu_cxx::hash_map.\n+\t* testsuite/ext/hash_map/14648.cc: Same.\t\n+\n+\t* libsupc++/eh_alloc.cc: Correct comment line spacing.\n+\t\t\n 2005-12-18  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_algobase.h (__copy_normal::copy_n): Uglify"}, {"sha": "44686de2e474d6a05f3ad774626af6d524f791e5", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -135,6 +135,8 @@ ENABLE_SYMVERS_DARWIN_FALSE = @ENABLE_SYMVERS_DARWIN_FALSE@\n ENABLE_SYMVERS_DARWIN_TRUE = @ENABLE_SYMVERS_DARWIN_TRUE@\n ENABLE_SYMVERS_FALSE = @ENABLE_SYMVERS_FALSE@\n ENABLE_SYMVERS_GNU_FALSE = @ENABLE_SYMVERS_GNU_FALSE@\n+ENABLE_SYMVERS_GNU_NAMESPACE_FALSE = @ENABLE_SYMVERS_GNU_NAMESPACE_FALSE@\n+ENABLE_SYMVERS_GNU_NAMESPACE_TRUE = @ENABLE_SYMVERS_GNU_NAMESPACE_TRUE@\n ENABLE_SYMVERS_GNU_TRUE = @ENABLE_SYMVERS_GNU_TRUE@\n ENABLE_SYMVERS_TRUE = @ENABLE_SYMVERS_TRUE@\n EXEEXT = @EXEEXT@"}, {"sha": "716dab5579061c878fb638be92aaba11a1dc4251", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1685,7 +1685,7 @@ AC_DEFUN([GLIBCXX_ENABLE_SYMVERS], [\n \n GLIBCXX_ENABLE(symvers,$1,[=STYLE],\n   [enables symbol versioning of the shared library],\n-  [permit yes|no|gnu|darwin|darwin-export])\n+  [permit yes|no|gnu|gnu-versioned-namespace|darwin|darwin-export])\n \n # If we never went through the GLIBCXX_CHECK_LINKER_FEATURES macro, then we\n # don't know enough about $LD to do tricks...\n@@ -1715,7 +1715,7 @@ if test x$enable_symvers = xdarwin-export ; then\n fi\n \n # Check to see if 'gnu' can win.\n-if test $enable_symvers = gnu; then\n+if test $enable_symvers = gnu || test $enable_symvers = gnu-versioned-namespace; then\n   # Check to see if libgcc_s exists, indicating that shared libgcc is possible.\n   AC_MSG_CHECKING([for shared libgcc])\n   ac_save_CFLAGS=\"$CFLAGS\"\n@@ -1778,6 +1778,11 @@ case $enable_symvers in\n     AC_DEFINE(_GLIBCXX_SYMVER_GNU, 1, \n               [Define to use GNU versioning in the shared library.])\n     ;;\n+  gnu-versioned-namespace)\n+    SYMVER_FILE=config/abi/pre/gnu-versioned-namespace.ver\n+    AC_DEFINE(_GLIBCXX_SYMVER_GNU_NAMESPACE, 1, \n+              [Define to use GNU namespace versioning in the shared library.])\n+    ;;\n   darwin)\n     SYMVER_FILE=config/abi/pre/gnu.ver\n     AC_DEFINE(_GLIBCXX_SYMVER_DARWIN, 1, \n@@ -1794,6 +1799,7 @@ AC_SUBST(SYMVER_FILE)\n AC_SUBST(port_specific_symbol_files)\n GLIBCXX_CONDITIONAL(ENABLE_SYMVERS, test $enable_symvers != no)\n GLIBCXX_CONDITIONAL(ENABLE_SYMVERS_GNU, test $enable_symvers = gnu)\n+GLIBCXX_CONDITIONAL(ENABLE_SYMVERS_GNU_NAMESPACE, test $enable_symvers = gnu-versioned-namespace)\n GLIBCXX_CONDITIONAL(ENABLE_SYMVERS_DARWIN, test $enable_symvers = darwin)\n AC_MSG_NOTICE(versioning on shared library symbols is $enable_symvers)\n "}, {"sha": "0077a5983cb1ec4b80b1208b78789ee9f0bb2b25", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -679,6 +679,9 @@\n /* Define to use GNU versioning in the shared library. */\n #undef _GLIBCXX_SYMVER_GNU\n \n+/* Define to use GNU namespace versioning in the shared library. */\n+#undef _GLIBCXX_SYMVER_GNU_NAMESPACE\n+\n /* Define if C99 functions or macros from <wchar.h>, <math.h>, <complex.h>,\n    <stdio.h>, and <stdlib.h> can be used or exposed. */\n #undef _GLIBCXX_USE_C99"}, {"sha": "3b9b475dcf16cedf5e32843d160351601dc1a6d9", "filename": "libstdc++-v3/config/abi/pre/gnu-versioned-namespace.ver", "status": "added", "additions": 202, "deletions": 0, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -0,0 +1,202 @@\n+## Linker script for GNU namespace versioning.\n+##\n+## Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+##\n+## This file is part of the libstdc++ version 3 distribution.\n+##\n+## This file is part of the GNU ISO C++ Library.  This library is free\n+## software; you can redistribute it and/or modify it under the\n+## terms of the GNU General Public License as published by the\n+## Free Software Foundation; either version 2, or (at your option)\n+## any later version.\n+##\n+## This library is distributed in the hope that it will be useful,\n+## but WITHOUT ANY WARRANTY; without even the implied warranty of\n+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+## GNU General Public License for more details.\n+##\n+## You should have received a copy of the GNU General Public License along\n+## with this library; see the file COPYING.  If not, write to the Free\n+## Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+## USA.\n+\n+GLIBCXX_3.7 {\n+\n+  global:\n+\n+    # Names inside the 'extern' block are demangled names.\n+    extern \"C++\"\n+    {\n+      std::_6::*;\n+      std::*\n+    };\n+\n+    # operator new(size_t)\n+    _Znw[jm];\n+    # operator new(size_t, std::nothrow_t const&)\n+    _Znw[jm]RKSt9nothrow_t;\n+\n+    # operator delete(void*)\n+    _ZdlPv;\n+    # operator delete(void*, std::nothrow_t const&)\n+    _ZdlPvRKSt9nothrow_t;\n+\n+    # operator new[](size_t)\n+    _Zna[jm];\n+    # operator new[](size_t, std::nothrow_t const&)\n+    _Zna[jm]RKSt9nothrow_t;\n+\n+    # operator delete[](void*)\n+    _ZdaPv;\n+    # operator delete[](void*, std::nothrow_t const&)\n+    _ZdaPvRKSt9nothrow_t;\n+\n+    # function-scope static objects requires a guard variable.\n+    _ZGVNSt*;\n+\n+    _ZTT*;\n+    _ZTV*;\n+\n+    _ZTI*;\n+    _ZTS*;\n+\n+    _ZTv0_n*;\n+\n+    # std::__convert_to_v\n+    _ZNSt2_614__convert_to_v*;\n+\n+    # std::__copy_streambufs\n+    _ZNSt2_617__copy_streambufsI[cw]NS_11char_traitsI[cw]EEEEiPNS_15basic_streambufIT_T0_EES7_;\n+\n+    # __gnu_cxx::__atomic_add\n+    # __gnu_cxx::__exchange_and_add\n+    _ZN9__gnu_cxx2_612__atomic_addEPV[il][il];\n+    _ZN9__gnu_cxx2_618__exchange_and_addEPV[li][il];\n+\n+    # __gnu_cxx::__pool\n+    _ZN9__gnu_cxx2_66__poolILb[01]EE13_M_initializeEv;\n+    _ZN9__gnu_cxx2_66__poolILb[01]EE16_M_reserve_blockE[jm][jm];\n+    _ZN9__gnu_cxx2_66__poolILb[01]EE16_M_reclaim_blockEPc[jm];\n+    _ZN9__gnu_cxx2_66__poolILb[01]EE10_M_destroyEv;\n+    _ZN9__gnu_cxx2_66__poolILb1EE16_M_get_thread_idEv;\n+\n+    _ZN9__gnu_cxx2_617__pool_alloc_base9_M_refillE[jm];    \n+    _ZN9__gnu_cxx2_617__pool_alloc_base16_M_get_free_listE[jm];\n+    _ZN9__gnu_cxx2_617__pool_alloc_base12_M_get_mutexEv;\n+\n+    _ZN9__gnu_cxx2_69free_list6_M_getE[jm];\n+    _ZN9__gnu_cxx2_69free_list8_M_clearEv;\n+\n+  local:\n+    *;\n+};\n+\n+\n+# Symbols in the support library (libsupc++) have their own tag.\n+CXXABI_1.7 {\n+\n+  global:\n+    __cxa_allocate_exception;\n+    __cxa_bad_cast;\n+    __cxa_bad_typeid;\n+    __cxa_begin_catch;\n+    __cxa_begin_cleanup;\n+    __cxa_call_unexpected;\n+    __cxa_current_exception_type;\n+    __cxa_demangle;\n+    __cxa_end_catch;\n+    __cxa_end_cleanup;\n+    __cxa_free_exception;\n+    __cxa_get_exception_ptr;\n+    __cxa_get_globals;\n+    __cxa_get_globals_fast;\n+    __cxa_guard_abort;\n+    __cxa_guard_acquire;\n+    __cxa_guard_release;\n+    __cxa_pure_virtual;\n+    __cxa_rethrow;\n+    __cxa_throw;\n+    __cxa_type_match;\n+    __cxa_vec_cctor;\n+    __cxa_vec_cleanup;\n+    __cxa_vec_ctor;\n+    __cxa_vec_delete2;\n+    __cxa_vec_delete3;\n+    __cxa_vec_delete;\n+    __cxa_vec_dtor;\n+    __cxa_vec_new2;\n+    __cxa_vec_new3;\n+    __cxa_vec_new;\n+    __gxx_personality_v0;\n+    __gxx_personality_sj0;\n+    __dynamic_cast;\n+\n+    # *_type_info classes, ctor and dtor\n+    _ZN10__cxxabiv117__array_type_info*;\n+    _ZN10__cxxabiv117__class_type_info*;\n+    _ZN10__cxxabiv116__enum_type_info*;\n+    _ZN10__cxxabiv120__function_type_info*;\n+    _ZN10__cxxabiv123__fundamental_type_info*;\n+    _ZN10__cxxabiv117__pbase_type_info*;\n+    _ZN10__cxxabiv129__pointer_to_member_type_info*;\n+    _ZN10__cxxabiv119__pointer_type_info*;\n+    _ZN10__cxxabiv120__si_class_type_info*;\n+    _ZN10__cxxabiv121__vmi_class_type_info*;\n+\n+    # *_type_info classes, member functions\n+    _ZNK10__cxxabiv117__class_type_info*;\n+    _ZNK10__cxxabiv120__function_type_info*;\n+    _ZNK10__cxxabiv117__pbase_type_info*;\n+    _ZNK10__cxxabiv129__pointer_to_member_type_info*;\n+    _ZNK10__cxxabiv119__pointer_type_info*;\n+    _ZNK10__cxxabiv120__si_class_type_info*;\n+    _ZNK10__cxxabiv121__vmi_class_type_info*;\n+\n+    # virtual table\n+    _ZTVN10__cxxabiv117__array_type_infoE;\n+    _ZTVN10__cxxabiv117__class_type_infoE;\n+    _ZTVN10__cxxabiv116__enum_type_infoE;\n+    _ZTVN10__cxxabiv120__function_type_infoE;\n+    _ZTVN10__cxxabiv123__fundamental_type_infoE;\n+    _ZTVN10__cxxabiv117__pbase_type_infoE;\n+    _ZTVN10__cxxabiv129__pointer_to_member_type_infoE;\n+    _ZTVN10__cxxabiv119__pointer_type_infoE;\n+    _ZTVN10__cxxabiv120__si_class_type_infoE;\n+    _ZTVN10__cxxabiv121__vmi_class_type_infoE;\n+\n+    # typeinfo structure (and some names)\n+    _ZTI[a-z];\n+    _ZTIP[a-z];\n+    _ZTIPK[a-z];\n+    _ZTIN10__cxxabiv117__array_type_infoE;\n+    _ZTIN10__cxxabiv117__class_type_infoE;\n+    _ZTIN10__cxxabiv116__enum_type_infoE;\n+    _ZTIN10__cxxabiv120__function_type_infoE;\n+    _ZTIN10__cxxabiv123__fundamental_type_infoE;\n+    _ZTIN10__cxxabiv117__pbase_type_infoE;\n+    _ZTIN10__cxxabiv129__pointer_to_member_type_infoE;\n+    _ZTIN10__cxxabiv119__pointer_type_infoE;\n+    _ZTIN10__cxxabiv120__si_class_type_infoE;\n+    _ZTIN10__cxxabiv121__vmi_class_type_infoE;\n+\n+    # typeinfo name\n+    _ZTS[a-z];\n+    _ZTSP[a-z];\n+    _ZTSPK[a-z];\n+    _ZTSN10__cxxabiv117__array_type_infoE;\n+    _ZTSN10__cxxabiv117__class_type_infoE;\n+    _ZTSN10__cxxabiv116__enum_type_infoE;\n+    _ZTSN10__cxxabiv120__function_type_infoE;\n+    _ZTSN10__cxxabiv123__fundamental_type_infoE;\n+    _ZTSN10__cxxabiv117__pbase_type_infoE;\n+    _ZTSN10__cxxabiv129__pointer_to_member_type_infoE;\n+    _ZTSN10__cxxabiv119__pointer_type_infoE;\n+    _ZTSN10__cxxabiv120__si_class_type_infoE;\n+    _ZTSN10__cxxabiv121__vmi_class_type_infoE;\n+\n+    # __gnu_cxx::_verbose_terminate_handler()\n+    _ZN9__gnu_cxx2_627__verbose_terminate_handlerEv;\n+\n+  local:\n+    *;\n+};"}, {"sha": "c76bdf94850e744347897adae3da4b9811e20099", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 43, "deletions": 12, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,9 +1,7 @@\n-## Linker script for GNU ld 2.13.91+ only.\n+## Linker script for GNU versioning (GNU ld 2.13.91+ only.)\n ##\n ## Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n ##\n-## This file is part of the libstdc++ version 3 distribution.\n-##\n ## This file is part of the GNU ISO C++ Library.  This library is free\n ## software; you can redistribute it and/or modify it under the\n ## terms of the GNU General Public License as published by the\n@@ -110,15 +108,7 @@ GLIBCXX_3.4 {\n       std::__num_base::_S_atoms_out;\n       std::__moneypunct_cache*;\n       std::__numpunct_cache*;\n-      std::__timepunct_cache*;\n-      __gnu_debug::_Safe_iterator_base*;\n-      __gnu_debug::_Safe_sequence_base*;\n-      __gnu_debug::_Error_formatter*;\n-      __gnu_norm::_List_node_base::hook*;\n-      __gnu_norm::_List_node_base::swap*;\n-      __gnu_norm::_List_node_base::unhook*;\n-      __gnu_norm::_List_node_base::reverse*;\n-      __gnu_norm::_List_node_base::transfer*\n+      std::__timepunct_cache*\n     };\n \n     # Names not in an 'extern' block are mangled names.\n@@ -337,6 +327,27 @@ GLIBCXX_3.4 {\n     _ZN9__gnu_cxx12__atomic_add*;\n     _ZN9__gnu_cxx18__exchange_and_add*;\n \n+    # __gnu_debug\n+_ZN10__gnu_norm15_List_node_base4hookEPS0_;\n+_ZN10__gnu_norm15_List_node_base4swapERS0_S1_;\n+_ZN10__gnu_norm15_List_node_base6unhookEv;\n+_ZN10__gnu_norm15_List_node_base7reverseEv;\n+_ZN10__gnu_norm15_List_node_base8transferEPS0_S1_;\n+_ZN11__gnu_debug19_Safe_iterator_base9_M_attachEPNS_19_Safe_sequence_baseEb;\n+_ZN11__gnu_debug19_Safe_iterator_base9_M_detachEv;\n+_ZNK11__gnu_debug19_Safe_iterator_base11_M_singularEv;\n+_ZNK11__gnu_debug19_Safe_iterator_base14_M_can_compareERKS0_;\n+_ZN11__gnu_debug19_Safe_sequence_base13_M_detach_allEv;\n+_ZN11__gnu_debug19_Safe_sequence_base18_M_detach_singularEv;\n+_ZN11__gnu_debug19_Safe_sequence_base22_M_revalidate_singularEv;\n+_ZN11__gnu_debug19_Safe_sequence_base7_M_swapERS0_;\n+_ZNK11__gnu_debug16_Error_formatter8_M_errorEv;\n+_ZNK11__gnu_debug16_Error_formatter10_M_messageENS_13_Debug_msg_idE;\n+_ZNK11__gnu_debug16_Error_formatter10_Parameter14_M_print_fieldEPKS0_PKc;\n+_ZNK11__gnu_debug16_Error_formatter10_Parameter20_M_print_descriptionEPKS0_;\n+_ZNK11__gnu_debug16_Error_formatter13_M_print_wordEPKc;\n+_ZNK11__gnu_debug16_Error_formatter15_M_print_stringEPKc;\n+\n     # operator new(size_t)\n     _Znw[jm];\n     # operator new(size_t, std::nothrow_t const&)\n@@ -585,6 +596,26 @@ GLIBCXX_3.4.7 {\n \n     _ZNSt6locale5_Impl16_M_install_cacheEPKNS_5facetE[jm];\n \n+_ZNSt10__gnu_norm15_List_node_base4hookEPS0_;\n+_ZNSt10__gnu_norm15_List_node_base4swapERS0_S1_;\n+_ZNSt10__gnu_norm15_List_node_base6unhookEv;\n+_ZNSt10__gnu_norm15_List_node_base7reverseEv;\n+_ZNSt10__gnu_norm15_List_node_base8transferEPS0_S1_;\n+_ZNKSt11__gnu_debug16_Error_formatter8_M_errorEv;\n+_ZNKSt11__gnu_debug16_Error_formatter10_M_messageENS_13_Debug_msg_idE;\n+_ZNKSt11__gnu_debug16_Error_formatter10_Parameter14_M_print_fieldEPKS0_PKc;\n+_ZNKSt11__gnu_debug16_Error_formatter10_Parameter20_M_print_descriptionEPKS0_;\n+_ZNKSt11__gnu_debug16_Error_formatter13_M_print_wordEPKc;\n+_ZNKSt11__gnu_debug16_Error_formatter15_M_print_stringEPKc;\n+_ZNKSt11__gnu_debug19_Safe_iterator_base11_M_singularEv;\n+_ZNKSt11__gnu_debug19_Safe_iterator_base14_M_can_compareERKS0_;\n+_ZNSt11__gnu_debug19_Safe_iterator_base9_M_attachEPNS_19_Safe_sequence_baseEb;\n+_ZNSt11__gnu_debug19_Safe_iterator_base9_M_detachEv;\n+_ZNSt11__gnu_debug19_Safe_sequence_base13_M_detach_allEv;\n+_ZNSt11__gnu_debug19_Safe_sequence_base18_M_detach_singularEv;\n+_ZNSt11__gnu_debug19_Safe_sequence_base22_M_revalidate_singularEv;\n+_ZNSt11__gnu_debug19_Safe_sequence_base7_M_swapERS0_;\n+\n } GLIBCXX_3.4.6;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "39cb10d4dbff36a2c4834d911a76dc899ae3547a", "filename": "libstdc++-v3/config/abi/pre/none.ver", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fnone.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fnone.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fnone.ver?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,7 +1,7 @@\n # \n # This is a placeholder file.  It does nothing and is not used.\n # \n-# If you are seeing this file as your linker script (named linker.map), then\n-# either 1) the configuration process determined that symbol versioning should\n-# not be done, or 2) you specifically turned it off.\n-# \n+# If you are seeing this file as your linker script (named\n+# libstdc++-symbols.ver), then either 1) the configuration process\n+# determined that symbol versioning should not be done, or 2) you\n+# specifically turned it off. (ie, --disable-symvers)."}, {"sha": "d288483621af9727a3d187e1eb0a6def873c2e1f", "filename": "libstdc++-v3/config/cpu/alpha/atomicity.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Falpha%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Falpha%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Falpha%2Fatomicity.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -30,8 +30,8 @@\n \n #include <bits/atomicity.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   _Atomic_word\n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n@@ -41,5 +41,6 @@ namespace __gnu_cxx\n   __attribute__ ((__unused__))\n   __atomic_add(volatile _Atomic_word* __mem, int __val)\n   { __sync_fetch_and_add(__mem, __val); }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n "}, {"sha": "0384b42a3d010735ec36c2b94110db5058aa8e0f", "filename": "libstdc++-v3/config/cpu/cris/atomicity.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fcris%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fcris%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fcris%2Fatomicity.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -29,8 +29,8 @@\n \n #include <bits/atomicity.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   _Atomic_word\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n   {\n@@ -74,4 +74,5 @@ namespace __gnu_cxx\n   void\n   __atomic_add(volatile _Atomic_word* __mem, int __val)\n   { __exchange_and_add(__mem, __val); }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "5ecb465e862740fe2cdd49e0f39ea00219724d0d", "filename": "libstdc++-v3/config/cpu/generic/atomicity.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,7 @@\n // Low-level functions for atomic operations: Generic version  -*- C++ -*-\n \n-// Copyright (C) 1999, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2001, 2002, 2003, 2004, 2005\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,8 +36,8 @@ namespace __gnu_internal\n   __glibcxx_mutex_define_initialized(atomic_mutex);\n } // namespace __gnu_internal\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   _Atomic_word\n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n@@ -53,4 +54,5 @@ namespace __gnu_cxx\n   __attribute__ ((__unused__))\n   __atomic_add(volatile _Atomic_word* __mem, int __val)\n   { __exchange_and_add(__mem, __val); }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "1b1c883188fe6ba51228ecff9a71263880fdcd86", "filename": "libstdc++-v3/config/cpu/hppa/atomicity.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations: PA-RISC version  -*- C++ -*-\n \n-// Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,8 +30,8 @@\n #include <bits/c++config.h>\n #include <bits/atomicity.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   template<int _Inst>\n     struct _Atomicity_lock\n     {\n@@ -94,4 +94,5 @@ namespace __gnu_cxx\n     __asm__ __volatile__ (\"stw,ma %1,0(%0)\"\n \t\t\t  : : \"r\" (&lock), \"r\" (tmp) : \"memory\");\n   }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "1b31c2d73aed1965216268cd294b33478a869368", "filename": "libstdc++-v3/config/cpu/i386/atomicity.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fatomicity.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations: x86, x >= 3 version  -*- C++ -*-\n \n-// Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,8 +29,8 @@\n \n #include <bits/atomicity.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   template<int __inst>\n     struct _Atomicity_lock\n     {\n@@ -71,4 +71,5 @@ namespace __gnu_cxx\n   __attribute__ ((__unused__))\n   __atomic_add(volatile _Atomic_word* __mem, int __val)\n   { __exchange_and_add(__mem, __val); }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "c2cf509ab551313476f6d558b62234938cc6ade8", "filename": "libstdc++-v3/config/cpu/i486/atomicity.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi486%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi486%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi486%2Fatomicity.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations: x86, x >= 4 version  -*- C++ -*-\n \n-// Copyright (C) 1999, 2000, 2001, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,8 +29,8 @@\n \n #include <bits/atomicity.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   _Atomic_word \n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n@@ -49,5 +49,6 @@ namespace __gnu_cxx\n     __asm__ __volatile__ (\"lock; add{l} {%1,%0|%0,%1}\"\n \t\t\t  : \"=m\" (*__mem) : \"ir\" (__val), \"m\" (*__mem));\n   }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n "}, {"sha": "baabeddadedd344d4ebe83e970d07f7a6e547f10", "filename": "libstdc++-v3/config/cpu/ia64/atomicity.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fia64%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fia64%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fia64%2Fatomicity.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -30,8 +30,8 @@\n \n #include <bits/atomicity.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   _Atomic_word \n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n@@ -41,4 +41,5 @@ namespace __gnu_cxx\n   __attribute__ ((__unused__))\n   __atomic_add(volatile _Atomic_word* __mem, int __val)\n   { __sync_fetch_and_add(__mem, __val); }\n-}\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "370d77f925e043dfc66395381008308958beae28", "filename": "libstdc++-v3/config/cpu/m68k/atomicity.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fatomicity.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations: m68k version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,8 +29,8 @@\n \n #include <bits/atomicity.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n #if ( defined(__mc68020__) || defined(__mc68030__) \\\n       || defined(__mc68040__) || defined(__mc68060__) ) \\\n     && !defined(__mcpu32__)\n@@ -130,4 +130,5 @@ namespace __gnu_cxx\n     // architecturally guaranteed to be atomic.\n     __exchange_and_add(__mem, __val);\n   }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "aae70dfccf3de89f210664222036a756bc5d86fd", "filename": "libstdc++-v3/config/cpu/mips/atomicity.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fmips%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fmips%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fmips%2Fatomicity.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations: MIPS version  -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,8 +29,8 @@\n \n #include <bits/atomicity.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   _Atomic_word\n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n@@ -80,4 +80,5 @@ namespace __gnu_cxx\n        : \"r\"(__mem), \"r\"(__val)\n        : \"memory\" );\n   }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "dbd859208a36c575cd92efcc0754e7cee66e942a", "filename": "libstdc++-v3/config/cpu/powerpc/atomicity.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fpowerpc%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fpowerpc%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fpowerpc%2Fatomicity.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -30,8 +30,8 @@\n \n #include <bits/atomicity.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   _Atomic_word\n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n@@ -41,4 +41,5 @@ namespace __gnu_cxx\n   __attribute__ ((__unused__))\n   __atomic_add(volatile _Atomic_word* __mem, int __val)\n   { __sync_fetch_and_add(__mem, __val); }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "631795eb23af7ba55f71d1118f7a14c6d597bb68", "filename": "libstdc++-v3/config/cpu/s390/atomicity.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fs390%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fs390%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fs390%2Fatomicity.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations: S/390 version  -*- C++ -*-\n \n-// Copyright (C) 2001, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,8 +29,8 @@\n \n #include <bits/atomicity.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   _Atomic_word \n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n@@ -40,4 +40,5 @@ namespace __gnu_cxx\n   __attribute__ ((__unused__))\n   __atomic_add(volatile _Atomic_word* __mem, int __val)\n   { __sync_fetch_and_add(__mem, __val); }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "7a15beb69d5e959934c5f4c41937b0aab0525347", "filename": "libstdc++-v3/config/cpu/sh/atomicity.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsh%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsh%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsh%2Fatomicity.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,4 +1,4 @@\n-// Low-level functions for atomic operations: Generic version  -*- C++ -*-\n+// Low-level functions for atomic operations: sh version  -*- C++ -*-\n \n // Copyright (C) 1999, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n@@ -82,8 +82,8 @@ namespace __gnu_internal\n   __glibcxx_mutex_define_initialized(atomic_mutex);\n } // namespace __gnu_internal\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   _Atomic_word\n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n@@ -100,7 +100,8 @@ namespace __gnu_cxx\n   __attribute__ ((__unused__))\n   __atomic_add(volatile _Atomic_word* __mem, int __val)\n   { __exchange_and_add(__mem, __val); }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* !__SH4A__ */\n "}, {"sha": "ad43760dffadfec18c41c8901a6ee5de644312f7", "filename": "libstdc++-v3/config/cpu/sparc/atomicity.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomicity.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,7 @@\n // Low-level functions for atomic operations: Sparc version  -*- C++ -*-\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001, 2002, 2004, 2005\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,8 +30,8 @@\n \n #include <bits/atomicity.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n #ifdef __arch64__\n   _Atomic_word\n   __attribute__ ((__unused__))\n@@ -122,4 +123,5 @@ namespace __gnu_cxx\n \t\t\t : \"memory\");\n   }  \n #endif /* __arch32__ */\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "3f4914b29cd091f4463ac4298137b336ab92589d", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -174,8 +174,9 @@ namespace __gnu_internal\n #endif\n } // namespace __gnu_internal\n \n-namespace std \n-{\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // Definitions for __basic_file<char>.\n   __basic_file<char>::__basic_file(__c_lock* /*__lock*/) \n   : _M_cfile(NULL), _M_cfile_created(false) { }\n@@ -370,4 +371,6 @@ namespace std\n #endif\n     return 0;\n   }\n-}  // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n+"}, {"sha": "75468e0937153eeaa63268b0596143c8b1b19fe6", "filename": "libstdc++-v3/config/io/basic_file_stdio.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,7 @@\n // Wrapper of C-language FILE struct -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -44,8 +45,8 @@\n #include <bits/c++config.h>\n #include <ios>\n \n-namespace std \n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // Generic declaration.\n   template<typename _CharT>\n     class __basic_file; \n@@ -105,6 +106,7 @@ namespace std\n       streamsize\n       showmanyc();\n     };\n-}  // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif\t"}, {"sha": "a1ed94a9c54308c353ad0b38f45c71843ed4c6d1", "filename": "libstdc++-v3/config/io/c_io_stdio.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,7 @@\n-// underlying io library  -*- C++ -*-\n+// Underlying io library details -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,8 +37,8 @@\n #include <cstddef>\n #include <bits/gthr.h>\n \n-namespace std \n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   typedef __gthread_mutex_t __c_lock;\n \n   // for basic_file.h\n@@ -81,6 +82,7 @@ namespace std\n     static const __int_type _S_out =\t\t0x10;\n     static const __int_type _S_trunc =\t\t0x20;\n   };\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "68c3e7670c8d03d36fd4d58093a60735a546394f", "filename": "libstdc++-v3/config/locale/generic/c_locale.cc", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -43,8 +43,8 @@\n #include <ieeefp.h>\n #endif\n \n-namespace std \n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // Specializations for all types used in num_get.\n   template<>\n     void\n@@ -149,10 +149,11 @@ namespace std\n   __c_locale\n   locale::facet::_S_clone_c_locale(__c_locale&)\n   { return __c_locale(); }\n-} // namespace std\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_END_NAMESPACE\n+\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   const char* const category_names[6 + _GLIBCXX_NUM_CATEGORIES] =\n     {\n       \"LC_CTYPE\", \n@@ -162,9 +163,11 @@ namespace __gnu_cxx\n       \"LC_MONETARY\",\n       \"LC_MESSAGES\"\n     };\n-}  \n \n-namespace std\n-{\n+_GLIBCXX_END_NAMESPACE\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   const char* const* const locale::_S_categories = __gnu_cxx::category_names;\n-}  // namespace std\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "d6e2f65e06ec76d296209f1790208954a931ff4f", "filename": "libstdc++-v3/config/locale/generic/c_locale.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -44,8 +44,8 @@\n \n #define _GLIBCXX_NUM_CATEGORIES 0\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   typedef int*\t\t\t__c_locale;\n \n   // Convert numeric value of type _Tv to string and return length of\n@@ -81,6 +81,7 @@ namespace std\n \t}\n       return __ret;\n     }\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "555c3b3cf3698df2375aa41845098511dfc16938", "filename": "libstdc++-v3/config/locale/generic/codecvt_members.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // std::codecvt implementation details, generic version -*- C++ -*-\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,8 +35,8 @@\n \n #include <locale>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // Specializations.\n #ifdef _GLIBCXX_USE_WCHAR_T\n   codecvt_base::result\n@@ -214,4 +214,5 @@ namespace std\n     return __ret; \n   }\n #endif\n-}\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "f614037a23882ca7945a34de11dd4319b3abacd9", "filename": "libstdc++-v3/config/locale/generic/collate_members.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcollate_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcollate_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcollate_members.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // std::collate implementation details, generic version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,8 +35,8 @@\n \n #include <locale>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // These are basically extensions to char_traits, and perhaps should\n   // be put there instead of here.\n   template<>\n@@ -69,4 +69,5 @@ namespace std\n \t\t\t\t   size_t __n) const\n     { return wcsxfrm(__to, __from, __n); }\n #endif\n-}\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "3af4440da8f69f4403c4abef224b1f5690382003", "filename": "libstdc++-v3/config/locale/generic/ctype_members.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // std::ctype implementation details, generic version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,8 +35,8 @@\n \n #include <locale>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // NB: The other ctype<char> specializations are in src/locale.cc and\n   // various /config/os/* files.\n   template<>\n@@ -264,4 +264,5 @@ namespace std\n       }  \n   }\n #endif //  _GLIBCXX_USE_WCHAR_T\n-}\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "2980ed92fc93f6e7a944362dd74424befa5300f6", "filename": "libstdc++-v3/config/locale/generic/messages_members.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // std::messages implementation details, generic version -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,8 +35,8 @@\n \n #include <locale>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // Specializations\n   template<>\n     string\n@@ -49,4 +49,5 @@ namespace std\n     messages<wchar_t>::do_get(catalog, int, int, const wstring& __dfault) const\n     { return __dfault; }\n #endif\n-}\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "3abcf338c1009706eb6112324fedab2ab2819b34", "filename": "libstdc++-v3/config/locale/generic/monetary_members.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // std::moneypunct implementation details, generic version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,8 +35,8 @@\n \n #include <locale>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // Construct and return valid pattern consisting of some combination of:\n   // space none symbol sign value\n   money_base::pattern\n@@ -168,4 +168,5 @@ namespace std\n     moneypunct<wchar_t, false>::~moneypunct()\n     { delete _M_data; }\n #endif\n-}\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "ce4f6487e77d0e724ede9ba0526713b8937311e6", "filename": "libstdc++-v3/config/locale/generic/numeric_members.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // std::numpunct implementation details, generic version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,8 +35,8 @@\n \n #include <locale>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template<> \n     void\n     numpunct<char>::_M_initialize_numpunct(__c_locale)\n@@ -103,4 +103,6 @@ namespace std\n     numpunct<wchar_t>::~numpunct()\n     { delete _M_data; }\n #endif\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n+"}, {"sha": "dbb12ae6848bcfbd2a6e4606848e34321256fed2", "filename": "libstdc++-v3/config/locale/generic/time_members.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // std::time_get, std::time_put implementation, generic version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,8 +36,8 @@\n \n #include <locale>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template<>\n     void\n     __timepunct<char>::\n@@ -201,4 +201,5 @@ namespace std\n       _M_data->_M_amonth12 = L\"Dec\";\n     }\n #endif\n-}\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "4025fb18b87bbb9bfaa80013ec326d168e4c810b", "filename": "libstdc++-v3/config/locale/gnu/c_locale.cc", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -40,8 +40,8 @@\n #include <langinfo.h>\n #include <bits/c++locale_internal.h>\n \n-namespace std \n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template<>\n     void\n     __convert_to_v(const char* __s, float& __v, ios_base::iostate& __err, \n@@ -107,10 +107,11 @@ namespace std\n   __c_locale\n   locale::facet::_S_clone_c_locale(__c_locale& __cloc)\n   { return __duplocale(__cloc); }\n-} // namespace std\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_END_NAMESPACE\n+\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   const char* const category_names[6 + _GLIBCXX_NUM_CATEGORIES] =\n     {\n       \"LC_CTYPE\", \n@@ -126,9 +127,11 @@ namespace __gnu_cxx\n       \"LC_MEASUREMENT\", \n       \"LC_IDENTIFICATION\" \n     };\n-}\n \n-namespace std\n-{\n+_GLIBCXX_END_NAMESPACE\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   const char* const* const locale::_S_categories = __gnu_cxx::category_names;\n-}  // namespace std\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "55e160e1b9beac8b3f3a8c96e417263e3dd682a5", "filename": "libstdc++-v3/config/locale/gnu/c_locale.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -50,14 +50,15 @@\n #define _GLIBCXX_NUM_CATEGORIES 6\n \n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   extern \"C\" __typeof(uselocale) __uselocale;\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n #endif\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   typedef __locale_t\t\t__c_locale;\n \n   // Convert numeric value of type _Tv to string and return length of\n@@ -96,6 +97,7 @@ namespace std\n #endif\n       return __ret;\n     }\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "bc454228d672cff2942590e155a21758b1d8d2a2", "filename": "libstdc++-v3/config/locale/gnu/codecvt_members.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // std::codecvt implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,8 +36,8 @@\n #include <locale>\n #include <bits/c++locale_internal.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // Specializations.\n #ifdef _GLIBCXX_USE_WCHAR_T\n   codecvt_base::result\n@@ -303,4 +303,5 @@ namespace std\n     return __ret; \n   }\n #endif\n-}\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "6f6b758128218a4bf3be817c9d2085525a0a4750", "filename": "libstdc++-v3/config/locale/gnu/collate_members.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcollate_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcollate_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcollate_members.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // std::collate implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,8 +36,8 @@\n #include <locale>\n #include <bits/c++locale_internal.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // These are basically extensions to char_traits, and perhaps should\n   // be put there instead of here.\n   template<>\n@@ -70,4 +70,5 @@ namespace std\n \t\t\t\t   size_t __n) const\n     { return __wcsxfrm_l(__to, __from, __n, _M_c_locale_collate); }\n #endif\n-}\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "cb2887d9b98c92839ee5d04343926040d9fec2c4", "filename": "libstdc++-v3/config/locale/gnu/ctype_members.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // std::ctype implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,8 +36,8 @@\n #include <locale>\n #include <bits/c++locale_internal.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // NB: The other ctype<char> specializations are in src/locale.cc and\n   // various /config/os/* files.\n   template<>\n@@ -300,4 +300,5 @@ namespace std\n #endif\n   }\n #endif //  _GLIBCXX_USE_WCHAR_T\n-}\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "f206e44a636b34eb857fb33e845a6c93e82e1a30", "filename": "libstdc++-v3/config/locale/gnu/messages_members.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // std::messages implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,8 +36,8 @@\n #include <locale>\n #include <bits/c++locale_internal.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // Specializations.\n   template<>\n     string\n@@ -78,4 +78,5 @@ namespace std\n # endif\n     }\n #endif\n-}\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "b3cd05d8305be65411d1be75654f867f70b3e5a7", "filename": "libstdc++-v3/config/locale/gnu/monetary_members.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // std::moneypunct implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,8 +36,8 @@\n #include <locale>\n #include <bits/c++locale_internal.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // Construct and return valid pattern consisting of some combination of:\n   // space none symbol sign value\n   money_base::pattern\n@@ -652,4 +652,5 @@ namespace std\n       delete _M_data;\n     }\n #endif\n-}\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "7a0400b46cae6bef5c9513ad29f50203c96afda4", "filename": "libstdc++-v3/config/locale/gnu/numeric_members.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // std::numpunct implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,8 +36,8 @@\n #include <locale>\n #include <bits/c++locale_internal.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template<> \n     void\n     numpunct<char>::_M_initialize_numpunct(__c_locale __cloc)\n@@ -148,4 +148,5 @@ namespace std\n     numpunct<wchar_t>::~numpunct()\n     { delete _M_data; }\n  #endif\n-}\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "10faa8fe47022e1621e4d2452589b2fc270f691a", "filename": "libstdc++-v3/config/locale/gnu/time_members.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // std::time_get, std::time_put implementation, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,8 +37,8 @@\n #include <locale>\n #include <bits/c++locale_internal.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template<>\n     void\n     __timepunct<char>::\n@@ -392,4 +392,5 @@ namespace std\n \t}\n     }\n #endif\n-}\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "af5dc31729e123f55fa5dba3778818670fab41d3", "filename": "libstdc++-v3/config/locale/ieee_1003.1-2001/c_locale.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,7 +38,9 @@\n #include <iconv.h>\t\t// For codecvt using iconv, iconv_t\n #include <nl_types.h> \t\t// For messages\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   typedef int*\t\t\t__c_locale;\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n+"}, {"sha": "b44e630486b1774f93fa52dcf78491befeebd401", "filename": "libstdc++-v3/config/os/aix/atomicity.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fatomicity.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations: AIX version  -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -43,8 +43,8 @@ extern \"C\"\n #include <sys/atomic_op.h>\n }\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   _Atomic_word\n   __attribute__ ((__unused__))\n   __exchange_and_add (volatile _Atomic_word* __mem, int __val)\n@@ -58,4 +58,5 @@ namespace __gnu_cxx\n   {\n     (void) ::fetch_and_add (const_cast<atomic_p>(__mem), __val);\n   }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "9261d26fdbee988e3be096c98d5c074be3437ba1", "filename": "libstdc++-v3/config/os/irix/atomicity.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fatomicity.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations: IRIX version  -*- C++ -*-\n \n-// Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,13 +30,14 @@\n #include <mutex.h>\n #include <bits/atomicity.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   _Atomic_word\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n   { return (_Atomic_word) test_then_add((unsigned long*) const_cast<_Atomic_word*>(__mem), __val); }\n \n   void\n   __atomic_add(volatile _Atomic_word* __mem, int __val)\n   { __exchange_and_add(__mem, __val); }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "b5fbb5bbc7684f213d1f680352d36d2e5de773da", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -309,7 +309,7 @@ ac_includes_default=\"\\\n # include <unistd.h>\n #endif\"\n \n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libtool_VERSION multi_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar glibcxx_builddir glibcxx_srcdir toplevel_srcdir CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LN_S AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBTOOL CXXCPP CPPFLAGS enable_shared enable_static GLIBCXX_HOSTED_TRUE GLIBCXX_HOSTED_FALSE GLIBCXX_BUILD_PCH_TRUE GLIBCXX_BUILD_PCH_FALSE glibcxx_PCHFLAGS CSTDIO_H BASIC_FILE_H BASIC_FILE_CC CPP EGREP check_msgfmt glibcxx_MOFILES glibcxx_POFILES glibcxx_localedir USE_NLS CLOCALE_H CMESSAGES_H CCODECVT_CC CCOLLATE_CC CCTYPE_CC CMESSAGES_CC CMONEY_CC CNUMERIC_CC CTIME_H CTIME_CC CLOCALE_CC CLOCALE_INTERNAL_H ALLOCATOR_H ALLOCATOR_NAME C_INCLUDE_DIR GLIBCXX_C_HEADERS_C_TRUE GLIBCXX_C_HEADERS_C_FALSE GLIBCXX_C_HEADERS_C_STD_TRUE GLIBCXX_C_HEADERS_C_STD_FALSE GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE DEBUG_FLAGS GLIBCXX_BUILD_DEBUG_TRUE GLIBCXX_BUILD_DEBUG_FALSE EXTRA_CXX_FLAGS glibcxx_thread_h WERROR SECTION_FLAGS SECTION_LDFLAGS OPT_LDFLAGS LIBMATHOBJS LIBICONV SYMVER_FILE port_specific_symbol_files ENABLE_SYMVERS_TRUE ENABLE_SYMVERS_FALSE ENABLE_SYMVERS_GNU_TRUE ENABLE_SYMVERS_GNU_FALSE ENABLE_SYMVERS_DARWIN_TRUE ENABLE_SYMVERS_DARWIN_FALSE baseline_dir ATOMICITY_SRCDIR ATOMIC_WORD_SRCDIR CPU_DEFINES_SRCDIR ABI_TWEAKS_SRCDIR OS_INC_SRCDIR glibcxx_prefixdir gxx_include_dir glibcxx_toolexecdir glibcxx_toolexeclibdir GLIBCXX_INCLUDES TOPLEVEL_INCLUDES OPTIMIZE_CXXFLAGS WARN_FLAGS LIBSUPCXX_PICFLAGS LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libtool_VERSION multi_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar glibcxx_builddir glibcxx_srcdir toplevel_srcdir CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LN_S AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBTOOL CXXCPP CPPFLAGS enable_shared enable_static GLIBCXX_HOSTED_TRUE GLIBCXX_HOSTED_FALSE GLIBCXX_BUILD_PCH_TRUE GLIBCXX_BUILD_PCH_FALSE glibcxx_PCHFLAGS CSTDIO_H BASIC_FILE_H BASIC_FILE_CC CPP EGREP check_msgfmt glibcxx_MOFILES glibcxx_POFILES glibcxx_localedir USE_NLS CLOCALE_H CMESSAGES_H CCODECVT_CC CCOLLATE_CC CCTYPE_CC CMESSAGES_CC CMONEY_CC CNUMERIC_CC CTIME_H CTIME_CC CLOCALE_CC CLOCALE_INTERNAL_H ALLOCATOR_H ALLOCATOR_NAME C_INCLUDE_DIR GLIBCXX_C_HEADERS_C_TRUE GLIBCXX_C_HEADERS_C_FALSE GLIBCXX_C_HEADERS_C_STD_TRUE GLIBCXX_C_HEADERS_C_STD_FALSE GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE DEBUG_FLAGS GLIBCXX_BUILD_DEBUG_TRUE GLIBCXX_BUILD_DEBUG_FALSE EXTRA_CXX_FLAGS glibcxx_thread_h WERROR SECTION_FLAGS SECTION_LDFLAGS OPT_LDFLAGS LIBMATHOBJS LIBICONV SYMVER_FILE port_specific_symbol_files ENABLE_SYMVERS_TRUE ENABLE_SYMVERS_FALSE ENABLE_SYMVERS_GNU_TRUE ENABLE_SYMVERS_GNU_FALSE ENABLE_SYMVERS_GNU_NAMESPACE_TRUE ENABLE_SYMVERS_GNU_NAMESPACE_FALSE ENABLE_SYMVERS_DARWIN_TRUE ENABLE_SYMVERS_DARWIN_FALSE baseline_dir ATOMICITY_SRCDIR ATOMIC_WORD_SRCDIR CPU_DEFINES_SRCDIR ABI_TWEAKS_SRCDIR OS_INC_SRCDIR glibcxx_prefixdir gxx_include_dir glibcxx_toolexecdir glibcxx_toolexeclibdir GLIBCXX_INCLUDES TOPLEVEL_INCLUDES OPTIMIZE_CXXFLAGS WARN_FLAGS LIBSUPCXX_PICFLAGS LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n \n # Initialize some variables set by options.\n@@ -87368,7 +87368,7 @@ if test \"${enable_symvers+set}\" = set; then\n   enableval=\"$enable_symvers\"\n \n       case \"$enableval\" in\n-       yes|no|gnu|darwin|darwin-export) ;;\n+       yes|no|gnu|gnu-versioned-namespace|darwin|darwin-export) ;;\n        *) { { echo \"$as_me:$LINENO: error: Unknown argument to enable/disable symvers\" >&5\n echo \"$as_me: error: Unknown argument to enable/disable symvers\" >&2;}\n    { (exit 1); exit 1; }; } ;;\n@@ -87407,7 +87407,7 @@ if test x$enable_symvers = xdarwin-export ; then\n fi\n \n # Check to see if 'gnu' can win.\n-if test $enable_symvers = gnu; then\n+if test $enable_symvers = gnu || test $enable_symvers = gnu-versioned-namespace; then\n   # Check to see if libgcc_s exists, indicating that shared libgcc is possible.\n   echo \"$as_me:$LINENO: checking for shared libgcc\" >&5\n echo $ECHO_N \"checking for shared libgcc... $ECHO_C\" >&6\n@@ -87580,6 +87580,14 @@ case $enable_symvers in\n \n cat >>confdefs.h <<\\_ACEOF\n #define _GLIBCXX_SYMVER_GNU 1\n+_ACEOF\n+\n+    ;;\n+  gnu-versioned-namespace)\n+    SYMVER_FILE=config/abi/pre/gnu-versioned-namespace.ver\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_SYMVER_GNU_NAMESPACE 1\n _ACEOF\n \n     ;;\n@@ -87606,6 +87614,7 @@ fi\n \n \n \n+\n { echo \"$as_me:$LINENO: versioning on shared library symbols is $enable_symvers\" >&5\n echo \"$as_me: versioning on shared library symbols is $enable_symvers\" >&6;}\n \n@@ -88586,6 +88595,17 @@ fi\n \n \n \n+if test $enable_symvers = gnu-versioned-namespace; then\n+  ENABLE_SYMVERS_GNU_NAMESPACE_TRUE=\n+  ENABLE_SYMVERS_GNU_NAMESPACE_FALSE='#'\n+else\n+  ENABLE_SYMVERS_GNU_NAMESPACE_TRUE='#'\n+  ENABLE_SYMVERS_GNU_NAMESPACE_FALSE=\n+fi\n+\n+\n+\n+\n if test $enable_symvers = darwin; then\n   ENABLE_SYMVERS_DARWIN_TRUE=\n   ENABLE_SYMVERS_DARWIN_FALSE='#'\n@@ -88952,6 +88972,13 @@ echo \"$as_me: error: conditional \\\"ENABLE_SYMVERS_GNU\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" >&2;}\n    { (exit 1); exit 1; }; }\n fi\n+if test -z \"${ENABLE_SYMVERS_GNU_NAMESPACE_TRUE}\" && test -z \"${ENABLE_SYMVERS_GNU_NAMESPACE_FALSE}\"; then\n+  { { echo \"$as_me:$LINENO: error: conditional \\\"ENABLE_SYMVERS_GNU_NAMESPACE\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" >&5\n+echo \"$as_me: error: conditional \\\"ENABLE_SYMVERS_GNU_NAMESPACE\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n if test -z \"${ENABLE_SYMVERS_DARWIN_TRUE}\" && test -z \"${ENABLE_SYMVERS_DARWIN_FALSE}\"; then\n   { { echo \"$as_me:$LINENO: error: conditional \\\"ENABLE_SYMVERS_DARWIN\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" >&5\n@@ -89629,6 +89656,8 @@ s,@ENABLE_SYMVERS_TRUE@,$ENABLE_SYMVERS_TRUE,;t t\n s,@ENABLE_SYMVERS_FALSE@,$ENABLE_SYMVERS_FALSE,;t t\n s,@ENABLE_SYMVERS_GNU_TRUE@,$ENABLE_SYMVERS_GNU_TRUE,;t t\n s,@ENABLE_SYMVERS_GNU_FALSE@,$ENABLE_SYMVERS_GNU_FALSE,;t t\n+s,@ENABLE_SYMVERS_GNU_NAMESPACE_TRUE@,$ENABLE_SYMVERS_GNU_NAMESPACE_TRUE,;t t\n+s,@ENABLE_SYMVERS_GNU_NAMESPACE_FALSE@,$ENABLE_SYMVERS_GNU_NAMESPACE_FALSE,;t t\n s,@ENABLE_SYMVERS_DARWIN_TRUE@,$ENABLE_SYMVERS_DARWIN_TRUE,;t t\n s,@ENABLE_SYMVERS_DARWIN_FALSE@,$ENABLE_SYMVERS_DARWIN_FALSE,;t t\n s,@baseline_dir@,$baseline_dir,;t t"}, {"sha": "a027c658c37cc71a337f63c5c023adcdd785064f", "filename": "libstdc++-v3/docs/html/configopts.html", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -277,14 +277,18 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n  </dd>\n \n  <dt><code>--enable-symvers[=style]  </code></dt>\n+\n  <dd><p>In 3.1 and later, tries to turn on symbol versioning in the\n-        shared library (if a shared library has been requested).  The\n-        only 'style' currently supported is 'gnu' which requires that\n-        a recent version of the GNU linker be in use.  With no style\n-        given, the configure script will try to guess if the 'gnu'\n-        style can be used, and if so, will turn it on.  Hopefully\n-        people will volunteer to do other 'style' options.\n+        shared library (if a shared library has been\n+        requested). Values for 'style' that are currently supported\n+        are 'gnu', 'gnu-versioned-namespace', 'darwin', and\n+        'darwin-export'. Both gnu- options require that a recent\n+        version of the GNU linker be in use. Both darwin options are\n+        equivalent. With no style given, the configure script will try\n+        to guess if the 'gnu' style can be used, and if so, will turn\n+        it on.\n      </p>\n+\n  </dd>\n \n  <dt><code>--enable-libstdcxx-pch  </code></dt>"}, {"sha": "6bea7f41e7a3e80e4c165c9eed0ef566173374c6", "filename": "libstdc++-v3/docs/html/debug.html", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdebug.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdebug.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdebug.html?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -163,91 +163,91 @@ <h4 class=\"left\">Using the debugging containers without debug\n   <tr>\n     <td>std::bitset</td>\n     <td>&lt;bitset&gt;</td>\n-    <td>__gnu_debug::bitset</td>\n+    <td>debug::bitset</td>\n     <td>&lt;debug/bitset&gt;</td>\n   </tr>\n   <tr>\n     <td>std::deque</td>\n     <td>&lt;deque&gt;</td>\n-    <td>__gnu_debug::deque</td>\n+    <td>debug::deque</td>\n     <td>&lt;debug/deque&gt;</td>\n   </tr>\n   <tr>\n     <td>std::list</td>\n     <td>&lt;list&gt;</td>\n-    <td>__gnu_debug::list</td>\n+    <td>debug::list</td>\n     <td>&lt;debug/list&gt;</td>\n   </tr>\n   <tr>\n     <td>std::map</td>\n     <td>&lt;map&gt;</td>\n-    <td>__gnu_debug::map</td>\n+    <td>debug::map</td>\n     <td>&lt;debug/map&gt;</td>\n   </tr>\n   <tr>\n     <td>std::multimap</td>\n     <td>&lt;map&gt;</td>\n-    <td>__gnu_debug::multimap</td>\n+    <td>debug::multimap</td>\n     <td>&lt;debug/map&gt;</td>\n   </tr>\n   <tr>\n     <td>std::multiset</td>\n     <td>&lt;set&gt;</td>\n-    <td>__gnu_debug::multiset</td>\n+    <td>debug::multiset</td>\n     <td>&lt;debug/set&gt;</td>\n   </tr>\n   <tr>\n     <td>std::set</td>\n     <td>&lt;set&gt;</td>\n-    <td>__gnu_debug::set</td>\n+    <td>debug::set</td>\n     <td>&lt;debug/set&gt;</td>\n   </tr>\n   <tr>\n     <td>std::string</td>\n     <td>&lt;string&gt;</td>\n-    <td>__gnu_debug::string</td>\n+    <td>debug::string</td>\n     <td>&lt;debug/string&gt;</td>\n   </tr>\n   <tr>\n     <td>std::wstring</td>\n     <td>&lt;string&gt;</td>\n-    <td>__gnu_debug::wstring</td>\n+    <td>debug::wstring</td>\n     <td>&lt;debug/string&gt;</td>\n   </tr>\n   <tr>\n     <td>std::basic_string</td>\n     <td>&lt;string&gt;</td>\n-    <td>__gnu_debug::basic_string</td>\n+    <td>debug::basic_string</td>\n     <td>&lt;debug/string&gt;</td>\n   </tr>\n   <tr>\n     <td>std::vector</td>\n     <td>&lt;vector&gt;</td>\n-    <td>__gnu_debug::vector</td>\n+    <td>debug::vector</td>\n     <td>&lt;debug/vector&gt;</td>\n   </tr>\n   <tr>\n     <td>__gnu_cxx::hash_map</td>\n     <td>&lt;ext/hash_map&gt;</td>\n-    <td>__gnu_debug::hash_map</td>\n+    <td>debug::hash_map</td>\n     <td>&lt;debug/hash_map&gt;</td>\n   </tr>\n   <tr>\n     <td>__gnu_cxx::hash_multimap</td>\n     <td>&lt;ext/hash_map&gt;</td>\n-    <td>__gnu_debug::hash_multimap</td>\n+    <td>debug::hash_multimap</td>\n     <td>&lt;debug/hash_map&gt;</td>\n   </tr>\n   <tr>\n     <td>__gnu_cxx::hash_set</td>\n     <td>&lt;ext/hash_set&gt;</td>\n-    <td>__gnu_debug::hash_set</td>\n+    <td>debug::hash_set</td>\n     <td>&lt;debug/hash_set&gt;</td>\n   </tr>\n   <tr>\n     <td>__gnu_cxx::hash_multiset</td>\n     <td>&lt;ext/hash_set&gt;</td>\n-    <td>__gnu_debug::hash_multiset</td>\n+    <td>debug::hash_multiset</td>\n     <td>&lt;debug/hash_set&gt;</td>\n   </tr>\n </table>\n@@ -297,16 +297,16 @@ <h4 class=\"left\">Debug mode semantics</h4>\n   <li><code>std::basic_string</code> (no safe iterators)</li>\n   <li><code>std::bitset</code></li>\n   <li><code>std::deque</code></li>\n-  <li><code>__gnu_cxx::hash_map</code></li>\n-  <li><code>__gnu_cxx::hash_multimap</code></li>\n-  <li><code>__gnu_cxx::hash_multiset</code></li>\n-  <li><code>__gnu_cxx::hash_set</code></li>\n   <li><code>std::list</code></li>\n   <li><code>std::map</code></li>\n   <li><code>std::multimap</code></li>\n   <li><code>std::multiset</code></li>\n   <li><code>std::set</code></li>\n   <li><code>std::vector</code></li>\n+  <li><code>__gnu_cxx::hash_map</code></li>\n+  <li><code>__gnu_cxx::hash_multimap</code></li>\n+  <li><code>__gnu_cxx::hash_multiset</code></li>\n+  <li><code>__gnu_cxx::hash_set</code></li>\n </ul>\n \n "}, {"sha": "e531fd3fa26b9609c37d37a968da4b6746c04a19", "filename": "libstdc++-v3/docs/html/debug_mode.html", "status": "modified", "additions": 35, "deletions": 47, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdebug_mode.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdebug_mode.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdebug_mode.html?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -330,68 +330,56 @@ <h4><a name=\"compile_coexistence\">Compile-time coexistence of release- and\n <p>In release mode, we define only the release-mode version of the\n   component with its standard name and do not include the debugging\n   component at all. The release mode version is defined within the\n-  namespace <code>__gnu_norm</code>, and then associated with namespace\n-  <code>std</code> via a \"strong using\" directive. Minus the\n-  namespace associations, this method leaves the behavior of release\n-  mode completely unchanged from its behavior prior to the\n-  introduction of the libstdc++ debug mode. Here's an example of what\n-  this ends up looking like, in C++.</p>\n+  namespace <code>std</code>. Minus the namespace associations, this\n+  method leaves the behavior of release mode completely unchanged from\n+  its behavior prior to the introduction of the libstdc++ debug\n+  mode. Here's an example of what this ends up looking like, in\n+  C++.</p>\n \n <pre>\n-namespace __gnu_norm\n+namespace std\n {\n-  using namespace std; \n-  \n   template&lt;typename _Tp, typename _Alloc = allocator&lt;_Tp&gt; &gt;\n     class list\n     {\n       // ...\n-    };\n-} // namespace __gnu_norm\n-\n-namespace std\n-{\n-  using namespace __gnu_norm __attribute__ ((strong));\n-}\n+     };\n+} // namespace std\n </pre>\n   \n-<p>In debug mode we include the release-mode container and also the\n-debug-mode container. The release mode version is defined exactly as\n-before, and the debug-mode container is defined within the namespace\n-<code>__gnu_debug</code>, which is associated with namespace\n+<p>In debug mode we include the release-mode container (which is now\n+defined in in the namespace <code>__gnu_norm</code>) and also the\n+debug-mode container. The debug-mode container is defined within the\n+namespace <code>__gnu_debug</code>, which is associated with namespace\n <code>std</code> via a \"strong using\" directive.  This method allows\n the debug- and release-mode versions of the same component to coexist\n-at compile-time without causing an unreasonable maintenance burden,\n-while minimizing confusion. Again, this boils down to C++ code as\n-follows:</p>\n+at compile-time and link-time without causing an unreasonable\n+maintenance burden, while minimizing confusion. Again, this boils down\n+to C++ code as follows:</p>\n \n <pre>\n-namespace __gnu_norm\n-{\n-  using namespace std; \n-  \n-  template&lt;typename _Tp, typename _Alloc = allocator&lt;_Tp&gt; &gt;\n-    class list\n-    {\n-      // ...\n-    };\n-} // namespace __gnu_norm\n-\n-namespace __gnu_debug\n-{\n-  using namespace std; \n-  \n-  template&lt;typename _Tp, typename _Alloc = allocator&lt;_Tp&gt; &gt;\n-    class list\n-    : public __gnu_norm::list&lt;_Tp, _Alloc&gt;,\n-      public __gnu_debug::_Safe_sequence&lt;list&lt;_Tp, _Alloc&gt; &gt;\n-    {\n-      // ...\n-    };\n-} // namespace __gnu_norm\n-\n namespace std\n {\n+  namespace __gnu_norm\n+  {\n+    template&lt;typename _Tp, typename _Alloc = allocator&lt;_Tp&gt; &gt;\n+      class list\n+      {\n+        // ...\n+      };\n+  } // namespace __gnu_norm\n+\n+  namespace __gnu_debug\n+  {\n+    template&lt;typename _Tp, typename _Alloc = allocator&lt;_Tp&gt; &gt;\n+      class list\n+      : public __gnu_norm::list&lt;_Tp, _Alloc&gt;,\n+        public __gnu_debug::_Safe_sequence&lt;list&lt;_Tp, _Alloc&gt; &gt;\n+      {\n+        // ...\n+      };\n+  } // namespace __gnu_norm\n+\n   using namespace __gnu_debug __attribute__ ((strong));\n }\n </pre>"}, {"sha": "e71b76a0ec1f7dc4635a3c370e9cbd6b492c8f34", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -821,19 +821,30 @@ stamp-host: ${host_headers} ${host_headers_noinst} stamp-${host_alias}\n \t$(STAMP) stamp-host\n \n # Host includes dynamic.\n-${host_builddir}/c++config.h: ${top_builddir}/config.h \\\n-\t\t\t\t${glibcxx_srcdir}/include/bits/c++config \\\n-\t\t\t\tstamp-${host_alias} \\\n-\t\t\t\t${toplevel_srcdir}/gcc/DATESTAMP\n-\t@cat ${glibcxx_srcdir}/include/bits/c++config > $@ ;\\\n-\tsed -e 's/^/#define __GLIBCXX__ /' \\\n-            < ${toplevel_srcdir}/gcc/DATESTAMP >> $@ ;\\\n+if ENABLE_SYMVERS_GNU_NAMESPACE\n+stamp-namespace-version:\n+\techo 1 > stamp-namespace-version\n+else\n+stamp-namespace-version:\n+\techo 0 > stamp-namespace-version\n+endif\n+${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n+\t\t\t      ${glibcxx_srcdir}/include/bits/c++config \\\n+\t\t\t      stamp-${host_alias} \\\n+\t\t\t      ${toplevel_srcdir}/gcc/DATESTAMP \\\n+\t\t\t      stamp-namespace-version\n+\t@date=`cat ${toplevel_srcdir}/gcc/DATESTAMP` ;\\\n+\tnsa_version=`cat stamp-namespace-version` ;\\\n+\tsed -e \"s,define __GLIBCXX__,define __GLIBCXX__ $$date,\" \\\n+\t-e \"s,define _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION, define _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION $$nsa_version,\" \\\n+            < ${glibcxx_srcdir}/include/bits/c++config > $@ ;\\\n \tsed -e 's/HAVE_/_GLIBCXX_HAVE_/g' \\\n \t    -e 's/PACKAGE/_GLIBCXX_PACKAGE/g' \\\n \t    -e 's/VERSION/_GLIBCXX_VERSION/g' \\\n \t    -e 's/WORDS_/_GLIBCXX_WORDS_/g' \\\n \t    < ${CONFIG_HEADER} >> $@ ;\\\n-\techo \"#endif // _CXXCONFIG_\" >>$@\n+\techo \"\" >> $@ ;\\\n+\techo \"#endif // _CXXCONFIG_\" >> $@\n \n # Host includes for threads\n uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]"}, {"sha": "6c97c63c2499d35e9f758ec2c03b630ae2c11f6b", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -103,6 +103,8 @@ ENABLE_SYMVERS_DARWIN_FALSE = @ENABLE_SYMVERS_DARWIN_FALSE@\n ENABLE_SYMVERS_DARWIN_TRUE = @ENABLE_SYMVERS_DARWIN_TRUE@\n ENABLE_SYMVERS_FALSE = @ENABLE_SYMVERS_FALSE@\n ENABLE_SYMVERS_GNU_FALSE = @ENABLE_SYMVERS_GNU_FALSE@\n+ENABLE_SYMVERS_GNU_NAMESPACE_FALSE = @ENABLE_SYMVERS_GNU_NAMESPACE_FALSE@\n+ENABLE_SYMVERS_GNU_NAMESPACE_TRUE = @ENABLE_SYMVERS_GNU_NAMESPACE_TRUE@\n ENABLE_SYMVERS_GNU_TRUE = @ENABLE_SYMVERS_GNU_TRUE@\n ENABLE_SYMVERS_TRUE = @ENABLE_SYMVERS_TRUE@\n EXEEXT = @EXEEXT@\n@@ -1201,19 +1203,27 @@ stamp-host: ${host_headers} ${host_headers_noinst} stamp-${host_alias}\n \t$(STAMP) stamp-host\n \n # Host includes dynamic.\n-${host_builddir}/c++config.h: ${top_builddir}/config.h \\\n-\t\t\t\t${glibcxx_srcdir}/include/bits/c++config \\\n-\t\t\t\tstamp-${host_alias} \\\n-\t\t\t\t${toplevel_srcdir}/gcc/DATESTAMP\n-\t@cat ${glibcxx_srcdir}/include/bits/c++config > $@ ;\\\n-\tsed -e 's/^/#define __GLIBCXX__ /' \\\n-            < ${toplevel_srcdir}/gcc/DATESTAMP >> $@ ;\\\n+@ENABLE_SYMVERS_GNU_NAMESPACE_TRUE@stamp-namespace-version:\n+@ENABLE_SYMVERS_GNU_NAMESPACE_TRUE@\techo 1 > stamp-namespace-version\n+@ENABLE_SYMVERS_GNU_NAMESPACE_FALSE@stamp-namespace-version:\n+@ENABLE_SYMVERS_GNU_NAMESPACE_FALSE@\techo 0 > stamp-namespace-version\n+${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n+\t\t\t      ${glibcxx_srcdir}/include/bits/c++config \\\n+\t\t\t      stamp-${host_alias} \\\n+\t\t\t      ${toplevel_srcdir}/gcc/DATESTAMP \\\n+\t\t\t      stamp-namespace-version\n+\t@date=`cat ${toplevel_srcdir}/gcc/DATESTAMP` ;\\\n+\tnsa_version=`cat stamp-namespace-version` ;\\\n+\tsed -e \"s,define __GLIBCXX__,define __GLIBCXX__ $$date,\" \\\n+\t-e \"s,define _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION, define _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION $$nsa_version,\" \\\n+            < ${glibcxx_srcdir}/include/bits/c++config > $@ ;\\\n \tsed -e 's/HAVE_/_GLIBCXX_HAVE_/g' \\\n \t    -e 's/PACKAGE/_GLIBCXX_PACKAGE/g' \\\n \t    -e 's/VERSION/_GLIBCXX_VERSION/g' \\\n \t    -e 's/WORDS_/_GLIBCXX_WORDS_/g' \\\n \t    < ${CONFIG_HEADER} >> $@ ;\\\n-\techo \"#endif // _CXXCONFIG_\" >>$@\n+\techo \"\" >> $@ ;\\\n+\techo \"#endif // _CXXCONFIG_\" >> $@\n \n ${host_builddir}/gthr.h: ${toplevel_srcdir}/gcc/gthr.h stamp-${host_alias}\n \tsed -e '/^#pragma/b' \\"}, {"sha": "247460105a4e7f217205c8f06d5a1aa08374e7b7", "filename": "libstdc++-v3/include/backward/algo.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgo.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -143,7 +143,3 @@ using __gnu_cxx::power;\n using __gnu_cxx::iota;\n \n #endif /* _BACKWARD_ALGO_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "289e9886d1c2ecf513cb6a423fe123a97e6aee77", "filename": "libstdc++-v3/include/backward/algobase.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgobase.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -89,7 +89,3 @@ using __gnu_cxx::lexicographical_compare_3way;\n using __gnu_cxx::uninitialized_copy_n;\n \n #endif /* _BACKWARD_ALGOBASE_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "9a2c44da144174b18b8eee8005ca5d5d4d4337fc", "filename": "libstdc++-v3/include/backward/bvector.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbvector.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -62,7 +62,3 @@\n typedef std::vector<bool, std::allocator<bool> > bit_vector;\n \n #endif /* _BACKWARD_BVECTOR_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "7972cf7303f2c5ccca788ed6be296d5b273cd5e5", "filename": "libstdc++-v3/include/backward/complex.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fcomplex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fcomplex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fcomplex.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -37,7 +37,3 @@ typedef complex<double>\t\tdouble_complex;\n typedef complex<long double>\tlong_double_complex;\n \n #endif\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "a4a6b41811766f9c648151841b7bad91a17edcec", "filename": "libstdc++-v3/include/backward/deque.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fdeque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fdeque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fdeque.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -64,7 +64,3 @@\n using std::deque;\n \n #endif /* _BACKWARD_DEQUE_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "92835f9b84485dd91a2195deb2b82b5b26a1393a", "filename": "libstdc++-v3/include/backward/fstream.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffstream.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -46,7 +46,3 @@ using std::wstreampos;\n #endif\n \n #endif\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "b5be371d8cd97f0c1fd7c468e7e52d43bf3730d0", "filename": "libstdc++-v3/include/backward/function.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffunction.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -124,7 +124,3 @@ using __gnu_cxx::mem_fun1;\n using __gnu_cxx::mem_fun1_ref;\n \n #endif /* _BACKWARD_FUNCTION_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "aa1452200a3e60fee8545ef9b723cfd8c9e5282c", "filename": "libstdc++-v3/include/backward/hash_map.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_map.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -66,7 +66,3 @@ using __gnu_cxx::hash_map;\n using __gnu_cxx::hash_multimap;\n \n #endif /* _BACKWARD_HASH_MAP_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "7b7511b832cb203bc8caa54738a98758fb02718c", "filename": "libstdc++-v3/include/backward/hashtable.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhashtable.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -70,7 +70,3 @@ using __gnu_cxx::hash;\n using __gnu_cxx::hashtable;\n \n #endif /* _BACKWARD_HASHTABLE_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "ef2e68475aa16f887825a7243a159d3dad3bb508", "filename": "libstdc++-v3/include/backward/heap.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fheap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fheap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fheap.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -65,7 +65,3 @@ using std::make_heap;\n using std::sort_heap;\n \n #endif /* _BACKWARD_HEAP_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "a4099a7bec429766910c355c4a35715c52e1b96e", "filename": "libstdc++-v3/include/backward/iomanip.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiomanip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiomanip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiomanip.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -64,7 +64,3 @@ using std::setprecision;\n using std::setw;\n \n #endif\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "ed275ffa98dd29cac4a2ee11162ab907612225f9", "filename": "libstdc++-v3/include/backward/iostream.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiostream.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -54,7 +54,3 @@ using std::ends;\n using std::flush;\n \n #endif\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "b1c55d189913a3464e71e036e7ad8b38dbb36a5b", "filename": "libstdc++-v3/include/backward/istream.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fistream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fistream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fistream.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -32,12 +32,3 @@\n #include \"iostream.h\"\n \n #endif\n-\n-// Local Variables:\n-// mode:C++\n-// End:\n-\n-\n-\n-\n-"}, {"sha": "89496fb8fff4ea9efb44a41e7993374db518eb35", "filename": "libstdc++-v3/include/backward/iterator.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiterator.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -185,7 +185,3 @@ template <class _ForwardIterator>\n using std::raw_storage_iterator;\n \n #endif /* _BACKWARD_ITERATOR_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "d70a6e4ae7d4f1d6f4d4e67a872be11dfdbc63ac", "filename": "libstdc++-v3/include/backward/list.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Flist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Flist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Flist.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -64,7 +64,3 @@\n using std::list;\n \n #endif /* _BACKWARD_LIST_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "2ff3cec667e7da822aefbdb389884844abd69be7", "filename": "libstdc++-v3/include/backward/map.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmap.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -63,7 +63,3 @@\n using std::map;\n \n #endif /* _BACKWARD_MAP_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "515d2995049bb0ee90aa56a0cc3efc9d127e56ef", "filename": "libstdc++-v3/include/backward/multimap.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmultimap.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -63,7 +63,3 @@\n using std::multimap;\n \n #endif /* _BACKWARD_MULTIMAP_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "1f857ae6eb067f1fb8fde914f5fd70132154fe6b", "filename": "libstdc++-v3/include/backward/multiset.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmultiset.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -63,7 +63,3 @@\n using std::multiset;\n \n #endif /* _BACKWARD_MULTISET_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "07ef9b0f2b37f8a742249e471866933815785414", "filename": "libstdc++-v3/include/backward/ostream.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fostream.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -32,7 +32,3 @@\n #include \"iostream.h\"\n \n #endif\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "4985bcbfdd2af82f8993c2c853ecbd5bbe913296", "filename": "libstdc++-v3/include/backward/pair.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fpair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fpair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fpair.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -64,7 +64,3 @@ using std::pair;\n using std::make_pair;\n \n #endif /* _BACKWARD_PAIR_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "da7505c28d1a9c33f33527967a95a438ac10ba0d", "filename": "libstdc++-v3/include/backward/queue.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fqueue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fqueue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fqueue.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -35,7 +35,3 @@ using std::queue;\n using std::priority_queue;\n \n #endif\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "71e8815326786395c9099922c78e8864a75d7937", "filename": "libstdc++-v3/include/backward/rope.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Frope.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Frope.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Frope.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -54,7 +54,3 @@ using __gnu_cxx::crope;\n using __gnu_cxx::wrope;\n \n #endif /* _BACKWARD_ROPE_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "3c6a390cf49d68f1c96a0e87ca81f8c2175e3200", "filename": "libstdc++-v3/include/backward/set.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fset.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -63,7 +63,3 @@\n using std::set;\n \n #endif /* _BACKWARD_SET_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "9b9a43d3f0d7050d5996e1f135649fe75b53352c", "filename": "libstdc++-v3/include/backward/slist.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fslist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fslist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fslist.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -50,7 +50,3 @@\n using __gnu_cxx::slist;\n \n #endif /* _BACKWARD_SLIST_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "07df41769e00f299570d54a58d481f08299caafe", "filename": "libstdc++-v3/include/backward/stack.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstack.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -66,7 +66,3 @@\n using std::stack;\n \n #endif /* _BACKWARD_STACK_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "c137601e67690518ed79e08109d271b36d6f9629", "filename": "libstdc++-v3/include/backward/stream.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstream.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -32,7 +32,3 @@\n #include \"iostream.h\"\n \n #endif\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "bac24495a0567e10c1207e4775a67164c26eabba", "filename": "libstdc++-v3/include/backward/streambuf.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstreambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstreambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstreambuf.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -34,7 +34,3 @@\n using std::streambuf;\n \n #endif\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "d0d5a13863f79d4077a97a419969d98b6823e602", "filename": "libstdc++-v3/include/backward/strstream", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Backward-compat support -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -55,8 +55,8 @@\n #include <ostream>\n #include <string>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // Class strstreambuf, a streambuf class that manages an array of char.\n   // Note that this class is not a template.\n   class strstreambuf : public basic_streambuf<char, char_traits<char> >\n@@ -175,5 +175,7 @@ namespace std\n   private:\n     strstreambuf _M_buf;\n   };\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n+\n #endif"}, {"sha": "af6e57daa3b032d1a47b7b4f43596275313201eb", "filename": "libstdc++-v3/include/backward/tempbuf.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftempbuf.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -72,7 +72,3 @@ using std::return_temporary_buffer;\n using __gnu_cxx::temporary_buffer;\n \n #endif /* _BACKWARD_TEMPBUF_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "88a2f1d7c824f28911bc91d22995361318456bb6", "filename": "libstdc++-v3/include/backward/tree.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftree.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -50,6 +50,3 @@\n using __gnu_cxx::rb_tree;\n \n #endif\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "8cd8dd0f360818191d46048491aa4f209956ae29", "filename": "libstdc++-v3/include/backward/vector.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fvector.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -64,7 +64,3 @@\n using std::vector;\n \n #endif /* _BACKWARD_VECTOR_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "18bfd5f60eb2f4b1cf415cba408b7438ee792468", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -51,8 +51,8 @@\n // Define the base class to std::allocator.\n #include <bits/c++allocator.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template<typename _Tp>\n     class allocator;\n \n@@ -127,6 +127,7 @@ namespace std\n \n   // Undefine.\n #undef __glibcxx_base_allocator\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "f436e0bdc0035106bb22d856dc2a07e3bb9d8cc2", "filename": "libstdc++-v3/include/bits/atomicity.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomicity.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations -*- C++ -*-\n \n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,18 +35,20 @@\n #ifndef _GLIBCXX_ATOMICITY_H\n #define _GLIBCXX_ATOMICITY_H\t1\n \n+#include <bits/c++config.h>\n #include <bits/atomic_word.h>\n-  \n-namespace __gnu_cxx\n-{\n+\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   _Atomic_word \n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val);\n \n   void\n   __attribute__ ((__unused__))\n   __atomic_add(volatile _Atomic_word* __mem, int __val);\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n /* Even if the CPU doesn't need a memory barrier, we need to ensure that\n    the compiler doesn't reorder memory accesses across the barriers.  */"}, {"sha": "d078431b9fd0994d9931638ac9ce05333d4a5948", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Iostreams base classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2001, 2002, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -43,8 +43,8 @@\n #include <bits/locale_classes.h>\n #include <bits/locale_facets.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // 27.4.5  Template class basic_ios\n   /**\n    *  @brief  Virtual base class for all stream classes.\n@@ -458,7 +458,8 @@ namespace std\n       void\n       _M_cache_locale(const locale& __loc);\n     };\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #ifndef _GLIBCXX_EXPORT_TEMPLATE\n #include <bits/basic_ios.tcc>"}, {"sha": "e8434a5bdf085122834c434423c5b7690397128f", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,7 @@\n // basic_ios member functions -*- C++ -*-\n \n-// Copyright (C) 1999, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2001, 2002, 2003, 2004, 2005\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,8 +38,8 @@\n \n #pragma GCC system_header\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template<typename _CharT, typename _Traits>\n     void\n     basic_ios<_CharT, _Traits>::clear(iostate __state)\n@@ -195,6 +196,7 @@ namespace std\n   extern template class basic_ios<wchar_t>;\n #endif\n #endif\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "acd2f144e818a61786d9bd7e1af8b4cdb595948b", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -45,8 +45,8 @@\n #include <bits/atomicity.h>\n #include <debug/debug.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   /**\n    *  @class basic_string basic_string.h <string>\n    *  @brief  Managing sequences of characters and character-like objects.\n@@ -2443,6 +2443,7 @@ namespace std\n     getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,\n \t    wchar_t __delim);\n #endif  \n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _BASIC_STRING_H */"}, {"sha": "6b21d8307428db06f2d1d8620794d5e092036a73", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -45,8 +45,8 @@\n \n #pragma GCC system_header\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template<typename _Type>\n     inline bool\n     __is_null_pointer(_Type* __ptr)\n@@ -993,6 +993,7 @@ namespace std\n     getline(basic_istream<wchar_t>&, wstring&);\n #endif\n #endif\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "38380b7ee23a45cc80a2ae242c3bc671912614f7", "filename": "libstdc++-v3/include/bits/boost_concept_check.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,4 +1,6 @@\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// -*- C++ -*-\n+\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -48,8 +50,7 @@\n #include <bits/stl_iterator_base_types.h>    // for traits and tags\n #include <utility>                           // for pair<>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n #define _IsUnused __attribute__ ((__unused__))\n \n@@ -923,7 +924,7 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n \n   // HashedAssociativeContainer\n \n-} // namespace __gnu_cxx\n+_GLIBCXX_END_NAMESPACE\n \n #undef _IsUnused\n "}, {"sha": "31a60a7e7b20a1081b9c5a3ea616c5b39f5d2ef5", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 77, "deletions": 11, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -37,33 +37,98 @@\n // Pick up any CPU-specific definitions.\n #include <bits/cpu_defines.h>\n \n-// Debug mode support. Debug mode basic_string is not allowed to be\n-// associated with std, because of locale and exception link\n-// dependence.\n-namespace __gnu_debug_def { }\n+// The current version of the C++ library in compressed ISO date format.\n+#define __GLIBCXX__ \n \n-namespace __gnu_debug \n+// Macros for various namespace association schemes and modes.\n+#ifdef _GLIBCXX_DEBUG\n+# define _GLIBCXX_NAMESPACE_ASSOCIATION_DEBUG 1\n+#endif\n+\n+#define _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION \n+\n+// Macros for namespaces.\n+// _GLIBCXX_BEGIN_NAMESPACE\n+// _GLIBCXX_END_NAMESPACE\n+// _GLIBCXX_BEGIN_NESTED_NAMESPACE\n+// _GLIBCXX_END_NESTED_NAMESPACE\n+#if _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION\n+# define _GLIBCXX_BEGIN_NESTED_NAMESPACE(X, Y) namespace X { namespace Y {\n+# define _GLIBCXX_END_NESTED_NAMESPACE } }\n+# define _GLIBCXX_BEGIN_NAMESPACE(X) _GLIBCXX_BEGIN_NESTED_NAMESPACE(X, _6)\n+# define _GLIBCXX_END_NAMESPACE _GLIBCXX_END_NESTED_NAMESPACE\n+#else\n+# define _GLIBCXX_BEGIN_NAMESPACE(X) namespace X { \n+# define _GLIBCXX_END_NAMESPACE } \n+# if _GLIBCXX_NAMESPACE_ASSOCIATION_DEBUG\n+#  define _GLIBCXX_BEGIN_NESTED_NAMESPACE(X, Y) namespace X { namespace Y {\n+#  define _GLIBCXX_END_NESTED_NAMESPACE  } }\n+# else\n+#  define _GLIBCXX_BEGIN_NESTED_NAMESPACE(X, Y) _GLIBCXX_BEGIN_NAMESPACE(X)\n+#  define _GLIBCXX_END_NESTED_NAMESPACE _GLIBCXX_END_NAMESPACE\n+# endif\n+#endif\n+\n+// Namespace associations for versioning mode.\n+#if _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION\n+namespace std\n+{\n+  namespace _6 { }\n+  using namespace _6 __attribute__ ((strong));\n+}\n+\n+// In addition, other supported namespace configurations.\n+namespace __gnu_cxx \n { \n-  using namespace __gnu_debug_def;\n+  namespace _6 { }\n+  using namespace _6 __attribute__ ((strong));\n }\n \n-#ifdef _GLIBCXX_DEBUG\n-# define _GLIBCXX_STD __gnu_norm\n-# define _GLIBCXX_EXTERN_TEMPLATE 0\n-namespace __gnu_norm \n+namespace __gnu_ext\n { \n-  using namespace std; \n+  namespace _6 { }\n+  using namespace _6 __attribute__ ((strong));\n }\n+\n namespace std\n {\n+  namespace tr1 \n+  { \n+    namespace _6 { }\n+    using namespace _6 __attribute__ ((strong));\n+  }\n+}\n+#endif\n+\n+// Namespace associations for debug mode.\n+#if _GLIBCXX_NAMESPACE_ASSOCIATION_DEBUG\n+namespace std\n+{ \n+  namespace __gnu_norm { }\n+\n+#if 1\n+  namespace __gnu_debug_def { }\n+  namespace __gnu_debug { using namespace __gnu_debug_def; } \n   using namespace __gnu_debug_def __attribute__ ((strong));\n+#else\n+  namespace __gnu_debug { namespace detail { } }\n+  using namespace __gnu_debug __attribute__ ((strong));\n+#endif\n }\n+\n+# define _GLIBCXX_STD __gnu_norm\n+# define _GLIBCXX_EXTERN_TEMPLATE 0\n # if __NO_INLINE__ && !__GXX_WEAK__\n #  warning debug mode without inlining may fail due to lack of weak symbols\n # endif\n #else\n+#if _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION\n+# define _GLIBCXX_STD _6\n+#else\n # define _GLIBCXX_STD std\n #endif\n+#endif\n+\n \n // Allow use of \"export template.\" This is currently not a feature\n // that g++ supports.\n@@ -79,6 +144,7 @@ namespace std\n # define _GLIBCXX_EXTERN_TEMPLATE 1\n #endif\n \n+\n // Certain function definitions that are meant to be overridable from\n // user code are decorated with this macro.  For some targets, this\n // macro causes these definitions to be weak."}, {"sha": "410e01b238d624fb2d1d2c3f6e016f16f267928d", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -46,8 +46,8 @@\n #include <bits/stl_algobase.h>// For copy, lexicographical_compare, fill_n\n #include <bits/postypes.h>    // For streampos\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   /**\n    *  @brief  Mapping from character type to associated types.\n    *\n@@ -204,10 +204,11 @@ namespace __gnu_cxx\n       std::fill_n(__s, __n, __a);\n       return __s;\n     }\n-}\n \n-namespace std\n-{\n+_GLIBCXX_END_NAMESPACE\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // 21.1\n   /**\n    *  @brief  Basis for explicit traits specializations.\n@@ -361,6 +362,6 @@ namespace std\n   };\n #endif //_GLIBCXX_USE_WCHAR_T\n \n-} // namespace std\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "81bf2a6215a64d169e6602ea417d686d151d7898", "filename": "libstdc++-v3/include/bits/concurrence.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcurrence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcurrence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcurrence.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Support for concurrent programing -*- C++ -*-\n \n-// Copyright (C) 2003, 2004\n+// Copyright (C) 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -72,8 +72,8 @@ __gthread_mutex_lock(&NAME)\n \n #endif\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   typedef __glibcxx_mutex_type mutex_type;\n   \n   /// @brief  Scoped lock idiom.\n@@ -95,6 +95,7 @@ namespace __gnu_cxx\n     lock(const lock&);\n     lock& operator=(const lock&);\n   };\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "e75bf47f08b6ad8486c95b5efece21e340d2e911", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -84,17 +84,18 @@ namespace __gnu_internal\n } // namespace __gnu_internal\n \n // Forward declaration hack, should really include this from somewhere.\n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   template<typename _Iterator, typename _Container>\n     class __normal_iterator;\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n struct __true_type { };\n struct __false_type { };\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template<bool>\n     struct __truth_type\n     { typedef __false_type __type; };\n@@ -384,6 +385,6 @@ namespace std\n \t};\n     };\n \n-} // namespace std\n+_GLIBCXX_END_NAMESPACE\n \n #endif //_CPP_TYPE_TRAITS_H"}, {"sha": "2f455930de02d10b35429cd872330a911dd53f35", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -61,8 +61,8 @@\n #ifndef _DEQUE_TCC\n #define _DEQUE_TCC 1\n \n-namespace _GLIBCXX_STD\n-{\n+_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n+\n   template <typename _Tp, typename _Alloc>\n     deque<_Tp, _Alloc>&\n     deque<_Tp, _Alloc>::\n@@ -744,6 +744,7 @@ namespace _GLIBCXX_STD\n       this->_M_impl._M_start._M_set_node(__new_nstart);\n       this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);\n     }\n-} // namespace std\n+\n+_GLIBCXX_END_NESTED_NAMESPACE\n \n #endif"}, {"sha": "08fcdbe5ec96b19a83932889c79e2002df105ebd", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -42,8 +42,8 @@\n \n #pragma GCC system_header\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template<typename _CharT, typename _Traits>\n     void\n     basic_filebuf<_CharT, _Traits>::\n@@ -899,6 +899,7 @@ namespace std\n   extern template class basic_fstream<wchar_t>;\n #endif\n #endif\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "59358c4060efc673d351cbcba09499416ecb6be7", "filename": "libstdc++-v3/include/bits/functexcept.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -38,10 +38,11 @@\n #ifndef _FUNCTEXCEPT_H\n #define _FUNCTEXCEPT_H 1\n \n+#include <bits/c++config.h>\n #include <exception_defines.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // Helper for exception objects in <except>\n   void\n   __throw_bad_exception(void) __attribute__((__noreturn__));\n@@ -88,6 +89,7 @@ namespace std\n   // Helpers for exception objects in basic_ios\n   void\n   __throw_ios_failure(const char*) __attribute__((__noreturn__));\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "560aeb5e8c9faf348723d57edb0e2625b51c351d", "filename": "libstdc++-v3/include/bits/gslice.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- gslice class.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -40,8 +40,8 @@\n \n #pragma GCC system_header\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   /**\n    *  @brief  Class defining multi-dimensional subset of an array.\n    *\n@@ -165,10 +165,6 @@ namespace std\n     return *this;\n   }\n \n-} // std::\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _GSLICE_H */\n-\n-// Local Variables:\n-// mode:c++\n-// End:"}, {"sha": "0b12207d0397edaf970c0645220188a8f12d4255", "filename": "libstdc++-v3/include/bits/gslice_array.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- gslice_array class.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -40,8 +40,8 @@\n \n #pragma GCC system_header\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   /**\n    *  @brief  Reference to multi-dimensional subset of an array.\n    *\n@@ -209,10 +209,6 @@ _DEFINE_VALARRAY_OPERATOR(>>, __shift_right)\n \n #undef _DEFINE_VALARRAY_OPERATOR\n \n-} // std::\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _GSLICE_ARRAY_H */\n-\n-// Local Variables:\n-// mode:c++\n-// End:"}, {"sha": "c6038e3511e4e768d3ffcc1c9bb73cb0460c7b5a", "filename": "libstdc++-v3/include/bits/indirect_array.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- indirect_array class.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2005\n //  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -40,8 +40,8 @@\n \n #pragma GCC system_header\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   /**\n    *  @brief  Reference to arbitrary subset of an array.\n    *\n@@ -203,10 +203,6 @@ _DEFINE_VALARRAY_OPERATOR(>>, __shift_right)\n \n #undef _DEFINE_VALARRAY_OPERATOR\n \n-} // std::\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _INDIRECT_ARRAY_H */\n-\n-// Local Variables:\n-// mode:c++\n-// End:"}, {"sha": "cc88f40f861d12851c22ce9ea8c146149785f937", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Iostreams base classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -46,8 +46,8 @@\n #include <bits/localefwd.h>\n #include <bits/locale_classes.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // The following definitions of bitmask types are enums, not ints,\n   // as permitted (but not required) in the standard, in order to provide\n   // better type safety in iostream calls.  A side effect is that\n@@ -961,7 +961,8 @@ namespace std\n     __base.setf(ios_base::scientific, ios_base::floatfield);\n     return __base;\n   }\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _IOS_BASE_H */\n "}, {"sha": "541e75afb8016ab0f3455d1241f1b92fff7a38e1", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -45,8 +45,8 @@\n #include <locale>\n #include <ostream> // For flush()\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template<typename _CharT, typename _Traits>\n     basic_istream<_CharT, _Traits>::sentry::\n     sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)\n@@ -1281,6 +1281,7 @@ namespace std\n   extern template class basic_iostream<wchar_t>;\n #endif\n #endif\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "355ec75ba953f5465b918bdade3032e897c64722", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -61,8 +61,8 @@\n #ifndef _LIST_TCC\n #define _LIST_TCC 1\n \n-namespace _GLIBCXX_STD\n-{\n+_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n+\n   template<typename _Tp, typename _Alloc>\n     void\n     _List_base<_Tp, _Alloc>::\n@@ -373,7 +373,8 @@ namespace _GLIBCXX_STD\n \t    swap(*(__fill - 1));\n \t  }\n       }\n-} // namespace std\n+\n+_GLIBCXX_END_NESTED_NAMESPACE\n \n #endif /* _LIST_TCC */\n "}, {"sha": "3abe415046529f065a85f50ec2608b1ae45f3146", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -48,8 +48,8 @@\n #include <bits/atomicity.h>\n #include <bits/gthr.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // 22.1.1 Class locale\n   /**\n    *  @brief  Container class for localization functionality.\n@@ -577,6 +577,7 @@ namespace std\n       delete [] _M_impl->_M_names[0];\n       _M_impl->_M_names[0] = 0;   // Unnamed.\n     }\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "339bb5339b27e594109b16312dea54e1e5a9a5a3", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -48,8 +48,8 @@\n #include <bits/ios_base.h>  // For ios_base, ios_base::iostate\n #include <streambuf>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // NB: Don't instantiate required wchar_t facets if no wchar_t support.\n #ifdef _GLIBCXX_USE_WCHAR_T\n # define  _GLIBCXX_NUM_FACETS 28\n@@ -4573,6 +4573,7 @@ namespace std\n     inline _CharT\n     tolower(_CharT __c, const locale& __loc)\n     { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "9d337e9defa6a50cefcccf60f9a5493f15463ae1", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -42,8 +42,8 @@\n #include <typeinfo>\t\t// For bad_cast.\n #include <bits/streambuf_iterator.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template<typename _Facet>\n     locale\n     locale::combine(const locale& __other) const\n@@ -2761,6 +2761,7 @@ namespace std\n     has_facet<messages<wchar_t> >(const locale&);\n #endif\n #endif\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "94cafb2e3872c9ab035c253a6e39ff6add28f0de", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -47,8 +47,8 @@\n #include <iosfwd>\t\t// For ostreambuf_iterator, istreambuf_iterator\n #include <bits/functexcept.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // 22.1.1 Locale\n   class locale;\n \n@@ -187,6 +187,7 @@ namespace std\n \t__throw_bad_cast();\n       return *__f;\n     }\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "f2c6661268b7378e85d80a60dc81ab43db37e036", "filename": "libstdc++-v3/include/bits/mask_array.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- mask_array class.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2005\n //  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -40,8 +40,8 @@\n \n #pragma GCC system_header\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   /**\n    *  @brief  Reference to selected subset of an array.\n    *\n@@ -199,10 +199,6 @@ _DEFINE_VALARRAY_OPERATOR(>>, __shift_right)\n \n #undef _DEFINE_VALARRAY_OPERATOR\n \n-} // std::\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _MASK_ARRAY_H */\n-\n-// Local Variables:\n-// mode:c++\n-// End:"}, {"sha": "1642583845fa2ca47e609f74fc9a67cc4d37bce6", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -44,8 +44,8 @@\n \n #include <locale>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>::sentry::\n     sentry(basic_ostream<_CharT, _Traits>& __os)\n@@ -818,6 +818,7 @@ namespace std\n   extern template wostream& operator<<(wostream&, const char*);\n #endif\n #endif\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "97ab8d1e08993809ab4af0e01b0dd3625c125b30", "filename": "libstdc++-v3/include/bits/postypes.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Position types -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -49,8 +49,8 @@\n #include <stdint.h> // For int64_t\n #endif\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // The types streamoff, streampos and wstreampos and the class\n   // template fpos<> are described in clauses 21.1.2, 21.1.3, 27.1.2,\n   // 27.2, 27.4.1, 27.4.3 and D.6. Despite all this verbage, the\n@@ -210,6 +210,7 @@ namespace std\n   typedef fpos<mbstate_t> streampos;\n   /// File position for wchar_t streams.\n   typedef fpos<mbstate_t> wstreampos;\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "41debfe55397b7679d6538cf8bd7cdad38d96a6b", "filename": "libstdc++-v3/include/bits/slice_array.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- slice_array class.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -40,8 +40,8 @@\n \n #pragma GCC system_header\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   /**\n    *  @brief  Class defining one-dimensional subset of an array.\n    *\n@@ -264,10 +264,6 @@ _DEFINE_VALARRAY_OPERATOR(>>, __shift_right)\n \n #undef _DEFINE_VALARRAY_OPERATOR\n \n-} // std::\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _SLICE_ARRAY_H */\n-\n-// Local Variables:\n-// mode:c++\n-// End:"}, {"sha": "eb12ca45891abc090eb8ddef3c5452c74201c8c9", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // String based streams -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2001, 2002, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -44,8 +44,8 @@\n \n #include <sstream>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template <class _CharT, class _Traits, class _Alloc>\n     typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type\n     basic_stringbuf<_CharT, _Traits, _Alloc>::\n@@ -233,6 +233,7 @@ namespace std\n   extern template class basic_stringstream<wchar_t>;\n #endif\n #endif\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "355d859a901b18fff0973686948f2c8bacbec161", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -67,8 +67,8 @@\n \n // See concept_check.h for the __glibcxx_*_requires macros.\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   /**\n    *  @brief Find the median of three values.\n    *  @param  a  A value.\n@@ -5337,6 +5337,6 @@ namespace std\n \t\t\t     __comp);\n     }\n \n-} // namespace std\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _ALGO_H */"}, {"sha": "730699648e1802f38a9fda549e18d818d5ad3013", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -75,8 +75,7 @@\n #include <bits/concept_check.h>\n #include <debug/debug.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief Swaps two values.\n@@ -909,6 +908,6 @@ namespace std\n #endif /* CHAR_MAX == SCHAR_MAX */\n   }\n \n-} // namespace std\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "0779ea692d6c179286af3d39a64f6596b622df1d", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -61,8 +61,8 @@\n #ifndef _BVECTOR_H\n #define _BVECTOR_H 1\n \n-namespace _GLIBCXX_STD\n-{\n+_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n+\n   typedef unsigned long _Bit_type;\n   enum { _S_word_bit = int(CHAR_BIT * sizeof(_Bit_type)) };\n \n@@ -397,13 +397,14 @@ namespace _GLIBCXX_STD\n \t\t\t     _M_impl._M_end_of_storage - _M_impl._M_start._M_p);\n       }\n     };\n-} // namespace std\n+\n+_GLIBCXX_END_NESTED_NAMESPACE\n \n // Declare a partial specialization of vector<T, Alloc>.\n #include <bits/stl_vector.h>\n \n-namespace _GLIBCXX_STD\n-{\n+_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n+\n   /**\n    *  @brief  A specialization of vector for booleans which offers fixed time\n    *  access to individual elements in any order.\n@@ -953,6 +954,7 @@ template<typename _Alloc>\n     clear()\n     { erase(begin(), end()); }\n   };\n-} // namespace std\n+\n+_GLIBCXX_END_NESTED_NAMESPACE\n \n #endif"}, {"sha": "0a03fb72d3f0803cd14fc713ffdaede9d4e8cddd", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -64,8 +64,8 @@\n #include <bits/cpp_type_traits.h>\n #include <new>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   /**\n    * @if maint\n    * Constructs an object in existing memory by invoking an allocated\n@@ -181,9 +181,8 @@ namespace std\n     {\n       _Destroy(__first, __last);\n     }\n-   \n \n-} // namespace std\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _STL_CONSTRUCT_H */\n "}, {"sha": "107bbfe69a1ccbd7c0239faa8204db756bca5eac", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -65,8 +65,8 @@\n #include <bits/stl_iterator_base_types.h>\n #include <bits/stl_iterator_base_funcs.h>\n \n-namespace _GLIBCXX_STD\n-{\n+_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n+\n   /**\n    *  @if maint\n    *  @brief This function controls the size of memory nodes.\n@@ -1580,6 +1580,7 @@ namespace _GLIBCXX_STD\n     inline void\n     swap(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y)\n     { __x.swap(__y); }\n-} // namespace std\n+\n+_GLIBCXX_END_NESTED_NAMESPACE\n \n #endif /* _DEQUE_H */"}, {"sha": "db213dc0a925996e28dea009909d357554230f48", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -61,8 +61,8 @@\n #ifndef _FUNCTION_H\n #define _FUNCTION_H 1\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // 20.3.1 base classes\n   /** @defgroup s20_3_1_base Functor Base Classes\n    *  Function objects, or @e functors, are objects with an @c operator()\n@@ -750,10 +750,6 @@ namespace std\n \n   /** @}  */\n \n-} // namespace std\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _FUNCTION_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "f9e337f31be8e597760bbebdae789449d1c65e00", "filename": "libstdc++-v3/include/bits/stl_heap.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Heap implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -62,8 +62,8 @@\n \n #include <debug/debug.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // is_heap, a predicate testing whether or not a range is\n   // a heap.  This function is an extension, not part of the C++\n   // standard.\n@@ -458,10 +458,6 @@ namespace std\n \tstd::pop_heap(__first, __last--, __comp);\n     }\n \n-} // namespace std\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _STL_HEAP_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "7746aa2b9508692754c6d2e9cd67509c41134c00", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -67,8 +67,8 @@\n \n #include <bits/cpp_type_traits.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // 24.4.1 Reverse iterators\n   /**\n    *  \"Bidirectional and random access iterators have corresponding reverse\n@@ -616,10 +616,11 @@ namespace std\n       return insert_iterator<_Container>(__x,\n \t\t\t\t\t typename _Container::iterator(__i));\n     }\n-} // namespace std\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_END_NAMESPACE\n+\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   // This iterator adapter is 'normal' in the sense that it does not\n   // change the semantics of any of the operators of its iterator\n   // parameter.  Its primary purpose is to convert an iterator that is\n@@ -819,10 +820,7 @@ namespace __gnu_cxx\n     operator+(typename __normal_iterator<_Iterator, _Container>::difference_type\n \t      __n, const __normal_iterator<_Iterator, _Container>& __i)\n     { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }\n-} // namespace __gnu_cxx\n \n-#endif\n+_GLIBCXX_END_NAMESPACE\n \n-// Local Variables:\n-// mode:C++\n-// End:\n+#endif"}, {"sha": "82bf040afb221b4f9dd77b5830b34bef988379ae", "filename": "libstdc++-v3/include/bits/stl_iterator_base_funcs.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Functions used by iterators -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -67,8 +67,8 @@\n #pragma GCC system_header\n #include <bits/concept_check.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template<typename _InputIterator>\n     inline typename iterator_traits<_InputIterator>::difference_type\n     __distance(_InputIterator __first, _InputIterator __last,\n@@ -174,6 +174,7 @@ namespace std\n       // concept requirements -- taken care of in __advance\n       std::__advance(__i, __n, std::__iterator_category(__i));\n     }\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _ITERATOR_BASE_FUNCS_H */"}, {"sha": "c02cd261d8d1e5864ae8cd9a029cafa915855289", "filename": "libstdc++-v3/include/bits/stl_iterator_base_types.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Types used in iterator implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -66,8 +66,8 @@\n \n #pragma GCC system_header\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   //@{\n   /**\n    *  @defgroup iterator_tags Iterator Tags\n@@ -164,7 +164,7 @@ namespace std\n     __iterator_category(const _Iter&)\n     { return typename iterator_traits<_Iter>::iterator_category(); }\n \n-} // namespace std\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _ITERATOR_BASE_TYPES_H */\n "}, {"sha": "03b70a39fb03e6574d91f8b9359427d534fc98be", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -63,8 +63,8 @@\n \n #include <bits/concept_check.h>\n \n-namespace _GLIBCXX_STD\n-{\n+_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n+\n   // Supporting structures are split into common and templated types; the\n   // latter publicly inherits from the former in an effort to reduce code\n   // duplication.  This results in some \"needless\" static_cast'ing later on,\n@@ -1221,7 +1221,8 @@ namespace _GLIBCXX_STD\n     inline void\n     swap(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)\n     { __x.swap(__y); }\n-} // namespace std\n+\n+_GLIBCXX_END_NESTED_NAMESPACE\n \n #endif /* _LIST_H */\n "}, {"sha": "a1cfafb850a74595ee074e5473ba7d23e4c3e473", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -64,8 +64,8 @@\n #include <bits/functexcept.h>\n #include <bits/concept_check.h>\n \n-namespace _GLIBCXX_STD\n-{\n+_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n+\n   /**\n    *  @brief A standard container made up of (key,value) pairs, which can be\n    *  retrieved based on a key, in logarithmic time.\n@@ -726,6 +726,7 @@ namespace _GLIBCXX_STD\n     swap(map<_Key, _Tp, _Compare, _Alloc>& __x,\n \t map<_Key, _Tp, _Compare, _Alloc>& __y)\n     { __x.swap(__y); }\n-} // namespace std\n+\n+_GLIBCXX_END_NESTED_NAMESPACE\n \n #endif /* _MAP_H */"}, {"sha": "4adf65ba836049b451aad96abcde22e7f463082c", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -63,8 +63,8 @@\n \n #include <bits/concept_check.h>\n \n-namespace _GLIBCXX_STD\n-{\n+_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n+\n   // Forward declaration of operators < and ==, needed for friend declaration.\n \n   template <typename _Key, typename _Tp,\n@@ -679,6 +679,7 @@ namespace _GLIBCXX_STD\n     swap(multimap<_Key, _Tp, _Compare, _Alloc>& __x,\n          multimap<_Key, _Tp, _Compare, _Alloc>& __y)\n     { __x.swap(__y); }\n-} // namespace std\n+\n+_GLIBCXX_END_NESTED_NAMESPACE\n \n #endif /* _MULTIMAP_H */"}, {"sha": "f685b4f6e636ceeaf21d5f155386a53d68cd52f4", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -63,8 +63,7 @@\n \n #include <bits/concept_check.h>\n \n-namespace _GLIBCXX_STD\n-{\n+_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \n   // Forward declaration of operators < and ==, needed for friend declaration.\n   template <class _Key, class _Compare = std::less<_Key>,\n@@ -575,6 +574,6 @@ namespace _GLIBCXX_STD\n \t multiset<_Key, _Compare, _Alloc>& __y)\n     { __x.swap(__y); }\n \n-} // namespace std\n+_GLIBCXX_END_NESTED_NAMESPACE\n \n #endif /* _MULTISET_H */"}, {"sha": "82bee216d102d137fe5ea0d606fd97bfa53d4027", "filename": "libstdc++-v3/include/bits/stl_numeric.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Numeric functions implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -63,8 +63,7 @@\n \n #include <debug/debug.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief  Accumulate values in a range.\n@@ -335,6 +334,6 @@ namespace std\n       return ++__result;\n     }\n \n-} // namespace std\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _STL_NUMERIC_H */"}, {"sha": "b4bb00c26e10fc92fe3807325a0a6b43709f50e3", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Pair implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -61,8 +61,8 @@\n #ifndef _PAIR_H\n #define _PAIR_H 1\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   /// pair holds two objects of arbitrary type.\n   template<class _T1, class _T2>\n     struct pair\n@@ -143,6 +143,7 @@ namespace std\n     inline pair<_T1, _T2>\n     make_pair(_T1 __x, _T2 __y)\n     { return pair<_T1, _T2>(__x, __y); }\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _PAIR_H */"}, {"sha": "e0da22fb21355935ecd375a441689d6531caaf9e", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,7 @@\n // Queue implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -64,8 +65,8 @@\n #include <bits/concept_check.h>\n #include <debug/debug.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // Forward declarations of operators < and ==, needed for friend declaration.\n   template<typename _Tp, typename _Sequence = deque<_Tp> >\n     class queue;\n@@ -465,6 +466,7 @@ namespace std\n     };\n \n   // No equality/comparison operators are provided for priority_queue.\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _QUEUE_H */"}, {"sha": "615da28524e008a14bdf0baa8642a63362d0503b", "filename": "libstdc++-v3/include/bits/stl_raw_storage_iter.h", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -61,8 +61,8 @@\n #ifndef _STL_RAW_STORAGE_ITERATOR_H\n #define _STL_RAW_STORAGE_ITERATOR_H 1\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   /**\n    *  This iterator class lets algorithms store their results into\n    *  uninitialized memory.\n@@ -104,10 +104,7 @@ namespace std\n \treturn __tmp;\n       }\n     };\n-} // namespace std\n \n-#endif\n+_GLIBCXX_END_NAMESPACE\n \n-// Local Variables:\n-// mode:C++\n-// End:\n+#endif"}, {"sha": "11fc30dedd8e1dbafd0eba812e36882619726aa0", "filename": "libstdc++-v3/include/bits/stl_relops.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_relops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_relops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_relops.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // std::rel_ops implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -71,8 +71,8 @@\n #ifndef _STL_RELOPS_H\n #define _STL_RELOPS_H 1\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   namespace rel_ops\n   {\n     /** @namespace std::rel_ops\n@@ -132,6 +132,7 @@ namespace std\n       { return !(__x < __y); }\n \n   } // namespace rel_ops\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _STL_RELOPS_H */"}, {"sha": "042e95fc20fa9d0e071cfc7f6d963d59393f3efd", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -63,8 +63,8 @@\n \n #include <bits/concept_check.h>\n \n-namespace _GLIBCXX_STD\n-{\n+_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n+\n   // Forward declarations of operators < and ==, needed for friend declaration.\n   template<class _Key, class _Compare = std::less<_Key>,\n \t   class _Alloc = std::allocator<_Key> >\n@@ -587,6 +587,6 @@ namespace _GLIBCXX_STD\n     swap(set<_Key, _Compare, _Alloc>& __x, set<_Key, _Compare, _Alloc>& __y)\n     { __x.swap(__y); }\n \n-} // namespace std\n+_GLIBCXX_END_NESTED_NAMESPACE\n \n #endif /* _SET_H */"}, {"sha": "22e566038934eb40b25714e330118932cc6afda9", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Stack implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -64,8 +64,8 @@\n #include <bits/concept_check.h>\n #include <debug/debug.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // Forward declarations of operators == and <, needed for friend\n   // declaration.\n   template<typename _Tp, typename _Sequence = deque<_Tp> >\n@@ -267,6 +267,7 @@ namespace std\n     inline bool\n     operator>=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)\n     { return !(__x < __y); }\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _STACK_H */"}, {"sha": "970af452de7229fc330509a3f105df6c3e117921", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -63,8 +63,8 @@\n \n #include <memory>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   /**\n    *  @if maint\n    *  This class is used in two places: stl_algo.h and ext/memory,\n@@ -164,7 +164,8 @@ namespace std\n \t  __throw_exception_again;\n \t}\n     }\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _TEMPBUF_H */\n "}, {"sha": "ad0e68df9c1625c393e6ff76943e7acded69ddad", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -69,8 +69,8 @@\n #include <bits/stl_function.h>\n #include <bits/cpp_type_traits.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // Red-black tree class, designed for use in implementing STL\n   // associative containers (set, multiset, map, and multimap). The\n   // insertion and deletion algorithms are based on those in Cormen,\n@@ -1492,6 +1492,7 @@ namespace std\n \treturn false;\n       return true;\n     }\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "c5748fc284d67bb532288656c35e8d8a418594bb", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -63,8 +63,8 @@\n \n #include <cstring>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // uninitialized_copy\n   template<typename _InputIterator, typename _ForwardIterator>\n     inline _ForwardIterator\n@@ -392,6 +392,6 @@ namespace std\n \t}\n     }\n \n-} // namespace std\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _STL_UNINITIALIZED_H */"}, {"sha": "c4107fa6e778ddf1c093ad2d73cbd40950dfdb62", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -65,8 +65,8 @@\n #include <bits/functexcept.h>\n #include <bits/concept_check.h>\n \n-namespace _GLIBCXX_STD\n-{\n+_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n+\n   /**\n    *  @if maint\n    *  See bits/stl_deque.h's _Deque_base for an explanation.\n@@ -985,6 +985,7 @@ namespace _GLIBCXX_STD\n     inline void\n     swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)\n     { __x.swap(__y); }\n-} // namespace std\n+\n+_GLIBCXX_END_NESTED_NAMESPACE\n \n #endif /* _VECTOR_H */"}, {"sha": "dabb9ce46a23523debe5512fb06a5f1931e0262f", "filename": "libstdc++-v3/include/bits/stream_iterator.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Stream iterators\n \n-// Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,8 +39,8 @@\n \n #include <debug/debug.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   /// Provides input iterator semantics for streams.\n   template<typename _Tp, typename _CharT = char,\n            typename _Traits = char_traits<_CharT>, typename _Dist = ptrdiff_t>\n@@ -210,5 +210,7 @@ namespace std\n       operator++(int)\n       { return *this; }\n     };\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n+\n #endif"}, {"sha": "b1a4876fded89c00f7ff9c6536fc5ddcd77c5bc9", "filename": "libstdc++-v3/include/bits/streambuf.tcc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -42,8 +42,8 @@\n \n #pragma GCC system_header\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template<typename _CharT, typename _Traits>\n     streamsize\n     basic_streambuf<_CharT, _Traits>::\n@@ -149,6 +149,7 @@ namespace std\n     __copy_streambufs(basic_streambuf<wchar_t>*, basic_streambuf<wchar_t>*);\n #endif\n #endif\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "e3b5a3b4c3a55452f216d467360be4b4bfb3af14", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Streambuf iterators\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -43,8 +43,8 @@\n \n // NB: Should specialize copy, find algorithms for streambuf iterators.\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // 24.5.3 Template class istreambuf_iterator\n   /// Provides input iterator semantics for streambufs.\n   template<typename _CharT, typename _Traits>\n@@ -254,5 +254,7 @@ namespace std\n \treturn *this;\n       }\n     };\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n+\n #endif"}, {"sha": "8158e8572e6a18b509e74a6cea310a9ddd4b8674", "filename": "libstdc++-v3/include/bits/stringfwd.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // String support -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -43,8 +43,8 @@\n \n #include <bits/c++config.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template<typename _Alloc>\n     class allocator;\n \n@@ -64,6 +64,7 @@ namespace std\n \n   typedef basic_string<wchar_t> wstring;\n #endif\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif\t// _STRINGFWD_H"}, {"sha": "62d9853c5a880c1fb16862faf767e954ef79a565", "filename": "libstdc++-v3/include/bits/valarray_after.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_after.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_after.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_after.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- internal _Meta class.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -40,8 +40,8 @@\n \n #pragma GCC system_header\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   //\n   // gslice_array closure.\n   //\n@@ -549,10 +549,6 @@ _DEFINE_EXPR_BINARY_FUNCTION(pow)\n \n #undef _DEFINE_EXPR_BINARY_FUNCTION\n \n-} // std::\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _CPP_VALARRAY_AFTER_H */\n-\n-// Local Variables:\n-// mode:c++\n-// End:"}, {"sha": "490384fdcc4743f2c508e1134bfcc99d08ff75d6", "filename": "libstdc++-v3/include/bits/valarray_array.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -46,8 +46,8 @@\n #include <cstring>\n #include <new>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   //\n   // Helper functions on raw pointers\n   //\n@@ -682,7 +682,8 @@ namespace std\n    _DEFINE_ARRAY_FUNCTION(>>, __shift_right)\n \n #undef _DEFINE_VALARRAY_FUNCTION\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #ifndef _GLIBCXX_EXPORT_TEMPLATE\n # include <bits/valarray_array.tcc>"}, {"sha": "f00ffb4dc8bd8eb48e03d5f98fffeb6df6c76d4b", "filename": "libstdc++-v3/include/bits/valarray_array.tcc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.tcc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- internal _Array helper class.\n \n-// Copyright (C) 1997, 1998, 1999, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,8 +37,8 @@\n #ifndef _VALARRAY_ARRAY_TCC\n #define _VALARRAY_ARRAY_TCC 1\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template<typename _Tp>\n     void\n     __valarray_fill(_Array<_Tp> __a, size_t __n, _Array<bool> __m,\n@@ -240,6 +240,7 @@ namespace std\n \t  new (__q) _Tp(*__p);\n \t}\n     }\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _VALARRAY_ARRAY_TCC */"}, {"sha": "5a294af893d43eddeb08cac30875fe8fdf80aed5", "filename": "libstdc++-v3/include/bits/valarray_before.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_before.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_before.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_before.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- internal _Meta class.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -42,8 +42,8 @@\n \n #include <bits/slice_array.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   //\n   // Implementing a loosened valarray return value is tricky.\n   // First we need to meet 26.3.1/3: we should not add more than\n@@ -730,10 +730,6 @@ namespace std\n       _SClos (_Array<_Tp> __a, const slice& __s) : _Base (__a, __s) {}\n     };\n \n-} // std::\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _CPP_VALARRAY_BEFORE_H */\n-\n-// Local Variables:\n-// mode:c++\n-// End:"}, {"sha": "f476c460d33e6eacc7c9793642039a6b6ad9f56e", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -61,8 +61,8 @@\n #ifndef _VECTOR_TCC\n #define _VECTOR_TCC 1\n \n-namespace _GLIBCXX_STD\n-{\n+_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n+\n   template<typename _Tp, typename _Alloc>\n     void\n     vector<_Tp, _Alloc>::\n@@ -490,6 +490,7 @@ namespace _GLIBCXX_STD\n \t      }\n \t  }\n       }\n-} // namespace std\n+\n+_GLIBCXX_END_NESTED_NAMESPACE\n \n #endif /* _VECTOR_TCC */"}, {"sha": "92473981df8c2129d559f2915da7f544c8d2b1e0", "filename": "libstdc++-v3/include/c_std/std_cctype.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cctype.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -65,8 +65,8 @@\n #undef tolower\n #undef toupper\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   using ::isalnum;\n   using ::isalpha;\n   using ::iscntrl;\n@@ -80,6 +80,7 @@ namespace std\n   using ::isxdigit;\n   using ::tolower;\n   using ::toupper;\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "2ec904c6cd89c1ec3614740a8c7b8398d787a62d", "filename": "libstdc++-v3/include/c_std/std_clocale.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_clocale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_clocale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_clocale.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -47,17 +47,19 @@\n \n #pragma GCC system_header\n \n+#include <bits/c++config.h>\n #include <locale.h>\n \n // Get rid of those macros defined in <locale.h> in lieu of real functions.\n #undef setlocale\n #undef localeconv\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   using ::lconv;\n   using ::setlocale;\n   using ::localeconv;\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "7728faf176fcd048d5ea280b83c63ab50bc1182c", "filename": "libstdc++-v3/include/c_std/std_cmath.h", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -78,9 +78,8 @@\n #undef tan\n #undef tanh\n \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n \n-namespace std\n-{\n   // Forward declaration of a helper function.  This really should be\n   // an `exported' forward declaration.\n   template<typename _Tp> _Tp __cmath_power(_Tp, unsigned int);\n@@ -435,15 +434,17 @@ namespace std\n     inline typename __enable_if<double, __is_integer<_Tp>::__value>::__type\n     tanh(_Tp __x)\n     { return __builtin_tanh(__x); }\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n \n #if _GLIBCXX_USE_C99_MATH\n #if !_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC\n // These are possible macros imported from C99-land. For strict\n // conformance, remove possible C99-injected names from the global\n // namespace, and sequester them in the __gnu_cxx extension namespace.\n-namespace __gnu_cxx\n-{\n+\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   template<typename _Tp>\n     inline int\n     __capture_fpclassify(_Tp __f) { return fpclassify(__f); }\n@@ -496,7 +497,8 @@ namespace __gnu_cxx\n     inline int\n     __capture_isunordered(_Tp __f1, _Tp __f2)\n     { return isunordered(__f1, __f2); }\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n \n // Only undefine the C99 FP macros, if actually captured for namespace movement\n #undef fpclassify\n@@ -512,62 +514,64 @@ namespace __gnu_cxx\n #undef islessgreater\n #undef isunordered\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template<typename _Tp>\n     inline int\n-    fpclassify(_Tp __f) { return __gnu_cxx::__capture_fpclassify(__f); }\n+    fpclassify(_Tp __f) { return ::__gnu_cxx::__capture_fpclassify(__f); }\n \n   template<typename _Tp>\n     inline int\n-    isfinite(_Tp __f) { return __gnu_cxx::__capture_isfinite(__f); }\n+    isfinite(_Tp __f) { return ::__gnu_cxx::__capture_isfinite(__f); }\n \n   template<typename _Tp>\n     inline int\n-    isinf(_Tp __f) { return __gnu_cxx::__capture_isinf(__f); }\n+    isinf(_Tp __f) { return ::__gnu_cxx::__capture_isinf(__f); }\n \n   template<typename _Tp>\n     inline int\n-    isnan(_Tp __f) { return __gnu_cxx::__capture_isnan(__f); }\n+    isnan(_Tp __f) { return ::__gnu_cxx::__capture_isnan(__f); }\n \n   template<typename _Tp>\n     inline int\n-    isnormal(_Tp __f) { return __gnu_cxx::__capture_isnormal(__f); }\n+    isnormal(_Tp __f) { return ::__gnu_cxx::__capture_isnormal(__f); }\n \n   template<typename _Tp>\n     inline int\n-    signbit(_Tp __f) { return __gnu_cxx::__capture_signbit(__f); }\n+    signbit(_Tp __f) { return ::__gnu_cxx::__capture_signbit(__f); }\n \n   template<typename _Tp>\n     inline int\n     isgreater(_Tp __f1, _Tp __f2)\n-    { return __gnu_cxx::__capture_isgreater(__f1, __f2); }\n+    { return ::__gnu_cxx::__capture_isgreater(__f1, __f2); }\n \n   template<typename _Tp>\n     inline int\n     isgreaterequal(_Tp __f1, _Tp __f2)\n-    { return __gnu_cxx::__capture_isgreaterequal(__f1, __f2); }\n+    { return ::__gnu_cxx::__capture_isgreaterequal(__f1, __f2); }\n \n   template<typename _Tp>\n     inline int\n     isless(_Tp __f1, _Tp __f2)\n-    { return __gnu_cxx::__capture_isless(__f1, __f2); }\n+    { return ::__gnu_cxx::__capture_isless(__f1, __f2); }\n \n   template<typename _Tp>\n     inline int\n     islessequal(_Tp __f1, _Tp __f2)\n-    { return __gnu_cxx::__capture_islessequal(__f1, __f2); }\n+    { return ::__gnu_cxx::__capture_islessequal(__f1, __f2); }\n \n   template<typename _Tp>\n     inline int\n     islessgreater(_Tp __f1, _Tp __f2)\n-    { return __gnu_cxx::__capture_islessgreater(__f1, __f2); }\n+    { return ::__gnu_cxx::__capture_islessgreater(__f1, __f2); }\n \n   template<typename _Tp>\n     inline int\n     isunordered(_Tp __f1, _Tp __f2)\n-    { return __gnu_cxx::__capture_isunordered(__f1, __f2); }\n-}\n+    { return ::__gnu_cxx::__capture_isunordered(__f1, __f2); }\n+\n+_GLIBCXX_END_NAMESPACE\n+\n #endif /* _GLIBCXX_USE_C99_FP_MACROS_DYNAMIC */\n #endif\n "}, {"sha": "5d664ebd8d9596776f0d540fd225953c88142fcd", "filename": "libstdc++-v3/include/c_std/std_csetjmp.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_csetjmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_csetjmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_csetjmp.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -47,6 +47,7 @@\n \n #pragma GCC system_header\n \n+#include <bits/c++config.h>\n #include <setjmp.h>\n \n // Get rid of those macros defined in <setjmp.h> in lieu of real functions.\n@@ -57,10 +58,11 @@\n #define setjmp(env) setjmp (env)\n #endif\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   using ::jmp_buf;\n   using ::longjmp;\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "4202b77c58602055f1aadd59f72ae0bb690a35aa", "filename": "libstdc++-v3/include/c_std/std_csignal.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_csignal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_csignal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_csignal.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -47,16 +47,18 @@\n \n #pragma GCC system_header\n \n+#include <bits/c++config.h>\n #include <signal.h>\n \n // Get rid of those macros defined in <signal.h> in lieu of real functions.\n #undef raise\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   using ::sig_atomic_t;\n   using ::signal;\n   using ::raise;\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "bbc3b338e865a403d6ad7f6e279d4bcc2680d0f5", "filename": "libstdc++-v3/include/c_std/std_cstdarg.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdarg.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -47,16 +47,18 @@\n \n #pragma GCC system_header\n \n+#include <bits/c++config.h>\n #include <stdarg.h>\n \n // Adhere to section 17.4.1.2 clause 5 of ISO 14882:1998\n #ifndef va_end\n #define va_end(ap) va_end (ap)\n #endif\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   using ::va_list;\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "ad529d530da184cf4ae57a7b767d7575294a3da5", "filename": "libstdc++-v3/include/c_std/std_cstddef.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstddef.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -47,12 +47,14 @@\n \n #pragma GCC system_header\n \n+#include <bits/c++config.h>\n #include <stddef.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   using ::ptrdiff_t;\n   using ::size_t;\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "c8109c0409bc3de624f2f82f071d3f50c26697b0", "filename": "libstdc++-v3/include/c_std/std_cstdio.h", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdio.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -95,8 +95,8 @@\n #undef vprintf\n #undef vsprintf\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   using ::FILE;\n   using ::fpos_t;\n \n@@ -141,7 +141,8 @@ namespace std\n   using ::vfprintf;\n   using ::vprintf;\n   using ::vsprintf;\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n \n #if _GLIBCXX_USE_C99\n \n@@ -151,8 +152,8 @@ namespace std\n #undef vsnprintf\n #undef vsscanf\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n #if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC\n   extern \"C\" int\n   (snprintf)(char * restrict, size_t, const char * restrict, ...);\n@@ -172,16 +173,19 @@ namespace __gnu_cxx\n   using ::vsnprintf;\n   using ::vsscanf;\n #endif\n-}\n-\n-namespace std\n-{\n-  using __gnu_cxx::snprintf;\n-  using __gnu_cxx::vfscanf;\n-  using __gnu_cxx::vscanf;\n-  using __gnu_cxx::vsnprintf;\n-  using __gnu_cxx::vsscanf;\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  using ::__gnu_cxx::snprintf;\n+  using ::__gnu_cxx::vfscanf;\n+  using ::__gnu_cxx::vscanf;\n+  using ::__gnu_cxx::vsnprintf;\n+  using ::__gnu_cxx::vsscanf;\n+\n+_GLIBCXX_END_NAMESPACE\n+\n #endif\n \n #endif"}, {"sha": "cc2a8cfbee9a75f225eb3da020b57155f389ae45", "filename": "libstdc++-v3/include/c_std/std_cstdlib.h", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdlib.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -59,12 +59,13 @@\n #define EXIT_SUCCESS 0\n #define EXIT_FAILURE 1\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   extern \"C\" void abort(void);\n   extern \"C\" int atexit(void (*)());\n   extern \"C\" void exit(int);\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #else\n \n@@ -100,8 +101,8 @@ namespace std\n #undef wcstombs\n #undef wctomb\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   using ::div_t;\n   using ::ldiv_t;\n \n@@ -143,7 +144,8 @@ namespace std\n \n   inline ldiv_t\n   div(long __i, long __j) { return ldiv(__i, __j); }\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #if _GLIBCXX_USE_C99\n \n@@ -156,8 +158,8 @@ namespace std\n #undef strtof\n #undef strtold\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n #if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n   using ::lldiv_t;\n #endif\n@@ -195,10 +197,11 @@ namespace __gnu_cxx\n #endif\n   using ::strtof;\n   using ::strtold;\n-}\n \n-namespace std\n-{\n+_GLIBCXX_END_NAMESPACE\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n #if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n   using ::__gnu_cxx::lldiv_t;\n #endif\n@@ -214,7 +217,8 @@ namespace std\n   using ::__gnu_cxx::strtoll;\n   using ::__gnu_cxx::strtoull;\n   using ::__gnu_cxx::strtold;\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif // _GLIBCXX_USE_C99\n "}, {"sha": "a77e7c28a800ccd30384c4e6626d96a530088168", "filename": "libstdc++-v3/include/c_std/std_cstring.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstring.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -47,8 +47,8 @@\n \n #pragma GCC system_header\n \n+#include <bits/c++config.h>\n #include <cstddef>\n-\n #include <string.h>\n \n // Get rid of those macros defined in <string.h> in lieu of real functions.\n@@ -75,8 +75,8 @@\n #undef strerror\n #undef strlen\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   using ::memcpy;\n   using ::memmove;\n   using ::strcpy;\n@@ -124,6 +124,7 @@ namespace std\n   inline char*\n   strstr(char* __s1, const char* __s2)\n   { return __builtin_strstr(const_cast<const char*>(__s1), __s2); }\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "05295cf0f437727211d6af3dea01a0288aa7a02e", "filename": "libstdc++-v3/include/c_std/std_ctime.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_ctime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_ctime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_ctime.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -48,7 +48,6 @@\n #pragma GCC system_header\n \n #include <cstddef>\n-\n #include <time.h>\n \n // Get rid of those macros defined in <time.h> in lieu of real functions.\n@@ -62,8 +61,8 @@\n #undef localtime\n #undef strftime\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   using ::clock_t;\n   using ::time_t;\n   using ::tm;\n@@ -77,6 +76,7 @@ namespace std\n   using ::gmtime;\n   using ::localtime;\n   using ::strftime;\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "8f03a416ad0a5af160a757a75e784feafbe025b5", "filename": "libstdc++-v3/include/c_std/std_cwchar.h", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cwchar.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -67,10 +67,11 @@ extern \"C\"\n }\n #endif\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   using ::mbstate_t;\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n \n // Get rid of those macros defined in <wchar.h> in lieu of real functions.\n #undef btowc\n@@ -139,8 +140,9 @@ namespace std\n #undef wscanf\n \n #if _GLIBCXX_USE_WCHAR_T\n-namespace std\n-{\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   using ::wint_t;\n \n   using ::btowc;\n@@ -232,16 +234,17 @@ namespace std\n   inline wchar_t*\n   wmemchr(wchar_t* __p, wchar_t __c, size_t __n)\n   { return wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n \n #if _GLIBCXX_USE_C99\n \n #undef wcstold\n #undef wcstoll\n #undef wcstoull\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n #if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC\n   extern \"C\" long double\n     (wcstold)(const wchar_t * restrict, wchar_t ** restrict);\n@@ -259,14 +262,17 @@ namespace __gnu_cxx\n   using ::wcstoll;\n   using ::wcstoull;\n #endif\n-}\n \n-namespace std\n-{\n-  using __gnu_cxx::wcstold;\n-  using __gnu_cxx::wcstoll;\n-  using __gnu_cxx::wcstoull;\n-}\n+_GLIBCXX_END_NAMESPACE\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  using ::__gnu_cxx::wcstold;\n+  using ::__gnu_cxx::wcstoll;\n+  using ::__gnu_cxx::wcstoull;\n+\n+_GLIBCXX_END_NAMESPACE\n+\n #endif\n \n #endif //_GLIBCXX_USE_WCHAR_T"}, {"sha": "ba699b75df0c739c879507bdc250d5b628c83966", "filename": "libstdc++-v3/include/c_std/std_cwctype.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cwctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cwctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cwctype.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -76,8 +76,9 @@\n #undef wctype\n \n #if _GLIBCXX_USE_WCHAR_T\n-namespace std\n-{\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   using ::wint_t;\t  // cwchar\n \n   using ::wctype_t;\n@@ -103,7 +104,9 @@ namespace std\n   using ::towupper;\n   using ::wctrans;\n   using ::wctype;\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n+\n #endif //_GLIBCXX_USE_WCHAR_T\n \n #endif"}, {"sha": "11970c6748f357250855980c9ae21a7c5b466eee", "filename": "libstdc++-v3/include/debug/bitset", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -35,6 +35,8 @@\n #include <debug/safe_sequence.h>\n #include <debug/safe_iterator.h>\n \n+namespace std\n+{\n namespace __gnu_debug_def\n {\n   template<size_t _Nb>\n@@ -68,7 +70,7 @@ namespace __gnu_debug_def\n \toperator=(bool __x)\n \t{\n \t  _GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n-\t\t\t      _M_message(::__gnu_debug::__msg_bad_bitset_write)\n+\t\t\t      _M_message(__gnu_debug::__msg_bad_bitset_write)\n \t\t\t\t._M_iterator(*this));\n \t  *static_cast<_Base_ref*>(this) = __x;\n \t  return *this;\n@@ -78,10 +80,10 @@ namespace __gnu_debug_def\n \toperator=(const reference& __x)\n \t{\n \t  _GLIBCXX_DEBUG_VERIFY(! __x._M_singular(),\n-\t\t\t       _M_message(::__gnu_debug::__msg_bad_bitset_read)\n+\t\t\t       _M_message(__gnu_debug::__msg_bad_bitset_read)\n \t\t\t\t._M_iterator(__x));\n \t  _GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n-\t\t\t      _M_message(::__gnu_debug::__msg_bad_bitset_write)\n+\t\t\t      _M_message(__gnu_debug::__msg_bad_bitset_write)\n \t\t\t\t._M_iterator(*this));\n \t  *static_cast<_Base_ref*>(this) = __x;\n \t  return *this;\n@@ -91,15 +93,15 @@ namespace __gnu_debug_def\n \toperator~() const\n \t{\n \t  _GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n-\t\t\t       _M_message(::__gnu_debug::__msg_bad_bitset_read)\n+\t\t\t       _M_message(__gnu_debug::__msg_bad_bitset_read)\n \t\t\t\t._M_iterator(*this));\n \t  return ~(*static_cast<const _Base_ref*>(this));\n \t}\n \n \toperator bool() const\n \t{\n \t  _GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n-\t\t\t      _M_message(::__gnu_debug::__msg_bad_bitset_read)\n+\t\t\t      _M_message(__gnu_debug::__msg_bad_bitset_read)\n \t\t\t\t._M_iterator(*this));\n \t  return *static_cast<const _Base_ref*>(this);\n \t}\n@@ -108,7 +110,7 @@ namespace __gnu_debug_def\n \tflip()\n \t{\n \t  _GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n-\t\t\t      _M_message(::__gnu_debug::__msg_bad_bitset_flip)\n+\t\t\t      _M_message(__gnu_debug::__msg_bad_bitset_flip)\n \t\t\t\t._M_iterator(*this));\n \t  _Base_ref::flip();\n \t  return *this;\n@@ -317,5 +319,6 @@ namespace __gnu_debug_def\n \t       const bitset<_Nb>& __x)\n     { return __os << __x._M_base(); }\n } // namespace __gnu_debug_def\n+} // namespace std\n \n #endif"}, {"sha": "4eff05bdab6a267c8d221007db090601783b2216", "filename": "libstdc++-v3/include/debug/debug.h", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -39,16 +39,27 @@\n  *  standard library algorithms.\n */\n \n+\n+namespace std \n+{ \n+  namespace __gnu_debug_def { } \n+  namespace __gnu_debug { using namespace __gnu_debug_def; } \n+}\n+\n+namespace debug = std::__gnu_debug;\n+\n #ifdef _GLIBCXX_DEBUG\n \n-# include <debug/macros.h>\n # include <cstdlib>\n # include <cstdio>\n+# include <debug/macros.h>\n \n-// Avoid the use of assert, because we're trying to keep the <cassert>\n-// include out of the mix.\n+namespace std\n+{\n namespace __gnu_debug\n { \n+  // Avoid the use of assert, because we're trying to keep the <cassert>\n+  // include out of the mix.\n   inline void\n   __replacement_assert(const char* __file, int __line, const char* __function,\n \t\t       const char* __condition)\n@@ -57,12 +68,13 @@ namespace __gnu_debug\n \t\t__function, __condition);\n     std::abort();\n   }\n-}\n+} // namespace __gnu_debug\n+} // namespace std\n \n #define _GLIBCXX_DEBUG_ASSERT(_Condition)                               \\\n   do {                                                                  \\\n     if (! (_Condition))                                                 \\\n-      ::__gnu_debug::__replacement_assert(__FILE__, __LINE__,           \\\n+      std::__gnu_debug::__replacement_assert(__FILE__, __LINE__,           \\\n \t\t\t\t   __PRETTY_FUNCTION__,                 \\\n \t\t\t\t   #_Condition);                        \\\n   } while (false)"}, {"sha": "48cbe1a5b50dd126191668f8aad8693664ab1b49", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -35,6 +35,8 @@\n #include <debug/safe_sequence.h>\n #include <debug/safe_iterator.h>\n \n+namespace std\n+{\n namespace __gnu_debug_def\n {\n   template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n@@ -382,5 +384,6 @@ namespace __gnu_debug_def\n     swap(deque<_Tp, _Alloc>& __lhs, deque<_Tp, _Alloc>& __rhs)\n     { __lhs.swap(__rhs); }\n } // namespace __gnu_debug_def\n+} // namespace std\n \n #endif"}, {"sha": "b37ee8cf276edc514de5146d9cf108d1d294478c", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -33,10 +33,10 @@\n #include <typeinfo>\n #include <debug/debug.h>\n \n+namespace std\n+{\n namespace __gnu_debug\n {\n-  using std::type_info;\n-\n   /** Determine if the two types are the same. */\n   template<typename _Type1, typename _Type2>\n     struct __is_same\n@@ -386,5 +386,6 @@ namespace __gnu_debug\n     { return _Error_formatter(__file, __line); }\n   };\n } // namespace __gnu_debug\n+} // namespace std\n \n #endif"}, {"sha": "1abe16300cdefdeeef529fe720da4d9814401182", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -31,10 +31,13 @@\n #ifndef _GLIBCXX_DEBUG_FUNCTIONS_H\n #define _GLIBCXX_DEBUG_FUNCTIONS_H 1\n \n+#include <bits/c++config.h>\n #include <stddef.h>                       // for ptrdiff_t\n #include <bits/stl_iterator_base_types.h> // for iterator_traits, categories\n #include <bits/cpp_type_traits.h>         // for __is_integer\n \n+namespace std\n+{\n namespace __gnu_debug\n {\n   template<typename _Iterator, typename _Sequence>\n@@ -49,7 +52,7 @@ namespace __gnu_debug\n   template<typename _Iterator>\n     inline bool\n     __check_singular(_Iterator& __x)\n-    { return __gnu_debug::__check_singular_aux(&__x); }\n+    { return __check_singular_aux(&__x); }\n \n   /** Non-NULL pointers are nonsingular. */\n   template<typename _Tp>\n@@ -121,7 +124,7 @@ namespace __gnu_debug\n   {\n     typedef typename std::iterator_traits<_InputIterator>::iterator_category\n       _Category;\n-    return __gnu_debug::__valid_range_aux2(__first, __last, _Category());\n+    return __valid_range_aux2(__first, __last, _Category());\n   }\n \n   /** Don't know what these iterators are, or if they are even\n@@ -134,7 +137,7 @@ namespace __gnu_debug\n     __valid_range(const _InputIterator& __first, const _InputIterator& __last)\n     {\n       typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n-      return __gnu_debug::__valid_range_aux(__first, __last, _Integral());\n+      return __valid_range_aux(__first, __last, _Integral());\n     }\n \n   /** Safe iterators know how to check if they form a valid range. */\n@@ -153,7 +156,7 @@ namespace __gnu_debug\n     __check_valid_range(const _InputIterator& __first,\n \t\t\tconst _InputIterator& __last)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(__gnu_debug::__valid_range(__first, __last));\n+      _GLIBCXX_DEBUG_ASSERT(__valid_range(__first, __last));\n       return __first;\n     }\n \n@@ -240,7 +243,7 @@ namespace __gnu_debug\n     {\n       typedef typename std::iterator_traits<_InputIterator>::iterator_category\n         _Category;\n-      return __gnu_debug::__check_sorted_aux(__first, __last, _Category());\n+      return __check_sorted_aux(__first, __last, _Category());\n     }\n \n   template<typename _InputIterator, typename _Predicate>\n@@ -250,7 +253,7 @@ namespace __gnu_debug\n     {\n       typedef typename std::iterator_traits<_InputIterator>::iterator_category\n         _Category;\n-      return __gnu_debug::__check_sorted_aux(__first, __last, __pred,\n+      return __check_sorted_aux(__first, __last, __pred,\n \t\t\t\t\t     _Category());\n     }\n \n@@ -282,5 +285,6 @@ namespace __gnu_debug\n       return __first == __last;\n     }\n } // namespace __gnu_debug\n+} // namespace std\n \n #endif"}, {"sha": "e02b747a04dbc134b1fbb85ae6f2f1104df24eae", "filename": "libstdc++-v3/include/debug/hash_map.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_map.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Debugging hash_map implementation -*- C++ -*-\n \n-// Copyright (C) 2003\n+// Copyright (C) 2003, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -34,6 +34,8 @@\n #include <debug/safe_sequence.h>\n #include <debug/safe_iterator.h>\n \n+namespace std\n+{\n namespace __gnu_debug_def\n {\n   template<typename _Value, typename _Tp,\n@@ -266,5 +268,6 @@ namespace __gnu_debug_def\n \t hash_map<_Value, _Tp, _HashFcn, _EqualKey, _Alloc>& __y)\n     { __x.swap(__y); }\n } // namespace __gnu_debug_def\n+} // namespace std\n \n #endif"}, {"sha": "5cce135aa43831768a763d7f20620d31c7e147d4", "filename": "libstdc++-v3/include/debug/hash_multimap.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_multimap.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Debugging hash_multimap implementation -*- C++ -*-\n \n-// Copyright (C) 2003\n+// Copyright (C) 2003, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -34,6 +34,8 @@\n #include <debug/safe_sequence.h>\n #include <debug/safe_iterator.h>\n \n+namespace std\n+{\n namespace __gnu_debug_def\n {\n   template<typename _Value, typename _Tp,\n@@ -257,5 +259,6 @@ namespace __gnu_debug_def\n \t hash_multimap<_Value, _Tp, _HashFcn, _EqualKey, _Alloc>& __y)\n     { __x.swap(__y); }\n } // namespace __gnu_debug_def\n+} // namespace std\n \n #endif"}, {"sha": "83d5619b9cd357c4ed5671fd6ea5dcc8cb10598f", "filename": "libstdc++-v3/include/debug/hash_multiset.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_multiset.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Debugging hash_multiset implementation -*- C++ -*-\n \n-// Copyright (C) 2003\n+// Copyright (C) 2003, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -34,6 +34,8 @@\n #include <debug/safe_sequence.h>\n #include <debug/safe_iterator.h>\n \n+namespace std\n+{\n namespace __gnu_debug_def\n {\n   template<typename _Value,\n@@ -232,5 +234,6 @@ template<typename _Value, typename _HashFcn, typename _EqualKey, typename _Alloc\n        hash_multiset<_Value, _HashFcn, _EqualKey, _Alloc>& __y)\n   { __x.swap(__y); }\n } // namespace __gnu_debug_def\n+} // namespace std\n \n #endif"}, {"sha": "e1dd83bc646066867b43e020ad582015ece29690", "filename": "libstdc++-v3/include/debug/hash_set.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_set.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Debugging hash_set implementation -*- C++ -*-\n \n-// Copyright (C) 2003\n+// Copyright (C) 2003, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -34,6 +34,8 @@\n #include <debug/safe_sequence.h>\n #include <debug/safe_iterator.h>\n \n+namespace std\n+{\n namespace __gnu_debug_def\n {\n   template<typename _Value,\n@@ -241,5 +243,6 @@ namespace __gnu_debug_def\n \t hash_set<_Value, _HashFcn, _EqualKey, _Alloc>& __y)\n     { __x.swap(__y); }\n } // namespace __gnu_debug_def\n+} // namespace std\n \n #endif"}, {"sha": "43dc137d1d519cdd41a402edd455a0f56bef3f6f", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -36,6 +36,8 @@\n #include <debug/safe_sequence.h>\n #include <debug/safe_iterator.h>\n \n+namespace std\n+{\n namespace __gnu_debug_def\n {\n   template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n@@ -296,7 +298,7 @@ namespace __gnu_debug_def\n       splice(iterator __position, list& __x)\n       {\n \t_GLIBCXX_DEBUG_VERIFY(&__x != this,\n-\t\t\t      _M_message(::__gnu_debug::__msg_self_splice)\n+\t\t\t      _M_message(__gnu_debug::__msg_self_splice)\n \t\t\t      ._M_sequence(*this, \"this\"));\n \tthis->splice(__position, __x, __x.begin(), __x.end());\n       }\n@@ -306,13 +308,13 @@ namespace __gnu_debug_def\n       {\n \t__glibcxx_check_insert(__position);\n \t_GLIBCXX_DEBUG_VERIFY(__x.get_allocator() == this->get_allocator(),\n-\t\t\t      _M_message(::__gnu_debug::__msg_splice_alloc)\n+\t\t\t      _M_message(__gnu_debug::__msg_splice_alloc)\n \t\t\t    ._M_sequence(*this)._M_sequence(__x, \"__x\"));\n \t_GLIBCXX_DEBUG_VERIFY(__i._M_dereferenceable(),\n-\t\t\t      _M_message(::__gnu_debug::__msg_splice_bad)\n+\t\t\t      _M_message(__gnu_debug::__msg_splice_bad)\n \t\t\t      ._M_iterator(__i, \"__i\"));\n \t_GLIBCXX_DEBUG_VERIFY(__i._M_attached_to(&__x),\n-\t\t\t      _M_message(::__gnu_debug::__msg_splice_other)\n+\t\t\t      _M_message(__gnu_debug::__msg_splice_other)\n \t\t\t     ._M_iterator(__i, \"__i\")._M_sequence(__x, \"__x\"));\n \n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -327,17 +329,17 @@ namespace __gnu_debug_def\n \t__glibcxx_check_insert(__position);\n \t__glibcxx_check_valid_range(__first, __last);\n \t_GLIBCXX_DEBUG_VERIFY(__first._M_attached_to(&__x),\n-\t\t\t      _M_message(::__gnu_debug::__msg_splice_other)\n+\t\t\t      _M_message(__gnu_debug::__msg_splice_other)\n \t\t\t      ._M_sequence(__x, \"x\")\n \t\t\t      ._M_iterator(__first, \"first\"));\n \t_GLIBCXX_DEBUG_VERIFY(__x.get_allocator() == this->get_allocator(),\n-\t\t\t      _M_message(::__gnu_debug::__msg_splice_alloc)\n+\t\t\t      _M_message(__gnu_debug::__msg_splice_alloc)\n \t\t\t      ._M_sequence(*this)._M_sequence(__x));\n \n \tfor (iterator __tmp = __first; __tmp != __last; )\n \t  {\n \t    _GLIBCXX_DEBUG_VERIFY(&__x != this || __tmp != __position,\n-\t\t\t\t_M_message(::__gnu_debug::__msg_splice_overlap)\n+\t\t\t\t_M_message(__gnu_debug::__msg_splice_overlap)\n \t\t\t\t  ._M_iterator(__tmp, \"position\")\n \t\t\t\t  ._M_iterator(__first, \"first\")\n \t\t\t\t  ._M_iterator(__last, \"last\"));\n@@ -501,5 +503,6 @@ namespace __gnu_debug_def\n     swap(list<_Tp, _Alloc>& __lhs, list<_Tp, _Alloc>& __rhs)\n     { __lhs.swap(__rhs); }\n } // namespace __gnu_debug_def\n+} // namespace std\n \n #endif"}, {"sha": "3e24d99cd6ffc22e99ec1c04631b38a276c1729c", "filename": "libstdc++-v3/include/debug/macros.h", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -43,14 +43,14 @@\n #define _GLIBCXX_DEBUG_VERIFY(_Condition,_ErrorMessage)\t\t        \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (! (_Condition))\t\t\t\t\t\t\t\\\n-      ::__gnu_debug::_Error_formatter::_M_at(__FILE__, __LINE__)\t\\\n+      std::__gnu_debug::_Error_formatter::_M_at(__FILE__, __LINE__)\t\\\n \t  ._ErrorMessage._M_error();\t\t\t\t\t\\\n   } while (false)\n \n // Verify that [_First, _Last) forms a valid iterator range.\n #define __glibcxx_check_valid_range(_First,_Last)\t\t\t\\\n-_GLIBCXX_DEBUG_VERIFY(::__gnu_debug::__valid_range(_First, _Last),\t\\\n-\t\t      _M_message(::__gnu_debug::__msg_valid_range)\t\\\n+_GLIBCXX_DEBUG_VERIFY(std::__gnu_debug::__valid_range(_First, _Last),\t\\\n+\t\t      _M_message(std::__gnu_debug::__msg_valid_range)\t\\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last))\n \n@@ -63,11 +63,11 @@ _GLIBCXX_DEBUG_VERIFY(::__gnu_debug::__valid_range(_First, _Last),\t\\\n */\n #define __glibcxx_check_insert(_Position)\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(!_Position._M_singular(),\t\t\t\t\\\n-\t\t      _M_message(::__gnu_debug::__msg_insert_singular) \\\n+\t\t      _M_message(std::__gnu_debug::__msg_insert_singular) \\\n \t\t      ._M_sequence(*this, \"this\")\t\t\t\\\n \t\t      ._M_iterator(_Position, #_Position));\t\t\\\n _GLIBCXX_DEBUG_VERIFY(_Position._M_attached_to(this),\t\t\t\\\n-\t\t      _M_message(::__gnu_debug::__msg_insert_different) \\\n+\t\t      _M_message(std::__gnu_debug::__msg_insert_different) \\\n \t\t      ._M_sequence(*this, \"this\")\t\t\t\\\n \t\t      ._M_iterator(_Position, #_Position))\n \n@@ -87,11 +87,11 @@ _GLIBCXX_DEBUG_VERIFY(_Position._M_attached_to(this),\t\t\t\\\n #define __glibcxx_check_insert_range(_Position,_First,_Last)\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(!_Position._M_singular(),\t\t\t\t\\\n-\t\t      _M_message(::__gnu_debug::__msg_insert_singular) \\\n+\t\t      _M_message(std::__gnu_debug::__msg_insert_singular) \\\n                       ._M_sequence(*this, \"this\")\t\t\t\\\n \t\t      ._M_iterator(_Position, #_Position));\t\t\\\n _GLIBCXX_DEBUG_VERIFY(_Position._M_attached_to(this),\t\t\t\\\n-\t\t      _M_message(::__gnu_debug::__msg_insert_different) \\\n+\t\t      _M_message(std::__gnu_debug::__msg_insert_different) \\\n \t\t      ._M_sequence(*this, \"this\")\t\t\t\\\n \t\t      ._M_iterator(_Position, #_Position))\n \n@@ -101,11 +101,11 @@ _GLIBCXX_DEBUG_VERIFY(_Position._M_attached_to(this),\t\t\t\\\n */\n #define __glibcxx_check_erase(_Position)\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(_Position._M_dereferenceable(),\t\t\t\\\n-\t\t      _M_message(::__gnu_debug::__msg_erase_bad)\t\\\n+\t\t      _M_message(std::__gnu_debug::__msg_erase_bad)\t\\\n                       ._M_sequence(*this, \"this\")\t\t\t\\\n \t\t      ._M_iterator(_Position, #_Position));\t\t\\\n _GLIBCXX_DEBUG_VERIFY(_Position._M_attached_to(this),\t\t\t\\\n-\t\t      _M_message(::__gnu_debug::__msg_erase_different) \\\n+\t\t      _M_message(std::__gnu_debug::__msg_erase_different) \\\n \t\t      ._M_sequence(*this, \"this\")\t\t\t\\\n \t\t      ._M_iterator(_Position, #_Position))\n \n@@ -116,23 +116,23 @@ _GLIBCXX_DEBUG_VERIFY(_Position._M_attached_to(this),\t\t\t\\\n #define __glibcxx_check_erase_range(_First,_Last)\t\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(_First._M_attached_to(this),\t\t\t\\\n-\t\t      _M_message(::__gnu_debug::__msg_erase_different) \\\n+\t\t      _M_message(std::__gnu_debug::__msg_erase_different) \\\n                       ._M_sequence(*this, \"this\")\t\t\t\\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last))\n \n // Verify that the subscript _N is less than the container's size.\n #define __glibcxx_check_subscript(_N)\t\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(_N < this->size(),\t\t\t\t\\\n-\t\t      _M_message(::__gnu_debug::__msg_subscript_oob) \\\n+\t\t      _M_message(std::__gnu_debug::__msg_subscript_oob) \\\n                       ._M_sequence(*this, \"this\")\t\t\t\\\n \t\t      ._M_integer(_N, #_N)\t\t\t\t\\\n \t\t      ._M_integer(this->size(), \"size\"))\n \n // Verify that the container is nonempty\n #define __glibcxx_check_nonempty()\t\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(! this->empty(),\t\t\t\t\t\\\n-\t\t      _M_message(::__gnu_debug::__msg_empty)\t\\\n+\t\t      _M_message(std::__gnu_debug::__msg_empty)\t\\\n                       ._M_sequence(*this, \"this\"))\n \n // Verify that the < operator for elements in the sequence is a\n@@ -150,8 +150,8 @@ _GLIBCXX_DEBUG_ASSERT(_First == _Last || !_Pred(*_First, *_First))\n #define __glibcxx_check_sorted(_First,_Last)\t\t\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n __glibcxx_check_strict_weak_ordering(_First,_Last);\t\t\t\\\n-_GLIBCXX_DEBUG_VERIFY(::__gnu_debug::__check_sorted(_First, _Last),\t\\\n-\t\t      _M_message(::__gnu_debug::__msg_unsorted)\t\\\n+_GLIBCXX_DEBUG_VERIFY(std::__gnu_debug::__check_sorted(_First, _Last),\t\\\n+\t\t      _M_message(std::__gnu_debug::__msg_unsorted)\t\\\n                       ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last))\n \n@@ -160,8 +160,8 @@ _GLIBCXX_DEBUG_VERIFY(::__gnu_debug::__check_sorted(_First, _Last),\t\\\n #define __glibcxx_check_sorted_pred(_First,_Last,_Pred)\t\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n __glibcxx_check_strict_weak_ordering_pred(_First,_Last,_Pred);\t        \\\n-_GLIBCXX_DEBUG_VERIFY(::__gnu_debug::__check_sorted(_First, _Last, _Pred), \\\n-\t\t      _M_message(::__gnu_debug::__msg_unsorted_pred) \\\n+_GLIBCXX_DEBUG_VERIFY(std::__gnu_debug::__check_sorted(_First, _Last, _Pred), \\\n+\t\t      _M_message(std::__gnu_debug::__msg_unsorted_pred) \\\n                       ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n \t\t      ._M_string(#_Pred))\n@@ -170,9 +170,9 @@ _GLIBCXX_DEBUG_VERIFY(::__gnu_debug::__check_sorted(_First, _Last, _Pred), \\\n     w.r.t. the value _Value. */\n #define __glibcxx_check_partitioned(_First,_Last,_Value)\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n-_GLIBCXX_DEBUG_VERIFY(::__gnu_debug::__check_partitioned(_First, _Last,\t\\\n-\t\t\t\t\t\t\t _Value),\t\\\n-\t\t      _M_message(::__gnu_debug::__msg_unpartitioned) \\\n+_GLIBCXX_DEBUG_VERIFY(std::__gnu_debug::__check_partitioned(_First, _Last, \\\n+\t\t\t\t\t\t\t    _Value),\t\\\n+\t\t      _M_message(std::__gnu_debug::__msg_unpartitioned) \\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n \t\t      ._M_string(#_Value))\n@@ -181,9 +181,9 @@ _GLIBCXX_DEBUG_VERIFY(::__gnu_debug::__check_partitioned(_First, _Last,\t\\\n     w.r.t. the value _Value and predicate _Pred. */\n #define __glibcxx_check_partitioned_pred(_First,_Last,_Value,_Pred)\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n-_GLIBCXX_DEBUG_VERIFY(::__gnu_debug::__check_partitioned(_First, _Last,\t\\\n+_GLIBCXX_DEBUG_VERIFY(std::__gnu_debug::__check_partitioned(_First, _Last, \\\n \t\t\t\t\t\t\t _Value, _Pred), \\\n-\t\t      _M_message(::__gnu_debug::__msg_unpartitioned_pred) \\\n+\t\t      _M_message(std::__gnu_debug::__msg_unpartitioned_pred) \\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n \t\t      ._M_string(#_Pred)\t\t\t\t\\\n@@ -192,17 +192,17 @@ _GLIBCXX_DEBUG_VERIFY(::__gnu_debug::__check_partitioned(_First, _Last,\t\\\n // Verify that the iterator range [_First, _Last) is a heap\n #define __glibcxx_check_heap(_First,_Last)\t\t\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n-_GLIBCXX_DEBUG_VERIFY(::std::__is_heap(_First, _Last),\t\t\\\n-\t\t      _M_message(::__gnu_debug::__msg_not_heap)\t\\\n+_GLIBCXX_DEBUG_VERIFY(std::__is_heap(_First, _Last),\t\t\\\n+\t\t      _M_message(std::__gnu_debug::__msg_not_heap)\t\\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last))\n \n /** Verify that the iterator range [_First, _Last) is a heap\n     w.r.t. the predicate _Pred. */\n #define __glibcxx_check_heap_pred(_First,_Last,_Pred)\t\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n-_GLIBCXX_DEBUG_VERIFY(::std::__is_heap(_First, _Last, _Pred),\t\t\\\n-\t\t      _M_message(::__gnu_debug::__msg_not_heap_pred) \\\n+_GLIBCXX_DEBUG_VERIFY(std::__is_heap(_First, _Last, _Pred),\t\t\\\n+\t\t      _M_message(std::__gnu_debug::__msg_not_heap_pred) \\\n                       ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n \t\t      ._M_string(#_Pred))"}, {"sha": "75dd340b56f27861d473c7c186e21f71f87038ac", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -35,6 +35,8 @@\n #include <debug/safe_iterator.h>\n #include <utility>\n \n+namespace std\n+{\n namespace __gnu_debug_def\n {\n   template<typename _Key, typename _Tp, typename _Compare = std::less<_Key>,\n@@ -323,5 +325,6 @@ namespace __gnu_debug_def\n \t map<_Key,_Tp,_Compare,_Allocator>& __rhs)\n     { __lhs.swap(__rhs); }\n } // namespace __gnu_debug_def\n+} // namespace std\n \n #endif"}, {"sha": "24f10f5828f0e57771104d64d9fb3a808630a331", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -35,6 +35,8 @@\n #include <debug/safe_iterator.h>\n #include <utility>\n \n+namespace std\n+{\n namespace __gnu_debug_def\n {\n   template<typename _Key, typename _Tp, typename _Compare = std::less<_Key>,\n@@ -310,5 +312,6 @@ namespace __gnu_debug_def\n \t multimap<_Key,_Tp,_Compare,_Allocator>& __rhs)\n     { __lhs.swap(__rhs); }\n } // namespace __gnu_debug_def\n+} // namespace std\n \n #endif"}, {"sha": "32ea0b9eb4704f4d3765603a5994eb17d74c2f04", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -35,6 +35,8 @@\n #include <debug/safe_iterator.h>\n #include <utility>\n \n+namespace std\n+{\n namespace __gnu_debug_def\n {\n   template<typename _Key, typename _Compare = std::less<_Key>,\n@@ -316,5 +318,6 @@ namespace __gnu_debug_def\n \t multiset<_Key,_Compare,_Allocator>& __y)\n     { return __x.swap(__y); }\n } // namespace __gnu_debug_def\n+} // namespace std\n \n #endif"}, {"sha": "41ab648f5b95eb7e59e276cbdc37e4b5946d12be", "filename": "libstdc++-v3/include/debug/safe_base.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Safe sequence/iterator base implementation  -*- C++ -*-\n \n-// Copyright (C) 2003, 2004\n+// Copyright (C) 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -31,6 +31,8 @@\n #ifndef _GLIBCXX_DEBUG_SAFE_BASE_H\n #define _GLIBCXX_DEBUG_SAFE_BASE_H 1\n \n+namespace std\n+{\n namespace __gnu_debug\n {\n   class _Safe_sequence_base;\n@@ -203,5 +205,6 @@ namespace __gnu_debug\n     { if (++_M_version == 0) _M_version = 1; }\n   };\n } // namespace __gnu_debug\n+} // namespace std\n \n #endif"}, {"sha": "bcd7324cf816827028f2d7d5f0a9e12d477f2ded", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -39,11 +39,10 @@\n #include <bits/stl_pair.h>\n #include <bits/cpp_type_traits.h>\n \n+namespace std\n+{\n namespace __gnu_debug\n {\n-  using std::iterator_traits;\n-  using std::pair;\n-\n   /** Iterators that derive from _Safe_iterator_base but that aren't\n    *  _Safe_iterators can be determined singular or non-singular via\n    *  _Safe_iterator_base.\n@@ -629,6 +628,7 @@ namespace __gnu_debug\n \t      const _Safe_iterator<_Iterator, _Sequence>& __i)\n     { return __i + __n; }\n } // namespace __gnu_debug\n+} // namespace std\n \n #ifndef _GLIBCXX_EXPORT_TEMPLATE\n #  include <debug/safe_iterator.tcc>"}, {"sha": "c5d49e0f2997a8247bf3f900346f820a464ae377", "filename": "libstdc++-v3/include/debug/safe_iterator.tcc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Debugging iterator implementation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2003, 2004\n+// Copyright (C) 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -36,6 +36,8 @@\n #ifndef _GLIBCXX_DEBUG_SAFE_ITERATOR_TCC\n #define _GLIBCXX_DEBUG_SAFE_ITERATOR_TCC 1\n \n+namespace std\n+{\n namespace __gnu_debug\n {\n   template<typename _Iterator, typename _Sequence>\n@@ -135,6 +137,7 @@ namespace __gnu_debug\n \t}\n     }\n } // namespace __gnu_debug\n+} // namespace std\n \n #endif\n "}, {"sha": "23eff2c4bef527b3365cbd256f20b3fa32aa7839", "filename": "libstdc++-v3/include/debug/safe_sequence.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -36,6 +36,8 @@\n #include <debug/functions.h>\n #include <debug/safe_base.h>\n \n+namespace std\n+{\n namespace __gnu_debug\n {\n   template<typename _Iterator, typename _Sequence>\n@@ -178,5 +180,6 @@ namespace __gnu_debug\n         }\n       }\n } // namespace __gnu_debug\n+} // namespace std\n \n #endif"}, {"sha": "f9a21c6b5a1beb141858784a5bf5e2c8c25c8fdd", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -35,6 +35,8 @@\n #include <debug/safe_iterator.h>\n #include <utility>\n \n+namespace std \n+{\n namespace __gnu_debug_def\n {\n   template<typename _Key, typename _Compare = std::less<_Key>,\n@@ -321,5 +323,6 @@ namespace __gnu_debug_def\n \t set<_Key,_Compare,_Allocator>& __y)\n     { return __x.swap(__y); }\n } // namespace __gnu_debug_def\n+} // namespace std\n \n #endif"}, {"sha": "e098d7a0b29351cf98b5d9aaa2e8d2959411788c", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -35,9 +35,11 @@\n #include <debug/safe_sequence.h>\n #include <debug/safe_iterator.h>\n \n+namespace std\n+{\n namespace __gnu_debug\n {\n-template<typename _CharT, typename _Traits = std::char_traits<_CharT>,\n+  template<typename _CharT, typename _Traits = std::char_traits<_CharT>,\n             typename _Allocator = std::allocator<_CharT> >\n     class basic_string\n     : public std::basic_string<_CharT, _Traits, _Allocator>,\n@@ -204,7 +206,7 @@ template<typename _CharT, typename _Traits = std::char_traits<_CharT>,\n     operator[](size_type __pos) const\n     {\n       _GLIBCXX_DEBUG_VERIFY(__pos <= this->size(),\n-\t\t\t    _M_message(::__gnu_debug::__msg_subscript_oob)\n+\t\t\t    _M_message(__gnu_debug::__msg_subscript_oob)\n \t\t\t    ._M_sequence(*this, \"this\")\n \t\t\t    ._M_integer(__pos, \"__pos\")\n \t\t\t    ._M_integer(this->size(), \"size\"));\n@@ -219,7 +221,7 @@ template<typename _CharT, typename _Traits = std::char_traits<_CharT>,\n #else\n       // as an extension v3 allows s[s.size()] when s is non-const.\n       _GLIBCXX_DEBUG_VERIFY(__pos <= this->size(),\n-\t\t\t    _M_message(::__gnu_debug::__msg_subscript_oob)\n+\t\t\t    _M_message(__gnu_debug::__msg_subscript_oob)\n \t\t\t    ._M_sequence(*this, \"this\")\n \t\t\t    ._M_integer(__pos, \"__pos\")\n \t\t\t    ._M_integer(this->size(), \"size\"));\n@@ -1014,5 +1016,6 @@ template<typename _CharT, typename _Traits = std::char_traits<_CharT>,\n #endif\n \n } // namespace __gnu_debug\n+} // namespace std\n \n #endif"}, {"sha": "5a1fc92348b392724827c2dd0fd65494e11b03e7", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -36,6 +36,8 @@\n #include <debug/safe_sequence.h>\n #include <debug/safe_iterator.h>\n \n+namespace std\n+{\n namespace __gnu_debug_def\n {\n   template<typename _Tp,\n@@ -412,5 +414,6 @@ namespace __gnu_debug_def\n     swap(vector<_Tp, _Alloc>& __lhs, vector<_Tp, _Alloc>& __rhs)\n     { __lhs.swap(__rhs); }\n } // namespace __gnu_debug_def\n+} // namespace std\n \n #endif"}, {"sha": "712a4edc7fdfd25a7b39d1e0ccdfefb42e736b08", "filename": "libstdc++-v3/include/ext/algorithm", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Algorithm extensions -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -65,8 +65,8 @@\n \n #include <algorithm>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   using std::ptrdiff_t;\n   using std::min;\n   using std::pair;\n@@ -521,6 +521,7 @@ namespace __gnu_cxx\n \t  return false;\n       return true;\n     }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _EXT_ALGORITHM */"}, {"sha": "02af57893fce68d5c7107ad91b9a0598f3df5970", "filename": "libstdc++-v3/include/ext/array_allocator.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -39,8 +39,8 @@\n #include <bits/functexcept.h>\n #include <tr1/array>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   /// @brief  Base class.\n  template<typename _Tp>\n     class array_allocator_base\n@@ -140,6 +140,7 @@ namespace __gnu_cxx\n     operator!=(const array_allocator<_Tp, _Array>&, \n \t       const array_allocator<_Tp, _Array>&)\n     { return false; }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "6d80c99e509864961c0deb791ed9bcab1d4d678a", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -69,8 +69,8 @@\n #endif\n \n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n #if defined __GTHREADS\n   namespace\n   {\n@@ -1286,8 +1286,7 @@ namespace __gnu_cxx\n     bitmap_allocator<_Tp>::_S_mut;\n #endif\n \n-\n-}\n+_GLIBCXX_END_NAMESPACE\n \n #endif \n "}, {"sha": "a83b747000c8966bd665f3f62dc14422e8971bc2", "filename": "libstdc++-v3/include/ext/codecvt_specializations.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcodecvt_specializations.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcodecvt_specializations.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcodecvt_specializations.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -42,8 +42,8 @@\n   // Define this here so codecvt.cc can have _S_max_size definition.\n #define _GLIBCXX_USE_ENCODING_STATE 1\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   /// @brief  Extension to use icov for dealing with character encodings.\n   // This includes conversions and comparisons between various character\n   // sets.  This object encapsulates data that may need to be shared between\n@@ -213,10 +213,12 @@ namespace __gnu_cxx\n       typedef encoding_state\t\t\t\tstate_type;\n       typedef typename std::fpos<state_type>\t\tpos_type;\n     };\n-} // namespace __gnu_cxx\n \n-namespace std\n-{\n+_GLIBCXX_END_NAMESPACE\n+\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   using __gnu_cxx::encoding_state;\n \n   /// @brief  codecvt<InternT, _ExternT, encoding_state> specialization.\n@@ -501,5 +503,6 @@ namespace std\n     codecvt<_InternT, _ExternT, encoding_state>::\n     do_max_length() const throw()\n     { return 1; }\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n "}, {"sha": "aa96507472294387b8eb77667e668ece29375019", "filename": "libstdc++-v3/include/ext/debug_allocator.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Allocators -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -50,8 +50,8 @@\n \n #include <stdexcept>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   /**\n    *  @brief  A meta-allocator with debugging bits, as per [20.4].\n    *\n@@ -120,6 +120,7 @@ namespace __gnu_cxx\n \t  throw std::runtime_error(\"debug_allocator::deallocate null pointer\");\n       }\n     };\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "c100f59cbd6448a8b9f8bbe9e2c7afadb148506f", "filename": "libstdc++-v3/include/ext/functional", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Functional extensions -*- C++ -*-\n \n-// Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -65,20 +65,20 @@\n \n #include <functional>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   using std::unary_function;\n   using std::binary_function;\n   using std::mem_fun1_t;\n   using std::const_mem_fun1_t;\n   using std::mem_fun1_ref_t;\n   using std::const_mem_fun1_ref_t;\n \n-  /** The @c identity_element functions are not part of the C++ standard; SGI\n-   *  provided them as an extension.  Its argument is an operation, and its\n-   *  return value is the identity element for that operation.  It is overloaded\n-   *  for addition and multiplication, and you can overload it for your own\n-   *  nefarious operations.\n+  /** The @c identity_element functions are not part of the C++\n+   *  standard; SGI provided them as an extension.  Its argument is an\n+   *  operation, and its return value is the identity element for that\n+   *  operation.  It is overloaded for addition and multiplication,\n+   *  and you can overload it for your own nefarious operations.\n    *\n    *  @addtogroup SGIextensions\n    *  @{\n@@ -420,6 +420,8 @@ namespace __gnu_cxx\n     inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>\n     mem_fun1_ref(_Ret (_Tp::*__f)(_Arg) const)\n     { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n+\n #endif\n "}, {"sha": "16c045807547427f9678ce88c2157582c1d6d31f", "filename": "libstdc++-v3/include/ext/hash_fun.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_fun.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_fun.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_fun.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // 'struct hash' from SGI -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -63,8 +63,8 @@\n \n #include <cstddef>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   using std::size_t;\n \n   template<class _Key>\n@@ -166,6 +166,7 @@ namespace __gnu_cxx\n       operator()(unsigned long __x) const\n       { return __x; }\n     };\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "6e2b5b83081fb112c497ae512be49370debf71aa", "filename": "libstdc++-v3/include/ext/hash_map", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -64,8 +64,8 @@\n #include <ext/hashtable.h>\n #include <bits/concept_check.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   using std::equal_to;\n   using std::allocator;\n   using std::pair;\n@@ -438,7 +438,7 @@ namespace __gnu_cxx\n       end() const\n       { return _M_ht.end(); }\n \n-public:\n+    public:\n       iterator\n       insert(const value_type& __obj)\n       { return _M_ht.insert_equal(__obj); }\n@@ -504,7 +504,7 @@ public:\n       size_type\n       elems_in_bucket(size_type __n) const\n       { return _M_ht.elems_in_bucket(__n); }\n-};\n+    };\n \n   template <class _Key, class _Tp, class _HF, class _EqKey, class _Alloc>\n     inline bool\n@@ -524,13 +524,12 @@ public:\n \t hash_multimap<_Key, _Tp, _HashFcn, _EqlKey, _Alloc>& __hm2)\n     { __hm1.swap(__hm2); }\n \n-} // namespace __gnu_cxx\n+_GLIBCXX_END_NAMESPACE\n \n-namespace std\n-{\n-// Specialization of insert_iterator so that it will work for hash_map\n-// and hash_multimap.\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n \n+  // Specialization of insert_iterator so that it will work for hash_map\n+  // and hash_multimap.\n   template <class _Key, class _Tp, class _HashFn,  class _EqKey, class _Alloc>\n     class insert_iterator<__gnu_cxx::hash_map<_Key, _Tp, _HashFn,\n \t\t\t\t\t      _EqKey, _Alloc> >\n@@ -616,7 +615,8 @@ namespace std\n       operator++(int)\n       { return *this; }\n     };\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #ifdef _GLIBCXX_DEBUG\n # include <debug/hash_map>"}, {"sha": "178fb85ab40122aba58f5c5710f5bbe6cea894f3", "filename": "libstdc++-v3/include/ext/hash_set", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -64,8 +64,8 @@\n #include <ext/hashtable.h>\n #include <bits/concept_check.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   using std::equal_to;\n   using std::allocator;\n   using std::pair;\n@@ -490,10 +490,10 @@ public:\n \t hash_multiset<_Val, _HashFcn, _EqualKey, _Alloc>& __hs2)\n     { __hs1.swap(__hs2); }\n \n-} // namespace __gnu_cxx\n+_GLIBCXX_END_NAMESPACE\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n \n-namespace std\n-{\n   // Specialization of insert_iterator so that it will work for hash_set\n   // and hash_multiset.\n \n@@ -582,7 +582,8 @@ namespace std\n       insert_iterator<_Container>&\n       operator++(int) { return *this; }\n     };\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #ifdef _GLIBCXX_DEBUG\n # include <debug/hash_set>"}, {"sha": "3706f80fc5235433b96973bf8d6a93b3252727d3", "filename": "libstdc++-v3/include/ext/hashtable.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhashtable.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Hashtable implementation used by containers -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -70,8 +70,8 @@\n #include <bits/stl_function.h>\n #include <ext/hash_fun.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   using std::size_t;\n   using std::ptrdiff_t;\n   using std::forward_iterator_tag;\n@@ -1125,6 +1125,7 @@ namespace __gnu_cxx\n \t  __throw_exception_again;\n \t}\n     }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "b59e5ca3449017812c614c23b629368579a91680", "filename": "libstdc++-v3/include/ext/iterator", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fiterator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fiterator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fiterator?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // HP/SGI iterator extensions -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -66,8 +66,8 @@\n #include <bits/concept_check.h>\n #include <iterator>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   // There are two signatures for distance.  In addition to the one\n   // taking two iterators and returning a result, there is another\n   // taking two iterators and a reference-to-result variable, and\n@@ -111,7 +111,8 @@ namespace __gnu_cxx\n       // concept requirements -- taken care of in __distance\n       __distance(__first, __last, __n, std::__iterator_category(__first));\n     }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif\n "}, {"sha": "8143539778875a429935bbff3e119593f9bdf4b3", "filename": "libstdc++-v3/include/ext/malloc_allocator.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Allocator that wraps \"C\" malloc -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,8 +38,8 @@\n #include <new>\n #include <bits/functexcept.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   /**\n    *  @brief  An allocator that uses malloc.\n    *\n@@ -120,6 +120,7 @@ namespace __gnu_cxx\n     inline bool\n     operator!=(const malloc_allocator<_Tp>&, const malloc_allocator<_Tp>&)\n     { return false; }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "0755d897507ff0a11ff391c0911ce0b87d1c9453", "filename": "libstdc++-v3/include/ext/memory", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmemory?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Memory extensions -*- C++ -*-\n \n-// Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -66,8 +66,8 @@\n #include <memory>\n #include <bits/stl_tempbuf.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   using std::ptrdiff_t;\n   using std::pair;\n   using std::__iterator_category;\n@@ -192,7 +192,8 @@ namespace __gnu_cxx\n       /// Destroys objects and frees storage.\n       ~temporary_buffer() { }\n     };\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif\n "}, {"sha": "1b189c37ca6fec3e90831c5fd538e79e3837f6f6", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -40,8 +40,8 @@\n #include <bits/gthr.h>\n #include <bits/atomicity.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   typedef void (*__destroy_handler)(void*);\n \n   /// @brief  Base class for pool object.\n@@ -729,6 +729,7 @@ namespace __gnu_cxx\n     { return false; }\n \n #undef __thread_default\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "b761b0041c6a26d4687d548e7d1120c2361215bc", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Allocator that wraps operator new -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,8 +37,8 @@\n #include <new>\n #include <bits/functexcept.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   /**\n    *  @brief  An allocator that uses global new, as per [20.4].\n    *\n@@ -116,6 +116,7 @@ namespace __gnu_cxx\n     inline bool\n     operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)\n     { return false; }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "290d032836a7d2458fde7cc3086718c700f61b46", "filename": "libstdc++-v3/include/ext/numeric", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Numeric extensions -*- C++ -*-\n \n-// Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -68,8 +68,8 @@\n \n #include <ext/functional> // For identity_element\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   // Returns __x ** __n, where __n >= 0.  _Note that \"multiplication\"\n   // is required to be associative, but not necessarily commutative.\n   template<typename _Tp, typename _Integer, typename _MonoidOperation>\n@@ -144,7 +144,8 @@ namespace __gnu_cxx\n       while (__first != __last)\n \t*__first++ = __value++;\n     }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif\n "}, {"sha": "236e349cd44e69795f02cd04b28b7bdfaf21a05c", "filename": "libstdc++-v3/include/ext/pod_char_traits.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -39,8 +39,8 @@\n \n #include <string>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   // POD character abstraction.\n   // NB: The char_type parameter is a subset of int_type, as to allow\n   // int_type to properly hold the full range of char_type values as\n@@ -83,10 +83,11 @@ namespace __gnu_cxx\n     inline bool\n     operator<(const character<V, I, S>& lhs, const character<V, I, S>& rhs)\n     { return lhs.value < rhs.value; }\n-} // namespace __gnu_cxx\n \n-namespace std\n-{\n+_GLIBCXX_END_NAMESPACE\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   /// char_traits<__gnu_cxx::character> specialization.\n   template<typename V, typename I, typename S>\n     struct char_traits<__gnu_cxx::character<V, I, S> >\n@@ -180,6 +181,7 @@ namespace std\n       not_eof(const int_type& __c)\n       { return eq_int_type(__c, eof()) ? int_type() : __c; }\n     };\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "e11c1663d585730ba685c483539bf2db3d571ba8", "filename": "libstdc++-v3/include/ext/pool_allocator.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Allocators -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -54,8 +54,8 @@\n #include <bits/atomicity.h>\n #include <bits/concurrence.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   /**\n    *  @brief  Base class for __pool_alloc.\n    *\n@@ -250,6 +250,7 @@ namespace __gnu_cxx\n \t    }\n \t}\n     }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "22dd7cd01992ce6421924371441816df43ee1711", "filename": "libstdc++-v3/include/ext/rb_tree", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Frb_tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Frb_tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frb_tree?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // rb_tree extension -*- C++ -*-\n \n-// Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -65,8 +65,8 @@\n \n #include <bits/stl_tree.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   using std::_Rb_tree;\n   using std::allocator;\n \n@@ -92,6 +92,7 @@ namespace __gnu_cxx\n \n       ~rb_tree() { }\n     };\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "a264c1ef0ece4831cfff8795b7be3dbd61d1e203", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -38,8 +38,8 @@\n \n #include <bits/atomicity.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   /**\n    *  @if maint\n    *  Documentation?  What's that?\n@@ -696,6 +696,7 @@ namespace __gnu_cxx\n \treturn true;\n       return false;\n     }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _RC_STRING_BASE_H */"}, {"sha": "35be37687a54ecbc76e01e0bcd063ddc030fef55", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -66,8 +66,8 @@\n \n #include <ext/memory> // For uninitialized_copy_n\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   using std::size_t;\n   using std::ptrdiff_t;\n   using std::allocator;\n@@ -2894,7 +2894,7 @@ protected:\n       }\n     };\n \n-} // namespace __gnu_cxx\n+_GLIBCXX_END_NAMESPACE\n \n # include <ext/ropeimpl.h>\n "}, {"sha": "9371dbbac83389043df96ab9e5ff6f9def649cbf", "filename": "libstdc++-v3/include/ext/ropeimpl.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // SGI's rope class implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -53,8 +53,8 @@\n #include <ext/memory> // For uninitialized_copy_n\n #include <ext/numeric> // For power\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   using std::size_t;\n   using std::printf;\n   using std::basic_ostream;\n@@ -1699,8 +1699,4 @@ namespace __gnu_cxx\n   { _Rope_rotate(__first, __middle, __last); }\n # endif\n \n-} // namespace __gnu_cxx\n-\n-// Local Variables:\n-// mode:C++\n-// End:\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "06bf7b1cb09738773e9c854961c5df2a38b38079", "filename": "libstdc++-v3/include/ext/slist", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -55,8 +55,8 @@\n #include <bits/stl_uninitialized.h>\n #include <bits/concept_check.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   using std::size_t;\n   using std::ptrdiff_t;\n   using std::_Construct;\n@@ -1023,13 +1023,12 @@ namespace __gnu_cxx\n \t  }\n       }\n \n-} // namespace __gnu_cxx\n+_GLIBCXX_END_NAMESPACE\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n \n-namespace std\n-{\n   // Specialization of insert_iterator so that insertions will be constant\n   // time rather than linear time.\n-\n   template <class _Tp, class _Alloc>\n     class insert_iterator<__gnu_cxx::slist<_Tp, _Alloc> >\n     {\n@@ -1073,7 +1072,8 @@ namespace std\n       insert_iterator<_Container>&\n       operator++(int)\n       { return *this; }\n-};\n+    };\n+\n+_GLIBCXX_END_NAMESPACE\n \n-} // namespace std\n #endif"}, {"sha": "c21dbbd3ab4cf1d04781f2010f0c2054cedbd846", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -36,8 +36,8 @@\n #ifndef _SSO_STRING_BASE_H\n #define _SSO_STRING_BASE_H 1\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     class __sso_string_base\n     : protected __vstring_utility<_CharT, _Traits, _Alloc>\n@@ -567,6 +567,7 @@ namespace __gnu_cxx\n \treturn true;\n       return false;\n     }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _SSO_STRING_BASE_H */"}, {"sha": "312a2177111044342876818779139542d74b64be", "filename": "libstdc++-v3/include/ext/stdio_filebuf.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // File descriptor layer for filebuf -*- C++ -*-\n \n-// Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,8 +38,8 @@\n \n #include <fstream>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   /**\n    *  @brief Provides a layer of compatibility for C/POSIX.\n    *\n@@ -156,6 +156,7 @@ namespace __gnu_cxx\n \t  this->_M_set_buffer(-1);\n \t}\n     }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "f0ec12c3a695aaf66eeca6c121468dd56810c57c", "filename": "libstdc++-v3/include/ext/stdio_sync_filebuf.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Iostreams wrapper for stdio FILE* -*- C++ -*-\n \n-// Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -44,8 +44,8 @@\n #include <cwchar>\n #endif\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   /// @brief  class stdio_sync_filebuf.\n   template<typename _CharT, typename _Traits = std::char_traits<_CharT> >\n     class stdio_sync_filebuf : public std::basic_streambuf<_CharT, _Traits>\n@@ -277,6 +277,7 @@ namespace __gnu_cxx\n   extern template class stdio_sync_filebuf<wchar_t>;\n #endif\n #endif\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "143efc02cdf4b77011b0bc2388ec763f2416f854", "filename": "libstdc++-v3/include/ext/typelist.h", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -46,8 +46,8 @@\n #ifndef TYPELIST_HPP\n #define TYPELIST_HPP\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   // XXX namespace typelist\n   // struct typelist -> struct node \n \n@@ -87,11 +87,12 @@ namespace __gnu_cxx\n \n   template<typename Typelist, template<typename T> class Transform>\n     struct transform;\n-}\n \n+_GLIBCXX_END_NAMESPACE\n+\n+\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n-namespace __gnu_cxx\n-{\n namespace detail\n {\n   // #include <ext/detail/type_utils.h>\n@@ -264,11 +265,12 @@ namespace detail\n       typedef typename append<Hd, typelist<rest> >::type::root type;\n     };\n } // namespace detail\n-}\n \n+_GLIBCXX_END_NAMESPACE\n+\n+\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n-namespace __gnu_cxx\n-{\n   template<typename Fn, typename Typelist>\n     struct apply\n     {\n@@ -345,7 +347,8 @@ namespace __gnu_cxx\n     public:\n       typedef typelist<typename transform_type::type> \t\ttype;\n     };\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n \n #define _GLIBCXX_TYPELIST_CHAIN1(X0) __gnu_cxx::chain<X0, __gnu_cxx::null_type>"}, {"sha": "6b04761888eab7cf552006b941a09b0a2b6065a6", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -40,8 +40,8 @@\n #include <ext/rc_string_base.h>\n #include <ext/sso_string_base.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   /**\n    *  @class __versa_string vstring.h\n    *  @brief  Managing sequences of characters and character-like objects.\n@@ -2106,10 +2106,10 @@ namespace __gnu_cxx\n \t __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n     { __lhs.swap(__rhs); }\n \n-} // namespace __gnu_cxx\n+_GLIBCXX_END_NAMESPACE\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n \n-namespace std\n-{\n   /**\n    *  @brief  Read stream into a string.\n    *  @param is  Input stream.\n@@ -2183,7 +2183,7 @@ namespace std\n \t    __gnu_cxx::__versa_string<_CharT, _Traits, _Alloc, _Base>& __str)\n     { return getline(__is, __str, __is.widen('\\n')); }      \n \n-} // namespace std\n+_GLIBCXX_END_NAMESPACE\n \n #ifndef _GLIBCXX_EXPORT_TEMPLATE\n # include \"vstring.tcc\" "}, {"sha": "3ce552abbf6a541002ae4d35ef4412501dd63730", "filename": "libstdc++-v3/include/ext/vstring.tcc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -38,8 +38,8 @@\n \n #pragma GCC system_header\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   template<typename _CharT, typename _Traits, typename _Alloc,\n \t   template <typename, typename, typename> class _Base>\n     const typename __versa_string<_CharT, _Traits, _Alloc, _Base>::size_type\n@@ -536,10 +536,10 @@ namespace __gnu_cxx\n       return __r;\n     }\n \n-} // namespace __gnu_cxx\n+_GLIBCXX_END_NAMESPACE\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n \n-namespace std\n-{\n   template<typename _CharT, typename _Traits, typename _Alloc,\n            template <typename, typename, typename> class _Base>\n     basic_istream<_CharT, _Traits>&\n@@ -714,6 +714,6 @@ namespace std\n       return __in;\n     }      \n   \n-} // namespace std\n+_GLIBCXX_END_NAMESPACE\n \n #endif // _VSTRING_TCC"}, {"sha": "953700676466e0bba8e088d8e70548a402aee40e", "filename": "libstdc++-v3/include/ext/vstring_fwd.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_fwd.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -42,8 +42,8 @@\n #include <bits/char_traits.h>\n #include <memory> \t// For allocator.\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     class __sso_string_base;\n \n@@ -69,6 +69,7 @@ namespace __gnu_cxx\n   __versa_string<wchar_t, std::char_traits<wchar_t>,\n \t\t std::allocator<wchar_t>, __rc_string_base> __wrc_string;\n #endif  \n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _VSTRING_FWD_H */"}, {"sha": "30ec39ba85187c7a36c2c6986e5cc762c0c19d8f", "filename": "libstdc++-v3/include/ext/vstring_util.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -45,8 +45,8 @@\n #include <locale>\n #include <algorithm> // For std::distance, srd::search.\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     struct __vstring_utility\n     {\n@@ -194,6 +194,7 @@ namespace __gnu_cxx\n       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)\n       { _S_copy(__p, __k1, __k2 - __k1); }\n     };\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _VSTRING_UTIL_H */"}, {"sha": "c1cfadad7bd8918e2e0bf7fdc4aa09eab3ca49ce", "filename": "libstdc++-v3/include/std/std_bitset.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -63,8 +63,8 @@\n  ((__n) < 1 ? 0 : ((__n) + _GLIBCXX_BITSET_BITS_PER_WORD - 1) \\\n                   / _GLIBCXX_BITSET_BITS_PER_WORD)\n \n-namespace _GLIBCXX_STD\n-{\n+_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n+\n   /**\n    *  @if maint\n    *  Base class, general case.  It is a class inveriant that _Nw will be\n@@ -1291,7 +1291,8 @@ namespace _GLIBCXX_STD\n       return __os << __tmp;\n     }\n   //@}\n-} // namespace std\n+\n+_GLIBCXX_END_NESTED_NAMESPACE\n \n #undef _GLIBCXX_BITSET_WORDS\n #undef _GLIBCXX_BITSET_BITS_PER_WORD"}, {"sha": "dc0f373c2502068421a0b300413df0464d1e8724", "filename": "libstdc++-v3/include/std/std_complex.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -49,8 +49,8 @@\n #include <cmath>\n #include <sstream>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // Forward declarations.\n   template<typename _Tp> class complex;\n   template<> class complex<float>;\n@@ -1483,6 +1483,7 @@ namespace std\n   inline\n   complex<long double>::complex(const complex<double>& __z)\n   : _M_value(__z.__rep()) { }\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif\t/* _GLIBCXX_COMPLEX */"}, {"sha": "1ae98c0bece13b3bea7c4ca80bbe882a2f3256ca", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -48,8 +48,8 @@\n #include <bits/basic_file.h>\n #include <bits/gthr.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // [27.8.1.1] template class basic_filebuf\n   /**\n    *  @brief  The actual work of input and output (for files).\n@@ -776,7 +776,8 @@ namespace std\n \t  this->setstate(ios_base::failbit);\n       }\n     };\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #ifndef _GLIBCXX_EXPORT_TEMPLATE\n # include <bits/fstream.tcc>"}, {"sha": "a10a1b89a51621d3d28f64db2316db69d407332e", "filename": "libstdc++-v3/include/std/std_iomanip.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iomanip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iomanip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iomanip.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Standard stream manipulators -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2001, 2002, 2003, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -45,8 +45,8 @@\n #include <istream>\n #include <functional>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // [27.6.3] standard manipulators\n   // Also see DR 183.\n \n@@ -294,6 +294,7 @@ namespace std\n   extern template wistream& operator>>(wistream&, _Setw);\n #endif\n #endif\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _GLIBCXX_IOMANIP */"}, {"sha": "669706dfdf3af1084898b7edbf28532e0387f307", "filename": "libstdc++-v3/include/std/std_iosfwd.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iosfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iosfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iosfwd.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Forwarding declarations -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2001, 2002, 2003, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -49,8 +49,8 @@\n #include <bits/postypes.h>\n #include <bits/functexcept.h>\n \n-namespace std \n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template<typename _CharT, typename _Traits = char_traits<_CharT> >\n     class basic_ios;\n \n@@ -162,6 +162,7 @@ namespace std\n   typedef basic_fstream<wchar_t> \twfstream;\t///< @isiosfwd\n #endif\n   /** @}  */\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _GLIBCXX_IOSFWD */"}, {"sha": "e0c28e16a0511deb6cf72ad022ceb08770d29060", "filename": "libstdc++-v3/include/std/std_iostream.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iostream.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,7 @@\n // Standard iostream objects -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2001, 2002, 2005\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -44,8 +45,8 @@\n #include <ostream>\n #include <istream>\n \n-namespace std \n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   /**\n    *  @name Standard Stream Objects\n    *\n@@ -74,6 +75,7 @@ namespace std\n \n   // For construction of filebuffers for cout, cin, cerr, clog et. al.\n   static ios_base::Init __ioinit;\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _GLIBCXX_IOSTREAM */"}, {"sha": "2c5c572286a3c78bce1496e2c7ca5bc2c98f8505", "filename": "libstdc++-v3/include/std/std_istream.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -44,8 +44,8 @@\n #include <ios>\n #include <limits> // For numeric_limits\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // [27.6.1.1] Template class basic_istream\n   /**\n    *  @brief  Controlling input.\n@@ -813,7 +813,8 @@ namespace std\n   template<typename _CharT, typename _Traits>\n     basic_istream<_CharT, _Traits>& \n     ws(basic_istream<_CharT, _Traits>& __is);\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #ifndef _GLIBCXX_EXPORT_TEMPLATE\n # include <bits/istream.tcc>"}, {"sha": "d1211fdb59eb5b22aa6bb90afa5a4081bd4fc13b", "filename": "libstdc++-v3/include/std/std_limits.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,4 +1,4 @@\n-// The template and inlines for the -*- C++ -*- numeric_limits classes.\n+// The template and inlines for the numeric_limits classes. -*- C++ -*- \n \n // Copyright (C) 1999, 2000, 2001, 2002, 2003, 2005 \n // Free Software Foundation, Inc.\n@@ -147,8 +147,8 @@\n   (__glibcxx_digits (T) * 643 / 2136)\n \n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   /**\n    *  @brief Describes the rounding style for floating-point types.\n    *\n@@ -1149,7 +1149,7 @@ namespace std\n #undef __glibcxx_long_double_traps\n #undef __glibcxx_long_double_tinyness_before\n \n-} // namespace std\n+_GLIBCXX_END_NAMESPACE\n \n #undef __glibcxx_signed\n #undef __glibcxx_min"}, {"sha": "6b1996b3b60b1fafed72fc9e44e8556c29c270cd", "filename": "libstdc++-v3/include/std/std_memory.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_memory.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_memory.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_memory.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // <memory> -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -59,8 +59,8 @@\n #include <debug/debug.h>\n #include <limits>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   /**\n    *  @if maint\n    *  This is a helper function.  The unused second parameter exists to\n@@ -368,6 +368,7 @@ namespace std\n         operator auto_ptr<_Tp1>() throw()\n         { return auto_ptr<_Tp1>(this->release()); }\n   };\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _GLIBCXX_MEMORY */"}, {"sha": "8d4228238e7a38ff965ddc8c516df3d5eab3ef8b", "filename": "libstdc++-v3/include/std/std_ostream.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Output streams -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -43,8 +43,8 @@\n \n #include <ios>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // [27.6.2.1] Template class basic_ostream\n   /**\n    *  @brief  Controlling output.\n@@ -519,7 +519,7 @@ namespace std\n     flush(basic_ostream<_CharT, _Traits>& __os)\n     { return __os.flush(); }\n \n-} // namespace std\n+_GLIBCXX_END_NAMESPACE\n \n #ifndef _GLIBCXX_EXPORT_TEMPLATE\n # include <bits/ostream.tcc>"}, {"sha": "162c2a6cc7dbb54b33b622eed71db6bbf7d47ea9", "filename": "libstdc++-v3/include/std/std_sstream.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -44,8 +44,8 @@\n #include <istream>\n #include <ostream>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // [27.7.1] template class basic_stringbuf\n   /**\n    *  @brief  The actual work of input and output (for std::string).\n@@ -608,7 +608,8 @@ namespace std\n       str(const __string_type& __s)\n       { _M_stringbuf.str(__s); }\n     };\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #ifndef _GLIBCXX_EXPORT_TEMPLATE\n # include <bits/sstream.tcc>"}, {"sha": "0104e54464ea9c224b8c7ca044a2622b9c347972", "filename": "libstdc++-v3/include/std/std_stdexcept.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_stdexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_stdexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_stdexcept.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Standard exception classes  -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -43,8 +43,8 @@\n #include <exception>\n #include <string>\n \n-namespace std \n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   /** Logic errors represent problems in the internal logic of a program;\n    *  in theory, these are preventable, and even detectable before the\n    *  program runs (e.g., violations of class invariants).\n@@ -142,6 +142,7 @@ namespace std\n   public:\n     explicit underflow_error(const string&  __arg);\n   };\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _GLIBCXX_STDEXCEPT */"}, {"sha": "f59e7deb9a245e95648b92373431f513eff6fed6", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -46,8 +46,8 @@\n #include <bits/localefwd.h>\n #include <bits/ios_base.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   /**\n    *  @if maint\n    *  Does stuff.\n@@ -800,7 +800,8 @@ namespace std\n     __copy_streambufs(basic_streambuf<wchar_t>* __sbin,\n \t\t      basic_streambuf<wchar_t>* __sbout);\n #endif\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n #ifndef _GLIBCXX_EXPORT_TEMPLATE\n # include <bits/streambuf.tcc>"}, {"sha": "82b2fb891a7e895aee42c6918257dfcf0227a670", "filename": "libstdc++-v3/include/std/std_valarray.h", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_valarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_valarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_valarray.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- valarray class.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -47,8 +47,8 @@\n #include <algorithm>\n #include <debug/debug.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template<class _Clos, typename _Tp> \n     class _Expr;\n \n@@ -87,13 +87,13 @@ namespace std\n   template<class _Tp> class mask_array;     // masked array\n   template<class _Tp> class indirect_array; // indirected array\n \n-} // namespace std\n+_GLIBCXX_END_NAMESPACE\n \n #include <bits/valarray_array.h>\n #include <bits/valarray_before.h>\n   \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   /**\n    *  @brief  Smart array designed to support numeric processing.\n    *\n@@ -535,18 +535,17 @@ namespace std\n       return _M_data[__i];\n     }\n \n-} // std::\n+_GLIBCXX_END_NAMESPACE\n \n #include <bits/valarray_after.h>\n-\n #include <bits/slice_array.h>\n #include <bits/gslice.h>\n #include <bits/gslice_array.h>\n #include <bits/mask_array.h>\n #include <bits/indirect_array.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template<typename _Tp>\n     inline\n     valarray<_Tp>::valarray() : _M_size(0), _M_data(0) {}\n@@ -1005,6 +1004,6 @@ _DEFINE_BINARY_OPERATOR(>, __greater)\n _DEFINE_BINARY_OPERATOR(<=, __less_equal)\n _DEFINE_BINARY_OPERATOR(>=, __greater_equal)\n \n-} // namespace std\n+_GLIBCXX_END_NAMESPACE\n \n #endif /* _GLIBCXX_VALARRAY */"}, {"sha": "bdef568f0cda3c01fa145913b750629e74843dc1", "filename": "libstdc++-v3/include/tr1/array", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -43,8 +43,8 @@\n //namespace std::tr1\n namespace std\n {\n-namespace tr1\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n   /// @brief  struct array [6.2.2].\n   /// NB: Requires complete type _Tp.\n   template<typename _Tp, std::size_t _Nm = 1>\n@@ -228,7 +228,8 @@ namespace tr1\n     const _Tp&\n     get(const array<_Tp, _Nm>& __arr)\n     { return __arr[_Int]; }\n-} // namespace std::tr1\n+\n+_GLIBCXX_END_NAMESPACE\n }\n \n #endif"}, {"sha": "e47c570c8817d9efe893e52f9014681cd0f36bb1", "filename": "libstdc++-v3/include/tr1/boost_shared_ptr.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -57,8 +57,7 @@\n // namespace std::tr1\n namespace std\n {\n-namespace tr1\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n class bad_weak_ptr : public std::exception\n {\n@@ -977,7 +976,7 @@ template<typename _Tp>\n     mutable weak_ptr<_Tp> _M_weak_this;\n   };\n \n-} // namespace tr1\n+_GLIBCXX_END_NAMESPACE\n } // namespace std\n \n #endif"}, {"sha": "ae31faef758a03342f8d8075afc6e5299a9f1538", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -47,8 +47,8 @@\n \n namespace std\n {\n-namespace tr1\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n   template<typename _MemberPointer>\n     class _Mem_fn;\n \n@@ -1274,7 +1274,8 @@ namespace tr1\n \treturn result;\n       }\n     };\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n }\n \n #endif"}, {"sha": "70616146540fde4fd678f4f58ec03ce43ce92a3d", "filename": "libstdc++-v3/include/tr1/hashtable", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -879,8 +879,8 @@ namespace Internal\n \n namespace std\n { \n-namespace tr1\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n   //----------------------------------------------------------------------\n   // Class template hashtable, class definition.\n   \n@@ -1853,7 +1853,8 @@ namespace tr1\n \t  __throw_exception_again;\n \t}\n     }\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n }\t\t\t\t// Namespace std::tr1\n \n #endif /* GNU_LIBSTDCXX_TR1_HASHTABLE_ */"}, {"sha": "18f5d4d070fc7545d6e542cb2d7c069c048b5cfb", "filename": "libstdc++-v3/include/tr1/ref_fwd.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fref_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fref_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fref_fwd.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -40,8 +40,7 @@\n \n namespace std\n {\n-namespace tr1\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n template<typename _Tp>\n   class reference_wrapper;\n@@ -54,6 +53,7 @@ template<typename _Tp>\n template<typename _Tp>\n   reference_wrapper<const _Tp>\n   cref(const _Tp& __t);\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n }\n #endif"}, {"sha": "15c944f9eec029a4edfc5b5280e565089651ffbe", "filename": "libstdc++-v3/include/tr1/tuple", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -41,8 +41,8 @@\n \n namespace std\n {\n-namespace tr1\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n  // An implementation specific class which is used in the tuple class\n  // when the tuple is not maximum possible size.\n  struct _NullClass { };\n@@ -267,7 +267,8 @@ namespace tr1\n #include <tr1/repeat.h>\n #undef _GLIBCXX_REPEAT_HEADER\n #undef _SHORT_REPEAT\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n }\n \n #include <tr1/functional>"}, {"sha": "f4a183847baa49313a794dadaaf83ef7593ae2d9", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -40,8 +40,8 @@\n // namespace std::tr1\n namespace std\n {\n-namespace tr1\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n   // For use in __in_array and elsewhere.\n   struct __sfinae_types\n   {\n@@ -687,7 +687,7 @@ namespace tr1\n #undef _DEFINE_SPEC\n #undef _DEFINE_SPEC_BODY\n \n-}\n+_GLIBCXX_END_NAMESPACE\n }\n \n #endif"}, {"sha": "fded5492ca4f3fa6784fbd5e4c8d7a2d2005c3de", "filename": "libstdc++-v3/include/tr1/type_traits_fwd.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits_fwd.h?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -40,8 +40,8 @@\n // namespace std::tr1\n namespace std\n {\n-namespace tr1\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n   /// @brief  helper classes [4.3].\n   template<typename _Tp, _Tp __v>\n     struct integral_constant;\n@@ -219,7 +219,8 @@ namespace tr1\n   /// @brief  other transformations [4.8].\n   template<std::size_t _Len, std::size_t _Align>\n     struct aligned_storage;\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n }\n \n #endif"}, {"sha": "2f1a239c7c9bfd030a4336eaa078886ae7902f06", "filename": "libstdc++-v3/include/tr1/unordered_map", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -42,8 +42,8 @@\n \n namespace std\n {\n-namespace tr1\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n   // XXX When we get typedef templates these class definitions\n   // will be unnecessary.\n \n@@ -164,7 +164,7 @@ namespace tr1\n \t unordered_multimap<Key, T, Hash, Pred, Alloc, cache_hash_code>& y)\n     { x.swap(y); }\n \n-}\n+_GLIBCXX_END_NAMESPACE\n }\n \n #endif /* GNU_LIBSTDCXX_TR1_UNORDERED_MAP_ */"}, {"sha": "c3c16ddc6d798de329a558e3dca648d436a50a07", "filename": "libstdc++-v3/include/tr1/unordered_set", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -40,8 +40,7 @@\n \n namespace std\n { \n-namespace tr1\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n   // XXX When we get typedef templates these class definitions\n   // will be unnecessary.\n@@ -159,7 +158,7 @@ namespace tr1\n \t unordered_multiset<Value, Hash, Pred, Alloc, cache_hash_code>& y)\n    { x.swap(y); }\n \n-}\n+_GLIBCXX_END_NAMESPACE\n }\n \n #endif /* GNU_LIBSTDCXX_TR1_UNORDERED_SET_ */"}, {"sha": "db140b29a66477f1f415a9ce54acd204c60f0e45", "filename": "libstdc++-v3/include/tr1/utility", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Futility?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -38,8 +38,8 @@\n \n namespace std\n {\n-namespace tr1\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n   template<class _Tp> class tuple_size;\n   template<int _Int, class _Tp> class tuple_element;\n \n@@ -92,7 +92,8 @@ namespace tr1\n      const typename tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&\n      get(const pair<_Tp1, _Tp2>& __in)\n      { return __pair_get<_Int>::__const_get(__in); }\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n } \n \n #endif"}, {"sha": "74aeac507fd699a0bdcccf5c201f5a07ecff2a8b", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -118,6 +118,8 @@ ENABLE_SYMVERS_DARWIN_FALSE = @ENABLE_SYMVERS_DARWIN_FALSE@\n ENABLE_SYMVERS_DARWIN_TRUE = @ENABLE_SYMVERS_DARWIN_TRUE@\n ENABLE_SYMVERS_FALSE = @ENABLE_SYMVERS_FALSE@\n ENABLE_SYMVERS_GNU_FALSE = @ENABLE_SYMVERS_GNU_FALSE@\n+ENABLE_SYMVERS_GNU_NAMESPACE_FALSE = @ENABLE_SYMVERS_GNU_NAMESPACE_FALSE@\n+ENABLE_SYMVERS_GNU_NAMESPACE_TRUE = @ENABLE_SYMVERS_GNU_NAMESPACE_TRUE@\n ENABLE_SYMVERS_GNU_TRUE = @ENABLE_SYMVERS_GNU_TRUE@\n ENABLE_SYMVERS_TRUE = @ENABLE_SYMVERS_TRUE@\n EXEEXT = @EXEEXT@"}, {"sha": "c787f170612a8aeed5c1c345e0addcbfd9b4bb7e", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -159,6 +159,8 @@ ENABLE_SYMVERS_DARWIN_FALSE = @ENABLE_SYMVERS_DARWIN_FALSE@\n ENABLE_SYMVERS_DARWIN_TRUE = @ENABLE_SYMVERS_DARWIN_TRUE@\n ENABLE_SYMVERS_FALSE = @ENABLE_SYMVERS_FALSE@\n ENABLE_SYMVERS_GNU_FALSE = @ENABLE_SYMVERS_GNU_FALSE@\n+ENABLE_SYMVERS_GNU_NAMESPACE_FALSE = @ENABLE_SYMVERS_GNU_NAMESPACE_FALSE@\n+ENABLE_SYMVERS_GNU_NAMESPACE_TRUE = @ENABLE_SYMVERS_GNU_NAMESPACE_TRUE@\n ENABLE_SYMVERS_GNU_TRUE = @ENABLE_SYMVERS_GNU_TRUE@\n ENABLE_SYMVERS_TRUE = @ENABLE_SYMVERS_TRUE@\n EXEEXT = @EXEEXT@"}, {"sha": "b9097812a756d1de049aae72f7fff72f54f69979", "filename": "libstdc++-v3/libsupc++/eh_alloc.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -45,8 +45,8 @@ using std::free;\n using std::malloc;\n using std::memcpy;\n #else\n-// In a freestanding environment, these functions may not be\n-// available -- but for now, we assume that they are.\n+// In a freestanding environment, these functions may not be available\n+// -- but for now, we assume that they are.\n extern \"C\" void *malloc (std::size_t);\n extern \"C\" void free(void *);\n extern \"C\" int memset (void *, int, std::size_t);"}, {"sha": "cfaf5b1e74c68bf98f4f3101c4e70ec40b2beb38", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Exception Handling support header for -*- C++ -*-\n \n-// Copyright (C) 1995, 1996, 1997, 1998, 2000, 2001, 2002\n+// Copyright (C) 1995, 1996, 1997, 1998, 2000, 2001, 2002, 2005\n // Free Software Foundation\n //\n // This file is part of GCC.\n@@ -39,6 +39,8 @@\n \n #pragma GCC visibility push(default)\n \n+#include <bits/c++config.h>\n+\n extern \"C++\" {\n \n namespace std \n@@ -102,8 +104,8 @@ namespace std\n   bool uncaught_exception() throw();\n } // namespace std\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   /** A replacement for the standard terminate_handler which prints more\n       information about the terminating exception (if any) on stderr.  Call\n       @code\n@@ -115,7 +117,8 @@ namespace __gnu_cxx\n       In 3.4 and later, this is on by default.\n   */\n   void __verbose_terminate_handler ();\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n   \n } // extern \"C++\"\n "}, {"sha": "dd3b657c0e62bedd0b6fc5a43ecee6c36175853a", "filename": "libstdc++-v3/libsupc++/vterminate.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvterminate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvterminate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvterminate.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Verbose terminate_handler -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004 Free Software Foundation\n+// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,6 +28,7 @@\n // the GNU General Public License.\n \n #include <bits/c++config.h>\n+\n #if _GLIBCXX_HOSTED\n #include <cstdlib>\n #include <exception>\n@@ -38,8 +39,8 @@\n using namespace std;\n using namespace abi;\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   // A replacement for the standard terminate_handler which prints\n   // more information about the terminating exception (if any) on\n   // stderr.\n@@ -96,5 +97,7 @@ namespace __gnu_cxx\n     \n     abort();\n   }\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n+\n #endif"}, {"sha": "053229cd2b1ce2c9e7b0e9076e2e9d76a4efd506", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -103,6 +103,8 @@ ENABLE_SYMVERS_DARWIN_FALSE = @ENABLE_SYMVERS_DARWIN_FALSE@\n ENABLE_SYMVERS_DARWIN_TRUE = @ENABLE_SYMVERS_DARWIN_TRUE@\n ENABLE_SYMVERS_FALSE = @ENABLE_SYMVERS_FALSE@\n ENABLE_SYMVERS_GNU_FALSE = @ENABLE_SYMVERS_GNU_FALSE@\n+ENABLE_SYMVERS_GNU_NAMESPACE_FALSE = @ENABLE_SYMVERS_GNU_NAMESPACE_FALSE@\n+ENABLE_SYMVERS_GNU_NAMESPACE_TRUE = @ENABLE_SYMVERS_GNU_NAMESPACE_TRUE@\n ENABLE_SYMVERS_GNU_TRUE = @ENABLE_SYMVERS_GNU_TRUE@\n ENABLE_SYMVERS_TRUE = @ENABLE_SYMVERS_TRUE@\n EXEEXT = @EXEEXT@"}, {"sha": "0855c591e27578fdf09ff74b05bce7d3cdf37433", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -43,6 +43,10 @@ if ENABLE_SYMVERS_GNU\n version_arg = -Wl,--version-script=libstdc++-symbols.ver\n version_dep = libstdc++-symbols.ver\n endif\n+if ENABLE_SYMVERS_GNU_NAMESPACE\n+version_arg = -Wl,--version-script=libstdc++-symbols.ver\n+version_dep = libstdc++-symbols.ver\n+endif\n if ENABLE_SYMVERS_DARWIN\n version_arg = -Wl,-exported_symbols_list,libstdc++-symbols.explist\n version_dep = libstdc++-symbols.explist"}, {"sha": "f78e7353f862391a8a9e4bbedfef3786072595d3", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -137,6 +137,8 @@ ENABLE_SYMVERS_DARWIN_FALSE = @ENABLE_SYMVERS_DARWIN_FALSE@\n ENABLE_SYMVERS_DARWIN_TRUE = @ENABLE_SYMVERS_DARWIN_TRUE@\n ENABLE_SYMVERS_FALSE = @ENABLE_SYMVERS_FALSE@\n ENABLE_SYMVERS_GNU_FALSE = @ENABLE_SYMVERS_GNU_FALSE@\n+ENABLE_SYMVERS_GNU_NAMESPACE_FALSE = @ENABLE_SYMVERS_GNU_NAMESPACE_FALSE@\n+ENABLE_SYMVERS_GNU_NAMESPACE_TRUE = @ENABLE_SYMVERS_GNU_NAMESPACE_TRUE@\n ENABLE_SYMVERS_GNU_TRUE = @ENABLE_SYMVERS_GNU_TRUE@\n ENABLE_SYMVERS_TRUE = @ENABLE_SYMVERS_TRUE@\n EXEEXT = @EXEEXT@\n@@ -279,9 +281,11 @@ AM_CPPFLAGS = $(GLIBCXX_INCLUDES)\n toolexeclib_LTLIBRARIES = libstdc++.la\n @ENABLE_SYMVERS_DARWIN_TRUE@@ENABLE_SYMVERS_TRUE@version_arg = -Wl,-exported_symbols_list,libstdc++-symbols.explist\n @ENABLE_SYMVERS_FALSE@version_arg = \n+@ENABLE_SYMVERS_GNU_NAMESPACE_TRUE@@ENABLE_SYMVERS_TRUE@version_arg = -Wl,--version-script=libstdc++-symbols.ver\n @ENABLE_SYMVERS_GNU_TRUE@@ENABLE_SYMVERS_TRUE@version_arg = -Wl,--version-script=libstdc++-symbols.ver\n @ENABLE_SYMVERS_DARWIN_TRUE@@ENABLE_SYMVERS_TRUE@version_dep = libstdc++-symbols.explist\n @ENABLE_SYMVERS_FALSE@version_dep = \n+@ENABLE_SYMVERS_GNU_NAMESPACE_TRUE@@ENABLE_SYMVERS_TRUE@version_dep = libstdc++-symbols.ver\n @ENABLE_SYMVERS_GNU_TRUE@@ENABLE_SYMVERS_TRUE@version_dep = libstdc++-symbols.ver\n \n # Source files linked in via configuration/make substitution for a"}, {"sha": "aca019ca4962bfbbd74c8a852ad624d5a044a116", "filename": "libstdc++-v3/src/allocator-inst.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fallocator-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fallocator-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fallocator-inst.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,7 @@\n // Explicit instantiation file.\n \n-// Copyright (C) 1999, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2001, 2002, 2003, 2004, 2005\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,8 +34,9 @@\n \n #include <memory>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template class allocator<char>;\n   template class allocator<wchar_t>;\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "761ec6136239841b3f101c5ebe307c94d2a423c9", "filename": "libstdc++-v3/src/bitmap_allocator.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -29,8 +29,8 @@\n \n #include <ext/bitmap_allocator.h>\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   namespace balloc\n   {\n     template class __mini_vector<std::pair\n@@ -124,4 +124,5 @@ namespace __gnu_cxx\n   // Instantiations.\n   template class bitmap_allocator<char>;\n   template class bitmap_allocator<wchar_t>;\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "e602c75c00bd8d368d8dfbd9be243a69ee7588f3", "filename": "libstdc++-v3/src/codecvt.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -29,8 +29,8 @@\n \n #include <locale>\n \n-namespace std \n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // Definitions for locale::id of standard facets that are specialized.\n  locale::id codecvt<char, char, mbstate_t>::id;\n \n@@ -149,4 +149,5 @@ namespace std\n   do_always_noconv() const throw()\n   { return false; }\n #endif //  _GLIBCXX_USE_WCHAR_T\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "ce661600507da35f7c369f3642070c9472b5ec66", "filename": "libstdc++-v3/src/compatibility.cc", "status": "modified", "additions": 125, "deletions": 17, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -43,17 +43,18 @@\n #define _M_set_length_and_sharable(a) _M_set_length_and_sharableXX(a)\n #define ignore ignoreXX\n #define eq eqXX\n+#define _List_node_base _List_node_baseXX\n+#define __gnu_debug __gnu_debugXX\n #endif\n \n #include <string>\n #include <istream>\n #include <fstream>\n #include <sstream>\n \n-namespace std\n-{\n-  // std::istream ignore explicit specializations.\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n \n+  // std::istream ignore explicit specializations.\n   template<>\n     basic_istream<char>&\n     basic_istream<char>::\n@@ -82,7 +83,7 @@ namespace std\n \t\t    {\n \t\t      streamsize __size = std::min(streamsize(__sb->egptr()\n \t\t\t\t\t\t\t      - __sb->gptr()),\n-\t\t\t\t\t\t   streamsize(__n - _M_gcount));\n+\t\t\t\t\t          streamsize(__n - _M_gcount));\n \t\t      if (__size > 1)\n \t\t\t{\n \t\t\t  __sb->gbump(__size);\n@@ -147,7 +148,7 @@ namespace std\n \t\t    {\n \t\t      streamsize __size = std::min(streamsize(__sb->egptr()\n \t\t\t\t\t\t\t      - __sb->gptr()),\n-\t\t\t\t\t\t   streamsize(__n - _M_gcount));\n+\t\t\t\t\t\t  streamsize(__n - _M_gcount));\n \t\t      if (__size > 1)\n \t\t\t{\n \t\t\t  __sb->gbump(__size);\n@@ -184,7 +185,9 @@ namespace std\n       return *this;\n     }\n #endif\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n+\n \n // NB: These symbols renames should go into the shared library only,\n // and only those shared libraries that support versioning.\n@@ -194,8 +197,9 @@ namespace std\n _ZNSt19istreambuf_iteratorIcSt11char_traitsIcEEppEv\n _ZNSt19istreambuf_iteratorIwSt11char_traitsIwEEppEv\n  */\n-namespace std\n-{\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template\n     istreambuf_iterator<char>&\n     istreambuf_iterator<char>::operator++();\n@@ -205,7 +209,9 @@ namespace std\n     istreambuf_iterator<wchar_t>&\n     istreambuf_iterator<wchar_t>::operator++();\n #endif\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n+\n \n /* gcc-4.0.0\n _ZNSs4_Rep26_M_set_length_and_sharableEj\n@@ -236,8 +242,8 @@ _ZNSt13basic_istreamIwSt11char_traitsIwEE6ignoreEv\n _ZNSt11char_traitsIcE2eqERKcS2_\n _ZNSt11char_traitsIwE2eqERKwS2_\n  */\n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // std::char_traits is explicitly specialized\n   bool (* __p1)(const char&, const char&) = &char_traits<char>::eq;\n \n@@ -329,7 +335,8 @@ namespace std\n     bool\n     basic_ofstream<wchar_t>::is_open() const;\n #endif\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n \n // The rename syntax for default exported names is\n //   asm (\".symver name1,exportedname@GLIBCXX_3.4\")\n@@ -360,6 +367,107 @@ namespace std\n #include <bits/compatibility.h>\n #undef _GLIBCXX_APPLY_SYMVER\n \n+/* gcc-3.4.0\n+_ZN10__gnu_norm15_List_node_base4hookEPS0_;\n+_ZN10__gnu_norm15_List_node_base4swapERS0_S1_;\n+_ZN10__gnu_norm15_List_node_base6unhookEv;\n+_ZN10__gnu_norm15_List_node_base7reverseEv;\n+_ZN10__gnu_norm15_List_node_base8transferEPS0_S1_;\n+_ZN11__gnu_debug19_Safe_iterator_base9_M_attachEPNS_19_Safe_sequence_baseEb;\n+_ZN11__gnu_debug19_Safe_iterator_base9_M_detachEv;\n+_ZNK11__gnu_debug19_Safe_iterator_base11_M_singularEv;\n+_ZNK11__gnu_debug19_Safe_iterator_base14_M_can_compareERKS0_;\n+_ZN11__gnu_debug19_Safe_sequence_base13_M_detach_allEv;\n+_ZN11__gnu_debug19_Safe_sequence_base18_M_detach_singularEv;\n+_ZN11__gnu_debug19_Safe_sequence_base22_M_revalidate_singularEv;\n+_ZN11__gnu_debug19_Safe_sequence_base7_M_swapERS0_;\n+_ZNK11__gnu_debug16_Error_formatter8_M_errorEv;\n+_ZNK11__gnu_debug16_Error_formatter10_M_messageENS_13_Debug_msg_idE;\n+_ZNK11__gnu_debug16_Error_formatter10_Parameter14_M_print_fieldEPKS0_PKc;\n+_ZNK11__gnu_debug16_Error_formatter10_Parameter20_M_print_descriptionEPKS0_;\n+_ZNK11__gnu_debug16_Error_formatter13_M_print_wordEPKc;\n+_ZNK11__gnu_debug16_Error_formatter15_M_print_stringEPKc;\n+*/\n+#include \"debug_list.cc\"\n+#include \"debug.cc\"\n+\n+_GLIBCXX_ASM_SYMVER(_ZNSt17_List_node_baseXX4hookEPS_, \\\n+_ZN10__gnu_norm15_List_node_base4hookEPS0_, \\\n+GLIBCXX_3.4)\n+\n+_GLIBCXX_ASM_SYMVER(_ZNSt17_List_node_baseXX4swapERS_S0_, \\\n+_ZN10__gnu_norm15_List_node_base4swapERS0_S1_, \\\n+GLIBCXX_3.4)\n+\n+_GLIBCXX_ASM_SYMVER(_ZNSt17_List_node_baseXX6unhookEv, \\\n+_ZN10__gnu_norm15_List_node_base6unhookEv, \\\n+GLIBCXX_3.4)\n+\n+_GLIBCXX_ASM_SYMVER(_ZNSt17_List_node_baseXX7reverseEv, \\\n+_ZN10__gnu_norm15_List_node_base7reverseEv, \\\n+GLIBCXX_3.4)\n+\n+_GLIBCXX_ASM_SYMVER(_ZNSt17_List_node_baseXX8transferEPS_S0_, \\\n+_ZN10__gnu_norm15_List_node_base8transferEPS0_S1_, \\\n+GLIBCXX_3.4)\n+\n+_GLIBCXX_ASM_SYMVER(_ZNSt13__gnu_debugXX19_Safe_iterator_base9_M_attachEPNS_19_Safe_sequence_baseEb, \\\n+_ZN11__gnu_debug19_Safe_iterator_base9_M_attachEPNS_19_Safe_sequence_baseEb, \\\n+\t\t    GLIBCXX_3.4)\n+\n+_GLIBCXX_ASM_SYMVER(_ZNSt13__gnu_debugXX19_Safe_iterator_base9_M_detachEv, \\\n+_ZN11__gnu_debug19_Safe_iterator_base9_M_detachEv, \\\n+GLIBCXX_3.4)\n+\n+_GLIBCXX_ASM_SYMVER(_ZNKSt13__gnu_debugXX19_Safe_iterator_base11_M_singularEv,\\\n+_ZNK11__gnu_debug19_Safe_iterator_base11_M_singularEv, \\\n+GLIBCXX_3.4)\n+\n+_GLIBCXX_ASM_SYMVER(_ZNKSt13__gnu_debugXX19_Safe_iterator_base14_M_can_compareERKS0_, \\\n+_ZNK11__gnu_debug19_Safe_iterator_base14_M_can_compareERKS0_, \\\n+GLIBCXX_3.4)\n+\n+_GLIBCXX_ASM_SYMVER(_ZNSt13__gnu_debugXX19_Safe_sequence_base13_M_detach_allEv, \\\n+_ZN11__gnu_debug19_Safe_sequence_base13_M_detach_allEv, \\\n+GLIBCXX_3.4)\n+\n+_GLIBCXX_ASM_SYMVER(_ZNSt13__gnu_debugXX19_Safe_sequence_base18_M_detach_singularEv, \\\n+_ZN11__gnu_debug19_Safe_sequence_base18_M_detach_singularEv, \\\n+GLIBCXX_3.4)\n+\n+_GLIBCXX_ASM_SYMVER(_ZNSt13__gnu_debugXX19_Safe_sequence_base22_M_revalidate_singularEv, \\\n+_ZN11__gnu_debug19_Safe_sequence_base22_M_revalidate_singularEv, \\\n+GLIBCXX_3.4)\n+\n+_GLIBCXX_ASM_SYMVER(_ZNSt13__gnu_debugXX19_Safe_sequence_base7_M_swapERS0_, \\\n+_ZN11__gnu_debug19_Safe_sequence_base7_M_swapERS0_, \\\n+GLIBCXX_3.4)\n+\n+_GLIBCXX_ASM_SYMVER(_ZNKSt13__gnu_debugXX16_Error_formatter8_M_errorEv, \\\n+_ZNK11__gnu_debug16_Error_formatter8_M_errorEv, \\\n+GLIBCXX_3.4)\n+\n+_GLIBCXX_ASM_SYMVER(_ZNKSt13__gnu_debugXX16_Error_formatter10_M_messageENS_13_Debug_msg_idE, \\\n+_ZNK11__gnu_debug16_Error_formatter10_M_messageENS_13_Debug_msg_idE, \\\n+GLIBCXX_3.4)\n+\n+_GLIBCXX_ASM_SYMVER(_ZNKSt13__gnu_debugXX16_Error_formatter10_Parameter14_M_print_fieldEPKS0_PKc, \\\n+_ZNK11__gnu_debug16_Error_formatter10_Parameter14_M_print_fieldEPKS0_PKc, \\\n+GLIBCXX_3.4)\n+\n+_GLIBCXX_ASM_SYMVER(_ZNKSt13__gnu_debugXX16_Error_formatter10_Parameter20_M_print_descriptionEPKS0_, \\\n+_ZNK11__gnu_debug16_Error_formatter10_Parameter20_M_print_descriptionEPKS0_, \\\n+GLIBCXX_3.4)\n+\n+_GLIBCXX_ASM_SYMVER(_ZNKSt13__gnu_debugXX16_Error_formatter13_M_print_wordEPKc, \\\n+_ZNK11__gnu_debug16_Error_formatter13_M_print_wordEPKc, \\\n+GLIBCXX_3.4)\n+\n+_GLIBCXX_ASM_SYMVER(_ZNKSt13__gnu_debugXX16_Error_formatter15_M_print_stringEPKc, \\\n+_ZNK11__gnu_debug16_Error_formatter15_M_print_stringEPKc, \\\n+GLIBCXX_3.4)\n+\n+\n #endif\n \n #ifdef _GLIBCXX_SYMVER_DARWIN\n@@ -377,12 +485,12 @@ namespace std\n using namespace std;\n \n extern \"C\" void\n-__eprintf (const char *string, const char *expression,\n-\t   unsigned int line, const char *filename)\n+__eprintf(const char *string, const char *expression,\n+\t  unsigned int line, const char *filename)\n {\n-  fprintf (stderr, string, expression, line, filename);\n-  fflush (stderr);\n-  abort ();\n+  fprintf(stderr, string, expression, line, filename);\n+  fflush(stderr);\n+  abort();\n }\n #endif\n #endif"}, {"sha": "103795888b0fe7c18729a7e6636bdf8bd2cff42c", "filename": "libstdc++-v3/src/complex_io.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fcomplex_io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fcomplex_io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcomplex_io.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- complex number classes.\n \n-// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,8 +29,8 @@\n \n #include <complex>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template\n     basic_istream<char, char_traits<char> >&\n     operator>>(basic_istream<char, char_traits<char> >&, complex<float>&);\n@@ -90,4 +90,5 @@ namespace std\n     operator<<(basic_ostream<wchar_t, char_traits<wchar_t> >&,\n                const complex<long double>&);\n #endif //_GLIBCXX_USE_WCHAR_T\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "904f72becd68b53f62f6ec09b01f42998094fab2", "filename": "libstdc++-v3/src/concept-inst.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -44,8 +44,8 @@\n \n #define _Instantiate(...) template void __function_requires< __VA_ARGS__ > ()\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   template void __aux_require_boolean_expr<bool>(bool const&);\n \n   _Instantiate(_ConvertibleConcept<unsigned, unsigned> );\n@@ -105,7 +105,8 @@ namespace __gnu_cxx\n \n   _Instantiate(_RandomAccessIteratorConcept<wchar_t const*> );\n #endif\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n #undef _Instantiate\n "}, {"sha": "634c135b2f9b16378941f24878f527a9e622272f", "filename": "libstdc++-v3/src/ctype.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -28,8 +28,8 @@\n \n #include <locale>\n \n-namespace std \n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // Definitions for static const data members of ctype_base.\n   const ctype_base::mask ctype_base::space;\n   const ctype_base::mask ctype_base::print;\n@@ -110,5 +110,5 @@ namespace std\n \t}\n     }\n #endif\n-} // namespace std\n \n+_GLIBCXX_END_NAMESPACE"}, {"sha": "9dc73ae67bc98a80092a9e2544043ed008fc28c9", "filename": "libstdc++-v3/src/debug.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -44,6 +44,8 @@ namespace __gnu_internal\n   static __glibcxx_mutex_define_initialized(iterator_base_mutex);\n } // namespace __gnu_internal\n \n+namespace std\n+{\n namespace __gnu_debug\n {\n   const char* _S_debug_messages[] = \n@@ -247,8 +249,8 @@ namespace __gnu_debug\n   _Safe_iterator_base::\n   _M_can_compare(const _Safe_iterator_base& __x) const\n   {\n-    return (!_M_singular() && !__x._M_singular() \n-\t    && _M_sequence == __x._M_sequence);\n+    return (!_M_singular() \n+\t    && !__x._M_singular() && _M_sequence == __x._M_sequence);\n   }\n \n   void\n@@ -668,3 +670,4 @@ namespace __gnu_debug\n     _Error_formatter::_M_format_word(char*, int, const char*, \n \t\t\t\t     const char*) const;\n } // namespace __gnu_debug\n+} // namespace std"}, {"sha": "0396ba45439d9e725018a862a7926b4dd4aa8173", "filename": "libstdc++-v3/src/ext-inst.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fext-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fext-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fext-inst.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -39,8 +39,8 @@ namespace __gnu_internal\n   const int min_len = __gnu_cxx::_Rope_constants::_S_max_rope_depth + 1;\n }\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   using namespace __gnu_internal;\n \n   template\n@@ -66,4 +66,5 @@ namespace __gnu_cxx\n \n   template class stdio_filebuf<wchar_t>;\n #endif\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "762ccb8a9d60e33b14a3932094da73ceb6ac3480", "filename": "libstdc++-v3/src/fstream-inst.cc", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Ffstream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Ffstream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffstream-inst.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Explicit instantiation file.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -34,29 +34,18 @@\n \n #include <fstream>\n \n-namespace std\n-{\n-  // filebuf\n-  template class basic_filebuf<char, char_traits<char> >;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n-  template class basic_filebuf<wchar_t, char_traits<wchar_t> >;\n-#endif\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  // ifstream\n+  template class basic_filebuf<char, char_traits<char> >;\n   template class basic_ifstream<char>;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n-  template class basic_ifstream<wchar_t>;\n-#endif\n-\n-  // ofstream\n   template class basic_ofstream<char>;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n-  template class basic_ofstream<wchar_t>;\n-#endif\n-\n-  // fstream\n   template class basic_fstream<char>;\n+\n #ifdef _GLIBCXX_USE_WCHAR_T\n+  template class basic_filebuf<wchar_t, char_traits<wchar_t> >;\n+  template class basic_ifstream<wchar_t>;\n+  template class basic_ofstream<wchar_t>;\n   template class basic_fstream<wchar_t>;\n #endif\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "80a2d9ec34d7e251382eeac5f5f1f8ff29958a2a", "filename": "libstdc++-v3/src/functexcept.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,15 +32,16 @@\n #include <new>\n #include <typeinfo>\n #include <ios>\n+\n #ifdef _GLIBCXX_USE_NLS\n # include <libintl.h>\n # define _(msgid)   gettext (msgid)\n #else\n # define _(msgid)   (msgid)\n #endif\n \n-namespace std \n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n #if __EXCEPTIONS\n   void\n   __throw_bad_exception(void)\n@@ -154,4 +155,5 @@ namespace std\n   __throw_ios_failure(const char*)\n   { abort(); }\n #endif //__EXCEPTIONS\n-}\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "e53152321e0eef4ea2903d842a2ccf78c9540fdd", "filename": "libstdc++-v3/src/globals_io.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fglobals_io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fglobals_io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fglobals_io.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -49,8 +49,8 @@\n // In macro form:\n // _GLIBCXX_ASM_SYMVER(currentname, oldname, GLIBCXX_3.2)\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // Standard stream objects.\n   // NB: Iff <iostream> is included, these definitions become wonky.\n   typedef char fake_istream[sizeof(istream)]\n@@ -72,7 +72,8 @@ namespace std\n   fake_wostream wcerr;\n   fake_wostream wclog;\n #endif\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n namespace __gnu_internal\n {"}, {"sha": "27f3e5bb1f952d862f52daae560433394b29a8e0", "filename": "libstdc++-v3/src/ios-inst.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fios-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fios-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios-inst.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -34,11 +34,12 @@\n \n #include <ios>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template class basic_ios<char>;\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template class basic_ios<wchar_t>;\n #endif\n-}\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "fdc62b4d0b1e6fc62fb0c437ab157ed8b9588ae1", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Iostreams base classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -36,8 +36,8 @@\n #include <limits>\n #include <bits/atomicity.h>\n \n-namespace std \n-{  \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // XXX GLIBCXX_ABI Deprecated\n    // Definitions for static const data members of __ios_flags.\n   const __ios_flags::__int_type __ios_flags::_S_boolalpha;\n@@ -225,4 +225,5 @@ namespace std\n       }\n     _M_callbacks = 0;\n   }\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "33d7ffcd4e1f2c8bec4a41d8fe3583c29dcaef78", "filename": "libstdc++-v3/src/ios_failure.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fios_failure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fios_failure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios_failure.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Iostreams base classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -34,8 +34,8 @@\n \n #include <ios>\n \n-namespace std \n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   ios_base::failure::failure(const string& __str) throw()\n   : _M_msg(__str) { }\n \n@@ -45,4 +45,5 @@ namespace std\n   const char*\n   ios_base::failure::what() const throw()\n   { return _M_msg.c_str(); }\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "7e3028e84534a2eaad5b90464b0f4c7bea71d54d", "filename": "libstdc++-v3/src/ios_init.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fios_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fios_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios_init.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Iostreams base classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -64,8 +64,8 @@ namespace __gnu_internal\n #endif\n } // namespace __gnu_internal\n \n-namespace std \n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   using namespace __gnu_internal;\n   \n   extern istream cin;\n@@ -196,4 +196,5 @@ namespace std\n       }\n     return __ret; \n   }\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "5be1c9255bd4685f97828472539fc2518c10915c", "filename": "libstdc++-v3/src/ios_locale.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fios_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fios_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios_locale.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Iostreams base classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -35,8 +35,8 @@\n #include <ios>\n #include <locale>\n \n-namespace std \n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // Called only by basic_ios<>::init.\n   void \n   ios_base::_M_init()   \n@@ -57,4 +57,5 @@ namespace std\n     _M_call_callbacks(imbue_event);\n     return __old;\n   }\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "5da43cb148a16361d21f421e4a3690ad4ea51905", "filename": "libstdc++-v3/src/iostream-inst.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fiostream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fiostream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fiostream-inst.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -35,8 +35,8 @@\n #include <iostream>\n #include <iomanip>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template class _Setfill<char>;\n   template _Setfill<char> setfill(char);\n   template class basic_iostream<char>;\n@@ -46,4 +46,5 @@ namespace std\n   template _Setfill<wchar_t> setfill(wchar_t);\n   template class basic_iostream<wchar_t>; \n #endif\n-}\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "d71314d3d9952a7963b30ec735751c97341b285f", "filename": "libstdc++-v3/src/istream-inst.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fistream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fistream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fistream-inst.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Explicit instantiation file.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -35,9 +35,8 @@\n #include <istream>\n #include <iomanip>\n \n-namespace std\n-{\n-  // istream\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template class basic_istream<char>;\n   template istream& ws(istream&);\n   template istream& operator>>(istream&, char&);\n@@ -67,4 +66,5 @@ namespace std\n   template wistream& operator>>(wistream&, _Setprecision);\n   template wistream& operator>>(wistream&, _Setw);\n #endif\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "688ad16583557931eda0db8a4ec25d968b3a9749", "filename": "libstdc++-v3/src/istream.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -33,8 +33,8 @@\n \n #include <istream>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template<>\n     basic_istream<char>&\n     basic_istream<char>::\n@@ -643,4 +643,5 @@ namespace std\n       return __in;\n     }\n #endif\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "235ecd61813289ff09cc41ecb2b5fc526774b0c0", "filename": "libstdc++-v3/src/limits.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Static data members of -*- C++ -*- numeric_limits classes\n \n-// Copyright (C) 1999, 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2001, 2002, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,8 +36,8 @@\n \n #include <limits>\n \n-namespace std \n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   const bool __numeric_limits_base::is_specialized;\n   const int  __numeric_limits_base::digits;\n   const int  __numeric_limits_base::digits10;\n@@ -446,4 +446,5 @@ namespace std\n   const bool numeric_limits<long double>::traps;\n   const bool numeric_limits<long double>::tinyness_before;\n   const float_round_style numeric_limits<long double>::round_style;\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "fe68ba1d7a4654a8340bfddd25347e6a98315400", "filename": "libstdc++-v3/src/list.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Flist.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Flist.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flist.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // std::list utilities implementation -*- C++ -*-\n \n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -55,8 +55,8 @@\n \n #include <list>\n \n-namespace _GLIBCXX_STD\n-{\n+_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n+\n   void\n   _List_node_base::swap(_List_node_base& __x, _List_node_base& __y)\n   {\n@@ -137,5 +137,5 @@ namespace _GLIBCXX_STD\n     __prev_node->_M_next = __next_node;\n     __next_node->_M_prev = __prev_node;\n   }\n-} // namespace std\n \n+_GLIBCXX_END_NESTED_NAMESPACE"}, {"sha": "fd2a8d4b8280a687a9c483ca812c496ab7331a82", "filename": "libstdc++-v3/src/locale-inst.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -39,8 +39,8 @@\n # define C char\n #endif\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // moneypunct, money_get, and money_put\n   template class moneypunct<C, false>;\n   template class moneypunct<C, true>;\n@@ -313,4 +313,5 @@ namespace std\n     __int_to_char(C*, unsigned long long, const C*, \n \t\t  ios_base::fmtflags, bool);\n #endif\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "32b759783528d1e5bc9250988e53e0d3947e8aee", "filename": "libstdc++-v3/src/locale-misc-inst.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Flocale-misc-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Flocale-misc-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-misc-inst.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,7 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2005\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,8 +34,8 @@\n \n #include <locale>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template\n     int\n     __convert_from_v(char*, const int, const char*, double, \n@@ -44,4 +45,5 @@ namespace std\n     int\n     __convert_from_v(char*, const int, const char*, long double, \n \t\t     const __c_locale&, int);\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "713d3993d2f7cb5ebaf0fef6d791dcf39f656746", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -41,8 +41,8 @@ namespace __gnu_internal\n   static __glibcxx_mutex_define_initialized(locale_cache_mutex);\n }\n \n-namespace std \n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // Definitions for static const data members of locale.\n   const locale::category \tlocale::none;\n   const locale::category \tlocale::ctype;\n@@ -401,6 +401,7 @@ namespace std\n       _M_index = 1 + __gnu_cxx::__exchange_and_add(&_S_refcount, 1);\n     return _M_index - 1;\n   }\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n \n "}, {"sha": "46de583d51375d4a67eeff9ace04e0efc67a4b54", "filename": "libstdc++-v3/src/locale_facets.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Flocale_facets.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Flocale_facets.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale_facets.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -28,8 +28,8 @@\n \n #include <locale>\n \n-namespace std \n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // Definitions for static const data members of time_base.\n   template<> \n     const char*\n@@ -89,5 +89,6 @@ namespace std\n       *__fptr++ = (__flags & ios_base::uppercase) ? 'G' : 'g';\n     *__fptr = '\\0';\n   }\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n "}, {"sha": "e7fe6207ebff8a21fe6ce1b2bcff3d1ff57603b2", "filename": "libstdc++-v3/src/locale_init.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Flocale_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Flocale_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale_init.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -93,8 +93,8 @@ namespace __gnu_internal\n   static __glibcxx_mutex_define_initialized(locale_mutex);\n } // namespace __gnu_internal\n \n-namespace std \n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   using namespace __gnu_internal;\n \n   locale::locale() throw() : _M_impl(0)\n@@ -344,4 +344,5 @@ namespace std\n     _M_caches[__timepunct<wchar_t>::id._M_id()] = __tpw;\n #endif\n   }\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "e1a111465c2a00eb26dffe033aeed7855b5f6e5e", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -30,8 +30,8 @@\n #include <cstring>\n #include <locale>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   using namespace __gnu_cxx;\n \n   locale::locale(const char* __s) : _M_impl(0)\n@@ -299,4 +299,5 @@ namespace std\n \t  }\n       }\n   }\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "8cc39e3747a37e39fe66f1088d6e978ae1cc7c0d", "filename": "libstdc++-v3/src/misc-inst.cc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -37,8 +37,8 @@\n #include <ostream>\n #include <ext/stdio_sync_filebuf.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // string related to iostreams\n   template \n     basic_istream<char>& \n@@ -66,14 +66,16 @@ namespace std\n     basic_istream<wchar_t>& \n     getline(basic_istream<wchar_t>&, wstring&);\n #endif\n-} // namespace std\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_END_NAMESPACE\n+\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   template class stdio_sync_filebuf<char>;\n #ifdef _GLIBCXX_USE_WCHAR_T\n   template class stdio_sync_filebuf<wchar_t>;\n #endif\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE\n \n "}, {"sha": "332cb173368fb832ce68fa1fc93f673209941783", "filename": "libstdc++-v3/src/mt_allocator.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -76,8 +76,8 @@ namespace __gnu_internal\n #endif\n }\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   void\n   __pool<false>::_M_destroy() throw()\n   {\n@@ -781,4 +781,5 @@ namespace __gnu_cxx\n   // Instantiations.\n   template class __mt_alloc<char>;\n   template class __mt_alloc<wchar_t>;\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "4568dca5cde3ea8b31429986a7049a134d036656", "filename": "libstdc++-v3/src/ostream-inst.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fostream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fostream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fostream-inst.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Explicit instantiation file.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -35,8 +35,8 @@\n #include <ostream>\n #include <iomanip>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // ostream\n   template class basic_ostream<char>;\n   template ostream& endl(ostream&);\n@@ -73,4 +73,5 @@ namespace std\n   template wostream& operator<<(wostream&, _Setprecision);\n   template wostream& operator<<(wostream&, _Setw);\n #endif\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "bdcf130f36b7376683f9b4f61e7702eb65c3e9ac", "filename": "libstdc++-v3/src/pool_allocator.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fpool_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fpool_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fpool_allocator.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -40,8 +40,8 @@ namespace __gnu_internal\n   static __glibcxx_mutex_define_initialized(palloc_init_mutex);\n }\n \n-namespace __gnu_cxx\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n   // Definitions for __pool_alloc_base.\n   __pool_alloc_base::_Obj* volatile*\n   __pool_alloc_base::_M_get_free_list(size_t __bytes)\n@@ -170,4 +170,5 @@ namespace __gnu_cxx\n   // Instantiations.\n   template class __pool_alloc<char>;\n   template class __pool_alloc<wchar_t>;\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "a6f41baccbcb806a124a6bd76ae8bbd279ececf4", "filename": "libstdc++-v3/src/sstream-inst.cc", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fsstream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fsstream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fsstream-inst.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Explicit instantiation file.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -34,29 +34,18 @@\n \n #include <sstream>\n \n-namespace std\n-{\n-  // stringbuf\n-  template class basic_stringbuf<char>;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n-  template class basic_stringbuf<wchar_t>;\n-#endif\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  // istringstream\n+  template class basic_stringbuf<char>;\n   template class basic_istringstream<char>;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n-  template class basic_istringstream<wchar_t>; \n-#endif\n-\n-  // ostringstream\n   template class basic_ostringstream<char>;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n-  template class basic_ostringstream<wchar_t>; \n-#endif\n-\n-  // stringstream\n   template class basic_stringstream<char>;\n+\n #ifdef _GLIBCXX_USE_WCHAR_T\n+  template class basic_stringbuf<wchar_t>;\n+  template class basic_istringstream<wchar_t>; \n+  template class basic_ostringstream<wchar_t>; \n   template class basic_stringstream<wchar_t>; \n #endif\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "19ac5779eb5289041fd4e5dd71de9456805a17e2", "filename": "libstdc++-v3/src/stdexcept.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fstdexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fstdexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstdexcept.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Methods for Exception Support for -*- C++ -*-\n \n-// Copyright (C) 1997, 1999, 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1999, 2001, 2002, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,8 +34,8 @@\n #include <string>\n #include <stdexcept>\n \n-namespace std \n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   logic_error::logic_error(const string& __arg) \n   : exception(), _M_msg(__arg) { }\n \n@@ -74,5 +74,6 @@ namespace std\n \n   underflow_error::underflow_error(const string& __arg)\n   : runtime_error(__arg) { }\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE\n "}, {"sha": "d08bc0d2db1f74255dbedbc06600129fc299de4d", "filename": "libstdc++-v3/src/streambuf-inst.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fstreambuf-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fstreambuf-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstreambuf-inst.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Explicit instantiation file.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -35,22 +35,22 @@\n #include <ios>\n #include <streambuf>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // streambuf\n   template class basic_streambuf<char>;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n-  template class basic_streambuf<wchar_t>;\n-#endif\n \n   template\n     streamsize\n-    __copy_streambufs(basic_streambuf<char>*,\n-\t\t      basic_streambuf<char>*); \n+    __copy_streambufs(basic_streambuf<char>*, basic_streambuf<char>*); \n+\n #ifdef _GLIBCXX_USE_WCHAR_T\n+  // wstreambuf\n+  template class basic_streambuf<wchar_t>;\n+\n   template\n     streamsize\n-    __copy_streambufs(basic_streambuf<wchar_t>*,\n-\t\t      basic_streambuf<wchar_t>*); \n+    __copy_streambufs(basic_streambuf<wchar_t>*, basic_streambuf<wchar_t>*); \n #endif\n-} //std\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "75f61cca4c90b9c4bcb06e7520b134e09b274063", "filename": "libstdc++-v3/src/streambuf.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fstreambuf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fstreambuf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstreambuf.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -33,8 +33,8 @@\n \n #include <streambuf>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template<>\n     streamsize\n     __copy_streambufs(basic_streambuf<char>* __sbin,\n@@ -100,4 +100,5 @@ namespace std\n       return __ret;\n     }\n #endif\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "4c447e4434a691f4939e45394752dfca41b4b1d5", "filename": "libstdc++-v3/src/string-inst.cc", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -42,8 +42,8 @@\n # define C char\n #endif\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   typedef basic_string<C> S;\n \n   template class basic_string<C>;\n@@ -81,11 +81,12 @@ namespace std\n   template\n     const C*\n     search(const C*, const C*, const C*, const C*, bool(*)(const C&, const C&));\n-} // namespace std\n+_GLIBCXX_END_NAMESPACE\n+\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n-namespace __gnu_cxx\n-{\n   using std::S;\n   template bool operator==(const S::iterator&, const S::iterator&);\n   template bool operator==(const S::const_iterator&, const S::const_iterator&);\n-} // namespace __gnu_cxx\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "5bbb33a441e41c5e57327efea0a815ba7013ce58", "filename": "libstdc++-v3/src/strstream.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fstrstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fstrstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstrstream.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // strstream definitions -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+// Copyright (C) 2001, 2002, 2003, 2005 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -53,8 +53,8 @@\n #include <string.h>\n #include <limits.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   strstreambuf::strstreambuf(streamsize initial_capacity)\n   : _Base(), _M_alloc_fun(0), _M_free_fun(0), _M_dynamic(true), \n     _M_frozen(false), _M_constant(false)\n@@ -413,4 +413,5 @@ namespace std\n   char* \n   strstream::str()\n   { return _M_buf.str(); }\n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "38a30373364fa6732ed75a55315b9b2eaf0d5a4e", "filename": "libstdc++-v3/src/tree.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ftree.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // RB tree utilities implementation -*- C++ -*-\n \n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -57,8 +57,8 @@\n \n #include <bits/stl_tree.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   _Rb_tree_node_base*\n   _Rb_tree_increment(_Rb_tree_node_base* __x)\n   {\n@@ -428,4 +428,5 @@ namespace std\n     while (1);\n     return __sum;\n   }\n-} // namespace std \n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "c13e1a2454bd97ced2a9dd53b27931c76572f156", "filename": "libstdc++-v3/src/valarray-inst.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fvalarray-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Fsrc%2Fvalarray-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fvalarray-inst.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -1,6 +1,6 @@\n // Explicit instantiation file.\n \n-// Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,8 +33,8 @@\n \n #include <valarray>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // Some explicit instantiations.\n   template void\n      __valarray_fill(size_t* __restrict__, size_t, const size_t&);\n@@ -112,4 +112,5 @@ namespace std\n   : _M_count(1), _M_start(__o), _M_size(__l), _M_stride(__s),\n     _M_index(__l.size() == 0 ? 0 : __valarray_product(__l))\n   { __gslice_to_index(__o, __l, __s, _M_index); }  \n-} // namespace std\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "cab11c973dc17e6b15b2852a3526c7a554303456", "filename": "libstdc++-v3/testsuite/20_util/memory/auto_ptr/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmemory%2Fauto_ptr%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmemory%2Fauto_ptr%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmemory%2Fauto_ptr%2Fassign_neg.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -47,4 +47,4 @@ main()\n   return 0;\n }\n // { dg-error \"candidates\" \"\" { target *-*-* } 223 } \n-// { dg-error \"std::auto_ptr\" \"\" { target *-*-* } 353 } \n+// { dg-error \"::auto_ptr\" \"\" { target *-*-* } 353 } "}, {"sha": "8c6c687554ce362e621126c72fea9f5785fcdd6a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2F2.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -32,5 +32,5 @@\n // { dg-do compile }\n \n // libstdc++/21770\n-template class __gnu_debug::basic_string<int, std::char_traits<int>,\n-\t\t\t\t\t std::allocator<char> >;\n+template class debug::basic_string<int, std::char_traits<int>, \n+\t\t\t\t   std::allocator<char> >;"}, {"sha": "af24d0417305adfa15df2d302f5d825d080aee37", "filename": "libstdc++-v3/testsuite/23_containers/bitset/cons/16020.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcons%2F16020.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcons%2F16020.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcons%2F16020.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -22,7 +22,7 @@\n // libstdc++/16020\n void test01()\n {\n-  using __gnu_debug::bitset;\n+  using debug::bitset;\n   bool test __attribute__((unused)) = true;\n \n   bitset<5> b(7);"}, {"sha": "0be47f25dd7c4c117f7b1455493325ef6c4d9775", "filename": "libstdc++-v3/testsuite/23_containers/bitset/invalidation/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Finvalidation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Finvalidation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Finvalidation%2F1.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -21,7 +21,7 @@\n #include <debug/bitset>\n #include <testsuite_hooks.h>\n \n-using __gnu_debug::bitset;\n+using debug::bitset;\n \n bool test = true;\n "}, {"sha": "7bb6688739296bc404e1b234e88840aee1709571", "filename": "libstdc++-v3/testsuite/23_containers/bitset/operations/13838.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Foperations%2F13838.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Foperations%2F13838.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Foperations%2F13838.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -22,7 +22,7 @@\n // libstdc++/13838\n void test01()\n {\n-  using __gnu_debug::bitset;\n+  using debug::bitset;\n   bool test __attribute__((unused)) = true;\n \n   bitset<4>  b0, b1;"}, {"sha": "83f69dddcf6200cc046e5ed1693ce241b2ff402d", "filename": "libstdc++-v3/testsuite/23_containers/deque/invalidation/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Finvalidation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Finvalidation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Finvalidation%2F1.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -21,7 +21,7 @@\n #include <debug/deque>\n #include <testsuite_hooks.h>\n \n-using __gnu_debug::deque;\n+using debug::deque;\n \n bool test = true;\n "}, {"sha": "2e179f57ea1d2fe9ba096a3280f572c1c70c7521", "filename": "libstdc++-v3/testsuite/23_containers/deque/invalidation/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Finvalidation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Finvalidation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Finvalidation%2F2.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -21,7 +21,7 @@\n #include <debug/deque>\n #include <testsuite_hooks.h>\n \n-using __gnu_debug::deque;\n+using debug::deque;\n \n bool test = true;\n "}, {"sha": "f7abfcf01b2f3ca8ca215afa161c1b1870ee03ae", "filename": "libstdc++-v3/testsuite/23_containers/deque/invalidation/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Finvalidation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Finvalidation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Finvalidation%2F3.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -21,7 +21,7 @@\n #include <debug/deque>\n #include <testsuite_hooks.h>\n \n-using __gnu_debug::deque;\n+using debug::deque;\n \n bool test = true;\n "}, {"sha": "1ee306188fb23328e246ca861b0b52f1f7557e6e", "filename": "libstdc++-v3/testsuite/23_containers/deque/invalidation/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Finvalidation%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Finvalidation%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Finvalidation%2F4.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -21,7 +21,7 @@\n #include <debug/deque>\n #include <testsuite_hooks.h>\n \n-using __gnu_debug::deque;\n+using debug::deque;\n \n bool test = true;\n "}, {"sha": "3ae8525c26ad25400db210a8b80a30da7b26c2de", "filename": "libstdc++-v3/testsuite/23_containers/list/invalidation/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finvalidation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finvalidation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finvalidation%2F1.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -22,7 +22,7 @@\n #include <iterator>\n #include <testsuite_hooks.h>\n \n-using __gnu_debug::list;\n+using debug::list;\n using std::advance;\n \n bool test = true;"}, {"sha": "9889c511a610de16d366cc9868df98ebb6bb32e3", "filename": "libstdc++-v3/testsuite/23_containers/list/invalidation/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finvalidation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finvalidation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finvalidation%2F2.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -22,7 +22,7 @@\n #include <iterator>\n #include <testsuite_hooks.h>\n \n-using __gnu_debug::list;\n+using debug::list;\n using std::advance;\n \n bool test = true;"}, {"sha": "a224123a83efc71730eb2132913f2b2b3d18e84b", "filename": "libstdc++-v3/testsuite/23_containers/list/invalidation/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finvalidation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finvalidation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finvalidation%2F3.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -22,7 +22,7 @@\n #include <iterator>\n #include <testsuite_hooks.h>\n \n-using __gnu_debug::list;\n+using debug::list;\n using std::advance;\n \n bool test = true;"}, {"sha": "2da08675a26a2a3c51e078d00b89cb73d6e7165f", "filename": "libstdc++-v3/testsuite/23_containers/list/invalidation/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finvalidation%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finvalidation%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Finvalidation%2F4.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -22,7 +22,7 @@\n #include <iterator>\n #include <testsuite_hooks.h>\n \n-using __gnu_debug::list;\n+using debug::list;\n using std::advance;\n \n bool test = true;"}, {"sha": "1132aad7748828ab669cffcf9c619ceca2260c7b", "filename": "libstdc++-v3/testsuite/23_containers/map/insert/16813.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Finsert%2F16813.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Finsert%2F16813.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Finsert%2F16813.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -22,7 +22,7 @@\n // libstdc++/16813\n void test01()\n {\n-  using __gnu_debug::map;\n+  using debug::map;\n   bool test __attribute__((unused)) = true;\n \n   map<int, float> m1, m2;"}, {"sha": "b3665e6e11684bf61f9038f983599bb248335ae6", "filename": "libstdc++-v3/testsuite/23_containers/map/invalidation/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Finvalidation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Finvalidation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Finvalidation%2F1.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -22,7 +22,7 @@\n #include <iterator>\n #include <testsuite_hooks.h>\n \n-using __gnu_debug::map;\n+using debug::map;\n using std::advance;\n \n bool test = true;"}, {"sha": "9b596e4c64d3f7f20a0b6346a6e292708adcf7fe", "filename": "libstdc++-v3/testsuite/23_containers/map/invalidation/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Finvalidation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Finvalidation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Finvalidation%2F2.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -22,7 +22,7 @@\n #include <iterator>\n #include <testsuite_hooks.h>\n \n-using __gnu_debug::map;\n+using debug::map;\n using std::advance;\n \n bool test = true;"}, {"sha": "c2ae547a2fbb35b305e30691ad92122799c82804", "filename": "libstdc++-v3/testsuite/23_containers/multimap/invalidation/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Finvalidation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Finvalidation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Finvalidation%2F1.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -23,7 +23,7 @@\n #include <testsuite_hooks.h>\n #include <utility>\n \n-using __gnu_debug::multimap;\n+using debug::multimap;\n using std::advance;\n \n bool test = true;"}, {"sha": "23ad5b31839da757d15e4178a6ed760186ddde10", "filename": "libstdc++-v3/testsuite/23_containers/multimap/invalidation/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Finvalidation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbc7af037de005ee1c45a07643e153375343cb4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Finvalidation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Finvalidation%2F2.cc?ref=3cbc7af037de005ee1c45a07643e153375343cb4", "patch": "@@ -23,7 +23,7 @@\n #include <testsuite_hooks.h>\n #include <utility>\n \n-using __gnu_debug::multimap;\n+using debug::multimap;\n using std::advance;\n \n bool test = true;"}]}