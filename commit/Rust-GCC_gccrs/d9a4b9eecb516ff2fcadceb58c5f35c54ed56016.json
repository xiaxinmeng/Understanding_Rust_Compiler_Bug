{"sha": "d9a4b9eecb516ff2fcadceb58c5f35c54ed56016", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlhNGI5ZWVjYjUxNmZmMmZjYWRjZWI1OGM1ZjM1YzU0ZWQ1NjAxNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-04-19T22:58:23Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-04-19T22:58:23Z"}, "message": "re PR libstdc++/26424 (tr1/unordered vs 64-bit machines)\n\n2006-04-19  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/26424\n\t* include/tr1/hashtable (X<>::primes): Extend for 64-bit machines.\n\t(X<>::n_primes): Adjust.\n\t(prime_rehash_policy::next_bkt, bkt_for_elements, need_rehash): Adjust.\n\nFrom-SVN: r113100", "tree": {"sha": "d14824534cf4e7e014b8fd2d14610aa558fff249", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d14824534cf4e7e014b8fd2d14610aa558fff249"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9a4b9eecb516ff2fcadceb58c5f35c54ed56016", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9a4b9eecb516ff2fcadceb58c5f35c54ed56016", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9a4b9eecb516ff2fcadceb58c5f35c54ed56016", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9a4b9eecb516ff2fcadceb58c5f35c54ed56016/comments", "author": null, "committer": null, "parents": [{"sha": "94d285a53ceab450cbc35e0673c36cd7fc6dd2ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94d285a53ceab450cbc35e0673c36cd7fc6dd2ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94d285a53ceab450cbc35e0673c36cd7fc6dd2ea"}], "stats": {"total": 66, "additions": 52, "deletions": 14}, "files": [{"sha": "08e6c3be93ecf53b32831bf7481609326abd0bdb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a4b9eecb516ff2fcadceb58c5f35c54ed56016/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a4b9eecb516ff2fcadceb58c5f35c54ed56016/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d9a4b9eecb516ff2fcadceb58c5f35c54ed56016", "patch": "@@ -1,3 +1,10 @@\n+2006-04-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/26424\n+\t* include/tr1/hashtable (X<>::primes): Extend for 64-bit machines.\n+\t(X<>::n_primes): Adjust.\n+\t(prime_rehash_policy::next_bkt, bkt_for_elements, need_rehash): Adjust.\n+\n 2006-04-18  Paolo Carlini  <pcarlini@suse.de>\n \n \t* docs/html/faq/index.html ([5.5]): Adjust to mention function"}, {"sha": "3b8bcef8f7dd5e1a661308fa5d593ef100ffae89", "filename": "libstdc++-v3/include/tr1/hashtable", "status": "modified", "additions": 45, "deletions": 14, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a4b9eecb516ff2fcadceb58c5f35c54ed56016/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a4b9eecb516ff2fcadceb58c5f35c54ed56016/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable?ref=d9a4b9eecb516ff2fcadceb58c5f35c54ed56016", "patch": "@@ -470,18 +470,18 @@ namespace Internal\n       { return x < y; }\n   };\n \n-  template<int dummy>\n+  template<int ulongsize = sizeof(unsigned long)>\n     struct X\n     {\n-      static const int n_primes = 256;\n-      static const unsigned long primes[n_primes + 1];\n+      static const int n_primes = ulongsize != 8 ? 256 : 256 + 48;\n+      static const unsigned long primes[256 + 48 + 1];\n     };\n \n-  template<int dummy>\n-    const int X<dummy>::n_primes;\n+  template<int ulongsize>\n+    const int X<ulongsize>::n_primes;\n \n-  template<int dummy>\n-    const unsigned long X<dummy>::primes[n_primes + 1] =\n+  template<int ulongsize>\n+    const unsigned long X<ulongsize>::primes[256 + 48 + 1] =\n     {\n       2ul, 3ul, 5ul, 7ul, 11ul, 13ul, 17ul, 19ul, 23ul, 29ul, 31ul,\n       37ul, 41ul, 43ul, 47ul, 53ul, 59ul, 61ul, 67ul, 71ul, 73ul, 79ul,\n@@ -524,7 +524,38 @@ namespace Internal\n       2364114217ul, 2557710269ul, 2767159799ul, 2993761039ul,\n       3238918481ul, 3504151727ul, 3791104843ul, 4101556399ul,\n       4294967291ul,\n-      4294967291ul // sentinel so we don't have to test result of lower_bound\n+      // Sentinel, so we don't have to test the result of lower_bound,\n+      // or, on 64-bit machines, rest of the table.\n+      ulongsize != 8 ? 4294967291ul : (unsigned long)6442450933ull,\n+      (unsigned long)8589934583ull,\n+      (unsigned long)12884901857ull, (unsigned long)17179869143ull,\n+      (unsigned long)25769803693ull, (unsigned long)34359738337ull,\n+      (unsigned long)51539607367ull, (unsigned long)68719476731ull,\n+      (unsigned long)103079215087ull, (unsigned long)137438953447ull,\n+      (unsigned long)206158430123ull, (unsigned long)274877906899ull,\n+      (unsigned long)412316860387ull, (unsigned long)549755813881ull,\n+      (unsigned long)824633720731ull, (unsigned long)1099511627689ull,\n+      (unsigned long)1649267441579ull, (unsigned long)2199023255531ull,\n+      (unsigned long)3298534883309ull, (unsigned long)4398046511093ull,\n+      (unsigned long)6597069766607ull, (unsigned long)8796093022151ull,\n+      (unsigned long)13194139533241ull, (unsigned long)17592186044399ull,\n+      (unsigned long)26388279066581ull, (unsigned long)35184372088777ull,\n+      (unsigned long)52776558133177ull, (unsigned long)70368744177643ull,\n+      (unsigned long)105553116266399ull, (unsigned long)140737488355213ull,\n+      (unsigned long)211106232532861ull, (unsigned long)281474976710597ull,\n+      (unsigned long)562949953421231ull, (unsigned long)1125899906842597ull,\n+      (unsigned long)2251799813685119ull, (unsigned long)4503599627370449ull,\n+      (unsigned long)9007199254740881ull, (unsigned long)18014398509481951ull,\n+      (unsigned long)36028797018963913ull, (unsigned long)72057594037927931ull,\n+      (unsigned long)144115188075855859ull,\n+      (unsigned long)288230376151711717ull,\n+      (unsigned long)576460752303423433ull,\n+      (unsigned long)1152921504606846883ull,\n+      (unsigned long)2305843009213693951ull,\n+      (unsigned long)4611686018427387847ull,\n+      (unsigned long)9223372036854775783ull,\n+      (unsigned long)18446744073709551557ull,\n+      (unsigned long)18446744073709551557ull\n     };\n \n   inline\n@@ -543,8 +574,8 @@ namespace Internal\n   prime_rehash_policy::\n   next_bkt(std::size_t n) const\n   {\n-    const unsigned long* const last = X<0>::primes + X<0>::n_primes;\n-    const unsigned long* p = std::lower_bound(X<0>::primes, last, n);\n+    const unsigned long* const last = X<>::primes + X<>::n_primes;\n+    const unsigned long* p = std::lower_bound(X<>::primes, last, n);\n     m_next_resize = static_cast<std::size_t>(std::ceil(*p * m_max_load_factor));\n     return *p;\n   }\n@@ -555,9 +586,9 @@ namespace Internal\n   prime_rehash_policy::\n   bkt_for_elements(std::size_t n) const\n   {\n-    const unsigned long* const last = X<0>::primes + X<0>::n_primes;\n+    const unsigned long* const last = X<>::primes + X<>::n_primes;\n     const float min_bkts = n / m_max_load_factor;\n-    const unsigned long* p = std::lower_bound(X<0>::primes, last,\n+    const unsigned long* p = std::lower_bound(X<>::primes, last,\n \t\t\t\t\t      min_bkts, lt());\n     m_next_resize = static_cast<std::size_t>(std::ceil(*p * m_max_load_factor));\n     return *p;\n@@ -582,8 +613,8 @@ namespace Internal\n \tif (min_bkts > n_bkt)\n \t  {\n \t    min_bkts = std::max(min_bkts, m_growth_factor * n_bkt);\n-\t    const unsigned long* const last = X<0>::primes + X<0>::n_primes;\n-\t    const unsigned long* p = std::lower_bound(X<0>::primes, last,\n+\t    const unsigned long* const last = X<>::primes + X<>::n_primes;\n+\t    const unsigned long* p = std::lower_bound(X<>::primes, last,\n \t\t\t\t\t\t      min_bkts, lt());\n \t    m_next_resize = \n \t      static_cast<std::size_t>(std::ceil(*p * m_max_load_factor));"}]}