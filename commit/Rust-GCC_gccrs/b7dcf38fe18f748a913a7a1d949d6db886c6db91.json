{"sha": "b7dcf38fe18f748a913a7a1d949d6db886c6db91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdkY2YzOGZlMThmNzQ4YTkxM2E3YTFkOTQ5ZDZkYjg4NmM2ZGI5MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-09-30T17:54:46Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-09-30T17:54:46Z"}, "message": "reorg.c (relax_delay_slots): Use delay_insn consistently.\n\n\t* reorg.c (relax_delay_slots): Use delay_insn consistently.\n\n\t* config/sparc/sparc.c (gen_stack_pointer_dec): Delete.\n\t(sparc_expand_epilogue): Use gen_stack_pointer_inc and adjust.\n\t(sparc_flat_expand_epilogue): Likewise.\n\t(emit_and_preserve): Likewise.\n\t(sparc_fold_builtin): Fix thinko in latest change.\n\nFrom-SVN: r191875", "tree": {"sha": "3cb6630bc09d281809c956f1235f8c7903a0a1fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cb6630bc09d281809c956f1235f8c7903a0a1fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7dcf38fe18f748a913a7a1d949d6db886c6db91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7dcf38fe18f748a913a7a1d949d6db886c6db91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7dcf38fe18f748a913a7a1d949d6db886c6db91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7dcf38fe18f748a913a7a1d949d6db886c6db91/comments", "author": null, "committer": null, "parents": [{"sha": "ae33c153e6018726a43e3e87ae7d85300aabc4ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae33c153e6018726a43e3e87ae7d85300aabc4ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae33c153e6018726a43e3e87ae7d85300aabc4ff"}], "stats": {"total": 60, "additions": 28, "deletions": 32}, "files": [{"sha": "050756d9fd62487a8b47cc80bbc8ec7d9907f3a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7dcf38fe18f748a913a7a1d949d6db886c6db91/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7dcf38fe18f748a913a7a1d949d6db886c6db91/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b7dcf38fe18f748a913a7a1d949d6db886c6db91", "patch": "@@ -1,3 +1,13 @@\n+2012-09-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* reorg.c (relax_delay_slots): Use delay_insn consistently.\n+\n+\t* config/sparc/sparc.c (gen_stack_pointer_dec): Delete.\n+\t(sparc_expand_epilogue): Use gen_stack_pointer_inc and adjust.\n+\t(sparc_flat_expand_epilogue): Likewise.\n+\t(emit_and_preserve): Likewise.\n+\t(sparc_fold_builtin): Fix thinko in latest change.\n+\n 2012-09-30  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* config/m68k/m68k.md: Add names to bitfield insert and extract"}, {"sha": "8849c03a90a1598b575fbdb5cba89fd4b938c962", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 14, "deletions": 26, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7dcf38fe18f748a913a7a1d949d6db886c6db91/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7dcf38fe18f748a913a7a1d949d6db886c6db91/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=b7dcf38fe18f748a913a7a1d949d6db886c6db91", "patch": "@@ -4976,18 +4976,6 @@ gen_stack_pointer_inc (rtx increment)\n \t\t\t\t    increment));\n }\n \n-/* Generate a decrement for the stack pointer.  */\n-\n-static rtx\n-gen_stack_pointer_dec (rtx decrement)\n-{\n-  return gen_rtx_SET (VOIDmode,\n-\t\t      stack_pointer_rtx,\n-\t\t      gen_rtx_MINUS (Pmode,\n-\t\t\t\t     stack_pointer_rtx,\n-\t\t\t\t     decrement));\n-}\n-\n /* Expand the function prologue.  The prologue is responsible for reserving\n    storage for the frame, saving the call-saved registers and loading the\n    GOT register if needed.  */\n@@ -5258,17 +5246,17 @@ sparc_expand_epilogue (bool for_eh)\n   else if (sparc_leaf_function_p)\n     {\n       if (size <= 4096)\n-\temit_insn (gen_stack_pointer_dec (GEN_INT (-size)));\n+\temit_insn (gen_stack_pointer_inc (GEN_INT (size)));\n       else if (size <= 8192)\n \t{\n-\t  emit_insn (gen_stack_pointer_dec (GEN_INT (-4096)));\n-\t  emit_insn (gen_stack_pointer_dec (GEN_INT (4096 - size)));\n+\t  emit_insn (gen_stack_pointer_inc (GEN_INT (4096)));\n+\t  emit_insn (gen_stack_pointer_inc (GEN_INT (size - 4096)));\n \t}\n       else\n \t{\n \t  rtx reg = gen_rtx_REG (Pmode, 1);\n-\t  emit_move_insn (reg, GEN_INT (-size));\n-\t  emit_insn (gen_stack_pointer_dec (reg));\n+\t  emit_move_insn (reg, GEN_INT (size));\n+\t  emit_insn (gen_stack_pointer_inc (reg));\n \t}\n     }\n }\n@@ -5318,17 +5306,17 @@ sparc_flat_expand_epilogue (bool for_eh)\n       emit_insn (gen_blockage ());\n \n       if (size <= 4096)\n-\temit_insn (gen_stack_pointer_dec (GEN_INT (-size)));\n+\temit_insn (gen_stack_pointer_inc (GEN_INT (size)));\n       else if (size <= 8192)\n \t{\n-\t  emit_insn (gen_stack_pointer_dec (GEN_INT (-4096)));\n-\t  emit_insn (gen_stack_pointer_dec (GEN_INT (4096 - size)));\n+\t  emit_insn (gen_stack_pointer_inc (GEN_INT (4096)));\n+\t  emit_insn (gen_stack_pointer_inc (GEN_INT (size - 4096)));\n \t}\n       else\n \t{\n \t  rtx reg = gen_rtx_REG (Pmode, 1);\n-\t  emit_move_insn (reg, GEN_INT (-size));\n-\t  emit_insn (gen_stack_pointer_dec (reg));\n+\t  emit_move_insn (reg, GEN_INT (size));\n+\t  emit_insn (gen_stack_pointer_inc (reg));\n \t}\n     }\n }\n@@ -10131,7 +10119,7 @@ sparc_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED,\n \t  && TREE_CODE (arg2) == INTEGER_CST)\n \t{\n \t  bool overflow = false;\n-\t  double_int di_arg2 = TREE_INT_CST (arg2);\n+\t  double_int result = TREE_INT_CST (arg2);\n \t  double_int tmp;\n \t  unsigned i;\n \n@@ -10147,13 +10135,13 @@ sparc_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED,\n \t      if (tmp.is_negative ())\n \t\ttmp = tmp.neg_with_overflow (&neg2_ovf);\n \n-\t      tmp = di_arg2.add_with_sign (tmp, false, &add2_ovf);\n+\t      result = result.add_with_sign (tmp, false, &add2_ovf);\n \t      overflow |= neg1_ovf | neg2_ovf | add1_ovf | add2_ovf;\n \t    }\n \n \t  gcc_assert (!overflow);\n \n-\t  return build_int_cst_wide (rtype, tmp.low, tmp.high);\n+\t  return build_int_cst_wide (rtype, result.low, result.high);\n \t}\n \n     default:\n@@ -10454,7 +10442,7 @@ emit_and_preserve (rtx seq, rtx reg, rtx reg2)\n     = gen_rtx_MEM (word_mode, plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t     SPARC_STACK_BIAS + offset));\n \n-  emit_insn (gen_stack_pointer_dec (GEN_INT (size)));\n+  emit_insn (gen_stack_pointer_inc (GEN_INT (-size)));\n   emit_insn (gen_rtx_SET (VOIDmode, slot, reg));\n   if (reg2)\n     emit_insn (gen_rtx_SET (VOIDmode,"}, {"sha": "dd50d211532d5fafa969d76302ab1d1231303ba6", "filename": "gcc/reorg.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7dcf38fe18f748a913a7a1d949d6db886c6db91/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7dcf38fe18f748a913a7a1d949d6db886c6db91/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=b7dcf38fe18f748a913a7a1d949d6db886c6db91", "patch": "@@ -3432,9 +3432,8 @@ relax_delay_slots (rtx first)\n \t    reorg_redirect_jump (insn, other_target);\n \t}\n \n-      /* Now look only at cases where we have filled a delay slot.  */\n-      if (!NONJUMP_INSN_P (insn)\n-\t  || GET_CODE (PATTERN (insn)) != SEQUENCE)\n+      /* Now look only at cases where we have a filled delay slot.  */\n+      if (!NONJUMP_INSN_P (insn) || GET_CODE (PATTERN (insn)) != SEQUENCE)\n \tcontinue;\n \n       pat = PATTERN (insn);\n@@ -3494,9 +3493,8 @@ relax_delay_slots (rtx first)\n \t}\n \n       /* Now look only at the cases where we have a filled JUMP_INSN.  */\n-      if (!JUMP_P (XVECEXP (PATTERN (insn), 0, 0))\n-\t  || ! (condjump_p (XVECEXP (PATTERN (insn), 0, 0))\n-\t\t|| condjump_in_parallel_p (XVECEXP (PATTERN (insn), 0, 0))))\n+      if (!JUMP_P (delay_insn)\n+\t  || !(condjump_p (delay_insn) || condjump_in_parallel_p (delay_insn)))\n \tcontinue;\n \n       target_label = JUMP_LABEL (delay_insn);"}]}