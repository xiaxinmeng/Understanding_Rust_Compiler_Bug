{"sha": "23cb6618889371ea86f52cbdcda23765d4bda91f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNjYjY2MTg4ODkzNzFlYTg2ZjUyY2JkY2RhMjM3NjVkNGJkYTkxZg==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2015-05-01T12:52:34Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-05-01T12:52:34Z"}, "message": "[AArch64] Fix aarch64_rtx_costs of PLUS/MINUS\n\nOn behalf of Wilco Dijkstra\n\n2015-05-01  Wilco Dijkstra  <wdijkstr@arm.com>\n\n\t* gcc/config/aarch64/aarch64.c (aarch64_rtx_costs):\n\tCalculate cost of op0 and op1 in PLUS and MINUS cases.\n\nFrom-SVN: r222676", "tree": {"sha": "5884f87f94002db8d8efef29dd19f9a32315acde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5884f87f94002db8d8efef29dd19f9a32315acde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23cb6618889371ea86f52cbdcda23765d4bda91f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23cb6618889371ea86f52cbdcda23765d4bda91f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23cb6618889371ea86f52cbdcda23765d4bda91f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23cb6618889371ea86f52cbdcda23765d4bda91f/comments", "author": null, "committer": null, "parents": [{"sha": "1d15ed75abb8a7f54cd33f554c977856b025222d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d15ed75abb8a7f54cd33f554c977856b025222d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d15ed75abb8a7f54cd33f554c977856b025222d"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "fd85f21353a5861c852af2364fce37f72aa5042f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cb6618889371ea86f52cbdcda23765d4bda91f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cb6618889371ea86f52cbdcda23765d4bda91f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23cb6618889371ea86f52cbdcda23765d4bda91f", "patch": "@@ -1,3 +1,8 @@\n+2015-05-01  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* gcc/config/aarch64/aarch64.c (aarch64_rtx_costs):\n+\tCalculate cost of op0 and op1 in PLUS and MINUS cases.\n+\n 2015-05-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_rtx_costs, COMPARE case):"}, {"sha": "eed37dbd91f4c75f741bb7b9276dc5193f02d256", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cb6618889371ea86f52cbdcda23765d4bda91f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cb6618889371ea86f52cbdcda23765d4bda91f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=23cb6618889371ea86f52cbdcda23765d4bda91f", "patch": "@@ -5880,20 +5880,19 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n \top1 = XEXP (x, 1);\n \n cost_minus:\n+\t*cost += rtx_cost (op0, MINUS, 0, speed);\n+\n \t/* Detect valid immediates.  */\n \tif ((GET_MODE_CLASS (mode) == MODE_INT\n \t     || (GET_MODE_CLASS (mode) == MODE_CC\n \t\t && GET_MODE_CLASS (GET_MODE (op0)) == MODE_INT))\n \t    && CONST_INT_P (op1)\n \t    && aarch64_uimm12_shift (INTVAL (op1)))\n \t  {\n-\t    *cost += rtx_cost (op0, MINUS, 0, speed);\n-\n \t    if (speed)\n \t      /* SUB(S) (immediate).  */\n \t      *cost += extra_cost->alu.arith;\n \t    return true;\n-\n \t  }\n \n \t/* Look for SUB (extended register).  */\n@@ -5918,7 +5917,6 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n \t    *cost += aarch64_rtx_mult_cost (new_op1, MULT,\n \t\t\t\t\t    (enum rtx_code) code,\n \t\t\t\t\t    speed);\n-\t    *cost += rtx_cost (op0, MINUS, 0, speed);\n \t    return true;\n \t  }\n \n@@ -5965,6 +5963,8 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n \t    return true;\n \t  }\n \n+\t*cost += rtx_cost (op1, PLUS, 1, speed);\n+\n \t/* Look for ADD (extended register).  */\n         if (aarch64_rtx_arith_op_extract_p (op0, mode))\n \t  {\n@@ -5986,12 +5986,10 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n \t  {\n \t    *cost += aarch64_rtx_mult_cost (new_op0, MULT, PLUS,\n \t\t\t\t\t    speed);\n-\t    *cost += rtx_cost (op1, PLUS, 1, speed);\n \t    return true;\n \t  }\n \n-\t*cost += (rtx_cost (new_op0, PLUS, 0, speed)\n-\t\t  + rtx_cost (op1, PLUS, 1, speed));\n+\t*cost += rtx_cost (new_op0, PLUS, 0, speed);\n \n \tif (speed)\n \t  {"}]}