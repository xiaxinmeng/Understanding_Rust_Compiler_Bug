{"sha": "324612b351f925889304177e6e370463c506a595", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI0NjEyYjM1MWY5MjU4ODkzMDQxNzdlNmUzNzA0NjNjNTA2YTU5NQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-04-27T16:38:11Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-04-27T16:38:11Z"}, "message": "re PR go/52358 (math FAILs on Solaris 8 and 9)\n\n\tPR go/52358\nconfigure, runtime: Provide i386 long double math functions if needed.\n\nFrom-SVN: r186915", "tree": {"sha": "26d61005e47dff95eea087e52ca9229168459419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26d61005e47dff95eea087e52ca9229168459419"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/324612b351f925889304177e6e370463c506a595", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/324612b351f925889304177e6e370463c506a595", "html_url": "https://github.com/Rust-GCC/gccrs/commit/324612b351f925889304177e6e370463c506a595", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/324612b351f925889304177e6e370463c506a595/comments", "author": null, "committer": null, "parents": [{"sha": "6c88c77ec7b29cc5ab216e867bd1967e6c9aa8e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c88c77ec7b29cc5ab216e867bd1967e6c9aa8e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c88c77ec7b29cc5ab216e867bd1967e6c9aa8e0"}], "stats": {"total": 175, "additions": 175, "deletions": 0}, "files": [{"sha": "10aab6074810e042d9b3e1d172372e156ce8a429", "filename": "libgo/config.h.in", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324612b351f925889304177e6e370463c506a595/libgo%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324612b351f925889304177e6e370463c506a595/libgo%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfig.h.in?ref=324612b351f925889304177e6e370463c506a595", "patch": "@@ -3,12 +3,33 @@\n /* Define if building universal (internal helper macro) */\n #undef AC_APPLE_UNIVERSAL_BUILD\n \n+/* Define to 1 if you have the `acosl' function. */\n+#undef HAVE_ACOSL\n+\n+/* Define to 1 if you have the `asinl' function. */\n+#undef HAVE_ASINL\n+\n+/* Define to 1 if you have the `atan2l' function. */\n+#undef HAVE_ATAN2L\n+\n+/* Define to 1 if you have the `atanl' function. */\n+#undef HAVE_ATANL\n+\n+/* Define to 1 if you have the `cosl' function. */\n+#undef HAVE_COSL\n+\n /* Define to 1 if you have the <dlfcn.h> header file. */\n #undef HAVE_DLFCN_H\n \n /* Define to 1 if you have the `epoll_create1' function. */\n #undef HAVE_EPOLL_CREATE1\n \n+/* Define to 1 if you have the `expl' function. */\n+#undef HAVE_EXPL\n+\n+/* Define to 1 if you have the `expm1l' function. */\n+#undef HAVE_EXPM1L\n+\n /* Define to 1 if you have the `faccessat' function. */\n #undef HAVE_FACCESSAT\n \n@@ -42,6 +63,9 @@\n /* Define to 1 if you have the <inttypes.h> header file. */\n #undef HAVE_INTTYPES_H\n \n+/* Define to 1 if you have the `ldexpl' function. */\n+#undef HAVE_LDEXPL\n+\n /* Define to 1 if you have the <linux/ether.h> header file. */\n #undef HAVE_LINUX_ETHER_H\n \n@@ -72,6 +96,15 @@\n /* Define to 1 if the system has the type `loff_t'. */\n #undef HAVE_LOFF_T\n \n+/* Define to 1 if you have the `log10l' function. */\n+#undef HAVE_LOG10L\n+\n+/* Define to 1 if you have the `log1pl' function. */\n+#undef HAVE_LOG1PL\n+\n+/* Define to 1 if you have the `logl' function. */\n+#undef HAVE_LOGL\n+\n /* Define to 1 if you have the `matherr' function. */\n #undef HAVE_MATHERR\n \n@@ -126,6 +159,9 @@\n /* Define to 1 if you have the `setenv' function. */\n #undef HAVE_SETENV\n \n+/* Define to 1 if you have the `sinl' function. */\n+#undef HAVE_SINL\n+\n /* Define to 1 if you have the `splice' function. */\n #undef HAVE_SPLICE\n \n@@ -226,6 +262,9 @@\n /* Define to 1 if you have the <sys/vfs.h> header file. */\n #undef HAVE_SYS_VFS_H\n \n+/* Define to 1 if you have the `tanl' function. */\n+#undef HAVE_TANL\n+\n /* Define to 1 if you have the `tee' function. */\n #undef HAVE_TEE\n "}, {"sha": "1f797d4deeb661f31215e0abe8671ea9951dd180", "filename": "libgo/configure", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324612b351f925889304177e6e370463c506a595/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324612b351f925889304177e6e370463c506a595/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=324612b351f925889304177e6e370463c506a595", "patch": "@@ -14649,6 +14649,23 @@ _ACEOF\n fi\n \n \n+LIBS_hold=\"$LIBS\"\n+LIBS=\"$LIBS -lm\"\n+for ac_func in cosl expl logl sinl tanl acosl asinl atanl atan2l expm1l ldexpl log10l log1pl\n+do :\n+  as_ac_var=`$as_echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n+ac_fn_c_check_func \"$LINENO\" \"$ac_func\" \"$as_ac_var\"\n+eval as_val=\\$$as_ac_var\n+   if test \"x$as_val\" = x\"\"yes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define `$as_echo \"HAVE_$ac_func\" | $as_tr_cpp` 1\n+_ACEOF\n+\n+fi\n+done\n+\n+LIBS=\"$LIBS_hold\"\n+\n CFLAGS_hold=\"$CFLAGS\"\n CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n LIBS_hold=\"$LIBS\""}, {"sha": "5125200e2a1b9b61b9f28e736b6d685f17599d93", "filename": "libgo/configure.ac", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324612b351f925889304177e6e370463c506a595/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324612b351f925889304177e6e370463c506a595/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=324612b351f925889304177e6e370463c506a595", "patch": "@@ -489,6 +489,11 @@ AC_CHECK_FUNCS(epoll_create1 faccessat fallocate fchmodat fchownat futimesat ino\n AC_TYPE_OFF_T\n AC_CHECK_TYPES([loff_t])\n \n+LIBS_hold=\"$LIBS\"\n+LIBS=\"$LIBS -lm\"\n+AC_CHECK_FUNCS(cosl expl logl sinl tanl acosl asinl atanl atan2l expm1l ldexpl log10l log1pl)\n+LIBS=\"$LIBS_hold\"\n+\n CFLAGS_hold=\"$CFLAGS\"\n CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n LIBS_hold=\"$LIBS\""}, {"sha": "36bbdd26c35c0caed84c4c84efb27e124cf1ab7a", "filename": "libgo/runtime/go-nosys.c", "status": "modified", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324612b351f925889304177e6e370463c506a595/libgo%2Fruntime%2Fgo-nosys.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324612b351f925889304177e6e370463c506a595/libgo%2Fruntime%2Fgo-nosys.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-nosys.c?ref=324612b351f925889304177e6e370463c506a595", "patch": "@@ -13,6 +13,7 @@\n \n #include <errno.h>\n #include <fcntl.h>\n+#include <math.h>\n #include <stdint.h>\n #include <sys/types.h>\n #include <sys/stat.h>\n@@ -239,3 +240,116 @@ unshare (int flags __attribute__ ((unused)))\n   return -1;\n }\n #endif\n+\n+/* Long double math functions.  These are needed on old i386 systems\n+   that don't have them in libm.  The compiler translates calls to\n+   these functions on float64 to call an 80-bit floating point\n+   function instead, because when optimizing that function can be\n+   executed as an x87 instructure.  However, when not optimizing, this\n+   translates into a call to the math function.  So on systems that\n+   don't provide these functions, we provide a version that just calls\n+   the float64 version.  */\n+\n+#ifndef HAVE_COSL\n+long double\n+cosl (long double a)\n+{\n+  return (long double) cos ((double) a);\n+}\n+#endif\n+\n+#ifndef HAVE_EXPL\n+long double\n+expl (long double a)\n+{\n+  return (long double) exp ((double) a);\n+}\n+#endif\n+\n+#ifndef HAVE_LOGL\n+long double\n+logl (long double a)\n+{\n+  return (long double) log ((double) a);\n+}\n+#endif\n+\n+#ifndef HAVE_SINL\n+long double\n+sinl (long double a)\n+{\n+  return (long double) sin ((double) a);\n+}\n+#endif\n+\n+#ifndef HAVE_TANL\n+long double\n+tanl (long double a)\n+{\n+  return (long double) tan ((double) a);\n+}\n+#endif\n+\n+#ifndef HAVE_ACOSL\n+long double\n+acosl (long double a)\n+{\n+  return (long double) acos ((double) a);\n+}\n+#endif\n+\n+#ifndef HAVE_ASINL\n+long double\n+asinl (long double a)\n+{\n+  return (long double) asin ((double) a);\n+}\n+#endif\n+\n+#ifndef HAVE_ATANL\n+long double\n+atanl (long double a)\n+{\n+  return (long double) atan ((double) a);\n+}\n+#endif\n+\n+#ifndef HAVE_ATAN2L\n+long double\n+atan2l (long double a, long double b)\n+{\n+  return (long double) atan2 ((double) a, (double) b);\n+}\n+#endif\n+\n+#ifndef HAVE_EXPM1L\n+long double\n+expm1l (long double a)\n+{\n+  return (long double) expm1 ((double) a);\n+}\n+#endif\n+\n+#ifndef HAVE_LDEXPL\n+long double\n+ldexpl (long double a, int exp)\n+{\n+  return (long double) ldexp ((double) a, exp);\n+}\n+#endif\n+\n+#ifndef HAVE_LOG10L\n+long double\n+log10l (long double a)\n+{\n+  return (long double) log10 ((double) a);\n+}\n+#endif\n+\n+#ifndef HAVE_LOG1PL\n+long double\n+log1pl (long double a)\n+{\n+  return (long double) log1p ((double) a);\n+}\n+#endif"}]}