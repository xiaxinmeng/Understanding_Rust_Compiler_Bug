{"sha": "eaffa76227b6b049f692a9958d24f5fc4f9d27d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFmZmE3NjIyN2I2YjA0OWY2OTJhOTk1OGQyNGY1ZmM0ZjlkMjdkMQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-01-08T04:35:43Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-01-08T04:35:43Z"}, "message": "Memoize memory strides per loop.\n\n2010-01-07  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-interchange.c (memory_stride_in_loop): Renamed\n\tpdr_stride_in_loop.\n\t(memory_strides_in_loop): Renamed memory_strides_in_loop_1.\n\t(memory_strides_in_loop): Memoize the memory strides per loop.\n\t(lst_interchange_profitable_p): Do not initialize to zero the memory\n\tstrides.\n\t* graphite-poly.h (struct lst): Add a field memory_strides.\n\t(LST_LOOP_MEMORY_STRIDES): New.\n\t(new_lst_loop): Initialize LST_LOOP_MEMORY_STRIDES to -1.\n\t(free_lst): Clear LST_LOOP_MEMORY_STRIDES.\n\nFrom-SVN: r155725", "tree": {"sha": "68af4bfdf48fe4b2e9486fc57eab043165cd3dd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68af4bfdf48fe4b2e9486fc57eab043165cd3dd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eaffa76227b6b049f692a9958d24f5fc4f9d27d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaffa76227b6b049f692a9958d24f5fc4f9d27d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaffa76227b6b049f692a9958d24f5fc4f9d27d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaffa76227b6b049f692a9958d24f5fc4f9d27d1/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf69e7546b49ad9e5143e82e73bc051421205c12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf69e7546b49ad9e5143e82e73bc051421205c12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf69e7546b49ad9e5143e82e73bc051421205c12"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "379e35164577c05f080a9d051719a3d3a8406588", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaffa76227b6b049f692a9958d24f5fc4f9d27d1/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaffa76227b6b049f692a9958d24f5fc4f9d27d1/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=eaffa76227b6b049f692a9958d24f5fc4f9d27d1", "patch": "@@ -1,3 +1,16 @@\n+2010-01-07  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-interchange.c (memory_stride_in_loop): Renamed\n+\tpdr_stride_in_loop.\n+\t(memory_strides_in_loop): Renamed memory_strides_in_loop_1.\n+\t(memory_strides_in_loop): Memoize the memory strides per loop.\n+\t(lst_interchange_profitable_p): Do not initialize to zero the memory\n+\tstrides.\n+\t* graphite-poly.h (struct lst): Add a field memory_strides.\n+\t(LST_LOOP_MEMORY_STRIDES): New.\n+\t(new_lst_loop): Initialize LST_LOOP_MEMORY_STRIDES to -1.\n+\t(free_lst): Clear LST_LOOP_MEMORY_STRIDES.\n+\n 2010-01-07  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-interchange.c (memory_strides_in_loop_depth): Renamed"}, {"sha": "918e334e367e4997f38d4ac61340e1a8cb08d4b1", "filename": "gcc/graphite-interchange.c", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaffa76227b6b049f692a9958d24f5fc4f9d27d1/gcc%2Fgraphite-interchange.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaffa76227b6b049f692a9958d24f5fc4f9d27d1/gcc%2Fgraphite-interchange.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-interchange.c?ref=eaffa76227b6b049f692a9958d24f5fc4f9d27d1", "patch": "@@ -196,7 +196,7 @@ build_partial_difference (ppl_Pointset_Powerset_C_Polyhedron_t *p,\n    the loop at DEPTH.  */\n \n static void\n-memory_stride_in_loop (Value stride, graphite_dim_t depth, poly_dr_p pdr)\n+pdr_stride_in_loop (Value stride, graphite_dim_t depth, poly_dr_p pdr)\n {\n   ppl_dimension_type time_depth;\n   ppl_Linear_Expression_t le, lma;\n@@ -329,11 +329,12 @@ memory_stride_in_loop (Value stride, graphite_dim_t depth, poly_dr_p pdr)\n   ppl_delete_Linear_Expression (le);\n }\n \n+\n /* Sets STRIDES to the sum of all the strides of the data references\n    accessed in LOOP at DEPTH.  */\n \n static void\n-memory_strides_in_loop (lst_p loop, graphite_dim_t depth, Value strides)\n+memory_strides_in_loop_1 (lst_p loop, graphite_dim_t depth, Value strides)\n {\n   int i, j;\n   lst_p l;\n@@ -345,11 +346,11 @@ memory_strides_in_loop (lst_p loop, graphite_dim_t depth, Value strides)\n \n   for (j = 0; VEC_iterate (lst_p, LST_SEQ (loop), j, l); j++)\n     if (LST_LOOP_P (l))\n-      memory_strides_in_loop (l, depth, strides);\n+      memory_strides_in_loop_1 (l, depth, strides);\n     else\n       for (i = 0; VEC_iterate (poly_dr_p, PBB_DRS (LST_PBB (l)), i, pdr); i++)\n \t{\n-\t  memory_stride_in_loop (s, depth, pdr);\n+\t  pdr_stride_in_loop (s, depth, pdr);\n \t  value_set_si (n, PDR_NB_REFS (pdr));\n \t  value_multiply (s, s, n);\n \t  value_addto (strides, strides, s);\n@@ -359,6 +360,21 @@ memory_strides_in_loop (lst_p loop, graphite_dim_t depth, Value strides)\n   value_clear (n);\n }\n \n+/* Sets STRIDES to the sum of all the strides of the data references\n+   accessed in LOOP at DEPTH.  */\n+\n+static void\n+memory_strides_in_loop (lst_p loop, graphite_dim_t depth, Value strides)\n+{\n+  if (value_mone_p (loop->memory_strides))\n+    {\n+      value_set_si (strides, 0);\n+      memory_strides_in_loop_1 (loop, depth, strides);\n+    }\n+  else\n+    value_assign (strides, loop->memory_strides);\n+}\n+\n /* Return true when the interchange of loops LOOP1 and LOOP2 is\n    profitable.\n \n@@ -452,8 +468,6 @@ lst_interchange_profitable_p (lst_p loop1, lst_p loop2)\n \n   value_init (d1);\n   value_init (d2);\n-  value_set_si (d1, 0);\n-  value_set_si (d2, 0);\n \n   memory_strides_in_loop (loop1, lst_depth (loop1), d1);\n   memory_strides_in_loop (loop2, lst_depth (loop2), d2);"}, {"sha": "a2969c772163570dd4fab19573d981acee931710", "filename": "gcc/graphite-poly.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaffa76227b6b049f692a9958d24f5fc4f9d27d1/gcc%2Fgraphite-poly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaffa76227b6b049f692a9958d24f5fc4f9d27d1/gcc%2Fgraphite-poly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.h?ref=eaffa76227b6b049f692a9958d24f5fc4f9d27d1", "patch": "@@ -632,6 +632,9 @@ struct lst {\n   /* A pointer to the loop that contains this node.  */\n   lst_p loop_father;\n \n+  /* The sum of all the memory strides for an LST loop.  */\n+  Value memory_strides;\n+\n   /* Loop nodes contain a sequence SEQ of LST nodes, statements\n      contain a pointer to their polyhedral representation PBB.  */\n   union {\n@@ -644,6 +647,7 @@ struct lst {\n #define LST_LOOP_FATHER(LST) ((LST)->loop_father)\n #define LST_PBB(LST) ((LST)->node.pbb)\n #define LST_SEQ(LST) ((LST)->node.seq)\n+#define LST_LOOP_MEMORY_STRIDES(LST) ((LST)->memory_strides)\n \n void scop_to_lst (scop_p);\n void print_lst (FILE *, lst_p, int);\n@@ -662,6 +666,8 @@ new_lst_loop (VEC (lst_p, heap) *seq)\n   LST_LOOP_P (lst) = true;\n   LST_SEQ (lst) = seq;\n   LST_LOOP_FATHER (lst) = NULL;\n+  value_init (LST_LOOP_MEMORY_STRIDES (lst));\n+  value_set_si (LST_LOOP_MEMORY_STRIDES (lst), -1);\n \n   for (i = 0; VEC_iterate (lst_p, seq, i, l); i++)\n     LST_LOOP_FATHER (l) = lst;\n@@ -698,6 +704,7 @@ free_lst (lst_p lst)\n       for (i = 0; VEC_iterate (lst_p, LST_SEQ (lst), i, l); i++)\n \tfree_lst (l);\n \n+      value_clear (LST_LOOP_MEMORY_STRIDES (lst));\n       VEC_free (lst_p, heap, LST_SEQ (lst));\n     }\n "}]}