{"sha": "6a651371a77f76227d6bbd0642f8648793568c65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE2NTEzNzFhNzdmNzYyMjdkNmJiZDA2NDJmODY0ODc5MzU2OGM2NQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-08-25T13:37:46Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-08-25T13:37:46Z"}, "message": "Warning fixes:\n\n\t* calls.c (emit_call_1): Mark parameter `stack_size' with\n\tATTRIBUTE_UNUSED.\n\t(expand_call): Initialize variable `insn'.\n\t(emit_library_call): Likewise for variable `high_to_save'.\n\t(emit_library_call_value): Likewise.\n\t(store_one_arg): Likewise for variables `lower_bound' and\n\t`upper_bound'.\n\n\t* combine.c (try_combine): Likewise for variables `i2_code_number'\n\tand `other_code_number'.\n\t(find_split_point): Likewise for variables `pos', `unsignedp' and\n\t`inner'.\n\t(simplify_if_then_else): Likewise for variables `op' and `c1'.\n\t(simplify_and_const_int): Remove unused variable `width'.\n\t(merge_outer_ops): Likewise.\n\n\t* cse.c (simplify_binary_operation): Cast an INTVAL() to `unsigned\n\tHOST_WIDE_INT' when comparing against one.\n\t(simplify_relational_operation): Likewise.\n\t(cse_insn): Initialize variables `src_eqv_volatile',\n\t`src_eqv_in_memory', `src_eqv_in_struct', `src_eqv_hash' and `sets'.\n\n\t* final.c (init_final): Constify parameter `filename'.\n\t(final_start_function): Mark parameter `optimize' with\n\tATTRIBUTE_UNUSED.\n\t(profile_function): Likewise for parameters `first' and `optimize'.\n\t(output_source_line): Likewise for parameter `file'.\n\n\t* integrate.c (subst_constants): Cast a value to `size_t' when\n\tcomparing against one.\n\t(mark_stores): Initialize variable `mode'.  Cast a value to\n\t`size_t' when comparing against one.\n\n\t* integrate.h (MAYBE_EXTEND_CONST_EQUIV_VARRAY): Likewise.\n\n\t* loop.c (move_movables): Initialize variable `first'.\n\t(strength_reduce): Likewise for variable `increment'.\n\t(check_dbra_loop): Likewise for variable `comparison_val'.  Cast a\n\tvalue to `size_t' when comparing against one.\n\t(load_mems): Initialize variable `end_label'.\n\n\t* output.h (init_final): Constify parameter.\n\n\t* reload.c (decompose): Initialize variable `base'.\n\n\t* reload1.c (reload): Likewise for variable `is_scalar'.\n\t(spill_hard_reg): Mark parameter `dumpfile' with ATTRIBUTE_UNUSED.\n\t(choose_reload_regs): Initialize variable `mode'.\n\t(emit_reload_insns): Likewise for variable `store_insn'.\n\t(reload_cse_noop_set_p): Mark parameter `insn' with\n\tATTRIBUTE_UNUSED.\n\t(reload_combine): Initialize variable `set'.\n\n\t* unroll.c (unroll_loop): Likewise for variable `local_label'.\n\t(copy_loop_body): Cast a value to `size_t' when comparing against\n\tone.\n\n\t* varasm.c (assemble_variable): Initialize variable `size_tree'.\n\t(const_hash): Add an `else abort()' in an if-else-if-else sequence.\n\t(remove_from_pending_weak_list): Mark parameter `name' with\n\tATTRIBUTE_UNUSED.\n\nFrom-SVN: r28860", "tree": {"sha": "d01a3fd61a606aadd243044b3287b1e5c640f009", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d01a3fd61a606aadd243044b3287b1e5c640f009"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a651371a77f76227d6bbd0642f8648793568c65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a651371a77f76227d6bbd0642f8648793568c65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a651371a77f76227d6bbd0642f8648793568c65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a651371a77f76227d6bbd0642f8648793568c65/comments", "author": null, "committer": null, "parents": [{"sha": "e797ff70489ee22f953a870a772151660a61dfa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e797ff70489ee22f953a870a772151660a61dfa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e797ff70489ee22f953a870a772151660a61dfa5"}], "stats": {"total": 160, "additions": 112, "deletions": 48}, "files": [{"sha": "cb4a5698973cf566fd7012b06ea3b96fe781e386", "filename": "gcc/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a651371a77f76227d6bbd0642f8648793568c65", "patch": "@@ -1,3 +1,67 @@\n+Wed Aug 25 09:32:31 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* calls.c (emit_call_1): Mark parameter `stack_size' with\n+\tATTRIBUTE_UNUSED.\n+\t(expand_call): Initialize variable `insn'.\n+\t(emit_library_call): Likewise for variable `high_to_save'.\n+\t(emit_library_call_value): Likewise.\n+\t(store_one_arg): Likewise for variables `lower_bound' and\n+\t`upper_bound'.\n+\n+\t* combine.c (try_combine): Likewise for variables `i2_code_number'\n+\tand `other_code_number'.\n+\t(find_split_point): Likewise for variables `pos', `unsignedp' and\n+\t`inner'.\n+\t(simplify_if_then_else): Likewise for variables `op' and `c1'.\n+\t(simplify_and_const_int): Remove unused variable `width'.\n+\t(merge_outer_ops): Likewise.\n+\n+\t* cse.c (simplify_binary_operation): Cast an INTVAL() to `unsigned\n+\tHOST_WIDE_INT' when comparing against one.\n+\t(simplify_relational_operation): Likewise.\n+\t(cse_insn): Initialize variables `src_eqv_volatile',\n+\t`src_eqv_in_memory', `src_eqv_in_struct', `src_eqv_hash' and `sets'.\n+\n+\t* final.c (init_final): Constify parameter `filename'.\n+\t(final_start_function): Mark parameter `optimize' with\n+\tATTRIBUTE_UNUSED.\n+\t(profile_function): Likewise for parameters `first' and `optimize'.\n+\t(output_source_line): Likewise for parameter `file'.\n+\n+\t* integrate.c (subst_constants): Cast a value to `size_t' when\n+\tcomparing against one.\n+\t(mark_stores): Initialize variable `mode'.  Cast a value to\n+\t`size_t' when comparing against one.\n+\n+\t* integrate.h (MAYBE_EXTEND_CONST_EQUIV_VARRAY): Likewise.\n+\n+\t* loop.c (move_movables): Initialize variable `first'.\n+\t(strength_reduce): Likewise for variable `increment'.\n+\t(check_dbra_loop): Likewise for variable `comparison_val'.  Cast a\n+\tvalue to `size_t' when comparing against one.\n+\t(load_mems): Initialize variable `end_label'.\n+\n+\t* output.h (init_final): Constify parameter.\n+\n+\t* reload.c (decompose): Initialize variable `base'.\n+\n+\t* reload1.c (reload): Likewise for variable `is_scalar'.\n+\t(spill_hard_reg): Mark parameter `dumpfile' with ATTRIBUTE_UNUSED.\n+\t(choose_reload_regs): Initialize variable `mode'.\n+\t(emit_reload_insns): Likewise for variable `store_insn'.\n+\t(reload_cse_noop_set_p): Mark parameter `insn' with\n+\tATTRIBUTE_UNUSED.\n+\t(reload_combine): Initialize variable `set'.\n+\n+\t* unroll.c (unroll_loop): Likewise for variable `local_label'.\n+\t(copy_loop_body): Cast a value to `size_t' when comparing against\n+\tone.\n+\n+\t* varasm.c (assemble_variable): Initialize variable `size_tree'.\n+\t(const_hash): Add an `else abort()' in an if-else-if-else sequence.\n+\t(remove_from_pending_weak_list): Mark parameter `name' with\n+\tATTRIBUTE_UNUSED.\n+\n Wed Aug 25 11:18:39 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \t* toplev.c (rest_of_compilation): Use decl_printable_name when opening"}, {"sha": "c070472e3f35848583c8cb2f39abcc8d95aa3d81", "filename": "gcc/calls.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=6a651371a77f76227d6bbd0642f8648793568c65", "patch": "@@ -380,7 +380,7 @@ emit_call_1 (funexp, fndecl, funtype, stack_size, rounded_stack_size,\n      rtx funexp;\n      tree fndecl ATTRIBUTE_UNUSED;\n      tree funtype ATTRIBUTE_UNUSED;\n-     HOST_WIDE_INT stack_size;\n+     HOST_WIDE_INT stack_size ATTRIBUTE_UNUSED;\n      HOST_WIDE_INT rounded_stack_size;\n      HOST_WIDE_INT struct_value_size;\n      rtx next_arg_reg;\n@@ -1792,7 +1792,7 @@ expand_call (exp, target, ignore)\n \t    {\n \t      rtx first_insn\n \t\t= before_call ? NEXT_INSN (before_call) : get_insns ();\n-\t      rtx insn, seq;\n+\t      rtx insn = NULL_RTX, seq;\n \n \t      /* Look for a call in the inline function code.\n \t\t If DECL_SAVED_INSNS (fndecl)->outgoing_args_size is\n@@ -2583,7 +2583,7 @@ emit_library_call VPROTO((rtx orgfun, int no_queue, enum machine_mode outmode,\n #if defined(ACCUMULATE_OUTGOING_ARGS) && defined(REG_PARM_STACK_SPACE)\n   /* Define the boundary of the register parm stack space that needs to be\n      save, if any.  */\n-  int low_to_save = -1, high_to_save;\n+  int low_to_save = -1, high_to_save = 0;\n   rtx save_area = 0;            /* Place that it is saved */\n #endif\n \n@@ -3082,7 +3082,7 @@ emit_library_call_value VPROTO((rtx orgfun, rtx value, int no_queue,\n #if defined(ACCUMULATE_OUTGOING_ARGS) && defined(REG_PARM_STACK_SPACE)\n   /* Define the boundary of the register parm stack space that needs to be\n      save, if any.  */\n-  int low_to_save = -1, high_to_save;\n+  int low_to_save = -1, high_to_save = 0;\n   rtx save_area = 0;            /* Place that it is saved */\n #endif\n \n@@ -3694,7 +3694,7 @@ store_one_arg (arg, argblock, may_be_alloca, variable_size,\n   int partial = 0;\n   int used = 0;\n #ifdef ACCUMULATE_OUTGOING_ARGS\n-  int i, lower_bound, upper_bound;\n+  int i, lower_bound = 0, upper_bound = 0;\n #endif\n \n   if (TREE_CODE (pval) == ERROR_MARK)"}, {"sha": "b2c3f50aba06d6c2ec03a4c7b3c3ad2e2beed104", "filename": "gcc/combine.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=6a651371a77f76227d6bbd0642f8648793568c65", "patch": "@@ -1339,7 +1339,7 @@ try_combine (i3, i2, i1)\n   /* Nonzero is I2's body now appears in I3.  */\n   int i2_is_used;\n   /* INSN_CODEs for new I3, new I2, and user of condition code.  */\n-  int insn_code_number, i2_code_number, other_code_number;\n+  int insn_code_number, i2_code_number = 0, other_code_number = 0;\n   /* Contains I3 if the destination of I3 is used in its source, which means\n      that the old life of I3 is being killed.  If that usage is placed into\n      I2 and not in I3, a REG_DEAD note must be made.  */\n@@ -2593,8 +2593,8 @@ find_split_point (loc, insn)\n   rtx x = *loc;\n   enum rtx_code code = GET_CODE (x);\n   rtx *split;\n-  int len = 0, pos, unsignedp;\n-  rtx inner;\n+  int len = 0, pos = 0, unsignedp = 0;\n+  rtx inner = NULL_RTX;\n \n   /* First special-case some codes.  */\n   switch (code)\n@@ -4457,9 +4457,9 @@ simplify_if_then_else (x)\n       rtx f = make_compound_operation (false, SET);\n       rtx cond_op0 = XEXP (cond, 0);\n       rtx cond_op1 = XEXP (cond, 1);\n-      enum rtx_code op, extend_op = NIL;\n+      enum rtx_code op = NIL, extend_op = NIL;\n       enum machine_mode m = mode;\n-      rtx z = 0, c1;\n+      rtx z = 0, c1 = NULL_RTX;\n \n       if ((GET_CODE (t) == PLUS || GET_CODE (t) == MINUS\n \t   || GET_CODE (t) == IOR || GET_CODE (t) == XOR\n@@ -7323,7 +7323,6 @@ simplify_and_const_int (x, mode, varop, constop)\n      unsigned HOST_WIDE_INT constop;\n {\n   unsigned HOST_WIDE_INT nonzero;\n-  int width = GET_MODE_BITSIZE (mode);\n   int i;\n \n   /* Simplify VAROP knowing that we will be only looking at some of the\n@@ -8224,7 +8223,6 @@ merge_outer_ops (pop0, pconst0, op1, const1, mode, pcomp_p)\n {\n   enum rtx_code op0 = *pop0;\n   HOST_WIDE_INT const0 = *pconst0;\n-  int width = GET_MODE_BITSIZE (mode);\n \n   const0 &= GET_MODE_MASK (mode);\n   const1 &= GET_MODE_MASK (mode);"}, {"sha": "c39ab9f8522c3afdb86c05135e8434f51d2a2f6f", "filename": "gcc/cse.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=6a651371a77f76227d6bbd0642f8648793568c65", "patch": "@@ -4198,7 +4198,7 @@ simplify_binary_operation (code, mode, op0, op1)\n \tcase ROTATE:\n \t  /* Rotating ~0 always results in ~0.  */\n \t  if (GET_CODE (op0) == CONST_INT && width <= HOST_BITS_PER_WIDE_INT\n-\t      && INTVAL (op0) == GET_MODE_MASK (mode)\n+\t      && (unsigned HOST_WIDE_INT) INTVAL (op0) == GET_MODE_MASK (mode)\n \t      && ! side_effects_p (op1))\n \t    return op0;\n \n@@ -4224,7 +4224,7 @@ simplify_binary_operation (code, mode, op0, op1)\n \t   \n \tcase SMAX:\n \t  if (width <= HOST_BITS_PER_WIDE_INT && GET_CODE (op1) == CONST_INT\n-\t      && (INTVAL (op1)\n+\t      && ((unsigned HOST_WIDE_INT) INTVAL (op1)\n \t\t  == (unsigned HOST_WIDE_INT) GET_MODE_MASK (mode) >> 1)\n \t      && ! side_effects_p (op0))\n \t    return op1;\n@@ -4839,14 +4839,14 @@ simplify_relational_operation (code, mode, op0, op1)\n \t  /* Unsigned values are never greater than the largest\n \t     unsigned value.  */\n \t  if (GET_CODE (op1) == CONST_INT\n-\t      && INTVAL (op1) == GET_MODE_MASK (mode)\n+\t      && (unsigned HOST_WIDE_INT) INTVAL (op1) == GET_MODE_MASK (mode)\n \t    && INTEGRAL_MODE_P (mode))\n \t  return const_true_rtx;\n \t  break;\n \n \tcase GTU:\n \t  if (GET_CODE (op1) == CONST_INT\n-\t      && INTVAL (op1) == GET_MODE_MASK (mode)\n+\t      && (unsigned HOST_WIDE_INT) INTVAL (op1) == GET_MODE_MASK (mode)\n \t      && INTEGRAL_MODE_P (mode))\n \t    return const0_rtx;\n \t  break;\n@@ -6377,12 +6377,12 @@ cse_insn (insn, libcall_insn)\n \n   rtx src_eqv = 0;\n   struct table_elt *src_eqv_elt = 0;\n-  int src_eqv_volatile;\n-  int src_eqv_in_memory;\n-  int src_eqv_in_struct;\n-  unsigned src_eqv_hash;\n+  int src_eqv_volatile = 0;\n+  int src_eqv_in_memory = 0;\n+  int src_eqv_in_struct = 0;\n+  unsigned src_eqv_hash = 0;\n \n-  struct set *sets;\n+  struct set *sets = NULL_PTR;\n \n   this_insn = insn;\n "}, {"sha": "0b30246cfb978d93e533b0c7d88391f3d1c8b30d", "filename": "gcc/final.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=6a651371a77f76227d6bbd0642f8648793568c65", "patch": "@@ -314,7 +314,7 @@ extern char *getpwd ();\n \n void\n init_final (filename)\n-     char *filename;\n+     const char *filename ATTRIBUTE_UNUSED;\n {\n   next_block_index = 2;\n   app_on = 0;\n@@ -1598,7 +1598,7 @@ void\n final_start_function (first, file, optimize)\n      rtx first;\n      FILE *file;\n-     int optimize;\n+     int optimize ATTRIBUTE_UNUSED;\n {\n   block_depth = 0;\n \n@@ -1790,9 +1790,9 @@ profile_function (file)\n \n void\n final_end_function (first, file, optimize)\n-     rtx first;\n+     rtx first ATTRIBUTE_UNUSED;\n      FILE *file;\n-     int optimize;\n+     int optimize ATTRIBUTE_UNUSED;\n {\n   if (app_on)\n     {\n@@ -2982,7 +2982,7 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \n static void\n output_source_line (file, insn)\n-     FILE *file;\n+     FILE *file ATTRIBUTE_UNUSED;\n      rtx insn;\n {\n   register char *filename = NOTE_SOURCE_FILE (insn);"}, {"sha": "b59518edb33286c46ca8c257330dadfa6c30e3ea", "filename": "gcc/integrate.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=6a651371a77f76227d6bbd0642f8648793568c65", "patch": "@@ -2859,7 +2859,7 @@ subst_constants (loc, insn, map)\n \tstruct const_equiv_data *p;\n \n \tif (! (regno < FIRST_PSEUDO_REGISTER && REG_USERVAR_P (x))\n-\t    && regno < VARRAY_SIZE (map->const_equiv_varray)\n+\t    && (size_t) regno < VARRAY_SIZE (map->const_equiv_varray)\n \t    && (p = &VARRAY_CONST_EQUIV (map->const_equiv_varray, regno),\n \t\tp->rtx != 0)\n \t    && p->age >= map->const_age)\n@@ -3087,7 +3087,7 @@ mark_stores (dest, x)\n      rtx x ATTRIBUTE_UNUSED;\n {\n   int regno = -1;\n-  enum machine_mode mode;\n+  enum machine_mode mode = VOIDmode;\n \n   /* DEST is always the innermost thing set, except in the case of\n      SUBREGs of hard registers.  */\n@@ -3111,7 +3111,7 @@ mark_stores (dest, x)\n       if (regno != VIRTUAL_INCOMING_ARGS_REGNUM\n \t  && regno != VIRTUAL_STACK_VARS_REGNUM)\n \tfor (i = regno; i <= last_reg; i++)\n-\t  if (i < VARRAY_SIZE (global_const_equiv_varray))\n+\t  if ((size_t) i < VARRAY_SIZE (global_const_equiv_varray))\n \t    VARRAY_CONST_EQUIV (global_const_equiv_varray, i).rtx = 0;\n     }\n }"}, {"sha": "615998b6cbd142024fd34a1469abbd02cf5875dc", "filename": "gcc/integrate.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2Fintegrate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2Fintegrate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.h?ref=6a651371a77f76227d6bbd0642f8648793568c65", "patch": "@@ -134,7 +134,7 @@ extern varray_type global_const_equiv_varray;\n \n #define MAYBE_EXTEND_CONST_EQUIV_VARRAY(MAP,MAX)\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    if ((MAX) >= VARRAY_SIZE ((MAP)->const_equiv_varray))\t\t\\\n+    if ((size_t)(MAX) >= VARRAY_SIZE ((MAP)->const_equiv_varray))\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n         int is_global = (global_const_equiv_varray\t\t\t\\\n \t\t\t == (MAP)->const_equiv_varray);\t\t\t\\"}, {"sha": "810f3a25c8aa8d0c5dceda8cc50e3c648409996f", "filename": "gcc/loop.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=6a651371a77f76227d6bbd0642f8648793568c65", "patch": "@@ -1838,7 +1838,7 @@ move_movables (movables, threshold, insn_count, loop_start, end, nregs)\n \t    {\n \t      int count;\n \t      register struct movable *m1;\n-\t      rtx first;\n+\t      rtx first = NULL_RTX;\n \n \t      /* Now move the insns that set the reg.  */\n \n@@ -4017,7 +4017,7 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n       else\n \t{\n \t  struct iv_class *bl2 = 0;\n-\t  rtx increment;\n+\t  rtx increment = NULL_RTX;\n \n \t  /* Biv initial value is not a simple move.  If it is the sum of\n \t     another biv and a constant, check if both bivs are incremented\n@@ -7901,7 +7901,7 @@ check_dbra_loop (loop_end, insn_count, loop_start, loop_info)\n \t\t  || (GET_CODE (comparison) == LE\n \t\t      && no_use_except_counting)))\n \t    {\n-\t      HOST_WIDE_INT add_val, add_adjust, comparison_val;\n+\t      HOST_WIDE_INT add_val, add_adjust, comparison_val = 0;\n \t      rtx initial_value, comparison_value;\n \t      int nonneg = 0;\n \t      enum rtx_code cmp_code;\n@@ -8173,7 +8173,7 @@ check_dbra_loop (loop_end, insn_count, loop_start, loop_info)\n \t\t       REG_EQUAL notes should still be correct.  */\n \t\t    if (! set\n \t\t\t|| GET_CODE (SET_DEST (set)) != REG\n-\t\t\t|| REGNO (SET_DEST (set)) >= reg_iv_type->num_elements\n+\t\t\t|| (size_t) REGNO (SET_DEST (set)) >= reg_iv_type->num_elements\n \t\t\t|| REG_IV_TYPE (REGNO (SET_DEST (set))) != GENERAL_INDUCT\n \t\t\t|| REG_IV_INFO (REGNO (SET_DEST (set)))->src_reg != bl->biv->src_reg)\n \t\t      for (pnote = &REG_NOTES (p); *pnote;)\n@@ -9509,7 +9509,7 @@ load_mems (scan_start, end, loop_top, start)\n   int i;\n   rtx p;\n   rtx label = NULL_RTX;\n-  rtx end_label;\n+  rtx end_label = NULL_RTX;\n \n   if (loop_mems_idx > 0) \n     {"}, {"sha": "b0a731e59bbf37d0f356f0de27d6e51edb84dae8", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=6a651371a77f76227d6bbd0642f8648793568c65", "patch": "@@ -20,7 +20,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n /* Initialize data in final at the beginning of a compilation.  */\n-extern void init_final\t\tPROTO((char *));\n+extern void init_final\t\tPROTO((const char *));\n \n /* Called at end of source file,\n    to output the block-profiling table for this entire compilation.  */"}, {"sha": "7d96884b782ca7ee8653c4e6deac2584a635ad2e", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=6a651371a77f76227d6bbd0642f8648793568c65", "patch": "@@ -2226,7 +2226,7 @@ decompose (x)\n   val.base = 0;\n   if (GET_CODE (x) == MEM)\n     {\n-      rtx base, offset = 0;\n+      rtx base = NULL_RTX, offset = 0;\n       rtx addr = XEXP (x, 0);\n \n       if (GET_CODE (addr) == PRE_DEC || GET_CODE (addr) == PRE_INC"}, {"sha": "28ddd860434a275bc85b515d889f4874dc6a7f41", "filename": "gcc/reload1.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=6a651371a77f76227d6bbd0642f8648793568c65", "patch": "@@ -1089,7 +1089,7 @@ reload (first, global, dumpfile)\n     {\n       rtx addr = 0;\n       int in_struct = 0;\n-      int is_scalar;\n+      int is_scalar = 0;\n       int is_readonly = 0;\n \n       if (reg_equiv_memory_loc[i])\n@@ -3794,7 +3794,7 @@ init_elim_table ()\n static void\n spill_hard_reg (regno, dumpfile, cant_eliminate)\n      register int regno;\n-     FILE *dumpfile;\n+     FILE *dumpfile ATTRIBUTE_UNUSED;\n      int cant_eliminate;\n {\n   register int i;\n@@ -5845,7 +5845,7 @@ choose_reload_regs (chain)\n \t    {\n \t      int word = 0;\n \t      register int regno = -1;\n-\t      enum machine_mode mode;\n+\t      enum machine_mode mode = VOIDmode;\n \n \t      if (reload_in[r] == 0)\n \t\t;\n@@ -7622,7 +7622,7 @@ emit_reload_insns (chain)\n \t  register int nregno = REGNO (out);\n \t  if (nregno >= FIRST_PSEUDO_REGISTER)\n \t    {\n-\t      rtx src_reg, store_insn;\n+\t      rtx src_reg, store_insn = NULL_RTX;\n \n \t      reg_last_reload_reg[nregno] = 0;\n \n@@ -8968,7 +8968,7 @@ reload_cse_regno_equal_p (regno, val, mode)\n static int\n reload_cse_noop_set_p (set, insn)\n      rtx set;\n-     rtx insn;\n+     rtx insn ATTRIBUTE_UNUSED;\n {\n   rtx src, dest;\n   enum machine_mode dest_mode;\n@@ -9650,7 +9650,7 @@ reload_combine ()\n \t  rtx prev = prev_nonnote_insn (insn);\n \t  rtx prev_set = prev ? single_set (prev) : NULL_RTX;\n \t  int regno = REGNO (reg);\n-\t  rtx const_reg;\n+\t  rtx const_reg = NULL_RTX;\n \t  rtx reg_sum = NULL_RTX;\n \n \t  /* Now, we need an index register.\n@@ -10074,7 +10074,7 @@ reload_cse_move2add (first)\n \t\t       && reg_set_luid[regno] > reg_set_luid[REGNO (src)])\n \t\t{\n \t\t  rtx next = next_nonnote_insn (insn);\n-\t\t  rtx set;\n+\t\t  rtx set = NULL_RTX;\n \t\t  if (next)\n \t\t    set = single_set (next);\n \t\t  if (next"}, {"sha": "761abce207c63eb1ffa815d7d8938e413087bbc9", "filename": "gcc/unroll.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=6a651371a77f76227d6bbd0642f8648793568c65", "patch": "@@ -237,7 +237,7 @@ unroll_loop (loop_end, insn_count, loop_start, end_insert_before,\n   int max_labelno, max_insnno;\n   rtx insert_before;\n   struct inline_remap *map;\n-  char *local_label;\n+  char *local_label = NULL;\n   char *local_regno;\n   int max_local_regnum;\n   int maxregnum;\n@@ -1963,7 +1963,7 @@ copy_loop_body (copy_start, copy_end, map, exit_label, last_iteration,\n \t    {\n \t      int regno = REGNO (SET_DEST (pattern));\n \n-\t      if (regno < VARRAY_SIZE (map->const_equiv_varray)\n+\t      if ((size_t) regno < VARRAY_SIZE (map->const_equiv_varray)\n \t\t  && (VARRAY_CONST_EQUIV (map->const_equiv_varray, regno).age\n \t\t      == map->const_age))\n \t\tVARRAY_CONST_EQUIV (map->const_equiv_varray, regno).age = -1;"}, {"sha": "3413eed05f9d2bc154cfd0253c1427df4be3a344", "filename": "gcc/varasm.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a651371a77f76227d6bbd0642f8648793568c65/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=6a651371a77f76227d6bbd0642f8648793568c65", "patch": "@@ -1159,7 +1159,7 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n {\n   register char *name;\n   unsigned int align;\n-  tree size_tree;\n+  tree size_tree = NULL_TREE;\n   int reloc = 0;\n   enum in_section saved_in_section;\n \n@@ -2355,6 +2355,8 @@ const_hash (exp)\n \t  }\n \telse if (GET_CODE (value.base) == LABEL_REF)\n \t  hi = value.offset + CODE_LABEL_NUMBER (XEXP (value.base, 0)) * 13;\n+\telse\n+\t  abort();\n \n \thi &= (1 << HASHBITS) - 1;\n \thi %= MAX_HASH_TABLE;\n@@ -4383,7 +4385,7 @@ weak_finish ()\n    some assemblers.  */\n static void\n remove_from_pending_weak_list (name)\n-     char *name;\n+     char *name ATTRIBUTE_UNUSED;\n {\n #ifdef HANDLE_PRAGMA_WEAK\n   if (HANDLE_PRAGMA_WEAK)"}]}