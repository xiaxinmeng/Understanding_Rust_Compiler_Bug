{"sha": "d610ae121e8ecd738de4dc01e6ac11ecf7c2327e", "node_id": "C_kwDOANBUbNoAKGQ2MTBhZTEyMWU4ZWNkNzM4ZGU0ZGMwMWU2YWMxMWVjZjdjMjMyN2U", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-06-23T20:04:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-06-23T21:16:17Z"}, "message": "c++: anon union designated init [PR105925]\n\nThis testcase was failing because CONSTRUCTOR_IS_DESIGNATED_INIT wasn't\ngetting set on the introduced CONSTRUCTOR for the anonymous union, and\nbuild_aggr_conv uses that flag to decide whether to pay attention to the\nindexes of the CONSTRUCTOR.  So set the flag when we see a designator rather\nthan relying on copying it from another CONSTRUCTOR.\n\nThis avoids some redundant errors on desig4.C because we stop setting\nCONSTRUCTOR_IS_DESIGNATED_INIT on _Complex CONSTRUCTORs where it's\nnonsense.\n\n\tPR c++/105925\n\ngcc/cp/ChangeLog:\n\n\t* decl.cc (reshape_init_array_1): Set\n\tCONSTRUCTOR_IS_DESIGNATED_INIT here.\n\t(reshape_init_class): And here.\n\t(reshape_init): Not here.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ext/desig4.C: Remove extra errors.\n\t* g++.dg/cpp2a/desig26.C: New test.", "tree": {"sha": "efedfa834e6a179ccb96ea80f0537aa2870bc97e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efedfa834e6a179ccb96ea80f0537aa2870bc97e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d610ae121e8ecd738de4dc01e6ac11ecf7c2327e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d610ae121e8ecd738de4dc01e6ac11ecf7c2327e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d610ae121e8ecd738de4dc01e6ac11ecf7c2327e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d610ae121e8ecd738de4dc01e6ac11ecf7c2327e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b00b95198e6720eb23a2618870d67800f6180fdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b00b95198e6720eb23a2618870d67800f6180fdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b00b95198e6720eb23a2618870d67800f6180fdd"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "aa6cf3c6c2eb827d12f5badf7edfbae4884a11a3", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d610ae121e8ecd738de4dc01e6ac11ecf7c2327e/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d610ae121e8ecd738de4dc01e6ac11ecf7c2327e/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=d610ae121e8ecd738de4dc01e6ac11ecf7c2327e", "patch": "@@ -6505,6 +6505,8 @@ reshape_init_array_1 (tree elt_type, tree max_index, reshape_iter *d,\n       tree elt_init;\n       constructor_elt *old_cur = d->cur;\n \n+      if (d->cur->index)\n+\tCONSTRUCTOR_IS_DESIGNATED_INIT (new_init) = true;\n       check_array_designated_initializer (d->cur, index);\n       elt_init = reshape_init_r (elt_type, d,\n \t\t\t\t /*first_initializer_p=*/NULL_TREE,\n@@ -6674,6 +6676,7 @@ reshape_init_class (tree type, reshape_iter *d, bool first_initializer_p,\n \t    }\n \t  else if (TREE_CODE (d->cur->index) == IDENTIFIER_NODE)\n \t    {\n+\t      CONSTRUCTOR_IS_DESIGNATED_INIT (new_init) = true;\n \t      field = get_class_binding (type, d->cur->index);\n \t      direct_desig = true;\n \t    }\n@@ -7158,7 +7161,8 @@ reshape_init (tree type, tree init, tsubst_flags_t complain)\n     CONSTRUCTOR_IS_DIRECT_INIT (new_init) = true;\n   if (CONSTRUCTOR_IS_DESIGNATED_INIT (init)\n       && BRACE_ENCLOSED_INITIALIZER_P (new_init))\n-    CONSTRUCTOR_IS_DESIGNATED_INIT (new_init) = true;\n+    gcc_checking_assert (CONSTRUCTOR_IS_DESIGNATED_INIT (new_init)\n+\t\t\t || seen_error ());\n \n   return new_init;\n }"}, {"sha": "443fa3d089d002598ce4ffd5d91a852c65afb79c", "filename": "gcc/testsuite/g++.dg/cpp2a/desig26.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d610ae121e8ecd738de4dc01e6ac11ecf7c2327e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d610ae121e8ecd738de4dc01e6ac11ecf7c2327e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig26.C?ref=d610ae121e8ecd738de4dc01e6ac11ecf7c2327e", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/105925\n+// { dg-do compile { target c++20 } }\n+\n+struct V\n+{\n+    int i;\n+    double d;\n+};\n+\n+struct X\n+{\n+    union\n+    {\n+        int x;\n+        V y;\n+    };\n+};\n+\n+X foo()\n+{\n+    return {.y = {0, 0.0}};\n+}"}, {"sha": "9b92a6de24935efd186a68ebc176d0a33e30a0c4", "filename": "gcc/testsuite/g++.dg/ext/desig4.C", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d610ae121e8ecd738de4dc01e6ac11ecf7c2327e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdesig4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d610ae121e8ecd738de4dc01e6ac11ecf7c2327e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdesig4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdesig4.C?ref=d610ae121e8ecd738de4dc01e6ac11ecf7c2327e", "patch": "@@ -6,13 +6,9 @@ int a = { .foo = 6 };\t\t     // { dg-error \"designator\" }\n int b = { [0] = 1 };\t\t     // { dg-error \"12:designator .0.\" }\n _Complex float c = { .foo = 0,  1 }; // { dg-error \"designator\" }\n \t\t\t\t     // { dg-error \"either all initializer clauses should be designated or none of them should be\" \"\" { target c++2a } .-1 }\n-\t\t\t\t     // { dg-error \"cannot convert\" \"\" { target *-*-* } .-2 }\n _Complex float d = { [0] = 0,  1 };  // { dg-error \"23:designator .0.\" }\n \t\t\t\t     // { dg-error \"either all initializer clauses should be designated or none of them should be\" \"\" { target c++2a } .-1 }\n-\t\t\t\t     // { dg-error \"cannot convert\" \"\" { target *-*-* } .-2 }\n _Complex float e = { 0, .foo = 1 };  // { dg-error \"designator\" }\n \t\t\t\t     // { dg-error \"either all initializer clauses should be designated or none of them should be\" \"\" { target c++2a } .-1 }\n-\t\t\t\t     // { dg-error \"cannot convert\" \"\" { target *-*-* } .-2 }\n _Complex float f = { 0, [0] = 1 };   // { dg-error \"26:designator .0.\" }\n \t\t\t\t     // { dg-error \"either all initializer clauses should be designated or none of them should be\" \"\" { target c++2a } .-1 }\n-\t\t\t\t     // { dg-error \"cannot convert\" \"\" { target *-*-* } .-2 }"}]}