{"sha": "814299a9d49c25ae2e8d00ec619559b71833871a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE0Mjk5YTlkNDljMjVhZTJlOGQwMGVjNjE5NTU5YjcxODMzODcxYQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-01-11T16:44:36Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-01-12T03:31:39Z"}, "message": "c++: -Wmissing-field-initializers in unevaluated ctx [PR98620]\n\nThis PR wants us not to warn about missing field initializers when\nthe code in question takes places in decltype and similar.  Fixed\nthus.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/98620\n\t* typeck2.c (process_init_constructor_record): Don't emit\n\t-Wmissing-field-initializers warnings in unevaluated contexts.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/98620\n\t* g++.dg/warn/Wmissing-field-initializers-2.C: New test.", "tree": {"sha": "0594e03748425e7d1acd2b9af0fc040ab26adb14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0594e03748425e7d1acd2b9af0fc040ab26adb14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/814299a9d49c25ae2e8d00ec619559b71833871a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/814299a9d49c25ae2e8d00ec619559b71833871a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/814299a9d49c25ae2e8d00ec619559b71833871a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/814299a9d49c25ae2e8d00ec619559b71833871a/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "240f0a490dae0fb9ef72fa21a93e8088d17fb682", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/240f0a490dae0fb9ef72fa21a93e8088d17fb682", "html_url": "https://github.com/Rust-GCC/gccrs/commit/240f0a490dae0fb9ef72fa21a93e8088d17fb682"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "93744fdafded6526aa24ffe31834003f00b6d39a", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814299a9d49c25ae2e8d00ec619559b71833871a/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814299a9d49c25ae2e8d00ec619559b71833871a/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=814299a9d49c25ae2e8d00ec619559b71833871a", "patch": "@@ -1563,6 +1563,7 @@ process_init_constructor_record (tree type, tree init, int nested, int flags,\n \n \t  /* Warn when some struct elements are implicitly initialized.  */\n \t  if ((complain & tf_warning)\n+\t      && !cp_unevaluated_operand\n \t      && !EMPTY_CONSTRUCTOR_P (init))\n \t    warning (OPT_Wmissing_field_initializers,\n \t\t     \"missing initializer for member %qD\", field);\n@@ -1593,6 +1594,7 @@ process_init_constructor_record (tree type, tree init, int nested, int flags,\n \t  /* Warn when some struct elements are implicitly initialized\n \t     to zero.  */\n \t  if ((complain & tf_warning)\n+\t      && !cp_unevaluated_operand\n \t      && !EMPTY_CONSTRUCTOR_P (init))\n \t    warning (OPT_Wmissing_field_initializers,\n \t\t     \"missing initializer for member %qD\", field);"}, {"sha": "31d4d897984bb1cb3b3c08a2acf804757cc17d26", "filename": "gcc/testsuite/g++.dg/warn/Wmissing-field-initializers-2.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814299a9d49c25ae2e8d00ec619559b71833871a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmissing-field-initializers-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814299a9d49c25ae2e8d00ec619559b71833871a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmissing-field-initializers-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmissing-field-initializers-2.C?ref=814299a9d49c25ae2e8d00ec619559b71833871a", "patch": "@@ -0,0 +1,44 @@\n+// PR c++/98620\n+// { dg-do compile { target c++11 } }\n+\n+namespace std {\n+  template<typename T>\n+  T&& declval() noexcept;\n+\n+  template<bool B>\n+  struct bool_constant {\n+    static constexpr bool value = B;\n+    using type = bool_constant;\n+  };\n+  using true_type = bool_constant<true>;\n+  using false_type = bool_constant<false>;\n+};\n+\n+template <typename T>\n+struct TmpArray\n+{\n+   T arr[1];\n+};\n+\n+template <typename Src, typename Dst, typename = void>\n+struct is_non_narrowing_conversion : std::false_type\n+{};\n+\n+template <typename Src, typename Dst>\n+struct is_non_narrowing_conversion<\n+    Src, Dst,\n+    decltype(void(TmpArray<Dst>{{ std::declval<Src>() }})) // { dg-bogus \"missing initializer\" }\n+> : std::true_type\n+{};\n+\n+struct mystruct\n+{\n+    int a;\n+    void * b;\n+};\n+\n+void test_nok()\n+{\n+  is_non_narrowing_conversion<int&, mystruct>::type v;\n+  (void) v;\n+}"}]}