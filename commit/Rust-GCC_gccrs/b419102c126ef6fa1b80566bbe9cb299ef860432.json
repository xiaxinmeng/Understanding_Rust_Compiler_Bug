{"sha": "b419102c126ef6fa1b80566bbe9cb299ef860432", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQxOTEwMmMxMjZlZjZmYTFiODA1NjZiYmU5Y2IyOTllZjg2MDQzMg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-10-04T16:55:54Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-10-04T16:55:54Z"}, "message": "[C++ PATCH] Move mangling alias out of ::\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-10/msg00199.html\n\tgcc/cp/\n\tMove mangling aliases out of global namespace.\n\t* cp-tree.h (record_mangling): New.\n\t(maybe_remove_implicit_alias): Delete.\n\t* decl2.c (mangled_decls): New hash map.\n\t(generate_mangling_alias): Reimplement using mangled_decls.\n\t(record_mangling): New.\n\t* mangle.c (decl_implicit_alias_p,\n\tmaybe_remove_implicit_alias): Delete.\n\t(mangle_decl): Use record_mangling.\n\t* name-lookup.c (supplement_binding_1): Remove\n\tmaybe_remove_implicit_alias check.\n\n\t* call.c (convert_arg_to_ellipsis): Correct comment about passing\n\tby reference.\n\n\tgcc/testsuite/\n\t* g++.dg/abi/mangle41.C: Adjust diagnostics.\n\n\tlibcc1/\n\t* libcp1plugin.cc (supplement_binding): Don't use\n\tmaybe_remove_implicit_alias.\n\nFrom-SVN: r253421", "tree": {"sha": "10b8e208a125c5c7bcf4fe9a2e5783a2436fd29a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10b8e208a125c5c7bcf4fe9a2e5783a2436fd29a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b419102c126ef6fa1b80566bbe9cb299ef860432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b419102c126ef6fa1b80566bbe9cb299ef860432", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b419102c126ef6fa1b80566bbe9cb299ef860432", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b419102c126ef6fa1b80566bbe9cb299ef860432/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "baf20d8df23fd33363b997a423d57bb0c3405a38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baf20d8df23fd33363b997a423d57bb0c3405a38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baf20d8df23fd33363b997a423d57bb0c3405a38"}], "stats": {"total": 168, "additions": 93, "deletions": 75}, "files": [{"sha": "01b8c4d6da60a4a1c84d6d01be2aacc6903a770b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b419102c126ef6fa1b80566bbe9cb299ef860432/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b419102c126ef6fa1b80566bbe9cb299ef860432/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b419102c126ef6fa1b80566bbe9cb299ef860432", "patch": "@@ -1,3 +1,17 @@\n+2017-10-04  Nathan Sidwell  <nathan@acm.org>\n+\n+\tMove mangling aliases out of global namespace.\n+\t* cp-tree.h (record_mangling): New.\n+\t(maybe_remove_implicit_alias): Delete.\n+\t* decl2.c (mangled_decls): New hash map.\n+\t(generate_mangling_alias): Reimplement using mangled_decls.\n+\t(record_mangling): New.\n+\t* mangle.c (decl_implicit_alias_p,\n+\tmaybe_remove_implicit_alias): Delete.\n+\t(mangle_decl): Use record_mangling.\n+\t* name-lookup.c (supplement_binding_1): Remove\n+\tmaybe_remove_implicit_alias check.\n+\n 2017-10-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/82373"}, {"sha": "82ebc2831c586e3952b0c03f7132066bf34bc32e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b419102c126ef6fa1b80566bbe9cb299ef860432/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b419102c126ef6fa1b80566bbe9cb299ef860432/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b419102c126ef6fa1b80566bbe9cb299ef860432", "patch": "@@ -6142,6 +6142,7 @@ extern tree finish_case_label\t\t\t(location_t, tree, tree);\n extern tree cxx_maybe_build_cleanup\t\t(tree, tsubst_flags_t);\n \n /* in decl2.c */\n+extern void record_mangling\t\t\t(tree, bool);\n extern void note_mangling_alias\t\t\t(tree, tree);\n extern void generate_mangling_aliases\t\t(void);\n extern tree build_memfn_type\t\t\t(tree, tree, cp_cv_quals, cp_ref_qualifier);\n@@ -7154,7 +7155,6 @@ extern tree add_exception_specifier\t\t(tree, tree, int);\n extern tree merge_exception_specifiers\t\t(tree, tree);\n \n /* in mangle.c */\n-extern bool maybe_remove_implicit_alias\t\t(tree);\n extern void init_mangle\t\t\t\t(void);\n extern void mangle_decl\t\t\t\t(tree);\n extern const char *mangle_type_string\t\t(tree);"}, {"sha": "354d503da6d5dc1b14beab0aab04b7381bc5ff60", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 66, "deletions": 9, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b419102c126ef6fa1b80566bbe9cb299ef860432/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b419102c126ef6fa1b80566bbe9cb299ef860432/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=b419102c126ef6fa1b80566bbe9cb299ef860432", "patch": "@@ -102,6 +102,10 @@ static GTY(()) vec<tree, va_gc> *no_linkage_decls;\n    is to be an alias for the former if the former is defined.  */\n static GTY(()) vec<tree, va_gc> *mangling_aliases;\n \n+/* A hash table of mangled names to decls.  Used to figure out if we\n+   need compatibility aliases.  */\n+static GTY(()) hash_map<lang_identifier *, tree> *mangled_decls;\n+\n /* Nonzero if we're done parsing and into end-of-file activities.  */\n \n int at_eof;\n@@ -4290,25 +4294,34 @@ handle_tls_init (void)\n static void\n generate_mangling_alias (tree decl, tree id2)\n {\n+  struct cgraph_node *n = NULL;\n+\n+  if (TREE_CODE (decl) == FUNCTION_DECL)\n+    {\n+      n = cgraph_node::get (decl);\n+      if (!n)\n+\t/* Don't create an alias to an unreferenced function.  */\n+\treturn;\n+    }\n+\n+  bool existed;\n+  tree *slot = &mangled_decls->get_or_insert (id2, &existed);\n+\n   /* If there's a declaration already using this mangled name,\n      don't create a compatibility alias that conflicts.  */\n-  if (IDENTIFIER_GLOBAL_VALUE (id2))\n-    return;\n-\n-  struct cgraph_node *n = NULL;\n-  if (TREE_CODE (decl) == FUNCTION_DECL\n-      && !(n = cgraph_node::get (decl)))\n-    /* Don't create an alias to an unreferenced function.  */\n+  if (existed)\n     return;\n \n   tree alias = make_alias_for (decl, id2);\n-  SET_IDENTIFIER_GLOBAL_VALUE (id2, alias);\n+  *slot = alias;\n+\n   DECL_IGNORED_P (alias) = 1;\n   TREE_PUBLIC (alias) = TREE_PUBLIC (decl);\n   DECL_VISIBILITY (alias) = DECL_VISIBILITY (decl);\n   if (vague_linkage_p (decl))\n     DECL_WEAK (alias) = 1;\n-  if (TREE_CODE (decl) == FUNCTION_DECL)\n+\n+  if (n)\n     n->create_same_body_alias (alias, decl);\n   else\n     varpool_node::create_extra_name_alias (alias, decl);\n@@ -4347,6 +4360,50 @@ generate_mangling_aliases ()\n   defer_mangling_aliases = false;\n }\n \n+/* Record a mangling of DECL, whose DECL_ASSEMBLER_NAME has just been\n+   set.  NEED_WARNING is true if we must warn about collisions.  We do\n+   this to spot changes in mangling that may require compatibility\n+   aliases.  */\n+\n+void\n+record_mangling (tree decl, bool need_warning)\n+{\n+  if (!mangled_decls)\n+    mangled_decls = hash_map<lang_identifier *, tree>::create_ggc (499);\n+\n+  gcc_checking_assert (DECL_ASSEMBLER_NAME_SET_P (decl));\n+  tree id = DECL_ASSEMBLER_NAME (decl);\n+  bool existed;\n+  tree *slot = &mangled_decls->get_or_insert (id, &existed);\n+\n+  /* If this is already an alias, remove the alias, because the real\n+     decl takes presidence.  */\n+  if (!existed)\n+    ;\n+  else if (DECL_ARTIFICIAL (*slot) && DECL_IGNORED_P (*slot))\n+    if (symtab_node *n = symtab_node::get (*slot))\n+      if (n->cpp_implicit_alias)\n+\t{\n+\t  n->remove ();\n+\t  existed = false;\n+\t}\n+\n+  if (!existed)\n+    *slot = decl;\n+  else if (need_warning)\n+    {\n+      error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\"mangling of %q#D as %qE conflicts with a previous mangle\",\n+\t\tdecl, id);\n+      inform (DECL_SOURCE_LOCATION (*slot),\n+\t      \"previous mangling %q#D\", *slot);\n+      inform (DECL_SOURCE_LOCATION (decl),\n+\t      \"a later -fabi-version= (or =0)\"\n+\t      \" avoids this error with a change in mangling\");\n+      *slot = decl;\n+    }\n+}\n+\n /* The entire file is now complete.  If requested, dump everything\n    to a file.  */\n "}, {"sha": "6046906e77d76b56246144b48dbccc8120423557", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 51, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b419102c126ef6fa1b80566bbe9cb299ef860432/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b419102c126ef6fa1b80566bbe9cb299ef860432/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=b419102c126ef6fa1b80566bbe9cb299ef860432", "patch": "@@ -3783,38 +3783,6 @@ get_mangled_id (tree decl)\n   return targetm.mangle_decl_assembler_name (decl, id);\n }\n \n-/* If DECL is an implicit mangling alias, return its symtab node; otherwise\n-   return NULL.  */\n-\n-static symtab_node *\n-decl_implicit_alias_p (tree decl)\n-{\n-  if (DECL_P (decl) && DECL_ARTIFICIAL (decl)\n-      && DECL_IGNORED_P (decl)\n-      && (TREE_CODE (decl) == FUNCTION_DECL\n-\t  || (VAR_P (decl) && TREE_STATIC (decl))))\n-    {\n-      symtab_node *n = symtab_node::get (decl);\n-      if (n && n->cpp_implicit_alias)\n-\treturn n;\n-    }\n-  return NULL;\n-}\n-\n-/* If DECL is a mangling alias, remove it from the symbol table and return\n-   true; otherwise return false.  */\n-\n-bool\n-maybe_remove_implicit_alias (tree decl)\n-{\n-  if (symtab_node *n = decl_implicit_alias_p (decl))\n-    {\n-      n->remove();\n-      return true;\n-    }\n-  return false;\n-}\n-\n /* Create an identifier for the external mangled name of DECL.  */\n \n void\n@@ -3871,29 +3839,11 @@ mangle_decl (const tree decl)\n \n       if (!DECL_REALLY_EXTERN (decl))\n \t{\n-\t  bool set = false;\n-\n-\t  /* Check IDENTIFIER_GLOBAL_VALUE before setting to avoid redundant\n-\t     errors from multiple definitions.  */\n-\t  tree d = IDENTIFIER_GLOBAL_VALUE (id);\n-\t  if (!d || decl_implicit_alias_p (d))\n-\t    {\n-\t      set = true;\n-\t      SET_IDENTIFIER_GLOBAL_VALUE (id, decl);\n-\t    }\n+\t  record_mangling (decl, G.need_abi_warning);\n \n \t  if (!G.need_abi_warning)\n \t    return;\n \n-\t  /* If the mangling will change in the future, emit an alias with the\n-\t     future mangled name for forward-compatibility.  */\n-\t  if (!set)\n-\t    {\n-\t      SET_IDENTIFIER_GLOBAL_VALUE (id, decl);\n-\t      inform (DECL_SOURCE_LOCATION (decl), \"a later -fabi-version= (or \"\n-\t\t      \"=0) avoids this error with a change in mangling\");\n-\t    }\n-\n \t  flag_abi_version = flag_abi_compat_version;\n \t  id2 = mangle_decl_string (decl);\n \t  id2 = targetm.mangle_decl_assembler_name (decl, id2);"}, {"sha": "0111d8de899c646a922dee0e8c247c4259af094e", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b419102c126ef6fa1b80566bbe9cb299ef860432/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b419102c126ef6fa1b80566bbe9cb299ef860432/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=b419102c126ef6fa1b80566bbe9cb299ef860432", "patch": "@@ -2255,12 +2255,6 @@ supplement_binding_1 (cxx_binding *binding, tree decl)\n       region to refer only to the namespace to which it already\n       refers.  */\n     ok = false;\n-  else if (maybe_remove_implicit_alias (bval))\n-    {\n-      /* There was a mangling compatibility alias using this mangled name,\n-\t but now we have a real decl that wants to use it instead.  */\n-      binding->value = decl;\n-    }\n   else\n     {\n       if (!error_operand_p (bval))"}, {"sha": "26ca5563af4278b07916d0a7805820faae5a5292", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b419102c126ef6fa1b80566bbe9cb299ef860432/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b419102c126ef6fa1b80566bbe9cb299ef860432/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b419102c126ef6fa1b80566bbe9cb299ef860432", "patch": "@@ -1,3 +1,7 @@\n+2017-10-04  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/abi/mangle41.C: Adjust diagnostics.\n+\n 2017-10-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/82373"}, {"sha": "9da72f11feb69ad8d613ce20b6f0bbe06aa8eb66", "filename": "gcc/testsuite/g++.dg/abi/mangle41.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b419102c126ef6fa1b80566bbe9cb299ef860432/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle41.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b419102c126ef6fa1b80566bbe9cb299ef860432/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle41.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle41.C?ref=b419102c126ef6fa1b80566bbe9cb299ef860432", "patch": "@@ -3,6 +3,6 @@\n // { dg-options \"-mavx -fabi-version=2\" }\n \n #include <x86intrin.h>\n-void f(__m128) { }\t\t// { dg-message \"previous declaration\" }\n-void f(__m256) { }\t\t// { dg-error \"conflicts\" }\n+void f(__m128) { }\t// { dg-message \"previous mangling\" }\n+void f(__m256) { }\t// { dg-error \"conflicts with a previous mangle\" }\n // { dg-message \"mangling\" \"\" { target *-*-* } .-1 }"}, {"sha": "ea7a1aeb25b3995ae82734e9a25136a22ca42b8c", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b419102c126ef6fa1b80566bbe9cb299ef860432/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b419102c126ef6fa1b80566bbe9cb299ef860432/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=b419102c126ef6fa1b80566bbe9cb299ef860432", "patch": "@@ -1,3 +1,8 @@\n+2017-10-04  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* libcp1plugin.cc (supplement_binding): Don't use\n+\tmaybe_remove_implicit_alias.\n+\n 2017-07-20  Nathan Sidwell  <nathan@acm.org>\n \n \tRemove TYPE_METHODS."}, {"sha": "12ea4ed84e0d329fa035ca317fb1ea5bef3dc300", "filename": "libcc1/libcp1plugin.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b419102c126ef6fa1b80566bbe9cb299ef860432/libcc1%2Flibcp1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b419102c126ef6fa1b80566bbe9cb299ef860432/libcc1%2Flibcp1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1plugin.cc?ref=b419102c126ef6fa1b80566bbe9cb299ef860432", "patch": "@@ -422,12 +422,6 @@ supplement_binding (cxx_binding *binding, tree decl)\n       region to refer only to the namespace to which it already\n       refers.  */\n     ok = false;\n-  else if (maybe_remove_implicit_alias (bval))\n-    {\n-      /* There was a mangling compatibility alias using this mangled name,\n-\t but now we have a real decl that wants to use it instead.  */\n-      binding->value = decl;\n-    }\n   else\n     {\n       // _1: diagnose_name_conflict (decl, bval);"}]}