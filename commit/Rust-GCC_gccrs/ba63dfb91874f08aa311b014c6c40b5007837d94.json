{"sha": "ba63dfb91874f08aa311b014c6c40b5007837d94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE2M2RmYjkxODc0ZjA4YWEzMTFiMDE0YzZjNDBiNTAwNzgzN2Q5NA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-08-02T12:05:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-08-02T12:05:47Z"}, "message": "re PR tree-optimization/35252 (No vectorization for complex arrays)\n\n2008-08-02  Richard Guenther  <rguenther@suse.de>\n\n\tPR target/35252\n\t* config/i386/sse.md (SSEMODE4S, SSEMODE2D): New mode iterators.\n\t(ssedoublesizemode): New mode attribute.\n\t(sse_shufps): Call gen_sse_shufps_v4sf.\n\t(sse_shufps_1): Macroize.\n\t(sse2_shufpd): Call gen_Sse_shufpd_v2df.\n\t(sse2_shufpd_1): Macroize.\n\t(vec_extract_odd, vec_extract_even): New expanders.\n\t(vec_interleave_highv4sf, vec_interleave_lowv4sf,\n\tvec_interleave_highv2df, vec_interleave_lowv2df): Likewise.\n\t* i386.c (ix86_expand_vector_init_one_nonzero): Call\n\tgen_sse_shufps_v4sf instead of gen_sse_shufps_1.\n\t(ix86_expand_vector_set): Likewise.\n\t(ix86_expand_reduc_v4sf): Likewise.\n\n\t* lib/target-supports.exp (vect_extract_even_odd_wide) Add.\n\t(vect_strided_wide): Likewise.\n\t* gcc.dg/vect/fast-math-pr35982.c: Enable for\n\tvect_extract_even_odd_wide.\n\t* gcc.dg/vect/fast-math-vect-complex-3.c: Likewise.\n\t* gcc.dg/vect/vect-1.c: Likewise.\n\t* gcc.dg/vect/vect-107.c: Likewise.\n\t* gcc.dg/vect/vect-98.c: Likewise.\n\t* gcc.dg/vect/vect-strided-float.c: Likewise.\n\t* gcc.dg/vect/slp-11.c: Enable for vect_strided_wide.\n\t* gcc.dg/vect/slp-12a.c: Likewise.\n\t* gcc.dg/vect/slp-12b.c: Likewise.\n\t* gcc.dg/vect/slp-19.c: Likewise.\n\t* gcc.dg/vect/slp-23.c: Likewise.\n\t* gcc.dg/vect/slp-5.c: Likewise.\n\nFrom-SVN: r138553", "tree": {"sha": "f2b87512728a2aba5d26c9bdd4a14c296ed4f1f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2b87512728a2aba5d26c9bdd4a14c296ed4f1f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba63dfb91874f08aa311b014c6c40b5007837d94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba63dfb91874f08aa311b014c6c40b5007837d94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba63dfb91874f08aa311b014c6c40b5007837d94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba63dfb91874f08aa311b014c6c40b5007837d94/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d2143736bb340bc15421f82fd3cf99d2e06e84a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2143736bb340bc15421f82fd3cf99d2e06e84a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2143736bb340bc15421f82fd3cf99d2e06e84a3"}], "stats": {"total": 266, "additions": 217, "deletions": 49}, "files": [{"sha": "496647caba5ed3c35bcdc5492e103405d1c2ac1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba63dfb91874f08aa311b014c6c40b5007837d94", "patch": "@@ -1,3 +1,20 @@\n+2008-08-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR target/35252\n+\t* config/i386/sse.md (SSEMODE4S, SSEMODE2D): New mode iterators.\n+\t(ssedoublesizemode): New mode attribute.\n+\t(sse_shufps): Call gen_sse_shufps_v4sf.\n+\t(sse_shufps_1): Macroize.\n+\t(sse2_shufpd): Call gen_Sse_shufpd_v2df.\n+\t(sse2_shufpd_1): Macroize.\n+\t(vec_extract_odd, vec_extract_even): New expanders.\n+\t(vec_interleave_highv4sf, vec_interleave_lowv4sf,\n+\tvec_interleave_highv2df, vec_interleave_lowv2df): Likewise.\n+\t* i386.c (ix86_expand_vector_init_one_nonzero): Call\n+\tgen_sse_shufps_v4sf instead of gen_sse_shufps_1.\n+\t(ix86_expand_vector_set): Likewise.\n+\t(ix86_expand_reduc_v4sf): Likewise.\n+\n 2008-08-01  Doug Kwan  <dougkwan@google.com>\n \n \t* matrix-reorg.c: Re-enable all code."}, {"sha": "f9783102179f716bbba53d354266db1030c4d7d8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ba63dfb91874f08aa311b014c6c40b5007837d94", "patch": "@@ -25176,7 +25176,7 @@ ix86_expand_vector_init_one_nonzero (bool mmx_ok, enum machine_mode mode,\n \t  else\n \t    tmp = new_target;\n \n-\t  emit_insn (gen_sse_shufps_1 (tmp, tmp, tmp,\n+\t  emit_insn (gen_sse_shufps_v4sf (tmp, tmp, tmp,\n \t\t\t\t       GEN_INT (1),\n \t\t\t\t       GEN_INT (one_var == 1 ? 0 : 1),\n \t\t\t\t       GEN_INT (one_var == 2 ? 0+4 : 1+4),\n@@ -25740,7 +25740,7 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n \t  /* target = X A B B */\n \t  ix86_expand_vector_set (false, target, val, 0);\n \t  /* target = A X C D  */\n-\t  emit_insn (gen_sse_shufps_1 (target, target, tmp,\n+\t  emit_insn (gen_sse_shufps_v4sf (target, target, tmp,\n \t\t\t\t       GEN_INT (1), GEN_INT (0),\n \t\t\t\t       GEN_INT (2+4), GEN_INT (3+4)));\n \t  return;\n@@ -25751,7 +25751,7 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n \t  /* tmp = X B C D */\n \t  ix86_expand_vector_set (false, tmp, val, 0);\n \t  /* target = A B X D */\n-\t  emit_insn (gen_sse_shufps_1 (target, target, tmp,\n+\t  emit_insn (gen_sse_shufps_v4sf (target, target, tmp,\n \t\t\t\t       GEN_INT (0), GEN_INT (1),\n \t\t\t\t       GEN_INT (0+4), GEN_INT (3+4)));\n \t  return;\n@@ -25762,7 +25762,7 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n \t  /* tmp = X B C D */\n \t  ix86_expand_vector_set (false, tmp, val, 0);\n \t  /* target = A B X D */\n-\t  emit_insn (gen_sse_shufps_1 (target, target, tmp,\n+\t  emit_insn (gen_sse_shufps_v4sf (target, target, tmp,\n \t\t\t\t       GEN_INT (0), GEN_INT (1),\n \t\t\t\t       GEN_INT (2+4), GEN_INT (0+4)));\n \t  return;\n@@ -25883,7 +25883,7 @@ ix86_expand_vector_extract (bool mmx_ok, rtx target, rtx vec, int elt)\n \tcase 1:\n \tcase 3:\n \t  tmp = gen_reg_rtx (mode);\n-\t  emit_insn (gen_sse_shufps_1 (tmp, vec, vec,\n+\t  emit_insn (gen_sse_shufps_v4sf (tmp, vec, vec,\n \t\t\t\t       GEN_INT (elt), GEN_INT (elt),\n \t\t\t\t       GEN_INT (elt+4), GEN_INT (elt+4)));\n \t  break;\n@@ -26000,7 +26000,7 @@ ix86_expand_reduc_v4sf (rtx (*fn) (rtx, rtx, rtx), rtx dest, rtx in)\n   emit_insn (gen_sse_movhlps (tmp1, in, in));\n   emit_insn (fn (tmp2, tmp1, in));\n \n-  emit_insn (gen_sse_shufps_1 (tmp3, tmp2, tmp2,\n+  emit_insn (gen_sse_shufps_v4sf (tmp3, tmp2, tmp2,\n \t\t\t       GEN_INT (1), GEN_INT (1),\n \t\t\t       GEN_INT (1+4), GEN_INT (1+4)));\n   emit_insn (fn (dest, tmp2, tmp3));"}, {"sha": "9c0030b16f5c9f582811b5cb2f2e0242d94381bf", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 106, "deletions": 14, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=ba63dfb91874f08aa311b014c6c40b5007837d94", "patch": "@@ -36,6 +36,10 @@\n (define_mode_iterator SSEMODEF4 [SF DF V4SF V2DF])\n (define_mode_iterator SSEMODEF2P [V4SF V2DF])\n \n+;; Int-float size matches\n+(define_mode_iterator SSEMODE4S [V4SF V4SI])\n+(define_mode_iterator SSEMODE2D [V2DF V2DI])\n+\n ;; Mapping from float mode to required SSE level\n (define_mode_attr sse [(SF \"sse\") (DF \"sse2\") (V4SF \"sse\") (V2DF \"sse2\")])\n \n@@ -57,6 +61,10 @@\n \t\t\t\t (V16QI \"QI\") (V8HI \"HI\")\n \t\t\t\t (V4SI \"SI\") (V2DI \"DI\")])\n \n+;; Mapping of vector modes to a vector mode of double size\n+(define_mode_attr ssedoublesizemode [(V2DF \"V4DF\") (V2DI \"V4DI\")\n+\t\t\t\t     (V4SF \"V8SF\") (V4SI \"V8SI\")])\n+\n ;; Number of scalar elements in each vector type\n (define_mode_attr ssescalarnum [(V4SF \"4\") (V2DF \"2\")\n \t\t\t\t(V16QI \"16\") (V8HI \"8\")\n@@ -2129,20 +2137,20 @@\n   \"TARGET_SSE\"\n {\n   int mask = INTVAL (operands[3]);\n-  emit_insn (gen_sse_shufps_1 (operands[0], operands[1], operands[2],\n+  emit_insn (gen_sse_shufps_v4sf (operands[0], operands[1], operands[2],\n \t\t\t       GEN_INT ((mask >> 0) & 3),\n \t\t\t       GEN_INT ((mask >> 2) & 3),\n \t\t\t       GEN_INT (((mask >> 4) & 3) + 4),\n \t\t\t       GEN_INT (((mask >> 6) & 3) + 4)));\n   DONE;\n })\n \n-(define_insn \"sse_shufps_1\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n-\t(vec_select:V4SF\n-\t  (vec_concat:V8SF\n-\t    (match_operand:V4SF 1 \"register_operand\" \"0\")\n-\t    (match_operand:V4SF 2 \"nonimmediate_operand\" \"xm\"))\n+(define_insn \"sse_shufps_<mode>\"\n+  [(set (match_operand:SSEMODE4S 0 \"register_operand\" \"=x\")\n+\t(vec_select:SSEMODE4S\n+\t  (vec_concat:<ssedoublesizemode>\n+\t    (match_operand:SSEMODE4S 1 \"register_operand\" \"0\")\n+\t    (match_operand:SSEMODE4S 2 \"nonimmediate_operand\" \"xm\"))\n \t  (parallel [(match_operand 3 \"const_0_to_3_operand\" \"\")\n \t\t     (match_operand 4 \"const_0_to_3_operand\" \"\")\n \t\t     (match_operand 5 \"const_4_to_7_operand\" \"\")\n@@ -2540,18 +2548,62 @@\n   \"TARGET_SSE2\"\n {\n   int mask = INTVAL (operands[3]);\n-  emit_insn (gen_sse2_shufpd_1 (operands[0], operands[1], operands[2],\n+  emit_insn (gen_sse2_shufpd_v2df (operands[0], operands[1], operands[2],\n \t\t\t\tGEN_INT (mask & 1),\n \t\t\t\tGEN_INT (mask & 2 ? 3 : 2)));\n   DONE;\n })\n \n-(define_insn \"sse2_shufpd_1\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n-\t(vec_select:V2DF\n-\t  (vec_concat:V4DF\n-\t    (match_operand:V2DF 1 \"register_operand\" \"0\")\n-\t    (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm\"))\n+(define_expand \"vec_extract_even<mode>\"\n+  [(set (match_operand:SSEMODE4S 0 \"register_operand\" \"\")\n+\t(vec_select:SSEMODE4S\n+\t  (vec_concat:<ssedoublesizemode>\n+\t    (match_operand:SSEMODE4S 1 \"register_operand\" \"\")\n+\t    (match_operand:SSEMODE4S 2 \"nonimmediate_operand\" \"\"))\n+\t  (parallel [(const_int 0)\n+\t\t     (const_int 2)\n+\t\t     (const_int 4)\n+\t\t     (const_int 6)])))]\n+  \"TARGET_SSE\")\n+\n+(define_expand \"vec_extract_odd<mode>\"\n+  [(set (match_operand:SSEMODE4S 0 \"register_operand\" \"\")\n+\t(vec_select:SSEMODE4S\n+\t  (vec_concat:<ssedoublesizemode>\n+\t    (match_operand:SSEMODE4S 1 \"register_operand\" \"\")\n+\t    (match_operand:SSEMODE4S 2 \"nonimmediate_operand\" \"\"))\n+\t  (parallel [(const_int 1)\n+\t\t     (const_int 3)\n+\t\t     (const_int 5)\n+\t\t     (const_int 7)])))]\n+  \"TARGET_SSE\")\n+\n+(define_expand \"vec_extract_even<mode>\"\n+  [(set (match_operand:SSEMODE2D 0 \"register_operand\" \"\")\n+\t(vec_select:SSEMODE2D\n+\t  (vec_concat:<ssedoublesizemode>\n+\t    (match_operand:SSEMODE2D 1 \"register_operand\" \"\")\n+\t    (match_operand:SSEMODE2D 2 \"nonimmediate_operand\" \"\"))\n+\t  (parallel [(const_int 0)\n+\t  \t     (const_int 2)])))]\n+  \"TARGET_SSE2\")\n+\n+(define_expand \"vec_extract_odd<mode>\"\n+  [(set (match_operand:SSEMODE2D 0 \"register_operand\" \"\")\n+\t(vec_select:SSEMODE2D\n+\t  (vec_concat:<ssedoublesizemode>\n+\t    (match_operand:SSEMODE2D 1 \"register_operand\" \"\")\n+\t    (match_operand:SSEMODE2D 2 \"nonimmediate_operand\" \"\"))\n+\t  (parallel [(const_int 1)\n+\t  \t     (const_int 3)])))]\n+  \"TARGET_SSE2\")\n+\n+(define_insn \"sse2_shufpd_<mode>\"\n+  [(set (match_operand:SSEMODE2D 0 \"register_operand\" \"=x\")\n+\t(vec_select:SSEMODE2D\n+\t  (vec_concat:<ssedoublesizemode>\n+\t    (match_operand:SSEMODE2D 1 \"register_operand\" \"0\")\n+\t    (match_operand:SSEMODE2D 2 \"nonimmediate_operand\" \"xm\"))\n \t  (parallel [(match_operand 3 \"const_0_to_1_operand\" \"\")\n \t\t     (match_operand 4 \"const_2_to_3_operand\" \"\")])))]\n   \"TARGET_SSE2\"\n@@ -4195,6 +4247,46 @@\n   DONE;\n })\n \n+(define_expand \"vec_interleave_highv4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"\")\n+        (vec_select:V4SF\n+          (vec_concat:V8SF\n+            (match_operand:V4SF 1 \"register_operand\" \"\")\n+            (match_operand:V4SF 2 \"nonimmediate_operand\" \"\"))\n+          (parallel [(const_int 2) (const_int 6)\n+                     (const_int 3) (const_int 7)])))]\n+  \"TARGET_SSE\")\n+\n+(define_expand \"vec_interleave_lowv4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"\")\n+        (vec_select:V4SF\n+          (vec_concat:V8SF\n+            (match_operand:V4SF 1 \"register_operand\" \"\")\n+            (match_operand:V4SF 2 \"nonimmediate_operand\" \"\"))\n+          (parallel [(const_int 0) (const_int 4)\n+                     (const_int 1) (const_int 5)])))]\n+  \"TARGET_SSE\")\n+\n+(define_expand \"vec_interleave_highv2df\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"\")\n+        (vec_select:V2DF\n+          (vec_concat:V4DF\n+            (match_operand:V2DF 1 \"register_operand\" \"\")\n+            (match_operand:V2DF 2 \"nonimmediate_operand\" \"\"))\n+          (parallel [(const_int 1)\n+                     (const_int 3)])))]\n+  \"TARGET_SSE2\")\n+\n+(define_expand \"vec_interleave_lowv2df\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"\")\n+        (vec_select:V2DF\n+          (vec_concat:V4DF\n+            (match_operand:V2DF 1 \"register_operand\" \"\")\n+            (match_operand:V2DF 2 \"nonimmediate_operand\" \"\"))\n+          (parallel [(const_int 0)\n+                     (const_int 2)])))]\n+  \"TARGET_SSE2\")\n+\n (define_insn \"sse2_packsswb\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n \t(vec_concat:V16QI"}, {"sha": "9937b9bd8d9d65e0a21c26252d561335c20a14d8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ba63dfb91874f08aa311b014c6c40b5007837d94", "patch": "@@ -1,3 +1,22 @@\n+2008-08-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR target/35252\n+\t* lib/target-supports.exp (vect_extract_even_odd_wide) Add.\n+\t(vect_strided_wide): Likewise.\n+\t* gcc.dg/vect/fast-math-pr35982.c: Enable for\n+\tvect_extract_even_odd_wide.\n+\t* gcc.dg/vect/fast-math-vect-complex-3.c: Likewise.\n+\t* gcc.dg/vect/vect-1.c: Likewise.\n+\t* gcc.dg/vect/vect-107.c: Likewise.\n+\t* gcc.dg/vect/vect-98.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-float.c: Likewise.\n+\t* gcc.dg/vect/slp-11.c: Enable for vect_strided_wide.\n+\t* gcc.dg/vect/slp-12a.c: Likewise.\n+\t* gcc.dg/vect/slp-12b.c: Likewise.\n+\t* gcc.dg/vect/slp-19.c: Likewise.\n+\t* gcc.dg/vect/slp-23.c: Likewise.\n+\t* gcc.dg/vect/slp-5.c: Likewise.\n+\n 2008-08-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/boolean_expr2.adb: New test."}, {"sha": "2c788606771a6ed9eeadeed08cae7792c1148ade", "filename": "gcc/testsuite/gcc.dg/vect/fast-math-pr35982.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-pr35982.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-pr35982.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-pr35982.c?ref=ba63dfb91874f08aa311b014c6c40b5007837d94", "patch": "@@ -19,7 +19,7 @@ float method2_int16 (struct mem *mem)\n   return avg;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_extract_even_odd  } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" { xfail vect_extract_even_odd  } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_extract_even_odd_wide  } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" { xfail vect_extract_even_odd_wide  } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "6110a231987991745c0ce204f39b90c1fb3c65b3", "filename": "gcc/testsuite/gcc.dg/vect/fast-math-vect-complex-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-vect-complex-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-vect-complex-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-vect-complex-3.c?ref=ba63dfb91874f08aa311b014c6c40b5007837d94", "patch": "@@ -57,5 +57,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_interleave  && vect_extract_even_odd } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_interleave  && vect_extract_even_odd_wide } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "d606438fd209bd8e9547c6d2682d0c3e43ad9d24", "filename": "gcc/testsuite/gcc.dg/vect/slp-11.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-11.c?ref=ba63dfb91874f08aa311b014c6c40b5007837d94", "patch": "@@ -106,8 +106,8 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\"  { target { vect_strided &&  vect_int_mult } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\"  {target  { ! { vect_int_mult && vect_strided } } } } }  */\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\"  { target { vect_strided_wide &&  vect_int_mult } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\"  {target  { ! { vect_int_mult && vect_strided_wide } } } } }  */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0  \"vect\"  } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n   "}, {"sha": "5cf404100bab11353ed2f073dace3381291e6e85", "filename": "gcc/testsuite/gcc.dg/vect/slp-12a.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-12a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-12a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-12a.c?ref=ba63dfb91874f08aa311b014c6c40b5007837d94", "patch": "@@ -95,11 +95,11 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  {target { vect_strided && vect_int_mult} } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  {target { {! {vect_strided}} && vect_int_mult } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  {target { vect_strided_wide && vect_int_mult} } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  {target { {! {vect_strided_wide}} && vect_int_mult } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\"  {target  { ! vect_int_mult } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" {target { vect_strided && vect_int_mult } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" {target { {! {vect_strided}} && vect_int_mult } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" {target { vect_strided_wide && vect_int_mult } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" {target { {! {vect_strided_wide}} && vect_int_mult } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" {target  { ! vect_int_mult } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n   "}, {"sha": "7b65dfcfe35e1b099e46a860ec06f29559742660", "filename": "gcc/testsuite/gcc.dg/vect/slp-12b.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-12b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-12b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-12b.c?ref=ba63dfb91874f08aa311b014c6c40b5007837d94", "patch": "@@ -43,9 +43,9 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  {target { vect_strided && vect_int_mult } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\"  {target { { ! { vect_int_mult }} || { ! {vect_strided}}} } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\"  {target { vect_strided && vect_int_mult } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\"  {target { { ! { vect_int_mult }} || { ! {vect_strided}}} } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  {target { vect_strided_wide && vect_int_mult } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\"  {target { { ! { vect_int_mult }} || { ! {vect_strided_wide}}} } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\"  {target { vect_strided_wide && vect_int_mult } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\"  {target { { ! { vect_int_mult }} || { ! {vect_strided_wide}}} } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n   "}, {"sha": "1133df4f4e61b8139eae332e9b515821ad081041", "filename": "gcc/testsuite/gcc.dg/vect/slp-19.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-19.c?ref=ba63dfb91874f08aa311b014c6c40b5007837d94", "patch": "@@ -147,9 +147,9 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { target  vect_strided  } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target  { ! { vect_strided } } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\"  { target  vect_strided  } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\"  { target { ! { vect_strided } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { target  vect_strided_wide  } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target  { ! { vect_strided_wide } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\"  { target  vect_strided_wide  } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\"  { target { ! { vect_strided_wide } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n   "}, {"sha": "27ec12587f4a4bfdee3a169050116732d960d851", "filename": "gcc/testsuite/gcc.dg/vect/slp-23.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-23.c?ref=ba63dfb91874f08aa311b014c6c40b5007837d94", "patch": "@@ -106,8 +106,8 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target { vect_strided } && {! { vect_no_align} } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { ! { vect_strided || vect_no_align} } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target { vect_strided_wide } && {! { vect_no_align} } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { ! { vect_strided_wide || vect_no_align} } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { xfail vect_no_align } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n   "}, {"sha": "57e9e5df55f471ea9d951b9ca3b2d6588519cdf8", "filename": "gcc/testsuite/gcc.dg/vect/slp-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-5.c?ref=ba63dfb91874f08aa311b014c6c40b5007837d94", "patch": "@@ -121,8 +121,8 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { target { vect_strided } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target  { ! { vect_strided } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { target { vect_strided_wide } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target  { ! { vect_strided_wide } } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\"  } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n   "}, {"sha": "7a570541c7366fe0aaedc2f4adc9b9e420e89617", "filename": "gcc/testsuite/gcc.dg/vect/vect-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-1.c?ref=ba63dfb91874f08aa311b014c6c40b5007837d94", "patch": "@@ -86,6 +86,6 @@ foo (int n)\n   fbar (a);\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 4 loops\" 1 \"vect\" { target vect_extract_even_odd } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { xfail vect_extract_even_odd } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 4 loops\" 1 \"vect\" { target vect_extract_even_odd_wide } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { xfail vect_extract_even_odd_wide } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "514fc362068275023b2940594f24060650bae0dc", "filename": "gcc/testsuite/gcc.dg/vect/vect-107.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-107.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-107.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-107.c?ref=ba63dfb91874f08aa311b014c6c40b5007837d94", "patch": "@@ -39,6 +39,6 @@ int main (void)\n   return main1 ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_extract_even_odd } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" { xfail vect_extract_even_odd } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_extract_even_odd_wide } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" { xfail vect_extract_even_odd_wide } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "118f28fd33434124b7bb6f580f38d835bfbb94be", "filename": "gcc/testsuite/gcc.dg/vect/vect-98.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-98.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-98.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-98.c?ref=ba63dfb91874f08aa311b014c6c40b5007837d94", "patch": "@@ -38,6 +38,6 @@ int main (void)\n }\n \n /* Needs interleaving support.  */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_interleave && vect_extract_even_odd } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { xfail  { vect_interleave && vect_extract_even_odd } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_interleave && vect_extract_even_odd_wide } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { xfail  { vect_interleave && vect_extract_even_odd_wide } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "2417f2acd3990e6eb9ef59e54ba3c211f06fbf7a", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-float.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-float.c?ref=ba63dfb91874f08aa311b014c6c40b5007837d94", "patch": "@@ -38,7 +38,7 @@ int main (void)\n }\n \n /* Needs interleaving support.  */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_interleave && vect_extract_even_odd } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" { xfail { vect_interleave && vect_extract_even_odd } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_interleave && vect_extract_even_odd_wide } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" { xfail { vect_interleave && vect_extract_even_odd_wide } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n   "}, {"sha": "d82829e20584eb72e482d683e07c13c8900f6c55", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba63dfb91874f08aa311b014c6c40b5007837d94/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=ba63dfb91874f08aa311b014c6c40b5007837d94", "patch": "@@ -2078,6 +2078,27 @@ proc check_effective_target_vect_extract_even_odd { } {\n     return $et_vect_extract_even_odd_saved\n }\n \n+# Return 1 if the target supports vector even/odd elements extraction of\n+# vectors with SImode elements or larger, 0 otherwise.\n+\n+proc check_effective_target_vect_extract_even_odd_wide { } {\n+    global et_vect_extract_even_odd_wide_saved\n+    \n+    if [info exists et_vect_extract_even_odd_wide_saved] {\n+        verbose \"check_effective_target_vect_extract_even_odd_wide: using cached result\" 2\n+    } else {\n+        set et_vect_extract_even_odd_wide_saved 0 \n+        if { [istarget powerpc*-*-*] \n+             || [istarget i?86-*-*]\n+             || [istarget x86_64-*-*] } {\n+           set et_vect_extract_even_odd_wide_saved 1\n+        }\n+    }\n+\n+    verbose \"check_effective_target_vect_extract_even_wide_odd: returning $et_vect_extract_even_odd_wide_saved\" 2\n+    return $et_vect_extract_even_odd_wide_saved\n+}\n+\n # Return 1 if the target supports vector interleaving, 0 otherwise.\n \n proc check_effective_target_vect_interleave { } {\n@@ -2116,6 +2137,25 @@ proc check_effective_target_vect_strided { } {\n     return $et_vect_strided_saved\n }\n \n+# Return 1 if the target supports vector interleaving and extract even/odd\n+# for wide element types, 0 otherwise.\n+proc check_effective_target_vect_strided_wide { } {\n+    global et_vect_strided_wide_saved\n+\n+    if [info exists et_vect_strided_wide_saved] {\n+        verbose \"check_effective_target_vect_strided_wide: using cached result\" 2\n+    } else {\n+        set et_vect_strided_wide_saved 0\n+        if { [check_effective_target_vect_interleave]\n+             && [check_effective_target_vect_extract_even_odd_wide] } {\n+           set et_vect_strided_wide_saved 1\n+        }\n+    }\n+\n+    verbose \"check_effective_target_vect_strided_wide: returning $et_vect_strided_wide_saved\" 2\n+    return $et_vect_strided_wide_saved\n+}\n+\n # Return 1 if the target supports section-anchors\n \n proc check_effective_target_section_anchors { } {"}]}