{"sha": "97e242b0a71b4d685eca7514da77f8058adbda38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdlMjQyYjBhNzFiNGQ2ODVlY2E3NTE0ZGE3N2Y4MDU4YWRiZGEzOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-08-08T10:01:20Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-08-08T10:01:20Z"}, "message": "ia64-protos.h: Remove duplicates.\n\n\t* config/ia64/ia64-protos.h: Remove duplicates.  Update\n\tfor massive code rearrangements.\n\t* config/ia64/ia64.c (ia64_arpfs_regno): Remove.\n\t(ia64_rp_regno, ia64_fp_regno, ia64_input_regs): Remove.\n\t(ia64_local_regs, ia64_need_regstk): Remove.\n\t(ar_ccv_reg_operand): New.\n\t(ia64_gp_save_reg): New.\n\t(struct ia64_frame_info): Combine most of the size elements;\n\tadd new gr save elements.\n\t(find_gr_spill): New.\n\t(next_scratch_gr_reg): New.\n\t(mark_reg_gr_used_mask): New.\n\t(ia64_compute_frame_size): Rewrite.  Allocate special AR regs\n\tto GR backing store regs when possible.\n\t(ia64_initial_elimination_offset): New.\n\t(ia64_rap_fp_offset): Remove.\n\t(save_restore_insns): Remove.\n\t(setup_spill_pointers): New.\n\t(finish_spill_pointers): New.\n\t(spill_restore_mem): New.\n\t(do_spill, do_restore): New.\n\t(ia64_expand_prologue): Rewrite to use them.\n\t(ia64_expand_epilogue): Likewise.\n\t(ia64_direct_return): Update for current_frame_info changes.\n\t(ia64_function_prologue): Simplify .prologue emission.  Emit\n\t.spill when needed.\n\t(ia64_setup_incoming_varargs): Don't ever emit rtl.\n\t(ia64_dbx_register_number): New.\n\t(ia64_initialize_trampoline): New.\n\t(ia64_secondary_reload_class): Request GR_REGS for integer\n\tarithmetic destined for FR_REGS.\n\t(ia64_init_machine_status): Don't reset return_address_pointer_rtx.\n\t(ia64_mark_machine_status): Mark ia64_gp_save.\n\t(rws_access_regno): Rename from rws_access_reg; don't treat\n\tpredicates specially.\n\t(rws_access_reg): New.  Update all callers.\n\t(rtx_needs_barrier): Remove dead unspecs.\n\t(ia64_epilogue_uses): Mark ar.pfs and ar.unat live on exit.\n\t(ia64_encode_section_info): Silence signed/unsigned warnings.\n\t(spill_offset, sp_offset, spill_offset_emitted): Remove.\n\t(tmp_reg, tmp_saved): Remove.\n\t(process_set): Rewrite to expect complicated bits via\n\tREG_FRAME_RELATED_EXPR.\n\t(ia64_expand_fetch_and_op): Use emit_move_insn; be explicit\n\tin the use of ar.ccv; never set RTX_UNCHANGING_P.\n\t(ia64_expand_op_and_fetch): Likewise.\n\t(ia64_expand_compare_and_swap): Likewise.\n\t(ia64_expand_builtin): Likewise.\n\t* config/ia64/ia64.h (AR_UNAT_REGNUM): New.\n\t(FIRST_PSEUDO_REGISTER): Update.\n\t(AR_M_REGNO_P): Update.\n\t(FIXED_REGS): Don't mark three local registers as used.\n\t(EXTRA_CC_MODES): New.\n\t(SELECT_CC_MODE): New.\n\t(HARD_REGNO_NREGS): Allow DImode in p0; handle CCImode.\n\t(HARD_REGNO_MODE_OK): Disallow CCImode from non-predicates.\n\t(FRAME_GROWS_DOWNWARD): Unset.\n\t(STARTING_FRAME_OFFSET): Zero.\n\t(ELIMINABLE_REGS): Eliminate from the soft to hard frame pointer.\n\t(INITIAL_ELIMINATION_OFFSET): Defer to out of line function.\n\t(HARD_FRAME_POINTER_REGNUM): New.\n\t(CAN_DEBUG_WITHOUT_FP): Define.\n\t(TRAMPOLINE_TEMPLATE): Remove.\n\t(TRAMPOLINE_SIZE): Lower to 32.\n\t(TRAMPOLINE_ALIGNMENT): Lower to 64.\n\t(INITIALIZE_TRAMPOLINE): Defer to out of line function.\n\t(PREDICATE_CODES): Update.\n\t(struct machine_function): Add ia64_gp_save.\n\t* config/ia64/ia64.md: Purge unused unspecs.\n\t(movsi patterns): Allow moves to/from AR_M_REGS.\n\t(movdi patterns): Allow moves to/from p0.\n\t(call patterns): Move most setjmp hackery to ia64_gp_save_reg.\n\t(gr_spill, gr_restore): Indicate ar.unat read/written.\n\t(nonlocal_goto): Don't pass old frame_pointer.\n\t(nonlocal_goto_receiver): Remove.\n\t(exception_receiver): New.\n\t(builtin_setjmp_setup): New.\n\t(builtin_setjmp_receiver): New.\n\t* config/ia64/lib1funcs.asm (__ia64_save_stack_nonlocal): Bundle.\n\t(__ia64_nonlocal_goto): Bundle.  Don't kill r7.\n\t(__ia64_restore_stack_nonlocal): Likewise.\n\t(__ia64_trampoline): New.\n\t* config/ia64/sysv4.h (DBX_REGISTER_NUMBER): Defer to out of line\n\tfunction.\n\t* config/ia64/t-ia64 (LIB1ASMFUNCS): Add __trampoline.\n\nFrom-SVN: r35568", "tree": {"sha": "ca9a43937db65474f1136387583019119d84cb8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca9a43937db65474f1136387583019119d84cb8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97e242b0a71b4d685eca7514da77f8058adbda38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97e242b0a71b4d685eca7514da77f8058adbda38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97e242b0a71b4d685eca7514da77f8058adbda38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97e242b0a71b4d685eca7514da77f8058adbda38/comments", "author": null, "committer": null, "parents": [{"sha": "ee7152458a296830fe58623fc952d5139b9e56a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee7152458a296830fe58623fc952d5139b9e56a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee7152458a296830fe58623fc952d5139b9e56a1"}], "stats": {"total": 3646, "additions": 2134, "deletions": 1512}, "files": [{"sha": "6364b1cd10b1a2d8bc774743775cedf5818dc217", "filename": "gcc/ChangeLog", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e242b0a71b4d685eca7514da77f8058adbda38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e242b0a71b4d685eca7514da77f8058adbda38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97e242b0a71b4d685eca7514da77f8058adbda38", "patch": "@@ -1,3 +1,91 @@\n+2000-08-08  Richard Henderson  <rth@cygnus.com>\n+\n+\t* config/ia64/ia64-protos.h: Remove duplicates.  Update\n+\tfor massive code rearrangements.\n+\t* config/ia64/ia64.c (ia64_arpfs_regno): Remove.\n+\t(ia64_rp_regno, ia64_fp_regno, ia64_input_regs): Remove.\n+\t(ia64_local_regs, ia64_need_regstk): Remove.\n+\t(ar_ccv_reg_operand): New.\n+\t(ia64_gp_save_reg): New.\n+\t(struct ia64_frame_info): Combine most of the size elements;\n+\tadd new gr save elements.\n+\t(find_gr_spill): New.\n+\t(next_scratch_gr_reg): New.\n+\t(mark_reg_gr_used_mask): New.\n+\t(ia64_compute_frame_size): Rewrite.  Allocate special AR regs\n+\tto GR backing store regs when possible.\n+\t(ia64_initial_elimination_offset): New.\n+\t(ia64_rap_fp_offset): Remove.\n+\t(save_restore_insns): Remove.\n+\t(setup_spill_pointers): New.\n+\t(finish_spill_pointers): New.\n+\t(spill_restore_mem): New.\n+\t(do_spill, do_restore): New.\n+\t(ia64_expand_prologue): Rewrite to use them.\n+\t(ia64_expand_epilogue): Likewise.\n+\t(ia64_direct_return): Update for current_frame_info changes.\n+\t(ia64_function_prologue): Simplify .prologue emission.  Emit\n+\t.spill when needed.\n+\t(ia64_setup_incoming_varargs): Don't ever emit rtl.\n+\t(ia64_dbx_register_number): New.\n+\t(ia64_initialize_trampoline): New.\n+\t(ia64_secondary_reload_class): Request GR_REGS for integer\n+\tarithmetic destined for FR_REGS.\n+\t(ia64_init_machine_status): Don't reset return_address_pointer_rtx.\n+\t(ia64_mark_machine_status): Mark ia64_gp_save.\n+\t(rws_access_regno): Rename from rws_access_reg; don't treat\n+\tpredicates specially.\n+\t(rws_access_reg): New.  Update all callers.\n+\t(rtx_needs_barrier): Remove dead unspecs.\n+\t(ia64_epilogue_uses): Mark ar.pfs and ar.unat live on exit.\n+\t(ia64_encode_section_info): Silence signed/unsigned warnings.\n+\t(spill_offset, sp_offset, spill_offset_emitted): Remove.\n+\t(tmp_reg, tmp_saved): Remove.\n+\t(process_set): Rewrite to expect complicated bits via \n+\tREG_FRAME_RELATED_EXPR.\n+\t(ia64_expand_fetch_and_op): Use emit_move_insn; be explicit\n+\tin the use of ar.ccv; never set RTX_UNCHANGING_P.\n+\t(ia64_expand_op_and_fetch): Likewise.\n+\t(ia64_expand_compare_and_swap): Likewise.\n+\t(ia64_expand_builtin): Likewise.\n+\t* config/ia64/ia64.h (AR_UNAT_REGNUM): New.\n+\t(FIRST_PSEUDO_REGISTER): Update.\n+\t(AR_M_REGNO_P): Update.\n+\t(FIXED_REGS): Don't mark three local registers as used.\n+\t(EXTRA_CC_MODES): New.\n+\t(SELECT_CC_MODE): New.\n+\t(HARD_REGNO_NREGS): Allow DImode in p0; handle CCImode.\n+\t(HARD_REGNO_MODE_OK): Disallow CCImode from non-predicates.\n+\t(FRAME_GROWS_DOWNWARD): Unset.\n+\t(STARTING_FRAME_OFFSET): Zero.\n+\t(ELIMINABLE_REGS): Eliminate from the soft to hard frame pointer.\n+\t(INITIAL_ELIMINATION_OFFSET): Defer to out of line function.\n+\t(HARD_FRAME_POINTER_REGNUM): New.\n+\t(CAN_DEBUG_WITHOUT_FP): Define.\n+\t(TRAMPOLINE_TEMPLATE): Remove.\n+\t(TRAMPOLINE_SIZE): Lower to 32.\n+\t(TRAMPOLINE_ALIGNMENT): Lower to 64.\n+\t(INITIALIZE_TRAMPOLINE): Defer to out of line function.\n+\t(PREDICATE_CODES): Update.\n+\t(struct machine_function): Add ia64_gp_save.\n+\t* config/ia64/ia64.md: Purge unused unspecs.\n+\t(movsi patterns): Allow moves to/from AR_M_REGS.\n+\t(movdi patterns): Allow moves to/from p0.\n+\t(call patterns): Move most setjmp hackery to ia64_gp_save_reg.\n+\t(gr_spill, gr_restore): Indicate ar.unat read/written.\n+\t(nonlocal_goto): Don't pass old frame_pointer.\n+\t(nonlocal_goto_receiver): Remove.\n+\t(exception_receiver): New.\n+\t(builtin_setjmp_setup): New.\n+\t(builtin_setjmp_receiver): New.\n+\t* config/ia64/lib1funcs.asm (__ia64_save_stack_nonlocal): Bundle.\n+\t(__ia64_nonlocal_goto): Bundle.  Don't kill r7.\n+\t(__ia64_restore_stack_nonlocal): Likewise.\n+\t(__ia64_trampoline): New.\n+\t* config/ia64/sysv4.h (DBX_REGISTER_NUMBER): Defer to out of line\n+\tfunction.\n+\t* config/ia64/t-ia64 (LIB1ASMFUNCS): Add __trampoline.\n+\n 2000-08-08  Richard Henderson  <rth@cygnus.com>\n \n \t* frame.h (ia64_frame_state): Add my_psp."}, {"sha": "30f1d61089a1c28894f31bf62c90d6f7b4bad58a", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e242b0a71b4d685eca7514da77f8058adbda38/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e242b0a71b4d685eca7514da77f8058adbda38/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=97e242b0a71b4d685eca7514da77f8058adbda38", "patch": "@@ -50,25 +50,26 @@ extern int normal_comparison_operator PARAMS((rtx, enum machine_mode));\n extern int adjusted_comparison_operator PARAMS((rtx, enum machine_mode));\n extern int call_multiple_values_operation PARAMS((rtx, enum machine_mode));\n extern int destination_operand PARAMS((rtx, enum machine_mode));\n-extern int ia64_rap_fp_offset PARAMS((void));\n-extern unsigned int ia64_compute_frame_size PARAMS((int));\n-extern void save_restore_insns PARAMS((int));\n+extern HOST_WIDE_INT ia64_initial_elimination_offset PARAMS((int, int));\n extern void ia64_expand_prologue PARAMS((void));\n extern void ia64_expand_epilogue PARAMS((void));\n extern void ia64_function_prologue PARAMS((FILE *, int));\n-extern void ia64_funtion_epilogue PARAMS((FILE *, int));\n+extern void ia64_function_epilogue PARAMS((FILE *, int));\n extern int ia64_direct_return PARAMS((void));\n extern int predicate_operator PARAMS((rtx, enum machine_mode));\n extern int ar_lc_reg_operand PARAMS((rtx, enum machine_mode));\n+extern int ar_ccv_reg_operand PARAMS((rtx, enum machine_mode));\n \n extern int ia64_move_ok PARAMS((rtx, rtx));\n+extern rtx ia64_gp_save_reg PARAMS((int));\n \n extern void ia64_expand_load_address PARAMS((rtx, rtx));\n extern void ia64_expand_fetch_and_op PARAMS ((enum fetchop_code,\n \t\t\t\t\t      enum machine_mode, rtx []));\n extern void ia64_expand_op_and_fetch PARAMS ((enum fetchop_code,\n \t\t\t\t\t      enum machine_mode, rtx []));\n \n+extern void ia64_initialize_trampoline PARAMS((rtx, rtx, rtx));\n extern void ia64_print_operand_address PARAMS((FILE *, rtx));\n extern void ia64_print_operand PARAMS((FILE *, rtx, int));\n extern enum reg_class ia64_secondary_reload_class PARAMS((enum reg_class,\n@@ -107,17 +108,10 @@ extern void ia64_encode_section_info PARAMS((tree));\n extern int ia64_register_move_cost PARAMS((enum reg_class, enum reg_class));\n extern int ia64_epilogue_uses PARAMS((int));\n extern void ia64_file_start PARAMS((FILE *));\n-extern void ia64_expand_prologue PARAMS((void));\n-extern void ia64_expand_epilogue PARAMS((void));\n-extern void ia64_function_prologue PARAMS((FILE *, int));\n extern void ia64_output_end_prologue PARAMS((FILE *));\n-extern void ia64_function_epilogue PARAMS((FILE *, int));\n-extern int ia64_direct_return PARAMS((void));\n-extern int ia64_rap_fp_offset PARAMS((void));\n extern void ia64_init_builtins PARAMS((void));\n extern void ia64_override_options PARAMS((void));\n-extern unsigned int ia64_compute_frame_size PARAMS((int));\n-extern void save_restore_insns PARAMS((int));\n+extern int ia64_dbx_register_number PARAMS((int));\n \n /* ??? Flag defined in toplev.c, for ia64.md -fssa hack.  */\n extern int flag_ssa;"}, {"sha": "bbce28d1060e723953cae606a93df07726f72911", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1543, "deletions": 884, "changes": 2427, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e242b0a71b4d685eca7514da77f8058adbda38/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e242b0a71b4d685eca7514da77f8058adbda38/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=97e242b0a71b4d685eca7514da77f8058adbda38"}, {"sha": "23a27b85e78152ba31c730ffbd49dca6afc5a2ce", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 148, "deletions": 253, "changes": 401, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e242b0a71b4d685eca7514da77f8058adbda38/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e242b0a71b4d685eca7514da77f8058adbda38/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=97e242b0a71b4d685eca7514da77f8058adbda38", "patch": "@@ -20,19 +20,12 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* ??? Use of the upper 32 FP registers for integer values will make context\n-   switching slower, because the kernel only saves any registers past f32 if\n-   it has to.  */\n-\n /* ??? Look at ABI group documents for list of preprocessor macros and\n    other features required for ABI compliance.  */\n \n /* ??? Functions containing a non-local goto target save many registers.  Why?\n    See for instance execute/920428-2.c.  */\n \n-/* ??? Get CAN_DEBUG_WITHOUT_FP working so that -fomit-frame-pointer is not\n-   needed.  */\n-\n /* ??? Add support for short data/bss sections.  */\n \n \f\n@@ -178,13 +171,6 @@ extern const char *ia64_fixed_range_string;\n    default values for the other command line options.  */\n \n /* #define OPTIMIZATION_OPTIONS(LEVEL,SIZE) */\n-\n-/* Define this macro if debugging can be performed even without a frame\n-   pointer.  If this macro is defined, GNU CC will turn on the\n-   `-fomit-frame-pointer' option whenever `-O' is specified.  */\n-/* ??? Need to define this.  */\n-/* #define CAN_DEBUG_WITHOUT_FP */\n-\n \f\n /* Driver configuration */\n \n@@ -539,7 +525,7 @@ while (0)\n    64 predicate registers, 8 branch registers, one frame pointer,\n    and several \"application\" registers.  */\n \n-#define FIRST_PSEUDO_REGISTER 334\n+#define FIRST_PSEUDO_REGISTER 335\n \n /* Ranges for the various kinds of registers.  */\n #define ADDL_REGNO_P(REGNO) ((unsigned HOST_WIDE_INT) (REGNO) <= 3)\n@@ -561,22 +547,23 @@ while (0)\n #define LOC_REG(REGNO) ((REGNO) + 32)\n \n #define AR_CCV_REGNUM\t330\n-#define AR_LC_REGNUM\t331\n-#define AR_EC_REGNUM\t332\n-#define AR_PFS_REGNUM\t333\n+#define AR_UNAT_REGNUM  331\n+#define AR_PFS_REGNUM\t332\n+#define AR_LC_REGNUM\t333\n+#define AR_EC_REGNUM\t334\n \n #define IN_REGNO_P(REGNO) ((REGNO) >= IN_REG (0) && (REGNO) <= IN_REG (7))\n #define LOC_REGNO_P(REGNO) ((REGNO) >= LOC_REG (0) && (REGNO) <= LOC_REG (79))\n #define OUT_REGNO_P(REGNO) ((REGNO) >= OUT_REG (0) && (REGNO) <= OUT_REG (7))\n \n-#define AR_M_REGNO_P(REGNO) ((REGNO) == AR_CCV_REGNUM)\n-#define AR_I_REGNO_P(REGNO) ((REGNO) >= AR_LC_REGNUM \\\n+#define AR_M_REGNO_P(REGNO) ((REGNO) == AR_CCV_REGNUM \\\n+\t\t\t     || (REGNO) == AR_UNAT_REGNUM)\n+#define AR_I_REGNO_P(REGNO) ((REGNO) >= AR_PFS_REGNUM \\\n \t\t\t     && (REGNO) < FIRST_PSEUDO_REGISTER)\n #define AR_REGNO_P(REGNO) ((REGNO) >= AR_CCV_REGNUM \\\n \t\t\t   && (REGNO) < FIRST_PSEUDO_REGISTER)\n \n \n-\n /* ??? Don't really need two sets of macros.  I like this one better because\n    it is less typing.  */\n #define R_GR(REGNO) GR_REG (REGNO)\n@@ -600,11 +587,6 @@ while (0)\n /* The last 16 stacked regs are reserved for the 8 input and 8 output\n    registers.  */\n \n-/* ??? Must mark the next 3 stacked regs as fixed, because ia64_expand_prologue\n-   assumes that three locals are available for fp, b0, and ar.pfs.  */\n-\n-/* ??? Should mark b0 as fixed?  */\n-\n #define FIXED_REGISTERS \\\n { /* General registers.  */\t\t\t\t\\\n   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,\t\\\n@@ -613,7 +595,7 @@ while (0)\n   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n-  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,\t\\\n+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n   /* Floating-point registers.  */\t\t\t\\\n   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n@@ -631,8 +613,8 @@ while (0)\n   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n   /* Branch registers.  */\t\t\t\t\\\n   0, 0, 0, 0, 0, 0, 0, 0,\t\t\t\t\\\n-  /*FP RA CCV LC EC PFS */\t\t\t\t\\\n-     1, 1,  1, 1, 1,  1\t\t\t\t\t\\\n+  /*FP RA CCV UNAT PFS LC EC */\t\t\t\t\\\n+     1, 1,  1,   1,  1, 0, 1\t\t\t\t\\\n  }\n \n /* Like `FIXED_REGISTERS' but has 1 for each register that is clobbered\n@@ -648,7 +630,7 @@ while (0)\n   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n-  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,\t\\\n+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n   /* Floating-point registers.  */\t\t\t\\\n   1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n@@ -666,8 +648,8 @@ while (0)\n   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n   /* Branch registers.  */\t\t\t\t\\\n   1, 0, 0, 0, 0, 0, 1, 1,\t\t\t\t\\\n-  /*FP RA CCV LC EC PFS */\t\t\t\t\\\n-     1, 1,  1, 1, 1,  1\t\t\t\t\t\\\n+  /*FP RA CCV UNAT PFS LC EC */\t\t\t\t\\\n+     1, 1,  1,   1,  1, 0, 1\t\t\t\t\\\n }\n \n /* Define this macro if the target machine has register windows.  This C\n@@ -692,6 +674,20 @@ while (0)\n \n #define LOCAL_REGNO(REGNO) \\\n   (IN_REGNO_P (REGNO) || LOC_REGNO_P (REGNO))\n+\n+/* Add any extra modes needed to represent the condition code.\n+\n+   CCImode is used to mark a single predicate register instead\n+   of a register pair.  This is currently only used in reg_raw_mode\n+   so that flow doesn't do something stupid.  */\n+\n+#define EXTRA_CC_MODES\t\tCC(CCImode, \"CCI\")\n+\n+/* Given a comparison code (EQ, NE, etc.) and the first operand of a COMPARE,\n+   return the mode to be used for the comparison.  Must be defined if\n+   EXTRA_CC_MODES is defined.  */\n+\n+#define SELECT_CC_MODE(OP,X,Y)  CCmode\n \f\n /* Order of allocation of registers */\n \n@@ -711,72 +707,72 @@ while (0)\n /* ??? Should the GR return value registers come before or after the rest\n    of the caller-save GRs?  */\n \n-#define REG_ALLOC_ORDER \\\n+#define REG_ALLOC_ORDER\t\t\t\t\t\t\t   \\\n {\t\t\t\t\t\t\t\t\t   \\\n   /* Caller-saved general registers.  */\t\t\t\t   \\\n-  R_GR (14), R_GR (15), R_GR (16), R_GR (17), \t\t\t\t   \\\n-  R_GR (18), R_GR (19), R_GR (20), R_GR (21), R_GR (22), R_GR (23), \t   \\\n-  R_GR (24), R_GR (25), R_GR (26), R_GR (27), R_GR (28), R_GR (29), \t   \\\n+  R_GR (14), R_GR (15), R_GR (16), R_GR (17),\t\t\t\t   \\\n+  R_GR (18), R_GR (19), R_GR (20), R_GR (21), R_GR (22), R_GR (23),\t   \\\n+  R_GR (24), R_GR (25), R_GR (26), R_GR (27), R_GR (28), R_GR (29),\t   \\\n   R_GR (30), R_GR (31),\t\t\t\t\t\t\t   \\\n   /* Output registers.  */\t\t\t\t\t\t   \\\n   R_GR (120), R_GR (121), R_GR (122), R_GR (123), R_GR (124), R_GR (125),  \\\n-  R_GR (126), R_GR (127), \t\t\t\t\t\t   \\\n+  R_GR (126), R_GR (127),\t\t\t\t\t\t   \\\n   /* Caller-saved general registers, also used for return values.  */\t   \\\n-  R_GR (8), R_GR (9), R_GR (10), R_GR (11), \t\t\t\t   \\\n+  R_GR (8), R_GR (9), R_GR (10), R_GR (11),\t\t\t\t   \\\n   /* addl caller-saved general registers.  */\t\t\t\t   \\\n   R_GR (2), R_GR (3),\t\t\t\t\t\t\t   \\\n   /* Caller-saved FP registers.  */\t\t\t\t\t   \\\n   R_FR (6), R_FR (7),\t\t\t\t\t\t\t   \\\n   /* Caller-saved FP registers, used for parameters and return values.  */ \\\n-  R_FR (8), R_FR (9), R_FR (10), R_FR (11), \t\t\t\t   \\\n-  R_FR (12), R_FR (13), R_FR (14), R_FR (15), \t\t\t\t   \\\n+  R_FR (8), R_FR (9), R_FR (10), R_FR (11),\t\t\t\t   \\\n+  R_FR (12), R_FR (13), R_FR (14), R_FR (15),\t\t\t\t   \\\n   /* Rotating caller-saved FP registers.  */\t\t\t\t   \\\n-  R_FR (32), R_FR (33), R_FR (34), R_FR (35), \t\t\t\t   \\\n-  R_FR (36), R_FR (37), R_FR (38), R_FR (39), R_FR (40), R_FR (41), \t   \\\n-  R_FR (42), R_FR (43), R_FR (44), R_FR (45), R_FR (46), R_FR (47), \t   \\\n-  R_FR (48), R_FR (49), R_FR (50), R_FR (51), R_FR (52), R_FR (53), \t   \\\n-  R_FR (54), R_FR (55), R_FR (56), R_FR (57), R_FR (58), R_FR (59), \t   \\\n-  R_FR (60), R_FR (61), R_FR (62), R_FR (63), R_FR (64), R_FR (65), \t   \\\n-  R_FR (66), R_FR (67), R_FR (68), R_FR (69), R_FR (70), R_FR (71), \t   \\\n-  R_FR (72), R_FR (73), R_FR (74), R_FR (75), R_FR (76), R_FR (77), \t   \\\n-  R_FR (78), R_FR (79), R_FR (80), R_FR (81), R_FR (82), R_FR (83), \t   \\\n-  R_FR (84), R_FR (85), R_FR (86), R_FR (87), R_FR (88), R_FR (89), \t   \\\n-  R_FR (90), R_FR (91), R_FR (92), R_FR (93), R_FR (94), R_FR (95), \t   \\\n-  R_FR (96), R_FR (97), R_FR (98), R_FR (99), R_FR (100), R_FR (101), \t   \\\n+  R_FR (32), R_FR (33), R_FR (34), R_FR (35),\t\t\t\t   \\\n+  R_FR (36), R_FR (37), R_FR (38), R_FR (39), R_FR (40), R_FR (41),\t   \\\n+  R_FR (42), R_FR (43), R_FR (44), R_FR (45), R_FR (46), R_FR (47),\t   \\\n+  R_FR (48), R_FR (49), R_FR (50), R_FR (51), R_FR (52), R_FR (53),\t   \\\n+  R_FR (54), R_FR (55), R_FR (56), R_FR (57), R_FR (58), R_FR (59),\t   \\\n+  R_FR (60), R_FR (61), R_FR (62), R_FR (63), R_FR (64), R_FR (65),\t   \\\n+  R_FR (66), R_FR (67), R_FR (68), R_FR (69), R_FR (70), R_FR (71),\t   \\\n+  R_FR (72), R_FR (73), R_FR (74), R_FR (75), R_FR (76), R_FR (77),\t   \\\n+  R_FR (78), R_FR (79), R_FR (80), R_FR (81), R_FR (82), R_FR (83),\t   \\\n+  R_FR (84), R_FR (85), R_FR (86), R_FR (87), R_FR (88), R_FR (89),\t   \\\n+  R_FR (90), R_FR (91), R_FR (92), R_FR (93), R_FR (94), R_FR (95),\t   \\\n+  R_FR (96), R_FR (97), R_FR (98), R_FR (99), R_FR (100), R_FR (101),\t   \\\n   R_FR (102), R_FR (103), R_FR (104), R_FR (105), R_FR (106), R_FR (107),  \\\n   R_FR (108), R_FR (109), R_FR (110), R_FR (111), R_FR (112), R_FR (113),  \\\n   R_FR (114), R_FR (115), R_FR (116), R_FR (117), R_FR (118), R_FR (119),  \\\n   R_FR (120), R_FR (121), R_FR (122), R_FR (123), R_FR (124), R_FR (125),  \\\n-  R_FR (126), R_FR (127), \t\t\t\t\t\t   \\\n+  R_FR (126), R_FR (127),\t\t\t\t\t\t   \\\n   /* Caller-saved predicate registers.  */\t\t\t\t   \\\n-  R_PR (6), R_PR (7), R_PR (8), R_PR (9), R_PR (10), R_PR (11), \t   \\\n+  R_PR (6), R_PR (7), R_PR (8), R_PR (9), R_PR (10), R_PR (11),\t\t   \\\n   R_PR (12), R_PR (13), R_PR (14), R_PR (15),\t\t\t\t   \\\n   /* Rotating caller-saved predicate registers.  */\t\t\t   \\\n-  R_PR (16), R_PR (17), \t\t\t\t\t\t   \\\n-  R_PR (18), R_PR (19), R_PR (20), R_PR (21), R_PR (22), R_PR (23), \t   \\\n-  R_PR (24), R_PR (25), R_PR (26), R_PR (27), R_PR (28), R_PR (29), \t   \\\n-  R_PR (30), R_PR (31), R_PR (32), R_PR (33), R_PR (34), R_PR (35), \t   \\\n-  R_PR (36), R_PR (37), R_PR (38), R_PR (39), R_PR (40), R_PR (41), \t   \\\n-  R_PR (42), R_PR (43), R_PR (44), R_PR (45), R_PR (46), R_PR (47), \t   \\\n-  R_PR (48), R_PR (49), R_PR (50), R_PR (51), R_PR (52), R_PR (53), \t   \\\n-  R_PR (54), R_PR (55), R_PR (56), R_PR (57), R_PR (58), R_PR (59), \t   \\\n-  R_PR (60), R_PR (61), R_PR (62), R_PR (63), \t\t\t\t   \\\n+  R_PR (16), R_PR (17),\t\t\t\t\t\t\t   \\\n+  R_PR (18), R_PR (19), R_PR (20), R_PR (21), R_PR (22), R_PR (23),\t   \\\n+  R_PR (24), R_PR (25), R_PR (26), R_PR (27), R_PR (28), R_PR (29),\t   \\\n+  R_PR (30), R_PR (31), R_PR (32), R_PR (33), R_PR (34), R_PR (35),\t   \\\n+  R_PR (36), R_PR (37), R_PR (38), R_PR (39), R_PR (40), R_PR (41),\t   \\\n+  R_PR (42), R_PR (43), R_PR (44), R_PR (45), R_PR (46), R_PR (47),\t   \\\n+  R_PR (48), R_PR (49), R_PR (50), R_PR (51), R_PR (52), R_PR (53),\t   \\\n+  R_PR (54), R_PR (55), R_PR (56), R_PR (57), R_PR (58), R_PR (59),\t   \\\n+  R_PR (60), R_PR (61), R_PR (62), R_PR (63),\t\t\t\t   \\\n   /* Caller-saved branch registers.  */\t\t\t\t\t   \\\n   R_BR (6), R_BR (7),\t\t\t\t\t\t\t   \\\n \t\t\t\t\t\t\t\t\t   \\\n   /* Stacked callee-saved general registers.  */\t\t\t   \\\n-  R_GR (32), R_GR (33), R_GR (34), R_GR (35), \t\t\t\t   \\\n-  R_GR (36), R_GR (37), R_GR (38), R_GR (39), R_GR (40), R_GR (41), \t   \\\n-  R_GR (42), R_GR (43), R_GR (44), R_GR (45), R_GR (46), R_GR (47), \t   \\\n-  R_GR (48), R_GR (49), R_GR (50), R_GR (51), R_GR (52), R_GR (53), \t   \\\n-  R_GR (54), R_GR (55), R_GR (56), R_GR (57), R_GR (58), R_GR (59), \t   \\\n-  R_GR (60), R_GR (61), R_GR (62), R_GR (63), R_GR (64), R_GR (65), \t   \\\n-  R_GR (66), R_GR (67), R_GR (68), R_GR (69), R_GR (70), R_GR (71), \t   \\\n-  R_GR (72), R_GR (73), R_GR (74), R_GR (75), R_GR (76), R_GR (77), \t   \\\n-  R_GR (78), R_GR (79), R_GR (80), R_GR (81), R_GR (82), R_GR (83), \t   \\\n-  R_GR (84), R_GR (85), R_GR (86), R_GR (87), R_GR (88), R_GR (89), \t   \\\n-  R_GR (90), R_GR (91), R_GR (92), R_GR (93), R_GR (94), R_GR (95), \t   \\\n-  R_GR (96), R_GR (97), R_GR (98), R_GR (99), R_GR (100), R_GR (101), \t   \\\n+  R_GR (32), R_GR (33), R_GR (34), R_GR (35),\t\t\t\t   \\\n+  R_GR (36), R_GR (37), R_GR (38), R_GR (39), R_GR (40), R_GR (41),\t   \\\n+  R_GR (42), R_GR (43), R_GR (44), R_GR (45), R_GR (46), R_GR (47),\t   \\\n+  R_GR (48), R_GR (49), R_GR (50), R_GR (51), R_GR (52), R_GR (53),\t   \\\n+  R_GR (54), R_GR (55), R_GR (56), R_GR (57), R_GR (58), R_GR (59),\t   \\\n+  R_GR (60), R_GR (61), R_GR (62), R_GR (63), R_GR (64), R_GR (65),\t   \\\n+  R_GR (66), R_GR (67), R_GR (68), R_GR (69), R_GR (70), R_GR (71),\t   \\\n+  R_GR (72), R_GR (73), R_GR (74), R_GR (75), R_GR (76), R_GR (77),\t   \\\n+  R_GR (78), R_GR (79), R_GR (80), R_GR (81), R_GR (82), R_GR (83),\t   \\\n+  R_GR (84), R_GR (85), R_GR (86), R_GR (87), R_GR (88), R_GR (89),\t   \\\n+  R_GR (90), R_GR (91), R_GR (92), R_GR (93), R_GR (94), R_GR (95),\t   \\\n+  R_GR (96), R_GR (97), R_GR (98), R_GR (99), R_GR (100), R_GR (101),\t   \\\n   R_GR (102), R_GR (103), R_GR (104), R_GR (105), R_GR (106), R_GR (107),  \\\n   R_GR (108),\t\t\t\t\t\t\t\t   \\\n   /* Input registers.  */\t\t\t\t\t\t   \\\n@@ -785,20 +781,20 @@ while (0)\n   /* Callee-saved general registers.  */\t\t\t\t   \\\n   R_GR (4), R_GR (5), R_GR (6), R_GR (7),\t\t\t\t   \\\n   /* Callee-saved FP registers.  */\t\t\t\t\t   \\\n-  R_FR (2), R_FR (3), R_FR (4), R_FR (5), R_FR (16), R_FR (17), \t   \\\n-  R_FR (18), R_FR (19), R_FR (20), R_FR (21), R_FR (22), R_FR (23), \t   \\\n-  R_FR (24), R_FR (25), R_FR (26), R_FR (27), R_FR (28), R_FR (29), \t   \\\n+  R_FR (2), R_FR (3), R_FR (4), R_FR (5), R_FR (16), R_FR (17),\t\t   \\\n+  R_FR (18), R_FR (19), R_FR (20), R_FR (21), R_FR (22), R_FR (23),\t   \\\n+  R_FR (24), R_FR (25), R_FR (26), R_FR (27), R_FR (28), R_FR (29),\t   \\\n   R_FR (30), R_FR (31),\t\t\t\t\t\t\t   \\\n   /* Callee-saved predicate registers.  */\t\t\t\t   \\\n-  R_PR (1), R_PR (2), R_PR (3), R_PR (4), R_PR (5), \t\t\t   \\\n+  R_PR (1), R_PR (2), R_PR (3), R_PR (4), R_PR (5),\t\t\t   \\\n   /* Callee-saved branch registers.  */\t\t\t\t\t   \\\n   R_BR (1), R_BR (2), R_BR (3), R_BR (4), R_BR (5),\t\t\t   \\\n \t\t\t\t\t\t\t\t\t   \\\n   /* ??? Stacked registers reserved for fp, rp, and ar.pfs.  */\t\t   \\\n   R_GR (109), R_GR (110), R_GR (111),\t\t\t\t\t   \\\n \t\t\t\t\t\t\t\t\t   \\\n   /* Special general registers.  */\t\t\t\t\t   \\\n-  R_GR (0), R_GR (1), R_GR (12), R_GR (13), \t\t\t\t   \\\n+  R_GR (0), R_GR (1), R_GR (12), R_GR (13),\t\t\t\t   \\\n   /* Special FP registers.  */\t\t\t\t\t\t   \\\n   R_FR (0), R_FR (1),\t\t\t\t\t\t\t   \\\n   /* Special predicate registers.  */\t\t\t\t\t   \\\n@@ -807,7 +803,8 @@ while (0)\n   R_BR (0),\t\t\t\t\t\t\t\t   \\\n   /* Other fixed registers.  */\t\t\t\t\t\t   \\\n   FRAME_POINTER_REGNUM, RETURN_ADDRESS_POINTER_REGNUM,\t\t\t   \\\n-  AR_CCV_REGNUM, AR_LC_REGNUM, AR_EC_REGNUM, AR_PFS_REGNUM\t\t   \\\n+  AR_CCV_REGNUM, AR_UNAT_REGNUM, AR_PFS_REGNUM, AR_LC_REGNUM,\t\t   \\\n+  AR_EC_REGNUM\t\t  \t\t\t\t\t\t   \\\n }\n \f\n /* How Values Fit in Registers */\n@@ -817,11 +814,13 @@ while (0)\n \n /* ??? x86 80-bit FP values only require 1 register.  */\n /* ??? We say that CCmode values require two registers.  This allows us to\n-   easily store the normal and inverted values.  If we want single register\n-   predicates, we can use EXTRA_CC_MODES to give them a different mode.  */\n+   easily store the normal and inverted values.  We use CCImode to indicate\n+   a single predicate register.  */\n \n-#define HARD_REGNO_NREGS(REGNO, MODE) \\\n-  ((MODE) == CCmode && PR_REGNO_P (REGNO) ? 2\t\t\t\t\\\n+#define HARD_REGNO_NREGS(REGNO, MODE)\t\t\t\t\t\\\n+  ((REGNO) == PR_REG (0) && (MODE) == DImode ? 64\t\t\t\\\n+   : PR_REGNO_P (REGNO) && (MODE) == CCmode ? 2\t\t\t\t\\\n+   : PR_REGNO_P (REGNO) && (MODE) == CCImode ? 1\t\t\t\\\n    : FR_REGNO_P (REGNO) && (MODE) == XFmode ? 1\t\t\t\t\\\n    : (GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n@@ -830,9 +829,9 @@ while (0)\n    that one).  */\n \n #define HARD_REGNO_MODE_OK(REGNO, MODE) \\\n-  (FR_REGNO_P (REGNO) ? (MODE) != CCmode\t\t\t\t\\\n-   : PR_REGNO_P (REGNO) ? (MODE) == CCmode\t\t\t\t\\\n-   : GR_REGNO_P (REGNO) ? (MODE) != XFmode\t\t\t\t\\\n+  (FR_REGNO_P (REGNO) ? GET_MODE_CLASS (MODE) != MODE_CC\t\t\\\n+   : PR_REGNO_P (REGNO) ? GET_MODE_CLASS (MODE) == MODE_CC\t\t\\\n+   : GR_REGNO_P (REGNO) ? (MODE) != XFmode && (MODE) != CCImode\t\t\\\n    : AR_REGNO_P (REGNO) ? (MODE) == DImode\t\t\t\t\\\n    : 1)\n \n@@ -951,15 +950,15 @@ enum reg_class\n   /* AR_M_REGS.  */\t\t\t\t\t\\\n   { 0x00000000, 0x00000000, 0x00000000, 0x00000000,\t\\\n     0x00000000, 0x00000000, 0x00000000, 0x00000000,\t\\\n-    0x00000000, 0x00000000, 0x0400 },\t\t\t\\\n+    0x00000000, 0x00000000, 0x0C00 },\t\t\t\\\n   /* AR_I_REGS.  */\t\t\t\t\t\\\n   { 0x00000000, 0x00000000, 0x00000000, 0x00000000,\t\\\n     0x00000000, 0x00000000, 0x00000000, 0x00000000,\t\\\n-    0x00000000, 0x00000000, 0x3800 },\t\t\t\\\n+    0x00000000, 0x00000000, 0x7000 },\t\t\t\\\n   /* ALL_REGS.  */\t\t\t\t\t\\\n   { 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,\t\\\n     0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,\t\\\n-    0xFFFFFFFF, 0xFFFFFFFF, 0x3FFF },\t\t\t\\\n+    0xFFFFFFFF, 0xFFFFFFFF, 0x7FFF },\t\t\t\\\n }\n \n /* A C expression whose value is a register class containing hard register\n@@ -974,8 +973,8 @@ enum reg_class\n  : FR_REGNO_P (REGNO) ? FR_REGS\t\t\\\n  : PR_REGNO_P (REGNO) ? PR_REGS\t\t\\\n  : BR_REGNO_P (REGNO) ? BR_REGS\t\t\\\n- : AR_M_REGNO_P (REGNO) ? AR_I_REGS\t\\\n- : AR_I_REGNO_P (REGNO) ? AR_M_REGS\t\\\n+ : AR_M_REGNO_P (REGNO) ? AR_M_REGS\t\\\n+ : AR_I_REGNO_P (REGNO) ? AR_I_REGS\t\\\n  : NO_REGS)\n \n /* A macro whose definition is the name of the class to which a valid base\n@@ -1068,8 +1067,9 @@ enum reg_class\n \n #define CLASS_CANNOT_CHANGE_MODE_P(FROM,TO) 1\n \n-/* A C expression that defines the machine-dependent operand constraint letters\n-   (`I', `J', `K', .. 'P') that specify particular ranges of integer values.  */\n+/* A C expression that defines the machine-dependent operand constraint\n+   letters (`I', `J', `K', .. 'P') that specify particular ranges of\n+   integer values.  */\n \n /* 14 bit signed immediate for arithmetic instructions.  */\n #define CONST_OK_FOR_I(VALUE) \\\n@@ -1084,7 +1084,6 @@ enum reg_class\n /* 6 bit unsigned immediate for shift counts.  */\n #define CONST_OK_FOR_M(VALUE) ((unsigned HOST_WIDE_INT)(VALUE) < 0x40)\n /* 9 bit signed immediate for load/store post-increments.  */\n-/* ??? N is currently not used.  */\n #define CONST_OK_FOR_N(VALUE) ((unsigned HOST_WIDE_INT)(VALUE) + 0x100 < 0x200)\n /* 0 for r0.  Used by Linux kernel, do not change.  */\n #define CONST_OK_FOR_O(VALUE) ((VALUE) == 0)\n@@ -1131,18 +1130,11 @@ enum reg_class\n \n /* Define this macro if the addresses of local variable slots are at negative\n    offsets from the frame pointer.  */\n-#define FRAME_GROWS_DOWNWARD\n-\n-/* Offset from the frame pointer to the first local variable slot to be\n-   allocated.  */\n-/* ??? This leaves 16 bytes unused normally, but it looks funny to store locals\n-   into the 16-byte reserved area.  */\n-/* ??? This isn't very efficient use of the frame pointer.  Better would be\n-   to move it down a ways, so that we have positive and negative offsets.  */\n-#define STARTING_FRAME_OFFSET \\\n-  (current_function_pretend_args_size\t\t\t\t\t\\\n-   ? 16 - current_function_pretend_args_size\t\t\t\t\\\n-   : 0)\n+/* #define FRAME_GROWS_DOWNWARD */\n+\n+/* Offset from the frame pointer to the first local variable slot to\n+   be allocated.  */\n+#define STARTING_FRAME_OFFSET 0\n \n /* Offset from the stack pointer register to the first location at which\n    outgoing arguments are placed.  If not specified, the default value of zero\n@@ -1207,93 +1199,61 @@ enum reg_class\n \n #define FRAME_POINTER_REGNUM 328\n \n-/* Register number where frame pointer was saved in the prologue, or zero\n-   if it was not saved.  */\n-\n-extern int ia64_fp_regno;\n-\n-/* Number of input and local registers used.  This is needed for the .regstk\n-   directive, and also for debugging info.  */\n-\n-extern int ia64_input_regs;\n-extern int ia64_local_regs;\n+/* Base register for access to local variables of the function.  */\n+#define HARD_FRAME_POINTER_REGNUM  LOC_REG (79)\n \n /* The register number of the arg pointer register, which is used to access the\n    function's argument list.  */\n /* r0 won't otherwise be used, so put the always eliminated argument pointer\n    in it.  */\n #define ARG_POINTER_REGNUM R_GR(0)\n \n-/* The register number for the return address register.  This is not actually\n-   a pointer as the name suggests, but that's a name that gen_rtx_REG \n-   already takes care to keep unique.  We modify return_address_pointer_rtx\n-   in ia64_expand_prologue to reference the final output regnum.  */\n-\n+/* The register number for the return address register.  For IA-64, this\n+   is not actually a pointer as the name suggests, but that's a name that\n+   gen_rtx_REG already takes care to keep unique.  We modify\n+   return_address_pointer_rtx in ia64_expand_prologue to reference the\n+   final output regnum.  */\n #define RETURN_ADDRESS_POINTER_REGNUM 329\n \n /* Register numbers used for passing a function's static chain pointer.  */\n-\n+/* ??? The ABI sez the static chain should be passed as a normal parameter.  */\n #define STATIC_CHAIN_REGNUM 15\n-\n \f\n /* Eliminating the Frame Pointer and the Arg Pointer */\n \n /* A C expression which is nonzero if a function must have and use a frame\n    pointer.  This expression is evaluated in the reload pass.  If its value is\n    nonzero the function will have a frame pointer.  */\n-\n #define FRAME_POINTER_REQUIRED 0\n \n+/* Show we can debug even without a frame pointer.  */\n+#define CAN_DEBUG_WITHOUT_FP\n+\n /* If defined, this macro specifies a table of register pairs used to eliminate\n    unneeded registers that point into the stack frame.  */\n \n #define ELIMINABLE_REGS\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   {ARG_POINTER_REGNUM,\t STACK_POINTER_REGNUM},\t\t\t\t\\\n-  {ARG_POINTER_REGNUM,\t FRAME_POINTER_REGNUM},\t\t\t\t\\\n+  {ARG_POINTER_REGNUM,\t HARD_FRAME_POINTER_REGNUM},\t\t\t\\\n   {FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\t\t\\\n-  {RETURN_ADDRESS_POINTER_REGNUM, BR_REG (0)}\t\t\t\t\\\n+  {FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM},\t\t\t\\\n+  {RETURN_ADDRESS_POINTER_REGNUM, BR_REG (0)},\t\t\t\t\\\n }\n \n /* A C expression that returns non-zero if the compiler is allowed to try to\n-   replace register number FROM with register number TO.  */\n+   replace register number FROM with register number TO.  The frame pointer\n+   is automatically handled.  */\n \n #define CAN_ELIMINATE(FROM, TO) \\\n   (TO == BR_REG (0) ? current_function_is_leaf : 1)\n \n-/* This macro is similar to `INITIAL_FRAME_POINTER_OFFSET'.  It specifies the\n-   initial difference between the specified pair of registers.  This macro must\n-   be defined if `ELIMINABLE_REGS' is defined.  */\n-/* ??? I need to decide whether the frame pointer is the old frame SP\n-   or the new frame SP before dynamic allocs.  */\n-#define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  unsigned int size = ia64_compute_frame_size (get_frame_size ());\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  if ((FROM) == FRAME_POINTER_REGNUM && (TO) == STACK_POINTER_REGNUM)\t\\\n-    (OFFSET) = size;\t\t\t\t\t\t\t\\\n-  else if ((FROM) == ARG_POINTER_REGNUM)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      switch (TO)\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\tcase FRAME_POINTER_REGNUM:\t\t\t\t\t\\\n-\t  /* Arguments start above the 16 byte save area, unless stdarg\t\\\n-\t     in which case we store through the 16 byte save area.  */\t\\\n-\t  (OFFSET) = 16 - current_function_pretend_args_size;\t\t\\\n-\t  break;\t\t\t\t\t\t\t\\\n-\tcase STACK_POINTER_REGNUM:\t\t\t\t\t\\\n-\t  (OFFSET) = size + 16 - current_function_pretend_args_size;\t\\\n-\t  break;\t\t\t\t\t\t\t\\\n-\tdefault:\t\t\t\t\t\t\t\\\n-\t  abort ();\t\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else if ((TO) == BR_REG (0))\t\t\t\t\t\t\\\n-    (OFFSET) = 0;\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    abort ();\t\t\t\t\t\t\t\t\\\n-}\n-\n+/* This macro is similar to `INITIAL_FRAME_POINTER_OFFSET'.  It\n+   specifies the initial difference between the specified pair of\n+   registers.  This macro must be defined if `ELIMINABLE_REGS' is\n+   defined.  */\n+#define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\\n+  ((OFFSET) = ia64_initial_elimination_offset ((FROM), (TO)))\n \f\n /* Passing Function Arguments on the Stack */\n \n@@ -1688,108 +1648,39 @@ do {\t\t\t\t\t\t\t\t\t\\\n    a trampoline, leaving space for the variable parts.\n \n    The trampoline should set the static chain pointer to value placed\n-   into the trampoline and should branch to the specified routine.  The\n-   gp doesn't have to be set since that is already done by the caller\n-   of the trampoline.  To make the normal indirect-subroutine calling\n-   convention work, the trampoline must look like a function descriptor.\n-   That is, the first word must be the target address, the second\n-   word must be the target's global pointer.  The complete trampoline\n+   into the trampoline and should branch to the specified routine.\n+   To make the normal indirect-subroutine calling convention work,\n+   the trampoline must look like a function descriptor; the first\n+   word being the target address and the second being the target's\n+   global pointer.\n+\n+   We abuse the concept of a global pointer by arranging for it\n+   to point to the data we need to load.  The complete trampoline\n    has the following form:\n \n-\t\t+----------------+ \\\n-\tTRAMP:\t| TRAMP+32     \t | |\n-\t\t+----------------+  > fake function descriptor\n-\t\t|    gp\t\t | |\n-\t\t+----------------+ /\n-\t\t| target addr\t |\n-\t\t+----------------+\n-\t\t| static link\t |\n-\t\t+----------------+\n-\t\t| mov r2=ip\t |\n-\t\t+\t\t +\n-\t\t| ;;\t\t |\n-\t\t+----------------+\n-\t\t| adds r4=-16,r2 |\n-\t\t+ adds r15=-8,r2 +\n-\t\t| ;;\t\t |\n-\t\t+----------------+\n-\t\t| ld8 r4=[r4];;\t |\n-\t\t+ ld8 r15=[r15]\t +\n-\t\t| mov b6=r4;;\t |\n-\t\t+----------------+\n-\t\t| br b6\t\t |\n-\t\t+----------------+\n+\t\t+-------------------+ \\\n+\tTRAMP:\t| __ia64_trampoline | |\n+\t\t+-------------------+  > fake function descriptor\n+\t\t| TRAMP+16          | |\n+\t\t+-------------------+ /\n+\t\t| target descriptor |\n+\t\t+-------------------+\n+\t\t| static link\t    |\n+\t\t+-------------------+\n */\n \n-/* ??? Need a version of this and INITIALIZE_TRAMPOLINE for -mno-pic.  */\n-\n-#define TRAMPOLINE_TEMPLATE(FILE)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  fprintf (FILE,\t\t\t\t\t\t\t\\\n-\t   \"\\tdata8 0,0,0,0\\n\"\t\t\t\t\t\t\\\n-\t   \"\\t{ mov r2=ip }\\n\"\t\t\t\t\t\t\\\n-\t   \"\\t;;\\n\"\t\t\t\t\t\t\t\\\n-\t   \"\\t{ adds r4=-16,r2; adds r%d=-8,r2 }\\n\"\t\t\t\\\n-\t   \"\\t;;\\n\"\t\t\t\t\t\t\t\\\n-\t   \"\\t{ ld8 r4=[r4];; ld8 r%d=[r%d]; mov b6=r4 }\\n\"\t\t\\\n-\t   \"\\t;;\\n\"\t\t\t\t\t\t\t\\\n-\t   \"\\t{ br b6 }\\n\"\t\t\t\t\t\t\\\n-\t   \"\\t;;\\n\",\t\t\t\t\t\t\t\\\n-\t   STATIC_CHAIN_REGNUM, STATIC_CHAIN_REGNUM,\t\t\t\\\n-\t   STATIC_CHAIN_REGNUM);\t\t\t\t\t\\\n-}\n-\n-/* The name of a subroutine to switch to the section in which the trampoline\n-   template is to be placed.\n-\n-   On ia64, instructions may only be placed in a text segment.  */\n-\n-#define TRAMPOLINE_SECTION\ttext_section\n-\n /* A C expression for the size in bytes of the trampoline, as an integer.  */\n \n-#define TRAMPOLINE_SIZE\t\t96\n+#define TRAMPOLINE_SIZE\t\t32\n \n /* Alignment required for trampolines, in bits.  */\n \n-#define TRAMPOLINE_ALIGNMENT\t256\n+#define TRAMPOLINE_ALIGNMENT\t64\n \n /* A C statement to initialize the variable parts of a trampoline.  */\n \n #define INITIALIZE_TRAMPOLINE(ADDR, FNADDR, STATIC_CHAIN) \\\n-{\t\t\t\t\t\t\t\t\t\\\n-  rtx addr, addr2, addr_reg, fdesc_addr;\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  /* Load function descriptor address into a pseudo.  */\t\t\\\n-  fdesc_addr = gen_reg_rtx (DImode);\t\t\t\t\t\\\n-  emit_move_insn (fdesc_addr, FNADDR);\t\t\t\t     \t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  /* Read target address from function descriptor and store in\t\t\\\n-     trampoline.  */\t\t\t\t\t\t\t\\\n-  addr = memory_address (Pmode, plus_constant (ADDR, 16));\t\t\\\n-  emit_move_insn (gen_rtx_MEM (Pmode, addr),\t\t\t\t\\\n-\t\t  gen_rtx_MEM (Pmode, fdesc_addr));\t\t\t\\\n-  /* Store static chain in trampoline.  */\t\t\t\t\\\n-  addr = memory_address (Pmode, plus_constant (ADDR, 24));\t\t\\\n-  emit_move_insn (gen_rtx_MEM (Pmode, addr), STATIC_CHAIN);\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  /* Load GP value from function descriptor and store in trampoline.  */\\\n-  addr = memory_address (Pmode, plus_constant (ADDR, 8));\t\t\\\n-  addr2 = memory_address (Pmode, plus_constant (fdesc_addr, 8));\t\\\n-  emit_move_insn (gen_rtx_MEM (Pmode, addr),\t\t\t\t\\\n-\t\t  gen_rtx_MEM (Pmode, addr2));\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  /* Store trampoline entry address in trampoline.  */\t\t\t\\\n-  addr = memory_address (Pmode, ADDR);\t\t\t\t\t\\\n-  addr2 = memory_address (Pmode, plus_constant (ADDR, 32));\t\t\\\n-  emit_move_insn (gen_rtx_MEM (Pmode, addr), addr2);\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  /* Flush the relevant 64 bytes from the i-cache.  */\t\t\t\\\n-  addr_reg = force_reg (DImode, plus_constant (ADDR, 0));\t\t\\\n-  emit_insn (gen_rtx_UNSPEC_VOLATILE (VOIDmode,\t\t\t\t\\\n-\t\t\t\t      gen_rtvec (1, addr_reg), 3));\t\\\n-}\n-\n+  ia64_initialize_trampoline((ADDR), (FNADDR), (STATIC_CHAIN))\n \f\n /* Implicit Calls to Library Routines */\n \n@@ -2394,7 +2285,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   /* Branch registers.  */\t\t\t\t\t\t\\\n   \"b0\", \"b1\", \"b2\", \"b3\", \"b4\", \"b5\", \"b6\", \"b7\",\t\t\t\\\n   /* Frame pointer.  Return address.  */\t\t\t\t\\\n-  \"sfp\", \"retaddr\", \"ar.ccv\", \"ar.lc\", \"ar.ec\", \"ar.pfs\"\t\t\\\n+  \"sfp\", \"retaddr\", \"ar.ccv\", \"ar.unat\", \"ar.pfs\", \"ar.lc\", \"ar.ec\",\t\\\n }\n \n /* If defined, a C initializer for an array of structures containing a name and\n@@ -2781,7 +2672,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n { \"adjusted_comparison_operator\", {LT, GE, LTU, GEU}},\t\t\t\\\n { \"call_multiple_values_operation\", {PARALLEL}},\t\t\t\\\n { \"predicate_operator\", {NE, EQ}},\t\t\t\t\t\\\n-{ \"ar_lc_reg_operand\", {REG}},\n+{ \"ar_lc_reg_operand\", {REG}},\t\t\t\t\t\t\\\n+{ \"ar_ccv_reg_operand\", {REG}},\n \n /* An alias for a machine mode name.  This is the machine mode that elements of\n    a jump-table should have.  */\n@@ -2892,6 +2784,9 @@ struct machine_function\n \n   /* The new bsp value when unwinding from EH. */\n   struct rtx_def* ia64_eh_epilogue_bsp;\n+\n+  /* The GP value save register.  */\n+  struct rtx_def* ia64_gp_save;\n };\n \n "}, {"sha": "3bce4e2cda3b54a4ec29c40a9a55bd2e2727cbe2", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 195, "deletions": 278, "changes": 473, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e242b0a71b4d685eca7514da77f8058adbda38/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e242b0a71b4d685eca7514da77f8058adbda38/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=97e242b0a71b4d685eca7514da77f8058adbda38", "patch": "@@ -59,15 +59,9 @@\n ;;\t2\tgr_restore\n ;;\t3\tfr_spill\n ;;\t4\tfr_restore\n-;;\t5\tpr_spill\n ;;\t8\tpopcnt\n-;;\t9\tunat_spill\n-;;\t10\tunat_restore\n+;;\t12\tmf\n ;;\t13\tcmpxchg_acq\n-;;\t14\tval_compare_and_swap\n-;;\t16\tlock_test_and_set\n-;;\t17\top_and_fetch\n-;;\t18\tfetch_and_op\n ;;\t19\tfetchadd_acq\n ;;\t20\tbsp_value\n ;;\t21\tflushrs\n@@ -76,10 +70,7 @@\n ;;\t0\talloc\n ;;\t1\tblockage\n ;;\t2\tinsn_group_barrier\n-;;\t3\tflush_cache\n-;;\t4\tpfs_restore\n ;;\t5\tset_bsp\n-;;\t6\tpr_restore\n ;;\t7\tpred.rel.mutex\n \f\n ;; ::::::::::::::::::::\n@@ -302,24 +293,26 @@\n (define_insn \"*movsicc_astep\"\n   [(cond_exec\n      (match_operator 2 \"predicate_operator\"\n-       [(match_operand:CC 3 \"register_operand\" \"c,c,c,c,c,c\")\n+       [(match_operand:CC 3 \"register_operand\" \"c,c,c,c,c,c,c,c\")\n         (const_int 0)])\n-     (set (match_operand:SI 0 \"register_operand\"  \"=r,r,r, r,*f,*f\")\n-\t  (match_operand:SI 1 \"nonmemory_operand\" \"rO,J,i,*f,rO,*f\")))]\n+     (set (match_operand:SI 0 \"register_operand\"  \"=r,r,r, r,*f,*f, r,*d\")\n+\t  (match_operand:SI 1 \"nonmemory_operand\" \"rO,J,i,*f,rO,*f,*d,rO\")))]\n   \"TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n   \"@\n    (%J2) mov %0 = %r1\n    (%J2) addl %0 = %1, r0\n    (%J2) movl %0 = %1\n    (%J2) getf.sig %0 = %1\n    (%J2) setf.sig %0 = %r1\n-   (%J2) mov %0 = %1\"\n-  [(set_attr \"type\" \"A,A,L,M,M,F\")\n+   (%J2) mov %0 = %1\n+   (%J2) mov %0 = %1\n+   (%J2) mov %0 = %r1\"\n+  [(set_attr \"type\" \"A,A,L,M,M,F,M,M\")\n    (set_attr \"predicable\" \"no\")])\n \n (define_insn \"*movsi_internal_astep\"\n-  [(set (match_operand:SI 0 \"destination_operand\" \"=r,r,r,r, m, r,*f,*f\")\n-\t(match_operand:SI 1 \"move_operand\"        \"rO,J,i,m,rO,*f,rO,*f\"))]\n+  [(set (match_operand:SI 0 \"destination_operand\" \"=r,r,r,r, m, r,*f,*f, r,*d\")\n+\t(match_operand:SI 1 \"move_operand\"        \"rO,J,i,m,rO,*f,rO,*f,*d,rO\"))]\n   \"TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n   \"@\n   mov %0 = %r1\n@@ -329,13 +322,15 @@\n   st4%Q0 %0 = %r1%P0\n   getf.sig %0 = %1\n   setf.sig %0 = %r1\n-  mov %0 = %1\"\n-  [(set_attr \"type\" \"A,A,L,M,M,M,M,F\")\n+  mov %0 = %1\n+  mov %0 = %1\n+  mov %0 = %r1\"\n+  [(set_attr \"type\" \"A,A,L,M,M,M,M,F,M,M\")\n    (set_attr \"predicable\" \"no\")])\n \n (define_insn \"*movsi_internal\"\n-  [(set (match_operand:SI 0 \"destination_operand\" \"=r,r,r,r, m, r,*f,*f\")\n-\t(match_operand:SI 1 \"move_operand\"        \"rO,J,i,m,rO,*f,rO,*f\"))]\n+  [(set (match_operand:SI 0 \"destination_operand\" \"=r,r,r,r, m, r,*f,*f, r,*d\")\n+\t(match_operand:SI 1 \"move_operand\"        \"rO,J,i,m,rO,*f,rO,*f,*d,rO\"))]\n   \"! TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n   \"@\n   mov %0 = %r1\n@@ -345,8 +340,10 @@\n   st4%Q0 %0 = %r1%P0\n   getf.sig %0 = %1\n   setf.sig %0 = %r1\n-  mov %0 = %1\"\n-  [(set_attr \"type\" \"A,A,L,M,M,M,M,F\")])\n+  mov %0 = %1\n+  mov %0 = %1\n+  mov %0 = %r1\"\n+  [(set_attr \"type\" \"A,A,L,M,M,M,M,F,M,M\")])\n \n (define_expand \"movdi\"\n   [(set (match_operand:DI 0 \"general_operand\" \"\")\n@@ -412,9 +409,9 @@\n \n (define_insn \"*movdi_internal_astep\"\n   [(set (match_operand:DI 0 \"destination_operand\"\n-\t\t\t    \"=r,r,r,r, m, r,*f,*f,*f, Q,   r,*b*e, r,*d\")\n+\t\t    \"=r,r,r,r, m, r,*f,*f,*f, Q,   r,*b*e, r,*d, r,*c\")\n \t(match_operand:DI 1 \"move_operand\"\n-\t\t\t    \"rO,J,i,m,rO,*f,rO,*f, Q,*f,*b*e,  rO,*d,rO\"))]\n+\t\t    \"rO,J,i,m,rO,*f,rO,*f, Q,*f,*b*e,  rO,*d,rO,*c,rO\"))]\n   \"TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n   \"*\n {\n@@ -432,7 +429,9 @@\n     \\\"mov %0 = %1\\\",\n     \\\"mov %0 = %r1\\\",\n     \\\"mov %0 = %1\\\",\n-    \\\"mov %0 = %r1\\\"\n+    \\\"mov %0 = %r1\\\",\n+    \\\"mov %0 = pr\\\",\n+    \\\"mov pr = %1, -1\\\"\n   };\n \n   if (which_alternative == 2 && ! TARGET_NO_PIC\n@@ -441,14 +440,14 @@\n \n   return alt[which_alternative];\n }\"\n-  [(set_attr \"type\" \"A,A,L,M,M,M,M,F,M,M,I,I,M,M\")\n+  [(set_attr \"type\" \"A,A,L,M,M,M,M,F,M,M,I,I,M,M,I,I\")\n    (set_attr \"predicable\" \"no\")])\n \n (define_insn \"*movdi_internal\"\n   [(set (match_operand:DI 0 \"destination_operand\"\n-\t\t\t    \"=r,r,r,r, m, r,*f,*f,*f, Q,   r,*b*e, r,*d\")\n+\t\t    \"=r,r,r,r, m, r,*f,*f,*f, Q,   r,*b*e, r,*d, r,*c\")\n \t(match_operand:DI 1 \"move_operand\"\n-\t\t\t    \"rO,J,i,m,rO,*f,rO,*f, Q,*f,*b*e,  rO,*d,rO\"))]\n+\t\t    \"rO,J,i,m,rO,*f,rO,*f, Q,*f,*b*e,  rO,*d,rO,*c,rO\"))]\n   \"! TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n   \"*\n {\n@@ -466,7 +465,9 @@\n     \\\"%,mov %0 = %1\\\",\n     \\\"%,mov %0 = %r1\\\",\n     \\\"%,mov %0 = %1\\\",\n-    \\\"%,mov %0 = %r1\\\"\n+    \\\"%,mov %0 = %r1\\\",\n+    \\\"mov %0 = pr\\\",\n+    \\\"mov pr = %1, -1\\\"\n   };\n \n   if (which_alternative == 2 && ! TARGET_NO_PIC\n@@ -475,7 +476,7 @@\n \n   return alt[which_alternative];\n }\"\n-  [(set_attr \"type\" \"A,A,L,M,M,M,M,F,M,M,I,I,M,M\")])\n+  [(set_attr \"type\" \"A,A,L,M,M,M,M,F,M,M,I,I,M,M,I,I\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -2780,16 +2781,16 @@\n ;; Errata 72 workaround.\n (define_insn \"*cmovdi_internal_astep\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-\t\t\"=r,*f,Q,*b*d*e,r,*f,Q,*b*d*e,r,*f,Q,*b*d*e\")\n+\t\t\"=r,*f,Q,*b,r,*f,Q,*b,r,*f,Q,*b\")\n \t(if_then_else:DI\n \t  (match_operator:CC 4 \"predicate_operator\"\n \t    [(match_operand:CC 1 \"register_operand\"\n \t\t\t       \"c,c,c,c,c,c,c,c,c,c,c,c\")\n \t     (const_int 0)])\n \t  (match_operand:DI 2 \"general_operand\"\n-\t\t\"0,0,0,0,ri*f*b*d*e,rO,*f,r,ri*f*b*d*e,rO,*f,r\")\n+\t\t\"0,0,0,0,ri*f*b,rO,*f,r,ri*f*b,rO,*f,r\")\n \t  (match_operand:DI 3 \"general_operand\"\n-\t\t\"ri*f*b*d*e,rO,*f,r,0,0,0,0,ri*f*b*d*e,rO,*f,r\")))]\n+\t\t\"ri*f*b,rO,*f,r,0,0,0,0,ri*f*b,rO,*f,r\")))]\n   \"TARGET_A_STEP\"\n   \"* abort ();\"\n   [(set_attr \"predicable\" \"no\")])\n@@ -3012,9 +3013,6 @@\n   else if (TARGET_CONST_GP)\n     emit_call_insn (gen_call_internal (addr, operands[1],\n \t\t\t\t       gen_rtx_REG (DImode, R_BR (0))));\n-  /* ??? This is an unsatisfying solution.  Should rethink.  */\n-  else if (setjmp_operand (addr, mode))\n-    emit_insn (gen_setjmp_call_pic (addr, operands[1]));\n   else\n     emit_insn (gen_call_pic (addr, operands[1]));\n \n@@ -3033,32 +3031,11 @@\n   \"\"\n   \"\n {\n-  operands[2] = gen_reg_rtx (DImode);\n+  operands[2] = ia64_gp_save_reg (0);\n   operands[3] = gen_reg_rtx (DImode);\n   operands[4] = gen_reg_rtx (DImode);\n }\")\n \n-;; We can't save GP in a pseudo if we are calling setjmp, because pseudos\n-;; won't be restored by longjmp.  For now, we save it in r4.\n-\n-;; ??? It would be more efficient to save this directly into a stack slot.\n-;; Unfortunately, the stack slot address gets cse'd across the setjmp call\n-;; because the NOTE_INSN_SETJMP note is in the wrong place.\n-\n-;; ??? This is an unsatisfying solution.  Should rethink.\n-\n-(define_expand \"setjmp_call_pic\"\n-  [(set (match_dup 2) (reg:DI 1))\n-   (parallel [(call (mem:DI (match_operand 0 \"\" \"\")) (match_operand 1 \"\" \"\"))\n-\t      (use (reg:DI 1))\n-\t      (clobber (reg:DI 320))])\n-   (set (reg:DI 1) (match_dup 2))]\n-  \"\"\n-  \"\n-{\n-  operands[2] = gen_rtx_REG (DImode, GR_REG (4));\n-}\")\n-\n ;; ??? Saving/restoring the GP register is not needed if we are calling\n ;; a function in the same module.\n \n@@ -3071,7 +3048,9 @@\n   \"\"\n   \"\n {\n-  operands[2] = gen_reg_rtx (DImode);\n+  /* ??? Using setjmp_operand is an unsatisfying solution.  Should rethink.  */\n+  operands[2] = ia64_gp_save_reg (setjmp_operand (XEXP (operands[0], 0),\n+\t\t\t\t\t\t  VOIDmode));\n }\")\n \n (define_insn \"call_internal\"\n@@ -3129,9 +3108,6 @@\n   else if (TARGET_CONST_GP)\n     emit_call_insn (gen_call_value_internal (operands[0], addr, operands[2],\n \t\t\t\t\t     gen_rtx_REG (DImode, R_BR (0))));\n-  /* ??? This is an unsatisfying solution.  Should rethink.  */\n-  else if (setjmp_operand (addr, mode))\n-    emit_insn (gen_setjmp_call_value_pic (operands[0], addr, operands[2]));\n   /* This is for HFA returns.  */\n   else if (GET_CODE (operands[0]) == PARALLEL)\n     emit_insn (gen_call_multiple_values_pic (operands[0], addr, operands[2]));\n@@ -3154,7 +3130,7 @@\n   \"\"\n   \"\n {\n-  operands[3] = gen_reg_rtx (DImode);\n+  operands[3] = ia64_gp_save_reg (0);\n   operands[4] = gen_reg_rtx (DImode);\n   operands[5] = gen_reg_rtx (DImode);\n }\")\n@@ -3177,7 +3153,7 @@\n   int i;\n   rtx call;\n \n-  operands[3] = gen_reg_rtx (DImode);\n+  operands[3] = ia64_gp_save_reg (0);\n   operands[4] = gen_reg_rtx (DImode);\n   operands[5] = gen_reg_rtx (DImode);\n \n@@ -3203,29 +3179,6 @@\n \n }\")\n \n-;; We can't save GP in a pseudo if we are calling setjmp, because pseudos\n-;; won't be restored by longjmp.  For now, we save it in r4.\n-\n-;; ??? It would be more efficient to save this directly into a stack slot.\n-;; Unfortunately, the stack slot address gets cse'd across the setjmp call\n-;; because the NOTE_INSN_SETJMP note is in the wrong place.\n-\n-;; ??? This is an unsatisfying solution.  Should rethink.\n-\n-(define_expand \"setjmp_call_value_pic\"\n-  [(set (match_dup 3) (reg:DI 1))\n-   (parallel [(set (match_operand 0 \"\" \"\")\n-\t\t   (call (mem:DI (match_operand 1 \"\" \"\"))\n-\t\t\t (match_operand 2 \"\" \"\")))\n-\t      (use (reg:DI 1))\n-\t      (clobber (reg:DI 320))])\n-   (set (reg:DI 1) (match_dup 3))]\n-  \"\"\n-  \"\n-{\n-  operands[3] = gen_rtx_REG (DImode, GR_REG (4));\n-}\")\n-\n ;; ??? Saving/restoring the GP register is not needed if we are calling\n ;; a function in the same module.\n \n@@ -3240,7 +3193,9 @@\n   \"\"\n   \"\n {\n-  operands[3] = gen_reg_rtx (DImode);\n+  /* ??? Using setjmp_operand is an unsatisfying solution.  Should rethink.  */\n+  operands[3] = ia64_gp_save_reg (setjmp_operand (XEXP (operands[1], 0),\n+\t\t\t\t\t\t  VOIDmode));\n }\")\n \n ;; ??? Saving/restoring the GP register is not needed if we are calling\n@@ -3261,7 +3216,7 @@\n   int i;\n   rtx call;\n \n-  operands[4] = gen_reg_rtx (DImode);\n+  operands[4] = ia64_gp_save_reg (0);\n \n   call = gen_rtx_CALL (VOIDmode, gen_rtx_MEM (DImode, operands[1]),\n \t\t       operands[2]);\n@@ -3478,16 +3433,36 @@\n   [(set_attr \"type\" \"M\")\n    (set_attr \"predicable\" \"no\")])\n \n-(define_insn \"gr_spill\"\n+;; Modifies ar.unat\n+(define_expand \"gr_spill\"\n+  [(parallel\n+     [(set (match_operand:DI 0 \"memory_operand\" \"=m\")\n+\t   (unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")] 1))\n+      (clobber (match_dup 2))])]\n+  \"\"\n+  \"operands[2] = gen_rtx_REG (DImode, AR_UNAT_REGNUM);\")\n+\n+(define_insn \"*gr_spill_internal\"\n   [(set (match_operand:DI 0 \"memory_operand\" \"=m\")\n-\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")] 1))]\n+\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")] 1))\n+   (clobber (match_operand:DI 2 \"register_operand\" \"\"))]\n   \"\"\n   \"st8.spill %0 = %1%P0\"\n   [(set_attr \"type\" \"M\")])\n \n-(define_insn \"gr_restore\"\n+;; Reads ar.unat\n+(define_expand \"gr_restore\"\n+  [(parallel\n+     [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t   (unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")] 2))\n+      (use (match_dup 2))])]\n+  \"\"\n+  \"operands[2] = gen_rtx_REG (DImode, AR_UNAT_REGNUM);\")\n+\n+(define_insn \"*gr_restore_internal\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")] 2))]\n+\t(unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")] 2))\n+   (use (match_operand:DI 2 \"register_operand\" \"\"))]\n   \"\"\n   \"ld8.fill %0 = %1%P1\"\n   [(set_attr \"type\" \"M\")])\n@@ -3506,47 +3481,6 @@\n   \"ldf.fill %0 = %1%P1\"\n   [(set_attr \"type\" \"M\")])\n \n-(define_insn \"pr_spill\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(unspec:DI [(const_int 0)] 5))]\n-  \"\"\n-  \"mov %0 = pr\"\n-  [(set_attr \"type\" \"I\")])\n-\n-;; ??? This is volatile to prevent it from being moved before a conditional\n-;; expression that calculates the return value.\n-\n-(define_insn \"pr_restore\"\n-  [(unspec_volatile [(const_int 0)] 6)\n-   (use (match_operand:DI 0 \"register_operand\" \"r\"))]\n-  \"\"\n-  \"mov pr = %0, -1\"\n-  [(set_attr \"type\" \"I\")])\n-\n-;; ??? This is volatile to prevent it from being moved before a call.\n-;; Should instead add a ar.pfs hard register which is call clobbered.\n-\n-(define_insn \"pfs_restore\"\n-  [(unspec_volatile [(const_int 0)] 4)\n-   (use (match_operand:DI 0 \"register_operand\" \"r\"))]\n-  \"\"\n-  \"mov ar.pfs = %0\"\n-  [(set_attr \"type\" \"I\")])\n-\n-(define_insn \"unat_spill\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(unspec:DI [(const_int 0)] 9))]\n-  \"\"\n-  \"mov %0 = ar.unat\"\n-  [(set_attr \"type\" \"M\")])\n-\n-(define_insn \"unat_restore\"\n-  [(unspec [(const_int 0)] 10)\n-   (use (match_operand:DI 0 \"register_operand\" \"r\"))]\n-  \"\"\n-  \"mov ar.unat = %0\"\n-  [(set_attr \"type\" \"M\")])\n-\n (define_insn \"bsp_value\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec:DI [(const_int 0)] 20))]\n@@ -3624,31 +3558,39 @@\n   \"\"\n   \"\n {\n-  if (GET_CODE (operands[0]) != REG)\n-    operands[0] = force_reg (Pmode, operands[0]);\n-  emit_move_insn (virtual_stack_vars_rtx, operands[0]);\n-  emit_insn (gen_rtx_USE (VOIDmode, frame_pointer_rtx));\n-  emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n-  emit_insn (gen_rtx_USE (VOIDmode, static_chain_rtx));\n   emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \\\"__ia64_nonlocal_goto\\\"),\n-\t\t     0, VOIDmode, 4,\n-\t\t     operands[0], Pmode, operands[1], Pmode,\n+\t\t     0, VOIDmode, 3,\n+\t\t     operands[1], Pmode,\n \t\t     copy_to_reg (XEXP (operands[2], 0)), Pmode,\n \t\t     operands[3], Pmode);\n   emit_barrier ();\n   DONE;\n }\")\n \n-;; ??? We need this because the function __ia64_nonlocal_goto can't easily\n-;; access the FP which is currently stored in a local register.  Maybe move\n-;; the FP to a global register to avoid this problem?\n+;; Restore the GP after the exception/longjmp.  The preceeding call will\n+;; have tucked it away.\n+(define_expand \"exception_receiver\"\n+  [(set (reg:DI 1) (match_dup 0))]\n+  \"\"\n+  \"operands[0] = ia64_gp_save_reg (0);\")\n \n-(define_expand \"nonlocal_goto_receiver\"\n-  [(use (const_int 0))]\n+;; The rest of the setjmp processing happens with the nonlocal_goto expander.\n+;; ??? This is not tested.\n+(define_expand \"builtin_setjmp_setup\"\n+  [(use (match_operand:DI 0 \"\" \"\"))]\n   \"\"\n   \"\n {\n-  emit_move_insn (frame_pointer_rtx, gen_rtx_REG (DImode, GR_REG (7)));\n+  emit_move_insn (ia64_gp_save_reg (0), gen_rtx_REG (DImode, GR_REG (1)));\n+  DONE;\n+}\")\n+\n+(define_expand \"builtin_setjmp_receiver\"\n+  [(use (match_operand:DI 0 \"\" \"\"))]\n+  \"\"\n+  \"\n+{\n+  emit_move_insn (gen_rtx_REG (DImode, GR_REG (1)), ia64_gp_save_reg (0));\n   DONE;\n }\")\n \n@@ -3677,20 +3619,7 @@\n \n   cfun->machine->ia64_eh_epilogue_sp = sp;\n   cfun->machine->ia64_eh_epilogue_bsp = bsp;\n-\n }\")\n-\n-;; This flushes at least 64 bytes starting from the address pointed\n-;; to by operand[0].\n-\n-;; ??? This should be a define expand.\n-\n-(define_insn \"flush_cache\"\n-  [(unspec_volatile [(match_operand:DI 0 \"register_operand\" \"=&r\")] 3)]\n-  \"\"\n-  \"fc %0\\;;;\\;adds %0=31,%0\\;;;\\;fc %0\\;;;\\;sync.i\\;srlz.i\"\n-  [(set_attr \"type\" \"unknown\")\n-   (set_attr \"predicable\" \"no\")])\n \f\n ;; Builtin apply support.\n \n@@ -3710,20 +3639,6 @@\n \f\n ;;; Intrinsics support.\n \n-(define_insn \"ccv_restore_si\"\n-  [(unspec [(const_int 0)] 11)\n-   (use (match_operand:SI 0 \"register_operand\" \"r\"))]\n-  \"\"\n-  \"mov ar.ccv = %0\"\n-  [(set_attr \"type\" \"M\")])\n-\n-(define_insn \"ccv_restore_di\"\n-  [(unspec [(const_int 0)] 11)\n-   (use (match_operand:DI 0 \"register_operand\" \"r\"))]\n-  \"\"\n-  \"mov ar.ccv = %0\"\n-  [(set_attr \"type\" \"M\")])\n-\n (define_insn \"mf\"\n   [(unspec [(match_operand:BLK 0 \"memory_operand\" \"m\")] 12)]\n   \"\"\n@@ -3749,50 +3664,50 @@\n (define_insn \"cmpxchg_acq_si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n         (unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")\n-                    (match_operand:SI 2 \"register_operand\" \"r\")] 13))]\n+                    (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t    (match_operand:SI 3 \"ar_ccv_reg_operand\" \"\")] 13))]\n   \"\"\n-  \"cmpxchg4.acq %0 = %1, %2, ar.ccv\"\n+  \"cmpxchg4.acq %0 = %1, %2, %3\"\n   [(set_attr \"type\" \"M\")])\n \n (define_insn \"cmpxchg_acq_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")\n-                    (match_operand:DI 2 \"register_operand\" \"r\")] 13))]\n+                    (match_operand:DI 2 \"register_operand\" \"r\")\n+                    (match_operand:DI 3 \"ar_ccv_reg_operand\" \"\")] 13))]\n   \"\"\n-  \"cmpxchg8.acq %0 = %1, %2, ar.ccv\"\n+  \"cmpxchg8.acq %0 = %1, %2, %3\"\n   [(set_attr \"type\" \"M\")])\n \n (define_expand \"val_compare_and_swap_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")\n-                    (match_operand:SI 2 \"register_operand\" \"r\")\n-                    (match_operand:SI 3 \"register_operand\" \"r\")] 14))]\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"memory_operand\" \"\")\n+   (match_operand:SI 2 \"register_operand\" \"\")\n+   (match_operand:SI 3 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n-  rtx tmp_reg = gen_rtx_REG (DImode, GR_REG(0));\n-  rtx target = gen_rtx_MEM (BLKmode, tmp_reg);\n-  RTX_UNCHANGING_P (target) = 1;\n-  emit_insn (gen_ccv_restore_si (operands[2]));\n+  rtx target = gen_rtx_MEM (BLKmode, gen_rtx_REG (DImode, GR_REG (1)));\n+  rtx ccv = gen_rtx_REG (SImode, AR_CCV_REGNUM);\n+  emit_move_insn (ccv, operands[2]);\n   emit_insn (gen_mf (target));\n-  emit_insn (gen_cmpxchg_acq_si (operands[0], operands[1], operands[3]));\n+  emit_insn (gen_cmpxchg_acq_si (operands[0], operands[1], operands[3], ccv));\n   DONE;\n }\")\n \n (define_expand \"val_compare_and_swap_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")\n-                    (match_operand:DI 2 \"register_operand\" \"r\")\n-                    (match_operand:DI 3 \"register_operand\" \"r\")] 14))]\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"memory_operand\" \"\")\n+   (match_operand:DI 2 \"register_operand\" \"\")\n+   (match_operand:DI 3 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n-  rtx tmp_reg = gen_rtx_REG (DImode, GR_REG(0));\n-  rtx target = gen_rtx_MEM (BLKmode, tmp_reg);\n-  RTX_UNCHANGING_P (target) = 1;\n-  emit_insn (gen_ccv_restore_di (operands[2]));\n+  rtx target = gen_rtx_MEM (BLKmode, gen_rtx_REG (DImode, GR_REG (1)));\n+  rtx ccv = gen_rtx_REG (DImode, AR_CCV_REGNUM);\n+  emit_move_insn (ccv, operands[2]);\n   emit_insn (gen_mf (target));\n-  emit_insn (gen_cmpxchg_acq_di (operands[0], operands[1], operands[3]));\n+  emit_insn (gen_cmpxchg_acq_di (operands[0], operands[1], operands[3], ccv));\n   DONE;\n }\")\n \n@@ -3815,9 +3730,9 @@\n   [(set_attr \"type\" \"M\")])\n \n (define_expand \"lock_test_and_set_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"r\")\n-        (unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")\n-                    (match_operand:SI 2 \"register_operand\" \"r\")] 16))]\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"memory_operand\" \"\")\n+   (match_operand:SI 2 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -3826,9 +3741,9 @@\n }\")\n \n (define_expand \"lock_test_and_set_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"r\")\n-        (unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")\n-                    (match_operand:DI 2 \"register_operand\" \"r\")] 16))]\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"memory_operand\" \"\")\n+   (match_operand:DI 2 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -3837,9 +3752,9 @@\n }\")\n \n (define_expand \"fetch_and_add_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"r\")\n-        (unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")\n-                    (match_operand:SI 2 \"nonmemory_operand\" \"\")] 18))]\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"memory_operand\" \"\")\n+   (match_operand:SI 2 \"nonmemory_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -3851,7 +3766,8 @@\n       if (x == -16 || x == -8 || x == -4 || x == -1 ||\n           x ==  16 || x ==  8 || x ==  4 || x ==  1)\n         {\n-          emit_insn (gen_fetchadd_acq_si (operands[0], operands[1], operands[2]));\n+          emit_insn (gen_fetchadd_acq_si (operands[0], operands[1],\n+\t\t\t\t\t  operands[2]));\n           DONE;\n         }\n     }\n@@ -3861,9 +3777,9 @@\n }\")\n \n (define_expand \"fetch_and_sub_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"r\")\n-        (unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")\n-                    (match_operand:SI 2 \"register_operand\" \"r\")] 18))]\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"memory_operand\" \"\")\n+   (match_operand:SI 2 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -3872,9 +3788,9 @@\n }\")\n \n (define_expand \"fetch_and_or_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"r\")\n-        (unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")\n-                    (match_operand:SI 2 \"register_operand\" \"r\")] 18))]\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"memory_operand\" \"\")\n+   (match_operand:SI 2 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -3883,9 +3799,9 @@\n }\")\n \n (define_expand \"fetch_and_and_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"r\")\n-        (unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")\n-                    (match_operand:SI 2 \"register_operand\" \"r\")] 18))]\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"memory_operand\" \"\")\n+   (match_operand:SI 2 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -3894,9 +3810,9 @@\n }\")\n \n (define_expand \"fetch_and_xor_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"r\")\n-        (unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")\n-                    (match_operand:SI 2 \"register_operand\" \"r\")] 18))]\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"memory_operand\" \"\")\n+   (match_operand:SI 2 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -3905,9 +3821,9 @@\n }\")\n \n (define_expand \"fetch_and_nand_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"r\")\n-        (unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")\n-                    (match_operand:SI 2 \"register_operand\" \"r\")] 18))]\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"memory_operand\" \"\")\n+   (match_operand:SI 2 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -3916,9 +3832,9 @@\n }\")\n \n (define_expand \"fetch_and_add_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"r\")\n-        (unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")\n-                    (match_operand:DI 2 \"nonmemory_operand\" \"\")] 18))]\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"memory_operand\" \"\")\n+   (match_operand:DI 2 \"nonmemory_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -3930,7 +3846,8 @@\n       if (x == -16 || x == -8 || x == -4 || x == -1 ||\n           x ==  16 || x ==  8 || x ==  4 || x ==  1)\n         {\n-          emit_insn (gen_fetchadd_acq_di (operands[0], operands[1], operands[2]));\n+          emit_insn (gen_fetchadd_acq_di (operands[0], operands[1],\n+\t\t\t\t\t  operands[2]));\n           DONE;\n         }\n     }\n@@ -3940,9 +3857,9 @@\n }\")\n \n (define_expand \"fetch_and_sub_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"r\")\n-        (unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")\n-                    (match_operand:DI 2 \"register_operand\" \"r\")] 18))]\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"memory_operand\" \"\")\n+   (match_operand:DI 2 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -3951,9 +3868,9 @@\n }\")\n \n (define_expand \"fetch_and_or_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"r\")\n-        (unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")\n-                    (match_operand:DI 2 \"register_operand\" \"r\")] 18))]\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"memory_operand\" \"\")\n+   (match_operand:DI 2 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -3962,9 +3879,9 @@\n }\")\n \n (define_expand \"fetch_and_and_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"r\")\n-        (unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")\n-                    (match_operand:DI 2 \"register_operand\" \"r\")] 18))]\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"memory_operand\" \"\")\n+   (match_operand:DI 2 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -3973,9 +3890,9 @@\n }\")\n \n (define_expand \"fetch_and_xor_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"r\")\n-        (unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")\n-                    (match_operand:DI 2 \"register_operand\" \"r\")] 18))]\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"memory_operand\" \"\")\n+   (match_operand:DI 2 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -3984,9 +3901,9 @@\n }\")\n \n (define_expand \"fetch_and_nand_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"r\")\n-        (unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")\n-                    (match_operand:DI 2 \"register_operand\" \"r\")] 18))]\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"memory_operand\" \"\")\n+   (match_operand:DI 2 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -3995,9 +3912,9 @@\n }\")\n \n (define_expand \"add_and_fetch_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"r\")\n-        (unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")\n-                    (match_operand:DI 2 \"register_operand\" \"r\")] 17))]\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"memory_operand\" \"\")\n+   (match_operand:DI 2 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -4006,9 +3923,9 @@\n }\")\n \n (define_expand \"sub_and_fetch_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"r\")\n-        (unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")\n-                    (match_operand:DI 2 \"register_operand\" \"r\")] 17))]\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"memory_operand\" \"\")\n+   (match_operand:DI 2 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -4017,9 +3934,9 @@\n }\")\n \n (define_expand \"or_and_fetch_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"r\")\n-        (unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")\n-                    (match_operand:DI 2 \"register_operand\" \"r\")] 17))]\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"memory_operand\" \"\")\n+   (match_operand:DI 2 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -4028,9 +3945,9 @@\n }\")\n \n (define_expand \"and_and_fetch_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"r\")\n-        (unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")\n-                    (match_operand:DI 2 \"register_operand\" \"r\")] 17))]\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"memory_operand\" \"\")\n+   (match_operand:DI 2 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -4039,9 +3956,9 @@\n }\")\n \n (define_expand \"xor_and_fetch_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"r\")\n-        (unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")\n-                    (match_operand:DI 2 \"register_operand\" \"r\")] 17))]\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"memory_operand\" \"\")\n+   (match_operand:DI 2 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -4050,9 +3967,9 @@\n }\")\n \n (define_expand \"nand_and_fetch_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"r\")\n-        (unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")\n-                    (match_operand:DI 2 \"register_operand\" \"r\")] 17))]\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:DI 1 \"memory_operand\" \"\")\n+   (match_operand:DI 2 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -4061,9 +3978,9 @@\n }\")\n \n (define_expand \"add_and_fetch_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"r\")\n-        (unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")\n-                    (match_operand:SI 2 \"register_operand\" \"r\")] 17))]\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"memory_operand\" \"\")\n+   (match_operand:SI 2 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -4072,9 +3989,9 @@\n }\")\n \n (define_expand \"sub_and_fetch_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"r\")\n-        (unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")\n-                    (match_operand:SI 2 \"register_operand\" \"r\")] 17))]\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"memory_operand\" \"\")\n+   (match_operand:SI 2 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -4083,9 +4000,9 @@\n }\")\n \n (define_expand \"or_and_fetch_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"r\")\n-        (unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")\n-                    (match_operand:SI 2 \"register_operand\" \"r\")] 17))]\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"memory_operand\" \"\")\n+   (match_operand:SI 2 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -4094,9 +4011,9 @@\n }\")\n \n (define_expand \"and_and_fetch_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"r\")\n-        (unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")\n-                    (match_operand:SI 2 \"register_operand\" \"r\")] 17))]\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"memory_operand\" \"\")\n+   (match_operand:SI 2 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -4105,9 +4022,9 @@\n }\")\n \n (define_expand \"xor_and_fetch_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"r\")\n-        (unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")\n-                    (match_operand:SI 2 \"register_operand\" \"r\")] 17))]\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"memory_operand\" \"\")\n+   (match_operand:SI 2 \"register_operand\" \"\")]\n   \"\"\n   \"\n {\n@@ -4116,9 +4033,9 @@\n }\")\n \n (define_expand \"nand_and_fetch_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"r\")\n-        (unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")\n-                    (match_operand:SI 2 \"register_operand\" \"r\")] 17))]\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"memory_operand\" \"\")\n+   (match_operand:SI 2 \"register_operand\" \"\")]\n   \"\"\n   \"\n {"}, {"sha": "e5fb7d7c76ffcdca84ce7cbf19c8a39887951819", "filename": "gcc/config/ia64/lib1funcs.asm", "status": "modified", "additions": 151, "deletions": 76, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e242b0a71b4d685eca7514da77f8058adbda38/gcc%2Fconfig%2Fia64%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e242b0a71b4d685eca7514da77f8058adbda38/gcc%2Fconfig%2Fia64%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Flib1funcs.asm?ref=97e242b0a71b4d685eca7514da77f8058adbda38", "patch": "@@ -563,69 +563,91 @@ __umodsi3:\n \t.global __ia64_save_stack_nonlocal\n \t.proc __ia64_save_stack_nonlocal\n __ia64_save_stack_nonlocal:\n-\talloc r18=ar.pfs,2,0,0,0\n-\tst8 [in0]=in1,8\n-\tmov r19=ar.rsc\n-\t;;\n-\tflushrs\n-\tand r19=0x1c,r19\n-\tmov ar.pfs=r18\n-\t;;\n-\tmov ar.rsc=r19\n-\tmov r16=ar.bsp\n-\tadds r2=16,in0\n-\t;;\n-\tmov r17=ar.rnat\n-\tst8 [in0]=r16,8\n-\tor r19=0x3,r19\n-\t;;\n-\tst8 [in0]=r17\n-\tmov ar.rsc=r19\n-\tst8 [r2]=r18\n-\tmov ar.pfs=r18\n-\tbr.ret.sptk.few rp\n-\t;;\n+\t{ .mmf\n+\t  alloc r18 = ar.pfs, 2, 0, 0, 0\n+\t  mov r19 = ar.rsc\n+\t  ;;\n+\t}\n+\t{ .mmi\n+\t  flushrs\n+\t  st8 [in0] = in1, 24\n+\t  and r19 = 0x1c, r19\n+\t  ;;\n+\t}\n+\t{ .mmi\n+\t  st8 [in0] = r18, -16\n+\t  mov ar.rsc = r19\n+\t  or r19 = 0x3, r19\n+\t  ;;\n+\t}\n+\t{ .mmi\n+\t  mov r16 = ar.bsp\n+\t  mov r17 = ar.rnat\n+\t  adds r2 = 8, in0\n+\t  ;;\n+\t}\n+\t{ .mmi\n+\t  st8 [in0] = r16\n+\t  st8 [r2] = r17\n+\t}\n+\t{ .mib\n+\t  mov ar.rsc = r19\n+\t  br.ret.sptk.few rp\n+\t  ;;\n+\t}\n \t.endp __ia64_save_stack_nonlocal\n #endif\n \n #ifdef L__nonlocal_goto\n-// void __ia64_nonlocal_goto(void *fp, void *target_label, void *save_area,\n+// void __ia64_nonlocal_goto(void *target_label, void *save_area,\n //\t\t\t     void *static_chain);\n \n \t.text\n \t.align 16\n \t.global __ia64_nonlocal_goto\n \t.proc __ia64_nonlocal_goto\n __ia64_nonlocal_goto:\n-\talloc r20=ar.pfs,4,0,0,0\n-\tmov r19=ar.rsc\n-\tadds r2=8,in2\n-\tld8 r12=[in2],16\n-\tmov.ret.sptk rp = r33, .L0\n-\t;;\n-\tflushrs\n-\tld8 r16=[r2],16\n-\tand r19=0x1c,r19\n-\tld8 r17=[in2]\n-\t;;\n-\tld8 r18=[r2]\n-\tmov ar.rsc=r19\n-\t;;\n-\tmov ar.bspstore=r16\n-\t;;\n-\tmov ar.rnat=r17\n-\tmov ar.pfs=r18\n-\tor r19=0x3,r19\n-\t;;\n-\tloadrs\n-\tinvala\n-\tmov r7=r32\n-.L0:\t{\n-\tmov ar.rsc=r19\n-\tmov r15=r35\n-\tbr.ret.sptk.few rp\n+\t{ .mmi\n+\t  alloc r20 = ar.pfs, 3, 0, 0, 0\n+\t  ld8 r12 = [in1], 8\n+\t  mov.ret.sptk rp = in0, .L0\n+\t  ;;\n+\t}\n+\t{ .mmf\n+\t  ld8 r16 = [in1], 8\n+\t  mov r19 = ar.rsc\n+\t  ;;\n+\t}\n+\t{ .mmi\n+\t  flushrs\n+\t  ld8 r17 = [in1], 8\n+\t  and r19 = 0x1c, r19\n+\t  ;;\n+\t}\n+\t{ .mmi\n+\t  ld8 r18 = [in1]\n+\t  mov ar.rsc = r19\n+\t  or r19 = 0x3, r19\n+\t  ;;\n+\t}\n+\t{ .mmi\n+\t  mov ar.bspstore = r16\n+\t  ;;\n+\t  mov ar.rnat = r17\n+\t  ;;\n+\t}\n+\t{ .mmi\n+\t  loadrs\n+\t  invala\n+\t  mov r15 = in2\n+\t  ;;\n+\t}\n+.L0:\t{ .mib\n+\t  mov ar.rsc = r19\n+\t  mov ar.pfs = r18\n+\t  br.ret.sptk.few rp\n+\t  ;;\n \t}\n-\t;;\n \t.endp __ia64_nonlocal_goto\n #endif\n \n@@ -640,31 +662,84 @@ __ia64_nonlocal_goto:\n \t.global __ia64_restore_stack_nonlocal\n \t.proc __ia64_restore_stack_nonlocal\n __ia64_restore_stack_nonlocal:\n-\talloc r20=ar.pfs,4,0,0,0\n-\tmov r19=ar.rsc\n-\tadds r2=8,in0\n-\tld8 r12=[in0],16\n-\t;;\n-\tflushrs\n-\tld8 r16=[r2],16\n-\tand r19=0x1c,r19\n-\tld8 r17=[in0]\n-\t;;\n-\tld8 r18=[r2]\n-\tmov ar.rsc=r19\n-\t;;\n-\tmov ar.bspstore=r16\n-\t;;\n-\tmov ar.rnat=r17\n-\tmov ar.pfs=r18\n-\tor r19=0x3,r19\n-\t;;\n-\tloadrs\n-\tinvala\n-.L0:\t{\n-\tmov ar.rsc=r19\n-\tbr.ret.sptk.few rp\n+\t{ .mmf\n+\t  alloc r20 = ar.pfs, 4, 0, 0, 0\n+\t  ld8 r12 = [in0], 8\n+\t  ;;\n+\t}\n+\t{ .mmb\n+\t  ld8 r16=[in0], 8\n+\t  mov r19 = ar.rsc\n+\t  ;;\n+\t}\n+\t{ .mmi\n+\t  flushrs\n+\t  ld8 r17 = [in0], 8\n+\t  and r19 = 0x1c, r19\n+\t  ;;\n+\t}\n+\t{ .mmf\n+\t  ld8 r18 = [in0]\n+\t  mov ar.rsc = r19\n+\t  ;;\n+\t}\n+\t{ .mmi\n+\t  mov ar.bspstore = r16\n+\t  ;;\n+\t  mov ar.rnat = r17\n+\t  or r19 = 0x3, r19\n+\t  ;;\n+\t}\n+\t{ .mmf\n+\t  loadrs\n+\t  invala\n+\t  ;;\n+\t}\n+.L0:\t{ .mib\n+\t  mov ar.rsc = r19\n+\t  mov ar.pfs = r18\n+\t  br.ret.sptk.few rp\n+\t  ;;\n \t}\n-\t;;\n \t.endp __ia64_restore_stack_nonlocal\n #endif\n+\n+#ifdef L__trampoline\n+// Implement the nested function trampoline.  This is out of line\n+// so that we don't have to bother with flushing the icache, as\n+// well as making the on-stack trampoline smaller.\n+//\n+// The trampoline has the following form:\n+//\n+//\t\t+-------------------+ \\ \n+//\tTRAMP:\t| __ia64_trampoline | |\n+//\t\t+-------------------+  > fake function descriptor\n+//\t\t| TRAMP+16          | |\n+//\t\t+-------------------+ /\n+//\t\t| target descriptor |\n+//\t\t+-------------------+\n+//\t\t| static link\t    |\n+//\t\t+-------------------+\n+\n+\t.text\n+\t.align 16\n+\t.global __ia64_trampoline\n+\t.proc __ia64_trampoline\n+__ia64_trampoline:\n+\t{ .mmi\n+\t  ld8 r2 = [r1], 8\n+\t  ;;\n+\t  ld8 r15 = [r1]\n+\t}\n+\t{ .mmi\n+\t  ld8 r3 = [r2], 8\n+\t  ;;\n+\t  ld8 r1 = [r2]\n+\t  mov b6 = r3\n+\t}\n+\t{ .bbb\n+\t  br.sptk.many b6\n+\t  ;;\n+\t}\n+\t.endp __ia64_trampoline\n+#endif"}, {"sha": "e269fdd23db4f2534f242ac805ae690823835567", "filename": "gcc/config/ia64/sysv4.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e242b0a71b4d685eca7514da77f8058adbda38/gcc%2Fconfig%2Fia64%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e242b0a71b4d685eca7514da77f8058adbda38/gcc%2Fconfig%2Fia64%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fsysv4.h?ref=97e242b0a71b4d685eca7514da77f8058adbda38", "patch": "@@ -115,14 +115,8 @@ while (0)\n   } while (0)\n \n /* svr4.h undefines this, so we need to define it here.  */\n-#define DBX_REGISTER_NUMBER(REGNO) \t\t\t\t\t\\\n-  (IN_REGNO_P (REGNO) ? (32 + (REGNO) - IN_REG (0)) \t\t\t\\\n-   : LOC_REGNO_P (REGNO) ? (32 + ia64_input_regs +\t\t\t\\\n-\t\t\t    (REGNO) - LOC_REG (0))\t\t\t\\\n-   : OUT_REGNO_P (REGNO) ? (32 + ia64_input_regs + ia64_local_regs\t\\\n-\t\t\t    + (REGNO) - OUT_REG (0))\t\t\t\\\n-   : (REGNO) == FRAME_POINTER_REGNUM ? ia64_fp_regno \t\t\t\\\n-   : (REGNO))\n+#define DBX_REGISTER_NUMBER(REGNO) \\\n+  ia64_dbx_register_number(REGNO)\n \n /* Things that svr4.h defines to the wrong type, because it assumes 32 bit\n    ints and 32 bit longs.  */"}, {"sha": "5f59c5bb500d3f020a026c7689fd68e84640f3ac", "filename": "gcc/config/ia64/t-ia64", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e242b0a71b4d685eca7514da77f8058adbda38/gcc%2Fconfig%2Fia64%2Ft-ia64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e242b0a71b4d685eca7514da77f8058adbda38/gcc%2Fconfig%2Fia64%2Ft-ia64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ft-ia64?ref=97e242b0a71b4d685eca7514da77f8058adbda38", "patch": "@@ -11,7 +11,7 @@ LIB1ASMSRC    = ia64/lib1funcs.asm\n LIB1ASMFUNCS  = __divdf3 __divsf3 \\\n \t__divdi3 __moddi3 __udivdi3 __umoddi3 \\\n \t__divsi3 __modsi3 __udivsi3 __umodsi3 __save_stack_nonlocal \\\n-\t__nonlocal_goto __restore_stack_nonlocal\n+\t__nonlocal_goto __restore_stack_nonlocal __trampoline\n \n # ??? Hack to get -P option used when compiling lib1funcs.asm, because Intel\n # assembler does not accept # line number as a comment."}]}