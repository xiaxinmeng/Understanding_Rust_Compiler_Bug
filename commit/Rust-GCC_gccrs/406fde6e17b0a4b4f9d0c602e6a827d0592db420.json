{"sha": "406fde6e17b0a4b4f9d0c602e6a827d0592db420", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA2ZmRlNmUxN2IwYTRiNGY5ZDBjNjAyZTZhODI3ZDA1OTJkYjQyMA==", "commit": {"author": {"name": "Dominik Vogt", "email": "vogt@linux.vnet.ibm.com", "date": "2017-02-06T11:42:07Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-02-06T11:42:07Z"}, "message": "S/390: Use macros from hwint.h where possible.\n\ngcc/ChangeLog:\n\n2017-02-06  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n\n\t* config/s390/predicates.md (\"larl_operand\"): Use macros from hwint.h.\n\t* config/s390/s390.c (s390_const_operand_ok)\n\t(s390_canonicalize_comparison, s390_extract_part)\n\t(s390_single_part, s390_contiguous_bitmask_nowrap_p)\n\t(s390_contiguous_bitmask_p, s390_rtx_costs)\n\t(legitimize_pic_address): Likewise.\n\t* config/s390/s390.md (\"clzdi2\", \"clztidi2\"): Likewise.\n\t* config/s390/vx-builtins.md (\"vec_genbytemaskv16qi\")\n\t(\"vec_permi<mode>\", \"vfae<mode>\", \"*vfaes<mode>\", \"vstrc<mode>\")\n\t(\"*vstrcs<mode>\"): Use UINTVAL() to set unsigned HOST_WIDE_INT.\n\t* config/s390/vector.md (\"vec_vfenes<mode>\"): Likewise.\n\nFrom-SVN: r245207", "tree": {"sha": "08f4432bf6966ab9d9e1f7666d7deab941683c8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08f4432bf6966ab9d9e1f7666d7deab941683c8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/406fde6e17b0a4b4f9d0c602e6a827d0592db420", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/406fde6e17b0a4b4f9d0c602e6a827d0592db420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/406fde6e17b0a4b4f9d0c602e6a827d0592db420", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/406fde6e17b0a4b4f9d0c602e6a827d0592db420/comments", "author": {"login": "vogtd", "id": 9690100, "node_id": "MDQ6VXNlcjk2OTAxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/9690100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vogtd", "html_url": "https://github.com/vogtd", "followers_url": "https://api.github.com/users/vogtd/followers", "following_url": "https://api.github.com/users/vogtd/following{/other_user}", "gists_url": "https://api.github.com/users/vogtd/gists{/gist_id}", "starred_url": "https://api.github.com/users/vogtd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vogtd/subscriptions", "organizations_url": "https://api.github.com/users/vogtd/orgs", "repos_url": "https://api.github.com/users/vogtd/repos", "events_url": "https://api.github.com/users/vogtd/events{/privacy}", "received_events_url": "https://api.github.com/users/vogtd/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e58aefec437e9d9da7a757a3c43aa5fba9ca8dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e58aefec437e9d9da7a757a3c43aa5fba9ca8dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e58aefec437e9d9da7a757a3c43aa5fba9ca8dc"}], "stats": {"total": 87, "additions": 49, "deletions": 38}, "files": [{"sha": "17f415a5ff30863efc8ca792bebb7eb0541b406e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406fde6e17b0a4b4f9d0c602e6a827d0592db420/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406fde6e17b0a4b4f9d0c602e6a827d0592db420/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=406fde6e17b0a4b4f9d0c602e6a827d0592db420", "patch": "@@ -1,3 +1,17 @@\n+2017-02-06  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\t* config/s390/predicates.md (\"larl_operand\"): Use macros from hwint.h.\n+\t* config/s390/s390.c (s390_const_operand_ok)\n+\t(s390_canonicalize_comparison, s390_extract_part)\n+\t(s390_single_part, s390_contiguous_bitmask_nowrap_p)\n+\t(s390_contiguous_bitmask_p, s390_rtx_costs)\n+\t(legitimize_pic_address): Likewise.\n+\t* config/s390/s390.md (\"clzdi2\", \"clztidi2\"): Likewise.\n+\t* config/s390/vx-builtins.md (\"vec_genbytemaskv16qi\")\n+\t(\"vec_permi<mode>\", \"vfae<mode>\", \"*vfaes<mode>\", \"vstrc<mode>\")\n+\t(\"*vstrcs<mode>\"): Use UINTVAL() to set unsigned HOST_WIDE_INT.\n+\t* config/s390/vector.md (\"vec_vfenes<mode>\"): Likewise.\n+\n 2017-02-06  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr.md (*addhi3_zero_extend): Add alternative where"}, {"sha": "0c82efc01cd28c32c8d5b0c96da68103476424c2", "filename": "gcc/config/s390/predicates.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406fde6e17b0a4b4f9d0c602e6a827d0592db420/gcc%2Fconfig%2Fs390%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406fde6e17b0a4b4f9d0c602e6a827d0592db420/gcc%2Fconfig%2Fs390%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fpredicates.md?ref=406fde6e17b0a4b4f9d0c602e6a827d0592db420", "patch": "@@ -147,8 +147,8 @@\n       if (GET_CODE (XEXP (op, 1)) != CONST_INT\n           || (INTVAL (XEXP (op, 1)) & 1) != 0)\n         return false;\n-      if (INTVAL (XEXP (op, 1)) >= (HOST_WIDE_INT)1 << 31\n-\t  || INTVAL (XEXP (op, 1)) < -((HOST_WIDE_INT)1 << 31))\n+      if (INTVAL (XEXP (op, 1)) >= HOST_WIDE_INT_1 << 31\n+\t  || INTVAL (XEXP (op, 1)) < -(HOST_WIDE_INT_1 << 31))\n         return false;\n       op = XEXP (op, 0);\n     }"}, {"sha": "9c4e641e5ad809cf921491ad176a3afe6c95fc4d", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406fde6e17b0a4b4f9d0c602e6a827d0592db420/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406fde6e17b0a4b4f9d0c602e6a827d0592db420/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=406fde6e17b0a4b4f9d0c602e6a827d0592db420", "patch": "@@ -750,12 +750,12 @@ s390_const_operand_ok (tree arg, int argnum, int op_flags, tree decl)\n       int bitwidth = bitwidths[op_flags - O_U1];\n \n       if (!tree_fits_uhwi_p (arg)\n-\t  || tree_to_uhwi (arg) > ((unsigned HOST_WIDE_INT)1 << bitwidth) - 1)\n+\t  || tree_to_uhwi (arg) > (HOST_WIDE_INT_1U << bitwidth) - 1)\n \t{\n \t  error(\"constant argument %d for builtin %qF is out of range (0..\"\n \t\tHOST_WIDE_INT_PRINT_UNSIGNED \")\",\n \t\targnum, decl,\n-\t\t((unsigned HOST_WIDE_INT)1 << bitwidth) - 1);\n+\t\t(HOST_WIDE_INT_1U << bitwidth) - 1);\n \t  return false;\n \t}\n     }\n@@ -766,15 +766,15 @@ s390_const_operand_ok (tree arg, int argnum, int op_flags, tree decl)\n       int bitwidth = bitwidths[op_flags - O_S2];\n \n       if (!tree_fits_shwi_p (arg)\n-\t  || tree_to_shwi (arg) < -((HOST_WIDE_INT)1 << (bitwidth - 1))\n-\t  || tree_to_shwi (arg) > (((HOST_WIDE_INT)1 << (bitwidth - 1)) - 1))\n+\t  || tree_to_shwi (arg) < -(HOST_WIDE_INT_1 << (bitwidth - 1))\n+\t  || tree_to_shwi (arg) > ((HOST_WIDE_INT_1 << (bitwidth - 1)) - 1))\n \t{\n \t  error(\"constant argument %d for builtin %qF is out of range (\"\n \t\tHOST_WIDE_INT_PRINT_DEC \"..\"\n \t\tHOST_WIDE_INT_PRINT_DEC \")\",\n \t\targnum, decl,\n-\t\t-((HOST_WIDE_INT)1 << (bitwidth - 1)),\n-\t\t((HOST_WIDE_INT)1 << (bitwidth - 1)) - 1);\n+\t\t-(HOST_WIDE_INT_1 << (bitwidth - 1)),\n+\t\t(HOST_WIDE_INT_1 << (bitwidth - 1)) - 1);\n \t  return false;\n \t}\n     }\n@@ -1561,7 +1561,7 @@ s390_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n \t  && modesize <= HOST_BITS_PER_WIDE_INT)\n \t{\n \t  unsigned HOST_WIDE_INT block;\n-\t  block = ((unsigned HOST_WIDE_INT) 1 << len) - 1;\n+\t  block = (HOST_WIDE_INT_1U << len) - 1;\n \t  block <<= modesize - pos - len;\n \n \t  *op0 = gen_rtx_AND (GET_MODE (inner), inner,\n@@ -1610,7 +1610,7 @@ s390_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n       && INTVAL (*op1) == 0xffff\n       && SCALAR_INT_MODE_P (GET_MODE (*op0))\n       && (nonzero_bits (*op0, GET_MODE (*op0))\n-\t  & ~(unsigned HOST_WIDE_INT) 0xffff) == 0)\n+\t  & ~HOST_WIDE_INT_UC (0xffff)) == 0)\n     {\n       *op0 = gen_lowpart (HImode, *op0);\n       *op1 = constm1_rtx;\n@@ -2212,14 +2212,13 @@ s390_extract_part (rtx op, machine_mode mode, int def)\n   unsigned HOST_WIDE_INT value = 0;\n   int max_parts = HOST_BITS_PER_WIDE_INT / GET_MODE_BITSIZE (mode);\n   int part_bits = GET_MODE_BITSIZE (mode);\n-  unsigned HOST_WIDE_INT part_mask\n-    = ((unsigned HOST_WIDE_INT)1 << part_bits) - 1;\n+  unsigned HOST_WIDE_INT part_mask = (HOST_WIDE_INT_1U << part_bits) - 1;\n   int i;\n \n   for (i = 0; i < max_parts; i++)\n     {\n       if (i == 0)\n-\tvalue = (unsigned HOST_WIDE_INT) INTVAL (op);\n+\tvalue = UINTVAL (op);\n       else\n \tvalue >>= part_bits;\n \n@@ -2243,7 +2242,7 @@ s390_single_part (rtx op,\n   unsigned HOST_WIDE_INT value = 0;\n   int n_parts = GET_MODE_SIZE (mode) / GET_MODE_SIZE (part_mode);\n   unsigned HOST_WIDE_INT part_mask\n-    = ((unsigned HOST_WIDE_INT)1 << GET_MODE_BITSIZE (part_mode)) - 1;\n+    = (HOST_WIDE_INT_1U << GET_MODE_BITSIZE (part_mode)) - 1;\n   int i, part = -1;\n \n   if (GET_CODE (op) != CONST_INT)\n@@ -2252,7 +2251,7 @@ s390_single_part (rtx op,\n   for (i = 0; i < n_parts; i++)\n     {\n       if (i == 0)\n-\tvalue = (unsigned HOST_WIDE_INT) INTVAL (op);\n+\tvalue = UINTVAL (op);\n       else\n \tvalue >>= GET_MODE_BITSIZE (part_mode);\n \n@@ -2282,9 +2281,9 @@ s390_contiguous_bitmask_nowrap_p (unsigned HOST_WIDE_INT in, int size,\n {\n   int start;\n   int end = -1;\n-  int lowbit = sizeof (HOST_WIDE_INT) * BITS_PER_UNIT - 1;\n-  int highbit = sizeof (HOST_WIDE_INT) * BITS_PER_UNIT - size;\n-  unsigned HOST_WIDE_INT bitmask = 1ULL;\n+  int lowbit = HOST_BITS_PER_WIDE_INT - 1;\n+  int highbit = HOST_BITS_PER_WIDE_INT - size;\n+  unsigned HOST_WIDE_INT bitmask = HOST_WIDE_INT_1U;\n \n   gcc_assert (!!pstart == !!pend);\n   for (start = lowbit; start >= highbit; bitmask <<= 1, start--)\n@@ -2314,7 +2313,8 @@ s390_contiguous_bitmask_nowrap_p (unsigned HOST_WIDE_INT in, int size,\n       unsigned HOST_WIDE_INT mask;\n \n       /* Calculate a mask for all bits beyond the contiguous bits.  */\n-      mask = ((~(0ULL) >> highbit) & (~(0ULL) << (lowbit - start + 1)));\n+      mask = ((~HOST_WIDE_INT_0U >> highbit)\n+\t      & (~HOST_WIDE_INT_0U << (lowbit - start + 1)));\n       if (mask & in)\n \t/* There are more bits set beyond the first range of one bits.  */\n \treturn false;\n@@ -2343,11 +2343,11 @@ bool\n s390_contiguous_bitmask_p (unsigned HOST_WIDE_INT in, bool wrap_p,\n \t\t\t   int size, int *start, int *end)\n {\n-  int bs = sizeof (HOST_WIDE_INT) * BITS_PER_UNIT;\n+  int bs = HOST_BITS_PER_WIDE_INT;\n   bool b;\n \n   gcc_assert (!!start == !!end);\n-  if ((in & ((~(0ULL)) >> (bs - size))) == 0)\n+  if ((in & ((~HOST_WIDE_INT_0U) >> (bs - size))) == 0)\n     /* This cannot be expressed as a contiguous bitmask.  Exit early because\n        the second call of s390_contiguous_bitmask_nowrap_p would accept this as\n        a valid bitmask.  */\n@@ -2406,10 +2406,8 @@ s390_contiguous_bitmask_vector_p (rtx op, int *start, int *end)\n     {\n       if (start)\n \t{\n-\t  int bs = sizeof (HOST_WIDE_INT) * BITS_PER_UNIT;\n-\n-\t  *start -= (bs - size);\n-\t  *end -= (bs - size);\n+\t  *start -= (HOST_BITS_PER_WIDE_INT - size);\n+\t  *end -= (HOST_BITS_PER_WIDE_INT - size);\n \t}\n       return true;\n     }\n@@ -3470,7 +3468,7 @@ s390_rtx_costs (rtx x, machine_mode mode, int outer_code,\n \t  && CONST_INT_P (XEXP (XEXP (x, 0), 1))\n \t  && CONST_INT_P (XEXP (XEXP (x, 1), 1))\n \t  && (UINTVAL (XEXP (XEXP (x, 0), 1)) ==\n-\t      (1UL << UINTVAL (XEXP (XEXP (x, 1), 1))) - 1))\n+\t      (HOST_WIDE_INT_1U << UINTVAL (XEXP (XEXP (x, 1), 1))) - 1))\n \t{\n \t  *total = COSTS_N_INSNS (2);\n \t  return true;\n@@ -4596,8 +4594,8 @@ legitimize_pic_address (rtx orig, rtx reg)\n \n       if (TARGET_CPU_ZARCH\n \t  && larl_operand (const_addr, VOIDmode)\n-\t  && INTVAL (addend) < (HOST_WIDE_INT)1 << 31\n-\t  && INTVAL (addend) >= -((HOST_WIDE_INT)1 << 31))\n+\t  && INTVAL (addend) < HOST_WIDE_INT_1 << 31\n+\t  && INTVAL (addend) >= -(HOST_WIDE_INT_1 << 31))\n \t{\n \t  if (INTVAL (addend) & 1)\n \t    {"}, {"sha": "cbf8c0a1ed61f2380ed54c4e4cf765ea502cf564", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406fde6e17b0a4b4f9d0c602e6a827d0592db420/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406fde6e17b0a4b4f9d0c602e6a827d0592db420/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=406fde6e17b0a4b4f9d0c602e6a827d0592db420", "patch": "@@ -8626,7 +8626,7 @@\n   rtx_insn *insn;\n   rtx clz_equal;\n   rtx wide_reg = gen_reg_rtx (TImode);\n-  rtx msb = gen_rtx_CONST_INT (DImode, (unsigned HOST_WIDE_INT) 1 << 63);\n+  rtx msb = gen_rtx_CONST_INT (DImode, HOST_WIDE_INT_1U << 63);\n \n   clz_equal = gen_rtx_CLZ (DImode, operands[1]);\n \n@@ -8650,8 +8650,7 @@\n \t    (const_int 64))\n           (zero_extend:TI (clz:DI (match_dup 1)))))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"(unsigned HOST_WIDE_INT) INTVAL (operands[2])\n-   == (unsigned HOST_WIDE_INT) 1 << 63\n+  \"UINTVAL (operands[2]) == HOST_WIDE_INT_1U << 63\n    && TARGET_EXTIMM && TARGET_ZARCH\"\n   \"flogr\\t%0,%1\"\n   [(set_attr \"op_type\"  \"RRE\")])"}, {"sha": "4b5d43bf5d4696bb8c26908fd30ac84e83dbe334", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406fde6e17b0a4b4f9d0c602e6a827d0592db420/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406fde6e17b0a4b4f9d0c602e6a827d0592db420/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=406fde6e17b0a4b4f9d0c602e6a827d0592db420", "patch": "@@ -1118,7 +1118,7 @@\n \t\t      UNSPEC_VEC_VFENECC))]\n   \"TARGET_VX\"\n {\n-  unsigned HOST_WIDE_INT flags = INTVAL (operands[3]);\n+  unsigned HOST_WIDE_INT flags = UINTVAL (operands[3]);\n \n   gcc_assert (!(flags & ~(VSTRING_FLAG_ZS | VSTRING_FLAG_CS)));\n   flags &= ~VSTRING_FLAG_CS;"}, {"sha": "1e9010ac909448628bf7a1e03b3e9a1aaa886ef7", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406fde6e17b0a4b4f9d0c602e6a827d0592db420/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406fde6e17b0a4b4f9d0c602e6a827d0592db420/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=406fde6e17b0a4b4f9d0c602e6a827d0592db420", "patch": "@@ -126,7 +126,7 @@\n   int i;\n   unsigned mask = 0x8000;\n   rtx const_vec[16];\n-  unsigned HOST_WIDE_INT byte_mask = INTVAL (operands[1]);\n+  unsigned HOST_WIDE_INT byte_mask = UINTVAL (operands[1]);\n \n   for (i = 0; i < 16; i++)\n     {\n@@ -1232,7 +1232,7 @@\n \t\t\t  UNSPEC_VEC_VFAE))]\n   \"TARGET_VX\"\n {\n-  unsigned HOST_WIDE_INT flags = INTVAL (operands[3]);\n+  unsigned HOST_WIDE_INT flags = UINTVAL (operands[3]);\n \n   if (flags & VSTRING_FLAG_ZS)\n     {\n@@ -1259,7 +1259,7 @@\n \t\t      UNSPEC_VEC_VFAECC))]\n   \"TARGET_VX\"\n {\n-  unsigned HOST_WIDE_INT flags = INTVAL (operands[3]);\n+  unsigned HOST_WIDE_INT flags = UINTVAL (operands[3]);\n \n   if (flags & VSTRING_FLAG_ZS)\n     {\n@@ -1338,7 +1338,7 @@\n \t\t      UNSPEC_VEC_VFEECC))]\n   \"TARGET_VX\"\n {\n-  unsigned HOST_WIDE_INT flags = INTVAL (operands[3]);\n+  unsigned HOST_WIDE_INT flags = UINTVAL (operands[3]);\n \n   gcc_assert (!(flags & ~(VSTRING_FLAG_ZS | VSTRING_FLAG_CS)));\n   flags &= ~VSTRING_FLAG_CS;\n@@ -1515,7 +1515,7 @@\n \t\t\t  UNSPEC_VEC_VSTRC))]\n   \"TARGET_VX\"\n {\n-  unsigned HOST_WIDE_INT flags = INTVAL (operands[4]);\n+  unsigned HOST_WIDE_INT flags = UINTVAL (operands[4]);\n \n   if (flags & VSTRING_FLAG_ZS)\n     {\n@@ -1544,7 +1544,7 @@\n \t\t      UNSPEC_VEC_VSTRCCC))]\n   \"TARGET_VX\"\n {\n-  unsigned HOST_WIDE_INT flags = INTVAL (operands[4]);\n+  unsigned HOST_WIDE_INT flags = UINTVAL (operands[4]);\n \n   if (flags & VSTRING_FLAG_ZS)\n     {"}]}