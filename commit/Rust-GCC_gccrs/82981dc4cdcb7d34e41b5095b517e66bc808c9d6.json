{"sha": "82981dc4cdcb7d34e41b5095b517e66bc808c9d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI5ODFkYzRjZGNiN2QzNGU0MWI1MDk1YjUxN2U2NmJjODA4YzlkNg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2012-06-19T13:41:43Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2012-06-19T13:41:43Z"}, "message": "arm.md (enum unspec): Delete UNSPEC_SIN and UNSPEC_COS.\n\n\t* arm.md (enum unspec): Delete UNSPEC_SIN and UNSPEC_COS.\n\t(attr type): Remove fmul, ffmul, farith, ffarith, float_em\n\tf_fpa_load, f_fpa_store, f_mem_r, r_mem_f.\n\t(attr write_conflict, attr core_cycles): Update.\n\t* arm-generic.md (r_mem_f_wbuf): Delete reservation.\n\nFrom-SVN: r188778", "tree": {"sha": "835a43eb666c1c999173f10517a57e7e969daf77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/835a43eb666c1c999173f10517a57e7e969daf77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82981dc4cdcb7d34e41b5095b517e66bc808c9d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82981dc4cdcb7d34e41b5095b517e66bc808c9d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82981dc4cdcb7d34e41b5095b517e66bc808c9d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82981dc4cdcb7d34e41b5095b517e66bc808c9d6/comments", "author": null, "committer": null, "parents": [{"sha": "105b7208d1f4630a29c09c31b5273b1c602a04c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105b7208d1f4630a29c09c31b5273b1c602a04c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/105b7208d1f4630a29c09c31b5273b1c602a04c1"}], "stats": {"total": 99, "additions": 62, "deletions": 37}, "files": [{"sha": "281ec22ec619848dc5014a4f181231ac2956f741", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82981dc4cdcb7d34e41b5095b517e66bc808c9d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82981dc4cdcb7d34e41b5095b517e66bc808c9d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82981dc4cdcb7d34e41b5095b517e66bc808c9d6", "patch": "@@ -1,3 +1,11 @@\n+2012-06-19  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.md (enum unspec): Delete UNSPEC_SIN and UNSPEC_COS.\n+\t(attr type): Remove fmul, ffmul, farith, ffarith, float_em\n+\tf_fpa_load, f_fpa_store, f_mem_r, r_mem_f.\n+\t(attr write_conflict, attr core_cycles): Update.\n+\t* arm-generic.md (r_mem_f_wbuf): Delete reservation.\n+\n 2012-06-19  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-vrp.c (intersect_ranges): Handle more cases."}, {"sha": "65fce7d23439556e949c7a0c129da9a16ec85316", "filename": "gcc/config/arm/arm-generic.md", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82981dc4cdcb7d34e41b5095b517e66bc808c9d6/gcc%2Fconfig%2Farm%2Farm-generic.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82981dc4cdcb7d34e41b5095b517e66bc808c9d6/gcc%2Fconfig%2Farm%2Farm-generic.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-generic.md?ref=82981dc4cdcb7d34e41b5095b517e66bc808c9d6", "patch": "@@ -38,20 +38,12 @@\n ;\n ; The write_blockage unit models (partially), the fact that reads will stall\n ; until the write buffer empties.\n-; The f_mem_r and r_mem_f could also block, but they are to the stack,\n-; so we don't model them here\n (define_cpu_unit \"write_blockage\" \"arm\")\n \n ;; Core\n ;\n (define_cpu_unit \"core\" \"arm\")\n \n-(define_insn_reservation \"r_mem_f_wbuf\" 5\n-  (and (eq_attr \"generic_sched\" \"yes\")\n-       (and (eq_attr \"model_wbuf\" \"yes\")\n-\t    (eq_attr \"type\" \"r_mem_f\")))\n-  \"core+write_buf*3\")\n-\n (define_insn_reservation \"store_wbuf\" 5\n   (and (eq_attr \"generic_sched\" \"yes\")\n        (and (eq_attr \"model_wbuf\" \"yes\")"}, {"sha": "0654564de1b3efc5b70dfcf288eb2efd9b7fa131", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 54, "deletions": 29, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82981dc4cdcb7d34e41b5095b517e66bc808c9d6/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82981dc4cdcb7d34e41b5095b517e66bc808c9d6/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=82981dc4cdcb7d34e41b5095b517e66bc808c9d6", "patch": "@@ -65,12 +65,6 @@\n ;; Unspec enumerators for iwmmxt2 are defined in iwmmxt2.md\n \n (define_c_enum \"unspec\" [\n-  UNSPEC_SIN            ; `sin' operation (MODE_FLOAT):\n-                        ;   operand 0 is the result,\n-                        ;   operand 1 the parameter.\n-  UNPSEC_COS            ; `cos' operation (MODE_FLOAT):\n-                        ;   operand 0 is the result,\n-                        ;   operand 1 the parameter.\n   UNSPEC_PUSH_MULT      ; `push multiple' operation:\n                         ;   operand 0 is the first register,\n                         ;   subsequent registers are in parallel (use ...)\n@@ -321,21 +315,11 @@\n ; float\t\ta floating point arithmetic operation (subject to expansion)\n ; fdivd\t\tDFmode floating point division\n ; fdivs\t\tSFmode floating point division\n-; fmul\t\tFloating point multiply\n-; ffmul\t\tFast floating point multiply\n-; farith\tFloating point arithmetic (4 cycle)\n-; ffarith\tFast floating point arithmetic (2 cycle)\n-; float_em\ta floating point arithmetic operation that is normally emulated\n-;\t\teven on a machine with an fpa.\n-; f_fpa_load\ta floating point load from memory. Only for the FPA.\n-; f_fpa_store\ta floating point store to memory. Only for the FPA.\n ; f_load[sd]\tA single/double load from memory. Used for VFP unit.\n ; f_store[sd]\tA single/double store to memory. Used for VFP unit.\n ; f_flag\ta transfer of co-processor flags to the CPSR\n-; f_mem_r\ta transfer of a floating point register to a real reg via mem\n-; r_mem_f\tthe reverse of f_mem_r\n-; f_2_r\t\tfast transfer float to arm (no memory needed)\n-; r_2_f\t\tfast transfer arm to float\n+; f_2_r\t\ttransfer float to core (no memory needed)\n+; r_2_f\t\ttransfer core to float\n ; f_cvt\t\tconvert floating<->integral\n ; branch\ta branch\n ; call\t\ta subroutine call\n@@ -351,18 +335,59 @@\n ;\n \n (define_attr \"type\"\n-\t\"alu,alu_shift,alu_shift_reg,mult,block,float,fdivx,fdivd,fdivs,fmul,fmuls,fmuld,fmacs,fmacd,ffmul,farith,ffarith,f_flag,float_em,f_fpa_load,f_fpa_store,f_loads,f_loadd,f_stores,f_stored,f_mem_r,r_mem_f,f_2_r,r_2_f,f_cvt,branch,call,load_byte,load1,load2,load3,load4,store1,store2,store3,store4,fconsts,fconstd,fadds,faddd,ffariths,ffarithd,fcmps,fcmpd,fcpys\"\n-\t(if_then_else \n-\t (eq_attr \"insn\" \"smulxy,smlaxy,smlalxy,smulwy,smlawx,mul,muls,mla,mlas,umull,umulls,umlal,umlals,smull,smulls,smlal,smlals\")\n-\t (const_string \"mult\")\n-\t (const_string \"alu\")))\n+ \"alu,\\\n+  alu_shift,\\\n+  alu_shift_reg,\\\n+  mult,\\\n+  block,\\\n+  float,\\\n+  fdivd,\\\n+  fdivs,\\\n+  fmuls,\\\n+  fmuld,\\\n+  fmacs,\\\n+  fmacd,\\\n+  f_flag,\\\n+  f_loads,\\\n+  f_loadd,\\\n+  f_stores,\\\n+  f_stored,\\\n+  f_2_r,\\\n+  r_2_f,\\\n+  f_cvt,\\\n+  branch,\\\n+  call,\\\n+  load_byte,\\\n+  load1,\\\n+  load2,\\\n+  load3,\\\n+  load4,\\\n+  store1,\\\n+  store2,\\\n+  store3,\\\n+  store4,\\\n+  fconsts,\\\n+  fconstd,\\\n+  fadds,\\\n+  faddd,\\\n+  ffariths,\\\n+  ffarithd,\\\n+  fcmps,\\\n+  fcmpd,\\\n+  fcpys\"\n+ (if_then_else \n+    (eq_attr \"insn\" \"smulxy,smlaxy,smlalxy,smulwy,smlawx,mul,muls,mla,mlas,\\\n+\t     \t     umull,umulls,umlal,umlals,smull,smulls,smlal,smlals\")\n+    (const_string \"mult\")\n+    (const_string \"alu\")))\n \n ; Is this an (integer side) multiply with a 64-bit result?\n (define_attr \"mul64\" \"no,yes\"\n-\t     (if_then_else\n-\t       (eq_attr \"insn\" \"smlalxy,umull,umulls,umlal,umlals,smull,smulls,smlal,smlals\")\n-\t       (const_string \"yes\")\n-\t       (const_string \"no\")))\n+  (if_then_else\n+    (eq_attr \"insn\"\n+     \"smlalxy,umull,umulls,umlal,umlals,smull,smulls,smlal,smlals\")\n+    (const_string \"yes\")\n+    (const_string \"no\")))\n \n ; wtype for WMMX insn scheduling purposes.\n (define_attr \"wtype\"\n@@ -486,15 +511,15 @@\n ; to stall the processor.  Used with model_wbuf above.\n (define_attr \"write_conflict\" \"no,yes\"\n   (if_then_else (eq_attr \"type\"\n-\t\t \"block,float_em,f_fpa_load,f_fpa_store,f_mem_r,r_mem_f,call,load1\")\n+\t\t \"block,call,load1\")\n \t\t(const_string \"yes\")\n \t\t(const_string \"no\")))\n \n ; Classify the insns into those that take one cycle and those that take more\n ; than one on the main cpu execution unit.\n (define_attr \"core_cycles\" \"single,multi\"\n   (if_then_else (eq_attr \"type\"\n-\t\t \"alu,alu_shift,float,fdivx,fdivd,fdivs,fmul,ffmul,farith,ffarith\")\n+\t\t \"alu,alu_shift,float,fdivd,fdivs\")\n \t\t(const_string \"single\")\n \t        (const_string \"multi\")))\n "}]}