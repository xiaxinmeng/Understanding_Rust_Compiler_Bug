{"sha": "6da3cab7b0acf5dc363c85069bef716923ddf90c", "node_id": "C_kwDOANBUbNoAKDZkYTNjYWI3YjBhY2Y1ZGMzNjNjODUwNjliZWY3MTY5MjNkZGY5MGM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-09-22T12:20:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-22T12:20:49Z"}, "message": "Merge #1541\n\n1541: Static const eval safety r=philberty a=philberty\n\nThis adds a test case for the rust issue: https://blog.rust-lang.org/2022/09/15/const-eval-safety-rule-revision.html\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "4f78124e43846c0dfb272858ed60cc681236a140", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f78124e43846c0dfb272858ed60cc681236a140"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6da3cab7b0acf5dc363c85069bef716923ddf90c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjLFMhCRBK7hj4Ov3rIwAAYuIIAF4Y6oD1O2EeoREuClKQD4qI\nPy+GB4X/dXSEBmfuBmv4iz/le/l1xrKPxjqNcZSlaRDi1e3SjQjrNkAZEZWhJ6pD\nOGPnN9EgRGbBxoD7xq3m661Vktuyt9pi58VLzV2jwGuusHEjlAxLZfJK7WPICYk7\nFARszp+I1nDjy2OmeSKm4SSQVjb4EbO+SWARUUjfq1Q0sps4vf1aGvp9a+by8GEM\n7dCgvh3G+yhWPapXGyhhwKrFwrT+di9Tnab0emgKR4MKkbTJn4PPo9p/GmsuRne5\nSJt/E8IfSTDVy3D6b63lKLIhTFB1nBRakEugS0KQib7dVaAzrQCsp/Zom860Amc=\n=7PVa\n-----END PGP SIGNATURE-----\n", "payload": "tree 4f78124e43846c0dfb272858ed60cc681236a140\nparent f252b4093666cf1e3d948b22f00fc12bf283a83f\nparent 5f01d6c53734802955568771e75df68ffc2fd0d8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1663849249 +0000\ncommitter GitHub <noreply@github.com> 1663849249 +0000\n\nMerge #1541\n\n1541: Static const eval safety r=philberty a=philberty\n\nThis adds a test case for the rust issue: https://blog.rust-lang.org/2022/09/15/const-eval-safety-rule-revision.html\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6da3cab7b0acf5dc363c85069bef716923ddf90c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6da3cab7b0acf5dc363c85069bef716923ddf90c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6da3cab7b0acf5dc363c85069bef716923ddf90c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f252b4093666cf1e3d948b22f00fc12bf283a83f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f252b4093666cf1e3d948b22f00fc12bf283a83f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f252b4093666cf1e3d948b22f00fc12bf283a83f"}, {"sha": "5f01d6c53734802955568771e75df68ffc2fd0d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f01d6c53734802955568771e75df68ffc2fd0d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f01d6c53734802955568771e75df68ffc2fd0d8"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "8ba17c9ff0d7bb3976893383d9622b5a38fcaa7a", "filename": "gcc/rust/backend/rust-compile-item.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da3cab7b0acf5dc363c85069bef716923ddf90c/gcc%2Frust%2Fbackend%2Frust-compile-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da3cab7b0acf5dc363c85069bef716923ddf90c/gcc%2Frust%2Fbackend%2Frust-compile-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.cc?ref=6da3cab7b0acf5dc363c85069bef716923ddf90c", "patch": "@@ -43,13 +43,18 @@ CompileItem::visit (HIR::StaticItem &var)\n   rust_assert (ok);\n \n   tree type = TyTyResolveCompile::compile (ctx, resolved_type);\n-  tree value = CompileExpr::Compile (var.get_expr (), ctx);\n \n   const Resolver::CanonicalPath *canonical_path = nullptr;\n   ok = ctx->get_mappings ()->lookup_canonical_path (\n     var.get_mappings ().get_nodeid (), &canonical_path);\n   rust_assert (ok);\n \n+  HIR::Expr *const_value_expr = var.get_expr ();\n+  ctx->push_const_context ();\n+  tree value = compile_constant_item (ctx, resolved_type, canonical_path,\n+\t\t\t\t      const_value_expr, var.get_locus ());\n+  ctx->pop_const_context ();\n+\n   std::string name = canonical_path->get ();\n   std::string asm_name = ctx->mangle_item (resolved_type, *canonical_path);\n "}, {"sha": "0c393d9635bd056706e39ef23d36ff769e500c1b", "filename": "gcc/rust/backend/rust-tree.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da3cab7b0acf5dc363c85069bef716923ddf90c/gcc%2Frust%2Fbackend%2Frust-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da3cab7b0acf5dc363c85069bef716923ddf90c/gcc%2Frust%2Fbackend%2Frust-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-tree.cc?ref=6da3cab7b0acf5dc363c85069bef716923ddf90c", "patch": "@@ -974,9 +974,10 @@ rs_type_quals (const_tree type)\n     return TYPE_UNQUALIFIED;\n   quals = TYPE_QUALS (type);\n   /* METHOD and REFERENCE_TYPEs should never have quals.  */\n-  gcc_assert (\n-    (TREE_CODE (type) != METHOD_TYPE && !TYPE_REF_P (type))\n-    || ((quals & (TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE)) == TYPE_UNQUALIFIED));\n+  // gcc_assert (\n+  //   (TREE_CODE (type) != METHOD_TYPE && !TYPE_REF_P (type))\n+  //   || ((quals & (TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE)) ==\n+  //   TYPE_UNQUALIFIED));\n   return quals;\n }\n "}, {"sha": "a2113d00a975506eca98eca6cb4ee0e30134aa89", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da3cab7b0acf5dc363c85069bef716923ddf90c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da3cab7b0acf5dc363c85069bef716923ddf90c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.cc?ref=6da3cab7b0acf5dc363c85069bef716923ddf90c", "patch": "@@ -261,11 +261,11 @@ TypeCheckTopLevel::visit (HIR::StaticItem &var)\n   TyTy::BaseType *expr_type = TypeCheckExpr::Resolve (var.get_expr ());\n \n   TyTy::BaseType *unified\n-    = unify_site (var.get_mappings ().get_hirid (),\n-\t\t  TyTy::TyWithLocation (type, var.get_type ()->get_locus ()),\n-\t\t  TyTy::TyWithLocation (expr_type,\n-\t\t\t\t\tvar.get_expr ()->get_locus ()),\n-\t\t  var.get_locus ());\n+    = coercion_site (var.get_mappings ().get_hirid (),\n+\t\t     TyTy::TyWithLocation (type, var.get_type ()->get_locus ()),\n+\t\t     TyTy::TyWithLocation (expr_type,\n+\t\t\t\t\t   var.get_expr ()->get_locus ()),\n+\t\t     var.get_locus ());\n   context->insert_type (var.get_mappings (), unified);\n }\n "}, {"sha": "a5ea2ebacb98e5888952e024d5bebec0bc2eff5d", "filename": "gcc/testsuite/rust/compile/rust-const-blog-issue.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da3cab7b0acf5dc363c85069bef716923ddf90c/gcc%2Ftestsuite%2Frust%2Fcompile%2Frust-const-blog-issue.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da3cab7b0acf5dc363c85069bef716923ddf90c/gcc%2Ftestsuite%2Frust%2Fcompile%2Frust-const-blog-issue.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Frust-const-blog-issue.rs?ref=6da3cab7b0acf5dc363c85069bef716923ddf90c", "patch": "@@ -0,0 +1,12 @@\n+// { dg-excess-errors \"accessing value of\"  }\n+mod mem {\n+    extern \"rust-intrinsic\" {\n+        #[rustc_const_stable(feature = \"const_transmute\", since = \"1.46.0\")]\n+        fn transmute<T, U>(_: T) -> U;\n+    }\n+}\n+\n+pub static FOO: () = unsafe {\n+    let illegal_ptr2int: usize = mem::transmute(&());\n+    let _copy = illegal_ptr2int;\n+};"}]}