{"sha": "54896b10dbe1d4ac90f097d566b7aa14807cec08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ4OTZiMTBkYmUxZDRhYzkwZjA5N2Q1NjZiN2FhMTQ4MDdjZWMwOA==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2020-11-13T15:35:52Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2020-11-13T15:36:30Z"}, "message": "MSP430: Implement TARGET_INSN_COST\n\nThe length of an insn can be used to calculate its cost, when optimizing\nfor size. When optimizing for speed, this is a good estimate, since the\ncycle cost of an MSP430 instruction increases with its length.\n\ngcc/ChangeLog:\n\n\t* config/msp430/msp430.c (TARGET_INSN_COST): Define.\n\t(msp430_insn_cost): New function.\n\t* config/msp430/msp430.h (BRANCH_COST): Define.\n\t(LOGICAL_OP_NON_SHORT_CIRCUIT): Define.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/msp430/rtx-cost-O3-default.c: New test.\n\t* gcc.target/msp430/rtx-cost-O3-f5series.c: New test.\n\t* gcc.target/msp430/rtx-cost-Os-default.c: New test.\n\t* gcc.target/msp430/rtx-cost-Os-f5series.c: New test.", "tree": {"sha": "06e411434272c328ecedcba249215873ea875e40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06e411434272c328ecedcba249215873ea875e40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54896b10dbe1d4ac90f097d566b7aa14807cec08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54896b10dbe1d4ac90f097d566b7aa14807cec08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54896b10dbe1d4ac90f097d566b7aa14807cec08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54896b10dbe1d4ac90f097d566b7aa14807cec08/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "546c8f955804ad74b0382b012f64e621a02eebde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/546c8f955804ad74b0382b012f64e621a02eebde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/546c8f955804ad74b0382b012f64e621a02eebde"}], "stats": {"total": 194, "additions": 189, "deletions": 5}, "files": [{"sha": "e98de8d5dd04a49ceef5886c59bb5d52c28a9c8f", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54896b10dbe1d4ac90f097d566b7aa14807cec08/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54896b10dbe1d4ac90f097d566b7aa14807cec08/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=54896b10dbe1d4ac90f097d566b7aa14807cec08", "patch": "@@ -1181,11 +1181,6 @@ msp430_memory_move_cost (machine_mode mode ATTRIBUTE_UNUSED,\n   return 2 * cost;\n }\n \n-/* BRANCH_COST\n-   Changing from the default of 1 doesn't affect code generation, presumably\n-   because there are no conditional move insns - when a condition is involved,\n-   the only option is to use a cbranch.  */\n-\n /* For X, which must be a MEM RTX, return TRUE if it is an indirect memory\n    reference, @Rn or @Rn+.  */\n static bool\n@@ -1650,6 +1645,26 @@ msp430_rtx_costs (rtx x,\n       return false;\n     }\n }\n+\n+#undef TARGET_INSN_COST\n+#define TARGET_INSN_COST msp430_insn_cost\n+\n+static int\n+msp430_insn_cost (rtx_insn *insn, bool speed ATTRIBUTE_UNUSED)\n+{\n+  if (recog_memoized (insn) < 0)\n+    return 0;\n+\n+  /* The returned cost must be relative to COSTS_N_INSNS (1). An insn with a\n+     length of 2 bytes is the smallest possible size and so must be equivalent\n+     to COSTS_N_INSNS (1).  */\n+  return COSTS_N_INSNS (get_attr_length (insn) / 2);\n+\n+  /* FIXME Add more detailed costs when optimizing for speed.\n+     For now the length of the instruction is a good approximiation and roughly\n+     correlates with cycle cost.  */\n+}\n+\n \f\n /* Function Entry and Exit */\n "}, {"sha": "049151ee975a338a9f8f3df1232638d12a5747d3", "filename": "gcc/config/msp430/msp430.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54896b10dbe1d4ac90f097d566b7aa14807cec08/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54896b10dbe1d4ac90f097d566b7aa14807cec08/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.h?ref=54896b10dbe1d4ac90f097d566b7aa14807cec08", "patch": "@@ -243,6 +243,14 @@ extern const char *msp430_get_linker_devices_include_path (int, const char **);\n #define HAS_LONG_COND_BRANCH\t\t0\n #define HAS_LONG_UNCOND_BRANCH\t\t0\n \n+/* The cost of a branch sequence is roughly 3 \"cheap\" instructions.  */\n+#define BRANCH_COST(speed_p, predictable_p) 3\n+\n+/* Override the default BRANCH_COST heuristic to indicate that it is preferable\n+   to retain short-circuit operations, this results in significantly better\n+   codesize and performance.  */\n+#define LOGICAL_OP_NON_SHORT_CIRCUIT 0\n+\n #define LOAD_EXTEND_OP(M)\t\tZERO_EXTEND\n #define WORD_REGISTER_OPERATIONS\t1\n "}, {"sha": "1bd6a142002769b0593e59ef8163fd8cc6e5ea2e", "filename": "gcc/testsuite/gcc.target/msp430/rtx-cost-O3-default.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54896b10dbe1d4ac90f097d566b7aa14807cec08/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Frtx-cost-O3-default.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54896b10dbe1d4ac90f097d566b7aa14807cec08/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Frtx-cost-O3-default.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Frtx-cost-O3-default.c?ref=54896b10dbe1d4ac90f097d566b7aa14807cec08", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+/* Verify the MSP430 cost model is working as expected for the default ISA\n+   (msp430x) and hwmult (none), when compiling at -O3.  */\n+\n+char arr[2];\n+char a;\n+char *ptr;\n+\n+/*\n+** foo:\n+** ...\n+**\tMOV.B\t\\&a, \\&arr\\+1\n+**\tMOV.*\t#arr\\+2, \\&ptr\n+** ...\n+*/\n+\n+void\n+foo (void)\n+{\n+  arr[1] = a;\n+  ptr = arr + 2;\n+}\n+\n+extern void ext (void);\n+\n+/*\n+** bar:\n+** ...\n+**\tCALL.*\t#ext\n+**\tCALL.*\t#ext\n+** ...\n+*/\n+\n+void\n+bar (void)\n+{\n+  ext ();\n+  ext ();\n+}"}, {"sha": "1e48625f2e59904df45aeec17e3e7c39d9ef83ce", "filename": "gcc/testsuite/gcc.target/msp430/rtx-cost-O3-f5series.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54896b10dbe1d4ac90f097d566b7aa14807cec08/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Frtx-cost-O3-f5series.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54896b10dbe1d4ac90f097d566b7aa14807cec08/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Frtx-cost-O3-f5series.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Frtx-cost-O3-f5series.c?ref=54896b10dbe1d4ac90f097d566b7aa14807cec08", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mhwmult=f5series\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+/* Verify the MSP430 cost model is working as expected for the default ISA\n+   (msp430x) and f5series hwmult, when compiling at -O3.  */\n+\n+volatile unsigned long a;\n+volatile unsigned int b;\n+volatile unsigned long c;\n+unsigned long res1;\n+unsigned long res2;\n+unsigned long res3;\n+\n+/*\n+** foo:\n+** ...\n+**\tMOV.B\t#16, R14\n+**\tCALL.*\t#__mspabi_slll\n+** ...\n+**\tMOV.*\t\\&res2.*\n+** ...\n+**\tRLA.*RLC.*\n+** ...\n+**\tMOV.*\t\\&res3.*\n+** ...\n+**\tRLA.*RLC.*\n+** ...\n+*/\n+void foo (void)\n+{\n+  /* Use the shift library function for this.  */\n+  res1 = (a << 16) | b;\n+  /* Emit 7 inline shifts for this.  */\n+  res2 *= 128;\n+  /* Perform this multiplication inline, using addition and shifts.  */\n+  res3 *= 100;\n+}"}, {"sha": "8f3d1b28049253551b6005e3d4257d4315514c08", "filename": "gcc/testsuite/gcc.target/msp430/rtx-cost-Os-default.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54896b10dbe1d4ac90f097d566b7aa14807cec08/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Frtx-cost-Os-default.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54896b10dbe1d4ac90f097d566b7aa14807cec08/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Frtx-cost-Os-default.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Frtx-cost-Os-default.c?ref=54896b10dbe1d4ac90f097d566b7aa14807cec08", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+/* Verify the MSP430 cost model is working as expected for the default ISA\n+   (msp430x) and hwmult (none), when compiling at -Os.  */\n+\n+char arr[2];\n+char a;\n+char *ptr;\n+\n+/*\n+** foo:\n+** ...\n+**\tMOV.B\t\\&a, \\&arr\\+1\n+**\tMOV.*\t#arr\\+2, \\&ptr\n+** ...\n+*/\n+\n+void\n+foo (void)\n+{\n+  arr[1] = a;\n+  ptr = arr + 2;\n+}\n+\n+extern void ext (void);\n+\n+/*\n+** bar:\n+** ...\n+**\tMOV.*\t#ext, R10\n+**\tCALL.*\tR10\n+**\tCALL.*\tR10\n+** ...\n+*/\n+\n+void\n+bar (void)\n+{\n+  ext ();\n+  ext ();\n+}"}, {"sha": "bb37f9083d991c5ee2a2d5e55044ff2cda2857a6", "filename": "gcc/testsuite/gcc.target/msp430/rtx-cost-Os-f5series.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54896b10dbe1d4ac90f097d566b7aa14807cec08/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Frtx-cost-Os-f5series.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54896b10dbe1d4ac90f097d566b7aa14807cec08/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Frtx-cost-Os-f5series.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Frtx-cost-Os-f5series.c?ref=54896b10dbe1d4ac90f097d566b7aa14807cec08", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -mhwmult=f5series\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+/* Verify the MSP430 cost model is working as expected for the default ISA\n+   (msp430x) and f5series hwmult, when compiling at -Os.  */\n+\n+volatile unsigned long a;\n+volatile unsigned int b;\n+volatile unsigned long c;\n+unsigned long res1;\n+unsigned long res2;\n+unsigned long res3;\n+\n+/*\n+** foo:\n+** ...\n+**\tMOV.B\t#16, R14\n+**\tCALL.*\t#__mspabi_slll\n+** ...\n+**\tMOV.B\t#7, R14\n+**\tCALL.*\t#__mspabi_slll\n+** ...\n+**\tMOV.B\t#100, R14\n+**\tMOV.B\t#0, R15\n+** ...\n+**\tCALL.*\t#__mulsi2_f5\n+** ...\n+*/\n+void foo (void)\n+{\n+  /* Use the shift library function for this.  */\n+  res1 = (a << 16) | b;\n+  /* Likewise.  */\n+  res2 *= 128;\n+  /* Use the hardware multiply library function for this.  */\n+  res3 *= 100;\n+}"}]}