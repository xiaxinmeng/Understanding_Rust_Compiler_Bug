{"sha": "29a9de9b40277af98515eabebb75be1f154e9505", "node_id": "C_kwDOANBUbNoAKDI5YTlkZTliNDAyNzdhZjk4NTE1ZWFiZWJiNzViZTFmMTU0ZTk1MDU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-08T19:41:24Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-08T23:57:48Z"}, "message": "libstdc++: Replace uses of _GLIBCXX_USE_INT128 in testsuite\n\nSince r12-435 the _GLIBCXX_USE_INT128 macro is never defined, so all\nuses of it in the testsuite are wrong. The tests should be checking\n__SIZEOF_INT128__ instead.\n\nAlso add some tests for an INT_3 type, which were missing.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/18_support/numeric_limits/40856.cc: Replace use of\n\t_GLIBCXX_USE_INT128.\n\t* testsuite/18_support/numeric_limits/dr559.cc: Likewise.\n\t* testsuite/18_support/numeric_limits/lowest.cc: Likewise.\n\t* testsuite/18_support/numeric_limits/max_digits10.cc: Likewise.\n\t* testsuite/20_util/is_floating_point/value.cc: Likewise.\n\t* testsuite/20_util/is_integral/value.cc: Likewise.\n\t* testsuite/20_util/is_signed/value.cc: Likewise.\n\t* testsuite/20_util/is_unsigned/value.cc: Likewise.\n\t* testsuite/20_util/make_signed/requirements/typedefs-1.cc:\n\tLikewise.\n\t* testsuite/20_util/make_signed/requirements/typedefs-2.cc:\n\tLikewise.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs-1.cc:\n\tLikewise.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs-2.cc:\n\tLikewise.\n\t* testsuite/20_util/type_identity/requirements/typedefs.cc:\n\tLikewise.\n\t* testsuite/26_numerics/bit/bit.count/countl_one.cc: Likewise.\n\t* testsuite/26_numerics/bit/bit.count/countl_zero.cc: Likewise.\n\t* testsuite/26_numerics/bit/bit.count/countr_one.cc: Likewise.\n\t* testsuite/26_numerics/bit/bit.count/countr_zero.cc: Likewise.\n\t* testsuite/26_numerics/bit/bit.count/popcount.cc: Likewise.\n\t* testsuite/26_numerics/bit/bit.pow.two/bit_ceil.cc: Likewise.\n\t* testsuite/26_numerics/bit/bit.pow.two/bit_floor.cc: Likewise.\n\t* testsuite/26_numerics/bit/bit.pow.two/bit_width.cc: Likewise.\n\t* testsuite/26_numerics/bit/bit.pow.two/has_single_bit.cc:\n\tLikewise.\n\t* testsuite/26_numerics/bit/bit.rotate/rotl.cc: Likewise.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/26_numerics/bit/bit.rotate/rotr.cc:\n\t* testsuite/util/testsuite_common_types.h:", "tree": {"sha": "0ee8913de87e52f5e438afdd79af813d1d6d539e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ee8913de87e52f5e438afdd79af813d1d6d539e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29a9de9b40277af98515eabebb75be1f154e9505", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29a9de9b40277af98515eabebb75be1f154e9505", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29a9de9b40277af98515eabebb75be1f154e9505", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29a9de9b40277af98515eabebb75be1f154e9505/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d87105d697ced10e1f7af3f1f80ef6c9890c8585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d87105d697ced10e1f7af3f1f80ef6c9890c8585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d87105d697ced10e1f7af3f1f80ef6c9890c8585"}], "stats": {"total": 92, "additions": 66, "deletions": 26}, "files": [{"sha": "ee1cf9c0cf87df68a584de6dde4a81c5c6492361", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/40856.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2F40856.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2F40856.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2F40856.cc?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -19,8 +19,8 @@\n \n #include <limits>\n \n-// libstdc++/40856 \n-#if defined _GLIBCXX_USE_INT128 && ! defined __STRICT_ANSI__\n+// libstdc++/40856\n+#if defined __SIZEOF_INT128__\n static_assert(std::numeric_limits<__int128>::is_specialized == true, \"\");\n static_assert(std::numeric_limits<unsigned __int128>::is_specialized == true,\n \t      \"\");"}, {"sha": "96a636767390556f082a9a3992660c8d5241a666", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/dr559.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fdr559.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fdr559.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fdr559.cc?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -98,7 +98,7 @@ int main()\n   do_test<long long>();\n   do_test<unsigned long long>();\n   // GNU Extensions.\n-#ifdef _GLIBCXX_USE_INT128\n+#ifdef __SIZEOF_INT128__\n   do_test<__int128>();\n   do_test<unsigned __int128>();\n #endif"}, {"sha": "b44dcf4282607f8190d8e9795db917922c2e973b", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/lowest.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Flowest.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Flowest.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Flowest.cc?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -74,7 +74,7 @@ void test01()\n   do_test<unsigned long long>();\n \n   // GNU Extensions.\n-#ifdef _GLIBCXX_USE_INT128\n+#ifdef __SIZEOF_INT128__\n   do_test<__int128>();\n   do_test<unsigned __int128>();\n #endif"}, {"sha": "bc7317c76a348dc60b03098bc5f14f48e6ee5dea", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/max_digits10.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fmax_digits10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fmax_digits10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fmax_digits10.cc?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -49,7 +49,7 @@ test01()\n   VERIFY( std::numeric_limits<char32_t>::max_digits10 == 0 );\n \n   // GNU Extensions.\n-#ifdef _GLIBCXX_USE_INT128\n+#ifdef __SIZEOF_INT128__\n   VERIFY( std::numeric_limits<__int128>::max_digits10 == 0 );\n   VERIFY( std::numeric_limits<unsigned __int128>::max_digits10 == 0 );\n #endif"}, {"sha": "c84351c706f965189fee9988572bc9aa1e5c7467", "filename": "libstdc++-v3/testsuite/20_util/is_floating_point/value.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_floating_point%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_floating_point%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_floating_point%2Fvalue.cc?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -53,7 +53,7 @@ void test01()\n   static_assert(test_category<is_floating_point, __float128>(true), \"\");\n #endif\n \n-#ifdef _GLIBCXX_USE_INT128\n+#ifdef __SIZEOF_INT128__\n   static_assert(test_category<is_floating_point, __int128>(false), \"\");\n   static_assert(test_category<is_floating_point,\n \t\tunsigned __int128>(false), \"\");"}, {"sha": "44962b55895dc312cdd6ee8e03c379c1bc958242", "filename": "libstdc++-v3/testsuite/20_util/is_integral/value.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Fvalue.cc?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -55,7 +55,7 @@ void test01()\n \n #ifndef __STRICT_ANSI__\n   // GNU Extensions.\n-#ifdef _GLIBCXX_USE_INT128\n+#ifdef __SIZEOF_INT128__\n   static_assert(test_category<is_integral, __int128>(true), \"\");\n   static_assert(test_category<is_integral, unsigned __int128>(true), \"\");\n #endif"}, {"sha": "8d17e972090a87ce58c3e3dfdf38ca1bdab53b6f", "filename": "libstdc++-v3/testsuite/20_util/is_signed/value.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_signed%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_signed%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_signed%2Fvalue.cc?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -51,7 +51,7 @@ void test01()\n \n #ifndef __STRICT_ANSI__\n   // GNU Extensions.\n-#ifdef _GLIBCXX_USE_INT128\n+#ifdef __SIZEOF_INT128__\n   static_assert(test_category<is_signed, __int128>(true), \"\");\n   static_assert(test_category<is_signed, unsigned __int128>(false), \"\");\n #endif"}, {"sha": "d682220358b039b6c26457793bafef34e8b08383", "filename": "libstdc++-v3/testsuite/20_util/is_unsigned/value.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_unsigned%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_unsigned%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_unsigned%2Fvalue.cc?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -51,7 +51,7 @@ void test01()\n \n #ifndef __STRICT_ANSI__\n   // GNU Extensions.\n-#ifdef _GLIBCXX_USE_INT128\n+#ifdef __SIZEOF_INT128__\n   static_assert(test_category<is_unsigned, unsigned __int128>(true), \"\");\n   static_assert(test_category<is_unsigned, __int128>(false), \"\");\n #endif"}, {"sha": "c010c9701dfb333c916f27e1a5ee33fc5e80da43", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs-1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-1.cc?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -68,7 +68,7 @@ void test01()\n \n #ifndef __STRICT_ANSI__\n   // GNU Extensions.\n-#ifdef _GLIBCXX_USE_INT128\n+#ifdef __SIZEOF_INT128__\n   typedef make_signed<unsigned __int128>::type  test25_type;\n   static_assert( is_same<test25_type, __int128>::value,\n                  \"make_signed<unsigned __int128>\" );"}, {"sha": "0edf3d648b56e7bedaf42d576c78bf684315bdf3", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs-2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -61,7 +61,7 @@ void test01()\n \n #ifndef __STRICT_ANSI__\n   // GNU Extensions.\n-#ifdef _GLIBCXX_USE_INT128\n+#ifdef __SIZEOF_INT128__\n   typedef make_signed<unsigned __int128>::type  test25_type;\n   static_assert(is_same<test25_type, __int128>::value, \"\");\n "}, {"sha": "e437c53cd8e6cad40863e9ab0442684520affba4", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs-1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-1.cc?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -62,7 +62,7 @@ void test01()\n \n #ifndef __STRICT_ANSI__\n   // GNU Extensions.\n-#ifdef _GLIBCXX_USE_INT128\n+#ifdef __SIZEOF_INT128__\n   typedef make_unsigned<unsigned __int128>::type test25_type;\n   static_assert(is_same<test25_type, unsigned __int128>::value, \"\");\n "}, {"sha": "7e2b8c459e7aeed834c14b50a074061089b48997", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs-2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -61,7 +61,7 @@ void test01()\n \n #ifndef __STRICT_ANSI__\n   // GNU Extensions.\n-#ifdef _GLIBCXX_USE_INT128\n+#ifdef __SIZEOF_INT128__\n   typedef make_unsigned<unsigned __int128>::type  test25_type;\n   static_assert(is_same<test25_type, unsigned __int128>::value, \"\");\n "}, {"sha": "61f84118c634c41e2476cfbd43b49b7fdd842701", "filename": "libstdc++-v3/testsuite/20_util/type_identity/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftype_identity%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftype_identity%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftype_identity%2Frequirements%2Ftypedefs.cc?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -86,7 +86,7 @@ void test01()\n \n #ifndef __STRICT_ANSI__\n   // GNU Extensions.\n-#ifdef _GLIBCXX_USE_INT128\n+#ifdef __SIZEOF_INT128__\n   static_assert(test<unsigned __int128>::value, \"\");\n   static_assert(test<unsigned __int128>::value, \"\");\n #endif"}, {"sha": "5e2a314e13a61b40433fde36ef54911d102c6c71", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.count/countl_one.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fcountl_one.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fcountl_one.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fcountl_one.cc?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -74,7 +74,7 @@ static_assert( test( X{} ).did_not_match() );\n enum E : unsigned { e };\n static_assert( test( e ).did_not_match() );\n \n-#if !defined(__STRICT_ANSI__) && defined _GLIBCXX_USE_INT128\n+#if !defined(__STRICT_ANSI__) && defined __SIZEOF_INT128__\n static_assert( test( (unsigned __int128)0 ) );\n static_assert( test( (__int128)0 ).did_not_match() );\n #endif\n@@ -90,6 +90,10 @@ static_assert( test( (__GLIBCXX_TYPE_INT_N_1)0 ).did_not_match() );\n static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_2)0 ) );\n static_assert( test( (__GLIBCXX_TYPE_INT_N_2)0 ).did_not_match() );\n #endif\n+#if defined(__GLIBCXX_TYPE_INT_N_3)\n+static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_3)0 ) );\n+static_assert( test( (__GLIBCXX_TYPE_INT_N_3)0 ).did_not_match() );\n+#endif\n \n #include <cstddef>\n static_assert( test( (std::byte)0 ).did_not_match() );"}, {"sha": "dc4d2e6cbd22a2be76e30d084627d62951155d1d", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.count/countl_zero.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fcountl_zero.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fcountl_zero.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fcountl_zero.cc?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -71,7 +71,7 @@ static_assert( test( X{} ).did_not_match() );\n enum E : unsigned { e };\n static_assert( test( e ).did_not_match() );\n \n-#if !defined(__STRICT_ANSI__) && defined _GLIBCXX_USE_INT128\n+#if !defined(__STRICT_ANSI__) && defined __SIZEOF_INT128__\n static_assert( test( (unsigned __int128)0 ) );\n static_assert( test( (__int128)0 ).did_not_match() );\n #endif\n@@ -87,6 +87,10 @@ static_assert( test( (__GLIBCXX_TYPE_INT_N_1)0 ).did_not_match() );\n static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_2)0 ) );\n static_assert( test( (__GLIBCXX_TYPE_INT_N_2)0 ).did_not_match() );\n #endif\n+#if defined(__GLIBCXX_TYPE_INT_N_3)\n+static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_3)0 ) );\n+static_assert( test( (__GLIBCXX_TYPE_INT_N_3)0 ).did_not_match() );\n+#endif\n \n #include <cstddef>\n static_assert( test( (std::byte)0 ).did_not_match() );"}, {"sha": "677daa52c2d807098b7fcccd567a6c23b62ea567", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.count/countr_one.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fcountr_one.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fcountr_one.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fcountr_one.cc?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -73,7 +73,7 @@ static_assert( test( X{} ).did_not_match() );\n enum E : unsigned { e };\n static_assert( test( e ).did_not_match() );\n \n-#if !defined(__STRICT_ANSI__) && defined _GLIBCXX_USE_INT128\n+#if !defined(__STRICT_ANSI__) && defined __SIZEOF_INT128__\n static_assert( test( (unsigned __int128)0 ) );\n static_assert( test( (__int128)0 ).did_not_match() );\n #endif\n@@ -89,6 +89,10 @@ static_assert( test( (__GLIBCXX_TYPE_INT_N_1)0 ).did_not_match() );\n static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_2)0 ) );\n static_assert( test( (__GLIBCXX_TYPE_INT_N_2)0 ).did_not_match() );\n #endif\n+#if defined(__GLIBCXX_TYPE_INT_N_3)\n+static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_3)0 ) );\n+static_assert( test( (__GLIBCXX_TYPE_INT_N_3)0 ).did_not_match() );\n+#endif\n \n #include <cstddef>\n static_assert( test( (std::byte)0 ).did_not_match() );"}, {"sha": "7f45fbc9d32d34eb99c6126dd3da620728638a89", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.count/countr_zero.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fcountr_zero.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fcountr_zero.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fcountr_zero.cc?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -72,7 +72,7 @@ static_assert( test( X{} ).did_not_match() );\n enum E : unsigned { e };\n static_assert( test( e ).did_not_match() );\n \n-#if !defined(__STRICT_ANSI__) && defined _GLIBCXX_USE_INT128\n+#if !defined(__STRICT_ANSI__) && defined __SIZEOF_INT128__\n static_assert( test( (unsigned __int128)0 ) );\n static_assert( test( (__int128)0 ).did_not_match() );\n #endif\n@@ -88,6 +88,10 @@ static_assert( test( (__GLIBCXX_TYPE_INT_N_1)0 ).did_not_match() );\n static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_2)0 ) );\n static_assert( test( (__GLIBCXX_TYPE_INT_N_2)0 ).did_not_match() );\n #endif\n+#if defined(__GLIBCXX_TYPE_INT_N_3)\n+static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_3)0 ) );\n+static_assert( test( (__GLIBCXX_TYPE_INT_N_3)0 ).did_not_match() );\n+#endif\n \n #include <cstddef>\n static_assert( test( (std::byte)0 ).did_not_match() );"}, {"sha": "b37b3ef54a73ffad932431db1202854b8cee4d07", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.count/popcount.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fpopcount.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fpopcount.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fpopcount.cc?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -75,7 +75,7 @@ static_assert( test( X{} ).did_not_match() );\n enum E : unsigned { e };\n static_assert( test( e ).did_not_match() );\n \n-#if !defined(__STRICT_ANSI__) && defined _GLIBCXX_USE_INT128\n+#if !defined(__STRICT_ANSI__) && defined __SIZEOF_INT128__\n static_assert( test( (unsigned __int128)0 ) );\n static_assert( test( (__int128)0 ).did_not_match() );\n #endif\n@@ -91,6 +91,10 @@ static_assert( test( (__GLIBCXX_TYPE_INT_N_1)0 ).did_not_match() );\n static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_2)0 ) );\n static_assert( test( (__GLIBCXX_TYPE_INT_N_2)0 ).did_not_match() );\n #endif\n+#if defined(__GLIBCXX_TYPE_INT_N_3)\n+static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_3)0 ) );\n+static_assert( test( (__GLIBCXX_TYPE_INT_N_3)0 ).did_not_match() );\n+#endif\n \n #include <cstddef>\n static_assert( test( (std::byte)0 ).did_not_match() );"}, {"sha": "c6ed47fda07c2e7453a9da68dbd9fd55e0aed816", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.pow.two/bit_ceil.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fbit_ceil.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fbit_ceil.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fbit_ceil.cc?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -107,7 +107,7 @@ static_assert( test( X{} ).did_not_match() );\n enum E : unsigned { e };\n static_assert( test( e ).did_not_match() );\n \n-#if !defined(__STRICT_ANSI__) && defined _GLIBCXX_USE_INT128\n+#if !defined(__STRICT_ANSI__) && defined __SIZEOF_INT128__\n static_assert( test( (unsigned __int128)0 ) );\n static_assert( test( (__int128)0 ).did_not_match() );\n #endif"}, {"sha": "eb2b66b331c014eef0ca3518f07b717730ce150e", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.pow.two/bit_floor.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fbit_floor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fbit_floor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fbit_floor.cc?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -79,7 +79,7 @@ static_assert( test( X{} ).did_not_match() );\n enum E : unsigned { e };\n static_assert( test( e ).did_not_match() );\n \n-#if !defined(__STRICT_ANSI__) && defined _GLIBCXX_USE_INT128\n+#if !defined(__STRICT_ANSI__) && defined __SIZEOF_INT128__\n static_assert( test( (unsigned __int128)0 ) );\n static_assert( test( (__int128)0 ).did_not_match() );\n #endif\n@@ -95,6 +95,10 @@ static_assert( test( (__GLIBCXX_TYPE_INT_N_1)0 ).did_not_match() );\n static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_2)0 ) );\n static_assert( test( (__GLIBCXX_TYPE_INT_N_2)0 ).did_not_match() );\n #endif\n+#if defined(__GLIBCXX_TYPE_INT_N_3)\n+static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_3)0 ) );\n+static_assert( test( (__GLIBCXX_TYPE_INT_N_3)0 ).did_not_match() );\n+#endif\n \n #include <cstddef>\n static_assert( test( (std::byte)0 ).did_not_match() );"}, {"sha": "053f81b0c7db027831c7584a7f0b4a38aa7dfd47", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.pow.two/bit_width.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fbit_width.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fbit_width.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fbit_width.cc?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -79,7 +79,7 @@ static_assert( test( X{} ).did_not_match() );\n enum E : unsigned { e };\n static_assert( test( e ).did_not_match() );\n \n-#if !defined(__STRICT_ANSI__) && defined _GLIBCXX_USE_INT128\n+#if !defined(__STRICT_ANSI__) && defined __SIZEOF_INT128__\n static_assert( test( (unsigned __int128)0 ) );\n static_assert( test( (__int128)0 ).did_not_match() );\n #endif\n@@ -95,6 +95,10 @@ static_assert( test( (__GLIBCXX_TYPE_INT_N_1)0 ).did_not_match() );\n static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_2)0 ) );\n static_assert( test( (__GLIBCXX_TYPE_INT_N_2)0 ).did_not_match() );\n #endif\n+#if defined(__GLIBCXX_TYPE_INT_N_3)\n+static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_3)0 ) );\n+static_assert( test( (__GLIBCXX_TYPE_INT_N_3)0 ).did_not_match() );\n+#endif\n \n #include <cstddef>\n static_assert( test( (std::byte)0 ).did_not_match() );"}, {"sha": "6df9cec66652cebe94217c03ad24949fcb6f0cb4", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.pow.two/has_single_bit.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fhas_single_bit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fhas_single_bit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fhas_single_bit.cc?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -127,7 +127,7 @@ static_assert( test( X{} ).did_not_match() );\n enum E : unsigned { e };\n static_assert( test( e ).did_not_match() );\n \n-#if !defined(__STRICT_ANSI__) && defined _GLIBCXX_USE_INT128\n+#if !defined(__STRICT_ANSI__) && defined __SIZEOF_INT128__\n static_assert( test( (unsigned __int128)0 ) );\n static_assert( test( (__int128)0 ).did_not_match() );\n #endif\n@@ -143,6 +143,10 @@ static_assert( test( (__GLIBCXX_TYPE_INT_N_1)0 ).did_not_match() );\n static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_2)0 ) );\n static_assert( test( (__GLIBCXX_TYPE_INT_N_2)0 ).did_not_match() );\n #endif\n+#if defined(__GLIBCXX_TYPE_INT_N_3)\n+static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_3)0 ) );\n+static_assert( test( (__GLIBCXX_TYPE_INT_N_3)0 ).did_not_match() );\n+#endif\n \n #include <cstddef>\n static_assert( test( (std::byte)0 ).did_not_match() );"}, {"sha": "8a879eb85b22a5fc402e22a03b5db277422e4142", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.rotate/rotl.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.rotate%2Frotl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.rotate%2Frotl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.rotate%2Frotl.cc?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -104,7 +104,7 @@ static_assert( test( X{} ).did_not_match() );\n enum E : unsigned { e };\n static_assert( test( e ).did_not_match() );\n \n-#if !defined(__STRICT_ANSI__) && defined _GLIBCXX_USE_INT128\n+#if !defined(__STRICT_ANSI__) && defined __SIZEOF_INT128__\n static_assert( test( (unsigned __int128)0 ) );\n static_assert( test( (__int128)0 ).did_not_match() );\n #endif\n@@ -120,6 +120,10 @@ static_assert( test( (__GLIBCXX_TYPE_INT_N_1)0 ).did_not_match() );\n static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_2)0 ) );\n static_assert( test( (__GLIBCXX_TYPE_INT_N_2)0 ).did_not_match() );\n #endif\n+#if defined(__GLIBCXX_TYPE_INT_N_3)\n+static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_3)0 ) );\n+static_assert( test( (__GLIBCXX_TYPE_INT_N_3)0 ).did_not_match() );\n+#endif\n \n #include <cstddef>\n static_assert( test( (std::byte)0 ).did_not_match() );"}, {"sha": "46c20636cf59dae823fbcc8bc7f795ca1f9a2139", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.rotate/rotr.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.rotate%2Frotr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.rotate%2Frotr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.rotate%2Frotr.cc?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -106,7 +106,7 @@ static_assert( test( X{} ).did_not_match() );\n enum E : unsigned { e };\n static_assert( test( e ).did_not_match() );\n \n-#if !defined(__STRICT_ANSI__) && defined _GLIBCXX_USE_INT128\n+#if !defined(__STRICT_ANSI__) && defined __SIZEOF_INT128__\n static_assert( test( (unsigned __int128)0 ) );\n static_assert( test( (__int128)0 ).did_not_match() );\n #endif\n@@ -122,6 +122,10 @@ static_assert( test( (__GLIBCXX_TYPE_INT_N_1)0 ).did_not_match() );\n static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_2)0 ) );\n static_assert( test( (__GLIBCXX_TYPE_INT_N_2)0 ).did_not_match() );\n #endif\n+#if defined(__GLIBCXX_TYPE_INT_N_3)\n+static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_3)0 ) );\n+static_assert( test( (__GLIBCXX_TYPE_INT_N_3)0 ).did_not_match() );\n+#endif\n \n #include <cstddef>\n static_assert( test( (std::byte)0 ).did_not_match() );"}, {"sha": "392264fd2071bd12cdd01064847c799d129d4791", "filename": "libstdc++-v3/testsuite/util/testsuite_common_types.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9de9b40277af98515eabebb75be1f154e9505/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h?ref=29a9de9b40277af98515eabebb75be1f154e9505", "patch": "@@ -327,7 +327,7 @@ namespace __gnu_test\n #else\n     typedef node<null_type> char8_typelist;\n #endif\n-# if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_INT128)\n+# if !defined(__STRICT_ANSI__) && defined(__SIZEOF_INT128__)\n     __extension__ typedef __int128            a17;\n     __extension__ typedef unsigned __int128   a18;\n     typedef node<_GLIBCXX_TYPELIST_CHAIN2(a17, a18)> int128_typelist;"}]}