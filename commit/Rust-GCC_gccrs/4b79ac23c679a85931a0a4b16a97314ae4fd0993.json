{"sha": "4b79ac23c679a85931a0a4b16a97314ae4fd0993", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI3OWFjMjNjNjc5YTg1OTMxYTBhNGIxNmE5NzMxNGFlNGZkMDk5Mw==", "commit": {"author": {"name": "Charles Baylis", "email": "charles.baylis@linaro.org", "date": "2016-02-09T18:47:55Z"}, "committer": {"name": "Charles Baylis", "email": "cbaylis@gcc.gnu.org", "date": "2016-02-09T18:47:55Z"}, "message": "[ARM] PR68532: Fix up vuzp for big endian\n\ngcc/ChangeLog:\n\n2016-02-09  Charles Baylis  <charles.baylis@linaro.org>\n\n       PR target/68532\n       * config/arm/arm.c (neon_endian_lane_map): New function.\n       (neon_vector_pair_endian_lane_map): New function.\n       (arm_evpc_neon_vuzp): Allow for big endian lane order.\n       * config/arm/arm_neon.h (vuzpq_s8): Adjust shuffle patterns for big\n       endian.\n       (vuzpq_s16): Likewise.\n       (vuzpq_s32): Likewise.\n       (vuzpq_f32): Likewise.\n       (vuzpq_u8): Likewise.\n       (vuzpq_u16): Likewise.\n       (vuzpq_u32): Likewise.\n       (vuzpq_p8): Likewise.\n       (vuzpq_p16): Likewise.\n\ngcc/testsuite/ChangeLog:\n2016-02-09  Charles Baylis  <charles.baylis@linaro.org>\n\n       PR target/68532\n       * gcc.c-torture/execute/pr68532.c: New test.\n\nFrom-SVN: r233251", "tree": {"sha": "25d16cb994e660b9bf2732e36ab2e5be20a0e57a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25d16cb994e660b9bf2732e36ab2e5be20a0e57a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b79ac23c679a85931a0a4b16a97314ae4fd0993", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b79ac23c679a85931a0a4b16a97314ae4fd0993", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b79ac23c679a85931a0a4b16a97314ae4fd0993", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b79ac23c679a85931a0a4b16a97314ae4fd0993/comments", "author": null, "committer": null, "parents": [{"sha": "b890a4410b40417cee25c67feb741c60a4c31be8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b890a4410b40417cee25c67feb741c60a4c31be8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b890a4410b40417cee25c67feb741c60a4c31be8"}], "stats": {"total": 137, "additions": 109, "deletions": 28}, "files": [{"sha": "28029a8c05b24cff66299bddf12e99666f6e33c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b79ac23c679a85931a0a4b16a97314ae4fd0993/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b79ac23c679a85931a0a4b16a97314ae4fd0993/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b79ac23c679a85931a0a4b16a97314ae4fd0993", "patch": "@@ -1,3 +1,20 @@\n+2016-02-09  Charles Baylis  <charles.baylis@linaro.org>\n+\n+\tPR target/68532\n+\t* config/arm/arm.c (neon_endian_lane_map): New function.\n+\t(neon_vector_pair_endian_lane_map): New function.\n+\t(arm_evpc_neon_vuzp): Allow for big endian lane order.\n+\t* config/arm/arm_neon.h (vuzpq_s8): Adjust shuffle patterns for big\n+\tendian.\n+\t(vuzpq_s16): Likewise.\n+\t(vuzpq_s32): Likewise.\n+\t(vuzpq_f32): Likewise.\n+\t(vuzpq_u8): Likewise.\n+\t(vuzpq_u16): Likewise.\n+\t(vuzpq_u32): Likewise.\n+\t(vuzpq_p8): Likewise.\n+\t(vuzpq_p16): Likewise.\n+\n 2016-02-11  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR target/69634"}, {"sha": "ab8cfff3add173d0ff3aad805cff4ed61908785c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 47, "deletions": 10, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b79ac23c679a85931a0a4b16a97314ae4fd0993/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b79ac23c679a85931a0a4b16a97314ae4fd0993/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=4b79ac23c679a85931a0a4b16a97314ae4fd0993", "patch": "@@ -28203,6 +28203,37 @@ arm_expand_vec_perm (rtx target, rtx op0, rtx op1, rtx sel)\n   arm_expand_vec_perm_1 (target, op0, op1, sel);\n }\n \n+/* Map lane ordering between architectural lane order, and GCC lane order,\n+   taking into account ABI.  See comment above output_move_neon for details.  */\n+\n+static int\n+neon_endian_lane_map (machine_mode mode, int lane)\n+{\n+  if (BYTES_BIG_ENDIAN)\n+  {\n+    int nelems = GET_MODE_NUNITS (mode);\n+    /* Reverse lane order.  */\n+    lane = (nelems - 1 - lane);\n+    /* Reverse D register order, to match ABI.  */\n+    if (GET_MODE_SIZE (mode) == 16)\n+      lane = lane ^ (nelems / 2);\n+  }\n+  return lane;\n+}\n+\n+/* Some permutations index into pairs of vectors, this is a helper function\n+   to map indexes into those pairs of vectors.  */\n+\n+static int\n+neon_pair_endian_lane_map (machine_mode mode, int lane)\n+{\n+  int nelem = GET_MODE_NUNITS (mode);\n+  if (BYTES_BIG_ENDIAN)\n+    lane =\n+      neon_endian_lane_map (mode, lane & (nelem - 1)) + (lane & nelem);\n+  return lane;\n+}\n+\n /* Generate or test for an insn that supports a constant permutation.  */\n \n /* Recognize patterns for the VUZP insns.  */\n@@ -28213,23 +28244,32 @@ arm_evpc_neon_vuzp (struct expand_vec_perm_d *d)\n   unsigned int i, odd, mask, nelt = d->nelt;\n   rtx out0, out1, in0, in1;\n   rtx (*gen)(rtx, rtx, rtx, rtx);\n+  int first_elem;\n+  int swap_nelt;\n \n   if (GET_MODE_UNIT_SIZE (d->vmode) >= 8)\n     return false;\n \n-  /* Note that these are little-endian tests.  Adjust for big-endian later.  */\n-  if (d->perm[0] == 0)\n+  /* arm_expand_vec_perm_const_1 () helpfully swaps the operands for the\n+     big endian pattern on 64 bit vectors, so we correct for that.  */\n+  swap_nelt = BYTES_BIG_ENDIAN && !d->one_vector_p\n+    && GET_MODE_SIZE (d->vmode) == 8 ? d->nelt : 0;\n+\n+  first_elem = d->perm[neon_endian_lane_map (d->vmode, 0)] ^ swap_nelt;\n+\n+  if (first_elem == neon_endian_lane_map (d->vmode, 0))\n     odd = 0;\n-  else if (d->perm[0] == 1)\n+  else if (first_elem == neon_endian_lane_map (d->vmode, 1))\n     odd = 1;\n   else\n     return false;\n   mask = (d->one_vector_p ? nelt - 1 : 2 * nelt - 1);\n \n   for (i = 0; i < nelt; i++)\n     {\n-      unsigned elt = (i * 2 + odd) & mask;\n-      if (d->perm[i] != elt)\n+      unsigned elt =\n+\t(neon_pair_endian_lane_map (d->vmode, i) * 2 + odd) & mask;\n+      if ((d->perm[i] ^ swap_nelt) != neon_pair_endian_lane_map (d->vmode, elt))\n \treturn false;\n     }\n \n@@ -28253,11 +28293,8 @@ arm_evpc_neon_vuzp (struct expand_vec_perm_d *d)\n \n   in0 = d->op0;\n   in1 = d->op1;\n-  if (BYTES_BIG_ENDIAN)\n-    {\n-      std::swap (in0, in1);\n-      odd = !odd;\n-    }\n+  if (swap_nelt != 0)\n+    std::swap (in0, in1);\n \n   out0 = d->target;\n   out1 = gen_reg_rtx (d->vmode);"}, {"sha": "e807ad1f2d3e6eb073a1ca54611e34cdd8bffdfb", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b79ac23c679a85931a0a4b16a97314ae4fd0993/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b79ac23c679a85931a0a4b16a97314ae4fd0993/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=4b79ac23c679a85931a0a4b16a97314ae4fd0993", "patch": "@@ -8741,9 +8741,9 @@ vuzpq_s8 (int8x16_t __a, int8x16_t __b)\n   int8x16x2_t __rv;\n #ifdef __ARM_BIG_ENDIAN\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n-      { 17, 19, 21, 23, 25, 27, 29, 31, 1, 3, 5, 7, 9, 11, 13, 15 });\n+      { 9, 11, 13, 15, 1, 3, 5, 7, 25, 27, 29, 31, 17, 19, 21, 23 });\n   __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x16_t)\n-      { 16, 18, 20, 22, 24, 26, 28, 30, 0, 2, 4, 6, 8, 10, 12, 14 });\n+      { 8, 10, 12, 14, 0, 2, 4, 6, 24, 26, 28, 30, 16, 18, 20, 22 });\n #else\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n       { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30 });\n@@ -8759,9 +8759,9 @@ vuzpq_s16 (int16x8_t __a, int16x8_t __b)\n   int16x8x2_t __rv;\n #ifdef __ARM_BIG_ENDIAN\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n-      { 9, 11, 13, 15, 1, 3, 5, 7 });\n+      { 5, 7, 1, 3, 13, 15, 9, 11 });\n   __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n-      { 8, 10, 12, 14, 0, 2, 4, 6 });\n+      { 4, 6, 0, 2, 12, 14, 8, 10 });\n #else\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n       { 0, 2, 4, 6, 8, 10, 12, 14 });\n@@ -8776,8 +8776,8 @@ vuzpq_s32 (int32x4_t __a, int32x4_t __b)\n {\n   int32x4x2_t __rv;\n #ifdef __ARM_BIG_ENDIAN\n-  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 5, 7, 1, 3 });\n-  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 4, 6, 0, 2 });\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 3, 1, 7, 5 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 2, 0, 6, 4 });\n #else\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 0, 2, 4, 6 });\n   __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 1, 3, 5, 7 });\n@@ -8790,8 +8790,8 @@ vuzpq_f32 (float32x4_t __a, float32x4_t __b)\n {\n   float32x4x2_t __rv;\n #ifdef __ARM_BIG_ENDIAN\n-  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 5, 7, 1, 3 });\n-  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 4, 6, 0, 2 });\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 3, 1, 7, 5 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 2, 0, 6, 4 });\n #else\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 0, 2, 4, 6 });\n   __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 1, 3, 5, 7 });\n@@ -8805,9 +8805,9 @@ vuzpq_u8 (uint8x16_t __a, uint8x16_t __b)\n   uint8x16x2_t __rv;\n #ifdef __ARM_BIG_ENDIAN\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n-      { 17, 19, 21, 23, 25, 27, 29, 31, 1, 3, 5, 7, 9, 11, 13, 15 });\n+      { 9, 11, 13, 15, 1, 3, 5, 7, 25, 27, 29, 31, 17, 19, 21, 23 });\n   __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x16_t)\n-      { 16, 18, 20, 22, 24, 26, 28, 30, 0, 2, 4, 6, 8, 10, 12, 14 });\n+      { 8, 10, 12, 14, 0, 2, 4, 6, 24, 26, 28, 30, 16, 18, 20, 22 });\n #else\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n       { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30 });\n@@ -8823,9 +8823,9 @@ vuzpq_u16 (uint16x8_t __a, uint16x8_t __b)\n   uint16x8x2_t __rv;\n #ifdef __ARM_BIG_ENDIAN\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n-      { 9, 11, 13, 15, 1, 3, 5, 7 });\n+      { 5, 7, 1, 3, 13, 15, 9, 11 });\n   __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n-      { 8, 10, 12, 14, 0, 2, 4, 6 });\n+      { 4, 6, 0, 2, 12, 14, 8, 10 });\n #else\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n       { 0, 2, 4, 6, 8, 10, 12, 14 });\n@@ -8840,8 +8840,8 @@ vuzpq_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n   uint32x4x2_t __rv;\n #ifdef __ARM_BIG_ENDIAN\n-  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 5, 7, 1, 3 });\n-  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 4, 6, 0, 2 });\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 3, 1, 7, 5 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 2, 0, 6, 4 });\n #else\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 0, 2, 4, 6 });\n   __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 1, 3, 5, 7 });\n@@ -8855,9 +8855,9 @@ vuzpq_p8 (poly8x16_t __a, poly8x16_t __b)\n   poly8x16x2_t __rv;\n #ifdef __ARM_BIG_ENDIAN\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n-      { 17, 19, 21, 23, 25, 27, 29, 31, 1, 3, 5, 7, 9, 11, 13, 15 });\n+      { 9, 11, 13, 15, 1, 3, 5, 7, 25, 27, 29, 31, 17, 19, 21, 23 });\n   __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x16_t)\n-      { 16, 18, 20, 22, 24, 26, 28, 30, 0, 2, 4, 6, 8, 10, 12, 14 });\n+      { 8, 10, 12, 14, 0, 2, 4, 6, 24, 26, 28, 30, 16, 18, 20, 22 });\n #else\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n       { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30 });\n@@ -8873,9 +8873,9 @@ vuzpq_p16 (poly16x8_t __a, poly16x8_t __b)\n   poly16x8x2_t __rv;\n #ifdef __ARM_BIG_ENDIAN\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n-      { 9, 11, 13, 15, 1, 3, 5, 7 });\n+      { 5, 7, 1, 3, 13, 15, 9, 11 });\n   __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n-      { 8, 10, 12, 14, 0, 2, 4, 6 });\n+      { 4, 6, 0, 2, 12, 14, 8, 10 });\n #else\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n       { 0, 2, 4, 6, 8, 10, 12, 14 });"}, {"sha": "246f0caa20c0d7f6f75a8169dd5e3bb517ebe121", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b79ac23c679a85931a0a4b16a97314ae4fd0993/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b79ac23c679a85931a0a4b16a97314ae4fd0993/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4b79ac23c679a85931a0a4b16a97314ae4fd0993", "patch": "@@ -1,3 +1,8 @@\n+2016-02-09  Charles Baylis  <charles.baylis@linaro.org>\n+\n+\tPR target/68532\n+\t* gcc.c-torture/execute/pr68532.c: New test.\n+\n 2016-02-11  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR target/69634"}, {"sha": "5d4bd8e06d3e9681ce78272982a54abcc7b03ce7", "filename": "gcc/testsuite/gcc.c-torture/execute/pr68532.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b79ac23c679a85931a0a4b16a97314ae4fd0993/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr68532.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b79ac23c679a85931a0a4b16a97314ae4fd0993/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr68532.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr68532.c?ref=4b79ac23c679a85931a0a4b16a97314ae4fd0993", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-options \"-O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+#define SIZE 128\n+unsigned short _Alignas (16) in[SIZE];\n+\n+__attribute__ ((noinline)) int\n+test (unsigned short sum, unsigned short *in, int x)\n+{\n+  for (int j = 0; j < SIZE; j += 8)\n+    sum += in[j] * x;\n+  return sum;\n+}\n+\n+int\n+main ()\n+{\n+  for (int i = 0; i < SIZE; i++)\n+    in[i] = i;\n+  if (test (0, in, 1) != 960)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}