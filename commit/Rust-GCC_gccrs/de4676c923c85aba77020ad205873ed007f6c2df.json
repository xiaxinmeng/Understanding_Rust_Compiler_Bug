{"sha": "de4676c923c85aba77020ad205873ed007f6c2df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU0Njc2YzkyM2M4NWFiYTc3MDIwYWQyMDU4NzNlZDAwN2Y2YzJkZg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-06-30T08:12:45Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-06-30T08:56:05Z"}, "message": "gcc-changelog: come up with GitInfo wrapper.\n\ncontrib/ChangeLog:\n\n\t* gcc-changelog/git_check_commit.py: Use GitInfo\n\t* gcc-changelog/git_commit.py: Add GitInfo class.\n\t* gcc-changelog/git_email.py: Use GitInfo class.\n\t* gcc-changelog/git_repository.py: Likewise.", "tree": {"sha": "806a19c69e14e38692b8aff316f682089d73d571", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/806a19c69e14e38692b8aff316f682089d73d571"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de4676c923c85aba77020ad205873ed007f6c2df", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl76/iUACgkQTcGC3A+n\nN4VCvAgAi0Tm8EiegtJYNsPJU7jDg2t81NJ9PanBFLZPea93uyNirLBAU9CSq6lC\nijsrC68Fyo9ciOhS6uGZdqrhLwceF9Y7bUb+CZuhrbUW+LfK9MIyZD/lX4H9y6SV\nDeQT0Px0gNkrviaMoD3DnweXCdf1N1LDysavtRBTiRdPJQeRYREJ9SQ3RwbLWhYp\nnpG0LSuZtafgUo84whrT+eQFVpTCASsoRoiGDktUnfaOZF/SAZGhp479xSEvSHLN\n86sj1qMVpqCtvICCpPKJ4tnedjPK2hyTbYcx23vjRmMVIdvPQkJ9RDwuxgVDl2YS\nB13iefmiWhyeDdVchAqs6L4m6IARCA==\n=6s+x\n-----END PGP SIGNATURE-----", "payload": "tree 806a19c69e14e38692b8aff316f682089d73d571\nparent 9252a208f485eed2757d601657facfa0aee6cd21\nauthor Martin Liska <mliska@suse.cz> 1593504765 +0200\ncommitter Martin Liska <mliska@suse.cz> 1593507365 +0200\n\ngcc-changelog: come up with GitInfo wrapper.\n\ncontrib/ChangeLog:\n\n\t* gcc-changelog/git_check_commit.py: Use GitInfo\n\t* gcc-changelog/git_commit.py: Add GitInfo class.\n\t* gcc-changelog/git_email.py: Use GitInfo class.\n\t* gcc-changelog/git_repository.py: Likewise.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de4676c923c85aba77020ad205873ed007f6c2df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de4676c923c85aba77020ad205873ed007f6c2df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de4676c923c85aba77020ad205873ed007f6c2df/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9252a208f485eed2757d601657facfa0aee6cd21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9252a208f485eed2757d601657facfa0aee6cd21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9252a208f485eed2757d601657facfa0aee6cd21"}], "stats": {"total": 110, "additions": 58, "deletions": 52}, "files": [{"sha": "ab6da05744a7f3bbbf1e03cef521429668d77ba5", "filename": "contrib/gcc-changelog/git_check_commit.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4676c923c85aba77020ad205873ed007f6c2df/contrib%2Fgcc-changelog%2Fgit_check_commit.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4676c923c85aba77020ad205873ed007f6c2df/contrib%2Fgcc-changelog%2Fgit_check_commit.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Fgit_check_commit.py?ref=de4676c923c85aba77020ad205873ed007f6c2df", "patch": "@@ -37,7 +37,7 @@\n for git_commit in parse_git_revisions(args.git_path, args.revisions,\n                                       not args.non_strict_mode):\n     res = 'OK' if git_commit.success else 'FAILED'\n-    print('Checking %s: %s' % (git_commit.hexsha, res))\n+    print('Checking %s: %s' % (git_commit.info.hexsha, res))\n     if git_commit.success:\n         if args.print_changelog:\n             git_commit.print_output()"}, {"sha": "9d821a8940dd28e77cab8bab9a7a830e2c493319", "filename": "contrib/gcc-changelog/git_commit.py", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4676c923c85aba77020ad205873ed007f6c2df/contrib%2Fgcc-changelog%2Fgit_commit.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4676c923c85aba77020ad205873ed007f6c2df/contrib%2Fgcc-changelog%2Fgit_commit.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Fgit_commit.py?ref=de4676c923c85aba77020ad205873ed007f6c2df", "patch": "@@ -245,30 +245,34 @@ def contains_author(self, author):\n         return False\n \n \n-class GitCommit:\n-    def __init__(self, hexsha, date, author, body, modified_files,\n-                 strict=True, commit_to_date_hook=None):\n+class GitInfo:\n+    def __init__(self, hexsha, date, author, lines, modified_files):\n         self.hexsha = hexsha\n-        self.lines = body\n+        self.date = date\n+        self.author = author\n+        self.lines = lines\n         self.modified_files = modified_files\n+\n+\n+class GitCommit:\n+    def __init__(self, info, strict=True, commit_to_info_hook=None):\n+        self.info = info\n         self.message = None\n         self.changes = None\n         self.changelog_entries = []\n         self.errors = []\n-        self.date = date\n-        self.author = author\n         self.top_level_authors = []\n         self.co_authors = []\n         self.top_level_prs = []\n         self.cherry_pick_commit = None\n-        self.commit_to_date_hook = commit_to_date_hook\n+        self.commit_to_info_hook = commit_to_info_hook\n \n-        project_files = [f for f in self.modified_files\n+        project_files = [f for f in self.info.modified_files\n                          if self.is_changelog_filename(f[0])\n                          or f[0] in misc_files]\n-        ignored_files = [f for f in self.modified_files\n+        ignored_files = [f for f in self.info.modified_files\n                          if self.in_ignored_location(f[0])]\n-        if len(project_files) == len(self.modified_files):\n+        if len(project_files) == len(self.info.modified_files):\n             # All modified files are only MISC files\n             return\n         elif project_files and strict:\n@@ -278,7 +282,7 @@ def __init__(self, hexsha, date, author, body, modified_files,\n             return\n \n         all_are_ignored = (len(project_files) + len(ignored_files)\n-                           == len(self.modified_files))\n+                           == len(self.info.modified_files))\n         self.parse_lines(all_are_ignored)\n         if self.changes:\n             self.parse_changelog()\n@@ -296,7 +300,7 @@ def success(self):\n \n     @property\n     def new_files(self):\n-        return [x[0] for x in self.modified_files if x[1] == 'A']\n+        return [x[0] for x in self.info.modified_files if x[1] == 'A']\n \n     @classmethod\n     def is_changelog_filename(cls, path):\n@@ -331,7 +335,7 @@ def parse_git_name_status(cls, string):\n         return modified_files\n \n     def parse_lines(self, all_are_ignored):\n-        body = self.lines\n+        body = self.info.lines\n \n         for i, b in enumerate(body):\n             if not b:\n@@ -475,7 +479,7 @@ def check_for_empty_description(self):\n                     self.errors.append(Error(msg, line))\n \n     def get_file_changelog_location(self, changelog_file):\n-        for file in self.modified_files:\n+        for file in self.info.modified_files:\n             if file[0] == changelog_file:\n                 # root ChangeLog file\n                 return ''\n@@ -538,7 +542,7 @@ def check_mentioned_files(self):\n             for pattern in entry.file_patterns:\n                 mentioned_patterns.append(os.path.join(entry.folder, pattern))\n \n-        cand = [x[0] for x in self.modified_files\n+        cand = [x[0] for x in self.info.modified_files\n                 if not self.is_changelog_filename(x[0])]\n         changed_files = set(cand)\n         for file in sorted(mentioned_files - changed_files):\n@@ -609,28 +613,28 @@ def format_authors_in_changelog(cls, authors, timestamp, prefix=''):\n         return output\n \n     def to_changelog_entries(self, use_commit_ts=False):\n-        current_timestamp = self.date.strftime(DATE_FORMAT)\n+        current_timestamp = self.info.date.strftime(DATE_FORMAT)\n         for entry in self.changelog_entries:\n             output = ''\n             timestamp = entry.datetime\n             if self.cherry_pick_commit:\n-                timestamp = self.commit_to_date_hook(self.cherry_pick_commit)\n+                info = self.commit_to_info_hook(self.cherry_pick_commit)\n                 # it can happen that it is a cherry-pick for a different\n                 # repository\n-                if timestamp:\n-                    timestamp = timestamp.strftime(DATE_FORMAT)\n+                if info:\n+                    timestamp = info.date.strftime(DATE_FORMAT)\n                 else:\n                     timestamp = current_timestamp\n             elif not timestamp or use_commit_ts:\n                 timestamp = current_timestamp\n-            authors = entry.authors if entry.authors else [self.author]\n+            authors = entry.authors if entry.authors else [self.info.author]\n             # add Co-Authored-By authors to all ChangeLog entries\n             for author in self.co_authors:\n                 if author not in authors:\n                     authors.append(author)\n \n             if self.cherry_pick_commit:\n-                output += self.format_authors_in_changelog([self.author],\n+                output += self.format_authors_in_changelog([self.info.author],\n                                                            current_timestamp)\n                 output += '\\tBackported from master:\\n'\n                 output += self.format_authors_in_changelog(authors,"}, {"sha": "014fdd1004b4b04ba67fb87a72a9feb59debcc31", "filename": "contrib/gcc-changelog/git_email.py", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4676c923c85aba77020ad205873ed007f6c2df/contrib%2Fgcc-changelog%2Fgit_email.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4676c923c85aba77020ad205873ed007f6c2df/contrib%2Fgcc-changelog%2Fgit_email.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Fgit_email.py?ref=de4676c923c85aba77020ad205873ed007f6c2df", "patch": "@@ -22,7 +22,7 @@\n \n from dateutil.parser import parse\n \n-from git_commit import GitCommit\n+from git_commit import GitCommit, GitInfo\n \n from unidiff import PatchSet\n \n@@ -66,8 +66,9 @@ def __init__(self, filename, strict=False):\n             else:\n                 t = 'M'\n             modified_files.append((target, t))\n-        super().__init__(None, date, author, body, modified_files,\n-                         strict=strict, commit_to_date_hook=lambda x: date)\n+        git_info = GitInfo(None, date, author, body, modified_files)\n+        super().__init__(git_info, strict=strict,\n+                         commit_to_info_hook=lambda x: None)\n \n \n # With zero arguments, process every patch file in the ./patches directory.\n@@ -100,7 +101,7 @@ def __init__(self, filename, strict=False):\n             print('OK')\n             email.print_output()\n         else:\n-            if not email.lines:\n+            if not email.info.lines:\n                 print('Error: patch contains no parsed lines', file=sys.stderr)\n             email.print_errors()\n             sys.exit(1)"}, {"sha": "4f0d21af03965e7376402080edf4aec1fbc82e65", "filename": "contrib/gcc-changelog/git_repository.py", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4676c923c85aba77020ad205873ed007f6c2df/contrib%2Fgcc-changelog%2Fgit_repository.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4676c923c85aba77020ad205873ed007f6c2df/contrib%2Fgcc-changelog%2Fgit_repository.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Fgit_repository.py?ref=de4676c923c85aba77020ad205873ed007f6c2df", "patch": "@@ -26,16 +26,38 @@\n     print('  Debian, Ubuntu: python3-git')\n     exit(1)\n \n-from git_commit import GitCommit\n+from git_commit import GitCommit, GitInfo\n \n \n def parse_git_revisions(repo_path, revisions, strict=False):\n     repo = Repo(repo_path)\n \n-    def commit_to_date(commit):\n+    def commit_to_info(commit):\n         try:\n             c = repo.commit(commit)\n-            return datetime.utcfromtimestamp(c.committed_date)\n+            diff = repo.commit(commit + '~').diff(commit)\n+\n+            modified_files = []\n+            for file in diff:\n+                if file.new_file:\n+                    t = 'A'\n+                elif file.deleted_file:\n+                    t = 'D'\n+                elif file.renamed_file:\n+                    # Consider that renamed files are two operations:\n+                    # the deletion of the original name\n+                    # and the addition of the new one.\n+                    modified_files.append((file.a_path, 'D'))\n+                    t = 'A'\n+                else:\n+                    t = 'M'\n+                modified_files.append((file.b_path, t))\n+\n+            date = datetime.utcfromtimestamp(c.committed_date)\n+            author = '%s  <%s>' % (c.author.name, c.author.email)\n+            git_info = GitInfo(c.hexsha, date, author,\n+                               c.message.split('\\n'), modified_files)\n+            return git_info\n         except ValueError:\n             return None\n \n@@ -46,28 +68,7 @@ def commit_to_date(commit):\n         commits = [repo.commit(revisions)]\n \n     for commit in commits:\n-        diff = repo.commit(commit.hexsha + '~').diff(commit.hexsha)\n-\n-        modified_files = []\n-        for file in diff:\n-            if file.new_file:\n-                t = 'A'\n-            elif file.deleted_file:\n-                t = 'D'\n-            elif file.renamed_file:\n-                # Consider that renamed files are two operations: the deletion\n-                # of the original name and the addition of the new one.\n-                modified_files.append((file.a_path, 'D'))\n-                t = 'A'\n-            else:\n-                t = 'M'\n-            modified_files.append((file.b_path, t))\n-\n-        date = datetime.utcfromtimestamp(commit.committed_date)\n-        author = '%s  <%s>' % (commit.author.name, commit.author.email)\n-        git_commit = GitCommit(commit.hexsha, date, author,\n-                               commit.message.split('\\n'), modified_files,\n-                               strict=strict,\n-                               commit_to_date_hook=commit_to_date)\n+        git_commit = GitCommit(commit_to_info(commit.hexsha), strict=strict,\n+                               commit_to_info_hook=commit_to_info)\n         parsed_commits.append(git_commit)\n     return parsed_commits"}]}