{"sha": "8e1494b72c6ee911ae8db9584b5bb180538b7c0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGUxNDk0YjcyYzZlZTkxMWFlOGRiOTU4NGI1YmIxODA1MzhiN2MwYw==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2001-09-24T16:21:09Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2001-09-24T16:21:09Z"}, "message": "pa.h (TRAMPOLINE_TEMPLATE): Add two words to the template for non 64-bit machines.\n\n\t* pa.h (TRAMPOLINE_TEMPLATE): Add two words to the template for\n\tnon 64-bit machines.  Use these as a plabel for the trampoline.\n\t(TRAMPOLINE_SIZE): Adjust size for new words.\n\t(INITIALIZE_TRAMPOLINE): Initialize new words.\n\t(TRAMPOLINE_ADJUST_ADDRESS): New.  Adjust address to make it a\n\tpointer to the plabel in the trampoline.\n\nFrom-SVN: r45776", "tree": {"sha": "5969229bd6fc43317dd727d4c781703b531ea4f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5969229bd6fc43317dd727d4c781703b531ea4f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e1494b72c6ee911ae8db9584b5bb180538b7c0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e1494b72c6ee911ae8db9584b5bb180538b7c0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e1494b72c6ee911ae8db9584b5bb180538b7c0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e1494b72c6ee911ae8db9584b5bb180538b7c0c/comments", "author": null, "committer": null, "parents": [{"sha": "b848dc65c43c049b0861d37ef2181b8ebbcf8254", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b848dc65c43c049b0861d37ef2181b8ebbcf8254", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b848dc65c43c049b0861d37ef2181b8ebbcf8254"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "d526acff22a89d6477930b95c08b88552b48ccd9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e1494b72c6ee911ae8db9584b5bb180538b7c0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e1494b72c6ee911ae8db9584b5bb180538b7c0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e1494b72c6ee911ae8db9584b5bb180538b7c0c", "patch": "@@ -1,3 +1,12 @@\n+2001-09-24  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* pa.h (TRAMPOLINE_TEMPLATE): Add two words to the template for\n+\tnon 64-bit machines.  Use these as a plabel for the trampoline.\n+\t(TRAMPOLINE_SIZE): Adjust size for new words.\n+\t(INITIALIZE_TRAMPOLINE): Initialize new words.\n+\t(TRAMPOLINE_ADJUST_ADDRESS): New.  Adjust address to make it a\n+\tpointer to the plabel in the trampoline.\n+\n 2001-09-24  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* pa.c (function_arg): Pass floating arguments in both general and"}, {"sha": "09f5bbc0241a7a5ddb297a8d42fcb6101e37e316", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e1494b72c6ee911ae8db9584b5bb180538b7c0c/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e1494b72c6ee911ae8db9584b5bb180538b7c0c/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=8e1494b72c6ee911ae8db9584b5bb180538b7c0c", "patch": "@@ -922,6 +922,8 @@ extern int may_call_alloca;\n \tfputs (\"\\tldw\t40(%r22),%r29\\n\", FILE);\t\t\t\\\n \tfputs (\"\\t.word\t0\\n\", FILE);\t\t\t\t\t\\\n \tfputs (\"\\t.word\t0\\n\", FILE);\t\t\t\t\t\\\n+\tfputs (\"\\t.word\t0\\n\", FILE);\t\t\t\t\t\\\n+\tfputs (\"\\t.word\t0\\n\", FILE);\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n     else\t\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n@@ -949,14 +951,17 @@ extern int may_call_alloca;\n    If the code part of the trampoline ever grows to > 32 bytes, then it\n    will become necessary to hack on the cacheflush pattern in pa.md.  */\n \n-#define TRAMPOLINE_SIZE (TARGET_64BIT ? 72 : 11 * 4)\n+#define TRAMPOLINE_SIZE (TARGET_64BIT ? 72 : 52)\n \n /* Emit RTL insns to initialize the variable parts of a trampoline.\n    FNADDR is an RTX for the address of the function's pure code.\n    CXT is an RTX for the static chain value for the function.\n \n-   Move the function address to the trampoline template at offset 12.\n-   Move the static chain value to trampoline template at offset 16.  */\n+   Move the function address to the trampoline template at offset 36.\n+   Move the static chain value to trampoline template at offset 40.\n+   Move the trampoline address to trampoline template at offset 44.\n+   Move r19 to trampoline template at offset 48.  The latter two\n+   words create a plabel for the indirect call to the trampoline.  */\n \n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT) \t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n@@ -968,6 +973,11 @@ extern int may_call_alloca;\n       emit_move_insn (gen_rtx_MEM (Pmode, start_addr), (FNADDR));\t\\\n       start_addr = memory_address (Pmode, plus_constant ((TRAMP), 40));\t\\\n       emit_move_insn (gen_rtx_MEM (Pmode, start_addr), (CXT));\t\t\\\n+      start_addr = memory_address (Pmode, plus_constant ((TRAMP), 44));\t\\\n+      emit_move_insn (gen_rtx_MEM (Pmode, start_addr), (TRAMP));\t\\\n+      start_addr = memory_address (Pmode, plus_constant ((TRAMP), 48));\t\\\n+      emit_move_insn (gen_rtx_MEM (Pmode, start_addr),\t\t\t\\\n+\t\t      gen_rtx_REG (Pmode, 19));\t\t\t\t\\\n       /* fdc and fic only use registers for the address to flush,\t\\\n \t they do not accept integer displacements.  */ \t\t\t\\\n       start_addr = force_reg (Pmode, (TRAMP));\t\t\t\t\\\n@@ -1003,6 +1013,13 @@ extern int may_call_alloca;\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n+/* Perform any machine-specific adjustment in the address of the trampoline.\n+   ADDR contains the address that was passed to INITIALIZE_TRAMPOLINE.\n+   Adjust the trampoline address to point to the plabel at offset 44.  */\n+   \n+#define TRAMPOLINE_ADJUST_ADDRESS(ADDR) \\\n+  if (!TARGET_64BIT) (ADDR) = memory_address (Pmode, plus_constant ((ADDR), 46))\n+\n /* Emit code for a call to builtin_saveregs.  We must emit USE insns which\n    reference the 4 integer arg registers and 4 fp arg registers.\n    Ordinarily they are not call used registers, but they are for"}]}