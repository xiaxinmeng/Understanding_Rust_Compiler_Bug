{"sha": "cf8aba7f5a071a5cb7dad4c91dd77b602861797e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y4YWJhN2Y1YTA3MWE1Y2I3ZGFkNGM5MWRkNzdiNjAyODYxNzk3ZQ==", "commit": {"author": {"name": "Rafael Avila de Espindola", "email": "espindola@google.com", "date": "2009-04-17T16:03:48Z"}, "committer": {"name": "Rafael Espindola", "email": "espindola@gcc.gnu.org", "date": "2009-04-17T16:03:48Z"}, "message": "Makefile.in (REVISION_s): Always include quotes.\n\n2009-04-17  Rafael Avila de Espindola  <espindola@google.com>\n\n\t* Makefile.in (REVISION_s): Always include quotes. Change ifdef to use\n\tREVISION_c.\n\t(OBJS-common): Add plugin-version.o.\n\t(plugin-version.o): New.\n\t* gcc-plugin.h (plugin_gcc_version): New.\n\t(plugin_default_version_check): New.\n\t(plugin_init_func, plugin_init): Add version argument.\n\t* plugin-version.c: New.\n\t* plugin.c (str_plugin_gcc_version_name): New.\n\t(try_init_one_plugin): Read plugin_gcc_version from the plugin and\n\tpass it to the init function.\n\t(plugin_default_version_check): New.\n\nFrom-SVN: r146274", "tree": {"sha": "8816dc843909a798c6868ae53bf87d630cf35e28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8816dc843909a798c6868ae53bf87d630cf35e28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf8aba7f5a071a5cb7dad4c91dd77b602861797e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf8aba7f5a071a5cb7dad4c91dd77b602861797e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf8aba7f5a071a5cb7dad4c91dd77b602861797e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf8aba7f5a071a5cb7dad4c91dd77b602861797e/comments", "author": null, "committer": null, "parents": [{"sha": "61e20b90d9ae993af2c3c2f34198432eeafbfb65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61e20b90d9ae993af2c3c2f34198432eeafbfb65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61e20b90d9ae993af2c3c2f34198432eeafbfb65"}], "stats": {"total": 116, "additions": 112, "deletions": 4}, "files": [{"sha": "a269b1c558db144a5b2e372fef93b6af4eb3da20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8aba7f5a071a5cb7dad4c91dd77b602861797e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8aba7f5a071a5cb7dad4c91dd77b602861797e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf8aba7f5a071a5cb7dad4c91dd77b602861797e", "patch": "@@ -1,3 +1,18 @@\n+2009-04-17  Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* Makefile.in (REVISION_s): Always include quotes. Change ifdef to use\n+\tREVISION_c.\n+\t(OBJS-common): Add plugin-version.o.\n+\t(plugin-version.o): New.\n+\t* gcc-plugin.h (plugin_gcc_version): New.\n+\t(plugin_default_version_check): New.\n+\t(plugin_init_func, plugin_init): Add version argument.\n+\t* plugin-version.c: New.\n+\t* plugin.c (str_plugin_gcc_version_name): New.\n+\t(try_init_one_plugin): Read plugin_gcc_version from the plugin and\n+\tpass it to the init function.\n+\t(plugin_default_version_check): New.\n+\n 2009-04-17  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-alias.c (refs_may_alias_p_1): Do not use TBAA"}, {"sha": "9236f1408c876e4ee5091384c2183079678711a2", "filename": "gcc/Makefile.in", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8aba7f5a071a5cb7dad4c91dd77b602861797e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8aba7f5a071a5cb7dad4c91dd77b602861797e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=cf8aba7f5a071a5cb7dad4c91dd77b602861797e", "patch": "@@ -780,7 +780,7 @@ BUGURL_TEXI := @REPORT_BUGS_TEXI@\n ifdef REVISION_c\n REVISION_s  := \"\\\"$(if $(DEVPHASE_c), $(REVISION_c))\\\"\"\n else\n-REVISION_s  :=\n+REVISION_s  := \"\\\"\\\"\"\n endif\n \n # Shorthand variables for dependency lists.\n@@ -1154,6 +1154,7 @@ OBJS-common = \\\n \tparams.o \\\n \tpasses.o \\\n \tplugin.o \\\n+\tplugin-version.o \\\n \tpointer-set.o \\\n \tpostreload-gcse.o \\\n \tpostreload.o \\\n@@ -2003,7 +2004,7 @@ gcc-options.o: options.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) opts.h intl\n \n dumpvers: dumpvers.c\n \n-ifdef REVISION_s\n+ifdef REVISION_c\n version.o: version.c version.h $(REVISION) $(DATESTAMP) $(BASEVER) $(DEVPHASE)\n else\n version.o: version.c version.h $(DATESTAMP) $(BASEVER) $(DEVPHASE)\n@@ -2473,6 +2474,12 @@ passes.o : passes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n plugin.o : plugin.c $(PLUGIN_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    errors.h $(TOPLEV_H) $(TREE_H) $(TREE_PASS_H) intl.h\n \n+plugin-version.o : plugin-version.c $(SYSTEM_H) gcc-plugin.h configargs.h\n+\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) \\\n+\t-DBASEVER=$(BASEVER_s) -DDATESTAMP=$(DATESTAMP_s) \\\n+\t-DREVISION=$(REVISION_s) -DDEVPHASE=$(DEVPHASE_s) -c \\\n+\t-DPLUGIN $(srcdir)/plugin-version.c $(OUTPUT_OPTION)\n+\n main.o : main.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TOPLEV_H)\n \n host-default.o : host-default.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\"}, {"sha": "543dc933742c35b2c72bc24f0b3db21e1c30023f", "filename": "gcc/gcc-plugin.h", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8aba7f5a071a5cb7dad4c91dd77b602861797e/gcc%2Fgcc-plugin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8aba7f5a071a5cb7dad4c91dd77b602861797e/gcc%2Fgcc-plugin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc-plugin.h?ref=cf8aba7f5a071a5cb7dad4c91dd77b602861797e", "patch": "@@ -67,22 +67,42 @@ struct plugin_info\n   const char *help;\n };\n \n+/* Represents the gcc version. Used to avoid using an incompatible plugin. */\n+\n+struct plugin_gcc_version\n+{\n+  const char *basever;\n+  const char *datestamp;\n+  const char *devphase;\n+  const char *revision;\n+  const char *configuration_arguments;\n+};\n+\n+extern struct plugin_gcc_version plugin_gcc_version;\n+\n+/* The default version check. Compares every field in VERSION. */\n+\n+extern bool plugin_default_version_check(struct plugin_gcc_version *version);\n+\n /* Function type for the plugin initialization routine. Each plugin module\n    should define this as an externally-visible function with name\n    \"plugin_init.\"\n \n    PLUGIN_NAME - name of the plugin (useful for error reporting)\n+   VERSION     - the plugin_gcc_version symbol of the plugin itself.\n    ARGC        - the size of the ARGV array\n    ARGV        - an array of key-value argument pair\n \n    Returns 0 if initialization finishes successfully.  */\n \n typedef int (*plugin_init_func) (const char *plugin_name,\n+                                 struct plugin_gcc_version *version,\n                                  int argc, struct plugin_argument *argv);\n \n /* Declaration for \"plugin_init\" function so that it doesn't need to be\n    duplicated in every plugin.  */\n-extern int plugin_init (const char *, int, struct plugin_argument *);\n+extern int plugin_init (const char *, struct plugin_gcc_version *version,\n+\t\t\tint, struct plugin_argument *);\n \n /* Function type for a plugin callback routine.\n "}, {"sha": "b6f35a9d18f4e736947984d3220d50fb6d4cdf9f", "filename": "gcc/plugin-version.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8aba7f5a071a5cb7dad4c91dd77b602861797e/gcc%2Fplugin-version.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8aba7f5a071a5cb7dad4c91dd77b602861797e/gcc%2Fplugin-version.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin-version.c?ref=cf8aba7f5a071a5cb7dad4c91dd77b602861797e", "patch": "@@ -0,0 +1,36 @@\n+/* Version information for plugins.\n+   Copyright (C) 1987, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"system.h\"\n+#include \"gcc-plugin.h\"\n+#include \"configargs.h\"\n+\n+static char basever[] = BASEVER;\n+static char datestamp[] = DATESTAMP;\n+static char devphase[] = DEVPHASE;\n+static char revision[] = REVISION;\n+\n+/* FIXME plugins: We should make the version information more precise.\n+   One way to do is to add a checksum. */\n+\n+struct plugin_gcc_version plugin_gcc_version = {basever, datestamp, devphase,\n+\t\t\t\t\t\trevision,\n+\t\t\t\t\t\tconfiguration_arguments};"}, {"sha": "c406c38b5f35f75baf322bb2f523403ec4456937", "filename": "gcc/plugin.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8aba7f5a071a5cb7dad4c91dd77b602861797e/gcc%2Fplugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8aba7f5a071a5cb7dad4c91dd77b602861797e/gcc%2Fplugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.c?ref=cf8aba7f5a071a5cb7dad4c91dd77b602861797e", "patch": "@@ -99,6 +99,7 @@ static struct pass_list_node *prev_added_pass_node;\n /* Each plugin should define an initialization function with exactly\n    this name.  */\n static const char *str_plugin_init_func_name = \"plugin_init\";\n+static const char *str_plugin_gcc_version_name = \"plugin_gcc_version\";\n #endif\n \n /* Helper function for the hash table that compares the base_name of the\n@@ -566,8 +567,10 @@ try_init_one_plugin (struct plugin_name_args *plugin)\n {\n   void *dl_handle;\n   plugin_init_func plugin_init;\n+  struct plugin_gcc_version *version;\n   char *err;\n   PTR_UNION_TYPE (plugin_init_func) plugin_init_union;\n+  PTR_UNION_TYPE (struct plugin_gcc_version*) version_union;\n \n   dl_handle = dlopen (plugin->full_name, RTLD_NOW);\n   if (!dl_handle)\n@@ -590,8 +593,12 @@ try_init_one_plugin (struct plugin_name_args *plugin)\n       return false;\n     }\n \n+  PTR_UNION_AS_VOID_PTR (version_union) =\n+      dlsym (dl_handle, str_plugin_gcc_version_name);\n+  version = PTR_UNION_AS_CAST_PTR (version_union);\n+\n   /* Call the plugin-provided initialization routine with the arguments.  */\n-  if ((*plugin_init) (plugin->base_name, plugin->argc, plugin->argv))\n+  if ((*plugin_init) (plugin->base_name, version, plugin->argc, plugin->argv))\n     {\n       error (\"Fail to initialize plugin %s\", plugin->full_name);\n       return false;\n@@ -805,3 +812,26 @@ debug_active_plugins (void)\n {\n   dump_active_plugins (stderr);\n }\n+\n+/* The default version check. Compares every field in VERSION. */\n+\n+bool\n+plugin_default_version_check(struct plugin_gcc_version *version)\n+{\n+  /* version is NULL if the plugin was not linked with plugin-version.o */\n+  if (!version)\n+    return false;\n+\n+  if (strcmp (version->basever, plugin_gcc_version.basever))\n+    return false;\n+  if (strcmp (version->datestamp, plugin_gcc_version.datestamp))\n+    return false;\n+  if (strcmp (version->devphase, plugin_gcc_version.devphase))\n+    return false;\n+  if (strcmp (version->revision, plugin_gcc_version.revision))\n+    return false;\n+  if (strcmp (version->configuration_arguments,\n+\t      plugin_gcc_version.configuration_arguments))\n+    return false;\n+  return true;\n+}"}]}