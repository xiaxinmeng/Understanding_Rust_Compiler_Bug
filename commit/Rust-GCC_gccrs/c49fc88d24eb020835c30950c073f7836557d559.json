{"sha": "c49fc88d24eb020835c30950c073f7836557d559", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ5ZmM4OGQyNGViMDIwODM1YzMwOTUwYzA3M2Y3ODM2NTU3ZDU1OQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-09-13T16:55:22Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-09-13T16:55:22Z"}, "message": "dwarf2out.c: remove typedefs that hide pointerness\n\ngcc/ChangeLog:\n\n2015-09-13  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* dwarf2out.c (dw_attr_ref): Remove typedef.\n\t(dw_line_info_ref): Likewise.\n\t(pubname_ref): Likewise.\n\t(dw_ranges_ref): Likewise.\n\t(dw_ranges_by_label_ref): Likewise.\n\t(comdat_type_node_ref): Likewise.\n (dw_line_info_table_struct): Rename to dw_line_info_table.\n\t(get_AT): Adjust.\n\t(get_AT_low_pc): Likewise.\n\t(get_AT_hi_pc): Likewise.\n\t(get_AT_string): Likewise.\n\t(get_AT_flag): Likewise.\n\t(get_AT_unsigned): Likewise.\n\t(get_AT_ref): Likewise.\n\t(get_AT_file): Likewise.\n\t(remove_AT): Likewise.\n\t(print_die): Likewise.\n\t(check_die): Likewise.\n\t(die_checksum): Likewise.\n\t(attr_checksum_ordered): Likewise.\n\t(struct checksum_attributes): Likewise.\n\t(collect_checksum_attributes): Likewise.\n\t(die_checksum_ordered): Likewise.\n\t\t\t(same_die_p): Likewise.\n\t\t\t(is_declaration_die): Likewise.\n\t(clone_die): Likewise.\n\t(clone_as_declaration): Likewise.\n\t(copy_declaration_context): Likewise.\n\t(break_out_comdat_types): Likewise.\n\t(copy_decls_walk): Likewise.\n\t(output_location_lists): Likewise.\n\t(external_ref_hasher::hash): Likewise.\n\t(optimize_external_refs_1): Likewise.\n\t(build_abbrev_table): Likewise.\n\t(size_of_die): Likewise.\n\t(unmark_all_dies): Likewise.\n\t(size_of_pubnames): Likewise.\n\t(output_die_abbrevs): Likewise.\n\t(output_die): Likewise.\n\t(output_pubnames): Likewise.\n\t(add_ranges_num): Likewise.\n\t(add_ranges_by_labels): Likewise.\n\t(add_high_low_attributes): Likewise.\n\t(gen_producer_string): Likewise.\n\t(dwarf2out_set_name): Likewise.\n\t(new_line_info_table): Likewise.\n\t(prune_unused_types_walk_attribs): Likewise.\n\t(prune_unused_types_update_strings): Likewise.\n\t(prune_unused_types): Likewise.\n\t(resolve_addr): Likewise.\n\t(optimize_location_lists_1): Likewise.\n\t(index_location_lists): Likewise.\n\t(dwarf2out_finish): Likewise.\n\nFrom-SVN: r227726", "tree": {"sha": "07c77664f84153fcdb6ad9615dfe0921fc1d8be4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07c77664f84153fcdb6ad9615dfe0921fc1d8be4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c49fc88d24eb020835c30950c073f7836557d559", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c49fc88d24eb020835c30950c073f7836557d559", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c49fc88d24eb020835c30950c073f7836557d559", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c49fc88d24eb020835c30950c073f7836557d559/comments", "author": null, "committer": null, "parents": [{"sha": "b01c08c7a74aa67ae86706466448f90281786f0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b01c08c7a74aa67ae86706466448f90281786f0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b01c08c7a74aa67ae86706466448f90281786f0d"}], "stats": {"total": 395, "additions": 218, "deletions": 177}, "files": [{"sha": "381570dbdd242ee309ad20fcbe61c76d42fd3b80", "filename": "gcc/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c49fc88d24eb020835c30950c073f7836557d559/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c49fc88d24eb020835c30950c073f7836557d559/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c49fc88d24eb020835c30950c073f7836557d559", "patch": "@@ -1,3 +1,58 @@\n+2015-09-13  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* dwarf2out.c (dw_attr_ref): Remove typedef.\n+\t(dw_line_info_ref): Likewise.\n+\t(pubname_ref): Likewise.\n+\t(dw_ranges_ref): Likewise.\n+\t(dw_ranges_by_label_ref): Likewise.\n+\t(comdat_type_node_ref): Likewise.\n+\t(get_AT): Adjust.\n+\t(get_AT_low_pc): Likewise.\n+\t(get_AT_hi_pc): Likewise.\n+\t(get_AT_string): Likewise.\n+\t(get_AT_flag): Likewise.\n+\t(get_AT_unsigned): Likewise.\n+\t(get_AT_ref): Likewise.\n+\t(get_AT_file): Likewise.\n+\t(remove_AT): Likewise.\n+\t(print_die): Likewise.\n+\t(check_die): Likewise.\n+\t(die_checksum): Likewise.\n+\t(attr_checksum_ordered): Likewise.\n+\t(struct checksum_attributes): Likewise.\n+\t(collect_checksum_attributes): Likewise.\n+\t(die_checksum_ordered): Likewise.\n+\t\t\t(same_die_p): Likewise.\n+\t\t\t(is_declaration_die): Likewise.\n+\t(clone_die): Likewise.\n+\t(clone_as_declaration): Likewise.\n+\t(copy_declaration_context): Likewise.\n+\t(break_out_comdat_types): Likewise.\n+\t(copy_decls_walk): Likewise.\n+\t(output_location_lists): Likewise.\n+\t(external_ref_hasher::hash): Likewise.\n+\t(optimize_external_refs_1): Likewise.\n+\t(build_abbrev_table): Likewise.\n+\t(size_of_die): Likewise.\n+\t(unmark_all_dies): Likewise.\n+\t(size_of_pubnames): Likewise.\n+\t(output_die_abbrevs): Likewise.\n+\t(output_die): Likewise.\n+\t(output_pubnames): Likewise.\n+\t(add_ranges_num): Likewise.\n+\t(add_ranges_by_labels): Likewise.\n+\t(add_high_low_attributes): Likewise.\n+\t(gen_producer_string): Likewise.\n+\t(dwarf2out_set_name): Likewise.\n+\t(new_line_info_table): Likewise.\n+\t(prune_unused_types_walk_attribs): Likewise.\n+\t(prune_unused_types_update_strings): Likewise.\n+\t(prune_unused_types): Likewise.\n+\t(resolve_addr): Likewise.\n+\t(optimize_location_lists_1): Likewise.\n+\t(index_location_lists): Likewise.\n+\t(dwarf2out_finish): Likewise.\n+\n 2015-09-13  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* dwarf2cfi.c (dw_trace_info_ref): Remove typedef."}, {"sha": "7d098d8cb0ed6ba80a13b391819f34a2ce14ffb3", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 163, "deletions": 177, "changes": 340, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c49fc88d24eb020835c30950c073f7836557d559/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c49fc88d24eb020835c30950c073f7836557d559/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=c49fc88d24eb020835c30950c073f7836557d559", "patch": "@@ -2550,14 +2550,7 @@ const struct gcc_debug_hooks dwarf2_lineno_debug_hooks =\n \n typedef long int dw_offset;\n \n-/* Define typedefs here to avoid circular dependencies.  */\n-\n-typedef struct dw_attr_struct *dw_attr_ref;\n-typedef struct dw_line_info_struct *dw_line_info_ref;\n-typedef struct pubname_struct *pubname_ref;\n-typedef struct dw_ranges_struct *dw_ranges_ref;\n-typedef struct dw_ranges_by_label_struct *dw_ranges_by_label_ref;\n-typedef struct comdat_type_struct *comdat_type_node_ref;\n+struct comdat_type_node;\n \n /* The entries in the line_info table more-or-less mirror the opcodes\n    that are used in the real dwarf line table.  Arrays of these entries\n@@ -2596,7 +2589,7 @@ typedef struct GTY(()) dw_line_info_struct {\n } dw_line_info_entry;\n \n \n-typedef struct GTY(()) dw_line_info_table_struct {\n+struct GTY(()) dw_line_info_table {\n   /* The label that marks the end of this section.  */\n   const char *end_label;\n \n@@ -2610,9 +2603,7 @@ typedef struct GTY(()) dw_line_info_table_struct {\n   bool in_use;\n \n   vec<dw_line_info_entry, va_gc> *entries;\n-} dw_line_info_table;\n-\n-typedef dw_line_info_table *dw_line_info_table_p;\n+};\n \n \n /* Each DIE attribute has a field specifying the attribute kind,\n@@ -2634,7 +2625,7 @@ typedef struct GTY((chain_circular (\"%h.die_sib\"), for_user)) die_struct {\n   union die_symbol_or_type_node\n     {\n       const char * GTY ((tag (\"0\"))) die_symbol;\n-      comdat_type_node_ref GTY ((tag (\"1\"))) die_type_node;\n+      comdat_type_node *GTY ((tag (\"1\"))) die_type_node;\n     }\n   GTY ((desc (\"%0.comdat_type_p\"))) die_id;\n   vec<dw_attr_node, va_gc> *die_attr;\n@@ -2680,7 +2671,7 @@ typedef struct GTY(()) pubname_struct {\n pubname_entry;\n \n \n-struct GTY(()) dw_ranges_struct {\n+struct GTY(()) dw_ranges {\n   /* If this is positive, it's a block number, otherwise it's a\n      bitwise-negated index into dw_ranges_by_label.  */\n   int num;\n@@ -2696,21 +2687,20 @@ typedef struct GTY(()) macinfo_struct {\n macinfo_entry;\n \n \n-struct GTY(()) dw_ranges_by_label_struct {\n+struct GTY(()) dw_ranges_by_label {\n   const char *begin;\n   const char *end;\n };\n \n /* The comdat type node structure.  */\n-typedef struct GTY(()) comdat_type_struct\n+struct GTY(()) comdat_type_node\n {\n   dw_die_ref root_die;\n   dw_die_ref type_die;\n   dw_die_ref skeleton_die;\n   char signature[DWARF_TYPE_SIGNATURE_SIZE];\n-  struct comdat_type_struct *next;\n-}\n-comdat_type_node;\n+  comdat_type_node *next;\n+};\n \n /* A list of DIEs for which we can't determine ancestry (parent_die\n    field) just yet.  Later in dwarf2out_finish we will fill in the\n@@ -2985,7 +2975,7 @@ static GTY(()) dw_line_info_table *text_section_line_info;\n static GTY(()) dw_line_info_table *cold_text_section_line_info;\n \n /* The set of all non-default tables of line number info.  */\n-static GTY(()) vec<dw_line_info_table_p, va_gc> *separate_line_info;\n+static GTY(()) vec<dw_line_info_table *, va_gc> *separate_line_info;\n \n /* A flag to tell pubnames/types export if there is an info section to\n    refer to.  */\n@@ -3010,7 +3000,7 @@ static GTY (()) vec<macinfo_entry, va_gc> *macinfo_table;\n    && !macinfo_table->is_empty ())\n \n /* Array of dies for which we should generate .debug_ranges info.  */\n-static GTY ((length (\"ranges_table_allocated\"))) dw_ranges_ref ranges_table;\n+static GTY ((length (\"ranges_table_allocated\"))) dw_ranges *ranges_table;\n \n /* Number of elements currently allocated for ranges_table.  */\n static GTY(()) unsigned ranges_table_allocated;\n@@ -3020,7 +3010,7 @@ static GTY(()) unsigned ranges_table_in_use;\n \n /* Array of pairs of labels referenced in ranges_table.  */\n static GTY ((length (\"ranges_by_label_allocated\")))\n-     dw_ranges_by_label_ref ranges_by_label;\n+     dw_ranges_by_label *ranges_by_label;\n \n /* Number of elements currently allocated for ranges_by_label.  */\n static GTY(()) unsigned ranges_by_label_allocated;\n@@ -3081,47 +3071,47 @@ static const char *dwarf_attr_name (unsigned);\n static const char *dwarf_form_name (unsigned);\n static tree decl_ultimate_origin (const_tree);\n static tree decl_class_context (tree);\n-static void add_dwarf_attr (dw_die_ref, dw_attr_ref);\n-static inline enum dw_val_class AT_class (dw_attr_ref);\n-static inline unsigned int AT_index (dw_attr_ref);\n+static void add_dwarf_attr (dw_die_ref, dw_attr_node *);\n+static inline enum dw_val_class AT_class (dw_attr_node *);\n+static inline unsigned int AT_index (dw_attr_node *);\n static void add_AT_flag (dw_die_ref, enum dwarf_attribute, unsigned);\n-static inline unsigned AT_flag (dw_attr_ref);\n+static inline unsigned AT_flag (dw_attr_node *);\n static void add_AT_int (dw_die_ref, enum dwarf_attribute, HOST_WIDE_INT);\n-static inline HOST_WIDE_INT AT_int (dw_attr_ref);\n+static inline HOST_WIDE_INT AT_int (dw_attr_node *);\n static void add_AT_unsigned (dw_die_ref, enum dwarf_attribute, unsigned HOST_WIDE_INT);\n-static inline unsigned HOST_WIDE_INT AT_unsigned (dw_attr_ref);\n+static inline unsigned HOST_WIDE_INT AT_unsigned (dw_attr_node *);\n static void add_AT_double (dw_die_ref, enum dwarf_attribute,\n \t\t\t   HOST_WIDE_INT, unsigned HOST_WIDE_INT);\n static inline void add_AT_vec (dw_die_ref, enum dwarf_attribute, unsigned int,\n \t\t\t       unsigned int, unsigned char *);\n static void add_AT_data8 (dw_die_ref, enum dwarf_attribute, unsigned char *);\n static void add_AT_string (dw_die_ref, enum dwarf_attribute, const char *);\n-static inline const char *AT_string (dw_attr_ref);\n-static enum dwarf_form AT_string_form (dw_attr_ref);\n+static inline const char *AT_string (dw_attr_node *);\n+static enum dwarf_form AT_string_form (dw_attr_node *);\n static void add_AT_die_ref (dw_die_ref, enum dwarf_attribute, dw_die_ref);\n static void add_AT_specification (dw_die_ref, dw_die_ref);\n-static inline dw_die_ref AT_ref (dw_attr_ref);\n-static inline int AT_ref_external (dw_attr_ref);\n-static inline void set_AT_ref_external (dw_attr_ref, int);\n+static inline dw_die_ref AT_ref (dw_attr_node *);\n+static inline int AT_ref_external (dw_attr_node *);\n+static inline void set_AT_ref_external (dw_attr_node *, int);\n static void add_AT_fde_ref (dw_die_ref, enum dwarf_attribute, unsigned);\n static void add_AT_loc (dw_die_ref, enum dwarf_attribute, dw_loc_descr_ref);\n-static inline dw_loc_descr_ref AT_loc (dw_attr_ref);\n+static inline dw_loc_descr_ref AT_loc (dw_attr_node *);\n static void add_AT_loc_list (dw_die_ref, enum dwarf_attribute,\n \t\t\t     dw_loc_list_ref);\n-static inline dw_loc_list_ref AT_loc_list (dw_attr_ref);\n+static inline dw_loc_list_ref AT_loc_list (dw_attr_node *);\n static addr_table_entry *add_addr_table_entry (void *, enum ate_kind);\n static void remove_addr_table_entry (addr_table_entry *);\n static void add_AT_addr (dw_die_ref, enum dwarf_attribute, rtx, bool);\n-static inline rtx AT_addr (dw_attr_ref);\n+static inline rtx AT_addr (dw_attr_node *);\n static void add_AT_lbl_id (dw_die_ref, enum dwarf_attribute, const char *);\n static void add_AT_lineptr (dw_die_ref, enum dwarf_attribute, const char *);\n static void add_AT_macptr (dw_die_ref, enum dwarf_attribute, const char *);\n static void add_AT_offset (dw_die_ref, enum dwarf_attribute,\n \t\t\t   unsigned HOST_WIDE_INT);\n static void add_AT_range_list (dw_die_ref, enum dwarf_attribute,\n                                unsigned long, bool);\n-static inline const char *AT_lbl (dw_attr_ref);\n-static dw_attr_ref get_AT (dw_die_ref, enum dwarf_attribute);\n+static inline const char *AT_lbl (dw_attr_node *);\n+static dw_attr_node *get_AT (dw_die_ref, enum dwarf_attribute);\n static const char *get_AT_low_pc (dw_die_ref);\n static const char *get_AT_hi_pc (dw_die_ref);\n static const char *get_AT_string (dw_die_ref, enum dwarf_attribute);\n@@ -3148,12 +3138,12 @@ static void print_die (dw_die_ref, FILE *);\n static dw_die_ref push_new_compile_unit (dw_die_ref, dw_die_ref);\n static dw_die_ref pop_compile_unit (dw_die_ref);\n static void loc_checksum (dw_loc_descr_ref, struct md5_ctx *);\n-static void attr_checksum (dw_attr_ref, struct md5_ctx *, int *);\n+static void attr_checksum (dw_attr_node *, struct md5_ctx *, int *);\n static void die_checksum (dw_die_ref, struct md5_ctx *, int *);\n static void checksum_sleb128 (HOST_WIDE_INT, struct md5_ctx *);\n static void checksum_uleb128 (unsigned HOST_WIDE_INT, struct md5_ctx *);\n static void loc_checksum_ordered (dw_loc_descr_ref, struct md5_ctx *);\n-static void attr_checksum_ordered (enum dwarf_tag, dw_attr_ref,\n+static void attr_checksum_ordered (enum dwarf_tag, dw_attr_node *,\n \t\t\t\t   struct md5_ctx *, int *);\n struct checksum_attributes;\n static void collect_checksum_attributes (struct checksum_attributes *, dw_die_ref);\n@@ -3162,7 +3152,7 @@ static void checksum_die_context (dw_die_ref, struct md5_ctx *);\n static void generate_type_signature (dw_die_ref, comdat_type_node *);\n static int same_loc_p (dw_loc_descr_ref, dw_loc_descr_ref, int *);\n static int same_dw_val_p (const dw_val_node *, const dw_val_node *, int *);\n-static int same_attr_p (dw_attr_ref, dw_attr_ref, int *);\n+static int same_attr_p (dw_attr_node *, dw_attr_node *, int *);\n static int same_die_p (dw_die_ref, dw_die_ref, int *);\n static int same_die_p_wrap (dw_die_ref, dw_die_ref);\n static void compute_section_prefix (dw_die_ref);\n@@ -3198,8 +3188,8 @@ static void unmark_dies (dw_die_ref);\n static void unmark_all_dies (dw_die_ref);\n static unsigned long size_of_pubnames (vec<pubname_entry, va_gc> *);\n static unsigned long size_of_aranges (void);\n-static enum dwarf_form value_format (dw_attr_ref);\n-static void output_value_format (dw_attr_ref);\n+static enum dwarf_form value_format (dw_attr_node *);\n+static void output_value_format (dw_attr_node *);\n static void output_abbrev_section (void);\n static void output_die_abbrevs (unsigned long, dw_die_ref);\n static void output_die_symbol (dw_die_ref);\n@@ -3357,8 +3347,8 @@ static void prune_unused_types_walk_attribs (dw_die_ref);\n static void prune_unused_types_prune (dw_die_ref);\n static void prune_unused_types (void);\n static int maybe_emit_file (struct dwarf_file_data *fd);\n-static inline const char *AT_vms_delta1 (dw_attr_ref);\n-static inline const char *AT_vms_delta2 (dw_attr_ref);\n+static inline const char *AT_vms_delta1 (dw_attr_node *);\n+static inline const char *AT_vms_delta2 (dw_attr_node *);\n static inline void add_AT_vms_delta (dw_die_ref, enum dwarf_attribute,\n \t\t\t\t     const char *, const char *);\n static void append_entry_to_tmpl_value_parm_die_table (dw_die_ref, tree);\n@@ -3800,7 +3790,7 @@ decl_class_context (tree decl)\n /* Add an attribute/value pair to a DIE.  */\n \n static inline void\n-add_dwarf_attr (dw_die_ref die, dw_attr_ref attr)\n+add_dwarf_attr (dw_die_ref die, dw_attr_node *attr)\n {\n   /* Maybe this should be an assert?  */\n   if (die == NULL)\n@@ -3811,7 +3801,7 @@ add_dwarf_attr (dw_die_ref die, dw_attr_ref attr)\n }\n \n static inline enum dw_val_class\n-AT_class (dw_attr_ref a)\n+AT_class (dw_attr_node *a)\n {\n   return a->dw_attr_val.val_class;\n }\n@@ -3822,7 +3812,7 @@ AT_class (dw_attr_ref a)\n    pruning.  */\n \n static inline unsigned int\n-AT_index (dw_attr_ref a)\n+AT_index (dw_attr_node *a)\n {\n   if (AT_class (a) == dw_val_class_str)\n     return a->dw_attr_val.v.val_str->index;\n@@ -3846,7 +3836,7 @@ add_AT_flag (dw_die_ref die, enum dwarf_attribute attr_kind, unsigned int flag)\n }\n \n static inline unsigned\n-AT_flag (dw_attr_ref a)\n+AT_flag (dw_attr_node *a)\n {\n   gcc_assert (a && AT_class (a) == dw_val_class_flag);\n   return a->dw_attr_val.v.val_flag;\n@@ -3867,7 +3857,7 @@ add_AT_int (dw_die_ref die, enum dwarf_attribute attr_kind, HOST_WIDE_INT int_va\n }\n \n static inline HOST_WIDE_INT\n-AT_int (dw_attr_ref a)\n+AT_int (dw_attr_node *a)\n {\n   gcc_assert (a && AT_class (a) == dw_val_class_const);\n   return a->dw_attr_val.v.val_int;\n@@ -3889,7 +3879,7 @@ add_AT_unsigned (dw_die_ref die, enum dwarf_attribute attr_kind,\n }\n \n static inline unsigned HOST_WIDE_INT\n-AT_unsigned (dw_attr_ref a)\n+AT_unsigned (dw_attr_node *a)\n {\n   gcc_assert (a && AT_class (a) == dw_val_class_unsigned_const);\n   return a->dw_attr_val.v.val_unsigned;\n@@ -4064,7 +4054,7 @@ add_AT_string (dw_die_ref die, enum dwarf_attribute attr_kind, const char *str)\n }\n \n static inline const char *\n-AT_string (dw_attr_ref a)\n+AT_string (dw_attr_node *a)\n {\n   gcc_assert (a && AT_class (a) == dw_val_class_str);\n   return a->dw_attr_val.v.val_str->str;\n@@ -4134,7 +4124,7 @@ find_string_form (struct indirect_string_node *node)\n    output inline in DIE or out-of-line in .debug_str section.  */\n \n static enum dwarf_form\n-AT_string_form (dw_attr_ref a)\n+AT_string_form (dw_attr_node *a)\n {\n   gcc_assert (a && AT_class (a) == dw_val_class_str);\n   return find_string_form (a->dw_attr_val.v.val_str);\n@@ -4167,7 +4157,7 @@ add_AT_die_ref (dw_die_ref die, enum dwarf_attribute attr_kind, dw_die_ref targ_\n /* Change DIE reference REF to point to NEW_DIE instead.  */\n \n static inline void\n-change_AT_die_ref (dw_attr_ref ref, dw_die_ref new_die)\n+change_AT_die_ref (dw_attr_node *ref, dw_die_ref new_die)\n {\n   gcc_assert (ref->dw_attr_val.val_class == dw_val_class_die_ref);\n   ref->dw_attr_val.v.val_die_ref.die = new_die;\n@@ -4186,14 +4176,14 @@ add_AT_specification (dw_die_ref die, dw_die_ref targ_die)\n }\n \n static inline dw_die_ref\n-AT_ref (dw_attr_ref a)\n+AT_ref (dw_attr_node *a)\n {\n   gcc_assert (a && AT_class (a) == dw_val_class_die_ref);\n   return a->dw_attr_val.v.val_die_ref.die;\n }\n \n static inline int\n-AT_ref_external (dw_attr_ref a)\n+AT_ref_external (dw_attr_node *a)\n {\n   if (a && AT_class (a) == dw_val_class_die_ref)\n     return a->dw_attr_val.v.val_die_ref.external;\n@@ -4202,7 +4192,7 @@ AT_ref_external (dw_attr_ref a)\n }\n \n static inline void\n-set_AT_ref_external (dw_attr_ref a, int i)\n+set_AT_ref_external (dw_attr_node *a, int i)\n {\n   gcc_assert (a && AT_class (a) == dw_val_class_die_ref);\n   a->dw_attr_val.v.val_die_ref.external = i;\n@@ -4237,7 +4227,7 @@ add_AT_loc (dw_die_ref die, enum dwarf_attribute attr_kind, dw_loc_descr_ref loc\n }\n \n static inline dw_loc_descr_ref\n-AT_loc (dw_attr_ref a)\n+AT_loc (dw_attr_node *a)\n {\n   gcc_assert (a && AT_class (a) == dw_val_class_loc);\n   return a->dw_attr_val.v.val_loc;\n@@ -4257,14 +4247,14 @@ add_AT_loc_list (dw_die_ref die, enum dwarf_attribute attr_kind, dw_loc_list_ref\n }\n \n static inline dw_loc_list_ref\n-AT_loc_list (dw_attr_ref a)\n+AT_loc_list (dw_attr_node *a)\n {\n   gcc_assert (a && AT_class (a) == dw_val_class_loc_list);\n   return a->dw_attr_val.v.val_loc_list;\n }\n \n static inline dw_loc_list_ref *\n-AT_loc_list_ptr (dw_attr_ref a)\n+AT_loc_list_ptr (dw_attr_node *a)\n {\n   gcc_assert (a && AT_class (a) == dw_val_class_loc_list);\n   return &a->dw_attr_val.v.val_loc_list;\n@@ -4444,7 +4434,7 @@ add_AT_addr (dw_die_ref die, enum dwarf_attribute attr_kind, rtx addr,\n /* Get the RTX from to an address DIE attribute.  */\n \n static inline rtx\n-AT_addr (dw_attr_ref a)\n+AT_addr (dw_attr_node *a)\n {\n   gcc_assert (a && AT_class (a) == dw_val_class_addr);\n   return a->dw_attr_val.v.val_addr;\n@@ -4468,7 +4458,7 @@ add_AT_file (dw_die_ref die, enum dwarf_attribute attr_kind,\n /* Get the dwarf_file_data from a file DIE attribute.  */\n \n static inline struct dwarf_file_data *\n-AT_file (dw_attr_ref a)\n+AT_file (dw_attr_node *a)\n {\n   gcc_assert (a && AT_class (a) == dw_val_class_file);\n   return a->dw_attr_val.v.val_file;\n@@ -4586,7 +4576,7 @@ add_AT_range_list (dw_die_ref die, enum dwarf_attribute attr_kind,\n /* Return the start label of a delta attribute.  */\n \n static inline const char *\n-AT_vms_delta1 (dw_attr_ref a)\n+AT_vms_delta1 (dw_attr_node *a)\n {\n   gcc_assert (a && (AT_class (a) == dw_val_class_vms_delta));\n   return a->dw_attr_val.v.val_vms_delta.lbl1;\n@@ -4595,14 +4585,14 @@ AT_vms_delta1 (dw_attr_ref a)\n /* Return the end label of a delta attribute.  */\n \n static inline const char *\n-AT_vms_delta2 (dw_attr_ref a)\n+AT_vms_delta2 (dw_attr_node *a)\n {\n   gcc_assert (a && (AT_class (a) == dw_val_class_vms_delta));\n   return a->dw_attr_val.v.val_vms_delta.lbl2;\n }\n \n static inline const char *\n-AT_lbl (dw_attr_ref a)\n+AT_lbl (dw_attr_node *a)\n {\n   gcc_assert (a && (AT_class (a) == dw_val_class_lbl_id\n \t\t    || AT_class (a) == dw_val_class_lineptr\n@@ -4613,10 +4603,10 @@ AT_lbl (dw_attr_ref a)\n \n /* Get the attribute of type attr_kind.  */\n \n-static dw_attr_ref\n+static dw_attr_node *\n get_AT (dw_die_ref die, enum dwarf_attribute attr_kind)\n {\n-  dw_attr_ref a;\n+  dw_attr_node *a;\n   unsigned ix;\n   dw_die_ref spec = NULL;\n \n@@ -4660,7 +4650,7 @@ get_die_parent (dw_die_ref die)\n static inline const char *\n get_AT_low_pc (dw_die_ref die)\n {\n-  dw_attr_ref a = get_AT (die, DW_AT_low_pc);\n+  dw_attr_node *a = get_AT (die, DW_AT_low_pc);\n \n   return a ? AT_lbl (a) : NULL;\n }\n@@ -4672,7 +4662,7 @@ get_AT_low_pc (dw_die_ref die)\n static inline const char *\n get_AT_hi_pc (dw_die_ref die)\n {\n-  dw_attr_ref a = get_AT (die, DW_AT_high_pc);\n+  dw_attr_node *a = get_AT (die, DW_AT_high_pc);\n \n   return a ? AT_lbl (a) : NULL;\n }\n@@ -4683,7 +4673,7 @@ get_AT_hi_pc (dw_die_ref die)\n static inline const char *\n get_AT_string (dw_die_ref die, enum dwarf_attribute attr_kind)\n {\n-  dw_attr_ref a = get_AT (die, attr_kind);\n+  dw_attr_node *a = get_AT (die, attr_kind);\n \n   return a ? AT_string (a) : NULL;\n }\n@@ -4694,7 +4684,7 @@ get_AT_string (dw_die_ref die, enum dwarf_attribute attr_kind)\n static inline int\n get_AT_flag (dw_die_ref die, enum dwarf_attribute attr_kind)\n {\n-  dw_attr_ref a = get_AT (die, attr_kind);\n+  dw_attr_node *a = get_AT (die, attr_kind);\n \n   return a ? AT_flag (a) : 0;\n }\n@@ -4705,23 +4695,23 @@ get_AT_flag (dw_die_ref die, enum dwarf_attribute attr_kind)\n static inline unsigned\n get_AT_unsigned (dw_die_ref die, enum dwarf_attribute attr_kind)\n {\n-  dw_attr_ref a = get_AT (die, attr_kind);\n+  dw_attr_node *a = get_AT (die, attr_kind);\n \n   return a ? AT_unsigned (a) : 0;\n }\n \n static inline dw_die_ref\n get_AT_ref (dw_die_ref die, enum dwarf_attribute attr_kind)\n {\n-  dw_attr_ref a = get_AT (die, attr_kind);\n+  dw_attr_node *a = get_AT (die, attr_kind);\n \n   return a ? AT_ref (a) : NULL;\n }\n \n static inline struct dwarf_file_data *\n get_AT_file (dw_die_ref die, enum dwarf_attribute attr_kind)\n {\n-  dw_attr_ref a = get_AT (die, attr_kind);\n+  dw_attr_node *a = get_AT (die, attr_kind);\n \n   return a ? AT_file (a) : NULL;\n }\n@@ -4777,7 +4767,7 @@ is_ada (void)\n static bool\n remove_AT (dw_die_ref die, enum dwarf_attribute attr_kind)\n {\n-  dw_attr_ref a;\n+  dw_attr_node *a;\n   unsigned ix;\n \n   if (! die)\n@@ -5588,7 +5578,7 @@ print_dw_val (dw_val_node *val, bool recurse, FILE *outfile)\n /* Likewise, for a DIE attribute.  */\n \n static void\n-print_attribute (dw_attr_ref a, bool recurse, FILE *outfile)\n+print_attribute (dw_attr_node *a, bool recurse, FILE *outfile)\n {\n   print_dw_val (&a->dw_attr_val, recurse, outfile);\n }\n@@ -5635,7 +5625,7 @@ print_loc_descr (dw_loc_descr_ref loc, FILE *outfile)\n static void\n print_die (dw_die_ref die, FILE *outfile)\n {\n-  dw_attr_ref a;\n+  dw_attr_node *a;\n   dw_die_ref c;\n   unsigned ix;\n \n@@ -5724,7 +5714,7 @@ static void\n check_die (dw_die_ref die)\n {\n   unsigned ix;\n-  dw_attr_ref a;\n+  dw_attr_node *a;\n   bool inline_found = false;\n   int n_location = 0, n_low_pc = 0, n_high_pc = 0, n_artificial = 0;\n   int n_decl_line = 0, n_decl_file = 0;\n@@ -5830,7 +5820,7 @@ loc_checksum (dw_loc_descr_ref loc, struct md5_ctx *ctx)\n /* Calculate the checksum of an attribute.  */\n \n static void\n-attr_checksum (dw_attr_ref at, struct md5_ctx *ctx, int *mark)\n+attr_checksum (dw_attr_node *at, struct md5_ctx *ctx, int *mark)\n {\n   dw_loc_descr_ref loc;\n   rtx r;\n@@ -5916,7 +5906,7 @@ static void\n die_checksum (dw_die_ref die, struct md5_ctx *ctx, int *mark)\n {\n   dw_die_ref c;\n-  dw_attr_ref a;\n+  dw_attr_node *a;\n   unsigned ix;\n \n   /* To avoid infinite recursion.  */\n@@ -6050,7 +6040,7 @@ loc_checksum_ordered (dw_loc_descr_ref loc, struct md5_ctx *ctx)\n /* Calculate the checksum of an attribute.  */\n \n static void\n-attr_checksum_ordered (enum dwarf_tag tag, dw_attr_ref at,\n+attr_checksum_ordered (enum dwarf_tag tag, dw_attr_node *at,\n \t\t       struct md5_ctx *ctx, int *mark)\n {\n   dw_loc_descr_ref loc;\n@@ -6073,7 +6063,7 @@ attr_checksum_ordered (enum dwarf_tag tag, dw_attr_ref at,\n \t  || (at->dw_attr == DW_AT_friend\n \t      && tag == DW_TAG_friend))\n \t{\n-\t  dw_attr_ref name_attr = get_AT (target_die, DW_AT_name);\n+\t  dw_attr_node *name_attr = get_AT (target_die, DW_AT_name);\n \n \t  if (name_attr != NULL)\n \t    {\n@@ -6205,61 +6195,61 @@ attr_checksum_ordered (enum dwarf_tag tag, dw_attr_ref at,\n \n struct checksum_attributes\n {\n-  dw_attr_ref at_name;\n-  dw_attr_ref at_type;\n-  dw_attr_ref at_friend;\n-  dw_attr_ref at_accessibility;\n-  dw_attr_ref at_address_class;\n-  dw_attr_ref at_allocated;\n-  dw_attr_ref at_artificial;\n-  dw_attr_ref at_associated;\n-  dw_attr_ref at_binary_scale;\n-  dw_attr_ref at_bit_offset;\n-  dw_attr_ref at_bit_size;\n-  dw_attr_ref at_bit_stride;\n-  dw_attr_ref at_byte_size;\n-  dw_attr_ref at_byte_stride;\n-  dw_attr_ref at_const_value;\n-  dw_attr_ref at_containing_type;\n-  dw_attr_ref at_count;\n-  dw_attr_ref at_data_location;\n-  dw_attr_ref at_data_member_location;\n-  dw_attr_ref at_decimal_scale;\n-  dw_attr_ref at_decimal_sign;\n-  dw_attr_ref at_default_value;\n-  dw_attr_ref at_digit_count;\n-  dw_attr_ref at_discr;\n-  dw_attr_ref at_discr_list;\n-  dw_attr_ref at_discr_value;\n-  dw_attr_ref at_encoding;\n-  dw_attr_ref at_endianity;\n-  dw_attr_ref at_explicit;\n-  dw_attr_ref at_is_optional;\n-  dw_attr_ref at_location;\n-  dw_attr_ref at_lower_bound;\n-  dw_attr_ref at_mutable;\n-  dw_attr_ref at_ordering;\n-  dw_attr_ref at_picture_string;\n-  dw_attr_ref at_prototyped;\n-  dw_attr_ref at_small;\n-  dw_attr_ref at_segment;\n-  dw_attr_ref at_string_length;\n-  dw_attr_ref at_threads_scaled;\n-  dw_attr_ref at_upper_bound;\n-  dw_attr_ref at_use_location;\n-  dw_attr_ref at_use_UTF8;\n-  dw_attr_ref at_variable_parameter;\n-  dw_attr_ref at_virtuality;\n-  dw_attr_ref at_visibility;\n-  dw_attr_ref at_vtable_elem_location;\n+  dw_attr_node *at_name;\n+  dw_attr_node *at_type;\n+  dw_attr_node *at_friend;\n+  dw_attr_node *at_accessibility;\n+  dw_attr_node *at_address_class;\n+  dw_attr_node *at_allocated;\n+  dw_attr_node *at_artificial;\n+  dw_attr_node *at_associated;\n+  dw_attr_node *at_binary_scale;\n+  dw_attr_node *at_bit_offset;\n+  dw_attr_node *at_bit_size;\n+  dw_attr_node *at_bit_stride;\n+  dw_attr_node *at_byte_size;\n+  dw_attr_node *at_byte_stride;\n+  dw_attr_node *at_const_value;\n+  dw_attr_node *at_containing_type;\n+  dw_attr_node *at_count;\n+  dw_attr_node *at_data_location;\n+  dw_attr_node *at_data_member_location;\n+  dw_attr_node *at_decimal_scale;\n+  dw_attr_node *at_decimal_sign;\n+  dw_attr_node *at_default_value;\n+  dw_attr_node *at_digit_count;\n+  dw_attr_node *at_discr;\n+  dw_attr_node *at_discr_list;\n+  dw_attr_node *at_discr_value;\n+  dw_attr_node *at_encoding;\n+  dw_attr_node *at_endianity;\n+  dw_attr_node *at_explicit;\n+  dw_attr_node *at_is_optional;\n+  dw_attr_node *at_location;\n+  dw_attr_node *at_lower_bound;\n+  dw_attr_node *at_mutable;\n+  dw_attr_node *at_ordering;\n+  dw_attr_node *at_picture_string;\n+  dw_attr_node *at_prototyped;\n+  dw_attr_node *at_small;\n+  dw_attr_node *at_segment;\n+  dw_attr_node *at_string_length;\n+  dw_attr_node *at_threads_scaled;\n+  dw_attr_node *at_upper_bound;\n+  dw_attr_node *at_use_location;\n+  dw_attr_node *at_use_UTF8;\n+  dw_attr_node *at_variable_parameter;\n+  dw_attr_node *at_virtuality;\n+  dw_attr_node *at_visibility;\n+  dw_attr_node *at_vtable_elem_location;\n };\n \n /* Collect the attributes that we will want to use for the checksum.  */\n \n static void\n collect_checksum_attributes (struct checksum_attributes *attrs, dw_die_ref die)\n {\n-  dw_attr_ref a;\n+  dw_attr_node *a;\n   unsigned ix;\n \n   FOR_EACH_VEC_SAFE_ELT (die->die_attr, ix, a)\n@@ -6483,7 +6473,7 @@ die_checksum_ordered (dw_die_ref die, struct md5_ctx *ctx, int *mark)\n   /* Checksum the child DIEs.  */\n   c = die->die_child;\n   if (c) do {\n-    dw_attr_ref name_attr;\n+    dw_attr_node *name_attr;\n \n     c = c->die_sib;\n     name_attr = get_AT (c, DW_AT_name);\n@@ -6686,7 +6676,7 @@ same_dw_val_p (const dw_val_node *v1, const dw_val_node *v2, int *mark)\n /* Do the attributes look the same?  */\n \n static int\n-same_attr_p (dw_attr_ref at1, dw_attr_ref at2, int *mark)\n+same_attr_p (dw_attr_node *at1, dw_attr_node *at2, int *mark)\n {\n   if (at1->dw_attr != at2->dw_attr)\n     return 0;\n@@ -6705,7 +6695,7 @@ static int\n same_die_p (dw_die_ref die1, dw_die_ref die2, int *mark)\n {\n   dw_die_ref c1, c2;\n-  dw_attr_ref a1;\n+  dw_attr_node *a1;\n   unsigned ix;\n \n   /* To avoid infinite recursion.  */\n@@ -7145,7 +7135,7 @@ break_out_includes (dw_die_ref die)\n static int\n is_declaration_die (dw_die_ref die)\n {\n-  dw_attr_ref a;\n+  dw_attr_node *a;\n   unsigned ix;\n \n   FOR_EACH_VEC_SAFE_ELT (die->die_attr, ix, a)\n@@ -7228,7 +7218,7 @@ static dw_die_ref\n clone_die (dw_die_ref die)\n {\n   dw_die_ref clone;\n-  dw_attr_ref a;\n+  dw_attr_node *a;\n   unsigned ix;\n \n   clone = ggc_cleared_alloc<die_node> ();\n@@ -7260,7 +7250,7 @@ clone_as_declaration (dw_die_ref die)\n {\n   dw_die_ref clone;\n   dw_die_ref decl;\n-  dw_attr_ref a;\n+  dw_attr_node *a;\n   unsigned ix;\n \n   /* If the DIE is already a declaration, just clone it.  */\n@@ -7420,7 +7410,7 @@ copy_declaration_context (dw_die_ref unit, dw_die_ref die)\n     {\n       unsigned ix;\n       dw_die_ref c;\n-      dw_attr_ref a;\n+      dw_attr_node *a;\n \n       /* The original DIE will be changed to a declaration, and must\n          be moved to be a child of the original declaration DIE.  */\n@@ -7627,7 +7617,7 @@ break_out_comdat_types (dw_die_ref die)\n     if (should_move_die_to_comdat (c))\n       {\n         dw_die_ref replacement;\n-\tcomdat_type_node_ref type_node;\n+\tcomdat_type_node *type_node;\n \n         /* Break out nested types into their own type units.  */\n         break_out_comdat_types (c);\n@@ -7712,7 +7702,7 @@ static void\n copy_decls_walk (dw_die_ref unit, dw_die_ref die, decl_hash_type *decl_table)\n {\n   dw_die_ref c;\n-  dw_attr_ref a;\n+  dw_attr_node *a;\n   unsigned ix;\n \n   FOR_EACH_VEC_SAFE_ELT (die->die_attr, ix, a)\n@@ -7837,7 +7827,7 @@ static void\n output_location_lists (dw_die_ref die)\n {\n   dw_die_ref c;\n-  dw_attr_ref a;\n+  dw_attr_node *a;\n   unsigned ix;\n \n   FOR_EACH_VEC_SAFE_ELT (die->die_attr, ix, a)\n@@ -7887,7 +7877,7 @@ external_ref_hasher::hash (const external_ref *r)\n     {\n       /* We have a type signature; use a subset of the bits as the hash.\n \t The 8-byte signature is at least as large as hashval_t.  */\n-      comdat_type_node_ref type_node = die->die_id.die_type_node;\n+      comdat_type_node *type_node = die->die_id.die_type_node;\n       memcpy (&h, type_node->signature, sizeof (h));\n     }\n   return h;\n@@ -7929,7 +7919,7 @@ static void\n optimize_external_refs_1 (dw_die_ref die, external_ref_hash_type *map)\n {\n   dw_die_ref c;\n-  dw_attr_ref a;\n+  dw_attr_node *a;\n   unsigned ix;\n   struct external_ref *ref_p;\n \n@@ -8017,7 +8007,7 @@ build_abbrev_table (dw_die_ref die, external_ref_hash_type *extern_map)\n   unsigned long abbrev_id;\n   unsigned int n_alloc;\n   dw_die_ref c;\n-  dw_attr_ref a;\n+  dw_attr_node *a;\n   unsigned ix;\n \n   /* Scan the DIE references, and replace any that refer to\n@@ -8041,7 +8031,7 @@ build_abbrev_table (dw_die_ref die, external_ref_hash_type *extern_map)\n   for (abbrev_id = 1; abbrev_id < abbrev_die_table_in_use; ++abbrev_id)\n     {\n       dw_die_ref abbrev = abbrev_die_table[abbrev_id];\n-      dw_attr_ref die_a, abbrev_a;\n+      dw_attr_node *die_a, *abbrev_a;\n       unsigned ix;\n       bool ok = true;\n \n@@ -8113,7 +8103,7 @@ static unsigned long\n size_of_die (dw_die_ref die)\n {\n   unsigned long size = 0;\n-  dw_attr_ref a;\n+  dw_attr_node *a;\n   unsigned ix;\n   enum dwarf_form form;\n \n@@ -8352,7 +8342,7 @@ static void\n unmark_all_dies (dw_die_ref die)\n {\n   dw_die_ref c;\n-  dw_attr_ref a;\n+  dw_attr_node *a;\n   unsigned ix;\n \n   if (!die->die_mark)\n@@ -8406,7 +8396,7 @@ size_of_pubnames (vec<pubname_entry, va_gc> *names)\n {\n   unsigned long size;\n   unsigned i;\n-  pubname_ref p;\n+  pubname_entry *p;\n   int space_for_flags = (debug_generate_pub_sections == 2) ? 1 : 0;\n \n   size = DWARF_PUBNAMES_HEADER_SIZE;\n@@ -8456,7 +8446,7 @@ size_of_aranges (void)\n /* Select the encoding of an attribute value.  */\n \n static enum dwarf_form\n-value_format (dw_attr_ref a)\n+value_format (dw_attr_node *a)\n {\n   switch (AT_class (a))\n     {\n@@ -8647,7 +8637,7 @@ value_format (dw_attr_ref a)\n /* Output the encoding of an attribute value.  */\n \n static void\n-output_value_format (dw_attr_ref a)\n+output_value_format (dw_attr_node *a)\n {\n   enum dwarf_form form = value_format (a);\n \n@@ -8660,7 +8650,7 @@ static void\n output_die_abbrevs (unsigned long abbrev_id, dw_die_ref abbrev)\n {\n   unsigned ix;\n-  dw_attr_ref a_attr;\n+  dw_attr_node *a_attr;\n \n   dw2_asm_output_data_uleb128 (abbrev_id, \"(abbrev code)\");\n   dw2_asm_output_data_uleb128 (abbrev->die_tag, \"(TAG: %s)\",\n@@ -8835,7 +8825,7 @@ output_loc_list (dw_loc_list_ref list_head)\n    indirect reference.  */\n \n static void\n-output_range_list_offset (dw_attr_ref a)\n+output_range_list_offset (dw_attr_node *a)\n {\n   const char *name = dwarf_attr_name (a->dw_attr);\n \n@@ -8855,7 +8845,7 @@ output_range_list_offset (dw_attr_ref a)\n /* Output the offset into the debug_loc section.  */\n \n static void\n-output_loc_list_offset (dw_attr_ref a)\n+output_loc_list_offset (dw_attr_node *a)\n {\n   char *sym = AT_loc_list (a)->ll_symbol;\n \n@@ -8871,7 +8861,7 @@ output_loc_list_offset (dw_attr_ref a)\n /* Output an attribute's index or value appropriately.  */\n \n static void\n-output_attr_index_or_value (dw_attr_ref a)\n+output_attr_index_or_value (dw_attr_node *a)\n {\n   const char *name = dwarf_attr_name (a->dw_attr);\n \n@@ -8914,7 +8904,7 @@ output_signature (const char *sig, const char *name)\n static void\n output_die (dw_die_ref die)\n {\n-  dw_attr_ref a;\n+  dw_attr_node *a;\n   dw_die_ref c;\n   unsigned long size;\n   unsigned ix;\n@@ -9081,7 +9071,7 @@ output_die (dw_die_ref die)\n \t    {\n \t      if (AT_ref (a)->comdat_type_p)\n \t        {\n-\t          comdat_type_node_ref type_node =\n+\t\t  comdat_type_node *type_node =\n \t            AT_ref (a)->die_id.die_type_node;\n \n \t          gcc_assert (type_node);\n@@ -9642,7 +9632,7 @@ output_pubnames (vec<pubname_entry, va_gc> *names)\n {\n   unsigned i;\n   unsigned long pubnames_length = size_of_pubnames (names);\n-  pubname_ref pub;\n+  pubname_entry *pub;\n \n   if (DWARF_INITIAL_LENGTH_SIZE - DWARF_OFFSET_SIZE == 4)\n     dw2_asm_output_data (4, 0xffffffff,\n@@ -9679,7 +9669,7 @@ output_pubnames (vec<pubname_entry, va_gc> *names)\n \t     the skeleton DIE (if there is one).  */\n \t  if (pub->die->comdat_type_p && names == pubtype_table)\n \t    {\n-\t      comdat_type_node_ref type_node = pub->die->die_id.die_type_node;\n+\t      comdat_type_node *type_node = pub->die->die_id.die_type_node;\n \n \t      if (type_node != NULL)\n \t        die_offset = (type_node->skeleton_die != NULL\n@@ -9811,10 +9801,10 @@ add_ranges_num (int num)\n   if (in_use == ranges_table_allocated)\n     {\n       ranges_table_allocated += RANGES_TABLE_INCREMENT;\n-      ranges_table = GGC_RESIZEVEC (struct dw_ranges_struct, ranges_table,\n+      ranges_table = GGC_RESIZEVEC (dw_ranges, ranges_table,\n \t\t\t\t    ranges_table_allocated);\n       memset (ranges_table + ranges_table_in_use, 0,\n-\t      RANGES_TABLE_INCREMENT * sizeof (struct dw_ranges_struct));\n+\t      RANGES_TABLE_INCREMENT * sizeof (dw_ranges));\n     }\n \n   ranges_table[in_use].num = num;\n@@ -9847,12 +9837,10 @@ add_ranges_by_labels (dw_die_ref die, const char *begin, const char *end,\n   if (in_use == ranges_by_label_allocated)\n     {\n       ranges_by_label_allocated += RANGES_TABLE_INCREMENT;\n-      ranges_by_label = GGC_RESIZEVEC (struct dw_ranges_by_label_struct,\n-\t\t\t\t       ranges_by_label,\n+      ranges_by_label = GGC_RESIZEVEC (dw_ranges_by_label, ranges_by_label,\n \t\t\t\t       ranges_by_label_allocated);\n       memset (ranges_by_label + ranges_by_label_in_use, 0,\n-\t      RANGES_TABLE_INCREMENT\n-\t      * sizeof (struct dw_ranges_by_label_struct));\n+\t      RANGES_TABLE_INCREMENT * sizeof (dw_ranges_by_label));\n     }\n \n   ranges_by_label[in_use].begin = begin;\n@@ -19787,7 +19775,7 @@ add_high_low_attributes (tree stmt, dw_die_ref die)\n     {\n       tree chain, superblock = NULL_TREE;\n       dw_die_ref pdie;\n-      dw_attr_ref attr = NULL;\n+      dw_attr_node *attr = NULL;\n \n       if (inlined_function_outer_scope_p (stmt))\n \t{\n@@ -19805,7 +19793,7 @@ add_high_low_attributes (tree stmt, dw_die_ref die)\n \t   BLOCK_SAME_RANGE (chain);\n \t   chain = BLOCK_SUPERCONTEXT (chain))\n \t{\n-\t  dw_attr_ref new_attr;\n+\t  dw_attr_node *new_attr;\n \n \t  pdie = pdie->die_parent;\n \t  if (pdie == NULL)\n@@ -20057,8 +20045,6 @@ gen_ptr_to_mbr_type_die (tree type, dw_die_ref context_die)\n \t\t      context_die);\n }\n \n-typedef const char *dchar_p; /* For DEF_VEC_P.  */\n-\n static char *producer_string;\n \n /* Return a heap allocated producer string including command line options\n@@ -20068,7 +20054,7 @@ static char *\n gen_producer_string (void)\n {\n   size_t j;\n-  auto_vec<dchar_p> switches;\n+  auto_vec<const char *> switches;\n   const char *language_string = lang_hooks.name;\n   char *producer, *tail;\n   const char *p;\n@@ -22183,7 +22169,7 @@ static void\n dwarf2out_set_name (tree decl, tree name)\n {\n   dw_die_ref die;\n-  dw_attr_ref attr;\n+  dw_attr_node *attr;\n   const char *dname;\n \n   die = TYPE_SYMTAB_DIE (decl);\n@@ -22443,7 +22429,7 @@ new_line_info_table (void)\n {\n   dw_line_info_table *table;\n \n-  table = ggc_cleared_alloc<dw_line_info_table_struct> ();\n+  table = ggc_cleared_alloc<dw_line_info_table> ();\n   table->file_num = 1;\n   table->line_num = 1;\n   table->is_stmt = DWARF_LINE_DEFAULT_IS_STMT_START;\n@@ -23554,7 +23540,7 @@ prune_unmark_dies (dw_die_ref die)\n static void\n prune_unused_types_walk_attribs (dw_die_ref die)\n {\n-  dw_attr_ref a;\n+  dw_attr_node *a;\n   unsigned ix;\n \n   FOR_EACH_VEC_SAFE_ELT (die->die_attr, ix, a)\n@@ -23761,7 +23747,7 @@ prune_unused_types_walk (dw_die_ref die)\n static void\n prune_unused_types_update_strings (dw_die_ref die)\n {\n-  dw_attr_ref a;\n+  dw_attr_node *a;\n   unsigned ix;\n \n   FOR_EACH_VEC_SAFE_ELT (die->die_attr, ix, a)\n@@ -23829,7 +23815,7 @@ prune_unused_types (void)\n   unsigned int i;\n   limbo_die_node *node;\n   comdat_type_node *ctnode;\n-  pubname_ref pub;\n+  pubname_entry *pub;\n   dw_die_ref base_type;\n \n #if ENABLE_ASSERT_CHECKING\n@@ -24440,7 +24426,7 @@ static void\n resolve_addr (dw_die_ref die)\n {\n   dw_die_ref c;\n-  dw_attr_ref a;\n+  dw_attr_node *a;\n   dw_loc_list_ref *curr, *start, loc;\n   unsigned ix;\n \n@@ -25063,7 +25049,7 @@ static void\n optimize_location_lists_1 (dw_die_ref die, loc_list_hash_type *htab)\n {\n   dw_die_ref c;\n-  dw_attr_ref a;\n+  dw_attr_node *a;\n   unsigned ix;\n   dw_loc_list_struct **slot;\n \n@@ -25092,7 +25078,7 @@ static void\n index_location_lists (dw_die_ref die)\n {\n   dw_die_ref c;\n-  dw_attr_ref a;\n+  dw_attr_node *a;\n   unsigned ix;\n \n   FOR_EACH_VEC_SAFE_ELT (die->die_attr, ix, a)\n@@ -25202,7 +25188,7 @@ dwarf2out_finish (const char *filename)\n   /* PCH might result in DW_AT_producer string being restored from the\n      header compilation, so always fill it with empty string initially\n      and overwrite only here.  */\n-  dw_attr_ref producer = get_AT (comp_unit_die (), DW_AT_producer);\n+  dw_attr_node *producer = get_AT (comp_unit_die (), DW_AT_producer);\n   producer_string = gen_producer_string ();\n   producer->dw_attr_val.v.val_str->refcount--;\n   producer->dw_attr_val.v.val_str = find_AT_string (producer_string);"}]}