{"sha": "633e9920589ddfaf2d6da1c24ce99b18a2638db4", "node_id": "C_kwDOANBUbNoAKDYzM2U5OTIwNTg5ZGRmYWYyZDZkYTFjMjRjZTk5YjE4YTI2MzhkYjQ", "commit": {"author": {"name": "Sam Feifer", "email": "sfeifer@redhat.com", "date": "2022-07-21T20:31:41Z"}, "committer": {"name": "Sam Feifer", "email": "sfeifer@redhat.com", "date": "2022-07-21T21:24:06Z"}, "message": "match.pd: Add new abs pattern [PR94920]\n\nThis patch is intended to fix a missed optimization in match.pd. It optimizes (x >= 0 ? x : 0) + (x <= 0 ? -x : 0) to just abs(x). Additionally, the pattern (x <= 0 ? -x : 0) now gets optimized to max(-x, 0), which helps with the other simplification rule.\n\nTests are also included to be added to the testsuite.\n\nBootstrapped/regtested on x86_64-pc-linux-gnu, ok for trunk?\n\n\tPR tree-optimization/94920\n\ngcc/ChangeLog:\n\n\t* match.pd (x >= 0 ? x : 0) + (x <= 0 ? -x : 0): New simplification.\n\t           (x <= 0 ? -x : 0): New simplification.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/pr94920-1.C: New test.\n\t* g++.dg/pr94920.C: New test.\n\t* gcc.dg/pr94920-2.c: New test.", "tree": {"sha": "cc5b54b570daae95424bad5f4c2164020cb5052e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc5b54b570daae95424bad5f4c2164020cb5052e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/633e9920589ddfaf2d6da1c24ce99b18a2638db4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/633e9920589ddfaf2d6da1c24ce99b18a2638db4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/633e9920589ddfaf2d6da1c24ce99b18a2638db4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/633e9920589ddfaf2d6da1c24ce99b18a2638db4/comments", "author": {"login": "sfeifer", "id": 64805811, "node_id": "MDQ6VXNlcjY0ODA1ODEx", "avatar_url": "https://avatars.githubusercontent.com/u/64805811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfeifer", "html_url": "https://github.com/sfeifer", "followers_url": "https://api.github.com/users/sfeifer/followers", "following_url": "https://api.github.com/users/sfeifer/following{/other_user}", "gists_url": "https://api.github.com/users/sfeifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfeifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfeifer/subscriptions", "organizations_url": "https://api.github.com/users/sfeifer/orgs", "repos_url": "https://api.github.com/users/sfeifer/repos", "events_url": "https://api.github.com/users/sfeifer/events{/privacy}", "received_events_url": "https://api.github.com/users/sfeifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfeifer", "id": 64805811, "node_id": "MDQ6VXNlcjY0ODA1ODEx", "avatar_url": "https://avatars.githubusercontent.com/u/64805811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfeifer", "html_url": "https://github.com/sfeifer", "followers_url": "https://api.github.com/users/sfeifer/followers", "following_url": "https://api.github.com/users/sfeifer/following{/other_user}", "gists_url": "https://api.github.com/users/sfeifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfeifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfeifer/subscriptions", "organizations_url": "https://api.github.com/users/sfeifer/orgs", "repos_url": "https://api.github.com/users/sfeifer/repos", "events_url": "https://api.github.com/users/sfeifer/events{/privacy}", "received_events_url": "https://api.github.com/users/sfeifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28be481cf47d52af8b11972d2394226bbaf87867", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28be481cf47d52af8b11972d2394226bbaf87867", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28be481cf47d52af8b11972d2394226bbaf87867"}], "stats": {"total": 105, "additions": 105, "deletions": 0}, "files": [{"sha": "9736393061aac61d4d53aaad6cf6b2c97a7d4679", "filename": "gcc/match.pd", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/633e9920589ddfaf2d6da1c24ce99b18a2638db4/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/633e9920589ddfaf2d6da1c24ce99b18a2638db4/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=633e9920589ddfaf2d6da1c24ce99b18a2638db4", "patch": "@@ -339,6 +339,11 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (if (REAL_VALUE_NEGATIVE (TREE_REAL_CST (@0)))\n   (COPYSIGN_ALL (negate @0) @1)))\n \n+/* (x >= 0 ? x : 0) + (x <= 0 ? -x : 0) -> abs x.  */\n+(simplify\n+  (plus:c (max @0 integer_zerop) (max (negate @0) integer_zerop))\n+  (abs @0))\n+\n /* X * 1, X / 1 -> X.  */\n (for op (mult trunc_div ceil_div floor_div round_div exact_div)\n   (simplify\n@@ -3425,6 +3430,11 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n       && (GIMPLE || !TREE_SIDE_EFFECTS (@1)))\n   (cond (convert:boolean_type_node @2) @1 @0)))\n \n+/* (x <= 0 ? -x : 0) -> max(-x, 0).  */\n+(simplify\n+  (cond (le @0 integer_zerop@1) (negate@2 @0) integer_zerop@1)\n+  (max @2 @1))\n+\n /* Simplifications of shift and rotates.  */\n \n (for rotate (lrotate rrotate)"}, {"sha": "6c6483eab2d3b981e7f4c31f413bc7f78624b060", "filename": "gcc/testsuite/g++.dg/pr94920-1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/633e9920589ddfaf2d6da1c24ce99b18a2638db4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94920-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/633e9920589ddfaf2d6da1c24ce99b18a2638db4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94920-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94920-1.C?ref=633e9920589ddfaf2d6da1c24ce99b18a2638db4", "patch": "@@ -0,0 +1,17 @@\n+/* PR tree-optimization/94920 */\n+/* { dg-do run } */\n+\n+#include \"pr94920.C\"\n+\n+int main() {\n+\n+    if (foo(0) != 0\n+        || foo(-42) != 42\n+        || foo(42) != 42\n+        || baz(-10) != 10\n+        || baz(-10) != 10) {\n+            __builtin_abort();\n+        }\n+    \n+    return 0;\n+}"}, {"sha": "925ec4f42f17e6bc809f44aa427b5d1af41f3e95", "filename": "gcc/testsuite/g++.dg/pr94920.C", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/633e9920589ddfaf2d6da1c24ce99b18a2638db4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94920.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/633e9920589ddfaf2d6da1c24ce99b18a2638db4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94920.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94920.C?ref=633e9920589ddfaf2d6da1c24ce99b18a2638db4", "patch": "@@ -0,0 +1,63 @@\n+/* PR tree-optimization/94920 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+typedef int __attribute__((vector_size(4*sizeof(int)))) vint;\n+\n+/* Same form as PR.  */\n+__attribute__((noipa)) unsigned int foo(int x) {\n+    return (x >= 0 ? x : 0) + (x <= 0 ? -x : 0);\n+}\n+\n+/* Test for forward propogation.  */\n+__attribute__((noipa)) unsigned int corge(int x) {\n+    int w = (x >= 0 ? x : 0);\n+    int y = -x;\n+    int z = (y >= 0 ? y : 0);\n+    return w + z;\n+}\n+\n+/* Vector case.  */\n+__attribute__((noipa)) vint thud(vint x) {\n+    vint t = (x >= 0 ? x : 0) ;\n+    vint xx = -x;\n+    vint t1 =  (xx >= 0 ? xx : 0);\n+    return t + t1;\n+}\n+\n+/* Signed function.  */\n+__attribute__((noipa)) int bar(int x) {\n+    return (x >= 0 ? x : 0) + (x <= 0 ? -x : 0);\n+}\n+\n+/* Commutative property.  */\n+__attribute__((noipa)) unsigned int baz(int x) {\n+    return (x <= 0 ? -x : 0) + (x >= 0 ? x : 0);\n+}\n+\n+/* Flipped order for max expressions.  */\n+__attribute__((noipa)) unsigned int quux(int x) {\n+    return (0 <= x ? x : 0) + (0 >= x ? -x : 0);\n+}\n+\n+/* Not zero so should not optimize.  */\n+__attribute__((noipa)) unsigned int waldo(int x) {\n+    return (x >= 4 ? x : 4) + (x <= 4 ? -x : 4);\n+}\n+\n+/* Not zero so should not optimize.  */\n+__attribute__((noipa)) unsigned int fred(int x) {\n+    return (x >= -4 ? x : -4) + (x <= -4 ? -x : -4);\n+}\n+\n+/* Incorrect pattern.  */\n+__attribute__((noipa)) unsigned int goo(int x) {\n+    return (x <= 0 ? x : 0) + (x >= 0 ? -x : 0);\n+}\n+\n+/* Incorrect pattern.  */\n+__attribute__((noipa)) int qux(int x) {\n+    return (x >= 0 ? x : 0) + (x >= 0 ? x : 0);\n+}\n+\n+/* { dg-final {scan-tree-dump-times \" ABS_EXPR \" 6 \"optimized\" } } */"}, {"sha": "a2d23324cfac101dcd8f8de6d6012cd9ac10062a", "filename": "gcc/testsuite/gcc.dg/pr94920-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/633e9920589ddfaf2d6da1c24ce99b18a2638db4/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94920-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/633e9920589ddfaf2d6da1c24ce99b18a2638db4/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94920-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94920-2.c?ref=633e9920589ddfaf2d6da1c24ce99b18a2638db4", "patch": "@@ -0,0 +1,15 @@\n+/* PR tree-optimization/94920 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+/* Form from PR.  */\n+__attribute__((noipa)) unsigned int foo(int x) {\n+    return x <= 0 ? -x : 0;\n+}\n+\n+/* Changed order.  */\n+__attribute__((noipa)) unsigned int bar(int x) {\n+    return 0 >= x ? -x : 0;\n+}\n+\n+/* { dg-final {scan-tree-dump-times \" MAX_EXPR \" 2 \"optimized\" } } */"}]}