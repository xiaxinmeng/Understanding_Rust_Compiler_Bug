{"sha": "3ce20b6be543824a07c3367253188d754b58667e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NlMjBiNmJlNTQzODI0YTA3YzMzNjcyNTMxODhkNzU0YjU4NjY3ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-16T11:26:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-19T07:15:18Z"}, "message": "Remove last gimple_expr_type uses\n\nThis removes the last uses of gimple_expr_type.\n\n2021-07-16  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (vn_reference_eq): Handle NULL vr->type.\n\t(ao_ref_init_from_vn_reference): Likewise.\n\t(fully_constant_reference): Likewise.\n\t(vn_reference_lookup_call): Do not set vr->type to random\n\tvalues.\n\t* tree-ssa-pre.c (compute_avail): Do not try to PRE calls\n\twithout a value.\n\t* tree-vect-generic.c (expand_vector_piecewise): Pass in\n\twhether we expanded parallel.\n\t(expand_vector_parallel): Adjust.\n\t(expand_vector_addition): Likewise.\n\t(expand_vector_comparison): Likewise.\n\t(expand_vector_operation): Likewise.\n\t(expand_vector_scalar_condition): Likewise.\n\t(expand_vector_conversion): Likewise.", "tree": {"sha": "62caf65c46628be85e43d4a5eb401ecd21c02459", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62caf65c46628be85e43d4a5eb401ecd21c02459"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ce20b6be543824a07c3367253188d754b58667e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ce20b6be543824a07c3367253188d754b58667e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ce20b6be543824a07c3367253188d754b58667e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ce20b6be543824a07c3367253188d754b58667e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a21a8c34a707e88f450375e3c7d593be75162f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a21a8c34a707e88f450375e3c7d593be75162f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a21a8c34a707e88f450375e3c7d593be75162f4"}], "stats": {"total": 56, "additions": 34, "deletions": 22}, "files": [{"sha": "d2a7395dd8f5f26a96b446892b9196bee8652fe3", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ce20b6be543824a07c3367253188d754b58667e/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ce20b6be543824a07c3367253188d754b58667e/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=3ce20b6be543824a07c3367253188d754b58667e", "patch": "@@ -4023,7 +4023,8 @@ compute_avail (function *fun)\n \t\t  continue;\n \n \t\tvn_reference_lookup_call (as_a <gcall *> (stmt), &ref, &ref1);\n-\t\tif (!ref)\n+\t\t/* There is no point to PRE a call without a value.  */\n+\t\tif (!ref || !ref->result)\n \t\t  continue;\n \n \t\t/* If the value of the call is not invalidated in"}, {"sha": "a174c316c62ee2bec3671f0f97ca0d867a604fd1", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ce20b6be543824a07c3367253188d754b58667e/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ce20b6be543824a07c3367253188d754b58667e/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=3ce20b6be543824a07c3367253188d754b58667e", "patch": "@@ -764,14 +764,18 @@ vn_reference_eq (const_vn_reference_t const vr1, const_vn_reference_t const vr2)\n   if (vr1->operands == vr2->operands)\n     return true;\n \n-  if (COMPLETE_TYPE_P (vr1->type) != COMPLETE_TYPE_P (vr2->type)\n-      || (COMPLETE_TYPE_P (vr1->type)\n-\t  && !expressions_equal_p (TYPE_SIZE (vr1->type),\n-\t\t\t\t   TYPE_SIZE (vr2->type))))\n+  if (!vr1->type || !vr2->type)\n+    {\n+      if (vr1->type != vr2->type)\n+\treturn false;\n+    }\n+  else if (COMPLETE_TYPE_P (vr1->type) != COMPLETE_TYPE_P (vr2->type)\n+\t   || (COMPLETE_TYPE_P (vr1->type)\n+\t       && !expressions_equal_p (TYPE_SIZE (vr1->type),\n+\t\t\t\t\tTYPE_SIZE (vr2->type))))\n     return false;\n-\n-  if (INTEGRAL_TYPE_P (vr1->type)\n-      && INTEGRAL_TYPE_P (vr2->type))\n+  else if (INTEGRAL_TYPE_P (vr1->type)\n+\t   && INTEGRAL_TYPE_P (vr2->type))\n     {\n       if (TYPE_PRECISION (vr1->type) != TYPE_PRECISION (vr2->type))\n \treturn false;\n@@ -1049,6 +1053,10 @@ ao_ref_init_from_vn_reference (ao_ref *ref,\n   poly_offset_int size = -1;\n   tree size_tree = NULL_TREE;\n \n+  /* We don't handle calls.  */\n+  if (!type)\n+    return false;\n+\n   machine_mode mode = TYPE_MODE (type);\n   if (mode == BLKmode)\n     size_tree = TYPE_SIZE (type);\n@@ -1478,6 +1486,7 @@ fully_constant_vn_reference_p (vn_reference_t ref)\n \n   /* Simplify reads from constants or constant initializers.  */\n   else if (BITS_PER_UNIT == 8\n+\t   && ref->type\n \t   && COMPLETE_TYPE_P (ref->type)\n \t   && is_gimple_reg_type (ref->type))\n     {\n@@ -3671,7 +3680,10 @@ vn_reference_lookup_call (gcall *call, vn_reference_t *vnresult,\n \n   vr->vuse = vuse ? SSA_VAL (vuse) : NULL_TREE;\n   vr->operands = valueize_shared_reference_ops_from_call (call);\n-  vr->type = gimple_expr_type (call);\n+  tree lhs = gimple_call_lhs (call);\n+  /* For non-SSA return values the referece ops contain the LHS.  */\n+  vr->type = ((lhs && TREE_CODE (lhs) == SSA_NAME)\n+\t      ? TREE_TYPE (lhs) : NULL_TREE);\n   vr->punned = false;\n   vr->set = 0;\n   vr->base_set = 0;"}, {"sha": "2e00b3ed3ca258f050bd9bee60a6515677036487", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ce20b6be543824a07c3367253188d754b58667e/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ce20b6be543824a07c3367253188d754b58667e/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=3ce20b6be543824a07c3367253188d754b58667e", "patch": "@@ -307,7 +307,7 @@ static tree\n expand_vector_piecewise (gimple_stmt_iterator *gsi, elem_op_func f,\n \t\t\t tree type, tree inner_type,\n \t\t\t tree a, tree b, enum tree_code code,\n-\t\t\t tree ret_type = NULL_TREE)\n+\t\t\t bool parallel_p, tree ret_type = NULL_TREE)\n {\n   vec<constructor_elt, va_gc> *v;\n   tree part_width = TYPE_SIZE (inner_type);\n@@ -317,8 +317,7 @@ expand_vector_piecewise (gimple_stmt_iterator *gsi, elem_op_func f,\n   int i;\n   location_t loc = gimple_location (gsi_stmt (*gsi));\n \n-  if (ret_type\n-      || types_compatible_p (gimple_expr_type (gsi_stmt (*gsi)), type))\n+  if (ret_type || !parallel_p)\n     warning_at (loc, OPT_Wvector_operation_performance,\n \t\t\"vector operation will be expanded piecewise\");\n   else\n@@ -364,13 +363,13 @@ expand_vector_parallel (gimple_stmt_iterator *gsi, elem_op_func f, tree type,\n   if (TYPE_MODE (TREE_TYPE (type)) == word_mode)\n      return expand_vector_piecewise (gsi, f,\n \t\t\t\t     type, TREE_TYPE (type),\n-\t\t\t\t     a, b, code);\n+\t\t\t\t     a, b, code, true);\n   else if (n_words > 1)\n     {\n       tree word_type = build_word_mode_vector_type (n_words);\n       result = expand_vector_piecewise (gsi, f,\n \t\t\t\t        word_type, TREE_TYPE (word_type),\n-\t\t\t\t\ta, b, code);\n+\t\t\t\t\ta, b, code, true);\n       result = force_gimple_operand_gsi (gsi, result, true, NULL, true,\n                                          GSI_SAME_STMT);\n     }\n@@ -410,7 +409,7 @@ expand_vector_addition (gimple_stmt_iterator *gsi,\n   else\n     return expand_vector_piecewise (gsi, f,\n \t\t\t\t    type, TREE_TYPE (type),\n-\t\t\t\t    a, b, code);\n+\t\t\t\t    a, b, code, false);\n }\n \n static bool\n@@ -501,7 +500,7 @@ expand_vector_comparison (gimple_stmt_iterator *gsi, tree type, tree op0,\n       else\n \tt = expand_vector_piecewise (gsi, do_compare, type,\n \t\t\t\t     TREE_TYPE (TREE_TYPE (op0)), op0, op1,\n-\t\t\t\t     code);\n+\t\t\t\t     code, false);\n     }\n   else\n     t = NULL_TREE;\n@@ -1248,11 +1247,11 @@ expand_vector_operation (gimple_stmt_iterator *gsi, tree type, tree compute_type\n   if (TREE_CODE_CLASS (code) == tcc_unary)\n     return expand_vector_piecewise (gsi, do_unop, type, compute_type,\n \t\t\t\t    gimple_assign_rhs1 (assign),\n-\t\t\t\t    NULL_TREE, code);\n+\t\t\t\t    NULL_TREE, code, false);\n   else\n     return expand_vector_piecewise (gsi, do_binop, type, compute_type,\n \t\t\t\t    gimple_assign_rhs1 (assign),\n-\t\t\t\t    gimple_assign_rhs2 (assign), code);\n+\t\t\t\t    gimple_assign_rhs2 (assign), code, false);\n }\n \n /* Try to optimize\n@@ -1762,7 +1761,7 @@ expand_vector_scalar_condition (gimple_stmt_iterator *gsi)\n \t\t\t\t      COND_EXPR);\n   else\n     new_rhs = expand_vector_piecewise (gsi, do_cond, type, compute_type,\n-\t\t\t\t       rhs2, rhs3, COND_EXPR);\n+\t\t\t\t       rhs2, rhs3, COND_EXPR, false);\n   if (!useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (new_rhs)))\n     new_rhs = gimplify_build1 (gsi, VIEW_CONVERT_EXPR, TREE_TYPE (lhs),\n \t\t\t       new_rhs);\n@@ -1885,7 +1884,7 @@ expand_vector_conversion (gimple_stmt_iterator *gsi)\n \t\t{\n \t\t  new_rhs = expand_vector_piecewise (gsi, do_vec_conversion,\n \t\t\t\t\t\t     ret_type, arg1_type, arg,\n-\t\t\t\t\t\t     NULL_TREE, code1);\n+\t\t\t\t\t\t     NULL_TREE, code1, false);\n \t\t  g = gimple_build_assign (lhs, new_rhs);\n \t\t  gsi_replace (gsi, g, false);\n \t\t  return;\n@@ -1953,7 +1952,7 @@ expand_vector_conversion (gimple_stmt_iterator *gsi)\n \t\t\t\t\t\t   do_vec_narrow_conversion,\n \t\t\t\t\t\t   arg_type, dcompute_type,\n \t\t\t\t\t\t   arg, NULL_TREE, code1,\n-\t\t\t\t\t\t   ret_type);\n+\t\t\t\t\t\t   false, ret_type);\n \t      g = gimple_build_assign (lhs, new_rhs);\n \t      gsi_replace (gsi, g, false);\n \t      return;\n@@ -2065,7 +2064,7 @@ expand_vector_conversion (gimple_stmt_iterator *gsi)\n \n   new_rhs = expand_vector_piecewise (gsi, do_vec_conversion, arg_type,\n \t\t\t\t     TREE_TYPE (arg_type), arg,\n-\t\t\t\t     NULL_TREE, code, ret_type);\n+\t\t\t\t     NULL_TREE, code, false, ret_type);\n   g = gimple_build_assign (lhs, new_rhs);\n   gsi_replace (gsi, g, false);\n }"}]}