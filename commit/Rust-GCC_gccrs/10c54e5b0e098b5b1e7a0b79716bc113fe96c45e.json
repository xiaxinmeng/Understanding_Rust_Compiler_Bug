{"sha": "10c54e5b0e098b5b1e7a0b79716bc113fe96c45e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBjNTRlNWIwZTA5OGI1YjFlN2EwYjc5NzE2YmMxMTNmZTk2YzQ1ZQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-05-14T16:29:13Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-05-14T16:29:13Z"}, "message": "[AArch64] Add combine pattern to fuse AESE/AESMC instructions\n\nWhen the AESE,AESD and AESMC, AESMC instructions are generated through the appropriate arm_neon.h intrinsics\nwe really want to keep them together when the AESE feeds into an AESMC and fusion is supported by the target CPU.\nWe have macro-fusion hooks and scheduling model forwarding paths defined to facilitate that.\nIt is, however, not always enough.\n\nThis patch adds another mechanism for doing that.\nWhen we can detect during combine that the required dependency is exists (AESE -> AESMC, AESD -> AESIMC)\njust keep them together with a combine pattern throughout the rest of compilation.\nWe won't ever want to split them.\n\nThe testcases generate 4 AESE(D) instructions in a block followed by 4 AES(I)MC instructions that\nconsume the corresponding results and it also adds a bunch of computations in-between so that the\nAESE and AESMC instructions are not trivially back-to-back, thus exercising the compiler's ability\nto bring them together.\n\nWith this patch all 4 pairs are fused whereas before a couple of fusions would be missed due to intervening\narithmetic and memory instructions.\n\n\t* config/aarch64/aarch64-simd.md (*aarch64_crypto_aese_fused):\n\tNew pattern.\n\t(aarch64_crypto_aesd_fused): Likewise.\n\n\t* gcc.target/aarch64/crypto-fuse-1.c: New test.\n\t* gcc.target/aarch64/crypto-fuse-2.c: Likewise.\n\nFrom-SVN: r260234", "tree": {"sha": "eca5aa957a2478f1838484727fc83df4398d9efb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eca5aa957a2478f1838484727fc83df4398d9efb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10c54e5b0e098b5b1e7a0b79716bc113fe96c45e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10c54e5b0e098b5b1e7a0b79716bc113fe96c45e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10c54e5b0e098b5b1e7a0b79716bc113fe96c45e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10c54e5b0e098b5b1e7a0b79716bc113fe96c45e/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "43d0a8ee88460a1161264c0c1a68e063493c3f20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43d0a8ee88460a1161264c0c1a68e063493c3f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43d0a8ee88460a1161264c0c1a68e063493c3f20"}], "stats": {"total": 139, "additions": 139, "deletions": 0}, "files": [{"sha": "0ad13682cfd639ce67e857e0f5ab706cb8901c55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10c54e5b0e098b5b1e7a0b79716bc113fe96c45e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10c54e5b0e098b5b1e7a0b79716bc113fe96c45e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10c54e5b0e098b5b1e7a0b79716bc113fe96c45e", "patch": "@@ -1,3 +1,9 @@\n+2018-05-14  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (*aarch64_crypto_aese_fused):\n+\tNew pattern.\n+\t(aarch64_crypto_aesd_fused): Likewise.\n+\n 2018-05-14  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/aarch64/aarch64.md (mov<mode>): Remove '*' in alternatives."}, {"sha": "9cfd4d30515a0162e071d4a934ef547e9beed8b6", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10c54e5b0e098b5b1e7a0b79716bc113fe96c45e/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10c54e5b0e098b5b1e7a0b79716bc113fe96c45e/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=10c54e5b0e098b5b1e7a0b79716bc113fe96c45e", "patch": "@@ -5821,6 +5821,44 @@\n       (const_string \"yes\")])]\n )\n \n+;; When AESE/AESMC fusion is enabled we really want to keep the two together\n+;; and enforce the register dependency without scheduling or register\n+;; allocation messing up the order or introducing moves inbetween.\n+;;  Mash the two together during combine.\n+\n+(define_insn \"*aarch64_crypto_aese_fused\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=&w\")\n+\t(unspec:V16QI\n+\t  [(unspec:V16QI\n+\t    [(match_operand:V16QI 1 \"register_operand\" \"0\")\n+\t     (match_operand:V16QI 2 \"register_operand\" \"w\")] UNSPEC_AESE)\n+\t  ] UNSPEC_AESMC))]\n+  \"TARGET_SIMD && TARGET_AES\n+   && aarch64_fusion_enabled_p (AARCH64_FUSE_AES_AESMC)\"\n+  \"aese\\\\t%0.16b, %2.16b\\;aesmc\\\\t%0.16b, %0.16b\"\n+  [(set_attr \"type\" \"crypto_aese\")\n+   (set_attr \"length\" \"8\")]\n+)\n+\n+;; When AESD/AESIMC fusion is enabled we really want to keep the two together\n+;; and enforce the register dependency without scheduling or register\n+;; allocation messing up the order or introducing moves inbetween.\n+;;  Mash the two together during combine.\n+\n+(define_insn \"*aarch64_crypto_aesd_fused\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=&w\")\n+\t(unspec:V16QI\n+\t  [(unspec:V16QI\n+\t    [(match_operand:V16QI 1 \"register_operand\" \"0\")\n+\t     (match_operand:V16QI 2 \"register_operand\" \"w\")] UNSPEC_AESD)\n+\t  ] UNSPEC_AESIMC))]\n+  \"TARGET_SIMD && TARGET_AES\n+   && aarch64_fusion_enabled_p (AARCH64_FUSE_AES_AESMC)\"\n+  \"aesd\\\\t%0.16b, %2.16b\\;aesimc\\\\t%0.16b, %0.16b\"\n+  [(set_attr \"type\" \"crypto_aese\")\n+   (set_attr \"length\" \"8\")]\n+)\n+\n ;; sha1\n \n (define_insn \"aarch64_crypto_sha1hsi\""}, {"sha": "09d97e0364c03f241f7c7efc0749052eee5d0796", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10c54e5b0e098b5b1e7a0b79716bc113fe96c45e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10c54e5b0e098b5b1e7a0b79716bc113fe96c45e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=10c54e5b0e098b5b1e7a0b79716bc113fe96c45e", "patch": "@@ -1,3 +1,8 @@\n+2018-05-14  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/crypto-fuse-1.c: New test.\n+\t* gcc.target/aarch64/crypto-fuse-2.c: Likewise.\n+\n 2018-05-14  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* gcc.target/aarch64/vmov_n_1.c: Update test."}, {"sha": "d8adc89466c3273164446523be5e48a7b7740636", "filename": "gcc/testsuite/gcc.target/aarch64/crypto-fuse-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10c54e5b0e098b5b1e7a0b79716bc113fe96c45e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcrypto-fuse-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10c54e5b0e098b5b1e7a0b79716bc113fe96c45e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcrypto-fuse-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcrypto-fuse-1.c?ref=10c54e5b0e098b5b1e7a0b79716bc113fe96c45e", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mcpu=cortex-a72+crypto -dp\" } */\n+\n+#include <arm_neon.h>\n+\n+#define AESE(r, v, key) (r = vaeseq_u8 ((v), (key)));\n+#define AESMC(r, i) (r = vaesmcq_u8 (i))\n+\n+uint8x16_t dummy;\n+uint8x16_t a;\n+uint8x16_t b;\n+uint8x16_t c;\n+uint8x16_t d;\n+uint8x16_t e;\n+\n+void\n+foo (void)\n+{\n+  AESE (a, a, e);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  AESE (b, b, e);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  AESE (c, c, e);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  AESE (d, d, e);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+\n+  AESMC (a, a);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  AESMC (b, b);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  AESMC (c, c);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  AESMC (d, d);\n+}\n+\n+/* { dg-final { scan-assembler-times \"crypto_aese_fused\" 4 } } */\n+"}, {"sha": "b12df2d3ee4e042790fce25ae6c0fcb810b57641", "filename": "gcc/testsuite/gcc.target/aarch64/crypto-fuse-2.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10c54e5b0e098b5b1e7a0b79716bc113fe96c45e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcrypto-fuse-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10c54e5b0e098b5b1e7a0b79716bc113fe96c45e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcrypto-fuse-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcrypto-fuse-2.c?ref=10c54e5b0e098b5b1e7a0b79716bc113fe96c45e", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mcpu=cortex-a72+crypto -dp\" } */\n+\n+#include <arm_neon.h>\n+\n+#define AESE(r, v, key) (r = vaesdq_u8 ((v), (key)));\n+#define AESMC(r, i) (r = vaesimcq_u8 (i))\n+\n+uint8x16_t dummy;\n+uint8x16_t a;\n+uint8x16_t b;\n+uint8x16_t c;\n+uint8x16_t d;\n+uint8x16_t e;\n+\n+void\n+foo (void)\n+{\n+  AESE (a, a, e);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  AESE (b, b, e);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  AESE (c, c, e);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  AESE (d, d, e);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+\n+  AESMC (a, a);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  AESMC (b, b);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  AESMC (c, c);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  AESMC (d, d);\n+}\n+\n+/* { dg-final { scan-assembler-times \"crypto_aesd_fused\" 4 } } */\n+"}]}