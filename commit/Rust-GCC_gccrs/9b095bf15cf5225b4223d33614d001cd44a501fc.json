{"sha": "9b095bf15cf5225b4223d33614d001cd44a501fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIwOTViZjE1Y2Y1MjI1YjQyMjNkMzM2MTRkMDAxY2Q0NGE1MDFmYw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-05-17T11:50:37Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-05-17T11:50:37Z"}, "message": "c.opt (--pedantic-errors,-pedantic-errors): Do not handle here.\n\n2012-05-17  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\nc-family/\n\t* c.opt (--pedantic-errors,-pedantic-errors): Do not handle here.\n\t* c-opts.c (c_common_handle_option): Do not handle explicitly\n\tWreturn-type, Wwrite-strings, warn_ecpp, and -pedantic-errors.\ngcc/\n\t* opts.c (common_handle_option): -pedantic-errors enables -Wpedantic.\n\t(enable_warning_as_error): Do not special case Wuninitialized.\n\t* optc-gen.awk: Add sanity checks.\n\nFrom-SVN: r187628", "tree": {"sha": "9b9ef6fa3edd4dba37b6733c714b6a1103bd602c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b9ef6fa3edd4dba37b6733c714b6a1103bd602c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b095bf15cf5225b4223d33614d001cd44a501fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b095bf15cf5225b4223d33614d001cd44a501fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b095bf15cf5225b4223d33614d001cd44a501fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b095bf15cf5225b4223d33614d001cd44a501fc/comments", "author": null, "committer": null, "parents": [{"sha": "f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee"}], "stats": {"total": 63, "additions": 33, "deletions": 30}, "files": [{"sha": "425ebfd5fca2aba7fbc363f4769634f3abe548cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b095bf15cf5225b4223d33614d001cd44a501fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b095bf15cf5225b4223d33614d001cd44a501fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b095bf15cf5225b4223d33614d001cd44a501fc", "patch": "@@ -1,3 +1,9 @@\n+2012-05-17  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* opts.c (common_handle_option): -pedantic-errors enables -Wpedantic.\n+\t(enable_warning_as_error): Do not special case Wuninitialized.\n+\t* optc-gen.awk: Add sanity checks.\n+\n 2012-05-17  Jan Hubicka   <jh@suse.cz>\n \n \t* ipa-reference.c (is_proper_for_analysis): Do not check flags"}, {"sha": "1a84751f3c7454edf8e4915195bbb6b6bb7adfcf", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b095bf15cf5225b4223d33614d001cd44a501fc/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b095bf15cf5225b4223d33614d001cd44a501fc/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9b095bf15cf5225b4223d33614d001cd44a501fc", "patch": "@@ -1,3 +1,9 @@\n+2012-05-17  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* c.opt (--pedantic-errors,-pedantic-errors): Do not handle here.\n+\t* c-opts.c (c_common_handle_option): Do not handle explicitly\n+\tWreturn-type, Wwrite-strings, warn_ecpp, and -pedantic-errors.\n+\n 2012-05-16  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR preprocessor/7263"}, {"sha": "c493c1096f3b3895a3c5c6236219e8bc36d2d879", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b095bf15cf5225b4223d33614d001cd44a501fc/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b095bf15cf5225b4223d33614d001cd44a501fc/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=9b095bf15cf5225b4223d33614d001cd44a501fc", "patch": "@@ -510,10 +510,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \t  break;\n \t}\n \n-    case OPT_Wreturn_type:\n-      warn_return_type = value;\n-      break;\n-\n     case OPT_Wtraditional:\n       cpp_opts->cpp_warn_traditional = value;\n       break;\n@@ -540,12 +536,7 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       warn_variadic_macros = value;\n       break;\n \n-    case OPT_Wwrite_strings:\n-      warn_write_strings = value;\n-      break;\n-\n     case OPT_Weffc__:\n-      warn_ecpp = value;\n       if (value)\n         warn_nonvdtor = true;\n       break;\n@@ -740,10 +731,9 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \terror (\"output filename specified twice\");\n       break;\n \n-      /* We need to handle the -Wpedantic switches here, rather than in\n+      /* We need to handle the -Wpedantic switch here, rather than in\n \t c_common_post_options, so that a subsequent -Wno-endif-labels\n \t is not overridden.  */\n-    case OPT_pedantic_errors:\n     case OPT_Wpedantic:\n       cpp_opts->cpp_pedantic = 1;\n       cpp_opts->warn_endif_labels = 1;"}, {"sha": "53d97521b1cebaabc61fda6ebd93bf52d94f8476", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b095bf15cf5225b4223d33614d001cd44a501fc/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b095bf15cf5225b4223d33614d001cd44a501fc/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=9b095bf15cf5225b4223d33614d001cd44a501fc", "patch": "@@ -142,9 +142,6 @@ C ObjC C++ ObjC++ Joined Separate\n -pedantic\n C ObjC C++ ObjC++ Alias(pedantic)\n \n--pedantic-errors\n-C ObjC C++ ObjC++ Alias(pedantic-errors)\n-\n -preprocess\n C ObjC C++ ObjC++ Undocumented Alias(E)\n \n@@ -1203,10 +1200,6 @@ pedantic\n C ObjC C++ ObjC++ Alias(Wpedantic)\n ; Documented in common.opt\n \n-pedantic-errors\n-C ObjC C++ ObjC++\n-; Documented in common.opt\n-\n print-objc-runtime-info\n ObjC ObjC++\n Generate C header of platform-specific features"}, {"sha": "0abe6bcf2a8e67090a210d600f3d25bdef231d34", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b095bf15cf5225b4223d33614d001cd44a501fc/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b095bf15cf5225b4223d33614d001cd44a501fc/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=9b095bf15cf5225b4223d33614d001cd44a501fc", "patch": "@@ -391,10 +391,14 @@ for (i = 0; i < n_enabledby; i++) {\n     n_enables = split(enables[enabledby_name], thisenable, \",\");\n     for (j = 1; j < n_enables; j++) {\n         opt_var_name = var_name(flags[opt_numbers[thisenable[j]]]);\n-        print \"      if (!opts_set->x_\" opt_var_name \")\"\n-        print \"        handle_generated_option (opts, opts_set,\"\n-        print \"                                 \" opt_enum(thisenable[j]) \", NULL, value,\"\n-        print \"                                 lang_mask, kind, loc, handlers, dc);\"\n+        if (opt_var_name != \"\") {\n+            print \"      if (!opts_set->x_\" opt_var_name \")\"\n+            print \"        handle_generated_option (opts, opts_set,\"\n+            print \"                                 \" opt_enum(thisenable[j]) \", NULL, value,\"\n+            print \"                                 lang_mask, kind, loc, handlers, dc);\"\n+        } else {\n+            print \"#error \" thisenable[j] \" does not have a Var() flag\"\n+        }\n     }\n     print \"      break;\\n\"\n }\n@@ -430,10 +434,14 @@ for (i = 0; i < n_langs; i++) {\n         n_enables = split(enables[lang_name,enabledby_name], thisenable, \",\");\n         for (j = 1; j < n_enables; j++) {\n             opt_var_name = var_name(flags[opt_numbers[thisenable[j]]]);\n-            print \"      if (!opts_set->x_\" opt_var_name \")\"\n-            print \"        handle_generated_option (opts, opts_set,\"\n-            print \"                                 \" opt_enum(thisenable[j]) \", arg, value,\"\n-            print \"                                 lang_mask, kind, loc, handlers, dc);\"\n+            if (opt_var_name != \"\") {\n+                print \"      if (!opts_set->x_\" opt_var_name \")\"\n+                print \"        handle_generated_option (opts, opts_set,\"\n+                print \"                                 \" opt_enum(thisenable[j]) \", arg, value,\"\n+                print \"                                 lang_mask, kind, loc, handlers, dc);\"\n+            } else {\n+                print \"#error \" thisenable[j] \" does not have a Var() flag\"\n+            }\n         }\n         print \"      break;\\n\"\n     }"}, {"sha": "58199c3bc3e74ac41945ddeeaace988bc9f1dc5f", "filename": "gcc/opts.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b095bf15cf5225b4223d33614d001cd44a501fc/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b095bf15cf5225b4223d33614d001cd44a501fc/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=9b095bf15cf5225b4223d33614d001cd44a501fc", "patch": "@@ -1712,8 +1712,11 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_pedantic_errors:\n-      opts->x_pedantic = 1;\n       dc->pedantic_errors = 1;\n+      control_warning_option (OPT_Wpedantic, DK_ERROR, value,\n+\t\t\t      loc, lang_mask,\n+\t\t\t      handlers, opts, opts_set,\n+                              dc);\n       break;\n \n     case OPT_flto:\n@@ -2012,9 +2015,6 @@ enable_warning_as_error (const char *arg, int value, unsigned int lang_mask,\n       control_warning_option (option_index, (int) kind, value,\n \t\t\t      loc, lang_mask,\n \t\t\t      handlers, opts, opts_set, dc);\n-      if (option_index == OPT_Wuninitialized)\n-        enable_warning_as_error (\"maybe-uninitialized\", value, lang_mask,\n-\t                         handlers, opts, opts_set, loc, dc);\n     }\n   free (new_option);\n }"}]}