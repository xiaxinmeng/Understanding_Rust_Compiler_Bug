{"sha": "26ba4aeef6c188260472e687ee164a9c5f8955ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZiYTRhZWVmNmMxODgyNjA0NzJlNjg3ZWUxNjRhOWM1Zjg5NTVlZg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-03-10T19:50:49Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-03-10T19:50:49Z"}, "message": "(find_reloads, case 'o'): Accept a fully reloaded auto-increment address.\n\nFrom-SVN: r9168", "tree": {"sha": "1e1cae7a3d896937d947198eec71393acedc0beb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e1cae7a3d896937d947198eec71393acedc0beb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26ba4aeef6c188260472e687ee164a9c5f8955ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ba4aeef6c188260472e687ee164a9c5f8955ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26ba4aeef6c188260472e687ee164a9c5f8955ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ba4aeef6c188260472e687ee164a9c5f8955ef/comments", "author": null, "committer": null, "parents": [{"sha": "01188446e8711717f6b0f9568340bb655b22f7b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01188446e8711717f6b0f9568340bb655b22f7b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01188446e8711717f6b0f9568340bb655b22f7b7"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "4ba5627a5df13aa59a96c2cd954f6a6bbdb2af66", "filename": "gcc/reload.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ba4aeef6c188260472e687ee164a9c5f8955ef/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ba4aeef6c188260472e687ee164a9c5f8955ef/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=26ba4aeef6c188260472e687ee164a9c5f8955ef", "patch": "@@ -2802,6 +2802,14 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t\t\treject that case.  */\n \t\t     && (ind_levels ? offsettable_memref_p (operand)\n \t\t\t : offsettable_nonstrict_memref_p (operand)))\n+\t\t    /* A reloaded auto-increment address is offsettable,\n+\t\t       because it is now just a simple register indirect.  */\n+\t\t    || (GET_CODE (operand) == MEM\n+\t\t\t&& address_reloaded[i]\n+\t\t\t&& (GET_CODE (XEXP (operand, 0)) == PRE_INC\n+\t\t\t    || GET_CODE (XEXP (operand, 0)) == PRE_DEC\n+\t\t\t    || GET_CODE (XEXP (operand, 0)) == POST_INC\n+\t\t\t    || GET_CODE (XEXP (operand, 0)) == POST_DEC))\n \t\t    /* Certain mem addresses will become offsettable\n \t\t       after they themselves are reloaded.  This is important;\n \t\t       we don't want our own handling of unoffsettables"}]}