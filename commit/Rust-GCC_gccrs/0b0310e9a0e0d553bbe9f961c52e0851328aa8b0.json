{"sha": "0b0310e9a0e0d553bbe9f961c52e0851328aa8b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIwMzEwZTlhMGUwZDU1M2JiZTlmOTYxYzUyZTA4NTEzMjhhYThiMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-09T18:01:55Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-09T18:01:55Z"}, "message": "Remove global REG_SETs\n\nWe currently maintain global REG_SET versions of fixed_reg_set\nand regs_invalidated_by_call.  With bitmap_view, we can instead\noperate directly on the underlying HARD_REG_SETs, avoiding the\nneed to keep the two pieces of data in sync.\n\nI have a series of patches that removes the assumption that there's\na single global ABI for all functions in the translation unit,\nwhich includes not relying on having a global regs_invalidated_by_call.\nRemoving the REG_SET equivalent is one step to doing that.\n\nNote that the affected DF code is used for EH edges or dumping only,\nso shouldn't be performance critical.\n\n2019-09-09  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* regset.h (regs_invalidated_by_call_regset): Delete.\n\t(fixed_reg_set_regset): Likewise.\n\t* reginfo.c (regs_invalidated_by_call_regset): Likewise.\n\t(fixed_reg_set_regset, persistent_obstack): Likewise.\n\t(init_reg_sets_1, globalize_reg): Update accordingly.\n\t* df.h (df_print_regset, df_print_word_regset): Take a const_bitmap\n\tinstead of a bitmap.\n\t* df-core.c (df_print_regset, df_print_word_regset): Likewise.\n\t* df-problems.c (df_rd_local_compute): Use regs_invalidated_by_call\n\tinstead of regs_invalidated_by_call_regset.\n\t(df_lr_confluence_n, df_md_confluence_n): Likewise.\n\t* df-scan.c (df_scan_start_dump): Likewise.\n\t* dse.c (copy_fixed_regs): Likewise.\n\t* config/sh/sh.c (sh_find_equiv_gbr_addr): Likewise.\n\nFrom-SVN: r275537", "tree": {"sha": "b55a290cd07db453fa09113ece2802dd975b04fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b55a290cd07db453fa09113ece2802dd975b04fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b0310e9a0e0d553bbe9f961c52e0851328aa8b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b0310e9a0e0d553bbe9f961c52e0851328aa8b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b0310e9a0e0d553bbe9f961c52e0851328aa8b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b0310e9a0e0d553bbe9f961c52e0851328aa8b0/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "148909bc700e4f52aa582346a29abc5bc51a9bda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/148909bc700e4f52aa582346a29abc5bc51a9bda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/148909bc700e4f52aa582346a29abc5bc51a9bda"}], "stats": {"total": 101, "additions": 39, "deletions": 62}, "files": [{"sha": "24e4fbad1c79604387e8ee0f597fb4e2384e148d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b0310e9a0e0d553bbe9f961c52e0851328aa8b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b0310e9a0e0d553bbe9f961c52e0851328aa8b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b0310e9a0e0d553bbe9f961c52e0851328aa8b0", "patch": "@@ -1,3 +1,20 @@\n+2019-09-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* regset.h (regs_invalidated_by_call_regset): Delete.\n+\t(fixed_reg_set_regset): Likewise.\n+\t* reginfo.c (regs_invalidated_by_call_regset): Likewise.\n+\t(fixed_reg_set_regset, persistent_obstack): Likewise.\n+\t(init_reg_sets_1, globalize_reg): Update accordingly.\n+\t* df.h (df_print_regset, df_print_word_regset): Take a const_bitmap\n+\tinstead of a bitmap.\n+\t* df-core.c (df_print_regset, df_print_word_regset): Likewise.\n+\t* df-problems.c (df_rd_local_compute): Use regs_invalidated_by_call\n+\tinstead of regs_invalidated_by_call_regset.\n+\t(df_lr_confluence_n, df_md_confluence_n): Likewise.\n+\t* df-scan.c (df_scan_start_dump): Likewise.\n+\t* dse.c (copy_fixed_regs): Likewise.\n+\t* config/sh/sh.c (sh_find_equiv_gbr_addr): Likewise.\n+\n 2019-09-09  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* array-traits.h: New file."}, {"sha": "b2fb56cab81e527b43590b8bde7fbe88e30c212e", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b0310e9a0e0d553bbe9f961c52e0851328aa8b0/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b0310e9a0e0d553bbe9f961c52e0851328aa8b0/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=0b0310e9a0e0d553bbe9f961c52e0851328aa8b0", "patch": "@@ -11695,7 +11695,7 @@ sh_find_equiv_gbr_addr (rtx_insn* insn, rtx mem)\n \t{\n \t  if (CALL_P (DF_REF_INSN (d)))\n \t    {\n-\t      if (REGNO_REG_SET_P (regs_invalidated_by_call_regset, GBR_REG))\n+\t      if (TEST_HARD_REG_BIT (regs_invalidated_by_call, GBR_REG))\n \t\treturn NULL_RTX;\n \t      else\n \t\tcontinue;"}, {"sha": "7250c390be0ddccf2d460e648bafb9b5c9d8f0a6", "filename": "gcc/df-core.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b0310e9a0e0d553bbe9f961c52e0851328aa8b0/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b0310e9a0e0d553bbe9f961c52e0851328aa8b0/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=0b0310e9a0e0d553bbe9f961c52e0851328aa8b0", "patch": "@@ -2052,7 +2052,7 @@ debug_regset (regset r)\n    This is part of making a debugging dump.  */\n \n void\n-df_print_regset (FILE *file, bitmap r)\n+df_print_regset (FILE *file, const_bitmap r)\n {\n   unsigned int i;\n   bitmap_iterator bi;\n@@ -2077,7 +2077,7 @@ df_print_regset (FILE *file, bitmap r)\n    debugging dump.  */\n \n void\n-df_print_word_regset (FILE *file, bitmap r)\n+df_print_word_regset (FILE *file, const_bitmap r)\n {\n   unsigned int max_reg = max_reg_num ();\n "}, {"sha": "89a929361bac01d49c0de1f8e9c14be43c5c245b", "filename": "gcc/df-problems.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b0310e9a0e0d553bbe9f961c52e0851328aa8b0/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b0310e9a0e0d553bbe9f961c52e0851328aa8b0/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=0b0310e9a0e0d553bbe9f961c52e0851328aa8b0", "patch": "@@ -389,7 +389,6 @@ df_rd_local_compute (bitmap all_blocks)\n {\n   unsigned int bb_index;\n   bitmap_iterator bi;\n-  unsigned int regno;\n   class df_rd_problem_data *problem_data\n     = (class df_rd_problem_data *) df_rd->problem_data;\n   bitmap sparse_invalidated = &problem_data->sparse_invalidated_by_call;\n@@ -406,10 +405,9 @@ df_rd_local_compute (bitmap all_blocks)\n     }\n \n   /* Set up the knockout bit vectors to be applied across EH_EDGES.  */\n-  EXECUTE_IF_SET_IN_BITMAP (regs_invalidated_by_call_regset, 0, regno, bi)\n-    {\n-      if (! HARD_REGISTER_NUM_P (regno)\n-\t  || !(df->changeable_flags & DF_NO_HARD_REGS))\n+  if (!(df->changeable_flags & DF_NO_HARD_REGS))\n+    for (unsigned int regno = 0; regno < FIRST_PSEUDO_REGISTER; ++regno)\n+      if (TEST_HARD_REG_BIT (regs_invalidated_by_call, regno))\n \t{\n \t  if (DF_DEFS_COUNT (regno) > DF_SPARSE_THRESHOLD)\n \t    bitmap_set_bit (sparse_invalidated, regno);\n@@ -418,7 +416,6 @@ df_rd_local_compute (bitmap all_blocks)\n \t\t\t      DF_DEFS_BEGIN (regno),\n \t\t\t      DF_DEFS_COUNT (regno));\n \t}\n-    }\n \n   bitmap_release (&seen_in_block);\n   bitmap_release (&seen_in_insn);\n@@ -983,7 +980,10 @@ df_lr_confluence_n (edge e)\n   /* ??? Abnormal call edges ignored for the moment, as this gets\n      confused by sibling call edges, which crashes reg-stack.  */\n   if (e->flags & EDGE_EH)\n-    changed = bitmap_ior_and_compl_into (op1, op2, regs_invalidated_by_call_regset);\n+    {\n+      bitmap_view<HARD_REG_SET> eh_kills (regs_invalidated_by_call);\n+      changed = bitmap_ior_and_compl_into (op1, op2, eh_kills);\n+    }\n   else\n     changed = bitmap_ior_into (op1, op2);\n \n@@ -4635,8 +4635,10 @@ df_md_confluence_n (edge e)\n     return false;\n \n   if (e->flags & EDGE_EH)\n-    return bitmap_ior_and_compl_into (op1, op2,\n-\t\t\t\t      regs_invalidated_by_call_regset);\n+    {\n+      bitmap_view<HARD_REG_SET> eh_kills (regs_invalidated_by_call);\n+      return bitmap_ior_and_compl_into (op1, op2, eh_kills);\n+    }\n   else\n     return bitmap_ior_into (op1, op2);\n }"}, {"sha": "d7bc2d8f9d076e2cf570dac8ebbe57c8b1b40fcf", "filename": "gcc/df-scan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b0310e9a0e0d553bbe9f961c52e0851328aa8b0/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b0310e9a0e0d553bbe9f961c52e0851328aa8b0/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=0b0310e9a0e0d553bbe9f961c52e0851328aa8b0", "patch": "@@ -313,7 +313,7 @@ df_scan_start_dump (FILE *file ATTRIBUTE_UNUSED)\n   rtx_insn *insn;\n \n   fprintf (file, \";;  invalidated by call \\t\");\n-  df_print_regset (file, regs_invalidated_by_call_regset);\n+  df_print_regset (file, bitmap_view<HARD_REG_SET> (regs_invalidated_by_call));\n   fprintf (file, \";;  hardware regs used \\t\");\n   df_print_regset (file, &df->hardware_regs_used);\n   fprintf (file, \";;  regular block artificial uses \\t\");"}, {"sha": "2454bfaf09ea2639dec12220714412b5686098e8", "filename": "gcc/df.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b0310e9a0e0d553bbe9f961c52e0851328aa8b0/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b0310e9a0e0d553bbe9f961c52e0851328aa8b0/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=0b0310e9a0e0d553bbe9f961c52e0851328aa8b0", "patch": "@@ -991,8 +991,8 @@ extern bool df_reg_defined (rtx_insn *, rtx);\n extern df_ref df_find_use (rtx_insn *, rtx);\n extern bool df_reg_used (rtx_insn *, rtx);\n extern void df_worklist_dataflow (struct dataflow *,bitmap, int *, int);\n-extern void df_print_regset (FILE *file, bitmap r);\n-extern void df_print_word_regset (FILE *file, bitmap r);\n+extern void df_print_regset (FILE *file, const_bitmap r);\n+extern void df_print_word_regset (FILE *file, const_bitmap r);\n extern void df_dump (FILE *);\n extern void df_dump_region (FILE *);\n extern void df_dump_start (FILE *);"}, {"sha": "c03b922bdf98b5a94095fc3f46b46e6846252bdf", "filename": "gcc/dse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b0310e9a0e0d553bbe9f961c52e0851328aa8b0/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b0310e9a0e0d553bbe9f961c52e0851328aa8b0/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=0b0310e9a0e0d553bbe9f961c52e0851328aa8b0", "patch": "@@ -2392,7 +2392,7 @@ copy_fixed_regs (const_bitmap in)\n   bitmap ret;\n \n   ret = ALLOC_REG_SET (NULL);\n-  bitmap_and (ret, in, fixed_reg_set_regset);\n+  bitmap_and (ret, in, bitmap_view<HARD_REG_SET> (fixed_reg_set));\n   return ret;\n }\n "}, {"sha": "48a3f66840b5044873d8bfeccc7cfb6ae93a6f55", "filename": "gcc/reginfo.c", "status": "modified", "additions": 4, "deletions": 38, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b0310e9a0e0d553bbe9f961c52e0851328aa8b0/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b0310e9a0e0d553bbe9f961c52e0851328aa8b0/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=0b0310e9a0e0d553bbe9f961c52e0851328aa8b0", "patch": "@@ -92,17 +92,6 @@ char global_regs[FIRST_PSEUDO_REGISTER];\n /* Declaration for the global register. */\n tree global_regs_decl[FIRST_PSEUDO_REGISTER];\n \n-/* Same information as REGS_INVALIDATED_BY_CALL but in regset form to be used\n-   in dataflow more conveniently.  */\n-regset regs_invalidated_by_call_regset;\n-\n-/* Same information as FIXED_REG_SET but in regset form.  */\n-regset fixed_reg_set_regset;\n-\n-/* The bitmap_obstack is used to hold some static variables that\n-   should not be reset after each function is compiled.  */\n-static bitmap_obstack persistent_obstack;\n-\n /* Used to initialize reg_alloc_order.  */\n #ifdef REG_ALLOC_ORDER\n static int initial_reg_alloc_order[FIRST_PSEUDO_REGISTER] = REG_ALLOC_ORDER;\n@@ -364,17 +353,6 @@ init_reg_sets_1 (void)\n   CLEAR_HARD_REG_SET (call_used_reg_set);\n   CLEAR_HARD_REG_SET (call_fixed_reg_set);\n   CLEAR_HARD_REG_SET (regs_invalidated_by_call);\n-  if (!regs_invalidated_by_call_regset)\n-    {\n-      bitmap_obstack_initialize (&persistent_obstack);\n-      regs_invalidated_by_call_regset = ALLOC_REG_SET (&persistent_obstack);\n-    }\n-  else\n-    CLEAR_REG_SET (regs_invalidated_by_call_regset);\n-  if (!fixed_reg_set_regset)\n-    fixed_reg_set_regset = ALLOC_REG_SET (&persistent_obstack);\n-  else\n-    CLEAR_REG_SET (fixed_reg_set_regset);\n \n   operand_reg_set &= accessible_reg_set;\n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n@@ -405,10 +383,7 @@ init_reg_sets_1 (void)\n #endif\n \n       if (fixed_regs[i])\n-\t{\n-\t  SET_HARD_REG_BIT (fixed_reg_set, i);\n-\t  SET_REGNO_REG_SET (fixed_reg_set_regset, i);\n-\t}\n+\tSET_HARD_REG_BIT (fixed_reg_set, i);\n \n       if (call_used_regs[i])\n \tSET_HARD_REG_BIT (call_used_reg_set, i);\n@@ -426,10 +401,7 @@ init_reg_sets_1 (void)\n       if (i == STACK_POINTER_REGNUM)\n \t;\n       else if (global_regs[i])\n-        {\n-\t  SET_HARD_REG_BIT (regs_invalidated_by_call, i);\n-\t  SET_REGNO_REG_SET (regs_invalidated_by_call_regset, i);\n-\t}\n+\tSET_HARD_REG_BIT (regs_invalidated_by_call, i);\n       else if (i == FRAME_POINTER_REGNUM)\n \t;\n       else if (!HARD_FRAME_POINTER_IS_FRAME_POINTER\n@@ -442,10 +414,7 @@ init_reg_sets_1 (void)\n \t       && i == (unsigned) PIC_OFFSET_TABLE_REGNUM && fixed_regs[i])\n \t;\n       else if (CALL_REALLY_USED_REGNO_P (i))\n-        {\n-\t  SET_HARD_REG_BIT (regs_invalidated_by_call, i);\n-\t  SET_REGNO_REG_SET (regs_invalidated_by_call_regset, i);\n-        }\n+\tSET_HARD_REG_BIT (regs_invalidated_by_call, i);\n     }\n \n   call_fixed_reg_set = fixed_reg_set;\n@@ -800,10 +769,7 @@ globalize_reg (tree decl, int i)\n      appropriate regs_invalidated_by_call bit, even if it's already\n      set in fixed_regs.  */\n   if (i != STACK_POINTER_REGNUM)\n-    {\n-      SET_HARD_REG_BIT (regs_invalidated_by_call, i);\n-      SET_REGNO_REG_SET (regs_invalidated_by_call_regset, i);\n-    }\n+    SET_HARD_REG_BIT (regs_invalidated_by_call, i);\n \n   /* If already fixed, nothing else to do.  */\n   if (fixed_regs[i])"}, {"sha": "72ff4589193df313b206b959c1d1944e88e96d93", "filename": "gcc/regset.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b0310e9a0e0d553bbe9f961c52e0851328aa8b0/gcc%2Fregset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b0310e9a0e0d553bbe9f961c52e0851328aa8b0/gcc%2Fregset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregset.h?ref=0b0310e9a0e0d553bbe9f961c52e0851328aa8b0", "patch": "@@ -111,14 +111,6 @@ typedef bitmap_iterator reg_set_iterator;\n #define EXECUTE_IF_AND_IN_REG_SET(REGSET1, REGSET2, MIN, REGNUM, RSI) \\\n   EXECUTE_IF_AND_IN_BITMAP (REGSET1, REGSET2, MIN, REGNUM, RSI)\t\\\n \n-/* Same information as REGS_INVALIDATED_BY_CALL but in regset form to be used\n-   in dataflow more conveniently.  */\n-\n-extern regset regs_invalidated_by_call_regset;\n-\n-/* Same information as FIXED_REG_SET but in regset form.  */\n-extern regset fixed_reg_set_regset;\n-\n /* An obstack for regsets.  */\n extern bitmap_obstack reg_obstack;\n "}]}