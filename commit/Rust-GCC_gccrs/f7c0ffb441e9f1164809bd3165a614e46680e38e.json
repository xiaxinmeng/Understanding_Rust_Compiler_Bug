{"sha": "f7c0ffb441e9f1164809bd3165a614e46680e38e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdjMGZmYjQ0MWU5ZjExNjQ4MDliZDMxNjVhNjE0ZTQ2NjgwZTM4ZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-11-05T12:17:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-11-05T12:17:10Z"}, "message": "re PR middle-end/37742 (ICE in vectorizer with restrict pointer)\n\n2008-11-05  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/37742\n\t* tree-ssa.c (useless_type_conversion_p_1): Check different restrict\n\tqualified pointer conversion before stripping qualifiers.\n\t* gimplify.c (create_tmp_from_val): Use correctly qualified type.\n\t* tree-flow.h (may_propagate_address_into_dereference): Declare.\n\t* tree-ssa-ccp.c (may_propagate_address_into_dereference): New function.\n\t(ccp_fold): Use it.\n\t* tree-ssa-forwprop.c (rhs_to_tree): Remove useless conversions,\n\tproperly canonicalize binary ops.\n\t(forward_propagate_addr_expr_1): Use\n\tmay_propagate_address_into_dereference.\n\n\tcp/\n\t* decl.c (start_preparsed_function): Use the correct type for\n\tbuilding the RESULT_DECL.\n\n\t* gcc.c-torture/compile/pr37742.c: New testcase.\n\t* g++.dg/pr37742.C: Likewise.\n\t* gcc.dg/tree-ssa/forwprop-7.c: Check for two volatile loads.\n\nFrom-SVN: r141606", "tree": {"sha": "c33b55ff21ac34fcc6846d0faa6ad347ae2c4bde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c33b55ff21ac34fcc6846d0faa6ad347ae2c4bde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7c0ffb441e9f1164809bd3165a614e46680e38e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7c0ffb441e9f1164809bd3165a614e46680e38e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7c0ffb441e9f1164809bd3165a614e46680e38e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7c0ffb441e9f1164809bd3165a614e46680e38e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "08906bf8a2a9d9aa0263e7f183be7315d985b00d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08906bf8a2a9d9aa0263e7f183be7315d985b00d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08906bf8a2a9d9aa0263e7f183be7315d985b00d"}], "stats": {"total": 142, "additions": 110, "deletions": 32}, "files": [{"sha": "4a6b0c20f9045dc8ad7d19094cec5652c0063bf3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7c0ffb441e9f1164809bd3165a614e46680e38e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7c0ffb441e9f1164809bd3165a614e46680e38e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7c0ffb441e9f1164809bd3165a614e46680e38e", "patch": "@@ -1,3 +1,17 @@\n+2008-11-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/37742\n+\t* tree-ssa.c (useless_type_conversion_p_1): Check different restrict\n+\tqualified pointer conversion before stripping qualifiers.\n+\t* gimplify.c (create_tmp_from_val): Use correctly qualified type.\n+\t* tree-flow.h (may_propagate_address_into_dereference): Declare.\n+\t* tree-ssa-ccp.c (may_propagate_address_into_dereference): New function.\n+\t(ccp_fold): Use it.\n+\t* tree-ssa-forwprop.c (rhs_to_tree): Remove useless conversions,\n+\tproperly canonicalize binary ops.\n+\t(forward_propagate_addr_expr_1): Use\n+\tmay_propagate_address_into_dereference.\n+\n 2008-11-05  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR middle-end/37286"}, {"sha": "3b4f8b17aa7bc2319f45e0321c1d6ded9f628a2c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7c0ffb441e9f1164809bd3165a614e46680e38e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7c0ffb441e9f1164809bd3165a614e46680e38e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f7c0ffb441e9f1164809bd3165a614e46680e38e", "patch": "@@ -1,3 +1,9 @@\n+2008-11-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/37742\n+\t* decl.c (start_preparsed_function): Use the correct type for\n+\tbuilding the RESULT_DECL.\n+\n 2008-10-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/37967"}, {"sha": "945b94721bacc0dd5bfed4aa3eb66ca3f98ecc30", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7c0ffb441e9f1164809bd3165a614e46680e38e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7c0ffb441e9f1164809bd3165a614e46680e38e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f7c0ffb441e9f1164809bd3165a614e46680e38e", "patch": "@@ -11492,7 +11492,7 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n     {\n       tree resdecl;\n \n-      resdecl = build_decl (RESULT_DECL, 0, TYPE_MAIN_VARIANT (restype));\n+      resdecl = build_decl (RESULT_DECL, 0, restype);\n       DECL_ARTIFICIAL (resdecl) = 1;\n       DECL_IGNORED_P (resdecl) = 1;\n       DECL_RESULT (decl1) = resdecl;"}, {"sha": "bec42575b96a7c962a16219e8eaf8dc66ed99c9d", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7c0ffb441e9f1164809bd3165a614e46680e38e/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7c0ffb441e9f1164809bd3165a614e46680e38e/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=f7c0ffb441e9f1164809bd3165a614e46680e38e", "patch": "@@ -565,7 +565,7 @@ create_tmp_var (tree type, const char *prefix)\n static inline tree\n create_tmp_from_val (tree val)\n {\n-  return create_tmp_var (TYPE_MAIN_VARIANT (TREE_TYPE (val)), get_name (val));\n+  return create_tmp_var (TREE_TYPE (val), get_name (val));\n }\n \n /* Create a temporary to hold the value of VAL.  If IS_FORMAL, try to reuse"}, {"sha": "79811bd34e362cb6e73650cb7b44a7bf8932ed06", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7c0ffb441e9f1164809bd3165a614e46680e38e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7c0ffb441e9f1164809bd3165a614e46680e38e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f7c0ffb441e9f1164809bd3165a614e46680e38e", "patch": "@@ -1,3 +1,10 @@\n+2008-11-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/37742\n+\t* gcc.c-torture/compile/pr37742.c: New testcase.\n+\t* g++.dg/pr37742.C: Likewise.\n+\t* gcc.dg/tree-ssa/forwprop-7.c: Check for two volatile loads.\n+\n 2008-11-05  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR middle-end/37286"}, {"sha": "784eb4984873466d7e4733ddecb2c2c0eb0594c1", "filename": "gcc/testsuite/g++.dg/pr37742.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7c0ffb441e9f1164809bd3165a614e46680e38e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr37742.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7c0ffb441e9f1164809bd3165a614e46680e38e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr37742.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr37742.C?ref=f7c0ffb441e9f1164809bd3165a614e46680e38e", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+\n+typedef long unsigned int size_t;\n+void*   __valarray_get_memory(size_t __n);\n+int*__restrict__\n+__valarray_get_storage(size_t __n)\n+{\n+  return static_cast<int* __restrict__>(__valarray_get_memory(__n));\n+}\n+"}, {"sha": "4ef00be4a2817fc28f559ad2c0785e01c06b6152", "filename": "gcc/testsuite/gcc.c-torture/compile/pr37742.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7c0ffb441e9f1164809bd3165a614e46680e38e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37742.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7c0ffb441e9f1164809bd3165a614e46680e38e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37742.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37742.c?ref=f7c0ffb441e9f1164809bd3165a614e46680e38e", "patch": "@@ -0,0 +1,21 @@\n+void foo(int* __restrict__ p, int* q, int* p1, int *q1)\n+{\n+  int i;\n+\n+  p = p1;\n+  q = q1;\n+\n+  for (i = 0; i < 4; ++i)\n+    *++q = *++p + 1;\n+}\n+\n+void bar(int* p, int* __restrict__ q, int* p1, int *q1)\n+{\n+  int i;\n+\n+  p = p1;\n+  q = q1;\n+\n+  for (i = 0; i < 4; ++i)\n+    *++q = *++p + 1;\n+}"}, {"sha": "0d2bac521765a0be65475ba5aa9ca50e4d706f07", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-7.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7c0ffb441e9f1164809bd3165a614e46680e38e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7c0ffb441e9f1164809bd3165a614e46680e38e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-7.c?ref=f7c0ffb441e9f1164809bd3165a614e46680e38e", "patch": "@@ -8,7 +8,9 @@ int foo(void)\n   return *p + *p;\n }\n \n-/* We should not convert the cast to a VCE in forwprop1 as we have a volatile reference.  */\n+/* We should not convert the cast to a VCE in forwprop1 as we have a\n+   volatile reference.  */\n+\n /* { dg-final { scan-tree-dump-times \"VIEW_CONVERT_EXPR\" 0 \"forwprop1\"} } */\n-/* { dg-final { scan-tree-dump-times \"volatile int\" 2 \"forwprop1\"} } */\n+/* { dg-final { scan-tree-dump-times \"={v}\" 2 \"forwprop1\"} } */\n /* { dg-final { cleanup-tree-dump \"forwprop1\" } } */"}, {"sha": "6004978416b6c9e2e2316f694a7a74c322b850b2", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7c0ffb441e9f1164809bd3165a614e46680e38e/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7c0ffb441e9f1164809bd3165a614e46680e38e/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=f7c0ffb441e9f1164809bd3165a614e46680e38e", "patch": "@@ -905,6 +905,8 @@ bool fold_stmt (gimple_stmt_iterator *);\n bool fold_stmt_inplace (gimple);\n tree get_symbol_constant_value (tree);\n tree fold_const_aggregate_ref (tree);\n+bool may_propagate_address_into_dereference (tree, tree);\n+\n \n /* In tree-vrp.c  */\n tree vrp_evaluate_conditional (enum tree_code, tree, tree, gimple);"}, {"sha": "a7d5be32e31529be345f4f26b299165903f1037a", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7c0ffb441e9f1164809bd3165a614e46680e38e/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7c0ffb441e9f1164809bd3165a614e46680e38e/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=f7c0ffb441e9f1164809bd3165a614e46680e38e", "patch": "@@ -851,6 +851,31 @@ ccp_visit_phi_node (gimple phi)\n     return SSA_PROP_NOT_INTERESTING;\n }\n \n+/* Return true if we may propagate the address expression ADDR into the \n+   dereference DEREF and cancel them.  */\n+\n+bool\n+may_propagate_address_into_dereference (tree addr, tree deref)\n+{\n+  gcc_assert (INDIRECT_REF_P (deref)\n+\t      && TREE_CODE (addr) == ADDR_EXPR);\n+\n+  /* If the address is invariant then we do not need to preserve restrict\n+     qualifications.  But we do need to preserve volatile qualifiers until\n+     we can annotate the folded dereference itself properly.  */\n+  if (is_gimple_min_invariant (addr)\n+      && (!TREE_THIS_VOLATILE (deref)\n+\t  || TYPE_VOLATILE (TREE_TYPE (addr))))\n+    return useless_type_conversion_p (TREE_TYPE (deref),\n+\t\t\t\t      TREE_TYPE (TREE_OPERAND (addr, 0)));\n+\n+  /* Else both the address substitution and the folding must result in\n+     a valid useless type conversion sequence.  */\n+  return (useless_type_conversion_p (TREE_TYPE (TREE_OPERAND (deref, 0)),\n+\t\t\t\t     TREE_TYPE (addr))\n+\t  && useless_type_conversion_p (TREE_TYPE (deref),\n+\t\t\t\t\tTREE_TYPE (TREE_OPERAND (addr, 0))));\n+}\n \n /* CCP specific front-end to the non-destructive constant folding\n    routines.\n@@ -897,12 +922,8 @@ ccp_fold (gimple stmt)\n \t\t      prop_value_t *val = get_value (TREE_OPERAND (*base, 0));\n \t\t      if (val->lattice_val == CONSTANT\n \t\t\t  && TREE_CODE (val->value) == ADDR_EXPR\n-\t\t\t  && useless_type_conversion_p\n-\t\t\t  (TREE_TYPE (TREE_OPERAND (*base, 0)),\n-\t\t\t   TREE_TYPE (val->value))\n-\t\t\t  && useless_type_conversion_p\n-\t\t\t  (TREE_TYPE (*base),\n-\t\t\t   TREE_TYPE (TREE_OPERAND (val->value, 0))))\n+\t\t\t  && may_propagate_address_into_dereference\n+\t\t\t       (val->value, *base))\n \t\t\t{\n \t\t\t  /* We need to return a new tree, not modify the IL\n \t\t\t     or share parts of it.  So play some tricks to"}, {"sha": "a04e7ca4404bd9b08355388e1f754926aa021bb4", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7c0ffb441e9f1164809bd3165a614e46680e38e/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7c0ffb441e9f1164809bd3165a614e46680e38e/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=f7c0ffb441e9f1164809bd3165a614e46680e38e", "patch": "@@ -334,10 +334,10 @@ rhs_to_tree (tree type, gimple stmt)\n {\n   enum tree_code code = gimple_assign_rhs_code (stmt);\n   if (get_gimple_rhs_class (code) == GIMPLE_BINARY_RHS)\n-    return fold_convert (type, build2 (code, type, gimple_assign_rhs1 (stmt),\n-                         gimple_assign_rhs2 (stmt)));\n+    return fold_build2 (code, type, gimple_assign_rhs1 (stmt),\n+\t\t\tgimple_assign_rhs2 (stmt));\n   else if (get_gimple_rhs_class (code) == GIMPLE_UNARY_RHS)\n-    return fold_convert (type, build1 (code, type, gimple_assign_rhs1 (stmt)));\n+    return build1 (code, type, gimple_assign_rhs1 (stmt));\n   else if (get_gimple_rhs_class (code) == GIMPLE_SINGLE_RHS)\n     return gimple_assign_rhs1 (stmt);\n   else\n@@ -719,12 +719,7 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n      propagate the ADDR_EXPR into the use of NAME and fold the result.  */\n   if (TREE_CODE (lhs) == INDIRECT_REF\n       && TREE_OPERAND (lhs, 0) == name\n-      && useless_type_conversion_p (TREE_TYPE (TREE_OPERAND (lhs, 0)),\n-\t\t\t\t    TREE_TYPE (def_rhs))\n-      /* ???  This looks redundant, but is required for bogus types\n-\t that can sometimes occur.  */\n-      && useless_type_conversion_p (TREE_TYPE (lhs),\n-\t\t\t\t    TREE_TYPE (TREE_OPERAND (def_rhs, 0))))\n+      && may_propagate_address_into_dereference (def_rhs, lhs))\n     {\n       *lhsp = unshare_expr (TREE_OPERAND (def_rhs, 0));\n       fold_stmt_inplace (use_stmt);\n@@ -747,12 +742,7 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n      propagate the ADDR_EXPR into the use of NAME and fold the result.  */\n   if (TREE_CODE (rhs) == INDIRECT_REF\n       && TREE_OPERAND (rhs, 0) == name\n-      && useless_type_conversion_p (TREE_TYPE (TREE_OPERAND (rhs, 0)),\n-\t\t\t\t    TREE_TYPE (def_rhs))\n-      /* ???  This looks redundant, but is required for bogus types\n-\t that can sometimes occur.  */\n-      && useless_type_conversion_p (TREE_TYPE (rhs),\n-\t\t\t\t    TREE_TYPE (TREE_OPERAND (def_rhs, 0))))\n+      && may_propagate_address_into_dereference (def_rhs, rhs))\n     {\n       *rhsp = unshare_expr (TREE_OPERAND (def_rhs, 0));\n       fold_stmt_inplace (use_stmt);"}, {"sha": "935cad676c14a240844bcc0bb40bece2b4c8d12e", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7c0ffb441e9f1164809bd3165a614e46680e38e/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7c0ffb441e9f1164809bd3165a614e46680e38e/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=f7c0ffb441e9f1164809bd3165a614e46680e38e", "patch": "@@ -1071,7 +1071,18 @@ delete_tree_ssa (void)\n static bool\n useless_type_conversion_p_1 (tree outer_type, tree inner_type)\n {\n-  /* Qualifiers on value types do not matter.  */\n+  /* Do the following before stripping toplevel qualifiers.  */\n+  if (POINTER_TYPE_P (inner_type)\n+      && POINTER_TYPE_P (outer_type))\n+    {\n+      /* Do not lose casts to restrict qualified pointers.  */\n+      if ((TYPE_RESTRICT (outer_type)\n+\t   != TYPE_RESTRICT (inner_type))\n+\t  && TYPE_RESTRICT (outer_type))\n+\treturn false;\n+    }\n+\n+  /* From now on qualifiers on value types do not matter.  */\n   inner_type = TYPE_MAIN_VARIANT (inner_type);\n   outer_type = TYPE_MAIN_VARIANT (outer_type);\n \n@@ -1147,12 +1158,6 @@ useless_type_conversion_p_1 (tree outer_type, tree inner_type)\n       /* We do not care for const qualification of the pointed-to types\n \t as const qualification has no semantic value to the middle-end.  */\n \n-      /* Do not lose casts to restrict qualified pointers.  */\n-      if ((TYPE_RESTRICT (outer_type)\n-\t   != TYPE_RESTRICT (inner_type))\n-\t  && TYPE_RESTRICT (outer_type))\n-\treturn false;\n-\n       /* Otherwise pointers/references are equivalent if their pointed\n \t to types are effectively the same.  We can strip qualifiers\n \t on pointed-to types for further comparison, which is done in"}]}