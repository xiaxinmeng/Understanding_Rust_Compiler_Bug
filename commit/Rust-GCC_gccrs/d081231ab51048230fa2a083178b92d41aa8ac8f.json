{"sha": "d081231ab51048230fa2a083178b92d41aa8ac8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA4MTIzMWFiNTEwNDgyMzBmYTJhMDgzMTc4YjkyZDQxYWE4YWM4Zg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-11-01T11:07:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-11-01T11:07:15Z"}, "message": "N3421 C++1y Transparent functors\n\n\tN3421 C++1y Transparent functors\n\t* include/bits/stl_function.h (plus<void>, minus<void>,\n\tmultiplies<void>, divides<void>, modulus<void>, negate<void>,\n\tequal_to<void>, not_equal_to<void>, greater<void>, less<void>,\n\tgreater_equal<void>, less_equal<void>, logical_and<void>,\n\tlogical_or<void>, logical_not<void>, bit_and<void>, bit_or<void>,\n\tbit_xor<void>, bit_not<void>): Define.\n\t* doc/xml/manual/status_cxx2014.xml: Update.\n\t* testsuite/20_util/function_objects/comparisons_void.cc: New.\n\n\t* include/bits/stl_function.h: Implement N3421.\n\t* testsuite/20_util/function_objects/comparisons_void.cc: New.\n\nFrom-SVN: r204290", "tree": {"sha": "655f442bb1d1be9cf328d00f9b386e0e15fdcaac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/655f442bb1d1be9cf328d00f9b386e0e15fdcaac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d081231ab51048230fa2a083178b92d41aa8ac8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d081231ab51048230fa2a083178b92d41aa8ac8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d081231ab51048230fa2a083178b92d41aa8ac8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d081231ab51048230fa2a083178b92d41aa8ac8f/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13a26a7d10c7beb64dcdb8c41d6c4b1d81a1a271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13a26a7d10c7beb64dcdb8c41d6c4b1d81a1a271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13a26a7d10c7beb64dcdb8c41d6c4b1d81a1a271"}], "stats": {"total": 456, "additions": 455, "deletions": 1}, "files": [{"sha": "40d48794e21e5aac2b94941ce8f55c8a0d23aebd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d081231ab51048230fa2a083178b92d41aa8ac8f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d081231ab51048230fa2a083178b92d41aa8ac8f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d081231ab51048230fa2a083178b92d41aa8ac8f", "patch": "@@ -1,3 +1,15 @@\n+2013-11-01  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tN3421 C++1y Transparent functors\n+\t* include/bits/stl_function.h (plus<void>, minus<void>,\n+\tmultiplies<void>, divides<void>, modulus<void>, negate<void>,\n+\tequal_to<void>, not_equal_to<void>, greater<void>, less<void>,\n+\tgreater_equal<void>, less_equal<void>, logical_and<void>,\n+\tlogical_or<void>, logical_not<void>, bit_and<void>, bit_or<void>,\n+\tbit_xor<void>, bit_not<void>): Define.\n+\t* doc/xml/manual/status_cxx2014.xml: Update.\n+\t* testsuite/20_util/function_objects/comparisons_void.cc: New.\n+\n 2013-10-31  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/std/tuple (_Index_tuple, _Build_index_tuple): Move to"}, {"sha": "b368a810e6a7242a2e6e1fcfb4ca89a20fe7bb76", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2014.xml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d081231ab51048230fa2a083178b92d41aa8ac8f/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2014.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d081231ab51048230fa2a083178b92d41aa8ac8f/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2014.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2014.xml?ref=d081231ab51048230fa2a083178b92d41aa8ac8f", "patch": "@@ -209,7 +209,7 @@ particular release.\n \t</link>\n       </entry>\n       <entry>Making Operator Functors greater&lt;&gt;</entry>\n-      <entry>WIP</entry>\n+      <entry>Y</entry>\n       <entry/>\n     </row>\n "}, {"sha": "d2e5d134663946eb0f8fde0f24941351d85a77a3", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 347, "deletions": 0, "changes": 347, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d081231ab51048230fa2a083178b92d41aa8ac8f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d081231ab51048230fa2a083178b92d41aa8ac8f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=d081231ab51048230fa2a083178b92d41aa8ac8f", "patch": "@@ -56,6 +56,10 @@\n #ifndef _STL_FUNCTION_H\n #define _STL_FUNCTION_H 1\n \n+#if __cplusplus > 201103L\n+#include <bits/move.h>\n+#endif\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -135,6 +139,29 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *\n    *  @{\n    */\n+\n+#if __cplusplus > 201103L\n+  struct __is_transparent;  // undefined\n+\n+  template<typename _Tp = void>\n+    struct plus;\n+\n+  template<typename _Tp = void>\n+    struct minus;\n+\n+  template<typename _Tp = void>\n+    struct multiplies;\n+\n+  template<typename _Tp = void>\n+    struct divides;\n+\n+  template<typename _Tp = void>\n+    struct modulus;\n+\n+  template<typename _Tp = void>\n+    struct negate;\n+#endif\n+\n   /// One of the @link arithmetic_functors math functors@endlink.\n   template<typename _Tp>\n     struct plus : public binary_function<_Tp, _Tp, _Tp>\n@@ -188,6 +215,91 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator()(const _Tp& __x) const\n       { return -__x; }\n     };\n+\n+#if __cplusplus > 201103L\n+  template<>\n+    struct plus<void>\n+    {\n+      template <typename _Tp, typename _Up>\n+\tauto\n+\toperator()(_Tp&& __t, _Up&& __u) const\n+\tnoexcept(noexcept(std::forward<_Tp>(__t) + std::forward<_Up>(__u)))\n+\t-> decltype(std::forward<_Tp>(__t) + std::forward<_Up>(__u))\n+\t{ return std::forward<_Tp>(__t) + std::forward<_Up>(__u); }\n+\n+      typedef __is_transparent is_transparent;\n+    };\n+\n+  /// One of the @link arithmetic_functors math functors@endlink.\n+  template<>\n+    struct minus<void>\n+    {\n+      template <typename _Tp, typename _Up>\n+\tauto\n+\toperator()(_Tp&& __t, _Up&& __u) const\n+\tnoexcept(noexcept(std::forward<_Tp>(__t) - std::forward<_Up>(__u)))\n+\t-> decltype(std::forward<_Tp>(__t) - std::forward<_Up>(__u))\n+\t{ return std::forward<_Tp>(__t) - std::forward<_Up>(__u); }\n+\n+      typedef __is_transparent is_transparent;\n+    };\n+\n+  /// One of the @link arithmetic_functors math functors@endlink.\n+  template<>\n+    struct multiplies<void>\n+    {\n+      template <typename _Tp, typename _Up>\n+\tauto\n+\toperator()(_Tp&& __t, _Up&& __u) const\n+\tnoexcept(noexcept(std::forward<_Tp>(__t) * std::forward<_Up>(__u)))\n+\t-> decltype(std::forward<_Tp>(__t) * std::forward<_Up>(__u))\n+\t{ return std::forward<_Tp>(__t) * std::forward<_Up>(__u); }\n+\n+      typedef __is_transparent is_transparent;\n+    };\n+\n+  /// One of the @link arithmetic_functors math functors@endlink.\n+  template<>\n+    struct divides<void>\n+    {\n+      template <typename _Tp, typename _Up>\n+\tauto\n+\toperator()(_Tp&& __t, _Up&& __u) const\n+\tnoexcept(noexcept(std::forward<_Tp>(__t) / std::forward<_Up>(__u)))\n+\t-> decltype(std::forward<_Tp>(__t) / std::forward<_Up>(__u))\n+\t{ return std::forward<_Tp>(__t) / std::forward<_Up>(__u); }\n+\n+      typedef __is_transparent is_transparent;\n+    };\n+\n+  /// One of the @link arithmetic_functors math functors@endlink.\n+  template<>\n+    struct modulus<void>\n+    {\n+      template <typename _Tp, typename _Up>\n+\tauto\n+\toperator()(_Tp&& __t, _Up&& __u) const\n+\tnoexcept(noexcept(std::forward<_Tp>(__t) % std::forward<_Up>(__u)))\n+\t-> decltype(std::forward<_Tp>(__t) % std::forward<_Up>(__u))\n+\t{ return std::forward<_Tp>(__t) % std::forward<_Up>(__u); }\n+\n+      typedef __is_transparent is_transparent;\n+    };\n+\n+  /// One of the @link arithmetic_functors math functors@endlink.\n+  template<>\n+    struct negate<void>\n+    {\n+      template <typename _Tp>\n+\tauto\n+\toperator()(_Tp&& __t) const\n+\tnoexcept(noexcept(-std::forward<_Tp>(__t)))\n+\t-> decltype(-std::forward<_Tp>(__t))\n+\t{ return -std::forward<_Tp>(__t); }\n+\n+      typedef __is_transparent is_transparent;\n+    };\n+#endif\n   /** @}  */\n \n   // 20.3.3 comparisons\n@@ -199,6 +311,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *\n    *  @{\n    */\n+#if __cplusplus > 201103L\n+  template<typename _Tp = void>\n+    struct equal_to;\n+\n+  template<typename _Tp = void>\n+    struct not_equal_to;\n+\n+  template<typename _Tp = void>\n+    struct greater;\n+\n+  template<typename _Tp = void>\n+    struct less;\n+\n+  template<typename _Tp = void>\n+    struct greater_equal;\n+\n+  template<typename _Tp = void>\n+    struct less_equal;\n+#endif\n+\n   /// One of the @link comparison_functors comparison functors@endlink.\n   template<typename _Tp>\n     struct equal_to : public binary_function<_Tp, _Tp, bool>\n@@ -252,6 +384,92 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator()(const _Tp& __x, const _Tp& __y) const\n       { return __x <= __y; }\n     };\n+\n+#if __cplusplus > 201103L\n+  /// One of the @link comparison_functors comparison functors@endlink.\n+  template<>\n+    struct equal_to<void>\n+    {\n+      template <typename _Tp, typename _Up>\n+\tauto\n+\toperator()(_Tp&& __t, _Up&& __u) const\n+\tnoexcept(noexcept(std::forward<_Tp>(__t) == std::forward<_Up>(__u)))\n+\t-> decltype(std::forward<_Tp>(__t) == std::forward<_Up>(__u))\n+\t{ return std::forward<_Tp>(__t) == std::forward<_Up>(__u); }\n+\n+      typedef __is_transparent is_transparent;\n+    };\n+\n+  /// One of the @link comparison_functors comparison functors@endlink.\n+  template<>\n+    struct not_equal_to<void>\n+    {\n+      template <typename _Tp, typename _Up>\n+\tauto\n+\toperator()(_Tp&& __t, _Up&& __u) const\n+\tnoexcept(noexcept(std::forward<_Tp>(__t) != std::forward<_Up>(__u)))\n+\t-> decltype(std::forward<_Tp>(__t) != std::forward<_Up>(__u))\n+\t{ return std::forward<_Tp>(__t) != std::forward<_Up>(__u); }\n+\n+      typedef __is_transparent is_transparent;\n+    };\n+\n+  /// One of the @link comparison_functors comparison functors@endlink.\n+  template<>\n+    struct greater<void>\n+    {\n+      template <typename _Tp, typename _Up>\n+\tauto\n+\toperator()(_Tp&& __t, _Up&& __u) const\n+\tnoexcept(noexcept(std::forward<_Tp>(__t) > std::forward<_Up>(__u)))\n+\t-> decltype(std::forward<_Tp>(__t) > std::forward<_Up>(__u))\n+\t{ return std::forward<_Tp>(__t) > std::forward<_Up>(__u); }\n+\n+      typedef __is_transparent is_transparent;\n+    };\n+\n+  /// One of the @link comparison_functors comparison functors@endlink.\n+  template<>\n+    struct less<void>\n+    {\n+      template <typename _Tp, typename _Up>\n+\tauto\n+\toperator()(_Tp&& __t, _Up&& __u) const\n+\tnoexcept(noexcept(std::forward<_Tp>(__t) < std::forward<_Up>(__u)))\n+\t-> decltype(std::forward<_Tp>(__t) < std::forward<_Up>(__u))\n+\t{ return std::forward<_Tp>(__t) < std::forward<_Up>(__u); }\n+\n+      typedef __is_transparent is_transparent;\n+    };\n+\n+  /// One of the @link comparison_functors comparison functors@endlink.\n+  template<>\n+    struct greater_equal<void>\n+    {\n+      template <typename _Tp, typename _Up>\n+\tauto\n+\toperator()(_Tp&& __t, _Up&& __u) const\n+\tnoexcept(noexcept(std::forward<_Tp>(__t) >= std::forward<_Up>(__u)))\n+\t-> decltype(std::forward<_Tp>(__t) >= std::forward<_Up>(__u))\n+\t{ return std::forward<_Tp>(__t) >= std::forward<_Up>(__u); }\n+\n+      typedef __is_transparent is_transparent;\n+    };\n+\n+  /// One of the @link comparison_functors comparison functors@endlink.\n+  template<>\n+    struct less_equal<void>\n+    {\n+      template <typename _Tp, typename _Up>\n+\tauto\n+\toperator()(_Tp&& __t, _Up&& __u) const\n+\tnoexcept(noexcept(std::forward<_Tp>(__t) <= std::forward<_Up>(__u)))\n+\t-> decltype(std::forward<_Tp>(__t) <= std::forward<_Up>(__u))\n+\t{ return std::forward<_Tp>(__t) <= std::forward<_Up>(__u); }\n+\n+      typedef __is_transparent is_transparent;\n+    };\n+#endif\n   /** @}  */\n \n   // 20.3.4 logical operations\n@@ -263,6 +481,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *\n    *  @{\n    */\n+#if __cplusplus > 201103L\n+  template<typename _Tp = void>\n+    struct logical_and;\n+\n+  template<typename _Tp = void>\n+    struct logical_or;\n+\n+  template<typename _Tp = void>\n+    struct logical_not;\n+#endif\n+\n   /// One of the @link logical_functors Boolean operations functors@endlink.\n   template<typename _Tp>\n     struct logical_and : public binary_function<_Tp, _Tp, bool>\n@@ -289,8 +518,64 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator()(const _Tp& __x) const\n       { return !__x; }\n     };\n+\n+#if __cplusplus > 201103L\n+  /// One of the @link logical_functors Boolean operations functors@endlink.\n+  template<>\n+    struct logical_and<void>\n+    {\n+      template <typename _Tp, typename _Up>\n+\tauto\n+\toperator()(_Tp&& __t, _Up&& __u) const\n+\tnoexcept(noexcept(std::forward<_Tp>(__t) && std::forward<_Up>(__u)))\n+\t-> decltype(std::forward<_Tp>(__t) && std::forward<_Up>(__u))\n+\t{ return std::forward<_Tp>(__t) && std::forward<_Up>(__u); }\n+\n+      typedef __is_transparent is_transparent;\n+    };\n+\n+  /// One of the @link logical_functors Boolean operations functors@endlink.\n+  template<>\n+    struct logical_or<void>\n+    {\n+      template <typename _Tp, typename _Up>\n+\tauto\n+\toperator()(_Tp&& __t, _Up&& __u) const\n+\tnoexcept(noexcept(std::forward<_Tp>(__t) || std::forward<_Up>(__u)))\n+\t-> decltype(std::forward<_Tp>(__t) || std::forward<_Up>(__u))\n+\t{ return std::forward<_Tp>(__t) || std::forward<_Up>(__u); }\n+\n+      typedef __is_transparent is_transparent;\n+    };\n+\n+  /// One of the @link logical_functors Boolean operations functors@endlink.\n+  template<>\n+    struct logical_not<void>\n+    {\n+      template <typename _Tp>\n+\tauto\n+\toperator()(_Tp&& __t) const -> decltype(!std::forward<_Tp>(__t))\n+\t{ return !std::forward<_Tp>(__t); }\n+\n+      typedef __is_transparent is_transparent;\n+    };\n+#endif\n   /** @}  */\n \n+#if __cplusplus > 201103L\n+  template<typename _Tp = void>\n+    struct bit_and;\n+\n+  template<typename _Tp = void>\n+    struct bit_or;\n+\n+  template<typename _Tp = void>\n+    struct bit_xor;\n+\n+  template<typename _Tp = void>\n+    struct bit_not;\n+#endif\n+\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // DR 660. Missing Bitwise Operations.\n   template<typename _Tp>\n@@ -317,6 +602,68 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return __x ^ __y; }\n     };\n \n+  template<typename _Tp>\n+    struct bit_not : public unary_function<_Tp, _Tp>\n+    {\n+      _Tp\n+      operator()(const _Tp& __x) const\n+      { return ~__x; }\n+    };\n+\n+#if __cplusplus > 201103L\n+  template <>\n+    struct bit_and<void>\n+    {\n+      template <typename _Tp, typename _Up>\n+\tauto\n+\toperator()(_Tp&& __t, _Up&& __u) const\n+\tnoexcept(noexcept(std::forward<_Tp>(__t) & std::forward<_Up>(__u)))\n+\t-> decltype(std::forward<_Tp>(__t) & std::forward<_Up>(__u))\n+\t{ return std::forward<_Tp>(__t) & std::forward<_Up>(__u); }\n+\n+      typedef __is_transparent is_transparent;\n+    };\n+\n+  template <>\n+    struct bit_or<void>\n+    {\n+      template <typename _Tp, typename _Up>\n+\tauto\n+\toperator()(_Tp&& __t, _Up&& __u) const\n+\tnoexcept(noexcept(std::forward<_Tp>(__t) | std::forward<_Up>(__u)))\n+\t-> decltype(std::forward<_Tp>(__t) | std::forward<_Up>(__u))\n+\t{ return std::forward<_Tp>(__t) | std::forward<_Up>(__u); }\n+\n+      typedef __is_transparent is_transparent;\n+    };\n+\n+  template <>\n+    struct bit_xor<void>\n+    {\n+      template <typename _Tp, typename _Up>\n+\tauto\n+\toperator()(_Tp&& __t, _Up&& __u) const\n+\tnoexcept(noexcept(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u)))\n+\t-> decltype(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u))\n+\t{ return std::forward<_Tp>(__t) ^ std::forward<_Up>(__u); }\n+\n+      typedef __is_transparent is_transparent;\n+    };\n+\n+  template <>\n+    struct bit_not<void>\n+    {\n+      template <typename _Tp>\n+\tauto\n+\toperator()(_Tp&& __t) const\n+\tnoexcept(noexcept(~std::forward<_Tp>(__t)))\n+\t-> decltype(~std::forward<_Tp>(__t))\n+\t{ return ~std::forward<_Tp>(__t); }\n+\n+      typedef __is_transparent is_transparent;\n+    };\n+#endif\n+\n   // 20.3.5 negators\n   /** @defgroup negators Negators\n    * @ingroup functors"}, {"sha": "2cea1fc8dfd5c4d71db2e4cf17a8210566cec04a", "filename": "libstdc++-v3/testsuite/20_util/function_objects/comparisons_void.cc", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d081231ab51048230fa2a083178b92d41aa8ac8f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fcomparisons_void.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d081231ab51048230fa2a083178b92d41aa8ac8f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fcomparisons_void.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fcomparisons_void.cc?ref=d081231ab51048230fa2a083178b92d41aa8ac8f", "patch": "@@ -0,0 +1,95 @@\n+// { dg-options \" -std=gnu++1y \" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.3.3 Comparisons\n+\n+#include <functional>\n+\n+struct R { };\n+\n+struct L\n+{\n+  L operator+(const R&) const { return *this; }\n+  L operator-(const R&) const { return *this; }\n+  L operator*(const R&) const { return *this; }\n+  L operator/(const R&) const { return *this; }\n+  L operator%(const R&) const { return *this; }\n+  L operator-() const { return *this; }\n+\n+  bool operator==(const R&) const { return true; }\n+  bool operator!=(const R&) const { return false; }\n+  bool operator<(const R&) const { return false; }\n+  bool operator<=(const R&) const { return true; }\n+  bool operator>(const R&) const { return false; }\n+  bool operator>=(const R&) const { return true; }\n+\n+  bool operator&&(const R&) const { return true; }\n+  bool operator||(const R&) const { return true; }\n+  bool operator!() const { return false; }\n+\n+  int operator&(const R&) const { return 1; }\n+  int operator|(const R&) const { return 1; }\n+  int operator^(const R&) const { return 0; }\n+  int operator~() const { return 0; }\n+};\n+\n+L l;\n+R r;\n+\n+// test unary function objects\n+template<typename F, typename Check = typename F::is_transparent>\n+bool\n+test1(F f)\n+{\n+  f(l);\n+  return true;\n+}\n+\n+// test binary function objects\n+template<typename F, typename Check = typename F::is_transparent>\n+bool\n+test2(F f)\n+{\n+  f(l, r);\n+  return true;\n+}\n+\n+auto plus       = test2( std::plus<>() );\n+auto minus      = test2( std::minus<>() );\n+auto multiplies = test2( std::multiplies<>() );\n+auto divides    = test2( std::divides<>() );\n+auto modulus    = test2( std::modulus<>() );\n+auto negate     = test1( std::negate<>() );\n+\n+auto equal_to       = test2( std::equal_to<>() );\n+auto not_equal_to   = test2( std::not_equal_to<>() );\n+auto greater        = test2( std::greater<>() );\n+auto less           = test2( std::less<>() );\n+auto greater_equal  = test2( std::greater_equal<>() );\n+auto less_equal     = test2( std::less_equal<>() );\n+\n+auto logical_and    = test2( std::logical_and<>() );\n+auto logical_or     = test2( std::logical_or<>() );\n+auto logical_not    = test1( std::logical_not<>() );\n+\n+auto bit_and        = test2( std::bit_and<>() );\n+auto bit_or         = test2( std::bit_or<>() );\n+auto bit_xor        = test2( std::bit_xor<>() );\n+auto bit_not        = test1( std::bit_not<>() );"}]}