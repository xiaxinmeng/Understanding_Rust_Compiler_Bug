{"sha": "1ab8b791c88ee57fe840ea28c03d65ddfc3aa882", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFiOGI3OTFjODhlZTU3ZmU4NDBlYTI4YzAzZDY1ZGRmYzNhYTg4Mg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2012-03-28T22:42:28Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2012-03-28T22:42:28Z"}, "message": "Add ABI_64 and replace ISA_X32 with ABI_X32\n\n2012-03-28  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/biarch64.h (TARGET_64BIT_DEFAULT): Add\n\tOPTION_MASK_ABI_64.\n\n\t* config/i386/gnu-user64.h (SPEC_64): Support TARGET_BI_ARCH == 2.\n\t(SPEC_X32): Likewise.\n\t(MULTILIB_DEFAULTS): Likewise.\n\n\t* config/i386/i386.c (isa_opts): Remove -m64.\n\t(ix86_target_string): Properly handle -m32/-m64/-mx32.\n\t(ix86_option_override_internal): Properly\n\tset OPTION_MASK_ISA_64BIT and OPTION_MASK_ISA_X32 as well as\n\thandle -m32, -m64 and -mx32.\n\n\t* config/i386/i386.h (TARGET_X32): Replace OPTION_ISA_X32\n\twith OPTION_ABI_X32.  Moved after TARGET_LP64.\n\t(TARGET_LP64): Changed to OPTION_ABI_64.\n\n\t* config/i386/i386.opt (m64): Replace ISA_64BIT with ABI_64.\n\t(mx32): Replace ISA_X32 with ABI_X32.\n\nFrom-SVN: r185937", "tree": {"sha": "84c619a9a3c6d7013addd57ed7d910c8934a1e19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84c619a9a3c6d7013addd57ed7d910c8934a1e19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ab8b791c88ee57fe840ea28c03d65ddfc3aa882", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab8b791c88ee57fe840ea28c03d65ddfc3aa882", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ab8b791c88ee57fe840ea28c03d65ddfc3aa882", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab8b791c88ee57fe840ea28c03d65ddfc3aa882/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2e540b505941a63f422d865c2a1490193e459d38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e540b505941a63f422d865c2a1490193e459d38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e540b505941a63f422d865c2a1490193e459d38"}], "stats": {"total": 97, "additions": 90, "deletions": 7}, "files": [{"sha": "e988df50c3a0b08be83271d462c80b99dfab97d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab8b791c88ee57fe840ea28c03d65ddfc3aa882/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab8b791c88ee57fe840ea28c03d65ddfc3aa882/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ab8b791c88ee57fe840ea28c03d65ddfc3aa882", "patch": "@@ -1,3 +1,25 @@\n+2012-03-28  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/biarch64.h (TARGET_64BIT_DEFAULT): Add\n+\tOPTION_MASK_ABI_64.\n+\n+\t* config/i386/gnu-user64.h (SPEC_64): Support TARGET_BI_ARCH == 2.\n+\t(SPEC_X32): Likewise.\n+\t(MULTILIB_DEFAULTS): Likewise.\n+\n+\t* config/i386/i386.c (isa_opts): Remove -m64.\n+\t(ix86_target_string): Properly handle -m32/-m64/-mx32.\n+\t(ix86_option_override_internal): Properly\n+\tset OPTION_MASK_ISA_64BIT and OPTION_MASK_ISA_X32 as well as\n+\thandle -m32, -m64 and -mx32.\n+\n+\t* config/i386/i386.h (TARGET_X32): Replace OPTION_ISA_X32\n+\twith OPTION_ABI_X32.  Moved after TARGET_LP64.\n+\t(TARGET_LP64): Changed to OPTION_ABI_64.\n+\n+\t* config/i386/i386.opt (m64): Replace ISA_64BIT with ABI_64.\n+\t(mx32): Replace ISA_X32 with ABI_X32.\n+\n 2012-03-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree.c (tree_size) <VECTOR_CST>: New case."}, {"sha": "0c3811e3f3346d8a5357db80a99a0d90d7d3d47c", "filename": "gcc/config/i386/biarch64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab8b791c88ee57fe840ea28c03d65ddfc3aa882/gcc%2Fconfig%2Fi386%2Fbiarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab8b791c88ee57fe840ea28c03d65ddfc3aa882/gcc%2Fconfig%2Fi386%2Fbiarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbiarch64.h?ref=1ab8b791c88ee57fe840ea28c03d65ddfc3aa882", "patch": "@@ -25,5 +25,5 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n-#define TARGET_64BIT_DEFAULT OPTION_MASK_ISA_64BIT\n+#define TARGET_64BIT_DEFAULT (OPTION_MASK_ISA_64BIT | OPTION_MASK_ABI_64)\n #define TARGET_BI_ARCH 1"}, {"sha": "6f7b5de2ab844ef25d64f9ea9113d1167a6d6a82", "filename": "gcc/config/i386/gnu-user64.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab8b791c88ee57fe840ea28c03d65ddfc3aa882/gcc%2Fconfig%2Fi386%2Fgnu-user64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab8b791c88ee57fe840ea28c03d65ddfc3aa882/gcc%2Fconfig%2Fi386%2Fgnu-user64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgnu-user64.h?ref=1ab8b791c88ee57fe840ea28c03d65ddfc3aa882", "patch": "@@ -58,8 +58,13 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #if TARGET_64BIT_DEFAULT\n #define SPEC_32 \"m32\"\n+#if TARGET_BI_ARCH == 2\n+#define SPEC_64 \"m64\"\n+#define SPEC_X32 \"m32|m64:;\"\n+#else\n #define SPEC_64 \"m32|mx32:;\"\n #define SPEC_X32 \"mx32\"\n+#endif\n #else\n #define SPEC_32 \"m64|mx32:;\"\n #define SPEC_64 \"m64\"\n@@ -95,7 +100,11 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    %{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\"\n \n #if TARGET_64BIT_DEFAULT\n+#if TARGET_BI_ARCH == 2\n+#define MULTILIB_DEFAULTS { \"mx32\" }\n+#else\n #define MULTILIB_DEFAULTS { \"m64\" }\n+#endif\n #else\n #define MULTILIB_DEFAULTS { \"m32\" }\n #endif"}, {"sha": "42746e474d351fe442dd85cd44153bba388fd369", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab8b791c88ee57fe840ea28c03d65ddfc3aa882/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab8b791c88ee57fe840ea28c03d65ddfc3aa882/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1ab8b791c88ee57fe840ea28c03d65ddfc3aa882", "patch": "@@ -2657,7 +2657,6 @@ ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n      preceding options while match those first.  */\n   static struct ix86_target_opts isa_opts[] =\n   {\n-    { \"-m64\",\t\tOPTION_MASK_ISA_64BIT },\n     { \"-mfma4\",\t\tOPTION_MASK_ISA_FMA4 },\n     { \"-mfma\",\t\tOPTION_MASK_ISA_FMA },\n     { \"-mxop\",\t\tOPTION_MASK_ISA_XOP },\n@@ -2730,6 +2729,7 @@ ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n   size_t len;\n   size_t line_len;\n   size_t sep_len;\n+  const char *abi;\n \n   memset (opts, '\\0', sizeof (opts));\n \n@@ -2747,6 +2747,21 @@ ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n       opts[num++][1] = tune;\n     }\n \n+  /* Add -m32/-m64/-mx32.  */\n+  if ((isa & OPTION_MASK_ISA_64BIT) != 0)\n+    {\n+      if ((isa & OPTION_MASK_ABI_64) != 0)\n+\tabi = \"-m64\";\n+      else\n+\tabi = \"-mx32\";\n+      isa &= ~ (OPTION_MASK_ISA_64BIT\n+\t\t| OPTION_MASK_ABI_64\n+\t\t| OPTION_MASK_ABI_X32);\n+    }\n+  else\n+    abi = \"-m32\";\n+  opts[num++][0] = abi;\n+\n   /* Pick out the options in isa options.  */\n   for (i = 0; i < ARRAY_SIZE (isa_opts); i++)\n     {\n@@ -3102,8 +3117,45 @@ ix86_option_override_internal (bool main_args_p)\n   SUBSUBTARGET_OVERRIDE_OPTIONS;\n #endif\n \n+  /* Turn off both OPTION_MASK_ABI_64 and OPTION_MASK_ABI_X32 if\n+     TARGET_64BIT is false.  */\n+  if (!TARGET_64BIT)\n+    ix86_isa_flags &= ~(OPTION_MASK_ABI_64 | OPTION_MASK_ABI_X32);\n+#ifdef TARGET_BI_ARCH\n+  else\n+    {\n+#if TARGET_BI_ARCH == 1\n+      /* When TARGET_BI_ARCH == 1, by default, OPTION_MASK_ABI_64\n+\t is on and OPTION_MASK_ABI_X32 is off.  We turn off\n+\t OPTION_MASK_ABI_64 if OPTION_MASK_ABI_X32 is turned on by\n+\t -mx32.  */\n+      if (TARGET_X32)\n+\tix86_isa_flags &= ~OPTION_MASK_ABI_64;\n+#else\n+      /* When TARGET_BI_ARCH == 2, by default, OPTION_MASK_ABI_X32 is\n+\t on and OPTION_MASK_ABI_64 is off.  We turn off\n+\t OPTION_MASK_ABI_X32 if OPTION_MASK_ABI_64 is turned on by\n+\t -m64.  */\n+      if (TARGET_LP64)\n+\tix86_isa_flags &= ~OPTION_MASK_ABI_X32;\n+#endif\n+    }\n+#endif\n+\n   if (TARGET_X32)\n-    ix86_isa_flags |= OPTION_MASK_ISA_64BIT;\n+    {\n+      /* Always turn on OPTION_MASK_ISA_64BIT and turn off\n+\t OPTION_MASK_ABI_64 for TARGET_X32.  */\n+      ix86_isa_flags |= OPTION_MASK_ISA_64BIT;\n+      ix86_isa_flags &= ~OPTION_MASK_ABI_64;\n+    }\n+  else if (TARGET_LP64)\n+    {\n+      /* Always turn on OPTION_MASK_ISA_64BIT and turn off\n+\t OPTION_MASK_ABI_X32 for TARGET_LP64.  */\n+      ix86_isa_flags |= OPTION_MASK_ISA_64BIT;\n+      ix86_isa_flags &= ~OPTION_MASK_ABI_X32;\n+    }\n \n   /* -fPIC is the default for x86_64.  */\n   if (TARGET_MACHO && TARGET_64BIT)"}, {"sha": "7ba90c764f938d1737aa1202171f19dc82dfb1e6", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab8b791c88ee57fe840ea28c03d65ddfc3aa882/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab8b791c88ee57fe840ea28c03d65ddfc3aa882/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=1ab8b791c88ee57fe840ea28c03d65ddfc3aa882", "patch": "@@ -42,7 +42,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* Redefines for option macros.  */\n \n #define TARGET_64BIT\tOPTION_ISA_64BIT\n-#define TARGET_X32\tOPTION_ISA_X32\n #define TARGET_MMX\tOPTION_ISA_MMX\n #define TARGET_3DNOW\tOPTION_ISA_3DNOW\n #define TARGET_3DNOW_A\tOPTION_ISA_3DNOW_A\n@@ -77,7 +76,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_F16C\tOPTION_ISA_F16C\n #define TARGET_RTM      OPTION_ISA_RTM\n \n-#define TARGET_LP64\t(TARGET_64BIT && !TARGET_X32)\n+#define TARGET_LP64\tOPTION_ABI_64\n+#define TARGET_X32\tOPTION_ABI_X32\n \n /* SSE4.1 defines round instructions */\n #define\tOPTION_MASK_ISA_ROUND\tOPTION_MASK_ISA_SSE4_1"}, {"sha": "bf50aed47a863ee0b5cc0b7d6847c043ed5e86f9", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab8b791c88ee57fe840ea28c03d65ddfc3aa882/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab8b791c88ee57fe840ea28c03d65ddfc3aa882/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=1ab8b791c88ee57fe840ea28c03d65ddfc3aa882", "patch": "@@ -425,11 +425,11 @@ Target RejectNegative Negative(m64) Report InverseMask(ISA_64BIT) Var(ix86_isa_f\n Generate 32bit i386 code\n \n m64\n-Target RejectNegative Negative(mx32) Report Mask(ISA_64BIT) Var(ix86_isa_flags) Save\n+Target RejectNegative Negative(mx32) Report Mask(ABI_64) Var(ix86_isa_flags) Save\n Generate 64bit x86-64 code\n \n mx32\n-Target RejectNegative Negative(m32) Report Mask(ISA_X32) Var(ix86_isa_flags) Save\n+Target RejectNegative Negative(m32) Report Mask(ABI_X32) Var(ix86_isa_flags) Save\n Generate 32bit x86-64 code\n \n mmmx"}]}