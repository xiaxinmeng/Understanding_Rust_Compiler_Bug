{"sha": "c743614e7016c5b2e5c5871cba23de68134d4950", "node_id": "C_kwDOANBUbNoAKGM3NDM2MTRlNzAxNmM1YjJlNWM1ODcxY2JhMjNkZTY4MTM0ZDQ5NTA", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-01-01T18:07:59Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-01-02T17:56:02Z"}, "message": "c++: fix array cleanup with throwing temp dtor\n\nWhile working on PR66139 I noticed that if the destructor of a temporary\ncreated during array initialization throws, we were failing to destroy the\nlast array element constructed.  Throwing destructors are rare since C++11,\nbut this should be fixed.\n\ngcc/cp/ChangeLog:\n\n\t* init.c (build_vec_init): Append the decrement to elt_init.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/eh/array2.C: New test.", "tree": {"sha": "8d82978674919f385b5f34f00cc3b7b2a732342f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d82978674919f385b5f34f00cc3b7b2a732342f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c743614e7016c5b2e5c5871cba23de68134d4950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c743614e7016c5b2e5c5871cba23de68134d4950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c743614e7016c5b2e5c5871cba23de68134d4950", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c743614e7016c5b2e5c5871cba23de68134d4950/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "092e60f57adeccf98e876af6b7b5734337904812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/092e60f57adeccf98e876af6b7b5734337904812", "html_url": "https://github.com/Rust-GCC/gccrs/commit/092e60f57adeccf98e876af6b7b5734337904812"}], "stats": {"total": 60, "additions": 54, "deletions": 6}, "files": [{"sha": "5a5c12579028611c664abd12c4a820da7be09296", "filename": "gcc/cp/init.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c743614e7016c5b2e5c5871cba23de68134d4950/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c743614e7016c5b2e5c5871cba23de68134d4950/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=c743614e7016c5b2e5c5871cba23de68134d4950", "patch": "@@ -4665,11 +4665,13 @@ build_vec_init (tree base, tree maxindex, tree init,\n       finish_for_cond (build2 (GT_EXPR, boolean_type_node, iterator,\n \t\t\t       build_int_cst (TREE_TYPE (iterator), -1)),\n \t\t       for_stmt, false, 0);\n-      elt_init = cp_build_unary_op (PREDECREMENT_EXPR, iterator, false,\n-\t\t\t\t    complain);\n-      if (elt_init == error_mark_node)\n-\terrors = true;\n-      finish_for_expr (elt_init, for_stmt);\n+      /* We used to pass this decrement to finish_for_expr; now we add it to\n+\t elt_init below so it's part of the same full-expression as the\n+\t initialization, and thus happens before any potentially throwing\n+\t temporary cleanups.  */\n+      tree decr = cp_build_unary_op (PREDECREMENT_EXPR, iterator, false,\n+\t\t\t\t     complain);\n+\n \n       to = build1 (INDIRECT_REF, type, base);\n \n@@ -4794,7 +4796,10 @@ build_vec_init (tree base, tree maxindex, tree init,\n \n       current_stmt_tree ()->stmts_are_full_exprs_p = 1;\n       if (elt_init && !errors)\n-\tfinish_expr_stmt (elt_init);\n+\telt_init = build2 (COMPOUND_EXPR, void_type_node, elt_init, decr);\n+      else\n+\telt_init = decr;\n+      finish_expr_stmt (elt_init);\n       current_stmt_tree ()->stmts_are_full_exprs_p = 0;\n \n       finish_expr_stmt (cp_build_unary_op (PREINCREMENT_EXPR, base, false,"}, {"sha": "d4d6c91cde741ada51166d4bee71702d6dbe0ab4", "filename": "gcc/testsuite/g++.dg/eh/array2.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c743614e7016c5b2e5c5871cba23de68134d4950/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Farray2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c743614e7016c5b2e5c5871cba23de68134d4950/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Farray2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Farray2.C?ref=c743614e7016c5b2e5c5871cba23de68134d4950", "patch": "@@ -0,0 +1,43 @@\n+// Test that we clean up the right number of array elements when\n+// a temporary destructor throws.\n+// { dg-do run }\n+\n+#if __cplusplus > 201100L\n+#define THROWING noexcept(false)\n+#else\n+#define THROWING\n+#endif\n+\n+extern \"C\" void abort ();\n+\n+int b;\n+int d = -1;\n+struct A {\n+  A() { }\n+  A(const A&);\n+  ~A() THROWING {\n+    if (b == d) throw b;\n+  }\n+};\n+struct B {\n+  B(const A& = A()) { ++b; }\n+  B(const B&);\n+  ~B() { --b; }\n+};\n+void f()\n+{\n+  b = 0;\n+  try\n+    {\n+      B bs[3];\n+      if (b != 3) abort ();\n+    }\n+  catch (int i) { }\n+  if (b != 0) abort ();\n+}\n+\n+int main()\n+{\n+  for (d = 0; d <= 3; ++d)\n+    f();\n+}"}]}