{"sha": "a27c386001166cec7abc12d54e96413022bcc747", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI3YzM4NjAwMTE2NmNlYzdhYmMxMmQ1NGU5NjQxMzAyMmJjYzc0Nw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-05-16T07:57:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-05-16T07:57:46Z"}, "message": "tree-ssa-sccvn.c (visit_use): Also constant-fold calls.\n\n2014-05-16  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (visit_use): Also constant-fold calls.\n\n\t* gcc.dg/tree-ssa/ssa-fre-41.c: New testcase.\n\nFrom-SVN: r210491", "tree": {"sha": "776df230e0884755b1a09582eb5f930870d60be9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/776df230e0884755b1a09582eb5f930870d60be9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a27c386001166cec7abc12d54e96413022bcc747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a27c386001166cec7abc12d54e96413022bcc747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a27c386001166cec7abc12d54e96413022bcc747", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a27c386001166cec7abc12d54e96413022bcc747/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8c55b91aefb9d6d64cd0ebf2fe5e9a22b1cd71b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8c55b91aefb9d6d64cd0ebf2fe5e9a22b1cd71b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8c55b91aefb9d6d64cd0ebf2fe5e9a22b1cd71b"}], "stats": {"total": 92, "additions": 77, "deletions": 15}, "files": [{"sha": "3df0bb4022ed6fef3b2157e8ab630655acbf7e72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27c386001166cec7abc12d54e96413022bcc747/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27c386001166cec7abc12d54e96413022bcc747/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a27c386001166cec7abc12d54e96413022bcc747", "patch": "@@ -1,3 +1,7 @@\n+2014-05-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (visit_use): Also constant-fold calls.\n+\n 2014-05-15  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR target/61193"}, {"sha": "8c52f8cd9d8465a419082abe9a128dc814f9803d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27c386001166cec7abc12d54e96413022bcc747/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27c386001166cec7abc12d54e96413022bcc747/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a27c386001166cec7abc12d54e96413022bcc747", "patch": "@@ -1,3 +1,7 @@\n+2014-05-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-fre-41.c: New testcase.\n+\n 2014-05-15  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/61085"}, {"sha": "82ca746e1738540379de4566727095cd90435cee", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-41.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27c386001166cec7abc12d54e96413022bcc747/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-41.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27c386001166cec7abc12d54e96413022bcc747/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-41.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-41.c?ref=a27c386001166cec7abc12d54e96413022bcc747", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre1\" } */\n+\n+int x;\n+int foo (void)\n+{\n+  x = 1;\n+  return __builtin_ffs (x);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"ffs\" \"fre1\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre1\" } } */"}, {"sha": "93a7e301240eeb7aa629a5e1486c66315148afc7", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 57, "deletions": 15, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27c386001166cec7abc12d54e96413022bcc747/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27c386001166cec7abc12d54e96413022bcc747/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=a27c386001166cec7abc12d54e96413022bcc747", "patch": "@@ -3566,28 +3566,70 @@ visit_use (tree use)\n       else if (is_gimple_call (stmt))\n \t{\n \t  tree lhs = gimple_call_lhs (stmt);\n-\n-\t  /* ???  We could try to simplify calls.  */\n-\n \t  if (lhs && TREE_CODE (lhs) == SSA_NAME)\n \t    {\n-\t      if (stmt_has_constants (stmt))\n-\t\tVN_INFO (lhs)->has_constants = true;\n-\t      else\n+\t      /* Try constant folding based on our current lattice.  */\n+\t      tree simplified = gimple_fold_stmt_to_constant_1 (stmt,\n+\t\t\t\t\t\t\t\tvn_valueize);\n+\t      if (simplified)\n+\t\t{\n+\t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t    {\n+\t\t      fprintf (dump_file, \"call \");\n+\t\t      print_gimple_expr (dump_file, stmt, 0, 0);\n+\t\t      fprintf (dump_file, \" simplified to \");\n+\t\t      print_generic_expr (dump_file, simplified, 0);\n+\t\t      if (TREE_CODE (lhs) == SSA_NAME)\n+\t\t\tfprintf (dump_file, \" has constants %d\\n\",\n+\t\t\t\t expr_has_constants (simplified));\n+\t\t      else\n+\t\t\tfprintf (dump_file, \"\\n\");\n+\t\t    }\n+\t\t}\n+\t      /* Setting value numbers to constants will occasionally\n+\t\t screw up phi congruence because constants are not\n+\t\t uniquely associated with a single ssa name that can be\n+\t\t looked up.  */\n+\t      if (simplified\n+\t\t  && is_gimple_min_invariant (simplified))\n \t\t{\n-\t\t  /* We reset expr and constantness here because we may\n-\t\t     have been value numbering optimistically, and\n-\t\t     iterating.  They may become non-constant in this case,\n-\t\t     even if they were optimistically constant.  */\n-\t\t  VN_INFO (lhs)->has_constants = false;\n-\t\t  VN_INFO (lhs)->expr = NULL_TREE;\n+\t\t  VN_INFO (lhs)->expr = simplified;\n+\t\t  VN_INFO (lhs)->has_constants = true;\n+\t\t  changed = set_ssa_val_to (lhs, simplified);\n+\t\t  if (gimple_vdef (stmt))\n+\t\t    changed |= set_ssa_val_to (gimple_vdef (stmt),\n+\t\t\t\t\t       gimple_vuse (stmt));\n+\t\t  goto done;\n \t\t}\n-\n-\t      if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (lhs))\n+\t      else if (simplified\n+\t\t       && TREE_CODE (simplified) == SSA_NAME)\n \t\t{\n-\t\t  changed = defs_to_varying (stmt);\n+\t\t  changed = visit_copy (lhs, simplified);\n+\t\t  if (gimple_vdef (stmt))\n+\t\t    changed |= set_ssa_val_to (gimple_vdef (stmt),\n+\t\t\t\t\t       gimple_vuse (stmt));\n \t\t  goto done;\n \t\t}\n+\t      else\n+\t\t{\n+\t\t  if (stmt_has_constants (stmt))\n+\t\t    VN_INFO (lhs)->has_constants = true;\n+\t\t  else\n+\t\t    {\n+\t\t      /* We reset expr and constantness here because we may\n+\t\t\t have been value numbering optimistically, and\n+\t\t\t iterating.  They may become non-constant in this case,\n+\t\t\t even if they were optimistically constant.  */\n+\t\t      VN_INFO (lhs)->has_constants = false;\n+\t\t      VN_INFO (lhs)->expr = NULL_TREE;\n+\t\t    }\n+\n+\t\t  if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (lhs))\n+\t\t    {\n+\t\t      changed = defs_to_varying (stmt);\n+\t\t      goto done;\n+\t\t    }\n+\t\t}\n \t    }\n \n \t  if (!gimple_call_internal_p (stmt)"}]}