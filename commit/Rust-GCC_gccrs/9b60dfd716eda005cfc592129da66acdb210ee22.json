{"sha": "9b60dfd716eda005cfc592129da66acdb210ee22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI2MGRmZDcxNmVkYTAwNWNmYzU5MjEyOWRhNjZhY2RiMjEwZWUyMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-09-21T05:44:10Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-09-21T05:44:10Z"}, "message": "re PR c++/17530 (failure to emit inline function)\n\n\tPR c++/17530\n\t* pt.c (tsubst): Fix parentheses to accomodate emacs.\n\t(tsubst_baselink): If we get a single function, mark it as used.\n\n\tPR c++/17530\n\t* g++.dg/template/static7.C: New test.\n\nFrom-SVN: r87791", "tree": {"sha": "06bdae24ad68e9a57a101d63e814c4225877ee2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06bdae24ad68e9a57a101d63e814c4225877ee2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b60dfd716eda005cfc592129da66acdb210ee22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b60dfd716eda005cfc592129da66acdb210ee22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b60dfd716eda005cfc592129da66acdb210ee22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b60dfd716eda005cfc592129da66acdb210ee22/comments", "author": null, "committer": null, "parents": [{"sha": "79b82df36c0337afa82db85f0a65df7eaf4dd7f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79b82df36c0337afa82db85f0a65df7eaf4dd7f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79b82df36c0337afa82db85f0a65df7eaf4dd7f7"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "6ddc16d3be8d3a55ecdba7d5b0e2aed380ae7621", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b60dfd716eda005cfc592129da66acdb210ee22/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b60dfd716eda005cfc592129da66acdb210ee22/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9b60dfd716eda005cfc592129da66acdb210ee22", "patch": "@@ -1,3 +1,9 @@\n+2004-09-20  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/17530\n+\t* pt.c (tsubst): Fix parentheses to accomodate emacs.\n+\t(tsubst_baselink): If we get a single function, mark it as used.\n+\n 2004-09-20  Matt Austern <austern@apple.com>\n \t    Zack Weinberg  <zack@codesourcery.com>\n "}, {"sha": "4d77a8dbd5775460fc49469bbca0091fa4d36537", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b60dfd716eda005cfc592129da66acdb210ee22/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b60dfd716eda005cfc592129da66acdb210ee22/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9b60dfd716eda005cfc592129da66acdb210ee22", "patch": "@@ -7007,11 +7007,12 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t       single bad template instantiation.  */\n \t    if (complain & tf_error\n #ifdef USE_MAPPED_LOCATION\n-\t\t&& last_loc != input_location)\n+\t\t&& last_loc != input_location\n #else\n \t\t&& (last_loc.line != input_line\n-\t\t    || last_loc.file != input_filename))\n+\t\t    || last_loc.file != input_filename)\n #endif\n+\t\t  )\n \t      {\n \t\tif (TREE_CODE (type) == VOID_TYPE)\n \t\t  error (\"forming reference to void\");\n@@ -7323,11 +7324,23 @@ tsubst_baselink (tree baselink, tree object_type,\n       }\n     name = DECL_NAME (get_first_fn (fns));\n     baselink = lookup_fnfields (qualifying_scope, name, /*protect=*/1);\n+    \n+    /* If lookup found a single function, mark it as used at this\n+       point.  (If it lookup found multiple functions the one selected\n+       later by overload resolution will be marked as used at that\n+       point.)  */\n+    if (BASELINK_P (baselink))\n+      fns = BASELINK_FUNCTIONS (baselink);\n+    if (!template_id_p && !really_overloaded_fn (fns))\n+      mark_used (OVL_CURRENT (fns));\n+\n+    /* Add back the template arguments, if present.  */\n     if (BASELINK_P (baselink) && template_id_p)\n       BASELINK_FUNCTIONS (baselink) \n \t= build_nt (TEMPLATE_ID_EXPR,\n \t\t    BASELINK_FUNCTIONS (baselink),\n \t\t    template_args);\n+\n     if (!object_type)\n       object_type = current_class_type;\n     return adjust_result_of_qualified_name_lookup (baselink, "}, {"sha": "2d2e5b63643af45768e933690d8eacfbc32200a9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b60dfd716eda005cfc592129da66acdb210ee22/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b60dfd716eda005cfc592129da66acdb210ee22/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9b60dfd716eda005cfc592129da66acdb210ee22", "patch": "@@ -1,3 +1,8 @@\n+2004-09-20  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/17530\n+\t* g++.dg/template/static7.C: New test.\n+\n 2004-09-20  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR tree-opt/17558 "}, {"sha": "edb8e6a8db0e0542073b9a6c5b58e95cfd58be48", "filename": "gcc/testsuite/g++.dg/template/static7.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b60dfd716eda005cfc592129da66acdb210ee22/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b60dfd716eda005cfc592129da66acdb210ee22/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic7.C?ref=9b60dfd716eda005cfc592129da66acdb210ee22", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/17530\n+// { dg-do link }\n+\n+typedef void (*Func) ();\n+void f (Func) {}\n+struct B\n+{\n+  static void staticfunc () {}\n+};\n+template <int> \n+void C(){ f (B::staticfunc); }\n+int main ()\n+{\n+  C<0>();\n+  return 0;\n+}"}]}