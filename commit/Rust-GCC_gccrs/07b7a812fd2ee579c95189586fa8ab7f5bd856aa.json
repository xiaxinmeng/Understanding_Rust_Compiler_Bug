{"sha": "07b7a812fd2ee579c95189586fa8ab7f5bd856aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdiN2E4MTJmZDJlZTU3OWM5NTE4OTU4NmZhOGFiN2Y1YmQ4NTZhYQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-01-02T04:04:05Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-01-02T04:04:05Z"}, "message": "cp-tree.h (skip_rtti_stuff): Adjust prototype.\n\n\t* cp-tree.h (skip_rtti_stuff): Adjust prototype.\n\t* class.c (skip_rtti_stuff): Reorganize parameters and return value.\n\t(modify_one_vtable): Adjust.\n\t(fixup_vtable_deltas1): Likewise.\n\t(override_one_vtable): Likewise.\n\t* search.c (get_abstract_virtuals_1): Likewise.\n\t(get_pure_virtuals): Likewise.\n\t(expand_upcast_fixups): Likewise.\n\t* tree.c (debug_binfo): Likewise.\n\nFrom-SVN: r31163", "tree": {"sha": "74aec9dfb31654044a72c613403e66f30f2b28f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74aec9dfb31654044a72c613403e66f30f2b28f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07b7a812fd2ee579c95189586fa8ab7f5bd856aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07b7a812fd2ee579c95189586fa8ab7f5bd856aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07b7a812fd2ee579c95189586fa8ab7f5bd856aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07b7a812fd2ee579c95189586fa8ab7f5bd856aa/comments", "author": null, "committer": null, "parents": [{"sha": "5e1677bcb0a88632d3f9ad495bf64748ec000a1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e1677bcb0a88632d3f9ad495bf64748ec000a1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e1677bcb0a88632d3f9ad495bf64748ec000a1e"}], "stats": {"total": 79, "additions": 48, "deletions": 31}, "files": [{"sha": "d1762d63c9ea22ae4bfdae31f684e0654bf94d13", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b7a812fd2ee579c95189586fa8ab7f5bd856aa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b7a812fd2ee579c95189586fa8ab7f5bd856aa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=07b7a812fd2ee579c95189586fa8ab7f5bd856aa", "patch": "@@ -1,5 +1,15 @@\n 2000-01-01  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* cp-tree.h (skip_rtti_stuff): Adjust prototype.\n+\t* class.c (skip_rtti_stuff): Reorganize parameters and return value.\n+\t(modify_one_vtable): Adjust.\n+\t(fixup_vtable_deltas1): Likewise.\n+\t(override_one_vtable): Likewise.\n+\t* search.c (get_abstract_virtuals_1): Likewise.\n+\t(get_pure_virtuals): Likewise.\n+\t(expand_upcast_fixups): Likewise.\n+\t* tree.c (debug_binfo): Likewise.\n+\t\n \t* class.c (build_vtable): Don't return a value.  Don't rebuild\n \tvtables for bases that have already been handled.\n \t(prepare_fresh_vtable): Don't rebuild vtables for bases that have"}, {"sha": "fe5d29685dd5eea8932b3113e841c73ae94254d0", "filename": "gcc/cp/class.c", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b7a812fd2ee579c95189586fa8ab7f5bd856aa/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b7a812fd2ee579c95189586fa8ab7f5bd856aa/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=07b7a812fd2ee579c95189586fa8ab7f5bd856aa", "patch": "@@ -2384,39 +2384,48 @@ get_class_offset (context, t, binfo, fndecl)\n   return offset;\n }\n \n-/* Skip RTTI information at the front of the virtual list.  */\n+/* Return the BINFO_VIRTUALS list for BINFO, without the RTTI stuff at\n+   the front.  If non-NULL, N is set to the number of entries\n+   skipped.  */\n \n-unsigned HOST_WIDE_INT\n-skip_rtti_stuff (virtuals, t)\n-     tree *virtuals, t;\n+tree\n+skip_rtti_stuff (binfo, t, n)\n+     tree binfo;\n+     tree t;\n+     unsigned HOST_WIDE_INT *n;\n {\n-  int n;\n+  tree virtuals;\n \n   if (CLASSTYPE_COM_INTERFACE (t))\n     return 0;\n \n-  n = 0;\n-  if (*virtuals)\n+  if (n)\n+    *n = 0;\n+  virtuals = BINFO_VIRTUALS (binfo);\n+  if (virtuals)\n     {\n       /* We always reserve a slot for the offset/tdesc entry.  */\n-      ++n;\n-      *virtuals = TREE_CHAIN (*virtuals);\n+      if (n)\n+\t++*n;\n+      virtuals = TREE_CHAIN (virtuals);\n     }\n-  if (flag_vtable_thunks && *virtuals)\n+  if (flag_vtable_thunks && virtuals)\n     {\n       /* The second slot is reserved for the tdesc pointer when thunks\n          are used.  */\n-      ++n;\n-      *virtuals = TREE_CHAIN (*virtuals);\n+      if (n)\n+\t++*n;\n+      virtuals = TREE_CHAIN (virtuals);\n     }\n-  return n;\n+\n+  return virtuals;\n }\n \n static void\n modify_one_vtable (binfo, t, fndecl)\n      tree binfo, t, fndecl;\n {\n-  tree virtuals = BINFO_VIRTUALS (binfo);\n+  tree virtuals;\n   unsigned HOST_WIDE_INT n;\n   \n   /* update rtti entry */\n@@ -2430,7 +2439,7 @@ modify_one_vtable (binfo, t, fndecl)\n   if (fndecl == NULL_TREE)\n     return;\n \n-  n = skip_rtti_stuff (&virtuals, BINFO_TYPE (binfo));\n+  virtuals = skip_rtti_stuff (binfo, BINFO_TYPE (binfo), &n);\n \n   while (virtuals)\n     {\n@@ -2519,10 +2528,10 @@ static void\n fixup_vtable_deltas1 (binfo, t)\n      tree binfo, t;\n {\n-  tree virtuals = BINFO_VIRTUALS (binfo);\n+  tree virtuals;\n   unsigned HOST_WIDE_INT n;\n   \n-  n = skip_rtti_stuff (&virtuals, BINFO_TYPE (binfo));\n+  virtuals = skip_rtti_stuff (binfo, BINFO_TYPE (binfo), &n);\n \n   while (virtuals)\n     {\n@@ -2677,17 +2686,17 @@ static void\n override_one_vtable (binfo, old, t)\n      tree binfo, old, t;\n {\n-  tree virtuals = BINFO_VIRTUALS (binfo);\n-  tree old_virtuals = BINFO_VIRTUALS (old);\n+  tree virtuals;\n+  tree old_virtuals;\n   enum { REUSE_NEW, REUSE_OLD, UNDECIDED, NEITHER } choose = UNDECIDED;\n \n   /* If we have already committed to modifying it, then don't try and\n      reuse another vtable.  */\n   if (BINFO_NEW_VTABLE_MARKED (binfo))\n     choose = NEITHER;\n \n-  skip_rtti_stuff (&virtuals, BINFO_TYPE (binfo));\n-  skip_rtti_stuff (&old_virtuals, BINFO_TYPE (binfo));\n+  virtuals = skip_rtti_stuff (binfo, BINFO_TYPE (binfo), NULL);\n+  old_virtuals = skip_rtti_stuff (old, BINFO_TYPE (binfo), NULL);\n \n   while (virtuals)\n     {"}, {"sha": "24ff231c6054184478c59a759bdd9cee33e03c51", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b7a812fd2ee579c95189586fa8ab7f5bd856aa/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b7a812fd2ee579c95189586fa8ab7f5bd856aa/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=07b7a812fd2ee579c95189586fa8ab7f5bd856aa", "patch": "@@ -3394,7 +3394,7 @@ extern void push_lang_context\t\t\tPROTO((tree));\n extern void pop_lang_context\t\t\tPROTO((void));\n extern tree instantiate_type\t\t\tPROTO((tree, tree, int));\n extern void print_class_statistics\t\tPROTO((void));\n-extern unsigned HOST_WIDE_INT skip_rtti_stuff\tPROTO((tree *, tree));\n+extern tree skip_rtti_stuff\t                PROTO((tree, tree, unsigned HOST_WIDE_INT *));\n extern void build_self_reference\t\tPROTO((void));\n extern void warn_hidden\t\t\t\tPROTO((tree));\n extern tree get_enclosing_class\t\t\tPROTO((tree));"}, {"sha": "d6269e378e40b94df90c8264aa9f8c1bdac6decf", "filename": "gcc/cp/search.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b7a812fd2ee579c95189586fa8ab7f5bd856aa/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b7a812fd2ee579c95189586fa8ab7f5bd856aa/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=07b7a812fd2ee579c95189586fa8ab7f5bd856aa", "patch": "@@ -2129,9 +2129,9 @@ get_abstract_virtuals_1 (binfo, do_self, abstract_virtuals)\n   /* Should we use something besides CLASSTYPE_VFIELDS? */\n   if (do_self && CLASSTYPE_VFIELDS (BINFO_TYPE (binfo)))\n     {\n-      tree virtuals = BINFO_VIRTUALS (binfo);\n+      tree virtuals;\n \n-      skip_rtti_stuff (&virtuals, BINFO_TYPE (binfo));\n+      virtuals = skip_rtti_stuff (binfo, BINFO_TYPE (binfo), NULL);\n \n       while (virtuals)\n \t{\n@@ -2160,9 +2160,9 @@ get_pure_virtuals (type)\n \t\t\t\t\t       \n   for (vbases = CLASSTYPE_VBASECLASSES (type); vbases; vbases = TREE_CHAIN (vbases))\n     {\n-      tree virtuals = BINFO_VIRTUALS (vbases);\n+      tree virtuals;\n \n-      skip_rtti_stuff (&virtuals, BINFO_TYPE (vbases));\n+      virtuals = skip_rtti_stuff (vbases, BINFO_TYPE (vbases), NULL);\n \n       while (virtuals)\n \t{\n@@ -2598,7 +2598,7 @@ expand_upcast_fixups (binfo, addr, orig_addr, vbase, vbase_addr, t,\n \t\t      vbase_offsets)\n      tree binfo, addr, orig_addr, vbase, vbase_addr, t, *vbase_offsets;\n {\n-  tree virtuals = BINFO_VIRTUALS (binfo);\n+  tree virtuals;\n   tree vc;\n   tree delta;\n   unsigned HOST_WIDE_INT n;\n@@ -2613,7 +2613,7 @@ expand_upcast_fixups (binfo, addr, orig_addr, vbase, vbase_addr, t,\n       *vbase_offsets = delta;\n     }\n \n-  n = skip_rtti_stuff (&virtuals, BINFO_TYPE (binfo));\n+  virtuals = skip_rtti_stuff (binfo, BINFO_TYPE (binfo), &n);\n \n   while (virtuals)\n     {"}, {"sha": "f5e24740200020be6ed6cef0f2dfe83d34c80811", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b7a812fd2ee579c95189586fa8ab7f5bd856aa/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b7a812fd2ee579c95189586fa8ab7f5bd856aa/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=07b7a812fd2ee579c95189586fa8ab7f5bd856aa", "patch": "@@ -1165,9 +1165,7 @@ debug_binfo (elem)\n   else\n     fprintf (stderr, \"no vtable decl yet\\n\");\n   fprintf (stderr, \"virtuals:\\n\");\n-  virtuals = BINFO_VIRTUALS (elem);\n-\n-  n = skip_rtti_stuff (&virtuals, BINFO_TYPE (elem));\n+  virtuals = skip_rtti_stuff (elem, BINFO_TYPE (elem), &n);\n \n   while (virtuals)\n     {"}]}