{"sha": "4ea5fe8b4002d15c8706749a3c43ed107c9a02f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVhNWZlOGI0MDAyZDE1Yzg3MDY3NDlhM2M0M2VkMTA3YzlhMDJmOQ==", "commit": {"author": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2021-06-02T04:56:38Z"}, "committer": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2021-06-02T05:06:35Z"}, "message": "Fix minor bugs in H8 port logical ops.  Prepare for more compare/test removal\n\ngcc/\n\t* config/h8300/h8300-protos.h (compute_a_shift_length): Drop unused\n\targument from prototype.\n\t(output_logical_op): Add rtx_code argument.\n\t(compute_logical_op_length): Likewise.\n\t* config/h8300/h8300.c (h8300_and_costs): Pass additional argument\n\tto compute_a_shift_length.\n\t(output_logical_op); New argument with the rtx code rather than\n\textracting it from an operand.  Handle QImode too.\n\t(compute_logical_op_length): Similary.\n\t(compute_a_shift_length): Drop unused argument.\n\t* config/h8300/h8300.md (logicals): New code iterator.\n\t* config/h8300/logical.md (<code><mode>3 expander): Combine\n\tthe \"and\" expander with the \"ior\"/\"xor\" expander.\n\t(bclr<mode>msx): Combine the QI/HI mode patterns.\n\t(<logical><mode>3 insns): Use code iterator rather than match_operator.\n\tHandle QImode as well.   Update call to output_logical_op and\n\tcompute_logical_op_length to pass in rtx_code\n\tFix split condition on all define_insn_and_split patterns.\n\t(one_cmpl<mode>2<cczn>): Use <cczn> to support both clobbering\n\tthe flags and setting ZN via existing define_subst.\n\t* config/h8300/shiftrotate.md: Drop unused argument from\n\tcalls to compute_a_shift_length.\n\n\tSigned-off-by: Jeff Law <jeffreyalaw@gmail.com>", "tree": {"sha": "d96afd475e83917e648578c4383a3d2db84e539d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d96afd475e83917e648578c4383a3d2db84e539d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ea5fe8b4002d15c8706749a3c43ed107c9a02f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ea5fe8b4002d15c8706749a3c43ed107c9a02f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ea5fe8b4002d15c8706749a3c43ed107c9a02f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ea5fe8b4002d15c8706749a3c43ed107c9a02f9/comments", "author": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b75978d14fc35981ffd8bf060ee52300db4dae50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b75978d14fc35981ffd8bf060ee52300db4dae50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b75978d14fc35981ffd8bf060ee52300db4dae50"}], "stats": {"total": 119, "additions": 55, "deletions": 64}, "files": [{"sha": "af653292a9db0ca323806050984f14c577bd7108", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea5fe8b4002d15c8706749a3c43ed107c9a02f9/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea5fe8b4002d15c8706749a3c43ed107c9a02f9/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=4ea5fe8b4002d15c8706749a3c43ed107c9a02f9", "patch": "@@ -29,16 +29,15 @@ extern unsigned int compute_mov_length (rtx *);\n extern const char *output_plussi (rtx *, bool);\n extern unsigned int compute_plussi_length (rtx *, bool);\n extern const char *output_a_shift (rtx *);\n-extern unsigned int compute_a_shift_length (rtx, rtx *);\n+extern unsigned int compute_a_shift_length (rtx *);\n extern const char *output_a_rotate (enum rtx_code, rtx *);\n extern unsigned int compute_a_rotate_length (rtx *);\n extern const char *output_simode_bld (int, rtx[]);\n extern void final_prescan_insn (rtx_insn *, rtx *, int);\n extern int h8300_expand_movsi (rtx[]);\n extern machine_mode  h8300_select_cc_mode (RTX_CODE, rtx, rtx);\n-extern const char *output_logical_op (machine_mode, rtx *);\n-extern unsigned int compute_logical_op_length (machine_mode,\n-\t\t\t\t\t       rtx *);\n+extern const char *output_logical_op (machine_mode, rtx_code code, rtx *);\n+extern unsigned int compute_logical_op_length (machine_mode, rtx_code, rtx *);\n \n extern int compute_logical_op_cc (machine_mode, rtx *);\n extern int compute_a_shift_cc (rtx, rtx *);"}, {"sha": "ef947aa468ad108a3ae092de94ef84289bdada4a", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea5fe8b4002d15c8706749a3c43ed107c9a02f9/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea5fe8b4002d15c8706749a3c43ed107c9a02f9/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=4ea5fe8b4002d15c8706749a3c43ed107c9a02f9", "patch": "@@ -1100,7 +1100,7 @@ h8300_and_costs (rtx x)\n   operands[1] = XEXP (x, 0);\n   operands[2] = XEXP (x, 1);\n   operands[3] = x;\n-  return compute_logical_op_length (GET_MODE (x), operands) / 2;\n+  return compute_logical_op_length (GET_MODE (x), AND, operands) / 2;\n }\n \n /* Compute the cost of a shift insn.  */\n@@ -1119,7 +1119,7 @@ h8300_shift_costs (rtx x)\n   operands[1] = NULL;\n   operands[2] = XEXP (x, 1);\n   operands[3] = x;\n-  return compute_a_shift_length (NULL, operands) / 2;\n+  return compute_a_shift_length (operands) / 2;\n }\n \n /* Worker function for TARGET_RTX_COSTS.  */\n@@ -2879,10 +2879,8 @@ compute_plussi_cc (rtx *operands)\n /* Output a logical insn.  */\n \n const char *\n-output_logical_op (machine_mode mode, rtx *operands)\n+output_logical_op (machine_mode mode, rtx_code code, rtx *operands)\n {\n-  /* Figure out the logical op that we need to perform.  */\n-  enum rtx_code code = GET_CODE (operands[3]);\n   /* Pretend that every byte is affected if both operands are registers.  */\n   const unsigned HOST_WIDE_INT intval =\n     (unsigned HOST_WIDE_INT) ((GET_CODE (operands[2]) == CONST_INT)\n@@ -2923,6 +2921,10 @@ output_logical_op (machine_mode mode, rtx *operands)\n \n   switch (mode)\n     {\n+    case E_QImode:\n+      sprintf (insn_buf, \"%s.b\\t%%X2,%%X0\", opname);\n+      output_asm_insn (insn_buf, operands);\n+      break;\n     case E_HImode:\n       /* First, see if we can finish with one insn.  */\n       if (b0 != 0 && b1 != 0)\n@@ -3033,10 +3035,8 @@ output_logical_op (machine_mode mode, rtx *operands)\n /* Compute the length of a logical insn.  */\n \n unsigned int\n-compute_logical_op_length (machine_mode mode, rtx *operands)\n+compute_logical_op_length (machine_mode mode, rtx_code code, rtx *operands)\n {\n-  /* Figure out the logical op that we need to perform.  */\n-  enum rtx_code code = GET_CODE (operands[3]);\n   /* Pretend that every byte is affected if both operands are registers.  */\n   const unsigned HOST_WIDE_INT intval =\n     (unsigned HOST_WIDE_INT) ((GET_CODE (operands[2]) == CONST_INT)\n@@ -3061,6 +3061,9 @@ compute_logical_op_length (machine_mode mode, rtx *operands)\n \n   switch (mode)\n     {\n+    case E_QImode:\n+      return 2;\n+\n     case E_HImode:\n       /* First, see if we can finish with one insn.  */\n       if (b0 != 0 && b1 != 0)\n@@ -4189,7 +4192,7 @@ h8300_asm_insn_count (const char *templ)\n /* Compute the length of a shift insn.  */\n \n unsigned int\n-compute_a_shift_length (rtx insn ATTRIBUTE_UNUSED, rtx *operands)\n+compute_a_shift_length (rtx *operands)\n {\n   rtx shift = operands[3];\n   machine_mode mode = GET_MODE (shift);"}, {"sha": "e596987a6a613a03d10a2feea1f25706d99cb9fd", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea5fe8b4002d15c8706749a3c43ed107c9a02f9/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea5fe8b4002d15c8706749a3c43ed107c9a02f9/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=4ea5fe8b4002d15c8706749a3c43ed107c9a02f9", "patch": "@@ -229,6 +229,8 @@\n \n (define_code_iterator shifts [ashift ashiftrt lshiftrt])\n \n+(define_code_iterator logicals [ior xor and])\n+\n (define_code_iterator ors [ior xor])\n \f\n (include \"movepush.md\")"}, {"sha": "d778d24c580f757c51ff22d24427c83a07e89139", "filename": "gcc/config/h8300/logical.md", "status": "modified", "additions": 32, "deletions": 45, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea5fe8b4002d15c8706749a3c43ed107c9a02f9/gcc%2Fconfig%2Fh8300%2Flogical.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea5fe8b4002d15c8706749a3c43ed107c9a02f9/gcc%2Fconfig%2Fh8300%2Flogical.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Flogical.md?ref=4ea5fe8b4002d15c8706749a3c43ed107c9a02f9", "patch": "@@ -1,11 +1,20 @@\n+;; Generic for binary logicals across the supported integer modes\n+(define_expand \"<code><mode>3\"\n+  [(set (match_operand:QHSI 0 \"register_operand\" \"\")\n+\t(logicals:QHSI (match_operand:QHSI 1 \"register_operand\" \"\")\n+\t\t       (match_operand:QHSI 2 \"h8300_src_operand\" \"\")))]\n+  \"\"\n+  \"\")\n+\n+;; There's a ton of cleanup to do from here below.\n ;; ----------------------------------------------------------------------\n ;; AND INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n \n-(define_insn \"bclrqi_msx\"\n-  [(set (match_operand:QI 0 \"bit_register_indirect_operand\" \"=WU\")\n-\t(and:QI (match_operand:QI 1 \"bit_register_indirect_operand\" \"%0\")\n-\t\t(match_operand:QI 2 \"single_zero_operand\" \"Y0\")))]\n+(define_insn \"bclr<mode>_msx\"\n+  [(set (match_operand:QHI 0 \"bit_register_indirect_operand\" \"=WU\")\n+\t(and:QHI (match_operand:QHI 1 \"bit_register_indirect_operand\" \"%0\")\n+\t\t (match_operand:QHI 2 \"single_zero_operand\" \"Y0\")))]\n   \"TARGET_H8300SX && rtx_equal_p (operands[0], operands[1])\"\n   \"bclr\\\\t%W2,%0\"\n   [(set_attr \"length\" \"8\")])\n@@ -24,21 +33,13 @@\n     operands[2] = GEN_INT ((INTVAL (operands[2])) >> 8);\n   })\n \n-(define_insn \"bclrhi_msx\"\n-  [(set (match_operand:HI 0 \"bit_register_indirect_operand\" \"=m\")\n-\t(and:HI (match_operand:HI 1 \"bit_register_indirect_operand\" \"%0\")\n-\t\t(match_operand:HI 2 \"single_zero_operand\" \"Y0\")))]\n-  \"TARGET_H8300SX\"\n-  \"bclr\\\\t%W2,%0\"\n-  [(set_attr \"length\" \"8\")])\n-\n (define_insn_and_split \"*andqi3_2\"\n   [(set (match_operand:QI 0 \"bit_operand\" \"=U,rQ,r\")\n \t(and:QI (match_operand:QI 1 \"bit_operand\" \"%0,0,WU\")\n \t\t(match_operand:QI 2 \"h8300_src_operand\" \"Y0,rQi,IP1>X\")))]\n   \"TARGET_H8300SX\"\n   \"#\"\n-  \"reload_completed\"\n+  \"&& reload_completed\"\n   [(parallel [(set (match_dup 0) (and:QI (match_dup 1) (match_dup 2)))\n \t      (clobber (reg:CC CC_REG))])])\n \n@@ -62,7 +63,7 @@\n   \"register_operand (operands[0], QImode)\n    || single_zero_operand (operands[2], QImode)\"\n   \"#\"\n-  \"reload_completed\"\n+  \"&& reload_completed\"\n   [(parallel [(set (match_dup 0) (and:QI (match_dup 1) (match_dup 2)))\n \t      (clobber (reg:CC CC_REG))])])\n \n@@ -78,13 +79,6 @@\n    and  %X2,%X0\"\n   [(set_attr \"length\" \"2,8\")])\n \n-(define_expand \"and<mode>3\"\n-  [(set (match_operand:QHSI 0 \"register_operand\" \"\")\n-\t(and:QHSI (match_operand:QHSI 1 \"register_operand\" \"\")\n-\t\t  (match_operand:QHSI 2 \"h8300_src_operand\" \"\")))]\n-  \"\"\n-  \"\")\n-\n (define_insn_and_split \"*andor<mode>3\"\n   [(set (match_operand:QHSI 0 \"register_operand\" \"=r\")\n \t(ior:QHSI (and:QHSI (match_operand:QHSI 2 \"register_operand\" \"r\")\n@@ -95,7 +89,7 @@\n     || (<MODE>mode == SImode\n \t&& (INTVAL (operands[3]) & 0xffff) != 0))\"\n   \"#\"\n-  \"reload_completed\"\n+  \"&& reload_completed\"\n   [(parallel [(set (match_dup 0) (ior:QHSI (and:QHSI (match_dup 2)\n \t\t\t\t\t\t     (match_dup 3))\n \t\t\t\t\t   (match_dup 1)))\n@@ -150,7 +144,7 @@\n \t\t(match_operand:SI 1 \"register_operand\" \"0\")))]\n   \"\"\n   \"#\"\n-  \"reload_completed\"\n+  \"&& reload_completed\"\n   [(parallel [(set (match_dup 0) (ior:SI (and:SI (ashift:SI (match_dup 2)\n \t\t\t\t\t\t\t    (const_int 8))\n \t\t\t\t\t\t (const_int 65280))\n@@ -195,7 +189,7 @@\n   \"TARGET_H8300SX || register_operand (operands[0], QImode)\n    || single_one_operand (operands[2], QImode)\"\n   \"#\"\n-  \"reload_completed\"\n+  \"&& reload_completed\"\n   [(parallel [(set (match_dup 0) (ors:QI (match_dup 1) (match_dup 2)))\n \t      (clobber (reg:CC CC_REG))])])\n \n@@ -216,39 +210,32 @@\n   [(set_attr \"length\" \"8,*\")\n    (set_attr \"length_table\" \"*,logicb\")])\n \n-(define_expand \"<code><mode>3\"\n-  [(set (match_operand:QHSI 0 \"register_operand\" \"\")\n-\t(ors:QHSI (match_operand:QHSI 1 \"register_operand\" \"\")\n-\t\t  (match_operand:QHSI 2 \"h8300_src_operand\" \"\")))]\n-  \"\"\n-  \"\")\n-\n ;; ----------------------------------------------------------------------\n ;; {AND,IOR,XOR}{HI3,SI3} PATTERNS\n ;; ----------------------------------------------------------------------\n \n (define_insn_and_split \"*logical<mode>3\"\n-  [(set (match_operand:HSI 0 \"h8300_dst_operand\" \"=rQ\")\n-\t(match_operator:HSI 3 \"bit_operator\"\n-\t  [(match_operand:HSI 1 \"h8300_dst_operand\" \"%0\")\n-\t   (match_operand:HSI 2 \"h8300_src_operand\" \"rQi\")]))]\n+  [(set (match_operand:QHSI 0 \"h8300_dst_operand\" \"=rQ\")\n+\t(logicals:QHSI\n+\t  (match_operand:QHSI 1 \"h8300_dst_operand\" \"%0\")\n+\t  (match_operand:QHSI 2 \"h8300_src_operand\" \"rQi\")))]\n   \"h8300_operands_match_p (operands)\"\n   \"#\"\n-  \"reload_completed\"\n+  \"&& reload_completed\"\n   [(parallel [(set (match_dup 0)\n \t\t   (match_op_dup 3 [(match_dup 1) (match_dup 2)]))\n \t      (clobber (reg:CC CC_REG))])])\n \n-(define_insn \"*logical<mode>3_clobber_flags\"\n-  [(set (match_operand:HSI 0 \"h8300_dst_operand\" \"=rQ\")\n-\t(match_operator:HSI 3 \"bit_operator\"\n-\t  [(match_operand:HSI 1 \"h8300_dst_operand\" \"%0\")\n-\t   (match_operand:HSI 2 \"h8300_src_operand\" \"rQi\")]))\n+(define_insn \"*<code><mode>3_clobber_flags\"\n+  [(set (match_operand:QHSI 0 \"h8300_dst_operand\" \"=rQ\")\n+\t(logicals:QHSI\n+\t  (match_operand:QHSI 1 \"h8300_dst_operand\" \"%0\")\n+\t  (match_operand:QHSI 2 \"h8300_src_operand\" \"rQi\")))\n    (clobber (reg:CC CC_REG))]\n   \"h8300_operands_match_p (operands)\"\n-  { return output_logical_op (<MODE>mode, operands); }\n+  { return output_logical_op (<MODE>mode, <CODE>, operands); }\n   [(set (attr \"length\")\n-\t(symbol_ref \"compute_logical_op_length (<MODE>mode, operands)\"))])\n+\t(symbol_ref \"compute_logical_op_length (<MODE>mode, <CODE>, operands)\"))])\n \n \f\n ;; ----------------------------------------------------------------------\n@@ -260,11 +247,11 @@\n \t(not:QHSI (match_operand:QHSI 1 \"h8300_dst_operand\" \"0\")))]\n   \"\"\n   \"#\"\n-  \"reload_completed\"\n+  \"&& reload_completed\"\n   [(parallel [(set (match_dup 0) (not:QHSI (match_dup 1)))\n \t      (clobber (reg:CC CC_REG))])])\n \n-(define_insn \"one_cmpl<mode>2_clobber_flags\"\n+(define_insn \"one_cmpl<mode>2_<cczn>\"\n   [(set (match_operand:QHSI 0 \"h8300_dst_operand\" \"=rQ\")\n \t(not:QHSI (match_operand:QHSI 1 \"h8300_dst_operand\" \"0\")))\n    (clobber (reg:CC CC_REG))]"}, {"sha": "4bf8fe14e0ba05f2939e8c1c2f0633c45e728650", "filename": "gcc/config/h8300/shiftrotate.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea5fe8b4002d15c8706749a3c43ed107c9a02f9/gcc%2Fconfig%2Fh8300%2Fshiftrotate.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea5fe8b4002d15c8706749a3c43ed107c9a02f9/gcc%2Fconfig%2Fh8300%2Fshiftrotate.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fshiftrotate.md?ref=4ea5fe8b4002d15c8706749a3c43ed107c9a02f9", "patch": "@@ -175,7 +175,7 @@\n   return output_a_shift (operands);\n }\n   [(set (attr \"length\")\n-\t(symbol_ref \"compute_a_shift_length (insn, operands)\"))])\n+\t(symbol_ref \"compute_a_shift_length (operands)\"))])\n \n (define_insn_and_split \"*shiftqi_noscratch\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n@@ -203,7 +203,7 @@\n   return output_a_shift (operands);\n }\n   [(set (attr \"length\")\n-\t(symbol_ref \"compute_a_shift_length (insn, operands)\"))])\n+\t(symbol_ref \"compute_a_shift_length (operands)\"))])\n \n (define_insn_and_split \"*shifthi\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n@@ -230,7 +230,7 @@\n   return output_a_shift (operands);\n }\n   [(set (attr \"length\")\n-\t(symbol_ref \"compute_a_shift_length (insn, operands)\"))])\n+\t(symbol_ref \"compute_a_shift_length (operands)\"))])\n \n (define_insn_and_split \"*shifthi_noscratch\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n@@ -258,7 +258,7 @@\n   return output_a_shift (operands);\n }\n   [(set (attr \"length\")\n-\t(symbol_ref \"compute_a_shift_length (insn, operands)\"))])\n+\t(symbol_ref \"compute_a_shift_length (operands)\"))])\n \n (define_insn_and_split \"*shiftsi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -285,7 +285,7 @@\n   return output_a_shift (operands);\n }\n   [(set (attr \"length\")\n-\t(symbol_ref \"compute_a_shift_length (insn, operands)\"))])\n+\t(symbol_ref \"compute_a_shift_length (operands)\"))])\n \n (define_insn_and_split \"*shiftsi_noscratch\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -313,7 +313,7 @@\n   return output_a_shift (operands);\n }\n   [(set (attr \"length\")\n-\t(symbol_ref \"compute_a_shift_length (insn, operands)\"))])\n+\t(symbol_ref \"compute_a_shift_length (operands)\"))])\n \n ;; Split a variable shift into a loop.  If the register containing\n ;; the shift count dies, then we just use that register."}]}