{"sha": "e296c00c3209450305f5cf270d9cba03cba38a1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI5NmMwMGMzMjA5NDUwMzA1ZjVjZjI3MGQ5Y2JhMDNjYmEzOGExYw==", "commit": {"author": {"name": "David Ung", "email": "davidu@mips.com", "date": "2005-08-26T13:15:14Z"}, "committer": {"name": "David Ung", "email": "davidu@gcc.gnu.org", "date": "2005-08-26T13:15:14Z"}, "message": "mips.c (mips_expand_prologue): Handle case when generating for MIPS16 and the outgoing argument area is more...\n\n* config/mips/mips.c (mips_expand_prologue): Handle case when\ngenerating for MIPS16 and the outgoing argument area is more than\nSMALL_OPERAND. Use the frame pointer as temporary to generate the\nadd instruction.\n\nFrom-SVN: r103519", "tree": {"sha": "0bf450f5cec56c1f9e4430e0790f0a3395d7b449", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bf450f5cec56c1f9e4430e0790f0a3395d7b449"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e296c00c3209450305f5cf270d9cba03cba38a1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e296c00c3209450305f5cf270d9cba03cba38a1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e296c00c3209450305f5cf270d9cba03cba38a1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e296c00c3209450305f5cf270d9cba03cba38a1c/comments", "author": null, "committer": null, "parents": [{"sha": "55d61dbaccbb0d9bf0c758f7819fd062b29c68c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55d61dbaccbb0d9bf0c758f7819fd062b29c68c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55d61dbaccbb0d9bf0c758f7819fd062b29c68c3"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "4cf749a45470354799d39fb6e9d0fada16534196", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e296c00c3209450305f5cf270d9cba03cba38a1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e296c00c3209450305f5cf270d9cba03cba38a1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e296c00c3209450305f5cf270d9cba03cba38a1c", "patch": "@@ -1,3 +1,10 @@\n+2005-08-26  David Ung  <davidu@mips.com>\n+\n+\t* config/mips/mips.c (mips_expand_prologue): Handle case when\n+\tgenerating for MIPS16 and the outgoing argument area is more than\n+\tSMALL_OPERAND. Use the frame pointer as temporary to generate the\n+\tadd instruction.\n+\n 2005-08-26  Paul Woegerer  <paul.woegerer@nsc.com>\n \n \t* config/crx/crx.md: Make doloop_end pattern usage controllable"}, {"sha": "154ec302afad433d6cec77d795e907f1f433326e", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e296c00c3209450305f5cf270d9cba03cba38a1c/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e296c00c3209450305f5cf270d9cba03cba38a1c/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=e296c00c3209450305f5cf270d9cba03cba38a1c", "patch": "@@ -6736,10 +6736,23 @@ mips_expand_prologue (void)\n       if (TARGET_MIPS16 && cfun->machine->frame.args_size != 0)\n \t{\n \t  rtx offset = GEN_INT (cfun->machine->frame.args_size);\n-\t  RTX_FRAME_RELATED_P\n-\t    (emit_insn (gen_add3_insn (hard_frame_pointer_rtx,\n-\t\t\t\t       stack_pointer_rtx,\n-\t\t\t\t       offset))) = 1;\n+\t  if (SMALL_OPERAND (cfun->machine->frame.args_size))\n+\t    RTX_FRAME_RELATED_P \n+\t      (emit_insn (gen_add3_insn (hard_frame_pointer_rtx,\n+\t\t\t\t\t stack_pointer_rtx,\n+\t\t\t\t\t offset))) = 1;\n+\t  else\n+\t    {\n+\t      emit_move_insn (MIPS_PROLOGUE_TEMP (Pmode), offset);\n+\t      emit_move_insn (hard_frame_pointer_rtx, stack_pointer_rtx);\n+\t      emit_insn (gen_add3_insn (hard_frame_pointer_rtx,\n+\t\t\t\t\thard_frame_pointer_rtx,\n+\t\t\t\t\tMIPS_PROLOGUE_TEMP (Pmode)));\n+\t      mips_set_frame_expr\n+\t\t(gen_rtx_SET (VOIDmode, hard_frame_pointer_rtx,\n+\t\t\t      plus_constant (stack_pointer_rtx, \n+\t\t\t\t\t     cfun->machine->frame.args_size)));\n+\t    }\n \t}\n       else\n \tRTX_FRAME_RELATED_P (emit_move_insn (hard_frame_pointer_rtx,"}]}