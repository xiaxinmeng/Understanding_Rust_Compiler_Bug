{"sha": "ab2e8f01f1bc926ba403ea16f1663c95aa1a3c66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIyZThmMDFmMWJjOTI2YmE0MDNlYTE2ZjE2NjNjOTVhYTFhM2M2Ng==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-07-25T14:49:57Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-07-25T14:49:57Z"}, "message": "[AArch64][5/10] ARMv8.2-A FP16 lane vector intrinsics\n\ngcc/\n\t* config/aarch64/aarch64-simd.md (*aarch64_mulx_elt_to_64v2df): Rename to\n\t\"*aarch64_mulx_elt_from_dup<mode>\".\n\t(*aarch64_mul3_elt<mode>): Update schedule type.\n\t(*aarch64_mul3_elt_from_dup<mode>): Likewise.\n\t(*aarch64_fma4_elt_from_dup<mode>): Likewise.\n\t(*aarch64_fnma4_elt_from_dup<mode>): Likewise.\n\t* config/aarch64/iterators.md (VMUL): Supprt half precision float modes.\n\t(f, fp): Support HF modes.\n\t* config/aarch64/arm_neon.h (vfma_lane_f16, vfmaq_lane_f16,\n\tvfma_laneq_f16, vfmaq_laneq_f16, vfma_n_f16, vfmaq_n_f16, vfms_lane_f16,\n        vfmsq_lane_f16, vfms_laneq_f16, vfmsq_laneq_f16, vfms_n_f16,\n\tvfmsq_n_f16, vmul_lane_f16, vmulq_lane_f16, vmul_laneq_f16,\n\tvmulq_laneq_f16, vmul_n_f16, vmulq_n_f16, vmulx_lane_f16,\n\tvmulxq_lane_f16, vmulx_laneq_f16, vmulxq_laneq_f16): New.\n\nFrom-SVN: r238719", "tree": {"sha": "edb585c6d9bbaef6323ece41c3b3b8d226bdd120", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edb585c6d9bbaef6323ece41c3b3b8d226bdd120"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab2e8f01f1bc926ba403ea16f1663c95aa1a3c66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab2e8f01f1bc926ba403ea16f1663c95aa1a3c66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab2e8f01f1bc926ba403ea16f1663c95aa1a3c66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab2e8f01f1bc926ba403ea16f1663c95aa1a3c66/comments", "author": null, "committer": null, "parents": [{"sha": "89ed6d5f5e9207087bde180bb4ed2be8a8b39787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ed6d5f5e9207087bde180bb4ed2be8a8b39787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89ed6d5f5e9207087bde180bb4ed2be8a8b39787"}], "stats": {"total": 206, "additions": 190, "deletions": 16}, "files": [{"sha": "3481f752fc138c05e7003dd5e9204c1fe317a35f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab2e8f01f1bc926ba403ea16f1663c95aa1a3c66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab2e8f01f1bc926ba403ea16f1663c95aa1a3c66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab2e8f01f1bc926ba403ea16f1663c95aa1a3c66", "patch": "@@ -1,3 +1,20 @@\n+2016-07-25  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (*aarch64_mulx_elt_to_64v2df): Rename to\n+\t\"*aarch64_mulx_elt_from_dup<mode>\".\n+\t(*aarch64_mul3_elt<mode>): Update schedule type.\n+\t(*aarch64_mul3_elt_from_dup<mode>): Likewise.\n+\t(*aarch64_fma4_elt_from_dup<mode>): Likewise.\n+\t(*aarch64_fnma4_elt_from_dup<mode>): Likewise.\n+\t* config/aarch64/iterators.md (VMUL): Supprt half precision float modes.\n+\t(f, fp): Support HF modes.\n+\t* config/aarch64/arm_neon.h (vfma_lane_f16, vfmaq_lane_f16,\n+\tvfma_laneq_f16, vfmaq_laneq_f16, vfma_n_f16, vfmaq_n_f16, vfms_lane_f16,\n+        vfmsq_lane_f16, vfms_laneq_f16, vfmsq_laneq_f16, vfms_n_f16,\n+\tvfmsq_n_f16, vmul_lane_f16, vmulq_lane_f16, vmul_laneq_f16,\n+\tvmulq_laneq_f16, vmul_n_f16, vmulq_n_f16, vmulx_lane_f16,\n+\tvmulxq_lane_f16, vmulx_laneq_f16, vmulxq_laneq_f16): New.\n+\n 2016-07-25  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/aarch64-simd-builtins.def: Register new builtins."}, {"sha": "7d2e97f9f018077098b914a65aa4e60ce1cb397e", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab2e8f01f1bc926ba403ea16f1663c95aa1a3c66/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab2e8f01f1bc926ba403ea16f1663c95aa1a3c66/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=ab2e8f01f1bc926ba403ea16f1663c95aa1a3c66", "patch": "@@ -351,7 +351,7 @@\n     operands[2] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[2])));\n     return \"<f>mul\\\\t%0.<Vtype>, %3.<Vtype>, %1.<Vetype>[%2]\";\n   }\n-  [(set_attr \"type\" \"neon<fp>_mul_<Vetype>_scalar<q>\")]\n+  [(set_attr \"type\" \"neon<fp>_mul_<stype>_scalar<q>\")]\n )\n \n (define_insn \"*aarch64_mul3_elt_<vswap_width_name><mode>\"\n@@ -379,7 +379,7 @@\n       (match_operand:VMUL 2 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n   \"<f>mul\\t%0.<Vtype>, %2.<Vtype>, %1.<Vetype>[0]\";\n-  [(set_attr \"type\" \"neon<fp>_mul_<Vetype>_scalar<q>\")]\n+  [(set_attr \"type\" \"neon<fp>_mul_<stype>_scalar<q>\")]\n )\n \n (define_insn \"aarch64_rsqrte<mode>\"\n@@ -1634,7 +1634,7 @@\n       (match_operand:VMUL 3 \"register_operand\" \"0\")))]\n   \"TARGET_SIMD\"\n   \"fmla\\t%0.<Vtype>, %2.<Vtype>, %1.<Vetype>[0]\"\n-  [(set_attr \"type\" \"neon<fp>_mla_<Vetype>_scalar<q>\")]\n+  [(set_attr \"type\" \"neon<fp>_mla_<stype>_scalar<q>\")]\n )\n \n (define_insn \"*aarch64_fma4_elt_to_64v2df\"\n@@ -1712,7 +1712,7 @@\n       (match_operand:VMUL 3 \"register_operand\" \"0\")))]\n   \"TARGET_SIMD\"\n   \"fmls\\t%0.<Vtype>, %2.<Vtype>, %1.<Vetype>[0]\"\n-  [(set_attr \"type\" \"neon<fp>_mla_<Vetype>_scalar<q>\")]\n+  [(set_attr \"type\" \"neon<fp>_mla_<stype>_scalar<q>\")]\n )\n \n (define_insn \"*aarch64_fnma4_elt_to_64v2df\"\n@@ -3101,20 +3101,18 @@\n   [(set_attr \"type\" \"neon_fp_mul_<Vetype><q>\")]\n )\n \n-;; vmulxq_lane_f64\n+;; vmulxq_lane\n \n-(define_insn \"*aarch64_mulx_elt_to_64v2df\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=w\")\n-\t(unspec:V2DF\n-\t [(match_operand:V2DF 1 \"register_operand\" \"w\")\n-\t  (vec_duplicate:V2DF\n-\t    (match_operand:DF 2 \"register_operand\" \"w\"))]\n+(define_insn \"*aarch64_mulx_elt_from_dup<mode>\"\n+  [(set (match_operand:VHSDF 0 \"register_operand\" \"=w\")\n+\t(unspec:VHSDF\n+\t [(match_operand:VHSDF 1 \"register_operand\" \"w\")\n+\t  (vec_duplicate:VHSDF\n+\t    (match_operand:<VEL> 2 \"register_operand\" \"w\"))]\n \t UNSPEC_FMULX))]\n   \"TARGET_SIMD\"\n-  {\n-    return \"fmulx\\t%0.2d, %1.2d, %2.d[0]\";\n-  }\n-  [(set_attr \"type\" \"neon_fp_mul_d_scalar_q\")]\n+  \"fmulx\\t%0.<Vtype>, %1.<Vtype>, %2.<Vetype>[0]\";\n+  [(set_attr \"type\" \"neon<fp>_mul_<stype>_scalar<q>\")]\n )\n \n ;; vmulxs_lane_f32, vmulxs_laneq_f32"}, {"sha": "8b31e31d600601d023ecca99c322ae2fe03a3768", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab2e8f01f1bc926ba403ea16f1663c95aa1a3c66/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab2e8f01f1bc926ba403ea16f1663c95aa1a3c66/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=ab2e8f01f1bc926ba403ea16f1663c95aa1a3c66", "patch": "@@ -26773,6 +26773,160 @@ vfmsq_f16 (float16x8_t __a, float16x8_t __b, float16x8_t __c)\n   return __builtin_aarch64_fnmav8hf (__b, __c, __a);\n }\n \n+/* ARMv8.2-A FP16 lane vector intrinsics.  */\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vfma_lane_f16 (float16x4_t __a, float16x4_t __b,\n+\t       float16x4_t __c, const int __lane)\n+{\n+  return vfma_f16 (__a, __b, __aarch64_vdup_lane_f16 (__c, __lane));\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vfmaq_lane_f16 (float16x8_t __a, float16x8_t __b,\n+\t\tfloat16x4_t __c, const int __lane)\n+{\n+  return vfmaq_f16 (__a, __b, __aarch64_vdupq_lane_f16 (__c, __lane));\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vfma_laneq_f16 (float16x4_t __a, float16x4_t __b,\n+\t\tfloat16x8_t __c, const int __lane)\n+{\n+  return vfma_f16 (__a, __b, __aarch64_vdup_laneq_f16 (__c, __lane));\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vfmaq_laneq_f16 (float16x8_t __a, float16x8_t __b,\n+\t\t float16x8_t __c, const int __lane)\n+{\n+  return vfmaq_f16 (__a, __b, __aarch64_vdupq_laneq_f16 (__c, __lane));\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vfma_n_f16 (float16x4_t __a, float16x4_t __b, float16_t __c)\n+{\n+  return vfma_f16 (__a, __b, vdup_n_f16 (__c));\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vfmaq_n_f16 (float16x8_t __a, float16x8_t __b, float16_t __c)\n+{\n+  return vfmaq_f16 (__a, __b, vdupq_n_f16 (__c));\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vfms_lane_f16 (float16x4_t __a, float16x4_t __b,\n+\t       float16x4_t __c, const int __lane)\n+{\n+  return vfms_f16 (__a, __b, __aarch64_vdup_lane_f16 (__c, __lane));\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vfmsq_lane_f16 (float16x8_t __a, float16x8_t __b,\n+\t\tfloat16x4_t __c, const int __lane)\n+{\n+  return vfmsq_f16 (__a, __b, __aarch64_vdupq_lane_f16 (__c, __lane));\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vfms_laneq_f16 (float16x4_t __a, float16x4_t __b,\n+\t\tfloat16x8_t __c, const int __lane)\n+{\n+  return vfms_f16 (__a, __b, __aarch64_vdup_laneq_f16 (__c, __lane));\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vfmsq_laneq_f16 (float16x8_t __a, float16x8_t __b,\n+\t\t float16x8_t __c, const int __lane)\n+{\n+  return vfmsq_f16 (__a, __b, __aarch64_vdupq_laneq_f16 (__c, __lane));\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vfms_n_f16 (float16x4_t __a, float16x4_t __b, float16_t __c)\n+{\n+  return vfms_f16 (__a, __b, vdup_n_f16 (__c));\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vfmsq_n_f16 (float16x8_t __a, float16x8_t __b, float16_t __c)\n+{\n+  return vfmsq_f16 (__a, __b, vdupq_n_f16 (__c));\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vmul_lane_f16 (float16x4_t __a, float16x4_t __b, const int __lane)\n+{\n+  return vmul_f16 (__a, vdup_n_f16 (__aarch64_vget_lane_any (__b, __lane)));\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vmulq_lane_f16 (float16x8_t __a, float16x4_t __b, const int __lane)\n+{\n+  return vmulq_f16 (__a, vdupq_n_f16 (__aarch64_vget_lane_any (__b, __lane)));\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vmul_laneq_f16 (float16x4_t __a, float16x8_t __b, const int __lane)\n+{\n+  return vmul_f16 (__a, vdup_n_f16 (__aarch64_vget_lane_any (__b, __lane)));\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vmulq_laneq_f16 (float16x8_t __a, float16x8_t __b, const int __lane)\n+{\n+  return vmulq_f16 (__a, vdupq_n_f16 (__aarch64_vget_lane_any (__b, __lane)));\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vmul_n_f16 (float16x4_t __a, float16_t __b)\n+{\n+  return vmul_lane_f16 (__a, vdup_n_f16 (__b), 0);\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vmulq_n_f16 (float16x8_t __a, float16_t __b)\n+{\n+  return vmulq_laneq_f16 (__a, vdupq_n_f16 (__b), 0);\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vmulx_lane_f16 (float16x4_t __a, float16x4_t __b, const int __lane)\n+{\n+  return vmulx_f16 (__a, __aarch64_vdup_lane_f16 (__b, __lane));\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vmulxq_lane_f16 (float16x8_t __a, float16x4_t __b, const int __lane)\n+{\n+  return vmulxq_f16 (__a, __aarch64_vdupq_lane_f16 (__b, __lane));\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vmulx_laneq_f16 (float16x4_t __a, float16x8_t __b, const int __lane)\n+{\n+  return vmulx_f16 (__a, __aarch64_vdup_laneq_f16 (__b, __lane));\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vmulxq_laneq_f16 (float16x8_t __a, float16x8_t __b, const int __lane)\n+{\n+  return vmulxq_f16 (__a, __aarch64_vdupq_laneq_f16 (__b, __lane));\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vmulx_n_f16 (float16x4_t __a, float16_t __b)\n+{\n+  return vmulx_f16 (__a, vdup_n_f16 (__b));\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vmulxq_n_f16 (float16x8_t __a, float16_t __b)\n+{\n+  return vmulxq_f16 (__a, vdupq_n_f16 (__b));\n+}\n+\n #pragma GCC pop_options\n \n #undef __aarch64_vget_lane_any"}, {"sha": "8d4dc6cedd4ae6e39c2ef5a6f376cadcd34e9534", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab2e8f01f1bc926ba403ea16f1663c95aa1a3c66/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab2e8f01f1bc926ba403ea16f1663c95aa1a3c66/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=ab2e8f01f1bc926ba403ea16f1663c95aa1a3c66", "patch": "@@ -218,7 +218,10 @@\n (define_mode_iterator DX [DI DF])\n \n ;; Modes available for <f>mul lane operations.\n-(define_mode_iterator VMUL [V4HI V8HI V2SI V4SI V2SF V4SF V2DF])\n+(define_mode_iterator VMUL [V4HI V8HI V2SI V4SI\n+\t\t\t    (V4HF \"TARGET_SIMD_F16INST\")\n+\t\t\t    (V8HF \"TARGET_SIMD_F16INST\")\n+\t\t\t    V2SF V4SF V2DF])\n \n ;; Modes available for <f>mul lane operations changing lane count.\n (define_mode_iterator VMUL_CHANGE_NLANES [V4HI V8HI V2SI V4SI V2SF V4SF])\n@@ -730,6 +733,7 @@\n \t\t     (V4HI \"\")  (V8HI  \"\")\n \t\t     (V2SI \"\")  (V4SI  \"\")\n \t\t     (DI   \"\")  (V2DI  \"\")\n+\t\t     (V4HF \"f\") (V8HF  \"f\")\n \t\t     (V2SF \"f\") (V4SF  \"f\")\n \t\t     (V2DF \"f\") (DF    \"f\")])\n \n@@ -738,6 +742,7 @@\n \t\t      (V4HI \"\")  (V8HI  \"\")\n \t\t      (V2SI \"\")  (V4SI  \"\")\n \t\t      (DI   \"\")  (V2DI  \"\")\n+\t\t      (V4HF \"_fp\") (V8HF  \"_fp\")\n \t\t      (V2SF \"_fp\") (V4SF  \"_fp\")\n \t\t      (V2DF \"_fp\") (DF    \"_fp\")\n \t\t      (SF \"_fp\")])"}]}