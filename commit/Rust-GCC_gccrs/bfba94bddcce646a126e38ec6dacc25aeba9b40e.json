{"sha": "bfba94bddcce646a126e38ec6dacc25aeba9b40e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZiYTk0YmRkY2NlNjQ2YTEyNmUzOGVjNmRhY2MyNWFlYmE5YjQwZQ==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2002-03-01T13:50:28Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2002-03-01T13:50:28Z"}, "message": "typeck.c (cp_pointer_int_sum): Complete inner type which is used later by size_in_bytes().\n\n2002-03-01  Michael Matz  <matz@suse.de>\n\n        * typeck.c (cp_pointer_int_sum): Complete inner type which is\n        used later by size_in_bytes().\n\nFrom-SVN: r50197", "tree": {"sha": "5a9075bfe10e24374ff414ea4ccd0cf811c61b33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a9075bfe10e24374ff414ea4ccd0cf811c61b33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfba94bddcce646a126e38ec6dacc25aeba9b40e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfba94bddcce646a126e38ec6dacc25aeba9b40e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfba94bddcce646a126e38ec6dacc25aeba9b40e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfba94bddcce646a126e38ec6dacc25aeba9b40e/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b41a6f95b4ca5effb7857ab2bc897d645ebdc421", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b41a6f95b4ca5effb7857ab2bc897d645ebdc421", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b41a6f95b4ca5effb7857ab2bc897d645ebdc421"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "f1c25a4d4ff5b48da6921c52fbcf805c417f250e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfba94bddcce646a126e38ec6dacc25aeba9b40e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfba94bddcce646a126e38ec6dacc25aeba9b40e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bfba94bddcce646a126e38ec6dacc25aeba9b40e", "patch": "@@ -1,3 +1,8 @@\n+2002-03-01  Michael Matz  <matz@suse.de>\n+\n+\t* typeck.c (cp_pointer_int_sum): Complete inner type which is\n+\tused later by size_in_bytes().\n+\n 2002-03-01  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* cp-tree.h:  Require __GNUC__ to be #defined."}, {"sha": "e5f643c72d8d49a861c8feea03f386b8584d4bcb", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfba94bddcce646a126e38ec6dacc25aeba9b40e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfba94bddcce646a126e38ec6dacc25aeba9b40e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=bfba94bddcce646a126e38ec6dacc25aeba9b40e", "patch": "@@ -4076,8 +4076,14 @@ cp_pointer_int_sum (resultcode, ptrop, intop)\n      enum tree_code resultcode;\n      register tree ptrop, intop;\n {\n-  if (!complete_type_or_else (TREE_TYPE (ptrop), ptrop))\n-    return error_mark_node;\n+  tree res_type = TREE_TYPE (ptrop);\n+\n+  /* pointer_int_sum() uses size_in_bytes() on the TREE_TYPE(res_type)\n+     in certain circumstance (when it's valid to do so).  So we need\n+     to make sure it's complete.  We don't need to check here, if we\n+     can actually complete it at all, as those checks will be done in\n+     pointer_int_sum() anyway.  */\n+  complete_type (TREE_TYPE (res_type));\n \n   return pointer_int_sum (resultcode, ptrop, fold (intop));\n }"}]}