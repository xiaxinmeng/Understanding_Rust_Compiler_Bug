{"sha": "48679f6e244fdfb273d669ff02095ef0ffe3265f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg2NzlmNmUyNDRmZGZiMjczZDY2OWZmMDIwOTVlZjBmZmUzMjY1Zg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2012-08-31T13:48:37Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2012-08-31T13:48:37Z"}, "message": "ipa-inline-analysis.c (phi_result_unknown_predicate): New function.\n\n2012-08-31  Martin Jambor  <mjambor@suse.cz>\n\n\t* ipa-inline-analysis.c (phi_result_unknown_predicate): New function.\n\t(predicate_for_phi_result): Likewise.\n\t(estimate_function_body_sizes): Use the above two functions.\n\n\t* testsuite/gfortran.dg/pr48636.f90: Add dump scan checks.\n\nFrom-SVN: r190832", "tree": {"sha": "237d85e081f17a050ed81ade517a55c808bd9163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/237d85e081f17a050ed81ade517a55c808bd9163"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48679f6e244fdfb273d669ff02095ef0ffe3265f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48679f6e244fdfb273d669ff02095ef0ffe3265f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48679f6e244fdfb273d669ff02095ef0ffe3265f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48679f6e244fdfb273d669ff02095ef0ffe3265f/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "172e74fa37372711b121792b3405b32c862cf171", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/172e74fa37372711b121792b3405b32c862cf171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/172e74fa37372711b121792b3405b32c862cf171"}], "stats": {"total": 132, "additions": 130, "deletions": 2}, "files": [{"sha": "1797ff6e7f9bf0f76fd4dd7249135b3af190c499", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48679f6e244fdfb273d669ff02095ef0ffe3265f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48679f6e244fdfb273d669ff02095ef0ffe3265f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48679f6e244fdfb273d669ff02095ef0ffe3265f", "patch": "@@ -1,3 +1,9 @@\n+2012-08-31  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-inline-analysis.c (phi_result_unknown_predicate): New function.\n+\t(predicate_for_phi_result): Likewise.\n+\t(estimate_function_body_sizes): Use the above two functions.\n+\n 2012-08-31  Martin Jambor  <mjambor@suse.cz>\n \n \tPR middle-end/54394"}, {"sha": "6da256a614c625e521bfba03367cf005b445cb71", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 117, "deletions": 1, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48679f6e244fdfb273d669ff02095ef0ffe3265f/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48679f6e244fdfb273d669ff02095ef0ffe3265f/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=48679f6e244fdfb273d669ff02095ef0ffe3265f", "patch": "@@ -2070,6 +2070,99 @@ param_change_prob (gimple stmt, int i)\n   return REG_BR_PROB_BASE;\n }\n \n+/* Find whether a basic block BB is the final block of a (half) diamond CFG\n+   sub-graph and if the predicate the condition depends on is known.  If so,\n+   return true and store the pointer the predicate in *P.  */\n+\n+static bool\n+phi_result_unknown_predicate (struct ipa_node_params *info,\n+\t\t\t      struct inline_summary *summary, basic_block bb,\n+\t\t\t      struct predicate *p,\n+\t\t\t      VEC (predicate_t, heap) *nonconstant_names)\n+{\n+  edge e;\n+  edge_iterator ei;\n+  basic_block first_bb = NULL;\n+  gimple stmt;\n+\n+  if (single_pred_p (bb))\n+    {\n+      *p = false_predicate ();\n+      return true;\n+    }\n+\n+  FOR_EACH_EDGE (e, ei, bb->preds)\n+    {\n+      if (single_succ_p (e->src))\n+\t{\n+\t  if (!single_pred_p (e->src))\n+\t    return false;\n+\t  if (!first_bb)\n+\t    first_bb = single_pred (e->src);\n+\t  else if (single_pred (e->src) != first_bb)\n+\t    return false;\n+\t}\n+      else\n+\t{\n+\t  if (!first_bb)\n+\t    first_bb = e->src;\n+\t  else if (e->src != first_bb)\n+\t    return false;\n+\t}\n+    }\n+\n+  if (!first_bb)\n+    return false;\n+\n+  stmt = last_stmt (first_bb);\n+  if (!stmt\n+      || gimple_code (stmt) != GIMPLE_COND\n+      || !is_gimple_ip_invariant (gimple_cond_rhs (stmt)))\n+    return false;\n+\n+  *p = will_be_nonconstant_expr_predicate (info, summary,\n+\t\t\t\t\t   gimple_cond_lhs (stmt),\n+\t\t\t\t\t   nonconstant_names);\n+  if (true_predicate_p (p))\n+    return false;\n+  else\n+    return true;\n+}\n+\n+/* Given a PHI statement in a function described by inline properties SUMMARY\n+   and *P being the predicate describing whether the selected PHI argument is\n+   known, store a predicate for the result of the PHI statement into\n+   NONCONSTANT_NAMES, if possible.  */\n+\n+static void\n+predicate_for_phi_result (struct inline_summary *summary, gimple phi,\n+\t\t\t  struct predicate *p,\n+\t\t\t  VEC (predicate_t, heap) *nonconstant_names)\n+{\n+  unsigned i;\n+\n+  for (i = 0; i < gimple_phi_num_args (phi); i++)\n+    {\n+      tree arg = gimple_phi_arg (phi, i)->def;\n+      if (!is_gimple_min_invariant (arg))\n+\t{\n+\t  gcc_assert (TREE_CODE (arg) == SSA_NAME);\n+\t  *p = or_predicates (summary->conds, p,\n+\t\t\t      &VEC_index (predicate_t, nonconstant_names,\n+\t\t\t\t\t  SSA_NAME_VERSION (arg)));\n+\t  if (true_predicate_p (p))\n+\t    return;\n+\t}\n+    }\n+\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \"\\t\\tphi predicate: \");\n+      dump_predicate (dump_file, summary->conds, p);\n+    }\n+  VEC_replace (predicate_t, nonconstant_names,\n+\t       SSA_NAME_VERSION (gimple_phi_result (phi)), *p);\n+}\n \n /* Compute function body size parameters for NODE.\n    When EARLY is true, we compute only simple summaries without\n@@ -2143,7 +2236,30 @@ estimate_function_body_sizes (struct cgraph_node *node, bool early)\n \t  fprintf (dump_file, \"\\n BB %i predicate:\", bb->index);\n \t  dump_predicate (dump_file, info->conds, &bb_predicate);\n \t}\n-      \n+\n+      if (parms_info && nonconstant_names)\n+\t{\n+\t  struct predicate phi_predicate;\n+\t  bool first_phi = true;\n+\n+\t  for (bsi = gsi_start_phis (bb); !gsi_end_p (bsi); gsi_next (&bsi))\n+\t    {\n+\t      if (first_phi\n+\t\t  && !phi_result_unknown_predicate (parms_info, info, bb,\n+\t\t\t\t\t\t    &phi_predicate,\n+\t\t\t\t\t\t    nonconstant_names))\n+\t\tbreak;\n+\t      first_phi = false;\n+\t      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t{\n+\t\t  fprintf (dump_file, \"  \");\n+\t\t  print_gimple_stmt (dump_file, gsi_stmt (bsi), 0, 0);\n+\t\t}\n+\t      predicate_for_phi_result (info, gsi_stmt (bsi), &phi_predicate,\n+\t\t\t\t\tnonconstant_names);\n+\t    }\n+\t}\n+\n       for (bsi = gsi_start_bb (bb); !gsi_end_p (bsi); gsi_next (&bsi))\n \t{\n \t  gimple stmt = gsi_stmt (bsi);"}, {"sha": "937ba1a2f0b21b459bbd5d4dbf4a1641aba5b6da", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48679f6e244fdfb273d669ff02095ef0ffe3265f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48679f6e244fdfb273d669ff02095ef0ffe3265f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=48679f6e244fdfb273d669ff02095ef0ffe3265f", "patch": "@@ -1,3 +1,7 @@\n+2012-08-31  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* gfortran.dg/pr48636.f90: Add dump scan checks.\n+\n 2012-08-29  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* gcc.target/mips/mips.exp: Work out default -msynci setting."}, {"sha": "b60dcba47bd28a6c0a1ae520144f9ccca8eae799", "filename": "gcc/testsuite/gfortran.dg/pr48636.f90", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48679f6e244fdfb273d669ff02095ef0ffe3265f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr48636.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48679f6e244fdfb273d669ff02095ef0ffe3265f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr48636.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr48636.f90?ref=48679f6e244fdfb273d669ff02095ef0ffe3265f", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-O3 -fdump-ipa-inline\" }\n+! { dg-options \"-O3 -fdump-ipa-inline-details\" }\n \n module foo\n   implicit none\n@@ -34,4 +34,6 @@ program main\n end program main\n \n ! { dg-final { scan-ipa-dump \"bar\\[^\\\\n\\]*inline copy in MAIN\" \"inline\" } }\n+! { dg-final { scan-ipa-dump-times \"phi predicate:\" 5 \"inline\" } }\n+! { dg-final { scan-ipa-dump \"inline hints: loop_iterations\" \"inline\" } }\n ! { dg-final { cleanup-ipa-dump \"inline\" } }"}]}