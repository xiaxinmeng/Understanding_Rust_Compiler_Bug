{"sha": "a1fa0e6c8cd2d4d0eed56d85708b791a12426fb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFmYTBlNmM4Y2QyZDRkMGVlZDU2ZDg1NzA4Yjc5MWExMjQyNmZiOA==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-04-11T16:27:50Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-04-11T16:27:50Z"}, "message": "sh.h: Remove old secondary reload code.\n\n\t* config/sh/sh.h: Remove old secondary reload code.\n\nFrom-SVN: r186328", "tree": {"sha": "05d395dd9828d35edba4650c4c7d94b42e820848", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05d395dd9828d35edba4650c4c7d94b42e820848"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1fa0e6c8cd2d4d0eed56d85708b791a12426fb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1fa0e6c8cd2d4d0eed56d85708b791a12426fb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1fa0e6c8cd2d4d0eed56d85708b791a12426fb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1fa0e6c8cd2d4d0eed56d85708b791a12426fb8/comments", "author": null, "committer": null, "parents": [{"sha": "e6b8b8c7e86cfb74ca4991bb913b76ccdf04cf99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6b8b8c7e86cfb74ca4991bb913b76ccdf04cf99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6b8b8c7e86cfb74ca4991bb913b76ccdf04cf99"}], "stats": {"total": 78, "additions": 4, "deletions": 74}, "files": [{"sha": "a34804325fdb3e2752fcfa1ba7da06d2805e499e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1fa0e6c8cd2d4d0eed56d85708b791a12426fb8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1fa0e6c8cd2d4d0eed56d85708b791a12426fb8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a1fa0e6c8cd2d4d0eed56d85708b791a12426fb8", "patch": "@@ -1,3 +1,7 @@\n+2012-04-11  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/sh.h: Remove old secondary reload code.\n+\n 2012-04-11  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* config/sh/sh.c (SCHED_REORDER): Merge macro into ..."}, {"sha": "4bffbc76d8e08f3995950125d1da90290ec156d2", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1fa0e6c8cd2d4d0eed56d85708b791a12426fb8/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1fa0e6c8cd2d4d0eed56d85708b791a12426fb8/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=a1fa0e6c8cd2d4d0eed56d85708b791a12426fb8", "patch": "@@ -1216,80 +1216,6 @@ extern enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER];\n #define ZERO_EXTRACT_ANDMASK(EXTRACT_SZ_RTX, EXTRACT_POS_RTX)\\\n   (((1 << INTVAL (EXTRACT_SZ_RTX)) - 1) << INTVAL (EXTRACT_POS_RTX))\n \n-#if 0\n-#define SECONDARY_INOUT_RELOAD_CLASS(CLASS,MODE,X,ELSE) \\\n-  ((((REGCLASS_HAS_FP_REG (CLASS) \t\t\t\t\t\\\n-      && (REG_P (X)\t\t\t\t\t\t\t\\\n-      && (GENERAL_OR_AP_REGISTER_P (REGNO (X))\t\t\t\t\\\n-\t  || (FP_REGISTER_P (REGNO (X)) && (MODE) == SImode\t\t\\\n-\t      && TARGET_FMOVD))))\t\t\t\t\t\\\n-     || (REGCLASS_HAS_GENERAL_REG (CLASS) \t\t\t\t\\\n-\t && REG_P (X)\t\t\t\t\t\t\t\\\n-\t && FP_REGISTER_P (REGNO (X))))\t\t\t\t\t\\\n-    && ! TARGET_SHMEDIA\t\t\t\t\t\t\t\\\n-    && ((MODE) == SFmode || (MODE) == SImode))\t\t\t\t\\\n-   ? FPUL_REGS\t\t\t\t\t\t\t\t\\\n-   : (((CLASS) == FPUL_REGS\t\t\t\t\t\t\\\n-       || (REGCLASS_HAS_FP_REG (CLASS)\t\t\t\t\t\\\n-\t   && ! TARGET_SHMEDIA && MODE == SImode))\t\t\t\\\n-      && (MEM_P (X)\t\t\t\t\t\t\t\\\n-\t  || (REG_P (X)\t\t\t\t\t\t\t\\\n-\t      && (REGNO (X) >= FIRST_PSEUDO_REGISTER\t\t\t\\\n-\t\t  || REGNO (X) == T_REG\t\t\t\t\t\\\n-\t\t  || system_reg_operand (X, VOIDmode)))))\t\t\\\n-   ? GENERAL_REGS\t\t\t\t\t\t\t\\\n-   : (((CLASS) == TARGET_REGS\t\t\t\t\t\t\\\n-       || (TARGET_SHMEDIA && (CLASS) == SIBCALL_REGS))\t\t\t\\\n-      && !satisfies_constraint_Csy (X)\t\t\t\t\t\\\n-      && (!REG_P (X) || ! GENERAL_REGISTER_P (REGNO (X))))\t\t\\\n-   ? GENERAL_REGS\t\t\t\t\t\t\t\\\n-   : (((CLASS) == MAC_REGS || (CLASS) == PR_REGS)\t\t\t\\\n-      && REG_P (X) && ! GENERAL_REGISTER_P (REGNO (X))\t\t\t\\\n-      && (CLASS) != REGNO_REG_CLASS (REGNO (X)))\t\t\t\\\n-   ? GENERAL_REGS\t\t\t\t\t\t\t\\\n-   : ((CLASS) != GENERAL_REGS && REG_P (X)\t\t\t\t\\\n-      && TARGET_REGISTER_P (REGNO (X)))\t\t\t\t\t\\\n-   ? GENERAL_REGS : (ELSE))\n-\n-#define SECONDARY_OUTPUT_RELOAD_CLASS(CLASS,MODE,X) \\\n- SECONDARY_INOUT_RELOAD_CLASS(CLASS,MODE,X,NO_REGS)\n-\n-#define SECONDARY_INPUT_RELOAD_CLASS(CLASS,MODE,X)  \\\n-  ((REGCLASS_HAS_FP_REG (CLASS) \t\t\t\t\t\\\n-    && ! TARGET_SHMEDIA\t\t\t\t\t\t\t\\\n-    && immediate_operand ((X), (MODE))\t\t\t\t\t\\\n-    && ! ((fp_zero_operand (X) || fp_one_operand (X))\t\t\t\\\n-\t  && (MODE) == SFmode && fldi_ok ()))\t\t\t\t\\\n-   ? R0_REGS\t\t\t\t\t\t\t\t\\\n-   : ((CLASS) == FPUL_REGS\t\t\t\t\t\t\\\n-      && ((REG_P (X)\t\t\t\t\t\t\t\\\n-\t   && (REGNO (X) == MACL_REG || REGNO (X) == MACH_REG\t\t\\\n-\t       || REGNO (X) == T_REG))\t\t\t\t\t\\\n-\t  || GET_CODE (X) == PLUS))\t\t\t\t\t\\\n-   ? GENERAL_REGS\t\t\t\t\t\t\t\\\n-   : (CLASS) == FPUL_REGS && immediate_operand ((X), (MODE))\t\t\\\n-   ? (satisfies_constraint_I08 (X)\t\t\t\t\t\\\n-      ? GENERAL_REGS\t\t\t\t\t\t\t\\\n-      : R0_REGS)\t\t\t\t\t\t\t\\\n-   : ((CLASS) == FPSCR_REGS\t\t\t\t\t\t\\\n-      && ((REG_P (X) && REGNO (X) >= FIRST_PSEUDO_REGISTER)\t\t\\\n-\t  || (MEM_P (X) && GET_CODE (XEXP ((X), 0)) == PLUS)))\t\t\\\n-   ? GENERAL_REGS\t\t\t\t\t\t\t\\\n-   : (REGCLASS_HAS_FP_REG (CLASS) \t\t\t\t\t\\\n-      && TARGET_SHMEDIA\t\t\t\t\t\t\t\\\n-      && immediate_operand ((X), (MODE))\t\t\t\t\\\n-      && (X) != CONST0_RTX (GET_MODE (X))\t\t\t\t\\\n-      && GET_MODE (X) != V4SFmode)\t\t\t\t\t\\\n-   ? GENERAL_REGS\t\t\t\t\t\t\t\\\n-   : (((MODE) == QImode || (MODE) == HImode)\t\t\t\t\\\n-      && TARGET_SHMEDIA && inqhi_operand ((X), (MODE)))\t\t\t\\\n-   ? GENERAL_REGS\t\t\t\t\t\t\t\\\n-   : (TARGET_SHMEDIA && (CLASS) == GENERAL_REGS\t\t\t\t\\\n-      && (GET_CODE (X) == LABEL_REF || PIC_ADDR_P (X)))\t\t\t\\\n-   ? TARGET_REGS\t\t\t\t\t\t\t\\\n-   : SECONDARY_INOUT_RELOAD_CLASS((CLASS),(MODE),(X), NO_REGS))\n-#endif\n-\n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.\n "}]}