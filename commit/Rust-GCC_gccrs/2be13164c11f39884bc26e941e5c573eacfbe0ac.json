{"sha": "2be13164c11f39884bc26e941e5c573eacfbe0ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJlMTMxNjRjMTFmMzk4ODRiYzI2ZTk0MWU1YzU3M2VhY2ZiZTBhYw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-06-13T11:57:45Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-06-13T11:57:45Z"}, "message": "re PR fortran/53643 ([OOP] ICE (segfault) with INTENT(OUT) CLASS array)\n\n2012-06-13  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/53643\n        * trans-decl.c (init_intent_out_dt): Fix for polymorphic arrays.\n        * trans-array.c (structure_alloc_comps): Don't loop for\n        scalar coarrays.\n\n2012-06-13  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/53643\n        * gfortran.dg/intent_out_7.f90: New.\n\nFrom-SVN: r188507", "tree": {"sha": "67f38cbb38e172aaf0a78dd217acf0e35e5eea3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67f38cbb38e172aaf0a78dd217acf0e35e5eea3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2be13164c11f39884bc26e941e5c573eacfbe0ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be13164c11f39884bc26e941e5c573eacfbe0ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2be13164c11f39884bc26e941e5c573eacfbe0ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be13164c11f39884bc26e941e5c573eacfbe0ac/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d1f6dfe6fb26ad5bc8d7b7cd34199bd5a9cfe59a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f6dfe6fb26ad5bc8d7b7cd34199bd5a9cfe59a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1f6dfe6fb26ad5bc8d7b7cd34199bd5a9cfe59a"}], "stats": {"total": 53, "additions": 43, "deletions": 10}, "files": [{"sha": "27c06795313a11f8e21a3126b4e2379ea19aefbb", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be13164c11f39884bc26e941e5c573eacfbe0ac/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be13164c11f39884bc26e941e5c573eacfbe0ac/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2be13164c11f39884bc26e941e5c573eacfbe0ac", "patch": "@@ -1,3 +1,10 @@\n+2012-06-13  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/53643\n+\t* trans-decl.c (init_intent_out_dt): Fix for polymorphic arrays.\n+\t* trans-array.c (structure_alloc_comps): Don't loop for\n+\tscalar coarrays.\n+\n 2012-06-13  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/53597"}, {"sha": "0e782101a5418523a9de1b53cda4f30cba56760d", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be13164c11f39884bc26e941e5c573eacfbe0ac/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be13164c11f39884bc26e941e5c573eacfbe0ac/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=2be13164c11f39884bc26e941e5c573eacfbe0ac", "patch": "@@ -7318,17 +7318,15 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \n   if ((POINTER_TYPE_P (decl_type) && rank != 0)\n \t|| (TREE_CODE (decl_type) == REFERENCE_TYPE && rank == 0))\n-\n-    decl = build_fold_indirect_ref_loc (input_location,\n-\t\t\t\t    decl);\n+    decl = build_fold_indirect_ref_loc (input_location, decl);\n \n   /* Just in case in gets dereferenced.  */\n   decl_type = TREE_TYPE (decl);\n \n   /* If this an array of derived types with allocatable components\n      build a loop and recursively call this function.  */\n   if (TREE_CODE (decl_type) == ARRAY_TYPE\n-\t|| GFC_DESCRIPTOR_TYPE_P (decl_type))\n+      || (GFC_DESCRIPTOR_TYPE_P (decl_type) && rank != 0))\n     {\n       tmp = gfc_conv_array_data (decl);\n       var = build_fold_indirect_ref_loc (input_location,"}, {"sha": "75a21604cffcbe143ca9697de225a5aa924811af", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be13164c11f39884bc26e941e5c573eacfbe0ac/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be13164c11f39884bc26e941e5c573eacfbe0ac/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=2be13164c11f39884bc26e941e5c573eacfbe0ac", "patch": "@@ -3451,12 +3451,9 @@ init_intent_out_dt (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t     && !CLASS_DATA (f->sym)->attr.class_pointer\n \t     && CLASS_DATA (f->sym)->ts.u.derived->attr.alloc_comp)\n       {\n-\ttree decl = build_fold_indirect_ref_loc (input_location,\n-\t\t\t\t\t\t f->sym->backend_decl);\n-\ttmp = CLASS_DATA (f->sym)->backend_decl;\n-\ttmp = fold_build3_loc (input_location, COMPONENT_REF,\n-\t\t\t       TREE_TYPE (tmp), decl, tmp, NULL_TREE);\n-\ttmp = build_fold_indirect_ref_loc (input_location, tmp);\n+\ttmp = gfc_class_data_get (f->sym->backend_decl);\n+\tif (CLASS_DATA (f->sym)->as == NULL)\n+\t  tmp = build_fold_indirect_ref_loc (input_location, tmp);\n \ttmp = gfc_deallocate_alloc_comp (CLASS_DATA (f->sym)->ts.u.derived,\n \t\t\t\t\t tmp,\n \t\t\t\t\t CLASS_DATA (f->sym)->as ?"}, {"sha": "a8384ffc4ab13167e5ae850ab33156f40945e562", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be13164c11f39884bc26e941e5c573eacfbe0ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be13164c11f39884bc26e941e5c573eacfbe0ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2be13164c11f39884bc26e941e5c573eacfbe0ac", "patch": "@@ -1,3 +1,8 @@\n+2012-06-13  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/53643\n+\t* gfortran.dg/intent_out_7.f90: New.\n+\n 2012-06-13  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/53597"}, {"sha": "d75fff803dab0ff99b00dc36b4007b6ac9657404", "filename": "gcc/testsuite/gfortran.dg/intent_out_7.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be13164c11f39884bc26e941e5c573eacfbe0ac/gcc%2Ftestsuite%2Fgfortran.dg%2Fintent_out_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be13164c11f39884bc26e941e5c573eacfbe0ac/gcc%2Ftestsuite%2Fgfortran.dg%2Fintent_out_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintent_out_7.f90?ref=2be13164c11f39884bc26e941e5c573eacfbe0ac", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=single\" }\n+!\n+! PR fortran/53643\n+!\n+type t\n+ integer, allocatable :: comp\n+end type t\n+contains\n+ subroutine foo(x,y)\n+   class(t), allocatable, intent(out) :: x(:)\n+   class(t), intent(out) :: y(:)\n+ end subroutine\n+ subroutine foo2(x,y)\n+   class(t), allocatable, intent(out) :: x\n+   class(t), intent(out) :: y\n+ end subroutine\n+ subroutine bar(x,y)\n+   class(t), intent(out) :: x(:)[*]\n+   class(t), intent(out) :: y[*]\n+ end subroutine\n+ subroutine bar2(x,y)\n+   type(t), intent(out) :: x(:)[*]\n+   type(t), intent(out) :: y[*]\n+ end subroutine\n+end"}]}