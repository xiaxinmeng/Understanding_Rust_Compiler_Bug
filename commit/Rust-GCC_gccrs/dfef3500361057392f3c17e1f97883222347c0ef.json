{"sha": "dfef3500361057392f3c17e1f97883222347c0ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZlZjM1MDAzNjEwNTczOTJmM2MxN2UxZjk3ODgzMjIyMzQ3YzBlZg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2020-01-07T01:29:12Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2020-01-07T01:29:12Z"}, "message": "Add support for large prefixed address in adjusting a vector address.\n\n2020-01-06  Michael Meissner  <meissner@linux.ibm.com>\n\n\t* config/rs6000/rs6000.c (rs6000_adjust_vec_address): Add support\n\tfor the offset being 34-bits when -mcpu=future is used.\n\nFrom-SVN: r279937", "tree": {"sha": "d782b8feccc2ed88f557a605b8b722842eb92e46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d782b8feccc2ed88f557a605b8b722842eb92e46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfef3500361057392f3c17e1f97883222347c0ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfef3500361057392f3c17e1f97883222347c0ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfef3500361057392f3c17e1f97883222347c0ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfef3500361057392f3c17e1f97883222347c0ef/comments", "author": null, "committer": null, "parents": [{"sha": "665e3b214d89d7938a48f94e8e7fe71b749544b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/665e3b214d89d7938a48f94e8e7fe71b749544b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/665e3b214d89d7938a48f94e8e7fe71b749544b8"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "b2e6d8504b565cd98e34e89d9514b727f2d415fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfef3500361057392f3c17e1f97883222347c0ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfef3500361057392f3c17e1f97883222347c0ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfef3500361057392f3c17e1f97883222347c0ef", "patch": "@@ -1,3 +1,8 @@\n+2020-01-06  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_adjust_vec_address): Add support\n+\tfor the offset being 34-bits when -mcpu=future is used.\n+\n 2020-01-06  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/pa/pa.md: Revert change to use ordered_comparison_operator"}, {"sha": "64b40a474499604cf245ab267fd35de2197ea542", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfef3500361057392f3c17e1f97883222347c0ef/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfef3500361057392f3c17e1f97883222347c0ef/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=dfef3500361057392f3c17e1f97883222347c0ef", "patch": "@@ -6797,11 +6797,19 @@ rs6000_adjust_vec_address (rtx scalar_reg,\n \t  HOST_WIDE_INT offset = INTVAL (op1) + INTVAL (element_offset);\n \t  rtx offset_rtx = GEN_INT (offset);\n \n-\t  if (IN_RANGE (offset, -32768, 32767)\n+\t  /* 16-bit offset.  */\n+\t  if (SIGNED_INTEGER_16BIT_P (offset)\n \t      && (scalar_size < 8 || (offset & 0x3) == 0))\n \t    new_addr = gen_rtx_PLUS (Pmode, op0, offset_rtx);\n+\n+\t  /* 34-bit offset if we have prefixed addresses.  */\n+\t  else if (TARGET_PREFIXED_ADDR && SIGNED_INTEGER_34BIT_P (offset))\n+\t    new_addr = gen_rtx_PLUS (Pmode, op0, offset_rtx);\n+\n \t  else\n \t    {\n+\t      /* Offset overflowed, move offset to the temporary (which will\n+\t\t likely be split), and do X-FORM addressing.  */\n \t      emit_move_insn (base_tmp, offset_rtx);\n \t      new_addr = gen_rtx_PLUS (Pmode, op0, base_tmp);\n \t    }\n@@ -6830,6 +6838,12 @@ rs6000_adjust_vec_address (rtx scalar_reg,\n \t      emit_insn (insn);\n \t    }\n \n+\t  /* Make sure we don't overwrite the temporary if the element being\n+\t     extracted is variable, and we've put the offset into base_tmp\n+\t     previously.  */\n+\t  else if (reg_mentioned_p (base_tmp, element_offset))\n+\t    emit_insn (gen_add2_insn (base_tmp, op1));\n+\n \t  else\n \t    {\n \t      emit_move_insn (base_tmp, op1);"}]}