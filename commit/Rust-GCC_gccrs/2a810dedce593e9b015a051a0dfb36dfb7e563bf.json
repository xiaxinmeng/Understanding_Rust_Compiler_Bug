{"sha": "2a810dedce593e9b015a051a0dfb36dfb7e563bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE4MTBkZWRjZTU5M2U5YjAxNWEwNTFhMGRmYjM2ZGZiN2U1NjNiZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2016-12-15T19:50:25Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2016-12-15T19:50:25Z"}, "message": "re PR c++/77585 (g++ incorrectly decides that member function is called without object in generic lambda)\n\n\tPR c++/77585\n\t* pt.c (instantiate_decl): Push to class scope lambda resides\n\twithin when instantiating a generic lambda function.\n\n\tPR c++/77585\n\t* g++.dg/cpp1y/pr77585.C: New.\n\nFrom-SVN: r243723", "tree": {"sha": "766e2803161094e7b8b634270c752d10caec7d52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/766e2803161094e7b8b634270c752d10caec7d52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a810dedce593e9b015a051a0dfb36dfb7e563bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a810dedce593e9b015a051a0dfb36dfb7e563bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a810dedce593e9b015a051a0dfb36dfb7e563bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a810dedce593e9b015a051a0dfb36dfb7e563bf/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a3998c2fb1630638db83defcd2c680111d65b973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3998c2fb1630638db83defcd2c680111d65b973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3998c2fb1630638db83defcd2c680111d65b973"}], "stats": {"total": 73, "additions": 72, "deletions": 1}, "files": [{"sha": "9c6ee489689126bcadecf949d2dd0fdaed296a0b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a810dedce593e9b015a051a0dfb36dfb7e563bf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a810dedce593e9b015a051a0dfb36dfb7e563bf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2a810dedce593e9b015a051a0dfb36dfb7e563bf", "patch": "@@ -1,3 +1,9 @@\n+2016-12-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/77585\n+\t* pt.c (instantiate_decl): Push to class scope lambda resides\n+\twithin when instantiating a generic lambda function.\n+\n 2016-12-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/78774"}, {"sha": "91178eae80b382d277751c67252ad17ae05be7ba", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a810dedce593e9b015a051a0dfb36dfb7e563bf/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a810dedce593e9b015a051a0dfb36dfb7e563bf/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2a810dedce593e9b015a051a0dfb36dfb7e563bf", "patch": "@@ -22484,6 +22484,7 @@ instantiate_decl (tree d, int defer_ok,\n       tree tmpl_parm;\n       tree spec_parm;\n       tree block = NULL_TREE;\n+      tree lambda_ctx = NULL_TREE;\n \n       /* Save away the current list, in case we are instantiating one\n \t template from within the body of another.  */\n@@ -22497,7 +22498,23 @@ instantiate_decl (tree d, int defer_ok,\n \t  && TREE_CODE (DECL_CONTEXT (code_pattern)) == FUNCTION_DECL)\n \tblock = push_stmt_list ();\n       else\n-\tstart_preparsed_function (d, NULL_TREE, SF_PRE_PARSED);\n+\t{\n+\t  if (LAMBDA_FUNCTION_P (d))\n+\t    {\n+\t      /* When instantiating a lambda's templated function\n+\t\t operator, we need to push the non-lambda class scope\n+\t\t of the lambda itself so that the nested function\n+\t\t stack is sufficiently correct to deal with this\n+\t\t capture.  */\n+\t      lambda_ctx = DECL_CONTEXT (d);\n+\t      do \n+\t\tlambda_ctx = decl_type_context (TYPE_NAME (lambda_ctx));\n+\t      while (lambda_ctx && LAMBDA_TYPE_P (lambda_ctx));\n+\t      if (lambda_ctx)\n+\t\tpush_nested_class (lambda_ctx);\n+\t    }\n+\t  start_preparsed_function (d, NULL_TREE, SF_PRE_PARSED);\n+\t}\n \n       /* Some typedefs referenced from within the template code need to be\n \t access checked at template instantiation time, i.e now. These\n@@ -22565,6 +22582,8 @@ instantiate_decl (tree d, int defer_ok,\n \t  d = finish_function (0);\n \t  expand_or_defer_fn (d);\n \t}\n+      if (lambda_ctx)\n+\tpop_nested_class ();\n \n       if (DECL_OMP_DECLARE_REDUCTION_P (code_pattern))\n \tcp_check_omp_declare_reduction (d);"}, {"sha": "ac49d4d71c031662db2e92a9de8d2cc6d3be89d7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a810dedce593e9b015a051a0dfb36dfb7e563bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a810dedce593e9b015a051a0dfb36dfb7e563bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2a810dedce593e9b015a051a0dfb36dfb7e563bf", "patch": "@@ -1,3 +1,8 @@\n+2016-12-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/77585\n+\t* g++.dg/cpp1y/pr77585.C: New.\n+\n 2016-12-15  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* gcc.dg/tree-ssa/ssa-fre-55.c: Add -Wno-psabi."}, {"sha": "aff7a61273f79ed9cc281ac1007fa749b1718265", "filename": "gcc/testsuite/g++.dg/cpp1y/pr77585.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a810dedce593e9b015a051a0dfb36dfb7e563bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr77585.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a810dedce593e9b015a051a0dfb36dfb7e563bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr77585.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr77585.C?ref=2a810dedce593e9b015a051a0dfb36dfb7e563bf", "patch": "@@ -0,0 +1,41 @@\n+// PR c++/77585\n+// { dg-do run { target c++14 } }\n+\n+// Confusion about this capture when instantiating generic lambda's\n+// function operator\n+\n+template <typename F> int Eat (F &&f) { return f (1); }\n+\n+struct Foo {\n+  int x = 1;\n+  int Share () { return x++; }\n+  int Frob (int);\n+};\n+\n+int Foo::Frob (int r)\n+{\n+  auto lam = [&](auto) { return Share (); };\n+  r += Eat (lam);\n+\n+  auto lam0 = [&](auto) {\n+    auto lam1 = [&](auto) { return Share (); };\n+    return Eat (lam1); };\n+  r += Eat (lam0);\n+\n+  return r;\n+}\n+\n+int Frob (int r) \n+{\n+  auto lam = [&](auto) { return 1; };\n+  r += Eat (lam);\n+  return r;\n+}\n+\n+\n+int main ()\n+{\n+  Foo f;\n+  \n+  return Frob (f.Frob (0)) == 4 ? 0 : 1;\n+}"}]}