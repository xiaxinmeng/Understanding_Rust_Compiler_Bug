{"sha": "85a3442c85aedb00c59e986f16cccbb8ec60d777", "node_id": "C_kwDOANBUbNoAKDg1YTM0NDJjODVhZWRiMDBjNTllOTg2ZjE2Y2NjYmI4ZWM2MGQ3Nzc", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2022-01-05T02:18:13Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2022-01-05T17:02:22Z"}, "message": "Fortran: Fix ICE caused by missing error for untyped symbol [PR103258]\n\nThe bit on a symbol to mark that it had already been diagnosed as\nlacking a type was getting set even when the error was suppressed or\ndiscarded, specifically when doing early resolution on a character\nlength expression to see if it can be constant-folded.  Explicitly\nsuppress errors before doing that, then check whether they are\nsuppressed before setting the bit.\n\n2022-01-04  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tPR fortran/103258\n\n\tgcc/fortran/\n\t* decl.c (gfc_match_char_spec): Suppress errors around call\n\tto gfc_reduce_init_expr.\n\t* error.c (gfc_query_suppress_errors): New.\n\t* gfortran.h (gfc_query_suppress_errors): Declare.\n\t* symbol.c (gfc_set_default_type): Check gfc_query_suppress_errors.\n\n\tgcc/testsuite/\n\t* gfortran.dg/pr103258.f90: New.", "tree": {"sha": "2ad4990645d1b6927b0dc72f749b9fa41b35dc14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ad4990645d1b6927b0dc72f749b9fa41b35dc14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85a3442c85aedb00c59e986f16cccbb8ec60d777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a3442c85aedb00c59e986f16cccbb8ec60d777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85a3442c85aedb00c59e986f16cccbb8ec60d777", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a3442c85aedb00c59e986f16cccbb8ec60d777/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6aa0859afaf28f4fb13121352225bc5877e02a44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa0859afaf28f4fb13121352225bc5877e02a44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aa0859afaf28f4fb13121352225bc5877e02a44"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "c846923ca8c3719e394dd63b8ae292c9cb0c003e", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a3442c85aedb00c59e986f16cccbb8ec60d777/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a3442c85aedb00c59e986f16cccbb8ec60d777/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=85a3442c85aedb00c59e986f16cccbb8ec60d777", "patch": "@@ -3609,7 +3609,9 @@ gfc_match_char_spec (gfc_typespec *ts)\n \t  gfc_current_ns = gfc_get_namespace (NULL, 0);\n \n \t  e = gfc_copy_expr (len);\n+\t  gfc_push_suppress_errors ();\n \t  gfc_reduce_init_expr (e);\n+\t  gfc_pop_suppress_errors ();\n \t  if (e->expr_type == EXPR_CONSTANT)\n \t    {\n \t      gfc_replace_expr (len, e);"}, {"sha": "e95c083d1bfbefffc880afd4cca524cf533d5fc5", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a3442c85aedb00c59e986f16cccbb8ec60d777/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a3442c85aedb00c59e986f16cccbb8ec60d777/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=85a3442c85aedb00c59e986f16cccbb8ec60d777", "patch": "@@ -83,6 +83,15 @@ gfc_pop_suppress_errors (void)\n }\n \n \n+/* Query whether errors are suppressed.  */\n+\n+bool\n+gfc_query_suppress_errors (void)\n+{\n+  return suppress_errors > 0;\n+}\n+\n+\n /* Determine terminal width (for trimming source lines in output).  */\n \n static int"}, {"sha": "3b791a4f6beae86b7e8710b5cdf33791eff31d2b", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a3442c85aedb00c59e986f16cccbb8ec60d777/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a3442c85aedb00c59e986f16cccbb8ec60d777/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=85a3442c85aedb00c59e986f16cccbb8ec60d777", "patch": "@@ -1083,6 +1083,7 @@ typedef struct\n \n void gfc_push_suppress_errors (void);\n void gfc_pop_suppress_errors (void);\n+bool gfc_query_suppress_errors (void);\n \n \n /* Character length structures hold the expression that gives the"}, {"sha": "1a4b0228597736dc749353cdeccad635ada8dcd0", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a3442c85aedb00c59e986f16cccbb8ec60d777/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a3442c85aedb00c59e986f16cccbb8ec60d777/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=85a3442c85aedb00c59e986f16cccbb8ec60d777", "patch": "@@ -299,7 +299,7 @@ gfc_set_default_type (gfc_symbol *sym, int error_flag, gfc_namespace *ns)\n \n   if (ts->type == BT_UNKNOWN)\n     {\n-      if (error_flag && !sym->attr.untyped)\n+      if (error_flag && !sym->attr.untyped && !gfc_query_suppress_errors ())\n \t{\n \t  const char *guessed = lookup_symbol_fuzzy (sym->name, sym);\n \t  if (guessed)"}, {"sha": "4521fcd69c116fe83feab06f5c8827918b9bb117", "filename": "gcc/testsuite/gfortran.dg/pr103258.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a3442c85aedb00c59e986f16cccbb8ec60d777/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr103258.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a3442c85aedb00c59e986f16cccbb8ec60d777/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr103258.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr103258.f90?ref=85a3442c85aedb00c59e986f16cccbb8ec60d777", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile}\n+! { dg-additional-options \"-Wno-pedantic\" }\n+!\n+! Test from PR103258.  This used to ICE due to incorrectly marking the\n+! no-implicit-type error for n and m in the character length expression\n+! as already diagnosed during early resolution, when in fact errors are\n+! ignored in that parsing context.  We now expect the errors to be diagnosed\n+! at the point of the first use of each symbol.\n+\n+subroutine s(n) ! { dg-error \"Symbol 'n' .*has no IMPLICIT type\" }\n+implicit none\n+character(n+m) :: c ! { dg-error \"Symbol 'm' .*has no IMPLICIT type\" }\n+entry e(m)\n+end"}]}