{"sha": "b2b262e3833249730f75bfb40fe842a0d5990e80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJiMjYyZTM4MzMyNDk3MzBmNzViZmI0MGZlODQyYTBkNTk5MGU4MA==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2013-11-11T18:57:25Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2013-11-11T18:57:25Z"}, "message": "re PR middle-end/59049 (Two VOIDmode constant in comparison passed to cstoresi4)\n\n        PR middle-end/59049\n        * expmed.c (emit_store_flag): Fail for const-const comparison.\n\nFrom-SVN: r204682", "tree": {"sha": "bd3f256f9532dd32e0b470b34c5b165d836cdf7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd3f256f9532dd32e0b470b34c5b165d836cdf7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2b262e3833249730f75bfb40fe842a0d5990e80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2b262e3833249730f75bfb40fe842a0d5990e80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2b262e3833249730f75bfb40fe842a0d5990e80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2b262e3833249730f75bfb40fe842a0d5990e80/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c733374a3d1ce1b1583baf023a7213c1dd6561b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c733374a3d1ce1b1583baf023a7213c1dd6561b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c733374a3d1ce1b1583baf023a7213c1dd6561b4"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "0fcb06ee2bf85305ebbaddaceb5c4f69d2ed4564", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b262e3833249730f75bfb40fe842a0d5990e80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b262e3833249730f75bfb40fe842a0d5990e80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2b262e3833249730f75bfb40fe842a0d5990e80", "patch": "@@ -1,3 +1,8 @@\n+2013-11-11  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\tPR middle-end/59049\n+\t* expmed.c (emit_store_flag): Fail for const-const comparison.\n+\n 2013-11-11  Tristan Gingold  <gingold@adacore.com>\n \t    Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "1617bc05aa10deba5ac4531e2c4e17c05a9ad21e", "filename": "gcc/expmed.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b262e3833249730f75bfb40fe842a0d5990e80/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b262e3833249730f75bfb40fe842a0d5990e80/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=b2b262e3833249730f75bfb40fe842a0d5990e80", "patch": "@@ -5401,6 +5401,13 @@ emit_store_flag (rtx target, enum rtx_code code, rtx op0, rtx op1,\n   rtx subtarget;\n   rtx tem, last, trueval;\n \n+  /* If we compare constants, we shouldn't use a store-flag operation,\n+     but a constant load.  We can get there via the vanilla route that\n+     usually generates a compare-branch sequence, but will in this case\n+     fold the comparison to a constant, and thus elide the branch.  */\n+  if (CONSTANT_P (op0) && CONSTANT_P (op1))\n+    return NULL_RTX;\n+\n   tem = emit_store_flag_1 (target, code, op0, op1, mode, unsignedp, normalizep,\n \t\t\t   target_mode);\n   if (tem)"}]}