{"sha": "5f7e187e7fa4175204dac0d2f9d468d61762c11b", "node_id": "C_kwDOANBUbNoAKDVmN2UxODdlN2ZhNDE3NTIwNGRhYzBkMmY5ZDQ2OGQ2MTc2MmMxMWI", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-07-25T14:44:39Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-08-02T12:50:25Z"}, "message": "Implement streamer for frange.\n\nThis patch Allows us to export floating point ranges into the SSA name\n(SSA_NAME_RANGE_INFO).\n\n[Richi, in PR24021 you suggested that match.pd could use global float\nranges, because it would generally not invoke ranger.  This patch\nimplements the boiler plate to save the frange globally.]\n\n[Jeff, we've also been talking in parallel of using NAN knowledge\nduring expansion to RTL.  This patch will provide the NAN bits in the\nSSA name.]\n\nSince frange's currently implementation is just a shell, with no\nactual endpoints, frange_storage_slot only contains frange_props which\nfits inside a byte.  When we have endpoints, y'all can decide if it's\nworth saving them, or if the NAN/etc bits are good enough.\n\ngcc/ChangeLog:\n\n\t* tree-core.h (struct tree_ssa_name): Add frange_info and\n\treshuffle the rest.\n\t* value-range-storage.cc (vrange_storage::alloc_slot): Add case\n\tfor frange.\n\t(vrange_storage::set_vrange): Same.\n\t(vrange_storage::get_vrange): Same.\n\t(vrange_storage::fits_p): Same.\n\t(frange_storage_slot::alloc_slot): New.\n\t(frange_storage_slot::set_frange): New.\n\t(frange_storage_slot::get_frange): New.\n\t(frange_storage_slot::fits_p): New.\n\t* value-range-storage.h (class frange_storage_slot): New.", "tree": {"sha": "d49004bb51a727a6243d455364e35d24acebff8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d49004bb51a727a6243d455364e35d24acebff8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f7e187e7fa4175204dac0d2f9d468d61762c11b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f7e187e7fa4175204dac0d2f9d468d61762c11b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f7e187e7fa4175204dac0d2f9d468d61762c11b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f7e187e7fa4175204dac0d2f9d468d61762c11b/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9f5b4fa4f2c93ef76e3766b3edabfaebc100741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9f5b4fa4f2c93ef76e3766b3edabfaebc100741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9f5b4fa4f2c93ef76e3766b3edabfaebc100741"}], "stats": {"total": 92, "additions": 85, "deletions": 7}, "files": [{"sha": "86a07c282af27899b020a6b9ca97ba926eaeffe9", "filename": "gcc/tree-core.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f7e187e7fa4175204dac0d2f9d468d61762c11b/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f7e187e7fa4175204dac0d2f9d468d61762c11b/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=5f7e187e7fa4175204dac0d2f9d468d61762c11b", "patch": "@@ -1589,17 +1589,17 @@ struct GTY(()) tree_ssa_name {\n \n   /* Value range information.  */\n   union ssa_name_info_type {\n+    /* Ranges for integers.  */\n+    struct GTY ((tag (\"0\"))) irange_storage_slot *irange_info;\n+    /* Ranges for floating point numbers.  */\n+    struct GTY ((tag (\"1\"))) frange_storage_slot *frange_info;\n     /* Pointer attributes used for alias analysis.  */\n-    struct GTY ((tag (\"0\"))) ptr_info_def *ptr_info;\n+    struct GTY ((tag (\"2\"))) ptr_info_def *ptr_info;\n     /* This holds any range info supported by ranger (except ptr_info\n        above) and is managed by vrange_storage.  */\n     void * GTY ((skip)) range_info;\n-    /* GTY tag when the range in the range_info slot above satisfies\n-       irange::supports_type_p.  */\n-    struct GTY ((tag (\"1\"))) irange_storage_slot *irange_info;\n   } GTY ((desc (\"%1.typed.type ?\" \\\n-\t\t\"!POINTER_TYPE_P (TREE_TYPE ((tree)&%1)) : 2\"))) info;\n-\n+\t\t\"(POINTER_TYPE_P (TREE_TYPE ((tree)&%1)) ? 2 : SCALAR_FLOAT_TYPE_P (TREE_TYPE ((tree)&%1))) : 3\"))) info;\n   /* Immediate uses list for this SSA_NAME.  */\n   struct ssa_use_operand_t imm_uses;\n };"}, {"sha": "ea3b83ca641dbe7cd873eddf4e4862e9bae6cfd8", "filename": "gcc/value-range-storage.cc", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f7e187e7fa4175204dac0d2f9d468d61762c11b/gcc%2Fvalue-range-storage.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f7e187e7fa4175204dac0d2f9d468d61762c11b/gcc%2Fvalue-range-storage.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range-storage.cc?ref=5f7e187e7fa4175204dac0d2f9d468d61762c11b", "patch": "@@ -40,7 +40,8 @@ vrange_storage::alloc_slot (const vrange &r)\n \n   if (is_a <irange> (r))\n     return irange_storage_slot::alloc_slot (*m_alloc, as_a <irange> (r));\n-\n+  if (is_a <frange> (r))\n+    return frange_storage_slot::alloc_slot (*m_alloc, as_a <frange> (r));\n   return NULL;\n }\n \n@@ -55,6 +56,12 @@ vrange_storage::set_vrange (void *slot, const vrange &r)\n       gcc_checking_assert (s->fits_p (as_a <irange> (r)));\n       s->set_irange (as_a <irange> (r));\n     }\n+  else if (is_a <frange> (r))\n+    {\n+      frange_storage_slot *s = static_cast <frange_storage_slot *> (slot);\n+      gcc_checking_assert (s->fits_p (as_a <frange> (r)));\n+      s->set_frange (as_a <frange> (r));\n+    }\n   else\n     gcc_unreachable ();\n }\n@@ -70,6 +77,12 @@ vrange_storage::get_vrange (const void *slot, vrange &r, tree type)\n \t= static_cast <const irange_storage_slot *> (slot);\n       s->get_irange (as_a <irange> (r), type);\n     }\n+  else if (is_a <frange> (r))\n+    {\n+      const frange_storage_slot *s\n+\t= static_cast <const frange_storage_slot *> (slot);\n+      s->get_frange (as_a <frange> (r), type);\n+    }\n   else\n     gcc_unreachable ();\n }\n@@ -85,6 +98,12 @@ vrange_storage::fits_p (const void *slot, const vrange &r)\n \t= static_cast <const irange_storage_slot *> (slot);\n       return s->fits_p (as_a <irange> (r));\n     }\n+  if (is_a <frange> (r))\n+    {\n+      const frange_storage_slot *s\n+\t= static_cast <const frange_storage_slot *> (slot);\n+      return s->fits_p (as_a <frange> (r));\n+    }\n   gcc_unreachable ();\n   return false;\n }\n@@ -215,3 +234,43 @@ debug (const irange_storage_slot &storage)\n   storage.dump ();\n   fprintf (stderr, \"\\n\");\n }\n+\n+// Implementation of frange_storage_slot.\n+\n+frange_storage_slot *\n+frange_storage_slot::alloc_slot (vrange_allocator &allocator, const frange &r)\n+{\n+  size_t size = sizeof (frange_storage_slot);\n+  frange_storage_slot *p\n+    = static_cast <frange_storage_slot *> (allocator.alloc (size));\n+  new (p) frange_storage_slot (r);\n+  return p;\n+}\n+\n+void\n+frange_storage_slot::set_frange (const frange &r)\n+{\n+  gcc_checking_assert (fits_p (r));\n+  gcc_checking_assert (!r.undefined_p ());\n+\n+  m_props = r.m_props;\n+}\n+\n+void\n+frange_storage_slot::get_frange (frange &r, tree type) const\n+{\n+  gcc_checking_assert (r.supports_type_p (type));\n+\n+  r.set_varying (type);\n+  r.m_props = m_props;\n+  r.normalize_kind ();\n+\n+  if (flag_checking)\n+    r.verify_range ();\n+}\n+\n+bool\n+frange_storage_slot::fits_p (const frange &) const\n+{\n+  return true;\n+}"}, {"sha": "3fac5ea2f86df0996d4c11e2f8c67a361ab97300", "filename": "gcc/value-range-storage.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f7e187e7fa4175204dac0d2f9d468d61762c11b/gcc%2Fvalue-range-storage.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f7e187e7fa4175204dac0d2f9d468d61762c11b/gcc%2Fvalue-range-storage.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range-storage.h?ref=5f7e187e7fa4175204dac0d2f9d468d61762c11b", "patch": "@@ -100,6 +100,25 @@ class GTY ((variable_size)) irange_storage_slot\n   trailing_wide_ints<MAX_INTS> m_ints;\n };\n \n+// A chunk of memory to store an frange to long term memory.\n+\n+class GTY (()) frange_storage_slot\n+{\n+ public:\n+  static frange_storage_slot *alloc_slot (vrange_allocator &, const frange &r);\n+  void set_frange (const frange &r);\n+  void get_frange (frange &r, tree type) const;\n+  bool fits_p (const frange &) const;\n+ private:\n+  frange_storage_slot (const frange &r) { set_frange (r); }\n+  DISABLE_COPY_AND_ASSIGN (frange_storage_slot);\n+\n+  // We can get away with just storing the properties because the type\n+  // can be gotten from the SSA, and UNDEFINED is unsupported, so it\n+  // can only be a range.\n+  frange_props m_props;\n+};\n+\n class obstack_vrange_allocator : public vrange_allocator\n {\n public:"}]}