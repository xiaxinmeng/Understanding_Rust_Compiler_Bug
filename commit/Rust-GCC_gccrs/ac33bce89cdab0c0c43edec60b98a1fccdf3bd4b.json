{"sha": "ac33bce89cdab0c0c43edec60b98a1fccdf3bd4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMzM2JjZTg5Y2RhYjBjMGM0M2VkZWM2MGI5OGExZmNjZGYzYmQ0Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-02-01T08:43:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-02-01T08:43:02Z"}, "message": "re PR tree-optimization/88107 (ICE in find_outermost_region_in_block, at tree-cfg.c:7157)\n\n\tPR tree-optimization/88107\n\t* tree-cfg.c (find_outermost_region_in_block): Add ALL argument,\n\tinstead of assertion that eh_region_outermost is non-NULL, if it\n\tis NULL, set *ALL to true and return NULL.\n\t(move_sese_region_to_fn): Adjust caller, if all is set, call\n\tduplicate_eh_regions with NULL region.\n\n\t* gcc.dg/gomp/pr88107.c: New test.\n\nFrom-SVN: r268444", "tree": {"sha": "9b6949a0d1d15eba96227cb7488b39ba41992694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b6949a0d1d15eba96227cb7488b39ba41992694"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac33bce89cdab0c0c43edec60b98a1fccdf3bd4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac33bce89cdab0c0c43edec60b98a1fccdf3bd4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac33bce89cdab0c0c43edec60b98a1fccdf3bd4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac33bce89cdab0c0c43edec60b98a1fccdf3bd4b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7beb51f914e5f5930c279aab88597a39597064a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7beb51f914e5f5930c279aab88597a39597064a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7beb51f914e5f5930c279aab88597a39597064a6"}], "stats": {"total": 69, "additions": 64, "deletions": 5}, "files": [{"sha": "485bac73f2bdb2ef944f76b97a1b58d2b73861e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac33bce89cdab0c0c43edec60b98a1fccdf3bd4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac33bce89cdab0c0c43edec60b98a1fccdf3bd4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac33bce89cdab0c0c43edec60b98a1fccdf3bd4b", "patch": "@@ -1,3 +1,12 @@\n+2019-02-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/88107\n+\t* tree-cfg.c (find_outermost_region_in_block): Add ALL argument,\n+\tinstead of assertion that eh_region_outermost is non-NULL, if it\n+\tis NULL, set *ALL to true and return NULL.\n+\t(move_sese_region_to_fn): Adjust caller, if all is set, call\n+\tduplicate_eh_regions with NULL region.\n+\n 2019-02-01  Richard Biener  <rguenth@suse.de>\n \n \tPR rtl-optimization/88593"}, {"sha": "fb18cf118736e89b36ebe45b86aa3b5982bc397b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac33bce89cdab0c0c43edec60b98a1fccdf3bd4b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac33bce89cdab0c0c43edec60b98a1fccdf3bd4b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ac33bce89cdab0c0c43edec60b98a1fccdf3bd4b", "patch": "@@ -1,5 +1,8 @@\n 2019-02-01  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/88107\n+\t* gcc.dg/gomp/pr88107.c: New test.\n+\n \tPR c++/87175\n \t* g++.dg/ext/attrib57.C: New test.\n "}, {"sha": "3b53b566565800d7d50a3fa748c9114cb9ce097f", "filename": "gcc/testsuite/gcc.dg/gomp/pr88107.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac33bce89cdab0c0c43edec60b98a1fccdf3bd4b/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr88107.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac33bce89cdab0c0c43edec60b98a1fccdf3bd4b/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr88107.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr88107.c?ref=ac33bce89cdab0c0c43edec60b98a1fccdf3bd4b", "patch": "@@ -0,0 +1,35 @@\n+/* PR tree-optimization/88107 */\n+/* { dg-do compile { target fgraphite } } */\n+/* { dg-require-effective-target vect_simd_clones } */\n+/* { dg-options \"-O2 -fexceptions -floop-nest-optimize -fnon-call-exceptions -fopenmp-simd -ftree-parallelize-loops=2\" } */\n+\n+#define N 1024\n+int a[N], b[N];\n+long int c[N];\n+unsigned char d[N];\n+\n+#pragma omp declare simd notinbranch\n+__attribute__((noinline)) static int\n+foo (long int a, int b, int c)\n+{\n+  return a + b + c;\n+}\n+\n+#pragma omp declare simd notinbranch\n+__attribute__((noinline)) static long int\n+bar (int a, int b, long int c)\n+{\n+  return a + b + c;\n+}\n+\n+void\n+baz (void)\n+{\n+  int i;\n+  #pragma omp simd\n+  for (i = 0; i < N; i++)\n+    a[i] = foo (c[i], a[i], b[i]) + 6;\n+  #pragma omp simd\n+  for (i = 0; i < N; i++)\n+    c[i] = bar (a[i], b[i], c[i]) * 2;\n+}"}, {"sha": "f196428a4c4ef639406fe7cafcbfbcb25957fdad", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac33bce89cdab0c0c43edec60b98a1fccdf3bd4b/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac33bce89cdab0c0c43edec60b98a1fccdf3bd4b/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=ac33bce89cdab0c0c43edec60b98a1fccdf3bd4b", "patch": "@@ -7143,11 +7143,14 @@ move_block_to_fn (struct function *dest_cfun, basic_block bb,\n }\n \n /* Examine the statements in BB (which is in SRC_CFUN); find and return\n-   the outermost EH region.  Use REGION as the incoming base EH region.  */\n+   the outermost EH region.  Use REGION as the incoming base EH region.\n+   If there is no single outermost region, return NULL and set *ALL to\n+   true.  */\n \n static eh_region\n find_outermost_region_in_block (struct function *src_cfun,\n-\t\t\t\tbasic_block bb, eh_region region)\n+\t\t\t\tbasic_block bb, eh_region region,\n+\t\t\t\tbool *all)\n {\n   gimple_stmt_iterator si;\n \n@@ -7166,7 +7169,11 @@ find_outermost_region_in_block (struct function *src_cfun,\n \t  else if (stmt_region != region)\n \t    {\n \t      region = eh_region_outermost (src_cfun, stmt_region, region);\n-\t      gcc_assert (region != NULL);\n+\t      if (region == NULL)\n+\t\t{\n+\t\t  *all = true;\n+\t\t  return NULL;\n+\t\t}\n \t    }\n \t}\n     }\n@@ -7501,12 +7508,17 @@ move_sese_region_to_fn (struct function *dest_cfun, basic_block entry_bb,\n   if (saved_cfun->eh)\n     {\n       eh_region region = NULL;\n+      bool all = false;\n \n       FOR_EACH_VEC_ELT (bbs, i, bb)\n-\tregion = find_outermost_region_in_block (saved_cfun, bb, region);\n+\t{\n+\t  region = find_outermost_region_in_block (saved_cfun, bb, region, &all);\n+\t  if (all)\n+\t    break;\n+\t}\n \n       init_eh_for_function ();\n-      if (region != NULL)\n+      if (region != NULL || all)\n \t{\n \t  new_label_map = htab_create (17, tree_map_hash, tree_map_eq, free);\n \t  eh_map = duplicate_eh_regions (saved_cfun, region, 0,"}]}