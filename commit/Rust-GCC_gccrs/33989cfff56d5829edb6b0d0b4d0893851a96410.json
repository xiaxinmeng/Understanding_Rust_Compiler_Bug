{"sha": "33989cfff56d5829edb6b0d0b4d0893851a96410", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM5ODljZmZmNTZkNTgyOWVkYjZiMGQwYjRkMDg5Mzg1MWE5NjQxMA==", "commit": {"author": {"name": "Senthil Kumar Selvaraj", "email": "senthil_kumar.selvaraj@atmel.com", "date": "2016-09-23T07:12:35Z"}, "committer": {"name": "Senthil Kumar Selvaraj", "email": "saaadhu@gcc.gnu.org", "date": "2016-09-23T07:12:35Z"}, "message": "Provide right LDD offset bound in avr_address_cost\n\nThis patch fixes cost computation in avr_address_cost - instead of the\nhardcoded 61, it uses the already existing MAX_LD_OFFSET(mode) macro.\n\nThis showed up when investigating a code size regression in the ivopts\npass. That pass computes address_cost with and without an offset to\ndecide on the right induction variable candidate(s). The legitimate\naddress target hook returns false for offsets more than 63, so the\npass calls the TARGET_ADDRESS_COST hook with 62 as the offset.\n\nThe avr_address_cost hook returns 18 as the cost, and the ivopts pass \nconcludes that the cost of address with *any* offset is 18, which is not \ntrue - the higher cost is incurred only with offsets bigger than MAX_LD_OFFSET. \nThis in turn results in a suboptimal choice of induction variables in the\nivopts pass. The patch changes the hardcoded 61 to use the mode\nspecific MAX_LD_OFFSET instead.\n\nRegression testing with just that fix showed one additional\ncompilation timeout. That turned out to be the same as\nhttps://lists.nongnu.org/archive/html/avr-gcc-list/2014-03/msg00010.html\n- the middle end takes too much time to decide on the best strategy to\nmultiply DImode values on a 64 bit host. This already causes timeouts\nfor a few builtin-arith-overflow-* tests (see\nhttps://gcc.gnu.org/ml/gcc-testresults/2016-09/msg02018.html), so it\nisn't really related to this fix. Just providing a cost estimate for\nDImode mul fixes the timeout though, so the patch does that by scaling\nSImode costs by 2 for DImode muls.\n\nWith both changes in, there are no regressions, and the\nbuiltin-arith-overflow-* tests now PASS and don't timeout.\n\ngcc/ChangeLog\n\n2016-09-22  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n\n\t* config/avr/avr.c (avr_rtx_costs_1): Handle DImode MULT.\n\t(avr_address_cost): Replace 61 with MAX_LD_OFFSET(mode).\n\nFrom-SVN: r240388", "tree": {"sha": "2dbdc2029a9f7b04e091ba70776ae7a2b524924d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dbdc2029a9f7b04e091ba70776ae7a2b524924d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33989cfff56d5829edb6b0d0b4d0893851a96410", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33989cfff56d5829edb6b0d0b4d0893851a96410", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33989cfff56d5829edb6b0d0b4d0893851a96410", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33989cfff56d5829edb6b0d0b4d0893851a96410/comments", "author": null, "committer": {"login": "saaadhu", "id": 532256, "node_id": "MDQ6VXNlcjUzMjI1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/532256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saaadhu", "html_url": "https://github.com/saaadhu", "followers_url": "https://api.github.com/users/saaadhu/followers", "following_url": "https://api.github.com/users/saaadhu/following{/other_user}", "gists_url": "https://api.github.com/users/saaadhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/saaadhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saaadhu/subscriptions", "organizations_url": "https://api.github.com/users/saaadhu/orgs", "repos_url": "https://api.github.com/users/saaadhu/repos", "events_url": "https://api.github.com/users/saaadhu/events{/privacy}", "received_events_url": "https://api.github.com/users/saaadhu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "320c7be3ff77ef695230a0f5bc816cbd53bb4f54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/320c7be3ff77ef695230a0f5bc816cbd53bb4f54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/320c7be3ff77ef695230a0f5bc816cbd53bb4f54"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "0c14b4d4a6c52e72822bd2ae5a146a51a57568cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33989cfff56d5829edb6b0d0b4d0893851a96410/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33989cfff56d5829edb6b0d0b4d0893851a96410/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33989cfff56d5829edb6b0d0b4d0893851a96410", "patch": "@@ -1,3 +1,8 @@\n+2016-09-22  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n+\n+\t* config/avr/avr.c (avr_rtx_costs_1): Handle DImode MULT.\n+\t(avr_address_cost): Replace 61 with MAX_LD_OFFSET(mode).\n+\n 2016-09-22  Martin Sebor  <msebor@redhat.com>\n \n \tPR target/77676"}, {"sha": "9cb81061dc09817302cebfe65860eb657b7c44de", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33989cfff56d5829edb6b0d0b4d0893851a96410/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33989cfff56d5829edb6b0d0b4d0893851a96410/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=33989cfff56d5829edb6b0d0b4d0893851a96410", "patch": "@@ -10293,6 +10293,7 @@ avr_rtx_costs_1 (rtx x, machine_mode mode, int outer_code ATTRIBUTE_UNUSED,\n           break;\n \n \tcase SImode:\n+\tcase DImode:\n \t  if (AVR_HAVE_MUL)\n             {\n               if (!speed)\n@@ -10318,7 +10319,10 @@ avr_rtx_costs_1 (rtx x, machine_mode mode, int outer_code ATTRIBUTE_UNUSED,\n                 *total = COSTS_N_INSNS (AVR_HAVE_JMP_CALL ? 5 : 4);\n             }\n \n-          return true;\n+\t   if (mode == DImode)\n+\t     *total *= 2;\n+\n+\t   return true;\n \n \tdefault:\n \t  return false;\n@@ -10899,7 +10903,7 @@ avr_address_cost (rtx x, machine_mode mode ATTRIBUTE_UNUSED,\n       && (REG_P (XEXP (x, 0))\n           || GET_CODE (XEXP (x, 0)) == SUBREG))\n     {\n-      if (INTVAL (XEXP (x, 1)) >= 61)\n+      if (INTVAL (XEXP (x, 1)) > MAX_LD_OFFSET(mode))\n         cost = 18;\n     }\n   else if (CONSTANT_ADDRESS_P (x))"}]}