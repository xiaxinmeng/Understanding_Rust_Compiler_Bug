{"sha": "52f84254b2efcba67568adeb63d7bff4e9c10ed1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJmODQyNTRiMmVmY2JhNjc1NjhhZGViNjNkN2JmZjRlOWMxMGVkMQ==", "commit": {"author": {"name": "Shujing Zhao", "email": "pearly.zhao@oracle.com", "date": "2009-05-21T14:01:02Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-05-21T14:01:02Z"}, "message": "i386.c: Use REG_P...\n\n2009-05-21  Shujing Zhao  <pearly.zhao@oracle.com>\n\n\t* config/i386/i386.c: Use REG_P, MEM_P, CONST_INT_P, LABEL_P and\n\tJUMP_TABLE_DATA_P predicates where applicable.\n\t* config/i386/predicates.md: Ditto.\n\t* config/i386/sse.md: Ditto.\n\nFrom-SVN: r147769", "tree": {"sha": "a5a16ab1312d4ca4e5cd89b6178b712d8e70cee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5a16ab1312d4ca4e5cd89b6178b712d8e70cee9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52f84254b2efcba67568adeb63d7bff4e9c10ed1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52f84254b2efcba67568adeb63d7bff4e9c10ed1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52f84254b2efcba67568adeb63d7bff4e9c10ed1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52f84254b2efcba67568adeb63d7bff4e9c10ed1/comments", "author": null, "committer": null, "parents": [{"sha": "93cac287cb05b729da30116dc621dc0dd0164bed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93cac287cb05b729da30116dc621dc0dd0164bed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93cac287cb05b729da30116dc621dc0dd0164bed"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "6b0f89ac77812ff71218d1abb041427a932dcd8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52f84254b2efcba67568adeb63d7bff4e9c10ed1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52f84254b2efcba67568adeb63d7bff4e9c10ed1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52f84254b2efcba67568adeb63d7bff4e9c10ed1", "patch": "@@ -1,3 +1,10 @@\n+2009-05-21  Shujing Zhao  <pearly.zhao@oracle.com>\n+\n+\t* config/i386/i386.c: Use REG_P, MEM_P, CONST_INT_P, LABEL_P and\n+\tJUMP_TABLE_DATA_P predicates where applicable.\n+\t* config/i386/predicates.md: Ditto.\n+\t* config/i386/sse.md: Ditto.\n+\n 2009-05-21  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/i386.md (adddi_4_rex64, addsi_4, addhi_4): For"}, {"sha": "8be82f0fa979b3b07bdae2ac2a5e922bad439380", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52f84254b2efcba67568adeb63d7bff4e9c10ed1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52f84254b2efcba67568adeb63d7bff4e9c10ed1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=52f84254b2efcba67568adeb63d7bff4e9c10ed1", "patch": "@@ -17213,7 +17213,7 @@ counter_mode (rtx count_exp)\n {\n   if (GET_MODE (count_exp) != VOIDmode)\n     return GET_MODE (count_exp);\n-  if (GET_CODE (count_exp) != CONST_INT)\n+  if (!CONST_INT_P (count_exp))\n     return Pmode;\n   if (TARGET_64BIT && (INTVAL (count_exp) & ~0xffffffff))\n     return DImode;\n@@ -19125,7 +19125,7 @@ ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n     }\n \n   if (ix86_cmodel == CM_LARGE_PIC\n-      && GET_CODE (fnaddr) == MEM\n+      && MEM_P (fnaddr) \n       && GET_CODE (XEXP (fnaddr, 0)) == SYMBOL_REF\n       && !local_symbolic_operand (XEXP (fnaddr, 0), VOIDmode))\n     fnaddr = gen_rtx_MEM (QImode, construct_plt_address (XEXP (fnaddr, 0)));\n@@ -24063,7 +24063,7 @@ ix86_expand_multi_arg_builtin (enum insn_code icode, tree exp, rtx target,\n \n       if (last_arg_constant && i == nargs-1)\n \t{\n-\t  if (GET_CODE (op) != CONST_INT)\n+\t  if (!CONST_INT_P (op))\n \t    {\n \t      error (\"last argument must be an immediate\");\n \t      return gen_reg_rtx (tmode);\n@@ -27226,9 +27226,7 @@ min_insn_size (rtx insn)\n   if (GET_CODE (PATTERN (insn)) == UNSPEC_VOLATILE\n       && XINT (PATTERN (insn), 1) == UNSPECV_ALIGN)\n     return 0;\n-  if (JUMP_P (insn)\n-      && (GET_CODE (PATTERN (insn)) == ADDR_VEC\n-\t  || GET_CODE (PATTERN (insn)) == ADDR_DIFF_VEC))\n+  if (JUMP_TABLE_DATA_P(insn))\n     return 0;\n \n   /* Important case - calls are always 5 bytes.\n@@ -27279,7 +27277,7 @@ ix86_avoid_jump_mispredicts (void)\n     {\n       int min_size;\n \n-      if (GET_CODE (insn) == CODE_LABEL)\n+      if (LABEL_P (insn))\n \t{\n \t  int align = label_to_alignment (insn);\n \t  int max_skip = label_to_max_skip (insn);"}, {"sha": "4feb86144a92cf72fa43e6d416b4cde6dbdb43d1", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52f84254b2efcba67568adeb63d7bff4e9c10ed1/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52f84254b2efcba67568adeb63d7bff4e9c10ed1/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=52f84254b2efcba67568adeb63d7bff4e9c10ed1", "patch": "@@ -87,13 +87,13 @@\n ;; Return true if op is not xmm0 register.\n (define_predicate \"reg_not_xmm0_operand\"\n    (and (match_operand 0 \"register_operand\")\n-\t(match_test \"GET_CODE (op) != REG\n+\t(match_test \"!REG_P (op) \n \t\t     || REGNO (op) != FIRST_SSE_REG\")))\n \n ;; As above, but allow nonimmediate operands.\n (define_predicate \"nonimm_not_xmm0_operand\"\n    (and (match_operand 0 \"nonimmediate_operand\")\n-\t(match_test \"GET_CODE (op) != REG\n+\t(match_test \"!REG_P (op) \n \t\t     || REGNO (op) != FIRST_SSE_REG\")))\n \n ;; Return 1 if VALUE can be stored in a sign extended immediate field.\n@@ -829,7 +829,7 @@\n   int ok;\n \n   /* Registers and immediate operands are always \"aligned\".  */\n-  if (GET_CODE (op) != MEM)\n+  if (!MEM_P (op))\n     return 1;\n \n   /* All patterns using aligned_operand on memory operands ends up"}, {"sha": "d705fa11cc5bec32d819a25a2fc54755bc50daa9", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52f84254b2efcba67568adeb63d7bff4e9c10ed1/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52f84254b2efcba67568adeb63d7bff4e9c10ed1/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=52f84254b2efcba67568adeb63d7bff4e9c10ed1", "patch": "@@ -11201,7 +11201,7 @@\n   rtx par = gen_rtx_PARALLEL (V16QImode, vs);\n   rtx reg = gen_reg_rtx (V16QImode);\n   int i;\n-  rtx ele = ((GET_CODE (operands[2]) == CONST_INT)\n+  rtx ele = ((CONST_INT_P (operands[2]))\n \t     ? GEN_INT (- INTVAL (operands[2]))\n \t     : operands[2]);\n \n@@ -11210,7 +11210,7 @@\n \n   emit_insn (gen_vec_initv16qi (reg, par));\n \n-  if (GET_CODE (operands[2]) != CONST_INT)\n+  if (!CONST_INT_P (operands[2]))\n     {\n       rtx neg = gen_reg_rtx (V16QImode);\n       emit_insn (gen_negv16qi2 (neg, reg));\n@@ -11233,7 +11233,7 @@\n   rtx reg = gen_reg_rtx (V2DImode);\n   rtx ele;\n \n-  if (GET_CODE (operands[2]) == CONST_INT)\n+  if (CONST_INT_P (operands[2]))\n     ele = GEN_INT (- INTVAL (operands[2]));\n   else if (GET_MODE (operands[2]) != DImode)\n     {"}]}