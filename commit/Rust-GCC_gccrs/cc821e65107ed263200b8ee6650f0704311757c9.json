{"sha": "cc821e65107ed263200b8ee6650f0704311757c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M4MjFlNjUxMDdlZDI2MzIwMGI4ZWU2NjUwZjA3MDQzMTE3NTdjOQ==", "commit": {"author": {"name": "Claire Dross", "email": "dross@adacore.com", "date": "2018-05-28T08:55:22Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-28T08:55:22Z"}, "message": "[Ada] Allow for GNATprove specific versions of routines from Sem_Disp\n\n2018-05-28  Claire Dross  <dross@adacore.com>\n\ngcc/ada/\n\n\t* sem_disp.ads, sem_disp.adb (Inheritance_Utilities): Package for\n\tgeneric inheritance utilities.\n\t(Generic_Inherited_Subprograms): Generic version of\n\tInherited_Subprograms, generic in Find_Dispatching_Type function.\n\t(Generic_Is_Overriding_Subprogram): Generic version of\n\tIs_Overriding_Subprogram, generic in Find_Dispatching_Type function.\n\t(Inherited_Subprograms): Instance of Generic_Inherited_Subprograms with\n\tSem_Disp.Find_Dispatching_Type.\n\t(Is_Overriding_Subprogram): Instance of\n\tGeneric_Is_Overriding_Subprogram with Sem_Disp.Find_Dispatching_Type.\n\t(Inheritance_Utilities_Inst): Instance of Inheritance_Utilities\n\twith Sem_Disp.Find_Dispatching_Type.\n\nFrom-SVN: r260835", "tree": {"sha": "a3b6be08e21ad2f86a871fb31fa40522371ab122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3b6be08e21ad2f86a871fb31fa40522371ab122"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc821e65107ed263200b8ee6650f0704311757c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc821e65107ed263200b8ee6650f0704311757c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc821e65107ed263200b8ee6650f0704311757c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc821e65107ed263200b8ee6650f0704311757c9/comments", "author": {"login": "clairedross", "id": 8180017, "node_id": "MDQ6VXNlcjgxODAwMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/8180017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clairedross", "html_url": "https://github.com/clairedross", "followers_url": "https://api.github.com/users/clairedross/followers", "following_url": "https://api.github.com/users/clairedross/following{/other_user}", "gists_url": "https://api.github.com/users/clairedross/gists{/gist_id}", "starred_url": "https://api.github.com/users/clairedross/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clairedross/subscriptions", "organizations_url": "https://api.github.com/users/clairedross/orgs", "repos_url": "https://api.github.com/users/clairedross/repos", "events_url": "https://api.github.com/users/clairedross/events{/privacy}", "received_events_url": "https://api.github.com/users/clairedross/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c386027b7d086f4d8e0b7f5a3778db1d08e6a29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c386027b7d086f4d8e0b7f5a3778db1d08e6a29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c386027b7d086f4d8e0b7f5a3778db1d08e6a29"}], "stats": {"total": 277, "additions": 175, "deletions": 102}, "files": [{"sha": "431066776902cc315fcc9d10420935a1f1b59f00", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc821e65107ed263200b8ee6650f0704311757c9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc821e65107ed263200b8ee6650f0704311757c9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cc821e65107ed263200b8ee6650f0704311757c9", "patch": "@@ -1,3 +1,18 @@\n+2018-05-28  Claire Dross  <dross@adacore.com>\n+\n+\t* sem_disp.ads, sem_disp.adb (Inheritance_Utilities): Package for\n+\tgeneric inheritance utilities.\n+\t(Generic_Inherited_Subprograms): Generic version of\n+\tInherited_Subprograms, generic in Find_Dispatching_Type function.\n+\t(Generic_Is_Overriding_Subprogram): Generic version of\n+\tIs_Overriding_Subprogram, generic in Find_Dispatching_Type function.\n+\t(Inherited_Subprograms): Instance of Generic_Inherited_Subprograms with\n+\tSem_Disp.Find_Dispatching_Type.\n+\t(Is_Overriding_Subprogram): Instance of\n+\tGeneric_Is_Overriding_Subprogram with Sem_Disp.Find_Dispatching_Type.\n+\t(Inheritance_Utilities_Inst): Instance of Inheritance_Utilities\n+\twith Sem_Disp.Find_Dispatching_Type.\n+\n 2018-05-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* exp_ch4.adb (Expand_Composite_Equality): For a composite (or FP)"}, {"sha": "54c20b50c05e4dc9dc656d21f629fc1c74baee31", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 142, "deletions": 102, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc821e65107ed263200b8ee6650f0704311757c9/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc821e65107ed263200b8ee6650f0704311757c9/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=cc821e65107ed263200b8ee6650f0704311757c9", "patch": "@@ -2201,137 +2201,181 @@ package body Sem_Disp is\n    end Find_Primitive_Covering_Interface;\n \n    ---------------------------\n-   -- Inherited_Subprograms --\n+   -- Inheritance_Utilities --\n    ---------------------------\n \n-   function Inherited_Subprograms\n-     (S               : Entity_Id;\n-      No_Interfaces   : Boolean := False;\n-      Interfaces_Only : Boolean := False;\n-      One_Only        : Boolean := False) return Subprogram_List\n-   is\n-      Result : Subprogram_List (1 .. 6000);\n-      --  6000 here is intended to be infinity. We could use an expandable\n-      --  table, but it would be awfully heavy, and there is no way that we\n-      --  could reasonably exceed this value.\n+   package body Inheritance_Utilities is\n \n-      N : Nat := 0;\n-      --  Number of entries in Result\n+      ---------------------------\n+      -- Inherited_Subprograms --\n+      ---------------------------\n \n-      Parent_Op : Entity_Id;\n-      --  Traverses the Overridden_Operation chain\n+      function Inherited_Subprograms\n+        (S               : Entity_Id;\n+         No_Interfaces   : Boolean := False;\n+         Interfaces_Only : Boolean := False;\n+         One_Only        : Boolean := False) return Subprogram_List\n+      is\n+         Result : Subprogram_List (1 .. 6000);\n+         --  6000 here is intended to be infinity. We could use an expandable\n+         --  table, but it would be awfully heavy, and there is no way that we\n+         --  could reasonably exceed this value.\n \n-      procedure Store_IS (E : Entity_Id);\n-      --  Stores E in Result if not already stored\n+         N      : Nat := 0;\n+         --  Number of entries in Result\n \n-      --------------\n-      -- Store_IS --\n-      --------------\n+         Parent_Op : Entity_Id;\n+         --  Traverses the Overridden_Operation chain\n \n-      procedure Store_IS (E : Entity_Id) is\n-      begin\n-         for J in 1 .. N loop\n-            if E = Result (J) then\n-               return;\n-            end if;\n-         end loop;\n+         procedure Store_IS (E : Entity_Id);\n+         --  Stores E in Result if not already stored\n \n-         N := N + 1;\n-         Result (N) := E;\n-      end Store_IS;\n+         --------------\n+         -- Store_IS --\n+         --------------\n \n-   --  Start of processing for Inherited_Subprograms\n+         procedure Store_IS (E : Entity_Id) is\n+         begin\n+            for J in 1 .. N loop\n+               if E = Result (J) then\n+                  return;\n+               end if;\n+            end loop;\n \n-   begin\n-      pragma Assert (not (No_Interfaces and Interfaces_Only));\n+            N := N + 1;\n+            Result (N) := E;\n+         end Store_IS;\n \n-      if Present (S) and then Is_Dispatching_Operation (S) then\n+         --  Start of processing for Inherited_Subprograms\n \n-         --  Deal with direct inheritance\n+      begin\n+         pragma Assert (not (No_Interfaces and Interfaces_Only));\n \n-         if not Interfaces_Only then\n-            Parent_Op := S;\n-            loop\n-               Parent_Op := Overridden_Operation (Parent_Op);\n-               exit when No (Parent_Op)\n-                 or else\n-                   (No_Interfaces\n-                     and then\n-                       Is_Interface (Find_Dispatching_Type (Parent_Op)));\n+         --  When used from backends, visibility can be handled differently\n+         --  resulting in no dispatching type being found.\n \n-               if Is_Subprogram_Or_Generic_Subprogram (Parent_Op) then\n-                  Store_IS (Parent_Op);\n+         if Present (S)\n+           and then Is_Dispatching_Operation (S)\n+           and then Present (Find_DT (S))\n+         then\n \n-                  if One_Only then\n-                     goto Done;\n+            --  Deal with direct inheritance\n+\n+            if not Interfaces_Only then\n+               Parent_Op := S;\n+               loop\n+                  Parent_Op := Overridden_Operation (Parent_Op);\n+                  exit when No (Parent_Op)\n+                    or else\n+                      (No_Interfaces\n+                       and then\n+                       Is_Interface (Find_DT (Parent_Op)));\n+\n+                  if Is_Subprogram_Or_Generic_Subprogram (Parent_Op) then\n+                     Store_IS (Parent_Op);\n+\n+                     if One_Only then\n+                        goto Done;\n+                     end if;\n                   end if;\n-               end if;\n-            end loop;\n-         end if;\n+               end loop;\n+            end if;\n \n-         --  Now deal with interfaces\n+            --  Now deal with interfaces\n \n-         if not No_Interfaces then\n-            declare\n-               Tag_Typ : Entity_Id;\n-               Prim    : Entity_Id;\n-               Elmt    : Elmt_Id;\n+            if not No_Interfaces then\n+               declare\n+                  Tag_Typ : Entity_Id;\n+                  Prim    : Entity_Id;\n+                  Elmt    : Elmt_Id;\n \n-            begin\n-               Tag_Typ := Find_Dispatching_Type (S);\n+               begin\n+                  Tag_Typ := Find_DT (S);\n \n-               --  In the presence of limited views there may be no visible\n-               --  dispatching type. Primitives will be inherited when non-\n-               --  limited view is frozen.\n+                  --  In the presence of limited views there may be no visible\n+                  --  dispatching type. Primitives will be inherited when non-\n+                  --  limited view is frozen.\n \n-               if No (Tag_Typ) then\n-                  return Result (1 .. 0);\n-               end if;\n+                  if No (Tag_Typ) then\n+                     return Result (1 .. 0);\n+                  end if;\n \n-               if Is_Concurrent_Type (Tag_Typ) then\n-                  Tag_Typ := Corresponding_Record_Type (Tag_Typ);\n-               end if;\n+                  if Is_Concurrent_Type (Tag_Typ) then\n+                     Tag_Typ := Corresponding_Record_Type (Tag_Typ);\n+                  end if;\n \n-               --  Search primitive operations of dispatching type\n+                  --  Search primitive operations of dispatching type\n \n-               if Present (Tag_Typ)\n-                 and then Present (Primitive_Operations (Tag_Typ))\n-               then\n-                  Elmt := First_Elmt (Primitive_Operations (Tag_Typ));\n-                  while Present (Elmt) loop\n-                     Prim := Node (Elmt);\n+                  if Present (Tag_Typ)\n+                    and then Present (Primitive_Operations (Tag_Typ))\n+                  then\n+                     Elmt := First_Elmt (Primitive_Operations (Tag_Typ));\n+                     while Present (Elmt) loop\n+                        Prim := Node (Elmt);\n \n-                     --  The following test eliminates some odd cases in which\n-                     --  Ekind (Prim) is Void, to be investigated further ???\n+                        --  The following test eliminates some odd cases in\n+                        --  which Ekind (Prim) is Void, to be investigated\n+                        --  further ???\n \n-                     if not Is_Subprogram_Or_Generic_Subprogram (Prim) then\n-                        null;\n+                        if not Is_Subprogram_Or_Generic_Subprogram (Prim) then\n+                           null;\n \n-                     --  For [generic] subprogram, look at interface alias\n+                           --  For [generic] subprogram, look at interface\n+                           --  alias.\n \n-                     elsif Present (Interface_Alias (Prim))\n-                       and then Alias (Prim) = S\n-                     then\n-                        --  We have found a primitive covered by S\n+                        elsif Present (Interface_Alias (Prim))\n+                          and then Alias (Prim) = S\n+                        then\n+                           --  We have found a primitive covered by S\n \n-                        Store_IS (Interface_Alias (Prim));\n+                           Store_IS (Interface_Alias (Prim));\n \n-                        if One_Only then\n-                           goto Done;\n+                           if One_Only then\n+                              goto Done;\n+                           end if;\n                         end if;\n-                     end if;\n \n-                     Next_Elmt (Elmt);\n-                  end loop;\n-               end if;\n-            end;\n+                        Next_Elmt (Elmt);\n+                     end loop;\n+                  end if;\n+               end;\n+            end if;\n          end if;\n-      end if;\n \n-      <<Done>>\n+         <<Done>>\n+\n+         return Result (1 .. N);\n+      end Inherited_Subprograms;\n \n-      return Result (1 .. N);\n-   end Inherited_Subprograms;\n+      ------------------------------\n+      -- Is_Overriding_Subprogram --\n+      ------------------------------\n+\n+      function Is_Overriding_Subprogram (E : Entity_Id) return Boolean is\n+         Inherited : constant Subprogram_List :=\n+           Inherited_Subprograms (E, One_Only => True);\n+      begin\n+         return Inherited'Length > 0;\n+      end Is_Overriding_Subprogram;\n+   end Inheritance_Utilities;\n+\n+   --------------------------------\n+   -- Inheritance_Utilities_Inst --\n+   --------------------------------\n+\n+   package Inheritance_Utilities_Inst is new\n+     Inheritance_Utilities (Find_Dispatching_Type);\n+\n+   ---------------------------\n+   -- Inherited_Subprograms --\n+   ---------------------------\n+\n+   function Inherited_Subprograms\n+     (S               : Entity_Id;\n+      No_Interfaces   : Boolean := False;\n+      Interfaces_Only : Boolean := False;\n+      One_Only        : Boolean := False) return Subprogram_List renames\n+     Inheritance_Utilities_Inst.Inherited_Subprograms;\n \n    ---------------------------\n    -- Is_Dynamically_Tagged --\n@@ -2410,12 +2454,8 @@ package body Sem_Disp is\n    -- Is_Overriding_Subprogram --\n    ------------------------------\n \n-   function Is_Overriding_Subprogram (E : Entity_Id) return Boolean is\n-      Inherited : constant Subprogram_List :=\n-                    Inherited_Subprograms (E, One_Only => True);\n-   begin\n-      return Inherited'Length > 0;\n-   end Is_Overriding_Subprogram;\n+   function Is_Overriding_Subprogram (E : Entity_Id) return Boolean renames\n+     Inheritance_Utilities_Inst.Is_Overriding_Subprogram;\n \n    --------------------------\n    -- Is_Tag_Indeterminate --"}, {"sha": "f1a86c054a1f67550e2bcd26affe46a338e8dff0", "filename": "gcc/ada/sem_disp.ads", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc821e65107ed263200b8ee6650f0704311757c9/gcc%2Fada%2Fsem_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc821e65107ed263200b8ee6650f0704311757c9/gcc%2Fada%2Fsem_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.ads?ref=cc821e65107ed263200b8ee6650f0704311757c9", "patch": "@@ -100,6 +100,24 @@ package Sem_Disp is\n    type Subprogram_List is array (Nat range <>) of Entity_Id;\n    --  Type returned by Inherited_Subprograms function\n \n+   generic\n+      with function Find_DT (Subp : Entity_Id) return Entity_Id;\n+   package Inheritance_Utilities is\n+\n+      --  This package provides generic versions of inheritance utilities\n+      --  provided here. These versions are used in GNATprove backend to\n+      --  adapt these utilities to GNATprove specific version of visibility of\n+      --  types.\n+\n+      function Inherited_Subprograms\n+        (S               : Entity_Id;\n+         No_Interfaces   : Boolean := False;\n+         Interfaces_Only : Boolean := False;\n+         One_Only        : Boolean := False) return Subprogram_List;\n+\n+      function Is_Overriding_Subprogram (E : Entity_Id) return Boolean;\n+   end Inheritance_Utilities;\n+\n    function Inherited_Subprograms\n      (S               : Entity_Id;\n       No_Interfaces   : Boolean := False;"}]}