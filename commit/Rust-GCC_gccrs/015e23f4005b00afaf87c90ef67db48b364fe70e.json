{"sha": "015e23f4005b00afaf87c90ef67db48b364fe70e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE1ZTIzZjQwMDViMDBhZmFmODdjOTBlZjY3ZGI0OGIzNjRmZTcwZQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-11-12T18:41:31Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-11-12T18:41:31Z"}, "message": "re PR tree-optimization/13827 ((a & b) != (c & b) should be transformed to ((a^c) & b) !=0)\n\n\n\tPR tree-optimization/13827\n\t* fold-const.c (fold_binary) <EQ_EXPR, NE_EXPR>: Fold (X&C) op (Y&C)\n\tas ((X^Y)&C) op 0.\n\n\t* gcc.dg/fold-eqand-1.c: New test case.\n\nFrom-SVN: r118727", "tree": {"sha": "b02ba3cb889c222125601c7fa415210e5d22fcf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b02ba3cb889c222125601c7fa415210e5d22fcf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/015e23f4005b00afaf87c90ef67db48b364fe70e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/015e23f4005b00afaf87c90ef67db48b364fe70e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/015e23f4005b00afaf87c90ef67db48b364fe70e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/015e23f4005b00afaf87c90ef67db48b364fe70e/comments", "author": null, "committer": null, "parents": [{"sha": "c0493b13fb859a27d5554c18ff11db2c1ebb7241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0493b13fb859a27d5554c18ff11db2c1ebb7241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0493b13fb859a27d5554c18ff11db2c1ebb7241"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "e1a2a6553caea405271a2f9ffc300b9657e9b129", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/015e23f4005b00afaf87c90ef67db48b364fe70e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/015e23f4005b00afaf87c90ef67db48b364fe70e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=015e23f4005b00afaf87c90ef67db48b364fe70e", "patch": "@@ -1,3 +1,9 @@\n+2006-11-12  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR tree-optimization/13827\n+\t* fold-const.c (fold_binary) <EQ_EXPR, NE_EXPR>: Fold (X&C) op (Y&C)\n+\tas ((X^Y)&C) op 0.\n+\n 2006-11-12  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* cfgloopmanip.c (update_single_exit_for_duplicated_loop,"}, {"sha": "cf1df69c468376fade3df7799160f4c97bb1c7cb", "filename": "gcc/fold-const.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/015e23f4005b00afaf87c90ef67db48b364fe70e/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/015e23f4005b00afaf87c90ef67db48b364fe70e/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=015e23f4005b00afaf87c90ef67db48b364fe70e", "patch": "@@ -10818,6 +10818,49 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\t\t    TREE_OPERAND (arg0, 0),\n \t\t\t    TREE_OPERAND (arg1, 0));\n \n+      /* Fold (X & C) op (Y & C) as (X ^ Y) & C op 0\", and symmetries.  */\n+      if (TREE_CODE (arg0) == BIT_AND_EXPR\n+\t  && TREE_CODE (arg1) == BIT_AND_EXPR)\n+\t{\n+\t  tree arg00 = TREE_OPERAND (arg0, 0);\n+\t  tree arg01 = TREE_OPERAND (arg0, 1);\n+\t  tree arg10 = TREE_OPERAND (arg1, 0);\n+\t  tree arg11 = TREE_OPERAND (arg1, 1);\n+\t  tree itype = TREE_TYPE (arg0);\n+\n+\t  if (operand_equal_p (arg01, arg11, 0))\n+\t    return fold_build2 (code, type,\n+\t\t\t\tfold_build2 (BIT_AND_EXPR, itype,\n+\t\t\t\t\t     fold_build2 (BIT_XOR_EXPR, itype,\n+\t\t\t\t\t\t\t  arg00, arg10),\n+\t\t\t\t\t     arg01),\n+\t\t\t\tbuild_int_cst (itype, 0));\n+\n+\t  if (operand_equal_p (arg01, arg10, 0))\n+\t    return fold_build2 (code, type,\n+\t\t\t\tfold_build2 (BIT_AND_EXPR, itype,\n+\t\t\t\t\t     fold_build2 (BIT_XOR_EXPR, itype,\n+\t\t\t\t\t\t\t  arg00, arg11),\n+\t\t\t\t\t     arg01),\n+\t\t\t\tbuild_int_cst (itype, 0));\n+\n+\t  if (operand_equal_p (arg00, arg11, 0))\n+\t    return fold_build2 (code, type,\n+\t\t\t\tfold_build2 (BIT_AND_EXPR, itype,\n+\t\t\t\t\t     fold_build2 (BIT_XOR_EXPR, itype,\n+\t\t\t\t\t\t\t  arg01, arg10),\n+\t\t\t\t\t     arg00),\n+\t\t\t\tbuild_int_cst (itype, 0));\n+\n+\t  if (operand_equal_p (arg00, arg10, 0))\n+\t    return fold_build2 (code, type,\n+\t\t\t\tfold_build2 (BIT_AND_EXPR, itype,\n+\t\t\t\t\t     fold_build2 (BIT_XOR_EXPR, itype,\n+\t\t\t\t\t\t\t  arg01, arg11),\n+\t\t\t\t\t     arg00),\n+\t\t\t\tbuild_int_cst (itype, 0));\n+\t}\n+\n       return NULL_TREE;\n \n     case LT_EXPR:"}, {"sha": "5a2b502b967e26528d4ee4d5d323dd7cbca2ca6c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/015e23f4005b00afaf87c90ef67db48b364fe70e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/015e23f4005b00afaf87c90ef67db48b364fe70e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=015e23f4005b00afaf87c90ef67db48b364fe70e", "patch": "@@ -1,3 +1,8 @@\n+2006-11-12  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR tree-optimization/13827\n+\t* gcc.dg/fold-eqand-1.c: New test case.\n+\n 2006-11-11  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR rtl-opt/28812"}, {"sha": "6ed5b6db0e29515040ee47e2530ba8422d53bd4f", "filename": "gcc/testsuite/gcc.dg/fold-eqand-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/015e23f4005b00afaf87c90ef67db48b364fe70e/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqand-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/015e23f4005b00afaf87c90ef67db48b364fe70e/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqand-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqand-1.c?ref=015e23f4005b00afaf87c90ef67db48b364fe70e", "patch": "@@ -0,0 +1,17 @@\n+/* PR tree-optimization/13827 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+\n+unsigned foo (unsigned a, unsigned b)\n+{\n+  return (a & 0xff00) != (b & 0xff00);\n+}\n+\n+unsigned bar (unsigned c, unsigned d)\n+{\n+  return (c & 0xff00) == (d & 0xff00);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"a \\\\^ b\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"c \\\\^ d\" 1 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */"}]}