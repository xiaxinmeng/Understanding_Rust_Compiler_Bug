{"sha": "5c972fb605d1206903a8f448984553f2987f5834", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM5NzJmYjYwNWQxMjA2OTAzYThmNDQ4OTg0NTUzZjI5ODdmNTgzNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-12-04T13:25:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-12-04T13:25:07Z"}, "message": "tsan.c (instrument_expr): If expr_ptr isn't a gimple val, first store it into a SSA_NAME.\n\n\t* tsan.c (instrument_expr): If expr_ptr isn't a gimple val, first\n\tstore it into a SSA_NAME.\n\nFrom-SVN: r194135", "tree": {"sha": "ebbf0c8374c45d0076ec095c736d68329b9689f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebbf0c8374c45d0076ec095c736d68329b9689f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c972fb605d1206903a8f448984553f2987f5834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c972fb605d1206903a8f448984553f2987f5834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c972fb605d1206903a8f448984553f2987f5834", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c972fb605d1206903a8f448984553f2987f5834/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dfc8400779bdb0b1d798cb399360d49e12540c67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfc8400779bdb0b1d798cb399360d49e12540c67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfc8400779bdb0b1d798cb399360d49e12540c67"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "f1ffb2414a6ccb2d539c4f9cf0a68322ec550f8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c972fb605d1206903a8f448984553f2987f5834/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c972fb605d1206903a8f448984553f2987f5834/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c972fb605d1206903a8f448984553f2987f5834", "patch": "@@ -1,4 +1,7 @@\n-2012-12-03  Jakub Jelinek  <jakub@redhat.com>\n+2012-12-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tsan.c (instrument_expr): If expr_ptr isn't a gimple val, first\n+\tstore it into a SSA_NAME.\n \n \tPR sanitizer/55439\n \t* Makefile.in (tsan.o): Depend on tree-ssa-propagate.h."}, {"sha": "a87e8469a478d97086ffc26deefe2cdae9245848", "filename": "gcc/tsan.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c972fb605d1206903a8f448984553f2987f5834/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c972fb605d1206903a8f448984553f2987f5834/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=5c972fb605d1206903a8f448984553f2987f5834", "patch": "@@ -93,10 +93,11 @@ is_vptr_store (gimple stmt, tree expr, bool is_write)\n static bool\n instrument_expr (gimple_stmt_iterator gsi, tree expr, bool is_write)\n {\n-  tree base, rhs, expr_type, expr_ptr, builtin_decl;\n+  tree base, rhs, expr_ptr, builtin_decl;\n   basic_block bb;\n   HOST_WIDE_INT size;\n   gimple stmt, g;\n+  gimple_seq seq;\n   location_t loc;\n \n   size = int_size_in_bytes (TREE_TYPE (expr));\n@@ -139,21 +140,25 @@ instrument_expr (gimple_stmt_iterator gsi, tree expr, bool is_write)\n   rhs = is_vptr_store (stmt, expr, is_write);\n   gcc_checking_assert (rhs != NULL || is_gimple_addressable (expr));\n   expr_ptr = build_fold_addr_expr (unshare_expr (expr));\n-  if (rhs == NULL)\n+  seq = NULL;\n+  if (!is_gimple_val (expr_ptr))\n     {\n-      expr_type = TREE_TYPE (expr);\n-      while (TREE_CODE (expr_type) == ARRAY_TYPE)\n-\texpr_type = TREE_TYPE (expr_type);\n-      size = int_size_in_bytes (expr_type);\n-      g = gimple_build_call (get_memory_access_decl (is_write, size),\n-\t\t\t     1, expr_ptr);\n+      g = gimple_build_assign (make_ssa_name (TREE_TYPE (expr_ptr), NULL),\n+\t\t\t       expr_ptr);\n+      expr_ptr = gimple_assign_lhs (g);\n+      gimple_set_location (g, loc);\n+      gimple_seq_add_stmt_without_update (&seq, g);\n     }\n+  if (rhs == NULL)\n+    g = gimple_build_call (get_memory_access_decl (is_write, size),\n+\t\t\t   1, expr_ptr);\n   else\n     {\n       builtin_decl = builtin_decl_implicit (BUILT_IN_TSAN_VPTR_UPDATE);\n       g = gimple_build_call (builtin_decl, 1, expr_ptr);\n     }\n   gimple_set_location (g, loc);\n+  gimple_seq_add_stmt_without_update (&seq, g);\n   /* Instrumentation for assignment of a function result\n      must be inserted after the call.  Instrumentation for\n      reads of function arguments must be inserted before the call.\n@@ -170,13 +175,13 @@ instrument_expr (gimple_stmt_iterator gsi, tree expr, bool is_write)\n \t  bb = gsi_bb (gsi);\n \t  e = find_fallthru_edge (bb->succs);\n \t  if (e)\n-\t    gsi_insert_seq_on_edge_immediate (e, g);\n+\t    gsi_insert_seq_on_edge_immediate (e, seq);\n \t}\n       else\n-\tgsi_insert_after (&gsi, g, GSI_NEW_STMT);\n+\tgsi_insert_seq_after (&gsi, seq, GSI_NEW_STMT);\n     }\n   else\n-    gsi_insert_before (&gsi, g, GSI_SAME_STMT);\n+    gsi_insert_seq_before (&gsi, seq, GSI_SAME_STMT);\n \n   return true;\n }"}]}