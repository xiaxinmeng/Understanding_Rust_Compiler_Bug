{"sha": "0192ef204cbc1b80a1da59dae7b275cb7de67c81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE5MmVmMjA0Y2JjMWI4MGExZGE1OWRhZTdiMjc1Y2I3ZGU2N2M4MQ==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2012-01-04T14:04:24Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2012-01-04T14:04:24Z"}, "message": "re PR fortran/50981 ([OOP] Wrong-code for scalarizing ELEMENTAL call with absent OPTIONAL argument)\n\n\tPR fortran/50981\n\t* trans.h (struct gfc_ss_info): New field data::scalar::can_be_null_ref\n\t* trans-array.c: If the reference can be NULL, save the reference\n\tinstead of the value.\n\t* trans-expr.c (gfc_conv_expr): If we have saved a reference,\n\tdereference it.\n\nFrom-SVN: r182874", "tree": {"sha": "35ecccc993dae3c75c7845b088145f81382da192", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35ecccc993dae3c75c7845b088145f81382da192"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0192ef204cbc1b80a1da59dae7b275cb7de67c81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0192ef204cbc1b80a1da59dae7b275cb7de67c81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0192ef204cbc1b80a1da59dae7b275cb7de67c81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0192ef204cbc1b80a1da59dae7b275cb7de67c81/comments", "author": null, "committer": null, "parents": [{"sha": "591823cc9aba6f6943f7204df365bf2f0ca593ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/591823cc9aba6f6943f7204df365bf2f0ca593ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/591823cc9aba6f6943f7204df365bf2f0ca593ca"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "3f6c5dcebd7ad7ac544faebe5d46818003f0d4ec", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0192ef204cbc1b80a1da59dae7b275cb7de67c81/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0192ef204cbc1b80a1da59dae7b275cb7de67c81/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0192ef204cbc1b80a1da59dae7b275cb7de67c81", "patch": "@@ -1,3 +1,12 @@\n+2012-01-04  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/50981\n+\t* trans.h (struct gfc_ss_info): New field data::scalar::can_be_null_ref\n+\t* trans-array.c: If the reference can be NULL, save the reference\n+\tinstead of the value.\n+\t* trans-expr.c (gfc_conv_expr): If we have saved a reference,\n+\tdereference it.\n+\n 2012-01-04  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* trans-expr.c (gfc_conv_expr): Move address taking..."}, {"sha": "a9a060d820601002181e1cd105bec518be470136", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0192ef204cbc1b80a1da59dae7b275cb7de67c81/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0192ef204cbc1b80a1da59dae7b275cb7de67c81/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=0192ef204cbc1b80a1da59dae7b275cb7de67c81", "patch": "@@ -2422,10 +2422,21 @@ gfc_add_loop_ss_code (gfc_loopinfo * loop, gfc_ss * ss, bool subscript,\n \t  break;\n \n \tcase GFC_SS_REFERENCE:\n-\t  /* Scalar argument to elemental procedure.  Evaluate this\n-\t     now.  */\n+\t  /* Scalar argument to elemental procedure.  */\n \t  gfc_init_se (&se, NULL);\n-\t  gfc_conv_expr (&se, expr);\n+\t  if (ss_info->data.scalar.can_be_null_ref)\n+\t    {\n+\t      /* If the actual argument can be absent (in other words, it can\n+\t\t be a NULL reference), don't try to evaluate it; pass instead\n+\t\t the reference directly.  */\n+\t      gfc_conv_expr_reference (&se, expr);\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Otherwise, evaluate the argument outside the loop and pass\n+\t\t a reference to the value.  */\n+\t      gfc_conv_expr (&se, expr);\n+\t    }\n \t  gfc_add_block_to_block (&outer_loop->pre, &se.pre);\n \t  gfc_add_block_to_block (&outer_loop->post, &se.post);\n \t  if (gfc_is_class_scalar_expr (expr))"}, {"sha": "54572fbf3dbb174ae75665d9ea1f516abdb6b254", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0192ef204cbc1b80a1da59dae7b275cb7de67c81/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0192ef204cbc1b80a1da59dae7b275cb7de67c81/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=0192ef204cbc1b80a1da59dae7b275cb7de67c81", "patch": "@@ -5331,6 +5331,11 @@ gfc_conv_expr (gfc_se * se, gfc_expr * expr)\n       /* Substitute a scalar expression evaluated outside the scalarization\n          loop.  */\n       se->expr = ss_info->data.scalar.value;\n+      /* If the reference can be NULL, the value field contains the reference,\n+\t not the value the reference points to (see gfc_add_loop_ss_code).  */\n+      if (ss_info->data.scalar.can_be_null_ref)\n+\tse->expr = build_fold_indirect_ref_loc (input_location, se->expr);\n+\n       se->string_length = ss_info->string_length;\n       gfc_advance_se_ss_chain (se);\n       return;"}, {"sha": "61a48172e5c7b057be7ee61760c702263636516a", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0192ef204cbc1b80a1da59dae7b275cb7de67c81/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0192ef204cbc1b80a1da59dae7b275cb7de67c81/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=0192ef204cbc1b80a1da59dae7b275cb7de67c81", "patch": "@@ -145,8 +145,9 @@ typedef enum\n   GFC_SS_SCALAR,\n \n   /* Like GFC_SS_SCALAR it evaluates the expression outside the\n-     loop. Is always evaluated as a reference to the temporary.\n-     Used for elemental function arguments.  */\n+     loop.  Is always evaluated as a reference to the temporary, unless\n+     temporary evaluation can result in a NULL pointer dereferencing (case of\n+     optional arguments).  Used for elemental function arguments.  */\n   GFC_SS_REFERENCE,\n \n   /* An array section.  Scalarization indices will be substituted during\n@@ -196,6 +197,9 @@ typedef struct gfc_ss_info\n     struct\n     {\n       tree value;\n+      /* Tells whether the reference can be null in the GFC_SS_REFERENCE case.\n+\t Used to handle elemental procedures' optional arguments.  */\n+      bool can_be_null_ref;\n     }\n     scalar;\n "}]}