{"sha": "11d6828d7428dff868c3788dfbcbaa8189d2fa50", "node_id": "C_kwDOANBUbNoAKDExZDY4MjhkNzQyOGRmZjg2OGMzNzg4ZGZiY2JhYTgxODlkMmZhNTA", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-30T18:40:07Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-04-05T08:20:48Z"}, "message": "expand: Add stub function for attribute expansion\n\nAdd a stub function and utility functions that should be called on some\nnodes to expand attribute procedural macros.\n\ngcc/rust/ChangeLog:\n\n\t* expand/rust-expand-visitor.cc (ExpandVisitor::expand_outer_attribute):\n\tStub for a single attribute expansion.\n\t(ExpandVisitor::visit_outer_attrs): Visit the attributes to\n\texpand on a given item.\n\t* expand/rust-expand-visitor.h: Add function prototypes.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "287face1623fd8a967b30111bf79d66927486afa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/287face1623fd8a967b30111bf79d66927486afa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11d6828d7428dff868c3788dfbcbaa8189d2fa50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11d6828d7428dff868c3788dfbcbaa8189d2fa50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11d6828d7428dff868c3788dfbcbaa8189d2fa50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11d6828d7428dff868c3788dfbcbaa8189d2fa50/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ad6a78a4ae42358e1f2cbd36f26740ae05e2146", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad6a78a4ae42358e1f2cbd36f26740ae05e2146", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ad6a78a4ae42358e1f2cbd36f26740ae05e2146"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "f93accdeb4060f28e1a1dd580726e9832d2533b7", "filename": "gcc/rust/expand/rust-expand-visitor.cc", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d6828d7428dff868c3788dfbcbaa8189d2fa50/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d6828d7428dff868c3788dfbcbaa8189d2fa50/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc?ref=11d6828d7428dff868c3788dfbcbaa8189d2fa50", "patch": "@@ -1349,6 +1349,33 @@ ExpandVisitor::visit (AST::BareFunctionType &type)\n     visit (type.get_return_type ());\n }\n \n+template <typename T>\n+void\n+ExpandVisitor::expand_outer_attribute (T &item, AST::SimplePath &path)\n+{\n+  // FIXME: Implement outer attribute expansion\n+}\n+\n+template <typename T>\n+void\n+ExpandVisitor::visit_outer_attrs (T &item, std::vector<AST::Attribute> &attrs)\n+{\n+  for (auto it = attrs.begin (); it != attrs.end (); /* erase => No increment*/)\n+    {\n+      auto current = *it;\n+\n+      it = attrs.erase (it);\n+      expand_outer_attribute (item, current.get_path ());\n+    }\n+}\n+\n+template <typename T>\n+void\n+ExpandVisitor::visit_outer_attrs (T &item)\n+{\n+  visit_outer_attrs (item, item.get_outer_attrs ());\n+}\n+\n template <typename T>\n void\n ExpandVisitor::expand_inner_attribute (T &item, AST::SimplePath &path)"}, {"sha": "e0ff37cf1750d0d4675e14c65e702431379d3c69", "filename": "gcc/rust/expand/rust-expand-visitor.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d6828d7428dff868c3788dfbcbaa8189d2fa50/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d6828d7428dff868c3788dfbcbaa8189d2fa50/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h?ref=11d6828d7428dff868c3788dfbcbaa8189d2fa50", "patch": "@@ -313,6 +313,14 @@ class ExpandVisitor : public AST::ASTVisitor\n   void visit (AST::InferredType &) override;\n   void visit (AST::BareFunctionType &type) override;\n \n+  template <typename T>\n+  void expand_outer_attribute (T &item, AST::SimplePath &path);\n+\n+  template <typename T>\n+  void visit_outer_attrs (T &item, std::vector<AST::Attribute> &attrs);\n+\n+  template <typename T> void visit_outer_attrs (T &item);\n+\n   template <typename T>\n   void expand_inner_attribute (T &item, AST::SimplePath &Path);\n "}]}