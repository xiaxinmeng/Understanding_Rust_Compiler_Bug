{"sha": "463a54e5d4956143f81c1f23b91cbd2d93855741", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYzYTU0ZTVkNDk1NjE0M2Y4MWMxZjIzYjkxY2JkMmQ5Mzg1NTc0MQ==", "commit": {"author": {"name": "Szabolcs Nagy", "email": "szabolcs.nagy@arm.com", "date": "2020-06-02T15:44:41Z"}, "committer": {"name": "Szabolcs Nagy", "email": "szabolcs.nagy@arm.com", "date": "2020-07-13T12:49:20Z"}, "message": "aarch64: fix return address access with pac [PR94891][PR94791]\n\nThis is a big hammer fix for __builtin_return_address (PR target/94891)\nreturning signed addresses (sometimes, depending on wether lr happens\nto be signed or not at the time of call which depends on optimizations),\nand similarly -pg may pass signed return address to _mcount\n(PR target/94791).\n\nAt the time of return address expansion we don't know if it's signed or\nnot so it is done unconditionally.\n\n2020-07-13  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n\ngcc/ChangeLog:\n\n\tPR target/94891\n\tPR target/94791\n\t* config/aarch64/aarch64-protos.h (aarch64_return_addr_rtx): Declare.\n\t* config/aarch64/aarch64.c (aarch64_return_addr_rtx): New.\n\t(aarch64_return_addr): Use aarch64_return_addr_rtx.\n\t* config/aarch64/aarch64.h (PROFILE_HOOK): Likewise.", "tree": {"sha": "ac8776c9326fc4198a1c32126981329a3e9a1a0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac8776c9326fc4198a1c32126981329a3e9a1a0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/463a54e5d4956143f81c1f23b91cbd2d93855741", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/463a54e5d4956143f81c1f23b91cbd2d93855741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/463a54e5d4956143f81c1f23b91cbd2d93855741", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/463a54e5d4956143f81c1f23b91cbd2d93855741/comments", "author": {"login": "nsz-arm", "id": 30925343, "node_id": "MDQ6VXNlcjMwOTI1MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/30925343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsz-arm", "html_url": "https://github.com/nsz-arm", "followers_url": "https://api.github.com/users/nsz-arm/followers", "following_url": "https://api.github.com/users/nsz-arm/following{/other_user}", "gists_url": "https://api.github.com/users/nsz-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsz-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsz-arm/subscriptions", "organizations_url": "https://api.github.com/users/nsz-arm/orgs", "repos_url": "https://api.github.com/users/nsz-arm/repos", "events_url": "https://api.github.com/users/nsz-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/nsz-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nsz-arm", "id": 30925343, "node_id": "MDQ6VXNlcjMwOTI1MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/30925343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsz-arm", "html_url": "https://github.com/nsz-arm", "followers_url": "https://api.github.com/users/nsz-arm/followers", "following_url": "https://api.github.com/users/nsz-arm/following{/other_user}", "gists_url": "https://api.github.com/users/nsz-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsz-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsz-arm/subscriptions", "organizations_url": "https://api.github.com/users/nsz-arm/orgs", "repos_url": "https://api.github.com/users/nsz-arm/repos", "events_url": "https://api.github.com/users/nsz-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/nsz-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5834e96a08fd8b86a42428f38a95903d2f1de202", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5834e96a08fd8b86a42428f38a95903d2f1de202", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5834e96a08fd8b86a42428f38a95903d2f1de202"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "839f801a31b8d0150143fbe36ea843947f6e0490", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463a54e5d4956143f81c1f23b91cbd2d93855741/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463a54e5d4956143f81c1f23b91cbd2d93855741/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=463a54e5d4956143f81c1f23b91cbd2d93855741", "patch": "@@ -578,6 +578,7 @@ int aarch64_vec_fpconst_pow_of_2 (rtx);\n rtx aarch64_eh_return_handler_rtx (void);\n rtx aarch64_mask_from_zextract_ops (rtx, rtx);\n const char *aarch64_output_move_struct (rtx *operands);\n+rtx aarch64_return_addr_rtx (void);\n rtx aarch64_return_addr (int, rtx);\n rtx aarch64_simd_gen_const_vector_dup (machine_mode, HOST_WIDE_INT);\n bool aarch64_simd_mem_operand_p (rtx);"}, {"sha": "26cbeff9ac02cdaa75f15707049628e687c8bc86", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463a54e5d4956143f81c1f23b91cbd2d93855741/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463a54e5d4956143f81c1f23b91cbd2d93855741/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=463a54e5d4956143f81c1f23b91cbd2d93855741", "patch": "@@ -10825,6 +10825,24 @@ aarch64_initial_elimination_offset (unsigned from, unsigned to)\n   return cfun->machine->frame.frame_size;\n }\n \n+\n+/* Get return address without mangling.  */\n+\n+rtx\n+aarch64_return_addr_rtx (void)\n+{\n+  rtx val = get_hard_reg_initial_val (Pmode, LR_REGNUM);\n+  /* Note: aarch64_return_address_signing_enabled only\n+     works after cfun->machine->frame.laid_out is set,\n+     so here we don't know if the return address will\n+     be signed or not.  */\n+  rtx lr = gen_rtx_REG (Pmode, LR_REGNUM);\n+  emit_move_insn (lr, val);\n+  emit_insn (GEN_FCN (CODE_FOR_xpaclri) ());\n+  return lr;\n+}\n+\n+\n /* Implement RETURN_ADDR_RTX.  We do not support moving back to a\n    previous frame.  */\n \n@@ -10833,7 +10851,7 @@ aarch64_return_addr (int count, rtx frame ATTRIBUTE_UNUSED)\n {\n   if (count != 0)\n     return const0_rtx;\n-  return get_hard_reg_initial_val (Pmode, LR_REGNUM);\n+  return aarch64_return_addr_rtx ();\n }\n \n static void"}, {"sha": "d3e89d1789a23c2fa4d62744084adfdedac6a116", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463a54e5d4956143f81c1f23b91cbd2d93855741/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463a54e5d4956143f81c1f23b91cbd2d93855741/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=463a54e5d4956143f81c1f23b91cbd2d93855741", "patch": "@@ -1133,7 +1133,7 @@ typedef struct\n #define PROFILE_HOOK(LABEL)\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     rtx fun, lr;\t\t\t\t\t\t\t\\\n-    lr = get_hard_reg_initial_val (Pmode, LR_REGNUM);\t\t\t\\\n+    lr = aarch64_return_addr_rtx ();\t\t\t\t\t\\\n     fun = gen_rtx_SYMBOL_REF (Pmode, MCOUNT_NAME);\t\t\t\\\n     emit_library_call (fun, LCT_NORMAL, VOIDmode, lr, Pmode);\t\t\\\n   }"}]}