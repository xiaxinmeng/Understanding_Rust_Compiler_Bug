{"sha": "e7f13528d26e40c1f2cef95b9d821e063395c8da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdmMTM1MjhkMjZlNDBjMWYyY2VmOTViOWQ4MjFlMDYzMzk1YzhkYQ==", "commit": {"author": {"name": "Graeme Peterson", "email": "gp@qnx.com", "date": "2003-06-19T20:18:22Z"}, "committer": {"name": "Graeme Peterson", "email": "gp@gcc.gnu.org", "date": "2003-06-19T20:18:22Z"}, "message": "gcc.c (target_sysroot_suffix, [...]): New.\n\n* gcc.c (target_sysroot_suffix, target_sysroot_hdrs_suffix,\nSYSROOT_SUFFIX_SPEC, SYSROOT_HEADERS_SUFFIX_SPEC, sysroot_suffix_spec,\nsysroot_hdrs_suffix_spec): New.\n(static_specs): Initialize new variables.\n(add_sysroot_suffix_prefix, do_spec_1, main): Use new variables.\n* doc/tm.texi (SYSROOT_SUFFIX_SPEC, SYSROOT_HEADERS_SUFFIX_SPEC):\nNew macros.\n\nFrom-SVN: r68223", "tree": {"sha": "2024f46158cf2fe259848bc8db2acaa1646bba0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2024f46158cf2fe259848bc8db2acaa1646bba0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7f13528d26e40c1f2cef95b9d821e063395c8da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f13528d26e40c1f2cef95b9d821e063395c8da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7f13528d26e40c1f2cef95b9d821e063395c8da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f13528d26e40c1f2cef95b9d821e063395c8da/comments", "author": null, "committer": null, "parents": [{"sha": "97460e9a72f58b34eb0b46cf672cb469a759e5fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97460e9a72f58b34eb0b46cf672cb469a759e5fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97460e9a72f58b34eb0b46cf672cb469a759e5fb"}], "stats": {"total": 80, "additions": 77, "deletions": 3}, "files": [{"sha": "161cbf0a03feb9a3fad6be9c873f037318528946", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f13528d26e40c1f2cef95b9d821e063395c8da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f13528d26e40c1f2cef95b9d821e063395c8da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7f13528d26e40c1f2cef95b9d821e063395c8da", "patch": "@@ -1,3 +1,13 @@\n+2003-06-19  Graeme Peterson <gp@qnx.com>\n+\n+\t* gcc.c (target_sysroot_suffix, target_sysroot_hdrs_suffix,\n+\tSYSROOT_SUFFIX_SPEC, SYSROOT_HEADERS_SUFFIX_SPEC, sysroot_suffix_spec,\n+\tsysroot_hdrs_suffix_spec): New.\n+\t(static_specs): Initialize new variables.\n+\t(add_sysroot_suffix_prefix, do_spec_1, main): Use new variables.\n+\t* doc/tm.texi (SYSROOT_SUFFIX_SPEC, SYSROOT_HEADERS_SUFFIX_SPEC):\n+\tNew macros.\n+\n 2003-06-19  Andreas Jaeger  <aj@suse.de>\n \n \t* c-aux-info.c: Convert to ISO C90."}, {"sha": "52697e157b6817156473e976900a80a7704a2eb2", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f13528d26e40c1f2cef95b9d821e063395c8da/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f13528d26e40c1f2cef95b9d821e063395c8da/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=e7f13528d26e40c1f2cef95b9d821e063395c8da", "patch": "@@ -320,6 +320,19 @@ blanks that names one of the recognized thread models.  @code{%*}, the\n default value of this macro, will expand to the value of\n @code{thread_file} set in @file{config.gcc}.\n \n+@findex SYSROOT_SUFFIX_SPEC\n+@item SYSROOT_SUFFIX_SPEC\n+Define this macro to add a suffix to the target sysroot when GCC is \n+configured with a sysroot.  This will cause GCC to search for usr/lib, \n+et al, within sysroot+suffix. \n+\n+@findex SYSROOT_HEADERS_SUFFIX_SPEC\n+@item SYSROOT_HEADERS_SUFFIX_SPEC\n+Define this macro to add a headers_suffix to the target sysroot when \n+GCC is configured with a sysroot.  This will cause GCC to pass the \n+updated sysroot+headers_suffix to CPP@, causing it to search for\n+usr/include, et al, within sysroot+headers_suffix.\n+\n @findex EXTRA_SPECS\n @item EXTRA_SPECS\n Define this macro to provide additional specifications to put in the"}, {"sha": "d599e4a84e824715e1ac75754423e650c91489cb", "filename": "gcc/gcc.c", "status": "modified", "additions": 54, "deletions": 3, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f13528d26e40c1f2cef95b9d821e063395c8da/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f13528d26e40c1f2cef95b9d821e063395c8da/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=e7f13528d26e40c1f2cef95b9d821e063395c8da", "patch": "@@ -212,6 +212,14 @@ static const char *target_system_root = 0;\n \n static int target_system_root_changed;\n \n+/* Nonzero means append this string to target_system_root.  */\n+\n+static const char *target_sysroot_suffix = 0;\n+\n+/* Nonzero means append this string to target_system_root for headers.  */\n+\n+static const char *target_sysroot_hdrs_suffix = 0;\n+\n /* Nonzero means write \"temp\" files in source directory\n    and use the source file's name in them, and don't delete them.  */\n \n@@ -703,6 +711,14 @@ proper position among the other output files.  */\n # define STARTFILE_PREFIX_SPEC \"\"\n #endif\n \n+#ifndef SYSROOT_SUFFIX_SPEC\n+# define SYSROOT_SUFFIX_SPEC \"\"\n+#endif\n+\n+#ifndef SYSROOT_HEADERS_SUFFIX_SPEC\n+# define SYSROOT_HEADERS_SUFFIX_SPEC \"\"\n+#endif\n+\n static const char *asm_debug;\n static const char *cpp_spec = CPP_SPEC;\n static const char *cc1_spec = CC1_SPEC;\n@@ -720,6 +736,8 @@ static const char *linker_name_spec = LINKER_NAME;\n static const char *link_command_spec = LINK_COMMAND_SPEC;\n static const char *link_libgcc_spec = LINK_LIBGCC_SPEC;\n static const char *startfile_prefix_spec = STARTFILE_PREFIX_SPEC;\n+static const char *sysroot_suffix_spec = SYSROOT_SUFFIX_SPEC;\n+static const char *sysroot_hdrs_suffix_spec = SYSROOT_HEADERS_SUFFIX_SPEC;\n \n /* Standard options to cpp, cc1, and as, to reduce duplication in specs.\n    There should be no need to override these in target dependent files,\n@@ -1499,6 +1517,8 @@ static struct spec_list static_specs[] =\n   INIT_STATIC_SPEC (\"md_startfile_prefix\",\t&md_startfile_prefix),\n   INIT_STATIC_SPEC (\"md_startfile_prefix_1\",\t&md_startfile_prefix_1),\n   INIT_STATIC_SPEC (\"startfile_prefix_spec\",\t&startfile_prefix_spec),\n+  INIT_STATIC_SPEC (\"sysroot_suffix_spec\",\t&sysroot_suffix_spec),\n+  INIT_STATIC_SPEC (\"sysroot_hdrs_suffix_spec\",\t&sysroot_hdrs_suffix_spec),\n };\n \n #ifdef EXTRA_SPECS\t\t/* additional specs needed */\n@@ -2611,7 +2631,10 @@ add_sysrooted_prefix (pprefix, prefix, component, priority,\n \n   if (target_system_root)\n     {\n+      if (target_sysroot_suffix)\n+\t  prefix = concat (target_sysroot_suffix, prefix, NULL);\n       prefix = concat (target_system_root, prefix, NULL);\n+\n       /* We have to override this because GCC's notion of sysroot\n \t moves along with GCC.  */\n       component = \"GCC\";\n@@ -4824,12 +4847,15 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t\t  do_spec_1 (\" \", 0, NULL);\n \t\t}\n \n-\t      if (target_system_root_changed)\n+\t      if (target_system_root_changed ||\n+\t\t  (target_system_root && target_sysroot_hdrs_suffix))\n \t\t{\n \t\t  do_spec_1 (\"-isysroot\", 1, NULL);\n \t\t  /* Make this a separate argument.  */\n \t\t  do_spec_1 (\" \", 0, NULL);\n \t\t  do_spec_1 (target_system_root, 1, NULL);\n+\t\t  if (target_sysroot_hdrs_suffix)\n+\t\t    do_spec_1 (target_sysroot_hdrs_suffix, 1, NULL);\n \t\t  do_spec_1 (\" \", 0, NULL);\n \t\t}\n \n@@ -5040,8 +5066,13 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t    /* We assume there is a directory\n \t       separator at the end of this string.  */\n \t    if (target_system_root)\n-\t      obstack_grow (&obstack, target_system_root, \n-\t\t\t    strlen (target_system_root));\n+\t      { \n+\t        obstack_grow (&obstack, target_system_root, \n+\t\t\t      strlen (target_system_root));\n+\t\tif (target_sysroot_suffix)\n+\t\t  obstack_grow (&obstack, target_sysroot_suffix, \n+\t\t\t\tstrlen (target_sysroot_suffix));\n+\t      }\n \t    break;\n \n \t  case 'S':\n@@ -6124,6 +6155,26 @@ main (argc, argv)\n \t}\n     }\n \n+  /* Process sysroot_suffix_spec. */\n+  if (*sysroot_suffix_spec != 0\n+      && do_spec_2 (sysroot_suffix_spec) == 0)\n+    {\n+      if (argbuf_index > 1)\n+        error (\"spec failure: more than one arg to SYSROOT_SUFFIX_SPEC.\");\n+      else if (argbuf_index == 1)\n+        target_sysroot_suffix = xstrdup (argbuf[argbuf_index -1]);\n+    }\n+\n+  /* Process sysroot_hdrs_suffix_spec. */\n+  if (*sysroot_hdrs_suffix_spec != 0\n+      && do_spec_2 (sysroot_hdrs_suffix_spec) == 0)\n+    {\n+      if (argbuf_index > 1)\n+        error (\"spec failure: more than one arg to SYSROOT_HEADERS_SUFFIX_SPEC.\");\n+      else if (argbuf_index == 1)\n+        target_sysroot_hdrs_suffix = xstrdup (argbuf[argbuf_index -1]);\n+    }\n+\n   /* Look for startfiles in the standard places.  */\n   if (*startfile_prefix_spec != 0\n       && do_spec_2 (startfile_prefix_spec) == 0"}]}