{"sha": "872da9a6f664a06d73c987aa0cb2e5b830158a10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODcyZGE5YTZmNjY0YTA2ZDczYzk4N2FhMGNiMmU1YjgzMDE1OGExMA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-03-26T02:56:47Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-07-28T02:48:39Z"}, "message": "Add the member integer_to_sse to processor_cost as a cost simulation for movd/pinsrd. It will be used to calculate the cost of vec_construct.\n\ngcc/ChangeLog:\n\n\tPR target/99881\n\t* config/i386/i386.h (processor_costs): Add new member\n\tinteger_to_sse.\n\t* config/i386/x86-tune-costs.h (ix86_size_cost, i386_cost,\n\ti486_cost, pentium_cost, lakemont_cost, pentiumpro_cost,\n\tgeode_cost, k6_cost, athlon_cost, k8_cost, amdfam10_cost,\n\tbdver_cost, znver1_cost, znver2_cost, znver3_cost,\n\tbtver1_cost, btver2_cost, btver3_cost, pentium4_cost,\n\tnocona_cost, atom_cost, atom_cost, slm_cost, intel_cost,\n\tgeneric_cost, core_cost): Initialize integer_to_sse same value\n\tas sse_op.\n\t(skylake_cost): Initialize integer_to_sse twice as much as sse_op.\n\t* config/i386/i386.c (ix86_builtin_vectorization_cost):\n\tUse integer_to_sse instead of sse_op to calculate the cost of\n\tvec_construct.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/99881\n\t* gcc.target/i386/pr99881.c: New test.", "tree": {"sha": "05c56597a356b312b6f5e5396d96916db40ba97a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05c56597a356b312b6f5e5396d96916db40ba97a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/872da9a6f664a06d73c987aa0cb2e5b830158a10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/872da9a6f664a06d73c987aa0cb2e5b830158a10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/872da9a6f664a06d73c987aa0cb2e5b830158a10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/872da9a6f664a06d73c987aa0cb2e5b830158a10/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af3f12e6e869adcbb1cec09cedba627d4bbf69a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af3f12e6e869adcbb1cec09cedba627d4bbf69a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af3f12e6e869adcbb1cec09cedba627d4bbf69a4"}], "stats": {"total": 82, "additions": 81, "deletions": 1}, "files": [{"sha": "ac59ebf86663e68400c2d754bbaf4446ac1614a3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872da9a6f664a06d73c987aa0cb2e5b830158a10/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872da9a6f664a06d73c987aa0cb2e5b830158a10/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=872da9a6f664a06d73c987aa0cb2e5b830158a10", "patch": "@@ -22051,7 +22051,11 @@ ix86_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n       case vec_construct:\n \t{\n \t  /* N element inserts into SSE vectors.  */\n-\t  int cost = TYPE_VECTOR_SUBPARTS (vectype) * ix86_cost->sse_op;\n+\t  int cost\n+\t    = TYPE_VECTOR_SUBPARTS (vectype) * (fp ?\n+\t\t\t\t\t\tix86_cost->sse_op\n+\t\t\t\t\t\t: ix86_cost->integer_to_sse);\n+\n \t  /* One vinserti128 for combining two SSE vectors for AVX256.  */\n \t  if (GET_MODE_BITSIZE (mode) == 256)\n \t    cost += ix86_vec_cost (mode, ix86_cost->addss);"}, {"sha": "d1e1c22599008087928982d6764f87c09fcdc0e3", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872da9a6f664a06d73c987aa0cb2e5b830158a10/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872da9a6f664a06d73c987aa0cb2e5b830158a10/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=872da9a6f664a06d73c987aa0cb2e5b830158a10", "patch": "@@ -165,6 +165,7 @@ struct processor_costs {\n   const int xmm_move, ymm_move, /* cost of moving XMM and YMM register.  */\n \t    zmm_move;\n   const int sse_to_integer;\t/* cost of moving SSE register to integer.  */\n+  const int integer_to_sse;\t/* cost of moving integer to SSE register.  */\n   const int gather_static, gather_per_elt; /* Cost of gather load is computed\n \t\t\t\t   as static + per_item * nelts. */\n   const int scatter_static, scatter_per_elt; /* Cost of gather store is"}, {"sha": "67cfa0061969b105d7d7acb868b411dc52eccd97", "filename": "gcc/config/i386/x86-tune-costs.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872da9a6f664a06d73c987aa0cb2e5b830158a10/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872da9a6f664a06d73c987aa0cb2e5b830158a10/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h?ref=872da9a6f664a06d73c987aa0cb2e5b830158a10", "patch": "@@ -102,6 +102,7 @@ struct processor_costs ix86_size_cost = {/* costs for tuning for size */\n \t\t\t\t\t   in 128bit, 256bit and 512bit */\n   3, 3, 3,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   3,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_BYTES (2),\t\t\t/* cost of moving integer to sse register.  */\n   5, 0,\t\t\t\t\t/* Gather load static, per_elt.  */\n   5, 0,\t\t\t\t\t/* Gather store static, per_elt.  */\n   0,\t\t\t\t\t/* size of l1 cache  */\n@@ -211,6 +212,7 @@ struct processor_costs i386_cost = {\t/* 386 specific costs */\n   {4, 8, 16, 32, 64},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   3,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n   4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n   0,\t\t\t\t\t/* size of l1 cache  */\n@@ -319,6 +321,7 @@ struct processor_costs i486_cost = {\t/* 486 specific costs */\n   {4, 8, 16, 32, 64},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   3,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n   4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n   4,\t\t\t\t\t/* size of l1 cache.  486 has 8kB cache\n@@ -429,6 +432,7 @@ struct processor_costs pentium_cost = {\n   {4, 8, 16, 32, 64},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   3,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n   4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n   8,\t\t\t\t\t/* size of l1 cache.  */\n@@ -530,6 +534,7 @@ struct processor_costs lakemont_cost = {\n   {4, 8, 16, 32, 64},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   3,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n   4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n   8,\t\t\t\t\t/* size of l1 cache.  */\n@@ -646,6 +651,7 @@ struct processor_costs pentiumpro_cost = {\n   {4, 8, 16, 32, 64},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   3,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n   4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n   8,\t\t\t\t\t/* size of l1 cache.  */\n@@ -753,6 +759,7 @@ struct processor_costs geode_cost = {\n   {2, 2, 8, 16, 32},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   6,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   2, 2,\t\t\t\t\t/* Gather load static, per_elt.  */\n   2, 2,\t\t\t\t\t/* Gather store static, per_elt.  */\n   64,\t\t\t\t\t/* size of l1 cache.  */\n@@ -860,6 +867,7 @@ struct processor_costs k6_cost = {\n   {2, 2, 8, 16, 32},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   6,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   2, 2,\t\t\t\t\t/* Gather load static, per_elt.  */\n   2, 2,\t\t\t\t\t/* Gather store static, per_elt.  */\n   32,\t\t\t\t\t/* size of l1 cache.  */\n@@ -973,6 +981,7 @@ struct processor_costs athlon_cost = {\n   {4, 4, 10, 10, 20},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   5,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (2),\t\t\t/* cost of moving integer to sse register.  */\n   4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n   4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n   64,\t\t\t\t\t/* size of l1 cache.  */\n@@ -1088,6 +1097,7 @@ struct processor_costs k8_cost = {\n   {4, 4, 10, 10, 20},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   5,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (2),\t\t\t/* cost of moving integer to sse register.  */\n   4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n   4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n   64,\t\t\t\t\t/* size of l1 cache.  */\n@@ -1216,6 +1226,7 @@ struct processor_costs amdfam10_cost = {\n   {4, 4, 5, 10, 20},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   3,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (2),\t\t\t/* cost of moving integer to sse register.  */\n   4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n   4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n   64,\t\t\t\t\t/* size of l1 cache.  */\n@@ -1336,6 +1347,7 @@ const struct processor_costs bdver_cost = {\n   {10, 10, 10, 40, 60},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   16,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (2),\t\t\t/* cost of moving integer to sse register.  */\n   12, 12,\t\t\t\t/* Gather load static, per_elt.  */\n   10, 10,\t\t\t\t/* Gather store static, per_elt.  */\n   16,\t\t\t\t\t/* size of l1 cache.  */\n@@ -1477,6 +1489,7 @@ struct processor_costs znver1_cost = {\n   {8, 8, 8, 16, 32},\t\t\t/* cost of unaligned stores.  */\n   2, 3, 6,\t\t\t\t/* cost of moving XMM,YMM,ZMM register.  */\n   6,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   /* VGATHERDPD is 23 uops and throughput is 9, VGATHERDPD is 35 uops,\n      throughput 12.  Approx 9 uops do not depend on vector size and every load\n      is 7 uops.  */\n@@ -1633,6 +1646,7 @@ struct processor_costs znver2_cost = {\n   2, 2, 3,\t\t\t\t/* cost of moving XMM,YMM,ZMM\n \t\t\t\t\t   register.  */\n   6,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   /* VGATHERDPD is 23 uops and throughput is 9, VGATHERDPD is 35 uops,\n      throughput 12.  Approx 9 uops do not depend on vector size and every load\n      is 7 uops.  */\n@@ -1765,6 +1779,7 @@ struct processor_costs znver3_cost = {\n   2, 2, 3,\t\t\t\t/* cost of moving XMM,YMM,ZMM\n \t\t\t\t\t   register.  */\n   6,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   /* VGATHERDPD is 15 uops and throughput is 4, VGATHERDPS is 23 uops,\n      throughput 9.  Approx 7 uops do not depend on vector size and every load\n      is 4 uops.  */\n@@ -1909,6 +1924,7 @@ struct processor_costs skylake_cost = {\n   {8, 8, 8, 8, 16},\t\t\t/* cost of unaligned stores.  */\n   2, 2, 4,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   6,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (2)+1,\t\t\t/* cost of moving integer to sse register.  */\n   20, 8,\t\t\t\t/* Gather load static, per_elt.  */\n   22, 10,\t\t\t\t/* Gather store static, per_elt.  */\n   64,\t\t\t\t\t/* size of l1 cache.  */\n@@ -2035,6 +2051,7 @@ struct processor_costs icelake_cost = {\n   {8, 8, 8, 8, 16},\t\t\t/* cost of unaligned stores.  */\n   2, 2, 4,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   6,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   20, 8,\t\t\t\t/* Gather load static, per_elt.  */\n   22, 10,\t\t\t\t/* Gather store static, per_elt.  */\n   64,\t\t\t\t\t/* size of l1 cache.  */\n@@ -2148,6 +2165,7 @@ const struct processor_costs btver1_cost = {\n   {10, 10, 12, 48, 96},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   14,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   10, 10,\t\t\t\t/* Gather load static, per_elt.  */\n   10, 10,\t\t\t\t/* Gather store static, per_elt.  */\n   32,\t\t\t\t\t/* size of l1 cache.  */\n@@ -2258,6 +2276,7 @@ const struct processor_costs btver2_cost = {\n   {10, 10, 12, 48, 96},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   14,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   10, 10,\t\t\t\t/* Gather load static, per_elt.  */\n   10, 10,\t\t\t\t/* Gather store static, per_elt.  */\n   32,\t\t\t\t\t/* size of l1 cache.  */\n@@ -2367,6 +2386,7 @@ struct processor_costs pentium4_cost = {\n   {32, 32, 32, 64, 128},\t\t/* cost of unaligned stores.  */\n   12, 24, 48,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   20,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (2),\t\t\t/* cost of moving integer to sse register.  */\n   16, 16,\t\t\t\t/* Gather load static, per_elt.  */\n   16, 16,\t\t\t\t/* Gather store static, per_elt.  */\n   8,\t\t\t\t\t/* size of l1 cache.  */\n@@ -2479,6 +2499,7 @@ struct processor_costs nocona_cost = {\n   {24, 24, 24, 48, 96},\t\t\t/* cost of unaligned stores.  */\n   6, 12, 24,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   20,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (2),\t\t\t/* cost of moving integer to sse register.  */\n   12, 12,\t\t\t\t/* Gather load static, per_elt.  */\n   12, 12,\t\t\t\t/* Gather store static, per_elt.  */\n   8,\t\t\t\t\t/* size of l1 cache.  */\n@@ -2589,6 +2610,7 @@ struct processor_costs atom_cost = {\n   {16, 16, 16, 32, 64},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   8,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   8, 8,\t\t\t\t\t/* Gather load static, per_elt.  */\n   8, 8,\t\t\t\t\t/* Gather store static, per_elt.  */\n   32,\t\t\t\t\t/* size of l1 cache.  */\n@@ -2699,6 +2721,7 @@ struct processor_costs slm_cost = {\n   {16, 16, 16, 32, 64},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   8,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   8, 8,\t\t\t\t\t/* Gather load static, per_elt.  */\n   8, 8,\t\t\t\t\t/* Gather store static, per_elt.  */\n   32,\t\t\t\t\t/* size of l1 cache.  */\n@@ -2809,6 +2832,7 @@ struct processor_costs intel_cost = {\n   {10, 10, 10, 10, 10},\t\t\t/* cost of unaligned loads.  */\n   2, 2, 2,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   4,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   6, 6,\t\t\t\t\t/* Gather load static, per_elt.  */\n   6, 6,\t\t\t\t\t/* Gather store static, per_elt.  */\n   32,\t\t\t\t\t/* size of l1 cache.  */\n@@ -2926,6 +2950,7 @@ struct processor_costs generic_cost = {\n   {6, 6, 6, 10, 15},\t\t\t/* cost of unaligned storess.  */\n   2, 3, 4,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   6,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   18, 6,\t\t\t\t/* Gather load static, per_elt.  */\n   18, 6,\t\t\t\t/* Gather store static, per_elt.  */\n   32,\t\t\t\t\t/* size of l1 cache.  */\n@@ -3049,6 +3074,7 @@ struct processor_costs core_cost = {\n   {6, 6, 6, 6, 12},\t\t\t/* cost of unaligned stores.  */\n   2, 2, 4,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   2,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   /* VGATHERDPD is 7 uops, rec throughput 5, while VGATHERDPD is 9 uops,\n      rec. throughput 6.\n      So 5 uops statically and one uops per load.  */"}, {"sha": "7ae51c8310db749e9356d1e3eb1bdfc8d1918c59", "filename": "gcc/testsuite/gcc.target/i386/pr99881.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872da9a6f664a06d73c987aa0cb2e5b830158a10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99881.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872da9a6f664a06d73c987aa0cb2e5b830158a10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99881.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99881.c?ref=872da9a6f664a06d73c987aa0cb2e5b830158a10", "patch": "@@ -0,0 +1,49 @@\n+/* PR target/99881.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -march=skylake\" } */\n+/* { dg-final { scan-assembler-not \"xmm[0-9]\" } } */\n+\n+void\n+foo (int* __restrict a, int n, int c)\n+{\n+    a[0] = n;\n+    a[1] = c;\n+}\n+\n+void\n+foo1 (int* __restrict a, int n, int b, int c, int d)\n+{\n+    a[0] = n;\n+    a[1] = b;\n+    a[2] = c;\n+    a[3] = d;\n+}\n+\n+void\n+foo2 (int* __restrict a, int n, int b, int c, int d, int e, int f, int g, int h)\n+{\n+    a[0] = n;\n+    a[1] = b;\n+    a[2] = c;\n+    a[3] = d;\n+    a[4] = e;\n+    a[5] = f;\n+    a[6] = g;\n+    a[7] = h;\n+}\n+\n+void\n+foo3 (long long* __restrict a, long long n, long long c)\n+{\n+    a[0] = n;\n+    a[1] = c;\n+}\n+\n+void\n+foo4 (long long* __restrict a, long long n, long long b, long long c, long long d)\n+{\n+    a[0] = n;\n+    a[1] = b;\n+    a[2] = c;\n+    a[3] = d;\n+}"}]}