{"sha": "1404af62dc414cc6b06e6c8c94a9922e04a7986a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQwNGFmNjJkYzQxNGNjNmIwNmU2YzhjOTRhOTkyMmUwNGE3OTg2YQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2018-12-14T20:42:40Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2018-12-14T20:42:40Z"}, "message": "[PR88407] [OpenACC] Correctly handle unseen async-arguments\n\n... which turn the operation into a no-op.\n\n\tlibgomp/\n\tPR libgomp/88407\n\t* plugin/plugin-nvptx.c (nvptx_async_test, nvptx_wait)\n\t(nvptx_wait_async): Unseen async-argument is a no-op.\n\t* testsuite/libgomp.oacc-c-c++-common/async_queue-1.c: Update.\n\t* testsuite/libgomp.oacc-c-c++-common/data-2-lib.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/data-2.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-79.c: Likewise.\n\t* testsuite/libgomp.oacc-fortran/lib-12.f90: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-71.c: Merge into...\n\t* testsuite/libgomp.oacc-c-c++-common/lib-69.c: ... this.  Update.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-77.c: Merge into...\n\t* testsuite/libgomp.oacc-c-c++-common/lib-74.c: ... this.  Update\n\nFrom-SVN: r267150", "tree": {"sha": "a2bf4329599df7113e4cafdff4f367a94ad8d94f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2bf4329599df7113e4cafdff4f367a94ad8d94f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1404af62dc414cc6b06e6c8c94a9922e04a7986a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1404af62dc414cc6b06e6c8c94a9922e04a7986a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1404af62dc414cc6b06e6c8c94a9922e04a7986a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1404af62dc414cc6b06e6c8c94a9922e04a7986a/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7de562eec26f729b1b29e9817e80fa4cebb06774", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7de562eec26f729b1b29e9817e80fa4cebb06774", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7de562eec26f729b1b29e9817e80fa4cebb06774"}], "stats": {"total": 360, "additions": 93, "deletions": 267}, "files": [{"sha": "c1f98d76e0137e47760f94c949c9f6a18a475133", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1404af62dc414cc6b06e6c8c94a9922e04a7986a/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1404af62dc414cc6b06e6c8c94a9922e04a7986a/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=1404af62dc414cc6b06e6c8c94a9922e04a7986a", "patch": "@@ -1,5 +1,18 @@\n 2018-12-14  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\tPR libgomp/88407\n+\t* plugin/plugin-nvptx.c (nvptx_async_test, nvptx_wait)\n+\t(nvptx_wait_async): Unseen async-argument is a no-op.\n+\t* testsuite/libgomp.oacc-c-c++-common/async_queue-1.c: Update.\n+\t* testsuite/libgomp.oacc-c-c++-common/data-2-lib.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/data-2.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-79.c: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/lib-12.f90: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-71.c: Merge into...\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-69.c: ... this.  Update.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-77.c: Merge into...\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-74.c: ... this.  Update\n+\n \t* testsuite/libgomp.oacc-c-c++-common/data-2-lib.c: Revise.\n \t* testsuite/libgomp.oacc-c-c++-common/data-2.c: Likewise.\n "}, {"sha": "6f9b16634b10d14cab8d567d5bdcfde67a8e7154", "filename": "libgomp/plugin/plugin-nvptx.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1404af62dc414cc6b06e6c8c94a9922e04a7986a/libgomp%2Fplugin%2Fplugin-nvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1404af62dc414cc6b06e6c8c94a9922e04a7986a/libgomp%2Fplugin%2Fplugin-nvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-nvptx.c?ref=1404af62dc414cc6b06e6c8c94a9922e04a7986a", "patch": "@@ -1539,9 +1539,8 @@ nvptx_async_test (int async)\n   struct ptx_stream *s;\n \n   s = select_stream_for_async (async, pthread_self (), false, NULL);\n-\n   if (!s)\n-    GOMP_PLUGIN_fatal (\"unknown async %d\", async);\n+    return 1;\n \n   r = CUDA_CALL_NOCHECK (cuStreamQuery, s->stream);\n   if (r == CUDA_SUCCESS)\n@@ -1596,7 +1595,7 @@ nvptx_wait (int async)\n \n   s = select_stream_for_async (async, pthread_self (), false, NULL);\n   if (!s)\n-    GOMP_PLUGIN_fatal (\"unknown async %d\", async);\n+    return;\n \n   CUDA_CALL_ASSERT (cuStreamSynchronize, s->stream);\n \n@@ -1610,14 +1609,14 @@ nvptx_wait_async (int async1, int async2)\n   struct ptx_stream *s1, *s2;\n   pthread_t self = pthread_self ();\n \n+  s1 = select_stream_for_async (async1, self, false, NULL);\n+  if (!s1)\n+    return;\n+\n   /* The stream that is waiting (rather than being waited for) doesn't\n      necessarily have to exist already.  */\n   s2 = select_stream_for_async (async2, self, true, NULL);\n \n-  s1 = select_stream_for_async (async1, self, false, NULL);\n-  if (!s1)\n-    GOMP_PLUGIN_fatal (\"invalid async 1\\n\");\n-\n   if (s1 == s2)\n     GOMP_PLUGIN_fatal (\"identical parameters\");\n "}, {"sha": "544b19fe6635db4ed7ebdceff2db5c2df9b26f90", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/async_queue-1.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1404af62dc414cc6b06e6c8c94a9922e04a7986a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasync_queue-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1404af62dc414cc6b06e6c8c94a9922e04a7986a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasync_queue-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasync_queue-1.c?ref=1404af62dc414cc6b06e6c8c94a9922e04a7986a", "patch": "@@ -41,6 +41,36 @@ int main(void)\n       assert (queues[i].cuda_stream == NULL);\n     }\n \n+  /* No-ops still don't initialize them.  */\n+  {\n+    size_t i = 0;\n+    /* Find the first non-special async-argument.  */\n+    while (queues[i].async < 0)\n+      ++i;\n+    assert (i < queues_n);\n+\n+#pragma acc wait(queues[i].async) // no-op\n+\n+    ++i;\n+    assert (i < queues_n);\n+#pragma acc parallel wait(queues[i].async) // no-op\n+    ;\n+\n+    ++i;\n+    assert (i < queues_n);\n+    acc_wait(queues[i].async); // no-op\n+\n+    i += 2;\n+    assert (i < queues_n);\n+    acc_wait_async(queues[i - 1].async, queues[i].async); // no-op, and async queue \"i\" does not get set up\n+\n+    for (size_t i = 0; i < queues_n; ++i)\n+      {\n+\tqueues[i].cuda_stream = acc_get_cuda_stream (queues[i].async);\n+\tassert (queues[i].cuda_stream == NULL);\n+      }\n+  }\n+\n   for (size_t i = 0; i < queues_n; ++i)\n     {\n       /* Use the queue to initialize it.  */"}, {"sha": "e9d1edaba7f6fddf2e3bc42bdb667d3580aba65e", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/data-2-lib.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1404af62dc414cc6b06e6c8c94a9922e04a7986a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-2-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1404af62dc414cc6b06e6c8c94a9922e04a7986a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-2-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-2-lib.c?ref=1404af62dc414cc6b06e6c8c94a9922e04a7986a", "patch": "@@ -69,6 +69,8 @@ main (int argc, char **argv)\n   acc_memcpy_from_device_async (b, d_b, nbytes, 1);\n \n   acc_wait (1);\n+  /* Test unseen async-argument.  */\n+  acc_wait (10);\n \n   for (i = 0; i < N; i++)\n     {"}, {"sha": "2fc4a598e8f6b64e6f3c44f3696a04c1f8d8efa8", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/data-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1404af62dc414cc6b06e6c8c94a9922e04a7986a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1404af62dc414cc6b06e6c8c94a9922e04a7986a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-2.c?ref=1404af62dc414cc6b06e6c8c94a9922e04a7986a", "patch": "@@ -65,6 +65,8 @@ main (int argc, char **argv)\n #pragma acc update self (b[0:N]) async (1)\n \n #pragma acc wait (1)\n+  /* Test unseen async-argument.  */\n+#pragma acc wait (10)\n \n   for (i = 0; i < N; i++)\n     {"}, {"sha": "c10bebaab13687e711d5a0642f416c0c3e0ffa9b", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-69.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1404af62dc414cc6b06e6c8c94a9922e04a7986a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-69.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1404af62dc414cc6b06e6c8c94a9922e04a7986a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-69.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-69.c?ref=1404af62dc414cc6b06e6c8c94a9922e04a7986a", "patch": "@@ -103,6 +103,13 @@ main (int argc, char **argv)\n       abort ();\n     }\n \n+  /* Test unseen async-argument.  */\n+  if (acc_async_test (1) != 1)\n+    {\n+      fprintf (stderr, \"acc_async_test failed on unseen async-argument\\n\");\n+      abort ();\n+    }\n+\n   sleep (1);\n \n   if (acc_async_test (0) != 1)"}, {"sha": "c85e824595542cc3c0926dbbbe0df330d8e4eebd", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-71.c", "status": "removed", "additions": 0, "deletions": 122, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de562eec26f729b1b29e9817e80fa4cebb06774/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-71.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de562eec26f729b1b29e9817e80fa4cebb06774/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-71.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-71.c?ref=7de562eec26f729b1b29e9817e80fa4cebb06774", "patch": "@@ -1,122 +0,0 @@\n-/* { dg-do run { target openacc_nvidia_accel_selected } } */\n-/* { dg-additional-options \"-lcuda\" } */\n-\n-#include <stdio.h>\n-#include <unistd.h>\n-#include <openacc.h>\n-#include <cuda.h>\n-\n-int\n-main (int argc, char **argv)\n-{\n-  CUdevice dev;\n-  CUfunction delay;\n-  CUmodule module;\n-  CUresult r;\n-  CUstream stream;\n-  unsigned long *a, *d_a, dticks;\n-  int nbytes;\n-  float dtime;\n-  void *kargs[2];\n-  int clkrate;\n-  int devnum, nprocs;\n-\n-  acc_init (acc_device_nvidia);\n-\n-  devnum = acc_get_device_num (acc_device_nvidia);\n-\n-  r = cuDeviceGet (&dev, devnum);\n-  if (r != CUDA_SUCCESS)\n-    {\n-      fprintf (stderr, \"cuDeviceGet failed: %d\\n\", r);\n-      abort ();\n-    }\n-\n-  r =\n-    cuDeviceGetAttribute (&nprocs, CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT,\n-\t\t\t  dev);\n-  if (r != CUDA_SUCCESS)\n-    {\n-      fprintf (stderr, \"cuDeviceGetAttribute failed: %d\\n\", r);\n-      abort ();\n-    }\n-\n-  r = cuDeviceGetAttribute (&clkrate, CU_DEVICE_ATTRIBUTE_CLOCK_RATE, dev);\n-  if (r != CUDA_SUCCESS)\n-    {\n-      fprintf (stderr, \"cuDeviceGetAttribute failed: %d\\n\", r);\n-      abort ();\n-    }\n-\n-  r = cuModuleLoad (&module, \"subr.ptx\");\n-  if (r != CUDA_SUCCESS)\n-    {\n-      fprintf (stderr, \"cuModuleLoad failed: %d\\n\", r);\n-      abort ();\n-    }\n-\n-  r = cuModuleGetFunction (&delay, module, \"delay\");\n-  if (r != CUDA_SUCCESS)\n-    {\n-      fprintf (stderr, \"cuModuleGetFunction failed: %d\\n\", r);\n-      abort ();\n-    }\n-\n-  nbytes = nprocs * sizeof (unsigned long);\n-\n-  dtime = 200.0;\n-\n-  dticks = (unsigned long) (dtime * clkrate);\n-\n-  a = (unsigned long *) malloc (nbytes);\n-  d_a = (unsigned long *) acc_malloc (nbytes);\n-\n-  acc_map_data (a, d_a, nbytes);\n-\n-  kargs[0] = (void *) &d_a;\n-  kargs[1] = (void *) &dticks;\n-\n-  r = cuStreamCreate (&stream, CU_STREAM_DEFAULT);\n-  if (r != CUDA_SUCCESS)\n-\t{\n-\t  fprintf (stderr, \"cuStreamCreate failed: %d\\n\", r);\n-\t  abort ();\n-\t}\n-\n-  acc_set_cuda_stream (0, stream);\n-\n-  r = cuLaunchKernel (delay, 1, 1, 1, 1, 1, 1, 0, stream, kargs, 0);\n-  if (r != CUDA_SUCCESS)\n-    {\n-      fprintf (stderr, \"cuLaunchKernel failed: %d\\n\", r);\n-      abort ();\n-    }\n-\n-  fprintf (stderr, \"CheCKpOInT\\n\");\n-  if (acc_async_test (1) != 0)\n-    {\n-      fprintf (stderr, \"asynchronous operation not running\\n\");\n-      abort ();\n-    }\n-\n-  sleep ((int) (dtime / 1000.0f) + 1);\n-\n-  if (acc_async_test (1) != 1)\n-    {\n-      fprintf (stderr, \"found asynchronous operation still running\\n\");\n-      abort ();\n-    }\n-\n-  acc_unmap_data (a);\n-\n-  free (a);\n-  acc_free (d_a);\n-\n-  acc_shutdown (acc_device_nvidia);\n-\n-  return 0;\n-}\n-\n-/* { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r).*\" } */\n-/* { dg-output \"unknown async \\[0-9\\]+\" } */\n-/* { dg-shouldfail \"\" } */"}, {"sha": "0efcf0d52229807eb50ad1bda4ff782c34485dc5", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-74.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1404af62dc414cc6b06e6c8c94a9922e04a7986a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-74.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1404af62dc414cc6b06e6c8c94a9922e04a7986a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-74.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-74.c?ref=1404af62dc414cc6b06e6c8c94a9922e04a7986a", "patch": "@@ -103,6 +103,8 @@ main (int argc, char **argv)\n     }\n \n   acc_wait (0);\n+  /* Test unseen async-argument.  */\n+  acc_wait (1);\n \n   atime = stop_timer (0);\n \n@@ -115,6 +117,8 @@ main (int argc, char **argv)\n   start_timer (0);\n \n   acc_wait (0);\n+  /* Test unseen async-argument.  */\n+  acc_wait (1);\n \n   atime = stop_timer (0);\n "}, {"sha": "f4f196def3b73c717ff7080f0a23cb741791b23e", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-77.c", "status": "removed", "additions": 0, "deletions": 138, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de562eec26f729b1b29e9817e80fa4cebb06774/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-77.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de562eec26f729b1b29e9817e80fa4cebb06774/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-77.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-77.c?ref=7de562eec26f729b1b29e9817e80fa4cebb06774", "patch": "@@ -1,138 +0,0 @@\n-/* { dg-do run { target openacc_nvidia_accel_selected } } */\n-/* { dg-additional-options \"-lcuda\" } */\n-\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <unistd.h>\n-#include <openacc.h>\n-#include <cuda.h>\n-#include \"timer.h\"\n-\n-int\n-main (int argc, char **argv)\n-{\n-  CUdevice dev;\n-  CUfunction delay;\n-  CUmodule module;\n-  CUresult r;\n-  CUstream stream;\n-  unsigned long *a, *d_a, dticks;\n-  int nbytes;\n-  float atime, dtime;\n-  void *kargs[2];\n-  int clkrate;\n-  int devnum, nprocs;\n-\n-  acc_init (acc_device_nvidia);\n-\n-  devnum = acc_get_device_num (acc_device_nvidia);\n-\n-  r = cuDeviceGet (&dev, devnum);\n-  if (r != CUDA_SUCCESS)\n-    {\n-      fprintf (stderr, \"cuDeviceGet failed: %d\\n\", r);\n-      abort ();\n-    }\n-\n-  r =\n-    cuDeviceGetAttribute (&nprocs, CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT,\n-\t\t\t  dev);\n-  if (r != CUDA_SUCCESS)\n-    {\n-      fprintf (stderr, \"cuDeviceGetAttribute failed: %d\\n\", r);\n-      abort ();\n-    }\n-\n-  r = cuDeviceGetAttribute (&clkrate, CU_DEVICE_ATTRIBUTE_CLOCK_RATE, dev);\n-  if (r != CUDA_SUCCESS)\n-    {\n-      fprintf (stderr, \"cuDeviceGetAttribute failed: %d\\n\", r);\n-      abort ();\n-    }\n-\n-  r = cuModuleLoad (&module, \"subr.ptx\");\n-  if (r != CUDA_SUCCESS)\n-    {\n-      fprintf (stderr, \"cuModuleLoad failed: %d\\n\", r);\n-      abort ();\n-    }\n-\n-  r = cuModuleGetFunction (&delay, module, \"delay\");\n-  if (r != CUDA_SUCCESS)\n-    {\n-      fprintf (stderr, \"cuModuleGetFunction failed: %d\\n\", r);\n-      abort ();\n-    }\n-\n-  nbytes = nprocs * sizeof (unsigned long);\n-\n-  dtime = 200.0;\n-\n-  dticks = (unsigned long) (dtime * clkrate);\n-\n-  a = (unsigned long *) malloc (nbytes);\n-  d_a = (unsigned long *) acc_malloc (nbytes);\n-\n-  acc_map_data (a, d_a, nbytes);\n-\n-  kargs[0] = (void *) &d_a;\n-  kargs[1] = (void *) &dticks;\n-\n-  r = cuStreamCreate (&stream, CU_STREAM_DEFAULT);\n-  if (r != CUDA_SUCCESS)\n-\t{\n-\t  fprintf (stderr, \"cuStreamCreate failed: %d\\n\", r);\n-\t  abort ();\n-\t}\n-\n-  acc_set_cuda_stream (0, stream);\n-\n-  init_timers (1);\n-\n-  start_timer (0);\n-\n-  r = cuLaunchKernel (delay, 1, 1, 1, 1, 1, 1, 0, stream, kargs, 0);\n-  if (r != CUDA_SUCCESS)\n-    {\n-      fprintf (stderr, \"cuLaunchKernel failed: %d\\n\", r);\n-      abort ();\n-    }\n-\n-  fprintf (stderr, \"CheCKpOInT\\n\");\n-  acc_wait (1);\n-\n-  atime = stop_timer (0);\n-\n-  if (atime < dtime)\n-    {\n-      fprintf (stderr, \"actual time < delay time\\n\");\n-      abort ();\n-    }\n-\n-  start_timer (0);\n-\n-  acc_wait (1);\n-\n-  atime = stop_timer (0);\n-\n-  if (0.010 < atime)\n-    {\n-      fprintf (stderr, \"actual time < delay time\\n\");\n-      abort ();\n-    }\n-\n-  acc_unmap_data (a);\n-\n-  fini_timers ();\n-\n-  free (a);\n-  acc_free (d_a);\n-\n-  acc_shutdown (acc_device_nvidia);\n-\n-  return 0;\n-}\n-\n-/* { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r).*\" } */\n-/* { dg-output \"unknown async \\[0-9\\]+\" } */\n-/* { dg-shouldfail \"\" } */"}, {"sha": "b2e2687e4e765fd3c6fb7bb90d76007c7f09429c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-79.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1404af62dc414cc6b06e6c8c94a9922e04a7986a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-79.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1404af62dc414cc6b06e6c8c94a9922e04a7986a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-79.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-79.c?ref=1404af62dc414cc6b06e6c8c94a9922e04a7986a", "patch": "@@ -122,6 +122,13 @@ main (int argc, char **argv)\n \t}\n     }\n \n+  if (acc_async_test (0) != 0)\n+    abort ();\n+\n+  /* Test unseen async-argument.  */\n+  if (acc_async_test (1) != 1)\n+    abort ();\n+\n   acc_wait_async (0, 1);\n \n   if (acc_async_test (0) != 0)\n@@ -130,6 +137,23 @@ main (int argc, char **argv)\n   if (acc_async_test (1) != 0)\n     abort ();\n \n+  /* Test unseen async-argument.  */\n+  {\n+    if (acc_async_test (2) != 1)\n+      abort ();\n+\n+    acc_wait_async (2, 1);\n+\n+    if (acc_async_test (0) != 0)\n+      abort ();\n+\n+    if (acc_async_test (1) != 0)\n+      abort ();\n+\n+    if (acc_async_test (2) != 1)\n+      abort ();\n+  }\n+\n   acc_wait (1);\n \n   atime = stop_timer (0);"}, {"sha": "4cf62f2728add0086d6a3bcb718c1c71ddd115cd", "filename": "libgomp/testsuite/libgomp.oacc-fortran/lib-12.f90", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1404af62dc414cc6b06e6c8c94a9922e04a7986a/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Flib-12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1404af62dc414cc6b06e6c8c94a9922e04a7986a/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Flib-12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Flib-12.f90?ref=1404af62dc414cc6b06e6c8c94a9922e04a7986a", "patch": "@@ -17,9 +17,14 @@ program main\n \n   call acc_wait_async (0, 1)\n \n+  ! Test unseen async-argument.\n+  if (acc_async_test (2) .neqv. .TRUE.) call abort\n+  call acc_wait_async (2, 1)\n+\n   call acc_wait (1)\n \n   if (acc_async_test (0) .neqv. .TRUE.) call abort\n   if (acc_async_test (1) .neqv. .TRUE.) call abort\n+  if (acc_async_test (2) .neqv. .TRUE.) call abort\n \n end program"}]}