{"sha": "c6bdd05e3ab6c59495353c93f80961041db87615", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZiZGQwNWUzYWI2YzU5NDk1MzUzYzkzZjgwOTYxMDQxZGI4NzYxNQ==", "commit": {"author": {"name": "Fabien Ch\u00eane", "email": "fabien@gcc.gnu.org", "date": "2011-05-26T05:54:08Z"}, "committer": {"name": "Fabien Ch\u00eane", "email": "fabien@gcc.gnu.org", "date": "2011-05-26T05:54:08Z"}, "message": "pr25811-2.C: New.\n\n2011-05-26  Fabien Chene  <fabien@gcc.gnu.org>\n\t* g++.dg/init/pr25811-2.C: New.\n\t* g++.dg/init/pr25811-3.C: New.\n\t* g++.dg/init/pr25811-4.C: New.\n\nFrom-SVN: r174263", "tree": {"sha": "63d447859ad3c994015500f0924735464b241f0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63d447859ad3c994015500f0924735464b241f0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6bdd05e3ab6c59495353c93f80961041db87615", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6bdd05e3ab6c59495353c93f80961041db87615", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6bdd05e3ab6c59495353c93f80961041db87615", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6bdd05e3ab6c59495353c93f80961041db87615/comments", "author": null, "committer": null, "parents": [{"sha": "53febcba13e4e7e8aecab1e90396d674d9277602", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53febcba13e4e7e8aecab1e90396d674d9277602", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53febcba13e4e7e8aecab1e90396d674d9277602"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "2799527f171ac2ee529006b107ad80c65b10c881", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6bdd05e3ab6c59495353c93f80961041db87615/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6bdd05e3ab6c59495353c93f80961041db87615/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c6bdd05e3ab6c59495353c93f80961041db87615", "patch": "@@ -1,3 +1,8 @@\n+2011-05-26  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n+\t* g++.dg/init/pr25811-2.C: New.\n+\t* g++.dg/init/pr25811-3.C: New.\n+\t* g++.dg/init/pr25811-4.C: New.\n+\n 2011-05-25  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/enum17.C: New."}, {"sha": "631da5b4c924f15c6dc8f519af531753b5a4df71", "filename": "gcc/testsuite/g++.dg/init/pr25811-3.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6bdd05e3ab6c59495353c93f80961041db87615/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr25811-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6bdd05e3ab6c59495353c93f80961041db87615/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr25811-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr25811-3.C?ref=c6bdd05e3ab6c59495353c93f80961041db87615", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile }\n+\n+struct A { int const i; };\n+struct B { int& i; };\n+struct C { int i; };\n+\n+template< class T >\n+class is_constructible_via_new_without_initializer\n+{\n+    template<int> class size {};\n+\n+    typedef char yes_type;\n+    struct no_type { char data[2]; };\n+\n+    template <class U>\n+    static yes_type sfinae (size< sizeof (new U) >*);\n+\n+    template <class U>\n+    static no_type sfinae (...);\n+\n+public:\n+  static const bool value = sizeof (sfinae<T>(0)) == sizeof (yes_type);\n+};\n+\n+#define JOIN( X, Y ) DO_JOIN( X, Y )\n+#define DO_JOIN( X, Y ) DO_JOIN2(X,Y)\n+#define DO_JOIN2( X, Y ) X##Y\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#  define STATIC_ASSERT(Expr) static_assert(Expr, #Expr)\n+#else\n+#  define STATIC_ASSERT(Expr) int JOIN(a,__LINE__)[Expr? 1 : -1]\n+#endif\n+\n+STATIC_ASSERT (!is_constructible_via_new_without_initializer<A>::value);\n+STATIC_ASSERT (!is_constructible_via_new_without_initializer<B>::value);\n+STATIC_ASSERT (is_constructible_via_new_without_initializer<C>::value);\n+"}, {"sha": "abfb3d9f3c53170d3494a46457872ed2e58c63c1", "filename": "gcc/testsuite/g++.dg/init/pr25811-4.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6bdd05e3ab6c59495353c93f80961041db87615/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr25811-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6bdd05e3ab6c59495353c93f80961041db87615/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr25811-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr25811-4.C?ref=c6bdd05e3ab6c59495353c93f80961041db87615", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile }\n+// { dg-options \"-fpermissive\" }\n+\n+struct A { int const i; };\n+struct B { int& i; };\n+struct C { int i; };\n+\n+template< class T >\n+class is_constructible_via_new_without_initializer\n+{\n+    template<int> class size {};\n+\n+    typedef char yes_type;\n+    struct no_type { char data[2]; };\n+\n+    template <class U>\n+    static yes_type sfinae (size< sizeof (new U) >*);\n+\n+    template <class U>\n+    static no_type sfinae (...);\n+\n+public:\n+  static const bool value = sizeof (sfinae<T>(0)) == sizeof (yes_type);\n+};\n+\n+#define JOIN( X, Y ) DO_JOIN( X, Y )\n+#define DO_JOIN( X, Y ) DO_JOIN2(X,Y)\n+#define DO_JOIN2( X, Y ) X##Y\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#  define STATIC_ASSERT(Expr) static_assert(Expr, #Expr)\n+#else\n+#  define STATIC_ASSERT(Expr) int JOIN(a,__LINE__)[Expr? 1 : -1]\n+#endif\n+\n+STATIC_ASSERT (!is_constructible_via_new_without_initializer<A>::value);\n+STATIC_ASSERT (!is_constructible_via_new_without_initializer<B>::value);\n+STATIC_ASSERT (is_constructible_via_new_without_initializer<C>::value);"}]}