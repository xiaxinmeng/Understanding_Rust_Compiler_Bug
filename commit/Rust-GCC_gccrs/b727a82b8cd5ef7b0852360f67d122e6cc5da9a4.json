{"sha": "b727a82b8cd5ef7b0852360f67d122e6cc5da9a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjcyN2E4MmI4Y2Q1ZWY3YjA4NTIzNjBmNjdkMTIyZTZjYzVkYTlhNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-01-30T12:16:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-01-30T12:16:12Z"}, "message": "[multiple changes]\n\n2012-01-30  Robert Dewar  <dewar@adacore.com>\n\n\t* sem.adb (Analyze): Call Analyze_Mod for N_Op_Mod mode.\n\t* sem_ch3.adb (Modular_Type_Declaration): Warn on mod value of\n\tform 2 * small-literal.\n\t* sem_ch4.adb (Analyze_Mod): New procedure (warn on suspicious\n\tmod value).\n\t* sem_ch4.ads (Analyze_Mod): New procedure.\n\n2012-01-30  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb: sem_ch6.adb (Analyze_Expression_Function): Copy\n\ttypes and return expression when building spec for implicit\n\tbody, to preserve global references that may be present in an\n\tinstantiation.\n\n2012-01-30  Matthew Heaney  <heaney@adacore.com>\n\n\t* a-convec.adb, a-coinve.adb, a-cobove.adb (Sort,\n\tReverse_Elements): Check for cursor tampering.\n\n2012-01-30  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.adb (Is_Fully_Initialized_Type): In Ada 2012, a\n\ttype with aspect Default_Value or Default_Component_Value is\n\tfully initialized, and use of variables of such types do not\n\tgenerate warnings.\n\n2012-01-30  Vincent Celier  <celier@adacore.com>\n\n\t* projects.texi: Add documentation for attribute Interfaces.\n\nFrom-SVN: r183714", "tree": {"sha": "730ae33dd755090612107ccf0b26ffa6e7221022", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/730ae33dd755090612107ccf0b26ffa6e7221022"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4/comments", "author": null, "committer": null, "parents": [{"sha": "e11be5ac78851c754c30299dfccda58a6241d9c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e11be5ac78851c754c30299dfccda58a6241d9c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e11be5ac78851c754c30299dfccda58a6241d9c3"}], "stats": {"total": 254, "additions": 224, "deletions": 30}, "files": [{"sha": "d2385a8b3a5d8c28b822e849bea9d1ebd69c0e57", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b727a82b8cd5ef7b0852360f67d122e6cc5da9a4", "patch": "@@ -1,3 +1,42 @@\n+2012-01-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem.adb (Analyze): Call Analyze_Mod for N_Op_Mod mode.\n+\t* sem_ch3.adb (Modular_Type_Declaration): Warn on mod value of\n+\tform 2 * small-literal.\n+\t* sem_ch4.adb (Analyze_Mod): New procedure (warn on suspicious\n+\tmod value).\n+\t* sem_ch4.ads (Analyze_Mod): New procedure.\n+\n+2012-01-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb: sem_ch6.adb (Analyze_Expression_Function): Copy\n+\ttypes and return expression when building spec for implicit\n+\tbody, to preserve global references that may be present in an\n+\tinstantiation.\n+\n+2012-01-30  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-convec.adb, a-coinve.adb, a-cobove.adb (Sort,\n+\tReverse_Elements): Check for cursor tampering.\n+\n+2012-01-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (Is_Fully_Initialized_Type): In Ada 2012, a\n+\ttype with aspect Default_Value or Default_Component_Value is\n+\tfully initialized, and use of variables of such types do not\n+\tgenerate warnings.\n+\n+2012-01-30  Javier Miranda  <miranda@adacore.com>\n+\n+PR ada/15846\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming):\n+\tHandle self-renaming when the renamed entity is referenced using\n+\tits expanded name.\n+\n+2012-01-30  Vincent Celier  <celier@adacore.com>\n+\n+\t* projects.texi: Add documentation for attribute Interfaces.\n+\n 2012-01-30  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch7.adb (Build_Finalizer_Call): Set loc again."}, {"sha": "aaf69c312136fe3e127af185086dc094510d9817", "filename": "gcc/ada/a-cobove.adb", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4/gcc%2Fada%2Fa-cobove.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4/gcc%2Fada%2Fa-cobove.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cobove.adb?ref=b727a82b8cd5ef7b0852360f67d122e6cc5da9a4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -931,23 +931,35 @@ package body Ada.Containers.Bounded_Vectors is\n       -- Sort --\n       ----------\n \n-      procedure Sort (Container : in out Vector)\n-      is\n+      procedure Sort (Container : in out Vector) is\n          procedure Sort is\n             new Generic_Array_Sort\n              (Index_Type   => Count_Type,\n               Element_Type => Element_Type,\n               Array_Type   => Elements_Array,\n               \"<\"          => \"<\");\n \n+      --  Start of processing for Sort\n+\n       begin\n          if Container.Last <= Index_Type'First then\n             return;\n          end if;\n \n-         if Container.Lock > 0 then\n+         --  The exception behavior for the vector container must match that\n+         --  for the list container, so we check for cursor tampering here\n+         --  (which will catch more things) instead of for element tampering\n+         --  (which will catch fewer things). It's true that the elements of\n+         --  this vector container could be safely moved around while (say) an\n+         --  iteration is taking place (iteration only increments the busy\n+         --  counter), and so technically all we would need here is a test for\n+         --  element tampering (indicated by the lock counter), that's simply\n+         --  an artifact of our array-based implementation. Logically Sort\n+         --  requires a check for cursor tampering.\n+\n+         if Container.Busy > 0 then\n             raise Program_Error with\n-              \"attempt to tamper with elements (vector is locked)\";\n+              \"attempt to tamper with cursors (vector is busy)\";\n          end if;\n \n          Sort (Container.Elements (1 .. Container.Length));\n@@ -2234,9 +2246,20 @@ package body Ada.Containers.Bounded_Vectors is\n          return;\n       end if;\n \n-      if Container.Lock > 0 then\n+      --  The exception behavior for the vector container must match that for\n+      --  the list container, so we check for cursor tampering here (which will\n+      --  catch more things) instead of for element tampering (which will catch\n+      --  fewer things). It's true that the elements of this vector container\n+      --  could be safely moved around while (say) an iteration is taking place\n+      --  (iteration only increments the busy counter), and so technically all\n+      --  we would need here is a test for element tampering (indicated by the\n+      --  lock counter), that's simply an artifact of our array-based\n+      --  implementation. Logically Reverse_Elements requires a check for\n+      --  cursor tampering.\n+\n+      if Container.Busy > 0 then\n          raise Program_Error with\n-           \"attempt to tamper with elements (vector is locked)\";\n+           \"attempt to tamper with cursors (vector is busy)\";\n       end if;\n \n       Idx := 1;"}, {"sha": "ef5389f95a377faeb9311e83351deeb6232e520d", "filename": "gcc/ada/a-coinve.adb", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4/gcc%2Fada%2Fa-coinve.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4/gcc%2Fada%2Fa-coinve.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinve.adb?ref=b727a82b8cd5ef7b0852360f67d122e6cc5da9a4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1396,7 +1396,6 @@ package body Ada.Containers.Indefinite_Vectors is\n       ----------\n \n       procedure Sort (Container : in out Vector) is\n-\n          procedure Sort is new Generic_Array_Sort\n            (Index_Type   => Index_Type,\n             Element_Type => Element_Access,\n@@ -1410,9 +1409,20 @@ package body Ada.Containers.Indefinite_Vectors is\n             return;\n          end if;\n \n-         if Container.Lock > 0 then\n+         --  The exception behavior for the vector container must match that\n+         --  for the list container, so we check for cursor tampering here\n+         --  (which will catch more things) instead of for element tampering\n+         --  (which will catch fewer things). It's true that the elements of\n+         --  this vector container could be safely moved around while (say) an\n+         --  iteration is taking place (iteration only increments the busy\n+         --  counter), and so technically all we would need here is a test for\n+         --  element tampering (indicated by the lock counter), that's simply\n+         --  an artifact of our array-based implementation. Logically Sort\n+         --  requires a check for cursor tampering.\n+\n+         if Container.Busy > 0 then\n             raise Program_Error with\n-              \"attempt to tamper with elements (vector is locked)\";\n+              \"attempt to tamper with cursors (vector is busy)\";\n          end if;\n \n          Sort (Container.Elements.EA (Index_Type'First .. Container.Last));\n@@ -3417,9 +3427,20 @@ package body Ada.Containers.Indefinite_Vectors is\n          return;\n       end if;\n \n-      if Container.Lock > 0 then\n+      --  The exception behavior for the vector container must match that for\n+      --  the list container, so we check for cursor tampering here (which will\n+      --  catch more things) instead of for element tampering (which will catch\n+      --  fewer things). It's true that the elements of this vector container\n+      --  could be safely moved around while (say) an iteration is taking place\n+      --  (iteration only increments the busy counter), and so technically all\n+      --  we would need here is a test for element tampering (indicated by the\n+      --  lock counter), that's simply an artifact of our array-based\n+      --  implementation. Logically Reverse_Elements requires a check for\n+      --  cursor tampering.\n+\n+      if Container.Busy > 0 then\n          raise Program_Error with\n-           \"attempt to tamper with elements (vector is locked)\";\n+           \"attempt to tamper with cursors (vector is busy)\";\n       end if;\n \n       declare"}, {"sha": "837c7832f535e5138ca6389ca3ee55fd0511fd7e", "filename": "gcc/ada/a-convec.adb", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4/gcc%2Fada%2Fa-convec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4/gcc%2Fada%2Fa-convec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-convec.adb?ref=b727a82b8cd5ef7b0852360f67d122e6cc5da9a4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1039,23 +1039,35 @@ package body Ada.Containers.Vectors is\n       -- Sort --\n       ----------\n \n-      procedure Sort (Container : in out Vector)\n-      is\n+      procedure Sort (Container : in out Vector) is\n          procedure Sort is\n             new Generic_Array_Sort\n              (Index_Type   => Index_Type,\n               Element_Type => Element_Type,\n               Array_Type   => Elements_Array,\n               \"<\"          => \"<\");\n \n+      --  Start of processing for Sort\n+\n       begin\n          if Container.Last <= Index_Type'First then\n             return;\n          end if;\n \n-         if Container.Lock > 0 then\n+         --  The exception behavior for the vector container must match that\n+         --  for the list container, so we check for cursor tampering here\n+         --  (which will catch more things) instead of for element tampering\n+         --  (which will catch fewer things). It's true that the elements of\n+         --  this vector container could be safely moved around while (say) an\n+         --  iteration is taking place (iteration only increments the busy\n+         --  counter), and so technically all we would need here is a test for\n+         --  element tampering (indicated by the lock counter), that's simply\n+         --  an artifact of our array-based implementation. Logically Sort\n+         --  requires a check for cursor tampering.\n+\n+         if Container.Busy > 0 then\n             raise Program_Error with\n-              \"attempt to tamper with elements (vector is locked)\";\n+              \"attempt to tamper with cursors (vector is busy)\";\n          end if;\n \n          Sort (Container.Elements.EA (Index_Type'First .. Container.Last));\n@@ -2977,9 +2989,20 @@ package body Ada.Containers.Vectors is\n          return;\n       end if;\n \n-      if Container.Lock > 0 then\n+      --  The exception behavior for the vector container must match that for\n+      --  the list container, so we check for cursor tampering here (which will\n+      --  catch more things) instead of for element tampering (which will catch\n+      --  fewer things). It's true that the elements of this vector container\n+      --  could be safely moved around while (say) an iteration is taking place\n+      --  (iteration only increments the busy counter), and so technically all\n+      --  we would need here is a test for element tampering (indicated by the\n+      --  lock counter), that's simply an artifact of our array-based\n+      --  implementation. Logically Reverse_Elements requires a check for\n+      --  cursor tampering.\n+\n+      if Container.Busy > 0 then\n          raise Program_Error with\n-           \"attempt to tamper with elements (vector is locked)\";\n+           \"attempt to tamper with cursors (vector is busy)\";\n       end if;\n \n       declare"}, {"sha": "8f9faad645f6621240772c9b873f1bd455e65dc7", "filename": "gcc/ada/projects.texi", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4/gcc%2Fada%2Fprojects.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4/gcc%2Fada%2Fprojects.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprojects.texi?ref=b727a82b8cd5ef7b0852360f67d122e6cc5da9a4", "patch": "@@ -1757,9 +1757,12 @@ The name of a stand-alone library, specified with attribute\n The most prominent characteristic of a stand-alone library is that it offers a\n distinction between interface units and implementation units. Only the former\n are visible to units outside the library. A stand-alone library project is thus\n-characterised by a third attribute, @b{Library_Interface}, in addition to the\n-two attributes that make a project a Library Project (@code{Library_Name} and\n-@code{Library_Dir}).\n+characterised by a third attribute, usually @b{Library_Interface}, in addition\n+to the two attributes that make a project a Library Project\n+(@code{Library_Name} and @code{Library_Dir}). This third attribute may also be\n+@b{Interfaces}. @b{Library_Interface} only works when the interface is in Ada\n+and takes a list of units as parameter. @b{Interfaces} works for any supported\n+language and takes a list of sources as parameter.\n \n @table @asis\n @item @b{Library_Interface}:\n@@ -1777,6 +1780,13 @@ two attributes that make a project a Library Project (@code{Library_Name} and\n @end group\n @end smallexample\n \n+@item @b{Interfaces}\n+  This attribute defnes an explicit subset of the source files of a project.\n+  It may be used as a replacement for attribute @code{Library_Interface}. For\n+  multi-language library projects, it is the only way to make the project a\n+  Stand-Alone Library project and at the same time to reduce the non Ada\n+  interfacing sources.\n+\n @item @b{Library_Standalone}:\n @cindex @code{Library_Standalone}\n   This attribute defines the kind of standalone library to"}, {"sha": "fdd6ec3b6ed8f1acc3bc73a6141f52827f31c6cc", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=b727a82b8cd5ef7b0852360f67d122e6cc5da9a4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -376,7 +376,7 @@ package body Sem is\n             Analyze_Unary_Op (N);\n \n          when N_Op_Mod =>\n-            Analyze_Arithmetic_Op (N);\n+            Analyze_Mod (N);\n \n          when N_Op_Multiply =>\n             Analyze_Arithmetic_Op (N);"}, {"sha": "d56c59fd64a56c51686b6c36c5f260851885ecae", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=b727a82b8cd5ef7b0852360f67d122e6cc5da9a4", "patch": "@@ -16808,6 +16808,21 @@ package body Sem_Ch3 is\n    --  Start of processing for Modular_Type_Declaration\n \n    begin\n+      --  If the mod expression is (exactly) 2 * literal, where literal is\n+      --  64 or less,then almost certainly the * was meant to be **. Warn!\n+\n+      if Warn_On_Suspicious_Modulus_Value\n+        and then Nkind (Mod_Expr) = N_Op_Multiply\n+        and then Nkind (Left_Opnd (Mod_Expr)) = N_Integer_Literal\n+        and then Intval (Left_Opnd (Mod_Expr)) = Uint_2\n+        and then Nkind (Right_Opnd (Mod_Expr)) = N_Integer_Literal\n+        and then Intval (Right_Opnd (Mod_Expr)) <= Uint_64\n+      then\n+         Error_Msg_N (\"suspicious MOD value, was '*'* intended'??\", Mod_Expr);\n+      end if;\n+\n+      --  Proceed with analysis of mod expression\n+\n       Analyze_And_Resolve (Mod_Expr, Any_Integer);\n       Set_Etype (T, T);\n       Set_Ekind (T, E_Modular_Integer_Type);"}, {"sha": "32300126b48a3da6eaaecafa575cbe0fc845027d", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=b727a82b8cd5ef7b0852360f67d122e6cc5da9a4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -62,6 +62,7 @@ with Stand;    use Stand;\n with Sinfo;    use Sinfo;\n with Snames;   use Snames;\n with Tbuild;   use Tbuild;\n+with Uintp;    use Uintp;\n \n package body Sem_Ch4 is\n \n@@ -2637,6 +2638,34 @@ package body Sem_Ch4 is\n       end if;\n    end Analyze_Membership_Op;\n \n+   -----------------\n+   -- Analyze_Mod --\n+   -----------------\n+\n+   procedure Analyze_Mod (N : Node_Id) is\n+   begin\n+      --  A special warning check, if we have an expression of the form:\n+      --    expr mod 2 * literal\n+      --  where literal is 64 or less, then probably what was meant was\n+      --    expr mod 2 ** literal\n+      --  so issue an appropriate warning.\n+\n+      if Warn_On_Suspicious_Modulus_Value\n+        and then Nkind (Right_Opnd (N)) = N_Integer_Literal\n+        and then Intval (Right_Opnd (N)) = Uint_2\n+        and then Nkind (Parent (N)) = N_Op_Multiply\n+        and then Nkind (Right_Opnd (Parent (N))) = N_Integer_Literal\n+        and then Intval (Right_Opnd (Parent (N))) <= Uint_64\n+      then\n+         Error_Msg_N\n+           (\"suspicious MOD value, was '*'* intended'??\", Parent (N));\n+      end if;\n+\n+      --  Remaining processing is same as for other arithmetic operators\n+\n+      Analyze_Arithmetic_Op (N);\n+   end Analyze_Mod;\n+\n    ----------------------\n    -- Analyze_Negation --\n    ----------------------"}, {"sha": "5e3150b69909d3b799f2d49adf8fce5bbf50baf3", "filename": "gcc/ada/sem_ch4.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4/gcc%2Fada%2Fsem_ch4.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4/gcc%2Fada%2Fsem_ch4.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.ads?ref=b727a82b8cd5ef7b0852360f67d122e6cc5da9a4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,6 +39,7 @@ package Sem_Ch4  is\n    procedure Analyze_Expression_With_Actions   (N : Node_Id);\n    procedure Analyze_Logical_Op                (N : Node_Id);\n    procedure Analyze_Membership_Op             (N : Node_Id);\n+   procedure Analyze_Mod                       (N : Node_Id);\n    procedure Analyze_Negation                  (N : Node_Id);\n    procedure Analyze_Null                      (N : Node_Id);\n    procedure Analyze_Qualified_Expression      (N : Node_Id);"}, {"sha": "eec427a0ddf6d2a3075eeb8aa18442fcb7eebc6b", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=b727a82b8cd5ef7b0852360f67d122e6cc5da9a4", "patch": "@@ -293,7 +293,31 @@ package body Sem_Ch6 is\n       --  determine whether this is possible.\n \n       Inline_Processing_Required := True;\n-      New_Spec := Copy_Separate_Tree (Spec);\n+\n+      --  Create a specification for the generated body. Types and defauts in\n+      --  the profile are copies of the spec, but new entities must be created\n+      --  for the unit name and the formals.\n+\n+      New_Spec := New_Copy_Tree (Spec);\n+      Set_Defining_Unit_Name (New_Spec,\n+        Make_Defining_Identifier (Sloc (Defining_Unit_Name (Spec)),\n+          Chars (Defining_Unit_Name (Spec))));\n+\n+      if Present (Parameter_Specifications (New_Spec)) then\n+         declare\n+            Formal_Spec : Node_Id;\n+         begin\n+            Formal_Spec := First (Parameter_Specifications (New_Spec));\n+            while Present (Formal_Spec) loop\n+               Set_Defining_Identifier\n+                 (Formal_Spec,\n+                  Make_Defining_Identifier (Sloc (Formal_Spec),\n+                    Chars => Chars (Defining_Identifier (Formal_Spec))));\n+               Next (Formal_Spec);\n+            end loop;\n+         end;\n+      end if;\n+\n       Prev     := Current_Entity_In_Scope (Defining_Entity (Spec));\n \n       --  If there are previous overloadable entities with the same name,"}, {"sha": "3da93ea29318a695f695cf2fa935d849100a891b", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b727a82b8cd5ef7b0852360f67d122e6cc5da9a4/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=b727a82b8cd5ef7b0852360f67d122e6cc5da9a4", "patch": "@@ -7134,14 +7134,23 @@ package body Sem_Util is\n \n    function Is_Fully_Initialized_Type (Typ : Entity_Id) return Boolean is\n    begin\n+      --  In Ada2012, a scalar type with an aspect Default_Value\n+      --  is fully initialized.\n+\n       if Is_Scalar_Type (Typ) then\n-         return False;\n+         return\n+           Ada_Version >= Ada_2012\n+             and then Has_Default_Aspect (Typ);\n \n       elsif Is_Access_Type (Typ) then\n          return True;\n \n       elsif Is_Array_Type (Typ) then\n-         if Is_Fully_Initialized_Type (Component_Type (Typ)) then\n+         if Is_Fully_Initialized_Type (Component_Type (Typ))\n+           or else\n+             (Ada_Version >= Ada_2012\n+                and then Has_Default_Aspect (Typ))\n+         then\n             return True;\n          end if;\n "}]}