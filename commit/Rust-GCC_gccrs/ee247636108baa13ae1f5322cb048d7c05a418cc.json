{"sha": "ee247636108baa13ae1f5322cb048d7c05a418cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUyNDc2MzYxMDhiYWExM2FlMWY1MzIyY2IwNDhkN2MwNWE0MThjYw==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2010-08-09T19:34:49Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2010-08-09T19:34:49Z"}, "message": "re PR fortran/44235 (array temporary with high upper bound)\n\n2010-08-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/44235\n\t* array.c (gfc_ref_dimen_size):  Add end argument.\n\tIf end is non-NULL, calculate it.\n\t(ref_size):  Adjust call to gfc_ref_dimen_size.\n\t(gfc_array_dimen_size):  Likewise.\n\t(gfc_array_res_shape):  Likewise.\n\t* gfortran.h:  Adjust prototype for gfc_ref_dimen_size.\n\t* resolve.c (resolve_array_ref):  For stride not equal to -1,\n\tfill in the lowest possible end.\n\n2010-08-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/44235\n\t* gfortran.dg/dependency_32.f90:  New test.\n\nFrom-SVN: r163041", "tree": {"sha": "e8a74351fdd3fd516d43ad305c53af81d3ee674d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8a74351fdd3fd516d43ad305c53af81d3ee674d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee247636108baa13ae1f5322cb048d7c05a418cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee247636108baa13ae1f5322cb048d7c05a418cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee247636108baa13ae1f5322cb048d7c05a418cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee247636108baa13ae1f5322cb048d7c05a418cc/comments", "author": null, "committer": null, "parents": [{"sha": "1ddfdcf2df840ed6754d99630a3e1b7247ef9ead", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ddfdcf2df840ed6754d99630a3e1b7247ef9ead", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ddfdcf2df840ed6754d99630a3e1b7247ef9ead"}], "stats": {"total": 83, "additions": 76, "deletions": 7}, "files": [{"sha": "de7dcaf0988a459d2f1a7db013dbc5778394ee2b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee247636108baa13ae1f5322cb048d7c05a418cc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee247636108baa13ae1f5322cb048d7c05a418cc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ee247636108baa13ae1f5322cb048d7c05a418cc", "patch": "@@ -1,3 +1,15 @@\n+2010-08-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/44235\n+\t* array.c (gfc_ref_dimen_size):  Add end argument.\n+\tIf end is non-NULL, calculate it.\n+\t(ref_size):  Adjust call to gfc_ref_dimen_size.\n+\t(gfc_array_dimen_size):  Likewise.\n+\t(gfc_array_res_shape):  Likewise.\n+\t* gfortran.h:  Adjust prototype for gfc_ref_dimen_size.\n+\t* resolve.c (resolve_array_ref):  For stride not equal to -1,\n+\tfill in the lowest possible end.\n+\n 2010-08-09  Janus Weil  <janus@gcc.gnu.org>\n \n \t* intrinsic.texi: Correct documentation of ASINH, ACOSH and ATANH."}, {"sha": "cd261bf9b901fcf65c34d613e53e6f3b526aefb8", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee247636108baa13ae1f5322cb048d7c05a418cc/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee247636108baa13ae1f5322cb048d7c05a418cc/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=ee247636108baa13ae1f5322cb048d7c05a418cc", "patch": "@@ -1940,10 +1940,11 @@ spec_size (gfc_array_spec *as, mpz_t *result)\n }\n \n \n-/* Get the number of elements in an array section.  */\n+/* Get the number of elements in an array section. Optionally, also supply\n+   the end value.  */\n \n gfc_try\n-gfc_ref_dimen_size (gfc_array_ref *ar, int dimen, mpz_t *result)\n+gfc_ref_dimen_size (gfc_array_ref *ar, int dimen, mpz_t *result, mpz_t *end)\n {\n   mpz_t upper, lower, stride;\n   gfc_try t;\n@@ -2016,6 +2017,15 @@ gfc_ref_dimen_size (gfc_array_ref *ar, int dimen, mpz_t *result)\n \tmpz_set_ui (*result, 0);\n       t = SUCCESS;\n \n+      if (end)\n+\t{\n+\t  mpz_init (*end);\n+\n+\t  mpz_sub_ui (*end, *result, 1UL);\n+\t  mpz_mul (*end, *end, stride);\n+\t  mpz_add (*end, *end, lower);\n+\t}\n+\n     cleanup:\n       mpz_clear (upper);\n       mpz_clear (lower);\n@@ -2040,7 +2050,7 @@ ref_size (gfc_array_ref *ar, mpz_t *result)\n \n   for (d = 0; d < ar->dimen; d++)\n     {\n-      if (gfc_ref_dimen_size (ar, d, &size) == FAILURE)\n+      if (gfc_ref_dimen_size (ar, d, &size, NULL) == FAILURE)\n \t{\n \t  mpz_clear (*result);\n \t  return FAILURE;\n@@ -2086,7 +2096,7 @@ gfc_array_dimen_size (gfc_expr *array, int dimen, mpz_t *result)\n \t\tif (ref->u.ar.dimen_type[i] != DIMEN_ELEMENT)\n \t\t  dimen--;\n \n-\t      return gfc_ref_dimen_size (&ref->u.ar, i - 1, result);\n+\t      return gfc_ref_dimen_size (&ref->u.ar, i - 1, result, NULL);\n \t    }\n \t}\n \n@@ -2222,7 +2232,7 @@ gfc_array_ref_shape (gfc_array_ref *ar, mpz_t *shape)\n \t{\n \t  if (ar->dimen_type[i] != DIMEN_ELEMENT)\n \t    {\n-\t      if (gfc_ref_dimen_size (ar, i, &shape[d]) == FAILURE)\n+\t      if (gfc_ref_dimen_size (ar, i, &shape[d], NULL) == FAILURE)\n \t\tgoto cleanup;\n \t      d++;\n \t    }"}, {"sha": "898f3079a98ffce1beac5472c6e17fe7afd75a8f", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee247636108baa13ae1f5322cb048d7c05a418cc/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee247636108baa13ae1f5322cb048d7c05a418cc/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=ee247636108baa13ae1f5322cb048d7c05a418cc", "patch": "@@ -2753,7 +2753,7 @@ gfc_try spec_size (gfc_array_spec *, mpz_t *);\n gfc_try spec_dimen_size (gfc_array_spec *, int, mpz_t *);\n int gfc_is_compile_time_shape (gfc_array_spec *);\n \n-gfc_try gfc_ref_dimen_size (gfc_array_ref *, int dimen, mpz_t *);\n+gfc_try gfc_ref_dimen_size (gfc_array_ref *, int dimen, mpz_t *, mpz_t *);\n \n \n /* interface.c -- FIXME: some of these should be in symbol.c */"}, {"sha": "9933b5d0d9124d1c04e86fb404ff830ca21ae9a4", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee247636108baa13ae1f5322cb048d7c05a418cc/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee247636108baa13ae1f5322cb048d7c05a418cc/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=ee247636108baa13ae1f5322cb048d7c05a418cc", "patch": "@@ -4377,6 +4377,38 @@ resolve_array_ref (gfc_array_ref *ar)\n \t\t       &ar->c_where[i], e->rank);\n \t    return FAILURE;\n \t  }\n+\n+      /* Fill in the upper bound, which may be lower than the\n+\t specified one for something like a(2:10:5), which is\n+\t identical to a(2:7:5).  Only relevant for strides not equal\n+\t to one.  */\n+      if (ar->dimen_type[i] == DIMEN_RANGE\n+\t  && ar->stride[i] != NULL && ar->stride[i]->expr_type == EXPR_CONSTANT\n+\t  && mpz_cmp_si (ar->stride[i]->value.integer, 1L) != 0)\n+\t{\n+\t  mpz_t size, end;\n+\n+\t  if (gfc_ref_dimen_size (ar, i, &size, &end) == SUCCESS)\n+\t    {\n+\t      if (ar->end[i] == NULL)\n+\t\t{\n+\t\t  ar->end[i] =\n+\t\t    gfc_get_constant_expr (BT_INTEGER, gfc_index_integer_kind,\n+\t\t\t\t\t   &ar->where);\n+\t\t  mpz_set (ar->end[i]->value.integer, end);\n+\t\t}\n+\t      else if (ar->end[i]->ts.type == BT_INTEGER\n+\t\t       && ar->end[i]->expr_type == EXPR_CONSTANT)\n+\t\t{\n+\t\t  mpz_set (ar->end[i]->value.integer, end);\n+\t\t}\n+\t      else\n+\t\tgcc_unreachable ();\n+\n+\t      mpz_clear (size);\n+\t      mpz_clear (end);\n+\t    }\n+\t}\n     }\n \n   if (ar->type == AR_FULL && ar->as->rank == 0)"}, {"sha": "b47f8ccc393df002b36b7cc634ab0b4673589d7b", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee247636108baa13ae1f5322cb048d7c05a418cc/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee247636108baa13ae1f5322cb048d7c05a418cc/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=ee247636108baa13ae1f5322cb048d7c05a418cc", "patch": "@@ -2807,7 +2807,7 @@ simplify_bound_dim (gfc_expr *array, gfc_expr *kind, int d, int upper,\n     {\n       if (upper)\n \t{\n-\t  if (gfc_ref_dimen_size (&ref->u.ar, d-1, &result->value.integer)\n+\t  if (gfc_ref_dimen_size (&ref->u.ar, d-1, &result->value.integer, NULL)\n \t      != SUCCESS)\n \t    goto returnNull;\n \t}"}, {"sha": "638f3afbe97ad3e4305efba2b45a8a2d1d98fd17", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee247636108baa13ae1f5322cb048d7c05a418cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee247636108baa13ae1f5322cb048d7c05a418cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee247636108baa13ae1f5322cb048d7c05a418cc", "patch": "@@ -1,3 +1,8 @@\n+2010-08-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/44235\n+\t* gfortran.dg/dependency_32.f90:  New test.\n+\n 2010-08-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/44632"}, {"sha": "c0a3118acf53540328c79767277290b465856ebb", "filename": "gcc/testsuite/gfortran.dg/dependency_32.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee247636108baa13ae1f5322cb048d7c05a418cc/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_32.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee247636108baa13ae1f5322cb048d7c05a418cc/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_32.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_32.f90?ref=ee247636108baa13ae1f5322cb048d7c05a418cc", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+! { dg-options \"-Warray-temporaries\" }\n+! PR 44235\n+! No temporary should be created for this, as the upper bounds\n+! are effectively identical.\n+program main\n+  real a(10)\n+  a = 0.\n+  a(1:10:4) = a(1:9:4)\n+end program main"}]}