{"sha": "364539710f828851b9fac51c39033cd09aa620de", "node_id": "C_kwDOANBUbNoAKDM2NDUzOTcxMGY4Mjg4NTFiOWZhYzUxYzM5MDMzY2QwOWFhNjIwZGU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-21T20:06:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-21T20:06:23Z"}, "message": "i386: Fix up handling of target attribute [PR101180]\n\nAs shown in the testcase below, if a function has multiple target attributes\n(rather than a single one with one or more arguments) or if a function\ngets one target attribute on one declaration and another one on another\ndeclaration, on x86 their effect is not combined into\nDECL_FUNCTION_SPECIFIC_TARGET, but instead only the last processed target\nattribute wins.  aarch64 handles this right, the following patch follows\nwhat it does, i.e. only start with target_option_default_node if\nDECL_FUNCTION_SPECIFIC_TARGET is previously NULL (i.e. the first target\nattribute being processed on a function) and otherwise start from the\nprevious DECL_FUNCTION_SPECIFIC_TARGET.\n\n2021-11-21  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/101180\n\t* config/i386/i386-options.c (ix86_valid_target_attribute_p): If\n\tfndecl already has DECL_FUNCTION_SPECIFIC_TARGET, use that as base\n\tinstead of target_option_default_node.\n\n\t* gcc.target/i386/pr101180.c: New test.", "tree": {"sha": "fbfdd76f246a754c83ac16dc87fc7cca0538a7aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbfdd76f246a754c83ac16dc87fc7cca0538a7aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/364539710f828851b9fac51c39033cd09aa620de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/364539710f828851b9fac51c39033cd09aa620de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/364539710f828851b9fac51c39033cd09aa620de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/364539710f828851b9fac51c39033cd09aa620de/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fef6f720a5a0a056abfa986ba870bb406ab4716", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fef6f720a5a0a056abfa986ba870bb406ab4716", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fef6f720a5a0a056abfa986ba870bb406ab4716"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "a4da8331b8b7fc638bb05ca54d41e326cfecaffd", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/364539710f828851b9fac51c39033cd09aa620de/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/364539710f828851b9fac51c39033cd09aa620de/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=364539710f828851b9fac51c39033cd09aa620de", "patch": "@@ -1443,8 +1443,11 @@ ix86_valid_target_attribute_p (tree fndecl,\n \n   /* Initialize func_options to the default before its target options can\n      be set.  */\n+  tree old_target = DECL_FUNCTION_SPECIFIC_TARGET (fndecl);\n+  if (old_target == NULL_TREE)\n+    old_target = target_option_default_node;\n   cl_target_option_restore (&func_options, &func_options_set,\n-\t\t\t    TREE_TARGET_OPTION (target_option_default_node));\n+\t\t\t    TREE_TARGET_OPTION (old_target));\n \n   /* FLAGS == 1 is used for target_clones attribute.  */\n   new_target"}, {"sha": "1ac4cb5e2b58380f044756f61a8cf4e315ef4cdb", "filename": "gcc/testsuite/gcc.target/i386/pr101180.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/364539710f828851b9fac51c39033cd09aa620de/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101180.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/364539710f828851b9fac51c39033cd09aa620de/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101180.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101180.c?ref=364539710f828851b9fac51c39033cd09aa620de", "patch": "@@ -0,0 +1,12 @@\n+/* PR c++/101180 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-avx -mno-crc32\" } */\n+\n+#include <x86intrin.h>\n+\n+__attribute__((target (\"avx\"))) __attribute__((target (\"crc32\"))) void\n+foo (__m256 *p, unsigned int *q)\n+{\n+  __m256 c = _mm256_and_ps (p[0], p[1]);\n+  *q = __crc32b (*q, 0x55);\n+}"}]}