{"sha": "f6834394dd722a10aa72718cd7880bdda49f7f80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY4MzQzOTRkZDcyMmExMGFhNzI3MThjZDc4ODBiZGRhNDlmN2Y4MA==", "commit": {"author": {"name": "Vincent Pucci", "email": "pucci@adacore.com", "date": "2012-01-23T09:44:36Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-01-23T09:44:36Z"}, "message": "sem_ch12.adb (Analyze_Generic_Subprogram_Declaration): Call to Make_Aspect_For_PPC_In_Gen_Sub_Decl added in ASIS mode.\n\n2012-01-23  Vincent Pucci  <pucci@adacore.com>\n\n\t* sem_ch12.adb (Analyze_Generic_Subprogram_Declaration): Call\n\tto Make_Aspect_For_PPC_In_Gen_Sub_Decl added in ASIS mode.\n\t* sem_prag.adb, sem_prag.ads (Make_Aspect_For_PPC_In_Gen_Sub_Decl): New\n\troutine. In ASIS mode, convert any PPC pragmas into aspects in generic\n\tsubprogram declaration in order to enable the analysis of PPC boolean\n\texpressions.\n\nFrom-SVN: r183422", "tree": {"sha": "d363ab9ac2c63c960ed2eacb4e490ac791d30eea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d363ab9ac2c63c960ed2eacb4e490ac791d30eea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6834394dd722a10aa72718cd7880bdda49f7f80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6834394dd722a10aa72718cd7880bdda49f7f80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6834394dd722a10aa72718cd7880bdda49f7f80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6834394dd722a10aa72718cd7880bdda49f7f80/comments", "author": null, "committer": null, "parents": [{"sha": "2d38d84862ab6bebf9d5bac9e3fb99d3fcbbbe6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d38d84862ab6bebf9d5bac9e3fb99d3fcbbbe6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d38d84862ab6bebf9d5bac9e3fb99d3fcbbbe6c"}], "stats": {"total": 112, "additions": 108, "deletions": 4}, "files": [{"sha": "4830074a2bc1848ad4f30b039bf1af2409ab58a6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6834394dd722a10aa72718cd7880bdda49f7f80/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6834394dd722a10aa72718cd7880bdda49f7f80/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f6834394dd722a10aa72718cd7880bdda49f7f80", "patch": "@@ -1,3 +1,12 @@\n+2012-01-23  Vincent Pucci  <pucci@adacore.com>\n+\n+\t* sem_ch12.adb (Analyze_Generic_Subprogram_Declaration): Call\n+\tto Make_Aspect_For_PPC_In_Gen_Sub_Decl added in ASIS mode.\n+\t* sem_prag.adb, sem_prag.ads (Make_Aspect_For_PPC_In_Gen_Sub_Decl): New\n+\troutine. In ASIS mode, convert any PPC pragmas into aspects in generic\n+\tsubprogram declaration in order to enable the analysis of PPC boolean\n+\texpressions.\n+\n 2012-01-23  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb (Analyze_Object_Declaration): Properly"}, {"sha": "a954ccd44f3ddbbc2bdebb3642601bc886a7f267", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6834394dd722a10aa72718cd7880bdda49f7f80/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6834394dd722a10aa72718cd7880bdda49f7f80/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=f6834394dd722a10aa72718cd7880bdda49f7f80", "patch": "@@ -59,6 +59,7 @@ with Sem_Disp; use Sem_Disp;\n with Sem_Elab; use Sem_Elab;\n with Sem_Elim; use Sem_Elim;\n with Sem_Eval; use Sem_Eval;\n+with Sem_Prag; use Sem_Prag;\n with Sem_Res;  use Sem_Res;\n with Sem_Type; use Sem_Type;\n with Sem_Util; use Sem_Util;\n@@ -3082,6 +3083,15 @@ package body Sem_Ch12 is\n          end;\n       end if;\n \n+      --  For ASIS purposes, convert any postcondition, precondition pragmas\n+      --  into aspects, if N is not a compilation unit by itself, in order to\n+      --  enable the analysis of expressions inside the corresponding PPC\n+      --  pragmas.\n+\n+      if ASIS_Mode and then Is_List_Member (N) then\n+         Make_Aspect_For_PPC_In_Gen_Sub_Decl (N);\n+      end if;\n+\n       Spec := Specification (N);\n       Id := Defining_Entity (Spec);\n       Generate_Definition (Id);\n@@ -4662,7 +4672,8 @@ package body Sem_Ch12 is\n          end if;\n \n          Generate_Definition (Act_Decl_Id);\n-         Set_Contract (Anon_Id, Make_Contract (Sloc (Anon_Id))); -- ??? needed?\n+         --  Set_Contract (Anon_Id, Make_Contract (Sloc (Anon_Id)));\n+         --  ??? needed?\n          Set_Contract (Act_Decl_Id, Make_Contract (Sloc (Act_Decl_Id)));\n \n          --  Inherit all inlining-related flags which apply to the generic in"}, {"sha": "73d57a421e8282fd45e33c1ccfcf0a2e23755eee", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 79, "deletions": 2, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6834394dd722a10aa72718cd7880bdda49f7f80/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6834394dd722a10aa72718cd7880bdda49f7f80/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=f6834394dd722a10aa72718cd7880bdda49f7f80", "patch": "@@ -7991,8 +7991,9 @@ package body Sem_Prag is\n             --  Normally the analysis that follows will freeze the subprogram\n             --  being called. However, if the call is to a null procedure,\n             --  we want to freeze it before creating the block, because the\n-            --  analysis that follows may be done with expansion disabled, and\n-            --  and the body will not be generated, leading to spurious errors.\n+            --  analysis that follows may be done with expansion disabled, in\n+            --  which case the body will not be generated, leading to spurious\n+            --  errors.\n \n             if Nkind (Call) = N_Procedure_Call_Statement\n               and then Is_Entity_Name (Name (Call))\n@@ -15242,6 +15243,82 @@ package body Sem_Prag is\n       end if;\n    end Is_Pragma_String_Literal;\n \n+   -----------------------------------------\n+   -- Make_Aspect_For_PPC_In_Gen_Sub_Decl --\n+   -----------------------------------------\n+\n+   --  Convert any PPC and pragmas that appear within a generic subprogram\n+   --  declaration into aspect.\n+\n+   procedure Make_Aspect_For_PPC_In_Gen_Sub_Decl (Decl : Node_Id) is\n+      Aspects          : constant List_Id := New_List;\n+      Loc              : constant Source_Ptr := Sloc (Decl);\n+      Or_Decl          : constant Node_Id := Original_Node (Decl);\n+      Aspect           : Node_Id;\n+      Original_Aspects : List_Id;\n+      --  To capture global references, a copy of the created aspects must be\n+      --  inserted in the original tree.\n+\n+      Prag             : Node_Id;\n+      Prag_Arg_Ass     : Node_Id;\n+      Prag_Id          : Pragma_Id;\n+\n+   begin\n+      Prag := Next (Decl);\n+\n+      --  Check for any PPC pragmas that appear within Decl\n+\n+      while Nkind (Prag) = N_Pragma loop\n+         Prag_Id := Get_Pragma_Id (Chars (Pragma_Identifier (Prag)));\n+\n+         case Prag_Id is\n+            when Pragma_Postcondition | Pragma_Precondition =>\n+               Prag_Arg_Ass := First (Pragma_Argument_Associations (Prag));\n+\n+               --  Make an aspect from any PPC pragma\n+\n+               Aspect :=\n+                 Make_Aspect_Specification (Loc,\n+                   Identifier =>\n+                     Make_Identifier (Loc, Chars (Pragma_Identifier (Prag))),\n+                   Expression => Expression (Prag_Arg_Ass));\n+\n+               Append (Aspect, Aspects);\n+\n+               --  Set the pragma node analyzed to avoid any further analysis\n+\n+               Set_Analyzed (Prag, True);\n+\n+            when others => null;\n+         end case;\n+\n+         Next (Prag);\n+      end loop;\n+\n+      --  Set all new aspects into the generic declaration node\n+\n+      if Is_Non_Empty_List (Aspects) then\n+         --  Create the list of aspects which will be inserted in the original\n+         --  tree.\n+\n+         Original_Aspects := Copy_Separate_List (Aspects);\n+\n+         --  Check if Decl already has aspects\n+         --  Attach the new lists of aspects to both the generic copy and the\n+         --  original tree.\n+\n+         if Has_Aspects (Decl) then\n+            Append_List (Aspects, Aspect_Specifications (Decl));\n+            Append_List (Original_Aspects, Aspect_Specifications (Or_Decl));\n+         else\n+            Set_Parent (Aspects, Decl);\n+            Set_Aspect_Specifications (Decl, Aspects);\n+            Set_Parent (Original_Aspects, Or_Decl);\n+            Set_Aspect_Specifications (Or_Decl, Original_Aspects);\n+         end if;\n+      end if;\n+   end Make_Aspect_For_PPC_In_Gen_Sub_Decl;\n+\n    ------------------------\n    -- Preanalyze_TC_Args --\n    ------------------------"}, {"sha": "503b658f5fca3e930e09e56b185eac867ae44046", "filename": "gcc/ada/sem_prag.ads", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6834394dd722a10aa72718cd7880bdda49f7f80/gcc%2Fada%2Fsem_prag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6834394dd722a10aa72718cd7880bdda49f7f80/gcc%2Fada%2Fsem_prag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.ads?ref=f6834394dd722a10aa72718cd7880bdda49f7f80", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -110,6 +110,13 @@ package Sem_Prag is\n    --  length, and then returns True. If it is not of the correct form, then an\n    --  appropriate error message is posted, and False is returned.\n \n+   procedure Make_Aspect_For_PPC_In_Gen_Sub_Decl (Decl : Node_Id);\n+   --  This routine makes aspects from precondition or postcondition pragmas\n+   --  that appear within a generic subprogram declaration. Decl is the generic\n+   --  subprogram declaration node.\n+   --  Note that the aspects are attached to the generic copy and also to the\n+   --  orginal tree.\n+\n    procedure Process_Compilation_Unit_Pragmas (N : Node_Id);\n    --  Called at the start of processing compilation unit N to deal with any\n    --  special issues regarding pragmas. In particular, we have to deal with"}]}