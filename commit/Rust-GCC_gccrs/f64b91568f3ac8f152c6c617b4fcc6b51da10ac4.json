{"sha": "f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY0YjkxNTY4ZjNhYzhmMTUyYzZjNjE3YjRmY2M2YjUxZGExMGFjNA==", "commit": {"author": {"name": "luoxhu@cn.ibm.com", "email": "luoxhu@cn.ibm.com", "date": "2021-03-27T03:26:57Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2021-03-30T13:43:21Z"}, "message": "rs6000: Enable 32bit variable vec_insert [PR99718]\n\n32bit and P7 VSX could also benefit a lot from the variable vec_insert\nimplementation with shift/insert/shift back method.\n\n2011-03-29  Xionghu Luo  <luoxhu@linux.ibm.com>\n\n\tPR target/99718\n\t* config/rs6000/altivec.md (altivec_lvsl_reg): Change to ...\n\t(altivec_lvsl_reg_<mode>): ... this.\n\t(altivec_lvsr_reg): Change to ...\n\t(altivec_lvsr_reg_<mode>): ... this.\n\t* config/rs6000/predicates.md (vec_set_index_operand): New.\n\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):\n\tEnable 32bit variable vec_insert for all TARGET_VSX.\n\t* config/rs6000/rs6000.c (rs6000_expand_vector_set_var_p9):\n\tEnable 32bit variable vec_insert for p9 and above.\n\t(rs6000_expand_vector_set_var_p8): Rename to ...\n\t(rs6000_expand_vector_set_var_p7): ... this.\n\t(rs6000_expand_vector_set): Use TARGET_VSX and adjust assert\n\tposition.\n\t* config/rs6000/vector.md (vec_set<mode>): Use vec_set_index_operand.\n\t* config/rs6000/vsx.md (xl_len_r): Use gen_altivec_lvsl_reg_di and\n\tgen_altivec_lvsr_reg_di.\n\ngcc/testsuite/\n\tPR target/99718\n\t* gcc.target/powerpc/fold-vec-insert-char-p8.c: Update\n\tinstruction counts.\n\t* gcc.target/powerpc/fold-vec-insert-char-p9.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-insert-double.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-insert-float-p8.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-insert-float-p9.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-insert-int-p8.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-insert-int-p9.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-insert-longlong.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-insert-short-p8.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-insert-short-p9.c: Likewise.\n\t* gcc.target/powerpc/pr79251.p8.c: Likewise.\n\t* gcc.target/powerpc/pr79251.p9.c: Likewise.\n\t* gcc.target/powerpc/vsx-builtin-7.c: Likewise.\n\t* gcc.target/powerpc/pr79251-run.p7.c: New test.\n\t* gcc.target/powerpc/pr79251.p7.c: New test.", "tree": {"sha": "b414a01986e5b7d164aaf16237b2591bce39812a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b414a01986e5b7d164aaf16237b2591bce39812a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/comments", "author": null, "committer": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5463cee277038df4688b61144db498ae7d24e631", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5463cee277038df4688b61144db498ae7d24e631", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5463cee277038df4688b61144db498ae7d24e631"}], "stats": {"total": 242, "additions": 170, "deletions": 72}, "files": [{"sha": "c2b6c79d0868ee88b6de76711bf3403d01e6378c", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "patch": "@@ -2771,10 +2771,10 @@\n   DONE;\n })\n \n-(define_insn \"altivec_lvsl_reg\"\n+(define_insn \"altivec_lvsl_reg_<mode>\"\n   [(set (match_operand:V16QI 0 \"altivec_register_operand\" \"=v\")\n \t(unspec:V16QI\n-\t[(match_operand:DI 1 \"gpc_reg_operand\" \"b\")]\n+\t[(match_operand:GPR 1 \"gpc_reg_operand\" \"b\")]\n \tUNSPEC_LVSL_REG))]\n   \"TARGET_ALTIVEC\"\n   \"lvsl %0,0,%1\"\n@@ -2809,10 +2809,10 @@\n   DONE;\n })\n \n-(define_insn \"altivec_lvsr_reg\"\n+(define_insn \"altivec_lvsr_reg_<mode>\"\n   [(set (match_operand:V16QI 0 \"altivec_register_operand\" \"=v\")\n        (unspec:V16QI\n-       [(match_operand:DI 1 \"gpc_reg_operand\" \"b\")]\n+       [(match_operand:GPR 1 \"gpc_reg_operand\" \"b\")]\n        UNSPEC_LVSR_REG))]\n   \"TARGET_ALTIVEC\"\n   \"lvsr %0,0,%1\""}, {"sha": "e21bc745f72c36692aad1e5f529b1f265ba37963", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "patch": "@@ -1940,3 +1940,9 @@\n \n   return !indexed_address (addr, mode);\n })\n+\n+;; Return 1 if this operand is valid as the index for vec_set.\n+(define_predicate \"vec_set_index_operand\"\n+ (if_then_else (match_test \"TARGET_VSX\")\n+  (match_operand 0 \"reg_or_cint_operand\")\n+  (match_operand 0 \"const_int_operand\")))"}, {"sha": "0f8a629ff5a061a2c7c14c65e900bacf3965c86b", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "patch": "@@ -1602,7 +1602,7 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t  stmt = build1 (COMPOUND_LITERAL_EXPR, arg1_type, stmt);\n \t}\n \n-      if (TARGET_P8_VECTOR && TARGET_DIRECT_MOVE_64BIT)\n+      if (TARGET_VSX)\n \t{\n \t  stmt = build_array_ref (loc, stmt, arg2);\n \t  stmt = fold_build2 (MODIFY_EXPR, TREE_TYPE (arg0), stmt,"}, {"sha": "50c768d9d0638b09db0b739818858f34573a2a08", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 71, "deletions": 18, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "patch": "@@ -7035,20 +7035,40 @@ rs6000_expand_vector_set_var_p9 (rtx target, rtx val, rtx idx)\n   int shift = exact_log2 (width);\n \n   machine_mode idx_mode = GET_MODE (idx);\n-  idx = convert_modes (DImode, idx_mode, idx, 1);\n \n+  machine_mode shift_mode;\n+  rtx (*gen_ashl)(rtx, rtx, rtx);\n+  rtx (*gen_lvsl)(rtx, rtx);\n+  rtx (*gen_lvsr)(rtx, rtx);\n+\n+  if (TARGET_POWERPC64)\n+    {\n+      shift_mode = DImode;\n+      gen_ashl = gen_ashldi3;\n+      gen_lvsl = gen_altivec_lvsl_reg_di;\n+      gen_lvsr = gen_altivec_lvsr_reg_di;\n+    }\n+  else\n+    {\n+      shift_mode = SImode;\n+      gen_ashl = gen_ashlsi3;\n+      gen_lvsl = gen_altivec_lvsl_reg_si;\n+      gen_lvsr = gen_altivec_lvsr_reg_si;\n+    }\n   /* Generate the IDX for permute shift, width is the vector element size.\n      idx = idx * width.  */\n-  rtx tmp = gen_reg_rtx (DImode);\n-  emit_insn (gen_ashldi3 (tmp, idx, GEN_INT (shift)));\n+  rtx tmp = gen_reg_rtx (shift_mode);\n+  idx = convert_modes (shift_mode, idx_mode, idx, 1);\n+\n+  emit_insn (gen_ashl (tmp, idx, GEN_INT (shift)));\n \n   /*  lvsr    v1,0,idx.  */\n   rtx pcvr = gen_reg_rtx (V16QImode);\n-  emit_insn (gen_altivec_lvsr_reg (pcvr, tmp));\n+  emit_insn (gen_lvsr (pcvr, tmp));\n \n   /*  lvsl    v2,0,idx.  */\n   rtx pcvl = gen_reg_rtx (V16QImode);\n-  emit_insn (gen_altivec_lvsl_reg (pcvl, tmp));\n+  emit_insn (gen_lvsl (pcvl, tmp));\n \n   rtx sub_target = simplify_gen_subreg (V16QImode, target, mode, 0);\n \n@@ -7064,10 +7084,10 @@ rs6000_expand_vector_set_var_p9 (rtx target, rtx val, rtx idx)\n }\n \n /* Insert VAL into IDX of TARGET, VAL size is same of the vector element, IDX\n-   is variable and also counts by vector element size for p8.  */\n+   is variable and also counts by vector element size for p7 & p8.  */\n \n static void\n-rs6000_expand_vector_set_var_p8 (rtx target, rtx val, rtx idx)\n+rs6000_expand_vector_set_var_p7 (rtx target, rtx val, rtx idx)\n {\n   machine_mode mode = GET_MODE (target);\n \n@@ -7082,17 +7102,41 @@ rs6000_expand_vector_set_var_p8 (rtx target, rtx val, rtx idx)\n   int shift = exact_log2 (width);\n \n   machine_mode idx_mode = GET_MODE (idx);\n-  idx = convert_modes (DImode, idx_mode, idx, 1);\n+\n+  machine_mode shift_mode;\n+  rtx (*gen_ashl)(rtx, rtx, rtx);\n+  rtx (*gen_add)(rtx, rtx, rtx);\n+  rtx (*gen_sub)(rtx, rtx, rtx);\n+  rtx (*gen_lvsl)(rtx, rtx);\n+\n+  if (TARGET_POWERPC64)\n+    {\n+      shift_mode = DImode;\n+      gen_ashl = gen_ashldi3;\n+      gen_add = gen_adddi3;\n+      gen_sub = gen_subdi3;\n+      gen_lvsl = gen_altivec_lvsl_reg_di;\n+    }\n+  else\n+    {\n+      shift_mode = SImode;\n+      gen_ashl = gen_ashlsi3;\n+      gen_add = gen_addsi3;\n+      gen_sub = gen_subsi3;\n+      gen_lvsl = gen_altivec_lvsl_reg_si;\n+    }\n \n   /*  idx = idx * width.  */\n-  rtx tmp = gen_reg_rtx (DImode);\n-  emit_insn (gen_ashldi3 (tmp, idx, GEN_INT (shift)));\n+  rtx tmp = gen_reg_rtx (shift_mode);\n+  idx = convert_modes (shift_mode, idx_mode, idx, 1);\n+\n+  emit_insn (gen_ashl (tmp, idx, GEN_INT (shift)));\n \n   /*  For LE:  idx = idx + 8.  */\n   if (!BYTES_BIG_ENDIAN)\n-    emit_insn (gen_adddi3 (tmp, tmp, GEN_INT (8)));\n+    emit_insn (gen_add (tmp, tmp, GEN_INT (8)));\n   else\n-    emit_insn (gen_subdi3 (tmp, GEN_INT (24 - width), tmp));\n+    emit_insn (gen_sub (tmp, GEN_INT (24 - width), tmp));\n \n   /*  lxv vs33, mask.\n       DImode: 0xffffffffffffffff0000000000000000\n@@ -7119,7 +7163,16 @@ rs6000_expand_vector_set_var_p8 (rtx target, rtx val, rtx idx)\n   /*  mtvsrd[wz] f0,tmp_val.  */\n   rtx tmp_val = gen_reg_rtx (SImode);\n   if (inner_mode == E_SFmode)\n-    emit_insn (gen_movsi_from_sf (tmp_val, val));\n+    if (TARGET_DIRECT_MOVE_64BIT)\n+      emit_insn (gen_movsi_from_sf (tmp_val, val));\n+    else\n+      {\n+\trtx stack = rs6000_allocate_stack_temp (SFmode, false, true);\n+\temit_insn (gen_movsf_hardfloat (stack, val));\n+\trtx stack2 = copy_rtx (stack);\n+\tPUT_MODE (stack2, SImode);\n+\temit_move_insn (tmp_val, stack2);\n+      }\n   else\n     tmp_val = force_reg (SImode, val);\n \n@@ -7143,7 +7196,7 @@ rs6000_expand_vector_set_var_p8 (rtx target, rtx val, rtx idx)\n \n   /*  lvsl    13,0,idx.  */\n   rtx pcv = gen_reg_rtx (V16QImode);\n-  emit_insn (gen_altivec_lvsl_reg (pcv, tmp));\n+  emit_insn (gen_lvsl (pcv, tmp));\n \n   /*  vperm 1,1,1,13.  */\n   /*  vperm 0,0,0,13.  */\n@@ -7184,11 +7237,13 @@ rs6000_expand_vector_set (rtx target, rtx val, rtx elt_rtx)\n \t      rs6000_expand_vector_set_var_p9 (target, val, elt_rtx);\n \t      return;\n \t    }\n-\t  else if (TARGET_P8_VECTOR && TARGET_DIRECT_MOVE_64BIT)\n+\t  else if (TARGET_VSX)\n \t    {\n-\t      rs6000_expand_vector_set_var_p8 (target, val, elt_rtx);\n+\t      rs6000_expand_vector_set_var_p7 (target, val, elt_rtx);\n \t      return;\n \t    }\n+\t  else\n+\t    gcc_assert (CONST_INT_P (elt_rtx));\n \t}\n \n       rtx insn = NULL_RTX;\n@@ -7218,8 +7273,6 @@ rs6000_expand_vector_set (rtx target, rtx val, rtx elt_rtx)\n \t}\n     }\n \n-  gcc_assert (CONST_INT_P (elt_rtx));\n-\n   /* Simplify setting single element vectors like V1TImode.  */\n   if (GET_MODE_SIZE (mode) == GET_MODE_SIZE (inner_mode)\n       && INTVAL (elt_rtx) == 0)"}, {"sha": "3446b03d40d5e935505de0b954fc9cae531dd4bf", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "patch": "@@ -1227,7 +1227,7 @@\n (define_expand \"vec_set<mode>\"\n   [(match_operand:VEC_E 0 \"vlogical_operand\")\n    (match_operand:<VEC_base> 1 \"register_operand\")\n-   (match_operand 2 \"reg_or_cint_operand\")]\n+   (match_operand 2 \"vec_set_index_operand\")]\n   \"VECTOR_MEM_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n {\n   rs6000_expand_vector_set (operands[0], operands[1], operands[2]);"}, {"sha": "bcb92be2f5c27228e2c6631fff4a05d56b5f9ec2", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "patch": "@@ -5423,7 +5423,7 @@\n   rtx rtx_vtmp = gen_reg_rtx (V16QImode);\n   rtx tmp = gen_reg_rtx (DImode);\n \n-  emit_insn (gen_altivec_lvsl_reg (shift_mask, operands[2]));\n+  emit_insn (gen_altivec_lvsl_reg_di (shift_mask, operands[2]));\n   emit_insn (gen_ashldi3 (tmp, operands[2], GEN_INT (56)));\n   emit_insn (gen_lxvll (rtx_vtmp, operands[1], tmp));\n   emit_insn (gen_altivec_vperm_v8hiv16qi (operands[0], rtx_vtmp, rtx_vtmp,\n@@ -5507,7 +5507,7 @@\n   rtx rtx_vtmp = gen_reg_rtx (V16QImode);\n   rtx tmp = gen_reg_rtx (DImode);\n \n-  emit_insn (gen_altivec_lvsr_reg (shift_mask, operands[2]));\n+  emit_insn (gen_altivec_lvsr_reg_di (shift_mask, operands[2]));\n   emit_insn (gen_altivec_vperm_v8hiv16qi (rtx_vtmp, operands[0], operands[0],\n \t     shift_mask));\n   emit_insn (gen_ashldi3 (tmp, operands[2], GEN_INT (56)));"}, {"sha": "e0c7ee17bde48895555e107cbe60fb383a95c1a2", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-char-p8.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-char-p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-char-p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-char-p8.c?ref=f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "patch": "@@ -58,8 +58,8 @@ vector unsigned char testuu_cst (unsigned char x, vector unsigned char v)\n /* { dg-final { scan-assembler-times {\\mvperm\\M} 12 { target lp64 } } } */\n \n /* -m32 codegen. */\n-/* { dg-final { scan-assembler-times {\\mstvx\\M|\\mstxvw4x\\M} 4 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mstb\\M} 8 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvw4x\\M} 8 { target { be && ilp32 } } } } */\n-/* { dg-final { scan-assembler-times {\\mvperm\\M} 4 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstvx\\M|\\mstxvw4x\\M} 0 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstb\\M} 4 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvw4x\\M} 4 { target { be && ilp32 } } } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 12 { target ilp32 } } } */\n "}, {"sha": "c18444d50b6e70e5f6b6167ded6287f02d97b74d", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-char-p9.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-char-p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-char-p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-char-p9.c?ref=f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "patch": "@@ -54,8 +54,8 @@ vector unsigned char testuu_cst (unsigned char x, vector unsigned char v)\n \n /* -m32 codegen. */\n /* { dg-final { scan-assembler-times {\\mrlwinm\\M} 4 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mstb\\M} 8 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstb\\M} 4 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mlxv\\M} 8 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mlvebx\\M} 4 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mvperm\\M} 4 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mxxperm\\M} 0 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mxxperm\\M} 8 { target ilp32 } } } */"}, {"sha": "afd7f7e9924e8fe79b7a9d85b2045cf73fef0448", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-double.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-double.c?ref=f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "patch": "@@ -24,15 +24,15 @@ testd_cst (double d, vector double vd)\n \n /* { dg-final { scan-assembler-times {\\mrldic\\M|\\mrlwinm\\M} 1 } } */\n \n-/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstxv\\M|\\mstvx\\M} 1 { target { ! has_arch_pwr8 } } } } */\n-/* { dg-final { scan-assembler-times {\\mstfdx\\M|\\mstfd\\M} 1 { target { ! has_arch_pwr8 } } } } */\n-/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxv\\M|\\mlvx\\M} 1 { target { ! has_arch_pwr8 } } } } */\n+/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstxv\\M|\\mstvx\\M} 1 { target { ! has_arch_pwr7 } } } } */\n+/* { dg-final { scan-assembler-times {\\mstfdx\\M|\\mstfd\\M} 1 { target { ! has_arch_pwr7 } } } } */\n+/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxv\\M|\\mlvx\\M} 1 { target { ! has_arch_pwr7 } } } } */\n \n-/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstxv\\M|\\mstvx\\M} 0 { target { has_arch_pwr8 && lp64 } } } } */\n-/* { dg-final { scan-assembler-times {\\mstfdx\\M|\\mstfd\\M} 0 { target { has_arch_pwr8 && lp64 } } } } */\n+/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstxv\\M|\\mstvx\\M} 0 { target { has_arch_pwr7 && lp64 } } } } */\n+/* { dg-final { scan-assembler-times {\\mstfdx\\M|\\mstfd\\M} 0 { target { has_arch_pwr7 && lp64 } } } } */\n \n-/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxv\\M|\\mlvx\\M} 0 { target { has_arch_pwr8 && lp64 } } } } */\n-/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxv\\M|\\mlvx\\M} 1 { target { has_arch_pwr8 && ilp32 } } } } */\n-/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstxv\\M|\\mstvx\\M} 1 { target { has_arch_pwr8 && ilp32 } } } } */\n-/* { dg-final { scan-assembler-times {\\mstfdx\\M|\\mstfd\\M} 1 { target { has_arch_pwr8 && ilp32 } } } } */\n+/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxv\\M|\\mlvx\\M} 0 { target { has_arch_pwr7 && lp64 } } } } */\n+/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxv\\M|\\mlvx\\M} 0 { target { has_arch_pwr7 && ilp32 } } } } */\n+/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstxv\\M|\\mstvx\\M} 0 { target { has_arch_pwr7 && ilp32 } } } } */\n+/* { dg-final { scan-assembler-times {\\mstfdx\\M|\\mstfd\\M} 0 { target { has_arch_pwr7 && ilp32 } } } } */\n "}, {"sha": "1866ce27176429db738c5a6372be8a6a9228fac9", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-float-p8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p8.c?ref=f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "patch": "@@ -29,8 +29,8 @@ testf_cst (float f, vector float vf)\n /* { dg-final { scan-assembler-times {\\mvperm\\M} 3 { target lp64 } } } */\n \n /* -m32 codegen. */\n-/* { dg-final { scan-assembler-times {\\mstvx\\M|\\mstxv\\M|\\mstxvd2x\\M} 1 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstvx\\M|\\mstxv\\M|\\mstxvd2x\\M} 0 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mstfs\\M|\\mstfsx\\M} 2 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mvperm\\M} 1 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 3 { target ilp32 } } } */\n \n "}, {"sha": "1c57672314647d0f36bc1200720dc04ce431a543", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-float-p9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p9.c?ref=f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "patch": "@@ -32,4 +32,4 @@ testf_cst (float f, vector float vf)\n /* { dg-final { scan-assembler-times {\\mlxv\\M} 2 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mlvewx\\M} 1 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mvperm\\M} 1 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mxxperm\\M} 0 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mxxperm\\M} 2 { target ilp32 } } } */"}, {"sha": "bcee9b2989e23d613dee8cabaa3e1cb281421e83", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-int-p8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-int-p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-int-p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-int-p8.c?ref=f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "patch": "@@ -57,7 +57,7 @@ testui2_cst(unsigned int x, vector unsigned int v)\n /* { dg-final { scan-assembler-times {\\mlvewx\\M} 4 { target lp64 } } } */\n /* { dg-final { scan-assembler-times {\\mvperm\\M} 12 { target lp64 } } } */\n \n-/* { dg-final { scan-assembler-times {\\mvperm\\M} 4 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mstvx\\M|\\mstwx\\M|\\mstw\\M|\\mstxvw4x\\M} 12 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvw4x\\M} 8 { target { be && ilp32 } } } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 12 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstvx\\M|\\mstwx\\M|\\mstw\\M|\\mstxvw4x\\M} 4 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvw4x\\M} 4 { target { be && ilp32 } } } } */\n /* { dg-final { scan-assembler-times {\\mlvewx\\M} 4 { target ilp32 } } } */"}, {"sha": "5512810ee46e4d884a6befb40fbf37ff80acb32a", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-int-p9.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-int-p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-int-p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-int-p9.c?ref=f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "patch": "@@ -57,9 +57,9 @@ testui2_cst(unsigned int x, vector unsigned int v)\n /* { dg-final { scan-assembler-times {\\mmtvsrwz\\M} 8 { target lp64 } } } */\n /* { dg-final { scan-assembler-times {\\mxxinsertw\\M} 8 { target lp64 } } } */\n \n-/* { dg-final { scan-assembler-times {\\mstxv\\M|\\mstvx\\M} 4 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mstw\\M} 8 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstxv\\M|\\mstvx\\M} 0 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstw\\M} 4 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mlxv\\M} 8 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mlvewx\\M} 4 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mvperm\\M} 4 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mxxperm\\M} 0 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mxxperm\\M} 8 { target ilp32 } } } */"}, {"sha": "8ca4ac724433c89ef27b4360727e045ff3e836a4", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-longlong.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-longlong.c?ref=f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "patch": "@@ -65,6 +65,6 @@ testul2_cst(unsigned long long x, vector unsigned long long v)\n \n /* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxv\\M|\\mlvx\\M} 0 { target lp64 } } } */\n \n-/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstvx\\M|\\mstxv\\M} 4 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mvperm\\M} 0 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxv\\M|\\mlvx\\M} 4 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstvx\\M|\\mstxv\\M} 0 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 8 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxv\\M|\\mlvx\\M} 0 { target ilp32 } } } */"}, {"sha": "0d9d4e78d5ffa58c816880c7e179283fb44408eb", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-short-p8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-short-p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-short-p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-short-p8.c?ref=f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "patch": "@@ -56,7 +56,7 @@ testus2_cst(unsigned short x, vector unsigned short v)\n /* { dg-final { scan-assembler-times {\\mlvehx\\M} 4 } } */\n /* { dg-final { scan-assembler-times {\\mvperm\\M} 12 { target lp64 } } } */\n \n-/* { dg-final { scan-assembler-times {\\mlhz\\M|\\mlvx\\M|\\mlxv\\M|\\mlxvw4x\\M} 8 { target { be && ilp32 } } } } */\n-/* { dg-final { scan-assembler-times {\\msthx\\M|\\mstvx\\M|\\msth\\M|\\mstxvw4x\\M} 12 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mvperm\\M} 4 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mlhz\\M|\\mlvx\\M|\\mlxv\\M|\\mlxvw4x\\M} 4 { target { be && ilp32 } } } } */\n+/* { dg-final { scan-assembler-times {\\msthx\\M|\\mstvx\\M|\\msth\\M|\\mstxvw4x\\M} 4 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 12 { target ilp32 } } } */\n "}, {"sha": "050adb2c49ead2c6580da3e084799bd4de77310d", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-short-p9.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-short-p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-short-p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-short-p9.c?ref=f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "patch": "@@ -55,10 +55,10 @@ testus2_cst(unsigned short x, vector unsigned short v)\n /* { dg-final { scan-assembler-times {\\mlxv\\M|\\mlvx\\M} 0 { target lp64 }} } */\n \n /* -m32 uses sth/lvehx as part of the sequence. */\n-/* { dg-final { scan-assembler-times {\\mstxv\\M|\\mstvx\\M} 4 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\msth\\M} 8 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstxv\\M|\\mstvx\\M} 0 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\msth\\M} 4 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mlvehx\\M} 4 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mvperm\\M} 4 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mxxperm\\M} 0 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mxxperm\\M} 8 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mlxv\\M|\\mlvx\\M} 8 { target ilp32 } } } */\n "}, {"sha": "5e29b19768d4057373b606448f3fdb791e391867", "filename": "gcc/testsuite/gcc.target/powerpc/pr79251-run.p7.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251-run.p7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251-run.p7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251-run.p7.c?ref=f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target vsx_hw } */\n+/* { dg-options \"-O2 -mvsx -mdejagnu-cpu=power7\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+#include \"pr79251.h\"\n+\n+int\n+main (void)\n+{\n+  TEST_VEC_INSERT_ALL (run_test)\n+  return 0;\n+}\n+"}, {"sha": "25e227a80361b1dba73298b49ba18e1df2a42497", "filename": "gcc/testsuite/gcc.target/powerpc/pr79251.p7.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251.p7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251.p7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251.p7.c?ref=f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power7 -mvsx\" } */\n+\n+#include <stddef.h>\n+#include <altivec.h>\n+#include \"pr79251.h\"\n+\n+/* { dg-final { scan-assembler-not {\\mstxw\\M} } } */\n+/* { dg-final { scan-assembler-times {\\mlvsl\\M} 10 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mlvsr\\M} 3 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 20 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mxxpermdi\\M} 10 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mxxsel\\M} 7 { target lp64 } } } */\n+\n+/* { dg-final { scan-assembler-times {\\mrlwinm\\M} 10 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstxvw4x\\M} 0 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstxvd2x\\M} 0 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstb\\M|\\msth\\M|\\mstw\\M|\\mstfs\\M|\\mstfd\\M} 19 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mlxvw4x\\M} 0 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mlxvd2x\\M} 7 { target ilp32 } } } */\n+\n+"}, {"sha": "4fc3ea063820efc9fe9090758549187d197b4ef5", "filename": "gcc/testsuite/gcc.target/powerpc/pr79251.p8.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251.p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251.p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251.p8.c?ref=f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "patch": "@@ -14,9 +14,9 @@\n /* { dg-final { scan-assembler-times {\\mxxsel\\M} 7 { target lp64 } } } */\n \n /* { dg-final { scan-assembler-times {\\mrlwinm\\M} 10 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mstxvw4x\\M} 6 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mstxvd2x\\M} 4 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mstb\\M|\\msth\\M|\\mstw\\M|\\mstfs\\M|\\mstfd\\M} 12 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mlxvw4x\\M} 6 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mlxvd2x\\M} 4 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstxvw4x\\M} 0 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstxvd2x\\M} 0 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstb\\M|\\msth\\M|\\mstw\\M|\\mstfs\\M|\\mstfd\\M} 1 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mlxvw4x\\M} 0 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mlxvd2x\\M} 7 { target ilp32 } } } */\n "}, {"sha": "9312aa6040990aeab1f8372f16235c349401aa8b", "filename": "gcc/testsuite/gcc.target/powerpc/pr79251.p9.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251.p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251.p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79251.p9.c?ref=f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "patch": "@@ -16,7 +16,7 @@\n /* { dg-final { scan-assembler-times {\\mxxpermdi\\M} 3 { target lp64 } } } */\n \n /* { dg-final { scan-assembler-times {\\mrlwinm\\M} 10 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mstxv\\M} 10 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mstb\\M|\\msth\\M|\\mstw\\M|\\mstfs\\M|\\mstfd\\M} 12 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mlxv\\M} 10 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstxv\\M} 0 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstb\\M|\\msth\\M|\\mstw\\M|\\mstfs\\M|\\mstfd\\M} 1 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mlxv\\M} 7 { target ilp32 } } } */\n "}, {"sha": "8841660fd0395e556215edb5c142c208d8188f4b", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-builtin-7.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-builtin-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-builtin-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-builtin-7.c?ref=f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "patch": "@@ -191,10 +191,11 @@ vector unsigned __int128 splat_uint128 (unsigned __int128 x) { return vec_splats\n  */\n \n /* { dg-final { scan-assembler-times {\\mrldic\\M} 0  { target { be && ilp32 } } } } */\n-/* { dg-final { scan-assembler-times {\\mrldic\\M} 64 { target { be && lp64 } } } } */\n-/* { dg-final { scan-assembler-times {\\mrldic\\M} 64 { target le } } } */\n-/* { dg-final { scan-assembler-times \"xxpermdi\" 4 { target be } } } */\n-/* { dg-final { scan-assembler-times \"xxpermdi\" 6 { target le } } } */\n+/* { dg-final { scan-assembler-times {\\mrldic\\M} 65 { target { be && lp64 } } } } */\n+/* { dg-final { scan-assembler-times {\\mrldic\\M} 65 { target le } } } */\n+/* { dg-final { scan-assembler-times \"xxpermdi\" 33 { target be } } } */\n+/* { dg-final { scan-assembler-times \"xxpermdi\" 35 { target le } } } */\n /* { dg-final { scan-assembler-times \"vspltisb\" 2 } } */\n /* { dg-final { scan-assembler-times \"vspltish\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vspltisw\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vspltisw\" 2 { target be } } } */\n+/* { dg-final { scan-assembler-times \"vspltisw\" 23 { target le } } } */"}]}