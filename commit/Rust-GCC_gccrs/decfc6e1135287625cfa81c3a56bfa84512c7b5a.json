{"sha": "decfc6e1135287625cfa81c3a56bfa84512c7b5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVjZmM2ZTExMzUyODc2MjVjZmE4MWMzYTU2YmZhODQ1MTJjN2I1YQ==", "commit": {"author": {"name": "Terry Guo", "email": "terry.guo@arm.com", "date": "2014-11-07T03:02:29Z"}, "committer": {"name": "Xuepeng Guo", "email": "xguo@gcc.gnu.org", "date": "2014-11-07T03:02:29Z"}, "message": "arm.opt (masm-syntax-unified): New option.\n\ngcc/ChangeLog:\n2014-11-07  Terry Guo  <terry.guo@arm.com>\n\n\t* config/arm/arm.opt (masm-syntax-unified): New option.\n\t* doc/invoke.texi (-masm-syntax-unified): Document new option.\n\t* config/arm/arm.h (TARGET_UNIFIED_ASM): Also include thumb1.\n\t(ASM_APP_ON): Redefined.\n\t* config/arm/arm.c (arm_option_override): Thumb2 inline assembly\n\tcode always use UAL syntax.\n\t(arm_output_mi_thunk): Use UAL syntax for Thumb1 target.\n\t* config/arm/thumb1.md: Likewise.\n\ngcc/testsuite/ChangeLog:\n2014-11-07  Terry Guo  <terry.guo@arm.com>\n\n\t* gcc.target/arm/anddi_notdi-1.c: Match with UAL format.\n\t* gcc.target/arm/pr40956.c: Likewise.\n\t* gcc.target/arm/thumb1-Os-mult.c: Likewise.\n\t* gcc.target/arm/thumb1-load-64bit-constant-3.c: Likewise.\n\t* gcc.target/arm/scd42-1.c: Likewise.\n\nFrom-SVN: r217211", "tree": {"sha": "223a44b5ff9d92f1271fbe6ce779bbeb7ffaf45c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/223a44b5ff9d92f1271fbe6ce779bbeb7ffaf45c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/decfc6e1135287625cfa81c3a56bfa84512c7b5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/decfc6e1135287625cfa81c3a56bfa84512c7b5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/decfc6e1135287625cfa81c3a56bfa84512c7b5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/decfc6e1135287625cfa81c3a56bfa84512c7b5a/comments", "author": null, "committer": null, "parents": [{"sha": "efb1c0d318f754cb3feaeb542955c71eaaab9402", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efb1c0d318f754cb3feaeb542955c71eaaab9402", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efb1c0d318f754cb3feaeb542955c71eaaab9402"}], "stats": {"total": 172, "additions": 111, "deletions": 61}, "files": [{"sha": "2aa72780c1988ff4e2892ca4e3c5f5fbf6bef8e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decfc6e1135287625cfa81c3a56bfa84512c7b5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decfc6e1135287625cfa81c3a56bfa84512c7b5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=decfc6e1135287625cfa81c3a56bfa84512c7b5a", "patch": "@@ -1,3 +1,14 @@\n+2014-11-07  Terry Guo  <terry.guo@arm.com>\n+\n+\t* config/arm/arm.opt (masm-syntax-unified): New option.\n+\t* doc/invoke.texi (-masm-syntax-unified): Document new option.\n+\t* config/arm/arm.h (TARGET_UNIFIED_ASM): Also include thumb1.\n+\t(ASM_APP_ON): Redefined.\n+\t* config/arm/arm.c (arm_option_override): Thumb2 inline assembly\n+\tcode always use UAL syntax.\n+\t(arm_output_mi_thunk): Use UAL syntax for Thumb1 target.\n+\t* config/arm/thumb1.md: Likewise.\n+\n 2014-11-06  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/pa/pa.md (trap): New insn.  Add \"trap\" to attribute type."}, {"sha": "cc005d6c692bc169c4d6ee470bb533f98ec4f51b", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decfc6e1135287625cfa81c3a56bfa84512c7b5a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decfc6e1135287625cfa81c3a56bfa84512c7b5a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=decfc6e1135287625cfa81c3a56bfa84512c7b5a", "patch": "@@ -3162,6 +3162,11 @@ arm_option_override (void)\n   if (target_slow_flash_data)\n     arm_disable_literal_pool = true;\n \n+  /* Thumb2 inline assembly code should always use unified syntax.\n+     This will apply to ARM and Thumb1 eventually.  */\n+  if (TARGET_THUMB2)\n+    inline_asm_unified = 1;\n+\n   /* Register global variables with the garbage collector.  */\n   arm_add_gc_roots ();\n }\n@@ -28658,12 +28663,14 @@ arm_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t  fputs (\"\\tldr\\tr3, \", file);\n \t  assemble_name (file, label);\n \t  fputs (\"+4\\n\", file);\n-\t  asm_fprintf (file, \"\\t%s\\t%r, %r, r3\\n\",\n+\t  asm_fprintf (file, \"\\t%ss\\t%r, %r, r3\\n\",\n \t\t       mi_op, this_regno, this_regno);\n \t}\n       else if (mi_delta != 0)\n \t{\n-\t  asm_fprintf (file, \"\\t%s\\t%r, %r, #%d\\n\",\n+\t  /* Thumb1 unified syntax requires s suffix in instruction name when\n+\t     one of the operands is immediate.  */\n+\t  asm_fprintf (file, \"\\t%ss\\t%r, %r, #%d\\n\",\n \t\t       mi_op, this_regno, this_regno,\n \t\t       mi_delta);\n \t}"}, {"sha": "d850982563eb35d9d87298473bc3dfcb0527ae0b", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decfc6e1135287625cfa81c3a56bfa84512c7b5a/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decfc6e1135287625cfa81c3a56bfa84512c7b5a/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=decfc6e1135287625cfa81c3a56bfa84512c7b5a", "patch": "@@ -168,6 +168,8 @@ extern char arm_arch_name[];\n             builtin_define (\"__ARM_ARCH_EXT_IDIV__\");\t\\\n             builtin_define (\"__ARM_FEATURE_IDIV\");\t\\\n          }\t\t\t\t\t\t\\\n+\tif (inline_asm_unified)\t\t\t\t\\\n+\t  builtin_define (\"__ARM_ASM_SYNTAX_UNIFIED__\");\\\n     } while (0)\n \n #include \"config/arm/arm-opts.h\"\n@@ -351,8 +353,8 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n        || (!optimize_size && !current_tune->prefer_constant_pool)))\n \n /* We could use unified syntax for arm mode, but for now we just use it\n-   for Thumb-2.  */\n-#define TARGET_UNIFIED_ASM TARGET_THUMB2\n+   for thumb mode.  */\n+#define TARGET_UNIFIED_ASM (TARGET_THUMB)\n \n /* Nonzero if this chip provides the DMB instruction.  */\n #define TARGET_HAVE_DMB\t\t(arm_arch6m || arm_arch7)\n@@ -2150,8 +2152,13 @@ extern int making_const_table;\n #define CC_STATUS_INIT \\\n   do { cfun->machine->thumb1_cc_insn = NULL_RTX; } while (0)\n \n+#undef ASM_APP_ON\n+#define ASM_APP_ON (inline_asm_unified ? \"\\t.syntax unified\\n\" : \\\n+\t\t    \"\\t.syntax divided\\n\")\n+\n #undef  ASM_APP_OFF\n-#define ASM_APP_OFF (TARGET_ARM ? \"\" : \"\\t.thumb\\n\")\n+#define ASM_APP_OFF (TARGET_ARM ? \"\\t.arm\\n\\t.syntax divided\\n\" : \\\n+\t\t     \"\\t.thumb\\n\\t.syntax unified\\n\")\n \n /* Output a push or a pop instruction (only used when profiling).\n    We can't push STATIC_CHAIN_REGNUM (r12) directly with Thumb-1.  We know"}, {"sha": "50f4c7db1066c10541a057195f6d060176bd93eb", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decfc6e1135287625cfa81c3a56bfa84512c7b5a/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decfc6e1135287625cfa81c3a56bfa84512c7b5a/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=decfc6e1135287625cfa81c3a56bfa84512c7b5a", "patch": "@@ -271,3 +271,7 @@ Use Neon to perform 64-bits operations rather than core registers.\n mslow-flash-data\n Target Report Var(target_slow_flash_data) Init(0)\n Assume loading data from flash is slower than fetching instructions.\n+\n+masm-syntax-unified\n+Target Report Var(inline_asm_unified) Init(0)\n+Assume unified syntax for Thumb inline assembly code."}, {"sha": "8a2abe9610c4a5213171a760c40718793df461cf", "filename": "gcc/config/arm/thumb1.md", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decfc6e1135287625cfa81c3a56bfa84512c7b5a/gcc%2Fconfig%2Farm%2Fthumb1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decfc6e1135287625cfa81c3a56bfa84512c7b5a/gcc%2Fconfig%2Farm%2Fthumb1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb1.md?ref=decfc6e1135287625cfa81c3a56bfa84512c7b5a", "patch": "@@ -29,7 +29,7 @@\n    (clobber (reg:CC CC_REGNUM))\n   ]\n   \"TARGET_THUMB1\"\n-  \"add\\\\t%Q0, %Q0, %Q2\\;adc\\\\t%R0, %R0, %R2\"\n+  \"adds\\\\t%Q0, %Q0, %Q2\\;adcs\\\\t%R0, %R0, %R2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"multiple\")]\n )\n@@ -42,9 +42,9 @@\n   \"*\n    static const char * const asms[] =\n    {\n-     \\\"add\\\\t%0, %0, %2\\\",\n-     \\\"sub\\\\t%0, %0, #%n2\\\",\n-     \\\"add\\\\t%0, %1, %2\\\",\n+     \\\"adds\\\\t%0, %0, %2\\\",\n+     \\\"subs\\\\t%0, %0, #%n2\\\",\n+     \\\"adds\\\\t%0, %1, %2\\\",\n      \\\"add\\\\t%0, %0, %2\\\",\n      \\\"add\\\\t%0, %0, %2\\\",\n      \\\"add\\\\t%0, %1, %2\\\",\n@@ -56,7 +56,7 @@\n    if ((which_alternative == 2 || which_alternative == 6)\n        && CONST_INT_P (operands[2])\n        && INTVAL (operands[2]) < 0)\n-     return \\\"sub\\\\t%0, %1, #%n2\\\";\n+     return (which_alternative == 2) ? \\\"subs\\\\t%0, %1, #%n2\\\" : \\\"sub\\\\t%0, %1, #%n2\\\";\n    return asms[which_alternative];\n   \"\n   \"&& reload_completed && CONST_INT_P (operands[2])\n@@ -105,7 +105,7 @@\n \t\t  (match_operand:DI 2 \"register_operand\"  \"l\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_THUMB1\"\n-  \"sub\\\\t%Q0, %Q0, %Q2\\;sbc\\\\t%R0, %R0, %R2\"\n+  \"subs\\\\t%Q0, %Q0, %Q2\\;sbcs\\\\t%R0, %R0, %R2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"multiple\")]\n )\n@@ -115,7 +115,7 @@\n \t(minus:SI (match_operand:SI 1 \"register_operand\" \"l\")\n \t\t  (match_operand:SI 2 \"reg_or_int_operand\" \"lPd\")))]\n   \"TARGET_THUMB1\"\n-  \"sub\\\\t%0, %1, %2\"\n+  \"subs\\\\t%0, %1, %2\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"alus_sreg\")]\n@@ -133,9 +133,9 @@\n  \"TARGET_THUMB1 && !arm_arch6\"\n   \"*\n   if (which_alternative < 2)\n-    return \\\"mov\\\\t%0, %1\\;mul\\\\t%0, %2\\\";\n+    return \\\"mov\\\\t%0, %1\\;muls\\\\t%0, %2\\\";\n   else\n-    return \\\"mul\\\\t%0, %2\\\";\n+    return \\\"muls\\\\t%0, %2\\\";\n   \"\n   [(set_attr \"length\" \"4,4,2\")\n    (set_attr \"type\" \"muls\")]\n@@ -147,9 +147,9 @@\n \t\t (match_operand:SI 2 \"register_operand\" \"l,0,0\")))]\n   \"TARGET_THUMB1 && arm_arch6\"\n   \"@\n-   mul\\\\t%0, %2\n-   mul\\\\t%0, %1\n-   mul\\\\t%0, %1\"\n+   muls\\\\t%0, %2\n+   muls\\\\t%0, %1\n+   muls\\\\t%0, %1\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"type\" \"muls\")]\n )\n@@ -159,7 +159,7 @@\n \t(and:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n \t\t(match_operand:SI 2 \"register_operand\" \"l\")))]\n   \"TARGET_THUMB1\"\n-  \"and\\\\t%0, %2\"\n+  \"ands\\\\t%0, %2\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"type\"  \"logic_imm\")\n    (set_attr \"conds\" \"set\")])\n@@ -202,7 +202,7 @@\n \t(and:SI (not:SI (match_operand:SI 1 \"register_operand\" \"l\"))\n \t\t(match_operand:SI         2 \"register_operand\" \"0\")))]\n   \"TARGET_THUMB1\"\n-  \"bic\\\\t%0, %1\"\n+  \"bics\\\\t%0, %1\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"logics_reg\")]\n@@ -213,7 +213,7 @@\n \t(ior:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n \t\t(match_operand:SI 2 \"register_operand\" \"l\")))]\n   \"TARGET_THUMB1\"\n-  \"orr\\\\t%0, %2\"\n+  \"orrs\\\\t%0, %2\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"logics_reg\")])\n@@ -223,7 +223,7 @@\n \t(xor:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n \t\t(match_operand:SI 2 \"register_operand\" \"l\")))]\n   \"TARGET_THUMB1\"\n-  \"eor\\\\t%0, %2\"\n+  \"eors\\\\t%0, %2\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"logics_reg\")]\n@@ -234,7 +234,7 @@\n \t(ashift:SI (match_operand:SI 1 \"register_operand\" \"l,0\")\n \t\t   (match_operand:SI 2 \"nonmemory_operand\" \"N,l\")))]\n   \"TARGET_THUMB1\"\n-  \"lsl\\\\t%0, %1, %2\"\n+  \"lsls\\\\t%0, %1, %2\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"type\" \"shift_imm,shift_reg\")\n    (set_attr \"conds\" \"set\")])\n@@ -244,7 +244,7 @@\n \t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"l,0\")\n \t\t     (match_operand:SI 2 \"nonmemory_operand\" \"N,l\")))]\n   \"TARGET_THUMB1\"\n-  \"asr\\\\t%0, %1, %2\"\n+  \"asrs\\\\t%0, %1, %2\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"type\" \"shift_imm,shift_reg\")\n    (set_attr \"conds\" \"set\")])\n@@ -254,7 +254,7 @@\n \t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"l,0\")\n \t\t     (match_operand:SI 2 \"nonmemory_operand\" \"N,l\")))]\n   \"TARGET_THUMB1\"\n-  \"lsr\\\\t%0, %1, %2\"\n+  \"lsrs\\\\t%0, %1, %2\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"type\" \"shift_imm,shift_reg\")\n    (set_attr \"conds\" \"set\")])\n@@ -264,7 +264,7 @@\n \t(rotatert:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:SI 2 \"register_operand\" \"l\")))]\n   \"TARGET_THUMB1\"\n-  \"ror\\\\t%0, %0, %2\"\n+  \"rors\\\\t%0, %0, %2\"\n   [(set_attr \"type\" \"shift_reg\")\n    (set_attr \"length\" \"2\")]\n )\n@@ -274,7 +274,7 @@\n \t(neg:DI (match_operand:DI 1 \"register_operand\" \"l\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_THUMB1\"\n-  \"mov\\\\t%R0, #0\\;neg\\\\t%Q0, %Q1\\;sbc\\\\t%R0, %R1\"\n+  \"movs\\\\t%R0, #0\\;rsbs\\\\t%Q0, %Q1, #0\\;sbcs\\\\t%R0, %R1\"\n   [(set_attr \"length\" \"6\")\n    (set_attr \"type\" \"multiple\")]\n )\n@@ -283,7 +283,7 @@\n   [(set (match_operand:SI         0 \"register_operand\" \"=l\")\n \t(neg:SI (match_operand:SI 1 \"register_operand\" \"l\")))]\n   \"TARGET_THUMB1\"\n-  \"neg\\\\t%0, %1\"\n+  \"rsbs\\\\t%0, %1, #0\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"type\" \"alu_imm\")]\n )\n@@ -322,7 +322,7 @@\n   [(set (match_operand:SI         0 \"register_operand\" \"=l\")\n \t(not:SI (match_operand:SI 1 \"register_operand\"  \"l\")))]\n   \"TARGET_THUMB1\"\n-  \"mvn\\\\t%0, %1\"\n+  \"mvns\\\\t%0, %1\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"type\" \"mvn_reg\")]\n )\n@@ -456,7 +456,7 @@\n       ops[3] = ops[0];\n     else\n       ops[3] = operands[2];\n-    output_asm_insn (\\\"mov\\\\t%3, %2\\;ldrsh\\\\t%0, [%1, %3]\\\", ops);\n+    output_asm_insn (\\\"movs\\\\t%3, %2\\;ldrsh\\\\t%0, [%1, %3]\\\", ops);\n     return \\\"\\\";\n   }\"\n   [(set_attr_alternative \"length\"\n@@ -586,10 +586,10 @@\n \treturn \\\"add\\\\t%0,  %1,  #0\\;add\\\\t%H0, %H1, #0\\\";\n       return   \\\"add\\\\t%H0, %H1, #0\\;add\\\\t%0,  %1,  #0\\\";\n     case 1:\n-      return \\\"mov\\\\t%Q0, %1\\;mov\\\\t%R0, #0\\\";\n+      return \\\"movs\\\\t%Q0, %1\\;movs\\\\t%R0, #0\\\";\n     case 2:\n       operands[1] = GEN_INT (- INTVAL (operands[1]));\n-      return \\\"mov\\\\t%Q0, %1\\;neg\\\\t%Q0, %Q0\\;asr\\\\t%R0, %Q0, #31\\\";\n+      return \\\"movs\\\\t%Q0, %1\\;rsbs\\\\t%Q0, %Q0, #0\\;asrs\\\\t%R0, %Q0, #31\\\";\n     case 3:\n       return \\\"ldmia\\\\t%1, {%0, %H0}\\\";\n     case 4:\n@@ -619,8 +619,8 @@\n    && (   register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n   \"@\n-   mov\t%0, %1\n-   mov\t%0, %1\n+   movs\t%0, %1\n+   movs\t%0, %1\n    #\n    #\n    ldmia\\\\t%1, {%0}\n@@ -715,11 +715,11 @@\n   \"*\n   switch (which_alternative)\n     {\n-    case 0: return \\\"add\t%0, %1, #0\\\";\n+    case 0: return \\\"adds\t%0, %1, #0\\\";\n     case 2: return \\\"strh\t%1, %0\\\";\n     case 3: return \\\"mov\t%0, %1\\\";\n     case 4: return \\\"mov\t%0, %1\\\";\n-    case 5: return \\\"mov\t%0, %1\\\";\n+    case 5: return \\\"movs\t%0, %1\\\";\n     default: gcc_unreachable ();\n     case 1:\n       /* The stack pointer can end up being taken as an index register.\n@@ -767,12 +767,12 @@\n    && (   register_operand (operands[0], QImode)\n        || register_operand (operands[1], QImode))\"\n   \"@\n-   add\\\\t%0, %1, #0\n+   adds\\\\t%0, %1, #0\n    ldrb\\\\t%0, %1\n    strb\\\\t%1, %0\n    mov\\\\t%0, %1\n    mov\\\\t%0, %1\n-   mov\\\\t%0, %1\"\n+   movs\\\\t%0, %1\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"type\" \"alu_imm,load1,store1,mov_reg,mov_imm,mov_imm\")\n    (set_attr \"pool_range\" \"*,32,*,*,*,*\")\n@@ -819,7 +819,7 @@\n    && (   register_operand (operands[0], SFmode)\n        || register_operand (operands[1], SFmode))\"\n   \"@\n-   add\\\\t%0, %1, #0\n+   adds\\\\t%0, %1, #0\n    ldmia\\\\t%1, {%0}\n    stmia\\\\t%0, {%1}\n    ldr\\\\t%0, %1\n@@ -848,8 +848,8 @@\n     default:\n     case 0:\n       if (REGNO (operands[1]) == REGNO (operands[0]) + 1)\n-\treturn \\\"add\\\\t%0, %1, #0\\;add\\\\t%H0, %H1, #0\\\";\n-      return \\\"add\\\\t%H0, %H1, #0\\;add\\\\t%0, %1, #0\\\";\n+\treturn \\\"adds\\\\t%0, %1, #0\\;adds\\\\t%H0, %H1, #0\\\";\n+      return \\\"adds\\\\t%H0, %H1, #0\\;adds\\\\t%0, %1, #0\\\";\n     case 1:\n       return \\\"ldmia\\\\t%1, {%0, %H0}\\\";\n     case 2:\n@@ -1013,7 +1013,7 @@\n    (clobber (match_scratch:SI 0 \"=l,l\"))]\n   \"TARGET_THUMB1\"\n   \"*\n-  output_asm_insn (\\\"add\\\\t%0, %1, #%n2\\\", operands);\n+  output_asm_insn (\\\"adds\\\\t%0, %1, #%n2\\\", operands);\n \n   switch (get_attr_length (insn))\n     {\n@@ -1095,7 +1095,7 @@\n   op[1] = operands[1];\n   op[2] = GEN_INT (32 - 1 - INTVAL (operands[2]));\n \n-  output_asm_insn (\\\"lsl\\\\t%0, %1, %2\\\", op);\n+  output_asm_insn (\\\"lsls\\\\t%0, %1, %2\\\", op);\n   switch (get_attr_length (insn))\n     {\n     case 4:  return \\\"b%d0\\\\t%l3\\\";\n@@ -1140,7 +1140,7 @@\n   op[1] = operands[1];\n   op[2] = GEN_INT (32 - INTVAL (operands[2]));\n \n-  output_asm_insn (\\\"lsl\\\\t%0, %1, %2\\\", op);\n+  output_asm_insn (\\\"lsls\\\\t%0, %1, %2\\\", op);\n   switch (get_attr_length (insn))\n     {\n     case 4:  return \\\"b%d0\\\\t%l3\\\";\n@@ -1224,20 +1224,20 @@\n      cond[1] = operands[4];\n \n      if (which_alternative == 0)\n-       output_asm_insn (\\\"sub\\\\t%0, %2, #1\\\", operands);\n+       output_asm_insn (\\\"subs\\\\t%0, %2, #1\\\", operands);\n      else if (which_alternative == 1)\n        {\n \t /* We must provide an alternative for a hi reg because reload\n \t    cannot handle output reloads on a jump instruction, but we\n \t    can't subtract into that.  Fortunately a mov from lo to hi\n \t    does not clobber the condition codes.  */\n-\t output_asm_insn (\\\"sub\\\\t%1, %2, #1\\\", operands);\n+\t output_asm_insn (\\\"subs\\\\t%1, %2, #1\\\", operands);\n \t output_asm_insn (\\\"mov\\\\t%0, %1\\\", operands);\n        }\n      else\n        {\n \t /* Similarly, but the target is memory.  */\n-\t output_asm_insn (\\\"sub\\\\t%1, %2, #1\\\", operands);\n+\t output_asm_insn (\\\"subs\\\\t%1, %2, #1\\\", operands);\n \t output_asm_insn (\\\"str\\\\t%1, %0\\\", operands);\n        }\n \n@@ -1336,9 +1336,9 @@\n      cond[2] = operands[3];\n \n      if (CONST_INT_P (cond[2]) && INTVAL (cond[2]) < 0)\n-       output_asm_insn (\\\"sub\\\\t%0, %1, #%n2\\\", cond);\n+       output_asm_insn (\\\"subs\\\\t%0, %1, #%n2\\\", cond);\n      else\n-       output_asm_insn (\\\"add\\\\t%0, %1, %2\\\", cond);\n+       output_asm_insn (\\\"adds\\\\t%0, %1, %2\\\", cond);\n \n      if (which_alternative >= 2\n \t && which_alternative < 4)\n@@ -1418,13 +1418,13 @@\n \t break;\n        case 2:\n \t if (INTVAL (operands[2]) < 0)\n-\t   output_asm_insn (\\\"sub\\t%0, %1, %2\\\", operands);\n+\t   output_asm_insn (\\\"subs\\t%0, %1, %2\\\", operands);\n \t else\n \t   output_asm_insn (\\\"add\\t%0, %1, %2\\\", operands);\n \t break;\n        case 3:\n \t if (INTVAL (operands[2]) < 0)\n-\t   output_asm_insn (\\\"sub\\t%0, %0, %2\\\", operands);\n+\t   output_asm_insn (\\\"subs\\t%0, %0, %2\\\", operands);\n \t else\n \t   output_asm_insn (\\\"add\\t%0, %0, %2\\\", operands);\n \t break;\n@@ -1465,7 +1465,7 @@\n \t\t      (const_int 0)))\n    (clobber (match_scratch:SI 1 \"=l\"))]\n   \"TARGET_THUMB1\"\n-  \"orr\\\\t%1, %Q0, %R0\"\n+  \"orrs\\\\t%1, %Q0, %R0\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"length\" \"2\")\n    (set_attr \"type\" \"logics_reg\")]\n@@ -1498,8 +1498,8 @@\n    (clobber (match_operand:SI 2 \"s_register_operand\" \"=X,l\"))]\n   \"TARGET_THUMB1\"\n   \"@\n-   neg\\\\t%0, %1\\;adc\\\\t%0, %0, %1\n-   neg\\\\t%2, %1\\;adc\\\\t%0, %1, %2\"\n+   rsbs\\\\t%0, %1, #0\\;adcs\\\\t%0, %0, %1\n+   rsbs\\\\t%2, %1, #0\\;adcs\\\\t%0, %1, %2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"multiple\")]\n )\n@@ -1510,7 +1510,7 @@\n \t       (const_int 0)))\n    (clobber (match_operand:SI 2 \"s_register_operand\" \"=l\"))]\n   \"TARGET_THUMB1\"\n-  \"sub\\\\t%2, %1, #1\\;sbc\\\\t%0, %1, %2\"\n+  \"subs\\\\t%2, %1, #1\\;sbcs\\\\t%0, %1, %2\"\n   [(set_attr \"length\" \"4\")]\n )\n \n@@ -1520,7 +1520,7 @@\n         (neg:SI (ltu:SI (match_operand:SI 1 \"s_register_operand\" \"l,*h\")\n \t\t\t(match_operand:SI 2 \"thumb1_cmp_operand\" \"lI*h,*r\"))))]\n   \"TARGET_THUMB1\"\n-  \"cmp\\\\t%1, %2\\;sbc\\\\t%0, %0, %0\"\n+  \"cmp\\\\t%1, %2\\;sbcs\\\\t%0, %0, %0\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"multiple\")]\n )\n@@ -1548,7 +1548,7 @@\n \t\t (geu:SI (match_operand:SI 3 \"s_register_operand\" \"l\")\n \t\t\t (match_operand:SI 4 \"thumb1_cmp_operand\" \"lI\"))))]\n   \"TARGET_THUMB1\"\n-  \"cmp\\\\t%3, %4\\;adc\\\\t%0, %1, %2\"\n+  \"cmp\\\\t%3, %4\\;adcs\\\\t%0, %1, %2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"multiple\")]\n )"}, {"sha": "57666dbdb51ec78a79cc46e9b11c2ed19b9095fe", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decfc6e1135287625cfa81c3a56bfa84512c7b5a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decfc6e1135287625cfa81c3a56bfa84512c7b5a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=decfc6e1135287625cfa81c3a56bfa84512c7b5a", "patch": "@@ -546,6 +546,7 @@ Objective-C and Objective-C++ Dialects}.\n -munaligned-access @gol\n -mneon-for-64bits @gol\n -mslow-flash-data @gol\n+-masm-syntax-unified @gol\n -mrestrict-it}\n \n @emph{AVR Options}\n@@ -13026,6 +13027,16 @@ Therefore literal load is minimized for better performance.\n This option is only supported when compiling for ARMv7 M-profile and\n off by default.\n \n+@item -masm-syntax-unified\n+@opindex masm-syntax-unified\n+Assume the Thumb1 inline assembly code are using unified syntax.\n+The default is currently off, which means divided syntax is assumed.\n+However, this may change in future releases of GCC.  Divided syntax\n+should be considered deprecated.  This option has no effect when\n+generating Thumb2 code.  Thumb2 assembly code always uses unified syntax.\n+This option has no effect for ARM state assembly code which will still\n+uses divided syntax.\n+\n @item -mrestrict-it\n @opindex mrestrict-it\n Restricts generation of IT blocks to conform to the rules of ARMv8."}, {"sha": "6117ac723ef9e4937a32769a9dcfb793c09e5153", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decfc6e1135287625cfa81c3a56bfa84512c7b5a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decfc6e1135287625cfa81c3a56bfa84512c7b5a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=decfc6e1135287625cfa81c3a56bfa84512c7b5a", "patch": "@@ -1,3 +1,11 @@\n+2014-11-07  Terry Guo  <terry.guo@arm.com>\n+\n+\t* gcc.target/arm/anddi_notdi-1.c: Match with UAL format.\n+\t* gcc.target/arm/pr40956.c: Likewise.\n+\t* gcc.target/arm/thumb1-Os-mult.c: Likewise.\n+\t* gcc.target/arm/thumb1-load-64bit-constant-3.c: Likewise.\n+\t* gcc.target/arm/scd42-1.c: Likewise.\n+\n 2014-11-06  Joseph Myers  <joseph@codesourcery.com>\n \n \t* g++.dg/cpp/ucnid-2.C, g++.dg/cpp/ucnid-3.C,"}, {"sha": "d9489d3dafa00f2291510d726cf23cba4b6a61ee", "filename": "gcc/testsuite/gcc.target/arm/anddi_notdi-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decfc6e1135287625cfa81c3a56bfa84512c7b5a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fanddi_notdi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decfc6e1135287625cfa81c3a56bfa84512c7b5a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fanddi_notdi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fanddi_notdi-1.c?ref=decfc6e1135287625cfa81c3a56bfa84512c7b5a", "patch": "@@ -60,6 +60,7 @@ int main ()\n   return 0;\n }\n \n-/* { dg-final { scan-assembler-times \"bic\\t\" 6 } } */\n+/* { dg-final { scan-assembler-times \"bics\\t\" 6 { target arm_thumb1 } } } */\n+/* { dg-final { scan-assembler-times \"bic\\t\" 6 { target { ! arm_thumb1 } } } } */\n \n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "4fefa49a5878a90e3a78db7d3df1015a36d0897f", "filename": "gcc/testsuite/gcc.target/arm/pr40956.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decfc6e1135287625cfa81c3a56bfa84512c7b5a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr40956.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decfc6e1135287625cfa81c3a56bfa84512c7b5a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr40956.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr40956.c?ref=decfc6e1135287625cfa81c3a56bfa84512c7b5a", "patch": "@@ -1,7 +1,8 @@\n /* { dg-options \"-Os -fpic\" }  */\n /* { dg-require-effective-target fpic } */\n /* Make sure the constant \"0\" is loaded into register only once.  */\n-/* { dg-final { scan-assembler-times \"mov\\[\\\\t \\]*r., #0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movs\\[\\\\t \\]*r., #0\" 1 { target arm_thumb1 } } } */\n+/* { dg-final { scan-assembler-times \"mov\\[\\\\t \\]*r., #0\" 1 { target { ! arm_thumb1 } } } } */\n \n int foo(int p, int* q)\n {"}, {"sha": "f2bd6297c9726631309399dce65b3ebe6f8a4b14", "filename": "gcc/testsuite/gcc.target/arm/scd42-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decfc6e1135287625cfa81c3a56bfa84512c7b5a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fscd42-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decfc6e1135287625cfa81c3a56bfa84512c7b5a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fscd42-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fscd42-1.c?ref=decfc6e1135287625cfa81c3a56bfa84512c7b5a", "patch": "@@ -13,4 +13,4 @@ unsigned load1(void)\n     return 17;\n }\n \n-/* { dg-final { scan-assembler \"mov\\[ \t].*17\" } } */\n+/* { dg-final { scan-assembler \"movs\\[ \t].*17\" } } */"}, {"sha": "08d735c6ca07de3c4c7fd5705cfa7bf3b5ea0ec5", "filename": "gcc/testsuite/gcc.target/arm/thumb1-Os-mult.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decfc6e1135287625cfa81c3a56bfa84512c7b5a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb1-Os-mult.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decfc6e1135287625cfa81c3a56bfa84512c7b5a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb1-Os-mult.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb1-Os-mult.c?ref=decfc6e1135287625cfa81c3a56bfa84512c7b5a", "patch": "@@ -9,4 +9,4 @@ mymul3 (int x)\n   return x * 0x555;\n }\n \n-/* { dg-final { scan-assembler \"mul\\[\\\\t \\]*r.,\\[\\\\t \\]*r.\" } } */\n+/* { dg-final { scan-assembler \"muls\\[\\\\t \\]*r.,\\[\\\\t \\]*r.\" } } */"}, {"sha": "b53ed8b6edddf0203a5c10d343788fffa100c0e8", "filename": "gcc/testsuite/gcc.target/arm/thumb1-load-64bit-constant-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decfc6e1135287625cfa81c3a56bfa84512c7b5a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb1-load-64bit-constant-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decfc6e1135287625cfa81c3a56bfa84512c7b5a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb1-load-64bit-constant-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb1-load-64bit-constant-3.c?ref=decfc6e1135287625cfa81c3a56bfa84512c7b5a", "patch": "@@ -10,5 +10,5 @@ foo (int len)\n }\n \n /* { dg-final { scan-assembler-not \"ldr\" } } */\n-/* { dg-final { scan-assembler-times \"neg\" 1 } } */\n+/* { dg-final { scan-assembler-times \"rsbs\" 1 } } */\n "}]}