{"sha": "54f3822595e789a83887c609234890c23b340fa0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRmMzgyMjU5NWU3ODlhODM4ODdjNjA5MjM0ODkwYzIzYjM0MGZhMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-02-06T20:41:09Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-02-06T20:41:09Z"}, "message": "re PR libstdc++/27340 (valarray uses __cos which may conflict with libm functions)\n\n2010-02-06  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/27340\n\t* include/bits/valarray_before.h: Uglify the structs wrapping\n\tcmath functions differently, eg, _Cos instead of __cos.\n\t* include/bits/valarray_after.h: Adjust.\n\nFrom-SVN: r156555", "tree": {"sha": "7ed364936e005a17129aca800bca3fc3ca4bb278", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ed364936e005a17129aca800bca3fc3ca4bb278"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54f3822595e789a83887c609234890c23b340fa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54f3822595e789a83887c609234890c23b340fa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54f3822595e789a83887c609234890c23b340fa0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54f3822595e789a83887c609234890c23b340fa0/comments", "author": null, "committer": null, "parents": [{"sha": "9d3b08c683c727eafb2e5c4240952bad6ac470e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d3b08c683c727eafb2e5c4240952bad6ac470e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d3b08c683c727eafb2e5c4240952bad6ac470e8"}], "stats": {"total": 124, "additions": 66, "deletions": 58}, "files": [{"sha": "20dc0987c66e0c17d889ffae02fd409452127282", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f3822595e789a83887c609234890c23b340fa0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f3822595e789a83887c609234890c23b340fa0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=54f3822595e789a83887c609234890c23b340fa0", "patch": "@@ -1,3 +1,10 @@\n+2010-02-06  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/27340\n+\t* include/bits/valarray_before.h: Uglify the structs wrapping\n+\tcmath functions differently, eg, _Cos instead of __cos.\n+\t* include/bits/valarray_after.h: Adjust.\n+\n 2010-02-05  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/future (swap(packaged_task<>&, packaged_task<>&)): Fix"}, {"sha": "070840e34521b4d57e5138435a52a9879546d0ef", "filename": "libstdc++-v3/include/bits/valarray_after.h", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f3822595e789a83887c609234890c23b340fa0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_after.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f3822595e789a83887c609234890c23b340fa0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_after.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_after.h?ref=54f3822595e789a83887c609234890c23b340fa0", "patch": "@@ -1,7 +1,7 @@\n // The template and inlines for the -*- C++ -*- internal _Meta class.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2009  Free Software Foundation, Inc.\n+// 2006, 2007, 2008, 2009, 2010  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -419,128 +419,128 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n #undef _DEFINE_EXPR_BINARY_OPERATOR\n \n-#define _DEFINE_EXPR_UNARY_FUNCTION(_Name)                               \\\n+#define _DEFINE_EXPR_UNARY_FUNCTION(_Name, _UName)                       \\\n   template<class _Dom>                                                   \\\n-    inline _Expr<_UnClos<__##_Name, _Expr, _Dom>,                        \\\n+    inline _Expr<_UnClos<_UName, _Expr, _Dom>,                           \\\n                  typename _Dom::value_type>                              \\\n     _Name(const _Expr<_Dom, typename _Dom::value_type>& __e)             \\\n     {                                                                    \\\n       typedef typename _Dom::value_type _Tp;                             \\\n-      typedef _UnClos<__##_Name, _Expr, _Dom> _Closure;                  \\\n+      typedef _UnClos<_UName, _Expr, _Dom> _Closure;                     \\\n       return _Expr<_Closure, _Tp>(_Closure(__e()));                      \\\n     }                                                                    \\\n                                                                          \\\n   template<typename _Tp>                                                 \\\n-    inline _Expr<_UnClos<__##_Name, _ValArray, _Tp>, _Tp>                \\\n+    inline _Expr<_UnClos<_UName, _ValArray, _Tp>, _Tp>                   \\\n     _Name(const valarray<_Tp>& __v)                                      \\\n     {                                                                    \\\n-      typedef _UnClos<__##_Name, _ValArray, _Tp> _Closure;               \\\n+      typedef _UnClos<_UName, _ValArray, _Tp> _Closure;                  \\\n       return _Expr<_Closure, _Tp>(_Closure(__v));                        \\\n     }\n \n-    _DEFINE_EXPR_UNARY_FUNCTION(abs)\n-    _DEFINE_EXPR_UNARY_FUNCTION(cos)\n-    _DEFINE_EXPR_UNARY_FUNCTION(acos)\n-    _DEFINE_EXPR_UNARY_FUNCTION(cosh)\n-    _DEFINE_EXPR_UNARY_FUNCTION(sin)\n-    _DEFINE_EXPR_UNARY_FUNCTION(asin)\n-    _DEFINE_EXPR_UNARY_FUNCTION(sinh)\n-    _DEFINE_EXPR_UNARY_FUNCTION(tan)\n-    _DEFINE_EXPR_UNARY_FUNCTION(tanh)\n-    _DEFINE_EXPR_UNARY_FUNCTION(atan)\n-    _DEFINE_EXPR_UNARY_FUNCTION(exp)\n-    _DEFINE_EXPR_UNARY_FUNCTION(log)\n-    _DEFINE_EXPR_UNARY_FUNCTION(log10)\n-    _DEFINE_EXPR_UNARY_FUNCTION(sqrt)\n+    _DEFINE_EXPR_UNARY_FUNCTION(abs, _Abs)\n+    _DEFINE_EXPR_UNARY_FUNCTION(cos, _Cos)\n+    _DEFINE_EXPR_UNARY_FUNCTION(acos, _Acos)\n+    _DEFINE_EXPR_UNARY_FUNCTION(cosh, _Cosh)\n+    _DEFINE_EXPR_UNARY_FUNCTION(sin, _Sin)\n+    _DEFINE_EXPR_UNARY_FUNCTION(asin, _Asin)\n+    _DEFINE_EXPR_UNARY_FUNCTION(sinh, _Sinh)\n+    _DEFINE_EXPR_UNARY_FUNCTION(tan, _Tan)\n+    _DEFINE_EXPR_UNARY_FUNCTION(tanh, _Tanh)\n+    _DEFINE_EXPR_UNARY_FUNCTION(atan, _Atan)\n+    _DEFINE_EXPR_UNARY_FUNCTION(exp, _Exp)\n+    _DEFINE_EXPR_UNARY_FUNCTION(log, _Log)\n+    _DEFINE_EXPR_UNARY_FUNCTION(log10, _Log10)\n+    _DEFINE_EXPR_UNARY_FUNCTION(sqrt, _Sqrt)\n \n #undef _DEFINE_EXPR_UNARY_FUNCTION\n \n-#define _DEFINE_EXPR_BINARY_FUNCTION(_Fun)                             \\\n+#define _DEFINE_EXPR_BINARY_FUNCTION(_Fun, _UFun)\t\t       \\\n   template<class _Dom1, class _Dom2>                                   \\\n-    inline _Expr<_BinClos<__##_Fun, _Expr, _Expr, _Dom1, _Dom2>,       \\\n+    inline _Expr<_BinClos<_UFun, _Expr, _Expr, _Dom1, _Dom2>,          \\\n \t\t typename _Dom1::value_type>                           \\\n     _Fun(const _Expr<_Dom1, typename _Dom1::value_type>& __e1,         \\\n-\t  const _Expr<_Dom2, typename _Dom2::value_type>& __e2)        \\\n+\t const _Expr<_Dom2, typename _Dom2::value_type>& __e2)\t       \\\n     {                                                                  \\\n       typedef typename _Dom1::value_type _Tp;                          \\\n-      typedef _BinClos<__##_Fun, _Expr, _Expr, _Dom1, _Dom2> _Closure; \\\n+      typedef _BinClos<_UFun, _Expr, _Expr, _Dom1, _Dom2> _Closure;    \\\n       return _Expr<_Closure, _Tp>(_Closure(__e1(), __e2()));           \\\n     }                                                                  \\\n                                                                        \\\n   template<class _Dom>                                                 \\\n-    inline _Expr<_BinClos<__##_Fun, _Expr, _ValArray, _Dom,            \\\n+    inline _Expr<_BinClos<_UFun, _Expr, _ValArray, _Dom,               \\\n \t\t\t  typename _Dom::value_type>,                  \\\n \t\t typename _Dom::value_type>                            \\\n     _Fun(const _Expr<_Dom, typename _Dom::value_type>& __e,            \\\n \t const valarray<typename _Dom::value_type>& __v)               \\\n     {                                                                  \\\n       typedef typename _Dom::value_type _Tp;                           \\\n-      typedef _BinClos<__##_Fun, _Expr, _ValArray, _Dom, _Tp> _Closure; \\\n+      typedef _BinClos<_UFun, _Expr, _ValArray, _Dom, _Tp> _Closure;   \\\n       return _Expr<_Closure, _Tp>(_Closure(__e(), __v));               \\\n     }                                                                  \\\n                                                                        \\\n   template<class _Dom>                                                 \\\n-    inline _Expr<_BinClos<__##_Fun, _ValArray, _Expr,                  \\\n+    inline _Expr<_BinClos<_UFun, _ValArray, _Expr,                     \\\n \t\t\t  typename _Dom::value_type, _Dom>,            \\\n \t\t typename _Dom::value_type>                            \\\n     _Fun(const valarray<typename _Dom::valarray>& __v,                 \\\n \t const _Expr<_Dom, typename _Dom::value_type>& __e)            \\\n     {                                                                  \\\n       typedef typename _Dom::value_type _Tp;                           \\\n-      typedef _BinClos<__##_Fun, _ValArray, _Expr, _Tp, _Dom> _Closure; \\\n+      typedef _BinClos<_UFun, _ValArray, _Expr, _Tp, _Dom> _Closure;   \\\n       return _Expr<_Closure, _Tp>(_Closure(__v, __e()));               \\\n     }                                                                  \\\n                                                                        \\\n   template<class _Dom>                                                 \\\n-    inline _Expr<_BinClos<__##_Fun, _Expr, _Constant, _Dom,            \\\n+    inline _Expr<_BinClos<_UFun, _Expr, _Constant, _Dom,               \\\n \t\t\t  typename _Dom::value_type>,                  \\\n \t\t typename _Dom::value_type>                            \\\n     _Fun(const _Expr<_Dom, typename _Dom::value_type>& __e,            \\\n \t const typename _Dom::value_type& __t)                         \\\n     {                                                                  \\\n       typedef typename _Dom::value_type _Tp;                           \\\n-      typedef _BinClos<__##_Fun, _Expr, _Constant, _Dom, _Tp> _Closure;\\\n+      typedef _BinClos<_UFun, _Expr, _Constant, _Dom, _Tp> _Closure;   \\\n       return _Expr<_Closure, _Tp>(_Closure(__e(), __t));               \\\n     }                                                                  \\\n                                                                        \\\n   template<class _Dom>                                                 \\\n-    inline _Expr<_BinClos<__##_Fun, _Constant, _Expr,                  \\\n+    inline _Expr<_BinClos<_UFun, _Constant, _Expr,                     \\\n \t\t\t  typename _Dom::value_type, _Dom>,            \\\n \t\t typename _Dom::value_type>                            \\\n     _Fun(const typename _Dom::value_type& __t,                         \\\n \t const _Expr<_Dom, typename _Dom::value_type>& __e)            \\\n     {                                                                  \\\n       typedef typename _Dom::value_type _Tp;                           \\\n-      typedef _BinClos<__##_Fun, _Constant, _Expr, _Tp, _Dom> _Closure; \\\n+      typedef _BinClos<_UFun, _Constant, _Expr, _Tp, _Dom> _Closure;   \\\n       return _Expr<_Closure, _Tp>(_Closure(__t, __e()));               \\\n     }                                                                  \\\n                                                                        \\\n   template<typename _Tp>                                               \\\n-    inline _Expr<_BinClos<__##_Fun, _ValArray, _ValArray, _Tp, _Tp>, _Tp> \\\n+    inline _Expr<_BinClos<_UFun, _ValArray, _ValArray, _Tp, _Tp>, _Tp> \\\n     _Fun(const valarray<_Tp>& __v, const valarray<_Tp>& __w)           \\\n     {                                                                  \\\n-      typedef _BinClos<__##_Fun, _ValArray, _ValArray, _Tp, _Tp> _Closure; \\\n+      typedef _BinClos<_UFun, _ValArray, _ValArray, _Tp, _Tp> _Closure;\\\n       return _Expr<_Closure, _Tp>(_Closure(__v, __w));                 \\\n     }                                                                  \\\n                                                                        \\\n   template<typename _Tp>                                               \\\n-    inline _Expr<_BinClos<__##_Fun, _ValArray, _Constant, _Tp, _Tp>, _Tp> \\\n+    inline _Expr<_BinClos<_UFun, _ValArray, _Constant, _Tp, _Tp>, _Tp> \\\n     _Fun(const valarray<_Tp>& __v, const _Tp& __t)                     \\\n     {                                                                  \\\n-      typedef _BinClos<__##_Fun, _ValArray, _Constant, _Tp, _Tp> _Closure; \\\n+      typedef _BinClos<_UFun, _ValArray, _Constant, _Tp, _Tp> _Closure;\\\n       return _Expr<_Closure, _Tp>(_Closure(__v, __t));                 \\\n     }                                                                  \\\n \t\t\t\t\t\t\t\t       \\\n   template<typename _Tp>                                               \\\n-    inline _Expr<_BinClos<__##_Fun, _Constant, _ValArray, _Tp, _Tp>, _Tp> \\\n+    inline _Expr<_BinClos<_UFun, _Constant, _ValArray, _Tp, _Tp>, _Tp> \\\n     _Fun(const _Tp& __t, const valarray<_Tp>& __v)                     \\\n     {                                                                  \\\n-      typedef _BinClos<__##_Fun, _Constant, _ValArray, _Tp, _Tp> _Closure; \\\n+      typedef _BinClos<_UFun, _Constant, _ValArray, _Tp, _Tp> _Closure;\\\n       return _Expr<_Closure, _Tp>(_Closure(__t, __v));                 \\\n     }\n \n-_DEFINE_EXPR_BINARY_FUNCTION(atan2)\n-_DEFINE_EXPR_BINARY_FUNCTION(pow)\n+_DEFINE_EXPR_BINARY_FUNCTION(atan2, _Atan2)\n+_DEFINE_EXPR_BINARY_FUNCTION(pow, _Pow)\n \n #undef _DEFINE_EXPR_BINARY_FUNCTION\n "}, {"sha": "3bc85a3e07e3a057336a777d412cceb37b91a52a", "filename": "libstdc++-v3/include/bits/valarray_before.h", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f3822595e789a83887c609234890c23b340fa0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_before.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f3822595e789a83887c609234890c23b340fa0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_before.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_before.h?ref=54f3822595e789a83887c609234890c23b340fa0", "patch": "@@ -1,7 +1,7 @@\n // The template and inlines for the -*- C++ -*- internal _Meta class.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2009  Free Software Foundation, Inc.\n+// 2006, 2007, 2008, 2009, 2010  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -59,98 +59,98 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   //    2) efficiency -- object functions can be easily inlined\n   //    3) be Koenig-lookup-friendly\n \n-  struct __abs\n+  struct _Abs\n   {\n     template<typename _Tp>\n       _Tp operator()(const _Tp& __t) const\n       { return abs(__t); }\n   };\n \n-  struct __cos\n+  struct _Cos\n   {\n     template<typename _Tp>\n       _Tp operator()(const _Tp& __t) const\n       { return cos(__t); }\n   };\n \n-  struct __acos\n+  struct _Acos\n   {\n     template<typename _Tp>\n       _Tp operator()(const _Tp& __t) const\n       { return acos(__t); }\n   };\n \n-  struct __cosh\n+  struct _Cosh\n   {\n     template<typename _Tp>\n       _Tp operator()(const _Tp& __t) const\n       { return cosh(__t); }\n   };\n \n-  struct __sin\n+  struct _Sin\n   {\n     template<typename _Tp>\n       _Tp operator()(const _Tp& __t) const\n       { return sin(__t); }\n   };\n \n-  struct __asin\n+  struct _Asin\n   {\n     template<typename _Tp>\n       _Tp operator()(const _Tp& __t) const\n       { return asin(__t); }\n   };\n \n-  struct __sinh\n+  struct _Sinh\n   {\n     template<typename _Tp>\n       _Tp operator()(const _Tp& __t) const\n       { return sinh(__t); }\n   };\n \n-  struct __tan\n+  struct _Tan\n   {\n     template<typename _Tp>\n       _Tp operator()(const _Tp& __t) const\n       { return tan(__t); }\n   };\n \n-  struct __atan\n+  struct _Atan\n   {\n     template<typename _Tp>\n       _Tp operator()(const _Tp& __t) const\n       { return atan(__t); }\n   };\n \n-  struct __tanh\n+  struct _Tanh\n   {\n     template<typename _Tp>\n       _Tp operator()(const _Tp& __t) const\n       { return tanh(__t); }\n   };\n \n-  struct __exp\n+  struct _Exp\n   {\n     template<typename _Tp>\n       _Tp operator()(const _Tp& __t) const\n       { return exp(__t); }\n   };\n \n-  struct __log\n+  struct _Log\n   {\n     template<typename _Tp>\n       _Tp operator()(const _Tp& __t) const\n       { return log(__t); }\n   };\n \n-  struct __log10\n+  struct _Log10\n   {\n     template<typename _Tp>\n       _Tp operator()(const _Tp& __t) const\n       { return log10(__t); }\n   };\n \n-  struct __sqrt\n+  struct _Sqrt\n   {\n     template<typename _Tp>\n       _Tp operator()(const _Tp& __t) const\n@@ -269,7 +269,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   struct __logical_not\n   {\n     template<typename _Tp>\n-      bool operator()(const _Tp& __x) const { return !__x; }\n+      bool operator()(const _Tp& __x) const\n+      { return !__x; }\n   };\n \n   struct __equal_to\n@@ -315,14 +316,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   };\n \n   // The few binary functions we miss.\n-  struct __atan2\n+  struct _Atan2\n   {\n     template<typename _Tp>\n       _Tp operator()(const _Tp& __x, const _Tp& __y) const\n       { return atan2(__x, __y); }\n   };\n \n-  struct __pow\n+  struct _Pow\n   {\n     template<typename _Tp>\n       _Tp operator()(const _Tp& __x, const _Tp& __y) const"}]}