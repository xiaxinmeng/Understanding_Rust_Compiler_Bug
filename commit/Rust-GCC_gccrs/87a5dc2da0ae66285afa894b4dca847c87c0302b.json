{"sha": "87a5dc2da0ae66285afa894b4dca847c87c0302b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdhNWRjMmRhMGFlNjYyODVhZmE4OTRiNGRjYTg0N2M4N2MwMzAyYg==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-11-29T11:47:48Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-11-29T11:47:48Z"}, "message": "[Patch] New hook TARGET_STACK_PROTECT_RUNTIME_ENABLED_P to disable SSP runtime\n\ngcc/\n\t* target.def (stack_protect_runtime_enabled_p): New.\n\t* function.c (expand_function_end): Guard stack_protect_epilogue with\n\ttargetm.stack_protect_runtime_enabled_p.\n\t* cfgexpand.c (pass_expand::execute): Likewise.\n\t* calls.c (expand_call): Likewise.\n\t* doc/tm.texi.in (TARGET_STACK_PROTECT_RUNTIME_ENABLED_P): Add it.\n\t* doc/tm.texi: Regenerate.\n\nFrom-SVN: r242955", "tree": {"sha": "58ea11f59eb7d734feba66f5e7ad492c76b250ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58ea11f59eb7d734feba66f5e7ad492c76b250ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87a5dc2da0ae66285afa894b4dca847c87c0302b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87a5dc2da0ae66285afa894b4dca847c87c0302b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87a5dc2da0ae66285afa894b4dca847c87c0302b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87a5dc2da0ae66285afa894b4dca847c87c0302b/comments", "author": null, "committer": null, "parents": [{"sha": "11edabc2dfb9274445d697eff2bafde3abdefa1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11edabc2dfb9274445d697eff2bafde3abdefa1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11edabc2dfb9274445d697eff2bafde3abdefa1f"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "b7ccbd88550183b46a89f23af1ac4ac9f047c429", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a5dc2da0ae66285afa894b4dca847c87c0302b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a5dc2da0ae66285afa894b4dca847c87c0302b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87a5dc2da0ae66285afa894b4dca847c87c0302b", "patch": "@@ -1,3 +1,13 @@\n+2016-11-29  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* target.def (stack_protect_runtime_enabled_p): New.\n+\t* function.c (expand_function_end): Guard stack_protect_epilogue with\n+\ttargetm.stack_protect_runtime_enabled_p.\n+\t* cfgexpand.c (pass_expand::execute): Likewise.\n+\t* calls.c (expand_call): Likewise.\n+\t* doc/tm.texi.in (TARGET_STACK_PROTECT_RUNTIME_ENABLED_P): Add it.\n+\t* doc/tm.texi: Regenerate.\n+\n 2016-11-29  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/78546"}, {"sha": "21385ce0e12ccc28723cc36c318026e3792eb767", "filename": "gcc/calls.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a5dc2da0ae66285afa894b4dca847c87c0302b/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a5dc2da0ae66285afa894b4dca847c87c0302b/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=87a5dc2da0ae66285afa894b4dca847c87c0302b", "patch": "@@ -3083,7 +3083,9 @@ expand_call (tree exp, rtx target, int ignore)\n       if (pass && (flags & ECF_MALLOC))\n \tstart_sequence ();\n \n-      if (pass == 0 && crtl->stack_protect_guard)\n+      if (pass == 0\n+\t  && crtl->stack_protect_guard\n+\t  && targetm.stack_protect_runtime_enabled_p ())\n \tstack_protect_epilogue ();\n \n       adjusted_args_size = args_size;"}, {"sha": "c3aca593e53c54b8468bb4ca9a39f9ea28d9ecac", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a5dc2da0ae66285afa894b4dca847c87c0302b/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a5dc2da0ae66285afa894b4dca847c87c0302b/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=87a5dc2da0ae66285afa894b4dca847c87c0302b", "patch": "@@ -6334,7 +6334,7 @@ pass_expand::execute (function *fun)\n \n   /* Initialize the stack_protect_guard field.  This must happen after the\n      call to __main (if any) so that the external decl is initialized.  */\n-  if (crtl->stack_protect_guard)\n+  if (crtl->stack_protect_guard && targetm.stack_protect_runtime_enabled_p ())\n     stack_protect_prologue ();\n \n   expand_phi_nodes (&SA);"}, {"sha": "7559c12210723875d44cc6904fae032f844ff62b", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a5dc2da0ae66285afa894b4dca847c87c0302b/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a5dc2da0ae66285afa894b4dca847c87c0302b/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=87a5dc2da0ae66285afa894b4dca847c87c0302b", "patch": "@@ -4946,6 +4946,10 @@ The default version of this hook invokes a function called\n normally defined in @file{libgcc2.c}.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_STACK_PROTECT_RUNTIME_ENABLED_P (void)\n+Returns true if the target wants GCC's default stack protect runtime support, otherwise return false.  The default implementation always returns true.\n+@end deftypefn\n+\n @deftypefn {Common Target Hook} bool TARGET_SUPPORTS_SPLIT_STACK (bool @var{report}, struct gcc_options *@var{opts})\n Whether this target supports splitting the stack when the options described in @var{opts} have been passed.  This is called after options have been parsed, so the target may reject splitting the stack in some configurations.  The default version of this hook returns false.  If @var{report} is true, this function may issue a warning or error; if @var{report} is false, it must simply return a value\n @end deftypefn"}, {"sha": "bc6d3cbce029cbc63aa71d4331483aff9c0f7bec", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a5dc2da0ae66285afa894b4dca847c87c0302b/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a5dc2da0ae66285afa894b4dca847c87c0302b/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=87a5dc2da0ae66285afa894b4dca847c87c0302b", "patch": "@@ -3820,6 +3820,8 @@ generic code.\n \n @hook TARGET_STACK_PROTECT_FAIL\n \n+@hook TARGET_STACK_PROTECT_RUNTIME_ENABLED_P\n+\n @hook TARGET_SUPPORTS_SPLIT_STACK\n \n @node Miscellaneous Register Hooks"}, {"sha": "0829fbe0d01315311917698b847ef27121e783be", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a5dc2da0ae66285afa894b4dca847c87c0302b/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a5dc2da0ae66285afa894b4dca847c87c0302b/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=87a5dc2da0ae66285afa894b4dca847c87c0302b", "patch": "@@ -5635,7 +5635,7 @@ expand_function_end (void)\n     emit_insn (gen_blockage ());\n \n   /* If stack protection is enabled for this function, check the guard.  */\n-  if (crtl->stack_protect_guard)\n+  if (crtl->stack_protect_guard && targetm.stack_protect_runtime_enabled_p ())\n     stack_protect_epilogue ();\n \n   /* If we had calls to alloca, and this machine needs"}, {"sha": "417cd0256c5c036937a2a713e4a85dc703f60c7d", "filename": "gcc/target.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87a5dc2da0ae66285afa894b4dca847c87c0302b/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87a5dc2da0ae66285afa894b4dca847c87c0302b/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=87a5dc2da0ae66285afa894b4dca847c87c0302b", "patch": "@@ -4039,6 +4039,15 @@ normally defined in @file{libgcc2.c}.\",\n  tree, (void),\n  default_external_stack_protect_fail)\n \n+/* This target hook allows the operating system to disable the default stack\n+   protector runtime support.  */\n+DEFHOOK\n+(stack_protect_runtime_enabled_p,\n+ \"Returns true if the target wants GCC's default stack protect runtime support,\\\n+ otherwise return false.  The default implementation always returns true.\",\n+ bool, (void),\n+ hook_bool_void_true)\n+\n DEFHOOK\n (can_use_doloop_p,\n  \"Return true if it is possible to use low-overhead loops (@code{doloop_end}\\n\\"}]}