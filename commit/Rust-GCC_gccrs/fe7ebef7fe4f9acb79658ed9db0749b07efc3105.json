{"sha": "fe7ebef7fe4f9acb79658ed9db0749b07efc3105", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU3ZWJlZjdmZTRmOWFjYjc5NjU4ZWQ5ZGIwNzQ5YjA3ZWZjMzEwNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-05-27T22:31:15Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-05-27T22:33:04Z"}, "message": "Add support for __builtin_bswap128\n\nThis patch introduces a new builtin named __builtin_bswap128 on targets\nwhere TImode is supported, i.e. 64-bit targets only in practice.  The\nimplementation simply reuses the existing double word path in optab, so\nno routine is added to libgcc (which means that you get two calls to\n_bswapdi2 in the worst case).\n\ngcc/ChangeLog:\n\n\t* builtin-types.def (BT_UINT128): New primitive type.\n\t(BT_FN_UINT128_UINT128): New function type.\n\t* builtins.def (BUILT_IN_BSWAP128): New GCC builtin.\n\t* doc/extend.texi (__builtin_bswap128): Document it.\n\t* builtins.c (expand_builtin): Deal with BUILT_IN_BSWAP128.\n\t(is_inexpensive_builtin): Likewise.\n\t* fold-const-call.c (fold_const_call_ss): Likewise.\n\t* fold-const.c (tree_call_nonnegative_warnv_p): Likewise.\n\t* tree-ssa-ccp.c (evaluate_stmt): Likewise.\n\t* tree-vect-stmts.c (vect_get_data_ptr_increment): Likewise.\n\t(vectorizable_call): Likewise.\n\t* optabs.c (expand_unop): Always use the double word path for it.\n\t* tree-core.h (enum tree_index): Add TI_UINT128_TYPE.\n\t* tree.h (uint128_type_node): New global type.\n\t* tree.c (build_common_tree_nodes): Build it if TImode is supported.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/builtin-bswap-10.c: New test.\n\t* gcc.dg/builtin-bswap-11.c: Likewise.\n\t* gcc.dg/builtin-bswap-12.c: Likewise.\n\t* gcc.target/i386/builtin-bswap-5.c: Likewise.", "tree": {"sha": "073db78f4f756d2542b1bd961c0eb9030a016d22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/073db78f4f756d2542b1bd961c0eb9030a016d22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe7ebef7fe4f9acb79658ed9db0749b07efc3105", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe7ebef7fe4f9acb79658ed9db0749b07efc3105", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe7ebef7fe4f9acb79658ed9db0749b07efc3105", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/comments", "author": null, "committer": null, "parents": [{"sha": "bbaec68c86f8e89a3460cc022c75d4c4179bfb0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbaec68c86f8e89a3460cc022c75d4c4179bfb0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbaec68c86f8e89a3460cc022c75d4c4179bfb0a"}], "stats": {"total": 130, "additions": 125, "deletions": 5}, "files": [{"sha": "c46b1bc5cbd1fba03b033b8d44ba186570780c3f", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=fe7ebef7fe4f9acb79658ed9db0749b07efc3105", "patch": "@@ -73,6 +73,9 @@ DEF_PRIMITIVE_TYPE (BT_UINT8, unsigned_char_type_node)\n DEF_PRIMITIVE_TYPE (BT_UINT16, uint16_type_node)\n DEF_PRIMITIVE_TYPE (BT_UINT32, uint32_type_node)\n DEF_PRIMITIVE_TYPE (BT_UINT64, uint64_type_node)\n+DEF_PRIMITIVE_TYPE (BT_UINT128, uint128_type_node\n+\t\t\t\t? uint128_type_node\n+\t\t\t\t: error_mark_node)\n DEF_PRIMITIVE_TYPE (BT_WORD, (*lang_hooks.types.type_for_mode) (word_mode, 1))\n DEF_PRIMITIVE_TYPE (BT_UNWINDWORD, (*lang_hooks.types.type_for_mode)\n \t\t\t\t    (targetm.unwind_word_mode (), 1))\n@@ -300,6 +303,7 @@ DEF_FUNCTION_TYPE_1 (BT_FN_UINT8_FLOAT, BT_UINT8, BT_FLOAT)\n DEF_FUNCTION_TYPE_1 (BT_FN_UINT16_UINT16, BT_UINT16, BT_UINT16)\n DEF_FUNCTION_TYPE_1 (BT_FN_UINT32_UINT32, BT_UINT32, BT_UINT32)\n DEF_FUNCTION_TYPE_1 (BT_FN_UINT64_UINT64, BT_UINT64, BT_UINT64)\n+DEF_FUNCTION_TYPE_1 (BT_FN_UINT128_UINT128, BT_UINT128, BT_UINT128)\n DEF_FUNCTION_TYPE_1 (BT_FN_UINT64_FLOAT, BT_UINT64, BT_FLOAT)\n DEF_FUNCTION_TYPE_1 (BT_FN_BOOL_INT, BT_BOOL, BT_INT)\n DEF_FUNCTION_TYPE_1 (BT_FN_BOOL_PTR, BT_BOOL, BT_PTR)"}, {"sha": "f7bb87e4690f2f5a76d68c6fa907f958d877c458", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=fe7ebef7fe4f9acb79658ed9db0749b07efc3105", "patch": "@@ -7988,6 +7988,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n     case BUILT_IN_BSWAP16:\n     case BUILT_IN_BSWAP32:\n     case BUILT_IN_BSWAP64:\n+    case BUILT_IN_BSWAP128:\n       target = expand_builtin_bswap (target_mode, exp, target, subtarget);\n       if (target)\n \treturn target;\n@@ -11704,6 +11705,7 @@ is_inexpensive_builtin (tree decl)\n       case BUILT_IN_BSWAP16:\n       case BUILT_IN_BSWAP32:\n       case BUILT_IN_BSWAP64:\n+      case BUILT_IN_BSWAP128:\n       case BUILT_IN_CLZ:\n       case BUILT_IN_CLZIMAX:\n       case BUILT_IN_CLZL:"}, {"sha": "ee67ac15d5cf98797144b9d08a75f4cf7ee5ad33", "filename": "gcc/builtins.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=fe7ebef7fe4f9acb79658ed9db0749b07efc3105", "patch": "@@ -834,6 +834,8 @@ DEF_GCC_BUILTIN        (BUILT_IN_APPLY_ARGS, \"apply_args\", BT_FN_PTR_VAR, ATTR_L\n DEF_GCC_BUILTIN        (BUILT_IN_BSWAP16, \"bswap16\", BT_FN_UINT16_UINT16, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_BSWAP32, \"bswap32\", BT_FN_UINT32_UINT32, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_BSWAP64, \"bswap64\", BT_FN_UINT64_UINT64, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_BSWAP128, \"bswap128\", BT_FN_UINT128_UINT128, ATTR_CONST_NOTHROW_LEAF_LIST)\n+\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_CLEAR_CACHE, \"__clear_cache\", BT_FN_VOID_PTR_PTR, ATTR_NOTHROW_LEAF_LIST)\n /* [trans-mem]: Adjust BUILT_IN_TM_CALLOC if BUILT_IN_CALLOC is changed.  */\n DEF_LIB_BUILTIN        (BUILT_IN_CALLOC, \"calloc\", BT_FN_PTR_SIZE_SIZE, ATTR_MALLOC_WARN_UNUSED_RESULT_SIZE_1_2_NOTHROW_LEAF_LIST)"}, {"sha": "cced19d20181a1ca8d3ab88b4cba55762f3ee13f", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=fe7ebef7fe4f9acb79658ed9db0749b07efc3105", "patch": "@@ -13784,14 +13784,20 @@ exactly 8 bits.\n \n @deftypefn {Built-in Function} uint32_t __builtin_bswap32 (uint32_t x)\n Similar to @code{__builtin_bswap16}, except the argument and return types\n-are 32 bit.\n+are 32-bit.\n @end deftypefn\n \n @deftypefn {Built-in Function} uint64_t __builtin_bswap64 (uint64_t x)\n Similar to @code{__builtin_bswap32}, except the argument and return types\n-are 64 bit.\n+are 64-bit.\n @end deftypefn\n \n+@deftypefn {Built-in Function} uint128_t __builtin_bswap128 (uint128_t x)\n+Similar to @code{__builtin_bswap64}, except the argument and return types\n+are 128-bit.  Only supported on targets when 128-bit types are supported.\n+@end deftypefn\n+\n+\n @deftypefn {Built-in Function} Pmode __builtin_extend_pointer (void * x)\n On targets where the user visible pointer size is smaller than the size\n of an actual hardware address this function returns the extended user"}, {"sha": "c9e368db9d01b77a141c29056ed095a329cce7ac", "filename": "gcc/fold-const-call.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Ffold-const-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Ffold-const-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const-call.c?ref=fe7ebef7fe4f9acb79658ed9db0749b07efc3105", "patch": "@@ -1033,6 +1033,7 @@ fold_const_call_ss (wide_int *result, combined_fn fn, const wide_int_ref &arg,\n     case CFN_BUILT_IN_BSWAP16:\n     case CFN_BUILT_IN_BSWAP32:\n     case CFN_BUILT_IN_BSWAP64:\n+    case CFN_BUILT_IN_BSWAP128:\n       *result = wide_int::from (arg, precision, TYPE_SIGN (arg_type)).bswap ();\n       return true;\n "}, {"sha": "212d0ba0aab527dfd9338db2277013372eef47dd", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=fe7ebef7fe4f9acb79658ed9db0749b07efc3105", "patch": "@@ -13794,8 +13794,10 @@ tree_call_nonnegative_warnv_p (tree type, combined_fn fn, tree arg0, tree arg1,\n     CASE_CFN_POPCOUNT:\n     CASE_CFN_CLZ:\n     CASE_CFN_CLRSB:\n+    case CFN_BUILT_IN_BSWAP16:\n     case CFN_BUILT_IN_BSWAP32:\n     case CFN_BUILT_IN_BSWAP64:\n+    case CFN_BUILT_IN_BSWAP128:\n       /* Always true.  */\n       return true;\n "}, {"sha": "7a4ec1ec01c6b0ab09ce7390a025ddf6e759f1a9", "filename": "gcc/optabs.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=fe7ebef7fe4f9acb79658ed9db0749b07efc3105", "patch": "@@ -2889,8 +2889,11 @@ expand_unop (machine_mode mode, optab unoptab, rtx op0, rtx target,\n \t  if (temp)\n \t    return temp;\n \n+\t  /* We do not provide a 128-bit bswap in libgcc so force the use of\n+\t     a double bswap for 64-bit targets.  */\n \t  if (GET_MODE_SIZE (int_mode) == 2 * UNITS_PER_WORD\n-\t      && optab_handler (unoptab, word_mode) != CODE_FOR_nothing)\n+\t      && (UNITS_PER_WORD == 64\n+\t\t  || optab_handler (unoptab, word_mode) != CODE_FOR_nothing))\n \t    {\n \t      temp = expand_doubleword_bswap (mode, op0, target);\n \t      if (temp)"}, {"sha": "6c8a39f17d0678d4c4cdd7f874e83aa827fe35c5", "filename": "gcc/testsuite/gcc.dg/builtin-bswap-10.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-10.c?ref=fe7ebef7fe4f9acb79658ed9db0749b07efc3105", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target { ilp32 } } } */\n+/* { dg-options \"\" } */\n+/* { dg-final { scan-assembler \"__builtin_\" } } */\n+\n+int foo (int x)\n+{\n+  return __builtin_bswap128 (x); /* { dg-warning \"implicit declaration\" } */\n+}"}, {"sha": "3fedcf1bd3cebc889f96f293159509f475c497e4", "filename": "gcc/testsuite/gcc.dg/builtin-bswap-11.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-11.c?ref=fe7ebef7fe4f9acb79658ed9db0749b07efc3105", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target int128 } */\n+/* { dg-require-effective-target stdint_types } */\n+/* { dg-options \"-Wall\" } */\n+\n+#include <stdint.h>\n+\n+#define MAKE_FUN(suffix, type)\t\t\t\t\t\t\\\n+  type my_bswap##suffix(type x) {\t\t\t\t\t\\\n+    type result = 0;\t\t\t\t\t\t\t\\\n+    int shift;\t\t\t\t\t\t\t\t\\\n+    for (shift = 0; shift < 8 * sizeof (type); shift += 8)\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tresult <<= 8;\t\t\t\t\t\t\t\\\n+\tresult |= (x >> shift) & 0xff;\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    return result;\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\n+MAKE_FUN(128, __uint128_t);\n+\n+extern void abort (void);\n+\n+typedef union\n+{\n+  struct { uint64_t lo; uint64_t hi; } s;\n+  __uint128_t n;\n+} u;\n+\n+#define NUMS128\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    { .s = { 0x0000000000000000ULL, 0x1122334455667788ULL } }, \t\\\n+    { .s = { 0x1122334455667788ULL, 0xffffffffffffffffULL } },\t\\\n+    { .s = { 0xffffffffffffffffULL, 0x0000000000000000ULL } }\t\\\n+  }\n+\n+u uint128_ts[] = NUMS128;\n+\n+#define N(table) (sizeof (table) / sizeof (table[0]))\n+\n+int\n+main (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < N(uint128_ts); i++)\n+    if (__builtin_bswap128 (uint128_ts[i].n) != my_bswap128 (uint128_ts[i].n))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "8ff65d853000e33dcaad2086263cb93783d01730", "filename": "gcc/testsuite/gcc.dg/builtin-bswap-12.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-12.c?ref=fe7ebef7fe4f9acb79658ed9db0749b07efc3105", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target int128 } */\n+/* { dg-require-effective-target stdint_types } */\n+/* { dg-options \"-O\" } */\n+\n+#include <stdint.h>\n+\n+typedef union\n+{\n+  struct { uint64_t lo; uint64_t hi; } s;\n+  __uint128_t n;\n+} u;\n+\n+int\n+main (void)\n+{\n+  /* Test constant folding.  */\n+  extern void link_error (void);\n+\n+  const u U1 = { .s = { 0x1122334455667788ULL, 0xffffffffffffffffULL } };\n+  const u U2 = { .s = { 0xffffffffffffffffULL, 0x8877665544332211ULL } };\n+\n+  if (__builtin_bswap128 (U1.n) != U2.n)\n+    link_error ();\n+\n+  return 0;\n+}"}, {"sha": "a73a870dad283c505381853c957d7733715728b3", "filename": "gcc/testsuite/gcc.target/i386/builtin-bswap-5.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin-bswap-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin-bswap-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin-bswap-5.c?ref=fe7ebef7fe4f9acb79658ed9db0749b07efc3105", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target int128 } */\n+/* { dg-final { scan-assembler-not \"call\" } } */\n+\n+__uint128_t foo (__uint128_t x)\n+{\n+  return __builtin_bswap128 (x);\n+}"}, {"sha": "8c5a2e3c4041248d2928c613cf7062b259abf2a4", "filename": "gcc/tree-core.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=fe7ebef7fe4f9acb79658ed9db0749b07efc3105", "patch": "@@ -600,6 +600,7 @@ enum tree_index {\n   TI_UINT16_TYPE,\n   TI_UINT32_TYPE,\n   TI_UINT64_TYPE,\n+  TI_UINT128_TYPE,\n \n   TI_VOID,\n "}, {"sha": "e9d2f4bc27ae3dad90b5951eb5dc8db9003260ab", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=fe7ebef7fe4f9acb79658ed9db0749b07efc3105", "patch": "@@ -2002,6 +2002,7 @@ evaluate_stmt (gimple *stmt)\n \t    case BUILT_IN_BSWAP16:\n \t    case BUILT_IN_BSWAP32:\n \t    case BUILT_IN_BSWAP64:\n+\t    case BUILT_IN_BSWAP128:\n \t      val = get_value_for_expr (gimple_call_arg (stmt, 0), true);\n \t      if (val.lattice_val == UNDEFINED)\n \t\tbreak;"}, {"sha": "2f92bb5555e6590002e2d688bc7276a99a96a624", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=fe7ebef7fe4f9acb79658ed9db0749b07efc3105", "patch": "@@ -3003,7 +3003,7 @@ vect_get_data_ptr_increment (vec_info *vinfo,\n   return iv_step;\n }\n \n-/* Check and perform vectorization of BUILT_IN_BSWAP{16,32,64}.  */\n+/* Check and perform vectorization of BUILT_IN_BSWAP{16,32,64,128}.  */\n \n static bool\n vectorizable_bswap (vec_info *vinfo,\n@@ -3385,7 +3385,8 @@ vectorizable_call (vec_info *vinfo,\n       else if (modifier == NONE\n \t       && (gimple_call_builtin_p (stmt, BUILT_IN_BSWAP16)\n \t\t   || gimple_call_builtin_p (stmt, BUILT_IN_BSWAP32)\n-\t\t   || gimple_call_builtin_p (stmt, BUILT_IN_BSWAP64)))\n+\t\t   || gimple_call_builtin_p (stmt, BUILT_IN_BSWAP64)\n+\t\t   || gimple_call_builtin_p (stmt, BUILT_IN_BSWAP128)))\n \treturn vectorizable_bswap (vinfo, stmt_info, gsi, vec_stmt, slp_node,\n \t\t\t\t   slp_op, vectype_in, cost_vec);\n       else"}, {"sha": "2cc9e4f66e37817b2b8f5711dd92fb49502639dd", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=fe7ebef7fe4f9acb79658ed9db0749b07efc3105", "patch": "@@ -10350,6 +10350,8 @@ build_common_tree_nodes (bool signed_char)\n   uint16_type_node = make_or_reuse_type (16, 1);\n   uint32_type_node = make_or_reuse_type (32, 1);\n   uint64_type_node = make_or_reuse_type (64, 1);\n+  if (targetm.scalar_mode_supported_p (TImode))\n+    uint128_type_node = make_or_reuse_type (128, 1);\n \n   /* Decimal float types. */\n   if (targetm.decimal_float_supported_p ())"}, {"sha": "21a96b2b920b27eb25d1717ac174630947bf1beb", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7ebef7fe4f9acb79658ed9db0749b07efc3105/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=fe7ebef7fe4f9acb79658ed9db0749b07efc3105", "patch": "@@ -4037,6 +4037,7 @@ tree_strip_any_location_wrapper (tree exp)\n #define uint16_type_node\t\tglobal_trees[TI_UINT16_TYPE]\n #define uint32_type_node\t\tglobal_trees[TI_UINT32_TYPE]\n #define uint64_type_node\t\tglobal_trees[TI_UINT64_TYPE]\n+#define uint128_type_node\t\tglobal_trees[TI_UINT128_TYPE]\n \n #define void_node\t\t\tglobal_trees[TI_VOID]\n "}]}