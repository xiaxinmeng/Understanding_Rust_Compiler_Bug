{"sha": "ad9f20cbce22c10f62d7f4c1b12d42b144454760", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ5ZjIwY2JjZTIyYzEwZjYyZDdmNGMxYjEyZDQyYjE0NDQ1NDc2MA==", "commit": {"author": {"name": "Devang Patel", "email": "dpatel@apple.com", "date": "2004-09-22T01:16:20Z"}, "committer": {"name": "Devang Patel", "email": "dpatel@gcc.gnu.org", "date": "2004-09-22T01:16:20Z"}, "message": "tree.def (VEC_COND_EXPR): New tree node.\n\n       * tree.def (VEC_COND_EXPR): New tree node.\n       * tree-ssa-operands.c (get_expr_operands): Handle VEC_COND_EXPR.\n\nFrom-SVN: r87839", "tree": {"sha": "cf11806a17acf6f626d41825f28ce0efa0b0f398", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf11806a17acf6f626d41825f28ce0efa0b0f398"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad9f20cbce22c10f62d7f4c1b12d42b144454760", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad9f20cbce22c10f62d7f4c1b12d42b144454760", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad9f20cbce22c10f62d7f4c1b12d42b144454760", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad9f20cbce22c10f62d7f4c1b12d42b144454760/comments", "author": null, "committer": null, "parents": [{"sha": "86c440722e1c91d4bccb6ab1fc038cbfb00f55cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86c440722e1c91d4bccb6ab1fc038cbfb00f55cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86c440722e1c91d4bccb6ab1fc038cbfb00f55cd"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "65651500df3a8466d1f7dfec54e4db10f805743d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9f20cbce22c10f62d7f4c1b12d42b144454760/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9f20cbce22c10f62d7f4c1b12d42b144454760/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad9f20cbce22c10f62d7f4c1b12d42b144454760", "patch": "@@ -1,3 +1,8 @@\n+2004-09-21  Devang Patel  <dpatel@apple.com>\n+\n+\t* tree.def (VEC_COND_EXPR): New tree node.\n+\t* tree-ssa-operands.c (get_expr_operands): Handle VEC_COND_EXPR.\n+\t\n 2004-09-21  Stan Shebs  <shebs@apple.com>\n \n \t* config/rs6000/darwin-tramp.asm: Add __ppc64__ case."}, {"sha": "8c0516998bca3db4c32731d13743f206255ee1eb", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9f20cbce22c10f62d7f4c1b12d42b144454760/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9f20cbce22c10f62d7f4c1b12d42b144454760/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=ad9f20cbce22c10f62d7f4c1b12d42b144454760", "patch": "@@ -1071,7 +1071,8 @@ get_expr_operands (tree stmt, tree *expr_p, int flags)\n       return;\n \n     case COND_EXPR:\n-      get_expr_operands (stmt, &COND_EXPR_COND (expr), opf_none);\n+    case VEC_COND_EXPR:\n+      get_expr_operands (stmt, &TREE_OPERAND (expr, 0), opf_none);\n       get_expr_operands (stmt, &TREE_OPERAND (expr, 1), opf_none);\n       get_expr_operands (stmt, &TREE_OPERAND (expr, 2), opf_none);\n       return;"}, {"sha": "fa58abafad7e9179a23993ee37174194f8357bac", "filename": "gcc/tree.def", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9f20cbce22c10f62d7f4c1b12d42b144454760/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9f20cbce22c10f62d7f4c1b12d42b144454760/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=ad9f20cbce22c10f62d7f4c1b12d42b144454760", "patch": "@@ -453,6 +453,18 @@ DEFTREECODE (TARGET_EXPR, \"target_expr\", tcc_expression, 4)\n    have VOID_TYPE.  The same constraints apply to operand 2.  */\n DEFTREECODE (COND_EXPR, \"cond_expr\", tcc_expression, 3)\n \n+/* Vector conditional expresion. It is like COND_EXPR, but with\n+   vector operands.\n+\n+   A = VEC_COND_EXPR ( X < Y, B, C)\n+\n+   means\n+\n+   for (i=0; i<N; i++)\n+     A[i] = X[i] < Y[i] ? B[i] : C[i];\n+*/\n+DEFTREECODE (VEC_COND_EXPR, \"vec_cond_expr\", 'e', 3)\n+\n /* Declare local variables, including making RTL and allocating space.\n    BIND_EXPR_VARS is a chain of VAR_DECL nodes for the variables.\n    BIND_EXPR_BODY is the body, the expression to be computed using"}]}