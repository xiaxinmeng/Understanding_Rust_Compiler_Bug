{"sha": "26e79d1018d0e6bd50b96f5f3fabb0376e392dff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZlNzlkMTAxOGQwZTZiZDUwYjk2ZjVmM2ZhYmIwMzc2ZTM5MmRmZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-16T20:40:25Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-16T20:40:25Z"}, "message": "tree-flow.h (struct var_ann_d): Remove has_hidden_use.\n\n        * tree-flow.h (struct var_ann_d): Remove has_hidden_use.\n        * gimple-low.c (expand_var_p): Don't check it.\n        * tree-ssa-alias.c (setup_pointers_and_addressables): Likewise.\n        * tree-ssa-copyrename.c (rename_ssa_copies): Likewise.\n        * tree-ssa-operands.c (add_stmt_operand): Likewise.\n        * tree-dfa.c (find_hidden_use_vars, find_hidden_use_vars_r): Kill.\n        (find_referenced_vars): Don't call them.\n        * tree-flow-inline.h (has_hidden_use, set_has_hidden_use): Kill.\n\nFrom-SVN: r84830", "tree": {"sha": "ac3adfa1c4468b9b4aecc3bd7a72273f41e2f01b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac3adfa1c4468b9b4aecc3bd7a72273f41e2f01b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26e79d1018d0e6bd50b96f5f3fabb0376e392dff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26e79d1018d0e6bd50b96f5f3fabb0376e392dff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26e79d1018d0e6bd50b96f5f3fabb0376e392dff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26e79d1018d0e6bd50b96f5f3fabb0376e392dff/comments", "author": null, "committer": null, "parents": [{"sha": "d58247a32166e5bb072261dc258a237a8d26a39b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d58247a32166e5bb072261dc258a237a8d26a39b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d58247a32166e5bb072261dc258a237a8d26a39b"}], "stats": {"total": 172, "additions": 18, "deletions": 154}, "files": [{"sha": "85b7b7ffc6461d102f86fc5c690f0a803428ba3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e79d1018d0e6bd50b96f5f3fabb0376e392dff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e79d1018d0e6bd50b96f5f3fabb0376e392dff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26e79d1018d0e6bd50b96f5f3fabb0376e392dff", "patch": "@@ -1,3 +1,14 @@\n+2004-07-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* tree-flow.h (struct var_ann_d): Remove has_hidden_use.\n+\t* gimple-low.c (expand_var_p): Don't check it.\n+\t* tree-ssa-alias.c (setup_pointers_and_addressables): Likewise.\n+\t* tree-ssa-copyrename.c (rename_ssa_copies): Likewise.\n+\t* tree-ssa-operands.c (add_stmt_operand): Likewise.\n+\t* tree-dfa.c (find_hidden_use_vars, find_hidden_use_vars_r): Kill.\n+\t(find_referenced_vars): Don't call them.\n+\t* tree-flow-inline.h (has_hidden_use, set_has_hidden_use): Kill.\n+\n 2004-07-16  Richard Henderson  <rth@redhat.com>\n \n \t* function.c (pass_by_reference): True for all variable sized types."}, {"sha": "b3b6af71ab84d781cfd9455cda9f33c5126b38ca", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e79d1018d0e6bd50b96f5f3fabb0376e392dff/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e79d1018d0e6bd50b96f5f3fabb0376e392dff/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=26e79d1018d0e6bd50b96f5f3fabb0376e392dff", "patch": "@@ -482,7 +482,6 @@ expand_var_p (tree var)\n   if (ann\n       && ! ann->may_aliases\n       && ! ann->used\n-      && ! ann->has_hidden_use\n       && ! TREE_ADDRESSABLE (var)\n       && ! TREE_THIS_VOLATILE (var)\n       && (DECL_ARTIFICIAL (var) || optimize >= 2))"}, {"sha": "91d7ecd20dd1e1298fcf773835469f9e8e2ed512", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 0, "deletions": 96, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e79d1018d0e6bd50b96f5f3fabb0376e392dff/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e79d1018d0e6bd50b96f5f3fabb0376e392dff/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=26e79d1018d0e6bd50b96f5f3fabb0376e392dff", "patch": "@@ -81,8 +81,6 @@ static tree find_vars_r (tree *, int *, void *);\n static void add_referenced_var (tree, struct walk_state *);\n static void compute_immediate_uses_for_phi (tree, bool (*)(tree));\n static void compute_immediate_uses_for_stmt (tree, int, bool (*)(tree));\n-static void find_hidden_use_vars (tree);\n-static tree find_hidden_use_vars_r (tree *, int *, void *);\n \n \n /* Global declarations.  */\n@@ -109,21 +107,6 @@ find_referenced_vars (void)\n   basic_block bb;\n   block_stmt_iterator si;\n   struct walk_state walk_state;\n-  tree block;\n-\n-  /* Walk the lexical blocks in the function looking for variables that may\n-     have been used to declare VLAs and for nested functions.  Both\n-     constructs create hidden uses of variables. \n-\n-     Note that at this point we may have multiple blocks hung off\n-     DECL_INITIAL chained through the BLOCK_CHAIN field due to\n-     how inlining works.  Egad.  */\n-  block = DECL_INITIAL (current_function_decl);\n-  while (block)\n-    {\n-      find_hidden_use_vars (block);\n-      block = BLOCK_CHAIN (block);\n-    }\n \n   vars_found = htab_create (50, htab_hash_pointer, htab_eq_pointer, NULL);\n   memset (&walk_state, 0, sizeof (walk_state));\n@@ -570,9 +553,6 @@ dump_variable (FILE *file, tree var)\n \n   fprintf (file, \", UID %u\", (unsigned) ann->uid);\n \n-  if (ann->has_hidden_use)\n-    fprintf (file, \", has hidden uses\");\n-\n   if (ann->type_mem_tag)\n     {\n       fprintf (file, \", type memory tag: \");\n@@ -958,82 +938,6 @@ get_virtual_var (tree var)\n   return var;\n }\n \n-\n-/* Mark variables in BLOCK that have hidden uses.  A hidden use can\n-   occur due to VLA declarations or nested functions.  */\n-\n-static void\n-find_hidden_use_vars (tree block)\n-{\n-  tree sub, decl, tem;\n-\n-  /* Check all the arrays declared in the block for VLAs.\n-     While scanning the block's variables, also see if there is\n-     a nested function at this scope.  */\n-  for (decl = BLOCK_VARS (block); decl; decl = TREE_CHAIN (decl))\n-    {\n-      int inside_vla = 0;\n-      walk_tree (&decl, find_hidden_use_vars_r, &inside_vla, NULL);\n-    }\n-\n-  /* Now repeat the search in any sub-blocks.  */\n-  for (sub = BLOCK_SUBBLOCKS (block); sub; sub = TREE_CHAIN (sub))\n-    find_hidden_use_vars (sub);\n-\n-  /* A VLA parameter may use a variable which as set from another\n-     parameter to declare the size of the VLA.  We need to mark the\n-     variable as having a hidden use since it is used to declare the\n-     VLA parameter and that declaration is not seen by the SSA code. \n-\n-     Note get_pending_sizes clears the PENDING_SIZES chain, so we\n-     must restore it.  */\n-  tem = get_pending_sizes ();\n-  put_pending_sizes (tem);\n-  for (; tem; tem = TREE_CHAIN (tem))\n-    {\n-      int inside_vla = 1;\n-      walk_tree (&TREE_VALUE (tem), find_hidden_use_vars_r, &inside_vla, NULL);\n-    }\n-}\n-\n-\n-/* Callback for walk_tree used by find_hidden_use_vars to analyze each \n-   variable in a lexical block.  If the variable's size has a variable\n-   size, then mark all objects needed to compute the variable's size\n-   as having hidden uses.  */\n-\n-static tree\n-find_hidden_use_vars_r (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n-\t\t\tvoid *data ATTRIBUTE_UNUSED)\n-{\n-  int *inside_vla = (int *) data;\n-\n-  /* We need to look for hidden uses due to VLAs in variable\n-     definitions.  We originally used to look for these hidden\n-     uses in the variable's type, but that's unreliable if the\n-     type's size contains a SAVE_EXPR for a different function\n-     context than the variable is used within.  */\n-  if (SSA_VAR_P (*tp)\n-      && ((DECL_SIZE (*tp)\n-\t   && ! really_constant_p (DECL_SIZE (*tp)))\n-\t  || (DECL_SIZE_UNIT (*tp)\n-\t      && ! really_constant_p (DECL_SIZE_UNIT (*tp)))))\n-    {\n-      int save = *inside_vla;\n-\n-      *inside_vla = 1;\n-      walk_tree (&DECL_SIZE (*tp), find_hidden_use_vars_r, inside_vla, NULL);\n-      walk_tree (&DECL_SIZE_UNIT (*tp), find_hidden_use_vars_r,\n-\t\t inside_vla, NULL);\n-      *inside_vla = save;\n-    }\n-  else if (*inside_vla && SSA_VAR_P (*tp))\n-    set_has_hidden_use (*tp);\n-\n-  return NULL_TREE;\n-}\n-\n-\n /* Add a temporary variable to REFERENCED_VARS.  This is similar to\n    add_referenced_var, but is used by passes that need to add new temps to\n    the REFERENCED_VARS array after the program has been scanned for"}, {"sha": "08dc0eff2758a2d4291474f91b8c60006bed839b", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e79d1018d0e6bd50b96f5f3fabb0376e392dff/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e79d1018d0e6bd50b96f5f3fabb0376e392dff/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=26e79d1018d0e6bd50b96f5f3fabb0376e392dff", "patch": "@@ -97,24 +97,6 @@ may_aliases (tree var)\n   return ann ? ann->may_aliases : NULL;\n }\n \n-/* Return true if VAR has a hidden use, false if it does not.  */\n-static inline bool\n-has_hidden_use (tree var)\n-{\n-  var_ann_t ann = var_ann (var);\n-  return ann ? ann->has_hidden_use : false;\n-}\n-\n-/* Set the hidden use flag on VAR.  */ \n-static inline void\n-set_has_hidden_use (tree var)\n-{\n-  var_ann_t ann = var_ann (var);\n-  if (ann == NULL)\n-    ann = create_var_ann (var);\n-  ann->has_hidden_use = 1;\n-}\n-\n /* Return the line number for EXPR, or return -1 if we have no line\n    number information for it.  */\n static inline int"}, {"sha": "5bd9f94a402c1c3142c5319f511312f0c5c5d668", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e79d1018d0e6bd50b96f5f3fabb0376e392dff/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e79d1018d0e6bd50b96f5f3fabb0376e392dff/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=26e79d1018d0e6bd50b96f5f3fabb0376e392dff", "patch": "@@ -138,17 +138,6 @@ struct var_ann_d GTY(())\n {\n   struct tree_ann_common_d common;\n \n-  /* Nonzero if this variable has uses which may not appear\n-     in the IL.  This can happen in the following cases:\n-\n-       1. If the variable is used in a variable length\n-          array declaration.\n-\n-\t2. If the variable is the return value in a C++\n-\t   function where the named return value optimization\n-\t   has been performed.  */\n-  unsigned has_hidden_use : 1;\n-\n   /* Used by the out of SSA pass to determine whether this variable has\n      been seen yet or not.  */\n   unsigned out_of_ssa_tag : 1;\n@@ -334,8 +323,6 @@ static inline bitmap addresses_taken (tree);\n static inline int num_immediate_uses (dataflow_t);\n static inline tree immediate_use (dataflow_t, int);\n static inline dataflow_t get_immediate_uses (tree);\n-static inline bool has_hidden_use (tree);\n-static inline void set_has_hidden_use (tree);\n static inline void set_default_def (tree, tree);\n static inline tree default_def (tree);\n static inline bool may_be_aliased (tree);"}, {"sha": "0d96b16aa8318d06d8b7f297fd16dbcc053e8867", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e79d1018d0e6bd50b96f5f3fabb0376e392dff/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e79d1018d0e6bd50b96f5f3fabb0376e392dff/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=26e79d1018d0e6bd50b96f5f3fabb0376e392dff", "patch": "@@ -1219,12 +1219,10 @@ setup_pointers_and_addressables (struct alias_info *ai)\n \n       if (POINTER_TYPE_P (TREE_TYPE (var)))\n \t{\n-\t  /* Since we don't keep track of volatile variables nor\n-\t     variables with hidden uses, assume that these pointers\n-\t     are used in indirect store operations.  */\n-\t  var_ann_t ann = var_ann (var);\n-\t  if (TREE_THIS_VOLATILE (var) || ann->has_hidden_use)\n-\t    bitmap_set_bit (ai->dereferenced_ptrs_store, ann->uid);\n+\t  /* Since we don't keep track of volatile variables, assume that\n+\t     these pointers are used in indirect store operations.  */\n+\t  if (TREE_THIS_VOLATILE (var))\n+\t    bitmap_set_bit (ai->dereferenced_ptrs_store, var_ann (var)->uid);\n \n \t  num_pointers++;\n \t}\n@@ -1266,7 +1264,6 @@ setup_pointers_and_addressables (struct alias_info *ai)\n       if (TREE_ADDRESSABLE (var))\n \t{\n \t  if (!bitmap_bit_p (ai->addresses_needed, v_ann->uid)\n-\t      && !v_ann->has_hidden_use\n \t      && v_ann->mem_tag_kind == NOT_A_TAG\n \t      && !needs_to_live_in_memory (var))\n \t    {"}, {"sha": "c65b8284de6f9adf06c22255546ef30b5720c4b5", "filename": "gcc/tree-ssa-copyrename.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e79d1018d0e6bd50b96f5f3fabb0376e392dff/gcc%2Ftree-ssa-copyrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e79d1018d0e6bd50b96f5f3fabb0376e392dff/gcc%2Ftree-ssa-copyrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copyrename.c?ref=26e79d1018d0e6bd50b96f5f3fabb0376e392dff", "patch": "@@ -309,9 +309,7 @@ rename_ssa_copies (void)\n \t      tree lhs = TREE_OPERAND (stmt, 0);\n \t      tree rhs = TREE_OPERAND (stmt, 1);\n \n-              if (TREE_CODE (lhs) == SSA_NAME\n-\t\t  && !has_hidden_use (SSA_NAME_VAR (lhs))\n-\t\t  && TREE_CODE (rhs) == SSA_NAME)\n+              if (TREE_CODE (lhs) == SSA_NAME && TREE_CODE (rhs) == SSA_NAME)\n \t\tcopy_rename_partition_coalesce (map, lhs, rhs, debug);\n \t    }\n \t}\n@@ -325,10 +323,8 @@ rename_ssa_copies (void)\n           int i;\n \t  tree res = PHI_RESULT (phi);\n \n-\t  /* Do not process virtual SSA_NAMES or variables which have\n-\t     hidden uses.  */\n-\t  if (!is_gimple_reg (SSA_NAME_VAR (res))\n-\t      || has_hidden_use (SSA_NAME_VAR (res)))\n+\t  /* Do not process virtual SSA_NAMES.  */\n+\t  if (!is_gimple_reg (SSA_NAME_VAR (res)))\n \t    continue;\n \n           for (i = 0; i < PHI_NUM_ARGS (phi); i++)"}, {"sha": "af21f12a4154c7a3cd3ed67836b56a4bb17786b5", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e79d1018d0e6bd50b96f5f3fabb0376e392dff/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e79d1018d0e6bd50b96f5f3fabb0376e392dff/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=26e79d1018d0e6bd50b96f5f3fabb0376e392dff", "patch": "@@ -1298,18 +1298,6 @@ add_stmt_operand (tree *var_p, tree stmt, int flags, voperands_t prev_vops)\n   sym = (TREE_CODE (var) == SSA_NAME ? SSA_NAME_VAR (var) : var);\n   v_ann = var_ann (sym);\n \n-  /* FIXME: We currently refuse to optimize variables that have hidden uses\n-     (variables used in VLA declarations, MD builtin calls and variables\n-     from the parent function in nested functions).  This is because not\n-     all uses of these variables are exposed in the IL or the statements\n-     that reference them are not in GIMPLE form.  If that's the case, mark\n-     the statement as having volatile operands and return.  */\n-  if (v_ann->has_hidden_use)\n-    {\n-      s_ann->has_volatile_ops = true;\n-      return;\n-    }\n-\n   /* Don't expose volatile variables to the optimizers.  */\n   if (TREE_THIS_VOLATILE (sym))\n     {"}]}