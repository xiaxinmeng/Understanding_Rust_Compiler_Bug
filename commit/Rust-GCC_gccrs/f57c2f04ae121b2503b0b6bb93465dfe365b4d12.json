{"sha": "f57c2f04ae121b2503b0b6bb93465dfe365b4d12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU3YzJmMDRhZTEyMWIyNTAzYjBiNmJiOTM0NjVkZmUzNjViNGQxMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-03-19T10:25:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-03-19T10:25:43Z"}, "message": "re PR target/39496 (GCC uses non-standard calling conventions for static functions with -O0.)\n\n\tPR target/39496\n\t* config/i386/i386.c (ix86_function_regparm): Don't optimize local\n\tfunctions using regparm calling conventions when not optimizing.\n\t(ix86_function_sseregparm): Similarly for sseregparm calling\n\tconventions.\n\n\t* gcc.target/i386/pr39496.c: New test.\n\t* g++.dg/other/pr39496.C: New test.\n\nFrom-SVN: r144955", "tree": {"sha": "a5b73d6503686d01c52cb3b15d4e6c90a0c47c9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5b73d6503686d01c52cb3b15d4e6c90a0c47c9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f57c2f04ae121b2503b0b6bb93465dfe365b4d12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f57c2f04ae121b2503b0b6bb93465dfe365b4d12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f57c2f04ae121b2503b0b6bb93465dfe365b4d12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f57c2f04ae121b2503b0b6bb93465dfe365b4d12/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e517d61f7635494e97f23970570de7c78a824ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e517d61f7635494e97f23970570de7c78a824ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e517d61f7635494e97f23970570de7c78a824ef"}], "stats": {"total": 90, "additions": 88, "deletions": 2}, "files": [{"sha": "9b7c4b24968f7148fd9e6635d3b8197919a1497d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f57c2f04ae121b2503b0b6bb93465dfe365b4d12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f57c2f04ae121b2503b0b6bb93465dfe365b4d12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f57c2f04ae121b2503b0b6bb93465dfe365b4d12", "patch": "@@ -1,3 +1,11 @@\n+2009-03-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/39496\n+\t* config/i386/i386.c (ix86_function_regparm): Don't optimize local\n+\tfunctions using regparm calling conventions when not optimizing.\n+\t(ix86_function_sseregparm): Similarly for sseregparm calling\n+\tconventions.\n+\n 2009-03-19  Li Feng  <nemokingdom@gmail.com>\n \n \tPR middle-end/39500"}, {"sha": "18063e6b38809576676fc9eb05d3d32c76201db3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f57c2f04ae121b2503b0b6bb93465dfe365b4d12/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f57c2f04ae121b2503b0b6bb93465dfe365b4d12/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f57c2f04ae121b2503b0b6bb93465dfe365b4d12", "patch": "@@ -4309,7 +4309,9 @@ ix86_function_regparm (const_tree type, const_tree decl)\n     return 2;\n \n   /* Use register calling convention for local functions when possible.  */\n-  if (decl && TREE_CODE (decl) == FUNCTION_DECL\n+  if (decl\n+      && TREE_CODE (decl) == FUNCTION_DECL\n+      && optimize\n       && !profile_flag)\n     {\n       /* FIXME: remove this CONST_CAST when cgraph.[ch] is constified.  */\n@@ -4394,7 +4396,7 @@ ix86_function_sseregparm (const_tree type, const_tree decl, bool warn)\n \n   /* For local functions, pass up to SSE_REGPARM_MAX SFmode\n      (and DFmode for SSE2) arguments in SSE registers.  */\n-  if (decl && TARGET_SSE_MATH && !profile_flag)\n+  if (decl && TARGET_SSE_MATH && optimize && !profile_flag)\n     {\n       /* FIXME: remove this CONST_CAST when cgraph.[ch] is constified.  */\n       struct cgraph_local_info *i = cgraph_local_info (CONST_CAST_TREE(decl));"}, {"sha": "541c73213f21b66626edbc041eb808594cf42944", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f57c2f04ae121b2503b0b6bb93465dfe365b4d12/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f57c2f04ae121b2503b0b6bb93465dfe365b4d12/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f57c2f04ae121b2503b0b6bb93465dfe365b4d12", "patch": "@@ -1,3 +1,9 @@\n+2009-03-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/39496\n+\t* gcc.target/i386/pr39496.c: New test.\n+\t* g++.dg/other/pr39496.C: New test.\n+\n 2009-03-19  Li Feng  <nemokingdom@gmail.com>\n \n \tPR middle-end/39500"}, {"sha": "94e33abbe11f2a5fdeb03016fc413cf9ee9749fa", "filename": "gcc/testsuite/g++.dg/other/pr39496.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f57c2f04ae121b2503b0b6bb93465dfe365b4d12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr39496.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f57c2f04ae121b2503b0b6bb93465dfe365b4d12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr39496.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr39496.C?ref=f57c2f04ae121b2503b0b6bb93465dfe365b4d12", "patch": "@@ -0,0 +1,35 @@\n+// PR target/39496\n+// { dg-do compile { target { { i?86-*-linux* x86_64-*-linux* } && ilp32 } } }\n+// { dg-options \"-O0 -fverbose-asm -fno-omit-frame-pointer -msse2 -mfpmath=sse\" }\n+// Verify that {foo,bar}{,2}param are all passed on the stack, using\n+// normal calling conventions, when not optimizing.\n+// { dg-final { scan-assembler \"\\[^0-9-\\]8\\\\(%ebp\\\\),\\[^\\n\\]*fooparam,\" } }\n+// { dg-final { scan-assembler \"\\[^0-9-\\]8\\\\(%ebp\\\\),\\[^\\n\\]*barparam,\" } }\n+// { dg-final { scan-assembler \"\\[^0-9-\\]8\\\\(%ebp\\\\),\\[^\\n\\]*foo2param,\" } }\n+// { dg-final { scan-assembler \"\\[^0-9-\\]8\\\\(%ebp\\\\),\\[^\\n\\]*bar2param,\" } }\n+\n+static inline int foo (int fooparam)\n+{\n+  return fooparam;\n+}\n+\n+static int bar (int barparam)\n+{\n+  return foo (barparam);\n+}\n+\n+static inline double foo2 (double foo2param)\n+{\n+  return foo2param;\n+}\n+\n+static double bar2 (double bar2param)\n+{\n+  return foo2 (bar2param);\n+}\n+\n+int\n+main ()\n+{\n+  return bar (0) + bar2 (0.0);\n+}"}, {"sha": "d90a2c7f3ea1ce906e42dc89514ef3c1273b559b", "filename": "gcc/testsuite/gcc.target/i386/pr39496.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f57c2f04ae121b2503b0b6bb93465dfe365b4d12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39496.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f57c2f04ae121b2503b0b6bb93465dfe365b4d12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39496.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39496.c?ref=f57c2f04ae121b2503b0b6bb93465dfe365b4d12", "patch": "@@ -0,0 +1,35 @@\n+/* PR target/39496 */\n+/* { dg-do compile { target { { i?86-*-linux* x86_64-*-linux* } && ilp32 } } } */\n+/* { dg-options \"-O0 -fverbose-asm -fno-omit-frame-pointer -msse2 -mfpmath=sse\" } */\n+/* Verify that {foo,bar}{,2}param are all passed on the stack, using\n+   normal calling conventions, when not optimizing.  */\n+/* { dg-final { scan-assembler \"\\[^0-9-\\]8\\\\(%ebp\\\\),\\[^\\n\\]*fooparam,\" } } */\n+/* { dg-final { scan-assembler \"\\[^0-9-\\]8\\\\(%ebp\\\\),\\[^\\n\\]*barparam,\" } } */\n+/* { dg-final { scan-assembler \"\\[^0-9-\\]8\\\\(%ebp\\\\),\\[^\\n\\]*foo2param,\" } } */\n+/* { dg-final { scan-assembler \"\\[^0-9-\\]8\\\\(%ebp\\\\),\\[^\\n\\]*bar2param,\" } } */\n+\n+static inline int foo (int fooparam)\n+{\n+  return fooparam;\n+}\n+\n+static int bar (int barparam)\n+{\n+  return foo (barparam);\n+}\n+\n+static inline double foo2 (double foo2param)\n+{\n+  return foo2param;\n+}\n+\n+static double bar2 (double bar2param)\n+{\n+  return foo2 (bar2param);\n+}\n+\n+int\n+main ()\n+{\n+  return bar (0) + bar2 (0.0);\n+}"}]}