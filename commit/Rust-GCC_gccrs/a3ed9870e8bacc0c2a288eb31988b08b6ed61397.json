{"sha": "a3ed9870e8bacc0c2a288eb31988b08b6ed61397", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNlZDk4NzBlOGJhY2MwYzJhMjg4ZWIzMTk4OGIwOGI2ZWQ2MTM5Nw==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-10-06T23:45:48Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-10-06T23:45:48Z"}, "message": "re PR middle-end/17849 (intrinsic_pack.f90)\n\n2004-10-06  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR middle-end/17849\n        * gfortran.fortran-torture/compile/nested.f90: New test\n\n\n2004-10-06  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR middle-end/17849\n        * tree-nested.c (walk_stmt_info): Add changed field.\n        (convert_nonlocal_reference): Set changed to when we\n        change a decl to unnested decl.\n        <case ADDR_EXPR>: Instead of checking if the immediate part\n        of the ADDR_EXPR changed, check the field changed.\n        Use recompute_tree_invarant_for_addr_expr instead of unsetting\n        TREE_INVARIANT.\n        (convert_local_reference):  Set changed to when we\n        change a decl to unnested decl.\n        <case ADDR_EXPR>: Instead of checking if the immediate part\n        of the ADDR_EXPR changed, check the field changed.\n        Also call recompute_tree_invarant_for_addr_expr on the ADDR_EXPR.\n\nFrom-SVN: r88650", "tree": {"sha": "dac70c341cb889c3838311318e51b6b4b07c3376", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dac70c341cb889c3838311318e51b6b4b07c3376"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3ed9870e8bacc0c2a288eb31988b08b6ed61397", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ed9870e8bacc0c2a288eb31988b08b6ed61397", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3ed9870e8bacc0c2a288eb31988b08b6ed61397", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ed9870e8bacc0c2a288eb31988b08b6ed61397/comments", "author": null, "committer": null, "parents": [{"sha": "c45abcaf8fe7c588468d6c2c9fb0b2fec24e3cf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c45abcaf8fe7c588468d6c2c9fb0b2fec24e3cf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c45abcaf8fe7c588468d6c2c9fb0b2fec24e3cf7"}], "stats": {"total": 59, "additions": 54, "deletions": 5}, "files": [{"sha": "ac4ef2164b520dd993910306f588886b6cd08b96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ed9870e8bacc0c2a288eb31988b08b6ed61397/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ed9870e8bacc0c2a288eb31988b08b6ed61397/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3ed9870e8bacc0c2a288eb31988b08b6ed61397", "patch": "@@ -1,3 +1,19 @@\n+2004-10-06  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR middle-end/17849\n+\t* tree-nested.c (walk_stmt_info): Add changed field.\n+\t(convert_nonlocal_reference): Set changed to when we\n+\tchange a decl to unnested decl.\n+\t<case ADDR_EXPR>: Instead of checking if the immediate part\n+\tof the ADDR_EXPR changed, check the field changed.\n+\tUse recompute_tree_invarant_for_addr_expr instead of unsetting\n+\tTREE_INVARIANT.\n+\t(convert_local_reference):  Set changed to when we\n+\tchange a decl to unnested decl.\n+\t<case ADDR_EXPR>: Instead of checking if the immediate part\n+\tof the ADDR_EXPR changed, check the field changed.\n+\tAlso call recompute_tree_invarant_for_addr_expr on the ADDR_EXPR.\n+\n 2004-10-06  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* defaults.h (DWARF2_GENERATE_TEXT_SECTION_LABEL): Remove."}, {"sha": "498f92d51ab87500aab50bcecb5594931365f2aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ed9870e8bacc0c2a288eb31988b08b6ed61397/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ed9870e8bacc0c2a288eb31988b08b6ed61397/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3ed9870e8bacc0c2a288eb31988b08b6ed61397", "patch": "@@ -1,3 +1,8 @@\n+2004-10-06  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR middle-end/17849\n+\t* gfortran.fortran-torture/compile/nested.f90: New test\n+\n 2004-10-06  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* gcc.dg/Wconversion-2.c, gcc.dg/func-args-1.c: New tests."}, {"sha": "1059684ddd50e7f2b68c9d3a3f3c59a7c3b6b283", "filename": "gcc/testsuite/gfortran.fortran-torture/compile/nested.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ed9870e8bacc0c2a288eb31988b08b6ed61397/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fnested.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ed9870e8bacc0c2a288eb31988b08b6ed61397/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fnested.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fnested.f90?ref=a3ed9870e8bacc0c2a288eb31988b08b6ed61397", "patch": "@@ -0,0 +1,23 @@\n+! Program to test the nested functions\n+program intrinsic_pack\n+   integer, parameter :: val(9) = (/0,0,0,0,9,0,0,0,7/)\n+   integer, dimension(3, 3) :: a\n+   integer, dimension(6) :: b\n+\n+   a = reshape (val, (/3, 3/))\n+   b = 0\n+   b(1:6:3) = pack (a, a .ne. 0);\n+   if (any (b(1:6:3) .ne. (/9, 7/))) call abort\n+   b = pack (a(2:3, 2:3), a(2:3, 2:3) .ne. 0, (/1, 2, 3, 4, 5, 6/));\n+   if (any (b .ne. (/9, 7, 3, 4, 5, 6/))) call abort\n+\n+contains\n+  subroutine tests_with_temp\n+    ! A few tests which involve a temporary\n+    if (any (pack(a, a.ne.0) .ne. (/9, 7/))) call abort\n+    if (any (pack(a, .true.) .ne. val)) call abort\n+    if (size(pack (a, .false.)) .ne. 0) call abort\n+    if (any (pack(a, .false., (/1,2,3/)).ne. (/1,2,3/))) call abort\n+\n+  end subroutine tests_with_temp\n+end program"}, {"sha": "3f500f6f138914fcae2f05c2316735ce8ce0cedb", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ed9870e8bacc0c2a288eb31988b08b6ed61397/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ed9870e8bacc0c2a288eb31988b08b6ed61397/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=a3ed9870e8bacc0c2a288eb31988b08b6ed61397", "patch": "@@ -518,6 +518,7 @@ struct walk_stmt_info\n   tree_stmt_iterator tsi;\n   struct nesting_info *info;\n   bool val_only;\n+  bool changed;\n };\n \n /* A subroutine of walk_function.  Iterate over all sub-statements of *TP.  */\n@@ -732,6 +733,7 @@ convert_nonlocal_reference (tree *tp, int *walk_subtrees, void *data)\n \t  tree target_context = decl_function_context (t);\n \t  struct nesting_info *i;\n \t  tree x;\n+\t  wi->changed = true;\n \n \t  for (i = info->outer; i->context != target_context; i = i->outer)\n \t    continue;\n@@ -770,17 +772,17 @@ convert_nonlocal_reference (tree *tp, int *walk_subtrees, void *data)\n     case ADDR_EXPR:\n       {\n \tbool save_val_only = wi->val_only;\n-\ttree save_sub = TREE_OPERAND (t, 0);\n \n+\twi->changed = false;\n \twi->val_only = false;\n \twalk_tree (&TREE_OPERAND (t, 0), convert_nonlocal_reference, wi, NULL);\n \twi->val_only = true;\n \n-\tif (save_sub != TREE_OPERAND (t, 0))\n+\tif (wi->changed)\n \t  {\n \t    /* If we changed anything, then TREE_INVARIANT is be wrong,\n \t       since we're no longer directly referencing a decl.  */\n-\t    TREE_INVARIANT (t) = 0;\n+\t    recompute_tree_invarant_for_addr_expr (t);\n \n \t    /* If the callback converted the address argument in a context\n \t       where we only accept variables (and min_invariant, presumably),\n@@ -874,6 +876,7 @@ convert_local_reference (tree *tp, int *walk_subtrees, void *data)\n \t  field = lookup_field_for_decl (info, t, NO_INSERT);\n \t  if (!field)\n \t    break;\n+\t  wi->changed = true;\n \n \t  x = get_frame_field (info, info->context, field, &wi->tsi);\n \t  if (wi->val_only)\n@@ -885,17 +888,19 @@ convert_local_reference (tree *tp, int *walk_subtrees, void *data)\n     case ADDR_EXPR:\n       {\n \tbool save_val_only = wi->val_only;\n-\ttree save_sub = TREE_OPERAND (t, 0);\n \n+\twi->changed = false;\n \twi->val_only = false;\n \twalk_tree (&TREE_OPERAND (t, 0), convert_local_reference, wi, NULL);\n \twi->val_only = save_val_only;\n \n \t/* If we converted anything ... */\n-\tif (TREE_OPERAND (t, 0) != save_sub)\n+\tif (wi->changed)\n \t  {\n \t    /* Then the frame decl is now addressable.  */\n \t    TREE_ADDRESSABLE (info->frame_decl) = 1;\n+\t    \n+\t    recompute_tree_invarant_for_addr_expr (t);\n \n \t    /* If we are in a context where we only accept values, then\n \t       compute the address into a temporary.  */"}]}