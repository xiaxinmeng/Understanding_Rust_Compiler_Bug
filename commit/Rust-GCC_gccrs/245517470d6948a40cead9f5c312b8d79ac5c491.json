{"sha": "245517470d6948a40cead9f5c312b8d79ac5c491", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ1NTE3NDcwZDY5NDhhNDBjZWFkOWY1YzMxMmI4ZDc5YWM1YzQ5MQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-06-08T07:51:09Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-06-08T07:51:55Z"}, "message": "Fortran/OpenMP: Fix clause splitting for target/parallel/teams [PR99928]\n\n\tPR middle-end/99928\n\ngcc/fortran/ChangeLog:\n\n\t* trans-openmp.c (gfc_add_clause_implicitly): New.\n\t(gfc_split_omp_clauses): Use it.\n\t(gfc_free_split_omp_clauses): New.\n\t(gfc_trans_omp_do_simd, gfc_trans_omp_parallel_do,\n\tgfc_trans_omp_parallel_do_simd, gfc_trans_omp_distribute,\n\tgfc_trans_omp_teams, gfc_trans_omp_target, gfc_trans_omp_taskloop,\n\tgfc_trans_omp_master_taskloop, gfc_trans_omp_parallel_master): Use it.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/gomp/openmp-simd-6.f90: Update scan-tree-dump.\n\t* gfortran.dg/gomp/scan-5.f90: Likewise.\n\t* gfortran.dg/gomp/loop-1.f90: Likewise; remove xfail.\n\t* gfortran.dg/gomp/pr99928-1.f90: Remove xfail.\n\t* gfortran.dg/gomp/pr99928-2.f90: Likewise.\n\t* gfortran.dg/gomp/pr99928-3.f90: Likewise.\n\t* gfortran.dg/gomp/pr99928-8.f90: Likewise.", "tree": {"sha": "0854a7cb4b0e7328130d3bdd7bd12e3f6747ce8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0854a7cb4b0e7328130d3bdd7bd12e3f6747ce8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/245517470d6948a40cead9f5c312b8d79ac5c491", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/245517470d6948a40cead9f5c312b8d79ac5c491", "html_url": "https://github.com/Rust-GCC/gccrs/commit/245517470d6948a40cead9f5c312b8d79ac5c491", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/245517470d6948a40cead9f5c312b8d79ac5c491/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7191e63d051b18c8f62ff73916345fc623a1bf7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7191e63d051b18c8f62ff73916345fc623a1bf7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7191e63d051b18c8f62ff73916345fc623a1bf7e"}], "stats": {"total": 270, "additions": 225, "deletions": 45}, "files": [{"sha": "c8c61a54582596ffbff06bdd097bbe1773ee6097", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 184, "deletions": 3, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245517470d6948a40cead9f5c312b8d79ac5c491/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245517470d6948a40cead9f5c312b8d79ac5c491/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=245517470d6948a40cead9f5c312b8d79ac5c491", "patch": "@@ -5358,6 +5358,147 @@ enum\n   GFC_OMP_MASK_TASKLOOP = (1 << GFC_OMP_SPLIT_TASKLOOP)\n };\n \n+/* If a var is in lastprivate/firstprivate/reduction but not in a\n+   data mapping/sharing clause, add it to 'map(tofrom:' if is_target\n+   and to 'shared' otherwise.  */\n+static void\n+gfc_add_clause_implicitly (gfc_omp_clauses *clauses_out,\n+\t\t\t   gfc_omp_clauses *clauses_in,\n+\t\t\t   bool is_target, bool is_parallel_do)\n+{\n+  int clauselist_to_add = is_target ? OMP_LIST_MAP : OMP_LIST_SHARED;\n+  gfc_omp_namelist *tail = NULL;\n+  for (int i = 0; i < 5; ++i)\n+    {\n+      gfc_omp_namelist *n;\n+      switch (i)\n+\t{\n+\tcase 0: n = clauses_in->lists[OMP_LIST_FIRSTPRIVATE]; break;\n+\tcase 1: n = clauses_in->lists[OMP_LIST_LASTPRIVATE]; break;\n+\tcase 2: n = clauses_in->lists[OMP_LIST_REDUCTION]; break;\n+\tcase 3: n = clauses_in->lists[OMP_LIST_REDUCTION_INSCAN]; break;\n+\tcase 4: n = clauses_in->lists[OMP_LIST_REDUCTION_TASK]; break;\n+\tdefault: gcc_unreachable ();\n+\t}\n+      for (; n != NULL; n = n->next)\n+\t{\n+\t  gfc_omp_namelist *n2, **n_firstp = NULL, **n_lastp = NULL;\n+\t  for (int j = 0; j < 6; ++j)\n+\t    {\n+\t      gfc_omp_namelist **n2ref = NULL, *prev2 = NULL;\n+\t      switch (j)\n+\t\t{\n+\t\tcase 0:\n+\t\t  n2ref = &clauses_out->lists[clauselist_to_add];\n+\t\t  break;\n+\t\tcase 1:\n+\t\t  n2ref = &clauses_out->lists[OMP_LIST_FIRSTPRIVATE];\n+\t\t  break;\n+\t\tcase 2:\n+\t\t  if (is_target)\n+\t\t    n2ref = &clauses_in->lists[OMP_LIST_LASTPRIVATE];\n+\t\t  else\n+\t\t    n2ref = &clauses_out->lists[OMP_LIST_LASTPRIVATE];\n+\t\t  break;\n+\t\tcase 3: n2ref = &clauses_out->lists[OMP_LIST_REDUCTION]; break;\n+\t\tcase 4:\n+\t\t  n2ref = &clauses_out->lists[OMP_LIST_REDUCTION_INSCAN];\n+\t\t  break;\n+\t\tcase 5:\n+\t\t  n2ref = &clauses_out->lists[OMP_LIST_REDUCTION_TASK];\n+\t\t  break;\n+\t\tdefault: gcc_unreachable ();\n+\t\t}\n+\t      for (n2 = *n2ref; n2 != NULL; prev2 = n2, n2 = n2->next)\n+\t\tif (n2->sym == n->sym)\n+\t\t  break;\n+\t      if (n2)\n+\t\t{\n+\t\t  if (j == 0 /* clauselist_to_add */)\n+\t\t    break;  /* Already present.  */\n+\t\t  if (j == 1 /* OMP_LIST_FIRSTPRIVATE */)\n+\t\t    {\n+\t\t      n_firstp = prev2 ? &prev2->next : n2ref;\n+\t\t      continue;\n+\t\t    }\n+\t\t  if (j == 2 /* OMP_LIST_LASTPRIVATE */)\n+\t\t    {\n+\t\t      n_lastp = prev2 ? &prev2->next : n2ref;\n+\t\t      continue;\n+\t\t    }\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t  if (n_firstp && n_lastp)\n+\t    {\n+\t      /* For parallel do, GCC puts firstprivatee/lastprivate\n+\t\t on the parallel.  */\n+\t      if (is_parallel_do)\n+\t\tcontinue;\n+\t      *n_firstp = (*n_firstp)->next;\n+\t      if (!is_target)\n+\t\t*n_lastp = (*n_lastp)->next;\n+\t    }\n+\t  else if (is_target && n_lastp)\n+\t    ;\n+\t  else if (n2 || n_firstp || n_lastp)\n+\t    continue;\n+\t  if (clauses_out->lists[clauselist_to_add]\n+\t      && (clauses_out->lists[clauselist_to_add]\n+\t\t  == clauses_in->lists[clauselist_to_add]))\n+\t    {\n+\t      gfc_omp_namelist *p = NULL;\n+\t      for (n2 = clauses_in->lists[clauselist_to_add]; n2; n2 = n2->next)\n+\t\t{\n+\t\t  if (p)\n+\t\t    {\n+\t\t      p->next = gfc_get_omp_namelist ();\n+\t\t      p = p->next;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      p = gfc_get_omp_namelist ();\n+\t\t      clauses_out->lists[clauselist_to_add] = p;\n+\t\t    }\n+\t\t  *p = *n2;\n+\t\t}\n+\t    }\n+\t  if (!tail)\n+\t    {\n+\t      tail = clauses_out->lists[clauselist_to_add];\n+\t      for (; tail && tail->next; tail = tail->next)\n+\t\t;\n+\t    }\n+\t  n2 = gfc_get_omp_namelist ();\n+\t  n2->where = n->where;\n+\t  n2->sym = n->sym;\n+\t  if (is_target)\n+\t    n2->u.map_op = OMP_MAP_TOFROM;\n+\t  if (tail)\n+\t    {\n+\t      tail->next = n2;\n+\t      tail = n2;\n+\t    }\n+\t  else\n+\t    clauses_out->lists[clauselist_to_add] = n2;\n+\t}\n+    }\n+}\n+\n+static void\n+gfc_free_split_omp_clauses (gfc_code *code, gfc_omp_clauses *clausesa)\n+{\n+  for (int i = 0; i < GFC_OMP_SPLIT_NUM; ++i)\n+    for (int j = 0; j < OMP_LIST_NUM; ++j)\n+      if (clausesa[i].lists[j] && clausesa[i].lists[j] != code->ext.omp_clauses->lists[j])\n+\tfor (gfc_omp_namelist *n = clausesa[i].lists[j]; n;)\n+\t  {\n+\t    gfc_omp_namelist *p = n;\n+\t    n = n->next;\n+\t    free (p);\n+\t  }\n+}\n+\n static void\n gfc_split_omp_clauses (gfc_code *code,\n \t\t       gfc_omp_clauses clausesa[GFC_OMP_SPLIT_NUM])\n@@ -5689,7 +5830,8 @@ gfc_split_omp_clauses (gfc_code *code,\n       if (mask & GFC_OMP_MASK_TASKLOOP)\n \tclausesa[GFC_OMP_SPLIT_TASKLOOP].lists[OMP_LIST_FIRSTPRIVATE]\n \t  = code->ext.omp_clauses->lists[OMP_LIST_FIRSTPRIVATE];\n-      if (mask & GFC_OMP_MASK_PARALLEL)\n+      if ((mask & GFC_OMP_MASK_PARALLEL)\n+\t  && !(mask & GFC_OMP_MASK_TASKLOOP))\n \tclausesa[GFC_OMP_SPLIT_PARALLEL].lists[OMP_LIST_FIRSTPRIVATE]\n \t  = code->ext.omp_clauses->lists[OMP_LIST_FIRSTPRIVATE];\n       else if ((mask & GFC_OMP_MASK_DO) && !is_loop)\n@@ -5704,7 +5846,8 @@ gfc_split_omp_clauses (gfc_code *code,\n       if (mask & GFC_OMP_MASK_TASKLOOP)\n \tclausesa[GFC_OMP_SPLIT_TASKLOOP].lists[OMP_LIST_LASTPRIVATE]\n \t  = code->ext.omp_clauses->lists[OMP_LIST_LASTPRIVATE];\n-      if ((mask & GFC_OMP_MASK_PARALLEL) && !is_loop)\n+      if ((mask & GFC_OMP_MASK_PARALLEL) && !is_loop\n+\t  && !(mask & GFC_OMP_MASK_TASKLOOP))\n \tclausesa[GFC_OMP_SPLIT_PARALLEL].lists[OMP_LIST_LASTPRIVATE]\n \t  = code->ext.omp_clauses->lists[OMP_LIST_LASTPRIVATE];\n       else if (mask & GFC_OMP_MASK_DO)\n@@ -5731,6 +5874,7 @@ gfc_split_omp_clauses (gfc_code *code,\n \t      = code->ext.omp_clauses->lists[i];\n \t  if (mask & GFC_OMP_MASK_PARALLEL\n \t      && i != OMP_LIST_REDUCTION_INSCAN\n+\t      && !(mask & GFC_OMP_MASK_TASKLOOP)\n \t      && !is_loop)\n \t    clausesa[GFC_OMP_SPLIT_PARALLEL].lists[i]\n \t      = code->ext.omp_clauses->lists[i];\n@@ -5752,6 +5896,18 @@ gfc_split_omp_clauses (gfc_code *code,\n       clausesa[innermost].lists[OMP_LIST_LINEAR]\n \t= code->ext.omp_clauses->lists[OMP_LIST_LINEAR];\n     }\n+   /* Propagate firstprivate/lastprivate/reduction vars to\n+      shared (parallel, teams) and map-tofrom (target).  */\n+   if (mask & GFC_OMP_MASK_TARGET)\n+     gfc_add_clause_implicitly (&clausesa[GFC_OMP_SPLIT_TARGET],\n+\t\t\t\tcode->ext.omp_clauses, true, false);\n+   if ((mask & GFC_OMP_MASK_PARALLEL) && innermost != GFC_OMP_MASK_PARALLEL)\n+     gfc_add_clause_implicitly (&clausesa[GFC_OMP_SPLIT_PARALLEL],\n+\t\t\t\tcode->ext.omp_clauses, false,\n+\t\t\t\tmask & GFC_OMP_MASK_DO);\n+   if (mask & GFC_OMP_MASK_TEAMS && innermost != GFC_OMP_MASK_TEAMS)\n+     gfc_add_clause_implicitly (&clausesa[GFC_OMP_SPLIT_TEAMS],\n+\t\t\t\tcode->ext.omp_clauses, false, false);\n    if (((mask & (GFC_OMP_MASK_PARALLEL | GFC_OMP_MASK_DO))\n \t== (GFC_OMP_MASK_PARALLEL | GFC_OMP_MASK_DO))\n        && !is_loop)\n@@ -5765,6 +5921,7 @@ gfc_trans_omp_do_simd (gfc_code *code, stmtblock_t *pblock,\n   stmtblock_t block;\n   gfc_omp_clauses clausesa_buf[GFC_OMP_SPLIT_NUM];\n   tree stmt, body, omp_do_clauses = NULL_TREE;\n+  bool free_clausesa = false;\n \n   if (pblock == NULL)\n     gfc_start_block (&block);\n@@ -5775,6 +5932,7 @@ gfc_trans_omp_do_simd (gfc_code *code, stmtblock_t *pblock,\n     {\n       clausesa = clausesa_buf;\n       gfc_split_omp_clauses (code, clausesa);\n+      free_clausesa = true;\n     }\n   if (flag_openmp)\n     omp_do_clauses\n@@ -5800,6 +5958,8 @@ gfc_trans_omp_do_simd (gfc_code *code, stmtblock_t *pblock,\n   else\n     stmt = body;\n   gfc_add_expr_to_block (&block, stmt);\n+  if (free_clausesa)\n+    gfc_free_split_omp_clauses (code, clausesa);\n   return gfc_finish_block (&block);\n }\n \n@@ -5810,6 +5970,7 @@ gfc_trans_omp_parallel_do (gfc_code *code, bool is_loop, stmtblock_t *pblock,\n   stmtblock_t block, *new_pblock = pblock;\n   gfc_omp_clauses clausesa_buf[GFC_OMP_SPLIT_NUM];\n   tree stmt, omp_clauses = NULL_TREE;\n+  bool free_clausesa = false;\n \n   if (pblock == NULL)\n     gfc_start_block (&block);\n@@ -5820,6 +5981,7 @@ gfc_trans_omp_parallel_do (gfc_code *code, bool is_loop, stmtblock_t *pblock,\n     {\n       clausesa = clausesa_buf;\n       gfc_split_omp_clauses (code, clausesa);\n+      free_clausesa = true;\n     }\n   omp_clauses\n     = gfc_trans_omp_clauses (&block, &clausesa[GFC_OMP_SPLIT_PARALLEL],\n@@ -5848,6 +6010,8 @@ gfc_trans_omp_parallel_do (gfc_code *code, bool is_loop, stmtblock_t *pblock,\n \t\t     void_type_node, stmt, omp_clauses);\n   OMP_PARALLEL_COMBINED (stmt) = 1;\n   gfc_add_expr_to_block (&block, stmt);\n+  if (free_clausesa)\n+    gfc_free_split_omp_clauses (code, clausesa);\n   return gfc_finish_block (&block);\n }\n \n@@ -5858,6 +6022,7 @@ gfc_trans_omp_parallel_do_simd (gfc_code *code, stmtblock_t *pblock,\n   stmtblock_t block;\n   gfc_omp_clauses clausesa_buf[GFC_OMP_SPLIT_NUM];\n   tree stmt, omp_clauses = NULL_TREE;\n+  bool free_clausesa = false;\n \n   if (pblock == NULL)\n     gfc_start_block (&block);\n@@ -5868,6 +6033,7 @@ gfc_trans_omp_parallel_do_simd (gfc_code *code, stmtblock_t *pblock,\n     {\n       clausesa = clausesa_buf;\n       gfc_split_omp_clauses (code, clausesa);\n+      free_clausesa = true;\n     }\n   if (flag_openmp)\n     omp_clauses\n@@ -5892,6 +6058,8 @@ gfc_trans_omp_parallel_do_simd (gfc_code *code, stmtblock_t *pblock,\n       OMP_PARALLEL_COMBINED (stmt) = 1;\n     }\n   gfc_add_expr_to_block (&block, stmt);\n+  if (free_clausesa)\n+    gfc_free_split_omp_clauses (code, clausesa);\n   return gfc_finish_block (&block);\n }\n \n@@ -6049,12 +6217,14 @@ gfc_trans_omp_distribute (gfc_code *code, gfc_omp_clauses *clausesa)\n   stmtblock_t block;\n   gfc_omp_clauses clausesa_buf[GFC_OMP_SPLIT_NUM];\n   tree stmt, omp_clauses = NULL_TREE;\n+  bool free_clausesa = false;\n \n   gfc_start_block (&block);\n   if (clausesa == NULL)\n     {\n       clausesa = clausesa_buf;\n       gfc_split_omp_clauses (code, clausesa);\n+      free_clausesa = true;\n     }\n   if (flag_openmp)\n     omp_clauses\n@@ -6108,6 +6278,8 @@ gfc_trans_omp_distribute (gfc_code *code, gfc_omp_clauses *clausesa)\n       stmt = distribute;\n     }\n   gfc_add_expr_to_block (&block, stmt);\n+  if (free_clausesa)\n+    gfc_free_split_omp_clauses (code, clausesa);\n   return gfc_finish_block (&block);\n }\n \n@@ -6118,13 +6290,14 @@ gfc_trans_omp_teams (gfc_code *code, gfc_omp_clauses *clausesa,\n   stmtblock_t block;\n   gfc_omp_clauses clausesa_buf[GFC_OMP_SPLIT_NUM];\n   tree stmt;\n-  bool combined = true;\n+  bool combined = true, free_clausesa = false;\n \n   gfc_start_block (&block);\n   if (clausesa == NULL)\n     {\n       clausesa = clausesa_buf;\n       gfc_split_omp_clauses (code, clausesa);\n+      free_clausesa = true;\n     }\n   if (flag_openmp)\n     {\n@@ -6167,6 +6340,8 @@ gfc_trans_omp_teams (gfc_code *code, gfc_omp_clauses *clausesa,\n \tOMP_TEAMS_COMBINED (stmt) = 1;\n     }\n   gfc_add_expr_to_block (&block, stmt);\n+  if (free_clausesa)\n+    gfc_free_split_omp_clauses (code, clausesa);\n   return gfc_finish_block (&block);\n }\n \n@@ -6276,6 +6451,7 @@ gfc_trans_omp_target (gfc_code *code)\n       cfun->has_omp_target = true;\n     }\n   gfc_add_expr_to_block (&block, stmt);\n+  gfc_free_split_omp_clauses (code, clausesa);\n   return gfc_finish_block (&block);\n }\n \n@@ -6318,6 +6494,7 @@ gfc_trans_omp_taskloop (gfc_code *code, gfc_exec_op op)\n       stmt = taskloop;\n     }\n   gfc_add_expr_to_block (&block, stmt);\n+  gfc_free_split_omp_clauses (code, clausesa);\n   return gfc_finish_block (&block);\n }\n \n@@ -6341,6 +6518,8 @@ gfc_trans_omp_master_taskloop (gfc_code *code, gfc_exec_op op)\n \t\t\t       op != code->op\n \t\t\t       ? &clausesa[GFC_OMP_SPLIT_TASKLOOP]\n \t\t\t       : code->ext.omp_clauses, NULL);\n+      if (op != code->op)\n+\tgfc_free_split_omp_clauses (code, clausesa);\n     }\n   if (TREE_CODE (stmt) != BIND_EXPR)\n     stmt = build3_v (BIND_EXPR, NULL, stmt, poplevel (1, 0));\n@@ -6367,6 +6546,8 @@ gfc_trans_omp_parallel_master (gfc_code *code)\n \t\t\t\t       ? code->ext.omp_clauses\n \t\t\t\t       : &clausesa[GFC_OMP_SPLIT_PARALLEL],\n \t\t\t\t       code->loc);\n+  if (code->op != EXEC_OMP_PARALLEL_MASTER)\n+    gfc_free_split_omp_clauses (code, clausesa);\n   pushlevel ();\n   if (code->op == EXEC_OMP_PARALLEL_MASTER)\n     stmt = gfc_trans_omp_master (code);"}, {"sha": "730856760403e563dc336cdd8e2ab451c6455d51", "filename": "gcc/testsuite/gfortran.dg/gomp/loop-1.f90", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245517470d6948a40cead9f5c312b8d79ac5c491/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Floop-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245517470d6948a40cead9f5c312b8d79ac5c491/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Floop-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Floop-1.f90?ref=245517470d6948a40cead9f5c312b8d79ac5c491", "patch": "@@ -46,10 +46,9 @@\n \n end\n  \n-! TODO: xfailed due to PR99928: \n-! { dg-final { scan-tree-dump-times \"#pragma omp target map\\\\(tofrom:r\\\\)\\[\\r\\n\\]\" 2 \"original\" { xfail *-*-* } } }\n-! { dg-final { scan-tree-dump-times \"#pragma omp parallel\\[\\r\\n\\]\" 2 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"#pragma omp teams\\[\\r\\n\\]\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp target map\\\\(tofrom:i\\\\) map\\\\(tofrom:r\\\\)\\[\\r\\n\\]\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp parallel shared\\\\(i\\\\) shared\\\\(r\\\\)\\[\\r\\n\\]\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp teams shared\\\\(i\\\\) shared\\\\(r\\\\)\\[\\r\\n\\]\" 2 \"original\" } }\n \n ! { dg-final { scan-tree-dump-times \"#pragma omp loop private\\\\(q\\\\) lastprivate\\\\(i\\\\) reduction\\\\(\\\\+:r\\\\) order\\\\(concurrent\\\\) collapse\\\\(2\\\\) bind\\\\(parallel\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp loop private\\\\(q\\\\) lastprivate\\\\(i\\\\) reduction\\\\(\\\\+:r\\\\) order\\\\(concurrent\\\\) collapse\\\\(2\\\\) bind\\\\(teams\\\\)\" 1 \"original\" } }"}, {"sha": "14164b9362f95cba89069b142f3b6ea364557121", "filename": "gcc/testsuite/gfortran.dg/gomp/openmp-simd-6.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245517470d6948a40cead9f5c312b8d79ac5c491/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fopenmp-simd-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245517470d6948a40cead9f5c312b8d79ac5c491/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fopenmp-simd-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fopenmp-simd-6.f90?ref=245517470d6948a40cead9f5c312b8d79ac5c491", "patch": "@@ -49,7 +49,7 @@ subroutine bar(n, m, u)\n end\n \n \n-! { dg-final { scan-tree-dump-times \"#pragma omp teams firstprivate\\\\(a1\\\\) firstprivate\\\\(b1\\\\) shared\\\\(u\\\\) default\\\\(none\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp teams firstprivate\\\\(a1\\\\) firstprivate\\\\(b1\\\\) shared\\\\(u\\\\) shared\\\\(d1\\\\) default\\\\(none\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp distribute lastprivate\\\\(d1\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp parallel firstprivate\\\\(a1\\\\) firstprivate\\\\(b1\\\\) lastprivate\\\\(d1\\\\) shared\\\\(u\\\\) default\\\\(none\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp for nowait\" 1 \"original\" } }"}, {"sha": "9a590650520bf4d573053add81a4cd96a53947a2", "filename": "gcc/testsuite/gfortran.dg/gomp/pr99928-1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245517470d6948a40cead9f5c312b8d79ac5c491/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245517470d6948a40cead9f5c312b8d79ac5c491/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-1.f90?ref=245517470d6948a40cead9f5c312b8d79ac5c491", "patch": "@@ -83,14 +83,14 @@ subroutine bar ()\n   !$omp parallel master firstprivate (f09) default(none)\n   f09 = f09 + 1\n   !$omp end parallel master\n-  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(f10\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(f10\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(f10\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(f10\\\\)\" \"gimple\" } }\n   !$omp parallel master taskloop firstprivate (f10) default(none)\n   do i = 1, 64\n     f10 = f10 + 1\n   end do\n-  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(f11\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(f11\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(f11\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(f11\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f11\\\\)\" \"gimple\" } }"}, {"sha": "4a5b54915e89e124e183f46fc56f2bccdd92b889", "filename": "gcc/testsuite/gfortran.dg/gomp/pr99928-2.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245517470d6948a40cead9f5c312b8d79ac5c491/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245517470d6948a40cead9f5c312b8d79ac5c491/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-2.f90?ref=245517470d6948a40cead9f5c312b8d79ac5c491", "patch": "@@ -79,15 +79,15 @@ subroutine bar ()\n   !$omp parallel loop lastprivate (j00) default(none)\n   do j00 = 1, 64\n   end do\n-  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(l08\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(l08\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(l08\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(l08\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n   ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l08\\\\)\" \"gimple\" } }\n   !$omp parallel master taskloop lastprivate (l08) default(none)\n   do i = 1, 64\n     l08 = i\n   end do\n-  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(l09\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(l09\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(l09\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(l09\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n   ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l09\\\\)\" \"gimple\" } }"}, {"sha": "82bb89338ca0aa7243146d415b52461e78cb53fc", "filename": "gcc/testsuite/gfortran.dg/gomp/pr99928-3.f90", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245517470d6948a40cead9f5c312b8d79ac5c491/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245517470d6948a40cead9f5c312b8d79ac5c491/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-3.f90?ref=245517470d6948a40cead9f5c312b8d79ac5c491", "patch": "@@ -59,7 +59,7 @@ subroutine bar ()\n     l04 = i\n   end do\n   !$omp end parallel do simd\n-  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(l05\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(l05\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(l05\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(l05\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(l05\\\\)\" \"gimple\" } }\n@@ -68,7 +68,7 @@ subroutine bar ()\n   do i = 1, 64\n     l05 = i\n   end do\n-  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(l06\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(l06\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(l06\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(l06\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(l06\\\\)\" \"gimple\" } }\n@@ -95,8 +95,8 @@ subroutine bar ()\n     !$omp section\n     l07 = 2\n   !$omp end parallel sections\n-  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l08\" \"gimple\" { xfail *-*-* } } }\n-  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l08\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l08\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l08\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(l08\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n   ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l08\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n   ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(l08\\\\)\" \"gimple\" } } ! FIXME. \n@@ -106,8 +106,8 @@ subroutine bar ()\n     l08 = i\n   end do\n   !$omp end target parallel do\n-  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l09\" \"gimple\" { xfail *-*-* } } }\n-  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l09\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l09\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l09\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(l09\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n   ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l09\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n   ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(l09\\\\)\" \"gimple\" } } ! FIXME. \n@@ -118,8 +118,8 @@ subroutine bar ()\n   do i = 1, 64\n     l09 = i\n   end do\n-  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l10\" \"gimple\" { xfail *-*-* } } }\n-  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l10\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l10\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l10\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(l10\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l10\\\\)\" \"gimple\" } }\n   !$omp target simd firstprivate (l10) lastprivate (l10) ! defaultmap(none)"}, {"sha": "c5d1eb7a8ded91d950d4ab13e30f820b324cbc31", "filename": "gcc/testsuite/gfortran.dg/gomp/pr99928-8.f90", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245517470d6948a40cead9f5c312b8d79ac5c491/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245517470d6948a40cead9f5c312b8d79ac5c491/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-8.f90?ref=245517470d6948a40cead9f5c312b8d79ac5c491", "patch": "@@ -87,14 +87,14 @@ subroutine bar ()\n   !$omp parallel master reduction(+:r09) default(none)\n   r09 = r09 + 1\n   !$omp end parallel master\n-  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(r10\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(r10\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*reduction\\\\(\\\\+:r10\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*reduction\\\\(\\\\+:r10\\\\)\" \"gimple\" } }\n   !$omp parallel master taskloop reduction(+:r10) default(none)\n   do i = 1, 64\n     r10 = r10 + 1\n   end do\n-  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(r11\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(r11\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*reduction\\\\(\\\\+:r11\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*reduction\\\\(\\\\+:r11\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r11\\\\)\" \"gimple\" } }\n@@ -110,54 +110,54 @@ subroutine bar ()\n     !$omp section\n     r12 = r12 + 1\n   !$omp end parallel sections\n-  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r13\" \"gimple\" { xfail *-*-* } } }\n-  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r13\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r13\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r13\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r13\\\\)\" \"gimple\" } }\n   !$omp target parallel reduction(+:r13) default(none) ! defaultmap(none)\n   r13 = r13 + 1\n   !$omp end target parallel\n-  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r14\" \"gimple\" { xfail *-*-* } } }\n-  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r14\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r14\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r14\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r14\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n   ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r14\\\\)\" \"gimple\" } } ! FIXME. \n   !$omp target parallel do reduction(+:r14) default(none) ! defaultmap(none)\n   do i = 1, 64\n     r14 = r14 + 1\n   end do\n-  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r15\" \"gimple\" { xfail *-*-* } } }\n-  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r15\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r15\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r15\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r15\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n   ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r15\\\\)\" \"gimple\" } } ! FIXME. \n   ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r15\\\\)\" \"gimple\" } }\n   !$omp target parallel do simd reduction(+:r15) default(none) ! defaultmap(none)\n   do i = 1, 64\n     r15 = r15 + 1\n   end do\n-  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r16\" \"gimple\" { xfail *-*-* } } }\n-  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r16\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r16\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r16\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(r16\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r16\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n   ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r16\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n   !$omp target parallel loop reduction(+:r16) default(none) ! defaultmap(none)\n   do i = 1, 64\n     r16 = r16 + 1\n   end do\n-  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r17\" \"gimple\" { xfail *-*-* } } }\n-  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r17\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r17\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r17\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:r17\\\\)\" \"gimple\" } }\n   !$omp target teams reduction(+:r17) default(none) ! defaultmap(none)\n   r17 = r17 + 1\n   !$omp end target teams\n-  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r18\" \"gimple\" { xfail *-*-* } } }\n-  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r18\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r18\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r18\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:r18\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r18\\\\)\" \"gimple\" } }\n   !$omp target teams distribute reduction(+:r18) default(none) ! defaultmap(none)\n   do i = 1, 64\n     r18 = r18 + 1\n   end do\n-  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r19\" \"gimple\" { xfail *-*-* } } }\n-  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r19\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r19\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r19\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:r19\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r19\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r19\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n@@ -166,8 +166,8 @@ subroutine bar ()\n   do i = 1, 64\n     r19 = r19 + 1\n   end do\n-  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r20\" \"gimple\" { xfail *-*-* } } }\n-  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r20\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r20\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r20\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:r20\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r20\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r20\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n@@ -177,17 +177,17 @@ subroutine bar ()\n   do i = 1, 64\n     r20 = r20 + 1\n   end do\n-  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r21\" \"gimple\" { xfail *-*-* } } }\n-  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r21\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r21\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r21\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:r21\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r21\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r21\\\\)\" \"gimple\" } }\n   !$omp target teams distribute simd reduction(+:r21) default(none) ! defaultmap(none)\n   do i = 1, 64\n     r21 = r21 + 1\n   end do\n-  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r22\" \"gimple\" { xfail *-*-* } } }\n-  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r22\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r22\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r22\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(r22\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r22\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n   ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(r22\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n@@ -197,8 +197,8 @@ subroutine bar ()\n   do i = 1, 64\n     r22 = r22 + 1\n   end do\n-  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r23\" \"gimple\" { xfail *-*-* } } }\n-  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r23\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r23\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r23\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r23\\\\)\" \"gimple\" } }\n   !$omp target simd reduction(+:r23) ! defaultmap(none)\n   do i = 1, 64"}, {"sha": "df12f9f2a6c301bfb7efad9c4795027c1093e9d8", "filename": "gcc/testsuite/gfortran.dg/gomp/scan-5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245517470d6948a40cead9f5c312b8d79ac5c491/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245517470d6948a40cead9f5c312b8d79ac5c491/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-5.f90?ref=245517470d6948a40cead9f5c312b8d79ac5c491", "patch": "@@ -13,6 +13,6 @@ integer function foo(a,b, n) result(r)\n   end do\n end\n \n-! { dg-final { scan-tree-dump-times \"#pragma omp parallel firstprivate\\\\(a\\\\) firstprivate\\\\(b\\\\) default\\\\(none\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp parallel firstprivate\\\\(a\\\\) firstprivate\\\\(b\\\\) shared\\\\(r\\\\) default\\\\(none\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp for reduction\\\\(inscan,\\\\\\+:r\\\\) nowait\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp scan inclusive\\\\(r\\\\)\" 1 \"original\" } }"}]}