{"sha": "d71b89ca60e6546aaef903c22c6459b592f934d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcxYjg5Y2E2MGU2NTQ2YWFlZjkwM2MyMmM2NDU5YjU5MmY5MzRkNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-07-14T10:12:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-07-14T10:12:17Z"}, "message": "gfortran.h (MAX_ERROR_MESSAGE): Remove.\n\n\t* gfortran.h (MAX_ERROR_MESSAGE): Remove.\n\t(gfc_error_buf): Add allocated and index fields.  Change message\n\tfield from array to a pointer.\n\t* error.c (use_warning_buffer, error_ptr, warning_ptr): Remove.\n\t(cur_error_buffer): New variable.\n\t(error_char): Use cur_error_buffer->{message,index} instead of\n\t{warning,error}_{buffer.message,ptr}.  Reallocate message buffer\n\tif too small.\n\t(gfc_warning, gfc_notify_std, gfc_error, gfc_error_now): Setup\n\tcur_error_buffer and its index rather than {warning,error}_ptr\n\tand use_warning_buffer.\n\t(gfc_warning_check, gfc_error_check): Don't print anything if\n\tmessage is NULL.\n\t(gfc_push_error): Allocate saved message with xstrdup.\n\t(gfc_pop_error): Free saved message with gfc_free.\n\t(gfc_free_error): New function.\n\t* primary.c (match_complex_constant): Call gfc_free_error if\n\tgfc_pop_error will not be called.\n\t* match.c (gfc_match_st_function): Likewise.\n\n\t* gfortran.dg/g77/cpp6.f: New test.\n\nFrom-SVN: r102015", "tree": {"sha": "c2963bb336cabb4f3f780c2faf9a7041c131dbc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2963bb336cabb4f3f780c2faf9a7041c131dbc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d71b89ca60e6546aaef903c22c6459b592f934d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71b89ca60e6546aaef903c22c6459b592f934d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d71b89ca60e6546aaef903c22c6459b592f934d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71b89ca60e6546aaef903c22c6459b592f934d4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cb1119b785be0b910b6c7a9e2ee1f0338badf579", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb1119b785be0b910b6c7a9e2ee1f0338badf579", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb1119b785be0b910b6c7a9e2ee1f0338badf579"}], "stats": {"total": 146, "additions": 103, "deletions": 43}, "files": [{"sha": "8fd316abb0f22dd87a010921f27dea5a8226b632", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71b89ca60e6546aaef903c22c6459b592f934d4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71b89ca60e6546aaef903c22c6459b592f934d4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d71b89ca60e6546aaef903c22c6459b592f934d4", "patch": "@@ -1,5 +1,25 @@\n 2005-07-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gfortran.h (MAX_ERROR_MESSAGE): Remove.\n+\t(gfc_error_buf): Add allocated and index fields.  Change message\n+\tfield from array to a pointer.\n+\t* error.c (use_warning_buffer, error_ptr, warning_ptr): Remove.\n+\t(cur_error_buffer): New variable.\n+\t(error_char): Use cur_error_buffer->{message,index} instead of\n+\t{warning,error}_{buffer.message,ptr}.  Reallocate message buffer\n+\tif too small.\n+\t(gfc_warning, gfc_notify_std, gfc_error, gfc_error_now): Setup\n+\tcur_error_buffer and its index rather than {warning,error}_ptr\n+\tand use_warning_buffer.\n+\t(gfc_warning_check, gfc_error_check): Don't print anything if\n+\tmessage is NULL.\n+\t(gfc_push_error): Allocate saved message with xstrdup.\n+\t(gfc_pop_error): Free saved message with gfc_free.\n+\t(gfc_free_error): New function.\n+\t* primary.c (match_complex_constant): Call gfc_free_error if\n+\tgfc_pop_error will not be called.\n+\t* match.c (gfc_match_st_function): Likewise.\n+\n \tPR fortran/22417\n \t* scanner.c (preprocessor_line): Don't treat flag 3 as the start of a new\n \tfile.  Fix file left but not entered warning."}, {"sha": "009419a0979614c48e73c930437ada7eaf88716e", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 48, "deletions": 39, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71b89ca60e6546aaef903c22c6459b592f934d4/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71b89ca60e6546aaef903c22c6459b592f934d4/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=d71b89ca60e6546aaef903c22c6459b592f934d4", "patch": "@@ -33,12 +33,9 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n \n int gfc_suppress_error = 0;\n \n-static int terminal_width, buffer_flag, errors,\n-  use_warning_buffer, warnings;\n+static int terminal_width, buffer_flag, errors, warnings;\n \n-static char *error_ptr, *warning_ptr;\n-\n-static gfc_error_buf error_buffer, warning_buffer;\n+static gfc_error_buf error_buffer, warning_buffer, *cur_error_buffer;\n \n \n /* Per-file error initialization.  */\n@@ -70,30 +67,33 @@ error_char (char c)\n {\n   if (buffer_flag)\n     {\n-      if (use_warning_buffer)\n+      if (cur_error_buffer->index >= cur_error_buffer->allocated)\n \t{\n-\t  *warning_ptr++ = c;\n-\t  if (warning_ptr - warning_buffer.message >= MAX_ERROR_MESSAGE)\n-\t    gfc_internal_error (\"error_char(): Warning buffer overflow\");\n-\t}\n-      else\n-\t{\n-\t  *error_ptr++ = c;\n-\t  if (error_ptr - error_buffer.message >= MAX_ERROR_MESSAGE)\n-\t    gfc_internal_error (\"error_char(): Error buffer overflow\");\n+\t  cur_error_buffer->allocated =\n+\t    cur_error_buffer->allocated\n+\t    ? cur_error_buffer->allocated * 2 : 1000;\n+\t  cur_error_buffer->message\n+\t    = xrealloc (cur_error_buffer->message,\n+\t\t\tcur_error_buffer->allocated);\n \t}\n+      cur_error_buffer->message[cur_error_buffer->index++] = c;\n     }\n   else\n     {\n       if (c != 0)\n \t{\n \t  /* We build up complete lines before handing things\n \t     over to the library in order to speed up error printing.  */\n-\t  static char line[MAX_ERROR_MESSAGE + 1];\n-\t  static int index = 0;\n+\t  static char *line;\n+\t  static size_t allocated = 0, index = 0;\n \n+\t  if (index + 1 >= allocated)\n+\t    {\n+\t      allocated = allocated ? allocated * 2 : 1000;\n+\t      line = xrealloc (line, allocated);\n+\t    }\n \t  line[index++] = c;\n-\t  if (c == '\\n' || index == MAX_ERROR_MESSAGE)\n+\t  if (c == '\\n')\n \t    {\n \t      line[index] = '\\0';\n \t      fputs (line, stderr);\n@@ -470,8 +470,8 @@ gfc_warning (const char *format, ...)\n     return;\n \n   warning_buffer.flag = 1;\n-  warning_ptr = warning_buffer.message;\n-  use_warning_buffer = 1;\n+  warning_buffer.index = 0;\n+  cur_error_buffer = &warning_buffer;\n \n   va_start (argp, format);\n   if (buffer_flag == 0)\n@@ -503,18 +503,9 @@ gfc_notify_std (int std, const char *format, ...)\n   if (gfc_suppress_error)\n     return warning ? SUCCESS : FAILURE;\n   \n-  if (warning)\n-    {\n-      warning_buffer.flag = 1;\n-      warning_ptr = warning_buffer.message;\n-      use_warning_buffer = 1;\n-    }\n-  else\n-    {\n-      error_buffer.flag = 1;\n-      error_ptr = error_buffer.message;\n-      use_warning_buffer = 0;\n-    }\n+  cur_error_buffer = warning ? &warning_buffer : &error_buffer;\n+  cur_error_buffer->flag = 1;\n+  cur_error_buffer->index = 0;\n \n   if (buffer_flag == 0)\n     {\n@@ -577,7 +568,8 @@ gfc_warning_check (void)\n   if (warning_buffer.flag)\n     {\n       warnings++;\n-      fputs (warning_buffer.message, stderr);\n+      if (warning_buffer.message != NULL)\n+\tfputs (warning_buffer.message, stderr);\n       warning_buffer.flag = 0;\n     }\n }\n@@ -594,8 +586,8 @@ gfc_error (const char *format, ...)\n     return;\n \n   error_buffer.flag = 1;\n-  error_ptr = error_buffer.message;\n-  use_warning_buffer = 0;\n+  error_buffer.index = 0;\n+  cur_error_buffer = &error_buffer;\n \n   va_start (argp, format);\n   if (buffer_flag == 0)\n@@ -616,7 +608,8 @@ gfc_error_now (const char *format, ...)\n   int i;\n \n   error_buffer.flag = 1;\n-  error_ptr = error_buffer.message;\n+  error_buffer.index = 0;\n+  cur_error_buffer = &error_buffer;\n \n   i = buffer_flag;\n   buffer_flag = 0;\n@@ -691,7 +684,8 @@ gfc_error_check (void)\n   if (error_buffer.flag)\n     {\n       errors++;\n-      fputs (error_buffer.message, stderr);\n+      if (error_buffer.message != NULL)\n+\tfputs (error_buffer.message, stderr);\n       error_buffer.flag = 0;\n     }\n \n@@ -706,7 +700,7 @@ gfc_push_error (gfc_error_buf * err)\n {\n   err->flag = error_buffer.flag;\n   if (error_buffer.flag)\n-    strcpy (err->message, error_buffer.message);\n+    err->message = xstrdup (error_buffer.message);\n \n   error_buffer.flag = 0;\n }\n@@ -719,7 +713,22 @@ gfc_pop_error (gfc_error_buf * err)\n {\n   error_buffer.flag = err->flag;\n   if (error_buffer.flag)\n-    strcpy (error_buffer.message, err->message);\n+    {\n+      size_t len = strlen (err->message) + 1;\n+      gcc_assert (len <= error_buffer.allocated);\n+      memcpy (error_buffer.message, err->message, len);\n+      gfc_free (err->message);\n+    }\n+}\n+\n+\n+/* Free a pushed error state, but keep the current error state.  */\n+\n+void\n+gfc_free_error (gfc_error_buf * err)\n+{\n+  if (err->flag)\n+    gfc_free (err->message);\n }\n \n "}, {"sha": "dea08c3e20de9d5310a6f59fec128f512b330ee1", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71b89ca60e6546aaef903c22c6459b592f934d4/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71b89ca60e6546aaef903c22c6459b592f934d4/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=d71b89ca60e6546aaef903c22c6459b592f934d4", "patch": "@@ -58,7 +58,6 @@ char *alloca ();\n #define GFC_MAX_LINE 132\t/* Characters beyond this are not seen.  */\n #define GFC_MAX_DIMENSIONS 7\t/* Maximum dimensions in an array.  */\n #define GFC_LETTERS 26\t\t/* Number of letters in the alphabet.  */\n-#define MAX_ERROR_MESSAGE 1000\t/* Maximum length of an error message.  */\n \n #define free(x) Use_gfc_free_instead_of_free()\n #define gfc_is_whitespace(c) ((c==' ') || (c=='\\t'))\n@@ -1548,7 +1547,8 @@ const char * gfc_get_string (const char *, ...) ATTRIBUTE_PRINTF_1;\n typedef struct gfc_error_buf\n {\n   int flag;\n-  char message[MAX_ERROR_MESSAGE];\n+  size_t allocated, index;\n+  char *message;\n } gfc_error_buf;\n \n void gfc_error_init_1 (void);\n@@ -1574,6 +1574,7 @@ try gfc_notify_std (int, const char *, ...) ATTRIBUTE_GCC_GFC(2,3);\n \n void gfc_push_error (gfc_error_buf *);\n void gfc_pop_error (gfc_error_buf *);\n+void gfc_free_error (gfc_error_buf *);\n \n void gfc_status (const char *, ...) ATTRIBUTE_PRINTF_1;\n void gfc_status_char (char);"}, {"sha": "7f249eecf10e01df60dba94b7b79515fcd5a6963", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71b89ca60e6546aaef903c22c6459b592f934d4/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71b89ca60e6546aaef903c22c6459b592f934d4/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=d71b89ca60e6546aaef903c22c6459b592f934d4", "patch": "@@ -2650,6 +2650,8 @@ gfc_match_st_function (void)\n   m = gfc_match (\" = %e%t\", &expr);\n   if (m == MATCH_NO)\n     goto undo_error;\n+\n+  gfc_free_error (&old_error);\n   if (m == MATCH_ERROR)\n     return m;\n "}, {"sha": "888caffa5c281748b402eeefa2ceea9457f68e67", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71b89ca60e6546aaef903c22c6459b592f934d4/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71b89ca60e6546aaef903c22c6459b592f934d4/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=d71b89ca60e6546aaef903c22c6459b592f934d4", "patch": "@@ -1117,7 +1117,10 @@ match_complex_constant (gfc_expr ** result)\n \n   m = match_complex_part (&real);\n   if (m == MATCH_NO)\n-    goto cleanup;\n+    {\n+      gfc_free_error (&old_error);\n+      goto cleanup;\n+    }\n \n   if (gfc_match_char (',') == MATCH_NO)\n     {\n@@ -1132,7 +1135,10 @@ match_complex_constant (gfc_expr ** result)\n      sort. These sort of lists are matched prior to coming here.  */\n \n   if (m == MATCH_ERROR)\n-    goto cleanup;\n+    {\n+      gfc_free_error (&old_error);\n+      goto cleanup;\n+    }\n   gfc_pop_error (&old_error);\n \n   m = match_complex_part (&imag);"}, {"sha": "334e96e46385cabef4161288a45174506393ce0f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71b89ca60e6546aaef903c22c6459b592f934d4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71b89ca60e6546aaef903c22c6459b592f934d4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d71b89ca60e6546aaef903c22c6459b592f934d4", "patch": "@@ -1,5 +1,7 @@\n 2005-07-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gfortran.dg/g77/cpp6.f: New test.\n+\n \tPR fortran/22417\n \t* gfortran.dg/g77/cpp5.F: New test.\n \t* gfortran.dg/g77/cpp5.h: New file."}, {"sha": "5f973c15b2b7f67148074749ffed969891f9acec", "filename": "gcc/testsuite/gfortran.dg/g77/cpp6.f", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71b89ca60e6546aaef903c22c6459b592f934d4/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcpp6.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71b89ca60e6546aaef903c22c6459b592f934d4/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcpp6.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcpp6.f?ref=d71b89ca60e6546aaef903c22c6459b592f934d4", "patch": "@@ -0,0 +1,20 @@\n+# 1 \"test.F\"\n+# 1 \"<built-in>\"\n+# 1 \"<command line>\"\n+# 1 \"test.F\"\n+\t! { dg-do compile }\n+\n+# 1 \"A234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\" 1\n+\n+# 1 \"B234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\" 1\n+\n+# 1 \"C234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\" 1\n+\n+# 1 \"D234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\" 1\n+\tPARAMETER (I=1)\n+\n+# 2 \"C234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\" 2\n+# 2 \"B234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\" 2\n+# 2 \"A234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\" 2\n+# 3 \"test.F\" 2\n+\tEND"}]}