{"sha": "638ba8121dd2042469c4b0051539c6bb8d3a5845", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM4YmE4MTIxZGQyMDQyNDY5YzRiMDA1MTUzOWM2YmI4ZDNhNTg0NQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2019-10-18T12:46:01Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2019-10-18T12:46:01Z"}, "message": "[C++ PATCH] anon type names\n\nhttps://gcc.gnu.org/ml/gcc-patches/2019-10/msg01354.html\nI noticed that we use a bitfield flag to note types with names for linkage\npurposes:\n  typedef struct {} foo;\nbut, we can infer this by comparing TYPE_STUB_DECL and TYPE_DECL of the\nmain variant.  It's only checked in two places -- the C++ parser\nand the objective C++ encoder.  \n\t* cp-tree.h (struct lang_type): Remove was_anonymous.\n\t(TYPE_WAS_UNNAMED): Implement by checking TYPE_DECL &\n\tTYPE_STUB_DECL.\n\t* decl.c (name_unnamed_type): Don't set TYPE_WAS_UNNAMED.\n\nFrom-SVN: r277155", "tree": {"sha": "35bd626800d5cc9548b6d6bddd2ca2dfdbb19c0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35bd626800d5cc9548b6d6bddd2ca2dfdbb19c0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/638ba8121dd2042469c4b0051539c6bb8d3a5845", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/638ba8121dd2042469c4b0051539c6bb8d3a5845", "html_url": "https://github.com/Rust-GCC/gccrs/commit/638ba8121dd2042469c4b0051539c6bb8d3a5845", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/638ba8121dd2042469c4b0051539c6bb8d3a5845/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7c929c9c611546f0e77753e90b652f7607d06484", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c929c9c611546f0e77753e90b652f7607d06484", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c929c9c611546f0e77753e90b652f7607d06484"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "ba533d5fb95b55fa9ba0690a27933268edd1a07e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/638ba8121dd2042469c4b0051539c6bb8d3a5845/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/638ba8121dd2042469c4b0051539c6bb8d3a5845/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=638ba8121dd2042469c4b0051539c6bb8d3a5845", "patch": "@@ -1,3 +1,10 @@\n+2019-10-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (struct lang_type): Remove was_anonymous.\n+\t(TYPE_WAS_UNNAMED): Implement by checking TYPE_DECL &\n+\tTYPE_STUB_DECL.\n+\t* decl.c (name_unnamed_type): Don't set TYPE_WAS_UNNAMED.\n+\n 2019-10-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* decl.c (grokfndecl): Remove redundant use of in_system_header_at."}, {"sha": "8c11ac5dd356bf17eebc2d08dc5ab1b95d2c89b7", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/638ba8121dd2042469c4b0051539c6bb8d3a5845/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/638ba8121dd2042469c4b0051539c6bb8d3a5845/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=638ba8121dd2042469c4b0051539c6bb8d3a5845", "patch": "@@ -2152,25 +2152,24 @@ struct GTY(()) lang_type {\n   unsigned fields_readonly : 1;\n   unsigned ptrmemfunc_flag : 1;\n \n-  unsigned was_anonymous : 1;\n   unsigned lazy_default_ctor : 1;\n   unsigned lazy_copy_ctor : 1;\n   unsigned lazy_copy_assign : 1;\n   unsigned lazy_destructor : 1;\n   unsigned has_const_copy_ctor : 1;\n   unsigned has_complex_copy_ctor : 1;\n   unsigned has_complex_copy_assign : 1;\n-\n   unsigned non_aggregate : 1;\n+\n   unsigned has_complex_dflt : 1;\n   unsigned has_list_ctor : 1;\n   unsigned non_std_layout : 1;\n   unsigned is_literal : 1;\n   unsigned lazy_move_ctor : 1;\n   unsigned lazy_move_assign : 1;\n   unsigned has_complex_move_ctor : 1;\n-\n   unsigned has_complex_move_assign : 1;\n+\n   unsigned has_constexpr_ctor : 1;\n   unsigned unique_obj_representations : 1;\n   unsigned unique_obj_representations_set : 1;\n@@ -2182,7 +2181,7 @@ struct GTY(()) lang_type {\n   /* There are some bits left to fill out a 32-bit word.  Keep track\n      of this by updating the size of this bitfield whenever you add or\n      remove a flag.  */\n-  unsigned dummy : 4;\n+  unsigned dummy : 5;\n \n   tree primary_base;\n   vec<tree_pair_s, va_gc> *vcall_indices;\n@@ -4585,8 +4584,12 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n \n /* Define fields and accessors for nodes representing declared names.  */\n \n-/* Nonzero if TYPE is an unnamed class with a typedef for linkage purposes.  */\n-#define TYPE_WAS_UNNAMED(NODE) (LANG_TYPE_CLASS_CHECK (NODE)->was_anonymous)\n+/* True if TYPE is an unnamed structured type with a typedef for\n+   linkage purposes.  In that case TYPE_NAME and TYPE_STUB_DECL of the\n+   MAIN-VARIANT are different. */\n+#define TYPE_WAS_UNNAMED(NODE)\t\t\t\t\\\n+  (TYPE_NAME (TYPE_MAIN_VARIANT (NODE))\t\t\t\\\n+   != TYPE_STUB_DECL (TYPE_MAIN_VARIANT (NODE)))\n \n /* C++: all of these are overloaded!  These apply only to TYPE_DECLs.  */\n "}, {"sha": "52f1f020dc3594fabb044bb5fc112933961f05a0", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/638ba8121dd2042469c4b0051539c6bb8d3a5845/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/638ba8121dd2042469c4b0051539c6bb8d3a5845/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=638ba8121dd2042469c4b0051539c6bb8d3a5845", "patch": "@@ -10441,9 +10441,6 @@ name_unnamed_type (tree type, tree decl)\n       /*debug_hooks->set_name (t, decl);*/\n       TYPE_NAME (t) = decl;\n \n-  if (TYPE_LANG_SPECIFIC (type))\n-    TYPE_WAS_UNNAMED (type) = 1;\n-\n   /* If this is a typedef within a template class, the nested\n      type is a (non-primary) template.  The name for the\n      template needs updating as well.  */"}]}