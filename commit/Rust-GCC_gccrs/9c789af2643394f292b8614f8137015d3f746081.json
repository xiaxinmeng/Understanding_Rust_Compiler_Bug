{"sha": "9c789af2643394f292b8614f8137015d3f746081", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM3ODlhZjI2NDMzOTRmMjkyYjg2MTRmODEzNzAxNWQzZjc0NjA4MQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-04-24T23:23:33Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-04-24T23:23:33Z"}, "message": "tree-ssa-uncprop.c (equiv_stack): Change the type o VEC(tree,heap).\n\n\t* tree-ssa-uncprop.c (equiv_stack): Change the type o\n\tVEC(tree,heap).\n\t(tree_ssa_uncprop, uncprop_finalize_block,\n\tuncprop_initialize_block): Update uses of equiv_stack.\n\nFrom-SVN: r98684", "tree": {"sha": "9ddf04610f35db2f9c208cf9899a7747d6938978", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ddf04610f35db2f9c208cf9899a7747d6938978"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c789af2643394f292b8614f8137015d3f746081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c789af2643394f292b8614f8137015d3f746081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c789af2643394f292b8614f8137015d3f746081", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c789af2643394f292b8614f8137015d3f746081/comments", "author": null, "committer": null, "parents": [{"sha": "e180079e8479b5cb499cbc9e2823e0a12aad4702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e180079e8479b5cb499cbc9e2823e0a12aad4702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e180079e8479b5cb499cbc9e2823e0a12aad4702"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "2b52cb379c7018e8a0e0303c24bf6cb1055d335d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c789af2643394f292b8614f8137015d3f746081/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c789af2643394f292b8614f8137015d3f746081/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c789af2643394f292b8614f8137015d3f746081", "patch": "@@ -1,3 +1,10 @@\n+2005-04-24  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-ssa-uncprop.c (equiv_stack): Change the type o\n+\tVEC(tree,heap).\n+\t(tree_ssa_uncprop, uncprop_finalize_block,\n+\tuncprop_initialize_block): Update uses of equiv_stack.\n+\n 2005-04-24  Richard Henderson  <rth@redhat.com>\n \n \tPR rtl-opt/21163"}, {"sha": "9f06e38f3c7f9d0a9d3543ff551d24e16d792fb0", "filename": "gcc/tree-ssa-uncprop.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c789af2643394f292b8614f8137015d3f746081/gcc%2Ftree-ssa-uncprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c789af2643394f292b8614f8137015d3f746081/gcc%2Ftree-ssa-uncprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uncprop.c?ref=9c789af2643394f292b8614f8137015d3f746081", "patch": "@@ -286,7 +286,7 @@ associate_equivalences_with_edges (void)\n    leading to this block.  If no such edge equivalency exists, then we\n    record NULL.  These equivalences are live until we leave the dominator\n    subtree rooted at the block where we record the equivalency.  */\n-static varray_type equiv_stack;\n+static VEC(tree,heap) *equiv_stack;\n \n /* Global hash table implementing a mapping from invariant values\n    to a list of SSA_NAMEs which have the same value.  We might be\n@@ -380,7 +380,7 @@ tree_ssa_uncprop (void)\n \n   /* Create our global data structures.  */\n   equiv = htab_create (1024, equiv_hash, equiv_eq, free);\n-  VARRAY_TREE_INIT (equiv_stack, 2, \"Block equiv stack\");\n+  equiv_stack = VEC_alloc (tree, heap, 2);\n \n   /* We're going to do a dominator walk, so ensure that we have\n      dominance information.  */\n@@ -410,10 +410,11 @@ tree_ssa_uncprop (void)\n   /* Finalize and clean up.  */\n   fini_walk_dominator_tree (&walk_data);\n \n-  /* EQUIV_STACK should already be empty at this point, so we just need\n-     to empty elements out of the hash table and cleanup the AUX field\n-     on the edges.  */\n+  /* EQUIV_STACK should already be empty at this point, so we just\n+     need to empty elements out of the hash table, free EQUIV_STACK,\n+     and cleanup the AUX field on the edges.  */\n   htab_delete (equiv);\n+  VEC_free (tree, heap, equiv_stack);\n   FOR_EACH_BB (bb)\n     {\n       edge e;\n@@ -440,10 +441,8 @@ static void\n uncprop_finalize_block (struct dom_walk_data *walk_data ATTRIBUTE_UNUSED,\n \t\t\tbasic_block bb ATTRIBUTE_UNUSED)\n {\n-  tree value = VARRAY_TOP_TREE (equiv_stack);\n-\n   /* Pop the topmost value off the equiv stack.  */\n-  VARRAY_POP (equiv_stack);\n+  tree value = VEC_pop (tree, equiv_stack);\n \n   /* If that value was non-null, then pop the topmost equivalency off\n      its equivalency stack.  */\n@@ -581,13 +580,13 @@ uncprop_initialize_block (struct dom_walk_data *walk_data ATTRIBUTE_UNUSED,\n \t  struct edge_equivalency *equiv = e->aux;\n \n \t  record_equiv (equiv->rhs, equiv->lhs);\n-\t  VARRAY_PUSH_TREE (equiv_stack, equiv->rhs);\n+\t  VEC_safe_push (tree, heap, equiv_stack, equiv->rhs);\n \t  recorded = true;\n \t}\n     }\n \n   if (!recorded)\n-    VARRAY_PUSH_TREE (equiv_stack, NULL_TREE);\n+    VEC_safe_push (tree, heap, equiv_stack, NULL_TREE);\n }\n \n static bool"}]}