{"sha": "97c53806a296af266da77377d7258d52712ba648", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdjNTM4MDZhMjk2YWYyNjZkYTc3Mzc3ZDcyNThkNTI3MTJiYTY0OA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2016-05-20T13:19:59Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2016-05-20T13:19:59Z"}, "message": "cfgloop.h (expected_loop_iterations_unbounded, [...]): Unconstify.\n\n\n\t* cfgloop.h (expected_loop_iterations_unbounded,\n\texpected_loop_iterations): Unconstify.\n\t* cfgloopanal.c (expected_loop_iterations_unbounded): Sanity check the\n\tprofile with known upper bound; return 3 when profile is absent.\n\t(expected_loop_iterations): Update.\n\nFrom-SVN: r236511", "tree": {"sha": "5a59e9c33670e77c59db2200ae49b413088be4c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a59e9c33670e77c59db2200ae49b413088be4c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97c53806a296af266da77377d7258d52712ba648", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97c53806a296af266da77377d7258d52712ba648", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97c53806a296af266da77377d7258d52712ba648", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97c53806a296af266da77377d7258d52712ba648/comments", "author": null, "committer": null, "parents": [{"sha": "216e83748d52d0bb056dd6b46ea74a14b08c7639", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/216e83748d52d0bb056dd6b46ea74a14b08c7639", "html_url": "https://github.com/Rust-GCC/gccrs/commit/216e83748d52d0bb056dd6b46ea74a14b08c7639"}], "stats": {"total": 47, "additions": 35, "deletions": 12}, "files": [{"sha": "7f5f87f293ff765b056a6c7b3a6f5ea0e4a52366", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c53806a296af266da77377d7258d52712ba648/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c53806a296af266da77377d7258d52712ba648/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97c53806a296af266da77377d7258d52712ba648", "patch": "@@ -1,3 +1,11 @@\n+2016-05-20  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* cfgloop.h (expected_loop_iterations_unbounded,\n+\texpected_loop_iterations): Unconstify.\n+\t* cfgloopanal.c (expected_loop_iterations_unbounded): Sanity check the\n+\tprofile with known upper bound; return 3 when profile is absent.\n+\t(expected_loop_iterations): Update.\n+\n 2016-05-20  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* loop-doloop.c (doloop_optimize): Use get_estimated_loop_iterations_int"}, {"sha": "173fda84ba4d752c46667075fcd4a8d2502bc410", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c53806a296af266da77377d7258d52712ba648/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c53806a296af266da77377d7258d52712ba648/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=97c53806a296af266da77377d7258d52712ba648", "patch": "@@ -316,8 +316,8 @@ extern void verify_loop_structure (void);\n \n /* Loop analysis.  */\n extern bool just_once_each_iteration_p (const struct loop *, const_basic_block);\n-gcov_type expected_loop_iterations_unbounded (const struct loop *);\n-extern unsigned expected_loop_iterations (const struct loop *);\n+gcov_type expected_loop_iterations_unbounded (struct loop *);\n+extern unsigned expected_loop_iterations (struct loop *);\n extern rtx doloop_condition_get (rtx);\n \n void mark_loop_for_removal (loop_p);"}, {"sha": "938ac43879a530a61b7b077f774ec2fb0755958b", "filename": "gcc/cfgloopanal.c", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c53806a296af266da77377d7258d52712ba648/gcc%2Fcfgloopanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c53806a296af266da77377d7258d52712ba648/gcc%2Fcfgloopanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopanal.c?ref=97c53806a296af266da77377d7258d52712ba648", "patch": "@@ -231,14 +231,20 @@ average_num_loop_insns (const struct loop *loop)\n    value.  */\n \n gcov_type\n-expected_loop_iterations_unbounded (const struct loop *loop)\n+expected_loop_iterations_unbounded (struct loop *loop)\n {\n   edge e;\n   edge_iterator ei;\n-\n-  if (loop->latch->count || loop->header->count)\n+  gcov_type expected;\n+  \n+\n+  /* Average loop rolls about 3 times. If we have no profile at all, it is\n+     best we can do.  */\n+  if (profile_status_for_fn (cfun) == PROFILE_ABSENT)\n+    expected = 3;\n+  else if (loop->latch->count || loop->header->count)\n     {\n-      gcov_type count_in, count_latch, expected;\n+      gcov_type count_in, count_latch;\n \n       count_in = 0;\n       count_latch = 0;\n@@ -253,8 +259,6 @@ expected_loop_iterations_unbounded (const struct loop *loop)\n \texpected = count_latch * 2;\n       else\n \texpected = (count_latch + count_in - 1) / count_in;\n-\n-      return expected;\n     }\n   else\n     {\n@@ -270,17 +274,28 @@ expected_loop_iterations_unbounded (const struct loop *loop)\n \t  freq_in += EDGE_FREQUENCY (e);\n \n       if (freq_in == 0)\n-\treturn freq_latch * 2;\n-\n-      return (freq_latch + freq_in - 1) / freq_in;\n+\t{\n+\t  /* If we have no profile at all, expect 3 iterations.  */\n+\t  if (!freq_latch)\n+\t    expected = 3;\n+\t  else\n+\t    expected = freq_latch * 2;\n+\t}\n+      else\n+        expected = (freq_latch + freq_in - 1) / freq_in;\n     }\n+\n+  HOST_WIDE_INT max = get_max_loop_iterations_int (loop);\n+  if (max != -1 && max < expected)\n+    return max;\n+  return expected;\n }\n \n /* Returns expected number of LOOP iterations.  The returned value is bounded\n    by REG_BR_PROB_BASE.  */\n \n unsigned\n-expected_loop_iterations (const struct loop *loop)\n+expected_loop_iterations (struct loop *loop)\n {\n   gcov_type expected = expected_loop_iterations_unbounded (loop);\n   return (expected > REG_BR_PROB_BASE ? REG_BR_PROB_BASE : expected);"}]}