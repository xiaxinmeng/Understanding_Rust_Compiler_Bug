{"sha": "f7b94dec4876c161d7e97ad0ce19695aa487b04a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdiOTRkZWM0ODc2YzE2MWQ3ZTk3YWQwY2UxOTY5NWFhNDg3YjA0YQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-11-23T12:53:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-11-23T12:53:39Z"}, "message": "re PR tree-optimization/88149 (ICE in vect_transform_stmt since r265959)\n\n2018-11-23  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/88149\n\t* tree-vect-slp.c (vect_slp_analyze_node_operations): Detect\n\tthe case where there are two different def types for the\n\tsame operand at different operand position in the same stmt.\n\n\t* g++.dg/torture/pr88149.C: New testcase.\n\nFrom-SVN: r266406", "tree": {"sha": "b0dcf998453b7e2fae018cf158d70450d7387d83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0dcf998453b7e2fae018cf158d70450d7387d83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7b94dec4876c161d7e97ad0ce19695aa487b04a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7b94dec4876c161d7e97ad0ce19695aa487b04a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7b94dec4876c161d7e97ad0ce19695aa487b04a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7b94dec4876c161d7e97ad0ce19695aa487b04a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff03f2d18df99b3ca637b81c35e516bbf5454687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff03f2d18df99b3ca637b81c35e516bbf5454687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff03f2d18df99b3ca637b81c35e516bbf5454687"}], "stats": {"total": 115, "additions": 107, "deletions": 8}, "files": [{"sha": "7a2ee245c39d0aee96231bc6699f68dd225f601d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7b94dec4876c161d7e97ad0ce19695aa487b04a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7b94dec4876c161d7e97ad0ce19695aa487b04a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7b94dec4876c161d7e97ad0ce19695aa487b04a", "patch": "@@ -1,3 +1,10 @@\n+2018-11-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88149\n+\t* tree-vect-slp.c (vect_slp_analyze_node_operations): Detect\n+\tthe case where there are two different def types for the\n+\tsame operand at different operand position in the same stmt.\n+\n 2018-23-11  Mihail Ionescu  <mihail.ionescu@arm.com>\n \n \t* config/arm/arm.c (arm_expand_compare_and_swap): Simplify and call"}, {"sha": "3652268e82dfd4173ff96ccc94ee24438dfb0878", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7b94dec4876c161d7e97ad0ce19695aa487b04a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7b94dec4876c161d7e97ad0ce19695aa487b04a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f7b94dec4876c161d7e97ad0ce19695aa487b04a", "patch": "@@ -1,3 +1,8 @@\n+2018-11-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88149\n+\t* g++.dg/torture/pr88149.C: New testcase.\n+\n 2018-11-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/86614"}, {"sha": "2700a0917404328f2b7a229a6fb6765c6bbdc62f", "filename": "gcc/testsuite/g++.dg/torture/pr88149.C", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7b94dec4876c161d7e97ad0ce19695aa487b04a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr88149.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7b94dec4876c161d7e97ad0ce19695aa487b04a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr88149.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr88149.C?ref=f7b94dec4876c161d7e97ad0ce19695aa487b04a", "patch": "@@ -0,0 +1,63 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-ftree-vectorize\" }\n+\n+template <typename> struct a;\n+template <typename b> struct a<b *> {\n+  typedef long c;\n+  typedef b &d;\n+};\n+template <typename e> class f {\n+  e ab;\n+  typedef a<e> ac;\n+\n+public:\n+  typename ac::d operator[](typename ac::c o) { return ab[o]; }\n+};\n+template <typename> struct au;\n+template <typename b> au<b> operator+(au<b> o, au<b> p2) {\n+  au<b> ax = o;\n+  ax += p2;\n+  return ax;\n+}\n+template <typename b> au<b> operator-(au<b> o, au<b> p2) {\n+  au<b> ax = o;\n+  ax -= p2;\n+  return ax;\n+}\n+template <typename b> au<b> operator*(au<b>, au<b> &p2) {\n+  au<b> ax;\n+  ax *= p2;\n+  return ax;\n+}\n+template <> struct au<double> {\n+  double p() { return __real__ az; }\n+  double q() { return __imag__ az; }\n+  void operator+=(au o) {\n+    az += o.p();\n+    __imag__ az += o.q();\n+  }\n+  void operator-=(au o) {\n+    az -= o.p();\n+    __imag__ az -= o.q();\n+  }\n+  void operator*=(au &o) {\n+    _Complex bd = o.p();\n+    __imag__ bd = o.q();\n+    az *= bd;\n+  }\n+  _Complex az;\n+};\n+long bm, m;\n+f<au<double> *> g;\n+au<double> h, i, l;\n+void bn() {\n+  au<double> bq;\n+  for (long k; m;) {\n+    au<double> br;\n+    for (long j = 0; j < bm; ++j) {\n+      au<double> n = br * h;\n+      i = l + n;\n+      g[k] = l - bq;\n+    }\n+  }\n+}"}, {"sha": "9e805d07726c8dd0028d94fde7029ed4087de262", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7b94dec4876c161d7e97ad0ce19695aa487b04a/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7b94dec4876c161d7e97ad0ce19695aa487b04a/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=f7b94dec4876c161d7e97ad0ce19695aa487b04a", "patch": "@@ -2557,22 +2557,46 @@ vect_slp_analyze_node_operations (vec_info *vinfo, slp_tree node,\n \t\t\t\t\t   visited, lvisited, cost_vec))\n       return false;\n \n+  /* ???  We have to catch the case late where two first scalar stmts appear\n+     in multiple SLP children with different def type and fail.  Remember\n+     original def types first since SLP_TREE_DEF_TYPE doesn't necessarily\n+     match it when that is vect_internal_def.  */\n+  auto_vec<vect_def_type, 4> dt;\n+  dt.safe_grow (SLP_TREE_CHILDREN (node).length ());\n+  FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), j, child)\n+    dt[j] = STMT_VINFO_DEF_TYPE (SLP_TREE_SCALAR_STMTS (child)[0]);\n+\n   /* Push SLP node def-type to stmt operands.  */\n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), j, child)\n     if (SLP_TREE_DEF_TYPE (child) != vect_internal_def)\n       STMT_VINFO_DEF_TYPE (SLP_TREE_SCALAR_STMTS (child)[0])\n \t= SLP_TREE_DEF_TYPE (child);\n-  bool res = vect_slp_analyze_node_operations_1 (vinfo, node, node_instance,\n-\t\t\t\t\t\t cost_vec);\n-  /* Restore def-types.  */\n+\n+  /* Check everything worked out.  */\n+  bool res = true;\n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), j, child)\n     if (SLP_TREE_DEF_TYPE (child) != vect_internal_def)\n-      STMT_VINFO_DEF_TYPE (SLP_TREE_SCALAR_STMTS (child)[0])\n-\t= vect_internal_def;\n-  if (! res)\n-    return false;\n+      {\n+\tif (STMT_VINFO_DEF_TYPE (SLP_TREE_SCALAR_STMTS (child)[0])\n+\t    != SLP_TREE_DEF_TYPE (child))\n+\t  res = false;\n+      }\n+    else if (STMT_VINFO_DEF_TYPE (SLP_TREE_SCALAR_STMTS (child)[0]) != dt[j])\n+      res = false;\n+  if (!res && dump_enabled_p ())\n+    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t     \"not vectorized: same operand with different \"\n+\t\t     \"def type in stmt.\\n\");\n \n-  return true;\n+  if (res)\n+    res = vect_slp_analyze_node_operations_1 (vinfo, node, node_instance,\n+\t\t\t\t\t      cost_vec);\n+\n+  /* Restore def-types.  */\n+  FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), j, child)\n+    STMT_VINFO_DEF_TYPE (SLP_TREE_SCALAR_STMTS (child)[0]) = dt[j];\n+\n+  return res;\n }\n \n "}]}