{"sha": "2e9effae27bd4227a8d8504ead761e96364e95a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU5ZWZmYWUyN2JkNDIyN2E4ZDg1MDRlYWQ3NjFlOTYzNjRlOTVhOQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-08-09T07:30:04Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-08-09T07:30:04Z"}, "message": "(contains_pointers_p): New function.\n\n(assemble_variable): Use that.\n\nFrom-SVN: r5117", "tree": {"sha": "19fe2d8fbc0f6a455536539cd6ade817b5ee2b18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19fe2d8fbc0f6a455536539cd6ade817b5ee2b18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e9effae27bd4227a8d8504ead761e96364e95a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e9effae27bd4227a8d8504ead761e96364e95a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e9effae27bd4227a8d8504ead761e96364e95a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e9effae27bd4227a8d8504ead761e96364e95a9/comments", "author": null, "committer": null, "parents": [{"sha": "654209e6a1ae75b80ea06103c6fc97ff455ba22e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/654209e6a1ae75b80ea06103c6fc97ff455ba22e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/654209e6a1ae75b80ea06103c6fc97ff455ba22e"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "75f620ac479e496b723e51eadd3cc459e998f911", "filename": "gcc/varasm.c", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9effae27bd4227a8d8504ead761e96364e95a9/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9effae27bd4227a8d8504ead761e96364e95a9/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=2e9effae27bd4227a8d8504ead761e96364e95a9", "patch": "@@ -89,6 +89,7 @@ extern FILE *asm_out_file;\n static char *compare_constant_1 ();\n static void record_constant_1 ();\n static void output_constant_def_contents ();\n+static int contains_pointers_p ();\n \n void output_constant_pool ();\n void assemble_name ();\n@@ -923,7 +924,9 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n #endif\n \n   /* Output any data that we will need to use the address of.  */\n-  if (DECL_INITIAL (decl))\n+  if (DECL_INITIAL (decl) == error_mark_node)\n+    reloc = contains_pointers_p (TREE_TYPE (decl));\n+  else if (DECL_INITIAL (decl))\n     reloc = output_addressed_constants (DECL_INITIAL (decl));\n \n   /* Switch to the proper section for this data.  */\n@@ -1052,6 +1055,42 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n #endif\n }\n \n+/* Return 1 if type TYPE contains any pointers.  */\n+\n+static int\n+contains_pointers_p (type)\n+     tree type;\n+{\n+  switch (TREE_CODE (type))\n+    {\n+    case POINTER_TYPE:\n+    case REFERENCE_TYPE:\n+      /* I'm not sure whether OFFSET_TYPE needs this treatment,\n+\t so I'll play safe and return 1.  */\n+    case OFFSET_TYPE:\n+      return 1;\n+\n+    case RECORD_TYPE:\n+    case UNION_TYPE:\n+    case QUAL_UNION_TYPE:\n+      {\n+\ttree fields;\n+\t/* For a type that has fields, see if the fields have pointers.  */\n+\tfor (fields = TYPE_FIELDS (type); fields; fields = TREE_CHAIN (fields))\n+\t  if (contains_pointers_p (TREE_TYPE (fields)))\n+\t    return 1;\n+\treturn 0;\n+      }\n+\n+    case ARRAY_TYPE:\n+      /* An array type contains pointers if its element type does.  */\n+      return contains_pointers_p (TREE_TYPE (type));\n+\n+    default:\n+      return 0;\n+    }\n+}\n+\n /* Output something to declare an external symbol to the assembler.\n    (Most assemblers don't need this, so we normally output nothing.)\n    Do nothing if DECL is not external.  */"}]}