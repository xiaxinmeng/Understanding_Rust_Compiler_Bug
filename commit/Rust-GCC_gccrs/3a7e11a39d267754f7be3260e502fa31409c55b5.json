{"sha": "3a7e11a39d267754f7be3260e502fa31409c55b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E3ZTExYTM5ZDI2Nzc1NGY3YmUzMjYwZTUwMmZhMzE0MDljNTViNQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-07-19T01:32:09Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-07-19T01:32:09Z"}, "message": "pa.md: Delete the two remaining define_peephole patterns.\n\n\t* config/pa/pa.md: Delete the two remaining define_peephole\n\tpatterns.\n\nFrom-SVN: r84908", "tree": {"sha": "881197d39982349a251963ba1038e47381fd06ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/881197d39982349a251963ba1038e47381fd06ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a7e11a39d267754f7be3260e502fa31409c55b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a7e11a39d267754f7be3260e502fa31409c55b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a7e11a39d267754f7be3260e502fa31409c55b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a7e11a39d267754f7be3260e502fa31409c55b5/comments", "author": null, "committer": null, "parents": [{"sha": "11d6a9744934ba202f5f85a4b88f03800da4968f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11d6a9744934ba202f5f85a4b88f03800da4968f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11d6a9744934ba202f5f85a4b88f03800da4968f"}], "stats": {"total": 93, "additions": 11, "deletions": 82}, "files": [{"sha": "05dedd4171538023e5b63d615fdd6a87ed1be8b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a7e11a39d267754f7be3260e502fa31409c55b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a7e11a39d267754f7be3260e502fa31409c55b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a7e11a39d267754f7be3260e502fa31409c55b5", "patch": "@@ -1,3 +1,8 @@\n+2004-07-18  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* config/pa/pa.md: Delete the two remaining define_peephole\n+\tpatterns.\n+\n 2004-07-10  Steven Bosscher  <stevenb@suse.de>\n \t    Joseph S. Myers  <jsm@polyomino.org.uk>\n \n@@ -26,7 +31,7 @@\n 2004-07-17  Sebastian Pop  <pop@cri.ensmp.fr>\n \n \t* cfgloop.c (flow_loop_nested_p): Fix comment.\n-\t\n+\n 2004-07-17  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/16115\n@@ -254,7 +259,7 @@\n \t* tree-ssa-ccp.c (get_rhs, set_rhs): Likewise.\n \t* tree-ssa-operands.c (get_expr_operands): Likewise.\n \t* tree-tailcall.c (find_tail_calls): Likewise.\n-\t\n+\n \t* calls.c (expand_call): Reset old_stack_allocated after\n \tcalling emit_stack_restore.\n \n@@ -291,7 +296,7 @@\n \n \t* Makefile.in (tree-pretty-print.o): Depend on tree-chrec.h.\n \t* tree-pretty-print.c: Include tree-chrec.h.\n-\t(dump_generic_node): Pretty print SCEV_KNOWN, SCEV_NOT_KNOWN \n+\t(dump_generic_node): Pretty print SCEV_KNOWN, SCEV_NOT_KNOWN\n \tand POLYNOMIAL_CHREC nodes.\n \n 2004-07-16  Steve Ellcey  <sje@cup.hp.com>\n@@ -419,14 +424,14 @@\n \n 2004-07-15  Roman Zippel  <zippel@linux-m68k.org>\n \n-\t* config/m68k/m68k.c (output_move_qimode): Abort on an attempt to \n+\t* config/m68k/m68k.c (output_move_qimode): Abort on an attempt to\n \tgenerate code which is generated by pushqi1 now\n \t* config/m68k/m68k.h (MOVE_BY_PIECES_P): Remove.\n \n 2004-07-15  Roman Zippel  <zippel@linux-m68k.org>\n \n-\t* combine.c (simplify_set): match the mode of the constant 0 with \n-\tthe tested operand to match the compare behaviour and the \n+\t* combine.c (simplify_set): match the mode of the constant 0 with\n+\tthe tested operand to match the compare behaviour and the\n \tsimplify_relational_operation() expectation.\n \n 2004-07-15  Aldy Hernandez  <aldyh@redhat.com>"}, {"sha": "074b22ca151374efbf18f89587f8ed2fbfaa573c", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a7e11a39d267754f7be3260e502fa31409c55b5/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a7e11a39d267754f7be3260e502fa31409c55b5/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=3a7e11a39d267754f7be3260e502fa31409c55b5", "patch": "@@ -8959,82 +8959,6 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"4\")])\n \n-;; Clean up turds left by reload.\n-(define_peephole\n-  [(set (match_operand 0 \"move_dest_operand\" \"\")\n-\t(match_operand 1 \"register_operand\" \"fr\"))\n-   (set (match_operand 2 \"register_operand\" \"fr\")\n-\t(match_dup 0))]\n-  \"!TARGET_SOFT_FLOAT\n-   && GET_CODE (operands[0]) == MEM\n-   && ! MEM_VOLATILE_P (operands[0])\n-   && GET_MODE (operands[0]) == GET_MODE (operands[1])\n-   && GET_MODE (operands[0]) == GET_MODE (operands[2])\n-   && GET_MODE (operands[0]) == DFmode\n-   && GET_CODE (operands[1]) == REG\n-   && GET_CODE (operands[2]) == REG\n-   && ! side_effects_p (XEXP (operands[0], 0))\n-   && REGNO_REG_CLASS (REGNO (operands[1]))\n-      == REGNO_REG_CLASS (REGNO (operands[2]))\"\n-  \"*\n-{\n-  rtx xoperands[2];\n-\n-  if (FP_REG_P (operands[1]))\n-    output_asm_insn (output_fp_move_double (operands), operands);\n-  else\n-    output_asm_insn (output_move_double (operands), operands);\n-\n-  if (rtx_equal_p (operands[1], operands[2]))\n-    return \\\"\\\";\n-\n-  xoperands[0] = operands[2];\n-  xoperands[1] = operands[1];\n-      \n-  if (FP_REG_P (xoperands[1]))\n-    output_asm_insn (output_fp_move_double (xoperands), xoperands);\n-  else\n-    output_asm_insn (output_move_double (xoperands), xoperands);\n-\n-  return \\\"\\\";\n-}\")\n-\n-(define_peephole\n-  [(set (match_operand 0 \"register_operand\" \"fr\")\n-\t(match_operand 1 \"move_src_operand\" \"\"))\n-   (set (match_operand 2 \"register_operand\" \"fr\")\n-\t(match_dup 1))]\n-  \"!TARGET_SOFT_FLOAT\n-   && GET_CODE (operands[1]) == MEM\n-   && ! MEM_VOLATILE_P (operands[1])\n-   && GET_MODE (operands[0]) == GET_MODE (operands[1])\n-   && GET_MODE (operands[0]) == GET_MODE (operands[2])\n-   && GET_MODE (operands[0]) == DFmode\n-   && GET_CODE (operands[0]) == REG\n-   && GET_CODE (operands[2]) == REG\n-   && ! side_effects_p (XEXP (operands[1], 0))\n-   && REGNO_REG_CLASS (REGNO (operands[0]))\n-      == REGNO_REG_CLASS (REGNO (operands[2]))\"\n-  \"*\n-{\n-  rtx xoperands[2];\n-\n-  if (FP_REG_P (operands[0]))\n-    output_asm_insn (output_fp_move_double (operands), operands);\n-  else\n-    output_asm_insn (output_move_double (operands), operands);\n-\n-  xoperands[0] = operands[2];\n-  xoperands[1] = operands[0];\n-      \n-  if (FP_REG_P (xoperands[1]))\n-    output_asm_insn (output_fp_move_double (xoperands), xoperands);\n-  else\n-    output_asm_insn (output_move_double (xoperands), xoperands);\n-\n-  return \\\"\\\";\n-}\")\n-\n ;; Flush the I and D cache lines from the start address (operand0)\n ;; to the end address (operand1).  No lines are flushed if the end\n ;; address is less than the start address (unsigned)."}]}