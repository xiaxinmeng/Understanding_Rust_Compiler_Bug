{"sha": "038140ede0175799d17e489b3509c218ee4fc2f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM4MTQwZWRlMDE3NTc5OWQxN2U0ODliMzUwOWMyMThlZTRmYzJmMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-26T11:02:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-26T11:02:31Z"}, "message": "[multiple changes]\n\n2010-10-26  Javier Miranda  <miranda@adacore.com>\n\n\t* einfo.ads, einfo.adb (Is_Overriding_Operation): Removed.\n\t(Set_Is_Overriding_Operation): Removed.\n\t* sem_ch3.adb (Check_Abstract_Overriding): Remove redundant call to\n\tIs_Overriding_Operation.\n\t* exp_ch7.adb (Check_Visibly_Controlled): Remove redundant call to\n\tIs_Overriding_Operation.\n\t* sem_ch7.adb (Declare_Inherited_Private_Subprograms): Remove redundant\n\tcall to Set_Is_Overriding_Operation.\n\t* sem_util.adb (Collect_Primitive_Operations): Replace test on\n\tIs_Overriding_Operation by test on the presence of attribute\n\tOverridden_Operation.\n\t(Original_Corresponding_Operation): Remove redundant call to attribute\n\tIs_Overriding_Operation.\n\t* sem_ch6.adb (Analyze_Abstract_Subprogram_Declaration): Remove\n\tredundant call to Is_Overriding_Operation.\n\t(Verify_Overriding_Indicator): Replace several occurrences of test on\n\tIs_Overriding_Operation by test on the presence of attribute\n\tOverridden_Operation.\n\t(Check_Convention): Replace test on Is_Overriding_Operation by test on\n\tthe presence of Overridden_Operation.\n\t(Check_Overriding_Indicator): Add missing decoration of attribute\n\tOverridden_Operation. Minor code cleanup.\n\t(New_Overloaded_Entity): Replace occurrence of test on\n\tIs_Overriding_Operation by test on the presence of attribute\n\tOverridden_Operation. Remove redundant setting of attribute\n\tIs_Overriding_Operation plus minor code reorganization.\n\tAdd missing decoration of attribute Overridden_Operation.\n\t* sem_elim.adb (Set_Eliminated): Replace test on\n\tIs_Overriding_Operation by test on the presence of Overridden_Operation.\n\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Replace test on\n\tIs_Overriding_Operation by test on the presence of\n\tOverridden_Operation. Remove a redundant test on attribute\n\tIs_Overriding_Operation. \n\t* lib-xref.adb (Generate_Reference): Replace test on\n\tIs_Overriding_Operation by test on the presence of Overridden_Operation.\n\t(Output_References): Replace test on Is_Overriding_Operation by test on\n\tthe presence of Overridden_Operation.\n\t* sem_disp.adb (Override_Dispatching_Operation): Replace test on\n\tIs_Overriding_Operation by test on the presence of Overridden_Operation.\n\tAdd missing decoration of attribute Overridden_Operation.\n\n2010-10-26  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch13.adb (Adjust_Record_For_Reverse_Bit_Order): Properly check\n\tRM 13.4.1(10).\n\n2010-10-26  Bob Duff  <duff@adacore.com>\n\n\t* sem_res.adb (Resolve_Actuals): In case of certain\n\tinternally-generated type conversions (created by OK_Convert_To, so the\n\tConversion_OK flag is set), avoid fetching the component type when it's\n\tnot really an array type, but a private type completed by an array type.\n\nFrom-SVN: r165945", "tree": {"sha": "6821664022f05bc795d8aa4856e6c8ea2d162c49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6821664022f05bc795d8aa4856e6c8ea2d162c49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/038140ede0175799d17e489b3509c218ee4fc2f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/038140ede0175799d17e489b3509c218ee4fc2f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/038140ede0175799d17e489b3509c218ee4fc2f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/038140ede0175799d17e489b3509c218ee4fc2f1/comments", "author": null, "committer": null, "parents": [{"sha": "3b097d112828a037df20ac72ece37f771d321a1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b097d112828a037df20ac72ece37f771d321a1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b097d112828a037df20ac72ece37f771d321a1b"}], "stats": {"total": 328, "additions": 187, "deletions": 141}, "files": [{"sha": "b979f650676671c46ce9bff0e9caa29b5fb9bef4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=038140ede0175799d17e489b3509c218ee4fc2f1", "patch": "@@ -1,3 +1,58 @@\n+2010-10-26  Javier Miranda  <miranda@adacore.com>\n+\n+\t* einfo.ads, einfo.adb (Is_Overriding_Operation): Removed.\n+\t(Set_Is_Overriding_Operation): Removed.\n+\t* sem_ch3.adb (Check_Abstract_Overriding): Remove redundant call to\n+\tIs_Overriding_Operation.\n+\t* exp_ch7.adb (Check_Visibly_Controlled): Remove redundant call to\n+\tIs_Overriding_Operation.\n+\t* sem_ch7.adb (Declare_Inherited_Private_Subprograms): Remove redundant\n+\tcall to Set_Is_Overriding_Operation.\n+\t* sem_util.adb (Collect_Primitive_Operations): Replace test on\n+\tIs_Overriding_Operation by test on the presence of attribute\n+\tOverridden_Operation.\n+\t(Original_Corresponding_Operation): Remove redundant call to attribute\n+\tIs_Overriding_Operation.\n+\t* sem_ch6.adb (Analyze_Abstract_Subprogram_Declaration): Remove\n+\tredundant call to Is_Overriding_Operation.\n+\t(Verify_Overriding_Indicator): Replace several occurrences of test on\n+\tIs_Overriding_Operation by test on the presence of attribute\n+\tOverridden_Operation.\n+\t(Check_Convention): Replace test on Is_Overriding_Operation by test on\n+\tthe presence of Overridden_Operation.\n+\t(Check_Overriding_Indicator): Add missing decoration of attribute\n+\tOverridden_Operation. Minor code cleanup.\n+\t(New_Overloaded_Entity): Replace occurrence of test on\n+\tIs_Overriding_Operation by test on the presence of attribute\n+\tOverridden_Operation. Remove redundant setting of attribute\n+\tIs_Overriding_Operation plus minor code reorganization.\n+\tAdd missing decoration of attribute Overridden_Operation.\n+\t* sem_elim.adb (Set_Eliminated): Replace test on\n+\tIs_Overriding_Operation by test on the presence of Overridden_Operation.\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Replace test on\n+\tIs_Overriding_Operation by test on the presence of\n+\tOverridden_Operation. Remove a redundant test on attribute\n+\tIs_Overriding_Operation. \n+\t* lib-xref.adb (Generate_Reference): Replace test on\n+\tIs_Overriding_Operation by test on the presence of Overridden_Operation.\n+\t(Output_References): Replace test on Is_Overriding_Operation by test on\n+\tthe presence of Overridden_Operation.\n+\t* sem_disp.adb (Override_Dispatching_Operation): Replace test on\n+\tIs_Overriding_Operation by test on the presence of Overridden_Operation.\n+\tAdd missing decoration of attribute Overridden_Operation.\n+\n+2010-10-26  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch13.adb (Adjust_Record_For_Reverse_Bit_Order): Properly check\n+\tRM 13.4.1(10).\n+\n+2010-10-26  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Actuals): In case of certain\n+\tinternally-generated type conversions (created by OK_Convert_To, so the\n+\tConversion_OK flag is set), avoid fetching the component type when it's\n+\tnot really an array type, but a private type completed by an array type.\n+\n 2010-10-26  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch5.adb: Adjust format of error message."}, {"sha": "e7f0b4f217d09b8b3f47cc044d66920513c8324b", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=038140ede0175799d17e489b3509c218ee4fc2f1", "patch": "@@ -283,7 +283,6 @@ package body Einfo is\n    --    Referenced_As_LHS               Flag36\n    --    Is_Known_Non_Null               Flag37\n    --    Can_Never_Be_Null               Flag38\n-   --    Is_Overriding_Operation         Flag39\n    --    Body_Needed_For_SAL             Flag40\n \n    --    Treat_As_Volatile               Flag41\n@@ -515,6 +514,7 @@ package body Einfo is\n    --    Has_Inheritable_Invariants      Flag248\n    --    Has_Predicates                  Flag250\n \n+   --    (unused)                        Flag39\n    --    (unused)                        Flag151\n    --    (unused)                        Flag249\n    --    (unused)                        Flag251\n@@ -1938,12 +1938,6 @@ package body Einfo is\n       return Flag134 (Id);\n    end Is_Optional_Parameter;\n \n-   function Is_Overriding_Operation (Id : E) return B is\n-   begin\n-      pragma Assert (Is_Subprogram (Id));\n-      return Flag39 (Id);\n-   end Is_Overriding_Operation;\n-\n    function Is_Package_Body_Entity (Id : E) return B is\n    begin\n       return Flag160 (Id);\n@@ -4418,12 +4412,6 @@ package body Einfo is\n       Set_Flag134 (Id, V);\n    end Set_Is_Optional_Parameter;\n \n-   procedure Set_Is_Overriding_Operation (Id : E; V : B := True) is\n-   begin\n-      pragma Assert (Is_Subprogram (Id));\n-      Set_Flag39 (Id, V);\n-   end Set_Is_Overriding_Operation;\n-\n    procedure Set_Is_Package_Body_Entity (Id : E; V : B := True) is\n    begin\n       Set_Flag160 (Id, V);\n@@ -7454,7 +7442,6 @@ package body Einfo is\n       W (\"Is_Obsolescent\",                  Flag153 (Id));\n       W (\"Is_Only_Out_Parameter\",           Flag226 (Id));\n       W (\"Is_Optional_Parameter\",           Flag134 (Id));\n-      W (\"Is_Overriding_Operation\",         Flag39  (Id));\n       W (\"Is_Package_Body_Entity\",          Flag160 (Id));\n       W (\"Is_Packed\",                       Flag51  (Id));\n       W (\"Is_Packed_Array_Type\",            Flag138 (Id));"}, {"sha": "026c1b2db4247cbb73ec74fe2096ef0805579290", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=038140ede0175799d17e489b3509c218ee4fc2f1", "patch": "@@ -2484,10 +2484,6 @@ package Einfo is\n --       Applies to all entities, true for ordinary fixed point types and\n --       subtypes.\n \n---    Is_Overriding_Operation (Flag39)\n---       Present in subprograms. Set if the subprogram is a primitive\n---       operation of a derived type, that overrides an inherited operation.\n-\n --    Is_Package_Or_Generic_Package (synthesized)\n --       Applies to all entities. True for packages and generic packages.\n --       False for all other entities.\n@@ -5167,7 +5163,6 @@ package Einfo is\n    --    Is_Instantiated                     (Flag126)  (generic case only)\n    --    Is_Intrinsic_Subprogram             (Flag64)\n    --    Is_Machine_Code_Subprogram          (Flag137)  (non-generic case only)\n-   --    Is_Overriding_Operation             (Flag39)   (non-generic case only)\n    --    Is_Primitive                        (Flag218)\n    --    Is_Primitive_Wrapper                (Flag195)  (non-generic case only)\n    --    Is_Private_Descendant               (Flag53)\n@@ -5287,13 +5282,13 @@ package Einfo is\n    --    First_Entity                        (Node17)\n    --    Alias                               (Node18)\n    --    Last_Entity                         (Node20)\n+   --    Overridden_Operation                (Node26)\n    --    Subprograms_For_Type                (Node29)\n    --    Has_Invariants                      (Flag232)\n    --    Has_Postconditions                  (Flag240)\n    --    Is_Machine_Code_Subprogram          (Flag137)\n    --    Is_Pure                             (Flag44)\n    --    Is_Intrinsic_Subprogram             (Flag64)\n-   --    Is_Overriding_Operation             (Flag39)\n    --    Is_Primitive                        (Flag218)\n    --    Is_Thunk                            (Flag225)\n    --    Default_Expressions_Processed       (Flag108)\n@@ -5432,7 +5427,6 @@ package Einfo is\n    --    Is_Intrinsic_Subprogram             (Flag64)\n    --    Is_Machine_Code_Subprogram          (Flag137)  (non-generic case only)\n    --    Is_Null_Init_Proc                   (Flag178)\n-   --    Is_Overriding_Operation             (Flag39)   (non-generic case only)\n    --    Is_Primitive                        (Flag218)\n    --    Is_Primitive_Wrapper                (Flag195)  (non-generic case only)\n    --    Is_Private_Descendant               (Flag53)\n@@ -6314,7 +6308,6 @@ package Einfo is\n    function Is_Object                           (Id : E) return B;\n    function Is_Ordinary_Fixed_Point_Type        (Id : E) return B;\n    function Is_Overloadable                     (Id : E) return B;\n-   function Is_Overriding_Operation             (Id : E) return B;\n    function Is_Private_Type                     (Id : E) return B;\n    function Is_Protected_Type                   (Id : E) return B;\n    function Is_Real_Type                        (Id : E) return B;\n@@ -6705,7 +6698,6 @@ package Einfo is\n    procedure Set_Is_Obsolescent                  (Id : E; V : B := True);\n    procedure Set_Is_Only_Out_Parameter           (Id : E; V : B := True);\n    procedure Set_Is_Optional_Parameter           (Id : E; V : B := True);\n-   procedure Set_Is_Overriding_Operation         (Id : E; V : B := True);\n    procedure Set_Is_Package_Body_Entity          (Id : E; V : B := True);\n    procedure Set_Is_Packed                       (Id : E; V : B := True);\n    procedure Set_Is_Packed_Array_Type            (Id : E; V : B := True);\n@@ -7428,7 +7420,6 @@ package Einfo is\n    pragma Inline (Is_Package_Body_Entity);\n    pragma Inline (Is_Ordinary_Fixed_Point_Type);\n    pragma Inline (Is_Overloadable);\n-   pragma Inline (Is_Overriding_Operation);\n    pragma Inline (Is_Packed);\n    pragma Inline (Is_Packed_Array_Type);\n    pragma Inline (Is_Potentially_Use_Visible);\n@@ -7832,7 +7823,6 @@ package Einfo is\n    pragma Inline (Set_Is_Obsolescent);\n    pragma Inline (Set_Is_Only_Out_Parameter);\n    pragma Inline (Set_Is_Optional_Parameter);\n-   pragma Inline (Set_Is_Overriding_Operation);\n    pragma Inline (Set_Is_Package_Body_Entity);\n    pragma Inline (Set_Is_Packed);\n    pragma Inline (Set_Is_Packed_Array_Type);"}, {"sha": "c5902931fdb0758be9826d26b89a2a5e1c37f42d", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=038140ede0175799d17e489b3509c218ee4fc2f1", "patch": "@@ -832,7 +832,7 @@ package body Exp_Ch7 is\n    begin\n       if Is_Derived_Type (Typ)\n         and then Comes_From_Source (E)\n-        and then not Is_Overriding_Operation (E)\n+        and then not Present (Overridden_Operation (E))\n       then\n          --  We know that the explicit operation on the type does not override\n          --  the inherited operation of the parent, and that the derivation"}, {"sha": "b055304e589c884f2acf1dfbc2815c32020a045a", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=038140ede0175799d17e489b3509c218ee4fc2f1", "patch": "@@ -847,7 +847,7 @@ package body Lib.Xref is\n \n          if Typ = 'p'\n            and then Is_Subprogram (N)\n-           and then Is_Overriding_Operation (N)\n+           and then Present (Overridden_Operation (N))\n          then\n             Xrefs.Table (Indx).Typ := 'P';\n          else\n@@ -2183,7 +2183,7 @@ package body Lib.Xref is\n                      --  on operation that was overridden.\n \n                      if Is_Subprogram (XE.Ent)\n-                       and then Is_Overriding_Operation (XE.Ent)\n+                       and then Present (Overridden_Operation (XE.Ent))\n                      then\n                         Output_Overridden_Op (Overridden_Operation (XE.Ent));\n                      end if;"}, {"sha": "488a4d745e6ec1cc3771bf3c7a33ee6248d5e074", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 68, "deletions": 47, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=038140ede0175799d17e489b3509c218ee4fc2f1", "patch": "@@ -390,62 +390,69 @@ package body Sem_Ch13 is\n                   declare\n                      Fbit : constant Uint :=\n                               Static_Integer (First_Bit (CC));\n+                     Lbit : constant Uint :=\n+                              Static_Integer (Last_Bit (CC));\n \n                   begin\n-                     --  Case of component with size > max machine scalar\n+                     --  Case of component with last bit >= max machine scalar\n \n-                     if Esize (Comp) > Max_Machine_Scalar_Size then\n+                     if Lbit >= Max_Machine_Scalar_Size then\n \n-                        --  Must begin on byte boundary\n+                        --  This is allowed only if first bit is zero, and\n+                        --  last bit + 1 is a multiple of storage unit size.\n \n-                        if Fbit mod SSU /= 0 then\n-                           Error_Msg_N\n-                             (\"illegal first bit value for \"\n-                              & \"reverse bit order\",\n-                              First_Bit (CC));\n-                           Error_Msg_Uint_1 := SSU;\n-                           Error_Msg_Uint_2 := Max_Machine_Scalar_Size;\n+                        if Fbit = 0 and then (Lbit + 1) mod SSU = 0 then\n \n-                           Error_Msg_N\n-                             (\"\\must be a multiple of ^ \"\n-                              & \"if size greater than ^\",\n-                              First_Bit (CC));\n+                           --  This is the case to give a warning if enabled\n \n-                           --  Must end on byte boundary\n+                           if Warn_On_Reverse_Bit_Order then\n+                              Error_Msg_N\n+                                (\"multi-byte field specified with \"\n+                                 & \"  non-standard Bit_Order?\", CC);\n+\n+                              if Bytes_Big_Endian then\n+                                 Error_Msg_N\n+                                   (\"\\bytes are not reversed \"\n+                                    & \"(component is big-endian)?\", CC);\n+                              else\n+                                 Error_Msg_N\n+                                   (\"\\bytes are not reversed \"\n+                                    & \"(component is little-endian)?\", CC);\n+                              end if;\n+                           end if;\n \n-                        elsif Esize (Comp) mod SSU /= 0 then\n-                           Error_Msg_N\n-                             (\"illegal last bit value for \"\n-                              & \"reverse bit order\",\n-                              Last_Bit (CC));\n-                           Error_Msg_Uint_1 := SSU;\n-                           Error_Msg_Uint_2 := Max_Machine_Scalar_Size;\n+                        --  Give error message for RM 13.4.1(10) violation\n \n-                           Error_Msg_N\n-                             (\"\\must be a multiple of ^ if size \"\n-                              & \"greater than ^\",\n-                              Last_Bit (CC));\n+                        else\n+                           Error_Msg_FE\n+                             (\"machine scalar rules not followed for&\",\n+                              First_Bit (CC), Comp);\n \n-                           --  OK, give warning if enabled\n+                           Error_Msg_Uint_1 := Lbit;\n+                           Error_Msg_Uint_2 := Max_Machine_Scalar_Size;\n+                           Error_Msg_F\n+                             (\"\\last bit (^) exceeds maximum machine \"\n+                              & \"scalar size (^)\",\n+                              First_Bit (CC));\n \n-                        elsif Warn_On_Reverse_Bit_Order then\n-                           Error_Msg_N\n-                             (\"multi-byte field specified with \"\n-                              & \"  non-standard Bit_Order?\", CC);\n+                           if (Lbit + 1) mod SSU /= 0 then\n+                              Error_Msg_Uint_1 := SSU;\n+                              Error_Msg_F\n+                                (\"\\and is not a multiple of Storage_Unit (^) \"\n+                                 & \"('R'M 13.4.1(10))\",\n+                                 First_Bit (CC));\n \n-                           if Bytes_Big_Endian then\n-                              Error_Msg_N\n-                                (\"\\bytes are not reversed \"\n-                                 & \"(component is big-endian)?\", CC);\n                            else\n-                              Error_Msg_N\n-                                (\"\\bytes are not reversed \"\n-                                 & \"(component is little-endian)?\", CC);\n+                              Error_Msg_Uint_1 := Fbit;\n+                              Error_Msg_F\n+                                (\"\\and first bit (^) is non-zero \"\n+                                 & \"('R'M 13.4.1(10))\",\n+                                 First_Bit (CC));\n                            end if;\n                         end if;\n \n-                        --  Case where size is not greater than max machine\n-                        --  scalar. For now, we just count these.\n+                     --  OK case of machine scalar related component clause,\n+                     --  For now, just count them.\n \n                      else\n                         Num_CC := Num_CC + 1;\n@@ -509,17 +516,31 @@ package body Sem_Ch13 is\n                --  Start of processing for Sort_CC\n \n             begin\n-               --  Collect the component clauses\n+               --  Collect the machine scalar relevant component clauses\n \n                Num_CC := 0;\n                Comp   := First_Component_Or_Discriminant (R);\n                while Present (Comp) loop\n-                  if Present (Component_Clause (Comp))\n-                    and then Esize (Comp) <= Max_Machine_Scalar_Size\n-                  then\n-                     Num_CC := Num_CC + 1;\n-                     Comps (Num_CC) := Comp;\n-                  end if;\n+                  declare\n+                     CC   : constant Node_Id := Component_Clause (Comp);\n+\n+                  begin\n+                     --  Collect only component clauses whose last bit is less\n+                     --  than machine scalar size. Any component clause whose\n+                     --  last bit exceeds this value does not take part in\n+                     --  machine scalar layout considerations. The test for\n+                     --  Error_Posted makes sure we exclude component clauses\n+                     --  for which we already posted an error.\n+\n+                     if Present (CC)\n+                       and then not Error_Posted (Last_Bit (CC))\n+                       and then Static_Integer (Last_Bit (CC)) <\n+                                Max_Machine_Scalar_Size\n+                     then\n+                        Num_CC := Num_CC + 1;\n+                        Comps (Num_CC) := Comp;\n+                     end if;\n+                  end;\n \n                   Next_Component_Or_Discriminant (Comp);\n                end loop;"}, {"sha": "76d60a426401cc3f19118024a9c13538d2f0b75a", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=038140ede0175799d17e489b3509c218ee4fc2f1", "patch": "@@ -8895,7 +8895,6 @@ package body Sem_Ch3 is\n          --  primitive marked with pragma Implemented.\n \n          if Ada_Version >= Ada_2012\n-           and then Is_Overriding_Operation (Subp)\n            and then Present (Overridden_Operation (Subp))\n            and then Has_Rep_Pragma\n                       (Overridden_Operation (Subp), Name_Implemented)"}, {"sha": "920706b8dad0a94e749e50ef77a9a9dd3cb83e7d", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 20, "deletions": 34, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=038140ede0175799d17e489b3509c218ee4fc2f1", "patch": "@@ -374,7 +374,7 @@ package body Sem_Ch6 is\n \n       elsif Warn_On_Redundant_Constructs\n         and then not Is_Dispatching_Operation (Designator)\n-        and then not Is_Overriding_Operation (Designator)\n+        and then not Present (Overridden_Operation (Designator))\n         and then (not Is_Operator_Symbol_Name (Chars (Designator))\n                    or else Scop /= Scope (Etype (First_Formal (Designator))))\n       then\n@@ -1960,13 +1960,13 @@ package body Sem_Ch6 is\n             then\n                null;\n \n-            elsif not Is_Overriding_Operation (Spec_Id) then\n+            elsif not Present (Overridden_Operation (Spec_Id)) then\n                Error_Msg_NE\n                  (\"subprogram& is not overriding\", Body_Spec, Spec_Id);\n             end if;\n \n          elsif Must_Not_Override (Body_Spec) then\n-            if Is_Overriding_Operation (Spec_Id) then\n+            if Present (Overridden_Operation (Spec_Id)) then\n                Error_Msg_NE\n                  (\"subprogram& overrides inherited operation\",\n                   Body_Spec, Spec_Id);\n@@ -1991,7 +1991,7 @@ package body Sem_Ch6 is\n             end if;\n \n          elsif Style_Check --  ??? incorrect use of Style_Check!\n-           and then Is_Overriding_Operation (Spec_Id)\n+           and then Present (Overridden_Operation (Spec_Id))\n          then\n             pragma Assert (Unit_Declaration_Node (Body_Id) = N);\n             Style.Missing_Overriding (N, Body_Id);\n@@ -4196,7 +4196,7 @@ package body Sem_Ch6 is\n                   Error_Msg_Sloc   := Sloc (Op);\n \n                   if Comes_From_Source (Op) or else No (Alias (Op)) then\n-                     if not Is_Overriding_Operation (Op) then\n+                     if not Present (Overridden_Operation (Op)) then\n                         Error_Msg_N (\"\\\\primitive % defined #\", Typ);\n                      else\n                         Error_Msg_N\n@@ -4672,7 +4672,7 @@ package body Sem_Ch6 is\n             end if;\n \n          elsif Is_Subprogram (Subp) then\n-            Set_Is_Overriding_Operation (Subp);\n+            Set_Overridden_Operation (Subp, Overridden_Subp);\n          end if;\n \n          --  If primitive flag is set or this is a protected operation, then\n@@ -4728,10 +4728,9 @@ package body Sem_Ch6 is\n                end if;\n \n             elsif Must_Override (Spec) then\n-               if Is_Overriding_Operation (Subp) then\n-                  null;\n-\n-               elsif not Can_Override then\n+               if No (Overridden_Operation (Subp))\n+                 and then not Can_Override\n+               then\n                   Error_Msg_NE (\"subprogram & is not overriding\", Spec, Subp);\n                end if;\n \n@@ -4742,8 +4741,6 @@ package body Sem_Ch6 is\n                 not Is_Predefined_File_Name\n                       (Unit_File_Name (Get_Source_Unit (Subp)))\n             then\n-               Set_Is_Overriding_Operation (Subp);\n-\n                --  If style checks are enabled, indicate that the indicator is\n                --  missing. However, at the point of declaration, the type of\n                --  which this is a primitive operation may be private, in which\n@@ -7860,7 +7857,7 @@ package body Sem_Ch6 is\n             if Ada_Version >= Ada_2012\n               and then No (Overridden_Subp)\n               and then Is_Dispatching_Operation (S)\n-              and then Is_Overriding_Operation (S)\n+              and then Present (Overridden_Operation (S))\n             then\n                Overridden_Subp := Overridden_Operation (S);\n             end if;\n@@ -7982,22 +7979,18 @@ package body Sem_Ch6 is\n                      Check_Operation_From_Private_View (S, E);\n                   end if;\n \n-                  --  In any case the implicit operation remains hidden by\n-                  --  the existing declaration, which is overriding.\n+                  --  In any case the implicit operation remains hidden by the\n+                  --  existing declaration, which is overriding. Indicate that\n+                  --  E overrides the operation from which S is inherited.\n \n-                  Set_Is_Overriding_Operation (E);\n+                  if Present (Alias (S)) then\n+                     Set_Overridden_Operation (E, Alias (S));\n+                  else\n+                     Set_Overridden_Operation (E, S);\n+                  end if;\n \n                   if Comes_From_Source (E) then\n                      Check_Overriding_Indicator (E, S, Is_Primitive => False);\n-\n-                     --  Indicate that E overrides the operation from which\n-                     --  S is inherited.\n-\n-                     if Present (Alias (S)) then\n-                        Set_Overridden_Operation (E, Alias (S));\n-                     else\n-                        Set_Overridden_Operation (E, S);\n-                     end if;\n                   end if;\n \n                   return;\n@@ -8145,22 +8138,17 @@ package body Sem_Ch6 is\n                            if No (Next_Entity (Prev)) then\n                               Set_Last_Entity (Current_Scope, Prev);\n                            end if;\n-\n                         end if;\n                      end if;\n \n                      Enter_Overloaded_Entity (S);\n-                     Set_Is_Overriding_Operation (S);\n+                     Set_Overridden_Operation (S, E);\n                      Check_Overriding_Indicator (S, E, Is_Primitive => True);\n \n                      --  If S is a user-defined subprogram or a null procedure\n                      --  expanded to override an inherited null procedure, or a\n                      --  predefined dispatching primitive then indicate that E\n-                     --  overrides the operation from which S is inherited. It\n-                     --  seems odd that Overridden_Operation isn't set in all\n-                     --  cases where Is_Overriding_Operation is true, but doing\n-                     --  so causes infinite loops in the compiler for implicit\n-                     --  overriding subprograms. ???\n+                     --  overrides the operation from which S is inherited.\n \n                      if Comes_From_Source (S)\n                        or else\n@@ -8176,8 +8164,6 @@ package body Sem_Ch6 is\n                      then\n                         if Present (Alias (E)) then\n                            Set_Overridden_Operation (S, Alias (E));\n-                        else\n-                           Set_Overridden_Operation (S, E);\n                         end if;\n                      end if;\n "}, {"sha": "ce6184f270bab79a1c1599416c7abb21f8b6fcce", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=038140ede0175799d17e489b3509c218ee4fc2f1", "patch": "@@ -1537,7 +1537,6 @@ package body Sem_Ch7 is\n                            New_Op := Node (Op_Elmt_2);\n                            Replace_Elmt (Op_Elmt, New_Op);\n                            Remove_Elmt  (Op_List, Op_Elmt_2);\n-                           Set_Is_Overriding_Operation (New_Op);\n                            Set_Overridden_Operation (New_Op, Parent_Subp);\n \n                            --  We don't need to inherit its dispatching slot."}, {"sha": "0fbd49a6c32f38b13b3fcb20e8922ea88f59229e", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=038140ede0175799d17e489b3509c218ee4fc2f1", "patch": "@@ -1968,7 +1968,7 @@ package body Sem_Ch8 is\n \n          --  Ada 2005: check overriding indicator\n \n-         if Is_Overriding_Operation (Rename_Spec) then\n+         if Present (Overridden_Operation (Rename_Spec)) then\n             if Must_Not_Override (Specification (N)) then\n                Error_Msg_NE\n                  (\"subprogram& overrides inherited operation\",\n@@ -2110,7 +2110,7 @@ package body Sem_Ch8 is\n            and then No (DTC_Entity (Old_S))\n            and then Present (Alias (Old_S))\n            and then not Is_Abstract_Subprogram (Alias (Old_S))\n-           and then Is_Overriding_Operation (Alias (Old_S))\n+           and then Present (Overridden_Operation (Alias (Old_S)))\n          then\n             Old_S := Alias (Old_S);\n          end if;"}, {"sha": "93121928f92ba90afe15e9c586d83883fbf81f1e", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=038140ede0175799d17e489b3509c218ee4fc2f1", "patch": "@@ -889,7 +889,7 @@ package body Sem_Disp is\n          --     New_Stream_Subprogram)\n \n          if Present (Old_Subp)\n-           and then Is_Overriding_Operation (Subp)\n+           and then Present (Overridden_Operation (Subp))\n            and then Is_Dispatching_Operation (Old_Subp)\n          then\n             pragma Assert\n@@ -1117,7 +1117,7 @@ package body Sem_Disp is\n            and then Is_Controlled (Tagged_Type)\n            and then not Is_Visibly_Controlled (Tagged_Type)\n          then\n-            Set_Is_Overriding_Operation (Subp, False);\n+            Set_Overridden_Operation (Subp, Empty);\n \n             --  If the subprogram specification carries an overriding\n             --  indicator, no need for the warning: it is either redundant,\n@@ -1139,7 +1139,6 @@ package body Sem_Disp is\n \n          else\n             Override_Dispatching_Operation (Tagged_Type, Ovr_Subp, Subp);\n-            Set_Is_Overriding_Operation (Subp);\n \n             --  Ada 2005 (AI-251): In case of late overriding of a primitive\n             --  that covers abstract interface subprograms we must register it"}, {"sha": "9f6374e3b76292302524da051f76adab3cfa0ffb", "filename": "gcc/ada/sem_elim.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Fsem_elim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Fsem_elim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elim.adb?ref=038140ede0175799d17e489b3509c218ee4fc2f1", "patch": "@@ -267,7 +267,7 @@ package body Sem_Elim is\n                   --  If an overriding dispatching primitive is eliminated then\n                   --  its parent must have been eliminated.\n \n-                  if Is_Overriding_Operation (E)\n+                  if Present (Overridden_Operation (E))\n                     and then not Is_Eliminated (Overridden_Operation (E))\n                   then\n                      Error_Msg_Name_1 := Chars (E);"}, {"sha": "784f6bd98c6f21ec117a680d179b1f5e5bad2767", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=038140ede0175799d17e489b3509c218ee4fc2f1", "patch": "@@ -3334,45 +3334,55 @@ package body Sem_Res is\n                if Ekind (F) = E_In_Out_Parameter\n                  and then Is_Array_Type (Etype (F))\n                then\n-                  if Has_Aliased_Components (Etype (Expression (A)))\n-                    /= Has_Aliased_Components (Etype (F))\n-                  then\n-\n-                     --  In a view conversion, the conversion must be legal in\n-                     --  both directions, and thus both component types must be\n-                     --  aliased, or neither (4.6 (8)).\n+                  --  In a view conversion, the conversion must be legal in\n+                  --  both directions, and thus both component types must be\n+                  --  aliased, or neither (4.6 (8)).\n \n-                     --  The additional rule 4.6 (24.9.2) seems unduly\n-                     --  restrictive: the privacy requirement should not apply\n-                     --  to generic types, and should be checked in an\n-                     --  instance. ARG query is in order ???\n+                  --  The extra rule in 4.6 (24.9.2) seems unduly restrictive:\n+                  --  the privacy requirement should not apply to generic\n+                  --  types, and should be checked in an instance. ARG query\n+                  --  is in order ???\n \n+                  if Has_Aliased_Components (Etype (Expression (A))) /=\n+                     Has_Aliased_Components (Etype (F))\n+                  then\n                      Error_Msg_N\n                        (\"both component types in a view conversion must be\"\n                          & \" aliased, or neither\", A);\n \n+                  --  Comment here??? what set of cases???\n+\n                   elsif\n                      not Same_Ancestor (Etype (F), Etype (Expression (A)))\n                   then\n+                     --  Check view conv between unrelated by ref array types\n+\n                      if Is_By_Reference_Type (Etype (F))\n                         or else Is_By_Reference_Type (Etype (Expression (A)))\n                      then\n                         Error_Msg_N\n                           (\"view conversion between unrelated by reference \" &\n                            \"array types not allowed (\\'A'I-00246)\", A);\n-                     else\n+\n+                     --  In Ada 2005 mode, check view conversion component\n+                     --  type cannot be private, tagged, or volatile. Note\n+                     --  that we only apply this to source conversions. The\n+                     --  generated code can contain conversions which are\n+                     --  not subject to this test, and we cannot extract the\n+                     --  component type in such cases since it is not present.\n+\n+                     elsif Comes_From_Source (A)\n+                       and then Ada_Version >= Ada_2005\n+                     then\n                         declare\n                            Comp_Type : constant Entity_Id :=\n                                          Component_Type\n                                            (Etype (Expression (A)));\n                         begin\n-                           if Comes_From_Source (A)\n-                             and then Ada_Version >= Ada_2005\n-                             and then\n-                               ((Is_Private_Type (Comp_Type)\n-                                   and then not Is_Generic_Type (Comp_Type))\n-                                 or else Is_Tagged_Type (Comp_Type)\n-                                 or else Is_Volatile (Comp_Type))\n+                           if (Is_Private_Type (Comp_Type)\n+                                 and then not Is_Generic_Type (Comp_Type))\n+                             or else Is_Tagged_Type (Comp_Type)\n+                             or else Is_Volatile (Comp_Type)\n                            then\n                               Error_Msg_N\n                                 (\"component type of a view conversion cannot\"\n@@ -3385,8 +3395,10 @@ package body Sem_Res is\n                   end if;\n                end if;\n \n+               --  Resolve expression if conversion is all OK\n+\n                if (Conversion_OK (A)\n-                     or else Valid_Conversion (A, Etype (A), Expression (A)))\n+                    or else Valid_Conversion (A, Etype (A), Expression (A)))\n                  and then not Is_Ref_To_Bit_Packed_Array (Expression (A))\n                then\n                   Resolve (Expression (A));"}, {"sha": "29826c0b6f72259297eda064cf351c6360c30123", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038140ede0175799d17e489b3509c218ee4fc2f1/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=038140ede0175799d17e489b3509c218ee4fc2f1", "patch": "@@ -1890,7 +1890,7 @@ package body Sem_Util is\n                   if Chars (Id) = Name_Op_Eq\n                     and then Is_Dispatching_Operation (Id)\n                     and then Present (Alias (Id))\n-                    and then Is_Overriding_Operation (Alias (Id))\n+                    and then Present (Overridden_Operation (Alias (Id)))\n                     and then Base_Type (Etype (First_Entity (Id))) =\n                                Base_Type (Etype (First_Entity (Alias (Id))))\n                   then\n@@ -9957,9 +9957,7 @@ package body Sem_Util is\n       --  If S overrides an inherted subprogram S2 the original corresponding\n       --  operation of S is the original corresponding operation of S2\n \n-      elsif Is_Overriding_Operation (S)\n-        and then Present (Overridden_Operation (S))\n-      then\n+      elsif Present (Overridden_Operation (S)) then\n          return Original_Corresponding_Operation (Overridden_Operation (S));\n \n       --  otherwise it is S itself"}]}