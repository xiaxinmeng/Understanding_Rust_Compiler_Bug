{"sha": "5562e26eafb432c644b924b79166a0dedb8a2f89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU2MmUyNmVhZmI0MzJjNjQ0YjkyNGI3OTE2NmEwZGVkYjhhMmY4OQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2013-08-21T12:36:36Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2013-08-21T12:36:36Z"}, "message": "tree-vrp.c (simplify_stmt_for_jump_threading): Try to simplify assignments too.\n\n\t* tree-vrp.c (simplify_stmt_for_jump_threading): Try to\n\tsimplify assignments too.  If the RHS collapses to a singleton\n\trange, then return the value for the range.\n\n\t* gcc.dg/tree-ssa/ssa-vrp-thread-1.c: New test.\n\nFrom-SVN: r201898", "tree": {"sha": "8f3794ff3241e02fc16ea5cc1405d408ed1e2fc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f3794ff3241e02fc16ea5cc1405d408ed1e2fc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5562e26eafb432c644b924b79166a0dedb8a2f89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5562e26eafb432c644b924b79166a0dedb8a2f89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5562e26eafb432c644b924b79166a0dedb8a2f89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5562e26eafb432c644b924b79166a0dedb8a2f89/comments", "author": null, "committer": null, "parents": [{"sha": "8724cfdd3b26fc13de09fe84785acf383b7cee93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8724cfdd3b26fc13de09fe84785acf383b7cee93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8724cfdd3b26fc13de09fe84785acf383b7cee93"}], "stats": {"total": 69, "additions": 61, "deletions": 8}, "files": [{"sha": "d98dc5fa555944f559977c26b732571cd1530817", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5562e26eafb432c644b924b79166a0dedb8a2f89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5562e26eafb432c644b924b79166a0dedb8a2f89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5562e26eafb432c644b924b79166a0dedb8a2f89", "patch": "@@ -1,3 +1,9 @@\n+2013-08-21  Jeff Law  <law@redhat.com>\n+\n+\t* tree-vrp.c (simplify_stmt_for_jump_threading): Try to\n+\tsimplify assignments too.  If the RHS collapses to a singleton\n+\trange, then return the value for the range.\n+\n 2013-08-21  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n         * config/i386/sse.md (V16): Rename to..."}, {"sha": "e0fb86111abe92042efd05c27096973ff419d6e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5562e26eafb432c644b924b79166a0dedb8a2f89/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5562e26eafb432c644b924b79166a0dedb8a2f89/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5562e26eafb432c644b924b79166a0dedb8a2f89", "patch": "@@ -1,3 +1,7 @@\n+2013-08-21  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/ssa-vrp-thread-1.c: New test.\n+\n 2013-08-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/56134"}, {"sha": "9d9473e7f31700b3ae7bb281f3dbe95d360d8e9d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-vrp-thread-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5562e26eafb432c644b924b79166a0dedb8a2f89/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-vrp-thread-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5562e26eafb432c644b924b79166a0dedb8a2f89/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-vrp-thread-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-vrp-thread-1.c?ref=5562e26eafb432c644b924b79166a0dedb8a2f89", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-details\" } */\n+\n+\n+struct basic_block_def;\n+typedef struct basic_block_def *basic_block;\n+enum gimple_code\n+{\n+  LAST_AND_UNUSED_GIMPLE_CODE\n+};\n+struct omp_region\n+{\n+  struct omp_region *outer;\n+  basic_block cont;\n+};\n+void\n+build_omp_regions_1 (basic_block bb, struct omp_region *parent,\n+\t\t     unsigned char single_tree, enum gimple_code code)\n+{\n+  if (code == 25)\n+    parent = parent->outer;\n+  else if (code == 42)\n+    parent->cont = bb;\n+  if (single_tree && !parent)\n+    return;\n+  oof ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Threaded\" 1 \"vrp1\" }  } */\n+/* { dg-final { cleanup-tree-dump \"vrp1\" } } */\n+"}, {"sha": "48b9f7a072cc848b9ba5b365bc4ca444dce58166", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5562e26eafb432c644b924b79166a0dedb8a2f89/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5562e26eafb432c644b924b79166a0dedb8a2f89/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=5562e26eafb432c644b924b79166a0dedb8a2f89", "patch": "@@ -9273,15 +9273,27 @@ static vec<tree> equiv_stack;\n static tree\n simplify_stmt_for_jump_threading (gimple stmt, gimple within_stmt)\n {\n-  /* We only use VRP information to simplify conditionals.  This is\n-     overly conservative, but it's unclear if doing more would be\n-     worth the compile time cost.  */\n-  if (gimple_code (stmt) != GIMPLE_COND)\n-    return NULL;\n+  if (gimple_code (stmt) == GIMPLE_COND)\n+    return vrp_evaluate_conditional (gimple_cond_code (stmt),\n+\t\t\t\t     gimple_cond_lhs (stmt),\n+\t\t\t\t     gimple_cond_rhs (stmt), within_stmt);\n+\n+  if (gimple_code (stmt) == GIMPLE_ASSIGN)\n+    {\n+      value_range_t new_vr = VR_INITIALIZER;\n+      tree lhs = gimple_assign_lhs (stmt);\n+\n+      if (TREE_CODE (lhs) == SSA_NAME\n+\t  && (INTEGRAL_TYPE_P (TREE_TYPE (lhs))\n+\t      || POINTER_TYPE_P (TREE_TYPE (lhs))))\n+\t{\n+\t  extract_range_from_assignment (&new_vr, stmt);\n+\t  if (range_int_cst_singleton_p (&new_vr))\n+\t    return new_vr.min;\n+\t}\n+    }\n \n-  return vrp_evaluate_conditional (gimple_cond_code (stmt),\n-\t\t\t\t   gimple_cond_lhs (stmt),\n-\t\t\t\t   gimple_cond_rhs (stmt), within_stmt);\n+  return NULL_TREE;\n }\n \n /* Blocks which have more than one predecessor and more than"}]}