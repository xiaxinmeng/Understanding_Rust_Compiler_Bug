{"sha": "8e41c4f38ef85ab077859de25258869a1ff46a52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU0MWM0ZjM4ZWY4NWFiMDc3ODU5ZGUyNTI1ODg2OWExZmY0NmE1Mg==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@redhat.com", "date": "2001-06-21T03:20:04Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2001-06-21T03:20:04Z"}, "message": "class.c (java_hash_tree_node): Fixed indentation in leading comment.\n\n2001-06-20  Alexandre Petit-Bianco  <apbianco@redhat.com>\n\n\t* class.c (java_hash_tree_node): Fixed indentation in leading comment.\n\t* parse.y (do_resolve_class): Moved comments out to leading comment\n\tsection. Removed local `start', New local `_ht' and\n\t`circularity_hash.'  Record `enclosing' in hash table and search\n\tit to detect circularity.  Use `enclosing' as an argument to\n\t`lookup_cl.' Free the hash table when done.\n\n(http://gcc.gnu.org/ml/gcc-patches/2001-06/msg01318.html )\n\nFrom-SVN: r43480", "tree": {"sha": "8093d6470a7fb4a32e88a06e02bdb594f422f543", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8093d6470a7fb4a32e88a06e02bdb594f422f543"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e41c4f38ef85ab077859de25258869a1ff46a52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e41c4f38ef85ab077859de25258869a1ff46a52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e41c4f38ef85ab077859de25258869a1ff46a52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e41c4f38ef85ab077859de25258869a1ff46a52/comments", "author": null, "committer": null, "parents": [{"sha": "6c0a4eab24dd97de9f19e045d971718d516387e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c0a4eab24dd97de9f19e045d971718d516387e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c0a4eab24dd97de9f19e045d971718d516387e3"}], "stats": {"total": 60, "additions": 43, "deletions": 17}, "files": [{"sha": "c356f68ba3ae7d2d2c2b4dc7861523c46e36d3ce", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e41c4f38ef85ab077859de25258869a1ff46a52/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e41c4f38ef85ab077859de25258869a1ff46a52/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=8e41c4f38ef85ab077859de25258869a1ff46a52", "patch": "@@ -1,3 +1,12 @@\n+2001-06-20  Alexandre Petit-Bianco  <apbianco@redhat.com>\n+\n+\t* class.c (java_hash_tree_node): Fixed indentation in leading comment.\n+\t* parse.y (do_resolve_class): Moved comments out to leading comment\n+\tsection. Removed local `start', New local `_ht' and\n+\t`circularity_hash.'  Record `enclosing' in hash table and search\n+\tit to detect circularity.  Use `enclosing' as an argument to\n+\t`lookup_cl.' Free the hash table when done.\n+\n 2001-06-19  Tom Tromey  <tromey@redhat.com>\n \n \t* lex.c (java_read_char): Disallow invalid and overlong"}, {"sha": "894671c24222ed47d336331e845603c2b44c1b64", "filename": "gcc/java/class.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e41c4f38ef85ab077859de25258869a1ff46a52/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e41c4f38ef85ab077859de25258869a1ff46a52/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=8e41c4f38ef85ab077859de25258869a1ff46a52", "patch": "@@ -618,9 +618,9 @@ init_test_hash_newfunc (entry, table, string)\n   return (struct hash_entry *) ret;\n }\n \n-/* Hash table helpers. Also reused in find_applicable_accessible_methods_list\n-   (parse.y). The hash of a tree node is it's pointer value,\n-   comparison is direct. */\n+/* Hash table helpers. Also reused in find_applicable_accessible_methods_list \n+   (parse.y). The hash of a tree node is its pointer value, comparison\n+   is direct. */\n \n unsigned long\n java_hash_hash_tree_node (k)"}, {"sha": "37b5f1d58b30722b04784b23a34afe2dfd6cc4ab", "filename": "gcc/java/parse.y", "status": "modified", "additions": 31, "deletions": 14, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e41c4f38ef85ab077859de25258869a1ff46a52/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e41c4f38ef85ab077859de25258869a1ff46a52/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=8e41c4f38ef85ab077859de25258869a1ff46a52", "patch": "@@ -5519,30 +5519,41 @@ resolve_class (enclosing, class_type, decl, cl)\n }\n \n /* Effectively perform the resolution of class CLASS_TYPE. DECL or CL\n-   are used to report error messages.  */\n+   are used to report error messages. Do not try to replace TYPE_NAME\n+   (class_type) by a variable, since it is changed by\n+   find_in_imports{_on_demand} and (but it doesn't really matter)\n+   qualify_and_find.  */\n \n tree\n do_resolve_class (enclosing, class_type, decl, cl)\n      tree enclosing, class_type, decl, cl;\n {\n-  tree new_class_decl, super, start;\n+  tree new_class_decl, super;\n+  struct hash_table _ht, *circularity_hash = &_ht;\n \n-  /* Do not try to replace TYPE_NAME (class_type) by a variable, since\n-     it is changed by find_in_imports{_on_demand} and (but it doesn't\n-     really matter) qualify_and_find */\n+  /* This hash table is used to register the classes we're going\n+     through when searching the current class as an inner class, in\n+     order to detect circular references. Remember to free it before\n+     returning the section 0- of this function. */\n+  hash_table_init (circularity_hash, hash_newfunc,\n+\t\t   java_hash_hash_tree_node, java_hash_compare_tree_node);\n \n-  /* 0- Search in the current class as an inner class */\n-  start = enclosing;\n-\n-  /* Maybe some code here should be added to load the class or\n+  /* 0- Search in the current class as an inner class.\n+     Maybe some code here should be added to load the class or\n      something, at least if the class isn't an inner class and ended\n      being loaded from class file. FIXME. */\n   while (enclosing)\n     {\n       tree intermediate;\n \n+      hash_lookup (circularity_hash, \n+\t\t   (const  hash_table_key) enclosing, TRUE, NULL);\n+\n       if ((new_class_decl = find_as_inner_class (enclosing, class_type, cl)))\n-        return new_class_decl;\n+\t{\n+\t  hash_table_free (circularity_hash);\n+\t  return new_class_decl;\n+\t}\n \n       intermediate = enclosing;\n       /* Explore enclosing contexts. */\n@@ -5551,7 +5562,10 @@ do_resolve_class (enclosing, class_type, decl, cl)\n \t  intermediate = DECL_CONTEXT (intermediate);\n \t  if ((new_class_decl = find_as_inner_class (intermediate, \n \t\t\t\t\t\t     class_type, cl)))\n-\t    return new_class_decl;\n+\t    {\n+\t      hash_table_free (circularity_hash);\n+\t      return new_class_decl;\n+\t    }\n \t}\n \n       /* Now go to the upper classes, bail out if necessary. */\n@@ -5563,13 +5577,14 @@ do_resolve_class (enclosing, class_type, decl, cl)\n         super = do_resolve_class (NULL, super, NULL, NULL);\n       else\n \tsuper = TYPE_NAME (super);\n- \n+\n       /* We may not have checked for circular inheritance yet, so do so\n          here to prevent an infinite loop. */\n-      if (super == start)\n+      if (hash_lookup (circularity_hash,\n+\t\t       (const hash_table_key) super, FALSE, NULL))\n         {\n           if (!cl)\n-            cl = lookup_cl (decl);\n+            cl = lookup_cl (enclosing);\n \t  \n           parse_error_context\n             (cl, \"Cyclic inheritance involving %s\",\n@@ -5579,6 +5594,8 @@ do_resolve_class (enclosing, class_type, decl, cl)\n       enclosing = super;\n     }\n \n+  hash_table_free (circularity_hash);\n+\n   /* 1- Check for the type in single imports. This will change\n      TYPE_NAME() if something relevant is found */\n   find_in_imports (class_type);"}]}