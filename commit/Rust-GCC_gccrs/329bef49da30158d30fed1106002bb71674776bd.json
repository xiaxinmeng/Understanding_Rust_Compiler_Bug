{"sha": "329bef49da30158d30fed1106002bb71674776bd", "node_id": "C_kwDOANBUbNoAKDMyOWJlZjQ5ZGEzMDE1OGQzMGZlZDExMDYwMDJiYjcxNjc0Nzc2YmQ", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-06-29T19:52:39Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-06-29T19:56:28Z"}, "message": "d: Fix error: aggregate value used where floating point was expected\n\nCasting from vector to static array is permitted, and the frontend\ngenerates a reinterpret cast, but casting back the other way resulted in\nan error.  This has been fixed to be properly handled in the code\ngeneration pass of VectorExp, and the conversion for lvalue and rvalue\nhandling done in convert_expr and convert_for_rvalue respectively.\n\n\tPR d/106139\n\ngcc/d/ChangeLog:\n\n\t* d-convert.cc (convert_expr): Handle casting from array to vector.\n\t(convert_for_rvalue): Rewrite vector to array casts of the same\n\telement type into a constructor.\n\t(convert_for_assignment): Return calling convert_for_rvalue.\n\t* expr.cc (ExprVisitor::visit (VectorExp *)): Handle generating a\n\tvector expression from a static array.\n\t* toir.cc (IRVisitor::visit (ReturnStatement *)): Call\n\tconvert_for_rvalue on return value.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/pr106139a.d: New test.\n\t* gdc.dg/pr106139b.d: New test.\n\t* gdc.dg/pr106139c.d: New test.\n\t* gdc.dg/pr106139d.d: New test.", "tree": {"sha": "cc2447cb58fa019894a7af0dfc678cd1333b068e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc2447cb58fa019894a7af0dfc678cd1333b068e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/329bef49da30158d30fed1106002bb71674776bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329bef49da30158d30fed1106002bb71674776bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/329bef49da30158d30fed1106002bb71674776bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329bef49da30158d30fed1106002bb71674776bd/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49d508065bdd36fb1a9b6aad9666b1edb5e06474", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49d508065bdd36fb1a9b6aad9666b1edb5e06474", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49d508065bdd36fb1a9b6aad9666b1edb5e06474"}], "stats": {"total": 181, "additions": 178, "deletions": 3}, "files": [{"sha": "ec5da6c10a6edf59e26909f059e5fe953c40b7bc", "filename": "gcc/d/d-convert.cc", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329bef49da30158d30fed1106002bb71674776bd/gcc%2Fd%2Fd-convert.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329bef49da30158d30fed1106002bb71674776bd/gcc%2Fd%2Fd-convert.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-convert.cc?ref=329bef49da30158d30fed1106002bb71674776bd", "patch": "@@ -502,6 +502,15 @@ convert_expr (tree exp, Type *etype, Type *totype)\n \t  gcc_assert (totype->size () == etype->size ());\n \t  result = build_vconvert (build_ctype (totype), exp);\n \t}\n+      else if (tbtype->ty == TY::Tvector && tbtype->size () == ebtype->size ())\n+\t{\n+\t  /* Allow casting from array to vector as if its an unaligned load.  */\n+\t  tree type = build_ctype (totype);\n+\t  tree unaligned_type = build_variant_type_copy (type);\n+\t  SET_TYPE_ALIGN (unaligned_type, 1 * BITS_PER_UNIT);\n+\t  TYPE_USER_ALIGN (unaligned_type) = 1;\n+\t  result = convert (type, build_vconvert (unaligned_type, exp));\n+\t}\n       else\n \t{\n \t  error (\"cannot cast expression of type %qs to type %qs\",\n@@ -643,6 +652,39 @@ convert_for_rvalue (tree expr, Type *etype, Type *totype)\n       result = convert (build_ctype (tbtype), result);\n     }\n \n+  if (tbtype->ty == TY::Tsarray\n+      && ebtype->ty == TY::Tsarray\n+      && tbtype->nextOf ()->ty == ebtype->nextOf ()->ty\n+      && INDIRECT_REF_P (expr)\n+      && CONVERT_EXPR_CODE_P (TREE_CODE (TREE_OPERAND (expr, 0)))\n+      && TREE_CODE (TREE_OPERAND (TREE_OPERAND (expr, 0), 0)) == ADDR_EXPR)\n+    {\n+      /* If expression is a vector that was casted to an array either by\n+\t explicit type cast or by taking the vector's `.array' value, strip the\n+\t reinterpret cast and build a constructor instead.  */\n+      tree ptr = TREE_OPERAND (TREE_OPERAND (expr, 0), 0);\n+\n+      if (VECTOR_TYPE_P (TREE_TYPE (TREE_TYPE (ptr))))\n+\t{\n+\t  /* Rewrite: `*(Array *)&vector'\n+\t\tinto: `{ vector[0], vector[1], ... }'  */\n+\t  tree array = d_save_expr (TREE_OPERAND (ptr, 0));\n+\t  array = build1 (VIEW_CONVERT_EXPR, TREE_TYPE (expr), array);\n+\n+\t  uinteger_t dim = tbtype->isTypeSArray ()->dim->toUInteger ();\n+\t  vec <constructor_elt, va_gc> *elms = NULL;\n+\t  for (uinteger_t i = 0; i < dim; i++)\n+\t    {\n+\t      tree index = size_int (i);\n+\t      tree value = build4 (ARRAY_REF, TREE_TYPE (TREE_TYPE (array)),\n+\t\t\t\t   array, index, NULL_TREE, NULL_TREE);\n+\t      CONSTRUCTOR_APPEND_ELT (elms, index, value);\n+\t    }\n+\n+\t  return build_constructor (build_ctype (totype), elms);\n+\t}\n+    }\n+\n   return result ? result : convert_expr (expr, etype, totype);\n }\n \n@@ -703,7 +745,7 @@ convert_for_assignment (tree expr, Type *etype, Type *totype)\n       return expr;\n     }\n \n-  return convert_expr (expr, etype, totype);\n+  return convert_for_rvalue (expr, etype, totype);\n }\n \n /* Return a TREE representation of EXPR converted to represent"}, {"sha": "1bb10a835d2f9d25979ea6fc309b39c8e9c65f42", "filename": "gcc/d/expr.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329bef49da30158d30fed1106002bb71674776bd/gcc%2Fd%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329bef49da30158d30fed1106002bb71674776bd/gcc%2Fd%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fexpr.cc?ref=329bef49da30158d30fed1106002bb71674776bd", "patch": "@@ -2917,14 +2917,13 @@ class ExprVisitor : public Visitor\n \n   void visit (VectorExp *e) final override\n   {\n-    tree type = build_ctype (e->type);\n-\n     /* First handle array literal expressions.  */\n     if (e->e1->op == EXP::arrayLiteral)\n       {\n \tArrayLiteralExp *ale = e->e1->isArrayLiteralExp ();\n \tvec <constructor_elt, va_gc> *elms = NULL;\n \tbool constant_p = true;\n+\ttree type = build_ctype (e->type);\n \n \tvec_safe_reserve (elms, ale->elements->length);\n \tfor (size_t i = 0; i < ale->elements->length; i++)\n@@ -2944,9 +2943,16 @@ class ExprVisitor : public Visitor\n \telse\n \t  this->result_ = build_constructor (type, elms);\n       }\n+    else if (e->e1->type->toBasetype ()->ty == TY::Tsarray)\n+      {\n+\t/* Build a vector representation from a static array.  */\n+\tthis->result_ = convert_expr (build_expr (e->e1, this->constp_),\n+\t\t\t\t      e->e1->type, e->type);\n+      }\n     else\n       {\n \t/* Build constructor from single value.  */\n+\ttree type = build_ctype (e->type);\n \ttree value = d_convert (TREE_TYPE (type),\n \t\t\t\tbuild_expr (e->e1, this->constp_, true));\n \tthis->result_ = build_vector_from_val (type, value);"}, {"sha": "e5f5751f6db382ed8f7a22f780a825ce69f7a657", "filename": "gcc/d/toir.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329bef49da30158d30fed1106002bb71674776bd/gcc%2Fd%2Ftoir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329bef49da30158d30fed1106002bb71674776bd/gcc%2Fd%2Ftoir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftoir.cc?ref=329bef49da30158d30fed1106002bb71674776bd", "patch": "@@ -1022,6 +1022,7 @@ class IRVisitor : public Visitor\n \t    /* Generate: (<retval> = expr, return <retval>);  */\n \t    tree expr = build_expr_dtor (s->exp);\n \t    tree init = stabilize_expr (&expr);\n+\t    expr = convert_for_rvalue (expr, s->exp->type, type);\n \t    expr = build_assign (INIT_EXPR, this->func_->shidden, expr);\n \t    add_stmt (compound_expr (init, expr));\n \t  }"}, {"sha": "f635eabc745c7f735a05b71a68c365795c0fd15b", "filename": "gcc/testsuite/gdc.dg/pr106139a.d", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329bef49da30158d30fed1106002bb71674776bd/gcc%2Ftestsuite%2Fgdc.dg%2Fpr106139a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329bef49da30158d30fed1106002bb71674776bd/gcc%2Ftestsuite%2Fgdc.dg%2Fpr106139a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr106139a.d?ref=329bef49da30158d30fed1106002bb71674776bd", "patch": "@@ -0,0 +1,36 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=106139\n+// { dg-do compile }\n+\n+alias A = int[4];\n+\n+static if (__traits(compiles, __vector(A))):\n+\n+A vector2array(__vector(A) v)\n+{\n+    return cast(A)v;\n+}\n+\n+void vector2array(ref A a, __vector(A) v)\n+{\n+    a = cast(A)v;\n+}\n+\n+__vector(A) array2vector(A a)\n+{\n+    return cast(__vector(A)) a;\n+}\n+\n+void array2vector(ref __vector(A) v, A a)\n+{\n+    v = cast(__vector(A))a;\n+}\n+\n+A vector2array_array(__vector(A) v)\n+{\n+    return v.array;\n+}\n+\n+void vector2array_array(ref A a, __vector(A) v)\n+{\n+    a = v.array;\n+}"}, {"sha": "f9caf026f86c64dd5d27c24551e0d9a082cd0bfa", "filename": "gcc/testsuite/gdc.dg/pr106139b.d", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329bef49da30158d30fed1106002bb71674776bd/gcc%2Ftestsuite%2Fgdc.dg%2Fpr106139b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329bef49da30158d30fed1106002bb71674776bd/gcc%2Ftestsuite%2Fgdc.dg%2Fpr106139b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr106139b.d?ref=329bef49da30158d30fed1106002bb71674776bd", "patch": "@@ -0,0 +1,36 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=106139\n+// { dg-do compile }\n+\n+alias A = float[4];\n+\n+static if (__traits(compiles, __vector(A))):\n+\n+A vector2array(__vector(A) v)\n+{\n+    return cast(A)v;\n+}\n+\n+void vector2array(ref A a, __vector(A) v)\n+{\n+    a = cast(A)v;\n+}\n+\n+__vector(A) array2vector(A a)\n+{\n+    return cast(__vector(A)) a;\n+}\n+\n+void array2vector(ref __vector(A) v, A a)\n+{\n+    v = cast(__vector(A))a;\n+}\n+\n+A vector2array_array(__vector(A) v)\n+{\n+    return v.array;\n+}\n+\n+void vector2array_array(ref A a, __vector(A) v)\n+{\n+    a = v.array;\n+}"}, {"sha": "3b6b7a83341045fd13271701f92aae68c168895f", "filename": "gcc/testsuite/gdc.dg/pr106139c.d", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329bef49da30158d30fed1106002bb71674776bd/gcc%2Ftestsuite%2Fgdc.dg%2Fpr106139c.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329bef49da30158d30fed1106002bb71674776bd/gcc%2Ftestsuite%2Fgdc.dg%2Fpr106139c.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr106139c.d?ref=329bef49da30158d30fed1106002bb71674776bd", "patch": "@@ -0,0 +1,27 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=106139\n+// { dg-do compile }\n+\n+alias V = int[4];\n+alias A = float[4];\n+\n+static if (__traits(compiles, __vector(V))):\n+\n+A vector2array(__vector(V) v)\n+{\n+    return cast(A)v;\n+}\n+\n+void vector2array(ref A a, __vector(V) v)\n+{\n+    a = cast(A)v;\n+}\n+\n+__vector(V) array2vector(A a)\n+{\n+    return cast(__vector(V)) a;\n+}\n+\n+void array2vector(ref __vector(V) v, A a)\n+{\n+    v = cast(__vector(V))a;\n+}"}, {"sha": "4c6f0ef3a3a748512ccd874705cc9a4fc8cf1912", "filename": "gcc/testsuite/gdc.dg/pr106139d.d", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329bef49da30158d30fed1106002bb71674776bd/gcc%2Ftestsuite%2Fgdc.dg%2Fpr106139d.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329bef49da30158d30fed1106002bb71674776bd/gcc%2Ftestsuite%2Fgdc.dg%2Fpr106139d.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr106139d.d?ref=329bef49da30158d30fed1106002bb71674776bd", "patch": "@@ -0,0 +1,27 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=106139\n+// { dg-do compile }\n+\n+alias V = float[4];\n+alias A = int[4];\n+\n+static if (__traits(compiles, __vector(V))):\n+\n+A vector2array(__vector(V) v)\n+{\n+    return cast(A)v;\n+}\n+\n+void vector2array(ref A a, __vector(V) v)\n+{\n+    a = cast(A)v;\n+}\n+\n+__vector(V) array2vector(A a)\n+{\n+    return cast(__vector(V)) a;\n+}\n+\n+void array2vector(ref __vector(V) v, A a)\n+{\n+    v = cast(__vector(V))a;\n+}"}]}