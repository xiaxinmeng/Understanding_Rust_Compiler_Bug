{"sha": "6568f34b01c7ade5d2fbe0eb19e2d998a201fb02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU2OGYzNGIwMWM3YWRlNWQyZmJlMGViMTllMmQ5OThhMjAxZmIwMg==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2005-10-21T17:54:20Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2005-10-21T17:54:20Z"}, "message": "Fix bug with -MM -MG.\n\nPR preprocessor/15220\n* files.c (_cpp_find_file): New parameter angle_brackets.  Fix all\ncallers.  Pass to open_file_failed.\n(open_file_failed): New parameter angle_brackets.  Fix all callers.\nUse in print_dep assignment.\n* init.c (cpp_read_main_file): Pass additional arg to _cpp_find_file.\n* internal.h (_cpp_find_file): Add new parm to declaration.\n\nFrom-SVN: r105757", "tree": {"sha": "cc20eca9ca98c66894b068431e563daeceb0a0f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc20eca9ca98c66894b068431e563daeceb0a0f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6568f34b01c7ade5d2fbe0eb19e2d998a201fb02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6568f34b01c7ade5d2fbe0eb19e2d998a201fb02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6568f34b01c7ade5d2fbe0eb19e2d998a201fb02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6568f34b01c7ade5d2fbe0eb19e2d998a201fb02/comments", "author": null, "committer": null, "parents": [{"sha": "960d350257c380f7516201b4f666e09c958f7c42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/960d350257c380f7516201b4f666e09c958f7c42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/960d350257c380f7516201b4f666e09c958f7c42"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "766e5bf21d4d2c048cbc6ae3c4608e68297ccf06", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6568f34b01c7ade5d2fbe0eb19e2d998a201fb02/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6568f34b01c7ade5d2fbe0eb19e2d998a201fb02/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=6568f34b01c7ade5d2fbe0eb19e2d998a201fb02", "patch": "@@ -1,3 +1,13 @@\n+2005-10-14  James E Wilson  <wilson@specifix.com>\n+\n+\tPR preprocessor/15220\n+\t* files.c (_cpp_find_file): New parameter angle_brackets.  Fix all\n+\tcallers.  Pass to open_file_failed.\n+\t(open_file_failed): New parameter angle_brackets.  Fix all callers.\n+\tUse in print_dep assignment.\n+\t* init.c (cpp_read_main_file): Pass additional arg to _cpp_find_file.\n+\t* internal.h (_cpp_find_file): Add new parm to declaration.\n+\t\n 2005-10-08  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* configure.ac: Require 64-bit int for arm*-*-*eabi*."}, {"sha": "3951515da393e5bed90d38c2f441db9ed9dc5333", "filename": "libcpp/files.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6568f34b01c7ade5d2fbe0eb19e2d998a201fb02/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6568f34b01c7ade5d2fbe0eb19e2d998a201fb02/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=6568f34b01c7ade5d2fbe0eb19e2d998a201fb02", "patch": "@@ -158,7 +158,7 @@ static bool should_stack_file (cpp_reader *, _cpp_file *file, bool import);\n static struct cpp_dir *search_path_head (cpp_reader *, const char *fname,\n \t\t\t\t int angle_brackets, enum include_type);\n static const char *dir_name_of_file (_cpp_file *file);\n-static void open_file_failed (cpp_reader *pfile, _cpp_file *file);\n+static void open_file_failed (cpp_reader *pfile, _cpp_file *file, int);\n static struct file_hash_entry *search_cache (struct file_hash_entry *head,\n \t\t\t\t\t     const cpp_dir *start_dir);\n static _cpp_file *make_cpp_file (cpp_reader *, cpp_dir *, const char *fname);\n@@ -331,7 +331,7 @@ find_file_in_dir (cpp_reader *pfile, _cpp_file *file, bool *invalid_pch)\n \n       if (file->err_no != ENOENT)\n \t{\n-\t  open_file_failed (pfile, file);\n+\t  open_file_failed (pfile, file, 0);\n \t  return true;\n \t}\n \n@@ -391,7 +391,7 @@ _cpp_find_failed (_cpp_file *file)\n    to open_file().\n */\n _cpp_file *\n-_cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool fake)\n+_cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool fake, int angle_brackets)\n {\n   struct file_hash_entry *entry, **hash_slot;\n   _cpp_file *file;\n@@ -433,7 +433,7 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool f\n \t      return file;\n \t    }\n \n-\t  open_file_failed (pfile, file);\n+\t  open_file_failed (pfile, file, angle_brackets);\n \t  if (invalid_pch)\n \t    {\n \t      cpp_error (pfile, CPP_DL_ERROR,\n@@ -575,7 +575,7 @@ read_file (cpp_reader *pfile, _cpp_file *file)\n \n   if (file->fd == -1 && !open_file (file))\n     {\n-      open_file_failed (pfile, file);\n+      open_file_failed (pfile, file, 0);\n       return false;\n     }\n \n@@ -817,7 +817,7 @@ _cpp_stack_include (cpp_reader *pfile, const char *fname, int angle_brackets,\n   if (!dir)\n     return false;\n \n-  file = _cpp_find_file (pfile, fname, dir, false);\n+  file = _cpp_find_file (pfile, fname, dir, false, angle_brackets);\n \n   /* Compensate for the increment in linemap_add.  In the case of a\n      normal #include, we're currently at the start of the line\n@@ -834,10 +834,10 @@ _cpp_stack_include (cpp_reader *pfile, const char *fname, int angle_brackets,\n \n /* Could not open FILE.  The complication is dependency output.  */\n static void\n-open_file_failed (cpp_reader *pfile, _cpp_file *file)\n+open_file_failed (cpp_reader *pfile, _cpp_file *file, int angle_brackets)\n {\n   int sysp = pfile->line_table->highest_line > 1 && pfile->buffer ? pfile->buffer->sysp : 0;\n-  bool print_dep = CPP_OPTION (pfile, deps.style) > !!sysp;\n+  bool print_dep = CPP_OPTION (pfile, deps.style) > (angle_brackets || !!sysp);\n \n   errno = file->err_no;\n   if (print_dep && CPP_OPTION (pfile, deps.missing_files) && errno == ENOENT)\n@@ -1020,7 +1020,7 @@ _cpp_cleanup_files (cpp_reader *pfile)\n void\n _cpp_fake_include (cpp_reader *pfile, const char *fname)\n {\n-  _cpp_find_file (pfile, fname, pfile->buffer->file->dir, true);\n+  _cpp_find_file (pfile, fname, pfile->buffer->file->dir, true, 0);\n }\n \n /* Not everyone who wants to set system-header-ness on a buffer can\n@@ -1105,7 +1105,7 @@ _cpp_compare_file_date (cpp_reader *pfile, const char *fname,\n   if (!dir)\n     return -1;\n \n-  file = _cpp_find_file (pfile, fname, dir, false);\n+  file = _cpp_find_file (pfile, fname, dir, false, angle_brackets);\n   if (file->err_no)\n     return -1;\n \n@@ -1479,7 +1479,7 @@ _cpp_save_file_entries (cpp_reader *pfile, FILE *fp)\n \n \t  if (!open_file (f))\n \t    {\n-\t      open_file_failed (pfile, f);\n+\t      open_file_failed (pfile, f, 0);\n \t      return false;\n \t    }\n \t  ff = fdopen (f->fd, \"rb\");"}, {"sha": "3074f96b5c8b9905db5232c0c9e8a43657e6cfd3", "filename": "libcpp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6568f34b01c7ade5d2fbe0eb19e2d998a201fb02/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6568f34b01c7ade5d2fbe0eb19e2d998a201fb02/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=6568f34b01c7ade5d2fbe0eb19e2d998a201fb02", "patch": "@@ -467,7 +467,7 @@ cpp_read_main_file (cpp_reader *pfile, const char *fname)\n     }\n \n   pfile->main_file\n-    = _cpp_find_file (pfile, fname, &pfile->no_search_path, false);\n+    = _cpp_find_file (pfile, fname, &pfile->no_search_path, false, 0);\n   if (_cpp_find_failed (pfile->main_file))\n     return NULL;\n "}, {"sha": "4aa6dcc510b850cf2f1d28ba02dea4ff00b2c9f7", "filename": "libcpp/internal.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6568f34b01c7ade5d2fbe0eb19e2d998a201fb02/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6568f34b01c7ade5d2fbe0eb19e2d998a201fb02/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=6568f34b01c7ade5d2fbe0eb19e2d998a201fb02", "patch": "@@ -503,8 +503,8 @@ extern void _cpp_destroy_hashtable (cpp_reader *);\n \n /* In files.c */\n typedef struct _cpp_file _cpp_file;\n-extern _cpp_file *_cpp_find_file (cpp_reader *, const char *fname,\n-\t\t\t\t  cpp_dir *start_dir, bool fake);\n+extern _cpp_file *_cpp_find_file (cpp_reader *, const char *, cpp_dir *,\n+\t\t\t\t  bool, int);\n extern bool _cpp_find_failed (_cpp_file *);\n extern void _cpp_mark_file_once_only (cpp_reader *, struct _cpp_file *);\n extern void _cpp_fake_include (cpp_reader *, const char *);"}]}