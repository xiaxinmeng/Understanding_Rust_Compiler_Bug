{"sha": "0f67a82f746f54701bea05608502944ca26ae715", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY2N2E4MmY3NDZmNTQ3MDFiZWEwNTYwODUwMjk0NGNhMjZhZTcxNQ==", "commit": {"author": {"name": "Lee Millward", "email": "lee.millward@codesourcery.com", "date": "2006-08-26T17:41:18Z"}, "committer": {"name": "Lee Millward", "email": "lmillward@gcc.gnu.org", "date": "2006-08-26T17:41:18Z"}, "message": "re PR c++/28736 (ICE with friend of invalid template class)\n\n        PR c++/28736\n        PR c++/28737\n        PR c++/28738\n        * pt.c (process_template_parm): Store invalid template\n        parameters as a TREE_LIST with a TREE_VALUE of error_mark_node.\n        (push_inline_template_parms_recursive): Check for template\n        parameters having a TREE_VALUE of error_mark_node rather than\n        check the parameter itself.\n        (mangle_class_name_for_template): Likewise.\n        (comp_template_parms): When comparing the individual template\n        parameters, return 1 if either is error_mark_node.\n        (current_template_args): Robustify.\n        (redeclare_class_template): Likewise.\n\n        * g++.dg/template/void10.C: New test.\n        * g++.dg/template/void8.C: New test.\n        * g++.dg/template/void9.C: New test.\n\n        * g++.dg/template/void3.C: Adjust error markers.\n        * g++.dg/template/void4.C: Likewise.\n        * g++.dg/template/crash55.C: Likewise.\n        * g++.dg/template/void7.C: Likewise.\n\nFrom-SVN: r116473", "tree": {"sha": "17042b9752adae54363119249db31c45d318974e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17042b9752adae54363119249db31c45d318974e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f67a82f746f54701bea05608502944ca26ae715", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f67a82f746f54701bea05608502944ca26ae715", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f67a82f746f54701bea05608502944ca26ae715", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f67a82f746f54701bea05608502944ca26ae715/comments", "author": null, "committer": null, "parents": [{"sha": "9618502bff5f70682077580ff083fe82160b4d7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9618502bff5f70682077580ff083fe82160b4d7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9618502bff5f70682077580ff083fe82160b4d7a"}], "stats": {"total": 124, "additions": 94, "deletions": 30}, "files": [{"sha": "e219547c545c0f4c553cbe62d4a7efbc9d61cdd4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67a82f746f54701bea05608502944ca26ae715/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67a82f746f54701bea05608502944ca26ae715/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0f67a82f746f54701bea05608502944ca26ae715", "patch": "@@ -1,3 +1,19 @@\n+2006-08-26  Lee Millward  <lee.millward@codesourcery.com>\n+\n+        PR c++/28736\n+        PR c++/28737\n+        PR c++/28738\n+        * pt.c (process_template_parm): Store invalid template\n+        parameters as a TREE_LIST with a TREE_VALUE of error_mark_node.\n+        (push_inline_template_parms_recursive): Check for template\n+        parameters having a TREE_VALUE of error_mark_node rather than\n+        check the parameter itself.\n+        (mangle_class_name_for_template): Likewise.\n+        (comp_template_parms): When comparing the individual template\n+        parameters, return 1 if either is error_mark_node.\n+        (current_template_args): Robustify.\n+        (redeclare_class_template): Likewise.\n+\t\n 2006-08-26  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/28588"}, {"sha": "5e0c9541b9a7194f1cc58d2f40c291e0fedf69b3", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 37, "deletions": 26, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67a82f746f54701bea05608502944ca26ae715/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67a82f746f54701bea05608502944ca26ae715/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0f67a82f746f54701bea05608502944ca26ae715", "patch": "@@ -336,12 +336,11 @@ push_inline_template_parms_recursive (tree parmlist, int levels)\n \t       NULL);\n   for (i = 0; i < TREE_VEC_LENGTH (parms); ++i)\n     {\n-      tree parm;\n+      tree parm = TREE_VALUE (TREE_VEC_ELT (parms, i));\n \n-      if (TREE_VEC_ELT (parms, i) == error_mark_node)\n-        continue;\n+      if (parm == error_mark_node)\n+\tcontinue;\n \n-      parm = TREE_VALUE (TREE_VEC_ELT (parms, i));\n       gcc_assert (DECL_P (parm));\n \n       switch (TREE_CODE (parm))\n@@ -2212,15 +2211,13 @@ comp_template_parms (tree parms1, tree parms2)\n \n       for (i = 0; i < TREE_VEC_LENGTH (t2); ++i)\n \t{\n-          tree parm1;\n-          tree parm2;\n+          tree parm1 = TREE_VALUE (TREE_VEC_ELT (t1, i));\n+          tree parm2 = TREE_VALUE (TREE_VEC_ELT (t2, i));\n \n-          if (TREE_VEC_ELT (t1, i) == error_mark_node\n-              || TREE_VEC_ELT (t2, i) == error_mark_node)\n-            continue;\n-\n-\t  parm1 = TREE_VALUE (TREE_VEC_ELT (t1, i));\n-          parm2 = TREE_VALUE (TREE_VEC_ELT (t2, i));\n+          /* If either of the template parameters are invalid, assume\n+             they match for the sake of error recovery. */\n+          if (parm1 == error_mark_node || parm2 == error_mark_node)\n+            return 1;\n \n \t  if (TREE_CODE (parm1) != TREE_CODE (parm2))\n \t    return 0;\n@@ -2352,6 +2349,7 @@ process_template_parm (tree list, tree parm, bool is_non_type)\n {\n   tree decl = 0;\n   tree defval;\n+  tree err_parm_list;\n   int idx = 0;\n \n   gcc_assert (TREE_CODE (parm) == TREE_LIST);\n@@ -2361,7 +2359,7 @@ process_template_parm (tree list, tree parm, bool is_non_type)\n     {\n       tree p = tree_last (list);\n \n-      if (p && p != error_mark_node)\n+      if (p && TREE_VALUE (p) != error_mark_node)\n         {\n           p = TREE_VALUE (p);\n           if (TREE_CODE (p) == TYPE_DECL || TREE_CODE (p) == TEMPLATE_DECL)\n@@ -2382,7 +2380,11 @@ process_template_parm (tree list, tree parm, bool is_non_type)\n       SET_DECL_TEMPLATE_PARM_P (parm);\n \n       if (TREE_TYPE (parm) == error_mark_node)\n-\treturn chainon(list, error_mark_node);\n+        {\n+          err_parm_list = build_tree_list (defval, parm);\n+          TREE_VALUE (err_parm_list) = error_mark_node;\n+\t   return chainon (list, err_parm_list);\n+        }\n       else\n       {\n \t/* [temp.param]\n@@ -2391,7 +2393,11 @@ process_template_parm (tree list, tree parm, bool is_non_type)\n \t   ignored when determining its type.  */\n \tTREE_TYPE (parm) = TYPE_MAIN_VARIANT (TREE_TYPE (parm));\n \tif (invalid_nontype_parm_type_p (TREE_TYPE (parm), 1))\n-\t  return chainon(list, error_mark_node);\n+          {\n+            err_parm_list = build_tree_list (defval, parm);\n+            TREE_VALUE (err_parm_list) = error_mark_node;\n+\t     return chainon (list, err_parm_list);\n+          }\n       }\n \n       /* A template parameter is not modifiable.  */\n@@ -2522,11 +2528,15 @@ current_template_args (void)\n \t    {\n \t      t = TREE_VALUE (t);\n \n-\t      if (TREE_CODE (t) == TYPE_DECL\n-\t\t  || TREE_CODE (t) == TEMPLATE_DECL)\n-\t\tt = TREE_TYPE (t);\n-\t      else\n-\t\tt = DECL_INITIAL (t);\n+\t      if (t != error_mark_node)\n+\t\t{\n+\t\t  if (TREE_CODE (t) == TYPE_DECL\n+\t\t      || TREE_CODE (t) == TEMPLATE_DECL)\n+\t\t    t = TREE_TYPE (t);\n+\t\t  else\n+\t\t    t = DECL_INITIAL (t);\n+\t\t}\n+\n \t      TREE_VEC_ELT (a, i) = t;\n \t    }\n \t}\n@@ -3350,9 +3360,10 @@ redeclare_class_template (tree type, tree parms)\n \n       /* TMPL_PARM and PARM can be either TYPE_DECL, PARM_DECL, or\n \t TEMPLATE_DECL.  */\n-      if (TREE_CODE (tmpl_parm) != TREE_CODE (parm)\n-\t  || (TREE_CODE (tmpl_parm) != TYPE_DECL\n-\t      && !same_type_p (TREE_TYPE (tmpl_parm), TREE_TYPE (parm))))\n+      if (tmpl_parm != error_mark_node\n+\t   && (TREE_CODE (tmpl_parm) != TREE_CODE (parm)\n+\t   || (TREE_CODE (tmpl_parm) != TYPE_DECL\n+\t       && !same_type_p (TREE_TYPE (tmpl_parm), TREE_TYPE (parm)))))\n \t{\n \t  error (\"template parameter %q+#D\", tmpl_parm);\n \t  error (\"redeclared here as %q#D\", parm);\n@@ -4207,12 +4218,12 @@ mangle_class_name_for_template (const char* name, tree parms, tree arglist)\n       tree parm;\n       tree arg;\n \n-      if (TREE_VEC_ELT (parms, i) == error_mark_node)\n-        continue;\n-\n       parm = TREE_VALUE (TREE_VEC_ELT (parms, i));\n       arg = TREE_VEC_ELT (arglist, i);\n \n+      if (parm == error_mark_node)\n+\tcontinue;\n+\n       if (i)\n \tccat (',');\n "}, {"sha": "1df799676b4b389198df2e2c352424960accd95f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67a82f746f54701bea05608502944ca26ae715/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67a82f746f54701bea05608502944ca26ae715/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f67a82f746f54701bea05608502944ca26ae715", "patch": "@@ -1,3 +1,19 @@\n+2006-08-26  Lee Millward  <lee.millward@codesourcery.com>\n+\n+        PR c++/28736\n+        * g++.dg/template/void10.C: New test.\n+\n+        PR c++/28737\n+        * g++.dg/template/void8.C: New test.\n+\n+        PR c+_+/28738\n+        * g++.dg/template/void9.C: New test.\n+\n+        * g++.dg/template/void3.C: Adjust error markers.\n+        * g++.dg/template/void4.C: Likewise.\n+        * g++.dg/template/crash55.C: Likewise.\n+        * g++.dg/template/void7.C: Likewise\n+\t\n 2006-08-26  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/28588"}, {"sha": "0e3fe4c3a5939b8e1a314d9d719ab0bceb995ae9", "filename": "gcc/testsuite/g++.dg/template/crash55.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67a82f746f54701bea05608502944ca26ae715/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67a82f746f54701bea05608502944ca26ae715/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash55.C?ref=0f67a82f746f54701bea05608502944ca26ae715", "patch": "@@ -3,4 +3,4 @@\n template<typename class T, T = T()> // { dg-error \"nested-name-specifier|two or more|valid type\" }\n struct A {};                        // { dg-error \"definition\"\n \n-template<int> void foo(A<int>);     // { dg-error \"mismatch|constant\" }\n+template<int> void foo(A<int>);     // { dg-error \"mismatch|constant|template argument\" }"}, {"sha": "56e0b6d2e5b88f606f7832f1fb4b1e391d7d96c0", "filename": "gcc/testsuite/g++.dg/template/void10.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67a82f746f54701bea05608502944ca26ae715/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67a82f746f54701bea05608502944ca26ae715/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid10.C?ref=0f67a82f746f54701bea05608502944ca26ae715", "patch": "@@ -0,0 +1,10 @@\n+//PR c++/28736\n+\n+template<void> struct A                 // { dg-error \"not a valid type\" }\n+{\n+    template<typename> friend struct B;\n+};\n+\n+template<typename> struct B {};\n+\n+B<int> b;                              // { dg-error \"template argument|invalid type\" }"}, {"sha": "bb59934ffe4f7703b28e9ed153c8e71e443d59a1", "filename": "gcc/testsuite/g++.dg/template/void3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67a82f746f54701bea05608502944ca26ae715/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67a82f746f54701bea05608502944ca26ae715/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid3.C?ref=0f67a82f746f54701bea05608502944ca26ae715", "patch": "@@ -1,5 +1,5 @@\n //PR c++/28637\n \n template<void> struct A {};  // { dg-error \"not a valid type\" }\n-A<0> a;\n+A<0> a;                      // { dg-error \"type\" }\n "}, {"sha": "fe30b2e3736bcdb76dac9fc82b771760de39b4ab", "filename": "gcc/testsuite/g++.dg/template/void4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67a82f746f54701bea05608502944ca26ae715/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67a82f746f54701bea05608502944ca26ae715/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid4.C?ref=0f67a82f746f54701bea05608502944ca26ae715", "patch": "@@ -4,4 +4,4 @@ template<void> struct A;  // { dg-error \"not a valid type\" }\n \n template<template<int> class> struct B {};\n \n-B<A> b;\n+B<A> b;                  // { dg-error \"template|invalid type\" }"}, {"sha": "95d87a2073220dbcd608dcb6a38fa7cbcf9ea8bd", "filename": "gcc/testsuite/g++.dg/template/void7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67a82f746f54701bea05608502944ca26ae715/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67a82f746f54701bea05608502944ca26ae715/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid7.C?ref=0f67a82f746f54701bea05608502944ca26ae715", "patch": "@@ -5,4 +5,4 @@ template<void> struct A         // { dg-error \"not a valid type\" }\n   static int i;\n };\n \n-A<0> a;\n+A<0> a;                        // { dg-error \"invalid type|not a valid type\" }"}, {"sha": "e45c91c044c2021497a34c92f7558db45f84643b", "filename": "gcc/testsuite/g++.dg/template/void8.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67a82f746f54701bea05608502944ca26ae715/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67a82f746f54701bea05608502944ca26ae715/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid8.C?ref=0f67a82f746f54701bea05608502944ca26ae715", "patch": "@@ -0,0 +1,7 @@\n+//PR c++/28737\n+\n+template<void> struct A;                // { dg-error \"not a valid type\" }\n+\n+template<typename> struct B;\n+\n+template<void N> struct B<A<N> > {};   // { dg-error \"not a valid type|declared|invalid\" }"}, {"sha": "bb2ed66ff381614bf6d7ba51b6a8bf32c618ef98", "filename": "gcc/testsuite/g++.dg/template/void9.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67a82f746f54701bea05608502944ca26ae715/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67a82f746f54701bea05608502944ca26ae715/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid9.C?ref=0f67a82f746f54701bea05608502944ca26ae715", "patch": "@@ -0,0 +1,4 @@\n+//PR c++/28738\n+\n+template<int,void> struct A {};    // { dg-error \"not a valid type\" }\n+template<int N> struct A<N,0> {};  // { dg-error \"not a valid type\" }"}]}