{"sha": "06bea5aa22da3dbda70f4b4670b484884aadb163", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZiZWE1YWEyMmRhM2RiZGE3MGY0YjQ2NzBiNDg0ODg0YWFkYjE2Mw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2003-01-24T15:50:44Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2003-01-24T15:50:44Z"}, "message": "arm.c (use_return_insn): Do not use a single return instruction for interrupt handelrs which have to...\n\n* config/arm/arm.c (use_return_insn): Do not use a single return instruction\nfor interrupt handelrs which have to create a stack frame.\n(arm_expand_prologue): Do not pre-bias the return address of interrupt handlers\nwhich create a stack frame.\n\nFrom-SVN: r61698", "tree": {"sha": "c35bbb2cf486a8347d43afaca2a8ca678ad729c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c35bbb2cf486a8347d43afaca2a8ca678ad729c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06bea5aa22da3dbda70f4b4670b484884aadb163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06bea5aa22da3dbda70f4b4670b484884aadb163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06bea5aa22da3dbda70f4b4670b484884aadb163", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06bea5aa22da3dbda70f4b4670b484884aadb163/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3a8699c7ab42ef0e974edaa2c02f3356613a449e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a8699c7ab42ef0e974edaa2c02f3356613a449e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a8699c7ab42ef0e974edaa2c02f3356613a449e"}], "stats": {"total": 81, "additions": 68, "deletions": 13}, "files": [{"sha": "382396c08be68d0c8f11106082311166f60c89c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bea5aa22da3dbda70f4b4670b484884aadb163/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bea5aa22da3dbda70f4b4670b484884aadb163/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06bea5aa22da3dbda70f4b4670b484884aadb163", "patch": "@@ -1,3 +1,53 @@\n+2003-01-24  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/arm/arm.c (use_return_insn): Do not use a single return\n+\tinstruction for interrupt handelrs which have to create a stack\n+\tframe.\n+\t(arm_expand_prologue): Do not pre-bias the return address of\n+\tinterrupt handlers which create a stack frame.\n+\n+2003-01-24  Nick Clifton  <nickc@redhat.com>\n+\n+\t* Add sh2e support:\n+\n+\t2002-08-12  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t\t* config/sh/sh.c (output_branch) [TARGET_SH2E]: Handle\n+\t\tmed_cbranches.  Fix logic in short_cbranches.\n+\n+\t2002-04-03  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t\t* config/sh/sh.md (delay for cbranch): Don't annul delay\n+\t\tslots on SH2e.\n+\t\t* config/sh/sh.c (sh_insn_length_adjustment): Add 2 for\n+\t\tcbranch with unfilled delay slot on SH2e.\n+\t\t(output_branch): Fill with a nop the delay slot of a\n+\t\tbranch that required a delay slot but didn't get one.\n+\n+\t2002-04-02  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t\t* doc/invoke.texi (SH options): Document -m2e.\n+\t\t* config/sh/crt1.asm: Add __SH2E__ Next to __SH3E__.\n+\t\t* config/sh/lib1funcs.asm: Likewise.\n+\t\t* config/sh/sh.c: Replace all uses of TARGET_SH3E with SH2E.\n+\t\t* config/sh/sh.h (CPP_SPEC): Define __SH2E__ for -m2e, and\n+\t\tnot __sh1__.\n+\t\t(CONDITIONAL_REGISTER_USAGE): Don't disable FP regs from\n+\t\tSH2E up.\n+\t\t(SH3E_BIT): Renamed to...\n+\t\t(SH_E_BIT): ... this.  Replace all uses.\n+\t\t(TARGET_SH2E): Define from SH_E_BIT and TARGET_SH2.\n+\t\tReplace all uses of TARGET_SH3E with TARGET_SH2E.\n+\t\t(TARGET_SWITCHES): Added 2e.\n+\t\t(OVERRIDE_OPTIONS): Set sh_cpu for SH2E.\n+\t\t(processor_type): Added PROCESSOR_SH2E.\n+\t\t* config/sh/sh.md: Replace all uses of TARGET_SH3E with\n+\t\tTARGET_SH2E, except in sqrtsf2_i.\n+\t\t(attribute cpu): Added sh2e.\n+\t\t* config/sh/t-sh (MULTILIB_OPTIONS): Replace m3e with m2e.\n+\t\t(MULTILIB_MATCHES): Use m2e multilib for m3e.\n+\t\t* config.gcc: Add sh2e target support.\n+\n 2003-01-24  Phil Edwards  <pme@gcc.gnu.org>\n \n \tRename -W to -Wextra."}, {"sha": "db27913b0d2e073759a971cfb751fe303ec170df", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06bea5aa22da3dbda70f4b4670b484884aadb163/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06bea5aa22da3dbda70f4b4670b484884aadb163/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=06bea5aa22da3dbda70f4b4670b484884aadb163", "patch": "@@ -938,6 +938,10 @@ use_return_insn (iscond)\n      consideration.  */\n   if (func_type & (ARM_FT_VOLATILE | ARM_FT_NAKED))\n     return 0;\n+\n+  /* So do interrupt functions that use the frame pointer.  */\n+  if (IS_INTERRUPT (func_type) && frame_pointer_needed)\n+    return 0;\n   \n   /* As do variadic functions.  */\n   if (current_function_pretend_args_size\n@@ -7092,7 +7096,7 @@ output_move_double (operands)\n \t\t    {\n \t\t      if (GET_CODE (otherops[2]) == CONST_INT)\n \t\t\t{\n-\t\t\t  switch (INTVAL (otherops[2]))\n+\t\t\t  switch ((int) INTVAL (otherops[2]))\n \t\t\t    {\n \t\t\t    case -8:\n \t\t\t      output_asm_insn (\"ldm%?db\\t%1, %M0\", otherops);\n@@ -7168,7 +7172,7 @@ output_move_double (operands)\n \tcase PLUS:\n \t  if (GET_CODE (XEXP (XEXP (operands[0], 0), 1)) == CONST_INT)\n \t    {\n-\t      switch (INTVAL (XEXP (XEXP (operands[0], 0), 1)))\n+\t      switch ((int) INTVAL (XEXP (XEXP (operands[0], 0), 1)))\n \t\t{\n \t\tcase -8:\n \t\t  output_asm_insn (\"stm%?db\\t%m0, %M1\", operands);\n@@ -8813,18 +8817,19 @@ arm_expand_prologue ()\n       RTX_FRAME_RELATED_P (insn) = 1;\n     }\n \n-  /* If this is an interrupt service routine, and the link register is\n-     going to be pushed, subtracting four now will mean that the\n-     function return can be done with a single instruction.  */\n+  /* If this is an interrupt service routine, and the link register\n+     is going to be pushed, and we are not creating a stack frame,\n+     (which would involve an extra push of IP and a pop in the epilogue)\n+     subtracting four from LR now will mean that the function return\n+     can be done with a single instruction.  */\n   if ((func_type == ARM_FT_ISR || func_type == ARM_FT_FIQ)\n-      && (live_regs_mask & (1 << LR_REGNUM)) != 0)\n-    {\n-      emit_insn (gen_rtx_SET (SImode, \n-\t\t\t      gen_rtx_REG (SImode, LR_REGNUM),\n-\t\t\t      gen_rtx_PLUS (SImode,\n-\t\t\t\t    gen_rtx_REG (SImode, LR_REGNUM),\n-\t\t\t\t    GEN_INT (-4))));\n-    }\n+      && (live_regs_mask & (1 << LR_REGNUM)) != 0\n+      && ! frame_pointer_needed)\n+    emit_insn (gen_rtx_SET (SImode, \n+\t\t\t    gen_rtx_REG (SImode, LR_REGNUM),\n+\t\t\t    gen_rtx_PLUS (SImode,\n+\t\t\t\t\t  gen_rtx_REG (SImode, LR_REGNUM),\n+\t\t\t\t\t  GEN_INT (-4))));\n \n   if (live_regs_mask)\n     {"}]}