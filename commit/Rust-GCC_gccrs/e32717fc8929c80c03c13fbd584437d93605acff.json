{"sha": "e32717fc8929c80c03c13fbd584437d93605acff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMyNzE3ZmM4OTI5YzgwYzAzYzEzZmJkNTg0NDM3ZDkzNjA1YWNmZg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2008-07-10T00:57:16Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2008-07-10T00:57:16Z"}, "message": "unwind-cxx.h (__is_gxx_forced_unwind_class, [...]): Define for ARM EABI unwinder.\n\n\t* libsupc++/unwind-cxx.h (__is_gxx_forced_unwind_class,\n\t__GXX_INIT_FORCED_UNWIND_CLASS): Define for ARM EABI unwinder.\n\t* libsupc++/eh_personality.cc (PERSONALITY_FUNCTION): Call\n\t__GXX_INIT_FORCED_UNWIND_CLASS for forced unwind with ARM EABI\n\tunwinder.\n\t* libsupc++/eh_arm.cc (__cxa_type_match): Use\n\t__is_gxx_forced_unwind_class to check for forced unwind.\n\nFrom-SVN: r137683", "tree": {"sha": "f597df4271f339e12159827b75c215f562f335c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f597df4271f339e12159827b75c215f562f335c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e32717fc8929c80c03c13fbd584437d93605acff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e32717fc8929c80c03c13fbd584437d93605acff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e32717fc8929c80c03c13fbd584437d93605acff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e32717fc8929c80c03c13fbd584437d93605acff/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a222c04e0220207e42495df7c93366a337a7d9eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a222c04e0220207e42495df7c93366a337a7d9eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a222c04e0220207e42495df7c93366a337a7d9eb"}], "stats": {"total": 52, "additions": 47, "deletions": 5}, "files": [{"sha": "4271416deb9a2778ad1f5a38996caa13b4abb7b0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32717fc8929c80c03c13fbd584437d93605acff/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32717fc8929c80c03c13fbd584437d93605acff/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e32717fc8929c80c03c13fbd584437d93605acff", "patch": "@@ -1,3 +1,13 @@\n+2008-07-09  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* libsupc++/unwind-cxx.h (__is_gxx_forced_unwind_class,\n+\t__GXX_INIT_FORCED_UNWIND_CLASS): Define for ARM EABI unwinder.\n+\t* libsupc++/eh_personality.cc (PERSONALITY_FUNCTION): Call\n+\t__GXX_INIT_FORCED_UNWIND_CLASS for forced unwind with ARM EABI\n+\tunwinder.\n+\t* libsupc++/eh_arm.cc (__cxa_type_match): Use\n+\t__is_gxx_forced_unwind_class to check for forced unwind.\n+\n 2008-07-09  Andreas Beckmann  <gcc@abeckmann.de>\n \n \tPR libstdc++/36552"}, {"sha": "6f770e95663ca4bc5f8e38f5fde98bb078dbfb21", "filename": "libstdc++-v3/libsupc++/eh_arm.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32717fc8929c80c03c13fbd584437d93605acff/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_arm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32717fc8929c80c03c13fbd584437d93605acff/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_arm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_arm.cc?ref=e32717fc8929c80c03c13fbd584437d93605acff", "patch": "@@ -46,12 +46,14 @@ __cxa_type_match(_Unwind_Exception* ue_header,\n \t\t bool is_reference __attribute__((__unused__)),\n \t\t void** thrown_ptr_p)\n {\n-  bool foreign_exception = !__is_gxx_exception_class(ue_header->exception_class);\n+  bool forced_unwind = __is_gxx_forced_unwind_class(ue_header->exception_class);\n+  bool foreign_exception = !forced_unwind && !__is_gxx_exception_class(ue_header->exception_class);\n   __cxa_exception* xh = __get_exception_header_from_ue(ue_header);\n   const std::type_info* throw_type;\n \n-  // XXX What to do with forced unwind?\n-  if (foreign_exception)\n+  if (forced_unwind)\n+    throw_type = &typeid(abi::__forced_unwind);\n+  else if (foreign_exception)\n     throw_type = &typeid(abi::__foreign_exception);\n   else\n     throw_type = xh->exceptionType;"}, {"sha": "b7d957c4d3766101539cad58bc151dc2c5e22844", "filename": "libstdc++-v3/libsupc++/eh_personality.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32717fc8929c80c03c13fbd584437d93605acff/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32717fc8929c80c03c13fbd584437d93605acff/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc?ref=e32717fc8929c80c03c13fbd584437d93605acff", "patch": "@@ -544,8 +544,12 @@ PERSONALITY_FUNCTION (int version,\n \n #ifdef __ARM_EABI_UNWINDER__\n       throw_type = ue_header;\n-      if ((actions & _UA_FORCE_UNWIND)\n-\t  || foreign_exception)\n+      if (actions & _UA_FORCE_UNWIND)\n+\t{\n+\t  __GXX_INIT_FORCED_UNWIND_CLASS(ue_header->exception_class);\n+\t  thrown_ptr = 0;\n+\t}\n+      else if (foreign_exception)\n \tthrown_ptr = 0;\n #else\n       // During forced unwinding, match a magic exception type."}, {"sha": "75874fc5da41902c5f6d5e519b15b4d82940a126", "filename": "libstdc++-v3/libsupc++/unwind-cxx.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32717fc8929c80c03c13fbd584437d93605acff/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32717fc8929c80c03c13fbd584437d93605acff/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h?ref=e32717fc8929c80c03c13fbd584437d93605acff", "patch": "@@ -201,6 +201,32 @@ __GXX_INIT_EXCEPTION_CLASS(_Unwind_Exception_Class c)\n   c[7] = '\\0';\n }\n \n+static inline bool\n+__is_gxx_forced_unwind_class(_Unwind_Exception_Class c)\n+{\n+  return c[0] == 'G'\n+\t && c[1] == 'N'\n+\t && c[2] == 'U'\n+\t && c[3] == 'C'\n+\t && c[4] == 'F'\n+\t && c[5] == 'O'\n+\t && c[6] == 'R'\n+\t && c[7] == '\\0';\n+}\n+\n+static inline void\n+__GXX_INIT_FORCED_UNWIND_CLASS(_Unwind_Exception_Class c)\n+{\n+  c[0] = 'G';\n+  c[1] = 'N';\n+  c[2] = 'U';\n+  c[3] = 'C';\n+  c[4] = 'F';\n+  c[5] = 'O';\n+  c[6] = 'R';\n+  c[7] = '\\0';\n+}\n+\n static inline void*\n __gxx_caught_object(_Unwind_Exception* eo)\n {"}]}