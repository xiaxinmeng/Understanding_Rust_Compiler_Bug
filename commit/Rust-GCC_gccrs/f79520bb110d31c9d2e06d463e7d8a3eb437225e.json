{"sha": "f79520bb110d31c9d2e06d463e7d8a3eb437225e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc5NTIwYmIxMTBkMzFjOWQyZTA2ZDQ2M2U3ZDhhM2ViNDM3MjI1ZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-12-07T16:07:00Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-12-07T16:07:00Z"}, "message": "Fix missing range information for \"%q+D\" format code\n\ngcc/c-family/ChangeLog:\n\t* c-common.c (c_cpp_error): Update for change to\n\trich_location::set_range.\n\ngcc/fortran/ChangeLog:\n\t* error.c (gfc_format_decoder): Update for change of\n\ttext_info::set_range to text_info::set_location.\n\ngcc/ChangeLog:\n\t* pretty-print.c (text_info::set_range): Rename to...\n\t(text_info::set_location): ...this, converting 2nd param\n\tfrom source_range to a location_t.\n\t* pretty-print.h (text_info::set_location): Convert\n\tfrom inline function to external definition.\n\t(text_info::set_range): Delete.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/diagnostic-ranges-1.c: New test file.\n\t* gcc.dg/plugin/diagnostic-test-show-locus-bw.c\n\t(test_percent_q_plus_d): New test function.\n\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c\n\t(test_show_locus): Rewrite test code using\n\trich_location::set_range.  Add code to unit-test the \"%q+D\"\n\tformat code.\n\nlibcpp/ChangeLog:\n\t* include/line-map.h (rich_location::set_range): Add line_maps *\n\tparam; convert param from source_range to source_location.  Drop\n\t\"overwrite_loc_p\" param.\n\t* line-map.c (rich_location::set_range): Likewise, acting as if\n\t\"overwrite_loc_p\" were true, and getting range from the location.\n\nFrom-SVN: r231367", "tree": {"sha": "4276629584cb83bab17864b868f5ecbcc2a63e89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4276629584cb83bab17864b868f5ecbcc2a63e89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f79520bb110d31c9d2e06d463e7d8a3eb437225e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f79520bb110d31c9d2e06d463e7d8a3eb437225e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f79520bb110d31c9d2e06d463e7d8a3eb437225e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f79520bb110d31c9d2e06d463e7d8a3eb437225e/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f6788a1717390202936322b1d2377bab6c45c39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f6788a1717390202936322b1d2377bab6c45c39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f6788a1717390202936322b1d2377bab6c45c39"}], "stats": {"total": 156, "additions": 111, "deletions": 45}, "files": [{"sha": "80e848123c9ddc3d3d92302d155637488ffd45ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79520bb110d31c9d2e06d463e7d8a3eb437225e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79520bb110d31c9d2e06d463e7d8a3eb437225e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f79520bb110d31c9d2e06d463e7d8a3eb437225e", "patch": "@@ -1,3 +1,12 @@\n+2015-12-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* pretty-print.c (text_info::set_range): Rename to...\n+\t(text_info::set_location): ...this, converting 2nd param\n+\tfrom source_range to a location_t.\n+\t* pretty-print.h (text_info::set_location): Convert\n+\tfrom inline function to external definition.\n+\t(text_info::set_range): Delete.\n+\n 2015-12-07  Nathan Sidwell  <nathan@acm.org>\n \n \t* config/nvptx/nvptx.c (nvptx_assemble_decl_begin): Look inside"}, {"sha": "03a66eb22126eccc790b951e477e25b6852b5677", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79520bb110d31c9d2e06d463e7d8a3eb437225e/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79520bb110d31c9d2e06d463e7d8a3eb437225e/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f79520bb110d31c9d2e06d463e7d8a3eb437225e", "patch": "@@ -1,3 +1,8 @@\n+2015-12-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-common.c (c_cpp_error): Update for change to\n+\trich_location::set_range.\n+\n 2015-12-04  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* c-common.c (maybe_warn_shift_overflow): Warn on all overflows if"}, {"sha": "9bc02fcf85c5a4e74ef69276d38dd6f704dd2c78", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79520bb110d31c9d2e06d463e7d8a3eb437225e/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79520bb110d31c9d2e06d463e7d8a3eb437225e/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=f79520bb110d31c9d2e06d463e7d8a3eb437225e", "patch": "@@ -10161,9 +10161,7 @@ c_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level, int reason,\n       gcc_unreachable ();\n     }\n   if (done_lexing)\n-    richloc->set_range (0,\n-\t\t\tsource_range::from_location (input_location),\n-\t\t\ttrue, true);\n+    richloc->set_range (line_table, 0, input_location, true);\n   diagnostic_set_info_translated (&diagnostic, msg, ap,\n \t\t\t\t  richloc, dlevel);\n   diagnostic_override_option_index (&diagnostic,"}, {"sha": "8e74bec408637d7450376417e6a1ea60e07e4af4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79520bb110d31c9d2e06d463e7d8a3eb437225e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79520bb110d31c9d2e06d463e7d8a3eb437225e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f79520bb110d31c9d2e06d463e7d8a3eb437225e", "patch": "@@ -1,3 +1,8 @@\n+2015-12-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* error.c (gfc_format_decoder): Update for change of\n+\ttext_info::set_range to text_info::set_location.\n+\n 2015-12-05  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/68676"}, {"sha": "8f57affe653cd41e5053ea633cdc3ad2662dda89", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79520bb110d31c9d2e06d463e7d8a3eb437225e/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79520bb110d31c9d2e06d463e7d8a3eb437225e/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=f79520bb110d31c9d2e06d463e7d8a3eb437225e", "patch": "@@ -939,12 +939,11 @@ gfc_format_decoder (pretty_printer *pp,\n \t/* If location[0] != UNKNOWN_LOCATION means that we already\n \t   processed one of %C/%L.  */\n \tint loc_num = text->get_location (0) == UNKNOWN_LOCATION ? 0 : 1;\n-\tsource_range range\n-\t  = source_range::from_location (\n-\t      linemap_position_for_loc_and_offset (line_table,\n-\t\t\t\t\t\t   loc->lb->location,\n-\t\t\t\t\t\t   offset));\n-\ttext->set_range (loc_num, range, true);\n+\tlocation_t src_loc\n+\t  = linemap_position_for_loc_and_offset (line_table,\n+\t\t\t\t\t\t loc->lb->location,\n+\t\t\t\t\t\t offset);\n+\ttext->set_location (loc_num, src_loc, true);\n \tpp_string (pp, result[loc_num]);\n \treturn true;\n       }"}, {"sha": "33650746ae962f39c70277b4068bf6108c5df5aa", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79520bb110d31c9d2e06d463e7d8a3eb437225e/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79520bb110d31c9d2e06d463e7d8a3eb437225e/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=f79520bb110d31c9d2e06d463e7d8a3eb437225e", "patch": "@@ -31,14 +31,14 @@ along with GCC; see the file COPYING3.  If not see\n #include <iconv.h>\n #endif\n \n-/* Overwrite the range within this text_info's rich_location.\n+/* Overwrite the given location/range within this text_info's rich_location.\n    For use e.g. when implementing \"+\" in client format decoders.  */\n \n void\n-text_info::set_range (unsigned int idx, source_range range, bool caret_p)\n+text_info::set_location (unsigned int idx, location_t loc, bool show_caret_p)\n {\n   gcc_checking_assert (m_richloc);\n-  m_richloc->set_range (idx, range, caret_p, true);\n+  m_richloc->set_range (line_table, idx, loc, show_caret_p);\n }\n \n location_t"}, {"sha": "3dc1f6b43aa44b4e1adb11b35ddcb22205e74774", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79520bb110d31c9d2e06d463e7d8a3eb437225e/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79520bb110d31c9d2e06d463e7d8a3eb437225e/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=f79520bb110d31c9d2e06d463e7d8a3eb437225e", "patch": "@@ -37,14 +37,7 @@ struct text_info\n   void **x_data;\n   rich_location *m_richloc;\n \n-  inline void set_location (unsigned int idx, location_t loc, bool caret_p)\n-  {\n-    source_range src_range;\n-    src_range.m_start = loc;\n-    src_range.m_finish = loc;\n-    set_range (idx, src_range, caret_p);\n-  }\n-  void set_range (unsigned int idx, source_range range, bool caret_p);\n+  void set_location (unsigned int idx, location_t loc, bool caret_p);\n   location_t get_location (unsigned int index_of_location) const;\n };\n "}, {"sha": "93f3af2a201f777c943a0b7c5b1930b28da4ca9d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79520bb110d31c9d2e06d463e7d8a3eb437225e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79520bb110d31c9d2e06d463e7d8a3eb437225e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f79520bb110d31c9d2e06d463e7d8a3eb437225e", "patch": "@@ -1,3 +1,13 @@\n+2015-12-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/diagnostic-ranges-1.c: New test file.\n+\t* gcc.dg/plugin/diagnostic-test-show-locus-bw.c\n+\t(test_percent_q_plus_d): New test function.\n+\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c\n+\t(test_show_locus): Rewrite test code using\n+\trich_location::set_range.  Add code to unit-test the \"%q+D\"\n+\tformat code.\n+\n 2015-12-07  Martin Liska  <mliska@suse.cz>\n \n \t* g++.dg/ipa/pr66896.C: New test."}, {"sha": "369c0b3990067f4bb619891a175a94e4a30f154b", "filename": "gcc/testsuite/gcc.dg/diagnostic-ranges-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79520bb110d31c9d2e06d463e7d8a3eb437225e/gcc%2Ftestsuite%2Fgcc.dg%2Fdiagnostic-ranges-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79520bb110d31c9d2e06d463e7d8a3eb437225e/gcc%2Ftestsuite%2Fgcc.dg%2Fdiagnostic-ranges-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdiagnostic-ranges-1.c?ref=f79520bb110d31c9d2e06d463e7d8a3eb437225e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdiagnostics-show-caret -Wall\" } */\n+\n+void test_range_of_unused_variable (void)\n+{\n+  int redundant; /* { dg-warning \"unused variable\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   int redundant;\n+       ^~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+}"}, {"sha": "8d44078a29dea2cc167a417ebb57916de5c34a36", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-show-locus-bw.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79520bb110d31c9d2e06d463e7d8a3eb437225e/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-bw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79520bb110d31c9d2e06d463e7d8a3eb437225e/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-bw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-bw.c?ref=f79520bb110d31c9d2e06d463e7d8a3eb437225e", "patch": "@@ -190,3 +190,15 @@ void test_fixit_replace (void)\n    { dg-end-multiline-output \"\" } */\n #endif\n }\n+\n+/* Test of \"%q+D\" format code.  */\n+\n+int test_percent_q_plus_d (void)\n+{\n+  int local = 0; /* { dg-warning \"example of plus in format code\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   int local = 0;\n+       ^~~~~\n+   { dg-end-multiline-output \"\" } */\n+  return local;\n+}"}, {"sha": "02a2aef3d4ce1aeedb67c07d5976b967e4b3b329", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_test_show_locus.c", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79520bb110d31c9d2e06d463e7d8a3eb437225e/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79520bb110d31c9d2e06d463e7d8a3eb437225e/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c?ref=f79520bb110d31c9d2e06d463e7d8a3eb437225e", "patch": "@@ -224,9 +224,11 @@ test_show_locus (function *fun)\n       source_range src_range;\n       src_range.m_start = get_loc (line, 12);\n       src_range.m_finish = get_loc (line, 20);\n-      rich_location richloc (line_table, caret);\n-      richloc.set_range (0, src_range, true, false);\n-      warning_at_rich_loc (&richloc, 0, \"test\");\n+      location_t combined_loc = COMBINE_LOCATION_DATA (line_table,\n+\t\t\t\t\t\t       caret,\n+\t\t\t\t\t\t       src_range,\n+\t\t\t\t\t\t       NULL);\n+      warning_at (combined_loc, 0, \"test\");\n     }\n \n   /* Example of a very wide line, where the information of interest\n@@ -238,9 +240,11 @@ test_show_locus (function *fun)\n       source_range src_range;\n       src_range.m_start = get_loc (line, 90);\n       src_range.m_finish = get_loc (line, 98);\n-      rich_location richloc (line_table, caret);\n-      richloc.set_range (0, src_range, true, false);\n-      warning_at_rich_loc (&richloc, 0, \"test\");\n+      location_t combined_loc = COMBINE_LOCATION_DATA (line_table,\n+\t\t\t\t\t\t       caret,\n+\t\t\t\t\t\t       src_range,\n+\t\t\t\t\t\t       NULL);\n+      warning_at (combined_loc, 0, \"test\");\n     }\n \n   /* Example of multiple carets.  */\n@@ -313,6 +317,17 @@ test_show_locus (function *fun)\n       global_dc->caret_chars[0] = '^';\n       global_dc->caret_chars[1] = '^';\n     }\n+\n+  /* Example of using the \"%q+D\" format code, which as well as printing\n+     a quoted decl, overrides the given location to use the location of\n+     the decl.  */\n+  if (0 == strcmp (fnname, \"test_percent_q_plus_d\"))\n+    {\n+      const int line = fnstart_line + 3;\n+      tree local = (*fun->local_decls)[0];\n+      warning_at (input_location, 0,\n+\t\t  \"example of plus in format code for %q+D\", local);\n+    }\n }\n \n unsigned int"}, {"sha": "9b296fd836a3ad9be36f5bc0d32bf7bcbc52de77", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79520bb110d31c9d2e06d463e7d8a3eb437225e/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79520bb110d31c9d2e06d463e7d8a3eb437225e/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=f79520bb110d31c9d2e06d463e7d8a3eb437225e", "patch": "@@ -1,3 +1,11 @@\n+2015-12-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* include/line-map.h (rich_location::set_range): Add line_maps *\n+\tparam; convert param from source_range to source_location.  Drop\n+\t\"overwrite_loc_p\" param.\n+\t* line-map.c (rich_location::set_range): Likewise, acting as if\n+\t\"overwrite_loc_p\" were true, and getting range from the location.\n+\n 2015-11-20  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR 62314"}, {"sha": "73c583e6160d24af79c4e2ab5a28861ca5e928b7", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79520bb110d31c9d2e06d463e7d8a3eb437225e/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79520bb110d31c9d2e06d463e7d8a3eb437225e/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=f79520bb110d31c9d2e06d463e7d8a3eb437225e", "patch": "@@ -1376,8 +1376,8 @@ class rich_location\n   add_range (location_range *src_range);\n \n   void\n-  set_range (unsigned int idx, source_range src_range,\n-\t     bool show_caret_p, bool overwrite_loc_p);\n+  set_range (line_maps *set, unsigned int idx, source_location loc,\n+\t     bool show_caret_p);\n \n   unsigned int get_num_locations () const { return m_num_ranges; }\n "}, {"sha": "209d0fbe656c22a639ae2bc5292d21b51ae9316d", "filename": "libcpp/line-map.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79520bb110d31c9d2e06d463e7d8a3eb437225e/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79520bb110d31c9d2e06d463e7d8a3eb437225e/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=f79520bb110d31c9d2e06d463e7d8a3eb437225e", "patch": "@@ -2064,47 +2064,48 @@ rich_location::add_range (location_range *src_range)\n   m_ranges[m_num_ranges++] = *src_range;\n }\n \n-/* Add or overwrite the range given by IDX.  It must either\n-   overwrite an existing range, or add one *exactly* on the end of\n-   the array.\n+/* Add or overwrite the location given by IDX, setting its location to LOC,\n+   and setting its \"should my caret be printed\" flag to SHOW_CARET_P.\n \n-   This is primarily for use by gcc when implementing diagnostic\n-   format decoders e.g. the \"+\" in the C/C++ frontends, for handling\n-   format codes like \"%q+D\" (which writes the source location of a\n-   tree back into range 0 of the rich_location).\n+   It must either overwrite an existing location, or add one *exactly* on\n+   the end of the array.\n \n-   If SHOW_CARET_P is true, then the range should be rendered with\n-   a caret at its starting location.  This\n-   is for use by the Fortran frontend, for implementing the\n-   \"%C\" and \"%L\" format codes.  */\n+   This is primarily for use by gcc when implementing diagnostic format\n+   decoders e.g.\n+   - the \"+\" in the C/C++ frontends, for handling format codes like \"%q+D\"\n+     (which writes the source location of a tree back into location 0 of\n+     the rich_location), and\n+   - the \"%C\" and \"%L\" format codes in the Fortran frontend.  */\n \n void\n-rich_location::set_range (unsigned int idx, source_range src_range,\n-\t\t\t  bool show_caret_p, bool overwrite_loc_p)\n+rich_location::set_range (line_maps *set, unsigned int idx,\n+\t\t\t  source_location loc, bool show_caret_p)\n {\n   linemap_assert (idx < MAX_RANGES);\n \n   /* We can either overwrite an existing range, or add one exactly\n      on the end of the array.  */\n   linemap_assert (idx <= m_num_ranges);\n \n+  source_range src_range = get_range_from_loc (set, loc);\n+\n   location_range *locrange = &m_ranges[idx];\n   locrange->m_start\n     = linemap_client_expand_location_to_spelling_point (src_range.m_start);\n   locrange->m_finish\n     = linemap_client_expand_location_to_spelling_point (src_range.m_finish);\n \n   locrange->m_show_caret_p = show_caret_p;\n-  if (overwrite_loc_p)\n-    locrange->m_caret = locrange->m_start;\n+  locrange->m_caret\n+    = linemap_client_expand_location_to_spelling_point (loc);\n \n   /* Are we adding a range onto the end?  */\n   if (idx == m_num_ranges)\n     m_num_ranges = idx + 1;\n \n-  if (idx == 0 && overwrite_loc_p)\n+  if (idx == 0)\n     {\n-      m_loc = src_range.m_start;\n+      m_loc = loc;\n       /* Mark any cached value here as dirty.  */\n       m_have_expanded_location = false;\n     }"}]}