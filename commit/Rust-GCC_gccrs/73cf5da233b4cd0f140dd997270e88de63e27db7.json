{"sha": "73cf5da233b4cd0f140dd997270e88de63e27db7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNjZjVkYTIzM2I0Y2QwZjE0MGRkOTk3MjcwZTg4ZGU2M2UyN2RiNw==", "commit": {"author": {"name": "Nikhil Benesch", "email": "nikhil.benesch@gmail.com", "date": "2020-12-10T02:46:02Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-12-10T02:46:02Z"}, "message": "-fdump-go-spec: ignore type ordering of incomplete types\n\ngcc/:\n\t* godump.c (go_format_type): Don't consider whether a type has\n\tbeen seen when determining whether to output a type by name.\n\tConsider only the use_type_name parameter.\n\t(go_output_typedef): When outputting a typedef, format the\n\tdeclaration's original type, which contains the name of the\n\tunderlying type rather than the name of the typedef.\ngcc/testsuite:\n\t* gcc.misc-tests/godump-1.c: Add test case.", "tree": {"sha": "1d7f5273f95025f950822427d7966a11ccdf0625", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d7f5273f95025f950822427d7966a11ccdf0625"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73cf5da233b4cd0f140dd997270e88de63e27db7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73cf5da233b4cd0f140dd997270e88de63e27db7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73cf5da233b4cd0f140dd997270e88de63e27db7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73cf5da233b4cd0f140dd997270e88de63e27db7/comments", "author": {"login": "benesch", "id": 882976, "node_id": "MDQ6VXNlcjg4Mjk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/882976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benesch", "html_url": "https://github.com/benesch", "followers_url": "https://api.github.com/users/benesch/followers", "following_url": "https://api.github.com/users/benesch/following{/other_user}", "gists_url": "https://api.github.com/users/benesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/benesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benesch/subscriptions", "organizations_url": "https://api.github.com/users/benesch/orgs", "repos_url": "https://api.github.com/users/benesch/repos", "events_url": "https://api.github.com/users/benesch/events{/privacy}", "received_events_url": "https://api.github.com/users/benesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fe4f000ad113e44a8d68794013b7c751a3bc05d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe4f000ad113e44a8d68794013b7c751a3bc05d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fe4f000ad113e44a8d68794013b7c751a3bc05d"}], "stats": {"total": 56, "additions": 20, "deletions": 36}, "files": [{"sha": "033b2c59f3c6326c8293def26abcb8523da408ff", "filename": "gcc/godump.c", "status": "modified", "additions": 17, "deletions": 36, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73cf5da233b4cd0f140dd997270e88de63e27db7/gcc%2Fgodump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73cf5da233b4cd0f140dd997270e88de63e27db7/gcc%2Fgodump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgodump.c?ref=73cf5da233b4cd0f140dd997270e88de63e27db7", "patch": "@@ -697,30 +697,39 @@ go_format_type (class godump_container *container, tree type,\n   ret = true;\n   ob = &container->type_obstack;\n \n-  if (TYPE_NAME (type) != NULL_TREE\n-      && (container->decls_seen.contains (type)\n-\t  || container->decls_seen.contains (TYPE_NAME (type)))\n+  if (use_type_name\n+      && TYPE_NAME (type) != NULL_TREE\n       && (AGGREGATE_TYPE_P (type)\n \t  || POINTER_TYPE_P (type)\n \t  || TREE_CODE (type) == FUNCTION_TYPE))\n     {\n       tree name;\n       void **slot;\n \n+      /* References to complex builtin types cannot be translated to\n+\tGo.  */\n+      if (DECL_P (TYPE_NAME (type))\n+\t  && DECL_IS_UNDECLARED_BUILTIN (TYPE_NAME (type)))\n+\tret = false;\n+\n       name = TYPE_IDENTIFIER (type);\n \n       slot = htab_find_slot (container->invalid_hash, IDENTIFIER_POINTER (name),\n \t\t\t     NO_INSERT);\n       if (slot != NULL)\n \tret = false;\n \n+      /* References to incomplete structs are permitted in many\n+\t contexts, like behind a pointer or inside of a typedef. So\n+\t consider any referenced struct a potential dummy type.  */\n+      if (RECORD_OR_UNION_TYPE_P (type))\n+       container->pot_dummy_types.add (IDENTIFIER_POINTER (name));\n+\n       obstack_1grow (ob, '_');\n       go_append_string (ob, name);\n       return ret;\n     }\n \n-  container->decls_seen.add (type);\n-\n   switch (TREE_CODE (type))\n     {\n     case TYPE_DECL:\n@@ -821,34 +830,6 @@ go_format_type (class godump_container *container, tree type,\n       break;\n \n     case POINTER_TYPE:\n-      if (use_type_name\n-          && TYPE_NAME (TREE_TYPE (type)) != NULL_TREE\n-          && (RECORD_OR_UNION_TYPE_P (TREE_TYPE (type))\n-\t      || (POINTER_TYPE_P (TREE_TYPE (type))\n-                  && (TREE_CODE (TREE_TYPE (TREE_TYPE (type)))\n-\t\t      == FUNCTION_TYPE))))\n-        {\n-\t  tree name;\n-\t  void **slot;\n-\n-\t  name = TYPE_IDENTIFIER (TREE_TYPE (type));\n-\n-\t  slot = htab_find_slot (container->invalid_hash,\n-\t\t\t\t IDENTIFIER_POINTER (name), NO_INSERT);\n-\t  if (slot != NULL)\n-\t    ret = false;\n-\n-\t  obstack_grow (ob, \"*_\", 2);\n-\t  go_append_string (ob, name);\n-\n-\t  /* The pointer here can be used without the struct or union\n-\t     definition.  So this struct or union is a potential dummy\n-\t     type.  */\n-\t  if (RECORD_OR_UNION_TYPE_P (TREE_TYPE (type)))\n-\t    container->pot_dummy_types.add (IDENTIFIER_POINTER (name));\n-\n-\t  return ret;\n-        }\n       if (TREE_CODE (TREE_TYPE (type)) == FUNCTION_TYPE)\n \tobstack_grow (ob, \"func\", 4);\n       else\n@@ -1107,7 +1088,7 @@ go_output_type (class godump_container *container)\n static void\n go_output_fndecl (class godump_container *container, tree decl)\n {\n-  if (!go_format_type (container, TREE_TYPE (decl), false, true, NULL, false))\n+  if (!go_format_type (container, TREE_TYPE (decl), true, true, NULL, false))\n     fprintf (go_dump_file, \"// \");\n   fprintf (go_dump_file, \"func _%s \",\n \t   IDENTIFIER_POINTER (DECL_NAME (decl)));\n@@ -1182,8 +1163,8 @@ go_output_typedef (class godump_container *container, tree decl)\n \treturn;\n       *slot = CONST_CAST (void *, (const void *) type);\n \n-      if (!go_format_type (container, TREE_TYPE (decl), true, false, NULL,\n-\t\t\t   false))\n+      if (!go_format_type (container, DECL_ORIGINAL_TYPE (decl), true, false,\n+\t\t\t   NULL, false))\n \t{\n \t  fprintf (go_dump_file, \"// \");\n \t  slot = htab_find_slot (container->invalid_hash, type, INSERT);"}, {"sha": "96c2586337484b75e36f7ea274186f15d867d11b", "filename": "gcc/testsuite/gcc.misc-tests/godump-1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73cf5da233b4cd0f140dd997270e88de63e27db7/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgodump-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73cf5da233b4cd0f140dd997270e88de63e27db7/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgodump-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgodump-1.c?ref=73cf5da233b4cd0f140dd997270e88de63e27db7", "patch": "@@ -471,6 +471,9 @@ typedef struct s_undef_t s_undef_t2;\n typedef struct s_fwd *s_fwd_p;\n /* { dg-final { scan-file godump-1.out \"(?n)^type _s_fwd_p \\\\*_s_fwd$\" } } */\n \n+struct s_fwd v_fwd;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _v_fwd _s_fwd\" } } */\n+\n struct s_fwd { };\n /* { dg-final { scan-file godump-1.out \"(?n)^type _s_fwd struct \\{ \\}$\" } } */\n "}]}