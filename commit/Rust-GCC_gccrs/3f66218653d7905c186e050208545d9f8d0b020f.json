{"sha": "3f66218653d7905c186e050208545d9f8d0b020f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y2NjIxODY1M2Q3OTA1YzE4NmUwNTAyMDg1NDVkOWY4ZDBiMDIwZg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-08-26T17:44:08Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-08-26T17:44:08Z"}, "message": "c-opts.c (find_opt): Don't complain about wrong languages here.\n\n\t* c-opts.c (find_opt): Don't complain about wrong languages\n\there.  Return exact matches even for wrong language.\n\t(c_common_decode_option): Complain about wrong languages\n\there.\n\nFrom-SVN: r56583", "tree": {"sha": "dc0b25913707000e58e9b178728a7b7471d099a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc0b25913707000e58e9b178728a7b7471d099a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f66218653d7905c186e050208545d9f8d0b020f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f66218653d7905c186e050208545d9f8d0b020f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f66218653d7905c186e050208545d9f8d0b020f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f66218653d7905c186e050208545d9f8d0b020f/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "00e3dddac064451e35ab15d75e2f05044e56fa6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00e3dddac064451e35ab15d75e2f05044e56fa6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00e3dddac064451e35ab15d75e2f05044e56fa6b"}], "stats": {"total": 50, "additions": 31, "deletions": 19}, "files": [{"sha": "552e434b0044538a2300b2ca14bda39993fa6825", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f66218653d7905c186e050208545d9f8d0b020f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f66218653d7905c186e050208545d9f8d0b020f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f66218653d7905c186e050208545d9f8d0b020f", "patch": "@@ -1,3 +1,10 @@\n+2002-08-26  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* c-opts.c (find_opt): Don't complain about wrong languages\n+\there.  Return exact matches even for wrong language.\n+\t(c_common_decode_option): Complain about wrong languages\n+\there.\n+\n 2002-08-24  Stuart Hastings  <stuart@apple.com>\n \n \t* function.h (struct function): Add flag"}, {"sha": "1cc2048b633c9511c92337fd6b185cddf14fe8a7", "filename": "gcc/c-opts.c", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f66218653d7905c186e050208545d9f8d0b020f/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f66218653d7905c186e050208545d9f8d0b020f/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=3f66218653d7905c186e050208545d9f8d0b020f", "patch": "@@ -374,15 +374,18 @@ missing_arg (opt_index)\n    Complications arise since some options can be suffixed with an\n    argument, and multiple complete matches can occur, e.g. -pedantic\n    and -pedantic-errors.  Also, some options are only accepted by some\n-   languages.  */\n+   languages.  If a switch matches for a different language and\n+   doesn't match any alternatives for the true front end, the index of\n+   the matched switch is returned anyway.  The caller should check for\n+   this case.  */\n static size_t\n find_opt (input, lang_flag)\n      const char *input;\n      int lang_flag;\n {\n   size_t md, mn, mx;\n   size_t opt_len;\n-  size_t wrong_lang = N_OPTS;\n+  size_t result = N_OPTS;\n   int comp;\n \n   mn = 0;\n@@ -403,13 +406,7 @@ find_opt (input, lang_flag)\n \t{\n \t  /* The switch matches.  It it an exact match?  */\n \t  if (input[opt_len] == '\\0')\n-\t    {\n-\t    exact_match:\n-\t      if (cl_options[md].flags & lang_flag)\n-\t\treturn md;\n-\t      wrong_lang = md;\n-\t      break;\n-\t    }\n+\t    return md;\n \t  else\n \t    {\n \t      mn = md + 1;\n@@ -423,9 +420,10 @@ find_opt (input, lang_flag)\n \t      /* Is this switch valid for this front end?  */\n \t      if (!(cl_options[md].flags & lang_flag))\n \t\t{\n-\t\t  /* If subsequently we don't find a good match,\n-\t\t     report this as a bad match.  */\n-\t\t  wrong_lang = md;\n+\t\t  /* If subsequently we don't find a better match,\n+\t\t     return this and let the caller report it as a bad\n+\t\t     match.  */\n+\t\t  result = md;\n \t\t  continue;\n \t\t}\n \n@@ -444,7 +442,7 @@ find_opt (input, lang_flag)\n \t\t  if (memcmp (input, cl_options[md].opt_text, opt_len))\n \t\t    break;\n \t\t  if (input[opt_len] == '\\0')\n-\t\t    goto exact_match;\n+\t\t    return md;\n \t\t  if (cl_options[md].flags & lang_flag\n \t\t      && cl_options[md].flags & CL_JOINED)\n \t\t    mx = md;\n@@ -455,10 +453,7 @@ find_opt (input, lang_flag)\n \t}\n     }\n \n-  if (wrong_lang != N_OPTS)\n-    complain_wrong_lang (wrong_lang);\n-\n-  return N_OPTS;\n+  return result;\n }\n \n /* Defer option CODE with argument ARG.  */\n@@ -534,7 +529,7 @@ c_common_decode_option (argc, argv)\n   const char *opt, *arg = 0;\n   char *dup = 0;\n   bool on = true;\n-  int result;\n+  int result, lang_flag;\n   const struct cl_option *option;\n   enum opt_code code;\n \n@@ -574,7 +569,8 @@ c_common_decode_option (argc, argv)\n   result = cpp_handle_option (parse_in, argc, argv);\n \n   /* Skip over '-'.  */\n-  opt_index = find_opt (opt + 1, lang_flags[(c_language << 1) + flag_objc]);\n+  lang_flag = lang_flags[(c_language << 1) + flag_objc];\n+  opt_index = find_opt (opt + 1, lang_flag);\n   if (opt_index == N_OPTS)\n     goto done;\n \n@@ -610,6 +606,15 @@ c_common_decode_option (argc, argv)\n \t}\n     }\n \n+  /* Complain about the wrong language after we've swallowed any\n+     necessary extra argument.  Eventually make this a hard error\n+     after the call to find_opt, and return argc.  */\n+  if (!(cl_options[opt_index].flags & lang_flag))\n+    {\n+      complain_wrong_lang (opt_index);\n+      goto done;\n+    }\n+\n   switch (code = option->opt_code)\n     {\n     case N_OPTS: /* Shut GCC up.  */"}]}