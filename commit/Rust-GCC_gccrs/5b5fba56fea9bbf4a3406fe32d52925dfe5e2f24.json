{"sha": "5b5fba56fea9bbf4a3406fe32d52925dfe5e2f24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI1ZmJhNTZmZWE5YmJmNGEzNDA2ZmUzMmQ1MjkyNWRmZTVlMmYyNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2009-09-21T12:48:37Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2009-09-21T12:48:37Z"}, "message": "inline-params.c: New testcase.\n\n\t* gcc.dg/guality/inline-params.c: New testcase.\n\n\t* dwarf2out.c (decl_loc_table_eq): Allow decl_loc_table to be NULL.\n\t(dwarf2out_abstract_function): NULLify decl_loc_table at begginig and\n\trestore at the end.\n\nFrom-SVN: r151917", "tree": {"sha": "458e11e9171ca3215795368326aa21ae7bc1a4be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/458e11e9171ca3215795368326aa21ae7bc1a4be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b5fba56fea9bbf4a3406fe32d52925dfe5e2f24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b5fba56fea9bbf4a3406fe32d52925dfe5e2f24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b5fba56fea9bbf4a3406fe32d52925dfe5e2f24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b5fba56fea9bbf4a3406fe32d52925dfe5e2f24/comments", "author": null, "committer": null, "parents": [{"sha": "9e2ceea07aaab0f8e89f468c9b3766c296d31517", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2ceea07aaab0f8e89f468c9b3766c296d31517", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e2ceea07aaab0f8e89f468c9b3766c296d31517"}], "stats": {"total": 62, "additions": 61, "deletions": 1}, "files": [{"sha": "83b4fc37e109b5e20c2f328e53057ff2646ad02e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5fba56fea9bbf4a3406fe32d52925dfe5e2f24/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5fba56fea9bbf4a3406fe32d52925dfe5e2f24/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b5fba56fea9bbf4a3406fe32d52925dfe5e2f24", "patch": "@@ -1,3 +1,9 @@\n+2009-09-21  Jan Hubicka  <jh@suse.cz>\n+\n+\t* dwarf2out.c (decl_loc_table_eq): Allow decl_loc_table to be NULL.\n+\t(dwarf2out_abstract_function): NULLify decl_loc_table at begginig and\n+\trestore at the end.\n+\n 2009-09-21  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* stor-layout.c (layout_type): Remove obsolete code."}, {"sha": "a45703e8b50c678aaa8c171dd73e982e5581bc4e", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5fba56fea9bbf4a3406fe32d52925dfe5e2f24/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5fba56fea9bbf4a3406fe32d52925dfe5e2f24/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=5b5fba56fea9bbf4a3406fe32d52925dfe5e2f24", "patch": "@@ -7491,6 +7491,8 @@ decl_loc_table_eq (const void *x, const void *y)\n static inline var_loc_list *\n lookup_decl_loc (const_tree decl)\n {\n+  if (!decl_loc_table)\n+    return NULL;\n   return (var_loc_list *)\n     htab_find_with_hash (decl_loc_table, decl, DECL_UID (decl));\n }\n@@ -15533,16 +15535,22 @@ dwarf2out_abstract_function (tree decl)\n   tree save_fn;\n   tree context;\n   int was_abstract = DECL_ABSTRACT (decl);\n+  htab_t old_decl_loc_table;\n \n   /* Make sure we have the actual abstract inline, not a clone.  */\n   decl = DECL_ORIGIN (decl);\n-  htab_empty (decl_loc_table);\n \n   old_die = lookup_decl_die (decl);\n   if (old_die && get_AT (old_die, DW_AT_inline))\n     /* We've already generated the abstract instance.  */\n     return;\n \n+  /* We can be called while recursively when seeing block defining inlined subroutine\n+     DIE.  Be sure to not clobber the outer location table nor use it or we would\n+     get locations in abstract instantces.  */\n+  old_decl_loc_table = decl_loc_table;\n+  decl_loc_table = NULL;\n+\n   /* Be sure we've emitted the in-class declaration DIE (if any) first, so\n      we don't get confused by DECL_ABSTRACT.  */\n   if (debug_info_level > DINFO_LEVEL_TERSE)\n@@ -15564,6 +15572,7 @@ dwarf2out_abstract_function (tree decl)\n     set_decl_abstract_flags (decl, 0);\n \n   current_function_decl = save_fn;\n+  decl_loc_table = old_decl_loc_table;\n   pop_cfun ();\n }\n "}, {"sha": "e676b08e15dc84e5929e0383711d8afb80d4c3e2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5fba56fea9bbf4a3406fe32d52925dfe5e2f24/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5fba56fea9bbf4a3406fe32d52925dfe5e2f24/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5b5fba56fea9bbf4a3406fe32d52925dfe5e2f24", "patch": "@@ -1,3 +1,7 @@\n+2009-09-21  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/guality/inline-params.c: New testcase.\n+\n 2009-09-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.c-torture/execute/ieee/ieee.exp (additional_flags):"}, {"sha": "ff384548f2c49dd2857c8cff7f263c9daf9bac56", "filename": "gcc/testsuite/gcc.dg/guality/inline-params.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5fba56fea9bbf4a3406fe32d52925dfe5e2f24/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Finline-params.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5fba56fea9bbf4a3406fe32d52925dfe5e2f24/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Finline-params.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Finline-params.c?ref=5b5fba56fea9bbf4a3406fe32d52925dfe5e2f24", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run { xfail *-*-* } } */\n+/* IPA-SRA removes the argumet as dead, so we don't see their values.  */\n+/* { dg-options \"-g -fno-ipa-sra\" } */\n+#define GUALITY_DONT_FORCE_LIVE_AFTER -1\n+\n+#ifndef STATIC_INLINE\n+#define STATIC_INLINE /*static*/\n+#endif\n+\n+\n+#include \"guality.h\"\n+\n+struct a{\n+  struct b {int a;} b;\n+  struct c{ int a;} c;\n+};\n+\n+__attribute__ ((always_inline)) static inline void\n+t1 (struct b *ab, int b)\n+{\n+  GUALCHKXPRVAL (\"b\", 0xbbb, 0);\n+  GUALCHKVAL (ab);\n+}\n+__attribute__ ((always_inline)) static inline void\n+t2 (struct c *ac, char *msg)\n+{\n+  GUALCHKVAL (ac);\n+  GUALCHKVAL (msg);\n+}\n+__attribute__ ((always_inline)) static inline void\n+t3 (struct a *a)\n+{\n+  t1(&a->b, 0xbbb);\n+  t2(&a->c, \"test\");\n+}\n+struct a a={{0},{1}};\n+int\n+main (int argc, char *argv[])\n+{\n+  t3(&a);\n+}"}]}