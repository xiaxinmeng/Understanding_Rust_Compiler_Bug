{"sha": "0e2eaba46d7ef44ca821d3afaf385809db84fb1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUyZWFiYTQ2ZDdlZjQ0Y2E4MjFkM2FmYWYzODU4MDlkYjg0ZmIxZg==", "commit": {"author": {"name": "Geoff Keating", "email": "geoffk@cygnus.com", "date": "2000-02-25T18:17:40Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2000-02-25T18:17:40Z"}, "message": "haifa-sched.c (schedule_block): Explain the real reason we delete REG_SAVE_NOTEs on the first insn of a block.\n\n* haifa-sched.c (schedule_block): Explain the real reason\nwe delete REG_SAVE_NOTEs on the first insn of a block.\nDon't delete REG_SAVE_NOTES for NOTE_INSN_SETJMP.\n\n* compile/20000224-1.c: New test.\n\nFrom-SVN: r32150", "tree": {"sha": "52960c4466687daba4dc5334903af1dc32a07a13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52960c4466687daba4dc5334903af1dc32a07a13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e2eaba46d7ef44ca821d3afaf385809db84fb1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e2eaba46d7ef44ca821d3afaf385809db84fb1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e2eaba46d7ef44ca821d3afaf385809db84fb1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e2eaba46d7ef44ca821d3afaf385809db84fb1f/comments", "author": null, "committer": null, "parents": [{"sha": "66830bb21b32a9cd5c5e81e085bbafe7edca55fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66830bb21b32a9cd5c5e81e085bbafe7edca55fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66830bb21b32a9cd5c5e81e085bbafe7edca55fd"}], "stats": {"total": 80, "additions": 70, "deletions": 10}, "files": [{"sha": "edb1176f10ad87fc0fb550e246aaac773781eb72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e2eaba46d7ef44ca821d3afaf385809db84fb1f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e2eaba46d7ef44ca821d3afaf385809db84fb1f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e2eaba46d7ef44ca821d3afaf385809db84fb1f", "patch": "@@ -1,3 +1,9 @@\n+2000-02-25  Geoff Keating  <geoffk@cygnus.com>\n+\n+\t* haifa-sched.c (schedule_block): Explain the real reason\n+\twe delete REG_SAVE_NOTEs on the first insn of a block.\n+\tDon't delete REG_SAVE_NOTES for NOTE_INSN_SETJMP.\n+\n 2000-02-24  Mark Mitchell  <mark@codesourcery.com>\n \n \t* input.h (push_srcloc): New function."}, {"sha": "ae81a259d3eb1eacdf01b4f2bcceacd6088213cd", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e2eaba46d7ef44ca821d3afaf385809db84fb1f/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e2eaba46d7ef44ca821d3afaf385809db84fb1f/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=0e2eaba46d7ef44ca821d3afaf385809db84fb1f", "patch": "@@ -5744,22 +5744,31 @@ schedule_block (bb, rgn_n_insns)\n      had different notions of what the \"head\" insn was.  */\n   get_bb_head_tail (bb, &head, &tail);\n \n-  /* Interblock scheduling could have moved the original head insn from this\n-     block into a proceeding block.  This may also cause schedule_block and\n-     compute_forward_dependences to have different notions of what the\n-     \"head\" insn was.\n-\n-     If the interblock movement happened to make this block start with\n-     some notes (LOOP, EH or SETJMP) before the first real insn, then\n-     HEAD will have various special notes attached to it which must be\n-     removed so that we don't end up with extra copies of the notes.  */\n+  /* rm_other_notes only removes notes which are _inside_ the\n+     block---that is, it won't remove notes before the first real insn\n+     or after the last real insn of the block.  So if the first insn\n+     has a REG_SAVE_NOTE which would otherwise be emitted before the\n+     insn, it is redundant with the note before the start of the\n+     block, and so we have to take it out.\n+\n+     FIXME: Probably the same thing should be done with REG_SAVE_NOTEs\n+     referencing NOTE_INSN_SETJMP at the end of the block.  */\n   if (GET_RTX_CLASS (GET_CODE (head)) == 'i')\n     {\n       rtx note;\n \n       for (note = REG_NOTES (head); note; note = XEXP (note, 1))\n \tif (REG_NOTE_KIND (note) == REG_SAVE_NOTE)\n-\t  remove_note (head, note);\n+\t  {\n+\t    if (INTVAL (XEXP (note, 0)) != NOTE_INSN_SETJMP)\n+\t      {\n+\t\tremove_note (head, note);\n+\t\tnote = XEXP (note, 1);\n+\t\tremove_note (head, note);\n+\t      }\n+\t    else\n+\t      note = XEXP (note, 1);\n+\t  }\n     }\n \n   next_tail = NEXT_INSN (tail);"}, {"sha": "e58e53e2c2b46108a9f5a5dd5f153d1ca7f7a12b", "filename": "gcc/testsuite/gcc.c-torture/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e2eaba46d7ef44ca821d3afaf385809db84fb1f/gcc%2Ftestsuite%2Fgcc.c-torture%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e2eaba46d7ef44ca821d3afaf385809db84fb1f/gcc%2Ftestsuite%2Fgcc.c-torture%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2FChangeLog?ref=0e2eaba46d7ef44ca821d3afaf385809db84fb1f", "patch": "@@ -1,3 +1,7 @@\n+2000-02-25  Geoff Keating  <geoffk@cygnus.com>\n+\n+\t* compile/20000224-1.c: New test.\n+\n 2000-02-25  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>\n \n \t* compile/cpp-2.c: New test."}, {"sha": "3572c33cb7fa4b215df1a4a8b04b78ff4366f79f", "filename": "gcc/testsuite/gcc.c-torture/compile/20000224-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e2eaba46d7ef44ca821d3afaf385809db84fb1f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000224-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e2eaba46d7ef44ca821d3afaf385809db84fb1f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000224-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000224-1.c?ref=0e2eaba46d7ef44ca821d3afaf385809db84fb1f", "patch": "@@ -0,0 +1,41 @@\n+enum Lisp_Type\n+{\n+  Lisp_Int                     \n+  ,Lisp_Record                 \n+  ,Lisp_Cons                   \n+  ,Lisp_String                 \n+  ,Lisp_Vector                 \n+  ,Lisp_Symbol\n+  ,Lisp_Char                     \n+};\n+typedef\n+union Lisp_Object\n+  {\n+    struct\n+      {\n+        enum Lisp_Type type: 3L ;\n+        unsigned long  markbit: 1;\n+        unsigned long  val: 60;\n+      } gu;\n+    long  i;\n+  }\n+Lisp_Object;\n+extern int initialized;\n+void\n+init_device_faces (int *d)\n+{\n+  if (initialized)\n+    {\n+      Lisp_Object tdevice;\n+      do {\n+          tdevice = (union Lisp_Object)\n+                        { gu:\n+                          { markbit: 0,\n+                            type: Lisp_Record,\n+                            val: ((unsigned long )d)\n+                          }\n+                        };\n+      } while (0);\n+      call_critical_lisp_code (tdevice);\n+    }\n+}"}]}