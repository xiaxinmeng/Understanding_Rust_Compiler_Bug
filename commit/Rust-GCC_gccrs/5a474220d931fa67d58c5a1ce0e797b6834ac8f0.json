{"sha": "5a474220d931fa67d58c5a1ce0e797b6834ac8f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE0NzQyMjBkOTMxZmE2N2Q1OGM1YTFjZTBlNzk3YjY4MzRhYzhmMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-06-15T07:33:13Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-06-15T07:33:13Z"}, "message": "df.h (df_ref_create, [...]): Delete.\n\ngcc/\n\t* df.h (df_ref_create, df_ref_remove): Delete.\n\t* df-scan.c (df_ref_create, df_ref_compress_rec): Likewise.\n\t(df_ref_remove): Likewise.\n\nFrom-SVN: r211682", "tree": {"sha": "24cdf1ab715e1054bdd7a812b2f3b638a98c5389", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24cdf1ab715e1054bdd7a812b2f3b638a98c5389"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a474220d931fa67d58c5a1ce0e797b6834ac8f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a474220d931fa67d58c5a1ce0e797b6834ac8f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a474220d931fa67d58c5a1ce0e797b6834ac8f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a474220d931fa67d58c5a1ce0e797b6834ac8f0/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "74e59b6c24b6770010a76247c1c44abdf2fe92bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e59b6c24b6770010a76247c1c44abdf2fe92bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74e59b6c24b6770010a76247c1c44abdf2fe92bf"}], "stats": {"total": 122, "additions": 6, "deletions": 116}, "files": [{"sha": "3477ff9690c18f40b8e97186a6a63a5da551d9f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a474220d931fa67d58c5a1ce0e797b6834ac8f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a474220d931fa67d58c5a1ce0e797b6834ac8f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a474220d931fa67d58c5a1ce0e797b6834ac8f0", "patch": "@@ -1,3 +1,9 @@\n+2014-06-15  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* df.h (df_ref_create, df_ref_remove): Delete.\n+\t* df-scan.c (df_ref_create, df_ref_compress_rec): Likewise.\n+\t(df_ref_remove): Likewise.\n+\n 2014-06-15  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* df.h (df_single_def, df_single_use): New functions."}, {"sha": "0033d6d23445a738b727162aa456dcb896dbcebc", "filename": "gcc/df-scan.c", "status": "modified", "additions": 0, "deletions": 113, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a474220d931fa67d58c5a1ce0e797b6834ac8f0/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a474220d931fa67d58c5a1ce0e797b6834ac8f0/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=5a474220d931fa67d58c5a1ce0e797b6834ac8f0", "patch": "@@ -111,10 +111,6 @@ static void df_uses_record (struct df_collection_rec *,\n \t\t\t    int ref_flags);\n \n static void df_install_ref_incremental (df_ref);\n-static df_ref df_ref_create_structure (enum df_ref_class,\n-\t\t\t\t       struct df_collection_rec *, rtx, rtx *,\n-\t\t\t\t       basic_block, struct df_insn_info *,\n-\t\t\t\t       enum df_ref_type, int ref_flags);\n static void df_insn_refs_collect (struct df_collection_rec*,\n \t\t\t\t  basic_block, struct df_insn_info *);\n static void df_canonize_collection_rec (struct df_collection_rec *);\n@@ -694,32 +690,6 @@ df_uses_create (rtx *loc, rtx insn, int ref_flags)\n                   ref_flags);\n }\n \n-/* Create a new ref of type DF_REF_TYPE for register REG at address\n-   LOC within INSN of BB.  This function is only used externally.  */\n-\n-df_ref\n-df_ref_create (rtx reg, rtx *loc, rtx insn,\n-\t       basic_block bb,\n-\t       enum df_ref_type ref_type,\n-\t       int ref_flags)\n-{\n-  enum df_ref_class cl;\n-\n-  df_grow_reg_info ();\n-\n-  /* You cannot hack artificial refs.  */\n-  gcc_assert (insn);\n-\n-  if (loc)\n-    cl = DF_REF_REGULAR;\n-  else\n-    cl = DF_REF_BASE;\n-\n-  return df_ref_create_structure (cl, NULL, reg, loc, bb,\n-                                  DF_INSN_INFO_GET (insn),\n-                                  ref_type, ref_flags);\n-}\n-\n static void\n df_install_ref_incremental (df_ref ref)\n {\n@@ -934,89 +904,6 @@ df_reg_chain_unlink (df_ref ref)\n }\n \n \n-/* Remove REF from VEC.  */\n-\n-static void\n-df_ref_compress_rec (df_ref **vec_ptr, df_ref ref)\n-{\n-  df_ref *vec = *vec_ptr;\n-\n-  if (vec[1])\n-    {\n-      while (*vec && *vec != ref)\n-\tvec++;\n-\n-      while (*vec)\n-\t{\n-\t  *vec = *(vec+1);\n-\t  vec++;\n-\t}\n-    }\n-  else\n-    {\n-      free (vec);\n-      *vec_ptr = df_null_ref_rec;\n-    }\n-}\n-\n-\n-/* Unlink REF from all def-use/use-def chains, etc.  */\n-\n-void\n-df_ref_remove (df_ref ref)\n-{\n-#if 0\n-  if (dump_file)\n-    {\n-      fprintf (dump_file, \"removing ref \");\n-      df_ref_debug (ref, dump_file);\n-    }\n-#endif\n-\n-  if (DF_REF_REG_DEF_P (ref))\n-    {\n-      if (DF_REF_IS_ARTIFICIAL (ref))\n-\t{\n-\t  struct df_scan_bb_info *bb_info\n-\t    = df_scan_get_bb_info (DF_REF_BBNO (ref));\n-\t  df_ref_compress_rec (&bb_info->artificial_defs, ref);\n-\t}\n-      else\n-\t{\n-\t  unsigned int uid = DF_REF_INSN_UID (ref);\n-\t  struct df_insn_info *insn_rec = DF_INSN_UID_GET (uid);\n-\t  df_ref_compress_rec (&insn_rec->defs, ref);\n-\t}\n-    }\n-  else\n-    {\n-      if (DF_REF_IS_ARTIFICIAL (ref))\n-\t{\n-\t  struct df_scan_bb_info *bb_info\n-\t    = df_scan_get_bb_info (DF_REF_BBNO (ref));\n-\t  df_ref_compress_rec (&bb_info->artificial_uses, ref);\n-\t}\n-      else\n-\t{\n-\t  unsigned int uid = DF_REF_INSN_UID (ref);\n-\t  struct df_insn_info *insn_rec = DF_INSN_UID_GET (uid);\n-\n-\t  if (DF_REF_FLAGS (ref) & DF_REF_IN_NOTE)\n-\t    df_ref_compress_rec (&insn_rec->eq_uses, ref);\n-\t  else\n-\t    df_ref_compress_rec (&insn_rec->uses, ref);\n-\t}\n-    }\n-\n-  /* By deleting the ref directly, df_insn_rescan my not find any\n-     differences even though the block will have changed.  So we need\n-     to mark the block dirty ourselves.  */\n-  if (!DEBUG_INSN_P (DF_REF_INSN (ref)))\n-    df_set_bb_dirty (DF_REF_BB (ref));\n-  df_reg_chain_unlink (ref);\n-}\n-\n-\n /* Create the insn record for INSN.  If there was one there, zero it\n    out.  */\n "}, {"sha": "0582bf0dcb5b1b9a254e5c0e29c934c377f687e9", "filename": "gcc/df.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a474220d931fa67d58c5a1ce0e797b6834ac8f0/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a474220d931fa67d58c5a1ce0e797b6834ac8f0/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=5a474220d931fa67d58c5a1ce0e797b6834ac8f0", "patch": "@@ -1027,10 +1027,7 @@ extern void df_scan_add_problem (void);\n extern void df_grow_reg_info (void);\n extern void df_grow_insn_info (void);\n extern void df_scan_blocks (void);\n-extern df_ref df_ref_create (rtx, rtx *, rtx,basic_block,\n-\t\t\t     enum df_ref_type, int ref_flags);\n extern void df_uses_create (rtx *, rtx, int);\n-extern void df_ref_remove (df_ref);\n extern struct df_insn_info * df_insn_create_insn_record (rtx);\n extern void df_insn_delete (rtx);\n extern void df_bb_refs_record (int, bool);"}]}