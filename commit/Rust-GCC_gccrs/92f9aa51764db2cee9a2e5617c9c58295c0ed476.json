{"sha": "92f9aa51764db2cee9a2e5617c9c58295c0ed476", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJmOWFhNTE3NjRkYjJjZWU5YTJlNTYxN2M5YzU4Mjk1YzBlZDQ3Ng==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-30T21:52:21Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-30T21:52:21Z"}, "message": "(cse_insn): Add missing definition of var TEM; clean up shadowed uses.\n\nFrom-SVN: r6920", "tree": {"sha": "06c6415828e85c6e0f83c637400399d7277fb199", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06c6415828e85c6e0f83c637400399d7277fb199"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92f9aa51764db2cee9a2e5617c9c58295c0ed476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92f9aa51764db2cee9a2e5617c9c58295c0ed476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92f9aa51764db2cee9a2e5617c9c58295c0ed476", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92f9aa51764db2cee9a2e5617c9c58295c0ed476/comments", "author": null, "committer": null, "parents": [{"sha": "b0468b846ef4e6efa3b35e0061dc61612c78e5f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0468b846ef4e6efa3b35e0061dc61612c78e5f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0468b846ef4e6efa3b35e0061dc61612c78e5f4"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "227cb6316a99fa4b9c5eb0374892e5da1fef6970", "filename": "gcc/cse.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f9aa51764db2cee9a2e5617c9c58295c0ed476/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f9aa51764db2cee9a2e5617c9c58295c0ed476/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=92f9aa51764db2cee9a2e5617c9c58295c0ed476", "patch": "@@ -5879,6 +5879,7 @@ cse_insn (insn, in_libcall_block)\n {\n   register rtx x = PATTERN (insn);\n   register int i;\n+  rtx tem;\n   register int n_sets = 0;\n \n   /* Records what this insn does to set CC0.  */\n@@ -6038,14 +6039,11 @@ cse_insn (insn, in_libcall_block)\n       fold_rtx (x, insn);\n     }\n \n-  if (n_sets == 1 && REG_NOTES (insn) != 0)\n-    {\n-      /* Store the equivalent value in SRC_EQV, if different.  */\n-      rtx tem = find_reg_note (insn, REG_EQUAL, NULL_RTX);\n-\n-      if (tem && ! rtx_equal_p (XEXP (tem, 0), SET_SRC (sets[0].rtl)))\n-        src_eqv = canon_reg (XEXP (tem, 0), NULL_RTX);\n-    }\n+  /* Store the equivalent value in SRC_EQV, if different.  */\n+  if (n_sets == 1 && REG_NOTES (insn) != 0\n+      && (tem = find_reg_note (insn, REG_EQUAL, NULL_RTX)) != 0\n+      && ! rtx_equal_p (XEXP (tem, 0), SET_SRC (sets[0].rtl)))\n+    src_eqv = canon_reg (XEXP (tem, 0), NULL_RTX);\n \n   /* Canonicalize sources and addresses of destinations.\n      We do this in a separate pass to avoid problems when a MATCH_DUP is\n@@ -6683,7 +6681,7 @@ cse_insn (insn, in_libcall_block)\n       if (n_sets == 1 && src_const && GET_CODE (dest) == REG\n \t  && GET_CODE (src_const) != REG)\n \t{\n-\t  rtx tem = find_reg_note (insn, REG_EQUAL, NULL_RTX);\n+\t  tem = find_reg_note (insn, REG_EQUAL, NULL_RTX);\n \t  \n \t  /* Record the actual constant value in a REG_EQUAL note, making\n \t     a new one if one does not already exist.  */"}]}