{"sha": "f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg3YmQwNGIwN2RkZDRjODZmNmRhNWM4MjU4NWJkNmRlMmNlMWU3Mw==", "commit": {"author": {"name": "Artjoms Sinkarovs", "email": "artyom.shinkaroff@gmail.com", "date": "2010-10-29T14:59:07Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-10-29T14:59:07Z"}, "message": "tree.h (build_vector_from_val): Declare.\n\n2010-10-29  Artjoms Sinkarovs <artyom.shinakroff@gmail.com>\n\tAndrew Pinski <pinskia@gmail.com>\n\n\t* tree.h (build_vector_from_val): Declare.\n\t* tree.c (build_vector_from_val): New function.\n\t* c-typeck.c (build_binary_op): Handle vector shifting.\n\t* doc/extend.texi: Description of the vector shifting operation.\n\n\ttestsuite/\n\t* gcc.c-torture/execute/vector-shift.c: New testcase.\n\t* gcc.c-torture/execute/vector-shift1.c: Likewise.\n\t* gcc.c-torture/execute/vector-shift2.c: Likewise.\n\t* gcc.dg/vector-shift.c: Likewise.\n\t* gcc.dg/vector-shift1.c: Likewise.\n\t* gcc.dg/torture/vector-shift2.c: Likewise.\n\t* gcc.dg/vector-shift3.c: Likewise.\n\t* gcc.dg/simd-1b.c: Adjust.\n\nCo-Authored-By: Andrew Pinski <pinskia@gmail.com>\n\nFrom-SVN: r166061", "tree": {"sha": "fa4dba0be3f38bc0ec75158db860b2beeb9c1c68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa4dba0be3f38bc0ec75158db860b2beeb9c1c68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/comments", "author": {"login": "ashinkarov", "id": 892232, "node_id": "MDQ6VXNlcjg5MjIzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/892232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashinkarov", "html_url": "https://github.com/ashinkarov", "followers_url": "https://api.github.com/users/ashinkarov/followers", "following_url": "https://api.github.com/users/ashinkarov/following{/other_user}", "gists_url": "https://api.github.com/users/ashinkarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashinkarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashinkarov/subscriptions", "organizations_url": "https://api.github.com/users/ashinkarov/orgs", "repos_url": "https://api.github.com/users/ashinkarov/repos", "events_url": "https://api.github.com/users/ashinkarov/events{/privacy}", "received_events_url": "https://api.github.com/users/ashinkarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a01c666cc6107021427499f6b4f1adf0c7869a89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01c666cc6107021427499f6b4f1adf0c7869a89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a01c666cc6107021427499f6b4f1adf0c7869a89"}], "stats": {"total": 343, "additions": 333, "deletions": 10}, "files": [{"sha": "89bc104e227fd7584345299b805bf6d43342141d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73", "patch": "@@ -1,3 +1,11 @@\n+2010-10-29  Artjoms Sinkarovs <artyom.shinakroff@gmail.com>\n+\tAndrew Pinski <pinskia@gmail.com>\n+\n+\t* tree.h (build_vector_from_val): Declare.\n+\t* tree.c (build_vector_from_val): New function.\n+\t* c-typeck.c (build_binary_op): Handle vector shifting.\n+\t* doc/extend.texi: Description of the vector shifting operation.\n+\n 2010-10-29  Paul Koning  <pkoning@equallogic.com>\n \n \t* config/pdp11/pdp11-protos.h (pdp11_cannot_change_mode_class,"}, {"sha": "70d9be7a53d22b5e20c16b99ae35958af34020b2", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73", "patch": "@@ -9727,7 +9727,21 @@ build_binary_op (location_t location, enum tree_code code,\n \t Also set SHORT_SHIFT if shifting rightward.  */\n \n     case RSHIFT_EXPR:\n-      if ((code0 == INTEGER_TYPE || code0 == FIXED_POINT_TYPE)\n+      if (code0 == VECTOR_TYPE && code1 == INTEGER_TYPE\n+          && TREE_CODE (TREE_TYPE (type0)) == INTEGER_TYPE)\n+        {\n+          result_type = type0;\n+          converted = 1;\n+        }\n+      else if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE\n+\t  && TREE_CODE (TREE_TYPE (type0)) == INTEGER_TYPE\n+          && TREE_CODE (TREE_TYPE (type1)) == INTEGER_TYPE\n+          && TYPE_VECTOR_SUBPARTS (type0) == TYPE_VECTOR_SUBPARTS (type1))\n+\t{\n+\t  result_type = type0;\n+\t  converted = 1;\n+\t}\n+      else if ((code0 == INTEGER_TYPE || code0 == FIXED_POINT_TYPE)\n \t  && code1 == INTEGER_TYPE)\n \t{\n \t  if (TREE_CODE (op1) == INTEGER_CST)\n@@ -9754,17 +9768,32 @@ build_binary_op (location_t location, enum tree_code code,\n \n \t  /* Use the type of the value to be shifted.  */\n \t  result_type = type0;\n-\t  /* Convert the shift-count to an integer, regardless of size\n-\t     of value being shifted.  */\n-\t  if (TYPE_MAIN_VARIANT (TREE_TYPE (op1)) != integer_type_node)\n+\t  /* Convert the non vector shift-count to an integer, regardless\n+\t     of size of value being shifted.  */\n+\t  if (TREE_CODE (TREE_TYPE (op1)) != VECTOR_TYPE\n+\t      && TYPE_MAIN_VARIANT (TREE_TYPE (op1)) != integer_type_node)\n \t    op1 = convert (integer_type_node, op1);\n \t  /* Avoid converting op1 to result_type later.  */\n \t  converted = 1;\n \t}\n       break;\n \n     case LSHIFT_EXPR:\n-      if ((code0 == INTEGER_TYPE || code0 == FIXED_POINT_TYPE)\n+      if (code0 == VECTOR_TYPE && code1 == INTEGER_TYPE\n+          && TREE_CODE (TREE_TYPE (type0)) == INTEGER_TYPE)\n+        {\n+          result_type = type0;\n+          converted = 1;\n+        }\n+      else if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE\n+\t  && TREE_CODE (TREE_TYPE (type0)) == INTEGER_TYPE\n+          && TREE_CODE (TREE_TYPE (type1)) == INTEGER_TYPE\n+          && TYPE_VECTOR_SUBPARTS (type0) == TYPE_VECTOR_SUBPARTS (type1))\n+\t{\n+\t  result_type = type0;\n+\t  converted = 1;\n+\t}\n+      else if ((code0 == INTEGER_TYPE || code0 == FIXED_POINT_TYPE)\n \t  && code1 == INTEGER_TYPE)\n \t{\n \t  if (TREE_CODE (op1) == INTEGER_CST)\n@@ -9786,9 +9815,10 @@ build_binary_op (location_t location, enum tree_code code,\n \n \t  /* Use the type of the value to be shifted.  */\n \t  result_type = type0;\n-\t  /* Convert the shift-count to an integer, regardless of size\n-\t     of value being shifted.  */\n-\t  if (TYPE_MAIN_VARIANT (TREE_TYPE (op1)) != integer_type_node)\n+\t  /* Convert the non vector shift-count to an integer, regardless\n+\t     of size of value being shifted.  */\n+\t  if (TREE_CODE (TREE_TYPE (op1)) != VECTOR_TYPE\n+\t      && TYPE_MAIN_VARIANT (TREE_TYPE (op1)) != integer_type_node)\n \t    op1 = convert (integer_type_node, op1);\n \t  /* Avoid converting op1 to result_type later.  */\n \t  converted = 1;"}, {"sha": "de2be889bdc94b518d6cdee11b59ef6e8a7a8297", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73", "patch": "@@ -6315,6 +6315,24 @@ minus or complement operators on a vector type is a vector whose\n elements are the negative or complemented values of the corresponding\n elements in the operand.\n \n+In C it is possible to use shifting operators @code{<<}, @code{>>} on\n+integer-type vectors. The operation is defined as following: @code{@{a0,\n+a1, @dots{}, an@} >> @{b0, b1, @dots{}, bn@} == @{a0 >> b0, a1 >> b1,\n+@dots{}, an >> bn@}}@. Vector operands must have the same number of\n+elements.  Additionally second operands can be a scalar integer in which\n+case the scalar is converted to the type used by the vector operand (with\n+possible truncation) and each element of this new vector is the scalar's\n+value.\n+Consider the following code.\n+\n+@smallexample\n+typedef int v4si __attribute__ ((vector_size (16)));\n+\n+v4si a, b;\n+\n+b = a >> 1;     /* b = a >> @{1,1,1,1@}; */\n+@end smallexample\n+\n In C vectors can be subscripted as if the vector were an array with\n the same number of elements and base type.  Out of bound accesses\n invoke undefined behavior at runtime.  Warnings for out of bound"}, {"sha": "7000b10520c200cc15f00d667aa7bde3fd7662b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73", "patch": "@@ -1,3 +1,15 @@\n+2010-10-29  Artjoms Sinkarovs <artyom.shinakroff@gmail.com>\n+\tAndrew Pinski <pinskia@gmail.com>\n+\n+\t* gcc.c-torture/execute/vector-shift.c: New testcase.\n+\t* gcc.c-torture/execute/vector-shift1.c: Likewise.\n+\t* gcc.c-torture/execute/vector-shift2.c: Likewise.\n+\t* gcc.dg/vector-shift.c: Likewise.\n+\t* gcc.dg/vector-shift1.c: Likewise.\n+\t* gcc.dg/torture/vector-shift2.c: Likewise.\n+\t* gcc.dg/vector-shift3.c: Likewise.\n+\t* gcc.dg/simd-1b.c: Adjust.\n+\n 2010-10-29  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* gcc.c-torture/execute/20101011-1.c: Skip on SH."}, {"sha": "f52eb58a1b933c341290e219c8e738ac1e0a2e09", "filename": "gcc/testsuite/gcc.c-torture/execute/vector-shift.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-shift.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-shift.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-shift.c?ref=f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73", "patch": "@@ -0,0 +1,48 @@\n+\n+#define vector __attribute__((vector_size(sizeof(int)*4) ))\n+\n+static vector int allones = {1, 1, 1, 1};\n+static vector int allzeros = {0, 0, 0, 0};\n+static vector int numbers = {0, 1, 2, 3};\n+static vector int numbersleftshiftallones = {0, 2, 4, 6};\n+static vector int numbersrightshiftallones = {0, 0, 1, 1};\n+\n+\n+static vector unsigned int uallones = {1, 1, 1, 1};\n+static vector unsigned int uallzeros = {0, 0, 0, 0};\n+static vector unsigned int unumbers = {0, 1, 2, 3};\n+static vector unsigned int unumbersleftshiftallones = {0, 2, 4, 6};\n+static vector unsigned int unumbersrightshiftallones = {0, 0, 1, 1};\n+\n+#define TEST(result, expected) \\\n+do { \\\n+  typeof(result) result1 = result; \\\n+  if(sizeof (result1) != sizeof (expected)) \\\n+    __builtin_abort (); \\\n+  if (__builtin_memcmp (&result1, &expected, sizeof(result1)) != 0) \\\n+    __builtin_abort (); \\\n+}while (0);\n+\n+int main(void)\n+{\n+  vector int result;\n+  TEST ((numbers << allzeros), numbers);\n+  TEST ((numbers >> allzeros), numbers);\n+  TEST((numbers << allones), numbersleftshiftallones);\n+  TEST((numbers >> allones), numbersrightshiftallones);\n+  /* Test left shift followed by a right shift, numbers should be back as\n+     numbers are all small numbers and no lose of precision happens.   */\n+  TEST((numbers << allones) >> allones, numbers);\n+  \n+  \n+  \n+  TEST ((unumbers << uallzeros), unumbers);\n+  TEST ((unumbers >> uallzeros), unumbers);\n+  TEST((unumbers << uallones), unumbersleftshiftallones);\n+  TEST((unumbers >> uallones), unumbersrightshiftallones);\n+  /* Test left shift followed by a right shift, numbers should be back as\n+     numbers are all small numbers and no lose of precision happens.   */\n+  TEST((unumbers << uallones) >> uallones, unumbers);\n+\n+  return 0;  \n+}"}, {"sha": "6041fc3b07e54546228a675910564494ee44c983", "filename": "gcc/testsuite/gcc.c-torture/execute/vector-shift1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-shift1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-shift1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-shift1.c?ref=f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73", "patch": "@@ -0,0 +1,17 @@\n+#define vector __attribute__((vector_size(8*sizeof(short))))\n+\n+int main (int argc, char *argv[]) {\n+  vector short v0 = {argc,2,3,4,5,6,7};\n+  vector short v1 = {2,2,2,2,2,2,2};\n+  vector short r1,r2,r3,r4;\n+  int i = 8;\n+\n+  r1 = v0 << 1;\n+  r2 = v0 >> 1;\n+\n+  r3 = v0 << v1;\n+  r4 = v0 >> v1;\n+\n+  return 0;\n+}\n+"}, {"sha": "55f1035552232f54509d9f98ad4d3e86746ce1c9", "filename": "gcc/testsuite/gcc.c-torture/execute/vector-shift2.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-shift2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-shift2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-shift2.c?ref=f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73", "patch": "@@ -0,0 +1,59 @@\n+#define vector(elcount, type)  \\\n+__attribute__((vector_size((elcount)*sizeof(type)))) type\n+\n+#define vidx(type, vec, idx) (*((type *) &(vec) + idx))\n+#define uint unsigned int\n+\n+int main (int argc, char *argv[]) {\n+    vector(4, uint) vuint  = { 1,  2,  3,  4};\n+    vector(4,  int) vint0  = { 1,  1,  1,  1};\n+    vector(4,  int) vint1  = {-1, -1, -1, -1};\n+\n+    vector(4,  int) i1, i2, i3;\n+    vector(4, uint) u1, u2, u3;\n+\n+    i1 = vint1<< vint0;\n+    \n+    if (vidx(int, i1, 0) != ((int)-1 << (int)1))\n+        __builtin_abort ();\n+    if (vidx(int, i1, 1) != ((int)-1 << (int)1))\n+        __builtin_abort ();\n+    if (vidx(int, i1, 2) != ((int)-1 << (int)1))\n+        __builtin_abort ();\n+    if (vidx(int, i1, 3) != ((int)-1 << (int)1))\n+        __builtin_abort ();\n+\n+    u1 = vuint << vint0;\n+\n+    if (vidx(int, u1, 0) != ((uint)1  << (int)1))\n+        __builtin_abort ();\n+    if (vidx(int, u1, 1) != ((uint)2  << (int)1))\n+        __builtin_abort ();\n+    if (vidx(int, u1, 2) != ((uint)3  << (int)1))\n+        __builtin_abort ();\n+    if (vidx(int, u1, 3) != ((uint)4  << (int)1))\n+        __builtin_abort ();\n+\n+    \n+    i2 = vint1 >> vuint;\n+\n+    if (vidx(int, i2, 0) != ((int)-1  >> (uint)1))\n+        __builtin_abort ();\n+    if (vidx(int, i2, 1) != ((int)-1  >> (uint)2))\n+        __builtin_abort ();\n+    if (vidx(int, i2, 2) != ((int)-1  >> (uint)3))\n+        __builtin_abort ();\n+    if (vidx(int, i2, 3) != ((int)-1  >> (uint)4))\n+        __builtin_abort ();\n+\n+\n+    vint1 >>= vuint;\n+    \n+    vuint <<= vint0;\n+    vuint <<= vint1;\n+\n+\n+    return 0;\n+}\n+\n+"}, {"sha": "44c39c2ef96f3c920ab30d80ba32f7ef13f4926b", "filename": "gcc/testsuite/gcc.dg/simd-1b.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1b.c?ref=f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73", "patch": "@@ -18,8 +18,8 @@ hanneke ()\n   c &= d;\n   a |= b;\n   c ^= d;\n-  a >>= b; /* { dg-error \"invalid operands to binary >>\" } */\n-  c <<= d; /* { dg-error \"invalid operands to binary <<\" } */\n+  a >>= b;\n+  c <<= d;\n   a = +b;\n   c = ~d;\n "}, {"sha": "a4ca9240058332f013f3a31cb0081f8cc4a732b2", "filename": "gcc/testsuite/gcc.dg/torture/vector-shift2.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvector-shift2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvector-shift2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvector-shift2.c?ref=f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do run } */\n+\n+#define vector(elcount, type)  \\\n+__attribute__((vector_size((elcount)*sizeof(type)))) type\n+\n+#define vidx(type, vec, idx) (*((type *) &(vec) + idx))\n+#define uchar unsigned char\n+\n+#define ch14 1,2,3,4\n+#define ch1  1,1,1,1\n+#define chm1 -1,-1,-1,-1\n+\n+int main (int argc, char *argv[]) {\n+    vector(16, uchar) vuchar  = { ch14, ch14, ch14, ch14};\n+    vector(16,  char) vchar0  = { ch1, ch1, ch1, ch1};\n+    vector(16,  char) vchar1  = { chm1, chm1, chm1, chm1};\n+\n+    vector(16,  char) i1, i2, i3;\n+    vector(16, uchar) u1, u2, u3;\n+\n+    i1 = vchar1<< vchar0;\n+    \n+    if (vidx(char, i1, 0) != ((char)-1 << (char)1))\n+        __builtin_abort ();\n+    if (vidx(char, i1, 1) != ((char)-1 << (char)1))\n+        __builtin_abort ();\n+    if (vidx(char, i1, 2) != ((char)-1 << (char)1))\n+        __builtin_abort ();\n+    if (vidx(char, i1, 3) != ((char)-1 << (char)1))\n+        __builtin_abort ();\n+    u1 = vuchar << vchar0;\n+\n+    if (vidx(char, u1, 0) != ((uchar)1  << (char)1))\n+        __builtin_abort ();\n+    if (vidx(char, u1, 1) != ((uchar)2  << (char)1))\n+        __builtin_abort ();\n+    if (vidx(char, u1, 2) != ((uchar)3  << (char)1))\n+        __builtin_abort ();\n+    if (vidx(char, u1, 3) != ((uchar)4  << (char)1))\n+        __builtin_abort ();\n+\n+    \n+    i2 = vchar1 >> vuchar;\n+\n+    if (vidx(char, i2, 0) != ((char)-1  >> (uchar)1))\n+        __builtin_abort ();\n+    if (vidx(char, i2, 1) != ((char)-1  >> (uchar)2))\n+        __builtin_abort ();\n+    if (vidx(char, i2, 2) != ((char)-1  >> (uchar)3))\n+        __builtin_abort ();\n+    if (vidx(char, i2, 3) != ((char)-1  >> (uchar)4))\n+        __builtin_abort ();\n+    \n+    vchar1 >>= vuchar;\n+    vuchar <<= vchar0;\n+    vuchar <<= vchar1;\n+\n+    return 0;\n+}\n+"}, {"sha": "f2b12ba73f6d5e8cb72b44554fad9add725c311d", "filename": "gcc/testsuite/gcc.dg/vector-shift.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-shift.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-shift.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-shift.c?ref=f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+#define vector(elcount, type)  \\\n+__attribute__((vector_size((elcount)*sizeof(type)))) type\n+\n+int main (int argc, char *argv[]) {\n+    vector(4,char) vchar = {1,2,3,4};\n+    vector(4, int) vint  = {1,1,1,1};\n+    \n+    vint <<= vchar;  /* { dg-error \"nvalid operands to binary <<\" } */\n+    vchar >>= vint;  /* { dg-error \"nvalid operands to binary >>\" } */\n+\n+    return 0;\n+}\n+"}, {"sha": "51bc0ad39894472b12c3c1cfde69b67bc42df664", "filename": "gcc/testsuite/gcc.dg/vector-shift1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-shift1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-shift1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-shift1.c?ref=f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+#define vector(elcount, type)  \\\n+__attribute__((vector_size((elcount)*sizeof(type)))) type\n+\n+int main (int argc, char *argv[]) {\n+    vector(4, float) vfloat0 = {1., 2., 3., 4.};\n+    vector(4, float) vfloat1 = {1., 2., 3., 4.};\n+    \n+    vector(4,   int) vint   = {1,  1,  1,  1 };\n+    \n+    vint <<= vfloat0;  /* { dg-error \"nvalid operands to binary <<\" } */\n+    vfloat0 >>= vint;  /* { dg-error \"nvalid operands to binary >>\" } */\n+\n+    vfloat0 <<= vfloat1;  /* { dg-error \"nvalid operands to binary <<\" } */\n+\n+    return 0;\n+}\n+"}, {"sha": "38a9843d1176b6c75da95ead50f6c9eed0e7f054", "filename": "gcc/testsuite/gcc.dg/vector-shift3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-shift3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-shift3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-shift3.c?ref=f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#define vector(elcount, type)  \\\n+__attribute__((vector_size((elcount)*sizeof(type)))) type\n+\n+\n+int main (int argc, char *argv[]) {\n+    vector(8, short) v0 = {argc,2,3,4,5,6,7};\n+    short sc;\n+\n+    \n+    scalar1 <<= v0; /* { dg-error \".*scalar1.*undeclared\" } */\n+   \n+    return 0;\n+}\n+"}, {"sha": "4eb13c124c1c8b804168e9912fa5e6f795fde9ba", "filename": "gcc/tree.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73", "patch": "@@ -1366,6 +1366,28 @@ build_vector_from_ctor (tree type, VEC(constructor_elt,gc) *v)\n   return build_vector (type, nreverse (list));\n }\n \n+/* Build a vector of type VECTYPE where all the elements are SCs.  */\n+tree\n+build_vector_from_val (tree vectype, tree sc) \n+{\n+  int i, nunits = TYPE_VECTOR_SUBPARTS (vectype);\n+  VEC(constructor_elt, gc) *v = NULL;\n+\n+  if (sc == error_mark_node)\n+    return sc;\n+\n+  gcc_assert (TREE_TYPE (sc) == TREE_TYPE (vectype));\n+\n+  v = VEC_alloc (constructor_elt, gc, nunits);\n+  for (i = 0; i < nunits; ++i)\n+    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, sc);\n+\n+  if (CONSTANT_CLASS_P (sc))\n+    return build_vector_from_ctor (vectype, v);\n+  else \n+    return build_constructor (vectype, v);\n+}\n+\n /* Return a new CONSTRUCTOR node whose type is TYPE and whose values\n    are in the VEC pointed to by VALS.  */\n tree"}, {"sha": "f0b1e7420942bf0c1fb6e33e7e562bfdcd3d7032", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73", "patch": "@@ -4037,6 +4037,7 @@ extern tree build_int_cst_type (tree, HOST_WIDE_INT);\n extern tree build_int_cst_wide (tree, unsigned HOST_WIDE_INT, HOST_WIDE_INT);\n extern tree build_vector (tree, tree);\n extern tree build_vector_from_ctor (tree, VEC(constructor_elt,gc) *);\n+extern tree build_vector_from_val (tree, tree);\n extern tree build_constructor (tree, VEC(constructor_elt,gc) *);\n extern tree build_constructor_single (tree, tree, tree);\n extern tree build_constructor_from_list (tree, tree);"}]}