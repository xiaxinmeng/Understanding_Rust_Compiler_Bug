{"sha": "26b043e041529af951b20d4e94841e6433d9cc1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZiMDQzZTA0MTUyOWFmOTUxYjIwZDRlOTQ4NDFlNjQzM2Q5Y2MxYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-31T10:59:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-31T10:59:56Z"}, "message": "[multiple changes]\n\n2014-10-31  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch3.ads (Make_Tag_Assignment): New function, used to\n\tre-initialize the tag in a tagged object declaration with\n\tinitial value.\n\t* exp_ch3.adb (Expand_N_Object_Declaration): Use\n\tMake_Tag_Assignment to simplify code for a tagged object\n\tdeclaration.\n\t* exp_ch13.adb (Expand_Freeze_Entity): Analyze freeze actions\n\tfor the freeze node of an object.\n\t* freeze.adb (Check_Address_Clause): Use Make_Tag_Assignment when\n\tneeded to extend Freeze_Actions for a tagged object declaration.\n\n2014-10-31  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* gnat_ugn.texi: Further minor improvement to -flto entry.\n\n2014-10-31  Gary Dismukes  <dismukes@adacore.com>\n\n\t* g-dynhta.adb, g-dynhta.ads: Minor typo fixes and reformatting.\n\nFrom-SVN: r216955", "tree": {"sha": "082e592ba65f30f1ccf9a5f48bbd417d5e6ff0e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/082e592ba65f30f1ccf9a5f48bbd417d5e6ff0e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26b043e041529af951b20d4e94841e6433d9cc1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b043e041529af951b20d4e94841e6433d9cc1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26b043e041529af951b20d4e94841e6433d9cc1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b043e041529af951b20d4e94841e6433d9cc1c/comments", "author": null, "committer": null, "parents": [{"sha": "e27d328acd69237a7af3988b26dce54aed1e9741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e27d328acd69237a7af3988b26dce54aed1e9741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e27d328acd69237a7af3988b26dce54aed1e9741"}], "stats": {"total": 196, "additions": 131, "deletions": 65}, "files": [{"sha": "4a6b6591854572c80efed9c7a407d463329dce3e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b043e041529af951b20d4e94841e6433d9cc1c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b043e041529af951b20d4e94841e6433d9cc1c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=26b043e041529af951b20d4e94841e6433d9cc1c", "patch": "@@ -1,3 +1,24 @@\n+2014-10-31  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch3.ads (Make_Tag_Assignment): New function, used to\n+\tre-initialize the tag in a tagged object declaration with\n+\tinitial value.\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): Use\n+\tMake_Tag_Assignment to simplify code for a tagged object\n+\tdeclaration.\n+\t* exp_ch13.adb (Expand_Freeze_Entity): Analyze freeze actions\n+\tfor the freeze node of an object.\n+\t* freeze.adb (Check_Address_Clause): Use Make_Tag_Assignment when\n+\tneeded to extend Freeze_Actions for a tagged object declaration.\n+\n+2014-10-31  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat_ugn.texi: Further minor improvement to -flto entry.\n+\n+2014-10-31  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* g-dynhta.adb, g-dynhta.ads: Minor typo fixes and reformatting.\n+\n 2014-10-30  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch3.adb (Expand_N_Object_Declaration): Code cleanup."}, {"sha": "fa385a0dca14c9441ac3f4b10f026f43b62597a1", "filename": "gcc/ada/exp_ch13.adb", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b043e041529af951b20d4e94841e6433d9cc1c/gcc%2Fada%2Fexp_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b043e041529af951b20d4e94841e6433d9cc1c/gcc%2Fada%2Fexp_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch13.adb?ref=26b043e041529af951b20d4e94841e6433d9cc1c", "patch": "@@ -418,6 +418,20 @@ package body Exp_Ch13 is\n             Apply_Address_Clause_Check (E, N);\n          end if;\n \n+         --  Analyze actions in freeze node, if any.\n+\n+         if Present (Actions (N)) then\n+            declare\n+               Act : Node_Id;\n+            begin\n+               Act := First (Actions (N));\n+               while Present (Act) loop\n+                  Analyze (Act);\n+                  Next (Act);\n+               end loop;\n+            end;\n+         end if;\n+\n          --  If initialization statements have been captured in a compound\n          --  statement, insert them back into the tree now.\n \n@@ -566,7 +580,7 @@ package body Exp_Ch13 is\n       --  If subprogram, freeze the subprogram\n \n       elsif Is_Subprogram (E) then\n-         Freeze_Subprogram (N);\n+         Exp_Ch6.Freeze_Subprogram (N);\n \n          --  Ada 2005 (AI-251): Remove the freezing node associated with the\n          --  entities internally used by the frontend to register primitives"}, {"sha": "0e6c8dd755cbcc8996411c55fc4db607034d8f8a", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 53, "deletions": 43, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b043e041529af951b20d4e94841e6433d9cc1c/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b043e041529af951b20d4e94841e6433d9cc1c/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=26b043e041529af951b20d4e94841e6433d9cc1c", "patch": "@@ -5328,14 +5328,15 @@ package body Exp_Ch3 is\n \n       Next_N  : constant Node_Id := Next (N);\n       Id_Ref  : Node_Id;\n-      New_Ref : Node_Id;\n \n       Init_After : Node_Id := N;\n       --  Node after which the initialization actions are to be inserted. This\n       --  is normally N, except for the case of a shared passive variable, in\n       --  which case the init proc call must be inserted only after the bodies\n       --  of the shared variable procedures have been seen.\n \n+      Tag_Assign : Node_Id;\n+\n    --  Start of processing for Expand_N_Object_Declaration\n \n    begin\n@@ -5825,52 +5826,21 @@ package body Exp_Ch3 is\n             --  CPP_CLASS, and for initializations that are aggregates, because\n             --  they have to have the right tag.\n \n-            if Is_Tagged_Type (Typ)\n-              and then not Is_Class_Wide_Type (Typ)\n-              and then not Is_CPP_Class (Typ)\n-              and then Tagged_Type_Expansion\n-              and then Nkind (Expr) /= N_Aggregate\n-              and then (Nkind (Expr) /= N_Qualified_Expression\n-                         or else Nkind (Expression (Expr)) /= N_Aggregate)\n-            then\n-               declare\n-                  Full_Typ   : constant Entity_Id := Underlying_Type (Typ);\n-                  Tag_Assign : Node_Id;\n-\n-               begin\n-                  --  The re-assignment of the tag has to be done even if the\n-                  --  object is a constant. The assignment must be analyzed\n-                  --  after the declaration.\n-\n-                  New_Ref :=\n-                    Make_Selected_Component (Loc,\n-                       Prefix => New_Occurrence_Of (Def_Id, Loc),\n-                       Selector_Name =>\n-                         New_Occurrence_Of (First_Tag_Component (Full_Typ),\n-                                           Loc));\n-                  Set_Assignment_OK (New_Ref);\n-\n-                  Tag_Assign :=\n-                    Make_Assignment_Statement (Loc,\n-                       Name       => New_Ref,\n-                       Expression =>\n-                         Unchecked_Convert_To (RTE (RE_Tag),\n-                           New_Occurrence_Of\n-                             (Node\n-                               (First_Elmt (Access_Disp_Table (Full_Typ))),\n-                              Loc)));\n+            --  The re-assignment of the tag has to be done even if the object\n+            --  is a constant. The assignment must be analyzed after the\n+            --  declaration. If an address clause follows, this is handled as\n+            --  part of the freeze actions for the object, otherwise insert\n+            --  tag assignment here.\n \n-                  --  Tag initialization cannot be done before object is\n-                  --  frozen. If an address clause follows, make sure freeze\n-                  --  node exists, and insert it and the tag assignment after\n-                  --  the address clause.\n+            Tag_Assign := Make_Tag_Assignment (N);\n \n-                  if Present (Following_Address_Clause (N)) then\n-                     Init_After := Following_Address_Clause (N);\n-                  end if;\n+            if Present (Tag_Assign) then\n+               if Present (Following_Address_Clause (N)) then\n+                  Ensure_Freeze_Node (Def_Id);\n \n+               else\n                   Insert_Action_After (Init_After, Tag_Assign);\n-               end;\n+               end if;\n \n             --  Handle C++ constructor calls. Note that we do not check that\n             --  Typ is a tagged type since the equivalent Ada type of a C++\n@@ -9717,6 +9687,46 @@ package body Exp_Ch3 is\n       Predef_List := Res;\n    end Make_Predefined_Primitive_Specs;\n \n+   -------------------------\n+   -- Make_Tag_Assignment --\n+   -------------------------\n+\n+   function Make_Tag_Assignment (N : Node_Id) return Node_Id is\n+      Loc      : constant Source_Ptr := Sloc (N);\n+      Def_If   : constant Entity_Id := Defining_Identifier (N);\n+      Expr     : constant Node_Id := Expression (N);\n+      Typ      : constant Entity_Id := Etype (Def_If);\n+      Full_Typ : constant Entity_Id := Underlying_Type (Typ);\n+      New_Ref  : Node_Id;\n+\n+   begin\n+      if Is_Tagged_Type (Typ)\n+       and then not Is_Class_Wide_Type (Typ)\n+       and then not Is_CPP_Class (Typ)\n+       and then Tagged_Type_Expansion\n+       and then Nkind (Expr) /= N_Aggregate\n+       and then (Nkind (Expr) /= N_Qualified_Expression\n+                  or else Nkind (Expression (Expr)) /= N_Aggregate)\n+      then\n+         New_Ref :=\n+           Make_Selected_Component (Loc,\n+              Prefix => New_Occurrence_Of (Def_If, Loc),\n+              Selector_Name =>\n+                New_Occurrence_Of (First_Tag_Component (Full_Typ), Loc));\n+         Set_Assignment_OK (New_Ref);\n+\n+         return\n+           Make_Assignment_Statement (Loc,\n+              Name       => New_Ref,\n+              Expression =>\n+                Unchecked_Convert_To (RTE (RE_Tag),\n+                  New_Occurrence_Of (Node\n+                      (First_Elmt (Access_Disp_Table (Full_Typ))), Loc)));\n+      else\n+         return Empty;\n+      end if;\n+   end Make_Tag_Assignment;\n+\n    ---------------------------------\n    -- Needs_Simple_Initialization --\n    ---------------------------------"}, {"sha": "f432158ed3df0fbd3855eee677c33bfd88da4ac2", "filename": "gcc/ada/exp_ch3.ads", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b043e041529af951b20d4e94841e6433d9cc1c/gcc%2Fada%2Fexp_ch3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b043e041529af951b20d4e94841e6433d9cc1c/gcc%2Fada%2Fexp_ch3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.ads?ref=26b043e041529af951b20d4e94841e6433d9cc1c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -104,6 +104,14 @@ package Exp_Ch3 is\n    --  then tags components located at variable positions of Target are\n    --  initialized.\n \n+   function Make_Tag_Assignment (N : Node_Id) return Node_Id;\n+   --  An object declaration that has an initialization for a tagged object\n+   --  requires a separate reassignment of the tag of the given type, because\n+   --  the expression may include an unchecked conversion. This tag\n+   --  assignment is inserted after the declaration, but if the object has\n+   --  an address clause the assignment is handled as part of the freezing\n+   --  of the object, see Check_Address_Clause.\n+\n    function Needs_Simple_Initialization\n      (T           : Entity_Id;\n       Consider_IS : Boolean := True) return Boolean;"}, {"sha": "330ba5ddd00be04f35f99a15c3eeafea72396288", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b043e041529af951b20d4e94841e6433d9cc1c/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b043e041529af951b20d4e94841e6433d9cc1c/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=26b043e041529af951b20d4e94841e6433d9cc1c", "patch": "@@ -578,11 +578,13 @@ package body Freeze is\n    --------------------------\n \n    procedure Check_Address_Clause (E : Entity_Id) is\n-      Addr : constant Node_Id    := Address_Clause (E);\n-      Expr : Node_Id;\n-      Decl : constant Node_Id    := Declaration_Node (E);\n-      Loc  : constant Source_Ptr := Sloc (Decl);\n-      Typ  : constant Entity_Id  := Etype (E);\n+      Addr       : constant Node_Id    := Address_Clause (E);\n+      Expr       : Node_Id;\n+      Decl       : constant Node_Id    := Declaration_Node (E);\n+      Loc        : constant Source_Ptr := Sloc (Decl);\n+      Typ        : constant Entity_Id  := Etype (E);\n+      Lhs        : Node_Id;\n+      Tag_Assign : Node_Id;\n \n    begin\n       if Present (Addr) then\n@@ -636,20 +638,33 @@ package body Freeze is\n \n          if Present (Expression (Decl)) then\n \n-            --  Capture initialization value at point of declaration\n+            --  Capture initialization value at point of declaration,\n+            --  and make explicit assignment legal, because object may\n+            --  be a constant.\n \n             Remove_Side_Effects (Expression (Decl));\n+            Lhs := New_Occurrence_Of (E, Loc);\n+            Set_Assignment_OK (Lhs);\n \n             --  Move initialization to freeze actions (once the object has\n             --  been frozen, and the address clause alignment check has been\n             --  performed.\n \n             Append_Freeze_Action (E,\n               Make_Assignment_Statement (Loc,\n-                Name       => New_Occurrence_Of (E, Loc),\n+                Name       => Lhs,\n                 Expression => Expression (Decl)));\n \n             Set_No_Initialization (Decl);\n+\n+            --  If the objet is tagged, check whether the tag must be\n+            --  reassigned expliitly.\n+\n+            Tag_Assign := Make_Tag_Assignment (Decl);\n+            if Present (Tag_Assign) then\n+               Append_Freeze_Action (E, Tag_Assign);\n+            end if;\n+\n          end if;\n       end if;\n    end Check_Address_Clause;"}, {"sha": "929191d24aa0f0ef3ab34aa5fad53ee4303f7f09", "filename": "gcc/ada/g-dynhta.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b043e041529af951b20d4e94841e6433d9cc1c/gcc%2Fada%2Fg-dynhta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b043e041529af951b20d4e94841e6433d9cc1c/gcc%2Fada%2Fg-dynhta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-dynhta.adb?ref=26b043e041529af951b20d4e94841e6433d9cc1c", "patch": "@@ -507,7 +507,7 @@ package body GNAT.Dynamic_HTables is\n \n       begin\n          --  Skip the dummy head, inspect the bucket chain for an element whose\n-         --  key matches the requested key. Since each bucket chain is curcular\n+         --  key matches the requested key. Since each bucket chain is circular\n          --  the search must stop once the dummy head is encountered.\n \n          Elmt := Chain.Next;"}, {"sha": "d1dedae2a25e96a787a3712b8b0b30fabd949697", "filename": "gcc/ada/g-dynhta.ads", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b043e041529af951b20d4e94841e6433d9cc1c/gcc%2Fada%2Fg-dynhta.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b043e041529af951b20d4e94841e6433d9cc1c/gcc%2Fada%2Fg-dynhta.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-dynhta.ads?ref=26b043e041529af951b20d4e94841e6433d9cc1c", "patch": "@@ -238,10 +238,10 @@ package GNAT.Dynamic_HTables is\n    -- Load_Factor_HTable --\n    ------------------------\n \n-   --  A simple hash table abstraction capable of growing once a treshold has\n+   --  A simple hash table abstraction capable of growing once a threshold has\n    --  been exceeded. Collisions are resolved by chaining elements onto lists\n    --  hanging from individual buckets. This implementation does not make any\n-   --  effort in minimizing the number of necessary rehashes once the table has\n+   --  effort to minimize the number of necessary rehashes once the table has\n    --  been expanded, hence the term \"simple\".\n \n    --  WARNING: This hash table implementation utilizes dynamic allocation.\n@@ -254,7 +254,7 @@ package GNAT.Dynamic_HTables is\n    generic\n       type Range_Type is range <>;\n       --  The underlying range of the hash table. Note that this type must be\n-      --  large enough to accomodate multiple expansions of the table.\n+      --  large enough to accommodate multiple expansions of the table.\n \n       type Key_Type is private;\n       type Value_Type is private;\n@@ -270,12 +270,12 @@ package GNAT.Dynamic_HTables is\n       Growth_Percentage : Positive;\n       --  The amount of increase expressed as a percentage. The hash table must\n       --  grow by at least 1%. To illustrate, a value of 100 will increase the\n-      --  table by 100% effectively doubling its size.\n+      --  table by 100%, effectively doubling its size.\n \n       Load_Factor : Float;\n       --  The ratio of the elements stored within the hash table divided by the\n-      --  current size of the table. This value acts as the growth treshold. If\n-      --  exceeded, the hash table is expanded by Growth_Percentage.\n+      --  current size of the table. This value acts as the growth threshold.\n+      --  If exceeded, the hash table is expanded by Growth_Percentage.\n \n       with function Equal\n         (Left  : Key_Type;\n@@ -293,7 +293,7 @@ package GNAT.Dynamic_HTables is\n       --  Obtain the current size of the table\n \n       function Get (T : Table; Key : Key_Type) return Value_Type;\n-      --  Obtain the value associated with a key. This routne returns No_Value\n+      --  Obtain the value associated with a key. This routine returns No_Value\n       --  if the key is not present in the hash table.\n \n       procedure Remove (T : in out Table; Key : Key_Type);"}, {"sha": "532a0c111d2944f7511d69d298f258b6c40662c8", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b043e041529af951b20d4e94841e6433d9cc1c/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b043e041529af951b20d4e94841e6433d9cc1c/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=26b043e041529af951b20d4e94841e6433d9cc1c", "patch": "@@ -3513,14 +3513,12 @@ approach is that the compiler can do a whole-program analysis and choose\n the best interprocedural optimization strategy based on a complete view\n of the program, instead of a fragmentary view with the usual approach.\n This can also speed up the compilation of big programs and reduce the\n-size of the executable when used in conjunction with the @option{-gnatn1}\n-switch, compared with a traditional per-unit compilation with full\n-inlining across modules enabled with the @option{-gnatn2} switch.\n+size of the executable, compared with a traditional per-unit compilation\n+with inlining across modules enabled by the @option{-gnatn} switch.\n The drawback of this approach is that it may require more memory and that\n the debugging information generated by -g with it might be hardly usable.\n The switch, as well as the accompanying @option{-Ox} switches, must be\n-specified both for the compilation and the link phases; the recommended\n-combination is @option{-O[23] -gnatn1 -flto[=n]} in most cases.\n+specified both for the compilation and the link phases.\n If the @var{n} parameter is specified, the optimization and final code\n generation at link time are executed using @var{n} parallel jobs by\n means of an installed @command{make} program."}]}