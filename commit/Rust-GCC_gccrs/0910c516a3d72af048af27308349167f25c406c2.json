{"sha": "0910c516a3d72af048af27308349167f25c406c2", "node_id": "C_kwDOANBUbNoAKDA5MTBjNTE2YTNkNzJhZjA0OGFmMjczMDgzNDkxNjdmMjVjNDA2YzI", "commit": {"author": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2021-10-19T09:02:04Z"}, "committer": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2021-10-19T09:02:04Z"}, "message": "rs6000: Remove unspecs for vec_mrghl[bhw]\n\nvmrghb only accepts permute index {0, 16, 1, 17, 2, 18, 3, 19, 4, 20,\n5, 21, 6, 22, 7, 23} no matter for BE or LE in ISA, similarly for vmrglb.\nRemove UNSPEC_VMRGH_DIRECT/UNSPEC_VMRGL_DIRECT pattern as vec_select\n+ vec_concat as normal RTL.\n\nTested pass on P8LE, P9LE and P8BE{m32}.\n\ngcc/ChangeLog:\n\n2021-10-19  Xionghu Luo  <luoxhu@linux.ibm.com>\n\n\t* config/rs6000/altivec.md (*altivec_vmrghb_internal): Delete.\n\t(altivec_vmrghb_direct): New.\n\t(*altivec_vmrghh_internal): Delete.\n\t(altivec_vmrghh_direct): New.\n\t(*altivec_vmrghw_internal): Delete.\n\t(altivec_vmrghw_direct_<mode>): New.\n\t(altivec_vmrghw_direct): Delete.\n\t(*altivec_vmrglb_internal): Delete.\n\t(altivec_vmrglb_direct): New.\n\t(*altivec_vmrglh_internal): Delete.\n\t(altivec_vmrglh_direct): New.\n\t(*altivec_vmrglw_internal): Delete.\n\t(altivec_vmrglw_direct_<mode>): New.\n\t(altivec_vmrglw_direct): Delete.\n\t* config/rs6000/rs6000-p8swap.c (rtx_is_swappable_p): Adjust.\n\t* config/rs6000/rs6000.c (altivec_expand_vec_perm_const):\n\tAdjust.\n\t* config/rs6000/vsx.md (vsx_xxmrghw_<mode>): Adjust.\n\t(vsx_xxmrglw_<mode>): Adjust.\n\ngcc/testsuite/ChangeLog:\n\n2021-10-19  Xionghu Luo  <luoxhu@linux.ibm.com>\n\n\t* gcc.target/powerpc/builtins-1.c: Update instruction counts.", "tree": {"sha": "740baf03c4bc90f1fb37c01dd77f495f5003caaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/740baf03c4bc90f1fb37c01dd77f495f5003caaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0910c516a3d72af048af27308349167f25c406c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0910c516a3d72af048af27308349167f25c406c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0910c516a3d72af048af27308349167f25c406c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0910c516a3d72af048af27308349167f25c406c2/comments", "author": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2161caffbb56a434776608af4e4491b59e508c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2161caffbb56a434776608af4e4491b59e508c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2161caffbb56a434776608af4e4491b59e508c8"}], "stats": {"total": 314, "additions": 116, "deletions": 198}, "files": [{"sha": "51a47607989e254199741220a2409390e34a9c4e", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 58, "deletions": 145, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0910c516a3d72af048af27308349167f25c406c2/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0910c516a3d72af048af27308349167f25c406c2/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=0910c516a3d72af048af27308349167f25c406c2", "patch": "@@ -145,8 +145,6 @@\n    UNSPEC_VUPKHU_V4SF\n    UNSPEC_VUPKLU_V4SF\n    UNSPEC_VGBBD\n-   UNSPEC_VMRGH_DIRECT\n-   UNSPEC_VMRGL_DIRECT\n    UNSPEC_VSPLT_DIRECT\n    UNSPEC_VMRGEW_DIRECT\n    UNSPEC_VMRGOW_DIRECT\n@@ -1101,19 +1099,17 @@\n    (use (match_operand:V16QI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  rtvec v = gen_rtvec (16, GEN_INT (0), GEN_INT (16), GEN_INT (1), GEN_INT (17),\n-\t\t       GEN_INT (2), GEN_INT (18), GEN_INT (3), GEN_INT (19),\n-\t\t       GEN_INT (4), GEN_INT (20), GEN_INT (5), GEN_INT (21),\n-\t\t       GEN_INT (6), GEN_INT (22), GEN_INT (7), GEN_INT (23));\n-  rtx x = gen_rtx_VEC_CONCAT (V32QImode, operands[1], operands[2]);\n-  x = gen_rtx_VEC_SELECT (V16QImode, x, gen_rtx_PARALLEL (VOIDmode, v));\n-  emit_insn (gen_rtx_SET (operands[0], x));\n+  rtx (*fun) (rtx, rtx, rtx) = BYTES_BIG_ENDIAN ? gen_altivec_vmrghb_direct\n+\t\t\t\t\t\t: gen_altivec_vmrglb_direct;\n+  if (!BYTES_BIG_ENDIAN)\n+    std::swap (operands[1], operands[2]);\n+  emit_insn (fun (operands[0], operands[1], operands[2]));\n   DONE;\n })\n \n-(define_insn \"*altivec_vmrghb_internal\"\n+(define_insn \"altivec_vmrghb_direct\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-        (vec_select:V16QI\n+\t(vec_select:V16QI\n \t  (vec_concat:V32QI\n \t    (match_operand:V16QI 1 \"register_operand\" \"v\")\n \t    (match_operand:V16QI 2 \"register_operand\" \"v\"))\n@@ -1126,20 +1122,6 @@\n \t\t     (const_int 6) (const_int 22)\n \t\t     (const_int 7) (const_int 23)])))]\n   \"TARGET_ALTIVEC\"\n-{\n-  if (BYTES_BIG_ENDIAN)\n-    return \"vmrghb %0,%1,%2\";\n-  else\n-    return \"vmrglb %0,%2,%1\";\n-}\n-  [(set_attr \"type\" \"vecperm\")])\n-\n-(define_insn \"altivec_vmrghb_direct\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n-\t\t       (match_operand:V16QI 2 \"register_operand\" \"v\")]\n-\t\t      UNSPEC_VMRGH_DIRECT))]\n-  \"TARGET_ALTIVEC\"\n   \"vmrghb %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n@@ -1149,16 +1131,15 @@\n    (use (match_operand:V8HI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  rtvec v = gen_rtvec (8, GEN_INT (0), GEN_INT (8), GEN_INT (1), GEN_INT (9),\n-\t\t       GEN_INT (2), GEN_INT (10), GEN_INT (3), GEN_INT (11));\n-  rtx x = gen_rtx_VEC_CONCAT (V16HImode, operands[1], operands[2]);\n-\n-  x = gen_rtx_VEC_SELECT (V8HImode, x, gen_rtx_PARALLEL (VOIDmode, v));\n-  emit_insn (gen_rtx_SET (operands[0], x));\n+  rtx (*fun) (rtx, rtx, rtx) = BYTES_BIG_ENDIAN ? gen_altivec_vmrghh_direct\n+\t\t\t\t\t\t: gen_altivec_vmrglh_direct;\n+  if (!BYTES_BIG_ENDIAN)\n+    std::swap (operands[1], operands[2]);\n+  emit_insn (fun (operands[0], operands[1], operands[2]));\n   DONE;\n })\n \n-(define_insn \"*altivec_vmrghh_internal\"\n+(define_insn \"altivec_vmrghh_direct\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n         (vec_select:V8HI\n \t  (vec_concat:V16HI\n@@ -1169,20 +1150,6 @@\n \t\t     (const_int 2) (const_int 10)\n \t\t     (const_int 3) (const_int 11)])))]\n   \"TARGET_ALTIVEC\"\n-{\n-  if (BYTES_BIG_ENDIAN)\n-    return \"vmrghh %0,%1,%2\";\n-  else\n-    return \"vmrglh %0,%2,%1\";\n-}\n-  [(set_attr \"type\" \"vecperm\")])\n-\n-(define_insn \"altivec_vmrghh_direct\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n-        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n-                      (match_operand:V8HI 2 \"register_operand\" \"v\")]\n-                     UNSPEC_VMRGH_DIRECT))]\n-  \"TARGET_ALTIVEC\"\n   \"vmrghh %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n@@ -1192,35 +1159,23 @@\n    (use (match_operand:V4SI 2 \"register_operand\"))]\n   \"VECTOR_MEM_ALTIVEC_P (V4SImode)\"\n {\n-  rtvec v = gen_rtvec (4, GEN_INT (0), GEN_INT (4), GEN_INT (1), GEN_INT (5));\n-  rtx x = gen_rtx_VEC_CONCAT (V8SImode, operands[1], operands[2]);\n-  x = gen_rtx_VEC_SELECT (V4SImode, x, gen_rtx_PARALLEL (VOIDmode, v));\n-  emit_insn (gen_rtx_SET (operands[0], x));\n+  rtx (*fun) (rtx, rtx, rtx);\n+  fun = BYTES_BIG_ENDIAN ? gen_altivec_vmrghw_direct_v4si\n+\t\t\t : gen_altivec_vmrglw_direct_v4si;\n+  if (!BYTES_BIG_ENDIAN)\n+    std::swap (operands[1], operands[2]);\n+  emit_insn (fun (operands[0], operands[1], operands[2]));\n   DONE;\n })\n \n-(define_insn \"*altivec_vmrghw_internal\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (vec_select:V4SI\n-\t  (vec_concat:V8SI\n-\t    (match_operand:V4SI 1 \"register_operand\" \"v\")\n-\t    (match_operand:V4SI 2 \"register_operand\" \"v\"))\n+(define_insn \"altivec_vmrghw_direct_<mode>\"\n+  [(set (match_operand:VSX_W 0 \"register_operand\" \"=wa,v\")\n+\t(vec_select:VSX_W\n+\t  (vec_concat:<VS_double>\n+\t    (match_operand:VSX_W 1 \"register_operand\" \"wa,v\")\n+\t    (match_operand:VSX_W 2 \"register_operand\" \"wa,v\"))\n \t  (parallel [(const_int 0) (const_int 4)\n \t\t     (const_int 1) (const_int 5)])))]\n-  \"VECTOR_MEM_ALTIVEC_P (V4SImode)\"\n-{\n-  if (BYTES_BIG_ENDIAN)\n-    return \"vmrghw %0,%1,%2\";\n-  else\n-    return \"vmrglw %0,%2,%1\";\n-}\n-  [(set_attr \"type\" \"vecperm\")])\n-\n-(define_insn \"altivec_vmrghw_direct\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=wa,v\")\n-\t(unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"wa,v\")\n-\t\t      (match_operand:V4SI 2 \"register_operand\" \"wa,v\")]\n-\t\t     UNSPEC_VMRGH_DIRECT))]\n   \"TARGET_ALTIVEC\"\n   \"@\n    xxmrghw %x0,%x1,%x2\n@@ -1250,19 +1205,17 @@\n    (use (match_operand:V16QI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  rtvec v = gen_rtvec (16, GEN_INT (8), GEN_INT (24), GEN_INT (9), GEN_INT (25),\n-\t\t       GEN_INT (10), GEN_INT (26), GEN_INT (11), GEN_INT (27),\n-\t\t       GEN_INT (12), GEN_INT (28), GEN_INT (13), GEN_INT (29),\n-\t\t       GEN_INT (14), GEN_INT (30), GEN_INT (15), GEN_INT (31));\n-  rtx x = gen_rtx_VEC_CONCAT (V32QImode, operands[1], operands[2]);\n-  x = gen_rtx_VEC_SELECT (V16QImode, x, gen_rtx_PARALLEL (VOIDmode, v));\n-  emit_insn (gen_rtx_SET (operands[0], x));\n+  rtx (*fun) (rtx, rtx, rtx) = BYTES_BIG_ENDIAN ? gen_altivec_vmrglb_direct\n+\t\t\t\t\t\t: gen_altivec_vmrghb_direct;\n+  if (!BYTES_BIG_ENDIAN)\n+    std::swap (operands[1], operands[2]);\n+  emit_insn (fun (operands[0], operands[1], operands[2]));\n   DONE;\n })\n \n-(define_insn \"*altivec_vmrglb_internal\"\n+(define_insn \"altivec_vmrglb_direct\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-        (vec_select:V16QI\n+\t(vec_select:V16QI\n \t  (vec_concat:V32QI\n \t    (match_operand:V16QI 1 \"register_operand\" \"v\")\n \t    (match_operand:V16QI 2 \"register_operand\" \"v\"))\n@@ -1275,20 +1228,6 @@\n \t\t     (const_int 14) (const_int 30)\n \t\t     (const_int 15) (const_int 31)])))]\n   \"TARGET_ALTIVEC\"\n-{\n-  if (BYTES_BIG_ENDIAN)\n-    return \"vmrglb %0,%1,%2\";\n-  else\n-    return \"vmrghb %0,%2,%1\";\n-}\n-  [(set_attr \"type\" \"vecperm\")])\n-\n-(define_insn \"altivec_vmrglb_direct\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n-\t\t       (match_operand:V16QI 2 \"register_operand\" \"v\")]\n-\t\t      UNSPEC_VMRGL_DIRECT))]\n-  \"TARGET_ALTIVEC\"\n   \"vmrglb %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n@@ -1298,15 +1237,15 @@\n    (use (match_operand:V8HI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  rtvec v = gen_rtvec (8, GEN_INT (4), GEN_INT (12), GEN_INT (5), GEN_INT (13),\n-\t\t       GEN_INT (6), GEN_INT (14), GEN_INT (7), GEN_INT (15));\n-  rtx x = gen_rtx_VEC_CONCAT (V16HImode, operands[1], operands[2]);\n-  x = gen_rtx_VEC_SELECT (V8HImode, x, gen_rtx_PARALLEL (VOIDmode, v));\n-  emit_insn (gen_rtx_SET (operands[0], x));\n+  rtx (*fun) (rtx, rtx, rtx) = BYTES_BIG_ENDIAN ? gen_altivec_vmrglh_direct\n+\t\t\t\t\t\t: gen_altivec_vmrghh_direct;\n+  if (!BYTES_BIG_ENDIAN)\n+    std::swap (operands[1], operands[2]);\n+  emit_insn (fun (operands[0], operands[1], operands[2]));\n   DONE;\n })\n \n-(define_insn \"*altivec_vmrglh_internal\"\n+(define_insn \"altivec_vmrglh_direct\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n         (vec_select:V8HI\n \t  (vec_concat:V16HI\n@@ -1317,20 +1256,6 @@\n \t\t     (const_int 6) (const_int 14)\n \t\t     (const_int 7) (const_int 15)])))]\n   \"TARGET_ALTIVEC\"\n-{\n-  if (BYTES_BIG_ENDIAN)\n-    return \"vmrglh %0,%1,%2\";\n-  else\n-    return \"vmrghh %0,%2,%1\";\n-}\n-  [(set_attr \"type\" \"vecperm\")])\n-\n-(define_insn \"altivec_vmrglh_direct\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n-        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n-\t\t      (match_operand:V8HI 2 \"register_operand\" \"v\")]\n-\t\t     UNSPEC_VMRGL_DIRECT))]\n-  \"TARGET_ALTIVEC\"\n   \"vmrglh %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n@@ -1340,35 +1265,23 @@\n    (use (match_operand:V4SI 2 \"register_operand\"))]\n   \"VECTOR_MEM_ALTIVEC_P (V4SImode)\"\n {\n-  rtvec v = gen_rtvec (4, GEN_INT (2), GEN_INT (6), GEN_INT (3), GEN_INT (7));\n-  rtx x = gen_rtx_VEC_CONCAT (V8SImode, operands[1], operands[2]);\n-  x = gen_rtx_VEC_SELECT (V4SImode, x, gen_rtx_PARALLEL (VOIDmode, v));\n-  emit_insn (gen_rtx_SET (operands[0], x));\n+  rtx (*fun) (rtx, rtx, rtx);\n+  fun = BYTES_BIG_ENDIAN ? gen_altivec_vmrglw_direct_v4si\n+\t\t\t : gen_altivec_vmrghw_direct_v4si;\n+  if (!BYTES_BIG_ENDIAN)\n+    std::swap (operands[1], operands[2]);\n+  emit_insn (fun (operands[0], operands[1], operands[2]));\n   DONE;\n })\n \n-(define_insn \"*altivec_vmrglw_internal\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (vec_select:V4SI\n-\t  (vec_concat:V8SI\n-\t    (match_operand:V4SI 1 \"register_operand\" \"v\")\n-\t    (match_operand:V4SI 2 \"register_operand\" \"v\"))\n+(define_insn \"altivec_vmrglw_direct_<mode>\"\n+  [(set (match_operand:VSX_W 0 \"register_operand\" \"=wa,v\")\n+\t(vec_select:VSX_W\n+\t  (vec_concat:<VS_double>\n+\t    (match_operand:VSX_W 1 \"register_operand\" \"wa,v\")\n+\t    (match_operand:VSX_W 2 \"register_operand\" \"wa,v\"))\n \t  (parallel [(const_int 2) (const_int 6)\n \t\t     (const_int 3) (const_int 7)])))]\n-  \"VECTOR_MEM_ALTIVEC_P (V4SImode)\"\n-{\n-  if (BYTES_BIG_ENDIAN)\n-    return \"vmrglw %0,%1,%2\";\n-  else\n-    return \"vmrghw %0,%2,%1\";\n-}\n-  [(set_attr \"type\" \"vecperm\")])\n-\n-(define_insn \"altivec_vmrglw_direct\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=wa,v\")\n-\t(unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"wa,v\")\n-\t\t      (match_operand:V4SI 2 \"register_operand\" \"wa,v\")]\n-\t\t     UNSPEC_VMRGL_DIRECT))]\n   \"TARGET_ALTIVEC\"\n   \"@\n    xxmrglw %x0,%x1,%x2\n@@ -3842,13 +3755,13 @@\n     {\n       emit_insn (gen_altivec_vmuleuh (ve, operands[1], operands[2]));\n       emit_insn (gen_altivec_vmulouh (vo, operands[1], operands[2]));\n-      emit_insn (gen_altivec_vmrghw_direct (operands[0], ve, vo));\n+      emit_insn (gen_altivec_vmrghw_direct_v4si (operands[0], ve, vo));\n     }\n   else\n     {\n       emit_insn (gen_altivec_vmulouh (ve, operands[1], operands[2]));\n       emit_insn (gen_altivec_vmuleuh (vo, operands[1], operands[2]));\n-      emit_insn (gen_altivec_vmrghw_direct (operands[0], vo, ve));\n+      emit_insn (gen_altivec_vmrghw_direct_v4si (operands[0], vo, ve));\n     }\n   DONE;\n })\n@@ -3867,13 +3780,13 @@\n     {\n       emit_insn (gen_altivec_vmuleuh (ve, operands[1], operands[2]));\n       emit_insn (gen_altivec_vmulouh (vo, operands[1], operands[2]));\n-      emit_insn (gen_altivec_vmrglw_direct (operands[0], ve, vo));\n+      emit_insn (gen_altivec_vmrglw_direct_v4si (operands[0], ve, vo));\n     }\n   else\n     {\n       emit_insn (gen_altivec_vmulouh (ve, operands[1], operands[2]));\n       emit_insn (gen_altivec_vmuleuh (vo, operands[1], operands[2]));\n-      emit_insn (gen_altivec_vmrglw_direct (operands[0], vo, ve));\n+      emit_insn (gen_altivec_vmrglw_direct_v4si (operands[0], vo, ve));\n     }\n   DONE;\n })\n@@ -3892,13 +3805,13 @@\n     {\n       emit_insn (gen_altivec_vmulesh (ve, operands[1], operands[2]));\n       emit_insn (gen_altivec_vmulosh (vo, operands[1], operands[2]));\n-      emit_insn (gen_altivec_vmrghw_direct (operands[0], ve, vo));\n+      emit_insn (gen_altivec_vmrghw_direct_v4si (operands[0], ve, vo));\n     }\n   else\n     {\n       emit_insn (gen_altivec_vmulosh (ve, operands[1], operands[2]));\n       emit_insn (gen_altivec_vmulesh (vo, operands[1], operands[2]));\n-      emit_insn (gen_altivec_vmrghw_direct (operands[0], vo, ve));\n+      emit_insn (gen_altivec_vmrghw_direct_v4si (operands[0], vo, ve));\n     }\n   DONE;\n })\n@@ -3917,13 +3830,13 @@\n     {\n       emit_insn (gen_altivec_vmulesh (ve, operands[1], operands[2]));\n       emit_insn (gen_altivec_vmulosh (vo, operands[1], operands[2]));\n-      emit_insn (gen_altivec_vmrglw_direct (operands[0], ve, vo));\n+      emit_insn (gen_altivec_vmrglw_direct_v4si (operands[0], ve, vo));\n     }\n   else\n     {\n       emit_insn (gen_altivec_vmulosh (ve, operands[1], operands[2]));\n       emit_insn (gen_altivec_vmulesh (vo, operands[1], operands[2]));\n-      emit_insn (gen_altivec_vmrglw_direct (operands[0], vo, ve));\n+      emit_insn (gen_altivec_vmrglw_direct_v4si (operands[0], vo, ve));\n     }\n   DONE;\n })"}, {"sha": "0a8407226d9b6ba2109a17b90cda9cb3a6a0487a", "filename": "gcc/config/rs6000/rs6000-p8swap.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0910c516a3d72af048af27308349167f25c406c2/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0910c516a3d72af048af27308349167f25c406c2/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c?ref=0910c516a3d72af048af27308349167f25c406c2", "patch": "@@ -766,8 +766,6 @@ rtx_is_swappable_p (rtx op, unsigned int *special)\n \t  default:\n \t    break;\n \t  case UNSPEC_VBPERMQ:\n-\t  case UNSPEC_VMRGH_DIRECT:\n-\t  case UNSPEC_VMRGL_DIRECT:\n \t  case UNSPEC_VPACK_SIGN_SIGN_SAT:\n \t  case UNSPEC_VPACK_SIGN_UNS_SAT:\n \t  case UNSPEC_VPACK_UNS_UNS_MOD:"}, {"sha": "68111c3fe6ad532507f34fa6e8de47bdb413b103", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 38, "deletions": 37, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0910c516a3d72af048af27308349167f25c406c2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0910c516a3d72af048af27308349167f25c406c2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=0910c516a3d72af048af27308349167f25c406c2", "patch": "@@ -23313,43 +23313,44 @@ altivec_expand_vec_perm_const (rtx target, rtx op0, rtx op1,\n     unsigned char perm[16];\n   };\n   static const struct altivec_perm_insn patterns[] = {\n-    { OPTION_MASK_ALTIVEC, CODE_FOR_altivec_vpkuhum_direct,\n-      {  1,  3,  5,  7,  9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31 } },\n-    { OPTION_MASK_ALTIVEC, CODE_FOR_altivec_vpkuwum_direct,\n-      {  2,  3,  6,  7, 10, 11, 14, 15, 18, 19, 22, 23, 26, 27, 30, 31 } },\n-    { OPTION_MASK_ALTIVEC, \n-      (BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrghb_direct\n-       : CODE_FOR_altivec_vmrglb_direct),\n-      {  0, 16,  1, 17,  2, 18,  3, 19,  4, 20,  5, 21,  6, 22,  7, 23 } },\n-    { OPTION_MASK_ALTIVEC,\n-      (BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrghh_direct\n-       : CODE_FOR_altivec_vmrglh_direct),\n-      {  0,  1, 16, 17,  2,  3, 18, 19,  4,  5, 20, 21,  6,  7, 22, 23 } },\n-    { OPTION_MASK_ALTIVEC,\n-      (BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrghw_direct\n-       : CODE_FOR_altivec_vmrglw_direct),\n-      {  0,  1,  2,  3, 16, 17, 18, 19,  4,  5,  6,  7, 20, 21, 22, 23 } },\n-    { OPTION_MASK_ALTIVEC,\n-      (BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrglb_direct\n-       : CODE_FOR_altivec_vmrghb_direct),\n-      {  8, 24,  9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31 } },\n-    { OPTION_MASK_ALTIVEC,\n-      (BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrglh_direct\n-       : CODE_FOR_altivec_vmrghh_direct),\n-      {  8,  9, 24, 25, 10, 11, 26, 27, 12, 13, 28, 29, 14, 15, 30, 31 } },\n-    { OPTION_MASK_ALTIVEC,\n-      (BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrglw_direct\n-       : CODE_FOR_altivec_vmrghw_direct),\n-      {  8,  9, 10, 11, 24, 25, 26, 27, 12, 13, 14, 15, 28, 29, 30, 31 } },\n-    { OPTION_MASK_P8_VECTOR,\n-      (BYTES_BIG_ENDIAN ? CODE_FOR_p8_vmrgew_v4sf_direct\n-       : CODE_FOR_p8_vmrgow_v4sf_direct),\n-      {  0,  1,  2,  3, 16, 17, 18, 19,  8,  9, 10, 11, 24, 25, 26, 27 } },\n-    { OPTION_MASK_P8_VECTOR,\n-      (BYTES_BIG_ENDIAN ? CODE_FOR_p8_vmrgow_v4sf_direct\n-       : CODE_FOR_p8_vmrgew_v4sf_direct),\n-      {  4,  5,  6,  7, 20, 21, 22, 23, 12, 13, 14, 15, 28, 29, 30, 31 } }\n-  };\n+    {OPTION_MASK_ALTIVEC,\n+     CODE_FOR_altivec_vpkuhum_direct,\n+     {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31}},\n+    {OPTION_MASK_ALTIVEC,\n+     CODE_FOR_altivec_vpkuwum_direct,\n+     {2, 3, 6, 7, 10, 11, 14, 15, 18, 19, 22, 23, 26, 27, 30, 31}},\n+    {OPTION_MASK_ALTIVEC,\n+     BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrghb_direct\n+\t\t      : CODE_FOR_altivec_vmrglb_direct,\n+     {0, 16, 1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23}},\n+    {OPTION_MASK_ALTIVEC,\n+     BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrghh_direct\n+\t\t      : CODE_FOR_altivec_vmrglh_direct,\n+     {0, 1, 16, 17, 2, 3, 18, 19, 4, 5, 20, 21, 6, 7, 22, 23}},\n+    {OPTION_MASK_ALTIVEC,\n+     BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrghw_direct_v4si\n+\t\t      : CODE_FOR_altivec_vmrglw_direct_v4si,\n+     {0, 1, 2, 3, 16, 17, 18, 19, 4, 5, 6, 7, 20, 21, 22, 23}},\n+    {OPTION_MASK_ALTIVEC,\n+     BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrglb_direct\n+\t\t      : CODE_FOR_altivec_vmrghb_direct,\n+     {8, 24, 9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31}},\n+    {OPTION_MASK_ALTIVEC,\n+     BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrglh_direct\n+\t\t      : CODE_FOR_altivec_vmrghh_direct,\n+     {8, 9, 24, 25, 10, 11, 26, 27, 12, 13, 28, 29, 14, 15, 30, 31}},\n+    {OPTION_MASK_ALTIVEC,\n+     BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrglw_direct_v4si\n+\t\t      : CODE_FOR_altivec_vmrghw_direct_v4si,\n+     {8, 9, 10, 11, 24, 25, 26, 27, 12, 13, 14, 15, 28, 29, 30, 31}},\n+    {OPTION_MASK_P8_VECTOR,\n+     BYTES_BIG_ENDIAN ? CODE_FOR_p8_vmrgew_v4sf_direct\n+\t\t      : CODE_FOR_p8_vmrgow_v4sf_direct,\n+     {0, 1, 2, 3, 16, 17, 18, 19, 8, 9, 10, 11, 24, 25, 26, 27}},\n+    {OPTION_MASK_P8_VECTOR,\n+     BYTES_BIG_ENDIAN ? CODE_FOR_p8_vmrgow_v4sf_direct\n+\t\t      : CODE_FOR_p8_vmrgew_v4sf_direct,\n+     {4, 5, 6, 7, 20, 21, 22, 23, 12, 13, 14, 15, 28, 29, 30, 31}}};\n \n   unsigned int i, j, elt, which;\n   unsigned char perm[16];"}, {"sha": "346f1a9ea5bd19731806e70d1ca2306e5029e00e", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0910c516a3d72af048af27308349167f25c406c2/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0910c516a3d72af048af27308349167f25c406c2/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=0910c516a3d72af048af27308349167f25c406c2", "patch": "@@ -4688,7 +4688,7 @@\n   [(set_attr \"type\" \"vecperm\")])\n \n ;; V4SF/V4SI interleave\n-(define_insn \"vsx_xxmrghw_<mode>\"\n+(define_expand \"vsx_xxmrghw_<mode>\"\n   [(set (match_operand:VSX_W 0 \"vsx_register_operand\" \"=wa\")\n         (vec_select:VSX_W\n \t  (vec_concat:<VS_double>\n@@ -4698,14 +4698,17 @@\n \t\t     (const_int 1) (const_int 5)])))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n {\n-  if (BYTES_BIG_ENDIAN)\n-    return \"xxmrghw %x0,%x1,%x2\";\n-  else\n-    return \"xxmrglw %x0,%x2,%x1\";\n+  rtx (*fun) (rtx, rtx, rtx);\n+  fun = BYTES_BIG_ENDIAN ? gen_altivec_vmrghw_direct_<mode>\n+\t\t\t : gen_altivec_vmrglw_direct_<mode>;\n+  if (!BYTES_BIG_ENDIAN)\n+    std::swap (operands[1], operands[2]);\n+  emit_insn (fun (operands[0], operands[1], operands[2]));\n+  DONE;\n }\n   [(set_attr \"type\" \"vecperm\")])\n \n-(define_insn \"vsx_xxmrglw_<mode>\"\n+(define_expand \"vsx_xxmrglw_<mode>\"\n   [(set (match_operand:VSX_W 0 \"vsx_register_operand\" \"=wa\")\n \t(vec_select:VSX_W\n \t  (vec_concat:<VS_double>\n@@ -4715,10 +4718,13 @@\n \t\t     (const_int 3) (const_int 7)])))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n {\n-  if (BYTES_BIG_ENDIAN)\n-    return \"xxmrglw %x0,%x1,%x2\";\n-  else\n-    return \"xxmrghw %x0,%x2,%x1\";\n+  rtx (*fun) (rtx, rtx, rtx);\n+  fun = BYTES_BIG_ENDIAN ? gen_altivec_vmrglw_direct_<mode>\n+\t\t\t : gen_altivec_vmrghw_direct_<mode>;\n+  if (!BYTES_BIG_ENDIAN)\n+    std::swap (operands[1], operands[2]);\n+  emit_insn (fun (operands[0], operands[1], operands[2]));\n+  DONE;\n }\n   [(set_attr \"type\" \"vecperm\")])\n "}, {"sha": "2dafa9029534f81f6f0b6dffba9a6376b236c3dc", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0910c516a3d72af048af27308349167f25c406c2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0910c516a3d72af048af27308349167f25c406c2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.c?ref=0910c516a3d72af048af27308349167f25c406c2", "patch": "@@ -317,10 +317,10 @@ int main ()\n /* { dg-final { scan-assembler-times \"vctuxs\" 2 } } */\n \n /* { dg-final { scan-assembler-times \"vmrghb\" 4 { target be } } } */\n-/* { dg-final { scan-assembler-times \"vmrghb\" 5 { target le } } } */\n+/* { dg-final { scan-assembler-times \"vmrghb\" 6 { target le } } } */\n /* { dg-final { scan-assembler-times \"vmrghh\" 8 } } */\n-/* { dg-final { scan-assembler-times \"xxmrghw\" 8 } } */\n-/* { dg-final { scan-assembler-times \"xxmrglw\" 8 } } */\n+/* { dg-final { scan-assembler-times \"xxmrghw\" 4 } } */\n+/* { dg-final { scan-assembler-times \"xxmrglw\" 4 } } */\n /* { dg-final { scan-assembler-times \"vmrglh\" 8 } } */\n /* { dg-final { scan-assembler-times \"xxlnor\" 6 } } */\n /* { dg-final { scan-assembler-times {\\mvpkudus\\M} 1 } } */\n@@ -347,7 +347,7 @@ int main ()\n /* { dg-final { scan-assembler-times \"vspltb\" 6 } } */\n /* { dg-final { scan-assembler-times \"vspltw\" 0 } } */\n /* { dg-final { scan-assembler-times \"vmrgow\" 8 } } */\n-/* { dg-final { scan-assembler-times \"vmrglb\" 5 { target le } } } */\n+/* { dg-final { scan-assembler-times \"vmrglb\" 4 { target le } } } */\n /* { dg-final { scan-assembler-times \"vmrglb\" 6 { target be } } } */\n /* { dg-final { scan-assembler-times \"vmrgew\" 8 } } */\n /* { dg-final { scan-assembler-times \"vsplth\" 8 } } */"}]}