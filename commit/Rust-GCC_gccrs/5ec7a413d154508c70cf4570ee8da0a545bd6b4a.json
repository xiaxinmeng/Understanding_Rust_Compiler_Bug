{"sha": "5ec7a413d154508c70cf4570ee8da0a545bd6b4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVjN2E0MTNkMTU0NTA4YzcwY2Y0NTcwZWU4ZGEwYTU0NWJkNmI0YQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-12-06T19:37:39Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-12-06T19:37:39Z"}, "message": "re PR other/29842 ([meta-bug] outstanding patches / issues from STMicroelectronics)\n\n\tPR go/29842\n    runtime: update HURD support for mOS now being embedded\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/210285\n\nFrom-SVN: r279062", "tree": {"sha": "60ed50a5bdb7b3a50e47cb83a46f583f26cbe4e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60ed50a5bdb7b3a50e47cb83a46f583f26cbe4e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ec7a413d154508c70cf4570ee8da0a545bd6b4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ec7a413d154508c70cf4570ee8da0a545bd6b4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ec7a413d154508c70cf4570ee8da0a545bd6b4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ec7a413d154508c70cf4570ee8da0a545bd6b4a/comments", "author": null, "committer": null, "parents": [{"sha": "1a880ef2110aaa2c03b6eb88ef792d324b89f566", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a880ef2110aaa2c03b6eb88ef792d324b89f566", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a880ef2110aaa2c03b6eb88ef792d324b89f566"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "e5e555dd6f0dd7dfc1ce93644189044e578eb2d3", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec7a413d154508c70cf4570ee8da0a545bd6b4a/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec7a413d154508c70cf4570ee8da0a545bd6b4a/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=5ec7a413d154508c70cf4570ee8da0a545bd6b4a", "patch": "@@ -1,4 +1,4 @@\n-e32651d37e0c43bb7595ac94363b079610bed746\n+f04751699e1a1ce98fe8bdbcce5a00f1be6a7d15\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "2a09e1253c1262047f2478dd79a26848a8aed416", "filename": "libgo/go/runtime/os_hurd.go", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec7a413d154508c70cf4570ee8da0a545bd6b4a/libgo%2Fgo%2Fruntime%2Fos_hurd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec7a413d154508c70cf4570ee8da0a545bd6b4a/libgo%2Fgo%2Fruntime%2Fos_hurd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fos_hurd.go?ref=5ec7a413d154508c70cf4570ee8da0a545bd6b4a", "patch": "@@ -39,7 +39,7 @@ func sem_timedwait(sem *_sem_t, timeout *timespec) int32\n \n //go:nosplit\n func semacreate(mp *m) {\n-\tif mp.mos.waitsema != 0 {\n+\tif mp.waitsema != 0 {\n \t\treturn\n \t}\n \n@@ -52,7 +52,7 @@ func semacreate(mp *m) {\n \tif sem_init(sem, 0, 0) != 0 {\n \t\tthrow(\"sem_init\")\n \t}\n-\tmp.mos.waitsema = uintptr(unsafe.Pointer(sem))\n+\tmp.waitsema = uintptr(unsafe.Pointer(sem))\n }\n \n //go:nosplit\n@@ -62,7 +62,7 @@ func semasleep(ns int64) int32 {\n \t\tvar ts timespec\n \t\tts.setNsec(ns)\n \n-\t\tif sem_timedwait((*_sem_t)(unsafe.Pointer(_m_.mos.waitsema)), &ts) != 0 {\n+\t\tif sem_timedwait((*_sem_t)(unsafe.Pointer(_m_.waitsema)), &ts) != 0 {\n \t\t\terr := errno()\n \t\t\tif err == _ETIMEDOUT || err == _EAGAIN || err == _EINTR {\n \t\t\t\treturn -1\n@@ -72,7 +72,7 @@ func semasleep(ns int64) int32 {\n \t\treturn 0\n \t}\n \tfor {\n-\t\tr1 := sem_wait((*_sem_t)(unsafe.Pointer(_m_.mos.waitsema)))\n+\t\tr1 := sem_wait((*_sem_t)(unsafe.Pointer(_m_.waitsema)))\n \t\tif r1 == 0 {\n \t\t\tbreak\n \t\t}\n@@ -86,7 +86,7 @@ func semasleep(ns int64) int32 {\n \n //go:nosplit\n func semawakeup(mp *m) {\n-\tif sem_post((*_sem_t)(unsafe.Pointer(mp.mos.waitsema))) != 0 {\n+\tif sem_post((*_sem_t)(unsafe.Pointer(mp.waitsema))) != 0 {\n \t\tthrow(\"sem_post\")\n \t}\n }"}]}