{"sha": "c2453253e725d72661385827a0d1e67b31f31c6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI0NTMyNTNlNzI1ZDcyNjYxMzg1ODI3YTBkMWU2N2IzMWYzMWM2YQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-02-01T13:21:21Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-02-01T13:21:21Z"}, "message": "avr.c: Resolve all AS1 and AS2 macros.\n\n\t* config/avr/avr.c: Resolve all AS1 and AS2 macros.\n\t* config/avr/avr.h (AS1, AS2, AS2C, AS3): Remove.\n\t(OUT_AS1, OUT_AS2): Remove.\n\nFrom-SVN: r183800", "tree": {"sha": "62a8087badc7ee7c7883cfcb77ccebf305a84d39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62a8087badc7ee7c7883cfcb77ccebf305a84d39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2453253e725d72661385827a0d1e67b31f31c6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2453253e725d72661385827a0d1e67b31f31c6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2453253e725d72661385827a0d1e67b31f31c6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2453253e725d72661385827a0d1e67b31f31c6a/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "619392851d273f47d04b7a09b83568d23183447f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/619392851d273f47d04b7a09b83568d23183447f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/619392851d273f47d04b7a09b83568d23183447f"}], "stats": {"total": 1646, "additions": 815, "deletions": 831}, "files": [{"sha": "e182b73123f71713dfe280b725ee56af53cc94d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2453253e725d72661385827a0d1e67b31f31c6a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2453253e725d72661385827a0d1e67b31f31c6a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2453253e725d72661385827a0d1e67b31f31c6a", "patch": "@@ -1,3 +1,9 @@\n+2012-02-01  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr.c: Resolve all AS1 and AS2 macros.\n+\t* config/avr/avr.h (AS1, AS2, AS2C, AS3): Remove.\n+\t(OUT_AS1, OUT_AS2): Remove.\n+\n 2012-02-01  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR rtl-optimization/51374"}, {"sha": "6ff8b791363339c32dd725e7350572da03d7ccf1", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 809, "deletions": 815, "changes": 1624, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2453253e725d72661385827a0d1e67b31f31c6a/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2453253e725d72661385827a0d1e67b31f31c6a/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=c2453253e725d72661385827a0d1e67b31f31c6a", "patch": "@@ -2118,90 +2118,90 @@ ret_cond_branch (rtx x, int len, int reverse)\n     {\n     case GT:\n       if (cc_prev_status.flags & CC_OVERFLOW_UNUSABLE)\n-\treturn (len == 1 ? (AS1 (breq,.+2) CR_TAB\n-\t\t\t    AS1 (brpl,%0)) :\n-\t\tlen == 2 ? (AS1 (breq,.+4) CR_TAB\n-\t\t\t    AS1 (brmi,.+2) CR_TAB\n-\t\t\t    AS1 (rjmp,%0)) :\n-\t\t(AS1 (breq,.+6) CR_TAB\n-\t\t AS1 (brmi,.+4) CR_TAB\n-\t\t AS1 (jmp,%0)));\n+\treturn (len == 1 ? (\"breq .+2\" CR_TAB\n+\t\t\t    \"brpl %0\") :\n+\t\tlen == 2 ? (\"breq .+4\" CR_TAB\n+\t\t\t    \"brmi .+2\" CR_TAB\n+\t\t\t    \"rjmp %0\") :\n+\t\t(\"breq .+6\" CR_TAB\n+\t\t \"brmi .+4\" CR_TAB\n+\t\t \"jmp %0\"));\n \t  \n       else\n-\treturn (len == 1 ? (AS1 (breq,.+2) CR_TAB\n-\t\t\t    AS1 (brge,%0)) :\n-\t\tlen == 2 ? (AS1 (breq,.+4) CR_TAB\n-\t\t\t    AS1 (brlt,.+2) CR_TAB\n-\t\t\t    AS1 (rjmp,%0)) :\n-\t\t(AS1 (breq,.+6) CR_TAB\n-\t\t AS1 (brlt,.+4) CR_TAB\n-\t\t AS1 (jmp,%0)));\n+\treturn (len == 1 ? (\"breq .+2\" CR_TAB\n+\t\t\t    \"brge %0\") :\n+\t\tlen == 2 ? (\"breq .+4\" CR_TAB\n+\t\t\t    \"brlt .+2\" CR_TAB\n+\t\t\t    \"rjmp %0\") :\n+\t\t(\"breq .+6\" CR_TAB\n+\t\t \"brlt .+4\" CR_TAB\n+\t\t \"jmp %0\"));\n     case GTU:\n-      return (len == 1 ? (AS1 (breq,.+2) CR_TAB\n-                          AS1 (brsh,%0)) :\n-              len == 2 ? (AS1 (breq,.+4) CR_TAB\n-                          AS1 (brlo,.+2) CR_TAB\n-                          AS1 (rjmp,%0)) :\n-              (AS1 (breq,.+6) CR_TAB\n-               AS1 (brlo,.+4) CR_TAB\n-               AS1 (jmp,%0)));\n+      return (len == 1 ? (\"breq .+2\" CR_TAB\n+                          \"brsh %0\") :\n+              len == 2 ? (\"breq .+4\" CR_TAB\n+                          \"brlo .+2\" CR_TAB\n+                          \"rjmp %0\") :\n+              (\"breq .+6\" CR_TAB\n+               \"brlo .+4\" CR_TAB\n+               \"jmp %0\"));\n     case LE:\n       if (cc_prev_status.flags & CC_OVERFLOW_UNUSABLE)\n-\treturn (len == 1 ? (AS1 (breq,%0) CR_TAB\n-\t\t\t    AS1 (brmi,%0)) :\n-\t\tlen == 2 ? (AS1 (breq,.+2) CR_TAB\n-\t\t\t    AS1 (brpl,.+2) CR_TAB\n-\t\t\t    AS1 (rjmp,%0)) :\n-\t\t(AS1 (breq,.+2) CR_TAB\n-\t\t AS1 (brpl,.+4) CR_TAB\n-\t\t AS1 (jmp,%0)));\n+\treturn (len == 1 ? (\"breq %0\" CR_TAB\n+\t\t\t    \"brmi %0\") :\n+\t\tlen == 2 ? (\"breq .+2\" CR_TAB\n+\t\t\t    \"brpl .+2\" CR_TAB\n+\t\t\t    \"rjmp %0\") :\n+\t\t(\"breq .+2\" CR_TAB\n+\t\t \"brpl .+4\" CR_TAB\n+\t\t \"jmp %0\"));\n       else\n-\treturn (len == 1 ? (AS1 (breq,%0) CR_TAB\n-\t\t\t    AS1 (brlt,%0)) :\n-\t\tlen == 2 ? (AS1 (breq,.+2) CR_TAB\n-\t\t\t    AS1 (brge,.+2) CR_TAB\n-\t\t\t    AS1 (rjmp,%0)) :\n-\t\t(AS1 (breq,.+2) CR_TAB\n-\t\t AS1 (brge,.+4) CR_TAB\n-\t\t AS1 (jmp,%0)));\n+\treturn (len == 1 ? (\"breq %0\" CR_TAB\n+\t\t\t    \"brlt %0\") :\n+\t\tlen == 2 ? (\"breq .+2\" CR_TAB\n+\t\t\t    \"brge .+2\" CR_TAB\n+\t\t\t    \"rjmp %0\") :\n+\t\t(\"breq .+2\" CR_TAB\n+\t\t \"brge .+4\" CR_TAB\n+\t\t \"jmp %0\"));\n     case LEU:\n-      return (len == 1 ? (AS1 (breq,%0) CR_TAB\n-                          AS1 (brlo,%0)) :\n-              len == 2 ? (AS1 (breq,.+2) CR_TAB\n-                          AS1 (brsh,.+2) CR_TAB\n-\t\t\t  AS1 (rjmp,%0)) :\n-              (AS1 (breq,.+2) CR_TAB\n-               AS1 (brsh,.+4) CR_TAB\n-\t       AS1 (jmp,%0)));\n+      return (len == 1 ? (\"breq %0\" CR_TAB\n+                          \"brlo %0\") :\n+              len == 2 ? (\"breq .+2\" CR_TAB\n+                          \"brsh .+2\" CR_TAB\n+\t\t\t  \"rjmp %0\") :\n+              (\"breq .+2\" CR_TAB\n+               \"brsh .+4\" CR_TAB\n+\t       \"jmp %0\"));\n     default:\n       if (reverse)\n \t{\n \t  switch (len)\n \t    {\n \t    case 1:\n-\t      return AS1 (br%k1,%0);\n+\t      return \"br%k1 %0\";\n \t    case 2:\n-\t      return (AS1 (br%j1,.+2) CR_TAB\n-\t\t      AS1 (rjmp,%0));\n+\t      return (\"br%j1 .+2\" CR_TAB\n+\t\t      \"rjmp %0\");\n \t    default:\n-\t      return (AS1 (br%j1,.+4) CR_TAB\n-\t\t      AS1 (jmp,%0));\n+\t      return (\"br%j1 .+4\" CR_TAB\n+\t\t      \"jmp %0\");\n \t    }\n \t}\n-\telse\n-\t  {\n-\t    switch (len)\n-\t      {\n-\t      case 1:\n-\t\treturn AS1 (br%j1,%0);\n-\t      case 2:\n-\t\treturn (AS1 (br%k1,.+2) CR_TAB\n-\t\t\tAS1 (rjmp,%0));\n-\t      default:\n-\t\treturn (AS1 (br%k1,.+4) CR_TAB\n-\t\t\tAS1 (jmp,%0));\n-\t      }\n-\t  }\n+      else\n+        {\n+          switch (len)\n+            {\n+            case 1:\n+              return \"br%j1 %0\";\n+            case 2:\n+              return (\"br%k1 .+2\" CR_TAB\n+                      \"rjmp %0\");\n+            default:\n+              return (\"br%k1 .+4\" CR_TAB\n+                      \"jmp %0\");\n+            }\n+        }\n     }\n   return \"\";\n }\n@@ -2821,11 +2821,11 @@ output_movqi (rtx insn, rtx operands[], int *l)\n       if (register_operand (src, QImode)) /* mov r,r */\n \t{\n \t  if (test_hard_reg_class (STACK_REG, dest))\n-\t    return AS2 (out,%0,%1);\n+\t    return \"out %0,%1\";\n \t  else if (test_hard_reg_class (STACK_REG, src))\n-\t    return AS2 (in,%0,%1);\n+\t    return \"in %0,%1\";\n \t  \n-\t  return AS2 (mov,%0,%1);\n+\t  return \"mov %0,%1\";\n \t}\n       else if (CONSTANT_P (src))\n         {\n@@ -3122,50 +3122,50 @@ out_movsi_r_mr (rtx insn, rtx op[], int *l)\n         {\n           if (reg_dest == REG_X)\n \t    /* \"ld r26,-X\" is undefined */\n-\t    return *l=7, (AS2 (adiw,r26,3)        CR_TAB\n-\t\t\t  AS2 (ld,r29,X)          CR_TAB\n-\t\t\t  AS2 (ld,r28,-X)         CR_TAB\n-\t\t\t  AS2 (ld,__tmp_reg__,-X) CR_TAB\n-\t\t\t  AS2 (sbiw,r26,1)        CR_TAB\n-\t\t\t  AS2 (ld,r26,X)          CR_TAB\n-\t\t\t  AS2 (mov,r27,__tmp_reg__));\n+\t    return *l=7, (\"adiw r26,3\"        CR_TAB\n+\t\t\t  \"ld r29,X\"          CR_TAB\n+\t\t\t  \"ld r28,-X\"         CR_TAB\n+\t\t\t  \"ld __tmp_reg__,-X\" CR_TAB\n+\t\t\t  \"sbiw r26,1\"        CR_TAB\n+\t\t\t  \"ld r26,X\"          CR_TAB\n+\t\t\t  \"mov r27,__tmp_reg__\");\n           else if (reg_dest == REG_X - 2)\n-            return *l=5, (AS2 (ld,%A0,X+)  CR_TAB\n-                          AS2 (ld,%B0,X+) CR_TAB\n-                          AS2 (ld,__tmp_reg__,X+)  CR_TAB\n-                          AS2 (ld,%D0,X)  CR_TAB\n-                          AS2 (mov,%C0,__tmp_reg__));\n+            return *l=5, (\"ld %A0,X+\"          CR_TAB\n+                          \"ld %B0,X+\"          CR_TAB\n+                          \"ld __tmp_reg__,X+\"  CR_TAB\n+                          \"ld %D0,X\"           CR_TAB\n+                          \"mov %C0,__tmp_reg__\");\n           else if (reg_unused_after (insn, base))\n-            return  *l=4, (AS2 (ld,%A0,X+)  CR_TAB\n-                           AS2 (ld,%B0,X+) CR_TAB\n-                           AS2 (ld,%C0,X+) CR_TAB\n-                           AS2 (ld,%D0,X));\n+            return  *l=4, (\"ld %A0,X+\"  CR_TAB\n+                           \"ld %B0,X+\" CR_TAB\n+                           \"ld %C0,X+\" CR_TAB\n+                           \"ld %D0,X\");\n           else\n-            return  *l=5, (AS2 (ld,%A0,X+)  CR_TAB\n-                           AS2 (ld,%B0,X+) CR_TAB\n-                           AS2 (ld,%C0,X+) CR_TAB\n-                           AS2 (ld,%D0,X)  CR_TAB\n-                           AS2 (sbiw,r26,3));\n+            return  *l=5, (\"ld %A0,X+\"  CR_TAB\n+                           \"ld %B0,X+\" CR_TAB\n+                           \"ld %C0,X+\" CR_TAB\n+                           \"ld %D0,X\"  CR_TAB\n+                           \"sbiw r26,3\");\n         }\n       else\n         {\n           if (reg_dest == reg_base)\n-            return *l=5, (AS2 (ldd,%D0,%1+3) CR_TAB\n-                          AS2 (ldd,%C0,%1+2) CR_TAB\n-                          AS2 (ldd,__tmp_reg__,%1+1)  CR_TAB\n-                          AS2 (ld,%A0,%1)  CR_TAB\n-                          AS2 (mov,%B0,__tmp_reg__));\n+            return *l=5, (\"ldd %D0,%1+3\" CR_TAB\n+                          \"ldd %C0,%1+2\" CR_TAB\n+                          \"ldd __tmp_reg__,%1+1\"  CR_TAB\n+                          \"ld %A0,%1\"  CR_TAB\n+                          \"mov %B0,__tmp_reg__\");\n           else if (reg_base == reg_dest + 2)\n-            return *l=5, (AS2 (ld ,%A0,%1)    CR_TAB\n-                          AS2 (ldd,%B0,%1+1) CR_TAB\n-                          AS2 (ldd,__tmp_reg__,%1+2)  CR_TAB\n-                          AS2 (ldd,%D0,%1+3) CR_TAB\n-                          AS2 (mov,%C0,__tmp_reg__));\n+            return *l=5, (\"ld %A0,%1\"             CR_TAB\n+                          \"ldd %B0,%1+1\"          CR_TAB\n+                          \"ldd __tmp_reg__,%1+2\"  CR_TAB\n+                          \"ldd %D0,%1+3\"          CR_TAB\n+                          \"mov %C0,__tmp_reg__\");\n           else\n-            return *l=4, (AS2 (ld ,%A0,%1)   CR_TAB\n-                          AS2 (ldd,%B0,%1+1) CR_TAB\n-                          AS2 (ldd,%C0,%1+2) CR_TAB\n-                          AS2 (ldd,%D0,%1+3));\n+            return *l=4, (\"ld %A0,%1\"    CR_TAB\n+                          \"ldd %B0,%1+1\" CR_TAB\n+                          \"ldd %C0,%1+2\" CR_TAB\n+                          \"ldd %D0,%1+3\");\n         }\n     }\n   else if (GET_CODE (base) == PLUS) /* (R + i) */\n@@ -3178,21 +3178,21 @@ out_movsi_r_mr (rtx insn, rtx op[], int *l)\n \t    fatal_insn (\"incorrect insn:\",insn);\n \n \t  if (disp <= 63 + MAX_LD_OFFSET (GET_MODE (src)))\n-\t    return *l = 6, (AS2 (adiw,r28,%o1-60) CR_TAB\n-\t\t\t    AS2 (ldd,%A0,Y+60)    CR_TAB\n-\t\t\t    AS2 (ldd,%B0,Y+61)    CR_TAB\n-\t\t\t    AS2 (ldd,%C0,Y+62)    CR_TAB\n-\t\t\t    AS2 (ldd,%D0,Y+63)    CR_TAB\n-\t\t\t    AS2 (sbiw,r28,%o1-60));\n-\n-\t  return *l = 8, (AS2 (subi,r28,lo8(-%o1)) CR_TAB\n-\t\t\t  AS2 (sbci,r29,hi8(-%o1)) CR_TAB\n-\t\t\t  AS2 (ld,%A0,Y)           CR_TAB\n-\t\t\t  AS2 (ldd,%B0,Y+1)        CR_TAB\n-\t\t\t  AS2 (ldd,%C0,Y+2)        CR_TAB\n-\t\t\t  AS2 (ldd,%D0,Y+3)        CR_TAB\n-\t\t\t  AS2 (subi,r28,lo8(%o1))  CR_TAB\n-\t\t\t  AS2 (sbci,r29,hi8(%o1)));\n+\t    return *l = 6, (\"adiw r28,%o1-60\" CR_TAB\n+\t\t\t    \"ldd %A0,Y+60\"    CR_TAB\n+\t\t\t    \"ldd %B0,Y+61\"    CR_TAB\n+\t\t\t    \"ldd %C0,Y+62\"    CR_TAB\n+\t\t\t    \"ldd %D0,Y+63\"    CR_TAB\n+\t\t\t    \"sbiw r28,%o1-60\");\n+\n+\t  return *l = 8, (\"subi r28,lo8(-%o1)\" CR_TAB\n+\t\t\t  \"sbci r29,hi8(-%o1)\" CR_TAB\n+\t\t\t  \"ld %A0,Y\"           CR_TAB\n+\t\t\t  \"ldd %B0,Y+1\"        CR_TAB\n+\t\t\t  \"ldd %C0,Y+2\"        CR_TAB\n+\t\t\t  \"ldd %D0,Y+3\"        CR_TAB\n+\t\t\t  \"subi r28,lo8(%o1)\"  CR_TAB\n+\t\t\t  \"sbci r29,hi8(%o1)\");\n \t}\n \n       reg_base = true_regnum (XEXP (base, 0));\n@@ -3203,62 +3203,62 @@ out_movsi_r_mr (rtx insn, rtx op[], int *l)\n \t    {\n \t      *l = 7;\n \t      /* \"ld r26,-X\" is undefined */\n-\t      return (AS2 (adiw,r26,%o1+3)    CR_TAB\n-\t\t      AS2 (ld,r29,X)          CR_TAB\n-\t\t      AS2 (ld,r28,-X)         CR_TAB\n-\t\t      AS2 (ld,__tmp_reg__,-X) CR_TAB\n-\t\t      AS2 (sbiw,r26,1)        CR_TAB\n-\t\t      AS2 (ld,r26,X)          CR_TAB\n-\t\t      AS2 (mov,r27,__tmp_reg__));\n+\t      return (\"adiw r26,%o1+3\"    CR_TAB\n+\t\t      \"ld r29,X\"          CR_TAB\n+\t\t      \"ld r28,-X\"         CR_TAB\n+\t\t      \"ld __tmp_reg__,-X\" CR_TAB\n+\t\t      \"sbiw r26,1\"        CR_TAB\n+\t\t      \"ld r26,X\"          CR_TAB\n+\t\t      \"mov r27,__tmp_reg__\");\n \t    }\n \t  *l = 6;\n \t  if (reg_dest == REG_X - 2)\n-\t    return (AS2 (adiw,r26,%o1)      CR_TAB\n-\t\t    AS2 (ld,r24,X+)         CR_TAB\n-\t\t    AS2 (ld,r25,X+)         CR_TAB\n-\t\t    AS2 (ld,__tmp_reg__,X+) CR_TAB\n-\t\t    AS2 (ld,r27,X)          CR_TAB\n-\t\t    AS2 (mov,r26,__tmp_reg__));\n-\n-\t  return (AS2 (adiw,r26,%o1) CR_TAB\n-\t\t  AS2 (ld,%A0,X+)    CR_TAB\n-\t\t  AS2 (ld,%B0,X+)    CR_TAB\n-\t\t  AS2 (ld,%C0,X+)    CR_TAB\n-\t\t  AS2 (ld,%D0,X)     CR_TAB\n-\t\t  AS2 (sbiw,r26,%o1+3));\n+\t    return (\"adiw r26,%o1\"      CR_TAB\n+\t\t    \"ld r24,X+\"         CR_TAB\n+\t\t    \"ld r25,X+\"         CR_TAB\n+\t\t    \"ld __tmp_reg__,X+\" CR_TAB\n+\t\t    \"ld r27,X\"          CR_TAB\n+\t\t    \"mov r26,__tmp_reg__\");\n+\n+\t  return (\"adiw r26,%o1\" CR_TAB\n+\t\t  \"ld %A0,X+\"    CR_TAB\n+\t\t  \"ld %B0,X+\"    CR_TAB\n+\t\t  \"ld %C0,X+\"    CR_TAB\n+\t\t  \"ld %D0,X\"     CR_TAB\n+\t\t  \"sbiw r26,%o1+3\");\n \t}\n       if (reg_dest == reg_base)\n-        return *l=5, (AS2 (ldd,%D0,%D1) CR_TAB\n-                      AS2 (ldd,%C0,%C1) CR_TAB\n-                      AS2 (ldd,__tmp_reg__,%B1)  CR_TAB\n-                      AS2 (ldd,%A0,%A1) CR_TAB\n-                      AS2 (mov,%B0,__tmp_reg__));\n+        return *l=5, (\"ldd %D0,%D1\"          CR_TAB\n+                      \"ldd %C0,%C1\"          CR_TAB\n+                      \"ldd __tmp_reg__,%B1\"  CR_TAB\n+                      \"ldd %A0,%A1\"          CR_TAB\n+                      \"mov %B0,__tmp_reg__\");\n       else if (reg_dest == reg_base - 2)\n-        return *l=5, (AS2 (ldd,%A0,%A1) CR_TAB\n-                      AS2 (ldd,%B0,%B1) CR_TAB\n-                      AS2 (ldd,__tmp_reg__,%C1)  CR_TAB\n-                      AS2 (ldd,%D0,%D1) CR_TAB\n-                      AS2 (mov,%C0,__tmp_reg__));\n-      return *l=4, (AS2 (ldd,%A0,%A1) CR_TAB\n-                    AS2 (ldd,%B0,%B1) CR_TAB\n-                    AS2 (ldd,%C0,%C1) CR_TAB\n-                    AS2 (ldd,%D0,%D1));\n+        return *l=5, (\"ldd %A0,%A1\"          CR_TAB\n+                      \"ldd %B0,%B1\"          CR_TAB\n+                      \"ldd __tmp_reg__,%C1\"  CR_TAB\n+                      \"ldd %D0,%D1\"          CR_TAB\n+                      \"mov %C0,__tmp_reg__\");\n+      return *l=4, (\"ldd %A0,%A1\" CR_TAB\n+                    \"ldd %B0,%B1\" CR_TAB\n+                    \"ldd %C0,%C1\" CR_TAB\n+                    \"ldd %D0,%D1\");\n     }\n   else if (GET_CODE (base) == PRE_DEC) /* (--R) */\n-    return *l=4, (AS2 (ld,%D0,%1) CR_TAB\n-\t\t  AS2 (ld,%C0,%1) CR_TAB\n-\t\t  AS2 (ld,%B0,%1) CR_TAB\n-\t\t  AS2 (ld,%A0,%1));\n+    return *l=4, (\"ld %D0,%1\" CR_TAB\n+\t\t  \"ld %C0,%1\" CR_TAB\n+\t\t  \"ld %B0,%1\" CR_TAB\n+\t\t  \"ld %A0,%1\");\n   else if (GET_CODE (base) == POST_INC) /* (R++) */\n-    return *l=4, (AS2 (ld,%A0,%1) CR_TAB\n-\t\t  AS2 (ld,%B0,%1) CR_TAB\n-\t\t  AS2 (ld,%C0,%1) CR_TAB\n-\t\t  AS2 (ld,%D0,%1));\n+    return *l=4, (\"ld %A0,%1\" CR_TAB\n+\t\t  \"ld %B0,%1\" CR_TAB\n+\t\t  \"ld %C0,%1\" CR_TAB\n+\t\t  \"ld %D0,%1\");\n   else if (CONSTANT_ADDRESS_P (base))\n-      return *l=8, (AS2 (lds,%A0,%m1) CR_TAB\n-\t\t    AS2 (lds,%B0,%m1+1) CR_TAB\n-\t\t    AS2 (lds,%C0,%m1+2) CR_TAB\n-\t\t    AS2 (lds,%D0,%m1+3));\n+    return *l=8, (\"lds %A0,%m1\"   CR_TAB\n+                  \"lds %B0,%m1+1\" CR_TAB\n+                  \"lds %C0,%m1+2\" CR_TAB\n+                  \"lds %D0,%m1+3\");\n     \n   fatal_insn (\"unknown move insn:\",insn);\n   return \"\";\n@@ -3278,10 +3278,10 @@ out_movsi_mr_r (rtx insn, rtx op[], int *l)\n     l = &tmp;\n   \n   if (CONSTANT_ADDRESS_P (base))\n-    return *l=8,(AS2 (sts,%m0,%A1) CR_TAB\n-\t\t AS2 (sts,%m0+1,%B1) CR_TAB\n-\t\t AS2 (sts,%m0+2,%C1) CR_TAB\n-\t\t AS2 (sts,%m0+3,%D1));\n+    return *l=8,(\"sts %m0,%A1\" CR_TAB\n+                 \"sts %m0+1,%B1\" CR_TAB\n+                 \"sts %m0+2,%C1\" CR_TAB\n+                 \"sts %m0+3,%D1\");\n   if (reg_base > 0)                 /* (r) */\n     {\n       if (reg_base == REG_X)                /* (R26) */\n@@ -3290,52 +3290,52 @@ out_movsi_mr_r (rtx insn, rtx op[], int *l)\n             {\n \t      /* \"st X+,r26\" is undefined */\n               if (reg_unused_after (insn, base))\n-\t\treturn *l=6, (AS2 (mov,__tmp_reg__,r27) CR_TAB\n-\t\t\t      AS2 (st,X,r26)            CR_TAB\n-\t\t\t      AS2 (adiw,r26,1)          CR_TAB\n-\t\t\t      AS2 (st,X+,__tmp_reg__)   CR_TAB\n-\t\t\t      AS2 (st,X+,r28)           CR_TAB\n-\t\t\t      AS2 (st,X,r29));\n+\t\treturn *l=6, (\"mov __tmp_reg__,r27\" CR_TAB\n+\t\t\t      \"st X,r26\"            CR_TAB\n+\t\t\t      \"adiw r26,1\"          CR_TAB\n+\t\t\t      \"st X+,__tmp_reg__\"   CR_TAB\n+\t\t\t      \"st X+,r28\"           CR_TAB\n+\t\t\t      \"st X,r29\");\n               else\n-                return *l=7, (AS2 (mov,__tmp_reg__,r27) CR_TAB\n-\t\t\t      AS2 (st,X,r26)            CR_TAB\n-\t\t\t      AS2 (adiw,r26,1)          CR_TAB\n-\t\t\t      AS2 (st,X+,__tmp_reg__)   CR_TAB\n-\t\t\t      AS2 (st,X+,r28)           CR_TAB\n-\t\t\t      AS2 (st,X,r29)            CR_TAB\n-\t\t\t      AS2 (sbiw,r26,3));\n+                return *l=7, (\"mov __tmp_reg__,r27\" CR_TAB\n+\t\t\t      \"st X,r26\"            CR_TAB\n+\t\t\t      \"adiw r26,1\"          CR_TAB\n+\t\t\t      \"st X+,__tmp_reg__\"   CR_TAB\n+\t\t\t      \"st X+,r28\"           CR_TAB\n+\t\t\t      \"st X,r29\"            CR_TAB\n+\t\t\t      \"sbiw r26,3\");\n             }\n           else if (reg_base == reg_src + 2)\n             {\n               if (reg_unused_after (insn, base))\n-                return *l=7, (AS2 (mov,__zero_reg__,%C1) CR_TAB\n-                              AS2 (mov,__tmp_reg__,%D1) CR_TAB\n-                              AS2 (st,%0+,%A1) CR_TAB\n-                              AS2 (st,%0+,%B1) CR_TAB\n-                              AS2 (st,%0+,__zero_reg__)  CR_TAB\n-                              AS2 (st,%0,__tmp_reg__)   CR_TAB\n-                              AS1 (clr,__zero_reg__));\n+                return *l=7, (\"mov __zero_reg__,%C1\" CR_TAB\n+                              \"mov __tmp_reg__,%D1\"  CR_TAB\n+                              \"st %0+,%A1\"           CR_TAB\n+                              \"st %0+,%B1\"           CR_TAB\n+                              \"st %0+,__zero_reg__\"  CR_TAB\n+                              \"st %0,__tmp_reg__\"    CR_TAB\n+                              \"clr __zero_reg__\");\n               else\n-                return *l=8, (AS2 (mov,__zero_reg__,%C1) CR_TAB\n-                              AS2 (mov,__tmp_reg__,%D1) CR_TAB\n-                              AS2 (st,%0+,%A1) CR_TAB\n-                              AS2 (st,%0+,%B1) CR_TAB\n-                              AS2 (st,%0+,__zero_reg__)  CR_TAB\n-                              AS2 (st,%0,__tmp_reg__)   CR_TAB\n-                              AS1 (clr,__zero_reg__)     CR_TAB\n-                              AS2 (sbiw,r26,3));\n+                return *l=8, (\"mov __zero_reg__,%C1\" CR_TAB\n+                              \"mov __tmp_reg__,%D1\"  CR_TAB\n+                              \"st %0+,%A1\"           CR_TAB\n+                              \"st %0+,%B1\"           CR_TAB\n+                              \"st %0+,__zero_reg__\"  CR_TAB\n+                              \"st %0,__tmp_reg__\"    CR_TAB\n+                              \"clr __zero_reg__\"     CR_TAB\n+                              \"sbiw r26,3\");\n             }\n-          return *l=5, (AS2 (st,%0+,%A1)  CR_TAB\n-                        AS2 (st,%0+,%B1) CR_TAB\n-                        AS2 (st,%0+,%C1) CR_TAB\n-                        AS2 (st,%0,%D1)  CR_TAB\n-                        AS2 (sbiw,r26,3));\n+          return *l=5, (\"st %0+,%A1\" CR_TAB\n+                        \"st %0+,%B1\" CR_TAB\n+                        \"st %0+,%C1\" CR_TAB\n+                        \"st %0,%D1\"  CR_TAB\n+                        \"sbiw r26,3\");\n         }\n       else\n-        return *l=4, (AS2 (st,%0,%A1)    CR_TAB\n-\t\t      AS2 (std,%0+1,%B1) CR_TAB\n-\t\t      AS2 (std,%0+2,%C1) CR_TAB\n-\t\t      AS2 (std,%0+3,%D1));\n+        return *l=4, (\"st %0,%A1\"    CR_TAB\n+\t\t      \"std %0+1,%B1\" CR_TAB\n+\t\t      \"std %0+2,%C1\" CR_TAB\n+\t\t      \"std %0+3,%D1\");\n     }\n   else if (GET_CODE (base) == PLUS) /* (R + i) */\n     {\n@@ -3347,74 +3347,74 @@ out_movsi_mr_r (rtx insn, rtx op[], int *l)\n \t    fatal_insn (\"incorrect insn:\",insn);\n \n \t  if (disp <= 63 + MAX_LD_OFFSET (GET_MODE (dest)))\n-\t    return *l = 6, (AS2 (adiw,r28,%o0-60) CR_TAB\n-\t\t\t    AS2 (std,Y+60,%A1)    CR_TAB\n-\t\t\t    AS2 (std,Y+61,%B1)    CR_TAB\n-\t\t\t    AS2 (std,Y+62,%C1)    CR_TAB\n-\t\t\t    AS2 (std,Y+63,%D1)    CR_TAB\n-\t\t\t    AS2 (sbiw,r28,%o0-60));\n-\n-\t  return *l = 8, (AS2 (subi,r28,lo8(-%o0)) CR_TAB\n-\t\t\t  AS2 (sbci,r29,hi8(-%o0)) CR_TAB\n-\t\t\t  AS2 (st,Y,%A1)           CR_TAB\n-\t\t\t  AS2 (std,Y+1,%B1)        CR_TAB\n-\t\t\t  AS2 (std,Y+2,%C1)        CR_TAB\n-\t\t\t  AS2 (std,Y+3,%D1)        CR_TAB\n-\t\t\t  AS2 (subi,r28,lo8(%o0))  CR_TAB\n-\t\t\t  AS2 (sbci,r29,hi8(%o0)));\n+\t    return *l = 6, (\"adiw r28,%o0-60\" CR_TAB\n+\t\t\t    \"std Y+60,%A1\"    CR_TAB\n+\t\t\t    \"std Y+61,%B1\"    CR_TAB\n+\t\t\t    \"std Y+62,%C1\"    CR_TAB\n+\t\t\t    \"std Y+63,%D1\"    CR_TAB\n+\t\t\t    \"sbiw r28,%o0-60\");\n+\n+\t  return *l = 8, (\"subi r28,lo8(-%o0)\" CR_TAB\n+\t\t\t  \"sbci r29,hi8(-%o0)\" CR_TAB\n+\t\t\t  \"st Y,%A1\"           CR_TAB\n+\t\t\t  \"std Y+1,%B1\"        CR_TAB\n+\t\t\t  \"std Y+2,%C1\"        CR_TAB\n+\t\t\t  \"std Y+3,%D1\"        CR_TAB\n+\t\t\t  \"subi r28,lo8(%o0)\"  CR_TAB\n+\t\t\t  \"sbci r29,hi8(%o0)\");\n \t}\n       if (reg_base == REG_X)\n \t{\n \t  /* (X + d) = R */\n \t  if (reg_src == REG_X)\n \t    {\n \t      *l = 9;\n-\t      return (AS2 (mov,__tmp_reg__,r26)  CR_TAB\n-\t\t      AS2 (mov,__zero_reg__,r27) CR_TAB\n-\t\t      AS2 (adiw,r26,%o0)         CR_TAB\n-\t\t      AS2 (st,X+,__tmp_reg__)    CR_TAB\n-\t\t      AS2 (st,X+,__zero_reg__)   CR_TAB\n-\t\t      AS2 (st,X+,r28)            CR_TAB\n-\t\t      AS2 (st,X,r29)             CR_TAB\n-\t\t      AS1 (clr,__zero_reg__)     CR_TAB\n-\t\t      AS2 (sbiw,r26,%o0+3));\n+\t      return (\"mov __tmp_reg__,r26\"  CR_TAB\n+\t\t      \"mov __zero_reg__,r27\" CR_TAB\n+\t\t      \"adiw r26,%o0\"         CR_TAB\n+\t\t      \"st X+,__tmp_reg__\"    CR_TAB\n+\t\t      \"st X+,__zero_reg__\"   CR_TAB\n+\t\t      \"st X+,r28\"            CR_TAB\n+\t\t      \"st X,r29\"             CR_TAB\n+\t\t      \"clr __zero_reg__\"     CR_TAB\n+\t\t      \"sbiw r26,%o0+3\");\n \t    }\n \t  else if (reg_src == REG_X - 2)\n \t    {\n \t      *l = 9;\n-\t      return (AS2 (mov,__tmp_reg__,r26)  CR_TAB\n-\t\t      AS2 (mov,__zero_reg__,r27) CR_TAB\n-\t\t      AS2 (adiw,r26,%o0)         CR_TAB\n-\t\t      AS2 (st,X+,r24)            CR_TAB\n-\t\t      AS2 (st,X+,r25)            CR_TAB\n-\t\t      AS2 (st,X+,__tmp_reg__)    CR_TAB\n-\t\t      AS2 (st,X,__zero_reg__)    CR_TAB\n-\t\t      AS1 (clr,__zero_reg__)     CR_TAB\n-\t\t      AS2 (sbiw,r26,%o0+3));\n+\t      return (\"mov __tmp_reg__,r26\"  CR_TAB\n+\t\t      \"mov __zero_reg__,r27\" CR_TAB\n+\t\t      \"adiw r26,%o0\"         CR_TAB\n+\t\t      \"st X+,r24\"            CR_TAB\n+\t\t      \"st X+,r25\"            CR_TAB\n+\t\t      \"st X+,__tmp_reg__\"    CR_TAB\n+\t\t      \"st X,__zero_reg__\"    CR_TAB\n+\t\t      \"clr __zero_reg__\"     CR_TAB\n+\t\t      \"sbiw r26,%o0+3\");\n \t    }\n \t  *l = 6;\n-\t  return (AS2 (adiw,r26,%o0) CR_TAB\n-\t\t  AS2 (st,X+,%A1)    CR_TAB\n-\t\t  AS2 (st,X+,%B1)    CR_TAB\n-\t\t  AS2 (st,X+,%C1)    CR_TAB\n-\t\t  AS2 (st,X,%D1)     CR_TAB\n-\t\t  AS2 (sbiw,r26,%o0+3));\n+\t  return (\"adiw r26,%o0\" CR_TAB\n+\t\t  \"st X+,%A1\"    CR_TAB\n+\t\t  \"st X+,%B1\"    CR_TAB\n+\t\t  \"st X+,%C1\"    CR_TAB\n+\t\t  \"st X,%D1\"     CR_TAB\n+\t\t  \"sbiw r26,%o0+3\");\n \t}\n-      return *l=4, (AS2 (std,%A0,%A1)    CR_TAB\n-\t\t    AS2 (std,%B0,%B1) CR_TAB\n-\t\t    AS2 (std,%C0,%C1) CR_TAB\n-\t\t    AS2 (std,%D0,%D1));\n+      return *l=4, (\"std %A0,%A1\" CR_TAB\n+\t\t    \"std %B0,%B1\" CR_TAB\n+\t\t    \"std %C0,%C1\" CR_TAB\n+\t\t    \"std %D0,%D1\");\n     }\n   else if (GET_CODE (base) == PRE_DEC) /* (--R) */\n-    return *l=4, (AS2 (st,%0,%D1) CR_TAB\n-\t\t  AS2 (st,%0,%C1) CR_TAB\n-\t\t  AS2 (st,%0,%B1) CR_TAB\n-\t\t  AS2 (st,%0,%A1));\n+    return *l=4, (\"st %0,%D1\" CR_TAB\n+\t\t  \"st %0,%C1\" CR_TAB\n+\t\t  \"st %0,%B1\" CR_TAB\n+\t\t  \"st %0,%A1\");\n   else if (GET_CODE (base) == POST_INC) /* (R++) */\n-    return *l=4, (AS2 (st,%0,%A1)  CR_TAB\n-\t\t  AS2 (st,%0,%B1) CR_TAB\n-\t\t  AS2 (st,%0,%C1) CR_TAB\n-\t\t  AS2 (st,%0,%D1));\n+    return *l=4, (\"st %0,%A1\" CR_TAB\n+\t\t  \"st %0,%B1\" CR_TAB\n+\t\t  \"st %0,%C1\" CR_TAB\n+\t\t  \"st %0,%D1\");\n   fatal_insn (\"unknown move insn:\",insn);\n   return \"\";\n }\n@@ -3445,28 +3445,28 @@ output_movsisf (rtx insn, rtx operands[], int *l)\n \t      if (AVR_HAVE_MOVW)\n \t\t{\n \t\t  *l = 2;\n-\t\t  return (AS2 (movw,%C0,%C1) CR_TAB\n-\t\t\t  AS2 (movw,%A0,%A1));\n+\t\t  return (\"movw %C0,%C1\" CR_TAB\n+\t\t\t  \"movw %A0,%A1\");\n \t\t}\n \t      *l = 4;\n-\t      return (AS2 (mov,%D0,%D1) CR_TAB\n-\t\t      AS2 (mov,%C0,%C1) CR_TAB\n-\t\t      AS2 (mov,%B0,%B1) CR_TAB\n-\t\t      AS2 (mov,%A0,%A1));\n+\t      return (\"mov %D0,%D1\" CR_TAB\n+\t\t      \"mov %C0,%C1\" CR_TAB\n+\t\t      \"mov %B0,%B1\" CR_TAB\n+\t\t      \"mov %A0,%A1\");\n \t    }\n \t  else\n \t    {\n \t      if (AVR_HAVE_MOVW)\n \t\t{\n \t\t  *l = 2;\n-\t\t  return (AS2 (movw,%A0,%A1) CR_TAB\n-\t\t\t  AS2 (movw,%C0,%C1));\n+\t\t  return (\"movw %A0,%A1\" CR_TAB\n+\t\t\t  \"movw %C0,%C1\");\n \t\t}\n \t      *l = 4;\n-\t      return (AS2 (mov,%A0,%A1) CR_TAB\n-\t\t      AS2 (mov,%B0,%B1) CR_TAB\n-\t\t      AS2 (mov,%C0,%C1) CR_TAB\n-\t\t      AS2 (mov,%D0,%D1));\n+\t      return (\"mov %A0,%A1\" CR_TAB\n+\t\t      \"mov %B0,%B1\" CR_TAB\n+\t\t      \"mov %C0,%C1\" CR_TAB\n+\t\t      \"mov %D0,%D1\");\n \t    }\n \t}\n       else if (CONSTANT_P (src))\n@@ -4405,80 +4405,80 @@ ashlqi3_out (rtx insn, rtx operands[], int *len)\n \t    break;\n \n \t  *len = 1;\n-\t  return AS1 (clr,%0);\n+\t  return \"clr %0\";\n \t  \n \tcase 1:\n \t  *len = 1;\n-\t  return AS1 (lsl,%0);\n+\t  return \"lsl %0\";\n \t  \n \tcase 2:\n \t  *len = 2;\n-\t  return (AS1 (lsl,%0) CR_TAB\n-\t\t  AS1 (lsl,%0));\n+\t  return (\"lsl %0\" CR_TAB\n+\t\t  \"lsl %0\");\n \n \tcase 3:\n \t  *len = 3;\n-\t  return (AS1 (lsl,%0) CR_TAB\n-\t\t  AS1 (lsl,%0) CR_TAB\n-\t\t  AS1 (lsl,%0));\n+\t  return (\"lsl %0\" CR_TAB\n+\t\t  \"lsl %0\" CR_TAB\n+\t\t  \"lsl %0\");\n \n \tcase 4:\n \t  if (test_hard_reg_class (LD_REGS, operands[0]))\n \t    {\n \t      *len = 2;\n-\t      return (AS1 (swap,%0) CR_TAB\n-\t\t      AS2 (andi,%0,0xf0));\n+\t      return (\"swap %0\" CR_TAB\n+\t\t      \"andi %0,0xf0\");\n \t    }\n \t  *len = 4;\n-\t  return (AS1 (lsl,%0) CR_TAB\n-\t\t  AS1 (lsl,%0) CR_TAB\n-\t\t  AS1 (lsl,%0) CR_TAB\n-\t\t  AS1 (lsl,%0));\n+\t  return (\"lsl %0\" CR_TAB\n+\t\t  \"lsl %0\" CR_TAB\n+\t\t  \"lsl %0\" CR_TAB\n+\t\t  \"lsl %0\");\n \n \tcase 5:\n \t  if (test_hard_reg_class (LD_REGS, operands[0]))\n \t    {\n \t      *len = 3;\n-\t      return (AS1 (swap,%0) CR_TAB\n-\t\t      AS1 (lsl,%0)  CR_TAB\n-\t\t      AS2 (andi,%0,0xe0));\n+\t      return (\"swap %0\" CR_TAB\n+\t\t      \"lsl %0\"  CR_TAB\n+\t\t      \"andi %0,0xe0\");\n \t    }\n \t  *len = 5;\n-\t  return (AS1 (lsl,%0) CR_TAB\n-\t\t  AS1 (lsl,%0) CR_TAB\n-\t\t  AS1 (lsl,%0) CR_TAB\n-\t\t  AS1 (lsl,%0) CR_TAB\n-\t\t  AS1 (lsl,%0));\n+\t  return (\"lsl %0\" CR_TAB\n+\t\t  \"lsl %0\" CR_TAB\n+\t\t  \"lsl %0\" CR_TAB\n+\t\t  \"lsl %0\" CR_TAB\n+\t\t  \"lsl %0\");\n \n \tcase 6:\n \t  if (test_hard_reg_class (LD_REGS, operands[0]))\n \t    {\n \t      *len = 4;\n-\t      return (AS1 (swap,%0) CR_TAB\n-\t\t      AS1 (lsl,%0)  CR_TAB\n-\t\t      AS1 (lsl,%0)  CR_TAB\n-\t\t      AS2 (andi,%0,0xc0));\n+\t      return (\"swap %0\" CR_TAB\n+\t\t      \"lsl %0\"  CR_TAB\n+\t\t      \"lsl %0\"  CR_TAB\n+\t\t      \"andi %0,0xc0\");\n \t    }\n \t  *len = 6;\n-\t  return (AS1 (lsl,%0) CR_TAB\n-\t\t  AS1 (lsl,%0) CR_TAB\n-\t\t  AS1 (lsl,%0) CR_TAB\n-\t\t  AS1 (lsl,%0) CR_TAB\n-\t\t  AS1 (lsl,%0) CR_TAB\n-\t\t  AS1 (lsl,%0));\n+\t  return (\"lsl %0\" CR_TAB\n+\t\t  \"lsl %0\" CR_TAB\n+\t\t  \"lsl %0\" CR_TAB\n+\t\t  \"lsl %0\" CR_TAB\n+\t\t  \"lsl %0\" CR_TAB\n+\t\t  \"lsl %0\");\n \n \tcase 7:\n \t  *len = 3;\n-\t  return (AS1 (ror,%0) CR_TAB\n-\t\t  AS1 (clr,%0) CR_TAB\n-\t\t  AS1 (ror,%0));\n+\t  return (\"ror %0\" CR_TAB\n+\t\t  \"clr %0\" CR_TAB\n+\t\t  \"ror %0\");\n \t}\n     }\n   else if (CONSTANT_P (operands[2]))\n     fatal_insn (\"internal compiler error.  Incorrect shift:\", insn);\n \n-  out_shift_with_cnt (AS1 (lsl,%0),\n-\t\t      insn, operands, len, 1);\n+  out_shift_with_cnt (\"lsl %0\",\n+                      insn, operands, len, 1);\n   return \"\";\n }\n \n@@ -4505,32 +4505,32 @@ ashlhi3_out (rtx insn, rtx operands[], int *len)\n \t    break;\n \n \t  *len = 2;\n-\t  return (AS1 (clr,%B0) CR_TAB\n-\t\t  AS1 (clr,%A0));\n+\t  return (\"clr %B0\" CR_TAB\n+\t\t  \"clr %A0\");\n \n \tcase 4:\n \t  if (optimize_size && scratch)\n \t    break;  /* 5 */\n \t  if (ldi_ok)\n \t    {\n \t      *len = 6;\n-\t      return (AS1 (swap,%A0)      CR_TAB\n-\t\t      AS1 (swap,%B0)      CR_TAB\n-\t\t      AS2 (andi,%B0,0xf0) CR_TAB\n-\t\t      AS2 (eor,%B0,%A0)   CR_TAB\n-\t\t      AS2 (andi,%A0,0xf0) CR_TAB\n-\t\t      AS2 (eor,%B0,%A0));\n+\t      return (\"swap %A0\"      CR_TAB\n+\t\t      \"swap %B0\"      CR_TAB\n+\t\t      \"andi %B0,0xf0\" CR_TAB\n+\t\t      \"eor %B0,%A0\"   CR_TAB\n+\t\t      \"andi %A0,0xf0\" CR_TAB\n+\t\t      \"eor %B0,%A0\");\n \t    }\n \t  if (scratch)\n \t    {\n \t      *len = 7;\n-\t      return (AS1 (swap,%A0)    CR_TAB\n-\t\t      AS1 (swap,%B0)    CR_TAB\n-\t\t      AS2 (ldi,%3,0xf0) CR_TAB\n+\t      return (\"swap %A0\"    CR_TAB\n+\t\t      \"swap %B0\"    CR_TAB\n+\t\t      \"ldi %3,0xf0\" CR_TAB\n \t\t      \"and %B0,%3\"      CR_TAB\n-\t\t      AS2 (eor,%B0,%A0) CR_TAB\n+\t\t      \"eor %B0,%A0\" CR_TAB\n \t\t      \"and %A0,%3\"      CR_TAB\n-\t\t      AS2 (eor,%B0,%A0));\n+\t\t      \"eor %B0,%A0\");\n \t    }\n \t  break;  /* optimize_size ? 6 : 8 */\n \n@@ -4540,203 +4540,202 @@ ashlhi3_out (rtx insn, rtx operands[], int *len)\n \t  if (ldi_ok)\n \t    {\n \t      *len = 8;\n-\t      return (AS1 (lsl,%A0)       CR_TAB\n-\t\t      AS1 (rol,%B0)       CR_TAB\n-\t\t      AS1 (swap,%A0)      CR_TAB\n-\t\t      AS1 (swap,%B0)      CR_TAB\n-\t\t      AS2 (andi,%B0,0xf0) CR_TAB\n-\t\t      AS2 (eor,%B0,%A0)   CR_TAB\n-\t\t      AS2 (andi,%A0,0xf0) CR_TAB\n-\t\t      AS2 (eor,%B0,%A0));\n+\t      return (\"lsl %A0\"       CR_TAB\n+\t\t      \"rol %B0\"       CR_TAB\n+\t\t      \"swap %A0\"      CR_TAB\n+\t\t      \"swap %B0\"      CR_TAB\n+\t\t      \"andi %B0,0xf0\" CR_TAB\n+\t\t      \"eor %B0,%A0\"   CR_TAB\n+\t\t      \"andi %A0,0xf0\" CR_TAB\n+\t\t      \"eor %B0,%A0\");\n \t    }\n \t  if (scratch)\n \t    {\n \t      *len = 9;\n-\t      return (AS1 (lsl,%A0)     CR_TAB\n-\t\t      AS1 (rol,%B0)     CR_TAB\n-\t\t      AS1 (swap,%A0)    CR_TAB\n-\t\t      AS1 (swap,%B0)    CR_TAB\n-\t\t      AS2 (ldi,%3,0xf0) CR_TAB\n+\t      return (\"lsl %A0\"     CR_TAB\n+\t\t      \"rol %B0\"     CR_TAB\n+\t\t      \"swap %A0\"    CR_TAB\n+\t\t      \"swap %B0\"    CR_TAB\n+\t\t      \"ldi %3,0xf0\" CR_TAB\n \t\t      \"and %B0,%3\"      CR_TAB\n-\t\t      AS2 (eor,%B0,%A0) CR_TAB\n+\t\t      \"eor %B0,%A0\" CR_TAB\n \t\t      \"and %A0,%3\"      CR_TAB\n-\t\t      AS2 (eor,%B0,%A0));\n+\t\t      \"eor %B0,%A0\");\n \t    }\n \t  break;  /* 10 */\n \n \tcase 6:\n \t  if (optimize_size)\n \t    break;  /* scratch ? 5 : 6 */\n \t  *len = 9;\n-\t  return (AS1 (clr,__tmp_reg__) CR_TAB\n-\t\t  AS1 (lsr,%B0)         CR_TAB\n-\t\t  AS1 (ror,%A0)         CR_TAB\n-\t\t  AS1 (ror,__tmp_reg__) CR_TAB\n-\t\t  AS1 (lsr,%B0)         CR_TAB\n-\t\t  AS1 (ror,%A0)         CR_TAB\n-\t\t  AS1 (ror,__tmp_reg__) CR_TAB\n-\t\t  AS2 (mov,%B0,%A0)     CR_TAB\n-\t\t  AS2 (mov,%A0,__tmp_reg__));\n+\t  return (\"clr __tmp_reg__\" CR_TAB\n+\t\t  \"lsr %B0\"         CR_TAB\n+\t\t  \"ror %A0\"         CR_TAB\n+\t\t  \"ror __tmp_reg__\" CR_TAB\n+\t\t  \"lsr %B0\"         CR_TAB\n+\t\t  \"ror %A0\"         CR_TAB\n+\t\t  \"ror __tmp_reg__\" CR_TAB\n+\t\t  \"mov %B0,%A0\"     CR_TAB\n+\t\t  \"mov %A0,__tmp_reg__\");\n \n \tcase 7:\n \t  *len = 5;\n-\t  return (AS1 (lsr,%B0)     CR_TAB\n-\t\t  AS2 (mov,%B0,%A0) CR_TAB\n-\t\t  AS1 (clr,%A0)     CR_TAB\n-\t\t  AS1 (ror,%B0)     CR_TAB\n-\t\t  AS1 (ror,%A0));\n+\t  return (\"lsr %B0\"     CR_TAB\n+\t\t  \"mov %B0,%A0\" CR_TAB\n+\t\t  \"clr %A0\"     CR_TAB\n+\t\t  \"ror %B0\"     CR_TAB\n+\t\t  \"ror %A0\");\n \n \tcase 8:\n-\t  return *len = 2, (AS2 (mov,%B0,%A1) CR_TAB\n-\t\t\t    AS1 (clr,%A0));\n+\t  return *len = 2, (\"mov %B0,%A1\" CR_TAB\n+\t\t\t    \"clr %A0\");\n \n \tcase 9:\n \t  *len = 3;\n-\t  return (AS2 (mov,%B0,%A0) CR_TAB\n-\t\t  AS1 (clr,%A0)     CR_TAB\n-\t\t  AS1 (lsl,%B0));\n+\t  return (\"mov %B0,%A0\" CR_TAB\n+\t\t  \"clr %A0\"     CR_TAB\n+\t\t  \"lsl %B0\");\n \n \tcase 10:\n \t  *len = 4;\n-\t  return (AS2 (mov,%B0,%A0) CR_TAB\n-\t\t  AS1 (clr,%A0)     CR_TAB\n-\t\t  AS1 (lsl,%B0)     CR_TAB\n-\t\t  AS1 (lsl,%B0));\n+\t  return (\"mov %B0,%A0\" CR_TAB\n+\t\t  \"clr %A0\"     CR_TAB\n+\t\t  \"lsl %B0\"     CR_TAB\n+\t\t  \"lsl %B0\");\n \n \tcase 11:\n \t  *len = 5;\n-\t  return (AS2 (mov,%B0,%A0) CR_TAB\n-\t\t  AS1 (clr,%A0)     CR_TAB\n-\t\t  AS1 (lsl,%B0)     CR_TAB\n-\t\t  AS1 (lsl,%B0)     CR_TAB\n-\t\t  AS1 (lsl,%B0));\n+\t  return (\"mov %B0,%A0\" CR_TAB\n+\t\t  \"clr %A0\"     CR_TAB\n+\t\t  \"lsl %B0\"     CR_TAB\n+\t\t  \"lsl %B0\"     CR_TAB\n+\t\t  \"lsl %B0\");\n \n \tcase 12:\n \t  if (ldi_ok)\n \t    {\n \t      *len = 4;\n-\t      return (AS2 (mov,%B0,%A0) CR_TAB\n-\t\t      AS1 (clr,%A0)     CR_TAB\n-\t\t      AS1 (swap,%B0)    CR_TAB\n-\t\t      AS2 (andi,%B0,0xf0));\n+\t      return (\"mov %B0,%A0\" CR_TAB\n+\t\t      \"clr %A0\"     CR_TAB\n+\t\t      \"swap %B0\"    CR_TAB\n+\t\t      \"andi %B0,0xf0\");\n \t    }\n \t  if (scratch)\n \t    {\n \t      *len = 5;\n-\t      return (AS2 (mov,%B0,%A0) CR_TAB\n-\t\t      AS1 (clr,%A0)     CR_TAB\n-\t\t      AS1 (swap,%B0)    CR_TAB\n-\t\t      AS2 (ldi,%3,0xf0) CR_TAB\n+\t      return (\"mov %B0,%A0\" CR_TAB\n+\t\t      \"clr %A0\"     CR_TAB\n+\t\t      \"swap %B0\"    CR_TAB\n+\t\t      \"ldi %3,0xf0\" CR_TAB\n \t\t      \"and %B0,%3\");\n \t    }\n \t  *len = 6;\n-\t  return (AS2 (mov,%B0,%A0) CR_TAB\n-\t\t  AS1 (clr,%A0)     CR_TAB\n-\t\t  AS1 (lsl,%B0)     CR_TAB\n-\t\t  AS1 (lsl,%B0)     CR_TAB\n-\t\t  AS1 (lsl,%B0)     CR_TAB\n-\t\t  AS1 (lsl,%B0));\n+\t  return (\"mov %B0,%A0\" CR_TAB\n+\t\t  \"clr %A0\"     CR_TAB\n+\t\t  \"lsl %B0\"     CR_TAB\n+\t\t  \"lsl %B0\"     CR_TAB\n+\t\t  \"lsl %B0\"     CR_TAB\n+\t\t  \"lsl %B0\");\n \n \tcase 13:\n \t  if (ldi_ok)\n \t    {\n \t      *len = 5;\n-\t      return (AS2 (mov,%B0,%A0) CR_TAB\n-\t\t      AS1 (clr,%A0)     CR_TAB\n-\t\t      AS1 (swap,%B0)    CR_TAB\n-\t\t      AS1 (lsl,%B0)     CR_TAB\n-\t\t      AS2 (andi,%B0,0xe0));\n+\t      return (\"mov %B0,%A0\" CR_TAB\n+\t\t      \"clr %A0\"     CR_TAB\n+\t\t      \"swap %B0\"    CR_TAB\n+\t\t      \"lsl %B0\"     CR_TAB\n+\t\t      \"andi %B0,0xe0\");\n \t    }\n \t  if (AVR_HAVE_MUL && scratch)\n \t    {\n \t      *len = 5;\n-\t      return (AS2 (ldi,%3,0x20) CR_TAB\n-\t\t      AS2 (mul,%A0,%3)  CR_TAB\n-\t\t      AS2 (mov,%B0,r0)  CR_TAB\n-\t\t      AS1 (clr,%A0)     CR_TAB\n-\t\t      AS1 (clr,__zero_reg__));\n+\t      return (\"ldi %3,0x20\" CR_TAB\n+\t\t      \"mul %A0,%3\"  CR_TAB\n+\t\t      \"mov %B0,r0\"  CR_TAB\n+\t\t      \"clr %A0\"     CR_TAB\n+\t\t      \"clr __zero_reg__\");\n \t    }\n \t  if (optimize_size && scratch)\n \t    break;  /* 5 */\n \t  if (scratch)\n \t    {\n \t      *len = 6;\n-\t      return (AS2 (mov,%B0,%A0) CR_TAB\n-\t\t      AS1 (clr,%A0)     CR_TAB\n-\t\t      AS1 (swap,%B0)    CR_TAB\n-\t\t      AS1 (lsl,%B0)     CR_TAB\n-\t\t      AS2 (ldi,%3,0xe0) CR_TAB\n+\t      return (\"mov %B0,%A0\" CR_TAB\n+\t\t      \"clr %A0\"     CR_TAB\n+\t\t      \"swap %B0\"    CR_TAB\n+\t\t      \"lsl %B0\"     CR_TAB\n+\t\t      \"ldi %3,0xe0\" CR_TAB\n \t\t      \"and %B0,%3\");\n \t    }\n \t  if (AVR_HAVE_MUL)\n \t    {\n \t      *len = 6;\n \t      return (\"set\"            CR_TAB\n-\t\t      AS2 (bld,r1,5)   CR_TAB\n-\t\t      AS2 (mul,%A0,r1) CR_TAB\n-\t\t      AS2 (mov,%B0,r0) CR_TAB\n-\t\t      AS1 (clr,%A0)    CR_TAB\n-\t\t      AS1 (clr,__zero_reg__));\n+\t\t      \"bld r1,5\"   CR_TAB\n+\t\t      \"mul %A0,r1\" CR_TAB\n+\t\t      \"mov %B0,r0\" CR_TAB\n+\t\t      \"clr %A0\"    CR_TAB\n+\t\t      \"clr __zero_reg__\");\n \t    }\n \t  *len = 7;\n-\t  return (AS2 (mov,%B0,%A0) CR_TAB\n-\t\t  AS1 (clr,%A0)     CR_TAB\n-\t\t  AS1 (lsl,%B0)     CR_TAB\n-\t\t  AS1 (lsl,%B0)     CR_TAB\n-\t\t  AS1 (lsl,%B0)     CR_TAB\n-\t\t  AS1 (lsl,%B0)     CR_TAB\n-\t\t  AS1 (lsl,%B0));\n+\t  return (\"mov %B0,%A0\" CR_TAB\n+\t\t  \"clr %A0\"     CR_TAB\n+\t\t  \"lsl %B0\"     CR_TAB\n+\t\t  \"lsl %B0\"     CR_TAB\n+\t\t  \"lsl %B0\"     CR_TAB\n+\t\t  \"lsl %B0\"     CR_TAB\n+\t\t  \"lsl %B0\");\n \n \tcase 14:\n \t  if (AVR_HAVE_MUL && ldi_ok)\n \t    {\n \t      *len = 5;\n-\t      return (AS2 (ldi,%B0,0x40) CR_TAB\n-\t\t      AS2 (mul,%A0,%B0)  CR_TAB\n-\t\t      AS2 (mov,%B0,r0)   CR_TAB\n-\t\t      AS1 (clr,%A0)      CR_TAB\n-\t\t      AS1 (clr,__zero_reg__));\n+\t      return (\"ldi %B0,0x40\" CR_TAB\n+\t\t      \"mul %A0,%B0\"  CR_TAB\n+\t\t      \"mov %B0,r0\"   CR_TAB\n+\t\t      \"clr %A0\"      CR_TAB\n+\t\t      \"clr __zero_reg__\");\n \t    }\n \t  if (AVR_HAVE_MUL && scratch)\n \t    {\n \t      *len = 5;\n-\t      return (AS2 (ldi,%3,0x40) CR_TAB\n-\t\t      AS2 (mul,%A0,%3)  CR_TAB\n-\t\t      AS2 (mov,%B0,r0)  CR_TAB\n-\t\t      AS1 (clr,%A0)     CR_TAB\n-\t\t      AS1 (clr,__zero_reg__));\n+\t      return (\"ldi %3,0x40\" CR_TAB\n+\t\t      \"mul %A0,%3\"  CR_TAB\n+\t\t      \"mov %B0,r0\"  CR_TAB\n+\t\t      \"clr %A0\"     CR_TAB\n+\t\t      \"clr __zero_reg__\");\n \t    }\n \t  if (optimize_size && ldi_ok)\n \t    {\n \t      *len = 5;\n-\t      return (AS2 (mov,%B0,%A0) CR_TAB\n-\t\t      AS2 (ldi,%A0,6) \"\\n1:\\t\"\n-\t\t      AS1 (lsl,%B0)     CR_TAB\n-\t\t      AS1 (dec,%A0)     CR_TAB\n-\t\t      AS1 (brne,1b));\n+\t      return (\"mov %B0,%A0\" CR_TAB\n+\t\t      \"ldi %A0,6\" \"\\n1:\\t\"\n+\t\t      \"lsl %B0\"     CR_TAB\n+\t\t      \"dec %A0\"     CR_TAB\n+\t\t      \"brne 1b\");\n \t    }\n \t  if (optimize_size && scratch)\n \t    break;  /* 5 */\n \t  *len = 6;\n-\t  return (AS1 (clr,%B0) CR_TAB\n-\t\t  AS1 (lsr,%A0) CR_TAB\n-\t\t  AS1 (ror,%B0) CR_TAB\n-\t\t  AS1 (lsr,%A0) CR_TAB\n-\t\t  AS1 (ror,%B0) CR_TAB\n-\t\t  AS1 (clr,%A0));\n+\t  return (\"clr %B0\" CR_TAB\n+\t\t  \"lsr %A0\" CR_TAB\n+\t\t  \"ror %B0\" CR_TAB\n+\t\t  \"lsr %A0\" CR_TAB\n+\t\t  \"ror %B0\" CR_TAB\n+\t\t  \"clr %A0\");\n \n \tcase 15:\n \t  *len = 4;\n-\t  return (AS1 (clr,%B0) CR_TAB\n-\t\t  AS1 (lsr,%A0) CR_TAB\n-\t\t  AS1 (ror,%B0) CR_TAB\n-\t\t  AS1 (clr,%A0));\n+\t  return (\"clr %B0\" CR_TAB\n+\t\t  \"lsr %A0\" CR_TAB\n+\t\t  \"ror %B0\" CR_TAB\n+\t\t  \"clr %A0\");\n \t}\n       len = t;\n     }\n-  out_shift_with_cnt ((AS1 (lsl,%A0) CR_TAB\n-\t\t       AS1 (rol,%B0)),\n-\t\t       insn, operands, len, 2);\n+  out_shift_with_cnt (\"lsl %A0\" CR_TAB\n+                      \"rol %B0\", insn, operands, len, 2);\n   return \"\";\n }\n \n@@ -4824,73 +4823,72 @@ ashlsi3_out (rtx insn, rtx operands[], int *len)\n \t    break;\n \n \t  if (AVR_HAVE_MOVW)\n-\t    return *len = 3, (AS1 (clr,%D0) CR_TAB\n-\t\t\t      AS1 (clr,%C0) CR_TAB\n-\t\t\t      AS2 (movw,%A0,%C0));\n+\t    return *len = 3, (\"clr %D0\" CR_TAB\n+\t\t\t      \"clr %C0\" CR_TAB\n+\t\t\t      \"movw %A0,%C0\");\n \t  *len = 4;\n-\t  return (AS1 (clr,%D0) CR_TAB\n-\t\t  AS1 (clr,%C0) CR_TAB\n-\t\t  AS1 (clr,%B0) CR_TAB\n-\t\t  AS1 (clr,%A0));\n+\t  return (\"clr %D0\" CR_TAB\n+\t\t  \"clr %C0\" CR_TAB\n+\t\t  \"clr %B0\" CR_TAB\n+\t\t  \"clr %A0\");\n \n \tcase 8:\n \t  {\n \t    int reg0 = true_regnum (operands[0]);\n \t    int reg1 = true_regnum (operands[1]);\n \t    *len = 4;\n \t    if (reg0 >= reg1)\n-\t      return (AS2 (mov,%D0,%C1)  CR_TAB\n-\t\t      AS2 (mov,%C0,%B1)  CR_TAB\n-\t\t      AS2 (mov,%B0,%A1)  CR_TAB\n-\t\t      AS1 (clr,%A0));\n+\t      return (\"mov %D0,%C1\"  CR_TAB\n+\t\t      \"mov %C0,%B1\"  CR_TAB\n+\t\t      \"mov %B0,%A1\"  CR_TAB\n+\t\t      \"clr %A0\");\n \t    else\n-\t      return (AS1 (clr,%A0)      CR_TAB\n-\t\t      AS2 (mov,%B0,%A1)  CR_TAB\n-\t\t      AS2 (mov,%C0,%B1)  CR_TAB\n-\t\t      AS2 (mov,%D0,%C1));\n+\t      return (\"clr %A0\"      CR_TAB\n+\t\t      \"mov %B0,%A1\"  CR_TAB\n+\t\t      \"mov %C0,%B1\"  CR_TAB\n+\t\t      \"mov %D0,%C1\");\n \t  }\n \n \tcase 16:\n \t  {\n \t    int reg0 = true_regnum (operands[0]);\n \t    int reg1 = true_regnum (operands[1]);\n \t    if (reg0 + 2 == reg1)\n-\t      return *len = 2, (AS1 (clr,%B0)      CR_TAB\n-\t\t\t\tAS1 (clr,%A0));\n+\t      return *len = 2, (\"clr %B0\"      CR_TAB\n+\t\t\t\t\"clr %A0\");\n \t    if (AVR_HAVE_MOVW)\n-\t      return *len = 3, (AS2 (movw,%C0,%A1) CR_TAB\n-\t\t\t\tAS1 (clr,%B0)      CR_TAB\n-\t\t\t\tAS1 (clr,%A0));\n+\t      return *len = 3, (\"movw %C0,%A1\" CR_TAB\n+\t\t\t\t\"clr %B0\"      CR_TAB\n+\t\t\t\t\"clr %A0\");\n \t    else\n-\t      return *len = 4, (AS2 (mov,%C0,%A1)  CR_TAB\n-\t\t\t\tAS2 (mov,%D0,%B1)  CR_TAB\n-\t\t\t\tAS1 (clr,%B0)      CR_TAB\n-\t\t\t\tAS1 (clr,%A0));\n+\t      return *len = 4, (\"mov %C0,%A1\"  CR_TAB\n+\t\t\t\t\"mov %D0,%B1\"  CR_TAB\n+\t\t\t\t\"clr %B0\"      CR_TAB\n+\t\t\t\t\"clr %A0\");\n \t  }\n \n \tcase 24:\n \t  *len = 4;\n-\t  return (AS2 (mov,%D0,%A1)  CR_TAB\n-\t\t  AS1 (clr,%C0)      CR_TAB\n-\t\t  AS1 (clr,%B0)      CR_TAB\n-\t\t  AS1 (clr,%A0));\n+\t  return (\"mov %D0,%A1\"  CR_TAB\n+\t\t  \"clr %C0\"      CR_TAB\n+\t\t  \"clr %B0\"      CR_TAB\n+\t\t  \"clr %A0\");\n \n \tcase 31:\n \t  *len = 6;\n-\t  return (AS1 (clr,%D0) CR_TAB\n-\t\t  AS1 (lsr,%A0) CR_TAB\n-\t\t  AS1 (ror,%D0) CR_TAB\n-\t\t  AS1 (clr,%C0) CR_TAB\n-\t\t  AS1 (clr,%B0) CR_TAB\n-\t\t  AS1 (clr,%A0));\n+\t  return (\"clr %D0\" CR_TAB\n+\t\t  \"lsr %A0\" CR_TAB\n+\t\t  \"ror %D0\" CR_TAB\n+\t\t  \"clr %C0\" CR_TAB\n+\t\t  \"clr %B0\" CR_TAB\n+\t\t  \"clr %A0\");\n \t}\n       len = t;\n     }\n-  out_shift_with_cnt ((AS1 (lsl,%A0) CR_TAB\n-\t\t       AS1 (rol,%B0) CR_TAB\n-\t\t       AS1 (rol,%C0) CR_TAB\n-\t\t       AS1 (rol,%D0)),\n-\t\t       insn, operands, len, 4);\n+  out_shift_with_cnt (\"lsl %A0\" CR_TAB\n+                      \"rol %B0\" CR_TAB\n+                      \"rol %C0\" CR_TAB\n+                      \"rol %D0\", insn, operands, len, 4);\n   return \"\";\n }\n \n@@ -4910,40 +4908,40 @@ ashrqi3_out (rtx insn, rtx operands[], int *len)\n \t{\n \tcase 1:\n \t  *len = 1;\n-\t  return AS1 (asr,%0);\n+\t  return \"asr %0\";\n \n \tcase 2:\n \t  *len = 2;\n-\t  return (AS1 (asr,%0) CR_TAB\n-\t\t  AS1 (asr,%0));\n+\t  return (\"asr %0\" CR_TAB\n+\t\t  \"asr %0\");\n \n \tcase 3:\n \t  *len = 3;\n-\t  return (AS1 (asr,%0) CR_TAB\n-\t\t  AS1 (asr,%0) CR_TAB\n-\t\t  AS1 (asr,%0));\n+\t  return (\"asr %0\" CR_TAB\n+\t\t  \"asr %0\" CR_TAB\n+\t\t  \"asr %0\");\n \n \tcase 4:\n \t  *len = 4;\n-\t  return (AS1 (asr,%0) CR_TAB\n-\t\t  AS1 (asr,%0) CR_TAB\n-\t\t  AS1 (asr,%0) CR_TAB\n-\t\t  AS1 (asr,%0));\n+\t  return (\"asr %0\" CR_TAB\n+\t\t  \"asr %0\" CR_TAB\n+\t\t  \"asr %0\" CR_TAB\n+\t\t  \"asr %0\");\n \n \tcase 5:\n \t  *len = 5;\n-\t  return (AS1 (asr,%0) CR_TAB\n-\t\t  AS1 (asr,%0) CR_TAB\n-\t\t  AS1 (asr,%0) CR_TAB\n-\t\t  AS1 (asr,%0) CR_TAB\n-\t\t  AS1 (asr,%0));\n+\t  return (\"asr %0\" CR_TAB\n+\t\t  \"asr %0\" CR_TAB\n+\t\t  \"asr %0\" CR_TAB\n+\t\t  \"asr %0\" CR_TAB\n+\t\t  \"asr %0\");\n \n \tcase 6:\n \t  *len = 4;\n-\t  return (AS2 (bst,%0,6)  CR_TAB\n-\t\t  AS1 (lsl,%0)    CR_TAB\n-\t\t  AS2 (sbc,%0,%0) CR_TAB\n-\t\t  AS2 (bld,%0,0));\n+\t  return (\"bst %0,6\"  CR_TAB\n+\t\t  \"lsl %0\"    CR_TAB\n+\t\t  \"sbc %0,%0\" CR_TAB\n+\t\t  \"bld %0,0\");\n \n \tdefault:\n \t  if (INTVAL (operands[2]) < 8)\n@@ -4953,15 +4951,15 @@ ashrqi3_out (rtx insn, rtx operands[], int *len)\n \n \tcase 7:\n \t  *len = 2;\n-\t  return (AS1 (lsl,%0) CR_TAB\n-\t\t  AS2 (sbc,%0,%0));\n+\t  return (\"lsl %0\" CR_TAB\n+\t\t  \"sbc %0,%0\");\n \t}\n     }\n   else if (CONSTANT_P (operands[2]))\n     fatal_insn (\"internal compiler error.  Incorrect shift:\", insn);\n \n-  out_shift_with_cnt (AS1 (asr,%0),\n-\t\t      insn, operands, len, 1);\n+  out_shift_with_cnt (\"asr %0\",\n+                      insn, operands, len, 1);\n   return \"\";\n }\n \n@@ -4992,123 +4990,123 @@ ashrhi3_out (rtx insn, rtx operands[], int *len)\n \t  if (optimize_size)\n \t    break;  /* scratch ? 5 : 6 */\n \t  *len = 8;\n-\t  return (AS2 (mov,__tmp_reg__,%A0) CR_TAB\n-\t\t  AS2 (mov,%A0,%B0)         CR_TAB\n-\t\t  AS1 (lsl,__tmp_reg__)     CR_TAB\n-\t\t  AS1 (rol,%A0)             CR_TAB\n-\t\t  AS2 (sbc,%B0,%B0)         CR_TAB\n-\t\t  AS1 (lsl,__tmp_reg__)     CR_TAB\n-\t\t  AS1 (rol,%A0)             CR_TAB\n-\t\t  AS1 (rol,%B0));\n+\t  return (\"mov __tmp_reg__,%A0\" CR_TAB\n+\t\t  \"mov %A0,%B0\"         CR_TAB\n+\t\t  \"lsl __tmp_reg__\"     CR_TAB\n+\t\t  \"rol %A0\"             CR_TAB\n+\t\t  \"sbc %B0,%B0\"         CR_TAB\n+\t\t  \"lsl __tmp_reg__\"     CR_TAB\n+\t\t  \"rol %A0\"             CR_TAB\n+\t\t  \"rol %B0\");\n \n \tcase 7:\n \t  *len = 4;\n-\t  return (AS1 (lsl,%A0)     CR_TAB\n-\t\t  AS2 (mov,%A0,%B0) CR_TAB\n-\t\t  AS1 (rol,%A0)     CR_TAB\n-\t\t  AS2 (sbc,%B0,%B0));\n+\t  return (\"lsl %A0\"     CR_TAB\n+\t\t  \"mov %A0,%B0\" CR_TAB\n+\t\t  \"rol %A0\"     CR_TAB\n+\t\t  \"sbc %B0,%B0\");\n \n \tcase 8:\n \t  {\n \t    int reg0 = true_regnum (operands[0]);\n \t    int reg1 = true_regnum (operands[1]);\n \n \t    if (reg0 == reg1)\n-\t      return *len = 3, (AS2 (mov,%A0,%B0) CR_TAB\n-\t\t\t\tAS1 (lsl,%B0)     CR_TAB\n-\t\t\t\tAS2 (sbc,%B0,%B0));\n+\t      return *len = 3, (\"mov %A0,%B0\" CR_TAB\n+\t\t\t\t\"lsl %B0\"     CR_TAB\n+\t\t\t\t\"sbc %B0,%B0\");\n \t    else \n-\t      return *len = 4, (AS2 (mov,%A0,%B1) CR_TAB\n-\t\t\t        AS1 (clr,%B0)     CR_TAB\n-\t\t\t        AS2 (sbrc,%A0,7)  CR_TAB\n-\t\t\t        AS1 (dec,%B0));\n+\t      return *len = 4, (\"mov %A0,%B1\" CR_TAB\n+\t\t\t        \"clr %B0\"     CR_TAB\n+\t\t\t        \"sbrc %A0,7\"  CR_TAB\n+\t\t\t        \"dec %B0\");\n \t  }\n \n \tcase 9:\n \t  *len = 4;\n-\t  return (AS2 (mov,%A0,%B0) CR_TAB\n-\t\t  AS1 (lsl,%B0)      CR_TAB\n-\t\t  AS2 (sbc,%B0,%B0) CR_TAB\n-\t\t  AS1 (asr,%A0));\n+\t  return (\"mov %A0,%B0\" CR_TAB\n+\t\t  \"lsl %B0\"      CR_TAB\n+\t\t  \"sbc %B0,%B0\" CR_TAB\n+\t\t  \"asr %A0\");\n \n \tcase 10:\n \t  *len = 5;\n-\t  return (AS2 (mov,%A0,%B0) CR_TAB\n-\t\t  AS1 (lsl,%B0)     CR_TAB\n-\t\t  AS2 (sbc,%B0,%B0) CR_TAB\n-\t\t  AS1 (asr,%A0)     CR_TAB\n-\t\t  AS1 (asr,%A0));\n+\t  return (\"mov %A0,%B0\" CR_TAB\n+\t\t  \"lsl %B0\"     CR_TAB\n+\t\t  \"sbc %B0,%B0\" CR_TAB\n+\t\t  \"asr %A0\"     CR_TAB\n+\t\t  \"asr %A0\");\n \n \tcase 11:\n \t  if (AVR_HAVE_MUL && ldi_ok)\n \t    {\n \t      *len = 5;\n-\t      return (AS2 (ldi,%A0,0x20) CR_TAB\n-\t\t      AS2 (muls,%B0,%A0) CR_TAB\n-\t\t      AS2 (mov,%A0,r1)   CR_TAB\n-\t\t      AS2 (sbc,%B0,%B0)  CR_TAB\n-\t\t      AS1 (clr,__zero_reg__));\n+\t      return (\"ldi %A0,0x20\" CR_TAB\n+\t\t      \"muls %B0,%A0\" CR_TAB\n+\t\t      \"mov %A0,r1\"   CR_TAB\n+\t\t      \"sbc %B0,%B0\"  CR_TAB\n+\t\t      \"clr __zero_reg__\");\n \t    }\n \t  if (optimize_size && scratch)\n \t    break;  /* 5 */\n \t  *len = 6;\n-\t  return (AS2 (mov,%A0,%B0) CR_TAB\n-\t\t  AS1 (lsl,%B0)     CR_TAB\n-\t\t  AS2 (sbc,%B0,%B0) CR_TAB\n-\t\t  AS1 (asr,%A0)     CR_TAB\n-\t\t  AS1 (asr,%A0)     CR_TAB\n-\t\t  AS1 (asr,%A0));\n+\t  return (\"mov %A0,%B0\" CR_TAB\n+\t\t  \"lsl %B0\"     CR_TAB\n+\t\t  \"sbc %B0,%B0\" CR_TAB\n+\t\t  \"asr %A0\"     CR_TAB\n+\t\t  \"asr %A0\"     CR_TAB\n+\t\t  \"asr %A0\");\n \n \tcase 12:\n \t  if (AVR_HAVE_MUL && ldi_ok)\n \t    {\n \t      *len = 5;\n-\t      return (AS2 (ldi,%A0,0x10) CR_TAB\n-\t\t      AS2 (muls,%B0,%A0) CR_TAB\n-\t\t      AS2 (mov,%A0,r1)   CR_TAB\n-\t\t      AS2 (sbc,%B0,%B0)  CR_TAB\n-\t\t      AS1 (clr,__zero_reg__));\n+\t      return (\"ldi %A0,0x10\" CR_TAB\n+\t\t      \"muls %B0,%A0\" CR_TAB\n+\t\t      \"mov %A0,r1\"   CR_TAB\n+\t\t      \"sbc %B0,%B0\"  CR_TAB\n+\t\t      \"clr __zero_reg__\");\n \t    }\n \t  if (optimize_size && scratch)\n \t    break;  /* 5 */\n \t  *len = 7;\n-\t  return (AS2 (mov,%A0,%B0) CR_TAB\n-\t\t  AS1 (lsl,%B0)     CR_TAB\n-\t\t  AS2 (sbc,%B0,%B0) CR_TAB\n-\t\t  AS1 (asr,%A0)     CR_TAB\n-\t\t  AS1 (asr,%A0)     CR_TAB\n-\t\t  AS1 (asr,%A0)     CR_TAB\n-\t\t  AS1 (asr,%A0));\n+\t  return (\"mov %A0,%B0\" CR_TAB\n+\t\t  \"lsl %B0\"     CR_TAB\n+\t\t  \"sbc %B0,%B0\" CR_TAB\n+\t\t  \"asr %A0\"     CR_TAB\n+\t\t  \"asr %A0\"     CR_TAB\n+\t\t  \"asr %A0\"     CR_TAB\n+\t\t  \"asr %A0\");\n \n \tcase 13:\n \t  if (AVR_HAVE_MUL && ldi_ok)\n \t    {\n \t      *len = 5;\n-\t      return (AS2 (ldi,%A0,0x08) CR_TAB\n-\t\t      AS2 (muls,%B0,%A0) CR_TAB\n-\t\t      AS2 (mov,%A0,r1)   CR_TAB\n-\t\t      AS2 (sbc,%B0,%B0)  CR_TAB\n-\t\t      AS1 (clr,__zero_reg__));\n+\t      return (\"ldi %A0,0x08\" CR_TAB\n+\t\t      \"muls %B0,%A0\" CR_TAB\n+\t\t      \"mov %A0,r1\"   CR_TAB\n+\t\t      \"sbc %B0,%B0\"  CR_TAB\n+\t\t      \"clr __zero_reg__\");\n \t    }\n \t  if (optimize_size)\n \t    break;  /* scratch ? 5 : 7 */\n \t  *len = 8;\n-\t  return (AS2 (mov,%A0,%B0) CR_TAB\n-\t\t  AS1 (lsl,%B0)     CR_TAB\n-\t\t  AS2 (sbc,%B0,%B0) CR_TAB\n-\t\t  AS1 (asr,%A0)     CR_TAB\n-\t\t  AS1 (asr,%A0)     CR_TAB\n-\t\t  AS1 (asr,%A0)     CR_TAB\n-\t\t  AS1 (asr,%A0)     CR_TAB\n-\t\t  AS1 (asr,%A0));\n+\t  return (\"mov %A0,%B0\" CR_TAB\n+\t\t  \"lsl %B0\"     CR_TAB\n+\t\t  \"sbc %B0,%B0\" CR_TAB\n+\t\t  \"asr %A0\"     CR_TAB\n+\t\t  \"asr %A0\"     CR_TAB\n+\t\t  \"asr %A0\"     CR_TAB\n+\t\t  \"asr %A0\"     CR_TAB\n+\t\t  \"asr %A0\");\n \n \tcase 14:\n \t  *len = 5;\n-\t  return (AS1 (lsl,%B0)     CR_TAB\n-\t\t  AS2 (sbc,%A0,%A0) CR_TAB\n-\t\t  AS1 (lsl,%B0)     CR_TAB\n-\t\t  AS2 (mov,%B0,%A0) CR_TAB\n-\t\t  AS1 (rol,%A0));\n+\t  return (\"lsl %B0\"     CR_TAB\n+\t\t  \"sbc %A0,%A0\" CR_TAB\n+\t\t  \"lsl %B0\"     CR_TAB\n+\t\t  \"mov %B0,%A0\" CR_TAB\n+\t\t  \"rol %A0\");\n \n \tdefault:\n \t  if (INTVAL (operands[2]) < 16)\n@@ -5117,15 +5115,14 @@ ashrhi3_out (rtx insn, rtx operands[], int *len)\n \t  /* fall through */\n \n \tcase 15:\n-\t  return *len = 3, (AS1 (lsl,%B0)     CR_TAB\n-\t\t\t    AS2 (sbc,%A0,%A0) CR_TAB\n-\t\t\t    AS2 (mov,%B0,%A0));\n+\t  return *len = 3, (\"lsl %B0\"     CR_TAB\n+\t\t\t    \"sbc %A0,%A0\" CR_TAB\n+\t\t\t    \"mov %B0,%A0\");\n \t}\n       len = t;\n     }\n-  out_shift_with_cnt ((AS1 (asr,%B0) CR_TAB\n-\t\t       AS1 (ror,%A0)),\n-\t\t       insn, operands, len, 2);\n+  out_shift_with_cnt (\"asr %B0\" CR_TAB\n+                      \"ror %A0\", insn, operands, len, 2);\n   return \"\";\n }\n \n@@ -5210,19 +5207,19 @@ ashrsi3_out (rtx insn, rtx operands[], int *len)\n \t    int reg1 = true_regnum (operands[1]);\n \t    *len=6;\n \t    if (reg0 <= reg1)\n-\t      return (AS2 (mov,%A0,%B1) CR_TAB\n-\t\t      AS2 (mov,%B0,%C1) CR_TAB\n-\t\t      AS2 (mov,%C0,%D1) CR_TAB\n-\t\t      AS1 (clr,%D0)     CR_TAB\n-\t\t      AS2 (sbrc,%C0,7)  CR_TAB\n-\t\t      AS1 (dec,%D0));\n+\t      return (\"mov %A0,%B1\" CR_TAB\n+\t\t      \"mov %B0,%C1\" CR_TAB\n+\t\t      \"mov %C0,%D1\" CR_TAB\n+\t\t      \"clr %D0\"     CR_TAB\n+\t\t      \"sbrc %C0,7\"  CR_TAB\n+\t\t      \"dec %D0\");\n \t    else\n-\t      return (AS1 (clr,%D0)     CR_TAB\n-\t\t      AS2 (sbrc,%D1,7)  CR_TAB\n-\t\t      AS1 (dec,%D0)     CR_TAB\n-\t\t      AS2 (mov,%C0,%D1) CR_TAB\n-\t\t      AS2 (mov,%B0,%C1) CR_TAB\n-\t\t      AS2 (mov,%A0,%B1));\n+\t      return (\"clr %D0\"     CR_TAB\n+\t\t      \"sbrc %D1,7\"  CR_TAB\n+\t\t      \"dec %D0\"     CR_TAB\n+\t\t      \"mov %C0,%D1\" CR_TAB\n+\t\t      \"mov %B0,%C1\" CR_TAB\n+\t\t      \"mov %A0,%B1\");\n \t  }\n \t  \n \tcase 16:\n@@ -5231,32 +5228,32 @@ ashrsi3_out (rtx insn, rtx operands[], int *len)\n \t    int reg1 = true_regnum (operands[1]);\n \t    \n \t    if (reg0 == reg1 + 2)\n-\t      return *len = 4, (AS1 (clr,%D0)     CR_TAB\n-\t\t\t\tAS2 (sbrc,%B0,7)  CR_TAB\n-\t\t\t\tAS1 (com,%D0)     CR_TAB\n-\t\t\t\tAS2 (mov,%C0,%D0));\n+\t      return *len = 4, (\"clr %D0\"     CR_TAB\n+\t\t\t\t\"sbrc %B0,7\"  CR_TAB\n+\t\t\t\t\"com %D0\"     CR_TAB\n+\t\t\t\t\"mov %C0,%D0\");\n \t    if (AVR_HAVE_MOVW)\n-\t      return *len = 5, (AS2 (movw,%A0,%C1) CR_TAB\n-\t\t\t\tAS1 (clr,%D0)      CR_TAB\n-\t\t\t\tAS2 (sbrc,%B0,7)   CR_TAB\n-\t\t\t\tAS1 (com,%D0)      CR_TAB\n-\t\t\t\tAS2 (mov,%C0,%D0));\n+\t      return *len = 5, (\"movw %A0,%C1\" CR_TAB\n+\t\t\t\t\"clr %D0\"      CR_TAB\n+\t\t\t\t\"sbrc %B0,7\"   CR_TAB\n+\t\t\t\t\"com %D0\"      CR_TAB\n+\t\t\t\t\"mov %C0,%D0\");\n \t    else \n-\t      return *len = 6, (AS2 (mov,%B0,%D1) CR_TAB\n-\t\t\t\tAS2 (mov,%A0,%C1) CR_TAB\n-\t\t\t\tAS1 (clr,%D0)     CR_TAB\n-\t\t\t\tAS2 (sbrc,%B0,7)  CR_TAB\n-\t\t\t\tAS1 (com,%D0)     CR_TAB\n-\t\t\t\tAS2 (mov,%C0,%D0));\n+\t      return *len = 6, (\"mov %B0,%D1\" CR_TAB\n+\t\t\t\t\"mov %A0,%C1\" CR_TAB\n+\t\t\t\t\"clr %D0\"     CR_TAB\n+\t\t\t\t\"sbrc %B0,7\"  CR_TAB\n+\t\t\t\t\"com %D0\"     CR_TAB\n+\t\t\t\t\"mov %C0,%D0\");\n \t  }\n \n \tcase 24:\n-\t  return *len = 6, (AS2 (mov,%A0,%D1) CR_TAB\n-\t\t\t    AS1 (clr,%D0)     CR_TAB\n-\t\t\t    AS2 (sbrc,%A0,7)  CR_TAB\n-\t\t\t    AS1 (com,%D0)     CR_TAB\n-\t\t\t    AS2 (mov,%B0,%D0) CR_TAB\n-\t\t\t    AS2 (mov,%C0,%D0));\n+\t  return *len = 6, (\"mov %A0,%D1\" CR_TAB\n+\t\t\t    \"clr %D0\"     CR_TAB\n+\t\t\t    \"sbrc %A0,7\"  CR_TAB\n+\t\t\t    \"com %D0\"     CR_TAB\n+\t\t\t    \"mov %B0,%D0\" CR_TAB\n+\t\t\t    \"mov %C0,%D0\");\n \n \tdefault:\n \t  if (INTVAL (operands[2]) < 32)\n@@ -5266,24 +5263,23 @@ ashrsi3_out (rtx insn, rtx operands[], int *len)\n \n \tcase 31:\n \t  if (AVR_HAVE_MOVW)\n-\t    return *len = 4, (AS1 (lsl,%D0)     CR_TAB\n-\t\t\t      AS2 (sbc,%A0,%A0) CR_TAB\n-\t\t\t      AS2 (mov,%B0,%A0) CR_TAB\n-\t\t\t      AS2 (movw,%C0,%A0));\n+\t    return *len = 4, (\"lsl %D0\"     CR_TAB\n+\t\t\t      \"sbc %A0,%A0\" CR_TAB\n+\t\t\t      \"mov %B0,%A0\" CR_TAB\n+\t\t\t      \"movw %C0,%A0\");\n \t  else\n-\t    return *len = 5, (AS1 (lsl,%D0)     CR_TAB\n-\t\t\t      AS2 (sbc,%A0,%A0) CR_TAB\n-\t\t\t      AS2 (mov,%B0,%A0) CR_TAB\n-\t\t\t      AS2 (mov,%C0,%A0) CR_TAB\n-\t\t\t      AS2 (mov,%D0,%A0));\n+\t    return *len = 5, (\"lsl %D0\"     CR_TAB\n+\t\t\t      \"sbc %A0,%A0\" CR_TAB\n+\t\t\t      \"mov %B0,%A0\" CR_TAB\n+\t\t\t      \"mov %C0,%A0\" CR_TAB\n+\t\t\t      \"mov %D0,%A0\");\n \t}\n       len = t;\n     }\n-  out_shift_with_cnt ((AS1 (asr,%D0) CR_TAB\n-\t\t       AS1 (ror,%C0) CR_TAB\n-\t\t       AS1 (ror,%B0) CR_TAB\n-\t\t       AS1 (ror,%A0)),\n-\t\t       insn, operands, len, 4);\n+  out_shift_with_cnt (\"asr %D0\" CR_TAB\n+                      \"ror %C0\" CR_TAB\n+                      \"ror %B0\" CR_TAB\n+                      \"ror %A0\", insn, operands, len, 4);\n   return \"\";\n }\n \n@@ -5306,79 +5302,79 @@ lshrqi3_out (rtx insn, rtx operands[], int *len)\n \t    break;\n \n \t  *len = 1;\n-\t  return AS1 (clr,%0);\n+\t  return \"clr %0\";\n \n \tcase 1:\n \t  *len = 1;\n-\t  return AS1 (lsr,%0);\n+\t  return \"lsr %0\";\n \n \tcase 2:\n \t  *len = 2;\n-\t  return (AS1 (lsr,%0) CR_TAB\n-\t\t  AS1 (lsr,%0));\n+\t  return (\"lsr %0\" CR_TAB\n+\t\t  \"lsr %0\");\n \tcase 3:\n \t  *len = 3;\n-\t  return (AS1 (lsr,%0) CR_TAB\n-\t\t  AS1 (lsr,%0) CR_TAB\n-\t\t  AS1 (lsr,%0));\n+\t  return (\"lsr %0\" CR_TAB\n+\t\t  \"lsr %0\" CR_TAB\n+\t\t  \"lsr %0\");\n \t  \n \tcase 4:\n \t  if (test_hard_reg_class (LD_REGS, operands[0]))\n \t    {\n \t      *len=2;\n-\t      return (AS1 (swap,%0) CR_TAB\n-\t\t      AS2 (andi,%0,0x0f));\n+\t      return (\"swap %0\" CR_TAB\n+\t\t      \"andi %0,0x0f\");\n \t    }\n \t  *len = 4;\n-\t  return (AS1 (lsr,%0) CR_TAB\n-\t\t  AS1 (lsr,%0) CR_TAB\n-\t\t  AS1 (lsr,%0) CR_TAB\n-\t\t  AS1 (lsr,%0));\n+\t  return (\"lsr %0\" CR_TAB\n+\t\t  \"lsr %0\" CR_TAB\n+\t\t  \"lsr %0\" CR_TAB\n+\t\t  \"lsr %0\");\n \t  \n \tcase 5:\n \t  if (test_hard_reg_class (LD_REGS, operands[0]))\n \t    {\n \t      *len = 3;\n-\t      return (AS1 (swap,%0) CR_TAB\n-\t\t      AS1 (lsr,%0)  CR_TAB\n-\t\t      AS2 (andi,%0,0x7));\n+\t      return (\"swap %0\" CR_TAB\n+\t\t      \"lsr %0\"  CR_TAB\n+\t\t      \"andi %0,0x7\");\n \t    }\n \t  *len = 5;\n-\t  return (AS1 (lsr,%0) CR_TAB\n-\t\t  AS1 (lsr,%0) CR_TAB\n-\t\t  AS1 (lsr,%0) CR_TAB\n-\t\t  AS1 (lsr,%0) CR_TAB\n-\t\t  AS1 (lsr,%0));\n+\t  return (\"lsr %0\" CR_TAB\n+\t\t  \"lsr %0\" CR_TAB\n+\t\t  \"lsr %0\" CR_TAB\n+\t\t  \"lsr %0\" CR_TAB\n+\t\t  \"lsr %0\");\n \t  \n \tcase 6:\n \t  if (test_hard_reg_class (LD_REGS, operands[0]))\n \t    {\n \t      *len = 4;\n-\t      return (AS1 (swap,%0) CR_TAB\n-\t\t      AS1 (lsr,%0)  CR_TAB\n-\t\t      AS1 (lsr,%0)  CR_TAB\n-\t\t      AS2 (andi,%0,0x3));\n+\t      return (\"swap %0\" CR_TAB\n+\t\t      \"lsr %0\"  CR_TAB\n+\t\t      \"lsr %0\"  CR_TAB\n+\t\t      \"andi %0,0x3\");\n \t    }\n \t  *len = 6;\n-\t  return (AS1 (lsr,%0) CR_TAB\n-\t\t  AS1 (lsr,%0) CR_TAB\n-\t\t  AS1 (lsr,%0) CR_TAB\n-\t\t  AS1 (lsr,%0) CR_TAB\n-\t\t  AS1 (lsr,%0) CR_TAB\n-\t\t  AS1 (lsr,%0));\n+\t  return (\"lsr %0\" CR_TAB\n+\t\t  \"lsr %0\" CR_TAB\n+\t\t  \"lsr %0\" CR_TAB\n+\t\t  \"lsr %0\" CR_TAB\n+\t\t  \"lsr %0\" CR_TAB\n+\t\t  \"lsr %0\");\n \t  \n \tcase 7:\n \t  *len = 3;\n-\t  return (AS1 (rol,%0) CR_TAB\n-\t\t  AS1 (clr,%0) CR_TAB\n-\t\t  AS1 (rol,%0));\n+\t  return (\"rol %0\" CR_TAB\n+\t\t  \"clr %0\" CR_TAB\n+\t\t  \"rol %0\");\n \t}\n     }\n   else if (CONSTANT_P (operands[2]))\n     fatal_insn (\"internal compiler error.  Incorrect shift:\", insn);\n   \n-  out_shift_with_cnt (AS1 (lsr,%0),\n-\t\t      insn, operands, len, 1);\n+  out_shift_with_cnt (\"lsr %0\",\n+                      insn, operands, len, 1);\n   return \"\";\n }\n \n@@ -5404,32 +5400,32 @@ lshrhi3_out (rtx insn, rtx operands[], int *len)\n \t    break;\n \n \t  *len = 2;\n-\t  return (AS1 (clr,%B0) CR_TAB\n-\t\t  AS1 (clr,%A0));\n+\t  return (\"clr %B0\" CR_TAB\n+\t\t  \"clr %A0\");\n \n \tcase 4:\n \t  if (optimize_size && scratch)\n \t    break;  /* 5 */\n \t  if (ldi_ok)\n \t    {\n \t      *len = 6;\n-\t      return (AS1 (swap,%B0)      CR_TAB\n-\t\t      AS1 (swap,%A0)      CR_TAB\n-\t\t      AS2 (andi,%A0,0x0f) CR_TAB\n-\t\t      AS2 (eor,%A0,%B0)   CR_TAB\n-\t\t      AS2 (andi,%B0,0x0f) CR_TAB\n-\t\t      AS2 (eor,%A0,%B0));\n+\t      return (\"swap %B0\"      CR_TAB\n+\t\t      \"swap %A0\"      CR_TAB\n+\t\t      \"andi %A0,0x0f\" CR_TAB\n+\t\t      \"eor %A0,%B0\"   CR_TAB\n+\t\t      \"andi %B0,0x0f\" CR_TAB\n+\t\t      \"eor %A0,%B0\");\n \t    }\n \t  if (scratch)\n \t    {\n \t      *len = 7;\n-\t      return (AS1 (swap,%B0)    CR_TAB\n-\t\t      AS1 (swap,%A0)    CR_TAB\n-\t\t      AS2 (ldi,%3,0x0f) CR_TAB\n+\t      return (\"swap %B0\"    CR_TAB\n+\t\t      \"swap %A0\"    CR_TAB\n+\t\t      \"ldi %3,0x0f\" CR_TAB\n \t\t      \"and %A0,%3\"      CR_TAB\n-\t\t      AS2 (eor,%A0,%B0) CR_TAB\n+\t\t      \"eor %A0,%B0\" CR_TAB\n \t\t      \"and %B0,%3\"      CR_TAB\n-\t\t      AS2 (eor,%A0,%B0));\n+\t\t      \"eor %A0,%B0\");\n \t    }\n \t  break;  /* optimize_size ? 6 : 8 */\n \n@@ -5439,203 +5435,202 @@ lshrhi3_out (rtx insn, rtx operands[], int *len)\n \t  if (ldi_ok)\n \t    {\n \t      *len = 8;\n-\t      return (AS1 (lsr,%B0)       CR_TAB\n-\t\t      AS1 (ror,%A0)       CR_TAB\n-\t\t      AS1 (swap,%B0)      CR_TAB\n-\t\t      AS1 (swap,%A0)      CR_TAB\n-\t\t      AS2 (andi,%A0,0x0f) CR_TAB\n-\t\t      AS2 (eor,%A0,%B0)   CR_TAB\n-\t\t      AS2 (andi,%B0,0x0f) CR_TAB\n-\t\t      AS2 (eor,%A0,%B0));\n+\t      return (\"lsr %B0\"       CR_TAB\n+\t\t      \"ror %A0\"       CR_TAB\n+\t\t      \"swap %B0\"      CR_TAB\n+\t\t      \"swap %A0\"      CR_TAB\n+\t\t      \"andi %A0,0x0f\" CR_TAB\n+\t\t      \"eor %A0,%B0\"   CR_TAB\n+\t\t      \"andi %B0,0x0f\" CR_TAB\n+\t\t      \"eor %A0,%B0\");\n \t    }\n \t  if (scratch)\n \t    {\n \t      *len = 9;\n-\t      return (AS1 (lsr,%B0)     CR_TAB\n-\t\t      AS1 (ror,%A0)     CR_TAB\n-\t\t      AS1 (swap,%B0)    CR_TAB\n-\t\t      AS1 (swap,%A0)    CR_TAB\n-\t\t      AS2 (ldi,%3,0x0f) CR_TAB\n+\t      return (\"lsr %B0\"     CR_TAB\n+\t\t      \"ror %A0\"     CR_TAB\n+\t\t      \"swap %B0\"    CR_TAB\n+\t\t      \"swap %A0\"    CR_TAB\n+\t\t      \"ldi %3,0x0f\" CR_TAB\n \t\t      \"and %A0,%3\"      CR_TAB\n-\t\t      AS2 (eor,%A0,%B0) CR_TAB\n+\t\t      \"eor %A0,%B0\" CR_TAB\n \t\t      \"and %B0,%3\"      CR_TAB\n-\t\t      AS2 (eor,%A0,%B0));\n+\t\t      \"eor %A0,%B0\");\n \t    }\n \t  break;  /* 10 */\n \n \tcase 6:\n \t  if (optimize_size)\n \t    break;  /* scratch ? 5 : 6 */\n \t  *len = 9;\n-\t  return (AS1 (clr,__tmp_reg__) CR_TAB\n-\t\t  AS1 (lsl,%A0)         CR_TAB\n-\t\t  AS1 (rol,%B0)         CR_TAB\n-\t\t  AS1 (rol,__tmp_reg__) CR_TAB\n-\t\t  AS1 (lsl,%A0)         CR_TAB\n-\t\t  AS1 (rol,%B0)         CR_TAB\n-\t\t  AS1 (rol,__tmp_reg__) CR_TAB\n-\t\t  AS2 (mov,%A0,%B0)     CR_TAB\n-\t\t  AS2 (mov,%B0,__tmp_reg__));\n+\t  return (\"clr __tmp_reg__\" CR_TAB\n+\t\t  \"lsl %A0\"         CR_TAB\n+\t\t  \"rol %B0\"         CR_TAB\n+\t\t  \"rol __tmp_reg__\" CR_TAB\n+\t\t  \"lsl %A0\"         CR_TAB\n+\t\t  \"rol %B0\"         CR_TAB\n+\t\t  \"rol __tmp_reg__\" CR_TAB\n+\t\t  \"mov %A0,%B0\"     CR_TAB\n+\t\t  \"mov %B0,__tmp_reg__\");\n \n \tcase 7:\n \t  *len = 5;\n-\t  return (AS1 (lsl,%A0)     CR_TAB\n-\t\t  AS2 (mov,%A0,%B0) CR_TAB\n-\t\t  AS1 (rol,%A0)     CR_TAB\n-\t\t  AS2 (sbc,%B0,%B0) CR_TAB\n-\t\t  AS1 (neg,%B0));\n+\t  return (\"lsl %A0\"     CR_TAB\n+\t\t  \"mov %A0,%B0\" CR_TAB\n+\t\t  \"rol %A0\"     CR_TAB\n+\t\t  \"sbc %B0,%B0\" CR_TAB\n+\t\t  \"neg %B0\");\n \n \tcase 8:\n-\t  return *len = 2, (AS2 (mov,%A0,%B1) CR_TAB\n-\t\t\t    AS1 (clr,%B0));\n+\t  return *len = 2, (\"mov %A0,%B1\" CR_TAB\n+\t\t\t    \"clr %B0\");\n \n \tcase 9:\n \t  *len = 3;\n-\t  return (AS2 (mov,%A0,%B0) CR_TAB\n-\t\t  AS1 (clr,%B0)     CR_TAB\n-\t\t  AS1 (lsr,%A0));\n+\t  return (\"mov %A0,%B0\" CR_TAB\n+\t\t  \"clr %B0\"     CR_TAB\n+\t\t  \"lsr %A0\");\n \n \tcase 10:\n \t  *len = 4;\n-\t  return (AS2 (mov,%A0,%B0) CR_TAB\n-\t\t  AS1 (clr,%B0)     CR_TAB\n-\t\t  AS1 (lsr,%A0)     CR_TAB\n-\t\t  AS1 (lsr,%A0));\n+\t  return (\"mov %A0,%B0\" CR_TAB\n+\t\t  \"clr %B0\"     CR_TAB\n+\t\t  \"lsr %A0\"     CR_TAB\n+\t\t  \"lsr %A0\");\n \n \tcase 11:\n \t  *len = 5;\n-\t  return (AS2 (mov,%A0,%B0) CR_TAB\n-\t\t  AS1 (clr,%B0)     CR_TAB\n-\t\t  AS1 (lsr,%A0)     CR_TAB\n-\t\t  AS1 (lsr,%A0)     CR_TAB\n-\t\t  AS1 (lsr,%A0));\n+\t  return (\"mov %A0,%B0\" CR_TAB\n+\t\t  \"clr %B0\"     CR_TAB\n+\t\t  \"lsr %A0\"     CR_TAB\n+\t\t  \"lsr %A0\"     CR_TAB\n+\t\t  \"lsr %A0\");\n \n \tcase 12:\n \t  if (ldi_ok)\n \t    {\n \t      *len = 4;\n-\t      return (AS2 (mov,%A0,%B0) CR_TAB\n-\t\t      AS1 (clr,%B0)     CR_TAB\n-\t\t      AS1 (swap,%A0)    CR_TAB\n-\t\t      AS2 (andi,%A0,0x0f));\n+\t      return (\"mov %A0,%B0\" CR_TAB\n+\t\t      \"clr %B0\"     CR_TAB\n+\t\t      \"swap %A0\"    CR_TAB\n+\t\t      \"andi %A0,0x0f\");\n \t    }\n \t  if (scratch)\n \t    {\n \t      *len = 5;\n-\t      return (AS2 (mov,%A0,%B0) CR_TAB\n-\t\t      AS1 (clr,%B0)     CR_TAB\n-\t\t      AS1 (swap,%A0)    CR_TAB\n-\t\t      AS2 (ldi,%3,0x0f) CR_TAB\n+\t      return (\"mov %A0,%B0\" CR_TAB\n+\t\t      \"clr %B0\"     CR_TAB\n+\t\t      \"swap %A0\"    CR_TAB\n+\t\t      \"ldi %3,0x0f\" CR_TAB\n \t\t      \"and %A0,%3\");\n \t    }\n \t  *len = 6;\n-\t  return (AS2 (mov,%A0,%B0) CR_TAB\n-\t\t  AS1 (clr,%B0)     CR_TAB\n-\t\t  AS1 (lsr,%A0)     CR_TAB\n-\t\t  AS1 (lsr,%A0)     CR_TAB\n-\t\t  AS1 (lsr,%A0)     CR_TAB\n-\t\t  AS1 (lsr,%A0));\n+\t  return (\"mov %A0,%B0\" CR_TAB\n+\t\t  \"clr %B0\"     CR_TAB\n+\t\t  \"lsr %A0\"     CR_TAB\n+\t\t  \"lsr %A0\"     CR_TAB\n+\t\t  \"lsr %A0\"     CR_TAB\n+\t\t  \"lsr %A0\");\n \n \tcase 13:\n \t  if (ldi_ok)\n \t    {\n \t      *len = 5;\n-\t      return (AS2 (mov,%A0,%B0) CR_TAB\n-\t\t      AS1 (clr,%B0)     CR_TAB\n-\t\t      AS1 (swap,%A0)    CR_TAB\n-\t\t      AS1 (lsr,%A0)     CR_TAB\n-\t\t      AS2 (andi,%A0,0x07));\n+\t      return (\"mov %A0,%B0\" CR_TAB\n+\t\t      \"clr %B0\"     CR_TAB\n+\t\t      \"swap %A0\"    CR_TAB\n+\t\t      \"lsr %A0\"     CR_TAB\n+\t\t      \"andi %A0,0x07\");\n \t    }\n \t  if (AVR_HAVE_MUL && scratch)\n \t    {\n \t      *len = 5;\n-\t      return (AS2 (ldi,%3,0x08) CR_TAB\n-\t\t      AS2 (mul,%B0,%3)  CR_TAB\n-\t\t      AS2 (mov,%A0,r1)  CR_TAB\n-\t\t      AS1 (clr,%B0)     CR_TAB\n-\t\t      AS1 (clr,__zero_reg__));\n+\t      return (\"ldi %3,0x08\" CR_TAB\n+\t\t      \"mul %B0,%3\"  CR_TAB\n+\t\t      \"mov %A0,r1\"  CR_TAB\n+\t\t      \"clr %B0\"     CR_TAB\n+\t\t      \"clr __zero_reg__\");\n \t    }\n \t  if (optimize_size && scratch)\n \t    break;  /* 5 */\n \t  if (scratch)\n \t    {\n \t      *len = 6;\n-\t      return (AS2 (mov,%A0,%B0) CR_TAB\n-\t\t      AS1 (clr,%B0)     CR_TAB\n-\t\t      AS1 (swap,%A0)    CR_TAB\n-\t\t      AS1 (lsr,%A0)     CR_TAB\n-\t\t      AS2 (ldi,%3,0x07) CR_TAB\n+\t      return (\"mov %A0,%B0\" CR_TAB\n+\t\t      \"clr %B0\"     CR_TAB\n+\t\t      \"swap %A0\"    CR_TAB\n+\t\t      \"lsr %A0\"     CR_TAB\n+\t\t      \"ldi %3,0x07\" CR_TAB\n \t\t      \"and %A0,%3\");\n \t    }\n \t  if (AVR_HAVE_MUL)\n \t    {\n \t      *len = 6;\n \t      return (\"set\"            CR_TAB\n-\t\t      AS2 (bld,r1,3)   CR_TAB\n-\t\t      AS2 (mul,%B0,r1) CR_TAB\n-\t\t      AS2 (mov,%A0,r1) CR_TAB\n-\t\t      AS1 (clr,%B0)    CR_TAB\n-\t\t      AS1 (clr,__zero_reg__));\n+\t\t      \"bld r1,3\"   CR_TAB\n+\t\t      \"mul %B0,r1\" CR_TAB\n+\t\t      \"mov %A0,r1\" CR_TAB\n+\t\t      \"clr %B0\"    CR_TAB\n+\t\t      \"clr __zero_reg__\");\n \t    }\n \t  *len = 7;\n-\t  return (AS2 (mov,%A0,%B0) CR_TAB\n-\t\t  AS1 (clr,%B0)     CR_TAB\n-\t\t  AS1 (lsr,%A0)     CR_TAB\n-\t\t  AS1 (lsr,%A0)     CR_TAB\n-\t\t  AS1 (lsr,%A0)     CR_TAB\n-\t\t  AS1 (lsr,%A0)     CR_TAB\n-\t\t  AS1 (lsr,%A0));\n+\t  return (\"mov %A0,%B0\" CR_TAB\n+\t\t  \"clr %B0\"     CR_TAB\n+\t\t  \"lsr %A0\"     CR_TAB\n+\t\t  \"lsr %A0\"     CR_TAB\n+\t\t  \"lsr %A0\"     CR_TAB\n+\t\t  \"lsr %A0\"     CR_TAB\n+\t\t  \"lsr %A0\");\n \n \tcase 14:\n \t  if (AVR_HAVE_MUL && ldi_ok)\n \t    {\n \t      *len = 5;\n-\t      return (AS2 (ldi,%A0,0x04) CR_TAB\n-\t\t      AS2 (mul,%B0,%A0)  CR_TAB\n-\t\t      AS2 (mov,%A0,r1)   CR_TAB\n-\t\t      AS1 (clr,%B0)      CR_TAB\n-\t\t      AS1 (clr,__zero_reg__));\n+\t      return (\"ldi %A0,0x04\" CR_TAB\n+\t\t      \"mul %B0,%A0\"  CR_TAB\n+\t\t      \"mov %A0,r1\"   CR_TAB\n+\t\t      \"clr %B0\"      CR_TAB\n+\t\t      \"clr __zero_reg__\");\n \t    }\n \t  if (AVR_HAVE_MUL && scratch)\n \t    {\n \t      *len = 5;\n-\t      return (AS2 (ldi,%3,0x04) CR_TAB\n-\t\t      AS2 (mul,%B0,%3)  CR_TAB\n-\t\t      AS2 (mov,%A0,r1)  CR_TAB\n-\t\t      AS1 (clr,%B0)     CR_TAB\n-\t\t      AS1 (clr,__zero_reg__));\n+\t      return (\"ldi %3,0x04\" CR_TAB\n+\t\t      \"mul %B0,%3\"  CR_TAB\n+\t\t      \"mov %A0,r1\"  CR_TAB\n+\t\t      \"clr %B0\"     CR_TAB\n+\t\t      \"clr __zero_reg__\");\n \t    }\n \t  if (optimize_size && ldi_ok)\n \t    {\n \t      *len = 5;\n-\t      return (AS2 (mov,%A0,%B0) CR_TAB\n-\t\t      AS2 (ldi,%B0,6) \"\\n1:\\t\"\n-\t\t      AS1 (lsr,%A0)     CR_TAB\n-\t\t      AS1 (dec,%B0)     CR_TAB\n-\t\t      AS1 (brne,1b));\n+\t      return (\"mov %A0,%B0\" CR_TAB\n+\t\t      \"ldi %B0,6\" \"\\n1:\\t\"\n+\t\t      \"lsr %A0\"     CR_TAB\n+\t\t      \"dec %B0\"     CR_TAB\n+\t\t      \"brne 1b\");\n \t    }\n \t  if (optimize_size && scratch)\n \t    break;  /* 5 */\n \t  *len = 6;\n-\t  return (AS1 (clr,%A0) CR_TAB\n-\t\t  AS1 (lsl,%B0) CR_TAB\n-\t\t  AS1 (rol,%A0) CR_TAB\n-\t\t  AS1 (lsl,%B0) CR_TAB\n-\t\t  AS1 (rol,%A0) CR_TAB\n-\t\t  AS1 (clr,%B0));\n+\t  return (\"clr %A0\" CR_TAB\n+\t\t  \"lsl %B0\" CR_TAB\n+\t\t  \"rol %A0\" CR_TAB\n+\t\t  \"lsl %B0\" CR_TAB\n+\t\t  \"rol %A0\" CR_TAB\n+\t\t  \"clr %B0\");\n \n \tcase 15:\n \t  *len = 4;\n-\t  return (AS1 (clr,%A0) CR_TAB\n-\t\t  AS1 (lsl,%B0) CR_TAB\n-\t\t  AS1 (rol,%A0) CR_TAB\n-\t\t  AS1 (clr,%B0));\n+\t  return (\"clr %A0\" CR_TAB\n+\t\t  \"lsl %B0\" CR_TAB\n+\t\t  \"rol %A0\" CR_TAB\n+\t\t  \"clr %B0\");\n \t}\n       len = t;\n     }\n-  out_shift_with_cnt ((AS1 (lsr,%B0) CR_TAB\n-\t\t       AS1 (ror,%A0)),\n-\t\t       insn, operands, len, 2);\n+  out_shift_with_cnt (\"lsr %B0\" CR_TAB\n+                      \"ror %A0\", insn, operands, len, 2);\n   return \"\";\n }\n \n@@ -5714,30 +5709,30 @@ lshrsi3_out (rtx insn, rtx operands[], int *len)\n \t    break;\n \n \t  if (AVR_HAVE_MOVW)\n-\t    return *len = 3, (AS1 (clr,%D0) CR_TAB\n-\t\t\t      AS1 (clr,%C0) CR_TAB\n-\t\t\t      AS2 (movw,%A0,%C0));\n+\t    return *len = 3, (\"clr %D0\" CR_TAB\n+\t\t\t      \"clr %C0\" CR_TAB\n+\t\t\t      \"movw %A0,%C0\");\n \t  *len = 4;\n-\t  return (AS1 (clr,%D0) CR_TAB\n-\t\t  AS1 (clr,%C0) CR_TAB\n-\t\t  AS1 (clr,%B0) CR_TAB\n-\t\t  AS1 (clr,%A0));\n+\t  return (\"clr %D0\" CR_TAB\n+\t\t  \"clr %C0\" CR_TAB\n+\t\t  \"clr %B0\" CR_TAB\n+\t\t  \"clr %A0\");\n \n \tcase 8:\n \t  {\n \t    int reg0 = true_regnum (operands[0]);\n \t    int reg1 = true_regnum (operands[1]);\n \t    *len = 4;\n \t    if (reg0 <= reg1)\n-\t      return (AS2 (mov,%A0,%B1) CR_TAB\n-\t\t      AS2 (mov,%B0,%C1) CR_TAB\n-\t\t      AS2 (mov,%C0,%D1) CR_TAB\n-\t\t      AS1 (clr,%D0));\n+\t      return (\"mov %A0,%B1\" CR_TAB\n+\t\t      \"mov %B0,%C1\" CR_TAB\n+\t\t      \"mov %C0,%D1\" CR_TAB\n+\t\t      \"clr %D0\");\n \t    else\n-\t      return (AS1 (clr,%D0)     CR_TAB\n-\t\t      AS2 (mov,%C0,%D1) CR_TAB\n-\t\t      AS2 (mov,%B0,%C1) CR_TAB\n-\t\t      AS2 (mov,%A0,%B1)); \n+\t      return (\"clr %D0\"     CR_TAB\n+\t\t      \"mov %C0,%D1\" CR_TAB\n+\t\t      \"mov %B0,%C1\" CR_TAB\n+\t\t      \"mov %A0,%B1\"); \n \t  }\n \t  \n \tcase 16:\n@@ -5746,41 +5741,40 @@ lshrsi3_out (rtx insn, rtx operands[], int *len)\n \t    int reg1 = true_regnum (operands[1]);\n \n \t    if (reg0 == reg1 + 2)\n-\t      return *len = 2, (AS1 (clr,%C0)     CR_TAB\n-\t\t\t\tAS1 (clr,%D0));\n+\t      return *len = 2, (\"clr %C0\"     CR_TAB\n+\t\t\t\t\"clr %D0\");\n \t    if (AVR_HAVE_MOVW)\n-\t      return *len = 3, (AS2 (movw,%A0,%C1) CR_TAB\n-\t\t\t\tAS1 (clr,%C0)      CR_TAB\n-\t\t\t\tAS1 (clr,%D0));\n+\t      return *len = 3, (\"movw %A0,%C1\" CR_TAB\n+\t\t\t\t\"clr %C0\"      CR_TAB\n+\t\t\t\t\"clr %D0\");\n \t    else\n-\t      return *len = 4, (AS2 (mov,%B0,%D1) CR_TAB\n-\t\t\t\tAS2 (mov,%A0,%C1) CR_TAB\n-\t\t\t\tAS1 (clr,%C0)     CR_TAB\n-\t\t\t\tAS1 (clr,%D0));\n+\t      return *len = 4, (\"mov %B0,%D1\" CR_TAB\n+\t\t\t\t\"mov %A0,%C1\" CR_TAB\n+\t\t\t\t\"clr %C0\"     CR_TAB\n+\t\t\t\t\"clr %D0\");\n \t  }\n \t  \n \tcase 24:\n-\t  return *len = 4, (AS2 (mov,%A0,%D1) CR_TAB\n-\t\t\t    AS1 (clr,%B0)     CR_TAB\n-\t\t\t    AS1 (clr,%C0)     CR_TAB\n-\t\t\t    AS1 (clr,%D0));\n+\t  return *len = 4, (\"mov %A0,%D1\" CR_TAB\n+\t\t\t    \"clr %B0\"     CR_TAB\n+\t\t\t    \"clr %C0\"     CR_TAB\n+\t\t\t    \"clr %D0\");\n \n \tcase 31:\n \t  *len = 6;\n-\t  return (AS1 (clr,%A0)    CR_TAB\n-\t\t  AS2 (sbrc,%D0,7) CR_TAB\n-\t\t  AS1 (inc,%A0)    CR_TAB\n-\t\t  AS1 (clr,%B0)    CR_TAB\n-\t\t  AS1 (clr,%C0)    CR_TAB\n-\t\t  AS1 (clr,%D0));\n+\t  return (\"clr %A0\"    CR_TAB\n+\t\t  \"sbrc %D0,7\" CR_TAB\n+\t\t  \"inc %A0\"    CR_TAB\n+\t\t  \"clr %B0\"    CR_TAB\n+\t\t  \"clr %C0\"    CR_TAB\n+\t\t  \"clr %D0\");\n \t}\n       len = t;\n     }\n-  out_shift_with_cnt ((AS1 (lsr,%D0) CR_TAB\n-\t\t       AS1 (ror,%C0) CR_TAB\n-\t\t       AS1 (ror,%B0) CR_TAB\n-\t\t       AS1 (ror,%A0)),\n-\t\t      insn, operands, len, 4);\n+  out_shift_with_cnt (\"lsr %D0\" CR_TAB\n+                      \"ror %C0\" CR_TAB\n+                      \"ror %B0\" CR_TAB\n+                      \"ror %A0\", insn, operands, len, 4);\n   return \"\";\n }\n "}, {"sha": "7d1e327f95c71bc1d1455e595b1e195c7eb81786", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2453253e725d72661385827a0d1e67b31f31c6a/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2453253e725d72661385827a0d1e67b31f31c6a/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=c2453253e725d72661385827a0d1e67b31f31c6a", "patch": "@@ -615,22 +615,6 @@ mmcu=*:-mmcu=%*}\"\n #define TEST_HARD_REG_CLASS(CLASS, REGNO) \\\n   TEST_HARD_REG_BIT (reg_class_contents[ (int) (CLASS)], REGNO)\n \n-/* Note that the other files fail to use these\n-   in some of the places where they should.  */\n-\n-#if defined(__STDC__) || defined(ALMOST_STDC)\n-#define AS2(a,b,c) #a \" \" #b \",\" #c\n-#define AS2C(b,c) \" \" #b \",\" #c\n-#define AS3(a,b,c,d) #a \" \" #b \",\" #c \",\" #d\n-#define AS1(a,b) #a \" \" #b\n-#else\n-#define AS1(a,b) \"a\tb\"\n-#define AS2(a,b,c) \"a\tb,c\"\n-#define AS2C(b,c) \" b,c\"\n-#define AS3(a,b,c,d) \"a\tb,c,d\"\n-#endif\n-#define OUT_AS1(a,b) output_asm_insn (AS1(a,b), operands)\n-#define OUT_AS2(a,b,c) output_asm_insn (AS2(a,b,c), operands)\n #define CR_TAB \"\\n\\t\"\n \n #define DWARF2_ADDR_SIZE 4"}]}