{"sha": "1e69bc810272f289e367570cf89d8c72af6124e4", "node_id": "C_kwDOANBUbNoAKDFlNjliYzgxMDI3MmYyODllMzY3NTcwY2Y4OWQ4YzcyYWY2MTI0ZTQ", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-03-29T01:21:21Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-05-11T07:35:06Z"}, "message": "Optimize movzwl + vmovd/vmovq to vmovw.\n\nSimilarly optimize movl + vmovq to vmovd.\n\ngcc/ChangeLog:\n\n\tPR target/104915\n\t* config/i386/sse.md (*vec_set<mode>_0_zero_extendhi): New\n\tpre_reload define_insn_and_split.\n\t(*vec_setv2di_0_zero_extendhi_1): Ditto.\n\t(*vec_set<mode>_0_zero_extendsi): Ditto.\n\t(*vec_setv2di_0_zero_extendsi_1): Ditto.\n\t(ssewvecmode): New mode attr.\n\t(ssewvecmodelower): Ditto.\n\t(ssepackmodelower): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr104915-vmovd.c: New test.\n\t* gcc.target/i386/pr104915-vmovw.c: New test.", "tree": {"sha": "59e486899b81e822cd601a776f59172cad6c3885", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59e486899b81e822cd601a776f59172cad6c3885"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e69bc810272f289e367570cf89d8c72af6124e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e69bc810272f289e367570cf89d8c72af6124e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e69bc810272f289e367570cf89d8c72af6124e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e69bc810272f289e367570cf89d8c72af6124e4/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55aa130ef112c6f2c8ef85c218455464c6b29d60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55aa130ef112c6f2c8ef85c218455464c6b29d60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55aa130ef112c6f2c8ef85c218455464c6b29d60"}], "stats": {"total": 164, "additions": 164, "deletions": 0}, "files": [{"sha": "a63df0d0b1f5e4399b041ba4a2718f552ccf4870", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e69bc810272f289e367570cf89d8c72af6124e4/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e69bc810272f289e367570cf89d8c72af6124e4/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=1e69bc810272f289e367570cf89d8c72af6124e4", "patch": "@@ -985,6 +985,15 @@\n    (V32HI \"V32HI\") (V64QI \"V64QI\")\n    (V32QI \"V32QI\") (V16QI \"V16QI\")])\n \n+;; Mapping of vector modes to an V*HImode of the same size\n+(define_mode_attr ssewvecmode\n+  [(V8DI \"V32HI\") (V4DI \"V16HI\") (V2DI \"V8HI\")\n+   (V16SI \"V32HI\") (V8SI \"V16HI\") (V4SI \"V8HI\")])\n+\n+(define_mode_attr ssewvecmodelower\n+  [(V8DI \"v32hi\") (V4DI \"v16hi\") (V2DI \"v8hi\")\n+   (V16SI \"v32hi\") (V8SI \"v16hi\") (V4SI \"v8hi\")])\n+\n (define_mode_attr sseintvecmode2\n   [(V8DF \"XI\") (V4DF \"OI\") (V2DF \"TI\")\n    (V8SF \"OI\") (V4SF \"TI\")\n@@ -1194,6 +1203,11 @@\n    (V16HI \"V32QI\") (V8SI \"V16HI\") (V4DI \"V8SI\")\n    (V32HI \"V64QI\") (V16SI \"V32HI\") (V8DI \"V16SI\")])\n \n+(define_mode_attr ssepackmodelower\n+  [(V8HI \"v16qi\") (V4SI \"v8hi\") (V2DI \"v4si\")\n+   (V16HI \"v32qi\") (V8SI \"v16hi\") (V4DI \"v8si\")\n+   (V32HI \"v64qi\") (V16SI \"v32hi\") (V8DI \"v16si\")])\n+\n ;; Mapping of the max integer size for xop rotate immediate constraint\n (define_mode_attr sserotatemax\n   [(V16QI \"7\") (V8HI \"15\") (V4SI \"31\") (V2DI \"63\")])\n@@ -10681,6 +10695,46 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"HF\")])\n \n+(define_insn_and_split \"*vec_set<mode>_0_zero_extendhi\"\n+  [(set (match_operand:VI48_AVX512F 0 \"register_operand\")\n+\t(vec_merge:VI48_AVX512F\n+\t (vec_duplicate:VI48_AVX512F\n+\t  (zero_extend:<ssescalarmode>\n+\t    (match_operand:HI 1 \"nonimmediate_operand\")))\n+\t (match_operand:VI48_AVX512F 2 \"const0_operand\")\n+\t (const_int 1)))]\n+  \"TARGET_AVX512FP16 && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n+{\n+  rtx dest = gen_reg_rtx (<ssewvecmode>mode);\n+  emit_insn (gen_vec_set<ssewvecmodelower>_0 (dest,\n+\t\t\t\t\t      CONST0_RTX (<ssewvecmode>mode),\n+\t\t\t\t\t      operands[1]));\n+  emit_move_insn (operands[0],\n+\t\t  lowpart_subreg (<MODE>mode, dest, <ssewvecmode>mode));\n+  DONE;\n+})\n+\n+(define_insn_and_split \"*vec_setv2di_0_zero_extendhi_1\"\n+  [(set (match_operand:V2DI 0 \"register_operand\")\n+\t(vec_concat:V2DI\n+\t  (zero_extend:DI\n+\t    (match_operand:HI 1 \"nonimmediate_operand\"))\n+\t  (const_int 0)))]\n+  \"TARGET_AVX512FP16 && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n+{\n+  rtx dest = gen_reg_rtx (V8HImode);\n+  emit_insn (gen_vec_setv8hi_0 (dest, CONST0_RTX (V8HImode), operands[1]));\n+  emit_move_insn (operands[0],\n+\t\t  lowpart_subreg (V2DImode, dest, V8HImode));\n+  DONE;\n+})\n+\n (define_insn \"avx512fp16_movsh\"\n   [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n \t(vec_merge:V8HF\n@@ -10750,6 +10804,46 @@\n \t   ]\n \t   (symbol_ref \"true\")))])\n \n+(define_insn_and_split \"*vec_set<mode>_0_zero_extendsi\"\n+  [(set (match_operand:VI8 0 \"register_operand\")\n+\t(vec_merge:VI8\n+\t (vec_duplicate:VI8\n+\t  (zero_extend:DI\n+\t    (match_operand:SI 1 \"nonimmediate_operand\")))\n+\t (match_operand:VI8 2 \"const0_operand\")\n+\t (const_int 1)))]\n+  \"TARGET_SSE2 && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n+{\n+  rtx dest = gen_reg_rtx (<ssepackmode>mode);\n+  emit_insn (gen_vec_set<ssepackmodelower>_0 (dest,\n+\t\t\t\t\t      CONST0_RTX (<ssepackmode>mode),\n+\t\t\t\t\t      operands[1]));\n+  emit_move_insn (operands[0],\n+\t\t  lowpart_subreg (<MODE>mode, dest, <ssepackmode>mode));\n+  DONE;\n+})\n+\n+(define_insn_and_split \"*vec_setv2di_0_zero_extendsi_1\"\n+  [(set (match_operand:V2DI 0 \"register_operand\")\n+\t(vec_concat:V2DI\n+\t  (zero_extend:DI\n+\t    (match_operand:SI 1 \"nonimmediate_operand\"))\n+\t  (const_int 0)))]\n+  \"TARGET_SSE2 && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n+{\n+  rtx dest = gen_reg_rtx (V4SImode);\n+  emit_insn (gen_vec_setv4si_0 (dest, CONST0_RTX (V4SImode), operands[1]));\n+  emit_move_insn (operands[0],\n+\t\t  lowpart_subreg (V2DImode, dest, V4SImode));\n+  DONE;\n+})\n+\n (define_insn \"sse4_1_insertps\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=Yr,*x,v\")\n \t(unspec:V4SF [(match_operand:V4SF 2 \"nonimmediate_operand\" \"Yrm,*xm,vm\")"}, {"sha": "913ff8806f15e3273a6ea57fd49519c4b8389925", "filename": "gcc/testsuite/gcc.target/i386/pr104915-vmovd.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e69bc810272f289e367570cf89d8c72af6124e4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104915-vmovd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e69bc810272f289e367570cf89d8c72af6124e4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104915-vmovd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104915-vmovd.c?ref=1e69bc810272f289e367570cf89d8c72af6124e4", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times {(?n)vmovd[ \\t]+} 3 } } */\n+/* { dg-final { scan-assembler-not {(?n)movq[ \\t]+} } } */\n+\n+#include<immintrin.h>\n+\n+__m128i\n+foo1 (int* p)\n+{\n+  return _mm_set_epi64x (0, (unsigned int) ((*(__m32_u *)p)[0]));\n+}\n+\n+__m256i\n+foo3 (int* p)\n+{\n+  return _mm256_set_epi64x (0, 0, 0, (unsigned int) ((*(__m32_u *)p)[0]));\n+}\n+\n+__m512i\n+foo5 (int* p)\n+{\n+  return _mm512_set_epi64 (0, 0, 0, 0, 0, 0, 0,\n+\t\t\t   (unsigned int) ((*(__m32_u *)p)[0]));\n+}"}, {"sha": "ac47865d17a33070d876fae12d6f9f5909ae02c4", "filename": "gcc/testsuite/gcc.target/i386/pr104915-vmovw.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e69bc810272f289e367570cf89d8c72af6124e4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104915-vmovw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e69bc810272f289e367570cf89d8c72af6124e4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104915-vmovw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104915-vmovw.c?ref=1e69bc810272f289e367570cf89d8c72af6124e4", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times {(?n)vmovw[ \\t]+} 6 } } */\n+/* { dg-final { scan-assembler-not {(?n)mov[dq][ \\t]+} } } */\n+\n+#include<immintrin.h>\n+__m128i\n+foo (short* p)\n+{\n+  return _mm_set_epi32 (0, 0, 0, (unsigned short) ((*(__m16_u *)p)[0]));\n+}\n+\n+__m128i\n+foo1 (short* p)\n+{\n+  return _mm_set_epi64x (0, (unsigned short) ((*(__m16_u *)p)[0]));\n+}\n+\n+__m256i\n+foo2 (short* p)\n+{\n+  return _mm256_set_epi32 (0, 0, 0, 0, 0, 0, 0,\n+\t\t\t   (unsigned short) ((*(__m16_u *)p)[0]));\n+}\n+\n+__m256i\n+foo3 (short* p)\n+{\n+  return _mm256_set_epi64x (0, 0, 0, (unsigned short) ((*(__m16_u *)p)[0]));\n+}\n+\n+__m512i\n+foo4 (short* p)\n+{\n+  return _mm512_set_epi32 (0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t   0, 0, 0, 0, 0, 0, 0,\n+\t\t\t   (unsigned short) ((*(__m16_u *)p)[0]));\n+}\n+\n+__m512i\n+foo5 (short* p)\n+{\n+  return _mm512_set_epi64 (0, 0, 0, 0, 0, 0, 0,\n+\t\t\t   (unsigned short) ((*(__m16_u *)p)[0]));\n+}"}]}