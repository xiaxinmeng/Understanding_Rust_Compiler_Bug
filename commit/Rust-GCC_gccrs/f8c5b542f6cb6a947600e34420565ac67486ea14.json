{"sha": "f8c5b542f6cb6a947600e34420565ac67486ea14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhjNWI1NDJmNmNiNmE5NDc2MDBlMzQ0MjA1NjVhYzY3NDg2ZWExNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-25T17:31:23Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-25T17:47:39Z"}, "message": "libstdc++: Implement LWG 581 for std:ostream::flush()\n\nLWG 581 changed ostream::flush() to an unformatted output function for\nC++11, but it was never implemented in libstdc++.\n\nlibstdc++-v3/ChangeLog:\n\n\t* doc/xml/manual/intro.xml: Document LWG 581 change.\n\t* doc/html/manual/bugs.html: Regenerate.\n\t* include/bits/basic_ios.tcc: Whitespace.\n\t* include/bits/ostream.tcc (basic_ostream::flush()): Construct\n\tsentry.\n\t* testsuite/27_io/basic_ostream/flush/char/2.cc: Check\n\tadditional cases.\n\t* testsuite/27_io/basic_ostream/flush/char/exceptions_badbit_throw.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_ostream/flush/wchar_t/2.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/flush/wchar_t/exceptions_badbit_throw.cc:\n\tLikewise.", "tree": {"sha": "3ee5720da4b8c7603daaee139f3caa2fc378f43b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ee5720da4b8c7603daaee139f3caa2fc378f43b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8c5b542f6cb6a947600e34420565ac67486ea14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c5b542f6cb6a947600e34420565ac67486ea14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8c5b542f6cb6a947600e34420565ac67486ea14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c5b542f6cb6a947600e34420565ac67486ea14/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b6c65c754f2b2a78f5353219ec62817064e0d24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b6c65c754f2b2a78f5353219ec62817064e0d24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b6c65c754f2b2a78f5353219ec62817064e0d24"}], "stats": {"total": 174, "additions": 126, "deletions": 48}, "files": [{"sha": "7b49e4ab87cf491e2df2ec6bbe23a4c0e9c0f555", "filename": "libstdc++-v3/doc/html/manual/bugs.html", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c5b542f6cb6a947600e34420565ac67486ea14/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c5b542f6cb6a947600e34420565ac67486ea14/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html?ref=f8c5b542f6cb6a947600e34420565ac67486ea14", "patch": "@@ -303,6 +303,9 @@\n     </p></dd><dt><a id=\"manual.bugs.dr550\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#550\" target=\"_top\">550</a>:\n \t<span class=\"emphasis\"><em>What should the return type of pow(float,int) be?</em></span>\n     </span></dt><dd><p>In C++11 mode, remove the pow(float,int), etc., signatures.\n+    </p></dd><dt><a id=\"manual.bugs.dr581\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#581\" target=\"_top\">581</a>:\n+\t<span class=\"emphasis\"><em><code class=\"code\">flush()</code> not unformatted function</em></span>\n+    </span></dt><dd><p>Change it to be a unformatted output function (i.e. construct a sentry and catch exceptions).\n     </p></dd><dt><a id=\"manual.bugs.dr586\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#586\" target=\"_top\">586</a>:\n \t<span class=\"emphasis\"><em>string inserter not a formatted function</em></span>\n     </span></dt><dd><p>Change it to be a formatted output function (i.e. catch exceptions)."}, {"sha": "45762caa711da3ecf46f89aae320585814f56c60", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c5b542f6cb6a947600e34420565ac67486ea14/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c5b542f6cb6a947600e34420565ac67486ea14/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=f8c5b542f6cb6a947600e34420565ac67486ea14", "patch": "@@ -743,6 +743,12 @@ requirements of the license of GCC.\n     <listitem><para>In C++11 mode, remove the pow(float,int), etc., signatures.\n     </para></listitem></varlistentry>\n \n+    <varlistentry xml:id=\"manual.bugs.dr581\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#581\">581</link>:\n+\t<emphasis><code>flush()</code> not unformatted function</emphasis>\n+    </term>\n+    <listitem><para>Change it to be a unformatted output function (i.e. construct a sentry and catch exceptions).\n+    </para></listitem></varlistentry>\n+\n     <varlistentry xml:id=\"manual.bugs.dr586\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#586\">586</link>:\n \t<emphasis>string inserter not a formatted function</emphasis>\n     </term>"}, {"sha": "664a9f22759a1ebdc8d7812535862994f8b879d6", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c5b542f6cb6a947600e34420565ac67486ea14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c5b542f6cb6a947600e34420565ac67486ea14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=f8c5b542f6cb6a947600e34420565ac67486ea14", "patch": "@@ -43,7 +43,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       if (this->rdbuf())\n \t_M_streambuf_state = __state;\n       else\n-\t  _M_streambuf_state = __state | badbit;\n+\t_M_streambuf_state = __state | badbit;\n       if (this->exceptions() & this->rdstate())\n \t__throw_ios_failure(__N(\"basic_ios::clear\"));\n     }"}, {"sha": "d3220e8034ba1959ca60c6338f26696f5ffd4c1b", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c5b542f6cb6a947600e34420565ac67486ea14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c5b542f6cb6a947600e34420565ac67486ea14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=f8c5b542f6cb6a947600e34420565ac67486ea14", "patch": "@@ -213,21 +213,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 60. What is a formatted input function?\n       // basic_ostream::flush() is *not* an unformatted output function.\n-      ios_base::iostate __err = ios_base::goodbit;\n-      __try\n-\t{\n-\t  if (this->rdbuf() && this->rdbuf()->pubsync() == -1)\n-\t    __err |= ios_base::badbit;\n-\t}\n-      __catch(__cxxabiv1::__forced_unwind&)\n+      // 581. flush() not unformatted function\n+      // basic_ostream::flush() *is* an unformatted output function.\n+      if (__streambuf_type* __buf = this->rdbuf())\n \t{\n-\t  this->_M_setstate(ios_base::badbit);\t\t\n-\t  __throw_exception_again;\n+\t  sentry __cerb(*this);\n+\t  if (__cerb)\n+\t    {\n+\t      ios_base::iostate __err = ios_base::goodbit;\n+\t      __try\n+\t\t{\n+\t\t  if (this->rdbuf()->pubsync() == -1)\n+\t\t    __err |= ios_base::badbit;\n+\t\t}\n+\t      __catch(__cxxabiv1::__forced_unwind&)\n+\t\t{\n+\t\t  this->_M_setstate(ios_base::badbit);\n+\t\t  __throw_exception_again;\n+\t\t}\n+\t      __catch(...)\n+\t\t{ this->_M_setstate(ios_base::badbit); }\n+\t      if (__err)\n+\t\tthis->setstate(__err);\n+\t    }\n \t}\n-      __catch(...)\n-\t{ this->_M_setstate(ios_base::badbit); }\n-      if (__err)\n-\tthis->setstate(__err);\n       return *this;\n     }\n "}, {"sha": "96969debca711d56f4c7e17d51ac130c3735a274", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/flush/char/2.cc", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c5b542f6cb6a947600e34420565ac67486ea14/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c5b542f6cb6a947600e34420565ac67486ea14/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2F2.cc?ref=f8c5b542f6cb6a947600e34420565ac67486ea14", "patch": "@@ -22,42 +22,70 @@\n // _GLIBCXX_RESOLVE_LIB_DEFECTS\n // DR 60. What is a formatted input function?\n // basic_ostream::flush() does not behave as an unformatted output function.\n+// But wait  ...\n+// 581. flush() not unformatted function\n+// So now basic_ostream::flush() *is* an unformatted output function.\n \n #include <ostream>\n #include <testsuite_hooks.h>\n #include <testsuite_io.h>\n \n+void\n+test01()\n+{\n+  std::ostream os(0);\n+  VERIFY( os.bad() );\n+\n+  // Nothing should happen if os.rdbuf() is null. No sentry is constructed.\n+  os.flush();\n+  VERIFY( os.rdstate() == std::ios_base::badbit ); // no failbit\n+\n+  os.exceptions(std::ios_base::failbit);\n+  os.flush();\n+}\n+\n void test02()\n {\n   __gnu_test::sync_streambuf buf;\n   std::ostream os(&buf);\n-  \n+\n   __gnu_test::sync_streambuf buf_tie;\n   std::ostream os_tie(&buf_tie);\n \n-  // No sentry should be constructed so os.tie()->flush() should not be\n-  // called.\n+  // A sentry should be constructed so os.tie()->flush() should be called.\n   os.tie(&os_tie);\n-  \n+\n   os.flush();\n \n   VERIFY( os.good() );\n   VERIFY( buf.sync_called() );\n-  VERIFY( !buf_tie.sync_called() );\n+  VERIFY( buf_tie.sync_called() );\n+}\n \n-  // os.rdbuf()->pubsync() should be called even if !os.good().\n+void\n+test03()\n+{\n+  __gnu_test::sync_streambuf buf;\n+  std::ostream os(&buf);\n+\n+  __gnu_test::sync_streambuf buf_tie;\n+  std::ostream os_tie(&buf_tie);\n+\n+  os.tie(&os_tie);\n+\n+  // os.rdbuf()->pubsync() should not be called if !os.good().\n   os.setstate(std::ios_base::eofbit);\n \n   os.flush();\n \n-  VERIFY( os.rdstate() == std::ios_base::eofbit );\n-  VERIFY( buf.sync_called() );\n+  VERIFY( os.rdstate() & std::ios_base::eofbit );\n+  VERIFY( !buf.sync_called() );\n   VERIFY( !buf_tie.sync_called() );\n }\n \n int main()\n {\n+  test01();\n   test02();\n-  return 0;\n+  test03();\n }\n-"}, {"sha": "115b00478a76f8505589b4062bca1c0b4162e7ba", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/flush/char/exceptions_badbit_throw.cc", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c5b542f6cb6a947600e34420565ac67486ea14/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c5b542f6cb6a947600e34420565ac67486ea14/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2Fexceptions_badbit_throw.cc?ref=f8c5b542f6cb6a947600e34420565ac67486ea14", "patch": "@@ -28,21 +28,23 @@ void test01()\n {\n   __gnu_test::fail_streambuf bib;\n   ostream stream(&bib);\n+\n+  stream.flush(); // should catch exception and set badbit\n+  VERIFY( stream.rdstate() == ios_base::badbit );\n+\n+  stream.clear();\n   stream.exceptions(ios_base::badbit);\n \n   try\n     {\n-      stream.flush();\n+      stream.flush(); // should catch exception and set badbit and rethrow\n       VERIFY( false );\n     }\n-  catch (const __gnu_test::positioning_error&) \n+  catch (const __gnu_test::positioning_error&)\n     {\n-      // stream should set badbit and rethrow facet_error.\n-      VERIFY( stream.bad() );\n-      VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n-      VERIFY( !stream.eof() );\n+      VERIFY( stream.rdstate() == ios_base::badbit );\n     }\n-  catch (...) \n+  catch (...)\n     {\n       VERIFY( false );\n     }"}, {"sha": "4403fd3cdf5723231cc9604214fa9630bd963ad5", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/flush/wchar_t/2.cc", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c5b542f6cb6a947600e34420565ac67486ea14/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c5b542f6cb6a947600e34420565ac67486ea14/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fwchar_t%2F2.cc?ref=f8c5b542f6cb6a947600e34420565ac67486ea14", "patch": "@@ -20,42 +20,70 @@\n // _GLIBCXX_RESOLVE_LIB_DEFECTS\n // DR 60. What is a formatted input function?\n // basic_ostream::flush() does not behave as an unformatted output function.\n+// But wait  ...\n+// 581. flush() not unformatted function\n+// So now basic_ostream::flush() *is* an unformatted output function.\n \n #include <ostream>\n #include <testsuite_hooks.h>\n #include <testsuite_io.h>\n \n+void\n+test01()\n+{\n+  std::wostream os(0);\n+  VERIFY( os.bad() );\n+\n+  // Nothing should happen if os.rdbuf() is null. No sentry is constructed.\n+  os.flush();\n+  VERIFY( os.rdstate() == std::ios_base::badbit ); // no failbit\n+\n+  os.exceptions(std::ios_base::failbit);\n+  os.flush();\n+}\n+\n void test02()\n {\n   __gnu_test::sync_wstreambuf buf;\n   std::wostream os(&buf);\n-  \n+\n   __gnu_test::sync_wstreambuf buf_tie;\n   std::wostream os_tie(&buf_tie);\n \n-  // No sentry should be constructed so os.tie()->flush() should not be\n-  // called.\n+  // A sentry should be constructed so os.tie()->flush() should be called.\n   os.tie(&os_tie);\n-  \n+\n   os.flush();\n \n   VERIFY( os.good() );\n   VERIFY( buf.sync_called() );\n-  VERIFY( !buf_tie.sync_called() );\n+  VERIFY( buf_tie.sync_called() );\n+}\n \n-  // os.rdbuf()->pubsync() should be called even if !os.good().\n+void\n+test03()\n+{\n+  __gnu_test::sync_wstreambuf buf;\n+  std::wostream os(&buf);\n+\n+  __gnu_test::sync_wstreambuf buf_tie;\n+  std::wostream os_tie(&buf_tie);\n+\n+  os.tie(&os_tie);\n+\n+  // os.rdbuf()->pubsync() should not be called if !os.good().\n   os.setstate(std::ios_base::eofbit);\n \n   os.flush();\n \n-  VERIFY( os.rdstate() == std::ios_base::eofbit );\n-  VERIFY( buf.sync_called() );\n+  VERIFY( os.rdstate() & std::ios_base::eofbit );\n+  VERIFY( !buf.sync_called() );\n   VERIFY( !buf_tie.sync_called() );\n }\n \n int main()\n {\n+  test01();\n   test02();\n-  return 0;\n+  test03();\n }\n-"}, {"sha": "d88f385a6c3c31f3b43c6636308b60703c5ecf3f", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/flush/wchar_t/exceptions_badbit_throw.cc", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c5b542f6cb6a947600e34420565ac67486ea14/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fwchar_t%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c5b542f6cb6a947600e34420565ac67486ea14/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fwchar_t%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fwchar_t%2Fexceptions_badbit_throw.cc?ref=f8c5b542f6cb6a947600e34420565ac67486ea14", "patch": "@@ -28,21 +28,23 @@ void test01()\n {\n   __gnu_test::fail_wstreambuf bib;\n   wostream stream(&bib);\n+\n+  stream.flush(); // should catch exception and set badbit\n+  VERIFY( stream.rdstate() == ios_base::badbit );\n+\n+  stream.clear();\n   stream.exceptions(ios_base::badbit);\n \n   try\n     {\n-      stream.flush();\n+      stream.flush(); // should catch exception and set badbit and rethrow\n       VERIFY( false );\n     }\n-  catch (const __gnu_test::positioning_error&) \n+  catch (const __gnu_test::positioning_error&)\n     {\n-      // stream should set badbit and rethrow facet_error.\n-      VERIFY( stream.bad() );\n-      VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n-      VERIFY( !stream.eof() );\n+      VERIFY( stream.rdstate() == ios_base::badbit );\n     }\n-  catch (...) \n+  catch (...)\n     {\n       VERIFY( false );\n     }"}]}