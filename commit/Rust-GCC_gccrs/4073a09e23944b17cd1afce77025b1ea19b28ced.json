{"sha": "4073a09e23944b17cd1afce77025b1ea19b28ced", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA3M2EwOWUyMzk0NGIxN2NkMWFmY2U3NzAyNWIxZWExOWIyOGNlZA==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2020-12-10T14:43:59Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2021-03-16T12:57:34Z"}, "message": "IBM Z: Fix \"+fvm\" constraint with long doubles\n\nWhen a long double is passed to an asm statement with a \"+fvm\"\nconstraint, a LRA loop occurs.  This happens, because LRA chooses the\nwidest register class in this case (VEC_REGS), but the code generated\nby s390_md_asm_adjust() always wants FP_REGS.  Mismatching register\nclasses cause infinite reloading.\n\nFix by treating \"fv\" constraints as \"v\" in s390_md_asm_adjust().\n\ngcc/ChangeLog:\n\n\t* config/s390/s390.c (f_constraint_p): Treat \"fv\" constraints\n\tas \"v\".\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/s390/vector/long-double-asm-fprvrmem.c: New test.", "tree": {"sha": "5d9bb0a528e524c62e227edc69c9995b0c002832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d9bb0a528e524c62e227edc69c9995b0c002832"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4073a09e23944b17cd1afce77025b1ea19b28ced", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4073a09e23944b17cd1afce77025b1ea19b28ced", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4073a09e23944b17cd1afce77025b1ea19b28ced", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4073a09e23944b17cd1afce77025b1ea19b28ced/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "995a740cb01a0671a2082cb1ae13d0c356d4b568", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/995a740cb01a0671a2082cb1ae13d0c356d4b568", "html_url": "https://github.com/Rust-GCC/gccrs/commit/995a740cb01a0671a2082cb1ae13d0c356d4b568"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "f7b1c03561ec80f3470eda3787a358ad41ad0ac6", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4073a09e23944b17cd1afce77025b1ea19b28ced/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4073a09e23944b17cd1afce77025b1ea19b28ced/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=4073a09e23944b17cd1afce77025b1ea19b28ced", "patch": "@@ -16714,13 +16714,21 @@ s390_shift_truncation_mask (machine_mode mode)\n static bool\n f_constraint_p (const char *constraint)\n {\n+  bool seen_f_p = false;\n+  bool seen_v_p = false;\n+\n   for (size_t i = 0, c_len = strlen (constraint); i < c_len;\n        i += CONSTRAINT_LEN (constraint[i], constraint + i))\n     {\n       if (constraint[i] == 'f')\n-\treturn true;\n+\tseen_f_p = true;\n+      if (constraint[i] == 'v')\n+\tseen_v_p = true;\n     }\n-  return false;\n+\n+  /* Treat \"fv\" constraints as \"v\", because LRA will choose the widest register\n+   * class.  */\n+  return seen_f_p && !seen_v_p;\n }\n \n /* Implement TARGET_MD_ASM_ADJUST hook in order to fix up \"f\""}, {"sha": "f95656c5723f53a8c1ea7560f93b0a4204d82625", "filename": "gcc/testsuite/gcc.target/s390/vector/long-double-asm-fprvrmem.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4073a09e23944b17cd1afce77025b1ea19b28ced/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-fprvrmem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4073a09e23944b17cd1afce77025b1ea19b28ced/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-fprvrmem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Flong-double-asm-fprvrmem.c?ref=4073a09e23944b17cd1afce77025b1ea19b28ced", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z14 -mzarch\" } */\n+\n+long double\n+foo (long double x)\n+{\n+  x = x * x;\n+  asm(\"# %0\" : \"+fvm\"(x));\n+  x = x + x;\n+  return x;\n+}"}]}