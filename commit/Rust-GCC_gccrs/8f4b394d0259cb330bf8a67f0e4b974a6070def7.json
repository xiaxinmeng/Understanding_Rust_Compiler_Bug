{"sha": "8f4b394d0259cb330bf8a67f0e4b974a6070def7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY0YjM5NGQwMjU5Y2IzMzBiZjhhNjdmMGU0Yjk3NGE2MDcwZGVmNw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-05-15T22:04:00Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-05-15T22:04:00Z"}, "message": "call.c (build_op_delete_call): Avoid creating unnecessary types.\n\n\t* call.c (build_op_delete_call): Avoid creating unnecessary types.\n\t* class.c (instantiate_type): Remove tests for tf_no_attributes.\n\t* cp-tree.h (tsubst_flags_t): Remove tf_no_attributes.\n\t(COMPARE_NO_ATTRIBUTES): Remove.\n\t* typeck.c (comptypes): Do not check COMPARE_NO_ATTRIBUTES.\n\nFrom-SVN: r66843", "tree": {"sha": "0d9e4b59a31b6d72e9d9201c0c3581c63d88c9e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d9e4b59a31b6d72e9d9201c0c3581c63d88c9e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f4b394d0259cb330bf8a67f0e4b974a6070def7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f4b394d0259cb330bf8a67f0e4b974a6070def7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f4b394d0259cb330bf8a67f0e4b974a6070def7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f4b394d0259cb330bf8a67f0e4b974a6070def7/comments", "author": null, "committer": null, "parents": [{"sha": "7c942e1747c951401736c0cfc144bc307d728b6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c942e1747c951401736c0cfc144bc307d728b6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c942e1747c951401736c0cfc144bc307d728b6c"}], "stats": {"total": 69, "additions": 37, "deletions": 32}, "files": [{"sha": "8e8d3e9a76aad82a01f12f34ec9df729c5347c7d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4b394d0259cb330bf8a67f0e4b974a6070def7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4b394d0259cb330bf8a67f0e4b974a6070def7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8f4b394d0259cb330bf8a67f0e4b974a6070def7", "patch": "@@ -1,5 +1,11 @@\n 2003-05-15  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* call.c (build_op_delete_call): Avoid creating unnecessary types.\n+\t* class.c (instantiate_type): Remove tests for tf_no_attributes.\n+\t* cp-tree.h (tsubst_flags_t): Remove tf_no_attributes.\n+\t(COMPARE_NO_ATTRIBUTES): Remove.\n+\t* typeck.c (comptypes): Do not check COMPARE_NO_ATTRIBUTES.\n+\n \tPR c++/8385\n \t* semantics.c (finish_typeof): Refine type-dependency check.\n "}, {"sha": "1d40e4251072402f2952361ac5c2005f157221ee", "filename": "gcc/cp/call.c", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4b394d0259cb330bf8a67f0e4b974a6070def7/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4b394d0259cb330bf8a67f0e4b974a6070def7/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=8f4b394d0259cb330bf8a67f0e4b974a6070def7", "patch": "@@ -3953,7 +3953,7 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n                       int flags, tree placement)\n {\n   tree fn = NULL_TREE;\n-  tree fns, fnname, fntype, argtypes, args, type;\n+  tree fns, fnname, argtypes, args, type;\n   int pass;\n \n   if (addr == error_mark_node)\n@@ -4019,16 +4019,6 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n      the second pass we look for a two-argument delete.  */\n   for (pass = 0; pass < (placement ? 1 : 2); ++pass) \n     {\n-      if (pass == 0)\n-\targtypes = tree_cons (NULL_TREE, ptr_type_node, argtypes);\n-      else \n-\t/* Normal delete; now try to find a match including the size\n-\t   argument.  */\n-\targtypes = tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t      tree_cons (NULL_TREE, sizetype, \n-\t\t\t\t\t void_list_node));\n-      fntype = build_function_type (void_type_node, argtypes);\n-\n       /* Go through the `operator delete' functions looking for one\n \t with a matching type.  */\n       for (fn = BASELINK_P (fns) ? BASELINK_FUNCTIONS (fns) : fns; \n@@ -4037,13 +4027,30 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \t{\n \t  tree t;\n \n-\t  /* Exception specifications on the `delete' operator do not\n-\t     matter.  */\n-\t  t = build_exception_variant (TREE_TYPE (OVL_CURRENT (fn)),\n-\t\t\t\t       NULL_TREE);\n-\t  /* We also don't compare attributes.  We're really just\n-\t     trying to check the types of the first two parameters.  */\n-\t  if (comptypes (t, fntype, COMPARE_NO_ATTRIBUTES))\n+\t  /* The first argument must be \"void *\".  */\n+\t  t = TYPE_ARG_TYPES (TREE_TYPE (OVL_CURRENT (fn)));\n+\t  if (!same_type_p (TREE_VALUE (t), ptr_type_node))\n+\t    continue;\n+\t  t = TREE_CHAIN (t);\n+\t  /* On the first pass, check the rest of the arguments.  */\n+\t  if (pass == 0)\n+\t    {\n+\t      while (argtypes && t)\n+\t\t{\n+\t\t  if (!same_type_p (TREE_VALUE (argtypes),\n+\t\t\t\t    TREE_VALUE (t)))\n+\t\t    break;\n+\t\t  argtypes = TREE_CHAIN (argtypes);\n+\t\t  t = TREE_CHAIN (t);\n+\t\t}\n+\t      if (!argtypes && !t)\n+\t\tbreak;\n+\t    }\n+\t  /* On the second pass, the second argument must be\n+\t     \"size_t\".  */\n+\t  else if (pass == 1\n+\t\t   && same_type_p (TREE_VALUE (t), sizetype)\n+\t\t   && TREE_CHAIN (t) == void_list_node)\n \t    break;\n \t}\n "}, {"sha": "773577d23e7b265efda4b94cda15915151a0afb9", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4b394d0259cb330bf8a67f0e4b974a6070def7/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4b394d0259cb330bf8a67f0e4b974a6070def7/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=8f4b394d0259cb330bf8a67f0e4b974a6070def7", "patch": "@@ -6017,8 +6017,6 @@ tree\n instantiate_type (tree lhstype, tree rhs, tsubst_flags_t flags)\n {\n   int complain = (flags & tf_error);\n-  int strict = (flags & tf_no_attributes)\n-               ? COMPARE_NO_ATTRIBUTES : COMPARE_STRICT;\n   int allow_ptrmem = flags & tf_ptrmem_ok;\n   \n   flags &= ~tf_ptrmem_ok;\n@@ -6032,7 +6030,7 @@ instantiate_type (tree lhstype, tree rhs, tsubst_flags_t flags)\n \n   if (TREE_TYPE (rhs) != NULL_TREE && ! (type_unknown_p (rhs)))\n     {\n-      if (comptypes (lhstype, TREE_TYPE (rhs), strict))\n+      if (same_type_p (lhstype, TREE_TYPE (rhs)))\n \treturn rhs;\n       if (flag_ms_extensions \n \t  && TYPE_PTRMEMFUNC_P (lhstype)"}, {"sha": "78568edec2bebed6de49d7428db0c7904ebe3304", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4b394d0259cb330bf8a67f0e4b974a6070def7/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4b394d0259cb330bf8a67f0e4b974a6070def7/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8f4b394d0259cb330bf8a67f0e4b974a6070def7", "patch": "@@ -3007,12 +3007,10 @@ typedef enum tsubst_flags_t {\n   tf_none = 0,               /* nothing special */\n   tf_error = 1 << 0,         /* give error messages  */\n   tf_warning = 1 << 1,       /* give warnings too  */\n-  tf_no_attributes = 1 << 2, /* ignore attributes on comparisons\n-\t\t\t\t(instantiate_type use) */\n-  tf_ignore_bad_quals = 1 << 3, /* ignore bad cvr qualifiers */\n-  tf_keep_type_decl = 1 << 4,\t/* retain typedef type decls\n+  tf_ignore_bad_quals = 1 << 2, /* ignore bad cvr qualifiers */\n+  tf_keep_type_decl = 1 << 3,\t/* retain typedef type decls\n \t\t\t\t   (make_typename_type use) */\n-  tf_ptrmem_ok = 1 << 5      /* pointers to member ok (internal\n+  tf_ptrmem_ok = 1 << 4      /* pointers to member ok (internal\n \t\t\t\tinstantiate_type use) */\n } tsubst_flags_t;\n \n@@ -3372,8 +3370,6 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, OP_FLAG, TYPENAME_FLAG };\n #define COMPARE_REDECLARATION 4 /* The comparsion is being done when\n \t\t\t\t   another declaration of an existing\n \t\t\t\t   entity is seen.  */\n-#define COMPARE_NO_ATTRIBUTES 8 /* The comparison should ignore\n-\t\t\t\t   extra-linguistic type attributes.  */\n \n /* Used with push_overloaded_decl.  */\n #define PUSH_GLOBAL          0  /* Push the DECL into namespace scope,"}, {"sha": "7a3c18a59f520470d0a9b3f5a513b84a5a635f65", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4b394d0259cb330bf8a67f0e4b974a6070def7/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4b394d0259cb330bf8a67f0e4b974a6070def7/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=8f4b394d0259cb330bf8a67f0e4b974a6070def7", "patch": "@@ -971,11 +971,9 @@ comptypes (t1, t2, strict)\n   if (TYPE_MAIN_VARIANT (t1) == TYPE_MAIN_VARIANT (t2))\n     return 1;\n \n-  if (strict & COMPARE_NO_ATTRIBUTES)\n-    attrval = 1;\n   /* 1 if no need for warning yet, 2 if warning cause has been seen.  */\n-  else if (! (attrval = (*targetm.comp_type_attributes) (t1, t2)))\n-     return 0;\n+  if (! (attrval = (*targetm.comp_type_attributes) (t1, t2)))\n+    return 0;\n \n   /* 1 if no need for warning yet, 2 if warning cause has been seen.  */\n   val = 0;"}]}