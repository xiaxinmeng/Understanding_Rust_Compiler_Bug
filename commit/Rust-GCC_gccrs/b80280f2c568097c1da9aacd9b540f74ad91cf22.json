{"sha": "b80280f2c568097c1da9aacd9b540f74ad91cf22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgwMjgwZjJjNTY4MDk3YzFkYTlhYWNkOWI1NDBmNzRhZDkxY2YyMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-03-18T16:10:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-03-18T16:10:24Z"}, "message": "tree-ssa-sccvn.c (visit_reference_op_load): If the lookup found an expression with constants, note that in the VN for the lhs.\n\n2008-03-18  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (visit_reference_op_load): If the lookup\n\tfound an expression with constants, note that in the VN for the lhs.\n\t* tree-ssa-pre.c (eliminate): Visit COND_EXPR statements and\n\tfold them to constants if possible.  Run cleanup_cfg if done so.\n\t(execute_pre): Return todo.\n\t(do_pre): Likewise.\n\t(execute_fre): Likewise.\n\t* tree-ssa-forwprop.c (can_propagate_from): Allow propagation\n\tof constants.\n\t(get_prop_source_stmt): Look through pointer conversions.\n\n\t* gcc.dg/tree-ssa/forwprop-4.c: New testcase.\n\t* gcc.dg/tree-ssa/ssa-fre-16.c: Likewise.\n\nFrom-SVN: r133315", "tree": {"sha": "1e20a972378312ce4158563ae53589c5b3dda789", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e20a972378312ce4158563ae53589c5b3dda789"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b80280f2c568097c1da9aacd9b540f74ad91cf22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b80280f2c568097c1da9aacd9b540f74ad91cf22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b80280f2c568097c1da9aacd9b540f74ad91cf22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b80280f2c568097c1da9aacd9b540f74ad91cf22/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2e28e797125a94c7587b599eba438015fa02e5fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e28e797125a94c7587b599eba438015fa02e5fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e28e797125a94c7587b599eba438015fa02e5fe"}], "stats": {"total": 142, "additions": 130, "deletions": 12}, "files": [{"sha": "add3e25ad86b821e1498bcdfd0e11ab3035270b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b80280f2c568097c1da9aacd9b540f74ad91cf22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b80280f2c568097c1da9aacd9b540f74ad91cf22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b80280f2c568097c1da9aacd9b540f74ad91cf22", "patch": "@@ -1,3 +1,16 @@\n+2008-03-18  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (visit_reference_op_load): If the lookup\n+\tfound an expression with constants, note that in the VN for the lhs.\n+\t* tree-ssa-pre.c (eliminate): Visit COND_EXPR statements and\n+\tfold them to constants if possible.  Run cleanup_cfg if done so.\n+\t(execute_pre): Return todo.\n+\t(do_pre): Likewise.\n+\t(execute_fre): Likewise.\n+\t* tree-ssa-forwprop.c (can_propagate_from): Allow propagation\n+\tof constants.\n+\t(get_prop_source_stmt): Look through pointer conversions.\n+\n 2008-03-18  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-pretty-print.c: Include predict.h."}, {"sha": "d9bca3944e0f01c262af76e510fb3e6e93a0021f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b80280f2c568097c1da9aacd9b540f74ad91cf22/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b80280f2c568097c1da9aacd9b540f74ad91cf22/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b80280f2c568097c1da9aacd9b540f74ad91cf22", "patch": "@@ -1,3 +1,8 @@\n+2008-03-18  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/forwprop-4.c: New testcase.\n+\t* gcc.dg/tree-ssa/ssa-fre-16.c: Likewise.\n+\n 2008-03-18  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/loop-19.c: Revert previous change."}, {"sha": "7eabd1a7bd8a7a97711bf1a0aadf593af3c6501f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b80280f2c568097c1da9aacd9b540f74ad91cf22/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b80280f2c568097c1da9aacd9b540f74ad91cf22/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-4.c?ref=b80280f2c568097c1da9aacd9b540f74ad91cf22", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-forwprop1\" } */\n+\n+/* We should be able to fold the comparison at least with the\n+   first forwprop pass, if not a ccp pass before.  */\n+\n+extern void link_error (void);\n+void foo()\n+{\n+  int i;\n+  char *p = (char *)&i;\n+  long *q = (long *)p;\n+  if (q == 0)\n+    link_error ();\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"link_error\" \"forwprop1\" } } */\n+/* { dg-final { cleanup-tree-dump \"forwprop1\" } } */"}, {"sha": "56d85e58e7f994a3e10052e114a03610862168fa", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-16.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b80280f2c568097c1da9aacd9b540f74ad91cf22/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b80280f2c568097c1da9aacd9b540f74ad91cf22/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-16.c?ref=b80280f2c568097c1da9aacd9b540f74ad91cf22", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre\" } */\n+\n+/* FRE should be able to combine i and j and perform simplification\n+   on the condition.  */\n+\n+extern void link_error (void);\n+int i;\n+int foo(int b, int c)\n+{\n+  i = b + 1;\n+  int j = i - 1;\n+  if (b != j)\n+    link_error ();\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"link_error\" \"fre\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "1766869d0c46e19e512d1b4207478347caf0f057", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b80280f2c568097c1da9aacd9b540f74ad91cf22/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b80280f2c568097c1da9aacd9b540f74ad91cf22/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=b80280f2c568097c1da9aacd9b540f74ad91cf22", "patch": "@@ -218,14 +218,28 @@ get_prop_source_stmt (tree name, bool single_use_only, bool *single_use_p)\n     /* If name is not a simple copy destination, we found it.  */\n     if (TREE_CODE (GIMPLE_STMT_OPERAND (def_stmt, 1)) != SSA_NAME)\n       {\n+\ttree rhs;\n+\n \tif (!single_use_only && single_use_p)\n \t  *single_use_p = single_use;\n \n-\treturn def_stmt;\n+\t/* We can look through pointer conversions in the search\n+\t   for a useful stmt for the comparison folding.  */\n+\trhs = GIMPLE_STMT_OPERAND (def_stmt, 1);\n+\tif ((TREE_CODE (rhs) == NOP_EXPR\n+\t     || TREE_CODE (rhs) == CONVERT_EXPR)\n+\t    && TREE_CODE (TREE_OPERAND (rhs, 0)) == SSA_NAME\n+\t    && POINTER_TYPE_P (TREE_TYPE (rhs))\n+\t    && POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (rhs, 0))))\n+\t  name = TREE_OPERAND (rhs, 0);\n+\telse\n+\t  return def_stmt;\n+      }\n+    else\n+      {\n+\t/* Continue searching the def of the copy source name.  */\n+\tname = GIMPLE_STMT_OPERAND (def_stmt, 1);\n       }\n-\n-    /* Continue searching the def of the copy source name.  */\n-    name = GIMPLE_STMT_OPERAND (def_stmt, 1);\n   } while (1);\n }\n \n@@ -245,6 +259,10 @@ can_propagate_from (tree def_stmt)\n   if (REFERENCE_CLASS_P (rhs))\n     return false;\n \n+  /* Constants can be always propagated.  */\n+  if (is_gimple_min_invariant (rhs))\n+    return true;\n+\n   /* We cannot propagate ssa names that occur in abnormal phi nodes.  */\n   switch (TREE_CODE_LENGTH (TREE_CODE (rhs)))\n     {"}, {"sha": "ad628a3191600bcf754f5291b543aff0da552bcc", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 48, "deletions": 8, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b80280f2c568097c1da9aacd9b540f74ad91cf22/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b80280f2c568097c1da9aacd9b540f74ad91cf22/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=b80280f2c568097c1da9aacd9b540f74ad91cf22", "patch": "@@ -3605,10 +3605,11 @@ do_SCCVN_insertion (tree stmt, tree ssa_vn)\n \n /* Eliminate fully redundant computations.  */\n \n-static void\n+static unsigned int\n eliminate (void)\n {\n   basic_block b;\n+  unsigned int todo = 0;\n \n   FOR_EACH_BB (b)\n     {\n@@ -3689,8 +3690,46 @@ eliminate (void)\n \t\t    }\n \t\t}\n \t    }\n+\t  /* Visit COND_EXPRs and fold the comparison with the\n+\t     available value-numbers.  */\n+\t  else if (TREE_CODE (stmt) == COND_EXPR\n+\t\t   && COMPARISON_CLASS_P (COND_EXPR_COND (stmt)))\n+\t    {\n+\t      tree cond = COND_EXPR_COND (stmt);\n+\t      tree op0 = TREE_OPERAND (cond, 0);\n+\t      tree op1 = TREE_OPERAND (cond, 1);\n+\t      tree result;\n+\n+\t      if (TREE_CODE (op0) == SSA_NAME)\n+\t\top0 = VN_INFO (op0)->valnum;\n+\t      if (TREE_CODE (op1) == SSA_NAME)\n+\t\top1 = VN_INFO (op1)->valnum;\n+\t      result = fold_binary (TREE_CODE (cond), TREE_TYPE (cond),\n+\t\t\t\t    op0, op1);\n+\t      if (result && TREE_CODE (result) == INTEGER_CST)\n+\t\t{\n+\t\t  COND_EXPR_COND (stmt) = result;\n+\t\t  update_stmt (stmt);\n+\t\t  todo = TODO_cleanup_cfg;\n+\t\t}\n+\t    }\n+\t  else if (TREE_CODE (stmt) == COND_EXPR\n+\t\t   && TREE_CODE (COND_EXPR_COND (stmt)) == SSA_NAME)\n+\t    {\n+\t      tree op = COND_EXPR_COND (stmt);\n+\t      op = VN_INFO (op)->valnum;\n+\t      if (TREE_CODE (op) == INTEGER_CST)\n+\t\t{\n+\t\t  COND_EXPR_COND (stmt) = integer_zerop (op)\n+\t\t    ? boolean_false_node : boolean_true_node;\n+\t\t  update_stmt (stmt);\n+\t\t  todo = TODO_cleanup_cfg;\n+\t\t}\n+\t    }\n \t}\n     }\n+\n+  return todo;\n }\n \n /* Borrow a bit of tree-ssa-dce.c for the moment.\n@@ -3931,9 +3970,10 @@ fini_pre (void)\n /* Main entry point to the SSA-PRE pass.  DO_FRE is true if the caller\n    only wants to do full redundancy elimination.  */\n \n-static void\n+static unsigned int\n execute_pre (bool do_fre)\n {\n+  unsigned int todo = 0;\n \n   do_partial_partial = optimize > 2;\n   init_pre (do_fre);\n@@ -3947,7 +3987,7 @@ execute_pre (bool do_fre)\n       if (!do_fre)\n \tremove_dead_inserted_code ();\n       fini_pre ();\n-      return;\n+      return 0;\n     }\n   switch_to_PRE_table ();\n   compute_avail ();\n@@ -3978,7 +4018,7 @@ execute_pre (bool do_fre)\n     }\n \n   /* Remove all the redundant expressions.  */\n-  eliminate ();\n+  todo |= eliminate ();\n \n   if (dump_file && (dump_flags & TDF_STATS))\n     {\n@@ -3999,15 +4039,16 @@ execute_pre (bool do_fre)\n     }\n \n   fini_pre ();\n+\n+  return todo;\n }\n \n /* Gate and execute functions for PRE.  */\n \n static unsigned int\n do_pre (void)\n {\n-  execute_pre (false);\n-  return TODO_rebuild_alias;\n+  return TODO_rebuild_alias | execute_pre (false);\n }\n \n static bool\n@@ -4041,8 +4082,7 @@ struct tree_opt_pass pass_pre =\n static unsigned int\n execute_fre (void)\n {\n-  execute_pre (true);\n-  return 0;\n+  return execute_pre (true);\n }\n \n static bool"}, {"sha": "b613b2ba21fbecaa765e5548208568404801b49b", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b80280f2c568097c1da9aacd9b540f74ad91cf22/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b80280f2c568097c1da9aacd9b540f74ad91cf22/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=b80280f2c568097c1da9aacd9b540f74ad91cf22", "patch": "@@ -1251,6 +1251,12 @@ visit_reference_op_load (tree lhs, tree op, tree stmt)\n   if (result)\n     {\n       changed = set_ssa_val_to (lhs, result);\n+      if (TREE_CODE (result) == SSA_NAME\n+\t  && VN_INFO (result)->has_constants)\n+\t{\n+\t  VN_INFO (lhs)->expr = VN_INFO (result)->expr;\n+\t  VN_INFO (lhs)->has_constants = true;\n+\t}\n     }\n   else\n     {"}]}