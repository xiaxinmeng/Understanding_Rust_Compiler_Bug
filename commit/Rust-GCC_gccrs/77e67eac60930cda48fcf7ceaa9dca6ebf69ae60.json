{"sha": "77e67eac60930cda48fcf7ceaa9dca6ebf69ae60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdlNjdlYWM2MDkzMGNkYTQ4ZmNmN2NlYWE5ZGNhNmViZjY5YWU2MA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-24T01:18:04Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-24T01:18:04Z"}, "message": "record_reg_classes): When an alternative requires a match...\n\nrecord_reg_classes): When an alternative requires a match, but we do\nit with a copy into a register, that alternative wins.\n\nFrom-SVN: r3862", "tree": {"sha": "2b8093135eccd70afe32761679d8b301c152e609", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b8093135eccd70afe32761679d8b301c152e609"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77e67eac60930cda48fcf7ceaa9dca6ebf69ae60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77e67eac60930cda48fcf7ceaa9dca6ebf69ae60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77e67eac60930cda48fcf7ceaa9dca6ebf69ae60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77e67eac60930cda48fcf7ceaa9dca6ebf69ae60/comments", "author": null, "committer": null, "parents": [{"sha": "6d44728adfc89930ea4ecb5defac6e10c4a78922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d44728adfc89930ea4ecb5defac6e10c4a78922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d44728adfc89930ea4ecb5defac6e10c4a78922"}], "stats": {"total": 16, "additions": 5, "deletions": 11}, "files": [{"sha": "5067210920847fef07222fbccf998dad01b395a8", "filename": "gcc/regclass.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77e67eac60930cda48fcf7ceaa9dca6ebf69ae60/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77e67eac60930cda48fcf7ceaa9dca6ebf69ae60/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=77e67eac60930cda48fcf7ceaa9dca6ebf69ae60", "patch": "@@ -957,18 +957,12 @@ record_reg_classes (n_alts, n_ops, ops, modes, constraints, insn)\n \t\t  if (rtx_equal_p (ops[j], op))\n \t\t    ;\n \n-\t\t  /* If we can't put the other operand into a register, this\n-\t\t     alternative can't be used.  */\n-\n-\t\t  else if (classes[j] == NO_REGS)\n-\t\t    alt_fail = 1;\n+\t\t  /* If we can put the other operand into a register, add to\n+\t\t     the cost of this alternative the cost to copy this\n+\t\t     operand to the register used for the other operand.  */\n \n-\t\t  /* Otherwise, add to the cost of this alternative the cost\n-\t\t     to copy this operand to the register used for the other\n-\t\t     operand.  */\n-\n-\t\t  else\n-\t\t    alt_cost += copy_cost (op, mode, classes[j], 1);\n+\t\t  if (classes[j] != NO_REGS)\n+\t\t    alt_cost += copy_cost (op, mode, classes[j], 1), win = 1;\n \t\t}\n \t      else if (GET_CODE (ops[j]) != REG\n \t\t       || REGNO (ops[j]) < FIRST_PSEUDO_REGISTER)"}]}