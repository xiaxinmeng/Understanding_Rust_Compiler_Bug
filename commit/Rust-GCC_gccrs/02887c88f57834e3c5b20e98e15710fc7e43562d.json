{"sha": "02887c88f57834e3c5b20e98e15710fc7e43562d", "node_id": "C_kwDOANBUbNoAKDAyODg3Yzg4ZjU3ODM0ZTNjNWIyMGU5OGUxNTcxMGZjN2U0MzU2MmQ", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-14T09:36:09Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-14T10:21:20Z"}, "message": "macros: Do not try and re-expand if depth has exceeded recursion limit\n\nWe need to limit the amount of times that macro get expanded recursively\nduring macro-expansion. This limits the amount of times an ASTFragment\ncan be visited by simply incrementing the depth when setting a fragment,\nand decreasing it when taking one. This way, recursive expansion which\nhappens at the expansion level (instead of the matching level) will\nstill get caught", "tree": {"sha": "7a0a4ed8a76d10db85fd6b6d3ee34d752095d1b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a0a4ed8a76d10db85fd6b6d3ee34d752095d1b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02887c88f57834e3c5b20e98e15710fc7e43562d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02887c88f57834e3c5b20e98e15710fc7e43562d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02887c88f57834e3c5b20e98e15710fc7e43562d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02887c88f57834e3c5b20e98e15710fc7e43562d/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41f402f0b19c7e4f19f8d4d65d15223d2752f302", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41f402f0b19c7e4f19f8d4d65d15223d2752f302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41f402f0b19c7e4f19f8d4d65d15223d2752f302"}], "stats": {"total": 71, "additions": 33, "deletions": 38}, "files": [{"sha": "255e9bac9fe21af1d0f800a52ee5185163eee886", "filename": "gcc/rust/expand/rust-attribute-visitor.cc", "status": "modified", "additions": 14, "deletions": 35, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02887c88f57834e3c5b20e98e15710fc7e43562d/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02887c88f57834e3c5b20e98e15710fc7e43562d/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc?ref=02887c88f57834e3c5b20e98e15710fc7e43562d", "patch": "@@ -315,7 +315,6 @@ AttrVisitor::visit (AST::MacroInvocation &macro_invoc)\n   // I don't think any macro token trees can be stripped in any way\n \n   // TODO: maybe have cfg! macro stripping behaviour here?\n-\n   if (macro_invoc.has_semicolon ())\n     expander.expand_invoc_semi (macro_invoc);\n   else\n@@ -532,23 +531,17 @@ AttrVisitor::visit (AST::ArithmeticOrLogicalExpr &expr)\n    * with outer expr */\n   auto &l_expr = expr.get_left_expr ();\n   l_expr->accept_vis (*this);\n-  auto l_fragment = expander.take_expanded_fragment ();\n+  auto l_fragment = expander.take_expanded_fragment (*this);\n   if (l_fragment.should_expand ())\n-    {\n-      l_fragment.accept_vis (*this);\n-      l_expr = l_fragment.take_expression_fragment ();\n-    }\n+    l_expr = l_fragment.take_expression_fragment ();\n \n   /* should syntactically not have outer attributes, though this may\n    * not have worked in practice */\n   auto &r_expr = expr.get_right_expr ();\n   r_expr->accept_vis (*this);\n-  auto r_fragment = expander.take_expanded_fragment ();\n+  auto r_fragment = expander.take_expanded_fragment (*this);\n   if (r_fragment.should_expand ())\n-    {\n-      r_fragment.accept_vis (*this);\n-      r_expr = r_fragment.take_expression_fragment ();\n-    }\n+    r_expr = r_fragment.take_expression_fragment ();\n \n   // ensure that they are not marked for strip\n   if (expr.get_left_expr ()->is_marked_for_strip ())\n@@ -666,23 +659,17 @@ AttrVisitor::visit (AST::CompoundAssignmentExpr &expr)\n    * with outer expr */\n   auto &l_expr = expr.get_left_expr ();\n   l_expr->accept_vis (*this);\n-  auto l_frag = expander.take_expanded_fragment ();\n+  auto l_frag = expander.take_expanded_fragment (*this);\n   if (l_frag.should_expand ())\n-    {\n-      l_frag.accept_vis (*this);\n-      l_expr = l_frag.take_expression_fragment ();\n-    }\n+    l_expr = l_frag.take_expression_fragment ();\n \n   /* should syntactically not have outer attributes, though this may\n    * not have worked in practice */\n   auto &r_expr = expr.get_right_expr ();\n   r_expr->accept_vis (*this);\n-  auto r_frag = expander.take_expanded_fragment ();\n+  auto r_frag = expander.take_expanded_fragment (*this);\n   if (r_frag.should_expand ())\n-    {\n-      r_frag.accept_vis (*this);\n-      r_expr = r_frag.take_expression_fragment ();\n-    }\n+    r_expr = r_frag.take_expression_fragment ();\n \n   // ensure that they are not marked for strip\n   if (expr.get_left_expr ()->is_marked_for_strip ())\n@@ -1033,10 +1020,9 @@ AttrVisitor::visit (AST::CallExpr &expr)\n \n       stmt->accept_vis (*this);\n \n-      auto fragment = expander.take_expanded_fragment ();\n+      auto fragment = expander.take_expanded_fragment (*this);\n       if (fragment.should_expand ())\n \t{\n-\t  fragment.accept_vis (*this);\n \t  // Remove the current expanded invocation\n \t  it = params.erase (it);\n \t  for (auto &node : fragment.get_nodes ())\n@@ -1157,10 +1143,9 @@ AttrVisitor::visit (AST::BlockExpr &expr)\n \n       stmt->accept_vis (*this);\n \n-      auto fragment = expander.take_expanded_fragment ();\n+      auto fragment = expander.take_expanded_fragment (*this);\n       if (fragment.should_expand ())\n \t{\n-\t  fragment.accept_vis (*this);\n \t  // Remove the current expanded invocation\n \t  it = stmts.erase (it);\n \t  for (auto &node : fragment.get_nodes ())\n@@ -1182,12 +1167,9 @@ AttrVisitor::visit (AST::BlockExpr &expr)\n       auto &tail_expr = expr.get_tail_expr ();\n \n       tail_expr->accept_vis (*this);\n-      auto fragment = expander.take_expanded_fragment ();\n+      auto fragment = expander.take_expanded_fragment (*this);\n       if (fragment.should_expand ())\n-\t{\n-\t  fragment.accept_vis (*this);\n-\t  tail_expr = fragment.take_expression_fragment ();\n-\t}\n+\ttail_expr = fragment.take_expression_fragment ();\n \n       if (tail_expr->is_marked_for_strip ())\n \texpr.strip_tail_expr ();\n@@ -3031,12 +3013,9 @@ AttrVisitor::visit (AST::LetStmt &stmt)\n \t\t       \"cannot strip expression in this position - outer \"\n \t\t       \"attributes not allowed\");\n \n-      auto fragment = expander.take_expanded_fragment ();\n+      auto fragment = expander.take_expanded_fragment (*this);\n       if (fragment.should_expand ())\n-\t{\n-\t  fragment.accept_vis (*this);\n-\t  init_expr = fragment.take_expression_fragment ();\n-\t}\n+\tinit_expr = fragment.take_expression_fragment ();\n     }\n }\n void"}, {"sha": "b5f22d3295b6550757418fa6593a91154dca7b09", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02887c88f57834e3c5b20e98e15710fc7e43562d/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02887c88f57834e3c5b20e98e15710fc7e43562d/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=02887c88f57834e3c5b20e98e15710fc7e43562d", "patch": "@@ -379,10 +379,9 @@ MacroExpander::expand_crate ()\n       // mark for stripping if required\n       item->accept_vis (attr_visitor);\n \n-      auto fragment = take_expanded_fragment ();\n+      auto fragment = take_expanded_fragment (attr_visitor);\n       if (fragment.should_expand ())\n \t{\n-\t  fragment.accept_vis (attr_visitor);\n \t  // Remove the current expanded invocation\n \t  it = items.erase (it);\n \t  for (auto &node : fragment.get_nodes ())"}, {"sha": "0d0282e111a276e8017a937b0ef49f54b85f9a88", "filename": "gcc/rust/expand/rust-macro-expand.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02887c88f57834e3c5b20e98e15710fc7e43562d/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02887c88f57834e3c5b20e98e15710fc7e43562d/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.h?ref=02887c88f57834e3c5b20e98e15710fc7e43562d", "patch": "@@ -287,11 +287,18 @@ struct MacroExpander\n     expanded_fragment = std::move (fragment);\n   }\n \n-  AST::ASTFragment take_expanded_fragment ()\n+  AST::ASTFragment take_expanded_fragment (AST::ASTVisitor &vis)\n   {\n     AST::ASTFragment old_fragment = std::move (expanded_fragment);\n     expanded_fragment = AST::ASTFragment::create_empty ();\n \n+    for (auto &node : old_fragment.get_nodes ())\n+      {\n+\texpansion_depth++;\n+\tnode.accept_vis (vis);\n+\texpansion_depth--;\n+      }\n+\n     return old_fragment;\n   }\n "}, {"sha": "743216529b781f1a6faef36ebf3a5d9d1be59666", "filename": "gcc/testsuite/rust/compile/macro17.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02887c88f57834e3c5b20e98e15710fc7e43562d/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro17.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02887c88f57834e3c5b20e98e15710fc7e43562d/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro17.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro17.rs?ref=02887c88f57834e3c5b20e98e15710fc7e43562d", "patch": "@@ -0,0 +1,10 @@\n+macro_rules! rep {\n+    ($a:literal) => { $a }; // { dg-error \"reached recursion limit\" }\n+    ($a:literal $(, $e:literal)*) => { // { dg-error \"reached recursion limit\" }\n+        $a + rep!(0 $(, $e)*) // { dg-error \"Failed to match\" }\n+    }\n+}\n+\n+fn main() -> i32 {\n+    rep!(1, 2)\n+}"}]}