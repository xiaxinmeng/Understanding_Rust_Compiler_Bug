{"sha": "559bba46cdd3141576614d9bb3928e26c299a0fe", "node_id": "C_kwDOANBUbNoAKDU1OWJiYTQ2Y2RkMzE0MTU3NjYxNGQ5YmIzOTI4ZTI2YzI5OWEwZmU", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-04-30T14:56:49Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-04-30T14:56:49Z"}, "message": "gengtype: remove \"tree_exp\" special attribute\n\nThe function comment for adjust_field_tree_exp says this attribute is\nfor handling expression trees whose operands may contain pointers to RTL\ninstead of to trees.  But ever since r0-59671-gac45df5dba5804, which\nfixed/removed the last two tree codes for which this was possible\n(WITH_CLEANUP_EXPR and GOTO_SUBROUTINE_EXPR), this special attribute is\nmostly a no-op.\n\nThis patch removes it and instead just annotates struct tree_exp\nwith the \"length\" attribute directly.  Not sure it makes a difference,\nbut I use %h instead of %0 in the attribute string to be consistent with\nthe other uses of the \"length\" attribute within tree-core.h.\n\nThis changes the code generated for TS_EXP handling in gt-cp-tree.h from:\n\n  case TS_EXP:\n    gt_ggc_m_9tree_node ((*x).generic.exp.typed.type);\n    switch ((int) (TREE_CODE ((tree) &(*x))))\n      {\n      default:\n\t{\n\t  size_t i3;\n\t  size_t l3 = (size_t)(TREE_OPERAND_LENGTH ((tree) &(*x)));\n\t  for (i3 = 0; i3 != l3; i3++) {\n\t    gt_ggc_m_9tree_node ((*x).generic.exp.operands[i3]);\n\t  }\n\t}\n\tbreak;\n      }\n    break;\n\nto:\n\n  case TS_EXP:\n    {\n      size_t l3 = (size_t)(TREE_OPERAND_LENGTH ((tree)&((*x).generic.exp)));\n      gt_ggc_m_9tree_node ((*x).generic.exp.typed.type);\n      {\n\tsize_t i3;\n\tfor (i3 = 0; i3 != l3; i3++) {\n\t  gt_ggc_m_9tree_node ((*x).generic.exp.operands[i3]);\n\t}\n      }\n    }\n\nwhich seems equivalent and simpler.\n\ngcc/ChangeLog:\n\n\t* gengtype.cc (adjust_field_tree_exp): Remove.\n\t(adjust_field_type): Don't handle the \"tree_exp\" special attribute.\n\t* tree-core.h (struct tree_exp): Remove \"special\" and \"desc\"\n\tattributes.  Add \"length\" attribute.", "tree": {"sha": "fb0cd5096e7fbf478a7259ab13d8b989ad4c65e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb0cd5096e7fbf478a7259ab13d8b989ad4c65e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/559bba46cdd3141576614d9bb3928e26c299a0fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/559bba46cdd3141576614d9bb3928e26c299a0fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/559bba46cdd3141576614d9bb3928e26c299a0fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/559bba46cdd3141576614d9bb3928e26c299a0fe/comments", "author": null, "committer": null, "parents": [{"sha": "0aa277bf0b4b794314ab3f11bab438d17b57465d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aa277bf0b4b794314ab3f11bab438d17b57465d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aa277bf0b4b794314ab3f11bab438d17b57465d"}], "stats": {"total": 39, "additions": 2, "deletions": 37}, "files": [{"sha": "793ebd7090697ed00279e8ca25d540478e2e58f0", "filename": "gcc/gengtype.cc", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/559bba46cdd3141576614d9bb3928e26c299a0fe/gcc%2Fgengtype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/559bba46cdd3141576614d9bb3928e26c299a0fe/gcc%2Fgengtype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.cc?ref=559bba46cdd3141576614d9bb3928e26c299a0fe", "patch": "@@ -511,7 +511,6 @@ pair_p typedefs = NULL;\n type_p structures = NULL;\n pair_p variables = NULL;\n \n-static type_p adjust_field_tree_exp (type_p t, options_p opt);\n static type_p adjust_field_rtx_def (type_p t, options_p opt);\n \n /* Define S as a typedef to T at POS.  */\n@@ -1384,36 +1383,6 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n \t\t\tnodot, NULL);\n }\n \n-/* Handle `special(\"tree_exp\")'.  This is a special case for\n-   field `operands' of struct tree_exp, which although it claims to contain\n-   pointers to trees, actually sometimes contains pointers to RTL too.\n-   Passed T, the old type of the field, and OPT its options.  Returns\n-   a new type for the field.  */\n-\n-static type_p\n-adjust_field_tree_exp (type_p t, options_p opt ATTRIBUTE_UNUSED)\n-{\n-  pair_p flds;\n-  options_p nodot;\n-\n-  if (t->kind != TYPE_ARRAY)\n-    {\n-      error_at_line (&lexer_line,\n-\t\t     \"special `tree_exp' must be applied to an array\");\n-      return &string_type;\n-    }\n-\n-  nodot = create_string_option (NULL, \"dot\", \"\");\n-\n-  flds = create_field (NULL, t, \"\");\n-  flds->opt = create_string_option (nodot, \"length\",\n-\t\t\t\t    \"TREE_OPERAND_LENGTH ((tree) &%0)\");\n-  flds->opt = create_string_option (flds->opt, \"default\", \"\");\n-\n-  return new_structure (\"tree_exp_subunion\", TYPE_UNION, &lexer_line, flds,\n-\t\t\tnodot, NULL);\n-}\n-\n /* Perform any special processing on a type T, about to become the type\n    of a field.  Return the appropriate type for the field.\n    At present:\n@@ -1447,9 +1416,7 @@ adjust_field_type (type_p t, options_p opt)\n \t     && opt->kind == OPTION_STRING)\n       {\n \tconst char *special_name = opt->info.string;\n-\tif (strcmp (special_name, \"tree_exp\") == 0)\n-\t  t = adjust_field_tree_exp (t, opt);\n-\telse if (strcmp (special_name, \"rtx_def\") == 0)\n+\tif (strcmp (special_name, \"rtx_def\") == 0)\n \t  t = adjust_field_rtx_def (t, opt);\n \telse\n \t  error_at_line (&lexer_line, \"unknown special `%s'\", special_name);"}, {"sha": "07e76e659e4393be8fdf0b4724f9bdeafdf01322", "filename": "gcc/tree-core.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/559bba46cdd3141576614d9bb3928e26c299a0fe/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/559bba46cdd3141576614d9bb3928e26c299a0fe/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=559bba46cdd3141576614d9bb3928e26c299a0fe", "patch": "@@ -1563,9 +1563,7 @@ enum omp_clause_linear_kind\n struct GTY(()) tree_exp {\n   struct tree_typed typed;\n   location_t locus;\n-  tree GTY ((special (\"tree_exp\"),\n-\t     desc (\"TREE_CODE ((tree) &%0)\")))\n-    operands[1];\n+  tree GTY ((length (\"TREE_OPERAND_LENGTH ((tree)&%h)\"))) operands[1];\n };\n \n /* Immediate use linking structure.  This structure is used for maintaining"}]}