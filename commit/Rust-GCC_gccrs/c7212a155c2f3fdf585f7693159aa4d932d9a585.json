{"sha": "c7212a155c2f3fdf585f7693159aa4d932d9a585", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzcyMTJhMTU1YzJmM2ZkZjU4NWY3NjkzMTU5YWE0ZDkzMmQ5YTU4NQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2016-10-25T08:26:59Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2016-10-25T08:26:59Z"}, "message": "re PR target/71676 ([avr] casesi won't handle switch values larger than 16 bits)\n\ngcc/\n\tPR target/71676\n\tPR target/71678\n\t* config/avr/avr.md (casesi): Rewrite avoiding subregs of SI.\ngcc/testsuite/\n\tPR target/71676\n\tPR target/71678\n\t* gcc.target/avr/pr71676-1.c: New test.\n\t* gcc.target/avr/pr71676-3.c: New test.\n\t* gcc.target/avr/pr71676.c: New test.\n\t* gcc.target/avr/pr71678.c: New test.\n\nCo-Authored-By: Pitchumani Sivanupandi <pitchumani.sivanupandi@microchip.com>\n\nFrom-SVN: r241503", "tree": {"sha": "7eebf074589f66cc31d2b6d320dca8f019c1ad2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7eebf074589f66cc31d2b6d320dca8f019c1ad2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7212a155c2f3fdf585f7693159aa4d932d9a585", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7212a155c2f3fdf585f7693159aa4d932d9a585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7212a155c2f3fdf585f7693159aa4d932d9a585", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7212a155c2f3fdf585f7693159aa4d932d9a585/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7330750cbfe318a5c686d386727cbeb40d5e9d25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7330750cbfe318a5c686d386727cbeb40d5e9d25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7330750cbfe318a5c686d386727cbeb40d5e9d25"}], "stats": {"total": 526, "additions": 510, "deletions": 16}, "files": [{"sha": "183efac17446e14b636a83081d1355e52202e6c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7212a155c2f3fdf585f7693159aa4d932d9a585/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7212a155c2f3fdf585f7693159aa4d932d9a585/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7212a155c2f3fdf585f7693159aa4d932d9a585", "patch": "@@ -1,3 +1,10 @@\n+2016-10-25  Georg-Johann Lay  <avr@gjlay.de>\n+\t    Pitchumani Sivanupandi <pitchumani.sivanupandi@microchip.com>\n+\n+\tPR target/71676\n+\tPR target/71678\n+\t* config/avr/avr.md (casesi): Rewrite avoiding subregs of SI.\n+\n 2016-10-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* dwarf2out.c (gen_subprogram_die): Add DW_AT_reference or"}, {"sha": "446ee402d79265dd61fb25dfcaddb9313cb93e09", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7212a155c2f3fdf585f7693159aa4d932d9a585/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7212a155c2f3fdf585f7693159aa4d932d9a585/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=c7212a155c2f3fdf585f7693159aa4d932d9a585", "patch": "@@ -5154,45 +5154,46 @@\n \n \n (define_expand \"casesi\"\n-  [(parallel [(set (match_dup 6)\n-                   (minus:HI (subreg:HI (match_operand:SI 0 \"register_operand\" \"\") 0)\n-                             (match_operand:HI 1 \"register_operand\" \"\")))\n+  [(parallel [(set (match_dup 5)\n+                   (plus:SI (match_operand:SI 0 \"register_operand\")\n+                            (match_operand:SI 1 \"const_int_operand\")))\n               (clobber (scratch:QI))])\n    (parallel [(set (cc0)\n-                   (compare (match_dup 6)\n-                            (match_operand:HI 2 \"register_operand\" \"\")))\n-              (clobber (match_scratch:QI 9 \"\"))])\n+                   (compare (match_dup 5)\n+                            (match_operand:SI 2 \"const_int_operand\")))\n+              (clobber (scratch:QI))])\n \n    (set (pc)\n         (if_then_else (gtu (cc0)\n                            (const_int 0))\n-                      (label_ref (match_operand 4 \"\" \"\"))\n+                      (label_ref (match_operand 4))\n                       (pc)))\n \n-   (set (match_dup 10)\n-        (match_dup 7))\n+   (set (match_dup 7)\n+        (match_dup 6))\n \n    (parallel [(set (pc)\n-                   (unspec:HI [(match_dup 10)] UNSPEC_INDEX_JMP))\n+                   (unspec:HI [(match_dup 7)] UNSPEC_INDEX_JMP))\n               (use (label_ref (match_dup 3)))\n-              (clobber (match_dup 10))\n+              (clobber (match_dup 7))\n               (clobber (match_dup 8))])]\n   \"\"\n   {\n-    operands[6] = gen_reg_rtx (HImode);\n+    operands[1] = simplify_unary_operation (NEG, SImode, operands[1], SImode);\n+    operands[5] = gen_reg_rtx (SImode);\n+    operands[6] = simplify_gen_subreg (HImode, operands[5], SImode, 0);\n \n     if (AVR_HAVE_EIJMP_EICALL)\n       {\n-        operands[7] = operands[6];\n+        operands[7] = gen_rtx_REG (HImode, REG_Z);\n         operands[8] = all_regs_rtx[24];\n-        operands[10] = gen_rtx_REG (HImode, REG_Z);\n       }\n     else\n       {\n-        operands[7] = gen_rtx_PLUS (HImode, operands[6],\n+        operands[6] = gen_rtx_PLUS (HImode, operands[6],\n                                     gen_rtx_LABEL_REF (VOIDmode, operands[3]));\n+        operands[7] = gen_reg_rtx (HImode);\n         operands[8] = const0_rtx;\n-        operands[10] = operands[6];\n       }\n   })\n "}, {"sha": "07cc777723f3486201b716bacbc95e570cafb2a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7212a155c2f3fdf585f7693159aa4d932d9a585/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7212a155c2f3fdf585f7693159aa4d932d9a585/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7212a155c2f3fdf585f7693159aa4d932d9a585", "patch": "@@ -1,3 +1,13 @@\n+2016-10-25  Georg-Johann Lay  <avr@gjlay.de>\n+\t    Pitchumani Sivanupandi <pitchumani.sivanupandi@microchip.com>\n+\n+\tPR target/71676\n+\tPR target/71678\n+\t* gcc.target/avr/pr71676-1.c: New test.\n+\t* gcc.target/avr/pr71676-3.c: New test.\n+\t* gcc.target/avr/pr71676.c: New test.\n+\t* gcc.target/avr/pr71678.c: New test.\n+\n 2016-10-24  Kugan Vivekanandarajah  <kuganvi@linaro.org>\n \n \t* gcc.target/aarch64/test_frame_common.h: Add noclone attribute"}, {"sha": "0d41a600905445f66ff0fd26ed3d77ce59ee13df", "filename": "gcc/testsuite/gcc.target/avr/pr71676-1.c", "status": "added", "additions": 347, "deletions": 0, "changes": 347, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7212a155c2f3fdf585f7693159aa4d932d9a585/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71676-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7212a155c2f3fdf585f7693159aa4d932d9a585/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71676-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71676-1.c?ref=c7212a155c2f3fdf585f7693159aa4d932d9a585", "patch": "@@ -0,0 +1,347 @@\n+/* { dg-do run } */\n+/* { dg-options \"-Os -Wno-overflow -fno-tree-switch-conversion\" } */\n+\n+#include \"exit-abort.h\"\n+volatile unsigned char y;\n+\n+unsigned char __attribute__((noinline,noclone))\n+foo1 (char x)\n+{\n+  switch (x)\n+    {\n+    case (char)0x11: y = 7; break;\n+    case (char)0x12: y = 4; break;\n+    case (char)0x13: y = 8; break;\n+    case (char)0x14: y = 21; break;\n+    case (char)0x15: y = 65; break;\n+    case (char)0x16: y = 27; break;\n+    case (char)0x17: y = 72; break;\n+    case (char)0x18: y = 39; break;\n+    default: y=0;\n+    }\n+  return y;\n+}\n+\n+unsigned char __attribute__((noinline,noclone))\n+foo2 (char x)\n+{\n+  switch (x)\n+    {\n+    case 0x01: y = 7; break;\n+    case 0x02: y = 4; break;\n+    case 0x03: y = 8; break;\n+    case 0x04: y = 21; break;\n+    case 0x05: y = 65; break;\n+    case 0x06: y = 27; break;\n+    case 0x07: y = 72; break;\n+    case 0x08: y = 39; break;\n+    default: y=0;\n+    }\n+  return y;\n+}\n+\n+unsigned char __attribute__((noinline,noclone))\n+foo3 (char x)\n+{\n+  switch (x)\n+    {\n+    case 0x1000001L: y = 7; break;\n+    case 0x1000002L: y = 4; break;\n+    case 0x1000003L: y = 8; break;\n+    case 0x1000004L: y = 21; break;\n+    case 0x1000005L: y = 65; break;\n+    case 0x1000006L: y = 27; break;\n+    case 0x1000007L: y = 72; break;\n+    case 0x1000008L: y = 39; break;\n+    default: y=0;\n+    }\n+  return y;\n+}\n+\n+unsigned char __attribute__((noinline,noclone))\n+foo4 (char x)\n+{\n+  switch (x)\n+    {\n+    case 0x100000001LL: y = 7; break;\n+    case 0x100000002LL: y = 4; break;\n+    case 0x100000003LL: y = 8; break;\n+    case 0x100000004LL: y = 21; break;\n+    case 0x100000005LL: y = 65; break;\n+    case 0x100000006LL: y = 27; break;\n+    case 0x100000007LL: y = 72; break;\n+    case 0x100000008LL: y = 39; break;\n+    default: y=0;\n+    }\n+  return y;\n+}\n+\n+unsigned char __attribute__((noinline,noclone))\n+foo5 (int x)\n+{\n+  switch (x)\n+    {\n+    case (char)0x11: y = 7; break;\n+    case (char)0x12: y = 4; break;\n+    case (char)0x13: y = 8; break;\n+    case (char)0x14: y = 21; break;\n+    case (char)0x15: y = 65; break;\n+    case (char)0x16: y = 27; break;\n+    case (char)0x17: y = 72; break;\n+    case (char)0x18: y = 39; break;\n+    default: y=0;\n+    }\n+  return y;\n+}\n+\n+unsigned char __attribute__((noinline,noclone))\n+foo6 (int x)\n+{\n+  switch (x)\n+    {\n+    case 0x101: y = 7; break;\n+    case 0x102: y = 4; break;\n+    case 0x103: y = 8; break;\n+    case 0x104: y = 21; break;\n+    case 0x105: y = 65; break;\n+    case 0x106: y = 27; break;\n+    case 0x107: y = 72; break;\n+    case 0x108: y = 39; break;\n+    default: y=0;\n+    }\n+  return y;\n+}\n+\n+unsigned char __attribute__((noinline,noclone))\n+foo7 (int x)\n+{\n+  switch (x)\n+    {\n+    case 0x1000001L: y = 7; break;\n+    case 0x1000002L: y = 4; break;\n+    case 0x1000003L: y = 8; break;\n+    case 0x1000004L: y = 21; break;\n+    case 0x1000005L: y = 65; break;\n+    case 0x1000006L: y = 27; break;\n+    case 0x1000007L: y = 72; break;\n+    case 0x1000008L: y = 39; break;\n+    default: y=0;\n+    }\n+  return y;\n+}\n+\n+unsigned char __attribute__((noinline,noclone))\n+foo8 (int x)\n+{\n+  switch (x)\n+    {\n+    case 0x100000001LL: y = 7; break;\n+    case 0x100000002LL: y = 4; break;\n+    case 0x100000003LL: y = 8; break;\n+    case 0x100000004LL: y = 21; break;\n+    case 0x100000005LL: y = 65; break;\n+    case 0x100000006LL: y = 27; break;\n+    case 0x100000007LL: y = 72; break;\n+    case 0x100000008LL: y = 39; break;\n+    default: y=0;\n+    }\n+  return y;\n+}\n+\n+unsigned char __attribute__((noinline,noclone))\n+foo9 (long x)\n+{\n+  switch (x)\n+    {\n+    case (char)0x11: y = 7; break;\n+    case (char)0x12: y = 4; break;\n+    case (char)0x13: y = 8; break;\n+    case (char)0x14: y = 21; break;\n+    case (char)0x15: y = 65; break;\n+    case (char)0x16: y = 27; break;\n+    case (char)0x17: y = 72; break;\n+    case (char)0x18: y = 39; break;\n+    default: y=0;\n+    }\n+  return y;\n+}\n+\n+unsigned char __attribute__((noinline,noclone))\n+foo10 (unsigned long x)\n+{\n+  switch (x)\n+    {\n+    case 0x100: y = 39; break;\n+    case 0x101: y = 7; break;\n+    case 0x102: y = 4; break;\n+    case 0x103: y = 8; break;\n+    case 0x104: y = 21; break;\n+    case 0x105: y = 65; break;\n+    case 0x106: y = 27; break;\n+    case 0x107: y = 72; break;\n+    default: y=0;\n+    }\n+  return y;\n+}\n+\n+unsigned char __attribute__((noinline,noclone))\n+foo11 (long x)\n+{\n+  switch (x)\n+    {\n+    case 0x1000001L: y = 7; break;\n+    case 0x1000002L: y = 4; break;\n+    case 0x1000003L: y = 8; break;\n+    case 0x1000004L: y = 21; break;\n+    case 0x1000005L: y = 65; break;\n+    case 0x1000006L: y = 27; break;\n+    case 0x1000007L: y = 72; break;\n+    case 0x1000008L: y = 39; break;\n+    default: y=0;\n+    }\n+  return y;\n+}\n+\n+unsigned char __attribute__((noinline,noclone))\n+foo12 (long x)\n+{\n+  switch (x)\n+    {\n+    case 0x100000001LL: y = 7; break;\n+    case 0x100000002LL: y = 4; break;\n+    case 0x100000003LL: y = 8; break;\n+    case 0x100000004LL: y = 21; break;\n+    case 0x100000005LL: y = 65; break;\n+    case 0x100000006LL: y = 27; break;\n+    case 0x100000007LL: y = 72; break;\n+    case 0x100000008LL: y = 39; break;\n+    default: y=0;\n+    }\n+  return y;\n+}\n+\n+unsigned char __attribute__((noinline,noclone))\n+foo13 (long long x)\n+{\n+  switch (x)\n+    {\n+    case (char)0x11: y = 7; break;\n+    case (char)0x12: y = 4; break;\n+    case (char)0x13: y = 8; break;\n+    case (char)0x14: y = 21; break;\n+    case (char)0x15: y = 65; break;\n+    case (char)0x16: y = 27; break;\n+    case (char)0x17: y = 72; break;\n+    case (char)0x18: y = 39; break;\n+    default: y=0;\n+    }\n+  return y;\n+}\n+\n+unsigned char __attribute__((noinline,noclone))\n+foo14 (long long x)\n+{\n+  switch (x)\n+    {\n+    case 0x101: y = 7; break;\n+    case 0x102: y = 4; break;\n+    case 0x103: y = 8; break;\n+    case 0x104: y = 21; break;\n+    case 0x105: y = 65; break;\n+    case 0x106: y = 27; break;\n+    case 0x107: y = 72; break;\n+    case 0x108: y = 39; break;\n+    default: y=0;\n+    }\n+  return y;\n+}\n+\n+unsigned char __attribute__((noinline,noclone))\n+foo15 (long long x)\n+{\n+  switch (x)\n+    {\n+    case 0x1000001L: y = 7; break;\n+    case 0x1000002L: y = 4; break;\n+    case 0x1000003L: y = 8; break;\n+    case 0x1000004L: y = 21; break;\n+    case 0x1000005L: y = 65; break;\n+    case 0x1000006L: y = 27; break;\n+    case 0x1000007L: y = 72; break;\n+    case 0x1000008L: y = 39; break;\n+    default: y=0;\n+    }\n+  return y;\n+}\n+\n+\n+unsigned char __attribute__((noinline,noclone))\n+foo16 (long long x)\n+{\n+  switch (x)\n+    {\n+    case 0x100000001LL: y = 7; break;\n+    case 0x100000002LL: y = 4; break;\n+    case 0x100000003LL: y = 8; break;\n+    case 0x100000004LL: y = 21; break;\n+    case 0x100000005LL: y = 65; break;\n+    case 0x100000006LL: y = 27; break;\n+    case 0x100000007LL: y = 72; break;\n+    case 0x100000008LL: y = 39; break;\n+    default: y=0;\n+    }\n+  return y;\n+}\n+\n+int main ()\n+{\n+  if (foo1 (0x13) != 8)\n+    abort();\n+\n+  if (foo2 (0x06) != 27)\n+    abort();\n+\n+  if (foo3 (0x02) != 4)\n+    abort();\n+\n+  if (foo4 (0x01) != 7)\n+    abort();\n+\n+  if (foo5 (0x15) != 65)\n+    abort();\n+\n+  if (foo6 (0x103) != 8)\n+    abort();\n+\n+  if (foo7 (0x04) != 21)\n+    abort();\n+\n+  if (foo8 (0x07) != 72)\n+    abort();\n+\n+  if (foo9 (0x10000011L) != 0)\n+    abort();\n+\n+  if (foo10 (0x1000105L) != 0)\n+    abort();\n+\n+  if (foo11 (0x1000008L) != 39)\n+    abort();\n+\n+  if (foo12 (0x1000004L) != 0)\n+    abort();\n+\n+  if (foo13 (0x109LL) != 0)\n+    abort();\n+\n+  if (foo14 (0x108LL) != 39)\n+    abort();\n+\n+  if (foo15 (0x1000001LL) != 7)\n+    abort();\n+\n+  if (foo16 (0x100000004LL) != 21)\n+    abort();\n+\n+  return 0;\n+}"}, {"sha": "6c10f04b964c5af53875101cebd627bf6a01bbdd", "filename": "gcc/testsuite/gcc.target/avr/pr71676-3.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7212a155c2f3fdf585f7693159aa4d932d9a585/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71676-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7212a155c2f3fdf585f7693159aa4d932d9a585/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71676-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71676-3.c?ref=c7212a155c2f3fdf585f7693159aa4d932d9a585", "patch": "@@ -0,0 +1,80 @@\n+/* { dg-do run } */\n+/* { dg-options \"-Os -fno-tree-switch-conversion\" } */\n+\n+#define MK_FUN(NAME, TYP, V)                            \\\n+  static __inline__ __attribute__((always_inline))      \\\n+  unsigned char value_## NAME (TYP x, unsigned char y)  \\\n+  {                                                     \\\n+    switch (x)                                          \\\n+      {                                                 \\\n+      case V + 0: return 0 + y;                         \\\n+      case V + 1: return 1;                             \\\n+      case V + 2: return 2 + y;                         \\\n+      case V + 3: return 3;                             \\\n+      case V + 4: return 4 + y;                         \\\n+      case V + 5: return 5;                             \\\n+      case V + 6: return 6 + y;                         \\\n+      case V + 7: return 7;                             \\\n+      case V + 8: return 8 + y;                         \\\n+      case V + 9: return 9;                             \\\n+      case V + 10: return 10 + y;                       \\\n+      case V + 11: return 11;                           \\\n+      case V + 12: return 12 + y;                       \\\n+      case V + 13: return 13;                           \\\n+      case V + 14: return 14 + y;                       \\\n+      case V + 15: return 15;                           \\\n+      }                                                 \\\n+    return x;                                           \\\n+  }                                                     \\\n+                                                        \\\n+  __attribute__((noinline,noclone))                     \\\n+  unsigned char select_## NAME (TYP x, unsigned char y) \\\n+  {                                                     \\\n+    return value_## NAME (x, y);                        \\\n+  }                                                     \\\n+                                                        \\\n+  static __inline__ __attribute__((always_inline))      \\\n+  void test1_## NAME (TYP x)                            \\\n+  {                                                     \\\n+    if (select_## NAME (x, 0) != value_## NAME (x, 0))  \\\n+      __builtin_abort();                                \\\n+  }                                                     \\\n+                                                        \\\n+  void test_## NAME (void)                              \\\n+  {                                                     \\\n+    test1_## NAME (V);                                  \\\n+    test1_## NAME (V - 1);                              \\\n+    test1_## NAME (V + 15);                             \\\n+    test1_## NAME (V + 16);                             \\\n+  }\n+\n+MK_FUN (0_s8, signed char, 0)\n+MK_FUN (0_u8, unsigned char, 0)\n+MK_FUN (0_s16, signed int, 0)\n+MK_FUN (0_u16, unsigned int, 0)\n+\n+MK_FUN (m4_s8, signed char, -4)\n+MK_FUN (m4_s16, signed int, -4)\n+\n+MK_FUN (4_s8, signed char, 4)\n+MK_FUN (4_u8, unsigned char, 4)\n+MK_FUN (4_s16, signed int, 4)\n+MK_FUN (4_u16, unsigned int, 4)\n+\n+int main (void)\n+{\n+  test_0_s8();\n+  test_0_u8();\n+  test_0_s16();\n+  test_0_u16();\n+\n+  test_m4_s8();\n+  test_m4_s16();\n+\n+  test_4_s8();\n+  test_4_u8();\n+  test_4_s16();\n+  test_4_u16();\n+\n+  return 0;\n+}"}, {"sha": "7737c1e5390ae026999b26cfe519e51a044fbebc", "filename": "gcc/testsuite/gcc.target/avr/pr71676.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7212a155c2f3fdf585f7693159aa4d932d9a585/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71676.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7212a155c2f3fdf585f7693159aa4d932d9a585/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71676.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71676.c?ref=c7212a155c2f3fdf585f7693159aa4d932d9a585", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-options \"-Os -fno-tree-switch-conversion\" } */\n+\n+#include \"exit-abort.h\"\n+\n+volatile unsigned char y;\n+\n+__attribute__((noinline,noclone))\n+unsigned char foo (unsigned long x) \n+{\n+  switch (x)\n+    {\n+    case 0:\ty = 67; break;\n+    case 1:\ty = 20; break;\n+    case 2:\ty = 109; break;\n+    case 3:\ty = 33; break;\n+    case 4:\ty = 44; break;\n+    case 5:\ty = 37; break;\n+    case 6:\ty = 10; break;\n+    case 7:\ty = 98; break;\n+    }\n+  return y;\n+}\n+\n+int main (void)\n+{\n+  if (0 != foo (7L + 0x10000L))\n+    abort();\n+  return 0;\n+}"}, {"sha": "160810f80b5451adcb3254224a24444447c1b03c", "filename": "gcc/testsuite/gcc.target/avr/pr71678.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7212a155c2f3fdf585f7693159aa4d932d9a585/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71678.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7212a155c2f3fdf585f7693159aa4d932d9a585/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71678.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71678.c?ref=c7212a155c2f3fdf585f7693159aa4d932d9a585", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -fno-tree-switch-conversion\" } */\n+\n+unsigned char foo (long long x) \n+{\n+  unsigned char y = 0;\n+  switch (x)\n+    {\n+    case 0: y = 67; break;\n+    case 1: y = 20; break;\n+    case 2: y = 109; break;\n+    case 3: y = 33; break;\n+    case 4: y = 44; break;\n+    case 5: y = 37; break;\n+    case 6: y = 10; break;\n+    case 7: y = 11; break;\n+    }\n+  return y;\n+}"}]}