{"sha": "8e7a09c353842f38c05b8cb171efa9784ab84862", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU3YTA5YzM1Mzg0MmYzOGMwNWI4Y2IxNzFlZmE5Nzg0YWI4NDg2Mg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-09-20T05:35:07Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-09-20T05:35:07Z"}, "message": "i386.c (ix86_adjust_stack_and_probe_stack_clash): New.\n\n\t* config/i386/i386.c (ix86_adjust_stack_and_probe_stack_clash): New.\n\t(ix86_expand_prologue): Dump stack clash info as needed.\n\tCall ix86_adjust_stack_and_probe_stack_clash as needed.\n\n\t* gcc.dg/stack-check-4.c: New test.\n\t* gcc.dg/stack-check-5.c: New test.\n\t* gcc.dg/stack-check-6.c: New test.\n\t* gcc.dg/stack-check-6a.c: New test.\n\t* gcc.dg/stack-check-7.c: New test.\n\t* gcc.dg/stack-check-8.c: New test.\n\t* gcc.dg/stack-check-9.c: New test.\n\t* gcc.dg/stack-check-10.c: New test.\n\t* lib/target-supports.exp\n\t(check_effective_target_supports_stack_clash_protection): Enable for\n\tx86 and x86_64 targets.\n\nFrom-SVN: r252998", "tree": {"sha": "4113182962c97b316c32e9cfba060b8d769d0a98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4113182962c97b316c32e9cfba060b8d769d0a98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e7a09c353842f38c05b8cb171efa9784ab84862", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e7a09c353842f38c05b8cb171efa9784ab84862", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e7a09c353842f38c05b8cb171efa9784ab84862", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e7a09c353842f38c05b8cb171efa9784ab84862/comments", "author": null, "committer": null, "parents": [{"sha": "8a502a808ec70c87e7a0a4bc7719115859a9dd7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a502a808ec70c87e7a0a4bc7719115859a9dd7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a502a808ec70c87e7a0a4bc7719115859a9dd7a"}], "stats": {"total": 2606, "additions": 2600, "deletions": 6}, "files": [{"sha": "f9d3a419f1a5b88b43c45e6c65885faca4d7f334", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e7a09c353842f38c05b8cb171efa9784ab84862", "patch": "@@ -1,5 +1,9 @@\n 2017-09-19  Jeff Law  <law@redhat.com>\n \n+\t* config/i386/i386.c (ix86_adjust_stack_and_probe_stack_clash): New.\n+\t(ix86_expand_prologue): Dump stack clash info as needed.\n+\tCall ix86_adjust_stack_and_probe_stack_clash as needed.\n+\n         * function.c (dump_stack_clash_frame_info): New function.\n         * function.h (dump_stack_clash_frame_info): Prototype.\n         (enum stack_clash_probes): New enum."}, {"sha": "fdfe5951ca13b0cf7eda16d8e4a82f49f2bf0b80", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 150, "deletions": 2, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8e7a09c353842f38c05b8cb171efa9784ab84862", "patch": "@@ -13924,6 +13924,147 @@ release_scratch_register_on_entry (struct scratch_reg *sr)\n \n #define PROBE_INTERVAL (1 << STACK_CHECK_PROBE_INTERVAL_EXP)\n \n+/* Emit code to adjust the stack pointer by SIZE bytes while probing it.\n+\n+   This differs from the next routine in that it tries hard to prevent\n+   attacks that jump the stack guard.  Thus it is never allowed to allocate\n+   more than PROBE_INTERVAL bytes of stack space without a suitable\n+   probe.  */\n+\n+static void\n+ix86_adjust_stack_and_probe_stack_clash (const HOST_WIDE_INT size)\n+{\n+  struct machine_function *m = cfun->machine;\n+\n+  /* If this function does not statically allocate stack space, then\n+     no probes are needed.  */\n+  if (!size)\n+    {\n+      dump_stack_clash_frame_info (NO_PROBE_NO_FRAME, false);\n+      return;\n+    }\n+\n+  /* If we are a noreturn function, then we have to consider the\n+     possibility that we're called via a jump rather than a call.\n+\n+     Thus we don't have the implicit probe generated by saving the\n+     return address into the stack at the call.  Thus, the stack\n+     pointer could be anywhere in the guard page.  The safe thing\n+     to do is emit a probe now.\n+\n+     ?!? This should be revamped to work like aarch64 and s390 where\n+     we track the offset from the most recent probe.  Normally that\n+     offset would be zero.  For a non-return function we would reset\n+     it to PROBE_INTERVAL - (STACK_BOUNDARY / BITS_PER_UNIT).   Then\n+     we just probe when we cross PROBE_INTERVAL.  */\n+  if (TREE_THIS_VOLATILE (cfun->decl))\n+    {\n+      emit_stack_probe (plus_constant (Pmode, stack_pointer_rtx,\n+\t\t\t\t       -GET_MODE_SIZE (word_mode)));\n+      emit_insn (gen_blockage ());\n+    }\n+\n+  /* If we allocate less than the size of the guard statically,\n+     then no probing is necessary, but we do need to allocate\n+     the stack.  */\n+  if (size < (1 << PARAM_VALUE (PARAM_STACK_CLASH_PROTECTION_GUARD_SIZE)))\n+    {\n+      pro_epilogue_adjust_stack (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t\t         GEN_INT (-size), -1,\n+\t\t\t         m->fs.cfa_reg == stack_pointer_rtx);\n+      dump_stack_clash_frame_info (NO_PROBE_SMALL_FRAME, true);\n+      return;\n+    }\n+\n+  /* We're allocating a large enough stack frame that we need to\n+     emit probes.  Either emit them inline or in a loop depending\n+     on the size.  */\n+  HOST_WIDE_INT probe_interval\n+    = 1 << PARAM_VALUE (PARAM_STACK_CLASH_PROTECTION_PROBE_INTERVAL);\n+  if (size <= 4 * probe_interval)\n+    {\n+      HOST_WIDE_INT i;\n+      for (i = probe_interval; i <= size; i += probe_interval)\n+\t{\n+\t  /* Allocate PROBE_INTERVAL bytes.  */\n+\t  pro_epilogue_adjust_stack (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t\t\t     GEN_INT (-probe_interval), -1,\n+\t\t\t\t     m->fs.cfa_reg == stack_pointer_rtx);\n+\n+\t  /* And probe at *sp.  */\n+\t  emit_stack_probe (stack_pointer_rtx);\n+\t  emit_insn (gen_blockage ());\n+\t}\n+\n+      /* We need to allocate space for the residual, but we do not need\n+\t to probe the residual.  */\n+      HOST_WIDE_INT residual = (i - probe_interval - size);\n+      if (residual)\n+\tpro_epilogue_adjust_stack (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t\t\t   GEN_INT (residual), -1,\n+\t\t\t\t   m->fs.cfa_reg == stack_pointer_rtx);\n+      dump_stack_clash_frame_info (PROBE_INLINE, residual != 0);\n+    }\n+  else\n+    {\n+      struct scratch_reg sr;\n+      get_scratch_register_on_entry (&sr);\n+\n+      /* Step 1: round SIZE down to a multiple of the interval.  */\n+      HOST_WIDE_INT rounded_size = size & -probe_interval;\n+\n+      /* Step 2: compute final value of the loop counter.  Use lea if\n+\t possible.  */\n+      rtx addr = plus_constant (Pmode, stack_pointer_rtx, -rounded_size);\n+      rtx insn;\n+      if (address_no_seg_operand (addr, Pmode))\n+\tinsn = emit_insn (gen_rtx_SET (sr.reg, addr));\n+      else\n+\t{\n+\t  emit_move_insn (sr.reg, GEN_INT (-rounded_size));\n+\t  insn = emit_insn (gen_rtx_SET (sr.reg,\n+\t\t\t\t\t gen_rtx_PLUS (Pmode, sr.reg,\n+\t\t\t\t\t\t       stack_pointer_rtx)));\n+\t}\n+      if (m->fs.cfa_reg == stack_pointer_rtx)\n+\t{\n+\t  add_reg_note (insn, REG_CFA_DEF_CFA,\n+\t\t\tplus_constant (Pmode, sr.reg,\n+\t\t\t\t       m->fs.cfa_offset + rounded_size));\n+\t  RTX_FRAME_RELATED_P (insn) = 1;\n+        }\n+\n+      /* Step 3: the loop.  */\n+      rtx size_rtx = GEN_INT (rounded_size);\n+      insn = emit_insn (ix86_gen_adjust_stack_and_probe (sr.reg, sr.reg,\n+\t\t\t\t\t\t\t size_rtx));\n+      if (m->fs.cfa_reg == stack_pointer_rtx)\n+\t{\n+\t  m->fs.cfa_offset += rounded_size;\n+\t  add_reg_note (insn, REG_CFA_DEF_CFA,\n+\t\t\tplus_constant (Pmode, stack_pointer_rtx,\n+\t\t\t\t       m->fs.cfa_offset));\n+\t  RTX_FRAME_RELATED_P (insn) = 1;\n+        }\n+      m->fs.sp_offset += rounded_size;\n+      emit_insn (gen_blockage ());\n+\n+      /* Step 4: adjust SP if we cannot assert at compile-time that SIZE\n+\t is equal to ROUNDED_SIZE.  */\n+\n+      if (size != rounded_size)\n+\tpro_epilogue_adjust_stack (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t\t\t   GEN_INT (rounded_size - size), -1,\n+\t\t\t\t   m->fs.cfa_reg == stack_pointer_rtx);\n+      dump_stack_clash_frame_info (PROBE_LOOP, size != rounded_size);\n+\n+      release_scratch_register_on_entry (&sr);\n+    }\n+\n+  /* Make sure nothing is scheduled before we are done.  */\n+  emit_insn (gen_blockage ());\n+}\n+\n /* Emit code to adjust the stack pointer by SIZE bytes while probing it.  */\n \n static void\n@@ -14852,12 +14993,19 @@ ix86_expand_prologue (void)\n \n   /* The stack has already been decremented by the instruction calling us\n      so probe if the size is non-negative to preserve the protection area.  */\n-  if (allocate >= 0 && flag_stack_check == STATIC_BUILTIN_STACK_CHECK)\n+  if (allocate >= 0\n+      && (flag_stack_check == STATIC_BUILTIN_STACK_CHECK\n+\t  || flag_stack_clash_protection))\n     {\n       /* We expect the GP registers to be saved when probes are used.  */\n       gcc_assert (int_registers_saved);\n \n-      if (STACK_CHECK_MOVING_SP)\n+      if (flag_stack_clash_protection)\n+\t{\n+\t  ix86_adjust_stack_and_probe_stack_clash (allocate);\n+\t  allocate = 0;\n+\t}\n+      else if (STACK_CHECK_MOVING_SP)\n \t{\n \t  if (!(crtl->is_leaf && !cfun->calls_alloca\n \t\t&& allocate <= PROBE_INTERVAL))"}, {"sha": "55510b120b2eecfe9a31ac9f438623aee7185e75", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e7a09c353842f38c05b8cb171efa9784ab84862", "patch": "@@ -1,10 +1,22 @@\n 2017-09-19  Jeff Law  <law@redhat.com>\n \n+\t* gcc.dg/stack-check-4.c: New test.\n+\t* gcc.dg/stack-check-5.c: New test.\n+\t* gcc.dg/stack-check-6.c: New test.\n+\t* gcc.dg/stack-check-6a.c: New test.\n+\t* gcc.dg/stack-check-7.c: New test.\n+\t* gcc.dg/stack-check-8.c: New test.\n+\t* gcc.dg/stack-check-9.c: New test.\n+\t* gcc.dg/stack-check-10.c: New test.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_supports_stack_clash_protection): Enable for\n+\tx86 and x86_64 targets.\n+\n \t* gcc.dg/stack-check-3.c: New test.\n \n \t* gcc.dg/stack-check-2.c: New test.\n \t* lib/target-supports.exp\n-\t(check_effective_target_supports_stack_clash_protection): New function.\n+\t(check_effective_target_supports_stack_clash_protection): New.\n \t(check_effective_target_frame_pointer_for_non_leaf): Likewise.\n \t(check_effective_target_caller_implicit_probes): Likewise.\n "}, {"sha": "a86956ad6925464e4a938a33e609fae5004201c7", "filename": "gcc/testsuite/gcc.dg/stack-check-10.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-10.c?ref=8e7a09c353842f38c05b8cb171efa9784ab84862", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fstack-clash-protection -fdump-rtl-pro_and_epilogue -fno-optimize-sibling-calls --param stack-clash-protection-probe-interval=12 --param stack-clash-protection-guard-size=12\" } */\n+/* { dg-require-effective-target supports_stack_clash_protection } */\n+\n+int f (int *);\n+\n+int\n+g (int a)\n+{\n+  return f (&a);\n+}\n+\n+int f1 (void);\n+int f2 (int);\n+\n+int\n+f3 (void)\n+{\n+  return f2 (f1 ());\n+}\n+\n+\n+/* If we have caller implicit probes, then we should not need probes in either callee.\n+   Else callees may need probes, particularly if non-leaf functions require a\n+   frame/frame pointer.  */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash no probe\" 2 \"pro_and_epilogue\" { target caller_implicit_probes } } } */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash inline probe\" 1 \"pro_and_epilogue\" { target { ! caller_implicit_probes } } } } */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash no probe\" 1 \"pro_and_epilogue\" { target { ! caller_implicit_probes } } } } */\n+\n+/* Neither of these functions are a nonreturn function.  */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash not noreturn\" 2 \"pro_and_epilogue\" } } */\n+\n+/* If the callee realigns the stack or has a mandatory frame, then both functions\n+   have a residual allocation.  Else just g() has a residual allocation.  */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash residual allocation in prologue\" 2 \"pro_and_epilogue\" } } */\n+\n+\n+/* If the target has frame pointers for non-leafs, then both functions will\n+   need a frame pointer.  Otherwise neither should.  */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash no frame pointer needed\" 2 \"pro_and_epilogue\" { target { ! frame_pointer_for_non_leaf } } } } */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash frame pointer needed\" 2 \"pro_and_epilogue\" { target { frame_pointer_for_non_leaf } } } } */"}, {"sha": "f0bf7c71a5b26e43012e0069b7f63f828b6c315f", "filename": "gcc/testsuite/gcc.dg/stack-check-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-3.c?ref=8e7a09c353842f38c05b8cb171efa9784ab84862", "patch": "@@ -7,7 +7,7 @@\n    residual allocation + probe for f?.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fstack-clash-protection -fdump-rtl-expand -fno-optimize-sibling-calls --param stack-clash-protection-probe-interval=4096 --param stack-clash-protection-guard-size=4096\" } */\n+/* { dg-options \"-O2 -fstack-clash-protection -fdump-rtl-expand -fno-optimize-sibling-calls --param stack-clash-protection-probe-interval=12 --param stack-clash-protection-guard-size=12\" } */\n /* { dg-require-effective-target supports_stack_clash_protection } */\n \n __attribute__((noinline, noclone)) void"}, {"sha": "b0c5c61972fa0d689fe7e0172fde1bc3f2061b51", "filename": "gcc/testsuite/gcc.dg/stack-check-4.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-4.c?ref=8e7a09c353842f38c05b8cb171efa9784ab84862", "patch": "@@ -0,0 +1,42 @@\n+/* On targets where the call instruction is an implicit probe of *sp, we\n+   elide stack probes as long as the size of the local stack is less than\n+   PROBE_INTERVAL.\n+\n+   But if the caller were to transform a tail call into a direct jump\n+   we do not have that implicit probe.  This normally isn't a problem as\n+   the caller must not have a local frame for that optimization to apply.\n+\n+   However, a sufficiently smart compiler could realize that the caller's\n+   local stack need not be torn down and thus could transform a call into\n+   a jump if the target is a noreturn function, even if the caller has\n+   a local frame.\n+\n+   To guard against that, targets that depend on *sp being probed by the\n+   call itself must emit a probe if the target function is a noreturn\n+   function, even if they just allocate a small amount of stack space.\n+\n+   Rather than try to parse RTL or assembly code, we instead require the\n+   prologue code to emit information into the dump file that we can\n+   scan for.   We scan for both the positive and negative cases.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fstack-clash-protection -fdump-rtl-pro_and_epilogue -fno-optimize-sibling-calls\" } */\n+/* { dg-require-effective-target supports_stack_clash_protection } */\n+\n+extern void arf (char *);\n+\n+__attribute__ ((noreturn)) void foo1 ()\n+{\n+  char x[10];\n+  while (1)\n+    arf (x);\n+}\n+\n+void foo2 ()\n+{\n+  char x[10];\n+  arf (x);\n+}\n+/* { dg-final { scan-rtl-dump-times \"Stack clash noreturn\" 1 \"pro_and_epilogue\" } } */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash not noreturn\" 1 \"pro_and_epilogue\" } } */\n+"}, {"sha": "2171d9b6c2319287aca63c72d50e3edf0d92a2d0", "filename": "gcc/testsuite/gcc.dg/stack-check-5.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-5.c?ref=8e7a09c353842f38c05b8cb171efa9784ab84862", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fstack-clash-protection -fdump-rtl-pro_and_epilogue -fno-optimize-sibling-calls --param stack-clash-protection-probe-interval=12 --param stack-clash-protection-guard-size=12\" } */\n+/* { dg-require-effective-target supports_stack_clash_protection } */\n+\n+\n+extern void foo (char *);\n+extern void bar (void);\n+\n+/* This function allocates no local stack and is a leaf.  It should have no\n+   probes on any target and should not require a frame pointer.  */\n+int\n+f0 (int x, int y)\n+{\n+  asm volatile (\"\" : : : \"memory\");  \n+  return x + y;\n+}\n+\n+/* This function allocates no local stack, but is not a leaf.  Ideally it\n+   should not need probing and no frame pointer.  */\n+int\n+f1 (int x, int y)\n+{\n+  asm volatile (\"\" : : : \"memory\");  \n+  bar ();\n+}\n+\n+/* This is a leaf with a small frame.  On targets with implicit probes in\n+   the caller, this should not need probing.  On targets with no implicit\n+   probes in the caller, it may require probes.  Ideally it should need no\n+   frame pointer.  */\n+void\n+f2 (void)\n+{\n+  char buf[512];\n+  asm volatile (\"\" : : \"g\" (&buf) : \"memory\");\n+}\n+\n+/* This is a non-leaf with a small frame.  On targets with implicit probes in\n+   the caller, this should not need probing.  On targets with no implicit\n+   probes in the caller, it may require probes.  It should need no frame\n+   pointer.  */\n+void\n+f3 (void)\n+{\n+  char buf[512];\n+  foo (buf);\n+}\n+\n+/* If we have caller implicit probes, then we should not need probes.\n+   Else callees may need probes, particularly if non-leaf functions require a\n+   frame/frame pointer.  */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash no probe\" 4 \"pro_and_epilogue\" { target caller_implicit_probes } } } */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash no probe\" 2 \"pro_and_epilogue\" { target { ! caller_implicit_probes } } } } */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash inline probes \" 2 \"pro_and_epilogue\" { target { ! caller_implicit_probes } } } } */\n+\n+/* None of these functions are marked with the noreturn attribute.  */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash not noreturn\" 4 \"pro_and_epilogue\" } } */\n+\n+/* Two functions are leafs, two are not.  Verify the target identified them\n+   appropriately.  */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash no frame pointer needed\" 4 \"pro_and_epilogue\" { target { ! frame_pointer_for_non_leaf } } } } */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash no frame pointer needed\" 2 \"pro_and_epilogue\" { target { frame_pointer_for_non_leaf } } } } */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash frame pointer needed\" 2 \"pro_and_epilogue\" { target { frame_pointer_for_non_leaf } } } } */\n+\n+\n+/* We have selected the size of the array in f2/f3 to be large enough\n+   to not live in the red zone on targets that support it.\n+\n+   That allows simplification of this test considerably.\n+   f1() should not require any allocations, thus no residuals.\n+   All the rest of the functions require some kind of allocation,\n+   either for the saved fp/rp or the array.  */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash no residual allocation in prologue\" 1 \"pro_and_epilogue\" } } */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash residual allocation in prologue\" 3 \"pro_and_epilogue\" } } */"}, {"sha": "ad2021c903719590f6de2774b80f76914eb94378", "filename": "gcc/testsuite/gcc.dg/stack-check-6.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-6.c?ref=8e7a09c353842f38c05b8cb171efa9784ab84862", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fstack-clash-protection -fdump-rtl-pro_and_epilogue -fno-optimize-sibling-calls --param stack-clash-protection-probe-interval=12 --param stack-clash-protection-guard-size=12\" } */\n+/* { dg-require-effective-target supports_stack_clash_protection } */\n+\n+\n+extern void foo (char *);\n+extern void bar (void);\n+\n+\n+/* This is a leaf with a frame that is large enough to require probing with\n+   a residual allocation, but small enough to probe inline.  */\n+void\n+f4 (void)\n+{\n+  char buf[4096 + 512];\n+  asm volatile (\"\" : : \"g\" (&buf) : \"memory\");\n+}\n+\n+\n+/* This is a non-leaf with a frame large enough to require probing and\n+   a residual allocation, but small enough to probe inline.  */\n+void\n+f5 (void)\n+{\n+  char buf[4096 + 512];\n+  foo (buf);\n+}\n+\n+/* This is a leaf with a frame that is large enough to require probing with\n+   a loop plus a residual allocation.  */\n+void\n+f6 (void)\n+{\n+  char buf[4096 * 10 + 512];\n+  asm volatile (\"\" : : \"g\" (&buf) : \"memory\");\n+}\n+\n+\n+/* This is a non-leaf with a frame large enough to require probing with\n+   a loop plus a residual allocation.  */\n+void\n+f7 (void)\n+{\n+  char buf[4096 * 10 + 512];\n+  foo (buf);\n+}\n+\n+/* { dg-final { scan-rtl-dump-times \"Stack clash inline probes\" 2 \"pro_and_epilogue\" } } */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash probe loop\" 2 \"pro_and_epilogue\" } } */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash residual allocation in prologue\" 4 \"pro_and_epilogue\" } } */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash not noreturn\" 4 \"pro_and_epilogue\" } } */\n+\n+/* { dg-final { scan-rtl-dump-times \"Stack clash no frame pointer needed\" 4 \"pro_and_epilogue\" { target { ! frame_pointer_for_non_leaf } } } } */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash no frame pointer needed\" 2 \"pro_and_epilogue\" { target { frame_pointer_for_non_leaf } } } } */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash frame pointer needed\" 2 \"pro_and_epilogue\" { target { frame_pointer_for_non_leaf } } } } */"}, {"sha": "6f8e71289212e2f6fdfa1567827ac760eea4efc8", "filename": "gcc/testsuite/gcc.dg/stack-check-6a.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-6a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-6a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-6a.c?ref=8e7a09c353842f38c05b8cb171efa9784ab84862", "patch": "@@ -0,0 +1,17 @@\n+/* The goal here is to verify that increasing the size of the guard allows\n+   elimination of all probing on the relevant targets.  */\n+   \n+/* { dg-do compile  } */\n+/* { dg-options \"-O2 -fstack-clash-protection -fdump-rtl-pro_and_epilogue -fno-optimize-sibling-calls --param stack-clash-protection-probe-interval=12 --param stack-clash-protection-guard-size=16\" } */\n+/* { dg-require-effective-target supports_stack_clash_protection  } */\n+\n+#include \"stack-check-6.c\"\n+\n+/* { dg-final { scan-rtl-dump-times \"Stack clash inline probes\" 0 \"pro_and_epilogue\" } } */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash probe loop\" 0 \"pro_and_epilogue\" } } */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash residual allocation in prologue\" 4 \"pro_and_epilogue\" } } */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash not noreturn\" 4 \"pro_and_epilogue\" } } */\n+\n+/* { dg-final { scan-rtl-dump-times \"Stack clash no frame pointer needed\" 4 \"pro_and_epilogue\" { target { ! frame_pointer_for_non_leaf } } } } */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash no frame pointer needed\" 2 \"pro_and_epilogue\" { target { frame_pointer_for_non_leaf } } } } */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash frame pointer needed\" 2 \"pro_and_epilogue\" { target { frame_pointer_for_non_leaf } } } } */"}, {"sha": "b963a2881dcf4f60750bb077651fcb9dc8d4c825", "filename": "gcc/testsuite/gcc.dg/stack-check-7.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-7.c?ref=8e7a09c353842f38c05b8cb171efa9784ab84862", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fstack-clash-protection -fno-optimize-sibling-calls --param stack-clash-protection-probe-interval=12 --param stack-clash-protection-guard-size=12\" } */\n+/* { dg-require-effective-target supports_stack_clash_protection } */\n+\n+/* For further testing, this can be run under valgrind where it's crashed\n+   on aarch64 and ppc64le with -fstack-check=specific.  */\n+\n+\n+__attribute__((noinline, noclone)) void\n+foo (char *p)\n+{\n+  asm volatile (\"\" : : \"r\" (p) : \"memory\");\n+}\n+\n+__attribute__((noinline, noclone)) void\n+bar (void)\n+{\n+  char buf[131072];\n+  foo (buf);\n+}\n+\n+__attribute__((noinline, noclone)) void\n+baz (void)\n+{\n+  char buf[12000];\n+  foo (buf);\n+}\n+\n+int\n+main ()\n+{\n+  bar ();\n+  baz ();\n+  return 0;\n+}\n+"}, {"sha": "84d5adef15446dccebb0149542e004e349e42ef5", "filename": "gcc/testsuite/gcc.dg/stack-check-8.c", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-8.c?ref=8e7a09c353842f38c05b8cb171efa9784ab84862", "patch": "@@ -0,0 +1,139 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fstack-clash-protection -Wno-psabi -fno-optimize-sibling-calls --param stack-clash-protection-probe-interval=12 --param stack-clash-protection-guard-size=12\" } */\n+/* { dg-require-effective-target supports_stack_clash_protection } */\n+\n+\n+typedef float V __attribute__((vector_size (32)));\n+\n+__attribute__((noinline, noclone)) void\n+foo (char *p)\n+{\n+  asm volatile (\"\" : : \"r\" (p) : \"memory\");\n+}\n+\n+__attribute__((noinline, noclone)) int\n+f0 (int x, int y)\n+{\n+  asm volatile (\"\" : : : \"memory\");  \n+  return x + y;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f1 (void)\n+{\n+  char buf[64];\n+  foo (buf);\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f2 (void)\n+{\n+  char buf[12000];\n+  foo (buf);\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f3 (void)\n+{\n+  char buf[131072];\n+  foo (buf);\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f4 (int x)\n+{\n+  char vla[x];\n+  foo (vla);\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f5 (int x)\n+{\n+  char buf[12000];\n+  foo (buf);\n+  {\n+    char vla[x];\n+    foo (vla);\n+  }\n+  {\n+    char vla[x];\n+    foo (vla);\n+  }\n+}\n+\n+V v;\n+\n+__attribute__((noinline, noclone)) int\n+f6 (int x, int y, V a, V b, V c)\n+{\n+  asm volatile (\"\" : : : \"memory\");  \n+  v = a + b + c;\n+  return x + y;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f7 (V a, V b, V c)\n+{\n+  char buf[64];\n+  foo (buf);\n+  v = a + b + c;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f8 (V a, V b, V c)\n+{\n+  char buf[12000];\n+  foo (buf);\n+  v = a + b + c;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f9 (V a, V b, V c)\n+{\n+  char buf[131072];\n+  foo (buf);\n+  v = a + b + c;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f10 (int x, V a, V b, V c)\n+{\n+  char vla[x];\n+  foo (vla);\n+  v = a + b + c;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f11 (int x, V a, V b, V c)\n+{\n+  char buf[12000];\n+  foo (buf);\n+  v = a + b + c;\n+  {\n+    char vla[x];\n+    foo (vla);\n+  }\n+  {\n+    char vla[x];\n+    foo (vla);\n+  }\n+}\n+\n+int\n+main ()\n+{\n+  f0 (2, 3);\n+  f1 ();\n+  f2 ();\n+  f3 ();\n+  f4 (12000);\n+  f5 (12000);\n+  f6 (2, 3, v, v, v);\n+  f7 (v, v, v);\n+  f8 (v, v, v);\n+  f9 (v, v, v);\n+  f10 (12000, v, v, v);\n+  f11 (12000, v, v, v);\n+  return 0;\n+}\n+"}, {"sha": "b84075b9b43480b8530f4fc2c44f91e90812c1c7", "filename": "gcc/testsuite/gcc.dg/stack-check-9.c", "status": "added", "additions": 2022, "deletions": 0, "changes": 2022, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-check-9.c?ref=8e7a09c353842f38c05b8cb171efa9784ab84862", "patch": "@@ -0,0 +1,2022 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fstack-clash-protection -fdump-rtl-pro_and_epilogue -fno-optimize-sibling-calls --param stack-clash-protection-probe-interval=12 --param stack-clash-protection-guard-size=12\" } */\n+/* { dg-require-effective-target supports_stack_clash_protection } */\n+\n+double f1 (void);\n+double f2 (double, double);\n+\n+double\n+f3 (void)\n+{\n+  double d000 = f1 ();\n+  double d001 = f1 ();\n+  double d002 = f1 ();\n+  double d003 = f1 ();\n+  double d004 = f1 ();\n+  double d005 = f1 ();\n+  double d006 = f1 ();\n+  double d007 = f1 ();\n+  double d008 = f1 ();\n+  double d009 = f1 ();\n+  double d010 = f1 ();\n+  double d011 = f1 ();\n+  double d012 = f1 ();\n+  double d013 = f1 ();\n+  double d014 = f1 ();\n+  double d015 = f1 ();\n+  double d016 = f1 ();\n+  double d017 = f1 ();\n+  double d018 = f1 ();\n+  double d019 = f1 ();\n+  double d020 = f1 ();\n+  double d021 = f1 ();\n+  double d022 = f1 ();\n+  double d023 = f1 ();\n+  double d024 = f1 ();\n+  double d025 = f1 ();\n+  double d026 = f1 ();\n+  double d027 = f1 ();\n+  double d028 = f1 ();\n+  double d029 = f1 ();\n+  double d030 = f1 ();\n+  double d031 = f1 ();\n+  double d032 = f1 ();\n+  double d033 = f1 ();\n+  double d034 = f1 ();\n+  double d035 = f1 ();\n+  double d036 = f1 ();\n+  double d037 = f1 ();\n+  double d038 = f1 ();\n+  double d039 = f1 ();\n+  double d040 = f1 ();\n+  double d041 = f1 ();\n+  double d042 = f1 ();\n+  double d043 = f1 ();\n+  double d044 = f1 ();\n+  double d045 = f1 ();\n+  double d046 = f1 ();\n+  double d047 = f1 ();\n+  double d048 = f1 ();\n+  double d049 = f1 ();\n+  double d050 = f1 ();\n+  double d051 = f1 ();\n+  double d052 = f1 ();\n+  double d053 = f1 ();\n+  double d054 = f1 ();\n+  double d055 = f1 ();\n+  double d056 = f1 ();\n+  double d057 = f1 ();\n+  double d058 = f1 ();\n+  double d059 = f1 ();\n+  double d060 = f1 ();\n+  double d061 = f1 ();\n+  double d062 = f1 ();\n+  double d063 = f1 ();\n+  double d064 = f1 ();\n+  double d065 = f1 ();\n+  double d066 = f1 ();\n+  double d067 = f1 ();\n+  double d068 = f1 ();\n+  double d069 = f1 ();\n+  double d070 = f1 ();\n+  double d071 = f1 ();\n+  double d072 = f1 ();\n+  double d073 = f1 ();\n+  double d074 = f1 ();\n+  double d075 = f1 ();\n+  double d076 = f1 ();\n+  double d077 = f1 ();\n+  double d078 = f1 ();\n+  double d079 = f1 ();\n+  double d080 = f1 ();\n+  double d081 = f1 ();\n+  double d082 = f1 ();\n+  double d083 = f1 ();\n+  double d084 = f1 ();\n+  double d085 = f1 ();\n+  double d086 = f1 ();\n+  double d087 = f1 ();\n+  double d088 = f1 ();\n+  double d089 = f1 ();\n+  double d090 = f1 ();\n+  double d091 = f1 ();\n+  double d092 = f1 ();\n+  double d093 = f1 ();\n+  double d094 = f1 ();\n+  double d095 = f1 ();\n+  double d096 = f1 ();\n+  double d097 = f1 ();\n+  double d098 = f1 ();\n+  double d099 = f1 ();\n+  double d100 = f1 ();\n+  double d101 = f1 ();\n+  double d102 = f1 ();\n+  double d103 = f1 ();\n+  double d104 = f1 ();\n+  double d105 = f1 ();\n+  double d106 = f1 ();\n+  double d107 = f1 ();\n+  double d108 = f1 ();\n+  double d109 = f1 ();\n+  double d110 = f1 ();\n+  double d111 = f1 ();\n+  double d112 = f1 ();\n+  double d113 = f1 ();\n+  double d114 = f1 ();\n+  double d115 = f1 ();\n+  double d116 = f1 ();\n+  double d117 = f1 ();\n+  double d118 = f1 ();\n+  double d119 = f1 ();\n+  double d120 = f1 ();\n+  double d121 = f1 ();\n+  double d122 = f1 ();\n+  double d123 = f1 ();\n+  double d124 = f1 ();\n+  double d125 = f1 ();\n+  double d126 = f1 ();\n+  double d127 = f1 ();\n+  double d128 = f1 ();\n+  double d129 = f1 ();\n+  double d130 = f1 ();\n+  double d131 = f1 ();\n+  double d132 = f1 ();\n+  double d133 = f1 ();\n+  double d134 = f1 ();\n+  double d135 = f1 ();\n+  double d136 = f1 ();\n+  double d137 = f1 ();\n+  double d138 = f1 ();\n+  double d139 = f1 ();\n+  double d140 = f1 ();\n+  double d141 = f1 ();\n+  double d142 = f1 ();\n+  double d143 = f1 ();\n+  double d144 = f1 ();\n+  double d145 = f1 ();\n+  double d146 = f1 ();\n+  double d147 = f1 ();\n+  double d148 = f1 ();\n+  double d149 = f1 ();\n+  double d150 = f1 ();\n+  double d151 = f1 ();\n+  double d152 = f1 ();\n+  double d153 = f1 ();\n+  double d154 = f1 ();\n+  double d155 = f1 ();\n+  double d156 = f1 ();\n+  double d157 = f1 ();\n+  double d158 = f1 ();\n+  double d159 = f1 ();\n+  double d160 = f1 ();\n+  double d161 = f1 ();\n+  double d162 = f1 ();\n+  double d163 = f1 ();\n+  double d164 = f1 ();\n+  double d165 = f1 ();\n+  double d166 = f1 ();\n+  double d167 = f1 ();\n+  double d168 = f1 ();\n+  double d169 = f1 ();\n+  double d170 = f1 ();\n+  double d171 = f1 ();\n+  double d172 = f1 ();\n+  double d173 = f1 ();\n+  double d174 = f1 ();\n+  double d175 = f1 ();\n+  double d176 = f1 ();\n+  double d177 = f1 ();\n+  double d178 = f1 ();\n+  double d179 = f1 ();\n+  double d180 = f1 ();\n+  double d181 = f1 ();\n+  double d182 = f1 ();\n+  double d183 = f1 ();\n+  double d184 = f1 ();\n+  double d185 = f1 ();\n+  double d186 = f1 ();\n+  double d187 = f1 ();\n+  double d188 = f1 ();\n+  double d189 = f1 ();\n+  double d190 = f1 ();\n+  double d191 = f1 ();\n+  double d192 = f1 ();\n+  double d193 = f1 ();\n+  double d194 = f1 ();\n+  double d195 = f1 ();\n+  double d196 = f1 ();\n+  double d197 = f1 ();\n+  double d198 = f1 ();\n+  double d199 = f1 ();\n+  double d200 = f1 ();\n+  double d201 = f1 ();\n+  double d202 = f1 ();\n+  double d203 = f1 ();\n+  double d204 = f1 ();\n+  double d205 = f1 ();\n+  double d206 = f1 ();\n+  double d207 = f1 ();\n+  double d208 = f1 ();\n+  double d209 = f1 ();\n+  double d210 = f1 ();\n+  double d211 = f1 ();\n+  double d212 = f1 ();\n+  double d213 = f1 ();\n+  double d214 = f1 ();\n+  double d215 = f1 ();\n+  double d216 = f1 ();\n+  double d217 = f1 ();\n+  double d218 = f1 ();\n+  double d219 = f1 ();\n+  double d220 = f1 ();\n+  double d221 = f1 ();\n+  double d222 = f1 ();\n+  double d223 = f1 ();\n+  double d224 = f1 ();\n+  double d225 = f1 ();\n+  double d226 = f1 ();\n+  double d227 = f1 ();\n+  double d228 = f1 ();\n+  double d229 = f1 ();\n+  double d230 = f1 ();\n+  double d231 = f1 ();\n+  double d232 = f1 ();\n+  double d233 = f1 ();\n+  double d234 = f1 ();\n+  double d235 = f1 ();\n+  double d236 = f1 ();\n+  double d237 = f1 ();\n+  double d238 = f1 ();\n+  double d239 = f1 ();\n+  double d240 = f1 ();\n+  double d241 = f1 ();\n+  double d242 = f1 ();\n+  double d243 = f1 ();\n+  double d244 = f1 ();\n+  double d245 = f1 ();\n+  double d246 = f1 ();\n+  double d247 = f1 ();\n+  double d248 = f1 ();\n+  double d249 = f1 ();\n+  double d250 = f1 ();\n+  double d251 = f1 ();\n+  double d252 = f1 ();\n+  double d253 = f1 ();\n+  double d254 = f1 ();\n+  double d255 = f1 ();\n+  double d256 = f1 ();\n+  double d257 = f1 ();\n+  double d258 = f1 ();\n+  double d259 = f1 ();\n+  double d260 = f1 ();\n+  double d261 = f1 ();\n+  double d262 = f1 ();\n+  double d263 = f1 ();\n+  double d264 = f1 ();\n+  double d265 = f1 ();\n+  double d266 = f1 ();\n+  double d267 = f1 ();\n+  double d268 = f1 ();\n+  double d269 = f1 ();\n+  double d270 = f1 ();\n+  double d271 = f1 ();\n+  double d272 = f1 ();\n+  double d273 = f1 ();\n+  double d274 = f1 ();\n+  double d275 = f1 ();\n+  double d276 = f1 ();\n+  double d277 = f1 ();\n+  double d278 = f1 ();\n+  double d279 = f1 ();\n+  double d280 = f1 ();\n+  double d281 = f1 ();\n+  double d282 = f1 ();\n+  double d283 = f1 ();\n+  double d284 = f1 ();\n+  double d285 = f1 ();\n+  double d286 = f1 ();\n+  double d287 = f1 ();\n+  double d288 = f1 ();\n+  double d289 = f1 ();\n+  double d290 = f1 ();\n+  double d291 = f1 ();\n+  double d292 = f1 ();\n+  double d293 = f1 ();\n+  double d294 = f1 ();\n+  double d295 = f1 ();\n+  double d296 = f1 ();\n+  double d297 = f1 ();\n+  double d298 = f1 ();\n+  double d299 = f1 ();\n+  double d300 = f1 ();\n+  double d301 = f1 ();\n+  double d302 = f1 ();\n+  double d303 = f1 ();\n+  double d304 = f1 ();\n+  double d305 = f1 ();\n+  double d306 = f1 ();\n+  double d307 = f1 ();\n+  double d308 = f1 ();\n+  double d309 = f1 ();\n+  double d310 = f1 ();\n+  double d311 = f1 ();\n+  double d312 = f1 ();\n+  double d313 = f1 ();\n+  double d314 = f1 ();\n+  double d315 = f1 ();\n+  double d316 = f1 ();\n+  double d317 = f1 ();\n+  double d318 = f1 ();\n+  double d319 = f1 ();\n+  double d320 = f1 ();\n+  double d321 = f1 ();\n+  double d322 = f1 ();\n+  double d323 = f1 ();\n+  double d324 = f1 ();\n+  double d325 = f1 ();\n+  double d326 = f1 ();\n+  double d327 = f1 ();\n+  double d328 = f1 ();\n+  double d329 = f1 ();\n+  double d330 = f1 ();\n+  double d331 = f1 ();\n+  double d332 = f1 ();\n+  double d333 = f1 ();\n+  double d334 = f1 ();\n+  double d335 = f1 ();\n+  double d336 = f1 ();\n+  double d337 = f1 ();\n+  double d338 = f1 ();\n+  double d339 = f1 ();\n+  double d340 = f1 ();\n+  double d341 = f1 ();\n+  double d342 = f1 ();\n+  double d343 = f1 ();\n+  double d344 = f1 ();\n+  double d345 = f1 ();\n+  double d346 = f1 ();\n+  double d347 = f1 ();\n+  double d348 = f1 ();\n+  double d349 = f1 ();\n+  double d350 = f1 ();\n+  double d351 = f1 ();\n+  double d352 = f1 ();\n+  double d353 = f1 ();\n+  double d354 = f1 ();\n+  double d355 = f1 ();\n+  double d356 = f1 ();\n+  double d357 = f1 ();\n+  double d358 = f1 ();\n+  double d359 = f1 ();\n+  double d360 = f1 ();\n+  double d361 = f1 ();\n+  double d362 = f1 ();\n+  double d363 = f1 ();\n+  double d364 = f1 ();\n+  double d365 = f1 ();\n+  double d366 = f1 ();\n+  double d367 = f1 ();\n+  double d368 = f1 ();\n+  double d369 = f1 ();\n+  double d370 = f1 ();\n+  double d371 = f1 ();\n+  double d372 = f1 ();\n+  double d373 = f1 ();\n+  double d374 = f1 ();\n+  double d375 = f1 ();\n+  double d376 = f1 ();\n+  double d377 = f1 ();\n+  double d378 = f1 ();\n+  double d379 = f1 ();\n+  double d380 = f1 ();\n+  double d381 = f1 ();\n+  double d382 = f1 ();\n+  double d383 = f1 ();\n+  double d384 = f1 ();\n+  double d385 = f1 ();\n+  double d386 = f1 ();\n+  double d387 = f1 ();\n+  double d388 = f1 ();\n+  double d389 = f1 ();\n+  double d390 = f1 ();\n+  double d391 = f1 ();\n+  double d392 = f1 ();\n+  double d393 = f1 ();\n+  double d394 = f1 ();\n+  double d395 = f1 ();\n+  double d396 = f1 ();\n+  double d397 = f1 ();\n+  double d398 = f1 ();\n+  double d399 = f1 ();\n+  double d400 = f1 ();\n+  double d401 = f1 ();\n+  double d402 = f1 ();\n+  double d403 = f1 ();\n+  double d404 = f1 ();\n+  double d405 = f1 ();\n+  double d406 = f1 ();\n+  double d407 = f1 ();\n+  double d408 = f1 ();\n+  double d409 = f1 ();\n+  double d410 = f1 ();\n+  double d411 = f1 ();\n+  double d412 = f1 ();\n+  double d413 = f1 ();\n+  double d414 = f1 ();\n+  double d415 = f1 ();\n+  double d416 = f1 ();\n+  double d417 = f1 ();\n+  double d418 = f1 ();\n+  double d419 = f1 ();\n+  double d420 = f1 ();\n+  double d421 = f1 ();\n+  double d422 = f1 ();\n+  double d423 = f1 ();\n+  double d424 = f1 ();\n+  double d425 = f1 ();\n+  double d426 = f1 ();\n+  double d427 = f1 ();\n+  double d428 = f1 ();\n+  double d429 = f1 ();\n+  double d430 = f1 ();\n+  double d431 = f1 ();\n+  double d432 = f1 ();\n+  double d433 = f1 ();\n+  double d434 = f1 ();\n+  double d435 = f1 ();\n+  double d436 = f1 ();\n+  double d437 = f1 ();\n+  double d438 = f1 ();\n+  double d439 = f1 ();\n+  double d440 = f1 ();\n+  double d441 = f1 ();\n+  double d442 = f1 ();\n+  double d443 = f1 ();\n+  double d444 = f1 ();\n+  double d445 = f1 ();\n+  double d446 = f1 ();\n+  double d447 = f1 ();\n+  double d448 = f1 ();\n+  double d449 = f1 ();\n+  double d450 = f1 ();\n+  double d451 = f1 ();\n+  double d452 = f1 ();\n+  double d453 = f1 ();\n+  double d454 = f1 ();\n+  double d455 = f1 ();\n+  double d456 = f1 ();\n+  double d457 = f1 ();\n+  double d458 = f1 ();\n+  double d459 = f1 ();\n+  double d460 = f1 ();\n+  double d461 = f1 ();\n+  double d462 = f1 ();\n+  double d463 = f1 ();\n+  double d464 = f1 ();\n+  double d465 = f1 ();\n+  double d466 = f1 ();\n+  double d467 = f1 ();\n+  double d468 = f1 ();\n+  double d469 = f1 ();\n+  double d470 = f1 ();\n+  double d471 = f1 ();\n+  double d472 = f1 ();\n+  double d473 = f1 ();\n+  double d474 = f1 ();\n+  double d475 = f1 ();\n+  double d476 = f1 ();\n+  double d477 = f1 ();\n+  double d478 = f1 ();\n+  double d479 = f1 ();\n+  double d480 = f1 ();\n+  double d481 = f1 ();\n+  double d482 = f1 ();\n+  double d483 = f1 ();\n+  double d484 = f1 ();\n+  double d485 = f1 ();\n+  double d486 = f1 ();\n+  double d487 = f1 ();\n+  double d488 = f1 ();\n+  double d489 = f1 ();\n+  double d490 = f1 ();\n+  double d491 = f1 ();\n+  double d492 = f1 ();\n+  double d493 = f1 ();\n+  double d494 = f1 ();\n+  double d495 = f1 ();\n+  double d496 = f1 ();\n+  double d497 = f1 ();\n+  double d498 = f1 ();\n+  double d499 = f1 ();\n+  double d500 = f1 ();\n+  double d501 = f1 ();\n+  double d502 = f1 ();\n+  double d503 = f1 ();\n+  double d504 = f1 ();\n+  double d505 = f1 ();\n+  double d506 = f1 ();\n+  double d507 = f1 ();\n+  double d508 = f1 ();\n+  double d509 = f1 ();\n+  double d510 = f1 ();\n+  double d511 = f1 ();\n+  double d512 = f1 ();\n+  double d513 = f1 ();\n+  double d514 = f1 ();\n+  double d515 = f1 ();\n+  double d516 = f1 ();\n+  double d517 = f1 ();\n+  double d518 = f1 ();\n+  double d519 = f1 ();\n+  double d520 = f1 ();\n+  double d521 = f1 ();\n+  double d522 = f1 ();\n+  double d523 = f1 ();\n+  double d524 = f1 ();\n+  double d525 = f1 ();\n+  double d526 = f1 ();\n+  double d527 = f1 ();\n+  double d528 = f1 ();\n+  double d529 = f1 ();\n+  double d530 = f1 ();\n+  double d531 = f1 ();\n+  double d532 = f1 ();\n+  double d533 = f1 ();\n+  double d534 = f1 ();\n+  double d535 = f1 ();\n+  double d536 = f1 ();\n+  double d537 = f1 ();\n+  double d538 = f1 ();\n+  double d539 = f1 ();\n+  double d540 = f1 ();\n+  double d541 = f1 ();\n+  double d542 = f1 ();\n+  double d543 = f1 ();\n+  double d544 = f1 ();\n+  double d545 = f1 ();\n+  double d546 = f1 ();\n+  double d547 = f1 ();\n+  double d548 = f1 ();\n+  double d549 = f1 ();\n+  double d550 = f1 ();\n+  double d551 = f1 ();\n+  double d552 = f1 ();\n+  double d553 = f1 ();\n+  double d554 = f1 ();\n+  double d555 = f1 ();\n+  double d556 = f1 ();\n+  double d557 = f1 ();\n+  double d558 = f1 ();\n+  double d559 = f1 ();\n+  double d560 = f1 ();\n+  double d561 = f1 ();\n+  double d562 = f1 ();\n+  double d563 = f1 ();\n+  double d564 = f1 ();\n+  double d565 = f1 ();\n+  double d566 = f1 ();\n+  double d567 = f1 ();\n+  double d568 = f1 ();\n+  double d569 = f1 ();\n+  double d570 = f1 ();\n+  double d571 = f1 ();\n+  double d572 = f1 ();\n+  double d573 = f1 ();\n+  double d574 = f1 ();\n+  double d575 = f1 ();\n+  double d576 = f1 ();\n+  double d577 = f1 ();\n+  double d578 = f1 ();\n+  double d579 = f1 ();\n+  double d580 = f1 ();\n+  double d581 = f1 ();\n+  double d582 = f1 ();\n+  double d583 = f1 ();\n+  double d584 = f1 ();\n+  double d585 = f1 ();\n+  double d586 = f1 ();\n+  double d587 = f1 ();\n+  double d588 = f1 ();\n+  double d589 = f1 ();\n+  double d590 = f1 ();\n+  double d591 = f1 ();\n+  double d592 = f1 ();\n+  double d593 = f1 ();\n+  double d594 = f1 ();\n+  double d595 = f1 ();\n+  double d596 = f1 ();\n+  double d597 = f1 ();\n+  double d598 = f1 ();\n+  double d599 = f1 ();\n+  double d600 = f1 ();\n+  double d601 = f1 ();\n+  double d602 = f1 ();\n+  double d603 = f1 ();\n+  double d604 = f1 ();\n+  double d605 = f1 ();\n+  double d606 = f1 ();\n+  double d607 = f1 ();\n+  double d608 = f1 ();\n+  double d609 = f1 ();\n+  double d610 = f1 ();\n+  double d611 = f1 ();\n+  double d612 = f1 ();\n+  double d613 = f1 ();\n+  double d614 = f1 ();\n+  double d615 = f1 ();\n+  double d616 = f1 ();\n+  double d617 = f1 ();\n+  double d618 = f1 ();\n+  double d619 = f1 ();\n+  double d620 = f1 ();\n+  double d621 = f1 ();\n+  double d622 = f1 ();\n+  double d623 = f1 ();\n+  double d624 = f1 ();\n+  double d625 = f1 ();\n+  double d626 = f1 ();\n+  double d627 = f1 ();\n+  double d628 = f1 ();\n+  double d629 = f1 ();\n+  double d630 = f1 ();\n+  double d631 = f1 ();\n+  double d632 = f1 ();\n+  double d633 = f1 ();\n+  double d634 = f1 ();\n+  double d635 = f1 ();\n+  double d636 = f1 ();\n+  double d637 = f1 ();\n+  double d638 = f1 ();\n+  double d639 = f1 ();\n+  double d640 = f1 ();\n+  double d641 = f1 ();\n+  double d642 = f1 ();\n+  double d643 = f1 ();\n+  double d644 = f1 ();\n+  double d645 = f1 ();\n+  double d646 = f1 ();\n+  double d647 = f1 ();\n+  double d648 = f1 ();\n+  double d649 = f1 ();\n+  double d650 = f1 ();\n+  double d651 = f1 ();\n+  double d652 = f1 ();\n+  double d653 = f1 ();\n+  double d654 = f1 ();\n+  double d655 = f1 ();\n+  double d656 = f1 ();\n+  double d657 = f1 ();\n+  double d658 = f1 ();\n+  double d659 = f1 ();\n+  double d660 = f1 ();\n+  double d661 = f1 ();\n+  double d662 = f1 ();\n+  double d663 = f1 ();\n+  double d664 = f1 ();\n+  double d665 = f1 ();\n+  double d666 = f1 ();\n+  double d667 = f1 ();\n+  double d668 = f1 ();\n+  double d669 = f1 ();\n+  double d670 = f1 ();\n+  double d671 = f1 ();\n+  double d672 = f1 ();\n+  double d673 = f1 ();\n+  double d674 = f1 ();\n+  double d675 = f1 ();\n+  double d676 = f1 ();\n+  double d677 = f1 ();\n+  double d678 = f1 ();\n+  double d679 = f1 ();\n+  double d680 = f1 ();\n+  double d681 = f1 ();\n+  double d682 = f1 ();\n+  double d683 = f1 ();\n+  double d684 = f1 ();\n+  double d685 = f1 ();\n+  double d686 = f1 ();\n+  double d687 = f1 ();\n+  double d688 = f1 ();\n+  double d689 = f1 ();\n+  double d690 = f1 ();\n+  double d691 = f1 ();\n+  double d692 = f1 ();\n+  double d693 = f1 ();\n+  double d694 = f1 ();\n+  double d695 = f1 ();\n+  double d696 = f1 ();\n+  double d697 = f1 ();\n+  double d698 = f1 ();\n+  double d699 = f1 ();\n+  double d700 = f1 ();\n+  double d701 = f1 ();\n+  double d702 = f1 ();\n+  double d703 = f1 ();\n+  double d704 = f1 ();\n+  double d705 = f1 ();\n+  double d706 = f1 ();\n+  double d707 = f1 ();\n+  double d708 = f1 ();\n+  double d709 = f1 ();\n+  double d710 = f1 ();\n+  double d711 = f1 ();\n+  double d712 = f1 ();\n+  double d713 = f1 ();\n+  double d714 = f1 ();\n+  double d715 = f1 ();\n+  double d716 = f1 ();\n+  double d717 = f1 ();\n+  double d718 = f1 ();\n+  double d719 = f1 ();\n+  double d720 = f1 ();\n+  double d721 = f1 ();\n+  double d722 = f1 ();\n+  double d723 = f1 ();\n+  double d724 = f1 ();\n+  double d725 = f1 ();\n+  double d726 = f1 ();\n+  double d727 = f1 ();\n+  double d728 = f1 ();\n+  double d729 = f1 ();\n+  double d730 = f1 ();\n+  double d731 = f1 ();\n+  double d732 = f1 ();\n+  double d733 = f1 ();\n+  double d734 = f1 ();\n+  double d735 = f1 ();\n+  double d736 = f1 ();\n+  double d737 = f1 ();\n+  double d738 = f1 ();\n+  double d739 = f1 ();\n+  double d740 = f1 ();\n+  double d741 = f1 ();\n+  double d742 = f1 ();\n+  double d743 = f1 ();\n+  double d744 = f1 ();\n+  double d745 = f1 ();\n+  double d746 = f1 ();\n+  double d747 = f1 ();\n+  double d748 = f1 ();\n+  double d749 = f1 ();\n+  double d750 = f1 ();\n+  double d751 = f1 ();\n+  double d752 = f1 ();\n+  double d753 = f1 ();\n+  double d754 = f1 ();\n+  double d755 = f1 ();\n+  double d756 = f1 ();\n+  double d757 = f1 ();\n+  double d758 = f1 ();\n+  double d759 = f1 ();\n+  double d760 = f1 ();\n+  double d761 = f1 ();\n+  double d762 = f1 ();\n+  double d763 = f1 ();\n+  double d764 = f1 ();\n+  double d765 = f1 ();\n+  double d766 = f1 ();\n+  double d767 = f1 ();\n+  double d768 = f1 ();\n+  double d769 = f1 ();\n+  double d770 = f1 ();\n+  double d771 = f1 ();\n+  double d772 = f1 ();\n+  double d773 = f1 ();\n+  double d774 = f1 ();\n+  double d775 = f1 ();\n+  double d776 = f1 ();\n+  double d777 = f1 ();\n+  double d778 = f1 ();\n+  double d779 = f1 ();\n+  double d780 = f1 ();\n+  double d781 = f1 ();\n+  double d782 = f1 ();\n+  double d783 = f1 ();\n+  double d784 = f1 ();\n+  double d785 = f1 ();\n+  double d786 = f1 ();\n+  double d787 = f1 ();\n+  double d788 = f1 ();\n+  double d789 = f1 ();\n+  double d790 = f1 ();\n+  double d791 = f1 ();\n+  double d792 = f1 ();\n+  double d793 = f1 ();\n+  double d794 = f1 ();\n+  double d795 = f1 ();\n+  double d796 = f1 ();\n+  double d797 = f1 ();\n+  double d798 = f1 ();\n+  double d799 = f1 ();\n+  double d800 = f1 ();\n+  double d801 = f1 ();\n+  double d802 = f1 ();\n+  double d803 = f1 ();\n+  double d804 = f1 ();\n+  double d805 = f1 ();\n+  double d806 = f1 ();\n+  double d807 = f1 ();\n+  double d808 = f1 ();\n+  double d809 = f1 ();\n+  double d810 = f1 ();\n+  double d811 = f1 ();\n+  double d812 = f1 ();\n+  double d813 = f1 ();\n+  double d814 = f1 ();\n+  double d815 = f1 ();\n+  double d816 = f1 ();\n+  double d817 = f1 ();\n+  double d818 = f1 ();\n+  double d819 = f1 ();\n+  double d820 = f1 ();\n+  double d821 = f1 ();\n+  double d822 = f1 ();\n+  double d823 = f1 ();\n+  double d824 = f1 ();\n+  double d825 = f1 ();\n+  double d826 = f1 ();\n+  double d827 = f1 ();\n+  double d828 = f1 ();\n+  double d829 = f1 ();\n+  double d830 = f1 ();\n+  double d831 = f1 ();\n+  double d832 = f1 ();\n+  double d833 = f1 ();\n+  double d834 = f1 ();\n+  double d835 = f1 ();\n+  double d836 = f1 ();\n+  double d837 = f1 ();\n+  double d838 = f1 ();\n+  double d839 = f1 ();\n+  double d840 = f1 ();\n+  double d841 = f1 ();\n+  double d842 = f1 ();\n+  double d843 = f1 ();\n+  double d844 = f1 ();\n+  double d845 = f1 ();\n+  double d846 = f1 ();\n+  double d847 = f1 ();\n+  double d848 = f1 ();\n+  double d849 = f1 ();\n+  double d850 = f1 ();\n+  double d851 = f1 ();\n+  double d852 = f1 ();\n+  double d853 = f1 ();\n+  double d854 = f1 ();\n+  double d855 = f1 ();\n+  double d856 = f1 ();\n+  double d857 = f1 ();\n+  double d858 = f1 ();\n+  double d859 = f1 ();\n+  double d860 = f1 ();\n+  double d861 = f1 ();\n+  double d862 = f1 ();\n+  double d863 = f1 ();\n+  double d864 = f1 ();\n+  double d865 = f1 ();\n+  double d866 = f1 ();\n+  double d867 = f1 ();\n+  double d868 = f1 ();\n+  double d869 = f1 ();\n+  double d870 = f1 ();\n+  double d871 = f1 ();\n+  double d872 = f1 ();\n+  double d873 = f1 ();\n+  double d874 = f1 ();\n+  double d875 = f1 ();\n+  double d876 = f1 ();\n+  double d877 = f1 ();\n+  double d878 = f1 ();\n+  double d879 = f1 ();\n+  double d880 = f1 ();\n+  double d881 = f1 ();\n+  double d882 = f1 ();\n+  double d883 = f1 ();\n+  double d884 = f1 ();\n+  double d885 = f1 ();\n+  double d886 = f1 ();\n+  double d887 = f1 ();\n+  double d888 = f1 ();\n+  double d889 = f1 ();\n+  double d890 = f1 ();\n+  double d891 = f1 ();\n+  double d892 = f1 ();\n+  double d893 = f1 ();\n+  double d894 = f1 ();\n+  double d895 = f1 ();\n+  double d896 = f1 ();\n+  double d897 = f1 ();\n+  double d898 = f1 ();\n+  double d899 = f1 ();\n+  double d900 = f1 ();\n+  double d901 = f1 ();\n+  double d902 = f1 ();\n+  double d903 = f1 ();\n+  double d904 = f1 ();\n+  double d905 = f1 ();\n+  double d906 = f1 ();\n+  double d907 = f1 ();\n+  double d908 = f1 ();\n+  double d909 = f1 ();\n+  double d910 = f1 ();\n+  double d911 = f1 ();\n+  double d912 = f1 ();\n+  double d913 = f1 ();\n+  double d914 = f1 ();\n+  double d915 = f1 ();\n+  double d916 = f1 ();\n+  double d917 = f1 ();\n+  double d918 = f1 ();\n+  double d919 = f1 ();\n+  double d920 = f1 ();\n+  double d921 = f1 ();\n+  double d922 = f1 ();\n+  double d923 = f1 ();\n+  double d924 = f1 ();\n+  double d925 = f1 ();\n+  double d926 = f1 ();\n+  double d927 = f1 ();\n+  double d928 = f1 ();\n+  double d929 = f1 ();\n+  double d930 = f1 ();\n+  double d931 = f1 ();\n+  double d932 = f1 ();\n+  double d933 = f1 ();\n+  double d934 = f1 ();\n+  double d935 = f1 ();\n+  double d936 = f1 ();\n+  double d937 = f1 ();\n+  double d938 = f1 ();\n+  double d939 = f1 ();\n+  double d940 = f1 ();\n+  double d941 = f1 ();\n+  double d942 = f1 ();\n+  double d943 = f1 ();\n+  double d944 = f1 ();\n+  double d945 = f1 ();\n+  double d946 = f1 ();\n+  double d947 = f1 ();\n+  double d948 = f1 ();\n+  double d949 = f1 ();\n+  double d950 = f1 ();\n+  double d951 = f1 ();\n+  double d952 = f1 ();\n+  double d953 = f1 ();\n+  double d954 = f1 ();\n+  double d955 = f1 ();\n+  double d956 = f1 ();\n+  double d957 = f1 ();\n+  double d958 = f1 ();\n+  double d959 = f1 ();\n+  double d960 = f1 ();\n+  double d961 = f1 ();\n+  double d962 = f1 ();\n+  double d963 = f1 ();\n+  double d964 = f1 ();\n+  double d965 = f1 ();\n+  double d966 = f1 ();\n+  double d967 = f1 ();\n+  double d968 = f1 ();\n+  double d969 = f1 ();\n+  double d970 = f1 ();\n+  double d971 = f1 ();\n+  double d972 = f1 ();\n+  double d973 = f1 ();\n+  double d974 = f1 ();\n+  double d975 = f1 ();\n+  double d976 = f1 ();\n+  double d977 = f1 ();\n+  double d978 = f1 ();\n+  double d979 = f1 ();\n+  double d980 = f1 ();\n+  double d981 = f1 ();\n+  double d982 = f1 ();\n+  double d983 = f1 ();\n+  double d984 = f1 ();\n+  double d985 = f1 ();\n+  double d986 = f1 ();\n+  double d987 = f1 ();\n+  double d988 = f1 ();\n+  double d989 = f1 ();\n+  double d990 = f1 ();\n+  double d991 = f1 ();\n+  double d992 = f1 ();\n+  double d993 = f1 ();\n+  double d994 = f1 ();\n+  double d995 = f1 ();\n+  double d996 = f1 ();\n+  double d997 = f1 ();\n+  double d998 = f1 ();\n+  double d999 = f1 ();\n+\n+  double x = 0;\n+  x = f2 (x, d000);\n+  x = f2 (x, d001);\n+  x = f2 (x, d002);\n+  x = f2 (x, d003);\n+  x = f2 (x, d004);\n+  x = f2 (x, d005);\n+  x = f2 (x, d006);\n+  x = f2 (x, d007);\n+  x = f2 (x, d008);\n+  x = f2 (x, d009);\n+  x = f2 (x, d010);\n+  x = f2 (x, d011);\n+  x = f2 (x, d012);\n+  x = f2 (x, d013);\n+  x = f2 (x, d014);\n+  x = f2 (x, d015);\n+  x = f2 (x, d016);\n+  x = f2 (x, d017);\n+  x = f2 (x, d018);\n+  x = f2 (x, d019);\n+  x = f2 (x, d020);\n+  x = f2 (x, d021);\n+  x = f2 (x, d022);\n+  x = f2 (x, d023);\n+  x = f2 (x, d024);\n+  x = f2 (x, d025);\n+  x = f2 (x, d026);\n+  x = f2 (x, d027);\n+  x = f2 (x, d028);\n+  x = f2 (x, d029);\n+  x = f2 (x, d030);\n+  x = f2 (x, d031);\n+  x = f2 (x, d032);\n+  x = f2 (x, d033);\n+  x = f2 (x, d034);\n+  x = f2 (x, d035);\n+  x = f2 (x, d036);\n+  x = f2 (x, d037);\n+  x = f2 (x, d038);\n+  x = f2 (x, d039);\n+  x = f2 (x, d040);\n+  x = f2 (x, d041);\n+  x = f2 (x, d042);\n+  x = f2 (x, d043);\n+  x = f2 (x, d044);\n+  x = f2 (x, d045);\n+  x = f2 (x, d046);\n+  x = f2 (x, d047);\n+  x = f2 (x, d048);\n+  x = f2 (x, d049);\n+  x = f2 (x, d050);\n+  x = f2 (x, d051);\n+  x = f2 (x, d052);\n+  x = f2 (x, d053);\n+  x = f2 (x, d054);\n+  x = f2 (x, d055);\n+  x = f2 (x, d056);\n+  x = f2 (x, d057);\n+  x = f2 (x, d058);\n+  x = f2 (x, d059);\n+  x = f2 (x, d060);\n+  x = f2 (x, d061);\n+  x = f2 (x, d062);\n+  x = f2 (x, d063);\n+  x = f2 (x, d064);\n+  x = f2 (x, d065);\n+  x = f2 (x, d066);\n+  x = f2 (x, d067);\n+  x = f2 (x, d068);\n+  x = f2 (x, d069);\n+  x = f2 (x, d070);\n+  x = f2 (x, d071);\n+  x = f2 (x, d072);\n+  x = f2 (x, d073);\n+  x = f2 (x, d074);\n+  x = f2 (x, d075);\n+  x = f2 (x, d076);\n+  x = f2 (x, d077);\n+  x = f2 (x, d078);\n+  x = f2 (x, d079);\n+  x = f2 (x, d080);\n+  x = f2 (x, d081);\n+  x = f2 (x, d082);\n+  x = f2 (x, d083);\n+  x = f2 (x, d084);\n+  x = f2 (x, d085);\n+  x = f2 (x, d086);\n+  x = f2 (x, d087);\n+  x = f2 (x, d088);\n+  x = f2 (x, d089);\n+  x = f2 (x, d090);\n+  x = f2 (x, d091);\n+  x = f2 (x, d092);\n+  x = f2 (x, d093);\n+  x = f2 (x, d094);\n+  x = f2 (x, d095);\n+  x = f2 (x, d096);\n+  x = f2 (x, d097);\n+  x = f2 (x, d098);\n+  x = f2 (x, d099);\n+  x = f2 (x, d100);\n+  x = f2 (x, d101);\n+  x = f2 (x, d102);\n+  x = f2 (x, d103);\n+  x = f2 (x, d104);\n+  x = f2 (x, d105);\n+  x = f2 (x, d106);\n+  x = f2 (x, d107);\n+  x = f2 (x, d108);\n+  x = f2 (x, d109);\n+  x = f2 (x, d110);\n+  x = f2 (x, d111);\n+  x = f2 (x, d112);\n+  x = f2 (x, d113);\n+  x = f2 (x, d114);\n+  x = f2 (x, d115);\n+  x = f2 (x, d116);\n+  x = f2 (x, d117);\n+  x = f2 (x, d118);\n+  x = f2 (x, d119);\n+  x = f2 (x, d120);\n+  x = f2 (x, d121);\n+  x = f2 (x, d122);\n+  x = f2 (x, d123);\n+  x = f2 (x, d124);\n+  x = f2 (x, d125);\n+  x = f2 (x, d126);\n+  x = f2 (x, d127);\n+  x = f2 (x, d128);\n+  x = f2 (x, d129);\n+  x = f2 (x, d130);\n+  x = f2 (x, d131);\n+  x = f2 (x, d132);\n+  x = f2 (x, d133);\n+  x = f2 (x, d134);\n+  x = f2 (x, d135);\n+  x = f2 (x, d136);\n+  x = f2 (x, d137);\n+  x = f2 (x, d138);\n+  x = f2 (x, d139);\n+  x = f2 (x, d140);\n+  x = f2 (x, d141);\n+  x = f2 (x, d142);\n+  x = f2 (x, d143);\n+  x = f2 (x, d144);\n+  x = f2 (x, d145);\n+  x = f2 (x, d146);\n+  x = f2 (x, d147);\n+  x = f2 (x, d148);\n+  x = f2 (x, d149);\n+  x = f2 (x, d150);\n+  x = f2 (x, d151);\n+  x = f2 (x, d152);\n+  x = f2 (x, d153);\n+  x = f2 (x, d154);\n+  x = f2 (x, d155);\n+  x = f2 (x, d156);\n+  x = f2 (x, d157);\n+  x = f2 (x, d158);\n+  x = f2 (x, d159);\n+  x = f2 (x, d160);\n+  x = f2 (x, d161);\n+  x = f2 (x, d162);\n+  x = f2 (x, d163);\n+  x = f2 (x, d164);\n+  x = f2 (x, d165);\n+  x = f2 (x, d166);\n+  x = f2 (x, d167);\n+  x = f2 (x, d168);\n+  x = f2 (x, d169);\n+  x = f2 (x, d170);\n+  x = f2 (x, d171);\n+  x = f2 (x, d172);\n+  x = f2 (x, d173);\n+  x = f2 (x, d174);\n+  x = f2 (x, d175);\n+  x = f2 (x, d176);\n+  x = f2 (x, d177);\n+  x = f2 (x, d178);\n+  x = f2 (x, d179);\n+  x = f2 (x, d180);\n+  x = f2 (x, d181);\n+  x = f2 (x, d182);\n+  x = f2 (x, d183);\n+  x = f2 (x, d184);\n+  x = f2 (x, d185);\n+  x = f2 (x, d186);\n+  x = f2 (x, d187);\n+  x = f2 (x, d188);\n+  x = f2 (x, d189);\n+  x = f2 (x, d190);\n+  x = f2 (x, d191);\n+  x = f2 (x, d192);\n+  x = f2 (x, d193);\n+  x = f2 (x, d194);\n+  x = f2 (x, d195);\n+  x = f2 (x, d196);\n+  x = f2 (x, d197);\n+  x = f2 (x, d198);\n+  x = f2 (x, d199);\n+  x = f2 (x, d200);\n+  x = f2 (x, d201);\n+  x = f2 (x, d202);\n+  x = f2 (x, d203);\n+  x = f2 (x, d204);\n+  x = f2 (x, d205);\n+  x = f2 (x, d206);\n+  x = f2 (x, d207);\n+  x = f2 (x, d208);\n+  x = f2 (x, d209);\n+  x = f2 (x, d210);\n+  x = f2 (x, d211);\n+  x = f2 (x, d212);\n+  x = f2 (x, d213);\n+  x = f2 (x, d214);\n+  x = f2 (x, d215);\n+  x = f2 (x, d216);\n+  x = f2 (x, d217);\n+  x = f2 (x, d218);\n+  x = f2 (x, d219);\n+  x = f2 (x, d220);\n+  x = f2 (x, d221);\n+  x = f2 (x, d222);\n+  x = f2 (x, d223);\n+  x = f2 (x, d224);\n+  x = f2 (x, d225);\n+  x = f2 (x, d226);\n+  x = f2 (x, d227);\n+  x = f2 (x, d228);\n+  x = f2 (x, d229);\n+  x = f2 (x, d230);\n+  x = f2 (x, d231);\n+  x = f2 (x, d232);\n+  x = f2 (x, d233);\n+  x = f2 (x, d234);\n+  x = f2 (x, d235);\n+  x = f2 (x, d236);\n+  x = f2 (x, d237);\n+  x = f2 (x, d238);\n+  x = f2 (x, d239);\n+  x = f2 (x, d240);\n+  x = f2 (x, d241);\n+  x = f2 (x, d242);\n+  x = f2 (x, d243);\n+  x = f2 (x, d244);\n+  x = f2 (x, d245);\n+  x = f2 (x, d246);\n+  x = f2 (x, d247);\n+  x = f2 (x, d248);\n+  x = f2 (x, d249);\n+  x = f2 (x, d250);\n+  x = f2 (x, d251);\n+  x = f2 (x, d252);\n+  x = f2 (x, d253);\n+  x = f2 (x, d254);\n+  x = f2 (x, d255);\n+  x = f2 (x, d256);\n+  x = f2 (x, d257);\n+  x = f2 (x, d258);\n+  x = f2 (x, d259);\n+  x = f2 (x, d260);\n+  x = f2 (x, d261);\n+  x = f2 (x, d262);\n+  x = f2 (x, d263);\n+  x = f2 (x, d264);\n+  x = f2 (x, d265);\n+  x = f2 (x, d266);\n+  x = f2 (x, d267);\n+  x = f2 (x, d268);\n+  x = f2 (x, d269);\n+  x = f2 (x, d270);\n+  x = f2 (x, d271);\n+  x = f2 (x, d272);\n+  x = f2 (x, d273);\n+  x = f2 (x, d274);\n+  x = f2 (x, d275);\n+  x = f2 (x, d276);\n+  x = f2 (x, d277);\n+  x = f2 (x, d278);\n+  x = f2 (x, d279);\n+  x = f2 (x, d280);\n+  x = f2 (x, d281);\n+  x = f2 (x, d282);\n+  x = f2 (x, d283);\n+  x = f2 (x, d284);\n+  x = f2 (x, d285);\n+  x = f2 (x, d286);\n+  x = f2 (x, d287);\n+  x = f2 (x, d288);\n+  x = f2 (x, d289);\n+  x = f2 (x, d290);\n+  x = f2 (x, d291);\n+  x = f2 (x, d292);\n+  x = f2 (x, d293);\n+  x = f2 (x, d294);\n+  x = f2 (x, d295);\n+  x = f2 (x, d296);\n+  x = f2 (x, d297);\n+  x = f2 (x, d298);\n+  x = f2 (x, d299);\n+  x = f2 (x, d300);\n+  x = f2 (x, d301);\n+  x = f2 (x, d302);\n+  x = f2 (x, d303);\n+  x = f2 (x, d304);\n+  x = f2 (x, d305);\n+  x = f2 (x, d306);\n+  x = f2 (x, d307);\n+  x = f2 (x, d308);\n+  x = f2 (x, d309);\n+  x = f2 (x, d310);\n+  x = f2 (x, d311);\n+  x = f2 (x, d312);\n+  x = f2 (x, d313);\n+  x = f2 (x, d314);\n+  x = f2 (x, d315);\n+  x = f2 (x, d316);\n+  x = f2 (x, d317);\n+  x = f2 (x, d318);\n+  x = f2 (x, d319);\n+  x = f2 (x, d320);\n+  x = f2 (x, d321);\n+  x = f2 (x, d322);\n+  x = f2 (x, d323);\n+  x = f2 (x, d324);\n+  x = f2 (x, d325);\n+  x = f2 (x, d326);\n+  x = f2 (x, d327);\n+  x = f2 (x, d328);\n+  x = f2 (x, d329);\n+  x = f2 (x, d330);\n+  x = f2 (x, d331);\n+  x = f2 (x, d332);\n+  x = f2 (x, d333);\n+  x = f2 (x, d334);\n+  x = f2 (x, d335);\n+  x = f2 (x, d336);\n+  x = f2 (x, d337);\n+  x = f2 (x, d338);\n+  x = f2 (x, d339);\n+  x = f2 (x, d340);\n+  x = f2 (x, d341);\n+  x = f2 (x, d342);\n+  x = f2 (x, d343);\n+  x = f2 (x, d344);\n+  x = f2 (x, d345);\n+  x = f2 (x, d346);\n+  x = f2 (x, d347);\n+  x = f2 (x, d348);\n+  x = f2 (x, d349);\n+  x = f2 (x, d350);\n+  x = f2 (x, d351);\n+  x = f2 (x, d352);\n+  x = f2 (x, d353);\n+  x = f2 (x, d354);\n+  x = f2 (x, d355);\n+  x = f2 (x, d356);\n+  x = f2 (x, d357);\n+  x = f2 (x, d358);\n+  x = f2 (x, d359);\n+  x = f2 (x, d360);\n+  x = f2 (x, d361);\n+  x = f2 (x, d362);\n+  x = f2 (x, d363);\n+  x = f2 (x, d364);\n+  x = f2 (x, d365);\n+  x = f2 (x, d366);\n+  x = f2 (x, d367);\n+  x = f2 (x, d368);\n+  x = f2 (x, d369);\n+  x = f2 (x, d370);\n+  x = f2 (x, d371);\n+  x = f2 (x, d372);\n+  x = f2 (x, d373);\n+  x = f2 (x, d374);\n+  x = f2 (x, d375);\n+  x = f2 (x, d376);\n+  x = f2 (x, d377);\n+  x = f2 (x, d378);\n+  x = f2 (x, d379);\n+  x = f2 (x, d380);\n+  x = f2 (x, d381);\n+  x = f2 (x, d382);\n+  x = f2 (x, d383);\n+  x = f2 (x, d384);\n+  x = f2 (x, d385);\n+  x = f2 (x, d386);\n+  x = f2 (x, d387);\n+  x = f2 (x, d388);\n+  x = f2 (x, d389);\n+  x = f2 (x, d390);\n+  x = f2 (x, d391);\n+  x = f2 (x, d392);\n+  x = f2 (x, d393);\n+  x = f2 (x, d394);\n+  x = f2 (x, d395);\n+  x = f2 (x, d396);\n+  x = f2 (x, d397);\n+  x = f2 (x, d398);\n+  x = f2 (x, d399);\n+  x = f2 (x, d400);\n+  x = f2 (x, d401);\n+  x = f2 (x, d402);\n+  x = f2 (x, d403);\n+  x = f2 (x, d404);\n+  x = f2 (x, d405);\n+  x = f2 (x, d406);\n+  x = f2 (x, d407);\n+  x = f2 (x, d408);\n+  x = f2 (x, d409);\n+  x = f2 (x, d410);\n+  x = f2 (x, d411);\n+  x = f2 (x, d412);\n+  x = f2 (x, d413);\n+  x = f2 (x, d414);\n+  x = f2 (x, d415);\n+  x = f2 (x, d416);\n+  x = f2 (x, d417);\n+  x = f2 (x, d418);\n+  x = f2 (x, d419);\n+  x = f2 (x, d420);\n+  x = f2 (x, d421);\n+  x = f2 (x, d422);\n+  x = f2 (x, d423);\n+  x = f2 (x, d424);\n+  x = f2 (x, d425);\n+  x = f2 (x, d426);\n+  x = f2 (x, d427);\n+  x = f2 (x, d428);\n+  x = f2 (x, d429);\n+  x = f2 (x, d430);\n+  x = f2 (x, d431);\n+  x = f2 (x, d432);\n+  x = f2 (x, d433);\n+  x = f2 (x, d434);\n+  x = f2 (x, d435);\n+  x = f2 (x, d436);\n+  x = f2 (x, d437);\n+  x = f2 (x, d438);\n+  x = f2 (x, d439);\n+  x = f2 (x, d440);\n+  x = f2 (x, d441);\n+  x = f2 (x, d442);\n+  x = f2 (x, d443);\n+  x = f2 (x, d444);\n+  x = f2 (x, d445);\n+  x = f2 (x, d446);\n+  x = f2 (x, d447);\n+  x = f2 (x, d448);\n+  x = f2 (x, d449);\n+  x = f2 (x, d450);\n+  x = f2 (x, d451);\n+  x = f2 (x, d452);\n+  x = f2 (x, d453);\n+  x = f2 (x, d454);\n+  x = f2 (x, d455);\n+  x = f2 (x, d456);\n+  x = f2 (x, d457);\n+  x = f2 (x, d458);\n+  x = f2 (x, d459);\n+  x = f2 (x, d460);\n+  x = f2 (x, d461);\n+  x = f2 (x, d462);\n+  x = f2 (x, d463);\n+  x = f2 (x, d464);\n+  x = f2 (x, d465);\n+  x = f2 (x, d466);\n+  x = f2 (x, d467);\n+  x = f2 (x, d468);\n+  x = f2 (x, d469);\n+  x = f2 (x, d470);\n+  x = f2 (x, d471);\n+  x = f2 (x, d472);\n+  x = f2 (x, d473);\n+  x = f2 (x, d474);\n+  x = f2 (x, d475);\n+  x = f2 (x, d476);\n+  x = f2 (x, d477);\n+  x = f2 (x, d478);\n+  x = f2 (x, d479);\n+  x = f2 (x, d480);\n+  x = f2 (x, d481);\n+  x = f2 (x, d482);\n+  x = f2 (x, d483);\n+  x = f2 (x, d484);\n+  x = f2 (x, d485);\n+  x = f2 (x, d486);\n+  x = f2 (x, d487);\n+  x = f2 (x, d488);\n+  x = f2 (x, d489);\n+  x = f2 (x, d490);\n+  x = f2 (x, d491);\n+  x = f2 (x, d492);\n+  x = f2 (x, d493);\n+  x = f2 (x, d494);\n+  x = f2 (x, d495);\n+  x = f2 (x, d496);\n+  x = f2 (x, d497);\n+  x = f2 (x, d498);\n+  x = f2 (x, d499);\n+  x = f2 (x, d500);\n+  x = f2 (x, d501);\n+  x = f2 (x, d502);\n+  x = f2 (x, d503);\n+  x = f2 (x, d504);\n+  x = f2 (x, d505);\n+  x = f2 (x, d506);\n+  x = f2 (x, d507);\n+  x = f2 (x, d508);\n+  x = f2 (x, d509);\n+  x = f2 (x, d510);\n+  x = f2 (x, d511);\n+  x = f2 (x, d512);\n+  x = f2 (x, d513);\n+  x = f2 (x, d514);\n+  x = f2 (x, d515);\n+  x = f2 (x, d516);\n+  x = f2 (x, d517);\n+  x = f2 (x, d518);\n+  x = f2 (x, d519);\n+  x = f2 (x, d520);\n+  x = f2 (x, d521);\n+  x = f2 (x, d522);\n+  x = f2 (x, d523);\n+  x = f2 (x, d524);\n+  x = f2 (x, d525);\n+  x = f2 (x, d526);\n+  x = f2 (x, d527);\n+  x = f2 (x, d528);\n+  x = f2 (x, d529);\n+  x = f2 (x, d530);\n+  x = f2 (x, d531);\n+  x = f2 (x, d532);\n+  x = f2 (x, d533);\n+  x = f2 (x, d534);\n+  x = f2 (x, d535);\n+  x = f2 (x, d536);\n+  x = f2 (x, d537);\n+  x = f2 (x, d538);\n+  x = f2 (x, d539);\n+  x = f2 (x, d540);\n+  x = f2 (x, d541);\n+  x = f2 (x, d542);\n+  x = f2 (x, d543);\n+  x = f2 (x, d544);\n+  x = f2 (x, d545);\n+  x = f2 (x, d546);\n+  x = f2 (x, d547);\n+  x = f2 (x, d548);\n+  x = f2 (x, d549);\n+  x = f2 (x, d550);\n+  x = f2 (x, d551);\n+  x = f2 (x, d552);\n+  x = f2 (x, d553);\n+  x = f2 (x, d554);\n+  x = f2 (x, d555);\n+  x = f2 (x, d556);\n+  x = f2 (x, d557);\n+  x = f2 (x, d558);\n+  x = f2 (x, d559);\n+  x = f2 (x, d560);\n+  x = f2 (x, d561);\n+  x = f2 (x, d562);\n+  x = f2 (x, d563);\n+  x = f2 (x, d564);\n+  x = f2 (x, d565);\n+  x = f2 (x, d566);\n+  x = f2 (x, d567);\n+  x = f2 (x, d568);\n+  x = f2 (x, d569);\n+  x = f2 (x, d570);\n+  x = f2 (x, d571);\n+  x = f2 (x, d572);\n+  x = f2 (x, d573);\n+  x = f2 (x, d574);\n+  x = f2 (x, d575);\n+  x = f2 (x, d576);\n+  x = f2 (x, d577);\n+  x = f2 (x, d578);\n+  x = f2 (x, d579);\n+  x = f2 (x, d580);\n+  x = f2 (x, d581);\n+  x = f2 (x, d582);\n+  x = f2 (x, d583);\n+  x = f2 (x, d584);\n+  x = f2 (x, d585);\n+  x = f2 (x, d586);\n+  x = f2 (x, d587);\n+  x = f2 (x, d588);\n+  x = f2 (x, d589);\n+  x = f2 (x, d590);\n+  x = f2 (x, d591);\n+  x = f2 (x, d592);\n+  x = f2 (x, d593);\n+  x = f2 (x, d594);\n+  x = f2 (x, d595);\n+  x = f2 (x, d596);\n+  x = f2 (x, d597);\n+  x = f2 (x, d598);\n+  x = f2 (x, d599);\n+  x = f2 (x, d600);\n+  x = f2 (x, d601);\n+  x = f2 (x, d602);\n+  x = f2 (x, d603);\n+  x = f2 (x, d604);\n+  x = f2 (x, d605);\n+  x = f2 (x, d606);\n+  x = f2 (x, d607);\n+  x = f2 (x, d608);\n+  x = f2 (x, d609);\n+  x = f2 (x, d610);\n+  x = f2 (x, d611);\n+  x = f2 (x, d612);\n+  x = f2 (x, d613);\n+  x = f2 (x, d614);\n+  x = f2 (x, d615);\n+  x = f2 (x, d616);\n+  x = f2 (x, d617);\n+  x = f2 (x, d618);\n+  x = f2 (x, d619);\n+  x = f2 (x, d620);\n+  x = f2 (x, d621);\n+  x = f2 (x, d622);\n+  x = f2 (x, d623);\n+  x = f2 (x, d624);\n+  x = f2 (x, d625);\n+  x = f2 (x, d626);\n+  x = f2 (x, d627);\n+  x = f2 (x, d628);\n+  x = f2 (x, d629);\n+  x = f2 (x, d630);\n+  x = f2 (x, d631);\n+  x = f2 (x, d632);\n+  x = f2 (x, d633);\n+  x = f2 (x, d634);\n+  x = f2 (x, d635);\n+  x = f2 (x, d636);\n+  x = f2 (x, d637);\n+  x = f2 (x, d638);\n+  x = f2 (x, d639);\n+  x = f2 (x, d640);\n+  x = f2 (x, d641);\n+  x = f2 (x, d642);\n+  x = f2 (x, d643);\n+  x = f2 (x, d644);\n+  x = f2 (x, d645);\n+  x = f2 (x, d646);\n+  x = f2 (x, d647);\n+  x = f2 (x, d648);\n+  x = f2 (x, d649);\n+  x = f2 (x, d650);\n+  x = f2 (x, d651);\n+  x = f2 (x, d652);\n+  x = f2 (x, d653);\n+  x = f2 (x, d654);\n+  x = f2 (x, d655);\n+  x = f2 (x, d656);\n+  x = f2 (x, d657);\n+  x = f2 (x, d658);\n+  x = f2 (x, d659);\n+  x = f2 (x, d660);\n+  x = f2 (x, d661);\n+  x = f2 (x, d662);\n+  x = f2 (x, d663);\n+  x = f2 (x, d664);\n+  x = f2 (x, d665);\n+  x = f2 (x, d666);\n+  x = f2 (x, d667);\n+  x = f2 (x, d668);\n+  x = f2 (x, d669);\n+  x = f2 (x, d670);\n+  x = f2 (x, d671);\n+  x = f2 (x, d672);\n+  x = f2 (x, d673);\n+  x = f2 (x, d674);\n+  x = f2 (x, d675);\n+  x = f2 (x, d676);\n+  x = f2 (x, d677);\n+  x = f2 (x, d678);\n+  x = f2 (x, d679);\n+  x = f2 (x, d680);\n+  x = f2 (x, d681);\n+  x = f2 (x, d682);\n+  x = f2 (x, d683);\n+  x = f2 (x, d684);\n+  x = f2 (x, d685);\n+  x = f2 (x, d686);\n+  x = f2 (x, d687);\n+  x = f2 (x, d688);\n+  x = f2 (x, d689);\n+  x = f2 (x, d690);\n+  x = f2 (x, d691);\n+  x = f2 (x, d692);\n+  x = f2 (x, d693);\n+  x = f2 (x, d694);\n+  x = f2 (x, d695);\n+  x = f2 (x, d696);\n+  x = f2 (x, d697);\n+  x = f2 (x, d698);\n+  x = f2 (x, d699);\n+  x = f2 (x, d700);\n+  x = f2 (x, d701);\n+  x = f2 (x, d702);\n+  x = f2 (x, d703);\n+  x = f2 (x, d704);\n+  x = f2 (x, d705);\n+  x = f2 (x, d706);\n+  x = f2 (x, d707);\n+  x = f2 (x, d708);\n+  x = f2 (x, d709);\n+  x = f2 (x, d710);\n+  x = f2 (x, d711);\n+  x = f2 (x, d712);\n+  x = f2 (x, d713);\n+  x = f2 (x, d714);\n+  x = f2 (x, d715);\n+  x = f2 (x, d716);\n+  x = f2 (x, d717);\n+  x = f2 (x, d718);\n+  x = f2 (x, d719);\n+  x = f2 (x, d720);\n+  x = f2 (x, d721);\n+  x = f2 (x, d722);\n+  x = f2 (x, d723);\n+  x = f2 (x, d724);\n+  x = f2 (x, d725);\n+  x = f2 (x, d726);\n+  x = f2 (x, d727);\n+  x = f2 (x, d728);\n+  x = f2 (x, d729);\n+  x = f2 (x, d730);\n+  x = f2 (x, d731);\n+  x = f2 (x, d732);\n+  x = f2 (x, d733);\n+  x = f2 (x, d734);\n+  x = f2 (x, d735);\n+  x = f2 (x, d736);\n+  x = f2 (x, d737);\n+  x = f2 (x, d738);\n+  x = f2 (x, d739);\n+  x = f2 (x, d740);\n+  x = f2 (x, d741);\n+  x = f2 (x, d742);\n+  x = f2 (x, d743);\n+  x = f2 (x, d744);\n+  x = f2 (x, d745);\n+  x = f2 (x, d746);\n+  x = f2 (x, d747);\n+  x = f2 (x, d748);\n+  x = f2 (x, d749);\n+  x = f2 (x, d750);\n+  x = f2 (x, d751);\n+  x = f2 (x, d752);\n+  x = f2 (x, d753);\n+  x = f2 (x, d754);\n+  x = f2 (x, d755);\n+  x = f2 (x, d756);\n+  x = f2 (x, d757);\n+  x = f2 (x, d758);\n+  x = f2 (x, d759);\n+  x = f2 (x, d760);\n+  x = f2 (x, d761);\n+  x = f2 (x, d762);\n+  x = f2 (x, d763);\n+  x = f2 (x, d764);\n+  x = f2 (x, d765);\n+  x = f2 (x, d766);\n+  x = f2 (x, d767);\n+  x = f2 (x, d768);\n+  x = f2 (x, d769);\n+  x = f2 (x, d770);\n+  x = f2 (x, d771);\n+  x = f2 (x, d772);\n+  x = f2 (x, d773);\n+  x = f2 (x, d774);\n+  x = f2 (x, d775);\n+  x = f2 (x, d776);\n+  x = f2 (x, d777);\n+  x = f2 (x, d778);\n+  x = f2 (x, d779);\n+  x = f2 (x, d780);\n+  x = f2 (x, d781);\n+  x = f2 (x, d782);\n+  x = f2 (x, d783);\n+  x = f2 (x, d784);\n+  x = f2 (x, d785);\n+  x = f2 (x, d786);\n+  x = f2 (x, d787);\n+  x = f2 (x, d788);\n+  x = f2 (x, d789);\n+  x = f2 (x, d790);\n+  x = f2 (x, d791);\n+  x = f2 (x, d792);\n+  x = f2 (x, d793);\n+  x = f2 (x, d794);\n+  x = f2 (x, d795);\n+  x = f2 (x, d796);\n+  x = f2 (x, d797);\n+  x = f2 (x, d798);\n+  x = f2 (x, d799);\n+  x = f2 (x, d800);\n+  x = f2 (x, d801);\n+  x = f2 (x, d802);\n+  x = f2 (x, d803);\n+  x = f2 (x, d804);\n+  x = f2 (x, d805);\n+  x = f2 (x, d806);\n+  x = f2 (x, d807);\n+  x = f2 (x, d808);\n+  x = f2 (x, d809);\n+  x = f2 (x, d810);\n+  x = f2 (x, d811);\n+  x = f2 (x, d812);\n+  x = f2 (x, d813);\n+  x = f2 (x, d814);\n+  x = f2 (x, d815);\n+  x = f2 (x, d816);\n+  x = f2 (x, d817);\n+  x = f2 (x, d818);\n+  x = f2 (x, d819);\n+  x = f2 (x, d820);\n+  x = f2 (x, d821);\n+  x = f2 (x, d822);\n+  x = f2 (x, d823);\n+  x = f2 (x, d824);\n+  x = f2 (x, d825);\n+  x = f2 (x, d826);\n+  x = f2 (x, d827);\n+  x = f2 (x, d828);\n+  x = f2 (x, d829);\n+  x = f2 (x, d830);\n+  x = f2 (x, d831);\n+  x = f2 (x, d832);\n+  x = f2 (x, d833);\n+  x = f2 (x, d834);\n+  x = f2 (x, d835);\n+  x = f2 (x, d836);\n+  x = f2 (x, d837);\n+  x = f2 (x, d838);\n+  x = f2 (x, d839);\n+  x = f2 (x, d840);\n+  x = f2 (x, d841);\n+  x = f2 (x, d842);\n+  x = f2 (x, d843);\n+  x = f2 (x, d844);\n+  x = f2 (x, d845);\n+  x = f2 (x, d846);\n+  x = f2 (x, d847);\n+  x = f2 (x, d848);\n+  x = f2 (x, d849);\n+  x = f2 (x, d850);\n+  x = f2 (x, d851);\n+  x = f2 (x, d852);\n+  x = f2 (x, d853);\n+  x = f2 (x, d854);\n+  x = f2 (x, d855);\n+  x = f2 (x, d856);\n+  x = f2 (x, d857);\n+  x = f2 (x, d858);\n+  x = f2 (x, d859);\n+  x = f2 (x, d860);\n+  x = f2 (x, d861);\n+  x = f2 (x, d862);\n+  x = f2 (x, d863);\n+  x = f2 (x, d864);\n+  x = f2 (x, d865);\n+  x = f2 (x, d866);\n+  x = f2 (x, d867);\n+  x = f2 (x, d868);\n+  x = f2 (x, d869);\n+  x = f2 (x, d870);\n+  x = f2 (x, d871);\n+  x = f2 (x, d872);\n+  x = f2 (x, d873);\n+  x = f2 (x, d874);\n+  x = f2 (x, d875);\n+  x = f2 (x, d876);\n+  x = f2 (x, d877);\n+  x = f2 (x, d878);\n+  x = f2 (x, d879);\n+  x = f2 (x, d880);\n+  x = f2 (x, d881);\n+  x = f2 (x, d882);\n+  x = f2 (x, d883);\n+  x = f2 (x, d884);\n+  x = f2 (x, d885);\n+  x = f2 (x, d886);\n+  x = f2 (x, d887);\n+  x = f2 (x, d888);\n+  x = f2 (x, d889);\n+  x = f2 (x, d890);\n+  x = f2 (x, d891);\n+  x = f2 (x, d892);\n+  x = f2 (x, d893);\n+  x = f2 (x, d894);\n+  x = f2 (x, d895);\n+  x = f2 (x, d896);\n+  x = f2 (x, d897);\n+  x = f2 (x, d898);\n+  x = f2 (x, d899);\n+  x = f2 (x, d900);\n+  x = f2 (x, d901);\n+  x = f2 (x, d902);\n+  x = f2 (x, d903);\n+  x = f2 (x, d904);\n+  x = f2 (x, d905);\n+  x = f2 (x, d906);\n+  x = f2 (x, d907);\n+  x = f2 (x, d908);\n+  x = f2 (x, d909);\n+  x = f2 (x, d910);\n+  x = f2 (x, d911);\n+  x = f2 (x, d912);\n+  x = f2 (x, d913);\n+  x = f2 (x, d914);\n+  x = f2 (x, d915);\n+  x = f2 (x, d916);\n+  x = f2 (x, d917);\n+  x = f2 (x, d918);\n+  x = f2 (x, d919);\n+  x = f2 (x, d920);\n+  x = f2 (x, d921);\n+  x = f2 (x, d922);\n+  x = f2 (x, d923);\n+  x = f2 (x, d924);\n+  x = f2 (x, d925);\n+  x = f2 (x, d926);\n+  x = f2 (x, d927);\n+  x = f2 (x, d928);\n+  x = f2 (x, d929);\n+  x = f2 (x, d930);\n+  x = f2 (x, d931);\n+  x = f2 (x, d932);\n+  x = f2 (x, d933);\n+  x = f2 (x, d934);\n+  x = f2 (x, d935);\n+  x = f2 (x, d936);\n+  x = f2 (x, d937);\n+  x = f2 (x, d938);\n+  x = f2 (x, d939);\n+  x = f2 (x, d940);\n+  x = f2 (x, d941);\n+  x = f2 (x, d942);\n+  x = f2 (x, d943);\n+  x = f2 (x, d944);\n+  x = f2 (x, d945);\n+  x = f2 (x, d946);\n+  x = f2 (x, d947);\n+  x = f2 (x, d948);\n+  x = f2 (x, d949);\n+  x = f2 (x, d950);\n+  x = f2 (x, d951);\n+  x = f2 (x, d952);\n+  x = f2 (x, d953);\n+  x = f2 (x, d954);\n+  x = f2 (x, d955);\n+  x = f2 (x, d956);\n+  x = f2 (x, d957);\n+  x = f2 (x, d958);\n+  x = f2 (x, d959);\n+  x = f2 (x, d960);\n+  x = f2 (x, d961);\n+  x = f2 (x, d962);\n+  x = f2 (x, d963);\n+  x = f2 (x, d964);\n+  x = f2 (x, d965);\n+  x = f2 (x, d966);\n+  x = f2 (x, d967);\n+  x = f2 (x, d968);\n+  x = f2 (x, d969);\n+  x = f2 (x, d970);\n+  x = f2 (x, d971);\n+  x = f2 (x, d972);\n+  x = f2 (x, d973);\n+  x = f2 (x, d974);\n+  x = f2 (x, d975);\n+  x = f2 (x, d976);\n+  x = f2 (x, d977);\n+  x = f2 (x, d978);\n+  x = f2 (x, d979);\n+  x = f2 (x, d980);\n+  x = f2 (x, d981);\n+  x = f2 (x, d982);\n+  x = f2 (x, d983);\n+  x = f2 (x, d984);\n+  x = f2 (x, d985);\n+  x = f2 (x, d986);\n+  x = f2 (x, d987);\n+  x = f2 (x, d988);\n+  x = f2 (x, d989);\n+  x = f2 (x, d990);\n+  x = f2 (x, d991);\n+  x = f2 (x, d992);\n+  x = f2 (x, d993);\n+  x = f2 (x, d994);\n+  x = f2 (x, d995);\n+  x = f2 (x, d996);\n+  x = f2 (x, d997);\n+  x = f2 (x, d998);\n+  x = f2 (x, d999);\n+  return x;\n+}\n+\n+/* { dg-final { scan-rtl-dump-times \"Stack clash inline probes\" 1 \"pro_and_epilogue\" } } */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash residual allocation in prologue\" 1 \"pro_and_epilogue\" } } */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash not noreturn\" 1 \"pro_and_epilogue\" } } */\n+\n+/* f3 is not a leaf\n+/* { dg-final { scan-rtl-dump-times \"Stack clash no frame pointer needed\" 1 \"pro_and_epilogue\" { target { ! frame_pointer_for_non_leaf } } } } */\n+/* { dg-final { scan-rtl-dump-times \"Stack clash frame pointer needed\" 1 \"pro_and_epilogue\" { target { frame_pointer_for_non_leaf } } } } */"}, {"sha": "43d3c2c196dda7a74da442f65648a3e7b12686bd", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7a09c353842f38c05b8cb171efa9784ab84862/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=8e7a09c353842f38c05b8cb171efa9784ab84862", "patch": "@@ -8635,11 +8635,15 @@ proc check_effective_target_autoincdec { } {\n proc check_effective_target_supports_stack_clash_protection { } {\n \n    # Temporary until the target bits are fully ACK'd.\n-#  if { [istarget aarch*-*-*] || [istarget x86_64-*-*]\n-#       || [istarget i?86-*-*] || [istarget s390*-*-*]\n+#  if { [istarget aarch*-*-*]\n+#       || [istarget s390*-*-*]\n #       || [istarget powerpc*-*-*] || [istarget rs6000*-*-*] } {\n #\treturn 1\n #  }\n+\n+    if { [istarget x86_64-*-*] || [istarget i?86-*-*] } {\n+\treturn 1\n+    }\n   return 0\n }\n "}]}