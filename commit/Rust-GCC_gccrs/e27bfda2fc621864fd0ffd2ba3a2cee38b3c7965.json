{"sha": "e27bfda2fc621864fd0ffd2ba3a2cee38b3c7965", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI3YmZkYTJmYzYyMTg2NGZkMGZmZDJiYTNhMmNlZTM4YjNjNzk2NQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-11-07T11:43:57Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-11-07T11:43:57Z"}, "message": "[AArch64] Fix PR target/77822: Use tighter predicates for zero_extract patterns\n\n\tPR target/77822\n\t* config/aarch64/aarch64.md (*tb<optab><mode>1): Use\n\taarch64_simd_shift_imm_<mode> predicate for operand 1.\n\t(<optab>, ANY_EXTRACT): Use tighter predicates on operands 2 and 3\n\tto restrict them to an appropriate range and add FAIL check if the\n\tregion they specify is out of range.  Delete useless constraint\n\tstrings.\n\t(*<optab><mode>, ANY_EXTRACT): Add appropriate predicates on operands\n\t2 and 3 to restrict their range and add pattern predicate.\n\n\t* g++.dg/torture/pr77822.C: New test.\n\nFrom-SVN: r241898", "tree": {"sha": "b0f153e7129725b8e57e7efb443bdddfc0ab95d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0f153e7129725b8e57e7efb443bdddfc0ab95d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e27bfda2fc621864fd0ffd2ba3a2cee38b3c7965", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e27bfda2fc621864fd0ffd2ba3a2cee38b3c7965", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e27bfda2fc621864fd0ffd2ba3a2cee38b3c7965", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e27bfda2fc621864fd0ffd2ba3a2cee38b3c7965/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "00d6b7a1a7959ba0814bd4e8af368efc2f351487", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d6b7a1a7959ba0814bd4e8af368efc2f351487", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d6b7a1a7959ba0814bd4e8af368efc2f351487"}], "stats": {"total": 73, "additions": 65, "deletions": 8}, "files": [{"sha": "1bc2934e5c0275f9a0182e02e5e19be977bf29a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e27bfda2fc621864fd0ffd2ba3a2cee38b3c7965/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e27bfda2fc621864fd0ffd2ba3a2cee38b3c7965/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e27bfda2fc621864fd0ffd2ba3a2cee38b3c7965", "patch": "@@ -1,3 +1,15 @@\n+2016-11-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/77822\n+\t* config/aarch64/aarch64.md (*tb<optab><mode>1): Use\n+\taarch64_simd_shift_imm_<mode> predicate for operand 1.\n+\t(<optab>, ANY_EXTRACT): Use tighter predicates on operands 2 and 3\n+\tto restrict them to an appropriate range and add FAIL check if the\n+\tregion they specify is out of range.  Delete useless constraint\n+\tstrings.\n+\t(*<optab><mode>, ANY_EXTRACT): Add appropriate predicates on operands\n+\t2 and 3 to restrict their range and add pattern predicate.\n+\n 2016-11-07  Martin Liska  <mliska@suse.cz>\n \n \t* asan.c (enum asan_check_flags): Move the enum to header file."}, {"sha": "46eaa30b1593444279ea495eb19a926e9b78702b", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e27bfda2fc621864fd0ffd2ba3a2cee38b3c7965/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e27bfda2fc621864fd0ffd2ba3a2cee38b3c7965/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=e27bfda2fc621864fd0ffd2ba3a2cee38b3c7965", "patch": "@@ -639,7 +639,8 @@\n   [(set (pc) (if_then_else\n \t      (EQL (zero_extract:DI (match_operand:GPI 0 \"register_operand\" \"r\")\n \t\t\t\t    (const_int 1)\n-\t\t\t\t    (match_operand 1 \"const_int_operand\" \"n\"))\n+\t\t\t\t    (match_operand 1\n+\t\t\t\t      \"aarch64_simd_shift_imm_<mode>\" \"n\"))\n \t\t   (const_int 0))\n \t     (label_ref (match_operand 2 \"\" \"\"))\n \t     (pc)))\n@@ -4268,19 +4269,28 @@\n \n (define_expand \"<optab>\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(ANY_EXTRACT:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t\t(match_operand 2 \"const_int_operand\" \"n\")\n-\t\t\t(match_operand 3 \"const_int_operand\" \"n\")))]\n-  \"\"\n+\t(ANY_EXTRACT:DI (match_operand:DI 1 \"register_operand\")\n+\t\t\t(match_operand 2\n+\t\t\t  \"aarch64_simd_shift_imm_offset_di\")\n+\t\t\t(match_operand 3 \"aarch64_simd_shift_imm_di\")))]\n   \"\"\n+  {\n+    if (!IN_RANGE (INTVAL (operands[2]) + INTVAL (operands[3]),\n+\t\t   1, GET_MODE_BITSIZE (DImode) - 1))\n+     FAIL;\n+  }\n )\n \n+\n (define_insn \"*<optab><mode>\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(ANY_EXTRACT:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n-\t\t\t (match_operand 2 \"const_int_operand\" \"n\")\n-\t\t\t (match_operand 3 \"const_int_operand\" \"n\")))]\n-  \"\"\n+\t\t\t (match_operand 2\n+\t\t\t   \"aarch64_simd_shift_imm_offset_<mode>\" \"n\")\n+\t\t\t (match_operand 3\n+\t\t\t   \"aarch64_simd_shift_imm_<mode>\" \"n\")))]\n+  \"IN_RANGE (INTVAL (operands[2]) + INTVAL (operands[3]),\n+\t     1, GET_MODE_BITSIZE (<MODE>mode) - 1)\"\n   \"<su>bfx\\\\t%<w>0, %<w>1, %3, %2\"\n   [(set_attr \"type\" \"bfm\")]\n )"}, {"sha": "7094c885ab4a91a867a2fb1f68fb6e2bb3f0f158", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e27bfda2fc621864fd0ffd2ba3a2cee38b3c7965/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e27bfda2fc621864fd0ffd2ba3a2cee38b3c7965/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e27bfda2fc621864fd0ffd2ba3a2cee38b3c7965", "patch": "@@ -1,3 +1,8 @@\n+2016-11-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/77822\n+\t* g++.dg/torture/pr77822.C: New test.\n+\n 2016-11-07  Martin Liska  <mliska@suse.cz>\n \n \t* c-c++-common/asan/force-inline-opt0-1.c: Disable"}, {"sha": "4dc428b63eee981bda04e1faa29bb97e3986dca9", "filename": "gcc/testsuite/g++.dg/torture/pr77822.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e27bfda2fc621864fd0ffd2ba3a2cee38b3c7965/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr77822.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e27bfda2fc621864fd0ffd2ba3a2cee38b3c7965/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr77822.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr77822.C?ref=e27bfda2fc621864fd0ffd2ba3a2cee38b3c7965", "patch": "@@ -0,0 +1,30 @@\n+// PR target/77822\n+// { dg-do compile }\n+\n+using UINT8 = char;\n+using UINT32 = int;\n+using UINT64 = long;\n+class A\n+{\n+  void m_fn1 ();\n+  struct B\n+  {\n+    UINT32 m_multiplier;\n+  };\n+  UINT8 m_datawidth;\n+  UINT8 m_subunits;\n+  B m_subunit_infos[];\n+};\n+int a;\n+UINT64 b;\n+void\n+A::m_fn1 ()\n+{\n+  int c = 32, d = m_datawidth / c;\n+  for (int e = 0; e < d; e++)\n+    {\n+      UINT32 f = e * 32;\n+      if (b >> f & 1)\n+\tm_subunit_infos[m_subunits].m_multiplier = a;\n+    }\n+}"}]}