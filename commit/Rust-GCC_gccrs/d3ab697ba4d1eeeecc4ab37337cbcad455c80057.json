{"sha": "d3ab697ba4d1eeeecc4ab37337cbcad455c80057", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNhYjY5N2JhNGQxZWVlZWNjNGFiMzczMzdjYmNhZDQ1NWM4MDA1Nw==", "commit": {"author": {"name": "Jeff Sturm", "email": "jsturm@one-point.com", "date": "2002-12-23T19:42:09Z"}, "committer": {"name": "Jeff Sturm", "email": "jsturm@gcc.gnu.org", "date": "2002-12-23T19:42:09Z"}, "message": "class.c (build_static_field_ref): Check FIELD_FINAL.\n\n* class.c (build_static_field_ref): Check FIELD_FINAL.\n\n* constants.c (alloc_class_constant): Use TYPE_CPOOL_DATA_REF\ninstead of current_constant_pool_data_ref.\n* java-tree.h (current_constant_pool_data_ref): Undefine.\n(JTI_CURRENT_CONSTANT_POOL_DATA_REF): Remove.\n* jcf-parse.c (init_outgoing_cpool): Don't initialize\ncurrent_constant_pool_data_ref.\n\n* except.c (prepare_eh_table_type ): Use DECL_NAME of class type,\nnot build_internal_class_name.\n\n* parse.y (patch_incomplete_class_ref): Always emit `class$' method.\nUse it when class ref isn't certain to be compiled.\n\nFrom-SVN: r60448", "tree": {"sha": "8de2de732a2a531c035647c360acaa01a32c9d78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8de2de732a2a531c035647c360acaa01a32c9d78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3ab697ba4d1eeeecc4ab37337cbcad455c80057", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3ab697ba4d1eeeecc4ab37337cbcad455c80057", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3ab697ba4d1eeeecc4ab37337cbcad455c80057", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3ab697ba4d1eeeecc4ab37337cbcad455c80057/comments", "author": null, "committer": null, "parents": [{"sha": "46d40353c383ea8aa490e88cb43adf1652176985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46d40353c383ea8aa490e88cb43adf1652176985", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46d40353c383ea8aa490e88cb43adf1652176985"}], "stats": {"total": 55, "additions": 38, "deletions": 17}, "files": [{"sha": "2abb8d04d90e0aa4de1658fb6ba4ac8a579c21e0", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ab697ba4d1eeeecc4ab37337cbcad455c80057/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ab697ba4d1eeeecc4ab37337cbcad455c80057/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=d3ab697ba4d1eeeecc4ab37337cbcad455c80057", "patch": "@@ -1,3 +1,20 @@\n+2002-12-23  Jeff Sturm  <jsturm@one-point.com>\n+\n+\t* class.c (build_static_field_ref): Check FIELD_FINAL.\n+\n+\t* constants.c (alloc_class_constant): Use TYPE_CPOOL_DATA_REF\n+\tinstead of current_constant_pool_data_ref.\n+\t* java-tree.h (current_constant_pool_data_ref): Undefine.\n+\t(JTI_CURRENT_CONSTANT_POOL_DATA_REF): Remove.\n+\t* jcf-parse.c (init_outgoing_cpool): Don't initialize\n+\tcurrent_constant_pool_data_ref.\n+\n+\t* except.c (prepare_eh_table_type ): Use DECL_NAME of class type,\n+\tnot build_internal_class_name.\n+\n+\t* parse.y (patch_incomplete_class_ref): Always emit `class$' method.\n+\tUse it when class ref isn't certain to be compiled.\n+\n 2002-12-23  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* gcj.texi: Include gcc-common.texi."}, {"sha": "5e5a66eb279c5220287da6bcaa2e3e8e0d1cb498", "filename": "gcc/java/class.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ab697ba4d1eeeecc4ab37337cbcad455c80057/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ab697ba4d1eeeecc4ab37337cbcad455c80057/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=d3ab697ba4d1eeeecc4ab37337cbcad455c80057", "patch": "@@ -1076,7 +1076,9 @@ build_static_field_ref (fdecl)\n {\n   tree fclass = DECL_CONTEXT (fdecl);\n   int is_compiled = is_compiled_class (fclass);\n-  if (is_compiled)\n+\n+  /* Allow static final fields to fold to a constant.  */\n+  if (is_compiled || FIELD_FINAL (fdecl))\n     {\n       if (!DECL_RTL_SET_P (fdecl))\n \t{"}, {"sha": "ca8c8600232d8319cfe684cad4c14ef05c00d7e5", "filename": "gcc/java/constants.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ab697ba4d1eeeecc4ab37337cbcad455c80057/gcc%2Fjava%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ab697ba4d1eeeecc4ab37337cbcad455c80057/gcc%2Fjava%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconstants.c?ref=d3ab697ba4d1eeeecc4ab37337cbcad455c80057", "patch": "@@ -388,10 +388,12 @@ alloc_class_constant (clas)\n static tree\n build_constant_data_ref ()\n {\n+  tree cpool_data_ref = NULL_TREE;\n+\n   if (TYPE_CPOOL_DATA_REF (current_class))\n-    current_constant_pool_data_ref = TYPE_CPOOL_DATA_REF (current_class);\n+    cpool_data_ref = TYPE_CPOOL_DATA_REF (current_class);\n \n-  else if (current_constant_pool_data_ref == NULL_TREE)\n+  if (cpool_data_ref == NULL_TREE)\n     {\n       tree decl;\n       tree decl_name = mangled_classname (\"_CD_\", current_class);\n@@ -400,10 +402,10 @@ build_constant_data_ref ()\n \t\t\t\t\t   one_elt_array_domain_type));\n       TREE_STATIC (decl) = 1;\n       make_decl_rtl (decl, NULL);\n-      TYPE_CPOOL_DATA_REF (current_class) = current_constant_pool_data_ref\n+      TYPE_CPOOL_DATA_REF (current_class) = cpool_data_ref\n \t= build1 (ADDR_EXPR, ptr_type_node, decl);\n     }\n-  return current_constant_pool_data_ref;\n+  return cpool_data_ref;\n }\n \n /* Get the pointer value at the INDEX'th element of the constant pool. */"}, {"sha": "0c7a4742293b2f73a0b5fdcd48eed1831a61d851", "filename": "gcc/java/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ab697ba4d1eeeecc4ab37337cbcad455c80057/gcc%2Fjava%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ab697ba4d1eeeecc4ab37337cbcad455c80057/gcc%2Fjava%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexcept.c?ref=d3ab697ba4d1eeeecc4ab37337cbcad455c80057", "patch": "@@ -336,7 +336,7 @@ prepare_eh_table_type (type)\n   else\n     exp = fold (build \n \t\t(PLUS_EXPR, ptr_type_node,\n-\t\t build_utf8_ref (build_internal_class_name (type)),\n+\t\t build_utf8_ref (DECL_NAME (TYPE_NAME (type))),\n \t\t size_one_node));\n   return exp;\n }"}, {"sha": "41b6297948ffb47125f05d749203bff2d371bed6", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ab697ba4d1eeeecc4ab37337cbcad455c80057/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ab697ba4d1eeeecc4ab37337cbcad455c80057/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=d3ab697ba4d1eeeecc4ab37337cbcad455c80057", "patch": "@@ -399,7 +399,6 @@ enum java_tree_index\n   JTI_NATIVECODE_PTR_ARRAY_TYPE_NODE,\n \n   JTI_WFL_OPERATOR,\n-  JTI_CURRENT_CONSTANT_POOL_DATA_REF,\n \n   JTI_MAIN_CLASS,\n   JTI_CURRENT_CLASS,\n@@ -685,10 +684,6 @@ extern GTY(()) tree java_global_trees[JTI_MAX];\n \n /* They need to be reset before processing each class */\n extern struct CPool *outgoing_cpool; \n-/* If non-NULL, an ADDR_EXPR referencing a VAR_DECL containing\n-   the constant data array for the current class. */\n-#define current_constant_pool_data_ref \\\n-  java_global_trees[JTI_CURRENT_CONSTANT_POOL_DATA_REF]\n \n #define wfl_operator \\\n   java_global_trees[JTI_WFL_OPERATOR]"}, {"sha": "6853f2ff9433ed2734f881202b7968ff70c276e0", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ab697ba4d1eeeecc4ab37337cbcad455c80057/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ab697ba4d1eeeecc4ab37337cbcad455c80057/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=d3ab697ba4d1eeeecc4ab37337cbcad455c80057", "patch": "@@ -709,7 +709,6 @@ load_inner_classes (cur_class)\n void\n init_outgoing_cpool ()\n {\n-  current_constant_pool_data_ref = NULL_TREE;\n   outgoing_cpool = xmalloc (sizeof (struct CPool));\n   memset (outgoing_cpool, 0, sizeof (struct CPool));\n }"}, {"sha": "f22863095bd491d64166fb13dc5bf82da2f60a6a", "filename": "gcc/java/parse.y", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ab697ba4d1eeeecc4ab37337cbcad455c80057/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ab697ba4d1eeeecc4ab37337cbcad455c80057/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=d3ab697ba4d1eeeecc4ab37337cbcad455c80057", "patch": "@@ -14073,7 +14073,16 @@ patch_incomplete_class_ref (node)\n   if (!(ref_type = resolve_type_during_patch (type)))\n     return error_mark_node;\n \n-  if (!flag_emit_class_files || JPRIMITIVE_TYPE_P (ref_type)\n+  /* Generate the synthetic static method `class$'.  (Previously we\n+     deferred this, causing different method tables to be emitted\n+     for native code and bytecode.)  */\n+  if (!TYPE_DOT_CLASS (current_class))\n+      build_dot_class_method (current_class);\n+\n+  /* If we're not emitting class files and we know ref_type is a\n+     compiled class, build a direct reference.  */\n+  if ((! flag_emit_class_files && is_compiled_class (ref_type))\n+      || JPRIMITIVE_TYPE_P (ref_type)\n       || TREE_CODE (ref_type) == VOID_TYPE)\n     {\n       tree dot = build_class_ref (ref_type);\n@@ -14084,10 +14093,7 @@ patch_incomplete_class_ref (node)\n     }\n \n   /* If we're emitting class files and we have to deal with non\n-     primitive types, we invoke (and consider generating) the\n-     synthetic static method `class$'. */\n-  if (!TYPE_DOT_CLASS (current_class))\n-      build_dot_class_method (current_class);\n+     primitive types, we invoke the synthetic static method `class$'.  */\n   ref_type = build_dot_class_method_invocation (ref_type);\n   return java_complete_tree (ref_type);\n }"}]}