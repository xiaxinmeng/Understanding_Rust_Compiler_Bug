{"sha": "b6ea6dbdc0482fe3a27f4c02e045945c6f02559f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZlYTZkYmRjMDQ4MmZlM2EyN2Y0YzAyZTA0NTk0NWM2ZjAyNTU5Zg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-03-06T17:34:02Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-03-06T17:34:02Z"}, "message": "trans.c (emit_range_check): Assert that the range type is a numerical type and remove useless local variables.\n\n\t* gcc-interface/trans.c (emit_range_check): Assert that the range type\n\tis a numerical type and remove useless local variables.\n\nFrom-SVN: r196500", "tree": {"sha": "3b1b031a404233b4e36a110d2ff105cbf2f77400", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b1b031a404233b4e36a110d2ff105cbf2f77400"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6ea6dbdc0482fe3a27f4c02e045945c6f02559f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6ea6dbdc0482fe3a27f4c02e045945c6f02559f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6ea6dbdc0482fe3a27f4c02e045945c6f02559f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6ea6dbdc0482fe3a27f4c02e045945c6f02559f/comments", "author": null, "committer": null, "parents": [{"sha": "9772c47ab05a80c39c0bc960626381b95b2a36b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9772c47ab05a80c39c0bc960626381b95b2a36b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9772c47ab05a80c39c0bc960626381b95b2a36b4"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "fc3435986be18c036f7860f6b8f0ec6c7d490f46", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6ea6dbdc0482fe3a27f4c02e045945c6f02559f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6ea6dbdc0482fe3a27f4c02e045945c6f02559f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b6ea6dbdc0482fe3a27f4c02e045945c6f02559f", "patch": "@@ -1,3 +1,8 @@\n+2013-03-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (emit_range_check): Assert that the range type\n+\tis a numerical type and remove useless local variables.\n+\n 2013-02-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/ada-tree.h: Back out change accidentally committed.\n@@ -6,8 +11,7 @@\n \n \tPR bootstrap/56258\n \t* gnat-style.texi (@title): Remove @hfill.\n-\t* projects.texi: Avoid line wrapping inside of @pxref or\n-\t@xref.\n+\t* projects.texi: Avoid line wrapping inside of @pxref or @xref.\n \n 2013-02-14  Rainer Emrich  <rainer@emrich-ebersheim.de>\n "}, {"sha": "69904bc47defca9f2898590834a7dff62712e6ab", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6ea6dbdc0482fe3a27f4c02e045945c6f02559f/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6ea6dbdc0482fe3a27f4c02e045945c6f02559f/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=b6ea6dbdc0482fe3a27f4c02e045945c6f02559f", "patch": "@@ -8119,15 +8119,17 @@ static tree\n emit_range_check (tree gnu_expr, Entity_Id gnat_range_type, Node_Id gnat_node)\n {\n   tree gnu_range_type = get_unpadded_type (gnat_range_type);\n-  tree gnu_low  = TYPE_MIN_VALUE (gnu_range_type);\n-  tree gnu_high = TYPE_MAX_VALUE (gnu_range_type);\n   tree gnu_compare_type = get_base_type (TREE_TYPE (gnu_expr));\n \n   /* If GNU_EXPR has GNAT_RANGE_TYPE as its base type, no check is needed.\n      This can for example happen when translating 'Val or 'Value.  */\n   if (gnu_compare_type == gnu_range_type)\n     return gnu_expr;\n \n+  /* Range checks can only be applied to types with ranges.  */\n+  gcc_assert (INTEGRAL_TYPE_P (gnu_range_type)\n+              || SCALAR_FLOAT_TYPE_P (gnu_range_type));\n+\n   /* If GNU_EXPR has an integral type that is narrower than GNU_RANGE_TYPE,\n      we can't do anything since we might be truncating the bounds.  No\n      check is needed in this case.  */\n@@ -8147,13 +8149,16 @@ emit_range_check (tree gnu_expr, Entity_Id gnat_range_type, Node_Id gnat_node)\n     (build_binary_op (TRUTH_ORIF_EXPR, boolean_type_node,\n \t\t      invert_truthvalue\n \t\t      (build_binary_op (GE_EXPR, boolean_type_node,\n-\t\t\t\t       convert (gnu_compare_type, gnu_expr),\n-\t\t\t\t       convert (gnu_compare_type, gnu_low))),\n+\t\t\t\t        convert (gnu_compare_type, gnu_expr),\n+\t\t\t\t        convert (gnu_compare_type,\n+\t\t\t\t\t\t TYPE_MIN_VALUE\n+\t\t\t\t\t\t (gnu_range_type)))),\n \t\t      invert_truthvalue\n \t\t      (build_binary_op (LE_EXPR, boolean_type_node,\n \t\t\t\t\tconvert (gnu_compare_type, gnu_expr),\n \t\t\t\t\tconvert (gnu_compare_type,\n-\t\t\t\t\t\t gnu_high)))),\n+\t\t\t\t\t\t TYPE_MAX_VALUE\n+\t\t\t\t\t\t (gnu_range_type))))),\n      gnu_expr, CE_Range_Check_Failed, gnat_node);\n }\n \f"}]}