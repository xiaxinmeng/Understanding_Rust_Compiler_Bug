{"sha": "0968e7fa1eb679814b628788442cf7642abae62a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk2OGU3ZmExZWI2Nzk4MTRiNjI4Nzg4NDQyY2Y3NjQyYWJhZTYyYQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2003-11-03T19:11:02Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2003-11-03T19:11:02Z"}, "message": "* doc/install-old.texi: Remove VMS documentation.\n\nFrom-SVN: r73223", "tree": {"sha": "734eac4c4625e34caef00837a3bc6a1e7f7cad2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/734eac4c4625e34caef00837a3bc6a1e7f7cad2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0968e7fa1eb679814b628788442cf7642abae62a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0968e7fa1eb679814b628788442cf7642abae62a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0968e7fa1eb679814b628788442cf7642abae62a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0968e7fa1eb679814b628788442cf7642abae62a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20af77cd9a5a1645dc7999965fb501bc9a17d93f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20af77cd9a5a1645dc7999965fb501bc9a17d93f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20af77cd9a5a1645dc7999965fb501bc9a17d93f"}], "stats": {"total": 260, "additions": 5, "deletions": 255}, "files": [{"sha": "309519e682b161048bf9c4529f603cd9148746ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0968e7fa1eb679814b628788442cf7642abae62a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0968e7fa1eb679814b628788442cf7642abae62a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0968e7fa1eb679814b628788442cf7642abae62a", "patch": "@@ -1,3 +1,7 @@\n+2003-11-03  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* doc/install-old.texi: Remove VMS documentation.\n+\n 2003-11-03  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.c (override_options):  Remove hack enabling 128bit long double"}, {"sha": "4cc10e247a25dda483e5237ebfd41ec4990aa6fd", "filename": "gcc/doc/install-old.texi", "status": "modified", "additions": 1, "deletions": 255, "changes": 256, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0968e7fa1eb679814b628788442cf7642abae62a/gcc%2Fdoc%2Finstall-old.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0968e7fa1eb679814b628788442cf7642abae62a/gcc%2Fdoc%2Finstall-old.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall-old.texi?ref=0968e7fa1eb679814b628788442cf7642abae62a", "patch": "@@ -22,12 +22,10 @@ main manual.\n @menu\n * Configurations::    Configurations Supported by GCC.\n * Cross-Compiler::   Building and installing a cross-compiler.\n-* VMS Install::   See below for installation on VMS.\n @end menu\n @end ifnothtml\n \n Here is the procedure for installing GCC on a GNU or Unix system.\n-See @ref{VMS Install}, for VMS systems.\n \n @enumerate\n @item\n@@ -197,16 +195,8 @@ files @file{m68k.md}, @file{local.h}, @file{m68k.c},\n @file{xm-local.h}, @file{t-local}, and @file{x-local}, all in the\n directory @file{config/m68k}.\n \n-Here is a list of configurations that have special treatment or special\n-things you must know:\n-\n-@table @samp\n-@item vax-dec-vms\n-See @ref{VMS Install}, for details on how to install GCC on VMS@.\n-@end table\n-\n @ifnothtml\n-@node Cross-Compiler, VMS Install, Configurations, Old\n+@node Cross-Compiler, , Configurations, Old\n @section Building and Installing a Cross-Compiler\n @end ifnothtml\n @html\n@@ -467,247 +457,3 @@ whether you compile it on a 68030 or with a cross-compiler on a 386, you\n must specify a 68030 as the host when you configure it.\n \n To install the cross-compiler, use @samp{make install}, as usual.\n-\n-@ifnothtml\n-@node VMS Install, , Cross-Compiler, Old\n-@section Installing GCC on VMS\n-@end ifnothtml\n-@html\n-<h2>@anchor{VMS Install}Installing GCC on VMS</h2>\n-@end html\n-@cindex VMS installation\n-@cindex installing GCC on VMS\n-\n-The VMS version of GCC is distributed in a backup saveset containing\n-both source code and precompiled binaries.\n-\n-To install the @file{gcc} command so you can use the compiler easily, in\n-the same manner as you use the VMS C compiler, you must install the VMS CLD\n-file for GCC as follows:\n-\n-@enumerate\n-@item\n-Define the VMS logical names @samp{GNU_CC} and @samp{GNU_CC_INCLUDE}\n-to point to the directories where the GCC executables\n-(@file{gcc-cpp.exe}, @file{gcc-cc1.exe}, etc.) and the C include files are\n-kept respectively.  This should be done with the commands:\n-\n-@smallexample\n-$ assign /system /translation=concealed -\n-  disk:[gcc.] gnu_cc\n-$ assign /system /translation=concealed -\n-  disk:[gcc.include.] gnu_cc_include\n-@end smallexample\n-\n-@noindent\n-with the appropriate disk and directory names.  These commands can be\n-placed in your system startup file so they will be executed whenever\n-the machine is rebooted.  You may, if you choose, do this via the\n-@file{GCC_INSTALL.COM} script in the @file{[GCC]} directory.\n-\n-@item\n-Install the @file{GCC} command with the command line:\n-\n-@smallexample\n-$ set command /table=sys$common:[syslib]dcltables -\n-  /output=sys$common:[syslib]dcltables gnu_cc:[000000]gcc\n-$ install replace sys$common:[syslib]dcltables\n-@end smallexample\n-\n-@item\n-To install the help file, do the following:\n-\n-@smallexample\n-$ library/help sys$library:helplib.hlb gcc.hlp\n-@end smallexample\n-\n-@noindent\n-Now you can invoke the compiler with a command like @samp{gcc /verbose\n-file.c}, which is equivalent to the command @samp{gcc -v -c file.c} in\n-Unix.\n-@end enumerate\n-\n-If you wish to use GNU C++ you must first install GCC, and then\n-perform the following steps:\n-\n-@enumerate\n-@item\n-Define the VMS logical name @samp{GNU_GXX_INCLUDE} to point to the\n-directory where the preprocessor will search for the C++ header files.\n-This can be done with the command:\n-\n-@smallexample\n-$ assign /system /translation=concealed -\n-  disk:[gcc.gxx_include.] gnu_gxx_include\n-@end smallexample\n-\n-@noindent\n-with the appropriate disk and directory name.  If you are going to be\n-using a C++ runtime library, this is where its install procedure will install\n-its header files.\n-\n-@item\n-Obtain the file @file{gcc-cc1plus.exe}, and place this in the same\n-directory that @file{gcc-cc1.exe} is kept.\n-\n-The GNU C++ compiler can be invoked with a command like @samp{gcc /plus\n-/verbose file.cc}, which is equivalent to the command @samp{g++ -v -c\n-file.cc} in Unix.\n-@end enumerate\n-\n-We try to put corresponding binaries and sources on the VMS distribution\n-tape.  But sometimes the binaries will be from an older version than the\n-sources, because we don't always have time to update them.  (Use the\n-@samp{/version} option to determine the version number of the binaries and\n-compare it with the source file @file{version.c} to tell whether this is\n-so.)  In this case, you should use the binaries you get to recompile the\n-sources.  If you must recompile, here is how:\n-\n-@enumerate\n-@item\n-Execute the command procedure @file{vmsconfig.com} to set up the files\n-@file{tm.h}, @file{config.h}, @file{aux-output.c}, and @file{md.}, and\n-to create files @file{tconfig.h} and @file{bconfig.h}.  This procedure\n-also creates several linker option files used by @file{make-cc1.com} and\n-a data file used by @file{make-l2.com}.\n-\n-@smallexample\n-$ @@vmsconfig.com\n-@end smallexample\n-\n-@item\n-Setup the logical names and command tables as defined above.  In\n-addition, define the VMS logical name @samp{GNU_BISON} to point at the\n-to the directories where the Bison executable is kept.  This should be\n-done with the command:\n-\n-@smallexample\n-$ assign /system /translation=concealed -\n-  disk:[bison.] gnu_bison\n-@end smallexample\n-\n-You may, if you choose, use the @file{INSTALL_BISON.COM} script in the\n-@file{[BISON]} directory.\n-\n-@item\n-Install the @samp{BISON} command with the command line:\n-\n-@smallexample\n-$ set command /table=sys$common:[syslib]dcltables -\n-  /output=sys$common:[syslib]dcltables -\n-  gnu_bison:[000000]bison\n-$ install replace sys$common:[syslib]dcltables\n-@end smallexample\n-\n-@item\n-Type @samp{@@make-gcc} to recompile everything, or submit the file\n-@file{make-gcc.com} to a batch queue.  If you wish to build the GNU C++\n-compiler as well as the GCC compiler, you must first edit\n-@file{make-gcc.com} and follow the instructions that appear in the\n-comments.\n-\n-@item\n-In order to use GCC, you need a library of functions which GCC compiled code\n-will call to perform certain tasks, and these functions are defined in the\n-file @file{libgcc2.c}.  To compile this you should use the command procedure\n-@file{make-l2.com}, which will generate the library @file{libgcc2.olb}.\n-@file{libgcc2.olb} should be built using the compiler built from\n-the same distribution that @file{libgcc2.c} came from, and\n-@file{make-gcc.com} will automatically do all of this for you.\n-\n-To install the library, use the following commands:\n-\n-@smallexample\n-$ library gnu_cc:[000000]gcclib/delete=(new,eprintf)\n-$ library gnu_cc:[000000]gcclib/delete=L_*\n-$ library libgcc2/extract=*/output=libgcc2.obj\n-$ library gnu_cc:[000000]gcclib libgcc2.obj\n-@end smallexample\n-\n-The first command simply removes old modules that will be replaced with\n-modules from @file{libgcc2} under different module names.  The modules\n-@code{new} and @code{eprintf} may not actually be present in your\n-@file{gcclib.olb}---if the VMS librarian complains about those modules\n-not being present, simply ignore the message and continue on with the\n-next command.  The second command removes the modules that came from the\n-previous version of the library @file{libgcc2.c}.\n-\n-Whenever you update the compiler on your system, you should also update the\n-library with the above procedure.\n-\n-@item\n-You may wish to build GCC in such a way that no files are written to the\n-directory where the source files reside.  An example would be the when\n-the source files are on a read-only disk.  In these cases, execute the\n-following DCL commands (substituting your actual path names):\n-\n-@smallexample\n-$ assign dua0:[gcc.build_dir.]/translation=concealed, -\n-         dua1:[gcc.source_dir.]/translation=concealed  gcc_build\n-$ set default gcc_build:[000000]\n-@end smallexample\n-\n-@noindent\n-where the directory @file{dua1:[gcc.source_dir]} contains the source\n-code, and the directory @file{dua0:[gcc.build_dir]} is meant to contain\n-all of the generated object files and executables.  Once you have done\n-this, you can proceed building GCC as described above.  (Keep in mind\n-that @file{gcc_build} is a rooted logical name, and thus the device\n-names in each element of the search list must be an actual physical\n-device name rather than another rooted logical name).\n-\n-@item\n-@strong{If you are building GCC with a previous version of GCC,\n-you also should check to see that you have the newest version of the\n-assembler}.  In particular, GCC version 2 treats global constant\n-variables slightly differently from GCC version 1, and GAS version\n-1.38.1 does not have the patches required to work with GCC version 2.\n-If you use GAS 1.38.1, then @code{extern const} variables will not have\n-the read-only bit set, and the linker will generate warning messages\n-about mismatched psect attributes for these variables.  These warning\n-messages are merely a nuisance, and can safely be ignored.\n-\n-@item\n-If you want to build GCC with the VAX C compiler, you will need to\n-make minor changes in @file{make-cccp.com} and @file{make-cc1.com}\n-to choose alternate definitions of @code{CC}, @code{CFLAGS}, and\n-@code{LIBS}.  See comments in those files.  However, you must\n-also have a working version of the GNU assembler (GNU as, aka GAS) as\n-it is used as the back end for GCC to produce binary object modules\n-and is not included in the GCC sources.  GAS is also needed to\n-compile @file{libgcc2} in order to build @file{gcclib} (see above);\n-@file{make-l2.com} expects to be able to find it operational in\n-@file{gnu_cc:[000000]gnu-as.exe}.\n-\n-To use GCC on VMS, you need the VMS driver programs\n-@file{gcc.exe}, @file{gcc.com}, and @file{gcc.cld}.  They are\n-distributed with the VMS binaries (@file{gcc-vms}) rather than the\n-GCC sources.  GAS is also included in @file{gcc-vms}, as is Bison.\n-\n-Once you have successfully built GCC with VAX C, you should use the\n-resulting compiler to rebuild itself.  Before doing this, be sure to\n-restore the @code{CC}, @code{CFLAGS}, and @code{LIBS} definitions in\n-@file{make-cccp.com} and @file{make-cc1.com}.  The second generation\n-compiler will be able to take advantage of many optimizations that must\n-be suppressed when building with other compilers.\n-@end enumerate\n-\n-Under previous versions of GCC, the generated code would occasionally\n-give strange results when linked with the sharable @file{VAXCRTL} library.\n-Now this should work.\n-\n-Even with this version, however, GCC itself should not be linked with\n-the sharable @file{VAXCRTL}.  The version of @code{qsort} in\n-@file{VAXCRTL} has a bug (known to be present in VMS versions V4.6\n-through V5.5) which causes the compiler to fail.\n-\n-The executables are generated by @file{make-cc1.com} and\n-@file{make-cccp.com} use the object library version of @file{VAXCRTL} in\n-order to make use of the @code{qsort} routine in @file{gcclib.olb}.  If\n-you wish to link the compiler executables with the shareable image\n-version of @file{VAXCRTL}, you should edit the file @file{tm.h} (created\n-by @file{vmsconfig.com}) to define the macro @code{QSORT_WORKAROUND}.\n-\n-@code{QSORT_WORKAROUND} is always defined when GCC is compiled with\n-VAX C, to avoid a problem in case @file{gcclib.olb} is not yet\n-available."}]}