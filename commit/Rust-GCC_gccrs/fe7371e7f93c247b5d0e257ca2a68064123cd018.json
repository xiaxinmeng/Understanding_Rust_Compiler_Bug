{"sha": "fe7371e7f93c247b5d0e257ca2a68064123cd018", "node_id": "C_kwDOANBUbNoAKGZlNzM3MWU3ZjkzYzI0N2I1ZDBlMjU3Y2EyYTY4MDY0MTIzY2QwMTg", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-10T14:58:29Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-11T13:52:24Z"}, "message": "Implement op1_range operators for unordered comparisons.\n\ngcc/ChangeLog:\n\n\t* range-op-float.cc (foperator_unordered_le::op1_range): New.\n\t(foperator_unordered_le::op2_range): New.\n\t(foperator_unordered_gt::op1_range): New.\n\t(foperator_unordered_gt::op2_range): New.\n\t(foperator_unordered_ge::op1_range): New.\n\t(foperator_unordered_ge::op2_range): New.\n\t(foperator_unordered_equal::op1_range): New.", "tree": {"sha": "77ae7f7af7eb990ffe2f02b73880c189d64fef1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77ae7f7af7eb990ffe2f02b73880c189d64fef1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe7371e7f93c247b5d0e257ca2a68064123cd018", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe7371e7f93c247b5d0e257ca2a68064123cd018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe7371e7f93c247b5d0e257ca2a68064123cd018", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe7371e7f93c247b5d0e257ca2a68064123cd018/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cbc312a31424ca4ff7cdd358fc47b9c9511a646", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cbc312a31424ca4ff7cdd358fc47b9c9511a646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cbc312a31424ca4ff7cdd358fc47b9c9511a646"}], "stats": {"total": 205, "additions": 205, "deletions": 0}, "files": [{"sha": "ef51b7538e35e5daa1edc6d55ea818065628c330", "filename": "gcc/range-op-float.cc", "status": "modified", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7371e7f93c247b5d0e257ca2a68064123cd018/gcc%2Frange-op-float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7371e7f93c247b5d0e257ca2a68064123cd018/gcc%2Frange-op-float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op-float.cc?ref=fe7371e7f93c247b5d0e257ca2a68064123cd018", "patch": "@@ -1162,6 +1162,8 @@ class foperator_unordered_lt : public range_operator_float\n class foperator_unordered_le : public range_operator_float\n {\n   using range_operator_float::fold_range;\n+  using range_operator_float::op1_range;\n+  using range_operator_float::op2_range;\n public:\n   bool fold_range (irange &r, tree type,\n \t\t   const frange &op1, const frange &op2,\n@@ -1184,11 +1186,65 @@ class foperator_unordered_le : public range_operator_float\n \treturn true;\n       }\n   }\n+  bool op1_range (frange &r, tree type,\n+\t\t  const irange &lhs, const frange &op2,\n+\t\t  relation_kind rel) const final override;\n+  bool op2_range (frange &r, tree type,\n+\t\t  const irange &lhs, const frange &op1,\n+\t\t  relation_kind rel) const final override;\n } fop_unordered_le;\n \n+bool\n+foperator_unordered_le::op1_range (frange &r, tree type,\n+\t\t\t\t   const irange &lhs, const frange &op2,\n+\t\t\t\t   relation_kind) const\n+{\n+  switch (get_bool_state (r, lhs, type))\n+    {\n+    case BRS_TRUE:\n+      build_le (r, type, op2);\n+      break;\n+\n+    case BRS_FALSE:\n+      build_gt (r, type, op2);\n+      r.clear_nan ();\n+      break;\n+\n+    default:\n+      break;\n+    }\n+  return true;\n+}\n+\n+bool\n+foperator_unordered_le::op2_range (frange &r,\n+\t\t\t\t   tree type,\n+\t\t\t\t   const irange &lhs,\n+\t\t\t\t   const frange &op1,\n+\t\t\t\t   relation_kind) const\n+{\n+  switch (get_bool_state (r, lhs, type))\n+    {\n+    case BRS_TRUE:\n+      build_ge (r, type, op1);\n+      break;\n+\n+    case BRS_FALSE:\n+      build_lt (r, type, op1);\n+      r.clear_nan ();\n+      break;\n+\n+    default:\n+      break;\n+    }\n+  return true;\n+}\n+\n class foperator_unordered_gt : public range_operator_float\n {\n   using range_operator_float::fold_range;\n+  using range_operator_float::op1_range;\n+  using range_operator_float::op2_range;\n public:\n   bool fold_range (irange &r, tree type,\n \t\t   const frange &op1, const frange &op2,\n@@ -1211,11 +1267,67 @@ class foperator_unordered_gt : public range_operator_float\n \treturn true;\n       }\n   }\n+  bool op1_range (frange &r, tree type,\n+\t\t  const irange &lhs, const frange &op2,\n+\t\t  relation_kind rel) const final override;\n+  bool op2_range (frange &r, tree type,\n+\t\t  const irange &lhs, const frange &op1,\n+\t\t  relation_kind rel) const final override;\n } fop_unordered_gt;\n \n+bool\n+foperator_unordered_gt::op1_range (frange &r,\n+\t\t\t tree type,\n+\t\t\t const irange &lhs,\n+\t\t\t const frange &op2,\n+\t\t\t relation_kind) const\n+{\n+  switch (get_bool_state (r, lhs, type))\n+    {\n+    case BRS_TRUE:\n+      build_gt (r, type, op2);\n+      break;\n+\n+    case BRS_FALSE:\n+      build_le (r, type, op2);\n+      r.clear_nan ();\n+      break;\n+\n+    default:\n+      break;\n+    }\n+  return true;\n+}\n+\n+bool\n+foperator_unordered_gt::op2_range (frange &r,\n+\t\t\t\t   tree type,\n+\t\t\t\t   const irange &lhs,\n+\t\t\t\t   const frange &op1,\n+\t\t\t\t   relation_kind) const\n+{\n+  switch (get_bool_state (r, lhs, type))\n+    {\n+    case BRS_TRUE:\n+      build_lt (r, type, op1);\n+      break;\n+\n+    case BRS_FALSE:\n+      build_ge (r, type, op1);\n+      r.clear_nan ();\n+      break;\n+\n+    default:\n+      break;\n+    }\n+  return true;\n+}\n+\n class foperator_unordered_ge : public range_operator_float\n {\n   using range_operator_float::fold_range;\n+  using range_operator_float::op1_range;\n+  using range_operator_float::op2_range;\n public:\n   bool fold_range (irange &r, tree type,\n \t\t   const frange &op1, const frange &op2,\n@@ -1238,11 +1350,66 @@ class foperator_unordered_ge : public range_operator_float\n \treturn true;\n       }\n   }\n+  bool op1_range (frange &r, tree type,\n+\t\t  const irange &lhs, const frange &op2,\n+\t\t  relation_kind rel) const final override;\n+  bool op2_range (frange &r, tree type,\n+\t\t  const irange &lhs, const frange &op1,\n+\t\t  relation_kind rel) const final override;\n } fop_unordered_ge;\n \n+bool\n+foperator_unordered_ge::op1_range (frange &r,\n+\t\t\t\t   tree type,\n+\t\t\t\t   const irange &lhs,\n+\t\t\t\t   const frange &op2,\n+\t\t\t\t   relation_kind) const\n+{\n+  switch (get_bool_state (r, lhs, type))\n+    {\n+    case BRS_TRUE:\n+      build_ge (r, type, op2);\n+      break;\n+\n+    case BRS_FALSE:\n+      build_lt (r, type, op2);\n+      r.clear_nan ();\n+      break;\n+\n+    default:\n+      break;\n+    }\n+  return true;\n+}\n+\n+bool\n+foperator_unordered_ge::op2_range (frange &r, tree type,\n+\t\t\t\t   const irange &lhs,\n+\t\t\t\t   const frange &op1,\n+\t\t\t\t   relation_kind) const\n+{\n+  switch (get_bool_state (r, lhs, type))\n+    {\n+    case BRS_TRUE:\n+      build_le (r, type, op1);\n+      break;\n+\n+    case BRS_FALSE:\n+      build_gt (r, type, op1);\n+      r.clear_nan ();\n+      break;\n+\n+    default:\n+      break;\n+    }\n+  return true;\n+}\n+\n class foperator_unordered_equal : public range_operator_float\n {\n   using range_operator_float::fold_range;\n+  using range_operator_float::op1_range;\n+  using range_operator_float::op2_range;\n public:\n   bool fold_range (irange &r, tree type,\n \t\t   const frange &op1, const frange &op2,\n@@ -1265,8 +1432,46 @@ class foperator_unordered_equal : public range_operator_float\n \treturn true;\n       }\n   }\n+  bool op1_range (frange &r, tree type,\n+\t\t  const irange &lhs, const frange &op2,\n+\t\t  relation_kind rel) const final override;\n+  bool op2_range (frange &r, tree type,\n+\t\t  const irange &lhs, const frange &op1,\n+\t\t  relation_kind rel) const final override\n+  {\n+    return op1_range (r, type, lhs, op1, rel);\n+  }\n } fop_unordered_equal;\n \n+bool\n+foperator_unordered_equal::op1_range (frange &r, tree type,\n+\t\t\t\t      const irange &lhs,\n+\t\t\t\t      const frange &op2,\n+\t\t\t\t      relation_kind) const\n+{\n+  switch (get_bool_state (r, lhs, type))\n+    {\n+    case BRS_TRUE:\n+      // If it's true, the result is the same as OP2 plus a NAN.\n+      r = op2;\n+      // Add both zeros if there's the possibility of zero equality.\n+      frange_add_zeros (r, type);\n+      // Add the posibility of a NAN.\n+      r.update_nan ();\n+      break;\n+\n+    case BRS_FALSE:\n+      // The false side indictates !NAN and not equal.  We can at least\n+      // represent !NAN.\n+      r.set_varying (type);\n+      r.clear_nan ();\n+      break;\n+\n+    default:\n+      break;\n+    }\n+  return true;\n+}\n \n // Instantiate a range_op_table for floating point operations.\n static floating_op_table global_floating_table;"}]}