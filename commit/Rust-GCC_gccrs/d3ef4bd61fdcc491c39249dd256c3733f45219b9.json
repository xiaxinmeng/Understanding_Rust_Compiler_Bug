{"sha": "d3ef4bd61fdcc491c39249dd256c3733f45219b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNlZjRiZDYxZmRjYzQ5MWMzOTI0OWRkMjU2YzM3MzNmNDUyMTliOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-03-13T13:28:15Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-03-13T13:28:15Z"}, "message": "[multiple changes]\n\n2015-03-13  Claire Dross  <dross@adacore.com>\n\n\t* inline.adb (Can_Be_Inlined_In_GNATprove_Mode): Do not inline\n\tsubprograms with unconstrained record parameters containing\n\tItype declarations.\n\t* sinfo.ads Document GNATprove assumption that type should match\n\tin the AST.\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Contract):\n\tDo not check for Refined_Depends and Refined_Globals contracts\n\tas they are optional.\n\n2015-03-13  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Instantiate_Type): For a floating-point type,\n\tcapture dimension info if any, because the generated subtype\n\tdeclaration does not come from source and will not process dimensions.\n\t* sem_dim,adb (Analyze_Dimension_Extension_Or_Record_Aggregate):\n\tDo not analyze expressions with an initialization procedure\n\tbecause aggregates will have been checked at the point of record\n\tdeclaration.\n\n2015-03-13  Robert Dewar  <dewar@adacore.com>\n\n\t* aspects.ads, aspects.adb: Add entries for aspect Unimplemented.\n\t* einfo.ads, einfo.adb (Is_Unimplemented): New flag.\n\t* sem_ch13.adb: Add dummy entry for aspect Unimplemented.\n\t* snames.ads-tmpl: Add entry for Name_Unimplemented.\n\nFrom-SVN: r221420", "tree": {"sha": "32bfad880870f90fafcb6aa9581761c24fafb945", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32bfad880870f90fafcb6aa9581761c24fafb945"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3ef4bd61fdcc491c39249dd256c3733f45219b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3ef4bd61fdcc491c39249dd256c3733f45219b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3ef4bd61fdcc491c39249dd256c3733f45219b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3ef4bd61fdcc491c39249dd256c3733f45219b9/comments", "author": null, "committer": null, "parents": [{"sha": "9fc0f6728d4eabdfe3ca2937b96f98b7c69f46a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc0f6728d4eabdfe3ca2937b96f98b7c69f46a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc0f6728d4eabdfe3ca2937b96f98b7c69f46a4"}], "stats": {"total": 218, "additions": 176, "deletions": 42}, "files": [{"sha": "c3a79af55c0d6e165c4680ad0d35907acdca5114", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ef4bd61fdcc491c39249dd256c3733f45219b9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ef4bd61fdcc491c39249dd256c3733f45219b9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d3ef4bd61fdcc491c39249dd256c3733f45219b9", "patch": "@@ -1,3 +1,31 @@\n+2015-03-13  Claire Dross  <dross@adacore.com>\n+\n+\t* inline.adb (Can_Be_Inlined_In_GNATprove_Mode): Do not inline\n+\tsubprograms with unconstrained record parameters containing\n+\tItype declarations.\n+\t* sinfo.ads Document GNATprove assumption that type should match\n+\tin the AST.\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Contract):\n+\tDo not check for Refined_Depends and Refined_Globals contracts\n+\tas they are optional.\n+\n+2015-03-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Instantiate_Type): For a floating-point type,\n+\tcapture dimension info if any, because the generated subtype\n+\tdeclaration does not come from source and will not process dimensions.\n+\t* sem_dim,adb (Analyze_Dimension_Extension_Or_Record_Aggregate):\n+\tDo not analyze expressions with an initialization procedure\n+\tbecause aggregates will have been checked at the point of record\n+\tdeclaration.\n+\n+2015-03-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* aspects.ads, aspects.adb: Add entries for aspect Unimplemented.\n+\t* einfo.ads, einfo.adb (Is_Unimplemented): New flag.\n+\t* sem_ch13.adb: Add dummy entry for aspect Unimplemented.\n+\t* snames.ads-tmpl: Add entry for Name_Unimplemented.\n+\n 2015-03-13  Gary Dismukes  <dismukes@adacore.com>\n \n \t* style.adb (Missing_Overriding): Apply the"}, {"sha": "bef432f67ff81a6a008821acd1b4efe9af819d97", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ef4bd61fdcc491c39249dd256c3733f45219b9/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ef4bd61fdcc491c39249dd256c3733f45219b9/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=d3ef4bd61fdcc491c39249dd256c3733f45219b9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2010-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2010-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -595,6 +595,7 @@ package body Aspects is\n     Aspect_Thread_Local_Storage         => Aspect_Thread_Local_Storage,\n     Aspect_Type_Invariant               => Aspect_Invariant,\n     Aspect_Unchecked_Union              => Aspect_Unchecked_Union,\n+    Aspect_Unimplemented                => Aspect_Unimplemented,\n     Aspect_Universal_Aliasing           => Aspect_Universal_Aliasing,\n     Aspect_Universal_Data               => Aspect_Universal_Data,\n     Aspect_Unmodified                   => Aspect_Unmodified,"}, {"sha": "049efae87f10661e7e7ea36d92fa96367e5dce13", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ef4bd61fdcc491c39249dd256c3733f45219b9/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ef4bd61fdcc491c39249dd256c3733f45219b9/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=d3ef4bd61fdcc491c39249dd256c3733f45219b9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2010-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2010-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -140,6 +140,7 @@ package Aspects is\n       Aspect_Synchronization,\n       Aspect_Test_Case,                     -- GNAT\n       Aspect_Type_Invariant,\n+      Aspect_Unimplemented,                 -- GNAT\n       Aspect_Unsuppress,\n       Aspect_Value_Size,                    -- GNAT\n       Aspect_Variable_Indexing,\n@@ -369,6 +370,7 @@ package Aspects is\n       Aspect_Synchronization           => Name,\n       Aspect_Test_Case                 => Expression,\n       Aspect_Type_Invariant            => Expression,\n+      Aspect_Unimplemented             => Optional_Expression,\n       Aspect_Unsuppress                => Name,\n       Aspect_Value_Size                => Expression,\n       Aspect_Variable_Indexing         => Name,\n@@ -490,6 +492,7 @@ package Aspects is\n       Aspect_Test_Case                    => Name_Test_Case,\n       Aspect_Type_Invariant               => Name_Type_Invariant,\n       Aspect_Unchecked_Union              => Name_Unchecked_Union,\n+      Aspect_Unimplemented                => Name_Unimplemented,\n       Aspect_Universal_Aliasing           => Name_Universal_Aliasing,\n       Aspect_Universal_Data               => Name_Universal_Data,\n       Aspect_Unmodified                   => Name_Unmodified,\n@@ -717,6 +720,7 @@ package Aspects is\n       Aspect_SPARK_Mode                   => Never_Delay,\n       Aspect_Synchronization              => Never_Delay,\n       Aspect_Test_Case                    => Never_Delay,\n+      Aspect_Unimplemented                => Never_Delay,\n       Aspect_Warnings                     => Never_Delay,\n \n       Aspect_Alignment                    => Rep_Aspect,"}, {"sha": "e215df9eb9d59cc6cd2a90a8231bee2723eed2e9", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ef4bd61fdcc491c39249dd256c3733f45219b9/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ef4bd61fdcc491c39249dd256c3733f45219b9/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=d3ef4bd61fdcc491c39249dd256c3733f45219b9", "patch": "@@ -584,8 +584,8 @@ package body Einfo is\n    --    Is_Static_Type                  Flag281\n    --    Has_Nested_Subprogram           Flag282\n    --    Uplevel_Reference_Noted         Flag283\n+   --    Is_Unimplemented                Flag284\n \n-   --    (unused)                        Flag284\n    --    (unused)                        Flag285\n    --    (unused)                        Flag286\n    --    (unused)                        Flag287\n@@ -2456,6 +2456,11 @@ package body Einfo is\n       return Flag246 (Id);\n    end Is_Underlying_Record_View;\n \n+   function Is_Unimplemented (Id : E) return B is\n+   begin\n+      return Flag284 (Id);\n+   end Is_Unimplemented;\n+\n    function Is_Unsigned_Type (Id : E) return B is\n    begin\n       pragma Assert (Is_Type (Id));\n@@ -5398,6 +5403,11 @@ package body Einfo is\n       Set_Flag246 (Id, V);\n    end Set_Is_Underlying_Record_View;\n \n+   procedure Set_Is_Unimplemented (Id : E; V : B := True) is\n+   begin\n+      Set_Flag284 (Id, V);\n+   end Set_Is_Unimplemented;\n+\n    procedure Set_Is_Unsigned_Type (Id : E; V : B := True) is\n    begin\n       pragma Assert (Is_Discrete_Or_Fixed_Point_Type (Id));\n@@ -8767,6 +8777,7 @@ package body Einfo is\n       W (\"Is_True_Constant\",                Flag163 (Id));\n       W (\"Is_Unchecked_Union\",              Flag117 (Id));\n       W (\"Is_Underlying_Record_View\",       Flag246 (Id));\n+      W (\"Is_Unimplemented\",                Flag284 (Id));\n       W (\"Is_Unsigned_Type\",                Flag144 (Id));\n       W (\"Is_Valued_Procedure\",             Flag127 (Id));\n       W (\"Is_Visible_Formal\",               Flag206 (Id));"}, {"sha": "81a77f972b3a3c0baef58bb9c8807b43d3ba6c8a", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ef4bd61fdcc491c39249dd256c3733f45219b9/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ef4bd61fdcc491c39249dd256c3733f45219b9/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=d3ef4bd61fdcc491c39249dd256c3733f45219b9", "patch": "@@ -2745,8 +2745,8 @@ package Einfo is\n --       including generic formal parameters.\n \n --    Is_Obsolescent (Flag153)\n---       Defined in all entities. Set for any entity for which a valid pragma\n---       Obsolescent applies.\n+--       Defined in all entities. Set for any entity to which a valid pragma\n+--       or aspect Obsolescent applies.\n \n --    Is_Only_Out_Parameter (Flag226)\n --       Defined in formal parameter entities. Set if this parameter is the\n@@ -3090,6 +3090,10 @@ package Einfo is\n --       as its corresponding record type, but whose parent is the full view\n --       of the parent in the original type extension.\n \n+--    Is_Unimplemented (Flag284)\n+--       Defined in all entities. Set for any entity to which a valid pragma\n+--       or aspect Unimplemented applies.\n+\n --    Is_Unsigned_Type (Flag144)\n --       Defined in all types, but can be set only for discrete and fixed-point\n --       type and subtype entities. This flag is only valid if the entity is\n@@ -5299,6 +5303,7 @@ package Einfo is\n    --    Is_Thunk                            (Flag225)\n    --    Is_Trivial_Subprogram               (Flag235)\n    --    Is_Unchecked_Union                  (Flag117)\n+   --    Is_Unimplemented                    (Flag284)\n    --    Is_Visible_Formal                   (Flag206)\n    --    Kill_Elaboration_Checks             (Flag32)\n    --    Kill_Range_Checks                   (Flag33)\n@@ -5784,6 +5789,7 @@ package Einfo is\n    --    SPARK_Pragma                        (Node32)\n    --    Linker_Section_Pragma               (Node33)\n    --    Contract                            (Node34)\n+   --    Import_Pragma                       (Node35)   (non-generic case only)\n    --    Body_Needed_For_SAL                 (Flag40)\n    --    Contains_Ignored_Ghost_Code         (Flag279)\n    --    Default_Expressions_Processed       (Flag108)\n@@ -5951,6 +5957,7 @@ package Einfo is\n    --    Subprograms_For_Type                (Node29)\n    --    Linker_Section_Pragma               (Node33)\n    --    Contract                            (Node34)\n+   --    Import_Pragma                       (Node35)\n    --    Has_Invariants                      (Flag232)\n    --    Is_Machine_Code_Subprogram          (Flag137)\n    --    Is_Pure                             (Flag44)\n@@ -6089,6 +6096,7 @@ package Einfo is\n    --    SPARK_Pragma                        (Node32)\n    --    Linker_Section_Pragma               (Node33)\n    --    Contract                            (Node34)\n+   --    Import_Pragma                       (Node35)   (non-generic case only)\n    --    Body_Needed_For_SAL                 (Flag40)\n    --    Contains_Ignored_Ghost_Code         (Flag279)\n    --    Delay_Cleanups                      (Flag114)\n@@ -6894,6 +6902,7 @@ package Einfo is\n    function Is_True_Constant                    (Id : E) return B;\n    function Is_Unchecked_Union                  (Id : E) return B;\n    function Is_Underlying_Record_View           (Id : E) return B;\n+   function Is_Unimplemented                    (Id : E) return B;\n    function Is_Unsigned_Type                    (Id : E) return B;\n    function Is_Valued_Procedure                 (Id : E) return B;\n    function Is_Visible_Formal                   (Id : E) return B;\n@@ -7548,6 +7557,7 @@ package Einfo is\n    procedure Set_Is_True_Constant                (Id : E; V : B := True);\n    procedure Set_Is_Unchecked_Union              (Id : E; V : B := True);\n    procedure Set_Is_Underlying_Record_View       (Id : E; V : B := True);\n+   procedure Set_Is_Unimplemented                (Id : E; V : B := True);\n    procedure Set_Is_Unsigned_Type                (Id : E; V : B := True);\n    procedure Set_Is_Valued_Procedure             (Id : E; V : B := True);\n    procedure Set_Is_Visible_Formal               (Id : E; V : B := True);\n@@ -8352,6 +8362,7 @@ package Einfo is\n    pragma Inline (Is_Type);\n    pragma Inline (Is_Unchecked_Union);\n    pragma Inline (Is_Underlying_Record_View);\n+   pragma Inline (Is_Unimplemented);\n    pragma Inline (Is_Unsigned_Type);\n    pragma Inline (Is_Valued_Procedure);\n    pragma Inline (Is_Visible_Formal);\n@@ -8807,6 +8818,7 @@ package Einfo is\n    pragma Inline (Set_Is_True_Constant);\n    pragma Inline (Set_Is_Unchecked_Union);\n    pragma Inline (Set_Is_Underlying_Record_View);\n+   pragma Inline (Set_Is_Unimplemented);\n    pragma Inline (Set_Is_Unsigned_Type);\n    pragma Inline (Set_Is_Valued_Procedure);\n    pragma Inline (Set_Is_Visible_Formal);"}, {"sha": "7db46cf8178f32038df2868e6166b7cab34eb39a", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 82, "deletions": 1, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ef4bd61fdcc491c39249dd256c3733f45219b9/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ef4bd61fdcc491c39249dd256c3733f45219b9/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=d3ef4bd61fdcc491c39249dd256c3733f45219b9", "patch": "@@ -1335,6 +1335,11 @@ package body Inline is\n      (Spec_Id : Entity_Id;\n       Body_Id : Entity_Id) return Boolean\n    is\n+      function Has_Parameter_With_Discriminant_Dependent_Fields\n+        (Id : Entity_Id) return Boolean;\n+      --  Returns true if the subprogram as parameters of an unconstrained\n+      --  record types with fields whose types depend on a discriminant.\n+\n       function Has_Some_Contract (Id : Entity_Id) return Boolean;\n       --  Returns True if subprogram Id has any contract (Pre, Post, Global,\n       --  Depends, etc.)\n@@ -1351,6 +1356,73 @@ package body Inline is\n       --  Returns True if subprogram Id was defined originally as an expression\n       --  function.\n \n+      ------------------------------------------------------\n+      -- Has_Parameter_With_Discriminant_Dependent_Fields --\n+      ------------------------------------------------------\n+\n+      function Has_Parameter_With_Discriminant_Dependent_Fields\n+        (Id : Entity_Id) return Boolean\n+      is\n+         E    : Entity_Id := Id;\n+         Spec : Node_Id   := Parent (E);\n+\n+      begin\n+         --  Get the specification of the subprogram. Go through alias if\n+         --  needed.\n+\n+         if Nkind (Spec) = N_Defining_Program_Unit_Name then\n+            Spec := Parent (Spec);\n+         end if;\n+\n+         while Nkind (Spec) not in N_Subprogram_Specification loop\n+            pragma Assert (Present (Alias (E)));\n+            E := Alias (E);\n+            Spec := Parent (E);\n+\n+            if Nkind (Spec) = N_Defining_Program_Unit_Name then\n+               Spec := Parent (Spec);\n+            end if;\n+         end loop;\n+\n+         declare\n+            Params   : constant List_Id := Parameter_Specifications (Spec);\n+            Param    : Node_Id;\n+            Param_Ty : Entity_Id;\n+\n+         begin\n+            if Is_Non_Empty_List (Params) then\n+               Param := First (Params);\n+               while Present (Param) loop\n+                  Param_Ty := Etype (Defining_Identifier (Param));\n+\n+                  --  If the parameter is an unconstrained record, check if\n+                  --  it has components whose types depend on a discriminant.\n+\n+                  if Is_Record_Type (Param_Ty)\n+                    and then not Is_Constrained (Param_Ty)\n+                  then\n+                     declare\n+                        Comp : Node_Id := First_Component (Param_Ty);\n+\n+                     begin\n+                        while Present (Comp) loop\n+                           if Has_Discriminant_Dependent_Constraint (Comp) then\n+                              return True;\n+                           end if;\n+\n+                           Comp := Next_Component (Comp);\n+                        end loop;\n+                     end;\n+                  end if;\n+\n+                  Param := Next (Param);\n+               end loop;\n+            end if;\n+         end;\n+\n+         return False;\n+      end Has_Parameter_With_Discriminant_Dependent_Fields;\n+\n       -----------------------\n       -- Has_Some_Contract --\n       -----------------------\n@@ -1497,11 +1569,20 @@ package body Inline is\n       elsif Instantiation_Location (Sloc (Id)) /= No_Location then\n          return False;\n \n-      --  Don't inline predicate functions (treated specially by GNATprove)\n+      --  Do not inline predicate functions (treated specially by GNATprove)\n \n       elsif Is_Predicate_Function (Id) then\n          return False;\n \n+      --  Do not inline subprograms with a parameter of an unconstrained\n+      --  record type if it has discrimiant dependent fields. Indeed, with\n+      --  such parameters, the frontend cannot always ensure type compliance\n+      --  in record component accesses (in particular with records containing\n+      --  packed arrays).\n+\n+      elsif Has_Parameter_With_Discriminant_Dependent_Fields (Id) then\n+         return False;\n+\n       --  Otherwise, this is a subprogram declared inside the private part of a\n       --  package, or inside a package body, or locally in a subprogram, and it\n       --  does not have any contract. Inline it."}, {"sha": "0fa78179c84e19a18e5c3122beaa7567cccdcbcf", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ef4bd61fdcc491c39249dd256c3733f45219b9/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ef4bd61fdcc491c39249dd256c3733f45219b9/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=d3ef4bd61fdcc491c39249dd256c3733f45219b9", "patch": "@@ -12456,6 +12456,14 @@ package body Sem_Ch12 is\n          end;\n       end if;\n \n+      --  For a floating-point type, capture dimension info if any, because\n+      --  the generated subtype declaration does not come from source and\n+      --  will not process dimensions.\n+\n+      if Is_Floating_Point_Type (Act_T) then\n+         Copy_Dimensions (Act_T, Subt);\n+      end if;\n+\n       return Decl_Nodes;\n    end Instantiate_Type;\n "}, {"sha": "fc230109044a48e8c9269cf0aa9e2fe314d1c9be", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ef4bd61fdcc491c39249dd256c3733f45219b9/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ef4bd61fdcc491c39249dd256c3733f45219b9/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=d3ef4bd61fdcc491c39249dd256c3733f45219b9", "patch": "@@ -1642,6 +1642,8 @@ package body Sem_Ch13 is\n             --  Processing based on specific aspect\n \n             case A_Id is\n+               when Aspect_Unimplemented =>\n+                  null; -- ??? temp for now\n \n                --  No_Aspect should be impossible\n \n@@ -9024,7 +9026,8 @@ package body Sem_Ch13 is\n               Aspect_Refined_Post              |\n               Aspect_Refined_State             |\n               Aspect_SPARK_Mode                |\n-              Aspect_Test_Case                 =>\n+              Aspect_Test_Case                 |\n+              Aspect_Unimplemented             =>\n             raise Program_Error;\n \n       end case;"}, {"sha": "2f9e1f5532bc9271ea292cb2fc94be30416760f5", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ef4bd61fdcc491c39249dd256c3733f45219b9/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ef4bd61fdcc491c39249dd256c3733f45219b9/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=d3ef4bd61fdcc491c39249dd256c3733f45219b9", "patch": "@@ -2203,45 +2203,13 @@ package body Sem_Ch6 is\n \n          if Present (Ref_Global) then\n             Analyze_Refined_Global_In_Decl_Part (Ref_Global);\n-\n-         --  When the corresponding Global pragma references a state with\n-         --  visible refinement, the body requires Refined_Global. Such a\n-         --  refinement is not required when SPARK checks are suppressed.\n-\n-         else\n-            Prag := Get_Pragma (Spec_Id, Pragma_Global);\n-\n-            if SPARK_Mode /= Off\n-              and then Present (Prag)\n-              and then Contains_Refined_State (Prag)\n-            then\n-               Error_Msg_NE\n-                 (\"body of subprogram& requires global refinement\",\n-                  Body_Decl, Spec_Id);\n-            end if;\n          end if;\n \n          --  Refined_Depends must be analyzed after Refined_Global in order to\n          --  see the modes of all global refinements.\n \n          if Present (Ref_Depends) then\n             Analyze_Refined_Depends_In_Decl_Part (Ref_Depends);\n-\n-         --  When the corresponding Depends pragma references a state with\n-         --  visible refinement, the body requires Refined_Depends. Such a\n-         --  refinement is not required when SPARK checks are suppressed.\n-\n-         else\n-            Prag := Get_Pragma (Spec_Id, Pragma_Depends);\n-\n-            if SPARK_Mode /= Off\n-              and then Present (Prag)\n-              and then Contains_Refined_State (Prag)\n-            then\n-               Error_Msg_NE\n-                 (\"body of subprogram& requires dependance refinement\",\n-                  Body_Decl, Spec_Id);\n-            end if;\n          end if;\n       end Analyze_Completion_Contract;\n "}, {"sha": "1f98027a379b691f73caa8f1e22b86d66eea2378", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ef4bd61fdcc491c39249dd256c3733f45219b9/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ef4bd61fdcc491c39249dd256c3733f45219b9/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=d3ef4bd61fdcc491c39249dd256c3733f45219b9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2011-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -27,6 +27,7 @@ with Aspects;  use Aspects;\n with Atree;    use Atree;\n with Einfo;    use Einfo;\n with Errout;   use Errout;\n+with Exp_Util; use Exp_Util;\n with Lib;      use Lib;\n with Namet;    use Namet;\n with Nlists;   use Nlists;\n@@ -1792,9 +1793,14 @@ package body Sem_Dim is\n \n    begin\n       --  Aspect is an Ada 2012 feature. Note that there is no need to check\n-      --  dimensions for aggregates that don't come from source.\n+      --  dimensions for aggregates that don't come from source, or if we are\n+      --  within an initialization procedure, whose expressions have been\n+      --  checked at the point of record declaration.\n \n-      if Ada_Version < Ada_2012 or else not Comes_From_Source (N) then\n+      if Ada_Version < Ada_2012\n+        or else not Comes_From_Source (N)\n+        or else Inside_Init_Proc\n+      then\n          return;\n       end if;\n "}, {"sha": "5f057f236a8c879eae342acb171a5b60ea028bdd", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ef4bd61fdcc491c39249dd256c3733f45219b9/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ef4bd61fdcc491c39249dd256c3733f45219b9/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=d3ef4bd61fdcc491c39249dd256c3733f45219b9", "patch": "@@ -617,6 +617,17 @@ package Sinfo is\n    --       checks on empty ranges, which typically appear in deactivated\n    --       code in a particular configuration).\n \n+   --    6. Subtypes should match in the AST, even after a generic is\n+   --       instantiated. In particular, GNATprove relies on the fact that,\n+   --       on a selected component, the type of the selected component is\n+   --       the type of the corresponding component in the prefix of the\n+   --       selected component.\n+   --\n+   --       Note that, in some cases, we know that this rule is broken by the\n+   --       frontend. In particular, if the selected component is a packed\n+   --       array depending on a discriminant of a unconstrained formal object\n+   --       parameter of a generic.\n+\n    -----------------------\n    -- Check Flag Fields --\n    -----------------------"}, {"sha": "3781cfccc047c7ac25ad1885c4a67ff50e41df87", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ef4bd61fdcc491c39249dd256c3733f45219b9/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ef4bd61fdcc491c39249dd256c3733f45219b9/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=d3ef4bd61fdcc491c39249dd256c3733f45219b9", "patch": "@@ -144,6 +144,7 @@ package Snames is\n    Name_Dynamic_Predicate              : constant Name_Id := N + $;\n    Name_Static_Predicate               : constant Name_Id := N + $;\n    Name_Synchronization                : constant Name_Id := N + $;\n+   Name_Unimplemented                  : constant Name_Id := N + $;\n \n    --  Some special names used by the expander. Note that the lower case u's\n    --  at the start of these names get translated to extra underscores. These"}]}