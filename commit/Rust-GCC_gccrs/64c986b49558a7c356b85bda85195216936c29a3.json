{"sha": "64c986b49558a7c356b85bda85195216936c29a3", "node_id": "C_kwDOANBUbNoAKDY0Yzk4NmI0OTU1OGE3YzM1NmI4NWJkYTg1MTk1MjE2OTM2YzI5YTM", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-12-14T15:21:32Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-12-16T20:58:09Z"}, "message": "libstdc++: Diagnose broken allocator rebind members\n\nThis adds a static assertion to std::allocator_traits::rebind_alloc to\ndiagnose violations of the rule that rebinding an allocator to its own\nvalue type yields the same allocator type.\n\nThis helps to catch the easy mistake of deriving from std::allocator but\nforgetting to override the rebind behaviour (no longer an issue in C++20\nas std::allocator doesn't have a rebind member that can be inherited).\nIt also catches bugs like in 23_containers/vector/52591.cc where a typo\nmeans the rebound allocator is a completely different type.\n\nI initially wanted to put this static assert into the body of\nallocator_traits:\n\n      static_assert(is_same<rebind_alloc<value_type>, _Alloc>::value,\n\t\t    \"rebind_alloc<value_type> must be Alloc\");\n\nHowever, this causes a regression in the test for PR libstdc++/72792.\nIt seems that instantiating std::allocator_traits should be allowed for\ninvalid allocator types as long as you don't try to rebind them. To\nsupport that, only assert in the __allocator_traits_base::__rebind class\ntemplate (in both the primary template and the partial specialization).\nAs a result, the bug in 20_util/scoped_allocator/outermost.cc is not\ndiagnosed, because nothing in that test rebinds the allocator.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/alloc_traits.h (__allocator_traits_base::__rebind):\n\tAdd static assert for rebind requirement.\n\t* testsuite/20_util/allocator_traits/members/rebind_alloc.cc:\n\tFix invalid rebind member in test allocator.\n\t* testsuite/20_util/allocator_traits/requirements/rebind_neg.cc:\n\tNew test.\n\t* testsuite/20_util/scoped_allocator/outermost.cc: Add rebind to\n\ttest allocator.\n\t* testsuite/23_containers/forward_list/48101_neg.cc: Prune new\n\tstatic assert error.\n\t* testsuite/23_containers/unordered_multiset/48101_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_set/48101_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/52591.cc: Fix typo in rebind.", "tree": {"sha": "58f9ac6933d1445101f40b1e20f91599e81a9b3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58f9ac6933d1445101f40b1e20f91599e81a9b3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64c986b49558a7c356b85bda85195216936c29a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64c986b49558a7c356b85bda85195216936c29a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64c986b49558a7c356b85bda85195216936c29a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64c986b49558a7c356b85bda85195216936c29a3/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b1d66658ecdcc3d9251641a0b902b4c73ace303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b1d66658ecdcc3d9251641a0b902b4c73ace303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b1d66658ecdcc3d9251641a0b902b4c73ace303"}], "stats": {"total": 61, "additions": 52, "deletions": 9}, "files": [{"sha": "6eae409ab53fb79c6c73662f98c3267918f3b4c6", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c986b49558a7c356b85bda85195216936c29a3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c986b49558a7c356b85bda85195216936c29a3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=64c986b49558a7c356b85bda85195216936c29a3", "patch": "@@ -51,12 +51,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   struct __allocator_traits_base\n   {\n     template<typename _Tp, typename _Up, typename = void>\n-      struct __rebind : __replace_first_arg<_Tp, _Up> { };\n+      struct __rebind : __replace_first_arg<_Tp, _Up>\n+      {\n+\tstatic_assert(is_same<\n+\t  typename __replace_first_arg<_Tp, typename _Tp::value_type>::type,\n+\t\t\t_Tp>::value,\n+\t  \"allocator_traits<A>::rebind_alloc<A::value_type> must be A\");\n+      };\n \n     template<typename _Tp, typename _Up>\n       struct __rebind<_Tp, _Up,\n \t\t      __void_t<typename _Tp::template rebind<_Up>::other>>\n-      { using type = typename _Tp::template rebind<_Up>::other; };\n+      {\n+\tusing type = typename _Tp::template rebind<_Up>::other;\n+\n+\tstatic_assert(is_same<\n+\t  typename _Tp::template rebind<typename _Tp::value_type>::other,\n+\t\t\t_Tp>::value,\n+\t  \"allocator_traits<A>::rebind_alloc<A::value_type> must be A\");\n+      };\n \n   protected:\n     template<typename _Tp>"}, {"sha": "dc2b1afa2d53e8964bfc2c8ddcd03a8e033c9638", "filename": "libstdc++-v3/testsuite/20_util/allocator_traits/members/rebind_alloc.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c986b49558a7c356b85bda85195216936c29a3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Fmembers%2Frebind_alloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c986b49558a7c356b85bda85195216936c29a3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Fmembers%2Frebind_alloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Fmembers%2Frebind_alloc.cc?ref=64c986b49558a7c356b85bda85195216936c29a3", "patch": "@@ -24,17 +24,16 @@ using std::is_same;\n template<typename T, typename U>\n   using Rebind = typename std::allocator_traits<T>::template rebind_alloc<U>;\n \n-#if __STDC_HOSTED__\n-template<typename T>\n+template<typename T, typename = T>\n   struct HasRebind {\n     using value_type = T;\n-    template<typename U> struct rebind { using other = std::allocator<U>; };\n+    template<typename U> struct rebind { using other = HasRebind<U>; };\n   };\n \n-static_assert(is_same<Rebind<HasRebind<int>, long>,\n-\t\t      std::allocator<long>>::value,\n+// Would get HasRebind<long, int> here if the first template argument is\n+// replaced instead of using the nested rebind.\n+static_assert(is_same<Rebind<HasRebind<int>, long>, HasRebind<long>>::value,\n \t      \"nested alias template is used\");\n-#endif\n \n template<typename T>\n   struct NoRebind0 {"}, {"sha": "a446b592edf34fe7261ecd26b959ee87ce023f35", "filename": "libstdc++-v3/testsuite/20_util/allocator_traits/requirements/rebind_neg.cc", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c986b49558a7c356b85bda85195216936c29a3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Frequirements%2Frebind_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c986b49558a7c356b85bda85195216936c29a3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Frequirements%2Frebind_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Frequirements%2Frebind_neg.cc?ref=64c986b49558a7c356b85bda85195216936c29a3", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile { target c++11 } }\n+#include <vector>\n+\n+// Custom allocator defined with std::allocator, but doesn't provide rebind.\n+template<typename T> struct Alloc : std::allocator<T> { };\n+\n+std::vector<int, Alloc<int>> v; // { dg-error \"here\" \"\" { target c++17_down } }\n+\n+// Custom allocator that does provide rebind, but incorrectly.\n+template<typename T> struct Alloc2\n+{\n+  using value_type = T;\n+  template<typename U> struct rebind { using other = Alloc<U>; }; // not Alloc2\n+  T* allocate(std::size_t n) { return std::allocator<T>().allocate(n); }\n+  void deallocate(T* p, std::size_t n) { std::allocator<T>().deallocate(p, n); }\n+};\n+\n+std::vector<int, Alloc2<int>> v2; // { dg-error \"here\" }\n+\n+// { dg-error \"static assertion failed: .*rebind_alloc\" \"\" { target *-*-* } 0 }"}, {"sha": "af4d29443f5556a4af6baf0c959f762a9d42d72b", "filename": "libstdc++-v3/testsuite/20_util/scoped_allocator/outermost.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c986b49558a7c356b85bda85195216936c29a3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2Foutermost.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c986b49558a7c356b85bda85195216936c29a3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2Foutermost.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2Foutermost.cc?ref=64c986b49558a7c356b85bda85195216936c29a3", "patch": "@@ -49,6 +49,14 @@ struct nested_alloc : A\n   template<typename U>\n     nested_alloc(nested_alloc<U>) { }\n \n+  // Need to customize rebind, otherwise nested_alloc<alloc<T>> gets rebound\n+  // to nested_alloc<U>.\n+  template<typename U>\n+    struct rebind\n+    {\n+      using other = typename std::allocator_traits<A>::template rebind_alloc<U>;\n+    };\n+\n   A& outer_allocator() { return *this; }\n \n   template<typename U, typename... Args>"}, {"sha": "195d32931c125026e079c0a2642ab0e9f446507b", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/48101_neg.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c986b49558a7c356b85bda85195216936c29a3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c986b49558a7c356b85bda85195216936c29a3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2F48101_neg.cc?ref=64c986b49558a7c356b85bda85195216936c29a3", "patch": "@@ -28,3 +28,4 @@ test01()\n // { dg-error \"non-const, non-volatile value_type\" \"\" { target *-*-* } 0 }\n // { dg-prune-output \"std::allocator<.* has no member named \" }\n // { dg-prune-output \"must have the same value_type as its allocator\" }\n+// { dg-prune-output \"rebind_alloc\" }"}, {"sha": "70babc682ae42d86d9bebf604259b6f9ee49bac1", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/48101_neg.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c986b49558a7c356b85bda85195216936c29a3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c986b49558a7c356b85bda85195216936c29a3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F48101_neg.cc?ref=64c986b49558a7c356b85bda85195216936c29a3", "patch": "@@ -34,3 +34,4 @@ test01()\n // { dg-prune-output \"use of deleted function\" }\n // { dg-prune-output \"must have the same value_type as its allocator\" }\n // { dg-prune-output \"no match for call\" }\n+// { dg-prune-output \"rebind_alloc\" }"}, {"sha": "30225f3d6e1713ee57a0189730ba0130840a1d4d", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/48101_neg.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c986b49558a7c356b85bda85195216936c29a3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c986b49558a7c356b85bda85195216936c29a3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F48101_neg.cc?ref=64c986b49558a7c356b85bda85195216936c29a3", "patch": "@@ -34,3 +34,4 @@ test01()\n // { dg-prune-output \"use of deleted function\" }\n // { dg-prune-output \"must have the same value_type as its allocator\" }\n // { dg-prune-output \"no match for call\" }\n+// { dg-prune-output \"rebind_alloc\" }"}, {"sha": "ea80bb277c1f49190ae21b64e738428066eba1e0", "filename": "libstdc++-v3/testsuite/23_containers/vector/52591.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c986b49558a7c356b85bda85195216936c29a3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F52591.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c986b49558a7c356b85bda85195216936c29a3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F52591.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F52591.cc?ref=64c986b49558a7c356b85bda85195216936c29a3", "patch": "@@ -60,7 +60,7 @@ void test02()\n template<typename T>\n struct A2 : std::allocator<T>\n {\n-  template<typename U> struct rebind { typedef A1<U> other; };\n+  template<typename U> struct rebind { typedef A2<U> other; };\n \n   A2() = default;\n   template<typename U> A2(const A2<U>&) { }"}]}