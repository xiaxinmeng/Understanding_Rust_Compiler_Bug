{"sha": "11a82e2597c54016345beb99e5339e37851c7d59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFhODJlMjU5N2M1NDAxNjM0NWJlYjk5ZTUzMzllMzc4NTFjN2Q1OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-09-04T14:10:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-09-04T14:10:11Z"}, "message": "re PR c++/82084 (ICE: constructing wstring with -O3)\n\n2017-09-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/82084\n\t* fold-const.h (can_native_encode_string_p): Declare.\n\t* fold-const.c (can_native_encode_string_p): Factor out from ...\n\t(native_encode_string): ... here.\n\t* tree-vect-stmts.c (vectorizable_store): Call it to avoid\n\tvectorizing stores from constants we later cannot handle.\n\n\t* g++.dg/torture/pr82084.C: New testcase.\n\nFrom-SVN: r251661", "tree": {"sha": "80cc35078ff2a50b99bcac103fa940b55569c370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80cc35078ff2a50b99bcac103fa940b55569c370"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11a82e2597c54016345beb99e5339e37851c7d59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11a82e2597c54016345beb99e5339e37851c7d59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11a82e2597c54016345beb99e5339e37851c7d59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11a82e2597c54016345beb99e5339e37851c7d59/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bc7fe95200214ce70419fde6f965dc88bbd645a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc7fe95200214ce70419fde6f965dc88bbd645a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc7fe95200214ce70419fde6f965dc88bbd645a6"}], "stats": {"total": 59, "additions": 50, "deletions": 9}, "files": [{"sha": "012c519d23eeb16c84516862c91fc6142e86e949", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a82e2597c54016345beb99e5339e37851c7d59/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a82e2597c54016345beb99e5339e37851c7d59/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11a82e2597c54016345beb99e5339e37851c7d59", "patch": "@@ -1,3 +1,12 @@\n+2017-09-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/82084\n+\t* fold-const.h (can_native_encode_string_p): Declare.\n+\t* fold-const.c (can_native_encode_string_p): Factor out from ...\n+\t(native_encode_string): ... here.\n+\t* tree-vect-stmts.c (vectorizable_store): Call it to avoid\n+\tvectorizing stores from constants we later cannot handle.\n+\n 2017-09-04  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/81783"}, {"sha": "490483067eef7df3a8b2408f76ed9bd1bf930720", "filename": "gcc/fold-const.c", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a82e2597c54016345beb99e5339e37851c7d59/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a82e2597c54016345beb99e5339e37851c7d59/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=11a82e2597c54016345beb99e5339e37851c7d59", "patch": "@@ -7184,16 +7184,10 @@ native_encode_vector (const_tree expr, unsigned char *ptr, int len, int off)\n static int\n native_encode_string (const_tree expr, unsigned char *ptr, int len, int off)\n {\n-  tree type = TREE_TYPE (expr);\n-  HOST_WIDE_INT total_bytes;\n-\n-  if (TREE_CODE (type) != ARRAY_TYPE\n-      || TREE_CODE (TREE_TYPE (type)) != INTEGER_TYPE\n-      || (GET_MODE_BITSIZE (SCALAR_INT_TYPE_MODE (TREE_TYPE (type)))\n-\t  != BITS_PER_UNIT)\n-      || !tree_fits_shwi_p (TYPE_SIZE_UNIT (type)))\n+  if (! can_native_encode_string_p (expr))\n     return 0;\n-  total_bytes = tree_to_shwi (TYPE_SIZE_UNIT (type));\n+\n+  HOST_WIDE_INT total_bytes = tree_to_shwi (TYPE_SIZE_UNIT (TREE_TYPE (expr)));\n   if ((off == -1 && total_bytes > len)\n       || off >= total_bytes)\n     return 0;\n@@ -7487,6 +7481,23 @@ can_native_encode_type_p (tree type)\n     }\n }\n \n+/* Return true iff a STRING_CST S is accepted by\n+   native_encode_expr.  */\n+\n+bool\n+can_native_encode_string_p (const_tree expr)\n+{\n+  tree type = TREE_TYPE (expr);\n+\n+  if (TREE_CODE (type) != ARRAY_TYPE\n+      || TREE_CODE (TREE_TYPE (type)) != INTEGER_TYPE\n+      || (GET_MODE_BITSIZE (SCALAR_INT_TYPE_MODE (TREE_TYPE (type)))\n+\t  != BITS_PER_UNIT)\n+      || !tree_fits_shwi_p (TYPE_SIZE_UNIT (type)))\n+    return false;\n+  return true;\n+}\n+\n /* Fold a VIEW_CONVERT_EXPR of a constant expression EXPR to type\n    TYPE at compile-time.  If we're unable to perform the conversion\n    return NULL_TREE.  */"}, {"sha": "46d563953ce94411ba3fb29258367534ba19c2e2", "filename": "gcc/fold-const.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a82e2597c54016345beb99e5339e37851c7d59/gcc%2Ffold-const.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a82e2597c54016345beb99e5339e37851c7d59/gcc%2Ffold-const.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.h?ref=11a82e2597c54016345beb99e5339e37851c7d59", "patch": "@@ -28,6 +28,7 @@ extern int folding_initializer;\n extern int native_encode_expr (const_tree, unsigned char *, int, int off = -1);\n extern tree native_interpret_expr (tree, const unsigned char *, int);\n extern bool can_native_encode_type_p (tree);\n+extern bool can_native_encode_string_p (const_tree);\n \n /* Fold constants as much as possible in an expression.\n    Returns the simplified expression."}, {"sha": "2893847e3834f1f1b445ffb85604c50aad6944f1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a82e2597c54016345beb99e5339e37851c7d59/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a82e2597c54016345beb99e5339e37851c7d59/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=11a82e2597c54016345beb99e5339e37851c7d59", "patch": "@@ -1,3 +1,8 @@\n+2017-09-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/82084\n+\t* g++.dg/torture/pr82084.C: New testcase.\n+\n 2017-09-04  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/81783"}, {"sha": "416684d2cb854a4daf4465bbe588fae9d6caa9a9", "filename": "gcc/testsuite/g++.dg/torture/pr82084.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a82e2597c54016345beb99e5339e37851c7d59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr82084.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a82e2597c54016345beb99e5339e37851c7d59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr82084.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr82084.C?ref=11a82e2597c54016345beb99e5339e37851c7d59", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile }\n+\n+#include <string>\n+int main()\n+{\n+  wchar_t strs[4][2]= {  L\"A\", L\"B\", L\"C\" , L\"D\"};\n+  std::wstring ss(strs[0]);\n+  return 0;\n+}"}, {"sha": "ce438930c3ff30f31ac5b8c347a616b41801f367", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a82e2597c54016345beb99e5339e37851c7d59/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a82e2597c54016345beb99e5339e37851c7d59/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=11a82e2597c54016345beb99e5339e37851c7d59", "patch": "@@ -5733,6 +5733,12 @@ vectorizable_store (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \n   op = gimple_assign_rhs1 (stmt);\n \n+  /* In the case this is a store from a STRING_CST make sure\n+     native_encode_expr can handle it.  */\n+  if (TREE_CODE (op) == STRING_CST\n+      && ! can_native_encode_string_p (op))\n+    return false;\n+\n   if (!vect_is_simple_use (op, vinfo, &def_stmt, &dt, &rhs_vectype))\n     {\n       if (dump_enabled_p ())"}]}