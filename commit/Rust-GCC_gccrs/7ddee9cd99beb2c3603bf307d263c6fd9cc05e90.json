{"sha": "7ddee9cd99beb2c3603bf307d263c6fd9cc05e90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RkZWU5Y2Q5OWJlYjJjMzYwM2JmMzA3ZDI2M2M2ZmQ5Y2MwNWU5MA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-08-01T15:44:10Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-08-03T18:48:08Z"}, "message": "Darwin: Handle poly_int machine_modes.\n\nThe common code that selects suitable sections for literals needs\nto inspect the machine_mode.  For some sub-targets that might be\nrepresented as a poly-int.\n\nThere was a workaround in place that allowed for cases where the poly\nint had only one component.  This removes the workaround and handles\nthe cases where we care about the machine_mode size.\n\ngcc/ChangeLog:\n\n\t* config/darwin.c (IN_TARGET_CODE): Remove.\n\t(darwin_mergeable_constant_section): Handle poly-int machine modes.\n\t(machopic_select_rtx_section): Likewise.", "tree": {"sha": "667b8f093c0062333a2f6cdbf8477b7083d223d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/667b8f093c0062333a2f6cdbf8477b7083d223d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ddee9cd99beb2c3603bf307d263c6fd9cc05e90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ddee9cd99beb2c3603bf307d263c6fd9cc05e90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ddee9cd99beb2c3603bf307d263c6fd9cc05e90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ddee9cd99beb2c3603bf307d263c6fd9cc05e90/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76eb0434a40f44f3f9c8a81cf22f56bbeccad12a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76eb0434a40f44f3f9c8a81cf22f56bbeccad12a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76eb0434a40f44f3f9c8a81cf22f56bbeccad12a"}], "stats": {"total": 62, "additions": 33, "deletions": 29}, "files": [{"sha": "2c6da2b47c48d36953cd2b3149cb4efa70a5bb17", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 33, "deletions": 29, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ddee9cd99beb2c3603bf307d263c6fd9cc05e90/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ddee9cd99beb2c3603bf307d263c6fd9cc05e90/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=7ddee9cd99beb2c3603bf307d263c6fd9cc05e90", "patch": "@@ -18,8 +18,6 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-#define IN_TARGET_CODE 1\n-\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n@@ -1351,34 +1349,40 @@ darwin_mergeable_constant_section (tree exp,\n \t\t\t\t   unsigned HOST_WIDE_INT align,\n \t\t\t\t   bool zsize)\n {\n-  machine_mode mode = DECL_MODE (exp);\n-  unsigned int modesize = GET_MODE_BITSIZE (mode);\n-\n   if (zsize)\n     return darwin_sections[zobj_const_section];\n \n-  if (flag_merge_constants\n-      && mode != VOIDmode\n-      && mode != BLKmode\n-      && modesize <= align\n-      && align >= 8\n-      && align <= 256\n-      && (align & (align -1)) == 0)\n-    {\n-      tree size = TYPE_SIZE_UNIT (TREE_TYPE (exp));\n+  machine_mode mode = DECL_MODE (exp);\n+  if (!flag_merge_constants\n+      || mode == VOIDmode\n+      || mode == BLKmode\n+      || align < 8\n+      || align > 256\n+      || (align & (align -1)) != 0)\n+    return readonly_data_section;\n \n-      if (TREE_CODE (size) == INTEGER_CST)\n-\t{\n-\t  if (wi::to_wide (size) == 4)\n-\t    return darwin_sections[literal4_section];\n-\t  else if (wi::to_wide (size) == 8)\n-\t    return darwin_sections[literal8_section];\n-\t  else if (HAVE_GAS_LITERAL16\n-\t\t   && TARGET_64BIT\n-\t\t   && wi::to_wide (size) == 16)\n-\t    return darwin_sections[literal16_section];\n-\t}\n-    }\n+  /* This will ICE if the mode is not a constant size, but that is reasonable,\n+     since one cannot put a variable-sized thing into a constant section, we\n+     shouldn't be trying.  */\n+  const unsigned int modesize = GET_MODE_BITSIZE (mode).to_constant ();\n+\n+  if (modesize > align)\n+    return readonly_data_section;\n+\n+  tree size = TYPE_SIZE_UNIT (TREE_TYPE (exp));\n+\n+  if (TREE_CODE (size) != INTEGER_CST)\n+    return readonly_data_section;\n+\n+  unsigned isize = TREE_INT_CST_LOW (size);\n+  if (isize == 4)\n+    return darwin_sections[literal4_section];\n+  else if (isize == 8)\n+    return darwin_sections[literal8_section];\n+  else if (HAVE_GAS_LITERAL16\n+\t   && TARGET_64BIT\n+\t   && isize == 16)\n+    return darwin_sections[literal16_section];\n \n   return readonly_data_section;\n }\n@@ -1747,19 +1751,19 @@ section *\n machopic_select_rtx_section (machine_mode mode, rtx x,\n \t\t\t     unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED)\n {\n-  if (GET_MODE_SIZE (mode) == 8\n+  if (known_eq (GET_MODE_SIZE (mode), 8)\n       && (GET_CODE (x) == CONST_INT\n \t  || GET_CODE (x) == CONST_WIDE_INT\n \t  || GET_CODE (x) == CONST_DOUBLE))\n     return darwin_sections[literal8_section];\n-  else if (GET_MODE_SIZE (mode) == 4\n+  else if (known_eq (GET_MODE_SIZE (mode), 4)\n \t   && (GET_CODE (x) == CONST_INT\n \t       || GET_CODE (x) == CONST_WIDE_INT\n \t       || GET_CODE (x) == CONST_DOUBLE))\n     return darwin_sections[literal4_section];\n   else if (HAVE_GAS_LITERAL16\n \t   && TARGET_64BIT\n-\t   && GET_MODE_SIZE (mode) == 16\n+\t   && known_eq (GET_MODE_SIZE (mode), 16)\n \t   && (GET_CODE (x) == CONST_INT\n \t       || GET_CODE (x) == CONST_WIDE_INT\n \t       || GET_CODE (x) == CONST_DOUBLE"}]}