{"sha": "5db1c53105295810821c3019874388f778782247", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRiMWM1MzEwNTI5NTgxMDgyMWMzMDE5ODc0Mzg4Zjc3ODc4MjI0Nw==", "commit": {"author": {"name": "Eli Zaretskii", "email": "eliz@gnu.org", "date": "2005-05-12T03:44:58Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2005-05-12T03:44:58Z"}, "message": "pex-djgpp.c: Include string.h, fcntl.h, unistd.h, and sys/stat.h.\n\n2005-05-11  Eli Zaretskii  <eliz@gnu.org>\n\n\t* pex-djgpp.c: Include string.h, fcntl.h, unistd.h, and\n\tsys/stat.h.\n\t(pex_init): Fix last argument to pex_init_common.\n\t(pex_djgpp_exec_child): Remove leading underscore from _open,\n\t_dup, _dup2, _close, and _spawnv/_spawnvp.  Replace `program',\n\twhich is undeclared, with `executable', which was unused.  Remove\n\tunused variable `e'.  Fix casting of last arg to spawnv/spawnvp.\n\t(pex_djgpp_wait): Declare arguments with ATTRIBUTE_UNUSED.\n\nFrom-SVN: r99606", "tree": {"sha": "3eeb820635f04543110a88fb2a497b41024181e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3eeb820635f04543110a88fb2a497b41024181e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5db1c53105295810821c3019874388f778782247", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db1c53105295810821c3019874388f778782247", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5db1c53105295810821c3019874388f778782247", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db1c53105295810821c3019874388f778782247/comments", "author": {"login": "Eli-Zaretskii", "id": 20908835, "node_id": "MDQ6VXNlcjIwOTA4ODM1", "avatar_url": "https://avatars.githubusercontent.com/u/20908835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eli-Zaretskii", "html_url": "https://github.com/Eli-Zaretskii", "followers_url": "https://api.github.com/users/Eli-Zaretskii/followers", "following_url": "https://api.github.com/users/Eli-Zaretskii/following{/other_user}", "gists_url": "https://api.github.com/users/Eli-Zaretskii/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eli-Zaretskii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eli-Zaretskii/subscriptions", "organizations_url": "https://api.github.com/users/Eli-Zaretskii/orgs", "repos_url": "https://api.github.com/users/Eli-Zaretskii/repos", "events_url": "https://api.github.com/users/Eli-Zaretskii/events{/privacy}", "received_events_url": "https://api.github.com/users/Eli-Zaretskii/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5765e552580a9b01c690fcb63dd6b86899232919", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5765e552580a9b01c690fcb63dd6b86899232919", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5765e552580a9b01c690fcb63dd6b86899232919"}], "stats": {"total": 90, "additions": 52, "deletions": 38}, "files": [{"sha": "63dba8e10a2771f906141fff6209c74653a367db", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db1c53105295810821c3019874388f778782247/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db1c53105295810821c3019874388f778782247/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=5db1c53105295810821c3019874388f778782247", "patch": "@@ -1,3 +1,14 @@\n+2005-05-11  Eli Zaretskii  <eliz@gnu.org>\n+\n+\t* pex-djgpp.c: Include string.h, fcntl.h, unistd.h, and\n+\tsys/stat.h.\n+\t(pex_init): Fix last argument to pex_init_common.\n+\t(pex_djgpp_exec_child): Remove leading underscore from _open,\n+\t_dup, _dup2, _close, and _spawnv/_spawnvp.  Replace `program',\n+\twhich is undeclared, with `executable', which was unused.  Remove\n+\tunused variable `e'.  Fix casting of last arg to spawnv/spawnvp.\n+\t(pex_djgpp_wait): Declare arguments with ATTRIBUTE_UNUSED.\n+\n 2005-05-11  Paul Brook  <paul@codesourcery.com>\n \n \t* Makefile.in: Regenerate dependencies."}, {"sha": "b452f466204ffc59cd268e0b74ec4d5779d10dd1", "filename": "libiberty/pex-djgpp.c", "status": "modified", "additions": 41, "deletions": 38, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db1c53105295810821c3019874388f778782247/libiberty%2Fpex-djgpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db1c53105295810821c3019874388f778782247/libiberty%2Fpex-djgpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpex-djgpp.c?ref=5db1c53105295810821c3019874388f778782247", "patch": "@@ -29,6 +29,10 @@ extern int errno;\n #ifdef HAVE_STDLIB_H\n #include <stdlib.h>\n #endif\n+#include <string.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+#include <sys/stat.h>\n #include <process.h>\n \n /* Use ECHILD if available, otherwise use EINVAL.  */\n@@ -68,7 +72,7 @@ pex_init (int flags, const char *pname, const char *tempbase)\n {\n   /* DJGPP does not support pipes.  */\n   flags &= ~ PEX_USE_PIPES;\n-  return pex_init_common (flags, pname, tempbase, funcs);\n+  return pex_init_common (flags, pname, tempbase, &funcs);\n }\n \n /* Open a file for reading.  */\n@@ -119,134 +123,132 @@ pex_djgpp_exec_child (struct pex_obj *obj, int flags, const char *executable,\n \n   if (in != STDIN_FILE_NO)\n     {\n-      org_in = _dup (STDIN_FILE_NO);\n+      org_in = dup (STDIN_FILE_NO);\n       if (org_in < 0)\n \t{\n \t  *err = errno;\n-\t  *errmsg = \"_dup\";\n+\t  *errmsg = \"dup\";\n \t  return -1;\n \t}\n-      if (_dup2 (in, STDIN_FILE_NO) < 0)\n+      if (dup2 (in, STDIN_FILE_NO) < 0)\n \t{\n \t  *err = errno;\n-\t  *errmsg = \"_dup2\";\n+\t  *errmsg = \"dup2\";\n \t  return -1;\n \t}\n-      if (_close (in) < 0)\n+      if (close (in) < 0)\n \t{\n \t  *err = errno;\n-\t  *errmsg = \"_close\";\n+\t  *errmsg = \"close\";\n \t  return -1;\n \t}\n     }\n \n   if (out != STDOUT_FILE_NO)\n     {\n-      org_out = _dup (STDOUT_FILE_NO);\n+      org_out = dup (STDOUT_FILE_NO);\n       if (org_out < 0)\n \t{\n \t  *err = errno;\n-\t  *errmsg = \"_dup\";\n+\t  *errmsg = \"dup\";\n \t  return -1;\n \t}\n-      if (_dup2 (out, STDOUT_FILE_NO) < 0)\n+      if (dup2 (out, STDOUT_FILE_NO) < 0)\n \t{\n \t  *err = errno;\n-\t  *errmsg = \"_dup2\";\n+\t  *errmsg = \"dup2\";\n \t  return -1;\n \t}\n-      if (_close (out) < 0)\n+      if (close (out) < 0)\n \t{\n \t  *err = errno;\n-\t  *errmsg = \"_close\";\n+\t  *errmsg = \"close\";\n \t  return -1;\n \t}\n     }\n \n   if (errdes != STDERR_FILE_NO\n       || (flags & PEX_STDERR_TO_STDOUT) != 0)\n     {\n-      int e;\n-\n-      org_errdes = _dup (STDERR_FILE_NO);\n+      org_errdes = dup (STDERR_FILE_NO);\n       if (org_errdes < 0)\n \t{\n \t  *err = errno;\n-\t  *errmsg = \"_dup\";\n+\t  *errmsg = \"dup\";\n \t  return -1;\n \t}\n-      if (_dup2 ((flags & PEX_STDERR_TO_STDOUT) != 0 ? STDOUT_FILE_NO : errdes,\n+      if (dup2 ((flags & PEX_STDERR_TO_STDOUT) != 0 ? STDOUT_FILE_NO : errdes,\n \t\t STDERR_FILE_NO) < 0)\n \t{\n \t  *err = errno;\n-\t  *errmsg = \"_dup2\";\n+\t  *errmsg = \"dup2\";\n \t  return -1;\n \t}\n       if (errdes != STDERR_FILE_NO)\n \t{\n-\t  if (_close (errdes) < 0)\n+\t  if (close (errdes) < 0)\n \t    {\n \t      *err = errno;\n-\t      *errmsg = \"_close\";\n+\t      *errmsg = \"close\";\n \t      return -1;\n \t    }\n \t}\n     }\n \n-  status = (((flags & PEX_SEARCH) != 0 ? _spawnvp : _spawnv)\n-\t    (P_WAIT, program, (const char **) argv));\n+  status = (((flags & PEX_SEARCH) != 0 ? spawnvp : spawnv)\n+\t    (P_WAIT, executable, (char * const *) argv));\n \n   if (status == -1)\n     {\n       *err = errno;\n-      *errmsg = ((flags & PEX_SEARCH) != 0) ? \"_spawnvp\" : \"_spawnv\";\n+      *errmsg = ((flags & PEX_SEARCH) != 0) ? \"spawnvp\" : \"spawnv\";\n     }\n \n   if (in != STDIN_FILE_NO)\n     {\n-      if (_dup2 (org_in, STDIN_FILE_NO) < 0)\n+      if (dup2 (org_in, STDIN_FILE_NO) < 0)\n \t{\n \t  *err = errno;\n-\t  *errmsg = \"_dup2\";\n+\t  *errmsg = \"dup2\";\n \t  return -1;\n \t}\n-      if (_close (org_in) < 0)\n+      if (close (org_in) < 0)\n \t{\n \t  *err = errno;\n-\t  *errmsg = \"_close\";\n+\t  *errmsg = \"close\";\n \t  return -1;\n \t}\n     }\n \n   if (out != STDOUT_FILE_NO)\n     {\n-      if (_dup2 (org_out, STDOUT_FILE_NO) < 0)\n+      if (dup2 (org_out, STDOUT_FILE_NO) < 0)\n \t{\n \t  *err = errno;\n-\t  *errmsg = \"_dup2\";\n+\t  *errmsg = \"dup2\";\n \t  return -1;\n \t}\n-      if (_close (org_out) < 0)\n+      if (close (org_out) < 0)\n \t{\n \t  *err = errno;\n-\t  *errmsg = \"_close\";\n+\t  *errmsg = \"close\";\n \t  return -1;\n \t}\n     }\n \n   if (errdes != STDERR_FILE_NO\n       || (flags & PEX_STDERR_TO_STDOUT) != 0)\n     {\n-      if (_dup2 (org_errdes, STDERR_FILE_NO) < 0)\n+      if (dup2 (org_errdes, STDERR_FILE_NO) < 0)\n \t{\n \t  *err = errno;\n-\t  *errmsg = \"_dup2\";\n+\t  *errmsg = \"dup2\";\n \t  return -1;\n \t}\n-      if (_close (org_errdes) < 0)\n+      if (close (org_errdes) < 0)\n \t{\n \t  *err = errno;\n-\t  *errmsg = \"_close\";\n+\t  *errmsg = \"close\";\n \t  return -1;\n \t}\n     }\n@@ -268,8 +270,9 @@ pex_djgpp_exec_child (struct pex_obj *obj, int flags, const char *executable,\n \n static int\n pex_djgpp_wait (struct pex_obj *obj, long pid, int *status,\n-\t\tstruct pex_time *time, int done, const char **errmsg,\n-\t\tint *err)\n+\t\tstruct pex_time *time, int done ATTRIBUTE_UNUSED,\n+\t\tconst char **errmsg ATTRIBUTE_UNUSED,\n+\t\tint *err ATTRIBUTE_UNUSED)\n {\n   int *statuses;\n "}]}