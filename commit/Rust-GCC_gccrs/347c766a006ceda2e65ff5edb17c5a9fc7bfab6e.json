{"sha": "347c766a006ceda2e65ff5edb17c5a9fc7bfab6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ3Yzc2NmEwMDZjZWRhMmU2NWZmNWVkYjE3YzVhOWZjN2JmYWI2ZQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2013-01-02T10:04:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-02T10:04:26Z"}, "message": "checks.adb (Apply_Scalar_Range_Check): Implement Check_Float_Overflow.\n\n2013-01-02  Robert Dewar  <dewar@adacore.com>\n\n\t* checks.adb (Apply_Scalar_Range_Check): Implement Check_Float_Overflow.\n\t* opt.ads, opt.adb: Handle flags Check_Float_Overflow[_Config].\n\t* par-prag.adb: Add dummy entry for pragma Check_Float_Overflow.\n\t* sem_prag.adb: Implement pragma Check_Float_Overflow.\n\t* snames.ads-tmpl: Add entries for pragma Check_Float_Overflow.\n\t* switch-c.adb: Recognize -gnateF switch.\n\t* tree_io.ads: Update ASIS version number.\n\t* gnat_rm.texi: Add documentation of pragma Check_Float_Overflow.\n\nFrom-SVN: r194788", "tree": {"sha": "b51fd5c23782fafcb56e62685b349b83b9750051", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b51fd5c23782fafcb56e62685b349b83b9750051"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/347c766a006ceda2e65ff5edb17c5a9fc7bfab6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/347c766a006ceda2e65ff5edb17c5a9fc7bfab6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/347c766a006ceda2e65ff5edb17c5a9fc7bfab6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/347c766a006ceda2e65ff5edb17c5a9fc7bfab6e/comments", "author": null, "committer": null, "parents": [{"sha": "685bc70fd8dfd17fa62266c2ad05567b37540119", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/685bc70fd8dfd17fa62266c2ad05567b37540119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/685bc70fd8dfd17fa62266c2ad05567b37540119"}], "stats": {"total": 186, "additions": 154, "deletions": 32}, "files": [{"sha": "3a3de0df51eea39d0e2cdfbd17236d5f13c5941e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347c766a006ceda2e65ff5edb17c5a9fc7bfab6e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347c766a006ceda2e65ff5edb17c5a9fc7bfab6e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=347c766a006ceda2e65ff5edb17c5a9fc7bfab6e", "patch": "@@ -1,3 +1,14 @@\n+2013-01-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* checks.adb (Apply_Scalar_Range_Check): Implement Check_Float_Overflow.\n+\t* opt.ads, opt.adb: Handle flags Check_Float_Overflow[_Config].\n+\t* par-prag.adb: Add dummy entry for pragma Check_Float_Overflow.\n+\t* sem_prag.adb: Implement pragma Check_Float_Overflow.\n+\t* snames.ads-tmpl: Add entries for pragma Check_Float_Overflow.\n+\t* switch-c.adb: Recognize -gnateF switch.\n+\t* tree_io.ads: Update ASIS version number.\n+\t* gnat_rm.texi: Add documentation of pragma Check_Float_Overflow.\n+\n 2013-01-02  Robert Dewar  <dewar@adacore.com>\n \n \t* checks.adb, exp_ch4.adb, exp_ch6.adb, exp_ch7.adb, exp_ch9.adb,"}, {"sha": "38b6ea4d7e21412e1122f99072a1941a89f03f56", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 42, "deletions": 28, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347c766a006ceda2e65ff5edb17c5a9fc7bfab6e/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347c766a006ceda2e65ff5edb17c5a9fc7bfab6e/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=347c766a006ceda2e65ff5edb17c5a9fc7bfab6e", "patch": "@@ -2692,15 +2692,24 @@ package body Checks is\n       Is_Unconstrained_Subscr_Ref :=\n         Is_Subscr_Ref and then not Is_Constrained (Arr_Typ);\n \n-      --  Always do a range check if the source type includes infinities and\n-      --  the target type does not include infinities. We do not do this if\n-      --  range checks are killed.\n+      --  Special checks for floating-point type\n \n-      if Is_Floating_Point_Type (S_Typ)\n-        and then Has_Infinities (S_Typ)\n-        and then not Has_Infinities (Target_Typ)\n-      then\n-         Enable_Range_Check (Expr);\n+      if Is_Floating_Point_Type (S_Typ) then\n+\n+         --  Always do a range check if the source type includes infinities and\n+         --  the target type does not include infinities. We do not do this if\n+         --  range checks are killed.\n+\n+         if Has_Infinities (S_Typ)\n+           and then not Has_Infinities (Target_Typ)\n+         then\n+            Enable_Range_Check (Expr);\n+\n+         --  Always do a range check for operators if option set\n+\n+         elsif Check_Float_Overflow and then Nkind (Expr) in N_Op then\n+            Enable_Range_Check (Expr);\n+         end if;\n       end if;\n \n       --  Return if we know expression is definitely in the range of the target\n@@ -2780,15 +2789,14 @@ package body Checks is\n       --  only if this is not a conversion between integer and real types.\n \n       if not Is_Unconstrained_Subscr_Ref\n-        and then\n-           Is_Discrete_Type (S_Typ) = Is_Discrete_Type (Target_Typ)\n+        and then Is_Discrete_Type (S_Typ) = Is_Discrete_Type (Target_Typ)\n         and then\n           (In_Subrange_Of (S_Typ, Target_Typ, Fixed_Int)\n              or else\n                Is_In_Range (Expr, Target_Typ,\n                             Assume_Valid => True,\n-                            Fixed_Int => Fixed_Int,\n-                            Int_Real  => Int_Real))\n+                            Fixed_Int    => Fixed_Int,\n+                            Int_Real     => Int_Real))\n       then\n          return;\n \n@@ -2800,12 +2808,18 @@ package body Checks is\n          Bad_Value;\n          return;\n \n+      --  Floating-point case\n       --  In the floating-point case, we only do range checks if the type is\n       --  constrained. We definitely do NOT want range checks for unconstrained\n       --  types, since we want to have infinities\n \n       elsif Is_Floating_Point_Type (S_Typ) then\n-         if Is_Constrained (S_Typ) then\n+\n+      --  Normally, we only do range checks if the type is constrained. We do\n+      --  NOT want range checks for unconstrained types, since we want to have\n+      --  infinities. Override this decision in Check_Float_Overflow mode.\n+\n+         if Is_Constrained (S_Typ) or else Check_Float_Overflow then\n             Enable_Range_Check (Expr);\n          end if;\n \n@@ -5650,22 +5664,24 @@ package body Checks is\n       --  First special case, if the source type is already within the range\n       --  of the target type, then no check is needed (probably we should have\n       --  stopped Do_Range_Check from being set in the first place, but better\n-      --  late than later in preventing junk code!\n-\n-      --  We do NOT apply this if the source node is a literal, since in this\n-      --  case the literal has already been labeled as having the subtype of\n-      --  the target.\n+      --  late than never in preventing junk code!\n \n       if In_Subrange_Of (Source_Type, Target_Type)\n+\n+        --  We do NOT apply this if the source node is a literal, since in this\n+        --  case the literal has already been labeled as having the subtype of\n+        --  the target.\n+\n         and then not\n-          (Nkind (N) = N_Integer_Literal\n-             or else\n-           Nkind (N) = N_Real_Literal\n+          (Nkind_In (N, N_Integer_Literal, N_Real_Literal, N_Character_Literal)\n              or else\n-           Nkind (N) = N_Character_Literal\n-             or else\n-           (Is_Entity_Name (N)\n-              and then Ekind (Entity (N)) = E_Enumeration_Literal))\n+               (Is_Entity_Name (N)\n+                 and then Ekind (Entity (N)) = E_Enumeration_Literal))\n+\n+        --  Also do not apply this for floating-point if Check_Float_Overflow\n+\n+        and then not\n+          (Is_Floating_Point_Type (Source_Type) and Check_Float_Overflow)\n       then\n          return;\n       end if;\n@@ -5675,9 +5691,7 @@ package body Checks is\n       --  reference). Such a double evaluation is always a potential source\n       --  of inefficiency, and is functionally incorrect in the volatile case.\n \n-      if not Is_Entity_Name (N)\n-        or else Treat_As_Volatile (Entity (N))\n-      then\n+      if not Is_Entity_Name (N) or else Treat_As_Volatile (Entity (N)) then\n          Force_Evaluation (N);\n       end if;\n "}, {"sha": "759ae5a8f8c92161122b35739fdf5d2d7d870fd6", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347c766a006ceda2e65ff5edb17c5a9fc7bfab6e/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347c766a006ceda2e65ff5edb17c5a9fc7bfab6e/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=347c766a006ceda2e65ff5edb17c5a9fc7bfab6e", "patch": "@@ -111,6 +111,7 @@ Implementation Defined Pragmas\n * Pragma Ast_Entry::\n * Pragma C_Pass_By_Copy::\n * Pragma Check::\n+* Pragma Check_Float_Overflow::\n * Pragma Check_Name::\n * Pragma Check_Policy::\n * Pragma Comment::\n@@ -850,6 +851,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Ast_Entry::\n * Pragma C_Pass_By_Copy::\n * Pragma Check::\n+* Pragma Check_Float_Overflow::\n * Pragma Check_Name::\n * Pragma Check_Policy::\n * Pragma Comment::\n@@ -1402,6 +1404,58 @@ Checks introduced by this pragma are normally deactivated by default. They can\n be activated either by the command line option @option{-gnata}, which turns on\n all checks, or individually controlled using pragma @code{Check_Policy}.\n \n+@node Pragma Check_Float_Overflow\n+@unnumberedsec Pragma Check_Float_Overflow\n+@cindex Floating-point overflow\n+@findex Check_Float_Overflow\n+@noindent\n+Syntax:\n+@smallexample @c ada\n+pragma Check_Float_Overflow;\n+@end smallexample\n+\n+@noindent\n+In Ada, the predefined floating-point types (@code{Short_Float},\n+@code{Float}, @code{Long_Float}, @code{Long_Long_Float}) are\n+defined as being unconstrained. This means that even though they\n+have well defined base ranges, there is no requirement that an\n+overflow exception be raised when the result of an operation is\n+outside this base range. This definition accomodates the notion\n+of infinities in IEEE floating-point, and corresponds to the\n+efficient execution mode on most machines. GNAT will not raise\n+overflow exceptions on these machines, instead it will generate\n+infinities and NaN's as defined in the IEEE standard.\n+\n+Although the generation of infinities is efficient, it is not\n+always desirable, and it is often the case that it would be\n+preferable to check for overflows, even if this resulted in\n+substantially less efficient code. This can be accomplished\n+by defining your own float subtypes, and indeed such types\n+can have the same base range as in:\n+\n+@smallexample @c ada\n+subtype My_Float is Float range Float'Range;\n+@end smallexample\n+\n+@noindent\n+In this example, @code{My_Float} has the same range as\n+@code{Float} but it is constrained, so operations on\n+@code{My_Float} values will be checked for overflow\n+against this range.\n+\n+However, it is often convenient to avoid the need to\n+define your own floating-point types, and instead use\n+the standard predefined types. The @code{Check_Float_Overflow}\n+configuration pragma achieves that. If a unit is compiled\n+subject to this configuration pragma, then all operations\n+on predefined floating-point types will be treated as\n+though those types were constrained and overflow checks\n+will be generated, resulting in a @code{Constraint_Error}\n+exception if the result is out of range.\n+\n+This mode can also be set by use of the compiler\n+switch @option{-gnateF}.\n+\n @node Pragma Check_Name\n @unnumberedsec Pragma Check_Name\n @cindex Defining check names"}, {"sha": "98eab409877ab60fcdbdf5731add711d28ae7335", "filename": "gcc/ada/opt.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347c766a006ceda2e65ff5edb17c5a9fc7bfab6e/gcc%2Fada%2Fopt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347c766a006ceda2e65ff5edb17c5a9fc7bfab6e/gcc%2Fada%2Fopt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.adb?ref=347c766a006ceda2e65ff5edb17c5a9fc7bfab6e", "patch": "@@ -57,6 +57,7 @@ package body Opt is\n       Ada_Version_Explicit_Config           := Ada_Version_Explicit;\n       Assertions_Enabled_Config             := Assertions_Enabled;\n       Assume_No_Invalid_Values_Config       := Assume_No_Invalid_Values;\n+      Check_Float_Overflow_Config           := Check_Float_Overflow;\n       Check_Policy_List_Config              := Check_Policy_List;\n       Debug_Pragmas_Disabled_Config         := Debug_Pragmas_Disabled;\n       Debug_Pragmas_Enabled_Config          := Debug_Pragmas_Enabled;\n@@ -91,6 +92,7 @@ package body Opt is\n       Ada_Version_Explicit           := Save.Ada_Version_Explicit;\n       Assertions_Enabled             := Save.Assertions_Enabled;\n       Assume_No_Invalid_Values       := Save.Assume_No_Invalid_Values;\n+      Check_Float_Overflow           := Save.Check_Float_Overflow;\n       Check_Policy_List              := Save.Check_Policy_List;\n       Debug_Pragmas_Disabled         := Save.Debug_Pragmas_Disabled;\n       Debug_Pragmas_Enabled          := Save.Debug_Pragmas_Enabled;\n@@ -127,6 +129,7 @@ package body Opt is\n       Save.Ada_Version_Explicit           := Ada_Version_Explicit;\n       Save.Assertions_Enabled             := Assertions_Enabled;\n       Save.Assume_No_Invalid_Values       := Assume_No_Invalid_Values;\n+      Save.Check_Float_Overflow           := Check_Float_Overflow;\n       Save.Check_Policy_List              := Check_Policy_List;\n       Save.Debug_Pragmas_Disabled         := Debug_Pragmas_Disabled;\n       Save.Debug_Pragmas_Enabled          := Debug_Pragmas_Enabled;\n@@ -198,6 +201,7 @@ package body Opt is\n          Ada_Version_Explicit        := Ada_Version_Explicit_Config;\n          Assertions_Enabled          := Assertions_Enabled_Config;\n          Assume_No_Invalid_Values    := Assume_No_Invalid_Values_Config;\n+         Check_Float_Overflow        := Check_Float_Overflow_Config;\n          Check_Policy_List           := Check_Policy_List_Config;\n          Debug_Pragmas_Disabled      := Debug_Pragmas_Disabled_Config;\n          Debug_Pragmas_Enabled       := Debug_Pragmas_Enabled_Config;\n@@ -255,6 +259,7 @@ package body Opt is\n       Tree_Read_Int  (Assertions_Enabled_Config_Val);\n       Tree_Read_Bool (All_Errors_Mode);\n       Tree_Read_Bool (Assertions_Enabled);\n+      Tree_Read_Bool (Check_Float_Overflow);\n       Tree_Read_Int  (Int (Check_Policy_List));\n       Tree_Read_Bool (Debug_Pragmas_Disabled);\n       Tree_Read_Bool (Debug_Pragmas_Enabled);\n@@ -321,6 +326,7 @@ package body Opt is\n       Tree_Write_Int  (Boolean'Pos (Assertions_Enabled_Config));\n       Tree_Write_Bool (All_Errors_Mode);\n       Tree_Write_Bool (Assertions_Enabled);\n+      Tree_Write_Bool (Check_Float_Overflow);\n       Tree_Write_Int  (Int (Check_Policy_List));\n       Tree_Write_Bool (Debug_Pragmas_Disabled);\n       Tree_Write_Bool (Debug_Pragmas_Enabled);"}, {"sha": "7e622148b482731e58582eb2f419418ceab1d552", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347c766a006ceda2e65ff5edb17c5a9fc7bfab6e/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347c766a006ceda2e65ff5edb17c5a9fc7bfab6e/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=347c766a006ceda2e65ff5edb17c5a9fc7bfab6e", "patch": "@@ -276,6 +276,13 @@ package Opt is\n    --  Set to True to detect whether subprogram parameters and function results\n    --  alias the same object(s).\n \n+   Check_Float_Overflow : Boolean := False;\n+   --  GNAT\n+   --  Set to True to check that operations on predefined unconstrained float\n+   --  types (e.g. Float, Long_Float) do not overflow and generate infinities\n+   --  or invalid values. Set by the Check_Float_Overflow pragma, or by use\n+   --  of the -gnateo switch.\n+\n    Check_Object_Consistency : Boolean := False;\n    --  GNATBIND, GNATMAKE\n    --  Set to True to check whether every object file is consistent with\n@@ -556,8 +563,7 @@ package Opt is\n    Extensions_Allowed : Boolean := False;\n    --  GNAT\n    --  Set to True by switch -gnatX if GNAT specific language extensions\n-   --  are allowed. For example, the use of 'Constrained with objects of\n-   --  generic types is a GNAT extension.\n+   --  are allowed. Currently there are no such defined extensions.\n \n    type External_Casing_Type is (\n      As_Is,       -- External names cased as they appear in the Ada source\n@@ -1021,7 +1027,7 @@ package Opt is\n    Object_Path_File_Name : String_Ptr := null;\n    --  GNAT2WHY\n    --  Path of the temporary file that contains a list of object directories\n-   --  passed by -gnateO=<obj_pat_file>.\n+   --  passed by -gnateO=<obj_path_file>.\n \n    One_Compilation_Per_Obj_Dir : Boolean := False;\n    --  GNATMAKE, GPRBUILD\n@@ -1726,6 +1732,13 @@ package Opt is\n    --  -gnatB, and possibly modified by the use of the configuration pragma\n    --  Assume_No_Invalid_Values.\n \n+   Check_Float_Overflow_Config : Boolean;\n+   --  GNAT\n+   --  Set to True to check that operations on predefined unconstrained float\n+   --  types (e.g. Float, Long_Float) do not overflow and generate infinities\n+   --  or invalid values. Set by the Check_Float_Overflow pragma, or by use\n+   --  of the -gnateo switch.\n+\n    Check_Policy_List_Config : Node_Id;\n    --  GNAT\n    --  This points to the list of N_Pragma nodes for Check_Policy pragmas\n@@ -1981,6 +1994,7 @@ private\n       Ada_Version_Explicit           : Ada_Version_Type;\n       Assertions_Enabled             : Boolean;\n       Assume_No_Invalid_Values       : Boolean;\n+      Check_Float_Overflow           : Boolean;\n       Check_Policy_List              : Node_Id;\n       Debug_Pragmas_Disabled         : Boolean;\n       Debug_Pragmas_Enabled          : Boolean;"}, {"sha": "579dd374a138b495fbc04348c1239f6ccf84e098", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347c766a006ceda2e65ff5edb17c5a9fc7bfab6e/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347c766a006ceda2e65ff5edb17c5a9fc7bfab6e/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=347c766a006ceda2e65ff5edb17c5a9fc7bfab6e", "patch": "@@ -1106,6 +1106,7 @@ begin\n            Pragma_Attach_Handler                 |\n            Pragma_Attribute_Definition           |\n            Pragma_Check                          |\n+           Pragma_Check_Float_Overflow           |\n            Pragma_Check_Name                     |\n            Pragma_Check_Policy                   |\n            Pragma_CIL_Constructor                |"}, {"sha": "ae69b0e194559268c2405b23868c28ffe32fcfef", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347c766a006ceda2e65ff5edb17c5a9fc7bfab6e/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347c766a006ceda2e65ff5edb17c5a9fc7bfab6e/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=347c766a006ceda2e65ff5edb17c5a9fc7bfab6e", "patch": "@@ -7560,6 +7560,18 @@ package body Sem_Prag is\n             end if;\n          end Check;\n \n+         --------------------------\n+         -- Check_Float_Overflow --\n+         --------------------------\n+\n+         --  pragma Check_Float_Overflow;\n+\n+         when Pragma_Check_Float_Overflow =>\n+            GNAT_Pragma;\n+            Check_Valid_Configuration_Pragma;\n+            Check_Arg_Count (0);\n+            Check_Float_Overflow := True;\n+\n          ----------------\n          -- Check_Name --\n          ----------------\n@@ -15740,6 +15752,7 @@ package body Sem_Prag is\n       Pragma_Atomic_Components              =>  0,\n       Pragma_Attach_Handler                 => -1,\n       Pragma_Check                          => 99,\n+      Pragma_Check_Float_Overflow           =>  0,\n       Pragma_Check_Name                     =>  0,\n       Pragma_Check_Policy                   =>  0,\n       Pragma_CIL_Constructor                => -1,"}, {"sha": "2cb296dd1be4cd52d26ed688092cdfc0edd1d3e5", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347c766a006ceda2e65ff5edb17c5a9fc7bfab6e/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347c766a006ceda2e65ff5edb17c5a9fc7bfab6e/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=347c766a006ceda2e65ff5edb17c5a9fc7bfab6e", "patch": "@@ -366,6 +366,7 @@ package Snames is\n    Name_Assume_No_Invalid_Values       : constant Name_Id := N + $; -- GNAT\n    Name_Attribute_Definition           : constant Name_Id := N + $; -- GNAT\n    Name_C_Pass_By_Copy                 : constant Name_Id := N + $; -- GNAT\n+   Name_Check_Float_Overflow           : constant Name_Id := N + $; -- GNAT\n    Name_Check_Name                     : constant Name_Id := N + $; -- GNAT\n    Name_Check_Policy                   : constant Name_Id := N + $; -- GNAT\n    Name_Compile_Time_Error             : constant Name_Id := N + $; -- GNAT\n@@ -1665,6 +1666,7 @@ package Snames is\n       Pragma_Assume_No_Invalid_Values,\n       Pragma_Attribute_Definition,\n       Pragma_C_Pass_By_Copy,\n+      Pragma_Check_Float_Overflow,\n       Pragma_Check_Name,\n       Pragma_Check_Policy,\n       Pragma_Compile_Time_Error,"}, {"sha": "f6d8fee2348d0edb55ff0e2780142b0961293233", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347c766a006ceda2e65ff5edb17c5a9fc7bfab6e/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347c766a006ceda2e65ff5edb17c5a9fc7bfab6e/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=347c766a006ceda2e65ff5edb17c5a9fc7bfab6e", "patch": "@@ -514,6 +514,12 @@ package body Switch.C is\n                      Ptr := Ptr + 1;\n                      Full_Path_Name_For_Brief_Errors := True;\n \n+                  --  -gnateF (Check_Float_Overflow)\n+\n+                  when 'F' =>\n+                     Ptr := Ptr + 1;\n+                     Check_Float_Overflow := True;\n+\n                   --  -gnateG (save preprocessor output)\n \n                   when 'G' =>"}, {"sha": "1f5b90059eb589a3597541c31fdb1c6e3a15e052", "filename": "gcc/ada/tree_io.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347c766a006ceda2e65ff5edb17c5a9fc7bfab6e/gcc%2Fada%2Ftree_io.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347c766a006ceda2e65ff5edb17c5a9fc7bfab6e/gcc%2Fada%2Ftree_io.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftree_io.ads?ref=347c766a006ceda2e65ff5edb17c5a9fc7bfab6e", "patch": "@@ -47,7 +47,7 @@ package Tree_IO is\n    Tree_Format_Error : exception;\n    --  Raised if a format error is detected in the input file\n \n-   ASIS_Version_Number : constant := 29;\n+   ASIS_Version_Number : constant := 30;\n    --  ASIS Version. This is used to check for consistency between the compiler\n    --  used to generate trees and an ASIS application that is reading the\n    --  trees. It must be incremented whenever a change is made to the tree\n@@ -58,6 +58,7 @@ package Tree_IO is\n    --  28  Changes in Snames\n    --  29  Changes in Sem_Ch3 (tree copying in case of discriminant constraint\n    --      for concurrent types).\n+   --  30  Add Check_Float_Overflow boolean to tree file\n \n    procedure Tree_Read_Initialize (Desc : File_Descriptor);\n    --  Called to initialize reading of a tree file. This call must be made"}]}