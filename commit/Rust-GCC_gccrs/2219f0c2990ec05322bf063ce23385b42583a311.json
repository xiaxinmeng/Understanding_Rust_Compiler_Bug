{"sha": "2219f0c2990ec05322bf063ce23385b42583a311", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIxOWYwYzI5OTBlYzA1MzIyYmYwNjNjZTIzMzg1YjQyNTgzYTMxMQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-12-24T21:55:59Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-12-24T21:55:59Z"}, "message": "re PR target/51244 ([SH] Inefficient conditional branch and code around T bit)\n\ngcc/\n\tPR target/51244\n\t* config/sh/sh.md (*mov_t_msb_neg): Convert split into insn_and_split.\n\nFrom-SVN: r219062", "tree": {"sha": "072fabd536e31b9c2ef0378066ce7634253149a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/072fabd536e31b9c2ef0378066ce7634253149a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2219f0c2990ec05322bf063ce23385b42583a311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2219f0c2990ec05322bf063ce23385b42583a311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2219f0c2990ec05322bf063ce23385b42583a311", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2219f0c2990ec05322bf063ce23385b42583a311/comments", "author": null, "committer": null, "parents": [{"sha": "285470983b6dda9f600e3dc20f134a925de61ddf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/285470983b6dda9f600e3dc20f134a925de61ddf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/285470983b6dda9f600e3dc20f134a925de61ddf"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "2d21dfe3c5a76fac8af956cac520706e8368b16f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2219f0c2990ec05322bf063ce23385b42583a311/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2219f0c2990ec05322bf063ce23385b42583a311/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2219f0c2990ec05322bf063ce23385b42583a311", "patch": "@@ -1,3 +1,8 @@\n+2014-12-24  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/51244\n+\t* config/sh/sh.md (*mov_t_msb_neg): Convert split into insn_and_split.\n+\n 2014-12-24  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gengtype.h (xasprintf): Remove declaration."}, {"sha": "225cc3618a561765b03d570599884ba19c363de1", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2219f0c2990ec05322bf063ce23385b42583a311/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2219f0c2990ec05322bf063ce23385b42583a311/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=2219f0c2990ec05322bf063ce23385b42583a311", "patch": "@@ -11601,8 +11601,8 @@ label:\n    (set (match_dup 0) (xor:SI (match_dup 0) (const_int 1)))])\n \n ;; Use negc to store the T bit in a MSB of a reg in the following way:\n-;;\tT = 1: 0x80000000 -> reg\n-;;\tT = 0: 0x7FFFFFFF -> reg\n+;;\tT = 0: 0x80000000 -> reg\n+;;\tT = 1: 0x7FFFFFFF -> reg\n ;; This works because 0 - 0x80000000 = 0x80000000.\n ;;\n ;; This insn must not match again after it has been split into the constant\n@@ -11635,27 +11635,27 @@ label:\n   \"negc\t%1,%0\"\n   [(set_attr \"type\" \"arith\")])\n \n-;; These are essentially the same as above, but with the inverted T bit.\n-;; Combine recognizes the split patterns, but does not take them sometimes\n-;; if the T_REG clobber is specified.  Instead it tries to split out the\n-;; T bit negation.  Since these splits are supposed to be taken only by\n-;; combine, it will see the T_REG clobber of the *mov_t_msb_neg insn, so this\n-;; should be fine.\n-(define_split\n+(define_insn_and_split \"*mov_t_msb_neg\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\")\n \t(plus:SI (match_operand 1 \"negt_reg_operand\")\n-\t\t (const_int 2147483647)))]  ;; 0x7fffffff\n-  \"TARGET_SH1 && can_create_pseudo_p ()\"\n+\t\t (const_int 2147483647)))  ;; 0x7fffffff\n+   (clobber (reg:SI T_REG))]\n+  \"TARGET_SH1\"\n+   \"#\"\n+   \"&& can_create_pseudo_p ()\"\n   [(parallel [(set (match_dup 0)\n \t\t   (minus:SI (const_int -2147483648) (reg:SI T_REG)))\n \t      (clobber (reg:SI T_REG))])])\n \n-(define_split\n+(define_insn_and_split \"*mov_t_msb_neg\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\")\n \t(if_then_else:SI (match_operand 1 \"t_reg_operand\")\n \t\t\t (const_int 2147483647)  ;; 0x7fffffff\n-\t\t\t (const_int -2147483648)))]  ;; 0x80000000\n-  \"TARGET_SH1 && can_create_pseudo_p ()\"\n+\t\t\t (const_int -2147483648)))  ;; 0x80000000\n+   (clobber (reg:SI T_REG))]\n+  \"TARGET_SH1\"\n+  \"#\"\n+  \"&& can_create_pseudo_p ()\"\n   [(parallel [(set (match_dup 0)\n \t\t   (minus:SI (const_int -2147483648) (reg:SI T_REG)))\n \t      (clobber (reg:SI T_REG))])])"}]}