{"sha": "ed01d707f8594827de95304371d5b62752410842", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQwMWQ3MDdmODU5NDgyN2RlOTUzMDQzNzFkNWI2Mjc1MjQxMDg0Mg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-05-25T20:13:11Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-05-25T20:19:03Z"}, "message": "Fix internal error on store to FP component at -O2\n\nThis is about a GIMPLE verification failure at -O2 or above because\nthe GIMPLE store merging pass generates a NOP_EXPR between a FP type\nand an integral type.  This happens when the bit-field insertion path\nis taken for a FP field, which can happen in Ada for bit-packed record\ntypes.\n\nIt is fixed by generating an intermediate VIEW_CONVERT_EXPR.  The patch\nalso tames a little the bit-field insertion path because, for bit-packed\nrecord  types in Ada, you can end up with large bit-field regions, which\nresults in a lot of mask-and-shifts instructions.\n\ngcc/ChangeLog\n\t* gimple-ssa-store-merging.c (merged_store_group::can_be_merged_into):\n\tOnly turn MEM_REFs into bit-field stores for small bit-field regions\n\t(imm_store_chain_info::output_merged_store): Be prepared for sources\n\twith non-integral type in the bit-field insertion case.\n\t(pass_store_merging::process_store): Use MAX_BITSIZE_MODE_ANY_INT as\n\tthe largest size for the bit-field case.\n\ngcc/testsuite/ChangeLog\n\t* gnat.dg/opt84.adb: New test.", "tree": {"sha": "f42cb873d39181ee91f8fe52962b57a66c1b0c3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f42cb873d39181ee91f8fe52962b57a66c1b0c3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed01d707f8594827de95304371d5b62752410842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed01d707f8594827de95304371d5b62752410842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed01d707f8594827de95304371d5b62752410842", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed01d707f8594827de95304371d5b62752410842/comments", "author": null, "committer": null, "parents": [{"sha": "14cd049afcb992ac334b4a2ad7be42ee78fe31eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14cd049afcb992ac334b4a2ad7be42ee78fe31eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14cd049afcb992ac334b4a2ad7be42ee78fe31eb"}], "stats": {"total": 107, "additions": 103, "deletions": 4}, "files": [{"sha": "a96dedc88382a36aec3b87b19ae4565787fea183", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed01d707f8594827de95304371d5b62752410842/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed01d707f8594827de95304371d5b62752410842/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed01d707f8594827de95304371d5b62752410842", "patch": "@@ -1,3 +1,12 @@\n+2020-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gimple-ssa-store-merging.c (merged_store_group::can_be_merged_into):\n+\tOnly turn MEM_REFs into bit-field stores for small bit-field regions.\n+\t(imm_store_chain_info::output_merged_store): Be prepared for sources\n+\twith non-integral type in the bit-field insertion case.\n+\t(pass_store_merging::process_store): Use MAX_BITSIZE_MODE_ANY_INT as\n+\tthe largest size for the bit-field case.\n+\n 2020-05-25  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/mmx.md (*vec_dupv2sf): Redefine as define_insn."}, {"sha": "400a0010c343828550b5c81643a5260a0bbd16a2", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed01d707f8594827de95304371d5b62752410842/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed01d707f8594827de95304371d5b62752410842/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=ed01d707f8594827de95304371d5b62752410842", "patch": "@@ -1867,19 +1867,22 @@ merged_store_group::can_be_merged_into (store_immediate_info *info)\n   if (stores[0]->rhs_code == BIT_INSERT_EXPR && info->rhs_code == INTEGER_CST)\n     return true;\n \n-  /* We can turn MEM_REF into BIT_INSERT_EXPR for bit-field stores.  */\n+  /* We can turn MEM_REF into BIT_INSERT_EXPR for bit-field stores, but do it\n+     only for small regions since this can generate a lot of instructions.  */\n   if (info->rhs_code == MEM_REF\n       && (stores[0]->rhs_code == INTEGER_CST\n \t  || stores[0]->rhs_code == BIT_INSERT_EXPR)\n       && info->bitregion_start == stores[0]->bitregion_start\n-      && info->bitregion_end == stores[0]->bitregion_end)\n+      && info->bitregion_end == stores[0]->bitregion_end\n+      && info->bitregion_end - info->bitregion_start < MAX_FIXED_MODE_SIZE)\n     return true;\n \n   if (stores[0]->rhs_code == MEM_REF\n       && (info->rhs_code == INTEGER_CST\n \t  || info->rhs_code == BIT_INSERT_EXPR)\n       && info->bitregion_start == stores[0]->bitregion_start\n-      && info->bitregion_end == stores[0]->bitregion_end)\n+      && info->bitregion_end == stores[0]->bitregion_end\n+      && info->bitregion_end - info->bitregion_start < MAX_FIXED_MODE_SIZE)\n     return true;\n \n   return false;\n@@ -4172,6 +4175,15 @@ imm_store_chain_info::output_merged_store (merged_store_group *group)\n \t\t  const HOST_WIDE_INT end_gap\n \t\t    = (try_bitpos + try_size) - (info->bitpos + info->bitsize);\n \t\t  tree tem = info->ops[0].val;\n+\t\t  if (!INTEGRAL_TYPE_P (TREE_TYPE (tem)))\n+\t\t    {\n+\t\t      const unsigned HOST_WIDE_INT size\n+\t\t\t= tree_to_uhwi (TYPE_SIZE (TREE_TYPE (tem)));\n+\t\t      tree integer_type\n+\t\t\t= build_nonstandard_integer_type (size, UNSIGNED);\n+\t\t      tem = gimple_build (&seq, loc, VIEW_CONVERT_EXPR,\n+\t\t\t\t\t  integer_type, tem);\n+\t\t    }\n \t\t  if (TYPE_PRECISION (TREE_TYPE (tem)) <= info->bitsize)\n \t\t    {\n \t\t      tree bitfield_type\n@@ -4788,7 +4800,7 @@ pass_store_merging::process_store (gimple *stmt)\n \t  && bitsize.is_constant (&const_bitsize)\n \t  && ((const_bitsize % BITS_PER_UNIT) != 0\n \t      || !multiple_p (bitpos, BITS_PER_UNIT))\n-\t  && const_bitsize <= 64)\n+\t  && const_bitsize <= MAX_FIXED_MODE_SIZE)\n \t{\n \t  /* Bypass a conversion to the bit-field type.  */\n \t  if (!bit_not_p"}, {"sha": "aec3a21995313fe761208ec110cb7cca4c2a54dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed01d707f8594827de95304371d5b62752410842/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed01d707f8594827de95304371d5b62752410842/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed01d707f8594827de95304371d5b62752410842", "patch": "@@ -1,3 +1,7 @@\n+2020-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt84.adb: New test.\n+\n 2020-05-25  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/sse2-mmx-18a.c (dg-options): Remove -mno-avx512vl."}, {"sha": "45bce7eb6256aa86575755303141a78bb50f8bef", "filename": "gcc/testsuite/gnat.dg/opt84.adb", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed01d707f8594827de95304371d5b62752410842/gcc%2Ftestsuite%2Fgnat.dg%2Fopt84.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed01d707f8594827de95304371d5b62752410842/gcc%2Ftestsuite%2Fgnat.dg%2Fopt84.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt84.adb?ref=ed01d707f8594827de95304371d5b62752410842", "patch": "@@ -0,0 +1,74 @@\n+--  { dg-do compile }\n+--  { dg-options \"-O2\" }\n+\n+with Ada.Text_IO;\n+with Interfaces;\n+\n+procedure Opt84 is\n+\n+   type Integer_8  is new Interfaces.Integer_8;\n+   type Integer_16 is new Interfaces.Integer_16;\n+   type Integer_32 is new Interfaces.Integer_32;\n+\n+   type Float_32 is new Interfaces.IEEE_Float_32;\n+\n+   type Natural_4 is range 0 .. 2 ** 4 - 1;\n+   for Natural_4'Size use 4;\n+\n+   type Rec_Type is\n+      record\n+         Field_A_Int_8    : Integer_8;\n+         Field_B_Nat_4    : Natural_4;\n+         Field_C_Nat_4    : Natural_4;\n+         Field_D_Int_32   : Integer_32;\n+         Field_E_Int_32   : Integer_32;\n+         Field_F_Float_32 : Float_32;\n+         Field_G_Float_32 : Float_32;\n+         Field_H_Float_32 : Float_32;\n+         Field_I_Float_32 : Float_32;\n+         Field_J_Int_16   : Integer_16;\n+         Field_K_Int_16   : Integer_16;\n+         Field_L_Int_16   : Integer_16;\n+         Field_M_Int_16   : Integer_16;\n+         Field_N_Float_32 : Float_32;\n+         Field_O_Float_32 : Float_32;\n+      end record;\n+   pragma Pack (Rec_Type);\n+   for Rec_Type'Alignment use 1;\n+\n+   procedure Print\n+     (Item : in Rec_Type) is\n+   begin\n+      Ada.Text_IO.Put_Line (Item.Field_F_Float_32'Image);\n+      Ada.Text_IO.Put_Line (Item.Field_G_Float_32'Image);\n+      Ada.Text_IO.Put_Line (Item.Field_H_Float_32'Image);\n+      Ada.Text_IO.Put_Line (Item.Field_I_Float_32'Image);\n+   end Print;\n+\n+   procedure Test_Foo is\n+      Source : Rec_Type;\n+      Dest   : Rec_Type;\n+   begin\n+      Source.Field_A_Int_8 := 0;\n+      Dest.Field_A_Int_8    := 1;\n+      Dest.Field_B_Nat_4    := Source.Field_B_Nat_4;\n+      Dest.Field_C_Nat_4    := Source.Field_C_Nat_4;\n+      Dest.Field_D_Int_32   := Source.Field_D_Int_32;\n+      Dest.Field_E_Int_32   := Source.Field_E_Int_32;\n+      Dest.Field_F_Float_32 := Source.Field_F_Float_32;\n+      Dest.Field_G_Float_32 := Source.Field_G_Float_32;\n+      Dest.Field_H_Float_32 := Source.Field_H_Float_32;\n+      Dest.Field_I_Float_32 := Source.Field_I_Float_32;\n+      Dest.Field_J_Int_16   := Source.Field_J_Int_16;\n+      Dest.Field_K_Int_16   := Source.Field_K_Int_16;\n+      Dest.Field_L_Int_16   := Source.Field_L_Int_16;\n+      Dest.Field_M_Int_16   := Source.Field_M_Int_16;\n+      Dest.Field_N_Float_32 := Source.Field_N_Float_32;\n+      Dest.Field_O_Float_32 := Source.Field_O_Float_32;\n+      Print (Source);\n+      Print (Dest);\n+   end Test_Foo;\n+\n+begin\n+   Test_Foo;\n+end;"}]}